internal static class ChangeTypeFixUtil : object {
    [CanBeNullAttribute]
public static IType GetMatchingDeclaredType(ICSharpExpression expression);
    [NotNullAttribute]
private static IType InferReturnTypeWithAsync(IAnonymousFunctionType anonymousFunctionType, Boolean& isRefReturn);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Intentions.CSharp.BestPracticesQuickFixRegistration : object {
    public IEnumerable`1<Type> Dependencies { get; }
    public sealed virtual IEnumerable`1<Type> get_Dependencies();
    public sealed virtual void Register(IQuickFixesRegistrar table);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Intentions.CSharp.CodeSmellsCodeCleanupRegistration : object {
    public sealed virtual void Register(IHighlightingCleanupItemsRegistrar registrar);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Intentions.CSharp.CodeSmellsQuickFixRegistration : object {
    public IEnumerable`1<Type> Dependencies { get; }
    public sealed virtual IEnumerable`1<Type> get_Dependencies();
    public sealed virtual void Register(IQuickFixesRegistrar table);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Intentions.CSharp.CodeStyleIssuesCodeCleanupRegistration : object {
    public sealed virtual void Register(IHighlightingCleanupItemsRegistrar registrar);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Intentions.CSharp.CodeStyleIssuesQuickFixRegistration : object {
    public IEnumerable`1<Type> Dependencies { get; }
    public sealed virtual IEnumerable`1<Type> get_Dependencies();
    public sealed virtual void Register(IQuickFixesRegistrar table);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Intentions.CSharp.compilerWarningsCodeCleanupRegistration : object {
    public sealed virtual void Register(IHighlightingCleanupItemsRegistrar registrar);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Intentions.CSharp.compilerWarningsQuickFixRegistration : object {
    public IEnumerable`1<Type> Dependencies { get; }
    public sealed virtual IEnumerable`1<Type> get_Dependencies();
    public sealed virtual void Register(IQuickFixesRegistrar table);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Intentions.CSharp.ConstraintsViolationsQuickFixRegistration : object {
    public IEnumerable`1<Type> Dependencies { get; }
    public sealed virtual IEnumerable`1<Type> get_Dependencies();
    public sealed virtual void Register(IQuickFixesRegistrar table);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Intentions.CSharp.ContextActions.<InlineUsingAliasAction>F70BC7BDD32B725EF2C21686C3BBB7B31B49B09036DEF7B29832636797F1AE88E__AliasedNamespaceOrRegularDeclaredTypeBinder : object {
    [CompilerGeneratedAttribute]
private IDeclaredElement <declaredElement>P;
    [CompilerGeneratedAttribute]
private ISubstitution <substitution>P;
    public <InlineUsingAliasAction>F70BC7BDD32B725EF2C21686C3BBB7B31B49B09036DEF7B29832636797F1AE88E__AliasedNamespaceOrRegularDeclaredTypeBinder(IDeclaredElement declaredElement, ISubstitution substitution);
    public sealed virtual void Bind(IReference reference);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Intentions.CSharp.ContextActions.<InlineUsingAliasAction>F70BC7BDD32B725EF2C21686C3BBB7B31B49B09036DEF7B29832636797F1AE88E__AliasedTypeBinder : object {
    [CompilerGeneratedAttribute]
private IType <aliasedType>P;
    public <InlineUsingAliasAction>F70BC7BDD32B725EF2C21686C3BBB7B31B49B09036DEF7B29832636797F1AE88E__AliasedTypeBinder(IType aliasedType);
    public sealed virtual void Bind(IReference reference);
}
[NullableContextAttribute("1")]
internal interface JetBrains.ReSharper.Intentions.CSharp.ContextActions.<InlineUsingAliasAction>F70BC7BDD32B725EF2C21686C3BBB7B31B49B09036DEF7B29832636797F1AE88E__IAliasedSymbolBinder {
    public abstract virtual void Bind(IReference reference);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Intentions.CSharp.ContextActions.<InlineUsingAliasAction>F70BC7BDD32B725EF2C21686C3BBB7B31B49B09036DEF7B29832636797F1AE88E__SameAliasedSymbolScope : Scope {
    private IAliasDirectiveCache myAliasDirectiveCache;
    [CompilerGeneratedAttribute]
private AliasedSymbol <AliasedSymbol>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    public AliasedSymbol AliasedSymbol { get; }
    public string Title { get; }
    public <InlineUsingAliasAction>F70BC7BDD32B725EF2C21686C3BBB7B31B49B09036DEF7B29832636797F1AE88E__SameAliasedSymbolScope(IUsingAliasDirective usingAliasDirective, AliasedSymbol aliasedSymbol);
    [CompilerGeneratedAttribute]
public AliasedSymbol get_AliasedSymbol();
    [CompilerGeneratedAttribute]
public virtual string get_Title();
    public virtual IReadOnlyList`1<IProjectFile> GetProjectFilesToProcess(IProgressIndicator progress);
    public virtual IReadOnlyList`1<IPsiSourceFile> GetSourceFilesToProcess(IProgressIndicator progress, Func`2<IPsiSourceFile, bool> actionSpecificFilter);
    public virtual IProjectModelElement[] GetProjectModelElementsDataConstant();
    public virtual Predicate`1<ITreeNode> GetPsiScopeDescendantsFilter();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.AddAnonymousFieldNameAction : ModernScopedContextActionBase`1<IAnonymousMemberDeclaration> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public AddAnonymousFieldNameAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual IAnonymousMemberDeclaration TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual bool IsAvailable(IAnonymousMemberDeclaration declaration);
    protected virtual IBulbActionCommand ExecutePsiTransaction(IAnonymousMemberDeclaration declaration, ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.AddArgumentNameContextAction : NamedArgumentContextAction {
    [NullableAttribute("2")]
private string myParameterName;
    public string Text { get; }
    public string ScopedText { get; }
    public AddArgumentNameContextAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    protected virtual ArgumentOrParameterDeclaration TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual bool IsAvailable(ICSharpArgument argument);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ArgumentOrParameterDeclaration argumentOrParameter, ISolution solution, IProgressIndicator progress);
    [PureAttribute]
private static bool IsExpandedParamArray(ICSharpArgument argument);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
internal class JetBrains.ReSharper.Intentions.CSharp.ContextActions.AddBracesAction : ModernScopedContextActionBase`1<ICSharpStatement> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    private BracesOwner myBracesOwner;
    public string Text { get; }
    public string ScopedText { get; }
    public AddBracesAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    protected virtual ICSharpStatement TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual ICSharpStatement TryCreateInfoFromTreeNode(ITreeNode treeNode);
    protected virtual bool IsAvailable(ICSharpStatement statement);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ICSharpStatement statement, ISolution solution, IProgressIndicator progress);
    private static void ApplyBracesCodeStyleIfNeeded(ICSharpStatement statement);
    [CompilerGeneratedAttribute]
[PureAttribute]
private bool <TryCreateInfoFromDataProvider>g__CheckCaret|7_0(ITreeNode owner, ITokenNode[] tokens);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal static IIfStatement <ApplyBracesCodeStyleIfNeeded>g__GetIfStatementByAnyBranch|12_0(ICSharpStatement statement);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.AddDeconstructionPatternComponentNameAction : DeconstructionPatternNameActionBase {
    [NullableAttribute("2")]
private string myExpectedComponentName;
    public string ScopedText { get; }
    public string Text { get; }
    public AddDeconstructionPatternComponentNameAction(ICSharpContextActionDataProvider dataProvider);
    public virtual string get_ScopedText();
    public virtual string get_Text();
    protected virtual ISubpattern TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual bool IsAvailable(ISubpattern subpattern);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISubpattern subpattern, ISolution solution, IProgressIndicator progress);
    private static string TryGetComponentName(ISubpattern subpattern);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.AddExceptionDocCommentAction : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public AddExceptionDocCommentAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
private ITreeNode FindThrowNode(ICSharpExpression& exceptionExpression);
    private static ICSharpDocCommentBlock GetContainingDocComment(ITreeNode throwNode);
    private static IDeclaredType GetExceptionType(ICSharpExpression exceptionExpression);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [CompilerGeneratedAttribute]
internal static DisjointedTreeTextRange <FindThrowNode>g__GetRange|5_0(ITokenNode throwKeyword, ICSharpExpression exception);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.AddInheritdocAction : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public AddInheritdocAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.AddPatternVariableAction : ModernContextActionBase`1<SourceEntity> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <dataProvider>P;
    [NullableAttribute("2")]
private IType myVariableType;
    public string Text { get; }
    public AddPatternVariableAction(ICSharpContextActionDataProvider dataProvider);
    public virtual string get_Text();
    protected virtual SourceEntity TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual bool IsAvailable(SourceEntity source);
    [NullableContextAttribute("2")]
[PureAttribute]
private static bool IsSimpleVariableReferenceExpression(ICSharpExpression expression);
    [PureAttribute]
public static bool IsAvailable(IPattern pattern);
    [NullableContextAttribute("2")]
[PureAttribute]
public static ICSharpExpression FindIsNotNullCheckExpression(ICSharpContextActionDataProvider dataProvider, ICSharpExpression& checkedOperand);
    [PureAttribute]
private static IReferenceExpression FindSubpatternQualifierAccess(ICSharpContextActionDataProvider dataProvider);
    [NullableContextAttribute("2")]
[PureAttribute]
private IPattern FindPattern();
    protected virtual IBulbActionCommand ExecutePsiTransaction(SourceEntity source, ISolution solution, IProgressIndicator progress);
    public static IBulbActionCommand Execute(IPattern pattern);
    [CompilerGeneratedAttribute]
internal static TreeRangeChecker <FindPattern>g__AvailabilityRange|12_0(IPattern pattern);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.AddSecondAccessorAction : ModernScopedContextActionBase`1<IAccessorOwnerDeclaration> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    private CSharpAccessorKind myMissingKind;
    private static CSharpAccessorKind[] AllAccessorKinds;
    public string Text { get; }
    public string ScopedText { get; }
    public AddSecondAccessorAction(ICSharpContextActionDataProvider provider);
    private static AddSecondAccessorAction();
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public static string GetText(CSharpAccessorKind missingAccessor, bool multiple);
    protected virtual IAccessorOwnerDeclaration TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual bool IsAvailable(IAccessorOwnerDeclaration accessorOwnerDeclaration);
    protected virtual IBulbActionCommand ExecutePsiTransaction(IAccessorOwnerDeclaration accessorOwnerDeclaration, ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.AddSwitchConditionComponentAction : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <dataProvider>P;
    public string Text { get; }
    public AddSwitchConditionComponentAction(ICSharpContextActionDataProvider dataProvider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [PureAttribute]
private ValueTuple`2<ITreeNode, int> FindSwitchNodeAndInsertionIndex();
    [NullableContextAttribute("2")]
[PureAttribute]
private static int FindInsertionIndexInExistingTupleCondition(ICSharpExpression dispatchExpression, TreeTextRange selectedRange);
    private static IReadOnlyList`1<IPattern> CollectPatternsToRewrite(ITreeNode switchNode);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [NullableContextAttribute("2")]
[PureAttribute]
private static int GetTupleConditionComponentsCount(ICSharpExpression conditionExpression);
    private static void RemoveRedundantSwitchStatementParentheses(ISwitchStatement switchStatement);
    [CompilerGeneratedAttribute]
internal static int <FindSwitchNodeAndInsertionIndex>g__AfterLastComponentIndex|5_0(ICSharpExpression conditionExpression);
    [CompilerGeneratedAttribute]
internal static bool <CollectPatternsToRewrite>g__IsPatternToSkip|7_0(IPattern pattern, <>c__DisplayClass7_0& );
    [CompilerGeneratedAttribute]
internal static void <ExecutePsiTransaction>g__TransformToTuple|8_1(ICSharpExpression conditionExpression, <>c__DisplayClass8_0& );
    [CompilerGeneratedAttribute]
internal static void <ExecutePsiTransaction>g__AddTupleComponent|8_2(ICSharpExpression conditionExpression, <>c__DisplayClass8_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.AddSwitchSectionBracesAction : ModernScopedContextActionBase`1<ISwitchSection> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <dataProvider>P;
    public string Text { get; }
    public AddSwitchSectionBracesAction(ICSharpContextActionDataProvider dataProvider);
    public virtual string get_Text();
    protected virtual FileCollectorInfo GetFileCollectorInfo(ISwitchSection switchSection);
    protected virtual ISwitchSection TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual bool IsAvailable(ISwitchSection switchSection);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISwitchSection switchSection, ISolution solution, IProgressIndicator progress);
    public static void Execute(ISwitchSection switchSection);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.AddTupleComponentNameAction : TupleComponentNameActionBase {
    [NullableAttribute("2")]
private string myExpectedComponentName;
    public string ScopedText { get; }
    public string Text { get; }
    public AddTupleComponentNameAction(ICSharpContextActionDataProvider dataProvider);
    public virtual string get_ScopedText();
    public virtual string get_Text();
    protected virtual ITupleComponent TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual bool IsAvailable(ITupleComponent tupleComponent);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ITupleComponent tupleComponent, ISolution solution, IProgressIndicator progress);
    private static string TryGetTargetComponentName(ITupleComponent tupleComponent);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.AddUsingAction : object {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public AddUsingAction(ICSharpContextActionDataProvider provider);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.AddUsingAction/<CreateBulbItems>d__3")]
public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    [NullableContextAttribute("2")]
protected ActionContext TryCreateInfoFromDataProvider();
    [NullableContextAttribute("2")]
public static ActionContext TryCreateInfoFromTreeNode(ITreeNode treeNode);
    public static bool IsAvailable(ActionContext actionContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.AddUsingDeclarationAction : ModernScopedContextActionBase`1<ActionContext> {
    private ActionContext myActionContext;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ScopedText>k__BackingField;
    public string Text { get; }
    public string ScopedText { get; }
    public AddUsingDeclarationAction(ActionContext actionContext);
    [CompilerGeneratedAttribute]
public virtual string get_Text();
    [CompilerGeneratedAttribute]
public virtual string get_ScopedText();
    protected virtual ActionContext TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual ActionContext TryCreateInfoFromTreeNode(ITreeNode treeNode);
    protected virtual ITreeNode TryGetContextTreeNode(ActionContext availabilityInfo);
    [NullableContextAttribute("2")]
protected virtual bool IsAvailable(ActionContext availabilityInfo);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ActionContext actionContext, ISolution solution, IProgressIndicator progress);
    protected virtual FileCollectorInfo GetFileCollectorInfo(ActionContext availabilityInfo);
    [CompilerGeneratedAttribute]
internal static bool <GetFileCollectorInfo>g__IsCSharpClosure|13_0(ITreeNode treeNode);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.AddUsingStatementBulbAction : ModernBulbActionBase {
    private ActionContext myActionContext;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public string Text { get; }
    public AddUsingStatementBulbAction(ActionContext actionContext);
    [CompilerGeneratedAttribute]
public virtual string get_Text();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static ICSharpStatementsRange CollectDeclaredResourceUsageRange(ICSharpStatement declarationStatement, IEnumerable`1<ILocalVariableDeclaration> declarations);
    [NullableContextAttribute("2")]
public static void ApplyBracesStyle(IUsingStatement usingStatement);
    [CompilerGeneratedAttribute]
internal static ICSharpStatement <CollectDeclaredResourceUsageRange>g__GetLatestStatement|6_0(DisjointSetNode& elementsSet);
    [CompilerGeneratedAttribute]
internal static void <CollectDeclaredResourceUsageRange>g__CollectElements|6_1(ITreeNode treeNode, <>c__DisplayClass6_0& );
    [CompilerGeneratedAttribute]
internal static DisjointSetNode <CollectDeclaredResourceUsageRange>g__GetOrCreateElementSet|6_2(IDeclaredElement declaredElement, <>c__DisplayClass6_0& );
    [CompilerGeneratedAttribute]
internal static ICSharpStatement <CollectDeclaredResourceUsageRange>g__FindLatestReferencingStatementNotUnderAnotherFunction|6_3(IDeclaredElement declaredElement, <>c__DisplayClass6_0& );
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal static bool <CollectDeclaredResourceUsageRange>g__IsPrimitive|6_4(IType type);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.AnnotateDataMembersAction : WcfAnnotatorActionBase`1<IClassLikeDeclaration> {
    public string Text { get; }
    public AnnotateDataMembersAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.AnnotateDataMembersAction/<GetMembersForAnnotation>d__3")]
protected virtual IEnumerable`1<IAttributesOwner> GetMembersForAnnotation(IClassLikeDeclaration declaration);
    protected virtual IClrTypeName GetRequiredDeclarationAttributeClrTypeName();
    protected virtual IClrTypeName GetAnnotationAttributeClrTypeName();
    private static IEnumerable`1<ITypeMember> GetMemberDeclarations(ITypeElement typeElement);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.AnnotateEnumMembersAction : WcfAnnotatorActionBase`1<IEnumDeclaration> {
    public string Text { get; }
    public AnnotateEnumMembersAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual IEnumerable`1<IAttributesOwner> GetMembersForAnnotation(IEnumDeclaration declaration);
    protected virtual IClrTypeName GetRequiredDeclarationAttributeClrTypeName();
    protected virtual IClrTypeName GetAnnotationAttributeClrTypeName();
}
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.AnnotateNullableAction : ModernBulbActionBase {
    [NotNullAttribute]
private IList`1<IAttributesOwnerDeclaration> myAnnotationTargets;
    [CanBeNullAttribute]
private ITypeElement myAnnotationType;
    [CanBeNullAttribute]
private string myAnnotationHint;
    [CompilerGeneratedAttribute]
private IAnchor <CustomAnchor>k__BackingField;
    public string Text { get; }
    [CanBeNullAttribute]
public string AnnotationShortName { get; }
    [CanBeNullAttribute]
public IAnchor CustomAnchor { get; }
    public AnnotateNullableAction(IList`1<IAttributesOwnerDeclaration> annotationTargets, ITypeElement annotationType, IAnchor customAnchor, string annotationHint);
    public virtual string get_Text();
    public string get_AnnotationShortName();
    [CompilerGeneratedAttribute]
public IAnchor get_CustomAnchor();
    private sealed virtual override void JetBrains.ReSharper.Feature.Services.Intentions.Scoped.BulbActions.ISimpleScopedBulbAction.ExecutePsiTransactionInScopedExecution(ISolution solution);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [PureAttribute]
private bool CheckAllMembersIncluded(IMultipleDeclaration multipleDeclaration);
    private void Annotate(IAttributesOwnerDeclaration annotationTarget, bool wholeMultiDeclaration);
    [NotNullAttribute]
private string GetActionText(string annotationShortName);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.AnnotateOperationContractsAction : WcfAnnotatorActionBase`1<IInterfaceDeclaration> {
    public string Text { get; }
    public AnnotateOperationContractsAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IEnumerable`1<IAttributesOwner> GetMembersForAnnotation(IInterfaceDeclaration declaration);
    protected virtual IClrTypeName GetRequiredDeclarationAttributeClrTypeName();
    protected virtual IClrTypeName GetAnnotationAttributeClrTypeName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.AnonymousMethodToLambdaExpressionAction : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public static string ActionText;
    public string Text { get; }
    public AnonymousMethodToLambdaExpressionAction(ICSharpContextActionDataProvider provider);
    private static AnonymousMethodToLambdaExpressionAction();
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    public static bool IsAvailable(IAnonymousMethodExpression methodExpression);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public static void Execute(IAnonymousMethodExpression anonymousMethodExpression);
    private static void BakeLambdaParameters(IAnonymousMethodExpression methodExpression, ILambdaExpression lambdaExpression, CSharpElementFactory factory);
    private static string SuggestParameterName(NamingManager namingManager, IAnonymousMethodExpression methodExpression, IPsiSourceFile psiSourceFile, IParameter parameter);
    private static void TryUseExpressionBody(ILambdaExpression lambdaExpression);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.AnonymousMethodToLocalFunctionAction : ToLocalFunctionActionBase {
    [NullableContextAttribute("1")]
public AnonymousMethodToLocalFunctionAction(ICSharpContextActionDataProvider dataProvider);
    [NullableContextAttribute("2")]
protected virtual IAnonymousFunctionExpression GetFunctionExpression();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.AnonymousToDeclaredTypeAction : ContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public AnonymousToDeclaredTypeAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.AnonymousToNamedMethodAction : ToNamedMethodActionBase {
    [NullableContextAttribute("1")]
public AnonymousToNamedMethodAction(ICSharpContextActionDataProvider dataProvider);
    [NullableContextAttribute("2")]
protected virtual IAnonymousFunctionExpression GetFunctionExpression();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.AnonymousToTupleAction : ModernScopedContextActionBase`1<IAnonymousObjectCreationExpression> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public AnonymousToTupleAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual IAnonymousObjectCreationExpression TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual bool IsAvailable(IAnonymousObjectCreationExpression creationExpression);
    [PureAttribute]
private static bool IsWellFormedAndMultiComponent(IAnonymousObjectCreationExpression creationExpression);
    protected virtual IBulbActionCommand ExecutePsiTransaction(IAnonymousObjectCreationExpression creationExpression, ISolution solution, IProgressIndicator progress);
    private static void CollectCreationsOfTheSameType(IAnonymousObjectCreationExpression creationExpression, HashSet`1<IAnonymousObjectCreationExpression> expressionsToProcess);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Intentions.CSharp.ContextActions.ArrowExpressionClauseConverter : ToReturnStatementConverter {
    [CompilerGeneratedAttribute]
private IArrowExpressionClause <arrowExpressionClause>P;
    public ArrowExpressionClauseConverter(IArrowExpressionClause arrowExpressionClause, CSharpElementFactory factory);
    public virtual ISwitchStatement ReplaceOriginalStatementWithSwitchStatement(ISwitchStatement switchStatement);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.AssertNotNullAction : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <dataProvider>P;
    private static IAnchor ourAssertAnchor;
    public static InvisibleAnchor AssertAnchor;
    public static Key`1<object> AssertNotNullActionKey;
    [NullableAttribute("2")]
private IReferenceExpression myReferenceExpression;
    public static string ActionText;
    public string Text { get; }
    public AssertNotNullAction(ICSharpContextActionDataProvider dataProvider);
    private static AssertNotNullAction();
    public virtual string get_Text();
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public static IBulbActionCommand AddAssert(IReferenceExpression target, ISolution solution);
    [NullableContextAttribute("2")]
private IReferenceExpression FindReferenceExpression();
    [NullableContextAttribute("2")]
public static bool IsAvailableFor(IReferenceExpression reference);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Intentions.CSharp.ContextActions.AssignmentConverter : ToAssignmentConverter {
    [CompilerGeneratedAttribute]
private IAssignmentExpression <assignmentExpression>P;
    public AssignmentConverter(IAssignmentExpression assignmentExpression, CSharpElementFactory factory);
    public virtual ISwitchStatement ReplaceOriginalStatementWithSwitchStatement(ISwitchStatement switchStatement);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Intentions.CSharp.ContextActions.AssignmentInArrowExpressionClauseConverter : AssignmentConverter {
    [CompilerGeneratedAttribute]
private IArrowExpressionClause <arrowExpressionClause>P;
    public AssignmentInArrowExpressionClauseConverter(IArrowExpressionClause arrowExpressionClause, CSharpElementFactory factory);
    public virtual ISwitchStatement ReplaceOriginalStatementWithSwitchStatement(ISwitchStatement switchStatement);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.AutoAccessorToExplicitAction : ModernScopedContextActionBase`1<IAccessorDeclaration> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public AutoAccessorToExplicitAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual IAccessorDeclaration TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual bool IsAvailable(IAccessorDeclaration accessorDeclaration);
    public static bool CanMakeFieldExplicit(IAccessorDeclaration accessorDeclaration);
    protected virtual IBulbActionCommand ExecutePsiTransaction(IAccessorDeclaration accessorDeclaration, ISolution solution, IProgressIndicator progress);
    public static void Execute(IAccessorDeclaration accessorDeclaration);
    private static void ApplyAccessorBodyStyle(IAccessorDeclaration accessorDeclaration);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.AutoPropertyToBackingFieldAction : AutoPropertyToBackingFieldActionBase {
    public static string ActionText;
    public string Text { get; }
    public AutoPropertyToBackingFieldAction(ICSharpContextActionDataProvider provider);
    private static AutoPropertyToBackingFieldAction();
    public virtual string get_Text();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ICSharpDeclaration declaration, ISolution solution, IProgressIndicator progress);
    public static IFieldDeclaration Execute(IPropertyDeclaration propertyDeclaration);
    public static IFieldDeclaration Execute(IPropertyDeclaration propertyDeclaration, bool removeSetterIfPossible, Action`2<IPropertyDeclaration, ICSharpExpression> accessorBodyFactory);
    private static bool IsRequiredNotNullTypeProperty(IPropertyDeclaration propertyDeclaration);
    public static IBulbActionCommand CreateHotspotsForFieldUsage(IPropertyDeclaration propertyDeclaration, IFieldDeclaration fieldDeclaration, ISolution solution);
    private static int FindInitialRangeFromGetAccessor(IPropertyDeclaration declaration, List`1<DocumentRange> ranges);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class JetBrains.ReSharper.Intentions.CSharp.ContextActions.AutoPropertyToBackingFieldActionBase : ModernScopedContextActionBase`1<ICSharpDeclaration> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    protected AutoPropertyToBackingFieldActionBase(ICSharpContextActionDataProvider provider);
    protected virtual ICSharpDeclaration TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual ICSharpDeclaration TryCreateInfoFromTreeNode(ITreeNode treeNode);
    protected virtual bool IsAvailable(ICSharpDeclaration declaration);
    [NullableContextAttribute("2")]
[PureAttribute]
public static bool IsAvailable(IPropertyDeclaration propertyDeclaration);
    protected static void FormatPropertyDeclaration(IPropertyDeclaration propertyDeclaration);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.AutoPropertyToFieldKeywordAction : AutoPropertyToBackingFieldActionBase {
    public static string ActionText;
    public string Text { get; }
    public AutoPropertyToFieldKeywordAction(ICSharpContextActionDataProvider provider);
    private static AutoPropertyToFieldKeywordAction();
    public virtual string get_Text();
    protected virtual bool IsAvailable(ICSharpDeclaration declaration);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ICSharpDeclaration declaration, ISolution solution, IProgressIndicator progress);
    public static void Execute(IPropertyDeclaration propertyDeclaration, Action`2<IPropertyDeclaration, ICSharpExpression> accessorBodyFactory);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.BodyExpressionToStatementAction : ModernScopedContextActionBase`1<IExpressionBodyOwnerDeclaration> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <dataProvider>P;
    private CaretPlacement myCaretPlacement;
    public string Text { get; }
    public string ScopedText { get; }
    public BodyExpressionToStatementAction(ICSharpContextActionDataProvider dataProvider);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    protected virtual IExpressionBodyOwnerDeclaration TryCreateInfoFromDataProvider(IUserDataHolder cache);
    [PureAttribute]
private Nullable`1<CaretPlacement> CheckAvailabilityRange(IExpressionBodyOwnerDeclaration expressionBodyOwnerDeclaration, TreeTextRange selectedRange);
    protected virtual bool IsAvailable(IExpressionBodyOwnerDeclaration declaration);
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    protected virtual IBulbActionCommand ExecutePsiTransaction(IExpressionBodyOwnerDeclaration declaration, ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.BodyStatementToExpressionAction : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    private CaretPlacement myCaretPlacement;
    public static string ActionText;
    public string Text { get; }
    public BodyStatementToExpressionAction(ICSharpContextActionDataProvider provider);
    private static BodyStatementToExpressionAction();
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
[PureAttribute]
private IExpressionBodyOwnerDeclaration FindContainingExpressionBodyOwnerDeclaration();
    [PureAttribute]
private bool IsAvailableAtHeader(IExpressionBodyOwnerDeclaration bodyOwnerDeclaration);
    [PureAttribute]
private bool IsAvailableAtBody(IBlock blockBody, StatementToExpressionConversion conversion);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public static IBulbActionCommand Execute(IExpressionBodyOwnerDeclaration bodyOwnerDeclaration);
    private static IBulbActionCommand ExecuteImpl(IExpressionBodyOwnerDeclaration bodyOwnerDeclaration, CaretPlacement caretPlacement);
    private static IBulbActionCommand TransformToExpressionBody(IExpressionBodyOwnerDeclaration bodyOwnerDeclaration, ICSharpExpression expression, CaretPlacement caretPlacement);
    [PureAttribute]
public static bool FindExistingBody(IExpressionBodyOwnerDeclaration bodyOwner, CSharpCodeBody& codeBody);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.CaptureEntityNameFromStringLiteralAction : ModernScopedContextActionBase`1<IdentifierInfo> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <dataProvider>P;
    [NullableAttribute("2")]
private string myEntityKind;
    public string Text { get; }
    public string ScopedText { get; }
    public CaptureEntityNameFromStringLiteralAction(ICSharpContextActionDataProvider dataProvider);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    protected virtual IdentifierInfo TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual IdentifierInfo TryCreateInfoFromTreeNode(ITreeNode treeNode);
    protected virtual bool IsAvailable(IdentifierInfo identifierInfo);
    protected virtual IBulbActionCommand ExecutePsiTransaction(IdentifierInfo identifierInfo, ISolution solution, IProgressIndicator progress);
    [NullableContextAttribute("2")]
private static IdentifierInfo TryGetPotentialIdentifierInfo(SliceableStringExpressionToken token, TreeOffset selectionStart);
    [CompilerGeneratedAttribute]
internal static TreeTextRange <TryGetPotentialIdentifierInfo>g__GetTreeRange|12_0(SliceableStringExpressionToken token, TextRange sourceRange);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.CatchExceptionToCatchAction : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public CatchExceptionToCatchAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.CatchToCatchExceptionAction : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public CatchToCatchExceptionAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.ChangeModifierAction : object {
    [NotNullAttribute]
private ICSharpContextActionDataProvider myDataProvider;
    [NotNullAttribute]
private List`1<VisibilityBulbAction> myActions;
    private Nullable`1<AccessRights> myAccessRightsToRemove;
    private bool myInvokedOverName;
    [NotNullAttribute]
private static NodeTypeSet ourVisibilityModifiers;
    [NotNullAttribute]
private static SubmenuAnchor ourSubmenuAnchor;
    public ChangeModifierAction(ICSharpContextActionDataProvider dataProvider);
    private static ChangeModifierAction();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.ChangeModifierAction/<CreateBulbItems>d__7")]
public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    [CanBeNullAttribute]
private IModifiersListOwner FindModifiersListNode(Boolean& invokedOverName);
    private static bool IsFixedPlaceToken(ITreeNode treeNode);
    private bool IsAvailableEx();
    private bool IsAvailableForConstructorOfAbstractClass(IClass classType, IModifiersListOwner modifiersListOwner, bool hasSuperMembers, IModifiersOwner modifiersOwner);
    private bool IsAvailableForAccessor(IAccessorDeclaration accessorDeclaration, IModifiersListOwner modifiersListOwner, MemberOwner memberOwner, bool hasSuperMembers, IModifiersOwner modifiersOwner);
    private bool IsAvailableForProperty(IPropertyDeclaration propertyDeclaration, bool hasSuperMembers, ITypeElement containingType, IModifiersListOwner modifiersListOwner, MemberOwner memberOwner, IModifiersOwner modifiersOwner);
    private bool IsAvailableForFields(IFieldDeclaration fieldDeclaration, ITypeElement containingType, IModifiersListOwner modifiersListOwner, MemberOwner memberOwner, bool hasSuperMembers, IModifiersOwner modifiersOwner);
    private static void RemoveRequiredMemberIncompatibleAccessRights(ITypeElement containingType, List`1<AccessRights> candidates);
    [CanBeNullAttribute]
[PureAttribute]
private static IModifiersOwner GetModifiersOwner(IModifiersListOwner modifiersListOwner);
    private static bool CanChangeVisibility(IModifiersListOwner modifiersListOwner, Boolean& hasSuperMembers);
    [PureAttribute]
private static MemberOwner CalculateMemberOwner(ITypeElement containingType, ITreeNode context);
    [NotNullAttribute]
[PureAttribute]
private static IList`1<AccessRights> GetCandidatesByAccessor(IAccessorDeclaration accessorDeclaration, AccessRights ownerAccessRights);
    [NotNullAttribute]
[PureAttribute]
private static ICollection`1<AccessRights> CalculateAccessRights(IModifiersListOwner modifiersListOwner, MemberOwner containingOwner, ICollection`1<AccessRights> candidates, bool hasSuperMembers);
    private static bool IsImplicitModifierUsed(IModifiersListOwner modifiersListOwner, TokenNodeType modifierKeyword, Expression`1<Func`2<CSharpCodeStyleSettingsKey, DefaultModifierDefinition>> settingKey);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.ChangeOverridableKindAction : object {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <dataProvider>P;
    private IList`1<ChangeOverrideabilityAction> myActions;
    private static IAnchor ourChangeOverridableSubmenuAnchor;
    private static NodeTypeSet ourPolymorphicModifiers;
    public ChangeOverridableKindAction(ICSharpContextActionDataProvider dataProvider);
    private static ChangeOverridableKindAction();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    [PureAttribute]
private bool IsPolymorphicModifierOrNameSelected(ICSharpDeclaration memberDeclaration);
    [PureAttribute]
private static Nullable`1<OverridableKind> GetOverridableKind(ICSharpModifiersOwnerDeclaration modifiersOwner);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.ChangeSetterKindAction : ModernScopedContextActionBase`1<IAccessorDeclaration> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    private bool myToInitOnly;
    public string Text { get; }
    public ChangeSetterKindAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual IAccessorDeclaration TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual bool IsAvailable(IAccessorDeclaration accessorDeclaration);
    protected virtual IBulbActionCommand ExecutePsiTransaction(IAccessorDeclaration accessorDeclaration, ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.ChangeTypeKindAction : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    private bool myIsRecord;
    private bool myIsValueType;
    public string Text { get; }
    public ChangeTypeKindAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    private static bool CanSwitchKind(ITypeElement typeElement);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public static void Execute(IClassLikeDeclaration classLikeDeclaration);
    public static void ChangeTypeElementKind(ITypeElement typeElement, TokenNodeType typeKeyword, CompositeNodeType targetNodeType);
    private static void PrepareRecordDeclaration(IRecordDeclaration recordDeclaration);
    [CompilerGeneratedAttribute]
internal static void <PrepareRecordDeclaration>g__ToExplicitPropertiesAndDeconstruct|11_0(<>c__DisplayClass11_0& );
}
internal static class JetBrains.ReSharper.Intentions.CSharp.ContextActions.Check.BoundsCheckUtil : object {
    [PureAttribute]
public static bool MakesSenseToCheck(ICSharpExpression indexExpression);
    public static bool IsCheckRequiresTempVariables(ICSharpExpression indexExpression);
    [NotNullAttribute]
[PureAttribute]
public static ICSharpExpression CreateCheck(CSharpElementFactory factory, ICSharpExpression collectionExpression, ICSharpExpression indexExpression, string collectionLengthPropertyName, List`1<IDeclarationStatement> tempDeclarations);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.Check.CheckArrayIndexValueAction : CheckRangeActionBase {
    public string Text { get; }
    public CheckArrayIndexValueAction(ICSharpContextActionDataProvider provider);
    protected virtual ICSharpExpression CreateCheckExpression(ICSharpExpression qualifierExpression, ICSharpExpression argumentValue, List`1<IDeclarationStatement> variableDeclarations);
    public virtual string get_Text();
    protected virtual bool IsValidParameterName(string parameterName);
    protected virtual bool IsValidParametersOwner(IParametersOwner parametersOwner, CSharpParameterInstance matchingParameter);
    protected virtual bool IsCheckRequiresBlockBody(ICSharpExpression argumentValue);
    protected virtual bool IsValidArgumentValue(ICSharpExpression argumentValue);
    protected virtual bool IsValidQualifierType(IType qualifierType, IPsiModule psiModule);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.Check.CheckCollectionIndexValueAction : CheckRangeActionBase {
    public string Text { get; }
    public CheckCollectionIndexValueAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual ICSharpExpression CreateCheckExpression(ICSharpExpression qualifierExpression, ICSharpExpression argumentValue, List`1<IDeclarationStatement> variableDeclarations);
    protected virtual bool IsValidParameterName(string parameterName);
    protected virtual bool IsValidParametersOwner(IParametersOwner parametersOwner, CSharpParameterInstance matchingParameter);
    protected virtual bool IsCheckRequiresBlockBody(ICSharpExpression argumentValue);
    protected virtual bool IsValidArgumentValue(ICSharpExpression argumentValue);
    protected virtual bool IsValidQualifierType(IType qualifierType, IPsiModule psiModule);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
internal class JetBrains.ReSharper.Intentions.CSharp.ContextActions.Check.CheckDictionaryKeyValueAction : CheckRangeActionBase {
    public string Text { get; }
    public CheckDictionaryKeyValueAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual ICSharpExpression CreateCheckExpression(ICSharpExpression qualifierExpression, ICSharpExpression argumentValue, List`1<IDeclarationStatement> variableDeclarations);
    [PureAttribute]
private bool IsKeyAbsenceCheck();
    protected virtual bool IsValidParameterName(string parameterName);
    protected virtual bool IsValidParametersOwner(IParametersOwner parametersOwner, CSharpParameterInstance matchingParameter);
    protected virtual bool IsCheckRequiresBlockBody(ICSharpExpression argumentValue);
    protected virtual bool IsValidArgumentValue(ICSharpExpression argumentValue);
    protected virtual bool IsValidQualifierType(IType qualifierType, IPsiModule psiModule);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Intentions.CSharp.ContextActions.Check.CheckRangeActionBase : ModernContextActionBase {
    protected ICSharpContextActionDataProvider Provider;
    [NullableAttribute("2")]
protected string CachedParametersOwnerName;
    protected CheckRangeActionBase(ICSharpContextActionDataProvider provider);
    public virtual bool IsAvailable(IUserDataHolder cache);
    private ValueTuple`2<ICSharpArgument, ICSharpExpression> FindArgumentAndQualifier();
    [PureAttribute]
protected abstract virtual bool IsValidArgumentValue(ICSharpExpression argumentValue);
    [PureAttribute]
protected abstract virtual bool IsValidQualifierType(IType qualifierType, IPsiModule psiModule);
    [PureAttribute]
protected abstract virtual bool IsValidParameterName(string parameterName);
    [PureAttribute]
protected abstract virtual bool IsValidParametersOwner(IParametersOwner parametersOwner, CSharpParameterInstance matchingParameter);
    [PureAttribute]
protected abstract virtual bool IsCheckRequiresBlockBody(ICSharpExpression argumentValue);
    private static ArgumentMatchInfo GetArgumentMatchInfo(ICSharpArgument argument);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [NullableContextAttribute("2")]
[PureAttribute]
private static ICSharpExpression GetQualifierExpression(ICSharpArgumentsOwner element);
    private IIfStatement AddCheck(ICSharpExpression argumentValue, ICSharpExpression qualifierExpression);
    private void FixupContext(ICSharpExpression& argumentValue, ICSharpExpression& qualifierExpression, ICSharpStatement& containingStatement, ICSharpExpression& conditionalExpression);
    [PureAttribute]
protected abstract virtual ICSharpExpression CreateCheckExpression(ICSharpExpression qualifierExpression, ICSharpExpression argumentValue, List`1<IDeclarationStatement> variableDeclarations);
    [MustUseReturnValueAttribute]
private static int FindEndIndexForCheck(IStatementsOwner block, int startIndex, List`1<IDeclaration> usages);
    private static IIfStatement ReplaceWithCheckStatement(ICSharpStatement statement, IIfStatement checkStatement);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
internal class JetBrains.ReSharper.Intentions.CSharp.ContextActions.Check.CheckSpanIndexValueAction : CheckRangeActionBase {
    public string Text { get; }
    public CheckSpanIndexValueAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual ICSharpExpression CreateCheckExpression(ICSharpExpression qualifierExpression, ICSharpExpression argumentValue, List`1<IDeclarationStatement> variableDeclarations);
    protected virtual bool IsValidParameterName(string parameterName);
    protected virtual bool IsValidParametersOwner(IParametersOwner parametersOwner, CSharpParameterInstance matchingParameter);
    protected virtual bool IsCheckRequiresBlockBody(ICSharpExpression argumentValue);
    protected virtual bool IsValidArgumentValue(ICSharpExpression argumentValue);
    protected virtual bool IsValidQualifierType(IType qualifierType, IPsiModule psiModule);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
internal class JetBrains.ReSharper.Intentions.CSharp.ContextActions.Check.CheckStringBuilderIndexValueAction : CheckRangeActionBase {
    private static IClrTypeName ourStringBuilderTypeName;
    public string Text { get; }
    public CheckStringBuilderIndexValueAction(ICSharpContextActionDataProvider provider);
    private static CheckStringBuilderIndexValueAction();
    public virtual string get_Text();
    protected virtual ICSharpExpression CreateCheckExpression(ICSharpExpression qualifierExpression, ICSharpExpression argumentValue, List`1<IDeclarationStatement> variableDeclarations);
    protected virtual bool IsValidParameterName(string parameterName);
    protected virtual bool IsValidParametersOwner(IParametersOwner parametersOwner, CSharpParameterInstance matchingParameter);
    protected virtual bool IsCheckRequiresBlockBody(ICSharpExpression argumentValue);
    protected virtual bool IsValidArgumentValue(ICSharpExpression argumentValue);
    protected virtual bool IsValidQualifierType(IType qualifierType, IPsiModule psiModule);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
internal class JetBrains.ReSharper.Intentions.CSharp.ContextActions.Check.CheckStringIndexValueAction : CheckRangeActionBase {
    public string Text { get; }
    public CheckStringIndexValueAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual ICSharpExpression CreateCheckExpression(ICSharpExpression qualifierExpression, ICSharpExpression argumentValue, List`1<IDeclarationStatement> variableDeclarations);
    protected virtual bool IsValidParameterName(string parameterName);
    protected virtual bool IsValidParametersOwner(IParametersOwner parametersOwner, CSharpParameterInstance matchingParameter);
    protected virtual bool IsCheckRequiresBlockBody(ICSharpExpression argumentValue);
    protected virtual bool IsValidArgumentValue(ICSharpExpression argumentValue);
    protected virtual bool IsValidQualifierType(IType qualifierType, IPsiModule psiModule);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Intentions.CSharp.ContextActions.CheckParameters.ArgumentOutOfRangeAssertionUtil : object {
    private static Dictionary`2<string, int> ourAssertionMethodsWithPriority;
    private static ArgumentOutOfRangeAssertionUtil();
    public static bool IsNumberBaseType(IType type, ITreeNode context);
    public static IEnumerable`1<string> GetAssertionMethodNames(ITreeNode context);
    public static IEnumerable`1<string> Prioritize(IEnumerable`1<string> methods);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Intentions.CSharp.ContextActions.CheckParameters.CheckAll.AllStringParameterCheckBase : StringParameterCheckBase {
    private IList`1<ICSharpParameterDeclaration> myParameterDeclarations;
    public string Text { get; }
    protected AllStringParameterCheckBase(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual bool IsAvailableForParameterType(IType type, ITypeElement context, IPsiModule psiModule, IPsiSourceFile psiSourceFile);
    protected virtual ITypeElement GetExceptionType(IType parameterType, IPsiModule psiModule);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.CheckParameters.CheckAll.AllStringParameterIsNotNullOrEmptyCheckAction : AllStringParameterCheckBase {
    protected string CheckMethodName { get; }
    protected string ExceptionMessage { get; }
    protected IAnchor Anchor { get; }
    public AllStringParameterIsNotNullOrEmptyCheckAction(ICSharpContextActionDataProvider provider);
    protected virtual string get_CheckMethodName();
    protected virtual string get_ExceptionMessage();
    protected virtual IAnchor get_Anchor();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.CheckParameters.CheckAll.AllStringParameterIsNotNullOrWhitespaceCheckAction : AllStringParameterCheckBase {
    protected string CheckMethodName { get; }
    protected string ExceptionMessage { get; }
    protected IAnchor Anchor { get; }
    public AllStringParameterIsNotNullOrWhitespaceCheckAction(ICSharpContextActionDataProvider provider);
    protected virtual string get_CheckMethodName();
    protected virtual string get_ExceptionMessage();
    protected virtual IAnchor get_Anchor();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.CheckParameters.CheckAll.CheckAllParamsNullAction : CheckParamNullAction {
    private IList`1<ICSharpParameterDeclaration> myParameterDeclarations;
    public string Text { get; }
    public CheckAllParamsNullAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual bool IsAvailableForParameterType(IType type, ITypeElement context, IPsiModule psiModule, IPsiSourceFile psiSourceFile);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.CheckParameters.CollectionIsNotEmptyCheckAction : ParameterCheckActionBase {
    public string Text { get; }
    public CollectionIsNotEmptyCheckAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual ITypeElement GetExceptionType(IType parameterType, IPsiModule psiModule);
    protected virtual bool IsAvailableForParameterType(IType type, ITypeElement context, IPsiModule psiModule, IPsiSourceFile psiSourceFile);
    private static bool IsCollectionType(IType type, IPsiModule psiModule);
    protected virtual ICSharpStatement CreateCheckStatement(CSharpElementFactory factory, IParameter parameter, ICSharpExpression parameterName, IPsiModule psiModule);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.CheckParameters.EnumParameterIsDefinedCheckAction : ParameterCheckActionBase {
    public string Text { get; }
    public EnumParameterIsDefinedCheckAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual ITypeElement GetExceptionType(IType parameterType, IPsiModule psiModule);
    protected virtual bool IsAvailableForParameterType(IType type, ITypeElement context, IPsiModule psiModule, IPsiSourceFile psiSourceFile);
    protected virtual ICSharpStatement CreateCheckStatement(CSharpElementFactory factory, IParameter parameter, ICSharpExpression parameterName, IPsiModule psiModule);
    private static bool IsImplicitlyConvertibleToInt(IType parameterType, PredefinedType predefinedType, IPsiModule psiModule);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.CheckParameters.NumericParameterCheckRangeAction : ParameterCheckActionBase {
    private ICSharpContextActionDataProvider myProvider;
    public string Text { get; }
    public NumericParameterCheckRangeAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual ITypeElement GetExceptionType(IType parameterType, IPsiModule psiModule);
    protected virtual bool IsAvailableForParameterType(IType type, ITypeElement context, IPsiModule psiModule, IPsiSourceFile psiSourceFile);
    protected virtual ICSharpStatement CreateCheckStatement(CSharpElementFactory factory, IParameter parameter, ICSharpExpression parameterName, IPsiModule psiModule);
    [NullableContextAttribute("2")]
protected virtual IBulbActionCommand HandleAddedStatements(ICSharpStatement[] statements);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.CheckParameters.NumericParameterCheckRangeAction/<GetDocumentRangesFromInvocations>d__8")]
private static IEnumerable`1<DocumentRange> GetDocumentRangesFromInvocations(ICSharpStatement[] statements);
    private IReadOnlyCollection`1<string> GetAvailableAssertionMethods();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Intentions.CSharp.ContextActions.CheckParameters.ParameterCheckActionBase : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    protected ParameterCheckActionBase(ICSharpContextActionDataProvider provider);
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [NullableContextAttribute("2")]
protected ICSharpParameterDeclaration GetSelectedParameterDeclaration();
    [NullableContextAttribute("2")]
protected IAccessorDeclaration GetSelectedAccessorDeclaration();
    protected bool IsAvailableWithParameter(ICSharpParameterDeclaration parameterDeclaration);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.CheckParameters.ParameterCheckActionBase/<GetModifiableTreeNodes>d__7")]
private static IEnumerable`1<CSharpCodeBody> GetModifiableTreeNodes(ICSharpParameterDeclaration parameterDeclaration);
    [NullableContextAttribute("2")]
[ContractAnnotationAttribute("parameterDeclaration:null=>null")]
protected static IEnumerable`1<ICSharpParameterDeclaration> GetMultipleParameterDeclarations(ICSharpParameterDeclaration parameterDeclaration);
    private bool IsAvailableWithSetter(IAccessorDeclaration accessorDeclaration);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.CheckParameters.ParameterCheckActionBase/<ExecuteOverParameter>d__10")]
protected IEnumerable`1<ICSharpStatement> ExecuteOverParameter(ICSharpParameterDeclaration parameterDeclaration);
    private ICSharpStatement AddCheckToLambdaExpression(ILambdaExpression lambdaExpression, IParameterDeclaration parameterDeclaration, IParameter parameter, TreeNodeCollection`1<TParameterDeclaration> declarations);
    private ICSharpStatement AddCheckToExpressionBodyOwner(IExpressionBodyOwnerDeclaration expressionBodyOwnerDeclaration, IParameterDeclaration parameterDeclaration, IParameter parameter, TreeNodeCollection`1<TParameterDeclaration> declarations);
    protected virtual bool TryInsertCheckInExpressionBody(CSharpElementFactory factory, ICSharpExpression expressionBody, IParameter parameter, IParameterDeclaration parameterDeclaration, ICSharpExpression parameterNameExpression, IPsiModule psiModule);
    protected virtual ICSharpStatement AddCheckToBlock(IBlock block, IParameterDeclaration parameterDeclaration, IParameter parameter, TreeNodeCollection`1<TParameterDeclaration> declarations);
    protected virtual ICSharpStatement AddCheckToSetter(IAccessorDeclaration setterDeclaration);
    protected virtual ICSharpStatement FindParameterCheckAnchor(IBlock block, IParameterDeclaration parameterDeclaration, IParameter parameter, TreeNodeCollection`1<TParameterDeclaration> parameterDeclarations);
    private static bool ContainsParameter(IIfStatement ifStatement, TParameter[] parameterDeclarations);
    [NullableContextAttribute("2")]
protected virtual IBulbActionCommand HandleAddedStatements(ICSharpStatement[] statements);
    protected abstract virtual ITypeElement GetExceptionType(IType parameterType, IPsiModule psiModule);
    protected abstract virtual bool IsAvailableForParameterType(IType type, ITypeElement context, IPsiModule psiModule, IPsiSourceFile psiSourceFile);
    protected abstract virtual ICSharpStatement CreateCheckStatement(CSharpElementFactory factory, IParameter parameter, ICSharpExpression parameterName, IPsiModule psiModule);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.CheckParameters.ParameterIsValidCheckAction : ParameterCheckActionBase {
    public string Text { get; }
    public ParameterIsValidCheckAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual ITypeElement GetExceptionType(IType parameterType, IPsiModule psiModule);
    protected virtual bool IsAvailableForParameterType(IType type, ITypeElement context, IPsiModule psiModule, IPsiSourceFile sourceFile);
    protected virtual ICSharpStatement CreateCheckStatement(CSharpElementFactory factory, IParameter parameter, ICSharpExpression parameterName, IPsiModule psiModule);
    private static IMethod GetValidationMethod(ITypeElement typeElement, IAccessContext accessContext);
    private static IProperty GetValidationProperty(ITypeElement typeElement, IAccessContext accessContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Intentions.CSharp.ContextActions.CheckParameters.StringParameterCheckBase : CheckParamNullAction {
    protected static IAnchor StringParameterCheckAnchor;
    private ICSharpContextActionDataProvider myProvider;
    protected string CheckMethodName { get; }
    protected string ExceptionMessage { get; }
    protected bool HasAdditionalChecks { get; }
    protected StringParameterCheckBase(ICSharpContextActionDataProvider provider);
    private static StringParameterCheckBase();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected abstract virtual string get_CheckMethodName();
    protected abstract virtual string get_ExceptionMessage();
    protected virtual bool get_HasAdditionalChecks();
    protected virtual ITypeElement GetExceptionType(IType parameterType, IPsiModule psiModule);
    protected virtual bool IsAvailableForParameterType(IType type, ITypeElement context, IPsiModule psiModule, IPsiSourceFile psiSourceFile);
    protected virtual bool TryInsertCheckInExpressionBody(CSharpElementFactory factory, ICSharpExpression expressionBody, IParameter parameter, IParameterDeclaration parameterDeclaration, ICSharpExpression parameterNameExpression, IPsiModule psiModule);
    protected virtual ICSharpStatement CreateCheckStatement(CSharpElementFactory factory, IParameter parameter, ICSharpExpression parameterName, IPsiModule psiModule);
    protected bool IsCheckMethodDefined();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.CheckParameters.StringParameterIsNotNullOrEmptyCheckAction : StringParameterCheckBase {
    public static IAnchor StringParameterEmptyCheckAnchor;
    public string Text { get; }
    protected string CheckMethodName { get; }
    protected string ExceptionMessage { get; }
    protected IAnchor Anchor { get; }
    public StringParameterIsNotNullOrEmptyCheckAction(ICSharpContextActionDataProvider provider);
    private static StringParameterIsNotNullOrEmptyCheckAction();
    public virtual string get_Text();
    protected virtual string get_CheckMethodName();
    protected virtual string get_ExceptionMessage();
    protected virtual IAnchor get_Anchor();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.CheckParameters.StringParameterIsNotNullOrWhitespaceCheckAction : StringParameterCheckBase {
    public static IAnchor StringParameterWhitespaceCheckAnchor;
    public string Text { get; }
    protected string CheckMethodName { get; }
    protected string ExceptionMessage { get; }
    protected IAnchor Anchor { get; }
    public StringParameterIsNotNullOrWhitespaceCheckAction(ICSharpContextActionDataProvider provider);
    private static StringParameterIsNotNullOrWhitespaceCheckAction();
    public virtual string get_Text();
    protected virtual string get_CheckMethodName();
    protected virtual string get_ExceptionMessage();
    protected virtual IAnchor get_Anchor();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.CheckParamNullAction : ParameterCheckActionBase {
    private static IAnchor ourCheckParameterForNullAnchor;
    public static InvisibleAnchor NullChecksAnchor;
    public static Key`1<object> CheckParamNullActionKey;
    public string Text { get; }
    protected IAnchor Anchor { get; }
    protected bool HasAdditionalChecks { get; }
    public CheckParamNullAction(ICSharpContextActionDataProvider provider);
    private static CheckParamNullAction();
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public virtual string get_Text();
    protected virtual IAnchor get_Anchor();
    protected virtual bool get_HasAdditionalChecks();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ITypeElement GetExceptionType(IType parameterType, IPsiModule psiModule);
    protected virtual bool IsAvailableForParameterType(IType type, ITypeElement context, IPsiModule psiModule, IPsiSourceFile psiSourceFile);
    protected virtual ICSharpStatement AddCheckToBlock(IBlock block, IParameterDeclaration parameterDeclaration, IParameter parameter, TreeNodeCollection`1<TParameterDeclaration> declarations);
    protected virtual bool TryInsertCheckInExpressionBody(CSharpElementFactory factory, ICSharpExpression expressionBody, IParameter parameter, IParameterDeclaration parameterDeclaration, ICSharpExpression parameterNameExpression, IPsiModule psiModule);
    protected virtual ICSharpStatement CreateCheckStatement(CSharpElementFactory factory, IParameter parameter, ICSharpExpression parameterName, IPsiModule psiModule);
    protected virtual ICSharpStatement AddCheckToSetter(IAccessorDeclaration setterDeclaration);
    protected virtual ICSharpStatement FindParameterCheckAnchor(IBlock block, IParameterDeclaration parameterDeclaration, IParameter parameter, TreeNodeCollection`1<TParameterDeclaration> parameterDeclarations);
    [NullableContextAttribute("2")]
private static bool NeedsAnnotation(IDeclaration declaration);
    [NullableContextAttribute("2")]
private static void AddNotNullAnnotation(IDeclaration toAnnotate);
    private static void AddNullableReferenceTypesAnnotations(IDeclaration toAnnotate);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.CheckReferenceNullAction : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <dataProvider>P;
    public static string ActionText;
    public string Text { get; }
    public CheckReferenceNullAction(ICSharpContextActionDataProvider dataProvider);
    private static CheckReferenceNullAction();
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
[PureAttribute]
private IReferenceExpression GetReferenceExpressionByName();
    [NullableContextAttribute("2")]
[PureAttribute]
public static bool IsAvailableForExpression(ICSharpExpression expression);
    [PureAttribute]
private static bool IsUnderNullCheckingConstructAlready(ICSharpExpression expression);
    private static bool IsImmutableNotNullVariable(ILocalVariable localVariable);
    [PureAttribute]
private static bool IsDocumentRangesValid(ICSharpExpression expression);
    [NullableContextAttribute("2")]
[PureAttribute]
private static bool IsVariable(ICSharpExpression expression);
    private static ModificationResult CheckForNull(ICSharpExpression operand);
    [PureAttribute]
private static bool IsExpressionReferencesForVariable(ICSharpExpression expression, IForStatement statement);
    private static ModificationResult CheckNullForQueryExpression(ICSharpExpression csharpExpression, IQueryParameterPlatform parameterPlatform, CSharpElementFactory factory);
    private static ModificationResult CheckNullForBoolean(ICSharpExpression containingBoolean, ICSharpExpression operandToCheck);
    [PureAttribute]
private static ICSharpExpression FindContainingBoolean(ICSharpExpression csharpExpression);
    [PureAttribute]
private static bool IsCondition(ICSharpExpression node);
    private static ModificationResult CheckNullForExpressionLambda(ICSharpExpression expression, ILambdaExpression lambda, CSharpElementFactory factory);
    private static ModificationResult IntroduceVariableIfNeeded(ICSharpExpression targetExpression, ITreeNode scope);
    private static ModificationResult TryEncloseContinuousUsageRange(ICSharpStatement statement, ICSharpExpression operand, CSharpElementFactory factory);
    private static ModificationResult FindDeclarationsRangeAndInsertIntoIf(ICSharpExpression operand, IDeclarationStatement declarationStatement, CSharpElementFactory factory);
    [PureAttribute]
private static ICSharpStatementsRange GetContinuousRangeOfUsages(IStatementsOwner statementsOwner, IReferenceExpression referenceExpression);
    [PureAttribute]
private static bool IsStatementRangeHasReferences(ICSharpStatementsRange range, List`1<IDeclaredElement> elements);
    [PureAttribute]
private static bool IsStatementHasReferences(IDeclaredElement declaredElement, ICSharpStatement statement);
    [PureAttribute]
private static bool IsStatementAssignsNewValue(IDeclaredElement declaredElement, ICSharpStatement statement);
    private static ModificationResult ReplaceStatementWithIf(CSharpElementFactory factory, string pattern, ICSharpExpression operand, ICSharpStatement statement);
    [PureAttribute]
private static int FindRangeToEnclose(IStatementsOwner statementsOwner, int endIndex, IEnumerable`1<IDeclaration> declarationsToEnclose);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public static IBulbActionCommand Execute(ICSharpExpression expressionToCheck, DocumentOffset documentCaret);
    [NullableContextAttribute("2")]
private static IBulbActionCommand SetCaret(ITreeNode element, int delta);
    private static IBulbActionCommand ShowHotspots(ModificationResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.CheckVariableNullAction : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    private static IAnchor ourCheckVariableForNullAnchor;
    public static InvisibleAnchor NullCheckAnchor;
    public static Key`1<object> CheckVariableNullActionKey;
    public string Text { get; }
    public CheckVariableNullAction(ICSharpContextActionDataProvider provider);
    private static CheckVariableNullAction();
    public virtual string get_Text();
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public virtual bool IsAvailable(IUserDataHolder cache);
    private static bool IsAvailableWithDeclaration(ILocalVariableDeclaration declaration);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static bool CheckComparisonsInBlock(IStatementsOwner block, ILocalVariable variable);
    [PureAttribute]
private static bool IsVariableUsage(ICSharpExpression expression, ILocalVariable variable);
    [NullableContextAttribute("2")]
[PureAttribute]
private ILocalVariableDeclaration FindVariableDeclaration();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.Cleanup.CSharpApplySyntaxStyleActionConfigurator : object {
    private static CodeCleanupProfile ourProfile;
    private static CSharpApplySyntaxStyleActionConfigurator();
    public sealed virtual CodeCleanupProfile GetCleanupProfile();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.CollectionInitializerToAddsAction : ModernScopedContextActionBase`1<IReadOnlyList`1<ICollectionElementInitializer>> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <dataProvider>P;
    public static string ActionText;
    public string Text { get; }
    public CollectionInitializerToAddsAction(ICSharpContextActionDataProvider dataProvider);
    private static CollectionInitializerToAddsAction();
    public virtual string get_Text();
    protected virtual IReadOnlyList`1<ICollectionElementInitializer> TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual IReadOnlyList`1<ICollectionElementInitializer> TryCreateInfoFromTreeNode(ITreeNode treeNode);
    protected virtual ITreeNode TryGetContextTreeNode(IReadOnlyList`1<ICollectionElementInitializer> elementInitializers);
    protected virtual bool IsAvailable(IReadOnlyList`1<ICollectionElementInitializer> elementInitializers);
    protected virtual IBulbActionCommand ExecutePsiTransaction(IReadOnlyList`1<ICollectionElementInitializer> elementInitializers, ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.CollectionLengthCheckToListPatternAction : ModernContextActionBase`1<LengthCheck> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <dataProvider>P;
    public string Text { get; }
    public CollectionLengthCheckToListPatternAction(ICSharpContextActionDataProvider dataProvider);
    public virtual string get_Text();
    protected virtual LengthCheck TryCreateInfoFromDataProvider(IUserDataHolder cache);
    private static LengthCheck TryCreateFromEqualityExpression(IEqualityExpression equalityExpression);
    private static LengthCheck TryCreateFromRelationalExpression(IRelationalExpression relationalExpression);
    private static bool IsLengthOrCount(IReferenceExpression referenceExpression);
    private static Nullable`1<int> TryGetAcceptableLength(ConstantValue constantValue);
    private static LengthCheck TryCreateFromPattern(IPattern pattern);
    protected virtual bool IsAvailable(LengthCheck lengthCheck);
    private static bool IsCollectionExpressionNotNull(ExpressionLengthCheck lengthCheck, IType collectionType);
    protected virtual IBulbActionCommand ExecutePsiTransaction(LengthCheck lengthCheck, ISolution solution, IProgressIndicator progress);
    [CompilerGeneratedAttribute]
internal static Nullable`1<ValueTuple`3<CheckKind, int, IReferenceExpression>> <TryCreateFromPattern>g__TryGetCheckInfo|14_0(ISubpattern lengthSubpattern);
    [CompilerGeneratedAttribute]
internal static Nullable`1<CheckKind> <TryCreateFromPattern>g__GetCheckKind|14_1(RelationalPatternKind patternKind);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Intentions.CSharp.ContextActions.Comments.CSharpCommentActionUtil : ModernContextActionBase {
    public static IList`1<ICSharpCommentNode> GetSelectedCommentNodes(ICSharpContextActionDataProvider provider);
    public static IList`1<ICSharpCommentNode> GetCommentNodes(IFile file, ICSharpCommentNode originalNode, ICSharpContextActionDataProvider provider);
    private static bool ValidateSelectionRange(IFile file, IList`1<ICSharpCommentNode> commentNodes, ICSharpContextActionDataProvider provider);
    private static bool ValidateSelectionBorders(IFile file, ICSharpCommentNode commentNode, ICSharpContextActionDataProvider provider);
    private static bool ValidateOffset(IFile file, CommentType commentType, TreeOffset endOffset, TreeTextRange selectedTreeRange);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.Comments.DeleteCommentAction : ModernScopedContextActionBase`1<IList`1<ICSharpCommentNode>> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <dataProvider>P;
    public string Text { get; }
    public DeleteCommentAction(ICSharpContextActionDataProvider dataProvider);
    public virtual string get_Text();
    protected virtual IList`1<ICSharpCommentNode> TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual bool IsAvailable(IList`1<ICSharpCommentNode> comments);
    protected virtual ITreeNode TryGetContextTreeNode(IList`1<ICSharpCommentNode> comments);
    protected virtual IList`1<ICSharpCommentNode> TryCreateInfoFromTreeNode(ITreeNode treeNode);
    protected virtual IBulbActionCommand ExecutePsiTransaction(IList`1<ICSharpCommentNode> comments, ISolution solution, IProgressIndicator progress);
    private static IList`1<ICSharpCommentNode> GetAdjacentLineComments(ICSharpCommentNode node);
    private static void AddSiblings(int indentingLength, IEnumerable`1<ITreeNode> siblings, IList`1<ICSharpCommentNode> nodes);
    private static int GetIndentingLength(ITreeNode node);
    private static ITreeRange CalculateRangeToDelete(IList`1<ICSharpCommentNode> commentNodes);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.Comments.UncommentAction : ContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <dataProvider>P;
    private CommentType myCommentType;
    public string Text { get; }
    public UncommentAction(ICSharpContextActionDataProvider dataProvider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private Action`1<ITextControl> ExecuteOverBlockComment(IProjectFile projectFile);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.CompoundToRegularContextAction : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public CompoundToRegularContextAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.ConditionalAccessToExpressionAction : ModernScopedContextActionBase`1<SplitPair> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public ConditionalAccessToExpressionAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual SplitPair TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual SplitPair TryCreateInfoFromTreeNode(ITreeNode treeNode);
    protected virtual bool IsAvailable(SplitPair splitPair);
    protected virtual IBulbActionCommand ExecutePsiTransaction(SplitPair splitPair, ISolution solution, IProgressIndicator progress);
    [NullableContextAttribute("2")]
[PureAttribute]
private SplitPair FindSplittableConditionalAccess();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.ConditionalExpressionToAccessAction : ModernScopedContextActionBase`1<IConditionalTernaryExpression> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    private string myActionText;
    public string Text { get; }
    public ConditionalExpressionToAccessAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual IConditionalTernaryExpression TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual bool IsAvailable(IConditionalTernaryExpression conditionalExpression);
    protected virtual IBulbActionCommand ExecutePsiTransaction(IConditionalTernaryExpression conditionalExpression, ISolution solution, IProgressIndicator progress);
    public static void Execute(ICSharpExpression expression, IAccess mergedAccess, CSharpElementFactory factory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.ConditionalToNormalAccessAction : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public ConditionalToNormalAccessAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
public static bool IsAvailable(IConditionalAccessExpression expression);
    [NullableContextAttribute("2")]
public static bool CanApplyNormalAccess(ICSharpExpression expression);
    [NullableContextAttribute("2")]
private IConditionalAccessExpression FindConditionalAccessExpression();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public static IBulbActionCommand Execute(IConditionalAccessExpression conditionalAccess);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.ConfigureNullCheckAssertionPattern : ConfigureNullCheckPatternBase {
    private static InvisibleAnchor ourContextActionAnchor;
    private static InvisibleAnchor ourQuickFixAnchor;
    private bool myIsUnderQuickFix;
    public string Text { get; }
    protected IAnchor Anchor { get; }
    public ConfigureNullCheckAssertionPattern(ICSharpContextActionDataProvider provider);
    private static ConfigureNullCheckAssertionPattern();
    public virtual string get_Text();
    protected virtual IAnchor get_Anchor();
    protected virtual bool IsParentIntentionAvailable(IUserDataHolder cache);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Intentions.CSharp.ContextActions.ConfigureNullCheckPatternBase : BulbActionBase {
    public string Text { get; }
    protected IAnchor Anchor { get; }
    public virtual string get_Text();
    protected abstract virtual IAnchor get_Anchor();
    private sealed virtual override IEnumerable`1<IntentionAction> JetBrains.ReSharper.Feature.Services.ContextActions.IContextAction.CreateBulbItems();
    private sealed virtual override bool JetBrains.ReSharper.Feature.Services.ContextActions.IContextAction.IsAvailable(IUserDataHolder cache);
    protected abstract virtual bool IsParentIntentionAvailable(IUserDataHolder cache);
    public virtual void Execute(ISolution solution, ITextControl textControl);
    protected sealed virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.ConfigureParameterNullCheckPattern : ConfigureNullCheckPatternBase {
    private static InvisibleAnchor ourAnchor;
    protected IAnchor Anchor { get; }
    public ConfigureParameterNullCheckPattern(ICSharpContextActionDataProvider provider);
    private static ConfigureParameterNullCheckPattern();
    protected virtual IAnchor get_Anchor();
    protected virtual bool IsParentIntentionAvailable(IUserDataHolder cache);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.ConfigureVariableNullCheckPattern : ConfigureNullCheckPatternBase {
    private static InvisibleAnchor ourAnchor;
    protected IAnchor Anchor { get; }
    public ConfigureVariableNullCheckPattern(ICSharpContextActionDataProvider provider);
    private static ConfigureVariableNullCheckPattern();
    protected virtual IAnchor get_Anchor();
    protected virtual bool IsParentIntentionAvailable(IUserDataHolder cache);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.ConstructorToFactoryAction : object {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public static SubmenuAnchor DefaultConstructorSubmenuAnchor;
    public ConstructorToFactoryAction(ICSharpContextActionDataProvider provider);
    private static ConstructorToFactoryAction();
    [NullableContextAttribute("2")]
[PureAttribute]
private IClrDeclaredElement FindConstructorOrType();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    private static IConstructor GetParameterLessConstructor(ITypeElement typeElement);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.ConstructorToFactoryAction/<JetBrains-ReSharper-Feature-Services-ContextActions-IContextAction-CreateBulbItems>d__6")]
private sealed virtual override IEnumerable`1<IntentionAction> JetBrains.ReSharper.Feature.Services.ContextActions.IContextAction.CreateBulbItems();
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.ConvertStringEscapeSequenceAction : ModernContextActionBase`1<IStringLiteralOwner> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    private static SubmenuAnchor ourSubmenuAnchor;
    private static int MAX_STRING_LENGTH_TO_ANALYZE;
    private static char HIGH_SURROGATE_MASK;
    private static char LOW_SURROGATE_MASK;
    private EscapeMode myEscapeMode;
    public string Text { get; }
    public ConvertStringEscapeSequenceAction(ICSharpContextActionDataProvider provider);
    private ConvertStringEscapeSequenceAction(ICSharpContextActionDataProvider provider, EscapeMode escapeMode);
    private static ConvertStringEscapeSequenceAction();
    public virtual string get_Text();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.ConvertStringEscapeSequenceAction/<CreateBulbItems>d__11")]
public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    protected virtual IStringLiteralOwner TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual bool IsAvailable(IStringLiteralOwner stringLiteralOwner);
    protected virtual IBulbActionCommand ExecutePsiTransaction(IStringLiteralOwner stringLiteralOwner, ISolution solution, IProgressIndicator progress);
    private static bool IsTokenNodeSelected(DocumentRange documentSelection, ITokenNode tokenNode);
    private static bool IsCaretOnOpeningQuote(DocumentRange documentSelection, ITokenNode literalNode, CSharpLiteralType literalType);
    public static int DoExecute(ITokenNode literalNode, DocumentRange sourceRange, EscapeMode escapeMode, bool isCaretOnOpeningQuote, bool safeHexEscape);
    private static bool HasFlag(EscapeMode mode, EscapeMode modeFlag);
    private static void NextFlag(EscapeMode& mode);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.ConvertToArrayCreationExpressionAction : ModernScopedContextActionBase`1<ICollectionExpression> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <dataProvider>P;
    public string Text { get; }
    public string ScopedText { get; }
    public ConvertToArrayCreationExpressionAction(ICSharpContextActionDataProvider dataProvider);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    protected virtual ICollectionExpression TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual bool IsAvailable(ICollectionExpression collectionExpression);
    private static bool SpeculativeAvailabilityCheck(ICollectionExpression collectionExpression, bool useExplicitType);
    protected virtual FileCollectorInfo GetFileCollectorInfo(ICollectionExpression collectionExpression);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ICollectionExpression collectionExpression, ISolution solution, IProgressIndicator progress);
    private static ICSharpExpression RewriteIntoArrayCreationExpression(ICollectionExpression collectionExpression, CSharpElementFactory factory, bool useExplicitType);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
internal class JetBrains.ReSharper.Intentions.CSharp.ContextActions.ConvertToBlockScopedNamespaceAction : ModernScopedContextActionBase`1<ICSharpNamespaceDeclaration> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <dataProvider>P;
    public string Text { get; }
    public string ScopedText { get; }
    public ConvertToBlockScopedNamespaceAction(ICSharpContextActionDataProvider dataProvider);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    protected virtual FileCollectorInfo GetFileCollectorInfo(ICSharpNamespaceDeclaration namespaceDeclaration);
    protected virtual ICSharpNamespaceDeclaration TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual bool IsAvailable(ICSharpNamespaceDeclaration namespaceDeclaration);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ICSharpNamespaceDeclaration namespaceDeclaration, ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.ConvertToCollectionInitializerAction : ModernScopedContextActionBase`1<ICollectionExpression> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <dataProvider>P;
    public string Text { get; }
    public string ScopedText { get; }
    public ConvertToCollectionInitializerAction(ICSharpContextActionDataProvider dataProvider);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    protected virtual ICollectionExpression TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual bool IsAvailable(ICollectionExpression collectionExpression);
    private static bool SpeculativeAvailabilityCheck(ICollectionExpression collectionExpression, bool useExplicitType);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ICollectionExpression collectionExpression, ISolution solution, IProgressIndicator progress);
    [PureAttribute]
private static IDeclaredType GetCreatedCollectionType(ICollectionExpression collectionExpression, Boolean& makeListReadonly);
    private static ICSharpExpression RewriteIntoCollectionInitializer(ICollectionExpression collectionExpression, CSharpElementFactory factory, bool useExplicitType);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.ConvertToDefaultExpressionAction : ModernScopedContextActionBase`1<ICSharpLiteralExpression> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public ConvertToDefaultExpressionAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual ICSharpLiteralExpression TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual bool IsAvailable(ICSharpLiteralExpression literalExpression);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ICSharpLiteralExpression literalExpression, ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
internal class JetBrains.ReSharper.Intentions.CSharp.ContextActions.ConvertToFileScopedNamespaceAction : ModernScopedContextActionBase`1<ICSharpNamespaceDeclaration> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <dataProvider>P;
    public string Text { get; }
    public string ScopedText { get; }
    public ConvertToFileScopedNamespaceAction(ICSharpContextActionDataProvider dataProvider);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    protected virtual FileCollectorInfo GetFileCollectorInfo(ICSharpNamespaceDeclaration namespaceDeclaration);
    protected virtual ICSharpNamespaceDeclaration TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual bool IsAvailable(ICSharpNamespaceDeclaration namespaceDeclaration);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ICSharpNamespaceDeclaration namespaceDeclaration, ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.ConvertToPrimaryConstructorAction : ContextActionBase`1<ICSharpDeclaration> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <dataProvider>P;
    public string Text { get; }
    public ConvertToPrimaryConstructorAction(ICSharpContextActionDataProvider dataProvider);
    public virtual string get_Text();
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    protected virtual ICSharpDeclaration TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual bool IsAvailable(ICSharpDeclaration declaration);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ICSharpDeclaration declaration, ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.ConvertToTryFinallyAction : ModernContextActionBase`1<Data> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public ConvertToTryFinallyAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual Data TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual bool IsAvailable(Data data);
    protected virtual IBulbActionCommand ExecutePsiTransaction(Data data, ISolution solution, IProgressIndicator progress);
    private IDeclaredElement ExtractOrCreateUsingVariable(IUsingStatement usingStatement, Boolean& canBeNull, HotspotsRegistry& hotspotsRegistry);
    [CompilerGeneratedAttribute]
internal static bool <IsAvailable>g__IsAwaitUsing|6_0(ICSharpStatement statement);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
internal class JetBrains.ReSharper.Intentions.CSharp.ContextActions.ConvertToUsingDeclarationAction : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    private string myTextHint;
    public string Text { get; }
    public ConvertToUsingDeclarationAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
internal class JetBrains.ReSharper.Intentions.CSharp.ContextActions.ConvertToUsingStatementAction : ModernScopedContextActionBase`1<IDeclarationStatement> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public ConvertToUsingStatementAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual IDeclarationStatement TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual IDeclarationStatement TryCreateInfoFromTreeNode(ITreeNode treeNode);
    [NullableContextAttribute("2")]
private static bool TryGetVariablesDeclaration(IDeclarationStatement declarationStatement, IMultipleLocalVariableDeclaration& multipleVariableDeclaration);
    protected virtual bool IsAvailable(IDeclarationStatement declarationStatement);
    protected virtual IBulbActionCommand ExecutePsiTransaction(IDeclarationStatement usingDeclarationStatement, ISolution solution, IProgressIndicator progress);
    public static IUsingStatement Execute(IDeclarationStatement usingDeclarationStatement, bool forceAwaitUsing);
    [CompilerGeneratedAttribute]
internal static bool <ExecutePsiTransaction>g__CheckIsCookieVariable|8_1(IUsingStatement usingStatement, IProgressIndicator progress, ICSharpExpression& usingExpression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.CopyDocumentationAction : ModernContextActionBase {
    protected ICSharpContextActionDataProvider myProvider;
    public static IAnchor DocumentationAnchor;
    public string Text { get; }
    public CopyDocumentationAction(ICSharpContextActionDataProvider provider);
    private static CopyDocumentationAction();
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static IDocCommentBlock FindDocCommentsInText(IOverridableMember element);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.CreateDerivedTypeAction : ModernContextActionBase`1<IClassLikeDeclaration> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <dataProvider>P;
    public string Text { get; }
    public CreateDerivedTypeAction(ICSharpContextActionDataProvider dataProvider);
    public virtual string get_Text();
    protected virtual IClassLikeDeclaration TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual bool IsAvailable(IClassLikeDeclaration classLikeDeclaration);
    protected virtual IBulbActionCommand ExecutePsiTransaction(IClassLikeDeclaration baseDeclaration, ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.CreateMatchingCheckedOperatorAction : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public CreateMatchingCheckedOperatorAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.CreateOverloadAction : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    private int mySelectedParametersCount;
    public string Text { get; }
    public CreateOverloadAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [PureAttribute]
private static bool HasSameSignature(ICSharpParametersOwnerDeclaration parametersOwnerDeclaration, IReadOnlyList`1<ICSharpParameterDeclaration> parametersToRemove, ITypeElement typeElement);
    private static ICSharpParametersOwnerDeclaration CreateOverloadDeclaration(ICSharpParametersOwnerDeclaration parametersOwnerDeclaration, IReadOnlyList`1<ICSharpParameterDeclaration> parametersToRemove);
    [PureAttribute]
private static IReadOnlyList`1<int> GetParameterIndicesToRemove(IReadOnlyList`1<ICSharpParameterDeclaration> parametersToRemove);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static IBulbActionCommand ShowMultipleHotspots(ISolution solution, IList`1<ICSharpExpression> expressions);
    private IReadOnlyList`1<ICSharpParameterDeclaration> GetSelectedParameters(ICSharpParametersOwnerDeclaration declaration);
    private ICSharpExpression CreateMethodDeclaration(IMethodDeclaration newMethodDeclaration, IMethodDeclaration sourceMethodDeclaration, IReadOnlyList`1<int> indicesToRemove);
    private IList`1<ICSharpExpression> CreateIndexerDeclaration(IIndexerDeclaration newIndexerDeclaration, IIndexerDeclaration sourceIndexer, IReadOnlyList`1<int> indicesToRemove);
    private ICSharpExpression CreateConstructorDeclaration(IConstructorDeclaration newConstructorDeclaration, ICSharpParametersOwnerDeclaration sourceConstructorDeclaration, IReadOnlyList`1<int> indicesToRemove);
    private static ICSharpExpression GetDefaultValueToPass(IParameter parameter, ITreeNode context, CSharpElementFactory factory);
    private static ICSharpExpression ProcessReferences(ITreeNode result);
    private void BuildArguments(IBlock bodyBlock, IReadOnlyList`1<int> indicesToRemove, FactoryArgumentsBuilder& builder, ICSharpParametersOwnerDeclaration sourceDeclaration, ICSharpParametersOwnerDeclaration newDeclaration);
    private static TreeNodeCollection`1<ICSharpArgument> GetDelegatingMethodCallArguments(IMethodDeclaration methodDeclaration);
    private static TreeNodeCollection`1<ICSharpArgument> GetDelegatingIndexerCallArguments(IAccessorDeclaration accessorDeclaration);
    [CompilerGeneratedAttribute]
internal static string <BuildArguments>g__DeriveVariableName|17_0(<>c__DisplayClass17_0& , <>c__DisplayClass17_1& );
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.CSharpInitializeAutoPropertyAction : InitializeAutoPropertyActionBase {
    [NullableContextAttribute("1")]
public CSharpInitializeAutoPropertyAction(ICSharpContextActionDataProvider dataProvider);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.CSharpInitializeFieldAction : InitializeFieldActionBase {
    [NullableContextAttribute("1")]
public CSharpInitializeFieldAction(ICSharpContextActionDataProvider dataProvider);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.CSharpInitializeNonPrivateFieldAction : InitializeFieldActionBase {
    public CSharpInitializeNonPrivateFieldAction(ICSharpContextActionDataProvider dataProvider);
    protected virtual MemberFromParameterFixBase CreateIntroduceFix(IParameterDeclaration parameterDeclaration);
    protected virtual MemberFromParameterFixBase CreateInitializeFix(IParameterDeclaration parameterDeclaration);
    protected virtual MemberFromParameterFixBase CreateReplaceAssignmentFix(IParameterDeclaration parameterDeclaration);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.DeconstructingDeclarationToVarSyntaxAction : ModernScopedContextActionBase`1<ITupleExpression> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <dataProvider>P;
    public string Text { get; }
    public DeconstructingDeclarationToVarSyntaxAction(ICSharpContextActionDataProvider dataProvider);
    public virtual string get_Text();
    protected virtual ITupleExpression TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual bool IsAvailable(ITupleExpression tupleExpression);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ITupleExpression tupleExpression, ISolution solution, IProgressIndicator progress);
    [CompilerGeneratedAttribute]
internal static bool <IsAvailable>g__CanUseVarForAllComponents|5_0(ITupleExpression tupleExpression, Boolean& hasExplicitlyTypedDeclarations);
    [CompilerGeneratedAttribute]
internal static void <ExecutePsiTransaction>g__BuildDeclarations|6_0(ITupleExpression tupleExpression, FactoryArgumentsBuilder argumentsBuilder);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class JetBrains.ReSharper.Intentions.CSharp.ContextActions.DeconstructionPatternNameActionBase : ModernScopedContextActionBase`1<ISubpattern> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <dataProvider>P;
    protected DeconstructionPatternNameActionBase(ICSharpContextActionDataProvider dataProvider);
    protected virtual FileCollectorInfo GetFileCollectorInfo(ISubpattern subpattern);
    protected virtual ISubpattern TryCreateInfoFromDataProvider(IUserDataHolder cache);
    [PureAttribute]
private static ISubpattern GetSubpatternBySurroundingSpace(IDeconstructionPatternClause deconstructionPatternClause, TreeOffset offset);
    [PureAttribute]
private static TreeTextRange GetInPatternExpressionRange(IPattern pattern);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.DeconstructVariableAction : object {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public DeconstructVariableAction(ICSharpContextActionDataProvider provider);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public static IEnumerable`1<IBulbAction> CreateSuggestionBulbItems(IVariableDeclaration variableDeclaration);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.DeconstructVariableAction/<CreateBulbItems>d__5")]
private static IEnumerable`1<IBulbAction> CreateBulbItems(AvailabilityInfo availabilityInfo, bool forSuggestion);
    [PureAttribute]
private Nullable`1<AvailabilityInfo> TryGetAvailabilityInfo();
    [PureAttribute]
private static Nullable`1<AvailabilityInfo> GetAvailabilityInfoFromDeclaration(IVariableDeclaration variableDeclaration);
    [PureAttribute]
private Nullable`1<AvailabilityInfo> FindLocalVariableDeclaration();
    [PureAttribute]
private static Nullable`1<AvailabilityInfo> FromVariableDeclaration(ILocalVariableDeclaration variableDeclaration);
    [PureAttribute]
private Nullable`1<AvailabilityInfo> FindDesignationVariableDesignation();
    [PureAttribute]
private static Nullable`1<AvailabilityInfo> FromVariableDesignation(IVariableDesignation variableDesignation);
    [PureAttribute]
private Nullable`1<AvailabilityInfo> FindDiscardReferenceExpression();
    [PureAttribute]
private Nullable`1<AvailabilityInfo> FindDiscardPattern();
    [PureAttribute]
private Nullable`1<AvailabilityInfo> FindParameterDeclaration();
    [PureAttribute]
private static Nullable`1<AvailabilityInfo> FromParameterDeclaration(ICSharpParameterDeclaration parameterDeclaration);
    [PureAttribute]
private static ICSharpTreeNode GetParameterScopeOrNull(ITreeNode declaration);
    [PureAttribute]
private Nullable`1<AvailabilityInfo> FindLocalVariableOrParameterUsage();
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.EnableInspection.EnableDoWhileBracesStyleAction : EnableInspectionActionBase {
    public EnableDoWhileBracesStyleAction(ICSharpContextActionDataProvider provider);
    protected virtual string GetSeverityId();
    protected virtual ITreeNode GetAvailabilityContextNode();
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.EnableInspection.EnableFixedBracesStyleAction : EnableInspectionActionBase {
    public EnableFixedBracesStyleAction(ICSharpContextActionDataProvider provider);
    protected virtual string GetSeverityId();
    protected virtual ITreeNode GetAvailabilityContextNode();
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.EnableInspection.EnableForBracesStyleAction : EnableInspectionActionBase {
    public EnableForBracesStyleAction(ICSharpContextActionDataProvider provider);
    protected virtual string GetSeverityId();
    protected virtual ITreeNode GetAvailabilityContextNode();
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.EnableInspection.EnableForEachBracesStyleAction : EnableInspectionActionBase {
    public EnableForEachBracesStyleAction(ICSharpContextActionDataProvider provider);
    protected virtual string GetSeverityId();
    protected virtual ITreeNode GetAvailabilityContextNode();
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.EnableInspection.EnableIfBracesStyleAction : EnableInspectionActionBase {
    public EnableIfBracesStyleAction(ICSharpContextActionDataProvider provider);
    protected virtual string GetSeverityId();
    protected virtual ITreeNode GetAvailabilityContextNode();
}
public abstract class JetBrains.ReSharper.Intentions.CSharp.ContextActions.EnableInspection.EnableInspectionActionBase : object {
    [NotNullAttribute]
private HighlightingSettingsManager mySettingsManager;
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <DataProvider>k__BackingField;
    [NotNullAttribute]
protected ICSharpContextActionDataProvider DataProvider { get; }
    protected EnableInspectionActionBase(ICSharpContextActionDataProvider provider);
    [CompilerGeneratedAttribute]
protected ICSharpContextActionDataProvider get_DataProvider();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NotNullAttribute]
protected abstract virtual string GetSeverityId();
    [CanBeNullAttribute]
protected abstract virtual ITreeNode GetAvailabilityContextNode();
    protected ITreeNode CheckAvailability(Func`2<TTreeNode, DisjointedTreeTextRange> rangeSelector);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.EnableInspection.EnableInspectionActionBase/<CreateBulbItems>d__9")]
public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.EnableInspection.EnableLocalFunctionCanBeMadeStaticAction : EnableInspectionActionBase {
    public EnableLocalFunctionCanBeMadeStaticAction(ICSharpContextActionDataProvider provider);
    protected virtual string GetSeverityId();
    protected virtual ITreeNode GetAvailabilityContextNode();
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.EnableInspection.EnableLockBracesStyleAction : EnableInspectionActionBase {
    public EnableLockBracesStyleAction(ICSharpContextActionDataProvider provider);
    protected virtual string GetSeverityId();
    protected virtual ITreeNode GetAvailabilityContextNode();
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.EnableInspection.EnableStructMemberCanBeMadeReadOnlyAction : EnableInspectionActionBase {
    public EnableStructMemberCanBeMadeReadOnlyAction(ICSharpContextActionDataProvider provider);
    protected virtual string GetSeverityId();
    protected virtual ITreeNode GetAvailabilityContextNode();
    [CanBeNullAttribute]
private IClassLikeDeclaration TryGetClassLikeDeclarationByAccessorDeclaration(IAccessorDeclaration accessorDeclaration);
    [CompilerGeneratedAttribute]
private DisjointedTreeTextRange <GetAvailabilityContextNode>b__2_0(IModifiersListOwner modifiersOwner);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.EnableInspection.EnableSuppressedNullableAction : EnableInspectionActionBase {
    public EnableSuppressedNullableAction(ICSharpContextActionDataProvider provider);
    protected virtual string GetSeverityId();
    protected virtual ITreeNode GetAvailabilityContextNode();
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.EnableInspection.EnableUnnecessaryWhiteSpaceAtEndOfLineAction : EnableInspectionActionBase {
    public EnableUnnecessaryWhiteSpaceAtEndOfLineAction(ICSharpContextActionDataProvider provider);
    protected virtual string GetSeverityId();
    protected virtual ITreeNode GetAvailabilityContextNode();
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.EnableInspection.EnableUsageOfTabProhibitedAction : EnableInspectionActionBase {
    private static char TabChar;
    public EnableUsageOfTabProhibitedAction(ICSharpContextActionDataProvider provider);
    protected virtual string GetSeverityId();
    protected virtual ITreeNode GetAvailabilityContextNode();
    [CompilerGeneratedAttribute]
private DisjointedTreeTextRange <GetAvailabilityContextNode>b__3_0(ITokenNode tokenNode);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.EnableInspection.EnableUsingBracesStyleAction : EnableInspectionActionBase {
    public EnableUsingBracesStyleAction(ICSharpContextActionDataProvider provider);
    protected virtual string GetSeverityId();
    protected virtual ITreeNode GetAvailabilityContextNode();
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.EnableInspection.EnableWhileBracesStyleAction : EnableInspectionActionBase {
    public EnableWhileBracesStyleAction(ICSharpContextActionDataProvider provider);
    protected virtual string GetSeverityId();
    protected virtual ITreeNode GetAvailabilityContextNode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.EncapsulateLazyFieldAction : ModernContextActionBase {
    [NullableAttribute("2")]
private IFieldDeclaration myFieldDeclaration;
    public string Text { get; }
    public EncapsulateLazyFieldAction(ICSharpContextActionDataProvider dataProvider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [NullableContextAttribute("2")]
public static bool IsAvailable(IFieldDeclaration fieldDeclaration);
    public static IBulbActionCommand Execute(IFieldDeclaration fieldDeclaration);
    private static IBulbActionCommand ExecuteHotspotSession(ITreeNodePointer`1<IPropertyDeclaration> propertyPointer, IReadOnlyList`1<string> nameSuggestions);
    [PureAttribute]
private static IType GetPropertyTypeForLazyField(IField field);
    private static IReadOnlyList`1<string> GetPropertyNameSuggestions(IFieldDeclaration fieldDeclaration);
    [PureAttribute]
private static IClassMemberDeclaration GetPropertyAnchor(IClassLikeDeclaration classLikeDeclaration, bool isStatic);
}
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.EntityFramework.DisableDbContextInspectionsAction : object {
    [NotNullAttribute]
private string myDbContextFullName;
    [NotNullAttribute]
private string myDbContextShortName;
    public string Text { get; }
    public DisableDbContextInspectionsAction(string dbContextFullName, string dbContextShortName);
    public sealed virtual string get_Text();
    public sealed virtual void Execute(ISolution solution, ITextControl textControl);
}
[CustomHighlightingActionProviderAttribute("JetBrains.ProjectModel.KnownProjectFileType")]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.EntityFramework.DisableDbContextInspectionsActionProvider : object {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.EntityFramework.DisableDbContextInspectionsActionProvider/<GetActions>d__0")]
public sealed virtual IEnumerable`1<IntentionAction> GetActions(IHighlighting highlighting, DocumentRange highlightingRange, IPsiSourceFile sourceFile, IAnchor configureAnchor);
}
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.EntityFramework.NavigateToDbContextPropertyAction : object {
    private static int PreviewTextMaxLength;
    [NotNullAttribute]
private IEnumerable`1<ITreeNode> myTreeNodesForNavigation;
    private TextRange myHighlightingTextRange;
    private bool myIsQueryHighlighting;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public string Text { get; }
    public bool IsReadOnly { get; }
    public NavigateToDbContextPropertyAction(NPlusOneQueryWarning highlighting);
    public NavigateToDbContextPropertyAction(IncompleteDataQueryWarning highlighting);
    public NavigateToDbContextPropertyAction(NPlusOneUsageWarning highlighting);
    public NavigateToDbContextPropertyAction(IncompleteDataUsageWarning highlighting);
    private NavigateToDbContextPropertyAction(IHighlighting highlighting);
    private NavigateToDbContextPropertyAction(EntityFrameworkQueryWarningBase highlighting);
    private NavigateToDbContextPropertyAction(EntityFrameworkUsageWarningBase highlighting);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Text();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Execute(ISolution solution, ITextControl textControl);
    public IEnumerable`1<IntentionAction> CreateBulbItems();
}
[CustomHighlightingActionProviderAttribute("JetBrains.ProjectModel.KnownProjectFileType")]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.EntityFramework.NavigateToDbContextPropertyActionProvider : object {
    public sealed virtual IEnumerable`1<IntentionAction> GetActions(IHighlighting highlighting, DocumentRange highlightingRange, IPsiSourceFile sourceFile, IAnchor configureAnchor);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.EntityFramework.ZoneMarker : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.EqualityOperatorToEqualsAction : EqualityOperatorToEqualsActionBase {
    protected string EqualsMethodName { get; }
    public EqualityOperatorToEqualsAction(ICSharpContextActionDataProvider provider);
    protected virtual string get_EqualsMethodName();
    protected virtual DeclaredElementInstance`1<IMethod> TryGetEqualsMethod(IEqualityExpression expression);
    [PureAttribute]
private DeclaredElementInstance`1<IMethod> TryGetInstanceEqualsMethod(IEqualityExpression expression);
    [PureAttribute]
private DeclaredElementInstance`1<IMethod> TryGetInstanceEqualsMethod(IType leftOperandType, IType rightOperandType, ITreeNode context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Intentions.CSharp.ContextActions.EqualityOperatorToEqualsActionBase : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    protected string EqualsMethodName { get; }
    protected EqualityOperatorToEqualsActionBase(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual bool IsAvailable(IEqualityExpression expression);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    protected abstract virtual string get_EqualsMethodName();
    [PureAttribute]
protected abstract virtual DeclaredElementInstance`1<IMethod> TryGetEqualsMethod(IEqualityExpression expression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.EqualityOperatorToReferenceEqualsAction : EqualityOperatorToEqualsActionBase {
    protected string EqualsMethodName { get; }
    public EqualityOperatorToReferenceEqualsAction(ICSharpContextActionDataProvider provider);
    protected virtual bool IsAvailable(IEqualityExpression equalityExpression);
    [NullableContextAttribute("2")]
public static bool IsReferenceEqualityOperator(IOperatorReference reference);
    protected virtual string get_EqualsMethodName();
    protected virtual DeclaredElementInstance`1<IMethod> TryGetEqualsMethod(IEqualityExpression expression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.EqualsToEqualityOperatorAction : EqualsToEqualityOperatorActionBase {
    public string Text { get; }
    public EqualsToEqualityOperatorAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual bool IsAvailableEx(IReferenceExpression equalsReference, IInvocationExpression invocationExpression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Intentions.CSharp.ContextActions.EqualsToEqualityOperatorActionBase : ModernContextActionBase {
    protected ICSharpContextActionDataProvider myProvider;
    protected EqualsToEqualityOperatorActionBase(ICSharpContextActionDataProvider provider);
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected abstract virtual bool IsAvailableEx(IReferenceExpression equalsReference, IInvocationExpression invocationExpression);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    protected static bool CheckArguments(TreeNodeCollection`1<ICSharpArgument> arguments, int count);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.Experiments.TestInternalAction : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <dataProvider>P;
    public string Text { get; }
    public TestInternalAction(ICSharpContextActionDataProvider dataProvider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual BulbActionCommandSequence GetCommandSequence();
    [NullableContextAttribute("2")]
private IPsiSourceFile GetSomeOtherFile();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.ExplicitToImplicitMemberAction : ModernScopedContextActionBase`1<IInterfaceQualificationOwner> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public ExplicitToImplicitMemberAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual IInterfaceQualificationOwner TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual bool IsAvailable(IInterfaceQualificationOwner owner);
    public static bool IsActionAvailable(IInterfaceQualificationOwner owner);
    [NullableContextAttribute("2")]
private static OverridableMemberInstance FindImplementingMember(IOverridableMember member);
    protected virtual IBulbActionCommand ExecutePsiTransaction(IInterfaceQualificationOwner qualificationOwner, ISolution solution, IProgressIndicator progress);
    public static void Execute(IInterfaceQualificationOwner qualificationOwner);
}
[IsReadOnlyAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.ExternalAnnotations.AdditionalMemberInfo : ValueType {
    [NullableAttribute("1")]
public string Tag;
    [NullableAttribute("2")]
public string Name;
    [NullableContextAttribute("1")]
private AdditionalMemberInfo(string tag, string name);
    public static AdditionalMemberInfo ReturnValue();
    [NullableContextAttribute("1")]
public static AdditionalMemberInfo Parameter(string parameterName);
    [NullableContextAttribute("1")]
public static AdditionalMemberInfo TypeParameter(string typeParameterName);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(AdditionalMemberInfo left, AdditionalMemberInfo right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(AdditionalMemberInfo left, AdditionalMemberInfo right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(AdditionalMemberInfo other);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.ExternalAnnotations.ExternalAnnotationsExporter : object {
    private static string ExportAssembliesRelativePath;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IReadOnlyList`1<ValueTuple`2<RelativePath, IExternalAnnotationWriter>> myWriters;
    private VirtualFileSystemPath myExternalAnnotationsPath;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<ValueTuple`2<string, Nullable`1<AdditionalMemberInfo>>> myLostMembers;
    public ExternalAnnotationsExporter(ISolution solution, IPsiModule module);
    public void AppendAttributes(string memberXMLDocId, Nullable`1<AdditionalMemberInfo> additionalMemberInfo, IList`1<IAttributeInstance> attributeInstances);
    public void WriteData(string baseName);
    private void ShowLostAnnotationsWarning();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.ExternalAnnotations.ExternalAnnotationsXmlWriter : object {
    private XmlDocument myXMLDocument;
    private XmlElement myAssemblyNode;
    private Dictionary`2<string, XmlElement> myRootNodes;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<ValueTuple`2<XmlElement, AdditionalMemberInfo>, XmlElement> myNestedNodes;
    private Dictionary`2<XmlElement, HashSet`1<string>> myAlreadyWrittenData;
    private bool myAnythingIsWritten;
    public ExternalAnnotationsXmlWriter(string assemblyName);
    private static XmlElement CreateXMLAssemblyNode(XmlDocument xmlDocument, string assemblyName);
    public void AppendAttributes(string memberXMLDocId, Nullable`1<AdditionalMemberInfo> additionalMemberInfo, IEnumerable`1<IAttributeInstance> attributeInstances);
    private static string GetAttributeValuePresentation(AttributeValue positionParameter);
    private XmlElement GerOrCreateNode(string memberXMLDocId, Nullable`1<AdditionalMemberInfo> additionalMemberInfo);
    public void SaveToFile(VirtualFileSystemPath filePath);
}
[NullableContextAttribute("1")]
public interface JetBrains.ReSharper.Intentions.CSharp.ContextActions.ExternalAnnotations.IExternalAnnotationWriter {
    public abstract virtual bool AppendAttributes(string memberXMLDocId, Nullable`1<AdditionalMemberInfo> additionalMemberInfo, IEnumerable`1<IAttributeInstance> attributeInstances);
    public abstract virtual void WriteData(string baseName, VirtualFileSystemPath path);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.ExternalAnnotations.InternalExportAnnotationsToExternal : ModernContextActionBase`1<IAttribute> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    private static string ActionName;
    private static string JetbrainsAnnotationsNamespace;
    public string Text { get; }
    public InternalExportAnnotationsToExternal(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual IAttribute TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual bool IsAvailable(IAttribute attribute);
    protected virtual IBulbActionCommand ExecutePsiTransaction(IAttribute attribute, ISolution solution, IProgressIndicator progress);
    private static void ProcessAttributeOwner(IAttributesOwner attributesOwner, IClrTypeName attributeName, ExternalAnnotationsExporter xmlWriter);
    private static IClrTypeName GetAttributeClrName(IAttribute attribute);
    [CompilerGeneratedAttribute]
internal static void <ProcessAttributeOwner>g__ExportAnnotationsIfPublic|9_0(IList`1<IAttributeInstance> attributeInstances, IDeclaredElement element, Nullable`1<AdditionalMemberInfo> memberInfo, <>c__DisplayClass9_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.ExternalAnnotations.MetadataAssemblyExternalAnnotationWriter : object {
    private Dictionary`2<string, IMetadataTypeMember> myAllPublicMembers;
    private ExternalAnnotationsXmlWriter myWriter;
    private IPsiModule myModule;
    private string myAssemblyName;
    public MetadataAssemblyExternalAnnotationWriter(IMetadataAssembly metadataAssembly, IPsiModule module, string assemblyName);
    private void CollectAllPublicMembers(IMetadataTypeInfo typeInfo);
    private void AddMember(IMetadataTypeMember member);
    public sealed virtual bool AppendAttributes(string memberXMLDocId, Nullable`1<AdditionalMemberInfo> additionalMemberInfo, IEnumerable`1<IAttributeInstance> attributeInstances);
    public sealed virtual void WriteData(string baseName, VirtualFileSystemPath path);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.ExternalAnnotations.ModuleExternalAnnotationWriter : object {
    [CompilerGeneratedAttribute]
private IPsiModule <module>P;
    private ExternalAnnotationsXmlWriter myWriter;
    public ModuleExternalAnnotationWriter(IPsiModule module);
    public sealed virtual bool AppendAttributes(string memberXMLDocId, Nullable`1<AdditionalMemberInfo> additionalMemberInfo, IEnumerable`1<IAttributeInstance> attributeInstances);
    public sealed virtual void WriteData(string baseName, VirtualFileSystemPath path);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.FieldKeywordToExplicitFieldAction : ModernScopedContextActionBase`1<IPropertyDeclaration> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public FieldKeywordToExplicitFieldAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual IPropertyDeclaration TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual bool IsAvailable(IPropertyDeclaration propertyDeclaration);
    protected virtual IBulbActionCommand ExecutePsiTransaction(IPropertyDeclaration propertyDeclaration, ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
internal class JetBrains.ReSharper.Intentions.CSharp.ContextActions.FillObjectInitializerAction : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <dataProvider>P;
    private bool myHasInitializedMembers;
    public string Text { get; }
    public FillObjectInitializerAction(ICSharpContextActionDataProvider dataProvider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    public static bool IsAvailable(ITreeNode nodeToInitialize, IDeclaredType createdType);
    [NullableContextAttribute("2")]
[PureAttribute]
private ITreeNode FindObjectCreationExpressionOrInitializer(IDeclaredType& createdType);
    [PureAttribute]
private static ISymbolTable GetMembersToInitializeTable(ITreeNode nodeToInitialize, IDeclaredType createdType);
    [PureAttribute]
private static bool HasMembersToInitialize(ITreeNode nodeToInitialize, IDeclaredType createdType);
    [PureAttribute]
private static IReadOnlyDictionary`2<ITypeMember, IMemberInitializer> GetExistingInitializers(ITreeNode nodeToInitialize);
    [PureAttribute]
private static IReadOnlyDictionary`2<string, IType> GetMembersProbablyInitializedByConstructor(ITreeNode nodeToInitialize);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public static IBulbActionCommand Execute(ITreeNode nodeToInitialize, IDeclaredType createdType);
    private static IObjectInitializer EnsureHasObjectInitializer(ITreeNode nodeToInitialize);
    [MustUseReturnValueAttribute]
private static HotspotsRegistry InitializeMembers(List`1<DeclaredElementInstanceSlim`1<ITypeMember>> members, IObjectInitializer objectInitializer);
    [CompilerGeneratedAttribute]
internal static bool <GetMembersToInitializeTable>g__AllowInitOnlySetters|8_0(<>c__DisplayClass8_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.ForeachToForAction : ModernContextActionBase`1<IForeachStatement> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <dataProvider>P;
    private static string IndexName;
    public string Text { get; }
    public ForeachToForAction(ICSharpContextActionDataProvider dataProvider);
    public virtual string get_Text();
    protected virtual IForeachStatement TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual bool IsAvailable(IForeachStatement foreachStatement);
    [PureAttribute]
private static object FindCollectionLengthAccess(IForeachStatement foreachStatement, Boolean& requiresExplicitCast);
    [PureAttribute]
private static bool CheckElementType(IForeachStatement foreachStatement, IType inferredType, Boolean& requiresExplicitCast);
    private static bool IsDeconstructingForeach(IForeachStatement foreachStatement);
    protected virtual IBulbActionCommand ExecutePsiTransaction(IForeachStatement foreachStatement, ISolution solution, IProgressIndicator progress);
    [PureAttribute]
private static IForStatement CreateForStatement(IForeachStatement foreachStatement, TreeNodeMarker indexIdentifierMarker, IBlock& forBlock);
    [PureAttribute]
private static IForStatement CreateMultiDimensionalArrayIterationForStatement(IForeachStatement foreachStatement, IArrayType arrayType, TreeNodeMarker indexIdentifierMarker, bool requiresExplicitCast, IBlock& bodyBlock);
    private static ICSharpStatement CreateVariableStatement(IForeachStatement foreachStatement, ICSharpExpression elementAccessExpression, CSharpElementFactory factory, bool requiresExplicitCast);
    private IBulbActionCommand CreateHotspotFromIndexReferencesAction(TreeNodeMarker indexIdentifierMarker, IForStatement forStatement);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.FormatString.AddFormatItemAction : ClrAddFormatItemAction {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <dataProvider>P;
    public AddFormatItemAction(ICSharpContextActionDataProvider dataProvider);
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    protected virtual bool IsSelectionRangeValid(IExpression selectedExpression, TextRange textRange);
    protected virtual IExpression GetExpressionThroughParenthesis(IExpression selectedExpression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.FormatString.AddStringInterpolationArgumentAction : ClrAddStringInterpolationArgumentAction {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <dataProvider>P;
    public AddStringInterpolationArgumentAction(ICSharpContextActionDataProvider dataProvider);
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    protected virtual IBulbActionCommand AddHotspotToInterpolation(IExpression interpolationExpression);
    protected virtual bool IsValidLiteralOffset(ILiteralExpression literal, int offset);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.FormatString.ConvertConcatenationToInterpolationAction : ClrConvertConcatenationToInterpolationAction {
    public ConvertConcatenationToInterpolationAction(ICSharpContextActionDataProvider dataProvider);
    protected virtual IStringConcatenationClrWrapper GetStringConcatenationWrapper(IExpression selectedExpression);
    protected virtual bool IsAvailableAtCaretPosition(IExpression argumentExpression, TreeTextRange treeSelection);
    protected virtual void InsertArgumentExpression(IStringInterpolationBuilder builder, IExpression expression);
    protected virtual Nullable`1<StringVerbatimity> TryGetStringVerbatimity(IExpression expression);
    protected virtual bool IsStringLiteral(ILiteralExpression literalExpression);
    private static bool HasIntersectionWithInterpolationInserts(IInterpolatedStringExpression interpolatedStringExpression, TreeTextRange treeSelection);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.FormatString.PassStringFormatAction : ClrPassStringFormatAction {
    private ICSharpContextActionDataProvider myDataProvider;
    public PassStringFormatAction(ICSharpContextActionDataProvider dataProvider);
    protected virtual IExpression RewriteToStringFormat(FormattingFunctionInvocationInfo formattingInfo);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.FormatString.PassStringInterpolationAction : ClrPassStringInterpolationAction {
    public PassStringInterpolationAction(ICSharpContextActionDataProvider dataProvider);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.FormatString.RemoveFormatItemAction : ClrRemoveFormatItemAction {
    public RemoveFormatItemAction(ICSharpContextActionDataProvider dataProvider);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.FormatString.SurroundWithFormatAction : ClrSurroundWithFormatAction {
    public SurroundWithFormatAction(ICSharpContextActionDataProvider dataProvider);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.FormatString.UseFormatStringAction : ClrUseFormatStringAction {
    public UseFormatStringAction(ICSharpContextActionDataProvider dataProvider);
    protected virtual bool IsAllowedOnExpression(IExpression argumentExpression);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.FormatString.UseStringInterpolationAction : ClrUseStringInterpolationAction {
    public UseStringInterpolationAction(ICSharpContextActionDataProvider dataProvider);
    protected virtual bool IsAvailableAtCaretOffset(FormattingFunctionInvocationInfo invocationInfo, TreeTextRange selectedTreeTextRange);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.FormattableSplitStringTrigger : object {
    public sealed virtual bool IsAvailable(ICSharpContextActionDataProvider provider, ITokenNode literalToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.FromLinqContextAction : object {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <dataProvider>P;
    public FromLinqContextAction(ICSharpContextActionDataProvider dataProvider);
    public sealed virtual bool IsAvailable(IUserDataHolder dataHolder);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    private TransformQueryAction GetTransformQueryAction(LinqCache cache);
    private TransformInvocationBulbItem GetTransformInvocationAction(LinqCache cache);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.GenerateFlagPresenceCheckExtensionAction : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public GenerateFlagPresenceCheckExtensionAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static bool CanCreateExtensionMethodFor(IProperTypeDeclaration enumDeclaration);
    private static AccessRights GetAggregatedAccessRight(ITreeNode typeDeclaration);
    private static ISubstitution MapGenericConstraints(IProperTypeDeclaration typeDeclaration, CSharpElementFactory factory, IMethodDeclaration methodDeclaration);
    private static void SetClassName(IEnumDeclaration enumDeclaration, IClassLikeDeclaration classDeclaration, ITreeNode context);
    private static IProperTypeDeclaration GetHierarchyRoot(IProperTypeDeclaration typeDeclaration);
    private static IEnumerable`1<ITypeParameterOfTypeDeclaration> GetTypeParameters(IProperTypeDeclaration typeDeclaration);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.GenerateTypePatternsAction : ContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public GenerateTypePatternsAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [NullableContextAttribute("2")]
[PureAttribute]
private ISwitchStatement FindSwitchStatement();
    [NullableContextAttribute("2")]
[PureAttribute]
private ISwitchExpression FindSwitchExpression();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Intentions.CSharp.ContextActions.GenerateTypePatternsUtil : object {
    [PureAttribute]
public static bool ShouldGenerateTypePatternsFor(IType governingType, ITreeNode context);
    [MustUseReturnValueAttribute]
public static Action`1<ITextControl> Execute(ISwitchStatement switchStatement, ISolution solution, IProgressIndicator progress);
    [MustUseReturnValueAttribute]
public static Action`1<ITextControl> Execute(ISwitchExpression switchExpression, ISolution solution, IProgressIndicator progress);
    [MustUseReturnValueAttribute]
private static Action`1<ITextControl> Execute(ITreeNode patternMatchingConstruct, Action`1<IGeneratorContext> contextInitializer);
}
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.HelpTopicAction : object {
    [CompilerGeneratedAttribute]
private HelpSystem <helpSystem>P;
    [CompilerGeneratedAttribute]
private HelpId <helpTopicId>P;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public bool IsReadOnly { get; }
    public string Text { get; }
    public HelpTopicAction(HelpSystem helpSystem, HelpId helpTopicId, string product);
    public sealed virtual bool get_IsReadOnly();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Text();
    public sealed virtual void Execute(ISolution solution, ITextControl textControl);
    public static IntentionAction CreateIntentionAction(IPsiSourceFile file, IAnchor anchor, HelpId helpTopicId);
}
[NullableContextAttribute("1")]
internal interface JetBrains.ReSharper.Intentions.CSharp.ContextActions.IConverter {
    public abstract virtual IEnumerable`1<ICSharpStatement> ConvertArmExpressionToSwitchBlockStatements(ICSharpExpression expression, ITreeSnapshot commentSnapshot);
    public abstract virtual ISwitchStatement ReplaceOriginalStatementWithSwitchStatement(ISwitchStatement switchStatement);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.IfAndMergeAction : ModernContextActionBase`1<IIfStatement> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    [NullableAttribute("2")]
private string myActionHint;
    public string Text { get; }
    public IfAndMergeAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual IIfStatement TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual bool IsAvailable(IIfStatement innerIfStatement);
    [NullableContextAttribute("2")]
[PureAttribute]
[ContractAnnotationAttribute("null => false")]
private static bool IsWellFormedIfWithoutElse(IIfStatement ifStatement);
    protected virtual IBulbActionCommand ExecutePsiTransaction(IIfStatement innerIfStatement, ISolution solution, IProgressIndicator progress);
    [CompilerGeneratedAttribute]
internal static bool <ExecutePsiTransaction>g__IsNotBlockWorthPuttingIntoBlock|8_0(ICSharpStatement statement);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.IfNotNullToConditionalAccessAction : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public IfNotNullToConditionalAccessAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static ILambdaExpression MatchIfNotNullArguments(IInvocationExpression invocationExpression, IMethod method, ICSharpExpression& defaultValueExpression);
    private static IAccess MatchLambdaAccessChain(ILambdaExpression lambdaExpression);
    private static bool MatchIfNotNullName(IMethod method);
    private static MethodKind MatchIfNotNullSignature(IMethod method);
    [NullableContextAttribute("2")]
private static bool MatchFunc2LikeDelegateType(IType type, IType& parameterType, IType& returnType);
    [ContractAnnotationAttribute("=> false, returnType: null; => true, returnType: notnull")]
private static bool MatchFunc1LikeDelegateType(IType type, IType& returnType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.IfToGuardClauseAction : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <dataProvider>P;
    public string Text { get; }
    public IfToGuardClauseAction(ICSharpContextActionDataProvider dataProvider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [NullableContextAttribute("2")]
private static ISwitchSection GetSwitchSectionByTopLevelStatement(IIfStatement ifStatement);
    private static IList`1<ICSharpCommentNode> CollectCommentsForGuard(IIfStatement ifStatement);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.IfToNullPropagationAction : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public IfToNullPropagationAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class JetBrains.ReSharper.Intentions.CSharp.ContextActions.IfToSwitchActionBase : ModernScopedContextActionBase`1<SwitchSectionsCollector> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public static byte MinimumNumberOfSwitchSectionsToConvert;
    protected IfToSwitchActionBase(ICSharpContextActionDataProvider provider);
    protected virtual SwitchSectionsCollector TryCreateInfoFromDataProvider(IUserDataHolder cache);
    public static bool CheckCaretPosition(IIfStatement ifStatement, ICSharpContextActionDataProvider provider);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.IfToSwitchExpressionAction : object {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    [NullableAttribute("2")]
private SwitchSectionsCollector mySectionsCollector;
    public IfToSwitchExpressionAction(ICSharpContextActionDataProvider provider);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public static IBulbActionCommand Execute(SwitchSectionsCollector collector);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.IfToSwitchStatementAction : object {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    [NullableAttribute("2")]
private SwitchSectionsCollector mySectionsCollector;
    public IfToSwitchStatementAction(ICSharpContextActionDataProvider provider);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    [PureAttribute]
private static SwitchSectionsCollector TryBuildCollector(IIfStatement ifStatement, Nullable`1<byte> sectionsLimit);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public static IBulbActionCommand Execute(IIfStatement ifStatement, ConversionMode conversionMode);
    private static IBulbActionCommand OptimizeCastsInSwitchSections(ISwitchStatement switchStatement);
    private static Nullable`1<NameSuggestionInfo> ReplaceExpressionsWithPatternVariable(IPatternWithDesignation patternWithDesignation, IType patternType, IList`1<ICSharpExpression> expressionsToReplace);
    private static void CreateSectionBodyStatements(ICSharpStatementsRange bodyStatements, IStatementsOwner switchSection, CSharpElementFactory factory);
    private static void CreateSwitchSectionCaseLabels(ISwitchSection currentSection, SwitchSection switchCase, OneToListMap`2<SwitchCaseCheck, ICSharpCommentNode> switchLabelComments, CSharpElementFactory factory, SwitchSectionsCollector collector);
    private static HashSet`1<SwitchSection> CollectSectionsToEnblock(IReadOnlyList`1<SwitchSection> collector);
    private static void InsertMissingBreaks(ISwitchStatement switchStatement);
    [CompilerGeneratedAttribute]
internal static IBulbActionCommand <Execute>g__ExecuteBody|7_2(IIfStatement ifStatement, SwitchSectionsCollector collector, bool rewriteIfsToGuards);
    [CompilerGeneratedAttribute]
internal static SwitchSectionsCollector <Execute>g__BuildFullCollector|7_3(IIfStatement statement, ConversionMode conversionMode);
    [CompilerGeneratedAttribute]
internal static IReadOnlyList`1<ICSharpExpression> <ReplaceExpressionsWithPatternVariable>g__ReplaceExpressions|9_0(<>c__DisplayClass9_0& );
    [CompilerGeneratedAttribute]
internal static void <CollectSectionsToEnblock>g__AddVariables|12_0(SwitchSection sourceSection, ILocalScope scope, OneToSetMap`2<SwitchSection, string> targetSet);
    [CompilerGeneratedAttribute]
internal static bool <CollectSectionsToEnblock>g__ShouldEnblockSectionWithStatement|12_1(IStatement statement);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.IfToTernaryAction : ModernContextActionBase {
    private static IConversionCase[] ourOurCases;
    public static Key`1<string> Key;
    private ICSharpContextActionDataProvider myProvider;
    private Lazy`1<ICSharpControlFlowGraph> myLazyControlFlowGraph;
    [NullableAttribute("2")]
private string mySpecialCaseText;
    public string Text { get; }
    public IfToTernaryAction(ICSharpContextActionDataProvider provider);
    private static IfToTernaryAction();
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [NullableContextAttribute("2")]
private static bool TryGetMatchingCase(IfStatementInfo ifStatementInfo, IConversionCase& matchingCase, String& specialCaseDescription);
    private static bool CanSimplifyToBinaryCondition(ICSharpExpression thenExpression, ICSharpExpression elseExpression);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private ICSharpControlFlowGraph <.ctor>b__5_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.ImplementEventAction : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public ImplementEventAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.ImplementNotifyPropertyChangedAction : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    private static string EventName;
    public string Text { get; }
    public ImplementNotifyPropertyChangedAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
private IEventDeclaration FindEventDeclaration();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public static void EmitNotifyMethod(IEventDeclaration eventDeclaration);
    private static IMethodDeclaration CreateOnPropertyChangedMethod(IClassLikeDeclaration typeDeclaration);
    private static void CreateOnPropertyChangedMethodBody(IMethodDeclaration methodDeclaration, IEventDeclaration eventDeclaration);
    private static IMethodDeclaration CreateSetFieldMethod(IClassLikeDeclaration typeDeclaration);
    private static void CreateSetFieldMethodBody(IMethodDeclaration methodDeclaration);
    private static void MarkWithCallerMemberNameAndMakeOptionalIfPossible(ITypeMemberRegularParameterDeclaration parameterDeclaration);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.ImplementOrOverrideMember.ImplementAbstractMemberAction : ImplementMemberBase {
    protected ICSharpContextActionDataProvider DataProvider;
    protected string DerivedTypeKinds;
    protected bool IsOverSignature;
    public string Text { get; }
    protected string SelectPartText { get; }
    protected string GeneratorKind { get; }
    public ImplementAbstractMemberAction(ICSharpContextActionDataProvider dataProvider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [PureAttribute]
public static bool CheckRange(IClassMemberDeclaration memberDeclaration, TreeTextRange selectedRange, Boolean& overSignature);
    protected virtual List`1<ITypeElement> GetTargetTypes(IProgressIndicator progress);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    protected virtual IOverridableMember GetMemberToImplement();
    protected virtual string get_SelectPartText();
    protected virtual string get_GeneratorKind();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.ImplementOrOverrideMember.OverrideMemberAction : ImplementAbstractMemberAction {
    public string Text { get; }
    protected string SelectPartText { get; }
    protected string GeneratorKind { get; }
    public OverrideMemberAction(ICSharpContextActionDataProvider dataProvider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual string get_SelectPartText();
    protected virtual string get_GeneratorKind();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.ImplicitToExplicitMemberAction : ModernScopedContextActionBase`1<IInterfaceQualificationOwner> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public ImplicitToExplicitMemberAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual IInterfaceQualificationOwner TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual bool IsAvailable(IInterfaceQualificationOwner qualificationOwner);
    public static IReadOnlyList`1<OverridableMemberInstance> FindInterfaceMembers(IOverridableMember overridableMember, ITreeNode usageContext);
    protected virtual IBulbActionCommand ExecutePsiTransaction(IInterfaceQualificationOwner qualificationOwner, ISolution solution, IProgressIndicator progress);
    public static void Execute(IInterfaceQualificationOwner qualificationOwner, IReadOnlyList`1<OverridableMemberInstance> interfaceMembers);
    public static void TurnIntoExplicitImplementation(IInterfaceQualificationOwner qualificationOwner, OverridableMemberInstance memberInstance);
    private static void PostImplementationFixMember(IInterfaceQualificationOwner qualificationOwner, OverridableMemberInstance interfaceMember);
    private static void PostImplementationFixEvent(IEventDeclaration eventDeclaration);
    private static IDeclaration FixMemberDeclaration(IInterfaceQualificationOwner qualificationOwner, IReadOnlyList`1<OverridableMemberInstance> interfaceMembers);
    private static bool HasPropertyAccessorProblems(IPropertyDeclaration declaration, IEnumerable`1<OverridableMemberInstance> interfaceMembers);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal static int <HasPropertyAccessorProblems>g__AccessorsCount|13_0(IProperty property);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.ImportStaticMembersAction : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public ImportStaticMembersAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    private static bool IsAvailableEx(IReference qualifierReference, IReference reference);
    private static DeclaredElementInstance`1<ITypeElement> FindImportTarget(IReference qualifierReference, IReference reference);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static IUsingDirective GetQualifierUsingDirectiveDirective(IReference qualifier);
    private static void ShortenStaticMembersReferences(IReference reference, DeclaredElementInstance importTarget);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.IncludeIntoObjectPatternAction : ModernScopedContextActionBase`1<IReferenceExpression> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <dataProvider>P;
    public string Text { get; }
    public IncludeIntoObjectPatternAction(ICSharpContextActionDataProvider dataProvider);
    public virtual string get_Text();
    protected virtual IReferenceExpression TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual bool IsAvailable(IReferenceExpression referenceExpression);
    private static bool IsNullableConditionalAccess(IReferenceExpression referenceExpression);
    private static RewriteKind GetRewriteKind(IPattern pattern, IReferenceExpression referenceExpression, ICSharpExpression qualifierExpression);
    private static bool IsSwitchEligible(IReferenceExpression referenceExpression, PatternMatchKind patternMatchKind, ICSharpExpression qualifierExpression, CaseLabelPatternMatchInfo lastCaseLabelInfo, bool areThereReachableCasesNotDiscard, bool isEndPointReachable, bool canUnliftPatterns);
    private static bool IsLastCaseLabelEligible(CaseLabelPatternMatchInfo lastCaseLabelInfo, bool isQualifierTrueValueType, bool isEndPointReachable);
    protected virtual IBulbActionCommand ExecutePsiTransaction(IReferenceExpression referenceExpression, ISolution solution, IProgressIndicator progress);
    private static void ReplacePatterns(ISwitchExpression switchExpression, CSharpElementFactory factory, IReferenceExpression governingExpression, bool unlift);
    private static void ReplacePatterns(ISwitchStatement switchStatement, CSharpElementFactory factory, IReferenceExpression governingExpression, bool unlift);
    private static bool CanUnliftPattern(IPattern pattern);
    private static IPattern TryUnliftPattern(IPattern pattern);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private IReferenceExpression <TryCreateInfoFromDataProvider>g__CheckOperand|4_0(ICSharpExpression dispatchExpression, ITokenNode beforeKeyword, ITokenNode afterKeyword);
    [CompilerGeneratedAttribute]
private IReferenceExpression <TryCreateInfoFromDataProvider>g__CheckOperandForNullCheck|4_1(ICSharpExpression nullCheckExpression);
    [CompilerGeneratedAttribute]
internal static bool <IsAvailable>g__CanUnliftPatterns|5_0(ISwitchExpression switchExpression);
    [CompilerGeneratedAttribute]
internal static bool <IsAvailable>g__CanUnliftPatterns|5_1(ISwitchStatement switchStatement);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.InitializeMemberFromConstructorAction : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public InitializeMemberFromConstructorAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [NullableContextAttribute("2")]
private ITypeMemberDeclaration FindTypeMemberDeclaration();
    private static bool IsInitializedByConstructorParameter(ITypeMember typeMember);
    private static HashSet`1<IConstructor> CollectCtorsWithMemberInitialization(ITypeMember typeMember);
    private static ValueTuple`2<bool, HashSet`1<IConstructor>> FindMemberInitializations(ITypeMember typeMember, bool collectCtors);
    [CompilerGeneratedAttribute]
internal static bool <FindTypeMemberDeclaration>g__IsSuitableFieldDeclaration|6_0(IFieldDeclaration fieldDeclaration);
    [CompilerGeneratedAttribute]
internal static bool <FindTypeMemberDeclaration>g__IsSuitablePropertyDeclaration|6_1(IPropertyDeclaration propertyDeclaration);
}
[CustomHighlightingGroupActionProviderAttribute("JetBrains.ProjectModel.CSharpProjectFileType", "16")]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.InlayHints.SetDisposeAnalysisModeInlayHintsGroupContextActionProvider : object {
    public sealed virtual IAnchor GetAnchor();
    public sealed virtual IEnumerable`1<IntentionAction> GetActions(IEnumerable`1<IHighlighting> highlightings, IPsiSourceFile sourceFile, IAnchor configureAnchor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.InlineControlTransferStatementAction : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <dataProvider>P;
    public string Text { get; }
    public InlineControlTransferStatementAction(ICSharpContextActionDataProvider dataProvider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [PureAttribute]
private static JumpStatementKind GetJumpStatementKind(ICSharpStatement statement);
    [PureAttribute]
private static DisjointedTreeTextRange GetJumpStatementAvailabilityRange(ICSharpStatement statement);
    [PureAttribute]
private static IReadOnlyCollection`1<IControlTransferInlineLocation> FindInlineLocations(ICSharpStatement statement, JumpStatementKind jumpKind);
    [PureAttribute]
private static IReadOnlyCollection`1<IControlTransferInlineLocation> CollectIfStatementInlineLocations(IIfStatement rootIfStatement);
    [PureAttribute]
private static IReadOnlyCollection`1<IControlTransferInlineLocation> CollectSwitchStatementInlineLocations(ISwitchStatement switchStatement);
    [PureAttribute]
private static ControlTransferKind InspectStatementsOwner(IStatementsOwner statementsOwner, ICollection`1<ICSharpStatement> controlTrasferStatements);
    [NullableContextAttribute("2")]
[PureAttribute]
private static ControlTransferKind InspectStatement(ICSharpStatement statement, ICollection`1<ICSharpStatement> controlTrasferStatements);
    [PureAttribute]
private static ControlTransferKind InspectTryStatement(ITryStatement tryStatement, ICollection`1<ICSharpStatement> controlTrasferStatements);
    [PureAttribute]
private static ControlTransferKind Merge(ControlTransferKind a, ControlTransferKind b);
    private static bool TryMergeLocalVariableAssignmentInLastFallThroughStatementWithReturnStatement(ICSharpStatement fallThroughStatement, ICSharpStatement jumpStatement);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [CompilerGeneratedAttribute]
internal static bool <CollectIfStatementInlineLocations>g__Collect|9_0(IIfStatement ifStatement, <>c__DisplayClass9_0& );
    [CompilerGeneratedAttribute]
internal static bool <TryMergeLocalVariableAssignmentInLastFallThroughStatementWithReturnStatement>g__IsTrueLocalVariable|19_0(IDeclaredElement declaredElement);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.InlineInsertToInterpolationAction : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <dataProvider>P;
    [NullableAttribute("2")]
private ICSharpExpression myInlineExpression;
    public string Text { get; }
    public InlineInsertToInterpolationAction(ICSharpContextActionDataProvider dataProvider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private ICSharpExpression GetInlineableExpression(IInterpolatedStringExpression interpolatedExpression, IInterpolatedStringInsert interpolatedInsert);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.InlineOutVariableDeclarationAction : ModernContextActionBase`1<ILocalVariableDeclaration> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public InlineOutVariableDeclarationAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual ILocalVariableDeclaration TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual bool IsAvailable(ILocalVariableDeclaration localVariableDeclaration);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ILocalVariableDeclaration localVariableDeclaration, ISolution solution, IProgressIndicator progress);
    public static void InlineAsDeclarationExpression(ILocalVariableDeclaration localVariableDeclaration, ICSharpArgument outArgument);
    private static void PreserveInitializerSideEffects(ILocalVariableDeclaration localVariableDeclaration);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.InlineTemporaryVariableAction : ModernScopedContextActionBase`1<IVariableDeclaration> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public static string ActionText;
    public string Text { get; }
    public InlineTemporaryVariableAction(ICSharpContextActionDataProvider provider);
    private static InlineTemporaryVariableAction();
    public virtual string get_Text();
    protected virtual bool IsAvailable(IVariableDeclaration variableDeclaration);
    protected virtual IVariableDeclaration TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(IVariableDeclaration variableDeclaration, ISolution solution, IProgressIndicator progress);
    public static void Execute(IVariableDeclaration variableDeclaration);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.InlineUsingAliasAction : ModernScopedContextActionBase`1<IUsingAliasDirective> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public InlineUsingAliasAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual IUsingAliasDirective TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual IUsingAliasDirective TryCreateInfoFromTreeNode(ITreeNode treeNode);
    protected virtual bool IsAvailable(IUsingAliasDirective usingAliasDirective);
    protected virtual FileCollectorInfo GetFileCollectorInfo(IUsingAliasDirective usingAliasDirective);
    protected virtual bool IsAvailableForScope(Scope scope, IUsingAliasDirective usingAliasDirective);
    protected virtual IBulbActionCommand ExecutePsiTransaction(IUsingAliasDirective usingAliasDirective, ISolution solution, IProgressIndicator progress);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.InlineUsingAliasAction/<TryFindAliasInFile>d__10")]
[PureAttribute]
private IEnumerable`1<IUsingAliasDirective> TryFindAliasInFile(ICSharpFile file, IUsingAliasDirective usingAliasDirective);
    private static IBulbActionCommand InlineAllReferences(IUsingAliasDirective usingAliasDirective, IEnumerable`1<IReference> references);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal static <InlineUsingAliasAction>F70BC7BDD32B725EF2C21686C3BBB7B31B49B09036DEF7B29832636797F1AE88E__IAliasedSymbolBinder <InlineAllReferences>g__GetAliasedSymbolBinder|11_0(AliasedSymbol aliasedSymbol);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.InlineVariableIntoConditionAction : ModernScopedContextActionBase`1<IDeclarationStatement> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <dataProvider>P;
    public string Text { get; }
    public InlineVariableIntoConditionAction(ICSharpContextActionDataProvider dataProvider);
    public virtual string get_Text();
    protected virtual IDeclarationStatement TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual bool IsAvailable(IDeclarationStatement declarationStatement);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.InlineVariableIntoConditionAction/<FindVariableChecksInCondition>d__6")]
private static IEnumerable`1<ValueTuple`2<ICSharpExpression, IReferenceExpression>> FindVariableChecksInCondition(ICSharpExpression ifCondition);
    [PureAttribute]
private static bool IsCheckExpression(ICSharpExpression expression, ICSharpExpression& checkedExpression);
    protected virtual IBulbActionCommand ExecutePsiTransaction(IDeclarationStatement declarationStatement, ISolution solution, IProgressIndicator progress);
    private static IIsExpression ConvertToPatternCheck(ICSharpExpression expression, ILocalVariableDeclaration variableDeclaration);
    [CompilerGeneratedAttribute]
internal static bool <IsAvailable>g__AllVariableUsagesInsideThenBody|5_0(<>c__DisplayClass5_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.InsertAnonymousMethodSignatureAction : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public InsertAnonymousMethodSignatureAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [PureAttribute]
private static bool CheckClosureHasValidContextualType(IAnonymousFunctionExpression anonymousFunction);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static void AppendParameters(IAnonymousFunctionExpression anonymousFunction, FactoryArgumentsBuilder builder);
    private static void SetParameterNames(IAnonymousMethodExpression anonymousMethodExpression, IDelegate targetDelegate);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.InsertLambdaExpressionReturnTypeAction : ModernScopedContextActionBase`1<ILambdaExpression> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public InsertLambdaExpressionReturnTypeAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual ILambdaExpression TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual bool IsAvailable(ILambdaExpression lambdaExpression);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ILambdaExpression lambdaExpression, ISolution solution, IProgressIndicator progress);
    [CompilerGeneratedAttribute]
internal static TemplateField <ExecutePsiTransaction>g__CreateReturnTypeField|6_0(<>c__DisplayClass6_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.InsertLambdaExpressionSignatureAction : ModernScopedContextActionBase`1<ILambdaExpression> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public InsertLambdaExpressionSignatureAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual ILambdaExpression TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual bool IsAvailable(ILambdaExpression lambdaExpression);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ILambdaExpression lambdaExpression, ISolution solution, IProgressIndicator progress);
    [NullableContextAttribute("2")]
public static HotspotInfo AddExplicitParameterType(ILocalRegularParameterDeclaration localParameterDeclaration, ILocalRegularParameterDeclaration& newParameterDeclaration, ILambdaExpression containingLambdaExpression, int index, IType initialParameterType, CSharpElementFactory factory);
    private static ExpressionTypeSuggestion GetTypeSuggestion(IType parameterType, ILocalParameterDeclaration newDeclaration, ILambdaExpression lambdaExpression);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.InsertPragmaWarningDescriptionAction : ModernScopedContextActionBase`1<IPragmaDirective> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public InsertPragmaWarningDescriptionAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual bool IsAvailable(IPragmaDirective availabilityInfo);
    protected virtual IPragmaDirective TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(IPragmaDirective availabilityInfo, ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class JetBrains.ReSharper.Intentions.CSharp.ContextActions.Internal.AnalyzerAttributeInfo : ValueType {
    [CompilerGeneratedAttribute]
private HighlightingSourceKind <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private IAttribute <Attribute>k__BackingField;
    [CompilerGeneratedAttribute]
private IClassDeclaration <ClassDeclaration>k__BackingField;
    [CompilerGeneratedAttribute]
private IPropertyAssignment <HighlightingTypesPropertyAssignment>k__BackingField;
    public static AnalyzerAttributeInfo None;
    public HighlightingSourceKind Kind { get; public set; }
    public IAttribute Attribute { get; public set; }
    public IClassDeclaration ClassDeclaration { get; public set; }
    public IPropertyAssignment HighlightingTypesPropertyAssignment { get; public set; }
    public AnalyzerAttributeInfo(HighlightingSourceKind Kind, IAttribute Attribute, IClassDeclaration ClassDeclaration, IPropertyAssignment HighlightingTypesPropertyAssignment);
    private static AnalyzerAttributeInfo();
    [CompilerGeneratedAttribute]
public HighlightingSourceKind get_Kind();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Kind(HighlightingSourceKind value);
    [CompilerGeneratedAttribute]
public IAttribute get_Attribute();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Attribute(IAttribute value);
    [CompilerGeneratedAttribute]
public IClassDeclaration get_ClassDeclaration();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ClassDeclaration(IClassDeclaration value);
    [CompilerGeneratedAttribute]
public IPropertyAssignment get_HighlightingTypesPropertyAssignment();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_HighlightingTypesPropertyAssignment(IPropertyAssignment value);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(AnalyzerAttributeInfo left, AnalyzerAttributeInfo right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(AnalyzerAttributeInfo left, AnalyzerAttributeInfo right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(AnalyzerAttributeInfo other);
    [CompilerGeneratedAttribute]
public void Deconstruct(HighlightingSourceKind& Kind, IAttribute& Attribute, IClassDeclaration& ClassDeclaration, IPropertyAssignment& HighlightingTypesPropertyAssignment);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
internal class JetBrains.ReSharper.Intentions.CSharp.ContextActions.Internal.AnnotateHighlightingTypesAction : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public AnnotateHighlightingTypesAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static void SetNewPropertyAssignmentSource(HashSet`1<IDeclaredType> highlightingTypes, IAttribute attribute, IPropertyAssignment propertyAssignment);
    private static void AppendHighlightingTypes(HashSet`1<IDeclaredType> highlightingTypes, IArrayInitializer arrayInitializer);
    private static void AppendHighlightingTypes(HashSet`1<IDeclaredType> highlightingTypes, ICollectionExpression collectionExpression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class JetBrains.ReSharper.Intentions.CSharp.ContextActions.Internal.DaemonActionsUtil : object {
    public static AnalyzerAttributeInfo FindAnalyzerAttribute(ICSharpContextActionDataProvider provider, bool mustHavePropertyInitializer);
    [PureAttribute]
private static AnalyzerAttributeInfo FindAnalyzerAttribute(ICSharpContextActionDataProvider provider);
    public static void FormatWithForcedWrapping(ITreeNode firstNode, ITreeNode lastNode);
    public static void AddHighlightingType(ICSharpTypeDeclaration typeDeclaration, HighlightingSourceKind kind, IDeclaredType highlightingType);
    private static void AddHighlightingType(IPropertyAssignment propertyAssignment, IDeclaredType highlightingType, CSharpElementFactory factory);
    public static void RemoveHighlightingType(ITypeofExpression typeSpecification);
    public static IAttribute AddHighlightingSourceAttribute(ICSharpTypeDeclaration typeDeclaration, HighlightingSourceKind kind);
    public static IAttribute AddNonHighlightingSourceAttribute(ICSharpTypeDeclaration typeDeclaration);
    private static IAttribute AddAttribute(ICSharpTypeDeclaration typeDeclaration, ITypeElement attributeTypeElement);
    [CompilerGeneratedAttribute]
internal static void <RemoveHighlightingType>g__RemoveContainingPropertyAssignment|5_0(ITreeNode typeSpecificationHolder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
internal class JetBrains.ReSharper.Intentions.CSharp.ContextActions.Internal.SortHighlightingTypesAction : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public SortHighlightingTypesAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static void SortHighlightingTypes(IArrayInitializer arrayInitializer);
    private static void SortHighlightingTypes(ICollectionExpression collectionExpression);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.Internal.ZoneMarker : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.InternalCreateStringsFileContextAction : ContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public InternalCreateStringsFileContextAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecuteAfterPsiTransaction(ISolution solution, IProjectModelTransactionCookie cookie, IProgressIndicator progress);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.InternalLocalizeContextAction : ContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public InternalLocalizeContextAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private bool ModifyResourceFileWithPsiTransaction(ISolution solution, IPsiSourceFile resourceFile, Action modifyAction);
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
internal static Data TryFromLiteralExpression(IExpression expression, string kind);
    private static string DequoteFormatString(string text);
    private static void CollectTerms(IAdditiveExpression additive, List`1<IExpression> terms);
}
public static class JetBrains.ReSharper.Intentions.CSharp.ContextActions.InterpolationStringExpressionActionUtil : object {
    [NullableContextAttribute("1")]
public static bool IsCaretInsideStringLiteral(IInterpolatedStringExpression interpolatedExpression, TreeTextRange selectedTreeRange);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.InterpolationToStringFormatAction : ModernScopedContextActionBase`1<IInterpolatedStringExpression> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public InterpolationToStringFormatAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual IInterpolatedStringExpression TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual bool IsAvailable(IInterpolatedStringExpression interpolatedStringExpression);
    protected virtual IBulbActionCommand ExecutePsiTransaction(IInterpolatedStringExpression interpolatedExpression, ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.InvertIfAction : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public InvertIfAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.InvertTernaryConditionAction : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <dataProvider>P;
    public string Text { get; }
    public InvertTernaryConditionAction(ICSharpContextActionDataProvider dataProvider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.InvokeAsStaticMethodAction : ModernScopedContextActionBase`1<IReferenceExpression> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public string ScopedText { get; }
    public InvokeAsStaticMethodAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    protected virtual IReferenceExpression TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual bool IsAvailable(IReferenceExpression referenceExpression);
    protected virtual IBulbActionCommand ExecutePsiTransaction(IReferenceExpression referenceExpression, ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.InvokeEventAction : ModernContextActionBase`1<IEventDeclaration> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <dataProvider>P;
    public static string ActionText;
    public string Text { get; }
    public InvokeEventAction(ICSharpContextActionDataProvider dataProvider);
    private static InvokeEventAction();
    public virtual string get_Text();
    protected virtual IEventDeclaration TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual bool IsAvailable(IEventDeclaration eventDeclaration);
    [NullableContextAttribute("2")]
public static bool IsAvailableEx(IEventDeclaration eventDeclaration);
    [PureAttribute]
private static IDeclaredType GetDelegateType(IEventDeclaration eventDeclaration);
    private static bool CheckNoInvocatorPresent(IEventDeclaration eventDeclaration);
    protected virtual IBulbActionCommand ExecutePsiTransaction(IEventDeclaration eventDeclaration, ISolution solution, IProgressIndicator progress);
    public static IBulbActionCommand Execute(IEventDeclaration eventDeclaration);
    private static bool FirstParameterIsSender(IDeclaredType delegateType, ITypeElement containingType, ITreeNode context);
    private static CreateMethodDeclarationContext CreateMethodContext(IEventDeclaration declaration, IDeclaredType delegateType, ICSharpTypeDeclaration typeDeclaration, bool firstIsSender);
    [PureAttribute]
public static string BakeMethodName(string defaultName, IEventDeclaration eventDeclaration, ICSharpTypeDeclaration typeDeclaration);
    private static void SetVirtualModifierIfMatters(IMethodDeclaration methodDeclaration);
    private static IBlock CreateInvocatorBody(IMethodDeclaration methodDeclaration, IEventDeclaration eventDeclaration, IDeclaredType delegateType, bool firstIsSender);
    private static ITypeMember GetEventArgsEmptyMember(IDeclaredType eventArgsType);
    internal static IInvocationExpression CreateEventInvocation(IMethodDeclaration methodDeclaration, IEventDeclaration eventDeclaration, IDeclaredType delegateType, bool firstIsSender);
    [PureAttribute]
internal static bool ShouldCheckEventForNull(IEventDeclaration eventDeclaration);
    internal static ILocalVariable BakeHandlerVariableDeclaration(IMethodDeclaration invocatorMethodDeclaration, IDeclaredType delegateType, IEvent eventElement, CSharpElementFactory factory);
}
public interface JetBrains.ReSharper.Intentions.CSharp.ContextActions.ISplitStringTrigger {
    public abstract virtual bool IsAvailable(ICSharpContextActionDataProvider provider, ITokenNode literalToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.IterateViaAwaitForeachAction : IterateViaForeachActionBase {
    protected bool IsAwaitForeach { get; }
    public string Text { get; }
    public IterateViaAwaitForeachAction(ICSharpContextActionDataProvider dataProvider);
    protected virtual bool get_IsAwaitForeach();
    public sealed virtual string get_Text();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.IterateViaForeachAction : IterateViaForeachActionBase {
    protected bool IsAwaitForeach { get; }
    public string Text { get; }
    public IterateViaForeachAction(ICSharpContextActionDataProvider dataProvider);
    protected virtual bool get_IsAwaitForeach();
    public virtual string get_Text();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class JetBrains.ReSharper.Intentions.CSharp.ContextActions.IterateViaForeachActionBase : ModernContextActionBase`1<IExpressionStatement> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <dataProvider>P;
    protected bool IsAwaitForeach { get; }
    protected IterateViaForeachActionBase(ICSharpContextActionDataProvider dataProvider);
    protected abstract virtual bool get_IsAwaitForeach();
    protected virtual IExpressionStatement TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual bool IsAvailable(IExpressionStatement expressionStatement);
    protected virtual IBulbActionCommand ExecutePsiTransaction(IExpressionStatement expressionStatement, ISolution solution, IProgressIndicator progress);
    [PureAttribute]
public static bool IsAvailable(ICSharpExpression collectionExpression, bool isAwaitForeach, IExpressionType expectedIteratorType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.Iterator2FunctionAction : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public Iterator2FunctionAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static IType GetIteratorElementType(IParametersOwner function, ITreeNode context, Boolean& isEnumerator);
    private static bool IsArrayReturnSituation(ICSharpDeclaration declaration, YieldStatementsCollector yieldStatements);
    private void ArrayReturnSituation(ICSharpDeclaration declaration, YieldStatementsCollector yieldStatements, IType elementType);
    private HotspotInfo GenericConvertSituation(ICSharpDeclaration declaration, YieldStatementsCollector statements, IType elementType, bool returnEnumerator, ICSharpControlFlowGraph graph);
    private IDeclarationStatement EmitListDeclaration(IBlock body, string listName, IType listType);
    private ICSharpTreeNode EmitListAdd(IYieldStatement yieldReturn, ICSharpIdentifier outputList, IType enumerableType);
    [NullableContextAttribute("2")]
private ICSharpTreeNode EmitMethodReturn(IYieldStatement yieldBreak, Func`2<ICSharpStatement, ICSharpStatement> treeModify, bool returnEnumerator, ITreeNode firstYield, IType elementType, IClass enumerableClass, ICSharpIdentifier outputList);
    private static IForeachStatement IsYieldForeachPattern(IYieldStatement yieldReturn, IType iEnumerableType);
    private IReadOnlyList`1<string> SuggestOutputListName(IDeclaration iterator, ITreeNode uniqueContext);
    private static void TypeArrayImplicitlyIfPossible(IArrayCreationExpression arrayCreation);
    private IArrayCreationExpression CreateArrayCreationExpression(IType elementType);
    private static ICSharpIdentifier GetVariableDeclarationName(IDeclarationStatement declaration);
    private static IType ApplyTypeArguments(IDeclaredType type, IType[] typeArguments);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.JoinAttributesAction : ModernScopedContextActionBase`1<IList`1<IAttributeSection>> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public JoinAttributesAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual IList`1<IAttributeSection> TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual IList`1<IAttributeSection> TryCreateInfoFromTreeNode(ITreeNode treeNode);
    protected virtual ITreeNode TryGetContextTreeNode(IList`1<IAttributeSection> sections);
    protected virtual bool IsAvailable(IList`1<IAttributeSection> sections);
    protected virtual IBulbActionCommand ExecutePsiTransaction(IList`1<IAttributeSection> sections, ISolution solution, IProgressIndicator progress);
    private IList`1<IAttributeSection> GetSelectedSections(IAttributeSectionList attributeSectionList);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.JoinDeclarationAction : ModernScopedContextActionBase`1<ILocalVariableDeclaration> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public static string ActionText;
    public static string ScopedActionText;
    public string Text { get; }
    public string ScopedText { get; }
    public JoinDeclarationAction(ICSharpContextActionDataProvider provider);
    private static JoinDeclarationAction();
    public virtual string get_Text();
    public virtual string get_ScopedText();
    protected virtual ILocalVariableDeclaration TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual bool IsAvailable(ILocalVariableDeclaration variableDeclaration);
    public static bool IsActionAvailable(ILocalVariableDeclaration variableDeclaration);
    private static IReferenceExpression FindSuitableAssignment(ILocalVariableDeclaration variableDeclaration);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ILocalVariableDeclaration variableDeclaration, ISolution solution, IProgressIndicator progress);
    [NullableContextAttribute("2")]
public static ICSharpStatement Execute(ILocalVariableDeclaration variableDeclaration, ITreeNode& declarationName);
    [CompilerGeneratedAttribute]
internal static ILocalVariableDeclaration <TryCreateInfoFromDataProvider>g__FromReferencedVariable|8_0(IReferenceExpression referenceExpression);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal static IReference <FindSuitableAssignment>g__FirstReferenceByRange|11_0(<>c__DisplayClass11_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.JoinDeconstructionDeclarationsAction : ModernScopedCodeStyleActionBase`1<DeconstructedVariableVarKeywordUsageSuggestion> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <dataProvider>P;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Key`1<Boxed`1<DeconstructedVariableVarKeywordUsageSuggestion>> ourInstanceKey;
    public string Text { get; }
    public string ScopedText { get; }
    protected ICodeStyleAdviser CodeStyleAdviser { get; }
    public JoinDeconstructionDeclarationsAction(ICSharpContextActionDataProvider dataProvider);
    private static JoinDeconstructionDeclarationsAction();
    public virtual string get_Text();
    public virtual string get_ScopedText();
    protected virtual DeconstructedVariableVarKeywordUsageSuggestion TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual ICodeStyleAdviser get_CodeStyleAdviser();
    [NullableContextAttribute("2")]
protected virtual ITreeNode FindSuggestionSourceNode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.JoinNullCheckWithUsageAction : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public JoinNullCheckWithUsageAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.JoinStringsAction : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public JoinStringsAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [CompilerGeneratedAttribute]
internal static CSharpLiteralType <IsAvailable>g__GetValidLiteralType|4_0(ICSharpExpression expression);
    [CompilerGeneratedAttribute]
internal static StringBuilder <ExecutePsiTransaction>g__BuildLeftText|5_0(ICSharpLiteralExpression cSharpLiteralExpression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.LambdaExpressionToAnonymousMethodAction : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public LambdaExpressionToAnonymousMethodAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static bool AnonymousMethodNeedSignature(IAnonymousMethodExpression anonymousMethod);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.LambdaExpressionToLocalFunctionAction : ToLocalFunctionActionBase {
    public LambdaExpressionToLocalFunctionAction(ICSharpContextActionDataProvider dataProvider);
    [NullableContextAttribute("2")]
protected virtual IAnonymousFunctionExpression GetFunctionExpression();
    protected virtual bool CanRewriteClosures(IAnonymousFunctionExpression functionExpression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.LambdaExpressionToStatementAction : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <dataProvider>P;
    public string Text { get; }
    public LambdaExpressionToStatementAction(ICSharpContextActionDataProvider dataProvider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.LambdaStatementToExpressionAction : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public static string ActionText;
    public string Text { get; }
    public LambdaStatementToExpressionAction(ICSharpContextActionDataProvider provider);
    private static LambdaStatementToExpressionAction();
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public static IBulbActionCommand Execute(ILambdaExpression lambdaExpression);
    [CompilerGeneratedAttribute]
internal static IType <Execute>g__TryGetLambdaInferredNaturalReturnType|7_0(ILambdaExpression lambdaExpression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.LambdaToNamedMethodAction : ToNamedMethodActionBase {
    public LambdaToNamedMethodAction(ICSharpContextActionDataProvider dataProvider);
    [NullableContextAttribute("2")]
protected virtual IAnonymousFunctionExpression GetFunctionExpression();
    protected virtual bool CanRewriteClosures(IAnonymousFunctionExpression functionExpression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.LiftLocalFunctionClosureToParameterAction : object {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    private static IAnchor ourSubmenuAnchor;
    private static InvisibleAnchor ourSingleParameterAnchor;
    private static InvisibleAnchor ourThisParametersAnchor;
    private static InvisibleAnchor ourAllParametersAnchor;
    private bool myCanLiftThis;
    private bool myCanLiftParameter;
    public LiftLocalFunctionClosureToParameterAction(ICSharpContextActionDataProvider provider);
    private static LiftLocalFunctionClosureToParameterAction();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    private bool HasMethodGroupUsages(ILocalFunctionDeclaration localFunctionDeclaration);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.LiftLocalFunctionClosureToParameterAction/<CreateBulbItems>d__10")]
public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.LiveTemplateBasedIterateViaForeachAction : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <dataProvider>P;
    private static Guid ourTemplateGuid;
    private static string CollectionFieldName;
    public string Text { get; }
    public LiveTemplateBasedIterateViaForeachAction(ICSharpContextActionDataProvider dataProvider);
    private static LiveTemplateBasedIterateViaForeachAction();
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [PureAttribute]
public static bool IsAvailable(IExpressionStatement expressionStatement);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static IBulbActionCommand Execute(IExpressionStatement expressionStatement);
    private static Template GetForeachTemplate(ITreeNode context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.LocalFunctionToNamedMethodAction : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <dataProvider>P;
    public string Text { get; }
    public LocalFunctionToNamedMethodAction(ICSharpContextActionDataProvider dataProvider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Intentions.CSharp.ContextActions.LocalVariableDeclarationConverter : ToAssignmentConverter {
    [CompilerGeneratedAttribute]
private ILocalVariableDeclaration <localVariableDeclaration>P;
    public LocalVariableDeclarationConverter(ILocalVariableDeclaration localVariableDeclaration, CSharpElementFactory factory);
    public virtual ISwitchStatement ReplaceOriginalStatementWithSwitchStatement(ISwitchStatement switchStatement);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Intentions.CSharp.ContextActions.LogicalExpressionActionBase : ModernContextActionBase {
    protected ICSharpContextActionDataProvider Provider;
    private bool myInvokedFromSelection;
    protected LogicalExpressionActionBase(ICSharpContextActionDataProvider provider);
    [NullableContextAttribute("2")]
protected ICSharpExpression SelectionAsBooleanExpression();
    protected IBulbActionCommand ReSelectIfNeeded(ICSharpExpression resultingExpression);
    [NullableContextAttribute("2")]
[PureAttribute]
private static bool IsBooleanExpression(ICSharpExpression expression);
    [NullableContextAttribute("2")]
protected static ICSharpExpression FindBooleanExpression(ICSharpExpression expression);
    private static ICSharpExpression GetOuterExpressionOfSameKind(ICSharpExpression expression);
    protected static IUnaryOperatorExpression FindParentNegation(ICSharpExpression expression);
    protected static string InvertedOperator(string operatorSign);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private bool <SelectionAsBooleanExpression>g__CaretBetweenOperands|3_0(ITreeNode leftOperand, ITreeNode rightOperand);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.MarkNullableAction : object {
    [NotNullAttribute]
private ICSharpContextActionDataProvider myProvider;
    [NotNullAttribute]
private IList`1<AnnotateNullableAction> myActions;
    [NotNullAttribute]
private static IAnchor CanBeNullAnchor;
    [NotNullAttribute]
private static IAnchor NotNullAnchor;
    [NotNullAttribute]
private static IAnchor EraseAnchor;
    public MarkNullableAction(ICSharpContextActionDataProvider dataProvider);
    private static MarkNullableAction();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.MarkNullableAction/<CreateBulbItems>d__4")]
public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    [CanBeNullAttribute]
[PureAttribute]
private IAttributesOwnerDeclaration FindAnnotationTargetByDeclaration();
    [CanBeNullAttribute]
[PureAttribute]
private IAttributesOwnerDeclaration FindAnnotationOwnerByUsage();
    [CanBeNullAttribute]
[PureAttribute]
private IAttributesOwnerDeclaration FindAnnotationOwnerByAnotationUsage(AnnotationsToSkip& annotationsToSkip);
    [PureAttribute]
private bool InRange(ITreeNode typeUsage, ITreeNode identifier);
    [PureAttribute]
private bool InRange(ITreeNode typeUsage, IMultipleDeclarationMember multipleDeclarationMember);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.MarkNullableAction/<CreateAnnotateInfos>d__11")]
[NotNullAttribute]
[PureAttribute]
private IEnumerable`1<AnnotationInfo> CreateAnnotateInfos(IAttributesOwnerDeclaration declaration, AnnotationsToSkip annotationsToSkip, IUserDataHolder cache);
    [PureAttribute]
private static RelatedDeclarations GetRelatedDeclarations(IAttributesOwnerDeclaration declaration);
    [PureAttribute]
private static RelatedDeclarations GetRelatedParameterDeclarations(ICSharpParameterDeclaration parameterDeclaration, ParameterKind expectedKind);
    [PureAttribute]
private static RelatedDeclarations GetRelatedFieldsDeclarations(IFieldDeclaration fieldDeclaration);
    [PureAttribute]
private static RelatedDeclarations GetRelatedAutoProperties(IPropertyDeclaration propertyDeclaration);
    [PureAttribute]
private static ContainerType GetContainerStatus(IAttributesOwnerDeclaration declaration);
    private AnnotationHint ComputeAnnotationHint(IAttributesOwnerDeclaration declaration, INullnessProvider nullnessProvider, CodeAnnotationsConfiguration annotationsConfiguration, ITypeElement annotationTypeElement, CodeAnnotationNullableValue annotationValue, bool containerNullness);
    [PureAttribute]
private static bool IsDeclarationInitializedWithNull(IAttributesOwnerDeclaration declaration);
    [PureAttribute]
private static bool HasAnnotationAttribute(IAttributesOwnerDeclaration targetDeclaration, ITypeElement annotationTypeElement, CodeAnnotationsConfiguration annotationsConfiguration);
    [PureAttribute]
[CanBeNullAttribute]
private static string GetAnnotationHintText(AnnotationHint annotationHint);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.MergeDeconstructedDeclarationAction : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public MergeDeconstructedDeclarationAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [NullableContextAttribute("2")]
[PureAttribute]
private ITreeNode FindDeconstructionNode();
    [NullableContextAttribute("2")]
[PureAttribute]
private bool IsSelected(ITreeNode leftParenthesis, ITreeNode rightParenthesis);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.MergeIntoPatternAction : ModernScopedContextActionBase`1<SequentialPatternCheck> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public static string ActionText;
    public string Text { get; }
    public MergeIntoPatternAction(ICSharpContextActionDataProvider provider);
    private static MergeIntoPatternAction();
    public virtual string get_Text();
    protected virtual SequentialPatternCheck TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual SequentialPatternCheck TryCreateInfoFromTreeNode(ITreeNode treeNode);
    protected virtual bool IsAvailable(SequentialPatternCheck sequentialPatternCheck);
    protected virtual ITreeNode TryGetContextTreeNode(SequentialPatternCheck sequentialPatternCheck);
    protected virtual IBulbActionCommand ExecutePsiTransaction(SequentialPatternCheck sequentialPatternCheck, ISolution solution, IProgressIndicator progress);
    public static IBulbActionCommand Execute(SequentialPatternCheck sequentialPatternCheck);
    [PureAttribute]
private static SequentialPatternCheck FindSequentialCheckBetweenCheckExpressions(Polyadic`1<ICSharpExpression> polyadicExpression, TreeTextRange selectionRange);
    [NullableContextAttribute("2")]
[PureAttribute]
private static SequentialPatternCheck FindSequentialCheckInGuardCondition(IPattern pattern, IPatternGuardClause patternGuardClause, TreeTextRange selectionRange);
    [PureAttribute]
private static SequentialPatternCheck FindSequentialCheckInSwitchExpressionArmExpression(ISwitchExpressionArm switchExpressionArm, TreeTextRange selectionRange);
    [PureAttribute]
private static SequentialPatternCheck FindSequentialCheckInSwitchCaseReturn(ISwitchCaseLabel switchCaseLabel, TreeTextRange selectionRange);
    [PureAttribute]
private static SequentialPatternCheck FindSequentialCheckInIfStatement(IIfStatement ifStatement, TreeTextRange selectionRange);
    [NullableContextAttribute("2")]
[PureAttribute]
private static bool UnusedDesignationCanBeRemoved(ISingleVariableDesignation designation);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.MergeSequentialChecksAction : ModernScopedContextActionBase`1<MergePair> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public static string ActionText;
    public string Text { get; }
    public MergeSequentialChecksAction(ICSharpContextActionDataProvider provider);
    private static MergeSequentialChecksAction();
    public virtual string get_Text();
    protected virtual MergePair TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual MergePair TryCreateInfoFromTreeNode(ITreeNode treeNode);
    protected virtual bool IsAvailable(MergePair mergePair);
    protected virtual ITreeNode TryGetContextTreeNode(MergePair mergePair);
    protected virtual IBulbActionCommand ExecutePsiTransaction(MergePair mergePair, ISolution solution, IProgressIndicator progress);
    public static void Execute(MergePair mergePair);
    public static MergePair FindPair(Polyadic`1<ICSharpExpression> polyadic, int signIndex, TreeTextRange selectionRange);
    private static MergePair FindFirstPair(Polyadic`1<ICSharpExpression> polyadic);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.MethodGroupToAnonymousMethodAction : object {
    [NotNullAttribute]
private ICSharpContextActionDataProvider myProvider;
    public MethodGroupToAnonymousMethodAction(ICSharpContextActionDataProvider provider);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.MethodGroupToLambdaAction : object {
    [NotNullAttribute]
private ICSharpContextActionDataProvider myProvider;
    public MethodGroupToLambdaAction(ICSharpContextActionDataProvider provider);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
public static class JetBrains.ReSharper.Intentions.CSharp.ContextActions.MethodGroupUtil : object {
    [CanBeNullAttribute]
public static IDeclaredType GetExpressionType(IReferenceExpression referenceExpression);
    [CanBeNullAttribute]
public static IReferenceExpression FindReferenceExpression(ICSharpContextActionDataProvider provider);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.MigrateToNullableEnableAction : ModernScopedContextActionBase`1<ICSharpFile> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public MigrateToNullableEnableAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual bool IsAvailable(ICSharpFile file);
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    protected virtual FileCollectorInfo GetFileCollectorInfo(ICSharpFile availabilityInfo);
    protected virtual ICSharpFile TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ICSharpFile psiFile, ISolution solution, IProgressIndicator progress);
    private static void InsertInheritedAnnotationsForOverrideableMembers(ICSharpFile file);
    private static ITypeUsage GetTypeUsage(IAttributesOwnerDeclaration attributesOwnerDeclaration);
    [NullableContextAttribute("2")]
private static ITypeUsage GetSingleTypeArgument(ITypeUsage typeUsage);
    private static bool IsTypeSuitableForTypeAnnotation(IType type, ITreeNode context);
    private static void AnalyzeAndInsertInferredTypeAnnotations(ICSharpFile file);
    private static bool InsertInferredTypeAnnotationsPass(ICSharpFile file);
    private static bool InsertSingleInferredCanBeNullAnnotation(IDeclaredElement declaredElement, ICSharpDeclaration topLevelDeclaration, IDictionary`2<IDeclaredElement, bool> finalLocals);
    private static bool InsertSingleInferredNullableCastAnnotation(ICastExpression castExpression);
    private static IAttributesOwnerDeclaration GetDeclarationToAnnotateReturnValue(ICSharpDeclaration declaration);
    private static INullableDirective FindTopLevelNullableEnable(ICSharpFile file);
    private static void EnsureHasTopLevelNullableEnable(ICSharpFile file);
    private static void CleanupAttributeSuggestionInFile(ICSharpFile file);
    private static void RemoveUnusedAnnotationsNamespaceImport(ICSharpFile file);
    [CompilerGeneratedAttribute]
internal static bool <InsertInheritedAnnotationsForOverrideableMembers>g__HasInheritedAnnotation|9_0(IAttributesOwnerDeclaration attributesOwnerDeclaration, TProvider provider, Func`3<TProvider, IAttributeInstance, bool> isAttribute);
}
internal enum JetBrains.ReSharper.Intentions.CSharp.ContextActions.Misc.<ChangeRawStringAction>F4602A9FDFA0749345B7455047E5AC4B03B755F49ECB85AE2E43A128538753B6F__ChangeKind : Enum {
    public int value__;
    public static <ChangeRawStringAction>F4602A9FDFA0749345B7455047E5AC4B03B755F49ECB85AE2E43A128538753B6F__ChangeKind AddQuotes;
    public static <ChangeRawStringAction>F4602A9FDFA0749345B7455047E5AC4B03B755F49ECB85AE2E43A128538753B6F__ChangeKind RemoveQuotes;
    public static <ChangeRawStringAction>F4602A9FDFA0749345B7455047E5AC4B03B755F49ECB85AE2E43A128538753B6F__ChangeKind AddDollar;
    public static <ChangeRawStringAction>F4602A9FDFA0749345B7455047E5AC4B03B755F49ECB85AE2E43A128538753B6F__ChangeKind RemoveDollar;
    public static <ChangeRawStringAction>F4602A9FDFA0749345B7455047E5AC4B03B755F49ECB85AE2E43A128538753B6F__ChangeKind ToSingleLine;
    public static <ChangeRawStringAction>F4602A9FDFA0749345B7455047E5AC4B03B755F49ECB85AE2E43A128538753B6F__ChangeKind ToMultiLine;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Intentions.CSharp.ContextActions.Misc.<ChangeRawStringAction>F4602A9FDFA0749345B7455047E5AC4B03B755F49ECB85AE2E43A128538753B6F__ChangeRawStringBulbAction : ModernBulbActionBase {
    [CompilerGeneratedAttribute]
private IStringLiteralOwner <stringLiteralOwner>P;
    [CompilerGeneratedAttribute]
private <ChangeRawStringAction>F4602A9FDFA0749345B7455047E5AC4B03B755F49ECB85AE2E43A128538753B6F__ChangeKind <changeKind>P;
    public string Text { get; }
    public <ChangeRawStringAction>F4602A9FDFA0749345B7455047E5AC4B03B755F49ECB85AE2E43A128538753B6F__ChangeRawStringBulbAction(IStringLiteralOwner stringLiteralOwner, <ChangeRawStringAction>F4602A9FDFA0749345B7455047E5AC4B03B755F49ECB85AE2E43A128538753B6F__ChangeKind changeKind);
    public virtual string get_Text();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.Misc.ChangeRawStringAction : object {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public ChangeRawStringAction(ICSharpContextActionDataProvider provider);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
private IStringLiteralOwner FindStringLiteralOwner();
    private bool IsAvailable(ICSharpLiteralExpression expression);
    private bool IsAvailable(IInterpolatedStringExpression expression);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.Misc.ComputeConstantValueAction : ModernContextActionBase`1<ICSharpExpression> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public ComputeConstantValueAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual ICSharpExpression TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual bool IsAvailable(ICSharpExpression expression);
    [PureAttribute]
private static bool CanCompute(ICSharpExpression expression);
    [NullableContextAttribute("2")]
private IReference GetReference(ITreeNode element);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ICSharpExpression expression, ISolution solution, IProgressIndicator progress);
    private ICSharpExpression TryCreateCalculatedConstantStringExpression(ICSharpExpression expression);
    private ICSharpExpression CreateCalculatedConstantExpression(ICSharpExpression expression);
    private static bool NeedExplicitCast(ICSharpExpression newExpression, ICSharpExpression expression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.Misc.ConvertForEachCallToStatementAction : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public ConvertForEachCallToStatementAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    private static bool IsAvailableEx(IReferenceExpression referenceExpression);
    private static bool IsOrdinaryByValueParameter(IParameter parameter);
    private static bool IsIterationDelegateParameter(IParameter parameter, ISubstitution substitution, IType elementType);
    private static bool IsArgumentCanBeConverted(ICSharpArgumentsOwner invocation);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static IBulbActionCommand TransformMethodGroup(IForeachStatement statement);
    private static IBulbActionCommand TransformReturnsInLoop(IForeachStatement foreachStatement, List`1<IReturnStatement> returnsInLoop);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class JetBrains.ReSharper.Intentions.CSharp.ContextActions.Misc.ConvertLiteralRadixActionBase : ModernScopedContextActionBase`1<ICSharpLiteralExpression> {
    protected ICSharpContextActionDataProvider Provider;
    protected int TargetRadix { get; }
    [NullableAttribute("2")]
protected string TargetPrefix { get; }
    protected ConvertLiteralRadixActionBase(ICSharpContextActionDataProvider provider);
    protected virtual ICSharpLiteralExpression TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual bool IsAvailable(ICSharpLiteralExpression literalExpression);
    protected abstract virtual int get_TargetRadix();
    [NullableContextAttribute("2")]
protected abstract virtual string get_TargetPrefix();
    [PureAttribute]
private static int GetRadixOfIntegerLiteral(string literalText);
    [PureAttribute]
public abstract virtual string CreateLiteralDigitsInRadix(IFormattable literalValue);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ICSharpLiteralExpression literalExpression, ISolution solution, IProgressIndicator progress);
    private string CreateTargetLiteralText(IFormattable literalValue, string literalText, IList`1<int> separators);
    [PureAttribute]
private IList`1<int> GetSeparatorPositionsInTargetRadix(string literalText);
    [PureAttribute]
private static Nullable`1<int> GetBitsPerDigit(int radix);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.Misc.ConvertLiteralToBinAction : ConvertLiteralRadixActionBase {
    public string Text { get; }
    public string ScopedText { get; }
    protected int TargetRadix { get; }
    protected string TargetPrefix { get; }
    public ConvertLiteralToBinAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    protected virtual int get_TargetRadix();
    protected virtual string get_TargetPrefix();
    protected virtual bool IsAvailable(ICSharpLiteralExpression literalExpression);
    public virtual string CreateLiteralDigitsInRadix(IFormattable literalValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.Misc.ConvertLiteralToDecAction : ConvertLiteralRadixActionBase {
    public string Text { get; }
    public string ScopedText { get; }
    protected int TargetRadix { get; }
    [NullableAttribute("2")]
protected string TargetPrefix { get; }
    public ConvertLiteralToDecAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    protected virtual int get_TargetRadix();
    [NullableContextAttribute("2")]
protected virtual string get_TargetPrefix();
    public virtual string CreateLiteralDigitsInRadix(IFormattable literalValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.Misc.ConvertLiteralToHexAction : ConvertLiteralRadixActionBase {
    public string Text { get; }
    public string ScopedText { get; }
    protected int TargetRadix { get; }
    protected string TargetPrefix { get; }
    public ConvertLiteralToHexAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    protected virtual int get_TargetRadix();
    protected virtual string get_TargetPrefix();
    public virtual string CreateLiteralDigitsInRadix(IFormattable literalValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.Misc.ConvertRegularStringInterpolationToVerbatimAction : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public ConvertRegularStringInterpolationToVerbatimAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.Misc.ConvertRegularStringToVerbatimAction : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public ConvertRegularStringToVerbatimAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.Misc.ConvertRegularToRawInterpolatedStringAction : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public ConvertRegularToRawInterpolatedStringAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.Misc.ConvertRegularToRawStringAction : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public ConvertRegularToRawStringAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.Misc.ConvertStringLiteralToInterpolationAction : ConvertStringLiteralToInterpolationActionBase {
    private ICSharpContextActionDataProvider myProvider;
    public ConvertStringLiteralToInterpolationAction(ICSharpContextActionDataProvider provider);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static ValueTuple`2<IInterpolatedStringExpression, IInterpolatedStringExpression> CreateInterpolationExpressions(ICSharpLiteralExpression literalExpression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Intentions.CSharp.ContextActions.Misc.ConvertStringLiteralToInterpolationActionBase : ClrConvertStringLiteralToInterpolationAction {
    protected ConvertStringLiteralToInterpolationActionBase(ICSharpContextActionDataProvider provider);
    protected virtual bool IsAvailableInternal(ILiteralExpression literalExpression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.Misc.ConvertVerbatimStringInterpolationToRegularAction : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public ConvertVerbatimStringInterpolationToRegularAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.Misc.ConvertVerbatimStringToRegularAction : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public ConvertVerbatimStringToRegularAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.Misc.ConvertVerbatimToRawInterpolatedStringAction : ModernScopedContextActionBase`1<IInterpolatedStringExpression> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public string ScopedText { get; }
    public ConvertVerbatimToRawInterpolatedStringAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    protected virtual IInterpolatedStringExpression TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual IInterpolatedStringExpression TryCreateInfoFromTreeNode(ITreeNode treeNode);
    protected virtual bool IsAvailable(IInterpolatedStringExpression expression);
    protected virtual IBulbActionCommand ExecutePsiTransaction(IInterpolatedStringExpression expression, ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.Misc.ConvertVerbatimToRawStringAction : ModernScopedContextActionBase`1<ICSharpLiteralExpression> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public string ScopedText { get; }
    public ConvertVerbatimToRawStringAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    protected virtual ICSharpLiteralExpression TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual ICSharpLiteralExpression TryCreateInfoFromTreeNode(ITreeNode treeNode);
    protected virtual bool IsAvailable(ICSharpLiteralExpression literalExpression);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ICSharpLiteralExpression literalExpression, ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.Misc.EvaluateExpressionAction : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    private string myProgressText;
    [NullableAttribute("2")]
private string myExceptionMessage;
    public string Text { get; }
    public EvaluateExpressionAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
private ProjectionInfo FindExpressionToEvaluate();
    private static ProjectionInfo TryBuildProjection(ICSharpExpression expression);
    [NullableContextAttribute("2")]
private static ProjectionInfo TryBuildProjectionFromAny(ICSharpExpression expression);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private IList`1<ICSharpExpression> EnumerateExpressionsToEvaluate();
    private void EvaluationEntryPoint(object state);
    private void PresentResult(ProjectionInfo info, ICSharpExpression expression);
    private static string PresentExceptionMessage(string message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.Misc.FixInvalidStringEscapingAction : FixInvalidStringEscapingBase {
    private ICSharpContextActionDataProvider myDataProvider;
    public string Text { get; }
    public FixInvalidStringEscapingAction(ICSharpContextActionDataProvider dataProvider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static IBulbActionCommand EscapeStringToken(ITokenNode token);
}
public abstract class JetBrains.ReSharper.Intentions.CSharp.ContextActions.Misc.FixInvalidStringEscapingBase : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <dataProvider>P;
    [CompilerGeneratedAttribute]
private bool <IsInterpolatedString>k__BackingField;
    protected bool IsInterpolatedString { get; private set; }
    protected FixInvalidStringEscapingBase(ICSharpContextActionDataProvider dataProvider);
    [CompilerGeneratedAttribute]
protected bool get_IsInterpolatedString();
    [CompilerGeneratedAttribute]
private void set_IsInterpolatedString(bool value);
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [CanBeNullAttribute]
private ITokenNode GetSelectedStringToken();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.Misc.FixRegularStringToVerbatimAction : FixInvalidStringEscapingBase {
    private ICSharpContextActionDataProvider myDataProvider;
    public string Text { get; }
    public FixRegularStringToVerbatimAction(ICSharpContextActionDataProvider dataProvider);
    public virtual string get_Text();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private DocumentOffset GetVarbatimitySignOffset();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.Misc.FlipInvocationAction : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public FlipInvocationAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.Misc.FlipOperatorArgumentsAction : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    [NullableAttribute("2")]
private string myOperatorSign;
    [NullableAttribute("2")]
private string myActionHint;
    public string Text { get; }
    public FlipOperatorArgumentsAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
[PureAttribute]
private static bool IsSupported(ITokenNode operationSign);
    [PureAttribute]
private static bool IsCursorAtSign(IBinaryExpression condition, TreeTextRange treeRange);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static ICSharpExpression FindRightOperandInChainOfSameOperators(ICSharpExpression current, ITokenNodeType operatorSign);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.Misc.FlipRelationalExpressionAction : LogicalExpressionActionBase {
    [NullableAttribute("2")]
private string myOperatorSign;
    [NullableAttribute("2")]
private string myInvertedSign;
    public string Text { get; }
    public FlipRelationalExpressionAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    protected static string FlippedOperator(string operatorSign);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
internal class JetBrains.ReSharper.Intentions.CSharp.ContextActions.Misc.IntroduceTypeAliasAction : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public IntroduceTypeAliasAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private ValueTuple`2<IType, ITreeNode> GetAvailabilityInfo(bool checkType);
    private static bool CanIntroduceAliasFor(IType type, ITreeNode context);
    private static ICSharpTypeAndNamespaceHolderDeclaration GetAliasScope(ITreeNode context);
    private IReadOnlyList`1<string> GetAliasNameSuggestions(ITreeNode usageContext, IType aliasedType);
    [CompilerGeneratedAttribute]
internal static bool <GetAvailabilityInfo>g__ShouldProcessTypeUsage|6_0(ITypeUsage typeUsage, <>c__DisplayClass6_0& );
    [CompilerGeneratedAttribute]
internal static bool <GetAvailabilityInfo>g__ShouldProcessReferenceName|6_1(IReferenceName referenceName, <>c__DisplayClass6_0& );
    [CompilerGeneratedAttribute]
internal static bool <GetAvailabilityInfo>g__ShouldProcessReferenceExpression|6_2(IReferenceExpression referenceExpression, <>c__DisplayClass6_0& );
    [CompilerGeneratedAttribute]
internal static bool <GetAvailabilityInfo>g__ShouldCheckPredefinedTypeExpression|6_3(IPredefinedTypeExpression predefinedTypeExpression, <>c__DisplayClass6_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.Misc.ReinterpretStringLiteralAsInterpolationAction : ConvertStringLiteralToInterpolationActionBase {
    private ICSharpContextActionDataProvider myProvider;
    public string Text { get; }
    public ReinterpretStringLiteralAsInterpolationAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual bool IsAvailableInternal(ILiteralExpression literalExpression);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [CompilerGeneratedAttribute]
internal static string <ExecutePsiTransaction>g__GetDollarSigns|5_0(<>c__DisplayClass5_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.Misc.RemoveDigitSeparatorsAction : ModernScopedContextActionBase`1<ICSharpLiteralExpression> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public RemoveDigitSeparatorsAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual ICSharpLiteralExpression TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual bool IsAvailable(ICSharpLiteralExpression literalExpression);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ICSharpLiteralExpression literalExpression, ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.Misc.SeparateIntegralLiteralDigitsAction : ModernScopedContextActionBase`1<ICSharpLiteralExpression> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    [NullableAttribute("2")]
private string myGroupName;
    public string Text { get; }
    public string ScopedText { get; }
    public SeparateIntegralLiteralDigitsAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    protected virtual ICSharpLiteralExpression TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual bool IsAvailable(ICSharpLiteralExpression literalExpression);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ICSharpLiteralExpression literalExpression, ISolution solution, IProgressIndicator progress);
    [PureAttribute]
private static ValueTuple`2<int, string> GetSeparationSuggestion(string literalText);
    [PureAttribute]
private static string SeparateDigits(string literalText, int eachDigit, bool separatePrefix);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.Misc.SeparateRealLiteralDigitsAction : ModernScopedContextActionBase`1<ICSharpLiteralExpression> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public string ScopedText { get; }
    public SeparateRealLiteralDigitsAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    protected virtual ICSharpLiteralExpression TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual bool IsAvailable(ICSharpLiteralExpression literalExpression);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ICSharpLiteralExpression literalExpression, ISolution solution, IProgressIndicator progress);
    [PureAttribute]
private static string SeparateDigits(string literalText, bool separatePrefix);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.Misc.SurroundWithQuotesAction : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public SurroundWithQuotesAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual BulbActionCommandSequence GetCommandSequence();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    protected string MakeStringLiteral(string text);
    protected static string MakeStringLiteralBase(string text);
    [CompilerGeneratedAttribute]
private void <GetCommandSequence>b__5_0(ITextControl textControl);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.Misc.ToStringLiteralAction : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public ToStringLiteralAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [PureAttribute]
private static ICSharpLiteralWrapper FindInvalidCharLiteral(ICSharpLiteralExpression literalExpression);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
internal class JetBrains.ReSharper.Intentions.CSharp.ContextActions.Misc.UseTypeAliasAction : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public UseTypeAliasAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public static void Execute(IUsingAliasDirective usingAliasDirective, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.Misc.WrapTernaryExpressionInInterpolationWithParenthesesAction : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <dataProvider>P;
    public string Text { get; }
    public WrapTernaryExpressionInInterpolationWithParenthesesAction(ICSharpContextActionDataProvider dataProvider);
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [NullableContextAttribute("2")]
[ContractAnnotationAttribute("null => null")]
private static IConditionalTernaryExpression FindConditionalTernaryExpression(IInterpolatedStringInsert interpolatedStringInsert);
    private static bool ContainsErrorElement(IInterpolatedStringInsert interpolatedStringInsert);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.MoveInitializationAction : object {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    private static SubmenuAnchor ourMoveInitializationAnchor;
    public MoveInitializationAction(ICSharpContextActionDataProvider provider);
    private static MoveInitializationAction();
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    [PureAttribute]
private static TreeTextRange GetInitializerRange(ICSharpTypeMemberDeclaration memberDeclaration, IVariableInitializer initializer);
    private static IReadOnlyList`1<ICSharpTypeMemberDeclaration> FindOtherDeclarationsWithInitializers(ICSharpTypeMemberDeclaration typeMemberDeclaration);
    [PureAttribute]
public static string GetActionText(bool manyConstructors, bool isStatic, bool scopedMode);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.MoveLocalFunctionToTheEndOfAScopeAction : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <dataProvider>P;
    public string Text { get; }
    public MoveLocalFunctionToTheEndOfAScopeAction(ICSharpContextActionDataProvider dataProvider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public static IBulbActionCommand Execute(ILocalFunctionDeclaration localFunctionDeclaration, Nullable`1<JumpKind> jumpKind);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.MoveToAnotherPartAction : ContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public MoveToAnotherPartAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [CanBeNullAttribute]
private Action`1<ITextControl> Execute(IList`1<IDeclaration> declarations, IMemberOwnerDeclaration targetOwner, IMemberOwnerDeclaration sourceOwner);
    [CanBeNullAttribute]
private static ICSharpTypeMemberDeclaration MoveToAnotherPart(IDeclaration declarationToMove, IMemberOwnerDeclaration sourceOwner, IMemberOwnerDeclaration targetOwner);
    [NotNullAttribute]
private IList`1<IDeclaration> CollectDeclarationsToMove();
    [PureAttribute]
private static bool IsSyntheticLikeDeclaration(ICSharpTypeMemberDeclaration declaration);
    [NotNullAttribute]
private static IList`1<IDeclaration> GetOtherPartialDeclarations(IList`1<IDeclaration> declarations, IMemberOwnerDeclaration& currentDeclaration);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.MoveToInitializerAction : ModernScopedContextActionBase`1<IAssignmentExpression> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public string ScopedText { get; }
    public MoveToInitializerAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    protected virtual IAssignmentExpression TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual bool IsAvailable(IAssignmentExpression assignmentExpression);
    private static bool CollectInitializerCandidates(ClassInitializationInfo initializationInfo, IAssignmentExpression assignment, IConstructor constructor, List`1<ValueInitialization> initializations);
    private static ValueInitialization FindInitializerCandidate(IConstructor constructor, ClassInitializationInfo info, IAssignmentExpression assignment);
    private static bool IsDeclaredInType(IInitializerOwnerDeclaration elementDeclaration, ITypeElement typeElement);
    private static ValueInitialization FindEqualAssignment(ClassInitializationInfo otherInitializationInfo, ValueInitialization candidate);
    protected virtual IBulbActionCommand ExecutePsiTransaction(IAssignmentExpression assignmentExpression, ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.MoveToOuterScopeAction : ContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <dataProvider>P;
    [NullableAttribute("2")]
private string myKindHint;
    public string Text { get; }
    public MoveToOuterScopeAction(ICSharpContextActionDataProvider dataProvider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
[PureAttribute]
private ITreeNode FindMoveCandidate();
    [PureAttribute]
private bool IsAvailable(ILocalVariableDeclaration variableDeclaration);
    private bool CheckMultiDeclarationMemberRange(IMultipleDeclarationMember multipleDeclarationMember, TreeTextRange availabilityRange);
    [PureAttribute]
private bool IsAvailable(IMultipleLocalVariableDeclaration multipleLocalVariableDeclaration);
    [PureAttribute]
private bool CheckDeclarationStatementRange(TreeTextRange availabilityRange, ITreeNode multipleDeclaration);
    [PureAttribute]
internal static ICSharpTreeNode GetDeclarationStatementAnchor(ILocalVariableDeclaration variableDeclaration);
    [PureAttribute]
private bool IsAvailable(ILocalConstantDeclaration constantDeclaration);
    [PureAttribute]
private bool IsAvailable(IMultipleLocalConstantDeclaration multipleLocalConstantDeclaration);
    [PureAttribute]
internal static ICSharpTreeNode GetDeclarationStatementAnchor(ILocalConstantDeclaration constantDeclaration);
    [PureAttribute]
private bool IsAvailable(ILocalFunctionDeclaration localFunctionDeclaration);
    [PureAttribute]
internal static ICSharpTreeNode GetDeclarationStatementAnchor(ILocalFunctionDeclaration localFunctionDeclaration);
    [PureAttribute]
private bool IsAvailable(IAssignmentExpression deconstructingDeclaration);
    [PureAttribute]
private bool CheckDeconstructionDeclarationStatementRange(IAssignmentExpression deconstructingDeclaration);
    [PureAttribute]
internal static ICSharpTreeNode GetDeclarationStatementAnchor(IAssignmentExpression deconstructingDeclaration);
    internal static ICSharpTreeNode GetContainingScopeAnchor(ITreeNode declarationNode);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static void MoveLocalVariableOutside(ILocalVariableDeclaration variableDeclaration);
    private static void MoveLocalConstantOutside(ILocalConstantDeclaration constantDeclaration);
    [PureAttribute]
private static IDeclarationStatement DeclarationStatementFromSingleVariable(ILocalVariableDeclaration variableDeclaration, CSharpElementFactory factory);
    [PureAttribute]
private static IDeclarationStatement DeclarationStatementFromSingleConstant(ILocalConstantDeclaration constantDeclaration, CSharpElementFactory factory);
    private static void MoveForVariableOutside(IForStatement forStatement, ILocalVariableDeclaration variableDeclaration);
    private static void MoveUsingVariableOutside(IUsingStatement usingStatement, ILocalVariableDeclaration variableDeclaration);
    private static void MoveMultiLocalVariableOutside(IMultipleLocalVariableDeclaration multipleLocalVariableDeclaration);
    private static void MoveMultiForVariableOutside(IForStatement forStatement);
    private static void MoveMultiUsingVariableOutside(IUsingStatement usingStatement);
    private static void MoveMultiLocalConstantOutside(IMultipleLocalConstantDeclaration multipleLocalConstantDeclaration);
    private static void MoveLocalFunctionOutside(ILocalFunctionDeclaration localFunctionDeclaration);
    private static void MoveDeconstructingDeclarationOutside(IAssignmentExpression deconstructingDeclaration);
    private static bool CanMoveInitializer(ITreeNode initializerNode, ICSharpTreeNode declarationAnchor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.MoveTypeToAnotherFileAction : object {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <dataProvider>P;
    [NullableAttribute("2")]
private string myProposedFileName;
    public string Text { get; }
    public string ScopedText { get; }
    public FileCollectorInfo FileCollectorInfo { get; }
    public MoveTypeToAnotherFileAction(ICSharpContextActionDataProvider dataProvider);
    public sealed virtual string get_Text();
    public sealed virtual string get_ScopedText();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public sealed virtual void Execute(ISolution solution, ITextControl textControl);
    public sealed virtual FileCollectorInfo get_FileCollectorInfo();
    public sealed virtual Action`1<ITextControl> ExecuteAction(ISolution solution, Scope scope, IHighlighting sourceHighlighting, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class JetBrains.ReSharper.Intentions.CSharp.ContextActions.NamedArgumentContextAction : ModernScopedContextActionBase`1<ArgumentOrParameterDeclaration> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    private bool myInvokedOverParameterDeclaration;
    private static IAnchor ourParameterDeclarationAnchor;
    protected NamedArgumentContextAction(ICSharpContextActionDataProvider provider);
    private static NamedArgumentContextAction();
    protected virtual ArgumentOrParameterDeclaration TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual ArgumentOrParameterDeclaration TryCreateInfoFromTreeNode(ITreeNode treeNode);
    protected virtual bool IsAvailable(ArgumentOrParameterDeclaration argumentOrParameter);
    [PureAttribute]
protected bool HasExplicitParameterDeclarations(IParametersOwner parametersOwner);
    protected virtual bool IsAvailable(ICSharpArgument argument);
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    protected virtual FileCollectorInfo GetFileCollectorInfo(ArgumentOrParameterDeclaration argumentOrParameter);
    protected virtual bool IsAvailableForScope(Scope scope, ArgumentOrParameterDeclaration argumentOrParameter);
    private static ICSharpArgument GetArgumentNearestToCaret(ICSharpContextActionDataProvider dataProvider);
    [PureAttribute]
private static ICSharpArgument GetArgumentBySurroundingSpace(ICSharpArgumentsOwner argumentsOwner, TreeOffset offset);
    [PureAttribute]
public static TreeTextRange GetInArgumentExpressionRange(ICSharpExpression expression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.NegateLogicalExpressionAction : LogicalExpressionActionBase {
    [NullableAttribute("2")]
private string myOperatorSign;
    public string Text { get; }
    public NegateLogicalExpressionAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.NonI18n.CSharpUseStringEmptyAction : UseStringEmptyActionBase {
    public CSharpUseStringEmptyAction(ICSharpContextActionDataProvider provider);
    [NullableContextAttribute("2")]
protected virtual bool IsConstantExpression(IExpression expression);
    protected virtual void ShortenReferences(IRangeMarker marker, IFile file);
    protected virtual IExpression CreateExpression();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.NonI18n.UseEnvironmentNewLineAction : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    [NullableAttribute("2")]
private IExpression myStringLiteral;
    public string Text { get; }
    public UseEnvironmentNewLineAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
private static bool IsConstantExpression(IExpression expression);
    private static void ShortenReferences(IRangeMarker marker, IFile file);
    private IExpression CreateExpression();
    [NullableContextAttribute("2")]
private static bool IsEmptyString(IExpression literal);
    [NullableContextAttribute("2")]
private static string GetValue(IExpression literal);
    [NullableContextAttribute("2")]
private IExpression GetSelectedString();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static IExpression ReplaceElement(ITreeNode oldElement, ITreeNode newElement);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.NormalToConditionalAccessAction : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public NormalToConditionalAccessAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
public static bool IsAvailable(ICSharpExpression qualifier);
    [NullableContextAttribute("2")]
private IConditionalAccessExpression FindNotConditionalAccessExpression();
    [NullableContextAttribute("2")]
public static bool CanLiftOrUnliftExpression(ICSharpExpression qualifierExpression, bool unlifting);
    [NullableContextAttribute("2")]
private static bool CanApplyConditionalAccess(ICSharpExpression expression);
    [NullableContextAttribute("2")]
public static bool IsNullableDotValueAccess(IConditionalAccessExpression conditionalAccess);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public static IBulbActionCommand Execute(IConditionalAccessExpression accessExpression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.NotifyPropertyChangeAction : object {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public NotifyPropertyChangeAction(ICSharpContextActionDataProvider provider);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.NotifyPropertyChangeAction/<CreateNotifyItems>d__4")]
private static IEnumerable`1<NotifyChangeAction> CreateNotifyItems(IPropertyDeclaration declaration, IReadOnlyList`1<IMethod> notifiers);
    [NullableContextAttribute("2")]
private IPropertyDeclaration FindPropertyDeclaration();
    private static bool IsAvailableEx(IPropertyDeclaration propertyDeclaration);
    private static IReadOnlyList`1<IMethod> FindAvailableNotifyMethods(IPropertyDeclaration propertyDeclaration, IAssignmentExpression& valueAssignment);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.NullCoalescingAssignmentToIfStatementAction : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public NullCoalescingAssignmentToIfStatementAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    private bool CanReplaceWithIfStatement(IAssignmentExpression assignmentExpression);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.NullCoalescingToIfStatementAction : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public NullCoalescingToIfStatementAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static bool CanReplaceWithIfStatement(INullCoalescingExpression sourceExpression);
    private static bool IsUserDefinedConversion(ICSharpExpression operand, IType targetType);
    private static bool IsPureReferenceExpressionChain(IReferenceExpression topmostExpression);
    private static void ReplaceNullCoalescingInLocalVariableInitializer(ILocalVariableDeclaration localVariableDeclaration);
    private static void ReplaceNullCoalescingInAssignmentSource(IAssignmentExpression assignmentExpression, INullCoalescingExpression nullCoalescingExpression);
    private static void ReplaceNullCoalescingInReturnStatement(IReturnStatement returnStatement, INullCoalescingExpression nullCoalescingExpression);
    private static void ReplacePureNullCheckNullCoalescingExpressionInReturnStatement(IReturnStatement returnStatement, INullCoalescingExpression nullCoalescingExpression, IThrowExpression rightOperand);
    private static ICSharpExpression GetContainingParenthesizedExpressionStrictWithNullableWarningSuppression(INullCoalescingExpression sourceExpression);
    [NullableContextAttribute("2")]
private static ICSharpExpression WrapWithNullableSuppressionIfNeeded(CSharpElementFactory factory, ICSharpExpression expression, bool suppressNullableWarnings);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.NullPropagationToIfStatementAction : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public NullPropagationToIfStatementAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
private ICSharpExpression FindStandaloneExpression();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.ObjectInitializerToAssignmentsAction : ModernScopedContextActionBase`1<IReadOnlyList`1<IMemberInitializer>> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <dataProvider>P;
    private string myText;
    public string Text { get; }
    public ObjectInitializerToAssignmentsAction(ICSharpContextActionDataProvider dataProvider);
    public virtual string get_Text();
    protected virtual IReadOnlyList`1<IMemberInitializer> TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual IReadOnlyList`1<IMemberInitializer> TryCreateInfoFromTreeNode(ITreeNode treeNode);
    protected virtual ITreeNode TryGetContextTreeNode(IReadOnlyList`1<IMemberInitializer> memberInitializers);
    [PureAttribute]
private IReadOnlyList`1<IMemberInitializer> FilterOutNonExtractableMemberInitializers(IReadOnlyList`1<IMemberInitializer> memberInitializers);
    protected virtual bool IsAvailable(IReadOnlyList`1<IMemberInitializer> memberInitializers);
    protected virtual IBulbActionCommand ExecutePsiTransaction(IReadOnlyList`1<IMemberInitializer> memberInitializers, ISolution solution, IProgressIndicator progress);
    public static string GetText(IReadOnlyList`1<IMemberInitializer> memberInitializers);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.ObjectInitializerToConstructorAction : ModernScopedContextActionBase`1<ObjectCreationOrConstructor> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <dataProvider>P;
    [NullableAttribute("2")]
private ITypeElement myScopedTypeElement;
    private bool myInvokedOverDeclaration;
    private bool myInvokedOverTypeName;
    private bool myScopedExecutionCreatedExplicitEmptyParameterlessConstructor;
    private int myScopedOccurrencesUpdated;
    public string Text { get; }
    public string ScopedText { get; }
    public ObjectInitializerToConstructorAction(ICSharpContextActionDataProvider dataProvider);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    protected virtual ObjectCreationOrConstructor TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual ObjectCreationOrConstructor TryCreateInfoFromTreeNode(ITreeNode treeNode);
    protected virtual bool IsAvailable(ObjectCreationOrConstructor creationOrConstructor);
    protected virtual FileCollectorInfo GetFileCollectorInfo(ObjectCreationOrConstructor creationOrConstructor);
    [PureAttribute]
private static bool CanOverloadConstructor(ITypeElement containingType, List`1<IPropertyInitializer> membersToInitialize);
    [PureAttribute]
private static List`1<IPropertyInitializer> FindMembersToInitialize(IObjectInitializer objectInitializer);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ObjectCreationOrConstructor creationOrConstructor, ISolution solution, IProgressIndicator progress);
    protected virtual IBulbActionCommand ExecuteCleanupAfterScopedExecution(ISolution solution, ObjectCreationOrConstructor creationOrConstructor, Scope scope);
    private static void FillParameterMapFromExistingConstructor(IConstructor targetConstructor, IReadOnlyList`1<IPropertyInitializer> membersToInitialize, Dictionary`2<string, ValueTuple`2<string, ParameterKind>> mapToParameterNames);
    private static bool IsExplicitClassInstanceParameterlessConstructorWithEmptyBody(IConstructor constructor);
    [PureAttribute]
private bool ShouldDelegateToDefaultCtor(ResolveResultWithInfo previousConstructorResolveResult, IReadOnlyList`1<IPropertyInitializer> memberToInitialize);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.ObjectInitializerToConstructorAction/<CollectInitializeableMembers>d__25")]
private static IEnumerable`1<ITypeMember> CollectInitializeableMembers(ITypeElement typeElement);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.ObjectInitializerToConstructorAction/<GetMembers>d__26")]
private static IEnumerable`1<ITypeMember> GetMembers(IReadOnlyList`1<IPropertyInitializer> membersToInitialize);
    private void CreateNewConstructor(IObjectCreationExpression creationExpression, ITypeElement targetType, ResolveResultWithInfo previousConstructor, IReadOnlyList`1<IPropertyInitializer> membersToInitialize, Dictionary`2<string, ValueTuple`2<string, ParameterKind>> mapToParameterNames);
    private static void TransferComments(IPropertyInitializer initializer, ICSharpArgument argument);
    [PureAttribute]
private static ICSharpArgument RebuildPropertyInitializerAsNamedArgument(IPropertyInitializer propertyInitializer);
    [PureAttribute]
private static IReadOnlyList`1<IPropertyInitializer> CollectMembers(IObjectInitializer objectInitializer);
    private static IConstructor TryFindExistingConstructor(ITypeElement typeElement, IReadOnlyList`1<IPropertyInitializer> membersToInitialize);
    [CompilerGeneratedAttribute]
internal static bool <CanOverloadConstructor>g__MatchParameters|18_0(<>c__DisplayClass18_0& , <>c__DisplayClass18_1& );
    [CompilerGeneratedAttribute]
internal static bool <FindMembersToInitialize>g__ReferencesDesignationFromNotMovedInitializer|19_0(IPropertyInitializer propertyInitializer, <>c__DisplayClass19_0& );
    [CompilerGeneratedAttribute]
internal static int <TryFindExistingConstructor>g__MatchParametersAndCountOptional|31_0(<>c__DisplayClass31_0& , <>c__DisplayClass31_1& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.Partial.CreateNewTypePartAction : ContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <dataProvider>P;
    public string Text { get; }
    public CreateNewTypePartAction(ICSharpContextActionDataProvider dataProvider);
    public virtual string get_Text();
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.Partial.MakeMethodPartialAction : object {
    [NotNullAttribute]
private ICSharpContextActionDataProvider myDataProvider;
    [CanBeNullAttribute]
private IBulbAction myAction;
    public MakeMethodPartialAction(ICSharpContextActionDataProvider dataProvider);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Intentions.CSharp.ContextActions.Partial.MakeMethodPartialBulbAction : BulbActionBase {
    internal static Key InstanceKey;
    private IMethodDeclaration myMethodDeclaration;
    public string Text { get; }
    private MakeMethodPartialBulbAction(IMethodDeclaration declaration);
    private static MakeMethodPartialBulbAction();
    public virtual string get_Text();
    internal static BulbActionBase Create(IMethodDeclaration methodDeclaration, IUserDataHolder cache);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static IEnumerable`1<IMethodDeclaration> GetEquivalentMethods(IDeclaration methodDeclaration);
}
internal class JetBrains.ReSharper.Intentions.CSharp.ContextActions.Partial.MergeClassDeclarationsItem : BulbActionBase {
    [NotNullAttribute]
private IClassLikeDeclaration myCurrentDeclaration;
    [NotNullAttribute]
private CSharpElementFactory myFactory;
    private IEnumerable`1<IProjectFile> myToRemove;
    private ICSharpFile myMainExchange;
    private ICSharpFile myMainFile;
    public string Text { get; }
    public MergeClassDeclarationsItem(IClassLikeDeclaration currentDeclaration);
    public virtual string get_Text();
    [NotNullAttribute]
protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progressIndicator);
    protected virtual Action`1<ITextControl> ExecuteAfterPsiTransaction(ISolution solution, IProjectModelTransactionCookie cookie, IProgressIndicator progress);
    private void MergePartialMethods(IClassLikeDeclaration typeDeclaration);
    private static void CopyAttributes(IMethodDeclaration destination, IEnumerable`1<IMethodDeclaration> sources);
    private static bool ParametersMatch(IMethodDeclaration destination, IMethodDeclaration source);
    [NotNullAttribute]
private static IClassLikeDeclaration AddNonPartialDeclarationBefore(IProperTypeDeclaration currentDeclaration, IClassLikeDeclaration newDecl);
    private static void RemoveTypeDeclaration(IProperTypeDeclaration classDecl);
    private static bool IsEmptyFile(ICSharpFile file);
    private static bool IsEmptyTypeAndNamespaceHolderDeclaration(ICSharpTypeAndNamespaceHolderDeclaration ns);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.Partial.MergePartialMethodsDeclarationsAction : object {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public MergePartialMethodsDeclarationsAction(ICSharpContextActionDataProvider provider);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.Partial.MergePartialTypesDeclarationsAction : object {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public MergePartialTypesDeclarationsAction(ICSharpContextActionDataProvider provider);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    [NullableContextAttribute("2")]
private IClassLikeDeclaration FindClassDeclaration();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.QualifyReferenceAction : ModernScopedContextActionBase`1<IQualifiableReference> {
    private ICSharpContextActionDataProvider myProvider;
    public string Text { get; }
    public string ScopedText { get; }
    public QualifyReferenceAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    protected virtual IQualifiableReference TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual IQualifiableReference TryCreateInfoFromTreeNode(ITreeNode treeNode);
    protected virtual ITreeNode TryGetContextTreeNode(IQualifiableReference reference);
    protected virtual bool IsAvailable(IQualifiableReference reference);
    protected virtual IBulbActionCommand ExecutePsiTransaction(IQualifiableReference reference, ISolution solution, IProgressIndicator progress);
    private static void QualifyReferenceName(IReferenceName referenceName, List`1<object> args);
    private static void QualifyReferenceExpression(IReferenceExpression referenceExpression, List`1<object> args);
    [NullableContextAttribute("2")]
private static IList`1<IDeclaredElement> GetQualifiersList(IDeclaredElement declaredElement);
    private static IReferenceName FindAliasReference(ResolveResultWithInfo resolveResult);
    [NullableContextAttribute("2")]
private IQualifiableReference FindReferenceInFrontOfCaret();
    private static void FixExternAliasDelimiter(ITokenNode delimiter, object element);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.QualifyStaticMembersAction : ModernScopedContextActionBase`1<IUsingSymbolDirective> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public QualifyStaticMembersAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual IUsingSymbolDirective TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual bool IsAvailable(IUsingSymbolDirective usingSymbolDirective);
    protected virtual IBulbActionCommand ExecutePsiTransaction(IUsingSymbolDirective usingDirective, ISolution solution, IProgressIndicator progress);
    [NullableContextAttribute("2")]
private IUsingSymbolDirective FindUsingDirective();
    [NullableContextAttribute("2")]
private static bool IsStaticMembersImport(IUsingSymbolDirective usingDirective);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.Query.QueryToExtensionMethodAction : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public QueryToExtensionMethodAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.RecursivePatternToAccessExpressionAction : ModernScopedContextActionBase`1<IRecursivePattern> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <dataProvider>P;
    public string Text { get; }
    public static string ActionText { get; }
    public RecursivePatternToAccessExpressionAction(ICSharpContextActionDataProvider dataProvider);
    public virtual string get_Text();
    public static string get_ActionText();
    protected virtual IRecursivePattern TryCreateInfoFromDataProvider(IUserDataHolder cache);
    private static ITreeNode GetPatternNodeIfSimple(IPattern pattern);
    protected virtual bool IsAvailable(IRecursivePattern recursivePattern);
    public static bool IsAvailableFor(IRecursivePattern recursivePattern);
    protected virtual IBulbActionCommand ExecutePsiTransaction(IRecursivePattern recursivePattern, ISolution solution, IProgressIndicator progress);
    public static IBulbActionCommand Execute(IRecursivePattern recursivePattern);
    private static IReadOnlyList`1<IReferenceExpression> CollectAccessExpressionsToMakeConditional(IReferenceExpression accessExpression, IRecursivePattern recursivePattern);
    private static ICSharpExpression OptimizeCheckExpression(ICSharpExpression checkExpression);
    private static bool OptimizeAwayConditionalAccess(ICSharpExpression checkExpression, TreeNodeMarker conditionalAccessMarker);
    [CompilerGeneratedAttribute]
internal static bool <IsAvailableFor>g__DoPatternChecksQualifierForNull|9_0(IReferenceExpression accessExpression, IRecursivePattern recursivePattern);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.Refactorings.ChangeSignatureAction : ContextActionBase`1<ICSharpDeclaration> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <dataProvider>P;
    public static IAnchor ChangeSignatureAnchor;
    public string Text { get; }
    public ChangeSignatureAction(ICSharpContextActionDataProvider dataProvider);
    private static ChangeSignatureAction();
    public virtual string get_Text();
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    protected virtual ICSharpDeclaration TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual bool IsAvailable(ICSharpDeclaration declaration);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ICSharpDeclaration declaration, ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.Refactorings.ConvertToGlobalUsingAction : ContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public ConvertToGlobalUsingAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [CompilerGeneratedAttribute]
private void <ExecutePsiTransaction>b__5_0(ITextControl textControl);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.Refactorings.ConvertToNonGlobalUsingAction : object {
    private ICSharpContextActionDataProvider myDataProvider;
    public string Text { get; }
    public ConvertToNonGlobalUsingAction(ICSharpContextActionDataProvider provider);
    public sealed virtual string get_Text();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    public sealed virtual void Execute(ISolution solution, ITextControl textControl);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.Refactorings.CopyTypeAction : ContextActionBase`1<IProperTypeDeclaration> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <dataProvider>P;
    public static IAnchor ChangeSignatureAnchor;
    public string Text { get; }
    public CopyTypeAction(ICSharpContextActionDataProvider dataProvider);
    private static CopyTypeAction();
    public virtual string get_Text();
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    protected virtual IProperTypeDeclaration TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual bool IsAvailable(IProperTypeDeclaration declaration);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(IProperTypeDeclaration declaration, ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.Refactorings.ExtensionToStaticMethodAction : StaticMethodToExtensionAction {
    public string Text { get; }
    protected Direction Direction { get; }
    public ExtensionToStaticMethodAction(ICSharpContextActionDataProvider dataProvider);
    public virtual string get_Text();
    protected virtual Direction get_Direction();
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.Refactorings.ExtractMethodAction : ContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <dataProvider>P;
    public string Text { get; }
    public ExtractMethodAction(ICSharpContextActionDataProvider dataProvider);
    public virtual string get_Text();
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.Refactorings.IntroduceVariableAction : ContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <dataProvider>P;
    public string Text { get; }
    public IntroduceVariableAction(ICSharpContextActionDataProvider dataProvider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    private static bool MakeSenseToIntroduceVariableFrom(ICSharpExpression expression);
    [NullableContextAttribute("2")]
[PureAttribute]
private ICSharpExpression FindExpressionToIntroduceVariableFor();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public static void Execute(ICSharpExpression expression, ISolution solution, ITextControl textControl);
    [CompilerGeneratedAttribute]
internal static bool <FindExpressionToIntroduceVariableFor>g__IsUnderIfCondition|6_0(ICSharpExpression expression);
    [CompilerGeneratedAttribute]
internal static bool <FindExpressionToIntroduceVariableFor>g__IsSimpleVariableReference|6_1(IReferenceExpression referenceExpression);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.Refactorings.MethodToPropertyAction : ContextActionBase`1<IMethodDeclaration> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <dataProvider>P;
    public string Text { get; }
    public MethodToPropertyAction(ICSharpContextActionDataProvider dataProvider);
    public virtual string get_Text();
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    protected virtual IMethodDeclaration TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual bool IsAvailable(IMethodDeclaration declaration);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(IMethodDeclaration declaration, ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.Refactorings.PropertyToMethodAction : ContextActionBase`1<IPropertyDeclaration> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <dataProvider>P;
    public string Text { get; }
    public PropertyToMethodAction(ICSharpContextActionDataProvider dataProvider);
    public virtual string get_Text();
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    protected virtual IPropertyDeclaration TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual bool IsAvailable(IPropertyDeclaration declaration);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(IPropertyDeclaration declaration, ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Intentions.CSharp.ContextActions.Refactorings.RefactoringActions : object {
    private static NodeTypeSet ourModifiers;
    private static RefactoringActions();
    [MustUseReturnValueAttribute]
public static Action`1<ITextControl> Execute(ISolution solution, IDeclaredElement declaredElement, IRefactoringWorkflow workflow);
    [PureAttribute]
public static bool IsPartOfSignatureModifier(ITokenNode modifierToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.Refactorings.RemoveParamsModifierAction : SetParamsModifierAction {
    public string Text { get; }
    protected bool SetParams { get; }
    public RemoveParamsModifierAction(ICSharpContextActionDataProvider dataProvider);
    public virtual string get_Text();
    protected virtual bool get_SetParams();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.Refactorings.SetParamsModifierAction : ContextActionBase`1<ICSharpParametersOwnerDeclaration> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <dataProvider>P;
    public string Text { get; }
    protected bool SetParams { get; }
    public SetParamsModifierAction(ICSharpContextActionDataProvider dataProvider);
    public virtual string get_Text();
    protected virtual bool get_SetParams();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.Refactorings.SetParamsModifierAction/<CreateBulbItems>d__6")]
public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    protected virtual ICSharpParametersOwnerDeclaration TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual bool IsAvailable(ICSharpParametersOwnerDeclaration parametersOwnerDeclaration);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ICSharpParametersOwnerDeclaration parametersOwnerDeclaration, ISolution solution, IProgressIndicator progress);
    [CompilerGeneratedAttribute]
internal static bool <CreateBulbItems>g__IsCollectionType|6_0(ICSharpRegularParameterDeclaration parameterDeclaration);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.Refactorings.StaticMethodToExtensionAction : ContextActionBase`1<IMethodDeclaration> {
    protected ICSharpContextActionDataProvider DataProvider;
    private bool myUseTopLevelMenu;
    public string Text { get; }
    protected Direction Direction { get; }
    public StaticMethodToExtensionAction(ICSharpContextActionDataProvider dataProvider);
    public virtual string get_Text();
    protected virtual Direction get_Direction();
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    protected virtual IMethodDeclaration TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual bool IsAvailable(IMethodDeclaration methodDeclaration);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(IMethodDeclaration methodDeclaration, ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.Refactorings.TransformParametersAction : ContextActionBase`1<ICSharpDeclaration> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <dataProvider>P;
    public string Text { get; }
    public TransformParametersAction(ICSharpContextActionDataProvider dataProvider);
    public virtual string get_Text();
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    protected virtual ICSharpDeclaration TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual bool IsAvailable(ICSharpDeclaration declaration);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ICSharpDeclaration declaration, ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.ReferenceEqualsToEqualityOperatorAction : EqualsToEqualityOperatorActionBase {
    public string Text { get; }
    public ReferenceEqualsToEqualityOperatorAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual bool IsAvailableEx(IReferenceExpression equalsReference, IInvocationExpression invocationExpression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.RemoveArgumentNameAction : NamedArgumentContextAction {
    public string Text { get; }
    public string ScopedText { get; }
    public RemoveArgumentNameAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    protected virtual bool IsAvailable(ICSharpArgument argument);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ArgumentOrParameterDeclaration argumentOrParameter, ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.RemoveBracesAction : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <dataProvider>P;
    public string Text { get; }
    public RemoveBracesAction(ICSharpContextActionDataProvider dataProvider);
    public virtual string get_Text();
    [NullableContextAttribute("2")]
private string ComputeHint();
    public virtual bool IsAvailable(IUserDataHolder userDataHolder);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [NullableContextAttribute("2")]
[PureAttribute]
private static ITreeNode GetNextNonWhitespaceToken(ITreeNode node);
    [NullableContextAttribute("2")]
[PureAttribute]
private static ITreeNode GetPreviousNonWhitespaceToken(ITreeNode node);
    private static ITreeRange ReplaceBlock(IBlock block);
    [NullableContextAttribute("2")]
private static void FormatGently(CodeFormatProfile formatProfile, ITreeNode first, ITreeNode last);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private IBulbActionCommand <ExecutePsiTransaction>g__GetCaretMovementAction|6_0(<>c__DisplayClass6_0& );
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal static bool <ReplaceBlock>g__IsSingleLineStatement|9_1(ICSharpStatement statement);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal static bool <ReplaceBlock>g__HasLineBreakBetween|9_2(ITreeNode start, ITreeNode end);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal static ITokenNode <ReplaceBlock>g__FindLineBreakBetween|9_3(ITreeNode start, ITreeNode end);
    [CompilerGeneratedAttribute]
internal static bool <ReplaceBlock>g__HasCommentBetween|9_4(ITreeNode start, ITreeNode end);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal static ITokenNode <ReplaceBlock>g__FindTokenBetween|9_5(ITreeNode start, ITreeNode end, Func`2<ITokenNode, bool> predicate);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.RemoveDeconstructionPatternComponentNameAction : DeconstructionPatternNameActionBase {
    public string ScopedText { get; }
    public string Text { get; }
    public RemoveDeconstructionPatternComponentNameAction(ICSharpContextActionDataProvider dataProvider);
    public virtual string get_ScopedText();
    public virtual string get_Text();
    protected virtual bool IsAvailable(ISubpattern subpattern);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISubpattern subpattern, ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.RemoveParenthesisAction : ModernScopedContextActionBase`1<IParenthesizedExpression> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public RemoveParenthesisAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual IParenthesizedExpression TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual bool IsAvailable(IParenthesizedExpression parenthesizedExpression);
    protected virtual IBulbActionCommand ExecutePsiTransaction(IParenthesizedExpression parenthesizedExpression, ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.RemoveRegionAction : ModernScopedContextActionBase`1<IPreprocessorDirective> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <dataProvider>P;
    public string Text { get; }
    public string ScopedText { get; }
    public RemoveRegionAction(ICSharpContextActionDataProvider dataProvider);
    protected virtual IPreprocessorDirective TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual bool IsAvailable(IPreprocessorDirective directive);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    protected virtual IBulbActionCommand ExecutePsiTransaction(IPreprocessorDirective directive, ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.RemoveSwitchConditionComponentAction : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <dataProvider>P;
    public string Text { get; }
    public RemoveSwitchConditionComponentAction(ICSharpContextActionDataProvider dataProvider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
[PureAttribute]
private RemoveInfo FindSwitchNodeAndRemoveIndex();
    [NullableContextAttribute("2")]
[PureAttribute]
private static int FindRemoveIndexInTupleCondition(ICSharpExpression dispatchExpression, TreeTextRange selectedRange);
    private static IReadOnlyList`1<IPattern> TryCollectPatternsToRemoveComponentFrom(RemoveInfo removeInfo);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal static bool <TryCollectPatternsToRemoveComponentFrom>g__ProcessPattern|8_0(IPattern pattern, <>c__DisplayClass8_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.RemoveTupleComponentNameAction : TupleComponentNameActionBase {
    public string ScopedText { get; }
    public string Text { get; }
    public RemoveTupleComponentNameAction(ICSharpContextActionDataProvider dataProvider);
    public virtual string get_ScopedText();
    public virtual string get_Text();
    protected virtual bool IsAvailable(ITupleComponent tupleComponent);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ITupleComponent tupleComponent, ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.RenameFileToMatchTypeNameAction : RenameFileToMatchTypeNameActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <dataProvider>P;
    public string Text { get; }
    public RenameFileToMatchTypeNameAction(ICSharpContextActionDataProvider dataProvider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [NullableContextAttribute("2")]
public static int CountTopLevelTypeDeclarations(ICSharpTypeAndNamespaceHolderDeclaration declaration);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.ReplaceLogicalExpressionAction : LogicalExpressionActionBase {
    [NullableAttribute("2")]
private string myOperatorSign;
    [NullableAttribute("2")]
private string myInvertedSign;
    public string Text { get; }
    public ReplaceLogicalExpressionAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Intentions.CSharp.ContextActions.ReturnStatementConverter : ToReturnStatementConverter {
    [CompilerGeneratedAttribute]
private ICSharpStatement <returnStatement>P;
    public ReturnStatementConverter(ICSharpStatement returnStatement, CSharpElementFactory factory);
    public virtual ISwitchStatement ReplaceOriginalStatementWithSwitchStatement(ISwitchStatement switchStatement);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.ReturnValueAction : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    private bool myIsIterator;
    public string Text { get; }
    public ReturnValueAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    public static bool IsAvailable(ICSharpExpression expression, Boolean& isIterator);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public static IBulbActionCommand Execute(IExpressionStatement expressionStatement, bool isIterator);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.ReverseAssignmentAction : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <dataProvider>P;
    private bool myManyResults;
    public string Text { get; }
    public ReverseAssignmentAction(ICSharpContextActionDataProvider dataProvider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [PureAttribute]
private IList`1<IAssignmentExpression> FindExpressionsToReverse();
    [NullableContextAttribute("2")]
[PureAttribute]
private static bool CheckExpression(ICSharpExpression expression);
    [NullableContextAttribute("2")]
[PureAttribute]
private static bool CheckAssignment(IAssignmentExpression assignmentExpression);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <FindExpressionsToReverse>b__6_2(IAssignmentExpression x);
    [CompilerGeneratedAttribute]
internal static bool <CheckExpression>g__IsReadable|7_0(ICSharpExpression expression);
    [CompilerGeneratedAttribute]
internal static bool <CheckAssignment>g__CheckTuple|8_0(ITupleExpression tupleExpression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.RevertForLoopAction : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <dataProvider>P;
    public string Text { get; }
    public RevertForLoopAction(ICSharpContextActionDataProvider dataProvider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static Nullable`1<ValueTuple`2<ICSharpExpression, ILocalVariable>> GetSingleVariableInitializerExpression(IForStatement forStatement);
    private static bool IsAvailableForIterator(IForStatement forStatement, IDeclaredElement variable);
    private static bool IsAvailableForIteratorAssignment(IAssignmentExpression assignmentExpression, IDeclaredElement variable);
    private static ICSharpExpression GetConditionRightOperand(IForStatement forStatement, IDeclaredElement variable);
    private ICSharpExpression RevertInitializer(IRelationalExpression conditionExpression, ICSharpExpression conditionOperand);
    [PureAttribute]
private static bool IsReferenceToElement(ICSharpExpression operand, IDeclaredElement operandDeclaredElement);
    private ICSharpExpression RevertCondition(IRelationalExpression conditionExpression, ICSharpExpression variableExpression, ICSharpExpression initializerExpression);
    private ICSharpExpression RevertIterator(ICSharpExpression iteratorExpression, IDeclaredElement controlVariable);
    private ICSharpExpression RevertAssignmentIterator(IAssignmentExpression assignmentExpression, IDeclaredElement controlVariable);
    private static ICSharpExpression TrySimplifyLiteralExpression(ICSharpExpression initializerExpression, TokenNodeType expectedTokenType);
    private static ICSharpExpression TrySimplifyAdditionOfOne(ICSharpExpression initializerExpression, TokenNodeType expectedTokenType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Intentions.CSharp.ContextActions.RewriteAnonymousFunctionActionBase : ModernContextActionBase {
    protected ICSharpContextActionDataProvider DataProvider;
    protected RewriteAnonymousFunctionActionBase(ICSharpContextActionDataProvider dataProvider);
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected abstract virtual bool CanEnsureTargetLocation(IAnonymousFunctionExpression functionExpression);
    protected abstract virtual bool CanRewriteClosures(IAnonymousFunctionExpression functionExpression);
    [NullableContextAttribute("2")]
protected abstract virtual IAnonymousFunctionExpression GetFunctionExpression();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.Scoped.CSharpLocalScopesBuilder : object {
    [NullableContextAttribute("1")]
[IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.Scoped.CSharpLocalScopesBuilder/<Build>d__0")]
public sealed virtual IEnumerable`1<LocalScope> Build(ITreeNode context);
    [NullableContextAttribute("1")]
[PureAttribute]
private static LocalScope TryCreateScope(IDeclaration memberDeclaration);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.SeparateLocalFunctionsWithJumpStatementAction : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <dataProvider>P;
    public string Text { get; }
    public SeparateLocalFunctionsWithJumpStatementAction(ICSharpContextActionDataProvider dataProvider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.SetDisposeAnalysisModeAction : ContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public SetDisposeAnalysisModeAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.SetDisposeAnalysisModeAction/<IntentionActions>d__7")]
public static IEnumerable`1<IntentionAction> IntentionActions(IPsiSourceFile file, IAnchor submenuAnchor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.SimplifyLinqExpressionUseMinByAndMaxByAction : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <dataProvider>P;
    [NullableAttribute("2")]
private IInvocationExpression myOrderingInvocationExpression;
    [NullableAttribute("2")]
private IInvocationExpression myFirstOrLastInvocationExpression;
    [NullableAttribute("2")]
private IMethod myReplacingMethod;
    public string Text { get; }
    public SimplifyLinqExpressionUseMinByAndMaxByAction(ICSharpContextActionDataProvider dataProvider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [NullableContextAttribute("2")]
private bool GetOrderingAndFirstOrLastMethodsBySyntax(IInvocationExpression middleInvocation, IInvocationExpression& orderingInvocation, IInvocationExpression& firstOrLastInvocation);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal static bool <GetOrderingAndFirstOrLastMethodsBySyntax>g__IsOrderingMethod|9_0(IInvocationExpression candidate);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal static bool <GetOrderingAndFirstOrLastMethodsBySyntax>g__IsFirstOrLastMethod|9_1(IInvocationExpression candidate);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.SortUsingDirectivesAction : ModernScopedContextActionBase`1<ICSharpTypeAndNamespaceHolderDeclaration> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    private bool myIsInitialUsingListSorted;
    private static InvisibleAnchor ourUsualScopedAnchor;
    private static InvisibleAnchor ourScopedWithoutCaretFixAnchor;
    public string Text { get; }
    public IAnchor LocalScopeAnchor { get; }
    public IAnchor GlobalScopeAnchor { get; }
    public SortUsingDirectivesAction(ICSharpContextActionDataProvider provider);
    private static SortUsingDirectivesAction();
    public virtual string get_Text();
    protected virtual ICSharpTypeAndNamespaceHolderDeclaration TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual bool IsAvailable(ICSharpTypeAndNamespaceHolderDeclaration usingsOwner);
    [PureAttribute]
private static bool IsSorted(IUsingList usingList);
    public sealed virtual IAnchor get_LocalScopeAnchor();
    public sealed virtual IAnchor get_GlobalScopeAnchor();
    protected virtual FileCollectorInfo GetFileCollectorInfo(ICSharpTypeAndNamespaceHolderDeclaration holderDeclaration);
    [PureAttribute]
private static List`1<IUsingDirective> GetStableSortedUsingDirectives(List`1<IUsingDirective> usingDirectives, IComparer`1<IUsingDirective> nameComparer);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ICSharpTypeAndNamespaceHolderDeclaration usingsOwner, ISolution solution, IProgressIndicator progress);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.SortUsingDirectivesAction/<EnumerateUsingDirectivesBySortableGroups>d__18")]
private static IEnumerable`1<List`1<IUsingDirective>> EnumerateUsingDirectivesBySortableGroups(IUsingList usingList);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.SpecifyEnumValuesAction : ModernScopedContextActionBase`1<IEnumDeclaration> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public SpecifyEnumValuesAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual IEnumDeclaration TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual bool IsAvailable(IEnumDeclaration enumDeclaration);
    protected virtual IBulbActionCommand ExecutePsiTransaction(IEnumDeclaration enumDeclaration, ISolution solution, IProgressIndicator progress);
    private ICSharpExpression CreateShiftExpression(CSharpElementFactory factory, IEnum enumType, IEnumMemberDeclaration memberDeclaration, ulong memberValue, ulong enumMaxValue);
    private static bool UseShiftExpression(IEnumDeclaration enumDeclaration);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.SpecifyEnumValuesAction/<GetValuesOfEnumMembersWithoutInitializers>d__9")]
private static IEnumerable`1<ValueTuple`2<IEnumMemberDeclaration, ulong>> GetValuesOfEnumMembersWithoutInitializers(IEnumDeclaration enumDeclaration);
    private static HashSet`1<ulong> GetExistingEnumValues(TreeNodeCollection`1<IEnumMemberDeclaration> enumMemberDeclarations);
    private static bool IsFlag(IEnumDeclaration enumDeclaration);
    private static int GetEmptyFlagIndex(TreeNodeCollection`1<IEnumMemberDeclaration> enumMemberDeclarations);
    private static ConstantValue CreateConstantValueOfEnumUnderlyingType(IEnum enumType, ITreeNode context, ulong value, ulong enumMaxValue);
    private static bool IsExceeding(IType underlyingType, PredefinedType predefinedType, ulong value);
    private static Nullable`1<ulong> UnboxConstantValue(ConstantValue constantValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.SplitAndInIfAction : SplitConditionActionBase {
    public string Text { get; }
    public SplitAndInIfAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.SplitAndInReturnAction : SplitBooleanBinaryExpressionInReturnActionBase {
    public SplitAndInReturnAction(ICSharpContextActionDataProvider provider);
    protected virtual IIfStatement CreateExtractedIfStatement(ICSharpExpression leftCondition);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.SplitAndPatternAction : ModernScopedContextActionBase`1<IAndPattern> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public SplitAndPatternAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual FileCollectorInfo GetFileCollectorInfo(IAndPattern andPattern);
    protected virtual IAndPattern TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual bool IsAvailable(IAndPattern andPattern);
    protected virtual IBulbActionCommand ExecutePsiTransaction(IAndPattern andPattern, ISolution solution, IProgressIndicator progress);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal static bool <IsAvailable>g__IsGoodCondition|6_0(ICSharpExpression condition);
    [CompilerGeneratedAttribute]
internal static bool <IsAvailable>g__GuardHasRelatedWrites|6_1(IPatternGuardClause patternGuard, ICSharpExpression governingExpression, <>c__DisplayClass6_0& );
    [CompilerGeneratedAttribute]
private Polyadic`1<ICSharpExpression> <ExecutePsiTransaction>g__CreateExpressionChecks|7_1(ICSharpExpression checkOperand, bool exceptFirst, <>c__DisplayClass7_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.SplitAttributesAction : ModernScopedContextActionBase`1<IList`1<IAttribute>> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public SplitAttributesAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual IList`1<IAttribute> TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual IList`1<IAttribute> TryCreateInfoFromTreeNode(ITreeNode treeNode);
    protected virtual ITreeNode TryGetContextTreeNode(IList`1<IAttribute> availabilityInfo);
    protected virtual bool IsAvailable(IList`1<IAttribute> availabilityData);
    protected virtual IBulbActionCommand ExecutePsiTransaction(IList`1<IAttribute> attributes, ISolution solution, IProgressIndicator progress);
    private IList`1<IAttribute> GetSelectedAttributes(IAttributeSectionList attributeSectionList);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Intentions.CSharp.ContextActions.SplitBooleanBinaryExpressionInReturnActionBase : SplitConditionActionBase {
    public string Text { get; }
    protected SplitBooleanBinaryExpressionInReturnActionBase(ICSharpContextActionDataProvider provider, TokenNodeType polyadicOperatorTokenNodeType);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [NullableContextAttribute("2")]
[PureAttribute]
private ICSharpExpression FindReturnedExpression();
    protected abstract virtual IIfStatement CreateExtractedIfStatement(ICSharpExpression leftCondition);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Intentions.CSharp.ContextActions.SplitConditionActionBase : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private TokenNodeType <polyadicOperatorTokenNodeType>P;
    protected ICSharpContextActionDataProvider DataProvider;
    protected SplitConditionActionBase(ICSharpContextActionDataProvider provider, TokenNodeType polyadicOperatorTokenNodeType);
    protected bool CanSplitCondition(ICSharpExpression condition);
    protected bool CanSplitCondition(ICSharpExpression condition, Polyadic`1& left, Polyadic`1& right);
    protected ValueTuple`3<ICSharpExpression, ICSharpExpression, CommentsBag> SplitCondition(ICSharpExpression condition);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.SplitConditionalAccessAction : ModernScopedContextActionBase`1<SplitPair> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public SplitConditionalAccessAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual SplitPair TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual bool IsAvailable(SplitPair splitPair);
    protected virtual SplitPair TryCreateInfoFromTreeNode(ITreeNode treeNode);
    protected virtual ITreeNode TryGetContextTreeNode(SplitPair splitPair);
    protected virtual IBulbActionCommand ExecutePsiTransaction(SplitPair splitPair, ISolution solution, IProgressIndicator progress);
    [NullableContextAttribute("2")]
[PureAttribute]
private SplitPair FindBooleanSplittableCheckAccess();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.SplitDeclarationAction : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    [CompilerGeneratedAttribute]
private string <SplitText>k__BackingField;
    protected string SplitText { get; protected set; }
    public string Text { get; }
    protected bool PreserveUsingVariableScopeIfPossible { get; }
    public SplitDeclarationAction(ICSharpContextActionDataProvider provider);
    [CompilerGeneratedAttribute]
protected string get_SplitText();
    [CompilerGeneratedAttribute]
protected void set_SplitText(string value);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
[PureAttribute]
protected ITreeNode FindSplitCandidate();
    [NullableContextAttribute("2")]
[PureAttribute]
private bool IsAvailable(ILocalVariableDeclaration variableDeclaration);
    [PureAttribute]
protected virtual ICSharpTreeNode GetDeclarationStatementAnchor(ILocalVariableDeclaration variableDeclaration);
    protected virtual bool get_PreserveUsingVariableScopeIfPossible();
    private static bool CheckMultiDeclarationMemberFullRangeSelection(ILocalVariableDeclaration localVariableDeclaration, TreeTextRange selectedTreeRange, TreeTextRange availabilityRange);
    [PureAttribute]
private bool IsAvailableForDeclarationExpression(IDeclarationExpression declarationExpression);
    [PureAttribute]
private bool IsAvailableForDeconstructionDesignation(ISingleVariableDesignation componentDesignation);
    [PureAttribute]
protected virtual ICSharpTreeNode GetDeclarationStatementAnchor(IDeclarationExpression outVariableDeclaration);
    private bool CheckSelectedRange(IAssignmentExpression assignmentExpression);
    [PureAttribute]
protected virtual ICSharpTreeNode GetDeclarationStatementAnchor(IAssignmentExpression assignmentExpression);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public static SplitResult Execute(ILocalVariableDeclaration variableDeclaration, ICSharpTreeNode declarationStatementAnchor, bool preserveUsingVariableScopeIfPossible);
    private static SplitResult SplitInUsingStatement(ILocalVariableDeclaration variableDeclaration, IUsingStatement usingStatement, bool preserveUsingVariableScopeIfPossible);
    internal static IUsingStatement SplitUsingStatementIntoThree(IUsingStatement usingStatement, int splitVariableIndex);
    private static SplitResult SplitInForStatement(ILocalVariableDeclaration variableDeclaration, IForStatement forStatement);
    private static SplitResult SplitFirstDeclarationInFor(IForStatement forStatement, ILocalVariableDeclaration variableDeclaration);
    [PureAttribute]
private static IDeclarationStatement VariableToDeclarationStatement(ILocalVariableDeclaration variableDeclaration, CSharpElementFactory factory);
    private static void ExtractBeforeVariables(IForStatement forStatement, ILocalVariableDeclaration variableDeclaration);
    [CompilerGeneratedAttribute]
internal static bool <FindSplitCandidate>g__IsRegularMultipleLocalVariableDeclaration|9_0(IMultipleDeclaration multipleDeclaration);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.SplitDeclarationAndMoveToOuterScopeAction : SplitDeclarationAction {
    protected bool PreserveUsingVariableScopeIfPossible { get; }
    public SplitDeclarationAndMoveToOuterScopeAction(ICSharpContextActionDataProvider dataProvider);
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ICSharpTreeNode GetDeclarationStatementAnchor(ILocalVariableDeclaration variableDeclaration);
    protected virtual bool get_PreserveUsingVariableScopeIfPossible();
    protected virtual ICSharpTreeNode GetDeclarationStatementAnchor(IDeclarationExpression outVariableDeclaration);
    protected virtual ICSharpTreeNode GetDeclarationStatementAnchor(IAssignmentExpression assignmentExpression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.SplitDeclarationsListAction : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <dataProvider>P;
    public string Text { get; }
    public SplitDeclarationsListAction(ICSharpContextActionDataProvider dataProvider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [PureAttribute]
private bool CheckSelectionRange(IMultipleDeclaration multipleDeclaration);
    public static bool IsAvailable(IMultipleDeclaration multipleDeclaration);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public static void Execute(IMultipleDeclaration multipleDeclaration);
    private static void Execute(IMultipleDeclaration multipleDeclaration, CSharpElementFactory factory);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class JetBrains.ReSharper.Intentions.CSharp.ContextActions.SplitFluentApiActionBase : ModernContextActionBase`1<IInvocationExpression> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    private static SubmenuAnchor ourSplitFluentApiActionAnchor;
    protected SplitFluentApiActionBase(ICSharpContextActionDataProvider provider);
    private static SplitFluentApiActionBase();
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    protected virtual IInvocationExpression TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual bool IsAvailable(IInvocationExpression invocationExpression);
    protected abstract virtual bool IsAvailableEx(int fluentDepth, bool isExpressionValueIgnored);
    protected virtual IBulbActionCommand ExecutePsiTransaction(IInvocationExpression invocationExpression, ISolution solution, IProgressIndicator progress);
    private IReadOnlyList`1<ICSharpExpression> SplitFluentApiIntoSeparateInvocations(IInvocationExpression invocationExpression);
    protected abstract virtual IReadOnlyList`1<ICSharpExpression> SplitFluentApiIntoSeparateInvocations(IInvocationExpression invocationExpression, ICSharpStatement parentStatement);
    protected ICSharpExpression GetQualifierBeforeFluentCalls(IInvocationExpression invocationExpression, Int32& depth, Boolean& isConditional);
    [NullableContextAttribute("2")]
private static bool MakeSenseToIntroduceVariable(ICSharpExpression destinationExpression);
    protected bool IsNonPureFluentMethodInvocation(IReferenceExpression referenceExpression);
    private bool IsNonPureFluentMethodInvocation(IReferenceExpression referenceExpression, PureAnnotationProvider pureAnnotationProvider);
    [CompilerGeneratedAttribute]
private bool <TryCreateInfoFromDataProvider>g__IsInvocationExpressionSelected|4_0(<>c__DisplayClass4_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.SplitFluentApiDivisionAction : SplitFluentApiActionBase {
    public string Text { get; }
    public SplitFluentApiDivisionAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual bool IsAvailableEx(int fluentDepth, bool isExpressionValueIgnored);
    protected virtual IReadOnlyList`1<ICSharpExpression> SplitFluentApiIntoSeparateInvocations(IInvocationExpression invocationExpression, ICSharpStatement parentStatement);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.SplitFluentApiUnchainAction : SplitFluentApiActionBase {
    public string Text { get; }
    public SplitFluentApiUnchainAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual bool IsAvailableEx(int fluentDepth, bool isExpressionValueIgnored);
    protected virtual IReadOnlyList`1<ICSharpExpression> SplitFluentApiIntoSeparateInvocations(IInvocationExpression invocationExpression, ICSharpStatement parentStatement);
    private IInvocationExpression GetTopLevelFluentInvocation(IInvocationExpression invocationExpression, Int32& depth);
    [CompilerGeneratedAttribute]
internal static void <SplitFluentApiIntoSeparateInvocations>g__ConfigureQualifier|4_0(IReferenceExpression referenceExpression, <>c__DisplayClass4_0& );
    [CompilerGeneratedAttribute]
internal static IInvocationExpression <SplitFluentApiIntoSeparateInvocations>g__ExtractInvocation|4_1(IInvocationExpression oldInvocationExpression, <>c__DisplayClass4_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.SplitIntoNestedPatternsAction : ModernScopedContextActionBase`1<IReferenceExpression> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <dataProvider>P;
    public string Text { get; }
    public SplitIntoNestedPatternsAction(ICSharpContextActionDataProvider dataProvider);
    public virtual string get_Text();
    protected virtual IReferenceExpression TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual bool IsAvailable(IReferenceExpression referenceExpression);
    protected virtual IBulbActionCommand ExecutePsiTransaction(IReferenceExpression referenceExpression, ISolution solution, IProgressIndicator progress);
    private static ISubpattern GetSubpattern(IReferenceExpression accessExpression);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.SplitListPatternAction : SplitPatternActionBase`1<ListPatternAvailabilityInfo> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <dataProvider>P;
    public string Text { get; }
    public SplitListPatternAction(ICSharpContextActionDataProvider dataProvider);
    public virtual string get_Text();
    protected virtual ListPatternAvailabilityInfo TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual ListPatternAvailabilityInfo TryCreateInfoFromTreeNode(ITreeNode treeNode);
    protected virtual bool IsAvailable(ListPatternAvailabilityInfo availabilityInfo);
    public static bool IsAvailableFor(IListPattern listPattern, IReadOnlyList`1<IPattern> itemPatternsToSplit);
    [PureAttribute]
private static bool IsDiscardedItemPatternOrDiscardedSlice(IPattern itemPattern);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ListPatternAvailabilityInfo availabilityInfo, ISolution solution, IProgressIndicator progress);
    public static IBulbActionCommand Execute(IListPattern listPattern, IReadOnlyList`1<IPattern> itemPatternsToSplit, bool doNotProduceIsExpressions);
    private static IPattern OptimizeListPattern(CSharpElementFactory factory, IListPattern listPattern, IReadOnlyList`1<IPattern> itemPatternsToSplit);
    private static Polyadic`1<ICSharpExpression> GetChecksFromPatterns(IListPattern listPattern, IReadOnlyList`1<IPattern> itemPatterns, CSharpElementFactory factory, bool doNotProduceIsExpressions, TreeNodeMarker`1<ICSharpExpression> qualifierMarker);
    private static Polyadic`1<ICSharpExpression> GetChecksFromPatterns(object operand, IListPattern listPattern, IReadOnlyList`1<IPattern> itemPatternsToSplit, CSharpElementFactory factory, bool doNotProduceIsExpressions, TreeNodeMarker`1<ICSharpExpression> qualifierMarker);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.SplitOrInIfAction : SplitConditionActionBase {
    public string Text { get; }
    public SplitOrInIfAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.SplitOrInReturnAction : SplitBooleanBinaryExpressionInReturnActionBase {
    public SplitOrInReturnAction(ICSharpContextActionDataProvider provider);
    protected virtual IIfStatement CreateExtractedIfStatement(ICSharpExpression leftCondition);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.SplitOrInSwitchCaseGuardAction : SplitConditionActionBase {
    public string Text { get; }
    public SplitOrInSwitchCaseGuardAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static bool HasConflictingDeclarationExpressions(ISwitchSection switchSection, Polyadic`1<ICSharpExpression> leftPolyadic);
    private static TreeTextRange CalculatePolyadicTreeTextRange(Polyadic`1<ICSharpExpression> polyadic);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.SplitOrPatternAction : ModernScopedContextActionBase`1<IOrPattern> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public SplitOrPatternAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual FileCollectorInfo GetFileCollectorInfo(IOrPattern orPattern);
    protected virtual IOrPattern TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual bool IsAvailable(IOrPattern orPattern);
    protected virtual IBulbActionCommand ExecutePsiTransaction(IOrPattern orPattern, ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class JetBrains.ReSharper.Intentions.CSharp.ContextActions.SplitPatternActionBase`1 : ModernScopedContextActionBase`1<TAvailabilityInfo> {
    [PureAttribute]
protected static ICSharpTreeNode TryGetPatternTopLevelOwner(IPatternWithDesignation sourcePattern);
    [PureAttribute]
protected static IReferenceExpression IsPatternDirectlyUnderIsWithSimpleExpressionOperand(IIsExpression isExpression, IPatternWithDesignation patternWithDesignation);
    [PureAttribute]
public static ICSharpExpression CreateCheckExpressionForPattern(IPattern pattern, CSharpElementFactory factory, ICSharpExpression operandExpression, bool forceUseOfEqualityExpression);
    public static ICSharpExpression ReplaceExpressionOrEmbedIntoPolyadic(ICSharpExpression operandToReplace, TokenNodeType polyadicSign, Polyadic`1<ICSharpExpression> newExpression);
    protected static ICSharpExpression CombineIsExpressionAndChecks(IIsExpression isExpression, Polyadic`1<ICSharpExpression> newChecks);
    public static void SetGuardCondition(Polyadic`1<ICSharpExpression> newChecks, IPatternGuardClause guardClause, Func`2<IPatternGuardClause, IPatternGuardClause> setGuardClause, CSharpElementFactory factory);
    protected static IReadOnlyList`1<string> GetSuggestedNames(IPatternWithDesignation pattern, ICSharpExpression containingExpression);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.SplitRecursivePatternAction : SplitPatternActionBase`1<IReadOnlyList`1<ISubpattern>> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <dataProvider>P;
    public string Text { get; }
    public SplitRecursivePatternAction(ICSharpContextActionDataProvider dataProvider);
    public virtual string get_Text();
    protected virtual IReadOnlyList`1<ISubpattern> TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual IReadOnlyList`1<ISubpattern> TryCreateInfoFromTreeNode(ITreeNode treeNode);
    protected virtual bool IsAvailable(IReadOnlyList`1<ISubpattern> subpatterns);
    public static bool IsAvailableFor(IReadOnlyList`1<ISubpattern> subpatterns);
    protected virtual IBulbActionCommand ExecutePsiTransaction(IReadOnlyList`1<ISubpattern> subpatternsToExtract, ISolution solution, IProgressIndicator progress);
    public static IBulbActionCommand Execute(IReadOnlyList`1<ISubpattern> subpatternsToSplit, bool doNotProduceIsExpressions);
    private static IPattern FixPropertyPatternClause(IRecursivePattern recursivePattern, IReadOnlyList`1<ISubpattern> subpatternsToRemove);
    private static Polyadic`1<ICSharpExpression> GetChecksFromPatterns(IPatternWithDesignation patternWithDesignation, IReadOnlyList`1<ISubpattern> subpatternsToSplit, CSharpElementFactory factory, bool doNotProduceIsExpressions, TreeNodeMarker`1<ICSharpExpression> qualifierMarker);
    private static Polyadic`1<ICSharpExpression> GetChecksFromPatterns(object operand, IReadOnlyList`1<ISubpattern> subpatternsToSplit, CSharpElementFactory factory, bool doNotProduceIsExpressions, TreeNodeMarker`1<ICSharpExpression> qualifierMarker);
    private static void RemovePolyadicOperand(ICSharpExpression operandToRemove, TokenNodeType polyadicSign);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.SplitReturnToIfAction : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public SplitReturnToIfAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
[PureAttribute]
private ICSharpExpression FindReturnedExpression();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.SplitStringAction : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <dataProvider>P;
    public string Text { get; }
    public SplitStringAction(ICSharpContextActionDataProvider dataProvider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.SplitTupleAssignmentAction : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public SplitTupleAssignmentAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static bool HasOverwrittenDestReferencesInSource(ITupleExpression destExpression, ITupleExpression sourceExpression);
    [NullableContextAttribute("2")]
private static bool CanSplitVariableDeclarations(IParenthesizedVariableDesignation designation);
    [NullableContextAttribute("2")]
private static bool IsValidTupleExpression(ITupleExpression tupleExpression);
    [CompilerGeneratedAttribute]
internal static int <HasOverwrittenDestReferencesInSource>g__IndexOfContainingComponent|6_0(ICSharpExpression expression, ITupleExpression tupleExpression);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.SplitVarPatternAction : ModernScopedContextActionBase`1<IVarPattern> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <dataProvider>P;
    public string Text { get; }
    public string ScopedText { get; }
    public SplitVarPatternAction(ICSharpContextActionDataProvider dataProvider);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    protected virtual IVarPattern TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual bool IsAvailable(IVarPattern varPattern);
    protected virtual IBulbActionCommand ExecutePsiTransaction(IVarPattern varPattern, ISolution solution, IProgressIndicator progress);
    private static Action TryCreateVarExtractor(IVarPattern varPattern);
    private static IPattern GetTopLevelPattern(IPattern pattern, Boolean& unwrapped);
    private static void ExtractVarPattern(IVarPattern varPattern, IStatementsOwner targetStatementsOwner);
    private static ICSharpExpression CreateAccessExpression(IPattern pattern, CSharpElementFactory factory);
    [CompilerGeneratedAttribute]
internal static IStatementsOwner <TryCreateVarExtractor>g__UnwrapSingleBlock|9_0(IStatementsOwner statementsOwner);
    [CompilerGeneratedAttribute]
internal static ICSharpExpression <CreateAccessExpression>g__GetExpressionOrIntroduceDesignationForPattern|12_0(IPatternWithDesignation patternWithDesignation, <>c__DisplayClass12_0& );
    [CompilerGeneratedAttribute]
internal static ICSharpExpression <CreateAccessExpression>g__TryGetDispatchExpression|12_1(IPattern pattern);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.StringBuilderRewriting.AppendLineToSeparateAppendAction : ModernScopedContextActionBase`1<IInvocationExpression> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public AppendLineToSeparateAppendAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual IInvocationExpression TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual bool IsAvailable(IInvocationExpression invocationExpression);
    protected virtual IBulbActionCommand ExecutePsiTransaction(IInvocationExpression invocationExpression, ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.StringBuilderRewriting.LiteralToStringBuilderAction : ModernContextActionBase`1<ILiteralExpression> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public LiteralToStringBuilderAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    protected virtual ILiteralExpression TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual bool IsAvailable(ILiteralExpression literalExpression);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ILiteralExpression literalExpression, ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.StringBuilderRewriting.MultilineStringToAppendLineAction : ModernScopedContextActionBase`1<ICSharpLiteralExpression> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <dataProvider>P;
    private static Char[] ourLineBreaks;
    public string Text { get; }
    public MultilineStringToAppendLineAction(ICSharpContextActionDataProvider dataProvider);
    private static MultilineStringToAppendLineAction();
    public virtual string get_Text();
    protected virtual ICSharpLiteralExpression TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual bool IsAvailable(ICSharpLiteralExpression literalExpression);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ICSharpLiteralExpression literalExpression, ISolution solution, IProgressIndicator progress);
    private static IReadOnlyList`1<ValueTuple`2<int, int>> GetLineBreaks(ITokenNode literal);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal static ILiteralExpression <ExecutePsiTransaction>g__CreateSubstringExpression|7_0(Nullable`1<int> start, Nullable`1<int> end, <>c__DisplayClass7_0& );
    [CompilerGeneratedAttribute]
internal static void <GetLineBreaks>g__HandleRawStringToken|8_0(<>c__DisplayClass8_0& );
    [CompilerGeneratedAttribute]
internal static void <GetLineBreaks>g__HandleVerbatimToken|8_1(<>c__DisplayClass8_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.StringBuilderRewriting.StringBuilderReplacement : object {
    private ICSharpExpression myExpressionToReplace;
    private bool myNeedToString;
    [CompilerGeneratedAttribute]
private FactoryArgumentsBuilder <Builder>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NeedAdditionalLine>k__BackingField;
    public FactoryArgumentsBuilder Builder { get; }
    public bool NeedAdditionalLine { get; }
    private StringBuilderReplacement(ICSharpExpression expressionToReplace, bool needAdditionalLine, bool needToString);
    [CompilerGeneratedAttribute]
public FactoryArgumentsBuilder get_Builder();
    [CompilerGeneratedAttribute]
public bool get_NeedAdditionalLine();
    public static StringBuilderReplacement CreateEmpty(ICSharpExpression expression);
    public ICSharpExpression ReplaceExpression();
    public static StringBuilderReplacement TrySubstitute(ICSharpExpression argumentExpression);
    public static StringBuilderReplacement TrySubstituteAppend(ICSharpExpression argumentExpression);
    public static StringBuilderReplacement TrySubstituteConstructor(ICSharpExpression argumentExpression);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class JetBrains.ReSharper.Intentions.CSharp.ContextActions.StringBuilderRewriting.ToStringBuilderActionBase : ModernScopedContextActionBase`1<ICSharpExpression> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    protected ToStringBuilderActionBase(ICSharpContextActionDataProvider provider);
    protected virtual ICSharpExpression TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual bool IsAvailable(ICSharpExpression expression);
    private bool IsAvailableForConcatenation(ICSharpExpression expression);
    protected abstract virtual bool IsAvailableForConcatenationEx(ICSharpExpression concatenation);
    private bool IsAvailableForInterpolation(ICSharpExpression expression);
    protected abstract virtual bool IsAvailableForInterpolationEx(IInterpolatedStringExpression interpolatedStringExpression);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ICSharpExpression expression, ISolution solution, IProgressIndicator progress);
    protected virtual StringBuilderReplacement TryGetStringBuilderReplacement(ICSharpExpression expression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.StringBuilderRewriting.ToStringBuilderConversionAction : ToStringBuilderActionBase {
    public string Text { get; }
    public ToStringBuilderConversionAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual bool IsAvailableForConcatenationEx(ICSharpExpression concatenation);
    protected virtual bool IsAvailableForInterpolationEx(IInterpolatedStringExpression interpolatedStringExpression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.StringBuilderRewriting.ToStringBuilderSubstitutionAction : ToStringBuilderActionBase {
    public string Text { get; }
    public ToStringBuilderSubstitutionAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual bool IsAvailableForConcatenationEx(ICSharpExpression concatenation);
    protected virtual bool IsAvailableForInterpolationEx(IInterpolatedStringExpression interpolatedStringExpression);
    protected virtual StringBuilderReplacement TryGetStringBuilderReplacement(ICSharpExpression expression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.StringEqualityToMethodInvocationAction : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public StringEqualityToMethodInvocationAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static IInvocationExpression ReplaceEqualityExpression(IEqualityExpression equalityExpression, ICSharpExpression invocationExpression);
    [NullableContextAttribute("2")]
private static bool IsStringOperand(IExpression operand);
    [NullableContextAttribute("2")]
private bool CaretBetweenOperands(ITreeNode leftOperand, ITreeNode rightOperand);
    private IMethod GetEqualityMethod(ITreeNode context);
    private IDeclaredElement GetEqualityOption(ITreeNode context);
    private static DocumentRange GetComparisonOptionsRange(ICSharpArgumentsOwner insertedExpression);
    private static IList`1<string> GetHotspotSuggestions(DocumentRange optionsArgumentRange, ITreeNode insertedExpression);
    private static IList`1<string> GetStringComparisonOptions(ITreeNode context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.StringToXElement.StringToXElementCodeAction : ModernContextActionBase {
    private IContextActionDataProvider myDataProvider;
    private static int MaxXmlStringSize;
    private static string ActionText;
    public string Text { get; }
    public StringToXElementCodeAction(ICSharpContextActionDataProvider dataProvider);
    private static StringToXElementCodeAction();
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder dataHolder);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static IExpression ReplaceExpression(ICSharpExpression expression, IPsiModule psiModule, XmlTreeVisitorCodeCreator treeVisitor, ICSharpExpression stringExpression);
    private static bool IsInMethodCall(IInvocationExpression expression, IDeclaredType declaredType, string methodName);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.SwitchExpressionToIfElseAction : ModernScopedContextActionBase`1<ISwitchExpression> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public SwitchExpressionToIfElseAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual ISwitchExpression TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual bool IsAvailable(ISwitchExpression switchExpression);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISwitchExpression switchExpression, ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.SwitchExpressionToStatementAction : ModernScopedContextActionBase`1<ISwitchExpression> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public SwitchExpressionToStatementAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual ISwitchExpression TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual bool IsAvailable(ISwitchExpression switchExpression);
    public static bool IsActionAvailable(ISwitchExpression switchExpression);
    [PureAttribute]
public static bool IsTopLevelTokenSelected(ISwitchExpression switchExpression, TreeTextRange selectedRange);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISwitchExpression switchExpression, ISolution solution, IProgressIndicator progress);
    public static ISwitchStatement Execute(ISwitchExpression switchExpression);
    private static ISwitchCaseLabel CreateSwitchCaseLabel(ISwitchExpressionArm arm, CSharpElementFactory factory);
    private static IAssignmentExpression TryGetConvertibleAssignmentExpression(ICSharpExpression switchExpression);
    private static ILocalVariableDeclaration TryGetConvertibleLocalVariableDeclaration(ICSharpExpression switchExpression);
    private static IReturnStatement TryGetConvertibleReturnStatement(ICSharpExpression switchExpression);
    private static IArrowExpressionClause TryGetConvertibleArrowExpressionClause(ICSharpExpression switchExpression);
    private static IArrowExpressionClause TryGetConvertibleAssignmentInArrowExpressionClause(ICSharpExpression switchExpression);
    private static IConverter CreateConverter(ISwitchExpression switchExpression, CSharpElementFactory factory);
    private static bool CheckSwitchExpressionHasAllPatternsGuardsAndExpressions(ISwitchExpression switchExpression);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.SwitchExpressionToTernaryAction : ModernScopedContextActionBase`1<ISwitchExpression> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public SwitchExpressionToTernaryAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual ISwitchExpression TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual bool IsAvailable(ISwitchExpression switchExpression);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISwitchExpression switchExpression, ISolution solution, IProgressIndicator progress);
    private static IType GetCommonTypeIfRequiredForCast(ISwitchExpression switchExpression);
    [PureAttribute]
private static ISwitchExpressionArm TryGetLastDefaultArm(ISwitchExpression switchExpression);
    [NullableContextAttribute("2")]
[PureAttribute]
private static bool IsFullDiscard(IPattern pattern);
    [PureAttribute]
private static bool CheckSwitchExpressionHasAllPatternsGuardsAndExpressions(ISwitchExpression switchExpression);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.SwitchStatementToExpressionAction : ModernScopedContextActionBase`1<ISwitchStatement> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public SwitchStatementToExpressionAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual ISwitchStatement TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual bool IsAvailable(ISwitchStatement switchStatement);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISwitchStatement switchStatement, ISolution solution, IProgressIndicator progress);
    [PureAttribute]
private bool IsTopLevelTokenSelected(ISwitchStatement switchStatement);
    [PureAttribute]
private static bool IsIncompleteSwitchStatement(ISwitchStatement switchStatement);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.SwitchStatementToIfElseAction : ModernScopedContextActionBase`1<ISwitchStatement> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public SwitchStatementToIfElseAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual ISwitchStatement TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual bool IsAvailable(ISwitchStatement switchStatement);
    private static CaseInfos TryCreateCaseInfos(ISwitchStatement switchStatement);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISwitchStatement switchStatement, ISolution solution, IProgressIndicator progress);
    public static IBulbActionCommand Execute(ISwitchStatement switchStatement, bool canOptimizeElse);
    [PureAttribute]
private static bool CanElseBeOptimized(IIfStatement ifStatement, bool first);
    private static void OptimizeElsePostAction(IIfStatement ifStatement);
    private static void RelocateSharedLocalFunctionsFromTopLevelBlockScope(ISwitchStatement switchStatement);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Intentions.CSharp.ContextActions.TernaryConversionActionBase : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    protected TernaryConversionActionBase(ICSharpContextActionDataProvider provider);
    [NullableContextAttribute("2")]
protected IConditionalTernaryExpression FindConditionalTernaryExpression();
    [PureAttribute]
protected CaretPositionKind GetCaretPositionKind(IConditionalTernaryExpression expression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.TernaryToIfAction : TernaryConversionActionBase {
    private static IConversionCase[] ourCases;
    public string Text { get; }
    public TernaryToIfAction(ICSharpContextActionDataProvider provider);
    private static TernaryToIfAction();
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [PureAttribute]
private static ITreeNode GetCaretTargetAfterConversion(IIfStatement statement, CaretPositionKind initialPositionKind);
    private static void FixBranchType(ICSharpExpression expression, IType oldType);
    private static IConversionCase FindAvailableConversion(ICSharpExpression expression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.TernaryToSwitchExpressionAction : TernaryConversionActionBase {
    public string Text { get; }
    public TernaryToSwitchExpressionAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    private static IConditionalTernaryExpression FindTopConditionalTernaryExpression(IConditionalTernaryExpression ternaryExpression);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [PureAttribute]
private int FindIndexOfTargetArm(IConditionalTernaryExpression conditionalExpression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class JetBrains.ReSharper.Intentions.CSharp.ContextActions.ToAssignmentConverter : object {
    [CompilerGeneratedAttribute]
private ICSharpExpression <DestinationExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private CSharpElementFactory <Factory>k__BackingField;
    private string myAssignmentFormat;
    protected ICSharpExpression DestinationExpression { get; }
    protected CSharpElementFactory Factory { get; }
    protected ToAssignmentConverter(ICSharpExpression destinationExpression, CSharpElementFactory factory, ITokenNodeType assignmentOperatorSign);
    [CompilerGeneratedAttribute]
protected ICSharpExpression get_DestinationExpression();
    [CompilerGeneratedAttribute]
protected CSharpElementFactory get_Factory();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.ToAssignmentConverter/<ConvertArmExpressionToSwitchBlockStatements>d__8")]
public sealed virtual IEnumerable`1<ICSharpStatement> ConvertArmExpressionToSwitchBlockStatements(ICSharpExpression expression, ITreeSnapshot commentSnapshot);
    public abstract virtual ISwitchStatement ReplaceOriginalStatementWithSwitchStatement(ISwitchStatement switchStatement);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.ToAutoPropertyAction : ContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    [NullableAttribute("2")]
private string myActionHint;
    public string Text { get; }
    public ToAutoPropertyAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.ToComputedPropertyAction : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    [NullableAttribute("2")]
private string myActionHint;
    public string Text { get; }
    public ToComputedPropertyAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [PureAttribute]
private static bool CapturesPositionalParameters(IVariableInitializer propertyInitializer);
    [PureAttribute]
private static bool IsPropertyWithoutCode(IPropertyDeclaration propertyDeclaration);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public static void SetDefaultBody(ICSharpFunctionDeclaration declaration, CSharpElementFactory factory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.ToDirectCastAction : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public ToDirectCastAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.ToExplicitConstructorAction : ModernScopedContextActionBase`1<IPrimaryConstructorDeclaration> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public ToExplicitConstructorAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual IPrimaryConstructorDeclaration TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual bool IsAvailable(IPrimaryConstructorDeclaration primaryConstructorDeclaration);
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    protected virtual IBulbActionCommand ExecutePsiTransaction(IPrimaryConstructorDeclaration primaryConstructorDeclaration, ISolution solution, IProgressIndicator progress);
    public static IConstructorDeclaration Execute(IPrimaryConstructorDeclaration primaryConstructorDeclaration);
    private static Dictionary`2<IParameter, ICSharpTypeMemberDeclaration> CreateExplicitDeclarationsForImplicitMembers(IPrimaryConstructorDeclaration primaryConstructorDeclaration, IClassLikeDeclaration typeDeclaration, HashSet`1& referenceFieldInInitializerScope);
    private static void InitializePreviouslyImplicitMembers(IPrimaryConstructorDeclaration primaryConstructorDeclaration, IBlock constructorBody, Dictionary`2<IParameter, ICSharpTypeMemberDeclaration> membersToInitialize);
    private static void InitializeMembersReferringToPrimaryParameters(IClassLikeDeclaration typeDeclaration, IConstructorDeclaration constructorDeclaration, IReadOnlyCollection`1<IInitializerOwnerDeclaration> membersWithInitializersToMove, Dictionary`2<IParameter, ICSharpTypeMemberDeclaration> nowExplicitMembersToInitialize, HashSet`1<IParameter> referenceFieldInInitializerScope);
    private static void ApplyParameterRenamesAccordingToStyle(Dictionary`2<IParameterDeclaration, string> renamesToDo, ITreeNode usageContext);
    private static void TransferBaseInitializer(IExtendedType baseClassInitializer, IConstructorDeclaration constructorDeclaration);
    private static void FixNameofUsagesOfPrimaryParametersInMemberContexts(IReadOnlyCollection`1<ValueTuple`2<IReferenceExpression, IParameter>> nameofUsagesInMemberContext, Dictionary`2<IParameter, ICSharpTypeMemberDeclaration> membersToInitialize);
    private static void TransferConstructorAttributes(IPrimaryConstructorDeclaration primaryConstructorDeclaration, IConstructorDeclaration constructorDeclaration);
    public static void CreateDeconstructMethod(IPrimaryConstructorDeclaration primaryConstructorDeclaration, IClassLikeDeclaration typeDeclaration);
    private static void ApplyCodeStyleToAssignments(IBlock bodyWithAssignments);
    private static void CopyDocumentationFromTypeAndRemovePositionalParameterReferences(IClassLikeDeclaration typeDeclaration, IConstructorDeclaration constructorDeclaration);
    [PureAttribute]
private static PositionalParameterUsagesConsumer InspectPrimaryParameterUsages(IPrimaryConstructorDeclaration constructorDeclaration, IClassLikeDeclaration classLikeDeclaration);
    [CompilerGeneratedAttribute]
[PureAttribute]
internal static bool <CreateExplicitDeclarationsForImplicitMembers>g__ReferenceFieldInInitializerScope|9_0(PrimaryParameterUsageKind parameterUsageKind);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.ToExplicitFieldAction : ModernScopedContextActionBase`1<ITypeMemberRegularParameterDeclaration> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public ToExplicitFieldAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual ITypeMemberRegularParameterDeclaration TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual bool IsAvailable(ITypeMemberRegularParameterDeclaration parameterDeclaration);
    [PureAttribute]
public static bool IsActionAvailable(ITypeMemberRegularParameterDeclaration parameterDeclaration, bool removePrimaryParameter, PrimaryParameterUsageKind& primaryParameterUsageKind);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ITypeMemberRegularParameterDeclaration parameterDeclaration, ISolution solution, IProgressIndicator progress);
    public static IFieldDeclaration Execute(ITypeMemberRegularParameterDeclaration parameterDeclaration, bool doNotInitialize);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class JetBrains.ReSharper.Intentions.CSharp.ContextActions.ToExplicitParamsArgumentActionBase : ModernScopedContextActionBase`1<ICSharpArgumentsOwner> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    protected ToExplicitParamsArgumentActionBase(ICSharpContextActionDataProvider provider);
    [NullableContextAttribute("2")]
protected virtual ICSharpArgumentsOwner TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected static bool IsAvailableFor(ICSharpArgumentsOwner argumentsOwner, IParametersOwner& parametersOwner);
    public static bool IsAvailableFor(ICSharpArgumentsOwner argumentsOwner);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.ToExplicitParamsArrayAction : ToExplicitParamsArgumentActionBase {
    public string Text { get; }
    public ToExplicitParamsArrayAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual bool IsAvailable(ICSharpArgumentsOwner argumentsOwner);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ICSharpArgumentsOwner argumentsOwner, ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.ToExplicitParamsCollectionAction : ToExplicitParamsArgumentActionBase {
    public string Text { get; }
    public ToExplicitParamsCollectionAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual bool IsAvailable(ICSharpArgumentsOwner argumentsOwner);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ICSharpArgumentsOwner argumentsOwner, ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.ToExplicitProgramClassAction : ModernContextActionBase`1<ITopLevelCode> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public ToExplicitProgramClassAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    protected virtual ITopLevelCode TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual bool IsAvailable(ITopLevelCode topLevelCode);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ITopLevelCode topLevelCode, ISolution solution, IProgressIndicator progress);
    public static IBulbActionCommand Execute(ITopLevelCode topLevelCode);
    [MustUseReturnValueAttribute]
public static bool HasAnyUsages(IDeclaredElement declaredElement);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.ToExplicitPropertyAction : ModernScopedContextActionBase`1<ITypeMemberRegularParameterDeclaration> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public ToExplicitPropertyAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual ITypeMemberRegularParameterDeclaration TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual bool IsAvailable(ITypeMemberRegularParameterDeclaration parameterDeclaration);
    [PureAttribute]
public static bool IsActionAvailable(ITypeMemberRegularParameterDeclaration parameterDeclaration);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ITypeMemberRegularParameterDeclaration parameterDeclaration, ISolution solution, IProgressIndicator progress);
    public static IPropertyDeclaration Execute(ITypeMemberRegularParameterDeclaration parameterDeclaration, bool doNotInitialize);
    private static void TransferPropertyAndFieldAttributes(ITypeMemberRegularParameterDeclaration parameterDeclaration, IPropertyDeclaration propertyDeclaration);
    private static void TransferPositionalParameterDocumentation(IClassLikeDeclaration classLikeDeclaration, IPropertyDeclaration propertyDeclaration);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.ToggleSyntaxStyleForNativeNumericAction : object {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public ToggleSyntaxStyleForNativeNumericAction(ICSharpContextActionDataProvider provider);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.ToggleSyntaxStyleForNativeNumericAction/<CreateBulbItems>d__3")]
public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Intentions.CSharp.ContextActions.ToLambdaExpressionAction : ModernBulbActionBase {
    private bool myCreateMethod;
    private IDeclaredType myExpressionType;
    private IReferenceExpression myReferenceExpression;
    public string Text { get; }
    public ToLambdaExpressionAction(IDeclaredType expressionType, IReferenceExpression referenceExpression, bool createMethod);
    public virtual string get_Text();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public static void ConvertMethodGroupToAnonymousFunction(IReferenceExpression referenceExpression, IDeclaredType expressionType, bool createMethod, bool forceStatic);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Intentions.CSharp.ContextActions.ToLocalFunctionActionBase : RewriteAnonymousFunctionActionBase {
    public string Text { get; }
    protected ToLocalFunctionActionBase(ICSharpContextActionDataProvider dataProvider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    protected virtual bool CanEnsureTargetLocation(IAnonymousFunctionExpression functionExpression);
    protected virtual bool CanRewriteClosures(IAnonymousFunctionExpression functionExpression);
    [NullableContextAttribute("2")]
protected IAnonymousFunctionExpression GetAnonymousFunctionByVariable();
    private IAnonymousFunctionExpression TryGetByRecursiveAnonymousFunctionPattern(IAssignmentExpression assignmentExpression);
    private IAnonymousFunctionExpression TryGetByRecursiveAnonymousFunctionDeclaration(IDeclarationStatement declarationStatement);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.ToLocalVariableMutationAction : ModernScopedContextActionBase`1<IWithExpression> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public ToLocalVariableMutationAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual FileCollectorInfo GetFileCollectorInfo(IWithExpression withExpression);
    protected virtual IWithExpression TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual bool IsAvailable(IWithExpression withExpression);
    public static bool CheckIsAvailable(ICSharpExpression expression);
    protected virtual IBulbActionCommand ExecutePsiTransaction(IWithExpression withExpression, ISolution solution, IProgressIndicator progress);
    public static IDeclarationStatement Execute(IWithExpression withExpression, List`1<ICSharpStatement> generatedStatements);
    [CompilerGeneratedAttribute]
internal static bool <GetFileCollectorInfo>g__IsNotCSharpClosure|4_0(ITreeNode treeNode);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Intentions.CSharp.ContextActions.ToNamedMethodActionBase : RewriteAnonymousFunctionActionBase {
    public string Text { get; }
    protected ToNamedMethodActionBase(ICSharpContextActionDataProvider dataProvider);
    public virtual string get_Text();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    protected virtual bool CanEnsureTargetLocation(IAnonymousFunctionExpression functionExpression);
    protected virtual bool CanRewriteClosures(IAnonymousFunctionExpression functionExpression);
    private static IBlock GetBody(IAnonymousFunctionExpression source);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.ToNamedPropertyPatternsAction : ModernScopedContextActionBase`1<IRecursivePattern> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public ToNamedPropertyPatternsAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual IRecursivePattern TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual bool IsAvailable(IRecursivePattern recursivePattern);
    protected virtual IBulbActionCommand ExecutePsiTransaction(IRecursivePattern recursivePattern, ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.ToObjectPatternAction : ModernScopedContextActionBase`1<ICSharpExpression> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <dataProvider>P;
    public string Text { get; }
    public ToObjectPatternAction(ICSharpContextActionDataProvider dataProvider);
    public virtual string get_Text();
    protected virtual ICSharpExpression TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual ICSharpExpression TryCreateInfoFromTreeNode(ITreeNode treeNode);
    protected virtual bool IsAvailable(ICSharpExpression nullCheckExpression);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ICSharpExpression nullCheckExpression, ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.ToParamsCollectionExpressionAction : ToExplicitParamsArgumentActionBase {
    private bool myPreferCreationExpression;
    public string Text { get; }
    public ToParamsCollectionExpressionAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    protected virtual bool IsAvailable(ICSharpArgumentsOwner argumentsOwner);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ICSharpArgumentsOwner argumentsOwner, ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.ToPatternOverConstantValueCheckAction : ModernScopedContextActionBase`1<IReferenceExpression> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <dataProvider>P;
    public string Text { get; }
    public ToPatternOverConstantValueCheckAction(ICSharpContextActionDataProvider dataProvider);
    public virtual string get_Text();
    protected virtual IReferenceExpression TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual bool IsAvailable(IReferenceExpression referenceExpression);
    public static bool IsAvailableFor(IReferenceExpression referenceExpression, bool requireQualifierToBeNotNull);
    private static bool IsAvailableForRelationalOrEqualityExpression(IReferenceExpression referenceExpressionWithQualifier, ICSharpExpression otherOperandInEqualityExpression, IBinaryExpression binaryExpression, bool requireQualifierToBeNotNull);
    protected virtual IBulbActionCommand ExecutePsiTransaction(IReferenceExpression referenceExpression, ISolution solution, IProgressIndicator progress);
    public static IBulbActionCommand ExecuteFor(IReferenceExpression referenceExpression, bool performNullableValueUnwrap);
    [PureAttribute]
private static TokenNodeType GetRelationalPatternToken(IRelationalExpression relationalExpression, bool invert);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class JetBrains.ReSharper.Intentions.CSharp.ContextActions.ToReturnStatementConverter : object {
    [CompilerGeneratedAttribute]
private CSharpElementFactory <factory>P;
    protected ToReturnStatementConverter(CSharpElementFactory factory);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.ToReturnStatementConverter/<ConvertArmExpressionToSwitchBlockStatements>d__2")]
public sealed virtual IEnumerable`1<ICSharpStatement> ConvertArmExpressionToSwitchBlockStatements(ICSharpExpression expression, ITreeSnapshot commentSnapshot);
    public abstract virtual ISwitchStatement ReplaceOriginalStatementWithSwitchStatement(ISwitchStatement switchStatement);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.ToSafeCastAction : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public ToSafeCastAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    private static bool CanReplaceDirectCastTo(ITypeUsage castType, IExpression operand);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.ToTopLevelCodeAction : ModernContextActionBase`1<IClassDeclaration> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public ToTopLevelCodeAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    protected virtual IClassDeclaration TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual bool IsAvailable(IClassDeclaration classDeclaration);
    protected virtual IBulbActionCommand ExecutePsiTransaction(IClassDeclaration classDeclaration, ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class JetBrains.ReSharper.Intentions.CSharp.ContextActions.TupleComponentNameActionBase : ModernScopedContextActionBase`1<ITupleComponent> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <dataProvider>P;
    protected TupleComponentNameActionBase(ICSharpContextActionDataProvider dataProvider);
    protected virtual FileCollectorInfo GetFileCollectorInfo(ITupleComponent tupleComponent);
    protected virtual ITupleComponent TryCreateInfoFromDataProvider(IUserDataHolder cache);
    [PureAttribute]
private static ITupleComponent GetTupleComponentBySurroundingSpace(ITupleExpression tupleExpression, TreeOffset offset);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.TypeToVarAction : ModernScopedContextActionBase`1<VarStyleSuggestion> {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static Key`1<Boxed`1<VarStyleSuggestion>> InstanceKey;
    private Nullable`1<bool> myInferredTypeIsChanged;
    protected ICSharpContextActionDataProvider DataProvider;
    public string Text { get; }
    public string ScopedText { get; }
    public TypeToVarAction(ICSharpContextActionDataProvider dataProvider);
    private static TypeToVarAction();
    protected virtual bool IsAvailable(VarStyleSuggestion suggestion);
    protected virtual ITreeNode TryGetContextTreeNode(VarStyleSuggestion availabilityInfo);
    protected virtual VarStyleSuggestion TryCreateInfoFromTreeNode(ITreeNode treeNode);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    protected virtual VarStyleSuggestion TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(VarStyleSuggestion availabilityInfo, ISolution solution, IProgressIndicator progress);
    [NullableContextAttribute("2")]
private VarStyleSuggestion SuggestStyle();
    private static bool HasReferencesInSameArgumentList(IDeclarationExpression declarationExpression);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.UseArrayCreationExpressionAction : ModernScopedContextActionBase`1<IArrayInitializer> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public string ScopedText { get; }
    public UseArrayCreationExpressionAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    protected virtual IArrayInitializer TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual bool IsAvailable(IArrayInitializer arrayInitializer);
    protected virtual IBulbActionCommand ExecutePsiTransaction(IArrayInitializer arrayInitializer, ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.UseAsAndCheckForNullAction : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <dataProvider>P;
    public string Text { get; }
    public UseAsAndCheckForNullAction(ICSharpContextActionDataProvider dataProvider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
[PureAttribute]
private IIsExpression FindIsExpressionFromDataProvider(ICSharpExpression& usageExpression);
    private static IIsExpression FindIsExpressionByCast(ICSharpExpression castExpression, ICSharpExpression castOperand);
    public static IIsExpression FindIsExpressionByCast(ICSharpExpression castExpression);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public static IBulbActionCommand Execute(IIsExpression isExpression, ICSharpExpression usageExpression);
    private static ILocalVariableDeclaration CreateLocalVariableDeclaration(CSharpElementFactory factory, IType typeCheckType, IIsExpression& isExpression);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.UseCollectionExpressionAction : ModernScopedContextActionBase`1<CreationNode> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <dataProvider>P;
    [NullableAttribute("2")]
private string myActionHint;
    [NullableAttribute("2")]
private Case myInitialCase;
    public string Text { get; }
    public UseCollectionExpressionAction(ICSharpContextActionDataProvider dataProvider);
    public virtual string get_Text();
    protected virtual CreationNode TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual CreationNode TryCreateInfoFromTreeNode(ITreeNode treeNode);
    protected virtual bool IsAvailable(CreationNode creationNode);
    [NullableContextAttribute("2")]
private static Case TryClassifyConversionCase(CreationNode creationNode, String& actionHint);
    [NullableContextAttribute("2")]
private static Case ClassifyArrayCreationConversionCase(IArrayCreationExpression arrayCreationExpression, String& actionHint);
    [NullableContextAttribute("2")]
private static Case ClassifyStackAllocConversionCase(IStackAllocExpression stackAllocExpression, String& actionHint);
    protected virtual IBulbActionCommand ExecutePsiTransaction(CreationNode creationNode, ISolution solution, IProgressIndicator progress);
    private TExpression AddTargetType(TExpression creationExpression);
    public static IBulbActionCommand Execute(ITreeNode collectionCreationNode);
    private static void ConvertInitializersFromSuggestion(ICSharpExpression targetCreationExpression, Suggestion suggestion);
    [CompilerGeneratedAttribute]
internal static void <Execute>g__ConvertArrayInitializer|17_0(IArrayInitializer arrayInitializer);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.UseConfigureAwaitFalseAction : ModernScopedContextActionBase`1<IAwaitReferencesOwner> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public string ScopedText { get; }
    public UseConfigureAwaitFalseAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    private bool ExpressionContainsSelection(IList`1<ICSharpExpression> expressions);
    private static DisjointedTreeTextRange GetDisjointedTreeTextRange(ICSharpExpression expression);
    protected virtual IAwaitReferencesOwner TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual bool IsAvailable(IAwaitReferencesOwner awaitOwner);
    protected virtual IBulbActionCommand ExecutePsiTransaction(IAwaitReferencesOwner awaitOwner, ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.UseExplicitArrayAction : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public UseExplicitArrayAction(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
private IArrayCreationExpression FindArrayCreationExpression();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.UseExplicitDiscardDeclarationAction : ModernScopedCodeStyleActionBase`1<DiscardDeclarationVarKeywordSuggestion> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <dataProvider>P;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Key`1<Boxed`1<DiscardDeclarationVarKeywordSuggestion>> ourInstanceKey;
    public string Text { get; }
    public string ScopedText { get; }
    protected ICodeStyleAdviser CodeStyleAdviser { get; }
    public UseExplicitDiscardDeclarationAction(ICSharpContextActionDataProvider dataProvider);
    private static UseExplicitDiscardDeclarationAction();
    public virtual string get_Text();
    public virtual string get_ScopedText();
    protected virtual DiscardDeclarationVarKeywordSuggestion TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual ICodeStyleAdviser get_CodeStyleAdviser();
    [NullableContextAttribute("2")]
protected virtual ITreeNode FindSuggestionSourceNode();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.UseExplicitlyTypedNewAction : ModernScopedContextActionBase`1<IObjectCreationStyleSuggestion> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <dataProvider>P;
    public string Text { get; }
    public UseExplicitlyTypedNewAction(ICSharpContextActionDataProvider dataProvider);
    public virtual string get_Text();
    protected virtual IObjectCreationStyleSuggestion TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual IObjectCreationStyleSuggestion TryCreateInfoFromTreeNode(ITreeNode treeNode);
    protected virtual bool IsAvailable(IObjectCreationStyleSuggestion suggestion);
    protected virtual IBulbActionCommand ExecutePsiTransaction(IObjectCreationStyleSuggestion suggestion, ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.UseExplicitOrImplicitTupleComponentNameAction : object {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <dataProvider>P;
    [NullableAttribute("2")]
private IBulbAction myAction;
    public UseExplicitOrImplicitTupleComponentNameAction(ICSharpContextActionDataProvider dataProvider);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.UseExplicitTypeParametersAction : ModernScopedContextActionBase`1<IReferenceExpression> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <dataProvider>P;
    public string Text { get; }
    public UseExplicitTypeParametersAction(ICSharpContextActionDataProvider dataProvider);
    public virtual string get_Text();
    protected virtual IReferenceExpression TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual bool IsAvailable(IReferenceExpression methodReference);
    protected virtual IBulbActionCommand ExecutePsiTransaction(IReferenceExpression methodReference, ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.UseImplicitDiscardDeclarationAction : ModernScopedCodeStyleActionBase`1<DiscardDeclarationVarKeywordSuggestion> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <dataProvider>P;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Key`1<Boxed`1<DiscardDeclarationVarKeywordSuggestion>> ourInstanceKey;
    public string Text { get; }
    public string ScopedText { get; }
    protected ICodeStyleAdviser CodeStyleAdviser { get; }
    public UseImplicitDiscardDeclarationAction(ICSharpContextActionDataProvider dataProvider);
    private static UseImplicitDiscardDeclarationAction();
    public virtual string get_Text();
    public virtual string get_ScopedText();
    protected virtual DiscardDeclarationVarKeywordSuggestion TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual ICodeStyleAdviser get_CodeStyleAdviser();
    [NullableContextAttribute("2")]
protected virtual ITreeNode FindSuggestionSourceNode();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.UseObjectInitializerAction : ModernScopedContextActionBase`1<AvailabilityData> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <dataProvider>P;
    private string myActionText;
    public string Text { get; }
    public string ScopedText { get; }
    public UseObjectInitializerAction(ICSharpContextActionDataProvider dataProvider);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    protected virtual AvailabilityData TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual bool IsAvailable(AvailabilityData data);
    protected virtual AvailabilityData TryCreateInfoFromTreeNode(ITreeNode treeNode);
    [NullableContextAttribute("2")]
private Suggestion FindSuggestion(IObjectCreationExpression& objectCreationExpression, bool checkConflicts);
    [PureAttribute]
public static Suggestion FindSuggestionFromInitializers(ICSharpContextActionDataProvider provider, bool checkConflicts, bool forCollectionExpression, ICSharpExpression& creationExpression);
    private static ICSharpExpression FindInitializationExpressionUnderCaret(ICSharpContextActionDataProvider provider);
    private static Nullable`1<AssignmentsRange> FindSelectedInitializationStatements(ICSharpContextActionDataProvider provider);
    private static bool CheckConflicts(ITarget assignmentTarget, ICSharpExpression creationExpression, AssignmentsRange assignments, int creationStatementIndex);
    protected virtual IBulbActionCommand ExecutePsiTransaction(AvailabilityData data, ISolution solution, IProgressIndicator progress);
    public static IInitializerElement AddInitializers(IReadOnlyList`1<InitializerCandidate> items, IObjectCreationExpression creationExpression);
    private static IInitializerElement CreateInitializers(IReadOnlyList`1<InitializerCandidate> candidates, IObjectCreationExpression creationExpression, Dictionary`2<ICSharpExpression, IInitializerElement> initializers);
    private static IMemberInitializer AddMemberInitializers(IObjectCreationExpression target, IAssignmentExpression assignment);
    private static IMemberInitializer EnsureMemberInitializer(IObjectInitializer objectInitializer, ICSharpExpression destinationExpression);
    private static void BreakLineBefore(ITreeNode node);
    private static IMemberInitializer CreateMemberInitializerForElement(ICSharpExpression destinationExpression, IDeclaredElement declaredElement);
    private static IPropertyInitializer CreateMemberInitializerForName(ICSharpExpression expression, string propertyName);
    [PureAttribute]
private static IPropertyInitializer FindExistingPropertyInitializer(IObjectInitializer objectInitializer, string propertyName);
    private static IObjectInitializer EnsureObjectInitializer(IObjectCreationExpression destination);
    private static IObjectInitializer EnsureObjectInitializer(IMemberInitializer destination);
    private static ICollectionElementInitializer AddElementInitializer(IObjectCreationExpression expression, IEnumerable`1<ICSharpExpression> argumentExpressions);
    private static ICollectionInitializer CreateInitializerForArguments(IEnumerable`1<ICSharpExpression> source, CSharpElementFactory factory);
    private static void TransferCommentsFromStatementsToInitializers(IEnumerable`1<ICSharpStatement> statementsToRemove, Dictionary`2<ICSharpExpression, IInitializerElement> createdInitializers);
    private static IList`1<ICSharpExpression> RelativePath(IObjectCreationExpression creationExpression, IAssignmentExpression assignment);
    private static List`1<ICSharpExpression> ExpressionParts(ICSharpExpression dest);
    private static void RemoveRedundantParenthesisAndFormat(IObjectCreationExpression creationExpression);
    [PureAttribute]
private static IReference ValidReference(ICSharpExpression expression);
    [PureAttribute]
private static ICSharpExpression NextReferenceExpression(ICSharpExpression expression);
    private static void CollectExpressionsAndStatements(IReadOnlyList`1<InitializerCandidate> candidates, List`1<ICSharpExpression> initializationExpressions, List`1<ICSharpStatement> statementsToRemove);
    [CompilerGeneratedAttribute]
internal static void <FindSuggestionFromInitializers>g__CollectObjectCreationsAndReverse|12_0(ICSharpStatement statement, List`1<ICSharpExpression> consumer, bool allowCollectionExpression);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.UsePositionalDeconstructionPatternAction : ModernScopedContextActionBase`1<IRecursivePattern> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public static string ActionText;
    public string Text { get; }
    public UsePositionalDeconstructionPatternAction(ICSharpContextActionDataProvider provider);
    private static UsePositionalDeconstructionPatternAction();
    public virtual string get_Text();
    protected virtual IRecursivePattern TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual bool IsAvailable(IRecursivePattern recursivePattern);
    protected virtual IBulbActionCommand ExecutePsiTransaction(IRecursivePattern recursivePattern, ISolution solution, IProgressIndicator progress);
    private static IReadOnlyList`1<ISubpattern> FindSubpatternsToDeconstruct(IRecursivePattern recursivePattern);
    public static void Execute(IRecursivePattern recursivePattern, IReadOnlyList`1<ISubpattern> components);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.UseSeparateDeconstructionDeclarationsAction : ModernScopedCodeStyleActionBase`1<DeconstructedVariableVarKeywordUsageSuggestion> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <dataProvider>P;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Key`1<Boxed`1<DeconstructedVariableVarKeywordUsageSuggestion>> ourInstanceKey;
    public string Text { get; }
    public string ScopedText { get; }
    protected ICodeStyleAdviser CodeStyleAdviser { get; }
    public UseSeparateDeconstructionDeclarationsAction(ICSharpContextActionDataProvider dataProvider);
    private static UseSeparateDeconstructionDeclarationsAction();
    public virtual string get_Text();
    public virtual string get_ScopedText();
    protected virtual DeconstructedVariableVarKeywordUsageSuggestion TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual ICodeStyleAdviser get_CodeStyleAdviser();
    [NullableContextAttribute("2")]
protected virtual ITreeNode FindSuggestionSourceNode();
    [CompilerGeneratedAttribute]
private bool <FindSuggestionSourceNode>g__IsSelected|10_0(ITokenNode varKeyword, IParenthesizedVariableDesignation parenthesizedDesignation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.UseSpanForStackAllocAction : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <dataProvider>P;
    [NullableAttribute("2")]
private string myText;
    public string Text { get; }
    public UseSpanForStackAllocAction(ICSharpContextActionDataProvider dataProvider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [NullableContextAttribute("2")]
private ILocalVariableDeclaration FindSelectedUnmanagedLocalVariableDeclarationWithStackAllocInitializer(IStackAllocExpression& stackAllocExpression);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.UseTargetTypedNewAction : ModernScopedContextActionBase`1<IObjectCreationStyleSuggestion> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <dataProvider>P;
    public string Text { get; }
    public UseTargetTypedNewAction(ICSharpContextActionDataProvider dataProvider);
    public virtual string get_Text();
    protected virtual IObjectCreationStyleSuggestion TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual IObjectCreationStyleSuggestion TryCreateInfoFromTreeNode(ITreeNode treeNode);
    protected virtual bool IsAvailable(IObjectCreationStyleSuggestion suggestion);
    protected virtual IBulbActionCommand ExecutePsiTransaction(IObjectCreationStyleSuggestion suggestion, ISolution solution, IProgressIndicator progress);
}
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.Util.ControlFlowReachabitityChecker : object {
    [NotNullAttribute]
private JetHashSet`1<ICSharpControlFlowElement> myReachableElements;
    public ControlFlowReachabitityChecker(IControlFlowGraph graph, IEnumerable`1<ICSharpTreeNode> elements);
    private void FillHash(ICSharpControlFlowElement statement);
    public bool IsReachable(ICSharpControlFlowElement element);
}
public static class JetBrains.ReSharper.Intentions.CSharp.ContextActions.Util.FormatUtil : object {
    [NullableContextAttribute("1")]
public static void FormatContainingMethodChain(ICSharpExpression expression);
}
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.Util.TypeDeclarationMergingBuilder : object {
    private List`1<IAttribute> myAttributes;
    private List`1<IExtendedType> myBaseClasses;
    private List`1<IExtendedType> myBaseInterfaces;
    private HashSet`1<IType> myExtendedTypes;
    private Dictionary`2<string, TypeParameterInformation> myTypeParameters;
    private AccessRights myAccessRights;
    private string myStructureType;
    private string myName;
    private IPrimaryConstructorDeclaration myPrimaryConstructorDeclaration;
    private bool myIsAbstract;
    private bool myIsNew;
    private bool myIsSealed;
    private bool myIsStatic;
    private bool myIsUnsafe;
    private bool myIsReadOnly;
    private bool myIsByRefLike;
    private StringBuilder myGeneratedCode;
    private List`1<object> myGeneratedParams;
    public TypeDeclarationMergingBuilder(ITypeElement element);
    private TypeParameterInformation GetTypeParameter(string name);
    private void AddTypeParameterDeclaration(ITypeParameterDeclaration element);
    private void AddTypeParameterConstraints(ITypeParameterConstraintsClause clause);
    private void AddExtendedType(IExtendedType extendedType);
    public void AddClassLikeDeclaration(IClassLikeDeclaration declaration);
    private void GenerateTypeParametersDeclaration();
    private void GenerateTypeParameterConstraints();
    private void GenerateExtendsList();
    private void GenerateAttributeUsages(IEnumerable`1<IAttribute> attributes);
    private void GeneratePrimaryConstructorDeclaration();
    private void CreateFactoryParams();
    [NotNullAttribute]
public IClassLikeDeclaration CreateClassLikeDeclaration(CSharpElementFactory factory);
    private void SetStaticAndNew(CSharpElementFactory factory, IClassLikeDeclaration typeDeclaration);
    private void EnsureDelimiter(Boolean& isFirst);
    private void AppendParameter(object parameter);
    private void AddExtendedType(IList`1<IExtendedType> list, IExtendedType extendedType);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ContextActions.VarToTypeAction : ModernScopedContextActionBase`1<VarStyleSuggestion> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <dataProvider>P;
    public string Text { get; }
    public string ScopedText { get; }
    public VarToTypeAction(ICSharpContextActionDataProvider dataProvider);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    protected virtual ITreeNode TryGetContextTreeNode(VarStyleSuggestion availabilityInfo);
    protected virtual bool IsAvailable(VarStyleSuggestion suggestion);
    protected virtual VarStyleSuggestion TryCreateInfoFromDataProvider(IUserDataHolder cache);
    protected virtual VarStyleSuggestion TryCreateInfoFromTreeNode(ITreeNode treeNode);
    [NullableContextAttribute("2")]
private ICSharpTreeNode FindVarDeclaration();
    protected virtual IBulbActionCommand ExecutePsiTransaction(VarStyleSuggestion availabilityInfo, ISolution solution, IProgressIndicator progress);
    private IBulbActionCommand HandleDeconstructingDeclarationExpression(VarStyleSuggestion availabilityInfo, IDeclarationExpression declarationExpression);
    private ExpressionTypeSuggestion GetDeclarationExpressionTypeSuggestion(ISingleVariableDesignation singleVariableDesignation);
    private static IList`1<IType> GetPossibleTypesForOutVar(ICSharpArgument argumentInfo);
    private ExpressionTypeSuggestion GetExpressionTypeSuggestion(IType defaultType, ITreeNode initializerNode, IDeclaration declaration);
    private IBulbActionCommand CreateHotspotWithTypeSuggestions(ITypeUsage newTypeUsage, ExpressionTypeSuggestion expressionTypeSuggestion);
    private IBulbActionCommand CreateHotspotWithTypeSuggestions(OrderedDictionary`2<ITypeUsage, ExpressionTypeSuggestion> typeSuggestions);
    [PureAttribute]
private static ExpressionTypeSuggestion EnforceNullableAnnotationIfRequired(ExpressionTypeSuggestion suggestion, ICSharpLocalVariable variable, ICSharpTreeNode context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Intentions.CSharp.ContextActions.WcfAnnotatorActionBase`1 : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    protected WcfAnnotatorActionBase`1(ICSharpContextActionDataProvider provider);
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [NullableContextAttribute("2")]
protected TDeclaration GetDeclaration();
    protected abstract virtual IEnumerable`1<IAttributesOwner> GetMembersForAnnotation(TDeclaration declaration);
    protected abstract virtual IClrTypeName GetRequiredDeclarationAttributeClrTypeName();
    protected abstract virtual IClrTypeName GetAnnotationAttributeClrTypeName();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.WcfAnnotatorActionBase`1/<GetNotAnnotatedMembers>d__8")]
private IEnumerable`1<IAttributesOwner> GetNotAnnotatedMembers(TDeclaration declaration);
    private bool HasAnnotation(IAttributesSet attributesOwner);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Intentions.CSharp.CqrsValidationsWarningsQuickFixRegistration : object {
    public IEnumerable`1<Type> Dependencies { get; }
    public sealed virtual IEnumerable`1<Type> get_Dependencies();
    public sealed virtual void Register(IQuickFixesRegistrar table);
}
[ContextActionDataBuilderAttribute("JetBrains.ReSharper.Intentions.CSharp.DataProviders.CSharpXmlDocContextActionDataProvider", "16")]
internal class JetBrains.ReSharper.Intentions.CSharp.DataProviders.CSharpXmlDocContextActionDataBuilder : ContextActionDataBuilderBase`2<CSharpLanguage, ICSharpFile> {
    public virtual IContextActionDataProvider BuildFromPsi(ISolution solution, ITextControl textControl, ICSharpFile psiFile);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.DataProviders.CSharpXmlDocContextActionDataProvider : XmlContextActionDataProvider {
    internal CSharpXmlDocContextActionDataProvider(ISolution solution, ITextControl textControl, IXmlFile xmlFile, IXmlContextActionProvider contextActionProvider);
    public sealed virtual CSharpXmlDocContextActionDataProvider TryTranslateToCurrentFork(IContentModelForkTranslator translator);
}
[CustomHighlightingActionProviderAttribute("JetBrains.ProjectModel.CSharpProjectFileType")]
internal class JetBrains.ReSharper.Intentions.CSharp.DisableWarning.ConfigureHighlightingSettingFixProvider : object {
    public sealed virtual IEnumerable`1<IntentionAction> GetActions(IHighlighting highlighting, DocumentRange highlightingRange, IPsiSourceFile sourceFile, IAnchor configureAnchor);
}
public abstract class JetBrains.ReSharper.Intentions.CSharp.DisableWarning.CSharpDisableWarningActionBase : object {
    private DocumentRange myRange;
    [CompilerGeneratedAttribute]
private string <SeverityId>k__BackingField;
    [NotNullAttribute]
protected string SeverityId { get; }
    public string Text { get; }
    [NotNullAttribute]
protected string OpeningText { get; }
    [CanBeNullAttribute]
protected string ClosingText { get; }
    protected CSharpDisableWarningActionBase(DocumentRange range, string severityId);
    [CompilerGeneratedAttribute]
protected string get_SeverityId();
    public abstract virtual string get_Text();
    protected abstract virtual string get_OpeningText();
    protected abstract virtual string get_ClosingText();
    public sealed virtual void Execute(ISolution solution, ITextControl textControl);
}
internal class JetBrains.ReSharper.Intentions.CSharp.DisableWarning.DisableAndRestoreByCommentsWarningAction : CSharpDisableWarningActionBase {
    public string Text { get; }
    protected string OpeningText { get; }
    [NotNullAttribute]
protected string ClosingText { get; }
    public DisableAndRestoreByCommentsWarningAction(DocumentRange range, string severityId);
    public virtual string get_Text();
    protected virtual string get_OpeningText();
    protected virtual string get_ClosingText();
}
public class JetBrains.ReSharper.Intentions.CSharp.DisableWarning.DisableByPragmaWarningAction : CSharpDisableWarningActionBase {
    [NotNullAttribute]
private IList`1<string> myCompilerIds;
    public static string PragmaWarningDisable;
    public static string PragmaWarningRestore;
    public string Text { get; }
    protected string OpeningText { get; }
    [NotNullAttribute]
protected string ClosingText { get; }
    public DisableByPragmaWarningAction(DocumentRange range, IList`1<string> compilerIds, string severityId);
    [NotNullAttribute]
public static string BuildIds(IList`1<string> compilerIds);
    [NotNullAttribute]
public static string BuildDescription(IList`1<string> compilerIds);
    public virtual string get_Text();
    protected virtual string get_OpeningText();
    protected virtual string get_ClosingText();
}
public class JetBrains.ReSharper.Intentions.CSharp.DisableWarning.DisableBySuppressMessageAttributeAction : object {
    [NotNullAttribute]
private IAttributesOwnerDeclaration myAttributesOwnerDeclaration;
    [NotNullAttribute]
private ITypeElement mySuppressAttributeType;
    [NotNullAttribute]
private string mySeverityId;
    private bool myShouldPresentName;
    private string myCategory;
    private string myMessageId;
    public string Text { get; }
    private DisableBySuppressMessageAttributeAction(IAttributesOwnerDeclaration attributesOwnerDeclaration, string severityId, ITypeElement suppressAttributeType, bool shouldPresentName, string category, string messageId);
    public sealed virtual string get_Text();
    public sealed virtual void Execute(ISolution solution, ITextControl textControl);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.CSharp.DisableWarning.DisableBySuppressMessageAttributeAction/<CreateActions>d__10")]
[NotNullAttribute]
public static IEnumerable`1<IBulbAction> CreateActions(ITreeNode context, string severityId, string category, string messageId);
}
public static class JetBrains.ReSharper.Intentions.CSharp.DisableWarning.DisableBySuppressMessageHelper : object {
    [NotNullAttribute]
public static IClrTypeName SuppressMessageAttributeFqn;
    private static DisableBySuppressMessageHelper();
    public static void AppendAttribute(CSharpElementFactory factory, IAttributesOwnerDeclaration attributesOwner, IAttribute attribute);
    [NotNullAttribute]
public static IAttribute CreateSuppressAttribute(CSharpElementFactory factory, ITypeElement suppressAttributeType, string checkId, string category, string messageId);
    [CanBeNullAttribute]
public static ITypeElement FindSuppressMessageAttribute(ITreeNode context);
    private static bool IsSimpleStringParameter(IParameter parameter);
}
public abstract class JetBrains.ReSharper.Intentions.CSharp.DisableWarning.DisableInFileActionBase : object {
    [NotNullAttribute]
private ICSharpFile myFile;
    private DocumentRange myRange;
    public string Text { get; }
    [NotNullAttribute]
protected string SuppressionText { get; }
    protected DisableInFileActionBase(DocumentRange range, ICSharpFile file);
    public abstract virtual string get_Text();
    protected abstract virtual string get_SuppressionText();
    public sealed virtual void Execute(ISolution solution, ITextControl textControl);
    private DocumentOffset FindCommentDocumentInsertOffset();
}
internal class JetBrains.ReSharper.Intentions.CSharp.DisableWarning.DisableInFileByCommentWarningAction : DisableInFileActionBase {
    [NotNullAttribute]
private string mySeverityId;
    private bool mySuppressAll;
    public string Text { get; }
    protected string SuppressionText { get; }
    public DisableInFileByCommentWarningAction(DocumentRange range, string severityId, ICSharpFile file);
    public virtual string get_Text();
    protected virtual string get_SuppressionText();
}
public class JetBrains.ReSharper.Intentions.CSharp.DisableWarning.DisableInFileByPragmaWarningAction : DisableInFileActionBase {
    [NotNullAttribute]
private IList`1<string> myCompilerIds;
    public string Text { get; }
    protected string SuppressionText { get; }
    public DisableInFileByPragmaWarningAction(DocumentRange range, ICSharpFile file, IList`1<string> compilerIds);
    public virtual string get_Text();
    protected virtual string get_SuppressionText();
}
public class JetBrains.ReSharper.Intentions.CSharp.DisableWarning.DisableOnceByCommentWarningAction : CSharpDisableWarningActionBase {
    public string Text { get; }
    protected string OpeningText { get; }
    protected string ClosingText { get; }
    public DisableOnceByCommentWarningAction(DocumentRange range, string severityId);
    public virtual string get_Text();
    protected virtual string get_OpeningText();
    protected virtual string get_ClosingText();
}
[CustomHighlightingActionProviderAttribute("JetBrains.ProjectModel.CSharpProjectFileType")]
public class JetBrains.ReSharper.Intentions.CSharp.DisableWarning.DisableWarningActionProvider : object {
    [NotNullAttribute]
private HighlightingSettingsManager mySettingsManager;
    public DisableWarningActionProvider(HighlightingSettingsManager settingsManager);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.CSharp.DisableWarning.DisableWarningActionProvider/<GetActions>d__2")]
public sealed virtual IEnumerable`1<IntentionAction> GetActions(IHighlighting highlighting, DocumentRange range, IPsiSourceFile sourceFile, IAnchor configureAnchor);
    [CompilerGeneratedAttribute]
internal static void <GetActions>g__AdjustRange|2_0(DocumentRange& range, DocumentRange secondaryRange);
}
[CustomHighlightingActionProviderAttribute("JetBrains.ProjectModel.CSharpProjectFileType")]
internal class JetBrains.ReSharper.Intentions.CSharp.DisableWarning.DoNotTrustNullableAnnotationsFix : object {
    public string Text { get; }
    public sealed virtual string get_Text();
    public sealed virtual void Execute(ISolution solution, ITextControl textControl);
    public sealed virtual IEnumerable`1<IntentionAction> GetActions(IHighlighting highlighting, DocumentRange highlightingRange, IPsiSourceFile sourceFile, IAnchor configureAnchor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Intentions.CSharp.errorsQuickFixRegistration : object {
    public IEnumerable`1<Type> Dependencies { get; }
    public sealed virtual IEnumerable`1<Type> get_Dependencies();
    public sealed virtual void Register(IQuickFixesRegistrar table);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Intentions.CSharp.LanguageUsageCodeCleanupRegistration : object {
    public sealed virtual void Register(IHighlightingCleanupItemsRegistrar registrar);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Intentions.CSharp.LanguageUsageQuickFixRegistration : object {
    public IEnumerable`1<Type> Dependencies { get; }
    public sealed virtual IEnumerable`1<Type> get_Dependencies();
    public sealed virtual void Register(IQuickFixesRegistrar table);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.<ChangeAllRenameWorkflowProvider>F5FAD20A0D4B78CFE0B9B1E53EA9C07D235DF5CE1C701A5D2C48FFB69A3E66838__ChangeAllRefactoringWorkflow : RefactoringWorkflowBase {
    [CompilerGeneratedAttribute]
private IBulbAction <quickFix>P;
    [CompilerGeneratedAttribute]
private ITextControl <textControl>P;
    public HelpId HelpKeyword { get; }
    [NullableAttribute("2")]
public IConflictSearcher ConflictSearcher { get; }
    [NullableAttribute("2")]
public IRefactoringPage FirstPendingRefactoringPage { get; }
    public bool MightModifyManyDocuments { get; }
    public bool HasUI { get; }
    public string Title { get; }
    [NullableAttribute("2")]
public IconId Icon { get; }
    public string ActionId { get; }
    public RefactoringActionGroup ActionGroup { get; }
    public <ChangeAllRenameWorkflowProvider>F5FAD20A0D4B78CFE0B9B1E53EA9C07D235DF5CE1C701A5D2C48FFB69A3E66838__ChangeAllRefactoringWorkflow(IBulbAction quickFix, ISolution solution, ITextControl textControl);
    public virtual HelpId get_HelpKeyword();
    [NullableContextAttribute("2")]
public virtual IConflictSearcher get_ConflictSearcher();
    [NullableContextAttribute("2")]
public virtual IRefactoringPage get_FirstPendingRefactoringPage();
    public virtual bool get_MightModifyManyDocuments();
    public virtual bool PreExecute(IProgressIndicator progressIndicator);
    public virtual bool get_HasUI();
    public virtual string get_Title();
    [NullableContextAttribute("2")]
public virtual IconId get_Icon();
    public virtual string get_ActionId();
    public virtual RefactoringActionGroup get_ActionGroup();
    public virtual bool Execute(IProgressIndicator progressIndicator);
    public virtual bool PostExecute(IProgressIndicator pi);
    public virtual bool IsAvailable(IDataContext context);
    public virtual bool Initialize(IDataContext context);
    public virtual void SuccessfulFinish(IProgressIndicator pi);
}
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.<CreatePrimaryParameterFromUsageActionProvider>F77D6DE0FC7C35D800F3CE833F2AEFC213A01F97C613A7546E1DCDFB31245AF1E__CreatePrimaryParameterFromUsageBulbAction : CreateParameterFromUsageBulbAction {
    public string Text { get; }
    public <CreatePrimaryParameterFromUsageActionProvider>F77D6DE0FC7C35D800F3CE833F2AEFC213A01F97C613A7546E1DCDFB31245AF1E__CreatePrimaryParameterFromUsageBulbAction(IReference reference, IParametersOwner parametersOwner);
    public virtual string get_Text();
    protected virtual ICSharpTreeNode GetScopeForTypeConstraints(IReferenceExpression referenceExpression);
}
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.<CreatePrimaryParameterFromUsageAndPullActionProvider>F1910C84BCA660753AAFB4F1591D4C590C35B3F479D6A6FCECF73F2156CAC481D__CreatePrimaryParameterFromUsageAndPullBulbAction : CreateParameterFromUsageAndPullBulbAction {
    public string Text { get; }
    public <CreatePrimaryParameterFromUsageAndPullActionProvider>F1910C84BCA660753AAFB4F1591D4C590C35B3F479D6A6FCECF73F2156CAC481D__CreatePrimaryParameterFromUsageAndPullBulbAction(IReference reference, IParametersOwner parametersOwner);
    public virtual string get_Text();
    protected virtual ICSharpTreeNode GetScopeForTypeConstraints(IReferenceExpression referenceExpression);
    protected virtual ICSharpDeclaration GetContainingFunctionDeclaration(IReferenceExpression referenceExpression);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.AccessRightsCalculatorCSharp : AccessRightsCalculator {
    protected virtual bool SuggestStaticForTypeMemberDeclaration(IReference reference);
    protected virtual ITypeMemberDeclaration GetSourceMemberDeclaration(ITreeNode sourceElement);
    public virtual bool CheckStaticContextQualifierIsStatic(ITypeElement qualifier);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.AddAddressOfFix : ModernQuickFixBase {
    private IUnsafeCodeFixedPointerDeclaration myFixedDeclaration;
    public string Text { get; }
    public AddAddressOfFix(NoInitializerInUsingFixedDeclarationError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.AddAllowsRefStructConstraintFix : AddConstraintFixBase {
    protected string ConstraintText { get; }
    public AddAllowsRefStructConstraintFix(ByRefLikeOrAllowsByRefLikeTypeInTypeArgumentError error);
    protected virtual string get_ConstraintText();
    [NullableContextAttribute("2")]
public virtual bool IsAvailable(ITypeParameter typeParameter);
    protected virtual void ProcessAddedConstraint(ITypeParameterConstraint constraint);
    protected virtual IEnumerable`1<ITypeParameterConstraint> AddConstraint(ITypeParameter typeParameter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.AddArgumentNamesFix : ModernQuickFixBase {
    private ICSharpArgument myNamedArgument;
    public string Text { get; }
    public AddArgumentNamesFix(NamedArgumentBeforePositionalError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [NullableContextAttribute("2")]
[PureAttribute]
private ICSharpArgument GetFirstPositionalArgument();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.AddAsEnumerableInvocationFix : ModernQuickFixBase {
    private IInvocationExpression myInvocationExpression;
    public string Text { get; }
    public AddAsEnumerableInvocationFix(PossibleUnintendedQueryableAsEnumerableWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.AddAttributeFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private IAttributesOwnerDeclaration myAttributesOwnerDeclaration;
    [NullableAttribute("2")]
private IClrTypeName myAttributeNameToAdd;
    public string Text { get; }
    public AddAttributeFix(OutRefParameterMissingInAttributeError error);
    public AddAttributeFix(ChainingToSetsRequiredMembersRequiresSetsRequiredMembersError error);
    public virtual string get_Text();
    private string GetAttributeName();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public static void Execute(IAttributesOwnerDeclaration attributesOwnerDeclaration, IClrTypeName attributeNameToAdd);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.AddAttributeToTypeElementFixBase : ModernQuickFixBase {
    [NullableAttribute("2")]
private IAttributesOwnerDeclaration myAttributesOwnerDeclaration;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public string Text { get; }
    protected AddAttributeToTypeElementFixBase(ITreeNode contextNode, string formattableText);
    [CompilerGeneratedAttribute]
public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private IDeclaredType CreateAttributeType(IAttributesOwnerDeclaration attributesOwnerDeclaration);
    protected abstract virtual string GetArgumentString();
    protected abstract virtual IClrTypeName GetAttributeTypeName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.AddAwaitFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private ICSharpExpression myExpression;
    [NullableAttribute("2")]
private IType myTargetType;
    public string Text { get; }
    public AddAwaitFix(AsyncMethodInvocationWithoutAwaitWarning error);
    public AddAwaitFix(IncorrectReturnTypeError error);
    public AddAwaitFix(IncorrectAssignmentTypeError error);
    public AddAwaitFix(IncorrectInitializerTypeError error);
    public AddAwaitFix(DeclarationToInitializerTypeMismatchError error);
    public AddAwaitFix(IncorrectArgumentTypeError error);
    [NullableContextAttribute("2")]
private AddAwaitFix(TypeComparisonResultBase typeComparisonInfo, IExpression fallbackExpression, IType fallbackType);
    public virtual string get_Text();
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.AddBaseInitializerFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private ICSharpTypeMemberDeclaration myConstructorDeclaration;
    public string Text { get; }
    public AddBaseInitializerFix(ConstructorInitializerMissingError error);
    public AddBaseInitializerFix(NoDefaultConstructorInBaseClassError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.AddBlankLineFix : ModernQuickFixBase {
    [CompilerGeneratedAttribute]
private MisleadingBodyLikeStatementWarning <error>P;
    public string Text { get; }
    public AddBlankLineFix(MisleadingBodyLikeStatementWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.AddBodyFix : ModernQuickFixBase {
    [CompilerGeneratedAttribute]
private ICSharpDeclaration <declaration>P;
    protected IDeclaredElement DeclaredElement { get; }
    protected AddBodyFix(ICSharpDeclaration declaration);
    protected IDeclaredElement get_DeclaredElement();
    [NullableContextAttribute("1")]
public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("1")]
protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.AddBracesFix : ModernQuickFixBase {
    private IAssignmentExpression myExpression;
    public string Text { get; }
    public AddBracesFix(CollectionInitializerElementIsAssignmentError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.AddBreakFix : ModernQuickFixBase {
    private ISwitchSection mySwitchSection;
    public string Text { get; }
    public AddBreakFix(BreakStatementMissingError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.AddCaseLabelFix : ModernQuickFixBase {
    private ISwitchStatement mySwitchStatement;
    public string Text { get; }
    public AddCaseLabelFix(CaseLabelIsMissingError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.AddCatchFix : ModernQuickFixBase {
    private ITryStatement myTryStatement;
    public string Text { get; }
    public AddCatchFix(ExpectedCatchOrFinallyError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.AddClassConstraintFix : AddConstraintFixBase {
    private bool myOverwriteValueTypeConstraints;
    private bool myAddConstraintToImmediateMember;
    protected string ConstraintText { get; }
    public AddClassConstraintFix(TypeArgumentIsNotReferenceTypeError error);
    public AddClassConstraintFix(CompareNonConstrainedGenericWithNullWarning error);
    public AddClassConstraintFix(NullableUnderlyingTypeIsTypeParameterOfOverridingMethodWithoutConstraintError error);
    public AddClassConstraintFix(ClassTypeParameterInValueTypeParameterConstraintListError error);
    public AddClassConstraintFix(PossibleStructMemberModificationOfNonVariableStructWarning error);
    public AddClassConstraintFix(AssignNullToTypeParameterWithoutClassConstraintError error);
    public AddClassConstraintFix(InitializeTypeParameterWithoutClassConstraintWithNullError error);
    public AddClassConstraintFix(AsOperatorWithUnconstrainedTypeParameterError error);
    public AddClassConstraintFix(OverrideReferenceTypeConstraintNotSatisfiedError error);
    protected virtual string get_ConstraintText();
    [NullableContextAttribute("2")]
public virtual bool IsAvailable(ITypeParameter typeParameter);
    [NullableContextAttribute("2")]
public virtual ITypeParameter GetTargetTypeParameter(ITypeParameter originalTypeParameter);
    protected virtual void ProcessAddedConstraint(ITypeParameterConstraint constraint);
    protected virtual IEnumerable`1<ITypeParameterConstraint> AddConstraint(ITypeParameter typeParameter);
    private static IType GetParamType(string side, IBinaryExpression expression);
    [NullableContextAttribute("2")]
private static ITypeParameter GetTypeConstraint(IConditionalAccessExpression accessExpression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.AddConstraintFixBase : ModernQuickFixBase {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ITypeParameter <parameter>P;
    [NullableAttribute("2")]
private ITypeParameter myTargetTypeParameter;
    public string Text { get; }
    protected string ConstraintText { get; }
    [NullableContextAttribute("2")]
protected AddConstraintFixBase(ITypeParameter parameter);
    [NullableContextAttribute("2")]
protected AddConstraintFixBase(IType argumentType);
    public virtual string get_Text();
    protected abstract virtual string get_ConstraintText();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
[ContractAnnotationAttribute("null => false")]
public virtual bool IsAvailable(ITypeParameter typeParameter);
    [NullableContextAttribute("2")]
protected ITypeParameter GetTargetTypeParameter();
    [NullableContextAttribute("2")]
public virtual ITypeParameter GetTargetTypeParameter(ITypeParameter originalTypeParameter);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private IEnumerable`1<ITypeParameterConstraint> AddConstraint();
    protected abstract virtual IEnumerable`1<ITypeParameterConstraint> AddConstraint(ITypeParameter typeParameter);
    protected abstract virtual void ProcessAddedConstraint(ITypeParameterConstraint constraint);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.AddCrefFix : QuickFixBase {
    [CompilerGeneratedAttribute]
private IXmlTag <inheritdocTag>P;
    public string Text { get; }
    public AddCrefFix(IXmlTag inheritdocTag);
    public AddCrefFix(InheritdocInvalidUsageWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.AddDefaultConstraintFix : AddConstraintFixBase {
    private ITypeUsage myContextNode;
    protected string ConstraintText { get; }
    public AddDefaultConstraintFix(NullableUnderlyingTypeIsTypeParameterOfOverridingMethodWithoutConstraintError error);
    protected virtual string get_ConstraintText();
    [NullableContextAttribute("2")]
public virtual ITypeParameter GetTargetTypeParameter(ITypeParameter originalTypeParameter);
    [NullableContextAttribute("2")]
public virtual bool IsAvailable(ITypeParameter typeParameter);
    protected virtual void ProcessAddedConstraint(ITypeParameterConstraint constraint);
    protected virtual IEnumerable`1<ITypeParameterConstraint> AddConstraint(ITypeParameter typeParameter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.AddDiscardSyntaxFix : ModernQuickFixBase {
    private IPattern myPatternToFix;
    public string Text { get; }
    public AddDiscardSyntaxFix(DeconstructionSingleSubpatternError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.AddDocCommentFix : QuickFixBase {
    protected static string DocCommentPrefix;
    [NullableAttribute("2")]
protected ICSharpDeclaration myDeclaration;
    protected bool myCanHaveExistingXmlDoc;
    public string Text { get; }
    private bool IsParameterDeclaration { get; }
    public AddDocCommentFix(PublicOrProtectedMemberNotDocumentedWarning error);
    public AddDocCommentFix(InternalOrPrivateMemberNotDocumentedWarning error);
    public AddDocCommentFix(ParameterNotDocumentedWarning error);
    public AddDocCommentFix(TypeParameterNotDocumentedWarning error);
    [NullableContextAttribute("2")]
public AddDocCommentFix(ICSharpDeclaration declaration, bool canHaveExistingXmlDoc);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    private bool get_IsParameterDeclaration();
    private IDocCommentBlockOwner FindOwner(IDeclaration declaration);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.AddEnumeratorCancellationAttributeFix : ModernQuickFixBase {
    private static IClrTypeName ourEnumeratorCancellationAttributeName;
    private IParameterDeclaration myParameterDeclaration;
    public string Text { get; }
    public AddEnumeratorCancellationAttributeFix(CancellationTokenParameterWithoutAttributeWarning warning);
    private static AddEnumeratorCancellationAttributeFix();
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.AddEventAccessorFix : AddSecondAccessorFixBase {
    private CSharpAccessorKind myAccessorKind;
    public CSharpAccessorKind AccessorKind { get; }
    public AddEventAccessorFix(EventMustDeclareAdderAndRemoverError error);
    public AddEventAccessorFix(ExplicitEventImplementationMustDeclareAccessorsError error);
    public virtual bool IsAvailable(IUserDataHolder cache);
    public virtual CSharpAccessorKind get_AccessorKind();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.AddExceptionFix : ModernQuickFixBase {
    private IThrowStatement myThrowStatement;
    public string Text { get; }
    public AddExceptionFix(ThrowInsideFinallyAndCatchError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [NullableContextAttribute("2")]
private ISpecificCatchClause GetCatchClause();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.AddExperimentalAttributeFix : AddAttributeToTypeElementFixBase {
    [CompilerGeneratedAttribute]
private ExperimentalElementWarning <warning>P;
    public AddExperimentalAttributeFix(ExperimentalElementWarning warning);
    protected virtual string GetArgumentString();
    protected virtual IClrTypeName GetAttributeTypeName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.AddFinallyFix : ModernQuickFixBase {
    private ITryStatement myTryStatement;
    public string Text { get; }
    public AddFinallyFix(ExpectedCatchOrFinallyError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.AddGetAccessorFix : AddSecondAccessorFixBase {
    public CSharpAccessorKind AccessorKind { get; }
    public AddGetAccessorFix(ReadAccessToPropertyWithoutGetterError error);
    public AddGetAccessorFix(AccessorIsMissingInImplementationError error);
    public AddGetAccessorFix(AccessorMissingError error);
    public AddGetAccessorFix(AbstractAccessorIsNotImplementedError error);
    public AddGetAccessorFix(CannotOverrideNonExistingAccessorError error);
    public AddGetAccessorFix(AddedAccessorInPrivateImplementationError error);
    public AddGetAccessorFix(AccessRightsInSingleAccessorError error);
    public AddGetAccessorFix(NotReadablePropertyInMemberInitializerError error);
    public AddGetAccessorFix(NotVariableAsNamedAttributeArgumentError error);
    public AddGetAccessorFix(InvalidMemberInSubpatternError error);
    public AddGetAccessorFix(RefReturningPropertyDoesNotHaveGetterError error);
    public virtual bool IsAvailable(IUserDataHolder cache);
    public virtual CSharpAccessorKind get_AccessorKind();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.AddGetSetAccessorsFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private IAccessorOwnerDeclaration myDeclaration;
    public string Text { get; }
    public AddGetSetAccessorsFix(AccessorMissingError error);
    [NullableContextAttribute("2")]
private AddGetSetAccessorsFix(IDeclaredElement declaredElement);
    public AddGetSetAccessorsFix(NotVariableAsNamedAttributeArgumentError error);
    public AddGetSetAccessorsFix(WriteAccessToPropertyWithoutSetterError error);
    public AddGetSetAccessorsFix(ReadAccessToPropertyWithoutGetterError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.AddGuidAttributeFix : ModernQuickFixBase {
    private IAttribute myComImportAttribute;
    private ICSharpTypeDeclaration myTypeDeclaration;
    public string Text { get; }
    public AddGuidAttributeFix(ComImportWithoutGuidError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [NullableContextAttribute("2")]
private ITypeElement GetGuidAttributeTypeElement();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.AddImplementationFix : WorkflowDrivenImplementMembersFix`1<GenerateImplementationsWorkflow> {
    private HashSet`1<TypeMemberInstance> myTypeMemberInstances;
    public string Text { get; }
    public AddImplementationFix(MostSpecificImplementationError error);
    public virtual string get_Text();
    [NullableContextAttribute("2")]
protected virtual GenerateImplementationsWorkflow TryCreateWorkflow();
    protected virtual void ConfigureContext(IGeneratorContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.AddInheritdocFix : AddDocCommentFix {
    public string Text { get; }
    [NullableContextAttribute("2")]
public AddInheritdocFix(ICSharpDeclaration declaration, bool canHaveExistingXmlDoc);
    public AddInheritdocFix(PublicOrProtectedMemberNotDocumentedWarning error);
    public AddInheritdocFix(InheritdocConsiderUsageWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.AddInitAccessorFix : AddSecondAccessorFixBase {
    public CSharpAccessorKind AccessorKind { get; }
    public AddInitAccessorFix(WriteAccessToPropertyWithoutSetterError error);
    public AddInitAccessorFix(RequiredMemberMustBeSettableError error);
    public AddInitAccessorFix(AccessorIsMissingInImplementationError error);
    public AddInitAccessorFix(AbstractAccessorIsNotImplementedError error);
    public AddInitAccessorFix(CannotOverrideNonExistingAccessorError error);
    public AddInitAccessorFix(AddedAccessorInPrivateImplementationError error);
    public AddInitAccessorFix(NotWritablePropertyInMemberInitializerError error);
    public AddInitAccessorFix(NotVariableAsNamedAttributeArgumentError error);
    public AddInitAccessorFix(AutoPropertyMustOverrideAllAccessorsError error);
    [PureAttribute]
private static bool IsUsageFromInitAccessor(IReference reference);
    public virtual CSharpAccessorKind get_AccessorKind();
    public virtual bool IsAvailable(IUserDataHolder cache);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.AddMissingParenthesesFix : ModernScopedQuickFixBase {
    private IBinaryExpression myBinaryExpression;
    private IMissingParenthesesCodeStyleSuggestion myMissingParenthesesCodeStyleSuggestion;
    public string Text { get; }
    public string ScopedText { get; }
    public bool IsReanalysisRequired { get; }
    public AddMissingParenthesesFix(AddMissingParenthesesWarning addMissingParenthesesWarning);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool get_IsReanalysisRequired();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.AddNewConstraintFix : AddConstraintFixBase {
    protected string ConstraintText { get; }
    public AddNewConstraintFix(CannotCreateInstanceOfTypeParameterWithoutNewConstraintError error);
    public AddNewConstraintFix(TypeArgumentHasNoDefaultConstructorError error);
    protected virtual string get_ConstraintText();
    [NullableContextAttribute("2")]
public virtual bool IsAvailable(ITypeParameter typeParameter);
    protected virtual void ProcessAddedConstraint(ITypeParameterConstraint constraint);
    protected virtual IEnumerable`1<ITypeParameterConstraint> AddConstraint(ITypeParameter typeParameter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.AddNotNullConstraintFix : AddConstraintFixBase {
    protected string ConstraintText { get; }
    public AddNotNullConstraintFix(NullabilityMismatchInTypeParameterNotNullConstraintWarning warning);
    protected virtual string get_ConstraintText();
    [NullableContextAttribute("2")]
public virtual bool IsAvailable(ITypeParameter typeParameter);
    protected virtual IEnumerable`1<ITypeParameterConstraint> AddConstraint(ITypeParameter typeParameter);
    protected virtual void ProcessAddedConstraint(ITypeParameterConstraint constraint);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.AddObsoleteAttributeFix : AddAttributeToTypeElementFixBase {
    public AddObsoleteAttributeFix(ITreeNode contextNode);
    protected virtual string GetArgumentString();
    protected virtual IClrTypeName GetAttributeTypeName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.AddOperationContractAttributesFix : ModernQuickFixBase {
    public static Key InstanceKey;
    [NullableAttribute("2")]
private IInterfaceDeclaration myInterfaceDeclaration;
    public string Text { get; }
    public AddOperationContractAttributesFix(ServiceContractWithoutOperationsWarning error);
    private static AddOperationContractAttributesFix();
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.AddParameterFix : AddParameterFixBase {
    public AddParameterFix(IncorrectArgumentNumberError error);
    public AddParameterFix(IncorrectArgumentsError error);
    public AddParameterFix(IncorrectArgumentTypeError error);
    public AddParameterFix(MultipleResolveCandidatesError error);
    public AddParameterFix(NamedArgumentListDoesnotMatchParametersError error);
    public AddParameterFix(DuplicateParametersError error);
    public AddParameterFix(NotResolvedError error);
    [NullableContextAttribute("2")]
protected virtual IInvocationInfo GetInvocation();
    protected virtual bool RemoveArgument(IInvocationInfo info, IArgumentInfo argumentInfo);
    protected virtual IInvocationInfo MakeArgumentsOwnerCopy(IInvocationInfo info);
    protected virtual ParameterKind ParameterKindFromArgument(IArgumentInfo argument);
    protected virtual ITreeNode GetArgumentNode(IArgumentInfo argumentInfo);
    protected virtual IParameter FindMatchingParameter(IArgumentInfo argumentInfo, IArgumentInfo removedArgumentInfo, IParametersOwner targetParametersOwner);
    protected virtual string GetNamedArgumentName(IArgumentInfo argumentInfo);
    protected virtual bool ParametersOwnerIsSuitableToAddParameter(IParametersOwner parametersOwner, IInvocationInfo argumentsOwner);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.AddParams2Fix : ModernQuickFixBase {
    private ITypeMemberRegularParameterDeclaration myParameterDeclaration;
    public string Text { get; }
    public AddParams2Fix(BaseMemberHasParamsWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.AddParamsFix : ModernQuickFixBase {
    private IParametersOwner myMember;
    private IParameter myParameter;
    public string Text { get; }
    public AddParamsFix(NotImplementParamsDiffersError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.AddParenthesesAroundBitwiseOperatorFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private IBinaryExpression myBitwiseExpression;
    [NullableAttribute("2")]
private IBinaryExpression myComparisonExpression;
    public string Text { get; }
    public AddParenthesesAroundBitwiseOperatorFix(CannotApplyBinaryOperatorError error);
    public AddParenthesesAroundBitwiseOperatorFix(CannotApplyBinaryOperatorMultipleCandidatesError error);
    [NullableContextAttribute("2")]
private AddParenthesesAroundBitwiseOperatorFix(IBinaryExpression expression);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal static IBinaryExpression <.ctor>g__AsComparisonExpression|4_0(ICSharpExpression expression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.AddPropertyPatternNameFix : ModernQuickFixBase {
    private ISubpattern mySubpattern;
    public string Text { get; }
    public AddPropertyPatternNameFix(PropertySubpatternMemberNameMissingError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.FillObjectInitializerAction")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.AddRequiredMembersInitializersFix : ModernScopedQuickFixBase {
    private IObjectCreationExpression myObjectCreationExpression;
    private TypeMemberInstance[] myUninitializedRequiredMembers;
    public string Text { get; }
    public string ScopedText { get; }
    public AddRequiredMembersInitializersFix(RequiredMemberMustBeSetError error);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static IObjectInitializer EnsureHasInitializer(IObjectCreationExpression objectCreationExpression, CSharpElementFactory elementFactory);
    private ISet`1<ITypeMember> TryUseExistingAssignments();
    protected virtual ITreeNode TryGetContextTreeNode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.AddReturnFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private ICSharpDeclaration myDeclaration;
    [NullableAttribute("2")]
private IStatementsOwner myBody;
    public string Text { get; }
    public AddReturnFix(MissingReturnStatementError error);
    public AddReturnFix(MissingReturnStatementInAccessorError error);
    public AddReturnFix(MissingReturnStatementInAnonymousFunctionError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.AddSecondAccessorAction")]
public abstract class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.AddSecondAccessorFixBase : ModernScopedQuickFixBase {
    [CompilerGeneratedAttribute]
private AccessorPrefix <accessorPrefix>P;
    [NullableAttribute("2")]
private ITypeMember myTypeMember;
    public string Text { get; }
    public string ScopedText { get; }
    [NullableAttribute("2")]
protected ITypeMember TypeMember { get; }
    public CSharpAccessorKind AccessorKind { get; }
    [NullableContextAttribute("2")]
protected AddSecondAccessorFixBase(IDeclaredElement accessorOwner, AccessorPrefix accessorPrefix);
    public sealed virtual string get_Text();
    public virtual string get_ScopedText();
    [NullableContextAttribute("2")]
protected ITypeMember get_TypeMember();
    [NullableContextAttribute("2")]
protected virtual ITreeNode TryGetContextTreeNode();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected sealed virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public abstract virtual CSharpAccessorKind get_AccessorKind();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.AddSemicolonFix : ModernQuickFixBase {
    private ILabelStatement myLabelStatement;
    public string Text { get; }
    public AddSemicolonFix(MissingSemicolonAfterLabelError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.AddServiceContractAttributeFix : ModernQuickFixBase {
    private ICSharpTypeDeclaration myTypeDeclaration;
    public string Text { get; }
    public AddServiceContractAttributeFix(OperationContractWithoutServiceContractWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.AddSetAccessorFix : AddSecondAccessorFixBase {
    public CSharpAccessorKind AccessorKind { get; }
    public AddSetAccessorFix(AccessorMissingError error);
    public AddSetAccessorFix(WriteAccessToPropertyWithoutSetterError error);
    public AddSetAccessorFix(AccessorIsMissingInImplementationError error);
    public AddSetAccessorFix(AbstractAccessorIsNotImplementedError error);
    public AddSetAccessorFix(CannotOverrideNonExistingAccessorError error);
    public AddSetAccessorFix(AddedAccessorInPrivateImplementationError error);
    public AddSetAccessorFix(AccessRightsInSingleAccessorError error);
    public AddSetAccessorFix(NotWritablePropertyInMemberInitializerError error);
    public AddSetAccessorFix(NotVariableAsNamedAttributeArgumentError error);
    public AddSetAccessorFix(AutoPropertyMustOverrideAllAccessorsError error);
    public AddSetAccessorFix(ReadonlyAccessorInMemberWithSingleAccessorError error);
    public AddSetAccessorFix(RequiredMemberMustBeSettableError error);
    public virtual bool IsAvailable(IUserDataHolder cache);
    public virtual CSharpAccessorKind get_AccessorKind();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.AddStatementBodyFix : AddBodyFix {
    public string Text { get; }
    public AddStatementBodyFix(NonExternOperatorWithoutBodyError error);
    public AddStatementBodyFix(ConstructorMustHaveBodyError error);
    public AddStatementBodyFix(DestructorMustHaveBodyError error);
    public AddStatementBodyFix(NonabstractMethodWithoutBodyError error);
    public AddStatementBodyFix(NonAbstractAccessorWithoutBodyError error);
    public AddStatementBodyFix(NonAbstractAccessorWithoutBodyInInterfaceError error);
    public AddStatementBodyFix(LocalFunctionWithoutBodyError error);
    public AddStatementBodyFix(SealedPrivateMethodWithoutBodyError error);
    public AddStatementBodyFix(SealedPrivateMemberWithoutBodyError error);
    public AddStatementBodyFix(NonabstractMemberWithoutBodyError error);
    public virtual string get_Text();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.AddStructConstraintFix : AddConstraintFixBase {
    protected string ConstraintText { get; }
    public AddStructConstraintFix(TypeArgumentIsNotValueTypeError error);
    public AddStructConstraintFix(OverrideValueTypeConstraintNotSatisfiedError error);
    protected virtual string get_ConstraintText();
    [NullableContextAttribute("2")]
public virtual bool IsAvailable(ITypeParameter typeParameter);
    protected virtual void ProcessAddedConstraint(ITypeParameterConstraint constraint);
    protected virtual IEnumerable`1<ITypeParameterConstraint> AddConstraint(ITypeParameter typeParameter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.AddSwitchSectionBracesFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private ISwitchSection mySwitchSection;
    public string Text { get; }
    public AddSwitchSectionBracesFix(UsingDeclarationInSwitchSectionError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.AddThisInitializerFix : ModernQuickFixBase {
    private IConstructorDeclaration myConstructorDeclaration;
    public string Text { get; }
    public AddThisInitializerFix(ConstructorInitializerMissingError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static bool CheckDelegatesTo(IConstructor thisConstructor, IConstructor constructor, HashSet`1<IConstructor> visited);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.AddToInterfaceFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private IInterfaceQualificationOwner myDeclaration;
    private IDeclaredType myDeclaredType;
    public string Text { get; }
    public AddToInterfaceFix(ExplicitImplementationIsNotInterfaceMemberError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [PureAttribute]
private bool HasClashesWithExistingMembers(IInterface interfaceType, ITypeMember declaredElement);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.AddTypeArgListFix : ModernQuickFixBase {
    private IReference myReference;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IList`1<IDeclaredElement> myCandidates;
    public string Text { get; }
    private AddTypeArgListFix(IReference reference, IList`1<IDeclaredElement> candidates);
    public AddTypeArgListFix(TypeParametersNumberMismatchError error);
    public AddTypeArgListFix(TypeParametersNumberMismatchMultipleCandidatesError error);
    public AddTypeArgListFix(TypeInferenceMultipleCandidatesError error);
    public AddTypeArgListFix(TypeInferenceError error);
    private static IList`1<IDeclaredElement> GetCandidates(IReference reference);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.AddTypeConstraintFix : AddConstraintFixBase {
    private IType myConstraintType;
    protected string ConstraintText { get; }
    public AddTypeConstraintFix(TypeArgumentIsNotConvertibleToConstraintError error);
    protected virtual string get_ConstraintText();
    [NullableContextAttribute("2")]
public virtual bool IsAvailable(ITypeParameter typeParameter);
    protected virtual void ProcessAddedConstraint(ITypeParameterConstraint constraint);
    protected virtual IEnumerable`1<ITypeParameterConstraint> AddConstraint(ITypeParameter typeParameter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.AddUnmanagedConstraintFix : AddConstraintFixBase {
    protected string ConstraintText { get; }
    public AddUnmanagedConstraintFix(TypeArgumentIsNotUnmanagedTypeError error);
    public AddUnmanagedConstraintFix(StackAllocManagedTypeError error);
    public AddUnmanagedConstraintFix(AddressOfManagedTypeWarning error);
    protected virtual string get_ConstraintText();
    [NullableContextAttribute("2")]
public virtual bool IsAvailable(ITypeParameter typeParameter);
    protected virtual void ProcessAddedConstraint(ITypeParameterConstraint constraint);
    protected virtual IEnumerable`1<ITypeParameterConstraint> AddConstraint(ITypeParameter typeParameter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.AllowNullableTypesInTypeParameterFix : ModernQuickFixBase {
    private static Key`1<ITypeParameter> ourKey;
    private ITypeParameter myTypeParameter;
    [NullableAttribute("2")]
private IType myConstraintType;
    public string Text { get; }
    public AllowNullableTypesInTypeParameterFix(NullabilityMismatchInTypeParameterNotNullConstraintWarning warning);
    public AllowNullableTypesInTypeParameterFix(NullabilityMismatchInTypeParameterReferenceTypeConstraintWarning warning);
    public AllowNullableTypesInTypeParameterFix(NullabilityMismatchInTypeParameterConstraintTypeWarning warning);
    private static AllowNullableTypesInTypeParameterFix();
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.AllowUnsafeCodeFix : QuickFixBase {
    [NullableAttribute("2")]
private ITreeNode myTreeNode;
    public string Text { get; }
    [NullableContextAttribute("2")]
private AllowUnsafeCodeFix(ITreeNode treeNode);
    public AllowUnsafeCodeFix(UnsafeStatementNotAllowedError error);
    public AllowUnsafeCodeFix(UnsafeConstructInSafeContextError error);
    public AllowUnsafeCodeFix(PointerInSafeContextError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.AnnotateConstrainingTypesAsNullableFix : ModernQuickFixBase {
    private ITypeParameter myTypeParameter;
    public string Text { get; }
    public AnnotateConstrainingTypesAsNullableFix(RedundantNullableAnnotationOnTypeConstraintHasNonNullableBaseTypeWarning warning);
    public AnnotateConstrainingTypesAsNullableFix(RedundantNullableAnnotationOnReferenceTypeConstraintWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.CSharp.QuickFixes.AnnotateConstrainingTypesAsNullableFix/<EnumerateTypeConstraints>d__7")]
private IEnumerable`1<ITypeConstraint> EnumerateTypeConstraints();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.AnnotateWithAutoStructLayoutFix : ModernQuickFixBase {
    private IClassLikeDeclaration myStructDeclaration;
    public string Text { get; }
    public AnnotateWithAutoStructLayoutFix(SequentialStructNoDefinedOrderingWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.AnnotateWithFieldOffsetFix : ModernQuickFixBase {
    private IAttributesOwnerDeclaration myMemberDeclaration;
    public string Text { get; }
    public AnnotateWithFieldOffsetFix(FieldOffsetAttributeMissingError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.LambdaExpressionToLocalFunctionAction")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.AnonymousMethodToLocalFunctionAction")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.AnonymousFunctionToLocalFunctionFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private IAnonymousFunctionExpression myAnonymousFunction;
    public string Text { get; }
    public AnonymousFunctionToLocalFunctionFix(ConvertToLocalFunctionWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.AnonymousMethodToLambdaExpressionAction")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.AnonymousMethodToLambdaExpressionFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private IAnonymousMethodExpression myAnonymousMethod;
    public string Text { get; }
    public AnonymousMethodToLambdaExpressionFix(ConvertToLambdaExpressionWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.AnyUninitializedMemberFinder : object {
    [CompilerGeneratedAttribute]
private bool <Found>k__BackingField;
    public bool Found { get; private set; }
    [CompilerGeneratedAttribute]
public bool get_Found();
    [CompilerGeneratedAttribute]
private void set_Found(bool value);
    public sealed virtual bool ProcessFieldDeclaration(IFieldDeclaration fieldDeclaration);
    public sealed virtual bool ProcessPropertyDeclaration(IPropertyDeclaration propertyDeclaration);
    public sealed virtual bool ProcessEventDeclaration(IEventDeclaration eventDeclaration);
    public void Reset();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.AppendThrowExpressionFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private ICSharpExpression myExpression;
    public string Text { get; }
    [NullableContextAttribute("2")]
private AppendThrowExpressionFix(ICSharpExpression expression);
    public AppendThrowExpressionFix(AssignNullToNotNullAttributeWarning warning);
    public AppendThrowExpressionFix(ConvertingNullableToNonNullableWarning warning);
    public AppendThrowExpressionFix(NullReferenceAssignmentWarning warning);
    public AppendThrowExpressionFix(UnboxPossibleNullWarning warning);
    public AppendThrowExpressionFix(NullReferenceReturnWarning warning);
    public AppendThrowExpressionFix(NullReferenceArgumentWarning warning);
    public AppendThrowExpressionFix(DisallowNullAttributeForbidsMaybeNullAssignmentWarning warning);
    public virtual string get_Text();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
    public static IBulbActionCommand AppendThrowExpression(ICSharpExpression target, ISolution solution);
    [PureAttribute]
private static IDeclaredElement TryGetReferencedParameter(ICSharpExpression expression);
    private static IBulbActionCommand ExecuteHotspotSession(INullCoalescingExpression nullCoalescingExpression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.AppendToPreviousOrderByClauseFix : ModernQuickFixBase {
    private IQueryOrderByClause myQueryOrderByClause;
    public string Text { get; }
    public AppendToPreviousOrderByClauseFix(MultipleOrderBy2Warning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveArgumentNameFix")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.AddArgumentNameContextAction")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.RemoveArgumentNameAction")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ArgumentStyleFix : ModernScopedNonIncrementalQuickFixBase {
    private ArgumentCodeStyleSuggestion mySuggestion;
    public string Text { get; }
    public string ScopedText { get; }
    public FileCollectorInfo FileCollectorInfo { get; }
    public bool IsReanalysisRequired { get; }
    private ArgumentStyleFix(ArgumentCodeStyleSuggestion codeStyleSuggestion);
    public ArgumentStyleFix(LiteralArgumentsStyleWarning codeStyleWarning);
    public ArgumentStyleFix(StringLiteralArgumentsStyleWarning codeStyleWarning);
    public ArgumentStyleFix(NamedExpressionArgumentsStyleWarning codeStyleWarning);
    public ArgumentStyleFix(AnonymousFunctionArgumentsStyleWarning codeStyleWarning);
    public ArgumentStyleFix(OtherArgumentsStyleWarning codeStyleWarning);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual FileCollectorInfo get_FileCollectorInfo();
    public virtual bool get_IsReanalysisRequired();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ArrangeAccessModifiersFix : ModernScopedQuickFixBase {
    private bool myIsModifierMissing;
    private bool myIsTypeMember;
    private IDefaultAccessModifiersCodeStyleSuggestion myCodeStyleSuggestion;
    public string Text { get; }
    public string ScopedText { get; }
    public bool IsReanalysisRequired { get; }
    public FileCollectorInfo FileCollectorInfo { get; }
    public ArrangeAccessModifiersFix(ArrangeTypeModifiersWarning arrangeTypeModifiersWarning);
    public ArrangeAccessModifiersFix(ArrangeTypeMemberModifiersWarning arrangeTypeMemberModifiersWarning);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool get_IsReanalysisRequired();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
protected virtual ITreeNode TryGetContextTreeNode();
    public virtual FileCollectorInfo get_FileCollectorInfo();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ArrangeAttributesFix : ModernScopedQuickFixBase {
    public static Key ArrangeAttributesFixKey;
    private IAttributesOwnerDeclaration myDeclaration;
    private IArrangeAttributesCodeStyleSuggestion myCodeStyleSuggestion;
    public string Text { get; }
    public string ScopedText { get; }
    public FileCollectorInfo FileCollectorInfo { get; }
    public bool IsReanalysisRequired { get; }
    public ArrangeAttributesFix(ArrangeAttributesWarning arrangeAttributesWarning);
    private static ArrangeAttributesFix();
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual FileCollectorInfo get_FileCollectorInfo();
    public virtual bool get_IsReanalysisRequired();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.RemoveBracesAction")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.AddBracesAction")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ArrangeBracesFix : ModernScopedQuickFixBase {
    private IBracesCodeStyleSuggestion myCodeStyleSuggestion;
    public string Text { get; }
    public string ScopedText { get; }
    public bool IsReanalysisRequired { get; }
    [NullableAttribute("2")]
public ITreeNode ReanalysisDependencyRoot { get; }
    private ArrangeBracesFix(IBracesCodeStyleSuggestion codeStyleSuggestion);
    public ArrangeBracesFix(EnforceIfElseStatementBracesWarning enforceIfElseStatementBracesWarning);
    public ArrangeBracesFix(EnforceForStatementBracesWarning enforceForStatementBracesWarning);
    public ArrangeBracesFix(EnforceForeachStatementBracesWarning enforceForeachStatementBracesWarning);
    public ArrangeBracesFix(EnforceWhileStatementBracesWarning enforceWhileStatementBracesWarning);
    public ArrangeBracesFix(EnforceDoWhileStatementBracesWarning enforceDoWhileStatementBracesWarning);
    public ArrangeBracesFix(EnforceUsingStatementBracesWarning enforceUsingStatementBracesWarning);
    public ArrangeBracesFix(EnforceLockStatementBracesWarning enforceLockStatementBracesWarning);
    public ArrangeBracesFix(EnforceFixedStatementBracesWarning enforceFixedStatementBracesWarning);
    public ArrangeBracesFix(RemoveRedundantBracesWarning removeRedundantBracesWarning);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool get_IsReanalysisRequired();
    [NullableContextAttribute("2")]
public virtual ITreeNode get_ReanalysisDependencyRoot();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.BodyStatementToExpressionAction")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.BodyExpressionToStatementAction")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ArrangeCodeBodyFix : ModernScopedQuickFixBase {
    private IDeclaration myDeclaration;
    private ICodeStyleSuggestion myCodeStyleSuggestion;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public string Text { get; }
    public string ScopedText { get; }
    public bool IsReanalysisRequired { get; }
    public FileCollectorInfo FileCollectorInfo { get; }
    public ArrangeCodeBodyFix(ArrangeMethodOrOperatorBodyWarning warning);
    public ArrangeCodeBodyFix(ArrangeLocalFunctionBodyWarning warning);
    public ArrangeCodeBodyFix(ArrangeConstructorOrDestructorBodyWarning warning);
    public ArrangeCodeBodyFix(ArrangeAccessorOwnerBodyWarning warning);
    public ArrangeCodeBodyFix(ArrangeAccessorBodyWarning warning);
    [CompilerGeneratedAttribute]
public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool get_IsReanalysisRequired();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ITreeNode TryGetContextTreeNode();
    public virtual FileCollectorInfo get_FileCollectorInfo();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [PureAttribute]
private static string GetTextFor(FunctionBodyFix fix);
    [PureAttribute]
private string GetTextFor(AccessorOwnerBodyFix fix);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ArrangeDefaultValueFix : ModernScopedQuickFixBase {
    private IDefaultValueStyleSuggestion myCodeStyleSuggestion;
    public string Text { get; }
    public string ScopedText { get; }
    [NullableAttribute("2")]
public ITreeNode ReanalysisDependencyRoot { get; }
    public FileCollectorInfo FileCollectorInfo { get; }
    public ArrangeDefaultValueFix(ArrangeDefaultValueWhenTypeEvidentWarning warning);
    public ArrangeDefaultValueFix(ArrangeDefaultValueWhenTypeNotEvidentWarning warning);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    [NullableContextAttribute("2")]
public virtual ITreeNode get_ReanalysisDependencyRoot();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ITreeNode TryGetContextTreeNode();
    public virtual FileCollectorInfo get_FileCollectorInfo();
    protected virtual IScopedFixingStrategy GetScopedFixingStrategy(ISolution solution, IHighlighting highlighting);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ArrangeInconsistentQualifierFix : ModernScopedQuickFixBase {
    private ICodeStyleSuggestion myCodeStyleSuggestion;
    private IReferenceExpression myExpression;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public string Text { get; }
    public string ScopedText { get; }
    public bool IsReanalysisRequired { get; }
    public ArrangeInconsistentQualifierFix(MissingThisQualifierWarning error);
    public ArrangeInconsistentQualifierFix(MissingStaticMemberQualifierWarning error);
    public ArrangeInconsistentQualifierFix(InconsistentStaticMemberQualifierWarning error);
    [CompilerGeneratedAttribute]
public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool get_IsReanalysisRequired();
    protected virtual ITreeNode TryGetContextTreeNode();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ArrangeModifiersOrderFix : ModernScopedQuickFixBase {
    private IModifiersOwnerDeclaration myModifiersOwnerDeclaration;
    private IModifiersOrderCodeStyleSuggestion myModifiersOrderCodeStyleSuggestion;
    public string Text { get; }
    public FileCollectorInfo FileCollectorInfo { get; }
    public bool IsReanalysisRequired { get; }
    public ArrangeModifiersOrderFix(ArrangeModifiersOrderWarning arrangeModifiersOrderWarning);
    public virtual string get_Text();
    public virtual FileCollectorInfo get_FileCollectorInfo();
    public virtual bool get_IsReanalysisRequired();
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.ConvertToFileScopedNamespaceAction")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.ConvertToBlockScopedNamespaceAction")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ArrangeNamespaceBodyFix : ModernScopedQuickFixBase {
    private INamespaceBodyStyleSuggestion myCodeStyleSuggestion;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ScopedText>k__BackingField;
    public string Text { get; }
    public string ScopedText { get; }
    public bool IsReanalysisRequired { get; }
    public FileCollectorInfo FileCollectorInfo { get; }
    public ArrangeNamespaceBodyFix(ArrangeNamespaceBodyWarning warning);
    [CompilerGeneratedAttribute]
public virtual string get_Text();
    [CompilerGeneratedAttribute]
public virtual string get_ScopedText();
    public virtual bool get_IsReanalysisRequired();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ITreeNode TryGetContextTreeNode();
    public virtual FileCollectorInfo get_FileCollectorInfo();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ArrangeNullCheckingPatternFix : ModernScopedQuickFixBase {
    private NullCheckingPatternStyleSuggestion myCodeStyleSuggestion;
    public string Text { get; }
    public string ScopedText { get; }
    public bool IsReanalysisRequired { get; }
    public ArrangeNullCheckingPatternFix(ArrangeNullCheckingPatternWarning warning);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool get_IsReanalysisRequired();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.UseTargetTypedNewAction")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.UseExplicitlyTypedNewAction")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ArrangeObjectCreationFix : ModernScopedQuickFixBase {
    private IObjectCreationStyleSuggestion myCodeStyleSuggestion;
    public string Text { get; }
    public string ScopedText { get; }
    [NullableAttribute("2")]
public ITreeNode ReanalysisDependencyRoot { get; }
    public FileCollectorInfo FileCollectorInfo { get; }
    public ArrangeObjectCreationFix(ArrangeObjectCreationWhenTypeEvidentWarning warning);
    public ArrangeObjectCreationFix(ArrangeObjectCreationWhenTypeNotEvidentWarning warning);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    [NullableContextAttribute("2")]
public virtual ITreeNode get_ReanalysisDependencyRoot();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ITreeNode TryGetContextTreeNode();
    public virtual FileCollectorInfo get_FileCollectorInfo();
    protected virtual IScopedFixingStrategy GetScopedFixingStrategy(ISolution solution, IHighlighting highlighting);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ArrangeRedundantQualifierFix : ModernScopedNonIncrementalQuickFixBase {
    private static Key`1<ArrangeRedundantQualifierFix> ourInstanceKey;
    private ITreeNode myQualifierOwner;
    [NullableAttribute("2")]
private ICodeStyleSuggestion myCodeStyleSuggestion;
    private string myText;
    public string Text { get; }
    public string ScopedText { get; }
    public bool IsReanalysisRequired { get; }
    public ArrangeRedundantQualifierFix(RedundantBaseQualifier_ChangeToThisWarning error);
    public ArrangeRedundantQualifierFix(RedundantBaseQualifier_ChangeToNoneWarning error);
    public ArrangeRedundantQualifierFix(RedundantThisQualifierWarning error);
    public ArrangeRedundantQualifierFix(RedundantStaticMemberQualifierWarning error);
    public ArrangeRedundantQualifierFix(RedundantQualifierWarning error);
    private static ArrangeRedundantQualifierFix();
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool get_IsReanalysisRequired();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private void Execute();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ArrangeTrailingCommaFix : ModernScopedQuickFixBase {
    private ITreeNode myInitializer;
    private ITrailingCommaSuggestion mySuggestion;
    public string Text { get; }
    public bool IsReanalysisRequired { get; }
    public ArrangeTrailingCommaFix(AddTrailingCommaInMultilineListsWarning warning);
    public ArrangeTrailingCommaFix(AddTrailingCommaInSinglelineListsWarning warning);
    public ArrangeTrailingCommaFix(RedundantTrailingCommaInMultilineListsWarning warning);
    public ArrangeTrailingCommaFix(RedundantTrailingCommaInSinglelineListsWarning warning);
    public virtual string get_Text();
    public virtual bool get_IsReanalysisRequired();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ArrayInitializerFixBase : ModernQuickFixBase {
    [NullableAttribute("2")]
protected IInitializerOwnerDeclaration InitializerOwner;
    [NullableContextAttribute("2")]
protected ArrayInitializerFixBase(IInitializerOwnerDeclaration initializerOwner);
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected static IType GuessType(IInitializerOwnerDeclaration initializerOwnerDeclaration, IArrayInitializer arrayInitializer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.AssertNotNullAction")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.AssertNotNullFix : ModernQuickFixBase {
    private static IAnchor ourAssertAnchor;
    public static InvisibleAnchor AssertAnchor;
    public static Key`1<object> AssertNotNullFixKey;
    [NullableAttribute("2")]
private IReferenceExpression myExpression;
    public string Text { get; }
    public AssertNotNullFix(PossibleNullReferenceExceptionWarning error);
    public AssertNotNullFix(AssignNullToNotNullAttributeWarning warning);
    public AssertNotNullFix(PossibleInvalidOperationExceptionWarning error);
    public AssertNotNullFix(NullReferenceReceiverWarning warning);
    public AssertNotNullFix(NullableValueTypeMayBeNullWarning warning);
    public AssertNotNullFix(ConvertingNullableToNonNullableWarning warning);
    public AssertNotNullFix(NullReferenceAssignmentWarning warning);
    public AssertNotNullFix(NullReferenceReturnWarning warning);
    public AssertNotNullFix(NullReferenceArgumentWarning warning);
    private static AssertNotNullFix();
    public virtual string get_Text();
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.AssignDefaultValueFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private ICSharpLiteralExpression myExpression;
    [NullableAttribute("2")]
private ITypeParameter myTypeParameter;
    public string Text { get; }
    public AssignDefaultValueFix(AssignNullToTypeParameterWithoutClassConstraintError error);
    public AssignDefaultValueFix(InitializeTypeParameterWithoutClassConstraintWithNullError error);
    public virtual bool IsAvailable(IUserDataHolder cache);
    public virtual string get_Text();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.AssignToFieldFix : ModernQuickFixBase {
    private IAccessorDeclaration myDeclaration;
    public string Text { get; }
    public AssignToFieldFix(ValueParameterNotUsedWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static ITypeOwner TryFindFieldLikeToAssignTo(IAccessorDeclaration accessorDeclaration);
    private static ITypeOwner TryFindFieldLikeByGetter(IAccessorDeclaration accessorDeclaration, IProperty property);
    private static ITypeOwner TryFindFieldByTypeAndName(IAccessorDeclaration accessorDeclaration, IProperty property);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CallConstructorFix : ModernQuickFixBase {
    private IObjectCreationExpression myObjectCreationExpression;
    private IReference myReference;
    public string Text { get; }
    public CallConstructorFix(CannotUseConstructorWithoutBracketsError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CallMethodFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private IReference myReference;
    public string Text { get; }
    public CallMethodFix(InvalidExpressionStatementError error);
    public CallMethodFix(CannotUseInvocableError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CanSimplifyDictionaryLookupWithTryAddFix : ContainsWithAddMergeFixBase {
    private ICSharpExpression myDictionaryExpression;
    private ICSharpExpression myKeyExpression;
    private ICSharpExpression myValueExpression;
    private IMethod myTryAddMethod;
    public string Text { get; }
    public CanSimplifyDictionaryLookupWithTryAddFix(CanSimplifyDictionaryLookupWithTryAddWarning warning);
    public virtual string get_Text();
    protected virtual IInvocationExpression CreateAddInvocationExpression();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CanSimplifyDictionaryLookupWithTryGetValueFix : ModernScopedQuickFixBase {
    private ICSharpStatement myContainingStatement;
    private ICSharpExpression myCondition;
    private IInvocationExpression myContainsKeyInvocation;
    private ITreeNode myThenScope;
    private ICSharpExpression myDictionaryExpression;
    private ICSharpExpression myKeyExpression;
    private IElementAccessExpression myIndexerUsage;
    public string Text { get; }
    public CanSimplifyDictionaryLookupWithTryGetValueFix(CanSimplifyDictionaryLookupWithTryGetValueWarning warning);
    public virtual string get_Text();
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static bool DoesNotChangeType(ILocalVariableDeclaration localVariableDeclaration, IType type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CanSimplifyDictionaryTryGetValueWithGetValueOrDefaultFix : ModernScopedQuickFixBase {
    private IMethod myGetValueOrDefaultMethod;
    private ICSharpExpression myKeyExpression;
    private ICSharpExpression myDictionaryExpression;
    private ICSharpExpression myDefaultValueExpression;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IReadOnlyList`1<ICSharpStatement> myStatementsToReplace;
    [NullableAttribute("2")]
private ITreeNode myTargetSyntaxNode;
    [NullableAttribute("2")]
private IStatementsOwner myParentStatementsOwner;
    [NullableAttribute("2")]
private ICSharpExpression myExpressionToReplace;
    public string Text { get; }
    public CanSimplifyDictionaryTryGetValueWithGetValueOrDefaultFix(CanSimplifyDictionaryTryGetValueWithGetValueOrDefaultInIfWarning warning);
    public CanSimplifyDictionaryTryGetValueWithGetValueOrDefaultFix(CanSimplifyDictionaryTryGetValueWithGetValueOrDefaultInExpressionWarning warning);
    public virtual string get_Text();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private void ReplaceStatements(IStatementsOwner parentStatementsOwner, IReadOnlyList`1<ICSharpStatement> statementsToReplace, ITreeNode targetSyntaxNode, ICSharpExpression defaultValueExpression, ICSharpExpression getValueExpression);
    protected virtual ITreeNode TryGetContextTreeNode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CanSimplifySetAddingWithSingleCallFix : ContainsWithAddMergeFixBase {
    private IExpressionStatement myOriginalAddStatement;
    public string Text { get; }
    public CanSimplifySetAddingWithSingleCallFix(CanSimplifySetAddingWithSingleCallWarning warning);
    public virtual string get_Text();
    protected virtual IInvocationExpression CreateAddInvocationExpression();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CastCollectionExpressionElementFix : CastFixBase {
    private ICollectionExpressionElement myElement;
    private ICSharpExpression myElementExpression;
    public string Text { get; }
    protected bool AsCast { get; }
    public CastCollectionExpressionElementFix(IncorrectCollectionExpressionItemTypeError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    protected virtual bool get_AsCast();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CastEnumsFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private ICSharpExpression myExpression;
    public string Text { get; }
    public CastEnumsFix(CannotApplyBinaryOperatorMultipleCandidatesError error);
    public CastEnumsFix(CannotApplyBinaryOperatorError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CastFixBase : ModernQuickFixBase {
    [CompilerGeneratedAttribute]
private bool <removeInnerCasts>P;
    protected bool AsCast { get; }
    protected string DescriptionFormat { get; }
    protected bool SkipImplicitConversions { get; }
    protected CastFixBase(bool removeInnerCasts);
    protected abstract virtual bool get_AsCast();
    protected string get_DescriptionFormat();
    protected virtual bool get_SkipImplicitConversions();
    [NullableContextAttribute("2")]
protected bool IsAvailableEx(ICSharpExpression expression);
    protected string GetText(ICSharpExpression expression);
    protected ICSharpExpression CreateCast(ICSharpExpression expression);
    protected ICSharpExpression CreateCast(ValueTuple`2<ICSharpExpression, IType> expressionCast, bool canReturnExpression);
    protected virtual IList`1<ValueTuple`2<ICSharpExpression, IType>> PossibleTypes(ICSharpExpression expression);
    protected static bool CanCastToTypeUsingAsCast(IType type);
    private static IExpression GetCastOperand(IExpression expression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CastFixBulbAction : ModernBulbActionBase {
    private ICSharpExpression myExpression;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ValueTuple`2<ICSharpExpression, IType> myTarget;
    private string myTemplate;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public string Text { get; }
    private CastFixBulbAction(ICSharpExpression expression, ValueTuple`2<ICSharpExpression, IType> target, string template, string message);
    [CompilerGeneratedAttribute]
public virtual string get_Text();
    public static ModernBulbActionBase CreateSafeCast(ICSharpExpression expression, ValueTuple`2<ICSharpExpression, IType> target, string message);
    public static ModernBulbActionBase CreateUnSafeCast(ICSharpExpression expression, ValueTuple`2<ICSharpExpression, IType> target, string message);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CastInArgumentBase : CastFixBase {
    [NullableAttribute("2")]
private ICSharpArgument myArgument;
    [NullableAttribute("2")]
private string myArgumentText;
    [NullableAttribute("2")]
private ICSharpExpression myExpression;
    protected bool DoSkipImplicitConversions;
    protected string DescriptionFormat { get; }
    protected bool SkipImplicitConversions { get; }
    public string Text { get; }
    [NullableContextAttribute("2")]
protected CastInArgumentBase(ICSharpArgument argument);
    [NullableContextAttribute("2")]
protected CastInArgumentBase(ICSharpExpression expression);
    protected string get_DescriptionFormat();
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    protected virtual bool get_SkipImplicitConversions();
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    protected static ICSharpExpression GetExpression(ICSharpArgumentInfo argument);
    protected static ICSharpArgument FindArgument(IReference reference);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CastInArgumentFix : CastInArgumentBase {
    protected bool AsCast { get; }
    public CastInArgumentFix(IncorrectArgumentTypeError error);
    public CastInArgumentFix(MultipleResolveCandidatesError error);
    public CastInArgumentFix(IndexerIncorrectArgumentNumberError error);
    public CastInArgumentFix(IncorrectArgumentsError error);
    public CastInArgumentFix(IncorrectArgumentNumberError error);
    protected virtual bool get_AsCast();
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CastInArrayElementFix : CastInArrayElementFixBase {
    protected bool AsCast { get; }
    [NullableContextAttribute("1")]
public CastInArrayElementFix(IncorrectArrayElementTypeError error);
    protected virtual bool get_AsCast();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CastInArrayElementFixBase : CastFixBase {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ICSharpExpression <expression>P;
    public string Text { get; }
    [NullableContextAttribute("2")]
protected CastInArrayElementFixBase(ICSharpExpression expression);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CastInAssignmentBase : CastFixBase {
    [NullableAttribute("2")]
private ICSharpExpression mySourceExpressionWithIncorrectType;
    public string Text { get; }
    protected CastInAssignmentBase(IncorrectAssignmentTypeError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CastInAssignmentFix : CastInAssignmentBase {
    protected bool AsCast { get; }
    [NullableContextAttribute("1")]
public CastInAssignmentFix(IncorrectAssignmentTypeError error);
    protected virtual bool get_AsCast();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CastInBinaryFix : CastFixBase {
    [NullableAttribute("2")]
private ICSharpExpression myExpression;
    protected bool AsCast { get; }
    public string Text { get; }
    public CastInBinaryFix(CannotApplyBinaryOperatorMultipleCandidatesError error);
    public CastInBinaryFix(CannotApplyBinaryOperatorError error);
    protected virtual bool get_AsCast();
    public virtual string get_Text();
    private string GetText(ICSharpExpression expression);
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CastInComparisonFix : ModernQuickFixBase {
    private IEqualityExpression myExpression;
    private IType myType;
    private string mySide;
    public string Text { get; }
    public CastInComparisonFix(PossibleUnintendedReferenceComparisonWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [NullableContextAttribute("2")]
private ICSharpExpression GetReplacedExpression();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CastInDimensionFix : CastFixBase {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ICSharpExpression <expression>P;
    [CompilerGeneratedAttribute]
private bool <AsCast>k__BackingField;
    protected bool AsCast { get; }
    public string Text { get; }
    [NullableContextAttribute("2")]
public CastInDimensionFix(ICSharpExpression expression);
    public CastInDimensionFix(NonIntegerArrayCreationParameterError error);
    public CastInDimensionFix(CannotImplicitlyConvertTypeError error);
    public CastInDimensionFix(TypeIsNotEnumerableError error);
    public CastInDimensionFix(NonDisposableTypeInUsingError error, bool asCast);
    public CastInDimensionFix(NonAsyncDisposableTypeInAwaitUsingError error, bool asCast);
    [CompilerGeneratedAttribute]
protected virtual bool get_AsCast();
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CastInGotoFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private ICSharpExpression myExpression;
    public string Text { get; }
    public CastInGotoFix(CannotImplicitlyConvertGotoCaseValueToGoverningTypeWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [NullableContextAttribute("2")]
[PureAttribute]
private ISwitchStatement GetSwitchStatement();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CastInInitializerBase : CastFixBase {
    [CompilerGeneratedAttribute]
private ICSharpExpression <expression>P;
    public string Text { get; }
    protected CastInInitializerBase(ICSharpExpression expression);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CastInInitializerFix : CastInInitializerBase {
    protected bool AsCast { get; }
    public CastInInitializerFix(IncorrectInitializerTypeError error);
    public CastInInitializerFix(DeclarationToInitializerTypeMismatchError error);
    protected virtual bool get_AsCast();
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CastInLambdaBodyExpressionFix : CastInLambdaBodyExpressionFixBase {
    protected bool AsCast { get; }
    [NullableContextAttribute("1")]
public CastInLambdaBodyExpressionFix(IncorrectLambdaBodyExpressionTypeError error);
    protected virtual bool get_AsCast();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CastInLambdaBodyExpressionFixBase : CastFixBase {
    [NullableAttribute("2")]
private ICSharpExpression myExpression;
    public string Text { get; }
    protected CastInLambdaBodyExpressionFixBase(IncorrectLambdaBodyExpressionTypeError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CastInReturnBase : CastFixBase {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ICSharpExpression <expression>P;
    public string Text { get; }
    [NullableContextAttribute("2")]
protected CastInReturnBase(ICSharpExpression expression);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CastInReturnFix : CastInReturnBase {
    protected bool AsCast { get; }
    public CastInReturnFix(IncorrectReturnTypeError error);
    public CastInReturnFix(IncorrectYieldReturnTypeError error);
    protected virtual bool get_AsCast();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CastInTupleLiteralBase : CastFixBase {
    [NullableAttribute("2")]
private ICSharpExpression myExpression;
    [NullableAttribute("2")]
private IType myTargetType;
    public string Text { get; }
    [NullableContextAttribute("2")]
protected CastInTupleLiteralBase(TypeComparisonResultBase comparisonResult);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    protected virtual IList`1<ValueTuple`2<ICSharpExpression, IType>> PossibleTypes(ICSharpExpression expression);
    private static string GetTupleComponentName(ICSharpExpression expression);
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CastInTupleLiteralFix : CastInTupleLiteralBase {
    protected bool AsCast { get; }
    [NullableContextAttribute("2")]
public CastInTupleLiteralFix(TypeComparisonResultBase comparisonResult);
    protected virtual bool get_AsCast();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CastOnAccessErrorFix : ModernQuickFixBase {
    private IReference myReference;
    [NullableAttribute("2")]
private string myTypeName;
    public string Text { get; }
    public CastOnAccessErrorFix(CannotAccessExplicitImplementationError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    private static IDeclaredType GetPossibleQualifierType(IOverridableMember overridableMember, IReferenceExpression referenceExpression);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CastToCommonType2Fix : CastFixBase {
    [NullableAttribute("2")]
private INullCoalescingExpression myExpression;
    [NullableAttribute("2")]
private IType myTargetType;
    protected bool AsCast { get; }
    public string Text { get; }
    public CastToCommonType2Fix(InvalidNullCoalescingOperandsError error);
    protected virtual bool get_AsCast();
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [NullableContextAttribute("2")]
[PureAttribute]
private IType GetTargetType(INullCoalescingExpression expression);
    private static IType GetCommonBaseTypeOfOperands(INullCoalescingExpression expression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CastToCommonTypeFix : CastFixBase {
    [NullableAttribute("2")]
private IConditionalTernaryExpression myExpression;
    [NullableAttribute("2")]
private IType myTargetType;
    public string Text { get; }
    protected bool AsCast { get; }
    public CastToCommonTypeFix(CannotDetermineTernaryExpressionTypeError error);
    public CastToCommonTypeFix(CannotDetermineTernaryExpressionType2Error error);
    public virtual string get_Text();
    protected virtual bool get_AsCast();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [PureAttribute]
private static ICSharpExpression GetExpressionToCast(IConditionalTernaryExpression expression, IType targetType);
    [NullableContextAttribute("2")]
[PureAttribute]
private IType GetTargetType(IConditionalTernaryExpression expression);
    [PureAttribute]
private static IType GetCommonBaseTypeOfOperands(ICSharpExpression thenResult, ICSharpExpression elseResult);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CastToSmallerUnsignedTypeFix : ModernQuickFixBase {
    private IOperatorExpression myOperatorExpression;
    public string Text { get; }
    public CastToSmallerUnsignedTypeFix(BitwiseOrSignExtendWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal static ICastExpression <ExecutePsiTransaction>g__CastExpressionToUnsignedTypeIfRequired|5_0(ICSharpExpression expression, IDeclaredType expressionType, IDeclaredType targetType, bool isCast, <>c__DisplayClass5_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ChangeAllocatedTypeFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private IStackAllocExpression myStackAllocExpression;
    public string Text { get; }
    public ChangeAllocatedTypeFix(DeclarationToInitializerTypeMismatchError error);
    public ChangeAllocatedTypeFix(IncorrectInitializerTypeError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [NullableContextAttribute("2")]
private IPointerType GetVariableType();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RefactoringWorkflowProviderAttribute("16")]
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ChangeAllRenameWorkflowProvider : RenameWorkflowProvider {
    private static IEnumerable`1<IRefactoringWorkflow> ourNotAvailable;
    private static ChangeAllRenameWorkflowProvider();
    public virtual IEnumerable`1<IRefactoringWorkflow> CreateWorkflow(IDataContext context);
    private static IReference TryGetSelectedReference(IPsiView psiView);
    [CompilerGeneratedAttribute]
internal static bool <TryGetSelectedReference>g__IsNameIdentifierSelected|2_0(ITreeNode referenceOwner, ICSharpIdentifier identifier, <>c__DisplayClass2_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ChangeAllTypesFix : ModernQuickFixBase {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IReference <reference>P;
    public string Text { get; }
    [NullableContextAttribute("2")]
public ChangeAllTypesFix(IReference reference);
    public ChangeAllTypesFix(NotResolvedError error);
    public ChangeAllTypesFix(StaticElementInNonStaticContextError error);
    public ChangeAllTypesFix(MultipleStaticElementInNonStaticContextError error);
    public ChangeAllTypesFix(NonStaticElementInStaticContextError error);
    public ChangeAllTypesFix(MultipleNonStaticElementInStaticContextError error);
    public ChangeAllTypesFix(PrimaryConstructorParameterInStaticContextError error);
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    private static bool TestReference(IReference reference);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private ReferenceOccurrence[] GetReferenceOccurrences();
    private IEnumerable`1<IReferenceName> CollectReferenceExpressions();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ChangeArgTypeInArgumentFix : ChangeTypeFixBase {
    [NullableAttribute("2")]
private ICSharpArgument myArgument;
    public ChangeArgTypeInArgumentFix(IncorrectArgumentTypeError error);
    public ChangeArgTypeInArgumentFix(ByRefArgumentTypeMismatchError error);
    protected virtual IType GetTargetType();
    [NullableContextAttribute("2")]
protected virtual IClrDeclaredElement GetDeclaredElement();
    public virtual bool IsAvailable(IUserDataHolder cache);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ChangeArgumentKind2Fix : object {
    private IReference myReference;
    public ChangeArgumentKind2Fix(MultipleResolveCandidatesError error);
    public ChangeArgumentKind2Fix(IncorrectArgumentsError error);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ChangeArgumentKind2Fix/<CreateBulbItems>d__3")]
public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    private ICSharpArgument FindArgument(IReadOnlyList`1& kinds);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ChangeArgumentKindFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private ICSharpArgument myArgument;
    private ParameterKind myParameterKind;
    public string Text { get; }
    public ChangeArgumentKindFix(IncorrectArgumentKindError error);
    public ChangeArgumentKindFix(ArgExpectedInWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public static void Execute(ICSharpArgument argument, ParameterKind parameterKind);
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ChangeArrayElementTypeFix : ChangeTypeFixBase {
    private ICSharpExpression myExpression;
    private IType myTargetType;
    public ChangeArrayElementTypeFix(IncorrectArrayElementTypeError error);
    protected virtual IType GetTargetType();
    protected virtual IClrDeclaredElement GetDeclaredElement();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ChangeBaseRefnessFix : ModernQuickFixBase {
    private IOverridableMember myBaseMember;
    private ReferenceKind myReferenceKind;
    public string Text { get; }
    private ChangeBaseRefnessFix(IOverridableMember baseMember, ReferenceKind referenceKind);
    public ChangeBaseRefnessFix(CannotChangeRefnessInOverrideError error);
    public ChangeBaseRefnessFix(NotImplementAnotherRefnessError error);
    public virtual string get_Text();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ChangeBaseTypeKindFix : ChangeTypeKindFix {
    public string Text { get; }
    public ChangeBaseTypeKindFix(BadRecordBaseError error);
    public ChangeBaseTypeKindFix(BadInheritanceFromRecordError error);
    public virtual string get_Text();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ChangeCollectionExpressionElementTypeFix : ChangeTypeFixBase {
    private ICollectionExpressionElement myCollectionExpressionElement;
    private ICSharpExpression myExpression;
    private IType myIterationType;
    public ChangeCollectionExpressionElementTypeFix(IncorrectCollectionExpressionItemTypeError error);
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IType GetTargetType();
    [NullableContextAttribute("2")]
protected virtual IClrDeclaredElement GetDeclaredElement();
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ChangeCollectionExpressionTargetTypeFix : QuickFix {
    public ChangeCollectionExpressionTargetTypeFix(IncorrectCollectionExpressionItemTypeError error);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ChangeCreatedArrayTypeFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private IArrayCreationExpression myArrayCreationExpression;
    [NullableAttribute("2")]
private IArrayType myTargetType;
    public string Text { get; }
    public ChangeCreatedArrayTypeFix(CoVariantArrayConversionWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ChangeDeclarationRefnessFix : ModernQuickFixBase {
    [NotNullAttribute]
private ICSharpDeclaration myDeclaration;
    [NotNullAttribute]
private ICSharpExpression myReturnValue;
    private bool myShouldReturnByReference;
    public string Text { get; }
    public ChangeDeclarationRefnessFix(ReturnRefnessMismatchError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [CompilerGeneratedAttribute]
private ReferenceKind <ExecutePsiTransaction>g__ComputeReferenceKindToSet|7_0();
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ChangeDelegateSignatureFix : ChangeSignatureFixBase {
    public ChangeDelegateSignatureFix(IncorrectSignatureInDelegateCreationError error);
    public ChangeDelegateSignatureFix(IncorrectRefnessInDelegateCreationError error);
    public ChangeDelegateSignatureFix(NullabilityMismatchInReturnTypeOfTargetDelegateWarning warning);
    public ChangeDelegateSignatureFix(NullabilityMismatchInParameterTypeOfTargetDelegateWarning warning);
    private ChangeDelegateSignatureFix(NullabilityMismatchWithDelegateInfo mismatchWithDelegateInfo);
    public virtual bool IsAvailable(IUserDataHolder cache);
    private static NullabilityMismatchWithDelegateInfo GetInfo(ICSharpTreeNode node, IType targetDelegateType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ChangeFixedPatternMethodSignatureFix : ModernQuickFixBase {
    private IMethod myMethod;
    private ISubstitution mySubstitution;
    private IUnsafeCodeFixedPointerDeclaration myDeclaration;
    public string Text { get; }
    public ChangeFixedPatternMethodSignatureFix(InvalidFixedPatternMethodError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private void FixExtensionMethodDeclarationSignature(IMethodDeclaration declaration);
    private static void RemoveAllTypeParametersExceptThis(IMethodDeclaration declaration, ITypeParameter thisTypeParameter);
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ChangeForeachVarTypeFix : ChangeTypeFixBase {
    private IType myElementType;
    private ISingleVariableDesignation myIteratorDeclaration;
    public ChangeForeachVarTypeFix(IncorrectForeachVariableTypeError error);
    public ChangeForeachVarTypeFix(MoreSpecificForeachVariableTypeAvailableWarning error);
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IType GetTargetType();
    protected virtual IClrDeclaredElement GetDeclaredElement();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ChangeInstantiatedTypeFix : object {
    [NullableAttribute("2")]
private ICreationExpression myCreationExpression;
    [NullableAttribute("2")]
private IType myTargetType;
    public ChangeInstantiatedTypeFix(ICreationExpression creationExpression, IType targetType);
    public ChangeInstantiatedTypeFix(IncorrectAssignmentTypeError error);
    public ChangeInstantiatedTypeFix(IncorrectInitializerTypeError error);
    public ChangeInstantiatedTypeFix(DeclarationToInitializerTypeMismatchError error);
    public ChangeInstantiatedTypeFix(IncorrectArgumentTypeError error);
    public ChangeInstantiatedTypeFix(IncorrectReturnTypeError error);
    public ChangeInstantiatedTypeFix(NullabilityMismatchInAssignmentWarning warning);
    public ChangeInstantiatedTypeFix(NullabilityMismatchInArgumentWarning warning);
    public ChangeInstantiatedTypeFix(TypeComparisonResultBase comparisonResult, IType defaultTypeSuggestion);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    public bool IsAvailable();
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    [PureAttribute]
private static bool IsTargetConstructorAvailable(IType targetType, ICreationExpression creationExpression);
    private static ICreationExpression ReplaceExpression(ICreationExpression creationExpression, IType targetType);
    private static void ChangeArrayCreationTypeInplace(IArrayCreationExpression arrayCreationExpression, IArrayType arrayType);
    public static void SetArrayTypeIfPossible(IArrayCreationExpression arrayCreation, IArrayType arrayType);
    [PureAttribute]
private static IArrayCreationExpression CreateArrayCreationExpression(ICreationExpression creationExpression, IArrayType arrayType);
    [PureAttribute]
private static IAnonymousObjectCreationExpression CreateAnonymousObjectCreation(ICreationExpression creationExpression, IAnonymousType anonymousType);
    [PureAttribute]
private static IObjectCreationExpression CreateObjectCreationExpression(ICreationExpression creationExpression, IType type);
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ChangeInvokedDelegateTypeFix : ChangeTypeFixBase {
    [CanBeNullAttribute]
private IReference myReference;
    public ChangeInvokedDelegateTypeFix(IncorrectArgumentNumberError error);
    public ChangeInvokedDelegateTypeFix(IncorrectArgumentsError error);
    public ChangeInvokedDelegateTypeFix(IncorrectSignatureInDelegateCreationError error);
    private ChangeInvokedDelegateTypeFix(IReference reference);
    protected virtual IType GetTargetType();
    protected virtual IClrDeclaredElement GetDeclaredElement();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ChangeLiteralTypeFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private ICSharpLiteralExpression myExpression;
    [NullableAttribute("2")]
private IType myTargetType;
    public string Text { get; }
    public ChangeLiteralTypeFix(IncorrectInitializerTypeError error);
    public ChangeLiteralTypeFix(IncorrectReturnTypeError error);
    public ChangeLiteralTypeFix(IncorrectAssignmentTypeError error);
    public ChangeLiteralTypeFix(IncorrectArgumentTypeError error);
    [NullableContextAttribute("2")]
private ChangeLiteralTypeFix(TypeComparisonResultBase typeComparisonInfo, IExpression fallbackExpression, IType fallbackType);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ChangeLockFieldTypeFix : ModernQuickFixBase {
    private IFieldDeclaration myFieldDeclaration;
    public string Text { get; }
    public ChangeLockFieldTypeFix(ChangeFieldTypeToSystemThreadingLockWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ChangeMethodSignatureFix : ChangeSignatureFixBase {
    public ChangeMethodSignatureFix(IncorrectSignatureInDelegateCreationError error);
    public ChangeMethodSignatureFix(IncorrectRefnessInDelegateCreationError error);
    public ChangeMethodSignatureFix(IncorrectInitializerTypeError error);
    public ChangeMethodSignatureFix(DeclarationToInitializerTypeMismatchError error);
    [NullableContextAttribute("2")]
private ChangeMethodSignatureFix(IDeclaredType delegateType, IReference reference);
    private static IDeclaredType GetDelegateType(IType targetType);
    [NullableContextAttribute("2")]
private static IParametersOwner GetTargetElement(IReference reference);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ChangeNotNullIfNotNullParameterNameFix : ModernQuickFixBase {
    private IReference myReference;
    public string Text { get; }
    public ChangeNotNullIfNotNullParameterNameFix(NotResolvedInTextWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [NullableContextAttribute("2")]
[ContractAnnotationAttribute("null => null")]
private static IParametersOwner GetParametersOwner(ICSharpArgument ownerArgument);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ChangeNullabilityToMatchAnnotationAttributesInHierarchyFix : ModernQuickFixBase {
    private ITypeUsage myTypeUsage;
    public string Text { get; }
    public ChangeNullabilityToMatchAnnotationAttributesInHierarchyFix(NullnessAnnotationConflictWithJetBrainsAnnotationsWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static IAttributesOwner FindElementByTypeUsage(ITypeUsage typeUsage);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ChangeParameterKindFix : ModernScopedQuickFixBase {
    [CompilerGeneratedAttribute]
private ICSharpRegularParameterDeclaration <parameterDeclaration>P;
    [CompilerGeneratedAttribute]
private ParameterKind <newParameterKind>P;
    public string Text { get; }
    public ChangeParameterKindFix(ICSharpRegularParameterDeclaration parameterDeclaration, ParameterKind newParameterKind);
    public virtual string get_Text();
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ChangeParameterNameReferenceFix : ModernQuickFixBase {
    private IReference myReference;
    private IParameter myTargetParameter;
    public string Text { get; }
    public ChangeParameterNameReferenceFix(SuspiciousParameterNameInArgumentNullExceptionWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ChangeParameterTypeInArgumentFix : object {
    [NullableAttribute("2")]
private ICSharpArgument myArgument;
    [NullableAttribute("2")]
private IType mySuggestedParameterType;
    private bool myIsNotResolveProblem;
    public ChangeParameterTypeInArgumentFix(IncorrectArgumentTypeError error);
    public ChangeParameterTypeInArgumentFix(ByRefArgumentTypeMismatchError error);
    public ChangeParameterTypeInArgumentFix(WrongReturnTypeOfAsyncAnonymousFunctionError error);
    public ChangeParameterTypeInArgumentFix(NullabilityMismatchInArgumentWarning warning);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    private IEnumerable`1<IType> GetTargetTypes(ICSharpArgument argument);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ChangeParameterTypeInArgumentFix/<CreateBulbItems>d__9")]
public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    [PureAttribute]
private static IParameter GetParameterToChange(ICSharpArgument argument);
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ChangeReceiverTypeFix : object {
    [CanBeNullAttribute]
private ICSharpArgumentInfo mySourceArgument;
    [CanBeNullAttribute]
private ICSharpTreeNode myAssignmentTargetNode;
    private bool myIsNotResolveProblem;
    [CanBeNullAttribute]
private IBulbAction[] myChangeActions;
    public ChangeReceiverTypeFix(IncorrectArgumentTypeError error);
    public ChangeReceiverTypeFix(ByRefArgumentTypeMismatchError error);
    public ChangeReceiverTypeFix(IncorrectAssignmentTypeError error);
    public ChangeReceiverTypeFix(IncorrectInitializerTypeError error);
    public ChangeReceiverTypeFix(DeclarationToInitializerTypeMismatchError error);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    [CanBeNullAttribute]
private IReference FindInvokedElementReference(ICSharpArgumentInfo sourceArgument);
    [CanBeNullAttribute]
[PureAttribute]
private static ICSharpExpression GetInvocationQualifierExpression(object invocationInfo);
    [CanBeNullAttribute]
[PureAttribute]
private static ICreationExpression GetSourceExpression(object invocationInfo);
    private bool TryInferFixSubstitution(ICSharpArgumentInfo sourceArgument, ITypeMember typeMember, ICSharpExpression qualifierExpression, ICreationExpression creationExpression);
    [CanBeNullAttribute]
private static ISubstitution InferBetterSubstitution(ICSharpArgumentInfo sourceArgument, ITypeMember typeMember, IReadOnlyList`1<ITypeParameter> receiverTypeParameters);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ChangeRequiredBaseTypeFix : ModernQuickFixBase {
    private IClassLikeDeclaration myDeclaration;
    private OneToSetMap`2<IDeclaredType, IDeclaredType> myRequiredBaseTypeToAttributeMap;
    [NullableAttribute("2")]
private IDeclaredType myAttributeToChange;
    [NullableAttribute("2")]
private IDeclaredType myBaseType;
    [NullableAttribute("2")]
private IDeclaredType myRequiredBaseType;
    public string Text { get; }
    public ChangeRequiredBaseTypeFix(RequiredBaseTypesIsNotInheritedWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ChangeReturnValueRefnessFix : ModernQuickFixBase {
    private ICSharpExpression myReturnValue;
    private bool myShouldReturnByReference;
    public string Text { get; }
    public ChangeReturnValueRefnessFix(ReturnRefnessMismatchError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ChangeRightTypeInInitializerFix : ChangeTypeFixBase {
    private ICSharpExpression myInitializeExpression;
    public ChangeRightTypeInInitializerFix(IncorrectInitializerTypeError error);
    protected virtual IType GetTargetType();
    protected virtual IClrDeclaredElement GetDeclaredElement();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ChangeShiftExpressionLeftOperandTypeFix : ModernQuickFixBase {
    private IShiftExpression myShiftExpression;
    private bool myCastToUlong;
    public string Text { get; }
    public ChangeShiftExpressionLeftOperandTypeFix(ShiftExpressionResultEqualsZeroWarning error);
    public ChangeShiftExpressionLeftOperandTypeFix(ShiftExpressionRightOperandNotEqualRealCountWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    private bool CheckCastToLongMakeSense(ICSharpExpression leftOperand, IType targetType, bool isLeftShift, int shiftCount);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ChangeSignatureOfDelegateArgumentFix : object {
    private IReference myReference;
    private IBulbAction[] Items { get; }
    public ChangeSignatureOfDelegateArgumentFix(IReference reference);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    [CanBeNullAttribute]
private static IList`1<ICSharpArgumentInfo> Arguments(IReference reference);
    private IBulbAction[] get_Items();
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ChangeTextFixBase : ModernQuickFixBase {
    [MustUseReturnValueAttribute]
protected IBulbActionCommand ExecutePostReplaceSuggestion(IReference reference, List`1<string> items);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.Misc.ConvertStringLiteralToInterpolationAction")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ChangeToInterpolatedStringFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private IType myExpectedType;
    [NullableAttribute("2")]
private ICSharpExpression myActualExpression;
    public string Text { get; }
    public ChangeToInterpolatedStringFix(IncorrectAssignmentTypeError error);
    public ChangeToInterpolatedStringFix(IncorrectArgumentTypeError error);
    public ChangeToInterpolatedStringFix(IncorrectArrayElementTypeError error);
    public ChangeToInterpolatedStringFix(IncorrectInitializerTypeError error);
    public ChangeToInterpolatedStringFix(IncorrectReturnTypeError error);
    public ChangeToInterpolatedStringFix(IncorrectYieldReturnTypeError error);
    [NullableContextAttribute("2")]
private ChangeToInterpolatedStringFix(IType expectedType, ICSharpExpression actualExpression);
    public virtual string get_Text();
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ChangeTypeFixBase : ModernQuickFixBase {
    public string Text { get; }
    public virtual bool IsAvailable(IUserDataHolder cache);
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public virtual string get_Text();
    [NullableContextAttribute("2")]
protected abstract virtual IType GetTargetType();
    [NullableContextAttribute("2")]
protected abstract virtual IClrDeclaredElement GetDeclaredElement();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ChangeTypeInAssignmentFix : QuickFix {
    public ChangeTypeInAssignmentFix(IncorrectAssignmentTypeError error);
}
[UsedImplicitlyAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ChangeTypeInDeconstructionFix : QuickFix {
    public ChangeTypeInDeconstructionFix(IncorrectDeconstructionElementTypeError error);
    private static IEnumerable`1<ChangeTypeAction> CreateActions(IncorrectDeconstructionElementTypeError error);
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ChangeTypeInInitializerFix : QuickFix {
    public ChangeTypeInInitializerFix(IncorrectInitializerTypeError error);
    public ChangeTypeInInitializerFix(DeclarationToInitializerTypeMismatchError error);
    public ChangeTypeInInitializerFix(NullabilityMismatchInAssignmentWarning warning);
    public ChangeTypeInInitializerFix(NullabilityMismatchInReturnTypeOfTargetDelegateWarning warning);
    public ChangeTypeInInitializerFix(NullabilityMismatchInParameterTypeOfTargetDelegateWarning warning);
    public ChangeTypeInInitializerFix(NullabilityMismatchInArgumentForOutputWarning warning);
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    [NotNullAttribute]
[PureAttribute]
private static ChangeTypeAction[] CreateActionsForDelegateReturnTypeNullabilityMismatch(NullabilityMismatchInReturnTypeOfTargetDelegateWarning warning);
    [NotNullAttribute]
[PureAttribute]
private static ChangeTypeAction[] CreateActionsForDelegateParameterTypeNullabilityMismatch(NullabilityMismatchInParameterTypeOfTargetDelegateWarning warning);
}
public abstract class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ChangeTypeInReturnFix : ChangeTypeFixBase {
    [CompilerGeneratedAttribute]
private IReturnValueHolder <ReturnValueHolder>k__BackingField;
    [CanBeNullAttribute]
public IReturnValueHolder ReturnValueHolder { get; }
    protected ChangeTypeInReturnFix(IReturnValueHolder returnValueHolder);
    [CompilerGeneratedAttribute]
public IReturnValueHolder get_ReturnValueHolder();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IClrDeclaredElement GetDeclaredElement();
    protected virtual IType GetTargetType();
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ChangeTypeInYieldFix : ChangeTypeFixBase {
    [NotNullAttribute]
private IYieldStatement myYieldStatement;
    public ChangeTypeInYieldFix(IncorrectYieldReturnTypeError error);
    protected virtual IClrDeclaredElement GetDeclaredElement();
    protected virtual IType GetTargetType();
    [CanBeNullAttribute]
private ICSharpDeclaration FindYieldOwnerDeclaration();
}
public static class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ChangeTypeItemsCreator : object {
    [NotNullAttribute]
public static ChangeTypeAction[] FromUnknownParentOfExpression(ICSharpExpression csharpExpression);
    [NotNullAttribute]
public static ChangeTypeAction[] FromUnknownParentOfExpression(ICSharpExpression csharpExpression, IType suggestedType, bool suggestRValueFix);
    [NotNullAttribute]
[ItemNotNullAttribute]
private static ChangeTypeAction[] FromUnknownParentOfExpressionInternal(ICSharpExpression csharpExpression, IType suggestedType, bool suggestRValueFix);
    [NotNullAttribute]
public static ChangeTypeAction[] FromConditionalTernary(IConditionalTernaryExpression conditionalExpression);
    [NotNullAttribute]
public static ChangeTypeAction[] FromNullCoalescing(INullCoalescingExpression nullCoalescingExpression);
    [NotNullAttribute]
public static ChangeTypeAction[] FromReturn(ICSharpExpression expression, bool suggestSourceFix);
    [NotNullAttribute]
public static ChangeTypeAction[] FromReturn(IReturnValueHolder returnValueHolder, bool suggestSourceFix);
    [NotNullAttribute]
public static ChangeTypeAction[] FromReturn(IReturnValueHolder returnValueHolder, IType suggestedReturnType, bool suggestSourceFix);
    [CanBeNullAttribute]
public static IParametersOwner ContainingParametersOwner2(ICSharpDeclaration declaration);
    [NotNullAttribute]
public static ChangeTypeAction[] FromDeclaration(IDeclaration declaration, ICSharpExpression csharpExpression);
    [NotNullAttribute]
public static ChangeTypeAction[] FromDeclaration(IDeclaration declaration, ICSharpExpression csharpExpression, IType suggestedDeclarationType, bool suggestRValueFix);
    [NotNullAttribute]
private static ChangeTypeAction[] FromFixedPointerDeclaration(IUnsafeCodeFixedPointerDeclaration fixedPointerDeclaration, ICSharpExpression initialValue, bool suggestRValueFix);
    [NotNullAttribute]
public static ChangeTypeAction[] FromArgument(ICSharpArgumentInfo csharpArgumentInfo, IType suggestedType, bool suggestArgumentFix);
    [NotNullAttribute]
public static IEnumerable`1<IType> ParamArrayPossibleTypes(ICSharpArgumentInfo csharpArgumentInfo);
    [CanBeNullAttribute]
private static ICSharpExpression GetArgumentExpression(ICSharpArgumentInfo argumentInfo);
    [NotNullAttribute]
public static ChangeTypeAction[] FromAssignment(IAssignmentExpression assignmentExpression, IType destinationSuggestedType, bool suggestRValueFix);
    [NotNullAttribute]
public static ChangeTypeAction[] FromMemberInitializer(IMemberInitializer initializer, IType suggestedType, bool suggestRValueFix);
    [NotNullAttribute]
public static ChangeTypeAction[] FromWithAssignment(IWithInitializerAssignment withInitializerAssignment, IType suggestedType, bool suggestRValueFix);
    [NotNullAttribute]
public static ChangeTypeAction[] FromVariableInitializer(IVariableInitializer variableInitializer, IType suggestedType, bool suggestRValueFix);
    [NotNullAttribute]
public static ChangeTypeAction[] FromAwaitExpression(IAwaitExpression awaitExpression);
    [CanBeNullAttribute]
public static IClrDeclaredElement DeclaredElementFromLValueExpression(ICSharpExpression csharpExpression);
    [CanBeNullAttribute]
public static IClrDeclaredElement DeclaredElementFromRValueExpression(ICSharpExpression csharpExpression);
    private static bool IsAsync(ICSharpDeclaration declaration);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ChangeTypeKindFix : ModernQuickFixBase {
    protected ITypeElement TypeElement;
    public string Text { get; }
    protected ChangeTypeKindFix(ITypeElement typeElement);
    public ChangeTypeKindFix(BadRecordBaseError error);
    public ChangeTypeKindFix(BadInheritanceFromRecordError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ChangeTypeOfArrayFix : ChangeTypeFixBase {
    private bool myNoCheck;
    [NullableAttribute("2")]
private ICSharpExpression myExpression;
    protected bool IsValid { get; }
    public ChangeTypeOfArrayFix(IncorrectArrayElementTypeError error);
    public ChangeTypeOfArrayFix(InvalidArrayInitializerError error);
    public ChangeTypeOfArrayFix(ArrayInitializerExpectedError error);
    protected bool get_IsValid();
    [NullableContextAttribute("2")]
private void Initialize(IArrayInitializer arrayInitializer);
    [NullableContextAttribute("2")]
protected virtual IType GetTargetType();
    private bool CheckStructure(IType type1, IType type2);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ChangeTypeOfArrayFix/<GetArrayInitializers>d__11")]
private IEnumerable`1<IArrayInitializer> GetArrayInitializers();
    [NullableContextAttribute("2")]
protected virtual IClrDeclaredElement GetDeclaredElement();
    [NullableContextAttribute("2")]
private static ITypeOwner GetTypeOwner(IVariableInitializer& initializer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ChangeTypeOfNewFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private ICSharpExpression myExpression;
    public string Text { get; }
    public ChangeTypeOfNewFix(IncorrectArrayElementTypeError error);
    public ChangeTypeOfNewFix(ArrayInitializerExpectedError error);
    public ChangeTypeOfNewFix(InvalidArrayInitializerError error);
    public virtual bool IsAvailable(IUserDataHolder cache);
    private static bool NotInExpressionInitializer(IArrayCreationExpression arrayCreation);
    public virtual string get_Text();
    [NullableContextAttribute("2")]
private void Initialize(IArrayInitializer arrayInitializer);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ChangeTypeOfNewFix/<GetArrayInitializers>d__9")]
private IEnumerable`1<IArrayInitializer> GetArrayInitializers();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ChangeTypeUsageFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private ITypeUsage myTypeUsage;
    [NullableAttribute("2")]
private IExpression myExpression;
    [NullableAttribute("2")]
private IType myNewType;
    public string Text { get; }
    public ChangeTypeUsageFix(TypeComparisonResultBase comparisonResult, IType defaultTypeSuggestion);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private string GetText(IExpression expression);
}
public abstract class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ChangeValueTypeFixBase : ChangeTypeFixBase {
    protected ICSharpExpression myExpression;
    protected bool IsValid { get; }
    protected ChangeValueTypeFixBase(ICSharpExpression expression);
    protected bool get_IsValid();
    protected virtual IClrDeclaredElement GetDeclaredElement();
    private static IDeclaredElement GetDeclaredElement(ICSharpExpression expression);
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ChangeValueTypeInConditionFix : ChangeValueTypeFixBase {
    public ChangeValueTypeInConditionFix(CannotImplicitlyConvertTypeError error);
    protected virtual IType GetTargetType();
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ChangeValueTypeInDimensionFix : ChangeValueTypeFixBase {
    public ChangeValueTypeInDimensionFix(NonIntegerArrayCreationParameterError error);
    protected virtual IType GetTargetType();
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ChangeValueTypeInGotoCaseFix : ChangeValueTypeFixBase {
    private IType myGoverningType;
    public ChangeValueTypeInGotoCaseFix(CannotImplicitlyConvertGotoCaseValueToGoverningTypeWarning error);
    protected virtual IType GetTargetType();
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ChangeValueTypeInReturnFix : ChangeValueTypeFixBase {
    public ChangeValueTypeInReturnFix(IncorrectLambdaBodyExpressionTypeError error);
    protected virtual IType GetTargetType();
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ChangeValueTypeInYieldFix : ChangeValueTypeFixBase {
    public ChangeValueTypeInYieldFix(IncorrectYieldReturnTypeError error);
    private IType GetEnumerableElementType(IType type);
    protected virtual IType GetTargetType();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.CheckReferenceNullAction")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CheckNullFix : ModernQuickFixBase {
    private static Key`1<object> ourKey;
    [NullableAttribute("2")]
private ICSharpExpression myExpression;
    public string Text { get; }
    public CheckNullFix(PossibleNullReferenceExceptionWarning error);
    public CheckNullFix(AssignNullToNotNullAttributeWarning warning);
    public CheckNullFix(PossibleInvalidOperationExceptionWarning error);
    public CheckNullFix(NullReferenceReceiverWarning warning);
    public CheckNullFix(NullableValueTypeMayBeNullWarning warning);
    public CheckNullFix(ConvertingNullableToNonNullableWarning warning);
    public CheckNullFix(NullReferenceAssignmentWarning warning);
    public CheckNullFix(NullReferenceReturnWarning warning);
    public CheckNullFix(NullReferenceArgumentWarning warning);
    private static CheckNullFix();
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ChooseTypeFix : object {
    [NullableAttribute("2")]
private IQualifiableReference myReference;
    public ChooseTypeFix(MultipleResolveCandidatesError error);
    public ChooseTypeFix(MultipleCandidatesInDocCommentWarning error);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CoalesceWithFallbackValueFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private ICSharpExpression myExpression;
    public string Text { get; }
    [NullableContextAttribute("2")]
private CoalesceWithFallbackValueFix(ICSharpExpression expression);
    public CoalesceWithFallbackValueFix(AssignNullToNotNullAttributeWarning warning);
    public CoalesceWithFallbackValueFix(ConvertingNullableToNonNullableWarning warning);
    public CoalesceWithFallbackValueFix(NullReferenceAssignmentWarning warning);
    public CoalesceWithFallbackValueFix(UnboxPossibleNullWarning warning);
    public CoalesceWithFallbackValueFix(NullReferenceReturnWarning warning);
    public CoalesceWithFallbackValueFix(NullReferenceArgumentWarning warning);
    public CoalesceWithFallbackValueFix(DisallowNullAttributeForbidsMaybeNullAssignmentWarning warning);
    public virtual string get_Text();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
    public static IBulbActionCommand AppendFallbackValue(ICSharpExpression target, ISolution solution);
    [PureAttribute]
private static ICSharpExpression CreateFallbackValuePlaceholderExpression(ICSharpExpression target, CSharpElementFactory factory);
    [PureAttribute]
private static IType TryGetElementType(IType type, ITreeNode context, PredefinedType predefinedType);
    [PureAttribute]
private static IField TryGetEmptyTypesField(PredefinedType predefinedType);
    [PureAttribute]
private static IMethod TryGetArrayEmptyMethod(PredefinedType predefinedType);
    private static IBulbActionCommand ExecuteHotspotSession(DocumentRange fallbackValueRange);
    [CompilerGeneratedAttribute]
internal static ICSharpExpression <CreateFallbackValuePlaceholderExpression>g__CreatePlaceholder|14_0(<>c__DisplayClass14_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CommentAssignmentFix : QuickFixBase {
    private IAssignmentExpression myAssignment;
    public string Text { get; }
    public CommentAssignmentFix(AssignmentNotUsedWarning error);
    public CommentAssignmentFix(AssignmentIsFullyDiscardedWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CommentExceptionSuppressionFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private ICatchClause myCatchClause;
    public string Text { get; }
    public CommentExceptionSuppressionFix(EmptyGeneralCatchClauseWarning warning);
    public virtual bool IsAvailable(IUserDataHolder cache);
    public virtual string get_Text();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CommentUnreachableCodeFix : QuickFixBase {
    [NotNullAttribute]
public static Key InstanceKey;
    [NotNullAttribute]
private ITreeRange myRange;
    [NotNullAttribute]
[ItemNotNullAttribute]
private IReadOnlyList`1<ITreeRange> mySecondaryRanges;
    public string Text { get; }
    public CommentUnreachableCodeFix(UnreachableCodeCompilerWarning error);
    public CommentUnreachableCodeFix(HeuristicUnreachableCodeWarning error);
    public CommentUnreachableCodeFix(UnreachableSwitchCaseWarning warning);
    private static CommentUnreachableCodeFix();
    public virtual bool IsAvailable(IUserDataHolder cache);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static Action CommentRange(ICommentCodeLanguageHelper commentHelper, ITreeRange treeRange);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CommonAccessRightsFix : object {
    [NullableAttribute("2")]
private IClassLikeDeclaration myDeclaration;
    private IEnumerable`1<IBulbAction> Items { get; }
    public CommonAccessRightsFix(DifferentPartsAccessibilityError error);
    private IEnumerable`1<IBulbAction> get_Items();
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CommonBaseFix : object {
    private IClassLikeDeclaration myDeclaration;
    public CommonBaseFix(DifferentPartBaseClassError error);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CommonBaseFix/<CreateBulbItems>d__2")]
public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CommonConstraintsFix : object {
    private IList`1<ITypeParameterConstraintsClause> myConstraints;
    private IEnumerable`1<IBulbAction> Items { get; }
    public CommonConstraintsFix(MismatchPartsTypeParameterConstraintsError error);
    private IEnumerable`1<IBulbAction> get_Items();
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
private IClassLikeDeclaration GetClassLikeDeclaration();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CommonTypeParamFix : object {
    [NullableAttribute("2")]
private ITypeParameterDeclaration myDeclaration;
    private IEnumerable`1<IBulbAction> Items { get; }
    public CommonTypeParamFix(DifferentPartTypeParameterNameError error);
    private IEnumerable`1<IBulbAction> get_Items();
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CompareWithDefaultValueFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private ICSharpExpression myExpression;
    [NullableAttribute("2")]
private IType myTargetType;
    public string Text { get; }
    public CompareWithDefaultValueFix(CannotImplicitlyConvertTypeError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CompareWithNullFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private IIsExpression myIsExpression;
    public string Text { get; }
    public CompareWithNullFix(ConvertTypeCheckToNullCheckWarning error);
    public CompareWithNullFix(IsExpressionAlwaysTrueDynamicWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.ConditionalAccessToExpressionAction")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ConditionalAccessToExpressionFix : ModernScopedQuickFixBase {
    [NullableAttribute("2")]
private IConditionalAccessExpression myConditionalAccessExpression;
    public string Text { get; }
    public ConditionalAccessToExpressionFix(ConditionalAccessExpressionCannotBeAssignedError error);
    public ConditionalAccessToExpressionFix(ConditionalAccessIncrementDecrementOperandError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [NullableContextAttribute("2")]
[ContractAnnotationAttribute("null => null")]
private static ICSharpExpression GetAssigmentLikeExpressionByDest(ICSharpExpression expression);
    [CompilerGeneratedAttribute]
internal static IReferenceExpression <ExecutePsiTransaction>g__ExtractVariableAndGetReferenceExpression|7_0(ICSharpExpression conditionalQualifierExpression, <>c__DisplayClass7_0& );
    [CompilerGeneratedAttribute]
internal static bool <ExecutePsiTransaction>g__IsPureReference|7_1(ICSharpExpression expression);
    [CompilerGeneratedAttribute]
internal static IConditionalAccessExpression <ExecutePsiTransaction>g__DropConditionalsFromReferenceExpression|7_2(IConditionalAccessExpression accessExpression, <>c__DisplayClass7_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.ConditionalExpressionToAccessAction")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ConditionalExpressionToAccessFix : ModernScopedQuickFixBase {
    private IConditionalTernaryExpression myConditionalExpression;
    private IAccess myMergedAccess;
    public string Text { get; }
    public string ScopedText { get; }
    public ConditionalExpressionToAccessFix(MergeConditionalExpressionWarning error);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ConditionalToNormalAccessFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private IConditionalAccessExpression myConditionalAccess;
    public static Key InstanceKey;
    public string Text { get; }
    public ConditionalToNormalAccessFix(ConditionalAccessAlwaysNotNullWarning error);
    public ConditionalToNormalAccessFix(ConditionalAccessQualifierIsNonNullableAccordingToAPIContractWarning error);
    public ConditionalToNormalAccessFix(CannotApplyUnaryOperatorError error);
    private static ConditionalToNormalAccessFix();
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ContainsWithAddMergeFixBase : ModernScopedQuickFixBase {
    [CompilerGeneratedAttribute]
private IIfStatement <ifStatement>P;
    [CompilerGeneratedAttribute]
private IInvocationExpression <containsInvocation>P;
    [CompilerGeneratedAttribute]
private ICSharpExpression <conditionPart>P;
    [CompilerGeneratedAttribute]
private ICSharpStatement <addStatement>P;
    protected ContainsWithAddMergeFixBase(IIfStatement ifStatement, IInvocationExpression containsInvocation, ICSharpExpression conditionPart, ICSharpStatement addStatement);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    protected abstract virtual IInvocationExpression CreateAddInvocationExpression();
    protected virtual ITreeNode TryGetContextTreeNode();
    private ValueTuple`2<ICSharpExpression, IInvocationExpression> UpdateCondition(IInvocationExpression addInvocationExpression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ConvertCollectionInArgumentFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private ICSharpArgument myArgument;
    public string Text { get; }
    public ConvertCollectionInArgumentFix(IncorrectArgumentTypeError error);
    public virtual string get_Text();
    public static string GetText(ICSharpExpression expression);
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
public static bool IsAvailable(ICSharpExpression expression);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public static void ExecuteEx(ICSharpExpression expression);
    private static IType GetExpectedType(ICSharpExpression expression);
    private static string GetConversion(ICSharpExpression expression, ICollection`1<object> args, IDeclaredElement& element);
    private static IDeclaredType GeneralListType(IDeclaredType type);
    private static IDeclaredType GenericListType(IDeclaredType type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ConvertCollectionInArrayElementFix : ModernQuickFixBase {
    private ICSharpExpression myExpression;
    public string Text { get; }
    public ConvertCollectionInArrayElementFix(IncorrectArrayElementTypeError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ConvertCollectionInAssignmentFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private IAssignmentExpression myAssignmentExpression;
    public string Text { get; }
    public ConvertCollectionInAssignmentFix(IncorrectAssignmentTypeError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ConvertCollectionInInitializerFix : ModernQuickFixBase {
    private ICSharpExpression myValue;
    public string Text { get; }
    public ConvertCollectionInInitializerFix(IncorrectInitializerTypeError error);
    public ConvertCollectionInInitializerFix(DeclarationToInitializerTypeMismatchError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ConvertCollectionInReturnFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private IReturnValueHolder myReturnValueHolder;
    public string Text { get; }
    public ConvertCollectionInReturnFix(IncorrectReturnTypeError error);
    public ConvertCollectionInReturnFix(IncorrectYieldReturnTypeError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ConvertCollectionInYieldFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private IYieldStatement myYieldStatement;
    public string Text { get; }
    public ConvertCollectionInYieldFix(IncorrectYieldReturnTypeError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ConvertEscapeSequenceFix : ModernScopedQuickFixBase {
    private ITokenNode myLiteralNode;
    private DocumentRange mySourceRange;
    private string myFixedTextPreview;
    private EscapeMode myEscapeMode;
    public string Text { get; }
    public string ScopedText { get; }
    public FileCollectorInfo FileCollectorInfo { get; }
    protected ConvertEscapeSequenceFix(ITokenNode literalNode, DocumentRange sourceRange, string fixedTextPreview, EscapeMode escapeMode);
    public ConvertEscapeSequenceFix(CanSimplifyStringEscapeSequenceWarning warning);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual FileCollectorInfo get_FileCollectorInfo();
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ConvertIfDoToWhileFix : ModernQuickFixBase {
    private IIfStatement myIfStatement;
    public string Text { get; }
    public ConvertIfDoToWhileFix(ConvertIfDoToWhileWarning warning);
    public virtual string get_Text();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ConvertIfToOrFix : ModernQuickFixBase {
    private IIfStatement myIfStatement;
    private ICSharpExpression myExpr1;
    private ICSharpExpression myExpr2;
    public string Text { get; }
    public ConvertIfToOrFix(ConvertIfToOrExpressionWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ConvertInitOnlyToRegularSetterFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private IAccessorDeclaration myDeclaration;
    public string Text { get; }
    [NullableContextAttribute("2")]
private ConvertInitOnlyToRegularSetterFix(IAccessorDeclaration declaration);
    public ConvertInitOnlyToRegularSetterFix(InitOnlyAssignmentError error);
    public ConvertInitOnlyToRegularSetterFix(InitOnlySetterOnStaticMemberError error);
    public ConvertInitOnlyToRegularSetterFix(InitOnlySetterRequiredTypeNotResolvedError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.Misc.ConvertRegularStringInterpolationToVerbatimAction")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ConvertRegularStringInterpolationToVerbatimFix : ModernQuickFixBase {
    private IInterpolatedStringExpression myInterpolatedString;
    public string Text { get; }
    public ConvertRegularStringInterpolationToVerbatimFix(StringInterpolationLineBreakError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ConvertStringInArgumentFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private ICSharpExpression myExpression;
    public string Text { get; }
    public ConvertStringInArgumentFix(IncorrectArgumentTypeError error);
    public virtual string get_Text();
    public static string GetText(ICSharpExpression expression);
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
public static bool IsAvailable(ICSharpExpression expression);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public static void ExecuteEx(ICSharpExpression expression);
    private static IMethod GetConvertMethod(ICSharpExpression expression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ConvertStringInArrayElementFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private ICSharpExpression myExpression;
    public string Text { get; }
    public ConvertStringInArrayElementFix(IncorrectArrayElementTypeError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ConvertStringInAssignmentFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private ICSharpExpression myAssignmentSourceExpression;
    public string Text { get; }
    public ConvertStringInAssignmentFix(IncorrectAssignmentTypeError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ConvertStringInDimensionFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private ICSharpExpression myExpression;
    public string Text { get; }
    public ConvertStringInDimensionFix(NonIntegerArrayCreationParameterError error);
    public ConvertStringInDimensionFix(CannotImplicitlyConvertTypeError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ConvertStringInInitializerFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private ICSharpExpression myValue;
    public string Text { get; }
    public ConvertStringInInitializerFix(IncorrectInitializerTypeError error);
    public ConvertStringInInitializerFix(DeclarationToInitializerTypeMismatchError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ConvertStringInReturnFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private ICSharpExpression myExpression;
    public string Text { get; }
    public ConvertStringInReturnFix(IncorrectReturnTypeError error);
    public ConvertStringInReturnFix(IncorrectYieldReturnTypeError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.SwitchStatementToExpressionAction")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ConvertSwitchStatementToSwitchExpressionFix : ModernScopedQuickFixBase {
    private SwitchStatementToExpressionTransformation myTransformation;
    private ISwitchStatement mySwitchStatement;
    public string Text { get; }
    public ConvertSwitchStatementToSwitchExpressionFix(ConvertSwitchStatementToSwitchExpressionWarning convertSwitchStatementToSwitchExpressionWarning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ConvertToAsciiSequenceFix : ModernScopedQuickFixBase {
    private ITokenNode myLiteralNode;
    private DocumentRange mySourceRange;
    public string Text { get; }
    public FileCollectorInfo FileCollectorInfo { get; }
    public ConvertToAsciiSequenceFix(VariableLengthStringHexEscapeSequenceWarning warning);
    public virtual string get_Text();
    public virtual FileCollectorInfo get_FileCollectorInfo();
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.ConvertToBlockScopedNamespaceAction")]
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ConvertToBlockScopedNamespaceFix : ModernQuickFixBase {
    [CompilerGeneratedAttribute]
private ICSharpNamespaceDeclaration <namespaceDeclaration>P;
    public string Text { get; }
    public ConvertToBlockScopedNamespaceFix(ICSharpNamespaceDeclaration namespaceDeclaration);
    public ConvertToBlockScopedNamespaceFix(MultipleFileScopedNamespacesError error);
    public ConvertToBlockScopedNamespaceFix(BothFileScopedAndBlockScopedNamespaceInFileError error);
    public ConvertToBlockScopedNamespaceFix(FileScopedNamespaceNotFirstDeclarationError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ConvertToDefaultSwitchCaseFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private ISwitchCaseLabel mySwitchCaseLabel;
    public string Text { get; }
    public ConvertToDefaultSwitchCaseFix(DefaultLiteralInSwitchCaseError error);
    public ConvertToDefaultSwitchCaseFix(DefaultLiteralInPatternError error);
    public virtual string get_Text();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
    [PureAttribute]
private bool HasDefaultLabel();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ConvertToHexEscapeSequenceFix : ConvertEscapeSequenceFix {
    private static InvisibleAnchor ourAnchor;
    private Type myHighlightingType;
    public string ScopedText { get; }
    public ConvertToHexEscapeSequenceFix(StringEscapeSequenceEscapeUnavailableError error);
    public ConvertToHexEscapeSequenceFix(VariableLengthStringHexEscapeSequenceWarning warning);
    private static ConvertToHexEscapeSequenceFix();
    public virtual string get_ScopedText();
    protected virtual IScopedFixingStrategy GetScopedFixingStrategy(ISolution solution, IHighlighting highlighting);
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ConvertToLocalVariableFix : QuickFixBase {
    private IFieldDeclaration myFieldDeclaration;
    public string Text { get; }
    public bool IsReadOnly { get; }
    public ConvertToLocalVariableFix(PrivateFieldCanBeConvertedToLocalVariableWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    public sealed virtual bool get_IsReadOnly();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ConvertToMethodFix : ModernQuickFixBase {
    private static string FROM;
    private static string TO;
    [NullableAttribute("2")]
private IConversionOperatorDeclaration myConversionOperatorDeclaration;
    private string myPrefix;
    private string MethodName { get; }
    public string Text { get; }
    public ConvertToMethodFix(ConversionToInterfaceError error);
    public ConvertToMethodFix(ConversionToObjectError error);
    public ConvertToMethodFix(ConversionFromInterfaceError error);
    public ConvertToMethodFix(ConversionFromObjectError error);
    public ConvertToMethodFix(ConversionToDerivedClassError error);
    public ConvertToMethodFix(ConversionToBaseClassError error);
    public ConvertToMethodFix(ConversionFromDerivedClassError error);
    public ConvertToMethodFix(ConversionFromBaseClassError error);
    public ConvertToMethodFix(NoEnclosingTypeInConversionOperatorError error);
    private string get_MethodName();
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static IConversionOperatorDeclaration GetDeclaration(ITypeUsage typeUsage);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ConvertToNewFix : ModernQuickFixBase {
    private IArrayInitializer myInitializer;
    public string Text { get; }
    public ConvertToNewFix(InvalidArrayInitializerError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private void SetInitializer(IArrayCreationExpression creationExpression);
    private static IArrayType OuterType(IArrayInitializer arrayInitializer);
    [NullableContextAttribute("2")]
private static IArrayType InnerType(IArrayInitializer arrayInitializer, int rank);
    private static IArrayType FindType(IArrayInitializer arrayInitializer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ConvertToPrimaryConstructorFix : ModernScopedNonIncrementalQuickFixBase {
    private IConstructorDeclaration myConstructorDeclaration;
    private IReadOnlyList`1<IConstructor> mySecondaryConstructors;
    private bool myRewriteToInitializers;
    public string Text { get; }
    public string ScopedText { get; }
    public ConvertToPrimaryConstructorFix(ConvertToPrimaryConstructorWarning warning);
    public ConvertToPrimaryConstructorFix(ConvertConstructorToMemberInitializersWarning warning);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static void FormatPrimaryConstructorDeclaration(IClassLikeDeclaration typeDeclaration, IPrimaryConstructorDeclaration primaryConstructorDeclaration);
    private static Dictionary`2<IParameter, string> CollectRecordCtorParametersRenamesMap(ClassInitializationInfo initializationInfo);
    private static IReadOnlyList`1<ValueTuple`2<IParameter, ICSharpTypeMemberDeclaration>> MoveAssignmentsToInitializers(IClassLikeDeclaration typeDeclaration, ClassInitializationInfo initializationInfo);
    private static void TryRemoveRedundantExplicitFields(IClassLikeDeclaration typeDeclaration, IReadOnlyList`1<ValueTuple`2<IParameter, ICSharpTypeMemberDeclaration>> membersInitializedByParameters);
    private static void TryRemoveRedundantRecordProperties(IRecordDeclaration recordDeclaration, IReadOnlyList`1<ValueTuple`2<IParameter, ICSharpTypeMemberDeclaration>> membersInitializedByParameters);
    private void TransferBaseArgumentsList(IClassLikeDeclaration typeDeclaration);
    private void TransferConstructorAttributes(IClassLikeDeclaration typeDeclaration, IConstructorDeclaration constructorDeclaration);
    private void RenameParametersToCorrespondingMemberNames(IRecordDeclaration recordDeclaration, Dictionary`2<IParameter, string> renamesMap);
    private static IReadOnlyList`1<IDeclaredElement> GetInitializedDestinationsInParametersOrder(IConstructor primaryCandidate, ClassInitializationInfo primaryInitializationInfo);
    private static void RedirectSecondaryToPrimary(IConstructor secondaryConstructor, IReadOnlyList`1<IDeclaredElement> destinationsInOrder, IConstructor primaryCandidate);
    private void RenameParametersAccordingToNamingStyle(IPrimaryConstructorDeclaration primaryConstructorDeclaration, IConstructorDeclaration sourceConstructorDeclaration);
    [CompilerGeneratedAttribute]
internal static void <TryRemoveRedundantRecordProperties>g__RemovePropertyDeclaration|15_0(<>c__DisplayClass15_0& , <>c__DisplayClass15_1& , <>c__DisplayClass15_2& );
    [CompilerGeneratedAttribute]
internal static IConstructorInitializer <RedirectSecondaryToPrimary>g__EmitInitializer|21_1(bool useExplicitTypesForDefaultValues, <>c__DisplayClass21_0& );
    [CompilerGeneratedAttribute]
internal static IAssignmentExpression <RedirectSecondaryToPrimary>g__RemoveTupleComponent|21_2(ITupleComponent sourceTupleComponent);
    [CompilerGeneratedAttribute]
internal static void <RedirectSecondaryToPrimary>g__RemoveOrCleanupTupleAssignment|21_3(IAssignmentExpression tupleAssignment, <>c__DisplayClass21_0& );
    [CompilerGeneratedAttribute]
internal static void <RedirectSecondaryToPrimary>g__RemoveAssignment|21_4(IAssignmentExpression assignmentExpression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ConvertToPropertyFix : ModernQuickFixBase {
    private IIndexerDeclaration myDeclaration;
    public string Text { get; }
    public ConvertToPropertyFix(IndexerMustHaveParametersError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.Misc.ConvertRegularToRawStringAction")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.Misc.ConvertVerbatimToRawStringAction")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.Misc.ConvertRegularToRawInterpolatedStringAction")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.Misc.ConvertVerbatimToRawInterpolatedStringAction")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ConvertToRawStringFix : ModernScopedQuickFixBase {
    private IStringLiteralOwner myLiteralOwner;
    public string Text { get; }
    public string ScopedText { get; }
    public ConvertToRawStringFix(UseRawStringWarning warning);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.ConvertToUsingDeclarationAction")]
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ConvertToUsingDeclarationScopedFix : ModernScopedQuickFixBase {
    [NullableAttribute("2")]
private IDeclarationStatement myDeclarationStatement;
    [NullableAttribute("2")]
private IUsingStatement myUsingStatement;
    private string myText;
    public string Text { get; }
    public ConvertToUsingDeclarationScopedFix(ConvertToUsingDeclarationWarning warning);
    public ConvertToUsingDeclarationScopedFix(NotDisposedResourceWarning warning);
    public ConvertToUsingDeclarationScopedFix(GenericEnumeratorNotDisposedWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
private bool CanAwaitDisposable(ILocalVariableDeclaration& localVariableDeclaration);
    [NullableContextAttribute("2")]
protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.AddUsingAction")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.ConvertToUsingStatementAction")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ConvertToUsingStatementFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private IDeclarationStatement myDeclarationStatement;
    private string myText;
    private bool myAllowAsync;
    public string Text { get; }
    public ConvertToUsingStatementFix(UsingDeclarationInSwitchSectionError error);
    public ConvertToUsingStatementFix(NotDisposedResourceWarning error);
    public ConvertToUsingStatementFix(GenericEnumeratorNotDisposedWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
private bool CanAwaitDisposable(ILocalVariableDeclaration& localVariableDeclaration);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ConvertToUsingStatementsAlongGotoJumpFix : ModernScopedQuickFixBase {
    private IGotoStatement myGotoStatement;
    private IDeclaration myLabelDeclaration;
    public string Text { get; }
    public ConvertToUsingStatementsAlongGotoJumpFix(GotoCannotJumpThroughUsingBeforeError error);
    public ConvertToUsingStatementsAlongGotoJumpFix(GotoCannotJumpThroughUsingAfterError error);
    public virtual string get_Text();
    protected virtual ITreeNode TryGetContextTreeNode();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ConvertWithExpressionToObjectCreationFix : ModernScopedQuickFixBase {
    private IWithExpression myWithExpression;
    public string Text { get; }
    public ConvertWithExpressionToObjectCreationFix(WithExpressionModifiesAllTypeMembersWarning warning);
    public ConvertWithExpressionToObjectCreationFix(WithExpressionModifiesAllTupleComponentsWarning warning);
    public virtual string get_Text();
    protected virtual ITreeNode TryGetContextTreeNode();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static ITupleExpression MakeTupleExpression(TreeNodeCollection`1<IWithInitializerAssignment> initializerAssignments, CSharpElementFactory factory, FactoryArgumentsBuilder argumentsBuilder);
    private ICSharpExpression CreateUsingObjectInitializer(TreeNodeCollection`1<IWithInitializerAssignment> initializerAssignments, CSharpElementFactory factory, FactoryArgumentsBuilder argumentsBuilder);
    private IObjectCreationExpression CreateUsingPrimaryConstructor(TreeNodeCollection`1<IWithInitializerAssignment> initializerAssignments, CSharpElementFactory factory, FactoryArgumentsBuilder argumentsBuilder);
    private static void AppendCommaSeparatedNamedElements(TreeNodeCollection`1<IWithInitializerAssignment> initializerAssignments, FactoryArgumentsBuilder argumentsBuilder);
    [CompilerGeneratedAttribute]
private ICSharpExpression <ExecutePsiTransaction>g__MakeObjectCreationExpression|7_0(<>c__DisplayClass7_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CopyDefaultValueFromBaseFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private ITypeMemberRegularParameterDeclaration myBaseParameter;
    [NullableAttribute("2")]
private ITypeMemberRegularParameterDeclaration myParameterDeclaration;
    public string Text { get; }
    public CopyDefaultValueFromBaseFix(OptionalParameterHierarchyMismatch_MissingWarning error);
    public CopyDefaultValueFromBaseFix(OptionalParameterHierarchyMismatch_MismatchWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [NullableContextAttribute("2")]
private DefaultValue GetNewDefaultValue();
    private ICSharpExpression CreateDefaultValueExpression(DefaultValue newDefaultValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CopyElementsBeforeEnumerationFix : ModernQuickFixBase {
    private IForeachStatement myForeachStatement;
    public string Text { get; }
    public CopyElementsBeforeEnumerationFix(PossibleInvalidOperationExceptionCollectionWasModifiedWarning warning);
    public virtual string get_Text();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
private IMethod GetToListMethod();
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CopyInterfaceAccessorBodyFix : CopyInterfaceMemberFixBase {
    private IAccessorDeclaration myAccessor;
    public CopyInterfaceAccessorBodyFix(InterfaceAccessorWithBodyError error);
    public CopyInterfaceAccessorBodyFix(AbstractAccessorWithBodyError error);
    public CopyInterfaceAccessorBodyFix(CSharp80LanguageFeature2Error error);
    public CopyInterfaceAccessorBodyFix(RuntimeAndLanguageVersionDoNotSupportDefaultInterfaceImplementationError error);
    public CopyInterfaceAccessorBodyFix(RuntimeDoesNotSupportDefaultInterfaceImplementationError error);
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual void SetBody(ITypeMemberDeclaration memberDeclaration);
    protected virtual void PostExecute();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CopyInterfaceMemberBodyFix : CopyInterfaceMemberFixBase {
    [NullableContextAttribute("2")]
private CopyInterfaceMemberBodyFix(IClassMemberDeclaration declaration);
    public CopyInterfaceMemberBodyFix(InterfaceMemberWithBodyError error);
    public CopyInterfaceMemberBodyFix(CSharp80LanguageFeature2Error error);
    public CopyInterfaceMemberBodyFix(RuntimeAndLanguageVersionDoNotSupportDefaultInterfaceImplementationError error);
    public CopyInterfaceMemberBodyFix(RuntimeDoesNotSupportDefaultInterfaceImplementationError error);
    public CopyInterfaceMemberBodyFix(AbstractMemberWithBodyError error);
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual void SetBody(ITypeMemberDeclaration memberDeclaration);
    protected virtual void PostExecute();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CopyInterfaceMemberFixBase : ImplementMemberBase {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IClassMemberDeclaration <Declaration>k__BackingField;
    [NullableAttribute("2")]
protected IClassMemberDeclaration Declaration { get; }
    public string Text { get; }
    protected string SelectPartText { get; }
    protected string GeneratorKind { get; }
    [NullableContextAttribute("2")]
protected CopyInterfaceMemberFixBase(IClassMemberDeclaration declaration);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected IClassMemberDeclaration get_Declaration();
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    [NullableContextAttribute("2")]
private static IOverridableMember FindOverridableMember(ITypeMemberDeclaration declaration);
    protected virtual IOverridableMember GetMemberToImplement();
    protected virtual List`1<ITypeElement> GetTargetTypes(IProgressIndicator progress);
    protected virtual string get_SelectPartText();
    protected virtual string get_GeneratorKind();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CopyLocalFix : ModernQuickFixBase {
    [CompilerGeneratedAttribute]
private IReferenceExpression <expression>P;
    public string Text { get; }
    public CopyLocalFix(IReferenceExpression expression);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    private static bool HasWriteUsages(ITreeNode body, IDeclaredElement declaredElement);
    private static bool IsWriteAccess(IReference reference);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CopyObsoleteFromBaseFix : ModernQuickFixBase {
    private IClassMemberDeclaration myDeclaration;
    private IOverridableMember myOverriddenMember;
    public string Text { get; }
    public CopyObsoleteFromBaseFix(OverrideObsoleteMemberWithoutObsoleteAttributeWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CopyToLocalVar2Fix : ModernQuickFixBase {
    [NullableAttribute("2")]
private ICSharpExpression myExpression;
    private bool myIsPrimaryParameter;
    public string Text { get; }
    public CopyToLocalVar2Fix(CannotUseThisInClosureInStructError error);
    public CopyToLocalVar2Fix(CannotUsePrimaryParameterInClosureInStructError error);
    public CopyToLocalVar2Fix(CannotUsePrimaryParameterInClosureAlsoUsedInInstanceMemberInStructError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
private ICSharpClosure GetTopmostClosure();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CopyToLocalVarFix : ModernQuickFixBase {
    private IReferenceExpression myExpression;
    private IDeclaredElement myDeclaredElement;
    public string Text { get; }
    public CopyToLocalVarFix(AccessToByRefParameterFromClosureError error);
    public CopyToLocalVarFix(AccessToRefLocalFromClosureError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [NullableContextAttribute("2")]
private ICSharpClosure GetTopmostClosure();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CorrectIndentationFix : ModernQuickFixBase {
    [CompilerGeneratedAttribute]
private MisleadingBodyLikeStatementWarning <error>P;
    public string Text { get; }
    public CorrectIndentationFix(MisleadingBodyLikeStatementWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.QuickFixes.AddTypeArgListFix")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CorrectInvocationTypeArgumentsFix : ModernQuickFixBase {
    private IDeclaredElement myDeclaredElement;
    private IReference myReference;
    public string Text { get; }
    public CorrectInvocationTypeArgumentsFix(TypeInferenceError error);
    public CorrectInvocationTypeArgumentsFix(TypeParametersNumberMismatchError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.QuickFixes.AddTypeArgListFix")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CorrectInvocationTypeArgumentsMultipleCandidatesFix : ModernQuickFixBase {
    private IMethod[] myMethods;
    private IReference myReference;
    public string Text { get; }
    public CorrectInvocationTypeArgumentsMultipleCandidatesFix(TypeInferenceMultipleCandidatesError error);
    public CorrectInvocationTypeArgumentsMultipleCandidatesFix(TypeParametersNumberMismatchMultipleCandidatesError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private UseMethodBulbAction <CreateBulbItems>b__7_0(IMethod m);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CorrectRefModifierPlacementFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private ITokenNode myRefReturnModifier;
    public string Text { get; }
    public CorrectRefModifierPlacementFix(RefMisplacedInModifiersListError error);
    public CorrectRefModifierPlacementFix(RefReadonlyMisplacedInModifiersListError error);
    public CorrectRefModifierPlacementFix(InvalidInterfaceMemberModifierError error);
    public CorrectRefModifierPlacementFix(OverridableMemberCannotBeReadonlyError error);
    public CorrectRefModifierPlacementFix(CSharp80LanguageFeatureError error);
    [NullableContextAttribute("2")]
[PureAttribute]
private static ITokenNode IsReadonlyModifierInCSharp72(ITreeNode treeNode);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CorrectStaticAccessFix : ModernQuickFixBase {
    private IReference myReference;
    public string Text { get; }
    public CorrectStaticAccessFix(StaticElementInNonStaticContextError error);
    public virtual string get_Text();
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [NullableContextAttribute("2")]
private ITypeMember GetTypeMember();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CqrsChangeNameFix : QuickFixBase {
    [NullableAttribute("2")]
private IDeclaredElement myElement;
    [NullableAttribute("2")]
private string mySuggestedName;
    private bool mySuggestedNameHasConflicts;
    public string Text { get; }
    public CqrsChangeNameFix(CqrsNamingRecommendationWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CqrsValidationsWarningsQuickFixRegistration : object {
    public IEnumerable`1<Type> Dependencies { get; }
    public sealed virtual IEnumerable`1<Type> get_Dependencies();
    public sealed virtual void Register(IQuickFixesRegistrar table);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CreateAbstractIndexerFromUsageAction : CreateIndexerFromUsageAction {
    public string Text { get; }
    public CreateAbstractIndexerFromUsageAction(IReference reference);
    public virtual string get_Text();
    [NullableContextAttribute("2")]
protected virtual ICreationTarget GetTarget();
    protected virtual CreatePropertyDeclarationContext CreateContext();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CreateAbstractMethodForDelegateAction : CreateMethodForDelegateAction {
    public CreateAbstractMethodForDelegateAction(IReference reference);
    [NullableContextAttribute("2")]
protected virtual ICreationTarget GetTarget();
    protected virtual CreateMethodDeclarationContext CreateContext();
    protected virtual string GetTextFormat();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CreateAbstractMethodFromUsageAction : CreateMethodFromUsageAction {
    [NullableContextAttribute("2")]
public CreateAbstractMethodFromUsageAction(IReference reference);
    [NullableContextAttribute("2")]
protected virtual ICreationTarget GetTarget();
    protected virtual CreateMethodDeclarationContext CreateContext();
    protected virtual string GetTextFormat();
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CreateAttributePropertyAction : CreateFromUsageActionBase2`2<CreatePropertyDeclarationContext, IReference> {
    public char Accelerator { get; }
    public string Text { get; }
    public CreateAttributePropertyAction(IReference reference);
    public virtual ICreatedElementConsistencyGroup GetConsistencyGroup();
    public virtual int GetPriority();
    protected virtual bool IsAvailableInternal();
    protected virtual CreatePropertyDeclarationContext CreateContext();
    protected virtual IntentionResult ExecuteIntention(CreatePropertyDeclarationContext context);
    public virtual char get_Accelerator();
    protected virtual ICreationTarget GetTarget();
    private static IClass GetContainerClass(IPropertyAssignment propertyAssignment);
    public virtual string get_Text();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CreateBaseMemberFix : ModernQuickFixBase {
    private ITypeMemberDeclaration myMemberDeclaration;
    public string Text { get; }
    public CreateBaseMemberFix(NoSuitableMemberForOverrideError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [NullableContextAttribute("2")]
[PureAttribute]
private IClass GetSuperClass();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CreateCollectionBuilderMethodFix : ModernQuickFixBase {
    private ITreeNode myContextNode;
    private IType myCollectionType;
    public string Text { get; }
    public CreateCollectionBuilderMethodFix(NotResolvedCollectionExpressionCreateMethodReferenceError error);
    public CreateCollectionBuilderMethodFix(NotResolvedParamsCollectionCreateMethodReferenceError error);
    public virtual string get_Text();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CreateConstantFromUsageAction : CreateFieldLikeFromUsageAction`1<CreateConstantDeclarationContext> {
    public string Text { get; }
    public CreateConstantFromUsageAction(IReference reference);
    public virtual string get_Text();
    public virtual ICreatedElementConsistencyGroup GetConsistencyGroup();
    protected virtual bool IsAvailableInternal();
    private bool MakeSenseToUSeConstant(ICSharpExpression expression);
    protected virtual CreateConstantDeclarationContext CreateContext();
    protected virtual IntentionResult ExecuteIntention(CreateConstantDeclarationContext context);
    [NullableContextAttribute("2")]
protected virtual ICreationTarget GetTarget();
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CreateConstructorFromUsageAction : CreateConstructorFromUsageActionBase {
    [NullableContextAttribute("1")]
public CreateConstructorFromUsageAction(IReference reference);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CreateConstructorFromUsageActionBase : CreateFromUsageActionBase2`2<CreateConstructorDeclarationContext, IReference> {
    [NullableAttribute("2")]
private ICSharpTreeNode myTreeNode;
    public string Text { get; }
    protected CreateConstructorFromUsageActionBase(IReference reference);
    public virtual string get_Text();
    public virtual ICreatedElementConsistencyGroup GetConsistencyGroup();
    protected virtual bool IsAvailableInternal();
    [NullableContextAttribute("2")]
protected ITypeElement GetTypeElement();
    protected virtual CreateConstructorDeclarationContext CreateContext();
    protected virtual ICreationTarget GetTarget();
    protected virtual IntentionResult ExecuteIntention(CreateConstructorDeclarationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CreateDeconstructMethodFromDeconstructionAction : CreateFromUsageActionBase2`2<CreateMethodDeclarationContext, IReference> {
    [CompilerGeneratedAttribute]
private IDeconstructionReference <reference>P;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public string Text { get; }
    public CreateDeconstructMethodFromDeconstructionAction(IDeconstructionReference reference, string typePresentableName);
    [CompilerGeneratedAttribute]
public virtual string get_Text();
    public virtual ICreatedElementConsistencyGroup GetConsistencyGroup();
    protected virtual bool IsAvailableInternal();
    [NullableContextAttribute("2")]
protected virtual ICreationTarget GetTarget();
    protected virtual CreateMethodDeclarationContext CreateContext();
    private ParameterInfoBase[] GetExpectedDeconstructionParameters();
    [PureAttribute]
private static string SuggestName(ITupleComponent tupleComponent);
    [PureAttribute]
private static string SuggestName(ISubpattern subpattern);
    protected virtual IntentionResult ExecuteIntention(CreateMethodDeclarationContext context);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CreateDefaultConstructorAction : CreateDefaultConstructorActionBase {
    private ITypeElement myBaseType;
    protected ITypeElement BaseType { get; }
    protected AccessRights AccessRights { get; }
    [NullableContextAttribute("1")]
public CreateDefaultConstructorAction(ConstructorInitializerMissingError error);
    [NullableContextAttribute("1")]
public CreateDefaultConstructorAction(NoDefaultConstructorInBaseClassError error);
    protected virtual ITypeElement get_BaseType();
    protected virtual AccessRights get_AccessRights();
    protected virtual bool IsAvailableInternal();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CreateDefaultConstructorForTypeArgumentAction : CreateDefaultConstructorActionBase {
    private IDeclaredType myArgumentType;
    protected ITypeElement BaseType { get; }
    protected AccessRights AccessRights { get; }
    [NullableContextAttribute("1")]
public CreateDefaultConstructorForTypeArgumentAction(TypeArgumentHasNoDefaultConstructorError error);
    protected virtual ITypeElement get_BaseType();
    protected virtual AccessRights get_AccessRights();
    protected virtual bool IsAvailableInternal();
    private IConstructor FindBadParameterlessConstructor();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CreateDefiningDeclarationFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private IMethodDeclaration myMethodDeclaration;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<IDeclaration> myTargetTypeDeclarations;
    public string Text { get; }
    public CreateDefiningDeclarationFix(PartialMethodWithoutDefiningDeclarationError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual BulbActionCommandSequence GetCommandSequence();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [CompilerGeneratedAttribute]
private IBulbActionCommand <GetCommandSequence>b__6_0(ISolution _, ITextControl _, IDeclaration targetTypeDeclaration);
}
public abstract class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CreateDelegateFromUsageBase : CreateFromUsageActionBase2`2<CreateDelegateDeclarationContext, IReference> {
    [CompilerGeneratedAttribute]
private IReferenceName <ReferenceName>k__BackingField;
    protected IReferenceName ReferenceName { get; }
    public string Text { get; }
    protected CreateDelegateFromUsageBase(IReference reference);
    [CompilerGeneratedAttribute]
protected IReferenceName get_ReferenceName();
    protected virtual bool IsAvailableInternal();
    public static bool IsDelegate(IReferenceName reference);
    public virtual ICreatedElementConsistencyGroup GetConsistencyGroup();
    protected virtual CreateDelegateDeclarationContext CreateContext();
    protected virtual IntentionResult ExecuteIntention(CreateDelegateDeclarationContext context);
    public virtual string get_Text();
    protected abstract virtual bool GetIsNested();
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CreateDelegateFromUsageItem : CreateDelegateFromUsageBase {
    [NullableContextAttribute("1")]
public CreateDelegateFromUsageItem(IReference reference);
    public virtual int GetPriority();
    protected virtual bool IsAvailableInternal();
    protected virtual bool GetIsNested();
    [NullableContextAttribute("2")]
protected virtual ICreationTarget GetTarget();
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CreateEmptyConstructorAndAddMemberInitializersFix : ModernScopedQuickFixBase {
    [NotNullAttribute]
private IClassLikeDeclaration myStructOrRecordDeclaration;
    public string Text { get; }
    public CreateEmptyConstructorAndAddMemberInitializersFix(StructHasInitializersAndNoDeclaredConstructorError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private IBlock CreateEmptyConstructor(IClassLikeDeclaration structOrRecordDeclaration, CSharpElementFactory factory);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CreateEnumMemberFromUsageAction : CreateFromUsageActionBase2`2<CreateEnumMemberDeclarationContext, IReference> {
    [NullableAttribute("2")]
private IReferenceExpression ReferenceExpression { get; }
    public string Text { get; }
    public CreateEnumMemberFromUsageAction(IReference reference);
    [NullableContextAttribute("2")]
private IReferenceExpression get_ReferenceExpression();
    public virtual ICreatedElementConsistencyGroup GetConsistencyGroup();
    protected virtual bool IsAvailableInternal();
    protected virtual CreateEnumMemberDeclarationContext CreateContext();
    public virtual string get_Text();
    protected virtual IntentionResult ExecuteIntention(CreateEnumMemberDeclarationContext context);
    [NullableContextAttribute("2")]
protected virtual ICreationTarget GetTarget();
    private bool CheckResolveResult();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CreateEventFromUsageAction : CreateFromUsageActionBase2`2<CreateEventDeclarationContext, IReference> {
    public char Accelerator { get; }
    public string Text { get; }
    public CreateEventFromUsageAction(IReference reference);
    public virtual ICreatedElementConsistencyGroup GetConsistencyGroup();
    public virtual int GetPriority();
    protected virtual bool IsAvailableInternal();
    private bool CheckResolveResult();
    protected virtual CreateEventDeclarationContext CreateContext();
    protected virtual IntentionResult ExecuteIntention(CreateEventDeclarationContext context);
    public virtual char get_Accelerator();
    [NullableContextAttribute("2")]
private static IExpressionType GetExpressionType(IAssignmentExpression assignmentExpression);
    [NullableContextAttribute("2")]
private static IDeclaredType GetPreciseEventType(IType trueType);
    [NullableContextAttribute("2")]
protected virtual ICreationTarget GetTarget();
    public virtual string get_Text();
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CreateFieldFromObjectCreationAction : CreateFromUsageActionBase2`2<CreateFieldDeclarationContext, IReference> {
    public string Text { get; }
    public CreateFieldFromObjectCreationAction(IReference reference);
    protected virtual bool IsAvailableInternal();
    public virtual ICreatedElementConsistencyGroup GetConsistencyGroup();
    protected virtual ICreationTarget GetTarget();
    protected virtual CreateFieldDeclarationContext CreateContext();
    protected virtual IntentionResult ExecuteIntention(CreateFieldDeclarationContext context);
    [CanBeNullAttribute]
[PureAttribute]
private static IPropertyInitializer GetPropertyInitializer(IReference reference);
    [CanBeNullAttribute]
private static ITypeElement GetContainerObject(IInitializerElement memberInitializer);
    public virtual string get_Text();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CreateFieldFromUsageAction : CreateFieldLikeFromUsageAction`1<CreateFieldDeclarationContext> {
    public string Text { get; }
    public CreateFieldFromUsageAction(IReference reference);
    public virtual string get_Text();
    public virtual ICreatedElementConsistencyGroup GetConsistencyGroup();
    protected virtual bool IsAvailableInternal();
    protected virtual CreateFieldDeclarationContext CreateContext();
    protected virtual IntentionResult ExecuteIntention(CreateFieldDeclarationContext context);
    [NullableContextAttribute("2")]
protected virtual ICreationTarget GetTarget();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CreateFieldFromWithAssignmentAction : CreateFromUsageActionBase2`2<CreateFieldDeclarationContext, IReference> {
    public string Text { get; }
    public CreateFieldFromWithAssignmentAction(IReference reference);
    protected virtual bool IsAvailableInternal();
    public virtual ICreatedElementConsistencyGroup GetConsistencyGroup();
    protected virtual ICreationTarget GetTarget();
    protected virtual CreateFieldDeclarationContext CreateContext();
    protected virtual IntentionResult ExecuteIntention(CreateFieldDeclarationContext context);
    [PureAttribute]
private static IWithInitializerAssignment GetWithInitializerAssignment(IReference reference);
    private static ITypeElement GetContainerObject(IWithInitializerAssignment withInitializerAssignment);
    public virtual string get_Text();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CreateFieldLikeFromUsageAction`1 : CreateFromUsageActionBase2`2<TContext, IReference> {
    [NullableAttribute("2")]
protected IReferenceExpression ReferenceExpression { get; }
    protected CreateFieldLikeFromUsageAction`1(IReference reference);
    [NullableContextAttribute("2")]
protected IReferenceExpression get_ReferenceExpression();
    protected string GetShortName();
    protected ICreatedElementConsistencyGroup GetConsistencyGroup(NamedElementKinds kind);
    protected bool HasNoConflictsWithOtherMembers();
    protected IEnumerable`1<ICSharpExpression> CollectUsages(ITreeNode scope);
    private static IEnumerable`1<ICSharpExpression> FilterUsages(IEnumerable`1<IReferenceExpression> expressions);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CreateFixedPatternMethodFromDeclarationAction : CreateFromUsageActionBase2`2<CreateMethodDeclarationContext, IFixedPatternMethodReference> {
    public string Text { get; }
    public CreateFixedPatternMethodFromDeclarationAction(IFixedPatternMethodReference reference);
    public virtual string get_Text();
    public virtual ICreatedElementConsistencyGroup GetConsistencyGroup();
    protected virtual bool IsAvailableInternal();
    [NullableContextAttribute("2")]
protected virtual ICreationTarget GetTarget();
    protected virtual CreateMethodDeclarationContext CreateContext();
    protected virtual IntentionResult ExecuteIntention(CreateMethodDeclarationContext context);
    [NullableContextAttribute("2")]
[PureAttribute]
private IUnsafeCodeFixedPointerDeclaration GetFixedPointerDeclaration();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[UsedImplicitlyAttribute("8")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CreateFromUsageFix : CreateFromUsageFixBase {
    public CreateFromUsageFix(NotResolvedError error);
    public CreateFromUsageFix(DeconstructNotFoundError error);
    public CreateFromUsageFix(FixedPatternMethodNotFoundError error);
    public CreateFromUsageFix(InvalidFixedPatternMethodError error);
    public CreateFromUsageFix(AccessRightsError error);
    public CreateFromUsageFix(NotResolvedCollectionInitializerError error);
    public CreateFromUsageFix(NotResolvedCollectionExpressionDefaultConstructorReferenceError error);
    public CreateFromUsageFix(NotResolvedParamsCollectionDefaultCtorReferenceError error);
    public CreateFromUsageFix(NotResolvedParamsCollectionAddReferenceError error);
    public CreateFromUsageFix(IncorrectArgumentTypeError error);
    public CreateFromUsageFix(MultipleResolveCandidatesError error);
    public CreateFromUsageFix(IncorrectArgumentNumberError error);
    public CreateFromUsageFix(IncorrectArgumentsError error);
    public CreateFromUsageFix(IncorrectSignatureInDelegateCreationError error);
    public CreateFromUsageFix(NamedArgumentListDoesnotMatchParametersError error);
    public CreateFromUsageFix(NamedArgumentOutOfPositionFollowedByUnnamedArgumentError error);
    public CreateFromUsageFix(NotMethodAsDelegateCreationParameterError error);
    public CreateFromUsageFix(UnexpectedElementTypeError error);
    public CreateFromUsageFix(MethodGroupInvalidContextError error);
    public CreateFromUsageFix(DelegateTypeCouldNotBeInferredError error);
    public CreateFromUsageFix(ConstructorInitializerMissingError error);
    public CreateFromUsageFix(NoDefaultConstructorInBaseClassError error);
    public CreateFromUsageFix(TypeArgumentHasNoDefaultConstructorError error);
    public CreateFromUsageFix(IndexerNotResolvedError error);
    public CreateFromUsageFix(IndexerIncorrectArgumentNumberError error);
    [NullableContextAttribute("2")]
private static IReference InvokedFromArgument(ICSharpArgument argument);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CreateGetOnlyPropertyFromSubpatternItem : CreateGetSetPropertyFromSubpatternItem {
    public string Text { get; }
    [NullableContextAttribute("2")]
public CreateGetOnlyPropertyFromSubpatternItem(IReference reference);
    protected virtual CreatePropertyDeclarationContext CreateContext();
    public virtual string get_Text();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CreateGetOnlyPropertyFromTypeUsageItem : CreatePropertyBase {
    public string Text { get; }
    public CreateGetOnlyPropertyFromTypeUsageItem(IReference reference);
    protected virtual bool IsAvailableInternal();
    protected virtual CreatePropertyDeclarationContext CreateContext();
    public virtual string get_Text();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CreateGetSetAutoPropertyFromSubpatternItem : CreateGetSetPropertyFromSubpatternItem {
    public string Text { get; }
    public CreateGetSetAutoPropertyFromSubpatternItem(IReference reference);
    public virtual string get_Text();
    protected virtual bool IsAvailableInternal();
    protected virtual CreatePropertyDeclarationContext CreateContext();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CreateGetSetAutoPropertyFromTypeUsageItem : CreateGetSetPropertyFromTypeUsageItem {
    public string Text { get; }
    public CreateGetSetAutoPropertyFromTypeUsageItem(IReference reference);
    public virtual string get_Text();
    protected virtual bool IsAvailableInternal();
    protected virtual CreatePropertyDeclarationContext CreateContext();
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CreateGetSetAutoPropertyFromUsageItem : CreateGetSetPropertyFromUsageItem {
    public string Text { get; }
    public CreateGetSetAutoPropertyFromUsageItem(IReference reference);
    public virtual string get_Text();
    protected virtual bool IsAvailableInternal();
    protected virtual CreatePropertyDeclarationContext CreateContext();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CreateGetSetPropertyFromSubpatternItem : CreatePropertyBase {
    public string Text { get; }
    [NullableContextAttribute("2")]
public CreateGetSetPropertyFromSubpatternItem(IReference reference);
    protected virtual bool IsAvailableInternal();
    protected virtual CreatePropertyDeclarationContext CreateContext();
    public virtual string get_Text();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CreateGetSetPropertyFromTypeUsageItem : CreatePropertyBase {
    public string Text { get; }
    public CreateGetSetPropertyFromTypeUsageItem(IReference reference);
    protected virtual bool IsAvailableInternal();
    protected virtual CreatePropertyDeclarationContext CreateContext();
    public virtual string get_Text();
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CreateGetSetPropertyFromUsageItem : CreatePropertyBase {
    public string Text { get; }
    public CreateGetSetPropertyFromUsageItem(IReference reference);
    protected virtual bool IsAvailableInternal();
    protected virtual CreatePropertyDeclarationContext CreateContext();
    public virtual string get_Text();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CreateIndexerFromUsageAction : CreateFromUsageActionBase2`2<CreatePropertyDeclarationContext, IReference> {
    [NullableAttribute("2")]
private IElementAccessExpression myElementAccessExpression;
    public string Text { get; }
    public CreateIndexerFromUsageAction(IReference reference);
    public virtual string get_Text();
    protected virtual bool IsAvailableInternal();
    [NullableContextAttribute("2")]
private ITypeElement GetTypeElement();
    public virtual ICreatedElementConsistencyGroup GetConsistencyGroup();
    [NullableContextAttribute("2")]
protected virtual ICreationTarget GetTarget();
    protected virtual CreatePropertyDeclarationContext CreateContext();
    protected virtual IntentionResult ExecuteIntention(CreatePropertyDeclarationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CreateLocalFunctionFromUsageAction : CreateParametersOwnerFromUsageActionBase {
    public string Text { get; }
    public CreateLocalFunctionFromUsageAction(IReference reference);
    public virtual ICreatedElementConsistencyGroup GetConsistencyGroup();
    protected virtual bool IsAvailableInternal();
    protected virtual CreateMethodDeclarationContext CreateContext();
    [NullableContextAttribute("2")]
protected virtual ICreationTarget GetTarget();
    protected virtual IntentionResult ExecuteIntention(CreateMethodDeclarationContext context);
    public virtual string get_Text();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CreateLocalFunctionParameterFromUsageActionProvider : CreateParameterFromUsageActionProviderBase {
    public CreateLocalFunctionParameterFromUsageActionProvider(IReference reference);
    protected virtual bool IsSupportedDeclaration(ICSharpParametersOwnerDeclaration parametersOwnerDeclaration);
    protected virtual CreateParameterFromUsageBulbAction CreateBulbAction(IReference reference, IParametersOwner parametersOwner);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CreateLocalFunctionParameterFromUsageAndPullActionProvider : CreateLocalFunctionParameterFromUsageActionProvider {
    public CreateLocalFunctionParameterFromUsageAndPullActionProvider(IReference reference);
    protected virtual CreateParameterFromUsageBulbAction CreateBulbAction(IReference reference, IParametersOwner parametersOwner);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CreateLocalFunctionParameterFromUsageAndPullBulbAction : CreateParameterFromUsageAndPullBulbAction {
    public string Text { get; }
    public CreateLocalFunctionParameterFromUsageAndPullBulbAction(IReference reference, IParametersOwner parametersOwner);
    public virtual string get_Text();
    protected virtual ICSharpDeclaration GetContainingFunctionDeclaration(IReferenceExpression referenceExpression);
    protected virtual ICSharpParameterDeclaration CreateParameterDeclaration(IReferenceExpression referenceExpression, ParameterKind parameterKind, IType parameterType, string parameterName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CreateLocalFunctionParameterFromUsageBulbAction : CreateParameterFromUsageBulbAction {
    public string Text { get; }
    public CreateLocalFunctionParameterFromUsageBulbAction(IReference reference, IParametersOwner parametersOwner);
    public virtual string get_Text();
    protected virtual ICSharpDeclaration GetContainingFunctionDeclaration(IReferenceExpression referenceExpression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CreateLocalVarFromUsageAction : ModernBulbActionBase {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IReferenceExpression <ReferenceExpression>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IReference <Reference>k__BackingField;
    private bool InsideConstantExpression { get; }
    [NullableAttribute("2")]
private IReferenceExpression ReferenceExpression { get; }
    [NullableAttribute("2")]
private IReference Reference { get; }
    public string Text { get; }
    [NullableContextAttribute("2")]
public CreateLocalVarFromUsageAction(IReference reference);
    private bool get_InsideConstantExpression();
    [PureAttribute]
private static bool IsNamespaceAlias(IReferenceExpression referenceExpression);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private IReferenceExpression get_ReferenceExpression();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private IReference get_Reference();
    public virtual string get_Text();
    private bool IsAvailable();
    public sealed virtual ICreatedElementConsistencyGroup GetConsistencyGroup();
    public sealed virtual IReadOnlyList`1<IBulbAction> GetBulbItems();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private IDeclarationStatement GetDeclarationStatement(ICSharpStatement anchor, CSharpElementFactory factory, IReadOnlyList`1<ICSharpExpression> usages, Boolean& canBeVar);
    [NullableContextAttribute("2")]
private IStatementsOwner GetAnchor();
    public static IExpectedTypeConstraint VariableTypeConstraint(ITreeNode scope, IReferenceExpression referenceExpression, IEnumerable`1<ICSharpExpression> additionalUsages);
    private static IReadOnlyList`1<ICSharpExpression> CollectUsages(ITreeNode scope, IReferenceExpression referenceExpression);
    private static IReadOnlyList`1<ICSharpExpression> FilterUsages(IEnumerable`1<IReferenceExpression> expressions);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CreateMatchingCheckedOperatorFix : ModernScopedQuickFixBase {
    public static Key`1<object> InstanceKey;
    private IOperatorDeclaration myOperatorDeclaration;
    public string Text { get; }
    public CreateMatchingCheckedOperatorFix(OperatorWithoutMatchedCheckedOperatorWarning warning);
    private static CreateMatchingCheckedOperatorFix();
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    protected virtual ITreeNode TryGetContextTreeNode();
    public static IBulbActionCommand CreateMatchingCheckedOperator(IOperatorDeclaration operatorDeclaration);
    private static ValueTuple`2<string, Object[]> CreateCheckedConversionOperator(IConversionOperator conversionOperator, bool isAbstract);
    private static ValueTuple`2<string, Object[]> CreateCheckedSignOperator(ISignOperator signOperator, string operatorSign, bool isAbstract);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CreateMatchingOperatorFix : ModernQuickFixBase {
    private static string EQUAL;
    private static string NOT_EQUAL;
    private ISignOperatorDeclaration myDeclaration;
    public string Text { get; }
    public CreateMatchingOperatorFix(MatchingOperatorRequiredError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [NullableContextAttribute("2")]
private string GetMatchingOperatorName(Int32& paramCount);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CreateMatchingTrueFalseFix : ModernQuickFixBase {
    private ISignOperator myOperator;
    public string Text { get; }
    [NullableAttribute("2")]
private string MatchingOperatorName { get; }
    public CreateMatchingTrueFalseFix(ConditionalLogicTrueFalseOperatorMissingError error);
    public virtual string get_Text();
    [NullableContextAttribute("2")]
private string get_MatchingOperatorName();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CreateMatchingUncheckedOperatorFix : ModernQuickFixBase {
    private IOperatorDeclaration myDeclaration;
    public string Text { get; }
    public CreateMatchingUncheckedOperatorFix(CheckedOperatorNeedsMatchError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private ValueTuple`2<string, Object[]> CreateNonCheckedConversionOperator(IConversionOperator conversionOperator, bool isInterface);
    private ValueTuple`2<string, Object[]> CreateNonCheckedSignOperator(ISignOperator signOperator, bool isInterface);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CreateMethodForDelegateAction : CreateParametersOwnerFromUsageActionBase {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IReadOnlyList`1<ValueTuple`2<IDelegate, ISubstitution>> myDelegatesAndSubstitutions;
    private static DeclaredElementPresenterStyle ourSignaturePresenterStyle;
    public string Text { get; }
    public CreateMethodForDelegateAction(IReference reference);
    private static CreateMethodForDelegateAction();
    protected virtual bool IsAvailableInternal();
    protected virtual CreateMethodDeclarationContext CreateContext();
    public virtual ICreatedElementConsistencyGroup GetConsistencyGroup();
    [NullableContextAttribute("2")]
protected virtual ICreationTarget GetTarget();
    [NullableContextAttribute("2")]
protected virtual IBulbActionCommand ExecuteCommandBeforeTypePartSelector(Func`1<IBulbActionCommand> continueExecution);
    private static IDeclaration DeclarationForSignature(MemberSignature memberSignature, string methodName, ITreeNode context);
    protected virtual IntentionResult ExecuteIntention(CreateMethodDeclarationContext context);
    public static IResolveResult GetDelegate(IReference qualifiableReference);
    private static IResolveResult ExpectedDelegate(ICSharpExpression expression, IReference reference);
    public virtual string get_Text();
    protected virtual string GetTextFormat();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CreateMethodFromUsageAction : CreateParametersOwnerFromUsageActionBase {
    public string Text { get; }
    [NullableContextAttribute("2")]
public CreateMethodFromUsageAction(IReference reference);
    public virtual ICreatedElementConsistencyGroup GetConsistencyGroup();
    protected virtual bool IsAvailableInternal();
    protected virtual CreateMethodDeclarationContext CreateContext();
    [NullableContextAttribute("2")]
protected virtual ICreationTarget GetTarget();
    protected virtual IntentionResult ExecuteIntention(CreateMethodDeclarationContext context);
    public virtual string get_Text();
    protected virtual string GetTextFormat();
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CreateNestedDelegateFromUsageItem : CreateDelegateFromUsageBase {
    [NullableContextAttribute("1")]
public CreateNestedDelegateFromUsageItem(IReference reference);
    public virtual int GetPriority();
    [NullableContextAttribute("2")]
protected virtual ICreationTarget GetTarget();
    protected virtual bool GetIsNested();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CreateNestedTypeFromNewFix : CreateTypeFromNewBase {
    public CreateNestedTypeFromNewFix(IReference reference);
    protected virtual bool IsAvailableInternal();
    [NullableContextAttribute("2")]
protected virtual ICreationTarget GetTarget();
    protected virtual bool IsQualifierRedundant(IDeclaredElement element);
    [NullableContextAttribute("2")]
protected virtual ICSharpTreeNode GetScope();
    protected virtual string GetItemText();
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CreateNestedTypeFromQualifierFix : CreateTypeFromQualifierFixBase {
    public CreateNestedTypeFromQualifierFix(IReference reference);
    protected virtual bool IsAvailableInternal();
    protected virtual ICreationTarget GetTarget();
    protected virtual string GetItemText();
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CreateParameterFromUsageActionProvider : CreateParameterFromUsageActionProviderBase {
    public CreateParameterFromUsageActionProvider(IReference reference);
    protected virtual bool IsSupportedDeclaration(ICSharpParametersOwnerDeclaration parametersOwnerDeclaration);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CreateParameterFromUsageActionProviderBase : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IReference <sourceReference>P;
    [NullableContextAttribute("2")]
protected CreateParameterFromUsageActionProviderBase(IReference sourceReference);
    [NullableContextAttribute("2")]
protected virtual HybridCollection`1<IParametersOwner> GetParametersOwner(ITreeNode referenceExpression);
    protected abstract virtual bool IsSupportedDeclaration(ICSharpParametersOwnerDeclaration parametersOwnerDeclaration);
    public sealed virtual ICreatedElementConsistencyGroup GetConsistencyGroup();
    protected virtual ICreatedElementConsistencyGroup GetConsistencyGroup(IReference reference);
    public sealed virtual IReadOnlyList`1<IBulbAction> GetBulbItems();
    protected virtual CreateParameterFromUsageBulbAction CreateBulbAction(IReference reference, IParametersOwner parametersOwner);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CreateParameterFromUsageAndPullActionProvider : CreateParameterFromUsageActionProvider {
    public CreateParameterFromUsageAndPullActionProvider(IReference reference);
    protected virtual CreateParameterFromUsageBulbAction CreateBulbAction(IReference reference, IParametersOwner parametersOwner);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CreateParameterFromUsageAndPullBulbAction : CreateParameterFromUsageBulbAction {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IChangeSignatureTestData <Data>k__BackingField;
    [NullableAttribute("2")]
private IChangeSignatureTestData Data { get; private set; }
    public string Text { get; }
    public CreateParameterFromUsageAndPullBulbAction(IReference reference, IParametersOwner parametersOwner);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private IChangeSignatureTestData get_Data();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_Data(IChangeSignatureTestData value);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    protected virtual ICSharpParameterDeclaration CreateParameterDeclaration(IReferenceExpression referenceExpression, ParameterKind parameterKind, IType parameterType, string parameterName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CreateParameterFromUsageBulbAction : BulbActionBase {
    protected IReference Reference;
    protected IParametersOwner ParametersOwner;
    public string Text { get; }
    public CreateParameterFromUsageBulbAction(IReference reference, IParametersOwner parametersOwner);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    protected virtual ICSharpTreeNode GetScopeForTypeConstraints(IReferenceExpression referenceExpression);
    protected virtual ICSharpDeclaration GetContainingFunctionDeclaration(IReferenceExpression referenceExpression);
    private IList`1<IParameterDeclaration> GetAdditionalParameterDeclarations(ISolution solution, int createdParameterIndex);
    private void ChangeSignature(IExpression referenceExpression, IParametersOwner parametersOwner, IProgressIndicator progress, Int32& createdParameterIndex);
    private IType GetTypeFromConstraints(IReadOnlyList`1<ExpectedType> types);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CreateParametersOwnerFromUsageActionBase : CreateFromUsageActionBase2`2<CreateMethodDeclarationContext, IReference> {
    [CompilerGeneratedAttribute]
private ICSharpInvocationInfo <InvocationInfo>k__BackingField;
    protected ICSharpInvocationInfo InvocationInfo { get; }
    protected CreateParametersOwnerFromUsageActionBase(IReference reference);
    [CompilerGeneratedAttribute]
protected ICSharpInvocationInfo get_InvocationInfo();
    private static ICSharpInvocationInfo GetInvocationInfo(IReference reference);
    protected virtual bool IsAvailableInternal();
    [NullableContextAttribute("1")]
protected CreateMethodDeclarationContext CreateContext(IList`1<AccessRights> possibleAccessRights, ICreationTarget target, IPsiModule targetPsiModule, bool createOverload);
    [NullableContextAttribute("1")]
public static ConsistencyGroupByNaming InferConsistencyGroup(IReference reference, NamedElementKinds namedElementKind, IList`1<AccessRights> possibleAccessRights, Boolean& staticIsSuggested);
    [NullableContextAttribute("1")]
private IDeclaredType GetDefaultType(IPsiModule module, Boolean& allowVoid);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CreateParamsCollectionAddMethodAction : CreateMethodFromUsageAction {
    [CompilerGeneratedAttribute]
private IReference <reference>P;
    [CompilerGeneratedAttribute]
private IParameter <paramsParameter>P;
    public CreateParamsCollectionAddMethodAction(IReference reference, IParameter paramsParameter);
    public virtual ICreatedElementConsistencyGroup GetConsistencyGroup();
    protected virtual CreateMethodDeclarationContext CreateContext();
    protected virtual bool IsAvailableInternal();
    [NullableContextAttribute("2")]
private IList`1<AccessRights> GetAccessRights();
    [NullableContextAttribute("2")]
private IType GetElementType();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CreateParamsDefaultConstructorAction : CreateConstructorFromUsageActionBase {
    [CompilerGeneratedAttribute]
private IParameter <paramsParameter>P;
    public CreateParamsDefaultConstructorAction(IReference reference, IParameter paramsParameter);
    protected virtual CreateConstructorDeclarationContext CreateContext();
    protected virtual bool IsAvailableInternal();
    [NullableContextAttribute("2")]
private IList`1<AccessRights> GetAccessRights();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CreatePrimaryConstructorFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private IClassLikeDeclaration myClassLikeDeclaration;
    public string Text { get; }
    public CreatePrimaryConstructorFix(PrimaryConstructorMissingError error);
    public virtual bool IsAvailable(IUserDataHolder cache);
    public virtual string get_Text();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CreatePrimaryConstructorFromUsageAction : CreateConstructorFromUsageActionBase {
    public string Text { get; }
    public CreatePrimaryConstructorFromUsageAction(IReference reference);
    public virtual string get_Text();
    protected virtual bool IsAvailableInternal();
    protected virtual CreateConstructorDeclarationContext CreateContext();
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CreatePrimaryParameterFromUsageActionProvider : CreateParameterFromUsageActionProviderBase {
    public CreatePrimaryParameterFromUsageActionProvider(IReference reference);
    protected virtual HybridCollection`1<IParametersOwner> GetParametersOwner(ITreeNode referenceExpression);
    protected virtual ICreatedElementConsistencyGroup GetConsistencyGroup(IReference reference);
    protected virtual bool IsSupportedDeclaration(ICSharpParametersOwnerDeclaration parametersOwnerDeclaration);
    protected virtual CreateParameterFromUsageBulbAction CreateBulbAction(IReference reference, IParametersOwner parametersOwner);
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CreatePrimaryParameterFromUsageAndPullActionProvider : CreatePrimaryParameterFromUsageActionProvider {
    public CreatePrimaryParameterFromUsageAndPullActionProvider(IReference reference);
    protected virtual CreateParameterFromUsageBulbAction CreateBulbAction(IReference reference, IParametersOwner parametersOwner);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CreatePropertyBase : CreateFromUsageActionBase2`2<CreatePropertyDeclarationContext, IReference> {
    [CompilerGeneratedAttribute]
private IReferenceExpression <ReferenceExpression>k__BackingField;
    public IReferenceExpression ReferenceExpression { get; }
    protected CreatePropertyBase(IReference reference);
    [CompilerGeneratedAttribute]
public IReferenceExpression get_ReferenceExpression();
    protected virtual bool IsAvailableInternal();
    protected bool CheckResolveResult();
    [NullableContextAttribute("1")]
private static bool TargetSupportsAutoProperty(ICreationTarget target);
    protected bool CanCreateSeparateAutoPropertyItem();
    [NullableContextAttribute("1")]
protected CreatePropertyDeclarationContext PrepareContext();
    protected virtual ICreationTarget GetTarget();
    [NullableContextAttribute("1")]
public virtual ICreatedElementConsistencyGroup GetConsistencyGroup();
    [NullableContextAttribute("1")]
protected virtual IntentionResult ExecuteIntention(CreatePropertyDeclarationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CreatePropertyFromObjectCreationItem : CreatePropertyBase {
    public string Text { get; }
    [NullableContextAttribute("2")]
public CreatePropertyFromObjectCreationItem(IReference reference);
    protected virtual bool IsAvailableInternal();
    protected virtual CreatePropertyDeclarationContext CreateContext();
    private static ITypeElement GetContainerObject(IInitializerElement memberInitializer);
    [PureAttribute]
private static IPropertyInitializer GetPropertyInitializer(IReference reference);
    public virtual string get_Text();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CreatePropertyFromUsageItem : CreatePropertyBase {
    public string Text { get; }
    public CreatePropertyFromUsageItem(IReference reference);
    protected virtual bool IsAvailableInternal();
    protected virtual CreatePropertyDeclarationContext CreateContext();
    public virtual string get_Text();
    protected virtual string GetTextFormat();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CreatePropertyFromWithAssignmentCreationItem : CreatePropertyBase {
    public string Text { get; }
    [NullableContextAttribute("2")]
public CreatePropertyFromWithAssignmentCreationItem(IReference reference);
    protected virtual bool IsAvailableInternal();
    protected virtual CreatePropertyDeclarationContext CreateContext();
    [PureAttribute]
private static IWithInitializerAssignment GetWithInitializerAssignment(IReference reference);
    private static ITypeElement GetContainerObject(IWithInitializerAssignment withInitializerAssignment);
    public virtual string get_Text();
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CreateRecordFromNewFix : CreateTypeFromNewBase {
    public CreateRecordFromNewFix(IReference reference);
    protected virtual bool IsAvailableInternal();
    protected virtual ICSharpTreeNode GetScope();
    protected virtual string GetItemText();
    protected virtual CreateClassDeclarationContext CreateContext();
    protected virtual ICreationTarget GetTarget();
    protected virtual bool IsQualifierRedundant(IDeclaredElement element);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CreateStaticClassFix : CreateFromUsageActionBase2`2<CreateClassDeclarationContext, IReference> {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IReferenceExpression <ReferenceExpression>k__BackingField;
    [NullableAttribute("2")]
private IReferenceExpression ReferenceExpression { get; }
    public string Text { get; }
    public CreateStaticClassFix(IReference reference);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private IReferenceExpression get_ReferenceExpression();
    public virtual ICreatedElementConsistencyGroup GetConsistencyGroup();
    protected virtual bool IsAvailableInternal();
    protected virtual CreateClassDeclarationContext CreateContext();
    protected virtual IntentionResult ExecuteIntention(CreateClassDeclarationContext context);
    [NullableContextAttribute("2")]
protected virtual ICreationTarget GetTarget();
    public virtual string get_Text();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CreateStructConstructorAndInitializeMembersFix : ModernScopedQuickFixBase {
    [NullableAttribute("2")]
private IClassLikeDeclaration myStructOrRecordDeclaration;
    public string Text { get; }
    public CreateStructConstructorAndInitializeMembersFix(StructHasInitializersAndNoDeclaredConstructorError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CreateTypeFromNewBase : CreateFromUsageActionBase2`2<CreateClassDeclarationContext, IReference> {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IReferenceName <ReferenceName>k__BackingField;
    [NullableAttribute("2")]
protected IReferenceName ReferenceName { get; }
    public string Text { get; }
    protected CreateTypeFromNewBase(IReference reference);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected IReferenceName get_ReferenceName();
    protected virtual bool IsAvailableInternal();
    protected abstract virtual bool IsQualifierRedundant(IDeclaredElement element);
    protected virtual CreateClassDeclarationContext CreateContext();
    private string MakeAttributeClassName(string className);
    private MemberSignature GetConstructorFromInitializerSignature(IExpressionInitializer initializer);
    [NullableContextAttribute("2")]
protected abstract virtual ICSharpTreeNode GetScope();
    public virtual string get_Text();
    protected abstract virtual string GetItemText();
    public virtual ICreatedElementConsistencyGroup GetConsistencyGroup();
    protected virtual IntentionResult ExecuteIntention(CreateClassDeclarationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CreateTypeFromNewFix : CreateTypeFromNewBase {
    public CreateTypeFromNewFix(IReference reference);
    protected virtual bool IsAvailableInternal();
    [NullableContextAttribute("2")]
protected virtual ICSharpTreeNode GetScope();
    protected virtual string GetItemText();
    [NullableContextAttribute("2")]
protected virtual ICreationTarget GetTarget();
    protected virtual bool IsQualifierRedundant(IDeclaredElement element);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CreateTypeFromQualifierFix : CreateTypeFromQualifierFixBase {
    public CreateTypeFromQualifierFix(IReference reference);
    protected virtual bool IsAvailableInternal();
    protected virtual string GetItemText();
    [NullableContextAttribute("2")]
protected virtual ICreationTarget GetTarget();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CreateTypeFromQualifierFixBase : CreateFromUsageActionBase2`2<CreateClassDeclarationContext, IReference> {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IReferenceExpression <ReferenceExpression>k__BackingField;
    [NullableAttribute("2")]
protected IReferenceExpression ReferenceExpression { get; }
    public string Text { get; }
    protected CreateTypeFromQualifierFixBase(IReference reference);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected IReferenceExpression get_ReferenceExpression();
    public virtual ICreatedElementConsistencyGroup GetConsistencyGroup();
    protected virtual CreateClassDeclarationContext CreateContext();
    protected virtual IntentionResult ExecuteIntention(CreateClassDeclarationContext context);
    protected abstract virtual string GetItemText();
    public virtual string get_Text();
    protected virtual bool IsAvailableInternal();
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CreateTypeParamFromUsage2Item : BulbActionBase {
    [CompilerGeneratedAttribute]
private ITypeParametersOwner <target>P;
    [CompilerGeneratedAttribute]
private string <name>P;
    public string Text { get; }
    public CreateTypeParamFromUsage2Item(ITypeParametersOwner target, string name);
    public virtual string get_Text();
    protected virtual void ExecuteBeforeProgressAndTransaction(ISolution solution);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CreateTypeParamFromUsageAction : ModernBulbActionBase {
    private IReference myReference;
    [NullableAttribute("2")]
private ITypeParameterReference myTypeParameterReference;
    public string Text { get; }
    public CreateTypeParamFromUsageAction(IReference reference);
    public virtual string get_Text();
    private bool IsAvailable();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public sealed virtual IReadOnlyList`1<IBulbAction> GetBulbItems();
    public sealed virtual ICreatedElementConsistencyGroup GetConsistencyGroup();
    public int GetPriority();
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CreateTypeParamFromUsageFix2 : object {
    private IReference myReference;
    public CreateTypeParamFromUsageFix2(NotResolvedError error);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CreateTypeParamFromUsageFix2/<CreateActions>d__3")]
public IEnumerable`1<IBulbAction> CreateActions();
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CSharpBaseClassFixer : object {
    public sealed virtual void ChangeBaseClass(IDeclaration typeDeclaration, IType baseType);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CSharpExtensionMethodsResolveUtil : ExtensionMethodImportUtilBase {
    [NotNullAttribute]
private static ResolveErrorType[] QueryResolveErrors;
    private static CSharpExtensionMethodsResolveUtil();
    protected virtual IList`1<InvocationCandidate> GetInvocationInfo(ResolveErrorType[] acceptedErrors, IReference reference);
    protected virtual ResolveErrorType[] PatchResolveErrors(IReference reference, ResolveErrorType[] acceptedErrors);
    [NotNullAttribute]
public static IList`1<IMethod> GetAlternatives(IReference reference, ResolveErrorType[] acceptedResolveErrors);
    [NotNullAttribute]
protected virtual string Present(IDeclaredElement method);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CSharpExtensionMethodsResolveUtil/<GetCandidateMethods>d__5")]
protected virtual IEnumerable`1<IMethod> GetCandidateMethods(IInvocationInfo invocationInfo, IReference reference);
    [NotNullAttribute]
protected virtual ResolveErrorType ResolveOverloadsForExtensionMethods(InvocationCandidate candidate, IMethod method);
}
public static class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CSharpFleetIntentionAllowList : object {
    private static HashSet`1<Type> ourCsharpAllowList;
    private static CSharpFleetIntentionAllowList();
    public static bool Contains(IBulbAction bulbAction);
}
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CSharpImportMethodInfo : object {
    [NotNullAttribute]
private IEnumerable`1<IDeclaredElementPointer`1<IMethod>> myMethods;
    [NotNullAttribute]
private IDeclaredElementPointer`1<INamespace> myNamespace;
    [CompilerGeneratedAttribute]
private IPsiModule <Module>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PackageHint>k__BackingField;
    [NotNullAttribute]
public IPsiModule Module { get; }
    [CanBeNullAttribute]
public string PackageHint { get; }
    public INamespace Namespace { get; }
    public IEnumerable`1<IMethod> Methods { get; }
    public CSharpImportMethodInfo(IPsiModule module, INamespace nameSpace, IList`1<IMethod> methods, string packageHint);
    [CompilerGeneratedAttribute]
public IPsiModule get_Module();
    [CompilerGeneratedAttribute]
public string get_PackageHint();
    public INamespace get_Namespace();
    public IEnumerable`1<IMethod> get_Methods();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CSharpImportTypeHelper : object {
    public sealed virtual IEnumerable`1<ITypeElement> FindTypeCandidates(IReference reference, ImportTypeCacheFactory factory);
    [NotNullAttribute]
private static IEnumerable`1<ITypeElement> TypesWithGivenNames(IReference reference, int typeParametersCount, ImportTypeResolver typeResolver);
    public sealed virtual bool ReferenceTargetCanBeType(IReference reference);
    public sealed virtual bool ReferenceTargetIsUnlikelyBeType(IReference reference);
}
public static class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CSharpImportTypeUtil : object {
    [CanBeNullAttribute]
public static IReference GetReferenceByUsage(ITypeUsage typeUsage);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CSharpMakeAbstractIntention : object {
    [NullableContextAttribute("1")]
public sealed virtual bool CanMakeAbstract(IModifiersOwnerDeclaration declaration);
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CSharpMakeInternalFix : MakeInternalFix {
    public CSharpMakeInternalFix(AccessRightsError error);
    public CSharpMakeInternalFix(CollectionExpressionFoundNotAccessibleAddMethodError error);
    public CSharpMakeInternalFix(NotWritablePropertyInMemberInitializerError error);
    public CSharpMakeInternalFix(NotReadablePropertyInMemberInitializerError error);
    public CSharpMakeInternalFix(InaccessibleAccessorError error);
    public CSharpMakeInternalFix(VirtualMemberCannotBePrivateError error);
    public CSharpMakeInternalFix(PrivateMemberCannotBePolymorphicError error);
    public CSharpMakeInternalFix(AbstractMemberCannotBePrivateError error);
    public CSharpMakeInternalFix(InaccessibleDefaultConstructorInBaseClassError error);
    public CSharpMakeInternalFix(NewProtectedMemberInStructError error);
    public CSharpMakeInternalFix(NewProtectedMemberInSealedClassWarning error);
    public CSharpMakeInternalFix(StaticClassMemberCannotBeProtectedError error);
    public CSharpMakeInternalFix(AccessorInconsistentAccessibilityInPrivateImplementationError error);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CSharpMakeNonStaticFix : MakeNonStaticFix {
    public CSharpMakeNonStaticFix(AccessModifierInStaticConstructorError error);
    public CSharpMakeNonStaticFix(IndexerCannotBeStaticError error);
    public CSharpMakeNonStaticFix(CannotUseThisBaseInStaticContextError error);
    public CSharpMakeNonStaticFix(InitializerInStaticConstructorError error);
    public CSharpMakeNonStaticFix(StaticElementInNonStaticContextError error);
    public CSharpMakeNonStaticFix(NotImplementStaticError error);
    public CSharpMakeNonStaticFix(PolymorphicMemberCannotBeStaticError error);
    public CSharpMakeNonStaticFix(ParametersInStaticConstructorError error);
    public CSharpMakeNonStaticFix(StaticMemberInMemberInitializerError error);
    public CSharpMakeNonStaticFix(StaticMemberInSubpatternError error);
    public CSharpMakeNonStaticFix(StaticMemberInAttributeNamedArgumentError error);
    public CSharpMakeNonStaticFix(CannotCreateInstanceOfStaticClassError error);
    public CSharpMakeNonStaticFix(CannotCreateArrayOfStaticClassElementTypeError error);
    public CSharpMakeNonStaticFix(ArrayElementIsStaticClassError error);
    public CSharpMakeNonStaticFix(StaticReadonlyStructMemberError error);
    protected CSharpMakeNonStaticFix(IDeclaredElement element);
    public CSharpMakeNonStaticFix(NonStaticElementInStaticContextError error);
    public CSharpMakeNonStaticFix(PrimaryConstructorParameterInStaticContextError error);
    public CSharpMakeNonStaticFix(CollectionExpressionFoundStaticAddMethodError error);
    private static IDeclaredElement TryGetContainingStaticMember(IReference reference);
    private static IDeclaredElement GetElement(InitializerInStaticConstructorError error);
    private static ITypeMember GetContainingMember(CannotUseThisBaseInStaticContextError error);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CSharpMakePrivateProtectedFix : MakePrivateProtectedFix {
    [NotNullAttribute]
private ITreeNode myContext;
    public CSharpMakePrivateProtectedFix(AccessRightsError error);
    public CSharpMakePrivateProtectedFix(CollectionExpressionFoundNotAccessibleAddMethodError error);
    public CSharpMakePrivateProtectedFix(NotWritablePropertyInMemberInitializerError error);
    public CSharpMakePrivateProtectedFix(NotReadablePropertyInMemberInitializerError error);
    public CSharpMakePrivateProtectedFix(InaccessibleAccessorError error);
    public CSharpMakePrivateProtectedFix(VirtualMemberCannotBePrivateError error);
    public CSharpMakePrivateProtectedFix(PrivateMemberCannotBePolymorphicError error);
    public CSharpMakePrivateProtectedFix(AbstractMemberCannotBePrivateError error);
    public CSharpMakePrivateProtectedFix(InaccessibleDefaultConstructorInBaseClassError error);
    protected virtual bool IsAvailableEx();
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CSharpMakeProtectedFix : MakeProtectedFix {
    public CSharpMakeProtectedFix(AccessRightsError error);
    public CSharpMakeProtectedFix(CollectionExpressionFoundNotAccessibleAddMethodError error);
    public CSharpMakeProtectedFix(NotWritablePropertyInMemberInitializerError error);
    public CSharpMakeProtectedFix(NotReadablePropertyInMemberInitializerError error);
    public CSharpMakeProtectedFix(InaccessibleAccessorError error);
    public CSharpMakeProtectedFix(PublicConstructorInAbstractClassWarning error);
    public CSharpMakeProtectedFix(PrivateMemberCannotBePolymorphicError error);
    public CSharpMakeProtectedFix(VirtualMemberCannotBePrivateError error);
    public CSharpMakeProtectedFix(AbstractMemberCannotBePrivateError error);
    public CSharpMakeProtectedFix(InaccessibleDefaultConstructorInBaseClassError error);
    public CSharpMakeProtectedFix(SealedPrivateMethodWithoutBodyError error);
    public CSharpMakeProtectedFix(SealedPrivateMemberWithoutBodyError error);
    public CSharpMakeProtectedFix(AccessorInconsistentAccessibilityInPrivateImplementationError error);
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CSharpMakeProtectedInternalFix : MakeProtectedInternalFix {
    public CSharpMakeProtectedInternalFix(AccessRightsError error);
    public CSharpMakeProtectedInternalFix(CollectionExpressionFoundNotAccessibleAddMethodError error);
    public CSharpMakeProtectedInternalFix(NotWritablePropertyInMemberInitializerError error);
    public CSharpMakeProtectedInternalFix(NotReadablePropertyInMemberInitializerError error);
    public CSharpMakeProtectedInternalFix(InaccessibleAccessorError error);
    public CSharpMakeProtectedInternalFix(VirtualMemberCannotBePrivateError error);
    public CSharpMakeProtectedInternalFix(PrivateMemberCannotBePolymorphicError error);
    public CSharpMakeProtectedInternalFix(AbstractMemberCannotBePrivateError error);
    public CSharpMakeProtectedInternalFix(InaccessibleDefaultConstructorInBaseClassError error);
    public CSharpMakeProtectedInternalFix(AccessorInconsistentAccessibilityInPrivateImplementationError error);
    public CSharpMakeProtectedInternalFix(InconsistentAccessibilityInImplementationError error);
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CSharpMakePublicFix : MakePublicFix {
    public CSharpMakePublicFix(NotReadablePropertyInMemberInitializerError error);
    public CSharpMakePublicFix(InaccessibleAccessorError error);
    public CSharpMakePublicFix(NotWritablePropertyInMemberInitializerError error);
    public CSharpMakePublicFix(VirtualMemberCannotBePrivateError error);
    public CSharpMakePublicFix(PrivateMemberCannotBePolymorphicError error);
    public CSharpMakePublicFix(AbstractMemberCannotBePrivateError error);
    public CSharpMakePublicFix(NewProtectedMemberInStructError error);
    public CSharpMakePublicFix(NewProtectedMemberInSealedClassWarning error);
    public CSharpMakePublicFix(StaticClassMemberCannotBeProtectedError error);
    public CSharpMakePublicFix(NotImplementNotPublicError error);
    public CSharpMakePublicFix(NamedAttributeArgumentMemberMustBePublicError error);
    public CSharpMakePublicFix(NamedAttributeArgumentPropertyMustHavePublicAccessorsError error);
    public CSharpMakePublicFix(AccessorInconsistentAccessibilityInPrivateImplementationError error);
    public CSharpMakePublicFix(InconsistentAccessibilityInImplementationError error);
    public CSharpMakePublicFix(CannotImplementNotPublicInterfaceError error);
    public CSharpMakePublicFix(NonPublicStructParameterlessConstructorError error);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CSharpMakeReadonlyFix : MakeReadonlyFix {
    private bool myDoNotUseCustomAnchor;
    public CSharpMakeReadonlyFix(NonReadonlyMemberInGetHashCodeWarning warning);
    public CSharpMakeReadonlyFix(ImplicitCopyInReadOnlyMemberWarning warning);
    public CSharpMakeReadonlyFix(PossiblyImpureMethodCallOnReadonlyVariableWarning warning);
    public CSharpMakeReadonlyFix(StructCanBeMadeReadOnlyWarning warning);
    public CSharpMakeReadonlyFix(StructMemberCanBeMadeReadOnlyWarning warning);
    public CSharpMakeReadonlyFix(CapturedPrimaryConstructorParameterIsMutableWarning warning);
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    [NullableContextAttribute("2")]
[PureAttribute]
private static ITypeMember ChooseMemberToMakeReadonly(ITypeMember member);
    [PureAttribute]
private static IMethod ChooseMemberToMakeReadonly(IInvocationExpression invocationExpression);
    protected virtual void SetModifiers(IModifiersOwnerDeclaration declaration);
    [NullableContextAttribute("2")]
private static ITypeMember TryFindNonReadonlyStructMemberByMutableUsage(IReferenceExpression parameterReferenceExpression);
}
public static class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CSharpQuickFixUtil : object {
    public static int NOT_ACTION;
    [CanBeNullAttribute]
public static IOverridableMember FindBaseOverridableMember(ITypeElement typeElement, Predicate`1<IOverridableMember> test);
    [CanBeNullAttribute]
private static IOverridableMember ProcessMembers(ITypeElement typeElement, Predicate`1<IOverridableMember> test);
    public static string Escape(string name);
    public static void ReplaceDeclarationWithAssignment(ILocalVariableDeclaration declaration, CSharpElementFactory factory, IDeclaredElement newVariable);
    [CanBeNullAttribute]
public static IReference GetReferenceByLValue(ICSharpExpression lvalue);
    [CanBeNullAttribute]
public static IReference GetReferenceByRValue(ICSharpExpression rvalue);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CSharpQuickFixUtilComponent : object {
    public sealed virtual IReference BindTo(IReference reference, ITypeElement typeElement, Action`1& moveCaretAction, bool targetHasGenericOverloads);
    public sealed virtual IReference AddImportsForExtensionMethod(IReference reference, IList`1<IMethod> methods);
    [CanBeNullAttribute]
private static ITypeArgumentList ForgeFakeList(IReference reference, ITypeElement typeElement);
    [CanBeNullAttribute]
private static ITypeArgumentList GetTypeArgs(IReference reference);
    [CanBeNullAttribute]
private static ITypeArgumentList LeaveOnlyAngles(IReference reference);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CSharpVisibilityFixHelper : object {
    public sealed virtual bool CanFixAccessibility(IReference reference);
}
internal static class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.CSharpVisibilityFixUtil : object {
    public static IConstructor FindBaseConstructor(InaccessibleDefaultConstructorInBaseClassError error);
}
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.DeconstructVariableAction")]
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.DeconstructVariableFix : object {
    [NotNullAttribute]
private IVariableDeclaration myVariableDeclaration;
    public DeconstructVariableFix(UseDeconstructionWarning warning);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.DiscardAssignmentFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private ICSharpExpression myNotUsedExpression;
    public string Text { get; }
    public DiscardAssignmentFix(ModifiedValueNotUsedWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.DiscardReturnValueFix : ModernQuickFixBase {
    private IInvocationExpression myInvocationExpression;
    public string Text { get; }
    public DiscardReturnValueFix(AsyncMethodInvocationWithoutAwaitWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.EmbedInBlockFix : ModernQuickFixBase {
    private ICSharpStatement myStatement;
    public string Text { get; }
    public EmbedInBlockFix(InvalidEmbeddedStatementError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.EnableNullableContextFix : QuickFixBase {
    public static InvisibleAnchor EnableNullableContextFixAnchor;
    public static IAnchor EnableNullableContextInFileAnchor;
    public static IAnchor EnableNullableContextInProjectAnchor;
    private static ILogger ourLogger;
    [NullableAttribute("2")]
private ITreeNode myTreeNode;
    public string Text { get; }
    [NullableContextAttribute("2")]
private EnableNullableContextFix(ITreeNode treeNode);
    public EnableNullableContextFix(MissingNullableContextForAnnotationWarning warning);
    private static EnableNullableContextFix();
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    private static INullableContextProvider GetNullableContextProvider(IPsiModule psiModule);
    private static ILanguageLevelProvider`2<CSharpLanguageLevel, CSharpLanguageVersion> GetLanguageLevelProvider(IPsiModule psiModule);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.EnableNullableWarningFixAction : object {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <DataProvider>k__BackingField;
    private ICSharpContextActionDataProvider DataProvider { get; }
    public EnableNullableWarningFixAction(ICSharpContextActionDataProvider provider);
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider get_DataProvider();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.CSharp.QuickFixes.EnableNullableWarningFixAction/<CreateBulbItems>d__5")]
public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
[CustomHighlightingActionProviderAttribute("JetBrains.ProjectModel.KnownProjectFileType")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.EnableNullableWarningFixActionProvider : object {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.CSharp.QuickFixes.EnableNullableWarningFixActionProvider/<GetActions>d__0")]
public sealed virtual IEnumerable`1<IntentionAction> GetActions(IHighlighting highlighting, DocumentRange highlightingRange, IPsiSourceFile sourceFile, IAnchor configureAnchor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.EnablePreviewFeaturesFix : QuickFixBase {
    [NullableAttribute("2")]
private ITreeNode myTreeNode;
    public string Text { get; }
    public EnablePreviewFeaturesFix(PreviewFeatureReferenceWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.EnableSuppressNullableWarningFixBulbAction : BulbActionBase {
    [CompilerGeneratedAttribute]
private bool <disableNullableSuppressionInspection>P;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public string Text { get; }
    public EnableSuppressNullableWarningFixBulbAction(string text, bool disableNullableSuppressionInspection);
    [CompilerGeneratedAttribute]
public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.EnblockAssignmentFix : ModernScopedQuickFixBase {
    private ICSharpExpression myAssignmentExpression;
    public string Text { get; }
    public string ScopedText { get; }
    public EnblockAssignmentFix(PlaceAssignmentExpressionIntoBlockWarning error);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.EncapsulateLazyFieldAction")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.EncapsulateLazyFieldFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private IFieldDeclaration myFieldDeclaration;
    public string Text { get; }
    public EncapsulateLazyFieldFix(UnusedFieldWarningBase error);
    public EncapsulateLazyFieldFix(UnusedFieldCompilerWarning error);
    public EncapsulateLazyFieldFix(NotAccessedFieldWarningBase error);
    [NullableContextAttribute("2")]
private EncapsulateLazyFieldFix(IFieldDeclaration fieldDeclaration);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.JoinDeconstructionDeclarationsAction")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.UseSeparateDeconstructionDeclarationsAction")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.EnforceDeconstructingDeclarationStyleFix : ModernScopedQuickFixBase {
    private DeconstructedVariableVarKeywordUsageSuggestion myCodeStyleSuggestion;
    public string Text { get; }
    public string ScopedText { get; }
    public bool IsReanalysisRequired { get; }
    public EnforceDeconstructingDeclarationStyleFix(EnforceDeconstructingDeclarationStyleWarning warning);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool get_IsReanalysisRequired();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.UseImplicitDiscardDeclarationAction")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.UseExplicitDiscardDeclarationAction")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.EnforceDiscardDeclarationStyleFix : ModernScopedQuickFixBase {
    private DiscardDeclarationVarKeywordSuggestion myCodeStyleSuggestion;
    public string Text { get; }
    public string ScopedText { get; }
    public bool IsReanalysisRequired { get; }
    public EnforceDiscardDeclarationStyleFix(EnforceDiscardVarKeywordStyleWarning warning);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool get_IsReanalysisRequired();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.EntityFramework.NPlusOneFix : ModernQuickFixBase {
    private static double ProgressAfterInitialExpressionProcessed;
    private static double ProgressAfterPreReplacePhase;
    private static string InclusionStringFormat;
    private EntityFrameworkVersion myEntityFrameworkVersion;
    [NotNullAttribute]
[ItemNotNullAttribute]
private IList`1<IEnumerable`1<RelationsChain>> myRequiredRelationsChains;
    [NotNullAttribute]
[ItemNotNullAttribute]
private IList`1<UsedEntityRelation> myRelationsToInclude;
    [NotNullAttribute]
[ItemNotNullAttribute]
private IList`1<ICSharpExpression> myIncompleteExpressionChains;
    [NotNullAttribute]
[ItemNotNullAttribute]
private IList`1<ICSharpExpression> myExpressionChainsHighlightedExpressions;
    [NotNullAttribute]
private CSharpElementFactory myElementFactory;
    private IMethod myEfIncludeMethod;
    [CanBeNullAttribute]
[ItemNotNullAttribute]
private IMethod[] myEfCoreThenIncludeMethods;
    private IMethod mySelectMethod;
    private IMethod myEfCoreAsAsyncEnumerableMethod;
    private IMethod myEfCoreAsQueryableDbSetMethod;
    private IMethod myEfCoreAsAsyncEnumerableDbSetMethod;
    [NotNullAttribute]
private ITypeElement myDbContext;
    private bool myCSharp8Supported;
    [CanBeNullAttribute]
private IList`1<int> myFixAvailableIndices;
    public string Text { get; }
    public NPlusOneFix(IncompleteDataQueryWarning highlighting);
    public NPlusOneFix(IncompleteDataUsageWarning highlighting);
    public NPlusOneFix(NPlusOneQueryWarning highlighting);
    public NPlusOneFix(NPlusOneUsageWarning highlighting);
    private NPlusOneFix(EntityFrameworkUsageWarningBase highlighting);
    private NPlusOneFix(EntityFrameworkQueryWarningBase highlighting);
    private NPlusOneFix(ITreeNode node, EntityFrameworkVersion entityFrameworkVersion, ITypeElement dbContext);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [PureAttribute]
private bool QuickFixIsAvailableForExpression(ICSharpExpression expression, EntityFrameworkVersion entityFrameworkVersion);
    [NotNullAttribute]
private ICSharpExpression BuildExpression(IEnumerable`1<LoadedRelation> preIncludedRelations, IList`1<RelationsChain> requiredRelationsChains, ICSharpExpression incompleteExpression, IProgressIndicator progressIndicator, double progressLeftForThisStep, IPsiServices psiServices);
    [NotNullAttribute]
private ICSharpExpression BuildIncludeInvocationExpression(ICSharpExpression& targetExpression, RelationsChain relationsChain, Int32& inclusionDepth, Int32& prevInclusionDepth, Boolean& prioritizedAnchorExpression, int relationIndex, IDeclaredType iEnumerable, IDictionary`2<string, int> usedLambdaParameterNames, IPsiServices psiServices);
    [NotNullAttribute]
[ItemNotNullAttribute]
[PureAttribute]
private static IList`1<RelationsChain> CopyDistinctChains(ICollection`1<RelationsChain> chainsToCopy);
    [PureAttribute]
private static bool StartsWithList(IEnumerable`1<T> source, IEnumerable`1<T> pattern, Comparison`1<T> comparison);
    [PureAttribute]
private static bool StartsWithList(IEnumerable`1<T> source, IEnumerable`1<T> pattern, IEqualityComparer`1<T> comparer, Int32& firstMismatchIndex);
    [CompilerGeneratedAttribute]
[PureAttribute]
internal static int <BuildExpression>g__CalculateInitialInclusionDepth|30_2(IEnumerable`1<LoadedRelation> chain);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.EntityFramework.ZoneMarker : object {
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.EnumerateToArrayFix : MultipleEnumerationFixBase {
    [NotNullAttribute]
private IPsiModule myPsiModule;
    [CanBeNullAttribute]
private IMethod myToArrayMethod;
    [CanBeNullAttribute]
private IMethod myCastMethod;
    [NotNullAttribute]
private CSharpElementFactory myElementFactory;
    public string Text { get; }
    public EnumerateToArrayFix(PossibleMultipleEnumerationWarning warning);
    public virtual string get_Text();
    protected virtual void EnumerateGenericIEnumerable(IType enumerableType, ICSharpExpression valueExpression);
    protected virtual void EnumerateIEnumerable(ICSharpExpression valueExpression);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.EnumerateToListFix : MultipleEnumerationFixBase {
    private IPsiModule myPsiModule;
    [NullableAttribute("2")]
private IMethod myToListMethod;
    [NullableAttribute("2")]
private IMethod myCastMethod;
    private CSharpElementFactory myElementFactory;
    public string Text { get; }
    public EnumerateToListFix(PossibleMultipleEnumerationWarning warning);
    public virtual string get_Text();
    protected virtual void EnumerateGenericIEnumerable(IType enumerableType, ICSharpExpression valueExpression);
    protected virtual void EnumerateIEnumerable(ICSharpExpression valueExpression);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.EnumerateWithAsArrayMethodFix : MultipleEnumerationFixBase {
    private IPsiModule myPsiModule;
    [NullableAttribute("2")]
private IMethod myAsArrayMethod;
    [NullableAttribute("2")]
private IMethod myCastMethod;
    private CSharpElementFactory myElementFactory;
    private static ClrTypeName ourCollectionUtilClrTypeName;
    public string Text { get; }
    public EnumerateWithAsArrayMethodFix(PossibleMultipleEnumerationWarning warning);
    private static EnumerateWithAsArrayMethodFix();
    public virtual string get_Text();
    protected virtual void EnumerateGenericIEnumerable(IType enumerableType, ICSharpExpression valueExpression);
    protected virtual void EnumerateIEnumerable(ICSharpExpression valueExpression);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.EnumerateWithAsListMethodFix : MultipleEnumerationFixBase {
    private IPsiModule myPsiModule;
    [NullableAttribute("2")]
private IMethod myAsListMethod;
    [NullableAttribute("2")]
private IMethod myCastMethod;
    private CSharpElementFactory myElementFactory;
    private static ClrTypeName ourCollectionUtilClrTypeName;
    public string Text { get; }
    public EnumerateWithAsListMethodFix(PossibleMultipleEnumerationWarning warning);
    private static EnumerateWithAsListMethodFix();
    public virtual string get_Text();
    protected virtual void EnumerateGenericIEnumerable(IType enumerableType, ICSharpExpression valueExpression);
    protected virtual void EnumerateIEnumerable(ICSharpExpression valueExpression);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.EvaluateInUncheckedContextFix : ModernQuickFixBase {
    private ICSharpExpression myExpression;
    public string Text { get; }
    public EvaluateInUncheckedContextFix(OverflowConstantValueError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [PureAttribute]
private static IUncheckedExpression CreateUncheckedExpression(ICSharpExpression expression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ExtractCheckFromPatternToExpressionFix : ModernQuickFixBase {
    private ICSharpExpression myErroneousConstantExpression;
    public string Text { get; }
    public ExtractCheckFromPatternToExpressionFix(ConstantPatternExpressionIsNotConstantError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ExtractCommonBranchingCodeFix : ModernQuickFixBase {
    [CompilerGeneratedAttribute]
private ExtractCommonBranchingCodeWarning <warning>P;
    public string Text { get; }
    public ExtractCommonBranchingCodeFix(ExtractCommonBranchingCodeWarning warning);
    public virtual string get_Text();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private IIfStatement GetLastIfInChain(IIfStatement ifStatement);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ExtractCommonPropertyPatternFix : ModernScopedQuickFixBase {
    private IPropertyPatternClause myPropertyPatternClause;
    private IList`1<IReferenceExpression> myCommonQualifiers;
    public string Text { get; }
    public ExtractCommonPropertyPatternFix(ExtractCommonPropertyPatternWarning warning);
    public virtual string get_Text();
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ExtractInitializerFix : ModernQuickFixBase {
    private IReference myReference;
    public string Text { get; }
    public ExtractInitializerFix(UseLocalVariableBeforeDeclarationError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [PureAttribute]
private static IInitializerElement FindInitializerReferencingVariable(IReference reference);
    [PureAttribute]
private static ICollectionElementInitializer[] CollectThisAndNextElementInitializers(ICollectionElementInitializer elementInitializer);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.FillDefaultValuesFix : FixArraySizeFix {
    public string Text { get; }
    public FillDefaultValuesFix(ArrayInitializerSizeMismatchError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    private static int GetDimensionSize(IEnumerable`1<IArrayInitializer> siblings);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.FixAccessorRightsFix : object {
    [NullableAttribute("2")]
private IAccessorDeclaration myDeclaration;
    private List`1<IBulbAction> myActions;
    public FixAccessorRightsFix(AccessorAccessRightsShouldBeMoreRestrictiveError error);
    public FixAccessorRightsFix(AbstractPrivateAccessorError error);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    private bool ComputeActions();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.FixAnonymousSignatureFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private IAnonymousMethodExpression myExpression;
    public string Text { get; }
    public FixAnonymousSignatureFix(IncorrectAnonymousMethodSignatureError error);
    public FixAnonymousSignatureFix(IncorrectArgumentTypeError error);
    public FixAnonymousSignatureFix(CannotApplyBinaryOperatorMultipleCandidatesError error);
    public FixAnonymousSignatureFix(CannotApplyBinaryOperatorError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.FixAnonymousType2Fix : object {
    [NullableAttribute("2")]
private IAnonymousMemberDeclaration myDeclaration;
    public IBulbAction[] Items { get; }
    public FixAnonymousType2Fix(InvalidTypeInAnonymousTypePropertyError error);
    public IBulbAction[] get_Items();
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.CSharp.QuickFixes.FixAnonymousType2Fix/<FindSimilar>d__5")]
public static IEnumerable`1<IAnonymousObjectCreationExpression> FindSimilar(IAnonymousObjectCreationExpression creation, Predicate`1<IAnonymousObjectCreationExpression> areSimilar);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    private bool AreSimilar(IList`1<IAnonymousMemberDeclaration> initializers1, int index, IAnonymousObjectCreationExpression expression2);
    private void Execute(IAnonymousObjectCreationExpression modelExpression);
    private string GetText(IAnonymousObjectCreationExpression expression);
    [NullableContextAttribute("2")]
private IAnonymousObjectCreationExpression GetCreation(Int32& index);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.FixAnonymousTypeFix : object {
    private IAnonymousObjectCreationExpression myExpression;
    private ICollection`1<IAnonymousObjectCreationExpression> myExpressions;
    public IBulbAction[] Items { get; }
    public FixAnonymousTypeFix(SimilarAnonymousTypeNearbyWarning error);
    public IBulbAction[] get_Items();
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    private void Execute(IAnonymousObjectCreationExpression modelExpression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.FixArgumentTextFix : ChangeTextFixBase {
    private IReference myReference;
    public string Text { get; }
    public FixArgumentTextFix(NotResolvedInTextWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static IList`1<ICSharpParameterDeclaration> TryFindCheckedArgument(IEnumerable`1<ICSharpParameterDeclaration> declarations, ICSharpArgument argument);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.FixArraySizeFix : ModernQuickFixBase {
    protected IArrayInitializer myInitializer;
    public string Text { get; }
    public FixArraySizeFix(ArrayInitializerSizeMismatchError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected static bool CanFixArrayCreationSize(IArrayCreationExpression arrayCreationExpression, int depth);
    [NullableContextAttribute("2")]
protected IArrayCreationExpression FindArrayCreationExpression(Int32& depth);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.CSharp.QuickFixes.FixArraySizeFix/<FindAllSiblings>d__7")]
protected static IEnumerable`1<IArrayInitializer> FindAllSiblings(IArrayCreationExpression creation, int depth);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    protected void FixArrayCreationSize(IArrayCreationExpression arrayCreationExpression, int depth);
    private static int ComputeArraySize(IArrayCreationExpression creation, int depth);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.FixAsyncMethodReturnTypeFix : FixAsyncReturnTypeFixBase {
    public FixAsyncMethodReturnTypeFix(ICSharpDeclaration declaration);
    public FixAsyncMethodReturnTypeFix(WrongReturnTypeOfAsyncAnonymousFunctionError error);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.FixAsyncMethodReturnTypeFix2 : FixAsyncReturnTypeFixBase {
    private ICSharpDeclaration myDeclaration;
    public FixAsyncMethodReturnTypeFix2(ICSharpDeclaration declaration);
    public FixAsyncMethodReturnTypeFix2(WrongReturnTypeOfAsyncAnonymousFunctionError error);
    [NullableContextAttribute("2")]
protected virtual IType GetAsyncElementReturnType();
    public virtual bool IsAvailable(IUserDataHolder cache);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.FixAsyncReturnTypeFixBase : ModernQuickFixBase {
    [CompilerGeneratedAttribute]
private ICSharpDeclaration <declaration>P;
    public string Text { get; }
    protected FixAsyncReturnTypeFixBase(ICSharpDeclaration declaration);
    public virtual string get_Text();
    [NullableContextAttribute("2")]
protected virtual IType GetAsyncElementReturnType();
    [NullableContextAttribute("2")]
private IType GetAsyncReturnType();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.FixBaseInitOnlyMismatchFix : ModernQuickFixBase {
    [CompilerGeneratedAttribute]
private ICSharpDeclaration <sourceAccessorDeclaration>P;
    [CompilerGeneratedAttribute]
private IAccessor <superSetter>P;
    public string Text { get; }
    public FixBaseInitOnlyMismatchFix(ICSharpDeclaration sourceAccessorDeclaration, IAccessor superSetter);
    public FixBaseInitOnlyMismatchFix(CantChangeInitOnlyOnOverrideError error);
    public FixBaseInitOnlyMismatchFix(CantChangeInitOnlyOnImplicitImplementationError error);
    public FixBaseInitOnlyMismatchFix(CantChangeInitOnlyOnExplicitImplementationError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.FixBaseOverridableFix : QuickFixBase {
    [NullableAttribute("2")]
private IOverridableMember myDerivedMember;
    [NullableAttribute("2")]
private IOverridableMember mySuperMember;
    private SignatureChangeKind myChangeKind;
    private bool myIsNullabilityMismatch;
    public string Text { get; }
    public FixBaseOverridableFix(NoSuitableMemberForOverrideError error);
    public FixBaseOverridableFix(NotImplementAnotherReturnTypeError error);
    public FixBaseOverridableFix(PropertyNotImplementAnotherReturnTypeError error);
    public FixBaseOverridableFix(NotImplementAnotherTupleNamesError error);
    public FixBaseOverridableFix(CannotChangeReturnTypeInOverrideError error);
    public FixBaseOverridableFix(CannotChangeReturnTypeInWriteablePropertyError error);
    public FixBaseOverridableFix(RuntimeWithoutCovariantReturnsError error);
    public FixBaseOverridableFix(CannotChangeTupleNamesInOverrideError error);
    public FixBaseOverridableFix(NullabilityMismatchInTypeOnOverrideWarning warning);
    public FixBaseOverridableFix(NullabilityMismatchInReturnTypeOnOverrideWarning warning);
    public FixBaseOverridableFix(TopLevelNullabilityMismatchInReturnTypeOnOverrideWarning warning);
    public FixBaseOverridableFix(NullabilityMismatchInParameterTypeOnOverrideWarning warning);
    public FixBaseOverridableFix(TopLevelNullabilityMismatchInParameterTypeOnOverrideWarning warning);
    public FixBaseOverridableFix(NullabilityMismatchInTypeOnImplicitImplementationWarning warning);
    public FixBaseOverridableFix(NullabilityMismatchInReturnTypeOnImplicitImplementationWarning warning);
    public FixBaseOverridableFix(TopLevelNullabilityMismatchInReturnTypeOnImplicitImplementationWarning warning);
    public FixBaseOverridableFix(NullabilityMismatchInParameterTypeOnImplicitImplementationWarning warning);
    public FixBaseOverridableFix(TopLevelNullabilityMismatchInParameterTypeOnImplicitImplementationWarning warning);
    public FixBaseOverridableFix(NullabilityMismatchInTypeOnExplicitImplementationWarning warning);
    public FixBaseOverridableFix(NullabilityMismatchInReturnTypeOnExplicitImplementationWarning warning);
    public FixBaseOverridableFix(TopLevelNullabilityMismatchInReturnTypeOnExplicitImplementationWarning warning);
    public FixBaseOverridableFix(NullabilityMismatchInParameterTypeOnExplicitImplementationWarning warning);
    public FixBaseOverridableFix(TopLevelNullabilityMismatchInParameterTypeOnExplicitImplementationWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [PureAttribute]
private static bool CanChangeBaseNullability(IOverridableMember derivedMember, IOverridableMember superMember, SignatureChangeKind changeKind);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [NullableContextAttribute("2")]
[PureAttribute]
private IOverridableMember FindSuperMember();
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.FixBaseOverridableRightsFix : FixOverridableRightsBase {
    private ITypeMember myTypeMember;
    public FixBaseOverridableRightsFix(OverrideMemberChangeAccessRightsError error);
    protected virtual AccessRights GetCorrectAccessRights();
    protected virtual IOverridableMember FindMemberToChange();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.FixBuiltInTypeReferenceStyleFix : ModernScopedQuickFixBase {
    private IBuiltInTypeReferenceStyleSuggestion mySuggestion;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public string Text { get; }
    public string ScopedText { get; }
    public bool IsReanalysisRequired { get; }
    public FixBuiltInTypeReferenceStyleFix(InconsistentBuiltInTypeReferenceStyleWarning error);
    public FixBuiltInTypeReferenceStyleFix(InconsistentBuiltInTypeReferenceStyleForMemberAccessWarning error);
    [CompilerGeneratedAttribute]
public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool get_IsReanalysisRequired();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.FixComponentNameFix : ChangeTextFixBase {
    private IReference myReference;
    public string Text { get; }
    public FixComponentNameFix(NotResolvedInTextWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.FixConstraintsFix : ModernQuickFixBase {
    private ITypeParameter myInterfaceTypeParameter;
    private ITypeParameterDeclaration myTypeParameterDeclaration;
    private ISubstitution mySubstitution;
    public string Text { get; }
    public FixConstraintsFix(ImplicitImplementedMethodTypeParameterConstraintMismatchError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [NullableContextAttribute("2")]
private ITypeParameterConstraintsClause BuildClause();
    [PureAttribute]
private IEnumerable`1<IType> GetTypeConstraints();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.FixConstraintsOrderFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private ITypeParameterConstraintsClause myConstraintsClause;
    public string Text { get; }
    private FixConstraintsOrderFix(ITypeParameterConstraint constraint);
    public FixConstraintsOrderFix(TypeKindConstraintMustBeFirstError error);
    public FixConstraintsOrderFix(ConstructorConstraintShouldBeLastError error);
    public FixConstraintsOrderFix(ClassTypeConstraintMustBeFirstError error);
    public FixConstraintsOrderFix(ClassTypeConstraintMustComeAfterTypeKindConstraintError error);
    public FixConstraintsOrderFix(AllowsRefStructConstraintMustBeLastError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.FixCrefSignatureFix : QuickFixBase {
    private ICSharpDocCommentReference myReference;
    private DocumentRange myRange;
    public string Text { get; }
    public FixCrefSignatureFix(IncorrectSignatureInDocCommentWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    protected virtual Action`1<ITextControl> ExecuteAfterPsiTransaction(ISolution solution, IProjectModelTransactionCookie cookie, IProgressIndicator progress);
    private static void GetTypeElementToBindTo(IType type, ITypeElement& typeElement, ISubstitution& substitution);
    private void ReplaceText(IList`1<IParameter> parameters, string parametersText);
    private static void AppendDummyType(IType parameterType, StringBuilder sb);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.FixDelegateCreationFix : FixDelegateFix {
    private IReference myReference;
    public FixDelegateCreationFix(IncorrectSignatureInDelegateCreationError error);
    private static IAssignmentExpression ExtractAssignmentExpression(IReference reference);
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
protected virtual IDeclaredType GetDeclaredType();
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.FixDelegateFix : FixDelegateFixBase {
    [CanBeNullAttribute]
protected IAssignmentExpression AssignmentExpression;
    public FixDelegateFix(CannotApplyBinaryOperatorMultipleCandidatesError error);
    public FixDelegateFix(CannotApplyBinaryOperatorError error);
    public FixDelegateFix(IncorrectArgumentTypeError error);
    protected FixDelegateFix(IAssignmentExpression assignmentExpression);
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IObjectCreationExpression GetObjectCreationExpression();
    protected virtual IDeclaredType GetDeclaredType();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.FixDelegateFixBase : ModernQuickFixBase {
    public string Text { get; }
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
protected abstract virtual IObjectCreationExpression GetObjectCreationExpression();
    [NullableContextAttribute("2")]
protected abstract virtual IDeclaredType GetDeclaredType();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.FixDelegateInitialFix : FixDelegateFixBase {
    private IObjectCreationExpression myCreationExpression;
    private IDeclaredType myDeclaredType;
    [NullableContextAttribute("1")]
public FixDelegateInitialFix(IncorrectInitializerTypeError error);
    [NullableContextAttribute("1")]
public FixDelegateInitialFix(DeclarationToInitializerTypeMismatchError error);
    [NullableContextAttribute("1")]
public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IObjectCreationExpression GetObjectCreationExpression();
    protected virtual IDeclaredType GetDeclaredType();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.FixDerivedInitOnlyMismatchFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private IAccessorDeclaration myAccessorDeclaration;
    private IAccessor mySuperSetter;
    public string Text { get; }
    private FixDerivedInitOnlyMismatchFix(IAccessorDeclaration accessorDeclaration, IAccessor superSetter);
    public FixDerivedInitOnlyMismatchFix(CantChangeInitOnlyOnOverrideError error);
    public FixDerivedInitOnlyMismatchFix(CantChangeInitOnlyOnImplicitImplementationError error);
    public FixDerivedInitOnlyMismatchFix(CantChangeInitOnlyOnExplicitImplementationError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.FixFloatingPointComparingFix : ModernQuickFixBase {
    protected IEqualityExpression myEqualityExpression;
    private IssueType myIssueType;
    private SuspiciousConstant mySuspiciousConstant;
    public string Text { get; }
    public FixFloatingPointComparingFix(FloatingPointEqualityComparisonWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    protected virtual IBulbActionCommand GenerateComparisonCode(ISolution solution, CSharpElementFactory factory, bool isEqualityCheck);
    [NullableContextAttribute("2")]
[PureAttribute]
private string GetProperMethodNameForConstant();
    [PureAttribute]
private ICSharpExpression GetNonConstantOperand();
    private ICSharpExpression GetPossiblyParenthesizedRightOperand(CSharpElementFactory factory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.FixImplementationSignatureFix : FixOverridableSignatureFixBase {
    public string Text { get; }
    public FixImplementationSignatureFix(ExplicitImplementationIsNotInterfaceMemberError error);
    public virtual string get_Text();
    [NullableContextAttribute("2")]
protected virtual IParametersOwner FindParametersOwner(ISubstitution& substitution);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.FixInterfaceQualifierFix : object {
    [NullableAttribute("2")]
private IOwnerQualification myQualifierNode;
    public FixInterfaceQualifierFix(ExplicitQualifierIsNotInInterfaceListError error);
    public FixInterfaceQualifierFix(ExplicitQualifierIsNotInterfaceError error);
    public FixInterfaceQualifierFix(ExplicitImplementationIsNotInterfaceMemberError error);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.CSharp.QuickFixes.FixInterfaceQualifierFix/<CreateBulbItems>d__4")]
public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    private IList`1<IDeclaredType> GetTargetTypes();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.FixIteratorReturnTypeFix : ModernQuickFixBase {
    private ICSharpDeclaration myIteratorDeclaration;
    private bool myIsAsync;
    public string Text { get; }
    public FixIteratorReturnTypeFix(IncorrectIteratorReturnTypeError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
private IType GetIteratorTypeForElementType(PredefinedType predefinedType, IType elementType, bool useEnumeratorType);
    [NullableContextAttribute("2")]
[PureAttribute]
private IType GetIteratorReturnType();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.CSharp.QuickFixes.FixIteratorReturnTypeFix/<GetCandidateElementTypes>d__8")]
private IEnumerable`1<IType> GetCandidateElementTypes();
    [NullableContextAttribute("2")]
[PureAttribute]
private IType FindElementTypeFromYields();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.FixModifiersOrderInUsingDirectiveFix : ModernQuickFixBase {
    private IUsingSymbolDirective myUsingDirective;
    public string Text { get; }
    public FixModifiersOrderInUsingDirectiveFix(StaticAfterUnsafeInUsingDirectiveError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.FixOneWayOperationReturnTypeFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private IMethodDeclaration myMethodDeclaration;
    private bool myIsReturnTypeGenericTask;
    public string Text { get; }
    public FixOneWayOperationReturnTypeFix(OneWayOperationContractWithReturnTypeWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private bool IsReturnTypeGenericTask();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.FixOperatorModifiersFix : RemoveModifiersFixBase {
    private static TokenNodeType[] ourAllowedNodes;
    public string Text { get; }
    public FixOperatorModifiersFix(OperatorMustBePublicStaticError error);
    public FixOperatorModifiersFix(InvalidModifierInOperatorError error);
    private static FixOperatorModifiersFix();
    public virtual string get_Text();
    protected virtual bool MustRemove(TokenNodeType modifierNodeType, TokenNodeType previousNodeType);
    protected virtual bool IsAvailableEx();
    protected virtual void Execute();
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.FixOperatorParamTypeFix : object {
    private IOperatorDeclaration myDeclaration;
    public IBulbAction[] Items { get; }
    public FixOperatorParamTypeFix(AtLeastOneParameterOfSignOperatorMustBeContainingTypeError error);
    public FixOperatorParamTypeFix(IncorrectUnaryOperatorParameterError error);
    public FixOperatorParamTypeFix(IncorrectBinaryOperatorParametersError error);
    public FixOperatorParamTypeFix(UnaryOperatorParameterMustBeContainingTypeError error);
    public FixOperatorParamTypeFix(BadAbstractUnaryOperatorSignatureError error);
    public FixOperatorParamTypeFix(BadAbstractBinaryOperatorSignatureError error);
    public IBulbAction[] get_Items();
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    private static bool CheckParameterDeclaration(ITypeMemberRegularParameterDeclaration parameterDeclaration, ITypeElement typeElement);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.FixOperatorType2Fix : FixOperatorTypeFixBase {
    private ISignOperator myOperator;
    public FixOperatorType2Fix(ConditionalLogicOperatorTypesMismatchError error);
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IOperator GetOperator();
    [NullableContextAttribute("2")]
protected virtual ITypeElement GetTypeElement();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.FixOperatorTypeFix : FixOperatorTypeFixBase {
    private IOperatorDeclaration myOperatorDeclaration;
    public FixOperatorTypeFix(IncorrectIncrementDecrementOperatorTypeError error);
    public FixOperatorTypeFix(ReturnTypeOfIncDecOperatorMustBeContainingTypeError error);
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IOperator GetOperator();
    protected virtual ITypeElement GetTypeElement();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.FixOperatorTypeFixBase : ModernQuickFixBase {
    public string Text { get; }
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
protected abstract virtual IOperator GetOperator();
    [NullableContextAttribute("2")]
protected abstract virtual ITypeElement GetTypeElement();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.FixOverridableFixBase : ModernQuickFixBase {
    [CompilerGeneratedAttribute]
private IOverridableMember <OverridableMember>k__BackingField;
    protected IOverridableMember OverridableMember { get; }
    protected FixOverridableFixBase(IOverridableMember element);
    [CompilerGeneratedAttribute]
protected IOverridableMember get_OverridableMember();
    [NullableContextAttribute("1")]
public virtual bool IsAvailable(IUserDataHolder cache);
}
public abstract class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.FixOverridableRightsBase : object {
    [CanBeNullAttribute]
protected ICSharpDeclaration myDeclaration;
    protected FixOverridableRightsBase(OverrideMemberChangeAccessRightsError error);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    [PureAttribute]
protected abstract virtual AccessRights GetCorrectAccessRights();
    [PureAttribute]
[CanBeNullAttribute]
protected abstract virtual IOverridableMember FindMemberToChange();
    [PureAttribute]
private static bool IsValidAccessorAccessRights(AccessRights accessorRights, AccessRights accessorOwnerRights);
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.FixOverridableRightsFix : FixOverridableRightsBase {
    public FixOverridableRightsFix(OverrideMemberChangeAccessRightsError error);
    protected virtual AccessRights GetCorrectAccessRights();
    protected virtual IOverridableMember FindMemberToChange();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.FixOverridableSignatureFixBase : FixOverridableFixBase {
    [NullableAttribute("2")]
private static DeclaredElementPresenterStyle ourPresenter;
    private static DeclaredElementPresenterStyle Presenter { get; }
    [NullableContextAttribute("2")]
protected FixOverridableSignatureFixBase(IOverridableMember element);
    private static DeclaredElementPresenterStyle get_Presenter();
    [NullableContextAttribute("2")]
protected string GetDeclaredElementText();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [NullableContextAttribute("2")]
protected abstract virtual IParametersOwner FindParametersOwner(ISubstitution& substitution);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.FixParameterScopeModifierFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private IDeclaration myParameterDeclaration;
    private ScopedKind myRequiredScope;
    private Nullable`1<bool> myShouldHaveUnscopedRefAttribute;
    private bool myShowOwnerType;
    public string Text { get; }
    public FixParameterScopeModifierFix(ScopedMismatchInParameterOfOverrideOrImplementationError error);
    public FixParameterScopeModifierFix(ScopedMismatchInParameterOfOverrideOrImplementationWarning error);
    public FixParameterScopeModifierFix(ScopedMismatchInParameterOfTargetDelegateError error);
    public FixParameterScopeModifierFix(ScopedMismatchInParameterOfTargetDelegateWarning error);
    public FixParameterScopeModifierFix(RefReturnScopedParameterError error);
    public FixParameterScopeModifierFix(RefReturnScopedParameterMemberError error);
    public FixParameterScopeModifierFix(RefReturnScopedParameterWarning error);
    public FixParameterScopeModifierFix(RefReturnScopedParameterMemberWarning error);
    [NullableContextAttribute("2")]
public FixParameterScopeModifierFix(IDeclaration parameterDeclaration, Nullable`1<ScopedKind> scope, Nullable`1<bool> shouldHaveUnscopedRefAttribute, bool showOwnerType);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [CompilerGeneratedAttribute]
private string <get_Text>g__GetParameterPresentation|14_0(<>c__DisplayClass14_0& );
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <get_Text>g__ShouldFixUnscopedRefAttribute|14_1(<>c__DisplayClass14_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.FixParamTypeSpecificationFix : ModernQuickFixBase {
    private ILambdaSignature mySignature;
    public string Text { get; }
    public FixParamTypeSpecificationFix(InconsistentLambdaParameterUsageError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public static void Execute(ILambdaExpression declaration, CSharpElementFactory factory);
    private static ILocalRegularParameterDeclaration CreateLambdaParameterDeclaration(CSharpElementFactory factory, string name, IType type, bool canUseExplicitly, ICSharpExpression defaultValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.FixPartialModifierFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private ICSharpModifiersOwnerDeclaration myDeclaration;
    public string Text { get; }
    public FixPartialModifierFix(PartialModifierUsageError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.FixPropertyNameFix : ChangeTextFixBase {
    [NullableAttribute("2")]
private ICompletableReference myReference;
    public string Text { get; }
    public FixPropertyNameFix(NotResolvedInTextWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.FixShiftSignatureFix : ModernQuickFixBase {
    private ISignOperatorDeclaration myDeclaration;
    public string Text { get; }
    public FixShiftSignatureFix(FirstParameterOfShiftOperatorMustBeContainingTypeError error);
    public FixShiftSignatureFix(SecondParameterOfShiftOperatorMustBeIntError error);
    public FixShiftSignatureFix(BadTypeOfFirstParameterOfAbstractShiftOperatorError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.FixSignatureFix : FixOverridableSignatureFixBase {
    public string Text { get; }
    public FixSignatureFix(NoSuitableMemberForOverrideError error);
    public virtual string get_Text();
    [NullableContextAttribute("2")]
protected virtual IParametersOwner FindParametersOwner(ISubstitution& substitution);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.FixStaticQualifierFix : ModernScopedQuickFixBase {
    [NullableAttribute("2")]
private IQualifiableReference myReference;
    public string Text { get; }
    public string ScopedText { get; }
    public bool IsReanalysisRequired { get; }
    public FixStaticQualifierFix(AccessToStaticMemberViaDerivedTypeWarning error);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool get_IsReanalysisRequired();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private void Execute();
    private static void ReBindReference(IReferenceNameReference reference, ITypeElement baseTypeElement, ISubstitution substitution);
    private static void ReBindReference(IReferenceExpressionReference reference, ITypeElement baseTypeElement, ISubstitution substitution);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.FixSubpatternNameFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private ISubpattern mySubpattern;
    [NullableAttribute("2")]
private string myComponentName;
    public string Text { get; }
    public FixSubpatternNameFix(DeconstructionSubpatternWrongTupleComponentNameError error);
    public FixSubpatternNameFix(DeconstructionSubpatternWrongDeconstructParameterNameError error);
    public FixSubpatternNameFix(NotResolvedError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.FixTrueFalseTypeFix : ModernQuickFixBase {
    private IOperatorDeclaration myDeclaration;
    public string Text { get; }
    private IDeclaredType BoolType { get; }
    public FixTrueFalseTypeFix(IncorrectTrueOrFalseOperatorTypeError error);
    public FixTrueFalseTypeFix(ReturnTypeOfTrueFalseOperatorMustBeBoolError error);
    public virtual string get_Text();
    private IDeclaredType get_BoolType();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
public static class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.FixTypeArgumentsBulbActionHelper : object {
    [NullableContextAttribute("1")]
public static IBulbActionCommand FixTypeArgumentsAndGetShowHotspotCommand(IReferenceExpression referenceExpression, IInvocationExpression invocationExpression, TMethodOrLocalFunction methodOrLocalFunction);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.FixTypeArgumentsUtil : object {
    [PureAttribute]
public static IReadOnlyCollection`1[] GetPossibleTypeArguments(IReferenceExpression referenceExpression, IInvocationExpression invocationExpression, TMethodOrLocalFunction methodOrLocalFunction);
    public static ISubstitution TryInferUsingReturnType(ITreeNode context, IType expectedReturnType, TMethodOrLocalFunction methodOrLocalFunction);
    public static IReadOnlyList`1<ISubstitution> TryInferUsingArguments(IArgumentsOwner argumentsOwner, TMethodOrLocalFunction methodOrLocalFunction);
    [PureAttribute]
private static HashSet`1<IType> GetPossibleTypesForTypeParameter(ITypeParameter typeParameter, ISubstitution originalSubstitution, IReadOnlyList`1<ISubstitution> argumentsBasedSubstitutions, ISubstitution returnTypeBasedSubstitution, ITreeNode context);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
internal static void <TryInferUsingArguments>g__ProcessArgument|2_0(IExpression argumentExpression, CSharpParameterInstance parameterInstance, <>c__DisplayClass2_0`1& );
    [CompilerGeneratedAttribute]
internal static void <TryInferUsingArguments>g__TryInferUsingArgumentWithType|2_1(IType argumentType, CSharpParameterInstance parameterInstance, <>c__DisplayClass2_0`1& );
    [CompilerGeneratedAttribute]
internal static void <GetPossibleTypesForTypeParameter>g__CheckPossibleType|3_0(IType type, <>c__DisplayClass3_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.GenerateArgumentStubsFix : ModernQuickFixBase {
    private int myArgumentNumber;
    [NullableAttribute("2")]
private IReference myInvocableReference;
    public string Text { get; }
    public GenerateArgumentStubsFix(IncorrectArgumentNumberError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    private static IParameter GetParameter(IDeclaredElementPointer`1<IParametersOwner> invocablePointer, int index);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static ICSharpExpression DefaultValue(IType type, CSharpElementFactory factory, ITreeNode context);
    private static string VarName(string baseName, ISymbolTable table, ICollection`1<string> names);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.GenerateConstructorFix : QuickFixBase {
    [NullableAttribute("2")]
private IClassLikeDeclaration myTypeDeclaration;
    private bool myCheckBaseClassHasConstructor;
    public string Text { get; }
    public bool IsReadOnly { get; }
    public GenerateConstructorFix(NoDefaultConstructorInBaseClassError error);
    public GenerateConstructorFix(ImplicitChainingToSetsRequiredMembersRequiresSetsRequiredMembersError error);
    public GenerateConstructorFix(UninitializedNonNullableTypeMemberWarning warning);
    public virtual string get_Text();
    public sealed virtual bool get_IsReadOnly();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual void Execute(ISolution solution, ITextControl textControl);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <Execute>b__11_0(IGeneratorContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.GenerateDefaultEqualityMembersFix : QuickFixBase {
    private ITypeElement myTypeElement;
    [NullableAttribute("2")]
private IDeclaration myPreferredDeclaration;
    public string Text { get; }
    public bool IsReadOnly { get; }
    public GenerateDefaultEqualityMembersFix(UsageOfDefaultStructEqualityWarning error);
    public GenerateDefaultEqualityMembersFix(DefaultStructEqualityIsUsedWarningBase error);
    public GenerateDefaultEqualityMembersFix(StructLacksIEquatableWarningBase error);
    public virtual string get_Text();
    public sealed virtual bool get_IsReadOnly();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual void Execute(ISolution solution, ITextControl textControl);
    [NullableContextAttribute("2")]
private IDeclaration GetDeclaration();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.GenerateDefaultSwitchExpressionArmFix : GenerateSwitchExpressionArmsFix {
    private ISwitchExpression mySwitchExpression;
    public string Text { get; }
    public GenerateDefaultSwitchExpressionArmFix(SwitchExpressionNotExhaustiveWarning warning);
    public GenerateDefaultSwitchExpressionArmFix(SwitchExpressionNotExhaustiveWithUnnamedEnumValueWarning warning);
    public GenerateDefaultSwitchExpressionArmFix(SwitchExpressionNotExhaustiveWithWhenWarning warning);
    public GenerateDefaultSwitchExpressionArmFix(SwitchExpressionNotExhaustiveForNullWarning warning);
    public GenerateDefaultSwitchExpressionArmFix(SwitchExpressionNotExhaustiveForNullWithWhenWarning warning);
    public virtual string get_Text();
    protected virtual bool IsAvailableInternal(IDeclaredType governingType);
    protected virtual IList`1<IField> GetMissingEnumValues(Boolean& defaultCaseIsMissing, Boolean& nullCaseIsMissing);
    protected virtual IList`1<bool> GetMissingBoolValues(Boolean& defaultCaseIsMissing, Boolean& nullCaseIsMissing);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.GenerateDefaultSwitchStatementSectionFix : GenerateSwitchStatementLabelsFix {
    public string Text { get; }
    public GenerateDefaultSwitchStatementSectionFix(SwitchStatementForEnumMissesDefaultSectionWarning warning);
    public GenerateDefaultSwitchStatementSectionFix(SwitchStatementMissingSomeEnumCasesNoDefaultWarning warning);
    public virtual string get_Text();
    protected virtual bool IsAvailableInternal(IDeclaredType governingType);
    protected virtual IList`1<IField> GetMissingEnumValues(Boolean& defaultCaseIsMissing, Boolean& nullCaseIsMissing);
    protected virtual IList`1<bool> GetMissingBoolValues(Boolean& defaultCaseIsMissing, Boolean& nullCaseIsMissing);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.GenerateDisposePatternFix : WorkflowDrivenImplementMembersFix`1<GenerateDisposePatternWorkflow> {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private TypeMemberInstance[] myMissingMembers;
    public string Text { get; }
    public GenerateDisposePatternFix(InterfaceMembersNotImplementedError error);
    public virtual string get_Text();
    [NullableContextAttribute("2")]
protected virtual GenerateDisposePatternWorkflow TryCreateWorkflow();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.GenerateEqualityComparerFix : WorkflowDrivenImplementMembersFix`1<GenerateEqualityComparerWorkflow> {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private TypeMemberInstance[] myMissingMembers;
    public string Text { get; }
    protected bool ShouldCheckIfWorkflowIsEnabled { get; }
    public GenerateEqualityComparerFix(InterfaceMembersNotImplementedError error);
    public virtual string get_Text();
    protected virtual bool get_ShouldCheckIfWorkflowIsEnabled();
    [NullableContextAttribute("2")]
protected virtual GenerateEqualityComparerWorkflow TryCreateWorkflow();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.GenerateEqualityMembersFix : WorkflowDrivenImplementMembersFix`1<GenerateEqualityMembersWorkflow> {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private TypeMemberInstance[] myMissingMembers;
    public string Text { get; }
    public GenerateEqualityMembersFix(InterfaceMembersNotImplementedError error);
    public virtual string get_Text();
    [NullableContextAttribute("2")]
protected virtual GenerateEqualityMembersWorkflow TryCreateWorkflow();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.GenerateEqualsFix : QuickFixBase {
    [NullableAttribute("2")]
private ITypeDeclaration myTypeDeclaration;
    [NullableAttribute("2")]
private IDeclaration myAnchorDeclaration;
    public string Text { get; }
    public bool IsReadOnly { get; }
    public GenerateEqualsFix(OverridesEqualsWithoutGetHashCodeWarning error);
    public GenerateEqualsFix(RecordEqualsWithoutGetHashCodeWarning error);
    public GenerateEqualsFix(EqOperatorRequiresEqualsAndHashCodeWarning error);
    public virtual string get_Text();
    public sealed virtual bool get_IsReadOnly();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual void Execute(ISolution solution, ITextControl textControl);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.GenerateExplicitEnumLabelsToDefaultSectionFix : GenerateSwitchStatementLabelsFix {
    private ISwitchStatement mySwitchStatement;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public string Text { get; }
    public GenerateExplicitEnumLabelsToDefaultSectionFix(SwitchStatementHandlesSomeKnownEnumValuesWithDefaultWarning warning);
    [CompilerGeneratedAttribute]
public virtual string get_Text();
    protected virtual void GenerateMissingLabelsForEnum(IDeclaredType governingType, bool isNullable, List`1<ISwitchSection> generatedBranches);
    private void AddMissingEnumLabelsForDefaultSection(ISwitchSection targetSection, ISwitchCaseLabel defaultLabel);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.GenerateFormattingMembersFix : WorkflowDrivenImplementMembersFix`1<GenerateFormattingWorkflow> {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private TypeMemberInstance[] myMissingMembers;
    public string Text { get; }
    public GenerateFormattingMembersFix(InterfaceMembersNotImplementedError error);
    public virtual string get_Text();
    [NullableContextAttribute("2")]
protected virtual GenerateFormattingWorkflow TryCreateWorkflow();
    protected virtual void ConfigureContext(IGeneratorContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.GenerateGuidFix : ModernQuickFixBase {
    private ICSharpArgument myArgument;
    public string Text { get; }
    public GenerateGuidFix(InvalidArgumentForAttributeError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.GenerateRelationalComparerFix : WorkflowDrivenImplementMembersFix`1<GenerateRelationalComparerWorkflow> {
    private static ClrTypeName ourGenericComparerFqn;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private TypeMemberInstance[] myMissingMembers;
    public string Text { get; }
    protected bool ShouldCheckIfWorkflowIsEnabled { get; }
    public GenerateRelationalComparerFix(InterfaceMembersNotImplementedError error);
    private static GenerateRelationalComparerFix();
    public virtual string get_Text();
    protected virtual bool get_ShouldCheckIfWorkflowIsEnabled();
    [NullableContextAttribute("2")]
protected virtual GenerateRelationalComparerWorkflow TryCreateWorkflow();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.GenerateRelationalMembersFix : WorkflowDrivenImplementMembersFix`1<GenerateRelationalMembersWorkflow> {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private TypeMemberInstance[] myMissingMembers;
    public string Text { get; }
    public GenerateRelationalMembersFix(InterfaceMembersNotImplementedError error);
    public virtual string get_Text();
    [NullableContextAttribute("2")]
protected virtual GenerateRelationalMembersWorkflow TryCreateWorkflow();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.GenerateSwitchBranchesFixBase`1 : ModernQuickFixBase {
    [CompilerGeneratedAttribute]
private ITreeNode <switchNode>P;
    public static int MAGIC_CONST;
    protected GenerateSwitchBranchesFixBase`1(ITreeNode switchNode);
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected abstract virtual bool IsAvailableInternal(IDeclaredType governingType);
    [NullableContextAttribute("2")]
protected abstract virtual IType GetGoverningType();
    [NullableContextAttribute("2")]
protected abstract virtual ICSharpExpression GetGoverningExpression();
    protected abstract virtual IList`1<IField> GetMissingEnumValues(Boolean& defaultCaseIsMissing, Boolean& nullCaseIsMissing);
    protected abstract virtual IList`1<bool> GetMissingBoolValues(Boolean& defaultCaseIsMissing, Boolean& nullCaseIsMissing);
    protected abstract virtual TSwitchTreeNode AppendDefaultSwitchBranch();
    [NullableContextAttribute("2")]
protected abstract virtual TSwitchTreeNode FindDefaultSwitchBranch();
    protected abstract virtual TSwitchTreeNode AppendSwitchBranch(string branchValue, TSwitchTreeNode anchorBranch);
    [NullableContextAttribute("2")]
protected abstract virtual TSwitchTreeNode FindSwitchNullCase();
    protected abstract virtual void BindBranchValueTo(TSwitchTreeNode branch, IDeclaredElement declaredElement, ISubstitution substitution);
    protected abstract virtual IBulbActionCommand GetPostExecuteAction(IList`1<TSwitchTreeNode> generatedSwitchBranches);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    protected virtual void GenerateMissingLabelsForEnum(IDeclaredType governingType, bool isNullable, List`1<TSwitchTreeNode> generatedBranches);
    [NullableContextAttribute("2")]
private IDeclaredType FindFixableGoverningType(Boolean& isNullable);
    protected static IReferenceExpression GetReferenceExpression(ICSharpExpression expression);
    protected static bool HasConstructorToPassActualValue(IDeclaredType exceptionType);
    protected static FactoryArgumentsBuilder CreateThrowTemplate(ICSharpExpression governingExpression);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.GenerateSwitchExpressionArmsFix : GenerateSwitchBranchesFixBase`1<ISwitchExpressionArm> {
    private static string GENERATE_MISSING_ARMS_TEXT;
    private ISwitchExpression mySwitchExpression;
    [NullableAttribute("2")]
private CSharpElementFactory myElementFactory;
    private bool myIsAvailable;
    public string Text { get; }
    private CSharpElementFactory ElementFactory { get; }
    public GenerateSwitchExpressionArmsFix(SwitchExpressionNotExhaustiveWarning warning);
    public GenerateSwitchExpressionArmsFix(SwitchExpressionNotExhaustiveWithWhenWarning warning);
    public GenerateSwitchExpressionArmsFix(SwitchExpressionHandlesSomeKnownEnumValuesWithExceptionInDefaultWarning warning);
    public GenerateSwitchExpressionArmsFix(CannotInferSwitchExpressionTypeError error);
    protected GenerateSwitchExpressionArmsFix(ISwitchExpression switchExpression);
    private static GenerateSwitchExpressionArmsFix();
    public virtual string get_Text();
    protected virtual bool IsAvailableInternal(IDeclaredType governingType);
    private CSharpElementFactory get_ElementFactory();
    protected virtual IType GetGoverningType();
    [NullableContextAttribute("2")]
protected virtual ICSharpExpression GetGoverningExpression();
    protected virtual IList`1<IField> GetMissingEnumValues(Boolean& defaultCaseIsMissing, Boolean& nullCaseIsMissing);
    protected virtual IList`1<bool> GetMissingBoolValues(Boolean& defaultCaseIsMissing, Boolean& nullCaseIsMissing);
    protected virtual ISwitchExpressionArm AppendDefaultSwitchBranch();
    private IThrowExpression CreateThrowExpression();
    [NullableContextAttribute("2")]
protected virtual ISwitchExpressionArm FindDefaultSwitchBranch();
    protected virtual ISwitchExpressionArm AppendSwitchBranch(string branchValue, ISwitchExpressionArm anchorBranch);
    [NullableContextAttribute("2")]
protected virtual ISwitchExpressionArm FindSwitchNullCase();
    protected virtual IBulbActionCommand GetPostExecuteAction(IList`1<ISwitchExpressionArm> generatedSwitchBranches);
    protected virtual void BindBranchValueTo(ISwitchExpressionArm arm, IDeclaredElement declaredElement, ISubstitution substitution);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.GenerateSwitchStatementLabelsFix : GenerateSwitchBranchesFixBase`1<ISwitchSection> {
    [NullableAttribute("2")]
private ISwitchStatement mySwitchStatement;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public string Text { get; }
    public GenerateSwitchStatementLabelsFix(EmptySwitchBlockWarning error);
    public GenerateSwitchStatementLabelsFix(SwitchStatementHandlesSomeKnownEnumValuesWithDefaultWarning warning);
    public GenerateSwitchStatementLabelsFix(SwitchStatementMissingSomeEnumCasesNoDefaultWarning warning);
    public GenerateSwitchStatementLabelsFix(SwitchStatementForEnumMissesDefaultSectionWarning warning);
    protected GenerateSwitchStatementLabelsFix(ISwitchStatement switchStatement);
    [CompilerGeneratedAttribute]
public virtual string get_Text();
    [NullableContextAttribute("2")]
protected virtual IType GetGoverningType();
    [NullableContextAttribute("2")]
protected virtual ICSharpExpression GetGoverningExpression();
    protected virtual bool IsAvailableInternal(IDeclaredType governingType);
    protected virtual IList`1<IField> GetMissingEnumValues(Boolean& defaultCaseIsMissing, Boolean& nullCaseIsMissing);
    protected virtual IList`1<bool> GetMissingBoolValues(Boolean& defaultCaseIsMissing, Boolean& nullCaseIsMissing);
    [NullableContextAttribute("2")]
protected virtual ISwitchSection FindDefaultSwitchBranch();
    [NullableContextAttribute("2")]
protected virtual ISwitchSection FindSwitchNullCase();
    protected virtual ISwitchSection AppendDefaultSwitchBranch();
    protected virtual ISwitchSection AppendSwitchBranch(string branchValue, ISwitchSection anchorBranch);
    protected virtual IBulbActionCommand GetPostExecuteAction(IList`1<ISwitchSection> generatedSwitchSections);
    protected virtual void BindBranchValueTo(ISwitchSection switchSection, IDeclaredElement declaredElement, ISubstitution substitution);
    private static ICSharpStatement CreateThrowStatement(ISwitchStatement switchStatement, CSharpElementFactory factory);
    protected string EnumerateMissedFieldsNames(IField[] missedFields, bool nullCaseIsMissed, bool defaultCaseIsMissed);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.GenerateTypePatternsFix : QuickFixBase {
    [NullableAttribute("2")]
private ITreeNode myPatternMatchingConstruct;
    public string Text { get; }
    public GenerateTypePatternsFix(SwitchExpressionNotExhaustiveWarning warning);
    public GenerateTypePatternsFix(SwitchExpressionNotExhaustiveWithWhenWarning warning);
    public GenerateTypePatternsFix(EmptySwitchBlockWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.IfToCoalescing2Fix : ModernQuickFixBase {
    [CompilerGeneratedAttribute]
private ConvertIfStatementToNullCoalescingExpression2Warning <warning>P;
    public string Text { get; }
    public IfToCoalescing2Fix(ConvertIfStatementToNullCoalescingExpression2Warning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.IfToCoalescing3Fix : ModernQuickFixBase {
    [CompilerGeneratedAttribute]
private ConvertIfStatementToReturnNullCoalescingWarning <warning>P;
    public string Text { get; }
    public IfToCoalescing3Fix(ConvertIfStatementToReturnNullCoalescingWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.IfToCoalescing4Fix : ModernQuickFixBase {
    [CompilerGeneratedAttribute]
private ConvertIfStatementToNullCoalescingInMethodCallWarning <warning>P;
    public string Text { get; }
    public IfToCoalescing4Fix(ConvertIfStatementToNullCoalescingInMethodCallWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.IfToCoalescing5Fix : ModernQuickFixBase {
    [CompilerGeneratedAttribute]
private ConvertIfStatementToNullCoalescingInMethodCallWithAssignmentWarning <warning>P;
    public string Text { get; }
    public IfToCoalescing5Fix(ConvertIfStatementToNullCoalescingInMethodCallWithAssignmentWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.IfToCoalescing6Fix : ModernQuickFixBase {
    [CompilerGeneratedAttribute]
private ConvertIfStatementToReturnMethodCallWithNullCoalescingWarning <warning>P;
    public string Text { get; }
    public IfToCoalescing6Fix(ConvertIfStatementToReturnMethodCallWithNullCoalescingWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.IfToCoalescing7Fix : ModernQuickFixBase {
    [CompilerGeneratedAttribute]
private ConvertIfStatementToNullCoalescingExpression3Warning <warning>P;
    public string Text { get; }
    public IfToCoalescing7Fix(ConvertIfStatementToNullCoalescingExpression3Warning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.IfToCoalescingAssignmentFix : ModernQuickFixBase {
    [CompilerGeneratedAttribute]
private ConvertIfStatementToNullCoalescingAssignmentWarning <warning>P;
    public string Text { get; }
    public IfToCoalescingAssignmentFix(ConvertIfStatementToNullCoalescingAssignmentWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.IfToCoalescingFix : ModernQuickFixBase {
    private ConvertIfStatementToNullCoalescingExpression1Warning myWarning;
    public string Text { get; }
    public IfToCoalescingFix(ConvertIfStatementToNullCoalescingExpression1Warning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.IfToSwitchConfigureOpenWorldAction : object {
    [CompilerGeneratedAttribute]
private ITreeNode <context>P;
    public string Text { get; }
    public IfToSwitchConfigureOpenWorldAction(ITreeNode context);
    public sealed virtual string get_Text();
    public sealed virtual void Execute(ISolution solution, ITextControl textControl);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.IfToSwitchExpressionAction")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.IfToSwitchExpressionFix : object {
    private static IAnchor ourAnchor;
    private IIfStatement myIfStatement;
    private bool myCanUseSwitchExpression;
    private bool mySuggestionIsClosedWorldOnly;
    public IfToSwitchExpressionFix(ConvertIfStatementToSwitchWarning error);
    private static IfToSwitchExpressionFix();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.CSharp.QuickFixes.IfToSwitchExpressionFix/<CreateBulbItems>d__6")]
public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.IfToSwitchStatementAction")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.IfToSwitchStatementFix : object {
    private IIfStatement myIfStatement;
    private bool mySuggestionIsClosedWorldOnly;
    private static IAnchor ourAnchor;
    public IfToSwitchStatementFix(ConvertIfStatementToSwitchWarning error);
    private static IfToSwitchStatementFix();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.CSharp.QuickFixes.IfToSwitchStatementFix/<CreateBulbItems>d__5")]
public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.IfToTernary2Fix : ModernQuickFixBase {
    [CompilerGeneratedAttribute]
private ConvertIfStatementToReturnConditionalWarning <warning>P;
    public string Text { get; }
    public IfToTernary2Fix(ConvertIfStatementToReturnConditionalWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [PureAttribute]
private bool IsReplaceWithReturn();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static IType GetTargetType(ICSharpTreeNode node);
    [CompilerGeneratedAttribute]
private void <ExecutePsiTransaction>b__6_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.IfToTernary3Fix : ModernQuickFixBase {
    [CompilerGeneratedAttribute]
private ConvertIfStatementToMethodCallWarning <warning>P;
    public string Text { get; }
    public IfToTernary3Fix(ConvertIfStatementToMethodCallWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.IfToTernary4Fix : ModernQuickFixBase {
    [CompilerGeneratedAttribute]
private ConvertIfStatementToMethodCallWithAssignmentWarning <warning>P;
    public string Text { get; }
    public IfToTernary4Fix(ConvertIfStatementToMethodCallWithAssignmentWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.IfToTernary5Fix : ModernQuickFixBase {
    [CompilerGeneratedAttribute]
private ConvertIfStatementToReturnMethodCallWithConditionalWarning <warning>P;
    public string Text { get; }
    public IfToTernary5Fix(ConvertIfStatementToReturnMethodCallWithConditionalWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.IfToTernaryFix : ModernQuickFixBase {
    [CompilerGeneratedAttribute]
private ConvertIfStatementToConditionalTernaryExpressionWarning <warning>P;
    public string Text { get; }
    public IfToTernaryFix(ConvertIfStatementToConditionalTernaryExpressionWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [CompilerGeneratedAttribute]
private ICSharpStatement <ExecutePsiTransaction>b__5_0();
}
public static class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.IfToTernaryFixUtil : object {
    [NotNullAttribute]
public static ICSharpExpression CreateEquivalentTernaryExpression(ICSharpExpression condition, ICSharpExpression thenExpression, ICSharpExpression elseExpression, IType targetType);
    [NotNullAttribute]
private static IBinaryExpression CombineIntoCondition(ICSharpExpression leftOperand, TokenNodeType signToken, ICSharpExpression rightOperand);
    [NotNullAttribute]
private static ICSharpExpression DoCreateTernaryExpression(ICSharpExpression condition, ICSharpExpression thenExpression, ICSharpExpression elseExpression, IType targetType);
    [NotNullAttribute]
[PureAttribute]
private static ICSharpExpression AddCastIfNeeded(ICSharpExpression expression, IExpressionType expressionType, IType targetType, ICSharpTypeConversionRule conversionRule, CSharpElementFactory factory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ImplementDisposableFix : object {
    [NullableAttribute("2")]
private ITypeElement myTypeElement;
    [NullableAttribute("2")]
private IDeclaredElement mySymbolToImplement;
    private bool myIsAsyncDisposable;
    public string Text { get; }
    [NullableContextAttribute("2")]
private ImplementDisposableFix(IExpressionType type, bool isAsyncDisposable, bool useDuckTyping);
    public ImplementDisposableFix(NonDisposableTypeInUsingError error);
    public ImplementDisposableFix(NonAsyncDisposableTypeInAwaitUsingError error);
    public ImplementDisposableFix(AsyncDisposableTypeInUsingError error);
    public ImplementDisposableFix(DisposableTypeInAwaitUsingError error);
    public ImplementDisposableFix(NonDisposableByRefLikeTypeInUsingError error);
    public sealed virtual string get_Text();
    private static RichText FormatTypeName(IDeclaredElement declaredElement);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public sealed virtual void Execute(ISolution solution, ITextControl textControl);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ImplementEnumerableFix : ImplementSpecificInterfaceFixBase {
    public ImplementEnumerableFix(TypeIsNotEnumerableError error);
    public ImplementEnumerableFix(TypeIsNotEnumerableButIsAsyncEnumerableError error);
    public ImplementEnumerableFix(CollectionInitializerAppliedToNonCollectionError error);
    public ImplementEnumerableFix(SpreadCollectionTypeIsNotEnumerableError error);
    public ImplementEnumerableFix(CollectionExpressionTypeIsNotConstructibleError error);
    public ImplementEnumerableFix(CollectionExpressionHasBuilderAttributeWithoutIterationTypeError error);
    public ImplementEnumerableFix(CollectionExpressionTargetWithoutIterationTypeError error);
    public ImplementEnumerableFix(ParamsCollectionWithInvalidTypeError error);
    protected virtual string GetText(string typePresentableName);
    protected virtual IDeclaredType GetImplementedInterface(ITypeElement implementor);
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ImplementGenericIEnumerableForCollectionFix : object {
    private IExpressionType myCollectionType;
    private ICSharpExpression myCollection;
    private bool myUseAsyncInterface;
    private IBulbAction myItem;
    private ImplementGenericIEnumerableForCollectionFix(IExpressionType collectionType, ICSharpExpression collection, bool useAsyncInterface);
    public ImplementGenericIEnumerableForCollectionFix(TypeIsNotEnumerableError error);
    public ImplementGenericIEnumerableForCollectionFix(TypeIsNotEnumerableButIsAsyncEnumerableError error);
    public ImplementGenericIEnumerableForCollectionFix(TypeIsNotAsyncEnumerableError error);
    public ImplementGenericIEnumerableForCollectionFix(TypeIsNotAsyncEnumerableButIsEnumerableError error);
    public ImplementGenericIEnumerableForCollectionFix(SpreadCollectionTypeIsNotEnumerableError error);
    public ImplementGenericIEnumerableForCollectionFix(CollectionExpressionTypeIsNotConstructibleError error);
    public ImplementGenericIEnumerableForCollectionFix(CollectionExpressionHasBuilderAttributeWithoutIterationTypeError error);
    public ImplementGenericIEnumerableForCollectionFix(CollectionExpressionTargetWithoutIterationTypeError error);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    [CanBeNullAttribute]
private ImplementInterfaceAction GetBulbItem(IUserDataHolder cache);
    [PureAttribute]
private IDeclaredType GetTypeToImplement();
    [CanBeNullAttribute]
private IType GetIterationVariableType();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ImplementGenericIEnumerableForCollectionInitializerFix : ImplementSpecificInterfaceFixBase {
    [NullableAttribute("2")]
private ICollectionInitializer myInitializer;
    public ImplementGenericIEnumerableForCollectionInitializerFix(CollectionInitializerAppliedToNonCollectionError error);
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual string GetText(string typePresentableName);
    protected virtual IDeclaredType GetImplementedInterface(ITypeElement implementor);
    [NullableContextAttribute("2")]
private IType FindEncompassedType();
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ImplementGenericIEnumerableForQueryExpressionFix : object {
    private IReference myReference;
    private IList`1<IDeclaredType> myToImplement;
    private IDeclaredType myImplementor;
    public ImplementGenericIEnumerableForQueryExpressionFix(NotResolvedError error);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ImplementGenericIEnumerableForQueryExpressionFix/<CreateBulbItems>d__4")]
public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    private void Prepare();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ImplementGenericIEnumerableForQueryExpressionFix/<GetUsages>d__7")]
private IEnumerable`1<IExpression> GetUsages(IEnumerable`1<IReference> references);
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ImplementInterface2Fix : ImplementInterfaceFixBase {
    [CanBeNullAttribute]
private IDeclaredType myInheritorType;
    protected ITypeElement Inheritor { get; }
    public ImplementInterface2Fix(IncorrectArrayElementTypeError error);
    public ImplementInterface2Fix(IncorrectReturnTypeError error);
    public ImplementInterface2Fix(IncorrectYieldReturnTypeError error);
    public ImplementInterface2Fix(IncorrectAssignmentTypeError error);
    public ImplementInterface2Fix(IncorrectInitializerTypeError error);
    public ImplementInterface2Fix(DeclarationToInitializerTypeMismatchError error);
    public ImplementInterface2Fix(IncorrectArgumentTypeError error);
    public ImplementInterface2Fix(TypeArgumentIsNotConvertibleToConstraintError error);
    protected virtual ITypeElement get_Inheritor();
    public virtual bool IsAvailable(IUserDataHolder cache);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ImplementInterfaceAction : ModernBulbActionBase {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IDeclaredType <implementorType>P;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IDeclaredType <interfaceToImplement>P;
    [CompilerGeneratedAttribute]
private string <formatString>P;
    public bool IsValid { get; }
    public string Text { get; }
    [NullableContextAttribute("2")]
public ImplementInterfaceAction(IDeclaredType implementorType, IDeclaredType interfaceToImplement, string formatString);
    public bool get_IsValid();
    public virtual string get_Text();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ImplementInterfaceFix : ImplementInterfaceFixBase {
    [CompilerGeneratedAttribute]
private ITypeElement <Inheritor>k__BackingField;
    protected ITypeElement Inheritor { get; }
    [NullableContextAttribute("1")]
public ImplementInterfaceFix(ExplicitQualifierIsNotInInterfaceListError error);
    [CompilerGeneratedAttribute]
protected virtual ITypeElement get_Inheritor();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ImplementInterfaceFixBase : ModernQuickFixBase {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IDeclaredType <interfaceType>P;
    [NullableAttribute("2")]
protected ITypeElement Inheritor { get; }
    public string Text { get; }
    [NullableContextAttribute("2")]
protected ImplementInterfaceFixBase(IDeclaredType interfaceType);
    [NullableContextAttribute("2")]
protected abstract virtual ITypeElement get_Inheritor();
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ImplementMemberAbstractFix : WorkflowDrivenImplementMembersFix`1<GenerateImplementationsWorkflow> {
    public string Text { get; }
    public ImplementMemberAbstractFix(InterfaceMembersNotImplementedError error);
    public virtual string get_Text();
    [NullableContextAttribute("2")]
protected virtual GenerateImplementationsWorkflow TryCreateWorkflow();
    protected virtual void ConfigureContext(IGeneratorContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ImplementMemberFix : WorkflowDrivenImplementMembersFix`1<GenerateImplementationsWorkflow> {
    public string Text { get; }
    public ImplementMemberFix(AbstractInheritedMemberIsNotImplementedError error);
    public ImplementMemberFix(InterfaceMembersNotImplementedError error);
    public ImplementMemberFix(NoDefaultConstructorInBaseClassError error);
    public virtual string get_Text();
    protected virtual GenerateImplementationsWorkflow TryCreateWorkflow();
    protected virtual void ConfigureContext(IGeneratorContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ImplementMembersByDelegationFix : object {
    [NullableAttribute("2")]
private IClassLikeDeclaration myTypeDeclaration;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private TypeMemberInstance[] myMissingMembers;
    public static IAnchor DelegateImplementationAnchor;
    public ImplementMembersByDelegationFix(AbstractInheritedMemberIsNotImplementedError error);
    public ImplementMembersByDelegationFix(InterfaceMembersNotImplementedError error);
    private static ImplementMembersByDelegationFix();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    private IList`1<DelegateImplementationActionBase> GetUseMemberActions();
    private IList`1<DelegateImplementationActionBase> GetNewMemberActions();
    [NullableContextAttribute("2")]
[PureAttribute]
private static bool CanDelegateToInterfaceInstance(IDeclaredElement declaredElement);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ImplementNotifyPropertyChangedFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private IClassLikeDeclaration myTypeDeclaration;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private TypeMemberInstance[] myMissingMembers;
    private static string EventName;
    public string Text { get; }
    public ImplementNotifyPropertyChangedFix(InterfaceMembersNotImplementedError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
private IEvent FindEvent();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ImplementSpecificInterfaceFixBase : ModernQuickFixBase {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IDeclaredType <implementorType>P;
    public static Key`1<IDeclaredType> ImplementInterfaceKey;
    public string Text { get; }
    [NullableAttribute("2")]
private ITypeElement TypeElement { get; }
    [NullableContextAttribute("2")]
protected ImplementSpecificInterfaceFixBase(IDeclaredType implementorType);
    private static ImplementSpecificInterfaceFixBase();
    public virtual string get_Text();
    [NullableContextAttribute("2")]
private ITypeElement get_TypeElement();
    protected abstract virtual string GetText(string typePresentableName);
    protected abstract virtual IDeclaredType GetImplementedInterface(ITypeElement implementor);
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ImplementViaPrimaryConstructorFix : ModernQuickFixBase {
    private IMemberOwnerDeclaration myMemberOwnerDeclaration;
    public string Text { get; }
    public ImplementViaPrimaryConstructorFix(AbstractInheritedMemberIsNotImplementedError error);
    public ImplementViaPrimaryConstructorFix(InterfaceMembersNotImplementedError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ImplementViaPrimaryConstructorFix/<FindMembersToImplement>d__7")]
[PureAttribute]
private static IEnumerable`1<OverridableMemberInstance> FindMembersToImplement(IRecordDeclaration recordDeclaration);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ImplementViaPrimaryConstructorFix/<FindBasePrimaryMembersToImplement>d__8")]
private static IEnumerable`1<CSharpParameterInstance> FindBasePrimaryMembersToImplement(IRecordDeclaration recordDeclaration);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ImplementViaPrimaryConstructorFix/<Sort>d__9")]
[PureAttribute]
private static IEnumerable`1<OverridableMemberInstance> Sort(IEnumerable`1<OverridableMemberInstance> source);
    [CompilerGeneratedAttribute]
internal static void <ExecutePsiTransaction>g__AddPositionalParameter|6_0(string parameterName, IType parameterType, <>c__DisplayClass6_0& );
    [CompilerGeneratedAttribute]
internal static bool <FindMembersToImplement>g__CanBeImplementedOrOverridenByPositionalProperty|7_0(IProperty property, bool requireInitter);
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ImportExtensionGetEnumeratorMethodFix : ImportMethodFix {
    private IForeachReferencesOwner myForeachReferencesOwner;
    private ImportExtensionGetEnumeratorMethodFix(IForeachReferencesOwner foreachReferencesOwner);
    public ImportExtensionGetEnumeratorMethodFix(TypeIsNotEnumerableError error);
    public ImportExtensionGetEnumeratorMethodFix(TypeIsNotAsyncEnumerableError error);
    public ImportExtensionGetEnumeratorMethodFix(TypeIsNotAsyncEnumerableButIsEnumerableError error);
    public ImportExtensionGetEnumeratorMethodFix(TypeIsNotEnumerableButIsAsyncEnumerableError error);
    public ImportExtensionGetEnumeratorMethodFix(SpreadCollectionTypeIsNotEnumerableError error);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ImportExtensionGetEnumeratorMethodPopupFix : ImportMethodPopupFix {
    private IForeachReferencesOwner myForeachReferencesOwner;
    private ImportExtensionGetEnumeratorMethodPopupFix(IForeachReferencesOwner foreachReferencesOwner);
    public ImportExtensionGetEnumeratorMethodPopupFix(TypeIsNotEnumerableError error);
    public ImportExtensionGetEnumeratorMethodPopupFix(TypeIsNotAsyncEnumerableError error);
    public ImportExtensionGetEnumeratorMethodPopupFix(TypeIsNotAsyncEnumerableButIsEnumerableError error);
    public ImportExtensionGetEnumeratorMethodPopupFix(TypeIsNotEnumerableButIsAsyncEnumerableError error);
    public ImportExtensionGetEnumeratorMethodPopupFix(SpreadCollectionTypeIsNotEnumerableError error);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ImportMethodFix : ScopedImportQuickFixBase {
    [NotNullAttribute]
protected string ItemFormat { get; }
    protected ImportMethodFix(IReference reference, ResolveErrorType[] acceptedResolveErrors);
    protected ImportMethodFix(NotResolvedError error, ResolveErrorType[] acceptedResolveErrors);
    public ImportMethodFix(IReference reference);
    public ImportMethodFix(IncorrectArgumentNumberError error);
    public ImportMethodFix(IncorrectArgumentsError error);
    public ImportMethodFix(MultipleResolveCandidatesError error);
    public ImportMethodFix(IncorrectArgumentTypeError error);
    public ImportMethodFix(NoTypeParametersInCandidateError error);
    public ImportMethodFix(TypeParametersNumberMismatchError error);
    public ImportMethodFix(TypeParametersNumberMismatchMultipleCandidatesError error);
    public ImportMethodFix(NotResolvedCollectionInitializerError error);
    public ImportMethodFix(DeconstructNotFoundError error);
    public ImportMethodFix(TypeArgumentIsNotConvertibleToConstraintError error);
    public ImportMethodFix(CannotAccessExplicitImplementationError error);
    protected virtual string get_ItemFormat();
    public virtual bool IsAvailable(IUserDataHolder cache);
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public virtual IEnumerable`1<IBulbAction> CreateBulbActions();
    [CanBeNullAttribute]
private static IReference GetCallArgument(ICSharpArgument argument);
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ImportMethodPopupFix : ImportMethodFix {
    protected string ItemFormat { get; }
    public string PopupKey { get; }
    public string PopupMenuCaption { get; }
    public Anchoring2D[] PopupAnchorings { get; }
    protected ImportMethodPopupFix(IReference reference, ResolveErrorType[] acceptedResolveErrors);
    public ImportMethodPopupFix(IReference reference);
    public ImportMethodPopupFix(NotResolvedError error);
    public ImportMethodPopupFix(NotResolvedCollectionInitializerError error);
    public ImportMethodPopupFix(DeconstructNotFoundError error);
    protected virtual string get_ItemFormat();
    public sealed virtual string GetScopedPopupText(IBulbAction bulbAction);
    public sealed virtual void FillMenuItemDescriptor(IBulbAction key, IMenuItemDescriptor descriptor);
    public sealed virtual string get_PopupKey();
    public sealed virtual string get_PopupMenuCaption();
    public sealed virtual Anchoring2D[] get_PopupAnchorings();
    public sealed virtual void OnPopupShown(Lifetime showingLifetime);
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ImportNamespaceFromNuGetFix : object {
    [CanBeNullAttribute]
private IUsingDirective myUsingDirective;
    private bool myRequireUnresolvedPart;
    private bool myUseCustomAnchor;
    [NotNullAttribute]
private static Key InstanceKey;
    public ImportNamespaceFromNuGetFix(UnusedUsingDirectiveWarning error);
    public ImportNamespaceFromNuGetFix(NamespaceNameExpectedError error);
    public ImportNamespaceFromNuGetFix(NotResolvedError error);
    private static ImportNamespaceFromNuGetFix();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ImportNamespaceFromNuGetFix/<CreateBulbItems>d__7")]
public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    [NotNullAttribute]
[PureAttribute]
private static IEnumerable`1<INamespaceFromExternalSourcesImporter> GetNamespaceImporters(ITreeNode context);
    [CanBeNullAttribute]
private string GetQualifiedNamespaceName(IUsingDirective usingDirective);
    [CanBeNullAttribute]
private IProject GetProject();
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
private static IUsingDirective GetByImportedSymbolName(IReferenceName importedSymbolName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ImportSingleMethodAction : ModernBulbActionBase {
    private string myItemFormat;
    private ITypeElement myTypeElement;
    private IList`1<IMethod> myMethods;
    private IReference myReference;
    private static DeclaredElementPresenterStyle ourItemStyle;
    private static DeclaredElementPresenterStyle ourOverloadsStyle;
    [CompilerGeneratedAttribute]
private bool <QualifyWithAssemblyName>k__BackingField;
    public string Text { get; }
    public bool QualifyWithAssemblyName { get; public set; }
    public string ScopedText { get; }
    public FileCollectorInfo FileCollectorInfo { get; }
    public ImportSingleMethodAction(ITypeElement typeElement, IList`1<IMethod> methods, IReference reference, string itemFormat);
    private static ImportSingleMethodAction();
    public virtual string get_Text();
    [CompilerGeneratedAttribute]
public bool get_QualifyWithAssemblyName();
    [CompilerGeneratedAttribute]
public void set_QualifyWithAssemblyName(bool value);
    public sealed virtual string get_ScopedText();
    public sealed virtual FileCollectorInfo get_FileCollectorInfo();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private sealed virtual override Action`1<ITextControl> JetBrains.ReSharper.Feature.Services.Intentions.Scoped.Actions.IManualScopedAction.ExecuteAction(ISolution solution, Scope scope, IHighlighting sourceHighlighting, IProgressIndicator progress);
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ImportTypeByNameFromNuGetFix : object {
    private string myTypeName;
    private ITreeNode myContext;
    public ImportTypeByNameFromNuGetFix(string typeName, ITreeNode context);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ImportTypeByNameFromNuGetFix/<CreateBulbItems>d__4")]
public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ImportTypeFromNuGetFix : ImportTypeFromExternalSourcesFixBase {
    public ImportTypeFromNuGetFix(IReference reference);
    protected virtual string GetTypeName(IReference reference);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.IncreaseTypeMemberVisibilityFix : IncreaseVisibilityFixBase {
    [NullableAttribute("2")]
private ITypeMember myTypeMember;
    public IncreaseTypeMemberVisibilityFix(RequiredMemberCannotBeLessVisibleThanContainingTypeError error);
    public IncreaseTypeMemberVisibilityFix(ParamsMemberCannotBeLessVisibleThanDeclaringMemberError error);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.CSharp.QuickFixes.IncreaseTypeMemberVisibilityFix/<GetElementsToFix>d__3")]
protected virtual IEnumerable`1<ITypeMember> GetElementsToFix();
    protected virtual PsiLanguageType GetLanguage();
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.IncreaseTypeVisibilityFix : IncreaseTypeVisibilityFixBase {
    public IncreaseTypeVisibilityFix(InconsistentAccessibilityInDerivationError error);
    public IncreaseTypeVisibilityFix(InconsistentAccessibilityInMemberTypeError error);
    public IncreaseTypeVisibilityFix(InconsistentAccessibilityInParameterTypeError error);
    public IncreaseTypeVisibilityFix(InconsistentAccessibilityInReturnTypeError error);
    public IncreaseTypeVisibilityFix(InconsistentAccessibilityInTypeArgumentError error);
    public IncreaseTypeVisibilityFix(InconsistentAccessibilityInTypeParameterConstraintError error);
    public IncreaseTypeVisibilityFix(FileLocalTypeDisallowedInSignatureError error);
    public IncreaseTypeVisibilityFix(FileLocalTypeDisallowedInTypeArgumentError error);
    public IncreaseTypeVisibilityFix(FileLocalTypeInConstraintError error);
    public IncreaseTypeVisibilityFix(FileLocalTypeAsBaseTypeError error);
    private IncreaseTypeVisibilityFix(ITreeNode inaccessibleTypeUsage, ITypeMember accessibleElement);
    private static IReference GetTypeUsageReference(ITreeNode inaccessibleTypeUsage);
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual PsiLanguageType GetLanguage();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.InheritFromExceptionFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private IType myType;
    public string Text { get; }
    public InheritFromExceptionFix(TypeDoesNotExtendExceptionError error);
    public InheritFromExceptionFix(CatchDoesNotExtendExceptionError error);
    public InheritFromExceptionFix(CannotImplicitlyConvertTypeError error);
    [PureAttribute]
private static bool IsThrownExpression(ICSharpExpression expression);
    public virtual string get_Text();
    [NullableContextAttribute("2")]
private IClass TargetClass();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [NullableContextAttribute("2")]
private IDeclaredType GetSystemExceptionClass();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.InheritFromRequiredTypesFix : ModernQuickFixBase {
    private IClassLikeDeclaration myDeclaration;
    private ICollection`1<IDeclaredType> myRequiredBaseTypes;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IReadOnlyList`1<IDeclaredType> myInterfacesToImplement;
    [NullableAttribute("2")]
private IDeclaredType myNewBaseType;
    public string Text { get; }
    public InheritFromRequiredTypesFix(RequiredBaseTypesIsNotInheritedWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.InitializeBeforeReferenceFix : InitializeVariablesFixBase {
    private ICSharpExpression myAccessExpression;
    private ICollection`1<QualifiedDeclaredElementReference> myNotInitializedElementReferences;
    public string Text { get; }
    public InitializeBeforeReferenceFix(NotInitializedVariablesError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IList`1<ITypeOwner> GetMembersToInitialize();
    protected virtual IList`1<IExpressionStatement> CreateInitializingStatements(ITreeNode context);
    [NullableContextAttribute("2")]
private ITypeOwner FindFixableTypeOwner(QualifiedDeclaredElementReference reference);
    private static void AppendReferenceArgument(FactoryArgumentsBuilder argumentsBuilder, QualifiedDeclaredElementReference reference);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.InitializeConstFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private IDeclaration myDeclaration;
    public string Text { get; }
    public InitializeConstFix(ConstantInitializerMissedError error);
    public InitializeConstFix(ReferenceConstantInitializerIsNotNullError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.FillObjectInitializerAction")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.InitializeMembersFix : ModernQuickFixBase {
    private ICreationExpressionInitializer myInitializer;
    public string Text { get; }
    public InitializeMembersFix(RedundantEmptyObjectOrCollectionInitializerWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.InitializeStructFix : ModernQuickFixBase {
    private ICSharpExpression myExpression;
    public string Text { get; }
    public InitializeStructFix(NotInitializedThisInStructError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.InitializeVarFix : ModernQuickFixBase {
    [CanBeNullAttribute]
private ICSharpExpression myVariableReference;
    [NotNullAttribute]
private ICollection`1<QualifiedDeclaredElementReference> myNotInitializedVariables;
    public string Text { get; }
    public InitializeVarFix(NotInitializedVariablesError error);
    public InitializeVarFix(UseLocalVariableBeforeDeclarationError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public static bool CanAddInitializer(ITreeNode referenceUsage, IDeclaredElement variable);
    [NotNullAttribute]
[ItemNotNullAttribute]
private IList`1<ICSharpLocalVariable> GetReferencedVariables();
    [NotNullAttribute]
private string GetText();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.InitializeVariablesFixBase : ModernQuickFixBase {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ICSharpTreeNode <ExitElement>k__BackingField;
    [NullableAttribute("2")]
public ICSharpTreeNode ExitElement { get; }
    [NullableContextAttribute("2")]
protected InitializeVariablesFixBase(ICSharpTreeNode exitElement);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public ICSharpTreeNode get_ExitElement();
    protected abstract virtual IList`1<ITypeOwner> GetMembersToInitialize();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    protected abstract virtual IList`1<IExpressionStatement> CreateInitializingStatements(ITreeNode context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.InitializeVariablesOnExitFix : InitializeVariablesFixBase {
    private IDeclaredElement[] myVariables;
    public string Text { get; }
    public InitializeVariablesOnExitFix(NotAssignedVariablesUponExitError error);
    public virtual string get_Text();
    protected virtual IList`1<ITypeOwner> GetMembersToInitialize();
    protected virtual IList`1<IExpressionStatement> CreateInitializingStatements(ITreeNode context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.InitializeWithConstructorFix : ModernQuickFixBase {
    private ILocalVariableDeclaration myDeclaration;
    public string Text { get; }
    public InitializeWithConstructorFix(NoInitializerInUsingVariableDeclarationError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
private IDeclaredType GetVariableType();
    [NullableContextAttribute("2")]
private static IConstructor FindConstructor(ITypeElement typeElement);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.InitializeWithFreeValueFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private IEnumMemberDeclaration myEnumMemberDeclaration;
    public string Text { get; }
    public InitializeWithFreeValueFix(EnumMemberValueTooBigError error);
    public InitializeWithFreeValueFix(EnumMemberValueIsNotConstantError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    private ConstantValue GetNextFreeValue(IEnum enumerationType);
    private ConstantValue CreateEnumValue(IEnum enumerationType, int value);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.InitializeWithNewObjectFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private ICSharpDeclaration myDeclaration;
    public string Text { get; }
    public InitializeWithNewObjectFix(UnusedFieldWarningBase error);
    public InitializeWithNewObjectFix(UnusedFieldCompilerWarning error);
    public InitializeWithNewObjectFix(UnassignedGetOnlyAutoPropertyWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [CompilerGeneratedAttribute]
internal static bool <IsAvailable>g__IsAvailableForType|6_0(ITypeOwner typeOwner);
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.InlineInsertToInterpolationFix : ModernQuickFixBase {
    public static Key InlineInsertToInterpolationFixKey;
    [NotNullAttribute]
private ICSharpExpression myInlineableExpression;
    [NotNullAttribute]
private IInterpolatedStringExpression myInterpolationExpression;
    public string Text { get; }
    public InlineInsertToInterpolationFix(NestedStringInterpolationWarning warning);
    public InlineInsertToInterpolationFix(StringLiteralAsInterpolationArgumentWarning warning);
    public InlineInsertToInterpolationFix(PossiblyMistakenUseOfInterpolatedStringInsertWarning warning);
    private static InlineInsertToInterpolationFix();
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.InlineMethodFix : object {
    private IDeclaration myDeclaration;
    public string Text { get; }
    public bool IsReadOnly { get; }
    public InlineMethodFix(RedundantOverloadWarningBase error);
    public sealed virtual string get_Text();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Execute(ISolution solution, ITextControl textControl);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.InlineOutVariableDeclarationAction")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.InlineOutVariableFix : ModernScopedQuickFixBase {
    private ICSharpArgument myOutArgument;
    private ILocalVariableDeclaration myLocalVariableDeclaration;
    public string Text { get; }
    public string ScopedText { get; }
    public InlineOutVariableFix(InlineOutVariableDeclarationWarning warning);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    [NullableContextAttribute("2")]
protected virtual ITreeNode TryGetContextTreeNode();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.InlineTemporaryVariableAction")]
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.InlineTemporaryVariableFix : ModernScopedQuickFixBase {
    private IVariableDeclaration myVariableDeclaration;
    public string Text { get; }
    public InlineTemporaryVariableFix(InlineTemporaryVariableWarning warning);
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ITreeNode TryGetContextTreeNode();
    public virtual string get_Text();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.Internal.AddHighlightingSourceAttributeFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private IClassLikeDeclaration myDeclaration;
    private HighlightingSourceKind myKind;
    public string Text { get; }
    public AddHighlightingSourceAttributeFix(MissingHighlightingSourceAttributeWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ShellComponentAttribute("16")]
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.Internal.AdditionalQuickFixesProvider : object {
    public IEnumerable`1<Type> Dependencies { get; }
    public sealed virtual IEnumerable`1<Type> get_Dependencies();
    public sealed virtual void Register(IQuickFixesRegistrar qf);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.Internal.AddNonHighlightingSourceAttributeFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private IClassLikeDeclaration myDeclaration;
    public string Text { get; }
    [NullableContextAttribute("2")]
private AddNonHighlightingSourceAttributeFix(ITypeDeclaration declaration);
    public AddNonHighlightingSourceAttributeFix(MissingHighlightingSourceAttributeWarning warning);
    public AddNonHighlightingSourceAttributeFix(UnregisteredHighlightingTypeWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.Internal.RegisterHighlightingTypeFix : ModernScopedQuickFixBase {
    private ITreeNode myNode;
    private IDeclaredType myHighlightingType;
    private HighlightingSourceKind myHighlightingSourceKind;
    public string Text { get; }
    public string ScopedText { get; }
    public RegisterHighlightingTypeFix(UnregisteredHighlightingTypeWarning warning);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    protected virtual ITreeNode TryGetContextTreeNode();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.Internal.RemoveRedundantHighlightingTypeFix : ModernScopedQuickFixBase {
    [NullableAttribute("2")]
private ITypeofExpression myTypeSpecification;
    public string Text { get; }
    public string ScopedText { get; }
    public RemoveRedundantHighlightingTypeFix(RedundantHighlightingTypeWarning warning);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    [NullableContextAttribute("2")]
protected virtual ITreeNode TryGetContextTreeNode();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.Internal.ZoneMarker : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.InterpolationToStringFormatAction")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.InterpolationToStringFormatFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private IInterpolatedStringExpression myInterpolatedStringExpression;
    public string Text { get; }
    public InterpolationToStringFormatFix(CSharp60LanguageFeatureError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.IntroduceFieldFix : IntroduceRefactoringFixBase {
    public string Text { get; }
    public IntroduceFieldFix(InvalidExpressionStatementError error);
    public IntroduceFieldFix(ByRefArgumentIsNotMutableVariableError error);
    public IntroduceFieldFix(ByRefArgumentIsNotReadableVariableError error);
    public IntroduceFieldFix(ReturnValueOfPureMethodIsNotUsedWarning error);
    public IntroduceFieldFix(MustUseReturnValueWarning error);
    public IntroduceFieldFix(IncorrectAssignmentTargetError error);
    public IntroduceFieldFix(IncorrectIncrementDecrementOperandError error);
    public IntroduceFieldFix(StructMemberModificationOfNonVariableStructError error);
    public IntroduceFieldFix(CannotAssignToUsingVariableError error);
    public virtual string get_Text();
    public virtual void Execute(ISolution solution, ITextControl textControl);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.IntroduceOptionalParametersFix : QuickFixBase {
    private ICSharpTypeMemberDeclaration myDeclaration;
    private IParametersOwner myOverloadMember;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Pair`2[] myParameters;
    private static DeclaredElementPresenterStyle ourMemberPresenter;
    public string Text { get; }
    public IntroduceOptionalParametersFix(IntroduceOptionalParametersWarningBase error);
    private static IntroduceOptionalParametersFix();
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [CompilerGeneratedAttribute]
private void <ExecutePsiTransaction>b__8_0(ITextControl control);
}
public abstract class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.IntroduceRefactoringFixBase : QuickFixBase {
    [NullableAttribute("2")]
protected ICSharpExpression Expression;
    public bool IsReadOnly { get; }
    [NullableContextAttribute("2")]
protected IntroduceRefactoringFixBase(ICSharpExpression expression);
    public sealed virtual bool get_IsReadOnly();
    [NullableContextAttribute("1")]
public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("1")]
public virtual void Execute(ISolution solution, ITextControl textControl);
    [NullableContextAttribute("1")]
protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.IntroduceUsingDeclarationFix : QuickFixBase {
    [NullableAttribute("2")]
private ICSharpExpression myExpression;
    [NullableAttribute("2")]
private ICSharpStatement myStatement;
    public string Text { get; }
    public IntroduceUsingDeclarationFix(NotDisposedResourceWarning warning);
    public IntroduceUsingDeclarationFix(GenericEnumeratorNotDisposedWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
private bool IsAssignmentOrDeclarationOfNonGenericEnumerator(IDeclaredElement& declaredElement);
    private static ILocalVariableDeclaration NavigateVariableDeclarationByValue(ICSharpExpression expression);
    public virtual void Execute(ISolution solution, ITextControl textControl);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static bool IsDisposeSupported(ITreeNode resolveContext, IType type, bool isAsync);
    [CompilerGeneratedAttribute]
internal static IReadOnlyList`1<string> <ExecutePsiTransaction>g__SuggestNames|10_1(ICSharpExpression expression, IDeclaredElement declaredElement);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.Refactorings.IntroduceVariableAction")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.IntroduceVariableFix : IntroduceRefactoringFixBase {
    public string Text { get; }
    public IntroduceVariableFix(InvalidExpressionStatementError error);
    public IntroduceVariableFix(ByRefArgumentIsNotMutableVariableError error);
    public IntroduceVariableFix(ByRefArgumentIsNotReadableVariableError error);
    public IntroduceVariableFix(ByRefArgumentIsVolatileFieldWarning error);
    public IntroduceVariableFix(ByRefArgumentIsVolatileFieldCompilerWarning error);
    public IntroduceVariableFix(ReturnValueOfPureMethodIsNotUsedWarning error);
    public IntroduceVariableFix(MustUseReturnValueWarning error);
    public IntroduceVariableFix(IteratorMethodResultIsIgnoredWarning error);
    public IntroduceVariableFix(ObjectCreationAsStatementWarning error);
    public IntroduceVariableFix(IncorrectAssignmentTargetError error);
    public IntroduceVariableFix(IncorrectIncrementDecrementOperandError error);
    public IntroduceVariableFix(StructMemberModificationOfNonVariableStructError error);
    public IntroduceVariableFix(CannotAssignToUsingVariableError error);
    public IntroduceVariableFix(UsingStatementResourceInitializationExpressionWarning warning);
    public virtual string get_Text();
    public virtual void Execute(ISolution solution, ITextControl textControl);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.InvertIfFix : ModernQuickFixBase {
    public static Key InstanceKey;
    private IIfStatement myStatement;
    public string Text { get; }
    public InvertIfFix(InvertIfWarning error);
    private static InvertIfFix();
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.InvertIsExpressionFix : ModernQuickFixBase {
    private IIsExpression myIsExpression;
    private ISuppressNullableWarningExpression mySuppressNullableWarningExpression;
    public string Text { get; }
    public InvertIsExpressionFix(SuppressNullableWarningExpressionAsInvertedIsExpressionWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.Misc.ConvertRegularStringToVerbatimAction")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.Misc.ConvertVerbatimStringToRegularAction")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.Misc.ConvertRegularStringInterpolationToVerbatimAction")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.Misc.ConvertVerbatimStringInterpolationToRegularAction")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.InvertVerbatimityFix : ModernScopedQuickFixBase {
    private IStringLiteralOwner myLiteralOwner;
    private bool myToVerbatimString;
    public string Text { get; }
    public InvertVerbatimityFix(RedundantVerbatimStringPrefixWarning warning);
    public InvertVerbatimityFix(UseVerbatimStringWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IScopedFixingStrategy GetScopedFixingStrategy(ISolution solution, IHighlighting highlighting);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.InvokeAsExtensionMethodFix : ModernScopedNonIncrementalQuickFixBase {
    private IInvocationExpression myInvocationExpression;
    public string Text { get; }
    public string ScopedText { get; }
    public bool IsReanalysisRequired { get; }
    public InvokeAsExtensionMethodFix(InvokeAsExtensionMethodWarning error);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool get_IsReanalysisRequired();
    protected virtual ITreeNode TryGetContextTreeNode();
    public virtual bool IsAvailable(IUserDataHolder userDataHolder);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.InvokeEventAction")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.InvokeEventFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private IEventDeclaration myEventDeclaration;
    public string Text { get; }
    public InvokeEventFix(EventNeverInvokedWarning error);
    public InvokeEventFix(VirtualEventNeverInvokedWarning error);
    public InvokeEventFix(InterfaceEventNeverInvokedWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.InvokeToArrayOnUtf8LiteralFix : ModernScopedQuickFixBase {
    private IDeclaration myDeclaration;
    public string Text { get; }
    public InvokeToArrayOnUtf8LiteralFix(ByRefLikeLocalInAsyncFunctionError error);
    public virtual string get_Text();
    protected virtual ITreeNode TryGetContextTreeNode();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [NullableContextAttribute("2")]
private ICSharpLiteralExpression GetUtf8Literal();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.IterateViaAwaitForeachAction")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.IterateViaAwaitForeachFix : IterateViaForeachFixBase {
    protected bool IsAwaitForeach { get; }
    public string Text { get; }
    public IterateViaAwaitForeachFix(InvalidExpressionStatementError error);
    public IterateViaAwaitForeachFix(ReturnValueOfPureMethodIsNotUsedWarning error);
    public IterateViaAwaitForeachFix(MustUseReturnValueWarning error);
    public IterateViaAwaitForeachFix(IteratorMethodResultIsIgnoredWarning error);
    public IterateViaAwaitForeachFix(IncorrectYieldReturnTypeError error);
    public IterateViaAwaitForeachFix(IncorrectArgumentTypeError error);
    public IterateViaAwaitForeachFix(AsyncIteratorInvocationWithoutAwaitForeachWarning error);
    protected virtual bool get_IsAwaitForeach();
    public virtual string get_Text();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.IterateViaForeachAction")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.LiveTemplateBasedIterateViaForeachAction")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.IterateViaForeachFix : IterateViaForeachFixBase {
    protected bool IsAwaitForeach { get; }
    public string Text { get; }
    public IterateViaForeachFix(InvalidExpressionStatementError error);
    public IterateViaForeachFix(ReturnValueOfPureMethodIsNotUsedWarning error);
    public IterateViaForeachFix(MustUseReturnValueWarning error);
    public IterateViaForeachFix(IteratorMethodResultIsIgnoredWarning error);
    public IterateViaForeachFix(IncorrectYieldReturnTypeError error);
    public IterateViaForeachFix(IncorrectArgumentTypeError error);
    protected virtual bool get_IsAwaitForeach();
    public virtual string get_Text();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.IterateViaForeachFixBase : ModernQuickFixBase {
    [CompilerGeneratedAttribute]
private ICSharpExpression <collectionExpression>P;
    [CompilerGeneratedAttribute]
private IExpressionType <expectedIteratorType>P;
    protected bool IsAwaitForeach { get; }
    protected IterateViaForeachFixBase(ICSharpExpression collectionExpression, IExpressionType expectedIteratorType);
    protected abstract virtual bool get_IsAwaitForeach();
    [NullableContextAttribute("1")]
public sealed virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("1")]
protected sealed virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private bool ShouldShowDeconstructionOptions();
}
public interface JetBrains.ReSharper.Intentions.CSharp.QuickFixes.IUninitializedTypeMemberProcessor {
    public abstract virtual bool ProcessFieldDeclaration(IFieldDeclaration fieldDeclaration);
    public abstract virtual bool ProcessPropertyDeclaration(IPropertyDeclaration propertyDeclaration);
    public abstract virtual bool ProcessEventDeclaration(IEventDeclaration eventDeclaration);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.JoinDeclarationAction")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.JoinDeclarationAndAssignmentFix : ModernScopedQuickFixBase {
    private ILocalVariableDeclaration myDeclaration;
    public string Text { get; }
    public string ScopedText { get; }
    public JoinDeclarationAndAssignmentFix(JoinDeclarationAndInitializerWarning error);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.JoinNullCheckWithUsageAction")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.JoinNullCheckWithUsageFix : ModernScopedQuickFixBase {
    private IIfStatement myNullCheckStatement;
    private NullCheckWithThrowPattern myPattern;
    public string Text { get; }
    public string ScopedText { get; }
    public JoinNullCheckWithUsageFix(JoinNullCheckWithUsageWarning warning);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.JumpToSwitchLabelFix : object {
    [NullableAttribute("2")]
private IGotoCaseStatement myGotoCaseStatement;
    public JumpToSwitchLabelFix(UnresolvedJumpError error);
    public JumpToSwitchLabelFix(ConstantGotoCaseValueExpectedError error);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.CSharp.QuickFixes.JumpToSwitchLabelFix/<CreateBulbItems>d__4")]
public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.CSharp.QuickFixes.JumpToSwitchLabelFix/<GetJumpableCaseLabels>d__5")]
[PureAttribute]
private static IEnumerable`1<ICSharpExpression> GetJumpableCaseLabels(IGotoCaseStatement gotoCaseStatement);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.LambdaStatementToExpressionAction")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.LambdaStatementToExpressionFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private ILambdaExpression myLambdaExpression;
    public string Text { get; }
    public LambdaStatementToExpressionFix(ConvertToLambdaExpressionWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.LiftLocalFunctionClosureToParameterAction")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.LiftAllStaticLocalFunctionClosuresToParameterFix : ModernQuickFixBase {
    public static InvisibleAnchor Anchor;
    [NullableAttribute("2")]
private ITreeNode myTreeNode;
    [NullableAttribute("2")]
private IReference myReference;
    public string Text { get; }
    public LiftAllStaticLocalFunctionClosuresToParameterFix(LocalInStaticLocalFunctionError error);
    public LiftAllStaticLocalFunctionClosuresToParameterFix(ThisOrBaseInStaticLocalFunctionError error);
    private static LiftAllStaticLocalFunctionClosuresToParameterFix();
    public virtual string get_Text();
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private ITreeNode GetClosureNode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.LiftLocalFunctionClosureToParameterAction")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.LiftStaticLocalFunctionClosureToParameterFix : ModernQuickFixBase {
    public static InvisibleAnchor Anchor;
    [NullableAttribute("2")]
private IReference myReference;
    public string Text { get; }
    public LiftStaticLocalFunctionClosureToParameterFix(LocalInStaticLocalFunctionError error);
    public LiftStaticLocalFunctionClosureToParameterFix(ThisOrBaseInStaticLocalFunctionError error);
    private static LiftStaticLocalFunctionClosureToParameterFix();
    public virtual string get_Text();
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.LiftLocalFunctionClosureToParameterAction")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.LiftStaticLocalFunctionThisClosuresToParameterFix : ModernQuickFixBase {
    public static InvisibleAnchor Anchor;
    private ITreeNode myTreeNode;
    public string Text { get; }
    public LiftStaticLocalFunctionThisClosuresToParameterFix(ThisOrBaseInStaticLocalFunctionError error);
    private static LiftStaticLocalFunctionThisClosuresToParameterFix();
    public virtual string get_Text();
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.LinqTools.ConvertForeachFix : ModernQuickFixBase {
    private IForeachStatement myForeachStatement;
    public string Text { get; }
    public ConvertForeachFix(ForeachCanBeConvertedToQueryWarning warning);
    public ConvertForeachFix(ForeachCanBeConvertedToQueryUsingAnotherGetEnumeratorWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder holder);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public static void Execute(IForeachStatement foreachStatement, Action action);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.LinqTools.ConvertForeachPartlyFix : ModernQuickFixBase {
    private IForeachStatement myForeachStatement;
    public string Text { get; }
    public ConvertForeachPartlyFix(ForeachCanBePartlyConvertedToQueryWarning warning);
    public ConvertForeachPartlyFix(ForeachCanBePartlyConvertedToQueryUsingAnotherGetEnumeratorWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder holder);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.LinqTools.ConvertForFix : ModernQuickFixBase {
    [CompilerGeneratedAttribute]
private ForCanBeConvertedToQueryWarning <warning>P;
    public string Text { get; }
    public ConvertForFix(ForCanBeConvertedToQueryWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder holder);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.LinqTools.ConvertForToForeachFix : ModernQuickFixBase {
    private IForStatement myForStatement;
    public string Text { get; }
    public ConvertForToForeachFix(ForCanBeConvertedToForeachWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder holder);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.LinqTools.linqToolsWarningsQuickFixRegistration : object {
    public IEnumerable`1<Type> Dependencies { get; }
    public sealed virtual IEnumerable`1<Type> get_Dependencies();
    public sealed virtual void Register(IQuickFixesRegistrar table);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.MakeAllStructMembersReadOnlyFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private IClassLikeDeclaration myStructDeclaration;
    public string Text { get; }
    public MakeAllStructMembersReadOnlyFix(ReadOnlyStructMutableInstanceFieldError error);
    public MakeAllStructMembersReadOnlyFix(ReadOnlyStructMutableInstanceAutoPropertyError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.MakeAnonymousFunctionStaticFix : ModernScopedQuickFixBase {
    private IAnonymousFunctionExpression myAnonymousFunction;
    public string Text { get; }
    public MakeAnonymousFunctionStaticFix(LambdaExpressionCanBeMadeStaticWarning warning);
    public MakeAnonymousFunctionStaticFix(LambdaExpressionMustBeStaticWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.RemoveArgumentNameAction")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.MakeArgumentPositionalFix : ModernQuickFixBase {
    private ICSharpArgument myNamedArgument;
    public string Text { get; }
    public MakeArgumentPositionalFix(NamedArgumentBeforePositionalError error);
    public MakeArgumentPositionalFix(NamedArgumentBeforePositionalInDynamicInvocationError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.MakeAsyncFix : MakeAsyncFixBase {
    private bool myRequireToHaveTaskTypeAlready;
    public string Text { get; }
    public MakeAsyncFix(AwaitNotUnderAsyncMethodError error);
    [NullableContextAttribute("2")]
protected MakeAsyncFix(ICSharpDeclaration declaration, IReturnValueHolder returnStatement);
    public MakeAsyncFix(NotResolvedError error);
    public MakeAsyncFix(MissingReturnStatementError error);
    public MakeAsyncFix(MissingReturnStatementInAnonymousFunctionError error);
    public MakeAsyncFix(ReturnValueMissingError error);
    public MakeAsyncFix(AsyncIteratorWithoutAsyncModifierError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.MakeAsyncFixBase : ModernQuickFixBase {
    private IReturnValueHolder myReturnStatement;
    [NullableAttribute("1")]
protected string ActionHint;
    [CompilerGeneratedAttribute]
private ICSharpDeclaration <Declaration>k__BackingField;
    public ICSharpDeclaration Declaration { get; }
    protected MakeAsyncFixBase(ICSharpDeclaration declaration);
    protected MakeAsyncFixBase(ICSharpDeclaration declaration, IReturnValueHolder returnStatement);
    [CompilerGeneratedAttribute]
public ICSharpDeclaration get_Declaration();
    [NullableContextAttribute("1")]
public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    [NullableContextAttribute("1")]
public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("1")]
[PureAttribute]
protected string GetEntityName();
    protected void SetAsync();
    [NullableContextAttribute("1")]
[PureAttribute]
protected static ICSharpDeclaration TryGetDeclarationFromUnresolvedAwaitIdentifier(IReference reference);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.MakeAsyncTaskFix : MakeAsyncFixBase {
    public string Text { get; }
    public MakeAsyncTaskFix(ICSharpDeclaration declaration);
    public MakeAsyncTaskFix(NotResolvedError error);
    public virtual string get_Text();
    private string GetText();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static IType GetTaskType(ICSharpModifiersOwnerDeclaration declaration, IParametersOwner declaredElement);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.MakeAsyncWhenIncorrectReturnTypeFix : MakeAsyncFix {
    private IReturnValueHolder myReturnValueHolder;
    public MakeAsyncWhenIncorrectReturnTypeFix(IncorrectReturnTypeError error);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.MakeAutoPropertyGetOnlyFix : ModernScopedNonIncrementalQuickFixBase {
    [NullableAttribute("2")]
private IAccessorDeclaration mySetterDeclaration;
    private bool myIsScopedFixingAvailable;
    public string Text { get; }
    public string ScopedText { get; }
    public bool IsReanalysisRequired { get; }
    public FileCollectorInfo FileCollectorInfo { get; }
    [NullableContextAttribute("2")]
private MakeAutoPropertyGetOnlyFix(IDeclaration declaration, bool isScopedFixingAvailable);
    public MakeAutoPropertyGetOnlyFix(AutoPropertyCanBeMadeGetOnlyLocalWarning warning);
    public MakeAutoPropertyGetOnlyFix(AutoPropertyCanBeMadeGetOnlyGlobalWarning warning);
    public MakeAutoPropertyGetOnlyFix(UnusedAutoPropertyAccessorLocalWarning warning);
    public MakeAutoPropertyGetOnlyFix(UnusedAutoPropertyAccessorGlobalWarning warning);
    public MakeAutoPropertyGetOnlyFix(NonReadonlyMemberInGetHashCodeWarning warning);
    private static IAccessorDeclaration TryGetAccessorDeclaration(UnusedAutoPropertyAccessorWarningBase warning);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool get_IsReanalysisRequired();
    public virtual FileCollectorInfo get_FileCollectorInfo();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IScopedFixingStrategy GetScopedFixingStrategy(ISolution solution, IHighlighting highlighting);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private void Execute();
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.MakeBaseVirtualFix : ModifierFixBase {
    [NotNullAttribute]
private IDeclaredElement myMember;
    protected string ModifiersText { get; }
    public MakeBaseVirtualFix(NoSuitableMemberForOverrideError error);
    protected virtual string get_ModifiersText();
    protected virtual void SetModifiers(IModifiersOwnerDeclaration declaration);
    [CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IOverridableMember FindBaseMember(IOverridableMember overridableMember);
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.MakeClassAbstractFix : ModifierFixBase {
    protected string ModifiersText { get; }
    public MakeClassAbstractFix(AbstractInheritedMemberIsNotImplementedError error);
    public MakeClassAbstractFix(AbstractMemberInNonabstractClassError error);
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    protected virtual string get_ModifiersText();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual void SetModifiers(IModifiersOwnerDeclaration declaration);
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.MakeClassNonAbstractFix : ModifierFixBase {
    private IClass myTypeElement;
    protected string ModifiersText { get; }
    public MakeClassNonAbstractFix(ArrayElementIsStaticClassError error);
    public MakeClassNonAbstractFix(CannotCreateInstanceOfAbstractClassError error);
    protected virtual string get_ModifiersText();
    [CanBeNullAttribute]
private static IClass GetModifiersOwner(IType type);
    protected virtual void SetModifiers(IModifiersOwnerDeclaration declaration);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.MakeClassPartialFix : object {
    [NullableAttribute("2")]
private ITypeElement myClass;
    public MakeClassPartialFix(PartialMethodInNonPartialTypeError error);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.MakeClassStaticFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private IClassDeclaration myClassDeclaration;
    [NullableAttribute("2")]
private IMethodDeclaration myExtensionMethodDeclaration;
    public string Text { get; }
    public MakeClassStaticFix(ConvertToStaticClassWarning error);
    public MakeClassStaticFix(ClassNeverInstantiatedWarningBase error);
    public MakeClassStaticFix(ExtensionMethodInWrongClassError error);
    public MakeClassStaticFix(ThisParameterNotOnMethodError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.MakeClosureFunctionNonStaticFix : ModernQuickFixBase {
    private ITreeNode mySourceNode;
    private bool myAlsoMakeContainingMemberNonStatic;
    public string Text { get; }
    public MakeClosureFunctionNonStaticFix(ITreeNode usageNode, IReference reference);
    public MakeClosureFunctionNonStaticFix(LocalInStaticLocalFunctionError error);
    public MakeClosureFunctionNonStaticFix(LocalInStaticAnonymousFunctionError error);
    public MakeClosureFunctionNonStaticFix(ThisOrBaseInStaticLocalFunctionError error);
    public MakeClosureFunctionNonStaticFix(ThisOrBaseInStaticAnonymousFunctionError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.CSharp.QuickFixes.MakeClosureFunctionNonStaticFix/<IterateRequiredClosures>d__11")]
private IEnumerable`1<ICSharpClosure> IterateRequiredClosures();
    [NullableContextAttribute("2")]
private ICSharpDeclaration FindRequiredScope();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.MakeConditionalExpressionOperandRefFix : ModernQuickFixBase {
    private IConditionalTernaryExpression myConditionalExpression;
    public string Text { get; }
    public MakeConditionalExpressionOperandRefFix(RefConditionalNeedsTwoRefsError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [CompilerGeneratedAttribute]
private void <ExecutePsiTransaction>g__WrapWithRef|5_0(ICSharpExpression expression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.MakeContainingDeclarationUnsafeFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private ITreeNode myUnsafeNode;
    public string Text { get; }
    public MakeContainingDeclarationUnsafeFix(PointerInSafeContextError error);
    public MakeContainingDeclarationUnsafeFix(UnsafeConstructInSafeContextError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [PureAttribute]
private static ICSharpTreeNode FindNodeToMakeUnsafe(ITreeNode context);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [CompilerGeneratedAttribute]
internal static string <get_Text>g__FormatMember|4_0(IDeclaration declaration);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.MakeContainingMemberNonReadonlyFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private ICSharpExpression myExpression;
    public string Text { get; }
    public MakeContainingMemberNonReadonlyFix(ImplicitCopyInReadOnlyMemberWarning error);
    public MakeContainingMemberNonReadonlyFix(StructMemberModificationOfNonVariableStructError error);
    public MakeContainingMemberNonReadonlyFix(PossibleStructMemberModificationOfNonVariableStructWarning error);
    public MakeContainingMemberNonReadonlyFix(PossiblyImpureMethodCallOnReadonlyVariableWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    [PureAttribute]
private static ICSharpModifiersOwnerDeclaration FindReadonlyMember(ICSharpExpression expression);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal static ICSharpExpression <.ctor>g__UnwrapFromNonReadonlyFields|4_0(ICSharpExpression expression);
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.MakeDefaultConstructorPublicForTypeArgumentFix : ModernQuickFixBase {
    private IDeclaredType myArgumentType;
    public string Text { get; }
    private IClass BaseClass { get; }
    public MakeDefaultConstructorPublicForTypeArgumentFix(TypeArgumentHasNoDefaultConstructorError error);
    public virtual string get_Text();
    private IClass get_BaseClass();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private IConstructor FindBadParameterlessConstructor();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.MakeEnclosingInterfaceTypeParametersInvariantFix : ModernQuickFixBase {
    private ICSharpTypeDeclaration myNestedDeclaration;
    public string Text { get; }
    public MakeEnclosingInterfaceTypeParametersInvariantFix(VarianceInterfaceNestingError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.MakeFieldDeclarationNonReadonlyFix : ModernScopedQuickFixBase {
    [NullableAttribute("2")]
private IFieldDeclaration myFieldDeclaration;
    public string Text { get; }
    public MakeFieldDeclarationNonReadonlyFix(RequiredMemberMustBeSettableError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [NullableContextAttribute("2")]
protected virtual ITreeNode TryGetContextTreeNode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.MakeFieldNonReadonlyFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private IReferenceExpression myReferenceExpression;
    [NullableAttribute("2")]
private IDeclaredElement myReadonlyMember;
    private string myText;
    public string Text { get; }
    public MakeFieldNonReadonlyFix(ByRefArgumentIsNotMutableVariableError error);
    public MakeFieldNonReadonlyFix(IncorrectAssignmentTargetError error);
    public MakeFieldNonReadonlyFix(IncorrectIncrementDecrementOperandError error);
    public MakeFieldNonReadonlyFix(StructMemberModificationOfNonVariableStructError error);
    public MakeFieldNonReadonlyFix(PossibleStructMemberModificationOfNonVariableStructWarning error);
    public MakeFieldNonReadonlyFix(PossiblyImpureMethodCallOnReadonlyVariableWarning error);
    [NullableContextAttribute("2")]
private MakeFieldNonReadonlyFix(ICSharpExpression expression);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [PureAttribute]
private static ICSharpModifiersOwnerDeclaration FindReadonlyDeclaration(IDeclaredElement modifiersOwner);
    [PureAttribute]
private static IField FindReferencedReadonlyField(IReferenceExpression referenceExpression);
    private static IReferenceExpression FindReadonlyFieldQualifierReferenceExpression(IInvocationExpression invocationExpression);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.MakeItDiscardFix : ModernQuickFixBase {
    private IReferenceExpression myDiscardExpression;
    public string Text { get; }
    public MakeItDiscardFix(AssignmentInsteadOfDiscardWarning warning);
    public virtual string get_Text();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static void ReplaceDiscardExpressionWithDiscardDeclaration(IReferenceExpression referenceExpression, bool useExplicitType, bool applyVarCodeStyle);
    private IBulbActionCommand TryRenameWithHotspots(IDeclaredElement declaredElement);
    private void ReplaceAssignmentWithDiscardLikeDeclaration(IAssignmentExpression assignmentExpression);
    private static OutParameterTypeClassification ClassifyOutParameterType(IReferenceExpression referenceExpression);
    public virtual bool IsAvailable(IUserDataHolder cache);
    [CompilerGeneratedAttribute]
internal static string <ReplaceAssignmentWithDiscardLikeDeclaration>g__GetDiscardLikeName|7_0(ITreeNode contextNode);
    [CompilerGeneratedAttribute]
internal static bool <ReplaceAssignmentWithDiscardLikeDeclaration>g__IsUnique|7_1(string name, <>c__DisplayClass7_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.MakeLocalVariableDeclarationRegularFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private IMultipleLocalVariableDeclaration myUsingDeclaration;
    public string Text { get; }
    public MakeLocalVariableDeclarationRegularFix(ICSharpTreeNode usingOwner);
    public MakeLocalVariableDeclarationRegularFix(NonDisposableTypeInUsingError error);
    public MakeLocalVariableDeclarationRegularFix(InvalidUsingDeclarationUsageError error);
    public MakeLocalVariableDeclarationRegularFix(NonDisposableByRefLikeTypeInUsingError error);
    public MakeLocalVariableDeclarationRegularFix(UsingDeclarationInSwitchSectionError error);
    public MakeLocalVariableDeclarationRegularFix(NonAsyncDisposableTypeInAwaitUsingError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.MakeLocalVariableNonScopedFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private IDeclaration myLocalDeclaration;
    public string Text { get; }
    public MakeLocalVariableNonScopedFix(InvalidScopedLocalTypeOrReferenceKindError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.MakeMemberRequiredFix : ModifierFixBase {
    protected string ModifiersText { get; }
    public MakeMemberRequiredFix(OverrideMustHaveRequiredError error);
    protected virtual string get_ModifiersText();
    protected virtual void SetModifiers(IModifiersOwnerDeclaration declaration);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.MakeMemberRequiredFix2 : ModernScopedNonIncrementalQuickFixBase {
    private IReadOnlyList`1<ITypeMember> myMembers;
    private ITreeNode myContextNode;
    public string Text { get; }
    public bool IsReanalysisRequired { get; }
    public MakeMemberRequiredFix2(NonNullableTypeMemberNotInitializedInConstructorWarning warning);
    public MakeMemberRequiredFix2(UninitializedNonNullableTypeMemberWarning warning);
    public virtual string get_Text();
    public virtual bool get_IsReanalysisRequired();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ITreeNode TryGetContextTreeNode();
    private static IReadOnlyList`1<ITypeMember> FilterMembersThatCanBeRequired(IReadOnlyList`1<ITypeMember> members);
    protected virtual IScopedFixingStrategy GetScopedFixingStrategy(ISolution solution, IHighlighting highlighting);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.MakeMethodNonPartialFix : object {
    private static Key`1<IMethodDeclaration> ourKey;
    [CanBeNullAttribute]
private IMethodDeclaration myMethodDeclaration;
    private MakeMethodNonPartialFix(IMethodDeclaration methodDeclaration);
    public MakeMethodNonPartialFix(PartialMethodInNonPartialTypeError error);
    public MakeMethodNonPartialFix(InvalidPartialMethodModifierError error);
    public MakeMethodNonPartialFix(PartialMethodWithSinglePartWarning error);
    public MakeMethodNonPartialFix(PartialMethodWithoutDefiningDeclarationError error);
    public MakeMethodNonPartialFix(PartialMethodMustHaveAccessModifierError error);
    public MakeMethodNonPartialFix(PartialMethodWithNonVoidReturnTypeMustHaveAccessModifierError error);
    public MakeMethodNonPartialFix(PartialMethodWithOutParametersMustHaveAccessModifierError error);
    public MakeMethodNonPartialFix(NoImplementationOfPartialMethodWithAccessModifierError error);
    public MakeMethodNonPartialFix(PartialMethodReturnShouldBeVoidError error);
    public MakeMethodNonPartialFix(AbstractPartialMethodError error);
    public MakeMethodNonPartialFix(OutParameterInPartialMethodError error);
    private static MakeMethodNonPartialFix();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.MakeMethodNonPartialItem : BulbActionBase {
    [CompilerGeneratedAttribute]
private IMethodDeclaration <methodDeclaration>P;
    public string Text { get; }
    public MakeMethodNonPartialItem(IMethodDeclaration methodDeclaration);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.MakeMethodPartialFix : object {
    [CanBeNullAttribute]
private IMethodDeclaration myMethodDeclaration;
    private BulbActionBase myAction;
    public MakeMethodPartialFix(NonabstractMethodWithoutBodyError error);
    public MakeMethodPartialFix(SameSignatureMemberDeclarationError error);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.MakeMustDisposeResourceFix : ModernScopedQuickFixBase {
    private bool myAnnotateClass;
    [NullableAttribute("2")]
private ITypeElement myAttributeTypeElement;
    [NullableAttribute("2")]
private IAttributesOwnerDeclaration myDeclaration;
    private string myText;
    private static ClrTypeName AttributeClrTypeName { get; }
    public FileCollectorInfo FileCollectorInfo { get; }
    public string Text { get; }
    public string ScopedText { get; }
    public MakeMustDisposeResourceFix(ConstructorWithMustDisposeResourceAttributeBaseIsNotAnnotatedWarning warning, bool annotateClass);
    public MakeMustDisposeResourceFix(NotDisposedResourceIsReturnedWarning warning);
    private static ClrTypeName get_AttributeClrTypeName();
    public virtual FileCollectorInfo get_FileCollectorInfo();
    public virtual string get_Text();
    public virtual string get_ScopedText();
    [NullableContextAttribute("2")]
protected virtual ITreeNode TryGetContextTreeNode();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.MakeNewFix : MakeNewFixBase {
    protected string ModifiersText { get; }
    public string Text { get; }
    public MakeNewFix(NewModifierIsRequiredWarning error);
    protected virtual string get_ModifiersText();
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual void SetModifiers(IModifiersOwnerDeclaration declaration);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.MakeNewFixBase : ModifierFixBase {
    protected MakeNewFixBase(IDeclaration declaration);
    protected static ITokenNode NewModifier(ICSharpModifiersOwnerDeclaration node);
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.MakeNonAbstractFix : ModifierFixBase {
    [NotNullAttribute]
public static Key InstanceKey;
    protected string ModifiersText { get; }
    private MakeNonAbstractFix(ICSharpModifiersOwnerDeclaration declaration);
    public MakeNonAbstractFix(CannotHaveEventAccessorsInAbstractEventError error);
    public MakeNonAbstractFix(AbstractMemberInNonabstractClassError error);
    public MakeNonAbstractFix(AbstractMemberWithBodyError error);
    public MakeNonAbstractFix(AbstractMemberCannotBePrivateError error);
    public MakeNonAbstractFix(AbstractMemberCannotBeSealedError error);
    public MakeNonAbstractFix(AbstractEventWithInitializerError error);
    public MakeNonAbstractFix(AbstractMemberCannotBeVirtualError error);
    public MakeNonAbstractFix(PolymorphicMemberCannotBeStaticError error);
    public MakeNonAbstractFix(AbstractAccessorWithBodyError error);
    public MakeNonAbstractFix(ClassIsAbstractAndSealedError error);
    public MakeNonAbstractFix(OnlyAutoPropertyCanHaveInitializerError error);
    public MakeNonAbstractFix(AbstractExternMemberError error);
    public MakeNonAbstractFix(AbstractBaseMemberCallError error);
    private static MakeNonAbstractFix();
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    protected virtual string get_ModifiersText();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual void SetModifiers(IModifiersOwnerDeclaration declaration);
    private static void SetOverridableEmptyBody(IModifiersOwnerDeclaration declaration);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.MakeNonNewFix : MakeNewFixBase {
    public string Text { get; }
    public string ScopedText { get; }
    protected string ModifiersText { get; }
    public FileCollectorInfo FileCollectorInfo { get; }
    public MakeNonNewFix(RedundantNewModifierWarning error);
    public MakeNonNewFix(OverrideMemberCannotBeNewError error);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    protected virtual string get_ModifiersText();
    public virtual FileCollectorInfo get_FileCollectorInfo();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual void SetModifiers(IModifiersOwnerDeclaration declaration);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.MakeNonReadonly2Fix : ModernQuickFixBase {
    private ICreationExpressionInitializer myInitializer;
    public string Text { get; }
    public MakeNonReadonly2Fix(NestedInitializerAppliedToValueTypeError error);
    public virtual string get_Text();
    [NullableContextAttribute("2")]
private IField TryFindField();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.MakeNonSealedFix : ModifierFixBase {
    protected string ModifiersText { get; }
    public MakeNonSealedFix(CannotInheritFromSealedTypeError error);
    public MakeNonSealedFix(SealedClassInTypeParameterConstraintError error);
    public MakeNonSealedFix(AbstractMemberCannotBeSealedError error);
    public MakeNonSealedFix(NonOverrideMemberCannotBeSealedError error);
    public MakeNonSealedFix(SealedMemberInStructError error);
    protected virtual string get_ModifiersText();
    protected virtual void SetModifiers(IModifiersOwnerDeclaration declaration);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.MakeNonVolatileFix : ModifierFixBase {
    protected string ModifiersText { get; }
    public MakeNonVolatileFix(OverridableMemberCannotBeVolatileError error);
    public MakeNonVolatileFix(WrongVolatileFieldTypeError error);
    public MakeNonVolatileFix(WrongVolatileReadonlyFieldError error);
    protected virtual string get_ModifiersText();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual void SetModifiers(IModifiersOwnerDeclaration declaration);
}
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.MakeNullableFix : object {
    [NotNullAttribute]
public static IAnchor MakeNullableRefactoringAnchor;
    [CanBeNullAttribute]
private ChangeNullabilityWorkflow myWorkflow;
    private bool myIsUninitializedMembersFix;
    public string Text { get; }
    public bool IsReadOnly { get; }
    private MakeNullableFix(ICSharpExpression expression);
    private MakeNullableFix(IEnumerable`1<IDeclaredElement> typeMembers, ITreeNode context);
    public MakeNullableFix(ConvertingNullableToNonNullableWarning warning);
    public MakeNullableFix(NullReferenceAssignmentWarning warning);
    public MakeNullableFix(NullAsNonNullableWarning warning);
    public MakeNullableFix(NullReferenceReturnWarning warning);
    public MakeNullableFix(NullReferenceArgumentWarning warning);
    public MakeNullableFix(UninitializedNonNullableTypeMemberWarning warning);
    public MakeNullableFix(NonNullableTypeMemberNotInitializedInConstructorWarning warning);
    public MakeNullableFix(AssignNullToNotNullAttributeWarning warning);
    public MakeNullableFix(ConditionIsAlwaysTrueOrFalseWarning warning);
    public MakeNullableFix(ConditionIsAlwaysTrueOrFalseAccordingToNullableAPIContractWarning warning);
    public MakeNullableFix(NullCoalescingConditionIsAlwaysNotNullWarning warning);
    public MakeNullableFix(NullCoalescingConditionIsAlwaysNotNullAccordingToAPIContractWarning warning);
    public MakeNullableFix(ConditionalAccessAlwaysNotNullWarning warning);
    public MakeNullableFix(ConditionalAccessQualifierIsNonNullableAccordingToAPIContractWarning warning);
    private static MakeNullableFix();
    public sealed virtual string get_Text();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public sealed virtual void Execute(ISolution solution, ITextControl textControl);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.MakeNullCheckedParameterNullableFix : ModernScopedQuickFixBase {
    private static IAnchor ourBulkFixesAnchor;
    [NullableAttribute("2")]
private ICSharpExpression myNullCheckedExpression;
    public IAnchor LocalScopeAnchor { get; }
    public IAnchor GlobalScopeAnchor { get; }
    public FileCollectorInfo FileCollectorInfo { get; }
    public string Text { get; }
    public MakeNullCheckedParameterNullableFix(ConditionIsAlwaysTrueOrFalseWarning warning);
    public MakeNullCheckedParameterNullableFix(ConditionIsAlwaysTrueOrFalseAccordingToNullableAPIContractWarning warning);
    public MakeNullCheckedParameterNullableFix(NullCoalescingConditionIsAlwaysNotNullWarning warning);
    public MakeNullCheckedParameterNullableFix(NullCoalescingConditionIsAlwaysNotNullAccordingToAPIContractWarning warning);
    public MakeNullCheckedParameterNullableFix(ConditionalAccessAlwaysNotNullWarning warning);
    public MakeNullCheckedParameterNullableFix(ConditionalAccessQualifierIsNonNullableAccordingToAPIContractWarning warning);
    private static MakeNullCheckedParameterNullableFix();
    public sealed virtual IAnchor get_LocalScopeAnchor();
    public sealed virtual IAnchor get_GlobalScopeAnchor();
    public virtual FileCollectorInfo get_FileCollectorInfo();
    public virtual string get_Text();
    [NullableContextAttribute("2")]
protected virtual ITreeNode TryGetContextTreeNode();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    internal static ICSharpExpression TryFindNullCheckedExpression(ICSharpExpression nullCheckExpression, ConstantExpressionValue constantValue);
    [NullableContextAttribute("2")]
internal static ICSharpExpression TryFindNullCheckedExpressionByNullCoalescingExpressionRightOperand(ICSharpExpression rightOperand);
    [NullableContextAttribute("2")]
[ContractAnnotationAttribute("null => null")]
internal static IParameter TryFindNullCheckedParameter(ICSharpExpression expression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.MakeOperationContractTwoWayFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private IMethodDeclaration myMethodDeclaration;
    public string Text { get; }
    public MakeOperationContractTwoWayFix(OneWayOperationContractWithReturnTypeWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static bool IsOperationContractAttribute(IAttribute arg);
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.MakeOverrideFix : MakeOverrideFixBase {
    public MakeOverrideFix(OverrideKeywordIsMissingError error);
    public MakeOverrideFix(HiddenAbstractMemberError error);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public abstract class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.MakeOverrideFixBase : ModifierFixBase {
    private IOverridableMember mySuperMember;
    protected IOverridableMember SuperMember { get; }
    protected string ModifiersText { get; }
    protected MakeOverrideFixBase(IDeclaredElement member, IOverridableMember superMember);
    protected IOverridableMember get_SuperMember();
    protected virtual string get_ModifiersText();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual void SetModifiers(IModifiersOwnerDeclaration declaration);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.MakeParameterOutFix : ModernQuickFixBase {
    private IAssignmentExpression myAssignment;
    public string Text { get; }
    public MakeParameterOutFix(AssignmentNotUsedWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    public IParameter FindAssignedParameter(IAssignmentExpression assignmentExpression);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private bool HasReadUsages(IParameter parameter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.MakeParameterWithDefaultValueNullableFix : ModernScopedQuickFixBase {
    private static IAnchor ourBulkFixesAnchor;
    [NullableAttribute("2")]
private ICSharpExpression myExpression;
    public IAnchor LocalScopeAnchor { get; }
    public IAnchor GlobalScopeAnchor { get; }
    public FileCollectorInfo FileCollectorInfo { get; }
    public string Text { get; }
    public MakeParameterWithDefaultValueNullableFix(NullAsNonNullableWarning warning);
    public MakeParameterWithDefaultValueNullableFix(NullReferenceAssignmentWarning warning);
    private static MakeParameterWithDefaultValueNullableFix();
    public sealed virtual IAnchor get_LocalScopeAnchor();
    public sealed virtual IAnchor get_GlobalScopeAnchor();
    public virtual FileCollectorInfo get_FileCollectorInfo();
    public virtual string get_Text();
    [NullableContextAttribute("2")]
protected virtual ITreeNode TryGetContextTreeNode();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [NullableContextAttribute("2")]
private ICSharpRegularParameterDeclaration GetParameterDeclaration();
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.MakePartialFix : ModernQuickFixBase {
    private IClassLikeDeclaration myDeclaration;
    public string Text { get; }
    public MakePartialFix(DuplicateGlobalNameError error);
    public MakePartialFix(DuplicateSameTypeError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [CanBeNullAttribute]
private IReadOnlyList`1<IDeclaration> CollectDeclarations();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.MakePropertyInitOnlyFix : ModernScopedNonIncrementalQuickFixBase {
    [NullableAttribute("2")]
private IAccessorDeclaration mySetterDeclaration;
    public string Text { get; }
    public bool IsReanalysisRequired { get; }
    public MakePropertyInitOnlyFix(PropertyCanBeMadeInitOnlyWarningBase warning);
    public virtual string get_Text();
    public virtual bool get_IsReanalysisRequired();
    private bool IsAvailable();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.MakeRefFieldMutableFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private IField myField;
    public string Text { get; }
    public MakeRefFieldMutableFix(ReadonlyReferenceFieldCannotBeAssignedToError error);
    public MakeRefFieldMutableFix(IncorrectAssignmentTargetError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.MakeSealedFix : ModifierFixBase {
    protected string ModifiersText { get; }
    public MakeSealedFix(VirtualMemberCallInConstructorWarning error);
    public MakeSealedFix(IDeclaredElement declaredElement);
    protected virtual string get_ModifiersText();
    [CanBeNullAttribute]
private static IOverridableMember GetMember(VirtualMemberCallInConstructorWarning error);
    protected virtual void SetModifiers(IModifiersOwnerDeclaration declaration);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.MakeSpreadElementFromExpressionElementFix : ModernQuickFixBase {
    private ICollectionExpressionElement myElement;
    private ICSharpExpression myElementExpression;
    public string Text { get; }
    public MakeSpreadElementFromExpressionElementFix(IncorrectCollectionExpressionItemTypeError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.MakeStaticClosureFunctionCalleeStaticFix : ModernQuickFixBase {
    private IReference myReference;
    public string Text { get; }
    public MakeStaticClosureFunctionCalleeStaticFix(LocalInStaticLocalFunctionError error);
    public MakeStaticClosureFunctionCalleeStaticFix(LocalInStaticAnonymousFunctionError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.MakeStaticExternFix : ModifierFixBase {
    protected string ModifiersText { get; }
    public MakeStaticExternFix(IncorrectDllImportAttributeUsageError error);
    protected virtual string get_ModifiersText();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual void SetModifiers(IModifiersOwnerDeclaration declaration);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.MakeStructMemberReadonlyFix : ModernQuickFixBase {
    private IProperty myProperty;
    public string Text { get; }
    public MakeStructMemberReadonlyFix(BothAccessorsReadonlyError error);
    public MakeStructMemberReadonlyFix(ReadonlyInitAccessorError error);
    public MakeStructMemberReadonlyFix(ReadonlyAccessorInMemberWithSingleAccessorError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.MakeTypeArgumentNonNullableFix : ModernQuickFixBase {
    private static Key`1<ITypeUsage> ourKey;
    [NullableAttribute("2")]
private ITypeUsage myTypeArgumentTypeUsage;
    public string Text { get; }
    public MakeTypeArgumentNonNullableFix(NullabilityMismatchInTypeParameterNotNullConstraintWarning warning);
    public MakeTypeArgumentNonNullableFix(NullabilityMismatchInTypeParameterReferenceTypeConstraintWarning warning);
    public MakeTypeArgumentNonNullableFix(NullabilityMismatchInTypeParameterConstraintTypeWarning warning);
    private static MakeTypeArgumentNonNullableFix();
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.MakeTypeArgumentTypeParameterNotNullableFix : ModernQuickFixBase {
    private static Key`1<ITypeParameter> ourKey;
    private IType myArgumentType;
    [NullableAttribute("2")]
private IType myConstraintType;
    public string Text { get; }
    public MakeTypeArgumentTypeParameterNotNullableFix(NullabilityMismatchInTypeParameterNotNullConstraintWarning warning);
    public MakeTypeArgumentTypeParameterNotNullableFix(NullabilityMismatchInTypeParameterReferenceTypeConstraintWarning warning);
    public MakeTypeArgumentTypeParameterNotNullableFix(NullabilityMismatchInTypeParameterConstraintTypeWarning warning);
    private static MakeTypeArgumentTypeParameterNotNullableFix();
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.MakeTypeNotNullableFix : ModernScopedNonIncrementalQuickFixBase {
    private INullableTypeUsage myTypeUsage;
    public string Text { get; }
    public MakeTypeNotNullableFix(VariableCanBeNotNullableWarning warning);
    public MakeTypeNotNullableFix(ReturnTypeCanBeNotNullableWarning warning);
    public virtual string get_Text();
    protected virtual ITreeNode TryGetContextTreeNode();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    protected virtual IScopedFixingStrategy GetScopedFixingStrategy(ISolution solution, IHighlighting highlighting);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.MakeVariableNonConstantFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private IReferenceExpression myReferenceExpression;
    public string Text { get; }
    public MakeVariableNonConstantFix(ByRefArgumentIsNotMutableVariableError error);
    public MakeVariableNonConstantFix(IncorrectAssignmentTargetError error);
    public MakeVariableNonConstantFix(IncorrectIncrementDecrementOperandError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [PureAttribute]
private static ILocalConstantDeclaration FindLocalConstantDeclaration(IReferenceExpression referenceExpression);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.MakeVirtualFix : ModifierFixBase {
    protected string ModifiersText { get; }
    public MakeVirtualFix(WrongRecordMemberNonOverrideableError error);
    protected virtual string get_ModifiersText();
    protected virtual void SetModifiers(IModifiersOwnerDeclaration declaration);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.MakeVoid2Fix : ChangeTypeFixBase {
    [NullableAttribute("2")]
private ICSharpDeclaration myDeclaration;
    public string Text { get; }
    public MakeVoid2Fix(MissingReturnStatementError error);
    public MakeVoid2Fix(PartialMethodWithNonVoidReturnTypeMustHaveAccessModifierError error);
    public MakeVoid2Fix(PartialMethodReturnShouldBeVoidError error);
    public virtual string get_Text();
    [NullableContextAttribute("2")]
protected virtual IType GetTargetType();
    [NullableContextAttribute("2")]
protected virtual IClrDeclaredElement GetDeclaredElement();
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.MakeVoidFix : ChangeTypeInReturnFix {
    public string Text { get; }
    public MakeVoidFix(ReturnValueMissingError error);
    public virtual string get_Text();
    protected virtual IType GetTargetType();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.MarkNullableFix : ModernScopedQuickFixBase {
    private IAttributesOwnerDeclaration myDeclaration;
    private ITypeElement mySuggestedAnnotation;
    public static Key`1<string> InstanceKey;
    public string ScopedText { get; }
    public string Text { get; }
    public MarkNullableFix(AnnotateCanBeNullTypeMemberWarning error);
    public MarkNullableFix(AnnotateNotNullTypeMemberWarning error);
    public MarkNullableFix(AnnotateCanBeNullParameterWarning error);
    public MarkNullableFix(AnnotateNotNullParameterWarning error);
    private static MarkNullableFix();
    public virtual bool IsAvailable(IUserDataHolder cache);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    [NullableContextAttribute("2")]
protected virtual ITreeNode TryGetContextTreeNode();
    public virtual string get_ScopedText();
    public virtual string get_Text();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    protected virtual IScopedFixingStrategy GetScopedFixingStrategy(ISolution solution, IHighlighting highlighting);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.MarkWithFlagsFix : ModernQuickFixBase {
    private IOperatorExpression myExpression;
    public string Text { get; }
    [NullableAttribute("2")]
private ITypeElement FlagsAttributeType { get; }
    public MarkWithFlagsFix(BitwiseOperatorOnEnumWithoutFlagsWarning error);
    public virtual string get_Text();
    [NullableContextAttribute("2")]
private ITypeElement get_FlagsAttributeType();
    [NullableContextAttribute("2")]
private IEnum FindEnumElement();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.MergeAndPatternFix : ModernScopedQuickFixBase {
    private IAndPattern myAndPattern;
    private int myOperandIndex;
    public string Text { get; }
    public MergeAndPatternFix(MergeAndPatternWarning error);
    public virtual string get_Text();
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.MergeDocCommentTagsFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private IXmlTag myTag;
    public string Text { get; }
    public MergeDocCommentTagsFix(DuplicateTypeParameterXmlDocWarning error);
    public MergeDocCommentTagsFix(DuplicateParameterXmlDocWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.MergeDuplicatedSwitchSectionsFix : ModernQuickFixBase {
    private List`1<ISwitchSection> mySectionsToMerge;
    private ISwitchStatement mySwitchStatement;
    public string Text { get; }
    public MergeDuplicatedSwitchSectionsFix(DuplicatedSwitchSectionBodiesWarning warning);
    public virtual string get_Text();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.MergeIntoPatternAction")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.MergeIntoPatternFix : ModernScopedQuickFixBase {
    private SequentialPatternCheck mySequentialPatternCheck;
    public string Text { get; }
    public MergeIntoPatternFix(MergeIntoPatternWarning error);
    public MergeIntoPatternFix(MergeIntoNegatedPatternWarning error);
    public MergeIntoPatternFix(MergeIntoLogicalPatternWarning error);
    public virtual string get_Text();
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IScopedFixingStrategy GetScopedFixingStrategy(ISolution solution, IHighlighting highlighting);
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.MergeLocalsFix : ModernQuickFixBase {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<IDeclaration> myVariables;
    public string Text { get; }
    public MergeLocalsFix(DuplicateLocalVariableNameError error);
    public MergeLocalsFix(DuplicateLocalVariableNameWarningError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [NullableContextAttribute("2")]
private ICSharpTreeNode GetAnchorElement();
    [NullableContextAttribute("2")]
private bool NodeContainsAllVariables(ITreeNode container);
    [NullableContextAttribute("2")]
private IDeclaredElement FindVariable(ICSharpStatement anchorStatement);
    [NullableContextAttribute("2")]
private bool VariablesContainDeclaredElement(IDeclaredElement declaredElement);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.MergeNestedPropertyPatternsFix : ModernScopedQuickFixBase {
    private ISubpattern myOuterSubpattern;
    public string Text { get; }
    public MergeNestedPropertyPatternsFix(MergeNestedPropertyPatternsWarning warning);
    public virtual string get_Text();
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.MergeSequentialChecksAction")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.MergeSequentialChecksFix : ModernScopedQuickFixBase {
    private IBinaryExpression myBinary;
    private int mySignIndex;
    public string Text { get; }
    public MergeSequentialChecksFix(MergeSequentialChecksWarning error);
    public virtual string get_Text();
    protected virtual ITreeNode TryGetContextTreeNode();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.MergeTryStatementsFix : ModernQuickFixBase {
    private ITryStatement myTryStatement;
    private ITryStatement myChildTryStatement;
    public string Text { get; }
    public MergeTryStatementsFix(TryStatementsCanBeMergedWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.MoveInitializationAction")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.MoveInitializationFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private ICSharpTypeMemberDeclaration myMemberDeclaration;
    private string myText;
    public string Text { get; }
    public MoveInitializationFix(StructMemberInitializerError error);
    public MoveInitializationFix(NonStaticElementInStaticContextError error);
    public MoveInitializationFix(CannotUseThisBaseInInitializerError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.MoveLocalFunctionToTheEndOfAScopeAction")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.MoveLocalFunctionToTheEndOfAScopeFix : ModernScopedQuickFixBase {
    private ILocalFunctionDeclaration myLocalFunctionDeclaration;
    private IReadOnlyList`1<ILocalFunctionDeclaration> myOrderedDeclarations;
    private JumpKind myJumpKind;
    public string Text { get; }
    public string ScopedText { get; }
    public MoveLocalFunctionToTheEndOfAScopeFix(MoveLocalFunctionAfterJumpStatementWarning warning);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.MoveParameterToTheEndFix : ModernQuickFixBase {
    private ICSharpParameterDeclaration myParameterDeclaration;
    public string Text { get; }
    public MoveParameterToTheEndFix(OptionalParameterBeforeRequiredError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.MoveToInnerScopeFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private IDeclaration myDeclaration;
    public string Text { get; }
    public MoveToInnerScopeFix(TooWideLocalVariableScopeWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static IDeclarationStatement InsertStatement(IReadOnlyList`1<ICSharpExpression> usages, ICSharpStatement targetStatement, IDeclarationStatement declarationStatement);
    private static IDeclarationStatement FindDeclarationStatement(IDeclaration declaration);
    private static IReadOnlyList`1<ICSharpExpression> GetUsages(IDeclaration declaration, ITreeNode scope);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.MoveTopLevelCodeToAnotherFileFix : ModernQuickFixBase {
    private ITopLevelCode myTopLevelCode;
    private IReadOnlyList`1<IPsiSourceFile> myFilesWithTopLevelCode;
    public string Text { get; }
    public MoveTopLevelCodeToAnotherFileFix(MultipleFilesWithTopLevelCodeError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.MoveTopLevelCodeToProperPositionFix : ModernQuickFixBase {
    private ITopLevelCode myTopLevelCode;
    public string Text { get; }
    public MoveTopLevelCodeToProperPositionFix(TopLevelCodeAfterNamespaceOrTypeError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.MoveVariableDeclarationInsideLoopConditionFix : ModernScopedQuickFixBase {
    private ICSharpExpression myConditionElement;
    private ICSharpExpression myAssignmentSource;
    private ILocalVariableDeclaration myVariableDeclaration;
    private IDeclarationStatement myVariableDeclarationStatement;
    public string Text { get; }
    public MoveVariableDeclarationInsideLoopConditionFix(MoveVariableDeclarationInsideLoopConditionWarning warning);
    public virtual string get_Text();
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.MultipleEnumerationFixBase : ModernQuickFixBase {
    [CompilerGeneratedAttribute]
private PossibleMultipleEnumerationWarning <warning>P;
    protected MultipleEnumerationFixBase(PossibleMultipleEnumerationWarning warning);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private ITreeNode GetLoop(ITreeNode usage);
    protected abstract virtual void EnumerateGenericIEnumerable(IType enumerableType, ICSharpExpression valueExpression);
    protected abstract virtual void EnumerateIEnumerable(ICSharpExpression valueExpression);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.NameTemplateExpression : SuggestedNameTemplateExpression {
    [CompilerGeneratedAttribute]
private List`1<string> <names>P;
    public NameTemplateExpression(List`1<string> names);
    protected virtual IList`1<ILookupItem> GetLookupItemsImpl(IHotspotContext sessionContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.NegationOfRelationalPatternFix : ModernScopedQuickFixBase {
    private INegatedPattern myNegatedPattern;
    private IRelationalPattern myInnerRelationalPattern;
    public string Text { get; }
    public NegationOfRelationalPatternFix(NegationOfRelationalPatternWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static IRelationalPattern InvertSign(IRelationalPattern pattern, CSharpElementFactory factory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.OpenDocumentationUrlFix : QuickFixBase {
    private string myCompilerId;
    [NullableAttribute("2")]
private string myUrlFormat;
    public bool IsReadOnly { get; }
    public string Text { get; }
    public OpenDocumentationUrlFix(ExperimentalElementWarning warning);
    public OpenDocumentationUrlFix(ObsoleteElementWarning warning);
    public OpenDocumentationUrlFix(ObsoleteElementWithoutMessageWarning warning);
    public OpenDocumentationUrlFix(ObsoleteElementError error);
    public sealed virtual bool get_IsReadOnly();
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [NullableContextAttribute("2")]
private Uri CreateUri();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.OptimizeImportsFix : ModernScopedQuickFixWithCustomExecutor {
    private IUsingDirective myDirective;
    public string Text { get; }
    public string ScopedText { get; }
    public FileCollectorInfo FileCollectorInfo { get; }
    public bool IsReanalysisRequired { get; }
    [NullableAttribute("2")]
public ITreeNode ReanalysisDependencyRoot { get; }
    public ITreeNode ContextNode { get; }
    public OptimizeImportsFix(UnusedUsingDirectiveWarning error);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    protected virtual ITreeNode TryGetContextTreeNode();
    public virtual bool IsAvailable(IUserDataHolder cache);
    public virtual FileCollectorInfo get_FileCollectorInfo();
    public sealed virtual bool get_IsReanalysisRequired();
    [NullableContextAttribute("2")]
public sealed virtual ITreeNode get_ReanalysisDependencyRoot();
    public sealed virtual ITreeNode get_ContextNode();
    protected virtual IScopedFixingStrategy GetScopedFixingStrategy(ISolution solution, IHighlighting highlighting);
    protected sealed virtual ScopedActionExecutor GetScopedQuickFixExecutor(ISolution solution, IScopedFixingStrategy fixingStrategy, PsiLanguageType languageType);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.OverrideHiddenFix : MakeOverrideFixBase {
    public OverrideHiddenFix(NewModifierIsRequiredWarning error);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public static class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.OwnerUtil : object {
    [CanBeNullAttribute]
private static ICreationTarget GetFileOrNamespaceTarget(ICSharpTreeNode node);
    [CanBeNullAttribute]
public static ICreationTarget GetOwnerForTypeDeclaration(IReferenceName referenceName);
    public static ICreationTarget GetOwnerForTypeDeclaration(IReferenceExpression referenceExpression);
    [CanBeNullAttribute]
public static ICreationTarget GetOwnerForNestedTypeDeclaration(IReferenceName referenceName);
    [CanBeNullAttribute]
public static ICreationTarget GetOwnerForNestedTypeDeclaration(IReferenceExpression referenceName);
    [CanBeNullAttribute]
private static IClassLikeDeclaration GetNotNestingOwner(ICSharpTreeNode usage);
    [CanBeNullAttribute]
public static ITypeTarget GetOwnerForTypeMemberDeclaration(IReference reference);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ParamsParamTypeFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private ICSharpParameterDeclaration myParameterDeclaration;
    public string Text { get; }
    public ParamsParamTypeFix(ParamsButNotArrayError error);
    public ParamsParamTypeFix(ParamsMultiDimArrayError error);
    public ParamsParamTypeFix(ParamsCollectionWithInvalidTypeError error);
    public ParamsParamTypeFix(CannotUseAttributeConstructorWithParamsCollectionError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [NullableContextAttribute("2")]
private IDeclaredType GetElementType();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ParenthesizeLambdaSignatureFix : ModernScopedQuickFixBase {
    private ILambdaExpression myLambdaExpression;
    public string Text { get; }
    public ParenthesizeLambdaSignatureFix(LambdaAttributesWithoutParenthesesError error);
    public virtual string get_Text();
    protected virtual ITreeNode TryGetContextTreeNode();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.PassCancellationTokenFix : ModernQuickFixBase {
    private IFunction myAsyncOverload;
    private bool myShouldAppendWithCancellation;
    [NotNullAttribute]
private ICSharpExpression myExpression;
    [CanBeNullAttribute]
private IParameter myCancellationParameter;
    [NotNullAttribute]
private IList`1<ITypeOwner> myCancellationTokens;
    public string Text { get; }
    public PassCancellationTokenFix(bool shouldAppendWithCancellation, ICSharpExpression expression, IFunction asyncOverload, IParameter cancellationParameter, IList`1<ITypeOwner> cancellationTokens);
    public PassCancellationTokenFix(MethodSupportsCancellationWarning warning);
    public PassCancellationTokenFix(MethodHasAsyncOverloadWithCancellationWarning warning);
    public PassCancellationTokenFix(UseCancellationTokenForIAsyncEnumerableWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [CompilerGeneratedAttribute]
internal static ValueTuple`2<ICSharpExpression, ICSharpArgument> <ExecutePsiTransaction>g__InsertArgument|12_0(ICSharpExpression expression, ITypeOwner firstToken, IParameter cancellationParameter, bool shouldAppendWithCancellation);
    [CompilerGeneratedAttribute]
internal static IInvocationExpression <ExecutePsiTransaction>g__BindToAsyncOverload|12_1(ICSharpExpression expression, IFunction asyncOverload);
    [CompilerGeneratedAttribute]
internal static ValueTuple`2<ICSharpExpression, ICSharpArgument> <ExecutePsiTransaction>g__WrapWithAwait|12_2(ICSharpExpression expression, ICSharpArgument argument);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ProtectedInCrefFix : ModernQuickFixBase {
    private ICSharpDocCommentReference myReference;
    public string Text { get; }
    public ProtectedInCrefFix(NotResolvedInDocCommentWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private ITypeMember SelectCandidate(IEnumerable`1<ITypeMember> candidates);
    private IList`1<ITypeMember> BuildCandidates();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ProvideMemberInitializerNameFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private IPropertyInitializer myPropertyInitializer;
    public string Text { get; }
    public ProvideMemberInitializerNameFix(MissingNameInObjectMemberInitializerError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.PullLocalFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private IReference myReference;
    public string Text { get; }
    public PullLocalFix(NotResolvedError error);
    public PullLocalFix(UseLocalVariableBeforeDeclarationError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    private static IType GetVariableType(IEnumerable`1<ILocalVariableDeclaration> declarations);
    [NullableContextAttribute("2")]
private IBlock GetContainingBlock();
    private IList`1<ILocalVariableDeclaration> GetDeclarations(IBlock block);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RecursionToIterationFix : ModernQuickFixBase {
    private ICSharpParametersOwnerDeclaration myDeclaration;
    private IList`1<IInvocationExpression> myTailCalls;
    public string Text { get; }
    public RecursionToIterationFix(TailRecursiveCallWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private void ExpressionToStatement(TreeNodeMarker`1<IInvocationExpression> call, CSharpElementFactory factory);
    private static void RemoveRedundantStatementsAfter(ICSharpStatement statement);
    private static IList`1<ArgumentInfo> IterateArguments(IInvocationExpression invocation);
    private static Dictionary`2<IParameter, ILocalVariable> CollectDependentParameters(IInvocationExpression invocation);
    private void CreateTemporaryVariables(Dictionary`2<IParameter, ILocalVariable> mapping, ICSharpStatement& statement, CSharpElementFactory factory);
    private JetHashSet`1<IParameter> AssignExplicitArguments(TreeNodeMarker`1<IInvocationExpression> call, Dictionary`2<IParameter, ILocalVariable> tempMapping, ICSharpStatement& statement, CSharpElementFactory factory);
    private void AssignImplicitArguments(JetHashSet`1<IParameter> assigned, ICSharpStatement& statement, CSharpElementFactory factory);
    private void FixControlFlow(IWhileStatement whileLoop, JetHashSet`1<ICSharpStatement> jumps, CSharpElementFactory factory);
    private IWhileStatement WrapBodyToLoop(CSharpElementFactory factory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RedirectToCapturingMemberFix")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RedirectToCapturingMemberFix : ModernScopedQuickFixBase {
    private IParameter myPrimaryConstructorParameter;
    [NullableAttribute("2")]
private IReferenceExpression myParameterUsageExpression;
    [NullableAttribute("2")]
private ITypeMember myTargetTypeMember;
    private bool myIsScoped;
    private bool myFieldDropReadonly;
    public string Text { get; }
    public FileCollectorInfo FileCollectorInfo { get; }
    public RedirectToCapturingMemberFix(CapturedPrimaryConstructorParameterPassedToBaseWarning warning);
    public RedirectToCapturingMemberFix(CapturedPrimaryConstructorParameterInFieldInitializerWarning warning);
    public RedirectToCapturingMemberFix(CapturedPrimaryConstructorParameterIsMutableWarning warning);
    public RedirectToCapturingMemberFix(PrimaryConstructorParameterCaptureDisallowedWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
protected virtual ITreeNode TryGetContextTreeNode();
    public virtual FileCollectorInfo get_FileCollectorInfo();
    protected virtual IScopedFixingStrategy GetScopedFixingStrategy(ISolution solution, IHighlighting highlighting);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static ITypeMember TryFindBaseMemberProbablyStoringTheCapturedValue(IParameter primaryParameter);
    private static ITypeMember TryFindThisMemberActuallyStoringTheCapturedValue(IParameter primaryParameter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RedundantIsBeforeRelationalPatternFix : ModernScopedQuickFixBase {
    private IIsExpression myIsExpression;
    public string Text { get; }
    public RedundantIsBeforeRelationalPatternFix(RedundantIsBeforeRelationalPatternWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ReferenceModule2Fix : ReferenceModuleFixBase {
    public ReferenceModule2Fix(ExtensionMethodThisParameterWithoutSystemCoreError error);
    protected virtual HybridCollection`1<IReferenceAction> FindModulesToReference(ModuleReferencerService moduleReferencerService);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ReferenceModule3Fix : ReferenceModuleFixBase {
    public ReferenceModule3Fix(UseDynamicWithoutSupportTypesError error);
    private IReferenceAction GetAction(ModuleReferencerService moduleReferencerService, string target);
    protected virtual HybridCollection`1<IReferenceAction> FindModulesToReference(ModuleReferencerService moduleReferencerService);
}
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ReferenceModuleAndMethodFix : object {
    private ResolveErrorType[] myAcceptedResolveErrors;
    private ModuleReferencerService myModuleReferencerService;
    private IReadOnlyList`1<CSharpImportMethodInfo> myCache;
    [CompilerGeneratedAttribute]
private IReference <Reference>k__BackingField;
    private IReference Reference { get; }
    private ReferenceModuleAndMethodFix(IReference reference, ResolveErrorType[] acceptedResolveErrors);
    public ReferenceModuleAndMethodFix(IReference reference);
    public ReferenceModuleAndMethodFix(NotResolvedError error);
    public ReferenceModuleAndMethodFix(IncorrectArgumentNumberError error);
    public ReferenceModuleAndMethodFix(IncorrectArgumentsError error);
    public ReferenceModuleAndMethodFix(NoTypeParametersInCandidateError error);
    public ReferenceModuleAndMethodFix(TypeParametersNumberMismatchError error);
    public ReferenceModuleAndMethodFix(TypeParametersNumberMismatchMultipleCandidatesError error);
    public ReferenceModuleAndMethodFix(MultipleResolveCandidatesError error);
    public ReferenceModuleAndMethodFix(IncorrectArgumentTypeError error);
    public ReferenceModuleAndMethodFix(NotResolvedCollectionInitializerError error);
    public ReferenceModuleAndMethodFix(DeconstructNotFoundError error);
    [CompilerGeneratedAttribute]
private IReference get_Reference();
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    private static IReference GetCallArgument(ICSharpArgument argument);
    [NotNullAttribute]
private IReadOnlyList`1<CSharpImportMethodInfo> GetSuggestions();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ReferenceModuleAndMethodFixItem : BulbActionBase {
    [CompilerGeneratedAttribute]
private ModuleReferencerService <moduleReferencerService>P;
    [CompilerGeneratedAttribute]
private CSharpImportMethodInfo <importMethodInfo>P;
    private static DeclaredElementPresenterStyle ourStyle;
    private IReferencePointer myReferencePointer;
    public string Text { get; }
    public ReferenceModuleAndMethodFixItem(ModuleReferencerService moduleReferencerService, CSharpImportMethodInfo importMethodInfo, IReference reference);
    private static ReferenceModuleAndMethodFixItem();
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecuteAfterPsiTransaction(ISolution solution, IProjectModelTransactionCookie cookie, IProgressIndicator progress);
    private void BeforePsi();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ReferenceModuleFix : ReferenceModuleFixBase {
    private string myModule;
    public ReferenceModuleFix(UnreferencedModuleError error);
    [NullableContextAttribute("2")]
private static string GetProjectAssemblyName(IProject project);
    private static string GetAssemblyAssemblyName(IAssembly assembly);
    protected virtual HybridCollection`1<IReferenceAction> FindModulesToReference(ModuleReferencerService moduleReferencerService);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <FindModulesToReference>b__4_0(IProject p);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <FindModulesToReference>b__4_1(IAssembly a);
}
internal static class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ReferenceNameFinder : object {
    public static IList`1<IExpression> GetExpressions(IReferenceName referenceName, ICSharpTreeNode scope);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ReferenceNameFinder/<FindDeclaredElements>d__1")]
private static IEnumerable`1<IDeclaredElement> FindDeclaredElements(IEnumerable`1<IReferenceName> referenceNames);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ReinterpretInterpolatedStringAsRegularLiteralFix : ModernQuickFixBase {
    private IInterpolatedStringInsert myInsert;
    public string Text { get; }
    public ReinterpretInterpolatedStringAsRegularLiteralFix(PossiblyMistakenUseOfInterpolatedStringInsertWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RelocateAttributeToLambdaParameterFix : ModernScopedQuickFixBase {
    private IAttribute myAttribute;
    private AttributeTargets myAttributeTargets;
    public string Text { get; }
    public RelocateAttributeToLambdaParameterFix(InvalidAttributeUsageError error);
    public virtual string get_Text();
    protected virtual ITreeNode TryGetContextTreeNode();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveAbstractFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private ICSharpModifiersOwnerDeclaration myModifiersOwner;
    public string Text { get; }
    [NullableContextAttribute("2")]
private RemoveAbstractFix(ICSharpModifiersOwnerDeclaration modifiersOwner);
    public RemoveAbstractFix(AbstractMemberWithBodyError error);
    public RemoveAbstractFix(AbstractMemberInNonabstractClassError error);
    public RemoveAbstractFix(AbstractMemberCannotBePrivateError error);
    public RemoveAbstractFix(AbstractMemberCannotBeVirtualError error);
    public RemoveAbstractFix(AbstractMemberCannotBeSealedError error);
    public RemoveAbstractFix(PrivateMemberCannotBePolymorphicError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveAccessorFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private IAccessor myAccessor;
    public string Text { get; }
    public RemoveAccessorFix(AddedAccessorInPrivateImplementationError error);
    public RemoveAccessorFix(CannotOverrideNonExistingAccessorError error);
    public RemoveAccessorFix(RefReturningPropertyHasSetterError error);
    public RemoveAccessorFix(ReadonlyAutoPropertyWithSetAccessorError error);
    public RemoveAccessorFix(AutoPropertyWithReadonlySetAccessorError error);
    public RemoveAccessorFix(CannotChangeReturnTypeInWriteablePropertyError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveAccessorModifiersFix : RemoveModifiersFixBase {
    public RemoveAccessorModifiersFix(AccessRightsInSingleAccessorError error);
    public RemoveAccessorModifiersFix(AccessRightsForBothAccessorsError error);
    public RemoveAccessorModifiersFix(AbstractPrivateAccessorError error);
    public RemoveAccessorModifiersFix(EventAccessorCannotHaveModifiersError error);
    public RemoveAccessorModifiersFix(InvalidPartialMethodModifierError error);
    public RemoveAccessorModifiersFix(AccessorAccessRightsShouldBeMoreRestrictiveError error);
    protected virtual bool MustRemove(TokenNodeType modifierNodeType, TokenNodeType previousNodeType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveAllowsRefStructConstraintFix : RemoveConstraintFixBase {
    public RemoveAllowsRefStructConstraintFix(DuplicateAllowsRefStructTypeParameterConstraintError error);
    public RemoveAllowsRefStructConstraintFix(BothAllowsRefStructAndReferenceTypeParameterConstraintError error);
    public RemoveAllowsRefStructConstraintFix(BothBaseClassConstraintAndAllowsRefStructConstraintError error);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveAnyModifierFix : ModernQuickFixBase {
    [CompilerGeneratedAttribute]
private IModifiersList <modifiersList>P;
    [NullableAttribute("2")]
private ITokenNode myModifier;
    private string myText;
    public string Text { get; }
    public RemoveAnyModifierFix(IModifiersList modifiersList, ITokenNode modifier);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveArgumentListFix : ModernScopedQuickFixBase {
    private IObjectCreationExpression myExpression;
    public string Text { get; }
    public string ScopedText { get; }
    public bool IsReanalysisRequired { get; }
    public RemoveArgumentListFix(RedundantEmptyObjectCreationArgumentListWarning error);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool get_IsReanalysisRequired();
    public virtual bool IsAvailable(IUserDataHolder userDataHolder);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveArgumentNameFix : ModernScopedQuickFixBase {
    [NullableAttribute("2")]
private ICSharpArgument myArgument;
    public string Text { get; }
    public string ScopedText { get; }
    public bool IsReanalysisRequired { get; }
    public RemoveArgumentNameFix(NamedCollectionInitializerElementError error);
    public RemoveArgumentNameFix(CSharp40LanguageFeatureError error);
    public RemoveArgumentNameFix(ExpressionTreeWithNamedArgumentsError error);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool get_IsReanalysisRequired();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveArgumentsFix : ModernQuickFixBase {
    private IObjectCreationExpression myCreationExpression;
    private ITypeParameter myParameter;
    public string Text { get; }
    public RemoveArgumentsFix(CannotCreateInstanceOfTypeParameterWithArgumentsError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveAsFix : RemoveCastFixBase {
    private IAsExpression myAsExpression;
    public string Text { get; }
    public string ScopedText { get; }
    public ITreeNode ReanalysisDependencyRoot { get; }
    public RemoveAsFix(RedundantAsCastWarning error);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual ITreeNode get_ReanalysisDependencyRoot();
    public virtual bool IsAvailable(IUserDataHolder userDataHolder);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual void Execute();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveAssignmentFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private IAssignmentExpression myAssignment;
    public string Text { get; }
    public RemoveAssignmentFix(AssignmentNotUsedWarning error);
    public RemoveAssignmentFix(MeaninglessAssignmentWarning error);
    public RemoveAssignmentFix(AssignmentToSameVariableWarning error);
    public RemoveAssignmentFix(AssignmentIsFullyDiscardedWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static ICSharpExpression SourceExpressionFromCompound(IAssignmentExpression assignmentExpression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveAsyncAndUpdateReturnsFix : ModernScopedQuickFixBase {
    private ICSharpDeclaration myDeclaration;
    private static string TaskCompletedTask;
    private static string TaskFromResult;
    private static string ValueTaskCompletedTask;
    private static string ValueTaskFromResult;
    public string Text { get; }
    public RemoveAsyncAndUpdateReturnsFix(AsyncMethodWithoutAwaitWarning warning);
    public virtual string get_Text();
    private string GetReturnValueString();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static IDeclaredType GetTaskOrValueTaskType(IType returnType, ICSharpTreeNode context);
    private static IType GetReturnType(ICSharpDeclaration declaration);
    private void UpdateReturnedValues(ICSharpDeclaration declaration);
    private void UpdateReturnStatements(IBlock blockBody, IType returnType);
    private void AddReturnCompletedTaskStatement(IType returnType, IStatementsOwner block);
    private ICSharpStatement GetReturnCompletedTaskStatement(IType returnType, ICSharpTreeNode context);
    private ICSharpExpression WrapInTaskFromResult(IType returnType, ICSharpExpression expression);
    private ICSharpExpression GetCompletedTask(IType returnType, ICSharpTreeNode context);
    [PureAttribute]
private static IMethod FindTaskFromResultMethod(IDeclaredType taskType);
    private static IProperty FindCompletedTaskProperty(IDeclaredType taskType);
    [CompilerGeneratedAttribute]
internal static bool <UpdateReturnedValues>g__HasReachableImplicitReturn|14_0(ITreeNode contextNode);
    [CompilerGeneratedAttribute]
private bool <UpdateReturnedValues>g__IsValidExpressionBodyType|14_1(<>c__DisplayClass14_0& );
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveAsyncFix : ModernQuickFixBase {
    [CompilerGeneratedAttribute]
private ICSharpDeclaration <declaration>P;
    public string Text { get; }
    public RemoveAsyncFix(ICSharpDeclaration declaration);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveAttribute2Fix : ModernQuickFixBase {
    [NullableAttribute("2")]
private IAttributesOwnerDeclaration myAttributeOwnerDeclaration;
    [NullableAttribute("2")]
private IAttribute myAttribute;
    public string Text { get; }
    public RemoveAttribute2Fix(ThreadStaticAtInstanceFieldWarning warning);
    public RemoveAttribute2Fix(MultipleEnumeratorCancellationAttributesError error);
    public RemoveAttribute2Fix(EnumeratorCancellationAttributeHasNoEffectWarning warning);
    public RemoveAttribute2Fix(NonStaticConditionalLocalFunctionError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveAttributeFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private IAttributesOwnerDeclaration myAttributesOwnerDeclaration;
    [NullableAttribute("2")]
private IClrTypeName myAttributeNameToRemove;
    private static ClrTypeName ourDefaultMemberAttributeName;
    public string Text { get; }
    public RemoveAttributeFix(CannotUseDefaultMemberAttributeOnTypeWithIndexerError error);
    public RemoveAttributeFix(ExplicitScopedRefAttributeError error);
    public RemoveAttributeFix(UnscopedRefAttributeUnsupportedTargetError error);
    public RemoveAttributeFix(UnscopedRefAttributeUnsupportedMemberTargetError error);
    public RemoveAttributeFix(UnscopedRefAttributeInterfaceImplementationError error);
    public RemoveAttributeFix(UnscopedScopedParameterError error);
    public RemoveAttributeFix(ExplicitReservedAttributeError error);
    public RemoveAttributeFix(DllImportWithGenericError error);
    public RemoveAttributeFix(InputParameterWithOutAttributeError error);
    public RemoveAttributeFix(OutRefParameterMissingInAttributeError error);
    public RemoveAttributeFix(OutAttrOnRefReadonlyParamError error);
    public RemoveAttributeFix(OutParameterWithInAttributeError error);
    private static RemoveAttributeFix();
    public virtual string get_Text();
    private string GetAttributeName();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveAttributesFromLocalFunctionFix : ModernQuickFixBase {
    private ILocalFunctionDeclaration myDeclaration;
    private IAttribute myAttribute;
    public string Text { get; }
    public RemoveAttributesFromLocalFunctionFix(AttributesInLocalFunctionDeclarationError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [NullableContextAttribute("2")]
private static void RemoveAttributeSectionListByAttribute(IAttribute sampleAttribute);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveAttributeSuffixFix : ModernScopedQuickFixBase {
    private IAttribute myAttribute;
    public string Text { get; }
    public string ScopedText { get; }
    public RemoveAttributeSuffixFix(RedundantAttributeSuffixWarning error);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveAwaitFix : ModernQuickFixBase {
    [CompilerGeneratedAttribute]
private ICSharpTreeNode <awaitOwner>P;
    public string Text { get; }
    public RemoveAwaitFix(ICSharpTreeNode awaitOwner);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveBodyFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private ICSharpDeclaration myDeclaration;
    public string Text { get; }
    public RemoveBodyFix(AbstractMemberWithBodyError error);
    public RemoveBodyFix(InterfaceMemberWithBodyError error);
    public RemoveBodyFix(ExternMemberWithBodyError error);
    public RemoveBodyFix(ExternAccessorWithBodyError error);
    public RemoveBodyFix(InterfaceAccessorWithBodyError error);
    public RemoveBodyFix(AbstractAccessorWithBodyError error);
    public RemoveBodyFix(CSharp80LanguageFeature2Error error);
    public RemoveBodyFix(RuntimeAndLanguageVersionDoNotSupportDefaultInterfaceImplementationError error);
    public RemoveBodyFix(RuntimeDoesNotSupportDefaultInterfaceImplementationError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveCallFix : ModernQuickFixBase {
    private ICSharpExpression myExpression;
    public string Text { get; }
    public RemoveCallFix(AbstractBaseMemberCallError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveCaseLabelFix : ModernQuickFixBase {
    private ISwitchCaseLabel myLabel;
    public string Text { get; }
    public RemoveCaseLabelFix(RedundantCaseLabelWarning warning);
    public RemoveCaseLabelFix(RedundantEnumCaseLabelForDefaultSectionWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveCastFix : RemoveCastFixBase {
    private ICastExpression myCastExpression;
    public string Text { get; }
    public string ScopedText { get; }
    public ITreeNode ReanalysisDependencyRoot { get; }
    public RemoveCastFix(RedundantCastWarning error);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual ITreeNode get_ReanalysisDependencyRoot();
    public virtual bool IsAvailable(IUserDataHolder userDataHolder);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual void Execute();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveCastFixBase : ModernScopedQuickFixBase {
    [NullableAttribute("2")]
public ITreeNode ReanalysisDependencyRoot { get; }
    [NullableContextAttribute("2")]
public abstract virtual ITreeNode get_ReanalysisDependencyRoot();
    protected abstract virtual void Execute();
    protected sealed virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    protected void ExecuteEx(ICSharpExpression by, ICSharpExpression toRemove);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveCastToNonNullableTypeFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private ICastExpression myCastExpression;
    public string Text { get; }
    public RemoveCastToNonNullableTypeFix(ConvertingNullableToNonNullableWarning warning);
    public virtual string get_Text();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveCheckedContextFix : ModernScopedQuickFixBase {
    private ITreeNode myContextNode;
    public string Text { get; }
    public string ScopedText { get; }
    public bool IsReanalysisRequired { get; }
    public RemoveCheckedContextFix(RedundantOverflowCheckingContextWarning warning);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool get_IsReanalysisRequired();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveClassConstraint2Fix : RemoveConstraint2FixBase {
    protected string ConstraintText { get; }
    public RemoveClassConstraint2Fix(TypeArgumentIsNotReferenceTypeError error);
    protected virtual string get_ConstraintText();
    protected virtual void RemoveConstraint(ITypeParameterConstraintsClause clause, ITypeParameter typeParameter, ISubstitution substitution);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveClassConstraintFix : RemoveConstraintFixBase {
    public RemoveClassConstraintFix(DuplicateReferenceTypeParameterConstraintError error);
    public RemoveClassConstraintFix(BothValueAndReferenceTypeParameterConstraintError error);
    public RemoveClassConstraintFix(BothUnmanagedAndReferenceTypeParameterConstraintError error);
    public RemoveClassConstraintFix(BothNotNullAndReferenceTypeParameterConstraintError error);
    public RemoveClassConstraintFix(BothBaseClassConstraintAndTypeKindConstraintError error);
    public RemoveClassConstraintFix(BothDefaultAndOtherTypeKindConstraintError error);
    public RemoveClassConstraintFix(BothAllowsRefStructAndReferenceTypeParameterConstraintError error);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveComparisonOfBoolFix : ModernScopedQuickFixBase {
    private IEqualityExpression myEqualityExpression;
    public string Text { get; }
    public string ScopedText { get; }
    public bool IsReanalysisRequired { get; }
    public RemoveComparisonOfBoolFix(RedundantBooleanComparisonWarning error);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool get_IsReanalysisRequired();
    public virtual bool IsAvailable(IUserDataHolder userDataHolder);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static ICSharpExpression Execute(IEqualityExpression equalityExpression);
}
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveConflictingCqrsAttributeFix : ModernQuickFixBase {
    private IAttribute myAttribute;
    private IAttributesOwnerDeclaration myAttributesOwnerDeclaration;
    public string Text { get; }
    public RemoveConflictingCqrsAttributeFix(ConflictCqrsAttributeWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveConstantGuardClauseFix : ModernScopedQuickFixBase {
    [NullableAttribute("2")]
private ICSharpExpression myExpression;
    private ConstantExpressionValue myValue;
    [NullableAttribute("2")]
private ISwitchCaseLabel mySwitchCaseLabel;
    [NullableAttribute("2")]
private ISwitchExpressionArm mySwitchExpressionArm;
    [NullableAttribute("2")]
private IPatternGuardClause myPatternGuardClause;
    public string Text { get; }
    public RemoveConstantGuardClauseFix(ConditionIsAlwaysTrueOrFalseWarning error);
    public RemoveConstantGuardClauseFix(LiftedComparisonAlwaysFalseWarning error);
    public RemoveConstantGuardClauseFix(LiftedEqualsAlwaysConstantWarning error);
    public RemoveConstantGuardClauseFix(LiftedUserEqualsAlwaysConstantWarning error);
    public RemoveConstantGuardClauseFix(ConditionIsAlwaysTrueOrFalseAccordingToNullableAPIContractWarning error);
    [NullableContextAttribute("2")]
private RemoveConstantGuardClauseFix(ICSharpExpression constantExpression, ConstantExpressionValue value);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveConstraint2FixBase : ModernQuickFixBase {
    [CompilerGeneratedAttribute]
private ITypeParameter <TypeParameter>k__BackingField;
    protected ITypeParameter TypeParameter { get; }
    public string Text { get; }
    protected string ConstraintText { get; }
    protected RemoveConstraint2FixBase(ITypeParameter typeParameter);
    [CompilerGeneratedAttribute]
protected ITypeParameter get_TypeParameter();
    public virtual bool IsAvailable(IUserDataHolder cache);
    public virtual string get_Text();
    protected abstract virtual string get_ConstraintText();
    protected abstract virtual void RemoveConstraint(ITypeParameterConstraintsClause clause, ITypeParameter typeParameter, ISubstitution substitution);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveConstraint3FixBase : ModernQuickFixBase {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ITypeParameterConstraint <Constraint>k__BackingField;
    [NullableAttribute("2")]
protected ITypeParameterConstraint Constraint { get; }
    [NullableContextAttribute("2")]
protected RemoveConstraint3FixBase(ITypeParameterConstraint constraint);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected ITypeParameterConstraint get_Constraint();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected abstract virtual bool CheckConstraint(ITypeParameterConstraint constraint);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private void RemoveConstraint(ITypeParameterConstraintsClause constraintsClause);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveConstraintFixBase : ModernQuickFixBase {
    [CompilerGeneratedAttribute]
private bool <processAllClauses>P;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ITypeParameterConstraint <Constraint>k__BackingField;
    [NullableAttribute("2")]
protected ITypeParameterConstraint Constraint { get; }
    public string Text { get; }
    [NullableContextAttribute("2")]
protected RemoveConstraintFixBase(ITypeParameterConstraint constraint, bool processAllClauses);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected ITypeParameterConstraint get_Constraint();
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveConstraintsFix : ModernQuickFixBase {
    private IMethodDeclaration myMethodDeclaration;
    public string Text { get; }
    public RemoveConstraintsFix(OverriddenMethodCannotHasTypeParameterConstraintError error);
    public RemoveConstraintsFix(ExplicitImplementedMethodCannotHasTypeParameterConstraintError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveCtorInitializerFix : ModernQuickFixBase {
    private IConstructorInitializer myInitializer;
    public string Text { get; }
    public RemoveCtorInitializerFix(InitializerInStaticConstructorError error);
    public RemoveCtorInitializerFix(ExternHasConstructorInitializerError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveDefaultConstraintFix : RemoveConstraintFixBase {
    public RemoveDefaultConstraintFix(DuplicateDefaultTypeParameterConstraintError error);
    public RemoveDefaultConstraintFix(BothDefaultAndOtherTypeKindConstraintError error);
    public RemoveDefaultConstraintFix(OverrideDefaultConstraintNotSatisfiedError error);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveDefaultValueFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private ICSharpParameterDeclaration myParameterDeclaration;
    public string Text { get; }
    public RemoveDefaultValueFix(ExtensionMethodThisParameterCannotHaveDefaultValueError error);
    public RemoveDefaultValueFix(OptionalParameterInvalidValueError error);
    public RemoveDefaultValueFix(OptionalParameterRefOutError error);
    public RemoveDefaultValueFix(OptionalParameterIncompatibleTypeError error);
    public RemoveDefaultValueFix(OptionalParameterNotSimpleTypeError error);
    public RemoveDefaultValueFix(OptionalParameterInvalidReferenceValueError error);
    public RemoveDefaultValueFix(ParamsWithDefaultValueError error);
    public RemoveDefaultValueFix(MeaninglessOptionalParameterWarning error);
    public RemoveDefaultValueFix(CSharp40LanguageFeatureError error);
    public RemoveDefaultValueFix(ICSharpParameterDeclaration parameterDeclaration);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveDesignationFix : ModernQuickFixBase {
    private IPatternWithDesignation myPattern;
    public string Text { get; }
    public RemoveDesignationFix(VariableDesignationInOrNotPatternError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveDisallowedNullableAnnotationFix : ModernScopedQuickFixBase {
    private INullableTypeMark myNullableTypeMark;
    public string Text { get; }
    public RemoveDisallowedNullableAnnotationFix(MissingNullableContextForAnnotationWarning warning);
    public virtual string get_Text();
    protected virtual ITreeNode TryGetContextTreeNode();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveDiscardDesignationFix : ModernScopedQuickFixBase {
    private IDiscardDesignation myDiscardDesignation;
    public string Text { get; }
    public RemoveDiscardDesignationFix(RedundantDiscardDesignationWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveDocCommentFix : ModernQuickFixBase {
    private ITreeNode myEnd;
    private ITreeNode myStart;
    public string Text { get; }
    public RemoveDocCommentFix(DocCommentPlacedOnInvalidElementWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveDocCommentTagFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private IXmlTag myTag;
    public string Text { get; }
    public RemoveDocCommentTagFix(DuplicateTypeParameterXmlDocWarning error);
    public RemoveDocCommentTagFix(NotResolvedInDocCommentWarning error);
    public RemoveDocCommentTagFix(NotResolvedTypeParameterInDocCommentWarning error);
    public RemoveDocCommentTagFix(NotResolvedParameterInDocCommentWarning error);
    public RemoveDocCommentTagFix(DuplicateParameterXmlDocWarning error);
    private RemoveDocCommentTagFix(IReference xmlDocReference);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveDoubleNegationFix : ModernQuickFixBase {
    private IUnaryOperatorExpression myExpression;
    private IUnaryOperatorExpression myOperandExpression;
    public string Text { get; }
    public RemoveDoubleNegationFix(DoubleNegationOperatorWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveDuplicateAttributeFix : ModernQuickFixBase {
    private IAttribute myAttribute;
    public string Text { get; }
    public RemoveDuplicateAttributeFix(DuplicateAttributeError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveDuplicateConstraintFix : ModernQuickFixBase {
    private ITypeParameterReference myTypeParameterReference;
    public string Text { get; }
    public RemoveDuplicateConstraintFix(DuplicateTypeParameterConstraintError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveDuplicateInterfaceFix : ModernQuickFixBase {
    private ITypeUsage myTypeUsage;
    public string Text { get; }
    public RemoveDuplicateInterfaceFix(DuplicateInterfaceInExtendsListError error);
    public RemoveDuplicateInterfaceFix(SuperInterfaceIsSuperOfOtherWarning error);
    public RemoveDuplicateInterfaceFix(SuperTypeDeclaredInOtherPartWarning error);
    public RemoveDuplicateInterfaceFix(SuperTypeDeclaredImplicitlyWarning error);
    public RemoveDuplicateInterfaceFix(DuplicateInterfaceWithAnotherTupleNamesError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveEmptyConstructorFix : ModernScopedQuickFixBase {
    private IConstructorDeclaration myRedundantConstructor;
    public string Text { get; }
    public string ScopedText { get; }
    public FileCollectorInfo FileCollectorInfo { get; }
    public bool IsReanalysisRequired { get; }
    public RemoveEmptyConstructorFix(EmptyConstructorWarning error);
    public RemoveEmptyConstructorFix(EmptyStaticConstructorWarning error);
    public RemoveEmptyConstructorFix(ParameterlessConstructorInStructError error);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual FileCollectorInfo get_FileCollectorInfo();
    public virtual bool get_IsReanalysisRequired();
    protected virtual ITreeNode TryGetContextTreeNode();
    public virtual bool IsAvailable(IUserDataHolder userDataHolder);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveEmptyDestructorFix : ModernQuickFixBase {
    private IDestructorDeclaration myRedundantDestructor;
    public string Text { get; }
    public RemoveEmptyDestructorFix(EmptyDestructorWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveEmptyInitializerFix : ModernScopedQuickFixBase {
    private ICollectionElementInitializer myInitializer;
    public string Text { get; }
    public string ScopedText { get; }
    public bool IsReanalysisRequired { get; }
    public RemoveEmptyInitializerFix(CollectionInitializerElementIsEmptyError error);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool get_IsReanalysisRequired();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveEmptyNamespaceFix : ModernQuickFixBase {
    private ICSharpNamespaceDeclaration myDeclaration;
    public string Text { get; }
    public RemoveEmptyNamespaceFix(EmptyNamespaceWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveEmptyPrimaryConstructorFix : ModernScopedQuickFixBase {
    [NullableAttribute("2")]
private IPrimaryConstructorDeclaration myConstructor;
    public string Text { get; }
    public string ScopedText { get; }
    public FileCollectorInfo FileCollectorInfo { get; }
    public bool IsReanalysisRequired { get; }
    public RemoveEmptyPrimaryConstructorFix(EmptyPrimaryConstructorWarning error);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual FileCollectorInfo get_FileCollectorInfo();
    public virtual bool get_IsReanalysisRequired();
    [NullableContextAttribute("2")]
protected virtual ITreeNode TryGetContextTreeNode();
    public virtual bool IsAvailable(IUserDataHolder userDataHolder);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveEmptyRegionFix : ModernScopedQuickFixBase {
    private IStartRegion myStartRegion;
    private IEndRegion myEndRegion;
    public string Text { get; }
    public string ScopedText { get; }
    public bool IsReanalysisRequired { get; }
    public RemoveEmptyRegionFix(EmptyRegionWarning warning);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool get_IsReanalysisRequired();
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveEmptyStatementFix : ModernScopedQuickFixBase {
    private ICSharpStatement myStatement;
    public string Text { get; }
    public RemoveEmptyStatementFix(EmptyStatementWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveEmptyTypeParametersFix : ModernQuickFixBase {
    private ITreeNode myList;
    public string Text { get; }
    public RemoveEmptyTypeParametersFix(EmptyTypeParameterListError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveEventAccessorsFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private IEventDeclaration myEventDeclaration;
    public string Text { get; }
    [NullableContextAttribute("2")]
private RemoveEventAccessorsFix(IEventDeclaration eventDeclaration);
    public RemoveEventAccessorsFix(InterfaceAccessorWithBodyError error);
    public RemoveEventAccessorsFix(CannotHaveEventAccessorsInAbstractEventError error);
    public RemoveEventAccessorsFix(CannotHaveEventAccessorsInExternEventError error);
    public RemoveEventAccessorsFix(CannotHaveEventAccessorsInInterfacesError error);
    public RemoveEventAccessorsFix(EventMustDeclareAdderAndRemoverError error);
    public RemoveEventAccessorsFix(CSharp80LanguageFeature2Error error);
    public RemoveEventAccessorsFix(RuntimeAndLanguageVersionDoNotSupportDefaultInterfaceImplementationError error);
    public RemoveEventAccessorsFix(RuntimeDoesNotSupportDefaultInterfaceImplementationError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveExceptionFix : ModernScopedQuickFixBase {
    [NullableAttribute("2")]
private IThrowStatement myStatement;
    public string Text { get; }
    public string ScopedText { get; }
    public RemoveExceptionFix(PossibleIntendedRethrowWarning error);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveExplicitImplModifiersFix : RemoveModifiersFixBase {
    private static NodeTypeSet ourDisallowedTokenNodeTypes;
    public RemoveExplicitImplModifiersFix(InvalidModifierInExplicitDeclarationError error);
    public RemoveExplicitImplModifiersFix(AccessRightsInPrivateImplementationAccessorError error);
    private static RemoveExplicitImplModifiersFix();
    protected virtual bool IsAvailableEx();
    protected virtual bool MustRemove(TokenNodeType modifierNodeType, TokenNodeType previousNodeType);
    protected virtual bool MustStop(TokenNodeType modifierNodeType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveExplicitParamsArrayCreationFix : ModernScopedQuickFixBase {
    private ICSharpArgument myArgument;
    public string Text { get; }
    public string ScopedText { get; }
    private bool IsCollectionExpression { get; }
    public bool IsReanalysisRequired { get; }
    public RemoveExplicitParamsArrayCreationFix(RedundantExplicitParamsArrayCreationWarning error);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    private bool get_IsCollectionExpression();
    public virtual bool get_IsReanalysisRequired();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveExplicitPropertyFix : ModernScopedQuickFixBase {
    private IPropertyDeclaration myPropertyDeclaration;
    private IParameter myPositionalParameter;
    public string Text { get; }
    public string ScopedText { get; }
    public RemoveExplicitPropertyFix(RedundantExplicitPositionalPropertyDeclarationWarning error);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private void TransferPropertyAttributesToParameter();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveExtendsListFix : ModernQuickFixBase {
    private IExtendsList myExtendsList;
    public string Text { get; }
    public RemoveExtendsListFix(ExtendsListInStaticClassError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveFileScopedNamespaceSemicolonFix : ModernQuickFixBase {
    private ITokenNode mySemicolon;
    public string Text { get; }
    public RemoveFileScopedNamespaceSemicolonFix(MixedNamespaceDeclarationSyntaxError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveForeachFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private ILocalVariable myLocalVariable;
    public string Text { get; }
    public RemoveForeachFix(UnusedVariableWarning error);
    public RemoveForeachFix(UnusedVariableCompilerWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [NullableContextAttribute("2")]
private IForeachStatement GetForeachStatement();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveGlobalUsingFix : ModernScopedNonIncrementalQuickFixBase {
    private IUsingDirective myUsingDirective;
    public string Text { get; }
    public bool IsReanalysisRequired { get; }
    public RemoveGlobalUsingFix(UnusedGlobalUsingDirectiveWarning warning);
    public virtual string get_Text();
    public virtual bool get_IsReanalysisRequired();
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveIfaceMemberModifiersFix : RemoveModifiersFixBase {
    [CompilerGeneratedAttribute]
private CSharpLanguageLevel <LanguageLevel>k__BackingField;
    private CSharpLanguageLevel LanguageLevel { get; }
    public RemoveIfaceMemberModifiersFix(AccessorInInterfaceCannotHaveAccessRightsError error);
    public RemoveIfaceMemberModifiersFix(InvalidInterfaceMemberModifierError error);
    public RemoveIfaceMemberModifiersFix(CSharp80LanguageFeature2Error error);
    public RemoveIfaceMemberModifiersFix(RuntimeAndLanguageVersionDoNotSupportDefaultInterfaceImplementationError error);
    [NullableContextAttribute("2")]
public RemoveIfaceMemberModifiersFix(ITokenNode modifier);
    [CompilerGeneratedAttribute]
private CSharpLanguageLevel get_LanguageLevel();
    protected virtual bool IsAvailableEx();
    protected virtual bool MustRemove(TokenNodeType modifierNodeType, TokenNodeType previousNodeType);
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveIncompatibleAccessibilityModifierFix : object {
    private ITokenNode myModifier1;
    private ITokenNode myModifier2;
    public RemoveIncompatibleAccessibilityModifierFix(IncompatibleAccessRightsModifierError error);
    public RemoveIncompatibleAccessibilityModifierFix(FileLocalTypeWithExplicitAccessibilityError error);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveIncompatibleAccessibilityModifierFix/<CreateBulbItems>d__5")]
public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    private static bool IsValidModifierForTopLevelType(ITokenNode modifier);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveInheritanceFix : object {
    [NullableAttribute("2")]
private IClassLikeDeclaration myDeclaration;
    private List`1<IDeclaredType> myInterfaces;
    public RemoveInheritanceFix(InterfaceUnificationConflictError error);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private IBulbAction <CreateBulbItems>b__3_0(IDeclaredType x);
    [CompilerGeneratedAttribute]
private bool <IsAvailable>b__4_1(IDeclaredType iface);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveInitializationFix : ModernQuickFixBase {
    private IMemberInitializer myInitializer;
    public string Text { get; }
    public RemoveInitializationFix(DuplicateInitializationOfMemberError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveInitializerFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private IVariableInitializer myInitializer;
    public string Text { get; }
    public RemoveInitializerFix(VariableConstantInitializerNotUsedWarning error);
    public RemoveInitializerFix(VariableInitializerNotUsedWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveInterpolatedStringSignFix : ModernScopedQuickFixBase {
    private IInterpolatedStringExpression myExpression;
    public string Text { get; }
    public string ScopedText { get; }
    public bool IsReanalysisRequired { get; }
    public RemoveInterpolatedStringSignFix(RedundantStringInterpolationWarning warning);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool get_IsReanalysisRequired();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.Misc.RemoveDigitSeparatorsAction")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveInvalidDigitSeparatorFix : ModernQuickFixBase {
    private ICSharpLiteralExpression myLiteralExpression;
    private TextRange myInvalidSeparatorsRange;
    public string Text { get; }
    public RemoveInvalidDigitSeparatorFix(InvalidDigitSeparatorError error);
    public RemoveInvalidDigitSeparatorFix(InvalidDigitSeparatorAfterPrefixError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveJumpStatementFix : ModernScopedQuickFixBase {
    [CanBeNullAttribute]
private ICSharpStatement myJumpStatement;
    public string Text { get; }
    public RemoveJumpStatementFix(UnresolvedJumpError error);
    public RemoveJumpStatementFix(ConstantGotoCaseValueExpectedError error);
    public RemoveJumpStatementFix(JumpFromFinallyError error);
    public RemoveJumpStatementFix(YieldStatementInFinallyError error);
    public RemoveJumpStatementFix(YieldReturnStatementInTryCatchError error);
    public RemoveJumpStatementFix(IncorrectIteratorReturnTypeError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [CompilerGeneratedAttribute]
internal static void <ExecutePsiTransaction>g__ReplaceWithValue|11_0(ICSharpStatement statement, ICSharpExpression value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveLineBreaksInInterpolationFix : ModernQuickFixBase {
    private IInterpolatedStringExpression myInterpolatedString;
    public string Text { get; }
    public RemoveLineBreaksInInterpolationFix(StringInterpolationLineBreakError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveLocalFunctionModifiersFix : RemoveModifiersFixBase {
    private static NodeTypeSet ourAllowedNodes;
    public RemoveLocalFunctionModifiersFix(InvalidModifierInLocalFunctionError error);
    private static RemoveLocalFunctionModifiersFix();
    protected virtual bool MustRemove(TokenNodeType modifierNodeType, TokenNodeType previousNodeType);
    protected virtual bool IsAvailableEx();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveMemberInitializerFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private IInitializerOwnerDeclaration myInitializerOwner;
    public static Key InstanceKey;
    public string Text { get; }
    [NullableContextAttribute("2")]
private RemoveMemberInitializerFix(IInitializerOwnerDeclaration initializerOwner);
    public RemoveMemberInitializerFix(CannotHaveEventInitializersInInterfacesError error);
    public RemoveMemberInitializerFix(AbstractEventWithInitializerError error);
    public RemoveMemberInitializerFix(CannotHavePropertyInitializersInInterfacesError error);
    public RemoveMemberInitializerFix(OnlyAutoPropertyCanHaveInitializerError error);
    public RemoveMemberInitializerFix(StructMemberInitializerError error);
    public RemoveMemberInitializerFix(MemberInitializerValueIgnoredWarning error);
    public RemoveMemberInitializerFix(CSharp80LanguageFeature2Error error);
    public RemoveMemberInitializerFix(RuntimeAndLanguageVersionDoNotSupportDefaultInterfaceImplementationError error);
    public RemoveMemberInitializerFix(RuntimeDoesNotSupportDefaultInterfaceImplementationError error);
    private static RemoveMemberInitializerFix();
    public virtual string get_Text();
    internal static string GetKind(IInitializerOwnerDeclaration declaration);
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    internal static void Execute(IInitializerOwnerDeclaration declaration);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveMistakenGetTypeInvocationFix : ModernQuickFixBase {
    private IInvocationExpression myInvocationExpression;
    [NullableAttribute("2")]
private ICSharpExpression myQualifierExpression;
    public string Text { get; }
    public RemoveMistakenGetTypeInvocationFix(PossibleMistakenCallToGetTypeWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveModifierFix : ModernScopedQuickFixBase {
    [NullableAttribute("2")]
private ITokenNode myModifierToRemove;
    public string Text { get; }
    public RemoveModifierFix(InvalidModifierError error);
    public RemoveModifierFix(DuplicateModifiersError error);
    public RemoveModifierFix(DuplicateParameterModeModifierError error);
    public RemoveModifierFix(RefMisplacedInModifiersListError error);
    public RemoveModifierFix(RefModifierInIteratorOrAsyncError error);
    public RemoveModifierFix(RefReadonlyMisplacedInModifiersListError error);
    public RemoveModifierFix(InvalidAccessorModifierError error);
    public RemoveModifierFix(StaticReadonlyStructMemberError error);
    public RemoveModifierFix(ReadonlyFieldLikeEventError error);
    public RemoveModifierFix(RedundantReadonlyModifierWarning error);
    public RemoveModifierFix(UnscopedScopedParameterError error);
    public RemoveModifierFix(BadParameterModifiersOrderError error);
    public RemoveModifierFix(RedundantScopedParameterModifierWarning warning);
    public RemoveModifierFix(CSharp110LanguageFeatureError error);
    public RemoveModifierFix(ReadonlyAccessorInReadonlyMemberError error);
    public RemoveModifierFix(ReadonlyAccessorInMemberWithSingleAccessorError error);
    public RemoveModifierFix(ReadonlyAutoPropertyWithSetAccessorError error);
    public RemoveModifierFix(AutoPropertyWithReadonlySetAccessorError error);
    public RemoveModifierFix(BothAccessorsReadonlyError error);
    public RemoveModifierFix(ReadonlyInitAccessorError error);
    public RemoveModifierFix(OverridableMemberCannotBeReadonlyError error);
    public RemoveModifierFix(CSharp72LanguageFeatureError error);
    public RemoveModifierFix(CSharp80LanguageFeatureError error);
    public RemoveModifierFix(CSharp80LanguageFeature2Error error);
    public RemoveModifierFix(RuntimeAndLanguageVersionDoNotSupportDefaultInterfaceImplementationError error);
    public RemoveModifierFix(PartialMethodMustHaveAccessModifierError error);
    public RemoveModifierFix(PartialModifierUsageError error);
    public RemoveModifierFix(RefFieldInNonRefStructError error);
    public RemoveModifierFix(RefFieldCannotReferToRefStructError error);
    public RemoveModifierFix(InvalidScopedLocalTypeOrReferenceKindError error);
    public RemoveModifierFix(ExternHasConstructorInitializerError error);
    [NullableContextAttribute("2")]
public RemoveModifierFix(ITokenNode modifierNode);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
protected virtual ITreeNode TryGetContextTreeNode();
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveModifiersFixBase : ModernScopedQuickFixBase {
    private DocumentOffset myOffset;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ICSharpModifiersOwnerDeclaration <Declaration>k__BackingField;
    [NullableAttribute("2")]
protected ICSharpModifiersOwnerDeclaration Declaration { get; }
    public string Text { get; }
    public string ScopedText { get; }
    public bool IsReanalysisRequired { get; }
    public FileCollectorInfo FileCollectorInfo { get; }
    [NullableContextAttribute("2")]
protected RemoveModifiersFixBase(ITokenNode modifier);
    [NullableContextAttribute("2")]
protected RemoveModifiersFixBase(ICSharpModifiersOwnerDeclaration declaration);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected ICSharpModifiersOwnerDeclaration get_Declaration();
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool get_IsReanalysisRequired();
    public sealed virtual FileCollectorInfo get_FileCollectorInfo();
    [NullableContextAttribute("2")]
protected sealed virtual ITreeNode TryGetContextTreeNode();
    public sealed virtual bool IsAvailable(IUserDataHolder userDataHolder);
    protected virtual bool IsAvailableEx();
    [PureAttribute]
protected abstract virtual bool MustRemove(TokenNodeType modifierNodeType, TokenNodeType previousNodeType);
    [PureAttribute]
protected virtual bool MustStop(TokenNodeType modifierNodeType);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    protected virtual void Execute();
    [PureAttribute]
protected bool HasModifier(IModifiersListOwner ownerNode);
    protected DocumentOffset RemoveModifier(IModifiersListOwner ownerNode);
    [NullableContextAttribute("2")]
protected IModifiersListOwner GetModifiersOwnerNode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveNewConstraint2Fix : RemoveConstraint2FixBase {
    protected string ConstraintText { get; }
    public RemoveNewConstraint2Fix(TypeArgumentHasNoDefaultConstructorError error);
    protected virtual string get_ConstraintText();
    protected virtual void RemoveConstraint(ITypeParameterConstraintsClause clause, ITypeParameter typeParameter, ISubstitution substitution);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveNewConstraintFix : RemoveConstraintFixBase {
    public RemoveNewConstraintFix(CannotSpecifyConstructorConstraintForValueTypeError error);
    public RemoveNewConstraintFix(DuplicateConstructorTypeParameterConstraintError error);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveNotNullableTypeKindConstraintFix : ModernQuickFixBase {
    private ITypeParameterConstraint myNonNullableTypeKindConstraint;
    public string Text { get; }
    public RemoveNotNullableTypeKindConstraintFix(RedundantNullableAnnotationOnTypeConstraintHasNonNullableTypeKindWarning warning);
    public RemoveNotNullableTypeKindConstraintFix(RedundantNotNullConstraintWarning warning);
    public virtual bool IsAvailable(IUserDataHolder cache);
    public virtual string get_Text();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveNotNullConstraintFix : RemoveConstraintFixBase {
    public RemoveNotNullConstraintFix(DuplicateNotNullTypeParameterConstraintError error);
    public RemoveNotNullConstraintFix(BothNotNullAndValueTypeParameterConstraintError error);
    public RemoveNotNullConstraintFix(BothNotNullAndReferenceTypeParameterConstraintError error);
    public RemoveNotNullConstraintFix(BothNotNullAndUnmanagedTypeParameterConstraintError error);
    public RemoveNotNullConstraintFix(BothDefaultAndOtherTypeKindConstraintError error);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveNullableAnnotationFix : ModernScopedQuickFixBase {
    private ITreeNode myNullableAnnotationOwner;
    public string Text { get; }
    private RemoveNullableAnnotationFix(ITreeNode nullableAnnotationOwner);
    public RemoveNullableAnnotationFix(RedundantNullableAnnotationOnTypeConstraintHasNonNullableTypeKindWarning warning);
    public RemoveNullableAnnotationFix(RedundantNullableAnnotationOnTypeConstraintHasNonNullableBaseTypeWarning warning);
    public RemoveNullableAnnotationFix(RedundantNullableAnnotationOnReferenceTypeConstraintWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveNullableDirectiveFixBase : ModernScopedNonIncrementalQuickFixBase {
    [CompilerGeneratedAttribute]
private INullableDirective <nullableDirective>P;
    public bool IsReanalysisRequired { get; }
    [NullableAttribute("2")]
public ITreeNode ReanalysisDependencyRoot { get; }
    protected RemoveNullableDirectiveFixBase(INullableDirective nullableDirective);
    public virtual bool get_IsReanalysisRequired();
    [NullableContextAttribute("2")]
public virtual ITreeNode get_ReanalysisDependencyRoot();
    public virtual bool IsAvailable(IUserDataHolder userDataHolder);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveNullableTypeMarkFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private INullableTypeUsage myNullableTypeUsage;
    private bool myIsRedundant;
    public string Text { get; }
    public RemoveNullableTypeMarkFix(RedundantNullableTypeMarkWarning warning);
    public RemoveNullableTypeMarkFix(NullableReferenceTypeInTypeofExpressionError error);
    public RemoveNullableTypeMarkFix(IsNullableTypeError error);
    public RemoveNullableTypeMarkFix(AsNullableTypeError error);
    public RemoveNullableTypeMarkFix(NullableAnnonatationInObjectCreationExpressionError error);
    public RemoveNullableTypeMarkFix(NullableMarkOnNullableTypeParameterError error);
    public RemoveNullableTypeMarkFix(NullableReferenceTypeInUsingAliasError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveNullableWarningSuppressionFix : ModernQuickFixBase {
    [NotNullAttribute]
private ISuppressNullableWarningExpression myExpression;
    public string Text { get; }
    public RemoveNullableWarningSuppressionFix(IllegalNullableWarningSuppressionError error);
    public RemoveNullableWarningSuppressionFix(DuplicateNullSuppressionError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveOperationContractAttributeFix : ModernQuickFixBase {
    private IMethodDeclaration myMethodDeclaration;
    public string Text { get; }
    public RemoveOperationContractAttributeFix(OperationContractWithoutServiceContractWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static bool IsOperationContractAttribute(IAttribute arg);
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveOverrideFix : ModifierFixBase {
    protected string ModifiersText { get; }
    public string Text { get; }
    public RemoveOverrideFix(NoSuitableMemberForOverrideError error);
    public RemoveOverrideFix(OverrideMemberCannotBeNewError error);
    protected virtual string get_ModifiersText();
    public virtual string get_Text();
    protected virtual void SetModifiers(IModifiersOwnerDeclaration declaration);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveParams2Fix : ModernQuickFixBase {
    private IOverridableMember myBaseMember;
    public string Text { get; }
    public RemoveParams2Fix(BaseMemberHasParamsWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveParamsFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private IParameter myParameter;
    public string Text { get; }
    public RemoveParamsFix(RedundantParamsWarning error);
    public RemoveParamsFix(AnonymousMethodParameterParamsError error);
    public RemoveParamsFix(NotImplementParamsDiffersError error);
    public RemoveParamsFix(ExtensionMethodParameterCannotBeParamsError error);
    public RemoveParamsFix(ParamsMustBeLastError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveParamTypeSpecificationFix : ModernScopedQuickFixBase {
    [NullableAttribute("2")]
private ILambdaExpression myLambdaExpression;
    public string Text { get; }
    public string ScopedText { get; }
    [NullableAttribute("2")]
public ITreeNode ReanalysisDependencyRoot { get; }
    public RemoveParamTypeSpecificationFix(RedundantLambdaParameterTypeWarning error);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    [NullableContextAttribute("2")]
public virtual ITreeNode get_ReanalysisDependencyRoot();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public static void Execute(ILambdaExpression lambdaExpression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemovePartialFix : RemoveModifiersFixBase {
    public string Text { get; }
    public string ScopedText { get; }
    public RemovePartialFix(PartialTypeWithSinglePartWarning error);
    public RemovePartialFix(DeclarationCannotBePartialError error);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    protected virtual bool MustRemove(TokenNodeType modifierNodeType, TokenNodeType previousNodeType);
    protected virtual void Execute();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemovePolymorphicFix : RemoveModifiersFixBase {
    private bool myRemoveOverrideAndSealed;
    public RemovePolymorphicFix(StaticClassCannotBeAbstractError error);
    public RemovePolymorphicFix(NonOverrideMemberCannotBeSealedError error);
    public RemovePolymorphicFix(NonPolymorphicMemberCannotBeAbstractError error);
    public RemovePolymorphicFix(NonPolymorphicMemberCannotBeOverrideError error);
    public RemovePolymorphicFix(NonPolymorphicMemberCannotBeVirtualError error);
    public RemovePolymorphicFix(NonPolymorphicMemberCannotBeSealedError error);
    public RemovePolymorphicFix(VirtualMemberInSealedClassError error);
    public RemovePolymorphicFix(VirtualMemberInStructError error);
    public RemovePolymorphicFix(StaticClassCannotBeSealedError error);
    public RemovePolymorphicFix(SealedMemberInStructError error);
    protected virtual bool MustRemove(TokenNodeType modifierNodeType, TokenNodeType previousNodeType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemovePostfixOperatorFix : ModernQuickFixBase {
    [NullableAttribute("2")]
protected ICSharpExpression myExpression;
    [NullableAttribute("2")]
private ICSharpExpression Operator { get; }
    private OpType OperatorType { get; }
    public string Text { get; }
    public RemovePostfixOperatorFix(ModifiedValueNotUsedWarning error);
    [NullableContextAttribute("2")]
private ICSharpExpression get_Operator();
    private OpType get_OperatorType();
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemovePreprocessorFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private IPreprocessorDirective myPreprocessorDirective;
    public string Text { get; }
    public RemovePreprocessorFix(PreprocessorInStringInterpolationError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemovePropertyAssignmentFix : ModernScopedQuickFixBase {
    private IPropertyAssignment myPropertyAssignment;
    public string Text { get; }
    public string ScopedText { get; }
    public FileCollectorInfo FileCollectorInfo { get; }
    public bool IsReanalysisRequired { get; }
    public RemovePropertyAssignmentFix(RedundantAttributeUsagePropertyWarning error);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual FileCollectorInfo get_FileCollectorInfo();
    public virtual bool get_IsReanalysisRequired();
    protected virtual ITreeNode TryGetContextTreeNode();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemovePropertyPatternClauseFix : ModernQuickFixBase {
    private IPropertyPatternClause myPropertyPatternClause;
    public string Text { get; }
    public RemovePropertyPatternClauseFix(RedundantPropertyPatternClauseWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveQualificationFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private IInterfaceQualificationOwner myDeclaration;
    public string Text { get; }
    public RemoveQualificationFix(ExplicitImplementationInInterfaceError error);
    public RemoveQualificationFix(CSharp80LanguageFeature2Error error);
    public RemoveQualificationFix(RuntimeAndLanguageVersionDoNotSupportDefaultInterfaceImplementationError error);
    public RemoveQualificationFix(RuntimeDoesNotSupportDefaultInterfaceImplementationError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveRecordClassKeywordFix : ModernScopedQuickFixBase {
    private ITokenNode myClassKeyword;
    public string Text { get; }
    public string ScopedText { get; }
    public RemoveRecordClassKeywordFix(RedundantRecordClassKeywordWarning error);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveRedundantAbstractFix : RemoveModifiersFixBase {
    public string Text { get; }
    public string ScopedText { get; }
    public RemoveRedundantAbstractFix(RedundantAbstractModifierWarning error);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    protected virtual bool MustRemove(TokenNodeType modifierNodeType, TokenNodeType previousNodeType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveRedundantArgumentValueFix : ModernScopedQuickFixBase {
    private ICSharpArgument myArgument;
    private bool myRemoveAllArgumentsAfter;
    public string Text { get; }
    public string ScopedText { get; }
    public ITreeNode ReanalysisDependencyRoot { get; }
    public RemoveRedundantArgumentValueFix(RedundantArgumentDefaultValueWarning error);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual ITreeNode get_ReanalysisDependencyRoot();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <ExecutePsiTransaction>b__11_0(ICSharpArgument argument);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveRedundantArrayCreationExpressionFix : ModernScopedQuickFixBase {
    private static Key ourInstanceKey;
    [NullableAttribute("2")]
private IArrayCreationExpression myExpression;
    public string Text { get; }
    public string ScopedText { get; }
    public bool IsReanalysisRequired { get; }
    public RemoveRedundantArrayCreationExpressionFix(CoVariantArrayConversionWarning warning);
    public RemoveRedundantArrayCreationExpressionFix(RedundantArrayCreationExpressionWarning warning);
    private static RemoveRedundantArrayCreationExpressionFix();
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool get_IsReanalysisRequired();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveRedundantArrayTypeFix : ModernScopedQuickFixBase {
    private IArrayCreationExpression myExpression;
    public string Text { get; }
    public string ScopedText { get; }
    public ITreeNode ReanalysisDependencyRoot { get; }
    public RemoveRedundantArrayTypeFix(RedundantExplicitArrayCreationWarning error);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual ITreeNode get_ReanalysisDependencyRoot();
    public virtual bool IsAvailable(IUserDataHolder userDataHolder);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveRedundantAttributeFix : ModernScopedQuickFixBase {
    private IAttribute myRedundantAttribute;
    public string Text { get; }
    public RemoveRedundantAttributeFix(RedundantNullableFlowAttributeWarning warning);
    public RemoveRedundantAttributeFix(RedundantNullnessAttributeWithNullableReferenceTypesWarning warning);
    private RemoveRedundantAttributeFix(IAttribute redundantAttribute);
    public virtual string get_Text();
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    protected virtual IScopedFixingStrategy GetScopedFixingStrategy(ISolution solution, IHighlighting highlighting);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveRedundantBaseFix : ModernScopedQuickFixBase {
    private IConstructorInitializer myInitializer;
    public string Text { get; }
    public string ScopedText { get; }
    public FileCollectorInfo FileCollectorInfo { get; }
    public bool IsReanalysisRequired { get; }
    public RemoveRedundantBaseFix(RedundantBaseConstructorCallWarning error);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual FileCollectorInfo get_FileCollectorInfo();
    public virtual bool get_IsReanalysisRequired();
    protected virtual ITreeNode TryGetContextTreeNode();
    public virtual bool IsAvailable(IUserDataHolder userDataHolder);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveRedundantBracesFix : ModernScopedQuickFixBase {
    [NullableAttribute("2")]
private ICollectionElementInitializer myElementInitializer;
    public string Text { get; }
    public string ScopedText { get; }
    public bool IsReanalysisRequired { get; }
    public RemoveRedundantBracesFix(RedundantCollectionInitializerElementBracesWarning error);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool get_IsReanalysisRequired();
    public virtual bool IsAvailable(IUserDataHolder userDataHolder);
    [NullableContextAttribute("2")]
protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveRedundantCallerArgumentExpressionValueFix : ModernScopedQuickFixBase {
    private ICSharpArgument myArgument;
    public string Text { get; }
    public string ScopedText { get; }
    public bool IsReanalysisRequired { get; }
    public RemoveRedundantCallerArgumentExpressionValueFix(RedundantCallerArgumentExpressionDefaultValueWarning error);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool get_IsReanalysisRequired();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveRedundantCatchClauseFix : ModernScopedQuickFixBase {
    [NullableAttribute("2")]
private ICatchClause myClause;
    public string Text { get; }
    public string ScopedText { get; }
    public bool IsReanalysisRequired { get; }
    [NullableContextAttribute("2")]
private RemoveRedundantCatchClauseFix(ICatchClause catchClause);
    public RemoveRedundantCatchClauseFix(RedundantCatchClauseWarning error);
    public RemoveRedundantCatchClauseFix(PreviousCatchClauseHandlesThisTypeError error);
    public RemoveRedundantCatchClauseFix(CatchClauseCannotFollowGeneralCatchClauseError error);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool get_IsReanalysisRequired();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveRedundantCommentsFix : ModernQuickFixBase {
    private ITreeNode[] myTreeNodesToRemove;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public string Text { get; }
    public RemoveRedundantCommentsFix(RedundantDisableWarningCommentWarning redundantDisableWarningCommentWarning);
    [CompilerGeneratedAttribute]
public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveRedundantConfigureAwaitFix : ModernScopedQuickFixBase {
    private IAwaitReferencesOwner myAwaitOwner;
    public string Text { get; }
    public string ScopedText { get; }
    public RemoveRedundantConfigureAwaitFix(RedundantConfigureAwaitWarning error);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
protected virtual ITreeNode TryGetContextTreeNode();
    private static void RemoveConfigureAwaitTrue(IAwaitReferencesOwner awaitOwner);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveRedundantCqrsAttributeFix : ModernScopedQuickFixBase {
    private IAttribute myAttribute;
    public string Text { get; }
    public string ScopedText { get; }
    public RemoveRedundantCqrsAttributeFix(RedundantCqrsAttributeWarning warning);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveRedundantDeclarationSemicolonFix : ModernScopedQuickFixBase {
    private ITokenNode mySemicolon;
    public string Text { get; }
    public string ScopedText { get; }
    public FileCollectorInfo FileCollectorInfo { get; }
    public bool IsReanalysisRequired { get; }
    public RemoveRedundantDeclarationSemicolonFix(RedundantDeclarationSemicolonWarning error);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual FileCollectorInfo get_FileCollectorInfo();
    public virtual bool get_IsReanalysisRequired();
    protected virtual ITreeNode TryGetContextTreeNode();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveRedundantDelegateCallFix : ModernScopedQuickFixBase {
    private IObjectCreationExpression myExpression;
    public string Text { get; }
    public string ScopedText { get; }
    public ITreeNode ReanalysisDependencyRoot { get; }
    public RemoveRedundantDelegateCallFix(RedundantDelegateCreationWarning error);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual ITreeNode get_ReanalysisDependencyRoot();
    public virtual bool IsAvailable(IUserDataHolder userDataHolder);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveRedundantDictionaryContainsKeyBeforeAddingFix : ModernScopedQuickFixBase {
    private IIfStatement myIfStatement;
    private IInvocationExpression myContainsKeyInvocation;
    private ICSharpExpression myDictionaryExpression;
    private ICSharpExpression myKeyExpression;
    private ICSharpExpression myValueExpression;
    public string Text { get; }
    public RemoveRedundantDictionaryContainsKeyBeforeAddingFix(RedundantDictionaryContainsKeyBeforeAddingWarning warning);
    public virtual string get_Text();
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveRedundantElseFix : ModernScopedQuickFixBase {
    [CompilerGeneratedAttribute]
private IIfStatement <ifStatement>P;
    public string Text { get; }
    public string ScopedText { get; }
    public ITreeNode ReanalysisDependencyRoot { get; }
    public RemoveRedundantElseFix(IIfStatement ifStatement);
    public RemoveRedundantElseFix(RedundantIfElseBlockWarning error);
    public RemoveRedundantElseFix(RedundantIfElseKeywordWarning error);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual ITreeNode get_ReanalysisDependencyRoot();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public void Execute();
    [NullableContextAttribute("2")]
[PureAttribute]
private static bool IsEmptyBlock(ICSharpStatement statement);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveRedundantEnumerableCastFix : ModernScopedQuickFixBase {
    private IReferenceExpression myReferenceExpression;
    public string Text { get; }
    public string ScopedText { get; }
    public ITreeNode ReanalysisDependencyRoot { get; }
    public RemoveRedundantEnumerableCastFix(RedundantEnumerableCastCallWarning error);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual ITreeNode get_ReanalysisDependencyRoot();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveRedundantExplicitArraySizeFix : ModernQuickFixBase {
    private ICSharpExpression mySizeExpression;
    public string Text { get; }
    public RemoveRedundantExplicitArraySizeFix(RedundantExplicitArraySizeWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveRedundantFieldNameFix : ModernScopedQuickFixBase {
    private IAnonymousMemberDeclaration myDeclaration;
    public string Text { get; }
    public string ScopedText { get; }
    public bool IsReanalysisRequired { get; }
    public RemoveRedundantFieldNameFix(RedundantAnonymousTypePropertyNameWarning error);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool get_IsReanalysisRequired();
    public virtual bool IsAvailable(IUserDataHolder userDataHolder);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveRedundantFinallyFix : ModernScopedQuickFixBase {
    private ITryStatement myTryStatement;
    public string Text { get; }
    public string ScopedText { get; }
    public bool IsReanalysisRequired { get; }
    public RemoveRedundantFinallyFix(RedundantEmptyFinallyBlockWarning error);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool get_IsReanalysisRequired();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveRedundantFixedPointerDeclarationFix : ModernScopedQuickFixBase {
    private IUnsafeCodeFixedPointerDeclaration myFixedPointerDeclaration;
    private IReadOnlyList`1<IReferenceExpression> myUsages;
    public string Text { get; }
    public string ScopedText { get; }
    public bool IsReanalysisRequired { get; }
    public RemoveRedundantFixedPointerDeclarationFix(RedundantFixedPointerDeclarationWarning warning);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool get_IsReanalysisRequired();
    protected virtual ITreeNode TryGetContextTreeNode();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveRedundantInitializerFix : ModernScopedQuickFixBase {
    private ICreationExpressionInitializer myInitializer;
    public string Text { get; }
    public string ScopedText { get; }
    public ITreeNode ReanalysisDependencyRoot { get; }
    public RemoveRedundantInitializerFix(ObjectOrCollectionInitializerInDelegateCreationError error);
    public RemoveRedundantInitializerFix(RedundantEmptyObjectOrCollectionInitializerWarning error);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual ITreeNode get_ReanalysisDependencyRoot();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveRedundantJumpStatementFix : ModernScopedQuickFixBase {
    private ICSharpStatement myStatement;
    public string Text { get; }
    public string ScopedText { get; }
    [NullableAttribute("2")]
public ITreeNode ReanalysisDependencyRoot { get; }
    public RemoveRedundantJumpStatementFix(RedundantJumpStatementWarning error);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    [NullableContextAttribute("2")]
public virtual ITreeNode get_ReanalysisDependencyRoot();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveRedundantMemberInitializerFix : ModernScopedNonIncrementalQuickFixBase {
    [NullableAttribute("2")]
private IInitializerOwnerDeclaration myInitializerOwner;
    public string Text { get; }
    public string ScopedText { get; }
    public bool IsReanalysisRequired { get; }
    [NullableContextAttribute("2")]
private RemoveRedundantMemberInitializerFix(IInitializerOwnerDeclaration initializerOwner);
    public RemoveRedundantMemberInitializerFix(RedundantDefaultMemberInitializerWarning error);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool get_IsReanalysisRequired();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveRedundantNullableDirectiveFix : RemoveNullableDirectiveFixBase {
    public string Text { get; }
    public string ScopedText { get; }
    public RemoveRedundantNullableDirectiveFix(RedundantNullableDirectiveWarning warning);
    public virtual string get_Text();
    public virtual string get_ScopedText();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveRedundantNullableFix : ModernScopedQuickFixBase {
    private IObjectCreationExpression myExpression;
    public string Text { get; }
    public string ScopedText { get; }
    public bool IsReanalysisRequired { get; }
    public RemoveRedundantNullableFix(RedundantExplicitNullableCreationWarning error);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool get_IsReanalysisRequired();
    public virtual bool IsAvailable(IUserDataHolder userDataHolder);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveRedundantNullableWarningSuppressionFix : ModernScopedQuickFixBase {
    private ISuppressNullableWarningExpression mySuppressNullableWarningExpression;
    public string Text { get; }
    public RemoveRedundantNullableWarningSuppressionFix(RedundantSuppressNullableWarningExpressionWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveRedundantNullCoalesceAssignmentFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private ICSharpExpression myRightOperand;
    public string Text { get; }
    public RemoveRedundantNullCoalesceAssignmentFix(NullCoalescingRightOperandIsAlwaysNullWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveRedundantParens2Fix : ModernScopedQuickFixBase {
    private ILambdaSignature myLambdaSignature;
    public string Text { get; }
    public string ScopedText { get; }
    public bool IsReanalysisRequired { get; }
    public RemoveRedundantParens2Fix(RedundantLambdaSignatureParenthesesWarning error);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool get_IsReanalysisRequired();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveRedundantParensFix : ModernScopedQuickFixBase {
    private IAttribute myAttribute;
    public string Text { get; }
    public string ScopedText { get; }
    public FileCollectorInfo FileCollectorInfo { get; }
    public bool IsReanalysisRequired { get; }
    public RemoveRedundantParensFix(RedundantAttributeParenthesesWarning error);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual FileCollectorInfo get_FileCollectorInfo();
    public virtual bool get_IsReanalysisRequired();
    protected virtual ITreeNode TryGetContextTreeNode();
    public virtual bool IsAvailable(IUserDataHolder userDataHolder);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.RemoveParenthesisAction")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveRedundantParenthesesFix : ModernScopedQuickFixBase {
    private IParenthesizedExpression myParenthesizedExpression;
    public string Text { get; }
    public string ScopedText { get; }
    public bool IsReanalysisRequired { get; }
    public RemoveRedundantParenthesesFix(RemoveRedundantParenthesesWarning warning);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool get_IsReanalysisRequired();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveRedundantParenthesesInSwitchWithTupleFix : ModernScopedQuickFixBase {
    private ISwitchStatement mySwitchStatement;
    public string Text { get; }
    public bool IsReanalysisRequired { get; }
    public RemoveRedundantParenthesesInSwitchWithTupleFix(RemoveRedundantParenthesesInSwitchWithTupleWarning warning);
    public virtual string get_Text();
    public virtual bool get_IsReanalysisRequired();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveRedundantPatternParenthesesFix : ModernScopedQuickFixBase {
    private IParenthesizedPattern myParenthesizedPattern;
    public string Text { get; }
    public bool IsReanalysisRequired { get; }
    public RemoveRedundantPatternParenthesesFix(RedundantPatternParenthesesWarning error);
    public virtual string get_Text();
    public virtual bool get_IsReanalysisRequired();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveRedundantPrimaryBaseFix : ModernScopedQuickFixBase {
    [NullableAttribute("2")]
private IExtendedType myInitializer;
    public string Text { get; }
    public string ScopedText { get; }
    public FileCollectorInfo FileCollectorInfo { get; }
    public bool IsReanalysisRequired { get; }
    public RemoveRedundantPrimaryBaseFix(RedundantPrimaryBaseConstructorCallWarning error);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual FileCollectorInfo get_FileCollectorInfo();
    public virtual bool get_IsReanalysisRequired();
    [NullableContextAttribute("2")]
protected virtual ITreeNode TryGetContextTreeNode();
    public virtual bool IsAvailable(IUserDataHolder userDataHolder);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveRedundantQueryOrderByAscendingKeywordFix : ModernScopedQuickFixBase {
    private IQueryOrdering myQueryOrdering;
    public string Text { get; }
    public string ScopedText { get; }
    public bool IsReanalysisRequired { get; }
    public RemoveRedundantQueryOrderByAscendingKeywordFix(RedundantQueryOrderByAscendingKeywordWarning error);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool get_IsReanalysisRequired();
    public virtual bool IsAvailable(IUserDataHolder userDataHolder);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveRedundantRangeBoundFix : ModernScopedQuickFixBase {
    private ICSharpExpression myBoundExpression;
    public string Text { get; }
    public string ScopedText { get; }
    public bool IsReanalysisRequired { get; }
    public RemoveRedundantRangeBoundFix(RedundantRangeBoundWarning warning);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool get_IsReanalysisRequired();
    protected virtual ITreeNode TryGetContextTreeNode();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveRedundantStringFormatFix : ModernScopedQuickFixBase {
    private IReferenceExpression myReferenceExpression;
    private bool myIsTrivial;
    public string Text { get; }
    public string ScopedText { get; }
    public bool IsReanalysisRequired { get; }
    public RemoveRedundantStringFormatFix(RedundantStringFormatCallWarning warning);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool get_IsReanalysisRequired();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveRedundantSwitchSectionFix : ModernScopedQuickFixBase {
    private ISwitchSection mySwitchSection;
    public string Text { get; }
    public string ScopedText { get; }
    public bool IsReanalysisRequired { get; }
    public RemoveRedundantSwitchSectionFix(RedundantEmptySwitchSectionWarning warning);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool get_IsReanalysisRequired();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveRedundantToCharArrayFix : ModernScopedQuickFixBase {
    private IReferenceExpression myExpression;
    public string Text { get; }
    public string ScopedText { get; }
    public bool IsReanalysisRequired { get; }
    public RemoveRedundantToCharArrayFix(RedundantStringToCharArrayCallWarning error);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool get_IsReanalysisRequired();
    public virtual bool IsAvailable(IUserDataHolder userDataHolder);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveRedundantTrueFix : ModernScopedQuickFixBase {
    private IExpression myCondition;
    public string Text { get; }
    public string ScopedText { get; }
    public bool IsReanalysisRequired { get; }
    public RemoveRedundantTrueFix(ForStatementConditionIsTrueWarning error);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool get_IsReanalysisRequired();
    public virtual bool IsAvailable(IUserDataHolder userDataHolder);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveRedundantTupleComponentNameFix : ModernScopedQuickFixBase {
    private ICSharpIdentifier myIdentifier;
    public string Text { get; }
    public string ScopedText { get; }
    public bool IsReanalysisRequired { get; }
    public RemoveRedundantTupleComponentNameFix(TupleElementNameIsIgnoredWarning error);
    public RemoveRedundantTupleComponentNameFix(TupleEqualityOperatorLiteralNameMismatchWarning error);
    public RemoveRedundantTupleComponentNameFix(RedundantExplicitTupleComponentNameWarning error);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool get_IsReanalysisRequired();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveRedundantTypeArgsFix : ModernScopedQuickFixBase {
    [NullableAttribute("2")]
private IReferenceExpression myExpression;
    public string Text { get; }
    public string ScopedText { get; }
    [NullableAttribute("2")]
public ITreeNode ReanalysisDependencyRoot { get; }
    public RemoveRedundantTypeArgsFix(RedundantTypeArgumentsOfMethodWarning error);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    [NullableContextAttribute("2")]
public virtual ITreeNode get_ReanalysisDependencyRoot();
    public virtual bool IsAvailable(IUserDataHolder userDataHolder);
    [NullableContextAttribute("2")]
protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveRedundantUnderlyingTypeFix : ModernScopedQuickFixBase {
    private ITypeUsage myNode;
    public string Text { get; }
    public string ScopedText { get; }
    public FileCollectorInfo FileCollectorInfo { get; }
    public bool IsReanalysisRequired { get; }
    public RemoveRedundantUnderlyingTypeFix(EnumUnderlyingTypeIsIntWarning error);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual FileCollectorInfo get_FileCollectorInfo();
    public virtual bool get_IsReanalysisRequired();
    protected virtual ITreeNode TryGetContextTreeNode();
    public virtual bool IsAvailable(IUserDataHolder userDataHolder);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveRedundantUnsafeFix : ModernScopedNonIncrementalQuickFixBase {
    private IUnsafeCodeUnsafeStatement myStatement;
    public string Text { get; }
    public string ScopedText { get; }
    public bool IsReanalysisRequired { get; }
    public RemoveRedundantUnsafeFix(RedundantUnsafeStatementWarning error);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool get_IsReanalysisRequired();
    public virtual bool IsAvailable(IUserDataHolder userDataHolder);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveRedundantUnsafeInUsingDirectiveFix : ModernScopedNonIncrementalQuickFixBase {
    private IUsingDirective myUsingDirective;
    public string Text { get; }
    public string ScopedText { get; }
    public bool IsReanalysisRequired { get; }
    public RemoveRedundantUnsafeInUsingDirectiveFix(RedundantUnsafeInUsingDirectiveWarning warning);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool get_IsReanalysisRequired();
    public virtual bool IsAvailable(IUserDataHolder userDataHolder);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveRedundantVerbatimPrefixFix : ModernScopedQuickFixBase {
    private ICSharpIdentifier myIdentifier;
    public string Text { get; }
    public string ScopedText { get; }
    public bool IsReanalysisRequired { get; }
    public RemoveRedundantVerbatimPrefixFix(RedundantVerbatimPrefixWarning redundantVerbatimIdentifierWarning);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool get_IsReanalysisRequired();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveRedundantVirtualFix : RemoveModifiersFixBase {
    public string Text { get; }
    public string ScopedText { get; }
    public RemoveRedundantVirtualFix(RedundantVirtualModifierWarning error);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    protected virtual bool MustRemove(TokenNodeType modifierNodeType, TokenNodeType previousNodeType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveRefExpressionModifierFix : ModernQuickFixBase {
    private IConditionalTernaryExpression myConditionalExpression;
    public string Text { get; }
    public RemoveRefExpressionModifierFix(RefConditionalNeedsTwoRefsError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveRefInitializerFix : ModernQuickFixBase {
    private IVariableInitializer myVariableInitializer;
    public string Text { get; }
    public RemoveRefInitializerFix(ValueVariableWithRefInitializerError warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveRefOutFix : ModernQuickFixBase {
    private ICSharpRegularParameterDeclaration myParameterDeclaration;
    public string Text { get; }
    private RemoveRefOutFix(ICSharpRegularParameterDeclaration parameterDeclaration);
    public RemoveRefOutFix(OptionalParameterRefOutError error);
    public RemoveRefOutFix(CollectionExpressionFoundAddMethodWithRefOrOutParametersError error);
    public RemoveRefOutFix(RefOutParameterInOperatorError error);
    public RemoveRefOutFix(ByRefParameterInAsyncFunctionError error);
    public RemoveRefOutFix(ByRefParameterInIteratorError error);
    public RemoveRefOutFix(ByRefParameterInPrimaryConstructorError error);
    public RemoveRefOutFix(RefOutParameterInIndexerError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveReturnValueFix : object {
    [NullableAttribute("2")]
private IReturnValueHolder myReturnValueHolder;
    public RemoveReturnValueFix(ReturnTypeIsVoidError error);
    public RemoveReturnValueFix(InvalidExpressionStatementError error);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveScopedKeyword : ModernScopedQuickFixBase {
    [NullableAttribute("2")]
private IDeclarationExpression myDeclarationExpression;
    public string Text { get; }
    public RemoveScopedKeyword(ScopedDiscardError error);
    public virtual string get_Text();
    [NullableContextAttribute("2")]
protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveSealedFix : RemoveModifiersFixBase {
    public string Text { get; }
    public string ScopedText { get; }
    public RemoveSealedFix(SealedMemberInSealedClassWarning error);
    public RemoveSealedFix(OverrideFromSealedMemberError error);
    public RemoveSealedFix(ClassIsAbstractAndSealedError error);
    public RemoveSealedFix(SealedPrivateMethodWithoutBodyError error);
    public RemoveSealedFix(SealedPrivateMemberWithoutBodyError error);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    private static ICSharpModifiersOwnerDeclaration GetModifiersDeclaration(IOverridableMember overridableMember);
    protected virtual bool MustRemove(TokenNodeType modifierNodeType, TokenNodeType previousNodeType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveSignatureFix : ModernScopedQuickFixBase {
    private IAnonymousMethodExpression myAnonymousMethodExpression;
    public string Text { get; }
    public string ScopedText { get; }
    public bool IsReanalysisRequired { get; }
    public RemoveSignatureFix(UnusedAnonymousMethodSignatureWarning error);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool get_IsReanalysisRequired();
    public virtual bool IsAvailable(IUserDataHolder userDataHolder);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveStaticCtorModifiersFix : RemoveModifiersFixBase {
    private static NodeType[] ourNodeTypes;
    private static NodeTypeSet ourAllowedTokenNodeTypes;
    public RemoveStaticCtorModifiersFix(AccessModifierInStaticConstructorError error);
    private static RemoveStaticCtorModifiersFix();
    protected virtual bool MustRemove(TokenNodeType modifierNodeType, TokenNodeType previousNodeType);
    protected virtual bool IsAvailableEx();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveStaticCtorParamsFix : ModernQuickFixBase {
    private IConstructorDeclaration myDeclaration;
    public string Text { get; }
    public RemoveStaticCtorParamsFix(ParametersInStaticConstructorError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveStructConstraint2Fix : RemoveConstraint2FixBase {
    protected string ConstraintText { get; }
    public RemoveStructConstraint2Fix(ValueTypeParameterInTypeParameterConstraintListError error);
    public RemoveStructConstraint2Fix(TypeArgumentIsNotValueTypeError error);
    public RemoveStructConstraint2Fix(ClassTypeParameterInValueTypeParameterConstraintListError error);
    protected virtual string get_ConstraintText();
    protected virtual void RemoveConstraint(ITypeParameterConstraintsClause clause, ITypeParameter typeParameter, ISubstitution substitution);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveStructConstraint3Fix : RemoveConstraint3FixBase {
    public string Text { get; }
    public RemoveStructConstraint3Fix(CannotSpecifyConstructorConstraintForValueTypeError error);
    public virtual string get_Text();
    protected virtual bool CheckConstraint(ITypeParameterConstraint constraint);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveStructConstraintFix : RemoveConstraintFixBase {
    public RemoveStructConstraintFix(DuplicateValueTypeParameterConstraintError error);
    public RemoveStructConstraintFix(BothValueAndReferenceTypeParameterConstraintError error);
    public RemoveStructConstraintFix(BothUnmanagedAndValueTypeParameterConstraintError error);
    public RemoveStructConstraintFix(BothNotNullAndValueTypeParameterConstraintError error);
    public RemoveStructConstraintFix(BothBaseClassConstraintAndTypeKindConstraintError error);
    public RemoveStructConstraintFix(BothDefaultAndOtherTypeKindConstraintError error);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveTypeCheckFromPatternFix")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveSubpatternFix : ModernScopedQuickFixBase {
    [NullableAttribute("2")]
private ISubpattern mySubpattern;
    public string Text { get; }
    public RemoveSubpatternFix(RedundantAlwaysMatchSubpatternWarning error);
    public RemoveSubpatternFix(PatternAlwaysMatchesWarning error);
    public RemoveSubpatternFix(NotResolvedError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveSubpatternNameFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private ISubpattern mySubpattern;
    public string Text { get; }
    public RemoveSubpatternNameFix(DeconstructionSubpatternWrongTupleComponentNameError error);
    public RemoveSubpatternNameFix(DeconstructionSubpatternWrongDeconstructParameterNameError error);
    public RemoveSubpatternNameFix(DeconstructionSubpatternForbiddenITupleComponentNameError error);
    public RemoveSubpatternNameFix(NotResolvedError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveSwitchExpressionArmFix : ModernQuickFixBase {
    private ISwitchExpressionArm myUnreachableSwitchExpressionArm;
    public string Text { get; }
    public RemoveSwitchExpressionArmFix(UnreachableSwitchArmWarning unreachableSwitchArmWarning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveTabulationCharacterFix : RemoveTabulationCharacterFixBase {
    public RemoveTabulationCharacterFix(TabsAreDisallowedWarning error);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveThisFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private ICSharpParameterDeclaration myDeclaration;
    public string Text { get; }
    public RemoveThisFix(ThisParameterNotOnMethodError error);
    public RemoveThisFix(ExtensionMethodInWrongClassError error);
    public RemoveThisFix(ExtensionMethodParameterCannotBeParamsError error);
    public RemoveThisFix(ExtensionMethodThisParameterCannotBeOutError error);
    public RemoveThisFix(ExtensionMethodThisParameterCannotBePointerError error);
    public RemoveThisFix(ExtensionMethodThisParameterCannotBeDynamicError error);
    public RemoveThisFix(ExtensionMethodRefThisParameterInvalidTypeError error);
    public RemoveThisFix(ExtensionMethodThisParameterCannotHaveDefaultValueError error);
    public RemoveThisFix(ExtensionMethodParameterShouldBeFirstError error);
    public RemoveThisFix(CSharp72LanguageFeatureError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [NullableContextAttribute("2")]
[PureAttribute]
private static ITreeNode GetThisKeyword(ICSharpParameterDeclaration declaration);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveToStringFix : ModernScopedQuickFixBase {
    private IReferenceExpression myExpression;
    public string Text { get; }
    public string ScopedText { get; }
    public bool IsReanalysisRequired { get; }
    public RemoveToStringFix(RedundantToStringCallWarning error);
    public RemoveToStringFix(RedundantToStringCallForValueTypeWarning error);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool get_IsReanalysisRequired();
    public virtual bool IsAvailable(IUserDataHolder userDataHolder);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveTruePatternFix : ModernScopedQuickFixBase {
    private IIsExpression myIsExpression;
    public string Text { get; }
    public string ScopedText { get; }
    public bool IsReanalysisRequired { get; }
    public RemoveTruePatternFix(RedundantTestAgainstTrueWarning warning);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool get_IsReanalysisRequired();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveTupleComponentFix : ModernQuickFixBase {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private TypeComparisonResultBase <result>P;
    public string Text { get; }
    [NullableContextAttribute("2")]
public RemoveTupleComponentFix(TypeComparisonResultBase result);
    public RemoveTupleComponentFix(IncorrectAssignmentTypeError error);
    public RemoveTupleComponentFix(IncorrectArgumentTypeError error);
    public RemoveTupleComponentFix(IncorrectArrayElementTypeError error);
    public RemoveTupleComponentFix(IncorrectInitializerTypeError error);
    public RemoveTupleComponentFix(IncorrectReturnTypeError error);
    public RemoveTupleComponentFix(IncorrectYieldReturnTypeError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
[PureAttribute]
private ITupleComponent GetTupleComponent();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveTupleElementsNamesFix : ModernQuickFixBase {
    private ICSharpIdentifier myIdentifier;
    public string Text { get; }
    public RemoveTupleElementsNamesFix(TupleElementNamesAreNotPermittedInDeconstructionDestError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static void RemoveTupleElementNamesRecursively(ITupleExpression tupleExpression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveTypeCheckFromPatternFix : ModernScopedQuickFixBase {
    [NullableAttribute("2")]
private IPattern myPattern;
    public string Text { get; }
    public RemoveTypeCheckFromPatternFix(ConvertTypeCheckPatternToNullCheckWarning error);
    public RemoveTypeCheckFromPatternFix(PatternAlwaysMatchesWarning error);
    public RemoveTypeCheckFromPatternFix(IsExpressionAlwaysTrueDynamicWarning warning);
    public RemoveTypeCheckFromPatternFix(ConvertTypeCheckToNullCheckWarning error);
    public RemoveTypeCheckFromPatternFix(RedundantTypeCheckInPatternWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveTypeConstraint2Fix : RemoveConstraint2FixBase {
    private IType myConstraintType;
    protected string ConstraintText { get; }
    public RemoveTypeConstraint2Fix(TypeArgumentIsNotConvertibleToConstraintError error);
    protected virtual string get_ConstraintText();
    protected virtual void RemoveConstraint(ITypeParameterConstraintsClause clause, ITypeParameter typeParameter, ISubstitution substitution);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveTypeConstraint3Fix : RemoveConstraint3FixBase {
    public string Text { get; }
    public RemoveTypeConstraint3Fix(BothBaseClassConstraintAndTypeKindConstraintError error);
    public virtual string get_Text();
    protected virtual bool CheckConstraint(ITypeParameterConstraint constraint);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveTypeConstraintFix : RemoveConstraintFixBase {
    public RemoveTypeConstraintFix(InvalidClassInTypeParameterConstraintError error);
    public RemoveTypeConstraintFix(BothBaseClassConstraintAndTypeKindConstraintError error);
    public RemoveTypeConstraintFix(BothBaseClassConstraintAndAllowsRefStructConstraintError error);
    public RemoveTypeConstraintFix(SameTypeInTypeParameterConstraintError error);
    [NullableContextAttribute("2")]
[PureAttribute]
[ContractAnnotationAttribute("null => null")]
private static ITypeConstraint GetTypeConstraint(ITypeUsage typeUsage);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveTypeDeclarationBodyFix : ModernScopedQuickFixBase {
    private IMemberOwnerBody myTypeBody;
    public string Text { get; }
    public string ScopedText { get; }
    public RemoveTypeDeclarationBodyFix(RedundantTypeDeclarationBodyWarning error);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveTypeModifiersFix : RemoveModifiersFixBase {
    private static NodeTypeSet ourDisallowedTokenNodeTypes;
    private static NodeTypeSet ourOnlyClassOrRecordAllowed;
    private static NodeTypeSet ourOnlyInnerAllowed;
    public RemoveTypeModifiersFix(InvalidModifierOnTypeDeclarationError error);
    private static RemoveTypeModifiersFix();
    protected virtual bool MustRemove(TokenNodeType modifierNodeType, TokenNodeType previousNodeType);
    protected virtual bool IsAvailableEx();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveTypeParamsFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private ICSharpTypeDeclaration myDeclaration;
    public string Text { get; }
    public RemoveTypeParamsFix(AttributeCannotHaveTypeParametersError error);
    public RemoveTypeParamsFix(EnumCannotHaveTypeParametersError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveUnmanagedConstraint2Fix : RemoveConstraint2FixBase {
    protected string ConstraintText { get; }
    public RemoveUnmanagedConstraint2Fix(ValueTypeParameterInTypeParameterConstraintListError error);
    public RemoveUnmanagedConstraint2Fix(TypeArgumentIsNotUnmanagedTypeError error);
    public RemoveUnmanagedConstraint2Fix(ClassTypeParameterInValueTypeParameterConstraintListError error);
    protected virtual string get_ConstraintText();
    protected virtual void RemoveConstraint(ITypeParameterConstraintsClause clause, ITypeParameter typeParameter, ISubstitution substitution);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveUnmanagedConstraint3Fix : RemoveConstraint3FixBase {
    public string Text { get; }
    public RemoveUnmanagedConstraint3Fix(CannotSpecifyConstructorConstraintForValueTypeError error);
    public virtual string get_Text();
    protected virtual bool CheckConstraint(ITypeParameterConstraint constraint);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveUnmanagedConstraintFix : RemoveConstraintFixBase {
    public RemoveUnmanagedConstraintFix(DuplicateUnmanagedTypeParameterConstraintError error);
    public RemoveUnmanagedConstraintFix(BothUnmanagedAndReferenceTypeParameterConstraintError error);
    public RemoveUnmanagedConstraintFix(BothUnmanagedAndValueTypeParameterConstraintError error);
    public RemoveUnmanagedConstraintFix(BothNotNullAndUnmanagedTypeParameterConstraintError error);
    public RemoveUnmanagedConstraintFix(BothBaseClassConstraintAndTypeKindConstraintError error);
    public RemoveUnmanagedConstraintFix(BothDefaultAndOtherTypeKindConstraintError error);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveUnnecessaryWhitespaceFix : ModernScopedQuickFixBase {
    private ITokenNode myWhitespaceToken;
    public string Text { get; }
    public string ScopedText { get; }
    public RemoveUnnecessaryWhitespaceFix(UnnecessaryWhitespaceWarning warning);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveUnreachableCodeFix : ModernQuickFixBase {
    public static Key InstanceKey;
    [NullableAttribute("2")]
private ITreeRange myRange;
    private IReadOnlyList`1<ITreeRange> mySecondaryRanges;
    public string Text { get; }
    public RemoveUnreachableCodeFix(NullCoalescingConditionIsAlwaysNotNullWarning error);
    public RemoveUnreachableCodeFix(NullCoalescingConditionIsAlwaysNotNullAccordingToAPIContractWarning error);
    public RemoveUnreachableCodeFix(UnreachableCodeCompilerWarning error);
    public RemoveUnreachableCodeFix(HeuristicUnreachableCodeWarning error);
    public RemoveUnreachableCodeFix(UnreachableSwitchCaseWarning warning);
    private static RemoveUnreachableCodeFix();
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static void RemoveRange(ITreeRange range, ICSharpStatement& containingStatement);
    public static ITreeRange AdjustTreeRange(ITreeRange range, bool executing);
    private static ITreeRange AdjustExpression(ITreeRange range, ICSharpExpression expression, bool executing);
    private static ITreeRange AdjustStatement(ITreeRange range, ICSharpStatement statement, bool executing);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveUnsafeFix : ModernScopedNonIncrementalQuickFixBase {
    private IModifiersListOwner myOwner;
    public string Text { get; }
    public string ScopedText { get; }
    public bool IsReanalysisRequired { get; }
    public RemoveUnsafeFix(RedundantUnsafeContextDeclarationWarning error);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool get_IsReanalysisRequired();
    public virtual bool IsAvailable(IUserDataHolder userDataHolder);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveUnsafeInUsingDirectiveFix : ModernQuickFixBase {
    private IUsingDirective myUsingDirective;
    public string Text { get; }
    public RemoveUnsafeInUsingDirectiveFix(UnsafeInRegularUsingDirectiveError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveUnusedNullableDirectiveFix : RemoveNullableDirectiveFixBase {
    public string Text { get; }
    public string ScopedText { get; }
    public RemoveUnusedNullableDirectiveFix(UnusedNullableDirectiveWarning warning);
    public virtual string get_Text();
    public virtual string get_ScopedText();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveUsingDeclarationFix : ModernQuickFixBase {
    private ILocalVariableDeclaration myVariableDeclaration;
    public string Text { get; }
    public RemoveUsingDeclarationFix(ReturnOfUsingVariableWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveUsingStatementFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private IUsingStatement myUsingStatement;
    public string Text { get; }
    [NullableContextAttribute("2")]
public RemoveUsingStatementFix(ICSharpTreeNode usingOwner);
    public RemoveUsingStatementFix(NonDisposableTypeInUsingError error);
    public RemoveUsingStatementFix(NonDisposableByRefLikeTypeInUsingError error);
    public RemoveUsingStatementFix(NonAsyncDisposableTypeInAwaitUsingError error);
    public RemoveUsingStatementFix(ReturnOfUsingVariableWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static ICSharpStatement ConvertUsingInitializerToStatement(IUsingStatement usingStatement);
    private static void AddUsingBodyToBlock(IBlock block, IUsingStatement usingStatement);
    private static void AddBodyAfterUsing(IUsingStatement usingStatement);
    private static bool ShouldReplaceWithBlock(ICSharpStatement statement);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ReplaceConditionWithRespectiveBranchFix")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveValueTypeNullChecksFix : ModernScopedNonIncrementalQuickFixBase {
    [NullableAttribute("2")]
private ICSharpExpression myCondition;
    [NullableAttribute("2")]
private ICSharpExpression myOperand;
    private bool myIsAlways;
    public string Text { get; }
    public string ScopedText { get; }
    public bool IsReanalysisRequired { get; }
    public RemoveValueTypeNullChecksFix(ReferenceEqualsWithValueTypeWarning error);
    public RemoveValueTypeNullChecksFix(LiftedComparisonAlwaysFalseWarning error);
    public RemoveValueTypeNullChecksFix(LiftedEqualsAlwaysConstantWarning error);
    public RemoveValueTypeNullChecksFix(LiftedUserEqualsAlwaysConstantWarning error);
    public RemoveValueTypeNullChecksFix(InvalidNullCoalescingLeftOperandError error);
    public RemoveValueTypeNullChecksFix(CannotApplyBinaryOperatorError error);
    public RemoveValueTypeNullChecksFix(ConditionIsAlwaysTrueOrFalseWarning error);
    public RemoveValueTypeNullChecksFix(InvalidConstantPatternNullValueError error);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool get_IsReanalysisRequired();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IScopedFixingStrategy GetScopedFixingStrategy(ISolution solution, IHighlighting highlighting);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal static bool <IsAvailable>g__IsThrowOfNewException|17_0(ICSharpExpression exceptionExpression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveWithAssignmentFix : ModernQuickFixBase {
    private IWithInitializerAssignment myAssignment;
    public string Text { get; }
    public RemoveWithAssignmentFix(DuplicateAssignmentOfMemberError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveWithCancellationFix : ModernScopedQuickFixBase {
    private IInvocationExpression myInvocationExpression;
    public string Text { get; }
    public RemoveWithCancellationFix(RedundantWithCancellationWarning warning);
    public virtual string get_Text();
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveWithExpressionFix : ModernQuickFixBase {
    private IWithExpression myWithExpression;
    public string Text { get; }
    public RemoveWithExpressionFix(RedundantWithExpressionWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RenameAllUnderscoreLocalParameterFix : ModernScopedQuickFixBase {
    private ILocalParameterDeclaration myParameterDeclaration;
    public string Text { get; }
    public RenameAllUnderscoreLocalParameterFix(AllUnderscoreLocalParameterNameWarning warning);
    public virtual string get_Text();
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RenameDiscardFix : QuickFixBase {
    private IDeclaredElement myDeclaredElement;
    public string Text { get; }
    public RenameDiscardFix(AssignmentInsteadOfDiscardWarning warning);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RenameLocalFunctionFix : RenameRefactoringFix {
    [NullableContextAttribute("1")]
public RenameLocalFunctionFix(LocalFunctionHidesMethodWarning error);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RenameLocalWrongRefFix : RenameWrongRefFixBase {
    public string Text { get; }
    [NullableContextAttribute("2")]
public RenameLocalWrongRefFix(IReference reference);
    public RenameLocalWrongRefFix(NotResolvedError error);
    public RenameLocalWrongRefFix(StaticElementInNonStaticContextError error);
    public RenameLocalWrongRefFix(MultipleStaticElementInNonStaticContextError error);
    public RenameLocalWrongRefFix(NonStaticElementInStaticContextError error);
    public RenameLocalWrongRefFix(MultipleNonStaticElementInStaticContextError error);
    public RenameLocalWrongRefFix(PrimaryConstructorParameterInStaticContextError error);
    public virtual string get_Text();
    protected virtual ICSharpTreeNode GetScope(IReferenceExpression expression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RenameMember2Fix : object {
    private TypeMemberInstance[] myMembers;
    public RenameMember2Fix(PossibleInterfaceMemberAmbiguityWarning error);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RenameMemberFix : RenameRefactoringItem {
    public RenameMemberFix(LocalVariableHidesMemberWarning error);
    public RenameMemberFix(ParameterHidesMemberWarning error);
    public RenameMemberFix(LocalFunctionHidesMethodWarning error);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RenameParameterFix : RenameRefactoringFix {
    public RenameParameterFix(ParameterHidesMemberWarning error);
    public RenameParameterFix(ParameterHidesPrimaryConstructorParameterWarning error);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RenamePrimaryParameterFix : RenameRefactoringFix {
    public string Text { get; }
    public RenamePrimaryParameterFix(ParameterHidesPrimaryConstructorParameterWarning error);
    public RenamePrimaryParameterFix(LocalVariableHidesPrimaryConstructorParameterWarning error);
    public virtual string get_Text();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RenameTypeParameterFix : RenameRefactoringFix {
    public RenameTypeParameterFix(TypeParameterHasSameNameAsOwnerError error);
    public RenameTypeParameterFix(DuplicateTypeParameterNameError error);
}
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RenameTypeParameterOwnerFix : RenameRefactoringFix {
    [NullableContextAttribute("1")]
public RenameTypeParameterOwnerFix(TypeParameterHasSameNameAsOwnerError error);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RenameVariableFix : RenameRefactoringFix {
    public RenameVariableFix(LocalVariableHidesMemberWarning error);
    public RenameVariableFix(LocalVariableHidesPrimaryConstructorParameterWarning error);
    public RenameVariableFix(VariableHidesOuterVariableWarning error);
    public RenameVariableFix(DuplicateLocalVariableNameError error);
    public RenameVariableFix(DuplicateLocalVariableNameWarningError error);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RenameWrongRefFix : RenameWrongRefFixBase {
    public string Text { get; }
    [NullableContextAttribute("2")]
public RenameWrongRefFix(IReference reference);
    public RenameWrongRefFix(NotResolvedError error);
    public RenameWrongRefFix(StaticElementInNonStaticContextError error);
    public RenameWrongRefFix(MultipleStaticElementInNonStaticContextError error);
    public RenameWrongRefFix(NonStaticElementInStaticContextError error);
    public RenameWrongRefFix(MultipleNonStaticElementInStaticContextError error);
    public RenameWrongRefFix(PrimaryConstructorParameterInStaticContextError error);
    public virtual string get_Text();
    protected virtual bool IsAvailableForReferenceSet(IReferenceExpression referenceExpression, IReadOnlyList`1<ReferenceOccurrence`1<IReferenceExpression>> referenceOccurrences);
    protected virtual ICSharpTreeNode GetScope(IReferenceExpression expression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RenameWrongRefFixBase : ModernQuickFixBase {
    [NullableAttribute("2")]
private IReferenceExpression myReferenceExpression;
    [NullableAttribute("2")]
protected IReference Reference { get; }
    [NullableContextAttribute("2")]
protected RenameWrongRefFixBase(IReference reference);
    [NullableContextAttribute("2")]
protected IReference get_Reference();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual bool IsAvailableForReferenceSet(IReferenceExpression referenceExpression, IReadOnlyList`1<ReferenceOccurrence`1<IReferenceExpression>> referenceOccurrences);
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    private static bool TestReference(IReference reference);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    protected abstract virtual ICSharpTreeNode GetScope(IReferenceExpression expression);
    protected IReadOnlyList`1<IReferenceExpression> CollectReferenceExpressions(IReferenceExpression referenceExpression);
    private IReadOnlyList`1<ReferenceOccurrence> GetReferenceOccurrences(IReferenceExpression referenceExpression);
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ReorderParametersFix : object {
    private ITypeMemberRegularParameterDeclaration myDeclaration;
    public ReorderParametersFix(ExtensionMethodParameterShouldBeFirstError error);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ReorderParametersItem : ModernBulbActionBase {
    [CompilerGeneratedAttribute]
private ITypeMemberRegularParameterDeclaration <declaration>P;
    public string Text { get; }
    public ReorderParametersItem(ITypeMemberRegularParameterDeclaration declaration);
    public virtual string get_Text();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ReplaceAssignmentFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private IAssignmentExpression myAssignment;
    public string Text { get; }
    public ReplaceAssignmentFix(AssignmentNotUsedWarning error);
    public ReplaceAssignmentFix(AssignmentIsFullyDiscardedWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
[PureAttribute]
public static bool IsAvailable(ICSharpExpression sourceExpression, bool isAssignmentValueIgnored);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ReplaceAssignmentFix/<LinearizeTupleComponents>d__7")]
[PureAttribute]
private static IEnumerable`1<ICSharpExpression> LinearizeTupleComponents(ITupleExpression tupleExpression);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public static void UnwrapTupleLiteral(ICSharpExpression expression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ReplaceAssignWithEqualityFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private IAssignmentExpression myExpression;
    public string Text { get; }
    public ReplaceAssignWithEqualityFix(AssignmentInConditionalExpressionWarning error);
    public ReplaceAssignWithEqualityFix(AssignmentInConditionalExpressionCompilerWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ReplaceCastWithLambdaReturnTypeFix : ModernScopedQuickFixBase {
    [CompilerGeneratedAttribute]
private CanReplaceCastWithLambdaReturnTypeWarning <warning>P;
    public string Text { get; }
    public ReplaceCastWithLambdaReturnTypeFix(CanReplaceCastWithLambdaReturnTypeWarning warning);
    public virtual string get_Text();
    [NullableContextAttribute("2")]
protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ReplaceCastWithTypeArgumentFix : ModernScopedQuickFixBase {
    private IReferenceExpression myMethodReference;
    private ICSharpExpression myCastExpression;
    private ICSharpExpression myOperand;
    public string Text { get; }
    public ReplaceCastWithTypeArgumentFix(CanReplaceCastWithTypeArgumentWarning warning);
    public ReplaceCastWithTypeArgumentFix(CanReplaceCastWithShorterTypeArgumentWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ReplaceCastWithVariableTypeFix : ModernScopedQuickFixBase {
    [CompilerGeneratedAttribute]
private CanReplaceCastWithVariableTypeWarning <warning>P;
    public string Text { get; }
    public ReplaceCastWithVariableTypeFix(CanReplaceCastWithVariableTypeWarning warning);
    public virtual string get_Text();
    [NullableContextAttribute("2")]
protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static INullableTypeUsage EnsureNullableTypeUsage(ITypeUsage typeUsage);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ReplaceConditionalExpressionWithNullCoalescingFix : ModernScopedQuickFixBase {
    private IConditionalTernaryExpression myConditionalExpression;
    private ICSharpExpression myIfNullResult;
    public string Text { get; }
    public ReplaceConditionalExpressionWithNullCoalescingFix(ReplaceConditionalExpressionWithNullCoalescingWarning warning);
    public virtual string get_Text();
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ReplaceConditionalTernaryByConditionFix : ModernQuickFixBase {
    private IConditionalTernaryExpression myTernaryExpression;
    public string Text { get; }
    public ReplaceConditionalTernaryByConditionFix(RedundantTernaryExpressionWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ReplaceConditionalWithBranchFix : ModernQuickFixBase {
    private IConditionalTernaryExpression myConditionalExpression;
    public string Text { get; }
    public ReplaceConditionalWithBranchFix(ConditionalTernaryEqualBranchWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ReplaceConditionWithRespectiveBranchFix")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ReplaceConditionWithRespectiveBranchFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private ICSharpExpression myExpression;
    private bool myValue;
    public string Text { get; }
    public ReplaceConditionWithRespectiveBranchFix(ReferenceEqualsWithValueTypeWarning error);
    public ReplaceConditionWithRespectiveBranchFix(ConditionIsAlwaysTrueOrFalseWarning error);
    public ReplaceConditionWithRespectiveBranchFix(LiftedComparisonAlwaysFalseWarning error);
    public ReplaceConditionWithRespectiveBranchFix(LiftedEqualsAlwaysConstantWarning error);
    public ReplaceConditionWithRespectiveBranchFix(LiftedUserEqualsAlwaysConstantWarning error);
    public ReplaceConditionWithRespectiveBranchFix(ConditionIsAlwaysTrueOrFalseAccordingToNullableAPIContractWarning error);
    public ReplaceConditionWithRespectiveBranchFix(IsExpressionAlwaysTrueWarning error);
    public ReplaceConditionWithRespectiveBranchFix(IsExpressionAlwaysFalseWarning error);
    public ReplaceConditionWithRespectiveBranchFix(IsExpressionAlwaysTrueCompilerWarning error);
    public ReplaceConditionWithRespectiveBranchFix(IsExpressionAlwaysFalseCompilerWarning error);
    public ReplaceConditionWithRespectiveBranchFix(IsExpressionPatternAlwaysCompilerWarning error);
    public ReplaceConditionWithRespectiveBranchFix(PatternNeverMatchesWarning warning);
    public ReplaceConditionWithRespectiveBranchFix(PatternAlwaysMatchesWarning error);
    public ReplaceConditionWithRespectiveBranchFix(SuspiciousTypeCheckWarning error);
    public ReplaceConditionWithRespectiveBranchFix(SuspiciousComparisonWarning error);
    public ReplaceConditionWithRespectiveBranchFix(EqualExpressionComparisonWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public static void ReplaceIfStatement(IIfStatement ifStatement, bool conditionIsAlways);
    private static void ReplaceIfStatementWithBody(ICSharpStatement ifStatement, ICSharpStatement with);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ReplaceDefaultValueWithDefaultFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private ICSharpParameterDeclaration myParameterDeclaration;
    public string Text { get; }
    public ReplaceDefaultValueWithDefaultFix(OptionalParameterInvalidReferenceValueError error);
    public ReplaceDefaultValueWithDefaultFix(OptionalParameterInvalidValueError error);
    public ReplaceDefaultValueWithDefaultFix(OptionalParameterIncompatibleTypeError error);
    public ReplaceDefaultValueWithDefaultFix(OptionalParameterNotSimpleTypeError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
private ICSharpExpression GetDefaultValue();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ReplaceDestructorWithDisposeFix : ImplementSpecificInterfaceFixBase {
    private IDestructorDeclaration myDeclaration;
    public ReplaceDestructorWithDisposeFix(DestructorOfNotClassTypeError error);
    private static IDeclaredType ImplementorType(ICSharpTypeMemberDeclaration destructorDeclaration);
    protected virtual string GetText(string typePresentableName);
    protected virtual IDeclaredType GetImplementedInterface(ITypeElement implementor);
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private IDeclaredType GetIDisposableType();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ReplaceEmptyStatementWithNextOne : ModernQuickFixBase {
    [NullableAttribute("2")]
private ICSharpStatement myActualBody;
    public string Text { get; }
    public ReplaceEmptyStatementWithNextOne(MisleadingBodyLikeStatementWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ReplaceFloatRangeBoundFix : ModernQuickFixBase {
    private ICSharpLiteralExpression myRightOperand;
    public string Text { get; }
    public ReplaceFloatRangeBoundFix(PossiblyMistakenRangeTokenError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ReplaceInitializerFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private IExpressionInitializer myExpressionInitializer;
    public string Text { get; }
    public ReplaceInitializerFix(VariableInitializerNotUsedWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ReplaceNullableAnnotationWithJetBrainsAttributeFix : ModernScopedQuickFixBase {
    private INullableTypeMark myNullableTypeMark;
    public string Text { get; }
    public ReplaceNullableAnnotationWithJetBrainsAttributeFix(MissingNullableContextForAnnotationWarning warning);
    public virtual string get_Text();
    protected virtual ITreeNode TryGetContextTreeNode();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [NullableContextAttribute("2")]
private ITypeUsage GetTopLevelTypeUsage(Boolean& isContainerTypeUsage);
    private static IAttributesOwnerDeclaration GetTargetDeclaration(ITypeUsage topLevelTypeUsage);
    private ITypeElement GetAttributeType(IAttributesOwnerDeclaration attributesOwnerDeclaration, bool isContainerTypeUsage);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ReplacePrimaryWithExplicitConstructorFix : ModernScopedQuickFixBase {
    [NullableAttribute("2")]
private IPrimaryConstructorDeclaration myPrimaryConstructorDeclaration;
    public string Text { get; }
    public ReplacePrimaryWithExplicitConstructorFix(ImplicitChainingToSetsRequiredMembersRequiresSetsRequiredMembersError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ReplaceReadonlyWithValueFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private ICSharpExpression myConstantExpression;
    public string Text { get; }
    public ReplaceReadonlyWithValueFix(ConstantPatternExpressionIsNotConstantError error);
    public ReplaceReadonlyWithValueFix(ConstantInitializerIsNotConstantError error);
    public ReplaceReadonlyWithValueFix(ReferenceConstantInitializerIsNotNullError error);
    public ReplaceReadonlyWithValueFix(OptionalParameterInvalidValueError error);
    public ReplaceReadonlyWithValueFix(ConstantAlignmentValueExpectedError error);
    public ReplaceReadonlyWithValueFix(EnumMemberValueIsNotConstantError error);
    public ReplaceReadonlyWithValueFix(AttributeArgumentNotConstantError error);
    public ReplaceReadonlyWithValueFix(ConstantGotoCaseValueExpectedError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
[PureAttribute]
private IReferenceExpression FindReferenceExpression();
    [PureAttribute]
private static ICSharpExpression FindConstantExpressionMemberInitializedWith(IReferenceExpression referenceExpression);
    [PureAttribute]
private static bool IsStringEmpty(IField field);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ReplaceRedundantFirstOperandFix : ModernQuickFixBase {
    private ICSharpExpression myLeftOperand;
    public string Text { get; }
    public ReplaceRedundantFirstOperandFix(NullCoalescingConditionIsAlwaysNullWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ReplaceRedundantNullCoalesceAssignmentFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private IAssignmentExpression myNullCoalesceAssignment;
    public string Text { get; }
    public ReplaceRedundantNullCoalesceAssignmentFix(NullCoalescingConditionIsAlwaysNullWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ReplaceRedundantSecondOperandFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private ICSharpExpression myRightOperand;
    public string Text { get; }
    public ReplaceRedundantSecondOperandFix(NullCoalescingRightOperandIsAlwaysNullWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ReplaceSequenceEqualWithConstantPatternFix : ModernScopedQuickFixBase {
    private IInvocationExpression mySequenceEqualExpression;
    public string Text { get; }
    public ReplaceSequenceEqualWithConstantPatternFix(ReplaceSequenceEqualWithConstantPatternWarning warning);
    public virtual string get_Text();
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ReplaceSpanEqualityWithConstantPatternFix : ModernScopedQuickFixBase {
    private IEqualityExpression myEqualityExpression;
    private ICSharpExpression myVariableExpression;
    private ICSharpExpression myStringExpression;
    public string Text { get; }
    public ReplaceSpanEqualityWithConstantPatternFix(StringSpanComparisonWarning warning);
    public virtual string get_Text();
    protected virtual ITreeNode TryGetContextTreeNode();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ReplaceTryCastAndNullCheckWithTypeCheckFix : ModernQuickFixBase {
    private ICSharpExpression myNullCheckExpression;
    public string Text { get; }
    public ReplaceTryCastAndNullCheckWithTypeCheckFix(SafeCastIsUsedAsTypeCheckWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ReplaceWithAccessToLastElementFix : ModernScopedQuickFixBase {
    private ICSharpExpression myOperand;
    public string Text { get; }
    public ReplaceWithAccessToLastElementFix(ZeroIndexFromEndWarning warning);
    public virtual string get_Text();
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ReplaceWithAutoAccessorFix : ModernScopedQuickFixBase {
    private IAccessorDeclaration myAccessorDeclaration;
    public string Text { get; }
    public ReplaceWithAutoAccessorFix(RedundantAccessorBodyWarning error);
    public virtual string get_Text();
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ReplaceWithBoolConstFix")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ReplaceWithBoolConstFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private ICSharpExpression myExpression;
    private ConstantExpressionValue myValue;
    public string Text { get; }
    private string StringValue { get; }
    public ReplaceWithBoolConstFix(RedundantLogicalConditionalExpressionOperandWarning error);
    public ReplaceWithBoolConstFix(ReferenceEqualsWithValueTypeWarning error);
    public ReplaceWithBoolConstFix(ConditionIsAlwaysTrueOrFalseWarning error);
    public ReplaceWithBoolConstFix(LiftedComparisonAlwaysFalseWarning error);
    public ReplaceWithBoolConstFix(LiftedEqualsAlwaysConstantWarning error);
    public ReplaceWithBoolConstFix(LiftedUserEqualsAlwaysConstantWarning error);
    public ReplaceWithBoolConstFix(LiftedOperatorResultAlwaysNullWarning error);
    public ReplaceWithBoolConstFix(ConditionIsAlwaysTrueOrFalseAccordingToNullableAPIContractWarning error);
    public ReplaceWithBoolConstFix(ExpressionIsAlwaysNullWarning error);
    public ReplaceWithBoolConstFix(IsExpressionAlwaysTrueWarning error);
    public ReplaceWithBoolConstFix(IsExpressionAlwaysFalseWarning error);
    public ReplaceWithBoolConstFix(IsExpressionAlwaysTrueCompilerWarning error);
    public ReplaceWithBoolConstFix(IsExpressionPatternAlwaysCompilerWarning error);
    public ReplaceWithBoolConstFix(IsExpressionAlwaysFalseCompilerWarning error);
    public ReplaceWithBoolConstFix(PatternNeverMatchesWarning error);
    public ReplaceWithBoolConstFix(PatternAlwaysMatchesWarning error);
    public ReplaceWithBoolConstFix(SuspiciousTypeCheckWarning error);
    public ReplaceWithBoolConstFix(SuspiciousComparisonWarning error);
    public ReplaceWithBoolConstFix(EqualExpressionComparisonWarning error);
    public virtual string get_Text();
    private string get_StringValue();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private void OptimizeConditionalAndOrExpressions(ICSharpExpression literalExpression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.UseCollectionExpressionAction")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ReplaceWithCollectionExpressionFix : ScopedQuickFixBase {
    private ICSharpExpression myExpression;
    private ReplaceKind myReplaceKind;
    public string Text { get; }
    public ReplaceWithCollectionExpressionFix(ReplaceWithEmptyCollectionExpressionWarning warning);
    public ReplaceWithCollectionExpressionFix(ReplaceInvocationWithCollectionExpressionWarning warning);
    public ReplaceWithCollectionExpressionFix(ReplaceInvocationWithSingleSpreadCollectionExpressionWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    protected virtual IScopedFixingStrategy GetScopedFixingStrategy(ISolution solution, IHighlighting highlighting);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.Misc.ComputeConstantValueAction")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ReplaceWithConstantValueFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private ICSharpExpression myExpression;
    public string Text { get; }
    public ReplaceWithConstantValueFix(DefaultLiteralInSwitchCaseError error);
    public ReplaceWithConstantValueFix(DefaultLiteralInPatternError error);
    public virtual string get_Text();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ReplaceWithCountAccessFix : ModernScopedQuickFixBase {
    private IInvocationExpression myInvocationExpression;
    public string Text { get; }
    public string ScopedText { get; }
    public ReplaceWithCountAccessFix(UseCollectionCountPropertyWarning warning);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ReplaceWithDefaultValueReturnFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private IAccessorDeclaration myAccessorDeclaration;
    public string Text { get; }
    public ReplaceWithDefaultValueReturnFix(UnusedAutoPropertyAccessorWarningBase warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [PureAttribute]
private static IAccessorDeclaration GetGetterAccessorDeclaration(IAccessorDeclaration accessorDeclaration);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ReplaceWithDirectCastFix : ModernQuickFixBase {
    private IAsExpression myAsExpression;
    public string Text { get; }
    public ReplaceWithDirectCastFix(TryCastAlwaysSucceedsWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ReplaceWithExpressionFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private IObjectInitializer myInitializer;
    public string Text { get; }
    public ReplaceWithExpressionFix(NestedInitializerAppliedToValueTypeError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ReplaceWithFieldKeywordFix : ModernScopedQuickFixBase {
    private IFieldDeclaration myFieldDeclaration;
    private IPropertyDeclaration myPropertyDeclaration;
    public string Text { get; }
    public ReplaceWithFieldKeywordFix(ReplaceWithFieldKeywordWarning error);
    public virtual string get_Text();
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static void TransferFieldAttributeToFieldSections(IFieldDeclaration sourceDeclaration, IPropertyDeclaration targetDeclaration);
    private static bool OptimizeTrivialAccessors(IPropertyDeclaration propertyDeclaration);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal static ICSharpExpression <OptimizeTrivialAccessors>g__GetSingleExpression|8_0(CSharpCodeBody codeBody);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.AddPatternVariableAction")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ReplaceWithIsExpressionPatternFix : ModernScopedQuickFixBase {
    [NullableAttribute("2")]
private IPattern myPattern;
    public string Text { get; }
    public ReplaceWithIsExpressionPatternFix(MergeCastWithTypeCheckWarning warning);
    public ReplaceWithIsExpressionPatternFix(TryCastAlwaysSucceedsWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ReplaceWithIsFix : ModernQuickFixBase {
    private ITypeUsage myTypeUsage;
    public string Text { get; }
    public ReplaceWithIsFix(AsOperatorWithValueTypeError error);
    public ReplaceWithIsFix(AsOperatorWithUnconstrainedTypeParameterError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ReplaceWithObjectInitializerFix : ModernQuickFixBase {
    private IObjectCreationExpression myObjectCreationExpression;
    private IWithExpression myWithExpression;
    public string Text { get; }
    public ReplaceWithObjectInitializerFix(WithExpressionInsteadOfInitializerWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static IPropertyInitializer ToPropertyInitializer(IWithInitializerAssignment assignment);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ReplaceWithOperatorIsFix : ModernQuickFixBase {
    private ICSharpExpression myExpressionToReplace;
    private ICSharpExpression myQualifierOfGetType;
    private IDeclaredType myType;
    public string Text { get; }
    public ReplaceWithOperatorIsFix(OperatorIsCanBeUsedWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ReplaceWithPrimaryConstructorParameterFix : ModernScopedQuickFixBase {
    private IFieldDeclaration myFieldDeclaration;
    public string Text { get; }
    public ReplaceWithPrimaryConstructorParameterFix(ReplaceWithPrimaryConstructorParameterWarning error);
    public virtual string get_Text();
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [PureAttribute]
private static bool IsLocalDeclaredElementThatCanBeRenamed(IDeclaredElement declaredElement);
    private IParameter FindPrimaryParameterFromField();
    [PureAttribute]
private IDeclaredElement TryFindConflictingDeclaredElement(IReferenceExpression referenceExpression, IParameter primaryParameter, IField field, string nameToUse, CSharpElementFactory factory);
    [PureAttribute]
private IReadOnlyList`1<string> SuggestParameterNamesFromField(IField sourceField, IParameter targetParameter, bool useNumericSuffixes, Func`2<string, bool> usedNamesFilter);
    private static bool TryResolveNameClashWithLocalDeclaredElement(IReferenceExpression referenceExpression, IDeclaredElement conflictingElement);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.AddPatternVariableAction")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ReplaceWithSwitchCasePatternFix : ModernScopedQuickFixBase {
    private IPattern myTypeTestPattern;
    public string Text { get; }
    public ReplaceWithSwitchCasePatternFix(UseSwitchCasePatternVariableWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ReplaceWithThenByFix : ModernQuickFixBase {
    private IReferenceExpression myMethodReference;
    public string Text { get; }
    public ReplaceWithThenByFix(MultipleOrderByWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    private string GetMethodName();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.UseAsAndCheckForNullAction")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ReplaceWithTryCastAndCheckForNullFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private IIsExpression myIsExpression;
    [NullableAttribute("2")]
private IAsExpression myCastExpression;
    public string Text { get; }
    public ReplaceWithTryCastAndCheckForNullFix(MergeCastWithTypeCheckWarning warning);
    public ReplaceWithTryCastAndCheckForNullFix(TryCastAlwaysSucceedsWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ReplaceWithUppercaseSuffixFix : ModernQuickFixBase {
    private ICSharpLiteralExpression myLiteralExpression;
    public string Text { get; }
    public ReplaceWithUppercaseSuffixFix(LongLiteralLowerLSuffixWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ReplaceWithVoidKeywordFix : ModernQuickFixBase {
    private ITreeNode myNodeToReplace;
    public string Text { get; }
    public ReplaceWithVoidKeywordFix(SystemVoidCannotBeUsedFromCSharpError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ReplaceWithYieldFix : ModernQuickFixBase {
    [CanBeNullAttribute]
private IReturnValueHolder myReturnValueHolder;
    public string Text { get; }
    public ReplaceWithYieldFix(ReturnStatementInIteratorError error);
    public ReplaceWithYieldFix(ReturnValueMissingError error);
    public ReplaceWithYieldFix(IncorrectReturnTypeError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ReturnDefaultValueFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private IReturnValueHolder myReturnValueHolder;
    public string Text { get; }
    public ReturnDefaultValueFix(ReturnValueMissingError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.BodyStatementToExpressionAction")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ReturnExpressionBodyValueFix : ModernQuickFixBase {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ICSharpExpression <expression>P;
    public string Text { get; }
    [NullableContextAttribute("2")]
public ReturnExpressionBodyValueFix(ICSharpExpression expression);
    public ReturnExpressionBodyValueFix(InvalidExpressionStatementError error);
    public ReturnExpressionBodyValueFix(ReturnValueOfPureMethodIsNotUsedWarning error);
    public ReturnExpressionBodyValueFix(MustUseReturnValueWarning error);
    public ReturnExpressionBodyValueFix(IteratorMethodResultIsIgnoredWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [PureAttribute]
private static IExpressionBodyOwnerDeclaration FindRealExpressionBodyOwner(ICSharpExpression expression);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.ReturnValueAction")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ReturnValueFix : ModernQuickFixBase {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ICSharpExpression <expression>P;
    private bool myIsIterator;
    public string Text { get; }
    [NullableContextAttribute("2")]
public ReturnValueFix(ICSharpExpression expression);
    public ReturnValueFix(InvalidExpressionStatementError error);
    public ReturnValueFix(ReturnValueOfPureMethodIsNotUsedWarning error);
    public ReturnValueFix(MustUseReturnValueWarning error);
    public ReturnValueFix(IteratorMethodResultIsIgnoredWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ReturnWithAwaitFix : ModernQuickFixBase {
    private IReturnStatement myReturnStatement;
    private string myActionHint;
    private string myEntityName;
    public string Text { get; }
    public ReturnWithAwaitFix(ReturnOfTaskProducedByUsingVariableWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.SafeCastInArgumentFix : CastInArgumentBase {
    protected bool AsCast { get; }
    public SafeCastInArgumentFix(IncorrectArgumentTypeError error);
    public SafeCastInArgumentFix(MultipleResolveCandidatesError error);
    public SafeCastInArgumentFix(IndexerIncorrectArgumentNumberError error);
    public SafeCastInArgumentFix(IncorrectArgumentNumberError error);
    public SafeCastInArgumentFix(IncorrectArgumentsError error);
    protected virtual bool get_AsCast();
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.SafeCastInArrayElementFix : CastInArrayElementFixBase {
    protected bool AsCast { get; }
    [NullableContextAttribute("1")]
public SafeCastInArrayElementFix(IncorrectArrayElementTypeError error);
    protected virtual bool get_AsCast();
}
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.SafeCastInAssignmentFix : CastInAssignmentBase {
    protected bool AsCast { get; }
    [NullableContextAttribute("1")]
public SafeCastInAssignmentFix(IncorrectAssignmentTypeError error);
    protected virtual bool get_AsCast();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.SafeCastInInitializerFix : CastInInitializerBase {
    protected bool AsCast { get; }
    public SafeCastInInitializerFix(IncorrectInitializerTypeError error);
    public SafeCastInInitializerFix(DeclarationToInitializerTypeMismatchError error);
    protected virtual bool get_AsCast();
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.SafeCastInLambdaBodyExpressionFix : CastInLambdaBodyExpressionFixBase {
    protected bool AsCast { get; }
    [NullableContextAttribute("1")]
public SafeCastInLambdaBodyExpressionFix(IncorrectLambdaBodyExpressionTypeError error);
    protected virtual bool get_AsCast();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.SafeCastInReturnFix : CastInReturnBase {
    protected bool AsCast { get; }
    public SafeCastInReturnFix(IncorrectReturnTypeError error);
    public SafeCastInReturnFix(IncorrectYieldReturnTypeError error);
    protected virtual bool get_AsCast();
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.SafeCastInTupleLiteralFix : CastInTupleLiteralBase {
    protected bool AsCast { get; }
    [NullableContextAttribute("2")]
public SafeCastInTupleLiteralFix(TypeComparisonResultBase comparisonResult);
    protected virtual bool get_AsCast();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ScopedIntentionBuilderAttribute("16")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.Scoped.Builders.CSharpRemoveRedundantCodeScopedIntentionsBuilder : ScopedIntentionsBuilder {
    [CompilerGeneratedAttribute]
private HighlightingCleanupItems <highlightingCleanupItems>P;
    private static CodeCleanupProfile ourProfile;
    public double Priority { get; }
    public CSharpRemoveRedundantCodeScopedIntentionsBuilder(HighlightingCleanupItems highlightingCleanupItems);
    private static CSharpRemoveRedundantCodeScopedIntentionsBuilder();
    public virtual double get_Priority();
    public virtual bool IsAvailable(IScopedAction action, ISolution solution, IHighlighting sourceHighlighting);
    protected virtual IBulbAction TryCreateCaretAction(IBulbAction caretAction);
    protected virtual IBulbAction TryCreateForScope(IScopedAction scopedAction, Scope scope, IHighlighting sourceHighlighting);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.Scoped.CSharpSolutionAnalysisInspectionResultsFilteringProvider : object {
    public sealed virtual ISolutionAnalysisInspectionResultsFileFilter GetFileFilter(ISolution solution);
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.SealMethodFix : QuickFixBase {
    [CanBeNullAttribute]
private ITreeNode myAnchor;
    [CanBeNullAttribute]
private ICSharpTypeDeclaration myTypeDeclaration;
    [CanBeNullAttribute]
private IOverridableMember myOverridableMember;
    public string Text { get; }
    public SealMethodFix(VirtualMemberCallInConstructorWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    public virtual void Execute(ISolution solution, ITextControl textControl);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.SeparateLocalFunctionsWithJumpStatementAction")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.SeparateLocalFunctionsWithJumpStatementFix : ModernScopedQuickFixBase {
    private ILocalFunctionDeclaration myLocalFunctionDeclaration;
    private JumpKind myJumpKind;
    public string Text { get; }
    public string ScopedText { get; }
    public SeparateLocalFunctionsWithJumpStatementFix(SeparateLocalFunctionsWithJumpStatementWarning warning);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.SeparateStatementsWithBlankLineFix : ModernScopedQuickFixBase {
    private ICSharpStatement myFirstStatement;
    private int myLineBreaks;
    public string Text { get; }
    public string ScopedText { get; }
    public SeparateStatementsWithBlankLineFix(SeparateControlTransferStatementWarning error);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.SetCollectionExpressionTargetTypeFix : object {
    private ICollectionExpression myCollectionExpression;
    public SetCollectionExpressionTargetTypeFix(ThereIsNoTargetTypeForCollectionExpressionError error);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    private List`1<IType> GetPossibleTypes();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    [CompilerGeneratedAttribute]
internal static IDeclaredType <GetPossibleTypes>g__SubstituteType|3_0(IDeclaredType genericType, IDeclaredType iterationType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.SetConfigureAwaitAnalysisModeFix : BulbActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    public string Text { get; }
    public SetConfigureAwaitAnalysisModeFix(ICSharpContextActionDataProvider provider);
    public virtual string get_Text();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.CSharp.QuickFixes.SetConfigureAwaitAnalysisModeFix/<CreateBulbItems>d__5")]
public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    protected sealed virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.SetDisposeAnalysisModeAction")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.SetDisposeAnalysisModeFix : QuickFixBase {
    [NullableAttribute("2")]
private ICSharpExpression myExpression;
    public string Text { get; }
    public SetDisposeAnalysisModeFix(NotDisposedResourceWarning warning);
    public SetDisposeAnalysisModeFix(GenericEnumeratorNotDisposedWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    protected sealed virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.SetLanguageLevelAction : SetLanguageLevelFixBase`2<CSharpLanguageLevel, CSharpLanguageVersion> {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <provider>P;
    protected CSharpLanguageVersion LatestLanguageVersion { get; }
    protected CSharpLanguageVersion LatestMajorLanguageVersion { get; }
    protected CSharpLanguageVersion PreviewLanguageVersion { get; }
    protected IComparer`1<CSharpLanguageLevel> LanguageLevelComparer { get; }
    protected Key`1<Boxed`1<CSharpLanguageLevel>> LanguageLevelPsiDataCacheKey { get; }
    public SetLanguageLevelAction(ICSharpContextActionDataProvider provider);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual CSharpLanguageVersion get_LatestLanguageVersion();
    protected virtual CSharpLanguageVersion get_LatestMajorLanguageVersion();
    protected virtual CSharpLanguageVersion get_PreviewLanguageVersion();
    protected virtual IComparer`1<CSharpLanguageLevel> get_LanguageLevelComparer();
    protected virtual Key`1<Boxed`1<CSharpLanguageLevel>> get_LanguageLevelPsiDataCacheKey();
    protected virtual IntentionAction ToIntention(IBulbActionWithCustomAnchor<CSharpLanguageLevel, CSharpLanguageVersion> bulbAction);
    private sealed virtual override IEnumerable`1<IntentionAction> JetBrains.ReSharper.Feature.Services.ContextActions.IContextAction.CreateBulbItems();
}
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.QuickFixes.SetLanguageLevelAction")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.SetLanguageLevelFix : SetLanguageLevelFixBase`2<CSharpLanguageLevel, CSharpLanguageVersion> {
    protected CSharpLanguageVersion LatestLanguageVersion { get; }
    protected CSharpLanguageVersion LatestMajorLanguageVersion { get; }
    protected CSharpLanguageVersion PreviewLanguageVersion { get; }
    protected IComparer`1<CSharpLanguageLevel> LanguageLevelComparer { get; }
    protected Key`1<Boxed`1<CSharpLanguageLevel>> LanguageLevelPsiDataCacheKey { get; }
    public SetLanguageLevelFix(ITreeNode node, CSharpLanguageLevel languageLevel);
    public SetLanguageLevelFix(CSharp30LanguageFeatureError error);
    public SetLanguageLevelFix(CSharp40LanguageFeatureError error);
    public SetLanguageLevelFix(CSharp50LanguageFeatureError error);
    public SetLanguageLevelFix(CSharp60LanguageFeatureError error);
    public SetLanguageLevelFix(CSharp70LanguageFeatureError error);
    public SetLanguageLevelFix(CSharp71LanguageFeatureError error);
    public SetLanguageLevelFix(CSharp72LanguageFeatureError error);
    public SetLanguageLevelFix(CSharp73LanguageFeatureError error);
    public SetLanguageLevelFix(CSharp80LanguageFeatureError error);
    public SetLanguageLevelFix(CSharp80LanguageFeature2Error error);
    public SetLanguageLevelFix(RuntimeAndLanguageVersionDoNotSupportDefaultInterfaceImplementationError error);
    public SetLanguageLevelFix(CSharp90LanguageFeatureError error);
    public SetLanguageLevelFix(CSharp100LanguageFeatureError error);
    public SetLanguageLevelFix(CSharp110LanguageFeatureError error);
    public SetLanguageLevelFix(CSharp120LanguageFeatureError error);
    public SetLanguageLevelFix(CSharp130LanguageFeatureError error);
    public SetLanguageLevelFix(StringEscapeSequenceEscapeUnavailableError error);
    public SetLanguageLevelFix(ExtensionGetEnumeratorFeatureUnavailableError error);
    public SetLanguageLevelFix(NonAbstractAccessorWithoutBodyError error);
    public SetLanguageLevelFix(NotInitializedThisInStructError error);
    public SetLanguageLevelFix(NotAssignedVariablesUponExitError error);
    public SetLanguageLevelFix(NotResolvedError error);
    public SetLanguageLevelFix(InvalidDigitSeparatorAfterPrefixError error);
    public SetLanguageLevelFix(IncorrectInterpolatedStringPrefixError error);
    public SetLanguageLevelFix(NamedArgumentBeforePositionalError error);
    public SetLanguageLevelFix(ExpressionVariableInForbiddenContextError error);
    public SetLanguageLevelFix(SecondParameterOfShiftOperatorMustBeIntError error);
    public SetLanguageLevelFix(InvalidClassInTypeParameterConstraintError error);
    public SetLanguageLevelFix(InvalidAttributeLocationForDeclarationWarning error);
    public SetLanguageLevelFix(ExpressionCannotBeFixedError error);
    public SetLanguageLevelFix(FixedFieldAccessInUnfixedExpressionError error);
    public SetLanguageLevelFix(InvalidNullableUnderlyingTypeError error);
    public SetLanguageLevelFix(AttributesInLocalFunctionDeclarationError error);
    public SetLanguageLevelFix(TypePatternDesignationMissingError error);
    public SetLanguageLevelFix(DeconstructionSingleSubpatternError error);
    public SetLanguageLevelFix(UnexpectedElementTypeError error);
    public SetLanguageLevelFix(DuplicateParameterNameError error);
    public SetLanguageLevelFix(NullableMarkOnNullableTypeParameterError error);
    public SetLanguageLevelFix(VarianceSafetyFailedError error);
    public SetLanguageLevelFix(InvalidWithExpressionOperandTypeError error);
    public SetLanguageLevelFix(PropertySubpatternInvalidAccessExpressionError error);
    public SetLanguageLevelFix(DeconstructionCannotMixDeclarationsWithExpressionsError error);
    public SetLanguageLevelFix(ConstantInitializerIsNotConstantError error);
    public SetLanguageLevelFix(InvalidConstantPatternTypeError error);
    public SetLanguageLevelFix(AttributeArgumentNotConstantError error);
    public SetLanguageLevelFix(ParameterlessConstructorInStructError error);
    public SetLanguageLevelFix(AttributeCannotHaveTypeParametersError error);
    public SetLanguageLevelFix(StringInterpolationLineBreakError error);
    public SetLanguageLevelFix(TypeDeclarationBodyMissingError error);
    protected virtual CSharpLanguageVersion get_LatestLanguageVersion();
    protected virtual CSharpLanguageVersion get_LatestMajorLanguageVersion();
    protected virtual CSharpLanguageVersion get_PreviewLanguageVersion();
    protected virtual IComparer`1<CSharpLanguageLevel> get_LanguageLevelComparer();
    protected virtual Key`1<Boxed`1<CSharpLanguageLevel>> get_LanguageLevelPsiDataCacheKey();
    private sealed virtual override IEnumerable`1<IntentionAction> JetBrains.ReSharper.Feature.Services.QuickFixes.IQuickFix.CreateBulbItems();
    private sealed virtual override bool JetBrains.ReSharper.Feature.Services.QuickFixes.IQuickFix.IsAvailable(IUserDataHolder cache);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.SetStructRefModifierFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private ITypeElement myStruct;
    private bool myAddRefModifier;
    public string Text { get; }
    public SetStructRefModifierFix(RefFieldInNonRefStructError error);
    public SetStructRefModifierFix(RefFieldCannotReferToRefStructError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.SetTypeParameterVarianceFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private ITypeParameter myTypeParameter;
    private TypeParameterVariance myVariance;
    public string Text { get; }
    public SetTypeParameterVarianceFix(TypeParameterCanBeVariantWarning error);
    public SetTypeParameterVarianceFix(VarianceSafetyFailedError error);
    public SetTypeParameterVarianceFix(CSharp40LanguageFeatureError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.SimplifyConditionalOperatorFix : ModernQuickFixBase {
    private IConditionalTernaryExpression myConditionalExpression;
    private Nullable`1<bool> myThen;
    private Nullable`1<bool> myElse;
    public string Text { get; }
    public SimplifyConditionalOperatorFix(SimplifyConditionalTernaryExpressionWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.SimplifyLinqExpressionFix : ModernQuickFixBase {
    private IStructuralSearchPattern myPattern;
    private IStructuralMatchResult myMatchResult;
    private ICSharpExpression myExpression;
    public string Text { get; }
    private SimplifyLinqExpressionFix(IStructuralSearchPattern pattern, IStructuralMatchResult matchResult, ICSharpExpression expression);
    public SimplifyLinqExpressionFix(SimplifyLinqExpressionUseAnyWarning warning);
    public SimplifyLinqExpressionFix(SimplifyLinqExpressionUseAllWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.SimplifyNegatedPatternFix : ModernScopedQuickFixBase {
    private INegatedPattern myNegatedPattern;
    private ICSharpTreeNode myContainingNode;
    public string Text { get; }
    public SimplifyNegatedPatternFix(DoubleNegationInPatternWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.SimplifyNegativeEqualityExpressionFix : ModernQuickFixBase {
    private IEqualityExpression myEqualityExpression;
    private IUnaryOperatorExpression myUnaryOperatorExpression;
    public string Text { get; }
    public SimplifyNegativeEqualityExpressionFix(NegativeEqualityExpressionWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.SimplifyRawStringFix : ModernScopedQuickFixBase {
    private IStringLiteralOwner myLiteralOwner;
    private bool myCanUseRegularString;
    private int myRedundantQuotesCount;
    private int myRedundantDollarsCount;
    public string Text { get; }
    public SimplifyRawStringFix(RawStringCanBeSimplifiedWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.SimplifyStringInterpolationFix : ModernQuickFixBase {
    private IInterpolatedStringInsert myInterpolatedStringInsert;
    public string Text { get; }
    public SimplifyStringInterpolationFix(SimplifyStringInterpolationWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private ITreeNode ReplaceToStringWithFormatSpecifier(IInterpolatedStringExpression interpolatedStringExpression, FormatArgumentInfo formatArgumentInfo);
    private ICSharpExpression ReplacePaddingCallWithAlignmentExpression(ICSharpExpression alignmentExpression, bool isPadRight);
    private static ICSharpExpression WrapAlignmentExpressionInParenthesesIfNecessary(ICSharpExpression alignmentExpression);
    [NullableContextAttribute("2")]
[ContractAnnotationAttribute("interpolatedStringExpression:null=>null")]
private ITokenNode GetNextLiteral(IInterpolatedStringExpression interpolatedStringExpression);
    private ICSharpExpression UnwrapPaddingIfNecessary(ICSharpExpression& alignmentExpression, Boolean& isPadRight);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.SimplifyTryGetValueWithRemoveFix : ModernScopedQuickFixBase {
    private IIfStatement myIfStatement;
    private IInvocationExpression myTryGetValueInvocationExpression;
    private ICSharpExpression myConditionPart;
    private ICSharpStatement myRemoveStatement;
    private IMethod myRemoveMethod;
    public string Text { get; }
    public SimplifyTryGetValueWithRemoveFix(CanSimplifyDictionaryRemovingWithSingleCallWarning warning);
    public virtual string get_Text();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static IInvocationExpression ChangeMethod(IInvocationExpression invocationExpression, IMethod newMethod);
    protected virtual ITreeNode TryGetContextTreeNode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.SpecifyArrayTypeFix : ArrayInitializerFixBase {
    public string Text { get; }
    public SpecifyArrayTypeFix(InitializeNonArrayVariableByArrayError error);
    public SpecifyArrayTypeFix(ImplicitlyTypeVariableShouldHaveExpressionInitializerError error);
    public virtual string get_Text();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.SpecifyAttributeTargetFix : ModernScopedQuickFixBase {
    private IAttribute myAttribute;
    private AttributeTargets myAllowedTargets;
    private AttributeTarget myAttributeTarget;
    private AttributeTarget myAlternativeAttributeTarget;
    private string myActionText;
    public string Text { get; }
    public string ScopedText { get; }
    public FileCollectorInfo FileCollectorInfo { get; }
    public SpecifyAttributeTargetFix(InvalidAttributeUsageError error);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    protected virtual ITreeNode TryGetContextTreeNode();
    public virtual FileCollectorInfo get_FileCollectorInfo();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private IBulbActionCommand SuggestAlternativeTargetIfAny(ISolution solution, IAttributeSection targetSection);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.SpecifyFieldNameAction : ModernBulbActionBase {
    [CompilerGeneratedAttribute]
private IAnonymousMemberDeclaration <declaration>P;
    private List`1<string> myNames;
    public string Text { get; }
    public SpecifyFieldNameAction(IAnonymousMemberDeclaration declaration);
    public virtual string get_Text();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static IEnumerable`1<string> SuggestNameFromSameProperties(IAnonymousMemberDeclaration declaration);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.AddAnonymousFieldNameAction")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.SpecifyFieldNameFix : object {
    private IAnonymousMemberDeclaration myDeclaration;
    public SpecifyFieldNameFix(AnonymousTypeProjectionInitializerNotMemberAccessError error);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.SpecifyInvocationTypeParametersFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private ICSharpExpression myExpression;
    [NullableAttribute("2")]
private IType myTargetType;
    public string Text { get; }
    public SpecifyInvocationTypeParametersFix(CoVariantArrayConversionWarning error);
    public SpecifyInvocationTypeParametersFix(IncorrectArgumentTypeError error);
    public SpecifyInvocationTypeParametersFix(IncorrectArrayElementTypeError error);
    public SpecifyInvocationTypeParametersFix(IncorrectCollectionExpressionItemTypeError error);
    public SpecifyInvocationTypeParametersFix(IncorrectInitializerTypeError error);
    public SpecifyInvocationTypeParametersFix(IncorrectReturnTypeError error);
    public SpecifyInvocationTypeParametersFix(IncorrectYieldReturnTypeError error);
    public SpecifyInvocationTypeParametersFix(IncorrectExtensionMethodArgumentTypeError error);
    public SpecifyInvocationTypeParametersFix(IncorrectExtensionMethodArgumentType2Error error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.SpecifyStringComparisonFix : ModernQuickFixBase {
    private ICSharpExpression myExpression;
    private ICSharpExpression myArg1;
    private ICSharpExpression myArg2;
    private bool myNegate;
    private StringComparison myStringComparison;
    [NullableAttribute("2")]
private IMethod myStringEqualsMethod;
    [NullableAttribute("2")]
private IField myStringComparisonField;
    public string Text { get; }
    public SpecifyStringComparisonFix(SpecifyStringComparisonWarning warning);
    public virtual string get_Text();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static IMethod GetStringEqualsMethod(IPsiModule module);
    private static IField GetStringComparisonField(IPsiModule module, StringComparison stringComparison);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.SpecifyToStringCultureFixBase : ModernQuickFixBase {
    [CompilerGeneratedAttribute]
private IInvocationExpression <expression>P;
    protected string CultureName { get; }
    protected SpecifyToStringCultureFixBase(IInvocationExpression expression);
    protected abstract virtual string get_CultureName();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private ITypeMember FindCultureStaticProperty(ITreeNode context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.SpecifyToStringCurrentCultureFix : SpecifyToStringCultureFixBase {
    public string Text { get; }
    protected string CultureName { get; }
    public SpecifyToStringCurrentCultureFix(SpecifyACultureInStringConversionExplicitlyWarning warning);
    public virtual string get_Text();
    protected virtual string get_CultureName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.SpecifyToStringInvariantCultureFix : SpecifyToStringCultureFixBase {
    public string Text { get; }
    protected string CultureName { get; }
    public SpecifyToStringInvariantCultureFix(SpecifyACultureInStringConversionExplicitlyWarning warning);
    public virtual string get_Text();
    protected virtual string get_CultureName();
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.SpecifyTypeExplicitlyFix : QuickFixBase {
    [CanBeNullAttribute]
private IMultipleLocalVariableDeclaration myMultiDeclaration;
    public string Text { get; }
    public SpecifyTypeExplicitlyFix(ImplicitlyTypeVariableShouldHaveInitializerError error);
    public SpecifyTypeExplicitlyFix(InvalidInitializerImplicitlyTypeVariableError error);
    public SpecifyTypeExplicitlyFix(ImplicitlyTypeVariableCannotHaveMultipleDeclaratorsError error);
    public SpecifyTypeExplicitlyFix(CSharp30LanguageFeatureError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NotNullAttribute]
[PureAttribute]
private IEnumerable`1<IType> FindSuitableTypes(IExpectedTypeConstraint typeConstraint);
    [CanBeNullAttribute]
[PureAttribute]
private static IExpectedTypeConstraint FindConstraint(IMultipleLocalVariableDeclaration multipleLocalVariableDeclaration);
    [CanBeNullAttribute]
[PureAttribute]
private static IExpectedTypeConstraint FindConstraint(ILocalVariableDeclaration variableDeclaration);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [CompilerGeneratedAttribute]
private bool <FindSuitableTypes>b__8_0(IType type);
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.SpecifyVarTypeFix : ModernQuickFixBase {
    [CanBeNullAttribute]
private IReference myReference;
    public string Text { get; }
    public SpecifyVarTypeFix(NotResolvedError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    private static bool IsAvailableImpl(IReference reference);
    [CanBeNullAttribute]
[PureAttribute]
private static IType InferVarType(IUserTypeUsage typeUsage);
    [CanBeNullAttribute]
[PureAttribute]
private static IType VisitExpressionInitializer(IExpressionInitializer expressionInitializer);
    [CanBeNullAttribute]
[PureAttribute]
private static IType VisitArrayInitializer(IArrayInitializer arrayInitializer);
    [CanBeNullAttribute]
[PureAttribute]
private static IType VisitArrowClause(IArrowExpressionClause arrowClause);
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.SplitDeclarationFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private IDeclarationStatement myDeclarationStatement;
    public string Text { get; }
    public SplitDeclarationFix(InvalidEmbeddedStatementError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.SplitDeclarationsListAction")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.SplitDeclarationsListFix : ModernQuickFixBase {
    private IMultipleLocalVariableDeclaration myDeclaration;
    public string Text { get; }
    public SplitDeclarationsListFix(ImplicitlyTypeVariableCannotHaveMultipleDeclaratorsError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.SplitStringAction")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.SplitStringFix : ModernScopedQuickFixBase {
    private ITokenNode myLiteralNode;
    private DocumentRange mySelection;
    public string Text { get; }
    public SplitStringFix(VariableLengthStringHexEscapeSequenceWarning warning);
    public virtual string get_Text();
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [CompilerGeneratedAttribute]
internal static IBulbActionCommand <ExecutePsiTransaction>g__SplitLiteralAfter|6_0(ITokenNode literalNode, int splitOffset);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.SplitUsingFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private IUsingStatement myUsingStatement;
    public string Text { get; }
    public SplitUsingFix(MultipleExpressionsInUsingStatementError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.StructConstructorCreationHelper : object {
    [ExtensionAttribute]
public static void ProcessUninitializedTypeMembers(IClassLikeDeclaration structOrRecordDeclaration, IUninitializedTypeMemberProcessor processor);
    [ExtensionAttribute]
public static ValueTuple`2<bool, bool> FindUninitializedMembers(IRecord record, IClassLikeDeclaration contextDeclaration);
    [ExtensionAttribute]
public static ValueTuple`2<bool, bool> FindUninitializedMembers(ClassLikeTypeElement structOrRecord, IClassLikeDeclaration contextDeclaration);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.SuppressNullableWarningFix : ModernQuickFixBase {
    private static InvisibleAnchor ourCommonAnchor;
    private static IAnchor ourSuppressAnchor;
    private static IAnchor ourDisableQuickFixAnchor;
    private static Key`1<object> ourKey;
    [NullableAttribute("2")]
private ICSharpExpression myExpression;
    public static string Title;
    public string Text { get; }
    public SuppressNullableWarningFix(AssignNullToNotNullAttributeWarning warning);
    public SuppressNullableWarningFix(PossibleNullReferenceExceptionWarning warning);
    public SuppressNullableWarningFix(ConvertingNullableToNonNullableWarning warning);
    public SuppressNullableWarningFix(NullReferenceAssignmentWarning warning);
    public SuppressNullableWarningFix(NullAsNonNullableWarning warning);
    public SuppressNullableWarningFix(NullReferenceReceiverWarning warning);
    public SuppressNullableWarningFix(NullableValueTypeMayBeNullWarning warning);
    public SuppressNullableWarningFix(UnboxPossibleNullWarning warning);
    public SuppressNullableWarningFix(NullReferenceReturnWarning warning);
    public SuppressNullableWarningFix(NullReferenceArgumentWarning warning);
    public SuppressNullableWarningFix(NullabilityMismatchInAssignmentWarning warning);
    public SuppressNullableWarningFix(NullabilityMismatchInArgumentForOutputWarning warning);
    public SuppressNullableWarningFix(NullabilityMismatchInReturnTypeOfTargetDelegateWarning warning);
    public SuppressNullableWarningFix(NullabilityMismatchInParameterTypeOfTargetDelegateWarning warning);
    public SuppressNullableWarningFix(PossibleNullValueInThrowExpressionOrStatementWarning warning);
    public SuppressNullableWarningFix(DisallowNullAttributeForbidsMaybeNullAssignmentWarning warning);
    public SuppressNullableWarningFix(NullabilityMismatchInArgumentWarning warning);
    private static SuppressNullableWarningFix();
    public static ICSharpExpression TryGetAvailabilityExpression(IHighlighting highlighting);
    private static bool CanApplyFixToExpression(ICSharpExpression expression);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    public static bool IsEnabled(ITreeNode context);
    public static void SetEnabledState(ISolution solution, bool state);
    public static void SetNullableSuppressionInspectionSeverity(ISolution solution, SeverityOption severityOption);
    public static bool IsNullableSuppressionInspectionEnabled(ITreeNode context);
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [CompilerGeneratedAttribute]
internal static ICSharpExpression <TryGetAvailabilityExpression>g__GetCastOperandExpression|23_0(ICastExpression castExpression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.SuppressUninitializedNonNullableTypeMemberWarningFix : ModernQuickFixBase {
    public static InvisibleAnchor CommonAnchor;
    public static IAnchor SuppressAnchor;
    public static IAnchor DisableQuickFixAnchor;
    private ICollection`1<ITypeMember> myTypeMembers;
    public string Text { get; }
    public SuppressUninitializedNonNullableTypeMemberWarningFix(UninitializedNonNullableTypeMemberWarning warning);
    public SuppressUninitializedNonNullableTypeMemberWarningFix(NonNullableTypeMemberNotInitializedInConstructorWarning warning);
    private static SuppressUninitializedNonNullableTypeMemberWarningFix();
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.SurroundWithLockFix : ModernQuickFixBase {
    private IReferenceExpression myExpression;
    [NullableAttribute("2")]
private ICSharpExpression myMonitorExpression;
    public string Text { get; }
    public SurroundWithLockFix(InconsistentlySynchronizedFieldWarning inconsistentlySynchronizedFieldWarning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private IBulbActionCommand ShowHotspot(ITreeNode lockMonitorElement);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.SurroundWithUnsafeBlockFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private ICSharpTreeNode myUnsafeNode;
    public string Text { get; }
    public SurroundWithUnsafeBlockFix(PointerInSafeContextError error);
    public SurroundWithUnsafeBlockFix(UnsafeConstructInSafeContextError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.SwapViaDeconstructionFix : ModernScopedQuickFixBase {
    private IDeclarationStatement myDeclarationStatement;
    private IExpressionStatement myFirstAssignmentStatement;
    private IExpressionStatement mySecondAssignmentStatement;
    public string Text { get; }
    public SwapViaDeconstructionFix(SwapViaDeconstructionWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.TernaryExpressionToSwitchExpressionFix : ModernScopedQuickFixBase {
    private IConditionalTernaryExpression myConditionalTernaryExpression;
    public string Text { get; }
    public TernaryExpressionToSwitchExpressionFix(ConvertConditionalTernaryExpressionToSwitchExpressionWarning warning);
    public virtual string get_Text();
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ThisIsCastFix : ModernQuickFixBase {
    private IReference myReference;
    public string Text { get; }
    public ThisIsCastFix(UnexpectedElementTypeError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
private IBinaryExpression TryGetBinaryExpression();
    private static ICSharpExpression ConstructExpression(IBinaryExpression binaryExpression);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ThisIsMemberInitializerFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private ICollectionInitializer myCollectionInitializer;
    public string Text { get; }
    public ThisIsMemberInitializerFix(NotResolvedCollectionInitializerError error);
    public ThisIsMemberInitializerFix(CollectionInitializerAppliedToNonCollectionError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static IPropertyInitializer TryCreateInitializerFromAssignment(CSharpElementFactory factory, ICSharpExpression argumentValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.AddPatternVariableAction")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ThisIsTypePatternFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private ICSharpExpression myExpression;
    [NullableAttribute("2")]
private ITypePattern myPattern;
    public string Text { get; }
    public ThisIsTypePatternFix(UnexpectedElementTypeError error);
    public ThisIsTypePatternFix(ConstantPatternExpressionIsNotConstantError error);
    public ThisIsTypePatternFix(TypePatternDesignationMissingError error);
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [PureAttribute]
private static bool MakeSenseToIntroduceDesignation(IPattern pattern);
    private static IBulbActionCommand RenamePatternVariable(ITypePattern typePattern);
    private static IType GetPatternType(ICSharpExpression rootExpression);
    [NullableContextAttribute("2")]
private static ICSharpExpression FindRootTypeExpression(ICSharpExpression expression);
    private static IReadOnlyList`1<string> GetNameSuggestions(ITypePattern pattern);
    [CompilerGeneratedAttribute]
internal static bool <FindRootTypeExpression>g__HasArgumentExpressions|13_0(IElementAccessExpression elementAccessExpression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ThrowCreatedExceptionFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private IObjectCreationExpression myExceptionCreationExpression;
    private bool myIsMultipleExceptionsCreated;
    public string Text { get; }
    public ThrowCreatedExceptionFix(ObjectCreationAsStatementWarning warning);
    public ThrowCreatedExceptionFix(IncorrectReturnTypeError error);
    public ThrowCreatedExceptionFix(InvalidNullCoalescingOperandsError error);
    public ThrowCreatedExceptionFix(CannotInferSwitchExpressionTypeError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    private static bool IsExceptionCreation(IObjectCreationExpression objectCreationExpression, PredefinedType predefinedType);
    private static bool CanBeConvertedToThrowExpressionOrStatement(IObjectCreationExpression objectCreationExpression);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ThrowNewExceptionFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private IStatementsOwner myBody;
    [NullableAttribute("2")]
private IArrowExpressionClause myArrowExpressionClause;
    public string Text { get; }
    public ThrowNewExceptionFix(MissingReturnStatementError error);
    public ThrowNewExceptionFix(MissingReturnStatementInAccessorError error);
    public ThrowNewExceptionFix(MissingReturnStatementInAnonymousFunctionError error);
    public ThrowNewExceptionFix(ReturnValueMissingError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static IBulbActionCommand AddThrowStatement(IStatementsOwner statementsOwner);
    private static IBulbActionCommand AddThrowExpression(IArrowExpressionClause arrowExpressionClause);
    private static IBulbActionCommand ExecuteHotspotSession(IObjectCreationExpression exceptionCreationExpression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ToAbstractClass2Fix : ToAbstractClassFixBase {
    [NullableAttribute("2")]
private IInterface myInterface;
    public string Text { get; }
    public ToAbstractClass2Fix(CannotCreateInstanceOfInterfaceError error);
    public virtual string get_Text();
    [NullableContextAttribute("2")]
protected virtual IInterfaceDeclaration GetInterfaceDeclaration();
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ToAbstractClassFix : ToAbstractClassFixBase {
    [CanBeNullAttribute]
private IDeclaration myDeclaration;
    private bool myReturnThis;
    public string Text { get; }
    public ToAbstractClassFix(IDeclaration declaration, bool returnThis);
    public ToAbstractClassFix(InterfaceInExtendsListExpectedError error);
    public ToAbstractClassFix(NotResolvedConstructorInitializerError error);
    public ToAbstractClassFix(ConstructorInInterfaceError error);
    public ToAbstractClassFix(CannotHaveEventAccessorsInInterfacesError error);
    public ToAbstractClassFix(CannotHaveEventInitializersInInterfacesError error);
    public ToAbstractClassFix(CannotHavePropertyInitializersInInterfacesError error);
    public ToAbstractClassFix(InterfaceCannotContainNonOverridableMemberError error);
    public ToAbstractClassFix(ExplicitImplementationInInterfaceError error);
    public ToAbstractClassFix(InterfaceCannotContainInstanceFieldError error);
    public ToAbstractClassFix(NonAbstractConvOrEqOperatorInInterfaceError error);
    public ToAbstractClassFix(CSharp80LanguageFeature2Error error);
    public ToAbstractClassFix(RuntimeAndLanguageVersionDoNotSupportDefaultInterfaceImplementationError error);
    public ToAbstractClassFix(RuntimeDoesNotSupportDefaultInterfaceImplementationError error);
    public virtual string get_Text();
    protected virtual IInterfaceDeclaration GetInterfaceDeclaration();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ToAbstractClassFixBase : QuickFixBase {
    [NullableContextAttribute("2")]
protected abstract virtual IInterfaceDeclaration GetInterfaceDeclaration();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.ToAutoPropertyAction")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ToAutoPropertyFix : ScopedQuickFixBase {
    private IPropertyDeclaration myDeclaration;
    public string Text { get; }
    public string ScopedText { get; }
    public bool IsReanalysisRequired { get; }
    private ToAutoPropertyFix(IPropertyDeclaration declaration);
    public ToAutoPropertyFix(ConvertToAutoPropertyWarning error);
    public ToAutoPropertyFix(ConvertToAutoPropertyWhenPossibleWarning error);
    public ToAutoPropertyFix(ConvertToAutoPropertyWithPrivateSetterWarning error);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool get_IsReanalysisRequired();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private sealed virtual override void JetBrains.ReSharper.Feature.Services.Intentions.Scoped.BulbActions.ISimpleScopedBulbAction.ExecutePsiTransactionInScopedExecution(ISolution solution);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ToClass2Fix : ToClassFixBase {
    [NullableAttribute("2")]
private IDeclaredType myDeclaredType;
    public ToClass2Fix(TypeArgumentIsNotReferenceTypeError error);
    public ToClass2Fix(NonReferenceTypeInLockStatementError error);
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
protected virtual IStruct GetStruct();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ToClassFix : ToClassFixBase {
    [NullableAttribute("2")]
private ICSharpTreeNode myElement;
    public ToClassFix(NotResolvedConstructorInitializerError error);
    public ToClassFix(CannotUseThisInClosureInStructError error);
    public ToClassFix(CannotUsePrimaryParameterInClosureInStructError error);
    public ToClassFix(CannotUsePrimaryParameterInClosureAlsoUsedInInstanceMemberInStructError error);
    public ToClassFix(DestructorOfNotClassTypeError error);
    public ToClassFix(StructMemberInitializerError error);
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
protected virtual IStruct GetStruct();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ToClassFixBase : ModernQuickFixBase {
    public string Text { get; }
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
protected abstract virtual IStruct GetStruct();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ToCompoundAssignmentFix : ModernScopedQuickFixBase {
    private IAssignmentExpression myAssignmentExpression;
    public string Text { get; }
    public ToCompoundAssignmentFix(ConvertToCompoundAssignmentWarning warning);
    public ToCompoundAssignmentFix(ConvertToNullCoalescingCompoundAssignment2Warning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.ToComputedPropertyAction")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ToComputedPropertyFix : ModernScopedNonIncrementalQuickFixBase {
    private IPropertyDeclaration myPropertyDeclaration;
    public string Text { get; }
    public bool IsReanalysisRequired { get; }
    public ToComputedPropertyFix(ReplaceAutoPropertyWithComputedPropertyWarning error);
    public virtual string get_Text();
    public virtual bool get_IsReanalysisRequired();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ToConstructorFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private IConstructorDeclaration myDeclaration;
    public string Text { get; }
    public ToConstructorFix(ConstructorNameNotMatchingClassNameError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ToDestructor2Fix : ModernQuickFixBase {
    private IMethodDeclaration myDeclaration;
    public string Text { get; }
    public ToDestructor2Fix(SuspiciousFinalizeMethodWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ToDestructorFix : ModernQuickFixBase {
    private IDestructorDeclaration myDeclaration;
    public string Text { get; }
    public ToDestructorFix(IncorrectDestructorNameError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ToDirectCastFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private IAsExpression myExpression;
    public static Key InstanceKey;
    public string Text { get; }
    public ToDirectCastFix(PossibleNullReferenceExceptionWarning error);
    public ToDirectCastFix(PossibleInvalidOperationExceptionWarning error);
    private static ToDirectCastFix();
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.ToExplicitFieldAction")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ToExplicitFieldFix")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ToExplicitFieldFix : ModernScopedQuickFixBase {
    [NullableAttribute("2")]
private ITypeMemberRegularParameterDeclaration myParameterDeclaration;
    public string Text { get; }
    public ToExplicitFieldFix(CapturedPrimaryConstructorParameterPassedToBaseWarning error);
    public ToExplicitFieldFix(CapturedPrimaryConstructorParameterIsMutableWarning error);
    public ToExplicitFieldFix(PrimaryConstructorParameterCaptureDisallowedWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IScopedFixingStrategy GetScopedFixingStrategy(ISolution solution, IHighlighting highlighting);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ToExplicitFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private IInterfaceQualificationOwner myQualificationOwner;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IReadOnlyList`1<OverridableMemberInstance> myInterfaceMembers;
    public string Text { get; }
    public ToExplicitFix(NotImplementNotPublicError error);
    public ToExplicitFix(InconsistentAccessibilityInMemberTypeError error);
    public ToExplicitFix(InconsistentAccessibilityInParameterTypeError error);
    public ToExplicitFix(InconsistentAccessibilityInReturnTypeError error);
    public ToExplicitFix(InconsistentAccessibilityInTypeArgumentError error);
    public ToExplicitFix(InconsistentAccessibilityInTypeParameterConstraintError error);
    private ToExplicitFix(ITypeMember typeMember);
    public ToExplicitFix(CannotImplementNotPublicInterfaceError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ToExplicitParameterFix : ModernScopedQuickFixBase {
    private ILocalRegularParameterDeclaration myParameterDeclaration;
    public string Text { get; }
    public ToExplicitParameterFix(ImplicitlyTypedDefaultParameterError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    protected virtual ITreeNode TryGetContextTreeNode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ToggleAwaitInForeachStatementFix : ModernQuickFixBase {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ICSharpExpression <collectionExpression>P;
    [CompilerGeneratedAttribute]
private bool <useAwaitForeach>P;
    public string Text { get; }
    [NullableContextAttribute("2")]
public ToggleAwaitInForeachStatementFix(ICSharpExpression collectionExpression, bool useAwaitForeach);
    public ToggleAwaitInForeachStatementFix(TypeIsNotEnumerableButIsAsyncEnumerableError error);
    public ToggleAwaitInForeachStatementFix(TypeIsNotAsyncEnumerableButIsEnumerableError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ToggleAwaitInUsingFix : ModernQuickFixBase {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ICSharpTreeNode <usingOwner>P;
    [CompilerGeneratedAttribute]
private bool <useAwaitUsing>P;
    public string Text { get; }
    [NullableContextAttribute("2")]
public ToggleAwaitInUsingFix(ICSharpTreeNode usingOwner, bool useAwaitUsing);
    public ToggleAwaitInUsingFix(AsyncDisposableTypeInUsingError error);
    public ToggleAwaitInUsingFix(DisposableTypeInAwaitUsingError error);
    public ToggleAwaitInUsingFix(UseAwaitUsingWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.TypeToVarAction")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.VarToTypeAction")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ToggleVarFix : ModernScopedQuickFixBase {
    private ITreeNode myDeclaration;
    private VarStyleSuggestion myWarningStyleSuggestion;
    private VariableStyle myDirection;
    public string Text { get; }
    public string ScopedText { get; }
    [NullableAttribute("2")]
public ITreeNode ReanalysisDependencyRoot { get; }
    public ToggleVarFix(UseVarOrTypeForBuiltInTypesWarning warning);
    public ToggleVarFix(UseVarOrTypeElsewhereWarning warning);
    public ToggleVarFix(UseVarOrTypeForSimpleTypesWarning warning);
    public ToggleVarFix(UseVarOrTypeForDeconstructionDeclarationsWarning warning);
    private ToggleVarFix(ITreeNode node, VarStyleSuggestion warningStyleSuggestion);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    [NullableContextAttribute("2")]
public virtual ITreeNode get_ReanalysisDependencyRoot();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IScopedFixingStrategy GetScopedFixingStrategy(ISolution solution, IHighlighting highlighting);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ToImplicitFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private IReference myReference;
    [NullableAttribute("2")]
private string myMemberName;
    public string Text { get; }
    public ToImplicitFix(CannotAccessExplicitImplementationError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ToLocalVariableFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private ILocalConstantDeclaration myConstantDeclaration;
    private bool myNoValueCheck;
    public string Text { get; }
    public ToLocalVariableFix(ConstantIsTypeParameterError error);
    public ToLocalVariableFix(ConstantInitializerIsNotConstantError error);
    public ToLocalVariableFix(ReferenceConstantInitializerIsNotNullError error);
    public ToLocalVariableFix(ConstantInitializerMissedError error);
    public ToLocalVariableFix(InvalidConstantTypeError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ToMethodGroupFix : ModernQuickFixBase {
    private ICSharpExpression myClosureExpression;
    private ICSharpExpression myExpression;
    public string Text { get; }
    public ToMethodGroupFix(ConvertClosureToMethodGroupWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ToNullCoalescingCompoundAssignmentFix : ModernScopedQuickFixBase {
    private INullCoalescingExpression myNullCoalescingExpression;
    public string Text { get; }
    public ToNullCoalescingCompoundAssignmentFix(ConvertToNullCoalescingCompoundAssignmentWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ToOrdinaryLocalVariableFix : ModernQuickFixBase {
    private IVariableInitializer myVariableInitializer;
    public string Text { get; }
    public ToOrdinaryLocalVariableFix(RefLocalWithValueInitializerError warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.ToPatternOverConstantValueCheckAction")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ToPatternOverConstantValueCheckFix : ModernQuickFixBase {
    private static Key`1<object> ourKey;
    [NullableAttribute("2")]
private ICSharpExpression myExpression;
    private bool myNullableUnwrap;
    public string Text { get; }
    public ToPatternOverConstantValueCheckFix(PossibleNullReferenceExceptionWarning warning);
    public ToPatternOverConstantValueCheckFix(PossibleInvalidOperationExceptionWarning warning);
    public ToPatternOverConstantValueCheckFix(NullReferenceReceiverWarning warning);
    public ToPatternOverConstantValueCheckFix(NullableValueTypeMayBeNullWarning warning);
    private static ToPatternOverConstantValueCheckFix();
    [NullableContextAttribute("2")]
private static IReferenceExpression TryFindContainingNullableValue(ICSharpExpression expression);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.ChangeTypeKindAction")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ToRecordStructFix : QuickFixBase {
    private ITypeElement myTypeElement;
    [NullableAttribute("2")]
private IDeclaration myDeclaration;
    public string Text { get; }
    public ToRecordStructFix(UsageOfDefaultStructEqualityWarning error);
    public ToRecordStructFix(DefaultStructEqualityIsUsedWarningBase error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ToRefLocalVariableFix : ModernQuickFixBase {
    private IVariableInitializer myVariableInitializer;
    public string Text { get; }
    public ToRefLocalVariableFix(ValueVariableWithRefInitializerError warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ToRegularArrayFix : ModernQuickFixBase {
    private IFieldDeclaration myDeclaration;
    public string Text { get; }
    public ToRegularArrayFix(FixedSizeBufferNotInStructError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ToStaticFieldFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private IReferenceExpression myReferenceExpression;
    public string Text { get; }
    public ToStaticFieldFix(IncorrectIncrementDecrementOperandError error);
    public ToStaticFieldFix(IncorrectAssignmentTargetError error);
    public ToStaticFieldFix(ByRefArgumentIsNotMutableVariableError error);
    public ToStaticFieldFix(ByRefArgumentIsNotReadableVariableError error);
    [NullableContextAttribute("2")]
private ToStaticFieldFix(ICSharpExpression expression);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
[PureAttribute]
private IConstantDeclaration FindConstantDeclaration();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ToStaticReadonlyFieldFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private IConstantDeclaration myDeclaration;
    private bool myNoValueCheck;
    public string Text { get; }
    public ToStaticReadonlyFieldFix(ConstantIsTypeParameterError error);
    public ToStaticReadonlyFieldFix(ConstantInitializerIsNotConstantError error);
    public ToStaticReadonlyFieldFix(ReferenceConstantInitializerIsNotNullError error);
    public ToStaticReadonlyFieldFix(ConstantInitializerMissedError error);
    public ToStaticReadonlyFieldFix(InvalidConstantTypeError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ToStringInArgumentFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private ICSharpArgument myArgument;
    public string Text { get; }
    public ToStringInArgumentFix(IncorrectArgumentTypeError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public static string GetText(ICSharpExpression expression);
    [NullableContextAttribute("2")]
public static bool IsAvailableEx(ICSharpExpression expression);
    public static void ExecuteEx(ICSharpExpression expression);
    private static IMethod GetConvertMethod(ICSharpExpression expression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ToStringInArrayElementFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private ICSharpExpression myExpression;
    public string Text { get; }
    public ToStringInArrayElementFix(IncorrectArrayElementTypeError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ToStringInAssignmentFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private IAssignmentExpression myAssignmentExpression;
    public string Text { get; }
    public ToStringInAssignmentFix(IncorrectAssignmentTypeError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ToStringInInitializerFix : ModernQuickFixBase {
    private ICSharpExpression myValue;
    public string Text { get; }
    public ToStringInInitializerFix(IncorrectInitializerTypeError error);
    public ToStringInInitializerFix(DeclarationToInitializerTypeMismatchError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ToStringInReturnFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private IReturnValueHolder myReturnValueHolder;
    public string Text { get; }
    public ToStringInReturnFix(IncorrectReturnTypeError error);
    public ToStringInReturnFix(IncorrectYieldReturnTypeError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.ToVoidMethodFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private IConstructorDeclaration myDeclaration;
    public string Text { get; }
    public ToVoidMethodFix(InterfaceCannotContainNonOverridableMemberError error);
    public ToVoidMethodFix(ConstructorInInterfaceError error);
    public ToVoidMethodFix(ConstructorNameNotMatchingClassNameError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.UnmarkNullnessFix : ModernScopedQuickFixBase {
    [NullableAttribute("2")]
private IAttributesOwnerDeclaration myOwnerDeclaration;
    [NullableAttribute("2")]
private IAttribute myAttribute;
    public string Text { get; }
    public string ScopedText { get; }
    public UnmarkNullnessFix(AnnotationRedundancyInHierarchyWarning warning);
    public UnmarkNullnessFix(AnnotationRedundancyAtValueTypeWarning warning);
    public UnmarkNullnessFix(ContainerAnnotationRedundancyWarning warning);
    public UnmarkNullnessFix(AnnotationConflictInHierarchyWarning warning);
    public UnmarkNullnessFix(NotObservableAnnotationRedundancyWarning warning);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.UnwrapFromAsyncAwaitFix : ModernScopedQuickFixBase {
    private ICSharpDeclaration myAsyncDeclaration;
    private IType myReturnType;
    private IReadOnlyList`1<IAwaitExpression> myAwaitExpressions;
    private bool myVoidReturnExpected;
    public string Text { get; }
    public string ScopedText { get; }
    public UnwrapFromAsyncAwaitFix(ReplaceAsyncWithTaskReturnWarning warning);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.UnwrapFromDelegateCreationFix : ModernScopedQuickFixBase {
    private ICSharpExpression myOperand;
    private IInvocationExpression myInvocationExpression;
    public string Text { get; }
    public string ScopedText { get; }
    public UnwrapFromDelegateCreationFix(RedundantImmediateDelegateInvocationWarning error);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.UnwrapFromTupleFix : ModernQuickFixBase {
    private ITreeNode myTupleTreeNode;
    public string Text { get; }
    public UnwrapFromTupleFix(TupleMustContainAtLeastTwoElementsError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static ITreeNode UnwrapTupleUsage(ITupleTypeUsage typeUsage);
    private static ITreeNode UnwrapFromTupleExpression(ITupleExpression tupleExpression);
    private static void UpdateArrayRanks(IRankSpecifier lastRankSpecifier, IArrayTypeUsage arrayRanksSource);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.UsageChecking.CSharpCallSiteFieldToConstConverter : object {
    public sealed virtual void Convert(IReference callSiteReference, IField const);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.UsageChecking.CSharpDiscardParameterInAnonymousFunctionFix : ModernScopedNonIncrementalQuickFixBase {
    private bool myIsScopedFixingAvailable;
    private IDeclaration myDeclaration;
    public string Text { get; }
    public bool IsReanalysisRequired { get; }
    public FileCollectorInfo FileCollectorInfo { get; }
    public CSharpDiscardParameterInAnonymousFunctionFix(UnusedParameterWarningBase error);
    public virtual string get_Text();
    public virtual bool get_IsReanalysisRequired();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ITreeNode TryGetContextTreeNode();
    public virtual FileCollectorInfo get_FileCollectorInfo();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.UsageChecking.CSharpFixTypeHelper : object {
    public sealed virtual bool IsArrayLengthAccess(IReference reference);
    public sealed virtual void FixArrayLengthAccess(IReference reference);
    public sealed virtual bool NaturalizeArgumentExpressionTypeBeforeChangingTheParameterType(IReference reference, IParameter parameter);
    public sealed virtual IEnumerable`1<ILocalVariable> LocalsToCorrectType(IDeclaredElement element, IType newType, IExpression usage);
    [CompilerGeneratedAttribute]
internal static bool <NaturalizeArgumentExpressionTypeBeforeChangingTheParameterType>g__TryNaturalize|2_0(ICSharpArgumentsOwner argumentsOwner, <>c__DisplayClass2_0& );
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.UsageChecking.CSharpMakeReturnTypeVoidHelper : object {
    public sealed virtual IType GetVoidReturnType(IDeclaration declaration);
    public sealed virtual void PrepareBodyForReturnRemove(IDeclaration declaration);
    public sealed virtual bool IsReturnStatement(IStatement statement, IExpression& returnValue);
    public sealed virtual bool IsReturnScope(ITreeNode node);
    public sealed virtual void RemoveReturnValue(IStatement statement, IStatement& expressionStatementLeft);
    public sealed virtual string GetQuickFixText(IDeclaration declaration);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.UsageChecking.CSharpMemberFromParameterHelper : object {
    private static ValueTuple`2[] ourPreCSharp6AutoPropertyOptions;
    private static ValueTuple`2[] ourSinceCSharp6AutoPropertyOptions;
    private static ValueTuple`2[] ourReadonlyStructAutoPropertyOptions;
    public bool CaseSensitive { get; }
    public string FieldPattern { get; }
    public bool IsAccessorsWithDifferentAccessSupported { get; }
    private static CSharpMemberFromParameterHelper();
    public sealed virtual IEnumerable`1<IStatement> BodyStatements(IParametersOwnerDeclaration constructorDeclaration);
    public sealed virtual IExpression BodyExpression(IParametersOwnerDeclaration constructorDeclaration);
    public sealed virtual IEnumerable`1<ITypeMemberDeclaration> NeighbourDeclarations(IParametersOwnerDeclaration constructorDeclaration);
    public sealed virtual bool IsMemberAssignment(IStatement statement, ITypeMember& member, IParameter& parameter);
    public sealed virtual bool IsMemberAssignment(IExpression expression, ITypeMember& member, IParameter& parameter);
    public sealed virtual bool IsInitializedInDeclaration(ITypeMember typeMember, IParameter& parameter, ITreeNode& assignmentNode);
    public sealed virtual bool IsMemberWithState(ITypeMember typeMember);
    public sealed virtual bool CanInitialize(ITypeMember typeMember);
    [CanBeNullAttribute]
private static IParameter TryGetParameterFromAssignmentSource(ICSharpExpression sourceExpression);
    public sealed virtual bool IsCheckOfCodeInvariant(IStatement statement);
    public sealed virtual bool IsPrimaryConstructor(IConstructor constructor, Boolean& isRecord);
    public sealed virtual bool IsPrimaryConstructor(IParametersOwnerDeclaration constructorDeclaration);
    public sealed virtual void EnsureStatementBody(IParametersOwnerDeclaration constructorDeclaration);
    public sealed virtual void AddAssignmentToBody(IParametersOwnerDeclaration constructorDeclaration, IStatement anchorStatement, bool insertBefore, IParameter parameter, ITypeMember member);
    public sealed virtual bool get_CaseSensitive();
    public sealed virtual string get_FieldPattern();
    public sealed virtual bool get_IsAccessorsWithDifferentAccessSupported();
    public sealed virtual bool IsGetOnlyAutoPropertiesSupported(ITreeNode context);
    public sealed virtual ValueTuple`2[] GetAutoPropertyAccessRightsOptions(ITreeNode context);
    public sealed virtual string GetAutoPropertyPattern(ValueTuple`2<AccessRights, AccessRights> propertyAccessRights);
    public sealed virtual string GetAutoPropertyDescription(ValueTuple`2<AccessRights, AccessRights> propertyAccessRights);
    public sealed virtual ITypeMemberDeclaration AddTypeMemberDeclaration(ITypeDeclaration targetTypeDeclaration, ITypeMemberDeclaration anchorMember, bool insertBefore, string pattern, string name, IType type);
    public sealed virtual void AddConstructorDeclarationStubToStruct(ITypeDeclaration structDeclaration);
    public sealed virtual ITypeMemberDeclaration AddConstructorDeclaration(ITypeDeclaration typeDeclaration);
    public sealed virtual bool HasChainedConstructorInitializer(ITypeMemberDeclaration ctorDeclaration, Int32& argumentsCount, IConstructor& targetConstructor);
    public sealed virtual void EnsureHasChainedConstructorInitializer(ITypeMemberDeclaration ctorDeclaration);
    public sealed virtual void PassParameterToChainedConstructorInitializer(ITypeMemberDeclaration ctorDeclaration, string parameterName, ParameterKind kind, int atIndex);
    public sealed virtual IParameterDeclaration AddConstructorParameter(ITypeMemberDeclaration ctorDeclaration, string parameterName, ParameterKind kind, IType type, int atIndex);
    public sealed virtual bool IsParameterPassedByChain(ITypeMemberDeclaration ctorDeclaration, IParameterDeclaration parameterDeclaration, Int32& atIndex);
    public sealed virtual IConstructor TryGetPrimaryConstructor(ITypeElement typeElement);
    public sealed virtual bool IsParameterUsedImplicitly(IParameter parameter);
    public sealed virtual IParameter TryFindPrimaryConstructorParameterForExplicitMemberWithoutInitializer(ITypeMemberDeclaration typeMemberDeclaration);
    public sealed virtual void InitializeExplicitMemberByPrimaryConstructorParameter(ITypeMemberDeclaration typeMemberDeclaration, IParameter parameter);
    public sealed virtual bool HasArgumentToChainedConstructorParameter(ITypeMemberDeclaration ctorDeclaration, IParameter matchingParameter);
    public sealed virtual bool CanBeAssignedFromParameter(ITypeOwner typeOwner, IParameter parameter, ITreeNode context);
    public sealed virtual void ReplaceAssignmentSourceWithParameter(ITreeNode assignmentNode, IParameter parameter);
    public sealed virtual bool HasDeclarationExpressionsWithUsagesWithExternalUsages(ITreeNode assignmentNode);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.UsageChecking.CSharpRemoveLabelFix : ModernScopedNonIncrementalQuickFixBase {
    [NullableAttribute("2")]
private ILabelDeclaration myDeclaration;
    public string Text { get; }
    public string ScopedText { get; }
    public bool IsReanalysisRequired { get; }
    public CSharpRemoveLabelFix(UnusedLabelWarning error);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool get_IsReanalysisRequired();
    public virtual bool IsAvailable(IUserDataHolder userDataHolder);
    [NullableContextAttribute("2")]
protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.UsageChecking.CSharpRemoveUnusedVarHelper : object {
    public sealed virtual bool CanRemoveVariableDeclaration(IDeclaration declaration);
    [NullableContextAttribute("2")]
public sealed virtual void RemoveVariableDeclaration(IDeclaration declaration, ITreeNode& rangeToHighlight, Action& additionalUndoableAction);
    public sealed virtual bool CanRemoveUsage(ITreeNode usage);
    [NullableContextAttribute("2")]
private static ICSharpExpression GetTopLevelExpression(ICSharpExpression expression);
    [NullableContextAttribute("2")]
public sealed virtual void RemoveUsage(ITreeNode usage, IDeclaredElement variableElement, ITreeNode& rangeToHighlight);
    private static void ReplaceOutParameterWithDiscard(ICSharpArgument argument, IDeclaredElement variableElement);
    [NullableContextAttribute("2")]
private static ITreeNode RemoveUsageUnderAssignment(IAssignmentExpression assignmentExpression, IDeclaredElement variableElement);
    private static void RemoveConstantDeclaration(IDeclarationStatement declarationStatement, ILocalConstantDeclaration constantDeclaration);
    private static void RemoveVariableDeclaration(IDeclarationStatement declarationStatement, ILocalVariableDeclaration variableDeclaration, ITreeNode& rangeToHighlight, Action& additionalUndoableAction);
    private static void RemoveUsingDeclaration(IUsingStatement usingStatement, ILocalVariableDeclaration variableDeclaration);
    private static void RemoveForDeclaration(IForStatement forStatement, ILocalVariableDeclaration variableDeclaration, ITreeNode& rangeToHighlight);
    [NullableContextAttribute("2")]
private static void RemoveStatement(ICSharpStatement statement);
    private static void RemoveDesignation(IVariableDesignation variableDesignation);
    private static void DiscardVarPatternVariable(IVarPattern varPattern, IVariableDesignation variableDesignation);
    private static void DiscardTypePatternVariable(ITypePattern typePattern, IVariableDesignation variableDesignation);
    private static void DiscardDeclarationExpressionVariable(IDeclarationExpression declarationExpression, IVariableDesignation variableDesignation);
    [NullableContextAttribute("2")]
private static void ApplyDiscardDesignationStyle(IDeclarationExpression parentDeclarationExpression);
    [PureAttribute]
private static bool CanReplaceWithDiscardDesignation(IVariableDesignation variableDesignation);
    private static IDiscardDesignation OptimizeFullyDiscardedParenthesizedDesignation(IParenthesizedVariableDesignation parenthesizedDesignation);
    [MustUseReturnValueAttribute]
private static IDeclarationExpression OptimizeFullyDiscardedDeconstructionExpression(ITupleExpression tupleExpression);
    [PureAttribute]
private static IDiscardDesignation CreateDiscardDesignation(ITreeNode context);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal static ICSharpExpression <GetTopLevelExpression>g__UnwrapParenthesizedExpression|3_0(ICSharpExpression expression);
    [CompilerGeneratedAttribute]
internal static bool <RemoveUsageUnderAssignment>g__IsInsideActionLambdaWhileTheVariableIsOutside|6_0(<>c__DisplayClass6_0& );
    [CompilerGeneratedAttribute]
internal static ICSharpExpression <RemoveUsageUnderAssignment>g__RemoveRefExpression|6_1(ICSharpExpression expression);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal static bool <RemoveVariableDeclaration>g__MakeSenseToRemove|8_1(ICSharpExpression expression);
    [CompilerGeneratedAttribute]
internal static bool <OptimizeFullyDiscardedDeconstructionExpression>g__CanReplaceWithDiscardDeclarationExpression|19_0(<>c__DisplayClass19_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.UsageChecking.CSharpToConstFix : ModernQuickFixBase {
    private IDeclaration myDeclaration;
    public string Text { get; }
    public CSharpToConstFix(ConvertToConstantWarningBase error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[ShellComponentAttribute("16")]
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.UsageChecking.CSharpUsageCheckingCleanupItemsProvider : object {
    public sealed virtual void Register(IHighlightingCleanupItemsRegistrar registrar);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.UsageChecking.CSharpUsageCheckingWarningsQuickfixesCodeCleanupRegistration : object {
    public sealed virtual void Register(IHighlightingCleanupItemsRegistrar registrar);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.UsageChecking.CSharpUsageCheckingWarningsQuickfixesQuickFixRegistration : object {
    public IEnumerable`1<Type> Dependencies { get; }
    public sealed virtual IEnumerable`1<Type> get_Dependencies();
    public sealed virtual void Register(IQuickFixesRegistrar table);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.UsageChecking.IndicateUnusedVariableWithNameFix : ModernQuickFixBase {
    private IDeclaration myDeclaration;
    public string Text { get; }
    public IndicateUnusedVariableWithNameFix(UnusedVariableWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [PureAttribute]
private static IList`1<string> GetUniqueSpecialNames(IDeclaration declaration, ISolution solution);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.CollectionInitializerToAddsAction")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.UseAddsFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private ICollectionInitializer myCollectionInitializer;
    public string Text { get; }
    public UseAddsFix(CSharp30LanguageFeatureError error);
    public UseAddsFix(UsingStatementResourceInitializationWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.UseArrayCreationExpressionAction")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.UseArrayCreationExpressionFix : ModernQuickFixBase {
    private ILocalVariableDeclaration myVariableDeclaration;
    public string Text { get; }
    public UseArrayCreationExpressionFix(ImplicitlyTypeVariableShouldHaveExpressionInitializerError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.UseArrayEmptyMethodFix : ModernScopedQuickFixBase {
    private IArrayCreationExpression myArrayCreationExpression;
    private IMethod myArrayEmptyMethod;
    public string Text { get; }
    public string ScopedText { get; }
    public UseArrayEmptyMethodFix(UseArrayEmptyMethodWarning warning);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private IType GetElementType();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.UseObjectInitializerAction")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.ObjectInitializerToAssignmentsAction")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.UseAssignmentsFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private IObjectInitializer myObjectInitializer;
    private string myText;
    public string Text { get; }
    public UseAssignmentsFix(CSharp30LanguageFeatureError error);
    public UseAssignmentsFix(UsingStatementResourceInitializationWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.UseAsyncOverloadFix : ModernScopedQuickFixBase {
    private IReferenceExpression myInvokedExpression;
    private IFunction myAsyncOverload;
    public string Text { get; }
    public string ScopedText { get; }
    public UseAsyncOverloadFix(MethodHasAsyncOverloadWarning warning);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.UseAwaitUsingFix : ModernScopedQuickFixBase {
    private ICSharpTreeNode myUsingOwner;
    public string Text { get; }
    public UseAwaitUsingFix(UseAwaitUsingWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.AutoPropertyToBackingFieldAction")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.UseBackingFieldFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private IPropertyDeclaration myPropertyDeclaration;
    public string Text { get; }
    public UseBackingFieldFix(NonAbstractAccessorWithoutBodyError error);
    public UseBackingFieldFix(AutoPropertyMustOverrideAllAccessorsError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.UseBaseParameterTypeFix : FixOverridableFixBase {
    [NullableAttribute("2")]
private PsiLanguageType myLanguageType;
    [NullableAttribute("2")]
private IType myType;
    [NullableAttribute("2")]
private IParameter myParameter;
    private bool myIsNullabilityMismatch;
    public string Text { get; }
    [NullableContextAttribute("2")]
private UseBaseParameterTypeFix(IParameter parameter, IType correctType, PsiLanguageType languageType);
    public UseBaseParameterTypeFix(CannotChangeTupleNamesInOverrideError error);
    public UseBaseParameterTypeFix(NotImplementAnotherTupleNamesError error);
    public UseBaseParameterTypeFix(NullabilityMismatchInParameterTypeOnOverrideWarning warning);
    public UseBaseParameterTypeFix(NullabilityMismatchInParameterTypeOnImplicitImplementationWarning warning);
    public UseBaseParameterTypeFix(NullabilityMismatchInParameterTypeOnExplicitImplementationWarning warning);
    public UseBaseParameterTypeFix(TopLevelNullabilityMismatchInParameterTypeOnOverrideWarning warning);
    public UseBaseParameterTypeFix(TopLevelNullabilityMismatchInParameterTypeOnImplicitImplementationWarning warning);
    public UseBaseParameterTypeFix(TopLevelNullabilityMismatchInParameterTypeOnExplicitImplementationWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.UseBaseRefnessFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private ICSharpTypeMemberDeclaration myDeclaration;
    private ReferenceKind myBaseReferenceKind;
    public string Text { get; }
    [NullableContextAttribute("2")]
private UseBaseRefnessFix(ICSharpTypeMemberDeclaration declaration, ReferenceKind baseReferenceKind);
    public UseBaseRefnessFix(CannotChangeRefnessInOverrideError error);
    public UseBaseRefnessFix(NotImplementAnotherRefnessError error);
    public virtual string get_Text();
    [PureAttribute]
public static string ReturnByReferenceKind(ReferenceKind referenceKind);
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.UseBaseReturnTypeFix : FixOverridableFixBase {
    [NullableAttribute("2")]
private PsiLanguageType myLanguageType;
    [NullableAttribute("2")]
private IDeclaredElement myBaseMember;
    private bool myIsNullabilityMismatch;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IType <Type>k__BackingField;
    [NullableAttribute("2")]
private IType Type { get; }
    public string Text { get; }
    [NullableContextAttribute("2")]
private UseBaseReturnTypeFix(ITypeMember element, IType correctType, IDeclaredElement baseMember, PsiLanguageType languageType);
    public UseBaseReturnTypeFix(NotImplementAnotherReturnTypeError error);
    public UseBaseReturnTypeFix(PropertyNotImplementAnotherReturnTypeError error);
    public UseBaseReturnTypeFix(CannotChangeReturnTypeInOverrideError error);
    public UseBaseReturnTypeFix(CannotChangeReturnTypeInWriteablePropertyError error);
    public UseBaseReturnTypeFix(RuntimeWithoutCovariantReturnsError error);
    public UseBaseReturnTypeFix(CannotChangeTupleNamesInOverrideError error);
    public UseBaseReturnTypeFix(NotImplementAnotherTupleNamesError error);
    public UseBaseReturnTypeFix(NullabilityMismatchInTypeOnOverrideWarning warning);
    public UseBaseReturnTypeFix(NullabilityMismatchInReturnTypeOnOverrideWarning warning);
    public UseBaseReturnTypeFix(TopLevelNullabilityMismatchInReturnTypeOnOverrideWarning warning);
    public UseBaseReturnTypeFix(NullabilityMismatchInParameterTypeOnOverrideWarning warning);
    public UseBaseReturnTypeFix(TopLevelNullabilityMismatchInParameterTypeOnOverrideWarning warning);
    public UseBaseReturnTypeFix(NullabilityMismatchInTypeOnImplicitImplementationWarning warning);
    public UseBaseReturnTypeFix(NullabilityMismatchInReturnTypeOnImplicitImplementationWarning warning);
    public UseBaseReturnTypeFix(TopLevelNullabilityMismatchInReturnTypeOnImplicitImplementationWarning warning);
    public UseBaseReturnTypeFix(NullabilityMismatchInParameterTypeOnImplicitImplementationWarning warning);
    public UseBaseReturnTypeFix(TopLevelNullabilityMismatchInParameterTypeOnImplicitImplementationWarning warning);
    public UseBaseReturnTypeFix(NullabilityMismatchInTypeOnExplicitImplementationWarning warning);
    public UseBaseReturnTypeFix(NullabilityMismatchInReturnTypeOnExplicitImplementationWarning warning);
    public UseBaseReturnTypeFix(TopLevelNullabilityMismatchInReturnTypeOnExplicitImplementationWarning warning);
    public UseBaseReturnTypeFix(NullabilityMismatchInParameterTypeOnExplicitImplementationWarning warning);
    public UseBaseReturnTypeFix(TopLevelNullabilityMismatchInParameterTypeOnExplicitImplementationWarning warning);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private IType get_Type();
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.UseCollectionExpressionAction")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.UseCollectionExpressionFix : ModernScopedQuickFixBase {
    private ITreeNode myCollectionCreationNode;
    private bool myAppendTo;
    public string Text { get; }
    public string ScopedText { get; }
    public UseCollectionExpressionFix(UseCollectionExpressionWarning error);
    public UseCollectionExpressionFix(AppendToCollectionExpressionWarning error);
    public UseCollectionExpressionFix(UseCollectionExpressionForArrayInitializerWarning error);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IScopedFixingStrategy GetScopedFixingStrategy(ISolution solution, IHighlighting highlighting);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.UseObjectInitializerAction")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.UseCollectionInitializerFix : ModernScopedQuickFixBase {
    private IObjectCreationExpression myObjectCreationExpression;
    public string Text { get; }
    public UseCollectionInitializerFix(UseCollectionInitializerWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.NormalToConditionalAccessAction")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.UseConditionalAccessFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private ICSharpExpression myExpression;
    public string Text { get; }
    public UseConditionalAccessFix(PossibleNullReferenceExceptionWarning error);
    public UseConditionalAccessFix(PossibleInvalidOperationExceptionWarning error);
    public UseConditionalAccessFix(NullReferenceReceiverWarning warning);
    public UseConditionalAccessFix(NullableValueTypeMayBeNullWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.UseConfigureAwaitFalseAction")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.UseConfigureAwaitFalseFix : ModernScopedQuickFixBase {
    private IAwaitReferencesOwner myAwaitOwner;
    public string Text { get; }
    public string ScopedText { get; }
    public UseConfigureAwaitFalseFix(UseConfigureAwaitFalseWarning error);
    public UseConfigureAwaitFalseFix(UseConfigureAwaitFalseForAsyncDisposableWarning error);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.UseCorrectInterpolatedStringPrefixFix : ModernQuickFixBase {
    private IInterpolatedStringExpression myExpression;
    public string Text { get; }
    public UseCorrectInterpolatedStringPrefixFix(IncorrectInterpolatedStringPrefixError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.UseDiscardAssignmentFix : ModernScopedQuickFixBase {
    private IMultipleLocalVariableDeclaration myLocalVariableDeclaration;
    public string Text { get; }
    public UseDiscardAssignmentFix(UseDiscardAssignmentWarning warning);
    public virtual string get_Text();
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.UseEmptyBlockFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private ICSharpStatement myStatement;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public string Text { get; }
    public UseEmptyBlockFix(MisleadingBodyLikeStatementWarning error);
    public UseEmptyBlockFix(MistakenEmptyStatementWarning error);
    [CompilerGeneratedAttribute]
public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.UseEmptyTypesFieldFix : ModernScopedQuickFixBase {
    private IArrayCreationExpression myArrayCreationExpression;
    private IField myEmptyTypesField;
    public string Text { get; }
    public UseEmptyTypesFieldFix(UseEmptyTypesFieldWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.UseEquals2Fix : ModernQuickFixBase {
    [NullableAttribute("2")]
private ICSharpExpression myExpression;
    public string Text { get; }
    public UseEquals2Fix(CannotApplyEqualityOperatorToTypeWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
private IEqualityExpression GetEqualityExpression();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.UseEqualsFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private IInvocationExpression myExpression;
    public string Text { get; }
    public UseEqualsFix(ReferenceEqualsWithValueTypeWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.UseEventArgsEmptyFieldFix : ModernScopedQuickFixBase {
    private IObjectCreationExpression myObjectCreationExpression;
    private IField myEventArgsEmptyField;
    public string Text { get; }
    public UseEventArgsEmptyFieldFix(UseEventArgsEmptyFieldWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.UseExplicitArrayAction")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.UseExplicitArrayTypeFix : object {
    [NullableAttribute("2")]
private IArrayCreationExpression myExpression;
    [NullableAttribute("2")]
private IType myKnownBestType;
    public UseExplicitArrayTypeFix(CannotInferImplicitlyTypedArrayTypeError error);
    public UseExplicitArrayTypeFix(CoVariantArrayConversionWarning error);
    public UseExplicitArrayTypeFix(CSharp30LanguageFeatureError error);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.CSharp.QuickFixes.UseExplicitArrayTypeFix/<CreateBulbItems>d__5")]
public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    private IList`1<IType> GetTypes();
    private static void ForEachInitializer(IList`1<IVariableInitializer> initializerValues, Action`1<ICSharpExpression> action);
    private IList`1<IType> GetTypes(IEnumerable`1<ICSharpExpression> expressions);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <GetTypes>b__9_0(ICSharpExpression expression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.UseExplicitCastInForeachFix : ModernQuickFixBase {
    [CompilerGeneratedAttribute]
private IForeachStatement <foreachStatement>P;
    public string Text { get; }
    public UseExplicitCastInForeachFix(IForeachStatement foreachStatement);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
private IType GetCollectionElementType();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private string GetNewIteratorName(IType elementType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.UseIndexedPropertyFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private IInvocationExpression myInvocationExpression;
    [NullableAttribute("2")]
private IProperty myIndexedProperty;
    public string Text { get; }
    public UseIndexedPropertyFix(UseIndexedPropertyWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.UseIndexFromEndExpressionFix : ModernScopedQuickFixBase {
    private ICSharpExpression myIndexExpression;
    private ICSharpExpression myIndexFromEndValue;
    public string Text { get; }
    public UseIndexFromEndExpressionFix(UseIndexFromEndExpressionWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.UseIsOperatorFix : ModernQuickFixBase {
    private IInvocationExpression myInvocationExpression;
    private ICSharpExpression myCheckedExpression;
    [NullableAttribute("2")]
private ITypeUsage myTypeUsage;
    public string Text { get; }
    public UseIsOperatorFix(CanSimplifyIsInstanceOfTypeWarning warning);
    public UseIsOperatorFix(CanSimplifyIsAssignableFromWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.UseMethodIsInstanceOfTypeFix : ModernQuickFixBase {
    private IInvocationExpression myInvocationExpression;
    [NullableAttribute("2")]
private ICSharpExpression myArgumentExpression;
    public string Text { get; }
    public UseMethodIsInstanceOfTypeFix(CanSimplifyIsAssignableFromWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.UseNameofExpressionFix : ModernScopedQuickFixBase {
    private ITreeNodePointer`1<ICSharpLiteralExpression> myLiteralExpressionPointer;
    private IReferencePointer myReferencePointer;
    public string Text { get; }
    public string ScopedText { get; }
    public UseNameofExpressionFix(UseNameofExpressionWarning error);
    public UseNameofExpressionFix(UseNameofExpressionForPartOfTheStringWarning error);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IScopedFixingStrategy GetScopedFixingStrategy(ISolution solution, IHighlighting highlighting);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.UseNameofForDependencyPropertyFix : ModernScopedQuickFixBase {
    private ICSharpArgument myNameArgument;
    private string myPropertyName;
    public string Text { get; }
    public UseNameofForDependencyPropertyFix(UseNameofForDependencyPropertyWarning warning);
    public virtual string get_Text();
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.UseNameOfInsteadOfTypeOfFix : ModernScopedQuickFixBase {
    private ITypeElement myTypeElement;
    private IReferenceExpression myReferenceExpression;
    public string Text { get; }
    public UseNameOfInsteadOfTypeOfFix(UseNameOfInsteadOfTypeOfWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.UseNegatedPatternFix : ModernScopedQuickFixBase {
    private IUnaryOperatorExpression myUnaryOperatorExpression;
    public string Text { get; }
    public UseNegatedPatternFix(UseNegatedPatternInIsExpressionWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.UseNullableAnnotationInsteadOfAnAttributeFix : ModernScopedQuickFixBase {
    private IAttribute myAttribute;
    public string Text { get; }
    public UseNullableAnnotationInsteadOfAnAttributeFix(UseNullableAnnotationInsteadOfAttributeWarning warning);
    public virtual string get_Text();
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.UseNullableAttributesSupportedByCompilerFix : ModernScopedQuickFixBase {
    private IAttribute myAttribute;
    public string Text { get; }
    public UseNullableAttributesSupportedByCompilerFix(UseNullableAttributesSupportedByCompilerWarning warning);
    public virtual string get_Text();
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private void AddAttribute(IAttributesOwnerDeclaration targetDeclaration, AttributeTarget target, FlowAnalysisAnnotations annotation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.UseNullableReferenceTypesSyntaxFix : ModernScopedQuickFixBase {
    private IAttribute myAttribute;
    public string Text { get; }
    public UseNullableReferenceTypesSyntaxFix(UseNullableReferenceTypesAnnotationSyntaxWarning warning);
    public virtual string get_Text();
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static void RemoveNullableAnnotation(ITypeUsage targetTypeUsage, bool arrayElementAnnotation);
    private static void AddNullableAnnotation(IAttributesOwnerDeclaration attributesOwnerDeclaration, ITypeUsage targetTypeUsage, bool arrayElementAnnotation);
    private static void AddDisambiguationTypeParameterConstraint(IAttributesOwnerDeclaration attributesOwnerDeclaration, ITypeUsage targetTypeUsage);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.UseNullableShortFormFix : ModernScopedQuickFixBase {
    private IReferenceName myReferenceName;
    private IDeclaredType myType;
    public string Text { get; }
    public string ScopedText { get; }
    public bool IsReanalysisRequired { get; }
    public UseNullableShortFormFix(ConvertNullableToShortFormWarning error);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool get_IsReanalysisRequired();
    public virtual bool IsAvailable(IUserDataHolder userDataHolder);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.UseNullOrEmptyFix : BulbActionBase {
    [CompilerGeneratedAttribute]
private ReplaceWithStringIsNullOrEmptyWarning <error>P;
    public string Text { get; }
    public UseNullOrEmptyFix(ReplaceWithStringIsNullOrEmptyWarning error);
    public virtual string get_Text();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.IfToNullPropagationAction")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.UseNullPropagationFix : ModernScopedQuickFixBase {
    private ICSharpStatement myStatement;
    private NullPropagatingPattern myNullPropagatingPattern;
    public string Text { get; }
    public UseNullPropagationFix(UseNullPropagationWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.UseObjectInitializerAction")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.UseObjectInitializerFix : ModernScopedQuickFixBase {
    private IObjectCreationExpression myObjectCreationExpression;
    public string Text { get; }
    public UseObjectInitializerFix(UseObjectInitializerWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public static IInitializerElement TryAddInitializersFromAfterObjectCreationExpression(IObjectCreationExpression objectCreationExpression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.UsePatternMatchingFix : ModernScopedQuickFixBase {
    private ILocalVariableDeclaration myLocalVariableDeclaration;
    private ICSharpExpression myNullCheckedExpression;
    private bool myProduceNegatedExpression;
    public string Text { get; }
    public UsePatternMatchingFix(UsePatternMatchingWarning warning);
    public UsePatternMatchingFix(UseNegatedPatternMatchingWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static IAsExpression GetAsExpressionInitializer(ILocalVariableDeclaration variableDeclaration);
    private void UnliftNullablePatternMatching(ISingleVariableDesignation singleVariableDesignation, IType targetType);
    private static void FixVariableReferences(ISingleVariableDesignation variableDesignation, IType targetType, IEnumerable`1<ExpressionReplaceData> references);
    private IReadOnlyList`1<ExpressionReplaceData> CollectReferencesToReplace(ISingleVariableDesignation newVariableDesignation, IEnumerable`1<IReference> references);
    private static bool IsNullableValueAccess(IReferenceExpression referenceExpression);
    private static bool CanUnliftReferenceType(IReferenceExpression referenceExpression, IReferenceExpression variableReference);
    private string ChooseVariableName(ILocalVariableDeclaration replacedVariableDeclaration);
    private ILocalVariableDeclaration FindVariableToReplace(IEnumerable`1<IReference> references);
    private static IReadOnlyList`1<ExpressionReplaceData> CreateSimpleReferenceReplaceData(ILocalVariableDeclaration variableToReplace);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <FindVariableToReplace>b__17_1(ITreeNode x);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.UsePositionalDeconstructionPatternAction")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.UsePositionalDeconstructionPatternFix : ModernScopedQuickFixBase {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IReadOnlyList`1<ISubpattern> myComponents;
    [NullableAttribute("2")]
private IRecursivePattern myRecursivePattern;
    public string Text { get; }
    private UsePositionalDeconstructionPatternFix(IReadOnlyList`1<ISubpattern> components);
    public UsePositionalDeconstructionPatternFix(MoveToExistingPositionalDeconstructionPatternWarning warning);
    public UsePositionalDeconstructionPatternFix(UsePositionalDeconstructionPatternWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.UseProvidedContextFix : ModernQuickFixBase {
    private ContextSuggestion mySuggestion;
    public string Text { get; }
    public UseProvidedContextFix(ContextValueIsProvidedWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.UseRangeIndexerFix : ModernScopedQuickFixBase {
    private IInvocationExpression myInvocationExpression;
    private ICSharpExpression myStartIndex;
    private bool myIsStartIndexFromEnd;
    [NullableAttribute("2")]
private ICSharpExpression myEndIndex;
    private bool myIsEndIndexFromEnd;
    public string Text { get; }
    public UseRangeIndexerFix(ReplaceSliceWithRangeIndexerWarning warning);
    public UseRangeIndexerFix(ReplaceSubstringWithRangeIndexerWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal static ICSharpExpression <ExecutePsiTransaction>g__CreateBound|11_0(CSharpElementFactory factory, bool isStartBound, ICSharpExpression indexValue, bool isFromEnd);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.UseReferenceEqualsFix : ModernQuickFixBase {
    private IEqualityExpression myExpression;
    public string Text { get; }
    public UseReferenceEqualsFix(PossibleUnintendedReferenceComparisonWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.UseRefInitializerFix : ModernQuickFixBase {
    private IVariableInitializer myVariableInitializer;
    public string Text { get; }
    public UseRefInitializerFix(RefLocalWithValueInitializerError warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.UseResolveContextFix : ModernQuickFixBase {
    private IDeclaredElement myResolveContextCandidate;
    private IInvocationExpression myInvocationExpression;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public string Text { get; }
    public UseResolveContextFix(PossiblyUnintendedUsageParameterlessGetExpressionTypeWarning warning);
    [CompilerGeneratedAttribute]
public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.UseSpanTypeForStackAllocFix : ModernScopedQuickFixBase {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [NullableAttribute("2")]
private IStackAllocExpression myStackAllocExpression;
    public string Text { get; }
    public UseSpanTypeForStackAllocFix(UnsafeConstructInSafeContextError error);
    [CompilerGeneratedAttribute]
public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    private static IDeclaredType GetUnderlinedType(IStackAllocExpression stackAllocExpression);
    private ILocalVariableDeclaration TryFindContainingLocalVariableDeclaration(IStackAllocExpression stackAllocExpression);
    [NullableContextAttribute("2")]
protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [CompilerGeneratedAttribute]
internal static bool <TryFindContainingLocalVariableDeclaration>g__HasUsages|7_0(ILocalVariableDeclaration variableDeclaration);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.UseSymbolAliasFix : ModernScopedQuickFixBase {
    private ITreeNode myNode;
    private IUsingAliasDirective myUsingAliasDirective;
    public string Text { get; }
    public FileCollectorInfo FileCollectorInfo { get; }
    public UseSymbolAliasFix(UseSymbolAliasWarning warning);
    public virtual string get_Text();
    protected virtual ITreeNode TryGetContextTreeNode();
    public virtual FileCollectorInfo get_FileCollectorInfo();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    protected virtual IScopedFixingStrategy GetScopedFixingStrategy(ISolution solution, IHighlighting highlighting);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.AddTupleComponentNameAction")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.UseTargetTupleComponentNameFix : ModernQuickFixBase {
    private ICSharpIdentifier myIdentifier;
    [NullableAttribute("2")]
private IType myTargetTupleType;
    public string Text { get; }
    public UseTargetTupleComponentNameFix(TupleElementNameIsIgnoredWarning error);
    public UseTargetTupleComponentNameFix(TupleEqualityOperatorLiteralNameMismatchWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.UseThisInitializerFix : ModernQuickFixBase {
    private IConstructorDeclaration myConstructorDeclaration;
    public string Text { get; }
    public UseThisInitializerFix(ConstructorMustHaveThisInitializerError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.UseThrowIfNullMethodFix : ModernScopedQuickFixBase {
    private IIfStatement myIfStatement;
    private IReferenceExpression myCheckedExpression;
    private IMethod myThrowIfNullMethod;
    public string Text { get; }
    public UseThrowIfNullMethodFix(UseThrowIfNullMethodWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.Misc.UseTypeAliasAction")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.UseTypeAliasFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private IUsingAliasDirective myUsingAliasDirective;
    public string Text { get; }
    public UseTypeAliasFix(UnusedUsingDirectiveWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.UseUnsignedRightShiftOperatorFix : ModernScopedQuickFixBase {
    private ICastExpression myCastExpression;
    private ICSharpExpression myLeftOperand;
    private ICSharpExpression myRightOperand;
    public string Text { get; }
    public UseUnsignedRightShiftOperatorFix(UseUnsignedRightShiftOperatorWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.UseUtf8StringLiteralFixBase`1 : ModernScopedQuickFixBase {
    [CompilerGeneratedAttribute]
private TNode <node>P;
    protected TNode Node;
    public string Text { get; }
    protected UseUtf8StringLiteralFixBase`1(TNode node);
    public virtual string get_Text();
    protected virtual ITreeNode TryGetContextTreeNode();
    protected abstract virtual IEnumerable`1<byte> EnumerateArrayElements();
    protected virtual string GetPresentationString();
    protected virtual IType GetImplicitlyConvertedTo();
    protected virtual ICSharpTreeNode ReplaceNode(ICSharpExpression replacement, CSharpElementFactory elementFactory);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.UseUtf8StringLiteralForArrayFix : UseUtf8StringLiteralFixBase`1<IArrayInitializer> {
    public UseUtf8StringLiteralForArrayFix(UseUtf8StringLiteralForArrayWarning warning);
    protected virtual IEnumerable`1<byte> EnumerateArrayElements();
    protected virtual IType GetImplicitlyConvertedTo();
    protected virtual ICSharpTreeNode ReplaceNode(ICSharpExpression replacement, CSharpElementFactory elementFactory);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.UseUtf8StringLiteralForGetBytesFix : UseUtf8StringLiteralFixBase`1<IInvocationExpression> {
    public UseUtf8StringLiteralForGetBytesFix(UseUtf8StringLiteralForGetBytesWarning warning);
    protected virtual string GetPresentationString();
    protected virtual IEnumerable`1<byte> EnumerateArrayElements();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.UseUtf8StringLiteralForParamsFix : UseUtf8StringLiteralFixBase`1<ICSharpExpression> {
    private IArgumentList myArgumentList;
    public UseUtf8StringLiteralForParamsFix(UseUtf8StringLiteralForParamsWarning warning);
    protected virtual IEnumerable`1<byte> EnumerateArrayElements();
    protected virtual ICSharpTreeNode ReplaceNode(ICSharpExpression replacement, CSharpElementFactory elementFactory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.QuickFixes.RemoveTypeCheckFromPatternFix")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.UseVarPatternFix : ModernScopedQuickFixBase {
    [NullableAttribute("2")]
private IPatternWithDesignation myPattern;
    public string Text { get; }
    public UseVarPatternFix(ReplaceObjectPatternWithVarPatternWarning error);
    public UseVarPatternFix(PatternAlwaysMatchesWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.UseWithExpressionToCopyAnonymousObjectFix : ModernScopedQuickFixBase {
    private IAnonymousObjectCreationExpression myObjectCreationExpression;
    private ElementCopySource myCopySource;
    public string Text { get; }
    public UseWithExpressionToCopyAnonymousObjectFix(UseWithExpressionToCopyAnonymousObjectWarning warning);
    public virtual string get_Text();
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.UseWithExpressionToCopyInstanceFix : ModernScopedQuickFixBase {
    private IObjectCreationExpression myCreationExpression;
    private ElementCopySource myCopySource;
    public string Text { get; }
    public UseWithExpressionToCopyInstanceFix(UseWithExpressionToCopyRecordWarning warning);
    public UseWithExpressionToCopyInstanceFix(UseWithExpressionToCopyStructWarning warning);
    public virtual string get_Text();
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.UseWithExpressionToCopyStructFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private IReferenceExpression myMemberAccessExpression;
    private bool myFallbackToVariableMutation;
    public string Text { get; }
    public UseWithExpressionToCopyStructFix(StructMemberModificationOfNonVariableStructError error);
    public UseWithExpressionToCopyStructFix(InitOnlyAssignmentError error);
    [NullableContextAttribute("2")]
public UseWithExpressionToCopyStructFix(IReferenceExpression memberAccessExpression);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    private IAssignmentExpression GetAssignmentExpression(IReferenceExpression& topStructMemberAccessExpression);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static IReferenceExpression GetReferenceQualifier(IReferenceExpression referenceExpression, bool onlyIfNotAssignableReference);
    private static ICSharpExpression GetValueSource(CSharpElementFactory factory, IAssignmentExpression oldAssignmentExpression);
    [CompilerGeneratedAttribute]
internal static bool <GetReferenceQualifier>g__IsAssignablePropertyReference|10_0(<>c__DisplayClass10_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.UseWithExpressionToCopyTupleFix : ModernScopedQuickFixBase {
    private ITupleExpression myTuple;
    private ElementCopySource myCopySource;
    public string Text { get; }
    public UseWithExpressionToCopyTupleFix(UseWithExpressionToCopyTupleWarning warning);
    public virtual string get_Text();
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.UsingDirectiveFix : ModernQuickFixBase {
    private IReferenceName myReferenceName;
    public string Text { get; }
    public UsingDirectiveFix(NamespaceNameExpectedError error);
    public UsingDirectiveFix(TypeNameExpectedError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.UsingStaticAliasFix : ModernQuickFixBase {
    private IUsingAliasDirective myUsingAlias;
    public string Text { get; }
    public UsingStaticAliasFix(UsingStaticAliasError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
internal enum JetBrains.ReSharper.Intentions.CSharp.QuickFixes.Util.ReferencedTypeKind : Enum {
    public int value__;
    public static ReferencedTypeKind NotInterface;
    public static ReferencedTypeKind CanBeInterface;
    public static ReferencedTypeKind Attribute;
}
internal static class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.Util.ReferenceNameUtil : object {
    public static ReferencedTypeKind GetReferencedTypeKind(IReferenceName referenceName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.VulnerableApiFix : object {
    private VulnerableApiWarning myHighlighting;
    public VulnerableApiFix(VulnerableApiWarning highlighting);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.CSharp.QuickFixes.VulnerableApiFix/<CreateBulbItems>d__3")]
public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.WorkflowDrivenImplementMembersFix`1 : QuickFixBase {
    [CompilerGeneratedAttribute]
private ITreeNode <anchor>P;
    [CompilerGeneratedAttribute]
private IClassLikeDeclaration <TypeDeclaration>k__BackingField;
    protected IClassLikeDeclaration TypeDeclaration { get; }
    protected bool ShouldCheckIfWorkflowIsEnabled { get; }
    public bool IsReadOnly { get; }
    protected WorkflowDrivenImplementMembersFix`1(IClassLikeDeclaration typeDeclaration, ITreeNode anchor);
    [CompilerGeneratedAttribute]
protected IClassLikeDeclaration get_TypeDeclaration();
    [NullableContextAttribute("1")]
protected sealed virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [PureAttribute]
protected abstract virtual TWorkflow TryCreateWorkflow();
    protected virtual bool get_ShouldCheckIfWorkflowIsEnabled();
    public sealed virtual bool get_IsReadOnly();
    [NullableContextAttribute("1")]
public sealed virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("1")]
public sealed virtual void Execute(ISolution solution, ITextControl textControl);
    [NullableContextAttribute("1")]
protected virtual void ConfigureContext(IGeneratorContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.WrapTaskInWinRTFix : ModernQuickFixBase {
    private static string WINDOWS_RUNTIME_SYSTEM_EXTENSIONS_CLASS;
    [NullableAttribute("2")]
private ITypeUsage myTypeUsage;
    [NullableAttribute("2")]
private IDeclaredType myType;
    public string Text { get; }
    public WrapTaskInWinRTFix(ITreeNode treeNode, IType type);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private IMethodDeclaration CreateWrapperMethod(IMethodDeclaration methodDeclaration);
    private IBlock CreateWrapperMethodBody(IMethodDeclaration wrappedMethod);
    private IFunction GetWrapperExtensionMethod(IDeclaredType type);
    private IType GetWinRTTypeProjection(IDeclaredType type);
    private string GenerateNameForWrapperMethod(IMethodDeclaration methodDeclaration);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MutuallyExclusiveActionAttribute("JetBrains.ReSharper.Intentions.CSharp.ContextActions.ToExplicitProgramClassAction")]
internal class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.WrapTopLevelCodeIntoClassFix : ModernQuickFixBase {
    private ITopLevelCode myTopLevelCode;
    public string Text { get; }
    public WrapTopLevelCodeIntoClassFix(TopLevelCodeAfterNamespaceOrTypeError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.WrapWithConstructorFix : ModernScopedQuickFixBase {
    private IType myExpectedType;
    [NullableAttribute("2")]
private ICSharpExpression myExpression;
    private static string ourWrapWithText;
    public string Text { get; }
    public string ScopedText { get; }
    public FileCollectorInfo FileCollectorInfo { get; }
    public WrapWithConstructorFix(IncorrectArgumentTypeError error);
    public WrapWithConstructorFix(IncorrectInitializerTypeError error);
    public WrapWithConstructorFix(DeclarationToInitializerTypeMismatchError error);
    public WrapWithConstructorFix(IncorrectAssignmentTypeError error);
    public WrapWithConstructorFix(IncorrectReturnTypeError error);
    private static WrapWithConstructorFix();
    public virtual string get_Text();
    public virtual string get_ScopedText();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
protected virtual ITreeNode TryGetContextTreeNode();
    public virtual FileCollectorInfo get_FileCollectorInfo();
    protected virtual IScopedFixingStrategy GetScopedFixingStrategy(ISolution solution, IHighlighting highlighting);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    [PureAttribute]
private static bool IsNonAbstractClassOrStruct(IType type, ITreeNode context);
    [CompilerGeneratedAttribute]
internal static IEnumerable`1<IntentionAction> <CreateBulbItems>g__ToIntentions|18_0(IBulbAction fix);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.WrapWithDelegateFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private ICSharpExpression myAnonymousOrLambdaExpression;
    public string Text { get; }
    public WrapWithDelegateFix(InvalidInitializerImplicitlyTypeVariableError error);
    public WrapWithDelegateFix(InvalidReferenceExpressionQualifierError error);
    public WrapWithDelegateFix(IncorrectInitializerTypeError error);
    public WrapWithDelegateFix(DeclarationToInitializerTypeMismatchError error);
    public WrapWithDelegateFix(IncorrectArgumentTypeError error);
    public WrapWithDelegateFix(DelegateTypeCouldNotBeInferredError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.WrapWithLambdaFix : ModernScopedQuickFixBase {
    [NullableAttribute("2")]
private ICSharpExpression myExpression;
    public string Text { get; }
    public WrapWithLambdaFix(StaticDelegateInstanceRequiredWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.QuickFixes.WrapWithTypeofFix : ModernQuickFixBase {
    private IReference myReference;
    public string Text { get; }
    public WrapWithTypeofFix(UnexpectedElementTypeError error);
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Intentions.CSharp.RedundanciesInCodeCodeCleanupRegistration : object {
    public sealed virtual void Register(IHighlightingCleanupItemsRegistrar registrar);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Intentions.CSharp.RedundanciesInCodeQuickFixRegistration : object {
    public IEnumerable`1<Type> Dependencies { get; }
    public sealed virtual IEnumerable`1<Type> get_Dependencies();
    public sealed virtual void Register(IQuickFixesRegistrar table);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Intentions.CSharp.RedundanciesInSymbolDeclarationsCodeCleanupRegistration : object {
    public sealed virtual void Register(IHighlightingCleanupItemsRegistrar registrar);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Intentions.CSharp.RedundanciesInSymbolDeclarationsQuickFixRegistration : object {
    public IEnumerable`1<Type> Dependencies { get; }
    public sealed virtual IEnumerable`1<Type> get_Dependencies();
    public sealed virtual void Register(IQuickFixesRegistrar table);
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public static class JetBrains.ReSharper.Intentions.CSharp.Resources.Strings : object {
    private static ILogger ourLog;
    private static Lazy`1<JetResourceManager> ourResourceManager;
    [EditorBrowsableAttribute("2")]
public static JetResourceManager ResourceManager { get; }
    public static string AddBaseClassInitializer_Text { get; }
    public static string AddParenthesesAroundBitwiseOperation_Text { get; }
    public static string AddUsingContextAction_Description { get; }
    public static string AddUsingContextAction_Name { get; }
    public static string AddUsingDeclarationContextAction_ScopedText { get; }
    public static string AddUsingDeclarationContextAction_Text { get; }
    public static string AddUsingDeclarationsOfTypeContextAction_ScopedText { get; }
    public static string AddUsingStatementContextAction_ScopedText { get; }
    public static string AddUsingStatementContextAction_Text { get; }
    public static string AppendToCollectionExpression_Text { get; }
    public static string AppendLineToSeparateAppendAction_Description { get; }
    public static string AppendLineToSeparateAppendAction_Name { get; }
    public static string AppendLineToSeparateAppendAction_Text { get; }
    public static string AssignValueToBackingField_Text { get; }
    public static string CanBreakRefSafety_Text { get; }
    public static string ChangeLockFieldTypeToSystemThreadingLock_Text { get; }
    public static string ChangeParameterToParamsArray_Text { get; }
    public static string ConstructStringViaStringBuilderAction_Descrition { get; }
    public static string ConstructStringViaStringBuilderAction_Name { get; }
    public static string ConstructStringViaStringBuilderAction_Text { get; }
    public static string ConvertCollectionExpressionsToInitializers_Text { get; }
    public static string ConvertCollectionExpressionsToArrayCreations_Text { get; }
    public static string ConvertLeadingEscapesToAsciiText { get; }
    public static string ConvertStringEscapeSequence_ContextActionDescription { get; }
    public static string ConvertStringEscapeSequence_ContextActionName { get; }
    public static string ConvertStringEscapeSequenceAscii_Text { get; }
    public static string ConvertStringEscapeSequencePlain_Text { get; }
    public static string ConvertStringEscapeSequenceUnicode_Text { get; }
    public static string ConvertToHexEscapeSequence_ScopedText { get; }
    public static string ConvertToHexEscapeSequence_Text { get; }
    public static string ConvertToAwaitUsingDeclaration_Text { get; }
    public static string ConvertToAwaitUsingStatement_Text { get; }
    public static string ConvertToCollectionInitializer_Text { get; }
    public static string ConvertToArrayCreationExpression_Text { get; }
    public static string ConvertToTryFinallyContextAction_Description { get; }
    public static string ConvertToTryFinallyContextAction_Name { get; }
    public static string ConvertToUsingStatementsAlongJumpFix { get; }
    public static string CopyElementsBeforeEnumerationFix_Text { get; }
    public static string CreatePrimaryConstructor_Text { get; }
    public static string CanSimplifyDictionaryLookupWithGetValueOrDefault_Text { get; }
    public static string CanSimplifyDictionaryRemovingWithSingleCall_Text { get; }
    public static string CanSimplifySetAddingWithSingleCall_Text { get; }
    public static string Create_Method_Text { get; }
    public static string DeconstructionIndexSettingDescription { get; }
    public static string DisposeAnalysisMode_OptionOptimistic_Text { get; }
    public static string DisposeAnalysisMode_OptionPessimistic_Text { get; }
    public static string DisposeAnalysis_Text { get; }
    public static string DoNotCheckNonUserTypes_Text { get; }
    public static string EnableReplacementOfMutableFields_Text { get; }
    public static string EscapingStep_Text { get; }
    public static string ExtractCommonCode_Text { get; }
    public static string FixIndentation_Text { get; }
    public static string GenerateFormattingMembers_Text { get; }
    public static string InDeclarationStatement_Text { get; }
    public static string InsertCast_Text { get; }
    public static string InsertMatchingTypeArgumentsFor__Text { get; }
    public static string InsertMatchingTypeArguments_Text { get; }
    public static string InStatementScopedContextAction_Text { get; }
    public static string InThisStringLiteral_Text { get; }
    public static string IntroduceUsingDeclaration_Text { get; }
    public static string IterateViaforeachSettingsSettingDescription { get; }
    public static string RemoveCookieVariable_Text { get; }
    public static string MergeDuplicatedSwitchSections_Text { get; }
    public static string RemoveGetType_Text { get; }
    public static string ReplaceActualBodyWithEmptyBlock_Text { get; }
    public static string ReplaceCastWithExplicitVariableType_Text { get; }
    public static string ReplaceCastWithLambdaReturnType_Text { get; }
    public static string ReplaceCastWithTypeArguments_Text { get; }
    public static string RemoveParamsCollectionExpression_Text { get; }
    public static string RemoveParamsModifierAndRefactor_Text { get; }
    public static string RemoveParamsModifierContextAction_Description { get; }
    public static string RemoveParamsModifierContextAction_Name { get; }
    public static string RemoveRedundantParamsCollectionExpressions_Text { get; }
    public static string ReplaceEscapeSequence_ScopedText { get; }
    public static string ReplaceEscapeSequence_Text { get; }
    public static string RewriteIfStatementsIntoPatternGuards_Text { get; }
    public static string SelectSignature_Text { get; }
    public static string SeparateBodyLikeStatementWithBlank_Text { get; }
    public static string SetExplicitType_Text { get; }
    public static string SetParamsModifierAndRefactor_Text { get; }
    public static string SetParamsModifierContextAction_Description { get; }
    public static string SetParamsModifierContextAction_Name { get; }
    public static string SortsUsingDirectivesInFilesAccording_Text { get; }
    public static string SortUsingDirectives_Text { get; }
    public static string SpecifyTypeArgumentsToMatchExpectedType_Text { get; }
    public static string SplitListPattern_Text { get; }
    public static string SpreadCollection_Text { get; }
    public static string MultilineStringToAppendLineAction_Description { get; }
    public static string MultilineStringToAppendLineAction_Name { get; }
    public static string MultilineStringToAppendLineAction_Text { get; }
    public static string RemoveUsingDeclaration_Text { get; }
    public static string ReplaceAsyncFunctionsWithTaskReturns_Text { get; }
    public static string ReplaceAsyncWith_Return_Text { get; }
    public static string ReplaceCapturesOf_ParameterWith___Text { get; }
    public static string ReplaceWithEmptyCollectionExpression_Text { get; }
    public static string SetTargetType_Text { get; }
    public static string SetVariableTypeTo__Text { get; }
    public static string SplitIntoSeparateAssignments_Text { get; }
    public static string SplitVarPatternIntoVariable_Text { get; }
    public static string SplitVarPatterns_Text { get; }
    public static string MakeContainingMemberNonStatic_Text { get; }
    public static string MakeMembersMustDisposeResource_ScopedText { get; }
    public static string Make_MustDisposeResource_Text { get; }
    public static string MoveLocalFunctionToTheEndOfAScopeInsert_Text { get; }
    public static string OptimizeElse_Text { get; }
    public static string OptimizeResultingExpressionAfterRewrite_Text { get; }
    public static string RedundantMembersCleanupAfterPrimary_Text { get; }
    public static string RemoveUnusedConstructor_Text { get; }
    public static string RenamePrimaryConstructorParameter_Text { get; }
    public static string ReplaceCapturesWith__From_BaseType_Text { get; }
    public static string SuppressNullableWarningFixSettingsSettingDescription { get; }
    public static string SuppressUninitializedMemberWarningFixSettingsSettingDescription { get; }
    public static string Settings_Enabled { get; }
    public static string ThisIsCastExpression_Text { get; }
    public static string ThisIsTheBodyOfPreviousStatement_Text { get; }
    public static string ToCollectionExpressionParams_Text { get; }
    public static string ToStringBuilderConversionAction_Description { get; }
    public static string ToStringBuilderConversionAction_Name { get; }
    public static string ToStringBuilderConversionAction_Text { get; }
    public static string ToStringBuilderSubstitutionAction_Description { get; }
    public static string ToStringBuilderSubstitutionAction_Name { get; }
    public static string ToStringBuilderSubstitutionAction_Text { get; }
    public static string ReplaceWithAccessToLastElementFixText { get; }
    public static string InCurrentCondition_Text { get; }
    public static string SplitAndPattern_Text { get; }
    public static string InCurrentDeconstructionPattern_Text { get; }
    public static string InCurrentInvocation_Text { get; }
    public static string InFollowingArguments_Text { get; }
    public static string For_Of_Text { get; }
    public static string ForAllParametersOf__Text { get; }
    public static string NamedArguments_Text { get; }
    public static string InCurrentTuple_Text { get; }
    public static string AddSectionBraces_Text { get; }
    public static string InSwitchStatement_Text { get; }
    public static string ToLocalVariableMutationContextAction_Description { get; }
    public static string ToLocalVariableMutationContextAction_Text { get; }
    public static string UnableToIntroduceVariable_Text { get; }
    public static string UseCollectionExpression_Text { get; }
    public static string UseIsExpression_Text { get; }
    public static string UseIsInstanceOfType_Text { get; }
    public static string UseLocalVariableMutation_Text { get; }
    public static string UseMinByMaxBy_Text { get; }
    public static string UseMinByOrMaxByInsteadOfOrderingAndTakingFirstOrLast { get; }
    public static string UseThisBodyForImplementations_Text { get; }
    public static string UseDiscardAssignment_Text { get; }
    public static string UseSymbolAlias_Text { get; }
    public static string TypeAliasKindName { get; }
    public static string NamespaceAliasKindName { get; }
    public static string MakeReturnTypeTask_Text { get; }
    public static string MakeReturnTypeVoid_Text { get; }
    public static string AddArgumentName__Text { get; }
    public static string AddArgumentNames_Text { get; }
    public static string AddBraces_Text { get; }
    public static string AddBracesFor_Statements_Text { get; }
    public static string AddDeconstructionComponentNames_Text { get; }
    public static string AddComponentName__Text { get; }
    public static string AddExceptionDocumentation_Text { get; }
    public static string AddInheritdoc_Text { get; }
    public static string AddPatternVariableOf_Type_Text { get; }
    public static string AddPatternVariable_Text { get; }
    public static string Add_Accessor_Text { get; }
    public static string Add_Accessors_Text { get; }
    public static string AddConditionComponent_Text { get; }
    public static string AddTupleComponentNames_Text { get; }
    public static string AnnotatePublicFieldsAndPropertiesWith_Text { get; }
    public static string AnnotateEnumMembersWithEnumMemberAttribute_Text { get; }
    public static string AnnotateMethodsWithOperationContractAttribute_Text { get; }
    public static string UnknownNullability_Text { get; }
    public static string CanBeNull_Text { get; }
    public static string CanSimplifyDictionaryLookupWithTryAdd_Text { get; }
    public static string CanSimplifyDictionaryLookupWithTryGetValue_Text { get; }
    public static string NotNull_Text { get; }
    public static string ItemsCanBeNull_Text { get; }
    public static string ItemsNotNull_Text { get; }
    public static string AssertExpressionIsNotNull_Text { get; }
    public static string CheckParameterForNull_Text { get; }
    public static string CheckExpressionForNull_Text { get; }
    public static string CheckVariableForNull_Text { get; }
    public static string ConfigureNullCheckPattern_Text { get; }
    public static string ConfigureAssertionPattern_Text { get; }
    public static string ToExplicitParameter_Text { get; }
    public static string ToLambdaExpression_Text { get; }
    public static string InsertParametersSignature_Text { get; }
    public static string InsertReturnTypeSpecification_Text { get; }
    public static string ToAnonymousMethod_Text { get; }
    public static string ToStatementLambda_Text { get; }
    public static string ToExpressionLambda_Text { get; }
    public static string ToRegularMethod_Text { get; }
    public static string ToLocalFunction_Text { get; }
    public static string ToNamedMethod_Text { get; }
    public static string ToNamedType_Text { get; }
    public static string ReplaceWithTuple_Text { get; }
    public static string ToExplicitAccessor_Text { get; }
    public static string ToPropertyWithBackingField_Text { get; }
    public static string ToPropertyWithFieldKeyword_Text { get; }
    public static string ToStatementBody_Text { get; }
    public static string UseStatementBodies_Text { get; }
    public static string ToExpressionBody_Text { get; }
    public static string Capture_Name_Text { get; }
    public static string CaptureEntityNames_Text { get; }
    public static string ToCatch_Text { get; }
    public static string ToCatchException_Text { get; }
    public static string Make_Accessor__Text { get; }
    public static string ToAbstract_Text { get; }
    public static string ToVirtual_Text { get; }
    public static string ToFieldLikeEvent_Text { get; }
    public static string ToNonAbstract_Text { get; }
    public static string ToNonVirtual_Text { get; }
    public static string ToInitAccessor_Text { get; }
    public static string ToSetAccessor_Text { get; }
    public static string ToStruct_Text { get; }
    public static string ToClass_Text { get; }
    public static string ToRecordStruct_Text { get; }
    public static string ToRecord_Text { get; }
    public static string CheckIfParameterIsAnEmptyCollection_Text { get; }
    public static string CheckIfEnumParameterIsDefinedByEnum_Text { get; }
    public static string CheckIfParameterIsOutOfRange_Text { get; }
    public static string CheckIfParameterIsNotValid_Text { get; }
    public static string AddRangeCheck_Text { get; }
    public static string CheckWhetherTheDictionaryDoesnTContain_Text { get; }
    public static string CheckWhetherTheDictionaryContainsThe_Text { get; }
    public static string DeleteComment_Text { get; }
    public static string Uncomment_Text { get; }
    public static string ToAssignment_Text { get; }
    public static string ToConditionalExpression_Text { get; }
    public static string ToConditionalAccess_Text { get; }
    public static string ToNullCoalescingExpression_Text { get; }
    public static string ToUnconditionalAccess_Text { get; }
    public static string ToNullPropagation_Text { get; }
    public static string JoinNullCheckWithAssignment_Text { get; }
    public static string MergeIntoPattern_Text { get; }
    public static string ContinueMergeIntoPattern_Text { get; }
    public static string RemoveVariableAndContinueMergeIntoPattern_Text { get; }
    public static string UseConditionalAccess_Text { get; }
    public static string ToIfStatementQuotes_Text { get; }
    public static string SplitIntoSequentialChecks_Text { get; }
    public static string DefaultConstructor_Text { get; }
    public static string ToFactoryMethod_Text { get; }
    public static string ReplaceWithSingleInstance_Text { get; }
    public static string ToBlockScopedNamespace_Text { get; }
    public static string ToBlockScopedNamespaces_Text { get; }
    public static string InsertTypeSpecification_Text { get; }
    public static string ToFileScopedNamespace_Text { get; }
    public static string ToFileScopedNamespaces_Text { get; }
    public static string ConvertToInterpolatedString_Text { get; }
    public static string ConvertToUsingDeclaration__Text { get; }
    public static string WillAllocateOnTheHeap_Text { get; }
    public static string WillIntroduceNamingCollisions_Text { get; }
    public static string ExtendsResourceLifetime_Text { get; }
    public static string CopyDocumentationFromBase_Text { get; }
    public static string CreateDerivedType_Text { get; }
    public static string CreateMatchingCheckedOperator_Text { get; }
    public static string CreateOverloadWithoutSelectedParameters_Text { get; }
    public static string CreateOverloadWithoutParameter_Text { get; }
    public static string UseVarForAllVariables_Text { get; }
    public static string IntroducePropertyForLazilyInitialized_Text { get; }
    public static string To_Call_Text { get; }
    public static string ToEqualityOperator_Text { get; }
    public static string ToReferenceEqualityOperator_Text { get; }
    public static string ToImplicitImplementation_Text { get; }
    public static string MakeFieldExplicit_Text { get; }
    public static string ConvertToFor_Text { get; }
    public static string ConvertLINQToCode_Text { get; }
    public static string GenerateExtensionToCheckFlagPresence_Text { get; }
    public static string GenerateTypePatterns_Text { get; }
    public static string PatternMatching_Caption { get; }
    public static string GenerateTypePatterns_Caption { get; }
    public static string SelectTypesForWhichYouWantToGenerate_Text { get; }
    public static string MergeTwoIfS__Text { get; }
    public static string AndFixNameConflicts_Text { get; }
    public static string ConvertToGuardClause_Text { get; }
    public static string ConvertToSwitchExpressionDots_Text { get; }
    public static string ConvertToSwitchExpression_Text { get; }
    public static string ConvertToSwitchStatementDots_Text { get; }
    public static string ConvertToSwitchStatement_Text { get; }
    public static string AssumingThatTypesCanBeExtendedByExternal_Text { get; }
    public static string AssumingThatTypeHierarchyInSolution_Text { get; }
    public static string ConvertToReturnStatement_Text { get; }
    public static string ConvertToAssignmentStatement_Text { get; }
    public static string ConvertToYieldStatement_Text { get; }
    public static string ToCustomEventImplementation_Text { get; }
    public static string ImplementINotifyPropertyChanged_Text { get; }
    public static string ImplementINotifyPropertyChangedPattern_Text { get; }
    public static string ImplementInDerived__Text { get; }
    public static string ImplementMemberIn_Text { get; }
    public static string ToExplicitImplementation_Text { get; }
    public static string ImportStaticMembers_Text { get; }
    public static string UnableToImportStaticClassImportIntroduces_Text { get; }
    public static string IncludeIntoObjectPattern_Text { get; }
    public static string InlineControlTransferStatement_Text { get; }
    public static string ConvertToNonGlobalUsing_Text { get; }
    public static string InlineNamespaceAlias_Text { get; }
    public static string InlineTypeAlias_Text { get; }
    public static string InlineNestedInterpolation_Text { get; }
    public static string InlineStringLiteralIntoInterpolation_Text { get; }
    public static string InlineOutVariableDeclaration_Text { get; }
    public static string InlineTemporaryVariable_Text { get; }
    public static string InlineVariableIntoCondition_Text { get; }
    public static string ConvertToStringFormat_Text { get; }
    public static string InvertIf_Text { get; }
    public static string ToStaticMethodInvocation_Text { get; }
    public static string ToStaticMethodInvocations_Text { get; }
    public static string CreateEventInvocator_Text { get; }
    public static string IterateViaForeach_Text { get; }
    public static string IterateViaAwaitForeach_Text { get; }
    public static string ToCollectionReturn_Text { get; }
    public static string CouldnTConvertIteratorWithoutAnyReachable_Text { get; }
    public static string PlaceAttributesIntoSingleSection_Text { get; }
    public static string JoinDeclarationAndAssignment_Text { get; }
    public static string JoinDeclarationsAndAssignments_Text { get; }
    public static string UseSingleDeconstructionDeclaration_Text { get; }
    public static string UseSingleDeconstructionDeclarationEverywhere_Text { get; }
    public static string JoinStrings_Text { get; }
    public static string Pass_AsAParameterTo__Text { get; }
    public static string LiftAllClosuresOf_ToParameters_Text { get; }
    public static string PassThisAsAParameterTo__Text { get; }
    public static string MergeDeconstructedDeclaration_Text { get; }
    public static string MigrateToNullableEnable_Text { get; }
    public static string AlignInitializers_Text { get; }
    public static string ComputeConstantValue_Text { get; }
    public static string ToForeachStatement_Text { get; }
    public static string ConvertToBinary_Text { get; }
    public static string UseBinaryLiterals_Text { get; }
    public static string ConvertToDecimal_Text { get; }
    public static string UseDecimalLiterals_Text { get; }
    public static string ConvertToHex_Text { get; }
    public static string UseHexadecimalLiterals_Text { get; }
    public static string ToVerbatimInterpolation_Text { get; }
    public static string ToRawInterpolation_Text { get; }
    public static string VerbatimToRawInterpolation_ScopedText { get; }
    public static string ToVerbatimString_Text { get; }
    public static string ToRawString_Text { get; }
    public static string SimplifyRawString_Text { get; }
    public static string VerbatimToRawString_ScopedText { get; }
    public static string ToRegularInterpolation_Text { get; }
    public static string ToRegularString_Text { get; }
    public static string UseSystemEnvironmentNewLine_Text { get; }
    public static string EvaluateExpression_Text { get; }
    public static string EvaluatingExpression_Text { get; }
    public static string EvaluationTimeOut_Text { get; }
    public static string EvaluationOfExpressionThrowsException_Text { get; }
    public static string CompilingExpression_Text { get; }
    public static string RunningEvaluation_Text { get; }
    public static string PresentingResult_Text { get; }
    public static string ModifyingSourceCode_Text { get; }
    public static string EscapeAllCharacters_Text { get; }
    public static string ItIsVerbatimInterpolation_Text { get; }
    public static string ItIsVerbatimString_Text { get; }
    public static string FlipQualifierAndArgument_Text { get; }
    public static string FlipOperands__Text { get; }
    public static string Flip_Operands__Text { get; }
    public static string WillBreakVariableUsage_Text { get; }
    public static string Flip_OperatorTo__Text { get; }
    public static string ThisIsAnInterpolatedString_Text { get; }
    public static string RemoveDigitSeparators_Text { get; }
    public static string SeparateDigitsInIntegralLiterals_Text { get; }
    public static string SeparateThousands_Text { get; }
    public static string SeparateThousandsInRealLiterals_Text { get; }
    public static string SurroundWith_Text { get; }
    public static string WrapTernaryExpressionWithParentheses_Text { get; }
    public static string MoveAllStaticInitializersToStaticConstructor_Text { get; }
    public static string MoveAllInitializersToConstructors_Text { get; }
    public static string MoveAllInitializersToConstructor_Text { get; }
    public static string MoveInitializationToStaticConstructor_Text { get; }
    public static string MoveInitializationToConstructors_Text { get; }
    public static string MoveInitializationToConstructor_Text { get; }
    public static string MoveToAnotherTypePart_Text { get; }
    public static string SelectTargetTypePart_Text { get; }
    public static string MoveAssignmentToInitializer_Text { get; }
    public static string MoveConstructorAssignmentsToInitializers_Text { get; }
    public static string NegateBooleanExpression_Text { get; }
    public static string Negate_Expression_Text { get; }
    public static string AddChangeNotifications_Text { get; }
    public static string BackingFieldAssignmentStatementIsNot_Text { get; }
    public static string FailedToFindNotifyStatementsInsertPosition_Text { get; }
    public static string ToPropertyWithChangeNotification_Text { get; }
    public static string ToPropertyWith_ChangeNotification_Text { get; }
    public static string MoveTo_Cs_Text { get; }
    public static string MoveTypesToMatchingFiles_Text { get; }
    public static string ToIfStatement_Text { get; }
    public static string ConvertToIfStatement_Text { get; }
    public static string ConvertInitializerToAddCalls_Text { get; }
    public static string InitializeOtherMembers_Text { get; }
    public static string InitializeMembers_Text { get; }
    public static string ConvertInitializerToConstructor_Text { get; }
    public static string ConvertAllObjectInitializersToConstructors_Text { get; }
    public static string ConvertAllObjectInitializers_Text { get; }
    public static string ConvertAllObjectInitializersFor_Type_Text { get; }
    public static string NoConstructorUsagesFound_Text { get; }
    public static string UseObjectCollectionInitializers_Text { get; }
    public static string UseObjectInitializer_Text { get; }
    public static string UseCollectionInitializer_Text { get; }
    public static string CreateAnotherPartOfTheType_Text { get; }
    public static string MakeMethodPartial_Text { get; }
    public static string MergePartialDeclarations_Text { get; }
    public static string PullInitializerExpressionToUsages_Text { get; }
    public static string PullInitializerExpressionToUsage_Text { get; }
    public static string Pull_FromVariableInitializer_Text { get; }
    public static string PushUsageExpressionsToInitializer_Text { get; }
    public static string PushUsageExpressionToInitializer_Text { get; }
    public static string Push_ToVariableInitializer_Text { get; }
    public static string InsertFullQualification_Text { get; }
    public static string InsertFullQualifications_Text { get; }
    public static string QualifyStaticMembers_Text { get; }
    public static string ConvertLINQToMethodChain_Text { get; }
    public static string ChangeSignature_Text { get; }
    public static string CopyType_Text { get; }
    public static string ConvertToGlobalUsing_Text { get; }
    public static string ExtractMethod_Text { get; }
    public static string IntroduceVariable_Text { get; }
    public static string ConvertToPropertyDots_Text { get; }
    public static string ConvertToMethod_Text { get; }
    public static string ConvertToExtensionMethod_Text { get; }
    public static string TransformParameters_Text { get; }
    public static string RemoveArgumentName_Text { get; }
    public static string RemoveArgumentNames_Text { get; }
    public static string WillBreakUsingVariables_Text { get; }
    public static string RemoveBraces__Text { get; }
    public static string RemoveComponentName_Text { get; }
    public static string RemoveDeconstructionComponentNames_Text { get; }
    public static string RemoveRedundantDictionaryContainsKeyBeforeAdding_Text { get; }
    public static string RemoveRedundantParentheses_Text { get; }
    public static string SeparateLocalFunctionsWithJumpStatementFix_Text { get; }
    public static string SeparateLocalFunctionsWithJumpStatementAction_Text { get; }
    public static string SeparateLocalFunctionsWithJumpStatementAction_Name { get; }
    public static string SeparateLocalFunctionsWithJumpStatementAction_Description { get; }
    public static string SeparateLocalFunctionsWithJumpStatementFix_ScopedText { get; }
    public static string RemoveRegionDirective_Text { get; }
    public static string RemoveRegions_Text { get; }
    public static string RemoveTupleComponentNames_Text { get; }
    public static string RenameFileToMatchTypeName_Text { get; }
    public static string File_AlreadyExists_Text { get; }
    public static string CanTRename__Caption { get; }
    public static string YieldValue_Text { get; }
    public static string ReturnValue_Text { get; }
    public static string ReverseAssignments_Text { get; }
    public static string ReverseAssignment_Text { get; }
    public static string ReverseForLoop_Text { get; }
    public static string ConvertMethodGroupToAnonymousMethod_Text { get; }
    public static string ConvertMethodGroupToLambda_Text { get; }
    public static string CheckAllParameters_Text { get; }
    public static string CheckAllParametersForNull_Text { get; }
    public static string OrEmptyString_Text { get; }
    public static string OrWhitespaceString_Text { get; }
    public static string OverrideMemberIn_Text { get; }
    public static string ConvertToNonExtensionStaticMethod_Text { get; }
    public static string RemoveConditionComponent_Text { get; }
    public static string ReplaceWithVoidKeyword_Text { get; }
    public static string SpecifyEnumMemberValues_Text { get; }
    public static string SplitIntoNestedPatterns_Text { get; }
    public static string SplitRecursivePattern_Text { get; }
    public static string SplitIntoTwoIfStatements_Text { get; }
    public static string SplitIntoIfAndReturn_Text { get; }
    public static string SplitOutVariableDeclarationFromArgument_Text { get; }
    public static string SplitVariableDeclarationAndInitialization_Text { get; }
    public static string SplitDeclarationsFromDeconstruction_Text { get; }
    public static string SplitComponentDeclarationFromDeconstruction_Text { get; }
    public static string SplitIntoSeparateDeclarations_Text { get; }
    public static string SplitIntoTwoCaseLabels_Text { get; }
    public static string SplitOrPattern_Text { get; }
    public static string SplitToIfStatement_Text { get; }
    public static string SplitString_Text { get; }
    public static string SplitStringAfterHexEscape_Text { get; }
    public static string UseStringEqualsMethod_Text { get; }
    public static string ToLINQToXML_Text { get; }
    public static string ToIfStatements_Text { get; }
    public static string ToSwitchStatement_Text { get; }
    public static string ToExpression_Text { get; }
    public static string ToSwitchExpression_Text { get; }
    public static string InvertCondition_Text { get; }
    public static string ToAutoProperty__Text { get; }
    public static string EvaluateOnceAndStore_Text { get; }
    public static string ToComputedProperty__Text { get; }
    public static string EvaluateEachRead_Text { get; }
    public static string ToDirectCast_Text { get; }
    public static string ToExplicitConstructor_Text { get; }
    public static string ToExplicitParamsArray_Text { get; }
    public static string ToExplicitParamsCollection_Text { get; }
    public static string ToExplicitProgramClass_Text { get; }
    public static string ToExplicitPropertyDeclaration_Text { get; }
    public static string ToExplicitFieldDeclaration_Text { get; }
    public static string ToExtensionMethod_Text { get; }
    public static string ToNamedPropertyPatterns_Text { get; }
    public static string ToObjectPattern_Text { get; }
    public static string ToRecursivePattern_Text { get; }
    public static string ToSafeCast_Text { get; }
    public static string ConvertToTopLevelCode_Text { get; }
    public static string UseVarInferredTypeWillChange_Text { get; }
    public static string UseVar_Text { get; }
    public static string UseVarEverywhere_Text { get; }
    public static string UseArrayCreationExpression_Text { get; }
    public static string UseArrayCreationExpressions_Text { get; }
    public static string UseAsAndCheckForNull_Text { get; }
    public static string UseConfigureAwaitFalseCall_Text { get; }
    public static string UseConfigureAwaitFalseCalls_Text { get; }
    public static string SpecifyArrayType_Text { get; }
    public static string UseExplicitDiscardDeclaration_Text { get; }
    public static string UseExplicitDiscardDeclarationEverywhere_Text { get; }
    public static string SpecifyCreatedType_Text { get; }
    public static string UseExplicitName__Text { get; }
    public static string UseImplicitName__Text { get; }
    public static string InsertInferredTypeArguments_Text { get; }
    public static string RemoveRedundantVarKeyword_Text { get; }
    public static string RemoveRedundantVarKeywordEverywhere_Text { get; }
    public static string UsePositionalDeconstructionPattern_Text { get; }
    public static string UseSeparateDeclarations_Text { get; }
    public static string UseSeparateDeclarationsEverywhere_Text { get; }
    public static string UseSpan__Text { get; }
    public static string UseTargetTypedNew_Text { get; }
    public static string SpecifyTypeExplicitly_Text { get; }
    public static string UseExplicitTypeEverywhere_Text { get; }
    public static string DoNotSuggestNonNullableReturnTypesFor_Text { get; }
    public static string KeepJetBrainsAnnotationsAttributesFor_Text { get; }
    public static string AlwaysKeepSingleVarKeywordForDeclarations_Text { get; }
    public static string Configure_MoveLocalFunctionToTheEndOfAScopeWarning_SuggestInNestedScopesAccessor_Off_Text { get; }
    public static string DisableMutableFieldsReplacement_Text { get; }
    public static string DisableFor___Text { get; }
    public static string DisableFor__Text { get; }
    public static string IgnoreNullableAPIContractsAndTrustOnly_Text { get; }
    public static string AddNamesToArguments_Text { get; }
    public static string AddDiscardSyntax_Text { get; }
    public static string AddEnumeratorCancellationAttribute_Text { get; }
    public static string AddGuidAttribute_Text { get; }
    public static string AddParams_Text { get; }
    public static string AddMemberName_Text { get; }
    public static string AddAddressOf_Text { get; }
    public static string AddAsEnumerableCallToMakeIntentExplicit_Text { get; }
    public static string Add_Attribute_Text { get; }
    public static string AwaitExpression_Text { get; }
    public static string AddBody_Text { get; }
    public static string AddBreak_Text { get; }
    public static string AddCaseLabel_Text { get; }
    public static string AddCatch_Text { get; }
    public static string ThrowException__Text { get; }
    public static string AddFinally_Text { get; }
    public static string AddGetAndSetAccessors_Text { get; }
    public static string AddBaseInitializer_Text { get; }
    public static string Make_Obsolete_Text { get; }
    public static string Make_Experimental_Text { get; }
    public static string AddParamsToParameterInInterfaceMember_Text { get; }
    public static string AddInitializersForRequiredMembers_Text { get; }
    public static string AddInitializerFor__Text { get; }
    public static string AddReturnStatement_Text { get; }
    public static string AddSemicolon_Text { get; }
    public static string AddThisInitializer_Text { get; }
    public static string AddTypeArgList_Text { get; }
    public static string ThrowCreatedExceptions_Text { get; }
    public static string ThrowCreatedException_Text { get; }
    public static string ThrowException_Text { get; }
    public static string AllowUnsafeCodeInThisProject_Text { get; }
    public static string AnnotateNullability_Text { get; }
    public static string AppendToPreviousOrderbyClause_Text { get; }
    public static string UseDefault_Instead_Text { get; }
    public static string AssignValueTo__Text { get; }
    public static string ChangeBaseTypeRequiredByAttribute_From_Text { get; }
    public static string AddParentheses_Text { get; }
    public static string CastToEnumUnderlyingTypes_Text { get; }
    public static string SafelyCastTo__Text { get; }
    public static string CastTo__Text { get; }
    public static string CastSecondOperandTo__Text { get; }
    public static string CastTo_Quotes__Text { get; }
    public static string SafelyCastTupleComponent_To__Text { get; }
    public static string CastTupleComponent_To__Text { get; }
    public static string CastQualifierExpressionTo__Text { get; }
    public static string InsertThisAndCastTo__Text { get; }
    public static string ChangeTypeParameterOfInvocationTo__Text { get; }
    public static string ChangeTypeTo__Text { get; }
    public static string ChangeAll__Text { get; }
    public static string ChangeAllLocal__Text { get; }
    public static string Make_ReturnByValue_Text { get; }
    public static string Make_ReturnByReference_Text { get; }
    public static string Change_SignatureToConformTheFixedPattern_Text { get; }
    public static string ChangeParameterKind_Text { get; }
    public static string ChangeParameterName_Text { get; }
    public static string UseParameter__Text { get; }
    public static string ReturnByReference_Text { get; }
    public static string ReturnByValue_Text { get; }
    public static string ChangeTypeOfArrayElementsTo__Text { get; }
    public static string ErrorWhileModifyingTheResourceFile_Text { get; }
    public static string RemoveTupleComponent_Text { get; }
    public static string SpecifyVarType_Text { get; }
    public static string Allocate_Array_Text { get; }
    public static string CorrectArgumentKind_Text { get; }
    public static string ChangeTypeOfNewArrayTo__Text { get; }
    public static string ChangeInstantiatedTypeTo__Text { get; }
    public static string ConvertToTargetTypedNew_Text { get; }
    public static string ConvertToChar_Text { get; }
    public static string ConvertToString_Text { get; }
    public static string CastLeftOperandToUlong_Text { get; }
    public static string CastLeftOperandToLong_Text { get; }
    public static string FixArgumentText_Text { get; }
    public static string FixComponentName_Text { get; }
    public static string FixPropertyName_Text { get; }
    public static string ClarifyPrecedenceWithParentheses_Text { get; }
    public static string RemoveRedundantArgumentName_Text { get; }
    public static string AddMissingArgumentName__Text { get; }
    public static string RemoveRedundantArgumentNames_Text { get; }
    public static string AddMissingArgumentNames_Text { get; }
    public static string UseExplicit_Modifier_Text { get; }
    public static string RemoveRedundant_Modifier_Text { get; }
    public static string UseExplicit_Modifiers_Text { get; }
    public static string RemoveRedundant_Modifiers_Text { get; }
    public static string PlaceAttributesInSeparateSections_Text { get; }
    public static string PlaceAllAttributesIntoSingleSection_Text { get; }
    public static string PlaceAllAttributesInSeparateSections_Text { get; }
    public static string AddMissingBraces_Text { get; }
    public static string RemoveRedundantBraces_Text { get; }
    public static string ApplyBracesStyle_Text { get; }
    public static string AddMissingBracesEverywhere_Text { get; }
    public static string RemoveRedundantBracesEverywhere_Text { get; }
    public static string ApplyBracesStyleEverywhere_Text { get; }
    public static string FixBodyStyle_Text { get; }
    public static string ToExpressionBodiedProperty_Text { get; }
    public static string ToExpressionBodiedIndexer_Text { get; }
    public static string ToExpressionBodiedGetter_Text { get; }
    public static string UseDefaultLiteral_Text { get; }
    public static string SpecifyType_Text { get; }
    public static string FixDefaultValueStyle_Text { get; }
    public static string ArrangeQualifiersEverywhere_Text { get; }
    public static string UseThisQualifier_Text { get; }
    public static string QualifyWithCurrentType_Text { get; }
    public static string QualifyWithBaseType_Text { get; }
    public static string UseBaseClassQualifier_Text { get; }
    public static string SortModifiers_Text { get; }
    public static string FixObjectCreationStyle_Text { get; }
    public static string RemoveRedundantBaseQualifier_Text { get; }
    public static string RemoveRedundantThisQualifier_Text { get; }
    public static string RemoveRedundantQualifier_Text { get; }
    public static string PutAssignmentsIntoBlocks_Text { get; }
    public static string PutIntoBlock_Text { get; }
    public static string FixDeconstructionDeclarationStyle_Text { get; }
    public static string ArrangeBuiltInTypeReferenceStyle_Text { get; }
    public static string UseTypeKeyword_Text { get; }
    public static string UseCLRTypeName_Text { get; }
    public static string RemoveAllRedundantParentheses_Text { get; }
    public static string RemoveUnnecessaryWhitespace_Text { get; }
    public static string CleanupWhitespace_Text { get; }
    public static string SeparateControlTransferStatements_Text { get; }
    public static string SeparateStatementsWithBlankLine_Text { get; }
    public static string CommentAssignment_Text { get; }
    public static string CommentUnreachableCode_Text { get; }
    public static string ERROR_Text { get; }
    public static string RemoveBaseClassReference_Text { get; }
    public static string SetToAllPartsConstraintsFrom___Text { get; }
    public static string ClearConstraints_Text { get; }
    public static string NameTypeParameter__Text { get; }
    public static string CompareWithDefaultValue_Text { get; }
    public static string CompareWithNull_Text { get; }
    public static string ThrowExceptionWhenNull_Text { get; }
    public static string CoalesceWithFallbackValue_Text { get; }
    public static string UseNullCoalescingExpression_Text { get; }
    public static string MergeConditionalExpression_Text { get; }
    public static string MergeConditionalExpressions_Text { get; }
    public static string RemoveConditionalAccess_Text { get; }
    public static string SuppressNullableWarningWith_Text { get; }
    public static string QuickFix__Text { get; }
    public static string EnableThisQuickFixInCurrentSolution_Text { get; }
    public static string EnableThisQuickFixAndHideNullableSuppressions_Text { get; }
    public static string MakeAllUninitializedMembersNullable_Text { get; }
    public static string MakeDestinationNullable_Text { get; }
    public static string MakeNullCheckedParametersNullable_Text { get; }
    public static string FixNullabilityMismatchWithDefaultParameter_Text { get; }
    public static string MergeAndPattern_Text { get; }
    public static string RemoveCastTo__Text { get; }
    public static string DisableThisQuickFixInCurrentSolution_Text { get; }
    public static string SuppressNullableWarningWith_Initializer_Text { get; }
    public static string SuppressNullableWarningsWith_Initializers_Text { get; }
    public static string UseNullPropagation_Text { get; }
    public static string ConvertToWhileLoop_Text { get; }
    public static string ConvertToExpression_Text { get; }
    public static string ToDefaultSwitchCase_Text { get; }
    public static string SplitOutVariableFromArgumentAndMove_Text { get; }
    public static string SplitInitializationAndMoveVariableDeclaration_Text { get; }
    public static string SplitDeconstructionAndMoveDeclarations_Text { get; }
    public static string SplitDeconstructionComponentAndMove_Text { get; }
    public static string DisableAndRestoreWithComments_Text { get; }
    public static string DisableWithPragma_Text { get; }
    public static string DisableAllInspectionsInFile_Text { get; }
    public static string DisableInFileWithComment_Text { get; }
    public static string DisableWithPragmaInFile_Text { get; }
    public static string DisableOnceWithComment_Text { get; }
    public static string Enable_QuickFixInCurrentSolution_Text { get; }
    public static string HideInspectionInCurrentSolutionAndEnable_Text { get; }
    public static string ConvertToPrimaryConstructor_Text { get; }
    public static string ConvertConstructorToMemberInitializers_Text { get; }
    public static string ConvertToLocalVariableInlineInCaseOf_Text { get; }
    public static string ReplaceWith_Method_Text { get; }
    public static string AddNew_Text { get; }
    public static string ConvertToProperty_Text { get; }
    public static string ConvertToUsingDeclaration_Text { get; }
    public static string ConvertToUsingStatement_Text { get; }
    public static string ConvertInterfaceToAbstractClass_Text { get; }
    public static string ToCompoundAssignment_Text { get; }
    public static string ThisIsAConstructor_Text { get; }
    public static string CorrectDestructorName_Text { get; }
    public static string ReplaceWithDirectCast_Text { get; }
    public static string ImplementInterfaceExplicitly_Text { get; }
    public static string Convert_ToImplicitImplementation_Text { get; }
    public static string Convert_ToLocalVariable_Text { get; }
    public static string ReplaceWithMethodGroup_Text { get; }
    public static string ToNullCoalescingCompoundAssignment_Text { get; }
    public static string ConvertToRegularArray_Text { get; }
    public static string Convert_ToStaticField_Text { get; }
    public static string Convert_ToStaticReadonlyField_Text { get; }
    public static string Call__Text { get; }
    public static string ThisIsAVoidMethod_Text { get; }
    public static string CallConvertTo_String_Text { get; }
    public static string UseTupleExpression_Text { get; }
    public static string UseNewExpression_Text { get; }
    public static string RemoveParameterDefaultValue_Text { get; }
    public static string CopyDefaultValue_FromBase_Text { get; }
    public static string CopyToLocalVariable_Text { get; }
    public static string CopyObsoleteFromBase_Text { get; }
    public static string CopyValueOf_ToLocalVariable_Text { get; }
    public static string CorrectAccessToStatic__Text { get; }
    public static string CreateConstructorIn__Text { get; }
    public static string CreateStaticClass__Text { get; }
    public static string CreateNestedDelegate__Text { get; }
    public static string CreateDelegate__Text { get; }
    public static string CreateConstant__Text { get; }
    public static string CreateField__Text { get; }
    public static string CreateLocalVariable__Text { get; }
    public static string CreateTypeParameter__Text { get; }
    public static string CreateEnumMember__Text { get; }
    public static string CreateEvent__Text { get; }
    public static string CreateLocalFunction__Text { get; }
    public static string CreateOverloadFor__Text { get; }
    public static string CreateMethod__Text { get; }
    public static string CreateAbstractOverloadFor__Text { get; }
    public static string CreateAbstractMethod__Text { get; }
    public static string CreateProperty__Text { get; }
    public static string CreateGetOnlyProperty__Text { get; }
    public static string CreateAutoProperty__Text { get; }
    public static string CreateIndexer_Text { get; }
    public static string CreateAbstractIndexer__Text { get; }
    public static string CreateEmptyConstructorAndAddMemberInitializers_Text { get; }
    public static string Create_Operator_Text { get; }
    public static string CreateNonCheckedOperator_Text { get; }
    public static string CreateDefaultConstructor_Text { get; }
    public static string MakeDefaultConstructorPublicInClass_Text { get; }
    public static string AddCrefAttribute_Text { get; }
    public static string AddXmlDocComments_Text { get; }
    public static string FixSignature_Text { get; }
    public static string MergeDuplicateTags_Text { get; }
    public static string RemoveXMLComment_Text { get; }
    public static string RemoveThisTag_Text { get; }
    public static string EmbedStatementInBlock_Text { get; }
    public static string EnableNullableAnnotationsAndWarningsInFile_Text { get; }
    public static string EnableNullableAnnotationsAndWarningsInProject_Text { get; }
    public static string EnableNullableAnnotationsAndWarningsInSolution_Text { get; }
    public static string EnablePreviewFeaturesInProject_Text { get; }
    public static string UpdateProjects_Text { get; }
    public static string EvaluateInUncheckedContext_Text { get; }
    public static string ExtractCheckToExpression_Text { get; }
    public static string ClearAccessRights_Text { get; }
    public static string MakeTypeTheSameAsIn__Text { get; }
    public static string FixArraySizeNumber_Text { get; }
    public static string SetReturnTypeTo__Text { get; }
    public static string ChangeSignatureOf__Text { get; }
    public static string Fix_Constraints_Text { get; }
    public static string ReorderConstraints_Text { get; }
    public static string ReplaceNew_WithNew__Text { get; }
    public static string FixFloatingPointComparison_Text { get; }
    public static string Implement_Instead_Text { get; }
    public static string ImplementMemberFromInterface__Text { get; }
    public static string SetReturnTypeIteratorTo__Text { get; }
    public static string ChangeTypeOfParameter_ToContainingType_Text { get; }
    public static string ChangeTypeOfOperatorToContainingType_Text { get; }
    public static string FixParamTypeSpecification_Text { get; }
    public static string MovePartialModifierToCorrectPlace_Text { get; }
    public static string FixOperatorParameterTypes_Text { get; }
    public static string Override_Instead_Text { get; }
    public static string FixComponentNameTo__Text { get; }
    public static string MakeReturnTypeBool_Text { get; }
    public static string GenerateArgumentStubs_Text { get; }
    public static string GenerateConstructor_Text { get; }
    public static string GenerateEqualityMembers_Text { get; }
    public static string GenerateGuid_Text { get; }
    public static string AddMissingArms_Text { get; }
    public static string AddSwitchSections_Text { get; }
    public static string AddSwitchSectionsFor_Text { get; }
    public static string UseNullCoalescingOperator_Text { get; }
    public static string ConvertToMethodCallWithExpressionInside_Text { get; }
    public static string UseIfToCoalescingAssignment_Text { get; }
    public static string AlwaysAssumeThatTypeHierarchyInThis_Text { get; }
    public static string ReplaceWithReturn_Text { get; }
    public static string ConvertToMethodCallWithIfToTernaryOperatorInside_Text { get; }
    public static string ConvertToMethodCallWithIfToTernaryExpressionInside_Text { get; }
    public static string ConvertToReturnMethodCallWithfToTernaryExpression_Text { get; }
    public static string ConvertToIfToTernaryOperator_Text { get; }
    public static string MakeCollectionType_Implement__Text { get; }
    public static string AddImplementationForMembers_Text { get; }
    public static string GenerateDisposePattern_Text { get; }
    public static string GenerateEqualityComparer_Text { get; }
    public static string EqualityCoMparer_Caption { get; }
    public static string SelectMembersToParticipateInEquality_Text { get; }
    public static string GenerateRelationalComparer_Text { get; }
    public static string RelaTionalComparer_Caption { get; }
    public static string SelectAndSortMembersToParticipateIn_Text { get; }
    public static string GenerateRelationalMembers_Text { get; }
    public static string ImplementMembersAbstract_Text { get; }
    public static string ImplementMissingMembers_Text { get; }
    public static string DelegateImplementationOf_ToNewField_Text { get; }
    public static string DelegateImplementationTo_Text { get; }
    public static string MIssingMembers_Caption { get; }
    public static string ImplementMembersByDelegationTo__Caption { get; }
    public static string SelectMembersForWhichToGenerateMissing_Text { get; }
    public static string ImplementViaPrimaryConstructor_Text { get; }
    public static string ImportExtensionMethod_Text { get; }
    public static string Import_AndOtherMissingReferences_Text { get; }
    public static string ImportNamespace_Text { get; }
    public static string UseMethod_Text { get; }
    public static string FailedToImportMethod_Text { get; }
    public static string ReferenceAndImportExtensionMethod_Text { get; }
    public static string InstallPackage_AndImport__Text { get; }
    public static string Reference_AndImport__Text { get; }
    public static string Inherit_FromBaseExceptionClass_Text { get; }
    public static string InitializeStruct_Text { get; }
    public static string InitializeWithANewInstance_Text { get; }
    public static string AssignDefaultValueTo__Text { get; }
    public static string AssignDefaultValues_Text { get; }
    public static string InitializeConstant_Text { get; }
    public static string InitializeVariable_Text { get; }
    public static string Initialize__Text { get; }
    public static string InitializeWithDefaultConstructorCall_Text { get; }
    public static string InitializeWithFreeValue_Text { get; }
    public static string InlineConstantValueIntoInterpolation_Text { get; }
    public static string InlineExpressionIntoInterpolation_Text { get; }
    public static string InlineOutVariableDeclarations_Text { get; }
    public static string IntroduceField_Text { get; }
    public static string InvertIsExpression_Text { get; }
    public static string ToExtensionMethodInvocation_Text { get; }
    public static string InvokeAllMethodsAsExtensions_Text { get; }
    public static string JumpToCase__Text { get; }
    public static string UseIndexedProperty_Text { get; }
    public static string LiftAllClosuresToParametersIn__Text { get; }
    public static string Pass_AsAParameter_Text { get; }
    public static string PassThisAsAParameter_Text { get; }
    public static string ConvertIntoLINQExpression_Text { get; }
    public static string ConvertPartOfBodyIntoLINQExpression_Text { get; }
    public static string ConvertToForeach_Text { get; }
    public static string RemoveArgumentNameSpecification_Text { get; }
    public static string AllowClosuresInAllContainingFunctions_Text { get; }
    public static string AllowClosuresInContainingFunction_Text { get; }
    public static string AllowClosuresIn__Text { get; }
    public static string MakeOtherOperandRef_Text { get; }
    public static string RemoveRedundantTypeArguments_Text { get; }
    public static string CopyValueOfThisToLocalVariable_Text { get; }
    public static string CreatePrimaryConstructorIn__Text { get; }
    public static string CreateDeconstructMethodIn__Text { get; }
    public static string FillArrayWithDefaultValues_Text { get; }
    public static string AddDefaultArm_Text { get; }
    public static string AddDefaultSection_Text { get; }
    public static string MakeUsingStatementArgumentType_Implement_Text { get; }
    public static string MakeCollectionType_ImplementIEnumerable_Text { get; }
    public static string MakeCollectionType_ImplementIEnumerableGeneric_Text { get; }
    public static string Make_Static_Text { get; }
    public static string RemoveNullableAnnotation_Text { get; }
    public static string MakeAllMembersReadOnly_Text { get; }
    public static string Make_Async_Text { get; }
    public static string Make_AsyncAwait_Text { get; }
    public static string MayChangeOtherReturnStatementsSemantics_Text { get; }
    public static string MakeAutoPropertyGetOnly_Text { get; }
    public static string MakePropertiesGetOnly_Text { get; }
    public static string MakeContainingMemberNonReadonly_Text { get; }
    public static string MakeFieldNonReadonly_Text { get; }
    public static string AddNewKeyword_Text { get; }
    public static string RemoveNewModifier_Text { get; }
    public static string RemoveNewModifiersWhenNotNecessary_Text { get; }
    public static string Make_NonReadonly_Text { get; }
    public static string MakePropertyInitOnly_Text { get; }
    public static string MakeRefField_Mutable_Text { get; }
    public static string MakeNonConstant_Text { get; }
    public static string Mark_WithFlagsAttribute_Text { get; }
    public static string MergeVariables_Text { get; }
    public static string MergeNestedPropertyPatterns_Text { get; }
    public static string MergeTryCatchFinallyStatements_Text { get; }
    public static string Correct_KeywordPlacement_Text { get; }
    public static string MakePartial_Text { get; }
    public static string Remove_Modifier_Text { get; }
    public static string MoveParameter_ToTheEndAndUpdateUsages_Text { get; }
    public static string MoveDeclarationCloserToUsage_Text { get; }
    public static string MoveTopLevelStatementsTo__Text { get; }
    public static string MoveTopLevelStatementsBeforeTypesAnd_Text { get; }
    public static string MoveDeclarationInsideLoopCondition_Text { get; }
    public static string EnumerateToArray_Text { get; }
    public static string EnumerateToList_Text { get; }
    public static string EnumerateWithMethodAsArrayInternal_Text { get; }
    public static string EnumerateWithMethodAsIListInternal_Text { get; }
    public static string SimplifyNegatedRelationalPattern_Text { get; }
    public static string RemoveUnusedDirectivesInFile_Text { get; }
    public static string RemoveUnusedDirectives_Text { get; }
    public static string MoveParameterToFirstPlace_Text { get; }
    public static string ConvertTypeToSingleDimensionArray_Text { get; }
    public static string ParenthesizeSignature_Text { get; }
    public static string CreateDefiningDeclaration_Text { get; }
    public static string MergePartialMethod_Text { get; }
    public static string MakeMethodNonPartial_Text { get; }
    public static string UseAsyncOverload_Text { get; }
    public static string PassCancellationToken_Text { get; }
    public static string ProvideMemberInitializerName_Text { get; }
    public static string UseExistingVariables__Text { get; }
    public static string UseExistingVariable__Text { get; }
    public static string ConvertRecursionToIteration_Text { get; }
    public static string RemoveRedundantIs_Text { get; }
    public static string ThisIsFormatTemplatePlaceholder_Text { get; }
    public static string RelocateAttributeToParameter_Text { get; }
    public static string RemoveAsyncAndReturn__Text { get; }
    public static string RemoveVariableDesignation_Text { get; }
    public static string RemoveNullableAnnotationsWithoutNullable_Text { get; }
    public static string RemoveDiscard_Text { get; }
    public static string RemoveGlobalUsingDirective_Text { get; }
    public static string RemoveInvalidStatement_Text { get; }
    public static string RemovePropertyPatternClause_Text { get; }
    public static string RemoveConflictingCqrsAttribute_Text { get; }
    public static string RemoveRedundantAttribute_Text { get; }
    public static string RemoveConfigureAwaitTrue_Text { get; }
    public static string RemoveRedundantCqrsAttribute_Text { get; }
    public static string RemoveRedundantCqrsAttributes_Text { get; }
    public static string RemoveRedundantConfigureAwaitTrueCalls_Text { get; }
    public static string RemoveStatement_Text { get; }
    public static string RemoveRedundantJumpStatements_Text { get; }
    public static string RemoveRedundantVerbatimPrefix_Text { get; }
    public static string RemoveRedundantVerbatimPrefixes_Text { get; }
    public static string RemoveRefModifier_Text { get; }
    public static string RemoveRefInitializer_Text { get; }
    public static string RemoveSubpattern_Text { get; }
    public static string RemoveTypeCheck_Text { get; }
    public static string UseNullCheckPattern_Text { get; }
    public static string AnnotateAllConstrainingTypesAsNullable_Text { get; }
    public static string CastToASmallerUnsignedType_Text { get; }
    public static string CommentExceptionSuppression_Text { get; }
    public static string DiscardAssignment_Text { get; }
    public static string DiscardReturnValue_Text { get; }
    public static string RemoveUsing_Text { get; }
    public static string RemoveAwaitUsing_Text { get; }
    public static string RemoveAbstractKeyword_Text { get; }
    public static string RemoveVirtualKeyword_Text { get; }
    public static string RemoveExtraAccessor_Text { get; }
    public static string RemoveParenthesis_Text { get; }
    public static string RemoveRedundantParenthesisSigns_Text { get; }
    public static string RemoveRedundantArgumentNameSpecifications_Text { get; }
    public static string RemoveCreationArguments_Text { get; }
    public static string RemoveAsOperator_Text { get; }
    public static string RemoveRedundantAsOperatorCalls_Text { get; }
    public static string RemoveAssignment_Text { get; }
    public static string RemoveAsyncModifier_Text { get; }
    public static string RemoveAttribute_Text { get; }
    public static string Remove_Attribute_Text { get; }
    public static string RemoveProhibitedAttributes_Text { get; }
    public static string RemoveAttributeSuffix_Text { get; }
    public static string RemoveAttributeSuffixes_Text { get; }
    public static string RemoveAwait_Text { get; }
    public static string RemoveBody_Text { get; }
    public static string RemoveCallOfAbstractBaseMember_Text { get; }
    public static string Remove__Text { get; }
    public static string RemoveRedundantCastExpressions_Text { get; }
    public static string RemoveCheckedStatement_Text { get; }
    public static string RemoveCheckedExpression_Text { get; }
    public static string RemoveUncheckedStatement_Text { get; }
    public static string RemoveUncheckedExpression_Text { get; }
    public static string RemoveRedundantCheckedUncheckedContexts_Text { get; }
    public static string RemoveRedundantComparison_Text { get; }
    public static string RemoveRedundantComparisons_Text { get; }
    public static string RemoveGuardClause_Text { get; }
    public static string RemoveSwitchSection_Text { get; }
    public static string Remove_ConstraintOf_Of__Text { get; }
    public static string Remove_Constraint_Text { get; }
    public static string RemoveConstraints_Text { get; }
    public static string RemoveInitializer_Text { get; }
    public static string RemoveDefaultValueSpecification_Text { get; }
    public static string RemoveDoubleNegation_Text { get; }
    public static string RemoveDuplicateAttribute_Text { get; }
    public static string RemoveRedundantBaseTypeReference_Text { get; }
    public static string RemoveRedundantConstructor_Text { get; }
    public static string RemoveRedundantConstructors_Text { get; }
    public static string RemoveRedundantFinalizer_Text { get; }
    public static string RemoveRedundantInitializers_Text { get; }
    public static string RemoveEmptyDeclaration_Text { get; }
    public static string RemoveRedundantEmptyStatement_Text { get; }
    public static string RemoveEmptyTypeParameters_Text { get; }
    public static string RemoveEventAccessors_Text { get; }
    public static string RethrowException_Text { get; }
    public static string RethrowExceptions_Text { get; }
    public static string RemoveParamsArrayCreation_Text { get; }
    public static string RemoveRedundantParameterArrays_Text { get; }
    public static string RemoveExplicitProperty_Text { get; }
    public static string RemoveExplicitProperties_Text { get; }
    public static string RemoveForeachStatement_Text { get; }
    public static string RemoveInheritanceTo__Text { get; }
    public static string RemoveDuplicateInitializer_Text { get; }
    public static string RemoveRedundantInitializer_Text { get; }
    public static string ToStringLiteral_Text { get; }
    public static string ToStringLiterals_Text { get; }
    public static string RemoveInvalidDigitSeparator_Text { get; }
    public static string RemoveLineBreaks_Text { get; }
    public static string RemoveProhibitedModifierS_Text { get; }
    public static string RemoveStructConstraint_Text { get; }
    public static string RemoveUnmanagedConstraint_Text { get; }
    public static string RemoveNotnullConstraint_Text { get; }
    public static string ConvertToClassConstraint_Text { get; }
    public static string RemoveRedundantQuestionMarkSign_Text { get; }
    public static string RemoveQuestionMarkSign_Text { get; }
    public static string RemoveExclamationMarkSign_Text { get; }
    public static string RemoveOverrideModifier_Text { get; }
    public static string RemoveParamsFromBaseMember_Text { get; }
    public static string RemoveParams_Text { get; }
    public static string RemoveExplicitLambdaExpressionParameter_Text { get; }
    public static string RemoveRedundantDecrement_Text { get; }
    public static string RemoveRedundantIncrement_Text { get; }
    public static string RemoveRedundantOperator_Text { get; }
    public static string RemovePreprocessorDirective_Text { get; }
    public static string RemovePropertyAssignment_Text { get; }
    public static string RemoveRedundantAssignments_Text { get; }
    public static string RemoveInterfaceQualification_Text { get; }
    public static string RemoveClassKeyword_Text { get; }
    public static string RemoveRedundantClassKeywords_Text { get; }
    public static string RemoveRedundantArgumentSValue_Text { get; }
    public static string RemoveRedundantArgumentSValues_Text { get; }
    public static string UseArrayInitializer_Text { get; }
    public static string UseArrayInitializerEverywhere_Text { get; }
    public static string RemoveRedundantTypeSpecification_Text { get; }
    public static string RemoveRedundantTypeSpecifications_Text { get; }
    public static string RemoveRedundantBase_Text { get; }
    public static string RemoveRedundantBaseCalls_Text { get; }
    public static string RemoveRedundantBracesInCollectionInitializers_Text { get; }
    public static string RemoveRedundantCallerArgumentExpression_Text { get; }
    public static string RemoveRedundantCatch_Text { get; }
    public static string RemoveRedundantCatchClauses_Text { get; }
    public static string RemoveRedundantComments_Text { get; }
    public static string RemoveRedundantComment_Text { get; }
    public static string RemoveRedundantAttributes_Text { get; }
    public static string RemoveSemicolon_Text { get; }
    public static string RemoveSemicolons_Text { get; }
    public static string RemoveRedundantDelegateConstructorCall_Text { get; }
    public static string RemoveRedundantDelegateConstructorCalls_Text { get; }
    public static string RemoveRedundantElse_Text { get; }
    public static string RemoveAllRedundantElseKeywords_Text { get; }
    public static string RemoveCastTCall_Text { get; }
    public static string RemoveRedundantCastTCalls_Text { get; }
    public static string RemoveExplicitArraySizeSpecification_Text { get; }
    public static string RemoveRedundantName_Text { get; }
    public static string RemoveRedundantNames_Text { get; }
    public static string RemoveRedundantFinallyBlock_Text { get; }
    public static string RemoveRedundantFinallyBlocks_Text { get; }
    public static string RemoveRedundantFixedPointerDeclaration_Text { get; }
    public static string RemoveRedundantFixedPointerDeclarations_Text { get; }
    public static string RemoveAllEmptyInitializers_Text { get; }
    public static string RemoveRedundantNew_Text { get; }
    public static string RemoveRedundantSuppression_Text { get; }
    public static string RemoveRedundantCode_Text { get; }
    public static string RemoveRedundantParenthesis_Text { get; }
    public static string RemoveRedundantParenthesisInLambdas_Text { get; }
    public static string RemoveRedundantParenthesisInAttributes_Text { get; }
    public static string RemoveRedundantBaseConstructorInvocation_Text { get; }
    public static string RemoveRedundantAscending_Text { get; }
    public static string RemoveRedundantRangeBound_Text { get; }
    public static string RemoveRedundantRangeBounds_Text { get; }
    public static string RemoveRedundantStringFormatCall_Text { get; }
    public static string RemoveRedundantStringFormatCalls_Text { get; }
    public static string RemoveRedundantSection_Text { get; }
    public static string RemoveRedundantSections_Text { get; }
    public static string RemoveRedundantToCharArray_Text { get; }
    public static string RemoveRedundantToCharArrayCalls_Text { get; }
    public static string RemoveRedundantCondition_Text { get; }
    public static string RemoveRedundantConditionsInForStatements_Text { get; }
    public static string RemoveTupleElementName__Text { get; }
    public static string RemoveRedundantTupleElementNames_Text { get; }
    public static string RemoveRedundantInt_Text { get; }
    public static string RemoveRedundantIntInEnumDeclarations_Text { get; }
    public static string ReplaceUnsafeStatementWithItsBody_Text { get; }
    public static string ReplaceUnsafeStatementsWithTheirBodies_Text { get; }
    public static string RemoveRefOut__Text { get; }
    public static string ToVoidReturnRemoveValue_Text { get; }
    public static string ToVoidReturnPreserveValue_Text { get; }
    public static string RemoveRedundantSignature_Text { get; }
    public static string RemoveRedundantAnonymousMethodSignatures_Text { get; }
    public static string RemoveParameters_Text { get; }
    public static string RemoveUnreachableCase_Text { get; }
    public static string RemoveThis_Text { get; }
    public static string RemoveRedundantToString_Text { get; }
    public static string RemoveRedundantToStringMethodCalls_Text { get; }
    public static string RemoveRedundantTruePattern_Text { get; }
    public static string RemoveRedundantTruePatterns_Text { get; }
    public static string MakeOperatorPublicStatic_Text { get; }
    public static string RemoveRedundantAbstractKeywordInInterface_Text { get; }
    public static string RemoveRedundantVirtualKeywordInInterface_Text { get; }
    public static string RemoveInheritance_Text { get; }
    public static string RemovePartialKeyword_Text { get; }
    public static string RemovePartialKeywordFromAllTypesWith_Text { get; }
    public static string RemoveSealedKeyword_Text { get; }
    public static string RemoveSealedKeywordWhenItIsNotApplicable_Text { get; }
    public static string RemoveTupleElementsNames_Text { get; }
    public static string RemoveRedundantBody_Text { get; }
    public static string RemoveRedundantTypeDeclarationBodies_Text { get; }
    public static string RemoveBaseClassConstraint_Text { get; }
    public static string RemoveTypeParameters_Text { get; }
    public static string RemoveUnreachableCode_Text { get; }
    public static string RemoveUnsafeModifier_Text { get; }
    public static string RemoveUnsafeModifiersWhenTheyAreNot_Text { get; }
    public static string RemoveUsingStatement_Text { get; }
    public static string RemoveWithCancellation_Text { get; }
    public static string RemoveWithExpression_Text { get; }
    public static string ReplaceDefaultValueWith__Text { get; }
    public static string Replace_With__Text { get; }
    public static string ReplaceWithTypeCheck_Text { get; }
    public static string ReplaceWithObjectInitializer_Text { get; }
    public static string UnwrapFromDelegateCreation_Text { get; }
    public static string UnwrapImmediateDelegates_Text { get; }
    public static string UseTargetTupleNames_Text { get; }
    public static string UseThisInitializer_Text { get; }
    public static string ReplaceWithBranch_Text { get; }
    public static string ReplaceWithJetBrainsAnnotationsAttribute_Text { get; }
    public static string ReplaceWithConstantValue_Text { get; }
    public static string ReplaceWithFieldKeyword_Text { get; }
    public static string ReplaceWithPrimaryConstructorParameter_Text { get; }
    public static string ReplaceWith_Call_Text { get; }
    public static string Parameter_IsOutParameter_Text { get; }
    public static string RemoveNullChecksOfValueType_Text { get; }
    public static string RemoveNullChecksOfValueTypes_Text { get; }
    public static string ReplaceAssignmentWithRightPart_Text { get; }
    public static string ReplaceEqualityWith_Text { get; }
    public static string ReplaceByConditionOperand_Text { get; }
    public static string RemoveIfStatement_Text { get; }
    public static string ReplaceIfStatementWithRespectiveBranch_Text { get; }
    public static string ReplaceWithThenResultExpression_Text { get; }
    public static string ReplaceWithElseResultExpression_Text { get; }
    public static string ReplaceFinalizerWithIDisposablePattern_Text { get; }
    public static string ReplaceInitializerWithStatement_Text { get; }
    public static string ReplaceWithRightOperand_Text { get; }
    public static string ReplaceWithAssignment_Text { get; }
    public static string ReplaceWithLeftOperand_Text { get; }
    public static string RemoveExpression_Text { get; }
    public static string ReplaceExpressionWith__Text { get; }
    public static string ReplaceWithCountAccess_Text { get; }
    public static string UseCountAccess_Text { get; }
    public static string ReplaceWithDefaultValueReturn_Text { get; }
    public static string AddNewBeforeInitializer_Text { get; }
    public static string ReplaceCastsWithPatternVariable_Text { get; }
    public static string ReplaceWithIsAndConditionalOperator_Text { get; }
    public static string MakeSuffixUppercase_Text { get; }
    public static string ReplaceWithYieldReturn_Text { get; }
    public static string ReplaceWithYieldBreak_Text { get; }
    public static string SimplifyConditionalOperator_Text { get; }
    public static string ReplaceWithOperatorFix { get; }
    public static string ReturnDefaultValue_Text { get; }
    public static string YieldThisValue_Text { get; }
    public static string ReturnThisValue_Text { get; }
    public static string ConfigureAwaitAnalysis_Text { get; }
    public static string WhyIs_SuggestingThis_Text { get; }
    public static string ReplaceWith__Text { get; }
    public static string SimplifyNegatedPattern_Text { get; }
    public static string SimplifyNegativeEqualityExpression_Text { get; }
    public static string SimplifyStringInterpolation_Text { get; }
    public static string SpecifyExplicitArrayType_Text { get; }
    public static string SpecifyAttributeTarget_Text { get; }
    public static string SpecifyAttributeTargets_Text { get; }
    public static string RelocateAttributeToBackingField_Text { get; }
    public static string RelocateAttributeToEvent_Text { get; }
    public static string RelocateAttributeToProperty_Text { get; }
    public static string RelocateAttributeToPositionalProperty_Text { get; }
    public static string RelocateAttributeToReturnValue_Text { get; }
    public static string AddExplicitName_Text { get; }
    public static string SpecifyStringComparison_Text { get; }
    public static string UseCurrentCulture_Text { get; }
    public static string UseInvariantCulture_Text { get; }
    public static string SplitDeclaration_Text { get; }
    public static string SplitDeclarations_Text { get; }
    public static string SplitUsingStatementExpressions_Text { get; }
    public static string SurroundWithLock_Text { get; }
    public static string SurroundWithUnsafeBlock_Text { get; }
    public static string SwapViaDeconstruction_Text { get; }
    public static string ThisIsMemberInitializer_Text { get; }
    public static string ThisIsATypeTestPattern_Text { get; }
    public static string ConvertToAutoProperty_Text { get; }
    public static string ConvertToAutoProperties_Text { get; }
    public static string ToComputedProperty_Text { get; }
    public static string UseAwaitForeach_Text { get; }
    public static string UseAwaitUsing_Text { get; }
    public static string ToOrdinaryLocalVariable_Text { get; }
    public static string ToRefLocalVariable_Text { get; }
    public static string RemoveAttributes_Text { get; }
    public static string UnwrapFromTuple_Text { get; }
    public static string DiscardParameter_Text { get; }
    public static string RemoveUnusedLabel_Text { get; }
    public static string RemoveUnusedLabels_Text { get; }
    public static string ToConst_Text { get; }
    public static string IndicateUnusedVariableWithName_Text { get; }
    public static string UseArrayEmpty__Text { get; }
    public static string UseArrayEmptyT_Text { get; }
    public static string UseAsyncOverloads_Text { get; }
    public static string UseConfigureAwaitFalse_Text { get; }
    public static string UsePrefix_Text { get; }
    public static string UseTypeEmptyTypes_Text { get; }
    public static string UseEventArgsEmpty_Text { get; }
    public static string UseExplicitCastInsideForeachLoop_Text { get; }
    public static string ThisIsArrayOf__Text { get; }
    public static string UseIndexFromEndExpression_Text { get; }
    public static string UseNameofExpression_Text { get; }
    public static string UseNameofExpressions_Text { get; }
    public static string FailedToUseNameofExpressionBecauseOf_Text { get; }
    public static string UseNegatedPattern_Text { get; }
    public static string UseAnnotationSyntax_Text { get; }
    public static string UseCompilerAttributes_Text { get; }
    public static string UseTypeAnnotationSyntax_Text { get; }
    public static string UsePatternMatching_Text { get; }
    public static string UseRangeIndexer_Text { get; }
    public static string UseRefInitializer_Text { get; }
    public static string UseSpan_AsAVariableType_Text { get; }
    public static string UseArgumentNullExceptionThrowIfNull_Text { get; }
    public static string UseVarPattern_Text { get; }
    public static string UseWithExpression_Text { get; }
    public static string ExtractInitializer_Text { get; }
    public static string UseExplicitType_Text { get; }
    public static string ReplaceWithEmptyBlock_Text { get; }
    public static string UseEqualsCall_Text { get; }
    public static string UseEqualsInstead_Text { get; }
    public static string RewriteAs__Text { get; }
    public static string RewriteAllNullableTypes_Text { get; }
    public static string UseStringIsNullOrEmpty_Text { get; }
    public static string UseProvidedValue_Text { get; }
    public static string UseReferenceEquals_Text { get; }
    public static string FixUsingDirective_Text { get; }
    public static string RemoveStaticModifier_Text { get; }
    public static string AddOperationContractAttributeToAllMethods_Text { get; }
    public static string AddSystemServiceModelServiceContract_Text { get; }
    public static string ChangeReturnTypeToTask_Text { get; }
    public static string ChangeReturnTypeToVoid_Text { get; }
    public static string MakeOperationTwoWay_Text { get; }
    public static string RemoveOperationContractAttributeFrom_Text { get; }
    public static string CreateWrapperMethodReturningIAsyncOperation_Text { get; }
    public static string CreateWrapperMethodReturningIAsyncAction_Text { get; }
    public static string WrapTopLevelStatementsIntoClass_Text { get; }
    public static string Replace_Text { get; }
    public static string ReplaceWith_Text { get; }
    public static string WrapWithDelegateConstructor_Text { get; }
    public static string WrapWithLambda_Text { get; }
    public static string WrapTypeNameWithTypeof_Text { get; }
    public static string ReplaceByOperatorIsInvocation_Text { get; }
    public static string RedundanciesInSymbolDeclarationsQuickFixRegistration_Register_Remove_redundant__0__override { get; }
    public static string In_Scope_Text { get; }
    public static string Change_AccessRights_To_Text { get; }
    public static string Add_Body_Text { get; }
    public static string Add_ConstraintTo_Of___Text { get; }
    public static string Add_To__Text { get; }
    public static string AndHideNullableSuppressionsInspection_Text { get; }
    public static string AndShowWarningsAboutExistingNullable_Text { get; }
    public static string AndShowErrorsAboutExistingNullableSuppressions_Text { get; }
    public static string Convert__IntoClass_Text { get; }
    public static string Call_Expression_Text { get; }
    public static string Create_InBase__Text { get; }
    public static string CreateNestedSymbols_Text { get; }
    public static string CreateRecord_Text { get; }
    public static string Create_Symbols_Text { get; }
    public static string Type_Kind_Text { get; }
    public static string Interface_Kind_Text { get; }
    public static string CreateGetPinnableReferenceMethodIn__Text { get; }
    public static string CreateParameter_InContaining___Text { get; }
    public static string CreateParameter_InContaining__AndPull_Text { get; }
    public static string CreatePrimaryParameter_Text { get; }
    public static string CreatePrimaryParameter_AndPull_Text { get; }
    public static string CreateParameter_InContaining__Text { get; }
    public static string CreateTypeParameter_In___Text { get; }
    public static string Make_Implement__Text { get; }
    public static string DelegateImplementationTo___Text { get; }
    public static string Make_Async__Text { get; }
    public static string Make_ReturnVoid_Text { get; }
    public static string Seal___Text { get; }
    public static string Make_Readonly_Text { get; }
    public static string Make__Partial_Text { get; }
    public static string RemoveConstraintFor__Text { get; }
    public static string Remove_Initializer_Text { get; }
    public static string RemoveParametersTypeSpecification_Text { get; }
    public static string RemoveParameterTypeSpecification_Text { get; }
    public static string RemoveRedundant_Initializer_Text { get; }
    public static string Replace__WithItsValue_Text { get; }
    public static string Make___Text { get; }
    public static string Make_Extend__Text { get; }
    public static string MakeAccessor__Text { get; }
    public static string MakeInitOnly__Mutable_Text { get; }
    public static string MakeMutable__InitOnly_Text { get; }
    public static string InlineThis__Text { get; }
    public static string IntroduceOptionalParameterSFor___Text { get; }
    public static string Make_Kind_Static_Text { get; }
    public static string AnonymousFunction_Kind_Text { get; }
    public static string Make_Unsafe_Text { get; }
    public static string Make_UsingDirectiveUnsafe_Text { get; }
    public static string ChangeConstraintsOf_Of__ToNonNullable_Text { get; }
    public static string Make_TypeNotNullable_Text { get; }
    public static string Variable_Kind_Text { get; }
    public static string MethodReturn_Kind_Text { get; }
    public static string LocalFunctionReturn_Kind_Text { get; }
    public static string Property_Kind_Text { get; }
    public static string OperatorReturn_Kind_Text { get; }
    public static string ThisIs__Text { get; }
    public static string MakeTypeParameter___Text { get; }
    public static string MakeEnclosingInterfaceTypeParametersInvariantFix__Text { get; }
    public static string UseParameterType_OfBase__Text { get; }
    public static string UseReturnType_OfBase__Text { get; }
    public static string Add_exception_TagToXMLDocumentationContextAction_Description { get; }
    public static string Add_exception_TagToXMLDocumentationContextAction_Name { get; }
    public static string Add_inheritdoc_TagToXMLDocumentationContextAction_Description { get; }
    public static string Add_inheritdoc_TagToXMLDocumentationContextAction_Name { get; }
    public static string AddAnotherAccessorContextAction_Description { get; }
    public static string AddAnotherAccessorContextAction_Name { get; }
    public static string AddBlockBracesToSwitchSectionStatementsContextAction_Description { get; }
    public static string AddBlockBracesToSwitchSectionStatementsContextAction_Name { get; }
    public static string AddBracesContextAction_Description { get; }
    public static string AddBracesContextAction_Name { get; }
    public static string AddDeconstructPatternComponentNameContextAction_Description { get; }
    public static string AddDeconstructPatternComponentNameContextAction_Name { get; }
    public static string RemoveDeconstructPatternComponentNameContextAction_Description { get; }
    public static string ConvertToPrimaryConstructorContextAction_Name { get; }
    public static string ConvertToPrimaryConstructorContextAction_Description { get; }
    public static string RemoveDeconstructPatternComponentNameContextAction_Name { get; }
    public static string AddExplicitNameOfAnonymousPropertyContextAction_Description { get; }
    public static string AddExplicitNameOfAnonymousPropertyContextAction_Name { get; }
    public static string AddNameToArgumentContextAction_Description { get; }
    public static string AddNameToArgumentContextAction_Name { get; }
    public static string AddsSwitchConditionComponentContextAction_Description { get; }
    public static string AddsSwitchConditionComponentContextAction_Name { get; }
    public static string AddStringFormattingMethodArgumentContextAction_Description { get; }
    public static string AddStringFormattingMethodArgumentContextAction_Name { get; }
    public static string AddStringInterpolationArgumentContextAction_Description { get; }
    public static string AddStringInterpolationArgumentContextAction_Name { get; }
    public static string AddTupleComponentNameContextAction_Description { get; }
    public static string AddTupleComponentNameContextAction_Name { get; }
    public static string AddVariableDesignationForPatternContextAction_Description { get; }
    public static string AddVariableDesignationForPatternContextAction_Name { get; }
    public static string AnnotateEnumMembersWithEnumMemberAttributeContextAction_Description { get; }
    public static string AnnotateEnumMembersWithEnumMemberAttributeContextAction_Name { get; }
    public static string AnnotateMembersWithDataMemberAttributeContextAction_Description { get; }
    public static string AnnotateMembersWithDataMemberAttributeContextAction_Name { get; }
    public static string AnnotateMemberWithNullabilityAttributeContextAction_Description { get; }
    public static string AnnotateMemberWithNullabilityAttributeContextAction_Name { get; }
    public static string AnnotateMethodsWithOperationContractAttributeContextAction_Description { get; }
    public static string AnnotateMethodsWithOperationContractAttributeContextAction_Name { get; }
    public static string AssertReferenceIsNotNullContextAction_Description { get; }
    public static string AssertReferenceIsNotNullContextAction_Name { get; }
    public static string ChangeBetweenSetAndInitAccessorContextAction_Description { get; }
    public static string ChangeBetweenSetAndInitAccessorContextAction_Name { get; }
    public static string ChangeMemberVisibilityContextAction_Description { get; }
    public static string ChangeMemberVisibilityContextAction_Name { get; }
    public static string ChangeSignatureOfTheCurrentMemberContextAction_Description { get; }
    public static string ChangeSignatureOfTheCurrentMemberContextAction_Name { get; }
    public static string CopyTypeContextAction_Name { get; }
    public static string CopyTypeContextAction_Description { get; }
    public static string ChangeTypeDeclarationKindBetweenClassStructAndRecordContextAction_Description { get; }
    public static string ChangeTypeDeclarationKindBetweenClassStructAndRecordContextAction_Name { get; }
    public static string CheckAllStringParametersForNullsOrEmptyStringsContextAction_Description { get; }
    public static string CheckAllStringParametersForNullsOrEmptyStringsContextAction_Name { get; }
    public static string CheckAllStringParametersForNullsOrWhitespaceStringsContextAction_Description { get; }
    public static string CheckAllStringParametersForNullsOrWhitespaceStringsContextAction_Name { get; }
    public static string CheckArrayIndexValueContextAction_Description { get; }
    public static string CheckArrayIndexValueContextAction_Name { get; }
    public static string CheckCollectionIndexValueContextAction_Description { get; }
    public static string CheckCollectionIndexValueContextAction_Name { get; }
    public static string CheckDictionaryKeyValueContextAction_Description { get; }
    public static string CheckDictionaryKeyValueContextAction_Name { get; }
    public static string CheckEveryParameterForNullContextAction_Description { get; }
    public static string CheckEveryParameterForNullContextAction_Name { get; }
    public static string CheckIfEnumParameterIsDefinedByEnumTypeContextAction_Description { get; }
    public static string CheckIfEnumParameterIsDefinedByEnumTypeContextAction_Name { get; }
    public static string CheckIfNumericParameterIsOutOfRangeContextAction_Description { get; }
    public static string CheckIfNumericParameterIsOutOfRangeContextAction_Name { get; }
    public static string CheckIfParameterIsAnEmptyCollectionContextAction_Description { get; }
    public static string CheckIfParameterIsAnEmptyCollectionContextAction_Name { get; }
    public static string CheckIfParameterIsNotValidContextAction_Description { get; }
    public static string CheckIfParameterIsNotValidContextAction_Name { get; }
    public static string CheckIfParameterIsNullContextAction_Description { get; }
    public static string CheckIfParameterIsNullContextAction_Name { get; }
    public static string CheckIfReferenceIsNotNullContextAction_Description { get; }
    public static string CheckIfReferenceIsNotNullContextAction_Name { get; }
    public static string CheckIfStringParameterIsNullOrEmptyStringContextAction_Description { get; }
    public static string CheckIfStringParameterIsNullOrEmptyStringContextAction_Name { get; }
    public static string CheckIfStringParameterIsNullOrWhitespaceStringContextAction_Description { get; }
    public static string CheckIfStringParameterIsNullOrWhitespaceStringContextAction_Name { get; }
    public static string CheckIfVariableIsNullContextAction_Description { get; }
    public static string CheckIfVariableIsNullContextAction_Name { get; }
    public static string CheckSpan_T_IndexValueContextAction_Description { get; }
    public static string CheckSpan_T_IndexValueContextAction_Name { get; }
    public static string CheckStringBuilderIndexValueContextAction_Description { get; }
    public static string CheckStringBuilderIndexValueContextAction_Name { get; }
    public static string CheckStringIndexValueContextAction_Description { get; }
    public static string CheckStringIndexValueContextAction_Name { get; }
    public static string ComputeConstantValueContextAction_Description { get; }
    public static string ComputeConstantValueContextAction_Name { get; }
    public static string ConfigureNullCheckAssertionPatternContextAction_Description { get; }
    public static string ConfigureNullCheckAssertionPatternContextAction_Name { get; }
    public static string ConfigureParameterNullCheckPatternContextAction_Description { get; }
    public static string ConfigureParameterNullCheckPatternContextAction_Name { get; }
    public static string ConfigureVariableNullCheckPatternContextAction_Description { get; }
    public static string ConfigureVariableNullCheckPatternContextAction_Name { get; }
    public static string Convert_ConditionalExpressionToIfStatementContextAction_Description { get; }
    public static string Convert_ConditionalExpressionToIfStatementContextAction_Name { get; }
    public static string Convert_ConditionalExpressionToSwitchExpressionContextAction_Description { get; }
    public static string Convert_ConditionalExpressionToSwitchExpressionContextAction_Name { get; }
    public static string ConvertAnonymousMethodToLambdaExpressionContextAction_Description { get; }
    public static string ConvertAnonymousMethodToLambdaExpressionContextAction_Name { get; }
    public static string ConvertAnonymousTypeToNamedTypeContextAction_Description { get; }
    public static string ConvertAnonymousTypeToNamedTypeContextAction_Name { get; }
    public static string ConvertAnonymousTypeToTupleContextAction_Description { get; }
    public static string ConvertAnonymousTypeToTupleContextAction_Name { get; }
    public static string ConvertAutoPropertyToPropertyWithDefaultBodyContextAction_Description { get; }
    public static string ConvertAutoPropertyToPropertyWithDefaultBodyContextAction_Name { get; }
    public static string ConvertCatchClauseToCatchExceptionContextAction_Description { get; }
    public static string ConvertCatchClauseToCatchExceptionContextAction_Name { get; }
    public static string ConvertCatchExceptionClauseToCatchContextAction_Description { get; }
    public static string ConvertCatchExceptionClauseToCatchContextAction_Name { get; }
    public static string ConvertCollectionInitializerIntoAddMethodCallsContextAction_Description { get; }
    public static string ConvertCollectionInitializerIntoAddMethodCallsContextAction_Name { get; }
    public static string UseCollectionExpressionContextAction_Name { get; }
    public static string UseCollectionExpressionContextAction_Description { get; }
    public static string ConvertCompoundAssignmentToRegularAssignmentContextAction_Description { get; }
    public static string ConvertCompoundAssignmentToRegularAssignmentContextAction_Name { get; }
    public static string ConvertConstructorToFactoryMethodContextAction_Description { get; }
    public static string ConvertConstructorToFactoryMethodContextAction_Name { get; }
    public static string ConvertCurrentExtensionMethodIntoOrdinaryStaticMethodFormContextAction_Description { get; }
    public static string ConvertCurrentExtensionMethodIntoOrdinaryStaticMethodFormContextAction_Name { get; }
    public static string ConvertCurrentMethodIntoExtensionMethodFormContextAction_Description { get; }
    public static string ConvertCurrentMethodIntoExtensionMethodFormContextAction_Name { get; }
    public static string ConvertExplicitToImplicitImplementationContextAction_Description { get; }
    public static string ConvertExplicitToImplicitImplementationContextAction_Name { get; }
    public static string ConvertExpressionBodyMemberToStatementBodyContextAction_Description { get; }
    public static string ConvertExpressionBodyMemberToStatementBodyContextAction_Name { get; }
    public static string ConvertExpressionLambdaToStatementLambdaContextAction_Description { get; }
    public static string ConvertExpressionLambdaToStatementLambdaContextAction_Name { get; }
    public static string ConvertForeachToForLoopContextAction_Description { get; }
    public static string ConvertForeachToForLoopContextAction_Name { get; }
    public static string ConvertIfStatementTo_ConditionalExpressionContextAction_Description { get; }
    public static string ConvertIfStatementTo_ConditionalExpressionContextAction_Name { get; }
    public static string ConvertIfStatementToSwitchCaseGuardClauseContextAction_Description { get; }
    public static string ConvertIfStatementToSwitchCaseGuardClauseContextAction_Name { get; }
    public static string ConvertIfStatementToSwitchExpressionContextAction_Description { get; }
    public static string ConvertIfStatementToSwitchExpressionContextAction_Name { get; }
    public static string ConvertIfStatementToSwitchStatementContextAction_Description { get; }
    public static string ConvertIfStatementToSwitchStatementContextAction_Name { get; }
    public static string ConvertImplicitToExplicitInterfaceImplementationContextAction_Description { get; }
    public static string ConvertImplicitToExplicitInterfaceImplementationContextAction_Name { get; }
    public static string ConvertIntegerLiteralToBinaryFormContextAction_Description { get; }
    public static string ConvertIntegerLiteralToBinaryFormContextAction_Name { get; }
    public static string ConvertIntegerLiteralToHexadecimalFormContextAction_Description { get; }
    public static string ConvertIntegerLiteralToHexadecimalFormContextAction_Name { get; }
    public static string ConvertIntegralLiteralToDecimalFormContextAction_Description { get; }
    public static string ConvertIntegralLiteralToDecimalFormContextAction_Name { get; }
    public static string ConvertInvalidCharacterLiteralToStringContextAction_Description { get; }
    public static string ConvertInvalidCharacterLiteralToStringContextAction_Name { get; }
    public static string ConvertIteratorToMethodContextAction_Description { get; }
    public static string ConvertIteratorToMethodContextAction_Name { get; }
    public static string ConvertLambdaExpressionToAnonymousMethodContextAction_Description { get; }
    public static string ConvertLambdaExpressionToAnonymousMethodContextAction_Name { get; }
    public static string ConvertLINQToCodeContextAction_Description { get; }
    public static string ConvertLINQToCodeContextAction_Name { get; }
    public static string ConvertLINQToMethodChainContextAction_Description { get; }
    public static string ConvertLINQToMethodChainContextAction_Name { get; }
    public static string ConvertMethodGroupToAnonymousMethodContextAction_Description { get; }
    public static string ConvertMethodGroupToAnonymousMethodContextAction_Name { get; }
    public static string ConvertMethodGroupToLambdaContextAction_Description { get; }
    public static string ConvertMethodGroupToLambdaContextAction_Name { get; }
    public static string ConvertMethodToPropertyContextAction_Description { get; }
    public static string ConvertMethodToPropertyContextAction_Name { get; }
    public static string ConvertNullCoalescingAssignmentToIfStatementContextAction_Description { get; }
    public static string ConvertNullCoalescingAssignmentToIfStatementContextAction_Name { get; }
    public static string ConvertNullCoalescingExpressionToIfStatementContextAction_Description { get; }
    public static string ConvertNullCoalescingExpressionToIfStatementContextAction_Name { get; }
    public static string ConvertObjectInitializerIntoAssignmentStatementsContextAction_Description { get; }
    public static string ConvertObjectInitializerIntoAssignmentStatementsContextAction_Name { get; }
    public static string ConvertObjectInitializerIntoConstructorInvocationContextAction_Description { get; }
    public static string ConvertObjectInitializerIntoConstructorInvocationContextAction_Name { get; }
    public static string ConvertPropertyToMethodContextAction_Description { get; }
    public static string ConvertPropertyToMethodContextAction_Name { get; }
    public static string ConvertsMemberValueCheckExpressionToRecursivePatternContextAction_Description { get; }
    public static string ConvertsMemberValueCheckExpressionToRecursivePatternContextAction_Name { get; }
    public static string ConvertsNotNullCheckIntoObjectPatternCheckContextAction_Description { get; }
    public static string ConvertsNotNullCheckIntoObjectPatternCheckContextAction_Name { get; }
    public static string ConvertStatementBodyMemberToExpressionBodyContextAction_Description { get; }
    public static string ConvertStatementBodyMemberToExpressionBodyContextAction_Name { get; }
    public static string ConvertStatementLambdaToExpressionLambdaContextAction_Description { get; }
    public static string ConvertStatementLambdaToExpressionLambdaContextAction_Name { get; }
    public static string ConvertStringComparisonToStringEqualsCallContextAction_Description { get; }
    public static string ConvertStringComparisonToStringEqualsCallContextAction_Name { get; }
    public static string ConvertStringFormatToStringInterpolationContextAction_Description { get; }
    public static string ConvertStringFormatToStringInterpolationContextAction_Name { get; }
    public static string ConvertStringInterpolationToStringFormatCallContextAction_Description { get; }
    public static string ConvertStringInterpolationToStringFormatCallContextAction_Name { get; }
    public static string ConvertStringLiteralToStringInterpolationContextAction_Description { get; }
    public static string ConvertStringLiteralToStringInterpolationContextAction_Name { get; }
    public static string ConvertSwitchExpressionToConditional_ExpressionSContextAction_Description { get; }
    public static string ConvertSwitchExpressionToConditional_ExpressionSContextAction_Name { get; }
    public static string ConvertSwitchExpressionToIfStatementsContextAction_Description { get; }
    public static string ConvertSwitchExpressionToIfStatementsContextAction_Name { get; }
    public static string ConvertSwitchExpressionToSwitchStatementContextAction_Description { get; }
    public static string ConvertSwitchExpressionToSwitchStatementContextAction_Name { get; }
    public static string ConvertSwitchStatementToIfStatementsContextAction_Description { get; }
    public static string ConvertSwitchStatementToIfStatementsContextAction_Name { get; }
    public static string ConvertSwitchStatementToSwitchExpressionContextAction_Description { get; }
    public static string ConvertSwitchStatementToSwitchExpressionContextAction_Name { get; }
    public static string ConvertToRegularStringInterpolationContextAction_Description { get; }
    public static string ConvertToRegularStringInterpolationContextAction_Name { get; }
    public static string ConvertToRegularStringLiteralContextAction_Description { get; }
    public static string ConvertToRegularStringLiteralContextAction_Name { get; }
    public static string ConvertToTopLevelCodeContextAction_Description { get; }
    public static string ConvertToTopLevelCodeContextAction_Name { get; }
    public static string ConvertToUsingDeclarationContextAction_Description { get; }
    public static string ConvertToUsingStatementContextAction_Description { get; }
    public static string ConvertToVerbatimStringInterpolationContextAction_Description { get; }
    public static string ConvertRegularToRawStringInterpolationContextAction_Description { get; }
    public static string ConvertVerbatimToRawStringInterpolationContextAction_Description { get; }
    public static string ConvertToVerbatimStringInterpolationContextAction_Name { get; }
    public static string ConvertRegularToRawStringInterpolationContextAction_Name { get; }
    public static string ConvertVerbatimToRawStringInterpolationContextAction_Name { get; }
    public static string ConvertToVerbatimStringLiteralContextAction_Description { get; }
    public static string ConvertToVerbatimStringLiteralContextAction_Name { get; }
    public static string ConvertRegularToRawStringLiteralContextAction_Name { get; }
    public static string ConvertVerbatimToRawStringLiteralContextAction_Name { get; }
    public static string ChangeRawStringContextAction_Name { get; }
    public static string ChangeRawStringContextAction_Description { get; }
    public static string AddQuotesToRawStringContextAction_Text { get; }
    public static string RemoveQuotesFromRawStringContextAction_Text { get; }
    public static string AddDollarToRawStringContextAction_Text { get; }
    public static string RemoveDollarFromRawStringContextAction_Text { get; }
    public static string ConvertToSingleLineRawStringContextAction_Text { get; }
    public static string ConvertToMultiLineRawStringContextAction_Text { get; }
    public static string ConvertRegularToRawStringLiteralContextAction_Description { get; }
    public static string ConvertVerbatimToRawStringLiteralContextAction_Description { get; }
    public static string CopyXMLDocumentationFromBaseMemberContextAction_Description { get; }
    public static string CopyXMLDocumentationFromBaseMemberContextAction_Name { get; }
    public static string CreateAnotherPartOfATypeDeclarationContextAction_Description { get; }
    public static string CreateAnotherPartOfATypeDeclarationContextAction_Name { get; }
    public static string CreateCollectionExpressionFromParamsParameterArgumentsContextAction_Description { get; }
    public static string CreateCollectionExpressionFromParamsParameterArgumentsContextAction_Name { get; }
    public static string CreateDerivedTypeContextAction_Description { get; }
    public static string CreateDerivedTypeContextAction_Name { get; }
    public static string CreateEventInvocatorContextAction_Description { get; }
    public static string CreateEventInvocatorContextAction_Name { get; }
    public static string CreateExplicitArrayCreationFromParamsParameterArgumentsContextAction_Description { get; }
    public static string CreateExplicitArrayCreationFromParamsParameterArgumentsContextAction_Name { get; }
    public static string CreateExplicitCollectionCreationFromParamsParameterArgumentsContextAction_Description { get; }
    public static string CreateExplicitCollectionCreationFromParamsParameterArgumentsContextAction_Name { get; }
    public static string CreateExplicitConstructorDeclarationForPrimaryConstructorContextAction_Description { get; }
    public static string CreateExplicitConstructorDeclarationForPrimaryConstructorContextAction_Name { get; }
    public static string CreateExplicitPropertyDeclarationForPositionalParameterContextAction_Description { get; }
    public static string CreateExplicitFieldDeclarationForParameterOfPrimaryConstructorContextAction_Description { get; }
    public static string CreateExplicitPropertyDeclarationForPositionalParameterContextAction_Name { get; }
    public static string CreateExplicitFieldDeclarationForParameterOfPrimaryConstructorContextAction_Name { get; }
    public static string CreateMatchingCheckedOperatorContextAction_Description { get; }
    public static string CreateMatchingCheckedOperatorContextAction_Name { get; }
    public static string CreateOverloadWithoutParameterContextAction_Description { get; }
    public static string CreateOverloadWithoutParameterContextAction_Name { get; }
    public static string CreateReturnFromExpressionContextAction_Description { get; }
    public static string CreateReturnFromExpressionContextAction_Name { get; }
    public static string DeconstructVariableContextAction_Description { get; }
    public static string DeconstructVariableContextAction_Name { get; }
    public static string DeleteCommentContextAction_Description { get; }
    public static string DeleteCommentContextAction_Name { get; }
    public static string Enable_ASuppressedNullableWarningMightHideAnUnderlyingProblem_InspectionContextAction_Description { get; }
    public static string Enable_ASuppressedNullableWarningMightHideAnUnderlyingProblem_InspectionContextAction_Name { get; }
    public static string Enable_EnforceBracesInFixedStatement_InspectionContextAction_Description { get; }
    public static string Enable_EnforceBracesInFixedStatement_InspectionContextAction_Name { get; }
    public static string Enable_EnforceBracesInForeachStatement_InspectionContextAction_Description { get; }
    public static string Enable_EnforceBracesInForeachStatement_InspectionContextAction_Name { get; }
    public static string Enable_EnforceBracesInForStatement_InspectionContextAction_Description { get; }
    public static string Enable_EnforceBracesInForStatement_InspectionContextAction_Name { get; }
    public static string Enable_EnforceBracesInLockStatement_InspectionContextAction_Description { get; }
    public static string Enable_EnforceBracesInLockStatement_InspectionContextAction_Name { get; }
    public static string Enable_EnforceBracesInUsingStatement_InspectionContextAction_Description { get; }
    public static string Enable_EnforceBracesInUsingStatement_InspectionContextAction_Name { get; }
    public static string Enable_EnforceBracesInWhileStatement_InspectionContextAction_Description { get; }
    public static string Enable_EnforceBracesInWhileStatement_InspectionContextAction_Name { get; }
    public static string Enable_LocalFunctionCanBeMadeStatic_InspectionContextAction_Description { get; }
    public static string Enable_LocalFunctionCanBeMadeStatic_InspectionContextAction_Name { get; }
    public static string Enable_StructMemberCanBeReadonly_InspectionContextAction_Description { get; }
    public static string Enable_StructMemberCanBeReadonly_InspectionContextAction_Name { get; }
    public static string Enable_SuppressNullableWarningWith_QuickFixInCurrentSolutionContextAction_Description { get; }
    public static string Enable_SuppressNullableWarningWith_QuickFixInCurrentSolutionContextAction_Name { get; }
    public static string Enable_UnnecessaryWhitespaceAtTheEndOfLine_InspectionContextAction_Description { get; }
    public static string Enable_UnnecessaryWhitespaceAtTheEndOfLine_InspectionContextAction_Name { get; }
    public static string Enable_UsageOfTabulationCharacterForIndentationIsProhibited_InspectionContextAction_Description { get; }
    public static string Enable_UsageOfTabulationCharacterForIndentationIsProhibited_InspectionContextAction_Name { get; }
    public static string EncapsulateLazyFieldContextAction_Description { get; }
    public static string EncapsulateLazyFieldContextAction_Name { get; }
    public static string EvaluateExpressionContextAction_Description { get; }
    public static string EvaluateExpressionContextAction_Name { get; }
    public static string ExtractAnonymousMethodExpressionToLocalFunctionContextAction_Description { get; }
    public static string ExtractAnonymousMethodExpressionToLocalFunctionContextAction_Name { get; }
    public static string ExtractAnonymousMethodExpressionToNamedMethodContextAction_Description { get; }
    public static string ExtractAnonymousMethodExpressionToNamedMethodContextAction_Name { get; }
    public static string ConvertToGlobalUsingContextAction_Description { get; }
    public static string ConvertToGlobalUsingContextAction_Name { get; }
    public static string ExtractLambdaExpressionToLocalFunctionContextAction_Description { get; }
    public static string ExtractLambdaExpressionToLocalFunctionContextAction_Name { get; }
    public static string ExtractLambdaExpressionToNamedMethodContextAction_Description { get; }
    public static string ExtractLambdaExpressionToNamedMethodContextAction_Name { get; }
    public static string ExtractLocalFunctionToRegularMethodContextAction_Description { get; }
    public static string ExtractLocalFunctionToRegularMethodContextAction_Name { get; }
    public static string ExtractMethodFromSelectedCodeContextAction_Description { get; }
    public static string ExtractMethodFromSelectedCodeContextAction_Name { get; }
    public static string FillObjectInitializerContextAction_Description { get; }
    public static string FillObjectInitializerContextAction_Name { get; }
    public static string FixInvalidEscapeSequencesContextAction_Description { get; }
    public static string FixInvalidEscapeSequencesContextAction_Name { get; }
    public static string FixInvalidRegularStringContextAction_Description { get; }
    public static string FixInvalidRegularStringContextAction_Name { get; }
    public static string FixTernaryExpressionInStringInterpolationContextAction_Description { get; }
    public static string FixTernaryExpressionInStringInterpolationContextAction_Name { get; }
    public static string FlipInvocationExpressionContextAction_Description { get; }
    public static string FlipInvocationExpressionContextAction_Name { get; }
    public static string FlipRelationalExpressionContextAction_Description { get; }
    public static string FlipRelationalExpressionContextAction_Name { get; }
    public static string GenerateMethodToCheckWhetherEnumFlagContextAction_Description { get; }
    public static string GenerateMethodToCheckWhetherEnumFlagContextAction_Name { get; }
    public static string GenerateTypePatternsContextAction_Description { get; }
    public static string GenerateTypePatternsContextAction_Name { get; }
    public static string ImplementAbstractMemberContextAction_Description { get; }
    public static string ImplementAbstractMemberContextAction_Name { get; }
    public static string ImplementCustomEventAccessorsContextAction_Description { get; }
    public static string ImplementCustomEventAccessorsContextAction_Name { get; }
    public static string ImplementINotifyPropertyChangedPatternContextAction_Description { get; }
    public static string ImplementINotifyPropertyChangedPatternContextAction_Name { get; }
    public static string ImportStaticMembersWithUsingStaticDirectiveContextAction_Description { get; }
    public static string ImportStaticMembersWithUsingStaticDirectiveContextAction_Name { get; }
    public static string IncludeMemberAccessIntoObjectPatternContextAction_Description { get; }
    public static string IncludeMemberAccessIntoObjectPatternContextAction_Name { get; }
    public static string InitializeAutoPropertyFromConstructorParameterContextAction_Description { get; }
    public static string InitializeAutoPropertyFromConstructorParameterContextAction_Name { get; }
    public static string InitializeFieldFromConstructorParameterContextAction_Description { get; }
    public static string InitializeFieldFromConstructorParameterContextAction_Name { get; }
    public static string InitializeMemberFromConstructorParameterContextAction_Name { get; }
    public static string InitializeMemberFromConstructorParameterContextAction_Text { get; }
    public static string InitializeMemberFromConstructorParameterContextAction_Description { get; }
    public static string InitializeNonPrivateFieldFromConstructorParameterContextAction_Description { get; }
    public static string InitializeNonPrivateFieldFromConstructorParameterContextAction_Name { get; }
    public static string InlineControlTransferStatementContextAction_Description { get; }
    public static string InlineControlTransferStatementContextAction_Name { get; }
    public static string ConvertToNonGlobalUsingContextAction_Description { get; }
    public static string InlineUsingAliasContextAction_Description { get; }
    public static string ConvertToNonGlobalUsingContextAction_Name { get; }
    public static string InlineUsingAliasContextAction_Name { get; }
    public static string InlineOutVariableDeclarationContextAction_Description { get; }
    public static string InlineOutVariableDeclarationContextAction_Name { get; }
    public static string InlineStringInterpolationArgumentContextAction_Description { get; }
    public static string InlineStringInterpolationArgumentContextAction_Name { get; }
    public static string InlinesVariableIntoConditionExpressionUsingThisVariableContextAction_Description { get; }
    public static string InlinesVariableIntoConditionExpressionUsingThisVariableContextAction_Name { get; }
    public static string InlineTemporaryVariableContextAction_Description { get; }
    public static string InlineTemporaryVariableContextAction_Name { get; }
    public static string InsertAnonymousMethodSignatureContextAction_Description { get; }
    public static string InsertAnonymousMethodSignatureContextAction_Name { get; }
    public static string InsertDigitSeparatorsInRealLiteralContextAction_Description { get; }
    public static string InsertDigitSeparatorsInRealLiteralContextAction_Name { get; }
    public static string InsertGenericMethodInvocationTypeArgumentsContextAction_Description { get; }
    public static string InsertGenericMethodInvocationTypeArgumentsContextAction_Name { get; }
    public static string InsertLambdaExpressionSignatureContextAction_Description { get; }
    public static string InsertLambdaExpressionReturnTypeContextAction_Description { get; }
    public static string InsertLambdaExpressionSignatureContextAction_Name { get; }
    public static string InsertLambdaExpressionReturnTypeContextAction_Name { get; }
    public static string InsertTypeSpecificationAfterDefaultLiteralContextAction_Description { get; }
    public static string InsertTypeSpecificationAfterDefaultLiteralContextAction_Name { get; }
    public static string IntroduceVariableFromSelectedExpressionContextAction_Description { get; }
    public static string IntroduceVariableFromSelectedExpressionContextAction_Name { get; }
    public static string IntroduceTypeAliasContextAction_Name { get; }
    public static string IntroduceTypeAliasContextAction_Description { get; }
    public static string IntroduceTypeAliasContextAction_Text { get; }
    public static string UseTypeAliasContextAction_Name { get; }
    public static string UseTypeAliasContextAction_Description { get; }
    public static string UseTypeAliasContextAction_Text { get; }
    public static string Invert_OperatorConditionContextAction_Description { get; }
    public static string Invert_OperatorConditionContextAction_Name { get; }
    public static string InvertIfStatementContextAction_Description { get; }
    public static string InvertIfStatementContextAction_Name { get; }
    public static string InvokeExtensionMethodAsOrdinaryStaticMethodContextAction_Description { get; }
    public static string InvokeExtensionMethodAsOrdinaryStaticMethodContextAction_Name { get; }
    public static string IterateViaAwaitForeachContextAction_Description { get; }
    public static string IterateViaAwaitForeachContextAction_Name { get; }
    public static string IterateViaForeachBasedOnLiveTemplateContextAction_Description { get; }
    public static string IterateViaForeachBasedOnLiveTemplateContextAction_Name { get; }
    public static string IterateViaForeachContextAction_Description { get; }
    public static string IterateViaForeachContextAction_Name { get; }
    public static string JoinAttributesIntoSingleSectionContextAction_Description { get; }
    public static string JoinAttributesIntoSingleSectionContextAction_Name { get; }
    public static string JoinLocalVariableDeclarationAndAssignmentContextAction_Description { get; }
    public static string JoinLocalVariableDeclarationAndAssignmentContextAction_Name { get; }
    public static string JoinNullCheckWithAssignmentContextAction_Description { get; }
    public static string JoinNullCheckWithAssignmentContextAction_Name { get; }
    public static string JoinStringLiteralsContextAction_Description { get; }
    public static string JoinStringLiteralsContextAction_Name { get; }
    public static string LiftALocalFunctionClosureToParameterContextAction_Description { get; }
    public static string LiftALocalFunctionClosureToParameterContextAction_Name { get; }
    public static string MakeMethodPartialContextAction_Description { get; }
    public static string MakeMethodPartialContextAction_Name { get; }
    public static string MarkStringLiteralAsStringInterpolationContextAction_Description { get; }
    public static string MarkStringLiteralAsStringInterpolationContextAction_Name { get; }
    public static string MatchFileNameWithTypeNameContextAction_Description { get; }
    public static string MatchFileNameWithTypeNameContextAction_Name { get; }
    public static string MergeDeconstructedDeclarationContextAction_Description { get; }
    public static string MergeDeconstructedDeclarationContextAction_Name { get; }
    public static string MergeNestedIfStatementsContextAction_Description { get; }
    public static string MergeNestedIfStatementsContextAction_Name { get; }
    public static string MergePartialMethodDeclarationsContextAction_Description { get; }
    public static string MergePartialMethodDeclarationsContextAction_Name { get; }
    public static string MergePartialTypeDeclarationsContextAction_Description { get; }
    public static string MergePartialTypeDeclarationsContextAction_Name { get; }
    public static string MergeSequentialChecksIntoNullPropagatingExpressionContextAction_Description { get; }
    public static string MergeSequentialChecksIntoNullPropagatingExpressionContextAction_Name { get; }
    public static string MergeSequentialNullPatternChecksIntoSinglePatternCheckContextAction_Description { get; }
    public static string MergeSequentialNullPatternChecksIntoSinglePatternCheckContextAction_Name { get; }
    public static string SplitVarPatternContextAction_Description { get; }
    public static string SplitVarPatternContextAction_Name { get; }
    public static string MigrateToNullableEnableContextAction_Description { get; }
    public static string MigrateToNullableEnableContextAction_Name { get; }
    public static string MoveAssignmentInConstructorToInitializerContextAction_Description { get; }
    public static string MoveAssignmentInConstructorToInitializerContextAction_Name { get; }
    public static string MoveDeclarationSToAnotherTypePartContextAction_Description { get; }
    public static string MoveDeclarationSToAnotherTypePartContextAction_Name { get; }
    public static string MoveInitializationToConstructorSContextAction_Description { get; }
    public static string MoveInitializationToConstructorSContextAction_Name { get; }
    public static string MoveTypeToAnotherFileToMatchItsNameContextAction_Description { get; }
    public static string MoveTypeToAnotherFileToMatchItsNameContextAction_Name { get; }
    public static string NegateLogicalExpressionContextAction_Description { get; }
    public static string NegateLogicalExpressionContextAction_Name { get; }
    public static string OverrideVirtualMemberContextAction_Description { get; }
    public static string OverrideVirtualMemberContextAction_Name { get; }
    public static string PullExpressionFromVariableInitializerContextAction_Description { get; }
    public static string PullExpressionFromVariableInitializerContextAction_Name { get; }
    public static string PushExpressionToVariableInitializerContextAction_Description { get; }
    public static string PushExpressionToVariableInitializerContextAction_Name { get; }
    public static string QualifyStaticMembersImportedViaUsingStaticDirectiveContextAction_Description { get; }
    public static string QualifyStaticMembersImportedViaUsingStaticDirectiveContextAction_Name { get; }
    public static string RemoveArgumentNameContextAction_Description { get; }
    public static string RemoveArgumentNameContextAction_Name { get; }
    public static string RemoveBracesContextAction_Description { get; }
    public static string RemoveBracesContextAction_Name { get; }
    public static string RemoveDigitSeparatorsFromNumericLiteralContextAction_Description { get; }
    public static string RemoveDigitSeparatorsFromNumericLiteralContextAction_Name { get; }
    public static string RemoveRedundantParenthesisContextAction_Description { get; }
    public static string RemoveRedundantParenthesisContextAction_Name { get; }
    public static string RemoveStringFormattingMethodArgumentContextAction_Description { get; }
    public static string RemoveStringFormattingMethodArgumentContextAction_Name { get; }
    public static string RemoveSwitchConditionComponentContextAction_Description { get; }
    public static string RemoveSwitchConditionComponentContextAction_Name { get; }
    public static string RemoveTupleComponentNameContextAction_Description { get; }
    public static string RemoveTupleComponentNameContextAction_Name { get; }
    public static string Replace_ConditionalOperatorWithNullPropagatingExpressionContextAction_Description { get; }
    public static string Replace_ConditionalOperatorWithNullPropagatingExpressionContextAction_Name { get; }
    public static string ReplaceArrayInitializerWithExpressionContextAction_Description { get; }
    public static string ReplaceArrayInitializerWithExpressionContextAction_Name { get; }
    public static string ReplaceAutoImplementedPropertyAccessorWithExplicitlyImplementedAccessorContextAction_Description { get; }
    public static string ReplaceAutoImplementedPropertyAccessorWithExplicitlyImplementedAccessorContextAction_Name { get; }
    public static string ReplaceAutoPropertyWithPropertyAndBackingFieldContextAction_Description { get; }
    public static string ReplaceAutoPropertyWithPropertyAndBackingFieldContextAction_Name { get; }
    public static string ReplaceAutoPropertyWithPropertyAndFieldKeywordContextAction_Description { get; }
    public static string ReplaceAutoPropertyWithPropertyAndFieldKeywordContextAction_Name { get; }
    public static string ReplaceCastExpressionWithSafeAsCastContextAction_Description { get; }
    public static string ReplaceCastExpressionWithSafeAsCastContextAction_Name { get; }
    public static string ReplaceConditionalAccessExpressionWithUnconditionalAccessContextAction_Description { get; }
    public static string ReplaceConditionalAccessExpressionWithUnconditionalAccessContextAction_Name { get; }
    public static string ReplaceExplicitTypeSpecificationWithVarContextAction_Description { get; }
    public static string ReplaceExplicitTypeSpecificationWithVarContextAction_Name { get; }
    public static string ReplaceFieldKeywordWithExplicitFieldDeclarationContextAction_Description { get; }
    public static string ReplaceFieldKeywordWithExplicitFieldDeclarationContextAction_Name { get; }
    public static string ReplaceIfStatementWithNullPropagationContextAction_Description { get; }
    public static string ReplaceIfStatementWithNullPropagationContextAction_Name { get; }
    public static string ReplaceLogicalExpressionWithEqualExpressionContextAction_Description { get; }
    public static string ReplaceLogicalExpressionWithEqualExpressionContextAction_Name { get; }
    public static string ReplaceMemberAccessWithConditionalAccessExpressionContextAction_Description { get; }
    public static string ReplaceMemberAccessWithConditionalAccessExpressionContextAction_Name { get; }
    public static string ReplaceNullPropagatingExpressionWith_ConditionalOperatorContextAction_Description { get; }
    public static string ReplaceNullPropagatingExpressionWith_ConditionalOperatorContextAction_Name { get; }
    public static string ReplaceNullPropagatingExpressionWithIfStatementContextAction_Description { get; }
    public static string ReplaceNullPropagatingExpressionWithIfStatementContextAction_Name { get; }
    public static string ReplacePropertyWithBackingFieldWithAutoPropertyContextAction_Description { get; }
    public static string ReplacePropertyWithBackingFieldWithAutoPropertyContextAction_Name { get; }
    public static string ReplaceSafeAsCastExpressionWithRegularCastContextAction_Description { get; }
    public static string ReplaceSafeAsCastExpressionWithRegularCastContextAction_Name { get; }
    public static string ReplaceSeparateDeconstructionDeclarationsWithSingleDeclarationContextAction_Description { get; }
    public static string ReplaceSeparateDeconstructionDeclarationsWithSingleDeclarationContextAction_Name { get; }
    public static string ReplaceVarWithExplicitTypeDeclarationContextAction_Description { get; }
    public static string ReplaceVarWithExplicitTypeDeclarationContextAction_Name { get; }
    public static string ReverseAssignmentStatementContextAction_Description { get; }
    public static string ReverseAssignmentStatementContextAction_Name { get; }
    public static string ReverseForLoopStatementContextAction_Description { get; }
    public static string ReverseForLoopStatementContextAction_Name { get; }
    public static string SetProjectConfigureAwaitAnalysisModeContextAction_Description { get; }
    public static string SetProjectConfigureAwaitAnalysisModeContextAction_Name { get; }
    public static string SetProjectLanguageLevelContextAction_Description { get; }
    public static string SetProjectLanguageLevelContextAction_Name { get; }
    public static string SpecifyArrayTypeExplicitlyContextAction_Description { get; }
    public static string SpecifyArrayTypeExplicitlyContextAction_Name { get; }
    public static string SpecifyCreatedTypeContextAction_Description { get; }
    public static string SpecifyCreatedTypeContextAction_Name { get; }
    public static string SpecifyEnumMemberValuesContextAction_Description { get; }
    public static string SpecifyEnumMemberValuesContextAction_Name { get; }
    public static string SplitAndPatternsIntoMultipleIsExpressionsOrGuardExpressionContextAction_Description { get; }
    public static string SplitAndPatternsIntoMultipleIsExpressionsOrGuardExpressionContextAction_Name { get; }
    public static string SplitAttributesIntoSeparateSectionsContextAction_Description { get; }
    public static string SplitAttributesIntoSeparateSectionsContextAction_Name { get; }
    public static string SplitDeclarationListContextAction_Description { get; }
    public static string SplitDeclarationListContextAction_Name { get; }
    public static string SplitGuardClauseWithConditionIntoTwoCaseLabelsWithGuardClausesContextAction_Description { get; }
    public static string SplitGuardClauseWithConditionIntoTwoCaseLabelsWithGuardClausesContextAction_Name { get; }
    public static string SplitIntoNestedPatternsContextAction_Description { get; }
    public static string SplitIntoNestedPatternsContextAction_Name { get; }
    public static string MovesVariableDeclarationToOuterScope_ContextAction_Description { get; }
    public static string SplitLocalVariableDeclarationAndInitializationContextAction_Description { get; }
    public static string SplitLocalVariableDeclarationAndInitializationContextAction_Name { get; }
    public static string SplitNullPropagatingExpressionIntoSequentialChecksContextAction_Description { get; }
    public static string SplitNullPropagatingExpressionIntoSequentialChecksContextAction_Name { get; }
    public static string SplitOrPatternsIntoMultipleIsExpressionsOrSwitchCasesContextAction_Description { get; }
    public static string SplitOrPatternsIntoMultipleIsExpressionsOrSwitchCasesContextAction_Name { get; }
    public static string SplitRecursivePatternIntoSeveralConsecutiveChecksContextAction_Description { get; }
    public static string SplitListPatternIntoSeveralConsecutiveChecksContextAction_Description { get; }
    public static string SplitRecursivePatternIntoSeveralConsecutiveChecksContextAction_Name { get; }
    public static string SplitListPatternIntoSeveralConsecutiveChecksContextAction_Name { get; }
    public static string SplitStringLiteralContextAction_Description { get; }
    public static string SplitStringLiteralContextAction_Name { get; }
    public static string SplitTupleAssignmentIntoSeparateAssignmentStatementsContextAction_Description { get; }
    public static string SplitTupleAssignmentIntoSeparateAssignmentStatementsContextAction_Name { get; }
    public static string SurroundStringLiteralWithStringFormatCallContextAction_Description { get; }
    public static string SurroundStringLiteralWithStringFormatCallContextAction_Name { get; }
    public static string SurroundWith_ContextAction_Description { get; }
    public static string SurroundWith_ContextAction_Name { get; }
    public static string ToBlockScopedNamespaceContextAction_Description { get; }
    public static string ToBlockScopedNamespaceContextAction_Name { get; }
    public static string ToExplicitProgramClassContextAction_Description { get; }
    public static string ToExplicitProgramClassContextAction_Name { get; }
    public static string ToFileScopedNamespaceContextAction_Description { get; }
    public static string ToFileScopedNamespaceContextAction_Name { get; }
    public static string ToLINQToXMLContextAction_Description { get; }
    public static string ToLINQToXMLContextAction_Name { get; }
    public static string ToNamedPropertyPatternsContextAction_Description { get; }
    public static string ToNamedPropertyPatternsContextAction_Name { get; }
    public static string ToPropertyWithINotifyPropertyChangedChangeNotificationContextAction_Description { get; }
    public static string ToPropertyWithINotifyPropertyChangedChangeNotificationContextAction_Name { get; }
    public static string TransformParametersContextAction_Description { get; }
    public static string TransformParametersContextAction_Name { get; }
    public static string UncommentContextAction_Description { get; }
    public static string UncommentContextAction_Name { get; }
    public static string UseConfigureAwaitFalseCallContextAction_Description { get; }
    public static string UseConfigureAwaitFalseCallContextAction_Name { get; }
    public static string UseExplicitDiscardDeclarationContextAction_Description { get; }
    public static string UseExplicitDiscardDeclarationContextAction_Name { get; }
    public static string UseExplicitOrImplicitTupleComponentNameContextAction_Description { get; }
    public static string UseExplicitOrImplicitTupleComponentNameContextAction_Name { get; }
    public static string UseFormatStringContextAction_Description { get; }
    public static string UseFormatStringContextAction_Name { get; }
    public static string UseImplicitDiscardDeclarationContextAction_Description { get; }
    public static string UseImplicitDiscardDeclarationContextAction_Name { get; }
    public static string UseNameofExpressionToCaptureNameOfEntityContextAction_Description { get; }
    public static string UseNameofExpressionToCaptureNameOfEntityContextAction_Name { get; }
    public static string UseObjectCollectionInitializerInsteadOfAssignmentsAddMethodCallsContextAction_Description { get; }
    public static string UseObjectCollectionInitializerInsteadOfAssignmentsAddMethodCallsContextAction_Name { get; }
    public static string ConvertToCollectionInitializer_Description { get; }
    public static string ConvertToCollectionInitializer_Name { get; }
    public static string ConvertToArrayCreationExpression_Description { get; }
    public static string ConvertToArrayCreationExpression_Name { get; }
    public static string UsePositionalDeconstructionPatternContextAction_Description { get; }
    public static string UsePositionalDeconstructionPatternContextAction_Name { get; }
    public static string UseSeparateDeclarationsInDeconstructionDeclarationPatternsContextAction_Description { get; }
    public static string UseSeparateDeclarationsInDeconstructionDeclarationPatternsContextAction_Name { get; }
    public static string UseSpan_T_ForStackAllocatedVariableContextAction_Description { get; }
    public static string UseSpan_T_ForStackAllocatedVariableContextAction_Name { get; }
    public static string UseStringInterpolationContextAction_Description { get; }
    public static string UseStringInterpolationContextAction_Name { get; }
    public static string UseTargetTypedNewContextAction_Description { get; }
    public static string UseTargetTypedNewContextAction_Name { get; }
    public static string EqualityOperatorToReferenceEquals_Name { get; }
    public static string EqualityOperatorToReferenceEquals_Description { get; }
    public static string ConvertEqOperatorToEqualsContentAction_Name { get; }
    public static string ConvertEqOperatorToEqualsContentAction_Description { get; }
    public static string ConvertEqualsMethodCallIntoContentAction_Description { get; }
    public static string ConvertEqualsMethodCallIntoContentAction_Name { get; }
    public static string ConvertForEachMethodCallToForeachStatementContentAction_Description { get; }
    public static string ConvertForEachMethodCallToForeachStatementContentAction_Name { get; }
    public static string ConvertReferenceEqualsMethodCallIntoContentAction_Description { get; }
    public static string ConvertReferenceEqualsMethodCallIntoContentAction_Name { get; }
    public static string EnableEnforceBracesInDoWhileStatementInspectionContentAction_Description { get; }
    public static string EnableEnforceBracesInDoWhileStatementInspectionContentAction_Name { get; }
    public static string EnableEnforceBracesInIfStatementInspectionContentAction_Description { get; }
    public static string EnableEnforceBracesInIfStatementInspectionContentAction_Name { get; }
    public static string FlipOperatorArgumentsContentAction_Description { get; }
    public static string FlipOperatorArgumentsContentAction_Name { get; }
    public static string FullyQualifyReferenceToTypeStaticMemberOrNamespaceContentAction_Description { get; }
    public static string FullyQualifyReferenceToTypeStaticMemberOrNamespaceContentAction_Name { get; }
    public static string InsertDigitSeparatorsInIntegerLiteralContentAction_Description { get; }
    public static string InsertDigitSeparatorsInIntegerLiteralContentAction_Name { get; }
    public static string MoveLocalVariableConstantOrFunctionDeclarationToOuterScopeContentAction_Description { get; }
    public static string MoveLocalVariableConstantOrFunctionDeclarationToOuterScopeContentAction_Name { get; }
    public static string PassStringFormatMethodInvocationContentAction_Description { get; }
    public static string PassStringFormatMethodInvocationContentAction_Name { get; }
    public static string PassStringInterpolationExpressionContentAction_Description { get; }
    public static string PassStringInterpolationExpressionContentAction_Name { get; }
    public static string RemoveRegionContentAction_Description { get; }
    public static string RemoveRegionContentAction_Name { get; }
    public static string ReplaceIfNotNullXContentAction_Description { get; }
    public static string ReplaceIfNotNullXContentAction_Name { get; }
    public static string SplitIfWithConditionIntoNestedIfStatementsContentAction_Description { get; }
    public static string SplitIfWithConditionIntoNestedIfStatementsContentAction_Name { get; }
    public static string SplitIfWithConditionIntoTwoIfStatementsContentAction_Description { get; }
    public static string SplitIfWithConditionIntoTwoIfStatementsContentAction_Name { get; }
    public static string SplitReturnStatementOfBooleanValueToIfStatementContentAction_Description { get; }
    public static string SplitReturnStatementOfBooleanValueToIfStatementContentAction_Name { get; }
    public static string SplitReturnWithConditionIntoGuardingIfAndReturnContentAction_Description { get; }
    public static string SplitReturnWithConditionIntoGuardingIfAndReturnContentAction_Name { get; }
    public static string SplitValueReturnWithConditionIntoIfAndReturnStatementsContentAction_Description { get; }
    public static string SplitValueReturnWithConditionIntoIfAndReturnStatementsContentAction_Name { get; }
    public static string ToAbstractVirtualNonAbstractNonVirtualMemberContentAction_Description { get; }
    public static string ToAbstractVirtualNonAbstractNonVirtualMemberContentAction_Name { get; }
    public static string UseAsAndCheckForNullContentAction_Description { get; }
    public static string UseAsAndCheckForNullContentAction_Name { get; }
    public static string UseSystemEnvironmentNewLineValueContentAction_Description { get; }
    public static string UseSystemEnvironmentNewLineValueContentAction_Name { get; }
    public static string UseSystemStringEmptyValueContentAction_Description { get; }
    public static string UseSystemStringEmptyValueContentAction_Name { get; }
    public static string UseVarSyntaxForDeconstructingDeclarationsWithMultipleVariablesContentAction_Description { get; }
    public static string UseVarSyntaxForDeconstructingDeclarationsWithMultipleVariablesContentAction_Name { get; }
    public static string FixTypeAccessibility__Text { get; }
    public static string ReplaceWithAccessExpression_Text { get; }
    public static string ReplaceTrivialRecursivePatternWithA_Text { get; }
    public static string DeconstructParameterInto_Text { get; }
    public static string DeconstructVariableInto_Text { get; }
    public static string ConvertInitializerToAssignment_Text { get; }
    public static string ConvertInitializerToStatement_Text { get; }
    public static string Cast_OperandTo__Text { get; }
    public static string RemoveEmptyRegion_Text { get; }
    public static string RemoveEmptyRegions_Text { get; }
    public static string Disable_Syntax_Style_For_Native_Numeric { get; }
    public static string Enable_Syntax_Style_For_Native_Numeric { get; }
    public static string UseUnsignedRightShiftOperator_Text { get; }
    public static string ReplaceSequenceEqualWithConstantPattern_Text { get; }
    public static string ReplaceWithStringContentCheck_Text { get; }
    public static string ExtractCommonPropertyPattern_Text { get; }
    public static string AllAutoProperties_Text { get; }
    public static string AllFieldsInDeclaration_Text { get; }
    public static string AllInputParameters_Text { get; }
    public static string All_Parameters_Text { get; }
    public static string AllReadonlyFields_Text { get; }
    public static string AllFields_Text { get; }
    public static string Inferred_Text { get; }
    public static string Inherited_Text { get; }
    public static string Conflicting_Text { get; }
    public static string Implicit_Text { get; }
    public static string Classes_Text { get; }
    public static string Records_Text { get; }
    public static string Types_Text { get; }
    public static string Bytes_Text { get; }
    public static string SixteenBitWords_Text { get; }
    public static string Thousands_Text { get; }
    public static string Separate__Text { get; }
    public static string VariableDeclarationWithInitialization_Text { get; }
    public static string ConstantDeclaration_Text { get; }
    public static string LocalFunctionDeclaration_Text { get; }
    public static string DeconstructingDeclaration_Text { get; }
    public static string ConstantDeclarations_Text { get; }
    public static string VariableDeclarationsWithInitalization_Text { get; }
    public static string VariableDeclarationWithInitalization_Text { get; }
    public static string Move_ToOuterScope_Text { get; }
    public static string _For__Text { get; }
    public static string _For_InInterface_Text { get; }
    public static string _For_InBase_Text { get; }
    public static string SafelyCast_to__Text { get; }
    public static string Cast_to__Text { get; }
    public static string InheritFrom_Text { get; }
    public static string Implement_Text { get; }
    public static string RemoveArgumentKind_Text { get; }
    public static string AddParameterKind_Text { get; }
    public static string _In1stArgument_Text { get; }
    public static string _In2ndArgument_Text { get; }
    public static string _In3dArgument_Text { get; }
    public static string _In_thArgument_Text { get; }
    public static string ChangeTypeOfParameterOfCalled_To__Text { get; }
    public static string _AndPull_Text { get; }
    public static string UseAutomaticStructLayout_Text { get; }
    public static string ImportNamespace__Text { get; }
    public static string UseMethod__Text { get; }
    public static string ImportMethodFrom__Text { get; }
    public static string AssignDefaultValuesTo_Text { get; }
    public static string AssignDefaultValueTo_Text { get; }
    public static string AllowNullableTypesIn__Of___Text { get; }
    public static string Change_To__Text { get; }
    public static string ChangeRecord_TypeToClass_Text { get; }
    public static string ChangeClass_TypeToRecord_Text { get; }
    public static string ChangeBaseRecord_TypeToClass_Text { get; }
    public static string ChangeBaseClass_TypeToRecord_Text { get; }
    public static string Use__From__Text { get; }
    public static string Use___Text { get; }
    public static string AddExplicitLabelsFor_ToDefaultSection_Text { get; }
    public static string AddEmptySwitchSectionsFor__Text { get; }
    public static string ReturnByReadonlyReference_Text { get; }
    public static string MakeFieldAndStruct_NonReadonly_Text { get; }
    public static string MakeFieldAndContainingMemberNonReadonly_Text { get; }
    public static string MakeFieldAndContainingAccessorNonReadonly_Text { get; }
    public static string MakeFieldAndContainingStructNonReadonly_Text { get; }
    public static string InThisInvocation_Text { get; }
    public static string NavigateToDbContextPropertyActionNPlusOneText { get; }
    public static string NavigateToDbContextPropertyActionIncompleteDataText { get; }
    public static string NavigateToDbContextPropertyActionCaptionUsages { get; }
    public static string LoadRelationsFix { get; }
    public static string LoadRelationsAllPathsFix { get; }
    public static string NavigateToDbContextQueryActionNPlusOneText { get; }
    public static string NavigateToDbContextQueryActionIncompleteDataText { get; }
    public static string LoadRelationsSomePathsFix { get; }
    public static string OpenDocumentationUrlText { get; }
    public static string OverrideInDerived__Text { get; }
    public static string RemoveScopedKeyword_Text { get; }
    public static string ConvertIntoListPattern_Name { get; }
    public static string ConvertIntoListPattern_Description { get; }
    public static string ConvertIntoListPattern_Text { get; }
    public static string UseStandaloneDiscard_Text { get; }
    public static string Make_Of___Text { get; }
    public static string NonNullable_Text { get; }
    public static string Nullable_Text { get; }
    public static string ReturnType_Text { get; }
    public static string Type_Text { get; }
    public static string RemoveRedundantNullableDirective_Text { get; }
    public static string RemoveRedundantNullableDirective_ScopedText { get; }
    public static string MoveLocalFunctionToTheEndOfAScopeFix_Text { get; }
    public static string MoveLocalFunctionToTheEndOfAScopeFix_ScopedText { get; }
    public static string MoveLocalFunctionToTheEndOfAScopeWithoutJump_Text { get; }
    public static string RemoveUnusedNullableDirective_Text { get; }
    public static string RemoveUnusedNullableDirective_ScopedText { get; }
    public static string CopyValueOfPrimaryParameterToLocalVariable_Text { get; }
    public static string MoveLocalFunctionToTheEndOfAScopeWithoutJump_BlockText { get; }
    public static string MoveLocalFunctionToTheEndOfAScopeWithoutJump_ScopeText { get; }
    public static string MoveLocalFunctionToTheEndOfAScopeAction_Name { get; }
    public static string MoveLocalFunctionToTheEndOfAScopeAction_Description { get; }
    public static string NavigateToDbContextPropertyActionCaptionExpressions { get; }
    public static string SpecifyFieldOffset_Text { get; }
    public static string DisableDbContextQueryInspectionsAction_Text { get; }
    public static string RenameAllUnderscoreParameter_Text { get; }
    public static string MakeItDiscard_Text { get; }
    public static string Rename__Text { get; }
    public static string NoAliasUsagesFoundToInline_Text { get; }
    public static string SearchingForAliasUsagesInFile___Text { get; }
    public static string Of___Text { get; }
    public static string InsertPragmaWarningDescriptionAction_Text { get; }
    public static string InsertPragmaWarningDescriptionAction_Name { get; }
    public static string InsertPragmaWarningDescriptionAction_Description { get; }
    public static string SimplifyConstructors_Text { get; }
    public static string Make__Required_Text { get; }
    public static string MakeAllUninitializedMembersRequired_Text { get; }
    public static string SplitFluentApiUnchainAction_Text { get; }
    public static string SplitFluentApiUnchainAction_Name { get; }
    public static string SplitFluentApiUnchainAction_Description { get; }
    public static string SplitFluentApiDivisionAction_Text { get; }
    public static string SplitFluentApiDivisionAction_Name { get; }
    public static string SplitFluentApiDivisionAction_Description { get; }
    public static string FixModifiersOrderInUsingDirective_Text { get; }
    public static string UseToArray_Text { get; }
    public static string RegisterHighlightingType_Text { get; }
    public static string RegisterHighlightingType_ScopedText { get; }
    public static string RemoveRedundantHighlightingType_Text { get; }
    public static string RemoveRedundantHighlightingType_ScopedText { get; }
    public static string AddHighlightingSourceAttribute_Text { get; }
    public static string AddNonHighlightingSourceAttribute_Text { get; }
    private static Strings();
    public static JetResourceManager get_ResourceManager();
    public static string Choice(string format, Object[] args);
    public static string get_AddBaseClassInitializer_Text();
    public static string get_AddParenthesesAroundBitwiseOperation_Text();
    public static string get_AddUsingContextAction_Description();
    public static string get_AddUsingContextAction_Name();
    public static string get_AddUsingDeclarationContextAction_ScopedText();
    public static string get_AddUsingDeclarationContextAction_Text();
    public static string get_AddUsingDeclarationsOfTypeContextAction_ScopedText();
    public static string get_AddUsingStatementContextAction_ScopedText();
    public static string get_AddUsingStatementContextAction_Text();
    public static string get_AppendToCollectionExpression_Text();
    public static string get_AppendLineToSeparateAppendAction_Description();
    public static string get_AppendLineToSeparateAppendAction_Name();
    public static string get_AppendLineToSeparateAppendAction_Text();
    public static string get_AssignValueToBackingField_Text();
    public static string get_CanBreakRefSafety_Text();
    public static string get_ChangeLockFieldTypeToSystemThreadingLock_Text();
    public static string get_ChangeParameterToParamsArray_Text();
    public static string get_ConstructStringViaStringBuilderAction_Descrition();
    public static string get_ConstructStringViaStringBuilderAction_Name();
    public static string get_ConstructStringViaStringBuilderAction_Text();
    public static string get_ConvertCollectionExpressionsToInitializers_Text();
    public static string get_ConvertCollectionExpressionsToArrayCreations_Text();
    public static string get_ConvertLeadingEscapesToAsciiText();
    public static string get_ConvertStringEscapeSequence_ContextActionDescription();
    public static string get_ConvertStringEscapeSequence_ContextActionName();
    public static string get_ConvertStringEscapeSequenceAscii_Text();
    public static string get_ConvertStringEscapeSequencePlain_Text();
    public static string get_ConvertStringEscapeSequenceUnicode_Text();
    public static string get_ConvertToHexEscapeSequence_ScopedText();
    public static string get_ConvertToHexEscapeSequence_Text();
    public static string get_ConvertToAwaitUsingDeclaration_Text();
    public static string get_ConvertToAwaitUsingStatement_Text();
    public static string get_ConvertToCollectionInitializer_Text();
    public static string get_ConvertToArrayCreationExpression_Text();
    public static string get_ConvertToTryFinallyContextAction_Description();
    public static string get_ConvertToTryFinallyContextAction_Name();
    public static string get_ConvertToUsingStatementsAlongJumpFix();
    public static string get_CopyElementsBeforeEnumerationFix_Text();
    public static string get_CreatePrimaryConstructor_Text();
    public static string get_CanSimplifyDictionaryLookupWithGetValueOrDefault_Text();
    public static string get_CanSimplifyDictionaryRemovingWithSingleCall_Text();
    public static string get_CanSimplifySetAddingWithSingleCall_Text();
    public static string get_Create_Method_Text();
    public static string get_DeconstructionIndexSettingDescription();
    public static string get_DisposeAnalysisMode_OptionOptimistic_Text();
    public static string get_DisposeAnalysisMode_OptionPessimistic_Text();
    public static string get_DisposeAnalysis_Text();
    public static string get_DoNotCheckNonUserTypes_Text();
    public static string get_EnableReplacementOfMutableFields_Text();
    public static string get_EscapingStep_Text();
    public static string get_ExtractCommonCode_Text();
    public static string get_FixIndentation_Text();
    public static string get_GenerateFormattingMembers_Text();
    public static string get_InDeclarationStatement_Text();
    public static string get_InsertCast_Text();
    public static string get_InsertMatchingTypeArgumentsFor__Text();
    public static string get_InsertMatchingTypeArguments_Text();
    public static string get_InStatementScopedContextAction_Text();
    public static string get_InThisStringLiteral_Text();
    public static string get_IntroduceUsingDeclaration_Text();
    public static string get_IterateViaforeachSettingsSettingDescription();
    public static string get_RemoveCookieVariable_Text();
    public static string get_MergeDuplicatedSwitchSections_Text();
    public static string get_RemoveGetType_Text();
    public static string get_ReplaceActualBodyWithEmptyBlock_Text();
    public static string get_ReplaceCastWithExplicitVariableType_Text();
    public static string get_ReplaceCastWithLambdaReturnType_Text();
    public static string get_ReplaceCastWithTypeArguments_Text();
    public static string get_RemoveParamsCollectionExpression_Text();
    public static string get_RemoveParamsModifierAndRefactor_Text();
    public static string get_RemoveParamsModifierContextAction_Description();
    public static string get_RemoveParamsModifierContextAction_Name();
    public static string get_RemoveRedundantParamsCollectionExpressions_Text();
    public static string get_ReplaceEscapeSequence_ScopedText();
    public static string get_ReplaceEscapeSequence_Text();
    public static string get_RewriteIfStatementsIntoPatternGuards_Text();
    public static string get_SelectSignature_Text();
    public static string get_SeparateBodyLikeStatementWithBlank_Text();
    public static string get_SetExplicitType_Text();
    public static string get_SetParamsModifierAndRefactor_Text();
    public static string get_SetParamsModifierContextAction_Description();
    public static string get_SetParamsModifierContextAction_Name();
    public static string get_SortsUsingDirectivesInFilesAccording_Text();
    public static string get_SortUsingDirectives_Text();
    public static string get_SpecifyTypeArgumentsToMatchExpectedType_Text();
    public static string get_SplitListPattern_Text();
    public static string get_SpreadCollection_Text();
    public static string get_MultilineStringToAppendLineAction_Description();
    public static string get_MultilineStringToAppendLineAction_Name();
    public static string get_MultilineStringToAppendLineAction_Text();
    public static string get_RemoveUsingDeclaration_Text();
    public static string get_ReplaceAsyncFunctionsWithTaskReturns_Text();
    public static string get_ReplaceAsyncWith_Return_Text();
    public static string get_ReplaceCapturesOf_ParameterWith___Text();
    public static string get_ReplaceWithEmptyCollectionExpression_Text();
    public static string get_SetTargetType_Text();
    public static string get_SetVariableTypeTo__Text();
    public static string get_SplitIntoSeparateAssignments_Text();
    public static string get_SplitVarPatternIntoVariable_Text();
    public static string get_SplitVarPatterns_Text();
    public static string get_MakeContainingMemberNonStatic_Text();
    public static string get_MakeMembersMustDisposeResource_ScopedText();
    public static string get_Make_MustDisposeResource_Text();
    public static string get_MoveLocalFunctionToTheEndOfAScopeInsert_Text();
    public static string get_OptimizeElse_Text();
    public static string get_OptimizeResultingExpressionAfterRewrite_Text();
    public static string get_RedundantMembersCleanupAfterPrimary_Text();
    public static string get_RemoveUnusedConstructor_Text();
    public static string get_RenamePrimaryConstructorParameter_Text();
    public static string get_ReplaceCapturesWith__From_BaseType_Text();
    public static string get_SuppressNullableWarningFixSettingsSettingDescription();
    public static string get_SuppressUninitializedMemberWarningFixSettingsSettingDescription();
    public static string get_Settings_Enabled();
    public static string get_ThisIsCastExpression_Text();
    public static string get_ThisIsTheBodyOfPreviousStatement_Text();
    public static string get_ToCollectionExpressionParams_Text();
    public static string get_ToStringBuilderConversionAction_Description();
    public static string get_ToStringBuilderConversionAction_Name();
    public static string get_ToStringBuilderConversionAction_Text();
    public static string get_ToStringBuilderSubstitutionAction_Description();
    public static string get_ToStringBuilderSubstitutionAction_Name();
    public static string get_ToStringBuilderSubstitutionAction_Text();
    public static string get_ReplaceWithAccessToLastElementFixText();
    public static string get_InCurrentCondition_Text();
    public static string get_SplitAndPattern_Text();
    public static string get_InCurrentDeconstructionPattern_Text();
    public static string get_InCurrentInvocation_Text();
    public static string get_InFollowingArguments_Text();
    public static string get_For_Of_Text();
    public static string get_ForAllParametersOf__Text();
    public static string get_NamedArguments_Text();
    public static string get_InCurrentTuple_Text();
    public static string get_AddSectionBraces_Text();
    public static string get_InSwitchStatement_Text();
    public static string get_ToLocalVariableMutationContextAction_Description();
    public static string get_ToLocalVariableMutationContextAction_Text();
    public static string get_UnableToIntroduceVariable_Text();
    public static string get_UseCollectionExpression_Text();
    public static string get_UseIsExpression_Text();
    public static string get_UseIsInstanceOfType_Text();
    public static string get_UseLocalVariableMutation_Text();
    public static string get_UseMinByMaxBy_Text();
    public static string get_UseMinByOrMaxByInsteadOfOrderingAndTakingFirstOrLast();
    public static string get_UseThisBodyForImplementations_Text();
    public static string get_UseDiscardAssignment_Text();
    public static string get_UseSymbolAlias_Text();
    public static string get_TypeAliasKindName();
    public static string get_NamespaceAliasKindName();
    public static string get_MakeReturnTypeTask_Text();
    public static string get_MakeReturnTypeVoid_Text();
    public static string get_AddArgumentName__Text();
    public static string get_AddArgumentNames_Text();
    public static string get_AddBraces_Text();
    public static string get_AddBracesFor_Statements_Text();
    public static string get_AddDeconstructionComponentNames_Text();
    public static string get_AddComponentName__Text();
    public static string get_AddExceptionDocumentation_Text();
    public static string get_AddInheritdoc_Text();
    public static string get_AddPatternVariableOf_Type_Text();
    public static string get_AddPatternVariable_Text();
    public static string get_Add_Accessor_Text();
    public static string get_Add_Accessors_Text();
    public static string get_AddConditionComponent_Text();
    public static string get_AddTupleComponentNames_Text();
    public static string get_AnnotatePublicFieldsAndPropertiesWith_Text();
    public static string get_AnnotateEnumMembersWithEnumMemberAttribute_Text();
    public static string get_AnnotateMethodsWithOperationContractAttribute_Text();
    public static string get_UnknownNullability_Text();
    public static string get_CanBeNull_Text();
    public static string get_CanSimplifyDictionaryLookupWithTryAdd_Text();
    public static string get_CanSimplifyDictionaryLookupWithTryGetValue_Text();
    public static string get_NotNull_Text();
    public static string get_ItemsCanBeNull_Text();
    public static string get_ItemsNotNull_Text();
    public static string get_AssertExpressionIsNotNull_Text();
    public static string get_CheckParameterForNull_Text();
    public static string get_CheckExpressionForNull_Text();
    public static string get_CheckVariableForNull_Text();
    public static string get_ConfigureNullCheckPattern_Text();
    public static string get_ConfigureAssertionPattern_Text();
    public static string get_ToExplicitParameter_Text();
    public static string get_ToLambdaExpression_Text();
    public static string get_InsertParametersSignature_Text();
    public static string get_InsertReturnTypeSpecification_Text();
    public static string get_ToAnonymousMethod_Text();
    public static string get_ToStatementLambda_Text();
    public static string get_ToExpressionLambda_Text();
    public static string get_ToRegularMethod_Text();
    public static string get_ToLocalFunction_Text();
    public static string get_ToNamedMethod_Text();
    public static string get_ToNamedType_Text();
    public static string get_ReplaceWithTuple_Text();
    public static string get_ToExplicitAccessor_Text();
    public static string get_ToPropertyWithBackingField_Text();
    public static string get_ToPropertyWithFieldKeyword_Text();
    public static string get_ToStatementBody_Text();
    public static string get_UseStatementBodies_Text();
    public static string get_ToExpressionBody_Text();
    public static string get_Capture_Name_Text();
    public static string get_CaptureEntityNames_Text();
    public static string get_ToCatch_Text();
    public static string get_ToCatchException_Text();
    public static string get_Make_Accessor__Text();
    public static string get_ToAbstract_Text();
    public static string get_ToVirtual_Text();
    public static string get_ToFieldLikeEvent_Text();
    public static string get_ToNonAbstract_Text();
    public static string get_ToNonVirtual_Text();
    public static string get_ToInitAccessor_Text();
    public static string get_ToSetAccessor_Text();
    public static string get_ToStruct_Text();
    public static string get_ToClass_Text();
    public static string get_ToRecordStruct_Text();
    public static string get_ToRecord_Text();
    public static string get_CheckIfParameterIsAnEmptyCollection_Text();
    public static string get_CheckIfEnumParameterIsDefinedByEnum_Text();
    public static string get_CheckIfParameterIsOutOfRange_Text();
    public static string get_CheckIfParameterIsNotValid_Text();
    public static string get_AddRangeCheck_Text();
    public static string get_CheckWhetherTheDictionaryDoesnTContain_Text();
    public static string get_CheckWhetherTheDictionaryContainsThe_Text();
    public static string get_DeleteComment_Text();
    public static string get_Uncomment_Text();
    public static string get_ToAssignment_Text();
    public static string get_ToConditionalExpression_Text();
    public static string get_ToConditionalAccess_Text();
    public static string get_ToNullCoalescingExpression_Text();
    public static string get_ToUnconditionalAccess_Text();
    public static string get_ToNullPropagation_Text();
    public static string get_JoinNullCheckWithAssignment_Text();
    public static string get_MergeIntoPattern_Text();
    public static string get_ContinueMergeIntoPattern_Text();
    public static string get_RemoveVariableAndContinueMergeIntoPattern_Text();
    public static string get_UseConditionalAccess_Text();
    public static string get_ToIfStatementQuotes_Text();
    public static string get_SplitIntoSequentialChecks_Text();
    public static string get_DefaultConstructor_Text();
    public static string get_ToFactoryMethod_Text();
    public static string get_ReplaceWithSingleInstance_Text();
    public static string get_ToBlockScopedNamespace_Text();
    public static string get_ToBlockScopedNamespaces_Text();
    public static string get_InsertTypeSpecification_Text();
    public static string get_ToFileScopedNamespace_Text();
    public static string get_ToFileScopedNamespaces_Text();
    public static string get_ConvertToInterpolatedString_Text();
    public static string get_ConvertToUsingDeclaration__Text();
    public static string get_WillAllocateOnTheHeap_Text();
    public static string get_WillIntroduceNamingCollisions_Text();
    public static string get_ExtendsResourceLifetime_Text();
    public static string get_CopyDocumentationFromBase_Text();
    public static string get_CreateDerivedType_Text();
    public static string get_CreateMatchingCheckedOperator_Text();
    public static string get_CreateOverloadWithoutSelectedParameters_Text();
    public static string get_CreateOverloadWithoutParameter_Text();
    public static string get_UseVarForAllVariables_Text();
    public static string get_IntroducePropertyForLazilyInitialized_Text();
    public static string get_To_Call_Text();
    public static string get_ToEqualityOperator_Text();
    public static string get_ToReferenceEqualityOperator_Text();
    public static string get_ToImplicitImplementation_Text();
    public static string get_MakeFieldExplicit_Text();
    public static string get_ConvertToFor_Text();
    public static string get_ConvertLINQToCode_Text();
    public static string get_GenerateExtensionToCheckFlagPresence_Text();
    public static string get_GenerateTypePatterns_Text();
    public static string get_PatternMatching_Caption();
    public static string get_GenerateTypePatterns_Caption();
    public static string get_SelectTypesForWhichYouWantToGenerate_Text();
    public static string get_MergeTwoIfS__Text();
    public static string get_AndFixNameConflicts_Text();
    public static string get_ConvertToGuardClause_Text();
    public static string get_ConvertToSwitchExpressionDots_Text();
    public static string get_ConvertToSwitchExpression_Text();
    public static string get_ConvertToSwitchStatementDots_Text();
    public static string get_ConvertToSwitchStatement_Text();
    public static string get_AssumingThatTypesCanBeExtendedByExternal_Text();
    public static string get_AssumingThatTypeHierarchyInSolution_Text();
    public static string get_ConvertToReturnStatement_Text();
    public static string get_ConvertToAssignmentStatement_Text();
    public static string get_ConvertToYieldStatement_Text();
    public static string get_ToCustomEventImplementation_Text();
    public static string get_ImplementINotifyPropertyChanged_Text();
    public static string get_ImplementINotifyPropertyChangedPattern_Text();
    public static string get_ImplementInDerived__Text();
    public static string get_ImplementMemberIn_Text();
    public static string get_ToExplicitImplementation_Text();
    public static string get_ImportStaticMembers_Text();
    public static string get_UnableToImportStaticClassImportIntroduces_Text();
    public static string get_IncludeIntoObjectPattern_Text();
    public static string get_InlineControlTransferStatement_Text();
    public static string get_ConvertToNonGlobalUsing_Text();
    public static string get_InlineNamespaceAlias_Text();
    public static string get_InlineTypeAlias_Text();
    public static string get_InlineNestedInterpolation_Text();
    public static string get_InlineStringLiteralIntoInterpolation_Text();
    public static string get_InlineOutVariableDeclaration_Text();
    public static string get_InlineTemporaryVariable_Text();
    public static string get_InlineVariableIntoCondition_Text();
    public static string get_ConvertToStringFormat_Text();
    public static string get_InvertIf_Text();
    public static string get_ToStaticMethodInvocation_Text();
    public static string get_ToStaticMethodInvocations_Text();
    public static string get_CreateEventInvocator_Text();
    public static string get_IterateViaForeach_Text();
    public static string get_IterateViaAwaitForeach_Text();
    public static string get_ToCollectionReturn_Text();
    public static string get_CouldnTConvertIteratorWithoutAnyReachable_Text();
    public static string get_PlaceAttributesIntoSingleSection_Text();
    public static string get_JoinDeclarationAndAssignment_Text();
    public static string get_JoinDeclarationsAndAssignments_Text();
    public static string get_UseSingleDeconstructionDeclaration_Text();
    public static string get_UseSingleDeconstructionDeclarationEverywhere_Text();
    public static string get_JoinStrings_Text();
    public static string get_Pass_AsAParameterTo__Text();
    public static string get_LiftAllClosuresOf_ToParameters_Text();
    public static string get_PassThisAsAParameterTo__Text();
    public static string get_MergeDeconstructedDeclaration_Text();
    public static string get_MigrateToNullableEnable_Text();
    public static string get_AlignInitializers_Text();
    public static string get_ComputeConstantValue_Text();
    public static string get_ToForeachStatement_Text();
    public static string get_ConvertToBinary_Text();
    public static string get_UseBinaryLiterals_Text();
    public static string get_ConvertToDecimal_Text();
    public static string get_UseDecimalLiterals_Text();
    public static string get_ConvertToHex_Text();
    public static string get_UseHexadecimalLiterals_Text();
    public static string get_ToVerbatimInterpolation_Text();
    public static string get_ToRawInterpolation_Text();
    public static string get_VerbatimToRawInterpolation_ScopedText();
    public static string get_ToVerbatimString_Text();
    public static string get_ToRawString_Text();
    public static string get_SimplifyRawString_Text();
    public static string get_VerbatimToRawString_ScopedText();
    public static string get_ToRegularInterpolation_Text();
    public static string get_ToRegularString_Text();
    public static string get_UseSystemEnvironmentNewLine_Text();
    public static string get_EvaluateExpression_Text();
    public static string get_EvaluatingExpression_Text();
    public static string get_EvaluationTimeOut_Text();
    public static string get_EvaluationOfExpressionThrowsException_Text();
    public static string get_CompilingExpression_Text();
    public static string get_RunningEvaluation_Text();
    public static string get_PresentingResult_Text();
    public static string get_ModifyingSourceCode_Text();
    public static string get_EscapeAllCharacters_Text();
    public static string get_ItIsVerbatimInterpolation_Text();
    public static string get_ItIsVerbatimString_Text();
    public static string get_FlipQualifierAndArgument_Text();
    public static string get_FlipOperands__Text();
    public static string get_Flip_Operands__Text();
    public static string get_WillBreakVariableUsage_Text();
    public static string get_Flip_OperatorTo__Text();
    public static string get_ThisIsAnInterpolatedString_Text();
    public static string get_RemoveDigitSeparators_Text();
    public static string get_SeparateDigitsInIntegralLiterals_Text();
    public static string get_SeparateThousands_Text();
    public static string get_SeparateThousandsInRealLiterals_Text();
    public static string get_SurroundWith_Text();
    public static string get_WrapTernaryExpressionWithParentheses_Text();
    public static string get_MoveAllStaticInitializersToStaticConstructor_Text();
    public static string get_MoveAllInitializersToConstructors_Text();
    public static string get_MoveAllInitializersToConstructor_Text();
    public static string get_MoveInitializationToStaticConstructor_Text();
    public static string get_MoveInitializationToConstructors_Text();
    public static string get_MoveInitializationToConstructor_Text();
    public static string get_MoveToAnotherTypePart_Text();
    public static string get_SelectTargetTypePart_Text();
    public static string get_MoveAssignmentToInitializer_Text();
    public static string get_MoveConstructorAssignmentsToInitializers_Text();
    public static string get_NegateBooleanExpression_Text();
    public static string get_Negate_Expression_Text();
    public static string get_AddChangeNotifications_Text();
    public static string get_BackingFieldAssignmentStatementIsNot_Text();
    public static string get_FailedToFindNotifyStatementsInsertPosition_Text();
    public static string get_ToPropertyWithChangeNotification_Text();
    public static string get_ToPropertyWith_ChangeNotification_Text();
    public static string get_MoveTo_Cs_Text();
    public static string get_MoveTypesToMatchingFiles_Text();
    public static string get_ToIfStatement_Text();
    public static string get_ConvertToIfStatement_Text();
    public static string get_ConvertInitializerToAddCalls_Text();
    public static string get_InitializeOtherMembers_Text();
    public static string get_InitializeMembers_Text();
    public static string get_ConvertInitializerToConstructor_Text();
    public static string get_ConvertAllObjectInitializersToConstructors_Text();
    public static string get_ConvertAllObjectInitializers_Text();
    public static string get_ConvertAllObjectInitializersFor_Type_Text();
    public static string get_NoConstructorUsagesFound_Text();
    public static string get_UseObjectCollectionInitializers_Text();
    public static string get_UseObjectInitializer_Text();
    public static string get_UseCollectionInitializer_Text();
    public static string get_CreateAnotherPartOfTheType_Text();
    public static string get_MakeMethodPartial_Text();
    public static string get_MergePartialDeclarations_Text();
    public static string get_PullInitializerExpressionToUsages_Text();
    public static string get_PullInitializerExpressionToUsage_Text();
    public static string get_Pull_FromVariableInitializer_Text();
    public static string get_PushUsageExpressionsToInitializer_Text();
    public static string get_PushUsageExpressionToInitializer_Text();
    public static string get_Push_ToVariableInitializer_Text();
    public static string get_InsertFullQualification_Text();
    public static string get_InsertFullQualifications_Text();
    public static string get_QualifyStaticMembers_Text();
    public static string get_ConvertLINQToMethodChain_Text();
    public static string get_ChangeSignature_Text();
    public static string get_CopyType_Text();
    public static string get_ConvertToGlobalUsing_Text();
    public static string get_ExtractMethod_Text();
    public static string get_IntroduceVariable_Text();
    public static string get_ConvertToPropertyDots_Text();
    public static string get_ConvertToMethod_Text();
    public static string get_ConvertToExtensionMethod_Text();
    public static string get_TransformParameters_Text();
    public static string get_RemoveArgumentName_Text();
    public static string get_RemoveArgumentNames_Text();
    public static string get_WillBreakUsingVariables_Text();
    public static string get_RemoveBraces__Text();
    public static string get_RemoveComponentName_Text();
    public static string get_RemoveDeconstructionComponentNames_Text();
    public static string get_RemoveRedundantDictionaryContainsKeyBeforeAdding_Text();
    public static string get_RemoveRedundantParentheses_Text();
    public static string get_SeparateLocalFunctionsWithJumpStatementFix_Text();
    public static string get_SeparateLocalFunctionsWithJumpStatementAction_Text();
    public static string get_SeparateLocalFunctionsWithJumpStatementAction_Name();
    public static string get_SeparateLocalFunctionsWithJumpStatementAction_Description();
    public static string get_SeparateLocalFunctionsWithJumpStatementFix_ScopedText();
    public static string get_RemoveRegionDirective_Text();
    public static string get_RemoveRegions_Text();
    public static string get_RemoveTupleComponentNames_Text();
    public static string get_RenameFileToMatchTypeName_Text();
    public static string get_File_AlreadyExists_Text();
    public static string get_CanTRename__Caption();
    public static string get_YieldValue_Text();
    public static string get_ReturnValue_Text();
    public static string get_ReverseAssignments_Text();
    public static string get_ReverseAssignment_Text();
    public static string get_ReverseForLoop_Text();
    public static string get_ConvertMethodGroupToAnonymousMethod_Text();
    public static string get_ConvertMethodGroupToLambda_Text();
    public static string get_CheckAllParameters_Text();
    public static string get_CheckAllParametersForNull_Text();
    public static string get_OrEmptyString_Text();
    public static string get_OrWhitespaceString_Text();
    public static string get_OverrideMemberIn_Text();
    public static string get_ConvertToNonExtensionStaticMethod_Text();
    public static string get_RemoveConditionComponent_Text();
    public static string get_ReplaceWithVoidKeyword_Text();
    public static string get_SpecifyEnumMemberValues_Text();
    public static string get_SplitIntoNestedPatterns_Text();
    public static string get_SplitRecursivePattern_Text();
    public static string get_SplitIntoTwoIfStatements_Text();
    public static string get_SplitIntoIfAndReturn_Text();
    public static string get_SplitOutVariableDeclarationFromArgument_Text();
    public static string get_SplitVariableDeclarationAndInitialization_Text();
    public static string get_SplitDeclarationsFromDeconstruction_Text();
    public static string get_SplitComponentDeclarationFromDeconstruction_Text();
    public static string get_SplitIntoSeparateDeclarations_Text();
    public static string get_SplitIntoTwoCaseLabels_Text();
    public static string get_SplitOrPattern_Text();
    public static string get_SplitToIfStatement_Text();
    public static string get_SplitString_Text();
    public static string get_SplitStringAfterHexEscape_Text();
    public static string get_UseStringEqualsMethod_Text();
    public static string get_ToLINQToXML_Text();
    public static string get_ToIfStatements_Text();
    public static string get_ToSwitchStatement_Text();
    public static string get_ToExpression_Text();
    public static string get_ToSwitchExpression_Text();
    public static string get_InvertCondition_Text();
    public static string get_ToAutoProperty__Text();
    public static string get_EvaluateOnceAndStore_Text();
    public static string get_ToComputedProperty__Text();
    public static string get_EvaluateEachRead_Text();
    public static string get_ToDirectCast_Text();
    public static string get_ToExplicitConstructor_Text();
    public static string get_ToExplicitParamsArray_Text();
    public static string get_ToExplicitParamsCollection_Text();
    public static string get_ToExplicitProgramClass_Text();
    public static string get_ToExplicitPropertyDeclaration_Text();
    public static string get_ToExplicitFieldDeclaration_Text();
    public static string get_ToExtensionMethod_Text();
    public static string get_ToNamedPropertyPatterns_Text();
    public static string get_ToObjectPattern_Text();
    public static string get_ToRecursivePattern_Text();
    public static string get_ToSafeCast_Text();
    public static string get_ConvertToTopLevelCode_Text();
    public static string get_UseVarInferredTypeWillChange_Text();
    public static string get_UseVar_Text();
    public static string get_UseVarEverywhere_Text();
    public static string get_UseArrayCreationExpression_Text();
    public static string get_UseArrayCreationExpressions_Text();
    public static string get_UseAsAndCheckForNull_Text();
    public static string get_UseConfigureAwaitFalseCall_Text();
    public static string get_UseConfigureAwaitFalseCalls_Text();
    public static string get_SpecifyArrayType_Text();
    public static string get_UseExplicitDiscardDeclaration_Text();
    public static string get_UseExplicitDiscardDeclarationEverywhere_Text();
    public static string get_SpecifyCreatedType_Text();
    public static string get_UseExplicitName__Text();
    public static string get_UseImplicitName__Text();
    public static string get_InsertInferredTypeArguments_Text();
    public static string get_RemoveRedundantVarKeyword_Text();
    public static string get_RemoveRedundantVarKeywordEverywhere_Text();
    public static string get_UsePositionalDeconstructionPattern_Text();
    public static string get_UseSeparateDeclarations_Text();
    public static string get_UseSeparateDeclarationsEverywhere_Text();
    public static string get_UseSpan__Text();
    public static string get_UseTargetTypedNew_Text();
    public static string get_SpecifyTypeExplicitly_Text();
    public static string get_UseExplicitTypeEverywhere_Text();
    public static string get_DoNotSuggestNonNullableReturnTypesFor_Text();
    public static string get_KeepJetBrainsAnnotationsAttributesFor_Text();
    public static string get_AlwaysKeepSingleVarKeywordForDeclarations_Text();
    public static string get_Configure_MoveLocalFunctionToTheEndOfAScopeWarning_SuggestInNestedScopesAccessor_Off_Text();
    public static string get_DisableMutableFieldsReplacement_Text();
    public static string get_DisableFor___Text();
    public static string get_DisableFor__Text();
    public static string get_IgnoreNullableAPIContractsAndTrustOnly_Text();
    public static string get_AddNamesToArguments_Text();
    public static string get_AddDiscardSyntax_Text();
    public static string get_AddEnumeratorCancellationAttribute_Text();
    public static string get_AddGuidAttribute_Text();
    public static string get_AddParams_Text();
    public static string get_AddMemberName_Text();
    public static string get_AddAddressOf_Text();
    public static string get_AddAsEnumerableCallToMakeIntentExplicit_Text();
    public static string get_Add_Attribute_Text();
    public static string get_AwaitExpression_Text();
    public static string get_AddBody_Text();
    public static string get_AddBreak_Text();
    public static string get_AddCaseLabel_Text();
    public static string get_AddCatch_Text();
    public static string get_ThrowException__Text();
    public static string get_AddFinally_Text();
    public static string get_AddGetAndSetAccessors_Text();
    public static string get_AddBaseInitializer_Text();
    public static string get_Make_Obsolete_Text();
    public static string get_Make_Experimental_Text();
    public static string get_AddParamsToParameterInInterfaceMember_Text();
    public static string get_AddInitializersForRequiredMembers_Text();
    public static string get_AddInitializerFor__Text();
    public static string get_AddReturnStatement_Text();
    public static string get_AddSemicolon_Text();
    public static string get_AddThisInitializer_Text();
    public static string get_AddTypeArgList_Text();
    public static string get_ThrowCreatedExceptions_Text();
    public static string get_ThrowCreatedException_Text();
    public static string get_ThrowException_Text();
    public static string get_AllowUnsafeCodeInThisProject_Text();
    public static string get_AnnotateNullability_Text();
    public static string get_AppendToPreviousOrderbyClause_Text();
    public static string get_UseDefault_Instead_Text();
    public static string get_AssignValueTo__Text();
    public static string get_ChangeBaseTypeRequiredByAttribute_From_Text();
    public static string get_AddParentheses_Text();
    public static string get_CastToEnumUnderlyingTypes_Text();
    public static string get_SafelyCastTo__Text();
    public static string get_CastTo__Text();
    public static string get_CastSecondOperandTo__Text();
    public static string get_CastTo_Quotes__Text();
    public static string get_SafelyCastTupleComponent_To__Text();
    public static string get_CastTupleComponent_To__Text();
    public static string get_CastQualifierExpressionTo__Text();
    public static string get_InsertThisAndCastTo__Text();
    public static string get_ChangeTypeParameterOfInvocationTo__Text();
    public static string get_ChangeTypeTo__Text();
    public static string get_ChangeAll__Text();
    public static string get_ChangeAllLocal__Text();
    public static string get_Make_ReturnByValue_Text();
    public static string get_Make_ReturnByReference_Text();
    public static string get_Change_SignatureToConformTheFixedPattern_Text();
    public static string get_ChangeParameterKind_Text();
    public static string get_ChangeParameterName_Text();
    public static string get_UseParameter__Text();
    public static string get_ReturnByReference_Text();
    public static string get_ReturnByValue_Text();
    public static string get_ChangeTypeOfArrayElementsTo__Text();
    public static string get_ErrorWhileModifyingTheResourceFile_Text();
    public static string get_RemoveTupleComponent_Text();
    public static string get_SpecifyVarType_Text();
    public static string get_Allocate_Array_Text();
    public static string get_CorrectArgumentKind_Text();
    public static string get_ChangeTypeOfNewArrayTo__Text();
    public static string get_ChangeInstantiatedTypeTo__Text();
    public static string get_ConvertToTargetTypedNew_Text();
    public static string get_ConvertToChar_Text();
    public static string get_ConvertToString_Text();
    public static string get_CastLeftOperandToUlong_Text();
    public static string get_CastLeftOperandToLong_Text();
    public static string get_FixArgumentText_Text();
    public static string get_FixComponentName_Text();
    public static string get_FixPropertyName_Text();
    public static string get_ClarifyPrecedenceWithParentheses_Text();
    public static string get_RemoveRedundantArgumentName_Text();
    public static string get_AddMissingArgumentName__Text();
    public static string get_RemoveRedundantArgumentNames_Text();
    public static string get_AddMissingArgumentNames_Text();
    public static string get_UseExplicit_Modifier_Text();
    public static string get_RemoveRedundant_Modifier_Text();
    public static string get_UseExplicit_Modifiers_Text();
    public static string get_RemoveRedundant_Modifiers_Text();
    public static string get_PlaceAttributesInSeparateSections_Text();
    public static string get_PlaceAllAttributesIntoSingleSection_Text();
    public static string get_PlaceAllAttributesInSeparateSections_Text();
    public static string get_AddMissingBraces_Text();
    public static string get_RemoveRedundantBraces_Text();
    public static string get_ApplyBracesStyle_Text();
    public static string get_AddMissingBracesEverywhere_Text();
    public static string get_RemoveRedundantBracesEverywhere_Text();
    public static string get_ApplyBracesStyleEverywhere_Text();
    public static string get_FixBodyStyle_Text();
    public static string get_ToExpressionBodiedProperty_Text();
    public static string get_ToExpressionBodiedIndexer_Text();
    public static string get_ToExpressionBodiedGetter_Text();
    public static string get_UseDefaultLiteral_Text();
    public static string get_SpecifyType_Text();
    public static string get_FixDefaultValueStyle_Text();
    public static string get_ArrangeQualifiersEverywhere_Text();
    public static string get_UseThisQualifier_Text();
    public static string get_QualifyWithCurrentType_Text();
    public static string get_QualifyWithBaseType_Text();
    public static string get_UseBaseClassQualifier_Text();
    public static string get_SortModifiers_Text();
    public static string get_FixObjectCreationStyle_Text();
    public static string get_RemoveRedundantBaseQualifier_Text();
    public static string get_RemoveRedundantThisQualifier_Text();
    public static string get_RemoveRedundantQualifier_Text();
    public static string get_PutAssignmentsIntoBlocks_Text();
    public static string get_PutIntoBlock_Text();
    public static string get_FixDeconstructionDeclarationStyle_Text();
    public static string get_ArrangeBuiltInTypeReferenceStyle_Text();
    public static string get_UseTypeKeyword_Text();
    public static string get_UseCLRTypeName_Text();
    public static string get_RemoveAllRedundantParentheses_Text();
    public static string get_RemoveUnnecessaryWhitespace_Text();
    public static string get_CleanupWhitespace_Text();
    public static string get_SeparateControlTransferStatements_Text();
    public static string get_SeparateStatementsWithBlankLine_Text();
    public static string get_CommentAssignment_Text();
    public static string get_CommentUnreachableCode_Text();
    public static string get_ERROR_Text();
    public static string get_RemoveBaseClassReference_Text();
    public static string get_SetToAllPartsConstraintsFrom___Text();
    public static string get_ClearConstraints_Text();
    public static string get_NameTypeParameter__Text();
    public static string get_CompareWithDefaultValue_Text();
    public static string get_CompareWithNull_Text();
    public static string get_ThrowExceptionWhenNull_Text();
    public static string get_CoalesceWithFallbackValue_Text();
    public static string get_UseNullCoalescingExpression_Text();
    public static string get_MergeConditionalExpression_Text();
    public static string get_MergeConditionalExpressions_Text();
    public static string get_RemoveConditionalAccess_Text();
    public static string get_SuppressNullableWarningWith_Text();
    public static string get_QuickFix__Text();
    public static string get_EnableThisQuickFixInCurrentSolution_Text();
    public static string get_EnableThisQuickFixAndHideNullableSuppressions_Text();
    public static string get_MakeAllUninitializedMembersNullable_Text();
    public static string get_MakeDestinationNullable_Text();
    public static string get_MakeNullCheckedParametersNullable_Text();
    public static string get_FixNullabilityMismatchWithDefaultParameter_Text();
    public static string get_MergeAndPattern_Text();
    public static string get_RemoveCastTo__Text();
    public static string get_DisableThisQuickFixInCurrentSolution_Text();
    public static string get_SuppressNullableWarningWith_Initializer_Text();
    public static string get_SuppressNullableWarningsWith_Initializers_Text();
    public static string get_UseNullPropagation_Text();
    public static string get_ConvertToWhileLoop_Text();
    public static string get_ConvertToExpression_Text();
    public static string get_ToDefaultSwitchCase_Text();
    public static string get_SplitOutVariableFromArgumentAndMove_Text();
    public static string get_SplitInitializationAndMoveVariableDeclaration_Text();
    public static string get_SplitDeconstructionAndMoveDeclarations_Text();
    public static string get_SplitDeconstructionComponentAndMove_Text();
    public static string get_DisableAndRestoreWithComments_Text();
    public static string get_DisableWithPragma_Text();
    public static string get_DisableAllInspectionsInFile_Text();
    public static string get_DisableInFileWithComment_Text();
    public static string get_DisableWithPragmaInFile_Text();
    public static string get_DisableOnceWithComment_Text();
    public static string get_Enable_QuickFixInCurrentSolution_Text();
    public static string get_HideInspectionInCurrentSolutionAndEnable_Text();
    public static string get_ConvertToPrimaryConstructor_Text();
    public static string get_ConvertConstructorToMemberInitializers_Text();
    public static string get_ConvertToLocalVariableInlineInCaseOf_Text();
    public static string get_ReplaceWith_Method_Text();
    public static string get_AddNew_Text();
    public static string get_ConvertToProperty_Text();
    public static string get_ConvertToUsingDeclaration_Text();
    public static string get_ConvertToUsingStatement_Text();
    public static string get_ConvertInterfaceToAbstractClass_Text();
    public static string get_ToCompoundAssignment_Text();
    public static string get_ThisIsAConstructor_Text();
    public static string get_CorrectDestructorName_Text();
    public static string get_ReplaceWithDirectCast_Text();
    public static string get_ImplementInterfaceExplicitly_Text();
    public static string get_Convert_ToImplicitImplementation_Text();
    public static string get_Convert_ToLocalVariable_Text();
    public static string get_ReplaceWithMethodGroup_Text();
    public static string get_ToNullCoalescingCompoundAssignment_Text();
    public static string get_ConvertToRegularArray_Text();
    public static string get_Convert_ToStaticField_Text();
    public static string get_Convert_ToStaticReadonlyField_Text();
    public static string get_Call__Text();
    public static string get_ThisIsAVoidMethod_Text();
    public static string get_CallConvertTo_String_Text();
    public static string get_UseTupleExpression_Text();
    public static string get_UseNewExpression_Text();
    public static string get_RemoveParameterDefaultValue_Text();
    public static string get_CopyDefaultValue_FromBase_Text();
    public static string get_CopyToLocalVariable_Text();
    public static string get_CopyObsoleteFromBase_Text();
    public static string get_CopyValueOf_ToLocalVariable_Text();
    public static string get_CorrectAccessToStatic__Text();
    public static string get_CreateConstructorIn__Text();
    public static string get_CreateStaticClass__Text();
    public static string get_CreateNestedDelegate__Text();
    public static string get_CreateDelegate__Text();
    public static string get_CreateConstant__Text();
    public static string get_CreateField__Text();
    public static string get_CreateLocalVariable__Text();
    public static string get_CreateTypeParameter__Text();
    public static string get_CreateEnumMember__Text();
    public static string get_CreateEvent__Text();
    public static string get_CreateLocalFunction__Text();
    public static string get_CreateOverloadFor__Text();
    public static string get_CreateMethod__Text();
    public static string get_CreateAbstractOverloadFor__Text();
    public static string get_CreateAbstractMethod__Text();
    public static string get_CreateProperty__Text();
    public static string get_CreateGetOnlyProperty__Text();
    public static string get_CreateAutoProperty__Text();
    public static string get_CreateIndexer_Text();
    public static string get_CreateAbstractIndexer__Text();
    public static string get_CreateEmptyConstructorAndAddMemberInitializers_Text();
    public static string get_Create_Operator_Text();
    public static string get_CreateNonCheckedOperator_Text();
    public static string get_CreateDefaultConstructor_Text();
    public static string get_MakeDefaultConstructorPublicInClass_Text();
    public static string get_AddCrefAttribute_Text();
    public static string get_AddXmlDocComments_Text();
    public static string get_FixSignature_Text();
    public static string get_MergeDuplicateTags_Text();
    public static string get_RemoveXMLComment_Text();
    public static string get_RemoveThisTag_Text();
    public static string get_EmbedStatementInBlock_Text();
    public static string get_EnableNullableAnnotationsAndWarningsInFile_Text();
    public static string get_EnableNullableAnnotationsAndWarningsInProject_Text();
    public static string get_EnableNullableAnnotationsAndWarningsInSolution_Text();
    public static string get_EnablePreviewFeaturesInProject_Text();
    public static string get_UpdateProjects_Text();
    public static string get_EvaluateInUncheckedContext_Text();
    public static string get_ExtractCheckToExpression_Text();
    public static string get_ClearAccessRights_Text();
    public static string get_MakeTypeTheSameAsIn__Text();
    public static string get_FixArraySizeNumber_Text();
    public static string get_SetReturnTypeTo__Text();
    public static string get_ChangeSignatureOf__Text();
    public static string get_Fix_Constraints_Text();
    public static string get_ReorderConstraints_Text();
    public static string get_ReplaceNew_WithNew__Text();
    public static string get_FixFloatingPointComparison_Text();
    public static string get_Implement_Instead_Text();
    public static string get_ImplementMemberFromInterface__Text();
    public static string get_SetReturnTypeIteratorTo__Text();
    public static string get_ChangeTypeOfParameter_ToContainingType_Text();
    public static string get_ChangeTypeOfOperatorToContainingType_Text();
    public static string get_FixParamTypeSpecification_Text();
    public static string get_MovePartialModifierToCorrectPlace_Text();
    public static string get_FixOperatorParameterTypes_Text();
    public static string get_Override_Instead_Text();
    public static string get_FixComponentNameTo__Text();
    public static string get_MakeReturnTypeBool_Text();
    public static string get_GenerateArgumentStubs_Text();
    public static string get_GenerateConstructor_Text();
    public static string get_GenerateEqualityMembers_Text();
    public static string get_GenerateGuid_Text();
    public static string get_AddMissingArms_Text();
    public static string get_AddSwitchSections_Text();
    public static string get_AddSwitchSectionsFor_Text();
    public static string get_UseNullCoalescingOperator_Text();
    public static string get_ConvertToMethodCallWithExpressionInside_Text();
    public static string get_UseIfToCoalescingAssignment_Text();
    public static string get_AlwaysAssumeThatTypeHierarchyInThis_Text();
    public static string get_ReplaceWithReturn_Text();
    public static string get_ConvertToMethodCallWithIfToTernaryOperatorInside_Text();
    public static string get_ConvertToMethodCallWithIfToTernaryExpressionInside_Text();
    public static string get_ConvertToReturnMethodCallWithfToTernaryExpression_Text();
    public static string get_ConvertToIfToTernaryOperator_Text();
    public static string get_MakeCollectionType_Implement__Text();
    public static string get_AddImplementationForMembers_Text();
    public static string get_GenerateDisposePattern_Text();
    public static string get_GenerateEqualityComparer_Text();
    public static string get_EqualityCoMparer_Caption();
    public static string get_SelectMembersToParticipateInEquality_Text();
    public static string get_GenerateRelationalComparer_Text();
    public static string get_RelaTionalComparer_Caption();
    public static string get_SelectAndSortMembersToParticipateIn_Text();
    public static string get_GenerateRelationalMembers_Text();
    public static string get_ImplementMembersAbstract_Text();
    public static string get_ImplementMissingMembers_Text();
    public static string get_DelegateImplementationOf_ToNewField_Text();
    public static string get_DelegateImplementationTo_Text();
    public static string get_MIssingMembers_Caption();
    public static string get_ImplementMembersByDelegationTo__Caption();
    public static string get_SelectMembersForWhichToGenerateMissing_Text();
    public static string get_ImplementViaPrimaryConstructor_Text();
    public static string get_ImportExtensionMethod_Text();
    public static string get_Import_AndOtherMissingReferences_Text();
    public static string get_ImportNamespace_Text();
    public static string get_UseMethod_Text();
    public static string get_FailedToImportMethod_Text();
    public static string get_ReferenceAndImportExtensionMethod_Text();
    public static string get_InstallPackage_AndImport__Text();
    public static string get_Reference_AndImport__Text();
    public static string get_Inherit_FromBaseExceptionClass_Text();
    public static string get_InitializeStruct_Text();
    public static string get_InitializeWithANewInstance_Text();
    public static string get_AssignDefaultValueTo__Text();
    public static string get_AssignDefaultValues_Text();
    public static string get_InitializeConstant_Text();
    public static string get_InitializeVariable_Text();
    public static string get_Initialize__Text();
    public static string get_InitializeWithDefaultConstructorCall_Text();
    public static string get_InitializeWithFreeValue_Text();
    public static string get_InlineConstantValueIntoInterpolation_Text();
    public static string get_InlineExpressionIntoInterpolation_Text();
    public static string get_InlineOutVariableDeclarations_Text();
    public static string get_IntroduceField_Text();
    public static string get_InvertIsExpression_Text();
    public static string get_ToExtensionMethodInvocation_Text();
    public static string get_InvokeAllMethodsAsExtensions_Text();
    public static string get_JumpToCase__Text();
    public static string get_UseIndexedProperty_Text();
    public static string get_LiftAllClosuresToParametersIn__Text();
    public static string get_Pass_AsAParameter_Text();
    public static string get_PassThisAsAParameter_Text();
    public static string get_ConvertIntoLINQExpression_Text();
    public static string get_ConvertPartOfBodyIntoLINQExpression_Text();
    public static string get_ConvertToForeach_Text();
    public static string get_RemoveArgumentNameSpecification_Text();
    public static string get_AllowClosuresInAllContainingFunctions_Text();
    public static string get_AllowClosuresInContainingFunction_Text();
    public static string get_AllowClosuresIn__Text();
    public static string get_MakeOtherOperandRef_Text();
    public static string get_RemoveRedundantTypeArguments_Text();
    public static string get_CopyValueOfThisToLocalVariable_Text();
    public static string get_CreatePrimaryConstructorIn__Text();
    public static string get_CreateDeconstructMethodIn__Text();
    public static string get_FillArrayWithDefaultValues_Text();
    public static string get_AddDefaultArm_Text();
    public static string get_AddDefaultSection_Text();
    public static string get_MakeUsingStatementArgumentType_Implement_Text();
    public static string get_MakeCollectionType_ImplementIEnumerable_Text();
    public static string get_MakeCollectionType_ImplementIEnumerableGeneric_Text();
    public static string get_Make_Static_Text();
    public static string get_RemoveNullableAnnotation_Text();
    public static string get_MakeAllMembersReadOnly_Text();
    public static string get_Make_Async_Text();
    public static string get_Make_AsyncAwait_Text();
    public static string get_MayChangeOtherReturnStatementsSemantics_Text();
    public static string get_MakeAutoPropertyGetOnly_Text();
    public static string get_MakePropertiesGetOnly_Text();
    public static string get_MakeContainingMemberNonReadonly_Text();
    public static string get_MakeFieldNonReadonly_Text();
    public static string get_AddNewKeyword_Text();
    public static string get_RemoveNewModifier_Text();
    public static string get_RemoveNewModifiersWhenNotNecessary_Text();
    public static string get_Make_NonReadonly_Text();
    public static string get_MakePropertyInitOnly_Text();
    public static string get_MakeRefField_Mutable_Text();
    public static string get_MakeNonConstant_Text();
    public static string get_Mark_WithFlagsAttribute_Text();
    public static string get_MergeVariables_Text();
    public static string get_MergeNestedPropertyPatterns_Text();
    public static string get_MergeTryCatchFinallyStatements_Text();
    public static string get_Correct_KeywordPlacement_Text();
    public static string get_MakePartial_Text();
    public static string get_Remove_Modifier_Text();
    public static string get_MoveParameter_ToTheEndAndUpdateUsages_Text();
    public static string get_MoveDeclarationCloserToUsage_Text();
    public static string get_MoveTopLevelStatementsTo__Text();
    public static string get_MoveTopLevelStatementsBeforeTypesAnd_Text();
    public static string get_MoveDeclarationInsideLoopCondition_Text();
    public static string get_EnumerateToArray_Text();
    public static string get_EnumerateToList_Text();
    public static string get_EnumerateWithMethodAsArrayInternal_Text();
    public static string get_EnumerateWithMethodAsIListInternal_Text();
    public static string get_SimplifyNegatedRelationalPattern_Text();
    public static string get_RemoveUnusedDirectivesInFile_Text();
    public static string get_RemoveUnusedDirectives_Text();
    public static string get_MoveParameterToFirstPlace_Text();
    public static string get_ConvertTypeToSingleDimensionArray_Text();
    public static string get_ParenthesizeSignature_Text();
    public static string get_CreateDefiningDeclaration_Text();
    public static string get_MergePartialMethod_Text();
    public static string get_MakeMethodNonPartial_Text();
    public static string get_UseAsyncOverload_Text();
    public static string get_PassCancellationToken_Text();
    public static string get_ProvideMemberInitializerName_Text();
    public static string get_UseExistingVariables__Text();
    public static string get_UseExistingVariable__Text();
    public static string get_ConvertRecursionToIteration_Text();
    public static string get_RemoveRedundantIs_Text();
    public static string get_ThisIsFormatTemplatePlaceholder_Text();
    public static string get_RelocateAttributeToParameter_Text();
    public static string get_RemoveAsyncAndReturn__Text();
    public static string get_RemoveVariableDesignation_Text();
    public static string get_RemoveNullableAnnotationsWithoutNullable_Text();
    public static string get_RemoveDiscard_Text();
    public static string get_RemoveGlobalUsingDirective_Text();
    public static string get_RemoveInvalidStatement_Text();
    public static string get_RemovePropertyPatternClause_Text();
    public static string get_RemoveConflictingCqrsAttribute_Text();
    public static string get_RemoveRedundantAttribute_Text();
    public static string get_RemoveConfigureAwaitTrue_Text();
    public static string get_RemoveRedundantCqrsAttribute_Text();
    public static string get_RemoveRedundantCqrsAttributes_Text();
    public static string get_RemoveRedundantConfigureAwaitTrueCalls_Text();
    public static string get_RemoveStatement_Text();
    public static string get_RemoveRedundantJumpStatements_Text();
    public static string get_RemoveRedundantVerbatimPrefix_Text();
    public static string get_RemoveRedundantVerbatimPrefixes_Text();
    public static string get_RemoveRefModifier_Text();
    public static string get_RemoveRefInitializer_Text();
    public static string get_RemoveSubpattern_Text();
    public static string get_RemoveTypeCheck_Text();
    public static string get_UseNullCheckPattern_Text();
    public static string get_AnnotateAllConstrainingTypesAsNullable_Text();
    public static string get_CastToASmallerUnsignedType_Text();
    public static string get_CommentExceptionSuppression_Text();
    public static string get_DiscardAssignment_Text();
    public static string get_DiscardReturnValue_Text();
    public static string get_RemoveUsing_Text();
    public static string get_RemoveAwaitUsing_Text();
    public static string get_RemoveAbstractKeyword_Text();
    public static string get_RemoveVirtualKeyword_Text();
    public static string get_RemoveExtraAccessor_Text();
    public static string get_RemoveParenthesis_Text();
    public static string get_RemoveRedundantParenthesisSigns_Text();
    public static string get_RemoveRedundantArgumentNameSpecifications_Text();
    public static string get_RemoveCreationArguments_Text();
    public static string get_RemoveAsOperator_Text();
    public static string get_RemoveRedundantAsOperatorCalls_Text();
    public static string get_RemoveAssignment_Text();
    public static string get_RemoveAsyncModifier_Text();
    public static string get_RemoveAttribute_Text();
    public static string get_Remove_Attribute_Text();
    public static string get_RemoveProhibitedAttributes_Text();
    public static string get_RemoveAttributeSuffix_Text();
    public static string get_RemoveAttributeSuffixes_Text();
    public static string get_RemoveAwait_Text();
    public static string get_RemoveBody_Text();
    public static string get_RemoveCallOfAbstractBaseMember_Text();
    public static string get_Remove__Text();
    public static string get_RemoveRedundantCastExpressions_Text();
    public static string get_RemoveCheckedStatement_Text();
    public static string get_RemoveCheckedExpression_Text();
    public static string get_RemoveUncheckedStatement_Text();
    public static string get_RemoveUncheckedExpression_Text();
    public static string get_RemoveRedundantCheckedUncheckedContexts_Text();
    public static string get_RemoveRedundantComparison_Text();
    public static string get_RemoveRedundantComparisons_Text();
    public static string get_RemoveGuardClause_Text();
    public static string get_RemoveSwitchSection_Text();
    public static string get_Remove_ConstraintOf_Of__Text();
    public static string get_Remove_Constraint_Text();
    public static string get_RemoveConstraints_Text();
    public static string get_RemoveInitializer_Text();
    public static string get_RemoveDefaultValueSpecification_Text();
    public static string get_RemoveDoubleNegation_Text();
    public static string get_RemoveDuplicateAttribute_Text();
    public static string get_RemoveRedundantBaseTypeReference_Text();
    public static string get_RemoveRedundantConstructor_Text();
    public static string get_RemoveRedundantConstructors_Text();
    public static string get_RemoveRedundantFinalizer_Text();
    public static string get_RemoveRedundantInitializers_Text();
    public static string get_RemoveEmptyDeclaration_Text();
    public static string get_RemoveRedundantEmptyStatement_Text();
    public static string get_RemoveEmptyTypeParameters_Text();
    public static string get_RemoveEventAccessors_Text();
    public static string get_RethrowException_Text();
    public static string get_RethrowExceptions_Text();
    public static string get_RemoveParamsArrayCreation_Text();
    public static string get_RemoveRedundantParameterArrays_Text();
    public static string get_RemoveExplicitProperty_Text();
    public static string get_RemoveExplicitProperties_Text();
    public static string get_RemoveForeachStatement_Text();
    public static string get_RemoveInheritanceTo__Text();
    public static string get_RemoveDuplicateInitializer_Text();
    public static string get_RemoveRedundantInitializer_Text();
    public static string get_ToStringLiteral_Text();
    public static string get_ToStringLiterals_Text();
    public static string get_RemoveInvalidDigitSeparator_Text();
    public static string get_RemoveLineBreaks_Text();
    public static string get_RemoveProhibitedModifierS_Text();
    public static string get_RemoveStructConstraint_Text();
    public static string get_RemoveUnmanagedConstraint_Text();
    public static string get_RemoveNotnullConstraint_Text();
    public static string get_ConvertToClassConstraint_Text();
    public static string get_RemoveRedundantQuestionMarkSign_Text();
    public static string get_RemoveQuestionMarkSign_Text();
    public static string get_RemoveExclamationMarkSign_Text();
    public static string get_RemoveOverrideModifier_Text();
    public static string get_RemoveParamsFromBaseMember_Text();
    public static string get_RemoveParams_Text();
    public static string get_RemoveExplicitLambdaExpressionParameter_Text();
    public static string get_RemoveRedundantDecrement_Text();
    public static string get_RemoveRedundantIncrement_Text();
    public static string get_RemoveRedundantOperator_Text();
    public static string get_RemovePreprocessorDirective_Text();
    public static string get_RemovePropertyAssignment_Text();
    public static string get_RemoveRedundantAssignments_Text();
    public static string get_RemoveInterfaceQualification_Text();
    public static string get_RemoveClassKeyword_Text();
    public static string get_RemoveRedundantClassKeywords_Text();
    public static string get_RemoveRedundantArgumentSValue_Text();
    public static string get_RemoveRedundantArgumentSValues_Text();
    public static string get_UseArrayInitializer_Text();
    public static string get_UseArrayInitializerEverywhere_Text();
    public static string get_RemoveRedundantTypeSpecification_Text();
    public static string get_RemoveRedundantTypeSpecifications_Text();
    public static string get_RemoveRedundantBase_Text();
    public static string get_RemoveRedundantBaseCalls_Text();
    public static string get_RemoveRedundantBracesInCollectionInitializers_Text();
    public static string get_RemoveRedundantCallerArgumentExpression_Text();
    public static string get_RemoveRedundantCatch_Text();
    public static string get_RemoveRedundantCatchClauses_Text();
    public static string get_RemoveRedundantComments_Text();
    public static string get_RemoveRedundantComment_Text();
    public static string get_RemoveRedundantAttributes_Text();
    public static string get_RemoveSemicolon_Text();
    public static string get_RemoveSemicolons_Text();
    public static string get_RemoveRedundantDelegateConstructorCall_Text();
    public static string get_RemoveRedundantDelegateConstructorCalls_Text();
    public static string get_RemoveRedundantElse_Text();
    public static string get_RemoveAllRedundantElseKeywords_Text();
    public static string get_RemoveCastTCall_Text();
    public static string get_RemoveRedundantCastTCalls_Text();
    public static string get_RemoveExplicitArraySizeSpecification_Text();
    public static string get_RemoveRedundantName_Text();
    public static string get_RemoveRedundantNames_Text();
    public static string get_RemoveRedundantFinallyBlock_Text();
    public static string get_RemoveRedundantFinallyBlocks_Text();
    public static string get_RemoveRedundantFixedPointerDeclaration_Text();
    public static string get_RemoveRedundantFixedPointerDeclarations_Text();
    public static string get_RemoveAllEmptyInitializers_Text();
    public static string get_RemoveRedundantNew_Text();
    public static string get_RemoveRedundantSuppression_Text();
    public static string get_RemoveRedundantCode_Text();
    public static string get_RemoveRedundantParenthesis_Text();
    public static string get_RemoveRedundantParenthesisInLambdas_Text();
    public static string get_RemoveRedundantParenthesisInAttributes_Text();
    public static string get_RemoveRedundantBaseConstructorInvocation_Text();
    public static string get_RemoveRedundantAscending_Text();
    public static string get_RemoveRedundantRangeBound_Text();
    public static string get_RemoveRedundantRangeBounds_Text();
    public static string get_RemoveRedundantStringFormatCall_Text();
    public static string get_RemoveRedundantStringFormatCalls_Text();
    public static string get_RemoveRedundantSection_Text();
    public static string get_RemoveRedundantSections_Text();
    public static string get_RemoveRedundantToCharArray_Text();
    public static string get_RemoveRedundantToCharArrayCalls_Text();
    public static string get_RemoveRedundantCondition_Text();
    public static string get_RemoveRedundantConditionsInForStatements_Text();
    public static string get_RemoveTupleElementName__Text();
    public static string get_RemoveRedundantTupleElementNames_Text();
    public static string get_RemoveRedundantInt_Text();
    public static string get_RemoveRedundantIntInEnumDeclarations_Text();
    public static string get_ReplaceUnsafeStatementWithItsBody_Text();
    public static string get_ReplaceUnsafeStatementsWithTheirBodies_Text();
    public static string get_RemoveRefOut__Text();
    public static string get_ToVoidReturnRemoveValue_Text();
    public static string get_ToVoidReturnPreserveValue_Text();
    public static string get_RemoveRedundantSignature_Text();
    public static string get_RemoveRedundantAnonymousMethodSignatures_Text();
    public static string get_RemoveParameters_Text();
    public static string get_RemoveUnreachableCase_Text();
    public static string get_RemoveThis_Text();
    public static string get_RemoveRedundantToString_Text();
    public static string get_RemoveRedundantToStringMethodCalls_Text();
    public static string get_RemoveRedundantTruePattern_Text();
    public static string get_RemoveRedundantTruePatterns_Text();
    public static string get_MakeOperatorPublicStatic_Text();
    public static string get_RemoveRedundantAbstractKeywordInInterface_Text();
    public static string get_RemoveRedundantVirtualKeywordInInterface_Text();
    public static string get_RemoveInheritance_Text();
    public static string get_RemovePartialKeyword_Text();
    public static string get_RemovePartialKeywordFromAllTypesWith_Text();
    public static string get_RemoveSealedKeyword_Text();
    public static string get_RemoveSealedKeywordWhenItIsNotApplicable_Text();
    public static string get_RemoveTupleElementsNames_Text();
    public static string get_RemoveRedundantBody_Text();
    public static string get_RemoveRedundantTypeDeclarationBodies_Text();
    public static string get_RemoveBaseClassConstraint_Text();
    public static string get_RemoveTypeParameters_Text();
    public static string get_RemoveUnreachableCode_Text();
    public static string get_RemoveUnsafeModifier_Text();
    public static string get_RemoveUnsafeModifiersWhenTheyAreNot_Text();
    public static string get_RemoveUsingStatement_Text();
    public static string get_RemoveWithCancellation_Text();
    public static string get_RemoveWithExpression_Text();
    public static string get_ReplaceDefaultValueWith__Text();
    public static string get_Replace_With__Text();
    public static string get_ReplaceWithTypeCheck_Text();
    public static string get_ReplaceWithObjectInitializer_Text();
    public static string get_UnwrapFromDelegateCreation_Text();
    public static string get_UnwrapImmediateDelegates_Text();
    public static string get_UseTargetTupleNames_Text();
    public static string get_UseThisInitializer_Text();
    public static string get_ReplaceWithBranch_Text();
    public static string get_ReplaceWithJetBrainsAnnotationsAttribute_Text();
    public static string get_ReplaceWithConstantValue_Text();
    public static string get_ReplaceWithFieldKeyword_Text();
    public static string get_ReplaceWithPrimaryConstructorParameter_Text();
    public static string get_ReplaceWith_Call_Text();
    public static string get_Parameter_IsOutParameter_Text();
    public static string get_RemoveNullChecksOfValueType_Text();
    public static string get_RemoveNullChecksOfValueTypes_Text();
    public static string get_ReplaceAssignmentWithRightPart_Text();
    public static string get_ReplaceEqualityWith_Text();
    public static string get_ReplaceByConditionOperand_Text();
    public static string get_RemoveIfStatement_Text();
    public static string get_ReplaceIfStatementWithRespectiveBranch_Text();
    public static string get_ReplaceWithThenResultExpression_Text();
    public static string get_ReplaceWithElseResultExpression_Text();
    public static string get_ReplaceFinalizerWithIDisposablePattern_Text();
    public static string get_ReplaceInitializerWithStatement_Text();
    public static string get_ReplaceWithRightOperand_Text();
    public static string get_ReplaceWithAssignment_Text();
    public static string get_ReplaceWithLeftOperand_Text();
    public static string get_RemoveExpression_Text();
    public static string get_ReplaceExpressionWith__Text();
    public static string get_ReplaceWithCountAccess_Text();
    public static string get_UseCountAccess_Text();
    public static string get_ReplaceWithDefaultValueReturn_Text();
    public static string get_AddNewBeforeInitializer_Text();
    public static string get_ReplaceCastsWithPatternVariable_Text();
    public static string get_ReplaceWithIsAndConditionalOperator_Text();
    public static string get_MakeSuffixUppercase_Text();
    public static string get_ReplaceWithYieldReturn_Text();
    public static string get_ReplaceWithYieldBreak_Text();
    public static string get_SimplifyConditionalOperator_Text();
    public static string get_ReplaceWithOperatorFix();
    public static string get_ReturnDefaultValue_Text();
    public static string get_YieldThisValue_Text();
    public static string get_ReturnThisValue_Text();
    public static string get_ConfigureAwaitAnalysis_Text();
    public static string get_WhyIs_SuggestingThis_Text();
    public static string get_ReplaceWith__Text();
    public static string get_SimplifyNegatedPattern_Text();
    public static string get_SimplifyNegativeEqualityExpression_Text();
    public static string get_SimplifyStringInterpolation_Text();
    public static string get_SpecifyExplicitArrayType_Text();
    public static string get_SpecifyAttributeTarget_Text();
    public static string get_SpecifyAttributeTargets_Text();
    public static string get_RelocateAttributeToBackingField_Text();
    public static string get_RelocateAttributeToEvent_Text();
    public static string get_RelocateAttributeToProperty_Text();
    public static string get_RelocateAttributeToPositionalProperty_Text();
    public static string get_RelocateAttributeToReturnValue_Text();
    public static string get_AddExplicitName_Text();
    public static string get_SpecifyStringComparison_Text();
    public static string get_UseCurrentCulture_Text();
    public static string get_UseInvariantCulture_Text();
    public static string get_SplitDeclaration_Text();
    public static string get_SplitDeclarations_Text();
    public static string get_SplitUsingStatementExpressions_Text();
    public static string get_SurroundWithLock_Text();
    public static string get_SurroundWithUnsafeBlock_Text();
    public static string get_SwapViaDeconstruction_Text();
    public static string get_ThisIsMemberInitializer_Text();
    public static string get_ThisIsATypeTestPattern_Text();
    public static string get_ConvertToAutoProperty_Text();
    public static string get_ConvertToAutoProperties_Text();
    public static string get_ToComputedProperty_Text();
    public static string get_UseAwaitForeach_Text();
    public static string get_UseAwaitUsing_Text();
    public static string get_ToOrdinaryLocalVariable_Text();
    public static string get_ToRefLocalVariable_Text();
    public static string get_RemoveAttributes_Text();
    public static string get_UnwrapFromTuple_Text();
    public static string get_DiscardParameter_Text();
    public static string get_RemoveUnusedLabel_Text();
    public static string get_RemoveUnusedLabels_Text();
    public static string get_ToConst_Text();
    public static string get_IndicateUnusedVariableWithName_Text();
    public static string get_UseArrayEmpty__Text();
    public static string get_UseArrayEmptyT_Text();
    public static string get_UseAsyncOverloads_Text();
    public static string get_UseConfigureAwaitFalse_Text();
    public static string get_UsePrefix_Text();
    public static string get_UseTypeEmptyTypes_Text();
    public static string get_UseEventArgsEmpty_Text();
    public static string get_UseExplicitCastInsideForeachLoop_Text();
    public static string get_ThisIsArrayOf__Text();
    public static string get_UseIndexFromEndExpression_Text();
    public static string get_UseNameofExpression_Text();
    public static string get_UseNameofExpressions_Text();
    public static string get_FailedToUseNameofExpressionBecauseOf_Text();
    public static string get_UseNegatedPattern_Text();
    public static string get_UseAnnotationSyntax_Text();
    public static string get_UseCompilerAttributes_Text();
    public static string get_UseTypeAnnotationSyntax_Text();
    public static string get_UsePatternMatching_Text();
    public static string get_UseRangeIndexer_Text();
    public static string get_UseRefInitializer_Text();
    public static string get_UseSpan_AsAVariableType_Text();
    public static string get_UseArgumentNullExceptionThrowIfNull_Text();
    public static string get_UseVarPattern_Text();
    public static string get_UseWithExpression_Text();
    public static string get_ExtractInitializer_Text();
    public static string get_UseExplicitType_Text();
    public static string get_ReplaceWithEmptyBlock_Text();
    public static string get_UseEqualsCall_Text();
    public static string get_UseEqualsInstead_Text();
    public static string get_RewriteAs__Text();
    public static string get_RewriteAllNullableTypes_Text();
    public static string get_UseStringIsNullOrEmpty_Text();
    public static string get_UseProvidedValue_Text();
    public static string get_UseReferenceEquals_Text();
    public static string get_FixUsingDirective_Text();
    public static string get_RemoveStaticModifier_Text();
    public static string get_AddOperationContractAttributeToAllMethods_Text();
    public static string get_AddSystemServiceModelServiceContract_Text();
    public static string get_ChangeReturnTypeToTask_Text();
    public static string get_ChangeReturnTypeToVoid_Text();
    public static string get_MakeOperationTwoWay_Text();
    public static string get_RemoveOperationContractAttributeFrom_Text();
    public static string get_CreateWrapperMethodReturningIAsyncOperation_Text();
    public static string get_CreateWrapperMethodReturningIAsyncAction_Text();
    public static string get_WrapTopLevelStatementsIntoClass_Text();
    public static string get_Replace_Text();
    public static string get_ReplaceWith_Text();
    public static string get_WrapWithDelegateConstructor_Text();
    public static string get_WrapWithLambda_Text();
    public static string get_WrapTypeNameWithTypeof_Text();
    public static string get_ReplaceByOperatorIsInvocation_Text();
    public static string get_RedundanciesInSymbolDeclarationsQuickFixRegistration_Register_Remove_redundant__0__override();
    public static string get_In_Scope_Text();
    public static string get_Change_AccessRights_To_Text();
    public static string get_Add_Body_Text();
    public static string get_Add_ConstraintTo_Of___Text();
    public static string get_Add_To__Text();
    public static string get_AndHideNullableSuppressionsInspection_Text();
    public static string get_AndShowWarningsAboutExistingNullable_Text();
    public static string get_AndShowErrorsAboutExistingNullableSuppressions_Text();
    public static string get_Convert__IntoClass_Text();
    public static string get_Call_Expression_Text();
    public static string get_Create_InBase__Text();
    public static string get_CreateNestedSymbols_Text();
    public static string get_CreateRecord_Text();
    public static string get_Create_Symbols_Text();
    public static string get_Type_Kind_Text();
    public static string get_Interface_Kind_Text();
    public static string get_CreateGetPinnableReferenceMethodIn__Text();
    public static string get_CreateParameter_InContaining___Text();
    public static string get_CreateParameter_InContaining__AndPull_Text();
    public static string get_CreatePrimaryParameter_Text();
    public static string get_CreatePrimaryParameter_AndPull_Text();
    public static string get_CreateParameter_InContaining__Text();
    public static string get_CreateTypeParameter_In___Text();
    public static string get_Make_Implement__Text();
    public static string get_DelegateImplementationTo___Text();
    public static string get_Make_Async__Text();
    public static string get_Make_ReturnVoid_Text();
    public static string get_Seal___Text();
    public static string get_Make_Readonly_Text();
    public static string get_Make__Partial_Text();
    public static string get_RemoveConstraintFor__Text();
    public static string get_Remove_Initializer_Text();
    public static string get_RemoveParametersTypeSpecification_Text();
    public static string get_RemoveParameterTypeSpecification_Text();
    public static string get_RemoveRedundant_Initializer_Text();
    public static string get_Replace__WithItsValue_Text();
    public static string get_Make___Text();
    public static string get_Make_Extend__Text();
    public static string get_MakeAccessor__Text();
    public static string get_MakeInitOnly__Mutable_Text();
    public static string get_MakeMutable__InitOnly_Text();
    public static string get_InlineThis__Text();
    public static string get_IntroduceOptionalParameterSFor___Text();
    public static string get_Make_Kind_Static_Text();
    public static string get_AnonymousFunction_Kind_Text();
    public static string get_Make_Unsafe_Text();
    public static string get_Make_UsingDirectiveUnsafe_Text();
    public static string get_ChangeConstraintsOf_Of__ToNonNullable_Text();
    public static string get_Make_TypeNotNullable_Text();
    public static string get_Variable_Kind_Text();
    public static string get_MethodReturn_Kind_Text();
    public static string get_LocalFunctionReturn_Kind_Text();
    public static string get_Property_Kind_Text();
    public static string get_OperatorReturn_Kind_Text();
    public static string get_ThisIs__Text();
    public static string get_MakeTypeParameter___Text();
    public static string get_MakeEnclosingInterfaceTypeParametersInvariantFix__Text();
    public static string get_UseParameterType_OfBase__Text();
    public static string get_UseReturnType_OfBase__Text();
    public static string get_Add_exception_TagToXMLDocumentationContextAction_Description();
    public static string get_Add_exception_TagToXMLDocumentationContextAction_Name();
    public static string get_Add_inheritdoc_TagToXMLDocumentationContextAction_Description();
    public static string get_Add_inheritdoc_TagToXMLDocumentationContextAction_Name();
    public static string get_AddAnotherAccessorContextAction_Description();
    public static string get_AddAnotherAccessorContextAction_Name();
    public static string get_AddBlockBracesToSwitchSectionStatementsContextAction_Description();
    public static string get_AddBlockBracesToSwitchSectionStatementsContextAction_Name();
    public static string get_AddBracesContextAction_Description();
    public static string get_AddBracesContextAction_Name();
    public static string get_AddDeconstructPatternComponentNameContextAction_Description();
    public static string get_AddDeconstructPatternComponentNameContextAction_Name();
    public static string get_RemoveDeconstructPatternComponentNameContextAction_Description();
    public static string get_ConvertToPrimaryConstructorContextAction_Name();
    public static string get_ConvertToPrimaryConstructorContextAction_Description();
    public static string get_RemoveDeconstructPatternComponentNameContextAction_Name();
    public static string get_AddExplicitNameOfAnonymousPropertyContextAction_Description();
    public static string get_AddExplicitNameOfAnonymousPropertyContextAction_Name();
    public static string get_AddNameToArgumentContextAction_Description();
    public static string get_AddNameToArgumentContextAction_Name();
    public static string get_AddsSwitchConditionComponentContextAction_Description();
    public static string get_AddsSwitchConditionComponentContextAction_Name();
    public static string get_AddStringFormattingMethodArgumentContextAction_Description();
    public static string get_AddStringFormattingMethodArgumentContextAction_Name();
    public static string get_AddStringInterpolationArgumentContextAction_Description();
    public static string get_AddStringInterpolationArgumentContextAction_Name();
    public static string get_AddTupleComponentNameContextAction_Description();
    public static string get_AddTupleComponentNameContextAction_Name();
    public static string get_AddVariableDesignationForPatternContextAction_Description();
    public static string get_AddVariableDesignationForPatternContextAction_Name();
    public static string get_AnnotateEnumMembersWithEnumMemberAttributeContextAction_Description();
    public static string get_AnnotateEnumMembersWithEnumMemberAttributeContextAction_Name();
    public static string get_AnnotateMembersWithDataMemberAttributeContextAction_Description();
    public static string get_AnnotateMembersWithDataMemberAttributeContextAction_Name();
    public static string get_AnnotateMemberWithNullabilityAttributeContextAction_Description();
    public static string get_AnnotateMemberWithNullabilityAttributeContextAction_Name();
    public static string get_AnnotateMethodsWithOperationContractAttributeContextAction_Description();
    public static string get_AnnotateMethodsWithOperationContractAttributeContextAction_Name();
    public static string get_AssertReferenceIsNotNullContextAction_Description();
    public static string get_AssertReferenceIsNotNullContextAction_Name();
    public static string get_ChangeBetweenSetAndInitAccessorContextAction_Description();
    public static string get_ChangeBetweenSetAndInitAccessorContextAction_Name();
    public static string get_ChangeMemberVisibilityContextAction_Description();
    public static string get_ChangeMemberVisibilityContextAction_Name();
    public static string get_ChangeSignatureOfTheCurrentMemberContextAction_Description();
    public static string get_ChangeSignatureOfTheCurrentMemberContextAction_Name();
    public static string get_CopyTypeContextAction_Name();
    public static string get_CopyTypeContextAction_Description();
    public static string get_ChangeTypeDeclarationKindBetweenClassStructAndRecordContextAction_Description();
    public static string get_ChangeTypeDeclarationKindBetweenClassStructAndRecordContextAction_Name();
    public static string get_CheckAllStringParametersForNullsOrEmptyStringsContextAction_Description();
    public static string get_CheckAllStringParametersForNullsOrEmptyStringsContextAction_Name();
    public static string get_CheckAllStringParametersForNullsOrWhitespaceStringsContextAction_Description();
    public static string get_CheckAllStringParametersForNullsOrWhitespaceStringsContextAction_Name();
    public static string get_CheckArrayIndexValueContextAction_Description();
    public static string get_CheckArrayIndexValueContextAction_Name();
    public static string get_CheckCollectionIndexValueContextAction_Description();
    public static string get_CheckCollectionIndexValueContextAction_Name();
    public static string get_CheckDictionaryKeyValueContextAction_Description();
    public static string get_CheckDictionaryKeyValueContextAction_Name();
    public static string get_CheckEveryParameterForNullContextAction_Description();
    public static string get_CheckEveryParameterForNullContextAction_Name();
    public static string get_CheckIfEnumParameterIsDefinedByEnumTypeContextAction_Description();
    public static string get_CheckIfEnumParameterIsDefinedByEnumTypeContextAction_Name();
    public static string get_CheckIfNumericParameterIsOutOfRangeContextAction_Description();
    public static string get_CheckIfNumericParameterIsOutOfRangeContextAction_Name();
    public static string get_CheckIfParameterIsAnEmptyCollectionContextAction_Description();
    public static string get_CheckIfParameterIsAnEmptyCollectionContextAction_Name();
    public static string get_CheckIfParameterIsNotValidContextAction_Description();
    public static string get_CheckIfParameterIsNotValidContextAction_Name();
    public static string get_CheckIfParameterIsNullContextAction_Description();
    public static string get_CheckIfParameterIsNullContextAction_Name();
    public static string get_CheckIfReferenceIsNotNullContextAction_Description();
    public static string get_CheckIfReferenceIsNotNullContextAction_Name();
    public static string get_CheckIfStringParameterIsNullOrEmptyStringContextAction_Description();
    public static string get_CheckIfStringParameterIsNullOrEmptyStringContextAction_Name();
    public static string get_CheckIfStringParameterIsNullOrWhitespaceStringContextAction_Description();
    public static string get_CheckIfStringParameterIsNullOrWhitespaceStringContextAction_Name();
    public static string get_CheckIfVariableIsNullContextAction_Description();
    public static string get_CheckIfVariableIsNullContextAction_Name();
    public static string get_CheckSpan_T_IndexValueContextAction_Description();
    public static string get_CheckSpan_T_IndexValueContextAction_Name();
    public static string get_CheckStringBuilderIndexValueContextAction_Description();
    public static string get_CheckStringBuilderIndexValueContextAction_Name();
    public static string get_CheckStringIndexValueContextAction_Description();
    public static string get_CheckStringIndexValueContextAction_Name();
    public static string get_ComputeConstantValueContextAction_Description();
    public static string get_ComputeConstantValueContextAction_Name();
    public static string get_ConfigureNullCheckAssertionPatternContextAction_Description();
    public static string get_ConfigureNullCheckAssertionPatternContextAction_Name();
    public static string get_ConfigureParameterNullCheckPatternContextAction_Description();
    public static string get_ConfigureParameterNullCheckPatternContextAction_Name();
    public static string get_ConfigureVariableNullCheckPatternContextAction_Description();
    public static string get_ConfigureVariableNullCheckPatternContextAction_Name();
    public static string get_Convert_ConditionalExpressionToIfStatementContextAction_Description();
    public static string get_Convert_ConditionalExpressionToIfStatementContextAction_Name();
    public static string get_Convert_ConditionalExpressionToSwitchExpressionContextAction_Description();
    public static string get_Convert_ConditionalExpressionToSwitchExpressionContextAction_Name();
    public static string get_ConvertAnonymousMethodToLambdaExpressionContextAction_Description();
    public static string get_ConvertAnonymousMethodToLambdaExpressionContextAction_Name();
    public static string get_ConvertAnonymousTypeToNamedTypeContextAction_Description();
    public static string get_ConvertAnonymousTypeToNamedTypeContextAction_Name();
    public static string get_ConvertAnonymousTypeToTupleContextAction_Description();
    public static string get_ConvertAnonymousTypeToTupleContextAction_Name();
    public static string get_ConvertAutoPropertyToPropertyWithDefaultBodyContextAction_Description();
    public static string get_ConvertAutoPropertyToPropertyWithDefaultBodyContextAction_Name();
    public static string get_ConvertCatchClauseToCatchExceptionContextAction_Description();
    public static string get_ConvertCatchClauseToCatchExceptionContextAction_Name();
    public static string get_ConvertCatchExceptionClauseToCatchContextAction_Description();
    public static string get_ConvertCatchExceptionClauseToCatchContextAction_Name();
    public static string get_ConvertCollectionInitializerIntoAddMethodCallsContextAction_Description();
    public static string get_ConvertCollectionInitializerIntoAddMethodCallsContextAction_Name();
    public static string get_UseCollectionExpressionContextAction_Name();
    public static string get_UseCollectionExpressionContextAction_Description();
    public static string get_ConvertCompoundAssignmentToRegularAssignmentContextAction_Description();
    public static string get_ConvertCompoundAssignmentToRegularAssignmentContextAction_Name();
    public static string get_ConvertConstructorToFactoryMethodContextAction_Description();
    public static string get_ConvertConstructorToFactoryMethodContextAction_Name();
    public static string get_ConvertCurrentExtensionMethodIntoOrdinaryStaticMethodFormContextAction_Description();
    public static string get_ConvertCurrentExtensionMethodIntoOrdinaryStaticMethodFormContextAction_Name();
    public static string get_ConvertCurrentMethodIntoExtensionMethodFormContextAction_Description();
    public static string get_ConvertCurrentMethodIntoExtensionMethodFormContextAction_Name();
    public static string get_ConvertExplicitToImplicitImplementationContextAction_Description();
    public static string get_ConvertExplicitToImplicitImplementationContextAction_Name();
    public static string get_ConvertExpressionBodyMemberToStatementBodyContextAction_Description();
    public static string get_ConvertExpressionBodyMemberToStatementBodyContextAction_Name();
    public static string get_ConvertExpressionLambdaToStatementLambdaContextAction_Description();
    public static string get_ConvertExpressionLambdaToStatementLambdaContextAction_Name();
    public static string get_ConvertForeachToForLoopContextAction_Description();
    public static string get_ConvertForeachToForLoopContextAction_Name();
    public static string get_ConvertIfStatementTo_ConditionalExpressionContextAction_Description();
    public static string get_ConvertIfStatementTo_ConditionalExpressionContextAction_Name();
    public static string get_ConvertIfStatementToSwitchCaseGuardClauseContextAction_Description();
    public static string get_ConvertIfStatementToSwitchCaseGuardClauseContextAction_Name();
    public static string get_ConvertIfStatementToSwitchExpressionContextAction_Description();
    public static string get_ConvertIfStatementToSwitchExpressionContextAction_Name();
    public static string get_ConvertIfStatementToSwitchStatementContextAction_Description();
    public static string get_ConvertIfStatementToSwitchStatementContextAction_Name();
    public static string get_ConvertImplicitToExplicitInterfaceImplementationContextAction_Description();
    public static string get_ConvertImplicitToExplicitInterfaceImplementationContextAction_Name();
    public static string get_ConvertIntegerLiteralToBinaryFormContextAction_Description();
    public static string get_ConvertIntegerLiteralToBinaryFormContextAction_Name();
    public static string get_ConvertIntegerLiteralToHexadecimalFormContextAction_Description();
    public static string get_ConvertIntegerLiteralToHexadecimalFormContextAction_Name();
    public static string get_ConvertIntegralLiteralToDecimalFormContextAction_Description();
    public static string get_ConvertIntegralLiteralToDecimalFormContextAction_Name();
    public static string get_ConvertInvalidCharacterLiteralToStringContextAction_Description();
    public static string get_ConvertInvalidCharacterLiteralToStringContextAction_Name();
    public static string get_ConvertIteratorToMethodContextAction_Description();
    public static string get_ConvertIteratorToMethodContextAction_Name();
    public static string get_ConvertLambdaExpressionToAnonymousMethodContextAction_Description();
    public static string get_ConvertLambdaExpressionToAnonymousMethodContextAction_Name();
    public static string get_ConvertLINQToCodeContextAction_Description();
    public static string get_ConvertLINQToCodeContextAction_Name();
    public static string get_ConvertLINQToMethodChainContextAction_Description();
    public static string get_ConvertLINQToMethodChainContextAction_Name();
    public static string get_ConvertMethodGroupToAnonymousMethodContextAction_Description();
    public static string get_ConvertMethodGroupToAnonymousMethodContextAction_Name();
    public static string get_ConvertMethodGroupToLambdaContextAction_Description();
    public static string get_ConvertMethodGroupToLambdaContextAction_Name();
    public static string get_ConvertMethodToPropertyContextAction_Description();
    public static string get_ConvertMethodToPropertyContextAction_Name();
    public static string get_ConvertNullCoalescingAssignmentToIfStatementContextAction_Description();
    public static string get_ConvertNullCoalescingAssignmentToIfStatementContextAction_Name();
    public static string get_ConvertNullCoalescingExpressionToIfStatementContextAction_Description();
    public static string get_ConvertNullCoalescingExpressionToIfStatementContextAction_Name();
    public static string get_ConvertObjectInitializerIntoAssignmentStatementsContextAction_Description();
    public static string get_ConvertObjectInitializerIntoAssignmentStatementsContextAction_Name();
    public static string get_ConvertObjectInitializerIntoConstructorInvocationContextAction_Description();
    public static string get_ConvertObjectInitializerIntoConstructorInvocationContextAction_Name();
    public static string get_ConvertPropertyToMethodContextAction_Description();
    public static string get_ConvertPropertyToMethodContextAction_Name();
    public static string get_ConvertsMemberValueCheckExpressionToRecursivePatternContextAction_Description();
    public static string get_ConvertsMemberValueCheckExpressionToRecursivePatternContextAction_Name();
    public static string get_ConvertsNotNullCheckIntoObjectPatternCheckContextAction_Description();
    public static string get_ConvertsNotNullCheckIntoObjectPatternCheckContextAction_Name();
    public static string get_ConvertStatementBodyMemberToExpressionBodyContextAction_Description();
    public static string get_ConvertStatementBodyMemberToExpressionBodyContextAction_Name();
    public static string get_ConvertStatementLambdaToExpressionLambdaContextAction_Description();
    public static string get_ConvertStatementLambdaToExpressionLambdaContextAction_Name();
    public static string get_ConvertStringComparisonToStringEqualsCallContextAction_Description();
    public static string get_ConvertStringComparisonToStringEqualsCallContextAction_Name();
    public static string get_ConvertStringFormatToStringInterpolationContextAction_Description();
    public static string get_ConvertStringFormatToStringInterpolationContextAction_Name();
    public static string get_ConvertStringInterpolationToStringFormatCallContextAction_Description();
    public static string get_ConvertStringInterpolationToStringFormatCallContextAction_Name();
    public static string get_ConvertStringLiteralToStringInterpolationContextAction_Description();
    public static string get_ConvertStringLiteralToStringInterpolationContextAction_Name();
    public static string get_ConvertSwitchExpressionToConditional_ExpressionSContextAction_Description();
    public static string get_ConvertSwitchExpressionToConditional_ExpressionSContextAction_Name();
    public static string get_ConvertSwitchExpressionToIfStatementsContextAction_Description();
    public static string get_ConvertSwitchExpressionToIfStatementsContextAction_Name();
    public static string get_ConvertSwitchExpressionToSwitchStatementContextAction_Description();
    public static string get_ConvertSwitchExpressionToSwitchStatementContextAction_Name();
    public static string get_ConvertSwitchStatementToIfStatementsContextAction_Description();
    public static string get_ConvertSwitchStatementToIfStatementsContextAction_Name();
    public static string get_ConvertSwitchStatementToSwitchExpressionContextAction_Description();
    public static string get_ConvertSwitchStatementToSwitchExpressionContextAction_Name();
    public static string get_ConvertToRegularStringInterpolationContextAction_Description();
    public static string get_ConvertToRegularStringInterpolationContextAction_Name();
    public static string get_ConvertToRegularStringLiteralContextAction_Description();
    public static string get_ConvertToRegularStringLiteralContextAction_Name();
    public static string get_ConvertToTopLevelCodeContextAction_Description();
    public static string get_ConvertToTopLevelCodeContextAction_Name();
    public static string get_ConvertToUsingDeclarationContextAction_Description();
    public static string get_ConvertToUsingStatementContextAction_Description();
    public static string get_ConvertToVerbatimStringInterpolationContextAction_Description();
    public static string get_ConvertRegularToRawStringInterpolationContextAction_Description();
    public static string get_ConvertVerbatimToRawStringInterpolationContextAction_Description();
    public static string get_ConvertToVerbatimStringInterpolationContextAction_Name();
    public static string get_ConvertRegularToRawStringInterpolationContextAction_Name();
    public static string get_ConvertVerbatimToRawStringInterpolationContextAction_Name();
    public static string get_ConvertToVerbatimStringLiteralContextAction_Description();
    public static string get_ConvertToVerbatimStringLiteralContextAction_Name();
    public static string get_ConvertRegularToRawStringLiteralContextAction_Name();
    public static string get_ConvertVerbatimToRawStringLiteralContextAction_Name();
    public static string get_ChangeRawStringContextAction_Name();
    public static string get_ChangeRawStringContextAction_Description();
    public static string get_AddQuotesToRawStringContextAction_Text();
    public static string get_RemoveQuotesFromRawStringContextAction_Text();
    public static string get_AddDollarToRawStringContextAction_Text();
    public static string get_RemoveDollarFromRawStringContextAction_Text();
    public static string get_ConvertToSingleLineRawStringContextAction_Text();
    public static string get_ConvertToMultiLineRawStringContextAction_Text();
    public static string get_ConvertRegularToRawStringLiteralContextAction_Description();
    public static string get_ConvertVerbatimToRawStringLiteralContextAction_Description();
    public static string get_CopyXMLDocumentationFromBaseMemberContextAction_Description();
    public static string get_CopyXMLDocumentationFromBaseMemberContextAction_Name();
    public static string get_CreateAnotherPartOfATypeDeclarationContextAction_Description();
    public static string get_CreateAnotherPartOfATypeDeclarationContextAction_Name();
    public static string get_CreateCollectionExpressionFromParamsParameterArgumentsContextAction_Description();
    public static string get_CreateCollectionExpressionFromParamsParameterArgumentsContextAction_Name();
    public static string get_CreateDerivedTypeContextAction_Description();
    public static string get_CreateDerivedTypeContextAction_Name();
    public static string get_CreateEventInvocatorContextAction_Description();
    public static string get_CreateEventInvocatorContextAction_Name();
    public static string get_CreateExplicitArrayCreationFromParamsParameterArgumentsContextAction_Description();
    public static string get_CreateExplicitArrayCreationFromParamsParameterArgumentsContextAction_Name();
    public static string get_CreateExplicitCollectionCreationFromParamsParameterArgumentsContextAction_Description();
    public static string get_CreateExplicitCollectionCreationFromParamsParameterArgumentsContextAction_Name();
    public static string get_CreateExplicitConstructorDeclarationForPrimaryConstructorContextAction_Description();
    public static string get_CreateExplicitConstructorDeclarationForPrimaryConstructorContextAction_Name();
    public static string get_CreateExplicitPropertyDeclarationForPositionalParameterContextAction_Description();
    public static string get_CreateExplicitFieldDeclarationForParameterOfPrimaryConstructorContextAction_Description();
    public static string get_CreateExplicitPropertyDeclarationForPositionalParameterContextAction_Name();
    public static string get_CreateExplicitFieldDeclarationForParameterOfPrimaryConstructorContextAction_Name();
    public static string get_CreateMatchingCheckedOperatorContextAction_Description();
    public static string get_CreateMatchingCheckedOperatorContextAction_Name();
    public static string get_CreateOverloadWithoutParameterContextAction_Description();
    public static string get_CreateOverloadWithoutParameterContextAction_Name();
    public static string get_CreateReturnFromExpressionContextAction_Description();
    public static string get_CreateReturnFromExpressionContextAction_Name();
    public static string get_DeconstructVariableContextAction_Description();
    public static string get_DeconstructVariableContextAction_Name();
    public static string get_DeleteCommentContextAction_Description();
    public static string get_DeleteCommentContextAction_Name();
    public static string get_Enable_ASuppressedNullableWarningMightHideAnUnderlyingProblem_InspectionContextAction_Description();
    public static string get_Enable_ASuppressedNullableWarningMightHideAnUnderlyingProblem_InspectionContextAction_Name();
    public static string get_Enable_EnforceBracesInFixedStatement_InspectionContextAction_Description();
    public static string get_Enable_EnforceBracesInFixedStatement_InspectionContextAction_Name();
    public static string get_Enable_EnforceBracesInForeachStatement_InspectionContextAction_Description();
    public static string get_Enable_EnforceBracesInForeachStatement_InspectionContextAction_Name();
    public static string get_Enable_EnforceBracesInForStatement_InspectionContextAction_Description();
    public static string get_Enable_EnforceBracesInForStatement_InspectionContextAction_Name();
    public static string get_Enable_EnforceBracesInLockStatement_InspectionContextAction_Description();
    public static string get_Enable_EnforceBracesInLockStatement_InspectionContextAction_Name();
    public static string get_Enable_EnforceBracesInUsingStatement_InspectionContextAction_Description();
    public static string get_Enable_EnforceBracesInUsingStatement_InspectionContextAction_Name();
    public static string get_Enable_EnforceBracesInWhileStatement_InspectionContextAction_Description();
    public static string get_Enable_EnforceBracesInWhileStatement_InspectionContextAction_Name();
    public static string get_Enable_LocalFunctionCanBeMadeStatic_InspectionContextAction_Description();
    public static string get_Enable_LocalFunctionCanBeMadeStatic_InspectionContextAction_Name();
    public static string get_Enable_StructMemberCanBeReadonly_InspectionContextAction_Description();
    public static string get_Enable_StructMemberCanBeReadonly_InspectionContextAction_Name();
    public static string get_Enable_SuppressNullableWarningWith_QuickFixInCurrentSolutionContextAction_Description();
    public static string get_Enable_SuppressNullableWarningWith_QuickFixInCurrentSolutionContextAction_Name();
    public static string get_Enable_UnnecessaryWhitespaceAtTheEndOfLine_InspectionContextAction_Description();
    public static string get_Enable_UnnecessaryWhitespaceAtTheEndOfLine_InspectionContextAction_Name();
    public static string get_Enable_UsageOfTabulationCharacterForIndentationIsProhibited_InspectionContextAction_Description();
    public static string get_Enable_UsageOfTabulationCharacterForIndentationIsProhibited_InspectionContextAction_Name();
    public static string get_EncapsulateLazyFieldContextAction_Description();
    public static string get_EncapsulateLazyFieldContextAction_Name();
    public static string get_EvaluateExpressionContextAction_Description();
    public static string get_EvaluateExpressionContextAction_Name();
    public static string get_ExtractAnonymousMethodExpressionToLocalFunctionContextAction_Description();
    public static string get_ExtractAnonymousMethodExpressionToLocalFunctionContextAction_Name();
    public static string get_ExtractAnonymousMethodExpressionToNamedMethodContextAction_Description();
    public static string get_ExtractAnonymousMethodExpressionToNamedMethodContextAction_Name();
    public static string get_ConvertToGlobalUsingContextAction_Description();
    public static string get_ConvertToGlobalUsingContextAction_Name();
    public static string get_ExtractLambdaExpressionToLocalFunctionContextAction_Description();
    public static string get_ExtractLambdaExpressionToLocalFunctionContextAction_Name();
    public static string get_ExtractLambdaExpressionToNamedMethodContextAction_Description();
    public static string get_ExtractLambdaExpressionToNamedMethodContextAction_Name();
    public static string get_ExtractLocalFunctionToRegularMethodContextAction_Description();
    public static string get_ExtractLocalFunctionToRegularMethodContextAction_Name();
    public static string get_ExtractMethodFromSelectedCodeContextAction_Description();
    public static string get_ExtractMethodFromSelectedCodeContextAction_Name();
    public static string get_FillObjectInitializerContextAction_Description();
    public static string get_FillObjectInitializerContextAction_Name();
    public static string get_FixInvalidEscapeSequencesContextAction_Description();
    public static string get_FixInvalidEscapeSequencesContextAction_Name();
    public static string get_FixInvalidRegularStringContextAction_Description();
    public static string get_FixInvalidRegularStringContextAction_Name();
    public static string get_FixTernaryExpressionInStringInterpolationContextAction_Description();
    public static string get_FixTernaryExpressionInStringInterpolationContextAction_Name();
    public static string get_FlipInvocationExpressionContextAction_Description();
    public static string get_FlipInvocationExpressionContextAction_Name();
    public static string get_FlipRelationalExpressionContextAction_Description();
    public static string get_FlipRelationalExpressionContextAction_Name();
    public static string get_GenerateMethodToCheckWhetherEnumFlagContextAction_Description();
    public static string get_GenerateMethodToCheckWhetherEnumFlagContextAction_Name();
    public static string get_GenerateTypePatternsContextAction_Description();
    public static string get_GenerateTypePatternsContextAction_Name();
    public static string get_ImplementAbstractMemberContextAction_Description();
    public static string get_ImplementAbstractMemberContextAction_Name();
    public static string get_ImplementCustomEventAccessorsContextAction_Description();
    public static string get_ImplementCustomEventAccessorsContextAction_Name();
    public static string get_ImplementINotifyPropertyChangedPatternContextAction_Description();
    public static string get_ImplementINotifyPropertyChangedPatternContextAction_Name();
    public static string get_ImportStaticMembersWithUsingStaticDirectiveContextAction_Description();
    public static string get_ImportStaticMembersWithUsingStaticDirectiveContextAction_Name();
    public static string get_IncludeMemberAccessIntoObjectPatternContextAction_Description();
    public static string get_IncludeMemberAccessIntoObjectPatternContextAction_Name();
    public static string get_InitializeAutoPropertyFromConstructorParameterContextAction_Description();
    public static string get_InitializeAutoPropertyFromConstructorParameterContextAction_Name();
    public static string get_InitializeFieldFromConstructorParameterContextAction_Description();
    public static string get_InitializeFieldFromConstructorParameterContextAction_Name();
    public static string get_InitializeMemberFromConstructorParameterContextAction_Name();
    public static string get_InitializeMemberFromConstructorParameterContextAction_Text();
    public static string get_InitializeMemberFromConstructorParameterContextAction_Description();
    public static string get_InitializeNonPrivateFieldFromConstructorParameterContextAction_Description();
    public static string get_InitializeNonPrivateFieldFromConstructorParameterContextAction_Name();
    public static string get_InlineControlTransferStatementContextAction_Description();
    public static string get_InlineControlTransferStatementContextAction_Name();
    public static string get_ConvertToNonGlobalUsingContextAction_Description();
    public static string get_InlineUsingAliasContextAction_Description();
    public static string get_ConvertToNonGlobalUsingContextAction_Name();
    public static string get_InlineUsingAliasContextAction_Name();
    public static string get_InlineOutVariableDeclarationContextAction_Description();
    public static string get_InlineOutVariableDeclarationContextAction_Name();
    public static string get_InlineStringInterpolationArgumentContextAction_Description();
    public static string get_InlineStringInterpolationArgumentContextAction_Name();
    public static string get_InlinesVariableIntoConditionExpressionUsingThisVariableContextAction_Description();
    public static string get_InlinesVariableIntoConditionExpressionUsingThisVariableContextAction_Name();
    public static string get_InlineTemporaryVariableContextAction_Description();
    public static string get_InlineTemporaryVariableContextAction_Name();
    public static string get_InsertAnonymousMethodSignatureContextAction_Description();
    public static string get_InsertAnonymousMethodSignatureContextAction_Name();
    public static string get_InsertDigitSeparatorsInRealLiteralContextAction_Description();
    public static string get_InsertDigitSeparatorsInRealLiteralContextAction_Name();
    public static string get_InsertGenericMethodInvocationTypeArgumentsContextAction_Description();
    public static string get_InsertGenericMethodInvocationTypeArgumentsContextAction_Name();
    public static string get_InsertLambdaExpressionSignatureContextAction_Description();
    public static string get_InsertLambdaExpressionReturnTypeContextAction_Description();
    public static string get_InsertLambdaExpressionSignatureContextAction_Name();
    public static string get_InsertLambdaExpressionReturnTypeContextAction_Name();
    public static string get_InsertTypeSpecificationAfterDefaultLiteralContextAction_Description();
    public static string get_InsertTypeSpecificationAfterDefaultLiteralContextAction_Name();
    public static string get_IntroduceVariableFromSelectedExpressionContextAction_Description();
    public static string get_IntroduceVariableFromSelectedExpressionContextAction_Name();
    public static string get_IntroduceTypeAliasContextAction_Name();
    public static string get_IntroduceTypeAliasContextAction_Description();
    public static string get_IntroduceTypeAliasContextAction_Text();
    public static string get_UseTypeAliasContextAction_Name();
    public static string get_UseTypeAliasContextAction_Description();
    public static string get_UseTypeAliasContextAction_Text();
    public static string get_Invert_OperatorConditionContextAction_Description();
    public static string get_Invert_OperatorConditionContextAction_Name();
    public static string get_InvertIfStatementContextAction_Description();
    public static string get_InvertIfStatementContextAction_Name();
    public static string get_InvokeExtensionMethodAsOrdinaryStaticMethodContextAction_Description();
    public static string get_InvokeExtensionMethodAsOrdinaryStaticMethodContextAction_Name();
    public static string get_IterateViaAwaitForeachContextAction_Description();
    public static string get_IterateViaAwaitForeachContextAction_Name();
    public static string get_IterateViaForeachBasedOnLiveTemplateContextAction_Description();
    public static string get_IterateViaForeachBasedOnLiveTemplateContextAction_Name();
    public static string get_IterateViaForeachContextAction_Description();
    public static string get_IterateViaForeachContextAction_Name();
    public static string get_JoinAttributesIntoSingleSectionContextAction_Description();
    public static string get_JoinAttributesIntoSingleSectionContextAction_Name();
    public static string get_JoinLocalVariableDeclarationAndAssignmentContextAction_Description();
    public static string get_JoinLocalVariableDeclarationAndAssignmentContextAction_Name();
    public static string get_JoinNullCheckWithAssignmentContextAction_Description();
    public static string get_JoinNullCheckWithAssignmentContextAction_Name();
    public static string get_JoinStringLiteralsContextAction_Description();
    public static string get_JoinStringLiteralsContextAction_Name();
    public static string get_LiftALocalFunctionClosureToParameterContextAction_Description();
    public static string get_LiftALocalFunctionClosureToParameterContextAction_Name();
    public static string get_MakeMethodPartialContextAction_Description();
    public static string get_MakeMethodPartialContextAction_Name();
    public static string get_MarkStringLiteralAsStringInterpolationContextAction_Description();
    public static string get_MarkStringLiteralAsStringInterpolationContextAction_Name();
    public static string get_MatchFileNameWithTypeNameContextAction_Description();
    public static string get_MatchFileNameWithTypeNameContextAction_Name();
    public static string get_MergeDeconstructedDeclarationContextAction_Description();
    public static string get_MergeDeconstructedDeclarationContextAction_Name();
    public static string get_MergeNestedIfStatementsContextAction_Description();
    public static string get_MergeNestedIfStatementsContextAction_Name();
    public static string get_MergePartialMethodDeclarationsContextAction_Description();
    public static string get_MergePartialMethodDeclarationsContextAction_Name();
    public static string get_MergePartialTypeDeclarationsContextAction_Description();
    public static string get_MergePartialTypeDeclarationsContextAction_Name();
    public static string get_MergeSequentialChecksIntoNullPropagatingExpressionContextAction_Description();
    public static string get_MergeSequentialChecksIntoNullPropagatingExpressionContextAction_Name();
    public static string get_MergeSequentialNullPatternChecksIntoSinglePatternCheckContextAction_Description();
    public static string get_MergeSequentialNullPatternChecksIntoSinglePatternCheckContextAction_Name();
    public static string get_SplitVarPatternContextAction_Description();
    public static string get_SplitVarPatternContextAction_Name();
    public static string get_MigrateToNullableEnableContextAction_Description();
    public static string get_MigrateToNullableEnableContextAction_Name();
    public static string get_MoveAssignmentInConstructorToInitializerContextAction_Description();
    public static string get_MoveAssignmentInConstructorToInitializerContextAction_Name();
    public static string get_MoveDeclarationSToAnotherTypePartContextAction_Description();
    public static string get_MoveDeclarationSToAnotherTypePartContextAction_Name();
    public static string get_MoveInitializationToConstructorSContextAction_Description();
    public static string get_MoveInitializationToConstructorSContextAction_Name();
    public static string get_MoveTypeToAnotherFileToMatchItsNameContextAction_Description();
    public static string get_MoveTypeToAnotherFileToMatchItsNameContextAction_Name();
    public static string get_NegateLogicalExpressionContextAction_Description();
    public static string get_NegateLogicalExpressionContextAction_Name();
    public static string get_OverrideVirtualMemberContextAction_Description();
    public static string get_OverrideVirtualMemberContextAction_Name();
    public static string get_PullExpressionFromVariableInitializerContextAction_Description();
    public static string get_PullExpressionFromVariableInitializerContextAction_Name();
    public static string get_PushExpressionToVariableInitializerContextAction_Description();
    public static string get_PushExpressionToVariableInitializerContextAction_Name();
    public static string get_QualifyStaticMembersImportedViaUsingStaticDirectiveContextAction_Description();
    public static string get_QualifyStaticMembersImportedViaUsingStaticDirectiveContextAction_Name();
    public static string get_RemoveArgumentNameContextAction_Description();
    public static string get_RemoveArgumentNameContextAction_Name();
    public static string get_RemoveBracesContextAction_Description();
    public static string get_RemoveBracesContextAction_Name();
    public static string get_RemoveDigitSeparatorsFromNumericLiteralContextAction_Description();
    public static string get_RemoveDigitSeparatorsFromNumericLiteralContextAction_Name();
    public static string get_RemoveRedundantParenthesisContextAction_Description();
    public static string get_RemoveRedundantParenthesisContextAction_Name();
    public static string get_RemoveStringFormattingMethodArgumentContextAction_Description();
    public static string get_RemoveStringFormattingMethodArgumentContextAction_Name();
    public static string get_RemoveSwitchConditionComponentContextAction_Description();
    public static string get_RemoveSwitchConditionComponentContextAction_Name();
    public static string get_RemoveTupleComponentNameContextAction_Description();
    public static string get_RemoveTupleComponentNameContextAction_Name();
    public static string get_Replace_ConditionalOperatorWithNullPropagatingExpressionContextAction_Description();
    public static string get_Replace_ConditionalOperatorWithNullPropagatingExpressionContextAction_Name();
    public static string get_ReplaceArrayInitializerWithExpressionContextAction_Description();
    public static string get_ReplaceArrayInitializerWithExpressionContextAction_Name();
    public static string get_ReplaceAutoImplementedPropertyAccessorWithExplicitlyImplementedAccessorContextAction_Description();
    public static string get_ReplaceAutoImplementedPropertyAccessorWithExplicitlyImplementedAccessorContextAction_Name();
    public static string get_ReplaceAutoPropertyWithPropertyAndBackingFieldContextAction_Description();
    public static string get_ReplaceAutoPropertyWithPropertyAndBackingFieldContextAction_Name();
    public static string get_ReplaceAutoPropertyWithPropertyAndFieldKeywordContextAction_Description();
    public static string get_ReplaceAutoPropertyWithPropertyAndFieldKeywordContextAction_Name();
    public static string get_ReplaceCastExpressionWithSafeAsCastContextAction_Description();
    public static string get_ReplaceCastExpressionWithSafeAsCastContextAction_Name();
    public static string get_ReplaceConditionalAccessExpressionWithUnconditionalAccessContextAction_Description();
    public static string get_ReplaceConditionalAccessExpressionWithUnconditionalAccessContextAction_Name();
    public static string get_ReplaceExplicitTypeSpecificationWithVarContextAction_Description();
    public static string get_ReplaceExplicitTypeSpecificationWithVarContextAction_Name();
    public static string get_ReplaceFieldKeywordWithExplicitFieldDeclarationContextAction_Description();
    public static string get_ReplaceFieldKeywordWithExplicitFieldDeclarationContextAction_Name();
    public static string get_ReplaceIfStatementWithNullPropagationContextAction_Description();
    public static string get_ReplaceIfStatementWithNullPropagationContextAction_Name();
    public static string get_ReplaceLogicalExpressionWithEqualExpressionContextAction_Description();
    public static string get_ReplaceLogicalExpressionWithEqualExpressionContextAction_Name();
    public static string get_ReplaceMemberAccessWithConditionalAccessExpressionContextAction_Description();
    public static string get_ReplaceMemberAccessWithConditionalAccessExpressionContextAction_Name();
    public static string get_ReplaceNullPropagatingExpressionWith_ConditionalOperatorContextAction_Description();
    public static string get_ReplaceNullPropagatingExpressionWith_ConditionalOperatorContextAction_Name();
    public static string get_ReplaceNullPropagatingExpressionWithIfStatementContextAction_Description();
    public static string get_ReplaceNullPropagatingExpressionWithIfStatementContextAction_Name();
    public static string get_ReplacePropertyWithBackingFieldWithAutoPropertyContextAction_Description();
    public static string get_ReplacePropertyWithBackingFieldWithAutoPropertyContextAction_Name();
    public static string get_ReplaceSafeAsCastExpressionWithRegularCastContextAction_Description();
    public static string get_ReplaceSafeAsCastExpressionWithRegularCastContextAction_Name();
    public static string get_ReplaceSeparateDeconstructionDeclarationsWithSingleDeclarationContextAction_Description();
    public static string get_ReplaceSeparateDeconstructionDeclarationsWithSingleDeclarationContextAction_Name();
    public static string get_ReplaceVarWithExplicitTypeDeclarationContextAction_Description();
    public static string get_ReplaceVarWithExplicitTypeDeclarationContextAction_Name();
    public static string get_ReverseAssignmentStatementContextAction_Description();
    public static string get_ReverseAssignmentStatementContextAction_Name();
    public static string get_ReverseForLoopStatementContextAction_Description();
    public static string get_ReverseForLoopStatementContextAction_Name();
    public static string get_SetProjectConfigureAwaitAnalysisModeContextAction_Description();
    public static string get_SetProjectConfigureAwaitAnalysisModeContextAction_Name();
    public static string get_SetProjectLanguageLevelContextAction_Description();
    public static string get_SetProjectLanguageLevelContextAction_Name();
    public static string get_SpecifyArrayTypeExplicitlyContextAction_Description();
    public static string get_SpecifyArrayTypeExplicitlyContextAction_Name();
    public static string get_SpecifyCreatedTypeContextAction_Description();
    public static string get_SpecifyCreatedTypeContextAction_Name();
    public static string get_SpecifyEnumMemberValuesContextAction_Description();
    public static string get_SpecifyEnumMemberValuesContextAction_Name();
    public static string get_SplitAndPatternsIntoMultipleIsExpressionsOrGuardExpressionContextAction_Description();
    public static string get_SplitAndPatternsIntoMultipleIsExpressionsOrGuardExpressionContextAction_Name();
    public static string get_SplitAttributesIntoSeparateSectionsContextAction_Description();
    public static string get_SplitAttributesIntoSeparateSectionsContextAction_Name();
    public static string get_SplitDeclarationListContextAction_Description();
    public static string get_SplitDeclarationListContextAction_Name();
    public static string get_SplitGuardClauseWithConditionIntoTwoCaseLabelsWithGuardClausesContextAction_Description();
    public static string get_SplitGuardClauseWithConditionIntoTwoCaseLabelsWithGuardClausesContextAction_Name();
    public static string get_SplitIntoNestedPatternsContextAction_Description();
    public static string get_SplitIntoNestedPatternsContextAction_Name();
    public static string get_MovesVariableDeclarationToOuterScope_ContextAction_Description();
    public static string get_SplitLocalVariableDeclarationAndInitializationContextAction_Description();
    public static string get_SplitLocalVariableDeclarationAndInitializationContextAction_Name();
    public static string get_SplitNullPropagatingExpressionIntoSequentialChecksContextAction_Description();
    public static string get_SplitNullPropagatingExpressionIntoSequentialChecksContextAction_Name();
    public static string get_SplitOrPatternsIntoMultipleIsExpressionsOrSwitchCasesContextAction_Description();
    public static string get_SplitOrPatternsIntoMultipleIsExpressionsOrSwitchCasesContextAction_Name();
    public static string get_SplitRecursivePatternIntoSeveralConsecutiveChecksContextAction_Description();
    public static string get_SplitListPatternIntoSeveralConsecutiveChecksContextAction_Description();
    public static string get_SplitRecursivePatternIntoSeveralConsecutiveChecksContextAction_Name();
    public static string get_SplitListPatternIntoSeveralConsecutiveChecksContextAction_Name();
    public static string get_SplitStringLiteralContextAction_Description();
    public static string get_SplitStringLiteralContextAction_Name();
    public static string get_SplitTupleAssignmentIntoSeparateAssignmentStatementsContextAction_Description();
    public static string get_SplitTupleAssignmentIntoSeparateAssignmentStatementsContextAction_Name();
    public static string get_SurroundStringLiteralWithStringFormatCallContextAction_Description();
    public static string get_SurroundStringLiteralWithStringFormatCallContextAction_Name();
    public static string get_SurroundWith_ContextAction_Description();
    public static string get_SurroundWith_ContextAction_Name();
    public static string get_ToBlockScopedNamespaceContextAction_Description();
    public static string get_ToBlockScopedNamespaceContextAction_Name();
    public static string get_ToExplicitProgramClassContextAction_Description();
    public static string get_ToExplicitProgramClassContextAction_Name();
    public static string get_ToFileScopedNamespaceContextAction_Description();
    public static string get_ToFileScopedNamespaceContextAction_Name();
    public static string get_ToLINQToXMLContextAction_Description();
    public static string get_ToLINQToXMLContextAction_Name();
    public static string get_ToNamedPropertyPatternsContextAction_Description();
    public static string get_ToNamedPropertyPatternsContextAction_Name();
    public static string get_ToPropertyWithINotifyPropertyChangedChangeNotificationContextAction_Description();
    public static string get_ToPropertyWithINotifyPropertyChangedChangeNotificationContextAction_Name();
    public static string get_TransformParametersContextAction_Description();
    public static string get_TransformParametersContextAction_Name();
    public static string get_UncommentContextAction_Description();
    public static string get_UncommentContextAction_Name();
    public static string get_UseConfigureAwaitFalseCallContextAction_Description();
    public static string get_UseConfigureAwaitFalseCallContextAction_Name();
    public static string get_UseExplicitDiscardDeclarationContextAction_Description();
    public static string get_UseExplicitDiscardDeclarationContextAction_Name();
    public static string get_UseExplicitOrImplicitTupleComponentNameContextAction_Description();
    public static string get_UseExplicitOrImplicitTupleComponentNameContextAction_Name();
    public static string get_UseFormatStringContextAction_Description();
    public static string get_UseFormatStringContextAction_Name();
    public static string get_UseImplicitDiscardDeclarationContextAction_Description();
    public static string get_UseImplicitDiscardDeclarationContextAction_Name();
    public static string get_UseNameofExpressionToCaptureNameOfEntityContextAction_Description();
    public static string get_UseNameofExpressionToCaptureNameOfEntityContextAction_Name();
    public static string get_UseObjectCollectionInitializerInsteadOfAssignmentsAddMethodCallsContextAction_Description();
    public static string get_UseObjectCollectionInitializerInsteadOfAssignmentsAddMethodCallsContextAction_Name();
    public static string get_ConvertToCollectionInitializer_Description();
    public static string get_ConvertToCollectionInitializer_Name();
    public static string get_ConvertToArrayCreationExpression_Description();
    public static string get_ConvertToArrayCreationExpression_Name();
    public static string get_UsePositionalDeconstructionPatternContextAction_Description();
    public static string get_UsePositionalDeconstructionPatternContextAction_Name();
    public static string get_UseSeparateDeclarationsInDeconstructionDeclarationPatternsContextAction_Description();
    public static string get_UseSeparateDeclarationsInDeconstructionDeclarationPatternsContextAction_Name();
    public static string get_UseSpan_T_ForStackAllocatedVariableContextAction_Description();
    public static string get_UseSpan_T_ForStackAllocatedVariableContextAction_Name();
    public static string get_UseStringInterpolationContextAction_Description();
    public static string get_UseStringInterpolationContextAction_Name();
    public static string get_UseTargetTypedNewContextAction_Description();
    public static string get_UseTargetTypedNewContextAction_Name();
    public static string get_EqualityOperatorToReferenceEquals_Name();
    public static string get_EqualityOperatorToReferenceEquals_Description();
    public static string get_ConvertEqOperatorToEqualsContentAction_Name();
    public static string get_ConvertEqOperatorToEqualsContentAction_Description();
    public static string get_ConvertEqualsMethodCallIntoContentAction_Description();
    public static string get_ConvertEqualsMethodCallIntoContentAction_Name();
    public static string get_ConvertForEachMethodCallToForeachStatementContentAction_Description();
    public static string get_ConvertForEachMethodCallToForeachStatementContentAction_Name();
    public static string get_ConvertReferenceEqualsMethodCallIntoContentAction_Description();
    public static string get_ConvertReferenceEqualsMethodCallIntoContentAction_Name();
    public static string get_EnableEnforceBracesInDoWhileStatementInspectionContentAction_Description();
    public static string get_EnableEnforceBracesInDoWhileStatementInspectionContentAction_Name();
    public static string get_EnableEnforceBracesInIfStatementInspectionContentAction_Description();
    public static string get_EnableEnforceBracesInIfStatementInspectionContentAction_Name();
    public static string get_FlipOperatorArgumentsContentAction_Description();
    public static string get_FlipOperatorArgumentsContentAction_Name();
    public static string get_FullyQualifyReferenceToTypeStaticMemberOrNamespaceContentAction_Description();
    public static string get_FullyQualifyReferenceToTypeStaticMemberOrNamespaceContentAction_Name();
    public static string get_InsertDigitSeparatorsInIntegerLiteralContentAction_Description();
    public static string get_InsertDigitSeparatorsInIntegerLiteralContentAction_Name();
    public static string get_MoveLocalVariableConstantOrFunctionDeclarationToOuterScopeContentAction_Description();
    public static string get_MoveLocalVariableConstantOrFunctionDeclarationToOuterScopeContentAction_Name();
    public static string get_PassStringFormatMethodInvocationContentAction_Description();
    public static string get_PassStringFormatMethodInvocationContentAction_Name();
    public static string get_PassStringInterpolationExpressionContentAction_Description();
    public static string get_PassStringInterpolationExpressionContentAction_Name();
    public static string get_RemoveRegionContentAction_Description();
    public static string get_RemoveRegionContentAction_Name();
    public static string get_ReplaceIfNotNullXContentAction_Description();
    public static string get_ReplaceIfNotNullXContentAction_Name();
    public static string get_SplitIfWithConditionIntoNestedIfStatementsContentAction_Description();
    public static string get_SplitIfWithConditionIntoNestedIfStatementsContentAction_Name();
    public static string get_SplitIfWithConditionIntoTwoIfStatementsContentAction_Description();
    public static string get_SplitIfWithConditionIntoTwoIfStatementsContentAction_Name();
    public static string get_SplitReturnStatementOfBooleanValueToIfStatementContentAction_Description();
    public static string get_SplitReturnStatementOfBooleanValueToIfStatementContentAction_Name();
    public static string get_SplitReturnWithConditionIntoGuardingIfAndReturnContentAction_Description();
    public static string get_SplitReturnWithConditionIntoGuardingIfAndReturnContentAction_Name();
    public static string get_SplitValueReturnWithConditionIntoIfAndReturnStatementsContentAction_Description();
    public static string get_SplitValueReturnWithConditionIntoIfAndReturnStatementsContentAction_Name();
    public static string get_ToAbstractVirtualNonAbstractNonVirtualMemberContentAction_Description();
    public static string get_ToAbstractVirtualNonAbstractNonVirtualMemberContentAction_Name();
    public static string get_UseAsAndCheckForNullContentAction_Description();
    public static string get_UseAsAndCheckForNullContentAction_Name();
    public static string get_UseSystemEnvironmentNewLineValueContentAction_Description();
    public static string get_UseSystemEnvironmentNewLineValueContentAction_Name();
    public static string get_UseSystemStringEmptyValueContentAction_Description();
    public static string get_UseSystemStringEmptyValueContentAction_Name();
    public static string get_UseVarSyntaxForDeconstructingDeclarationsWithMultipleVariablesContentAction_Description();
    public static string get_UseVarSyntaxForDeconstructingDeclarationsWithMultipleVariablesContentAction_Name();
    public static string get_FixTypeAccessibility__Text();
    public static string get_ReplaceWithAccessExpression_Text();
    public static string get_ReplaceTrivialRecursivePatternWithA_Text();
    public static string get_DeconstructParameterInto_Text();
    public static string get_DeconstructVariableInto_Text();
    public static string get_ConvertInitializerToAssignment_Text();
    public static string get_ConvertInitializerToStatement_Text();
    public static string get_Cast_OperandTo__Text();
    public static string get_RemoveEmptyRegion_Text();
    public static string get_RemoveEmptyRegions_Text();
    public static string get_Disable_Syntax_Style_For_Native_Numeric();
    public static string get_Enable_Syntax_Style_For_Native_Numeric();
    public static string get_UseUnsignedRightShiftOperator_Text();
    public static string get_ReplaceSequenceEqualWithConstantPattern_Text();
    public static string get_ReplaceWithStringContentCheck_Text();
    public static string get_ExtractCommonPropertyPattern_Text();
    public static string get_AllAutoProperties_Text();
    public static string get_AllFieldsInDeclaration_Text();
    public static string get_AllInputParameters_Text();
    public static string get_All_Parameters_Text();
    public static string get_AllReadonlyFields_Text();
    public static string get_AllFields_Text();
    public static string get_Inferred_Text();
    public static string get_Inherited_Text();
    public static string get_Conflicting_Text();
    public static string get_Implicit_Text();
    public static string get_Classes_Text();
    public static string get_Records_Text();
    public static string get_Types_Text();
    public static string get_Bytes_Text();
    public static string get_SixteenBitWords_Text();
    public static string get_Thousands_Text();
    public static string get_Separate__Text();
    public static string get_VariableDeclarationWithInitialization_Text();
    public static string get_ConstantDeclaration_Text();
    public static string get_LocalFunctionDeclaration_Text();
    public static string get_DeconstructingDeclaration_Text();
    public static string get_ConstantDeclarations_Text();
    public static string get_VariableDeclarationsWithInitalization_Text();
    public static string get_VariableDeclarationWithInitalization_Text();
    public static string get_Move_ToOuterScope_Text();
    public static string get__For__Text();
    public static string get__For_InInterface_Text();
    public static string get__For_InBase_Text();
    public static string get_SafelyCast_to__Text();
    public static string get_Cast_to__Text();
    public static string get_InheritFrom_Text();
    public static string get_Implement_Text();
    public static string get_RemoveArgumentKind_Text();
    public static string get_AddParameterKind_Text();
    public static string get__In1stArgument_Text();
    public static string get__In2ndArgument_Text();
    public static string get__In3dArgument_Text();
    public static string get__In_thArgument_Text();
    public static string get_ChangeTypeOfParameterOfCalled_To__Text();
    public static string get__AndPull_Text();
    public static string get_UseAutomaticStructLayout_Text();
    public static string get_ImportNamespace__Text();
    public static string get_UseMethod__Text();
    public static string get_ImportMethodFrom__Text();
    public static string get_AssignDefaultValuesTo_Text();
    public static string get_AssignDefaultValueTo_Text();
    public static string get_AllowNullableTypesIn__Of___Text();
    public static string get_Change_To__Text();
    public static string get_ChangeRecord_TypeToClass_Text();
    public static string get_ChangeClass_TypeToRecord_Text();
    public static string get_ChangeBaseRecord_TypeToClass_Text();
    public static string get_ChangeBaseClass_TypeToRecord_Text();
    public static string get_Use__From__Text();
    public static string get_Use___Text();
    public static string get_AddExplicitLabelsFor_ToDefaultSection_Text();
    public static string get_AddEmptySwitchSectionsFor__Text();
    public static string get_ReturnByReadonlyReference_Text();
    public static string get_MakeFieldAndStruct_NonReadonly_Text();
    public static string get_MakeFieldAndContainingMemberNonReadonly_Text();
    public static string get_MakeFieldAndContainingAccessorNonReadonly_Text();
    public static string get_MakeFieldAndContainingStructNonReadonly_Text();
    public static string get_InThisInvocation_Text();
    public static string get_NavigateToDbContextPropertyActionNPlusOneText();
    public static string get_NavigateToDbContextPropertyActionIncompleteDataText();
    public static string get_NavigateToDbContextPropertyActionCaptionUsages();
    public static string get_LoadRelationsFix();
    public static string get_LoadRelationsAllPathsFix();
    public static string get_NavigateToDbContextQueryActionNPlusOneText();
    public static string get_NavigateToDbContextQueryActionIncompleteDataText();
    public static string get_LoadRelationsSomePathsFix();
    public static string get_OpenDocumentationUrlText();
    public static string get_OverrideInDerived__Text();
    public static string get_RemoveScopedKeyword_Text();
    public static string get_ConvertIntoListPattern_Name();
    public static string get_ConvertIntoListPattern_Description();
    public static string get_ConvertIntoListPattern_Text();
    public static string get_UseStandaloneDiscard_Text();
    public static string get_Make_Of___Text();
    public static string get_NonNullable_Text();
    public static string get_Nullable_Text();
    public static string get_ReturnType_Text();
    public static string get_Type_Text();
    public static string get_RemoveRedundantNullableDirective_Text();
    public static string get_RemoveRedundantNullableDirective_ScopedText();
    public static string get_MoveLocalFunctionToTheEndOfAScopeFix_Text();
    public static string get_MoveLocalFunctionToTheEndOfAScopeFix_ScopedText();
    public static string get_MoveLocalFunctionToTheEndOfAScopeWithoutJump_Text();
    public static string get_RemoveUnusedNullableDirective_Text();
    public static string get_RemoveUnusedNullableDirective_ScopedText();
    public static string get_CopyValueOfPrimaryParameterToLocalVariable_Text();
    public static string get_MoveLocalFunctionToTheEndOfAScopeWithoutJump_BlockText();
    public static string get_MoveLocalFunctionToTheEndOfAScopeWithoutJump_ScopeText();
    public static string get_MoveLocalFunctionToTheEndOfAScopeAction_Name();
    public static string get_MoveLocalFunctionToTheEndOfAScopeAction_Description();
    public static string get_NavigateToDbContextPropertyActionCaptionExpressions();
    public static string get_SpecifyFieldOffset_Text();
    public static string get_DisableDbContextQueryInspectionsAction_Text();
    public static string get_RenameAllUnderscoreParameter_Text();
    public static string get_MakeItDiscard_Text();
    public static string get_Rename__Text();
    public static string get_NoAliasUsagesFoundToInline_Text();
    public static string get_SearchingForAliasUsagesInFile___Text();
    public static string get_Of___Text();
    public static string get_InsertPragmaWarningDescriptionAction_Text();
    public static string get_InsertPragmaWarningDescriptionAction_Name();
    public static string get_InsertPragmaWarningDescriptionAction_Description();
    public static string get_SimplifyConstructors_Text();
    public static string get_Make__Required_Text();
    public static string get_MakeAllUninitializedMembersRequired_Text();
    public static string get_SplitFluentApiUnchainAction_Text();
    public static string get_SplitFluentApiUnchainAction_Name();
    public static string get_SplitFluentApiUnchainAction_Description();
    public static string get_SplitFluentApiDivisionAction_Text();
    public static string get_SplitFluentApiDivisionAction_Name();
    public static string get_SplitFluentApiDivisionAction_Description();
    public static string get_FixModifiersOrderInUsingDirective_Text();
    public static string get_UseToArray_Text();
    public static string get_RegisterHighlightingType_Text();
    public static string get_RegisterHighlightingType_ScopedText();
    public static string get_RemoveRedundantHighlightingType_Text();
    public static string get_RemoveRedundantHighlightingType_ScopedText();
    public static string get_AddHighlightingSourceAttribute_Text();
    public static string get_AddNonHighlightingSourceAttribute_Text();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Intentions.CSharp.Util.CSharpChangeTypeHelper : ChangeTypeHelper {
    protected virtual bool CheckKind(IDeclaredElement element);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Intentions.CSharp.Util.CSharpCommentCodeHelper : object {
    public sealed virtual bool CanCommentDeclaration(IDeclaration declaration);
    public sealed virtual Action CommentDeclaration(IDeclaration declaration);
    public sealed virtual Action CommentTextRange(IFile file, DocumentRange range);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Intentions.CSharp.Util.CSharpSetBodyUtil : SetBodyUtil {
    public virtual void SetBody(IFunctionDeclaration destination, ITreeNode body);
    protected virtual IFunctionDeclaration EnsureAccessor(ITypeMemberDeclaration destination, AccessorKind kind);
}
public static class JetBrains.ReSharper.Intentions.CSharp.Util.EqualsUtil : object {
    [CanBeNullAttribute]
public static IMethod GetStaticEqualsMethod(ITreeNode context);
    [CanBeNullAttribute]
public static IMethod GetStaticReferenceEqualsMethod(ITreeNode context);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.CSharp.Util.IfSquashingUtil : object {
    [NullableContextAttribute("1")]
public static void RemoveStatementAndSquashIfNeed(IIfStatement ifStatement, ICSharpStatement statementToDelete, ICSharpExpression lastConditionPart, IInvocationExpression lastConditionInvocationExpression, bool allowMovingLastConjunctInsideThen);
    private static bool ContainsAnythingExcept(ICSharpStatement statement, ITreeNode nodeToIgnore);
    private static bool ContainsExecutableCodeExcept(ICSharpStatement statement, ITreeNode nodeToIgnore);
    [CompilerGeneratedAttribute]
internal static void <RemoveStatementAndSquashIfNeed>g__RemoveStatement|0_0(<>c__DisplayClass0_0& );
}
public static class JetBrains.ReSharper.Intentions.CSharp.Util.LiftLocalFunctionClosureHelper : object {
    [NotNullAttribute]
public static ILocalFunctionDeclaration GetContainingStaticLocalFunction(ITreeNode closureNode);
    [NotNullAttribute]
public static IBulbActionCommand LiftLocalFunctionClosureToParameter(ILocalFunctionDeclaration localFunctionDeclaration, ITypeOwner typeOwner, IProgressIndicator progress);
    [NotNullAttribute]
public static IBulbActionCommand LiftThisClosureToParameter(ILocalFunctionDeclaration localFunctionDeclaration, IProgressIndicator progress);
    [NotNullAttribute]
public static IBulbActionCommand LiftAllClosuresToParameters(ILocalFunctionDeclaration localFunctionDeclaration, IProgressIndicator progress);
    [NotNullAttribute]
[ItemNotNullAttribute]
private static IReadOnlyList`1<ICSharpExpression> FindExpressionReferringToThis(ILocalFunctionDeclaration declaration);
    [CanBeNullAttribute]
private static Func`1<HotspotInfo> AddParameter(ILocalFunctionDeclaration localFunctionDeclaration, ICSharpExpression argumentExpression, ParameterKind parameterKind, INamesSuggestion namesSuggestion, IType parameterType, IReadOnlyList`1<IType> attributes, Func`2<IParameter, IReadOnlyList`1<IReference>> bindParameterUsages, IProgressIndicator progress);
    [CanBeNullAttribute]
private static Func`1<HotspotInfo> CreateParameterNameHotspot(IParameter newParameter, IReadOnlyList`1<ICSharpIdentifier> recursiveCallsArguments, IReadOnlyList`1<IReference> nonQualifiedReferences, INamesSuggestion namesSuggestion);
    [CanBeNullAttribute]
private static ICSharpParameterDeclaration FindAnchorParameter(ILocalFunctionDeclaration localFunctionDeclaration);
    [NotNullAttribute]
[ItemNotNullAttribute]
private static IReadOnlyList`1<IReference> BindThisClosuresToParameter(CSharpElementFactory factory, IEnumerable`1<ICSharpExpression> targetExpressions, IParameter thisParameter);
    [NotNullAttribute]
private static INamesSuggestion GetThisParameterNameSuggestion(ILocalFunctionDeclaration localFunctionDeclaration, IDeclaredType containingType);
    [NotNullAttribute]
private static INamesSuggestion SuggestLiftedParameterName(ILocalFunctionDeclaration targetDeclaration, IDeclaredElement closureElement);
    [NotNullAttribute]
[ItemNotNullAttribute]
private static List`1<IReference> FindReferencesInLocalFunction(ILocalFunctionDeclaration localFunctionDeclaration, IDeclaredElement closureElement, IProgressIndicator progress);
    [NotNullAttribute]
private static IBulbActionCommand CreateParameterRenameHotspots(Func`1[] hotspotBuilders);
    [NotNullAttribute]
[ItemNotNullAttribute]
private static IReadOnlyList`1<IReference> BindParameterUsages(IEnumerable`1<IReference> references, IParameter newParameter);
    [NotNullAttribute]
private static OneToSetMap`2<ITypeOwner, IReference> FindAllLocalClosures(ILocalFunctionDeclaration localFunctionDeclaration, Boolean& hasOuterNonStaticLocalFunctionCalls);
}
public class JetBrains.ReSharper.Intentions.CSharp.Util.NullableReferenceTypeConstraintsUtil : object {
    public static void AddMissingConstraintsOnOverrideOrExplicitImplementation(IType type);
}
public class JetBrains.ReSharper.Intentions.CSharp.Util.NullableWarningUtil : object {
    [NullableContextAttribute("2")]
[PureAttribute]
public static bool IsCastToNonNullableType(ICSharpTreeNode treeNode);
}
internal static class JetBrains.ReSharper.Intentions.CSharp.Util.PsiUtil : object {
    public static ICSharpTreeNode GetBody(ICSharpExpression anonymousOrLambda);
    [CanBeNullAttribute]
[PureAttribute]
public static ILoopStatement FindContainingLoop(ITreeNode element);
    [CanBeNullAttribute]
public static TExpression Cast(ICSharpExpression condition);
    public static bool CheckQualifiersAndSelfAreReferenceExpressions(IExpression possibleReferenceExpression);
    [CanBeNullAttribute]
public static ICSharpStatement FindLoopWhereHeaderContains(ICSharpTreeNode expression);
    [CanBeNullAttribute]
public static IType CalculateCommonReturnType(ITreeNode node);
    [CanBeNullAttribute]
public static ICSharpTreeNode GetExpressionDependencyRoot(ICSharpTreeNode node);
    [CanBeNullAttribute]
public static ICSharpTreeNode GetStatementDependencyRoot(ICSharpTreeNode node);
}
public static class JetBrains.ReSharper.Intentions.CSharp.Util.StringInterpolationToFormatUtil : object {
    public static bool CanReplaceWithStringFormat(IInterpolatedStringExpression interpolatedExpression);
    [NotNullAttribute]
public static IInvocationExpression ReplaceWithStringFormat(IInterpolatedStringExpression interpolatedExpression);
    [CanBeNullAttribute]
private static IMethod GetFormatMethodElement(IInterpolatedStringExpression interpolatedStringExpression);
    [NotNullAttribute]
public static string GetFormatString(IInterpolatedStringExpression interpolatedExpression);
    [NotNullAttribute]
private static IInvocationExpression CreateFormatExpression(IInterpolatedStringExpression interpolatedExpression, string formatString, IDeclaredElement formatMethodDeclaration);
    private static void AppendAlignment(ICSharpExpression alignmentExpression, IStringInterpolationBuilder formatStringBuilder);
    [NotNullAttribute]
private static string GetFormatSpecifier(ITokenNode formatSpecifier);
    private static void RemoveEmptyArguments(IInterpolatedStringExpression interpolatedExpression, ICSharpArgumentsOwner insertedExpression);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Intentions.CSharp.WinRTQuickFixRegistration : object {
    public IEnumerable`1<Type> Dependencies { get; }
    public sealed virtual IEnumerable`1<Type> get_Dependencies();
    public sealed virtual void Register(IQuickFixesRegistrar table);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Intentions.CSharp.ZoneMarker : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
