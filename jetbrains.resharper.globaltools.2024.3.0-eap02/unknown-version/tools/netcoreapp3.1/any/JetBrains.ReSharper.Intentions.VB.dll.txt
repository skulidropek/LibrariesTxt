[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.VB.ContextActions.AddOtherAccessorsAction : ModernContextActionBase {
    private IVBContextActionDataProvider myProvider;
    public string Text { get; }
    public AddOtherAccessorsAction(IVBContextActionDataProvider dataProvider);
    private IEventDeclaration FindEventDeclaration();
    private IPropertyDeclaration FindPropertyDeclaration();
    public virtual bool IsAvailable(IUserDataHolder cache);
    public virtual string get_Text();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static bool IsLValue(IVBExpression expression);
    private IBlock CommonBody(IBlock body, AccessorKind kind);
    private static bool MatchValueVariable(IVBExpression expression);
}
internal class JetBrains.ReSharper.Intentions.VB.ContextActions.AnnotationsUtils : object {
    public static void RemoveExistingAttributes(IAttributesOwnerDeclaration attributesOwnerDeclaration, CodeAnnotationsCache codeAnnotationsCache);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.VB.ContextActions.AutomaticToBackingFieldAction : ContextActionBase {
    private IVBContextActionDataProvider myProvider;
    public string Text { get; }
    public AutomaticToBackingFieldAction(IVBContextActionDataProvider provider);
    public virtual string get_Text();
    public static string GetText();
    public virtual bool IsAvailable(IUserDataHolder cache);
    private IPropertyDeclaration FindPropertyDeclaration();
    public static bool IsAvailable(IPropertyDeclaration declaration);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public static IVariableDeclaration Execute(IPropertyDeclaration propertyDeclaration);
    public static IVariableDeclaration Execute(IPropertyDeclaration propertyDeclaration, Action`2<IPropertyDeclaration, IField> acessorsCreator);
    private static void CreateTrivialAccessors(IPropertyDeclaration propertyDeclaration, IField field);
    public static void PostExecute(IPropertyDeclaration propertyDeclaration, IVariableDeclaration fieldDeclaration, ISolution solution, ITextControl textControl);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.VB.ContextActions.ChangeModifierAction : object {
    [NotNullAttribute]
private IVBContextActionDataProvider myDataProvider;
    [NotNullAttribute]
private List`1<IBulbAction> myActions;
    private static NodeTypeSet ourModifiers;
    private static ChangeModifierAction();
    public ChangeModifierAction(IVBContextActionDataProvider dataProvider);
    public sealed virtual override bool IsAvailable(IUserDataHolder cache);
    public sealed virtual override IEnumerable`1<IntentionAction> CreateBulbItems();
    private IModifiersListOwner FindModifiersListOwner(IList`1& allNodes);
    private static IModifiersOwnerDeclaration GetModifiersOwnerDeclaration(IModifiersListOwner modifiersListOwner);
    private static bool IsUnsupportedAccessor(IAccessorDeclaration accessorDeclaration);
    private static bool HasBaseMembers(IModifiersListOwner modifiersListOwnerNode);
    private bool GetContextKind(IModifiersListOwner modifiersListOwnerNode, ModifierPlaces& place);
    [CanBeNullAttribute]
private static AccessRights[] GetCandidates(IAccessorDeclaration accessorDeclaration, AccessRights ownerAccessRights);
    private static AccessRights GetAccessorRights(IAccessorDeclaration accessorDeclaration);
    private void ComputeAvailableItems(AccessRights accessRights, ModifierPlaces place, AccessRights[] candidates);
    private void AppendAction(AccessRights[] candidates, AccessRights accessRights);
    private static bool Contains(AccessRights[] candidates, AccessRights accessRights);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.VB.ContextActions.ConvertStringLiteralToInterpolationAction : ClrConvertStringLiteralToInterpolationAction {
    private IVBContextActionDataProvider myProvider;
    public ConvertStringLiteralToInterpolationAction(IVBContextActionDataProvider dataProvider);
    protected virtual bool IsAvailableInternal(ILiteralExpression literalExpression);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
internal class JetBrains.ReSharper.Intentions.VB.ContextActions.CreateFromUsage.Util.AccessRightsCalculatorVB : AccessRightsCalculator {
    protected virtual ITypeMemberDeclaration GetSourceMemberDeclaration(ITreeNode sourceElement);
    public virtual bool CheckStaticContextQualifierIsStatic(ITypeElement qualifier);
    protected virtual bool SuggestStaticForTypeMemberDeclaration(IReference reference);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.VB.ContextActions.CreateOverloadAction : ModernContextActionBase {
    private IVBContextActionDataProvider myDataProvider;
    public string Text { get; }
    public CreateOverloadAction(IVBContextActionDataProvider dataProvider);
    public virtual bool IsAvailable(IUserDataHolder cache);
    public virtual string get_Text();
    private JetHashSet`1<IRegularParameterDeclaration> GetSelectedDeclarations(IVBParametersOwnerDeclaration declarationWithParameters);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static JetHashSet`1<int> BuildIndices(IVBParametersOwnerDeclaration declaration, JetHashSet`1<IRegularParameterDeclaration> declarations, IRegularParameterDeclaration parameterDeclaration);
    private void CreateMethodDeclaration(IVBParametersOwnerDeclaration copy, IMethodDeclaration methodDeclaration, JetHashSet`1<int> indices, bool returnValue);
    private void CreateConstructorDeclaration(IVBParametersOwnerDeclaration copy, IConstructorDeclaration constructorDeclaration, JetHashSet`1<int> indices);
    private void CreatePropertyDeclaration(IVBParametersOwnerDeclaration copy, IPropertyDeclaration propertyDeclaration, JetHashSet`1<int> indices);
    private void BuildArguments(IBlock block, JetHashSet`1<int> indices, StringBuilder pattern, List`1<object> args, IVBParametersOwnerDeclaration declarationWithParameters, IVBParametersOwnerDeclaration newDeclaration);
    private IVBExpression CreateDefaultValue(IType type);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.VB.ContextActions.ForEachToForAction : ModernContextActionBase {
    [NotNullAttribute]
private IVBContextActionDataProvider myDataProvider;
    public string Text { get; }
    public ForEachToForAction(IVBContextActionDataProvider dataProvider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private void OptionallyBindReferences(IDeclaredElement upperBound, IDeclaredElement lowerBound, IForStatement forStatement);
    private static DocumentRange[] FindRanges(IForStatement statement);
    private static DocumentRange GetArgumentRange(IVBArgument argument);
    private static DocumentRange GetNameRange(IForStatement statement);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.VB.ContextActions.FormatString.AddFormatItemAction : ClrAddFormatItemAction {
    public AddFormatItemAction(IVBContextActionDataProvider dataProvider);
    protected virtual bool IsSelectionRangeValid(IExpression selectedExpression, TextRange textRange);
    protected virtual IExpression GetExpressionThroughParenthesis(IExpression selectedExpression);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.VB.ContextActions.FormatString.AddStringInterpolationArgumentAction : ClrAddStringInterpolationArgumentAction {
    private IVBContextActionDataProvider myDataProvider;
    public AddStringInterpolationArgumentAction(IVBContextActionDataProvider dataProvider);
    protected virtual IBulbActionCommand AddHotspotToInterpolation(IExpression interpolationExpression);
    protected virtual bool IsValidLiteralOffset(ILiteralExpression literal, int offset);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.VB.ContextActions.FormatString.ConvertConcatenationToInterpolationAction : ClrConvertConcatenationToInterpolationAction {
    public ConvertConcatenationToInterpolationAction(IVBContextActionDataProvider dataProvider);
    protected virtual StringVerbatimity GetStringVerbatimity(IExpression expression);
    protected virtual void InsertArgumentExpression(IStringInterpolationBuilder builder, IExpression expression);
    protected virtual Nullable`1<StringVerbatimity> TryGetStringVerbatimity(IExpression expression);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.VB.ContextActions.FormatString.RemoveFormatItemAction : ClrRemoveFormatItemAction {
    public RemoveFormatItemAction(IVBContextActionDataProvider dataProvaider);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.VB.ContextActions.FormatString.SurroundWithFormatAction : ClrSurroundWithFormatAction {
    public SurroundWithFormatAction(IVBContextActionDataProvider dataProvider);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.VB.ContextActions.FormatString.UseFormatStringAction : ClrUseFormatStringAction {
    public UseFormatStringAction(IVBContextActionDataProvider dataProvider);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.VB.ContextActions.FormatString.UseStringInterpolationAction : ClrUseStringInterpolationAction {
    public UseStringInterpolationAction(IVBContextActionDataProvider dataProvider);
    protected virtual bool IsAvailableAtCaretOffset(FormattingFunctionInvocationInfo invocationInfo, TreeTextRange selectedTreeTextRange);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.VB.ContextActions.FunctionToSubAction : ModernContextActionBase {
    [NotNullAttribute]
private IVBContextActionDataProvider myDataProvider;
    public string Text { get; }
    public FunctionToSubAction(IVBContextActionDataProvider dataProvider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.VB.ContextActions.IfToSelectCaseAction : ModernContextActionBase {
    [NotNullAttribute]
private IVBContextActionDataProvider myDataProvider;
    public string Text { get; }
    public IfToSelectCaseAction(IVBContextActionDataProvider dataProvider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    private IBlockIfStatement FindBlockIfStatement();
    private ILineIfStatement FindLineIfStatement();
    private bool IsAvailable(ILineIfStatement lineIfStatement);
    private bool IsAvailable(IBlockIfStatement blockIfStatement);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static void MergeCaseElseStatements(List`1<SwitchSection> switchSections);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.VB.ContextActions.ImplementAbstractMemberAction : ImplementMemberBase {
    private IVBContextActionDataProvider myDataProvider;
    protected IVBContextActionDataProvider DataProvider { get; }
    public string Text { get; }
    protected string SelectPartText { get; }
    protected string GeneratorKind { get; }
    public ImplementAbstractMemberAction(IVBContextActionDataProvider dataProvider);
    protected IVBContextActionDataProvider get_DataProvider();
    private IVBTypeMemberDeclaration FindMemberDeclaration();
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    public sealed virtual override bool IBulbAction_IsAvailable(IUserDataHolder cache);
    public sealed virtual override IEnumerable`1<IntentionAction> CreateBulbItems();
    protected virtual IOverridableMember GetMemberToImplement();
    protected virtual List`1<ITypeElement> GetTargetTypes(IProgressIndicator progress);
    protected virtual string get_SelectPartText();
    protected virtual string get_GeneratorKind();
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.VB.ContextActions.ImplementVirtualMemberAction : ImplementAbstractMemberAction {
    public string Text { get; }
    protected string GeneratorKind { get; }
    protected string SelectPartText { get; }
    public ImplementVirtualMemberAction(IVBContextActionDataProvider dataProvider);
    private IVBTypeMemberDeclaration FindMemberDeclaration();
    public virtual bool IsAvailable(IUserDataHolder cache);
    public virtual string get_Text();
    protected virtual string get_GeneratorKind();
    protected virtual string get_SelectPartText();
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.VB.ContextActions.IntroduceVariableAction : ContextActionBase {
    private IVBContextActionDataProvider myDataProvider;
    public string Text { get; }
    public IntroduceVariableAction(IVBContextActionDataProvider dataProvider);
    private IVBExpression FindExpression();
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [CompilerGeneratedAttribute]
private void _Lambda$__6-0(ITextControl textControl);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.VB.ContextActions.InvertIfAction : ModernContextActionBase {
    [NotNullAttribute]
private IVBContextActionDataProvider myDataProvider;
    public string Text { get; }
    public InvertIfAction(IVBContextActionDataProvider dataProvider);
    private IBlockIfStatement FindBlockIfStatement();
    private ILineIfStatement FindLineIfStatement();
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private void InvertIfElse(IBlockIfStatement blockIfStatement);
    private void InvertIfElse(ILineIfStatement lineIfStatement);
    private void InvertEmptyIf(ILineIfStatement lineIfStatement);
    private void InvertEmptyIf(IBlockIfStatement blockIfStatement);
    private void InvertWithThen(IBlockIfStatement& blockIfStatement, IBlock block, IVBStatementsRange afterIfStatements);
    private IVBStatementsRange GetStatementsAfterIf(IVBStatement ifStatement, IBlock block);
    private static IVBExpression GetSingleReturnValue(IBlock then, IControlFlowGraph graph);
    private bool HasNextFlow(TreeTextRange inIfTreeRange, TreeTextRange afterIfTreeRange, IVBControlFlowGraph graph);
    private static bool IsNullTarget(IControlFlowEdge edge);
    public TreeTextRange MakeTextRange(IVBStatementsRange statements);
    private IStatementType FindStatement(TreeNodeCollection`1<IVBStatement> statements);
    private void InvertIgnoringThen(IVBStatement ifStatement, IVBExpression condition, IBlock block, IVBStatementsRange afterIfStatements);
    private bool NavigatesToLoop(ILoopStatement loop, IVBStatementsRange afterIfStatements, IControlFlowGraph graph);
    private static List`1<IControlFlowEdge> ExitsExceptReturnsAndThrows(ITreeNode statement, IControlFlowGraph graph);
    private static bool InsideLoopExceptFirstStatement(ILoopStatement loop, ITreeNode targetElement);
    private bool NavigatesToExit(IVBStatementsRange afterIfStatements, IControlFlowGraph graph);
    private static IDeclaration GetContainingMethod(ITreeNode node);
    private static bool IsInsideSub(ITreeNode statement);
    private static bool IsInsideIterator(ITreeNode statement);
    private void InvertWithExit(IBlockIfStatement blockIfStatement, IBlock block, string exitKeyword);
    private void InvertWithExit(IBlockIfStatement blockIfStatement, IBlock block, string exitKeyword, IVBExpression expression);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.VB.ContextActions.IterateViaForEachAction : ContextActionBase {
    [NotNullAttribute]
private IVBContextActionDataProvider myDataProvider;
    private static string COLLECTION;
    private static Guid ourTemplateGuid;
    public string Text { get; }
    private static IterateViaForEachAction();
    public IterateViaForEachAction(IVBContextActionDataProvider dataProvider);
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private void TabAction();
    private static Template GetForeachTemplate(IContextBoundSettingsStore settingsStore);
    private IInvocationStatement FindInvocationStatement();
    public virtual string get_Text();
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.VB.ContextActions.JoinDeclarationAction : ModernContextActionBase {
    [NotNullAttribute]
private IVBContextActionDataProvider myDataProvider;
    public string Text { get; }
    public JoinDeclarationAction(IVBContextActionDataProvider dataProvider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    private IAssignmentStatement FindAssignmentStatement();
    private ILocalVariableDeclaration FindLocalDeclaration();
    private static IBlock FindBlockByReference(IReference reference);
    private IReference[] FindReferences(IDeclaredElement variable);
    private bool CheckReferences(IDeclaredElement variable, IAssignmentStatement assignment);
    private static ILocalVariableDeclaration FindSuitableLocalVariableDeclaration(IDeclaredElement variable);
    private static ILocalVariableDeclaration FindDeclaration(IAssignmentStatement assignment);
    private IReference GetFirstReference(IDeclaredElement variable);
    private IAssignmentStatement FindAssignment(IDeclaredElement variable);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.VB.ContextActions.MarkCanBeNullAction : MarkNullableActionBase {
    public string Text { get; }
    protected string AttributeShortName { get; }
    public MarkCanBeNullAction(IVBContextActionDataProvider dataProvider);
    public virtual string get_Text();
    protected virtual string get_AttributeShortName();
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.VB.ContextActions.MarkNotNullAction : MarkNullableActionBase {
    public string Text { get; }
    protected string AttributeShortName { get; }
    public MarkNotNullAction(IVBContextActionDataProvider dataProvider);
    public virtual string get_Text();
    protected virtual string get_AttributeShortName();
}
public abstract class JetBrains.ReSharper.Intentions.VB.ContextActions.MarkNullableActionBase : ModernContextActionBase {
    private IVBContextActionDataProvider myDataProvider;
    protected string AttributeShortName { get; }
    public MarkNullableActionBase(IVBContextActionDataProvider dataProvider);
    private void AddAttribute(IAttributesOwnerDeclaration attributesOwnerDeclaration);
    private ITypeElement GetAttribute(string clrName, ITreeNode element);
    private bool IsAvailable(IDeclaration declaration);
    private static bool IsAvailable(IVBFunctionDeclaration functionDeclaration);
    private bool IsAvailable(IDeclaration declaration, IEnumerable`1<IAccessorDeclaration> accessorDeclarations);
    private bool IsAvailable(IDeclaration declaration, bool checkNameRange);
    private void MarkWithAttribute(IAttributesOwnerDeclaration attributesOwnerDeclaration);
    protected abstract virtual string get_AttributeShortName();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.VB.ContextActions.MergeIfsAction : ModernContextActionBase {
    [NotNullAttribute]
private IVBContextActionDataProvider myDataProvider;
    public string Text { get; }
    public MergeIfsAction(IVBContextActionDataProvider dataProvider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    private IVBStatement FindNestedIf(TreeTextRange& ifRange, IList`1& statements, IVBExpression& condition);
    private IVBStatement FindOuterIf(IVBStatement nestedIf, IVBExpression& condition);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.VB.ContextActions.MoveTypeToAnotherFileAction : object {
    private IVBContextActionDataProvider myDataProvider;
    public string Text { get; }
    public MoveTypeToAnotherFileAction(IVBContextActionDataProvider dataProvider);
    public sealed virtual override bool IsAvailable(IUserDataHolder cache);
    public sealed virtual override IEnumerable`1<IntentionAction> CreateBulbItems();
    public sealed virtual override string get_Text();
    public sealed virtual override void Execute(ISolution solution, ITextControl textControl);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.VB.ContextActions.RenameFileToMatchTypeNameAction : RenameFileToMatchTypeNameActionBase {
    [NotNullAttribute]
private IVBContextActionDataProvider myDataProvider;
    public string Text { get; }
    public RenameFileToMatchTypeNameAction(IVBContextActionDataProvider dataProvider);
    public static int CountTopLevelTypeDeclarations(IVBTypeAndNamespaceHolderDeclaration declaration);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private int PostPSI(IVBTypeDeclaration declaration);
    public virtual bool IsAvailable(IUserDataHolder cache);
    public static bool TypeNameNameDoesNotCorrespondWithFileName(IDeclaredElement element, IProjectFile projectFile);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.VB.ContextActions.ReverseAssignmentAction : ModernContextActionBase {
    [NotNullAttribute]
private IVBContextActionDataProvider myDataProvider;
    private bool myManyResults;
    public string Text { get; }
    public ReverseAssignmentAction(IVBContextActionDataProvider dataProvider);
    public virtual bool IsAvailable(IUserDataHolder cache);
    public virtual string get_Text();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private IAssignmentStatement FindAssignmentStatement();
    private static bool CheckExpression(IVBExpression expression);
    private static bool CheckAssignmentStatement(IAssignmentStatement expression);
    private IList`1<IAssignmentStatement> FindStatementsToReverse();
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.VB.ContextActions.SpecifyTypeAction : ModernContextActionBase {
    private IVBContextActionDataProvider myDataProvider;
    public string Text { get; }
    public SpecifyTypeAction(IVBContextActionDataProvider dataProvider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    private bool CheckLoop(IVBExpression loopVariable);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.VB.ContextActions.SplitDeclarationAction : ModernContextActionBase {
    [NotNullAttribute]
private IVBContextActionDataProvider myDataProvider;
    public string Text { get; }
    public SplitDeclarationAction(IVBContextActionDataProvider dataProvider);
    public virtual string get_Text();
    private ILocalDeclarationList FindDeclarationList();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.VB.ContextActions.SplitDeclarationsListAction : ModernContextActionBase {
    [NotNullAttribute]
private IVBContextActionDataProvider myDataProvider;
    public string Text { get; }
    public SplitDeclarationsListAction(IVBContextActionDataProvider dataProvider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.VB.ContextActions.SplitIfAction : ModernContextActionBase {
    [NotNullAttribute]
private IVBContextActionDataProvider myDataProvider;
    public string Text { get; }
    public SplitIfAction(IVBContextActionDataProvider dataProvider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    private bool IsSuitableExpression(IVBExpression expression);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static void FillList(IVBExpression expression, List`1<IVBExpression> conjunctedExpressions);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.VB.ContextActions.SplitStringAction : ModernContextActionBase {
    [NotNullAttribute]
private IVBContextActionDataProvider myDataProvider;
    public string Text { get; }
    public SplitStringAction(IVBContextActionDataProvider dataProvider);
    private IVBLiteralExpression FindLiteralExpression();
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    private static bool NotInsideSequence(string text);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
public class JetBrains.ReSharper.Intentions.VB.ContextActions.StringRepresentationConverter : object {
    public string DeQuote(string txt);
    public string Quote(string str);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.VB.ContextActions.SubToFunctionAction : ContextActionBase {
    [NotNullAttribute]
private IVBContextActionDataProvider myDataProvider;
    public string Text { get; }
    public SubToFunctionAction(IVBContextActionDataProvider dataProvider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.VB.ContextActions.SurroundWithWithAction : ModernContextActionBase {
    [NotNullAttribute]
private IVBContextActionDataProvider myDataProvider;
    public string Text { get; }
    public SurroundWithWithAction(IVBContextActionDataProvider dataProvider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private IList`1<IVBStatement> FindStatementsToSurround();
    private OneToListMap`2<TreeNodeMarker, DocumentRange> BuildTargets(IWithStatement withStatement, IEnumerable`1<TreeNodeMarker> markers);
    private void BuildChains(IEnumerable`1<TreeNodeMarker> chainMarkers, IWithStatement withStatement, OneToListMap`2<DocumentRange, DocumentRange> chains, Dictionary`2<DocumentRange, DocumentRange> reverseChains);
    private void FilterTargets(OneToListMap`2<TreeNodeMarker, DocumentRange> targets, Dictionary`2<DocumentRange, DocumentRange> reverseChains);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.VB.ContextActions.ToAutoPropertyAction : ContextActionBase {
    private IVBContextActionDataProvider myDataProvider;
    public string Text { get; }
    public ToAutoPropertyAction(IVBContextActionDataProvider dataProvider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [CompilerGeneratedAttribute]
private void _Lambda$__5-0(ITextControl textControl);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.VB.ContextActions.ToImplicitlyTypedAction : ModernContextActionBase {
    [NotNullAttribute]
private IVBContextActionDataProvider myDataProvider;
    public string Text { get; }
    public ToImplicitlyTypedAction(IVBContextActionDataProvider dataProvider);
    public virtual string get_Text();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.VB.ContextActions.UseExplicitTypeParametersAction : ModernContextActionBase {
    private IVBContextActionDataProvider myDataProvider;
    public string Text { get; }
    public UseExplicitTypeParametersAction(IVBContextActionDataProvider dataProvider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    private IReferenceExpression FindMethodWithInferredTypeArgs();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
public class JetBrains.ReSharper.Intentions.VB.ContextActions.Util.ReferenceNameFinder : object {
    public static IList`1<IExpression> GetExpressions(IReferenceName referenceName, IVBTreeNode scope);
    private static ICollection`1<IDeclaredElement> FindDeclaredElements(IReadOnlyList`1<IReferenceName> referenceNames);
}
[ContextActionGroupAttribute]
public class JetBrains.ReSharper.Intentions.VB.ContextActions.VBContextActions : object {
    public static string GroupID;
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.VB.ContextActions.VBInitializeAutoPropertyAction : InitializeAutoPropertyActionBase {
    public VBInitializeAutoPropertyAction(IVBContextActionDataProvider dataProvider);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.VB.ContextActions.VBInitializeFieldAction : InitializeFieldActionBase {
    public VBInitializeFieldAction(IVBContextActionDataProvider dataProvider);
}
internal class JetBrains.ReSharper.Intentions.VB.DisableWarning.DisableAndRestoreByCommentsWarningAction : VBDisableWarningActionBase {
    private string myId;
    protected string OpeningText { get; }
    protected string ClosingText { get; }
    public string Text { get; }
    public DisableAndRestoreByCommentsWarningAction(DocumentRange range, string id);
    protected virtual string get_OpeningText();
    protected virtual string get_ClosingText();
    public virtual override string get_Text();
    private sealed virtual override void BulbActionExecute(ISolution solution, ITextControl textControl);
}
[CustomHighlightingActionProviderAttribute("JetBrains.ProjectModel.VBProjectFileType")]
public class JetBrains.ReSharper.Intentions.VB.DisableWarning.DisableByCommentWarningActionProvider : object {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.VB.DisableWarning.DisableByCommentWarningActionProvider/VB$StateMachine_1_GetActions")]
public sealed virtual override IEnumerable`1<IntentionAction> GetActions(IHighlighting highlighting, DocumentRange highlightingRange, IPsiSourceFile sourceFile, IAnchor configureAnchor);
}
internal class JetBrains.ReSharper.Intentions.VB.DisableWarning.DisableOnceByCommentWarningAction : VBDisableWarningActionBase {
    private string myId;
    protected string OpeningText { get; }
    protected string ClosingText { get; }
    public string Text { get; }
    public DisableOnceByCommentWarningAction(DocumentRange range, string id);
    protected virtual string get_OpeningText();
    protected virtual string get_ClosingText();
    public virtual override string get_Text();
    private sealed virtual override void BulbActionExecute(ISolution solution, ITextControl textControl);
}
public class JetBrains.ReSharper.Intentions.VB.DisableWarning.DisableWithPreprocessorDirectiveWarningAction : VBDisableWarningActionBase {
    private string myCompilerId;
    private static string DisableWarning;
    private static string EnableWarning;
    protected string OpeningText { get; }
    protected string ClosingText { get; }
    public string Text { get; }
    public DisableWithPreprocessorDirectiveWarningAction(DocumentRange range, string compilerId);
    private string ProcessCompilerId(string id);
    protected virtual string get_OpeningText();
    protected virtual string get_ClosingText();
    public virtual override string get_Text();
    private sealed virtual override void BulbActionExecute(ISolution solution, ITextControl textControl);
}
public abstract class JetBrains.ReSharper.Intentions.VB.DisableWarning.VBDisableWarningActionBase : object {
    private DocumentRange myRange;
    public string Text { get; }
    protected string OpeningText { get; }
    protected string ClosingText { get; }
    protected VBDisableWarningActionBase(DocumentRange range);
    public abstract virtual string get_Text();
    protected abstract virtual string get_OpeningText();
    protected abstract virtual string get_ClosingText();
    public void Execute(ISolution solution, ITextControl textControl);
    private static DocumentRange Filter(IEnumerable`1<ITokenNode> tokens, IFile file);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.VB.Iterator2FunctionAction : ModernContextActionBase {
    [NotNullAttribute]
private IVBContextActionDataProvider myProvider;
    public string Text { get; }
    public Iterator2FunctionAction(IVBContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private IDeclaration FindIteratorDeclaration();
    private bool CaretIsOverIterator(IModifiersListOwner modifiersListOwner);
    private static IType GetIteratorElementType(IDeclaration declaration, Boolean& isEnumerator);
    private static bool IsArrayReturnSituation(IBlock iteratorBody, IList`1<IYieldStatement> yieldReturns);
    private void ArrayReturnSituation(IBlock iteratorBody, IList`1<IYieldStatement> yieldReturns, IType elementType);
    private HotspotInfo GenericConvertSituation(IBlock iteratorBody, IList`1<IYieldStatement> statements, IType elementType, bool returnEnumerator);
    private ILocalDeclarationStatement EmitListDeclaration(string listName, IDeclaredType outputListType, IBlock iteratorBody);
    private IVBTreeNode EmitListAdd(IYieldStatement yieldReturn, IVBIdentifier outputList, IDeclaredType ienumerableType);
    private IVBTreeNode EmitMethodReturn(IBlock iteratorBody, bool returnEnumerator, IVBIdentifier outputList);
    private static IForEachStatement IsYieldForEachPattern(IYieldStatement yieldReturn, IDeclaredType ienumerableType);
    private static IDeclaredType ApplyTypeArguments(IDeclaredType type, IType[] typeArguments);
    private static IVBIdentifier GetVariableDeclarationName(ILocalDeclarationStatement declaration);
    private static IBlock GetIteratorBlock(IDeclaration iterator, bool removeModifier);
}
public abstract class JetBrains.ReSharper.Intentions.VB.QuickFixes.AddAccessorFixBase : ModernBulbActionBase {
    private IProperty myAccessorOwner;
    protected AccessorPrefix MyAccessorPrefix;
    protected IProperty AccessorOwner { get; }
    protected string AccessorName { get; }
    protected AccessorKind AccessorKind { get; }
    public string Text { get; }
    protected AddAccessorFixBase(IProperty property, AccessorPrefix accessorPrefix);
    protected AddAccessorFixBase(IProperty property);
    protected IProperty get_AccessorOwner();
    protected abstract virtual string get_AccessorName();
    protected abstract virtual AccessorKind get_AccessorKind();
    public sealed virtual override bool IQuickFix_IsAvailable(IUserDataHolder cache);
    public sealed virtual override IEnumerable`1<IntentionAction> IQuickFix_CreateBulbItems();
    public IEnumerable`1<IntentionAction> CreateBulbItems();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual string get_Text();
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.AddAsyncModifierFix : QuickFixBase {
    private IVBDeclaration myDeclaration;
    public string Text { get; }
    public AddAsyncModifierFix(AwaitExpressionNotUnderAsyncMethodError error);
    public virtual string get_Text();
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.AddAwaitFix : QuickFixBase {
    private IInvocationStatement myInvocationStatement;
    private IVBExpression myIndexExpression;
    public string Text { get; }
    public AddAwaitFix(IInvocationStatement invocationStatement);
    public virtual string get_Text();
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.AddCallKeywordFix : QuickFixBase {
    private IVBExpression myExpression;
    private IVBExpression myStatementExpression;
    public string Text { get; }
    public AddCallKeywordFix(InvalidExpressionStatementError error);
    public AddCallKeywordFix(InvalidInvocationStatementExpressionError error);
    public AddCallKeywordFix(InvalidInvocationStatementStartExpressionError error);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.AddClassConstraint3Fix : AddConstraintFixBase {
    protected string ConstraintText { get; }
    public AddClassConstraint3Fix(PossibleAssignmentToReadonlyFieldWarning error);
    protected virtual IEnumerable`1<ITypeParameterConstraint> AddConstraint();
    private static ITypeParameter GetTypeConstraint(IReferenceExpression expression);
    protected virtual void ProcessAddedConstraint(ITypeParameterConstraint constraint);
    protected virtual string get_ConstraintText();
}
public abstract class JetBrains.ReSharper.Intentions.VB.QuickFixes.AddConstraintFixBase : QuickFixBase {
    private ITypeParameter myTypeParameter;
    protected string ConstraintText { get; }
    public string Text { get; }
    protected ITypeParameter TypeParameter { get; }
    protected AddConstraintFixBase(ITypeParameter typeParameter);
    protected abstract virtual IEnumerable`1<ITypeParameterConstraint> AddConstraint();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected abstract virtual void ProcessAddedConstraint(ITypeParameterConstraint constraint);
    protected abstract virtual string get_ConstraintText();
    public virtual string get_Text();
    protected ITypeParameter get_TypeParameter();
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.AddGetAccessorFix : AddAccessorFixBase {
    private AccessorKind myMissedAccessorKind;
    protected AccessorKind AccessorKind { get; }
    protected string AccessorName { get; }
    public AddGetAccessorFix(ReadAccessToPropertyWithoutGetterError error);
    public AddGetAccessorFix(IProperty property);
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual AccessorKind get_AccessorKind();
    protected virtual string get_AccessorName();
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.AddIteratorModifierFix : QuickFixBase {
    private IYieldStatement myYieldStatement;
    private IVBDeclaration myDeclaration;
    public string Text { get; }
    public AddIteratorModifierFix(YieldStatementNotUnderIteratorMethodError error);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.AddOverloadsFix : QuickFixBase {
    private IVBTypeMemberDeclaration myDeclaration;
    public string Text { get; }
    public AddOverloadsFix(ShadowsOverridableMemberWarning warning);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
    public virtual string get_Text();
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.AddParameterFix : AddParameterFixBase {
    public AddParameterFix(ProblemInResolveError error);
    public AddParameterFix(IncorrectArgumentNumberError error);
    public AddParameterFix(IncorrectArgumentNumberMultipleCandidatesError error);
    public AddParameterFix(CannotConvertTypeInArgumentError error);
    public AddParameterFix(CannotConvertTypeInArgumentWarning error);
    public AddParameterFix(ImpossibleConvertTypeInArgumentWarning error);
    public AddParameterFix(IncorrectArgumentTypesError error);
    protected virtual IInvocationInfo GetInvocation();
    private static IInvocationInfo GetInvocationInfo(ITreeNode element);
    protected virtual bool RemoveArgument(IInvocationInfo invocationInfo, IArgumentInfo argumentInfo);
    protected virtual IInvocationInfo MakeArgumentsOwnerCopy(IInvocationInfo argumentsInfo);
    protected virtual ParameterKind ParameterKindFromArgument(IArgumentInfo argument);
    protected virtual ITreeNode GetArgumentNode(IArgumentInfo argumentInfo);
    protected virtual IParameter FindMatchingParameter(IArgumentInfo argumentInfo, IArgumentInfo removedArgumentInfo, IParametersOwner targetParametersOwner);
    protected virtual bool ParametersOwnerIsSuitableToAddParameter(IParametersOwner parametersOwner, IInvocationInfo argumentsOwner);
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.AddSetAccessorFix : AddAccessorFixBase {
    protected AccessorKind AccessorKind { get; }
    protected string AccessorName { get; }
    public AddSetAccessorFix(ReadonlyAssignmentTargetError error);
    public AddSetAccessorFix(WriteAccessToPropertyWithoutSetterError error);
    public AddSetAccessorFix(IProperty property);
    protected virtual AccessorKind get_AccessorKind();
    protected virtual string get_AccessorName();
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.AddShadowsFix : QuickFixBase {
    private IVBTypeMemberDeclaration myDeclaration;
    public string Text { get; }
    public AddShadowsFix(ShadowsOverridableMemberWarning warning);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
    public virtual string get_Text();
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.AddTypeArgListFix : QuickFixBase {
    private IReference myReference;
    private IList`1<IDeclaredElement> myCandidates;
    public string Text { get; }
    public AddTypeArgListFix(TypeInferenceError err);
    public AddTypeArgListFix(TypeInferenceMultipleCandidatesError err);
    public AddTypeArgListFix(TypeParametersNumberMismatchError err);
    public AddTypeArgListFix(TypeParametersNumberMismatchMultipleCandidatesError err);
    public AddTypeArgListFix(ProblemInResolveError err);
    public AddTypeArgListFix(NoTypeArgumentsInUsageError err);
    private static IList`1<IDeclaredElement> GetCandidates(IReference reference);
    public virtual string get_Text();
    private IReferenceExpression GetReferenceExpressionElement();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.BestPracticesQuickFixRegistration : object {
    public IEnumerable`1<Type> Dependencies { get; }
    public sealed virtual override IEnumerable`1<Type> get_Dependencies();
    public sealed virtual override void Register(IQuickFixesRegistrar table);
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.CastFix : object {
    private static Lazy`1<IBulbAction[]> ourEmpty;
    private Lazy`1<IBulbAction[]> myItems;
    public IBulbAction[] Items { get; }
    private static CastFix();
    public CastFix(CannotConvertTypeInArgumentError error);
    public CastFix(CannotConvertTypeInArgumentWarning error);
    public CastFix(ImpossibleConvertTypeInArgumentWarning error);
    public CastFix(IncorrectArgumentTypesError error);
    public CastFix(MultipleResolveCandidatesError error);
    public CastFix(IncorrectArgumentNumberError error);
    public CastFix(IncorrectArgumentNumberMultipleCandidatesError error);
    public CastFix(StrictnessFailedError error);
    public CastFix(MoreApplicableNotFoundError error);
    public CastFix(MoreSpecificNotFoundError error);
    public CastFix(IncorrectArrayElementTypeError error);
    public CastFix(CannotConvertTypeInAssignmentError error);
    public CastFix(CannotConvertTypeInAssignmentWarning error);
    public CastFix(ImpossibleConvertTypeInAssignmentWarning error);
    public CastFix(CannotConvertTypeInMemberInitializerError error);
    public CastFix(CannotConvertTypeInMemberInitializerWarning error);
    public CastFix(ImpossibleConvertTypeInMemberInitializerWarning error);
    public CastFix(CannotConvertTypeInDeclarationError error);
    public CastFix(CannotConvertTypeInDeclarationWarning error);
    public CastFix(ImpossibleConvertTypeInDeclarationWarning error);
    public CastFix(InvalidCastError error);
    public CastFix(CannotConvertTypeInReturnError error);
    public CastFix(CannotConvertTypeInReturnWarning error);
    public CastFix(ImpossibleConvertTypeInReturnWarning error);
    public CastFix(CannotDetermineNullCoalescingExpressionType2Error error);
    public CastFix(CannotDetermineNullCoalescingExpressionTypeError error);
    public CastFix(CannotDetermineTernaryExpressionTypeError error);
    public CastFix(CannotDetermineTernaryExpressionType2Error error);
    public CastFix(LateBoundThroughtInterfaceError error);
    public CastFix(LateBoundExtensionMethodsError error);
    public CastFix(IArgumentInfo argumentInfo);
    private IBulbAction[] CastForArgument(IReference reference);
    private IBulbAction[] CastForArgument(IArgumentInfo argumentInfo);
    private IBulbAction[] CastFromExpectedTypes(IVBExpression vbExpression, string targetText, bool alwaysUseCastExpression);
    protected virtual Nullable`1<bool> IsValidTryCast(IVBExpression vbExpression, IType targetType);
    protected virtual IEnumerable`1<ValueTuple`2<IVBExpression, IType>> ToVB(IEnumerable`1<ValueTuple`2<IExpression, IType>> src);
    private IBulbAction[] CastInTernaryOperands(IConditionalExpression expr);
    private static IManagedExpression GetCastOperand(IExpression exp);
    public sealed virtual override bool IsAvailable(IUserDataHolder cache);
    public IBulbAction[] get_Items();
    public sealed virtual override IEnumerable`1<IntentionAction> CreateBulbItems();
}
internal class JetBrains.ReSharper.Intentions.VB.QuickFixes.CastFixItem : BulbActionBase {
    private IVBExpression myTarget;
    private ValueTuple`2<IVBExpression, IType> myNewExpressionAndType;
    private bool myIsAsCast;
    private bool myAlwaysUseExplicit;
    private string myTargetText;
    public string Text { get; }
    public CastFixItem(IVBExpression target, string targetText, ValueTuple`2<IVBExpression, IType> newExpressionAndType, bool isAsCast, bool alwaysUseExplicit);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual string get_Text();
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.CastInBinaryFix : QuickFixBase {
    private IVBBinaryExpression myBinaryExpression;
    public string Text { get; }
    public CastInBinaryFix(IVBBinaryExpression binaryExpression);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected bool IsAvailableEx(IVBExpression expression);
    private Pair`2[] PossibleTypes(IVBExpression expression);
    private static IExpression GetCastOperand(IExpression tmp);
    protected IVBExpression CreateCast(IVBExpression expression);
    protected IVBExpression CreateCast(Pair`2<IVBExpression, IType> p, bool canReturnExpr);
    private string GetText(IVBExpression expression);
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.ChangeSignatureFixUtil : object {
    public static IParametersOwner GetAddHandlerDelegate(IReference reference);
}
[UsedImplicitlyAttribute]
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.ChangeTypeItemsCreator : object {
    private static Lazy`1<IBulbAction[]> ourEmpty;
    private static ChangeTypeItemsCreator();
    public static IBulbAction[] FromUnknownParentOfExpression(IVBExpression vbExpression);
    public static IBulbAction[] FromConditional(IConditionalExpression conditionalExpression);
    public static IBulbAction[] FromReturn(IReturnStatement returnStatement);
    private static IParametersOwner ContainingParametersOwner(IVBTreeNode returnStatement);
    public static IBulbAction[] FromDeclaration(IDeclaration declaration, IVBExpression vbExpression);
    public static IBulbAction[] FromArgument(IVBArgumentInfo vbArgumentInfo);
    public static IEnumerable`1<IType> ParamArrayPosibleTypes(IVBArgumentInfo vbArgumentInfo);
    private static IVBExpression GetArgumentExpression(IVBArgumentInfo vbArgumentInfo);
    public static IBulbAction[] FromAssigment(IAssignmentStatement assignmentStatement);
    private static IType GetTypeThatCanBeUsedExplicitly(IType type, IDeclaredElement targetDeclaredElement);
    public static IBulbAction[] FromMemberInitializer(IMemberInitializer initializer);
    [CanBeNullAttribute]
public static IClrDeclaredElement DeclaredElementFromExpression(IVBExpression vbExpression);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.CodeSmellsQuickFixRegistration : object {
    public IEnumerable`1<Type> Dependencies { get; }
    public sealed virtual override IEnumerable`1<Type> get_Dependencies();
    public sealed virtual override void Register(IQuickFixesRegistrar table);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.CompilerWarningsQuickFixRegistration : object {
    public IEnumerable`1<Type> Dependencies { get; }
    public sealed virtual override IEnumerable`1<Type> get_Dependencies();
    public sealed virtual override void Register(IQuickFixesRegistrar table);
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.CorrectSharedAccessFix : QuickFixBase {
    private IReferenceExpression myReferenceExpression;
    private ITypeMember myTypeMember;
    public string Text { get; }
    public CorrectSharedAccessFix(StaticElementInNonStaticContextWarning warning);
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.CreateAbstractMethodForDelegateAction : CreateMethodForDelegateAction {
    public CreateAbstractMethodForDelegateAction(IReference reference);
    protected virtual ICreationTarget GetTarget();
    protected virtual CreateMethodDeclarationContext CreateContext();
    protected virtual string GetTextFormat();
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.CreateAbstractMethodFromUsageAction : CreateMethodFromUsageAction {
    public CreateAbstractMethodFromUsageAction(IReference reference);
    protected virtual ICreationTarget GetTarget();
    protected virtual CreateMethodDeclarationContext CreateContext();
    protected virtual string GetTextFormat();
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.CreateAbstractPropertyFromUsageFix : CreatePropertyFromUsageFix {
    public CreateAbstractPropertyFromUsageFix(IReference reference);
    protected virtual string TextFormat();
    protected virtual bool IsAvailableInternal();
    protected virtual CreatePropertyDeclarationContext CreateContext();
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.CreateAbstractReadOnlyPropertyFromUsageFix : CreateReadOnlyPropertyFromUsageFix {
    public CreateAbstractReadOnlyPropertyFromUsageFix(IReference reference);
    protected virtual string TextFormat();
    protected virtual bool IsAvailableInternal();
    protected virtual CreatePropertyDeclarationContext CreateContext();
}
public abstract class JetBrains.ReSharper.Intentions.VB.QuickFixes.CreateClassFromQualifierBase : CreateFromUsageActionBase2`2<CreateClassDeclarationContext, IReference> {
    private IReferenceExpression myReferenceExpression;
    protected IReferenceExpression ReferenceExpression { get; }
    public string Text { get; }
    protected CreateClassFromQualifierBase(IReference reference);
    protected IReferenceExpression get_ReferenceExpression();
    public virtual string get_Text();
    protected virtual bool IsAvailableInternal();
    protected virtual CreateClassDeclarationContext CreateContext();
    protected virtual IntentionResult ExecuteIntention(CreateClassDeclarationContext context);
    public virtual ICreatedElementConsistencyGroup GetConsistencyGroup();
    protected abstract virtual string GetItemText();
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.CreateClassFromQualifierFix : CreateClassFromQualifierBase {
    public CreateClassFromQualifierFix(IReference reference);
    protected virtual bool IsAvailableInternal();
    protected virtual string GetItemText();
    protected virtual ICreationTarget GetTarget();
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.CreateClassFromUsageFix : CreateClassFromUsageFixBase {
    public CreateClassFromUsageFix(IReference reference);
    protected virtual ICreationTarget GetTarget();
    protected virtual bool IsQualifierRedundant(IDeclaredElement element);
    protected virtual string GetItemText();
    protected virtual IVBTreeNode GetScope();
}
public abstract class JetBrains.ReSharper.Intentions.VB.QuickFixes.CreateClassFromUsageFixBase : CreateFromUsageActionBase2`2<CreateClassDeclarationContext, IReference> {
    private IReferenceName myReferenceName;
    protected IReferenceName ReferenceName { get; }
    public string Text { get; }
    public CreateClassFromUsageFixBase(IReference reference);
    protected IReferenceName get_ReferenceName();
    protected abstract virtual bool IsQualifierRedundant(IDeclaredElement element);
    protected virtual CreateClassDeclarationContext CreateContext();
    private string MakeAttributeClassName(string className);
    public virtual string get_Text();
    protected abstract virtual string GetItemText();
    protected virtual bool IsAvailableInternal();
    private MemberSignature GetConstructorFromInitializerSignature(IObjectCreationExpression creationExpression, IPsiSourceFile sourceFile);
    protected abstract virtual IVBTreeNode GetScope();
    protected virtual IntentionResult ExecuteIntention(CreateClassDeclarationContext context);
    public virtual ICreatedElementConsistencyGroup GetConsistencyGroup();
    [CompilerGeneratedAttribute]
private bool _Lambda$__10-0(ITypeImplementsClause clause);
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.CreateConstructorFromUsageAction : CreateFromUsageActionBase2`2<CreateConstructorDeclarationContext, IReference> {
    private IVBExpression myExpression;
    public string Text { get; }
    public CreateConstructorFromUsageAction(IReference reference);
    public CreateConstructorFromUsageAction(IVBArgumentInfo argumentInfo);
    private static IReference GetIndexOrObjectCreationReference(IVBArgumentInfo argument);
    private static IReference GetIndexOrObjectCreationReference(IReference reference1);
    protected virtual CreateConstructorDeclarationContext CreateContext();
    protected virtual ICreationTarget GetTarget();
    public virtual string get_Text();
    public virtual ICreatedElementConsistencyGroup GetConsistencyGroup();
    public sealed virtual override IAnchor GetCustomAnchor();
    protected virtual IntentionResult ExecuteIntention(CreateConstructorDeclarationContext ctx);
    protected virtual bool IsAvailableInternal();
    private bool ReferenceResolved(IReference ref);
    protected virtual bool CanAddMemberTo(IDeclaredType declaredType);
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.CreateDefaultPropertyFromUsageAction : CreateFromUsageActionBase2`2<CreatePropertyDeclarationContext, IReference> {
    private IIndexExpression myElementAccessExpression;
    public string Text { get; }
    public CreateDefaultPropertyFromUsageAction(IReference reference);
    public virtual string get_Text();
    protected virtual CreatePropertyDeclarationContext CreateContext();
    protected virtual ICreationTarget GetTarget();
    private ITypeElement GetTypeElement();
    protected virtual bool IsAvailableInternal();
    public virtual ICreatedElementConsistencyGroup GetConsistencyGroup();
    protected virtual IntentionResult ExecuteIntention(CreatePropertyDeclarationContext ctx);
}
public abstract class JetBrains.ReSharper.Intentions.VB.QuickFixes.CreateDelegateFixBase : CreateFromUsageActionBase2`2<CreateDelegateDeclarationContext, IReference> {
    protected IReferenceName myReferenceName;
    protected CreateDelegateFixBase(IReference reference);
    protected virtual CreateDelegateDeclarationContext CreateContext();
    protected virtual bool IsAvailableInternal();
    private static bool IsDelegate(IReferenceName reference1);
    protected virtual IntentionResult ExecuteIntention(CreateDelegateDeclarationContext context);
    public virtual ICreatedElementConsistencyGroup GetConsistencyGroup();
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.CreateDelegateFromUsageFix : CreateDelegateFixBase {
    public string Text { get; }
    public CreateDelegateFromUsageFix(IReference reference);
    protected virtual ICreationTarget GetTarget();
    public virtual string get_Text();
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.CreateEnumMemberFromUsageFix : CreateFromUsageActionBase2`2<CreateEnumMemberDeclarationContext, IReference> {
    private IReference myReference;
    public string Text { get; }
    public CreateEnumMemberFromUsageFix(IReference reference);
    protected virtual CreateEnumMemberDeclarationContext CreateContext();
    protected virtual IntentionResult ExecuteIntention(CreateEnumMemberDeclarationContext context);
    protected virtual ICreationTarget GetTarget();
    public virtual ICreatedElementConsistencyGroup GetConsistencyGroup();
    protected virtual bool IsAvailableInternal();
    private bool ReferenceResolved(IReference reference1);
    public virtual string get_Text();
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.CreateEventFromUsageFix : CreateFromUsageActionBase2`2<CreateEventDeclarationContext, IReference> {
    public string Text { get; }
    public CreateEventFromUsageFix(IReference reference);
    protected virtual bool IsAvailableInternal();
    public virtual ICreatedElementConsistencyGroup GetConsistencyGroup();
    protected virtual ICreationTarget GetTarget();
    protected virtual IntentionResult ExecuteIntention(CreateEventDeclarationContext context);
    private bool CheckResolveResult();
    protected virtual CreateEventDeclarationContext CreateContext();
    private ITypeImage GetExpressionType();
    public virtual string get_Text();
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.CreateFieldFromInitializerFix : CreateFromUsageActionBase2`2<CreateFieldDeclarationContext, IReference> {
    private IReference myReference;
    [CanBeNullAttribute]
private IMemberInitializer MemberInitializer { get; }
    public string Text { get; }
    public CreateFieldFromInitializerFix(IReference reference);
    private IMemberInitializer get_MemberInitializer();
    protected virtual CreateFieldDeclarationContext CreateContext();
    protected virtual IntentionResult ExecuteIntention(CreateFieldDeclarationContext context);
    protected virtual ICreationTarget GetTarget();
    public virtual ICreatedElementConsistencyGroup GetConsistencyGroup();
    protected virtual bool IsAvailableInternal();
    private bool CheckResolveResult(IReference reference1);
    private bool CanAddMemberTo(IDeclaredType declaredType);
    public virtual string get_Text();
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.CreateFieldFromUsageFix : CreateFromUsageActionBase2`2<CreateFieldDeclarationContext, IReference> {
    private IReference myReference;
    [CanBeNullAttribute]
private IReferenceExpression ReferenceExpression { get; }
    public string Text { get; }
    public CreateFieldFromUsageFix(IReference reference);
    private IReferenceExpression get_ReferenceExpression();
    protected virtual CreateFieldDeclarationContext CreateContext();
    protected virtual IntentionResult ExecuteIntention(CreateFieldDeclarationContext context);
    private IBlock GetScope(IReferenceExpression referenceExpression1);
    protected virtual ICreationTarget GetTarget();
    public virtual ICreatedElementConsistencyGroup GetConsistencyGroup();
    protected virtual bool IsAvailableInternal();
    private bool CheckResolveResult(IReference reference1);
    private bool CanAddMemberTo(IDeclaredType declaredType);
    public virtual string get_Text();
}
public abstract class JetBrains.ReSharper.Intentions.VB.QuickFixes.CreateFromUsage.Property.CreatePropertyFromUsageFixBase : CreateFromUsageActionBase2`2<CreatePropertyDeclarationContext, IReference> {
    private IReference myReference;
    protected IReferenceExpression myReferenceExpression;
    public CreatePropertyFromUsageFixBase(IReference reference);
    protected virtual CreatePropertyDeclarationContext CreateContext();
    private bool TargetSupportsAutoProperty(ITypeTarget target);
    protected virtual ICreationTarget GetTarget();
    protected virtual bool IsAvailableInternal();
    protected bool CheckResolveResult(IReference reference1);
    protected bool CanAddMemberTo(IDeclaredType declaredType);
    protected virtual IntentionResult ExecuteIntention(CreatePropertyDeclarationContext context);
    public virtual ICreatedElementConsistencyGroup GetConsistencyGroup();
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.CreateFromUsage.Util.OwnerUtil : object {
    private static IClassLikeDeclaration GetNotNestingOwner(IVBTreeNode usage);
    public static ICreationTarget GetOwnerForNestedTypeDeclaration(IReferenceName referenceName);
    public static ICreationTarget GetOwnerForNestedTypeDeclaration(IReferenceExpression referenceExpression);
    public static ICreationTarget GetOwnerForTypeDeclaration(IReferenceName referenceName);
    public static ICreationTarget GetOwnerForTypeDeclaration(IReferenceExpression referenceExpression);
    [CanBeNullAttribute]
public static ITypeTarget GetOwnerForTypeMemberDeclaration(IReference reference);
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.CreateFromUsageFix : CreateFromUsageFixBase {
    public CreateFromUsageFix(NotResolvedError err);
    public CreateFromUsageFix(CannotConvertTypeInArgumentError err);
    public CreateFromUsageFix(CannotConvertTypeInArgumentWarning err);
    public CreateFromUsageFix(ImpossibleConvertTypeInArgumentWarning err);
    public CreateFromUsageFix(IncorrectArgumentTypesError err);
    public CreateFromUsageFix(IncorrectArgumentNumberMultipleCandidatesError err);
    public CreateFromUsageFix(ArgumentsMismatchError err);
    public CreateFromUsageFix(IncorrectArgumentNumberError err);
    public CreateFromUsageFix(StrictnessFailedError err);
    public CreateFromUsageFix(MoreApplicableNotFoundError err);
    public CreateFromUsageFix(NoMatchingInInterfaceError err);
    public CreateFromUsageFix(NoMatchingInInterfaceMultipleCandidatesError err);
    public CreateFromUsageFix(IncorrectSignatureInDelegateCreationError err);
    public CreateFromUsageFix(IncorrectSignatureInDelegateCreationMultipleCandidatesError err);
    public CreateFromUsageFix(MoreSpecificNotFoundError err);
    public CreateFromUsageFix(NoTypeParametersInCandidateError err);
    public CreateFromUsageFix(TypeParametersNumberMismatchError err);
    public CreateFromUsageFix(TypeParametersNumberMismatchMultipleCandidatesError err);
    public CreateFromUsageFix(TypeExpectedNoCandidateError err);
    public CreateFromUsageFix(NoTypeArgumentsInUsageError err);
    public CreateFromUsageFix(AccessRightsError err);
    public CreateFromUsageFix(MultipleAccessRightsError err);
    public CreateFromUsageFix(MultipleAccessRights2Error err);
    public CreateFromUsageFix(NotValidError err);
    public CreateFromUsageFix(MethodExpectedError err);
    public CreateFromUsageFix(MethodExpectedMultipleCandidatesError err);
    public CreateFromUsageFix(DefaultPropertyNotFoundError err);
    private static IReference InvokedFromArgument(IVBArgumentInfo argument);
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.CreateLocalFromUsageFix : BulbActionBase {
    private IReference myReference;
    private IReferenceExpression myReferenceExpression;
    public string Text { get; }
    private IReferenceExpression ReferenceExpression { get; }
    private IReference Reference { get; }
    public CreateLocalFromUsageFix(IReference reference);
    private bool IsAvailable();
    public virtual string get_Text();
    private IReferenceExpression get_ReferenceExpression();
    private IReference get_Reference();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private IBlock GetAnchor();
    private IReadOnlyList`1<IVBExpression> CollectUsages(ITreeNode scope);
    private static IReadOnlyList`1<IVBExpression> FilterUsages(IEnumerable`1<IReferenceExpression> expressions);
    private IExpectedTypeConstraint VariableTypeConstraint(ITreeNode scope);
    private ILocalDeclarationStatement GetDeclarationStatement(IVBStatement anchor, VBElementFactory factory, IReadOnlyList`1<IVBExpression> usages, Boolean& canBeVar);
    public sealed virtual override ICreatedElementConsistencyGroup GetConsistencyGroup();
    public sealed virtual override IReadOnlyList`1<IBulbAction> GetBulbItems();
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.CreateMethodForDelegateAction : CreateFromUsageActionBase2`2<CreateMethodDeclarationContext, IReference> {
    private IEnumerable`1<Pair`2<IDelegate, ISubstitution>> myDelegatesAndSubstitutions;
    public string Text { get; }
    public CreateMethodForDelegateAction(IReference reference);
    protected virtual bool IsAvailableInternal();
    protected virtual CreateMethodDeclarationContext CreateContext();
    public virtual ICreatedElementConsistencyGroup GetConsistencyGroup();
    protected virtual ICreationTarget GetTarget();
    protected virtual IBulbActionCommand ExecuteCommandBeforeTypePartSelector(Func`1<IBulbActionCommand> continueExecution);
    private IDeclaration DeclarationForSignature(MemberSignature memberSignature, string methodName, IPsiModule psiModule, bool inInterface);
    protected virtual IntentionResult ExecuteIntention(CreateMethodDeclarationContext context);
    public static IResolveResult GetDelegate(IReference qualifiableReference);
    private static IResolveResult ExpectedDelegate(IVBExpression expression, IReference reference);
    public virtual string get_Text();
    protected virtual string GetTextFormat();
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.CreateMethodFromUsageAction : CreateFromUsageActionBase2`2<CreateMethodDeclarationContext, IReference> {
    private IVBInvocationInfo myInvocationInfo;
    public string Text { get; }
    public CreateMethodFromUsageAction(IReference reference);
    public virtual ICreatedElementConsistencyGroup GetConsistencyGroup();
    protected virtual bool IsAvailableInternal();
    protected virtual CreateMethodDeclarationContext CreateContext();
    protected static string GetTargetMethodName(IReference reference);
    protected virtual ICreationTarget GetTarget();
    protected virtual IntentionResult ExecuteIntention(CreateMethodDeclarationContext context);
    public virtual string get_Text();
    protected virtual string GetTextFormat();
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.CreateMustInheritDefaultPropertyFromUsageAction : CreateDefaultPropertyFromUsageAction {
    public string Text { get; }
    public CreateMustInheritDefaultPropertyFromUsageAction(IReference reference);
    public virtual string get_Text();
    protected virtual ICreationTarget GetTarget();
    protected virtual CreatePropertyDeclarationContext CreateContext();
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.CreateNestedClassFromQualifierFix : CreateClassFromQualifierBase {
    public CreateNestedClassFromQualifierFix(IReference reference);
    protected virtual bool IsAvailableInternal();
    protected virtual ICreationTarget GetTarget();
    protected virtual string GetItemText();
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.CreateNestedClassFromUsageFix : CreateClassFromUsageFixBase {
    public CreateNestedClassFromUsageFix(IReference reference);
    protected virtual ICreationTarget GetTarget();
    protected virtual bool IsQualifierRedundant(IDeclaredElement element);
    protected virtual string GetItemText();
    protected virtual bool IsAvailableInternal();
    protected virtual IVBTreeNode GetScope();
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.CreateNestedDelegateFromUsageFix : CreateDelegateFixBase {
    public string Text { get; }
    public CreateNestedDelegateFromUsageFix(IReference reference);
    protected virtual ICreationTarget GetTarget();
    public virtual string get_Text();
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.CreateParameterAndUpdateUsagesItem : BulbActionBase {
    private IReference myReference;
    public string Text { get; }
    public CreateParameterAndUpdateUsagesItem(IReference reference);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private void ChangeSignature(IExpression referenceExpression, IParametersOwner parametersOwner, IProgressIndicator progress);
    public sealed virtual override ICreatedElementConsistencyGroup GetConsistencyGroup();
    public sealed virtual override IReadOnlyList`1<IBulbAction> GetBulbItem();
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.CreateParameterFromUsageFix : object {
    public static bool MayBeOverriden(ITypeMember overridableMember);
    public static IType GetTypeFromConstraints(IReadOnlyList`1<ExpectedType> types, IReference reference);
    public static IParametersOwner GetParametersOwner(ITreeNode referenceExpression);
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.CreateParameterItem : BulbActionBase {
    private IReference myReference;
    public string Text { get; }
    public CreateParameterItem(IReference reference);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public sealed virtual override ICreatedElementConsistencyGroup GetConsistencyGroup();
    public sealed virtual override IReadOnlyList`1<IBulbAction> GetBulbItem();
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.CreatePropertyFromInitializerFix : CreateFromUsageActionBase2`2<CreatePropertyDeclarationContext, IReference> {
    private IReference myReference;
    [CanBeNullAttribute]
private IMemberInitializer MemberInitializer { get; }
    public string Text { get; }
    public CreatePropertyFromInitializerFix(IReference reference);
    private IMemberInitializer get_MemberInitializer();
    protected virtual CreatePropertyDeclarationContext CreateContext();
    private bool TargetSupportsAutoProperty(ITypeTarget target);
    protected virtual IntentionResult ExecuteIntention(CreatePropertyDeclarationContext context);
    protected virtual ICreationTarget GetTarget();
    public virtual ICreatedElementConsistencyGroup GetConsistencyGroup();
    protected virtual bool IsAvailableInternal();
    private bool CheckResolveResult(IReference reference);
    private bool CanAddMemberTo(IDeclaredType declaredType);
    public virtual string get_Text();
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.CreatePropertyFromUsageFix : CreatePropertyFromUsageFixBase {
    public string Text { get; }
    public CreatePropertyFromUsageFix(IReference reference);
    public virtual string get_Text();
    protected virtual string TextFormat();
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.CreatePropertyInAttributeFix : CreateFromUsageActionBase2`2<CreatePropertyDeclarationContext, IReference> {
    private IReference myReference;
    [CanBeNullAttribute]
private INamedArgument Argument { get; }
    public string Text { get; }
    public CreatePropertyInAttributeFix(IReference reference);
    private INamedArgument get_Argument();
    public virtual ICreatedElementConsistencyGroup GetConsistencyGroup();
    protected virtual bool IsAvailableInternal();
    protected virtual ICreationTarget GetTarget();
    protected virtual CreatePropertyDeclarationContext CreateContext();
    protected virtual IntentionResult ExecuteIntention(CreatePropertyDeclarationContext context);
    public virtual string get_Text();
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.CreateReadOnlyPropertyFromUsageFix : CreatePropertyFromUsageFixBase {
    public string Text { get; }
    public CreateReadOnlyPropertyFromUsageFix(IReference reference);
    protected virtual bool IsAvailableInternal();
    protected virtual CreatePropertyDeclarationContext CreateContext();
    public virtual string get_Text();
    protected virtual string TextFormat();
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.EnumerateToArrayFix : MultipleEnumerationFixBase {
    private IPsiModule myPsiModule;
    private IMethod myToArrayMethod;
    private IMethod myCastMethod;
    private VBElementFactory myElementFactory;
    public string Text { get; }
    public EnumerateToArrayFix(PossibleMultipleEnumerationWarning warning);
    public virtual string get_Text();
    protected virtual void EnumerateGenericIEnumerable(IType enumerableType, IVBExpression valueExpression);
    protected virtual void EnumerateIEnumerable(IVBExpression valueExpression);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.EnumerateToListFix : MultipleEnumerationFixBase {
    private IPsiModule myPsiModule;
    private IMethod myToListMethod;
    private IMethod myCastMethod;
    private VBElementFactory myElementFactory;
    private ITypeElement myGenericListTypeElement;
    public string Text { get; }
    public EnumerateToListFix(PossibleMultipleEnumerationWarning warning);
    public virtual string get_Text();
    protected virtual void EnumerateGenericIEnumerable(IType enumerableType, IVBExpression valueExpression);
    protected virtual void EnumerateIEnumerable(IVBExpression valueExpression);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.EnumerateWithAsArrayMethodFix : MultipleEnumerationFixBase {
    private IPsiModule myPsiModule;
    private IMethod myAsArrayMethod;
    private IMethod myCastMethod;
    private VBElementFactory myElementFactory;
    private static ClrTypeName ourCollectionUtilClrTypeName;
    public string Text { get; }
    private static EnumerateWithAsArrayMethodFix();
    public EnumerateWithAsArrayMethodFix(PossibleMultipleEnumerationWarning warning);
    public virtual string get_Text();
    protected virtual void EnumerateGenericIEnumerable(IType enumerableType, IVBExpression valueExpression);
    protected virtual void EnumerateIEnumerable(IVBExpression valueExpression);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.EnumerateWithAsListMethodFix : MultipleEnumerationFixBase {
    private IPsiModule myPsiModule;
    private IMethod myAsListMethod;
    private IMethod myCastMethod;
    private VBElementFactory myElementFactory;
    private static ClrTypeName ourCollectionUtilClrTypeName;
    public string Text { get; }
    private static EnumerateWithAsListMethodFix();
    public EnumerateWithAsListMethodFix(PossibleMultipleEnumerationWarning warning);
    public virtual string get_Text();
    protected virtual void EnumerateGenericIEnumerable(IType enumerableType, IVBExpression valueExpression);
    protected virtual void EnumerateIEnumerable(IVBExpression valueExpression);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.errorsQuickFixRegistration : object {
    public IEnumerable`1<Type> Dependencies { get; }
    public sealed virtual override IEnumerable`1<Type> get_Dependencies();
    public sealed virtual override void Register(IQuickFixesRegistrar table);
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.FixAsyncMethodReturnTypeFix : FixReturnTypeFixBase {
    private IMethodDeclaration myMethodDeclaration;
    protected IVBDeclaration Declaration { get; }
    public FixAsyncMethodReturnTypeFix(IMethodDeclaration methodDeclaration);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    protected virtual IVBDeclaration get_Declaration();
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.FixAsyncMethodReturnTypeFix2 : FixReturnTypeFixBase {
    private IMethodDeclaration myMethodDeclaration;
    protected IVBDeclaration Declaration { get; }
    public FixAsyncMethodReturnTypeFix2(IMethodDeclaration methodDeclaration);
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IType GetAsyncElementReturnType();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    protected virtual IVBDeclaration get_Declaration();
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.FixFloatingPointComparingFix : QuickFixBase {
    private SuspiciousConstant myConstant;
    private DocumentRange myEpsilonRange;
    private IRelationalExpression myExpression;
    private bool myIsDouble;
    private bool myIsEQ;
    private IssueType myIssueType;
    public string Text { get; }
    public FixFloatingPointComparingFix(FloatingPointEqualityComparisonWarning warning);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
    private string ProperMethodNameForConstant();
    public virtual string get_Text();
}
public abstract class JetBrains.ReSharper.Intentions.VB.QuickFixes.FixReturnTypeFixBase : QuickFixBase {
    protected IVBDeclaration Declaration { get; }
    public string Text { get; }
    protected abstract virtual IVBDeclaration get_Declaration();
    public virtual bool IsAvailable(IUserDataHolder cache);
    public virtual string get_Text();
    protected virtual IType GetAsyncElementReturnType();
    protected IType GetAsyncReturnType();
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.GenerateDisposePatternFix : WorkflowDrivenImplementMembersFix`1<GenerateDisposePatternWorkflow> {
    private IList`1<OverridableMemberInstance> myMissingMembers;
    public string Text { get; }
    public GenerateDisposePatternFix(MissingMemberImplementationError error);
    public GenerateDisposePatternFix(MissingMemberImplementation2Error error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.GenerateEqualityMembersFix : WorkflowDrivenImplementMembersFix`1<GenerateEqualityMembersWorkflow> {
    private IList`1<OverridableMemberInstance> myMissingMembers;
    public string Text { get; }
    public GenerateEqualityMembersFix(MissingMemberImplementationError error);
    public GenerateEqualityMembersFix(MissingMemberImplementation2Error error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.GenerateRelationalMembersFix : WorkflowDrivenImplementMembersFix`1<GenerateRelationalMembersWorkflow> {
    private IList`1<OverridableMemberInstance> myMissingMembers;
    public string Text { get; }
    public GenerateRelationalMembersFix(MissingMemberImplementationError error);
    public GenerateRelationalMembersFix(MissingMemberImplementation2Error error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.ImplementMemberFix : WorkflowDrivenImplementMembersFix`1<GenerateImplementationsWorkflow> {
    public string Text { get; }
    public ImplementMemberFix(MissingMemberImplementationError error);
    public ImplementMemberFix(MissingMemberImplementation2Error error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual void ConfigureContext(IGeneratorContext context);
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.ImplementsVsInheritsKeywordsImplementsFix : QuickFixBase {
    private ITypeImplementsClause myElement;
    public string Text { get; }
    public ImplementsVsInheritsKeywordsImplementsFix(ImplementKeywordWithNotInterfaceError error);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.ImplementsVsInheritsKeywordsInheritsFix : QuickFixBase {
    private IClassBaseClause myElement;
    public string Text { get; }
    public ImplementsVsInheritsKeywordsInheritsFix(ClassShouldInheritClassError error);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.ImportMethodFixItem : BulbActionBase {
    private KeyValuePair`2<INamespace, IList`1<IMethod>> myMethods;
    private IReference myReference;
    private static DeclaredElementPresenterStyle ourStyle;
    public KeyValuePair`2<INamespace, IList`1<IMethod>> Methods { get; }
    public string Text { get; }
    private static ImportMethodFixItem();
    public ImportMethodFixItem(KeyValuePair`2<INamespace, IList`1<IMethod>> method, IReference reference);
    public KeyValuePair`2<INamespace, IList`1<IMethod>> get_Methods();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual string get_Text();
    [CompilerGeneratedAttribute]
private bool _Lambda$__7-2(Conflict c);
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.ImportMethodQuickFix : object {
    private IReference myReference;
    private OneToListMap`2<INamespace, IMethod> myCache;
    private ResolveErrorType[] myAcceptedResolveErrors;
    public IBulbAction[] Items { get; }
    public IReference Reference { get; }
    public ImportMethodQuickFix(IReference reference);
    public ImportMethodQuickFix(IReference reference, ResolveErrorType[] acceptedResolveErrors);
    public ImportMethodQuickFix(NotResolvedError error);
    public ImportMethodQuickFix(NoTypeArgumentsInUsageError error);
    public ImportMethodQuickFix(NoTypeParametersInCandidateError error);
    public ImportMethodQuickFix(TypeParametersNumberMismatchError error);
    public ImportMethodQuickFix(TypeParametersNumberMismatchMultipleCandidatesError error);
    public ImportMethodQuickFix(IncorrectArgumentNumberError error);
    public ImportMethodQuickFix(IncorrectArgumentNumberMultipleCandidatesError error);
    public ImportMethodQuickFix(TypeInferenceError error);
    public ImportMethodQuickFix(QueryTypeInferenceError error);
    public ImportMethodQuickFix(TypeInferenceMultipleCandidatesError error);
    public ImportMethodQuickFix(QueryTypeInferenceMultipleCandidatesError error);
    public ImportMethodQuickFix(CannotConvertTypeInArgumentError error);
    public ImportMethodQuickFix(CannotConvertTypeInArgumentWarning error);
    public ImportMethodQuickFix(ImpossibleConvertTypeInArgumentWarning error);
    public ImportMethodQuickFix(IncorrectArgumentTypesError error);
    public ImportMethodQuickFix(StrictnessFailedError error);
    public ImportMethodQuickFix(MoreApplicableNotFoundError error);
    public ImportMethodQuickFix(MoreSpecificNotFoundError error);
    public virtual IBulbAction[] get_Items();
    public sealed virtual override IEnumerable`1<IntentionAction> CreateBulbItems();
    public IReference get_Reference();
    public sealed virtual override bool IsAvailable(IUserDataHolder cache);
    protected OneToListMap`2<INamespace, IMethod> Suggestions();
    protected virtual bool FilterByModule(IMethod method, ITreeNode element);
    [CompilerGeneratedAttribute]
private ImportMethodFixItem _Lambda$__24-0(KeyValuePair`2<INamespace, IList`1<IMethod>> pair);
    [CompilerGeneratedAttribute]
private bool _Lambda$__29-0(IMethod method);
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.ImportMethodQuickPopupFix : ImportMethodQuickFix {
    public string PopupMenuCaption { get; }
    public string PopupKey { get; }
    public Anchoring2D[] PopupAnchorings { get; }
    public ImportMethodQuickPopupFix(IReference reference, ResolveErrorType[] acceptedResolveErrors);
    public ImportMethodQuickPopupFix(NotResolvedError error);
    public ImportMethodQuickPopupFix(MultipleResolveCandidatesError error);
    public ImportMethodQuickPopupFix(NoTypeArgumentsInUsageError error);
    public ImportMethodQuickPopupFix(NoTypeParametersInCandidateError error);
    public ImportMethodQuickPopupFix(TypeParametersNumberMismatchError error);
    public ImportMethodQuickPopupFix(TypeParametersNumberMismatchMultipleCandidatesError error);
    public ImportMethodQuickPopupFix(IncorrectArgumentNumberError error);
    public ImportMethodQuickPopupFix(IncorrectArgumentNumberMultipleCandidatesError error);
    public sealed virtual override void FillMenuItemDescriptor(IBulbAction key, IMenuItemDescriptor descriptor);
    public sealed virtual override string get_PopupMenuCaption();
    public sealed virtual override string get_PopupKey();
    public sealed virtual override Anchoring2D[] get_PopupAnchorings();
    public sealed virtual override IEnumerable`1<IBulbAction> CreateBulbActions();
    public sealed virtual override bool IPopupBulbActionIsAvailable(IUserDataHolder cache);
    public sealed virtual override void OnPopupShown(Lifetime showingLifetime);
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.ImportTypeFromExternalSourcesFix : ImportTypeFromExternalSourcesFixBase {
    public ImportTypeFromExternalSourcesFix(NotResolvedError reference);
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.IncreaseTypeVisibilityFix : IncreaseTypeVisibilityFixBase {
    public IncreaseTypeVisibilityFix(InconsistentAccessibilityInDerivationError error);
    public IncreaseTypeVisibilityFix(InconsistentAccessibilityInMemberTypeError error);
    public IncreaseTypeVisibilityFix(InconsistentAccessibilityInParameterTypeError error);
    public IncreaseTypeVisibilityFix(InconsistentAccessibilityInReturnTypeError error);
    public IncreaseTypeVisibilityFix(InconsistentAccessibilityInTypeArgumentError error);
    public IncreaseTypeVisibilityFix(InconsistentAccessibilityInTypeParameterConstraintError error);
    public IncreaseTypeVisibilityFix(InconsistentAccessibilityInTupleComponentError error);
    private IncreaseTypeVisibilityFix(ITreeNode inaccessibleTypeUsage, ITypeMember accessibleElement);
    private static IReference GetTypeUsageReference(ITreeNode inaccessibleTypeUsage);
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual PsiLanguageType GetLanguage();
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.InvokeAsExtensionMethodFix : QuickFixBase {
    private IIndexExpression myExpression;
    public string Text { get; }
    public InvokeAsExtensionMethodFix(InvokeAsExtensionMethodWarning warning);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
internal class JetBrains.ReSharper.Intentions.VB.QuickFixes.LinqTools.ConvertForeachFix : QuickFixBase {
    private IForEachStatement myForeachStatement;
    public string Text { get; }
    public ConvertForeachFix(ForeachCanBeConvertedToQueryWarning warning);
    public ConvertForeachFix(ForeachCanBeConvertedToQueryUsingAnotherGetEnumeratorWarning warning);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder holder);
}
internal class JetBrains.ReSharper.Intentions.VB.QuickFixes.LinqTools.ConvertForeachPartlyFix : QuickFixBase {
    private IForEachStatement myForeachStatement;
    public string Text { get; }
    public ConvertForeachPartlyFix(ForeachCanBePartlyConvertedToQueryWarning warning);
    public ConvertForeachPartlyFix(ForeachCanBePartlyConvertedToQueryUsingAnotherGetEnumeratorWarning warning);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder holder);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.LinqTools.linqToolsWarningsQuickFixRegistration : object {
    public IEnumerable`1<Type> Dependencies { get; }
    public sealed virtual override IEnumerable`1<Type> get_Dependencies();
    public sealed virtual override void Register(IQuickFixesRegistrar table);
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.MakeNonReadonly3Fix : QuickFixBase {
    private IField myField;
    private IReferenceExpression myReferenceExpression;
    public string Text { get; }
    public MakeNonReadonly3Fix(PossibleAssignmentToReadonlyFieldWarning error);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
    public virtual string get_Text();
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.MakeNotInheritableFix : ModifierFixBase {
    protected string ModifiersText { get; }
    public MakeNotInheritableFix(IDeclaredElement declaredElement);
    protected virtual string get_ModifiersText();
    protected virtual void SetModifiers(IModifiersOwnerDeclaration declaration);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.MakePropertyReadOnlyFix : QuickFixBase {
    private IPropertyDeclaration myPropertyDeclaration;
    public string Text { get; }
    public MakePropertyReadOnlyFix(PropertyMustHaveSetterAndGetterError error);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.MakePropertyWriteOnlyFix : QuickFixBase {
    private IPropertyDeclaration myPropertyDeclaration;
    public string Text { get; }
    public MakePropertyWriteOnlyFix(PropertyMustHaveSetterAndGetterError error);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.MergeTryStatementsFix : QuickFixBase {
    private ITryStatement myTryStatement;
    private ITryStatement myChildTryStatement;
    public string Text { get; }
    public MergeTryStatementsFix(TryStatementsCanBeMergedWarning warning);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public abstract class JetBrains.ReSharper.Intentions.VB.QuickFixes.MultipleEnumerationFixBase : QuickFixBase {
    private PossibleMultipleEnumerationWarning myWarning;
    protected MultipleEnumerationFixBase(PossibleMultipleEnumerationWarning warning);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    protected abstract virtual void EnumerateGenericIEnumerable(IType enumerableType, IVBExpression valueExpression);
    protected abstract virtual void EnumerateIEnumerable(IVBExpression valueExpression);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.OptimizeImportsFix : QuickFixBase {
    private IImportDirective myImport;
    public string Text { get; }
    public string ScopedText { get; }
    public FileCollectorInfo FileCollectorInfo { get; }
    public OptimizeImportsFix(UnusedImportClauseWarning highlight);
    public virtual bool IsAvailable(IUserDataHolder cache);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public sealed virtual override string get_ScopedText();
    public sealed virtual override FileCollectorInfo get_FileCollectorInfo();
    public sealed virtual override Action`1<ITextControl> ExecuteAction(ISolution solution, Scope scope, IHighlighting sourceHighlighting, IProgressIndicator progress);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.RedundanciesInCodeCodeCleanupRegistration : object {
    public sealed virtual override void Register(IHighlightingCleanupItemsRegistrar registrar);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.RedundanciesInCodeQuickFixRegistration : object {
    public IEnumerable`1<Type> Dependencies { get; }
    public sealed virtual override IEnumerable`1<Type> get_Dependencies();
    public sealed virtual override void Register(IQuickFixesRegistrar table);
}
internal enum JetBrains.ReSharper.Intentions.VB.QuickFixes.ReferencedTypeKind : Enum {
    public int value__;
    public static ReferencedTypeKind NotInterface;
    public static ReferencedTypeKind CanBeInterface;
    public static ReferencedTypeKind Attribute;
}
internal class JetBrains.ReSharper.Intentions.VB.QuickFixes.ReferenceMethodAction : BulbActionBase {
    private VBImportMethodInfo myImportMethods;
    private IReferencePointer myReferencePointer;
    private static DeclaredElementPresenterStyle ourStyle;
    private ModuleReferencerService myModuleReferencerService;
    public string Text { get; }
    private static ReferenceMethodAction();
    public ReferenceMethodAction(ModuleReferencerService moduleReferencerService, VBImportMethodInfo importMethodInfo, IReference reference);
    protected virtual void ExecuteBeforePsiTransaction(ISolution solution, IProjectModelTransactionCookie cookie, IProgressIndicator progress);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private void ShowFailedToImport(ITextControl textControl);
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.ReferenceMethodQuickFix : object {
    private IReference myReference;
    private ResolveErrorType[] myAcceptedResolveErrors;
    private ModuleReferencerService myModuleReferenceService;
    private IList`1<VBImportMethodInfo> myCache;
    public IBulbAction[] Items { get; }
    public IReference Reference { get; }
    public ReferenceMethodQuickFix(IReference reference);
    public ReferenceMethodQuickFix(IReference reference, ResolveErrorType[] acceptedResolveErrors);
    public ReferenceMethodQuickFix(NotResolvedError error);
    public ReferenceMethodQuickFix(MultipleResolveCandidatesError error);
    public ReferenceMethodQuickFix(NoTypeArgumentsInUsageError error);
    public ReferenceMethodQuickFix(NoTypeParametersInCandidateError error);
    public ReferenceMethodQuickFix(TypeParametersNumberMismatchError error);
    public ReferenceMethodQuickFix(TypeParametersNumberMismatchMultipleCandidatesError error);
    public ReferenceMethodQuickFix(IncorrectArgumentNumberError error);
    public ReferenceMethodQuickFix(IncorrectArgumentNumberMultipleCandidatesError error);
    public ReferenceMethodQuickFix(TypeInferenceError error);
    public ReferenceMethodQuickFix(QueryTypeInferenceError error);
    public ReferenceMethodQuickFix(TypeInferenceMultipleCandidatesError error);
    public ReferenceMethodQuickFix(QueryTypeInferenceMultipleCandidatesError error);
    public ReferenceMethodQuickFix(CannotConvertTypeInArgumentError error);
    public ReferenceMethodQuickFix(CannotConvertTypeInArgumentWarning error);
    public ReferenceMethodQuickFix(ImpossibleConvertTypeInArgumentWarning error);
    public ReferenceMethodQuickFix(IncorrectArgumentTypesError error);
    public ReferenceMethodQuickFix(StrictnessFailedError error);
    public ReferenceMethodQuickFix(MoreApplicableNotFoundError error);
    public ReferenceMethodQuickFix(MoreSpecificNotFoundError error);
    public virtual IBulbAction[] get_Items();
    public sealed virtual override IEnumerable`1<IntentionAction> CreateBulbItems();
    public IReference get_Reference();
    public sealed virtual override bool IsAvailable(IUserDataHolder cache);
    private IList`1<VBImportMethodInfo> Suggestions();
    [CompilerGeneratedAttribute]
private ReferenceMethodAction _Lambda$__26-0(VBImportMethodInfo pair);
    [CompilerGeneratedAttribute]
private bool _Lambda$__31-0(IMethod method);
}
internal class JetBrains.ReSharper.Intentions.VB.QuickFixes.ReferenceNameUtil : object {
    public static ReferencedTypeKind GetReferencedTypeKind(IReferenceName referenceName);
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.RemoveAsyncModifierFix : QuickFixBase {
    private IVBDeclaration myDeclaration;
    public string Text { get; }
    public RemoveAsyncModifierFix(IVBDeclaration declaration);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.RemoveAwaitFix : QuickFixBase {
    private IAwaitExpression myAwaitExpression;
    public string Text { get; }
    public RemoveAwaitFix(IAwaitExpression awaitExpression);
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.RemoveCaseStatementFix : QuickFixBase {
    private ICaseStatement myCaseStatement;
    public string Text { get; }
    public RemoveCaseStatementFix(RedundantEmptyCaseElseWarning warning);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.RemoveExceptionFix : QuickFixBase {
    private IThrowStatement myStatement;
    public string Text { get; }
    public RemoveExceptionFix(PossibleIntendedRethrowWarning warning);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.RemoveExplicitArraySizeFix : QuickFixBase {
    private IArrayModifier myArrayModifier;
    public string Text { get; }
    public RemoveExplicitArraySizeFix(RedundantExplicitArraySizeWarning warning);
    public RemoveExplicitArraySizeFix(PartialArrayBoundsSpecificationError error);
    public RemoveExplicitArraySizeFix(ExplicitInitializationForArrayWithExplicitBoundsError error);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.RemoveIteratorModifierFix : QuickFixBase {
    private IVBDeclaration myDeclaration;
    public string Text { get; }
    public RemoveIteratorModifierFix(IVBDeclaration declaration);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.RemoveModifierFix : QuickFixBase {
    private ITokenNode myModifier;
    private IModifiersList myModifiersList;
    public string Text { get; }
    public RemoveModifierFix(ITokenNode modifier, IModifiersList modifiersList);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.RemoveRedundantCastFix : QuickFixBase {
    private ICastExpression myCastExpression;
    public string Text { get; }
    public RemoveRedundantCastFix(RedundantCastWarning warning);
    public RemoveRedundantCastFix(RedundantDirectCastWithValueTypeWarning warning);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.RemoveRedundantElementFix : ModernScopedQuickFixBase {
    [NotNullAttribute]
private ITreeNode myNodeToRemove;
    [NotNullAttribute]
private string myText;
    [NotNullAttribute]
private string myScopedText;
    public string Text { get; }
    public string ScopedText { get; }
    public bool IsReanalysisRequired { get; }
    public RemoveRedundantElementFix(RedundantPropertyParenthesesWarning warning);
    public RemoveRedundantElementFix(RedundantAttributeParenthesesWarning warning);
    public RemoveRedundantElementFix(RedundantSetterValueParameterDeclarationWarning warning);
    public RemoveRedundantElementFix(RedundantParenthesesWarning warning);
    public RemoveRedundantElementFix(RedundantIfStatementThenKeywordWarning warning);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public bool get_IsReanalysisRequired();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.RemoveRedundantQualifierFix : ModernScopedNonIncrementalQuickFixBase {
    private ITreeNode myQualifier;
    public string Text { get; }
    public string ScopedText { get; }
    public FileCollectorInfo FileCollectorInfo { get; }
    public bool IsReanalysisRequired { get; }
    public RemoveRedundantQualifierFix(ITreeNode qualifier);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual FileCollectorInfo get_FileCollectorInfo();
    public virtual bool get_IsReanalysisRequired();
    protected virtual ITreeNode TryGetContextTreeNode();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
internal class JetBrains.ReSharper.Intentions.VB.QuickFixes.RemoveReturnValueFix : QuickFixBase {
    private IReturnStatement myReturnStatement;
    public string Text { get; }
    public RemoveReturnValueFix(IReturnStatement returnStatement);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.RemoveTypeArgumentsFix : QuickFixBase {
    private ITypeArgumentList myTypeArgumentList;
    public string Text { get; }
    public RemoveTypeArgumentsFix(NoTypeParametersInCandidateError error);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.RemoveUnreachableCodeFix : QuickFixBase {
    private ITreeRange myRange;
    public string Text { get; }
    public RemoveUnreachableCodeFix(UnreachableCodeWarning error);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static Action ReplaceExpression(T expression, Func`2<T, IVBExpression> replaceBy);
    private static Action ReplaceStatement(T statement, Func`2<T, IEnumerable`1<IVBStatement>> replaceBy);
    private Action GetRemoveAction();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [CompilerGeneratedAttribute]
private void _Lambda$__7-8();
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.ReplaceConditionalWithBranchFix : ReplaceFixBase {
    public string Text { get; }
    public ReplaceConditionalWithBranchFix(ConditionalTernaryEqualBranchWarning warning);
    public virtual string get_Text();
}
public abstract class JetBrains.ReSharper.Intentions.VB.QuickFixes.ReplaceFixBase : QuickFixBase {
    private IVBExpression myExpressionToReplace;
    private IVBExpression myExpressionToSubstitute;
    protected ReplaceFixBase(IVBExpression expressionToReplace, IVBExpression expressionToSubstitute);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.ReplaceIIfWithBranchFix : ReplaceFixBase {
    public string Text { get; }
    public ReplaceIIfWithBranchFix(IIfEqualBranchWarning warning);
    public virtual string get_Text();
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.ReplaceWithBoolConstFix : QuickFixBase {
    private IVBExpression myExpression;
    private bool myValue;
    private string StringValue { get; }
    public string Text { get; }
    public ReplaceWithBoolConstFix(RedundantLogicalConditionalExpressionOperandWarning warning);
    public ReplaceWithBoolConstFix(EqualExpressionComparisonWarning warning);
    public ReplaceWithBoolConstFix(ConditionIsAlwaysTrueOrFalseWarning warning);
    private string get_StringValue();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.ReplaceWithOperatorIsFix : QuickFixBase {
    private IVBExpression myExpressionToReplace;
    private IVBExpression myQualifierOfGetType;
    private IDeclaredType myType;
    public string Text { get; }
    public ReplaceWithOperatorIsFix(OperatorIsCanBeUsedWarning warning);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.ReplaceWithTryCastAndCheckForNullFix : QuickFixBase {
    private IBlockIfStatement myIfStatement;
    private IType myType;
    private bool myUseVar;
    private IVBExpression myCastSource;
    private string myCastDestDimName;
    private IVBStatement myTargetDimDeclaration;
    private IReadOnlyCollection`1<string> myUniqueNames;
    public string Text { get; }
    public ReplaceWithTryCastAndCheckForNullFix(CanBeReplacedWithTryCastAndCheckForNullWarning warning);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.ReplaceWithUppercaseSuffixFix : QuickFixBase {
    private IVBLiteralExpression myLiteralExpression;
    public string Text { get; }
    public ReplaceWithUppercaseSuffixFix(LongLiteralEndingLowerLWarning warning);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.SetLanguageLevelFix : SetLanguageLevelFixBase`2<VBLanguageLevel, VBLanguageVersion> {
    protected VBLanguageVersion LatestLanguageVersion { get; }
    protected VBLanguageVersion LatestMajorLanguageVersion { get; }
    protected VBLanguageVersion PreviewLanguageVersion { get; }
    protected IComparer`1<VBLanguageLevel> LanguageLevelComparer { get; }
    protected Key`1<Boxed`1<VBLanguageLevel>> LanguageLevelPsiDataCacheKey { get; }
    public SetLanguageLevelFix(VB11LanguageFeatureError highlighting);
    public SetLanguageLevelFix(VB14LanguageFeatureError highlighting);
    public SetLanguageLevelFix(VB15LanguageFeatureError highlighting);
    public SetLanguageLevelFix(VB15_3LanguageFeatureError highlighting);
    public SetLanguageLevelFix(VB15_5LanguageFeatureError highlighting);
    public SetLanguageLevelFix(VB16LanguageFeatureError highlighting);
    public sealed virtual override bool IsAvailable(IUserDataHolder cache);
    public sealed virtual override IEnumerable`1<IntentionAction> CreateBulbItems();
    protected virtual VBLanguageVersion get_LatestLanguageVersion();
    protected virtual VBLanguageVersion get_LatestMajorLanguageVersion();
    protected virtual VBLanguageVersion get_PreviewLanguageVersion();
    protected virtual IComparer`1<VBLanguageLevel> get_LanguageLevelComparer();
    protected virtual Key`1<Boxed`1<VBLanguageLevel>> get_LanguageLevelPsiDataCacheKey();
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.SimplifyConditionalOperatorFix : QuickFixBase {
    private IVBExpression myTernaryExpression;
    private IVBExpression myConditionExpression;
    private IVBExpression myThenExpression;
    private IVBExpression myElseExpression;
    private Nullable`1<bool> myThen;
    private Nullable`1<bool> myElse;
    public string Text { get; }
    public SimplifyConditionalOperatorFix(SimplifyConditionalOperatorWarning warning);
    public SimplifyConditionalOperatorFix(SimplifyIIfWarning warning);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.SpecifyStringComparisonFix : QuickFixBase {
    private SpecifyStringComparisonWarning myWarning;
    public string Text { get; }
    public SpecifyStringComparisonFix(SpecifyStringComparisonWarning warning);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static IMethod GetStringEqualsMethod(IPsiModule module);
    private static IField GetComparioson(IPsiModule module, bool invariantCulture, bool ignoreCase);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.ToAutoProperty2Fix : ToAutoPropertyFix {
    public string Text { get; }
    public ToAutoProperty2Fix(ConvertToAutoPropertyWithPrivateSetterWarning warning);
    public virtual string get_Text();
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.ToAutoPropertyFix : QuickFixBase {
    [NotNullAttribute]
public static Key InstanceKey;
    [NotNullAttribute]
private IPropertyDeclaration myDeclaration;
    public string Text { get; }
    private static ToAutoPropertyFix();
    protected ToAutoPropertyFix(IPropertyDeclaration declaration);
    public ToAutoPropertyFix(ConvertToAutoPropertyWarning warning);
    public ToAutoPropertyFix(ConvertToAutoPropertyWhenPossibleWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.ToImplicitlyTypedFix : ModernScopedQuickFixBase {
    [NotNullAttribute]
public static Key InstanceKey;
    [NotNullAttribute]
private IVBTreeNode myDeclaration;
    public string Text { get; }
    public string ScopedText { get; }
    public ITreeNode ReanalysisDependencyRoot { get; }
    private static ToImplicitlyTypedFix();
    public ToImplicitlyTypedFix(UseImplicitlyTypedVariableEvidentWarning warning);
    public ToImplicitlyTypedFix(UseImplicitlyTypedVariableWarning warning);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public ITreeNode get_ReanalysisDependencyRoot();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private void Execute();
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.UnmarkNullnessFix : QuickFixBase {
    private IAttributesOwnerDeclaration myAttributesOwnerDeclaration;
    private IAttribute myAttribute;
    public string Text { get; }
    public UnmarkNullnessFix(AnnotationRedundancyInHierarchyWarning warning);
    public UnmarkNullnessFix(AnnotationConflictInHierarchyWarning warning);
    public UnmarkNullnessFix(AnnotationRedundancyAtValueTypeWarning warning);
    public UnmarkNullnessFix(ContainerAnnotationRedundancyWarning warning);
    public UnmarkNullnessFix(ImplicitAnnotationRedundancyWarning warning);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
    public virtual string get_Text();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.UsageChecking.VBCallSiteFieldToConstConverter : object {
    public sealed virtual override void Convert(IReference callSiteReference, IField const);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.UsageChecking.VbFixTypeHelper : object {
    public sealed virtual override bool IsArrayLengthAccess(IReference reference);
    public sealed virtual override void FixArrayLengthAccess(IReference reference);
    public sealed virtual override bool NaturalizeArgumentExpressionTypeBeforeChangingTheParameterType(IReference reference, IParameter parameter);
    public sealed virtual override IEnumerable`1<ILocalVariable> LocalsToCorrectType(IDeclaredElement element, IType newType, IExpression usage);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.UsageChecking.VBMakeReturnTypeVoidHelper : object {
    public sealed virtual override IType GetVoidReturnType(IDeclaration declaration);
    public sealed virtual override void PrepareBodyForReturnRemove(IDeclaration declaration);
    public sealed virtual override bool IsReturnStatement(IStatement statement, IExpression& returnValue);
    public sealed virtual override bool IsReturnScope(ITreeNode node);
    public sealed virtual override void RemoveReturnValue(IStatement statement, IStatement& expressionStatementLeft);
    public sealed virtual override string GetQuickFixText(IDeclaration declaration);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.UsageChecking.VBMemberFromParameterHelper : object {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ValueTuple`2[] AccessRightsOptionsBeforeVB14;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ValueTuple`2[] AccessRightsOptionsSinceVB14;
    public string FieldPattern { get; }
    public bool IsAccessorsWithDifferentAccessSupported { get; }
    public bool CaseSensitive { get; }
    private static VBMemberFromParameterHelper();
    public sealed virtual override IEnumerable`1<IStatement> BodyStatements(IParametersOwnerDeclaration constructorDeclaration);
    public sealed virtual override IExpression BodyExpression(IParametersOwnerDeclaration constructorDeclaration);
    public sealed virtual override IEnumerable`1<ITypeMemberDeclaration> NeighbourDeclarations(IParametersOwnerDeclaration constructorDeclaration);
    public sealed virtual override bool IsMemberAssignment(IStatement statement, ITypeMember& member, IParameter& parameter);
    public sealed virtual override bool IsMemberAssignment(IExpression expression, ITypeMember& member, IParameter& parameter);
    public sealed virtual override bool IsInitializedInDeclaration(ITypeMember typeMember, IParameter& parameter, ITreeNode& assignmentNode);
    public sealed virtual override bool IsMemberWithState(ITypeMember typeMember);
    public sealed virtual override bool CanInitialize(ITypeMember typeMember);
    public sealed virtual override bool IsCheckOfCodeInvariant(IStatement statement);
    public sealed virtual override bool IsPrimaryConstructor(IConstructor constructor, Boolean& isRecord);
    public sealed virtual override bool IsPrimaryConstructor(IParametersOwnerDeclaration constructorDeclaration);
    public sealed virtual override void EnsureStatementBody(IParametersOwnerDeclaration constructorDeclaration);
    public sealed virtual override void AddAssignmentToBody(IParametersOwnerDeclaration constructorDeclaration, IStatement anchorStatement, bool insertBefore, IParameter parameter, ITypeMember member);
    public sealed virtual override string get_FieldPattern();
    public sealed virtual override bool get_IsAccessorsWithDifferentAccessSupported();
    public sealed virtual override bool get_CaseSensitive();
    public sealed virtual override bool IsGetOnlyAutoPropertiesSupported(ITreeNode context);
    public sealed virtual override ValueTuple`2[] GetAutoPropertyAccessRightsOptions(ITreeNode context);
    public sealed virtual override string GetAutoPropertyPattern(ValueTuple`2<AccessRights, AccessRights> pair);
    public sealed virtual override string GetAutoPropertyDescription(ValueTuple`2<AccessRights, AccessRights> pair);
    public sealed virtual override ITypeMemberDeclaration AddTypeMemberDeclaration(ITypeDeclaration targetTypeDeclaration, ITypeMemberDeclaration anchorMember, bool insertBefore, string pattern, string name, IType type);
    public sealed virtual override void AddConstructorDeclarationStubToStruct(ITypeDeclaration structDeclaration);
    public sealed virtual override ITypeMemberDeclaration AddConstructorDeclaration(ITypeDeclaration typeDeclaration);
    public sealed virtual override bool HasChainedConstructorInitializer(ITypeMemberDeclaration ctorDeclaration, Int32& argumentsCount, IConstructor& targetConstructor);
    public sealed virtual override void EnsureHasChainedConstructorInitializer(ITypeMemberDeclaration ctorDeclaration);
    public sealed virtual override void PassParameterToChainedConstructorInitializer(ITypeMemberDeclaration ctorDeclaration, string parameterName, ParameterKind kind, int atIndex);
    public sealed virtual override IParameterDeclaration AddConstructorParameter(ITypeMemberDeclaration ctorDeclaration, string parameterName, ParameterKind kind, IType type, int atIndex);
    public sealed virtual override bool IsParameterPassedByChain(ITypeMemberDeclaration ctorDeclaration, IParameterDeclaration parameterDeclaration, Int32& atIndex);
    public sealed virtual override IConstructor TryGetPrimaryConstructor(ITypeElement typeElement);
    public sealed virtual override bool IsParameterUsedImplicitly(IParameter parameter);
    public sealed virtual override IParameter TryFindPrimaryConstructorParameterForExplicitMemberWithoutInitializer(ITypeMemberDeclaration typeMemberDeclaration);
    public sealed virtual override void InitializeExplicitMemberByPrimaryConstructorParameter(ITypeMemberDeclaration typeMemberDeclaration, IParameter parameter);
    public sealed virtual override bool HasArgumentToChainedConstructorParameter(ITypeMemberDeclaration ctorDeclaration, IParameter matchingParameter);
    public sealed virtual override bool CanBeAssignedFromParameter(ITypeOwner typeOwner, IParameter parameter, ITreeNode context);
    public sealed virtual override void ReplaceAssignmentSourceWithParameter(ITreeNode assignmentNode, IParameter parameter);
    public sealed virtual override bool HasDeclarationExpressionsWithUsagesWithExternalUsages(ITreeNode assignmentNode);
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.UsageChecking.VBRemoveLabelFix : QuickFixBase {
    private ILabelDeclaration myDeclaration;
    public string Text { get; }
    public VBRemoveLabelFix(UnusedLabelWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.UsageChecking.VBRemoveUnusedVarHelper : object {
    public sealed virtual override bool CanRemoveVariableDeclaration(IDeclaration declaration);
    public sealed virtual override void RemoveVariableDeclaration(IDeclaration declaration, ITreeNode& rangeToHighlight, Action& additionalUndoableAction);
    public sealed virtual override bool CanRemoveUsage(ITreeNode usage);
    public sealed virtual override void RemoveUsage(ITreeNode usage, IDeclaredElement variableElement, ITreeNode& rangeToHighlight);
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.UsageChecking.VBToConstFix : QuickFixBase {
    private IDeclaration myDeclaration;
    public string Text { get; }
    public VBToConstFix(ConvertToConstantWarningBase error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.UsageChecking.VBUsageCheckingCleanupItemsProvider : object {
    public sealed virtual override void Register(IHighlightingCleanupItemsRegistrar registrar);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.UsageChecking.VBUsageCheckingWarningsQuickfixesQuickFixRegistration : object {
    public IEnumerable`1<Type> Dependencies { get; }
    public sealed virtual override IEnumerable`1<Type> get_Dependencies();
    public sealed virtual override void Register(IQuickFixesRegistrar table);
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.UseImplicitByValModifierFix : ModernScopedQuickFixBase {
    [NotNullAttribute]
private IVBParameterDeclaration myParameterDeclaration;
    [NotNullAttribute]
private ITokenNode myByValModifier;
    public string Text { get; }
    public string ScopedText { get; }
    public bool IsReanalysisRequired { get; }
    public UseImplicitByValModifierFix(UseImplicitByValModifierWarning warning);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public bool get_IsReanalysisRequired();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[ObsoleteAttribute("Use ChangeTypeFix")]
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.VBChangeTypeFix : QuickFix {
    public VBChangeTypeFix(CannotConvertTypeInArgumentError error);
    public VBChangeTypeFix(CannotConvertTypeInArgumentWarning error);
    public VBChangeTypeFix(ImpossibleConvertTypeInArgumentWarning error);
    public VBChangeTypeFix(CannotConvertTypeInMemberInitializerError error);
    public VBChangeTypeFix(CannotConvertTypeInMemberInitializerWarning error);
    public VBChangeTypeFix(ImpossibleConvertTypeInMemberInitializerWarning error);
    public VBChangeTypeFix(IncorrectArrayElementTypeError error);
    public VBChangeTypeFix(CannotConvertTypeInAssignmentError error);
    public VBChangeTypeFix(CannotConvertTypeInAssignmentWarning error);
    public VBChangeTypeFix(ImpossibleConvertTypeInAssignmentWarning error);
    public VBChangeTypeFix(CannotConvertTypeInDeclarationError error);
    public VBChangeTypeFix(CannotConvertTypeInDeclarationWarning error);
    public VBChangeTypeFix(ImpossibleConvertTypeInDeclarationWarning error);
    public VBChangeTypeFix(CannotConvertTypeInReturnError error);
    public VBChangeTypeFix(CannotConvertTypeInReturnWarning error);
    public VBChangeTypeFix(ImpossibleConvertTypeInReturnWarning error);
    public VBChangeTypeFix(CannotDetermineNullCoalescingExpressionType2Error error);
    public VBChangeTypeFix(CannotDetermineNullCoalescingExpressionTypeError error);
    public VBChangeTypeFix(CannotDetermineTernaryExpressionTypeError error);
    public VBChangeTypeFix(CannotDetermineTernaryExpressionType2Error error);
    public VBChangeTypeFix(WrongReturnTypeOfAsyncLambdaError error);
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
internal class JetBrains.ReSharper.Intentions.VB.QuickFixes.VBImportMethodInfo : object {
    private IEnumerable`1<DeclaredElementEnvoy`1<IMethod>> myMethods;
    private IPsiModule myModule;
    private DeclaredElementEnvoy`1<INamespace> myNamespace;
    public IEnumerable`1<IMethod> Methods { get; }
    public IPsiModule Module { get; }
    public INamespace Namespace { get; }
    public VBImportMethodInfo(IPsiModule module, INamespace namespace, IList`1<IMethod> methods);
    public IEnumerable`1<IMethod> get_Methods();
    public IPsiModule get_Module();
    public INamespace get_Namespace();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.VbImportTypeHelper : object {
    public sealed virtual override IEnumerable`1<ITypeElement> FindTypeCandidates(IReference reference, ImportTypeCacheFactory factory);
    private static IEnumerable`1<ITypeElement> TypesWithGivenNames(IReference reference, int typeArgumentsCount, ImportTypeResolver typeResolver);
    public sealed virtual override bool ReferenceTargetCanBeType(IReference reference);
    public sealed virtual override bool ReferenceTargetIsUnlikelyBeType(IReference reference);
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.VBMakeReadonlyFix : MakeReadonlyFix {
    public VBMakeReadonlyFix(NonReadonlyFieldInGetHashCodeWarning warning);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.VBQuickFixUtilComponent : object {
    public sealed virtual override IReference BindTo(IReference reference, ITypeElement typeElement, Action`1& moveCaretAction, bool targetHasGenericOverloads);
    private static ITypeArgumentList LeaveOnlyAngles(IReference reference);
    public sealed virtual override IReference AddImportsForExtensionMethod(IReference reference, IList`1<IMethod> extensionMethods);
    private static ITypeArgumentList ForgeFakeList(IReference reference, ITypeElement typeElement);
    private static ITypeArgumentList GetTypeArgs(IReference reference);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
internal class JetBrains.ReSharper.Intentions.VB.QuickFixes.VBVisibilityFixHelper : object {
    public sealed virtual override bool IVisibilityFixLanguageHelper_CanFixAccessibility(IReference reference);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.WinRTQuickFixRegistration : object {
    public IEnumerable`1<Type> Dependencies { get; }
    public sealed virtual override IEnumerable`1<Type> get_Dependencies();
    public sealed virtual override void Register(IQuickFixesRegistrar table);
}
public abstract class JetBrains.ReSharper.Intentions.VB.QuickFixes.WorkflowDrivenImplementMembersFix`1 : QuickFixBase {
    private IClassLikeDeclaration myDeclaration;
    protected IClassLikeDeclaration Declaration { get; }
    protected WorkflowDrivenImplementMembersFix`1(IClassLikeDeclaration declaration);
    protected IClassLikeDeclaration get_Declaration();
    protected sealed virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public sealed virtual void Execute(ISolution solution, ITextControl textControl);
    protected virtual void ConfigureContext(IGeneratorContext context);
}
public class JetBrains.ReSharper.Intentions.VB.QuickFixes.WrapWithGetTypeFix : QuickFixBase {
    private IReference myReference;
    public string Text { get; }
    public WrapWithGetTypeFix(NotValidError err);
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
internal class JetBrains.ReSharper.Intentions.VB.RemoveAttribute2Fix : QuickFixBase {
    private IAttribute myAttribute;
    private IAttributesOwnerDeclaration myAttributeOwnerDeclaration;
    public string Text { get; }
    public RemoveAttribute2Fix(ThreadStaticAtInstanceFieldWarning warning);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public class JetBrains.ReSharper.Intentions.VB.Resources.Strings : object {
    private static ILogger ourLog;
    private static Lazy`1<JetResourceManager> ourResourceManager;
    [EditorBrowsableAttribute("2")]
public static JetResourceManager ResourceManager { get; }
    public static string AddAnotherAccessor_Text { get; }
    public static string AddAsyncModifier_Text { get; }
    public static string AddCallKeyword_Text { get; }
    public static string AddIteratorModifier_Text { get; }
    public static string AddOf_Text { get; }
    public static string AddOtherAccessors_Text { get; }
    public static string AddOverloads_Text { get; }
    public static string AddShadows_Text { get; }
    public static string Add_ConstraintTo_Of__Text { get; }
    public static string AwaitExpression_Text { get; }
    public static string CanBeNull_Text { get; }
    public static string CastSecondOperandTo__Text { get; }
    public static string CastTo__Text { get; }
    public static string Cast_To__Text { get; }
    public static string ChangeFunctionIntoSub_Text { get; }
    public static string CompareADifferenceWithEpsilon_Text { get; }
    public static string ConvertIntoLINQExpression_Text { get; }
    public static string ConvertPartOfBodyIntoLINQExpression_Text { get; }
    public static string ConvertToFor_Text { get; }
    public static string ConvertToSelectCaseStatement_Text { get; }
    public static string CorrectSharedAccess_Text { get; }
    public static string CouldnTConvertIteratorWithoutAnyReachable_Text { get; }
    public static string CreateMustInheritDefaultProperty__Text { get; }
    public static string CreateMustInheritOverloadFor___Text { get; }
    public static string CreateMustInherit___Text { get; }
    public static string CreateConstructor__Text { get; }
    public static string CreateDefaultProperty_Text { get; }
    public static string CreateDelegate__Text { get; }
    public static string CreateEnumMember__Text { get; }
    public static string CreateEvent__Text { get; }
    public static string CreateField__Text { get; }
    public static string CreateLocalVariable__Text { get; }
    public static string CreateMustOverrideProperty__Text { get; }
    public static string CreateNestedDelegate__Text { get; }
    public static string CreateNested___Text { get; }
    public static string CreateOverloadFor___Text { get; }
    public static string CreateOverloadWithoutParameter_Text { get; }
    public static string CreateOverloadWithoutSelectedParameters_Text { get; }
    public static string CreateParameter_InContaining_AndUpdate_Text { get; }
    public static string CreateParameter_InContaining__Text { get; }
    public static string CreateProperty__Text { get; }
    public static string CreateReadOnlyProperty__Text { get; }
    public static string Create_AccessorFor_InBase_Text { get; }
    public static string Create_AccessorFor_InInterface_Text { get; }
    public static string Create_AccessorFor__Text { get; }
    public static string Create___Text { get; }
    public static string DisableAndRestoreWithComments_Text { get; }
    public static string DisableOnceWithComment_Text { get; }
    public static string DisableWithPreprocessorDirective_Text { get; }
    public static string EnumerateToArray_Text { get; }
    public static string EnumerateToList_Text { get; }
    public static string EnumerateWithMethodAsArrayInternal_Text { get; }
    public static string EnumerateWithMethodAsListInternal_Text { get; }
    public static string FailedToImportMethod_Text { get; }
    public static string FailedToImportType_Text { get; }
    public static string FixFloatingPointNumbersComparing__Text { get; }
    public static string GenerateDisposePattern_Text { get; }
    public static string GenerateEqualityMembers_Text { get; }
    public static string GenerateRelationalMembers_Text { get; }
    public static string ImplementInDerivedClasses_Text { get; }
    public static string ImplementMemberIn_Text { get; }
    public static string ImplementMembers_Text { get; }
    public static string ImportNamespace_Text { get; }
    public static string ImportNamespace__Text { get; }
    public static string InsertInferredTypeArguments_Text { get; }
    public static string IntroduceVariable_Text { get; }
    public static string InvertIf_Text { get; }
    public static string InvokeAsExtensionMethod_Text { get; }
    public static string IterateCollectionViaForEach_Text { get; }
    public static string JoinDeclarationAndAssignment_Text { get; }
    public static string MakeProperty_ReadOnly_Text { get; }
    public static string MakeProperty_WriteOnly_Text { get; }
    public static string MakeSuffixUppercase_Text { get; }
    public static string Make__NonReadonly_Text { get; }
    public static string MergeTryCatchFinallyStatements_Text { get; }
    public static string MergeTwoIfS_Text { get; }
    public static string MoveReturnValueBeforeReturnStatement_Text { get; }
    public static string MoveToAnotherFileToMatchTypeName_Text { get; }
    public static string NotNull_Text { get; }
    public static string OverrideInDerivedClasses_Text { get; }
    public static string OverrideMemberIn_Text { get; }
    public static string Reference_AndImportNamespace__Text { get; }
    public static string Reference_AndUseMethod__Text { get; }
    public static string RemoveAllValueParameters_Text { get; }
    public static string RemoveAsyncModifier_Text { get; }
    public static string RemoveAttribute_Text { get; }
    public static string RemoveAwait_Text { get; }
    public static string RemoveByValModifier_Text { get; }
    public static string RemoveByValModifiers_Text { get; }
    public static string RemoveCaseBranch_Text { get; }
    public static string RemoveExplicitArraySizeSpecification_Text { get; }
    public static string RemoveExpression_Text { get; }
    public static string RemoveIteratorModifier_Text { get; }
    public static string RemoveParentheses_Text { get; }
    public static string RemoveRedundantCast_Text { get; }
    public static string RemoveRedundantImportsInFile_Text { get; }
    public static string RemoveRedundantImports_Text { get; }
    public static string RemoveRedundantParentheses_Text { get; }
    public static string RemoveRedundantQualifiers_Text { get; }
    public static string RemoveRedundantQualifier_Text { get; }
    public static string RemoveReturnValue_Text { get; }
    public static string RemoveThenKeywords_Text { get; }
    public static string RemoveThenKeyword_Text { get; }
    public static string RemoveTypeArguments_Text { get; }
    public static string RemoveUnreachableCode_Text { get; }
    public static string RemoveUnusedLabel_Text { get; }
    public static string RemoveValueParameter_Text { get; }
    public static string Remove_Modifier_Text { get; }
    public static string RenameFileToMatchTypeName_Text { get; }
    public static string ReplaceByOperatorTypeOfIsInvocation_Text { get; }
    public static string ReplaceExpressionWith__Text { get; }
    public static string ReplaceIfWithBranch_Text { get; }
    public static string ReplaceIIfWithBranch_Text { get; }
    public static string ReplaceWithDim__TryCast__If_IsNotNothing_Text { get; }
    public static string ReplaceWithImplements_Text { get; }
    public static string ReplaceWithInherits_Text { get; }
    public static string ReplaceWith___Call_Text { get; }
    public static string RethrowException_Text { get; }
    public static string ReverseAssignments_Text { get; }
    public static string ReverseAssignment_Text { get; }
    public static string SafelyCastTo__Text { get; }
    public static string SafelyCast_To__Text { get; }
    public static string SetReturnTypeTo__Text { get; }
    public static string SimplifyConditionalOperator_Text { get; }
    public static string SpecifyStringComparison_Text { get; }
    public static string SpecifyType_Text { get; }
    public static string SplitDeclarationAndAssignment_Text { get; }
    public static string SplitIntoSeparateDeclarations_Text { get; }
    public static string SplitIntoTwoIfS_Text { get; }
    public static string SplitString_Text { get; }
    public static string SurroundWithWith_Text { get; }
    public static string ToAutomaticProperty_Text { get; }
    public static string ToAutoPropertyWithPrivateSetter_Text { get; }
    public static string ToAutoProperty_Text { get; }
    public static string ToCollectionReturn_Text { get; }
    public static string ToConst_Text { get; }
    public static string ToFunction_Text { get; }
    public static string ToImplicitlyTypedVariables_Text { get; }
    public static string ToImplicitlyTyped_Text { get; }
    public static string ToPropertyWithBackingField_Text { get; }
    public static string ToSub_Text { get; }
    public static string UseMethod_Text { get; }
    public static string UseMethod__Text { get; }
    public static string WrapTypeNameWithGetType_Text { get; }
    public static string _WillConflictWith__Text { get; }
    private static Strings();
    public static JetResourceManager get_ResourceManager();
    public static string Choice(string format, Object[] args);
    public static string get_AddAnotherAccessor_Text();
    public static string get_AddAsyncModifier_Text();
    public static string get_AddCallKeyword_Text();
    public static string get_AddIteratorModifier_Text();
    public static string get_AddOf_Text();
    public static string get_AddOtherAccessors_Text();
    public static string get_AddOverloads_Text();
    public static string get_AddShadows_Text();
    public static string get_Add_ConstraintTo_Of__Text();
    public static string get_AwaitExpression_Text();
    public static string get_CanBeNull_Text();
    public static string get_CastSecondOperandTo__Text();
    public static string get_CastTo__Text();
    public static string get_Cast_To__Text();
    public static string get_ChangeFunctionIntoSub_Text();
    public static string get_CompareADifferenceWithEpsilon_Text();
    public static string get_ConvertIntoLINQExpression_Text();
    public static string get_ConvertPartOfBodyIntoLINQExpression_Text();
    public static string get_ConvertToFor_Text();
    public static string get_ConvertToSelectCaseStatement_Text();
    public static string get_CorrectSharedAccess_Text();
    public static string get_CouldnTConvertIteratorWithoutAnyReachable_Text();
    public static string get_CreateMustInheritDefaultProperty__Text();
    public static string get_CreateMustInheritOverloadFor___Text();
    public static string get_CreateMustInherit___Text();
    public static string get_CreateConstructor__Text();
    public static string get_CreateDefaultProperty_Text();
    public static string get_CreateDelegate__Text();
    public static string get_CreateEnumMember__Text();
    public static string get_CreateEvent__Text();
    public static string get_CreateField__Text();
    public static string get_CreateLocalVariable__Text();
    public static string get_CreateMustOverrideProperty__Text();
    public static string get_CreateNestedDelegate__Text();
    public static string get_CreateNested___Text();
    public static string get_CreateOverloadFor___Text();
    public static string get_CreateOverloadWithoutParameter_Text();
    public static string get_CreateOverloadWithoutSelectedParameters_Text();
    public static string get_CreateParameter_InContaining_AndUpdate_Text();
    public static string get_CreateParameter_InContaining__Text();
    public static string get_CreateProperty__Text();
    public static string get_CreateReadOnlyProperty__Text();
    public static string get_Create_AccessorFor_InBase_Text();
    public static string get_Create_AccessorFor_InInterface_Text();
    public static string get_Create_AccessorFor__Text();
    public static string get_Create___Text();
    public static string get_DisableAndRestoreWithComments_Text();
    public static string get_DisableOnceWithComment_Text();
    public static string get_DisableWithPreprocessorDirective_Text();
    public static string get_EnumerateToArray_Text();
    public static string get_EnumerateToList_Text();
    public static string get_EnumerateWithMethodAsArrayInternal_Text();
    public static string get_EnumerateWithMethodAsListInternal_Text();
    public static string get_FailedToImportMethod_Text();
    public static string get_FailedToImportType_Text();
    public static string get_FixFloatingPointNumbersComparing__Text();
    public static string get_GenerateDisposePattern_Text();
    public static string get_GenerateEqualityMembers_Text();
    public static string get_GenerateRelationalMembers_Text();
    public static string get_ImplementInDerivedClasses_Text();
    public static string get_ImplementMemberIn_Text();
    public static string get_ImplementMembers_Text();
    public static string get_ImportNamespace_Text();
    public static string get_ImportNamespace__Text();
    public static string get_InsertInferredTypeArguments_Text();
    public static string get_IntroduceVariable_Text();
    public static string get_InvertIf_Text();
    public static string get_InvokeAsExtensionMethod_Text();
    public static string get_IterateCollectionViaForEach_Text();
    public static string get_JoinDeclarationAndAssignment_Text();
    public static string get_MakeProperty_ReadOnly_Text();
    public static string get_MakeProperty_WriteOnly_Text();
    public static string get_MakeSuffixUppercase_Text();
    public static string get_Make__NonReadonly_Text();
    public static string get_MergeTryCatchFinallyStatements_Text();
    public static string get_MergeTwoIfS_Text();
    public static string get_MoveReturnValueBeforeReturnStatement_Text();
    public static string get_MoveToAnotherFileToMatchTypeName_Text();
    public static string get_NotNull_Text();
    public static string get_OverrideInDerivedClasses_Text();
    public static string get_OverrideMemberIn_Text();
    public static string get_Reference_AndImportNamespace__Text();
    public static string get_Reference_AndUseMethod__Text();
    public static string get_RemoveAllValueParameters_Text();
    public static string get_RemoveAsyncModifier_Text();
    public static string get_RemoveAttribute_Text();
    public static string get_RemoveAwait_Text();
    public static string get_RemoveByValModifier_Text();
    public static string get_RemoveByValModifiers_Text();
    public static string get_RemoveCaseBranch_Text();
    public static string get_RemoveExplicitArraySizeSpecification_Text();
    public static string get_RemoveExpression_Text();
    public static string get_RemoveIteratorModifier_Text();
    public static string get_RemoveParentheses_Text();
    public static string get_RemoveRedundantCast_Text();
    public static string get_RemoveRedundantImportsInFile_Text();
    public static string get_RemoveRedundantImports_Text();
    public static string get_RemoveRedundantParentheses_Text();
    public static string get_RemoveRedundantQualifiers_Text();
    public static string get_RemoveRedundantQualifier_Text();
    public static string get_RemoveReturnValue_Text();
    public static string get_RemoveThenKeywords_Text();
    public static string get_RemoveThenKeyword_Text();
    public static string get_RemoveTypeArguments_Text();
    public static string get_RemoveUnreachableCode_Text();
    public static string get_RemoveUnusedLabel_Text();
    public static string get_RemoveValueParameter_Text();
    public static string get_Remove_Modifier_Text();
    public static string get_RenameFileToMatchTypeName_Text();
    public static string get_ReplaceByOperatorTypeOfIsInvocation_Text();
    public static string get_ReplaceExpressionWith__Text();
    public static string get_ReplaceIfWithBranch_Text();
    public static string get_ReplaceIIfWithBranch_Text();
    public static string get_ReplaceWithDim__TryCast__If_IsNotNothing_Text();
    public static string get_ReplaceWithImplements_Text();
    public static string get_ReplaceWithInherits_Text();
    public static string get_ReplaceWith___Call_Text();
    public static string get_RethrowException_Text();
    public static string get_ReverseAssignments_Text();
    public static string get_ReverseAssignment_Text();
    public static string get_SafelyCastTo__Text();
    public static string get_SafelyCast_To__Text();
    public static string get_SetReturnTypeTo__Text();
    public static string get_SimplifyConditionalOperator_Text();
    public static string get_SpecifyStringComparison_Text();
    public static string get_SpecifyType_Text();
    public static string get_SplitDeclarationAndAssignment_Text();
    public static string get_SplitIntoSeparateDeclarations_Text();
    public static string get_SplitIntoTwoIfS_Text();
    public static string get_SplitString_Text();
    public static string get_SurroundWithWith_Text();
    public static string get_ToAutomaticProperty_Text();
    public static string get_ToAutoPropertyWithPrivateSetter_Text();
    public static string get_ToAutoProperty_Text();
    public static string get_ToCollectionReturn_Text();
    public static string get_ToConst_Text();
    public static string get_ToFunction_Text();
    public static string get_ToImplicitlyTypedVariables_Text();
    public static string get_ToImplicitlyTyped_Text();
    public static string get_ToPropertyWithBackingField_Text();
    public static string get_ToSub_Text();
    public static string get_UseMethod_Text();
    public static string get_UseMethod__Text();
    public static string get_WrapTypeNameWithGetType_Text();
    public static string get__WillConflictWith__Text();
}
[StandardModuleAttribute]
public class JetBrains.ReSharper.Intentions.VB.Util.AsyncUtil : object {
    public static IType CreateTaskOfReturnType(IParametersOwner method);
    public static void SetAsync(IVBDeclaration declaration, bool value);
    public static void SetIterator(IVBDeclaration declaration, bool value);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Intentions.VB.Util.VbChangeTypeHelper : ChangeTypeHelper {
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Intentions.VB.Util.VBCommentCodeHelper : object {
    public sealed virtual override bool CanCommentDeclaration(IDeclaration declaration);
    public sealed virtual override Action CommentDeclaration(IDeclaration declaration);
    public sealed virtual override Action CommentTextRange(IFile file, DocumentRange range);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Intentions.VB.Util.VBExtensionMethodsUtil : ExtensionMethodImportUtilBase {
    public static ResolveErrorType[] QueryResolve;
    private static VBExtensionMethodsUtil();
    public static IList`1<IMethod> GetAlternatives(IReference reference, ResolveErrorType[] acceptedResolveErrors);
    protected virtual IEnumerable`1<IMethod> GetCandidateMethods(IInvocationInfo invocationInfo, IReference reference);
    protected virtual string Present(IDeclaredElement method);
    protected virtual IList`1<InvocationCandidate> GetInvocationInfo(ResolveErrorType[] acceptedErrors, IReference reference);
    protected virtual ResolveErrorType[] PatchResolveErrors(IReference reference, ResolveErrorType[] acceptedErrors);
    protected virtual ResolveErrorType ResolveOverloadsForExtensionMethods(InvocationCandidate invocation, IMethod method);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Intentions.VB.Util.VBSetBodyUtil : SetBodyUtil {
    public virtual void SetBody(IFunctionDeclaration destination, ITreeNode body);
    protected virtual IFunctionDeclaration EnsureAccessor(ITypeMemberDeclaration destination, AccessorKind kind);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Intentions.VB.ZoneMarker : object {
}
[CompilerGeneratedAttribute]
[DebuggerDisplayAttribute("alt={alt}, Target={Target}")]
internal class VB$AnonymousType_0`2 : object {
    private T0 $alt;
    private T1 $Target;
    public T0 alt { get; public set; }
    public T1 Target { get; public set; }
    public VB$AnonymousType_0`2(T0 alt, T1 Target);
    public T0 get_alt();
    public void set_alt(T0 Value);
    public T1 get_Target();
    public void set_Target(T1 Value);
    public virtual string ToString();
}
[CompilerGeneratedAttribute]
[DebuggerDisplayAttribute("node={node}, lambda={lambda}")]
internal class VB$AnonymousType_1`2 : object {
    private T0 $node;
    private T1 $lambda;
    public T0 node { get; }
    public T1 lambda { get; }
    public VB$AnonymousType_1`2(T0 node, T1 lambda);
    public T0 get_node();
    public T1 get_lambda();
    public virtual string ToString();
    public virtual int GetHashCode();
    public sealed virtual override bool Equals(VB$AnonymousType_1`2<T0, T1> val);
    public virtual bool Equals(object obj);
}
[CompilerGeneratedAttribute]
[DebuggerDisplayAttribute("$VB$It={$VB$It}, meth={meth}")]
internal class VB$AnonymousType_2`2 : object {
    private T0 $$VB$It;
    private T1 $meth;
    public T0 $VB$It { get; }
    public T1 meth { get; }
    public VB$AnonymousType_2`2(T0 $VB$It, T1 meth);
    public T0 get_$VB$It();
    public T1 get_meth();
    public virtual string ToString();
    public virtual int GetHashCode();
    public sealed virtual override bool Equals(VB$AnonymousType_2`2<T0, T1> val);
    public virtual bool Equals(object obj);
}
[CompilerGeneratedAttribute]
[DebuggerDisplayAttribute("$VB$It={$VB$It}, ldecl={ldecl}")]
internal class VB$AnonymousType_3`2 : object {
    private T0 $$VB$It;
    private T1 $ldecl;
    public T0 $VB$It { get; }
    public T1 ldecl { get; }
    public VB$AnonymousType_3`2(T0 $VB$It, T1 ldecl);
    public T0 get_$VB$It();
    public T1 get_ldecl();
    public virtual string ToString();
    public virtual int GetHashCode();
    public sealed virtual override bool Equals(VB$AnonymousType_3`2<T0, T1> val);
    public virtual bool Equals(object obj);
}
[CompilerGeneratedAttribute]
[DebuggerDisplayAttribute("$VB$It={$VB$It}, mdecl={mdecl}")]
internal class VB$AnonymousType_4`2 : object {
    private T0 $$VB$It;
    private T1 $mdecl;
    public T0 $VB$It { get; }
    public T1 mdecl { get; }
    public VB$AnonymousType_4`2(T0 $VB$It, T1 mdecl);
    public T0 get_$VB$It();
    public T1 get_mdecl();
    public virtual string ToString();
    public virtual int GetHashCode();
    public sealed virtual override bool Equals(VB$AnonymousType_4`2<T0, T1> val);
    public virtual bool Equals(object obj);
}
[CompilerGeneratedAttribute]
[DebuggerDisplayAttribute("$VB$It={$VB$It}, dec={dec}")]
internal class VB$AnonymousType_5`2 : object {
    private T0 $$VB$It;
    private T1 $dec;
    public T0 $VB$It { get; }
    public T1 dec { get; }
    public VB$AnonymousType_5`2(T0 $VB$It, T1 dec);
    public T0 get_$VB$It();
    public T1 get_dec();
    public virtual string ToString();
    public virtual int GetHashCode();
    public sealed virtual override bool Equals(VB$AnonymousType_5`2<T0, T1> val);
    public virtual bool Equals(object obj);
}
[CompilerGeneratedAttribute]
[DebuggerDisplayAttribute("TypeElement={TypeElement}, Substitution={Substitution}")]
internal class VB$AnonymousType_6`2 : object {
    private T0 $TypeElement;
    private T1 $Substitution;
    public T0 TypeElement { get; public set; }
    public T1 Substitution { get; public set; }
    public VB$AnonymousType_6`2(T0 TypeElement, T1 Substitution);
    public T0 get_TypeElement();
    public void set_TypeElement(T0 Value);
    public T1 get_Substitution();
    public void set_Substitution(T1 Value);
    public virtual string ToString();
}
[CompilerGeneratedAttribute]
[DebuggerDisplayAttribute("Namespace={Namespace}, Method={Method}")]
internal class VB$AnonymousType_7`2 : object {
    private T0 $Namespace;
    private T1 $Method;
    public T0 Namespace { get; public set; }
    public T1 Method { get; public set; }
    public VB$AnonymousType_7`2(T0 Namespace, T1 Method);
    public T0 get_Namespace();
    public void set_Namespace(T0 Value);
    public T1 get_Method();
    public void set_Method(T1 Value);
    public virtual string ToString();
}
