[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.Xaml.ContextActions.AccessRightContextAction : object {
    private XmlContextActionDataProvider myProvider;
    private IXamlDeclaration myDeclaration;
    public AccessRightContextAction(XmlContextActionDataProvider provider);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.Xaml.ContextActions.AccessRightContextAction/<CreateBulbItems>d__4")]
public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    [NotNullAttribute]
private IntentionAction CreateAction(AccessRights accessRights);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Intentions.Xaml.ContextActions.AddGridDefinitionActionBase : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private XmlContextActionDataProvider <provider>P;
    [NullableAttribute("2")]
protected string DefinitionName;
    [NullableAttribute("2")]
protected string TargetName;
    protected bool IsAddBefore { get; }
    protected AddGridDefinitionActionBase(XmlContextActionDataProvider provider);
    protected abstract virtual bool get_IsAddBefore();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
private IXamlObjectElement FindGridDefinition(Boolean& isRowDefinition, IXamlPropertyElement& definitionsProperty, IXamlObjectElement& gridTag);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    protected virtual IBulbActionCommand Cleanup(IXamlPropertyElement definitionsProperty, List`1<IPropertySetter> earlierIndices, List`1<IPropertySetter> currentIndices, List`1<IPropertySetter> laterIndices);
    protected virtual string ProcessIndex(int index, int countBefore);
    protected virtual void ProcessDefinition(IXamlObjectElement definition, IXamlPropertyElement definitionsProperty);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.Xaml.ContextActions.AddGridDefinitionAfterAction : AddGridDefinitionActionBase {
    public string Text { get; }
    protected bool IsAddBefore { get; }
    public AddGridDefinitionAfterAction(XmlContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual bool get_IsAddBefore();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.Xaml.ContextActions.AddGridDefinitionBeforeAction : AddGridDefinitionActionBase {
    public string Text { get; }
    protected bool IsAddBefore { get; }
    public AddGridDefinitionBeforeAction(XmlContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual bool get_IsAddBefore();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.Xaml.ContextActions.ChangeResourceUsageStaticnessAction : object {
    [CompilerGeneratedAttribute]
private XmlContextActionDataProvider <provider>P;
    public ChangeResourceUsageStaticnessAction(XmlContextActionDataProvider provider);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
public class JetBrains.ReSharper.Intentions.Xaml.ContextActions.CollectPredefinedResourcesInternalAction : ContextActionBase {
    [NotNullAttribute]
private XmlContextActionDataProvider myProvider;
    public string Text { get; }
    public CollectPredefinedResourcesInternalAction(XmlContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [NotNullAttribute]
private static XmlDocument CreateResourcesDocument(List`1<Tuple`3<string, string, string>> resources);
    [CanBeNullAttribute]
private static string GetStyleTypeString(IType type, IXamlTypeCache typeCache, IWinMDTypeProjectionModuleCache projectionCache);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.Xaml.ContextActions.ConvertGridDefinitionsToTagsFix : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private XmlContextActionDataProvider <provider>P;
    public string Text { get; }
    public ConvertGridDefinitionsToTagsFix(XmlContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
private MyIntentionData BuildIntentionData();
    [NullableContextAttribute("2")]
private MyIntentionData TryGetIntentionData(IPropertySetter propertySetter, IXamlObjectElement gridElement);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.Xaml.ContextActions.CreateDeviceFamilyViewAction : object {
    private XmlContextActionDataProvider myProvider;
    public CreateDeviceFamilyViewAction(XmlContextActionDataProvider provider);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    [NotNullAttribute]
private IEnumerable`1<IBulbAction> CreateBulbActions();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.Xaml.ContextActions.CreateResourceFromUsageAction : object {
    private XmlContextActionDataProvider myProvider;
    public CreateResourceFromUsageAction(XmlContextActionDataProvider provider);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.Xaml.ContextActions.MovePropertyToStyleAction : ContextActionBase {
    [CompilerGeneratedAttribute]
private XmlContextActionDataProvider <provider>P;
    [NullableAttribute("2")]
private string myResourceName;
    private static DeclaredElementPresenterStyle ourPresenterStyle;
    public bool IsReadOnly { get; }
    public string Text { get; }
    public MovePropertyToStyleAction(XmlContextActionDataProvider provider);
    private static MovePropertyToStyleAction();
    public sealed virtual bool get_IsReadOnly();
    public virtual bool IsAvailable(IUserDataHolder cache);
    public virtual string get_Text();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.Xaml.ContextActions.MovePropertyToStyleAction/<CreateBulbItems>d__9")]
public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static IDataContext CreateDataContext(Lifetime lifetime, ISolution solution, ITextControl textControl, DocumentRange documentSelection);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.Xaml.ContextActions.QualifyPropertyAttributeTypeFix : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private XmlContextActionDataProvider <provider>P;
    public string Text { get; }
    public QualifyPropertyAttributeTypeFix(XmlContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
private IPropertyAttribute FindNonQualified(IDeclaredType& propertyType);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.Xaml.ContextActions.QualifyPropertyPathTypeFix : ModernContextActionBase {
    private XmlContextActionDataProvider myProvider;
    public string Text { get; }
    public QualifyPropertyPathTypeFix(XmlContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NullableContextAttribute("2")]
private ISimplePropertyExpression FindNonQualified(IReference& reference);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.Xaml.ContextActions.RemoveGridDefinitionAction : AddGridDefinitionActionBase {
    public string Text { get; }
    protected bool IsAddBefore { get; }
    public RemoveGridDefinitionAction(XmlContextActionDataProvider provider);
    public virtual string get_Text();
    protected virtual bool get_IsAddBefore();
    protected virtual void ProcessDefinition(IXamlObjectElement definition, IXamlPropertyElement definitionsProperty);
    protected virtual string ProcessIndex(int index, int countBefore);
    protected virtual IBulbActionCommand Cleanup(IXamlPropertyElement definitionsProperty, List`1<IPropertySetter> earlierIndices, List`1<IPropertySetter> currentIndices, List`1<IPropertySetter> laterIndices);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.Xaml.ContextActions.RemoveMarkupPropertyAction : ModernContextActionBase {
    [CompilerGeneratedAttribute]
private XmlContextActionDataProvider <provider>P;
    public string Text { get; }
    public RemoveMarkupPropertyAction(XmlContextActionDataProvider provider);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.Xaml.ContextActions.RunPathMappingEditorAction : object {
    [NotNullAttribute]
private XamlContextActionDataProvider myProvider;
    [CanBeNullAttribute]
private IBulbAction[] myItems;
    public RunPathMappingEditorAction(XamlContextActionDataProvider provider);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
[ContextActionAttribute]
public class JetBrains.ReSharper.Intentions.Xaml.ContextActions.ToggleDeviceFamilyViewLocation : object {
    private XmlContextActionDataProvider myProvider;
    public ToggleDeviceFamilyViewLocation(XmlContextActionDataProvider provider);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    [CanBeNullAttribute]
private IBulbAction CreateBulbAction();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
}
[ContextActionDataBuilderAttribute("JetBrains.ReSharper.Feature.Services.Xaml.Bulbs.XamlContextActionDataProvider", "16")]
internal class JetBrains.ReSharper.Intentions.Xaml.ContextActions.XamlContextActionDataBuilder : ContextActionDataBuilderBase`2<XamlLanguage, IXamlFile> {
    public virtual IContextActionDataProvider BuildFromPsi(ISolution solution, ITextControl textControl, IXamlFile psiFile);
}
[ContextActionGroupAttribute]
public static class JetBrains.ReSharper.Intentions.Xaml.ContextActions.XamlContextActions : object {
    public static string GroupID;
}
internal class JetBrains.ReSharper.Intentions.Xaml.Lookup.SimpleTemplateExpression : object {
    private IList`1<ILookupItem> myItems;
    private Func`2<IHotspotContext, IList`1<ILookupItem>> myItemsDelegate;
    public SimpleTemplateExpression(IList`1<ILookupItem> items);
    public SimpleTemplateExpression(Func`2<IHotspotContext, IList`1<ILookupItem>> itemsDelegate);
    public sealed virtual HotspotItems GetLookupItems(IHotspotContext context);
    public sealed virtual string EvaluateQuickResult(IHotspotContext context);
    public sealed virtual void HandleExpansion(IHotspotContext context);
    public sealed virtual string Serialize();
    public sealed virtual object Clone();
}
internal class JetBrains.ReSharper.Intentions.Xaml.QuickFixes.AccessRightsAction : object {
    private IAccessRightsOwnerDeclaration myDeclaration;
    private AccessRights myAccessRights;
    public string Text { get; }
    public AccessRightsAction(AccessRights accessRights, IAccessRightsOwnerDeclaration typeDeclaration);
    public virtual string get_Text();
    public sealed virtual void Execute(ISolution solution, ITextControl textControl);
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.Xaml.QuickFixes.AccessRightsQuickFix : object {
    [CanBeNullAttribute]
private IReference myReference;
    [CanBeNullAttribute]
private IAccessRightsOwnerDeclaration myRightsOwner;
    private bool myOnlyPublic;
    public AccessRightsQuickFix(XamlAccessRightsError error);
    public AccessRightsQuickFix(XamlTypeDeclarationAccessRightsErrorHighlighting error);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    private bool WillAccessRightsFixError(AccessRights accessRights);
}
public class JetBrains.ReSharper.Intentions.Xaml.QuickFixes.AddGridDefinitionsFix : QuickFixBase {
    [NotNullAttribute]
private string myDefinitionName;
    [NotNullAttribute]
private IXamlObjectElement myObjectElement;
    private int myRequired;
    public string Text { get; }
    public AddGridDefinitionsFix(XamlGridIndexOutOfRangeHighlighting highlighting);
    public virtual bool IsAvailable(IUserDataHolder cache);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private string AppendNewDefinitions(string currentValue);
}
public class JetBrains.ReSharper.Intentions.Xaml.QuickFixes.AddGridSpecificationFix : QuickFixBase {
    [NotNullAttribute]
private IXamlObjectElement myObjectElement;
    [NotNullAttribute]
private string myDefinitionName;
    public string Text { get; }
    public AddGridSpecificationFix(XamlMissingGridIndexHighlighting highlighting);
    public virtual bool IsAvailable(IUserDataHolder cache);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.Xaml.QuickFixes.AddParameterQuickFix : AddParameterFixBase {
    public AddParameterQuickFix(XamlXBindMethodErrorHighlighting highlighting);
    protected virtual IInvocationInfo MakeArgumentsOwnerCopy(IInvocationInfo argumentsOwner);
    protected virtual IInvocationInfo GetInvocation();
    protected virtual bool RemoveArgument(IInvocationInfo info, IArgumentInfo argumentInfo);
    protected virtual ParameterKind ParameterKindFromArgument(IArgumentInfo argument);
    protected virtual ITreeNode GetArgumentNode(IArgumentInfo argumentInfo);
    protected virtual IParameter FindMatchingParameter(IArgumentInfo argumentInfo, IArgumentInfo removedArgumentInfo, IParametersOwner targetParametersOwner);
    protected virtual ITypeConversionRule GetTypeConversionRule(ITreeNode node);
    protected virtual bool IsSingleMatching(ResolveResultWithInfo resolveResultWithInfo);
}
public class JetBrains.ReSharper.Intentions.Xaml.QuickFixes.ChangeBindingModeBulbAction : BulbActionBase {
    private BindingMode myBindingMode;
    private IXBindMarkup myXBindMarkup;
    private IBindingMarkup myBindingMarkup;
    public string Text { get; }
    public ChangeBindingModeBulbAction(BindingMode bindingMode, IXBindMarkup xBindMarkup);
    public ChangeBindingModeBulbAction(BindingMode bindingMode, IBindingMarkup bindingMarkup);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
internal class JetBrains.ReSharper.Intentions.Xaml.QuickFixes.ChangeResourceUsageStaticnessBulbItem : object {
    [CanBeNullAttribute]
private IResourceUsage myResourceUsage;
    [NotNullAttribute]
private string myText;
    public string Text { get; }
    public ChangeResourceUsageStaticnessBulbItem(IResourceUsage usage);
    public ChangeResourceUsageStaticnessBulbItem(IResourceReference reference);
    [NotNullAttribute]
private static string EvaluateText(bool isStatic, ITreeNode context);
    public sealed virtual string get_Text();
    public sealed virtual void Execute(ISolution solution, ITextControl textControl);
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.Xaml.QuickFixes.ChangeResourceUsageStaticnessQuickFix : object {
    [NotNullAttribute]
public static Key`1<object> CREATED;
    [NotNullAttribute]
private IResourceUsage myResourceUsage;
    public ChangeResourceUsageStaticnessQuickFix(XamlDynamicResourceNotAllowedErrorHighlighting highlighting);
    private static ChangeResourceUsageStaticnessQuickFix();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.Xaml.QuickFixes.ChangeSignatureQuickFix : ModernQuickFixBase {
    [NullableAttribute("2")]
private IParametersOwner mySourceDelegate;
    [NullableAttribute("2")]
private ISubstitution mySourceSubstitution;
    private IValueReference myReference;
    [NullableAttribute("2")]
private IParametersOwner myTarget;
    private List`1<IParametersOwnerDeclaration> myTargetDeclarations;
    public string Text { get; }
    public ChangeSignatureQuickFix(XamlEventHandlerSignatureError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.Xaml.QuickFixes.ConvertGridDefinitionsTagToAttributeFix : SimpleQuickFixBase {
    private XamlGridDefinitionsCanBeConvertedToAttributeHighlighting myHighlighting;
    public ConvertGridDefinitionsTagToAttributeFix(XamlGridDefinitionsCanBeConvertedToAttributeHighlighting highlighting);
    protected virtual IBulbAction[] CreateBulbActions();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.Xaml.QuickFixes.CreateEventHandlerQuickFix : ModernQuickFixBase {
    private IValueReference myValueReference;
    [NullableAttribute("2")]
private ITypeDeclaration myTargetTypeDeclaration;
    private IDeclaredType myEventType;
    private IDelegate myDelegate;
    public string Text { get; }
    public CreateEventHandlerQuickFix(XamlEventHandlerSignatureError error);
    public CreateEventHandlerQuickFix(XamlEventHandlerNotResolvedError error);
    private CreateEventHandlerQuickFix(IValueReference reference);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.Xaml.QuickFixes.CreateNamespaceAliasFromUsageQuickFix : ModernQuickFixBase {
    [NullableAttribute("2")]
protected IXamlNamespaceAliasReference AliasReference;
    public string Text { get; }
    public CreateNamespaceAliasFromUsageQuickFix(XamlNotResolvedError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
internal class JetBrains.ReSharper.Intentions.Xaml.QuickFixes.CreateResourceBulbItem : object {
    private IXamlObjectElement myTargetObjectElement;
    private IResourceReference myResourceReference;
    private string myPrefix;
    public string Text { get; }
    public CreateResourceBulbItem(IXamlObjectElement targetObjectElement, string prefix, IResourceReference resourceReference);
    public sealed virtual string get_Text();
    public sealed virtual void Execute(ISolution solution, ITextControl textControl);
    private IResourceDeclaration ExecuteUnderTransaction(IType& expectedType, List`1& candidates);
    private IType GetExpectedType(List`1& candidates);
    [CanBeNullAttribute]
private List`1<ITypeElement> GetCandidates(IType type);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.Intentions.Xaml.QuickFixes.CreateResourceBulbItem/<ExecuteAfterTransaction>d__10")]
private Task ExecuteAfterTransaction(ISolution solution, ITextControl textControl, IResourceDeclaration resourceDeclaration, IType expectedType, List`1<ITypeElement> candidates);
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.Xaml.QuickFixes.CreateResourceFromUsageOrFixStaticnessQuickFix : object {
    private IResourceReference myReference;
    public CreateResourceFromUsageOrFixStaticnessQuickFix(XamlStaticResourceNotResolvedHighlighting highlighting);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.Xaml.QuickFixes.CreateTypeQuickFix : CreateTypeQuickFixBase {
    public string Text { get; }
    public CreateTypeQuickFix(XamlTypeNotResolvedError error);
    public virtual string get_Text();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    protected ICreationTarget CreateTargetFile(ISolution solution, IXamlTypeReference reference, IPsiSourceFile srcProjectFile, IFile& dstPsiFile, String& namespaceName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.ReSharper.Intentions.Xaml.QuickFixes.CreateTypeQuickFixBase : ModernQuickFixBase {
    [NullableAttribute("2")]
protected IXamlTypeReference Reference;
    [NullableAttribute("2")]
protected IProject TargetProject;
    [NullableAttribute("2")]
protected SimpleTypeImage ExpectedTypes;
    [NullableAttribute("2")]
protected ITypeTarget CreationTarget;
    protected List`1<string> TargetNamespaces;
    protected CreateTypeQuickFixBase(XamlTypeNotResolvedError error);
    private static List`1<IType> CalculateExpectedTypes(ITreeNode owner, IXamlReferenceWithExpectedType withExpectedType);
    private static void FilterTypeCannotDeriveFrom(ITreeNode context, IAccessContext accessContext, List`1<IType> expectedTypes);
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public virtual bool IsAvailable(IUserDataHolder cache);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.Xaml.QuickFixes.CreateXamlTypeQuickFix : CreateTypeQuickFixBase {
    public string Text { get; }
    public CreateXamlTypeQuickFix(XamlTypeNotResolvedError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private BuildAction GetBuildAction(XamlPlatform platform);
    private string GetMainAlias(XamlPlatform platform);
    private string GetXAlias(XamlPlatform platform);
    private IDeclaredType GetControlClass(XamlPlatform platform, IXamlTypeCache xamlTypeCache);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.Xaml.QuickFixes.CreateXKeyAttributeQuickFix : ModernQuickFixBase {
    private IResourceDeclaration myResourceDeclaration;
    public string Text { get; }
    public CreateXKeyAttributeQuickFix(XamlXKeyAttributeRequiredError error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
public class JetBrains.ReSharper.Intentions.Xaml.QuickFixes.FixStaticnessBulbAction : ModernBulbActionBase {
    [CompilerGeneratedAttribute]
private IModifiersOwnerDeclaration <declaration>P;
    public string Text { get; }
    public FixStaticnessBulbAction(IModifiersOwnerDeclaration declaration);
    public virtual string get_Text();
    private string GetMemberKind();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.Xaml.QuickFixes.ImportTypeFromExternalSourcesFix : ImportTypeFromExternalSourcesFixBase {
    public ImportTypeFromExternalSourcesFix(XamlTypeNotResolvedError error);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[QuickFixAttribute]
internal class JetBrains.ReSharper.Intentions.Xaml.QuickFixes.InsertTextQuickFix : ModernQuickFixBase {
    private ITreeNode myHighlightingElement;
    private string myTextToInsert;
    private DocumentOffset myOffset;
    public string Text { get; }
    public InsertTextQuickFix(XamlTextMissingHighlighting highlighting);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [CompilerGeneratedAttribute]
private IBulbActionCommand <ExecutePsiTransaction>b__7_0(ISolution _, ITextControl textControl, IProgressIndicator _);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[QuickFixAttribute]
internal class JetBrains.ReSharper.Intentions.Xaml.QuickFixes.ProjectReferenceFix : ModernQuickFixBase {
    private IFolderOrAssemblyReference myReference;
    public string Text { get; }
    public ProjectReferenceFix(XamlResolveFolderOrAssemblyErrorHiglighting error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [CompilerGeneratedAttribute]
private void <ExecutePsiTransaction>b__5_0(ITextControl textControl);
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.Xaml.QuickFixes.RedundantXamarinFormsClassDeclarationQuickFix : object {
    [NotNullAttribute]
private XamlRedundantXamarinFormsClassDeclarationWarning myWarning;
    public RedundantXamarinFormsClassDeclarationQuickFix(XamlRedundantXamarinFormsClassDeclarationWarning warning);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.Xaml.QuickFixes.RedundantXamarinFormsClassDeclarationQuickFix/<CreateBulbItems>d__2")]
public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.Xaml.QuickFixes.RemoveForbiddenResourceNameFix : ModernScopedQuickFixBase {
    private ITreeNode myNode;
    public string Text { get; }
    public string ScopedText { get; }
    public bool IsReanalysisRequired { get; }
    public RemoveForbiddenResourceNameFix(XamlValueTypeResourceCannotHaveNameHighlighting highlighting);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool get_IsReanalysisRequired();
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
public class JetBrains.ReSharper.Intentions.Xaml.QuickFixes.RemoveMultipleElementsQuickFix : QuickFixBase {
    [NotNullAttribute]
private IList`1<ITreeNode> myElements;
    [NotNullAttribute]
private string myFixText;
    public string Text { get; }
    public RemoveMultipleElementsQuickFix(XamlRedundantStyledValueWarning error);
    public RemoveMultipleElementsQuickFix(XamlRedundantNamespaceAliasWarning error);
    public virtual bool IsAvailable(IUserDataHolder cache);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.Xaml.QuickFixes.RemoveRangeQuickFix : QuickFixBase {
    [NotNullAttribute]
private string myFixText;
    private DocumentRange myRangeToRemove;
    public string Text { get; }
    public RemoveRangeQuickFix(XamlRedundantPropertyTypeQualifierWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NotNullAttribute]
protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [CompilerGeneratedAttribute]
private void <ExecutePsiTransaction>b__6_0(ITextControl textControl);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.Xaml.QuickFixes.RemoveRedundantAttachedPropertySetterFix : ModernScopedQuickFixBase {
    private IPropertySetter myNode;
    public string Text { get; }
    public string ScopedText { get; }
    public bool IsReanalysisRequired { get; }
    public RemoveRedundantAttachedPropertySetterFix(XamlRedundantAttachedPropertySetterWarning warning);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool get_IsReanalysisRequired();
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.Xaml.QuickFixes.RemoveRedundantBindingModeAttributeFix : ModernScopedQuickFixBase {
    private IMarkupAttribute myNode;
    public string Text { get; }
    public string ScopedText { get; }
    public bool IsReanalysisRequired { get; }
    public RemoveRedundantBindingModeAttributeFix(XamlRedundantBindingModeAttributeWarning warning);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool get_IsReanalysisRequired();
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.Xaml.QuickFixes.RemoveRedundantCollectionPropertyFix : ModernScopedQuickFixBase {
    private IXamlPropertyElement myNode;
    public string Text { get; }
    public string ScopedText { get; }
    public bool IsReanalysisRequired { get; }
    public RemoveRedundantCollectionPropertyFix(XamlRedundantCollectionPropertyWarning warning);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool get_IsReanalysisRequired();
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.Xaml.QuickFixes.RemoveRedundantFreezeAttributeFix : ModernScopedNonIncrementalQuickFixBase {
    private IXamlAttribute myNode;
    public string Text { get; }
    public string ScopedText { get; }
    public bool IsReanalysisRequired { get; }
    public RemoveRedundantFreezeAttributeFix(XamlRedundantFreezeAttributeWarning warning);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool get_IsReanalysisRequired();
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.Xaml.QuickFixes.RemoveRedundantGridDefinitionsAttributeFix : ModernScopedQuickFixBase {
    private ITreeNode myNode;
    public string Text { get; }
    public bool IsReanalysisRequired { get; }
    public RemoveRedundantGridDefinitionsAttributeFix(XamlRedundantGridDefinitionsAttributeHighlighting highlighting);
    public virtual string get_Text();
    public virtual bool get_IsReanalysisRequired();
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.Xaml.QuickFixes.RemoveRedundantGridSpanAttributeFix : ModernScopedQuickFixBase {
    private ITreeNode myNode;
    public string Text { get; }
    public string ScopedText { get; }
    public bool IsReanalysisRequired { get; }
    public RemoveRedundantGridSpanAttributeFix(XamlRedundantGridSpanAttributeHighlighting highlighting);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool get_IsReanalysisRequired();
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.Xaml.QuickFixes.RemoveRedundantModifiersAttributeFix : ModernScopedQuickFixBase {
    private IModifiersAttribute myNode;
    public string Text { get; }
    public string ScopedText { get; }
    public bool IsReanalysisRequired { get; }
    public RemoveRedundantModifiersAttributeFix(XamlRedundantModifiersAttributeWarning warning);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool get_IsReanalysisRequired();
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.Xaml.QuickFixes.RemoveRedundantNameAttributeFix : ModernScopedQuickFixBase {
    private IXamlAttribute myNode;
    public string Text { get; }
    public string ScopedText { get; }
    public bool IsReanalysisRequired { get; }
    public RemoveRedundantNameAttributeFix(XamlRedundantNameAttributeWarning warning);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool get_IsReanalysisRequired();
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.Xaml.QuickFixes.RemoveRedundantNamespaceAliasFix : ModernScopedNonIncrementalQuickFixBase {
    private INamespaceAlias myNode;
    public string Text { get; }
    public string ScopedText { get; }
    public bool IsReanalysisRequired { get; }
    public RemoveRedundantNamespaceAliasFix(XamlRedundantNamespaceAliasWarning warning);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool get_IsReanalysisRequired();
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.Xaml.QuickFixes.RemoveRedundantResourceFix : ModernScopedNonIncrementalQuickFixBase {
    private IResourceDeclaration myNode;
    public string Text { get; }
    public string ScopedText { get; }
    public bool IsReanalysisRequired { get; }
    public RemoveRedundantResourceFix(XamlRedundantResourceWarning warning);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool get_IsReanalysisRequired();
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.Xaml.QuickFixes.RemoveRedundantStyledValueFix : ModernScopedQuickFixBase {
    private ITreeNode myNode;
    public string Text { get; }
    public string ScopedText { get; }
    public bool IsReanalysisRequired { get; }
    public RemoveRedundantStyledValueFix(XamlRedundantStyledValueWarning warning);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool get_IsReanalysisRequired();
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.Xaml.QuickFixes.RemoveRedundantUpdateSourceTriggerAttributeFix : ModernScopedQuickFixBase {
    private IMarkupAttribute myNode;
    public string Text { get; }
    public string ScopedText { get; }
    public bool IsReanalysisRequired { get; }
    public RemoveRedundantUpdateSourceTriggerAttributeFix(XamlRedundantUpdateSourceTriggerAttributeWarning warning);
    public virtual string get_Text();
    public virtual string get_ScopedText();
    public virtual bool get_IsReanalysisRequired();
    protected virtual ITreeNode TryGetContextTreeNode();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
internal class JetBrains.ReSharper.Intentions.Xaml.QuickFixes.ResourceTypeLookupItem : DeclaredElementLookupItem {
    private PsiLanguageType myProjectLanguage;
    private IPsiSourceFile mySourceFile;
    private TreeOffset myOffset;
    private IPsiServices myPsiServices;
    public ResourceTypeLookupItem(IResourceDeclaration resourceDeclaration, ITypeElement typeElement, PsiLanguageType projectLanguage, ILookupItemsOwner owner);
    protected virtual string GetPresentedName(DeclaredElementInstance instance, DeclaredElementPresenterMarking& marking);
    protected virtual void OnAfterComplete(ITextControl textControl, DocumentRange& nameRange, DocumentRange& decorationRange, TailType tailType, Suffix& suffix, IRangeMarker& caretPositionRangeMarker);
    protected virtual IReference GetTypeReference(IResourceDeclaration resourceDeclaration);
    [CompilerGeneratedAttribute]
private void <OnAfterComplete>b__6_0();
}
public abstract class JetBrains.ReSharper.Intentions.Xaml.QuickFixes.SimpleQuickFixBase : object {
    private bool myIsInitialized;
    private IBulbAction[] myActions;
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    private void InitializeIfNecessary();
    protected abstract virtual IBulbAction[] CreateBulbActions();
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.Xaml.QuickFixes.SpecifyDataContextTypeQuickFix : object {
    private IReference myReference;
    private IBinding myBindingElement;
    private IXamlObjectElement myUpperContextElement;
    private bool myWithDataContext;
    [NotNullAttribute]
private static IAnchor ourSpecifyContextTypeSubmenuViewDescriptor;
    public SpecifyDataContextTypeQuickFix(XamlBindingWithContextNotResolvedHighlighting error);
    public SpecifyDataContextTypeQuickFix(XamlBindingWithoutContextNotResolvedHighlighting error);
    private static SpecifyDataContextTypeQuickFix();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    private static bool IsTopLevelBindingPropertyReference(IReference reference);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.Xaml.QuickFixes.SpecifyDataContextTypeQuickFix/<CreateBulbItems>d__8")]
public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    private IEnumerable`1<IBulbAction> BuildItems();
}
internal class JetBrains.ReSharper.Intentions.Xaml.QuickFixes.SpecifyDataTemplateTypeBulbItem : BulbActionBase {
    [NotNullAttribute]
private IXamlObjectElement myTargetElement;
    [NotNullAttribute]
private IReference myReference;
    public string Text { get; }
    public SpecifyDataTemplateTypeBulbItem(IXamlObjectElement targetElement, IReference reference);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.Xaml.QuickFixes.SpecifyDataTypeQuickFix : SimpleQuickFixBase {
    private XamlUninferrableDataContextTypeForCompiledBindingErrorHighlighting myHighlighting;
    public SpecifyDataTypeQuickFix(XamlUninferrableDataContextTypeForCompiledBindingErrorHighlighting highlighting);
    protected virtual IBulbAction[] CreateBulbActions();
}
internal class JetBrains.ReSharper.Intentions.Xaml.QuickFixes.SpecifyDesignDataContextTypeBulbItem : BulbActionBase {
    private static string DESIGN_INSTANCE;
    [NotNullAttribute]
private IXamlObjectElement myTargetElement;
    [NotNullAttribute]
private IReference myReference;
    public string Text { get; }
    public SpecifyDesignDataContextTypeBulbItem(IXamlObjectElement targetElement, IReference reference);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static INamespaceAlias CreatePredefinedNamespaceAlias(IXamlTypeDeclaration typeDeclaration, string defaultAliasName, string namespaceUri);
    private static void FixMarkupIgnorableAttribute(IXamlTypeDeclaration typeDeclaration, INamespaceAlias designAlias, INamespaceAlias compatibilityAlias);
    private static INamespaceAlias FindNamespaceAlias(string uri, IXamlObjectElement startElement);
    private static Action`1<ITextControl> CreateHotspot(ISolution solution, IEnumerable`1<ITypeElement> possibleTypes, IXmlAttribute contextAttribute, int designNamespaceLength, int markupLength);
}
internal class JetBrains.ReSharper.Intentions.Xaml.QuickFixes.SpecifyXDataTypeBulbItem : BulbActionBase {
    [NotNullAttribute]
private IXamlObjectElement myTargetElement;
    [NotNullAttribute]
private IReference myReference;
    public string Text { get; }
    public SpecifyXDataTypeBulbItem(IXamlObjectElement targetElement, IReference reference);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static INamespaceAlias CreatePredefinedNamespaceAlias(IXamlTypeDeclaration typeDeclaration, string defaultAliasName, string namespaceUri);
    private static INamespaceAlias FindNamespaceAlias(string uri, IXamlObjectElement startElement);
    private static Action`1<ITextControl> CreateHotspot(ISolution solution, IEnumerable`1<ITypeElement> possibleTypes, IXmlAttribute contextAttribute);
}
internal class JetBrains.ReSharper.Intentions.Xaml.QuickFixes.TargetTypeLookupItem : ResourceTypeLookupItem {
    public TargetTypeLookupItem(IResourceDeclaration resourceDeclaration, ITypeElement typeElement, PsiLanguageType projectLanguage, ILookupItemsOwner owner);
    protected virtual IReference GetTypeReference(IResourceDeclaration resourceDeclaration);
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.Xaml.QuickFixes.UnsuitableMethodInvocationQuickFix : SimpleQuickFixBase {
    private XamlXBindMethodInvocationUnavailableErrorHighlighting myHighlighting;
    public UnsuitableMethodInvocationQuickFix(XamlXBindMethodInvocationUnavailableErrorHighlighting highlighting);
    protected virtual IBulbAction[] CreateBulbActions();
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.Xaml.QuickFixes.XamlAddCastQuickFix : object {
    private XamlXBindMethodErrorHighlighting myError;
    private IReference myReference;
    private IBulbAction[] myItems;
    private bool myInitialized;
    public XamlAddCastQuickFix(XamlXBindMethodErrorHighlighting error);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    private void InitializeIfNecessary();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xaml.XamlLanguage", "16")]
public class JetBrains.ReSharper.Intentions.Xaml.QuickFixes.XamlBaseClassFixer : object {
    public sealed virtual void ChangeBaseClass(IDeclaration typeDeclaration, IType baseType);
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.Xaml.QuickFixes.XamlBindingModeInconsistencyQuickFix : SimpleQuickFixBase {
    private XamlHighlightingBase myHighlighting;
    public XamlBindingModeInconsistencyQuickFix(XamlXBindBindingModeInconsistencyErrorHighlighting highlighting);
    public XamlBindingModeInconsistencyQuickFix(XamlAvaloniaWrongBindingModeForStreamBindingHighlighting highlighting);
    protected virtual IBulbAction[] CreateBulbActions();
    private IBulbAction[] CreateBulbActions(XamlAvaloniaWrongBindingModeForStreamBindingHighlighting highlighting);
    private IBulbAction[] CreateBulbActions(XamlXBindBindingModeInconsistencyErrorHighlighting highlighting);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xaml.XamlLanguage", "16")]
public class JetBrains.ReSharper.Intentions.Xaml.QuickFixes.XamlCallSiteFieldToConstConverter : object {
    public sealed virtual void Convert(IReference callSiteReference, IField const);
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.Xaml.QuickFixes.XamlChangeMethodSignatureQuickFix : object {
    private XamlXBindMethodErrorHighlighting myHighlighting;
    public XamlChangeMethodSignatureQuickFix(XamlXBindMethodErrorHighlighting highlighting);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.Xaml.QuickFixes.XamlChangeMethodSignatureQuickFix/<CreateBulbItems>d__2")]
public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.Xaml.QuickFixes.XamlChangePathMappingQuickFix : object {
    [CanBeNullAttribute]
private IXamlPathReference myPathReference;
    public IBulbAction[] Items { get; }
    public XamlChangePathMappingQuickFix(XamlPathReferenceError highlighting);
    protected XamlChangePathMappingQuickFix(IXamlPathReference pathReferecne);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    public IBulbAction[] get_Items();
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
public class JetBrains.ReSharper.Intentions.Xaml.QuickFixes.XamlCopyFileBulbAction : BulbActionBase {
    [CompilerGeneratedAttribute]
private IProjectFile <SourceFile>k__BackingField;
    [CompilerGeneratedAttribute]
private VirtualFileSystemPath <NewPath>k__BackingField;
    private string myText;
    private Pair`2<VirtualFileSystemPath, IProjectFolder> myFolderPathMapping;
    private ITextControlPos myTextControlPos;
    protected IProjectFile SourceFile { get; }
    protected VirtualFileSystemPath NewPath { get; }
    public string Text { get; }
    public XamlCopyFileBulbAction(IProjectFile sourceFile, VirtualFileSystemPath newPath, string text, Pair`2<VirtualFileSystemPath, IProjectFolder> folderPathMapping);
    [CompilerGeneratedAttribute]
protected IProjectFile get_SourceFile();
    [CompilerGeneratedAttribute]
protected VirtualFileSystemPath get_NewPath();
    public virtual string get_Text();
    public virtual void Execute(ISolution solution, ITextControl textControl);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    protected virtual Action`1<ITextControl> ExecuteAfterPsiTransaction(ISolution solution, IProjectModelTransactionCookie cookie, IProgressIndicator progress);
    [CanBeNullAttribute]
protected virtual Action`1<ITextControl> GetOpenNewFileAction(ISolution solution, IProjectFile newProjectFile, ITextControlPos pos);
    [NotNullAttribute]
protected virtual IProjectFile CreateFileCopy(IProjectModelTransactionCookie cookie);
    [NotNullAttribute]
private static IProjectFolder EnsureFolder(Pair`2<VirtualFileSystemPath, IProjectFolder> folderPathMapping, VirtualFileSystemPath filePath);
}
public class JetBrains.ReSharper.Intentions.Xaml.QuickFixes.XamlCreateConstructorBulbAction : XamlCreateFunctionBulbActionBase {
    public string Text { get; }
    public XamlCreateConstructorBulbAction(ITypeDeclaration targetTypeDeclaration, IXamlFunctionReference methodReference);
    public virtual string get_Text();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
internal class JetBrains.ReSharper.Intentions.Xaml.QuickFixes.XamlCreateDependencyPropertyAction`1 : ModernBulbActionBase {
    [CompilerGeneratedAttribute]
private IReference <reference>P;
    [CompilerGeneratedAttribute]
private ITypeDeclaration <targetDeclaration>P;
    [CompilerGeneratedAttribute]
private ITypeImage <expectedType>P;
    public string Text { get; }
    public XamlCreateDependencyPropertyAction`1(IReference reference, ITypeDeclaration targetDeclaration, ITypeImage expectedType);
    public virtual string get_Text();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
internal class JetBrains.ReSharper.Intentions.Xaml.QuickFixes.XamlCreateFieldBulbAction : ModernBulbActionBase {
    [CompilerGeneratedAttribute]
private IReference <reference>P;
    [CompilerGeneratedAttribute]
private ITypeDeclaration <targetDeclaration>P;
    [CompilerGeneratedAttribute]
private AccessRights <accessRights>P;
    private IType myType;
    public string Text { get; }
    public XamlCreateFieldBulbAction(IReference reference, ITypeDeclaration targetDeclaration, AccessRights accessRights);
    public virtual string get_Text();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
public abstract class JetBrains.ReSharper.Intentions.Xaml.QuickFixes.XamlCreateFunctionBulbActionBase : ModernBulbActionBase {
    protected ITypeDeclaration TargetTypeDeclaration;
    protected IXamlFunctionReference MethodReference;
    protected XamlCreateFunctionBulbActionBase(ITypeDeclaration targetTypeDeclaration, IXamlFunctionReference methodReference);
    protected MemberSignature GetSignature();
    protected TypeTarget GetCreationTarget();
}
public class JetBrains.ReSharper.Intentions.Xaml.QuickFixes.XamlCreateMethodBulbAction : XamlCreateFunctionBulbActionBase {
    public string Text { get; }
    public XamlCreateMethodBulbAction(ITypeDeclaration targetTypeDeclaration, IXamlFunctionReference methodReference);
    public virtual string get_Text();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
public class JetBrains.ReSharper.Intentions.Xaml.QuickFixes.XamlCreateMethodOverloadBulbAction : XamlCreateMethodBulbAction {
    public string Text { get; }
    public XamlCreateMethodOverloadBulbAction(ITypeDeclaration targetTypeDeclaration, IXamlFunctionReference methodReference);
    public virtual string get_Text();
}
internal class JetBrains.ReSharper.Intentions.Xaml.QuickFixes.XamlCreatePropertyBulbAction : ModernBulbActionBase {
    [CompilerGeneratedAttribute]
private IReference <reference>P;
    [CompilerGeneratedAttribute]
private ITypeDeclaration <targetDeclaration>P;
    [CompilerGeneratedAttribute]
private AccessRights <accessRights>P;
    [CompilerGeneratedAttribute]
private ITypeImage <expectedType>P;
    [CompilerGeneratedAttribute]
private AccessorKind[] <accessorKinds>P;
    public string Text { get; }
    public XamlCreatePropertyBulbAction(IReference reference, ITypeDeclaration targetDeclaration, AccessRights accessRights, ITypeImage expectedType, AccessorKind[] accessorKinds);
    public virtual string get_Text();
    protected virtual IBulbActionCommand ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.Xaml.QuickFixes.XamlCreatePropertyQuickFix : object {
    [CanBeNullAttribute]
private IReference myReference;
    private XamlCreatePropertyQuickFix(IReference reference);
    public XamlCreatePropertyQuickFix(XamlNotResolvedError error);
    public XamlCreatePropertyQuickFix(XamlBindingWithContextNotResolvedHighlighting error);
    public XamlCreatePropertyQuickFix(XamlCompiledBindingNotResolvedHighlighting error);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    [ItemCanBeNullAttribute]
private IEnumerable`1<IBulbAction> EvaluateItems();
    [CanBeNullAttribute]
[PureAttribute]
private static ITypeDeclaration GetTargetDeclarationSupportingIntention(IReference reference);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.Xaml.QuickFixes.XamlCreatePropertyQuickFix/<EvaluateDependencyPropertyItems>d__9")]
[ItemCanBeNullAttribute]
private IEnumerable`1<IBulbAction> EvaluateDependencyPropertyItems(IDependencyPropertyReference propertyReference, ITypeImage expectedType);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.Xaml.QuickFixes.XamlCreatePropertyQuickFix/<EvaluateMarkupPropertyReferenceItems>d__10")]
[ItemCanBeNullAttribute]
private IEnumerable`1<IBulbAction> EvaluateMarkupPropertyReferenceItems(IMarkupPropertyReference propertyReference, ITypeImage expectedType);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.Xaml.QuickFixes.XamlCreatePropertyQuickFix/<EvaluatePropertyReferenceItems>d__11")]
[ItemCanBeNullAttribute]
private IEnumerable`1<IBulbAction> EvaluatePropertyReferenceItems(IPropertyReference propertyReference, ITypeImage expectedType);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.Xaml.QuickFixes.XamlCreatePropertyQuickFix/<CreatePlatformDependentDependencyPropertyActions>d__12")]
private IEnumerable`1<IBulbAction> CreatePlatformDependentDependencyPropertyActions(IReference propertyReference, ITypeImage expectedType);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.Xaml.QuickFixes.XamlCreatePropertyQuickFix/<CreatePlatformDependentAttachedPropertyActions>d__13")]
private IEnumerable`1<IBulbAction> CreatePlatformDependentAttachedPropertyActions(IReference propertyReference, ITypeImage expectedType);
    private IBulbAction TryCreateCreateDependencyPropertyAction(IReference propertyReference, ITypeImage expectedType);
    [NotNullAttribute]
private static ITypeImage GetExpectedTypeImage(IReference reference);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.Xaml.QuickFixes.XamlCreateTypeMemberQuickFix : object {
    private XamlResolveErrorHighlightingBase myHighlighting;
    [NullableAttribute("2")]
private IReference myReference;
    private XamlCreateTypeMemberQuickFix(XamlResolveErrorHighlightingBase highlighting);
    public XamlCreateTypeMemberQuickFix(XamlNotResolvedError highlighting);
    public XamlCreateTypeMemberQuickFix(XamlBindingWithContextNotResolvedHighlighting highlighting);
    public XamlCreateTypeMemberQuickFix(XamlCompiledBindingNotResolvedHighlighting highlighting);
    public XamlCreateTypeMemberQuickFix(XamlXBindMethodErrorHighlighting highlighting);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    [NullableContextAttribute("2")]
[ContractAnnotationAttribute("null=>null")]
private ITypeDeclaration GetTargetDeclaration(IReference reference);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.Xaml.QuickFixes.XamlCreateTypeMemberQuickFix/<EvaluateItems>d__10")]
private IEnumerable`1<IBulbAction> EvaluateItems(IReference propertyReference);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.Xaml.QuickFixes.XamlCreateTypeMemberQuickFix/<EvaluateItems>d__11")]
private IEnumerable`1<IBulbAction> EvaluateItems(IXamlMethodReference methodReference);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.Xaml.QuickFixes.XamlCreateTypeMemberQuickFix/<EvaluateItems>d__12")]
private IEnumerable`1<IBulbAction> EvaluateItems(IXamlXBindEventReference xamlXBindEventReference);
}
public class JetBrains.ReSharper.Intentions.Xaml.QuickFixes.XamlFixBuildActionQuickFix : QuickFixBase {
    private IProjectFile myProjectFile;
    private BuildAction myBuildAction;
    private TargetFrameworkId myTargetFrameworkId;
    public string Text { get; }
    public XamlFixBuildActionQuickFix(XamlPathReferenceError highlighting);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.Xaml.QuickFixes.XamlFixStaticnessQuickFix : SimpleQuickFixBase {
    private XamlResolveErrorHighlightingBase myError;
    private IReference myReference;
    public XamlFixStaticnessQuickFix(XamlXBindMethodErrorHighlighting error);
    public XamlFixStaticnessQuickFix(XamlMarkupPropertyStaticnessErrorHighlighting error);
    protected virtual IBulbAction[] CreateBulbActions();
}
[QuickFixAttribute]
internal class JetBrains.ReSharper.Intentions.Xaml.QuickFixes.XamlImportPathPopupQuickFix : XamlImportPathQuickFix {
    public string PopupMenuCaption { get; }
    public string PopupKey { get; }
    public Anchoring2D[] PopupAnchorings { get; }
    public XamlImportPathPopupQuickFix(XamlPathReferenceError error);
    public sealed virtual string get_PopupMenuCaption();
    public sealed virtual string get_PopupKey();
    public sealed virtual IEnumerable`1<IBulbAction> CreateBulbActions();
    public sealed virtual Anchoring2D[] get_PopupAnchorings();
    public sealed virtual void OnPopupShown(Lifetime showingLifetime);
    public sealed virtual void FillMenuItemDescriptor(IBulbAction key, IMenuItemDescriptor descriptor);
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.Xaml.QuickFixes.XamlImportPathQuickFix : object {
    [NotNullAttribute]
private IXamlPathReference myPathReference;
    [CanBeNullAttribute]
private IBulbAction[] myBulbActions;
    public XamlImportPathQuickFix(XamlPathReferenceError error);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    [NotNullAttribute]
protected IBulbAction[] GetOrCreateBulbActions();
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
public class JetBrains.ReSharper.Intentions.Xaml.QuickFixes.XamlImportTypeAction : BulbActionBase {
    [NotNullAttribute]
private ITypeElement myElement;
    [NotNullAttribute]
private ICollection`1<IXamlTypeReference> myReferences;
    [NotNullAttribute]
private string myImportFormat;
    public ITypeElement TypeElement { get; }
    protected ICollection`1<IXamlTypeReference> References { get; }
    public string Text { get; }
    public XamlImportTypeAction(ITypeElement element, ICollection`1<IXamlTypeReference> references, string importFormat);
    public ITypeElement get_TypeElement();
    protected ICollection`1<IXamlTypeReference> get_References();
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
}
[QuickFixAttribute]
internal class JetBrains.ReSharper.Intentions.Xaml.QuickFixes.XamlImportTypePopupQuickFix : XamlImportTypeQuickFix {
    public string PopupMenuCaption { get; }
    protected string ItemFormat { get; }
    public string PopupKey { get; }
    public Anchoring2D[] PopupAnchorings { get; }
    public XamlImportTypePopupQuickFix(XamlTypeNotResolvedError error);
    public XamlImportTypePopupQuickFix(XamlNotResolvedLateBoundHighlighting error);
    public XamlImportTypePopupQuickFix(XamlBindingWithContextNotResolvedHighlighting error);
    public sealed virtual string get_PopupMenuCaption();
    public sealed virtual void FillMenuItemDescriptor(IBulbAction key, IMenuItemDescriptor descriptor);
    protected virtual string get_ItemFormat();
    public sealed virtual string get_PopupKey();
    public sealed virtual Anchoring2D[] get_PopupAnchorings();
    public sealed virtual IEnumerable`1<IBulbAction> CreateBulbActions();
    public sealed virtual void OnPopupShown(Lifetime showingLifetime);
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.Xaml.QuickFixes.XamlImportTypeQuickFix : object {
    [CanBeNullAttribute]
private IXamlTypeReference myReference;
    [CanBeNullAttribute]
private ICollection`1<ITypeElement> myAlternatives;
    protected string ItemFormat { get; }
    public XamlImportTypeQuickFix(XamlTypeNotResolvedError error);
    public XamlImportTypeQuickFix(XamlNotResolvedLateBoundHighlighting error);
    private XamlImportTypeQuickFix(IXamlTypeReference reference);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    [NotNullAttribute]
public static IEnumerable`1<ITypeElement> GetAlternatives(IXamlTypeReference reference);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    [NotNullAttribute]
protected virtual XamlImportTypeAction CreateBulbItem(ITypeElement element, ICollection`1<IXamlTypeReference> references);
    protected virtual string get_ItemFormat();
    [NotNullAttribute]
protected virtual ICollection`1<ITypeElement> EvaluateAlternatives(IXamlTypeReference reference);
    protected IList`1<ITypeElement> EvaluateAlternatives(IXamlTypeReference reference, ISymbolScope symbolScope);
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.Xaml.QuickFixes.XamlIncludeProjectItemQuickFix : QuickFixBase {
    [NotNullAttribute]
private XamlPathReferenceError myHighlighting;
    [NotNullAttribute]
private VirtualFileSystemPath myFilePath;
    [CanBeNullAttribute]
private IFileReference myFileReference;
    public string Text { get; }
    public XamlIncludeProjectItemQuickFix(XamlPathReferenceError highlighting);
    public virtual bool IsAvailable(IUserDataHolder cache);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    protected virtual Action`1<ITextControl> ExecuteAfterPsiTransaction(ISolution solution, IProjectModelTransactionCookie cookie, IProgressIndicator progress);
    [CanBeNullAttribute]
public static IProjectFolder LocateProjectFolder(IFileReference reference);
    [CanBeNullAttribute]
private static VirtualFileSystemPath GetPathReferenceTargetPath(IFileReference reference);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.Xaml.QuickFixes.XamlLanguageLevelQuickFix : object {
    [NullableAttribute("2")]
private IReference myReference;
    private ITreeNode myElement;
    public XamlLanguageLevelQuickFix(XamlLanguageLevelResolveErrorHighlighting highlighting);
    public XamlLanguageLevelQuickFix(XamlLanguageLevelErrorHighlighting highlighting);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.Xaml.QuickFixes.XamlMemberAccessQuickFix : SimpleQuickFixBase {
    private XamlMemberAccessErrorHighlighting myHighlighting;
    public XamlMemberAccessQuickFix(XamlMemberAccessErrorHighlighting highlighting);
    protected virtual IBulbAction[] CreateBulbActions();
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.Xaml.QuickFixes.XamlMethodQuickFix : object {
    private bool myIsInitialized;
    private XamlResolveErrorHighlightingBase myHighlighting;
    [CompilerGeneratedAttribute]
private IBulbAction[] <Action>k__BackingField;
    public IBulbAction[] Action { get; private set; }
    public XamlMethodQuickFix(XamlMethodErrorHiglighting highlighting);
    public XamlMethodQuickFix(XamlConstructorWarningHiglighting highlighting);
    private void InitializeIfNecessary();
    private static IBulbAction TryCreateCreateMethodBulbItem(ITypeElement targetTypeElement, IXamlFunctionReference methodReference);
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    [CompilerGeneratedAttribute]
public IBulbAction[] get_Action();
    [CompilerGeneratedAttribute]
private void set_Action(IBulbAction[] value);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.Xaml.QuickFixes.XamlMismatchedDeviceFamilyViewClrNameQuickFix : QuickFixBase {
    private XamlMismatchedDeviceFamilyViewClrNameHighlighting myHighlighting;
    public bool IsReadOnly { get; }
    public string Text { get; }
    public XamlMismatchedDeviceFamilyViewClrNameQuickFix(XamlMismatchedDeviceFamilyViewClrNameHighlighting highlighting);
    public sealed virtual bool get_IsReadOnly();
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual void Execute(ISolution solution, ITextControl textControl);
    private void ExecuteMoveToNamespaceIfNecessary(ISolution solution, ITextControl textControl, string actionName, IXamlTypeDeclaration typeDeclaration, string namespaceName);
    private void ExecuteRenameIfNecessary(ISolution solution, IXamlTypeDeclaration typeDeclaration, string newName);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.Xaml.QuickFixes.XamlOverloadsCollisionQuickFix : object {
    [CanBeNullAttribute]
private IDeclaredElement myDeclaredElement;
    private bool myIsInitialized;
    private IBulbAction[] myActions;
    public XamlOverloadsCollisionQuickFix(XamlOverloadsCollisionWarningHighlighting highlighting);
    public XamlOverloadsCollisionQuickFix(XamlXBindMethodErrorHighlighting highlighting);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    private void InitializeIfNecessary();
}
[ShellComponentAttribute("16")]
internal class JetBrains.ReSharper.Intentions.Xaml.QuickFixes.XamlQuickFixRegistrator : object {
    public IEnumerable`1<Type> Dependencies { get; }
    public sealed virtual IEnumerable`1<Type> get_Dependencies();
    public sealed virtual void Register(IQuickFixesRegistrar table);
    public sealed virtual void Register(IHighlightingCleanupItemsRegistrar registrar);
}
public static class JetBrains.ReSharper.Intentions.Xaml.QuickFixes.XamlRedundantCodeUtil : object {
    [NullableContextAttribute("1")]
public static void RemoveNode(ITreeNode treeNode);
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.Xaml.QuickFixes.XamlReferenceModuleAndImportTypeQuickFix : XamlImportTypeQuickFix {
    protected string ItemFormat { get; }
    public XamlReferenceModuleAndImportTypeQuickFix(XamlTypeNotResolvedError error);
    public XamlReferenceModuleAndImportTypeQuickFix(XamlNotResolvedLateBoundHighlighting error);
    public XamlReferenceModuleAndImportTypeQuickFix(XamlBindingWithContextNotResolvedHighlighting error);
    protected virtual string get_ItemFormat();
    protected virtual ICollection`1<ITypeElement> EvaluateAlternatives(IXamlTypeReference reference);
    protected virtual XamlImportTypeAction CreateBulbItem(ITypeElement element, ICollection`1<IXamlTypeReference> references);
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.Xaml.QuickFixes.XamlRelativeSourceParentAndIndexOrderQuickFix : BulbActionBase {
    private XamlRelativeSourceParentAndIndexOrderErrorHighlighting myError;
    public string Text { get; }
    public XamlRelativeSourceParentAndIndexOrderQuickFix(XamlRelativeSourceParentAndIndexOrderErrorHighlighting error);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.Xaml.QuickFixes.XamlRelativeSourceParentAndIndexOrderQuickFix/<CreateBulbItems>d__5")]
public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.Intentions.Xaml.QuickFixes.XamlRenameFileBulbAction : XamlCopyFileBulbAction {
    public XamlRenameFileBulbAction(IProjectFile sourceFile, VirtualFileSystemPath newPath, string text, Pair`2<VirtualFileSystemPath, IProjectFolder> folderPathMapping);
    protected virtual Action`1<ITextControl> GetOpenNewFileAction(ISolution solution, IProjectFile newProjectFile, ITextControlPos pos);
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.Xaml.QuickFixes.XamlResourceFilePathCaseQuickFix : SimpleQuickFixBase {
    private XamlResourceFilePathCaseMismatchErrorHighlighting myHighlighting;
    public XamlResourceFilePathCaseQuickFix(XamlResourceFilePathCaseMismatchErrorHighlighting highlighting);
    protected virtual IBulbAction[] CreateBulbActions();
}
public class JetBrains.ReSharper.Intentions.Xaml.QuickFixes.XamlTypeCompletionExpression : object {
    [NotNullAttribute]
private IEnumerable`1<ITypeElement> myElements;
    [CanBeNullAttribute]
private BasicCompletionMacroImpl myBasicCompletionMacro;
    public XamlTypeCompletionExpression(IEnumerable`1<ITypeElement> possibleTypes);
    public sealed virtual object Clone();
    public sealed virtual string Serialize();
    public virtual string EvaluateQuickResult(IHotspotContext context);
    public virtual void HandleExpansion(IHotspotContext context);
    public virtual HotspotItems GetLookupItems(IHotspotContext context);
    [NotNullAttribute]
public static IList`1<ITypeElement> FindPossibleTypes(IReference reference, IProgressIndicator progressIndicator);
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.Xaml.QuickFixes.XamlUnknownDeviceFamilyTypeQuickFix : object {
    private XamlUnknownDeviceFamilyTypeHighlighting myHighlighting;
    public XamlUnknownDeviceFamilyTypeQuickFix(XamlUnknownDeviceFamilyTypeHighlighting highlighting);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    private IList`1<IBulbAction> BuildBulbItems();
}
[QuickFixAttribute]
public class JetBrains.ReSharper.Intentions.Xaml.QuickFixes.XamlXBindUpdateSourceTriggerQuickFix : object {
    private XamlXBindUpdateSourceTriggerErrorHighlighting myHighlighting;
    private IBulbAction[] myBulbActions;
    private bool myIsInitialized;
    public XamlXBindUpdateSourceTriggerQuickFix(XamlXBindUpdateSourceTriggerErrorHighlighting highlighting);
    public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    private void InitializeIfNecessary();
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public static class JetBrains.ReSharper.Intentions.Xaml.Resources.Strings : object {
    private static ILogger ourLog;
    private static Lazy`1<JetResourceManager> ourResourceManager;
    [EditorBrowsableAttribute("2")]
public static JetResourceManager ResourceManager { get; }
    public static string Add_After_Text { get; }
    public static string CollectPredefinedResources_Text { get; }
    public static string NoResourceFound_Text { get; }
    public static string RemoveForbiddenNameAttribute_Text { get; }
    public static string RemoveForbiddenNameAttributes_Text { get; }
    public static string RemoveRedundantAttachedPropertySetter_Text { get; }
    public static string RemoveRedundantAttachedPropertySetters_Text { get; }
    public static string RemoveRedundantCollectionProperty_Text { get; }
    public static string RemoveRedundantCollectionProperties_Text { get; }
    public static string RemoveRedundantDefinitions_Text { get; }
    public static string RemoveRedundantFreezeAttribute_Text { get; }
    public static string RemoveRedundantModeAttribute_Text { get; }
    public static string RemoveRedundantModeAttributes_Text { get; }
    public static string RemoveRedundantModifiersAttributes_ScopedText { get; }
    public static string RemoveRedundantNamespaceAlias_Text { get; }
    public static string RemoveRedundantNamespaceAliases_Text { get; }
    public static string RemoveRedundantResource_Text { get; }
    public static string RemoveRedundantResources_Text { get; }
    public static string RemoveRedundantSpanAttribute_Text { get; }
    public static string RemoveRedundantSpanAttributes_Text { get; }
    public static string RemoveRedundantStylePropertySetter_Text { get; }
    public static string RemoveRedundantStylePropertySetters_Text { get; }
    public static string RemoveRedundantUpdateSourceTriggerAttribute_Text { get; }
    public static string RemoveRedundantUpdateSourceTriggerAttributes_Text { get; }
    public static string RemoveRedundant_Attribute_Text { get; }
    public static string RemoveRedundant_Attributes_Text { get; }
    public static string TransformDefinitionsToTags_Text { get; }
    public static string ExtractToStyle_Text { get; }
    public static string ExtractToStyle__Text { get; }
    public static string ToQualifiedSetter_Text { get; }
    public static string QualifyAttachedPropertyType_Text { get; }
    public static string Remove__Text { get; }
    public static string RemoveMarkupProperty_Text { get; }
    public static string Make__Text { get; }
    public static string ToThemeReference_Text { get; }
    public static string ToDynamicReference_Text { get; }
    public static string ToStaticReference_Text { get; }
    public static string AddGrid_Specification_Text { get; }
    public static string TransformToAttribute_Text { get; }
    public static string ImportType_Text { get; }
    public static string Include_FileInProject_Text { get; }
    public static string RemoveClassDeclaration_Text { get; }
    public static string RemoveXKeyDeclaration_Text { get; }
    public static string SpecifyDataContextType_Text { get; }
    public static string SearchingForProperties_Text { get; }
    public static string CollectingTypes_Text { get; }
    public static string RemoveAllRedundantStyledSetters_Text { get; }
    public static string RemoveAllRedundantNamespaceAliases_Text { get; }
    public static string RemoveTypeQualifier_Text { get; }
    public static string AddXDataTypeAttribute_Text { get; }
    public static string RemoveInvocationSArguments_Text { get; }
    public static string CastArgumentTo__Text { get; }
    public static string AddBindBackAttribute_Text { get; }
    public static string RemoveCastFromBindingPath_Text { get; }
    public static string RemoveBindBackAttribute_Text { get; }
    public static string ChangeBindingModeTo__Text { get; }
    public static string ChangeTypeOfParameterOfCalled_To__Text { get; }
    public static string CreateField__Text { get; }
    public static string CreateProperty__Text { get; }
    public static string CreateEventHandler_Text { get; }
    public static string CreateTypeInheritedFrom_AndUseIt_Text { get; }
    public static string Use__Text { get; }
    public static string CreateMethod__Text { get; }
    public static string CreateConstructor_Text { get; }
    public static string MakeConstructorPublic_Text { get; }
    public static string MakeMethodMyDeclarationDeclaredName_Text { get; }
    public static string CreateOverloadFor__Text { get; }
    public static string SwapIndexAndType_Text { get; }
    public static string FixCase_Text { get; }
    public static string RemoveUpdateSourceTriggerAttribute_Text { get; }
    public static string Add_Before_Text { get; }
    public static string MoveToNestedFolder_Text { get; }
    public static string MoveNextToParentView_Text { get; }
    public static string ChangeSignatureOf__Text { get; }
    public static string ChangeMethodSignature_Text { get; }
    public static string CreateNamespaceAliasFromUsage_Text { get; }
    public static string Create_Attribute_Text { get; }
    public static string Insert__Text { get; }
    public static string ReplaceProjectNameWithAssemblyName_Text { get; }
    public static string RenameTo__Text { get; }
    public static string CreateNestedType_Text { get; }
    public static string CreateType_Text { get; }
    public static string CreateXAMLType_Text { get; }
    public static string Create_ViewAt__Text { get; }
    public static string SetBuildActionTo__Text { get; }
    public static string ___ToAvoidCollisionWithOverloadedMethods_Text { get; }
    public static string AddGridColumnRowDefinitionAfterCurrentOneContextAction_Description { get; }
    public static string AddGridColumnRowDefinitionAfterCurrentOneContextAction_Name { get; }
    public static string AddGridColumnRowDefinitionBeforeCurrentOneContextAction_Description { get; }
    public static string AddGridColumnRowDefinitionBeforeCurrentOneContextAction_Name { get; }
    public static string ChangeResourceReferenceFromStaticToDynamicOrViceVersaContextAction_Description { get; }
    public static string ChangeResourceReferenceFromStaticToDynamicOrViceVersaContextAction_Name { get; }
    public static string ChangeXAMLTypeOrTypeMemberAccessRightsContextAction_Description { get; }
    public static string ChangeXAMLTypeOrTypeMemberAccessRightsContextAction_Name { get; }
    public static string CreateDeviceFamilySpecificViewContextAction_Description { get; }
    public static string CreateDeviceFamilySpecificViewContextAction_Name { get; }
    public static string CreateXAMLResourceContextAction_Description { get; }
    public static string CreateXAMLResourceContextAction_Name { get; }
    public static string EditPathMappingContextAction_Description { get; }
    public static string EditPathMappingContextAction_Name { get; }
    public static string ExtractPropertySetterToStyleContextAction_Description { get; }
    public static string ExtractPropertySetterToStyleContextAction_Name { get; }
    public static string MoveDeviceFamilyViewToNestedFolderAndBackContextAction_Description { get; }
    public static string MoveDeviceFamilyViewToNestedFolderAndBackContextAction_Name { get; }
    public static string QualifyAttachedPropertyPathOwnerTypeContextAction_Description { get; }
    public static string QualifyAttachedPropertyPathOwnerTypeContextAction_Name { get; }
    public static string QualifyPropertySetterOwnerTypeContextAction_Description { get; }
    public static string QualifyPropertySetterOwnerTypeContextAction_Name { get; }
    public static string RemoveGridColumnRowDefinitionContextAction_Description { get; }
    public static string RemoveGridColumnRowDefinitionContextAction_Name { get; }
    public static string RemoveMarkupExtensionPropertyContextAction_Description { get; }
    public static string RemoveMarkupExtensionPropertyContextAction_Name { get; }
    public static string TransformRowColumnDefinitionsFromStringToTagsContextAction_Description { get; }
    public static string TransformRowColumnDefinitionsFromStringToTagsContextAction_Name { get; }
    public static string CreateResourceIn___Text { get; }
    public static string Make_Member_NotStatic_Text { get; }
    public static string Make_Member_Static_Text { get; }
    public static string Field_Text { get; }
    public static string Method_Text { get; }
    private static Strings();
    public static JetResourceManager get_ResourceManager();
    public static string Choice(string format, Object[] args);
    public static string get_Add_After_Text();
    public static string get_CollectPredefinedResources_Text();
    public static string get_NoResourceFound_Text();
    public static string get_RemoveForbiddenNameAttribute_Text();
    public static string get_RemoveForbiddenNameAttributes_Text();
    public static string get_RemoveRedundantAttachedPropertySetter_Text();
    public static string get_RemoveRedundantAttachedPropertySetters_Text();
    public static string get_RemoveRedundantCollectionProperty_Text();
    public static string get_RemoveRedundantCollectionProperties_Text();
    public static string get_RemoveRedundantDefinitions_Text();
    public static string get_RemoveRedundantFreezeAttribute_Text();
    public static string get_RemoveRedundantModeAttribute_Text();
    public static string get_RemoveRedundantModeAttributes_Text();
    public static string get_RemoveRedundantModifiersAttributes_ScopedText();
    public static string get_RemoveRedundantNamespaceAlias_Text();
    public static string get_RemoveRedundantNamespaceAliases_Text();
    public static string get_RemoveRedundantResource_Text();
    public static string get_RemoveRedundantResources_Text();
    public static string get_RemoveRedundantSpanAttribute_Text();
    public static string get_RemoveRedundantSpanAttributes_Text();
    public static string get_RemoveRedundantStylePropertySetter_Text();
    public static string get_RemoveRedundantStylePropertySetters_Text();
    public static string get_RemoveRedundantUpdateSourceTriggerAttribute_Text();
    public static string get_RemoveRedundantUpdateSourceTriggerAttributes_Text();
    public static string get_RemoveRedundant_Attribute_Text();
    public static string get_RemoveRedundant_Attributes_Text();
    public static string get_TransformDefinitionsToTags_Text();
    public static string get_ExtractToStyle_Text();
    public static string get_ExtractToStyle__Text();
    public static string get_ToQualifiedSetter_Text();
    public static string get_QualifyAttachedPropertyType_Text();
    public static string get_Remove__Text();
    public static string get_RemoveMarkupProperty_Text();
    public static string get_Make__Text();
    public static string get_ToThemeReference_Text();
    public static string get_ToDynamicReference_Text();
    public static string get_ToStaticReference_Text();
    public static string get_AddGrid_Specification_Text();
    public static string get_TransformToAttribute_Text();
    public static string get_ImportType_Text();
    public static string get_Include_FileInProject_Text();
    public static string get_RemoveClassDeclaration_Text();
    public static string get_RemoveXKeyDeclaration_Text();
    public static string get_SpecifyDataContextType_Text();
    public static string get_SearchingForProperties_Text();
    public static string get_CollectingTypes_Text();
    public static string get_RemoveAllRedundantStyledSetters_Text();
    public static string get_RemoveAllRedundantNamespaceAliases_Text();
    public static string get_RemoveTypeQualifier_Text();
    public static string get_AddXDataTypeAttribute_Text();
    public static string get_RemoveInvocationSArguments_Text();
    public static string get_CastArgumentTo__Text();
    public static string get_AddBindBackAttribute_Text();
    public static string get_RemoveCastFromBindingPath_Text();
    public static string get_RemoveBindBackAttribute_Text();
    public static string get_ChangeBindingModeTo__Text();
    public static string get_ChangeTypeOfParameterOfCalled_To__Text();
    public static string get_CreateField__Text();
    public static string get_CreateProperty__Text();
    public static string get_CreateEventHandler_Text();
    public static string get_CreateTypeInheritedFrom_AndUseIt_Text();
    public static string get_Use__Text();
    public static string get_CreateMethod__Text();
    public static string get_CreateConstructor_Text();
    public static string get_MakeConstructorPublic_Text();
    public static string get_MakeMethodMyDeclarationDeclaredName_Text();
    public static string get_CreateOverloadFor__Text();
    public static string get_SwapIndexAndType_Text();
    public static string get_FixCase_Text();
    public static string get_RemoveUpdateSourceTriggerAttribute_Text();
    public static string get_Add_Before_Text();
    public static string get_MoveToNestedFolder_Text();
    public static string get_MoveNextToParentView_Text();
    public static string get_ChangeSignatureOf__Text();
    public static string get_ChangeMethodSignature_Text();
    public static string get_CreateNamespaceAliasFromUsage_Text();
    public static string get_Create_Attribute_Text();
    public static string get_Insert__Text();
    public static string get_ReplaceProjectNameWithAssemblyName_Text();
    public static string get_RenameTo__Text();
    public static string get_CreateNestedType_Text();
    public static string get_CreateType_Text();
    public static string get_CreateXAMLType_Text();
    public static string get_Create_ViewAt__Text();
    public static string get_SetBuildActionTo__Text();
    public static string get____ToAvoidCollisionWithOverloadedMethods_Text();
    public static string get_AddGridColumnRowDefinitionAfterCurrentOneContextAction_Description();
    public static string get_AddGridColumnRowDefinitionAfterCurrentOneContextAction_Name();
    public static string get_AddGridColumnRowDefinitionBeforeCurrentOneContextAction_Description();
    public static string get_AddGridColumnRowDefinitionBeforeCurrentOneContextAction_Name();
    public static string get_ChangeResourceReferenceFromStaticToDynamicOrViceVersaContextAction_Description();
    public static string get_ChangeResourceReferenceFromStaticToDynamicOrViceVersaContextAction_Name();
    public static string get_ChangeXAMLTypeOrTypeMemberAccessRightsContextAction_Description();
    public static string get_ChangeXAMLTypeOrTypeMemberAccessRightsContextAction_Name();
    public static string get_CreateDeviceFamilySpecificViewContextAction_Description();
    public static string get_CreateDeviceFamilySpecificViewContextAction_Name();
    public static string get_CreateXAMLResourceContextAction_Description();
    public static string get_CreateXAMLResourceContextAction_Name();
    public static string get_EditPathMappingContextAction_Description();
    public static string get_EditPathMappingContextAction_Name();
    public static string get_ExtractPropertySetterToStyleContextAction_Description();
    public static string get_ExtractPropertySetterToStyleContextAction_Name();
    public static string get_MoveDeviceFamilyViewToNestedFolderAndBackContextAction_Description();
    public static string get_MoveDeviceFamilyViewToNestedFolderAndBackContextAction_Name();
    public static string get_QualifyAttachedPropertyPathOwnerTypeContextAction_Description();
    public static string get_QualifyAttachedPropertyPathOwnerTypeContextAction_Name();
    public static string get_QualifyPropertySetterOwnerTypeContextAction_Description();
    public static string get_QualifyPropertySetterOwnerTypeContextAction_Name();
    public static string get_RemoveGridColumnRowDefinitionContextAction_Description();
    public static string get_RemoveGridColumnRowDefinitionContextAction_Name();
    public static string get_RemoveMarkupExtensionPropertyContextAction_Description();
    public static string get_RemoveMarkupExtensionPropertyContextAction_Name();
    public static string get_TransformRowColumnDefinitionsFromStringToTagsContextAction_Description();
    public static string get_TransformRowColumnDefinitionsFromStringToTagsContextAction_Name();
    public static string get_CreateResourceIn___Text();
    public static string get_Make_Member_NotStatic_Text();
    public static string get_Make_Member_Static_Text();
    public static string get_Field_Text();
    public static string get_Method_Text();
}
public static class JetBrains.ReSharper.Intentions.Xaml.Util.CreateResourceUtil : object {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Intentions.Xaml.Util.CreateResourceUtil/<CreateCreateResourceBulbItems>d__0")]
public static IEnumerable`1<IBulbAction> CreateCreateResourceBulbItems(IResourceReference resourceReference);
    [CanBeNullAttribute]
private static IXamlObjectElement GetNearestElementWithAllowedResources(IXamlObjectElement currentObject);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.Intentions.Xaml.Util.CreateTypeUtil : object {
    [MustUseReturnValueAttribute]
public static IBulbActionCommand CreateType(IPsiServices psiServices, ICreationTarget creationTarget, string className, bool isPartial, SimpleTypeImage baseTypeImage, Func`2<IntentionResult, IBulbActionCommand> executePsiTransactionAfterCreation);
    public static void BindTypeReferences(IXamlTypeReference xamlTypeReference, IPsiServices psiServices, IPsiSourceFile sourceFile, ITypeElement typeElement, ISubstitution substitution);
    public static ITypeDeclaration FindTypeDeclaration(ITreeNode element, string qualifiedName);
    private static ITypeDeclaration FindTypeDeclarationRec(string qualifiedName, IEnumerable`1<ITypeDeclaration> typeDeclarations);
}
internal static class JetBrains.ReSharper.Intentions.Xaml.Util.ProjectModelUtil : object {
    public static IProjectFile GetOrCreateProjectFile(IProject project, IProjectFile srcProjectFile, string namespaceName, string name, string extension);
    public static IList`1<IProjectFile> CreateProjectFiles(IProject project, IProjectFile srcProjectFile, string namespaceName, string name, String[] extensions);
    [CanBeNullAttribute]
private static IProjectFolder GetProjectFolder(IProject project, string namespaceName, IProjectModelTransactionCookie& changeCookie, List`1& createdFolders);
    public static void RemoveFoldersSilently(IList`1<VirtualFileSystemPath> folders);
    public static void RemoveFilesSilently(IList`1<VirtualFileSystemPath> filePaths);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Intentions.Xaml.ZoneMarker : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
