public class JetBrains.ReSharper.LiveTemplates.VB.Context.InVBExpression : InVBFile {
    private static Guid DefaultUID;
    public string PresentableShortName { get; }
    private static InVBExpression();
    public InVBExpression(VBLanguageLevel langLevel);
    public virtual Guid GetDefaultUID();
    public virtual string get_PresentableShortName();
    public virtual string ToString();
    public virtual InVBFile NewInstance(VBLanguageLevel langLevel);
}
public class JetBrains.ReSharper.LiveTemplates.VB.Context.InVBFile : InAnyLanguageFile {
    public static string LanguageLevelAttributeName;
    private static Guid DefaultUID;
    [CompilerGeneratedAttribute]
private VBLanguageLevel _LanguageLevel;
    public string PresentableShortName { get; }
    public PsiLanguageType RelatedLanguage { get; }
    protected string LangDescr { get; }
    public VBLanguageLevel LanguageLevel { get; public set; }
    public Guid QuickListUID { get; }
    public string QuickListTitle { get; }
    private static InVBFile();
    public InVBFile(VBLanguageLevel langLevel);
    public virtual Guid GetDefaultUID();
    public virtual string get_PresentableShortName();
    public virtual PsiLanguageType get_RelatedLanguage();
    protected string get_LangDescr();
    protected virtual IEnumerable`1<string> GetExtensions();
    public virtual bool IsSubsetOf(ITemplateScopePoint other);
    [CompilerGeneratedAttribute]
public VBLanguageLevel get_LanguageLevel();
    [CompilerGeneratedAttribute]
public void set_LanguageLevel(VBLanguageLevel AutoPropertyValue);
    public virtual IEnumerable`1<Pair`2<string, string>> EnumerateCustomProperties();
    public virtual string ToString();
    protected string LanguageVersionString();
    public virtual InVBFile NewInstance(VBLanguageLevel langLevel);
    public sealed virtual override Guid get_QuickListUID();
    public sealed virtual override string get_QuickListTitle();
}
public class JetBrains.ReSharper.LiveTemplates.VB.Context.InVBMethodParameter : InVBFile {
    private static Guid DefaultUID;
    public string PresentableShortName { get; }
    private static InVBMethodParameter();
    public InVBMethodParameter(VBLanguageLevel langLevel);
    public virtual Guid GetDefaultUID();
    public virtual string get_PresentableShortName();
    public virtual string ToString();
    public virtual InVBFile NewInstance(VBLanguageLevel langLevel);
}
public class JetBrains.ReSharper.LiveTemplates.VB.Context.InVBStatement : InVBExpression {
    private static Guid DefaultUID;
    public string PresentableShortName { get; }
    private static InVBStatement();
    public InVBStatement(VBLanguageLevel langLevel);
    public virtual Guid GetDefaultUID();
    public virtual string get_PresentableShortName();
    public virtual InVBFile NewInstance(VBLanguageLevel langLevel);
    public virtual string ToString();
}
public class JetBrains.ReSharper.LiveTemplates.VB.Context.InVBTypeAndNamespace : InVBFile {
    private static Guid DefaultUID;
    public string PresentableShortName { get; }
    private static InVBTypeAndNamespace();
    public InVBTypeAndNamespace(VBLanguageLevel langLevel);
    public virtual Guid GetDefaultUID();
    public virtual string get_PresentableShortName();
    public virtual string ToString();
    public virtual InVBFile NewInstance(VBLanguageLevel langLevel);
}
public class JetBrains.ReSharper.LiveTemplates.VB.Context.InVBTypeMember : InVBFile {
    private static Guid DefaultUID;
    public string PresentableShortName { get; }
    private static InVBTypeMember();
    public InVBTypeMember(VBLanguageLevel langLevel);
    public virtual Guid GetDefaultUID();
    public virtual string get_PresentableShortName();
    public virtual string ToString();
    public virtual InVBFile NewInstance(VBLanguageLevel langLevel);
}
public enum JetBrains.ReSharper.LiveTemplates.VB.Context.VBInsertionPoint : Enum {
    public int value__;
    public static VBInsertionPoint Everywhere;
    public static VBInsertionPoint Expression;
    public static VBInsertionPoint Statement;
    public static VBInsertionPoint TypeMember;
    public static VBInsertionPoint TypeAndNamespace;
    public static VBInsertionPoint MethodParameter;
}
public class JetBrains.ReSharper.LiveTemplates.VB.Context.VBTemplateContext : TemplateContext {
    private VBInsertionPoint myInsertionPoint;
    private VBLanguageLevel myLanguageLevel;
    public VBLanguageLevel LanguageLevel { get; }
    public IEnumerable`1<ITemplateScopePoint> ScopePoints { get; }
    public VBTemplateContext(VBInsertionPoint insertionPoint);
    public VBTemplateContext(VBInsertionPoint insertionPoint, VBLanguageLevel languageLevel);
    public VBLanguageLevel get_LanguageLevel();
    public virtual IEnumerable`1<ITemplateScopePoint> get_ScopePoints();
    private IEnumerable`1<ITemplateScopePoint> CalcScopePoints();
}
public class JetBrains.ReSharper.LiveTemplates.VB.Context.VBTemplateContextAcceptor : ScopedTemplateAcceptorBase {
    public VBTemplateContextAcceptor(TemplateAcceptanceContext context);
}
[DefaultSettingsAttribute("JetBrains.ReSharper.Feature.Services.LiveTemplates.Settings.LiveTemplatesSettings", "16")]
public class JetBrains.ReSharper.LiveTemplates.VB.Defaults.DefaultFileTemplates : object {
    public string Name { get; }
    private static DefaultFileTemplates();
    public sealed virtual override Stream GetDefaultSettingsStream(Lifetime lifetime);
    public sealed virtual override string get_Name();
}
[DefaultSettingsAttribute("JetBrains.ReSharper.Feature.Services.LiveTemplates.Settings.LiveTemplatesSettings", "16")]
public class JetBrains.ReSharper.LiveTemplates.VB.Defaults.DefaultLiveTemplates : object {
    public string Name { get; }
    public sealed virtual override Stream GetDefaultSettingsStream(Lifetime lifetime);
    public sealed virtual override string get_Name();
}
[DefaultSettingsAttribute("JetBrains.ReSharper.Feature.Services.LiveTemplates.Settings.LiveTemplatesSettings", "16")]
public class JetBrains.ReSharper.LiveTemplates.VB.Defaults.DefaultSurroundTemplates : object {
    public string Name { get; }
    public sealed virtual override Stream GetDefaultSettingsStream(Lifetime lifetime);
    public sealed virtual override string get_Name();
}
[MacroImplementationAttribute]
public class JetBrains.ReSharper.LiveTemplates.VB.Macros.FileDefaultNamespaceMacroImpl : FileDefaultNamespaceMacroImplBase {
    public FileDefaultNamespaceMacroImpl(MacroParameterValueCollection arguments);
    protected virtual string GetDefaultNamespace(IHotspotContext context);
}
[MacroImplementationAttribute]
public class JetBrains.ReSharper.LiveTemplates.VB.Macros.SuggestVariableNameMacroImpl : SuggestVariableNameMacroImplBase {
    public SuggestVariableNameMacroImpl(MacroParameterValueCollection arguments);
    protected virtual IList`1<string> SuggestNamesForIdentifier(IIdentifier identifier);
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public class JetBrains.ReSharper.LiveTemplates.VB.Resources.Strings1 : object {
    private static ILogger ourLog;
    private static Lazy`1<JetResourceManager> ourResourceManager;
    [EditorBrowsableAttribute("2")]
public static JetResourceManager ResourceManager { get; }
    public static string MinimumVBVersion_Text { get; }
    public static string _Expressions_Text { get; }
    public static string _MethodParameters_Text { get; }
    public static string _Statements_Text { get; }
    public static string _TypeMembers_Text { get; }
    public static string _TypesOrNamespaces_Text { get; }
    private static Strings1();
    public static JetResourceManager get_ResourceManager();
    public static string Choice(string format, Object[] args);
    public static string get_MinimumVBVersion_Text();
    public static string get__Expressions_Text();
    public static string get__MethodParameters_Text();
    public static string get__Statements_Text();
    public static string get__TypeMembers_Text();
    public static string get__TypesOrNamespaces_Text();
}
public class JetBrains.ReSharper.LiveTemplates.VB.Scope.InVBProjectFile : InLanguageSpecificProject {
    private static Guid DefaultUID;
    public string PresentableShortName { get; }
    public PsiLanguageType RelatedLanguage { get; }
    public string DefaultFileName { get; }
    public Guid QuickListUID { get; }
    public string QuickListTitle { get; }
    private static InVBProjectFile();
    public virtual Guid GetDefaultUID();
    public virtual string get_PresentableShortName();
    public virtual PsiLanguageType get_RelatedLanguage();
    public virtual string get_DefaultFileName();
    public sealed virtual override Guid get_QuickListUID();
    public sealed virtual override string get_QuickListTitle();
}
[ScopeCategoryUIProviderAttribute("16")]
public class JetBrains.ReSharper.LiveTemplates.VB.Scope.VBProjectScopeCategoryUIProvider : ScopeCategoryUIProvider {
    public string CategoryCaption { get; }
    public virtual IEnumerable`1<ITemplateScopePoint> BuildAllPoints();
    public virtual string get_CategoryCaption();
    public virtual string Present(ITemplateScopePoint point);
}
[ShellComponentAttribute("10")]
public class JetBrains.ReSharper.LiveTemplates.VB.Scope.VBProjectScopeProvider : ScopeProvider {
    public virtual IEnumerable`1<ITemplateScopePoint> ProvideScopePoints(TemplateAcceptanceContext context);
    [CompilerGeneratedAttribute]
private ITemplateScopePoint _Lambda$__0-0(string t);
}
[ScopeCategoryUIProviderAttribute("16")]
public class JetBrains.ReSharper.LiveTemplates.VB.Scope.VBScopeCategoryUIProviderBase : ScopeCategoryUIProvider {
    public string CategoryCaption { get; }
    public virtual IEnumerable`1<ITemplateScopePoint> BuildAllPoints();
    public virtual IScopeOptionsUIBase CreateUI(ITemplateScopePoint point);
    public virtual bool HaveOptionsUIFor(ITemplateScopePoint point);
    public virtual string Present(ITemplateScopePoint point);
    public virtual string get_CategoryCaption();
}
[ShellComponentAttribute("10")]
public class JetBrains.ReSharper.LiveTemplates.VB.Scope.VBScopeProvider : ScopeProvider {
    private Dictionary`2<string, Func`2<VBLanguageLevel, ITemplateScopePoint>> myCreators;
    public virtual ITemplateScopePoint CreateScope(Guid scopeGuid, string typeName, IEnumerable`1<Pair`2<string, string>> customProperties);
    private static bool TestNode(VBReparseContextKeywords context, string text, bool StrictStart);
    public virtual IEnumerable`1<ITemplateScopePoint> ProvideScopePoints(TemplateAcceptanceContext context);
}
public class JetBrains.ReSharper.LiveTemplates.VB.VBImpl : MacroImplementationScopeProviderBase {
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.LiveTemplates.VB.VBLanguageCaseProvider : LanguageCaseProvider {
    public virtual bool IsCaseSensitive();
}
[FileTemplatesAttribute("16")]
public class JetBrains.ReSharper.LiveTemplates.VB.VBLiveTemplatesSupport : object {
    public IEnumerable`1<ITemplateScopePoint> ScopePoints { get; }
    public string Name { get; }
    public sealed virtual override IEnumerable`1<ITemplateScopePoint> get_ScopePoints();
    public sealed virtual override string get_Name();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.LiveTemplates.VB.VBMacroUtil : MacroUtilBase {
    private IVBExpectedTypesProvider myExpectedTypesProvider;
    public VBMacroUtil(VBLanguage language, IVBExpectedTypesProvider expectedTypesProvider);
    protected virtual IExpression CreateExpression(IPsiModule module, string text);
    protected virtual IReadOnlyList`1<ExpectedType> GetExpectedTypes(ITreeNode element);
    public virtual ILookupItem CreateDeclaredElementLookupItem(DeclaredElementInstance`1<ITypeOwner> element, IHotspotContext context);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.LiveTemplates.VB.VBTemplateFormatter : object {
    public string EndMarker { get; }
    public bool SupportsShorteningQualifiedReferences { get; }
    public sealed virtual override void BeforeFormatting(DocumentRange documentRange, ISolution solution);
    public sealed virtual override void ShortenQualifiedReferences(DocumentRange documentRange, ISolution solution);
    public sealed virtual override string get_EndMarker();
    public sealed virtual override bool get_SupportsShorteningQualifiedReferences();
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.LiveTemplates.VB.ZoneMarker : object {
}
