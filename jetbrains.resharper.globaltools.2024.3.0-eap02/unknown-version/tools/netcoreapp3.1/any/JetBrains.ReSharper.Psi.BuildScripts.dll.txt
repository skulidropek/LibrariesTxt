public class JetBrains.ReSharper.Psi.BuildScripts.BuildScriptDeclaredElementPresenter : object {
    public sealed virtual RichText Format(DeclaredElementPresenterStyle style, IDeclaredElement element, ISubstitution substitution, DeclaredElementPresenterMarking& marking);
    protected virtual string GetElementTypeName(IDeclaredElement element);
    public sealed virtual string Format(ParameterKind parameterKind);
    public sealed virtual string Format(AccessRights accessRights);
    public sealed virtual string GetEntityKind(IDeclaredElement declaredElement);
}
public class JetBrains.ReSharper.Psi.BuildScripts.BuildScriptDeclaredElementType : DeclaredElementType {
    private string myInternalName;
    private IconId myImageName;
    private IDeclaredElementPresenter myPresenter;
    [CompilerGeneratedAttribute]
private string <PresentableName>k__BackingField;
    public static DeclaredElementType TAG;
    public static DeclaredElementType ATTRIBUTE;
    public string PresentableName { get; }
    protected IDeclaredElementPresenter DefaultPresenter { get; }
    protected BuildScriptDeclaredElementType(string presentableName, string name, IconId imageName);
    private static BuildScriptDeclaredElementType();
    public virtual string ToString();
    [CompilerGeneratedAttribute]
public virtual string get_PresentableName();
    public virtual IconId GetImage();
    protected virtual IDeclaredElementPresenter get_DefaultPresenter();
    public virtual bool IsPresentable(PsiLanguageType language);
    public virtual bool IsEqual(BuildScriptDeclaredElementType type);
}
[LanguageDefinitionAttribute("BUILD_SCRIPT")]
public class JetBrains.ReSharper.Psi.BuildScripts.BuildScriptLanguage : XmlLanguage {
    public static string Name;
    [CompilerGeneratedAttribute]
private static BuildScriptLanguage <Instance>k__BackingField;
    [CanBeNullAttribute]
[UsedImplicitlyAttribute]
public static BuildScriptLanguage Instance { get; private set; }
    public PsiLanguageCategories SupportedCategories { get; }
    protected BuildScriptLanguage(string name);
    protected BuildScriptLanguage(string name, string presentableName);
    [CompilerGeneratedAttribute]
public static BuildScriptLanguage get_Instance();
    [CompilerGeneratedAttribute]
private static void set_Instance(BuildScriptLanguage value);
    public virtual PsiLanguageCategories get_SupportedCategories();
}
public abstract class JetBrains.ReSharper.Psi.BuildScripts.BuildScriptLanguageServiceBase : XmlLanguageService {
    protected BuildScriptLanguageServiceBase(XmlLanguage languageType, IConstantValueService constantValueService, XmlTokenTypes tokenTypes, IXmlElementFactory elementFactory, XmlCodeFormatter codeFormatter, CommonIdentifierIntern commonIdentifierIntern);
    public abstract virtual IDeclarationFinder GetDeclarationFinder();
    public abstract virtual string GetProjectAttributeName();
    public abstract virtual string GetDefaultTargetAttributeName();
    public abstract virtual IBuildScriptFileExecutorBase GetBuildScriptExecutor();
    public abstract virtual ICommonElementProvider GetCommonElementProvider(ISolution solution);
    public abstract virtual DeclaredElementFinder CreateDeclaredElementFinder(ISolution solution);
    public abstract virtual ValueEvaluator GetValueEvaluator();
}
public abstract class JetBrains.ReSharper.Psi.BuildScripts.BuildScriptModule : UserDataHolder {
    private Dictionary`2<IProjectFile, PsiProjectFile> myFiles;
    private ISolution mySolution;
    public string Name { get; }
    public string DisplayName { get; }
    public TargetFrameworkId TargetFrameworkId { get; }
    public PsiLanguageType PsiLanguage { get; }
    public ProjectFileType ProjectFileType { get; }
    public IModule ContainingProjectModule { get; }
    public IEnumerable`1<IPsiSourceFile> SourceFiles { get; }
    protected BuildScriptModule(ISolution solution);
    public abstract virtual string get_Name();
    public abstract virtual string get_DisplayName();
    public sealed virtual TargetFrameworkId get_TargetFrameworkId();
    public sealed virtual ISolution GetSolution();
    public IEnumerable`1<IPsiSourceFile> GetPsiSourceFileFor(IProjectFile projectFile);
    public abstract virtual PsiLanguageType get_PsiLanguage();
    public abstract virtual ProjectFileType get_ProjectFileType();
    public sealed virtual IEnumerable`1<IPsiModuleReference> GetReferences(IModuleReferenceResolveContext moduleReferenceResolveContext);
    public sealed virtual IModule get_ContainingProjectModule();
    public sealed virtual IEnumerable`1<IPsiSourceFile> get_SourceFiles();
    public sealed virtual IPsiServices GetPsiServices();
    public sealed virtual ICollection`1<PreProcessingDirective> GetAllDefines();
    public sealed virtual bool IsValid();
    public abstract virtual string GetPersistentID();
    public IPsiSourceFile SetMapping(IProjectFile projectFile);
    public void RemoveMapping(IProjectFile projectFile);
    [CompilerGeneratedAttribute]
private bool <SetMapping>b__24_1(IProjectFile file, IPsiSourceFile sourceFile);
}
public static class JetBrains.ReSharper.Psi.BuildScripts.BuildScriptNavigator : object {
    [CanBeNullAttribute]
public static IBuildFile GetFileByTag(IBuildScriptTag tag);
    [CanBeNullAttribute]
public static IBuildScriptAttribute GetByToken(IXmlToken token);
    [CanBeNullAttribute]
public static IBuildScriptTag GetByAttribute(IBuildScriptAttribute attribute);
    [CanBeNullAttribute]
public static IBuildScriptTag GetTagByToken(IXmlToken token);
    [CanBeNullAttribute]
public static IBuildScriptTag GetByTag(IBuildScriptTag tag);
    [CanBeNullAttribute]
public static IBuildFile GetFileByToken(IXmlToken token);
    [CanBeNullAttribute]
public static IBuildScriptTag GetTagByHeaderIdentifier(IXmlToken token);
    [CanBeNullAttribute]
public static IBuildScriptTag GetTagByFooterIdentifier(IXmlToken token);
    [CanBeNullAttribute]
public static IBuildFile GetFileByElement(ITreeNode element);
    [NotNullAttribute]
public static List`1<T> LookupAllChildItems(IBuildFile file);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Psi.BuildScripts.BuildScriptNavigator/<LookupAllImportTags>d__10")]
public static IEnumerable`1<BuildScriptTagBase> LookupAllImportTags(IBuildFile file);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Psi.BuildScripts.BuildScriptNavigator/<LookupRecursively>d__11`1")]
private static IEnumerable`1<T> LookupRecursively(ITreeNode treeNode);
}
public abstract class JetBrains.ReSharper.Psi.BuildScripts.BuildScriptPsiModuleProvider : object {
    protected BuildScriptModule Module { get; }
    protected abstract virtual BuildScriptModule get_Module();
    public sealed virtual IEnumerable`1<IPsiModule> GetModules();
    public sealed virtual IEnumerable`1<IPsiSourceFile> GetPsiSourceFilesFor(IProjectFile projectFile);
    public sealed virtual void OnProjectFileChanged(IProjectFile projectFile, ChangeType changeType, PsiModuleChangeBuilder changeBuilder, VirtualFileSystemPath oldLocation);
    public sealed virtual void Dispose();
}
public class JetBrains.ReSharper.Psi.BuildScripts.BuildScriptSourceFileProperties : object {
    public bool ShouldBuildPsi { get; }
    public bool IsICacheParticipant { get; }
    public bool IsGeneratedFile { get; }
    public bool ProvidesCodeModel { get; }
    public bool IsNonUserFile { get; }
    public sealed virtual bool get_ShouldBuildPsi();
    public sealed virtual bool get_IsICacheParticipant();
    public sealed virtual bool get_IsGeneratedFile();
    public sealed virtual bool get_ProvidesCodeModel();
    public sealed virtual bool get_IsNonUserFile();
    public sealed virtual IEnumerable`1<string> GetPreImportedNamespaces();
    public sealed virtual string GetDefaultNamespace();
    public sealed virtual ICollection`1<PreProcessingDirective> GetDefines();
}
public abstract class JetBrains.ReSharper.Psi.BuildScripts.Declarations.ExternalPropertyDeclaration : CompositeElement {
    private XmlCompositeNodeType myNodeType;
    [CompilerGeneratedAttribute]
private ISolution <Solution>k__BackingField;
    private IDeclaredElement myDeclaredElement;
    [CompilerGeneratedAttribute]
private string <DeclaredName>k__BackingField;
    public bool IsDeclarationValid { get; }
    public PsiLanguageType Language { get; }
    private PsiLanguageType JetBrains.ReSharper.Psi.Tree.ITreeNode.Language { get; }
    public NodeType NodeType { get; }
    public ISolution Solution { get; public set; }
    [CanBeNullAttribute]
public IDeclaredElement DeclaredElement { get; private set; }
    [CanBeNullAttribute]
public string DeclaredName { get; private set; }
    [CanBeNullAttribute]
public string PropertyName { get; }
    protected ExternalPropertyDeclaration(string name, XmlCompositeNodeType nodeType);
    public sealed virtual bool IsSynthetic();
    public sealed virtual bool get_IsDeclarationValid();
    public virtual PsiLanguageType get_Language();
    private sealed virtual override PsiLanguageType JetBrains.ReSharper.Psi.Tree.ITreeNode.get_Language();
    public virtual NodeType get_NodeType();
    public sealed virtual void SetDeclaredElement(IDeclaredElement declaredElement);
    public abstract virtual BuildScriptDeclaredElementBase CreateDeclaredElement(JetHashSet`1<BuildScriptNode> nodes, ISolution solution);
    public abstract virtual DeclaredElementType GetElementType();
    public sealed virtual void InitReference(BuildScriptFileBase file);
    [CompilerGeneratedAttribute]
public sealed virtual ISolution get_Solution();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Solution(ISolution value);
    public sealed virtual IDeclaredElement get_DeclaredElement();
    private void set_DeclaredElement(IDeclaredElement value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_DeclaredName();
    [CompilerGeneratedAttribute]
private void set_DeclaredName(string value);
    public sealed virtual IList`1<string> GetValues();
    public sealed virtual string get_PropertyName();
    public sealed virtual void SetName(string name);
    public sealed virtual TreeTextRange GetNameRange();
    public sealed virtual XmlNode GetXMLDoc(bool inherit);
}
public abstract class JetBrains.ReSharper.Psi.BuildScripts.Declarations.ExternalPropertyDeclarationNodeType : BuildScriptNodeType {
    protected ExternalPropertyDeclarationNodeType(string name, XmlElementTypes xmlElementTypes, int index);
}
public interface JetBrains.ReSharper.Psi.BuildScripts.Declarations.IBuildScriptDeclaration {
    public ISolution Solution { get; public set; }
    public bool IsDeclarationValid { get; }
    public abstract virtual void SetDeclaredElement(IDeclaredElement declaredElement);
    public abstract virtual BuildScriptDeclaredElementBase CreateDeclaredElement(JetHashSet`1<BuildScriptNode> nodes, ISolution solution);
    public abstract virtual DeclaredElementType GetElementType();
    public abstract virtual void InitReference(BuildScriptFileBase file);
    public abstract virtual ISolution get_Solution();
    public abstract virtual void set_Solution(ISolution value);
    public abstract virtual bool get_IsDeclarationValid();
}
public interface JetBrains.ReSharper.Psi.BuildScripts.Declarations.IPropertyDeclaration {
    public string PropertyName { get; }
    public abstract virtual IList`1<string> GetValues();
    public abstract virtual string get_PropertyName();
}
public abstract class JetBrains.ReSharper.Psi.BuildScripts.DeclaredElementFinder : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, IDeclaredElement> <DeclaredElements>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, IDeclaredElement> <InitialDeclaredElements>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, IDeclaredElement> <SkippedDeclaredElements>k__BackingField;
    [CompilerGeneratedAttribute]
private ISolution <Solution>k__BackingField;
    public Dictionary`2<string, IDeclaredElement> DeclaredElements { get; public set; }
    public Dictionary`2<string, IDeclaredElement> InitialDeclaredElements { get; public set; }
    public Dictionary`2<string, IDeclaredElement> SkippedDeclaredElements { get; public set; }
    public ISolution Solution { get; }
    protected DeclaredElementFinder(ISolution solution);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, IDeclaredElement> get_DeclaredElements();
    [CompilerGeneratedAttribute]
public void set_DeclaredElements(Dictionary`2<string, IDeclaredElement> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, IDeclaredElement> get_InitialDeclaredElements();
    [CompilerGeneratedAttribute]
public void set_InitialDeclaredElements(Dictionary`2<string, IDeclaredElement> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, IDeclaredElement> get_SkippedDeclaredElements();
    [CompilerGeneratedAttribute]
public void set_SkippedDeclaredElements(Dictionary`2<string, IDeclaredElement> value);
    [CompilerGeneratedAttribute]
public ISolution get_Solution();
    public abstract virtual void ProcessTag(BuildScriptTagBase tag, BuildScriptNode node);
    public abstract virtual void ProcessAttribute(BuildScriptAttributeBase attribute, BuildScriptNode node);
    protected abstract virtual IDeclaredElement CreatePropertyDeclaredElement(string name, ISolution solution);
    public void ProcessExternalPropertiesElement(ExternalPropertiesElement element, BuildScriptNode node);
}
public abstract class JetBrains.ReSharper.Psi.BuildScripts.DeclaredElements.BuildScriptDeclaredElementBase : object {
    private JetWeakReference`1<JetHashSet`1<IDeclaration>> myCachedDeclarations;
    private string myShortName;
    private Dictionary`2<BuildScriptNode, JetHashSet`1<TreeOffset>> myDeclarationPointers;
    private ISolution mySolution;
    private object myStructureLock;
    public string ShortName { get; }
    public bool CaseSensitiveName { get; }
    public PsiLanguageType PresentationLanguage { get; }
    protected BuildScriptDeclaredElementBase(string name, JetHashSet`1<BuildScriptNode> nodes, ISolution solution);
    public sealed virtual IList`1<IDeclaration> GetDeclarations();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Psi.BuildScripts.DeclaredElements.BuildScriptDeclaredElementBase/<GetDeclarationsInFile>d__7")]
private IEnumerable`1<IDeclaration> GetDeclarationsInFile(BuildScriptFileBase file, IEnumerable`1<TreeOffset> offsets);
    public void RemoveDeclarations(VirtualFileSystemPath filePath);
    public sealed virtual IList`1<IDeclaration> GetDeclarationsIn(IPsiSourceFile sourceFile);
    public void ContainedInNode(BuildScriptNode node);
    public void NotContainedInNode(BuildScriptNode node);
    public void ClearContainingNodes();
    public BuildScriptNode[] GetContainingNodes();
    public sealed virtual string get_ShortName();
    public sealed virtual bool get_CaseSensitiveName();
    public abstract virtual DeclaredElementType GetElementType();
    public sealed virtual IPsiServices GetPsiServices();
    public sealed virtual XmlNode GetXMLDoc(bool inherit);
    public sealed virtual XmlNode GetXMLDescriptionSummary(bool inherit);
    public sealed virtual bool IsValid();
    public sealed virtual bool IsSynthetic();
    public abstract virtual PsiLanguageType get_PresentationLanguage();
    public sealed virtual HybridCollection`1<IPsiSourceFile> GetSourceFiles();
    public sealed virtual bool HasDeclarationsIn(IPsiSourceFile sourceFile);
    public void SetName(string name);
    public void AddDeclaration(IDeclaration declaration, BuildScriptNode node);
    public virtual string ToString();
    public void AddContainingNode(BuildScriptNode node);
    public void UpdateDeclarations(DocumentChange documentChange, BuildScriptNode node);
    [CompilerGeneratedAttribute]
private IEnumerable`1<IDeclaration> <GetDeclarations>b__6_0(KeyValuePair`2<BuildScriptNode, JetHashSet`1<TreeOffset>> p);
}
public abstract class JetBrains.ReSharper.Psi.BuildScripts.DeclaredElements.PropertyDeclaredElement : BuildScriptDeclaredElementBase {
    protected PropertyDeclaredElement(string name, JetHashSet`1<BuildScriptNode> nodes, ISolution solution);
}
public abstract class JetBrains.ReSharper.Psi.BuildScripts.DeclaredElements.TargetDeclaredElement : BuildScriptDeclaredElementBase {
    protected TargetDeclaredElement(string name, JetHashSet`1<BuildScriptNode> nodes, ISolution solution);
}
public interface JetBrains.ReSharper.Psi.BuildScripts.ICommonElementProvider {
    [CanBeNullAttribute]
public abstract virtual IDeclaredElement GetCommonElement(string name, DeclaredElementType expectedType, IPsiSourceFile file);
    public abstract virtual bool IsCommonElement(IDeclaredElement declaredElement);
    public abstract virtual IEnumerable`1<IDeclaredElement> GetAllCommonElements(IPsiSourceFile file);
}
public class JetBrains.ReSharper.Psi.BuildScripts.Icons.PsiBuildScriptsThemedIcons : object {
}
public interface JetBrains.ReSharper.Psi.BuildScripts.IDeclarationFinder {
    public abstract virtual List`1<IDeclaration> FindDeclarationsBefore(BuildScriptFileBase file, TreeTextRange range);
    public abstract virtual List`1<IDeclaration> FindAllDeclarations(BuildScriptFileBase file);
}
[ZoneDefinitionAttribute]
[ZoneDefinitionConfigurableFeatureAttribute("MsBuild and NAnt", "Support for MSBuild and NAnt scripts", "False")]
public interface JetBrains.ReSharper.Psi.BuildScripts.ILanguageBuildScriptsZone {
}
[PsiComponentAttribute("0")]
public class JetBrains.ReSharper.Psi.BuildScripts.InclusionEngine.BuildScriptCache : object {
    private static byte FORMAT_VERSION;
    private static string FOLDER_NAME;
    private object myCacheLock;
    private HashSet`1<IPsiSourceFile> myDirtyProjectFiles;
    private ISolution mySolution;
    private object myStructureLock;
    private IPersistentIndexManager myPersistentIndexManager;
    private SimplePersistentCache`1<BuildScriptCacheData> myPersistentCache;
    private BuildScriptGraph myBuildScriptGraph;
    private IShellLocks myLocks;
    private Lifetime myLifetime;
    private IPsiConfiguration myPsiConfiguration;
    [CompilerGeneratedAttribute]
private Dictionary`2<IPsiSourceFile, BuildScriptCacheData> <CachedData>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsUpToDate>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<IPsiSourceFile, FileModificationStamp> <State>k__BackingField;
    [CompilerGeneratedAttribute]
private PsiProjectFileTypeCoordinator <PsiProjectFileTypeCoordinator>k__BackingField;
    public Dictionary`2<IPsiSourceFile, BuildScriptCacheData> CachedData { get; }
    public bool IsUpToDate { get; private set; }
    private Dictionary`2<IPsiSourceFile, FileModificationStamp> State { get; }
    public PsiProjectFileTypeCoordinator PsiProjectFileTypeCoordinator { get; }
    public bool HasDirtyFiles { get; }
    public BuildScriptGraph Graph { get; }
    public BuildScriptCache(Lifetime lifetime, IShellLocks locks, ISolution solution, IPsiConfiguration psiConfiguration, IPersistentIndexManager persistentIndexManager, PsiProjectFileTypeCoordinator psiProjectFileTypeCoordinator);
    [CompilerGeneratedAttribute]
public Dictionary`2<IPsiSourceFile, BuildScriptCacheData> get_CachedData();
    [CompilerGeneratedAttribute]
public bool get_IsUpToDate();
    [CompilerGeneratedAttribute]
private void set_IsUpToDate(bool value);
    [CompilerGeneratedAttribute]
private Dictionary`2<IPsiSourceFile, FileModificationStamp> get_State();
    [CompilerGeneratedAttribute]
public PsiProjectFileTypeCoordinator get_PsiProjectFileTypeCoordinator();
    private sealed virtual override object JetBrains.ReSharper.Psi.Caches.ICache.Load(IProgressIndicator progress, bool enablePersistence);
    private sealed virtual override void JetBrains.ReSharper.Psi.Caches.ICache.MergeLoaded(object data);
    private sealed virtual override void JetBrains.ReSharper.Psi.Caches.ICache.Save(IProgressIndicator progress, bool enablePersistence);
    public sealed virtual bool get_HasDirtyFiles();
    public BuildScriptGraph get_Graph();
    private BuildScriptGraph ForceGraphLoad();
    public void CheckBuildScriptGraph();
    public void Clear();
    public sealed virtual void OnDocumentChange(IPsiSourceFile sourceFile, ProjectFileDocumentCopyChange args);
    private sealed virtual override void JetBrains.ReSharper.Psi.Caches.IPsiSourceFileCache.MarkAsDirty(IPsiSourceFile sourceFile);
    public sealed virtual bool UpToDate(IPsiSourceFile sourceFile);
    public sealed virtual object Build(IPsiSourceFile sourceFile, bool isStartup);
    [CanBeNullAttribute]
private BuildScriptCacheState BuildStateForFile(IPsiSourceFile psiSourceFile, bool isStartup);
    public sealed virtual void Merge(IPsiSourceFile sourceFile, object builtPart);
    public sealed virtual void Drop(IPsiSourceFile sourceFile);
    public sealed virtual void OnPsiChange(ITreeNode elementContainingChanges, PsiChangedElementType type);
    public sealed virtual void SyncUpdate(bool underTransaction);
    public sealed virtual void Dump(TextWriter writer, IPsiSourceFile sourceFile);
    private void ForceDirtyFilesRescan();
    private void UpdateStateForProjectFile(IPsiSourceFile sourceFile);
    [CompilerGeneratedAttribute]
private void <JetBrains.ReSharper.Psi.Caches.ICache.Load>b__26_1(IPsiSourceFile sourceFile, BuildScriptCacheData data);
}
public class JetBrains.ReSharper.Psi.BuildScripts.InclusionEngine.BuildScriptCacheData : object {
    [CompilerGeneratedAttribute]
private OneToSetMap`2<TreeTextRange, VirtualFileSystemPath> <RangeToFileIdMapping>k__BackingField;
    public OneToSetMap`2<TreeTextRange, VirtualFileSystemPath> RangeToFileIdMapping { get; }
    public BuildScriptCacheData(OneToSetMap`2<TreeTextRange, VirtualFileSystemPath> data);
    [CompilerGeneratedAttribute]
public OneToSetMap`2<TreeTextRange, VirtualFileSystemPath> get_RangeToFileIdMapping();
}
public class JetBrains.ReSharper.Psi.BuildScripts.InclusionEngine.BuildScriptEdge : object {
    [CompilerGeneratedAttribute]
private BuildScriptNode <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private BuildScriptNode <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private TreeTextRange <Range>k__BackingField;
    public BuildScriptNode Source { get; public set; }
    public BuildScriptNode Target { get; public set; }
    public TreeTextRange Range { get; public set; }
    [CompilerGeneratedAttribute]
public BuildScriptNode get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(BuildScriptNode value);
    [CompilerGeneratedAttribute]
public BuildScriptNode get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(BuildScriptNode value);
    [CompilerGeneratedAttribute]
public TreeTextRange get_Range();
    [CompilerGeneratedAttribute]
public void set_Range(TreeTextRange value);
    public sealed virtual bool Equals(BuildScriptEdge buildScriptEdge);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class JetBrains.ReSharper.Psi.BuildScripts.InclusionEngine.BuildScriptFinder : RecursiveProjectVisitor {
    private List`1<IProjectFile> myCollectedFiles;
    private JetHashSet`1<string> myFileExtensionsToSkip;
    public BuildScriptFinder(IEnumerable`1<string> fileExtensionsToSkip);
    public virtual void VisitProjectFile(IProjectFile projectFile);
    private bool Skip(IProjectModelElement projectFile);
    public IEnumerable`1<IProjectFile> Find(ISolution solution);
}
[DefaultMemberAttribute("Item")]
public class JetBrains.ReSharper.Psi.BuildScripts.InclusionEngine.BuildScriptGraph : object {
    private Dictionary`2<VirtualFileSystemPath, BuildScriptNode> myNodes;
    private object myStructureLock;
    private ISolution mySolution;
    public List`1<BuildScriptNode> Nodes { get; }
    [CanBeNullAttribute]
public BuildScriptNode Item { get; }
    public BuildScriptGraph(ISolution solution);
    public List`1<BuildScriptNode> get_Nodes();
    public BuildScriptNode GetNode(VirtualFileSystemPath filePath, IProject project, LanguageService languageService);
    public bool IsUpToDate(IProjectFile file);
    public BuildScriptNode get_Item(VirtualFileSystemPath filePath);
    public void Build(BuildScriptFinder finder, BuildScriptCache buildScriptCache);
    public void DeleteSandboxedFiles();
    private void BuildWithCache(BuildScriptCache cache);
    private static BuildScriptNode CreateNode(IProjectFile projectFile, VirtualFileSystemPath key, LanguageService languageService);
    private static VirtualFileSystemPath GetKey(IProjectItem file);
    private void BuildWithoutCache(BuildScriptFinder finder);
    private void ProcessFile(BuildScriptFileBase file, List`1<IFile> cache, IProject project, Dictionary`2<VirtualFileSystemPath, IFile> cachedPsiFiles);
    public void UpdateForProjectFile(Lifetime lifetime, IShellLocks locks, IProjectFile projectFile);
    private static void ClearHierarchy(BuildScriptNode node);
}
[PsiComponentAttribute("0")]
public class JetBrains.ReSharper.Psi.BuildScripts.InclusionEngine.BuildScriptManager : object {
    private BuildScriptCache myCache;
    private ISolution mySolution;
    public BuildScriptGraph Graph { get; }
    public BuildScriptManager(Lifetime lifetime, ISolution solution, BuildScriptCache cache);
    public void Clear();
    public BuildScriptGraph get_Graph();
    public ICollection`1<IDeclaredElement> GetInclusionDeclaredElementsForFile(BuildScriptFileBase file);
    public ICollection`1<BuildScriptFileBase> GetInclusionFiles(BuildScriptFileBase file);
    public JetHashSet`1<IDeclaredElement> GetVisibleDeclaredElementsForFile(BuildScriptFileBase file);
    public static BuildScriptManager GetInstance(ISolution solution);
}
public abstract class JetBrains.ReSharper.Psi.BuildScripts.InclusionEngine.BuildScriptNode : object {
    [CompilerGeneratedAttribute]
private OneToSetMap`2<TreeTextRange, BuildScriptEdge> <OutgoingEdges>k__BackingField;
    [CompilerGeneratedAttribute]
private JetHashSet`1<BuildScriptEdge> <IncomingEdges>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ID>k__BackingField;
    [CompilerGeneratedAttribute]
private VirtualFileSystemPath <FilePath>k__BackingField;
    protected LanguageService myLanguageService;
    public OneToSetMap`2<TreeTextRange, BuildScriptEdge> OutgoingEdges { get; }
    public JetHashSet`1<BuildScriptEdge> IncomingEdges { get; }
    public string ID { get; }
    public VirtualFileSystemPath FilePath { get; protected set; }
    protected BuildScriptNode(VirtualFileSystemPath filePath, string id, LanguageService languageService);
    [CompilerGeneratedAttribute]
public OneToSetMap`2<TreeTextRange, BuildScriptEdge> get_OutgoingEdges();
    [CompilerGeneratedAttribute]
public JetHashSet`1<BuildScriptEdge> get_IncomingEdges();
    [CompilerGeneratedAttribute]
public string get_ID();
    [CompilerGeneratedAttribute]
public VirtualFileSystemPath get_FilePath();
    [CompilerGeneratedAttribute]
protected void set_FilePath(VirtualFileSystemPath value);
    public abstract virtual BuildScriptFileBase GetFile();
    public bool PointsToNode(BuildScriptNode node);
}
public class JetBrains.ReSharper.Psi.BuildScripts.InclusionEngine.BuildScriptNonProjectFileNode : BuildScriptNode {
    [CompilerGeneratedAttribute]
private ISolution <Solution>k__BackingField;
    public ISolution Solution { get; }
    public BuildScriptNonProjectFileNode(VirtualFileSystemPath filePath, string id, LanguageService languageService, ISolution solution);
    [CompilerGeneratedAttribute]
public ISolution get_Solution();
    public virtual BuildScriptFileBase GetFile();
    public virtual string ToString();
}
public class JetBrains.ReSharper.Psi.BuildScripts.InclusionEngine.BuildScriptProjectFileNode : BuildScriptNode {
    private ISolution mySolution;
    [CanBeNullAttribute]
public IProjectFile ProjectFile { get; }
    public BuildScriptProjectFileNode(IProjectFile projectFile, string id, LanguageService languageService);
    public IProjectFile get_ProjectFile();
    public virtual BuildScriptFileBase GetFile();
    public virtual string ToString();
}
public abstract class JetBrains.ReSharper.Psi.BuildScripts.InclusionEngine.CommonExecutionContext : object {
    [CompilerGeneratedAttribute]
private VirtualFileSystemPath <FileLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private ISolution <Solution>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IFile> <ExecutedFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<VirtualFileSystemPath, IFile> <CachedExternalPsiFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private BuildScriptGraph <BuildScriptGraph>k__BackingField;
    [CompilerGeneratedAttribute]
private IProject <Project>k__BackingField;
    public VirtualFileSystemPath FileLocation { get; }
    public ISolution Solution { get; }
    public List`1<IFile> ExecutedFiles { get; }
    public Dictionary`2<VirtualFileSystemPath, IFile> CachedExternalPsiFiles { get; }
    public BuildScriptGraph BuildScriptGraph { get; }
    public IProject Project { get; }
    protected CommonExecutionContext(ISolution solution, IProject project, VirtualFileSystemPath fileLocation, Dictionary`2<VirtualFileSystemPath, IFile> cachedPsiFiles, BuildScriptGraph buildScriptGraph);
    [CompilerGeneratedAttribute]
public VirtualFileSystemPath get_FileLocation();
    [CompilerGeneratedAttribute]
public ISolution get_Solution();
    [CompilerGeneratedAttribute]
public List`1<IFile> get_ExecutedFiles();
    [CompilerGeneratedAttribute]
public Dictionary`2<VirtualFileSystemPath, IFile> get_CachedExternalPsiFiles();
    [CompilerGeneratedAttribute]
public BuildScriptGraph get_BuildScriptGraph();
    [CompilerGeneratedAttribute]
public IProject get_Project();
    public void CheckForInterrupt();
}
public abstract class JetBrains.ReSharper.Psi.BuildScripts.InclusionEngine.IBuildScriptFileExecutorBase : object {
    public abstract virtual CommonExecutionContext Execute(BuildScriptFileBase file, ISolution solution, IProject project, Dictionary`2<VirtualFileSystemPath, IFile> cachedPsiFiles, BuildScriptGraph buildScriptGraph);
    protected static void MakeInclusionEdge(IBuildFile file, IBuildFile importedFile, CommonExecutionContext context, TreeTextRange range);
}
public interface JetBrains.ReSharper.Psi.BuildScripts.InclusionEngine.IInclusionTag {
    public List`1<string> ImportedFileIds { get; public set; }
    [CanBeNullAttribute]
public IBuildScriptAttribute ImportAttribute { get; }
    public abstract virtual List`1<string> get_ImportedFileIds();
    public abstract virtual void set_ImportedFileIds(List`1<string> value);
    public abstract virtual IBuildScriptAttribute get_ImportAttribute();
}
public interface JetBrains.ReSharper.Psi.BuildScripts.InclusionEngine.ILanguageSpecificBuildScriptFinder {
    public abstract virtual bool IsBuildScriptFile(IProjectFile projectFile);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Psi.BuildScripts.InclusionEngine.ScriptFileIdentityManager : object {
    [ExtensionAttribute]
public static string GetIdForFile(BuildScriptFileBase file);
}
public interface JetBrains.ReSharper.Psi.BuildScripts.ITask {
}
public abstract class JetBrains.ReSharper.Psi.BuildScripts.MSBuild.Declarations.MSBuildAttributeBasedDeclaration : MSBuildAttribute {
    private IDeclaredElement myDeclaredElement;
    [CompilerGeneratedAttribute]
private ISolution <Solution>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DeclaredName>k__BackingField;
    public bool IsDeclarationValid { get; }
    public ISolution Solution { get; public set; }
    public IDeclaredElement DeclaredElement { get; }
    public string DeclaredName { get; private set; }
    protected MSBuildAttributeBasedDeclaration(XmlCompositeNodeType nodeType);
    public void SetDeclaredName(string name);
    public sealed virtual bool IsSynthetic();
    public sealed virtual bool get_IsDeclarationValid();
    public sealed virtual void SetDeclaredElement(IDeclaredElement declaredElement);
    public abstract virtual BuildScriptDeclaredElementBase CreateDeclaredElement(JetHashSet`1<BuildScriptNode> nodes, ISolution solution);
    public abstract virtual DeclaredElementType GetElementType();
    [CompilerGeneratedAttribute]
public sealed virtual ISolution get_Solution();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Solution(ISolution value);
    public abstract virtual void InitReference(BuildScriptFileBase file);
    public sealed virtual IDeclaredElement get_DeclaredElement();
    [CompilerGeneratedAttribute]
public sealed virtual string get_DeclaredName();
    [CompilerGeneratedAttribute]
private void set_DeclaredName(string value);
    public sealed virtual void SetName(string name);
    public sealed virtual TreeTextRange GetNameRange();
    public sealed virtual XmlNode GetXMLDoc(bool inherit);
}
public class JetBrains.ReSharper.Psi.BuildScripts.MSBuild.Declarations.MSBuildAttributedItemGroupDeclaration : MSBuildAttributeBasedDeclaration {
    [CanBeNullAttribute]
public string ItemGroupName { get; }
    public MSBuildAttributedItemGroupDeclaration(XmlCompositeNodeType nodeType);
    public virtual BuildScriptDeclaredElementBase CreateDeclaredElement(JetHashSet`1<BuildScriptNode> nodes, ISolution solution);
    public virtual DeclaredElementType GetElementType();
    public virtual void InitReference(BuildScriptFileBase file);
    public string get_ItemGroupName();
}
public class JetBrains.ReSharper.Psi.BuildScripts.MSBuild.Declarations.MSBuildAttributedPropertyDeclaration : MSBuildAttributeBasedDeclaration {
    public string PropertyName { get; }
    public MSBuildAttributedPropertyDeclaration(XmlCompositeNodeType nodeType);
    public sealed virtual IList`1<string> GetValues();
    public sealed virtual string get_PropertyName();
    public virtual BuildScriptDeclaredElementBase CreateDeclaredElement(JetHashSet`1<BuildScriptNode> nodes, ISolution solution);
    public virtual DeclaredElementType GetElementType();
    public virtual void InitReference(BuildScriptFileBase file);
}
public class JetBrains.ReSharper.Psi.BuildScripts.MSBuild.Declarations.MSBuildExternalPropertyDeclaration : ExternalPropertyDeclaration {
    public MSBuildExternalPropertyDeclaration(string name, XmlCompositeNodeType nodeType);
    public virtual BuildScriptDeclaredElementBase CreateDeclaredElement(JetHashSet`1<BuildScriptNode> nodes, ISolution solution);
    public virtual DeclaredElementType GetElementType();
}
public class JetBrains.ReSharper.Psi.BuildScripts.MSBuild.Declarations.MSBuildItemGroupDeclaration : TagBasedDeclaration {
    public string ItemGroupName { get; }
    public MSBuildItemGroupDeclaration(string name, XmlCompositeNodeType nodeType);
    public sealed virtual string get_ItemGroupName();
    public virtual BuildScriptDeclaredElementBase CreateDeclaredElement(JetHashSet`1<BuildScriptNode> nodes, ISolution solution);
    public virtual DeclaredElementType GetElementType();
    public virtual void InitReference(BuildScriptFileBase file);
}
public class JetBrains.ReSharper.Psi.BuildScripts.MSBuild.Declarations.MSBuildMetadataDeclaration : TagBasedDeclaration {
    public MSBuildMetadataDeclaration(string name, XmlCompositeNodeType nodeType);
    public virtual BuildScriptDeclaredElementBase CreateDeclaredElement(JetHashSet`1<BuildScriptNode> nodes, ISolution solution);
    public virtual DeclaredElementType GetElementType();
    public virtual void InitReference(BuildScriptFileBase file);
}
public class JetBrains.ReSharper.Psi.BuildScripts.MSBuild.Declarations.MSBuildPropertyDeclaration : TagBasedDeclaration {
    public string PropertyName { get; }
    public IBuildScriptDeclaration PropertyDeclaration { get; }
    public MSBuildPropertyDeclaration(string name, XmlCompositeNodeType nodeType);
    public sealed virtual string get_PropertyName();
    public sealed virtual IBuildScriptDeclaration get_PropertyDeclaration();
    public sealed virtual IList`1<string> GetValues();
    public virtual BuildScriptDeclaredElementBase CreateDeclaredElement(JetHashSet`1<BuildScriptNode> nodes, ISolution solution);
    public virtual DeclaredElementType GetElementType();
    public virtual void InitReference(BuildScriptFileBase file);
    protected virtual ReferenceCollection CreateFirstClassReferences();
    private ReferenceCollection GetMSBuildTextReferences();
    [CompilerGeneratedAttribute]
private IReference <GetMSBuildTextReferences>b__10_0(XmlCompositeElement element, TreeTextRange range, TreeTextRange rangeInToken, string name, DeclaredElementType type);
}
public class JetBrains.ReSharper.Psi.BuildScripts.MSBuild.Declarations.MSBuildTargetDeclaration : MSBuildAttributeBasedDeclaration {
    [CanBeNullAttribute]
public string TargetName { get; }
    public MSBuildTargetDeclaration(XmlCompositeNodeType nodeType);
    public virtual BuildScriptDeclaredElementBase CreateDeclaredElement(JetHashSet`1<BuildScriptNode> nodes, ISolution solution);
    public virtual DeclaredElementType GetElementType();
    public virtual void InitReference(BuildScriptFileBase file);
    public string get_TargetName();
}
public class JetBrains.ReSharper.Psi.BuildScripts.MSBuild.Declarations.MSBuildTaskDeclaration : MSBuildAttributeBasedDeclaration {
    [CanBeNullAttribute]
public string FullTaskName { get; }
    public MSBuildTaskDeclaration(XmlCompositeNodeType nodeType);
    public string get_FullTaskName();
    public virtual BuildScriptDeclaredElementBase CreateDeclaredElement(JetHashSet`1<BuildScriptNode> nodes, ISolution solution);
    public virtual DeclaredElementType GetElementType();
    public virtual void InitReference(BuildScriptFileBase file);
}
public abstract class JetBrains.ReSharper.Psi.BuildScripts.MSBuild.Declarations.TagBasedDeclaration : MSBuildTag {
    private IDeclaredElement myDeclaredElement;
    private string myDeclaredName;
    [CompilerGeneratedAttribute]
private ISolution <Solution>k__BackingField;
    public bool IsDeclarationValid { get; }
    public ISolution Solution { get; public set; }
    public IDeclaredElement DeclaredElement { get; }
    public string DeclaredName { get; }
    protected TagBasedDeclaration(string name, XmlCompositeNodeType nodeType);
    public sealed virtual bool IsSynthetic();
    public sealed virtual bool get_IsDeclarationValid();
    public sealed virtual void SetDeclaredElement(IDeclaredElement declaredElement);
    public abstract virtual BuildScriptDeclaredElementBase CreateDeclaredElement(JetHashSet`1<BuildScriptNode> nodes, ISolution solution);
    public abstract virtual DeclaredElementType GetElementType();
    public abstract virtual void InitReference(BuildScriptFileBase file);
    [CompilerGeneratedAttribute]
public sealed virtual ISolution get_Solution();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Solution(ISolution value);
    public sealed virtual IDeclaredElement get_DeclaredElement();
    public sealed virtual string get_DeclaredName();
    public sealed virtual void SetName(string name);
    public sealed virtual TreeTextRange GetNameRange();
    public sealed virtual XmlNode GetXMLDoc(bool inherit);
}
public abstract class JetBrains.ReSharper.Psi.BuildScripts.MSBuild.DeclaredElements.MSBuildCommonDeclaredElement : object {
    protected string myShortName;
    protected ISolution mySolution;
    public string ShortName { get; }
    public bool CaseSensitiveName { get; }
    public string XMLDocId { get; }
    public PsiLanguageType PresentationLanguage { get; }
    public IPsiModule Module { get; }
    public ISubstitution IdSubstitution { get; }
    protected MSBuildCommonDeclaredElement(string name, ISolution solution);
    public virtual string get_ShortName();
    public virtual bool get_CaseSensitiveName();
    public string get_XMLDocId();
    public virtual PsiLanguageType get_PresentationLanguage();
    public IPsiModule get_Module();
    public ISubstitution get_IdSubstitution();
    public abstract virtual DeclaredElementType GetElementType();
    public virtual IList`1<IDeclaration> GetDeclarations();
    public virtual IList`1<IDeclaration> GetDeclarationsIn(IPsiSourceFile sourceFile);
    public virtual IPsiServices GetPsiServices();
    public ITypeElement GetContainingType();
    public ITypeMember GetContainingTypeMember();
    public virtual XmlNode GetXMLDoc(bool inherit);
    public virtual XmlNode GetXMLDescriptionSummary(bool inherit);
    public virtual bool IsValid();
    public virtual bool IsSynthetic();
    public virtual HybridCollection`1<IPsiSourceFile> GetSourceFiles();
    public virtual bool HasDeclarationsIn(IPsiSourceFile sourceFile);
}
internal class JetBrains.ReSharper.Psi.BuildScripts.MSBuild.DeclaredElements.MSBuildCommonItemGroupDeclaredElement : MSBuildCommonDeclaredElement {
    public MSBuildCommonItemGroupDeclaredElement(string name, ISolution solution);
    public virtual DeclaredElementType GetElementType();
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.BuildScripts.MSBuild.DeclaredElements.MSBuildCommonMetadataDeclaredElement : MSBuildCommonDeclaredElement {
    public MSBuildCommonMetadataDeclaredElement(string name, ISolution solution);
    public virtual DeclaredElementType GetElementType();
    public virtual string ToString();
}
public class JetBrains.ReSharper.Psi.BuildScripts.MSBuild.DeclaredElements.MSBuildCommonPropertyDeclaredElement : MSBuildCommonDeclaredElement {
    public MSBuildCommonPropertyDeclaredElement(string name, ISolution solution);
    public virtual DeclaredElementType GetElementType();
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.BuildScripts.MSBuild.DeclaredElements.MSBuildCommonTargetDeclaredElement : MSBuildCommonDeclaredElement {
    public MSBuildCommonTargetDeclaredElement(string name, ISolution solution);
    public virtual DeclaredElementType GetElementType();
    public virtual string ToString();
}
public class JetBrains.ReSharper.Psi.BuildScripts.MSBuild.DeclaredElements.MSBuildItemGroupDeclaredElement : BuildScriptDeclaredElementBase {
    public PsiLanguageType PresentationLanguage { get; }
    public MSBuildItemGroupDeclaredElement(string name, JetHashSet`1<BuildScriptNode> nodes, ISolution solution);
    public virtual DeclaredElementType GetElementType();
    public virtual PsiLanguageType get_PresentationLanguage();
}
public class JetBrains.ReSharper.Psi.BuildScripts.MSBuild.DeclaredElements.MSBuildMetadataDeclaredElement : BuildScriptDeclaredElementBase {
    public PsiLanguageType PresentationLanguage { get; }
    public MSBuildMetadataDeclaredElement(string name, JetHashSet`1<BuildScriptNode> nodes, ISolution solution);
    public virtual DeclaredElementType GetElementType();
    public virtual PsiLanguageType get_PresentationLanguage();
}
public class JetBrains.ReSharper.Psi.BuildScripts.MSBuild.DeclaredElements.MSBuildPropertyDeclaredElement : PropertyDeclaredElement {
    public PsiLanguageType PresentationLanguage { get; }
    public MSBuildPropertyDeclaredElement(string name, JetHashSet`1<BuildScriptNode> nodes, ISolution solution);
    public virtual PsiLanguageType get_PresentationLanguage();
    public virtual DeclaredElementType GetElementType();
}
public class JetBrains.ReSharper.Psi.BuildScripts.MSBuild.DeclaredElements.MSBuildTargetDeclaredElement : TargetDeclaredElement {
    public PsiLanguageType PresentationLanguage { get; }
    public MSBuildTargetDeclaredElement(string name, JetHashSet`1<BuildScriptNode> nodes, ISolution solution);
    public virtual PsiLanguageType get_PresentationLanguage();
    public virtual DeclaredElementType GetElementType();
}
public class JetBrains.ReSharper.Psi.BuildScripts.MSBuild.DeclaredElements.MSBuildTaskDeclaredElement : BuildScriptDeclaredElementBase {
    public PsiLanguageType PresentationLanguage { get; }
    public MSBuildTaskDeclaredElement(string name, JetHashSet`1<BuildScriptNode> nodes, ISolution solution);
    public virtual DeclaredElementType GetElementType();
    public virtual PsiLanguageType get_PresentationLanguage();
}
[ZoneDefinitionAttribute]
public interface JetBrains.ReSharper.Psi.BuildScripts.MSBuild.ILanguageMsBuildZone {
}
public class JetBrains.ReSharper.Psi.BuildScripts.MSBuild.InclusionEngine.MSBuildAbstractExecutor : IBuildScriptFileExecutorBase {
    public virtual CommonExecutionContext Execute(BuildScriptFileBase file, ISolution solution, IProject project, Dictionary`2<VirtualFileSystemPath, IFile> cachedPsiFiles, BuildScriptGraph buildScriptGraph);
    public static List`1<string> Evaluate(CompositeElement element, string text, TreeTextRange valueTokenRange, MSBuildExecutionContext context);
    private void Execute(IXmlTagContainer file, MSBuildExecutionContext context);
    private void ExecutionLoop(MSBuildTag tag, MSBuildExecutionContext context);
    private void ExecuteImport(IBuildScriptTag tag, MSBuildExecutionContext context);
    public static string MakeFullPath(IBuildFile file, string possiblePath);
    private static void ExecuteItemGroups(MSBuildItemGroupTag tag, MSBuildExecutionContext context);
    private static void ExecutePropertyDeclaration(MSBuildPropertyDeclaration declaration, MSBuildExecutionContext context);
    private static TreeTextRange GetRange(IEnumerable`1<IXmlToken> text);
}
public class JetBrains.ReSharper.Psi.BuildScripts.MSBuild.InclusionEngine.MSBuildExecutionContext : CommonExecutionContext {
    [CompilerGeneratedAttribute]
private MSBuildLanguageService <LanguageService>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultTargets>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, List`1<string>> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, List`1<string>> <ItemGroups>k__BackingField;
    public MSBuildLanguageService LanguageService { get; }
    public string ProjectName { get; }
    public string DefaultTargets { get; }
    public Dictionary`2<string, List`1<string>> Properties { get; }
    public Dictionary`2<string, List`1<string>> ItemGroups { get; }
    public MSBuildExecutionContext(MSBuildLanguageService languageService, ISolution solution, IProject project, VirtualFileSystemPath fileLocation, string projectName, string defaultTargets, Dictionary`2<VirtualFileSystemPath, IFile> cachedPsiFiles, BuildScriptGraph buildScriptGraph);
    [CompilerGeneratedAttribute]
public MSBuildLanguageService get_LanguageService();
    [CompilerGeneratedAttribute]
public string get_ProjectName();
    [CompilerGeneratedAttribute]
public string get_DefaultTargets();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, List`1<string>> get_Properties();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, List`1<string>> get_ItemGroups();
}
public class JetBrains.ReSharper.Psi.BuildScripts.MSBuild.InclusionEngine.MSBuildScriptFinder : object {
    public sealed virtual bool IsBuildScriptFile(IProjectFile projectFile);
}
public class JetBrains.ReSharper.Psi.BuildScripts.MSBuild.InclusionEngine.MSBuildValueEvaluator : object {
    public static List`1<string> GetAllPossibleValues(string text, TreeTextRange valueTokenRange, MSBuildExecutionContext context);
    private static bool CheckAllZero(IEnumerable`1<KeyValuePair`2<IEvaluationReference, int>> indexes);
    private static List`1<IEvaluationReference> GetReferences(string text, TreeTextRange valueTokenRange, MSBuildExecutionContext context);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Psi.BuildScripts.MSBuild.MSBuildCommonElementsProvider : object {
    private ISolution mySolution;
    private Dictionary`2<string, FileElementsBucket> myFiles;
    private HashSet`1<string> myWellKnownMetadata;
    public MSBuildCommonElementsProvider(ISolution solution);
    public IEnumerable`1<string> GetWellKnownMetadata();
    private void ReadDeclarations(string resourceName);
    public static MSBuildCommonElementsProvider GetInstance(ISolution solution);
    private void ReadDocument(XmlDocument doc);
    public sealed virtual IDeclaredElement GetCommonElement(string name, DeclaredElementType expectedType, IPsiSourceFile file);
    public IEnumerable`1<IDeclaredElement> GetItemGroupMetadata(string itemGroupName);
    private IDeclaredElement GetAnyCommonElement(string name, DeclaredElementType expectedType);
    private static IDeclaredElement GetElementOfExpectedType(string name, DeclaredElementType expectedType, FileElementsBucket fileElementBucket);
    public sealed virtual bool IsCommonElement(IDeclaredElement declaredElement);
    public sealed virtual IEnumerable`1<IDeclaredElement> GetAllCommonElements(IPsiSourceFile file);
    private IEnumerable`1<IDeclaredElement> GetAllCommonElementsInternal();
    private bool GetLastTwoLocationPathComponents(IProjectFile projectFile, StringSlice& a, StringSlice& b);
    public sealed virtual void Dispose();
}
public class JetBrains.ReSharper.Psi.BuildScripts.MSBuild.MSBuildDeclarationFinder : object {
    public sealed virtual List`1<IDeclaration> FindDeclarationsBefore(BuildScriptFileBase file, TreeTextRange range);
    public sealed virtual List`1<IDeclaration> FindAllDeclarations(BuildScriptFileBase file);
    private static void ProcessElement(IXmlTagContainer container, List`1<IDeclaration> declarations, TreeTextRange range);
}
public class JetBrains.ReSharper.Psi.BuildScripts.MSBuild.MSBuildDeclaredElementFinder : DeclaredElementFinder {
    public MSBuildDeclaredElementFinder(ISolution solution);
    public virtual void ProcessTag(BuildScriptTagBase tag, BuildScriptNode node);
    public virtual void ProcessAttribute(BuildScriptAttributeBase attribute, BuildScriptNode node);
    protected virtual IDeclaredElement CreatePropertyDeclaredElement(string name, ISolution solution);
    private void ProcessDeclaration(IBuildScriptDeclaration declaration, DeclaredElementFactory factory, BuildScriptNode node);
    private void ProcessDeclarationWithName(IBuildScriptDeclaration declaration, string name, DeclaredElementFactory factory, BuildScriptNode node);
    [CompilerGeneratedAttribute]
private BuildScriptDeclaredElementBase <ProcessAttribute>b__2_0(string name, ISolution solution);
    [CompilerGeneratedAttribute]
private BuildScriptDeclaredElementBase <ProcessAttribute>b__2_1(string name, ISolution solution);
    [CompilerGeneratedAttribute]
private BuildScriptDeclaredElementBase <ProcessAttribute>b__2_2(string name, ISolution solution);
    [CompilerGeneratedAttribute]
private BuildScriptDeclaredElementBase <ProcessAttribute>b__2_3(string name, ISolution solution);
}
public class JetBrains.ReSharper.Psi.BuildScripts.MSBuild.MSBuildDeclaredElementPresenter : BuildScriptDeclaredElementPresenter {
    protected virtual string GetElementTypeName(IDeclaredElement element);
}
public class JetBrains.ReSharper.Psi.BuildScripts.MSBuild.MSBuildDeclaredElementType : BuildScriptDeclaredElementType {
    private MSBuildDeclaredElementPresenter myPresenter;
    public static DeclaredElementType MSBUILD_PROPERTY;
    public static DeclaredElementType MSBUILD_TARGET;
    public static DeclaredElementType MSBUILD_TASK;
    public static DeclaredElementType MSBUILD_ITEM_GROUP;
    public static DeclaredElementType MSBUILD_METADATA;
    public static DeclaredElementType MSBUILD_COMMON_PROPERTY;
    public static DeclaredElementType MSBUILD_COMMON_TARGET;
    public static DeclaredElementType MSBUILD_COMMON_ITEM_GROUP;
    public static DeclaredElementType MSBUILD_COMMON_METADATA;
    protected IDeclaredElementPresenter DefaultPresenter { get; }
    public MSBuildDeclaredElementType(string presentableName, string name, IconId imageName);
    private static MSBuildDeclaredElementType();
    protected virtual IDeclaredElementPresenter get_DefaultPresenter();
    public virtual bool IsEqual(BuildScriptDeclaredElementType type);
}
[LanguageDefinitionAttribute("MSBUILD_BUILD_SCRIPT")]
public class JetBrains.ReSharper.Psi.BuildScripts.MSBuild.MSBuildLanguage : BuildScriptLanguage {
    public static string Name;
    [CompilerGeneratedAttribute]
private static MSBuildLanguage <Instance>k__BackingField;
    [CanBeNullAttribute]
[UsedImplicitlyAttribute]
public static MSBuildLanguage Instance { get; private set; }
    protected MSBuildLanguage(string name, string presentableName);
    [CompilerGeneratedAttribute]
public static MSBuildLanguage get_Instance();
    [CompilerGeneratedAttribute]
private static void set_Instance(MSBuildLanguage value);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.BuildScripts.MSBuild.MSBuildLanguage", "16")]
public class JetBrains.ReSharper.Psi.BuildScripts.MSBuild.MSBuildLanguageService : BuildScriptLanguageServiceBase {
    private Regex myRegistryPropertyRegex;
    private MSBuildValueEvaluator myValueEvaluator;
    [CompilerGeneratedAttribute]
private MSBuildPredefinedTags <PredefinedTags>k__BackingField;
    [CompilerGeneratedAttribute]
private MSBuildPredefinedProperties <PredefinedProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private MSBuildPredefinedMetadataItems <PredefinedMetadata>k__BackingField;
    public ITypePresenter TypePresenter { get; }
    public bool SupportTypeMemberCache { get; }
    public bool IsCaseSensitive { get; }
    public ILanguageCacheProvider CacheProvider { get; }
    public MSBuildPredefinedTags PredefinedTags { get; }
    public MSBuildPredefinedProperties PredefinedProperties { get; }
    public MSBuildPredefinedMetadataItems PredefinedMetadata { get; }
    public MSBuildLanguageService(MSBuildLanguage languageType, IConstantValueService constantValueService, XmlTokenTypes tokenTypes, IXmlElementFactory elementFactory, XmlCodeFormatter codeFormatter, CommonIdentifierIntern commonIdentifierIntern);
    public virtual bool IsValidName(DeclaredElementType elementType, string name);
    public virtual ITypePresenter get_TypePresenter();
    public virtual bool get_SupportTypeMemberCache();
    public virtual IParser CreateParser(ILexer lexer, IPsiModule module, IPsiSourceFile sourceFile);
    public virtual bool get_IsCaseSensitive();
    public virtual ILanguageCacheProvider get_CacheProvider();
    public virtual IDeclarationFinder GetDeclarationFinder();
    [CompilerGeneratedAttribute]
public MSBuildPredefinedTags get_PredefinedTags();
    [CompilerGeneratedAttribute]
public MSBuildPredefinedProperties get_PredefinedProperties();
    [CompilerGeneratedAttribute]
public MSBuildPredefinedMetadataItems get_PredefinedMetadata();
    public virtual string GetProjectAttributeName();
    public virtual string GetDefaultTargetAttributeName();
    public virtual IBuildScriptFileExecutorBase GetBuildScriptExecutor();
    public virtual ICommonElementProvider GetCommonElementProvider(ISolution solution);
    public virtual DeclaredElementFinder CreateDeclaredElementFinder(ISolution solution);
    public virtual ValueEvaluator GetValueEvaluator();
    public bool IsRegistryProperty(string propertyReference);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Psi.BuildScripts.MSBuild.MSBuildMetadataManager : object {
    private Action`2<IBuildScriptDeclaration, BuildScriptDeclaredElementBase> myDeclaredElementUpdatedHandler;
    private Action`1<IDeclaredElement> myDeclaredElementRemovedHandler;
    private OneToSetMap`2<IDeclaredElement, IDeclaredElement> myMetadataContainers;
    private ReferenceManager myReferenceManager;
    public MSBuildMetadataManager(ReferenceManager referenceManager);
    public static MSBuildMetadataManager GetInstance(ISolution solution);
    public sealed virtual void Dispose();
    public IEnumerable`1<IDeclaredElement> GetRelatedMetadata(MSBuildItemGroupDeclaredElement itemGroup);
    [CanBeNullAttribute]
public IDeclaredElement GetDeclaringItemGroup(IDeclaredElement metadataDeclaredElement);
    private void OnDeclaredElementRemovedHandler(IDeclaredElement element);
    private void OnDeclaredElementUpdatedHandler(IBuildScriptDeclaration declaration, BuildScriptDeclaredElementBase element);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Psi.BuildScripts.MSBuild.MSBuildNavigator : object {
    [ExtensionAttribute]
public static ICollection`1<MSBuildPropertyGroupTag> GetPropertyGroups(MSBuildFile file);
}
public class JetBrains.ReSharper.Psi.BuildScripts.MSBuild.MSBuildPredefinedMetadataItems : PredefinedItemsBase {
    private JetHashSet`1<string> myPredefinedItems;
    public virtual bool IsPredefined(string tagName);
    public virtual IList`1<string> GetPredefinedPropertyValue(string propertyName, VirtualFileSystemPath fileLocation, string projectName, string defaultTargets);
    public IEnumerable`1<string> GetAllPredefinedItems();
}
public class JetBrains.ReSharper.Psi.BuildScripts.MSBuild.MSBuildPredefinedProperties : PredefinedItemsBase {
    private HashSet`1<string> myProperties;
    public virtual bool IsPredefined(string propertyName);
    public IReadOnlyCollection`1<string> GetAllPredefinedProperties();
    public virtual IList`1<string> GetPredefinedPropertyValue(string propertyName, VirtualFileSystemPath fileLocation, string projectName, string defaultTargets);
    private static string GetDefaultTargets(BuildScriptFileBase file);
    private static string GetProjectName(BuildScriptFileBase file);
    private static BuildScriptTagBase GetProjectNode(BuildScriptFileBase file);
}
public class JetBrains.ReSharper.Psi.BuildScripts.MSBuild.MSBuildPredefinedTags : PredefinedItemsBase {
    private IList`1<string> myTags;
    public virtual bool IsPredefined(string tagName);
    public virtual IList`1<string> GetPredefinedPropertyValue(string propertyName, VirtualFileSystemPath fileLocation, string projectName, string defaultTargets);
}
[ProjectFileTypeAttribute("JetBrains.ProjectModel.MSBuildProjectFileType", "16")]
public class JetBrains.ReSharper.Psi.BuildScripts.MSBuild.MSBuildProjectFileLanguageService : XmlProjectFileLanguageService {
    public IconId Icon { get; }
    public MSBuildProjectFileLanguageService(MSBuildProjectFileType msbuildProjectFileType);
    public virtual IconId get_Icon();
    public virtual PsiLanguageType GetPsiLanguageType(ProjectFileType languageType);
    public virtual IPsiSourceFileProperties GetPsiProperties(IProjectFile projectFile, IPsiSourceFile sourceFile, IsCompileService isCompileService);
}
[MiscFilesProjectPsiModuleProviderAttribute("16")]
public class JetBrains.ReSharper.Psi.BuildScripts.MSBuild.MSBuildPsiModuleProvider : BuildScriptPsiModuleProvider {
    [CompilerGeneratedAttribute]
private BuildScriptModule <Module>k__BackingField;
    protected BuildScriptModule Module { get; }
    public MSBuildPsiModuleProvider(ISolution solution);
    [CompilerGeneratedAttribute]
protected virtual BuildScriptModule get_Module();
}
public class JetBrains.ReSharper.Psi.BuildScripts.MSBuild.MSBuildReferencesManager : ReferencesManagerBase {
    private JetHashSet`1<string> myIgnoredProperties;
    public bool IsPropertyIgnored(string name);
    public virtual void IgnoreProperty(string propertyName, BuildScriptFileBase file);
    private static void IgnorePropertyInternal(ExternalPropertiesElement node, string propertyName, IFile file);
    private static void IgnorePropertyWithExistingExternalPropertiesElement(ITreeNode externaPropertiesNode, string propertyName, IPsiServices psiServices);
}
public class JetBrains.ReSharper.Psi.BuildScripts.MSBuild.MSBuildValueEvaluator : ValueEvaluator {
    private MSBuildLanguageService myLanguageService;
    public MSBuildValueEvaluator(MSBuildLanguageService languageService);
    protected virtual bool IsPredefinedProperty(ScriptReferenceBase reference);
    protected virtual IList`1<string> GetPredefinedPropertyValues(ScriptReferenceBase reference, BuildScriptFileBase file);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.BuildScripts.MSBuild.MSBuildLanguage", "16")]
public class JetBrains.ReSharper.Psi.BuildScripts.MSBuild.MSBuildXmlLanguageSupport : XmlLanguageSupport {
    public virtual bool CanConvertAttributeToTag(IXmlAttribute attribute);
    public virtual bool CanConvertTagToAttribute(IXmlTag tag);
    public virtual bool IsFormattingAllowed(IPsiSourceFile sourceFile);
    public virtual XmlTreeBuilder CreateTreeBuilder(IXmlElementFactory factory, IXmlElementFactoryContext factoryContext, ITokenIntern intern, IXmlTreeBuilderContext treeBuilderContext);
}
internal class JetBrains.ReSharper.Psi.BuildScripts.MSBuild.Parsing.MSBuildAttributeFactory : object {
    private MSBuildNodeTypes myNodeTypes;
    public MSBuildAttributeFactory(MSBuildNodeTypes nodeTypes);
    public MSBuildAttribute CreateAttribute(IXmlIdentifier nameIdentifier, IXmlAttributeContainer attributeContainer, IXmlTagContainer parentTag);
}
public class JetBrains.ReSharper.Psi.BuildScripts.MSBuild.Parsing.MSBuildAttributeNodeType : BuildScriptNodeType {
    public MSBuildAttributeNodeType(MSBuildNodeTypes nodeTypes, int index);
    public virtual CompositeElement Create();
}
public class JetBrains.ReSharper.Psi.BuildScripts.MSBuild.Parsing.MSBuildCommentNodeType : BuildScriptNodeType {
    public MSBuildCommentNodeType(MSBuildNodeTypes nodeTypes, int index);
    public virtual CompositeElement Create();
}
public class JetBrains.ReSharper.Psi.BuildScripts.MSBuild.Parsing.MSBuildExternalPropertiesNodeType : BuildScriptNodeType {
    public MSBuildExternalPropertiesNodeType(MSBuildNodeTypes nodeTypes, int index);
    public virtual CompositeElement Create();
}
public class JetBrains.ReSharper.Psi.BuildScripts.MSBuild.Parsing.MSBuildExternalPropertyDeclarationNodeType : ExternalPropertyDeclarationNodeType {
    public MSBuildExternalPropertyDeclarationNodeType(MSBuildNodeTypes nodeTypes, int index);
    public virtual CompositeElement Create();
}
public class JetBrains.ReSharper.Psi.BuildScripts.MSBuild.Parsing.MSBuildFileNodeType : BuildScriptNodeType {
    public MSBuildFileNodeType(MSBuildNodeTypes nodeTypes, int index);
    public virtual CompositeElement Create();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.BuildScripts.MSBuild.MSBuildLanguage", "16")]
public class JetBrains.ReSharper.Psi.BuildScripts.MSBuild.Parsing.MSBuildNodeTypes : XmlElementTypes {
    private static int BASE_INDEX;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <MSBUILD_HEADER_NODE_TYPE>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <MSBUILD_TAG_FOOTER_NODE_TYPE>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <MSBUILD_TAG_NODE_TYPE>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <MSBUILD_ATTRIBUTE_NODE_TYPE>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <MSBUILD_EXTERNAL_PROPERTY_DECLARATION_NODE_TYPE>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <MSBUILD_COMMENT_NODE_TYPE>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <MSBUILD_EXTERNAL_PROPERTIES_NODE_TYPE>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <MSBUILD_FILE_NODE_TYPE>k__BackingField;
    public XmlCompositeNodeType MSBUILD_HEADER_NODE_TYPE { get; }
    public XmlCompositeNodeType MSBUILD_TAG_FOOTER_NODE_TYPE { get; }
    public XmlCompositeNodeType MSBUILD_TAG_NODE_TYPE { get; }
    public XmlCompositeNodeType MSBUILD_ATTRIBUTE_NODE_TYPE { get; }
    public XmlCompositeNodeType MSBUILD_EXTERNAL_PROPERTY_DECLARATION_NODE_TYPE { get; }
    public XmlCompositeNodeType MSBUILD_COMMENT_NODE_TYPE { get; }
    public XmlCompositeNodeType MSBUILD_EXTERNAL_PROPERTIES_NODE_TYPE { get; }
    public XmlCompositeNodeType MSBUILD_FILE_NODE_TYPE { get; }
    public MSBuildNodeTypes(XmlTokenTypes xmlTokenTypes);
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_MSBUILD_HEADER_NODE_TYPE();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_MSBUILD_TAG_FOOTER_NODE_TYPE();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_MSBUILD_TAG_NODE_TYPE();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_MSBUILD_ATTRIBUTE_NODE_TYPE();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_MSBUILD_EXTERNAL_PROPERTY_DECLARATION_NODE_TYPE();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_MSBUILD_COMMENT_NODE_TYPE();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_MSBUILD_EXTERNAL_PROPERTIES_NODE_TYPE();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_MSBUILD_FILE_NODE_TYPE();
}
internal class JetBrains.ReSharper.Psi.BuildScripts.MSBuild.Parsing.MSBuildParser : object {
    private IXmlElementFactory myXMLElementFactory;
    private CommonIdentifierIntern myCommonIdentifierIntern;
    private ILexer myLexer;
    public MSBuildParser(ILexer lexer, IXmlElementFactory xmlElementFactory, CommonIdentifierIntern commonIdentifierIntern);
    public sealed virtual IFile ParseFile();
    private static void UpdateReferences(IXmlTagContainer container, BuildScriptFileBase file);
    [CompilerGeneratedAttribute]
private IXmlFile <ParseFile>b__4_0(ITokenIntern intern);
}
internal class JetBrains.ReSharper.Psi.BuildScripts.MSBuild.Parsing.MSBuildTagFactory : object {
    private MSBuildNodeTypes myNodeTypes;
    public MSBuildTagFactory(MSBuildNodeTypes nodeTypes);
    public MSBuildTag CreateTag(IXmlTagHeader header, IXmlTagContainer parent);
}
public class JetBrains.ReSharper.Psi.BuildScripts.MSBuild.Parsing.MSBuildTagFooterNodeType : BuildScriptNodeType {
    public MSBuildTagFooterNodeType(MSBuildNodeTypes nodeTypes, int index);
    public virtual CompositeElement Create();
}
public class JetBrains.ReSharper.Psi.BuildScripts.MSBuild.Parsing.MSBuildTagHeaderNodeType : BuildScriptNodeType {
    public MSBuildTagHeaderNodeType(MSBuildNodeTypes nodeTypes, int index);
    public virtual CompositeElement Create();
}
public class JetBrains.ReSharper.Psi.BuildScripts.MSBuild.Parsing.MSBuildTagNodeType : BuildScriptNodeType {
    public MSBuildTagNodeType(MSBuildNodeTypes nodeTypes, int index);
    public virtual CompositeElement Create();
}
public class JetBrains.ReSharper.Psi.BuildScripts.MSBuild.Parsing.MSBuildTreeBuilder : XmlTreeBuilder {
    public MSBuildTreeBuilder(IXmlElementFactory xmlElementFactory, ITokenIntern intern);
    public MSBuildTreeBuilder(IXmlElementFactory xmlElementFactory, IXmlElementFactoryContext context, ITokenIntern intern);
    protected virtual void AppendNewChild(ITreeNode parent, IXmlComment comment);
    protected virtual void AppendNewChild(IXmlAttribute parent, IXmlAttributeValue child);
    private ExternalPropertiesElement MakeExternalPropertiesElement(IXmlToken child);
    private ExternalPropertiesElement MakeExternalPropertiesElement(IBuffer buffer, BuildScriptFileBase file);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.BuildScripts.MSBuild.MSBuildLanguage", "16")]
public class JetBrains.ReSharper.Psi.BuildScripts.MSBuild.Parsing.MsBuildTreeNodeFactory : XmlTreeNodeFactory {
    [NotNullAttribute]
private MSBuildNodeTypes myNodeTypes;
    [NotNullAttribute]
private MSBuildTagFactory myTagFactory;
    [NotNullAttribute]
private MSBuildAttributeFactory myAttributeFactory;
    public MsBuildTreeNodeFactory(MSBuildLanguage languageType, XmlTokenTypes tokenTypes, XmlElementTypes elementTypes, MSBuildNodeTypes nodeTypes);
    public virtual IXmlFile CreateFile();
    public virtual IXmlTag CreateRootTag(IXmlTagHeader header, IXmlElementFactoryContext context);
    public virtual IXmlTag CreateTag(IXmlTagHeader header, IXmlTag parentTag, IXmlElementFactoryContext context);
    public virtual IXmlAttribute CreateAttribute(IXmlIdentifier nameIdentifier, IXmlAttributeContainer attributeContainer, IXmlTagContainer parentTag, IXmlElementFactoryContext context);
    public virtual IXmlTagHeader CreateTagHeader(IXmlTagContainer parentTag, IXmlElementFactoryContext context);
    public virtual IXmlTagFooter CreateTagFooter(IXmlTagContainer parentTag, IXmlElementFactoryContext context);
    public virtual IXmlComment CreateComment();
}
public class JetBrains.ReSharper.Psi.BuildScripts.MSBuild.References.MSBuildItemGroupElementTagReference : TagReference {
    public MSBuildItemGroupElementTagReference(CompositeElement reference, TreeTextRange range, string referenceName, DeclaredElementType type);
    protected virtual void BindToInternal(BuildScriptTagBase tag, XmlTokenTypes types, string newName);
}
public class JetBrains.ReSharper.Psi.BuildScripts.MSBuild.References.MSBuildReferenceUtil : object {
    private static Regex ourPropertyUseRegex;
    private static Regex ourBasicItemGroupUseRegex;
    private static Regex ourUnfinishedItemGroupUseRegex;
    private static Regex ourUnfinishedPropertyUseRegex;
    private static Regex ourUnfinishedMetadataUseRegex;
    private static Regex ourBasicMetadataUseRegex;
    private static Regex ourComplexItemGroupUseRegex;
    private static Regex ourComplexMetadataUseRegex;
    private static Regex ourUnfinishedComplexMetadataUseRegex;
    private static Regex ourTransformationRegex;
    private static Regex ourRegistryPropertyRegex;
    private static MSBuildReferenceUtil();
    public static IEnumerable`1<T> GetReferences(XmlCompositeElement element, string text, TreeTextRange tokenRange, ReferenceConstructor`1<T> referenceConstructor);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Psi.BuildScripts.MSBuild.References.MSBuildReferenceUtil/<ProcessTextUsingRegularExpression>d__12`1")]
private static IEnumerable`1<T> ProcessTextUsingRegularExpression(XmlCompositeElement element, string text, TreeOffset valueOffset, Regex regex, String[] groupNames, DeclaredElementType[] elementTypes, ReferenceConstructor`1<T> referenceConstructor);
}
public class JetBrains.ReSharper.Psi.BuildScripts.MSBuild.References.MSBuildRegistryKeyReference : AttributeReference {
    public MSBuildRegistryKeyReference(CompositeElement reference, TreeTextRange range, TreeTextRange rangeInAttribute, string referenceName);
}
public class JetBrains.ReSharper.Psi.BuildScripts.MSBuild.References.MSBuildUsingTaskTagReference : TagReference {
    public MSBuildUsingTaskTagReference(CompositeElement reference, TreeTextRange range, string referenceName, DeclaredElementType type);
    protected virtual void BindToInternal(BuildScriptTagBase tag, XmlTokenTypes types, string newName);
}
public class JetBrains.ReSharper.Psi.BuildScripts.MSBuild.References.ReferenceConstructor`1 : MulticastDelegate {
    public ReferenceConstructor`1(object object, IntPtr method);
    public virtual T Invoke(XmlCompositeElement element, TreeTextRange range, TreeTextRange rangeInToken, string name, DeclaredElementType type);
    public virtual IAsyncResult BeginInvoke(XmlCompositeElement element, TreeTextRange range, TreeTextRange rangeInToken, string name, DeclaredElementType type, AsyncCallback callback, object object);
    public virtual T EndInvoke(IAsyncResult result);
}
[PsiSharedComponentAttribute]
public class JetBrains.ReSharper.Psi.BuildScripts.MSBuild.Searching.MSBuildScriptSearcherFactory : ScriptSearcherFactoryBase`1<MSBuildLanguage> {
    public MSBuildScriptSearcherFactory(SearchDomainFactory searchDomainFactory);
}
public class JetBrains.ReSharper.Psi.BuildScripts.MSBuild.Tasks.MSBuildAttribute : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRequired>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    public string Name { get; public set; }
    public bool IsRequired { get; public set; }
    public bool IsOutput { get; public set; }
    public string Type { get; public set; }
    public MSBuildAttribute(string name, bool isRequired, bool isOutput, string type);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public bool get_IsRequired();
    [CompilerGeneratedAttribute]
public void set_IsRequired(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsOutput();
    [CompilerGeneratedAttribute]
public void set_IsOutput(bool value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
}
public class JetBrains.ReSharper.Psi.BuildScripts.MSBuild.Tasks.MSBuildOutputAttribute : MSBuildAttribute {
    private OutputAttributeType myType;
    public OutputAttributeType Type { get; }
    public MSBuildOutputAttribute(string name, bool isRequired, bool isOutput, OutputAttributeType type);
    public OutputAttributeType get_Type();
}
public class JetBrains.ReSharper.Psi.BuildScripts.MSBuild.Tasks.MSBuildTask : object {
    private Dictionary`2<string, MSBuildAttribute> myAttributes;
    private string myName;
    private string myQualifiedName;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, MSBuildAttribute> <OutputAttributes>k__BackingField;
    public string Name { get; }
    public string QualifiedName { get; }
    public Dictionary`2<string, MSBuildAttribute> OutputAttributes { get; private set; }
    public MSBuildTask(string name);
    public MSBuildTask(string name, string qualifiedName);
    public void AddAttribute(MSBuildAttribute attribute);
    public string get_Name();
    public string get_QualifiedName();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, MSBuildAttribute> get_OutputAttributes();
    [CompilerGeneratedAttribute]
private void set_OutputAttributes(Dictionary`2<string, MSBuildAttribute> value);
    public void DumpToXml(XmlElement element, XmlDocument document);
    internal void SortAttributes();
    public IEnumerable`1<MSBuildAttribute> GetAllAttributes();
    public IEnumerable`1<MSBuildAttribute> GetOutputAttributes();
}
public class JetBrains.ReSharper.Psi.BuildScripts.MSBuild.Tasks.MSBuildTaskFactory : object {
    public static MSBuildTask CreateInlineTask(string taskName, MSBuildUsingTaskTag usingTag);
    public static MSBuildTask CreateTask(IMetadataTypeInfo type, string name);
    public static MSBuildTask CreateTask(IMetadataTypeInfo type, string qualifiedName, string name);
    private static void FillTask(IMetadataTypeInfo type, MSBuildTask task);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Psi.BuildScripts.MSBuild.Tasks.MSBuildTaskManager : object {
    private Dictionary`2<VirtualFileSystemPath, Dictionary`2<string, MSBuildTask>> myTaskMap;
    private OneToSetMap`2<string, MSBuildTask> myCache;
    private Regex myCommonTaskAssemblyFileNameExpression;
    private ISolution mySolution;
    private Dictionary`2<string, MSBuildTask> myCommonMSBuildTasks;
    public Dictionary`2<string, MSBuildTask> CommonMSBuildTasks { get; }
    public MSBuildTaskManager(ISolution solution);
    private static bool IsTask(IMetadataTypeInfo type);
    public void ProcessUsingTaskTag(MSBuildUsingTaskTag tag);
    public void ProcessUsingTaskTag(MSBuildUsingTaskTag tag, MSBuildExecutionContext context);
    private void ProcessInlineUsingTask(string taskName, MSBuildUsingTaskTag tag);
    private void ProcessUsingTaskWithAssemblyFile(VirtualFileSystemPath fileId, string assemblyFile, string taskName);
    private static IReadOnlyCollection`1<VirtualFileSystemPath> GetPlatformFolders();
    private void ProcessUsingTaskWithAssemblyName(VirtualFileSystemPath fileId, string assemblyName, string taskName);
    private void ProcessAssembly(string assemblyId, AssemblyGetter assemblyGetter, LoaderGetter loaderGetter);
    private void ProcessAssemblyMetadata(string assemblyId, IMetadataAssembly assembly);
    private void ProcessTypeMetadata(string assemblyID, IMetadataTypeInfo typeInfo);
    private bool BeforeAssemblyLoad(VirtualFileSystemPath fileId);
    public static MSBuildTaskManager GetInstance(ISolution solution);
    public bool IsResolved(IFile file, string taskName);
    [CanBeNullAttribute]
public MSBuildTask GetTask(IFile file, string taskName);
    public IEnumerable`1<MSBuildTask> GetAllTasks(IFile file);
    public Dictionary`2<string, MSBuildTask> GetCustomTasks(IFile file);
    public Dictionary`2<string, MSBuildTask> get_CommonMSBuildTasks();
    private void DemandMSBuildTaskLoad();
    public void ScanKnownAssembly(VirtualFileSystemPath path);
    public bool MSBuildIsResolved(string taskName);
    public MSBuildTask MSBuildGetTask(string taskName);
    [CompilerGeneratedAttribute]
private IEnumerable`1<VirtualFileSystemPath> <DemandMSBuildTaskLoad>b__27_0(VirtualFileSystemPath path);
    [CompilerGeneratedAttribute]
private bool <DemandMSBuildTaskLoad>b__27_1(VirtualFileSystemPath filePath);
}
public enum JetBrains.ReSharper.Psi.BuildScripts.MSBuild.Tasks.OutputAttributeType : Enum {
    public int value__;
    public static OutputAttributeType Property;
    public static OutputAttributeType Item;
}
public interface JetBrains.ReSharper.Psi.BuildScripts.MSBuild.Tree.IMSBuildItemGroupElement {
    [CanBeNullAttribute]
public string ItemGroupName { get; }
    public abstract virtual string get_ItemGroupName();
}
public class JetBrains.ReSharper.Psi.BuildScripts.MSBuild.Tree.MSBuildAttribute : BuildScriptAttributeBase {
    public MSBuildAttribute(XmlCompositeNodeType nodeType);
    protected virtual ReferenceCollection GetAttributeReferences();
    private bool IsCallTargetTask();
    private bool IsProjectInitialTargetsAttribute();
    private bool IsProjectDefaultTargetsAttribute();
    private bool IsTargetDependsOnAttribute();
    private ReferenceCollection GetDependentTargets(MSBuildAttribute attribute, IXmlAttributeValue value);
}
public class JetBrains.ReSharper.Psi.BuildScripts.MSBuild.Tree.MSBuildComment : XmlComment {
    public MSBuildComment(XmlCompositeNodeType nodeType);
}
public class JetBrains.ReSharper.Psi.BuildScripts.MSBuild.Tree.MSBuildExternalPropertiesElement : ExternalPropertiesElement {
    public MSBuildExternalPropertiesElement(XmlCompositeNodeType nodeType);
    public virtual XmlTokenNodeType GetTokenType();
}
public class JetBrains.ReSharper.Psi.BuildScripts.MSBuild.Tree.MSBuildFile : BuildScriptFileBase {
    private MSBuildReferencesManager myReferencesManagerAlias;
    private static short MSBUILD_PROJECT_ROLE;
    public MSBuildReferencesManager ReferencesManagerAlias { get; }
    public MSBuildFile(BuildScriptNodeType nodeType);
    public MSBuildReferencesManager get_ReferencesManagerAlias();
    public virtual short GetChildRole(TreeElement child);
    public virtual JetHashSet`1<IDeclaredElement> FindGlobalDeclarations();
    private void ProcessItemDefinitionGroup(IXmlTagContainer itemDefinitionGroup, JetHashSet`1<IDeclaredElement> elements);
    private void ProcessItemGroupTag(IXmlTag tag, JetHashSet`1<IDeclaredElement> declaredElements);
    public virtual ISymbolTable AddDeclarationsBeforeElement(ISymbolTable parentTable, ITreeNode element, int level, SymbolTableMode mode);
    protected virtual List`1<IDeclaredElement> FindCommonDeclarations();
    protected virtual OneToSetMap`2<string, IDeclaredElement> FilterElements(JetHashSet`1<IDeclaredElement> elements);
    private IEnumerable`1<IDeclaredElement> ProcessAttributeBasedDeclaration(IBuildScriptDeclaration declaration);
    private IEnumerable`1<IDeclaredElement> ProcessTagBasedDeclaration(IBuildScriptDeclaration declaration);
    private IEnumerable`1<IDeclaredElement> FindExternalProperties(ITreeNode tag);
    private void ProcessExternalPropertiesElement(ExternalPropertiesElement element, ICollection`1<IDeclaredElement> candidates);
    private void ProcessExternalPropertyDeclaration(IBuildScriptDeclaration declaration, ICollection`1<IDeclaredElement> candidates);
}
public class JetBrains.ReSharper.Psi.BuildScripts.MSBuild.Tree.MSBuildImportTag : MSBuildTag {
    [CompilerGeneratedAttribute]
private List`1<string> <ImportedFileIds>k__BackingField;
    public List`1<string> ImportedFileIds { get; public set; }
    public IBuildScriptAttribute ImportAttribute { get; }
    public bool IsImportsTag { get; }
    [CanBeNullAttribute]
public MSBuildAttribute Project { get; }
    public MSBuildImportTag(XmlCompositeNodeType nodeType);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<string> get_ImportedFileIds();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ImportedFileIds(List`1<string> value);
    public virtual IBuildScriptAttribute get_ImportAttribute();
    public virtual bool get_IsImportsTag();
    public MSBuildAttribute get_Project();
}
public class JetBrains.ReSharper.Psi.BuildScripts.MSBuild.Tree.MSBuildItemDefinitionGroup : MSBuildTag {
    public MSBuildItemDefinitionGroup(XmlCompositeNodeType nodeType);
}
public class JetBrains.ReSharper.Psi.BuildScripts.MSBuild.Tree.MSBuildItemDefinitionGroupElement : MSBuildTag {
    public string ItemGroupName { get; }
    public MSBuildItemDefinitionGroupElement(XmlCompositeNodeType nodeType);
    public string get_ItemGroupName();
}
public class JetBrains.ReSharper.Psi.BuildScripts.MSBuild.Tree.MSBuildItemGroupElementTag : MSBuildTag {
    public string ItemGroupName { get; }
    public MSBuildItemGroupElementTag(XmlCompositeNodeType nodeType);
    public sealed virtual string get_ItemGroupName();
}
public class JetBrains.ReSharper.Psi.BuildScripts.MSBuild.Tree.MSBuildItemGroupTag : MSBuildTag {
    public MSBuildItemGroupTag(XmlCompositeNodeType nodeType);
    public IList`1<MSBuildItemGroupDeclaration> GetItemGroupDeclarations();
}
public class JetBrains.ReSharper.Psi.BuildScripts.MSBuild.Tree.MSBuildMetadataTag : MSBuildTag {
    public MSBuildMetadataTag(XmlCompositeNodeType nodeType);
}
public class JetBrains.ReSharper.Psi.BuildScripts.MSBuild.Tree.MSBuildOutputTag : MSBuildTag {
    public bool HasItemGroupDeclaration { get; }
    public bool HasPropertyDeclaration { get; }
    public MSBuildOutputTag(XmlCompositeNodeType nodeType);
    public bool get_HasItemGroupDeclaration();
    public bool get_HasPropertyDeclaration();
}
public class JetBrains.ReSharper.Psi.BuildScripts.MSBuild.Tree.MSBuildProjectTag : MSBuildTag {
    public IDeclaredElement DeclaredElement { get; }
    public string DeclaredName { get; }
    public MSBuildProjectTag(XmlCompositeNodeType nodeType);
    public sealed virtual IDeclaredElement get_DeclaredElement();
    public sealed virtual string get_DeclaredName();
    public sealed virtual void SetName(string name);
    public sealed virtual TreeTextRange GetNameRange();
    public sealed virtual XmlNode GetXMLDoc(bool inherit);
    public sealed virtual bool IsSynthetic();
}
public class JetBrains.ReSharper.Psi.BuildScripts.MSBuild.Tree.MSBuildPropertyGroupTag : MSBuildTag {
    public MSBuildPropertyGroupTag(XmlCompositeNodeType nodeType);
}
public class JetBrains.ReSharper.Psi.BuildScripts.MSBuild.Tree.MSBuildTag : BuildScriptTagBase {
    protected MSBuildLanguageService LanguageService { get; }
    public MSBuildTag(XmlCompositeNodeType nodeType);
    public virtual short GetChildRole(TreeElement child);
    protected MSBuildLanguageService get_LanguageService();
    protected virtual ReferenceCollection CreateFirstClassReferences();
}
internal class JetBrains.ReSharper.Psi.BuildScripts.MSBuild.Tree.MSBuildTagFooter : XmlTagFooterNode {
    public MSBuildTagFooter(XmlCompositeNodeType nodeType);
}
internal class JetBrains.ReSharper.Psi.BuildScripts.MSBuild.Tree.MSBuildTagHeader : XmlTagHeaderNode {
    public MSBuildTagHeader(XmlCompositeNodeType nodeType);
}
public class JetBrains.ReSharper.Psi.BuildScripts.MSBuild.Tree.MSBuildTargetTag : MSBuildTag {
    public string TargetName { get; }
    public IBuildScriptDeclaration TargetDeclaration { get; }
    public MSBuildTargetTag(XmlCompositeNodeType nodeType);
    public sealed virtual string get_TargetName();
    public sealed virtual IBuildScriptDeclaration get_TargetDeclaration();
}
public class JetBrains.ReSharper.Psi.BuildScripts.MSBuild.Tree.MSBuildTaskTag : MSBuildTag {
    public string TaskName { get; }
    public MSBuildTaskTag(XmlCompositeNodeType nodeType);
    protected virtual ReferenceCollection CreateFirstClassReferences();
    public string get_TaskName();
}
public class JetBrains.ReSharper.Psi.BuildScripts.MSBuild.Tree.MSBuildUsingTaskTag : MSBuildTag {
    public string TaskName { get; }
    [CanBeNullAttribute]
public string AssemblyName { get; }
    [CanBeNullAttribute]
public string TaskFactory { get; }
    public MSBuildUsingTaskTag(XmlCompositeNodeType nodeType);
    public string get_TaskName();
    public bool IsSynthetic();
    public string get_AssemblyName();
    public string get_TaskFactory();
    [CanBeNullAttribute]
public string GetAssemblyFile(BuildScriptFileBase file, MSBuildExecutionContext context);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Psi.BuildScripts.MSBuild.ZoneMarker : object {
}
public abstract class JetBrains.ReSharper.Psi.BuildScripts.NAnt.Declarations.NAntAttributeBasedDeclaration : NAntAttribute {
    private IDeclaredElement myDeclaredElement;
    private string myDeclaredName;
    [CompilerGeneratedAttribute]
private ISolution <Solution>k__BackingField;
    public bool IsDeclarationValid { get; }
    public ISolution Solution { get; public set; }
    public IDeclaredElement DeclaredElement { get; }
    public string DeclaredName { get; }
    protected NAntAttributeBasedDeclaration(XmlCompositeNodeType nodeType);
    public void SetDeclaredName(string name);
    public sealed virtual bool IsSynthetic();
    public sealed virtual bool get_IsDeclarationValid();
    public sealed virtual void SetDeclaredElement(IDeclaredElement declaredElement);
    public abstract virtual BuildScriptDeclaredElementBase CreateDeclaredElement(JetHashSet`1<BuildScriptNode> nodes, ISolution solution);
    public abstract virtual DeclaredElementType GetElementType();
    [CompilerGeneratedAttribute]
public sealed virtual ISolution get_Solution();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Solution(ISolution value);
    public abstract virtual void InitReference(BuildScriptFileBase file);
    public sealed virtual IDeclaredElement get_DeclaredElement();
    public sealed virtual string get_DeclaredName();
    public sealed virtual void SetName(string name);
    public sealed virtual TreeTextRange GetNameRange();
    public sealed virtual XmlNode GetXMLDoc(bool inherit);
}
public class JetBrains.ReSharper.Psi.BuildScripts.NAnt.Declarations.NAntExternalPropertyDeclaration : ExternalPropertyDeclaration {
    public NAntExternalPropertyDeclaration(string name, XmlCompositeNodeType nodeType);
    public virtual BuildScriptDeclaredElementBase CreateDeclaredElement(JetHashSet`1<BuildScriptNode> nodes, ISolution solution);
    public virtual DeclaredElementType GetElementType();
}
public class JetBrains.ReSharper.Psi.BuildScripts.NAnt.Declarations.NAntPropertyDeclaration : NAntAttributeBasedDeclaration {
    public string PropertyName { get; }
    public NAntPropertyDeclaration(XmlCompositeNodeType nodeType);
    public sealed virtual IList`1<string> GetValues();
    public sealed virtual string get_PropertyName();
    public virtual BuildScriptDeclaredElementBase CreateDeclaredElement(JetHashSet`1<BuildScriptNode> nodes, ISolution solution);
    public virtual DeclaredElementType GetElementType();
    public virtual void InitReference(BuildScriptFileBase file);
}
public class JetBrains.ReSharper.Psi.BuildScripts.NAnt.Declarations.NAntTargetDeclaration : NAntAttributeBasedDeclaration {
    [CanBeNullAttribute]
public string TargetName { get; }
    public NAntTargetDeclaration(XmlCompositeNodeType nodeType);
    public virtual BuildScriptDeclaredElementBase CreateDeclaredElement(JetHashSet`1<BuildScriptNode> nodes, ISolution solution);
    public virtual DeclaredElementType GetElementType();
    public virtual void InitReference(BuildScriptFileBase file);
    public string get_TargetName();
}
public class JetBrains.ReSharper.Psi.BuildScripts.NAnt.Declarations.RegexPatternPropertyDeclaration : CompositeElement {
    private XmlCompositeNodeType myNodeType;
    [CompilerGeneratedAttribute]
private ISolution <Solution>k__BackingField;
    private IDeclaredElement myDeclaredElement;
    [CompilerGeneratedAttribute]
private string <DeclaredName>k__BackingField;
    public PsiLanguageType Language { get; }
    public bool IsDeclarationValid { get; }
    public ISolution Solution { get; public set; }
    public IDeclaredElement DeclaredElement { get; private set; }
    public string DeclaredName { get; private set; }
    public string PropertyName { get; }
    public NodeType NodeType { get; }
    public RegexPatternPropertyDeclaration(XmlCompositeNodeType nodeType);
    public RegexPatternPropertyDeclaration(string propertyName, XmlCompositeNodeType nodeType);
    public virtual PsiLanguageType get_Language();
    public sealed virtual void SetDeclaredElement(IDeclaredElement declaredElement);
    public sealed virtual BuildScriptDeclaredElementBase CreateDeclaredElement(JetHashSet`1<BuildScriptNode> nodes, ISolution solution);
    public sealed virtual DeclaredElementType GetElementType();
    public sealed virtual bool IsSynthetic();
    public sealed virtual bool get_IsDeclarationValid();
    public sealed virtual void InitReference(BuildScriptFileBase file);
    [CompilerGeneratedAttribute]
public sealed virtual ISolution get_Solution();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Solution(ISolution value);
    public sealed virtual IDeclaredElement get_DeclaredElement();
    private void set_DeclaredElement(IDeclaredElement value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_DeclaredName();
    [CompilerGeneratedAttribute]
private void set_DeclaredName(string value);
    public string get_PropertyName();
    public sealed virtual void SetName(string name);
    public sealed virtual TreeTextRange GetNameRange();
    public sealed virtual XmlNode GetXMLDoc(bool inherit);
    public virtual NodeType get_NodeType();
}
public class JetBrains.ReSharper.Psi.BuildScripts.NAnt.DeclaredElements.NAntPropertyDeclaredElement : PropertyDeclaredElement {
    public PsiLanguageType PresentationLanguage { get; }
    public NAntPropertyDeclaredElement(string name, JetHashSet`1<BuildScriptNode> nodes, ISolution solution);
    public virtual PsiLanguageType get_PresentationLanguage();
    public virtual DeclaredElementType GetElementType();
}
public class JetBrains.ReSharper.Psi.BuildScripts.NAnt.DeclaredElements.NAntTargetDeclaredElement : TargetDeclaredElement {
    public PsiLanguageType PresentationLanguage { get; }
    public NAntTargetDeclaredElement(string name, JetHashSet`1<BuildScriptNode> nodes, ISolution solution);
    public virtual PsiLanguageType get_PresentationLanguage();
    public virtual DeclaredElementType GetElementType();
}
[ZoneDefinitionAttribute]
public interface JetBrains.ReSharper.Psi.BuildScripts.NAnt.ILanguageNAntZone {
}
public class JetBrains.ReSharper.Psi.BuildScripts.NAnt.InclusionEngine.NAntAbstractExecutor : IBuildScriptFileExecutorBase {
    public virtual CommonExecutionContext Execute(BuildScriptFileBase file, ISolution solution, IProject project, Dictionary`2<VirtualFileSystemPath, IFile> cachedPsiFiles, BuildScriptGraph buildScriptGraph);
    private static void Execute(IXmlTagContainer container, NAntExecutionContext context);
    private static void ExecutionLoop(IXmlTagContainer tag, NAntExecutionContext context);
    private static void ExecuteLoadTasksTag(NAntLoadTasksTag tag, CommonExecutionContext context);
    private static void ExecuteInclude(IBuildScriptTag tag, NAntExecutionContext context);
    private static string MakeFullPath(IBuildFile file, string possiblePath);
    private static void ExecuteProperty(NAntPropertyTag tag, NAntExecutionContext context);
    public static IEnumerable`1<string> Evaluate(string text, XmlAttribute attribute, TreeTextRange valueTokenRange, NAntExecutionContext context);
}
public class JetBrains.ReSharper.Psi.BuildScripts.NAnt.InclusionEngine.NAntExecutionContext : CommonExecutionContext {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, List`1<string>> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private NAntLanguageService <LanguageService>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultTarget>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectName>k__BackingField;
    public Dictionary`2<string, List`1<string>> Properties { get; }
    public NAntLanguageService LanguageService { get; }
    public string DefaultTarget { get; }
    public string ProjectName { get; }
    public NAntExecutionContext(NAntLanguageService languageService, ISolution solution, IProject project, VirtualFileSystemPath fileLocation, string projectName, string defaultTarget, Dictionary`2<VirtualFileSystemPath, IFile> cachedPsiFiles, BuildScriptGraph buildScriptGraph);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, List`1<string>> get_Properties();
    [CompilerGeneratedAttribute]
public NAntLanguageService get_LanguageService();
    [CompilerGeneratedAttribute]
public string get_DefaultTarget();
    [CompilerGeneratedAttribute]
public string get_ProjectName();
}
public class JetBrains.ReSharper.Psi.BuildScripts.NAnt.InclusionEngine.NAntInclusionEngineValueEvaluator : object {
    public static List`1<string> GetAllPossibleValues(string text, XmlAttribute attribute, TreeTextRange valueTokenRange, NAntExecutionContext context);
    private static bool CheckAllZero(IEnumerable`1<KeyValuePair`2<IEvaluationReference, int>> indexes);
    private static List`1<IEvaluationReference> GetReferences(string text, XmlAttribute attribute, TreeTextRange valueTokenRange);
}
public class JetBrains.ReSharper.Psi.BuildScripts.NAnt.NAntAttributeNodeType : BuildScriptNodeType {
    public NAntAttributeNodeType(NAntNodeTypes nodeTypes, int index);
    public virtual CompositeElement Create();
}
public class JetBrains.ReSharper.Psi.BuildScripts.NAnt.NAntCommentNodeType : BuildScriptNodeType {
    public NAntCommentNodeType(NAntNodeTypes nodeTypes, int index);
    public virtual CompositeElement Create();
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Psi.BuildScripts.NAnt.NAntCommonElementProvider : object {
    public static NAntCommonElementProvider GetInstance(ISolution solution);
    public sealed virtual IDeclaredElement GetCommonElement(string name, DeclaredElementType expectedType, IPsiSourceFile file);
    public sealed virtual bool IsCommonElement(IDeclaredElement declaredElement);
    public sealed virtual IEnumerable`1<IDeclaredElement> GetAllCommonElements(IPsiSourceFile file);
}
public class JetBrains.ReSharper.Psi.BuildScripts.NAnt.NAntDeclarationFinder : object {
    public sealed virtual List`1<IDeclaration> FindDeclarationsBefore(BuildScriptFileBase file, TreeTextRange range);
    public sealed virtual List`1<IDeclaration> FindAllDeclarations(BuildScriptFileBase file);
}
public class JetBrains.ReSharper.Psi.BuildScripts.NAnt.NAntDeclaredElementFinder : DeclaredElementFinder {
    public NAntDeclaredElementFinder(ISolution solution);
    public virtual void ProcessTag(BuildScriptTagBase tag, BuildScriptNode node);
    public virtual void ProcessAttribute(BuildScriptAttributeBase attribute, BuildScriptNode node);
    protected virtual IDeclaredElement CreatePropertyDeclaredElement(string name, ISolution solution);
    private void ProcessRegexPatternElement(RegexPatternElement element);
    private void ProcessTargetDeclaration(NAntTargetDeclaration declaration);
    private void ProcessPropertyDeclaration(NAntPropertyDeclaration declaration);
}
public class JetBrains.ReSharper.Psi.BuildScripts.NAnt.NAntDeclaredElementPresenter : BuildScriptDeclaredElementPresenter {
    protected virtual string GetElementTypeName(IDeclaredElement element);
}
public class JetBrains.ReSharper.Psi.BuildScripts.NAnt.NAntDeclaredElementType : BuildScriptDeclaredElementType {
    private NAntDeclaredElementPresenter myPresenter;
    public static DeclaredElementType NANT_PROPERTY;
    public static DeclaredElementType NANT_TARGET;
    public static DeclaredElementType NANT_PROJECT;
    protected IDeclaredElementPresenter DefaultPresenter { get; }
    public NAntDeclaredElementType(string presentableName, string name, IconId imageName);
    private static NAntDeclaredElementType();
    protected virtual IDeclaredElementPresenter get_DefaultPresenter();
}
public class JetBrains.ReSharper.Psi.BuildScripts.NAnt.NAntExternalPropertiesNodeType : BuildScriptNodeType {
    public NAntExternalPropertiesNodeType(NAntNodeTypes nodeTypes, int index);
    public virtual CompositeElement Create();
}
public class JetBrains.ReSharper.Psi.BuildScripts.NAnt.NAntExternalPropertyDeclarationNodeType : ExternalPropertyDeclarationNodeType {
    public NAntExternalPropertyDeclarationNodeType(NAntNodeTypes nodeTypes, int index);
    public virtual CompositeElement Create();
}
public class JetBrains.ReSharper.Psi.BuildScripts.NAnt.NAntFileNodeType : BuildScriptNodeType {
    public NAntFileNodeType(NAntNodeTypes nodeTypes, int index);
    public virtual CompositeElement Create();
}
[LanguageDefinitionAttribute("NANT_BUILD_SCRIPT")]
public class JetBrains.ReSharper.Psi.BuildScripts.NAnt.NAntLanguage : BuildScriptLanguage {
    public static string Name;
    [CompilerGeneratedAttribute]
private static NAntLanguage <Instance>k__BackingField;
    [CanBeNullAttribute]
[UsedImplicitlyAttribute]
public static NAntLanguage Instance { get; private set; }
    protected NAntLanguage(string name, string presentableName);
    [CompilerGeneratedAttribute]
public static NAntLanguage get_Instance();
    [CompilerGeneratedAttribute]
private static void set_Instance(NAntLanguage value);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.BuildScripts.NAnt.NAntLanguage", "16")]
public class JetBrains.ReSharper.Psi.BuildScripts.NAnt.NAntLanguageService : BuildScriptLanguageServiceBase {
    private NAntValueEvaluator myValueEvaluator;
    [CompilerGeneratedAttribute]
private NAntPredefinedTags <PredefinedTags>k__BackingField;
    [CompilerGeneratedAttribute]
private NAntPredefinedProperties <PredefinedProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private NAntPredefinedFunctions <PredefinedFunctions>k__BackingField;
    public bool IsCaseSensitive { get; }
    public ILanguageCacheProvider CacheProvider { get; }
    public bool SupportTypeMemberCache { get; }
    public NAntPredefinedTags PredefinedTags { get; }
    public NAntPredefinedProperties PredefinedProperties { get; }
    public NAntPredefinedFunctions PredefinedFunctions { get; }
    public ITypePresenter TypePresenter { get; }
    public NAntLanguageService(NAntLanguage languageType, IConstantValueService constantValueService, XmlTokenTypes tokenTypes, IXmlElementFactory elementFactory, XmlCodeFormatter codeFormatter, CommonIdentifierIntern commonIdentifierIntern);
    public virtual bool IsValidName(DeclaredElementType elementType, string name);
    public virtual IParser CreateParser(ILexer lexer, IPsiModule module, IPsiSourceFile sourceFile);
    public virtual bool get_IsCaseSensitive();
    public virtual ILanguageCacheProvider get_CacheProvider();
    public virtual bool get_SupportTypeMemberCache();
    [CompilerGeneratedAttribute]
public NAntPredefinedTags get_PredefinedTags();
    [CompilerGeneratedAttribute]
public NAntPredefinedProperties get_PredefinedProperties();
    [CompilerGeneratedAttribute]
public NAntPredefinedFunctions get_PredefinedFunctions();
    public virtual ITypePresenter get_TypePresenter();
    public virtual IDeclarationFinder GetDeclarationFinder();
    public virtual string GetProjectAttributeName();
    public virtual string GetDefaultTargetAttributeName();
    public virtual IBuildScriptFileExecutorBase GetBuildScriptExecutor();
    public virtual ICommonElementProvider GetCommonElementProvider(ISolution solution);
    public virtual DeclaredElementFinder CreateDeclaredElementFinder(ISolution solution);
    public virtual ValueEvaluator GetValueEvaluator();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.BuildScripts.NAnt.NAntLanguage", "16")]
public class JetBrains.ReSharper.Psi.BuildScripts.NAnt.NAntNodeTypes : XmlElementTypes {
    private static int BASE_INDEX;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <NANT_EXTERNAL_PROPERTY_DECLARATION_NODE_TYPE>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <NANT_EXTERNAL_PROPERTIES_NODE_TYPE>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <NANT_REGEX_PATTERN_PROPERTY_NODE_TYPE>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <NANT_ATTRIBUTE_NODE_TYPE>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <NANT_COMMENT_NODE_TYPE>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <NANT_FILE_NODE_TYPE>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <NANT_TAG_NODE_TYPE>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <NANT_TAG_FOOTER_NODE_TYPE>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <NANT_TAG_HEADER_NODE_TYPE>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <NANT_REGEX_PATTERN_NODE_TYPE>k__BackingField;
    public XmlCompositeNodeType NANT_EXTERNAL_PROPERTY_DECLARATION_NODE_TYPE { get; }
    public XmlCompositeNodeType NANT_EXTERNAL_PROPERTIES_NODE_TYPE { get; }
    public XmlCompositeNodeType NANT_REGEX_PATTERN_PROPERTY_NODE_TYPE { get; }
    public XmlCompositeNodeType NANT_ATTRIBUTE_NODE_TYPE { get; }
    public XmlCompositeNodeType NANT_COMMENT_NODE_TYPE { get; }
    public XmlCompositeNodeType NANT_FILE_NODE_TYPE { get; }
    public XmlCompositeNodeType NANT_TAG_NODE_TYPE { get; }
    public XmlCompositeNodeType NANT_TAG_FOOTER_NODE_TYPE { get; }
    public XmlCompositeNodeType NANT_TAG_HEADER_NODE_TYPE { get; }
    public XmlCompositeNodeType NANT_REGEX_PATTERN_NODE_TYPE { get; }
    public NAntNodeTypes(XmlTokenTypes xmlTokenTypes);
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_NANT_EXTERNAL_PROPERTY_DECLARATION_NODE_TYPE();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_NANT_EXTERNAL_PROPERTIES_NODE_TYPE();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_NANT_REGEX_PATTERN_PROPERTY_NODE_TYPE();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_NANT_ATTRIBUTE_NODE_TYPE();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_NANT_COMMENT_NODE_TYPE();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_NANT_FILE_NODE_TYPE();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_NANT_TAG_NODE_TYPE();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_NANT_TAG_FOOTER_NODE_TYPE();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_NANT_TAG_HEADER_NODE_TYPE();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_NANT_REGEX_PATTERN_NODE_TYPE();
}
public class JetBrains.ReSharper.Psi.BuildScripts.NAnt.NAntPredefinedProperties : PredefinedItemsBase {
    private IList`1<string> myProperties;
    public virtual bool IsPredefined(string propertyName);
    public IList`1<string> GetAll();
    public virtual IList`1<string> GetPredefinedPropertyValue(string propertyName, VirtualFileSystemPath fileLocation, string projectName, string defaultTargets);
}
public class JetBrains.ReSharper.Psi.BuildScripts.NAnt.NAntPredefinedTags : PredefinedItemsBase {
    private IList`1<string> myTags;
    public virtual bool IsPredefined(string tagName);
    public virtual IList`1<string> GetPredefinedPropertyValue(string propertyName, VirtualFileSystemPath fileLocation, string projectName, string defaultTargets);
}
[ProjectFileTypeAttribute("JetBrains.ProjectModel.NAntProjectFileType", "16")]
public class JetBrains.ReSharper.Psi.BuildScripts.NAnt.NAntProjectFileLanguageService : XmlProjectFileLanguageService {
    public IconId Icon { get; }
    public NAntProjectFileLanguageService(NAntProjectFileType nantProjectFileType);
    public virtual IconId get_Icon();
    public virtual PsiLanguageType GetPsiLanguageType(ProjectFileType languageType);
}
[MiscFilesProjectPsiModuleProviderAttribute("16")]
public class JetBrains.ReSharper.Psi.BuildScripts.NAnt.NAntPsiModuleProvider : BuildScriptPsiModuleProvider {
    [CompilerGeneratedAttribute]
private BuildScriptModule <Module>k__BackingField;
    protected BuildScriptModule Module { get; }
    public NAntPsiModuleProvider(ISolution solution);
    [CompilerGeneratedAttribute]
protected virtual BuildScriptModule get_Module();
}
public class JetBrains.ReSharper.Psi.BuildScripts.NAnt.NAntReferencesManager : ReferencesManagerBase {
    private JetHashSet`1<string> myIgnoredProperties;
    public virtual void IgnoreProperty(string propertyName, BuildScriptFileBase file);
    private static void IgnorePropertyInternal(ITreeNode node, string propertyName, IDocument document, IXmlTagContainer file);
}
public class JetBrains.ReSharper.Psi.BuildScripts.NAnt.NAntRegexPatternNodeType : BuildScriptNodeType {
    public NAntRegexPatternNodeType(NAntNodeTypes nodeTypes, int index);
    public virtual CompositeElement Create();
}
public class JetBrains.ReSharper.Psi.BuildScripts.NAnt.NAntRegexPatternPropertyDeclarationNodeType : BuildScriptNodeType {
    public NAntRegexPatternPropertyDeclarationNodeType(NAntNodeTypes nodeTypes, int index);
    public virtual CompositeElement Create();
}
public class JetBrains.ReSharper.Psi.BuildScripts.NAnt.NAntTagFooterNodeType : BuildScriptNodeType {
    public NAntTagFooterNodeType(NAntNodeTypes nodeTypes, int index);
    public virtual CompositeElement Create();
}
public class JetBrains.ReSharper.Psi.BuildScripts.NAnt.NAntTagHeaderNodeType : BuildScriptNodeType {
    public NAntTagHeaderNodeType(NAntNodeTypes nodeTypes, int index);
    public virtual CompositeElement Create();
}
public class JetBrains.ReSharper.Psi.BuildScripts.NAnt.NAntTagNodeType : BuildScriptNodeType {
    public NAntTagNodeType(NAntNodeTypes nodeTypes, int index);
    public virtual CompositeElement Create();
}
public class JetBrains.ReSharper.Psi.BuildScripts.NAnt.NAntValueEvaluator : ValueEvaluator {
    private NAntLanguageService myLanguageService;
    public NAntValueEvaluator(NAntLanguageService languageService);
    protected virtual bool IsPredefinedProperty(ScriptReferenceBase reference);
    protected virtual IList`1<string> GetPredefinedPropertyValues(ScriptReferenceBase reference, BuildScriptFileBase file);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.BuildScripts.NAnt.NAntLanguage", "16")]
public class JetBrains.ReSharper.Psi.BuildScripts.NAnt.NAntXmlLanguageSupport : XmlLanguageSupport {
    public virtual bool CanConvertAttributeToTag(IXmlAttribute attribute);
    public virtual bool CanConvertTagToAttribute(IXmlTag tag);
    public virtual bool IsFormattingAllowed(IPsiSourceFile sourceFile);
    public virtual XmlTreeBuilder CreateTreeBuilder(IXmlElementFactory factory, IXmlElementFactoryContext factoryContext, ITokenIntern intern, IXmlTreeBuilderContext treeBuilderContext);
}
internal class JetBrains.ReSharper.Psi.BuildScripts.NAnt.Parsing.NAntAttributeFactory : object {
    private NAntNodeTypes myNodeTypes;
    public NAntAttributeFactory(NAntNodeTypes nodeTypes);
    public NAntAttribute CreateAttribute(IXmlIdentifier nameIdentifier, IXmlAttributeContainer attributeContainer, IXmlTagContainer parentTag);
}
internal class JetBrains.ReSharper.Psi.BuildScripts.NAnt.Parsing.NAntParser : object {
    private IXmlElementFactory myElementFactory;
    private CommonIdentifierIntern myCommonIdentifierIntern;
    private ILexer myLexer;
    public NAntParser(ILexer lexer, IXmlElementFactory xmlElementFactory, CommonIdentifierIntern commonIdentifierIntern);
    public sealed virtual IFile ParseFile();
    private static void UpdateReferences(IXmlTagContainer container, BuildScriptFileBase file);
    [CompilerGeneratedAttribute]
private IXmlFile <ParseFile>b__4_0(ITokenIntern intern);
}
public class JetBrains.ReSharper.Psi.BuildScripts.NAnt.Parsing.NAntTagFactory : object {
    private NAntNodeTypes myNodeTypes;
    public NAntTagFactory(NAntNodeTypes nodeTypes);
    public NAntTag CreateTagNode(IXmlTagHeader header, IXmlTagContainer parent);
}
public class JetBrains.ReSharper.Psi.BuildScripts.NAnt.Parsing.NAntTreeBuilder : XmlTreeBuilder {
    public NAntTreeBuilder(IXmlElementFactory elementFactory, IXmlElementFactoryContext factoryContext, ITokenIntern intern);
    protected virtual void AppendNewChild(ITreeNode parent, IXmlComment comment);
    protected virtual void AppendNewChild(IXmlAttribute parent, IXmlAttributeValue child);
    private ExternalPropertiesElement MakeExternalPropertiesElement(IXmlToken child);
    private RegexPatternElement MakeRegexPatternElement(ITreeNode child);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.BuildScripts.NAnt.NAntLanguage", "16")]
public class JetBrains.ReSharper.Psi.BuildScripts.NAnt.Parsing.NAntTreeNodeFactory : XmlTreeNodeFactory {
    [NotNullAttribute]
private NAntNodeTypes myNodeTypes;
    [NotNullAttribute]
private NAntTagFactory myTagFactory;
    [NotNullAttribute]
private NAntAttributeFactory myAttributeFactory;
    public NAntTreeNodeFactory(NAntLanguage languageType, XmlTokenTypes tokenTypes, XmlElementTypes elementTypes, NAntNodeTypes nodeTypes);
    public virtual IXmlFile CreateFile();
    public virtual IXmlTag CreateRootTag(IXmlTagHeader header, IXmlElementFactoryContext context);
    public virtual IXmlTag CreateTag(IXmlTagHeader header, IXmlTag parentTag, IXmlElementFactoryContext context);
    public virtual IXmlAttribute CreateAttribute(IXmlIdentifier nameIdentifier, IXmlAttributeContainer attributeContainer, IXmlTagContainer parentTag, IXmlElementFactoryContext context);
    public virtual IXmlTagHeader CreateTagHeader(IXmlTagContainer parentTag, IXmlElementFactoryContext context);
    public virtual IXmlTagFooter CreateTagFooter(IXmlTagContainer parentTag, IXmlElementFactoryContext context);
    public virtual IXmlComment CreateComment();
}
[PsiSharedComponentAttribute]
public class JetBrains.ReSharper.Psi.BuildScripts.NAnt.Searching.NAntScriptSearcherFactory : ScriptSearcherFactoryBase`1<NAntLanguage> {
    public NAntScriptSearcherFactory(SearchDomainFactory searchDomainFactory);
}
public class JetBrains.ReSharper.Psi.BuildScripts.NAnt.Tasks.BooleanValidator : Validator {
    public virtual bool Validate(string value);
}
public class JetBrains.ReSharper.Psi.BuildScripts.NAnt.Tasks.DateTimeValidator : Validator {
    public virtual bool Validate(string value);
}
public class JetBrains.ReSharper.Psi.BuildScripts.NAnt.Tasks.ElementComparer : object {
    public sealed virtual int Compare(NAntElement x, NAntElement y);
}
public class JetBrains.ReSharper.Psi.BuildScripts.NAnt.Tasks.Int32Validator : Validator {
    public virtual bool Validate(string value);
}
public class JetBrains.ReSharper.Psi.BuildScripts.NAnt.Tasks.NAntAttribute : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Required>k__BackingField;
    [CompilerGeneratedAttribute]
private Validator <Validator>k__BackingField;
    public string Name { get; private set; }
    public bool Required { get; private set; }
    public Validator Validator { get; private set; }
    public NAntAttribute(string name, bool required, Validator validator);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public bool get_Required();
    [CompilerGeneratedAttribute]
private void set_Required(bool value);
    [CompilerGeneratedAttribute]
public Validator get_Validator();
    [CompilerGeneratedAttribute]
private void set_Validator(Validator value);
    internal void SetName(string name);
    internal void SetRequired(bool required);
    internal void SetValidator(Validator validator);
}
public class JetBrains.ReSharper.Psi.BuildScripts.NAnt.Tasks.NAntElement : object {
    private string myName;
    protected Dictionary`2<string, NAntElement> myElementsMap;
    [CompilerGeneratedAttribute]
private bool <IsTaskContainer>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRawXml>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, NAntAttribute> <AttributesMap>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, NAntElementArray> <ElementArraysMap>k__BackingField;
    [CompilerGeneratedAttribute]
private Hashtable <ElementCollectionsMap>k__BackingField;
    public string Name { get; }
    public bool IsTaskContainer { get; private set; }
    public bool IsRawXml { get; private set; }
    public Dictionary`2<string, NAntAttribute> AttributesMap { get; private set; }
    public Dictionary`2<string, NAntElement> ElementsMap { get; }
    public Dictionary`2<string, NAntElementArray> ElementArraysMap { get; private set; }
    public Hashtable ElementCollectionsMap { get; private set; }
    public bool HasInnerElements { get; }
    internal NAntElement(string name);
    public string get_Name();
    [CompilerGeneratedAttribute]
public bool get_IsTaskContainer();
    [CompilerGeneratedAttribute]
private void set_IsTaskContainer(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsRawXml();
    [CompilerGeneratedAttribute]
private void set_IsRawXml(bool value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, NAntAttribute> get_AttributesMap();
    [CompilerGeneratedAttribute]
private void set_AttributesMap(Dictionary`2<string, NAntAttribute> value);
    public Dictionary`2<string, NAntElement> get_ElementsMap();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, NAntElementArray> get_ElementArraysMap();
    [CompilerGeneratedAttribute]
private void set_ElementArraysMap(Dictionary`2<string, NAntElementArray> value);
    [CompilerGeneratedAttribute]
public Hashtable get_ElementCollectionsMap();
    [CompilerGeneratedAttribute]
private void set_ElementCollectionsMap(Hashtable value);
    public bool get_HasInnerElements();
    internal void SetIsTaskContainer(bool value);
    internal void SetIsRawXml(bool value);
    public bool IsAttribute(string name);
    public bool IsElement(string name);
    public bool IsElementArray(string name);
    public bool IsElementCollection(string name);
    public void AddAttribute(NAntAttribute attribute);
    public void AddElement(NAntElement element);
    public void AddElementArray(NAntElementArray array);
    public void AddElementCollection(NAntElementCollection collection);
    public NAntAttribute[] GetAllAttributes();
    public NAntElement GetElement(string name);
    public NAntElement[] GetAllElements();
    public NAntElementArray GetElementArray(string possibleName);
    public NAntElementArray[] GetAllElementArrays();
    public NAntElementCollection GetElementCollection(string collectionName);
    public NAntElementCollection[] GetAllElementCollections();
    public void DumpToXml(XmlElement element, XmlDocument document);
    public void SortContents();
}
public class JetBrains.ReSharper.Psi.BuildScripts.NAnt.Tasks.NAntElementArray : object {
    private IDictionary`2<string, NAntElement> myPossibleContainingElements;
    internal NAntElementArray(NAntElement element);
    public NAntElement GetContainingElement(string name);
    public void AddContainingElement(NAntElement element);
    public String[] GetAllContainingElements();
    public void SortContents();
}
public class JetBrains.ReSharper.Psi.BuildScripts.NAnt.Tasks.NAntElementCollection : NAntElement {
    private string myName;
    public string Name { get; }
    public NAntElementCollection(string name);
    public string get_Name();
    public NAntElement GetContainingElement(string name);
    internal void AddContainingElement(NAntElement element);
    public bool IsContainingElement(string name);
    public List`1<string> GetAllContainingElements();
    public void SortContents();
}
public class JetBrains.ReSharper.Psi.BuildScripts.NAnt.Tasks.NAntTask : NAntElement {
    public NAntTask(string name);
}
public class JetBrains.ReSharper.Psi.BuildScripts.NAnt.Tasks.NAntTaskFactory : object {
    public static NAntTask CreateTask(IMetadataTypeInfo task, string name, IMetadataAssembly currentAssembly);
    private static void FillElement(IMetadataTypeInfo elementType, NAntElement element, IMetadataAssembly currentAssembly);
    private static void AddDataFromMember(IMetadataAssembly currentAssembly, NAntElement element, IMetadataEntity entity, IMetadataType type);
    private static NAntElementCollection CreateElementCollection(IMetadataCustomAttribute attribute, IMetadataAssembly currentAssembly, IMetadataType metadataType);
    private static NAntElementArray CreateElementArray(IMetadataEntity property, IMetadataAssembly currentAssembly, IMetadataType metadataType);
    private static NAntElement CreateElement(IMetadataCustomAttribute attribute, IMetadataAssembly currentAssembly, IMetadataType metadataType);
    private static NAntAttribute CreateAttribute(IMetadataEntity property, IMetadataCustomAttribute attribute);
    public static NAntTask[] FromXml(XmlDocument document);
    private static NAntTask CreateTaskFromXml(XmlElement element);
    private static void FillElementFromXml(NAntElement element, XmlElement node);
    private static NAntElementCollection CreateElementCollectionFromXml(XmlElement element);
    private static NAntElementArray CreateElementArrayFromXml(XmlElement element);
    private static NAntElement CreateElementFromXml(XmlElement element);
    private static NAntAttribute CreateAttributeFromXml(XmlElement element);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Psi.BuildScripts.NAnt.Tasks.NAntTaskManager : object {
    private Dictionary`2<string, FileResolveEntry> myFileToResolveMap;
    private Dictionary`2<string, FileEntry> myNAntDirToResolveMap;
    private Dictionary`2<ITreeNodePointer`1<NAntLoadTasksTag>, bool> myTaskLoadMap;
    private ScriptSettings mySettings;
    private ISolution mySolution;
    private Dictionary`2<string, NAntTask> myCommonNAntTasks;
    public Dictionary`2<string, NAntTask> CommonNAntTasks { get; }
    public NAntTaskManager(ISolution solution);
    public void AddSearchDirectory(string directory);
    public void AddSearchDirectoryAndScan(string directory);
    private static String[] GetPlatformFolders();
    internal void LoadTasksForFile(IFile file);
    public void LoadTasksForNant(string nantDir);
    private void Scan(IEnumerable`1<string> assemblies, IEnumerable`1<string> directories, FileEntry entry);
    private static IList`1<Exception> Scan(IEnumerable`1<string> assemblies, String[] directories, FileResolveEntry entry);
    private String[] ScanDirForAssemblies(string dir, String[]& directories);
    public bool IsResolved(string taskName, IFile file);
    public NAntTask GetTask(string name, IFile file);
    public NAntTask[] GetTasks(IFile file);
    public static NAntTaskManager GetInstance(ISolution solution);
    internal String[] GetAssembliesToLoad(NAntLoadTasksTag tag, CommonExecutionContext context, String[]& dirs);
    private static IList`1<string> FindAssemblies(string basedir, ArrayList includeRegexes, ArrayList excludeRegexes, String[]& dirs);
    internal String[] LoadTasks(NAntLoadTasksTag tag);
    internal String[] LoadTasks(NAntLoadTasksTag tag, CommonExecutionContext context);
    public bool IsLoaded(NAntLoadTasksTag tag);
    public NAntTask[] GetAllTasks(string nantDir);
    public Dictionary`2<string, NAntTask> get_CommonNAntTasks();
    private void DemandNAntTaskLoad();
    [CompilerGeneratedAttribute]
private bool <DemandNAntTaskLoad>b__27_0(NAntTask task);
}
[SettingsKeyAttribute("JetBrains.Application.Settings.WellKnownRootKeys.EnvironmentSettings", "JetBrains.ReSharper.Psi.BuildScripts.Resources.Strings", "NAntSettingsSettingDescription")]
public class JetBrains.ReSharper.Psi.BuildScripts.NAnt.Tasks.NAntValidationSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Psi.BuildScripts.Resources.Strings", "NAntBinariesFolderSettingDescription")]
public VirtualFileSystemPath NAntFolder;
}
[SolutionSettingsUpgraderAttribute("16")]
public class JetBrains.ReSharper.Psi.BuildScripts.NAnt.Tasks.NAntValidationSettingsUpgrader : object {
    public sealed virtual void Upgrade(IComponentSettingsProvider legacySettingsProvider, IContextBoundSettingsStore boundSettingsStore, Lifetime upgradeLifetime);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Psi.BuildScripts.NAnt.Tasks.ScriptSettings : object {
    private ISolution mySolution;
    private ISettingsStore mySettingsStore;
    public ScriptSettings(ISolution solution, ISettingsStore settingsStore);
    public static ScriptSettings GetInstance(ISolution solution);
    public VirtualFileSystemPath GetNAntDirectory(string fileId, Func`3<Lifetime, DataContexts, IDataContext> fContext);
    public void SetNAntDirectory(string fileId, VirtualFileSystemPath nantPath, Func`3<Lifetime, DataContexts, IDataContext> fContext);
    public void ChangeNAntDirectory(string fileId, VirtualFileSystemPath nantPath, Func`3<Lifetime, DataContexts, IDataContext> fContext);
    public void RemoveFileBinding(string fileId, Func`3<Lifetime, DataContexts, IDataContext> fContext);
}
public class JetBrains.ReSharper.Psi.BuildScripts.NAnt.Tasks.StringValidator : Validator {
    private bool myAllowEmpty;
    private string myExpression;
    public bool AllowEmpty { get; public set; }
    public string Expression { get; public set; }
    public bool get_AllowEmpty();
    public void set_AllowEmpty(bool value);
    public string get_Expression();
    public void set_Expression(string value);
    public virtual bool Validate(string value);
}
public abstract class JetBrains.ReSharper.Psi.BuildScripts.NAnt.Tasks.Validator : object {
    public abstract virtual bool Validate(string value);
}
public class JetBrains.ReSharper.Psi.BuildScripts.NAnt.Tree.NAntAttribute : BuildScriptAttributeBase {
    public NAntAttribute(XmlCompositeNodeType nodeType);
    protected virtual ReferenceCollection GetAttributeReferences();
    private static ReferenceCollection GetNAntAttributeReferences(XmlAttribute attribute, IXmlAttributeValue value);
    public static void FillInNAntReferences(string val, TreeTextRange initialRange, XmlAttribute attribute, List`1<string> codePiecesCollection, List`1<TreeTextRange> codePiecesRanges, List`1<string> resultingReferences, List`1<TreeTextRange> resultingReferencesRanges);
    private static List`1<string> Parse(string piece, Int32[]& offsets);
}
internal class JetBrains.ReSharper.Psi.BuildScripts.NAnt.Tree.NAntComment : XmlComment {
    public NAntComment(XmlCompositeNodeType nodeType);
}
public class JetBrains.ReSharper.Psi.BuildScripts.NAnt.Tree.NAntElementTag : NAntTag {
    public NAntElementTag(XmlCompositeNodeType nodeType);
}
public class JetBrains.ReSharper.Psi.BuildScripts.NAnt.Tree.NAntExternalPropertiesElement : ExternalPropertiesElement {
    public NAntExternalPropertiesElement(XmlCompositeNodeType nodeType);
    public virtual XmlTokenNodeType GetTokenType();
}
public class JetBrains.ReSharper.Psi.BuildScripts.NAnt.Tree.NAntFile : BuildScriptFileBase {
    private static short NANT_PROJECT_ROLE;
    public NAntFile(BuildScriptNodeType nodeType);
    public virtual short GetChildRole(TreeElement child);
    protected virtual List`1<IDeclaredElement> FindCommonDeclarations();
    public virtual JetHashSet`1<IDeclaredElement> FindGlobalDeclarations();
    private static void ProcessPropertyTag(IXmlTag tag, ReferenceManager referenceManager, JetHashSet`1<IDeclaredElement> declaredElements);
    public virtual ISymbolTable AddDeclarationsBeforeElement(ISymbolTable parentTable, ITreeNode element, int level, SymbolTableMode mode);
}
internal class JetBrains.ReSharper.Psi.BuildScripts.NAnt.Tree.NAntFilesetTag : NAntTag {
    public NAntFilesetTag(XmlCompositeNodeType nodeType);
}
internal class JetBrains.ReSharper.Psi.BuildScripts.NAnt.Tree.NAntIncludeTag : NAntTag {
    [CompilerGeneratedAttribute]
private List`1<string> <ImportedFileIds>k__BackingField;
    [CanBeNullAttribute]
public NAntAttribute BuildFile { get; }
    public bool IsImportsTag { get; }
    public List`1<string> ImportedFileIds { get; public set; }
    public IBuildScriptAttribute ImportAttribute { get; }
    public NAntIncludeTag(XmlCompositeNodeType nodeType);
    public NAntAttribute get_BuildFile();
    public virtual bool get_IsImportsTag();
    [CompilerGeneratedAttribute]
public sealed virtual List`1<string> get_ImportedFileIds();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ImportedFileIds(List`1<string> value);
    public virtual IBuildScriptAttribute get_ImportAttribute();
}
public class JetBrains.ReSharper.Psi.BuildScripts.NAnt.Tree.NAntLoadTasksTag : NAntTag {
    [CompilerGeneratedAttribute]
private bool <TasksLoaded>k__BackingField;
    public bool TasksLoaded { get; public set; }
    [CanBeNullAttribute]
public NAntAttribute AssemblyAttribute { get; }
    [CanBeNullAttribute]
public NAntAttribute PathAttribute { get; }
    public NAntLoadTasksTag(XmlCompositeNodeType nodeType);
    [CompilerGeneratedAttribute]
public bool get_TasksLoaded();
    [CompilerGeneratedAttribute]
public void set_TasksLoaded(bool value);
    public NAntAttribute get_AssemblyAttribute();
    public NAntAttribute get_PathAttribute();
}
public class JetBrains.ReSharper.Psi.BuildScripts.NAnt.Tree.NAntPredefinedFunctions : PredefinedItemsBase {
    private IList`1<string> myPredefinedFunctions;
    public virtual bool IsPredefined(string tagName);
    public IList`1<string> GetAll();
    public virtual IList`1<string> GetPredefinedPropertyValue(string propertyName, VirtualFileSystemPath fileLocation, string projectName, string defaultTargets);
}
public class JetBrains.ReSharper.Psi.BuildScripts.NAnt.Tree.NAntProjectTag : NAntTag {
    public IDeclaredElement DeclaredElement { get; }
    public string DeclaredName { get; }
    public NAntProjectTag(XmlCompositeNodeType nodeType);
    public sealed virtual IDeclaredElement get_DeclaredElement();
    public sealed virtual string get_DeclaredName();
    public sealed virtual void SetName(string name);
    public sealed virtual TreeTextRange GetNameRange();
    public sealed virtual XmlNode GetXMLDoc(bool inherit);
    public sealed virtual bool IsSynthetic();
}
public class JetBrains.ReSharper.Psi.BuildScripts.NAnt.Tree.NAntPropertyTag : NAntTag {
    public string PropertyName { get; }
    public IBuildScriptDeclaration PropertyDeclaration { get; }
    public NAntPropertyTag(XmlCompositeNodeType nodeType);
    public sealed virtual string get_PropertyName();
    public sealed virtual IBuildScriptDeclaration get_PropertyDeclaration();
}
public class JetBrains.ReSharper.Psi.BuildScripts.NAnt.Tree.NAntTag : BuildScriptTagBase {
    public NAntTag(XmlCompositeNodeType nodeType);
    public virtual short GetChildRole(TreeElement child);
}
public class JetBrains.ReSharper.Psi.BuildScripts.NAnt.Tree.NAntTagFooter : XmlTagFooterNode {
    public NAntTagFooter(XmlCompositeNodeType nodeType);
}
internal class JetBrains.ReSharper.Psi.BuildScripts.NAnt.Tree.NAntTagHeader : XmlTagHeaderNode {
    public NAntTagHeader(XmlCompositeNodeType nodeType);
    public virtual short GetChildRole(TreeElement child);
}
public class JetBrains.ReSharper.Psi.BuildScripts.NAnt.Tree.NAntTargetTag : NAntTag {
    public string TargetName { get; }
    public IBuildScriptDeclaration TargetDeclaration { get; }
    public NAntTargetTag(XmlCompositeNodeType nodeType);
    public sealed virtual string get_TargetName();
    public sealed virtual IBuildScriptDeclaration get_TargetDeclaration();
}
public class JetBrains.ReSharper.Psi.BuildScripts.NAnt.Tree.NAntTaskTag : NAntElementTag {
    public bool IsTaskContainer { get; }
    public NAntTaskTag(XmlCompositeNodeType nodeType);
    public bool get_IsTaskContainer();
}
internal class JetBrains.ReSharper.Psi.BuildScripts.NAnt.Tree.RegexPatternElement : CompositeElement {
    private string myCachedUnquotedValue;
    private TreeTextRange myUnquotedRange;
    private XmlCompositeNodeType myNodeType;
    public PsiLanguageType Language { get; }
    public NodeType NodeType { get; }
    public XmlTokenTypes XmlTokenTypes { get; }
    public string UnquotedValue { get; }
    public TreeTextRange UnquotedValueRange { get; }
    public IXmlValueToken ValueToken { get; }
    public RegexPatternElement(XmlCompositeNodeType nodeType);
    public virtual PsiLanguageType get_Language();
    public virtual NodeType get_NodeType();
    public sealed virtual XmlTokenTypes get_XmlTokenTypes();
    public sealed virtual XmlTokenNodeType GetTokenType();
    public ICollection`1<RegexPatternPropertyDeclaration> GetDeclarations();
    public sealed virtual TReturn AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
    public sealed virtual string get_UnquotedValue();
    public sealed virtual TreeTextRange get_UnquotedValueRange();
    public sealed virtual IXmlValueToken get_ValueToken();
    private sealed virtual override TokenNodeType JetBrains.ReSharper.Psi.Tree.ITokenNode.GetTokenType();
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Psi.BuildScripts.NAnt.ZoneMarker : object {
}
public class JetBrains.ReSharper.Psi.BuildScripts.Parsing.PredefinedStrings : object {
    public static string MSBUILD_PARAMETER_TYPE;
    public static string NANT_PROJECT;
    public static string NANT_TARGET;
    public static string NANT_PROPERTY;
    public static string NANT_PROPERTY_TRUE;
    public static string NANT_PROPERTY_EXISTS;
    public static string NANT_TARGET_EXISTS;
    public static string NANT_INCLUDE;
    public static string NANT_FILESET;
    public static string NANT_IF_TASK;
    public static string NANT_IFNOT_TASK;
    public static string NANT_READREGISTRY_TASK;
    public static string NANT_FOREACH_TASK;
    public static string NANT_LOADFILE_TASK;
    public static string NANT_CALL_TASK;
    public static string NANT_LOADTASKS_TASK;
    public static string NANT_ASSEMBLY_NAME;
    public static string NANT_ASSEMBLY_FILE;
    public static string NANT_BUILDFILE;
    public static string NANT_VALUE;
    public static string NAME;
    public static string ID;
    public static string BASEDIR;
    public static string DEFAULT;
    public static string VALUE;
    public static string DEPENDS;
    public static string MSBUILD_CALL_TARGET;
    public static string MSBUILD_TARGETS;
    public static string MSBUILD_IS_REQUIRED;
    public static string MSBUILD_PARAMETER_GROUP;
    public static string MSBUILD_PROJECT;
    public static string MSBUILD_TARGET;
    public static string MSBUILD_PROPERTY_GROUP;
    public static string MSBUILD_ITEM_DEFINITION_GROUP;
    public static string MSBUILD_ITEM_GROUP;
    public static string MSBUILD_USING_TASK;
    public static string MSBUILD_NAME;
    public static string MSBUILD_DEPENDS;
    public static string MSBUILD_DEFAULT_TARGETS;
    public static string MSBUILD_CONDITION;
    public static string MSBUILD_TASK_NAME;
    public static string MSBUILD_TASK;
    public static string MSBUILD_CODE_FACTORY;
    public static string MSBUILD_ASSEMBLY_NAME;
    public static string MSBUILD_ASSEMBLY_FILE;
    public static string MSBUILD_TASK_FACTORY;
    public static string MSBUILD_OUTPUT;
    public static string MSBUILD_IMPORT;
    public static string MSBUILD_PROPERTY_NAME;
    public static string MSBUILD_ITEM_GROUP_NAME;
    public static string MSBUILD_INITIAL_TARGETS;
    public static string RESHARPER_IGNORED_PROPERTIES;
    public static string NANT_DIRECTORY;
    public static string NANT_REGEX;
    public static string NANT_PATTERN;
}
public static class JetBrains.ReSharper.Psi.BuildScripts.PathUtil : object {
    [CanBeNullAttribute]
public static List`1<string> GetFilePath(IBuildScriptAttribute attribute, VirtualFileSystemPath baseDir);
    [CanBeNullAttribute]
public static VirtualFileSystemPath GetFilePath(IBuildFile file);
    public static string GetDirectoryPath(IBuildScriptAttribute attribute, IPath baseDir);
    [CanBeNullAttribute]
public static string GetImportedPath(IInclusionTag inclusionTag, Predicate`1<string> extensionCheck);
    public static IFile GetImportedFile(BuildScriptFileBase thisFile, CommonExecutionContext context, VirtualFileSystemPath path);
    private static IFile GetImportedFileInternal(ITreeNode thisFile, CommonExecutionContext context, VirtualFileSystemPath path);
    public static IFile GetImportedFile(IProject project, VirtualFileSystemPath path, LanguageService languageService);
    private static IFile CreateImportedFileInternal(VirtualFileSystemPath path, LanguageService service, CommonExecutionContext context);
    private static IFile CreateImportedFile(VirtualFileSystemPath path, LanguageService service, IProject project);
}
public abstract class JetBrains.ReSharper.Psi.BuildScripts.PredefinedItemsBase : object {
    public abstract virtual bool IsPredefined(string tagName);
    public abstract virtual IList`1<string> GetPredefinedPropertyValue(string propertyName, VirtualFileSystemPath fileLocation, string projectName, string defaultTargets);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Psi.BuildScripts.ReferenceManager : object {
    private Dictionary`2<IDeclaredElement, List`1<BuildScriptNode>> myDeclaredElements;
    private Dictionary`2<string, List`1<IDeclaredElement>> myElementsMap;
    private Dictionary`2<int, JetHashSet`1<BuildScriptNode>> myPartitions;
    private BuildScriptManager myBuildScriptManager;
    private IPsiModules myPsiModules;
    private DocumentChangeManager myDocumentChangeManager;
    private SolutionDocumentChangeProvider mySolutionDocumentChangeProvider;
    private ISolution mySolution;
    private object myLock;
    [CompilerGeneratedAttribute]
private Action`2<IBuildScriptDeclaration, BuildScriptDeclaredElementBase> BuildScriptDeclaredElementUpdated;
    [CompilerGeneratedAttribute]
private Action`1<IDeclaredElement> BuildScriptDeclaredElementRemoved;
    private BuildScriptGraph Graph { get; }
    public ReferenceManager(Lifetime lifetime, ISolution solution, IPsiModules psiModules, DocumentManager documentManager, PsiFiles psiFiles, BuildScriptManager buildScriptManager, ChangeManager changeManager, DocumentChangeManager documentChangeManager, SolutionDocumentChangeProvider solutionDocumentChangeProvider);
    [CompilerGeneratedAttribute]
public void add_BuildScriptDeclaredElementUpdated(Action`2<IBuildScriptDeclaration, BuildScriptDeclaredElementBase> value);
    [CompilerGeneratedAttribute]
public void remove_BuildScriptDeclaredElementUpdated(Action`2<IBuildScriptDeclaration, BuildScriptDeclaredElementBase> value);
    [CompilerGeneratedAttribute]
public void add_BuildScriptDeclaredElementRemoved(Action`1<IDeclaredElement> value);
    [CompilerGeneratedAttribute]
public void remove_BuildScriptDeclaredElementRemoved(Action`1<IDeclaredElement> value);
    private BuildScriptGraph get_Graph();
    public void OnBuildScriptDeclaredElementUpdated(IBuildScriptDeclaration declaration, BuildScriptDeclaredElementBase declaredElement);
    public sealed virtual object Execute(IChangeMap changeMap);
    public static ReferenceManager GetInstance(ISolution solution);
    public void Clear();
    public void ClearFileDeclaredElements(IFile file, OneToSetMap`2<string, IDeclaredElement> elementsFound);
    public void ClearFileDeclarations(IFile file);
    private bool ClearFileDeclarations(VirtualFileSystemPath filePath);
    private void UpdateDeclarations(DocumentChange documentChange, VirtualFileSystemPath location);
    public void AddDeclaredElement(IFile file, IDeclaredElement declaredElement);
    public void BuildDeclaredElements();
    public void UpdateDeclaredElement(IBuildScriptDeclaration declaration, BuildScriptDeclaredElementBase element);
    private IDeclaredElement CreateDeclaredElementFromDeclaration(IBuildScriptDeclaration declaration, BuildScriptNode inclusionNode);
    public void UpdateDeclaredElement(IBuildScriptDeclaration declaration);
    public JetHashSet`1<IDeclaredElement> GetAllDeclaredElementsOfType(IBuildFile file, DeclaredElementType type);
    public JetHashSet`1<IDeclaredElement> GetAllDeclaredElements(BuildScriptFileBase file);
    public IDeclaredElement GetDeclaredElementOfType(BuildScriptFileBase file, DeclaredElementType type, string name);
    public List`1<BuildScriptFileBase> GetDeclaredElementFiles(IDeclaredElement element);
    public void ChangeDeclaredElementName(IDeclaredElement element, string newName);
    internal JetHashSet`1<IDeclaredElement> ResolveWithoutCache(BuildScriptFileBase file, ScriptReferenceBase reference, ICommonElementProvider commonElementsProvider);
    private JetHashSet`1<BuildScriptNode> GetNodePartition(BuildScriptNode node);
    private static void ProcessNode(BuildScriptNode node, Dictionary`2<BuildScriptNode, int> nodePartitions, Int32& partitionCounter, Dictionary`2<int, JetHashSet`1<BuildScriptNode>> partitions);
    private static void ProcessTag(BuildScriptTagBase tag, DeclaredElementFinder finder, BuildScriptNode node);
    private static IFile GetMappedFile(IEnumerable`1<BuildScriptNode> nodes, IDictionary`2<BuildScriptNode, BuildScriptFileBase> mapping);
}
public class JetBrains.ReSharper.Psi.BuildScripts.References.AttributeReference : ScriptReferenceBase {
    private TreeTextRange myAttributeRange;
    public AttributeReference(CompositeElement reference, TreeTextRange range, TreeTextRange rangeInAttribute, string referenceName, DeclaredElementType type);
    public virtual IReference BindTo(IDeclaredElement element);
    public virtual TreeTextRange GetTreeTextRange();
    public TreeTextRange GetRangeInAttribute();
    public void SetRangeInAttribute(TreeTextRange range);
}
public class JetBrains.ReSharper.Psi.BuildScripts.References.FakeReference : AttributeReference {
    public FakeReference(CompositeElement reference, TreeTextRange range, TreeTextRange rangeInAttribute, string referenceName, DeclaredElementType type);
}
public abstract class JetBrains.ReSharper.Psi.BuildScripts.References.ScriptReferenceBase : UserDataHolder {
    protected IDeclaredElement myTag;
    protected string myReferenceName;
    protected CompositeElement myElement;
    private DeclaredElementType myReferenceType;
    private CachedPsiValue`1<ResolveResultWithInfo> myResolveCache;
    public bool HasMultipleNames { get; }
    public ResolveResultWithInfo CurrentResolveResult { get; public set; }
    public bool ShouldResolveInGlobalTable { get; }
    public bool IsQualified { get; }
    public CompositeElement Reference { get; }
    public DeclaredElementType Type { get; }
    protected ScriptReferenceBase(CompositeElement reference, TreeTextRange range, string referenceName, DeclaredElementType referenceType);
    public sealed virtual ITreeNode GetTreeNode();
    public sealed virtual string GetName();
    public sealed virtual bool get_HasMultipleNames();
    public sealed virtual HybridCollection`1<string> GetAllNames();
    public sealed virtual ResolveResultWithInfo get_CurrentResolveResult();
    public sealed virtual void set_CurrentResolveResult(ResolveResultWithInfo value);
    public sealed virtual ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
    public sealed virtual ResolveResultWithInfo Resolve();
    private bool IsSpecialReferenceType();
    public abstract virtual TreeTextRange GetTreeTextRange();
    public DocumentRange GetDocumentRange();
    public abstract virtual IReference BindTo(IDeclaredElement element);
    public sealed virtual IReference BindTo(IDeclaredElement element, ISubstitution substitution);
    public sealed virtual IAccessContext GetAccessContext();
    public sealed virtual bool IsValid();
    public sealed virtual ResolveResultWithInfo Resolve(ISymbolTable symbolTable, IAccessContext context);
    public sealed virtual bool get_ShouldResolveInGlobalTable();
    public sealed virtual bool get_IsQualified();
    public sealed virtual IQualifier GetQualifier();
    public sealed virtual ISymbolTable GetCompletionSymbolTable();
    public CompositeElement get_Reference();
    public DeclaredElementType get_Type();
    private ResolveResultWithInfo ResolveInternal();
    private static JetHashSet`1<T> FilterFromCommonElements(ICollection`1<T> elements, DeclaredElementGetter`1<T> getter, ICommonElementProvider commonElementProvider);
    private JetHashSet`1<T> FilterByType(IEnumerable`1<T> elements, Func`2<T, IDeclaredElement> getter);
    [CompilerGeneratedAttribute]
private ResolveResultWithInfo <Resolve>b__15_0(ScriptReferenceBase _);
}
public class JetBrains.ReSharper.Psi.BuildScripts.References.TagReference : ScriptReferenceBase {
    public TagReference(CompositeElement reference, TreeTextRange range, string referenceName, DeclaredElementType type);
    public virtual IReference BindTo(IDeclaredElement element);
    public virtual TreeTextRange GetTreeTextRange();
    protected virtual void BindToInternal(BuildScriptTagBase tag, XmlTokenTypes types, string newName);
}
public class JetBrains.ReSharper.Psi.BuildScripts.References.TextReference : ScriptReferenceBase {
    private TreeTextRange myTokenRange;
    public TextReference(CompositeElement reference, TreeTextRange range, TreeTextRange rangeInString, string referenceName, DeclaredElementType referenceType);
    public virtual IReference BindTo(IDeclaredElement element);
    public virtual TreeTextRange GetTreeTextRange();
}
public abstract class JetBrains.ReSharper.Psi.BuildScripts.ReferencesManagerBase : object {
    public abstract virtual void IgnoreProperty(string propertyName, BuildScriptFileBase file);
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public static class JetBrains.ReSharper.Psi.BuildScripts.Resources.Strings : object {
    private static ILogger ourLog;
    private static Lazy`1<JetResourceManager> ourResourceManager;
    [EditorBrowsableAttribute("2")]
public static JetResourceManager ResourceManager { get; }
    public static string NAntBinariesFolderSettingDescription { get; }
    public static string NAntSettingsSettingDescription { get; }
    public static string MSBuildModule_Text { get; }
    public static string NAntModule_Text { get; }
    public static string DefaultPresentation_Text { get; }
    public static string Target_Text { get; }
    public static string Property_Text { get; }
    public static string ItemGroup_Text { get; }
    private static Strings();
    public static JetResourceManager get_ResourceManager();
    public static string Choice(string format, Object[] args);
    public static string get_NAntBinariesFolderSettingDescription();
    public static string get_NAntSettingsSettingDescription();
    public static string get_MSBuildModule_Text();
    public static string get_NAntModule_Text();
    public static string get_DefaultPresentation_Text();
    public static string get_Target_Text();
    public static string get_Property_Text();
    public static string get_ItemGroup_Text();
}
public static class JetBrains.ReSharper.Psi.BuildScripts.ScriptUtil : object {
    public static T FindChildNode(ITreeNode node);
    public static string GetProjectName(BuildScriptFileBase file);
    public static string GetDefaultTargets(BuildScriptFileBase file);
    public static bool IsValidTargetName(string name);
    public static bool IsValidPropertyName(string name);
    public static BuildScriptFileBase GetPsiFile(ISolution solution, DocumentRange range);
}
public class JetBrains.ReSharper.Psi.BuildScripts.Searching.ScriptReferenceSearcher`1 : object {
    private IDeclaredElementsSet myElements;
    private ReferenceSearcherParameters myReferenceSearcherParameters;
    private List`1<string> myElementNames;
    public ScriptReferenceSearcher`1(IDeclaredElementsSet elements, ReferenceSearcherParameters referenceSearcherParameters);
    public sealed virtual bool ProcessProjectItem(IPsiSourceFile sourceFile, IFindResultConsumer`1<TResult> consumer);
    public sealed virtual bool ProcessElement(ITreeNode element, IFindResultConsumer`1<TResult> consumer);
}
public abstract class JetBrains.ReSharper.Psi.BuildScripts.Searching.ScriptSearcherFactoryBase`1 : DomainSpecificSearcherFactoryBase {
    private SearchDomainFactory mySearchDomainFactory;
    protected ScriptSearcherFactoryBase`1(SearchDomainFactory searchDomainFactory);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Psi.BuildScripts.Searching.ScriptSearcherFactoryBase`1/<GetAllPossibleWordsInFile>d__2")]
public virtual IEnumerable`1<string> GetAllPossibleWordsInFile(IDeclaredElement element);
    public virtual bool IsCompatibleWithLanguage(PsiLanguageType languageType);
    public virtual IDomainSpecificSearcher CreateReferenceSearcher(IDeclaredElementsSet elements, ReferenceSearcherParameters referenceSearcherParameters);
    public virtual IDomainSpecificSearcher CreateTextOccurrenceSearcher(IDeclaredElementsSet elements);
    public virtual IDomainSpecificSearcher CreateTextOccurrenceSearcher(string subject);
    public virtual IDomainSpecificSearcher CreateConstantExpressionSearcher(ConstantValue constantValue, bool onlyLiteralExpression);
    public virtual ISearchDomain GetDeclaredElementSearchDomain(IDeclaredElement declaredElement);
}
internal class JetBrains.ReSharper.Psi.BuildScripts.Searching.ScriptTextOccurrenceSearcher`1 : TextOccurrenceSearcherBase`1<TLanguage> {
    protected Predicate`1<ITreeNode> Predicate { get; }
    public ScriptTextOccurrenceSearcher`1(IEnumerable`1<IDeclaredElement> elements);
    public ScriptTextOccurrenceSearcher`1(string subject);
    protected virtual Predicate`1<ITreeNode> get_Predicate();
    private sealed virtual override bool JetBrains.ReSharper.Psi.ExtensionsAPI.IDomainSpecificSearcher.ProcessElement(ITreeNode element, IFindResultConsumer`1<TResult> consumer);
}
public abstract class JetBrains.ReSharper.Psi.BuildScripts.Tree.BuildScriptAttributeBase : XmlAttribute {
    public IBuildScriptTag Container { get; }
    protected BuildScriptAttributeBase(XmlCompositeNodeType type);
    public TreeTextRange GetTokenRange();
    protected virtual ReferenceCollection CreateFirstClassReferences();
    protected abstract virtual ReferenceCollection GetAttributeReferences();
    internal void UpdateReference(ScriptReferenceBase sender, TreeTextRange oldRange, TreeTextRange newRange);
    public void DropReferences();
    [NotNullAttribute]
protected TLanguageService GetLanguageService();
    public sealed virtual IList`1<string> CalculateValues();
    public sealed virtual IBuildScriptTag get_Container();
}
public abstract class JetBrains.ReSharper.Psi.BuildScripts.Tree.BuildScriptFileBase : XmlFile {
    protected ReferencesManagerBase myReferencesManager;
    private Dictionary`2<string, Key`1<IFile>> myImportedFileKeys;
    private object myStructureLock;
    [CompilerGeneratedAttribute]
private ExternalPropertiesElement <ExternalPropertiesElement>k__BackingField;
    [CompilerGeneratedAttribute]
private VirtualFileSystemPath <AlternativeFileLocation>k__BackingField;
    public ExternalPropertiesElement ExternalPropertiesElement { get; public set; }
    public VirtualFileSystemPath AlternativeFileLocation { get; public set; }
    public ReferencesManagerBase ReferencesManager { get; }
    public int LevelDelta { get; }
    protected BuildScriptFileBase(BuildScriptNodeType type);
    [CanBeNullAttribute]
public IProject GetProject();
    [CanBeNullAttribute]
public IFile GetImportedFile(string path);
    public void CacheImportedFile(string path, IFile file);
    [CompilerGeneratedAttribute]
public ExternalPropertiesElement get_ExternalPropertiesElement();
    [CompilerGeneratedAttribute]
public void set_ExternalPropertiesElement(ExternalPropertiesElement value);
    [CompilerGeneratedAttribute]
public sealed virtual VirtualFileSystemPath get_AlternativeFileLocation();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AlternativeFileLocation(VirtualFileSystemPath value);
    [NotNullAttribute]
public TLanguageService GetLanguageService();
    public abstract virtual ISymbolTable AddDeclarationsBeforeElement(ISymbolTable parentTable, ITreeNode element, int level, SymbolTableMode mode);
    public sealed virtual ISymbolTable AddDeclarationsAfterElement(ISymbolTable parentTable, ITreeNode element, int level, SymbolTableMode mode);
    public sealed virtual ISymbolTable AddGlobalDeclarations(ISymbolTable parentTable, int level, SymbolTableMode mode);
    public JetHashSet`1<IDeclaredElement> GatherDeclaredElements(BuildScriptManager buildScriptManager);
    public ReferencesManagerBase get_ReferencesManager();
    public sealed virtual int get_LevelDelta();
    public abstract virtual JetHashSet`1<IDeclaredElement> FindGlobalDeclarations();
    protected abstract virtual List`1<IDeclaredElement> FindCommonDeclarations();
    protected virtual OneToSetMap`2<string, IDeclaredElement> FilterElements(JetHashSet`1<IDeclaredElement> elements);
}
public abstract class JetBrains.ReSharper.Psi.BuildScripts.Tree.BuildScriptNodeType : XmlCompositeNodeType {
    protected BuildScriptNodeType(string s, XmlElementTypes xmlElementTypes, int index);
}
public class JetBrains.ReSharper.Psi.BuildScripts.Tree.BuildScriptTagBase : XmlTag {
    public bool IsImportsTag { get; }
    [CanBeNullAttribute]
public IBuildScriptAttribute ImportAttribute { get; }
    protected BuildScriptTagBase(XmlCompositeNodeType type);
    public sealed virtual IBuildScriptAttribute GetAttributeByName(string name);
    public virtual bool get_IsImportsTag();
    public virtual IBuildScriptAttribute get_ImportAttribute();
    public virtual string ToString();
}
public abstract class JetBrains.ReSharper.Psi.BuildScripts.Tree.ExternalPropertiesElement : CompositeElement {
    private XmlCompositeNodeType myNodeType;
    public PsiLanguageType Language { get; }
    public NodeType NodeType { get; }
    public XmlTokenTypes XmlTokenTypes { get; }
    protected ExternalPropertiesElement(XmlCompositeNodeType nodeType);
    public virtual PsiLanguageType get_Language();
    public virtual NodeType get_NodeType();
    public sealed virtual XmlTokenTypes get_XmlTokenTypes();
    public ICollection`1<ExternalPropertyDeclaration> GetDeclarations();
    private sealed virtual override TokenNodeType JetBrains.ReSharper.Psi.Tree.ITokenNode.GetTokenType();
    public abstract virtual XmlTokenNodeType GetTokenType();
    public sealed virtual TReturn AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
}
public interface JetBrains.ReSharper.Psi.BuildScripts.Tree.IBuildFile {
    public VirtualFileSystemPath AlternativeFileLocation { get; public set; }
    public abstract virtual VirtualFileSystemPath get_AlternativeFileLocation();
    public abstract virtual void set_AlternativeFileLocation(VirtualFileSystemPath value);
}
public interface JetBrains.ReSharper.Psi.BuildScripts.Tree.IBuildScriptAttribute {
    public IBuildScriptTag Container { get; }
    public abstract virtual IList`1<string> CalculateValues();
    public abstract virtual IBuildScriptTag get_Container();
}
public interface JetBrains.ReSharper.Psi.BuildScripts.Tree.IBuildScriptTag {
    public abstract virtual IBuildScriptAttribute GetAttributeByName(string name);
}
public interface JetBrains.ReSharper.Psi.BuildScripts.Tree.IProperty {
    [CanBeNullAttribute]
public string PropertyName { get; }
    [CanBeNullAttribute]
public IBuildScriptDeclaration PropertyDeclaration { get; }
    public abstract virtual string get_PropertyName();
    public abstract virtual IBuildScriptDeclaration get_PropertyDeclaration();
}
public interface JetBrains.ReSharper.Psi.BuildScripts.Tree.ITarget {
    [CanBeNullAttribute]
public string TargetName { get; }
    [CanBeNullAttribute]
public IBuildScriptDeclaration TargetDeclaration { get; }
    public abstract virtual string get_TargetName();
    public abstract virtual IBuildScriptDeclaration get_TargetDeclaration();
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Psi.BuildScripts.Tree.TreeExtensions : object {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Psi.BuildScripts.Tree.TreeExtensions/<FindAllInnerTags>d__0`1")]
[ExtensionAttribute]
public static IEnumerable`1<T> FindAllInnerTags(IBuildScriptTag tag, Predicate`1<BuildScriptTagBase> condition);
}
public abstract class JetBrains.ReSharper.Psi.BuildScripts.ValueEvaluator : object {
    private JetHashSet`1<string> myReferencesInEvaluation;
    public IList`1<string> GetAllPossibleValues(IBuildScriptAttribute attribute);
    public IList`1<string> GetAllPossibleValues(CompositeElement property);
    protected abstract virtual bool IsPredefinedProperty(ScriptReferenceBase reference);
    protected abstract virtual IList`1<string> GetPredefinedPropertyValues(ScriptReferenceBase reference, BuildScriptFileBase file);
    private List`1<string> GetTokenValues(string originalAttributeValue, IXmlToken tokenNode, ReferenceCollection references, BuildScriptFileBase file);
    private static bool CheckAllZero(IEnumerable`1<KeyValuePair`2<ScriptReferenceBase, int>> indexes);
    public static IList`1<string> GetAllPossibleValues(IDeclaredElement declaredElement);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Psi.BuildScripts.ZoneMarker : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
