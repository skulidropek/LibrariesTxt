[LanguageDefinitionAttribute("REGULAR_EXPRESSION")]
[DescriptionAttribute("Regular Expressions")]
public class JetBrains.ReSharper.Psi.RegExp.BaseLanguage.RegexBaseLanguage : KnownLanguage {
    public static string Name;
    [CompilerGeneratedAttribute]
private static RegexBaseLanguage <Instance>k__BackingField;
    [CanBeNullAttribute]
[UsedImplicitlyAttribute]
public static RegexBaseLanguage Instance { get; private set; }
    public PsiLanguageCategories SupportedCategories { get; }
    protected RegexBaseLanguage(string name);
    protected RegexBaseLanguage(string name, string presentableName);
    [CompilerGeneratedAttribute]
public static RegexBaseLanguage get_Instance();
    [CompilerGeneratedAttribute]
private static void set_Instance(RegexBaseLanguage value);
    public virtual PsiLanguageCategories get_SupportedCategories();
}
public interface JetBrains.ReSharper.Psi.RegExp.BaseLanguage.Tree.IRegexAnchor {
}
public interface JetBrains.ReSharper.Psi.RegExp.BaseLanguage.Tree.IRegexClass {
    public ITokenNode LBracket { get; }
    public ITokenNode RBracket { get; }
    public ITokenNode Carot { get; }
    public abstract virtual ITokenNode get_LBracket();
    public abstract virtual ITokenNode get_RBracket();
    public abstract virtual ITokenNode get_Carot();
}
public interface JetBrains.ReSharper.Psi.RegExp.BaseLanguage.Tree.IRegexClassChildWithDash {
    public ITokenNode Dash { get; }
    public abstract virtual ITokenNode get_Dash();
}
public interface JetBrains.ReSharper.Psi.RegExp.BaseLanguage.Tree.IRegexContainer {
}
public interface JetBrains.ReSharper.Psi.RegExp.BaseLanguage.Tree.IRegexDisjunction {
}
public interface JetBrains.ReSharper.Psi.RegExp.BaseLanguage.Tree.IRegexDisjunctionOwner {
    public TreeNodeCollection`1<ITokenNode> Pipes { get; }
    public TreeNodeEnumerable`1<ITokenNode> PipesEnumerable { get; }
    public abstract virtual TreeNodeCollection`1<ITokenNode> get_Pipes();
    public abstract virtual TreeNodeEnumerable`1<ITokenNode> get_PipesEnumerable();
}
public interface JetBrains.ReSharper.Psi.RegExp.BaseLanguage.Tree.IRegexEscape {
}
public interface JetBrains.ReSharper.Psi.RegExp.BaseLanguage.Tree.IRegexFlags {
}
public interface JetBrains.ReSharper.Psi.RegExp.BaseLanguage.Tree.IRegexGroupName {
    public ITokenNode Dash { get; }
    public ITokenNode Gt { get; }
    public ITokenNode Lt { get; }
    public abstract virtual ITokenNode get_Dash();
    public abstract virtual ITokenNode get_Gt();
    public abstract virtual ITokenNode get_Lt();
}
public interface JetBrains.ReSharper.Psi.RegExp.BaseLanguage.Tree.IRegexInvalidCharacter {
}
public interface JetBrains.ReSharper.Psi.RegExp.BaseLanguage.Tree.IRegexNodeWithQuestion {
    public ITokenNode Question { get; }
    public abstract virtual ITokenNode get_Question();
}
public interface JetBrains.ReSharper.Psi.RegExp.BaseLanguage.Tree.IRegexParenthesesOwner {
    public ITokenNode LParenth { get; }
    public ITokenNode RParenth { get; }
    public IEnumerable`1<ITreeNode> MiscSpecialNodes { get; }
    public abstract virtual ITokenNode get_LParenth();
    public abstract virtual ITokenNode get_RParenth();
    public abstract virtual IEnumerable`1<ITreeNode> get_MiscSpecialNodes();
}
public interface JetBrains.ReSharper.Psi.RegExp.BaseLanguage.Tree.IRegexParenthesizedGroup {
}
public interface JetBrains.ReSharper.Psi.RegExp.BaseLanguage.Tree.IRegexQuantifiableExpression {
    public IRegexQuantifierOwner Owner { get; }
    public IRegexQuantifier Quantifier { get; }
    public abstract virtual IRegexQuantifierOwner get_Owner();
    public abstract virtual IRegexQuantifier get_Quantifier();
}
public interface JetBrains.ReSharper.Psi.RegExp.BaseLanguage.Tree.IRegexQuantifier {
}
public interface JetBrains.ReSharper.Psi.RegExp.BaseLanguage.Tree.IRegexQuantifierOwner {
}
public interface JetBrains.ReSharper.Psi.RegExp.BaseLanguage.Tree.IRegexRangeQuantifier {
    public ITokenNode LBrace { get; }
    public ITokenNode RBrace { get; }
    public abstract virtual ITokenNode get_LBrace();
    public abstract virtual ITokenNode get_RBrace();
}
public interface JetBrains.ReSharper.Psi.RegExp.BaseLanguage.Tree.IRegexSpecialSymbol {
}
public interface JetBrains.ReSharper.Psi.RegExp.BaseLanguage.Tree.IRegexTreeNode {
}
public interface JetBrains.ReSharper.Psi.RegExp.BaseLanguage.Tree.IWebRegexEscape {
}
[LanguageDefinitionAttribute("CLR_REGULAR_EXPRESSION")]
public class JetBrains.ReSharper.Psi.RegExp.ClrRegex.ClrRegexLanguage : RegexBaseLanguage {
    public static string Name;
    [CompilerGeneratedAttribute]
private static ClrRegexLanguage <Instance>k__BackingField;
    [CanBeNullAttribute]
[UsedImplicitlyAttribute]
public static ClrRegexLanguage Instance { get; private set; }
    protected ClrRegexLanguage(string name);
    protected ClrRegexLanguage(string name, string presentableName);
    [CompilerGeneratedAttribute]
public static ClrRegexLanguage get_Instance();
    [CompilerGeneratedAttribute]
private static void set_Instance(ClrRegexLanguage value);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.RegExp.ClrRegex.ClrRegexLanguage", "16")]
public class JetBrains.ReSharper.Psi.RegExp.ClrRegex.ClrRegexLanguageService : LanguageService {
    public bool IsCaseSensitive { get; }
    public ILanguageCacheProvider CacheProvider { get; }
    public bool SupportTypeMemberCache { get; }
    public ITypePresenter TypePresenter { get; }
    public ClrRegexLanguageService(ClrRegexLanguage language, IConstantValueService constantValueService);
    public virtual bool get_IsCaseSensitive();
    public virtual ILanguageCacheProvider get_CacheProvider();
    public virtual bool get_SupportTypeMemberCache();
    public virtual ITypePresenter get_TypePresenter();
    public virtual ILexerFactory GetPrimaryLexerFactory();
    public virtual ILexer CreateFilteringLexer(ILexer lexer);
    public virtual bool IsValidName(DeclaredElementType elementType, string name);
    public virtual IParser CreateParser(ILexer lexer, IPsiModule module, IPsiSourceFile sourceFile);
    public virtual IEnumerable`1<ITypeDeclaration> FindTypeDeclarations(IFile file);
}
internal class JetBrains.ReSharper.Psi.RegExp.ClrRegex.ClrRegexLexerFactory : object {
    public sealed virtual ILexer CreateLexer(IBuffer buffer);
}
public class JetBrains.ReSharper.Psi.RegExp.ClrRegex.CSharpRegExpBuffer : InjectedLanguageBufferWrapper {
    private CSharpLiteralType myLiteralType;
    private ClrRegexLexerOptions myOptions;
    public CSharpLiteralType LiteralType { get; }
    public ClrRegexLexerOptions Options { get; }
    public CSharpRegExpBuffer(IBuffer originalBuffer, CSharpLiteralType literalType, ClrRegexLexerOptions options);
    public CSharpLiteralType get_LiteralType();
    public ClrRegexLexerOptions get_Options();
}
internal abstract class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Gen.ClrRegexParserGenerated : GeneratedParserBase`1<ILexer> {
    protected ParsingContext myCurrentContext;
    protected bool IsInFollow(TokenNodeType tokenType);
    protected virtual TreeElement Match(TokenNodeType tokenType);
    protected void Skip(CompositeElement parent);
    protected virtual void SkipErrorToken(CompositeElement parent);
    public virtual TreeElement ParseClrConcatenationRegularExpression();
    protected virtual CompositeElement HandleErrorInClrConcatenationRegularExpression(CompositeElement result, SyntaxError error);
    public abstract virtual TreeElement ParseClrQuantifiableRegularExpression();
    protected virtual TreeElement ParseClrQuantifiableRegularExpressionInternal();
    protected virtual CompositeElement HandleErrorInClrQuantifiableRegularExpression(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseClrRegexAlternationGroup();
    protected virtual CompositeElement HandleErrorInClrRegexAlternationGroup(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseClrRegexAnchor();
    protected virtual CompositeElement HandleErrorInClrRegexAnchor(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseClrRegexBorderAnchor();
    protected virtual CompositeElement HandleErrorInClrRegexBorderAnchor(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseClrRegexBracketCharacter();
    protected virtual CompositeElement HandleErrorInClrRegexBracketCharacter(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseClrRegexCharacter();
    protected virtual CompositeElement HandleErrorInClrRegexCharacter(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseClrRegexDotCharacter();
    protected virtual CompositeElement HandleErrorInClrRegexDotCharacter(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseClrRegexEndAnchor();
    protected virtual CompositeElement HandleErrorInClrRegexEndAnchor(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseClrRegexEscapeCharacter();
    protected virtual CompositeElement HandleErrorInClrRegexEscapeCharacter(CompositeElement result, SyntaxError error);
    public abstract virtual TreeElement ParseClrRegexGroup();
    protected virtual TreeElement ParseClrRegexGroupInternal();
    public virtual TreeElement ParseClrRegexGroupName();
    protected virtual CompositeElement HandleErrorInClrRegexGroupName(CompositeElement result, SyntaxError error);
    public virtual void ParseClrRegexGroupNameValue(CompositeElement result);
    protected virtual CompositeElement HandleErrorInClrRegexGroupNameValue(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseClrRegexGroupPrefix();
    protected virtual CompositeElement HandleErrorInClrRegexGroupPrefix(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseClrRegexInvalidCharacter();
    protected virtual CompositeElement HandleErrorInClrRegexInvalidCharacter(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseClrRegexName();
    public virtual TreeElement ParseClrRegexNamedBackreference();
    protected virtual CompositeElement HandleErrorInClrRegexNamedBackreference(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseClrRegexNamedBlock();
    protected virtual CompositeElement HandleErrorInClrRegexNamedBlock(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseClrRegexNamedBlockSuffix();
    public virtual TreeElement ParseClrRegexNamedGroup();
    protected virtual CompositeElement HandleErrorInClrRegexNamedGroup(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseClrRegexNestedSet();
    protected virtual CompositeElement HandleErrorInClrRegexNestedSet(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseClrRegexNumber();
    public virtual TreeElement ParseClrRegexNumericQuantifier();
    protected virtual CompositeElement HandleErrorInClrRegexNumericQuantifier(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseClrRegexOptionGroup();
    protected virtual CompositeElement HandleErrorInClrRegexOptionGroup(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseClrRegexPrefixGroup();
    protected virtual CompositeElement HandleErrorInClrRegexPrefixGroup(CompositeElement result, SyntaxError error);
    public abstract virtual TreeElement ParseClrRegexQuantifier();
    protected virtual TreeElement ParseClrRegexQuantifierInternal();
    protected virtual CompositeElement HandleErrorInClrRegexQuantifier(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseClrRegexQuantifierOwner();
    protected virtual CompositeElement HandleErrorInClrRegexQuantifierOwner(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseClrRegexRegularCharacter();
    protected virtual CompositeElement HandleErrorInClrRegexRegularCharacter(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseClrRegexSet();
    protected virtual CompositeElement HandleErrorInClrRegexSet(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseClrRegexSetBody();
    protected virtual CompositeElement HandleErrorInClrRegexSetBody(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseClrRegexSetBodyCharacter();
    protected virtual CompositeElement HandleErrorInClrRegexSetBodyCharacter(CompositeElement result, SyntaxError error);
    public abstract virtual TreeElement ParseClrRegexSetBodyItem();
    protected virtual TreeElement ParseClrRegexSetBodyItemInternal();
    protected virtual CompositeElement HandleErrorInClrRegexSetBodyItem(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseClrRegexSetCharacter();
    protected virtual CompositeElement HandleErrorInClrRegexSetCharacter(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseClrRegexSetRange();
    protected virtual CompositeElement HandleErrorInClrRegexSetRange(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseClrRegexSetRangeItem();
    public virtual TreeElement ParseClrRegexSimpleGroup();
    protected virtual CompositeElement HandleErrorInClrRegexSimpleGroup(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseClrRegexStartAnchor();
    protected virtual CompositeElement HandleErrorInClrRegexStartAnchor(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseClrRegexSymbolCharacter();
    protected virtual CompositeElement HandleErrorInClrRegexSymbolCharacter(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseClrRegularExpression();
    protected virtual CompositeElement HandleErrorInClrRegularExpression(CompositeElement result, SyntaxError error);
    public virtual TreeElement ParseClrRegularExpressionFile();
    protected virtual CompositeElement HandleErrorInClrRegularExpressionFile(CompositeElement result, SyntaxError error);
    public virtual void ParseDigit(CompositeElement result);
    public virtual void ParseLetter(CompositeElement result);
}
public class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Gen.ErrorMessages : object {
    private static string ourMessage_0;
    private static string ourMessage_1;
    private static string ourMessage_2;
    private static string ourMessage_3;
    private static string ourMessage_4;
    private static string ourMessage_5;
    private static string ourMessage_6;
    private static string ourMessage_7;
    private static string ourMessage_8;
    private static string ourMessage_9;
    private static string ourMessage_10;
    private static string ourMessage_11;
    private static string ourMessage_12;
    private static string ourMessage_13;
    private static string ourMessage_14;
    private static string ourMessage_15;
    private static string ourMessage_16;
    private static string ourMessage_17;
    private static string ourMessage_18;
    private static string ourMessage_19;
    private static string ourMessage_20;
    private static string ourMessage_21;
    private static string ourMessage_22;
    private static string ourMessage_23;
    private static string ourMessage_24;
    private static string ourMessage_25;
    private static string ourMessage_26;
    private static string ourMessage_27;
    private static string ourMessage_28;
    private static string ourMessage_29;
    private static string ourMessage_30;
    private static string ourMessage_31;
    private static string ourMessage_32;
    private static string ourMessage_33;
    private static string ourMessage_34;
    private static string ourMessage_35;
    private static string ourMessage_36;
    private static string ourMessage_37;
    private static string ourMessage_38;
    private static string ourMessage_39;
    private static string ourMessage_40;
    private static string ourMessage_41;
    private static string ourMessage_42;
    private static string ourMessage_43;
    private static string ourMessage_44;
    private static string ourMessage_45;
    private static string ourMessage_46;
    private static string ourMessage_47;
    private static string ourMessage_48;
    private static string ourMessage_49;
    private static string ourMessage_50;
    private static string ourMessage_51;
    private static string ourMessage_52;
    private static string ourMessage_53;
    private static string ourMessage_54;
    private static string ourMessage_55;
    private static string ourMessage_56;
    private static string ourMessage_57;
    private static string ourMessage_58;
    private static string ourMessage_59;
    private static string ourMessage_60;
    public static string GetErrorMessage0();
    public static string GetErrorMessage1();
    public static string GetErrorMessage2();
    public static string GetErrorMessage3();
    public static string GetErrorMessage4();
    public static string GetErrorMessage5();
    public static string GetErrorMessage6();
    public static string GetErrorMessage7();
    public static string GetErrorMessage8();
    public static string GetErrorMessage9();
    public static string GetErrorMessage10();
    public static string GetErrorMessage11();
    public static string GetErrorMessage12();
    public static string GetErrorMessage13();
    public static string GetErrorMessage14();
    public static string GetErrorMessage15();
    public static string GetErrorMessage16();
    public static string GetErrorMessage17();
    public static string GetErrorMessage18();
    public static string GetErrorMessage19();
    public static string GetErrorMessage20();
    public static string GetErrorMessage21();
    public static string GetErrorMessage22();
    public static string GetErrorMessage23();
    public static string GetErrorMessage24();
    public static string GetErrorMessage25();
    public static string GetErrorMessage26();
    public static string GetErrorMessage27();
    public static string GetErrorMessage28();
    public static string GetErrorMessage29();
    public static string GetErrorMessage30();
    public static string GetErrorMessage31();
    public static string GetErrorMessage32();
    public static string GetErrorMessage33();
    public static string GetErrorMessage34();
    public static string GetErrorMessage35();
    public static string GetErrorMessage36();
    public static string GetErrorMessage37();
    public static string GetErrorMessage38();
    public static string GetErrorMessage39();
    public static string GetErrorMessage40();
    public static string GetErrorMessage41();
    public static string GetErrorMessage42();
    public static string GetErrorMessage43();
    public static string GetErrorMessage44();
    public static string GetErrorMessage45();
    public static string GetErrorMessage46();
    public static string GetErrorMessage47();
    public static string GetErrorMessage48();
    public static string GetErrorMessage49();
    public static string GetErrorMessage50();
    public static string GetErrorMessage51();
    public static string GetErrorMessage52();
    public static string GetErrorMessage53();
    public static string GetErrorMessage54();
    public static string GetErrorMessage55();
    public static string GetErrorMessage56();
    public static string GetErrorMessage57();
    public static string GetErrorMessage58();
    public static string GetErrorMessage59();
    public static string GetErrorMessage60();
}
public static class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Gen.TokenBitsets : object {
    public static NodeTypeSet TokenBitset_0;
    public static NodeTypeSet TokenBitset_1;
    public static NodeTypeSet TokenBitset_2;
    public static NodeTypeSet TokenBitset_3;
    public static NodeTypeSet TokenBitset_4;
    public static NodeTypeSet TokenBitset_5;
    public static NodeTypeSet TokenBitset_6;
    public static NodeTypeSet TokenBitset_7;
    public static NodeTypeSet TokenBitset_8;
    public static NodeTypeSet TokenBitset_9;
    public static NodeTypeSet TokenBitset_10;
    public static NodeTypeSet TokenBitset_11;
    public static NodeTypeSet TokenBitset_12;
    public static NodeTypeSet TokenBitset_13;
    public static NodeTypeSet TokenBitset_14;
    public static NodeTypeSet ElementBitset_0;
    private static TokenBitsets();
}
public class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ChildRole : object {
    public static short REGEXP_NONE;
    public static short REGEXP_EXPRESSION;
    public static short REGEXP_NAME;
    public static short REGEXP_SECONDARYNAME;
    public static short REGEXP_NUMBER;
    public static short REGEXP_SECONDARYNUMBER;
    public static short REGEXP_BODY;
    public static short REGEXP_LPARENTH;
    public static short REGEXP_RPARENTH;
    public static short REGEXP_LBRACE;
    public static short REGEXP_RBRACE;
    public static short REGEXP_LBRACKET;
    public static short REGEXP_RBRACKET;
    public static short REGEXP_LT;
    public static short REGEXP_GT;
    public static short REGEXP_ALTLPARENTH;
    public static short REGEXP_ALTRPARENTH;
    public static short REGEXP_PREFIX;
    public static short REGEXP_PREFIX2;
    public static short REGEXP_OPTION;
    public static short REGEXP_RANGE_MIN;
    public static short REGEXP_RANGE_MAX;
    public static short REGEXP_QUANTIFIER;
    public static short REGEXP_QUANTIFIER_OWNER;
    public static short REGEXP_START_ANCHOR;
    public static short REGEXP_END_ANCHOR;
    public static short REGEXP_NUMERIC;
    public static short REGEXP_PIPE;
    public static short REGEXP_DASH;
    public static short REGEXP_STAR;
    public static short REGEXP_PLUS;
    public static short REGEXP_QUESTION;
    public static short REGEXP_QUESTION2;
    public static short REGEXP_EQUAL;
    public static short REGEXP_EQUAL2;
    public static short REGEXP_EXCLAMATION;
    public static short REGEXP_EXCLAMATION2;
    public static short REGEXP_COLON;
    public static short REGEXP_CAROT;
    public static short REGEXP_DOLLAR;
    public static short REGEXP_COMMA;
}
internal class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ClrConcatenationRegularExpression : ClrRegexCompositeElement {
    public static short REGEXP_EXPRESSION;
    public NodeType NodeType { get; }
    public TreeNodeCollection`1<IClrQuantifiableRegularExpression> QuantifiableRegularExpressions { get; }
    public TreeNodeEnumerable`1<IClrQuantifiableRegularExpression> QuantifiableRegularExpressionsEnumerable { get; }
    public virtual NodeType get_NodeType();
    public sealed virtual void Accept(TreeNodeVisitor visitor);
    public sealed virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public sealed virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual TreeNodeCollection`1<IClrQuantifiableRegularExpression> get_QuantifiableRegularExpressions();
    public virtual TreeNodeEnumerable`1<IClrQuantifiableRegularExpression> get_QuantifiableRegularExpressionsEnumerable();
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ClrQuantifiableRegularExpression : ClrRegexCompositeElement {
    public static short REGEXP_QUANTIFIER_OWNER;
    public static short REGEXP_QUANTIFIER;
    public NodeType NodeType { get; }
    public IClrRegexQuantifierOwner Owner { get; }
    public IClrRegexQuantifier Quantifier { get; }
    private IRegexQuantifierOwner JetBrains.ReSharper.Psi.RegExp.BaseLanguage.Tree.IRegexQuantifiableExpression.Owner { get; }
    private IRegexQuantifier JetBrains.ReSharper.Psi.RegExp.BaseLanguage.Tree.IRegexQuantifiableExpression.Quantifier { get; }
    public virtual NodeType get_NodeType();
    public sealed virtual void Accept(TreeNodeVisitor visitor);
    public sealed virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public sealed virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual IClrRegexQuantifierOwner get_Owner();
    public virtual IClrRegexQuantifier get_Quantifier();
    public virtual IClrRegexQuantifierOwner SetOwner(IClrRegexQuantifierOwner param);
    public virtual IClrRegexQuantifier SetQuantifier(IClrRegexQuantifier param);
    public virtual string ToString();
    private sealed virtual override IRegexQuantifierOwner JetBrains.ReSharper.Psi.RegExp.BaseLanguage.Tree.IRegexQuantifiableExpression.get_Owner();
    private sealed virtual override IRegexQuantifier JetBrains.ReSharper.Psi.RegExp.BaseLanguage.Tree.IRegexQuantifiableExpression.get_Quantifier();
}
internal class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ClrRegexAlternationGroup : ClrRegexCompositeElement {
    public static short REGEXP_LPARENTH;
    public static short REGEXP_QUESTION;
    public static short REGEXP_ALTLPARENTH;
    public static short REGEXP_QUESTION2;
    public static short REGEXP_PREFIX;
    public static short REGEXP_ALTRPARENTH;
    public static short REGEXP_PIPE;
    public static short REGEXP_RPARENTH;
    public NodeType NodeType { get; }
    public ITokenNode AltLParenth { get; }
    public ITokenNode AltRParenth { get; }
    public ITokenNode LParenth { get; }
    public ITokenNode Pipe { get; }
    public IClrRegexGroupPrefix Prefix { get; }
    public ITokenNode PrefixQuestionSign { get; }
    public ITokenNode QuestionSign { get; }
    public ITokenNode RParenth { get; }
    public IEnumerable`1<ITreeNode> MiscSpecialNodes { get; }
    public virtual NodeType get_NodeType();
    public sealed virtual void Accept(TreeNodeVisitor visitor);
    public sealed virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public sealed virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_AltLParenth();
    public virtual ITokenNode get_AltRParenth();
    public virtual ITokenNode get_LParenth();
    public virtual ITokenNode get_Pipe();
    public virtual IClrRegexGroupPrefix get_Prefix();
    public virtual ITokenNode get_PrefixQuestionSign();
    public virtual ITokenNode get_QuestionSign();
    public virtual ITokenNode get_RParenth();
    public virtual IClrRegexGroupPrefix SetPrefix(IClrRegexGroupPrefix param);
    public virtual string ToString();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ClrRegexAlternationGroup/<get_MiscSpecialNodes>d__34")]
public sealed virtual IEnumerable`1<ITreeNode> get_MiscSpecialNodes();
}
internal class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ClrRegexBorderAnchor : ClrRegexCompositeElement {
    public NodeType NodeType { get; }
    public virtual NodeType get_NodeType();
    public sealed virtual void Accept(TreeNodeVisitor visitor);
    public sealed virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public sealed virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ClrRegexBracketCharacter : ClrRegexCompositeElement {
    public NodeType NodeType { get; }
    public virtual NodeType get_NodeType();
    public sealed virtual void Accept(TreeNodeVisitor visitor);
    public sealed virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public sealed virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual string ToString();
}
public abstract class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ClrRegexCompositeElement : CompositeElement {
    public PsiLanguageType Language { get; }
    public virtual PsiLanguageType get_Language();
}
public abstract class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ClrRegexCompositeNodeType : CompositeNodeType {
    protected ClrRegexCompositeNodeType(string s, int index);
}
internal class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ClrRegexDotCharacter : ClrRegexCompositeElement {
    public NodeType NodeType { get; }
    public virtual NodeType get_NodeType();
    public sealed virtual void Accept(TreeNodeVisitor visitor);
    public sealed virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public sealed virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ClrRegexEndAnchor : ClrRegexCompositeElement {
    public NodeType NodeType { get; }
    public virtual NodeType get_NodeType();
    public sealed virtual void Accept(TreeNodeVisitor visitor);
    public sealed virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public sealed virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ClrRegexEscapeCharacter : ClrRegexCompositeElement {
    public NodeType NodeType { get; }
    public virtual NodeType get_NodeType();
    public sealed virtual void Accept(TreeNodeVisitor visitor);
    public sealed virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public sealed virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual string ToString();
}
public abstract class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ClrRegexFileBase : FileElementBase {
    [CompilerGeneratedAttribute]
private PsiLanguageType <Language>k__BackingField;
    public PsiLanguageType Language { get; }
    [CompilerGeneratedAttribute]
public virtual PsiLanguageType get_Language();
}
internal class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ClrRegexGroupName : ClrRegexCompositeElement {
    public static short REGEXP_LT;
    public static short REGEXP_NAME;
    public static short REGEXP_DASH;
    public static short REGEXP_SECONDARYNAME;
    public static short REGEXP_GT;
    public NodeType NodeType { get; }
    public ITokenNode Dash { get; }
    public ITokenNode Gt { get; }
    public ITokenNode Lt { get; }
    public IClrRegexName Name { get; }
    public IClrRegexName SecondaryName { get; }
    public virtual NodeType get_NodeType();
    public sealed virtual void Accept(TreeNodeVisitor visitor);
    public sealed virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public sealed virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_Dash();
    public virtual ITokenNode get_Gt();
    public virtual ITokenNode get_Lt();
    public virtual IClrRegexName get_Name();
    public virtual IClrRegexName get_SecondaryName();
    public virtual IClrRegexName SetName(IClrRegexName param);
    public virtual IClrRegexName SetSecondaryName(IClrRegexName param);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ClrRegexGroupPrefix : ClrRegexCompositeElement {
    public static short REGEXP_COLON;
    public static short REGEXP_EQUAL;
    public static short REGEXP_EXCLAMATION;
    public static short REGEXP_GT;
    public static short REGEXP_LT;
    public static short REGEXP_EQUAL2;
    public static short REGEXP_EXCLAMATION2;
    public NodeType NodeType { get; }
    public ITokenNode LongPrefix { get; }
    public ITokenNode Lt { get; }
    public ITokenNode Prefix { get; }
    public virtual NodeType get_NodeType();
    public sealed virtual void Accept(TreeNodeVisitor visitor);
    public sealed virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public sealed virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_LongPrefix();
    public virtual ITokenNode get_Lt();
    public virtual ITokenNode get_Prefix();
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ClrRegexInvalidCharacter : ClrRegexCompositeElement {
    public NodeType NodeType { get; }
    public string ErrorDescription { get; }
    public virtual NodeType get_NodeType();
    public sealed virtual void Accept(TreeNodeVisitor visitor);
    public sealed virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public sealed virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual string ToString();
    public sealed virtual string get_ErrorDescription();
}
internal class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ClrRegexName : ClrRegexCompositeElement {
    public NodeType NodeType { get; }
    public virtual NodeType get_NodeType();
    public sealed virtual void Accept(TreeNodeVisitor visitor);
    public sealed virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public sealed virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ClrRegexNamedBackreference : ClrRegexCompositeElement {
    public static short REGEXP_LT;
    public static short REGEXP_NAME;
    public static short REGEXP_GT;
    public NodeType NodeType { get; }
    public ITokenNode Gt { get; }
    public ITokenNode Lt { get; }
    public IClrRegexName Name { get; }
    public virtual NodeType get_NodeType();
    public sealed virtual void Accept(TreeNodeVisitor visitor);
    public sealed virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public sealed virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_Gt();
    public virtual ITokenNode get_Lt();
    public virtual IClrRegexName get_Name();
    public virtual IClrRegexName SetName(IClrRegexName param);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ClrRegexNamedBlock : ClrRegexCompositeElement {
    public static short REGEXP_LBRACE;
    public static short REGEXP_NAME;
    public static short REGEXP_SECONDARYNAME;
    public static short REGEXP_RBRACE;
    public NodeType NodeType { get; }
    public ITokenNode LBrace { get; }
    public IClrRegexName Name { get; }
    public ITokenNode RBrace { get; }
    public IClrRegexNamedBlockSuffix Suffix { get; }
    public virtual NodeType get_NodeType();
    public sealed virtual void Accept(TreeNodeVisitor visitor);
    public sealed virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public sealed virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_LBrace();
    public virtual IClrRegexName get_Name();
    public virtual ITokenNode get_RBrace();
    public virtual IClrRegexNamedBlockSuffix get_Suffix();
    public virtual IClrRegexName SetName(IClrRegexName param);
    public virtual IClrRegexNamedBlockSuffix SetSuffix(IClrRegexNamedBlockSuffix param);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ClrRegexNamedBlockSuffix : ClrRegexCompositeElement {
    public NodeType NodeType { get; }
    public virtual NodeType get_NodeType();
    public sealed virtual void Accept(TreeNodeVisitor visitor);
    public sealed virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public sealed virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ClrRegexNamedGroup : ClrRegexCompositeElement {
    public static short REGEXP_LPARENTH;
    public static short REGEXP_QUESTION;
    public static short REGEXP_NAME;
    public static short REGEXP_EXPRESSION;
    public static short REGEXP_RPARENTH;
    public NodeType NodeType { get; }
    public IClrRegexGroupName GroupName { get; }
    public ITokenNode LParenth { get; }
    public ITokenNode QuestionSign { get; }
    public ITokenNode RParenth { get; }
    public IClrRegularExpression RegularExpression { get; }
    public IEnumerable`1<ITreeNode> MiscSpecialNodes { get; }
    public virtual NodeType get_NodeType();
    public sealed virtual void Accept(TreeNodeVisitor visitor);
    public sealed virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public sealed virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual IClrRegexGroupName get_GroupName();
    public virtual ITokenNode get_LParenth();
    public virtual ITokenNode get_QuestionSign();
    public virtual ITokenNode get_RParenth();
    public virtual IClrRegularExpression get_RegularExpression();
    public virtual IClrRegexGroupName SetGroupName(IClrRegexGroupName param);
    public virtual IClrRegularExpression SetRegularExpression(IClrRegularExpression param);
    public virtual string ToString();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ClrRegexNamedGroup/<get_MiscSpecialNodes>d__26")]
public sealed virtual IEnumerable`1<ITreeNode> get_MiscSpecialNodes();
}
internal class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ClrRegexNestedSet : ClrRegexCompositeElement {
    public static short REGEXP_DASH;
    public static short REGEXP_BODY;
    public NodeType NodeType { get; }
    public ITokenNode Dash { get; }
    public IClrRegexSet InnerSet { get; }
    public virtual NodeType get_NodeType();
    public sealed virtual void Accept(TreeNodeVisitor visitor);
    public sealed virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public sealed virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_Dash();
    public virtual IClrRegexSet get_InnerSet();
    public virtual IClrRegexSet SetInnerSet(IClrRegexSet param);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ClrRegexNumber : ClrRegexCompositeElement {
    public NodeType NodeType { get; }
    public virtual NodeType get_NodeType();
    public sealed virtual void Accept(TreeNodeVisitor visitor);
    public sealed virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public sealed virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ClrRegexNumericQuantifier : ClrRegexCompositeElement {
    public static short REGEXP_LBRACE;
    public static short REGEXP_NUMBER;
    public static short REGEXP_COMMA;
    public static short REGEXP_SECONDARYNUMBER;
    public static short REGEXP_RBRACE;
    public NodeType NodeType { get; }
    public ITokenNode Comma { get; }
    public ITokenNode LBrace { get; }
    public IClrRegexNumber Number { get; }
    public ITokenNode RBrace { get; }
    public IClrRegexNumber SecondaryNumber { get; }
    public virtual NodeType get_NodeType();
    public sealed virtual void Accept(TreeNodeVisitor visitor);
    public sealed virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public sealed virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_Comma();
    public virtual ITokenNode get_LBrace();
    public virtual IClrRegexNumber get_Number();
    public virtual ITokenNode get_RBrace();
    public virtual IClrRegexNumber get_SecondaryNumber();
    public virtual IClrRegexNumber SetNumber(IClrRegexNumber param);
    public virtual IClrRegexNumber SetSecondaryNumber(IClrRegexNumber param);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ClrRegexOptionGroup : ClrRegexCompositeElement {
    public static short REGEXP_LPARENTH;
    public static short REGEXP_QUESTION;
    public static short REGEXP_OPTION;
    public static short REGEXP_DASH;
    public static short REGEXP_NONE;
    public static short REGEXP_EXPRESSION;
    public static short REGEXP_RPARENTH;
    public NodeType NodeType { get; }
    public ITokenNode Colon { get; }
    public ITokenNode Dash { get; }
    public ITokenNode LParenth { get; }
    public TreeNodeCollection`1<ITokenNode> Options { get; }
    public TreeNodeEnumerable`1<ITokenNode> OptionsEnumerable { get; }
    public ITokenNode QuestionSign { get; }
    public ITokenNode RParenth { get; }
    public IClrRegularExpression RegularExpression { get; }
    public IEnumerable`1<ITreeNode> MiscSpecialNodes { get; }
    public virtual NodeType get_NodeType();
    public sealed virtual void Accept(TreeNodeVisitor visitor);
    public sealed virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public sealed virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_Colon();
    public virtual ITokenNode get_Dash();
    public virtual ITokenNode get_LParenth();
    public virtual TreeNodeCollection`1<ITokenNode> get_Options();
    public virtual TreeNodeEnumerable`1<ITokenNode> get_OptionsEnumerable();
    public virtual ITokenNode get_QuestionSign();
    public virtual ITokenNode get_RParenth();
    public virtual IClrRegularExpression get_RegularExpression();
    public virtual IClrRegularExpression SetRegularExpression(IClrRegularExpression param);
    public virtual string ToString();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ClrRegexOptionGroup/<get_MiscSpecialNodes>d__33")]
public sealed virtual IEnumerable`1<ITreeNode> get_MiscSpecialNodes();
}
internal class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ClrRegexPrefixGroup : ClrRegexCompositeElement {
    public static short REGEXP_LPARENTH;
    public static short REGEXP_QUESTION;
    public static short REGEXP_PREFIX;
    public static short REGEXP_EXPRESSION;
    public static short REGEXP_RPARENTH;
    public NodeType NodeType { get; }
    public ITokenNode LParenth { get; }
    public IClrRegexGroupPrefix Prefix { get; }
    public ITokenNode QuestionSign { get; }
    public ITokenNode RParenth { get; }
    public IClrRegularExpression RegularExpression { get; }
    public IEnumerable`1<ITreeNode> MiscSpecialNodes { get; }
    public virtual NodeType get_NodeType();
    public sealed virtual void Accept(TreeNodeVisitor visitor);
    public sealed virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public sealed virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_LParenth();
    public virtual IClrRegexGroupPrefix get_Prefix();
    public virtual ITokenNode get_QuestionSign();
    public virtual ITokenNode get_RParenth();
    public virtual IClrRegularExpression get_RegularExpression();
    public virtual IClrRegexGroupPrefix SetPrefix(IClrRegexGroupPrefix param);
    public virtual IClrRegularExpression SetRegularExpression(IClrRegularExpression param);
    public virtual string ToString();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ClrRegexPrefixGroup/<get_MiscSpecialNodes>d__26")]
public sealed virtual IEnumerable`1<ITreeNode> get_MiscSpecialNodes();
}
internal class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ClrRegexQuantifier : ClrRegexCompositeElement {
    public static short REGEXP_STAR;
    public static short REGEXP_PLUS;
    public static short REGEXP_QUESTION;
    public static short REGEXP_NUMERIC;
    public static short REGEXP_NONE;
    public NodeType NodeType { get; }
    public IClrRegexNumericQuantifier Numeric { get; }
    public ITokenNode OptionalQuestion { get; }
    public ITokenNode Plus { get; }
    public ITokenNode Question { get; }
    public ITokenNode Star { get; }
    public virtual NodeType get_NodeType();
    public sealed virtual void Accept(TreeNodeVisitor visitor);
    public sealed virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public sealed virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual IClrRegexNumericQuantifier get_Numeric();
    public virtual ITokenNode get_OptionalQuestion();
    public virtual ITokenNode get_Plus();
    public virtual ITokenNode get_Question();
    public virtual ITokenNode get_Star();
    public virtual IClrRegexNumericQuantifier SetNumeric(IClrRegexNumericQuantifier param);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ClrRegexRegularCharacter : ClrRegexCompositeElement {
    public NodeType NodeType { get; }
    public virtual NodeType get_NodeType();
    public sealed virtual void Accept(TreeNodeVisitor visitor);
    public sealed virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public sealed virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ClrRegexSet : ClrRegexCompositeElement {
    public static short REGEXP_LBRACKET;
    public static short REGEXP_NONE;
    public static short REGEXP_BODY;
    public static short REGEXP_RBRACKET;
    public NodeType NodeType { get; }
    public IClrRegexSetBody Body { get; }
    public ITokenNode LBracket { get; }
    public ITokenNode NegativeMark { get; }
    public ITokenNode RBracket { get; }
    public ITokenNode Carot { get; }
    public virtual NodeType get_NodeType();
    public sealed virtual void Accept(TreeNodeVisitor visitor);
    public sealed virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public sealed virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual IClrRegexSetBody get_Body();
    public virtual ITokenNode get_LBracket();
    public virtual ITokenNode get_NegativeMark();
    public virtual ITokenNode get_RBracket();
    public virtual IClrRegexSetBody SetBody(IClrRegexSetBody param);
    public virtual string ToString();
    public sealed virtual ITokenNode get_Carot();
}
internal class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ClrRegexSetBody : ClrRegexCompositeElement {
    public NodeType NodeType { get; }
    public virtual NodeType get_NodeType();
    public sealed virtual void Accept(TreeNodeVisitor visitor);
    public sealed virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public sealed virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ClrRegexSetCharacter : ClrRegexCompositeElement {
    public NodeType NodeType { get; }
    public virtual NodeType get_NodeType();
    public sealed virtual void Accept(TreeNodeVisitor visitor);
    public sealed virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public sealed virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ClrRegexSetRange : ClrRegexCompositeElement {
    public static short REGEXP_RANGE_MIN;
    public static short REGEXP_DASH;
    public static short REGEXP_RANGE_MAX;
    public NodeType NodeType { get; }
    public ITokenNode Dash { get; }
    public IClrRegexSetRangeItem Max { get; }
    public IClrRegexSetRangeItem Min { get; }
    public virtual NodeType get_NodeType();
    public sealed virtual void Accept(TreeNodeVisitor visitor);
    public sealed virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public sealed virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_Dash();
    public virtual IClrRegexSetRangeItem get_Max();
    public virtual IClrRegexSetRangeItem get_Min();
    public virtual IClrRegexSetRangeItem SetMax(IClrRegexSetRangeItem param);
    public virtual IClrRegexSetRangeItem SetMin(IClrRegexSetRangeItem param);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ClrRegexSetRangeItem : ClrRegexCompositeElement {
    public NodeType NodeType { get; }
    public virtual NodeType get_NodeType();
    public sealed virtual void Accept(TreeNodeVisitor visitor);
    public sealed virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public sealed virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ClrRegexSimpleGroup : ClrRegexCompositeElement {
    public static short REGEXP_LPARENTH;
    public static short REGEXP_EXPRESSION;
    public static short REGEXP_RPARENTH;
    public NodeType NodeType { get; }
    public ITokenNode LParenth { get; }
    public ITokenNode RParenth { get; }
    public IClrRegularExpression RegularExpression { get; }
    public IEnumerable`1<ITreeNode> MiscSpecialNodes { get; }
    public virtual NodeType get_NodeType();
    public sealed virtual void Accept(TreeNodeVisitor visitor);
    public sealed virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public sealed virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual ITokenNode get_LParenth();
    public virtual ITokenNode get_RParenth();
    public virtual IClrRegularExpression get_RegularExpression();
    public virtual IClrRegularExpression SetRegularExpression(IClrRegularExpression param);
    public virtual string ToString();
    public sealed virtual IEnumerable`1<ITreeNode> get_MiscSpecialNodes();
}
internal class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ClrRegexStartAnchor : ClrRegexCompositeElement {
    public NodeType NodeType { get; }
    public virtual NodeType get_NodeType();
    public sealed virtual void Accept(TreeNodeVisitor visitor);
    public sealed virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public sealed virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ClrRegexSymbolCharacter : ClrRegexCompositeElement {
    public NodeType NodeType { get; }
    public virtual NodeType get_NodeType();
    public sealed virtual void Accept(TreeNodeVisitor visitor);
    public sealed virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public sealed virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ClrRegularExpression : ClrRegexCompositeElement {
    public static short REGEXP_EXPRESSION;
    public static short REGEXP_PIPE;
    public NodeType NodeType { get; }
    public TreeNodeCollection`1<IClrConcatenationRegularExpression> ConcatenationRegularExpressions { get; }
    public TreeNodeEnumerable`1<IClrConcatenationRegularExpression> ConcatenationRegularExpressionsEnumerable { get; }
    public TreeNodeCollection`1<ITokenNode> Pipes { get; }
    public TreeNodeEnumerable`1<ITokenNode> PipesEnumerable { get; }
    public virtual NodeType get_NodeType();
    public sealed virtual void Accept(TreeNodeVisitor visitor);
    public sealed virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public sealed virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual TreeNodeCollection`1<IClrConcatenationRegularExpression> get_ConcatenationRegularExpressions();
    public virtual TreeNodeEnumerable`1<IClrConcatenationRegularExpression> get_ConcatenationRegularExpressionsEnumerable();
    public virtual TreeNodeCollection`1<ITokenNode> get_Pipes();
    public virtual TreeNodeEnumerable`1<ITokenNode> get_PipesEnumerable();
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ClrRegularExpressionFile : ClrRegexFileBase {
    public static short REGEXP_EXPRESSION;
    public NodeType NodeType { get; }
    public IClrRegularExpression RegularExpression { get; }
    public virtual NodeType get_NodeType();
    public sealed virtual void Accept(TreeNodeVisitor visitor);
    public sealed virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public sealed virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public virtual IClrRegularExpression get_RegularExpression();
    public virtual IClrRegularExpression SetRegularExpression(IClrRegularExpression param);
    public virtual string ToString();
}
public static class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ElementBitsets : object {
    public static NodeTypeSet CLR_REGEX_ANCHOR_BIT_SET;
    public static NodeTypeSet CLR_REGEX_CHARACTER_BIT_SET;
    public static NodeTypeSet CLR_REGEX_GROUP_BIT_SET;
    public static NodeTypeSet CLR_REGEX_QUANTIFIER_OWNER_BIT_SET;
    public static NodeTypeSet CLR_REGEX_SET_BODY_CHARACTER_BIT_SET;
    public static NodeTypeSet CLR_REGEX_SET_BODY_ITEM_BIT_SET;
    private static ElementBitsets();
}
public abstract class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.ElementType : object {
    public static CompositeNodeType ERROR_ELEMENT;
    public static int ERROR_ELEMENT_NODE_TYPE_INDEX;
    public static CompositeNodeType CLR_CONCATENATION_REGULAR_EXPRESSION;
    public static int CLR_CONCATENATION_REGULAR_EXPRESSION_NODE_TYPE_INDEX;
    public static CompositeNodeType CLR_QUANTIFIABLE_REGULAR_EXPRESSION;
    public static int CLR_QUANTIFIABLE_REGULAR_EXPRESSION_NODE_TYPE_INDEX;
    public static CompositeNodeType CLR_REGEX_ALTERNATION_GROUP;
    public static int CLR_REGEX_ALTERNATION_GROUP_NODE_TYPE_INDEX;
    public static CompositeNodeType CLR_REGEX_BORDER_ANCHOR;
    public static int CLR_REGEX_BORDER_ANCHOR_NODE_TYPE_INDEX;
    public static CompositeNodeType CLR_REGEX_BRACKET_CHARACTER;
    public static int CLR_REGEX_BRACKET_CHARACTER_NODE_TYPE_INDEX;
    public static CompositeNodeType CLR_REGEX_DOT_CHARACTER;
    public static int CLR_REGEX_DOT_CHARACTER_NODE_TYPE_INDEX;
    public static CompositeNodeType CLR_REGEX_END_ANCHOR;
    public static int CLR_REGEX_END_ANCHOR_NODE_TYPE_INDEX;
    public static CompositeNodeType CLR_REGEX_ESCAPE_CHARACTER;
    public static int CLR_REGEX_ESCAPE_CHARACTER_NODE_TYPE_INDEX;
    public static CompositeNodeType CLR_REGEX_GROUP_NAME;
    public static int CLR_REGEX_GROUP_NAME_NODE_TYPE_INDEX;
    public static CompositeNodeType CLR_REGEX_GROUP_PREFIX;
    public static int CLR_REGEX_GROUP_PREFIX_NODE_TYPE_INDEX;
    public static CompositeNodeType CLR_REGEX_INVALID_CHARACTER;
    public static int CLR_REGEX_INVALID_CHARACTER_NODE_TYPE_INDEX;
    public static CompositeNodeType CLR_REGEX_NAME;
    public static int CLR_REGEX_NAME_NODE_TYPE_INDEX;
    public static CompositeNodeType CLR_REGEX_NAMED_BACKREFERENCE;
    public static int CLR_REGEX_NAMED_BACKREFERENCE_NODE_TYPE_INDEX;
    public static CompositeNodeType CLR_REGEX_NAMED_BLOCK;
    public static int CLR_REGEX_NAMED_BLOCK_NODE_TYPE_INDEX;
    public static CompositeNodeType CLR_REGEX_NAMED_BLOCK_SUFFIX;
    public static int CLR_REGEX_NAMED_BLOCK_SUFFIX_NODE_TYPE_INDEX;
    public static CompositeNodeType CLR_REGEX_NAMED_GROUP;
    public static int CLR_REGEX_NAMED_GROUP_NODE_TYPE_INDEX;
    public static CompositeNodeType CLR_REGEX_NESTED_SET;
    public static int CLR_REGEX_NESTED_SET_NODE_TYPE_INDEX;
    public static CompositeNodeType CLR_REGEX_NUMBER;
    public static int CLR_REGEX_NUMBER_NODE_TYPE_INDEX;
    public static CompositeNodeType CLR_REGEX_NUMERIC_QUANTIFIER;
    public static int CLR_REGEX_NUMERIC_QUANTIFIER_NODE_TYPE_INDEX;
    public static CompositeNodeType CLR_REGEX_OPTION_GROUP;
    public static int CLR_REGEX_OPTION_GROUP_NODE_TYPE_INDEX;
    public static CompositeNodeType CLR_REGEX_PREFIX_GROUP;
    public static int CLR_REGEX_PREFIX_GROUP_NODE_TYPE_INDEX;
    public static CompositeNodeType CLR_REGEX_QUANTIFIER;
    public static int CLR_REGEX_QUANTIFIER_NODE_TYPE_INDEX;
    public static CompositeNodeType CLR_REGEX_REGULAR_CHARACTER;
    public static int CLR_REGEX_REGULAR_CHARACTER_NODE_TYPE_INDEX;
    public static CompositeNodeType CLR_REGEX_SET;
    public static int CLR_REGEX_SET_NODE_TYPE_INDEX;
    public static CompositeNodeType CLR_REGEX_SET_BODY;
    public static int CLR_REGEX_SET_BODY_NODE_TYPE_INDEX;
    public static CompositeNodeType CLR_REGEX_SET_CHARACTER;
    public static int CLR_REGEX_SET_CHARACTER_NODE_TYPE_INDEX;
    public static CompositeNodeType CLR_REGEX_SET_RANGE;
    public static int CLR_REGEX_SET_RANGE_NODE_TYPE_INDEX;
    public static CompositeNodeType CLR_REGEX_SET_RANGE_ITEM;
    public static int CLR_REGEX_SET_RANGE_ITEM_NODE_TYPE_INDEX;
    public static CompositeNodeType CLR_REGEX_SIMPLE_GROUP;
    public static int CLR_REGEX_SIMPLE_GROUP_NODE_TYPE_INDEX;
    public static CompositeNodeType CLR_REGEX_START_ANCHOR;
    public static int CLR_REGEX_START_ANCHOR_NODE_TYPE_INDEX;
    public static CompositeNodeType CLR_REGEX_SYMBOL_CHARACTER;
    public static int CLR_REGEX_SYMBOL_CHARACTER_NODE_TYPE_INDEX;
    public static CompositeNodeType CLR_REGULAR_EXPRESSION;
    public static int CLR_REGULAR_EXPRESSION_NODE_TYPE_INDEX;
    public static CompositeNodeType CLR_REGULAR_EXPRESSION_FILE;
    public static int CLR_REGULAR_EXPRESSION_FILE_NODE_TYPE_INDEX;
    private static ElementType();
}
public class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Impl.Tree.PsiGeneratedGetterTestUtil : PsiGetterTestUtil {
    internal static void TestClrConcatenationRegularExpression(int level, IClrConcatenationRegularExpression param, string caller);
    internal static void TestClrQuantifiableRegularExpression(int level, IClrQuantifiableRegularExpression param, string caller);
    internal static void TestClrRegexAlternationGroup(int level, IClrRegexAlternationGroup param, string caller);
    internal static void TestClrRegexAnchor(int level, IClrRegexAnchor param, string caller);
    internal static void TestClrRegexBorderAnchor(int level, IClrRegexBorderAnchor param, string caller);
    internal static void TestClrRegexBracketCharacter(int level, IClrRegexBracketCharacter param, string caller);
    internal static void TestClrRegexCharacter(int level, IClrRegexCharacter param, string caller);
    internal static void TestClrRegexDotCharacter(int level, IClrRegexDotCharacter param, string caller);
    internal static void TestClrRegexEndAnchor(int level, IClrRegexEndAnchor param, string caller);
    internal static void TestClrRegexEscapeCharacter(int level, IClrRegexEscapeCharacter param, string caller);
    internal static void TestClrRegexGroup(int level, IClrRegexGroup param, string caller);
    internal static void TestClrRegexGroupName(int level, IClrRegexGroupName param, string caller);
    internal static void TestClrRegexGroupPrefix(int level, IClrRegexGroupPrefix param, string caller);
    internal static void TestClrRegexInvalidCharacter(int level, IClrRegexInvalidCharacter param, string caller);
    internal static void TestClrRegexName(int level, IClrRegexName param, string caller);
    internal static void TestClrRegexNamedBackreference(int level, IClrRegexNamedBackreference param, string caller);
    internal static void TestClrRegexNamedBlock(int level, IClrRegexNamedBlock param, string caller);
    internal static void TestClrRegexNamedBlockSuffix(int level, IClrRegexNamedBlockSuffix param, string caller);
    internal static void TestClrRegexNamedGroup(int level, IClrRegexNamedGroup param, string caller);
    internal static void TestClrRegexNestedSet(int level, IClrRegexNestedSet param, string caller);
    internal static void TestClrRegexNumber(int level, IClrRegexNumber param, string caller);
    internal static void TestClrRegexNumericQuantifier(int level, IClrRegexNumericQuantifier param, string caller);
    internal static void TestClrRegexOptionGroup(int level, IClrRegexOptionGroup param, string caller);
    internal static void TestClrRegexPrefixGroup(int level, IClrRegexPrefixGroup param, string caller);
    internal static void TestClrRegexQuantifier(int level, IClrRegexQuantifier param, string caller);
    internal static void TestClrRegexQuantifierOwner(int level, IClrRegexQuantifierOwner param, string caller);
    internal static void TestClrRegexRegularCharacter(int level, IClrRegexRegularCharacter param, string caller);
    internal static void TestClrRegexSet(int level, IClrRegexSet param, string caller);
    internal static void TestClrRegexSetBody(int level, IClrRegexSetBody param, string caller);
    internal static void TestClrRegexSetBodyCharacter(int level, IClrRegexSetBodyCharacter param, string caller);
    internal static void TestClrRegexSetBodyItem(int level, IClrRegexSetBodyItem param, string caller);
    internal static void TestClrRegexSetCharacter(int level, IClrRegexSetCharacter param, string caller);
    internal static void TestClrRegexSetRange(int level, IClrRegexSetRange param, string caller);
    internal static void TestClrRegexSetRangeItem(int level, IClrRegexSetRangeItem param, string caller);
    internal static void TestClrRegexSimpleGroup(int level, IClrRegexSimpleGroup param, string caller);
    internal static void TestClrRegexStartAnchor(int level, IClrRegexStartAnchor param, string caller);
    internal static void TestClrRegexSymbolCharacter(int level, IClrRegexSymbolCharacter param, string caller);
    internal static void TestClrRegularExpression(int level, IClrRegularExpression param, string caller);
    internal static void TestClrRegularExpressionFile(int level, IClrRegularExpressionFile param, string caller);
}
public class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexFilteringLexer : FilteringLexer {
    public ClrRegexFilteringLexer(ILexer lexer);
    protected virtual bool Skip(TokenNodeType tokenType);
}
public class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexLexer : InjectedLanguageLexerWithTranslationBase {
    private static string Border;
    public ClrRegexLexer(IBuffer originalBuffer);
    protected virtual ILexer CreateRawLexer(IBuffer originalBuffer, RangeTranslator& rangeTranslator);
}
public class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexLexerGenerated : object {
    private static int YY_F;
    private static int YY_NO_STATE;
    private static int YY_NOT_ACCEPT;
    private static int YY_START;
    private static int YY_END;
    private static int YY_NO_ANCHOR;
    private static int YY_BOL;
    private static int YY_EOF;
    private int yy_buffer_index;
    private int yy_buffer_start;
    private int yy_buffer_end;
    private IBuffer yy_buffer;
    private int yy_eof_pos;
    private bool yy_at_bol;
    private int yy_lexical_state;
    protected static int YYINITIAL;
    private static Int32[] yy_state_dtrans;
    private static int YY_E_INTERNAL;
    private static int YY_E_MATCH;
    private static String[] yy_error_string;
    private static Int32[] yy_acpt;
    private static Int32[] yy_cmap;
    private static Int32[] yy_rmap;
    private static Int32[0...,0...] yy_nxt;
    private TokenNodeType myCurrentTokenType;
    private ClrRegexLexerOptions myOptions;
    private bool myIsInSet;
    private bool myPreviousTokenIsLeftBracket;
    private bool myPreviousTokenIsCarotAfterBracket;
    private bool myHadLeftBracketInSet;
    public object CurrentPosition { get; public set; }
    public TokenNodeType TokenType { get; }
    public int TokenStart { get; }
    public int TokenEnd { get; }
    public IBuffer Buffer { get; }
    public UInt32 LexerStateEx { get; }
    public ClrRegexLexerOptions Options { get; public set; }
    public int LexemIndent { get; }
    public int EOFPos { get; }
    public ClrRegexLexerGenerated(IBuffer buffer);
    public ClrRegexLexerGenerated(IBuffer buffer, int startOffset, int endOffset);
    private static ClrRegexLexerGenerated();
    private void yybegin(int state);
    private void yy_move_end();
    private static bool yy_isnewline(char c);
    internal string yytext();
    private int yylength();
    private void yy_error(int code, bool fatal);
    public virtual TokenNodeType _locateToken();
    public sealed virtual void Start();
    public sealed virtual void Start(int startOffset, int endOffset, UInt32 state);
    public sealed virtual void Advance();
    public sealed virtual object get_CurrentPosition();
    public sealed virtual void set_CurrentPosition(object value);
    public sealed virtual TokenNodeType get_TokenType();
    public sealed virtual int get_TokenStart();
    public sealed virtual int get_TokenEnd();
    public sealed virtual IBuffer get_Buffer();
    public sealed virtual UInt32 get_LexerStateEx();
    private void LocateToken();
    private TokenNodeType MakeToken(TokenNodeType type);
    private TokenNodeType TryMakeCommentLineToken();
    private void ProcessLeftBracket();
    private void ProcessRightBracket();
    public ClrRegexLexerOptions get_Options();
    public void set_Options(ClrRegexLexerOptions value);
    public sealed virtual int get_LexemIndent();
    public sealed virtual int get_EOFPos();
    private static UInt32 Pack(int yyState, ClrRegexLexerOptions options, bool isInSet, bool previousTokenIsLeftBracket, bool previousTokenIsCarotAfterBracket, bool hadLeftBracketInSet);
}
public class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexLexerOptions : ValueType {
    public static ClrRegexLexerOptions None;
    private bool myAllowLineComments;
    public bool AllowLineComments { get; }
    public ClrRegexLexerOptions(bool allowLineComments);
    private static ClrRegexLexerOptions();
    public bool get_AllowLineComments();
}
internal class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexParser : ClrRegexParserGenerated {
    private static NodeTypeSet ourShortPrefixNodeTypes;
    private static NodeTypeSet ourLongPrefixNodeTypes;
    private static NodeTypeSet ourSetRangeItemNodeTypes;
    private static NodeTypeSet ourQuantifierNodeTypes;
    private Dictionary`2<TreeElement, LeafElementBase> myComments;
    private bool myNestedSetFlag;
    public ClrRegexParser(ILexer lexer);
    private static ClrRegexParser();
    public sealed virtual IFile ParseFile();
    public virtual TreeElement ParseClrRegexGroup();
    public virtual TreeElement ParseClrQuantifiableRegularExpression();
    public virtual TreeElement ParseClrRegexQuantifier();
    public virtual TreeElement ParseClrRegexSet();
    public virtual TreeElement ParseClrRegexSetBodyItem();
    protected virtual TreeElement CreateToken();
    private void SkipCommentTokens(LeafElementBase element);
    private void InsertCommentTokens();
}
public class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ClrRegexTokenTypes : object {
    public static int WHITESPACE_NODE_TYPE_INDEX;
    public static ClrWhitespaceNodeType WHITESPACE;
    public static int COMMENT_NODE_TYPE_INDEX;
    public static ClrCommentNodeType COMMENT;
    public static int BORDER_NODE_TYPE_INDEX;
    public static ClrBorderNodeType BORDER;
    public static TokenNodeType DIGIT;
    public static int DIGIT_NODE_TYPE_INDEX;
    public static TokenNodeType LETTER;
    public static int LETTER_NODE_TYPE_INDEX;
    public static TokenNodeType OTHER;
    public static int OTHER_NODE_TYPE_INDEX;
    public static TokenNodeType INVALID;
    public static int INVALID_NODE_TYPE_INDEX;
    public static TokenNodeType ESCAPE;
    public static int ESCAPE_NODE_TYPE_INDEX;
    public static TokenNodeType CLASS;
    public static int CLASS_NODE_TYPE_INDEX;
    public static TokenNodeType BACKREFERENCE;
    public static int BACKREFERENCE_NODE_TYPE_INDEX;
    public static TokenNodeType LETTER_OPTION;
    public static int LETTER_OPTION_NODE_TYPE_INDEX;
    public static TokenNodeType NAMED_BACKREFERENCE;
    public static int NAMED_BACKREFERENCE_NODE_TYPE_INDEX;
    public static TokenNodeType UNICODE_NAMED_BLOCK;
    public static int UNICODE_NAMED_BLOCK_NODE_TYPE_INDEX;
    public static TokenNodeType NONUNICODE_NAMED_BLOCK;
    public static int NONUNICODE_NAMED_BLOCK_NODE_TYPE_INDEX;
    public static TokenNodeType ESCAPE_LOWER_B;
    public static int ESCAPE_LOWER_B_NODE_TYPE_INDEX;
    public static TokenNodeType ESCAPE_LOWER_Z;
    public static int ESCAPE_LOWER_Z_NODE_TYPE_INDEX;
    public static TokenNodeType ESCAPE_UPPER_B;
    public static int ESCAPE_UPPER_B_NODE_TYPE_INDEX;
    public static TokenNodeType ESCAPE_UPPER_Z;
    public static int ESCAPE_UPPER_Z_NODE_TYPE_INDEX;
    public static TokenNodeType ESCAPE_UPPER_A;
    public static int ESCAPE_UPPER_A_NODE_TYPE_INDEX;
    public static TokenNodeType ESCAPE_UPPER_G;
    public static int ESCAPE_UPPER_G_NODE_TYPE_INDEX;
    public static TokenNodeType CAROT;
    public static int CAROT_NODE_TYPE_INDEX;
    public static TokenNodeType DOLLAR;
    public static int DOLLAR_NODE_TYPE_INDEX;
    public static TokenNodeType DASH;
    public static int DASH_NODE_TYPE_INDEX;
    public static TokenNodeType DOT;
    public static int DOT_NODE_TYPE_INDEX;
    public static TokenNodeType COMMA;
    public static int COMMA_NODE_TYPE_INDEX;
    public static TokenNodeType PLUS;
    public static int PLUS_NODE_TYPE_INDEX;
    public static TokenNodeType QUESTION;
    public static int QUESTION_NODE_TYPE_INDEX;
    public static TokenNodeType EXCLAMATION;
    public static int EXCLAMATION_NODE_TYPE_INDEX;
    public static TokenNodeType EQUAL;
    public static int EQUAL_NODE_TYPE_INDEX;
    public static TokenNodeType PIPE;
    public static int PIPE_NODE_TYPE_INDEX;
    public static TokenNodeType STAR;
    public static int STAR_NODE_TYPE_INDEX;
    public static TokenNodeType AMPER;
    public static int AMPER_NODE_TYPE_INDEX;
    public static TokenNodeType APOSTROPHE;
    public static int APOSTROPHE_NODE_TYPE_INDEX;
    public static TokenNodeType GRAVEACCENT;
    public static int GRAVEACCENT_NODE_TYPE_INDEX;
    public static TokenNodeType UNDERLINE;
    public static int UNDERLINE_NODE_TYPE_INDEX;
    public static TokenNodeType COLON;
    public static int COLON_NODE_TYPE_INDEX;
    public static TokenNodeType LBRACKET;
    public static int LBRACKET_NODE_TYPE_INDEX;
    public static TokenNodeType RBRACKET;
    public static int RBRACKET_NODE_TYPE_INDEX;
    public static TokenNodeType LPARENTH;
    public static int LPARENTH_NODE_TYPE_INDEX;
    public static TokenNodeType RPARENTH;
    public static int RPARENTH_NODE_TYPE_INDEX;
    public static TokenNodeType GT;
    public static int GT_NODE_TYPE_INDEX;
    public static TokenNodeType LT;
    public static int LT_NODE_TYPE_INDEX;
    public static TokenNodeType LBRACE;
    public static int LBRACE_NODE_TYPE_INDEX;
    public static TokenNodeType RBRACE;
    public static int RBRACE_NODE_TYPE_INDEX;
    private static int LAST_GENERATED_TOKEN_TYPE_INDEX;
    private static ClrRegexTokenTypes();
}
internal static class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Parsing.ParserMessages : object {
    public static string IDS_EXPECTED_SYMBOL;
    public static string IDS_EXPECTED_TWO_SYMBOLS;
    public static string IDS_UNEXPECTED_TOKEN;
    public static string IDS_LETTER;
    public static string IDS_CLR_REGEX_GROUP;
    public static string IDS_CLR_REGEX_GROUP_NAME;
    public static string IDS_CLR_REGEX_GROUP_NAME_VALUE;
    public static string IDS_CLR_REGEX_GROUP_PREFIX;
    public static string IDS_CLR_REGEX_QUANTIFIER_OWNER;
    public static string IDS_CLR_QUANTIFIABLE_REGULAR_EXPRESSION;
    public static string IDS_CLR_REGEX_SET_BODY_ITEM;
    public static string IDS_CLR_REGEX_SET_BODY_CHARACTER;
    public static string IDS_CLR_REGEX_SET_CHARACTER;
    public static string IDS_CLR_REGEX_SET_RANGE_ITEM;
    public static string IDS_CLR_REGEX_ANCHOR;
    public static string IDS_CLR_REGEX_START_ANCHOR;
    public static string IDS_CLR_REGEX_END_ANCHOR;
    public static string IDS_CLR_REGEX_BORDER_ANCHOR;
    public static string IDS_CLR_REGEX_CHARACTER;
    public static string IDS_CLR_REGEX_REGULAR_CHARACTER;
    public static string IDS_CLR_REGEX_SYMBOL_CHARACTER;
    public static string GetString(string id);
    public static string GetUnexpectedTokenMessage();
    public static string GetExpectedMessage(string expectedSymbol);
    public static string GetExpectedMessage(string firstExpectedSymbol, string secondExpectedSymbol);
}
[PsiSharedComponentAttribute]
public class JetBrains.ReSharper.Psi.RegExp.ClrRegex.RegexInjectionAttributeWatcher : object {
    public static IClrTypeName RegexPatternAttributeClrTypeName;
    public static IClrTypeName[] AllInjectionsClrNames;
    public IEnumerable`1<IClrTypeName> AttributeClrNamesToWatch { get; }
    private static RegexInjectionAttributeWatcher();
    public sealed virtual IEnumerable`1<IClrTypeName> get_AttributeClrNamesToWatch();
}
public static class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.ClrConcatenationRegularExpressionNavigator : object {
    [NullableContextAttribute("2")]
[PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IClrConcatenationRegularExpression GetByQuantifiableRegularExpression(IClrQuantifiableRegularExpression param);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.ClrQuantifiableRegularExpressionNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IClrQuantifiableRegularExpression GetByOwner(IClrRegexQuantifierOwner param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IClrQuantifiableRegularExpression GetByQuantifier(IClrRegexQuantifier param);
}
public static class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.ClrRegexAlternationGroupNavigator : object {
    [NullableContextAttribute("2")]
[PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IClrRegexAlternationGroup GetByPrefix(IClrRegexGroupPrefix param);
}
public static class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.ClrRegexAnchorNavigator : object {
}
public static class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.ClrRegexBorderAnchorNavigator : object {
}
public static class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.ClrRegexBracketCharacterNavigator : object {
}
public static class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.ClrRegexCharacterNavigator : object {
}
public static class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.ClrRegexDotCharacterNavigator : object {
}
public static class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.ClrRegexEndAnchorNavigator : object {
}
public static class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.ClrRegexEscapeCharacterNavigator : object {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.ClrRegexGroupNameNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IClrRegexGroupName GetByName(IClrRegexName param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IClrRegexGroupName GetBySecondaryName(IClrRegexName param);
}
public static class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.ClrRegexGroupNavigator : object {
}
public static class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.ClrRegexGroupPrefixNavigator : object {
}
public static class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.ClrRegexInvalidCharacterNavigator : object {
}
public static class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.ClrRegexNamedBackreferenceNavigator : object {
    [NullableContextAttribute("2")]
[PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IClrRegexNamedBackreference GetByName(IClrRegexName param);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.ClrRegexNamedBlockNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IClrRegexNamedBlock GetByName(IClrRegexName param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IClrRegexNamedBlock GetBySuffix(IClrRegexNamedBlockSuffix param);
}
public static class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.ClrRegexNamedBlockSuffixNavigator : object {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.ClrRegexNamedGroupNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IClrRegexNamedGroup GetByGroupName(IClrRegexGroupName param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IClrRegexNamedGroup GetByRegularExpression(IClrRegularExpression param);
}
public static class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.ClrRegexNameNavigator : object {
}
public static class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.ClrRegexNestedSetNavigator : object {
    [NullableContextAttribute("2")]
[PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IClrRegexNestedSet GetByInnerSet(IClrRegexSet param);
}
public static class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.ClrRegexNumberNavigator : object {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.ClrRegexNumericQuantifierNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IClrRegexNumericQuantifier GetByNumber(IClrRegexNumber param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IClrRegexNumericQuantifier GetBySecondaryNumber(IClrRegexNumber param);
}
public static class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.ClrRegexOptionGroupNavigator : object {
    [NullableContextAttribute("2")]
[PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IClrRegexOptionGroup GetByRegularExpression(IClrRegularExpression param);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.ClrRegexPrefixGroupNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IClrRegexPrefixGroup GetByPrefix(IClrRegexGroupPrefix param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IClrRegexPrefixGroup GetByRegularExpression(IClrRegularExpression param);
}
public static class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.ClrRegexQuantifierNavigator : object {
    [NullableContextAttribute("2")]
[PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IClrRegexQuantifier GetByNumeric(IClrRegexNumericQuantifier param);
}
public static class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.ClrRegexQuantifierOwnerNavigator : object {
}
public static class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.ClrRegexRegularCharacterNavigator : object {
}
public static class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.ClrRegexSetBodyCharacterNavigator : object {
}
public static class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.ClrRegexSetBodyItemNavigator : object {
}
public static class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.ClrRegexSetBodyNavigator : object {
}
public static class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.ClrRegexSetCharacterNavigator : object {
}
public static class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.ClrRegexSetNavigator : object {
    [NullableContextAttribute("2")]
[PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IClrRegexSet GetByBody(IClrRegexSetBody param);
}
public static class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.ClrRegexSetRangeItemNavigator : object {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.ClrRegexSetRangeNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IClrRegexSetRange GetByMax(IClrRegexSetRangeItem param);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IClrRegexSetRange GetByMin(IClrRegexSetRangeItem param);
}
public static class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.ClrRegexSimpleGroupNavigator : object {
    [NullableContextAttribute("2")]
[PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IClrRegexSimpleGroup GetByRegularExpression(IClrRegularExpression param);
}
public static class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.ClrRegexStartAnchorNavigator : object {
}
public static class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.ClrRegexSymbolCharacterNavigator : object {
}
public static class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.ClrRegularExpressionFileNavigator : object {
    [NullableContextAttribute("2")]
[PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IClrRegularExpressionFile GetByRegularExpression(IClrRegularExpression param);
}
public static class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.ClrRegularExpressionNavigator : object {
    [NullableContextAttribute("2")]
[PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null => null")]
public static IClrRegularExpression GetByConcatenationRegularExpression(IClrConcatenationRegularExpression param);
}
public interface JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrConcatenationRegularExpression {
    public TreeNodeCollection`1<IClrQuantifiableRegularExpression> QuantifiableRegularExpressions { get; }
    public TreeNodeEnumerable`1<IClrQuantifiableRegularExpression> QuantifiableRegularExpressionsEnumerable { get; }
    public abstract virtual TreeNodeCollection`1<IClrQuantifiableRegularExpression> get_QuantifiableRegularExpressions();
    public abstract virtual TreeNodeEnumerable`1<IClrQuantifiableRegularExpression> get_QuantifiableRegularExpressionsEnumerable();
}
public interface JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrQuantifiableRegularExpression {
    public IClrRegexQuantifierOwner Owner { get; }
    public IClrRegexQuantifier Quantifier { get; }
    public abstract virtual IClrRegexQuantifierOwner get_Owner();
    public abstract virtual IClrRegexQuantifier get_Quantifier();
    public abstract virtual IClrRegexQuantifierOwner SetOwner(IClrRegexQuantifierOwner param);
    public abstract virtual IClrRegexQuantifier SetQuantifier(IClrRegexQuantifier param);
}
public interface JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexAlternationGroup {
    public ITokenNode AltLParenth { get; }
    public ITokenNode AltRParenth { get; }
    public ITokenNode Pipe { get; }
    public IClrRegexGroupPrefix Prefix { get; }
    public ITokenNode PrefixQuestionSign { get; }
    public ITokenNode QuestionSign { get; }
    public abstract virtual ITokenNode get_AltLParenth();
    public abstract virtual ITokenNode get_AltRParenth();
    public abstract virtual ITokenNode get_Pipe();
    public abstract virtual IClrRegexGroupPrefix get_Prefix();
    public abstract virtual ITokenNode get_PrefixQuestionSign();
    public abstract virtual ITokenNode get_QuestionSign();
    public abstract virtual IClrRegexGroupPrefix SetPrefix(IClrRegexGroupPrefix param);
}
public interface JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexAnchor {
}
public interface JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexBorder {
}
public interface JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexBorderAnchor {
}
public interface JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexBracketCharacter {
}
public interface JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexCharacter {
}
public interface JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexDotCharacter {
}
public interface JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexEndAnchor {
}
public interface JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexEscapeCharacter {
}
public interface JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexGroup {
    public ITokenNode LParenth { get; }
    public ITokenNode RParenth { get; }
    public abstract virtual ITokenNode get_LParenth();
    public abstract virtual ITokenNode get_RParenth();
}
public interface JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexGroupName {
    public ITokenNode Dash { get; }
    public ITokenNode Gt { get; }
    public ITokenNode Lt { get; }
    public IClrRegexName Name { get; }
    public IClrRegexName SecondaryName { get; }
    public abstract virtual ITokenNode get_Dash();
    public abstract virtual ITokenNode get_Gt();
    public abstract virtual ITokenNode get_Lt();
    public abstract virtual IClrRegexName get_Name();
    public abstract virtual IClrRegexName get_SecondaryName();
    public abstract virtual IClrRegexName SetName(IClrRegexName param);
    public abstract virtual IClrRegexName SetSecondaryName(IClrRegexName param);
}
public interface JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexGroupPrefix {
    public ITokenNode LongPrefix { get; }
    public ITokenNode Lt { get; }
    public ITokenNode Prefix { get; }
    public abstract virtual ITokenNode get_LongPrefix();
    public abstract virtual ITokenNode get_Lt();
    public abstract virtual ITokenNode get_Prefix();
}
public interface JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexInvalidCharacter {
}
public interface JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexName {
}
public interface JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexNamedBackreference {
    public ITokenNode Gt { get; }
    public ITokenNode Lt { get; }
    public IClrRegexName Name { get; }
    public abstract virtual ITokenNode get_Gt();
    public abstract virtual ITokenNode get_Lt();
    public abstract virtual IClrRegexName get_Name();
    public abstract virtual IClrRegexName SetName(IClrRegexName param);
}
public interface JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexNamedBlock {
    public ITokenNode LBrace { get; }
    public IClrRegexName Name { get; }
    public ITokenNode RBrace { get; }
    public IClrRegexNamedBlockSuffix Suffix { get; }
    public abstract virtual ITokenNode get_LBrace();
    public abstract virtual IClrRegexName get_Name();
    public abstract virtual ITokenNode get_RBrace();
    public abstract virtual IClrRegexNamedBlockSuffix get_Suffix();
    public abstract virtual IClrRegexName SetName(IClrRegexName param);
    public abstract virtual IClrRegexNamedBlockSuffix SetSuffix(IClrRegexNamedBlockSuffix param);
}
public interface JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexNamedBlockSuffix {
}
public interface JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexNamedGroup {
    public IClrRegexGroupName GroupName { get; }
    public ITokenNode QuestionSign { get; }
    public IClrRegularExpression RegularExpression { get; }
    public abstract virtual IClrRegexGroupName get_GroupName();
    public abstract virtual ITokenNode get_QuestionSign();
    public abstract virtual IClrRegularExpression get_RegularExpression();
    public abstract virtual IClrRegexGroupName SetGroupName(IClrRegexGroupName param);
    public abstract virtual IClrRegularExpression SetRegularExpression(IClrRegularExpression param);
}
public interface JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexNestedSet {
    public ITokenNode Dash { get; }
    public IClrRegexSet InnerSet { get; }
    public abstract virtual ITokenNode get_Dash();
    public abstract virtual IClrRegexSet get_InnerSet();
    public abstract virtual IClrRegexSet SetInnerSet(IClrRegexSet param);
}
public interface JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexNumber {
}
public interface JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexNumericQuantifier {
    public ITokenNode Comma { get; }
    public ITokenNode LBrace { get; }
    public IClrRegexNumber Number { get; }
    public ITokenNode RBrace { get; }
    public IClrRegexNumber SecondaryNumber { get; }
    public abstract virtual ITokenNode get_Comma();
    public abstract virtual ITokenNode get_LBrace();
    public abstract virtual IClrRegexNumber get_Number();
    public abstract virtual ITokenNode get_RBrace();
    public abstract virtual IClrRegexNumber get_SecondaryNumber();
    public abstract virtual IClrRegexNumber SetNumber(IClrRegexNumber param);
    public abstract virtual IClrRegexNumber SetSecondaryNumber(IClrRegexNumber param);
}
public interface JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexOptionGroup {
    public ITokenNode Colon { get; }
    public ITokenNode Dash { get; }
    public TreeNodeCollection`1<ITokenNode> Options { get; }
    public TreeNodeEnumerable`1<ITokenNode> OptionsEnumerable { get; }
    public ITokenNode QuestionSign { get; }
    public IClrRegularExpression RegularExpression { get; }
    public abstract virtual ITokenNode get_Colon();
    public abstract virtual ITokenNode get_Dash();
    public abstract virtual TreeNodeCollection`1<ITokenNode> get_Options();
    public abstract virtual TreeNodeEnumerable`1<ITokenNode> get_OptionsEnumerable();
    public abstract virtual ITokenNode get_QuestionSign();
    public abstract virtual IClrRegularExpression get_RegularExpression();
    public abstract virtual IClrRegularExpression SetRegularExpression(IClrRegularExpression param);
}
public interface JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexPrefixGroup {
    public IClrRegexGroupPrefix Prefix { get; }
    public ITokenNode QuestionSign { get; }
    public IClrRegularExpression RegularExpression { get; }
    public abstract virtual IClrRegexGroupPrefix get_Prefix();
    public abstract virtual ITokenNode get_QuestionSign();
    public abstract virtual IClrRegularExpression get_RegularExpression();
    public abstract virtual IClrRegexGroupPrefix SetPrefix(IClrRegexGroupPrefix param);
    public abstract virtual IClrRegularExpression SetRegularExpression(IClrRegularExpression param);
}
public interface JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexQuantifier {
    public IClrRegexNumericQuantifier Numeric { get; }
    public ITokenNode OptionalQuestion { get; }
    public ITokenNode Plus { get; }
    public ITokenNode Question { get; }
    public ITokenNode Star { get; }
    public abstract virtual IClrRegexNumericQuantifier get_Numeric();
    public abstract virtual ITokenNode get_OptionalQuestion();
    public abstract virtual ITokenNode get_Plus();
    public abstract virtual ITokenNode get_Question();
    public abstract virtual ITokenNode get_Star();
    public abstract virtual IClrRegexNumericQuantifier SetNumeric(IClrRegexNumericQuantifier param);
}
public interface JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexQuantifierOwner {
}
public interface JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexRegularCharacter {
}
public interface JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexSet {
    public IClrRegexSetBody Body { get; }
    public ITokenNode LBracket { get; }
    public ITokenNode NegativeMark { get; }
    public ITokenNode RBracket { get; }
    public abstract virtual IClrRegexSetBody get_Body();
    public abstract virtual ITokenNode get_LBracket();
    public abstract virtual ITokenNode get_NegativeMark();
    public abstract virtual ITokenNode get_RBracket();
    public abstract virtual IClrRegexSetBody SetBody(IClrRegexSetBody param);
}
public interface JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexSetBody {
}
public interface JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexSetBodyCharacter {
}
public interface JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexSetBodyItem {
}
public interface JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexSetCharacter {
}
public interface JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexSetRange {
    public ITokenNode Dash { get; }
    public IClrRegexSetRangeItem Max { get; }
    public IClrRegexSetRangeItem Min { get; }
    public abstract virtual ITokenNode get_Dash();
    public abstract virtual IClrRegexSetRangeItem get_Max();
    public abstract virtual IClrRegexSetRangeItem get_Min();
    public abstract virtual IClrRegexSetRangeItem SetMax(IClrRegexSetRangeItem param);
    public abstract virtual IClrRegexSetRangeItem SetMin(IClrRegexSetRangeItem param);
}
public interface JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexSetRangeItem {
}
public interface JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexSimpleGroup {
    public IClrRegularExpression RegularExpression { get; }
    public abstract virtual IClrRegularExpression get_RegularExpression();
    public abstract virtual IClrRegularExpression SetRegularExpression(IClrRegularExpression param);
}
public interface JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexStartAnchor {
}
public interface JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexSymbolCharacter {
}
public interface JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexTokenNode {
}
public interface JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegexTreeNode {
    public abstract virtual void Accept(TreeNodeVisitor visitor);
    public abstract virtual void Accept(TreeNodeVisitor`1<TContext> visitor, TContext context);
    public abstract virtual TReturn Accept(TreeNodeVisitor`2<TContext, TReturn> visitor, TContext context);
}
public interface JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegularExpression {
    public TreeNodeCollection`1<IClrConcatenationRegularExpression> ConcatenationRegularExpressions { get; }
    public TreeNodeEnumerable`1<IClrConcatenationRegularExpression> ConcatenationRegularExpressionsEnumerable { get; }
    public TreeNodeCollection`1<ITokenNode> Pipes { get; }
    public TreeNodeEnumerable`1<ITokenNode> PipesEnumerable { get; }
    public abstract virtual TreeNodeCollection`1<IClrConcatenationRegularExpression> get_ConcatenationRegularExpressions();
    public abstract virtual TreeNodeEnumerable`1<IClrConcatenationRegularExpression> get_ConcatenationRegularExpressionsEnumerable();
    public abstract virtual TreeNodeCollection`1<ITokenNode> get_Pipes();
    public abstract virtual TreeNodeEnumerable`1<ITokenNode> get_PipesEnumerable();
}
public interface JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.IClrRegularExpressionFile {
    public IClrRegularExpression RegularExpression { get; }
    public abstract virtual IClrRegularExpression get_RegularExpression();
    public abstract virtual IClrRegularExpression SetRegularExpression(IClrRegularExpression param);
}
public abstract class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.TreeNodeVisitor : object {
    public virtual void VisitNode(ITreeNode node);
    public virtual void VisitClrConcatenationRegularExpression(IClrConcatenationRegularExpression clrConcatenationRegularExpressionParam);
    public virtual void VisitClrQuantifiableRegularExpression(IClrQuantifiableRegularExpression clrQuantifiableRegularExpressionParam);
    public virtual void VisitClrRegexAlternationGroup(IClrRegexAlternationGroup clrRegexAlternationGroupParam);
    public virtual void VisitClrRegexAnchor(IClrRegexAnchor clrRegexAnchorParam);
    public virtual void VisitClrRegexBorderAnchor(IClrRegexBorderAnchor clrRegexBorderAnchorParam);
    public virtual void VisitClrRegexBracketCharacter(IClrRegexBracketCharacter clrRegexBracketCharacterParam);
    [ObsoleteAttribute("There are Nodes in PSI [clrRegexEscapeCharacter, clrRegexInvalidCharacter, clrRegexRegularCharacter, clrRegexSymbolCharacter] that directly implements clrRegexCharacter and other interfaces, so this visitor member will not be invoked for these nodes")]
public virtual void VisitClrRegexCharacter(IClrRegexCharacter clrRegexCharacterParam);
    public virtual void VisitClrRegexDotCharacter(IClrRegexDotCharacter clrRegexDotCharacterParam);
    public virtual void VisitClrRegexEndAnchor(IClrRegexEndAnchor clrRegexEndAnchorParam);
    public virtual void VisitClrRegexEscapeCharacter(IClrRegexEscapeCharacter clrRegexEscapeCharacterParam);
    public virtual void VisitClrRegexGroup(IClrRegexGroup clrRegexGroupParam);
    public virtual void VisitClrRegexGroupName(IClrRegexGroupName clrRegexGroupNameParam);
    public virtual void VisitClrRegexGroupPrefix(IClrRegexGroupPrefix clrRegexGroupPrefixParam);
    public virtual void VisitClrRegexInvalidCharacter(IClrRegexInvalidCharacter clrRegexInvalidCharacterParam);
    public virtual void VisitClrRegexName(IClrRegexName clrRegexNameParam);
    public virtual void VisitClrRegexNamedBackreference(IClrRegexNamedBackreference clrRegexNamedBackreferenceParam);
    public virtual void VisitClrRegexNamedBlock(IClrRegexNamedBlock clrRegexNamedBlockParam);
    public virtual void VisitClrRegexNamedBlockSuffix(IClrRegexNamedBlockSuffix clrRegexNamedBlockSuffixParam);
    public virtual void VisitClrRegexNamedGroup(IClrRegexNamedGroup clrRegexNamedGroupParam);
    public virtual void VisitClrRegexNestedSet(IClrRegexNestedSet clrRegexNestedSetParam);
    public virtual void VisitClrRegexNumber(IClrRegexNumber clrRegexNumberParam);
    public virtual void VisitClrRegexNumericQuantifier(IClrRegexNumericQuantifier clrRegexNumericQuantifierParam);
    public virtual void VisitClrRegexOptionGroup(IClrRegexOptionGroup clrRegexOptionGroupParam);
    public virtual void VisitClrRegexPrefixGroup(IClrRegexPrefixGroup clrRegexPrefixGroupParam);
    public virtual void VisitClrRegexQuantifier(IClrRegexQuantifier clrRegexQuantifierParam);
    public virtual void VisitClrRegexQuantifierOwner(IClrRegexQuantifierOwner clrRegexQuantifierOwnerParam);
    public virtual void VisitClrRegexRegularCharacter(IClrRegexRegularCharacter clrRegexRegularCharacterParam);
    public virtual void VisitClrRegexSet(IClrRegexSet clrRegexSetParam);
    public virtual void VisitClrRegexSetBody(IClrRegexSetBody clrRegexSetBodyParam);
    [ObsoleteAttribute("There are Nodes in PSI [clrRegexEscapeCharacter, clrRegexInvalidCharacter, clrRegexRegularCharacter, clrRegexSymbolCharacter] that directly implements clrRegexSetBodyCharacter and other interfaces, so this visitor member will not be invoked for these nodes")]
public virtual void VisitClrRegexSetBodyCharacter(IClrRegexSetBodyCharacter clrRegexSetBodyCharacterParam);
    public virtual void VisitClrRegexSetBodyItem(IClrRegexSetBodyItem clrRegexSetBodyItemParam);
    public virtual void VisitClrRegexSetCharacter(IClrRegexSetCharacter clrRegexSetCharacterParam);
    public virtual void VisitClrRegexSetRange(IClrRegexSetRange clrRegexSetRangeParam);
    public virtual void VisitClrRegexSetRangeItem(IClrRegexSetRangeItem clrRegexSetRangeItemParam);
    public virtual void VisitClrRegexSimpleGroup(IClrRegexSimpleGroup clrRegexSimpleGroupParam);
    public virtual void VisitClrRegexStartAnchor(IClrRegexStartAnchor clrRegexStartAnchorParam);
    public virtual void VisitClrRegexSymbolCharacter(IClrRegexSymbolCharacter clrRegexSymbolCharacterParam);
    public virtual void VisitClrRegularExpression(IClrRegularExpression clrRegularExpressionParam);
    public virtual void VisitClrRegularExpressionFile(IClrRegularExpressionFile clrRegularExpressionFileParam);
}
public abstract class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.TreeNodeVisitor`1 : object {
    public virtual void VisitNode(ITreeNode node, TContext context);
    public virtual void VisitClrConcatenationRegularExpression(IClrConcatenationRegularExpression clrConcatenationRegularExpressionParam, TContext context);
    public virtual void VisitClrQuantifiableRegularExpression(IClrQuantifiableRegularExpression clrQuantifiableRegularExpressionParam, TContext context);
    public virtual void VisitClrRegexAlternationGroup(IClrRegexAlternationGroup clrRegexAlternationGroupParam, TContext context);
    public virtual void VisitClrRegexAnchor(IClrRegexAnchor clrRegexAnchorParam, TContext context);
    public virtual void VisitClrRegexBorderAnchor(IClrRegexBorderAnchor clrRegexBorderAnchorParam, TContext context);
    public virtual void VisitClrRegexBracketCharacter(IClrRegexBracketCharacter clrRegexBracketCharacterParam, TContext context);
    [ObsoleteAttribute("There are Nodes in PSI [clrRegexEscapeCharacter, clrRegexInvalidCharacter, clrRegexRegularCharacter, clrRegexSymbolCharacter] that directly implements clrRegexCharacter and other interfaces, so this visitor member will not be invoked for these nodes")]
public virtual void VisitClrRegexCharacter(IClrRegexCharacter clrRegexCharacterParam, TContext context);
    public virtual void VisitClrRegexDotCharacter(IClrRegexDotCharacter clrRegexDotCharacterParam, TContext context);
    public virtual void VisitClrRegexEndAnchor(IClrRegexEndAnchor clrRegexEndAnchorParam, TContext context);
    public virtual void VisitClrRegexEscapeCharacter(IClrRegexEscapeCharacter clrRegexEscapeCharacterParam, TContext context);
    public virtual void VisitClrRegexGroup(IClrRegexGroup clrRegexGroupParam, TContext context);
    public virtual void VisitClrRegexGroupName(IClrRegexGroupName clrRegexGroupNameParam, TContext context);
    public virtual void VisitClrRegexGroupPrefix(IClrRegexGroupPrefix clrRegexGroupPrefixParam, TContext context);
    public virtual void VisitClrRegexInvalidCharacter(IClrRegexInvalidCharacter clrRegexInvalidCharacterParam, TContext context);
    public virtual void VisitClrRegexName(IClrRegexName clrRegexNameParam, TContext context);
    public virtual void VisitClrRegexNamedBackreference(IClrRegexNamedBackreference clrRegexNamedBackreferenceParam, TContext context);
    public virtual void VisitClrRegexNamedBlock(IClrRegexNamedBlock clrRegexNamedBlockParam, TContext context);
    public virtual void VisitClrRegexNamedBlockSuffix(IClrRegexNamedBlockSuffix clrRegexNamedBlockSuffixParam, TContext context);
    public virtual void VisitClrRegexNamedGroup(IClrRegexNamedGroup clrRegexNamedGroupParam, TContext context);
    public virtual void VisitClrRegexNestedSet(IClrRegexNestedSet clrRegexNestedSetParam, TContext context);
    public virtual void VisitClrRegexNumber(IClrRegexNumber clrRegexNumberParam, TContext context);
    public virtual void VisitClrRegexNumericQuantifier(IClrRegexNumericQuantifier clrRegexNumericQuantifierParam, TContext context);
    public virtual void VisitClrRegexOptionGroup(IClrRegexOptionGroup clrRegexOptionGroupParam, TContext context);
    public virtual void VisitClrRegexPrefixGroup(IClrRegexPrefixGroup clrRegexPrefixGroupParam, TContext context);
    public virtual void VisitClrRegexQuantifier(IClrRegexQuantifier clrRegexQuantifierParam, TContext context);
    public virtual void VisitClrRegexQuantifierOwner(IClrRegexQuantifierOwner clrRegexQuantifierOwnerParam, TContext context);
    public virtual void VisitClrRegexRegularCharacter(IClrRegexRegularCharacter clrRegexRegularCharacterParam, TContext context);
    public virtual void VisitClrRegexSet(IClrRegexSet clrRegexSetParam, TContext context);
    public virtual void VisitClrRegexSetBody(IClrRegexSetBody clrRegexSetBodyParam, TContext context);
    [ObsoleteAttribute("There are Nodes in PSI [clrRegexEscapeCharacter, clrRegexInvalidCharacter, clrRegexRegularCharacter, clrRegexSymbolCharacter] that directly implements clrRegexSetBodyCharacter and other interfaces, so this visitor member will not be invoked for these nodes")]
public virtual void VisitClrRegexSetBodyCharacter(IClrRegexSetBodyCharacter clrRegexSetBodyCharacterParam, TContext context);
    public virtual void VisitClrRegexSetBodyItem(IClrRegexSetBodyItem clrRegexSetBodyItemParam, TContext context);
    public virtual void VisitClrRegexSetCharacter(IClrRegexSetCharacter clrRegexSetCharacterParam, TContext context);
    public virtual void VisitClrRegexSetRange(IClrRegexSetRange clrRegexSetRangeParam, TContext context);
    public virtual void VisitClrRegexSetRangeItem(IClrRegexSetRangeItem clrRegexSetRangeItemParam, TContext context);
    public virtual void VisitClrRegexSimpleGroup(IClrRegexSimpleGroup clrRegexSimpleGroupParam, TContext context);
    public virtual void VisitClrRegexStartAnchor(IClrRegexStartAnchor clrRegexStartAnchorParam, TContext context);
    public virtual void VisitClrRegexSymbolCharacter(IClrRegexSymbolCharacter clrRegexSymbolCharacterParam, TContext context);
    public virtual void VisitClrRegularExpression(IClrRegularExpression clrRegularExpressionParam, TContext context);
    public virtual void VisitClrRegularExpressionFile(IClrRegularExpressionFile clrRegularExpressionFileParam, TContext context);
}
public abstract class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Tree.TreeNodeVisitor`2 : object {
    public virtual TReturn VisitNode(ITreeNode node, TContext context);
    public virtual TReturn VisitClrConcatenationRegularExpression(IClrConcatenationRegularExpression clrConcatenationRegularExpressionParam, TContext context);
    public virtual TReturn VisitClrQuantifiableRegularExpression(IClrQuantifiableRegularExpression clrQuantifiableRegularExpressionParam, TContext context);
    public virtual TReturn VisitClrRegexAlternationGroup(IClrRegexAlternationGroup clrRegexAlternationGroupParam, TContext context);
    public virtual TReturn VisitClrRegexAnchor(IClrRegexAnchor clrRegexAnchorParam, TContext context);
    public virtual TReturn VisitClrRegexBorderAnchor(IClrRegexBorderAnchor clrRegexBorderAnchorParam, TContext context);
    public virtual TReturn VisitClrRegexBracketCharacter(IClrRegexBracketCharacter clrRegexBracketCharacterParam, TContext context);
    [ObsoleteAttribute("There are Nodes in PSI [clrRegexEscapeCharacter, clrRegexInvalidCharacter, clrRegexRegularCharacter, clrRegexSymbolCharacter] that directly implements clrRegexCharacter and other interfaces, so this visitor member will not be invoked for these nodes")]
public virtual TReturn VisitClrRegexCharacter(IClrRegexCharacter clrRegexCharacterParam, TContext context);
    public virtual TReturn VisitClrRegexDotCharacter(IClrRegexDotCharacter clrRegexDotCharacterParam, TContext context);
    public virtual TReturn VisitClrRegexEndAnchor(IClrRegexEndAnchor clrRegexEndAnchorParam, TContext context);
    public virtual TReturn VisitClrRegexEscapeCharacter(IClrRegexEscapeCharacter clrRegexEscapeCharacterParam, TContext context);
    public virtual TReturn VisitClrRegexGroup(IClrRegexGroup clrRegexGroupParam, TContext context);
    public virtual TReturn VisitClrRegexGroupName(IClrRegexGroupName clrRegexGroupNameParam, TContext context);
    public virtual TReturn VisitClrRegexGroupPrefix(IClrRegexGroupPrefix clrRegexGroupPrefixParam, TContext context);
    public virtual TReturn VisitClrRegexInvalidCharacter(IClrRegexInvalidCharacter clrRegexInvalidCharacterParam, TContext context);
    public virtual TReturn VisitClrRegexName(IClrRegexName clrRegexNameParam, TContext context);
    public virtual TReturn VisitClrRegexNamedBackreference(IClrRegexNamedBackreference clrRegexNamedBackreferenceParam, TContext context);
    public virtual TReturn VisitClrRegexNamedBlock(IClrRegexNamedBlock clrRegexNamedBlockParam, TContext context);
    public virtual TReturn VisitClrRegexNamedBlockSuffix(IClrRegexNamedBlockSuffix clrRegexNamedBlockSuffixParam, TContext context);
    public virtual TReturn VisitClrRegexNamedGroup(IClrRegexNamedGroup clrRegexNamedGroupParam, TContext context);
    public virtual TReturn VisitClrRegexNestedSet(IClrRegexNestedSet clrRegexNestedSetParam, TContext context);
    public virtual TReturn VisitClrRegexNumber(IClrRegexNumber clrRegexNumberParam, TContext context);
    public virtual TReturn VisitClrRegexNumericQuantifier(IClrRegexNumericQuantifier clrRegexNumericQuantifierParam, TContext context);
    public virtual TReturn VisitClrRegexOptionGroup(IClrRegexOptionGroup clrRegexOptionGroupParam, TContext context);
    public virtual TReturn VisitClrRegexPrefixGroup(IClrRegexPrefixGroup clrRegexPrefixGroupParam, TContext context);
    public virtual TReturn VisitClrRegexQuantifier(IClrRegexQuantifier clrRegexQuantifierParam, TContext context);
    public virtual TReturn VisitClrRegexQuantifierOwner(IClrRegexQuantifierOwner clrRegexQuantifierOwnerParam, TContext context);
    public virtual TReturn VisitClrRegexRegularCharacter(IClrRegexRegularCharacter clrRegexRegularCharacterParam, TContext context);
    public virtual TReturn VisitClrRegexSet(IClrRegexSet clrRegexSetParam, TContext context);
    public virtual TReturn VisitClrRegexSetBody(IClrRegexSetBody clrRegexSetBodyParam, TContext context);
    [ObsoleteAttribute("There are Nodes in PSI [clrRegexEscapeCharacter, clrRegexInvalidCharacter, clrRegexRegularCharacter, clrRegexSymbolCharacter] that directly implements clrRegexSetBodyCharacter and other interfaces, so this visitor member will not be invoked for these nodes")]
public virtual TReturn VisitClrRegexSetBodyCharacter(IClrRegexSetBodyCharacter clrRegexSetBodyCharacterParam, TContext context);
    public virtual TReturn VisitClrRegexSetBodyItem(IClrRegexSetBodyItem clrRegexSetBodyItemParam, TContext context);
    public virtual TReturn VisitClrRegexSetCharacter(IClrRegexSetCharacter clrRegexSetCharacterParam, TContext context);
    public virtual TReturn VisitClrRegexSetRange(IClrRegexSetRange clrRegexSetRangeParam, TContext context);
    public virtual TReturn VisitClrRegexSetRangeItem(IClrRegexSetRangeItem clrRegexSetRangeItemParam, TContext context);
    public virtual TReturn VisitClrRegexSimpleGroup(IClrRegexSimpleGroup clrRegexSimpleGroupParam, TContext context);
    public virtual TReturn VisitClrRegexStartAnchor(IClrRegexStartAnchor clrRegexStartAnchorParam, TContext context);
    public virtual TReturn VisitClrRegexSymbolCharacter(IClrRegexSymbolCharacter clrRegexSymbolCharacterParam, TContext context);
    public virtual TReturn VisitClrRegularExpression(IClrRegularExpression clrRegularExpressionParam, TContext context);
    public virtual TReturn VisitClrRegularExpressionFile(IClrRegularExpressionFile clrRegularExpressionFileParam, TContext context);
}
public class JetBrains.ReSharper.Psi.RegExp.ClrRegex.Util.ClrRegexSubstring : object {
    private static Char[] ourProhibitedOptions;
    private static ClrRegexSubstring();
    [CanBeNullAttribute]
public static String[] Extract(string pattern);
    [CanBeNullAttribute]
private static IEnumerable`1<string> Visit(IClrRegularExpression regex);
    [CanBeNullAttribute]
private static IEnumerable`1<string> Visit(IClrQuantifiableRegularExpression qExpr);
    [CanBeNullAttribute]
private static IEnumerable`1<string> Visit(IClrRegexQuantifierOwner qExprOwner);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Psi.RegExp.ClrRegex.ZoneMarker : object {
}
[ZoneDefinitionAttribute]
public interface JetBrains.ReSharper.Psi.RegExp.ILanguageRegExpZone {
}
public class JetBrains.ReSharper.Psi.RegExp.Resources.PsiRegExpThemedIcons : object {
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public static class JetBrains.ReSharper.Psi.RegExp.resources.Strings : object {
    private static ILogger ourLog;
    private static Lazy`1<JetResourceManager> ourResourceManager;
    [EditorBrowsableAttribute("2")]
public static JetResourceManager ResourceManager { get; }
    public static string InvalidCharacter_Text { get; }
    private static Strings();
    public static JetResourceManager get_ResourceManager();
    public static string Choice(string format, Object[] args);
    public static string get_InvalidCharacter_Text();
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Psi.RegExp.ZoneMarker : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
