[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Psi.Resx.CodeStyle.ResxFormatterPredefinedSettings : HaveDefaultSettings`1<ResxFormatterSettingsKey> {
    public string Name { get; }
    public ResxFormatterPredefinedSettings(ILogger logger, ISettingsSchema settingsSchema);
    public virtual void InitDefaultSettings(ISettingsStorageMountPoint mountPoint);
    public virtual string get_Name();
}
public class JetBrains.ReSharper.Psi.Resx.CodeStyle.ResxFormatterSettingsAccessor : XmlFormatterSettingsAccessor`1<ResxFormatterSettingsKey> {
}
[SettingsKeyAttribute("JetBrains.ReSharper.Psi.CodeStyle.CodeFormattingSettingsKey", "JetBrains.ReSharper.Psi.Resx.Resources.Strings", "CodeFormattingInResxSettingDescription")]
[EditorConfigKeyAttribute("resx")]
public class JetBrains.ReSharper.Psi.Resx.CodeStyle.ResxFormatterSettingsKey : XmlFormatterSettingsKey {
}
[ZoneDefinitionAttribute]
[ZoneDefinitionConfigurableFeatureAttribute("Internationalization", "Support for .resx and other resource files", "False")]
public interface JetBrains.ReSharper.Psi.Resx.ILanguageResxZone {
}
internal class JetBrains.ReSharper.Psi.Resx.Impl.DeclaredElement.ResxAssemblyTagElement : ResxElementBase`1<IResxAssemblyTagDeclaration> {
    public ResxAssemblyTagElement(IResxAssemblyTagDeclaration declaration);
    public virtual DeclaredElementType GetElementType();
}
internal class JetBrains.ReSharper.Psi.Resx.Impl.DeclaredElement.ResxDataTagElement : ResxElementBase`1<IResxDataTagDeclaration> {
    public IType Type { get; }
    public IType ValueType { get; }
    public bool IsStringValue { get; }
    public bool IsLinkedFileValue { get; }
    public bool CaseSensitiveName { get; }
    public ResxDataTagElement(IResxDataTagDeclaration declaration);
    public sealed virtual IType get_Type();
    public sealed virtual IType get_ValueType();
    public sealed virtual bool get_IsStringValue();
    public sealed virtual bool get_IsLinkedFileValue();
    public virtual bool get_CaseSensitiveName();
    public sealed virtual string GetStringValue();
    public sealed virtual string GetValueText();
    public sealed virtual IPathDeclaredElement GetLinkedFile();
    public virtual DeclaredElementType GetElementType();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    private bool Equals(IResourceItemDeclaredElement other);
    public virtual int GetHashCode();
}
[PsiSharedComponentAttribute]
internal class JetBrains.ReSharper.Psi.Resx.Impl.DeclaredElement.ResxDeclaredElementPresenter : object {
    public static IDeclaredElementPresenter Instance { get; }
    public static IDeclaredElementPresenter get_Instance();
    public virtual string Format(AccessRights accessRights);
    public virtual string Format(ParameterKind parameterKind);
    public virtual RichText Format(DeclaredElementPresenterStyle style, IDeclaredElement element, ISubstitution substitution, DeclaredElementPresenterMarking& marking);
    public virtual string GetEntityKind(IDeclaredElement declaredElement);
    private static TextRange AppendString(RichText sb, string substr, TextStyle textStyle);
}
public class JetBrains.ReSharper.Psi.Resx.Impl.DeclaredElement.ResxDeclaredElementType : DeclaredElementTypeBase {
    public static DeclaredElementType RESX_ROOT_TAG;
    public static DeclaredElementType RESX_HEADER_TAG;
    public static DeclaredElementType RESX_MEATADATA_TAG;
    public static DeclaredElementType RESX_ASSEMBLY_TAG;
    public static DeclaredElementType RESX_DATA_TAG;
    public static DeclaredElementType RESX_DATA_STRING_TAG;
    public static DeclaredElementType RESX_DATA_STRING_FROMAT_TAG;
    public static DeclaredElementType RESX_DATA_BLOB_TAG;
    public static DeclaredElementType RESX_DATA_FILE_TAG;
    protected IDeclaredElementPresenter DefaultPresenter { get; }
    private ResxDeclaredElementType(string name, IconId imageName);
    private static ResxDeclaredElementType();
    protected virtual IDeclaredElementPresenter get_DefaultPresenter();
    public virtual bool IsPresentable(PsiLanguageType language);
}
internal abstract class JetBrains.ReSharper.Psi.Resx.Impl.DeclaredElement.ResxElementBase`1 : object {
    private ITreeNodePointer`1<T> myDeclaration;
    public PsiLanguageType PresentationLanguage { get; }
    public string ShortName { get; }
    public bool CaseSensitiveName { get; }
    public IPsiModule Module { get; }
    protected ResxElementBase`1(T declaration);
    public sealed virtual PsiLanguageType get_PresentationLanguage();
    public virtual string get_ShortName();
    public virtual bool get_CaseSensitiveName();
    public sealed virtual IPsiModule get_Module();
    public sealed virtual IPsiServices GetPsiServices();
    [CanBeNullAttribute]
protected T GetDeclaration();
    public sealed virtual IList`1<IDeclaration> GetDeclarations();
    public sealed virtual IList`1<IDeclaration> GetDeclarationsIn(IPsiSourceFile sourceFile);
    public sealed virtual HybridCollection`1<IPsiSourceFile> GetSourceFiles();
    public sealed virtual bool HasDeclarationsIn(IPsiSourceFile sourceFile);
    public abstract virtual DeclaredElementType GetElementType();
    [CanBeNullAttribute]
public sealed virtual XmlNode GetXMLDoc(bool inherit);
    [CanBeNullAttribute]
public sealed virtual XmlNode GetXMLDescriptionSummary(bool inherit);
    public sealed virtual bool IsValid();
    public sealed virtual bool IsSynthetic();
    protected bool Equals(ResxElementBase`1<T> other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.Resx.Impl.DeclaredElement.ResxMetadataTagElement : ResxElementBase`1<IResxMetadataTagDeclaration> {
    public ResxMetadataTagElement(IResxMetadataTagDeclaration declaration);
    public virtual DeclaredElementType GetElementType();
}
internal class JetBrains.ReSharper.Psi.Resx.Impl.DeclaredElement.ResxResheaderTagElement : ResxElementBase`1<IResxResheaderTagDeclaration> {
    public ResxResheaderTagElement(IResxResheaderTagDeclaration declaration);
    public virtual DeclaredElementType GetElementType();
}
internal class JetBrains.ReSharper.Psi.Resx.Impl.DeclaredElement.ResxRootTagElement : ResxElementBase`1<IResxRootTagDeclaration> {
    public ResxRootTagElement(IResxRootTagDeclaration declaration);
    public virtual DeclaredElementType GetElementType();
}
public abstract class JetBrains.ReSharper.Psi.Resx.Impl.Parsing.ReferenceFactory`1 : object {
    [CanBeNullAttribute]
protected RangeTranslator myTranslator;
    protected int myShift;
    protected ReferenceFactory`1(RangeTranslator translator);
    protected ReferenceFactory`1(RangeTranslator translator, int shift);
    public abstract virtual IAssemblyReference CreateAssemblyReference(string assemblyName, TextRange assemblyNameRange, TextRange assemblyFullNameRange);
    public abstract virtual TR CreatePointerTypeReference(TR elementType);
    public abstract virtual TR CreateArrayTypeReference(TR elementType, UInt32 rank, UInt32[] sizes, Int32[] lBounds);
    public abstract virtual TR CreateReferenceTypeReference(TR reference);
    public abstract virtual TR CreateUnresolvedTypeReference(string typeName, TextRange typeNameRange);
    public abstract virtual TR CreateTypeReference(TextRange nameRange, TR[] genericArguments, IQualifier qualifier);
    public abstract virtual IReference CreateNamespaceReference(TextRange nameRange, IQualifier qualifier);
    protected virtual TreeTextRange GetSourceRange(TextRange resultRange);
}
public class JetBrains.ReSharper.Psi.Resx.Impl.Parsing.ResxTreeBuilder : XmlTreeBuilder {
    public ResxTreeBuilder(IXmlElementFactory elementFactory, IXmlElementFactoryContext factoryContext, ITokenIntern intern);
}
internal class JetBrains.ReSharper.Psi.Resx.Impl.Parsing.ResxTypeNameParser`1 : AbstractTypeNameParser`1<TR> {
    private static Regex ourTypeNameMatcher;
    private ReferenceFactory`1<TR> myFactory;
    private List`1<IReference> myReferences;
    public List`1<IReference> References { get; }
    public ResxTypeNameParser`1(string typeName, ReferenceFactory`1<TR> factory);
    private static ResxTypeNameParser`1();
    public List`1<IReference> get_References();
    protected virtual TR CreateTypeByNameAndAssembly(string typeName, TextRange typeNameRange, string assemblyName, TextRange assemblyNameRange, TextRange assemblyFullNameRange, TR[] genericArguments);
    protected virtual TR ParseFullType(string fullTypeName, TextRange fullTypeNameRange, TR[] genericArguments, IAssemblyReference assemblyReference);
    private static TR[] GetTypeArguments(string typeName, Queue`1<TR> typeArguments);
    protected virtual TR CreatePointerType(TR elementType);
    protected virtual TR CreateArrayType(TR elementType, UInt32 rank, UInt32[] sizes, Int32[] lBounds);
    protected virtual TR CreateArrayType(TR elementType);
    protected virtual TR CreateReferenceType(TR elementType);
    protected virtual TR CreateUnresolvedType(string typeName, TextRange typeNameRange);
    private T AddReference(T reference);
}
[ProjectFileTypeAttribute("JetBrains.ProjectModel.ReswProjectFileType", "16")]
public class JetBrains.ReSharper.Psi.Resx.Impl.ReswProjectFileLanguageService : XmlProjectFileLanguageService {
    public IconId Icon { get; }
    public ReswProjectFileLanguageService(ReswProjectFileType reswProjectFileType);
    public virtual IconId get_Icon();
    public virtual PsiLanguageType GetPsiLanguageType(ProjectFileType languageType);
    public virtual IPsiSourceFileProperties GetPsiProperties(IProjectFile projectFile, IPsiSourceFile sourceFile, IsCompileService isCompileService);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Resx.ResxLanguage", "16")]
public class JetBrains.ReSharper.Psi.Resx.Impl.ResxCodeFormatter : XmlCodeFormatterBase`1<ResxFormatterSettingsKey> {
    public ResxCodeFormatter(ResxLanguage language, XmlTokenTypes xmlTokenTypes, ResxIndentingInfoProvider indentingInfoProvider, CodeFormatterRequirements requirements);
}
public class JetBrains.ReSharper.Psi.Resx.Impl.ResxElementFactory : XmlElementFactory`1<ResxLanguage> {
    private ResxElementFactory(IPsiModule module, bool applyFormatter);
    [NotNullAttribute]
public static ResxElementFactory GetInstance(IPsiModule module, bool applyFormatter);
    [NotNullAttribute]
public static ResxElementFactory GetInstance(ITreeNode context, bool applyFormatter);
    [NotNullAttribute]
public IResxDataTagDeclaration CreateDataTag(string name, object value, string comment, IType type);
    [NotNullAttribute]
private static string GetDataTagFileText(string name, object value, string comment, IType type);
    [NotNullAttribute]
private static string GetModuleName(IPsiModule module);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Resx.ResxLanguage", "16")]
public class JetBrains.ReSharper.Psi.Resx.Impl.ResxElementTypes : XmlElementTypes {
    public XmlCompositeNodeType ROOT_TAG;
    public XmlCompositeNodeType METADATA_TAG;
    public XmlCompositeNodeType METADATA_VALUE_TAG;
    public XmlCompositeNodeType METADATA_TAG_NAME_ATTRIBUTE;
    public XmlCompositeNodeType METADATA_TAG_TYPE_ATTRIBUTE;
    public XmlCompositeNodeType METADATA_TAG_MIMETYPE_ATTRIBUTE;
    public XmlCompositeNodeType ASSEMBLY_TAG;
    public XmlCompositeNodeType ASSEMBLY_TAG_NAME_ATTRIBUTE;
    public XmlCompositeNodeType ASSEMBLY_TAG_ALIAS_ATTRIBUTE;
    public XmlCompositeNodeType RESHEADER_TAG;
    public XmlCompositeNodeType RESHEADER_TAG_NAME_ATTRIBUTE;
    public XmlCompositeNodeType RESHEADER_VALUE_TAG;
    public XmlCompositeNodeType DATA_TAG;
    public XmlCompositeNodeType DATA_VALUE_TAG;
    public XmlCompositeNodeType DATA_COMMENT_TAG;
    public XmlCompositeNodeType DATA_TAG_NAME_ATTRIBUTE;
    public XmlCompositeNodeType DATA_TAG_TYPE_ATTRIBUTE;
    public XmlCompositeNodeType DATA_TAG_MIMETYPE_ATTRIBUTE;
    private static int BASE_INDEX;
    public ResxElementTypes(XmlTokenTypes xmlTokenTypes);
}
[PsiSharedComponentAttribute("16")]
public class JetBrains.ReSharper.Psi.Resx.Impl.ResxIndentingInfoProvider : XmlIndentingInfoProviderBase`1<ResxFormatterSettingsKey> {
    public ResxIndentingInfoProvider(IThreading threading, Lifetime lifetime, ISettingsSchema settingsSchema, ICalculatedSettingsSchema calculatedSettingsSchema);
}
internal static class JetBrains.ReSharper.Psi.Resx.Impl.ResxKeyWords : object {
    public static string ROOT_TAG;
    public static string METADATA_TAG;
    public static string METADATA_TAG_NAME_ATTRIBUTE;
    public static string METADATA_TAG_TYPE_ATTRIBUTE;
    public static string METADATA_TAG_MIMETYPE_ATTRIBUTE;
    public static string METADATA_VALUE_TAG;
    public static string ASSEMBLY_TAG;
    public static string ASSEMBLY_TAG_NAME_ATTRIBUTE;
    public static string ASSEMBLY_TAG_ALIAS_ATTRIBUTE;
    public static string RESHEADER_TAG;
    public static string RESHEADER_TAG_NAME_ATTRIBUTE;
    public static string RESHEADER_VALUE_TAG;
    public static string DATA_TAG;
    public static string DATA_TAG_NAME_ATTRIBUTE;
    public static string DATA_TAG_TYPE_ATTRIBUTE;
    public static string DATA_TAG_MIMETYPE_ATTRIBUTE;
    public static string DATA_VALUE_TAG;
    public static string DATA_COMMENT_TAG;
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Resx.ResxLanguage", "16")]
internal class JetBrains.ReSharper.Psi.Resx.Impl.ResxLanguageServiceImpl : ResxLanguageService {
    [NotNullAttribute]
private ResxCodeFormatter myCodeFormatter;
    [NotNullAttribute]
private static ISet`1<char> ourForbiddenSymbols;
    public ICodeFormatter CodeFormatter { get; }
    public ILanguageCacheProvider CacheProvider { get; }
    public bool SupportTypeMemberCache { get; }
    public ResxLanguageServiceImpl(ResxLanguage languageType, IConstantValueService constantValueService, XmlTokenTypes tokenTypes, IXmlElementFactory elementFactory, ResxCodeFormatter codeFormatter, CommonIdentifierIntern commonIdentifierIntern);
    private static ResxLanguageServiceImpl();
    public virtual ICodeFormatter get_CodeFormatter();
    public virtual ILanguageCacheProvider get_CacheProvider();
    public virtual bool get_SupportTypeMemberCache();
    public virtual bool IsValidName(DeclaredElementType elementType, string name);
    public virtual IParser CreateParser(ILexer lexer, IPsiModule module, IPsiSourceFile sourceFile);
    public virtual bool CanContainCachableDeclarations(ITreeNode node);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Resx.ResxLanguage", "16")]
public class JetBrains.ReSharper.Psi.Resx.Impl.ResxLanguageSupport : XmlLanguageSupport {
    public virtual bool IsFormattingAllowed(IPsiSourceFile sourceFile);
    public virtual XmlTreeBuilder CreateTreeBuilder(IXmlElementFactory factory, IXmlElementFactoryContext factoryContext, ITokenIntern intern, IXmlTreeBuilderContext treeBuilderContext);
}
[ProjectFileTypeAttribute("JetBrains.ProjectModel.ResxProjectFileType", "16")]
public class JetBrains.ReSharper.Psi.Resx.Impl.ResxProjectFileLanguageService : XmlProjectFileLanguageService {
    public IconId Icon { get; }
    public ResxProjectFileLanguageService(ResxProjectFileType resxProjectFileType);
    public virtual IconId get_Icon();
    public virtual PsiLanguageType GetPsiLanguageType(ProjectFileType languageType);
    public virtual IPsiSourceFileProperties GetPsiProperties(IProjectFile projectFile, IPsiSourceFile sourceFile, IsCompileService isCompileService);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Resx.ResxLanguage", "16")]
public class JetBrains.ReSharper.Psi.Resx.Impl.ResxTreeNodeFactory : XmlTreeNodeFactory {
    [NotNullAttribute]
private ResxElementTypes myElementTypes;
    public ResxTreeNodeFactory(ResxLanguage languageType, XmlTokenTypes tokenTypes, ResxElementTypes elementTypes);
    public virtual IXmlFile CreateFile();
    public virtual IXmlTag CreateRootTag(IXmlTagHeader header, IXmlElementFactoryContext context);
    public virtual IXmlTag CreateTag(IXmlTagHeader header, IXmlTag parentTag, IXmlElementFactoryContext context);
    public virtual IXmlAttribute CreateAttribute(IXmlIdentifier nameIdentifier, IXmlAttributeContainer attributeContainer, IXmlTagContainer parentTag, IXmlElementFactoryContext context);
}
internal class JetBrains.ReSharper.Psi.Resx.Impl.Tree.References.ArrayTypeReferenceInsideTag`1 : TypeReferenceInsideTag`1<TOwner> {
    private List`1<UInt32> myRanks;
    public ICollection`1<UInt32> Ranks { get; }
    public ArrayTypeReferenceInsideTag`1(TreeTextRange withinRange, TOwner owner, ITypeReference[] genericArguments, List`1<UInt32> ranks);
    public ArrayTypeReferenceInsideTag`1(TreeTextRange withinRange, TOwner owner, ITypeReference[] genericArguments, IQualifier qualifier, List`1<UInt32> ranks);
    public ICollection`1<UInt32> get_Ranks();
    public virtual IType GetReferencedType();
}
internal class JetBrains.ReSharper.Psi.Resx.Impl.Tree.References.ArrayTypeReferenceWithToken`2 : TypeReferenceWithToken`2<TOwner, TToken> {
    private List`1<UInt32> myRanks;
    public ICollection`1<UInt32> Ranks { get; }
    public ArrayTypeReferenceWithToken`2(TreeTextRange withinRange, TOwner owner, TToken token, ITypeReference[] genericArguments, List`1<UInt32> ranks);
    public ArrayTypeReferenceWithToken`2(TreeTextRange withinRange, TOwner owner, TToken token, ITypeReference[] genericArguments, IQualifier qualifier, List`1<UInt32> ranks);
    public ICollection`1<UInt32> get_Ranks();
    public virtual IType GetReferencedType();
}
public class JetBrains.ReSharper.Psi.Resx.Impl.Tree.References.AssemblyOrAliasReferenceInsideTag`1 : AssemblyReferenceInsideTag`1<TOwner> {
    private TreeTextRange myFullNameWithinRange;
    public AssemblyOrAliasReferenceInsideTag`1(TOwner owner, TreeTextRange nameWithinRange);
    public AssemblyOrAliasReferenceInsideTag`1(TOwner owner, TreeTextRange nameWithinRange, TreeTextRange fullNameWithinRange);
    public virtual IReference BindTo(IDeclaredElement element, ISubstitution substitution);
    public virtual ResolveResultWithInfo ResolveWithoutCache();
    public virtual ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
    public virtual IPsiModule ResolvePsiModule();
}
public class JetBrains.ReSharper.Psi.Resx.Impl.Tree.References.AssemblyOrAliasWithTokenReference`2 : AssemblyReferenceWithToken`2<TOwner, TToken> {
    private TreeTextRange myFullNameWithinRange;
    public AssemblyOrAliasWithTokenReference`2(TOwner owner, TToken token, TreeTextRange nameWithinRange);
    public AssemblyOrAliasWithTokenReference`2(TOwner owner, TToken token, TreeTextRange nameWithinRange, TreeTextRange fullNameWithinRange);
    protected virtual IReference BindToInternal(IDeclaredElement element, ISubstitution substitution);
    public virtual ResolveResultWithInfo ResolveWithoutCache();
    public virtual ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
    public virtual IPsiModule ResolvePsiModule();
}
public class JetBrains.ReSharper.Psi.Resx.Impl.Tree.References.AssemblyReferenceInsideTag`1 : ReferenceInsideTagBase`1<TOwner> {
    private TreeTextRange myFullNameWithinRange;
    protected bool CaseSensitive { get; }
    public bool Resolved { get; }
    public AssemblyReferenceInsideTag`1(TOwner owner, TreeTextRange nameWithinRange);
    public AssemblyReferenceInsideTag`1(TOwner owner, TreeTextRange nameWithinRange, TreeTextRange fullNameWithinRange);
    protected virtual bool get_CaseSensitive();
    public sealed virtual bool get_Resolved();
    public virtual ResolveResultWithInfo ResolveWithoutCache();
    public sealed virtual void MarkAsSkipped(bool ignorable);
    public virtual ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
    public sealed virtual QualifierKind GetKind();
    public sealed virtual ISymbolTable GetSymbolTable(SymbolTableMode mode);
    public virtual IReference BindTo(IDeclaredElement element, ISubstitution substitution);
    public virtual IPsiModule ResolvePsiModule();
    [NotNullAttribute]
private string GetAssemblyFullNameWithoutResolve();
}
public class JetBrains.ReSharper.Psi.Resx.Impl.Tree.References.AssemblyReferenceWithToken`2 : ReferenceWithTokenBase`2<TOwner, TToken> {
    private TreeTextRange myFullNameWithinRange;
    public bool CaseSensitive { get; }
    public bool Resolved { get; }
    public AssemblyReferenceWithToken`2(TOwner owner, TToken token, TreeTextRange nameWithinRange);
    public AssemblyReferenceWithToken`2(TOwner owner, TToken token, TreeTextRange nameWithinRange, TreeTextRange fullNameWithinRange);
    public virtual bool get_CaseSensitive();
    public sealed virtual bool get_Resolved();
    protected virtual string GetElementText();
    protected virtual IReference BindToInternal(IDeclaredElement element, ISubstitution substitution);
    public virtual ResolveResultWithInfo ResolveWithoutCache();
    public sealed virtual void MarkAsSkipped(bool ignorable);
    public sealed virtual QualifierKind GetKind();
    public sealed virtual ISymbolTable GetSymbolTable(SymbolTableMode mode);
    public virtual ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
    public virtual IPsiModule ResolvePsiModule();
    [NotNullAttribute]
private string GetAssemblyFullNameWithoutResolve();
}
internal class JetBrains.ReSharper.Psi.Resx.Impl.Tree.References.FileReferenceInsideTag`1 : PathReferenceInsideTagBase`1<TOwner> {
    public ProjectFileType ExpectedFileType { get; }
    public BuildAction ExpectedBuildAction { get; }
    public ICollection`1<string> ExpectedExtensions { get; }
    public FileReferenceInsideTag`1(TOwner owner, IQualifier qualifier, TreeTextRange withinRange);
    public virtual ISymbolFilter[] GetSymbolFilters();
    public sealed virtual ProjectFileType get_ExpectedFileType();
    public virtual BuildAction get_ExpectedBuildAction();
    public sealed virtual ICollection`1<string> get_ExpectedExtensions();
    public sealed virtual ISymbolTable GetSmartCompletionSymbolTable();
    public virtual ISymbolFilter[] GetPathFilters();
}
internal class JetBrains.ReSharper.Psi.Resx.Impl.Tree.References.FolderReferenceInsideTag`1 : PathReferenceInsideTagBase`1<TOwner> {
    public bool Resolved { get; }
    public FolderReferenceInsideTag`1(TOwner owner, IQualifier qualifier, TreeTextRange withinRange);
    public sealed virtual bool get_Resolved();
    public sealed virtual QualifierKind GetKind();
    public virtual ISymbolFilter[] GetSymbolFilters();
    public sealed virtual ISymbolTable GetSymbolTable(SymbolTableMode mode);
    public virtual ISymbolFilter[] GetPathFilters();
}
public interface JetBrains.ReSharper.Psi.Resx.Impl.Tree.References.IReferenceInsideTag`1 {
    public XmlTagRange`1<T> TagRange { get; public set; }
    public abstract virtual XmlTagRange`1<T> get_TagRange();
    public abstract virtual void set_TagRange(XmlTagRange`1<T> value);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Psi.Resx.Impl.Tree.References.ModuleConverter : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static IModule ConvertToModule(IPsiModule psiModule);
}
public class JetBrains.ReSharper.Psi.Resx.Impl.Tree.References.NamespaceReferenceInsideTag`1 : QualifiableReferenceInsideTagBase`1<TOwner> {
    public bool Resolved { get; }
    public NamespaceReferenceInsideTag`1(TOwner owner, TreeTextRange withinRange);
    public NamespaceReferenceInsideTag`1(TOwner owner, IQualifier quilifier, TreeTextRange withinRange);
    public sealed virtual bool get_Resolved();
    public sealed virtual QualifierKind GetKind();
    public sealed virtual void MarkAsSkipped(bool ignorable);
    public virtual ISymbolFilter[] GetSymbolFilters();
    public virtual IQualifier GetQualifier();
    public virtual IReference BindTo(IDeclaredElement element, ISubstitution substitution);
    public sealed virtual ISymbolTable GetSymbolTable(SymbolTableMode mode);
    private Tuple`2<IPsiModule, bool> FindPsiModule();
}
public class JetBrains.ReSharper.Psi.Resx.Impl.Tree.References.NamespaceReferenceWithToken`2 : QualifiableReferenceWithTokenBase`2<TOwner, TToken> {
    private bool myAllowNotResolved;
    public bool Resolved { get; }
    protected bool AllowedNotResolved { get; }
    public bool IsQualified { get; }
    public NamespaceReferenceWithToken`2(TOwner owner, TToken token, TreeTextRange withinRange);
    public NamespaceReferenceWithToken`2(TOwner owner, IQualifier quilifier, TToken token, TreeTextRange withinRange);
    public sealed virtual bool get_Resolved();
    protected virtual bool get_AllowedNotResolved();
    public virtual bool get_IsQualified();
    protected virtual string GetElementText();
    public sealed virtual QualifierKind GetKind();
    public virtual Staticness GetStaticness();
    public virtual ITypeElement GetQualifierTypeElement();
    protected virtual IReference BindToInternal(IDeclaredElement declaredElement, ISubstitution substitution);
    protected virtual ISymbolFilter[] GetSmartSymbolFilters();
    public virtual IQualifier GetQualifier();
    public sealed virtual void MarkAsSkipped(bool ignorable);
    public sealed virtual ISymbolTable GetSymbolTable(SymbolTableMode mode);
    private Tuple`2<IPsiModule, bool> FindPsiModule();
}
internal abstract class JetBrains.ReSharper.Psi.Resx.Impl.Tree.References.PathReferenceInsideTagBase`1 : QualifiableReferenceInsideTagBase`1<TOwner> {
    protected bool CaseSensitive { get; }
    public bool IsQualified { get; }
    public bool CanBeMappedOrIgnored { get; }
    public bool AllowEmptyName { get; }
    protected PathReferenceInsideTagBase`1(TOwner owner, IQualifier qualifier, TreeTextRange withinRange);
    protected virtual bool get_CaseSensitive();
    public virtual bool get_IsQualified();
    public virtual VirtualFileSystemPath GetBasePath();
    public virtual ISymbolFilter[] GetSymbolFilters();
    public abstract virtual ISymbolFilter[] GetPathFilters();
    public virtual ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
    public virtual IReference BindTo(IDeclaredElement element, ISubstitution substitution);
    public sealed virtual bool get_CanBeMappedOrIgnored();
    public sealed virtual bool get_AllowEmptyName();
}
internal class JetBrains.ReSharper.Psi.Resx.Impl.Tree.References.PointerTypeReferenceInsideTag`1 : TypeReferenceInsideTag`1<TOwner> {
    public PointerTypeReferenceInsideTag`1(TreeTextRange withinRange, TOwner owner, ITypeReference[] genericArguments);
    public PointerTypeReferenceInsideTag`1(TreeTextRange withinRange, TOwner owner, ITypeReference[] genericArguments, IQualifier qualifier);
    public virtual IType GetReferencedType();
}
internal class JetBrains.ReSharper.Psi.Resx.Impl.Tree.References.PointerTypeReferenceWithToken`2 : TypeReferenceWithToken`2<TOwner, TToken> {
    public PointerTypeReferenceWithToken`2(TreeTextRange withinRange, TOwner owner, TToken token, ITypeReference[] genericArguments);
    public PointerTypeReferenceWithToken`2(TreeTextRange withinRange, TOwner owner, TToken token, ITypeReference[] genericArguments, IQualifier qualifier);
    public virtual IType GetReferencedType();
}
internal class JetBrains.ReSharper.Psi.Resx.Impl.Tree.References.PsiModuleQualifier : object {
    private ITreeNode myElement;
    private bool myCaseSensitive;
    public bool Resolved { get; }
    public PsiModuleQualifier(ITreeNode element, bool caseSensitive);
    public sealed virtual ISymbolTable GetSymbolTable(SymbolTableMode mode);
    public sealed virtual QualifierKind GetKind();
    public sealed virtual bool get_Resolved();
}
public abstract class JetBrains.ReSharper.Psi.Resx.Impl.Tree.References.QualifiableReferenceInsideTagBase`1 : QualifiableCheckedReferenceBase`1<TOwner> {
    private IQualifier myQualifier;
    private XmlTagRange`1<TOwner> myTagRange;
    [CompilerGeneratedAttribute]
private bool <AllowedNotResolved>k__BackingField;
    public XmlTagRange`1<TOwner> TagRange { get; public set; }
    protected bool AllowedNotResolved { get; protected set; }
    protected bool CaseSensitive { get; }
    protected StringComparison StringComparison { get; }
    public bool IsQualified { get; }
    protected QualifiableReferenceInsideTagBase`1(TOwner owner, IQualifier qualifier, TreeTextRange withinRange);
    public sealed virtual XmlTagRange`1<TOwner> get_TagRange();
    public sealed virtual void set_TagRange(XmlTagRange`1<TOwner> value);
    [CompilerGeneratedAttribute]
protected virtual bool get_AllowedNotResolved();
    [CompilerGeneratedAttribute]
protected virtual void set_AllowedNotResolved(bool value);
    protected virtual bool get_CaseSensitive();
    protected StringComparison get_StringComparison();
    public virtual string GetName();
    public virtual IAccessContext GetAccessContext();
    public virtual TreeTextRange GetTreeTextRange();
    public virtual ISymbolFilter[] GetSymbolFilters();
    public virtual IReference BindTo(IDeclaredElement element);
    protected IReference SetNewText(string newText);
    public virtual bool get_IsQualified();
    public virtual IQualifier GetQualifier();
    public virtual ISymbolTable GetCompletionSymbolTable();
    protected virtual ISymbolFilter[] GetCompletionFilters();
    public virtual ResolveResultWithInfo Resolve(ISymbolTable symbolTable, IAccessContext context);
}
public abstract class JetBrains.ReSharper.Psi.Resx.Impl.Tree.References.QualifiableReferenceWithTokenBase`2 : QualifiableReferenceWithinElement`2<TOwner, TToken> {
    public ElementRange`1<TToken> ElementRange { get; public set; }
    protected QualifiableReferenceWithTokenBase`2(TOwner owner, TToken token, TreeTextRange withinRange);
    protected QualifiableReferenceWithTokenBase`2(TOwner owner, IQualifier quilifier, TToken token, TreeTextRange withinRange);
    public virtual ElementRange`1<TToken> get_ElementRange();
    public virtual void set_ElementRange(ElementRange`1<TToken> value);
    protected virtual string GetElementText();
    public virtual ResolveResultWithInfo Resolve(ISymbolTable symbolTable, IAccessContext context);
    public string GetXmlText(string text);
    protected static TToken CreateNewToken(IXmlToken oldToken, IBuffer buffer);
}
internal class JetBrains.ReSharper.Psi.Resx.Impl.Tree.References.ReferenceFactory`1 : ReferenceFactory`1<TypeReferenceInsideTag`1<TOwner>> {
    private TOwner myOwner;
    public ReferenceFactory`1(TOwner owner);
    public ReferenceFactory`1(TOwner owner, RangeTranslator translator);
    public ReferenceFactory`1(TOwner owner, RangeTranslator translator, int shift);
    public virtual IAssemblyReference CreateAssemblyReference(string assemblyName, TextRange assemblyNameRange, TextRange assemblyFullNameRange);
    public virtual TypeReferenceInsideTag`1<TOwner> CreateTypeReference(TextRange nameRange, TypeReferenceInsideTag`1[] genericArguments, IQualifier qualifier);
    public virtual IReference CreateNamespaceReference(TextRange nameRange, IQualifier qualifier);
    public virtual TypeReferenceInsideTag`1<TOwner> CreatePointerTypeReference(TypeReferenceInsideTag`1<TOwner> elementType);
    public virtual TypeReferenceInsideTag`1<TOwner> CreateArrayTypeReference(TypeReferenceInsideTag`1<TOwner> elementType, UInt32 rank, UInt32[] sizes, Int32[] lBounds);
    public virtual TypeReferenceInsideTag`1<TOwner> CreateReferenceTypeReference(TypeReferenceInsideTag`1<TOwner> reference);
    public virtual TypeReferenceInsideTag`1<TOwner> CreateUnresolvedTypeReference(string typeName, TextRange typeNameRange);
}
internal class JetBrains.ReSharper.Psi.Resx.Impl.Tree.References.ReferenceFactory`2 : ReferenceFactory`1<TypeReferenceWithToken`2<TOwner, TToken>> {
    private TOwner myOwner;
    private TToken myToken;
    public ReferenceFactory`2(TOwner owner, TToken token);
    public ReferenceFactory`2(TOwner owner, TToken token, RangeTranslator translator);
    public ReferenceFactory`2(TOwner owner, TToken token, RangeTranslator translator, int shift);
    public virtual IReference CreateNamespaceReference(TextRange nameRange, IQualifier qualifier);
    public virtual IAssemblyReference CreateAssemblyReference(string assemblyName, TextRange assemblyNameRange, TextRange assemblyFullNameRange);
    public virtual TypeReferenceWithToken`2<TOwner, TToken> CreateTypeReference(TextRange nameRange, TypeReferenceWithToken`2[] genericArguments, IQualifier qualifier);
    public virtual TypeReferenceWithToken`2<TOwner, TToken> CreateArrayTypeReference(TypeReferenceWithToken`2<TOwner, TToken> elementType, UInt32 rank, UInt32[] sizes, Int32[] lBounds);
    public virtual TypeReferenceWithToken`2<TOwner, TToken> CreatePointerTypeReference(TypeReferenceWithToken`2<TOwner, TToken> elementType);
    public virtual TypeReferenceWithToken`2<TOwner, TToken> CreateReferenceTypeReference(TypeReferenceWithToken`2<TOwner, TToken> reference);
    public virtual TypeReferenceWithToken`2<TOwner, TToken> CreateUnresolvedTypeReference(string typeName, TextRange typeNameRange);
}
public abstract class JetBrains.ReSharper.Psi.Resx.Impl.Tree.References.ReferenceInsideTagBase`1 : CheckedReferenceBase`1<TOwner> {
    private XmlTagRange`1<TOwner> myTagRange;
    [CompilerGeneratedAttribute]
private bool <AllowedNotResolved>k__BackingField;
    public XmlTagRange`1<TOwner> TagRange { get; public set; }
    protected bool CaseSensitive { get; }
    protected bool AllowedNotResolved { get; protected set; }
    protected StringComparison StringComparison { get; }
    protected ReferenceInsideTagBase`1(TOwner owner, TreeTextRange withinRange);
    public sealed virtual XmlTagRange`1<TOwner> get_TagRange();
    public sealed virtual void set_TagRange(XmlTagRange`1<TOwner> value);
    protected virtual bool get_CaseSensitive();
    [CompilerGeneratedAttribute]
protected virtual bool get_AllowedNotResolved();
    [CompilerGeneratedAttribute]
protected virtual void set_AllowedNotResolved(bool value);
    protected StringComparison get_StringComparison();
    public virtual string GetName();
    public virtual IAccessContext GetAccessContext();
    public virtual TreeTextRange GetTreeTextRange();
    public virtual ISymbolFilter[] GetSymbolFilters();
    public virtual IReference BindTo(IDeclaredElement element);
    protected IReference SetNewText(string newText);
    public virtual ResolveResultWithInfo ResolveWithoutCache();
}
public static class JetBrains.ReSharper.Psi.Resx.Impl.Tree.References.ReferenceInsideTagUtil`1 : object {
    public static void AddRestoreTransactionAction(IPsiServices psiServices, IReferenceInsideTag`1<TXmlTag> referenceWithToken, XmlTagRange`1<TXmlTag> oldRange);
    public static IReferenceInsideTag`1<TXmlTag> SetText(IReferenceInsideTag`1<TXmlTag> reference, string newText);
    public static IReferenceInsideTag`1<TXmlTag> ResetReferences(TXmlTag element, XmlTagRange`1<TXmlTag> newTagRange, Predicate`1<IReferenceInsideTag`1<TXmlTag>> predicate);
    public static XmlTagRange`1<TXmlTag> SetText(XmlTagRange`1<TXmlTag> tagRange, string newText);
    private static IXmlToken CreateNewXmlToken(IXmlElementFactory xmlElementFactory, XmlTokenNodeType tokenNodeType, string text);
}
internal class JetBrains.ReSharper.Psi.Resx.Impl.Tree.References.ReferenceTypeReferenceInsideTag`1 : TypeReferenceInsideTag`1<TOwner> {
    public ReferenceTypeReferenceInsideTag`1(TreeTextRange withinRange, TOwner owner, ITypeReference[] genericArguments);
    public ReferenceTypeReferenceInsideTag`1(TreeTextRange withinRange, TOwner owner, ITypeReference[] genericArguments, IQualifier qualifier);
    public virtual IType GetReferencedType();
}
internal class JetBrains.ReSharper.Psi.Resx.Impl.Tree.References.ReferenceTypeReferenceWithToken`2 : TypeReferenceWithToken`2<TOwner, TToken> {
    public ReferenceTypeReferenceWithToken`2(TreeTextRange withinRange, TOwner owner, TToken token, ITypeReference[] genericArguments);
    public ReferenceTypeReferenceWithToken`2(TreeTextRange withinRange, TOwner owner, TToken token, ITypeReference[] genericArguments, IQualifier qualifier);
    public virtual IType GetReferencedType();
}
public abstract class JetBrains.ReSharper.Psi.Resx.Impl.Tree.References.ReferenceWithTokenBase`2 : ReferenceWithinElementBase`2<TOwner, TToken> {
    public ElementRange`1<TToken> ElementRange { get; public set; }
    protected ReferenceWithTokenBase`2(TOwner owner, TToken token, TreeTextRange withinRange);
    public virtual ElementRange`1<TToken> get_ElementRange();
    public virtual void set_ElementRange(ElementRange`1<TToken> value);
    protected virtual string GetElementText();
    public string GetXmlText(string text);
    protected static TToken CreateNewToken(IXmlToken oldToken, IBuffer buffer);
}
internal class JetBrains.ReSharper.Psi.Resx.Impl.Tree.References.TypeReferenceInsideTag`1 : QualifiableReferenceInsideTagBase`1<TOwner> {
    [NotNullAttribute]
private ITypeReference[] myGenericArguments;
    [CompilerGeneratedAttribute]
private bool <IsResultType>k__BackingField;
    [NotNullAttribute]
public ITypeReference[] GenericArguments { get; }
    public bool Resolved { get; }
    public bool IsQualified { get; }
    public bool IsResultType { get; public set; }
    public TypeReferenceInsideTag`1(TreeTextRange withinRange, TOwner owner, ITypeReference[] genericArguments);
    public TypeReferenceInsideTag`1(TreeTextRange withinRange, TOwner owner, ITypeReference[] genericArguments, IQualifier qualifier);
    public sealed virtual ITypeReference[] get_GenericArguments();
    public sealed virtual bool get_Resolved();
    public virtual bool get_IsQualified();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsResultType();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsResultType(bool value);
    public virtual string GetName();
    public virtual IQualifier GetQualifier();
    public virtual IType GetReferencedType();
    public virtual IReference BindTo(IDeclaredElement element, ISubstitution substitution);
    public sealed virtual void MarkAsSkipped(bool ignorable);
    public sealed virtual ISymbolTable GetSymbolTable(SymbolTableMode mode);
    public sealed virtual QualifierKind GetKind();
    public sealed virtual string GetTypeName(bool onlyName);
    public sealed virtual int GetGenericArgumentsCount();
}
internal class JetBrains.ReSharper.Psi.Resx.Impl.Tree.References.TypeReferenceWithToken`2 : QualifiableReferenceWithTokenBase`2<TOwner, TToken> {
    private bool myAllowNotResolved;
    [NotNullAttribute]
private ITypeReference[] myGenericArguments;
    [CompilerGeneratedAttribute]
private bool <IsResultType>k__BackingField;
    protected bool AllowedNotResolved { get; }
    [NotNullAttribute]
public ITypeReference[] GenericArguments { get; }
    public bool IsQualified { get; }
    public bool Resolved { get; }
    public bool IsResultType { get; public set; }
    public TypeReferenceWithToken`2(TreeTextRange withinRange, TOwner owner, TToken token, ITypeReference[] genericArguments);
    public TypeReferenceWithToken`2(TreeTextRange withinRange, TOwner owner, TToken token, ITypeReference[] genericArguments, IQualifier qualifier);
    protected virtual bool get_AllowedNotResolved();
    public sealed virtual ITypeReference[] get_GenericArguments();
    public virtual bool get_IsQualified();
    public sealed virtual bool get_Resolved();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsResultType();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsResultType(bool value);
    protected virtual string GetElementText();
    protected virtual ISymbolFilter[] GetCompletionFilters();
    protected virtual ISymbolFilter[] GetSmartSymbolFilters();
    public sealed virtual void MarkAsSkipped(bool ignorable);
    public virtual IType GetReferencedType();
    public virtual IQualifier GetQualifier();
    public virtual Staticness GetStaticness();
    public virtual ITypeElement GetQualifierTypeElement();
    protected virtual IReference BindToInternal(IDeclaredElement element, ISubstitution substitution);
    public sealed virtual ISymbolTable GetSymbolTable(SymbolTableMode mode);
    public sealed virtual QualifierKind GetKind();
    public sealed virtual string GetTypeName(bool onlyName);
    public sealed virtual int GetGenericArgumentsCount();
}
internal class JetBrains.ReSharper.Psi.Resx.Impl.Tree.References.UnresolvedTypeReferenceInsideTag`1 : TypeReferenceInsideTag`1<TOwner> {
    public UnresolvedTypeReferenceInsideTag`1(TreeTextRange withinRange, TOwner owner, ITypeReference[] genericArguments);
    public UnresolvedTypeReferenceInsideTag`1(TreeTextRange withinRange, TOwner owner, ITypeReference[] genericArguments, IQualifier qualifier);
    public virtual string GetName();
    public virtual IType GetReferencedType();
}
internal class JetBrains.ReSharper.Psi.Resx.Impl.Tree.References.UnresolvedTypeReferenceWithToken`2 : TypeReferenceWithToken`2<TOwner, TToken> {
    public UnresolvedTypeReferenceWithToken`2(TreeTextRange withinRange, TOwner owner, TToken token, ITypeReference[] genericArguments);
    public UnresolvedTypeReferenceWithToken`2(TreeTextRange withinRange, TOwner owner, TToken token, ITypeReference[] genericArguments, IQualifier qualifier);
    protected virtual string GetElementText();
    public virtual IType GetReferencedType();
}
public class JetBrains.ReSharper.Psi.Resx.Impl.Tree.References.XmlTagRange`1 : object {
    private TOwner myTag;
    private TreeTextRange myWithinRange;
    private CachedPsiValue`1<string> myCachedText;
    private CachedPsiValue`1<TreeTextRange> myCachedTreeTextRange;
    public TOwner Tag { get; }
    public TreeTextRange WithinRange { get; }
    public XmlTagRange`1(TOwner owner, TreeTextRange withinRange);
    public TOwner get_Tag();
    public TreeTextRange get_WithinRange();
    public string GetText();
    public TreeTextRange GetTreeTextRange();
    private string TextCalculator();
}
internal class JetBrains.ReSharper.Psi.Resx.Impl.Tree.ResxAssemblyTagAliasAttribute : ResxIdentifierAttribute {
    public ResxAssemblyTagAliasAttribute(XmlCompositeNodeType elementType);
}
internal class JetBrains.ReSharper.Psi.Resx.Impl.Tree.ResxAssemblyTagDeclaration : ResxTagDeclaration {
    public string DeclaredName { get; }
    public string Alias { get; }
    public string Name { get; }
    public IResxAssemblyTagAliasAttribute AliasAttribute { get; }
    public IResxAssemblyTagNameAttribute NameAttribute { get; }
    public ResxAssemblyTagDeclaration(XmlCompositeNodeType elementType);
    public virtual string get_DeclaredName();
    public sealed virtual string get_Alias();
    public sealed virtual string get_Name();
    public sealed virtual IResxAssemblyTagAliasAttribute get_AliasAttribute();
    public sealed virtual IResxAssemblyTagNameAttribute get_NameAttribute();
    protected virtual IResxDeclaredElement CreateDeclaredElement();
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.Resx.Impl.Tree.ResxAssemblyTagNameAttribute : ResxAttribute {
    private static Regex ourAssemblyNameParser;
    public ResxAssemblyTagNameAttribute(XmlCompositeNodeType elementType);
    private static ResxAssemblyTagNameAttribute();
    protected virtual ReferenceCollection CreateFirstClassReferences();
}
internal class JetBrains.ReSharper.Psi.Resx.Impl.Tree.ResxAttribute : XmlAttribute {
    protected ResxAttribute(XmlCompositeNodeType type);
}
internal class JetBrains.ReSharper.Psi.Resx.Impl.Tree.ResxDataCommentTag : ResxTag {
    public ResxDataCommentTag(XmlCompositeNodeType elementType);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.Psi.Resx.Impl.Tree.ResxDataTagDeclaration : ResxTagDeclaration {
    public IResxDataTagNameAttribute NameAttribute { get; }
    public IResxDataTagTypeAttribute TypeAttribute { get; }
    public IResxDataTagMimetypeAttribute MimetypeAttribute { get; }
    public IResxDataValueTag Value { get; }
    public IResxDataCommentTag Comment { get; }
    [NullableAttribute("1")]
public IType Type { get; }
    [NullableAttribute("1")]
public IType ValueType { get; }
    private IResxDataTag JetBrains.ReSharper.Psi.Resx.Tree.IResxDataTagDeclaration.DeclaredElement { get; }
    [NullableContextAttribute("1")]
public ResxDataTagDeclaration(XmlCompositeNodeType elementType);
    public sealed virtual IResxDataTagNameAttribute get_NameAttribute();
    public sealed virtual IResxDataTagTypeAttribute get_TypeAttribute();
    public sealed virtual IResxDataTagMimetypeAttribute get_MimetypeAttribute();
    public sealed virtual IResxDataValueTag get_Value();
    public sealed virtual IResxDataCommentTag get_Comment();
    [NullableContextAttribute("1")]
public sealed virtual IType get_Type();
    [NullableContextAttribute("1")]
public sealed virtual IType get_ValueType();
    public sealed virtual bool IsStringValue();
    public sealed virtual bool IsLinkedFileValue();
    private sealed virtual override IResxDataTag JetBrains.ReSharper.Psi.Resx.Tree.IResxDataTagDeclaration.get_DeclaredElement();
    public sealed virtual string GetStringValue();
    public sealed virtual string GetStringComment();
    public sealed virtual IPathDeclaredElement GetLinkedFile();
    [NullableContextAttribute("1")]
protected virtual IResxDeclaredElement CreateDeclaredElement();
    [NullableContextAttribute("1")]
public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.Resx.Impl.Tree.ResxDataTagMimetypeAttribute : ResxAttribute {
    public ResxDataTagMimetypeAttribute(XmlCompositeNodeType elementType);
}
internal class JetBrains.ReSharper.Psi.Resx.Impl.Tree.ResxDataTagNameAttribute : ResxIdentifierAttribute {
    public ResxDataTagNameAttribute(XmlCompositeNodeType elementType);
}
internal class JetBrains.ReSharper.Psi.Resx.Impl.Tree.ResxDataTagTypeAttribute : ResxAttribute {
    public IType Type { get; }
    public ResxDataTagTypeAttribute(XmlCompositeNodeType elementType);
    public sealed virtual IType get_Type();
    protected virtual ReferenceCollection CreateFirstClassReferences();
}
internal class JetBrains.ReSharper.Psi.Resx.Impl.Tree.ResxDataValueTag : ResxTag {
    private ITypeReference myTypeReference;
    public IType Type { get; }
    public ResxDataValueTag(XmlCompositeNodeType elementType);
    public sealed virtual IType get_Type();
    protected virtual void PreInit();
    protected virtual ReferenceCollection CreateFirstClassReferences();
}
internal class JetBrains.ReSharper.Psi.Resx.Impl.Tree.ResxFile : XmlFile {
    private CachedPsiValue`1<OneToListMap`2<string, IResxAssemblyTagDeclaration>> myAliases;
    private CachedPsiValue`1<OneToListMap`2<string, IResxDataTagDeclaration>> myDataTags;
    private object mySentry;
    public ResxFile(XmlCompositeNodeType elementType);
    protected virtual void PreInit();
    public sealed virtual IResxRootTagDeclaration GetRootTag();
    public sealed virtual IEnumerable`1<IResxResheaderTagDeclaration> GetResheaderTags();
    public sealed virtual IEnumerable`1<IResxMetadataTagDeclaration> GetMetadataTags();
    public sealed virtual IEnumerable`1<IResxAssemblyTagDeclaration> GetAssemblyTags();
    public sealed virtual OneToListMap`2<string, IResxAssemblyTagDeclaration> GetAssemblyAliasesByName();
    public sealed virtual ICollection`1<IResxAssemblyTagDeclaration> GetAssemblyAlias(string alias);
    public sealed virtual IEnumerable`1<IResxDataTagDeclaration> GetDataTags();
    public sealed virtual IEnumerable`1<IResxDataTagDeclaration> GetDataTags(string name);
    protected virtual void ClearCachedData();
    private OneToListMap`2<string, IResxAssemblyTagDeclaration> FindAllAssemblyTagDeclaration();
    private OneToListMap`2<string, IResxDataTagDeclaration> FindAllDataTags();
    private TreeNodeEnumerable`1<T> GetRootTagChildNodes();
}
internal abstract class JetBrains.ReSharper.Psi.Resx.Impl.Tree.ResxIdentifierAttribute : ResxAttribute {
    protected ResxIdentifierAttribute(XmlCompositeNodeType type);
    public sealed virtual TreeTextRange GetNameRange();
    public sealed virtual void SetName(string name);
}
internal class JetBrains.ReSharper.Psi.Resx.Impl.Tree.ResxMetadaTagMimetypeAttribute : ResxAttribute {
    public ResxMetadaTagMimetypeAttribute(XmlCompositeNodeType elementType);
}
internal class JetBrains.ReSharper.Psi.Resx.Impl.Tree.ResxMetadaTagNameAttribute : ResxIdentifierAttribute {
    public ResxMetadaTagNameAttribute(XmlCompositeNodeType elementType);
}
internal class JetBrains.ReSharper.Psi.Resx.Impl.Tree.ResxMetadaTagTypeAttribute : ResxAttribute {
    public ResxMetadaTagTypeAttribute(XmlCompositeNodeType elementType);
    protected virtual ReferenceCollection CreateFirstClassReferences();
}
internal class JetBrains.ReSharper.Psi.Resx.Impl.Tree.ResxMetadataTagDeclaration : ResxTagDeclaration {
    public IResxMetadaTagNameAttribute NameAttribute { get; }
    public IResxMetadaTagTypeAttribute TypeAttribute { get; }
    public IResxMetadaTagMimetypeAttribute MimetypeAttribute { get; }
    public IResxMetadaValueTag Value { get; }
    public ResxMetadataTagDeclaration(XmlCompositeNodeType elementTypes);
    public sealed virtual IResxMetadaTagNameAttribute get_NameAttribute();
    public sealed virtual IResxMetadaTagTypeAttribute get_TypeAttribute();
    public sealed virtual IResxMetadaTagMimetypeAttribute get_MimetypeAttribute();
    public sealed virtual IResxMetadaValueTag get_Value();
    protected virtual IResxDeclaredElement CreateDeclaredElement();
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.Resx.Impl.Tree.ResxMetadaValueTag : ResxTag {
    public ResxMetadaValueTag(XmlCompositeNodeType elementType);
    protected virtual ReferenceCollection CreateFirstClassReferences();
}
internal class JetBrains.ReSharper.Psi.Resx.Impl.Tree.ResxResheaderTagDeclaration : ResxTagDeclaration {
    public IResxResheaderTagNameAttribute NameAttribute { get; }
    public IResxResheaderValueTag Value { get; }
    public ResxResheaderTagDeclaration(XmlCompositeNodeType elementType);
    public sealed virtual IResxResheaderTagNameAttribute get_NameAttribute();
    public sealed virtual IResxResheaderValueTag get_Value();
    protected virtual IResxDeclaredElement CreateDeclaredElement();
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.Resx.Impl.Tree.ResxResheaderTagNameAttribute : ResxIdentifierAttribute {
    public ResxResheaderTagNameAttribute(XmlCompositeNodeType elementType);
}
internal class JetBrains.ReSharper.Psi.Resx.Impl.Tree.ResxResheaderValueTag : ResxTag {
    public ResxResheaderValueTag(XmlCompositeNodeType elementType);
    protected virtual ReferenceCollection CreateFirstClassReferences();
}
internal class JetBrains.ReSharper.Psi.Resx.Impl.Tree.ResxRootTagDeclaration : ResxTagDeclaration {
    public ResxRootTagDeclaration(XmlCompositeNodeType elementType);
    protected virtual IResxDeclaredElement CreateDeclaredElement();
    public virtual string ToString();
}
internal abstract class JetBrains.ReSharper.Psi.Resx.Impl.Tree.ResxTag : XmlTag {
    protected ResxTag(XmlCompositeNodeType type);
}
internal abstract class JetBrains.ReSharper.Psi.Resx.Impl.Tree.ResxTagDeclaration : ResxTag {
    private CachedPsiValue`1<TreeTextRange> myPsiValue;
    [CompilerGeneratedAttribute]
private IDeclaredElement <CachedDeclaredElement>k__BackingField;
    [CanBeNullAttribute]
public IDeclaredElement CachedDeclaredElement { get; public set; }
    public IDeclaredElement DeclaredElement { get; }
    private IResxDeclaredElement JetBrains.ReSharper.Psi.Resx.Tree.IResxDeclaration.DeclaredElement { get; }
    public string DeclaredName { get; }
    protected ResxTagDeclaration(XmlCompositeNodeType type);
    protected virtual void PreInit();
    [CompilerGeneratedAttribute]
public sealed virtual IDeclaredElement get_CachedDeclaredElement();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CachedDeclaredElement(IDeclaredElement value);
    public virtual IDeclaredElement get_DeclaredElement();
    private sealed virtual override IResxDeclaredElement JetBrains.ReSharper.Psi.Resx.Tree.IResxDeclaration.get_DeclaredElement();
    public virtual string get_DeclaredName();
    public virtual void SetName(string name);
    public virtual TreeTextRange GetNameRange();
    private TreeTextRange CalculateNameRange();
    public virtual XmlNode GetXMLDoc(bool inherit);
    public virtual bool IsSynthetic();
    protected virtual void ClearCachedData();
    protected abstract virtual IResxDeclaredElement CreateDeclaredElement();
}
public class JetBrains.ReSharper.Psi.Resx.Properties.AssemblyReferenceClass_PsiResx : object {
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Psi.Resx.ResourceDefaultLanguage.ResourceDefaultLanguageProperty : object {
    public static string PropertName;
    public static string DefaultValue;
    [ExtensionAttribute]
[NotNullAttribute]
public static string GetDefaultResourceLanguage(IProject project);
    public static string ExtractLanguage(XmlDocument document);
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.Psi.Resx.ResourceDefaultLanguage.ResourceDefaultLanguagePropertyProvider : object {
    private Lifetime myLifetime;
    private ISolution mySolution;
    private IShellLocks myLocks;
    public int Version { get; }
    public ResourceDefaultLanguagePropertyProvider(Lifetime lifetime, ISolution solution, IShellLocks locks, IProjectFileDataCache cache);
    public sealed virtual int get_Version();
    public sealed virtual string Read(VirtualFileSystemPath projectFileLocation, BinaryReader reader);
    public sealed virtual void Write(VirtualFileSystemPath projectFileLocation, BinaryWriter writer, string data);
    public sealed virtual bool CanHandle(VirtualFileSystemPath projectFileLocation);
    public sealed virtual string BuildData(VirtualFileSystemPath path, XmlDocument xmlDocument);
    public sealed virtual Action OnDataChanged(VirtualFileSystemPath projectFileLocation, string oldData, string newData);
}
public class JetBrains.ReSharper.Psi.Resx.Resources.PsiResxThemedIcons : object {
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public static class JetBrains.ReSharper.Psi.Resx.Resources.Strings : object {
    private static ILogger ourLog;
    private static Lazy`1<JetResourceManager> ourResourceManager;
    [EditorBrowsableAttribute("2")]
public static JetResourceManager ResourceManager { get; }
    public static string CodeFormattingInResxSettingDescription { get; }
    public static string ResxFormatterPredefinedSettings_Text { get; }
    public static string AssemblyAlias_Text { get; }
    public static string Resource_Text { get; }
    public static string ResourceHeader_Text { get; }
    public static string ResourceMetadata_Text { get; }
    public static string ResourceItem_Text { get; }
    private static Strings();
    public static JetResourceManager get_ResourceManager();
    public static string Choice(string format, Object[] args);
    public static string get_CodeFormattingInResxSettingDescription();
    public static string get_ResxFormatterPredefinedSettings_Text();
    public static string get_AssemblyAlias_Text();
    public static string get_Resource_Text();
    public static string get_ResourceHeader_Text();
    public static string get_ResourceMetadata_Text();
    public static string get_ResourceItem_Text();
}
[LanguageDefinitionAttribute("RESX")]
[DescriptionAttribute("Resources")]
public class JetBrains.ReSharper.Psi.Resx.ResxLanguage : XmlLanguage {
    public static string Name;
    [CompilerGeneratedAttribute]
private static ResxLanguage <Instance>k__BackingField;
    [CanBeNullAttribute]
[UsedImplicitlyAttribute]
public static ResxLanguage Instance { get; private set; }
    public PsiLanguageCategories SupportedCategories { get; }
    protected ResxLanguage(string name);
    protected ResxLanguage(string name, string presentableName);
    [CompilerGeneratedAttribute]
public static ResxLanguage get_Instance();
    [CompilerGeneratedAttribute]
private static void set_Instance(ResxLanguage value);
    public virtual PsiLanguageCategories get_SupportedCategories();
}
public abstract class JetBrains.ReSharper.Psi.Resx.ResxLanguageService : XmlLanguageService {
    public ITypePresenter TypePresenter { get; }
    public IDeclaredElementPresenter DeclaredElementPresenter { get; }
    protected ResxLanguageService(ResxLanguage languageType, IConstantValueService constantValueService, XmlTokenTypes tokenTypes, IXmlElementFactory elementFactory, ResxCodeFormatter codeFormatter, CommonIdentifierIntern commonIdentifierIntern);
    public virtual ITypePresenter get_TypePresenter();
    public virtual IDeclaredElementPresenter get_DeclaredElementPresenter();
    public virtual IReferenceContextCodec CreateReferenceContextCodec();
    public virtual bool IsTypeMemberVisible(ITypeMember member);
}
public interface JetBrains.ReSharper.Psi.Resx.Tree.IAssemblyAliasReference {
}
public interface JetBrains.ReSharper.Psi.Resx.Tree.IAssemblyReference {
    [CanBeNullAttribute]
public abstract virtual IPsiModule ResolvePsiModule();
}
public interface JetBrains.ReSharper.Psi.Resx.Tree.INamespaceReference {
}
public interface JetBrains.ReSharper.Psi.Resx.Tree.IResourceFileReference {
    [NotNullAttribute]
public abstract virtual ICollection`1<IPsiSourceFile> FindResourceFiles();
}
public interface JetBrains.ReSharper.Psi.Resx.Tree.IResourceItemReference {
    [NotNullAttribute]
public abstract virtual string GetDefaultName();
}
public interface JetBrains.ReSharper.Psi.Resx.Tree.IResourceReference {
    [CanBeNullAttribute]
public abstract virtual ICollection`1<IPsiSourceFile> FindResourceFiles();
}
public interface JetBrains.ReSharper.Psi.Resx.Tree.IResourceVirtualReference {
}
public interface JetBrains.ReSharper.Psi.Resx.Tree.IResxAssemblyTag {
}
public interface JetBrains.ReSharper.Psi.Resx.Tree.IResxAssemblyTagAliasAttribute {
}
public interface JetBrains.ReSharper.Psi.Resx.Tree.IResxAssemblyTagDeclaration {
    [CanBeNullAttribute]
public string Alias { get; }
    [CanBeNullAttribute]
public string Name { get; }
    [CanBeNullAttribute]
public IResxAssemblyTagAliasAttribute AliasAttribute { get; }
    [CanBeNullAttribute]
public IResxAssemblyTagNameAttribute NameAttribute { get; }
    public abstract virtual string get_Alias();
    public abstract virtual string get_Name();
    public abstract virtual IResxAssemblyTagAliasAttribute get_AliasAttribute();
    public abstract virtual IResxAssemblyTagNameAttribute get_NameAttribute();
}
public interface JetBrains.ReSharper.Psi.Resx.Tree.IResxAssemblyTagNameAttribute {
}
public interface JetBrains.ReSharper.Psi.Resx.Tree.IResxAttribute {
}
public interface JetBrains.ReSharper.Psi.Resx.Tree.IResxDataCommentTag {
}
public interface JetBrains.ReSharper.Psi.Resx.Tree.IResxDataTag {
    public IType Type { get; }
    public IType ValueType { get; }
    public bool IsStringValue { get; }
    public bool IsLinkedFileValue { get; }
    public abstract virtual IType get_Type();
    public abstract virtual IType get_ValueType();
    public abstract virtual bool get_IsStringValue();
    public abstract virtual bool get_IsLinkedFileValue();
    [CanBeNullAttribute]
public abstract virtual string GetStringValue();
    [CanBeNullAttribute]
public abstract virtual string GetValueText();
    [CanBeNullAttribute]
public abstract virtual IPathDeclaredElement GetLinkedFile();
}
[NullableContextAttribute("2")]
public interface JetBrains.ReSharper.Psi.Resx.Tree.IResxDataTagDeclaration {
    [NullableAttribute("1")]
public IType Type { get; }
    [NullableAttribute("1")]
public IType ValueType { get; }
    public IResxDataTagNameAttribute NameAttribute { get; }
    public IResxDataTagTypeAttribute TypeAttribute { get; }
    public IResxDataTagMimetypeAttribute MimetypeAttribute { get; }
    public IResxDataValueTag Value { get; }
    public IResxDataCommentTag Comment { get; }
    public IResxDataTag DeclaredElement { get; }
    [NullableContextAttribute("1")]
public abstract virtual IType get_Type();
    [NullableContextAttribute("1")]
public abstract virtual IType get_ValueType();
    public abstract virtual IResxDataTagNameAttribute get_NameAttribute();
    public abstract virtual IResxDataTagTypeAttribute get_TypeAttribute();
    public abstract virtual IResxDataTagMimetypeAttribute get_MimetypeAttribute();
    public abstract virtual IResxDataValueTag get_Value();
    public abstract virtual IResxDataCommentTag get_Comment();
    public abstract virtual string GetStringValue();
    public abstract virtual string GetStringComment();
    public abstract virtual IPathDeclaredElement GetLinkedFile();
    public abstract virtual bool IsStringValue();
    public abstract virtual bool IsLinkedFileValue();
    public abstract virtual IResxDataTag get_DeclaredElement();
}
public interface JetBrains.ReSharper.Psi.Resx.Tree.IResxDataTagMimetypeAttribute {
}
public interface JetBrains.ReSharper.Psi.Resx.Tree.IResxDataTagNameAttribute {
}
public interface JetBrains.ReSharper.Psi.Resx.Tree.IResxDataTagTypeAttribute {
}
public interface JetBrains.ReSharper.Psi.Resx.Tree.IResxDataValueTag {
    [NotNullAttribute]
public IType Type { get; }
    public abstract virtual IType get_Type();
}
public interface JetBrains.ReSharper.Psi.Resx.Tree.IResxDeclaration {
    [CanBeNullAttribute]
public IResxDeclaredElement DeclaredElement { get; }
    public abstract virtual IResxDeclaredElement get_DeclaredElement();
}
public interface JetBrains.ReSharper.Psi.Resx.Tree.IResxDeclaredElement {
}
public interface JetBrains.ReSharper.Psi.Resx.Tree.IResxFile {
    [CanBeNullAttribute]
public abstract virtual IResxRootTagDeclaration GetRootTag();
    [NotNullAttribute]
public abstract virtual IEnumerable`1<IResxResheaderTagDeclaration> GetResheaderTags();
    [NotNullAttribute]
public abstract virtual IEnumerable`1<IResxAssemblyTagDeclaration> GetAssemblyTags();
    [NotNullAttribute]
public abstract virtual IEnumerable`1<IResxMetadataTagDeclaration> GetMetadataTags();
    [NotNullAttribute]
public abstract virtual IEnumerable`1<IResxDataTagDeclaration> GetDataTags();
    [NotNullAttribute]
public abstract virtual IEnumerable`1<IResxDataTagDeclaration> GetDataTags(string name);
    [NotNullAttribute]
public abstract virtual OneToListMap`2<string, IResxAssemblyTagDeclaration> GetAssemblyAliasesByName();
    [NotNullAttribute]
public abstract virtual ICollection`1<IResxAssemblyTagDeclaration> GetAssemblyAlias(string alias);
}
public interface JetBrains.ReSharper.Psi.Resx.Tree.IResxIdentifierAttribute {
    public abstract virtual void SetName(string name);
    public abstract virtual TreeTextRange GetNameRange();
}
public interface JetBrains.ReSharper.Psi.Resx.Tree.IResxMetadaTagMimetypeAttribute {
}
public interface JetBrains.ReSharper.Psi.Resx.Tree.IResxMetadaTagNameAttribute {
}
public interface JetBrains.ReSharper.Psi.Resx.Tree.IResxMetadaTagTypeAttribute {
}
public interface JetBrains.ReSharper.Psi.Resx.Tree.IResxMetadataTagDeclaration {
    public IResxMetadaTagNameAttribute NameAttribute { get; }
    public IResxMetadaTagTypeAttribute TypeAttribute { get; }
    public IResxMetadaTagMimetypeAttribute MimetypeAttribute { get; }
    public IResxMetadaValueTag Value { get; }
    public abstract virtual IResxMetadaTagNameAttribute get_NameAttribute();
    public abstract virtual IResxMetadaTagTypeAttribute get_TypeAttribute();
    public abstract virtual IResxMetadaTagMimetypeAttribute get_MimetypeAttribute();
    public abstract virtual IResxMetadaValueTag get_Value();
}
public interface JetBrains.ReSharper.Psi.Resx.Tree.IResxMetadaValueTag {
}
public interface JetBrains.ReSharper.Psi.Resx.Tree.IResxResheaderTagDeclaration {
    [CanBeNullAttribute]
public IResxResheaderTagNameAttribute NameAttribute { get; }
    public IResxResheaderValueTag Value { get; }
    public abstract virtual IResxResheaderTagNameAttribute get_NameAttribute();
    public abstract virtual IResxResheaderValueTag get_Value();
}
public interface JetBrains.ReSharper.Psi.Resx.Tree.IResxResheaderTagNameAttribute {
}
public interface JetBrains.ReSharper.Psi.Resx.Tree.IResxResheaderValueTag {
}
public interface JetBrains.ReSharper.Psi.Resx.Tree.IResxRootTagDeclaration {
}
public interface JetBrains.ReSharper.Psi.Resx.Tree.IResxTag {
}
public interface JetBrains.ReSharper.Psi.Resx.Tree.IResxTypeReference {
    [NotNullAttribute]
public IType Type { get; }
    public abstract virtual IType get_Type();
}
public interface JetBrains.ReSharper.Psi.Resx.Tree.IResxVirtualDeclaredElement {
    public IPsiModule PsiModule { get; }
    public abstract virtual IPsiModule get_PsiModule();
    public abstract virtual bool CanRelateWith(IPsiSourceFile resourceFile);
}
public interface JetBrains.ReSharper.Psi.Resx.Tree.ISkippedReference {
    public abstract virtual void MarkAsSkipped(bool ignorable);
}
public interface JetBrains.ReSharper.Psi.Resx.Tree.ITypeReference {
    public bool IsResultType { get; public set; }
    public ITypeReference[] GenericArguments { get; }
    public abstract virtual bool get_IsResultType();
    public abstract virtual void set_IsResultType(bool value);
    public abstract virtual ITypeReference[] get_GenericArguments();
    public abstract virtual IType GetReferencedType();
    public abstract virtual string GetTypeName(bool onlyName);
    public abstract virtual int GetGenericArgumentsCount();
}
public class JetBrains.ReSharper.Psi.Resx.Tree.ResxResolveErrorType : ResolveErrorType {
    public static ResolveErrorType RESOURCE_NOT_RESOLVED;
    public static ResolveErrorType RESOURCE_ITEM_NOT_RESOLVED;
    protected ResxResolveErrorType(string name);
    private static ResxResolveErrorType();
}
public static class JetBrains.ReSharper.Psi.Resx.Utils.CodeDomUtils : object {
    private static Dictionary`2<ProjectFileType, CodeDomProvider> ourProviders;
    private static CodeDomUtils();
    [CanBeNullAttribute]
public static CodeDomProvider GetCodeDomProvider(PsiLanguageType languageType, IProjectFileExtensions projectFileExtensions);
    [CanBeNullAttribute]
public static CodeDomProvider GetCodeDomProvider(ProjectFileType projectFileType, IProjectFileExtensions projectFileExtensions);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Psi.Resx.Utils.StringFormatUtil : object {
    private static Regex ourFormaParser;
    private static StringFormatUtil();
    [ExtensionAttribute]
public static int GetMaxFormatArgsIndex(string value);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static string ConvertToString(object value);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Psi.Resx.Utils.TextRangesUtil : object {
    [ExtensionAttribute]
[ObsoleteAttribute("Dangerous! Use range translator")]
public static TextRange ToTextRange(TreeTextRange range);
    [ExtensionAttribute]
[ObsoleteAttribute("Dangerous! Use range translator")]
public static TreeTextRange ToTreeTextRange(TextRange range);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Psi.Resx.Utils.XmlAttributeUtil : object {
    [ExtensionAttribute]
[ContractAnnotationAttribute("null <= null")]
public static string GetValue(IXmlAttribute xmlAttribute);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static string GetValue(IXmlAttribute xmlAttribute, RangeTranslator& translator);
    [ExtensionAttribute]
public static void GetValue(IXmlAttribute xmlAttribute, StringBuilder builder, RangeTranslator translator);
    [ExtensionAttribute]
public static TreeTextRange GetValueRange(IXmlAttribute xmlAttribute);
    [ExtensionAttribute]
public static TreeTextRange GetValueRange(IXmlAttribute xmlAttribute, TreeTextRange withinRange);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Psi.Resx.Utils.XmlElementUtil : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static string GetValue(IXmlTreeNode xmlElement);
    [ExtensionAttribute]
[NotNullAttribute]
public static string GetValue(IXmlTreeNode xmlElement, RangeTranslator& translator);
    [ExtensionAttribute]
public static TreeTextRange GetValueRange(IXmlTreeNode xmlElement);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Psi.Resx.Utils.XmlTagUtil : object {
    [ExtensionAttribute]
[CanBeNullAttribute]
public static string GetValue(IXmlTag xmlTag);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static string GetValue(IXmlTag xmlTag, RangeTranslator& translator);
    [ExtensionAttribute]
private static void GetValue(IXmlTag xmlTag, StringBuilder builder, RangeTranslator translator);
    private static void UpdateRanges(RangeTranslator source, RangeTranslator target);
    private static RangeMap GetFirstCharMap(RangeTranslator rangeTranslator);
    private static RangeMap GetLastCharMap(RangeTranslator rangeTranslator);
    [ExtensionAttribute]
public static TreeTextRange GetValueRange(IXmlTag xmlTag);
    [ExtensionAttribute]
public static TreeTextRange GetValueWithinRange(IXmlTag xmlTag);
    [ExtensionAttribute]
public static TreeTextRange GetValueRange(IXmlTag xmlTag, TreeTextRange withinRange);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Psi.Resx.ZoneMarker : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
