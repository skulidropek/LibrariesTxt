public class JetBrains.ReSharper.Psi.Xaml.AssemblyReferenceClass_PsiFeaturesPsiXaml : AssemblyReferenceClass_ComponentModel {
}
public interface JetBrains.ReSharper.Psi.Xaml.Caches.IXamlAssemblyResourcesCache {
    [NotNullAttribute]
public abstract virtual ICollection`1<VirtualFileSystemPath> GetResourceFolders(IPsiAssembly assembly);
    [NotNullAttribute]
public abstract virtual ICollection`1<VirtualFileSystemPath> GetResourceFiles(IPsiAssembly assembly);
    public abstract virtual bool HasResources(IPsiAssembly assembly);
    [CanBeNullAttribute]
public abstract virtual string GetBamlPathForType(IPsiAssembly assembly, IClrTypeName typeName);
    [NotNullAttribute]
public abstract virtual IList`1<IResourceDictionaryRecord> GetBamlResources(IPsiAssembly assembly, VirtualFileSystemPath bamlPath);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Psi.Xaml.CSharp.Impl.Resolve.XamlCSharpFunctionResolver : object {
    public sealed virtual ResolveResultWithInfo ResolveMethod(IXamlFunctionReference functionReference, bool filterByName, ISymbolTable symbolTable, IAccessContext context);
    private bool ParamsExpanded(ISymbolInfo candidate, List`1<ICSharpArgumentInfo> argumentInfos);
    private static ResolveResultWithInfo CreateResolveResult(IList`1<ISymbolInfo> candidates, IResolveInfo resolveInfo);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Psi.Xaml.CSharp.Impl.Resolve.XamlCSharpMethodGroupConvertibleFilterFactory : object {
    public sealed virtual SimpleSymbolFilter CreateMethodGroupConvertibleFilter(ITreeNode xamlContext, DeclaredElementInstance`1<IDelegate> eventTypeInstance);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Psi.Xaml.CSharp.Impl.Resolve.XamlCSharpModifiersSupport : object {
    public string PublicString { get; }
    public string InternalString { get; }
    public string PrivateString { get; }
    public string ProtectedString { get; }
    public sealed virtual string get_PublicString();
    public sealed virtual string get_InternalString();
    public sealed virtual string get_PrivateString();
    public sealed virtual string get_ProtectedString();
    public sealed virtual IEqualityComparer`1<string> GetModifierComparer(ITreeNode context);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Psi.Xaml.CSharp.Impl.Resolve.XamlCSharpNullExpressionTypeProvider : object {
    public sealed virtual IExpressionType CreateNullExpressionType(IPsiModule psiModule);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Psi.Xaml.CSharp.Impl.Resolve.XamlCSharpTypeConversionRuleProvider : object {
    public sealed virtual ITypeConversionRule GetTypeConversionRule(IPsiModule module, bool useStrict);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Psi.Xaml.CSharp.ZoneMarker : object {
}
public interface JetBrains.ReSharper.Psi.Xaml.DeclaredElements.IXamlAttachedEvent {
}
public interface JetBrains.ReSharper.Psi.Xaml.DeclaredElements.IXamlAttachedProperty {
}
public interface JetBrains.ReSharper.Psi.Xaml.DeclaredElements.IXamlAttributeDeclaredElement {
}
public interface JetBrains.ReSharper.Psi.Xaml.DeclaredElements.IXamlConstantDeclaredElement {
    [NotNullAttribute]
public abstract virtual IExpressionType GetExpressionType(ITreeNode treeNode);
    public abstract virtual object GetValue();
}
public interface JetBrains.ReSharper.Psi.Xaml.DeclaredElements.IXamlDeclaredElement {
}
public interface JetBrains.ReSharper.Psi.Xaml.DeclaredElements.IXamlDeclaredElementsCache {
    [NotNullAttribute]
public IXamlNamespaceAlias XmlNamespaceAlias { get; }
    [NotNullAttribute]
public IXamlNamespaceAlias XmlnsNamespaceAlias { get; }
    [NotNullAttribute]
public IXamlObjectDeclaredElement XClassAttributes { get; }
    [NotNullAttribute]
public IXamlObjectDeclaredElement XAttributes { get; }
    [NotNullAttribute]
public IXamlObjectDeclaredElement XMembers { get; }
    [NotNullAttribute]
public IXamlObjectDeclaredElement XProperty { get; }
    [NotNullAttribute]
public IXamlAttributeDeclaredElement XPropertyAttributes { get; }
    [NotNullAttribute]
public IXamlAttributeDeclaredElement IgnorableAttribute { get; }
    [NotNullAttribute]
public IXamlAttributeDeclaredElement ProcessContentAttribute { get; }
    [NotNullAttribute]
public IXamlAttributeDeclaredElement ChoiceRequires { get; }
    [NotNullAttribute]
public IXamlObjectDeclaredElement Choice { get; }
    [CanBeNullAttribute]
public IXamlAttributeDeclaredElement FreezeAttribute { get; }
    [NotNullAttribute]
public IXamlObjectDeclaredElement DesignInstance { get; }
    [NotNullAttribute]
public IXamlObjectDeclaredElement DesignData { get; }
    [CanBeNullAttribute]
public IXamlAttributeDeclaredElement DesignDesignSourceAttribute { get; }
    [CanBeNullAttribute]
public IXamlAttributeDeclaredElement DesignSourceAttribute { get; }
    [NotNullAttribute]
public IXamlAttributeDeclaredElement DesignDataSourceAttribute { get; }
    [NotNullAttribute]
public IXamlAttributeDeclaredElement DesignInstanceTypeAttribute { get; }
    [NotNullAttribute]
public IXamlAttributeDeclaredElement DesignDataTypeAttribute { get; }
    [NotNullAttribute]
public IXamlAttributeDeclaredElement DesignInstanceCreateListAttribute { get; }
    [NotNullAttribute]
public IXamlAttributeDeclaredElement DesignInstanceIsDesignTimeCreatableAttribute { get; }
    [NotNullAttribute]
public IXamlAttributeDeclaredElement DataContextAttribute { get; }
    [NotNullAttribute]
public IXamlAttributeDeclaredElement DesignWidth { get; }
    [NotNullAttribute]
public IXamlAttributeDeclaredElement DesignHeight { get; }
    [NotNullAttribute]
public IXamlAttributeDeclaredElement DBackground { get; }
    [NotNullAttribute]
public IXamlAttributeDeclaredElement DItemsSourceAttribute { get; }
    [CanBeNullAttribute]
public IXamlObjectDeclaredElement CompiledBind { get; }
    [CanBeNullAttribute]
public IXamlAttributeDeclaredElement CompiledBindMode { get; }
    [CanBeNullAttribute]
public IXamlAttributeDeclaredElement CompiledBindUpdateSourceTrigger { get; }
    [CanBeNullAttribute]
public IXamlAttributeDeclaredElement CompiledBindConverter { get; }
    [CanBeNullAttribute]
public IXamlAttributeDeclaredElement CompiledBindDataType { get; }
    [CanBeNullAttribute]
public IXamlAttributeDeclaredElement DefaultBindMode { get; }
    [CanBeNullAttribute]
public IXamlAttributeDeclaredElement XamarinCompiledBindDataType { get; }
    [CanBeNullAttribute]
public IXamlAttributeDeclaredElement CompileBindings { get; }
    [NotNullAttribute]
[PureAttribute]
public abstract virtual IList`1<IXamlObjectDeclaredElement> GetObjectDeclaredElements(string uri);
    [NotNullAttribute]
[PureAttribute]
public abstract virtual IList`1<IXamlAttributeDeclaredElement> GetAttributeDeclaredElements(string uri);
    [NotNullAttribute]
[PureAttribute]
public abstract virtual IList`1<IXamlConstantDeclaredElement> GetConstantDeclaredElements(string uri);
    [NotNullAttribute]
[PureAttribute]
public abstract virtual IList`1<IXamlPseudoClassDeclaredElement> GetPseudoClassDeclaredElements(string uri);
    [NotNullAttribute]
[PureAttribute]
public abstract virtual IEnumerable`1<string> GetXmlns();
    public abstract virtual IXamlNamespaceAlias get_XmlNamespaceAlias();
    public abstract virtual IXamlNamespaceAlias get_XmlnsNamespaceAlias();
    public abstract virtual IXamlObjectDeclaredElement get_XClassAttributes();
    public abstract virtual IXamlObjectDeclaredElement get_XAttributes();
    public abstract virtual IXamlObjectDeclaredElement get_XMembers();
    public abstract virtual IXamlObjectDeclaredElement get_XProperty();
    public abstract virtual IXamlAttributeDeclaredElement get_XPropertyAttributes();
    public abstract virtual IXamlAttributeDeclaredElement get_IgnorableAttribute();
    public abstract virtual IXamlAttributeDeclaredElement get_ProcessContentAttribute();
    public abstract virtual IXamlAttributeDeclaredElement get_ChoiceRequires();
    public abstract virtual IXamlObjectDeclaredElement get_Choice();
    public abstract virtual IXamlAttributeDeclaredElement get_FreezeAttribute();
    public abstract virtual IXamlObjectDeclaredElement get_DesignInstance();
    public abstract virtual IXamlObjectDeclaredElement get_DesignData();
    public abstract virtual IXamlAttributeDeclaredElement get_DesignDesignSourceAttribute();
    public abstract virtual IXamlAttributeDeclaredElement get_DesignSourceAttribute();
    public abstract virtual IXamlAttributeDeclaredElement get_DesignDataSourceAttribute();
    public abstract virtual IXamlAttributeDeclaredElement get_DesignInstanceTypeAttribute();
    public abstract virtual IXamlAttributeDeclaredElement get_DesignDataTypeAttribute();
    public abstract virtual IXamlAttributeDeclaredElement get_DesignInstanceCreateListAttribute();
    public abstract virtual IXamlAttributeDeclaredElement get_DesignInstanceIsDesignTimeCreatableAttribute();
    public abstract virtual IXamlAttributeDeclaredElement get_DataContextAttribute();
    public abstract virtual IXamlAttributeDeclaredElement get_DesignWidth();
    public abstract virtual IXamlAttributeDeclaredElement get_DesignHeight();
    public abstract virtual IXamlAttributeDeclaredElement get_DBackground();
    public abstract virtual IXamlAttributeDeclaredElement get_DItemsSourceAttribute();
    public abstract virtual IXamlObjectDeclaredElement get_CompiledBind();
    public abstract virtual IXamlAttributeDeclaredElement get_CompiledBindMode();
    public abstract virtual IXamlAttributeDeclaredElement get_CompiledBindUpdateSourceTrigger();
    public abstract virtual IXamlAttributeDeclaredElement get_CompiledBindConverter();
    public abstract virtual IXamlAttributeDeclaredElement get_CompiledBindDataType();
    public abstract virtual IXamlAttributeDeclaredElement get_DefaultBindMode();
    public abstract virtual IXamlAttributeDeclaredElement get_XamarinCompiledBindDataType();
    public abstract virtual IXamlAttributeDeclaredElement get_CompileBindings();
}
public interface JetBrains.ReSharper.Psi.Xaml.DeclaredElements.IXamlEmbeddedResource {
    [NotNullAttribute]
public IPsiModule Module { get; }
    public abstract virtual IPsiModule get_Module();
}
public interface JetBrains.ReSharper.Psi.Xaml.DeclaredElements.IXamlExternalResource {
    [NotNullAttribute]
public IPsiModule ExternalModule { get; }
    [NotNullAttribute]
public VirtualFileSystemPath ResourcePath { get; }
    public abstract virtual IPsiModule get_ExternalModule();
    public abstract virtual VirtualFileSystemPath get_ResourcePath();
}
public interface JetBrains.ReSharper.Psi.Xaml.DeclaredElements.IXamlField {
}
public interface JetBrains.ReSharper.Psi.Xaml.DeclaredElements.IXamlImplicitField {
}
public interface JetBrains.ReSharper.Psi.Xaml.DeclaredElements.IXamlMarkupDeclaredElement {
}
public interface JetBrains.ReSharper.Psi.Xaml.DeclaredElements.IXamlNamespaceAlias {
    public bool IsDefault { get; }
    public bool IsUsingAlias { get; }
    public bool IsCLRNamespaceAlias { get; }
    public bool IsUrnAlias { get; }
    public bool CanBeIgnored { get; }
    [NotNullAttribute]
public string RawValue { get; }
    [NotNullAttribute]
public string UriNoArguments { get; }
    [NotNullAttribute]
public string UriArguments { get; }
    [NotNullAttribute]
public IPsiModule Module { get; }
    public XamlPlatform Platform { get; }
    public abstract virtual bool get_IsDefault();
    public abstract virtual bool get_IsUsingAlias();
    public abstract virtual bool get_IsCLRNamespaceAlias();
    public abstract virtual bool get_IsUrnAlias();
    public abstract virtual bool get_CanBeIgnored();
    public abstract virtual string get_RawValue();
    public abstract virtual string get_UriNoArguments();
    public abstract virtual string get_UriArguments();
    public abstract virtual IPsiModule get_Module();
    public abstract virtual XamlPlatform get_Platform();
    [CanBeNullAttribute]
public abstract virtual INamespaceAlias GetDeclaration();
    [CanBeNullAttribute]
public abstract virtual INamespace GetNamespace();
    [NotNullAttribute]
public abstract virtual IList`1<ReferencedNamespace> GetReferencedNamespaces();
    [NotNullAttribute]
public abstract virtual IList`1<IPsiModule> GetTargetModules();
}
public interface JetBrains.ReSharper.Psi.Xaml.DeclaredElements.IXamlObjectDeclaredElement {
    [NotNullAttribute]
public abstract virtual IList`1<IXamlAttributeDeclaredElement> GetPredefinedAttributes();
}
public interface JetBrains.ReSharper.Psi.Xaml.DeclaredElements.IXamlObjectDeclaredElementWithType {
    [NotNullAttribute]
public IPsiModule Module { get; }
    [CanBeNullAttribute]
public ITypeElement TypeElement { get; }
    public abstract virtual IPsiModule get_Module();
    public abstract virtual ITypeElement get_TypeElement();
}
public interface JetBrains.ReSharper.Psi.Xaml.DeclaredElements.IXamlPredefinedDeclaredElement {
    [NotNullAttribute]
public string DefaultXmlNsName { get; }
    [NotNullAttribute]
public string XmlNsUri { get; }
    public XamlLanguageLevel LanguageLevel { get; }
    public abstract virtual string get_DefaultXmlNsName();
    public abstract virtual string get_XmlNsUri();
    public abstract virtual XamlLanguageLevel get_LanguageLevel();
}
public interface JetBrains.ReSharper.Psi.Xaml.DeclaredElements.IXamlPredefinedNamespaceAlias {
}
public interface JetBrains.ReSharper.Psi.Xaml.DeclaredElements.IXamlPredefinedResourcesCache {
    [NotNullAttribute]
public abstract virtual ISymbolTable GetSymbolTable();
}
public interface JetBrains.ReSharper.Psi.Xaml.DeclaredElements.IXamlPredefinedTypeDeclaredElement {
    public bool CanBeMarkup { get; }
    public abstract virtual bool get_CanBeMarkup();
}
public interface JetBrains.ReSharper.Psi.Xaml.DeclaredElements.IXamlProperty {
}
public interface JetBrains.ReSharper.Psi.Xaml.DeclaredElements.IXamlPseudoClassDeclaredElement {
}
public interface JetBrains.ReSharper.Psi.Xaml.DeclaredElements.IXamlResource {
    [NotNullAttribute]
public IType ResourceType { get; }
    [CanBeNullAttribute]
public IType TypeKey { get; }
    [CanBeNullAttribute]
public IDeclaredElement StaticMemberKey { get; }
    [CanBeNullAttribute]
public IType TargetType { get; }
    [CanBeNullAttribute]
public string XamarinFormsClass { get; }
    [CanBeNullAttribute]
public abstract virtual IResourceDeclaration GetDeclaration();
    public abstract virtual IType get_ResourceType();
    public abstract virtual IType get_TypeKey();
    public abstract virtual IDeclaredElement get_StaticMemberKey();
    public abstract virtual IType get_TargetType();
    public abstract virtual string get_XamarinFormsClass();
}
public interface JetBrains.ReSharper.Psi.Xaml.DeclaredElements.IXamlStyleClass {
    public abstract virtual IClassSelectorExpression GetDeclaration();
}
public interface JetBrains.ReSharper.Psi.Xaml.DeclaredElements.IXamlTemplateField {
}
[PsiComponentAttribute("10")]
public class JetBrains.ReSharper.Psi.Xaml.DeclaredElements.XamlDeclaredElementsCache : XamlModuleTypeCache`2<IXamlDeclaredElementsCache, XamlDeclaredElementsCache> {
    public XamlDeclaredElementsCache(Lifetime lifetime, IPsiModules psiModules, ChangeManager changeManager);
    internal virtual IXamlDeclaredElementsCache CreateCache(XamlPlatformContext platformContext);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Psi.Xaml.DeclaredElements.XamlDeclaredElementsCacheExtensions : object {
    [ExtensionAttribute]
public static IList`1<IXamlObjectDeclaredElement> GetObjectDeclaredElements(IXamlDeclaredElementsCache cache, IXamlNamespaceAlias alias);
    [ExtensionAttribute]
public static IList`1<IXamlAttributeDeclaredElement> GetAttributeDeclaredElements(IXamlDeclaredElementsCache cache, IXamlNamespaceAlias alias);
    [ExtensionAttribute]
public static IList`1<IXamlObjectDeclaredElementWithType> GetObjectDeclaredElementsByTypeElement(IXamlDeclaredElementsCache cache, ITypeElement typeElement);
    [ExtensionAttribute]
public static IList`1<IXamlConstantDeclaredElement> GetDeclaredConstantsElements(IXamlDeclaredElementsCache cache, IXamlNamespaceAlias alias);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Psi.Xaml.DeclaredElements.XamlObjectDeclaredElementExtensions : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static IDeclaredType GetType(IXamlObjectDeclaredElementWithType element, ISubstitution substitution);
}
[PsiComponentAttribute("10")]
public class JetBrains.ReSharper.Psi.Xaml.DeclaredElements.XamlPredefinedResourcesCache : XamlModuleTypeCache`2<IXamlPredefinedResourcesCache, XamlPredefinedResourcesCache> {
    public XamlPredefinedResourcesCache(Lifetime lifetime, IPsiModules psiModules, ChangeManager changeManager);
    internal virtual IXamlPredefinedResourcesCache CreateCache(XamlPlatformContext platformContext);
}
public class JetBrains.ReSharper.Psi.Xaml.DeclaredElements.XamlPredefinedResourcesCacheImpl : object {
    [NotNullAttribute]
private ISymbolTable mySymbolTable;
    [NotNullAttribute]
private IXamlTypeCache myTypeCache;
    public XamlPredefinedResourcesCacheImpl(XamlPlatformContext platformContext);
    public sealed virtual ISymbolTable GetSymbolTable();
    [NotNullAttribute]
private ISymbolTable ReadFromEmbeddedResource(string resourceName, IPsiModule module);
    [CanBeNullAttribute]
private IType ResolveType(string typeName, IPsiModule module);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Psi.Xaml.DeclaredElements.XamlResourceExtensions : object {
    public static string EMPTY_STRING_NAME;
    public static string XTYPE_NAME;
    public static string XSTATIC_NAME;
    public static string CUSTOM_MARKUP_NAME;
    [ExtensionAttribute]
[CanBeNullAttribute]
public static object GetResourceKeyValue(IXamlResource resource);
    public static bool IsXType(string shortName);
    public static bool IsXStatic(string shortName);
    public static bool IsCustom(string shortName);
    [NotNullAttribute]
public static string GetXTypeName(ITypeUsage typeUsage);
    [NotNullAttribute]
public static string GetXStaticName(IXStatic xStatic);
}
public class JetBrains.ReSharper.Psi.Xaml.DeviceFamily.DeviceFamilyData : object {
    public DeviceFamilyType FamilyType;
    public DeviceFamilyLocation Location;
    public ViewLocation ViewLocation;
    public DeviceFamilyData(ViewLocation viewLocation, DeviceFamilyType familyType, DeviceFamilyLocation location);
    public DeviceFamilyData(ViewLocation viewLocation, DeviceFamilyType familyType, VirtualFileSystemPath folderPath, StringSlice fileNameWithoutExtension);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Psi.Xaml.DeviceFamily.DeviceFamilyDataEx : object {
    public static string DEVICE_FAMILY;
    public static string DEVICE_FAMILY_PREFIX;
    public static string DOTTED_DEVICE_FAMILY_PREFIX;
    private static String[] KNOWN_DEVICE_FAMILY_NAMES;
    private static DeviceFamilyType[] KNOWN_DEVICE_FAMILY_TYPES;
    private static DeviceFamilyDataEx();
    [ExtensionAttribute]
[CanBeNullAttribute]
public static DeviceFamilyData GetDeviceFamilyData(IPsiSourceFile sourceFile);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static DeviceFamilyData GetDeviceFamilyData(VirtualFileSystemPath filePath);
    public static IList`1<VirtualFileSystemPath> GetDeviceFamilyNamePaths(VirtualFileSystemPath filePath);
    public static IList`1<VirtualFileSystemPath> GetDeviceFamilyNamePaths(VirtualFileSystemPath folder, StringSlice fileNameWithoutExtension);
    private static DeviceFamilyType GetDeviceFamilyType(StringSlice slice);
    [CanBeNullAttribute]
private static DeviceFamilyData GetDeviceFamilyDataFromFilePath(VirtualFileSystemPath filePath);
    private static DeviceFamilyType GetDeviceFamilyTypeFromFolder(VirtualFileSystemPath folderPath);
    public static DeviceFamilyType[] AllDeviceFamilyTypes();
    [ExtensionAttribute]
public static string GetPresentableName(DeviceFamilyType type);
    [ExtensionAttribute]
public static bool IsKnownDeviceFamily(DeviceFamilyType type);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Psi.Xaml.DeviceFamily.DeviceFamilyDataEx/<GetExistingViewDeviceFamilyTypes>d__15")]
[ExtensionAttribute]
public static IEnumerable`1<DeviceFamilyType> GetExistingViewDeviceFamilyTypes(DeviceFamilyData data, IProject project);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Psi.Xaml.DeviceFamily.DeviceFamilyDataEx/<GetDeviceFamilyViewFreeSpots>d__16")]
[ExtensionAttribute]
public static IEnumerable`1<Pair`2<DeviceFamilyType, VirtualFileSystemPath>> GetDeviceFamilyViewFreeSpots(DeviceFamilyLocation location, IProject project, ViewLocation preferrableLocation);
    [ExtensionAttribute]
public static String[] GetRelativePaths(DeviceFamilyLocation location, DeviceFamilyType familyType, ViewLocation viewLocation);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Psi.Xaml.DeviceFamily.DeviceFamilyEx : object {
    [ExtensionAttribute]
public static bool DeviceFamilyViewsAllowed(ITreeNode treeNode);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static DeviceFamilyLocation GetDeviceFamilyLocation(IDeclaration declaration);
    [ExtensionAttribute]
public static bool IsDeviceFamilyView(IXamlTypeDeclaration typeDecl, IXamlTypeDeclaration otherTypeDecl);
}
public class JetBrains.ReSharper.Psi.Xaml.DeviceFamily.DeviceFamilyLocation : object {
    [NotNullAttribute]
public VirtualFileSystemPath FolderPath;
    public StringSlice FileNameWithoutExtension;
    public DeviceFamilyLocation(VirtualFileSystemPath folderPath, StringSlice fileNameWithoutExtension);
    protected bool Equals(DeviceFamilyLocation other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(DeviceFamilyLocation left, DeviceFamilyLocation right);
    public static bool op_Inequality(DeviceFamilyLocation left, DeviceFamilyLocation right);
}
public class JetBrains.ReSharper.Psi.Xaml.DeviceFamily.DeviceFamilyService : object {
    private Dictionary`2<IPsiSourceFile, DeviceFamilyLocation> myDeviceFamilyData;
    private Dictionary`2<IPsiModule, OneToSetMap`2<DeviceFamilyLocation, IPsiSourceFile>> myViews;
    public DeviceFamilyService(Lifetime lifetime, ChangeManager changeManager);
    public ICollection`1<IPsiSourceFile> GetViewSourceFiles(IPsiSourceFile sourceFile);
    private void OnPsiSourceFileAdded(IPsiSourceFile psiSourceFile);
    private void OnPsiSourceFileModified(IPsiSourceFile psiSourceFile);
    private void OnPsiSourceFileRemoved(IPsiSourceFile psiSourceFile);
    public bool MayContainDeviceFamilyViews(IProject project);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <.ctor>b__2_0(ChangeEventArgs args);
}
public enum JetBrains.ReSharper.Psi.Xaml.DeviceFamily.DeviceFamilyType : Enum {
    public int value__;
    public static DeviceFamilyType MOBILE;
    public static DeviceFamilyType TEAM;
    public static DeviceFamilyType DESKTOP;
    public static DeviceFamilyType IoT;
    public static DeviceFamilyType UNIVERSAL;
    public static DeviceFamilyType UNKNOWN;
}
[FlagsAttribute]
public enum JetBrains.ReSharper.Psi.Xaml.DeviceFamily.ViewLocation : Enum {
    public int value__;
    public static ViewLocation SIBLING_FILE;
    public static ViewLocation NESTED_FOLDER;
    public static ViewLocation ALL;
}
[ZoneDefinitionAttribute]
public interface JetBrains.ReSharper.Psi.Xaml.ILanguageXamlZone {
}
[PsiComponentAttribute("10")]
public class JetBrains.ReSharper.Psi.Xaml.Impl.Cache2.ApplicationTypesCache : object {
    [NotNullAttribute]
private IPsiModules myPsiModules;
    [NotNullAttribute]
private IShellLocks myShellLocks;
    [NotNullAttribute]
private IPsiCachesState myPsiCachesState;
    [NotNullAttribute]
private OneToSetMap`2<IPsiModule, IPsiSourceFile> myAppLikePsiSourceFiles;
    [NotNullAttribute]
private OneToSetMap`2<IPsiModule, IPsiSourceFile> myAppDefinitionsPsiSourceFiles;
    [NotNullAttribute]
private JetHashSet`1<IPsiSourceFile> myFilesToProcess;
    private object myLockObject;
    public ApplicationTypesCache(Lifetime lifetime, IPsiModules psiModules, IShellLocks shellLocks, IPsiCachesState psiCachesState, ChangeManager changeManager);
    [NotNullAttribute]
public static ApplicationTypesCache GetInstance(ISolution solution);
    private void ProcessChanges(ChangeEventArgs changeEventArgs);
    private bool ProcessFile(IPsiSourceFile psiSourceFile);
    private void ProcessFileIfNeeded(IPsiSourceFile psiSourceFile);
    private void ProcessAllFilesIfNeeded();
    public bool IsApplicationDeclaration(IXamlTypeDeclaration declaration);
    [NotNullAttribute]
public IList`1<IXamlTypeDeclaration> GetApplicationTypeDeclarations(ITreeNode xamlContext);
    [NotNullAttribute]
public IList`1<IXamlTypeDeclaration> GetApplicationTypeDeclarations(IPsiModule module);
    private bool IsApplicationDescendant(IXamlTypeDeclaration typeDeclaration, ITypeElement applicationType);
    [CompilerGeneratedAttribute]
private void <.ctor>b__8_0();
}
[PsiComponentAttribute("10")]
public class JetBrains.ReSharper.Psi.Xaml.Impl.Cache2.AvaloniaCodeBehindClassesCache : object {
    private Dictionary`2<IPsiSourceFile, IPsiSourceFile> myCodeBehindToXaml;
    private object myLockObject;
    public AvaloniaCodeBehindClassesCache(Lifetime lifetime, IPsiModules psiModules);
    public static AvaloniaCodeBehindClassesCache GetCache(IPsiSourceFile psiSourceFile);
    [CanBeNullAttribute]
public IPsiSourceFile GetXamlFile(IPsiSourceFile codeBehindFile);
    [CanBeNullAttribute]
private IPsiSourceFile FindXamlFile(IPsiSourceFile codeBehindFile);
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_0();
}
public class JetBrains.ReSharper.Psi.Xaml.Impl.Cache2.DefinedPseudoClasses : object {
    [NotNullAttribute]
private IPsiModule myPsiModule;
    [NotNullAttribute]
private IXamlTypeCache myXamlTypeCache;
    [NotNullAttribute]
private IXamlDeclaredElementsCache myDeclaredElementsCache;
    [NotNullAttribute]
private Dictionary`2<IAttributesOwner, ISymbolTable> myDefinedPseudoClasses;
    [NotNullAttribute]
private object myFullSymbolTableLock;
    [CanBeNullAttribute]
private ISymbolTable myFullSymbolTable;
    public DefinedPseudoClasses(XamlPlatformContext platformContext);
    public ISymbolTable GetDefinedPseudoClasses(IReference typeReference);
    [NotNullAttribute]
private ISymbolTable CalculateDefinedPseudoClasses(IAttributesOwner attributesOwner);
    [NotNullAttribute]
private ISymbolTable GetFullPseudoClassesTable();
}
[PsiComponentAttribute("10")]
public class JetBrains.ReSharper.Psi.Xaml.Impl.Cache2.DefinedPseudoClassesCache : XamlModuleTypeCache`2<DefinedPseudoClasses, DefinedPseudoClassesCache> {
    public DefinedPseudoClassesCache(Lifetime lifetime, IPsiModules psiModules, ChangeManager changeManager);
    internal virtual DefinedPseudoClasses CreateCache(XamlPlatformContext platformContext);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Psi.Xaml.Impl.Cache2.DesignTimeResourcesHelpers : object {
    [ExtensionAttribute]
public static bool ContainsDesignTimeResources(IPsiSourceFile psiSourceFile);
}
[PsiComponentAttribute("10")]
public class JetBrains.ReSharper.Psi.Xaml.Impl.Cache2.EmbeddedResourcesCache : object {
    [NotNullAttribute]
private IPsiModules myPsiModules;
    private IXamlAssemblyDeclaredEmbeddedResourcesCache myXamlAssemblyDeclaredEmbeddedResourcesCache;
    private Dictionary`2<IPsiModule, ISymbolTable> myResourcesPerModule;
    public EmbeddedResourcesCache(Lifetime lifetime, IPsiModules psiModules, ChangeManager changeManager, IXamlAssemblyDeclaredEmbeddedResourcesCache xamlAssemblyDeclaredEmbeddedResourcesCache);
    public static EmbeddedResourcesCache GetCache(ITreeNode context);
    public ISymbolTable GetSymbolTable(IPsiModule psiModule);
    private void ProcessChanges(ChangeEventArgs changeEventArgs);
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_0();
}
public interface JetBrains.ReSharper.Psi.Xaml.Impl.Cache2.IXamlAssemblyDeclaredEmbeddedResourcesCache {
    public abstract virtual String[] GetDeclaredResourcesNames(IPsiAssembly assembly);
    public abstract virtual bool HasEmbeddedResources(IPsiAssembly assembly);
}
internal abstract class JetBrains.ReSharper.Psi.Xaml.Impl.Cache2.XamlAssemblyCacheBase`1 : object {
    private IPsiModules myModules;
    private IShellLocks myShellLocks;
    private Lifetime myLifetime;
    private ISolution mySolution;
    private Dictionary`2<IPsiAssembly, TCacheEntry> myRecords;
    private object myRecordsLock;
    protected XamlAssemblyCacheBase`1(IPsiModules modules, IShellLocks shellLocks, Lifetime lifetime, ISolution solution);
    public sealed virtual object Load(IProgressIndicator progress, bool enablePersistence);
    public sealed virtual void Save(IProgressIndicator progress, bool enablePersistence);
    public sealed virtual void MergeLoaded(object data);
    public sealed virtual object Build(IPsiAssembly assembly);
    public sealed virtual void Merge(IPsiAssembly assembly, object part, Func`1<bool> checkForTermination);
    public sealed virtual void Drop(IEnumerable`1<IPsiAssembly> assemblies);
    protected TCacheEntry GetCacheEntry(IPsiAssembly assembly);
    [CanBeNullAttribute]
protected abstract virtual TCacheEntry BuildCacheEntry(IMetadataAssembly assembly);
}
[PsiComponentAttribute("0")]
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Cache2.XamlAssemblyDeclaredEmbeddedResourcesCache : XamlAssemblyCacheBase`1<CacheEntry> {
    public XamlAssemblyDeclaredEmbeddedResourcesCache(IPsiModules modules, IShellLocks shellLocks, Lifetime lifetime, ISolution solution);
    public sealed virtual String[] GetDeclaredResourcesNames(IPsiAssembly assembly);
    public sealed virtual bool HasEmbeddedResources(IPsiAssembly assembly);
    protected virtual CacheEntry BuildCacheEntry(IMetadataAssembly assembly);
}
[PsiComponentAttribute("0")]
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Cache2.XamlAssemblyResourcesCache : XamlAssemblyCacheBase`1<CacheRecord> {
    public XamlAssemblyResourcesCache(IPsiModules modules, IShellLocks shellLocks, Lifetime lifetime, ISolution solution);
    public sealed virtual ICollection`1<VirtualFileSystemPath> GetResourceFolders(IPsiAssembly assembly);
    public sealed virtual ICollection`1<VirtualFileSystemPath> GetResourceFiles(IPsiAssembly assembly);
    public sealed virtual bool HasResources(IPsiAssembly assembly);
    public sealed virtual string GetBamlPathForType(IPsiAssembly assembly, IClrTypeName typeName);
    public sealed virtual IList`1<IResourceDictionaryRecord> GetBamlResources(IPsiAssembly assembly, VirtualFileSystemPath bamlPath);
    protected virtual CacheRecord BuildCacheEntry(IMetadataAssembly assembly);
    [NotNullAttribute]
private static IList`1<IResourceDictionaryRecord> DecompileBamlResource(IMetadataAssembly assembly, Stream stream, Dictionary`2<IClrTypeName, string> bamlTypes, VirtualFileSystemPath fullPath, string path);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Cache2.XamlAttributeInstance : object {
    private IXamlObjectElement myObjectElement;
    public IConstructor Constructor { get; }
    public int PositionParameterCount { get; }
    public int NamedParameterCount { get; }
    public XamlAttributeInstance(IXamlObjectElement objectElement);
    public sealed virtual IClrTypeName GetClrName();
    public sealed virtual string GetAttributeShortName();
    public sealed virtual IDeclaredType GetAttributeType();
    public sealed virtual IConstructor get_Constructor();
    public sealed virtual int get_PositionParameterCount();
    [CanBeNullAttribute]
private IXamlObjectElement GetArgumentsElement();
    public sealed virtual AttributeValue PositionParameter(int paramIndex);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Psi.Xaml.Impl.Cache2.XamlAttributeInstance/<PositionParameters>d__11")]
public sealed virtual IEnumerable`1<AttributeValue> PositionParameters();
    public sealed virtual int get_NamedParameterCount();
    public sealed virtual AttributeValue NamedParameter(string name);
    public sealed virtual IEnumerable`1<Pair`2<string, AttributeValue>> NamedParameters();
    private static AttributeValue CreateAttributeValue(IXamlObjectElement objectElement);
}
public static class JetBrains.ReSharper.Psi.Xaml.Impl.Cache2.XamlAttributeInstanceUtil : object {
    public static String[] GetAttributeClassNames(IXamlObjectElement objectElement);
    public static IList`1<IAttributeInstance> GetAttributeInstances(IXamlObjectElement objectElement);
    public static bool IsAttributesTag(IXamlTag tag);
}
public class JetBrains.ReSharper.Psi.Xaml.Impl.Cache2.XamlBindingsPart : TypePartImplBase`1<IXamlTypeDeclaration> {
    [CanBeNullAttribute]
private IEnumerable`1<ITypeMember> myMembers;
    protected byte SerializationTag { get; }
    public bool CanBePartial { get; }
    public MemberDecoration Modifiers { get; }
    public String[] ExtendsListShortNames { get; }
    public String[] AttributeClassNames { get; }
    public XamlBindingsPart(IReader reader);
    public XamlBindingsPart(IXamlTypeDeclaration declaration);
    protected virtual ICachedDeclaration2 FindDeclaration(IFile file, ICachedDeclaration2 candidateDeclaration);
    protected virtual byte get_SerializationTag();
    public virtual bool get_CanBePartial();
    public virtual MemberDecoration get_Modifiers();
    public virtual String[] get_ExtendsListShortNames();
    public virtual String[] get_AttributeClassNames();
    public virtual TypeElement CreateTypeElement();
    public virtual IDeclaration GetTypeParameterDeclaration(int index);
    public virtual string GetTypeParameterName(int index);
    public virtual TypeParameterVariance GetTypeParameterVariance(int index);
    public virtual IEnumerable`1<IType> GetTypeParameterSuperTypes(int index);
    public virtual TypeParameterConstraintFlags GetTypeParameterConstraintFlags(int index);
    public virtual bool IsNullableContextEnabledForTypeParameter(int index);
    public virtual bool HasAttributeInstance(IClrTypeName clrTypeName);
    public virtual IList`1<IAttributeInstance> GetAttributeInstances(IClrTypeName clrName);
    public virtual IList`1<IAttributeInstance> GetTypeParameterAttributeInstances(int index, IClrTypeName typeName);
    public virtual bool HasTypeParameterAttributeInstance(int index, IClrTypeName typeName);
    public sealed virtual IEnumerable`1<ITypeMember> GetTypeMembers();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Psi.Xaml.Impl.Cache2.XamlBindingsPart/<BuildTypeMembers>d__26")]
[ItemNotNullAttribute]
private IEnumerable`1<ITypeMember> BuildTypeMembers();
    public sealed virtual IEnumerable`1<IDeclaredType> GetSuperTypes();
    public sealed virtual IDeclaredType GetBaseClassType();
    public sealed virtual MemberPresenceFlag GetMemberPresenceFlag();
}
public class JetBrains.ReSharper.Psi.Xaml.Impl.Cache2.XamlBindingsTypeElement : Interface {
    public XamlBindingsTypeElement(XamlBindingsPart xamlBindingsPart);
    protected virtual bool AcceptsPart(TypePart part);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Cache2.XamlFilePart : SimpleProjectFilePart {
    [NotNullAttribute]
public string DefaultNamespacePropertyValue;
    public XamlPlatform XamlPlatform;
    public XamlFilePart(IFile file);
    public XamlFilePart(IPsiSourceFile sourceFile, IReader reader);
    protected virtual void Write(IWriter writer);
}
public class JetBrains.ReSharper.Psi.Xaml.Impl.Cache2.XamlQualifiedNamespacePart : NamespacePart {
    protected byte SerializationTag { get; }
    public XamlQualifiedNamespacePart(IReader reader);
    public XamlQualifiedNamespacePart(string shortName, TreeOffset offset);
    protected virtual byte get_SerializationTag();
    protected virtual ICachedDeclaration2 FindDeclaration(IFile file, ICachedDeclaration2 candidateDeclaration);
    public virtual IDeclaration GetDeclaration();
}
internal enum JetBrains.ReSharper.Psi.Xaml.Impl.Cache2.XamlSerializationTag : Enum {
    public byte value__;
    public static XamlSerializationTag QUALIFIED_NAMESPACE_PART;
    public static XamlSerializationTag TYPE_PART;
    public static XamlSerializationTag BINDINGS_INTERFACE_PART;
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Cache2.XamlTypePart : TypePartImplBase`1<IXamlTypeDeclaration> {
    [NotNullAttribute]
private String[] myExtendsList;
    [NotNullAttribute]
private String[] myAttributeClassNames;
    private Modifiers myModifiers;
    private bool myIsApplicationDefinition;
    private IMethod[] modreq(System.Runtime.CompilerServices.IsVolatile) myImplicitMethods;
    private object myLock;
    private bool myGenerateImplicitMembers;
    private static Key`1<IField[]> ourImplicitFieldsKey;
    protected byte SerializationTag { get; }
    public bool IsApplicationDefinition { get; }
    public bool CanBePartial { get; }
    public MemberDecoration Modifiers { get; }
    public String[] ExtendsListShortNames { get; }
    public String[] AttributeClassNames { get; }
    public XamlTypePart(IReader reader, bool doGenerateImplicitMembers);
    public XamlTypePart(IXamlTypeDeclaration declaration, string shortName, int typeParameters, bool isApplicationDefinition, bool doGenerateImplicitMembers);
    private static XamlTypePart();
    protected virtual byte get_SerializationTag();
    public bool get_IsApplicationDefinition();
    public bool IsLooksLikeApplicationDefinition();
    protected virtual void Write(IWriter writer);
    public virtual bool get_CanBePartial();
    protected virtual ICachedDeclaration2 FindDeclaration(IFile file, ICachedDeclaration2 candidateDeclaration);
    protected virtual IXamlTypeDeclaration GetDeclaration();
    public sealed virtual MemberPresenceFlag GetMemberPresenceFlag();
    public virtual MemberDecoration get_Modifiers();
    public virtual String[] get_ExtendsListShortNames();
    public virtual String[] get_AttributeClassNames();
    public virtual string GetTypeParameterName(int index);
    public virtual TypeParameterVariance GetTypeParameterVariance(int index);
    public sealed virtual TypeElement CreateTypeElement();
    protected virtual TypeElement CreateTypeElementInternal();
    public virtual IDeclaration GetTypeParameterDeclaration(int index);
    public virtual IList`1<IAttributeInstance> GetAttributeInstances(IClrTypeName clrName);
    public virtual bool HasAttributeInstance(IClrTypeName clrTypeName);
    public virtual IList`1<IAttributeInstance> GetTypeParameterAttributeInstances(int index, IClrTypeName typeName);
    public virtual bool HasTypeParameterAttributeInstance(int index, IClrTypeName typeName);
    public virtual IEnumerable`1<IType> GetTypeParameterSuperTypes(int index);
    public virtual TypeParameterConstraintFlags GetTypeParameterConstraintFlags(int index);
    public virtual bool IsNullableContextEnabledForTypeParameter(int index);
    public sealed virtual IDeclaredType GetBaseClassType();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Psi.Xaml.Impl.Cache2.XamlTypePart/<GetTypeMembers>d__40")]
public sealed virtual IEnumerable`1<ITypeMember> GetTypeMembers();
    [NotNullAttribute]
private IField[] GetImplicitFields(XamlTypeDeclaration declaration);
    [NotNullAttribute]
private IMethod[] GetImplicitMethods(XamlTypeDeclaration declaration);
    [CanBeNullAttribute]
private IMethod GetImpicitConnectMethod(IDeclaration declaration, XamlPlatform platform);
    [CanBeNullAttribute]
private IMethod GetImplicitGetBindingConnectorMethod(IDeclaration declaration, XamlPlatform platform);
    public sealed virtual IEnumerable`1<IDeclaredType> GetSuperTypes();
}
[SolutionComponentAttribute("16")]
internal class JetBrains.ReSharper.Psi.Xaml.Impl.DeclaredElements.AvaloniaPredefinedResourcesProvider : object {
    public string ResourceName { get; }
    public sealed virtual string get_ResourceName();
    public sealed virtual bool IsAvailable(IPsiModule psiModule, IModule module);
}
internal abstract class JetBrains.ReSharper.Psi.Xaml.Impl.DeclaredElements.DelegatingDeclaredElementBase : object {
    protected IMethod myDelegatedMethod;
    public string ShortName { get; }
    public bool CaseSensitiveName { get; }
    public PsiLanguageType PresentationLanguage { get; }
    public IPsiModule Module { get; }
    public ISubstitution IdSubstitution { get; }
    public bool IsAbstract { get; }
    public bool IsSealed { get; }
    public bool IsVirtual { get; }
    public bool IsOverride { get; }
    public bool IsStatic { get; }
    public bool IsReadonly { get; }
    public bool IsExtern { get; }
    public bool IsUnsafe { get; }
    public bool IsVolatile { get; }
    public string XMLDocId { get; }
    public AccessibilityDomain AccessibilityDomain { get; }
    public MemberHidePolicy HidePolicy { get; }
    public bool IsExplicitImplementation { get; }
    public IList`1<IExplicitImplementation> ExplicitImplementations { get; }
    public bool CanBeImplicitImplementation { get; }
    public ITypeElement ContainingType { get; }
    protected DelegatingDeclaredElementBase(IMethod method);
    public abstract virtual string get_ShortName();
    public abstract virtual DeclaredElementType GetElementType();
    public virtual bool get_CaseSensitiveName();
    public sealed virtual PsiLanguageType get_PresentationLanguage();
    public sealed virtual IPsiModule get_Module();
    public sealed virtual ISubstitution get_IdSubstitution();
    public sealed virtual bool get_IsAbstract();
    public sealed virtual bool get_IsSealed();
    public sealed virtual bool get_IsVirtual();
    public sealed virtual bool get_IsOverride();
    public sealed virtual bool get_IsStatic();
    public sealed virtual bool get_IsReadonly();
    public sealed virtual bool get_IsExtern();
    public sealed virtual bool get_IsUnsafe();
    public sealed virtual bool get_IsVolatile();
    public sealed virtual string get_XMLDocId();
    public sealed virtual AccessibilityDomain get_AccessibilityDomain();
    public sealed virtual MemberHidePolicy get_HidePolicy();
    public sealed virtual bool get_IsExplicitImplementation();
    public sealed virtual IList`1<IExplicitImplementation> get_ExplicitImplementations();
    public sealed virtual bool get_CanBeImplicitImplementation();
    public sealed virtual IPsiServices GetPsiServices();
    public sealed virtual IList`1<IDeclaration> GetDeclarations();
    public sealed virtual IList`1<IDeclaration> GetDeclarationsIn(IPsiSourceFile sourceFile);
    public sealed virtual XmlNode GetXMLDoc(bool inherit);
    public sealed virtual XmlNode GetXMLDescriptionSummary(bool inherit);
    public sealed virtual bool IsValid();
    public sealed virtual bool IsSynthetic();
    public sealed virtual HybridCollection`1<IPsiSourceFile> GetSourceFiles();
    public sealed virtual bool HasDeclarationsIn(IPsiSourceFile sourceFile);
    public sealed virtual ITypeElement get_ContainingType();
    public sealed virtual ITypeElement GetContainingType();
    public sealed virtual ITypeMember GetContainingTypeMember();
    public sealed virtual IList`1<IAttributeInstance> GetAttributeInstances(AttributesSource attributesSource);
    public sealed virtual IList`1<IAttributeInstance> GetAttributeInstances(IClrTypeName clrName, AttributesSource attributesSource);
    public sealed virtual bool HasAttributeInstance(IClrTypeName clrName, AttributesSource attributesSource);
    public sealed virtual AccessRights GetAccessRights();
    public sealed virtual IList`1<TypeMemberInstance> GetHiddenMembers();
    public sealed virtual Nullable`1<Hash> CalcHash();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.DeclaredElements.Implicit.XamlBindingsDisconnectUnloadedObjectImplicitMethod : XamlImplicitMethod {
    private IList`1<IParameter> myParameters;
    public IList`1<IParameter> Parameters { get; }
    public bool IsExplicitImplementation { get; }
    public IList`1<IExplicitImplementation> ExplicitImplementations { get; }
    public XamlBindingsDisconnectUnloadedObjectImplicitMethod(ITypeElement typeElement);
    public virtual IList`1<IParameter> get_Parameters();
    public virtual bool get_IsExplicitImplementation();
    public virtual IList`1<IExplicitImplementation> get_ExplicitImplementations();
    public virtual DeclaredElementType GetElementType();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.DeclaredElements.Implicit.XamlBindingsImplicitField : XamlImplicitField {
    public IType Type { get; }
    public XamlBindingsImplicitField(ITypeElement owner);
    public virtual IType get_Type();
    public virtual DeclaredElementType GetElementType();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.DeclaredElements.Implicit.XamlBindingsInitializeImplicitMethod : XamlImplicitMethod {
    public IList`1<IParameter> Parameters { get; }
    public bool IsExplicitImplementation { get; }
    public IList`1<IExplicitImplementation> ExplicitImplementations { get; }
    public XamlBindingsInitializeImplicitMethod(ITypeElement typeElement);
    public virtual IList`1<IParameter> get_Parameters();
    public virtual bool get_IsExplicitImplementation();
    public virtual IList`1<IExplicitImplementation> get_ExplicitImplementations();
    public virtual DeclaredElementType GetElementType();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.DeclaredElements.Implicit.XamlBindingsStopTrackingImplicitMethod : XamlImplicitMethod {
    public IList`1<IParameter> Parameters { get; }
    public bool IsExplicitImplementation { get; }
    public IList`1<IExplicitImplementation> ExplicitImplementations { get; }
    public XamlBindingsStopTrackingImplicitMethod(ITypeElement typeElement);
    public virtual IList`1<IParameter> get_Parameters();
    public virtual bool get_IsExplicitImplementation();
    public virtual IList`1<IExplicitImplementation> get_ExplicitImplementations();
    public virtual DeclaredElementType GetElementType();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.DeclaredElements.Implicit.XamlBindingsUpdateImplicitMethod : XamlImplicitMethod {
    public IList`1<IParameter> Parameters { get; }
    public bool IsExplicitImplementation { get; }
    public IList`1<IExplicitImplementation> ExplicitImplementations { get; }
    public XamlBindingsUpdateImplicitMethod(ITypeElement typeElement);
    public virtual IList`1<IParameter> get_Parameters();
    public virtual bool get_IsExplicitImplementation();
    public virtual IList`1<IExplicitImplementation> get_ExplicitImplementations();
    public virtual DeclaredElementType GetElementType();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.DeclaredElements.Implicit.XamlConnectImplicitMethod : XamlImplicitMethod {
    private static MemberDecoration ourPrivateDecoration;
    private static MemberDecoration ourPublicDecoration;
    [NotNullAttribute]
private IParameter[] myParameters;
    private XamlPlatform myXamlPlatform;
    public IList`1<IParameter> Parameters { get; }
    public bool IsExplicitImplementation { get; }
    public IList`1<IExplicitImplementation> ExplicitImplementations { get; }
    public XamlConnectImplicitMethod(ITypeElement typeElement, XamlPlatform xamlPlatform, string shortName, bool isPublic);
    private static XamlConnectImplicitMethod();
    public virtual IList`1<IParameter> get_Parameters();
    public virtual bool get_IsExplicitImplementation();
    public virtual IList`1<IExplicitImplementation> get_ExplicitImplementations();
    public virtual DeclaredElementType GetElementType();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.DeclaredElements.Implicit.XamlContentLoadedImplicitField : XamlImplicitField {
    public IType Type { get; }
    public XamlContentLoadedImplicitField(ITypeElement owner);
    public virtual IType get_Type();
    public virtual DeclaredElementType GetElementType();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.DeclaredElements.Implicit.XamlGetBindingConnectorImplicitMethod : XamlImplicitMethod {
    private static MemberDecoration ourPrivateDecoration;
    private static MemberDecoration ourPublicDecoration;
    [NotNullAttribute]
private IParameter[] myParameters;
    private XamlPlatform myXamlPlatform;
    private IType myReturnType;
    public IType ReturnType { get; }
    public IList`1<IParameter> Parameters { get; }
    public bool IsExplicitImplementation { get; }
    public IList`1<IExplicitImplementation> ExplicitImplementations { get; }
    public XamlGetBindingConnectorImplicitMethod(ITypeElement typeElement, XamlPlatform xamlPlatform, string shortName, bool isPublic);
    private static XamlGetBindingConnectorImplicitMethod();
    public virtual IType get_ReturnType();
    public virtual IList`1<IParameter> get_Parameters();
    public virtual bool get_IsExplicitImplementation();
    public virtual IList`1<IExplicitImplementation> get_ExplicitImplementations();
    public virtual DeclaredElementType GetElementType();
}
internal abstract class JetBrains.ReSharper.Psi.Xaml.Impl.DeclaredElements.Implicit.XamlImplicitField : XamlImplicitTypeMember {
    public IType Type { get; }
    public ConstantValue ConstantValue { get; }
    public bool IsField { get; }
    public bool IsConstant { get; }
    public bool IsEnumMember { get; }
    public bool IsRequired { get; }
    public ReferenceKind ReferenceKind { get; }
    public Nullable`1<int> FixedBufferSize { get; }
    protected XamlImplicitField(ITypeElement owner, string shortName, MemberDecoration memberDecoration);
    public abstract virtual IType get_Type();
    public sealed virtual ConstantValue get_ConstantValue();
    public sealed virtual bool get_IsField();
    public sealed virtual bool get_IsConstant();
    public sealed virtual bool get_IsEnumMember();
    public sealed virtual bool get_IsRequired();
    public sealed virtual ReferenceKind get_ReferenceKind();
    public sealed virtual Nullable`1<int> get_FixedBufferSize();
    public virtual DeclaredElementType GetElementType();
}
internal abstract class JetBrains.ReSharper.Psi.Xaml.Impl.DeclaredElements.Implicit.XamlImplicitMethod : XamlImplicitTypeMember {
    public bool IsPredefined { get; }
    public bool IsIterator { get; }
    public IAttributesSet ReturnTypeAttributes { get; }
    public IList`1<IParameter> Parameters { get; }
    public IType ReturnType { get; }
    public ReferenceKind ReturnKind { get; }
    public bool IsExtensionMethod { get; }
    public bool IsAsync { get; }
    public bool IsVarArg { get; }
    protected XamlImplicitMethod(ITypeElement typeElement, string shortName, MemberDecoration memberDecoration);
    public sealed virtual bool get_IsPredefined();
    public sealed virtual bool get_IsIterator();
    public sealed virtual IAttributesSet get_ReturnTypeAttributes();
    public virtual IList`1<IParameter> get_Parameters();
    public virtual IType get_ReturnType();
    public sealed virtual ReferenceKind get_ReturnKind();
    public sealed virtual InvocableSignature GetSignature(ISubstitution substitution);
    public sealed virtual IEnumerable`1<IParametersOwnerDeclaration> GetParametersOwnerDeclarations();
    public sealed virtual bool get_IsExtensionMethod();
    public sealed virtual bool get_IsAsync();
    public sealed virtual bool get_IsVarArg();
    public virtual DeclaredElementType GetElementType();
}
internal abstract class JetBrains.ReSharper.Psi.Xaml.Impl.DeclaredElements.Implicit.XamlImplicitTypeMember : object {
    [NotNullAttribute]
private IDeclaredElementPointer`1<ITypeElement> myPointer;
    [NotNullAttribute]
private string myShortName;
    [NotNullAttribute]
private IPsiServices myPsiServices;
    private MemberDecoration myMemberDecoration;
    public string ShortName { get; }
    public bool CaseSensitiveName { get; }
    public string XMLDocId { get; }
    public PsiLanguageType PresentationLanguage { get; }
    public IPsiModule Module { get; }
    public ISubstitution IdSubstitution { get; }
    public AccessibilityDomain AccessibilityDomain { get; }
    public MemberHidePolicy HidePolicy { get; }
    public bool IsAbstract { get; }
    public bool IsSealed { get; }
    public bool IsVirtual { get; }
    public bool IsOverride { get; }
    public bool IsStatic { get; }
    public bool IsReadonly { get; }
    public bool IsExtern { get; }
    public bool IsUnsafe { get; }
    public bool IsVolatile { get; }
    public bool IsExplicitImplementation { get; }
    [NotNullAttribute]
public IList`1<IExplicitImplementation> ExplicitImplementations { get; }
    public bool CanBeImplicitImplementation { get; }
    public IList`1<ITypeParameter> TypeParameters { get; }
    public int TypeParametersCount { get; }
    public ITypeElement ContainingType { get; }
    protected XamlImplicitTypeMember(ITypeElement typeElement, string shortName, MemberDecoration memberDecoration);
    public sealed virtual string get_ShortName();
    public sealed virtual bool get_CaseSensitiveName();
    public sealed virtual string get_XMLDocId();
    public sealed virtual PsiLanguageType get_PresentationLanguage();
    public sealed virtual IPsiModule get_Module();
    public sealed virtual ISubstitution get_IdSubstitution();
    public sealed virtual AccessibilityDomain get_AccessibilityDomain();
    public sealed virtual MemberHidePolicy get_HidePolicy();
    public sealed virtual Nullable`1<Hash> CalcHash();
    public sealed virtual bool get_IsAbstract();
    public sealed virtual bool get_IsSealed();
    public sealed virtual bool get_IsVirtual();
    public sealed virtual bool get_IsOverride();
    public sealed virtual bool get_IsStatic();
    public sealed virtual bool get_IsReadonly();
    public sealed virtual bool get_IsExtern();
    public sealed virtual bool get_IsUnsafe();
    public sealed virtual bool get_IsVolatile();
    public virtual bool get_IsExplicitImplementation();
    public virtual IList`1<IExplicitImplementation> get_ExplicitImplementations();
    public sealed virtual bool get_CanBeImplicitImplementation();
    public sealed virtual IList`1<ITypeParameter> get_TypeParameters();
    public sealed virtual int get_TypeParametersCount();
    [CanBeNullAttribute]
private ITypeElement GetTypeElement();
    [CanBeNullAttribute]
private XamlTypeDeclaration GetTypeDeclaration();
    public sealed virtual IList`1<IDeclaration> GetDeclarations();
    public sealed virtual IList`1<IDeclaration> GetDeclarationsIn(IPsiSourceFile sourceFile);
    public virtual DeclaredElementType GetElementType();
    public sealed virtual IPsiServices GetPsiServices();
    public sealed virtual ITypeElement get_ContainingType();
    public sealed virtual ITypeElement GetContainingType();
    public sealed virtual ITypeMember GetContainingTypeMember();
    public sealed virtual XmlNode GetXMLDoc(bool inherit);
    public sealed virtual XmlNode GetXMLDescriptionSummary(bool inherit);
    public sealed virtual bool IsValid();
    public sealed virtual bool IsSynthetic();
    public sealed virtual HybridCollection`1<IPsiSourceFile> GetSourceFiles();
    public sealed virtual bool HasDeclarationsIn(IPsiSourceFile sourceFile);
    public sealed virtual IList`1<TypeMemberInstance> GetHiddenMembers();
    public sealed virtual IList`1<IAttributeInstance> GetAttributeInstances(AttributesSource attributesSource);
    public sealed virtual IList`1<IAttributeInstance> GetAttributeInstances(IClrTypeName clrName, AttributesSource attributesSource);
    public sealed virtual bool HasAttributeInstance(IClrTypeName clrName, AttributesSource attributesSource);
    public sealed virtual AccessRights GetAccessRights();
    protected virtual bool Equals(XamlImplicitTypeMember other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(XamlImplicitTypeMember left, XamlImplicitTypeMember right);
    public static bool op_Inequality(XamlImplicitTypeMember left, XamlImplicitTypeMember right);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.DeclaredElements.Implicit.XamlInitializeComponentImplicitMethod : XamlImplicitMethod {
    private static MemberDecoration ourMemberDecoration;
    private XamlPlatform myXamlPlatform;
    public bool IsExplicitImplementation { get; }
    public IList`1<IExplicitImplementation> ExplicitImplementations { get; }
    public XamlInitializeComponentImplicitMethod(ITypeElement typeElement, XamlPlatform platform);
    private static XamlInitializeComponentImplicitMethod();
    public virtual bool get_IsExplicitImplementation();
    public virtual IList`1<IExplicitImplementation> get_ExplicitImplementations();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.DeclaredElements.Implicit.XamlISupportInitializeImplicitMethod : XamlImplicitMethod {
    [NotNullAttribute]
private IExplicitImplementation[] myImplementations;
    private static string SupportsInitializeFqn;
    public bool IsExplicitImplementation { get; }
    public IList`1<IExplicitImplementation> ExplicitImplementations { get; }
    public XamlISupportInitializeImplicitMethod(ITypeElement typeElement, string shortName);
    public virtual bool get_IsExplicitImplementation();
    public virtual IList`1<IExplicitImplementation> get_ExplicitImplementations();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.DeclaredElements.Implicit.XamlMainMethodImplicit : XamlImplicitMethod {
    private static MemberDecoration MemberDecoration;
    public XamlMainMethodImplicit(ITypeElement typeElement);
    private static XamlMainMethodImplicit();
}
internal interface JetBrains.ReSharper.Psi.Xaml.Impl.DeclaredElements.IXamlPredefinedResourcesProvider {
    [NotNullAttribute]
public string ResourceName { get; }
    [PureAttribute]
public abstract virtual bool IsAvailable(IPsiModule psiModule, IModule module);
    public abstract virtual string get_ResourceName();
}
[SolutionComponentAttribute("16")]
internal class JetBrains.ReSharper.Psi.Xaml.Impl.DeclaredElements.MauiPredefinedResourcesProvider : object {
    public string ResourceName { get; }
    public sealed virtual string get_ResourceName();
    public sealed virtual bool IsAvailable(IPsiModule psiModule, IModule module);
}
[SolutionComponentAttribute("16")]
internal class JetBrains.ReSharper.Psi.Xaml.Impl.DeclaredElements.Windows10UWPPredefinedResourcesProvider : object {
    public string ResourceName { get; }
    public sealed virtual string get_ResourceName();
    public sealed virtual bool IsAvailable(IPsiModule psiModule, IModule module);
}
[SolutionComponentAttribute("16")]
internal class JetBrains.ReSharper.Psi.Xaml.Impl.DeclaredElements.Windows81PredefinedResourcesProvider : object {
    public string ResourceName { get; }
    public sealed virtual string get_ResourceName();
    public sealed virtual bool IsAvailable(IPsiModule psiModule, IModule module);
}
[SolutionComponentAttribute("16")]
internal class JetBrains.ReSharper.Psi.Xaml.Impl.DeclaredElements.WindowsPhone81PredefinedResourcesProvider : object {
    public string ResourceName { get; }
    public sealed virtual string get_ResourceName();
    public sealed virtual bool IsAvailable(IPsiModule psiModule, IModule module);
}
[SolutionComponentAttribute("16")]
internal class JetBrains.ReSharper.Psi.Xaml.Impl.DeclaredElements.WindowsPhonePredefinedResourcesProvider : object {
    public string ResourceName { get; }
    public sealed virtual string get_ResourceName();
    public sealed virtual bool IsAvailable(IPsiModule psiModule, IModule module);
}
[SolutionComponentAttribute("16")]
internal class JetBrains.ReSharper.Psi.Xaml.Impl.DeclaredElements.WindowsStorePortableResourcesProvider : object {
    public string ResourceName { get; }
    public sealed virtual string get_ResourceName();
    public sealed virtual bool IsAvailable(IPsiModule psiModule, IModule module);
}
[SolutionComponentAttribute("16")]
internal class JetBrains.ReSharper.Psi.Xaml.Impl.DeclaredElements.WinUIPredefinedResourcesProvider : object {
    public string ResourceName { get; }
    public sealed virtual string get_ResourceName();
    public sealed virtual bool IsAvailable(IPsiModule psiModule, IModule module);
}
[SolutionComponentAttribute("16")]
internal class JetBrains.ReSharper.Psi.Xaml.Impl.DeclaredElements.XamarinFormsPredefinedResourcesProvider : object {
    public string ResourceName { get; }
    public sealed virtual string get_ResourceName();
    public sealed virtual bool IsAvailable(IPsiModule psiModule, IModule module);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.DeclaredElements.XamlAssemblyEmbeddedResource : object {
    private IPsiServices myPsiServices;
    private IPsiSourceFile myPsiSourceFile;
    [CompilerGeneratedAttribute]
private string <ShortName>k__BackingField;
    [CompilerGeneratedAttribute]
private IPsiModule <Module>k__BackingField;
    public string ShortName { get; }
    public bool CaseSensitiveName { get; }
    public PsiLanguageType PresentationLanguage { get; }
    public IPsiModule Module { get; }
    public XamlAssemblyEmbeddedResource(IPsiServices psiServices, string name, IPsiModule module, IPsiSourceFile psiSourceFile);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ShortName();
    public sealed virtual bool get_CaseSensitiveName();
    public sealed virtual PsiLanguageType get_PresentationLanguage();
    public sealed virtual DeclaredElementType GetElementType();
    public sealed virtual bool IsValid();
    public sealed virtual bool IsSynthetic();
    public sealed virtual IList`1<IDeclaration> GetDeclarations();
    public sealed virtual IList`1<IDeclaration> GetDeclarationsIn(IPsiSourceFile sourceFile);
    public sealed virtual HybridCollection`1<IPsiSourceFile> GetSourceFiles();
    public sealed virtual bool HasDeclarationsIn(IPsiSourceFile sourceFile);
    public sealed virtual IPsiServices GetPsiServices();
    public sealed virtual XmlNode GetXMLDoc(bool inherit);
    public sealed virtual XmlNode GetXMLDescriptionSummary(bool inherit);
    [CompilerGeneratedAttribute]
public sealed virtual IPsiModule get_Module();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.DeclaredElements.XamlAttachedEvent : DelegatingDeclaredElementBase {
    private string myShortName;
    private IAccessor myAddAccessor;
    public string ShortName { get; }
    public IAccessor Adder { get; }
    public IAccessor Remover { get; }
    public IAccessor Raiser { get; }
    public bool IsFieldLikeEvent { get; }
    public IType Type { get; }
    public XamlAttachedEvent(IMethod addMethod);
    public virtual string get_ShortName();
    public virtual DeclaredElementType GetElementType();
    public sealed virtual IAccessor get_Adder();
    public sealed virtual IAccessor get_Remover();
    public sealed virtual IAccessor get_Raiser();
    public sealed virtual bool get_IsFieldLikeEvent();
    public sealed virtual IType get_Type();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.DeclaredElements.XamlAttachedProperty : DelegatingDeclaredElementBase {
    private IAccessor mySetAccessor;
    [CompilerGeneratedAttribute]
private string <ShortName>k__BackingField;
    public string ShortName { get; }
    public IType Type { get; }
    public IAccessor Getter { get; }
    public IAccessor Setter { get; }
    public bool IsReadable { get; }
    public bool IsWritable { get; }
    public bool IsDefault { get; }
    public bool IsRequired { get; }
    public bool IsAuto { get; }
    public IList`1<IParameter> Parameters { get; }
    public IType ReturnType { get; }
    public ReferenceKind ReturnKind { get; }
    public XamlAttachedProperty(IMethod setMethod);
    [CompilerGeneratedAttribute]
public virtual string get_ShortName();
    public virtual DeclaredElementType GetElementType();
    public sealed virtual IType get_Type();
    public sealed virtual IAccessor get_Getter();
    public sealed virtual IAccessor get_Setter();
    public sealed virtual bool get_IsReadable();
    public sealed virtual bool get_IsWritable();
    public sealed virtual bool get_IsDefault();
    public sealed virtual bool get_IsRequired();
    public sealed virtual bool get_IsAuto();
    private sealed virtual override string JetBrains.ReSharper.Psi.IProperty.GetDefaultPropertyMetadataName();
    public sealed virtual IList`1<IParameter> get_Parameters();
    public sealed virtual IType get_ReturnType();
    public sealed virtual ReferenceKind get_ReturnKind();
    public sealed virtual InvocableSignature GetSignature(ISubstitution substitution);
    public sealed virtual IEnumerable`1<IParametersOwnerDeclaration> GetParametersOwnerDeclarations();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.DeclaredElements.XamlAttributeDeclaredElement : XamlPredefinedDeclaredElementBase {
    public XamlAttributeDeclaredElement(string shortName, string xmlNsUri, string defaultXmlnsName, XamlLanguageLevel languageLevel, XamlPlatformContext platformContext);
    public virtual DeclaredElementType GetElementType();
}
internal abstract class JetBrains.ReSharper.Psi.Xaml.Impl.DeclaredElements.XamlCachedTypeMemberBase : CachedTypeMemberBase {
    public bool IsConstant { get; }
    public bool IsEnumMember { get; }
    public Nullable`1<int> FixedBufferSize { get; }
    public ConstantValue ConstantValue { get; }
    public bool IsAbstract { get; }
    public bool IsSealed { get; }
    public bool IsVirtual { get; }
    public bool IsOverride { get; }
    public bool IsStatic { get; }
    public bool IsReadonly { get; }
    public bool IsExtern { get; }
    public bool IsUnsafe { get; }
    public bool IsVolatile { get; }
    public MemberHidePolicy HidePolicy { get; }
    public string ShortName { get; }
    public bool CaseSensitiveName { get; }
    public ISubstitution IdSubstitution { get; }
    public IType Type { get; }
    protected XamlCachedTypeMemberBase(IXamlDeclaration declaration);
    [CanBeNullAttribute]
private IXamlDeclaration GetDeclaration();
    public sealed virtual bool get_IsConstant();
    public sealed virtual bool get_IsEnumMember();
    public sealed virtual Nullable`1<int> get_FixedBufferSize();
    public sealed virtual ConstantValue get_ConstantValue();
    public sealed virtual AccessRights GetAccessRights();
    public sealed virtual bool get_IsAbstract();
    public sealed virtual bool get_IsSealed();
    public sealed virtual bool get_IsVirtual();
    public sealed virtual bool get_IsOverride();
    public sealed virtual bool get_IsStatic();
    public sealed virtual bool get_IsReadonly();
    public sealed virtual bool get_IsExtern();
    public sealed virtual bool get_IsUnsafe();
    public sealed virtual bool get_IsVolatile();
    public virtual IList`1<IAttributeInstance> GetAttributeInstances(AttributesSource attributesSource);
    public virtual IList`1<IAttributeInstance> GetAttributeInstances(IClrTypeName clrName, AttributesSource attributesSource);
    public virtual bool HasAttributeInstance(IClrTypeName clrName, AttributesSource attributesSource);
    public sealed virtual MemberHidePolicy get_HidePolicy();
    public sealed virtual IList`1<TypeMemberInstance> GetHiddenMembers();
    public sealed virtual string get_ShortName();
    public sealed virtual bool get_CaseSensitiveName();
    public abstract virtual DeclaredElementType GetElementType();
    public sealed virtual ITypeMember GetContainingTypeMember();
    public sealed virtual XmlNode GetXMLDoc(bool inherit);
    public sealed virtual XmlNode GetXMLDescriptionSummary(bool inherit);
    public sealed virtual bool IsSynthetic();
    public sealed virtual ISubstitution get_IdSubstitution();
    public virtual IType get_Type();
    [NotNullAttribute]
private IType ProjectedWinRTType(IType type, ITreeNode context);
    protected virtual bool CanBindTo(IDeclaration declaration);
    private sealed virtual override PsiLanguageType JetBrains.ReSharper.Psi.IDeclaredElement.get_PresentationLanguage();
    private sealed virtual override IPsiServices JetBrains.ReSharper.Psi.IDeclaredElement.GetPsiServices();
}
internal abstract class JetBrains.ReSharper.Psi.Xaml.Impl.DeclaredElements.XamlClrCachedTypeMemberBase : XamlCachedTypeMemberBase {
    private int myHashCode;
    [CompilerGeneratedAttribute]
private bool <IsPartial>k__BackingField;
    public bool IsPartial { get; }
    protected XamlClrCachedTypeMemberBase(IXamlDeclaration declaration);
    [CompilerGeneratedAttribute]
public bool get_IsPartial();
    protected bool Equals(XamlClrCachedTypeMemberBase other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(XamlClrCachedTypeMemberBase left, XamlClrCachedTypeMemberBase right);
    public static bool op_Inequality(XamlClrCachedTypeMemberBase left, XamlClrCachedTypeMemberBase right);
    public virtual IList`1<IDeclaration> GetDeclarations();
    private static LocalList`1<IXamlTypeDeclaration> GetTypeDeclarationsWithEqualDeviceFamilyData(ITypeElement typeElement, DeviceFamilyData deviceFamilyData);
    private IList`1<IDeclaration> GetDeclarationsInTypeDeclarations(LocalList`1<IXamlTypeDeclaration> typeDeclarations);
    public virtual HybridCollection`1<IPsiSourceFile> GetSourceFiles();
    public virtual IList`1<IDeclaration> GetDeclarationsIn(IPsiSourceFile sourceFile);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.DeclaredElements.XamlCompiledResource : object {
    [NotNullAttribute]
private string myShortName;
    [NotNullAttribute]
private VirtualFileSystemPath myResourcePath;
    [NotNullAttribute]
private IPsiModule myModule;
    [NotNullAttribute]
private IDeclaredType myType;
    [CanBeNullAttribute]
private object myExtraKey;
    public IType ResourceType { get; }
    public IType TypeKey { get; }
    public IDeclaredElement StaticMemberKey { get; }
    public IType TargetType { get; }
    public string XamarinFormsClass { get; }
    public IPsiModule ExternalModule { get; }
    public VirtualFileSystemPath ResourcePath { get; }
    public string ShortName { get; }
    public bool CaseSensitiveName { get; }
    public PsiLanguageType PresentationLanguage { get; }
    public XamlCompiledResource(ResourceRecord record, VirtualFileSystemPath resourcePath, IPsiModule module);
    private bool Equals(XamlCompiledResource other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(XamlCompiledResource left, XamlCompiledResource right);
    public static bool op_Inequality(XamlCompiledResource left, XamlCompiledResource right);
    [NotNullAttribute]
private static IDeclaredType ResolveType(BamlTypeInfo type, IPsiModule module);
    [NotNullAttribute]
private static string ResolveName(IResourceDictionaryRecord record);
    [CanBeNullAttribute]
private static ITypeMember ResolveStaticMember(IDeclaredType type, BamlPropertyInfo propertyInfo);
    public sealed virtual IResourceDeclaration GetDeclaration();
    public sealed virtual IType get_ResourceType();
    public sealed virtual IType get_TypeKey();
    public sealed virtual IDeclaredElement get_StaticMemberKey();
    public sealed virtual IType get_TargetType();
    public sealed virtual string get_XamarinFormsClass();
    public sealed virtual IPsiModule get_ExternalModule();
    public sealed virtual VirtualFileSystemPath get_ResourcePath();
    public sealed virtual string get_ShortName();
    public sealed virtual bool get_CaseSensitiveName();
    public sealed virtual IPsiServices GetPsiServices();
    public sealed virtual IList`1<IDeclaration> GetDeclarations();
    public sealed virtual IList`1<IDeclaration> GetDeclarationsIn(IPsiSourceFile sourceFile);
    public sealed virtual DeclaredElementType GetElementType();
    public sealed virtual HybridCollection`1<IPsiSourceFile> GetSourceFiles();
    public sealed virtual XmlNode GetXMLDoc(bool inherit);
    public sealed virtual XmlNode GetXMLDescriptionSummary(bool inherit);
    public sealed virtual bool IsSynthetic();
    public sealed virtual PsiLanguageType get_PresentationLanguage();
    public sealed virtual bool HasDeclarationsIn(IPsiSourceFile sourceFile);
    public sealed virtual bool IsValid();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.DeclaredElements.XamlConstantDeclaredElement : XamlPredefinedDeclaredElementBase {
    public XamlConstantDeclaredElement(string shortName, string xmlNsUri, string defaultXmlnsName, XamlLanguageLevel languageLevel, XamlPlatformContext platformContext);
    public virtual DeclaredElementType GetElementType();
    public sealed virtual IExpressionType GetExpressionType(ITreeNode treeNode);
    public sealed virtual object GetValue();
}
[PsiSharedComponentAttribute]
internal class JetBrains.ReSharper.Psi.Xaml.Impl.DeclaredElements.XamlDeclaredElementPresenter : object {
    public static XamlDeclaredElementPresenter Instance { get; }
    public static XamlDeclaredElementPresenter get_Instance();
    public virtual RichText Format(DeclaredElementPresenterStyle style, IDeclaredElement declaredElement, ISubstitution substitution, DeclaredElementPresenterMarking& marking);
    [NotNullAttribute]
private static RichText GetTypeRichText(TypePresentationStyle typePresentationStyle, IDeclaredElement declaredElement, ISubstitution substitution);
    public virtual string Format(ParameterKind parameterKind);
    public virtual string Format(AccessRights accessRights);
    public virtual string GetEntityKind(IDeclaredElement declaredElement);
    private static TextRange AppendString(RichText sb, string substr, TextStyle textStyle);
    private static TextRange AppendRichText(RichText sb, RichText substr);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.DeclaredElements.XamlDeclaredElementsCacheImpl : object {
    private XamlPlatformContext myPlatformContext;
    [NotNullAttribute]
private object myLockObject;
    [NotNullAttribute]
private Dictionary`2<string, CacheEntry> myDeclaredElements;
    [NotNullAttribute]
private XmlPredefinedNamespaceAlias myXmlPredefinedNamespaceAlias;
    [NotNullAttribute]
private XmlnsPredefinedNamespaceAlias myXmlnsPredefinedNamespaceAlias;
    private bool myIsInitialized;
    public IXamlNamespaceAlias XmlNamespaceAlias { get; }
    public IXamlNamespaceAlias XmlnsNamespaceAlias { get; }
    public IXamlObjectDeclaredElement XClassAttributes { get; }
    public IXamlObjectDeclaredElement XAttributes { get; }
    public IXamlObjectDeclaredElement XMembers { get; }
    public IXamlObjectDeclaredElement XProperty { get; }
    public IXamlAttributeDeclaredElement XPropertyAttributes { get; }
    public IXamlAttributeDeclaredElement IgnorableAttribute { get; }
    public IXamlAttributeDeclaredElement ProcessContentAttribute { get; }
    public IXamlAttributeDeclaredElement ChoiceRequires { get; }
    public IXamlObjectDeclaredElement Choice { get; }
    public IXamlAttributeDeclaredElement FreezeAttribute { get; }
    public IXamlObjectDeclaredElement DesignInstance { get; }
    public IXamlObjectDeclaredElement DesignData { get; }
    public IXamlAttributeDeclaredElement DesignDataSourceAttribute { get; }
    public IXamlAttributeDeclaredElement DItemsSourceAttribute { get; }
    public IXamlAttributeDeclaredElement DesignInstanceTypeAttribute { get; }
    public IXamlAttributeDeclaredElement DesignDataTypeAttribute { get; }
    public IXamlAttributeDeclaredElement DesignInstanceCreateListAttribute { get; }
    public IXamlAttributeDeclaredElement DesignInstanceIsDesignTimeCreatableAttribute { get; }
    public IXamlAttributeDeclaredElement DesignDesignSourceAttribute { get; }
    public IXamlAttributeDeclaredElement DesignSourceAttribute { get; }
    public IXamlAttributeDeclaredElement DataContextAttribute { get; }
    public IXamlAttributeDeclaredElement DesignWidth { get; }
    public IXamlAttributeDeclaredElement DesignHeight { get; }
    public IXamlAttributeDeclaredElement DBackground { get; }
    public IXamlObjectDeclaredElement CompiledBind { get; }
    public IXamlAttributeDeclaredElement CompiledBindMode { get; }
    public IXamlAttributeDeclaredElement CompiledBindUpdateSourceTrigger { get; }
    public IXamlAttributeDeclaredElement CompiledBindConverter { get; }
    public IXamlAttributeDeclaredElement CompiledBindDataType { get; }
    public IXamlAttributeDeclaredElement CompileBindings { get; }
    public IXamlAttributeDeclaredElement DefaultBindMode { get; }
    public IXamlAttributeDeclaredElement XamarinCompiledBindDataType { get; }
    public XamlDeclaredElementsCacheImpl(XamlPlatformContext platformContext);
    private void InitializeIfNecessary();
    private void LoadDeclaredElements(XmlElement elementsNode);
    private void LoadPredefinedNamespace(XmlElement xmlnsElement);
    private static int GetTypeParametersCount(XmlElement element);
    private static bool GetCanBeMarkup(XmlElement element);
    [NotNullAttribute]
private static String[] GetAssemblyNames(XmlElement element);
    [NotNullAttribute]
private IList`1<IXamlAttributeDeclaredElement> FetchLocalAttributes(string xmlnsName, string uri, XmlElement element);
    private static XamlLanguageLevel GetLanguageLevel(string level);
    public sealed virtual IList`1<IXamlObjectDeclaredElement> GetObjectDeclaredElements(string uri);
    [ContractAnnotationAttribute("throwWhenNotFound: false => canbenull")]
private IXamlObjectDeclaredElement GetObjectDeclaredElement(string uri, string elementName, bool throwWhenNotFound);
    [ContractAnnotationAttribute("throwWhenNotFound: false => canbenull")]
private IXamlAttributeDeclaredElement GetAttributeDeclaredElement(string uri, string elementName, bool throwWhenNotFound);
    [ContractAnnotationAttribute("throwWhenNotFound: false => canbenull")]
private static IXamlAttributeDeclaredElement GetAttributeDeclaredElement(IXamlObjectDeclaredElement objectElement, string attributeName, bool throwWhenNotFound);
    public sealed virtual IList`1<IXamlAttributeDeclaredElement> GetAttributeDeclaredElements(string uri);
    public sealed virtual IList`1<IXamlConstantDeclaredElement> GetConstantDeclaredElements(string uri);
    public sealed virtual IList`1<IXamlPseudoClassDeclaredElement> GetPseudoClassDeclaredElements(string uri);
    public sealed virtual IEnumerable`1<string> GetXmlns();
    public sealed virtual IXamlNamespaceAlias get_XmlNamespaceAlias();
    public sealed virtual IXamlNamespaceAlias get_XmlnsNamespaceAlias();
    public sealed virtual IXamlObjectDeclaredElement get_XClassAttributes();
    public sealed virtual IXamlObjectDeclaredElement get_XAttributes();
    public sealed virtual IXamlObjectDeclaredElement get_XMembers();
    public sealed virtual IXamlObjectDeclaredElement get_XProperty();
    public sealed virtual IXamlAttributeDeclaredElement get_XPropertyAttributes();
    public sealed virtual IXamlAttributeDeclaredElement get_IgnorableAttribute();
    public sealed virtual IXamlAttributeDeclaredElement get_ProcessContentAttribute();
    public sealed virtual IXamlAttributeDeclaredElement get_ChoiceRequires();
    public sealed virtual IXamlObjectDeclaredElement get_Choice();
    public sealed virtual IXamlAttributeDeclaredElement get_FreezeAttribute();
    public sealed virtual IXamlObjectDeclaredElement get_DesignInstance();
    public sealed virtual IXamlObjectDeclaredElement get_DesignData();
    public sealed virtual IXamlAttributeDeclaredElement get_DesignDataSourceAttribute();
    public sealed virtual IXamlAttributeDeclaredElement get_DItemsSourceAttribute();
    public sealed virtual IXamlAttributeDeclaredElement get_DesignInstanceTypeAttribute();
    public sealed virtual IXamlAttributeDeclaredElement get_DesignDataTypeAttribute();
    public sealed virtual IXamlAttributeDeclaredElement get_DesignInstanceCreateListAttribute();
    public sealed virtual IXamlAttributeDeclaredElement get_DesignInstanceIsDesignTimeCreatableAttribute();
    public sealed virtual IXamlAttributeDeclaredElement get_DesignDesignSourceAttribute();
    public sealed virtual IXamlAttributeDeclaredElement get_DesignSourceAttribute();
    public sealed virtual IXamlAttributeDeclaredElement get_DataContextAttribute();
    public sealed virtual IXamlAttributeDeclaredElement get_DesignWidth();
    public sealed virtual IXamlAttributeDeclaredElement get_DesignHeight();
    public sealed virtual IXamlAttributeDeclaredElement get_DBackground();
    public sealed virtual IXamlObjectDeclaredElement get_CompiledBind();
    public sealed virtual IXamlAttributeDeclaredElement get_CompiledBindMode();
    public sealed virtual IXamlAttributeDeclaredElement get_CompiledBindUpdateSourceTrigger();
    public sealed virtual IXamlAttributeDeclaredElement get_CompiledBindConverter();
    public sealed virtual IXamlAttributeDeclaredElement get_CompiledBindDataType();
    public sealed virtual IXamlAttributeDeclaredElement get_CompileBindings();
    public sealed virtual IXamlAttributeDeclaredElement get_DefaultBindMode();
    public sealed virtual IXamlAttributeDeclaredElement get_XamarinCompiledBindDataType();
}
public class JetBrains.ReSharper.Psi.Xaml.Impl.DeclaredElements.XamlDeclaredElementType : DeclaredElementType {
    public static XamlDeclaredElementType NamespaceAlias;
    public static XamlDeclaredElementType Resource;
    public static XamlDeclaredElementType TemplateField;
    public static XamlDeclaredElementType EmbeddedResource;
    public static XamlDeclaredElementType XamlMarkupObjectElement;
    public static XamlDeclaredElementType XamlMarkupAttribute;
    public static XamlDeclaredElementType AttachedEvent;
    public static XamlDeclaredElementType AttachedProperty;
    public static XamlDeclaredElementType XamlMarkupConstant;
    public static XamlDeclaredElementType XamlPseudoClass;
    public static XamlDeclaredElementType XamlStyleClass;
    private IconId myImageName;
    [CompilerGeneratedAttribute]
private string <PresentableName>k__BackingField;
    public string PresentableName { get; }
    protected IDeclaredElementPresenter DefaultPresenter { get; }
    private XamlDeclaredElementType(string name, IconId imageName);
    private static XamlDeclaredElementType();
    [CompilerGeneratedAttribute]
public virtual string get_PresentableName();
    public virtual IconId GetImage();
    protected virtual IDeclaredElementPresenter get_DefaultPresenter();
    public virtual bool IsPresentable(PsiLanguageType language);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.DeclaredElements.XamlField : XamlClrCachedTypeMemberBase {
    public bool IsField { get; }
    public bool IsRequired { get; }
    public ReferenceKind ReferenceKind { get; }
    public AccessibilityDomain AccessibilityDomain { get; }
    public string XMLDocId { get; }
    public XamlField(IXamlDeclaration declaration);
    public sealed virtual bool get_IsField();
    public sealed virtual bool get_IsRequired();
    public sealed virtual ReferenceKind get_ReferenceKind();
    public sealed virtual AccessibilityDomain get_AccessibilityDomain();
    public virtual DeclaredElementType GetElementType();
    public sealed virtual string get_XMLDocId();
    private sealed virtual override ITypeElement JetBrains.ReSharper.Psi.ITypeMember.get_ContainingType();
    private sealed virtual override IPsiModule JetBrains.ReSharper.Psi.IClrDeclaredElement.get_Module();
    private sealed virtual override ITypeElement JetBrains.ReSharper.Psi.IClrDeclaredElement.GetContainingType();
    private sealed virtual override PsiLanguageType JetBrains.ReSharper.Psi.IDeclaredElement.get_PresentationLanguage();
    private sealed virtual override IPsiServices JetBrains.ReSharper.Psi.IDeclaredElement.GetPsiServices();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.DeclaredElements.XamlMarkupDeclaredElement : XamlObjectDeclaredElementWithType {
    public XamlMarkupDeclaredElement(string shortName, string xmlNsUri, string defaultXmlnsName, string typeName, int typeArgumentsCount, string namespaceName, String[] assemblyNames, IList`1<IXamlAttributeDeclaredElement> attributes, XamlLanguageLevel languageLevel, XamlPlatformContext platformContext);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.DeclaredElements.XamlObjectDeclaredElement : XamlPredefinedDeclaredElementBase {
    [NotNullAttribute]
private IList`1<IXamlAttributeDeclaredElement> myAttributes;
    public XamlObjectDeclaredElement(string shortName, string xmlNsUri, string defaultXmlnsName, IList`1<IXamlAttributeDeclaredElement> attributes, XamlLanguageLevel languageLevel, XamlPlatformContext platformContext);
    public virtual DeclaredElementType GetElementType();
    public sealed virtual IList`1<IXamlAttributeDeclaredElement> GetPredefinedAttributes();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.DeclaredElements.XamlObjectDeclaredElementWithType : XamlObjectDeclaredElement {
    [NotNullAttribute]
private string myFullQualifiedName;
    [NotNullAttribute]
private String[] myAssemblyNames;
    public ITypeElement TypeElement { get; }
    protected XamlObjectDeclaredElementWithType(string shortName, string xmlNsUri, string defaultXmlnsName, string typeName, int typeArgumentsCount, string namespaceName, String[] assemblyNames, IList`1<IXamlAttributeDeclaredElement> attributes, XamlLanguageLevel languageLevel, XamlPlatformContext platformContext);
    public sealed virtual ITypeElement get_TypeElement();
}
internal abstract class JetBrains.ReSharper.Psi.Xaml.Impl.DeclaredElements.XamlPredefinedDeclaredElementBase : object {
    [NotNullAttribute]
private string myShortName;
    [NotNullAttribute]
private string myXmlNsUri;
    [NotNullAttribute]
private string myDefaultXmlNsName;
    private XamlLanguageLevel myLanguageLevel;
    private XamlPlatformContext myPlatformContext;
    public string ShortName { get; }
    [NotNullAttribute]
public IPsiModule Module { get; }
    public XamlPlatform Platform { get; }
    [NotNullAttribute]
public ISubstitution IdSubstitution { get; }
    public XamlLanguageLevel LanguageLevel { get; }
    public string XmlNsUri { get; }
    public string DefaultXmlNsName { get; }
    public bool CaseSensitiveName { get; }
    public PsiLanguageType PresentationLanguage { get; }
    protected XamlPredefinedDeclaredElementBase(string shortName, string xmlNsUri, string defaultXmlnsName, XamlLanguageLevel languageLevel, XamlPlatformContext platformContext);
    public sealed virtual string get_ShortName();
    public sealed virtual IPsiModule get_Module();
    public sealed virtual XamlPlatform get_Platform();
    public sealed virtual ISubstitution get_IdSubstitution();
    [CanBeNullAttribute]
public sealed virtual ITypeElement GetContainingType();
    [CanBeNullAttribute]
public sealed virtual ITypeMember GetContainingTypeMember();
    public sealed virtual XamlLanguageLevel get_LanguageLevel();
    public sealed virtual string get_XmlNsUri();
    public sealed virtual string get_DefaultXmlNsName();
    public sealed virtual IList`1<IDeclaration> GetDeclarations();
    public sealed virtual IList`1<IDeclaration> GetDeclarationsIn(IPsiSourceFile sourceFile);
    public sealed virtual bool get_CaseSensitiveName();
    public abstract virtual DeclaredElementType GetElementType();
    public sealed virtual IPsiServices GetPsiServices();
    public sealed virtual XmlNode GetXMLDoc(bool inherit);
    public sealed virtual XmlNode GetXMLDescriptionSummary(bool inherit);
    public sealed virtual bool IsValid();
    public sealed virtual bool IsSynthetic();
    public sealed virtual PsiLanguageType get_PresentationLanguage();
    public sealed virtual bool HasDeclarationsIn(IPsiSourceFile sourceFile);
    public sealed virtual HybridCollection`1<IPsiSourceFile> GetSourceFiles();
    public virtual string ToString();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.DeclaredElements.XamlPredefinedResource : object {
    [NotNullAttribute]
private string myShortName;
    [NotNullAttribute]
private IPsiServices myPsiServices;
    [NotNullAttribute]
private IType myType;
    [CanBeNullAttribute]
private IType myTargetType;
    [CanBeNullAttribute]
private XmlNode myDescription;
    public IType ResourceType { get; }
    public IType TypeKey { get; }
    public IDeclaredElement StaticMemberKey { get; }
    public IType TargetType { get; }
    public string XamarinFormsClass { get; }
    public string ShortName { get; }
    public bool CaseSensitiveName { get; }
    public PsiLanguageType PresentationLanguage { get; }
    public XamlPredefinedResource(IPsiServices psiServices, string shortName, string description, IType type, IType targetType);
    public sealed virtual IResourceDeclaration GetDeclaration();
    public sealed virtual IType get_ResourceType();
    public sealed virtual IType get_TypeKey();
    public sealed virtual IDeclaredElement get_StaticMemberKey();
    public sealed virtual IType get_TargetType();
    public sealed virtual string get_XamarinFormsClass();
    public sealed virtual IPsiServices GetPsiServices();
    public sealed virtual IList`1<IDeclaration> GetDeclarations();
    public sealed virtual IList`1<IDeclaration> GetDeclarationsIn(IPsiSourceFile sourceFile);
    public sealed virtual HybridCollection`1<IPsiSourceFile> GetSourceFiles();
    public sealed virtual string get_ShortName();
    public sealed virtual bool get_CaseSensitiveName();
    public sealed virtual PsiLanguageType get_PresentationLanguage();
    public sealed virtual DeclaredElementType GetElementType();
    public sealed virtual XmlNode GetXMLDoc(bool inherit);
    public sealed virtual XmlNode GetXMLDescriptionSummary(bool inherit);
    public sealed virtual bool HasDeclarationsIn(IPsiSourceFile sourceFile);
    public sealed virtual bool IsSynthetic();
    public sealed virtual bool IsValid();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.DeclaredElements.XamlPredefinedTypeDeclaredElement : XamlObjectDeclaredElementWithType {
    [CompilerGeneratedAttribute]
private bool <CanBeMarkup>k__BackingField;
    public bool CanBeMarkup { get; }
    public XamlPredefinedTypeDeclaredElement(string shortName, string xmlNsUri, string defaultXmlnsName, string typeName, int typeArgumentsCount, string namespaceName, String[] assemblyNames, IList`1<IXamlAttributeDeclaredElement> attributes, XamlLanguageLevel languageLevel, XamlPlatformContext platformContext, bool canBeMarkup);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_CanBeMarkup();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.DeclaredElements.XamlProjectEmbeddedResource : PathDeclaredElement {
    [CompilerGeneratedAttribute]
private IPsiModule <Module>k__BackingField;
    public IPsiModule Module { get; }
    public XamlProjectEmbeddedResource(IPsiServices psiServices, IPsiSourceFile psiSourceFile, string name, IPsiModule module);
    public virtual DeclaredElementType GetElementType();
    [CompilerGeneratedAttribute]
public sealed virtual IPsiModule get_Module();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.DeclaredElements.XamlProperty : XamlClrCachedTypeMemberBase {
    [CompilerGeneratedAttribute]
private IAccessor <Getter>k__BackingField;
    [CompilerGeneratedAttribute]
private IAccessor <Setter>k__BackingField;
    public IAccessor Getter { get; }
    public IAccessor Setter { get; }
    public AccessibilityDomain AccessibilityDomain { get; }
    public string XMLDocId { get; }
    public bool IsExplicitImplementation { get; }
    public IList`1<IExplicitImplementation> ExplicitImplementations { get; }
    public bool CanBeImplicitImplementation { get; }
    public IList`1<IParameter> Parameters { get; }
    public IType ReturnType { get; }
    public ReferenceKind ReturnKind { get; }
    public bool IsReadable { get; }
    public bool IsWritable { get; }
    public bool IsDefault { get; }
    public bool IsRequired { get; }
    public bool IsAuto { get; }
    public XamlProperty(IXamlDeclaration declaration);
    [CompilerGeneratedAttribute]
public sealed virtual IAccessor get_Getter();
    [CompilerGeneratedAttribute]
public sealed virtual IAccessor get_Setter();
    public sealed virtual AccessibilityDomain get_AccessibilityDomain();
    public virtual DeclaredElementType GetElementType();
    public sealed virtual string get_XMLDocId();
    public sealed virtual bool get_IsExplicitImplementation();
    public sealed virtual IList`1<IExplicitImplementation> get_ExplicitImplementations();
    public sealed virtual bool get_CanBeImplicitImplementation();
    public sealed virtual IList`1<IParameter> get_Parameters();
    public sealed virtual IType get_ReturnType();
    public sealed virtual ReferenceKind get_ReturnKind();
    public sealed virtual InvocableSignature GetSignature(ISubstitution substitution);
    public sealed virtual IEnumerable`1<IParametersOwnerDeclaration> GetParametersOwnerDeclarations();
    public sealed virtual bool get_IsReadable();
    public sealed virtual bool get_IsWritable();
    public sealed virtual bool get_IsDefault();
    public sealed virtual bool get_IsRequired();
    public sealed virtual bool get_IsAuto();
    private sealed virtual override string JetBrains.ReSharper.Psi.IProperty.GetDefaultPropertyMetadataName();
    public virtual IList`1<IAttributeInstance> GetAttributeInstances(AttributesSource attributesSource);
    public virtual IList`1<IAttributeInstance> GetAttributeInstances(IClrTypeName clrName, AttributesSource attributesSource);
    public virtual bool HasAttributeInstance(IClrTypeName clrName, AttributesSource attributesSource);
    private sealed virtual override ITypeElement JetBrains.ReSharper.Psi.ITypeMember.get_ContainingType();
    private sealed virtual override IPsiModule JetBrains.ReSharper.Psi.IClrDeclaredElement.get_Module();
    private sealed virtual override ITypeElement JetBrains.ReSharper.Psi.IClrDeclaredElement.GetContainingType();
    private sealed virtual override PsiLanguageType JetBrains.ReSharper.Psi.IDeclaredElement.get_PresentationLanguage();
    private sealed virtual override IPsiServices JetBrains.ReSharper.Psi.IDeclaredElement.GetPsiServices();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.DeclaredElements.XamlPseudoClassDeclaredElement : object {
    private IPsiModule myModule;
    [CompilerGeneratedAttribute]
private string <ShortName>k__BackingField;
    public string ShortName { get; }
    public bool CaseSensitiveName { get; }
    public PsiLanguageType PresentationLanguage { get; }
    public XamlPseudoClassDeclaredElement(string shortName, IPsiModule module);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ShortName();
    public sealed virtual bool get_CaseSensitiveName();
    public sealed virtual PsiLanguageType get_PresentationLanguage();
    public sealed virtual DeclaredElementType GetElementType();
    public sealed virtual bool IsValid();
    public sealed virtual bool IsSynthetic();
    public sealed virtual IList`1<IDeclaration> GetDeclarations();
    public sealed virtual IList`1<IDeclaration> GetDeclarationsIn(IPsiSourceFile sourceFile);
    public sealed virtual HybridCollection`1<IPsiSourceFile> GetSourceFiles();
    public sealed virtual bool HasDeclarationsIn(IPsiSourceFile sourceFile);
    public sealed virtual IPsiServices GetPsiServices();
    public sealed virtual XmlNode GetXMLDoc(bool inherit);
    public sealed virtual XmlNode GetXMLDescriptionSummary(bool inherit);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.DeclaredElements.XamlResource : XamlCachedTypeMemberBase {
    public IType ResourceType { get; }
    public IType TypeKey { get; }
    public IDeclaredElement StaticMemberKey { get; }
    public IType TargetType { get; }
    public string XamarinFormsClass { get; }
    public XamlResource(IResourceDeclaration objectElement);
    public virtual DeclaredElementType GetElementType();
    public sealed virtual IResourceDeclaration GetDeclaration();
    public sealed virtual IType get_ResourceType();
    private IType GetResourceTypeImpl(HashSet`1<IXamlResource> visitedResources);
    public sealed virtual IType get_TypeKey();
    public sealed virtual IDeclaredElement get_StaticMemberKey();
    public sealed virtual IType get_TargetType();
    public sealed virtual string get_XamarinFormsClass();
    private sealed virtual override PsiLanguageType JetBrains.ReSharper.Psi.IDeclaredElement.get_PresentationLanguage();
    private sealed virtual override IPsiServices JetBrains.ReSharper.Psi.IDeclaredElement.GetPsiServices();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.DeclaredElements.XamlStyleClass : CachedTypeMemberBase {
    public string ShortName { get; }
    public bool CaseSensitiveName { get; }
    public XamlStyleClass(IDeclaration declaration);
    protected virtual bool CanBindTo(IDeclaration declaration);
    public sealed virtual string get_ShortName();
    public sealed virtual bool get_CaseSensitiveName();
    public sealed virtual DeclaredElementType GetElementType();
    public sealed virtual XmlNode GetXMLDoc(bool inherit);
    public sealed virtual XmlNode GetXMLDescriptionSummary(bool inherit);
    public sealed virtual bool IsSynthetic();
    public sealed virtual IClassSelectorExpression GetDeclaration();
    private sealed virtual override PsiLanguageType JetBrains.ReSharper.Psi.IDeclaredElement.get_PresentationLanguage();
    private sealed virtual override IPsiServices JetBrains.ReSharper.Psi.IDeclaredElement.GetPsiServices();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.DeclaredElements.XamlTemplateField : XamlCachedTypeMemberBase {
    public XamlTemplateField(TemplateFieldDeclaration objectElement);
    public virtual DeclaredElementType GetElementType();
    private sealed virtual override IPsiModule JetBrains.ReSharper.Psi.IClrDeclaredElement.get_Module();
    private sealed virtual override ITypeElement JetBrains.ReSharper.Psi.IClrDeclaredElement.GetContainingType();
    private sealed virtual override PsiLanguageType JetBrains.ReSharper.Psi.IDeclaredElement.get_PresentationLanguage();
    private sealed virtual override IPsiServices JetBrains.ReSharper.Psi.IDeclaredElement.GetPsiServices();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.DeclaredElements.XmlnsPredefinedNamespaceAlias : XamlPredefinedDeclaredElementBase {
    public static string URI;
    public bool IsDefault { get; }
    public bool IsUsingAlias { get; }
    public bool IsCLRNamespaceAlias { get; }
    public bool IsUrnAlias { get; }
    public bool CanBeIgnored { get; }
    public string RawValue { get; }
    public string UriNoArguments { get; }
    public string UriArguments { get; }
    public XmlnsPredefinedNamespaceAlias(XamlPlatformContext platformContext);
    public sealed virtual bool get_IsDefault();
    public sealed virtual bool get_IsUsingAlias();
    public sealed virtual bool get_IsCLRNamespaceAlias();
    public sealed virtual bool get_IsUrnAlias();
    public sealed virtual bool get_CanBeIgnored();
    public sealed virtual string get_RawValue();
    public sealed virtual string get_UriNoArguments();
    public sealed virtual string get_UriArguments();
    public sealed virtual INamespaceAlias GetDeclaration();
    public sealed virtual INamespace GetNamespace();
    public sealed virtual IList`1<ReferencedNamespace> GetReferencedNamespaces();
    public sealed virtual IList`1<IPsiModule> GetTargetModules();
    public virtual DeclaredElementType GetElementType();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.DeclaredElements.XmlPredefinedNamespaceAlias : XamlPredefinedDeclaredElementBase {
    public static string URI;
    public bool IsDefault { get; }
    public bool IsUsingAlias { get; }
    public bool IsCLRNamespaceAlias { get; }
    public bool IsUrnAlias { get; }
    public bool CanBeIgnored { get; }
    public string RawValue { get; }
    public string UriNoArguments { get; }
    public string UriArguments { get; }
    public XmlPredefinedNamespaceAlias(XamlPlatformContext platformContext);
    public sealed virtual bool get_IsDefault();
    public sealed virtual bool get_IsUsingAlias();
    public sealed virtual bool get_IsCLRNamespaceAlias();
    public sealed virtual bool get_IsUrnAlias();
    public sealed virtual bool get_CanBeIgnored();
    public sealed virtual string get_RawValue();
    public sealed virtual string get_UriNoArguments();
    public sealed virtual string get_UriArguments();
    public sealed virtual INamespaceAlias GetDeclaration();
    public sealed virtual INamespace GetNamespace();
    public sealed virtual IList`1<ReferencedNamespace> GetReferencedNamespaces();
    public sealed virtual IList`1<IPsiModule> GetTargetModules();
    public virtual DeclaredElementType GetElementType();
}
public interface JetBrains.ReSharper.Psi.Xaml.Impl.GeneratedFiles.IXamlGeneratedFileChecker {
    public abstract virtual bool IsGeneratedXamlFile(IProject project, TargetFrameworkId targetFramework, VirtualFileSystemPath location);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Psi.Xaml.Impl.GeneratedFiles.XamlGeneratedFileCheckerOnMsBuildData : object {
    private IDictionary`2<VirtualFileSystemPath, ICollection`1<VirtualFileSystemPath>> myGeneratedFilePaths;
    public void SetGeneratedFiles(VirtualFileSystemPath projectProjectFileLocation, ICollection`1<VirtualFileSystemPath> getGeneratedFilePaths);
    public sealed virtual bool IsGeneratedXamlFile(IProject project, TargetFrameworkId targetFramework, VirtualFileSystemPath location);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Psi.Xaml.Impl.GeneratedFiles.XamlGeneratedFileCheckerOnProjectModel : object {
    private ILogger myLogger;
    public XamlGeneratedFileCheckerOnProjectModel(ILogger logger);
    public sealed virtual bool IsGeneratedXamlFile(IProject project, TargetFrameworkId targetFramework, VirtualFileSystemPath location);
    private static bool FindByPhysicalPath(IProject project, VirtualFileSystemPath location);
    private static bool FindByLogicalPath(IProjectFolder projectFolder, RelativePath location);
    [CanBeNullAttribute]
private static string TryGetOriginalXamlFileName(VirtualFileSystemPath location);
    [NotNullAttribute]
public static string GetXamarinLikeName(IPath directory);
}
[PsiSharedComponentAttribute]
public class JetBrains.ReSharper.Psi.Xaml.Impl.GeneratedFiles.XamlGeneratedFilesPropertiesProvider : object {
    private static Key`1<CachedProjectItemAnyChange`2<IProject, bool>> ourCanProjectContainXamlGeneratedFile;
    private IImmutableList`1<IXamlGeneratedFileChecker> myCheckers;
    public double Order { get; }
    public XamlGeneratedFilesPropertiesProvider(IImmutableList`1<IXamlGeneratedFileChecker> checkers);
    private static XamlGeneratedFilesPropertiesProvider();
    public sealed virtual double get_Order();
    public sealed virtual IPsiSourceFileProperties GetPsiProperties(IPsiSourceFileProperties prevProperties, IProject project, IPsiSourceFileWithLocation sourceFile);
    public sealed virtual IPsiSourceFileProperties GetPsiProperties(IPsiSourceFileProperties prevProperties, IProject project, IProjectFile projectFile, IPsiSourceFile sourceFile);
    private bool IsGeneratedXamlFile(IProject project, IPsiSourceFile sourceFile, IProjectFile projectFile);
    private static bool CanProjectContainXamlGeneratedFile(IProject project);
    private static bool CanBeXamlProject(IProject project);
}
public static class JetBrains.ReSharper.Psi.Xaml.Impl.GeneratedFiles.XamlGeneratedFileUtil : object {
    public static String[] ExtensionsWithDot;
    private static XamlGeneratedFileUtil();
    public static bool HasXamlGeneratedExtension(string fileName);
    [NotNullAttribute]
[ObsoleteAttribute("Use JetBrains.ReSharper.Psi.GeneratedCode.GeneratedFilesUtil.TryGetSourceFilePath")]
public static VirtualFileSystemPath TryGetSourceFilePath(VirtualFileSystemPath generatedFilePath);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.Psi.Xaml.Impl.GeneratedFiles.XamlIsCompileChangedTrackerPathsCollector : object {
    private IPsiModules myPsiModules;
    private XamlGeneratedFileCheckerOnMsBuildData myGeneratedFileCheckerOnMsBuildData;
    public XamlIsCompileChangedTrackerPathsCollector(IPsiModules psiModules, XamlGeneratedFileCheckerOnMsBuildData generatedFileCheckerOnMsBuildData);
    private static string GetXamarinFormsGCsName(IProject project, IProjectFile projectFile, IPath relativeFolderLocation);
    public static GeneratedFilesMap GetProjectFilesWithCorrespondingGCs(IEnumerable`1<Pair`2<IProjectFile, TargetFrameworkId>> projectFiles, IProject project, IMsBuildFilesData msBuildFilesData);
    public sealed virtual IEnumerable`1<VirtualFileSystemPath> GetPaths(IProject project, IMsBuildFilesData filesData);
}
public interface JetBrains.ReSharper.Psi.Xaml.Impl.IXamlInheritorTypeNames {
    [CanBeNullAttribute]
public abstract virtual HashSet`1<string> TryGetPossibleInheritorTypeNames(string typeName);
}
public interface JetBrains.ReSharper.Psi.Xaml.Impl.IXamlTreeBuilderContext {
    public XamlPlatform XamlPlatform { get; }
    public abstract virtual XamlPlatform get_XamlPlatform();
}
public interface JetBrains.ReSharper.Psi.Xaml.Impl.IXamlTypeConversionRule {
}
public static class JetBrains.ReSharper.Psi.Xaml.Impl.Resolve.AvaloniaContentUtil : object {
    public static bool CanBeParsed(ITypeElement typeElement, IType type, IXamlTypeCache xamlTypeCache);
}
public static class JetBrains.ReSharper.Psi.Xaml.Impl.Resolve.AvaloniaResolveUtil : object {
    public static string AVALONIA_XMLNS;
    public static string AVALONIA_SDK;
    public static string SELECTOR_PROPERTY;
    [CanBeNullAttribute]
[PureAttribute]
public static IResolveResult TryFindInstantiableConstructor(IResolveResult resolveResult, ITreeNode referenceOwner);
    [PureAttribute]
private static bool IsInstantiableConstructor(IConstructor constructor, ITreeNode referenceOwner);
    [CanBeNullAttribute]
public static ITypeElement GetCodeBehindTypeElement(ITreeNode xamlContext);
}
[IsReadOnlyAttribute]
public class JetBrains.ReSharper.Psi.Xaml.Impl.Resolve.ContentTypeInfo : ValueType {
    [CompilerGeneratedAttribute]
private bool <NoContentProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TypeHasTypeConverter>k__BackingField;
    [CanBeNullAttribute]
public string ContentProperty;
    [CompilerGeneratedAttribute]
private bool <ContentPropertyHasTypeConverter>k__BackingField;
    [CanBeNullAttribute]
public IType[] PropertyTypes;
    [CanBeNullAttribute]
public IType[] ContentTypes;
    public bool IsCollection;
    public static ContentTypeInfo Empty;
    public bool NoContentProperty { get; }
    public bool TypeHasTypeConverter { get; }
    public bool ContentPropertyHasTypeConverter { get; }
    public ContentTypeInfo(bool noContentProperty, string contentProperty, IType[] propertyTypes, IType[] contentTypes, bool isCollection, bool typeHasTypeConverter, bool contentPropertyHasTypeConverter);
    private static ContentTypeInfo();
    [CompilerGeneratedAttribute]
public bool get_NoContentProperty();
    [CompilerGeneratedAttribute]
public bool get_TypeHasTypeConverter();
    [CompilerGeneratedAttribute]
public bool get_ContentPropertyHasTypeConverter();
}
public interface JetBrains.ReSharper.Psi.Xaml.Impl.Resolve.IXamlFunctionResolver {
    public abstract virtual ResolveResultWithInfo ResolveMethod(IXamlFunctionReference functionReference, bool filterByName, ISymbolTable symbolTable, IAccessContext context);
}
public interface JetBrains.ReSharper.Psi.Xaml.Impl.Resolve.IXamlInvalidatingTypeCache {
    public abstract virtual void DropTypes();
}
public interface JetBrains.ReSharper.Psi.Xaml.Impl.Resolve.IXamlMethodGroupConvertibleFilterFactory {
    public abstract virtual SimpleSymbolFilter CreateMethodGroupConvertibleFilter(ITreeNode xamlContext, DeclaredElementInstance`1<IDelegate> eventTypeInstance);
}
public interface JetBrains.ReSharper.Psi.Xaml.Impl.Resolve.IXamlModifiersSupport {
    [NotNullAttribute]
public string PublicString { get; }
    [NotNullAttribute]
public string InternalString { get; }
    [NotNullAttribute]
public string PrivateString { get; }
    [NotNullAttribute]
public string ProtectedString { get; }
    public abstract virtual string get_PublicString();
    public abstract virtual string get_InternalString();
    public abstract virtual string get_PrivateString();
    public abstract virtual string get_ProtectedString();
    [NotNullAttribute]
public abstract virtual IEqualityComparer`1<string> GetModifierComparer(ITreeNode context);
}
public interface JetBrains.ReSharper.Psi.Xaml.Impl.Resolve.IXamlNullExpressionTypeProvider {
    public abstract virtual IExpressionType CreateNullExpressionType(IPsiModule psiModule);
}
public interface JetBrains.ReSharper.Psi.Xaml.Impl.Resolve.IXamlTypeCache {
    [NotNullAttribute]
public IDeclaredType String { get; }
    [NotNullAttribute]
public IDeclaredType CultureInfo { get; }
    [NotNullAttribute]
public IDeclaredType Attribute { get; }
    [NotNullAttribute]
public IDeclaredType Bool { get; }
    [NotNullAttribute]
public IDeclaredType DependencyObject { get; }
    [NotNullAttribute]
public IDeclaredType DependencyProperty { get; }
    [NotNullAttribute]
public IDeclaredType DependencyPropertyKey { get; }
    [NotNullAttribute]
public IDeclaredType IListType { get; }
    [NotNullAttribute]
public IDeclaredType GenericIListType { get; }
    [NotNullAttribute]
public IDeclaredType GenericICollectionType { get; }
    [NotNullAttribute]
public IDeclaredType IDictionaryType { get; }
    [NotNullAttribute]
public IDeclaredType IEnumerableType { get; }
    [NotNullAttribute]
public IDeclaredType GenericIEnumerableType { get; }
    [NotNullAttribute]
public IDeclaredType GenericIDictionaryType { get; }
    [NotNullAttribute]
public IDeclaredType GenericIObservableMap { get; }
    [NotNullAttribute]
public IDeclaredType IAddChildType { get; }
    [NotNullAttribute]
public IDeclaredType Application { get; }
    [NotNullAttribute]
public IDeclaredType ResourceDictionary { get; }
    [NotNullAttribute]
public IDeclaredType IResourceDictionary { get; }
    [NotNullAttribute]
public IDeclaredType AvaloniaResourceInclude { get; }
    [NotNullAttribute]
public IDeclaredType AvaloniaResourceIncludeSince11 { get; }
    [NotNullAttribute]
public IDeclaredType ResourceKey { get; }
    [NotNullAttribute]
public IDeclaredType EventSetter { get; }
    [NotNullAttribute]
public IDeclaredType EventTrigger { get; }
    [NotNullAttribute]
public IDeclaredType TriggerCollection { get; }
    [NotNullAttribute]
public IDeclaredType RelativeSourceMode { get; }
    [NotNullAttribute]
public IDeclaredType XamarinRelativeSourceMode { get; }
    [NotNullAttribute]
public IDeclaredType AvaloniaRelativeSourceMode { get; }
    [NotNullAttribute]
public IDeclaredType MauiRelativeSourceBindingMode { get; }
    [NotNullAttribute]
public IDeclaredType RelativeSource { get; }
    [NotNullAttribute]
public IDeclaredType AvaloniaRelativeSource { get; }
    [NotNullAttribute]
public IDeclaredType Style { get; }
    [NotNullAttribute]
public IDeclaredType Styles { get; }
    [NotNullAttribute]
public IDeclaredType StyleInclude { get; }
    [NotNullAttribute]
public IDeclaredType Classes { get; }
    [NotNullAttribute]
public IDeclaredType Setter { get; }
    [NotNullAttribute]
public IDeclaredType Trigger { get; }
    [NotNullAttribute]
public IDeclaredType ObjectDataProvider { get; }
    [NotNullAttribute]
public IDeclaredType MarkupExtension { get; }
    [NotNullAttribute]
public IDeclaredType WorkflowMarkupExtension { get; }
    [NotNullAttribute]
public IDeclaredType IMarkupExtension { get; }
    [NotNullAttribute]
public IDeclaredType XamarinIMarkupExtension { get; }
    [NotNullAttribute]
public IDeclaredType MauiIMarkupExtension { get; }
    [NotNullAttribute]
public IDeclaredType MauiIMarkupExtensionOfT { get; }
    [NotNullAttribute]
public IDeclaredType AvaloniaIMarkupExtension { get; }
    [NotNullAttribute]
public IDeclaredType AvaloniaMarkupExtension { get; }
    [NotNullAttribute]
public IDeclaredType AvaloniaBinding { get; }
    [NotNullAttribute]
public IDeclaredType AvaloniaBinding2 { get; }
    [NotNullAttribute]
public IDeclaredType AvaloniaReflectionBinding { get; }
    [NotNullAttribute]
public IDeclaredType AvaloniaCompiledBinding { get; }
    [NotNullAttribute]
public IDeclaredType AvaloniaMultiBinding { get; }
    [NotNullAttribute]
public IDeclaredType Freezable { get; }
    [NotNullAttribute]
public IDeclaredType Brush { get; }
    [NotNullAttribute]
public IDeclaredType SolidColorBrush { get; }
    [NotNullAttribute]
public IDeclaredType ISolidColorBrush { get; }
    [NotNullAttribute]
public IDeclaredType IBrush { get; }
    [NotNullAttribute]
public IDeclaredType Brushes { get; }
    [NotNullAttribute]
public IDeclaredType Brushes2 { get; }
    [NotNullAttribute]
public IDeclaredType Color { get; }
    [NotNullAttribute]
public IDeclaredType Colors { get; }
    [NotNullAttribute]
public IDeclaredType WinRTColor { get; }
    [NotNullAttribute]
public IDeclaredType SystemColors { get; }
    [NotNullAttribute]
public IDeclaredType FontWeight { get; }
    [NotNullAttribute]
public IDeclaredType FontWeights { get; }
    [NotNullAttribute]
public IDeclaredType FontStyle { get; }
    [NotNullAttribute]
public IDeclaredType FontStyles { get; }
    [NotNullAttribute]
public IDeclaredType FontStretch { get; }
    [NotNullAttribute]
public IDeclaredType FontStretches { get; }
    [NotNullAttribute]
public IDeclaredType FontFamily { get; }
    [NotNullAttribute]
public IDeclaredType Binding { get; }
    [NotNullAttribute]
public IDeclaredType BindingBase { get; }
    [NotNullAttribute]
public IDeclaredType BindingExpression { get; }
    [NotNullAttribute]
public IDeclaredType BindingMode { get; }
    [NotNullAttribute]
public IDeclaredType BindingUpdateSourceTrigger { get; }
    [NotNullAttribute]
public IDeclaredType IValueConverter { get; }
    [NotNullAttribute]
public IDeclaredType XamarinBinding { get; }
    [NotNullAttribute]
public IDeclaredType XamarinBindingBase { get; }
    [NotNullAttribute]
public IDeclaredType MultiBinding { get; }
    [NotNullAttribute]
public IDeclaredType ArrayExtension { get; }
    [NotNullAttribute]
public IDeclaredType RoutedEventArgs { get; }
    [NotNullAttribute]
public IDeclaredType RoutedEvent { get; }
    [NotNullAttribute]
public IDeclaredType RoutedEventHandler { get; }
    [NotNullAttribute]
public IDeclaredType GenericEventHandler { get; }
    [NotNullAttribute]
public IDeclaredType Geometry { get; }
    [NotNullAttribute]
public IDeclaredType DataTemplate { get; }
    [NotNullAttribute]
public IDeclaredType IDataTemplate { get; }
    [NotNullAttribute]
public IDeclaredType DataTemplates { get; }
    [NotNullAttribute]
public IDeclaredType TreeDataTemplate { get; }
    [NotNullAttribute]
public IDeclaredType HierarchicalDataTemplate { get; }
    [NotNullAttribute]
public IDeclaredType FrameworkTemplate { get; }
    [NotNullAttribute]
public IDeclaredType ImageSource { get; }
    [NotNullAttribute]
public IDeclaredType IBitmap { get; }
    [NotNullAttribute]
public IDeclaredType IImage { get; }
    [NotNullAttribute]
public IDeclaredType Bitmap { get; }
    [NotNullAttribute]
public IDeclaredType IImageBrushSource { get; }
    [NotNullAttribute]
public IDeclaredType StaticResourceExtension { get; }
    [NotNullAttribute]
public IDeclaredType DynamicResourceExtension { get; }
    [NotNullAttribute]
public IDeclaredType RelativeSourceExtension { get; }
    [NotNullAttribute]
public IDeclaredType ModifierKeys { get; }
    [NotNullAttribute]
public IDeclaredType GridLength { get; }
    [NotNullAttribute]
public IDeclaredType ControlTemplate { get; }
    [NotNullAttribute]
public IDeclaredType Grid { get; }
    [NotNullAttribute]
public IDeclaredType RowDefinition { get; }
    [NotNullAttribute]
public IDeclaredType RowDefinitions { get; }
    [NotNullAttribute]
public IDeclaredType Canvas { get; }
    [NotNullAttribute]
public IDeclaredType Panel { get; }
    [NotNullAttribute]
public IDeclaredType ColumnDefinition { get; }
    [NotNullAttribute]
public IDeclaredType ColumnDefinitions { get; }
    [NotNullAttribute]
public IDeclaredType Uri { get; }
    [NotNullAttribute]
public IDeclaredType UriMapping { get; }
    [NotNullAttribute]
public IDeclaredType ICommand { get; }
    [NotNullAttribute]
public IDeclaredType ApplicationCommands { get; }
    [NotNullAttribute]
public IDeclaredType EditingCommands { get; }
    [NotNullAttribute]
public IDeclaredType NavigationCommands { get; }
    [NotNullAttribute]
public IDeclaredType ComponentCommands { get; }
    [NotNullAttribute]
public IDeclaredType MediaCommands { get; }
    [NotNullAttribute]
public IDeclaredType InlineCollection { get; }
    [NotNullAttribute]
public IDeclaredType AvaloniaInlineCollection { get; }
    [NotNullAttribute]
public IDeclaredType Object { get; }
    [NotNullAttribute]
public IDeclaredType FrameworkElement { get; }
    [NotNullAttribute]
public IDeclaredType FrameworkContentElement { get; }
    [NotNullAttribute]
public IDeclaredType IFrameworkInputElement { get; }
    [NotNullAttribute]
public IDeclaredType Key { get; }
    [NotNullAttribute]
public IDeclaredType TextBlock { get; }
    [NotNullAttribute]
public IDeclaredType Control { get; }
    [NotNullAttribute]
public IDeclaredType ItemsControl { get; }
    [NotNullAttribute]
public IDeclaredType IComponentConnector { get; }
    [NotNullAttribute]
public IDeclaredType IComponentConnector2 { get; }
    [NotNullAttribute]
public IDeclaredType ISupportInitialize { get; }
    [NotNullAttribute]
public IDeclaredType PropertyChangedEventArgs { get; }
    [NotNullAttribute]
public IDeclaredType ContentPropertyAttribute { get; }
    [NotNullAttribute]
public IDeclaredType XamarinContentProperty { get; }
    [NotNullAttribute]
public IDeclaredType MauiContentProperty { get; }
    [NotNullAttribute]
public IDeclaredType ICustomTypeDescriptor { get; }
    [NotNullAttribute]
public IDeclaredType ICustomTypeProvider { get; }
    [NotNullAttribute]
public IDeclaredType CollectionViewSource { get; }
    [NotNullAttribute]
public IDeclaredType Thickness { get; }
    [NotNullAttribute]
public IDeclaredType CornerRadius { get; }
    [NotNullAttribute]
public IDeclaredType TransformOperations { get; }
    [NotNullAttribute]
public IDeclaredType TransformationTransformOperations { get; }
    [NotNullAttribute]
public IDeclaredType Visibility { get; }
    [NotNullAttribute]
public IDeclaredType UIElement { get; }
    [NotNullAttribute]
public IDeclaredType UserControl { get; }
    [NotNullAttribute]
public IDeclaredType MauiContentView { get; }
    [NotNullAttribute]
public IDeclaredType Storyboard { get; }
    [NotNullAttribute]
public IDeclaredType RepeatBehavior { get; }
    [NotNullAttribute]
public IDeclaredType VisualStateGroupList { get; }
    [NotNullAttribute]
public IDeclaredType VisualStateGroup { get; }
    [NotNullAttribute]
public IDeclaredType VisualState { get; }
    [NotNullAttribute]
public IDeclaredType Frame { get; }
    [NotNullAttribute]
public IDeclaredType XamarinLayoutOptions { get; }
    [NotNullAttribute]
public IDeclaredType MauiLayoutOptions { get; }
    [NotNullAttribute]
public IDeclaredType XamarinFont { get; }
    [NotNullAttribute]
public IDeclaredType XamarinFontSizeConverter { get; }
    [NotNullAttribute]
public IDeclaredType XamarinKeyboard { get; }
    [NotNullAttribute]
public IDeclaredType XamarinKeyboardTypeConverter { get; }
    [NotNullAttribute]
public IDeclaredType XamarinFontAttributes { get; }
    [NotNullAttribute]
public IDeclaredType XamarinNamedSize { get; }
    [NotNullAttribute]
public IDeclaredType XamarinVisualElement { get; }
    [NotNullAttribute]
public IDeclaredType XamarinItemsView { get; }
    [NotNullAttribute]
public IDeclaredType XamarinBindableProperty { get; }
    [NotNullAttribute]
public IDeclaredType XamarinTypeConverterAttribute { get; }
    [NotNullAttribute]
public IDeclaredType XamarinBindableObject { get; }
    [NotNullAttribute]
public IDeclaredType XamarinOnPlatform { get; }
    [NotNullAttribute]
public IDeclaredType XamarinOnIdiom { get; }
    [NotNullAttribute]
public IDeclaredType XamarinDynamicResource { get; }
    [NotNullAttribute]
public IDeclaredType XamarinRectangle { get; }
    [NotNullAttribute]
public IDeclaredType XamarinShapesRectangle { get; }
    [NotNullAttribute]
public IDeclaredType MauiDynamicResource { get; }
    [NotNullAttribute]
public IDeclaredType XamarinNavigableElement { get; }
    [NotNullAttribute]
public IDeclaredType MauiBindableProperty { get; }
    [NotNullAttribute]
public IDeclaredType MauiBindableObject { get; }
    [NotNullAttribute]
public IDeclaredType RelativePanel { get; }
    [NotNullAttribute]
public IDeclaredType StyleSheetExtension { get; }
    [NotNullAttribute]
public IDeclaredType ITargetPropertyPath { get; }
    [NotNullAttribute]
public IDeclaredType IServiceProvider { get; }
    [NotNullAttribute]
public IDeclaredType AvaloniaXamlLoader { get; }
    [NotNullAttribute]
public IDeclaredType IBinding { get; }
    [NotNullAttribute]
public IDeclaredType AvaloniaStyledProperty { get; }
    [NotNullAttribute]
public IDeclaredType AvaloniaDirectProperty { get; }
    [NotNullAttribute]
public IDeclaredType AvaloniaAttachedProperty { get; }
    [NotNullAttribute]
public IDeclaredType AvaloniaProperty { get; }
    [NotNullAttribute]
public IDeclaredType IAvaloniaObject { get; }
    [NotNullAttribute]
public IDeclaredType AvaloniaObject { get; }
    [NotNullAttribute]
public IDeclaredType PseudoClassesAttribute { get; }
    [NotNullAttribute]
public IDeclaredType IAvaloniaList { get; }
    [NotNullAttribute]
public IDeclaredType IItemsPresenterHost { get; }
    [NotNullAttribute]
public IDeclaredType ItemsRepeater { get; }
    [NotNullAttribute]
public IDeclaredType ResolveByNameAttribute { get; }
    [NotNullAttribute]
public IDeclaredType InheritDataTypeFromItemsAttribute { get; }
    [NotNullAttribute]
public IDeclaredType Cursor { get; }
    [NotNullAttribute]
public IDeclaredType Cursors { get; }
    [NotNullAttribute]
public IDeclaredType Condition { get; }
    [NotNullAttribute]
public IDeclaredType MultiTrigger { get; }
    [NotNullAttribute]
public IDeclaredType MultiDataTrigger { get; }
    [NotNullAttribute]
public IDeclaredType AdornedElementPlaceholder { get; }
    [NotNullAttribute]
public IDeclaredType DataTrigger { get; }
    [NotNullAttribute]
public IDeclaredType StaticExtension { get; }
    [NotNullAttribute]
public IDeclaredType XData { get; }
    [NotNullAttribute]
public IDeclaredType TemplateBinding { get; }
    [NotNullAttribute]
public IDeclaredType MauiBindingBase { get; }
    [NotNullAttribute]
public IDeclaredType MauiOnPlatform { get; }
    [NotNullAttribute]
public IDeclaredType MauiOn { get; }
    [NotNullAttribute]
public IDeclaredType MauiOnIdiom { get; }
    [NotNullAttribute]
public IDeclaredType XamarinParameterAttribute { get; }
    [NotNullAttribute]
public IDeclaredType NameReferenceConverter { get; }
    [NotNullAttribute]
public IDeclaredType IResourceProvider { get; }
    [NotNullAttribute]
public IDeclaredType AvaloniaIAddChildType { get; }
    [NotNullAttribute]
public IDeclaredType AvaloniaGenericIAddChildType { get; }
    [NotNullAttribute]
public IDeclaredType AvaloniaOn { get; }
    [NotNullAttribute]
public IDeclaredType AvaloniaMarkupExtensionDefaultOptionAttribute { get; }
    [NotNullAttribute]
public IDeclaredType AvaloniaMarkupExtensionOptionAttribute { get; }
    [NotNullAttribute]
public ISymbolTable SilverlightBrushes { get; }
    [NotNullAttribute]
public ISymbolTable SilverlightColors { get; }
    [NotNullAttribute]
public ISymbolTable SilverlightFontStyles { get; }
    public abstract virtual bool IsCollectionType(IType type, IType& elementType);
    public abstract virtual bool IsEnumerableType(IType type, IType& elementType);
    public abstract virtual bool IsMarkupExtension(IType type, IType& returnType);
    public abstract virtual bool IsIListType(IType type, IType& elementType);
    [NotNullAttribute]
public abstract virtual IDeclaredType GetType(string fullyQualifiedName, String[] assemblyNames);
    public abstract virtual ContentTypeInfo GetContentTypeInfo(IType type);
    public abstract virtual XamlTypeFlags GetTypeFlags(ITypeElement type);
    public abstract virtual XamlMemberFlags GetMemberFlags(IDeclaredElement element, ITypeElement originalTypeElement);
    public abstract virtual IDeclaredType get_String();
    public abstract virtual IDeclaredType get_CultureInfo();
    public abstract virtual IDeclaredType get_Attribute();
    public abstract virtual IDeclaredType get_Bool();
    public abstract virtual IDeclaredType get_DependencyObject();
    public abstract virtual IDeclaredType get_DependencyProperty();
    public abstract virtual IDeclaredType get_DependencyPropertyKey();
    public abstract virtual IDeclaredType get_IListType();
    public abstract virtual IDeclaredType get_GenericIListType();
    public abstract virtual IDeclaredType get_GenericICollectionType();
    public abstract virtual IDeclaredType get_IDictionaryType();
    public abstract virtual IDeclaredType get_IEnumerableType();
    public abstract virtual IDeclaredType get_GenericIEnumerableType();
    public abstract virtual IDeclaredType get_GenericIDictionaryType();
    public abstract virtual IDeclaredType get_GenericIObservableMap();
    public abstract virtual IDeclaredType get_IAddChildType();
    public abstract virtual IDeclaredType get_Application();
    public abstract virtual IDeclaredType get_ResourceDictionary();
    public abstract virtual IDeclaredType get_IResourceDictionary();
    public abstract virtual IDeclaredType get_AvaloniaResourceInclude();
    public abstract virtual IDeclaredType get_AvaloniaResourceIncludeSince11();
    public abstract virtual IDeclaredType get_ResourceKey();
    public abstract virtual IDeclaredType get_EventSetter();
    public abstract virtual IDeclaredType get_EventTrigger();
    public abstract virtual IDeclaredType get_TriggerCollection();
    public abstract virtual IDeclaredType get_RelativeSourceMode();
    public abstract virtual IDeclaredType get_XamarinRelativeSourceMode();
    public abstract virtual IDeclaredType get_AvaloniaRelativeSourceMode();
    public abstract virtual IDeclaredType get_MauiRelativeSourceBindingMode();
    public abstract virtual IDeclaredType get_RelativeSource();
    public abstract virtual IDeclaredType get_AvaloniaRelativeSource();
    public abstract virtual IDeclaredType get_Style();
    public abstract virtual IDeclaredType get_Styles();
    public abstract virtual IDeclaredType get_StyleInclude();
    public abstract virtual IDeclaredType get_Classes();
    public abstract virtual IDeclaredType get_Setter();
    public abstract virtual IDeclaredType get_Trigger();
    public abstract virtual IDeclaredType get_ObjectDataProvider();
    public abstract virtual IDeclaredType get_MarkupExtension();
    public abstract virtual IDeclaredType get_WorkflowMarkupExtension();
    public abstract virtual IDeclaredType get_IMarkupExtension();
    public abstract virtual IDeclaredType get_XamarinIMarkupExtension();
    public abstract virtual IDeclaredType get_MauiIMarkupExtension();
    public abstract virtual IDeclaredType get_MauiIMarkupExtensionOfT();
    public abstract virtual IDeclaredType get_AvaloniaIMarkupExtension();
    public abstract virtual IDeclaredType get_AvaloniaMarkupExtension();
    public abstract virtual IDeclaredType get_AvaloniaBinding();
    public abstract virtual IDeclaredType get_AvaloniaBinding2();
    public abstract virtual IDeclaredType get_AvaloniaReflectionBinding();
    public abstract virtual IDeclaredType get_AvaloniaCompiledBinding();
    public abstract virtual IDeclaredType get_AvaloniaMultiBinding();
    public abstract virtual IDeclaredType get_Freezable();
    public abstract virtual IDeclaredType get_Brush();
    public abstract virtual IDeclaredType get_SolidColorBrush();
    public abstract virtual IDeclaredType get_ISolidColorBrush();
    public abstract virtual IDeclaredType get_IBrush();
    public abstract virtual IDeclaredType get_Brushes();
    public abstract virtual IDeclaredType get_Brushes2();
    public abstract virtual IDeclaredType get_Color();
    public abstract virtual IDeclaredType get_Colors();
    public abstract virtual IDeclaredType get_WinRTColor();
    public abstract virtual IDeclaredType get_SystemColors();
    public abstract virtual IDeclaredType get_FontWeight();
    public abstract virtual IDeclaredType get_FontWeights();
    public abstract virtual IDeclaredType get_FontStyle();
    public abstract virtual IDeclaredType get_FontStyles();
    public abstract virtual IDeclaredType get_FontStretch();
    public abstract virtual IDeclaredType get_FontStretches();
    public abstract virtual IDeclaredType get_FontFamily();
    public abstract virtual IDeclaredType get_Binding();
    public abstract virtual IDeclaredType get_BindingBase();
    public abstract virtual IDeclaredType get_BindingExpression();
    public abstract virtual IDeclaredType get_BindingMode();
    public abstract virtual IDeclaredType get_BindingUpdateSourceTrigger();
    public abstract virtual IDeclaredType get_IValueConverter();
    public abstract virtual IDeclaredType get_XamarinBinding();
    public abstract virtual IDeclaredType get_XamarinBindingBase();
    public abstract virtual IDeclaredType get_MultiBinding();
    public abstract virtual IDeclaredType get_ArrayExtension();
    public abstract virtual IDeclaredType get_RoutedEventArgs();
    public abstract virtual IDeclaredType get_RoutedEvent();
    public abstract virtual IDeclaredType get_RoutedEventHandler();
    public abstract virtual IDeclaredType get_GenericEventHandler();
    public abstract virtual IDeclaredType get_Geometry();
    public abstract virtual IDeclaredType get_DataTemplate();
    public abstract virtual IDeclaredType get_IDataTemplate();
    public abstract virtual IDeclaredType get_DataTemplates();
    public abstract virtual IDeclaredType get_TreeDataTemplate();
    public abstract virtual IDeclaredType get_HierarchicalDataTemplate();
    public abstract virtual IDeclaredType get_FrameworkTemplate();
    public abstract virtual IDeclaredType get_ImageSource();
    public abstract virtual IDeclaredType get_IBitmap();
    public abstract virtual IDeclaredType get_IImage();
    public abstract virtual IDeclaredType get_Bitmap();
    public abstract virtual IDeclaredType get_IImageBrushSource();
    public abstract virtual IDeclaredType get_StaticResourceExtension();
    public abstract virtual IDeclaredType get_DynamicResourceExtension();
    public abstract virtual IDeclaredType get_RelativeSourceExtension();
    public abstract virtual IDeclaredType get_ModifierKeys();
    public abstract virtual IDeclaredType get_GridLength();
    public abstract virtual IDeclaredType get_ControlTemplate();
    public abstract virtual IDeclaredType get_Grid();
    public abstract virtual IDeclaredType get_RowDefinition();
    public abstract virtual IDeclaredType get_RowDefinitions();
    public abstract virtual IDeclaredType get_Canvas();
    public abstract virtual IDeclaredType get_Panel();
    public abstract virtual IDeclaredType get_ColumnDefinition();
    public abstract virtual IDeclaredType get_ColumnDefinitions();
    public abstract virtual IDeclaredType get_Uri();
    public abstract virtual IDeclaredType get_UriMapping();
    public abstract virtual IDeclaredType get_ICommand();
    public abstract virtual IDeclaredType get_ApplicationCommands();
    public abstract virtual IDeclaredType get_EditingCommands();
    public abstract virtual IDeclaredType get_NavigationCommands();
    public abstract virtual IDeclaredType get_ComponentCommands();
    public abstract virtual IDeclaredType get_MediaCommands();
    public abstract virtual IDeclaredType get_InlineCollection();
    public abstract virtual IDeclaredType get_AvaloniaInlineCollection();
    public abstract virtual IDeclaredType get_Object();
    public abstract virtual IDeclaredType get_FrameworkElement();
    public abstract virtual IDeclaredType get_FrameworkContentElement();
    public abstract virtual IDeclaredType get_IFrameworkInputElement();
    public abstract virtual IDeclaredType get_Key();
    public abstract virtual IDeclaredType get_TextBlock();
    public abstract virtual IDeclaredType get_Control();
    public abstract virtual IDeclaredType get_ItemsControl();
    public abstract virtual IDeclaredType get_IComponentConnector();
    public abstract virtual IDeclaredType get_IComponentConnector2();
    public abstract virtual IDeclaredType get_ISupportInitialize();
    public abstract virtual IDeclaredType get_PropertyChangedEventArgs();
    public abstract virtual IDeclaredType get_ContentPropertyAttribute();
    public abstract virtual IDeclaredType get_XamarinContentProperty();
    public abstract virtual IDeclaredType get_MauiContentProperty();
    public abstract virtual IDeclaredType get_ICustomTypeDescriptor();
    public abstract virtual IDeclaredType get_ICustomTypeProvider();
    public abstract virtual IDeclaredType get_CollectionViewSource();
    public abstract virtual IDeclaredType get_Thickness();
    public abstract virtual IDeclaredType get_CornerRadius();
    public abstract virtual IDeclaredType get_TransformOperations();
    public abstract virtual IDeclaredType get_TransformationTransformOperations();
    public abstract virtual IDeclaredType get_Visibility();
    public abstract virtual IDeclaredType get_UIElement();
    public abstract virtual IDeclaredType get_UserControl();
    public abstract virtual IDeclaredType get_MauiContentView();
    public abstract virtual IDeclaredType get_Storyboard();
    public abstract virtual IDeclaredType get_RepeatBehavior();
    public abstract virtual IDeclaredType get_VisualStateGroupList();
    public abstract virtual IDeclaredType get_VisualStateGroup();
    public abstract virtual IDeclaredType get_VisualState();
    public abstract virtual IDeclaredType get_Frame();
    public abstract virtual IDeclaredType get_XamarinLayoutOptions();
    public abstract virtual IDeclaredType get_MauiLayoutOptions();
    public abstract virtual IDeclaredType get_XamarinFont();
    public abstract virtual IDeclaredType get_XamarinFontSizeConverter();
    public abstract virtual IDeclaredType get_XamarinKeyboard();
    public abstract virtual IDeclaredType get_XamarinKeyboardTypeConverter();
    public abstract virtual IDeclaredType get_XamarinFontAttributes();
    public abstract virtual IDeclaredType get_XamarinNamedSize();
    public abstract virtual IDeclaredType get_XamarinVisualElement();
    public abstract virtual IDeclaredType get_XamarinItemsView();
    public abstract virtual IDeclaredType get_XamarinBindableProperty();
    public abstract virtual IDeclaredType get_XamarinTypeConverterAttribute();
    public abstract virtual IDeclaredType get_XamarinBindableObject();
    public abstract virtual IDeclaredType get_XamarinOnPlatform();
    public abstract virtual IDeclaredType get_XamarinOnIdiom();
    public abstract virtual IDeclaredType get_XamarinDynamicResource();
    public abstract virtual IDeclaredType get_XamarinRectangle();
    public abstract virtual IDeclaredType get_XamarinShapesRectangle();
    public abstract virtual IDeclaredType get_MauiDynamicResource();
    public abstract virtual IDeclaredType get_XamarinNavigableElement();
    public abstract virtual IDeclaredType get_MauiBindableProperty();
    public abstract virtual IDeclaredType get_MauiBindableObject();
    public abstract virtual IDeclaredType get_RelativePanel();
    public abstract virtual IDeclaredType get_StyleSheetExtension();
    public abstract virtual IDeclaredType get_ITargetPropertyPath();
    public abstract virtual IDeclaredType get_IServiceProvider();
    public abstract virtual IDeclaredType get_AvaloniaXamlLoader();
    public abstract virtual IDeclaredType get_IBinding();
    public abstract virtual IDeclaredType get_AvaloniaStyledProperty();
    public abstract virtual IDeclaredType get_AvaloniaDirectProperty();
    public abstract virtual IDeclaredType get_AvaloniaAttachedProperty();
    public abstract virtual IDeclaredType get_AvaloniaProperty();
    public abstract virtual IDeclaredType get_IAvaloniaObject();
    public abstract virtual IDeclaredType get_AvaloniaObject();
    public abstract virtual IDeclaredType get_PseudoClassesAttribute();
    public abstract virtual IDeclaredType get_IAvaloniaList();
    public abstract virtual IDeclaredType get_IItemsPresenterHost();
    public abstract virtual IDeclaredType get_ItemsRepeater();
    public abstract virtual IDeclaredType get_ResolveByNameAttribute();
    public abstract virtual IDeclaredType get_InheritDataTypeFromItemsAttribute();
    public abstract virtual IDeclaredType get_Cursor();
    public abstract virtual IDeclaredType get_Cursors();
    public abstract virtual IDeclaredType get_Condition();
    public abstract virtual IDeclaredType get_MultiTrigger();
    public abstract virtual IDeclaredType get_MultiDataTrigger();
    public abstract virtual IDeclaredType get_AdornedElementPlaceholder();
    public abstract virtual IDeclaredType get_DataTrigger();
    public abstract virtual IDeclaredType get_StaticExtension();
    public abstract virtual IDeclaredType get_XData();
    public abstract virtual IDeclaredType get_TemplateBinding();
    public abstract virtual IDeclaredType get_MauiBindingBase();
    public abstract virtual IDeclaredType get_MauiOnPlatform();
    public abstract virtual IDeclaredType get_MauiOn();
    public abstract virtual IDeclaredType get_MauiOnIdiom();
    public abstract virtual IDeclaredType get_XamarinParameterAttribute();
    public abstract virtual IDeclaredType get_NameReferenceConverter();
    public abstract virtual IDeclaredType get_IResourceProvider();
    public abstract virtual IDeclaredType get_AvaloniaIAddChildType();
    public abstract virtual IDeclaredType get_AvaloniaGenericIAddChildType();
    public abstract virtual IDeclaredType get_AvaloniaOn();
    public abstract virtual IDeclaredType get_AvaloniaMarkupExtensionDefaultOptionAttribute();
    public abstract virtual IDeclaredType get_AvaloniaMarkupExtensionOptionAttribute();
    public abstract virtual ISymbolTable get_SilverlightBrushes();
    public abstract virtual ISymbolTable get_SilverlightColors();
    public abstract virtual ISymbolTable get_SilverlightFontStyles();
}
public static class JetBrains.ReSharper.Psi.Xaml.Impl.Resolve.MauiResolveUtil : object {
    public static string MAUI_XMLNS;
    public static bool TryGetMauiMarkupResultType(IXamlTypeCache xamlTypeCache, IType declaredType, ITypeElement typeElement, IType& type);
}
internal static class JetBrains.ReSharper.Psi.Xaml.Impl.Resolve.MicrosoftWinUIResolveUtil : object {
    public static string MICROSOFT_UI;
    public static string MICROSOFT_UI_NAME;
    public static string MICROSOFT_WINUI;
    public static string MICROSOFT_WINUI_NAME;
    public static String[] MICROSOFT_UI_NAMESPACES;
    private static MicrosoftWinUIResolveUtil();
    public static bool IsMicrosoftUI(IPsiModule module);
    public static bool IsMicrosoftWinUI(IPsiModule module);
}
public static class JetBrains.ReSharper.Psi.Xaml.Impl.Resolve.MrAdviceResolveUtil : object {
    public static string MR_ADVICE;
    public static string MR_ADVICE_MVVM;
    private static Key`1<CachedPsiValue`1<bool>> ourIsMrAdviceReferencedKey;
    private static MrAdviceResolveUtil();
    public static bool IsMrAdviceReferenced(ITreeNode treeNode);
}
internal static class JetBrains.ReSharper.Psi.Xaml.Impl.Resolve.MultiNameReferenceUtil : object {
    [NotNullAttribute]
public static ResolveResultWithInfo ResolveReference(IEnumerable`1<MultiNameResolveEntry> allFilters, ISymbolTable symbolTable);
    private static void AddCandidates(List`1<IDeclaredElement> allDeclaredElements, List`1<ISubstitution> allSubstitutions, IResolveResult result);
    private static void FixCandidates(List`1<IDeclaredElement> elements, List`1<ISubstitution> substitutions, IDeclaredElement element, ISubstitution substitution);
    private static ResolveResultWithInfo FixResolveResult(ResolveResultWithInfo result);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Resolve.MultiNameResolveEntry : ValueType {
    [NotNullAttribute]
public string Name;
    [NotNullAttribute]
public ISymbolFilter[] Filters;
    [NotNullAttribute]
public Func`2<ResolveResultWithInfo, bool> StopResolve;
    public MultiNameResolveEntry(string name, ISymbolFilter[] filters, Func`2<ResolveResultWithInfo, bool> stopResolve, bool caseSensitive);
    public MultiNameResolveEntry(string name, List`1<ISymbolFilter> filters, Func`2<ResolveResultWithInfo, bool> stopResolve, bool caseSensitive);
}
public class JetBrains.ReSharper.Psi.Xaml.Impl.Resolve.NamespaceAliasCache : object {
    [NotNullAttribute]
private LazyForkedContentModelData`1<Dictionary`2<XamlPlatformContext, NamespaceAliasCacheEntry>> myEntriesByPlatformContext;
    [NotNullAttribute]
public IList`1<XamlXmlnsDefinition> SuggestAliasUriAndPrefixFor(INamespace namespace, XamlPlatformContext platformContext);
    private static int SortDefaultXmlnsFirst(string lhs, string rhs);
    [NotNullAttribute]
public IList`1<string> GetAvailableUriNamespaces(ITreeNode context);
    public bool HasForwardedNamespace(INamespace namespace, XamlPlatformContext platformContext);
    [NotNullAttribute]
public ICollection`1<ReferencedNamespace> GetNamespaces(string aliasUri, ITreeNode context);
    [NotNullAttribute]
[PureAttribute]
public OneToSetMap`2<string, ReferencedNamespace> GetXamlAliasToNamespacesMap(ITreeNode context);
    public static bool CanReferenceXmlnsDefinitionFromTheSameModule(ITreeNode context);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Psi.Xaml.Impl.Resolve.NamespaceAliasCache/<GetReferencedModulesAndSelf>d__8")]
[ItemNotNullAttribute]
[NotNullAttribute]
private IEnumerable`1<NamespaceAliasCacheEntry> GetReferencedModulesAndSelf(ITreeNode context);
    [NotNullAttribute]
[PureAttribute]
private NamespaceAliasCacheEntry GetModuleEntry(XamlPlatformContext platformContext);
    [NotNullAttribute]
public ISymbolTable GetSymbolTable(IXamlNamespaceAlias alias, bool addPredefinedSymbols);
    public void Clear();
    public void InvalidateModule(IModule invalidatedModule);
    public void Dump(StreamWriter writer);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Resolve.NamespaceAliasCacheEntry : object {
    [NotNullAttribute]
private IPsiModule myModule;
    private XamlPlatform myPlatform;
    [CanBeNullAttribute]
private OneToSetMap`2<string, ReferencedNamespace> myNamespaceMap;
    [CanBeNullAttribute]
private OneToSetMap`2<string, string> myPrefixMap;
    [NotNullAttribute]
private object myForwardedLock;
    [CanBeNullAttribute]
private IDictionary`2<INamespace, ISymbolTable> myForwardedTypes;
    [CanBeNullAttribute]
private HashSet`1<INamespace> myForwardedNamespaces;
    [NotNullAttribute]
private Dictionary`2<string, ISymbolTable> myPredefinedTables;
    public static ClrTypeName XmlnsDefinitionAttribute;
    public static ClrTypeName XamarinInternalXmlnsDefinitionAttribute;
    public static ClrTypeName XamarinXmlnsDefinitionAttribute;
    public static ClrTypeName XmlnsPrefixAttribute;
    public static ClrTypeName XmlnsCompatibleWithAttribute;
    public static ClrTypeName TypeForwardedToAttribute;
    public static ClrTypeName WorkflowXmlnsDefinitionAttribute;
    public static ClrTypeName WorkflowXmlnsPrefixAttribute;
    public static ClrTypeName AvaloniaXmlnsDefinitionAttribute;
    public static ClrTypeName AvaloniaXmlnsPrefixAttribute;
    public static ClrTypeName MauiXmlnsPrefixAttribute;
    public static ClrTypeName MauiXmlnsDefinitionAttribute;
    public static ClrTypeName MauiGraphicsXmlnsDefinitionAttribute;
    public NamespaceAliasCacheEntry(XamlPlatformContext platformContext);
    private static NamespaceAliasCacheEntry();
    [CanBeNullAttribute]
private static OneToSetMap`2<string, string> FetchCompatibleNamespaces(IAttributesSet attributes);
    [CanBeNullAttribute]
private OneToSetMap`2<string, ReferencedNamespace> FetchModuleNamespaces(IAttributesSet attributes, ISymbolCache symbolCache, XamlPlatform platform);
    [CanBeNullAttribute]
private OneToSetMap`2<string, ReferencedNamespace> FetchPredefinedNamespaces(ISymbolScope symbolScope);
    [CanBeNullAttribute]
private OneToSetMap`2<string, ReferencedNamespace> FetchPredefinedNamespaces(ISymbolScope symbolScope, string namespaceUri, IEnumerable`1<string> namespaces, OneToSetMap`2<string, ReferencedNamespace> map);
    [CanBeNullAttribute]
private static OneToSetMap`2<string, string> FetchModulePrefixes(IAttributesSet attributes);
    [NotNullAttribute]
private IDictionary`2<INamespace, ISymbolTable> GetForwadedTypes(HashSet`1& namespaces);
    [NotNullAttribute]
private IDictionary`2<INamespace, ISymbolTable> FetchForwardedTypes(HashSet`1& forwardedNs);
    private static void FetchAttributeForwardedTypes(IAttributesSet attributes, ICollection`1<ITypeElement> consumer);
    private static void FetchMetadataForwardedTypes(IPsiModule module, ICollection`1<ITypeElement> consumer);
    [NotNullAttribute]
public ISymbolTable GetPredefinedSymbolTable(IXamlNamespaceAlias alias);
    [NotNullAttribute]
public IEnumerable`1<ReferencedNamespace> GetNamespaces(string uri);
    [CanBeNullAttribute]
[PureAttribute]
public OneToSetMap`2<string, ReferencedNamespace> GetXmlNamespacesMap();
    public void GetMetadataDefinedNamespaces(ICollection`1<string> consumer);
    [NotNullAttribute]
public ICollection`1<string> GetPossibleAliasesFor(INamespace nameSpace);
    [NotNullAttribute]
public ICollection`1<string> GetPrefixesForAlias(string alias);
    [NotNullAttribute]
public ISymbolTable GetForwardedSymbolTable(INamespace nameSpace);
    public bool HasForwardedNamespace(INamespace nameSpace);
    [CompilerGeneratedAttribute]
private bool <FetchForwardedTypes>b__28_0(INamespace ns);
}
[PsiComponentAttribute("10")]
public class JetBrains.ReSharper.Psi.Xaml.Impl.Resolve.NamespaceAliasCacheManager : InvalidatingPsiCache {
    [NotNullAttribute]
private ISolution mySolution;
    [NotNullAttribute]
private NamespaceAliasCache myAliasCache;
    public NamespaceAliasCacheManager(Lifetime lifetime, ISolution solution, ChangeManager changeManager);
    [NotNullAttribute]
[PureAttribute]
private static NamespaceAliasCache GetAliasCache(IPsiServices psiServices);
    [NotNullAttribute]
[PureAttribute]
public static IList`1<ReferencedNamespace> GetNamespaces(IXamlNamespaceAlias element);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Psi.Xaml.Impl.Resolve.NamespaceAliasCacheManager/<GetForwardedNamespaceModules>d__5")]
[ItemNotNullAttribute]
[NotNullAttribute]
[PureAttribute]
public static IEnumerable`1<IPsiModule> GetForwardedNamespaceModules(ITreeNode context, INamespace nameSpace);
    [NotNullAttribute]
[PureAttribute]
public static IList`1<XamlXmlnsDefinition> SuggestAliasUriAndPrefixFor(ITreeNode context, IPsiModule targetModule, INamespace targetNamespace);
    [NotNullAttribute]
[PureAttribute]
public static IList`1<string> GetAvailableUriNamespaces(NamespaceAliasAttribute alias);
    [NotNullAttribute]
[PureAttribute]
public static ISymbolTable GetSymbolTable(IXamlNamespaceAlias alias, bool addPredefinedSymbols);
    private void OnChangeManagerChanged(ChangeEventArgs args);
    protected virtual void InvalidateOnPhysicalChange(PsiChangedElementType elementType);
    [NotNullAttribute]
[PureAttribute]
public IDictionary`2<string, List`1<string>> GetXamlAliasToAssemblyNamesMap(IXamlFile xamlFile);
    public void Dump(StreamWriter writer);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Resolve.SilverlightFakeDeclaredElement : object {
    [NotNullAttribute]
private string myShortName;
    [NotNullAttribute]
private IType myType;
    public string ShortName { get; }
    public bool CaseSensitiveName { get; }
    public string XMLDocId { get; }
    public PsiLanguageType PresentationLanguage { get; }
    public IPsiModule Module { get; }
    public IType Type { get; }
    public ISubstitution IdSubstitution { get; }
    public SilverlightFakeDeclaredElement(string shortName, IType type);
    public sealed virtual string get_ShortName();
    public sealed virtual bool get_CaseSensitiveName();
    public sealed virtual IList`1<IDeclaration> GetDeclarations();
    public sealed virtual IList`1<IDeclaration> GetDeclarationsIn(IPsiSourceFile sourceFile);
    public sealed virtual bool HasDeclarationsIn(IPsiSourceFile sourceFile);
    public sealed virtual HybridCollection`1<IPsiSourceFile> GetSourceFiles();
    public sealed virtual DeclaredElementType GetElementType();
    public sealed virtual IPsiServices GetPsiServices();
    public virtual ITypeElement GetContainingType();
    public sealed virtual ITypeMember GetContainingTypeMember();
    public sealed virtual string get_XMLDocId();
    public sealed virtual XmlNode GetXMLDoc(bool inherit);
    public sealed virtual XmlNode GetXMLDescriptionSummary(bool inherit);
    public sealed virtual bool IsValid();
    public sealed virtual bool IsSynthetic();
    public sealed virtual PsiLanguageType get_PresentationLanguage();
    public sealed virtual IPsiModule get_Module();
    public sealed virtual IType get_Type();
    public sealed virtual ISubstitution get_IdSubstitution();
    protected bool Equals(SilverlightFakeDeclaredElement other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Resolve.SilverlightFakePropertyDeclaredElement : SilverlightFakeDeclaredElement {
    [CanBeNullAttribute]
private ITypeElement myOwner;
    public ITypeElement ContainingType { get; }
    public bool IsAbstract { get; }
    public bool IsSealed { get; }
    public bool IsVirtual { get; }
    public bool IsOverride { get; }
    public bool IsStatic { get; }
    public bool IsReadonly { get; }
    public bool IsExtern { get; }
    public bool IsUnsafe { get; }
    public bool IsVolatile { get; }
    public AccessibilityDomain AccessibilityDomain { get; }
    public MemberHidePolicy HidePolicy { get; }
    public bool IsExplicitImplementation { get; }
    public IList`1<IExplicitImplementation> ExplicitImplementations { get; }
    public bool CanBeImplicitImplementation { get; }
    public IList`1<IParameter> Parameters { get; }
    public IType ReturnType { get; }
    public ReferenceKind ReturnKind { get; }
    public IAccessor Getter { get; }
    public IAccessor Setter { get; }
    public bool IsReadable { get; }
    public bool IsWritable { get; }
    public bool IsDefault { get; }
    public bool IsRequired { get; }
    public bool IsAuto { get; }
    public SilverlightFakePropertyDeclaredElement(string shortName, IType type, ITypeElement owner);
    public sealed virtual ITypeElement get_ContainingType();
    public virtual ITypeElement GetContainingType();
    public sealed virtual IList`1<IAttributeInstance> GetAttributeInstances(AttributesSource attributesSource);
    public sealed virtual IList`1<IAttributeInstance> GetAttributeInstances(IClrTypeName clrName, AttributesSource attributesSource);
    public sealed virtual bool HasAttributeInstance(IClrTypeName clrName, AttributesSource attributesSource);
    public sealed virtual AccessRights GetAccessRights();
    public sealed virtual bool get_IsAbstract();
    public sealed virtual bool get_IsSealed();
    public sealed virtual bool get_IsVirtual();
    public sealed virtual bool get_IsOverride();
    public sealed virtual bool get_IsStatic();
    public sealed virtual bool get_IsReadonly();
    public sealed virtual bool get_IsExtern();
    public sealed virtual bool get_IsUnsafe();
    public sealed virtual bool get_IsVolatile();
    public sealed virtual AccessibilityDomain get_AccessibilityDomain();
    public sealed virtual IList`1<TypeMemberInstance> GetHiddenMembers();
    public sealed virtual MemberHidePolicy get_HidePolicy();
    public sealed virtual Nullable`1<Hash> CalcHash();
    public sealed virtual bool get_IsExplicitImplementation();
    public sealed virtual IList`1<IExplicitImplementation> get_ExplicitImplementations();
    public sealed virtual bool get_CanBeImplicitImplementation();
    public sealed virtual IList`1<IParameter> get_Parameters();
    public sealed virtual IType get_ReturnType();
    public sealed virtual ReferenceKind get_ReturnKind();
    public sealed virtual InvocableSignature GetSignature(ISubstitution substitution);
    public sealed virtual IEnumerable`1<IParametersOwnerDeclaration> GetParametersOwnerDeclarations();
    public sealed virtual IAccessor get_Getter();
    public sealed virtual IAccessor get_Setter();
    public sealed virtual bool get_IsReadable();
    public sealed virtual bool get_IsWritable();
    public sealed virtual bool get_IsDefault();
    public sealed virtual bool get_IsRequired();
    public sealed virtual bool get_IsAuto();
    private sealed virtual override string JetBrains.ReSharper.Psi.IProperty.GetDefaultPropertyMetadataName();
}
public static class JetBrains.ReSharper.Psi.Xaml.Impl.Resolve.UnoPlatformResolveUtil : object {
    public static string UNO_PLATFORM_SDK;
    public static string UNO_WINUI;
    public static string UNO_UI;
    public static String[] UNO_PLATFORM_NAMESPACES;
    private static UnoPlatformResolveUtil();
}
internal static class JetBrains.ReSharper.Psi.Xaml.Impl.Resolve.WinRTResolveUtil : object {
    public static string WINRT_SDK;
    public static string WIN10_SDK_WindowsFoundationUniversalapicontract;
    public static string WIN10_SDK_WindowsFoundationFoundationcontract;
    public static String[] WIN10_SDK;
    public static String[] WINRT_NAMESPACES;
    private static WinRTResolveUtil();
    public static bool IsWindowsSDK(IPsiModule module);
    public static bool IsWindows10SDK(IPsiModule module);
}
internal static class JetBrains.ReSharper.Psi.Xaml.Impl.Resolve.WpfResolveUtil : object {
    public static string PRESENTATION_CORE;
}
public static class JetBrains.ReSharper.Psi.Xaml.Impl.Resolve.XamarinResolveUtil : object {
    public static string XAMARIN_FROMS_SDK;
    public static string XAMARIN_FROMS_XAML_SDK;
    public static string MAUI_XAML_SDK;
    public static string XAMARIN_XMLNS;
    public static string XAMARIN_XMLNS_X_2009;
    public static string XAMARIN_XMLNS_X_2006;
    public static String[] XAMARIN_FORMS_NAMESPACES;
    public static String[] XAMARIN_FORMS_XAML_NAMESPACES;
    private static XamarinResolveUtil();
    public static bool IsXamarinFormsSDK(IPsiModule module);
    public static bool IsXamarinFormsXamlSDK(IPsiModule module);
    [CanBeNullAttribute]
[PureAttribute]
public static IResolveResult TryFindInstantiableConstructor(IResolveResult resolveResult);
    [PureAttribute]
private static bool IsInstantiableConstructor(IConstructor constructor);
}
public static class JetBrains.ReSharper.Psi.Xaml.Impl.Resolve.XamlAccessFilters : object {
    [NotNullAttribute]
public static SimpleSymbolFilter IsPublic;
    private static XamlAccessFilters();
    [NotNullAttribute]
public static AccessRightsFilter Create(IAccessContext accessContext, ITreeNode context);
    [NotNullAttribute]
public static AccessRightsFilter CreateXamlEntityAccessRightsFilter(IAccessContext accessContext, ITreeNode context);
}
public static class JetBrains.ReSharper.Psi.Xaml.Impl.Resolve.XamlEventFilters : object {
    public static SimpleSymbolFilter IsEvent;
    public static SimpleSymbolFilter IsNotEvent;
    private static XamlEventFilters();
}
internal static class JetBrains.ReSharper.Psi.Xaml.Impl.Resolve.XamlIdentifierReferencesUtil : object {
    [NotNullAttribute]
[PureAttribute]
public static IXamlNamespaceAliasReference CreateNamespaceAliasReference(ITreeNode element, IXamlIdentifier identifier);
    [CanBeNullAttribute]
public static XamlTypeReference GetTypeReference(ITypeUsage owner);
    public static ReferenceCollection CreateTypeReferences(ITreeNode element, IXamlIdentifier identifier, XamlTypeReferenceType typeReferenceType);
    public static ReferenceCollection CreateAllReferences(ITreeNode element, IXamlIdentifier identifier, XamlTypeReferenceType typeReferenceType);
}
[FlagsAttribute]
public enum JetBrains.ReSharper.Psi.Xaml.Impl.Resolve.XamlMemberFlags : Enum {
    public byte value__;
    public static XamlMemberFlags None;
    public static XamlMemberFlags HasDependencyPropertyField;
    public static XamlMemberFlags HasRoutedEventField;
    public static XamlMemberFlags HasSetAccessor;
    public static XamlMemberFlags HasGetAccessor;
    public static XamlMemberFlags HasAddAccessor;
    public static XamlMemberFlags HasRemoveAccessor;
    public static XamlMemberFlags HasInstanceAccessor;
    public static XamlMemberFlags HasImplicitSetAccessor;
    public static XamlMemberFlags Unknown;
    public static XamlMemberFlags HasDescriptor;
    public static XamlMemberFlags HasAnyAccessor;
}
public class JetBrains.ReSharper.Psi.Xaml.Impl.Resolve.XamlMethodGroupConvertibleFilter : SimpleSymbolFilter {
    [NotNullAttribute]
private SimpleSymbolFilter myMethodGroupConvertibleFilter;
    [CanBeNullAttribute]
private SimpleSymbolFilter myExactSignatureFilter;
    [NotNullAttribute]
private IDeclaredType myRoutedEventArgs;
    [CanBeNullAttribute]
private ITypeConversionRule myRule;
    public ResolveErrorType ErrorType { get; }
    public XamlMethodGroupConvertibleFilter(ITreeNode context, SimpleSymbolFilter methodGroupConvertibleFilter, SimpleSymbolFilter exactSignatureFilter);
    public virtual ResolveErrorType get_ErrorType();
    public virtual bool Accepts(IDeclaredElement declaredElement, ISubstitution substitution);
}
public abstract class JetBrains.ReSharper.Psi.Xaml.Impl.Resolve.XamlModuleTypeCache`2 : InvalidatingPsiCache {
    [NotNullAttribute]
private LazyForkedContentModelData`1<Dictionary`2<XamlPlatformContext, TCache>> myCachesPerPlatform;
    [NotNullAttribute]
private IPsiModules myPsiModules;
    protected XamlModuleTypeCache`2(Lifetime lifetime, IPsiModules psiModules, ChangeManager changeManager);
    [NotNullAttribute]
internal abstract virtual TCache CreateCache(XamlPlatformContext platformContext);
    [NotNullAttribute]
protected TCache GetModuleCache(XamlPlatformContext platformContext);
    [PureAttribute]
[NotNullAttribute]
public static TCache GetCache(XamlPlatformContext platformContext);
    [PureAttribute]
[NotNullAttribute]
public static TCache GetCache(ITreeNode context);
    [PureAttribute]
[NotNullAttribute]
[ObsoleteAttribute("Do not use me if possible")]
public static TCache GetCache(IPsiModule module);
    private void OnChangeManagerChanged(ChangeEventArgs changeEventArgs);
    protected virtual void InvalidateOnPhysicalChange(PsiChangedElementType elementType);
}
public static class JetBrains.ReSharper.Psi.Xaml.Impl.Resolve.XamlNamespaceFilters : object {
    [NotNullAttribute]
public static SimpleSymbolFilter IsNamespaceAlias;
    [NotNullAttribute]
public static SimpleSymbolFilter IsNotNamespaceAlias;
    private static XamlNamespaceFilters();
    [NotNullAttribute]
[PureAttribute]
public static ISymbolFilter CreatePredefinedNamespaceAliasFilter(ITreeNode element);
}
internal static class JetBrains.ReSharper.Psi.Xaml.Impl.Resolve.XamlNamespaceReferenceUtil : object {
    private static Key`1<CachedProjectItemValue`2<IProject, bool>> ourIsInSdkProjectKey;
    private static XamlNamespaceReferenceUtil();
    [NotNullAttribute]
[PureAttribute]
public static ISymbolTable GetSymbolTable(IXamlNamespaceReference reference);
    public static bool IsSystemNamespace(INamespace namespace);
    public static bool IsInSdkProject(ITreeNode node);
    [NotNullAttribute]
[PureAttribute]
public static ResolveResultWithInfo CheckModuleResolve(ResolveResultWithInfo resolveResult, INamespaceAlias namespaceAlias);
    public static IReference BindTo(IXamlNamespaceReference reference, INamespace namespace);
    [CanBeNullAttribute]
public static IXamlNamespaceReference BindModuleTo(IXamlNamespaceReference reference, AssemblyNameRanges ranges, IPsiModule module);
}
[IsReadOnlyAttribute]
public class JetBrains.ReSharper.Psi.Xaml.Impl.Resolve.XamlPlatformContext : ValueType {
    [CompilerGeneratedAttribute]
private IPsiModule <Module>k__BackingField;
    [CompilerGeneratedAttribute]
private XamlPlatform <Platform>k__BackingField;
    public IPsiModule Module { get; public set; }
    public XamlPlatform Platform { get; public set; }
    public XamlPlatformContext(IPsiModule Module, XamlPlatform Platform);
    [CompilerGeneratedAttribute]
public IPsiModule get_Module();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Module(IPsiModule value);
    [CompilerGeneratedAttribute]
public XamlPlatform get_Platform();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Platform(XamlPlatform value);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(XamlPlatformContext left, XamlPlatformContext right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(XamlPlatformContext left, XamlPlatformContext right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(XamlPlatformContext other);
    [CompilerGeneratedAttribute]
public void Deconstruct(IPsiModule& Module, XamlPlatform& Platform);
}
public class JetBrains.ReSharper.Psi.Xaml.Impl.Resolve.XamlResolveErrorType : XmlResolveErrorType {
    [NotNullAttribute]
public static ResolveErrorType PROPERTY_EXPECTED;
    [NotNullAttribute]
public static ResolveErrorType PROPERTY_OR_EVENT_EXPECTED;
    [NotNullAttribute]
public static ResolveErrorType FIELD_EXPECTED;
    [NotNullAttribute]
public static ResolveErrorType METHOD_EXPECTED;
    [NotNullAttribute]
public static ResolveErrorType BAD_SIGNATURE;
    [NotNullAttribute]
public static ResolveErrorType EVENT_EXPECTED;
    [NotNullAttribute]
public static ResolveErrorType COMMAND_EXPECTED;
    [NotNullAttribute]
public static ResolveErrorType INVALID_RESOURCE_TYPE;
    [NotNullAttribute]
public static ResolveErrorType NOT_STATIC;
    [NotNullAttribute]
public static ResolveErrorType NOT_PUBLIC;
    [NotNullAttribute]
public static ResolveErrorType RESOURCE_EXPECTED;
    [NotNullAttribute]
public static ResolveErrorType DEFAULT_PROPERTY_EXPECTED;
    [NotNullAttribute]
public static ResolveErrorType STYLE_CLASS_EXPECTED;
    [NotNullAttribute]
public static ResolveErrorType FIELD_OR_PROPERTY_EXPECTED;
    [NotNullAttribute]
public static ResolveErrorType ENUM_MEMBER_EXPECTED;
    [NotNullAttribute]
public static ResolveErrorType PARENT_IS_OUTSIDE_CURRENT_COMPONENT_TREE;
    [NotNullAttribute]
public static ResolveErrorType ATTACHED_EVENT_HAS_NO_ADD_HANDLER;
    [NotNullAttribute]
public static ResolveErrorType PARAMETER_TYPES_MISMATCH;
    [NotNullAttribute]
public static ResolveErrorType NOT_NESTED_TYPE_EXPECTED;
    [NotNullAttribute]
public static ResolveErrorType NAMESPACE_OR_NOT_NESTED_TYPE_EXPECTED;
    [NotNullAttribute]
public static ResolveErrorType NAMESPACE_ALIAS_EXPECTED;
    [NotNullAttribute]
public static ResolveErrorType INSTANTIABLE_EXPECTED;
    [NotNullAttribute]
public static ResolveErrorType WRITABLE_PROPERTY_OR_COLLECTION_EXPECTED;
    [NotNullAttribute]
public static ResolveErrorType RESOURCE_DICTIONARY_EXPECTED;
    [NotNullAttribute]
public static ResolveErrorType ASSEMBLY_NAME_EXPECTED;
    [NotNullAttribute]
public static ResolveErrorType FIELD_OR_TEMPLATE_FIELD_EXPECTED;
    [NotNullAttribute]
public static ResolveErrorType WRITABLE_PROPERTY_EXPECTED;
    [NotNullAttribute]
public static ResolveErrorType READABLE_PROPERTY_EXPECTED;
    [NotNullAttribute]
public static ResolveErrorType XAML_LANGUAGE_LEVEL_ERROR;
    [NotNullAttribute]
public static ResolveErrorType INCORRECT_RETURN_TYPE;
    [NotNullAttribute]
public static ResolveErrorType STATIC_RESOURCE_NOT_FOUND;
    [NotNullAttribute]
public static ResolveErrorType OVERLOADS_COLLISION;
    [NotNullAttribute]
public static ResolveErrorType RESTRICTED_ENUM_VALUE;
    private XamlResolveErrorType(string name, string tooltip);
    private static XamlResolveErrorType();
}
public static class JetBrains.ReSharper.Psi.Xaml.Impl.Resolve.XamlResolveFilters : object {
    [NotNullAttribute]
public static SimpleSymbolFilter IsFieldOrProperty;
    [NotNullAttribute]
public static SimpleSymbolFilter IsFieldOrPropertyOrEnumMember;
    [NotNullAttribute]
public static SimpleSymbolFilter IsPropertyOrEvent;
    [NotNullAttribute]
public static SimpleSymbolFilter IsMethodOrEvent;
    [NotNullAttribute]
public static SimpleSymbolFilter IsEvent;
    [NotNullAttribute]
public static SimpleSymbolFilter IsField;
    [NotNullAttribute]
public static SimpleSymbolFilter IsMethod;
    [NotNullAttribute]
public static SimpleSymbolFilter IsProperty;
    [NotNullAttribute]
public static SimpleSymbolFilter IsPropertyOrMethod;
    [NotNullAttribute]
public static SimpleSymbolFilter IsEnumMember;
    [NotNullAttribute]
public static SimpleSymbolFilter IsMarkupAttribute;
    [NotNullAttribute]
public static SimpleSymbolFilter IsMarkupConstant;
    [NotNullAttribute]
public static SimpleSymbolFilter IsStyleClass;
    public static SimpleSymbolFilter IsNotPredefinedObjectElement;
    public static SimpleSymbolFilter IsNotPredefinedAttributeElement;
    public static SimpleSymbolFilter CanBeInstantiated;
    public static SimpleSymbolFilter IsStatic;
    public static SimpleSymbolFilter IsNestedType;
    public static SimpleSymbolFilter IsNotNestedType;
    public static SimpleSymbolFilter IsNonGenericType;
    public static SimpleSymbolFilter IsNamespaceOrNotNestedType;
    public static SimpleSymbolFilter FileExists;
    public static SimpleSymbolFilter IsProjectFolderOrModule;
    [NotNullAttribute]
public static SimpleSymbolFilter IsType;
    [NotNullAttribute]
public static SimpleSymbolFilter IsTypeOrXamlElement;
    [NotNullAttribute]
public static SimpleSymbolFilter IsClass;
    [NotNullAttribute]
public static SimpleSymbolFilter IsClassOrXamlElement;
    [NotNullAttribute]
public static SimpleSymbolFilter WithoutTypeParameters;
    public static SimpleSymbolFilter CanContainsDependencyProperties;
    [NotNullAttribute]
public static ISymbolFilter PreferXamlObjectElements;
    public static SimpleSymbolFilter IsFieldOrTemplateField;
    [NotNullAttribute]
public static SimpleSymbolFilter DefaultProperty;
    public static ISymbolFilter SymbolLevel;
    private static XamlResolveFilters();
}
public static class JetBrains.ReSharper.Psi.Xaml.Impl.Resolve.XamlResolveUtil : object {
    private static IClrTypeName ourTypeConverterAttribute;
    private static XamlResolveUtil();
    public static bool IsReferenceInXmlData(IReference reference);
    public static bool IsElementInXmlData(ITreeNode element);
    [CanBeNullAttribute]
public static IType GetQualifierType(IReference qualifierReference);
    [ContractAnnotationAttribute("null <= null")]
public static ITypeElement GetQualifierTypeElement(IReference qualifierReference);
    [NotNullAttribute]
[PureAttribute]
public static ISymbolTable GetNamespaceAliasSymbolTable(IXamlNamespaceAlias alias);
    [NotNullAttribute]
public static ISymbolTable GetNamespaceAliasSymbolTable(IXamlNamespaceAliasReference reference);
    public static bool HasTypeConverterAnnotation(IReference reference);
    [PureAttribute]
[CanBeNullAttribute]
public static ISymbolFilter GetTypeParametersCountFromBacktickFilter(ITypeExpressionBase typeExpression);
}
public static class JetBrains.ReSharper.Psi.Xaml.Impl.Resolve.XamlResourceFilters : object {
    public static ISymbolFilter ResourceKeyOverride;
    public static SimpleSymbolFilter IsResource;
    public static SimpleSymbolFilter IsSimpleKeyResource;
    private static XamlResourceFilters();
    public static IDeclaration SelectBetterResourceDeclarationFromTheSameFile(IDeclaration d1, IDeclaration d2, bool isXamarinForms);
}
[PsiComponentAttribute("10")]
public class JetBrains.ReSharper.Psi.Xaml.Impl.Resolve.XamlTypeCache : XamlModuleTypeCache`2<IXamlTypeCache, XamlTypeCache> {
    [NotNullAttribute]
public static ClrTypeName SYSTEM_STRING_CLASS;
    [NotNullAttribute]
public static ClrTypeName TYPE_CONVERTER_ATTRIBUTE_CLASS;
    [NotNullAttribute]
public static ClrTypeName XAMARIN_TYPE_CONVERTER_ATTRIBUTE_CLASS;
    [NotNullAttribute]
public static ClrTypeName MAUI_TYPE_CONVERTER_ATTRIBUTE_CLASS;
    [NotNullAttribute]
public static ClrTypeName VALUE_CONVERSION_ATTRIBUTE_CLASS;
    [NotNullAttribute]
public static ClrTypeName CONSTRUCTOR_ARGUMENT_ATTRIBUTE_CLASS;
    [NotNullAttribute]
public static ClrTypeName MARKUP_EXTENSION_RETURN_TYPE_ATTRIBUTE_CLASS;
    [NotNullAttribute]
public static ClrTypeName XAML_DEFER_LOAD_ATTRIBUTE_CLASS;
    [NotNullAttribute]
public static ClrTypeName XAMARIN_FORMS_PARAMETER_ATTRIBUTE_CLASS;
    [NotNullAttribute]
public static ClrTypeName MAUI_PARAMETER_ATTRIBUTE_CLASS;
    public XamlTypeCache(Lifetime lifetime, IPsiModules psiModules, ChangeManager changeManager);
    private static XamlTypeCache();
    internal virtual IXamlTypeCache CreateCache(XamlPlatformContext platformContext);
    [NotNullAttribute]
public static IDeclaredType UnknownType(ITreeNode element);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Psi.Xaml.Impl.Resolve.XamlTypeCacheExtensions : object {
    [ExtensionAttribute]
public static bool IsCollectionTypeExceptArray(IXamlTypeCache cache, IType type, IType& elementType);
    [ExtensionAttribute]
[NotNullAttribute]
public static IType[] GetContentTypes(IXamlTypeCache xamlTypeCache, IType type, String& contentProperty);
    [ExtensionAttribute]
[NotNullAttribute]
public static IType[] GetContentTypes(IXamlTypeCache cache, IType type);
    [ExtensionAttribute]
public static Nullable`1<bool> HasDependencyPropertyField(IXamlTypeCache cache, IDeclaredElement element);
    [ExtensionAttribute]
public static Nullable`1<bool> HasRoutedEventField(IXamlTypeCache cache, IDeclaredElement element);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Resolve.XamlTypeCacheImpl : object {
    [NotNullAttribute]
private Dictionary`2<IType, IType> myCompiledCollectionTypes;
    [NotNullAttribute]
private Dictionary`2<IType, IType> mySourceCollectionTypes;
    private Dictionary`2<IType, IType> myCompiledEnumearbleTypes;
    private Dictionary`2<IType, IType> mySourceEnumearbleTypes;
    [NotNullAttribute]
private Dictionary`2<IType, ContentTypeInfo> myCompiledContentTypes;
    [NotNullAttribute]
private Dictionary`2<IType, ContentTypeInfo> mySourceContentTypes;
    [NotNullAttribute]
private IPsiModule myModule;
    [NotNullAttribute]
private IDeclaredType myUnknownType;
    private XamlPlatform myXamlPlatform;
    [NotNullAttribute]
private Dictionary`2<ITypeElement, XamlTypeInfo> mySourceTypeInfos;
    [NotNullAttribute]
private Dictionary`2<ITypeElement, XamlTypeInfo> myCompiledTypeInfos;
    [NotNullAttribute]
private String[] myDefaultModules;
    [NotNullAttribute]
private string myXamlNamespaceRoot;
    [NotNullAttribute]
private string myXamlControlsRoot;
    [NotNullAttribute]
private string myXamlTextNamespace;
    [NotNullAttribute]
private string myXamlExtensionsNamespaceRoot;
    [NotNullAttribute]
private string myXamlTemplatesNamespaceRoot;
    [NotNullAttribute]
private string myColorFullTypeName;
    [NotNullAttribute]
private string myColorsFullTypeName;
    [NotNullAttribute]
private string myMediaRootNamespace;
    [NotNullAttribute]
private string myStylingRootNamespace;
    [CanBeNullAttribute]
private string myThicknessFullTypeName;
    [CanBeNullAttribute]
private string myGridLengthFullTypeName;
    [CanBeNullAttribute]
private string myXamlFontStyleNamespace;
    [CanBeNullAttribute]
private string myXamlFontWeightNamespace;
    [CanBeNullAttribute]
private string myXamlCornerRadiusFullTypeName;
    [CanBeNullAttribute]
private string myUserControlFullTypeName;
    [CanBeNullAttribute]
private string myResourceDictionaryFullTypeName;
    [CanBeNullAttribute]
private string myApplicationFullTypeName;
    [CanBeNullAttribute]
private IDeclaredType myWinMdColorType;
    [NotNullAttribute]
private Dictionary`2<string, IDeclaredType> myCachedTypes;
    private static string XamlRoot;
    private static string XamlExtensionsRoot;
    private static string XamlControlsRoot;
    private static string XamlTextRoot;
    private static String[] UWP_MODULES;
    private static String[] WINUI_MODULES;
    private static String[] WINRT_MODULES;
    private static String[] WINRT_NON_PROJECTED_MODULES;
    private static String[] ASSEMBLIES;
    private static String[] NAVIGATION_MODULES;
    private static IClrTypeName ourWinUiContentPropertyAttribute;
    [NotNullAttribute]
private static String[] ourXamlColors;
    [CanBeNullAttribute]
private SymbolTable mySilverlightBrushes;
    [CanBeNullAttribute]
private SymbolTable mySilverlightColors;
    [CanBeNullAttribute]
private ISymbolTable mySilverlightFontStyles;
    public IDeclaredType String { get; }
    public IDeclaredType CultureInfo { get; }
    public IDeclaredType Attribute { get; }
    public IDeclaredType Bool { get; }
    public IDeclaredType IListType { get; }
    public IDeclaredType GenericIListType { get; }
    public IDeclaredType GenericICollectionType { get; }
    public IDeclaredType IDictionaryType { get; }
    public IDeclaredType GenericIDictionaryType { get; }
    public IDeclaredType GenericIObservableMap { get; }
    public IDeclaredType IEnumerableType { get; }
    public IDeclaredType GenericIEnumerableType { get; }
    public IDeclaredType ISupportInitialize { get; }
    public IDeclaredType PropertyChangedEventArgs { get; }
    public IDeclaredType DependencyObject { get; }
    public IDeclaredType DependencyProperty { get; }
    public IDeclaredType DependencyPropertyKey { get; }
    public IDeclaredType AvaloniaProperty { get; }
    public IDeclaredType AvaloniaDependsOnAttribute { get; }
    public IDeclaredType Freezable { get; }
    public IDeclaredType Style { get; }
    public IDeclaredType Styles { get; }
    public IDeclaredType StyleInclude { get; }
    public IDeclaredType Classes { get; }
    public IDeclaredType Setter { get; }
    public IDeclaredType Application { get; }
    public IDeclaredType ResourceDictionary { get; }
    public IDeclaredType IResourceDictionary { get; }
    public IDeclaredType AvaloniaResourceInclude { get; }
    public IDeclaredType AvaloniaResourceIncludeSince11 { get; }
    public IDeclaredType ResourceKey { get; }
    public IDeclaredType EventSetter { get; }
    public IDeclaredType Trigger { get; }
    public IDeclaredType EventTrigger { get; }
    public IDeclaredType TriggerCollection { get; }
    public IDeclaredType RelativeSourceMode { get; }
    public IDeclaredType XamarinRelativeSourceMode { get; }
    public IDeclaredType AvaloniaRelativeSourceMode { get; }
    public IDeclaredType MauiRelativeSourceBindingMode { get; }
    public IDeclaredType RelativeSource { get; }
    public IDeclaredType AvaloniaRelativeSource { get; }
    public IDeclaredType ObjectDataProvider { get; }
    public IDeclaredType Binding { get; }
    public IDeclaredType BindingBase { get; }
    public IDeclaredType BindingExpression { get; }
    public IDeclaredType BindingMode { get; }
    public IDeclaredType BindingUpdateSourceTrigger { get; }
    public IDeclaredType IValueConverter { get; }
    public IDeclaredType XamarinBinding { get; }
    public IDeclaredType XamarinBindingBase { get; }
    public IDeclaredType MultiBinding { get; }
    public IDeclaredType IAddChildType { get; }
    public IDeclaredType MarkupExtension { get; }
    public IDeclaredType WorkflowMarkupExtension { get; }
    public IDeclaredType ArrayExtension { get; }
    public IDeclaredType IComponentConnector { get; }
    public IDeclaredType IComponentConnector2 { get; }
    public IDeclaredType ContentPropertyAttribute { get; }
    public IDeclaredType XamarinContentProperty { get; }
    public IDeclaredType MauiContentProperty { get; }
    public IDeclaredType AvaloniaContentAttribute { get; }
    public IDeclaredType ICustomTypeDescriptor { get; }
    public IDeclaredType ICustomTypeProvider { get; }
    public IDeclaredType CollectionViewSource { get; }
    public IDeclaredType IMarkupExtension { get; }
    public IDeclaredType XamarinIMarkupExtension { get; }
    public IDeclaredType MauiIMarkupExtension { get; }
    public IDeclaredType MauiIMarkupExtensionOfT { get; }
    public IDeclaredType AvaloniaIMarkupExtension { get; }
    public IDeclaredType AvaloniaMarkupExtension { get; }
    public IDeclaredType AvaloniaBinding { get; }
    public IDeclaredType AvaloniaBinding2 { get; }
    public IDeclaredType AvaloniaReflectionBinding { get; }
    public IDeclaredType AvaloniaCompiledBinding { get; }
    public IDeclaredType AvaloniaMultiBinding { get; }
    public IDeclaredType AvaloniaTemplateBinding { get; }
    public IDeclaredType Brushes2 { get; }
    public IDeclaredType SystemColors { get; }
    public IDeclaredType FontFamily { get; }
    public IDeclaredType Brush { get; }
    public IDeclaredType SolidColorBrush { get; }
    public IDeclaredType ISolidColorBrush { get; }
    public IDeclaredType IBrush { get; }
    public IDeclaredType Brushes { get; }
    public IDeclaredType Geometry { get; }
    public IDeclaredType ImageSource { get; }
    public IDeclaredType IBitmap { get; }
    public IDeclaredType IImage { get; }
    public IDeclaredType Bitmap { get; }
    public IDeclaredType IImageBrushSource { get; }
    public IDeclaredType Color { get; }
    public IDeclaredType Colors { get; }
    public IDeclaredType FontWeight { get; }
    public IDeclaredType FontWeights { get; }
    public IDeclaredType FontStyle { get; }
    public IDeclaredType FontStyles { get; }
    public IDeclaredType FontStretch { get; }
    public IDeclaredType FontStretches { get; }
    public IDeclaredType RoutedEvent { get; }
    public IDeclaredType RoutedEventArgs { get; }
    public IDeclaredType RoutedEventHandler { get; }
    public IDeclaredType GenericEventHandler { get; }
    public IDeclaredType DataTemplate { get; }
    public IDeclaredType IDataTemplate { get; }
    public IDeclaredType DataTemplates { get; }
    public IDeclaredType TreeDataTemplate { get; }
    public IDeclaredType HierarchicalDataTemplate { get; }
    public IDeclaredType FrameworkTemplate { get; }
    public IDeclaredType StaticResourceExtension { get; }
    public IDeclaredType DynamicResourceExtension { get; }
    public IDeclaredType StyleSheetExtension { get; }
    public IDeclaredType RelativeSourceExtension { get; }
    public IDeclaredType ModifierKeys { get; }
    public IDeclaredType GridLength { get; }
    public IDeclaredType ControlTemplate { get; }
    public IDeclaredType Grid { get; }
    public IDeclaredType RowDefinition { get; }
    public IDeclaredType RowDefinitions { get; }
    public IDeclaredType ColumnDefinition { get; }
    public IDeclaredType ColumnDefinitions { get; }
    public IDeclaredType Canvas { get; }
    public IDeclaredType Panel { get; }
    public IDeclaredType Uri { get; }
    public IDeclaredType ICommand { get; }
    public IDeclaredType ApplicationCommands { get; }
    public IDeclaredType EditingCommands { get; }
    public IDeclaredType NavigationCommands { get; }
    public IDeclaredType ComponentCommands { get; }
    public IDeclaredType MediaCommands { get; }
    public IDeclaredType InlineCollection { get; }
    public IDeclaredType AvaloniaInlineCollection { get; }
    public IDeclaredType Object { get; }
    public IDeclaredType FrameworkElement { get; }
    public IDeclaredType FrameworkContentElement { get; }
    public IDeclaredType IFrameworkInputElement { get; }
    public IDeclaredType Key { get; }
    public IDeclaredType TextBlock { get; }
    public IDeclaredType Control { get; }
    public IDeclaredType ItemsControl { get; }
    public IDeclaredType Visibility { get; }
    public IDeclaredType Thickness { get; }
    public IDeclaredType CornerRadius { get; }
    public IDeclaredType TransformOperations { get; }
    public IDeclaredType TransformationTransformOperations { get; }
    public IDeclaredType UIElement { get; }
    public IDeclaredType UserControl { get; }
    public IDeclaredType MauiContentView { get; }
    public IDeclaredType Storyboard { get; }
    public IDeclaredType RepeatBehavior { get; }
    public IDeclaredType VisualStateGroupList { get; }
    public IDeclaredType VisualStateGroup { get; }
    public IDeclaredType VisualState { get; }
    public IDeclaredType UriMapping { get; }
    public IDeclaredType Frame { get; }
    public IDeclaredType XamarinLayoutOptions { get; }
    public IDeclaredType MauiLayoutOptions { get; }
    public IDeclaredType XamarinFont { get; }
    public IDeclaredType XamarinFontSizeConverter { get; }
    public IDeclaredType XamarinKeyboard { get; }
    public IDeclaredType XamarinKeyboardTypeConverter { get; }
    public IDeclaredType XamarinFontAttributes { get; }
    public IDeclaredType XamarinNamedSize { get; }
    public IDeclaredType XamarinVisualElement { get; }
    public IDeclaredType XamarinItemsView { get; }
    public IDeclaredType XamarinTypeConverterAttribute { get; }
    public IDeclaredType XamarinBindableProperty { get; }
    public IDeclaredType XamarinBindableObject { get; }
    public IDeclaredType XamarinOnPlatform { get; }
    public IDeclaredType XamarinOnIdiom { get; }
    public IDeclaredType XamarinDynamicResource { get; }
    public IDeclaredType XamarinRectangle { get; }
    public IDeclaredType XamarinShapesRectangle { get; }
    public IDeclaredType MauiDynamicResource { get; }
    public IDeclaredType XamarinNavigableElement { get; }
    public IDeclaredType MauiBindableProperty { get; }
    public IDeclaredType MauiBindableObject { get; }
    public IDeclaredType RelativePanel { get; }
    public IDeclaredType ITargetPropertyPath { get; }
    public IDeclaredType IServiceProvider { get; }
    public IDeclaredType AvaloniaXamlLoader { get; }
    public IDeclaredType IBinding { get; }
    public IDeclaredType AvaloniaStyledProperty { get; }
    public IDeclaredType AvaloniaDirectProperty { get; }
    public IDeclaredType AvaloniaAttachedProperty { get; }
    public IDeclaredType IAvaloniaObject { get; }
    public IDeclaredType AvaloniaObject { get; }
    public IDeclaredType PseudoClassesAttribute { get; }
    public IDeclaredType IAvaloniaList { get; }
    public IDeclaredType IItemsPresenterHost { get; }
    public IDeclaredType ItemsRepeater { get; }
    public IDeclaredType ResolveByNameAttribute { get; }
    public IDeclaredType InheritDataTypeFromItemsAttribute { get; }
    public IDeclaredType Cursor { get; }
    public IDeclaredType Cursors { get; }
    public IDeclaredType MultiTrigger { get; }
    public IDeclaredType Condition { get; }
    public IDeclaredType MultiDataTrigger { get; }
    public IDeclaredType AdornedElementPlaceholder { get; }
    public IDeclaredType XData { get; }
    public IDeclaredType TemplateBinding { get; }
    public IDeclaredType DataTrigger { get; }
    public IDeclaredType StaticExtension { get; }
    public IDeclaredType XamarinParameterAttribute { get; }
    public IDeclaredType MauiParameterAttribute { get; }
    public IDeclaredType NameReferenceConverter { get; }
    public IDeclaredType IResourceProvider { get; }
    public IDeclaredType MauiBindingBase { get; }
    public IDeclaredType MauiOnPlatform { get; }
    public IDeclaredType MauiOn { get; }
    public IDeclaredType MauiOnIdiom { get; }
    public IDeclaredType AvaloniaIAddChildType { get; }
    public IDeclaredType AvaloniaGenericIAddChildType { get; }
    public IDeclaredType AvaloniaOn { get; }
    public IDeclaredType AvaloniaMarkupExtensionDefaultOptionAttribute { get; }
    public IDeclaredType AvaloniaMarkupExtensionOptionAttribute { get; }
    public IDeclaredType WinRTColor { get; }
    public ISymbolTable SilverlightBrushes { get; }
    public ISymbolTable SilverlightColors { get; }
    public ISymbolTable SilverlightFontStyles { get; }
    public XamlTypeCacheImpl(XamlPlatformContext platformContext);
    private static XamlTypeCacheImpl();
    public sealed virtual bool IsCollectionType(IType type, IType& elementType);
    public sealed virtual bool IsIListType(IType type, IType& elementType);
    [CanBeNullAttribute]
private IType CalculateIListType(IType type);
    [CanBeNullAttribute]
private IType CalculateCollectionType(IType type);
    [CanBeNullAttribute]
private static IType IsGenericCollectionType(IDeclaredType declaredType, IDeclaredType targetType);
    [CanBeNullAttribute]
private IType IsNonGenericCollectionType(IDeclaredType declaredType, IDeclaredType collection);
    public sealed virtual bool IsEnumerableType(IType type, IType& elementType);
    [CanBeNullAttribute]
private IType CalculateEnumerableType(IType collectionType);
    public sealed virtual ContentTypeInfo GetContentTypeInfo(IType type);
    private static bool HasTypeConverterAttribute(IAttributesOwner attributesOwner);
    private ContentTypeInfo CalculateContentTypeInfo(IType type);
    [CanBeNullAttribute]
private IType CheckDeferredLoadAttribute(ITypeOwner typeOwner, string propertyName);
    [CanBeNullAttribute]
private static string TryFindContentPropertyName(ITypeElement typeElement, IClrTypeName typeName);
    [CanBeNullAttribute]
private static string TryFindContentPropertyName(ITypeElement typeElement, IDeclaredType contentPropertyAttributeType);
    [CanBeNullAttribute]
private static string TryFindContentProperty(ITypeElement typeElement, IDeclaredType contentPropertyAttributeType);
    private List`1<IType> AddCollectionTypes(List`1<IType> types, bool appendCollections, Boolean& isCollectonType);
    public sealed virtual XamlTypeFlags GetTypeFlags(ITypeElement type);
    public sealed virtual bool IsMarkupExtension(IType type, IType& returnType);
    [CanBeNullAttribute]
private IType CalculateMarkupExtension(IDeclaredType type);
    private XamlTypeFlags CalculateInstantiability(ITypeElement typeElement);
    private void CalculateHasStaticMembers(ITypeElement type, XamlTypeFlags& flags);
    private XamlTypeInfo CalculateTypeInfo(ITypeElement typeElement);
    private sealed virtual override void JetBrains.ReSharper.Psi.Xaml.Impl.Resolve.IXamlInvalidatingTypeCache.DropTypes();
    private XamlTypeInfo GetTypeInfo(ITypeElement element);
    private TValue GetTypeCache(Dictionary`2<IType, TValue> compiledDictionary, Dictionary`2<IType, TValue> sourceDictionary, IType type, Func`3<XamlTypeCacheImpl, IType, TValue> calculator);
    private static bool IsCompiledType(IType type);
    public sealed virtual XamlMemberFlags GetMemberFlags(IDeclaredElement element, ITypeElement originalTypeElement);
    [CanBeNullAttribute]
private MembersMap CalculateMemberMap(ITypeElement typeElement, XamlTypeFlags& flags);
    public sealed virtual IDeclaredType GetType(string fullyQualifiedName, String[] moduleNames);
    [NotNullAttribute]
private IDeclaredType ResolveType(string fullTypeName, String[] moduleNames);
    private static bool IsPrivateWinRtType(ITypeElement typeElement);
    [NotNullAttribute]
[PureAttribute]
private string SpecifyTypeName(string typeName);
    public sealed virtual IDeclaredType get_String();
    public sealed virtual IDeclaredType get_CultureInfo();
    public sealed virtual IDeclaredType get_Attribute();
    public sealed virtual IDeclaredType get_Bool();
    public sealed virtual IDeclaredType get_IListType();
    public sealed virtual IDeclaredType get_GenericIListType();
    public sealed virtual IDeclaredType get_GenericICollectionType();
    public sealed virtual IDeclaredType get_IDictionaryType();
    public sealed virtual IDeclaredType get_GenericIDictionaryType();
    public sealed virtual IDeclaredType get_GenericIObservableMap();
    public sealed virtual IDeclaredType get_IEnumerableType();
    public sealed virtual IDeclaredType get_GenericIEnumerableType();
    public sealed virtual IDeclaredType get_ISupportInitialize();
    public sealed virtual IDeclaredType get_PropertyChangedEventArgs();
    public sealed virtual IDeclaredType get_DependencyObject();
    public sealed virtual IDeclaredType get_DependencyProperty();
    public sealed virtual IDeclaredType get_DependencyPropertyKey();
    public sealed virtual IDeclaredType get_AvaloniaProperty();
    public IDeclaredType get_AvaloniaDependsOnAttribute();
    public sealed virtual IDeclaredType get_Freezable();
    public sealed virtual IDeclaredType get_Style();
    public sealed virtual IDeclaredType get_Styles();
    public sealed virtual IDeclaredType get_StyleInclude();
    public sealed virtual IDeclaredType get_Classes();
    public sealed virtual IDeclaredType get_Setter();
    public sealed virtual IDeclaredType get_Application();
    public sealed virtual IDeclaredType get_ResourceDictionary();
    public sealed virtual IDeclaredType get_IResourceDictionary();
    public sealed virtual IDeclaredType get_AvaloniaResourceInclude();
    public sealed virtual IDeclaredType get_AvaloniaResourceIncludeSince11();
    public sealed virtual IDeclaredType get_ResourceKey();
    public sealed virtual IDeclaredType get_EventSetter();
    public sealed virtual IDeclaredType get_Trigger();
    public sealed virtual IDeclaredType get_EventTrigger();
    public sealed virtual IDeclaredType get_TriggerCollection();
    public sealed virtual IDeclaredType get_RelativeSourceMode();
    public sealed virtual IDeclaredType get_XamarinRelativeSourceMode();
    public sealed virtual IDeclaredType get_AvaloniaRelativeSourceMode();
    public sealed virtual IDeclaredType get_MauiRelativeSourceBindingMode();
    public sealed virtual IDeclaredType get_RelativeSource();
    public sealed virtual IDeclaredType get_AvaloniaRelativeSource();
    public sealed virtual IDeclaredType get_ObjectDataProvider();
    public sealed virtual IDeclaredType get_Binding();
    public sealed virtual IDeclaredType get_BindingBase();
    public sealed virtual IDeclaredType get_BindingExpression();
    public sealed virtual IDeclaredType get_BindingMode();
    public sealed virtual IDeclaredType get_BindingUpdateSourceTrigger();
    public sealed virtual IDeclaredType get_IValueConverter();
    public sealed virtual IDeclaredType get_XamarinBinding();
    public sealed virtual IDeclaredType get_XamarinBindingBase();
    public sealed virtual IDeclaredType get_MultiBinding();
    public sealed virtual IDeclaredType get_IAddChildType();
    public sealed virtual IDeclaredType get_MarkupExtension();
    public sealed virtual IDeclaredType get_WorkflowMarkupExtension();
    public sealed virtual IDeclaredType get_ArrayExtension();
    public sealed virtual IDeclaredType get_IComponentConnector();
    public sealed virtual IDeclaredType get_IComponentConnector2();
    public sealed virtual IDeclaredType get_ContentPropertyAttribute();
    public sealed virtual IDeclaredType get_XamarinContentProperty();
    public sealed virtual IDeclaredType get_MauiContentProperty();
    public IDeclaredType get_AvaloniaContentAttribute();
    public sealed virtual IDeclaredType get_ICustomTypeDescriptor();
    public sealed virtual IDeclaredType get_ICustomTypeProvider();
    public sealed virtual IDeclaredType get_CollectionViewSource();
    public sealed virtual IDeclaredType get_IMarkupExtension();
    public sealed virtual IDeclaredType get_XamarinIMarkupExtension();
    public sealed virtual IDeclaredType get_MauiIMarkupExtension();
    public sealed virtual IDeclaredType get_MauiIMarkupExtensionOfT();
    public sealed virtual IDeclaredType get_AvaloniaIMarkupExtension();
    public sealed virtual IDeclaredType get_AvaloniaMarkupExtension();
    public sealed virtual IDeclaredType get_AvaloniaBinding();
    public sealed virtual IDeclaredType get_AvaloniaBinding2();
    public sealed virtual IDeclaredType get_AvaloniaReflectionBinding();
    public sealed virtual IDeclaredType get_AvaloniaCompiledBinding();
    public sealed virtual IDeclaredType get_AvaloniaMultiBinding();
    public IDeclaredType get_AvaloniaTemplateBinding();
    public sealed virtual IDeclaredType get_Brushes2();
    public sealed virtual IDeclaredType get_SystemColors();
    public sealed virtual IDeclaredType get_FontFamily();
    public sealed virtual IDeclaredType get_Brush();
    public sealed virtual IDeclaredType get_SolidColorBrush();
    public sealed virtual IDeclaredType get_ISolidColorBrush();
    public sealed virtual IDeclaredType get_IBrush();
    public sealed virtual IDeclaredType get_Brushes();
    public sealed virtual IDeclaredType get_Geometry();
    public sealed virtual IDeclaredType get_ImageSource();
    public sealed virtual IDeclaredType get_IBitmap();
    public sealed virtual IDeclaredType get_IImage();
    public sealed virtual IDeclaredType get_Bitmap();
    public sealed virtual IDeclaredType get_IImageBrushSource();
    public sealed virtual IDeclaredType get_Color();
    public sealed virtual IDeclaredType get_Colors();
    public sealed virtual IDeclaredType get_FontWeight();
    public sealed virtual IDeclaredType get_FontWeights();
    public sealed virtual IDeclaredType get_FontStyle();
    public sealed virtual IDeclaredType get_FontStyles();
    public sealed virtual IDeclaredType get_FontStretch();
    public sealed virtual IDeclaredType get_FontStretches();
    public sealed virtual IDeclaredType get_RoutedEvent();
    public sealed virtual IDeclaredType get_RoutedEventArgs();
    public sealed virtual IDeclaredType get_RoutedEventHandler();
    public sealed virtual IDeclaredType get_GenericEventHandler();
    public sealed virtual IDeclaredType get_DataTemplate();
    public sealed virtual IDeclaredType get_IDataTemplate();
    public sealed virtual IDeclaredType get_DataTemplates();
    public sealed virtual IDeclaredType get_TreeDataTemplate();
    public sealed virtual IDeclaredType get_HierarchicalDataTemplate();
    public sealed virtual IDeclaredType get_FrameworkTemplate();
    public sealed virtual IDeclaredType get_StaticResourceExtension();
    public sealed virtual IDeclaredType get_DynamicResourceExtension();
    public sealed virtual IDeclaredType get_StyleSheetExtension();
    public sealed virtual IDeclaredType get_RelativeSourceExtension();
    public sealed virtual IDeclaredType get_ModifierKeys();
    public sealed virtual IDeclaredType get_GridLength();
    public sealed virtual IDeclaredType get_ControlTemplate();
    public sealed virtual IDeclaredType get_Grid();
    public sealed virtual IDeclaredType get_RowDefinition();
    public sealed virtual IDeclaredType get_RowDefinitions();
    public sealed virtual IDeclaredType get_ColumnDefinition();
    public sealed virtual IDeclaredType get_ColumnDefinitions();
    public sealed virtual IDeclaredType get_Canvas();
    public sealed virtual IDeclaredType get_Panel();
    public sealed virtual IDeclaredType get_Uri();
    public sealed virtual IDeclaredType get_ICommand();
    public sealed virtual IDeclaredType get_ApplicationCommands();
    public sealed virtual IDeclaredType get_EditingCommands();
    public sealed virtual IDeclaredType get_NavigationCommands();
    public sealed virtual IDeclaredType get_ComponentCommands();
    public sealed virtual IDeclaredType get_MediaCommands();
    public sealed virtual IDeclaredType get_InlineCollection();
    public sealed virtual IDeclaredType get_AvaloniaInlineCollection();
    public sealed virtual IDeclaredType get_Object();
    public sealed virtual IDeclaredType get_FrameworkElement();
    public sealed virtual IDeclaredType get_FrameworkContentElement();
    public sealed virtual IDeclaredType get_IFrameworkInputElement();
    public sealed virtual IDeclaredType get_Key();
    public sealed virtual IDeclaredType get_TextBlock();
    public sealed virtual IDeclaredType get_Control();
    public sealed virtual IDeclaredType get_ItemsControl();
    public sealed virtual IDeclaredType get_Visibility();
    public sealed virtual IDeclaredType get_Thickness();
    public sealed virtual IDeclaredType get_CornerRadius();
    public sealed virtual IDeclaredType get_TransformOperations();
    public sealed virtual IDeclaredType get_TransformationTransformOperations();
    public sealed virtual IDeclaredType get_UIElement();
    public sealed virtual IDeclaredType get_UserControl();
    public sealed virtual IDeclaredType get_MauiContentView();
    public sealed virtual IDeclaredType get_Storyboard();
    public sealed virtual IDeclaredType get_RepeatBehavior();
    public sealed virtual IDeclaredType get_VisualStateGroupList();
    public sealed virtual IDeclaredType get_VisualStateGroup();
    public sealed virtual IDeclaredType get_VisualState();
    public sealed virtual IDeclaredType get_UriMapping();
    public sealed virtual IDeclaredType get_Frame();
    public sealed virtual IDeclaredType get_XamarinLayoutOptions();
    public sealed virtual IDeclaredType get_MauiLayoutOptions();
    public sealed virtual IDeclaredType get_XamarinFont();
    public sealed virtual IDeclaredType get_XamarinFontSizeConverter();
    public sealed virtual IDeclaredType get_XamarinKeyboard();
    public sealed virtual IDeclaredType get_XamarinKeyboardTypeConverter();
    public sealed virtual IDeclaredType get_XamarinFontAttributes();
    public sealed virtual IDeclaredType get_XamarinNamedSize();
    public sealed virtual IDeclaredType get_XamarinVisualElement();
    public sealed virtual IDeclaredType get_XamarinItemsView();
    public sealed virtual IDeclaredType get_XamarinTypeConverterAttribute();
    public sealed virtual IDeclaredType get_XamarinBindableProperty();
    public sealed virtual IDeclaredType get_XamarinBindableObject();
    public sealed virtual IDeclaredType get_XamarinOnPlatform();
    public sealed virtual IDeclaredType get_XamarinOnIdiom();
    public sealed virtual IDeclaredType get_XamarinDynamicResource();
    public sealed virtual IDeclaredType get_XamarinRectangle();
    public sealed virtual IDeclaredType get_XamarinShapesRectangle();
    public sealed virtual IDeclaredType get_MauiDynamicResource();
    public sealed virtual IDeclaredType get_XamarinNavigableElement();
    public sealed virtual IDeclaredType get_MauiBindableProperty();
    public sealed virtual IDeclaredType get_MauiBindableObject();
    public sealed virtual IDeclaredType get_RelativePanel();
    public sealed virtual IDeclaredType get_ITargetPropertyPath();
    public sealed virtual IDeclaredType get_IServiceProvider();
    public sealed virtual IDeclaredType get_AvaloniaXamlLoader();
    public sealed virtual IDeclaredType get_IBinding();
    public sealed virtual IDeclaredType get_AvaloniaStyledProperty();
    public sealed virtual IDeclaredType get_AvaloniaDirectProperty();
    public sealed virtual IDeclaredType get_AvaloniaAttachedProperty();
    public sealed virtual IDeclaredType get_IAvaloniaObject();
    public sealed virtual IDeclaredType get_AvaloniaObject();
    public sealed virtual IDeclaredType get_PseudoClassesAttribute();
    public sealed virtual IDeclaredType get_IAvaloniaList();
    public sealed virtual IDeclaredType get_IItemsPresenterHost();
    public sealed virtual IDeclaredType get_ItemsRepeater();
    public sealed virtual IDeclaredType get_ResolveByNameAttribute();
    public sealed virtual IDeclaredType get_InheritDataTypeFromItemsAttribute();
    public sealed virtual IDeclaredType get_Cursor();
    public sealed virtual IDeclaredType get_Cursors();
    public sealed virtual IDeclaredType get_MultiTrigger();
    public sealed virtual IDeclaredType get_Condition();
    public sealed virtual IDeclaredType get_MultiDataTrigger();
    public sealed virtual IDeclaredType get_AdornedElementPlaceholder();
    public sealed virtual IDeclaredType get_XData();
    public sealed virtual IDeclaredType get_TemplateBinding();
    public sealed virtual IDeclaredType get_DataTrigger();
    public sealed virtual IDeclaredType get_StaticExtension();
    public sealed virtual IDeclaredType get_XamarinParameterAttribute();
    public IDeclaredType get_MauiParameterAttribute();
    public sealed virtual IDeclaredType get_NameReferenceConverter();
    public sealed virtual IDeclaredType get_IResourceProvider();
    public sealed virtual IDeclaredType get_MauiBindingBase();
    public sealed virtual IDeclaredType get_MauiOnPlatform();
    public sealed virtual IDeclaredType get_MauiOn();
    public sealed virtual IDeclaredType get_MauiOnIdiom();
    public sealed virtual IDeclaredType get_AvaloniaIAddChildType();
    public sealed virtual IDeclaredType get_AvaloniaGenericIAddChildType();
    public sealed virtual IDeclaredType get_AvaloniaOn();
    public sealed virtual IDeclaredType get_AvaloniaMarkupExtensionDefaultOptionAttribute();
    public sealed virtual IDeclaredType get_AvaloniaMarkupExtensionOptionAttribute();
    public sealed virtual IDeclaredType get_WinRTColor();
    [NotNullAttribute]
private static String[] LoadSilverlightPredefinedColors();
    private void BuildSilverlightSymbolTables();
    public sealed virtual ISymbolTable get_SilverlightBrushes();
    public sealed virtual ISymbolTable get_SilverlightColors();
    public sealed virtual ISymbolTable get_SilverlightFontStyles();
    [CompilerGeneratedAttribute]
private bool <CalculateMarkupExtension>b__28_2(IMethod x);
}
[FlagsAttribute]
public enum JetBrains.ReSharper.Psi.Xaml.Impl.Resolve.XamlTypeFlags : Enum {
    public byte value__;
    public static XamlTypeFlags None;
    public static XamlTypeFlags HasVisibleConstructor;
    public static XamlTypeFlags HasDefaultConstructor;
    public static XamlTypeFlags HasAttachedMembers;
    public static XamlTypeFlags IsMarkupExtension;
    public static XamlTypeFlags HasXStaticMembers;
    public static XamlTypeFlags HasCommandMembers;
    public static XamlTypeFlags HasTypeConverter;
}
internal static class JetBrains.ReSharper.Psi.Xaml.Impl.Resolve.XamlTypeReferenceUtil : object {
    [CanBeNullAttribute]
public static IList`1<ReferencedNamespace> GetContainingNamespaces(IXamlNamespaceAliasReference aliasReference);
    [CanBeNullAttribute]
public static IList`1<ReferencedNamespace> GetContainingNamespaces(IXamlTypeReference typeReference);
    public static bool IsInstantiatableException(IReference typeReference, IResolveResult resolveResult);
}
[IsReadOnlyAttribute]
public class JetBrains.ReSharper.Psi.Xaml.Impl.Resolve.XamlXmlnsDefinition : ValueType {
    [CanBeNullAttribute]
public string AliasPrefix;
    [NotNullAttribute]
public string NamespaceUri;
    public XamlXmlnsDefinition(string aliasPrefix, string namespaceUri);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Searching.XamlReferenceSearcher : object {
    private bool myFindLateBound;
    [NotNullAttribute]
private IDeclaredElementsSet myElements;
    private ReferenceSearcherParameters myReferenceSearcherParameters;
    [NotNullAttribute]
private HashSet`1<string> myWordsInFile;
    [NotNullAttribute]
private HashSet`1<string> myReferenceNames;
    public XamlReferenceSearcher(XamlSearcherFactory xamlSearcherFactory, IDeclaredElementsSet elements, ReferenceSearcherParameters referenceSearcherParameters, bool findLateBound);
    public sealed virtual bool ProcessProjectItem(IPsiSourceFile sourceFile, IFindResultConsumer`1<TResult> consumer);
    public sealed virtual bool ProcessElement(ITreeNode element, IFindResultConsumer`1<TResult> consumer);
}
[PsiComponentAttribute("0")]
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Searching.XamlSearcherFactory : DomainSpecificSearcherFactoryBase {
    [NotNullAttribute]
private SearchDomainFactory mySearchDomainFactory;
    private IWordIndex myWordIndex;
    private static String[] ourResourceWords;
    public XamlSearcherFactory(SearchDomainFactory searchDomainFactory, IWordIndex wordIndex);
    private static XamlSearcherFactory();
    public virtual IEnumerable`1<string> GetAllPossibleWordsInFile(IDeclaredElement element);
    public IList`1<string> EvaluatePossibleWordsInFile(IDeclaredElement element);
    [NotNullAttribute]
private static IList`1<string> GetWordsByXamlResource(IXamlResource resource);
    [NotNullAttribute]
private static IList`1<string> GetWordsByTypeMember(ITypeMember typeMember);
    [NotNullAttribute]
private static IList`1<string> GetTypeElementWords(ITypeElement typeElement);
    [NotNullAttribute]
private IList`1<string> GetPathElementWords(IPathDeclaredElement pathElement);
    public virtual bool IsCompatibleWithLanguage(PsiLanguageType languageType);
    public virtual IDomainSpecificSearcher CreateReferenceSearcher(IDeclaredElementsSet elements, ReferenceSearcherParameters referenceSearcherParameters);
    public virtual IDomainSpecificSearcher CreateLateBoundReferenceSearcher(IDeclaredElementsSet elements, ReferenceSearcherParameters referenceSearcherParameters);
    public virtual IDomainSpecificSearcher CreateConstantExpressionSearcher(ConstantValue constantValue, bool onlyLiteralExpression);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Psi.Xaml.Impl.Searching.XamlSearcherFactory/<GetRelatedDeclaredElements>d__14")]
public virtual IEnumerable`1<RelatedDeclaredElement> GetRelatedDeclaredElements(IDeclaredElement element);
    public virtual ISearchDomain GetDeclaredElementSearchDomain(IDeclaredElement declaredElement);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.BindingElement : XamlObjectElementDeclaration`1<IDeclarationNameElement> {
    public BindingMode Mode { get; }
    public IPathValue Path { get; }
    public IType DataType { get; }
    public ISourceUsage Source { get; }
    public IElementNameUsage ElementName { get; }
    public IRelativeSourceUsage RelativeSource { get; }
    public ITreeNode FallbackValue { get; }
    public BindingElement(XmlCompositeNodeType type);
    protected virtual bool CanDeclareElementWith(IDeclarationNameElement nameAttribute);
    protected virtual IDeclaredElement CreateDeclaredElement();
    public virtual bool CanBeBoundTo(IDeclaredElement element);
    public sealed virtual BindingMode get_Mode();
    public sealed virtual IPathValue get_Path();
    public sealed virtual IType get_DataType();
    private IType TryGetTypeFromAttribute(string attributeName);
    public sealed virtual ISourceUsage get_Source();
    public sealed virtual IElementNameUsage get_ElementName();
    public sealed virtual IRelativeSourceUsage get_RelativeSource();
    public sealed virtual ITreeNode get_FallbackValue();
}
public static class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.CastedPropertyExpressionNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null <= null")]
public static ICastedPropertyExpression GetByCastExpression(ICastExpression propertyExpression);
}
public static class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.CastExpresionNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null <= null")]
public static ICastExpression GetByPropertyPart(IPropertyExpression propertyExpression);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.ClassModifierAttribute : ModifierAttribute {
    public ClassModifierAttribute(XmlCompositeNodeType type);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.ControlTemplateDeclaration : ResourceDeclaration {
    public IReference TargetTypeReference { get; }
    public IType TargetType { get; }
    public ControlTemplateDeclaration(XmlCompositeNodeType type);
    public sealed virtual IReference get_TargetTypeReference();
    public sealed virtual IType get_TargetType();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.DataTemplateDeclaration : ResourceDeclaration {
    public IReference DataTypeReference { get; }
    public DataTemplateDeclaration(XmlCompositeNodeType type);
    public sealed virtual IReference get_DataTypeReference();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.DependencyPropertyElement : XamlPropertyElement {
    public DependencyPropertyElement(XmlCompositeNodeType type);
    protected virtual ReferenceCollection CreateTokenReferences(IXmlToken token, TreeTextRange rangeWithin);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.DependencyPropertyValue : PropertyAttributeValue {
    public DependencyPropertyValue(XmlCompositeNodeType type);
    public virtual ReferenceCollection CreateCustomReferences();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.ElementNameAttribute : PropertyAttribute {
    public IElementNameReference ElementNameReference { get; }
    public ElementNameAttribute(XmlCompositeNodeType type);
    public sealed virtual IElementNameReference get_ElementNameReference();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.ElementNamePropertyElement : XamlPropertyElement {
    public IElementNameReference ElementNameReference { get; }
    public ElementNamePropertyElement(XmlCompositeNodeType type);
    public sealed virtual IElementNameReference get_ElementNameReference();
    protected virtual ReferenceCollection CreateTokenReferences(IXmlToken token, TreeTextRange rangeWithin);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.EventSetterElement : XamlPropertyElement {
    public EventSetterElement(XmlCompositeNodeType type);
    protected virtual ReferenceCollection CreateTokenReferences(IXmlToken token, TreeTextRange rangeWithin);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.EventSetterPropertyValue : PropertyAttributeValue {
    public EventSetterPropertyValue(XmlCompositeNodeType type);
    public virtual ReferenceCollection CreateCustomReferences();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.FieldDeclaration : XamlObjectElementDeclaration`1<IDeclarationNameElement> {
    public IType Type { get; }
    private IField JetBrains.ReSharper.Psi.Xaml.Tree.IFieldDeclaration.DeclaredElement { get; }
    private ITypeMember JetBrains.ReSharper.Psi.Tree.ITypeMemberDeclaration.DeclaredElement { get; }
    public FieldDeclaration(XmlCompositeNodeType type);
    protected virtual bool CanDeclareElementWith(IDeclarationNameElement nameAttribute);
    private bool CanDeclareElementIfDeclarationAllowed(IDeclarationNameElement nameAttribute);
    protected virtual IDeclaredElement CreateDeclaredElement();
    public virtual bool CanBeBoundTo(IDeclaredElement element);
    public sealed virtual void SetType(IType type);
    public sealed virtual IType get_Type();
    private sealed virtual override IField JetBrains.ReSharper.Psi.Xaml.Tree.IFieldDeclaration.get_DeclaredElement();
    private sealed virtual override ITypeMember JetBrains.ReSharper.Psi.Tree.ITypeMemberDeclaration.get_DeclaredElement();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.FieldModifierAttribute : ModifierAttribute {
    public FieldModifierAttribute(XmlCompositeNodeType type);
}
public interface JetBrains.ReSharper.Psi.Xaml.Impl.Tree.IPropertySetter {
    [CanBeNullAttribute]
public ITreeNode ValueElement { get; }
    [NotNullAttribute]
public string PropertyName { get; }
    public abstract virtual ITreeNode get_ValueElement();
    public abstract virtual string get_PropertyName();
}
public interface JetBrains.ReSharper.Psi.Xaml.Impl.Tree.ITypeMemberReference {
    public IValueReferenceData ValueReferenceData { get; }
    public abstract virtual IValueReferenceData get_ValueReferenceData();
}
public interface JetBrains.ReSharper.Psi.Xaml.Impl.Tree.ITypeMemberUsage {
    [CanBeNullAttribute]
public ITypeMemberReference MemberReference { get; }
    [CanBeNullAttribute]
public IReference ContainingTypeReference { get; }
    public abstract virtual ITypeMemberReference get_MemberReference();
    public abstract virtual IReference get_ContainingTypeReference();
}
public interface JetBrains.ReSharper.Psi.Xaml.Impl.Tree.ITypeUsage {
    [CanBeNullAttribute]
public IReference TypeReference { get; }
    public abstract virtual IReference get_TypeReference();
}
public interface JetBrains.ReSharper.Psi.Xaml.Impl.Tree.IValueReferenceData {
    public abstract virtual ValueReferenceType GetValueReferenceType();
    [CanBeNullAttribute]
public abstract virtual IDeclaredType GetReferencedEventType();
    [NotNullAttribute]
public abstract virtual IType GetExpectedType();
}
public interface JetBrains.ReSharper.Psi.Xaml.Impl.Tree.IXamlHashableDeclaration {
}
public interface JetBrains.ReSharper.Psi.Xaml.Impl.Tree.IXamlHashableEntity {
    public IEnumerable`1<IXamlHashableEntity> Children { get; }
    public bool IsInternal { get; }
    public abstract virtual IHashableEntityInfo[] CalcAllHashes(string parentQualifiedName, String& qualifiedName);
    public abstract virtual IEnumerable`1<IXamlHashableEntity> get_Children();
    public abstract virtual bool get_IsInternal();
}
public interface JetBrains.ReSharper.Psi.Xaml.Impl.Tree.IXDataElement {
}
internal abstract class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.KeywordAttribute : XamlAttribute {
    private string myExpectedAttributeName;
    protected KeywordAttribute(XmlCompositeNodeType type, string expectedAttributeName);
    protected virtual ReferenceCollection CreateFirstClassReferences();
    protected abstract virtual void CreateFirstClassReferencesInternal(IXmlAttributeValue value, IList`1<IReference> result);
}
internal abstract class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.KeywordObjectElement : XamlObjectElement {
    protected KeywordObjectElement(XmlCompositeNodeType type);
    public virtual ReferenceCollection CreateCustomReferences();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.LocalizationUidAttribute : KeywordAttribute {
    public LocalizationUidAttribute(XmlCompositeNodeType type);
    protected virtual void CreateFirstClassReferencesInternal(IXmlAttributeValue value, IList`1<IReference> result);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.MarkupExtensions.AttachedPropertyExpression : QualifierExpression {
    protected static short DOT_ROLE;
    protected static short LPARENTH_ROLE;
    protected static short RPARENTH_ROLE;
    public IXmlToken LParenth { get; }
    public IXmlToken RParenth { get; }
    public IQualifierExpression Qualifier { get; }
    public ISimplePropertyExpression Property { get; }
    public IXmlToken Dot { get; }
    public IReference PropertyReference { get; }
    public AttachedPropertyExpression(XmlCompositeNodeType type);
    public virtual short GetChildRole(TreeElement child);
    public sealed virtual TReturn AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
    public sealed virtual IXmlToken get_LParenth();
    public sealed virtual IXmlToken get_RParenth();
    public sealed virtual IQualifierExpression get_Qualifier();
    public sealed virtual ISimplePropertyExpression get_Property();
    public sealed virtual IXmlToken get_Dot();
    public virtual IReference get_PropertyReference();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.MarkupExtensions.AttributeListMarkupValue : XamlCompositeElement {
    public static short ATTRIBUTE_ROLE;
    public TreeNodeCollection`1<IMarkupAttribute> Attributes { get; }
    public AttributeListMarkupValue(XmlCompositeNodeType type);
    public virtual short GetChildRole(TreeElement child);
    public sealed virtual TreeNodeCollection`1<IMarkupAttribute> get_Attributes();
    public sealed virtual void RemoveAttribute(IMarkupAttribute attribute);
    public sealed virtual IMarkupAttribute AddAttributeAfter(IMarkupAttribute child, IMarkupAttribute anchor);
    public sealed virtual IMarkupAttribute AddAttributeBefore(IMarkupAttribute child, IMarkupAttribute anchor);
    private void AppendCommaAndSpace(IMarkupAttribute attribute);
    private static void RemoveToken(ITreeNode node, bool forward, Func`2<XamlTokenTypes, XmlTokenNodeType> selector);
    private sealed virtual override TReturn JetBrains.ReSharper.Psi.Xml.Tree.IXmlTreeNode.AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.MarkupExtensions.BindingMarkup : Markup {
    public ISourceUsage Source { get; }
    public BindingMode Mode { get; }
    public IPathValue Path { get; }
    public IElementNameUsage ElementName { get; }
    public IRelativeSourceUsage RelativeSource { get; }
    public ITreeNode FallbackValue { get; }
    public IType DataType { get; }
    public IMarkupAttribute ModeAttribute { get; }
    public BindingMarkup(XmlCompositeNodeType type);
    public sealed virtual ISourceUsage get_Source();
    public sealed virtual BindingMode get_Mode();
    public sealed virtual IPathValue get_Path();
    public sealed virtual IElementNameUsage get_ElementName();
    public sealed virtual IRelativeSourceUsage get_RelativeSource();
    public sealed virtual ITreeNode get_FallbackValue();
    public sealed virtual IType get_DataType();
    private IType TryGetTypeFromAttribute(string attributeName);
    public sealed virtual IMarkupAttribute get_ModeAttribute();
    public sealed virtual void SetBindingMode(BindingMode bindingMode);
    private sealed virtual override TReturn JetBrains.ReSharper.Psi.Xml.Tree.IXmlTreeNode.AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
}
[ExtensionAttribute]
internal static class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.MarkupExtensions.BindingMarkupEx : object {
    [ExtensionAttribute]
public static BindingMode GetBindingMode(Markup bindingMarkup, BindingMode defaultValue);
    [ExtensionAttribute]
public static BindingMode GetBindingMode(XBindMarkup markup);
    [ExtensionAttribute]
public static UpdateSourceTrigger GetUpdateSourceTrigger(IXBindMarkup markup);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IPathValue TryGetPath(Markup bindingMarkup);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IPathValue TryGetBindBackPath(Markup bindingMarkup);
    [ExtensionAttribute]
private static Nullable`1<BindingMode> TryGetBindingMode(Markup bindingMarkup);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.MarkupExtensions.CastedIndexerParameter : XamlCompositeElement {
    private static short LPARENTH_ROLE;
    private static short RPARENTH_ROLE;
    private static short TYPE_ROLE;
    private static short PARAMETER_ROLE;
    public ITypeExpression TypeExpression { get; }
    public IXmlToken LParenth { get; }
    public IXmlToken RParenth { get; }
    public CastedIndexerParameter(XmlCompositeNodeType type);
    public virtual short GetChildRole(TreeElement child);
    public sealed virtual ITypeExpression get_TypeExpression();
    public sealed virtual IXmlToken get_LParenth();
    public sealed virtual IXmlToken get_RParenth();
    private sealed virtual override TReturn JetBrains.ReSharper.Psi.Xml.Tree.IXmlTreeNode.AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.MarkupExtensions.CastedPropertyExpression : QualifierExpression {
    private static short QUALIFIER_ROLE;
    private static short CAST_ROLE;
    public IQualifierExpression Qualifier { get; }
    public ICastExpression CastExpression { get; }
    public IReference PropertyReference { get; }
    public CastedPropertyExpression(XmlCompositeNodeType type);
    public virtual short GetChildRole(TreeElement child);
    public sealed virtual IQualifierExpression get_Qualifier();
    public sealed virtual ICastExpression get_CastExpression();
    public virtual IReference get_PropertyReference();
    public virtual IExpressionType GetExpressionType();
    private sealed virtual override TReturn JetBrains.ReSharper.Psi.Xml.Tree.IXmlTreeNode.AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.MarkupExtensions.CastExpression : QualifierExpression {
    private static short LPARENTH_ROLE;
    private static short TARGET_LPARENTH_ROLE;
    private static short TARGET_ROLE;
    private static short TARGET_RPARENTH_ROLE;
    private static short PROPERTY_ROLE;
    private static short RPARENTH_ROLE;
    public IXmlToken LParenth { get; }
    public IXmlToken TargetLParenth { get; }
    public ITypeExpression TargetType { get; }
    public IXmlToken TargetRParenth { get; }
    public IPathValue Value { get; }
    public IXmlToken RParenth { get; }
    public IReference PropertyReference { get; }
    public CastExpression(XmlCompositeNodeType type);
    public virtual short GetChildRole(TreeElement child);
    public sealed virtual IXmlToken get_LParenth();
    public sealed virtual IXmlToken get_TargetLParenth();
    public sealed virtual ITypeExpression get_TargetType();
    public sealed virtual IXmlToken get_TargetRParenth();
    public sealed virtual IPathValue get_Value();
    public sealed virtual IXmlToken get_RParenth();
    public virtual IExpressionType GetExpressionType();
    public virtual IReference get_PropertyReference();
    private sealed virtual override TReturn JetBrains.ReSharper.Psi.Xml.Tree.IXmlTreeNode.AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.MarkupExtensions.ChildSelectorExpression : SelectorExpression {
    private short QUALIFIER_ROLE;
    public ISelectorExpression Qualifier { get; }
    public IReference TypeReference { get; }
    public IType TargetType { get; }
    public ChildSelectorExpression(XmlCompositeNodeType type);
    public virtual short GetChildRole(TreeElement child);
    public sealed virtual ISelectorExpression get_Qualifier();
    public virtual IReference get_TypeReference();
    public virtual IType get_TargetType();
    private sealed virtual override TReturn JetBrains.ReSharper.Psi.Xml.Tree.IXmlTreeNode.AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.MarkupExtensions.ClassSelectorExpression : SelectorExpression {
    [CompilerGeneratedAttribute]
private IDeclaredElement <JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ICachedTypeMemberDeclaration.CachedDeclaredElement>k__BackingField;
    private short QUALIFIER_ROLE;
    private short DOT_ROLE;
    private short NAME_ROLE;
    private IDeclaredElement JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ICachedTypeMemberDeclaration.CachedDeclaredElement { get; private set; }
    public ISelectorExpression Qualifier { get; }
    public IXamlToken Dot { get; }
    public IXamlIdentifier Name { get; }
    public IReference TypeReference { get; }
    public IType TargetType { get; }
    public bool IsAbstract { get; }
    public bool IsSealed { get; }
    public bool IsVirtual { get; }
    public bool IsOverride { get; }
    public bool IsStatic { get; }
    public bool IsReadonly { get; }
    public bool IsExtern { get; }
    public bool IsUnsafe { get; }
    public bool IsVolatile { get; }
    public string DeclaredName { get; }
    public bool HasAccessRights { get; }
    public IDeclaredElement DeclaredElement { get; }
    public IType Type { get; }
    public ClassSelectorExpression(XmlCompositeNodeType type);
    [CompilerGeneratedAttribute]
private sealed virtual override IDeclaredElement JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ICachedTypeMemberDeclaration.get_CachedDeclaredElement();
    [CompilerGeneratedAttribute]
private sealed virtual override void JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ICachedTypeMemberDeclaration.set_CachedDeclaredElement(IDeclaredElement value);
    public virtual short GetChildRole(TreeElement child);
    public sealed virtual ISelectorExpression get_Qualifier();
    public IXamlToken get_Dot();
    public sealed virtual IXamlIdentifier get_Name();
    public virtual IReference get_TypeReference();
    public virtual IType get_TargetType();
    public AccessRights GetAccessRights();
    public bool get_IsAbstract();
    public bool get_IsSealed();
    public bool get_IsVirtual();
    public bool get_IsOverride();
    public bool get_IsStatic();
    public bool get_IsReadonly();
    public bool get_IsExtern();
    public bool get_IsUnsafe();
    public bool get_IsVolatile();
    public sealed virtual XmlNode GetXMLDoc(bool inherit);
    public sealed virtual string get_DeclaredName();
    public sealed virtual void SetName(string name);
    public sealed virtual TreeTextRange GetNameRange();
    public sealed virtual bool IsSynthetic();
    public bool get_HasAccessRights();
    public void SetAccessRights(AccessRights rights);
    private bool CanCreateDeclaredElement();
    public sealed virtual IDeclaredElement get_DeclaredElement();
    private IDeclaredElement CreateDeclaredElement();
    public IType get_Type();
    public IEnumerable`1<string> GetPossibleDeclaredNames();
    protected virtual void PreInit();
    private sealed virtual override TReturn JetBrains.ReSharper.Psi.Xml.Tree.IXmlTreeNode.AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.MarkupExtensions.ControlNameExpression : QualifierExpression {
    public static short NAME_ROLE;
    public IXamlToken Name { get; }
    public IReference PropertyReference { get; }
    public ControlNameExpression(XmlCompositeNodeType type);
    public virtual short GetChildRole(TreeElement child);
    public sealed virtual IXamlToken get_Name();
    public virtual IReference get_PropertyReference();
    protected virtual ReferenceCollection CreateFirstClassReferences();
    private sealed virtual override TReturn JetBrains.ReSharper.Psi.Xml.Tree.IXmlTreeNode.AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.MarkupExtensions.ControlNameSelectorExpression : SelectorExpression {
    private short QUALIFIER_ROLE;
    private short NAME_ROLE;
    public ISelectorExpression Qualifier { get; }
    public IXamlToken Name { get; }
    public IReference TypeReference { get; }
    public IType TargetType { get; }
    public ControlNameSelectorExpression(XmlCompositeNodeType type);
    public virtual short GetChildRole(TreeElement child);
    public sealed virtual ISelectorExpression get_Qualifier();
    public IXamlToken get_Name();
    protected virtual ReferenceCollection CreateFirstClassReferences();
    public virtual IReference get_TypeReference();
    public virtual IType get_TargetType();
    private sealed virtual override TReturn JetBrains.ReSharper.Psi.Xml.Tree.IXmlTreeNode.AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.MarkupExtensions.DataContextQualifier : object {
    [NotNullAttribute]
private ITreeNode myElement;
    public bool Resolved { get; }
    public DataContextQualifier(ITreeNode element);
    [NotNullAttribute]
public IType GetExpressionType(IXamlObjectElement& objectElement);
    public sealed virtual ISymbolTable GetSymbolTable(SymbolTableMode mode);
    public sealed virtual QualifierKind GetKind();
    public sealed virtual bool get_Resolved();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.MarkupExtensions.DescendantSelectorExpression : SelectorExpression {
    private short QUALIFIER_ROLE;
    public ISelectorExpression Qualifier { get; }
    public IReference TypeReference { get; }
    public IType TargetType { get; }
    public DescendantSelectorExpression(XmlCompositeNodeType type);
    public virtual short GetChildRole(TreeElement child);
    public sealed virtual ISelectorExpression get_Qualifier();
    public virtual IReference get_TypeReference();
    public virtual IType get_TargetType();
    private sealed virtual override TReturn JetBrains.ReSharper.Psi.Xml.Tree.IXmlTreeNode.AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.MarkupExtensions.ErrorValue : XamlCompositeElement {
    private static short TEXT_ROLE;
    public IXmlToken TextToken { get; }
    public ErrorValue(XmlCompositeNodeType type);
    public virtual short GetChildRole(TreeElement child);
    public sealed virtual IXmlToken get_TextToken();
    private sealed virtual override TReturn JetBrains.ReSharper.Psi.Xml.Tree.IXmlTreeNode.AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.MarkupExtensions.EscapedValue : XamlCompositeElement {
    private static short ESCAPE_ROLE;
    public IXmlToken EscapeToken { get; }
    public EscapedValue(XmlCompositeNodeType type);
    public virtual short GetChildRole(TreeElement child);
    public sealed virtual IXmlToken get_EscapeToken();
    private sealed virtual override TReturn JetBrains.ReSharper.Psi.Xml.Tree.IXmlTreeNode.AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.MarkupExtensions.IdentifierMarkupValue : XamlCompositeElement {
    public static short IDENTIFIER_ROLE;
    public IXamlIdentifier Identifier { get; }
    public IdentifierMarkupValue(XmlCompositeNodeType type);
    public virtual short GetChildRole(TreeElement child);
    public sealed virtual IXamlIdentifier get_Identifier();
    public virtual ReferenceCollection CreateCustomReferences();
    private sealed virtual override TReturn JetBrains.ReSharper.Psi.Xml.Tree.IXmlTreeNode.AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.MarkupExtensions.IndexerExpression : QualifierExpression {
    private static short PROPERTY_ROLE;
    private static short LBRACKET_ROLE;
    private static short RBRACKET_ROLE;
    private static short PARAM_LIST_ROLE;
    private static short DOT_ROLE;
    public IQualifierExpression Qualifier { get; }
    public IIndexerParameterList ParameterList { get; }
    public IXmlToken LBracket { get; }
    public IXmlToken Dot { get; }
    public IXmlToken RBracket { get; }
    public IReference PropertyReference { get; }
    public IndexerExpression(XmlCompositeNodeType type);
    public virtual short GetChildRole(TreeElement child);
    public sealed virtual IQualifierExpression get_Qualifier();
    public sealed virtual IIndexerParameterList get_ParameterList();
    public sealed virtual IXmlToken get_LBracket();
    public sealed virtual IXmlToken get_Dot();
    public sealed virtual IXmlToken get_RBracket();
    protected virtual ReferenceCollection CreateFirstClassReferences();
    public virtual IReference get_PropertyReference();
    public virtual IType Type();
    private sealed virtual override TReturn JetBrains.ReSharper.Psi.Xml.Tree.IXmlTreeNode.AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.MarkupExtensions.IndexerParameter : XamlCompositeElement {
    public IndexerParameter(XmlCompositeNodeType type);
    protected virtual ReferenceCollection CreateFirstClassReferences();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.MarkupExtensions.IndexerParameterList : XamlCompositeElement {
    private static short PARAMETER_ROLE;
    public TreeNodeCollection`1<IIndexerParameter> Parameters { get; }
    public IndexerParameterList(XmlCompositeNodeType type);
    public virtual short GetChildRole(TreeElement child);
    public sealed virtual TreeNodeCollection`1<IIndexerParameter> get_Parameters();
}
internal abstract class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.MarkupExtensions.KeywordMarkup : Markup {
    public string ExpectedAttributeName { get; }
    protected KeywordMarkup(XmlCompositeNodeType type);
    public abstract virtual string get_ExpectedAttributeName();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.MarkupExtensions.Markup : XamlCompositeElement {
    private static short NAME_ROLE;
    private static short LBRACE_ROLE;
    private static short RBRACE_ROLE;
    private static short VALUE_ROLE;
    public string Name { get; }
    public IMarkupValue Value { get; }
    public IXmlToken LBrace { get; }
    public IXamlIdentifier NameNode { get; }
    public IXmlToken RBrace { get; }
    public IReference TypeReference { get; }
    public Markup(XmlCompositeNodeType type);
    public virtual short GetChildRole(TreeElement child);
    public sealed virtual string get_Name();
    public sealed virtual IMarkupValue get_Value();
    public sealed virtual IXmlToken get_LBrace();
    public sealed virtual IXamlIdentifier get_NameNode();
    public sealed virtual IXmlToken get_RBrace();
    public virtual IReference get_TypeReference();
    protected virtual ReferenceCollection CreateFirstClassReferences();
    public virtual ReferenceCollection CreateCustomReferences();
    public virtual ReferenceCollection CreateIdentifierValueReferences(ITreeNode owner, IXmlToken identifier, TreeTextRange rangeWithin);
    private sealed virtual override TReturn JetBrains.ReSharper.Psi.Xml.Tree.IXmlTreeNode.AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.MarkupExtensions.MarkupAncestorTypeAttribute : MarkupAttribute {
    public IReference TypeReference { get; }
    public MarkupAncestorTypeAttribute(XmlCompositeNodeType type);
    public virtual IReference get_TypeReference();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.MarkupExtensions.MarkupAttribute : XamlCompositeElement {
    private string myDefaultAttributeName;
    public static short NAME_ROLE;
    public static short EQ_ROLE;
    public static short VALUE_ROLE;
    public string DefaultAttributeName { get; public set; }
    public string Name { get; }
    public IMarkupAttributeValue Value { get; }
    public IXamlIdentifier NameNode { get; }
    public IXmlToken Eq { get; }
    public ITypeMemberReference MemberReference { get; }
    public IReference TypeReference { get; }
    public IReference ContainingTypeReference { get; }
    public MarkupAttribute(XmlCompositeNodeType type);
    public string get_DefaultAttributeName();
    public void set_DefaultAttributeName(string value);
    public virtual short GetChildRole(TreeElement child);
    public sealed virtual string get_Name();
    public sealed virtual IMarkupAttributeValue get_Value();
    public sealed virtual IXamlIdentifier get_NameNode();
    public sealed virtual IXmlToken get_Eq();
    public sealed virtual ITypeMemberReference get_MemberReference();
    public virtual IReference get_TypeReference();
    public sealed virtual IReference get_ContainingTypeReference();
    protected virtual ReferenceCollection CreateFirstClassReferences();
    public virtual ReferenceCollection CreateCustomReferences();
    protected ReferenceCollection CreateValueReferences(IMarkupAttributeValue value);
    protected virtual ReferenceCollection CreateIdentifierValueReferences(IXmlToken identifier, TreeTextRange rangeWithin);
    private sealed virtual override TReturn JetBrains.ReSharper.Psi.Xml.Tree.IXmlTreeNode.AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.MarkupExtensions.MarkupConstant : XamlCompositeElement {
    public static short NAMESPACE_ALIAS_ROLE;
    public static short COLON_ROLE;
    public static short NAME_ROLE;
    public ConstantValue ConstantValue { get; }
    public INamespaceAliasQualifier NamespaceAlias { get; }
    public IXamlIdentifier Name { get; }
    public MarkupConstant(XmlCompositeNodeType type);
    public virtual short GetChildRole(TreeElement child);
    public sealed virtual ExpressionAccessType GetAccessType();
    public sealed virtual bool IsConstantValue();
    public sealed virtual IType Type();
    public sealed virtual IExpressionType GetExpressionType();
    [CanBeNullAttribute]
private IXamlConstantDeclaredElement GetConstantDeclaredElement();
    public sealed virtual ConstantValue get_ConstantValue();
    public sealed virtual IType GetImplicitlyConvertedTo();
    public virtual ReferenceCollection CreateCustomReferences();
    public sealed virtual INamespaceAliasQualifier get_NamespaceAlias();
    public sealed virtual IXamlIdentifier get_Name();
    private sealed virtual override TReturn JetBrains.ReSharper.Psi.Xml.Tree.IXmlTreeNode.AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.MarkupExtensions.MarkupElementNameAttribute : MarkupAttribute {
    public IElementNameReference ElementNameReference { get; }
    public MarkupElementNameAttribute(XmlCompositeNodeType type);
    public sealed virtual IElementNameReference get_ElementNameReference();
    protected virtual ReferenceCollection CreateIdentifierValueReferences(IXmlToken identifier, TreeTextRange rangeWithin);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.MarkupExtensions.MarkupNumberConstant : XamlCompositeElement {
    private static short VALUE_ROLE;
    public IXmlToken Value { get; }
    public ConstantValue ConstantValue { get; }
    public MarkupNumberConstant(XmlCompositeNodeType type);
    public virtual short GetChildRole(TreeElement child);
    public sealed virtual IXmlToken get_Value();
    public sealed virtual ExpressionAccessType GetAccessType();
    public sealed virtual bool IsConstantValue();
    private ValueTuple`2<IType, object> GetTypeAndValue();
    public sealed virtual IType Type();
    public sealed virtual IExpressionType GetExpressionType();
    public sealed virtual IType GetImplicitlyConvertedTo();
    public sealed virtual ConstantValue get_ConstantValue();
    private sealed virtual override TReturn JetBrains.ReSharper.Psi.Xml.Tree.IXmlTreeNode.AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.MarkupExtensions.MarkupRelativeSourceAttribute : MarkupAttribute {
    public RelativeSourceMode Mode { get; }
    public int AncestorLevel { get; }
    public ITypeUsage AncestorType { get; }
    public MarkupRelativeSourceAttribute(XmlCompositeNodeType type);
    private IRelativeSourceUsage GetRelativeSourceUsage();
    public sealed virtual RelativeSourceMode get_Mode();
    public sealed virtual int get_AncestorLevel();
    public sealed virtual ITypeUsage get_AncestorType();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.MarkupExtensions.MarkupSourceAttribute : MarkupAttribute {
    public MarkupSourceAttribute(XmlCompositeNodeType type);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.MarkupExtensions.MarkupStringValue : StringValue {
    public ConstantValue ConstantValue { get; }
    public MarkupStringValue(XmlCompositeNodeType type);
    public sealed virtual ExpressionAccessType GetAccessType();
    public sealed virtual bool IsConstantValue();
    public sealed virtual IType Type();
    public sealed virtual IExpressionType GetExpressionType();
    public sealed virtual IType GetImplicitlyConvertedTo();
    public sealed virtual ConstantValue get_ConstantValue();
    private sealed virtual override TReturn JetBrains.ReSharper.Psi.Xml.Tree.IXmlTreeNode.AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.MarkupExtensions.MethodArgumentsList : XamlCompositeElement {
    public static short ARGUMENT_ROLE;
    public static short COMMA_ROLE;
    public TreeNodeCollection`1<IXamlArgument> Arguments { get; }
    public MethodArgumentsList(XmlCompositeNodeType type);
    public virtual short GetChildRole(TreeElement child);
    public sealed virtual TreeNodeCollection`1<IXamlArgument> get_Arguments();
    public sealed virtual void RemoveArgument(IXamlArgument argument);
    public sealed virtual IXamlArgument AddArgumentBefore(IXamlArgument newArgument, IXamlArgument anchor);
    public sealed virtual IXamlArgument AddArgumentAfter(IXamlArgument newArgument, IXamlArgument anchor);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.MarkupExtensions.MethodInvocationExpression : XamlCompositeElement {
    private static short QUALIFIER_ROLE;
    private static short DOT_ROLE;
    private static short METHOD_NAME_ROLE;
    private static short LPARENTH_ROLE;
    private static short ARGUMENTS_LIST_ROLE;
    private static short RPARENTH_ROLE;
    public IQualifierExpression Qualifier { get; }
    public IXmlToken Dot { get; }
    public IXamlIdentifier MethodName { get; }
    public IXmlToken LeftParenthesis { get; }
    public IMethodArgumentsList ArgumentsList { get; }
    public IXmlToken RightParenthesis { get; }
    public IXamlXBindMethodInvocationReference MethodReference { get; }
    public IList`1<IArgument> Arguments { get; }
    public IArgumentInfo ExtensionQualifier { get; }
    public IManagedReference Reference { get; }
    public IPsiModule PsiModule { get; }
    private IList`1<IArgumentInfo> JetBrains.ReSharper.Psi.IInvocationInfo.Arguments { get; }
    public ConstantValue ConstantValue { get; }
    public MethodInvocationExpression(XmlCompositeNodeType type);
    public virtual short GetChildRole(TreeElement child);
    public sealed virtual IQualifierExpression get_Qualifier();
    public sealed virtual IXmlToken get_Dot();
    public sealed virtual IXamlIdentifier get_MethodName();
    public sealed virtual IXmlToken get_LeftParenthesis();
    public sealed virtual IMethodArgumentsList get_ArgumentsList();
    public sealed virtual IXmlToken get_RightParenthesis();
    public IXamlXBindMethodInvocationReference get_MethodReference();
    public sealed virtual ExpressionAccessType GetAccessType();
    public sealed virtual bool IsConstantValue();
    public sealed virtual IType Type();
    public sealed virtual IExpressionType GetExpressionType();
    public sealed virtual IType GetImplicitlyConvertedTo();
    protected virtual ReferenceCollection CreateFirstClassReferences();
    public sealed virtual IList`1<IArgument> get_Arguments();
    public sealed virtual void RemoveArgument(IXamlArgument argument);
    public sealed virtual IXamlArgument AddArgumentBefore(IXamlArgument newArgument, IXamlArgument anchor);
    public sealed virtual IXamlArgument AddArgumentAfter(IXamlArgument newArgument, IXamlArgument anchor);
    public sealed virtual IArgumentInfo get_ExtensionQualifier();
    public sealed virtual IManagedReference get_Reference();
    public sealed virtual IPsiModule get_PsiModule();
    private sealed virtual override IList`1<IArgumentInfo> JetBrains.ReSharper.Psi.IInvocationInfo.get_Arguments();
    public sealed virtual ConstantValue get_ConstantValue();
    private sealed virtual override TReturn JetBrains.ReSharper.Psi.Xml.Tree.IXmlTreeNode.AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.MarkupExtensions.NamespaceAliasQualifier : QualifierExpression {
    private static short ALIAS_ROLE;
    public IXamlIdentifier NamespaceAlias { get; }
    public IReference PropertyReference { get; }
    public NamespaceAliasQualifier(XmlCompositeNodeType type);
    public virtual short GetChildRole(TreeElement child);
    public sealed virtual IXamlIdentifier get_NamespaceAlias();
    public virtual QualifierKind GetKind();
    public virtual IReference get_PropertyReference();
    protected virtual ReferenceCollection CreateFirstClassReferences();
    public virtual ISymbolTable GetSymbolTable(SymbolTableMode mode);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.MarkupExtensions.NegationExpression : XamlCompositeElement {
    public ConstantValue ConstantValue { get; }
    public NegationExpression(XmlCompositeNodeType type);
    public sealed virtual ConstantValue get_ConstantValue();
    public sealed virtual ExpressionAccessType GetAccessType();
    public sealed virtual bool IsConstantValue();
    public sealed virtual IType Type();
    public sealed virtual IExpressionType GetExpressionType();
    public sealed virtual IType GetImplicitlyConvertedTo();
    private sealed virtual override TReturn JetBrains.ReSharper.Psi.Xml.Tree.IXmlTreeNode.AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.MarkupExtensions.NestedSelectorExpression : SelectorExpression {
    public IReference TypeReference { get; }
    public IType TargetType { get; }
    public NestedSelectorExpression(XmlCompositeNodeType type);
    public virtual IReference get_TypeReference();
    public virtual IType get_TargetType();
    private sealed virtual override TReturn JetBrains.ReSharper.Psi.Xml.Tree.IXmlTreeNode.AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.MarkupExtensions.NestedTypeExpression : TypeExpressionBase {
    private static short QUALIFIER_ROLE;
    private static short DELIM_ROLE;
    private static short NAME_ROLE;
    private static short TYPE_PARAMETERS_COUNT_ROLE;
    public ITypeExpressionBase Qualifier { get; }
    public IXamlIdentifier NestedType { get; }
    public IXmlToken Plus { get; }
    public IXmlToken TypeParametersCount { get; }
    public NestedTypeExpression(XmlCompositeNodeType type);
    public virtual short GetChildRole(TreeElement child);
    public sealed virtual ITypeExpressionBase get_Qualifier();
    public sealed virtual IXamlIdentifier get_NestedType();
    public sealed virtual IXmlToken get_Plus();
    public virtual IXmlToken get_TypeParametersCount();
    protected virtual ReferenceCollection CreateFirstClassReferences();
    public virtual ISymbolTable GetSymbolTable(SymbolTableMode mode);
    private sealed virtual override TReturn JetBrains.ReSharper.Psi.Xml.Tree.IXmlTreeNode.AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.MarkupExtensions.NullMarkup : KeywordMarkup {
    public string ExpectedAttributeName { get; }
    public NullMarkup(XmlCompositeNodeType type);
    public virtual string get_ExpectedAttributeName();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.MarkupExtensions.NumberValue : XamlCompositeElement {
    private static short NUMBER_ROLE;
    public IXmlToken NumberToken { get; }
    public NumberValue(XmlCompositeNodeType type);
    public sealed virtual IXmlToken get_NumberToken();
    private sealed virtual override TReturn JetBrains.ReSharper.Psi.Xml.Tree.IXmlTreeNode.AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.MarkupExtensions.OfTypeSelectorExpression : SelectorExpression {
    private short QUALIFIER_ROLE;
    private short TARGET_TYPE_ROLE;
    public IReference TypeReference { get; }
    public IType TargetType { get; }
    public ISelectorExpression Qualifier { get; }
    public IStyleTypeSelectorExpression TargetTypeExpression { get; }
    public OfTypeSelectorExpression(XmlCompositeNodeType type);
    public virtual short GetChildRole(TreeElement child);
    public virtual IReference get_TypeReference();
    public virtual IType get_TargetType();
    public sealed virtual ISelectorExpression get_Qualifier();
    public sealed virtual IStyleTypeSelectorExpression get_TargetTypeExpression();
    private sealed virtual override TReturn JetBrains.ReSharper.Psi.Xml.Tree.IXmlTreeNode.AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.MarkupExtensions.OrSelectorExpression : SelectorExpression {
    public IReference TypeReference { get; }
    public IType TargetType { get; }
    public OrSelectorExpression(XmlCompositeNodeType type);
    public virtual IReference get_TypeReference();
    public virtual IType get_TargetType();
    private sealed virtual override TReturn JetBrains.ReSharper.Psi.Xml.Tree.IXmlTreeNode.AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.MarkupExtensions.PropertyEqualsSelectorExpression : SelectorExpression {
    private short QUALIFIER_ROLE;
    private short LBRACKET_ROLE;
    private short PROPERTY_ROLE;
    private short EQ_ROLE;
    private short VALUE_ROLE;
    private short RBRACKET_ROLE;
    public ISelectorExpression Qualifier { get; }
    public IXamlToken LBracket { get; }
    public IPropertyExpression Property { get; }
    public IXamlToken Eq { get; }
    public IXamlToken Value { get; }
    public IXamlToken RBracket { get; }
    public IType PropertyType { get; }
    public IReference TypeReference { get; }
    public IType TargetType { get; }
    public PropertyEqualsSelectorExpression(XmlCompositeNodeType type);
    public virtual short GetChildRole(TreeElement child);
    protected virtual ReferenceCollection CreateFirstClassReferences();
    public sealed virtual ISelectorExpression get_Qualifier();
    public sealed virtual IXamlToken get_LBracket();
    public sealed virtual IPropertyExpression get_Property();
    public sealed virtual IXamlToken get_Eq();
    public sealed virtual IXamlToken get_Value();
    public sealed virtual IXamlToken get_RBracket();
    public sealed virtual IType get_PropertyType();
    public virtual IReference get_TypeReference();
    public virtual IType get_TargetType();
    private sealed virtual override TReturn JetBrains.ReSharper.Psi.Xml.Tree.IXmlTreeNode.AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.MarkupExtensions.PropertyExpression : QualifierExpression {
    private static short PROPERTY_ROLE;
    private static short DOT_ROLE;
    private static short QUALIFIER_ROLE;
    public IQualifierExpression Qualifier { get; }
    public IXamlIdentifier Property { get; }
    public IXmlToken Dot { get; }
    public IReference PropertyReference { get; }
    public PropertyExpression(XmlCompositeNodeType type);
    public virtual short GetChildRole(TreeElement child);
    public sealed virtual IQualifierExpression get_Qualifier();
    public sealed virtual IXamlIdentifier get_Property();
    public sealed virtual IXmlToken get_Dot();
    public virtual IReference get_PropertyReference();
    public virtual ReferenceCollection CreateCustomReferences();
    public virtual IExpressionType GetExpressionType();
    private sealed virtual override TReturn JetBrains.ReSharper.Psi.Xml.Tree.IXmlTreeNode.AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.MarkupExtensions.PseudoClassSelectorArgumentsExpression : XamlCompositeElement {
    private short LPARENTH_ROLE;
    private short RPARENTH_ROLE;
    private short ARGUMENT_ROLE;
    public IXamlToken LParenth { get; }
    public IXamlToken RParenth { get; }
    public ISelectorExpression Argument { get; }
    public PseudoClassSelectorArgumentsExpression(XmlCompositeNodeType type);
    public virtual short GetChildRole(TreeElement child);
    public sealed virtual IXamlToken get_LParenth();
    public sealed virtual IXamlToken get_RParenth();
    public sealed virtual ISelectorExpression get_Argument();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.MarkupExtensions.PseudoClassSelectorExpression : SelectorExpression {
    private short QUALIFIER_ROLE;
    private short COLON_ROLE;
    private short NAME_ROLE;
    private short ARGUMENTS_ROLE;
    public IXamlToken Colon { get; }
    public IXamlIdentifier Name { get; }
    public ISelectorExpression Qualifier { get; }
    public IPseudoClassSelectorArgumentsExpression Arguments { get; }
    public IReference TypeReference { get; }
    public IType TargetType { get; }
    public PseudoClassSelectorExpression(XmlCompositeNodeType type);
    public virtual short GetChildRole(TreeElement child);
    public sealed virtual IXamlToken get_Colon();
    public sealed virtual IXamlIdentifier get_Name();
    public sealed virtual ISelectorExpression get_Qualifier();
    public sealed virtual IPseudoClassSelectorArgumentsExpression get_Arguments();
    protected virtual ReferenceCollection CreateFirstClassReferences();
    public virtual IReference get_TypeReference();
    public virtual IType get_TargetType();
    private sealed virtual override TReturn JetBrains.ReSharper.Psi.Xml.Tree.IXmlTreeNode.AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
}
internal abstract class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.MarkupExtensions.QualifierExpression : XamlCompositeElement {
    public bool Resolved { get; }
    public IReference PropertyReference { get; }
    public ConstantValue ConstantValue { get; }
    protected QualifierExpression(XmlCompositeNodeType type);
    public virtual ISymbolTable GetSymbolTable(SymbolTableMode mode);
    public virtual QualifierKind GetKind();
    public sealed virtual bool get_Resolved();
    public abstract virtual IReference get_PropertyReference();
    public virtual IType Type();
    public virtual IExpressionType GetExpressionType();
    public sealed virtual IType GetImplicitlyConvertedTo();
    public sealed virtual ExpressionAccessType GetAccessType();
    public sealed virtual bool IsConstantValue();
    public sealed virtual ConstantValue get_ConstantValue();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.MarkupExtensions.QuotedValue : XamlCompositeElement {
    private static short LQUOTE_ROLE;
    private static short RQUOTE_ROLE;
    private static short VALUE_ROLE;
    public IMarkupAttributeValue Value { get; }
    public IXmlToken LQuote { get; }
    public IXmlToken RQuote { get; }
    public QuotedValue(XmlCompositeNodeType type);
    public virtual short GetChildRole(TreeElement child);
    public sealed virtual IMarkupAttributeValue get_Value();
    public sealed virtual IXmlToken get_LQuote();
    public sealed virtual IXmlToken get_RQuote();
    private sealed virtual override TReturn JetBrains.ReSharper.Psi.Xml.Tree.IXmlTreeNode.AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.MarkupExtensions.RelativeSourceExpression : QualifierExpression {
    public static short NAME_ROLE;
    public static short PARAMETERS_ROLE;
    public IXamlToken Name { get; }
    public IRelativeSourceParametersExpression Parameters { get; }
    public IType AncestorType { get; }
    public int AncestorLevel { get; }
    public Nullable`1<RelativeSourceMode> Mode { get; }
    public IReference PropertyReference { get; }
    public RelativeSourceExpression(XmlCompositeNodeType type);
    public virtual short GetChildRole(TreeElement child);
    public sealed virtual IXamlToken get_Name();
    public sealed virtual IRelativeSourceParametersExpression get_Parameters();
    public sealed virtual IType get_AncestorType();
    public sealed virtual int get_AncestorLevel();
    public sealed virtual Nullable`1<RelativeSourceMode> get_Mode();
    public virtual IReference get_PropertyReference();
    protected virtual ReferenceCollection CreateFirstClassReferences();
    public virtual ISymbolTable GetSymbolTable(SymbolTableMode mode);
    private sealed virtual override TReturn JetBrains.ReSharper.Psi.Xml.Tree.IXmlTreeNode.AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.MarkupExtensions.RelativeSourceMarkup : Markup {
    public RelativeSourceMode Mode { get; }
    public int AncestorLevel { get; }
    public ITypeUsage AncestorType { get; }
    public RelativeSourceMarkup(XmlCompositeNodeType type);
    public sealed virtual RelativeSourceMode get_Mode();
    public sealed virtual int get_AncestorLevel();
    public sealed virtual ITypeUsage get_AncestorType();
    public virtual ReferenceCollection CreateIdentifierValueReferences(ITreeNode owner, IXmlToken identifier, TreeTextRange rangeWithin);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.MarkupExtensions.RelativeSourceParameters : XamlCompositeElement {
    public static short RBRACKET_ROLE;
    public static short PARENT_TYPE_ROLE;
    public static short SEMICOLON_ROLE;
    public static short PARENT_INDEX_ROLE;
    public static short LBRACKET_ROLE;
    public ITypeExpression ParentType { get; }
    public IMarkupNumberConstant ParentIndex { get; }
    public TreeNodeCollection`1<ITypeExpression> ParentTypes { get; }
    public TreeNodeCollection`1<IMarkupNumberConstant> ParentIndices { get; }
    public RelativeSourceParameters(XmlCompositeNodeType type);
    public virtual short GetChildRole(TreeElement child);
    public sealed virtual ITypeExpression get_ParentType();
    public sealed virtual IMarkupNumberConstant get_ParentIndex();
    public sealed virtual TreeNodeCollection`1<ITypeExpression> get_ParentTypes();
    public sealed virtual TreeNodeCollection`1<IMarkupNumberConstant> get_ParentIndices();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.MarkupExtensions.ResourceMarkup : KeywordMarkup {
    public string ExpectedAttributeName { get; }
    public ITreeNode ReferenceName { get; }
    public IResourceReference ResourceReference { get; }
    public bool IsStaticResource { get; }
    public bool IsDynamicResource { get; }
    public bool IsThemeResource { get; }
    public ResourceMarkup(XmlCompositeNodeType type);
    public virtual string get_ExpectedAttributeName();
    public virtual ReferenceCollection CreateIdentifierValueReferences(ITreeNode owner, IXmlToken identifier, TreeTextRange rangeWithin);
    public sealed virtual ITreeNode get_ReferenceName();
    public sealed virtual IResourceReference get_ResourceReference();
    public sealed virtual bool get_IsStaticResource();
    public sealed virtual bool get_IsDynamicResource();
    public sealed virtual bool get_IsThemeResource();
    private sealed virtual override TReturn JetBrains.ReSharper.Psi.Xml.Tree.IXmlTreeNode.AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
}
internal abstract class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.MarkupExtensions.SelectorExpression : XamlCompositeElement {
    public IReference TypeReference { get; }
    public IType TargetType { get; }
    protected SelectorExpression(XmlCompositeNodeType type);
    public abstract virtual IReference get_TypeReference();
    public abstract virtual IType get_TargetType();
    private sealed virtual override TReturn JetBrains.ReSharper.Psi.Xml.Tree.IXmlTreeNode.AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.MarkupExtensions.SourceTraversalValue : QualifierExpression {
    private static short QUALIFIER_ROLE;
    private static short SLASH_ROLE;
    public IQualifierExpression Qualifier { get; }
    public IXmlToken Slash { get; }
    public IReference PropertyReference { get; }
    public SourceTraversalValue(XmlCompositeNodeType type);
    public virtual short GetChildRole(TreeElement child);
    public virtual IType Type();
    public sealed virtual IQualifierExpression get_Qualifier();
    public sealed virtual IXmlToken get_Slash();
    public virtual IReference get_PropertyReference();
    private sealed virtual override TReturn JetBrains.ReSharper.Psi.Xml.Tree.IXmlTreeNode.AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.MarkupExtensions.StaticExpression : XamlCompositeElement {
    private static short QUALIFIER_ROLE;
    private static short DOT_ROLE;
    private static short MEMBER_ROLE;
    public ITypeExpressionBase Qualifier { get; }
    public IXamlIdentifier MemberName { get; }
    public IXmlToken Dot { get; }
    public IReference TypeReference { get; }
    public IReference ContainingTypeReference { get; }
    public ITypeMemberReference MemberReference { get; }
    public StaticExpression(XmlCompositeNodeType type);
    public virtual short GetChildRole(TreeElement child);
    public sealed virtual ITypeExpressionBase get_Qualifier();
    public sealed virtual IXamlIdentifier get_MemberName();
    public sealed virtual IXmlToken get_Dot();
    public sealed virtual IReference get_TypeReference();
    public sealed virtual IReference get_ContainingTypeReference();
    public sealed virtual ITypeMemberReference get_MemberReference();
    protected virtual ReferenceCollection CreateFirstClassReferences();
    private sealed virtual override TReturn JetBrains.ReSharper.Psi.Xml.Tree.IXmlTreeNode.AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.MarkupExtensions.StaticMarkup : KeywordMarkup {
    public string MemberName { get; }
    public string ExpectedAttributeName { get; }
    public ITypeMemberReference MemberReference { get; }
    public IReference ContainingTypeReference { get; }
    public StaticMarkup(XmlCompositeNodeType type);
    public sealed virtual string get_MemberName();
    public virtual string get_ExpectedAttributeName();
    [CanBeNullAttribute]
private IStaticExpression GetStaticExpression();
    public sealed virtual ITypeMemberReference get_MemberReference();
    public sealed virtual IReference get_ContainingTypeReference();
    protected virtual ReferenceCollection CreateFirstClassReferences();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.MarkupExtensions.StreamExpression : QualifierExpression {
    private static short QUALIFIER_ROLE;
    public IQualifierExpression Qualifier { get; }
    public IReference PropertyReference { get; }
    public StreamExpression(XmlCompositeNodeType type);
    public virtual short GetChildRole(TreeElement child);
    public sealed virtual IQualifierExpression get_Qualifier();
    public virtual IType Type();
    [CanBeNullAttribute]
private IType TryGetGenericElement(IType type, IType targetGenericType);
    public virtual IReference get_PropertyReference();
    private sealed virtual override TReturn JetBrains.ReSharper.Psi.Xml.Tree.IXmlTreeNode.AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.MarkupExtensions.StringValue : XamlCompositeElement {
    private static short STRING_ROLE;
    private static short ERROR_STRING_ROLE;
    public IXmlToken StringToken { get; }
    public TreeTextRange UnquotedRange { get; }
    public StringValue(XmlCompositeNodeType type);
    public virtual short GetChildRole(TreeElement child);
    public sealed virtual IXmlToken get_StringToken();
    public sealed virtual TreeTextRange get_UnquotedRange();
    private sealed virtual override TReturn JetBrains.ReSharper.Psi.Xml.Tree.IXmlTreeNode.AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.MarkupExtensions.StyleTypeSelectorExpression : TypeExpression {
    public StyleTypeSelectorExpression(XmlCompositeNodeType type);
    protected virtual bool HasReference();
    private sealed virtual override TReturn JetBrains.ReSharper.Psi.Xml.Tree.IXmlTreeNode.AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.MarkupExtensions.TemplateBindingMarkup : Markup {
    public BindingMode Mode { get; }
    public IPathValue Path { get; }
    public ISourceUsage Source { get; }
    public IElementNameUsage ElementName { get; }
    public IRelativeSourceUsage RelativeSource { get; }
    public ITreeNode FallbackValue { get; }
    public IType DataType { get; }
    private RelativeSourceMode JetBrains.ReSharper.Psi.Xaml.Tree.IRelativeSourceUsage.Mode { get; }
    public int AncestorLevel { get; }
    public ITypeUsage AncestorType { get; }
    public TemplateBindingMarkup(XmlCompositeNodeType type);
    public sealed virtual BindingMode get_Mode();
    public sealed virtual IPathValue get_Path();
    public sealed virtual ISourceUsage get_Source();
    public sealed virtual IElementNameUsage get_ElementName();
    public sealed virtual IRelativeSourceUsage get_RelativeSource();
    public sealed virtual ITreeNode get_FallbackValue();
    public sealed virtual IType get_DataType();
    private sealed virtual override RelativeSourceMode JetBrains.ReSharper.Psi.Xaml.Tree.IRelativeSourceUsage.get_Mode();
    public sealed virtual int get_AncestorLevel();
    public sealed virtual ITypeUsage get_AncestorType();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.MarkupExtensions.TemplateSelectorExpression : SelectorExpression {
    private short QUALIFIER_ROLE;
    private short TEXT_ROLE;
    public IXamlToken Keyword { get; }
    public ISelectorExpression Qualifier { get; }
    public IReference TypeReference { get; }
    public IType TargetType { get; }
    public TemplateSelectorExpression(XmlCompositeNodeType type);
    public virtual short GetChildRole(TreeElement child);
    protected virtual ReferenceCollection CreateFirstClassReferences();
    public IXamlToken get_Keyword();
    public sealed virtual ISelectorExpression get_Qualifier();
    public virtual IReference get_TypeReference();
    public virtual IType get_TargetType();
    private sealed virtual override TReturn JetBrains.ReSharper.Psi.Xml.Tree.IXmlTreeNode.AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.MarkupExtensions.TextValue : XamlCompositeElement {
    private static short TEXT_ROLE;
    public IXmlToken TextToken { get; }
    public TextValue(XmlCompositeNodeType type);
    public virtual short GetChildRole(TreeElement child);
    public sealed virtual IXmlToken get_TextToken();
    private sealed virtual override TReturn JetBrains.ReSharper.Psi.Xml.Tree.IXmlTreeNode.AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.MarkupExtensions.TypeExpression : TypeExpressionBase {
    private static short QUALIFIER_ROLE;
    private static short DOT_OR_COLON_OR_BAR_ROLE;
    private static short TYPE_ROLE;
    private static short TYPE_PARAMETERS_COUNT_ROLE;
    public IQualifierExpression Qualifier { get; }
    public IXamlIdentifier TypeName { get; }
    public IXmlToken DotOrColon { get; }
    public IXmlToken TypeParametersCount { get; }
    public TypeExpression(XmlCompositeNodeType type);
    public virtual short GetChildRole(TreeElement child);
    public sealed virtual IQualifierExpression get_Qualifier();
    public sealed virtual IXamlIdentifier get_TypeName();
    public sealed virtual IXmlToken get_DotOrColon();
    public virtual IXmlToken get_TypeParametersCount();
    protected virtual bool HasReference();
    protected virtual ReferenceCollection CreateFirstClassReferences();
    private sealed virtual override TReturn JetBrains.ReSharper.Psi.Xml.Tree.IXmlTreeNode.AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
}
internal abstract class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.MarkupExtensions.TypeExpressionBase : QualifierExpression {
    private static short TYPE_ARGUMENTS_ROLE;
    private static short RANK_SPECIFIER_ROLE;
    public IReference TypeReference { get; }
    public IReference PropertyReference { get; }
    public ITypeExpressionTypeArguments TypeArguments { get; }
    public TreeNodeCollection`1<ITypeExpressionRankSpecifier> RankSpecifiers { get; }
    public IXmlToken TypeParametersCount { get; }
    protected TypeExpressionBase(XmlCompositeNodeType type);
    public virtual short GetChildRole(TreeElement child);
    private bool DoCreateOdpConstructorReference();
    public sealed virtual IReference get_TypeReference();
    public virtual IReference get_PropertyReference();
    public virtual ReferenceCollection CreateCustomReferences();
    public sealed virtual ITypeExpressionTypeArguments get_TypeArguments();
    public sealed virtual TreeNodeCollection`1<ITypeExpressionRankSpecifier> get_RankSpecifiers();
    public abstract virtual IXmlToken get_TypeParametersCount();
    private sealed virtual override TReturn JetBrains.ReSharper.Psi.Xml.Tree.IXmlTreeNode.AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.MarkupExtensions.TypeExpressionRankSpecifier : XamlCompositeElement {
    private static short LBRACKET_ROLE;
    private static short RBRACKET_ROLE;
    private static short TEXT_ROLE;
    public IXmlToken LBracket { get; }
    public IXmlToken RBracket { get; }
    public IXmlToken Text { get; }
    public TypeExpressionRankSpecifier(XmlCompositeNodeType type);
    public virtual short GetChildRole(TreeElement child);
    public sealed virtual IXmlToken get_LBracket();
    public sealed virtual IXmlToken get_RBracket();
    public IXmlToken get_Text();
    protected virtual ReferenceCollection CreateFirstClassReferences();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.MarkupExtensions.TypeExpressionTypeArguments : XamlCompositeElement {
    private static short LPARENTH_ROLE;
    private static short RPARENTH_ROLE;
    private static short COMMA_ROLE;
    private static short TYPE_ARG_ROLE;
    public IXmlToken LParenth { get; }
    public IXmlToken RParenth { get; }
    public TreeNodeCollection`1<IXmlToken> Commas { get; }
    public IList`1<ITypeExpressionBase> TypeArguments { get; }
    public TypeExpressionTypeArguments(XmlCompositeNodeType type);
    public virtual short GetChildRole(TreeElement child);
    public sealed virtual IXmlToken get_LParenth();
    public sealed virtual IXmlToken get_RParenth();
    public sealed virtual TreeNodeCollection`1<IXmlToken> get_Commas();
    public sealed virtual IList`1<ITypeExpressionBase> get_TypeArguments();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.MarkupExtensions.TypeOrNamespaceQualifier : QualifierExpression {
    private static short QUALIFIER_ROLE;
    private static short DELIM_ROLE;
    private static short NAME_ROLE;
    public IQualifierExpression Qualifier { get; }
    public IXamlIdentifier TypeOrNamespace { get; }
    public IXmlToken DotOrColon { get; }
    public IReference PropertyReference { get; }
    public TypeOrNamespaceQualifier(XmlCompositeNodeType type);
    public virtual short GetChildRole(TreeElement child);
    public sealed virtual IQualifierExpression get_Qualifier();
    public sealed virtual IXamlIdentifier get_TypeOrNamespace();
    public sealed virtual IXmlToken get_DotOrColon();
    public virtual IReference get_PropertyReference();
    protected virtual ReferenceCollection CreateFirstClassReferences();
    public virtual ISymbolTable GetSymbolTable(SymbolTableMode mode);
    private sealed virtual override TReturn JetBrains.ReSharper.Psi.Xml.Tree.IXmlTreeNode.AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.MarkupExtensions.XamlArgument : XamlCompositeElement {
    private static short VALUE_ROLE;
    public IPathValue Value { get; }
    public DeclaredElementInstance`1<IParameter> MatchingParameter { get; }
    public bool IsExtensionInvocationQualifier { get; }
    public IInvocationInfo Invocation { get; }
    public IPsiModule PsiModule { get; }
    public IExpression Expression { get; }
    public XamlArgument(XmlCompositeNodeType type);
    public virtual short GetChildRole(TreeElement child);
    public sealed virtual IPathValue get_Value();
    public sealed virtual DeclaredElementInstance`1<IParameter> get_MatchingParameter();
    public sealed virtual bool get_IsExtensionInvocationQualifier();
    public sealed virtual IInvocationInfo get_Invocation();
    public sealed virtual IExpressionType GetExpressionType();
    public sealed virtual IPsiModule get_PsiModule();
    public sealed virtual DocumentRange GetDocumentRange();
    public sealed virtual IExpression get_Expression();
}
internal static class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.MarkupExtensions.XamlTreeNodeUtil : object {
    internal static void RemoveListItem(CompositeElement list, short elementRole, short separatorRole, ITreeNode element);
    [NotNullAttribute]
internal static TTreeNode AddListItemBefore(CompositeElement list, short elementRole, TokenNodeType separator, TTreeNode element, ITreeNode anchor);
    [NotNullAttribute]
internal static TTreeNode AddListItemAfter(CompositeElement list, short elementRole, TokenNodeType separator, TTreeNode element, ITreeNode anchor);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.MarkupExtensions.XPathValue : XamlCompositeElement {
    public XPathValue(XmlCompositeNodeType type);
    private sealed virtual override TReturn JetBrains.ReSharper.Psi.Xml.Tree.IXmlTreeNode.AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.MarkupExtensions.XReferenceMarkup : Markup {
    public IElementNameReference ElementNameReference { get; }
    public XReferenceMarkup(XmlCompositeNodeType type);
    public sealed virtual IElementNameReference get_ElementNameReference();
    private sealed virtual override TReturn JetBrains.ReSharper.Psi.Xml.Tree.IXmlTreeNode.AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.MarkupExtensions.XTypeMarkup : KeywordMarkup {
    public string ExpectedAttributeName { get; }
    public IReference TypeReference { get; }
    public XTypeMarkup(XmlCompositeNodeType type);
    public virtual string get_ExpectedAttributeName();
    protected virtual ReferenceCollection CreateFirstClassReferences();
    public virtual IReference get_TypeReference();
}
internal abstract class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.ModifierAttribute : KeywordAttribute {
    protected ModifierAttribute(XmlCompositeNodeType type, string expectedAttributeName);
    protected sealed virtual void CreateFirstClassReferencesInternal(IXmlAttributeValue value, IList`1<IReference> result);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.NameAttribute : NameAttributeBase {
    public NameAttribute(XmlCompositeNodeType type);
}
internal abstract class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.NameAttributeBase : PropertyAttribute {
    protected bool IsEventuallyNameAttribute { get; }
    [NotNullAttribute]
public string DeclaredName { get; }
    protected NameAttributeBase(XmlCompositeNodeType type);
    protected virtual bool get_IsEventuallyNameAttribute();
    protected virtual ReferenceCollection CreateFirstClassReferences();
    public virtual ReferenceCollection CreateCustomReferences();
    public virtual string get_DeclaredName();
    public virtual TreeTextRange GetNameRange();
    public virtual void SetName(string newName);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.NameInClassOrResourceAttribute : NameAttributeBase {
    [CompilerGeneratedAttribute]
private IDeclaredElement <JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ICachedTypeMemberDeclaration.CachedDeclaredElement>k__BackingField;
    private IDeclaredElement JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ICachedTypeMemberDeclaration.CachedDeclaredElement { get; private set; }
    protected bool IsEventuallyNameAttribute { get; }
    public IDeclaredElement DeclaredElement { get; }
    private ITypeMember JetBrains.ReSharper.Psi.Tree.ITypeMemberDeclaration.DeclaredElement { get; }
    public bool IsAbstract { get; }
    public bool IsSealed { get; }
    public bool IsVirtual { get; }
    public bool IsOverride { get; }
    public bool IsStatic { get; }
    public bool IsReadonly { get; }
    public bool IsExtern { get; }
    public bool IsUnsafe { get; }
    public bool IsVolatile { get; }
    public bool HasAccessRights { get; }
    public IType Type { get; }
    private IEnumerable`1<IXamlHashableEntity> JetBrains.ReSharper.Psi.Xaml.Impl.Tree.IXamlHashableEntity.Children { get; }
    private bool JetBrains.ReSharper.Psi.Xaml.Impl.Tree.IXamlHashableEntity.IsInternal { get; }
    public NameInClassOrResourceAttribute(XmlCompositeNodeType type);
    [CompilerGeneratedAttribute]
private sealed virtual override IDeclaredElement JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ICachedTypeMemberDeclaration.get_CachedDeclaredElement();
    [CompilerGeneratedAttribute]
private sealed virtual override void JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ICachedTypeMemberDeclaration.set_CachedDeclaredElement(IDeclaredElement value);
    protected virtual bool get_IsEventuallyNameAttribute();
    public sealed virtual IDeclaredElement get_DeclaredElement();
    protected virtual void PreInit();
    public sealed virtual bool CanBeBoundTo(IDeclaredElement element);
    public sealed virtual IEnumerable`1<string> GetPossibleDeclaredNames();
    private IDeclaredElement CreateDeclaredElement();
    public sealed virtual XmlNode GetXMLDoc(bool inherit);
    public sealed virtual bool IsSynthetic();
    public sealed virtual ITypeDeclaration GetContainingTypeDeclaration();
    private sealed virtual override ITypeMember JetBrains.ReSharper.Psi.Tree.ITypeMemberDeclaration.get_DeclaredElement();
    public sealed virtual bool get_IsAbstract();
    public sealed virtual bool get_IsSealed();
    public sealed virtual bool get_IsVirtual();
    public sealed virtual bool get_IsOverride();
    public sealed virtual bool get_IsStatic();
    public sealed virtual bool get_IsReadonly();
    public sealed virtual bool get_IsExtern();
    public sealed virtual bool get_IsUnsafe();
    public sealed virtual bool get_IsVolatile();
    public sealed virtual bool get_HasAccessRights();
    public sealed virtual AccessRights GetAccessRights();
    public sealed virtual void SetAccessRights(AccessRights accessRights);
    public sealed virtual IType get_Type();
    public sealed virtual IHashableEntityInfo[] CalcAllHashes(string parentQualifiedName, String& qualifiedName);
    private sealed virtual override IEnumerable`1<IXamlHashableEntity> JetBrains.ReSharper.Psi.Xaml.Impl.Tree.IXamlHashableEntity.get_Children();
    private sealed virtual override bool JetBrains.ReSharper.Psi.Xaml.Impl.Tree.IXamlHashableEntity.get_IsInternal();
    public sealed virtual Hash CalcHash();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.NameInXPropertyAttribute : NameAttributeBase {
    [CompilerGeneratedAttribute]
private IDeclaredElement <JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ICachedTypeMemberDeclaration.CachedDeclaredElement>k__BackingField;
    private IDeclaredElement JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ICachedTypeMemberDeclaration.CachedDeclaredElement { get; private set; }
    public string DeclaredName { get; }
    protected bool IsEventuallyNameAttribute { get; }
    public IDeclaredElement DeclaredElement { get; }
    private IField JetBrains.ReSharper.Psi.Xaml.Tree.IFieldDeclaration.DeclaredElement { get; }
    private ITypeMember JetBrains.ReSharper.Psi.Tree.ITypeMemberDeclaration.DeclaredElement { get; }
    public bool IsAbstract { get; }
    public bool IsSealed { get; }
    public bool IsVirtual { get; }
    public bool IsOverride { get; }
    public bool IsStatic { get; }
    public bool IsReadonly { get; }
    public bool IsExtern { get; }
    public bool IsUnsafe { get; }
    public bool IsVolatile { get; }
    public bool HasAccessRights { get; }
    public IType Type { get; }
    private IEnumerable`1<IXamlHashableEntity> JetBrains.ReSharper.Psi.Xaml.Impl.Tree.IXamlHashableEntity.Children { get; }
    private bool JetBrains.ReSharper.Psi.Xaml.Impl.Tree.IXamlHashableEntity.IsInternal { get; }
    public NameInXPropertyAttribute(XmlCompositeNodeType type);
    [CompilerGeneratedAttribute]
private sealed virtual override IDeclaredElement JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ICachedTypeMemberDeclaration.get_CachedDeclaredElement();
    [CompilerGeneratedAttribute]
private sealed virtual override void JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ICachedTypeMemberDeclaration.set_CachedDeclaredElement(IDeclaredElement value);
    public virtual string get_DeclaredName();
    public virtual TreeTextRange GetNameRange();
    public virtual void SetName(string newName);
    protected virtual bool get_IsEventuallyNameAttribute();
    public sealed virtual IDeclaredElement get_DeclaredElement();
    protected virtual void PreInit();
    public sealed virtual bool CanBeBoundTo(IDeclaredElement element);
    public sealed virtual IEnumerable`1<string> GetPossibleDeclaredNames();
    private IDeclaredElement CreateDeclaredElement();
    public sealed virtual XmlNode GetXMLDoc(bool inherit);
    public sealed virtual bool IsSynthetic();
    public sealed virtual ITypeDeclaration GetContainingTypeDeclaration();
    private sealed virtual override IField JetBrains.ReSharper.Psi.Xaml.Tree.IFieldDeclaration.get_DeclaredElement();
    private sealed virtual override ITypeMember JetBrains.ReSharper.Psi.Tree.ITypeMemberDeclaration.get_DeclaredElement();
    public sealed virtual bool get_IsAbstract();
    public sealed virtual bool get_IsSealed();
    public sealed virtual bool get_IsVirtual();
    public sealed virtual bool get_IsOverride();
    public sealed virtual bool get_IsStatic();
    public sealed virtual bool get_IsReadonly();
    public sealed virtual bool get_IsExtern();
    public sealed virtual bool get_IsUnsafe();
    public sealed virtual bool get_IsVolatile();
    public sealed virtual bool get_HasAccessRights();
    public sealed virtual AccessRights GetAccessRights();
    public sealed virtual void SetAccessRights(AccessRights accessRights);
    public sealed virtual void SetType(IType type);
    public sealed virtual IType get_Type();
    public sealed virtual IHashableEntityInfo[] CalcAllHashes(string parentQualifiedName, String& qualifiedName);
    private sealed virtual override IEnumerable`1<IXamlHashableEntity> JetBrains.ReSharper.Psi.Xaml.Impl.Tree.IXamlHashableEntity.get_Children();
    private sealed virtual override bool JetBrains.ReSharper.Psi.Xaml.Impl.Tree.IXamlHashableEntity.get_IsInternal();
    public sealed virtual Hash CalcHash();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.NamePropertyElement : XamlPropertyElement {
    public string DeclaredName { get; }
    public NamePropertyElement(XmlCompositeNodeType type);
    public sealed virtual string get_DeclaredName();
    public sealed virtual TreeTextRange GetNameRange();
    public sealed virtual void SetName(string newName);
}
public class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.NamespaceAliasAttribute : XamlAttribute {
    [NotNullAttribute]
internal CachedPsiValue`1<ISymbolTable> CachedTypesTable;
    public string ShortName { get; }
    public bool CaseSensitiveName { get; }
    private string JetBrains.ReSharper.Psi.Xaml.DeclaredElements.IXamlNamespaceAlias.RawValue { get; }
    private bool JetBrains.ReSharper.Psi.Xaml.DeclaredElements.IXamlNamespaceAlias.IsDefault { get; }
    public IPsiModule Module { get; }
    public XamlPlatform Platform { get; }
    public bool IsUsingAlias { get; }
    public bool IsCLRNamespaceAlias { get; }
    public bool IsUrnAlias { get; }
    public string UriNoArguments { get; }
    public string UriArguments { get; }
    public bool CanBeIgnored { get; }
    public PsiLanguageType PresentationLanguage { get; }
    public IXamlNamespaceAlias DeclaredElement { get; }
    private IDeclaredElement JetBrains.ReSharper.Psi.Tree.IDeclaration.DeclaredElement { get; }
    public string DeclaredName { get; }
    public bool IsDefault { get; }
    public NamespaceAliasAttribute(XmlCompositeNodeType type);
    public sealed virtual string get_ShortName();
    public sealed virtual bool get_CaseSensitiveName();
    private sealed virtual override string JetBrains.ReSharper.Psi.Xaml.DeclaredElements.IXamlNamespaceAlias.get_RawValue();
    private sealed virtual override bool JetBrains.ReSharper.Psi.Xaml.DeclaredElements.IXamlNamespaceAlias.get_IsDefault();
    public sealed virtual IPsiModule get_Module();
    public sealed virtual XamlPlatform get_Platform();
    public sealed virtual bool get_IsUsingAlias();
    public sealed virtual bool get_IsCLRNamespaceAlias();
    public sealed virtual bool get_IsUrnAlias();
    public sealed virtual string get_UriNoArguments();
    public sealed virtual string get_UriArguments();
    public sealed virtual bool get_CanBeIgnored();
    public sealed virtual PsiLanguageType get_PresentationLanguage();
    public sealed virtual DeclaredElementType GetElementType();
    public sealed virtual XmlNode GetXMLDescriptionSummary(bool inherit);
    [NotNullAttribute]
public sealed virtual INamespaceAlias GetDeclaration();
    public sealed virtual IList`1<IDeclaration> GetDeclarations();
    public sealed virtual IList`1<IDeclaration> GetDeclarationsIn(IPsiSourceFile sourceFile);
    public sealed virtual IList`1<ReferencedNamespace> GetReferencedNamespaces();
    public sealed virtual IList`1<IPsiModule> GetTargetModules();
    [CanBeNullAttribute]
public sealed virtual INamespace GetNamespace();
    [NotNullAttribute]
private string GetModuleName();
    public sealed virtual IXamlNamespaceAlias get_DeclaredElement();
    private sealed virtual override IDeclaredElement JetBrains.ReSharper.Psi.Tree.IDeclaration.get_DeclaredElement();
    public sealed virtual string get_DeclaredName();
    public sealed virtual TreeTextRange GetNameRange();
    public sealed virtual bool IsSynthetic();
    public sealed virtual void SetName(string name);
    public sealed virtual bool get_IsDefault();
    public sealed virtual XmlNode GetXMLDoc(bool inherit);
    protected virtual ReferenceCollection CreateFirstClassReferences();
    private sealed virtual override HybridCollection`1<IPsiSourceFile> JetBrains.ReSharper.Psi.IDeclaredElement.GetSourceFiles();
    private sealed virtual override bool JetBrains.ReSharper.Psi.IDeclaredElement.HasDeclarationsIn(IPsiSourceFile sourceFile);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.NullElement : KeywordObjectElement {
    public IReference TypeReference { get; }
    public NullElement(XmlCompositeNodeType type);
    public virtual IReference get_TypeReference();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.ObjectDataProviderDeclaration : ResourceDeclaration {
    public IPropertySetter ObjectInstance { get; }
    public IReference ObjectTypeReference { get; }
    public IReference MethodReference { get; }
    public TreeNodeEnumerable`1<IXamlObjectElement> ConstructorParameters { get; }
    public TreeNodeEnumerable`1<IXamlObjectElement> MethodParameters { get; }
    public ObjectDataProviderDeclaration(XmlCompositeNodeType type);
    public sealed virtual IPropertySetter get_ObjectInstance();
    public sealed virtual IReference get_ObjectTypeReference();
    public sealed virtual IReference get_MethodReference();
    public sealed virtual TreeNodeEnumerable`1<IXamlObjectElement> get_ConstructorParameters();
    public sealed virtual TreeNodeEnumerable`1<IXamlObjectElement> get_MethodParameters();
    [CompilerGeneratedAttribute]
private bool <get_MethodReference>b__6_0(IPropertySetter usage);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.ObjectTypeAttribute : PropertyAttribute {
    public IReference TypeReference { get; }
    public ObjectTypeAttribute(XmlCompositeNodeType type);
    public virtual IReference get_TypeReference();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.PropertyAttribute : XamlAttribute {
    private static char TYPE_DELIM;
    public ITypeMemberReference MemberReference { get; }
    public IReference TypeReference { get; }
    public IReference ContainingTypeReference { get; }
    public IPropertyAttributeValue Value { get; }
    public ITreeNode ValueElement { get; }
    public string PropertyName { get; }
    public PropertyAttribute(XmlCompositeNodeType type);
    public sealed virtual ITypeMemberReference get_MemberReference();
    public virtual IReference get_TypeReference();
    public sealed virtual IReference get_ContainingTypeReference();
    public sealed virtual IPropertyAttributeValue get_Value();
    public sealed virtual ITreeNode get_ValueElement();
    public sealed virtual string get_PropertyName();
    protected virtual ReferenceCollection CreateFirstClassReferences();
    public bool IsBindingPathAttribute();
    public bool IsTemplateBindingPathAttribute();
    public static bool IsIgnoredName(string name);
}
public static class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.PropertyAttributeNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null <= null")]
public static IPropertyAttribute GetByAttributeValue(IPropertyAttributeValue value);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null <= null")]
public static IPropertyAttribute GetByMarkup(IMarkup value);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.PropertyAttributeValue : XamlCompositeElement {
    private static short LQUOTE_ROLE;
    private static short RQUOTE_ROLE;
    private static short IDENTIFIER_ROLE;
    private static short MARKUP_ROLE;
    private static short TEXT_ROLE;
    private static short MARKUP_ATTRIBUTE_VALUE_ROLE;
    public IMarkup MarkupExtension { get; }
    public IMarkupAttributeValue MarkupAttributeValue { get; }
    public string UnquotedValue { get; }
    public IXmlToken LQuote { get; }
    public IXmlToken RQuote { get; }
    public IReference TypeReference { get; }
    public IXmlValueToken ValueToken { get; }
    public PropertyAttributeValue(XmlCompositeNodeType type);
    public virtual short GetChildRole(TreeElement child);
    public sealed virtual IXmlToken GetTextToken();
    public virtual TReturn AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
    public sealed virtual IMarkup get_MarkupExtension();
    public sealed virtual IMarkupAttributeValue get_MarkupAttributeValue();
    public sealed virtual TreeNodeCollection`1<IMarkupAttributeValue> GetMarkupAttributeValues();
    public sealed virtual string get_UnquotedValue();
    public sealed virtual IXmlToken get_LQuote();
    public sealed virtual IXmlToken get_RQuote();
    public sealed virtual IReference get_TypeReference();
    public sealed virtual IXmlValueToken get_ValueToken();
    public virtual ReferenceCollection CreateCustomReferences();
    protected ReferenceCollection CreateRoutedEventReferences(IXmlToken token, TreeTextRange rangeWithin);
    private ReferenceCollection CreateNamespaceAliasesReferences();
    [CompilerGeneratedAttribute]
private IReference <CreateCustomReferences>b__25_0(IQualifier qualifier, IXmlToken node, TreeTextRange range, bool root, bool _);
    [CompilerGeneratedAttribute]
private IReference <CreateCustomReferences>b__25_1(IQualifier qualifier, IXmlToken node, TreeTextRange range, bool root, bool _);
    [CompilerGeneratedAttribute]
private IReference <CreateCustomReferences>b__25_2(IQualifier qualifier, IXmlToken node, TreeTextRange range, bool root, bool _);
    [CompilerGeneratedAttribute]
private IReference <CreateCustomReferences>b__25_3(IQualifier qualifier, IXmlToken node, TreeTextRange range, bool root, bool _);
    [CompilerGeneratedAttribute]
private IReference <CreateCustomReferences>b__25_4(IQualifier qualifier, IXmlToken node, TreeTextRange range, bool root, bool _);
    [CompilerGeneratedAttribute]
private IReference <CreateCustomReferences>b__25_5(IQualifier qualifier, IXmlToken node, TreeTextRange range, bool root, bool designTime);
    [CompilerGeneratedAttribute]
private IReference <CreateCustomReferences>b__25_6(IQualifier qualifier, IXmlToken node, TreeTextRange range, bool root, bool _);
    [CompilerGeneratedAttribute]
private IReference <CreateRoutedEventReferences>b__26_0(ITreeNode node, IQualifier q, IXmlToken t, TreeTextRange within, bool _);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.PropertyDeclaration : XamlObjectElementDeclaration`1<IDeclarationNameAttribute> {
    public IReference TypeReference { get; }
    private ITypeMember JetBrains.ReSharper.Psi.Tree.ITypeMemberDeclaration.DeclaredElement { get; }
    public PropertyDeclaration(XmlCompositeNodeType type);
    protected virtual bool CanDeclareElementWith(IDeclarationNameAttribute nameAttribute);
    protected virtual IDeclaredElement CreateDeclaredElement();
    public virtual bool CanBeBoundTo(IDeclaredElement element);
    public void SetType(IType type);
    public virtual void SetName(string newName);
    public virtual TreeTextRange GetNameRange();
    public virtual AccessRights GetAccessRights();
    public virtual IReference get_TypeReference();
    private sealed virtual override ITypeMember JetBrains.ReSharper.Psi.Tree.ITypeMemberDeclaration.get_DeclaredElement();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.BindBackMethodReference : XamlXBindMethodReferenceBase {
    public IList`1<IExpressionType> ParameterTypes { get; }
    public BindBackMethodReference(ITreeNode owner, IQualifier qualifier, IXmlToken token, TreeTextRange rangeWithin);
    protected virtual ISymbolFilter[] GetCompletionFilters();
    protected virtual ISymbolFilter[] GetSmartSymbolFilters();
    public virtual IList`1<IExpressionType> get_ParameterTypes();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.BooleanValueReferenceData : XamlValueReferenceDataBase {
    public BooleanValueReferenceData(ITreeNode element);
    public virtual IDeclaredType GetReferencedEventType();
    public virtual IType GetExpectedType();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.CommandReference : XamlTypeMemberReferenceBase {
    private bool myIgnorable;
    public bool IsQualified { get; }
    public CommandReference(ITreeNode owner, IQualifier qualifier, IXmlToken token, TreeTextRange rangeWithin, bool ignorable);
    public virtual bool get_IsQualified();
    public virtual ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
    public virtual ISymbolTable GetCompletionSymbolTable();
    public virtual Staticness GetStaticness();
    protected virtual ISymbolFilter[] GetCompletionFilters();
    protected virtual ISymbolFilter[] GetSmartSymbolFilters();
    public sealed virtual ISymbolFilter[] GetExpandedCompletionFilters();
    public sealed virtual ISymbolFilter[] GetExpandedSmartSymbolFilters();
    public virtual ResolveResultWithInfo Resolve(ISymbolTable symbolTable, IAccessContext context);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.DefaultNamespaceAliasReference : XamlNamespaceAliasReference {
    public DefaultNamespaceAliasReference(ITreeNode element);
    public DefaultNamespaceAliasReference(ITreeNode element, IXmlToken token);
    public virtual bool IsValid();
    public virtual string GetName();
    public virtual TreeTextRange GetTreeTextRange();
    protected virtual IReference BindToInternal(IDeclaredElement element, ISubstitution substitution);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.DependencyPropertyReference : XamlQualifiableReferenceWithToken {
    private bool myIsSetter;
    public bool IsQualified { get; }
    public bool CanBeAttachedProperty { get; }
    public bool CanBeRegularProperty { get; }
    public bool IsSetter { get; }
    public bool HasMultipleNames { get; }
    public DependencyPropertyReference(ITreeNode owner, IQualifier qualifier, IXmlToken token, TreeTextRange rangeWithin, bool isSetter);
    public virtual bool get_IsQualified();
    public virtual bool get_CanBeAttachedProperty();
    public virtual bool get_CanBeRegularProperty();
    public virtual IQualifier GetQualifier();
    [CanBeNullAttribute]
private IQualifier GetImplicitQualifier();
    [CanBeNullAttribute]
private IPropertySetter GetTargetNameSetter();
    public bool get_IsSetter();
    public virtual Staticness GetStaticness();
    public virtual bool get_HasMultipleNames();
    public virtual HybridCollection`1<string> GetAllNames();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.DependencyPropertyReference/<GetFilters>d__17")]
[NotNullAttribute]
private IEnumerable`1<MultiNameResolveEntry> GetFilters(bool useName);
    public virtual ResolveResultWithInfo Resolve(ISymbolTable symbolTable, IAccessContext context);
    public sealed virtual ResolveResultWithInfo ResolveAsUnqualified();
    protected virtual ISymbolFilter[] GetCompletionFilters();
    protected virtual ISymbolFilter[] GetSmartSymbolFilters();
    public sealed virtual ISymbolFilter[] GetExpandedCompletionFilters();
    public sealed virtual ISymbolFilter[] GetExpandedSmartSymbolFilters();
    public virtual ISymbolTable GetCompletionSymbolTable();
    public virtual ISymbolTable GetSmartCompletionSymbolTable();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.ElementNameReference : XamlReferenceWithTokenBase`1<ITreeNode> {
    public ElementNameReference(ITreeNode owner, IXmlToken token, TreeTextRange rangeWithin);
    public virtual ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
    protected virtual ISymbolFilter[] GetSmartSymbolFilters(Boolean& applyAllFilters);
    protected virtual ISymbolFilter[] GetCompletionFilters();
    public virtual ResolveResultWithInfo ResolveWithoutCache();
}
public static class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.ElementNameReferenceUtil : object {
    public static ISymbolTable GetContextSymbolTable(ITreeNode context);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.GridLengthAutoDeclaredElement : object {
    private IDeclaredType myGridLengthType;
    public string ShortName { get; }
    public bool CaseSensitiveName { get; }
    public PsiLanguageType PresentationLanguage { get; }
    public IPsiModule Module { get; }
    public ISubstitution IdSubstitution { get; }
    public IType Type { get; }
    public GridLengthAutoDeclaredElement(IDeclaredType gridLengthType);
    protected bool Equals(GridLengthAutoDeclaredElement other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual IPsiServices GetPsiServices();
    public sealed virtual IList`1<IDeclaration> GetDeclarations();
    public sealed virtual IList`1<IDeclaration> GetDeclarationsIn(IPsiSourceFile sourceFile);
    public sealed virtual string get_ShortName();
    public sealed virtual bool get_CaseSensitiveName();
    public sealed virtual DeclaredElementType GetElementType();
    public sealed virtual XmlNode GetXMLDoc(bool inherit);
    public sealed virtual XmlNode GetXMLDescriptionSummary(bool inherit);
    public sealed virtual bool IsValid();
    public sealed virtual bool IsSynthetic();
    public sealed virtual PsiLanguageType get_PresentationLanguage();
    public sealed virtual HybridCollection`1<IPsiSourceFile> GetSourceFiles();
    public sealed virtual bool HasDeclarationsIn(IPsiSourceFile sourceFile);
    public sealed virtual IPsiModule get_Module();
    public sealed virtual ISubstitution get_IdSubstitution();
    public sealed virtual ITypeElement GetContainingType();
    public sealed virtual ITypeMember GetContainingTypeMember();
    public sealed virtual IType get_Type();
}
public static class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.GridLengthUtil : object {
    public static ReferenceCollection GetReferences(ITreeNode propertyAttributeValue, IXmlToken token, TreeTextRange rangeWithin);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.ImplicitMarkupAttributeReference : MarkupAttributeReference {
    [NotNullAttribute]
private string myName;
    public ImplicitMarkupAttributeReference(ITreeNode owner, XamlTypeReference qualifier, string name);
    public virtual string GetName();
    public virtual ResolveResultWithInfo Resolve(ISymbolTable symbolTable, IAccessContext context);
    [NotNullAttribute]
private ResolveResultWithInfo ResolveContentProperty(IMarkup markup, ITypeElement containingType);
    private int GetArgumentIndex(IMarkup markup);
}
internal abstract class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.ImplicitNamespaceAliasReference : XamlReferenceWithTokenBase`1<ITreeNode> {
    public bool Resolved { get; }
    protected ImplicitNamespaceAliasReference(ITreeNode element);
    [CanBeNullAttribute]
protected abstract virtual IXamlNamespaceAliasReference GetReference();
    public virtual string GetName();
    public virtual ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
    public virtual ISymbolTable GetCompletionSymbolTable();
    public sealed virtual ISymbolTable GetSymbolTable(SymbolTableMode mode);
    public sealed virtual QualifierKind GetKind();
    public sealed virtual bool get_Resolved();
    public virtual ResolveResultWithInfo ResolveWithoutCache();
    protected virtual IReference BindToInternal(IDeclaredElement element, ISubstitution substitution);
    public sealed virtual IReference BindToUri(string aliasName, string aliasUri);
}
public interface JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.IXamlAssemblyReference {
    [CanBeNullAttribute]
public IPsiModule ResolvedModule { get; }
    public abstract virtual IPsiModule get_ResolvedModule();
}
public interface JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.IXamlNamespaceReference {
    public IXmlToken Token { get; }
    public TreeTextRange RangeWithin { get; }
    public abstract virtual IXmlToken get_Token();
    public abstract virtual TreeTextRange get_RangeWithin();
    public abstract virtual IXamlNamespaceReference BindModuleTo(IPsiModule module);
}
public interface JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.IXamlTemplateStyleSelectorReference {
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.MarkupAttachedPropertyReference : DependencyPropertyReference {
    public bool CanBeRegularProperty { get; }
    public MarkupAttachedPropertyReference(IPropertyExpression owner, IXmlToken token);
    public virtual bool get_CanBeRegularProperty();
    public virtual Staticness GetStaticness();
    public virtual IQualifier GetQualifier();
    public virtual ISymbolTable GetCompletionSymbolTable();
    public ReferenceAccessType GetAccessType();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.MarkupAttributeImplicitNamespaceAliasReference : ImplicitNamespaceAliasReference {
    public MarkupAttributeImplicitNamespaceAliasReference(MarkupAttribute element);
    protected virtual IXamlNamespaceAliasReference GetReference();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.MarkupAttributeImplicitTypeReference : XamlImplicitTypeReference {
    public MarkupAttributeImplicitTypeReference(IMarkupAttribute element, IQualifier qualifier, IXmlToken token, TreeTextRange rangeWithin);
    protected virtual IXamlTypeReference GetReference();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.MarkupAttributeReference : XamlTypeMemberReferenceBase {
    public MarkupAttributeReference(ITreeNode owner, XamlTypeReference qualifier, IXmlToken token);
    private static TreeTextRange GetRangeWithin(ITreeNode token);
    protected virtual ISymbolFilter[] GetCompletionFilters();
    protected virtual ISymbolFilter[] GetSmartSymbolFilters();
    public virtual Staticness GetStaticness();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.MarkupConstantReference : XamlQualifiableReferenceWithToken {
    public MarkupConstantReference(MarkupConstant owner, IQualifier qualifier, IXmlToken token);
    public virtual ISymbolFilter[] GetSymbolFilters();
    protected virtual ISymbolFilter[] GetCompletionFilters();
    protected virtual ISymbolFilter[] GetSmartSymbolFilters();
    private ISymbolFilter[] GetCompletionFilters(bool isSmart);
    public virtual Staticness GetStaticness();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.MarkupIndexerReference : QualifiableReferenceImpl`1<IndexerExpression> {
    public MarkupIndexerReference(IndexerExpression owner);
    public virtual IQualifier GetQualifier();
    private IProperty CreateIndexer(IArrayType type, IType[] argumentTypes);
    private IType[] GetArgumentTypes(Strictness strictness);
    public virtual ISymbolFilter[] GetSymbolFilters();
    public virtual string GetName();
    public virtual IReference BindTo(IDeclaredElement element);
    public virtual IReference BindTo(IDeclaredElement element, ISubstitution substitution);
    public virtual IAccessContext GetAccessContext();
    public virtual TreeTextRange GetTreeTextRange();
    public sealed virtual ITypeElement GetAccessContainingTypeElement();
    public sealed virtual Staticness GetStaticness();
    public sealed virtual QualifierKind GetQualifierKind();
    public sealed virtual ITypeElement GetQualifierTypeElement();
    public sealed virtual IPsiModule GetPsiModule();
    public sealed virtual IPsiSourceFile GetSourceFile();
    public virtual ResolveResultWithInfo Resolve(ISymbolTable symbolTable, IAccessContext context);
    public sealed virtual Refers RefersToDeclaredElement(IDeclaredElement declaredElement);
    public virtual ResolveResultWithInfo GetResolveResult(ISymbolTable symbolTable, string referenceName);
    private ISymbolTable FilterStrict(ISymbolTable table, Strictness strictness);
    private IType GetQualifierType();
    public virtual ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
    [CompilerGeneratedAttribute]
private bool <RefersToDeclaredElement>b__18_0(IDeclaredElement element);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.MarkupPropertyReference : XamlQualifiableReferenceWithToken {
    protected bool AllowedNotResolved { get; }
    public MarkupPropertyReference(ITreeNode owner, IXmlToken token);
    public MarkupPropertyReference(ITreeNode owner, IQualifier qualifier, IXmlToken token);
    public MarkupPropertyReference(ITreeNode owner, MarkupPropertyReferenceQualifier qualifier, IXmlToken token, TreeTextRange rangeWithin);
    public virtual IQualifier GetQualifier();
    [CanBeNullAttribute]
private IQualifierExpression GetAttachedPropertyQualifier();
    [NotNullAttribute]
private MarkupPropertyReferenceQualifier GetPropertyQualifier();
    public virtual ITypeElement GetQualifierTypeElement();
    public ReferenceAccessType GetAccessType();
    public virtual Staticness GetStaticness();
    public virtual ISymbolTable GetCompletionSymbolTable();
    protected virtual ISymbolFilter[] GetCompletionFilters();
    protected virtual ISymbolFilter[] GetSmartSymbolFilters();
    private ISymbolFilter[] GetCompletionFilters(bool isSmart);
    public virtual ISymbolFilter[] GetSymbolFilters();
    public virtual ResolveResultWithInfo Resolve(ISymbolTable symbolTable, IAccessContext context);
    private bool CheckDataContextIsEnumerable(IType& elementType);
    private bool CanResolveByOtherElementDataContext(IType& elementType);
    [CanBeNullAttribute]
public static IType TryGetOtherElementDataContextType(ITreeNode anchor);
    [CanBeNullAttribute]
private ResolveResultWithInfo ResolveInType(IType type);
    protected virtual IReference BindToInternal(IDeclaredElement declaredElement, ISubstitution substitution);
    protected virtual bool get_AllowedNotResolved();
    [CompilerGeneratedAttribute]
private bool <Resolve>b__14_1(IReference reference);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.MarkupPropertyReferenceQualifier : object {
    [NotNullAttribute]
private IQualifier myQualifier;
    [NotNullAttribute]
private ITreeNode myElement;
    public bool Resolved { get; }
    [CanBeNullAttribute]
public DataContextQualifier DataContextQualifier { get; }
    public MarkupPropertyReferenceQualifier(IQualifier qualifier, ITreeNode element);
    public sealed virtual ISymbolTable GetSymbolTable(SymbolTableMode mode);
    public sealed virtual QualifierKind GetKind();
    public sealed virtual bool get_Resolved();
    public IExpressionType GetExpressionType();
    public DataContextQualifier get_DataContextQualifier();
    [CanBeNullAttribute]
public IReference TryGetQualifierReference();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.ModifierReference : XamlReferenceWithTokenBase`1<ITreeNode> {
    public ModifierReference(IModifiersAttribute owner, IXmlToken token, TreeTextRange rangeWithin);
    public virtual ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
    public virtual ResolveResultWithInfo ResolveWithoutCache();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.NestedQualifierTypeReference : NestedTypeReference {
    public bool Resolved { get; }
    public NestedQualifierTypeReference(ITreeNode owner, IQualifier qualifier, IXmlToken token, TreeTextRange rangeWithin);
    public sealed virtual ISymbolTable GetSymbolTable(SymbolTableMode mode);
    public sealed virtual QualifierKind GetKind();
    public sealed virtual bool get_Resolved();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.NestedTypeReference : XamlQualifiableReferenceWithToken {
    public bool CanBeMarkupExtensionReference { get; }
    public IList`1<ReferencedNamespace> ContainingNamespaces { get; }
    public NestedTypeReference(INestedTypeExpression owner, ITypeExpressionBase qualifier, IXmlToken token);
    protected NestedTypeReference(ITreeNode owner, IQualifier qualifier, IXmlToken token, TreeTextRange rangeWithin);
    public sealed virtual bool get_CanBeMarkupExtensionReference();
    public sealed virtual IList`1<ReferencedNamespace> get_ContainingNamespaces();
    public virtual Staticness GetStaticness();
    public virtual ITypeElement GetQualifierTypeElement();
    public virtual ISymbolFilter[] GetSymbolFilters();
    [NotNullAttribute]
[PureAttribute]
private ISymbolFilter GetTypeParametersCountFilter();
    protected virtual ISymbolFilter[] GetCompletionFilters();
    protected virtual ISymbolFilter[] GetSmartSymbolFilters();
    protected virtual IReference BindToInternal(IDeclaredElement declaredElement, ISubstitution substitution);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.PropertyImplicitNamespaceAliasReference : ImplicitNamespaceAliasReference {
    public PropertyImplicitNamespaceAliasReference(ITreeNode element);
    protected virtual IXamlNamespaceAliasReference GetReference();
    [CanBeNullAttribute]
public static IXamlNamespaceAliasReference GetReference(ITreeNode treeNode);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.PropertyImplicitTypeReference : XamlImplicitTypeReference {
    public PropertyImplicitTypeReference(ITreeNode element, IQualifier qualifier, IXmlToken token, TreeTextRange rangeWithin);
    protected virtual IXamlTypeReference GetReference();
    [CanBeNullAttribute]
public static IXamlTypeReference GetReference(ITreeNode treeNode);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.RelativeSourceModeReference : XamlReferenceWithTokenBase`1<ITreeNode> {
    public bool CaseSensitive { get; }
    public RelativeSourceModeReference(ITreeNode owner, IXmlToken token, TreeTextRange rangeWithin);
    public virtual bool get_CaseSensitive();
    public virtual ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
    protected virtual ISymbolFilter[] GetSmartSymbolFilters(Boolean& applyAllFilters);
    protected virtual ISymbolFilter[] GetCompletionFilters();
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.RelativeSourceModeUtil : object {
    [ExtensionAttribute]
public static IType GetRelativeSourceModeType(ITreeNode ctx);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.RelativeSourceReference : XamlReferenceWithTokenBase`1<IRelativeSourceExpression> {
    public RelativeSourceReference(IRelativeSourceExpression owner, IXmlToken token);
    public virtual ISymbolTable GetCompletionSymbolTable();
    public virtual ISymbolTable GetSmartCompletionSymbolTable();
    public virtual ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
    public virtual ResolveResultWithInfo Resolve();
    public virtual Staticness GetStaticness();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.RoutedEventReference : XamlQualifiableReferenceWithToken {
    public bool IsQualified { get; }
    public bool HasMultipleNames { get; }
    public RoutedEventReference(ITreeNode owner, IQualifier qualifier, IXmlToken token, TreeTextRange rangeWithin);
    public virtual bool get_IsQualified();
    public virtual IQualifier GetQualifier();
    [CanBeNullAttribute]
private IQualifier GetImplicitQualifier();
    [CanBeNullAttribute]
private IPropertySetter GetTargetNameSetter();
    public virtual Staticness GetStaticness();
    public virtual bool get_HasMultipleNames();
    public virtual HybridCollection`1<string> GetAllNames();
    public virtual ISymbolFilter[] GetSymbolFilters();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.RoutedEventReference/<GetFilters>d__11")]
[NotNullAttribute]
private IEnumerable`1<MultiNameResolveEntry> GetFilters(bool useName);
    public virtual ResolveResultWithInfo Resolve(ISymbolTable symbolTable, IAccessContext context);
    public sealed virtual ResolveResultWithInfo ResolveAsUnqualified();
    public virtual ISymbolTable GetCompletionSymbolTable();
    public virtual ISymbolTable GetSmartCompletionSymbolTable();
    public sealed virtual ISymbolFilter[] GetExpandedCompletionFilters();
    public sealed virtual ISymbolFilter[] GetExpandedSmartSymbolFilters();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.StaticMemberReference : XamlTypeMemberReferenceBase {
    public StaticMemberReference(IStaticExpression owner, IXmlToken token);
    public virtual Staticness GetStaticness();
    public virtual ITypeElement GetQualifierTypeElement();
    public virtual ISymbolFilter[] GetSymbolFilters();
    protected virtual ISymbolFilter[] GetCompletionFilters();
    protected virtual ISymbolFilter[] GetSmartSymbolFilters();
    [NotNullAttribute]
private ISymbolFilter[] GetCompletionFilters(bool isSmart);
    public virtual ISymbolTable GetCompletionSymbolTable();
    public sealed virtual ISymbolFilter[] GetExpandedCompletionFilters();
    public sealed virtual ISymbolFilter[] GetExpandedSmartSymbolFilters();
    public sealed virtual IType[] GetExpectedTypes();
    public virtual ISymbolTable GetSmartCompletionSymbolTable();
    private IReference BindWithoutQualifier(IDeclaredElement declaredElement);
    protected virtual IReference BindToInternal(IDeclaredElement declaredElement, ISubstitution substitution);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.TargetNameReference : ElementNameReference {
    public bool Resolved { get; }
    public TargetNameReference(ITreeNode owner, IXmlToken token, TreeTextRange rangeWithin);
    public sealed virtual ISymbolTable GetSymbolTable(SymbolTableMode mode);
    public sealed virtual QualifierKind GetKind();
    public sealed virtual bool get_Resolved();
    public virtual ResolveResultWithInfo ResolveWithoutCache();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.TypeExpressionTypeReference : XamlTypeReference {
    public TypeExpressionTypeReference(ITypeExpressionBase element, IQualifier qualifier, IXmlToken token, XamlTypeReferenceType typeReferenceType);
    protected virtual IList`1<IType> GetTypeArguments();
    protected virtual void AppendTypeParameterFilters(List`1<ISymbolFilter> filters);
    protected virtual IReference BindToInternal(IDeclaredElement declaredElement, ISubstitution substitution);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.TypeOrNamespaceReference : XamlQualifiableReferenceWithToken {
    public bool CanBeMarkupExtensionReference { get; }
    public IList`1<ReferencedNamespace> ContainingNamespaces { get; }
    protected SymbolTableMode SymbolTableMode { get; }
    public TypeOrNamespaceReference(ITypeOrNamespaceExpression owner, IQualifierExpression qualifier, IXmlToken token);
    private static IQualifier FixQualifier(ITypeOrNamespaceExpression owner, IQualifierExpression qualifier);
    public sealed virtual bool get_CanBeMarkupExtensionReference();
    public sealed virtual IList`1<ReferencedNamespace> get_ContainingNamespaces();
    public virtual Staticness GetStaticness();
    protected virtual ISymbolFilter[] GetSmartSymbolFilters();
    public virtual ITypeElement GetQualifierTypeElement();
    protected virtual ISymbolFilter[] GetCompletionFilters();
    protected virtual SymbolTableMode get_SymbolTableMode();
    public virtual ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
    public virtual ISymbolTable GetCompletionSymbolTable();
    protected virtual IReference BindToInternal(IDeclaredElement declaredElement, ISubstitution substitution);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.WinRTFolderOrAssemblyReference : XamlFolderOrAssemblyReferenceBase {
    protected bool CanReferenceCurrentProject { get; }
    public WinRTFolderOrAssemblyReference(ITreeNode owner, IQualifier qualifier, IXmlToken token, TreeTextRange rangeWithin, bool useRootFolder, bool isDesignTime);
    protected virtual bool get_CanReferenceCurrentProject();
    public virtual ResolveResultWithInfo Resolve(ISymbolTable symbolTable, IAccessContext context);
    protected virtual AssemblyNameInfo GetAssemblyName();
    protected virtual IReference BindToInternal(IDeclaredElement declaredElement, ISubstitution substitution);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.XamlAssemblyReference : XamlReferenceWithTokenBase`1<ITreeNode> {
    public bool Resolved { get; }
    public IPsiModule ResolvedModule { get; }
    public XamlAssemblyReference(ITreeNode owner, IXmlToken token, TreeTextRange rangeWithin);
    public virtual ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
    protected virtual ISymbolFilter[] GetCompletionFilters();
    public sealed virtual ISymbolTable GetSymbolTable(SymbolTableMode mode);
    public sealed virtual QualifierKind GetKind();
    public sealed virtual bool get_Resolved();
    protected virtual IReference BindToInternal(IDeclaredElement element, ISubstitution substitution);
    public sealed virtual IPsiModule get_ResolvedModule();
    public virtual ResolveResultWithInfo Resolve(ISymbolTable symbolTable, IAccessContext context);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.XamlAuthorityReference : XamlReferenceWithTokenBase`1<ITreeNode> {
    [CanBeNullAttribute]
private string myName;
    [NotNullAttribute]
private static String[] NAMES;
    public bool Resolved { get; }
    public XamlAuthorityReference(ITreeNode element, IXmlToken token, TreeTextRange rangeWithin);
    private static XamlAuthorityReference();
    public virtual string GetName();
    public sealed virtual VirtualFileSystemPath GetQualifierPath();
    public sealed virtual ISymbolTable GetSymbolTable(SymbolTableMode mode);
    public sealed virtual QualifierKind GetKind();
    public sealed virtual bool get_Resolved();
    public virtual ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
    public virtual ResolveResultWithInfo ResolveWithoutCache();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.XamlComputerReference : XamlPathReferenceBase {
    public bool Resolved { get; }
    public XamlComputerReference(ITreeNode owner, IQualifier qualifier, IXmlToken token, TreeTextRange rangeWithin, bool useRootFolder);
    public sealed virtual ISymbolTable GetSymbolTable(SymbolTableMode mode);
    public sealed virtual QualifierKind GetKind();
    public sealed virtual bool get_Resolved();
    public virtual ResolveResultWithInfo Resolve(ISymbolTable symbolTable, IAccessContext context);
}
public abstract class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.XamlConstructorReferenceBase`1 : XamlReferenceWithTokenBase`1<T> {
    public IReference TypeReference { get; }
    public IList`1<IExpressionType> ParameterTypes { get; }
    protected XamlConstructorReferenceBase`1(T owner, IXmlToken token, TreeTextRange rangeWithin);
    public virtual string GetName();
    public abstract virtual IReference get_TypeReference();
    public abstract virtual IList`1<IExpressionType> get_ParameterTypes();
    protected virtual ITypeElement GetTypeElement();
    private ISubstitution GetSubstitution(ITypeElement typeElement);
    public sealed virtual ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
    protected virtual IReference BindToInternal(IDeclaredElement declaredElement, ISubstitution substitution);
    public virtual ResolveResultWithInfo ResolveWithoutCache();
    protected virtual ISymbolFilter[] GetSmartSymbolFilters(Boolean& applyAllFilters);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.XamlContentPropertyReference : XamlReferenceWithTokenBase`1<IXamlObjectElement> {
    [NotNullAttribute]
private string myPropertyName;
    [NotNullAttribute]
private IType myParentContainerType;
    public static ISymbolFilter[] ContentPropertyFilters;
    public XamlContentPropertyReference(IXamlObjectElement owner, IType parentContainerType, string propertyName, XamlTypeReference reference);
    private static XamlContentPropertyReference();
    public virtual string GetName();
    public virtual bool IsValid();
    public virtual ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
    public virtual ISymbolFilter[] GetSymbolFilters();
    public virtual ResolveResultWithInfo ResolveWithoutCache();
    protected virtual IReference BindToInternal(IDeclaredElement element, ISubstitution substitution);
    public virtual Staticness GetStaticness();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.XamlDriveReference : XamlFolderReference {
    public bool CanBeMappedOrIgnored { get; }
    public XamlDriveReference(ITreeNode owner, IXmlToken token, TreeTextRange rangeWithin);
    public virtual bool get_CanBeMappedOrIgnored();
    public virtual ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
    protected virtual ISymbolFilter[] GetSmartSymbolFilters();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.XamlEmbeddedResourceReference : XamlQualifiableReferenceWithToken {
    public XamlEmbeddedResourceReference(IXamlAssemblyReference qualifier, ITreeNode owner, IXmlToken token, TreeTextRange rangeWithin);
    public virtual ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
    protected virtual ISymbolFilter[] GetCompletionFilters();
    public virtual ResolveResultWithInfo Resolve(ISymbolTable symbolTable, IAccessContext context);
    public virtual Staticness GetStaticness();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.XamlFactoryMethodReference : XamlMethodReferenceBase {
    public IReference TypeReference { get; }
    public IList`1<IExpressionType> ParameterTypes { get; }
    public IType ExpectedReturnType { get; }
    public XamlFactoryMethodReference(ITreeNode owner, XamlTypeReference typeReference, IXmlToken token, TreeTextRange rangeWithin);
    public virtual Staticness GetStaticness();
    public virtual IReference get_TypeReference();
    public virtual IList`1<IExpressionType> get_ParameterTypes();
    public sealed virtual IType get_ExpectedReturnType();
    protected virtual ISymbolFilter[] GetSmartSymbolFilters();
    protected virtual IReference BindToInternal(IDeclaredElement declaredElement, ISubstitution substitution);
}
public class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.XamlFieldReference : XamlReferenceWithTokenBase`1<ITreeNode> {
    public XamlFieldReference(ITreeNode owner, IXmlToken token, TreeTextRange rangeWithin);
    public virtual ResolveResultWithInfo ResolveWithoutCache();
    public virtual ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
    protected virtual ISymbolFilter[] GetSmartSymbolFilters(Boolean& applyAllFilters);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.XamlFileReference : XamlPathReferenceBase {
    public bool IsEmptyNameAllowed { get; }
    public bool CanBeMappedOrIgnored { get; }
    public BuildAction ExpectedBuildAction { get; }
    public ProjectFileType ExpectedFileType { get; }
    public ICollection`1<string> ExpectedExtensions { get; }
    public XamlFileReference(ITreeNode owner, IQualifier qualifier, IXmlToken token, TreeTextRange rangeWithin, bool useRootFolder, bool isDesignTime);
    public virtual bool get_IsEmptyNameAllowed();
    public virtual bool get_CanBeMappedOrIgnored();
    public virtual BuildAction get_ExpectedBuildAction();
    protected virtual ISymbolFilter[] GetSmartSymbolFilters();
    public virtual ResolveResultWithInfo Resolve(ISymbolTable symbolTable, IAccessContext context);
    public virtual ProjectFileType get_ExpectedFileType();
    public sealed virtual ICollection`1<string> get_ExpectedExtensions();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.XamlFolderOrAssemblyReference : XamlFolderOrAssemblyReferenceBase {
    private bool myIsDefinitelyAssembly;
    public static string ASSEMBLY_SUFFIX;
    private static Regex ourVersionRegex;
    private static Regex ourPublicKeyRegex;
    [CompilerGeneratedAttribute]
private TreeTextRange <FullNameRange>k__BackingField;
    private TreeTextRange FullNameRange { get; }
    private bool IsAssemblyReference { get; }
    protected bool CanReferenceCurrentProject { get; }
    public XamlFolderOrAssemblyReference(ITreeNode owner, IQualifier qualifier, IXmlToken token, TreeTextRange shortNameRange, TreeTextRange fullNameRange, bool useRootFolder, bool isDesignTime, bool isDefinitelyAssembly);
    private static XamlFolderOrAssemblyReference();
    [CompilerGeneratedAttribute]
private TreeTextRange get_FullNameRange();
    private bool get_IsAssemblyReference();
    public virtual ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
    protected virtual ISymbolFilter[] GetCompletionFilters();
    protected virtual ISymbolFilter[] GetSmartSymbolFilters();
    private ISymbolFilter[] AddAssemblyWithResourcesFilter(ISymbolFilter[] filters);
    protected virtual bool get_CanReferenceCurrentProject();
    protected virtual AssemblyNameInfo GetAssemblyName();
    public virtual ResolveResultWithInfo Resolve(ISymbolTable symbolTable, IAccessContext context);
    [CanBeNullAttribute]
private ResolveResultWithInfo TryResolveToProjectName(AssemblyNameInfo assemblyName);
    protected virtual IReference BindToInternal(IDeclaredElement declaredElement, ISubstitution substitution);
}
internal abstract class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.XamlFolderOrAssemblyReferenceBase : XamlFolderReference {
    protected bool CanReferenceCurrentProject { get; }
    protected XamlFolderOrAssemblyReferenceBase(ITreeNode owner, IQualifier qualifier, IXmlToken token, TreeTextRange rangeWithin, bool useRootFolder, bool isDesignTime);
    protected abstract virtual bool get_CanReferenceCurrentProject();
    public virtual ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
    public virtual VirtualFileSystemPath GetQualifierPath();
    public virtual IModule GetResolvedModule();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.XamlFolderReference : XamlPathReferenceBase {
    public bool CanBeMappedOrIgnored { get; }
    public bool Resolved { get; }
    public XamlFolderReference(ITreeNode owner, IQualifier qualifier, IXmlToken token, TreeTextRange rangeWithin, bool useRootFolder, bool isDesignTime);
    public virtual bool get_CanBeMappedOrIgnored();
    public sealed virtual ISymbolTable GetSymbolTable(SymbolTableMode mode);
    public sealed virtual QualifierKind GetKind();
    public sealed virtual bool get_Resolved();
    protected virtual ISymbolFilter[] GetSmartSymbolFilters();
    public virtual ResolveResultWithInfo Resolve(ISymbolTable symbolTable, IAccessContext context);
    [CanBeNullAttribute]
protected static VirtualFileSystemPath GetCandidatesCommonLogicPath(IList`1<IDeclaredElement> candidates);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.XamlGridLengthValueReferenceData : object {
    private ITreeNode myOwner;
    public XamlGridLengthValueReferenceData(ITreeNode owner);
    public sealed virtual ValueReferenceType GetValueReferenceType();
    public sealed virtual IDeclaredType GetReferencedEventType();
    public sealed virtual IType GetExpectedType();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.XamlImageFileReference : XamlFileReference {
    public bool IsEmptyNameAllowed { get; }
    public BuildAction ExpectedBuildAction { get; }
    public XamlImageFileReference(ITreeNode owner, IQualifier qualifier, IXmlToken token, TreeTextRange rangeWithin, bool useRootFolder);
    public virtual bool get_IsEmptyNameAllowed();
    public virtual ResolveResultWithInfo Resolve(ISymbolTable symbolTable, IAccessContext context);
    public virtual BuildAction get_ExpectedBuildAction();
}
internal abstract class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.XamlImplicitTypeReference : XamlTypeReference {
    public bool CanBeMarkupExtensionReference { get; }
    protected XamlImplicitTypeReference(ITreeNode element, IQualifier qualifier, IXmlToken token, TreeTextRange rangeWithin);
    protected abstract virtual IXamlTypeReference GetReference();
    public virtual TreeTextRange GetTreeTextRange();
    public virtual string GetName();
    public virtual bool get_CanBeMarkupExtensionReference();
    public virtual ISymbolTable GetSymbolTable(SymbolTableMode mode);
    public virtual ISymbolTable GetCompletionSymbolTable();
    public virtual ResolveResultWithInfo Resolve(ISymbolTable symbolTable, IAccessContext context);
    protected virtual IReference BindToInternal(IDeclaredElement declaredElement, ISubstitution substitution);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.XamlLocalEventReference : XamlTypeMemberReferenceBase {
    public XamlLocalEventReference(ITreeNode owner, IQualifier qualifier, IXmlToken token, TreeTextRange rangeWithin);
    public virtual Staticness GetStaticness();
    protected virtual ISymbolFilter[] GetSmartSymbolFilters();
    protected virtual ISymbolFilter[] GetCompletionFilters();
}
internal static class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.XamlLocalFieldsProvider : object {
    [NotNullAttribute]
private static Key`1<CachedPsiValue`1<IList`1<IXamlDeclaration>>> LocalFieldsKey;
    private static XamlLocalFieldsProvider();
    public static IList`1<IXamlDeclaration> GetLocalFields(IXamlTypeDeclaration typeDeclaration);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.XamlMarkupConstructorReference : XamlConstructorReferenceBase`1<IMarkup> {
    public IReference TypeReference { get; }
    public IList`1<IExpressionType> ParameterTypes { get; }
    public XamlMarkupConstructorReference(IMarkup owner, XamlTypeReference typeReference);
    public virtual IReference get_TypeReference();
    public virtual IList`1<IExpressionType> get_ParameterTypes();
    private int CalculateMarkupArgumentsCount();
    public virtual ResolveResultWithInfo ResolveWithoutCache();
    private ResolveResultWithInfo ResolveConstructorCore();
}
internal abstract class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.XamlMethodReferenceBase : XamlQualifiableReferenceWithToken {
    public IReference TypeReference { get; }
    public IList`1<IExpressionType> ParameterTypes { get; }
    protected XamlMethodReferenceBase(ITreeNode owner, IQualifier qualifier, IXmlToken token, TreeTextRange rangeWithin);
    protected virtual ISymbolFilter[] GetCompletionFilters();
    protected virtual ISymbolFilter[] GetSmartSymbolFilters();
    public virtual ISymbolTable GetSmartCompletionSymbolTable();
    protected ISymbolTable BuildMatchingMethodsTable(ISymbolTable symbolTable);
    public virtual ResolveResultWithInfo Resolve(ISymbolTable symbolTable, IAccessContext context);
    public abstract virtual IReference get_TypeReference();
    public abstract virtual IList`1<IExpressionType> get_ParameterTypes();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.XamlNamespaceAliasAssemblyNameReference : XamlReferenceWithTokenBase`1<INamespaceAlias> {
    [CompilerGeneratedAttribute]
private TreeTextRange <FullAssemblyNameRange>k__BackingField;
    private TreeTextRange FullAssemblyNameRange { get; }
    public bool CaseSensitive { get; }
    public XamlNamespaceAliasAssemblyNameReference(INamespaceAlias owner, IXmlToken token, TreeTextRange rangeWithin, TreeTextRange fullAssemblyNameRange);
    [CompilerGeneratedAttribute]
private TreeTextRange get_FullAssemblyNameRange();
    public virtual bool get_CaseSensitive();
    public virtual ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
    private AssemblyNameInfo GetAssemblyName();
    public virtual ResolveResultWithInfo Resolve(ISymbolTable symbolTable, IAccessContext context);
}
public class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.XamlNamespaceAliasReference : XamlReferenceWithDefaultSymbolTable`1<ITreeNode> {
    private bool myIgnorable;
    public bool Resolved { get; }
    public XamlNamespaceAliasReference(ITreeNode element, IXmlToken token, bool ignorable);
    public XamlNamespaceAliasReference(ITreeNode element, IXmlToken token, TreeTextRange rangeWithin, bool ignorable);
    public virtual string GetName();
    public virtual TreeTextRange GetTreeTextRange();
    public virtual ResolveResultWithInfo ResolveWithoutCache();
    public sealed virtual ISymbolTable GetSymbolTable(SymbolTableMode mode);
    public sealed virtual QualifierKind GetKind();
    public sealed virtual bool get_Resolved();
    public virtual ITypeElement GetAccessContainingTypeElement();
    public virtual Staticness GetStaticness();
    public virtual QualifierKind GetQualifierKind();
    protected virtual ISymbolFilter[] GetSmartSymbolFilters(Boolean& applyAllFilters);
    protected virtual ISymbolFilter[] GetCompletionFilters();
    protected virtual IReference BindToInternal(IDeclaredElement declaredElement, ISubstitution substitution);
    public sealed virtual IReference BindToUri(string aliasName, string aliasUri);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.XamlNamespaceReference : XamlQualifiableReferenceWithToken {
    private AssemblyNameRanges myModuleRange;
    public bool Resolved { get; }
    public XamlNamespaceReference(ITreeNode owner, IXamlNamespaceReference qualifier, IXmlToken token, TreeTextRange rangeWithin, AssemblyNameRanges moduleRange);
    public sealed virtual ISymbolTable GetSymbolTable(SymbolTableMode mode);
    public virtual ResolveResultWithInfo Resolve(ISymbolTable symbolTable, IAccessContext context);
    public sealed virtual QualifierKind GetKind();
    public sealed virtual bool get_Resolved();
    public virtual ITypeElement GetQualifierTypeElement();
    public virtual Staticness GetStaticness();
    protected virtual IReference BindToInternal(IDeclaredElement declaredElement, ISubstitution substitution);
    public sealed virtual IXamlNamespaceReference BindModuleTo(IPsiModule module);
    protected virtual ISymbolFilter[] GetSmartSymbolFilters();
    protected virtual ISymbolFilter[] GetCompletionFilters();
    private sealed virtual override IXmlToken JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.IXamlNamespaceReference.get_Token();
}
public static class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.XamlNamespaceReferencesUtil : object {
    public static IReadOnlyList`1<IReference> CreateReferences(TOwner owner, IXmlToken token, string text, int offset);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.XamlObjectElementConstructorReference : XamlConstructorReferenceBase`1<IXamlObjectElement> {
    public IReference TypeReference { get; }
    public IList`1<IExpressionType> ParameterTypes { get; }
    public XamlObjectElementConstructorReference(IXamlObjectElement owner, XamlTypeReference typeReference);
    public virtual IReference get_TypeReference();
    public virtual IList`1<IExpressionType> get_ParameterTypes();
    public virtual ResolveResultWithInfo ResolveWithoutCache();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.XamlObjectElementValueReferenceData : XamlValueReferenceDataBase {
    public XamlObjectElementValueReferenceData(IXamlObjectElement objectElement);
    public virtual IDeclaredType GetReferencedEventType();
    public virtual IType GetExpectedType();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.XamlOdpConstructorReference : XamlConstructorReferenceBase`1<ITreeNode> {
    public IReference TypeReference { get; }
    public IList`1<IExpressionType> ParameterTypes { get; }
    public XamlOdpConstructorReference(ITreeNode owner, IXmlToken token, TreeTextRange rangeWithin);
    private IObjectDataProviderDeclaration GetObjectDataProvider();
    public virtual IReference get_TypeReference();
    public virtual ResolveResultWithInfo ResolveWithoutCache();
    public virtual IList`1<IExpressionType> get_ParameterTypes();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.XamlOdpMethodReference : XamlMethodReferenceBase {
    public IReference TypeReference { get; }
    public IList`1<IExpressionType> ParameterTypes { get; }
    public XamlOdpMethodReference(ITreeNode owner, IXmlToken token, TreeTextRange rangeWithin);
    private IObjectDataProviderDeclaration GetObjectDataProvider();
    public virtual IQualifier GetQualifier();
    public virtual Staticness GetStaticness();
    public virtual ResolveResultWithInfo Resolve(ISymbolTable symbolTable, IAccessContext context);
    public virtual IReference get_TypeReference();
    public virtual IList`1<IExpressionType> get_ParameterTypes();
    protected virtual IReference BindToInternal(IDeclaredElement declaredElement, ISubstitution substitution);
}
internal abstract class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.XamlPathReferenceBase : XamlQualifiableReferenceWithToken {
    [CompilerGeneratedAttribute]
private bool <UseRootFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDesignTime>k__BackingField;
    public bool IsQualified { get; }
    public bool CanBeMappedOrIgnored { get; }
    public bool IsEmptyNameAllowed { get; }
    public bool UseRootFolder { get; }
    public bool CanBeWinRtQualified { get; }
    public bool IsDesignTime { get; }
    protected XamlPathReferenceBase(ITreeNode owner, IQualifier qualifier, IXmlToken token, TreeTextRange rangeWithin, bool useRootFolder, bool isDesignTime);
    public virtual bool get_IsQualified();
    public virtual bool get_CanBeMappedOrIgnored();
    public virtual bool get_IsEmptyNameAllowed();
    [CompilerGeneratedAttribute]
public virtual bool get_UseRootFolder();
    public virtual bool get_CanBeWinRtQualified();
    [CompilerGeneratedAttribute]
public virtual bool get_IsDesignTime();
    public virtual Staticness GetStaticness();
    public sealed virtual VirtualFileSystemPath GetBasePath();
    public virtual ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
    protected IQualifier GetRootQualifier();
    public virtual ResolveResultWithInfo Resolve(ISymbolTable symbolTable, IAccessContext context);
    public virtual ISymbolFilter[] GetSymbolFilters();
    private sealed virtual override ISymbolFilter[] JetBrains.ReSharper.Psi.Resolve.IPathReference.GetPathFilters();
    protected virtual IReference BindToInternal(IDeclaredElement declaredElement, ISubstitution substitution);
    protected VirtualFileSystemPath GetProjectPath();
}
public class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.XamlPlainNamespaceAliasReference : XamlNamespaceAliasReference {
    public XamlPlainNamespaceAliasReference(ITreeNode element, IXmlToken token, TreeTextRange rangeWithin);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.XamlPredefinedAttributeReference : XamlQualifiableReferenceWithToken {
    public XamlPredefinedAttributeReference(ITreeNode owner, IQualifier qualifier, IXmlToken token, TreeTextRange rangeWithin);
    public virtual Staticness GetStaticness();
    protected virtual ISymbolFilter[] GetCompletionFilters();
    public virtual ISymbolTable GetCompletionSymbolTable();
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.XamlPropertyAccessUtil : object {
    [ExtensionAttribute]
public static bool IsTopProperty(ITreeNode node);
    [ExtensionAttribute]
public static ReferenceAccessType GetAccessType(ITreeNode node);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.XamlPropertyElementPropertyReference : XamlPropertyReference {
    private IType myExpectedElementType;
    public IType ExpectedElementType { get; }
    public XamlPropertyElementPropertyReference(ITreeNode owner, XamlTypeReference qualifier, IXmlToken token, TreeTextRange rangeWithin);
    public IType get_ExpectedElementType();
    public virtual ResolveResultWithInfo Resolve(ISymbolTable symbolTable, IAccessContext context);
    public sealed virtual ISymbolTable GetSmartCompletionSymbolTable();
    private IType GetElementType(IType propertyType);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.XamlPropertyReference : XamlTypeMemberReferenceBase {
    public bool HasMultipleNames { get; }
    public XamlPropertyReference(ITreeNode owner, IQualifier qualifier, IXmlToken token, TreeTextRange rangeWithin);
    public sealed virtual bool CanBeSelfProperty();
    public sealed virtual bool CanBeAttachedProperty();
    public bool CanBeRoutedOrAttachedEvent();
    private bool IsAvaloniaStyleClass();
    public virtual bool get_HasMultipleNames();
    public virtual HybridCollection`1<string> GetAllNames();
    public virtual Staticness GetStaticness();
    public virtual ISymbolFilter[] GetSymbolFilters();
    [NotNullAttribute]
private static List`1<ISymbolFilter> GetCommonFilters();
    private void AppendAttachedPropertyFilters(List`1<ISymbolFilter> filters, string referenceName, AccessRightsFilter accessFilter, ITypeElement qualifier, bool getOnlyProperties);
    [NotNullAttribute]
private ISymbolFilter[] GetSelfPropertyFilters(string referenceName, AccessRightsFilter accessFilter);
    public virtual ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
    [CanBeNullAttribute]
private static IBinding TryGetCurrentBinding(ITreeNode node);
    public virtual ISymbolTable GetSmartCompletionSymbolTable();
    public virtual ISymbolTable GetCompletionSymbolTable();
    [NotNullAttribute]
private ISymbolFilter[] GetAttachedMembersTypesSymbolFilters();
    private sealed virtual override ISymbolFilter[] JetBrains.ReSharper.Psi.Xaml.Tree.IAliasExpandableReference.GetExpandedCompletionFilters();
    private sealed virtual override ISymbolFilter[] JetBrains.ReSharper.Psi.Xaml.Tree.IAliasExpandableReference.GetExpandedSmartSymbolFilters();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.XamlPropertyReference/<GetFilters>d__20")]
[NotNullAttribute]
private IEnumerable`1<MultiNameResolveEntry> GetFilters(bool useName);
    [CanBeNullAttribute]
private ITypeElement GetExplicitQualifierTypeElement();
    private static Pair`2<IXamlObjectElement, IType> GetPropertyOwnerType(ITreeNode treeNode);
    public sealed virtual IType[] GetExpectedTypes();
    public virtual ResolveResultWithInfo Resolve(ISymbolTable symbolTable, IAccessContext accessContext);
    public virtual ResolveResultWithInfo ResolveAsUnqualified();
    public virtual ITypeElement GetAccessContainingTypeElement();
    protected virtual IReference BindToInternal(IDeclaredElement element, ISubstitution substitution);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.XamlPseudoClassReference : XamlReferenceWithTokenBase`1<PseudoClassSelectorExpression> {
    private IReference myQualifierTypeReference;
    public XamlPseudoClassReference(PseudoClassSelectorExpression owner, IReference qualifierTypeReference, IXmlToken token);
    private static TreeTextRange GetRangeWithin(ITreeNode token);
    public virtual ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
    public virtual ResolveResultWithInfo Resolve();
}
internal abstract class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.XamlQualifiableReferenceWithToken : XmlQualifiableReferenceWithToken {
    protected bool AllowedNotResolved { get; }
    protected XamlQualifiableReferenceWithToken(ITreeNode owner, IQualifier qualifier, IXmlToken token, TreeTextRange rangeWithin);
    protected XamlQualifiableReferenceWithToken(ITreeNode owner, IQualifier qualifier, IXmlToken token);
    public virtual ITypeElement GetQualifierTypeElement();
    protected virtual IReference BindToInternal(IDeclaredElement element, ISubstitution substitution);
    protected virtual bool get_AllowedNotResolved();
}
public abstract class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.XamlReferenceWithDefaultSymbolTable`1 : XamlReferenceWithTokenBase`1<T> {
    public bool IsQualified { get; }
    public bool ShouldResolveInGlobalTable { get; }
    protected XamlReferenceWithDefaultSymbolTable`1(T owner, IXmlToken token, TreeTextRange rangeWithin);
    public sealed virtual bool get_IsQualified();
    public sealed virtual IQualifier GetQualifier();
    public sealed virtual bool get_ShouldResolveInGlobalTable();
    public sealed virtual ResolveResultWithInfo Resolve(ISymbolTable symbolTable, IAccessContext context);
    public virtual ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
}
public abstract class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.XamlReferenceWithTokenBase`1 : XmlReferenceWithTokenBase`1<TTreeNode> {
    protected XamlReferenceWithTokenBase`1(TTreeNode owner, IXmlToken token, TreeTextRange rangeWithin);
    public virtual ResolveResultWithInfo ResolveWithoutCache();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.XamlRelativePanelReference : XamlReferenceWithTokenBase`1<ITreeNode> {
    public XamlRelativePanelReference(ITreeNode owner, IXmlToken token, TreeTextRange rangeWithin);
    public virtual ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
    protected virtual ISymbolFilter[] GetSmartSymbolFilters(Boolean& applyAllFilters);
    protected virtual ISymbolFilter[] GetCompletionFilters();
    public virtual ResolveResultWithInfo ResolveWithoutCache();
    [CanBeNullAttribute]
[PureAttribute]
private IXamlObjectElement GetOwnerObjectElement();
    [CanBeNullAttribute]
[PureAttribute]
private IXamlObjectElement GetContainingRelativePanel(IXamlObjectElement ownerElement);
}
public class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.XamlResourceByClassReference : XamlResourceReference {
    public bool IsStatic { get; }
    public XamlResourceByClassReference(IPropertyAttributeValue owner, IXmlToken token, TreeTextRange rangeWithin);
    public virtual ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
    public virtual bool get_IsStatic();
    protected virtual ISymbolFilter[] GetResourceSymbolFilters(bool isResolve);
    protected virtual IType[] GetExpectedTypes();
    [NotNullAttribute]
private IType GetExpectedResourceTargetType();
}
public class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.XamlResourceByStaticMemberReference : XamlResourceReference {
    internal XamlResourceByStaticMemberReference(StaticMarkup owner);
    public virtual TreeTextRange GetTreeTextRange();
    public sealed virtual IDeclaredElement GetStaticMember();
    public virtual string GetName();
    protected virtual ISymbolFilter[] GetResourceSymbolFilters(bool isResolve);
    public virtual ResolveResultWithInfo ResolveWithoutCache();
    protected virtual IReference BindToInternal(IDeclaredElement declaredElement, ISubstitution substitution);
}
public class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.XamlResourceByTypeReference : XamlResourceReference {
    public XamlResourceByTypeReference(ITypeUsage owner);
    public virtual TreeTextRange GetTreeTextRange();
    public sealed virtual IType GetKeyType();
    public virtual string GetName();
    [NotNullAttribute]
protected IType GetExpectedKeyType();
    protected virtual ISymbolFilter[] GetResourceSymbolFilters(bool isResolve);
    public virtual ResolveResultWithInfo ResolveWithoutCache();
    protected virtual IReference BindToInternal(IDeclaredElement declaredElement, ISubstitution substitution);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.XamlResourceDictionaryFileReference : XamlFileReference {
    public ProjectFileType ExpectedFileType { get; }
    public bool IsEmptyNameAllowed { get; }
    public XamlResourceDictionaryFileReference(ITreeNode owner, IQualifier qualifier, IXmlToken token, TreeTextRange rangeWithin, bool useRootFolder);
    public virtual ProjectFileType get_ExpectedFileType();
    public virtual bool get_IsEmptyNameAllowed();
    protected virtual ISymbolFilter[] GetSmartSymbolFilters();
}
public class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.XamlResourceInSpecificDictionaryReference : XamlResourceReference {
    public IXamlObjectElement TargetContainer { get; }
    public bool IsStatic { get; }
    public XamlResourceInSpecificDictionaryReference(IIndexerParameter owner, IXmlToken token, TreeTextRange rangeWithin);
    public virtual ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
    public sealed virtual IXamlObjectElement get_TargetContainer();
    private IXamlObjectElement GetResourcesContainer(IQualifierExpression expression);
    private static IXamlObjectElement GetResourcesContainer(IIndexerExpression indexerExpression);
    private IXamlObjectElement GetResourcesContainer(ISimplePropertyExpression propertyExpression);
    protected virtual IType[] GetExpectedTypes();
    public virtual ResolveResultWithInfo ResolveWithoutCache();
    public virtual bool get_IsStatic();
}
public class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.XamlResourceReference : XamlReferenceWithTokenBase`1<ITreeNode> {
    public bool IsStatic { get; }
    public bool IsDynamic { get; }
    private bool CanBeComplexKey { get; }
    public ITypeMemberReference TargetMemberReference { get; }
    public XamlResourceReference(ITreeNode owner, IXmlToken token, TreeTextRange rangeWithin);
    private static bool IsParent(ITreeNode parent, ITreeNode child);
    public sealed virtual Refers RefersToDeclaredElement(IDeclaredElement declaredElement);
    public virtual ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
    public virtual ResolveResultWithInfo ResolveWithoutCache();
    public virtual bool get_IsStatic();
    public sealed virtual bool get_IsDynamic();
    private bool get_CanBeComplexKey();
    public virtual ISymbolFilter[] GetSymbolFilters();
    protected sealed virtual ISymbolFilter[] GetSmartSymbolFilters(Boolean& applyAllFilters);
    protected virtual ISymbolFilter[] GetResourceSymbolFilters(bool isResolve);
    protected virtual ISymbolFilter[] GetCompletionFilters();
    public sealed virtual ITypeMemberReference get_TargetMemberReference();
    [NotNullAttribute]
protected virtual IType[] GetExpectedTypes();
    [NotNullAttribute]
private IType[] GetExpectedTypesMyMemberReference();
    public sealed virtual IType GetExpectedType();
    public virtual string GetName();
    protected virtual IReference BindToInternal(IDeclaredElement declaredElement, ISubstitution substitution);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.XamlRootNamespaceReference : XamlReferenceWithTokenBase`1<NamespaceAliasAttribute> {
    private AssemblyNameRanges myModuleRange;
    public bool Resolved { get; }
    public XamlRootNamespaceReference(NamespaceAliasAttribute owner, IXmlToken token, TreeTextRange rangeWithin, AssemblyNameRanges moduleRange);
    public sealed virtual ISymbolTable GetSymbolTable(SymbolTableMode mode);
    public virtual ResolveResultWithInfo ResolveWithoutCache();
    public sealed virtual QualifierKind GetKind();
    public sealed virtual bool get_Resolved();
    public virtual ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
    public virtual ISymbolTable GetCompletionSymbolTable();
    [NotNullAttribute]
private ISymbolTable GetNamespaceSymbolTable(IPsiModule module, bool withReferences);
    protected virtual IReference BindToInternal(IDeclaredElement element, ISubstitution substitution);
    public sealed virtual IXamlNamespaceReference BindModuleTo(IPsiModule module);
    protected virtual ISymbolFilter[] GetSmartSymbolFilters(Boolean& applyAllFilters);
    protected virtual ISymbolFilter[] GetCompletionFilters();
    private sealed virtual override IXmlToken JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.IXamlNamespaceReference.get_Token();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.XamlRootNamespaceReference`1 : XamlReferenceWithTokenBase`1<T> {
    public bool Resolved { get; }
    public XamlRootNamespaceReference`1(T owner, IXmlToken token, TreeTextRange rangeWithin);
    public virtual ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
    public virtual ISymbolTable GetCompletionSymbolTable();
    [NotNullAttribute]
private ISymbolTable GetNamespaceSymbolTable(IPsiModule module, bool withReferences);
    public sealed virtual ISymbolTable GetSymbolTable(SymbolTableMode mode);
    public sealed virtual QualifierKind GetKind();
    public sealed virtual bool get_Resolved();
    protected virtual IReference BindToInternal(IDeclaredElement declaredElement, ISubstitution substitution);
    public sealed virtual IXamlNamespaceReference BindModuleTo(IPsiModule module);
    private sealed virtual override IXmlToken JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.IXamlNamespaceReference.get_Token();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.XamlStartupFileReference : XamlFileReference {
    public ProjectFileType ExpectedFileType { get; }
    public bool IsEmptyNameAllowed { get; }
    public bool UseRootFolder { get; }
    public XamlStartupFileReference(ITreeNode owner, IQualifier qualifier, IXmlToken token, TreeTextRange rangeWithin, bool useRootFolder);
    public virtual ProjectFileType get_ExpectedFileType();
    public virtual bool get_IsEmptyNameAllowed();
    public virtual bool get_UseRootFolder();
}
public class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.XamlStyleClassReference : XamlReferenceWithTokenBase`1<ITreeNode> {
    public XamlStyleClassReference(ITreeNode owner, IXmlToken token, TreeTextRange rangeWithin);
    public virtual ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
    public virtual ISymbolTable GetCompletionSymbolTable();
    public virtual ISymbolTable GetSmartCompletionSymbolTable();
    public virtual ISymbolFilter[] GetSymbolFilters();
    public virtual ResolveResultWithInfo Resolve();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.XamlStyleSelectorValueReferenceData : XamlValueReferenceDataBase {
    public XamlStyleSelectorValueReferenceData(IPropertyEqualsSelectorExpression element);
    public virtual IDeclaredType GetReferencedEventType();
    public virtual IType GetExpectedType();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.XamlStylesFileReference : XamlFileReference {
    public ProjectFileType ExpectedFileType { get; }
    public bool IsEmptyNameAllowed { get; }
    public XamlStylesFileReference(ITreeNode owner, IQualifier qualifier, IXmlToken token, TreeTextRange rangeWithin, bool useRootFolder);
    public virtual ProjectFileType get_ExpectedFileType();
    public virtual bool get_IsEmptyNameAllowed();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.XamlStyleSheetSourceFileReference : XamlFileReference {
    public ProjectFileType ExpectedFileType { get; }
    public bool IsEmptyNameAllowed { get; }
    public BuildAction ExpectedBuildAction { get; }
    public XamlStyleSheetSourceFileReference(ITreeNode owner, IQualifier qualifier, IXmlToken token, TreeTextRange rangeWithin, bool useRootFolder);
    public virtual ProjectFileType get_ExpectedFileType();
    public virtual bool get_IsEmptyNameAllowed();
    public virtual BuildAction get_ExpectedBuildAction();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.XamlTemplateStyleSelectorReference : XamlReferenceWithTokenBase`1<TemplateSelectorExpression> {
    public XamlTemplateStyleSelectorReference(TemplateSelectorExpression owner, IXmlToken token, TreeTextRange rangeWithin);
    public virtual ResolveResultWithInfo Resolve();
    public virtual ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
}
public class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.XamlTypeDeclarationConstructorReference : XamlConstructorReferenceBase`1<IXClassAttribute> {
    public IReference TypeReference { get; }
    public IList`1<IExpressionType> ParameterTypes { get; }
    public XamlTypeDeclarationConstructorReference(IXClassAttribute owner, IXmlToken token, TreeTextRange rangeWithin);
    public virtual IReference get_TypeReference();
    public virtual bool IsValid();
    public virtual IList`1<IExpressionType> get_ParameterTypes();
    protected virtual ITypeElement GetTypeElement();
}
internal abstract class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.XamlTypeMemberReferenceBase : XamlQualifiableReferenceWithToken {
    private IValueReferenceData myValueReferenceData;
    public IValueReferenceData ValueReferenceData { get; }
    protected XamlTypeMemberReferenceBase(ITreeNode owner, IQualifier qualifier, IXmlToken token);
    protected XamlTypeMemberReferenceBase(ITreeNode owner, IQualifier qualifier, IXmlToken token, TreeTextRange rangeWithin);
    public sealed virtual IValueReferenceData get_ValueReferenceData();
    public virtual ResolveResultWithInfo Resolve(ISymbolTable symbolTable, IAccessContext context);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.XamlTypeReference : XamlQualifiableReferenceWithToken {
    private XamlTypeReferenceType myReferenceType;
    public bool Resolved { get; }
    public IList`1<ReferencedNamespace> ContainingNamespaces { get; }
    public bool CanBeMarkupExtensionReference { get; }
    private bool CanBeAttachedPropertyTypeReference { get; }
    private bool CanStripExtensionSuffix { get; }
    public bool HasMultipleNames { get; }
    protected XamlTypeReference(ITreeNode element, IQualifier qualifier, IXmlToken token, XamlTypeReferenceType referenceType);
    public XamlTypeReference(ITreeNode element, IQualifier qualifier, IXmlToken token, TreeTextRange rangeWithin, XamlTypeReferenceType referenceType);
    public virtual ITypeElement GetAccessContainingTypeElement();
    public virtual Staticness GetStaticness();
    public virtual ITypeElement GetQualifierTypeElement();
    public virtual ISymbolTable GetSymbolTable(SymbolTableMode mode);
    public sealed virtual QualifierKind GetKind();
    public sealed virtual bool get_Resolved();
    public sealed virtual IList`1<ReferencedNamespace> get_ContainingNamespaces();
    protected virtual IReference BindToInternal(IDeclaredElement declaredElement, ISubstitution substitution);
    [NotNullAttribute]
private static IReference FixObjectElementSubstitution(IReference reference, ITypeElement element, ISubstitution substitution);
    private IReference BindToTypeElement(ITypeElement typeElement, ISubstitution substitution);
    [NotNullAttribute]
private string GetTypeName(ITypeElement typeElement, ISubstitution substitution);
    [NotNullAttribute]
protected virtual IList`1<IType> GetTypeArguments();
    protected virtual ISymbolFilter[] GetCompletionFilters();
    protected virtual ISymbolFilter[] GetSmartSymbolFilters();
    private sealed virtual override ISymbolFilter[] JetBrains.ReSharper.Psi.Xaml.Tree.IAliasExpandableReference.GetExpandedCompletionFilters();
    private sealed virtual override ISymbolFilter[] JetBrains.ReSharper.Psi.Xaml.Tree.IAliasExpandableReference.GetExpandedSmartSymbolFilters();
    private void GetSymbolFilters(List`1<ISymbolFilter> filters, bool useName);
    protected virtual void AppendTypeParameterFilters(List`1<ISymbolFilter> filters);
    [NotNullAttribute]
private ISymbolFilter[] GetCompletionFilters(bool isSmart, bool allowParentObjectType);
    private sealed virtual override IType[] JetBrains.ReSharper.Psi.Xaml.Tree.IXamlReferenceWithExpectedType.GetExpectedTypes();
    [NotNullAttribute]
private IType[] GetExpectedTypes(bool isSmart);
    [NotNullAttribute]
private SimpleSymbolFilter GetIsTypeFilter();
    public virtual ISymbolTable GetCompletionSymbolTable();
    public virtual ISymbolTable GetSmartCompletionSymbolTable();
    public virtual bool get_CanBeMarkupExtensionReference();
    private bool get_CanBeAttachedPropertyTypeReference();
    private bool get_CanStripExtensionSuffix();
    public virtual HybridCollection`1<string> GetAllNames();
    private bool MarkupNameWithExtensionIsNotPreferred(string name);
    public virtual bool get_HasMultipleNames();
    [NotNullAttribute]
private ResolveResultWithInfo CoreResolve(ISymbolTable symbolTable);
    public virtual ResolveResultWithInfo Resolve(ISymbolTable symbolTable, IAccessContext context);
}
[FlagsAttribute]
public enum JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.XamlTypeReferenceType : Enum {
    public byte value__;
    public static XamlTypeReferenceType Any;
    public static XamlTypeReferenceType Class;
    public static XamlTypeReferenceType Instantiatable;
    public static XamlTypeReferenceType HasStaticMembers;
    public static XamlTypeReferenceType HasCommandMembers;
    public static XamlTypeReferenceType Ignorable;
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.XamlUriPrefixReference : XamlReferenceWithTokenBase`1<ITreeNode> {
    private string myName;
    public static string PACK;
    public static string FILE;
    public static string MSAPPX;
    public static string AVALONIA_AVARES;
    public static string AVALONIA_RESM;
    private static String[] URL_PREFIXES;
    public bool IsURL { get; }
    public bool Resolved { get; }
    public XamlUriPrefixReference(ITreeNode element, IXmlToken token, TreeTextRange rangeWithin);
    private static XamlUriPrefixReference();
    public virtual string GetName();
    public bool get_IsURL();
    public sealed virtual QualifierKind GetKind();
    public sealed virtual VirtualFileSystemPath GetQualifierPath();
    public sealed virtual bool get_Resolved();
    public sealed virtual ISymbolTable GetSymbolTable(SymbolTableMode mode);
    public virtual ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
    public virtual ResolveResultWithInfo ResolveWithoutCache();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.XamlValueReference : XamlReferenceWithTokenBase`1<ITreeNode> {
    [NotNullAttribute]
private IValueReferenceData myValueReferenceData;
    private ISymbolFilter[] myCustomFilters;
    private static string Byte;
    private static string DoubleOrPercent;
    private static string Comma;
    private static string Double;
    private static Regex ourAvaloniaRbgPattern;
    private static Regex ourAvaloniaRbgaPattern;
    private static Regex ourAvaloniaHsvPattern;
    private static Regex ourAvaloniaHsvaPattern;
    private static Regex ourAvaloniaHslPattern;
    private static Regex ourAvaloniaHslaPattern;
    public bool CaseSensitive { get; }
    public IDeclaredType Delegate { get; }
    public bool IsEventSubscription { get; }
    public XamlValueReference(ITreeNode owner, IValueReferenceData valueReferenceData, IXmlToken token, TreeTextRange rangeWithin, ISymbolFilter[] customFilters);
    private static XamlValueReference();
    public virtual string GetName();
    public virtual bool get_CaseSensitive();
    public sealed virtual IDeclaredType get_Delegate();
    public sealed virtual bool get_IsEventSubscription();
    public sealed virtual IReference SetValue(string text);
    public sealed virtual ValueReferenceType GetValueReferenceType();
    [NotNullAttribute]
public sealed virtual IType GetExpectedType();
    [NotNullAttribute]
private IType GetUnwrappedExpectedType();
    [CanBeNullAttribute]
public sealed virtual IDeclaredType GetReferencedEventType();
    public virtual ResolveResultWithInfo ResolveWithoutCache();
    public virtual ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
    public virtual ITypeElement GetAccessContainingTypeElement();
    protected virtual ISymbolFilter[] GetCompletionFilters();
    protected virtual ISymbolFilter[] GetSmartSymbolFilters(Boolean& applyAllFilters);
    protected ISymbolFilter[] GetSmartSymbolFiltersImpl(Boolean& applyAllFilters);
    [CanBeNullAttribute]
private ITypeOwner ResolveTargetName();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.XamlValueReferenceData : object {
    [NotNullAttribute]
public ITypeMemberReference Reference;
    private CachedPsiValue`1<ValueReferenceType> myValueReferenceType;
    private CachedPsiValue`1<IDeclaredType> myEventType;
    private CachedPsiValue`1<IType> myExpectedType;
    private bool IsSilverlight { get; }
    private bool IsAvalonia { get; }
    public XamlValueReferenceData(ITypeMemberReference reference);
    public sealed virtual ValueReferenceType GetValueReferenceType();
    public bool IsStartupUri();
    private bool get_IsSilverlight();
    private bool get_IsAvalonia();
    private ValueReferenceType CalculateValueReferenceType();
    [CanBeNullAttribute]
private IDeclaredType CalculateReferencedEventType();
    public sealed virtual IDeclaredType GetReferencedEventType();
    public sealed virtual IType GetExpectedType();
    [NotNullAttribute]
private IType CalculateExpectedType();
    [CanBeNullAttribute]
private static IType CalculateExpectedTypeByDeclaredElement(ITreeNode node, IDeclaredElement element, ISubstitution substitution);
}
internal abstract class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.XamlValueReferenceDataBase : object {
    private ITreeNode myElement;
    private CachedPsiValue`1<ValueReferenceType> myValueReferenceType;
    protected ITreeNode Element { get; }
    protected XamlValueReferenceDataBase(ITreeNode element);
    protected ITreeNode get_Element();
    public sealed virtual ValueReferenceType GetValueReferenceType();
    protected ValueReferenceType CalculateValueReferenceType();
    public abstract virtual IDeclaredType GetReferencedEventType();
    public abstract virtual IType GetExpectedType();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.XamlWinRTImageFileReference : XamlWinRTQualifiedResourceFileReference {
    public bool IsEmptyNameAllowed { get; }
    public XamlWinRTImageFileReference(ITreeNode owner, IQualifier qualifier, IXmlToken token, TreeTextRange rangeWithin, bool useRootFolder);
    public virtual bool get_IsEmptyNameAllowed();
    public virtual ResolveResultWithInfo Resolve(ISymbolTable symbolTable, IAccessContext context);
}
internal abstract class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.XamlWinRTQualifiedResourceFileReference : XamlFileReference {
    public bool CanBeWinRtQualified { get; }
    protected XamlWinRTQualifiedResourceFileReference(ITreeNode owner, IQualifier qualifier, IXmlToken token, TreeTextRange rangeWithin, bool useRootFolder);
    public virtual bool get_CanBeWinRtQualified();
    public virtual ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
    [NotNullAttribute]
private ISymbolTable GetReferenceSymbolTable(bool useReferenceName, bool codeCompletion);
    public virtual ISymbolTable GetCompletionSymbolTable();
    public virtual ISymbolTable GetSmartCompletionSymbolTable();
    public virtual ResolveResultWithInfo Resolve(ISymbolTable symbolTable, IAccessContext context);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.XamlXBindEventReference : XamlXBindMethodReferenceBase {
    public IList`1<IExpressionType> ParameterTypes { get; }
    public XamlXBindEventReference(ITreeNode owner, IQualifier qualifier, IXmlToken token, TreeTextRange rangeWithin);
    public virtual ISymbolFilter[] GetSymbolFilters();
    protected virtual ISymbolFilter[] GetCompletionFilters();
    protected virtual ISymbolFilter[] GetSmartSymbolFilters();
    [NotNullAttribute]
public sealed virtual IDelegate GetExpectedDelegate();
    [NotNullAttribute]
public sealed virtual IDeclaredType GetExpectedEventType();
    [NotNullAttribute]
private IEvent GetRequiredEvent();
    public virtual IList`1<IExpressionType> get_ParameterTypes();
    public virtual ResolveResultWithInfo Resolve(ISymbolTable symbolTable, IAccessContext context);
    [NotNullAttribute]
private ResolveResultWithInfo ResolveParameterlessMethod(ISymbolTable symbolTable);
    private ValueTuple`2<IList`1<ISymbolInfo>, ResolveResultWithInfo> FilterByReferenceFilters(IList`1<ISymbolInfo> symbols);
    public virtual ISymbolTable GetSmartCompletionSymbolTable();
    private bool TryResolveEvent(ISymbolTable symbolTable, ResolveResultWithInfo& result);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.XamlXBindMethodInvocationReference : XamlXBindMethodReferenceBase {
    public IList`1<IExpressionType> ParameterTypes { get; }
    public IType ExpectedReturnType { get; }
    public XamlXBindMethodInvocationReference(ITreeNode owner, IQualifier qualifier, IXmlToken token, TreeTextRange rangeWithin);
    public virtual ResolveResultWithInfo Resolve(ISymbolTable symbolTable, IAccessContext context);
    protected virtual ISymbolFilter[] GetCompletionFilters();
    protected virtual ISymbolFilter[] GetSmartSymbolFilters();
    public virtual IList`1<IExpressionType> get_ParameterTypes();
    public sealed virtual IType get_ExpectedReturnType();
    public sealed virtual bool TryGetFirstUnmatchedArgument(IXamlArgument& argument, IParameter& parameter);
    public sealed virtual IAccessContext GetAccessContext(IResolveContext resolveContext);
    public sealed virtual ISymbolTable GetReferenceSymbolTable(IResolveContext resolveContext);
}
internal abstract class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.References.XamlXBindMethodReferenceBase : XamlMethodReferenceBase {
    public IReference TypeReference { get; }
    protected XamlXBindMethodReferenceBase(ITreeNode owner, IQualifier qualifier, IXmlToken token, TreeTextRange rangeWithin);
    public virtual Staticness GetStaticness();
    public virtual ITypeElement GetQualifierTypeElement();
    public virtual IReference get_TypeReference();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.RelativeSourceAttribute : PropertyAttribute {
    public RelativeSourceMode Mode { get; }
    public int AncestorLevel { get; }
    public ITypeUsage AncestorType { get; }
    public RelativeSourceAttribute(XmlCompositeNodeType type);
    [CanBeNullAttribute]
private IRelativeSourceUsage GetRelativeSourceMarkup();
    public sealed virtual RelativeSourceMode get_Mode();
    public sealed virtual int get_AncestorLevel();
    public sealed virtual ITypeUsage get_AncestorType();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.RelativeSourceElement : XamlObjectElement {
    public RelativeSourceMode Mode { get; }
    public int AncestorLevel { get; }
    public ITypeUsage AncestorType { get; }
    public RelativeSourceElement(XmlCompositeNodeType type);
    private static bool IsRelativeSourceMember(ITypeMemberUsage obj);
    public sealed virtual RelativeSourceMode get_Mode();
    public sealed virtual int get_AncestorLevel();
    public sealed virtual ITypeUsage get_AncestorType();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.ResourceDeclaration : XamlObjectElementDeclaration`1<IDeclarationNameElement> {
    public IXamlResource DeclaredElement { get; }
    public IReference KeyTypeReference { get; }
    public IReference StaticMemberReference { get; }
    public string DeclaredName { get; }
    public ResourceDeclaration(XmlCompositeNodeType type);
    public sealed virtual IXamlResource get_DeclaredElement();
    protected virtual IDeclaredElement CreateDeclaredElement();
    public virtual bool CanBeBoundTo(IDeclaredElement element);
    protected virtual IEnumerable`1<IDeclarationNameElement> GetDeclarationNameElements(bool checkCanDeclare);
    public virtual IDeclarationNameElement GetDeclarationNameElement();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Psi.Xaml.Impl.Tree.ResourceDeclaration/<GetXKeyElements>d__7")]
public virtual IEnumerable`1<IXKeyElement> GetXKeyElements();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Psi.Xaml.Impl.Tree.ResourceDeclaration/<GetXamarinFormsClassElements>d__8")]
public virtual IEnumerable`1<IXamarinFormsClassElement> GetXamarinFormsClassElements();
    protected virtual bool CanDeclareElementWith(IDeclarationNameElement nameAttribute);
    public virtual void SetName(string newName);
    public sealed virtual void SetType(IType type);
    public virtual IReference get_KeyTypeReference();
    public sealed virtual IReference get_StaticMemberReference();
    public virtual string get_DeclaredName();
    protected virtual bool CanCreateDeclaredElement();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.ResourceKeyAttribute : PropertyAttribute {
    public IResourceReference ResourceReference { get; }
    public ResourceKeyAttribute(XmlCompositeNodeType type);
    public IResourceReference get_ResourceReference();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.ResourceUsage : ResourceDeclaration {
    public ITreeNode ReferenceName { get; }
    public IResourceReference ResourceReference { get; }
    public bool IsStaticResource { get; }
    public bool IsDynamicResource { get; }
    public bool IsThemeResource { get; }
    public ResourceUsage(XmlCompositeNodeType type);
    public sealed virtual ITreeNode get_ReferenceName();
    public sealed virtual IResourceReference get_ResourceReference();
    public sealed virtual bool get_IsStaticResource();
    public sealed virtual bool get_IsDynamicResource();
    public sealed virtual bool get_IsThemeResource();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.SharedAttribute : KeywordAttribute {
    public SharedAttribute(XmlCompositeNodeType type);
    protected virtual void CreateFirstClassReferencesInternal(IXmlAttributeValue value, IList`1<IReference> result);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.SourceAttribute : PropertyAttribute {
    public SourceAttribute(XmlCompositeNodeType type);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.SourcePropertyElement : XamlPropertyElement {
    public SourcePropertyElement(XmlCompositeNodeType type);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.StaticElement : XamlObjectElement {
    public string MemberName { get; }
    public ITypeMemberReference MemberReference { get; }
    public IReference ContainingTypeReference { get; }
    public StaticElement(XmlCompositeNodeType type);
    public sealed virtual string get_MemberName();
    public sealed virtual ITypeMemberReference get_MemberReference();
    public sealed virtual IReference get_ContainingTypeReference();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.StaticMemberAttribute : PropertyAttribute {
    public StaticMemberAttribute(XmlCompositeNodeType _type);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.StaticResourceElement : ResourceDeclaration {
    public string MemberName { get; }
    public ITypeMemberReference MemberReference { get; }
    public IReference ContainingTypeReference { get; }
    public StaticResourceElement(XmlCompositeNodeType type);
    public sealed virtual string get_MemberName();
    public sealed virtual ITypeMemberReference get_MemberReference();
    public sealed virtual IReference get_ContainingTypeReference();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.StyleDeclaration : ResourceDeclaration {
    public IReference TargetTypeReference { get; }
    public IType TargetType { get; }
    public IReference KeyTypeReference { get; }
    public string DeclaredName { get; }
    public StyleDeclaration(XmlCompositeNodeType type);
    public sealed virtual IReference get_TargetTypeReference();
    public sealed virtual IType get_TargetType();
    public virtual IReference get_KeyTypeReference();
    public virtual string get_DeclaredName();
    protected virtual bool CanCreateDeclaredElement();
    [CanBeNullAttribute]
private ITypeUsage HasTargetType();
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.StyleDeclarationExtensions : object {
    [ExtensionAttribute]
public static IReference GetStyleTargetTypeReference(IResourceDeclaration resourceDeclaration);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.SubclassAttribute : KeywordAttribute {
    public SubclassAttribute(XmlCompositeNodeType type);
    protected virtual void CreateFirstClassReferencesInternal(IXmlAttributeValue value, IList`1<IReference> result);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.TargetNameAttribute : PropertyAttribute {
    public IElementNameReference ElementNameReference { get; }
    public TargetNameAttribute(XmlCompositeNodeType type);
    public sealed virtual IElementNameReference get_ElementNameReference();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.TemplateBindingElement : XamlObjectElementDeclaration`1<IDeclarationNameElement> {
    public BindingMode Mode { get; }
    public IPathValue Path { get; }
    public ISourceUsage Source { get; }
    public IElementNameUsage ElementName { get; }
    public IRelativeSourceUsage RelativeSource { get; }
    public ITreeNode FallbackValue { get; }
    public IType DataType { get; }
    private RelativeSourceMode JetBrains.ReSharper.Psi.Xaml.Tree.IRelativeSourceUsage.Mode { get; }
    public int AncestorLevel { get; }
    public ITypeUsage AncestorType { get; }
    public TemplateBindingElement(XmlCompositeNodeType type);
    protected virtual bool CanDeclareElementWith(IDeclarationNameElement nameAttribute);
    protected virtual IDeclaredElement CreateDeclaredElement();
    public virtual bool CanBeBoundTo(IDeclaredElement element);
    public sealed virtual BindingMode get_Mode();
    public sealed virtual IPathValue get_Path();
    public sealed virtual ISourceUsage get_Source();
    public sealed virtual IElementNameUsage get_ElementName();
    public sealed virtual IRelativeSourceUsage get_RelativeSource();
    public sealed virtual ITreeNode get_FallbackValue();
    public sealed virtual IType get_DataType();
    private sealed virtual override RelativeSourceMode JetBrains.ReSharper.Psi.Xaml.Tree.IRelativeSourceUsage.get_Mode();
    public sealed virtual int get_AncestorLevel();
    public sealed virtual ITypeUsage get_AncestorType();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.TemplateFieldDeclaration : XamlObjectElementDeclaration`1<IDeclarationNameAttribute> {
    public TemplateFieldDeclaration(XmlCompositeNodeType type);
    protected virtual bool CanDeclareElementWith(IDeclarationNameAttribute nameAttribute);
    protected virtual IDeclaredElement CreateDeclaredElement();
    public virtual bool CanBeBoundTo(IDeclaredElement element);
    public sealed virtual void SetType(IType type);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.TypeArgumentsAttribute : KeywordAttribute {
    public IList`1<IXamlTypeReference> TypeReferences { get; }
    public TypeArgumentsAttribute(XmlCompositeNodeType type);
    protected virtual void CreateFirstClassReferencesInternal(IXmlAttributeValue value, IList`1<IReference> result);
    public sealed virtual IList`1<IXamlTypeReference> get_TypeReferences();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.TypeAttribute : KeywordAttribute {
    public TypeAttribute(XmlCompositeNodeType type);
    protected virtual ReferenceCollection CreateFirstClassReferences();
    protected virtual void CreateFirstClassReferencesInternal(IXmlAttributeValue value, IList`1<IReference> result);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.TypeNameAttribute : PropertyAttribute {
    public IReference TypeReference { get; }
    public TypeNameAttribute(XmlCompositeNodeType _type);
    public virtual IReference get_TypeReference();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.XamarinFormsClassAttribute : PropertyAttribute {
    public string DeclaredName { get; }
    public XamarinFormsClassAttribute(XmlCompositeNodeType type);
    public sealed virtual string get_DeclaredName();
    public sealed virtual TreeTextRange GetNameRange();
    public sealed virtual void SetName(string newName);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.XamarinFormsClassPropertyElement : XamlPropertyElement {
    public string DeclaredName { get; }
    public XamarinFormsClassPropertyElement(XmlCompositeNodeType type);
    public sealed virtual string get_DeclaredName();
    public sealed virtual TreeTextRange GetNameRange();
    public sealed virtual void SetName(string newName);
}
public abstract class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.XamlAttribute : XmlAttribute {
    [NotNullAttribute]
public XamlTokenTypes XamlTokenTypes { get; }
    public IXamlIdentifier Identifier { get; }
    protected XamlAttribute(XmlCompositeNodeType type);
    public XamlTokenTypes get_XamlTokenTypes();
    public sealed virtual IXamlIdentifier get_Identifier();
    protected virtual ReferenceCollection CreateFirstClassReferences();
}
internal abstract class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.XamlCompositeElement : XmlCompositeElement {
    protected XamlCompositeElement(XmlCompositeNodeType type);
    public virtual TReturn AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.XamlFile : XmlFile {
    public int LevelDelta { get; }
    private IEnumerable`1<ModuleProperty> JetBrains.ReSharper.Psi.Dependencies.IFileWithDependencies.ModulePropertyDependencies { get; }
    public XamlFile(XmlCompositeNodeType elementType);
    public sealed virtual ISymbolTable AddGlobalDeclarations(ISymbolTable parentTable, int level, SymbolTableMode mode);
    public sealed virtual int get_LevelDelta();
    private sealed virtual override IEnumerable`1<Pair`2<object, IUsingsInfo>> JetBrains.ReSharper.Psi.Dependencies.IFileWithDependencies.GetTopLevelHashableEntities();
    private sealed virtual override ICollection`1<string> JetBrains.ReSharper.Psi.Dependencies.IFileWithDependencies.GetEmptyNamespaceDeclarations();
    private sealed virtual override IEnumerable`1<ModuleProperty> JetBrains.ReSharper.Psi.Dependencies.IFileWithDependencies.get_ModulePropertyDependencies();
    public sealed virtual IHashableEntityInfo[] CalcAllEntityHashes(object hashableEntity, string parentQualifiedName, String& qualifiedName);
    public sealed virtual IEnumerable EntityChildren(object hashableEntity);
    public sealed virtual bool IsEntityInternal(object hashableEntity);
    public sealed virtual TreeNodeEnumerable`1<IXamlTypeDeclaration> GetTypeDeclarations();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.XamlIdentifier : XmlIdentifier {
    private string myCachedQualifier;
    private string myCachedId;
    private TreeTextRange myQualifierRange;
    private TreeTextRange myIdRange;
    public XamlTokenTypes XamlTokenTypes { get; }
    public string Qualifier { get; }
    public TreeTextRange QualifierRange { get; }
    public string Id { get; }
    public TreeTextRange IdRange { get; }
    public XamlIdentifier(XmlTokenNodeType tokenType, string text);
    public sealed virtual XamlTokenTypes get_XamlTokenTypes();
    public sealed virtual string get_Qualifier();
    public sealed virtual TreeTextRange get_QualifierRange();
    public sealed virtual string get_Id();
    public sealed virtual TreeTextRange get_IdRange();
}
internal abstract class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.XamlObjectElement : XamlTag {
    public IReference ContentPropertyReference { get; }
    public IReference TypeReference { get; }
    public IList`1<IType> TypeArguments { get; }
    protected XamlObjectElement(XmlCompositeNodeType type);
    public sealed virtual IReference get_ContentPropertyReference();
    protected IPropertySetter GetPropertySetter(string propertyName);
    public sealed virtual IPropertySetter GetPropertySetter(string propertyName, Predicate`1<IPropertySetter> predicate);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Psi.Xaml.Impl.Tree.XamlObjectElement/<GetPropertySetters>d__5")]
public sealed virtual IEnumerable`1<IPropertySetter> GetPropertySetters();
    [CanBeNullAttribute]
protected T GetProperyValue(string propertyName);
    [CanBeNullAttribute]
private T GetProperyValue(string propertyName, Func`2<ITypeMemberUsage, T> getValueDelegate);
    public virtual IReference get_TypeReference();
    public sealed virtual IList`1<IType> get_TypeArguments();
    protected virtual ReferenceCollection CreateFirstClassReferences();
    public virtual ReferenceCollection CreateCustomReferences();
    private void CreateConstructionReferences(XamlTypeReference typeReference, List`1<IReference> consumer);
    [CompilerGeneratedAttribute]
private IReference <CreateCustomReferences>b__13_0(IQualifier qualifier, IXmlToken tokenNode, TreeTextRange range, bool useRootFolder, bool _);
}
internal abstract class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.XamlObjectElementDeclaration`1 : XamlObjectElement {
    [CompilerGeneratedAttribute]
private IDeclaredElement <JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ICachedTypeMemberDeclaration.CachedDeclaredElement>k__BackingField;
    private IDeclaredElement JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ICachedTypeMemberDeclaration.CachedDeclaredElement { get; private set; }
    public string Name { get; }
    public string DeclaredName { get; }
    public IDeclaredElement DeclaredElement { get; }
    private IEnumerable`1<IXamlHashableEntity> JetBrains.ReSharper.Psi.Xaml.Impl.Tree.IXamlHashableEntity.Children { get; }
    private bool JetBrains.ReSharper.Psi.Xaml.Impl.Tree.IXamlHashableEntity.IsInternal { get; }
    public bool IsAbstract { get; }
    public bool IsSealed { get; }
    public bool IsVirtual { get; }
    public bool IsOverride { get; }
    public bool IsStatic { get; }
    public bool IsReadonly { get; }
    public bool IsExtern { get; }
    public bool IsUnsafe { get; }
    public bool IsVolatile { get; }
    public bool HasAccessRights { get; }
    public IType Type { get; }
    protected XamlObjectElementDeclaration`1(XmlCompositeNodeType type);
    [CompilerGeneratedAttribute]
private sealed virtual override IDeclaredElement JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ICachedTypeMemberDeclaration.get_CachedDeclaredElement();
    [CompilerGeneratedAttribute]
private sealed virtual override void JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ICachedTypeMemberDeclaration.set_CachedDeclaredElement(IDeclaredElement value);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Psi.Xaml.Impl.Tree.XamlObjectElementDeclaration`1/<GetDeclarationNameElements>d__5")]
[NotNullAttribute]
protected virtual IEnumerable`1<TNameElement> GetDeclarationNameElements(bool checkCanDeclare);
    public virtual TNameElement GetDeclarationNameElement();
    protected abstract virtual bool CanDeclareElementWith(TNameElement nameAttribute);
    public sealed virtual string get_Name();
    public virtual TreeTextRange GetNameRange();
    public sealed virtual XmlNode GetXMLDoc(bool inherit);
    public virtual string get_DeclaredName();
    public sealed virtual bool IsSynthetic();
    public virtual void SetName(string newName);
    public sealed virtual ITypeDeclaration GetContainingTypeDeclaration();
    public virtual IDeclaredElement get_DeclaredElement();
    protected virtual void PreInit();
    protected abstract virtual IDeclaredElement CreateDeclaredElement();
    public abstract virtual bool CanBeBoundTo(IDeclaredElement element);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Psi.Xaml.Impl.Tree.XamlObjectElementDeclaration`1/<GetPossibleDeclaredNames>d__22")]
public sealed virtual IEnumerable`1<string> GetPossibleDeclaredNames();
    protected virtual bool CanCreateDeclaredElement();
    public sealed virtual Hash CalcHash();
    protected virtual Hash CalcHashInternal();
    protected string GetDeclaredNameForSolutionAnalysisHash();
    protected TNameElement GetNameElementForSolutionAnalysisHash();
    public sealed virtual IHashableEntityInfo[] CalcAllHashes(string parentQualifiedName, String& qualifiedName);
    public virtual IHashableEntityInfo CalcMainHash(string parentQualifiedName, String& qualifiedName);
    private sealed virtual override IEnumerable`1<IXamlHashableEntity> JetBrains.ReSharper.Psi.Xaml.Impl.Tree.IXamlHashableEntity.get_Children();
    private sealed virtual override bool JetBrains.ReSharper.Psi.Xaml.Impl.Tree.IXamlHashableEntity.get_IsInternal();
    public sealed virtual bool get_IsAbstract();
    public sealed virtual bool get_IsSealed();
    public sealed virtual bool get_IsVirtual();
    public sealed virtual bool get_IsOverride();
    public sealed virtual bool get_IsStatic();
    public sealed virtual bool get_IsReadonly();
    public sealed virtual bool get_IsExtern();
    public sealed virtual bool get_IsUnsafe();
    public sealed virtual bool get_IsVolatile();
    public virtual AccessRights GetAccessRights();
    public virtual void SetAccessRights(AccessRights accessRights);
    public virtual bool get_HasAccessRights();
    public sealed virtual IType get_Type();
    public virtual void RemoveAttribute(IXmlAttribute attribute);
}
public static class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.XamlObjectElementNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null <= null")]
public static IXamlObjectElement GetByTag(IXamlTag tag);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null <= null")]
public static IXamlObjectElement GetByTagHeader(IXmlTagHeader header);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null <= null")]
public static IXamlObjectElement GetByTagFooter(IXmlTagFooter footer);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null <= null")]
public static IXamlObjectElement GetByAttribute(IXmlAttribute attribute);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null <= null")]
public static IXamlObjectElement GetBySetter(IPropertySetter setter);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.XamlPIAttribute : XamlAttribute {
    public XamlPIAttribute(XmlCompositeNodeType _type);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.XamlPropertyElement : XamlTag {
    private string myCachedTypeName;
    private string myCachedPropertyName;
    private TextRange myTypeNameRange;
    private TextRange myPropertyNameRange;
    private static char TYPE_DELIM;
    private static short VALUE_ROLE;
    public IMarkupAttributeValue Value { get; }
    public string TypeName { get; }
    public string PropertyName { get; }
    public ITypeMemberReference MemberReference { get; }
    public IReference TypeReference { get; }
    public IReference ContainingTypeReference { get; }
    public ITreeNode ValueElement { get; }
    public XamlPropertyElement(XmlCompositeNodeType type);
    public virtual short GetChildRole(TreeElement child);
    public IMarkupAttributeValue get_Value();
    public sealed virtual string get_TypeName();
    public sealed virtual string get_PropertyName();
    protected virtual ReferenceCollection CreateFirstClassReferences();
    public virtual ReferenceCollection CreateCustomReferences();
    private ReferenceCollection TryCreateGridDefinitionReferences();
    protected virtual ReferenceCollection CreateTokenReferences(IXmlToken token, TreeTextRange rangeWithin);
    public sealed virtual ITypeMemberReference get_MemberReference();
    public sealed virtual IReference get_TypeReference();
    public sealed virtual IReference get_ContainingTypeReference();
    public sealed virtual ITreeNode get_ValueElement();
    [CompilerGeneratedAttribute]
private IReference <CreateTokenReferences>b__17_0(IQualifier qualifier, IXmlToken node, TreeTextRange range, bool root, bool _);
    [CompilerGeneratedAttribute]
private IReference <CreateTokenReferences>b__17_1(IQualifier qualifier, IXmlToken node, TreeTextRange range, bool root, bool _);
    [CompilerGeneratedAttribute]
private IReference <CreateTokenReferences>b__17_2(IQualifier qualifier, IXmlToken node, TreeTextRange range, bool root, bool _);
    [CompilerGeneratedAttribute]
private IReference <CreateTokenReferences>b__17_3(IQualifier qualifier, IXmlToken node, TreeTextRange range, bool root, bool _);
    [CompilerGeneratedAttribute]
private IReference <CreateTokenReferences>b__17_4(IQualifier qualifier, IXmlToken node, TreeTextRange range, bool root, bool designTime);
    [CompilerGeneratedAttribute]
private IReference <CreateTokenReferences>b__17_5(IQualifier qualifier, IXmlToken node, TreeTextRange range, bool root, bool designTime);
}
public static class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.XamlPropertyElementNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null <= null")]
public static IXamlPropertyElement GetByTag(IXamlTag tag);
}
internal abstract class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.XamlTag : XmlTag {
    public int LevelDelta { get; }
    public TreeNodeCollection`1<INamespaceAlias> NamespaceAliases { get; }
    public TreeNodeEnumerable`1<INamespaceAlias> NamespaceAliasesEnumerable { get; }
    protected XamlTag(XmlCompositeNodeType type);
    public virtual ISymbolTable AddGlobalDeclarations(ISymbolTable parentTable, int level, SymbolTableMode mode);
    public virtual ISymbolTable AddDeclarationsBeforeElement(ISymbolTable parentTable, ITreeNode element, int level, SymbolTableMode mode);
    public virtual ISymbolTable AddDeclarationsAfterElement(ISymbolTable parentTable, ITreeNode element, int level, SymbolTableMode mode);
    public sealed virtual int get_LevelDelta();
    public sealed virtual TreeNodeCollection`1<INamespaceAlias> get_NamespaceAliases();
    public sealed virtual TreeNodeEnumerable`1<INamespaceAlias> get_NamespaceAliasesEnumerable();
    [CanBeNullAttribute]
public IXmlToken GetSingleInnerToken(TreeTextRange& rangeWithin);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.XamlTagExtensions : object {
    private static Key`1<CachedPsiValue`1<IReadOnlyList`1<IType>>> ourExpectedTypesKey;
    private static Key`1<CachedPsiValue`1<IReadOnlyList`1<IType>>> ourExpectedTypesWithCollectionKey;
    private static Key`1<CachedPsiValue`1<ContentTypeInfo>> ourObjectElementInfoKey;
    private static XamlTagExtensions();
    [ExtensionAttribute]
public static bool IsAllTokens(IXamlTag xamlTag);
    [ExtensionAttribute]
[NotNullAttribute]
public static string GetInnerText(IXamlTag xamlTag);
    [ExtensionAttribute]
public static ContentTypeInfo GetContentTypeInfo(IXamlObjectElement objectElement);
    [ExtensionAttribute]
public static IReadOnlyList`1<IType> GetExpectedTypesOfNestedElements(IXamlTag parentTag, bool returnCollectionElementTypeOnly);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.XamlTagFooterNode : XmlTagFooterNode {
    public ITypeMemberReference MemberReference { get; }
    public IReference ContainingTypeReference { get; }
    public IReference TypeReference { get; }
    public XamlTagFooterNode(XmlCompositeNodeType type);
    protected virtual ReferenceCollection CreateFirstClassReferences();
    public sealed virtual ITypeMemberReference get_MemberReference();
    public sealed virtual IReference get_ContainingTypeReference();
    public sealed virtual IReference get_TypeReference();
}
public static class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.XamlTagNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null <= null")]
public static IXamlTag GetByTag(IXamlTag tag);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null <= null")]
public static IXamlTag GetByTagHeader(IXmlTagHeader header);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null <= null")]
public static IXamlTag GetByTagFooter(IXmlTagFooter footer);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null <= null")]
public static IXamlTag GetByAttribute(IXamlAttribute attribute);
}
public class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.XamlToken : XmlToken {
    public XamlTokenTypes XamlTokenTypes { get; }
    public XamlToken(XmlTokenNodeType type, IBuffer buffer, TreeOffset startOffset, TreeOffset endOffset);
    public sealed virtual XamlTokenTypes get_XamlTokenTypes();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.XamlTypeDeclaration : XamlObjectElementDeclaration`1<IXClassAttribute> {
    private CachedPsiValue`1<DeviceFamilyData> myDeviceFamilyDataCachedPsiValue;
    private CachedPsiValue`1<IReadOnlyList`1<ITypeMemberDeclaration>> myMemberDeclarations;
    [CompilerGeneratedAttribute]
private IDeclaredElement <CacheDeclaredElement>k__BackingField;
    public IDeclaredElement CacheDeclaredElement { get; public set; }
    private ITypeElement JetBrains.ReSharper.Psi.Tree.ITypeDeclaration.DeclaredElement { get; }
    public IDeclaredElement DeclaredElement { get; }
    public IReadOnlyList`1<ITypeDeclaration> NestedTypeDeclarations { get; }
    public IEnumerable`1<ITypeDeclaration> NestedTypeDeclarationsEnumerable { get; }
    private IReadOnlyList`1<ITypeDeclaration> JetBrains.ReSharper.Psi.Tree.ITypeDeclarationHolder.TypeDeclarations { get; }
    public IEnumerable`1<ITypeDeclaration> TypeDeclarationsEnumerable { get; }
    public IReadOnlyList`1<ITypeMemberDeclaration> MemberDeclarations { get; }
    public string CLRName { get; }
    public String[] ExtendsList { get; }
    public bool DeviceFamilyViewsAllowed { get; }
    public DeviceFamilyData DeviceFamilyData { get; }
    public IEnumerable`1<IDeclaredType> SuperTypes { get; }
    public String[] NamespaceNames { get; }
    public TreeTextRange[] NamespaceRanges { get; }
    public string DeclaredName { get; }
    private IEnumerable`1<IXamlHashableEntity> JetBrains.ReSharper.Psi.Xaml.Impl.Tree.IXamlHashableEntity.Children { get; }
    private bool JetBrains.ReSharper.Psi.Xaml.Impl.Tree.IXamlHashableEntity.IsInternal { get; }
    public bool HasAccessRights { get; }
    public XamlTypeDeclaration(XmlCompositeNodeType type);
    [CompilerGeneratedAttribute]
public sealed virtual IDeclaredElement get_CacheDeclaredElement();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CacheDeclaredElement(IDeclaredElement value);
    private sealed virtual override ITypeElement JetBrains.ReSharper.Psi.Tree.ITypeDeclaration.get_DeclaredElement();
    public virtual IDeclaredElement get_DeclaredElement();
    public sealed virtual IReadOnlyList`1<ITypeDeclaration> get_NestedTypeDeclarations();
    public sealed virtual IEnumerable`1<ITypeDeclaration> get_NestedTypeDeclarationsEnumerable();
    private sealed virtual override IReadOnlyList`1<ITypeDeclaration> JetBrains.ReSharper.Psi.Tree.ITypeDeclarationHolder.get_TypeDeclarations();
    public sealed virtual IEnumerable`1<ITypeDeclaration> get_TypeDeclarationsEnumerable();
    public sealed virtual IReadOnlyList`1<ITypeMemberDeclaration> get_MemberDeclarations();
    protected virtual void PreInit();
    public sealed virtual string get_CLRName();
    public sealed virtual String[] get_ExtendsList();
    private void CreateXClassAttribute(string namespaceName, string className);
    public virtual void SetName(string newName);
    public sealed virtual void SetNamespaceName(int namespacePartsCount, string newName);
    public sealed virtual void SetNamespaceName(string newName);
    public sealed virtual bool get_DeviceFamilyViewsAllowed();
    public sealed virtual DeviceFamilyData get_DeviceFamilyData();
    public sealed virtual IEnumerable`1<IDeclaredType> get_SuperTypes();
    public sealed virtual String[] get_NamespaceNames();
    public sealed virtual TreeTextRange[] get_NamespaceRanges();
    protected virtual bool CanDeclareElementWith(IXClassAttribute nameAttribute);
    public virtual string get_DeclaredName();
    protected virtual ReferenceCollection CreateFirstClassReferences();
    public virtual ReferenceCollection CreateCustomReferences();
    protected virtual IDeclaredElement CreateDeclaredElement();
    public virtual bool CanBeBoundTo(IDeclaredElement element);
    protected virtual Hash CalcHashInternal();
    public virtual IHashableEntityInfo CalcMainHash(string parentQualifiedName, String& qualifiedName);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Psi.Xaml.Impl.Tree.XamlTypeDeclaration/<JetBrains-ReSharper-Psi-Xaml-Impl-Tree-IXamlHashableEntity-get_Children>d__51")]
private sealed virtual override IEnumerable`1<IXamlHashableEntity> JetBrains.ReSharper.Psi.Xaml.Impl.Tree.IXamlHashableEntity.get_Children();
    private sealed virtual override bool JetBrains.ReSharper.Psi.Xaml.Impl.Tree.IXamlHashableEntity.get_IsInternal();
    public virtual AccessRights GetAccessRights();
    public virtual void SetAccessRights(AccessRights accessRights);
    public virtual bool get_HasAccessRights();
}
public class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.XamlValueToken : XmlValueToken {
    public XamlTokenTypes XamlTokenTypes { get; }
    public XamlValueToken(XmlTokenNodeType type, IBuffer buffer, TreeOffset startOffset, TreeOffset endOffset);
    public sealed virtual XamlTokenTypes get_XamlTokenTypes();
}
internal abstract class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.XAttributeBase : KeywordAttribute {
    [NotNullAttribute]
public string DeclaredName { get; }
    protected XAttributeBase(XmlCompositeNodeType type, string attributeName);
    protected virtual void CreateFirstClassReferencesInternal(IXmlAttributeValue value, IList`1<IReference> result);
    public virtual string get_DeclaredName();
    public virtual TreeTextRange GetNameRange();
    public virtual void SetName(string newName);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.XBindMarkup : Markup {
    public IMarkupAttribute ModeAttribute { get; }
    public IMarkupAttribute PathAttribute { get; }
    public IMarkupAttribute BindBackAttribute { get; }
    public IMarkupAttribute UpdateSourceTriggerAttribute { get; }
    public IMarkupAttribute FallbackValue { get; }
    public BindingMode Mode { get; }
    public IPathValue Path { get; }
    public IPathValue BindBack { get; }
    public UpdateSourceTrigger UpdateSourceTrigger { get; }
    public XBindMarkup(XmlCompositeNodeType type);
    public sealed virtual IMarkupAttribute get_ModeAttribute();
    public sealed virtual IMarkupAttribute get_PathAttribute();
    public sealed virtual IMarkupAttribute get_BindBackAttribute();
    public sealed virtual IMarkupAttribute get_UpdateSourceTriggerAttribute();
    public sealed virtual IMarkupAttribute get_FallbackValue();
    public sealed virtual BindingMode get_Mode();
    public sealed virtual IPathValue get_Path();
    public sealed virtual IPathValue get_BindBack();
    public sealed virtual UpdateSourceTrigger get_UpdateSourceTrigger();
    public sealed virtual void SetBindingMode(BindingMode bindingMode);
    public sealed virtual void AddBindBack();
    private sealed virtual override TReturn JetBrains.ReSharper.Psi.Xml.Tree.IXmlTreeNode.AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.XClassAttribute : XAttributeBase {
    public string DeclaredName { get; }
    public String[] NamespaceNames { get; }
    public TreeTextRange[] NamespaceTreeTextRanges { get; }
    public XClassAttribute(XmlCompositeNodeType type);
    public virtual string get_DeclaredName();
    public virtual TreeTextRange GetNameRange();
    public sealed virtual String[] get_NamespaceNames();
    public sealed virtual TreeTextRange[] get_NamespaceTreeTextRanges();
    public sealed virtual void SetNamespaceName(string newName);
    public sealed virtual void SetNamespaceName(int namespacePartsCount, string newName);
    private static int ParseValue(string value, bool nspace, Int32& count);
    protected virtual void CreateFirstClassReferencesInternal(IXmlAttributeValue value, IList`1<IReference> result);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.XCodeElement : KeywordObjectElement {
    public XCodeElement(XmlCompositeNodeType _type);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.XDataElement : KeywordObjectElement {
    public XDataElement(XmlCompositeNodeType type);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.XKeyAttribute : XAttributeBase {
    public string DeclaredName { get; }
    public IReference KeyTypeReference { get; }
    public IReference StaticMemberReference { get; }
    public XKeyAttribute(XmlCompositeNodeType type);
    [CanBeNullAttribute]
private IXamlIdentifier GetResourceIdNode();
    public virtual string get_DeclaredName();
    public virtual TreeTextRange GetNameRange();
    public virtual void SetName(string newName);
    public sealed virtual IReference get_KeyTypeReference();
    public sealed virtual IReference get_StaticMemberReference();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.XKeyElement : KeywordObjectElement {
    public string DeclaredName { get; }
    public IReference KeyTypeReference { get; }
    public IReference StaticMemberReference { get; }
    public XKeyElement(XmlCompositeNodeType type);
    [NotNullAttribute]
private string GetDeclaredName(TreeTextRange& treeRange);
    public sealed virtual string get_DeclaredName();
    public sealed virtual TreeTextRange GetNameRange();
    public sealed virtual void SetName(string newName);
    public sealed virtual IReference get_KeyTypeReference();
    public sealed virtual IReference get_StaticMemberReference();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.XmlDataProviderDeclaration : ResourceDeclaration {
    public XmlDataProviderDeclaration(XmlCompositeNodeType type);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.XmlLangAttribute : KeywordAttribute {
    public XmlLangAttribute(XmlCompositeNodeType type);
    protected virtual void CreateFirstClassReferencesInternal(IXmlAttributeValue value, IList`1<IReference> result);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.XmlSpaceAttribute : KeywordAttribute {
    public XmlSpaceAttribute(XmlCompositeNodeType type);
    protected virtual void CreateFirstClassReferencesInternal(IXmlAttributeValue value, IList`1<IReference> result);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.XNameAttribute : XAttributeBase {
    public XNameAttribute(XmlCompositeNodeType type);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.XNameInClassOrResourceAttribute : XAttributeBase {
    [CompilerGeneratedAttribute]
private IDeclaredElement <JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ICachedTypeMemberDeclaration.CachedDeclaredElement>k__BackingField;
    private IDeclaredElement JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ICachedTypeMemberDeclaration.CachedDeclaredElement { get; private set; }
    public IDeclaredElement DeclaredElement { get; }
    private IEnumerable`1<IXamlHashableEntity> JetBrains.ReSharper.Psi.Xaml.Impl.Tree.IXamlHashableEntity.Children { get; }
    private bool JetBrains.ReSharper.Psi.Xaml.Impl.Tree.IXamlHashableEntity.IsInternal { get; }
    private ITypeMember JetBrains.ReSharper.Psi.Tree.ITypeMemberDeclaration.DeclaredElement { get; }
    public bool IsAbstract { get; }
    public bool IsSealed { get; }
    public bool IsVirtual { get; }
    public bool IsOverride { get; }
    public bool IsStatic { get; }
    public bool IsReadonly { get; }
    public bool IsExtern { get; }
    public bool IsUnsafe { get; }
    public bool IsVolatile { get; }
    public bool HasAccessRights { get; }
    public IType Type { get; }
    public XNameInClassOrResourceAttribute(XmlCompositeNodeType type);
    [CompilerGeneratedAttribute]
private sealed virtual override IDeclaredElement JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ICachedTypeMemberDeclaration.get_CachedDeclaredElement();
    [CompilerGeneratedAttribute]
private sealed virtual override void JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ICachedTypeMemberDeclaration.set_CachedDeclaredElement(IDeclaredElement value);
    public sealed virtual IDeclaredElement get_DeclaredElement();
    protected virtual void PreInit();
    public sealed virtual bool CanBeBoundTo(IDeclaredElement element);
    public sealed virtual IEnumerable`1<string> GetPossibleDeclaredNames();
    private IDeclaredElement CreateDeclaredElement();
    public sealed virtual IHashableEntityInfo[] CalcAllHashes(string parentQualifiedName, String& qualifiedName);
    public IHashableEntityInfo CalcMainHash(string parentQualifiedName, String& qualifiedName);
    private sealed virtual override IEnumerable`1<IXamlHashableEntity> JetBrains.ReSharper.Psi.Xaml.Impl.Tree.IXamlHashableEntity.get_Children();
    private sealed virtual override bool JetBrains.ReSharper.Psi.Xaml.Impl.Tree.IXamlHashableEntity.get_IsInternal();
    public sealed virtual void SetName(string name);
    public sealed virtual XmlNode GetXMLDoc(bool inherit);
    public sealed virtual bool IsSynthetic();
    public sealed virtual ITypeDeclaration GetContainingTypeDeclaration();
    private sealed virtual override ITypeMember JetBrains.ReSharper.Psi.Tree.ITypeMemberDeclaration.get_DeclaredElement();
    public sealed virtual bool get_IsAbstract();
    public sealed virtual bool get_IsSealed();
    public sealed virtual bool get_IsVirtual();
    public sealed virtual bool get_IsOverride();
    public sealed virtual bool get_IsStatic();
    public sealed virtual bool get_IsReadonly();
    public sealed virtual bool get_IsExtern();
    public sealed virtual bool get_IsUnsafe();
    public sealed virtual bool get_IsVolatile();
    public sealed virtual bool get_HasAccessRights();
    public sealed virtual AccessRights GetAccessRights();
    public sealed virtual void SetAccessRights(AccessRights accessRights);
    public sealed virtual IType get_Type();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.XReferenceElement : XamlObjectElement {
    public IElementNameReference ElementNameReference { get; }
    public XReferenceElement(XmlCompositeNodeType type);
    public sealed virtual IElementNameReference get_ElementNameReference();
    public virtual ReferenceCollection CreateCustomReferences();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Tree.XTypeElement : XamlObjectElement {
    private static short TYPE_EXPRESSION_ROLE;
    public IReference TypeReference { get; }
    public XTypeElement(XmlCompositeNodeType type);
    public virtual short GetChildRole(TreeElement child);
    public virtual IReference get_TypeReference();
    public virtual ReferenceCollection CreateCustomReferences();
}
public static class JetBrains.ReSharper.Psi.Xaml.Impl.Util.AttachedMembersUtil : object {
    public static bool IsTypeAttachable(ITreeNode element, IType type);
    public static IXamlAttachedEvent WrapAccessorToEvent(IMethod accessor);
    public static IXamlAttachedProperty WrapSetterToProperty(IMethod setMethod);
    public static bool CanBeAccessor(IOverridableMember member);
    [CanBeNullAttribute]
internal static string WithoutPrefix(string text, string prefix);
    [CanBeNullAttribute]
internal static string WithoutSuffix(string text, string suffix);
    [CanBeNullAttribute]
internal static string WithoutPrefixAndSuffix(string text, string prefix, string suffix);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Psi.Xaml.Impl.Util.AvaloniaCompiledBindingsHelpers : object {
    private static Key`1<CachedPsiValue`1<bool>> FORCED_COMPILED_BINDINGS;
    private static AvaloniaCompiledBindingsHelpers();
    [ExtensionAttribute]
public static bool IsAvaloniaCompiledBinding(ITreeNode element);
    [ExtensionAttribute]
private static bool ForcedCompileBindings(IXamlTag tag);
    private static bool CalculateForcedCompileBindings(IXamlTag tag);
    private static bool CompileBindingsByDefault(IPsiSourceFile psiSourceFile);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Psi.Xaml.Impl.Util.BindingUtil : object {
    [NotNullAttribute]
public static IType CalculateSourceType(ITreeNode initialContext, IXamlObjectElement& objectElement);
    [NotNullAttribute]
public static IType CalculateSourceType(ITreeNode initialContext, IXamlObjectElement& objectElement, ITreeNode& contextSource);
    [CanBeNullAttribute]
public static IType TryGetSourceTypeByCurrentContext(ITreeNode currentContext, ITreeNode initialContext, IXamlObjectElement& objectElement);
    [NotNullAttribute]
private static IType CalculateSourceTypeByPath(IBinding binding, IXamlObjectElement& objectElement);
    [CanBeNullAttribute]
private static IType CalculateSourceTypeByName(IBinding binding, IXamlObjectElement& objectElement);
    [CanBeNullAttribute]
private static IType CalculateSourceTypeBySource(IBinding binding, IXamlObjectElement& objectElement);
    [CanBeNullAttribute]
private static IType CalculateSourceTypeByRelativeSource(IBinding binding, IRelativeSourceUsage relativeSourceUsage, IXamlObjectElement& objectElement);
    private static IType CalculateSourceTypeByTemplateSelectorOrControlTemplateDeclaration(IBinding binding, IXamlObjectElement& objectElement);
    private static IType CalculateSourceTypeByControlTemplateDeclaration(IControlTemplateDeclaration declaration, IXamlObjectElement& objectElement);
    [CanBeNullAttribute]
public static IType CalculateSourceTypeByRelativeSourceExpression(IRelativeSourceExpression relativeSourceExpression, IXamlObjectElement& objectElement);
    [CanBeNullAttribute]
private static IType CalculateSourceTypeBySelf(IBinding binding, IXamlObjectElement& objectElement);
    [CanBeNullAttribute]
private static IType CalculateSourceTypeByFindAccessor(IBinding binding, IRelativeSourceUsage relativeSourceUsage, IXamlObjectElement& objectElement);
    [CanBeNullAttribute]
private static IType CalculateSourceTypeByFindAccessor(IBinding binding, IType ancestorType, int ancestorLevel, bool skipSelf, IXamlObjectElement& objectElement);
    [CanBeNullAttribute]
private static IType CalculateSourceTypeLocal(IBinding binding, ITreeNode originalBinding, IXamlObjectElement& objectElement);
    [NotNullAttribute]
private static IType TryUnwrapCollectionViewSourceToCollectionView(IBinding binding, IType type);
    [CanBeNullAttribute]
private static IType CalculateSourceTypeByValueConverter(IBinding binding, IXamlObjectElement& objectElement);
    [CanBeNullAttribute]
private static IType CalculateTypeByXReference(IXReference xReference, IXamlObjectElement& objectElement);
    [CanBeNullAttribute]
public static IType CalculateTypeByPropertyValue(ITreeNode propertySetter, IXamlObjectElement& objectElement, bool allowDataProviders);
    [CanBeNullAttribute]
private static IType TryCalculateTypeByTreeNode(ITreeNode treeNode, IXamlObjectElement& element, bool allowDataProviders);
    [CanBeNullAttribute]
public static IType CalculateTypeByMarkup(IMarkup markup, IXamlObjectElement& element, bool allowDataProviders);
    [CanBeNullAttribute]
private static IType CalculateSourceTypeByDesignTimeMarkup(IMarkup markupElement, IXamlObjectElement& element);
    [CanBeNullAttribute]
private static IType GetTypeByObjectElement(IXamlObjectElement element, IXamlObjectElement& objectElement);
    [CanBeNullAttribute]
public static IType GetTypeByResourceUsage(IResourceUsage resourceUsage, IXamlObjectElement& objectElement, bool allowDataProviders);
    [CanBeNullAttribute]
private static IType GetTypeByObjectDataProvider(IObjectDataProviderDeclaration dataProvider);
    [CanBeNullAttribute]
private static IType GetTypeByMemberBinding(IPropertySetter propertySetter, IXamlObjectElement& objectElement);
    [CanBeNullAttribute]
private static IType GetItemTypeByItemsControlPropertySetter(IPropertySetter propertySetter, string expectedTypeMemberName, IXamlObjectElement& element);
    [CanBeNullAttribute]
public static IType GetTypeByDataTemplate(IDataTemplateDeclaration dataTemplateDeclaration, IXamlObjectElement& element);
    [CanBeNullAttribute]
public static IType GetTypeByTemplateParent(IXamlObjectElement element, IXamlObjectElement& objectElement, string propertyName);
    [CanBeNullAttribute]
private static IType GetTypeByTemplateParentItemsSource(IPropertySetter sourceSetter, IXamlObjectElement& objectElement, bool allowDataProviders);
    private static bool IsItemStyleOfItemsControlPropertySetter(IPropertySetter propertySetter);
    [CanBeNullAttribute]
public static ITreeNode GetParentDataContextValue(ITreeNode binding);
    [CanBeNullAttribute]
public static TreeElement FindDescendantWithType(IPropertyAttribute attribute);
    private static bool CanHaveType(ITreeNode element);
    [ExtensionAttribute]
public static string GetModeValue(BindingMode mode);
    public static BindingMode GetMode(string modeValue);
    [CanBeNullAttribute]
public static IElementNameReference GetElementNameReference(ITreeNode element);
    [CanBeNullAttribute]
[PureAttribute]
public static IBinding GetContainingBinding(ITreeNode element);
    [CanBeNullAttribute]
[PureAttribute]
public static IXBindMarkup GetContainingXBinding(ITreeNode element);
    [ExtensionAttribute]
[PureAttribute]
public static bool IsBindingToEvent(IXBindMarkup markup);
    [CanBeNullAttribute]
public static IXamlObjectElement TryGetOtherElementDataContext(IBinding binding);
    [NotNullAttribute]
private static IType GetCompiledBindingSourceType(IXBindMarkup binding, IXamlObjectElement& sourceElement);
    public static Nullable`1<BindingMode> TryGetMode(IXamlObjectElement element);
    public static IXamlObjectElement TryGetContainingMultiBindingElement(ITreeNode element);
    [ExtensionAttribute]
public static bool IsXamarinXDataTypeAttribute(IPropertyAttribute propertyAttribute);
    [ExtensionAttribute]
public static bool IsAvaloniaXDataTypeAttribute(IPropertyAttribute propertyAttribute);
    [ExtensionAttribute]
public static bool IsDataContextAttribute(IPropertyAttribute propertyAttribute);
    [ExtensionAttribute]
public static bool IsDataContextPropertyElement(IXamlPropertyElement propertyElement);
    [ExtensionAttribute]
public static bool IsXamarinFormsBindingContextPropertyElement(IXamlPropertyElement propertyElement, Nullable`1<bool> isXamarinForms);
    [ExtensionAttribute]
public static BindingMode GetDefaultBindingMode(IXBindMarkup markup);
    [ExtensionAttribute]
public static Nullable`1<BindingMode> TryGetDefaultBindingMode(ITypeMemberReference memberReference);
    public static bool IsStrongDataContextTypeInferrable(IBinding initialBinding);
}
public static class JetBrains.ReSharper.Psi.Xaml.Impl.Util.CornerRadiusUtil : object {
    public static string NonNegativeDoubleValueExpected;
    private static CornerRadiusUtil();
    public static string ValidateNonNegativeDoubleValue(string value);
}
public static class JetBrains.ReSharper.Psi.Xaml.Impl.Util.DependencyPropertyUtil : object {
    public static TreeTextRange GetPropertyRanges(string text, TreeTextRange& namespaceRange, TreeTextRange& typeRange);
    [NotNullAttribute]
internal static ISymbolTable GetCompletionSymbolTable(TReference reference, bool isSmart, Func`2<TReference, IEnumerable`1<MultiNameResolveEntry>> getFilters);
    private static bool IsReferenceWithoutTargetType(ITreeNode element);
    [CanBeNullAttribute]
internal static IXamlTypeReference GetTargetTypeReference(ITreeNode element);
    [CanBeNullAttribute]
internal static IQualifier GetTargetTypeQualifier(ITreeNode element);
    public static ReferenceCollection CreateDependencyPropertyReferences(ITreeNode element, IXmlToken token, TreeTextRange rangeWithin);
    private static ReferenceCollection CreateDottedPathPropertyReferences(ITreeNode element, IXmlToken token, TreeTextRange rangeWithin);
    private static ReferenceCollection CreateDependencyPropertyReferences(ITreeNode element, IXmlToken token, TreeTextRange rangeWithin, bool isSetter, bool isTemplateBinding);
    [NotNullAttribute]
internal static IXamlNamespaceAliasReference GetAliasReference(ITreeNode element, IXmlToken token, TreeTextRange rangeWithin, TreeTextRange& typeRange, TreeTextRange& propertyRange);
    public static bool IsDependencyPropertyDeclaration(IField field, IXamlTypeCache cache);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Psi.Xaml.Impl.Util.DesignTimeMarkupUtil : object {
    [ExtensionAttribute]
public static bool IsDesignTimeDataContextSetter(IPropertySetter propertySetter);
    [ExtensionAttribute]
public static bool IsDesignTimeItemsSourceSetter(IPropertySetter propertySetter);
    [ExtensionAttribute]
public static bool IsDesignTimeMarkup(IMarkup markup);
    [ExtensionAttribute]
public static bool IsDesignInstanceMarkup(IMarkup markup);
    [ExtensionAttribute]
public static bool IsInstanceDesignTimeCreatable(IMarkup markup);
    [ExtensionAttribute]
public static bool IsDesignDataMarkup(IMarkup markup);
    [ExtensionAttribute]
public static bool IsDesignDataSourceAttribute(IMarkupAttribute markupAttribute);
    [ExtensionAttribute]
public static bool IsDesignSourceAttribute(IPropertySetter propertySetter);
    [ExtensionAttribute]
public static bool IsDesignDesignSourceAttribute(IPropertySetter propertySetter);
    [ExtensionAttribute]
public static bool IsDesignInstanceTypeAttribute(IMarkupAttribute markupAttribute);
    [ExtensionAttribute]
public static bool IsDesignInstanceDesignTimeCreatableAttribute(IMarkupAttribute markupAttribute);
    [ExtensionAttribute]
public static bool IsDesignInstanceCreateListAttribute(IMarkupAttribute markupAttribute);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IType GetDesignDataContextType(IMarkup markup);
    [ExtensionAttribute]
public static bool IsDesignInstanceTypeValue(IIdentifierMarkupValue value);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Psi.Xaml.Impl.Util.ElementValueUtil : object {
    [ExtensionAttribute]
[ContractAnnotationAttribute("null <= null")]
public static IMarkup GetMarkupValue(IPropertyAttributeValue propertyValue);
    [ExtensionAttribute]
[ContractAnnotationAttribute("null <= null")]
public static IMarkup GetMarkupValue(IMarkupAttributeValue markupValue);
    [ExtensionAttribute]
[ContractAnnotationAttribute("null <= null")]
public static IXamlObjectElement GetElementValue(IXamlPropertyElement propertyElement);
    [ExtensionAttribute]
[ContractAnnotationAttribute("null <= null")]
public static ITreeNode GetNodeValue(IPropertySetter propertySetter);
    [ExtensionAttribute]
[ContractAnnotationAttribute("null <= null;")]
public static ITreeNode GetNodeValue(ITreeNode propertyNode);
    [ExtensionAttribute]
[ContractAnnotationAttribute("null <= null")]
public static string GetStringValue(IPropertyAttribute propertyAttribute);
    [ExtensionAttribute]
[ContractAnnotationAttribute("null <= null")]
public static string GetStringValue(IXamlObjectElement objectElement);
    [ExtensionAttribute]
[ContractAnnotationAttribute("null <= null")]
public static string GetStringValue(IXamlPropertyElement propertyElement);
    [ExtensionAttribute]
[ContractAnnotationAttribute("null <= null")]
public static string GetStringValue(IPropertySetter propertySetter);
    [ExtensionAttribute]
[ContractAnnotationAttribute("null <= null")]
public static string GetStringValue(IMarkupAttribute markupAttribute);
    [ExtensionAttribute]
[ContractAnnotationAttribute("value: null => null")]
public static string GetStringValue(IMarkupAttributeValue value, bool anyToText);
    [ExtensionAttribute]
[NotNullAttribute]
public static IPropertyAttributeValue SetStringValue(IPropertyAttribute attribute, string unquotedValue, bool disableEscaping);
    [ExtensionAttribute]
[NotNullAttribute]
public static TMarkup SetMarkupValue(IPropertyAttribute attribute, TMarkup markup);
    [ExtensionAttribute]
[NotNullAttribute]
public static TMarkupValue SetMarkupAttributeValue(IPropertyAttribute attribute, TMarkupValue attributeValue);
    [ExtensionAttribute]
public static void SetStringValue(IMarkupAttribute attribute, string unquotedValue, bool disableEscaping);
    [ExtensionAttribute]
public static void SetStringValue(IXamlTag element, string unquotedValue, bool disableEscaping, bool preserveSpaceIfNot);
    [ExtensionAttribute]
public static void SetInnerXmlValue(IXamlTag element, IXamlTag valueTag);
}
public static class JetBrains.ReSharper.Psi.Xaml.Impl.Util.FactoryMethodUtil : object {
    public static ReferenceCollection CreateFactoryMethodReference(ITreeNode owner, IXmlToken token, TreeTextRange rangeWithin);
}
public interface JetBrains.ReSharper.Psi.Xaml.Impl.Util.IXamlCodeBehindTypeConversionRuleProvider {
    [NotNullAttribute]
public abstract virtual ITypeConversionRule GetTypeConversionRule(IPsiModule module, bool useStrict);
}
public static class JetBrains.ReSharper.Psi.Xaml.Impl.Util.LengthUtil : object {
    public static String[] PixelUnitStrings;
    public static string ExpectedFormat;
    private static LengthUtil();
    [CanBeNullAttribute]
public static bool ValidateLengthArgument(string argument);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Psi.Xaml.Impl.Util.MarkupCompatibilityUtil : object {
    [ExtensionAttribute]
public static bool IsIgnorableAttribute(IXamlAttribute attribute);
    [ExtensionAttribute]
public static bool IsChoiceRequiredAttribute(IXamlAttribute attribute);
    [ExtensionAttribute]
public static bool IsIgnoredAttribute(IXamlAttribute attribute);
    public static bool IsIgnorableReference(IQualifiableReference reference);
    public static bool IsNamespaceIgnored(IXamlTag tag, INamespaceAlias namespaceAlias);
}
public static class JetBrains.ReSharper.Psi.Xaml.Impl.Util.MarkupReferenceUtil : object {
    public static ResolveResultWithInfo FixResolvePropertyReference(ResolveResultWithInfo result, ITreeNode context, IDeclaredType contextType);
    private static bool IsDynamicReference(ResolveResultWithInfo resolveResult, ITreeNode context, IDeclaredType contextType);
}
[DebuggerDisplayAttribute("MergedResourcesSymbolTable ({Constituents.Length,nq} tables)")]
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Util.MergedResourcesSymbolTable : SymbolTableBase {
    [DebuggerBrowsableAttribute("0")]
[NotNullAttribute]
private ISymbolTable[] myTables;
    [DebuggerBrowsableAttribute("0")]
[CanBeNullAttribute]
private Dictionary`2<object, ISymbolInfo> myCache;
    [DebuggerBrowsableAttribute("3")]
[NotNullAttribute]
public ISymbolTable[] Constituents { get; }
    internal MergedResourcesSymbolTable(ISymbolTable[] tables);
    public ISymbolTable[] get_Constituents();
    public virtual IList`1<ISymbolInfo> GetSymbolInfos(string name);
    public virtual void AppendSymbolInfos(string name, List`1<ISymbolInfo> consumer);
    public virtual bool ForAllSymbolInfos(TState state, Func`3<TState, ISymbolInfo, bool> processor);
    private static void MergeRule(ISymbolInfo symbolInfo, Dictionary`2<object, ISymbolInfo> resources);
    public virtual IEnumerable`1<string> Names();
    [NotNullAttribute]
public virtual ISymbolTableDependencySet GetDependencySet();
    public sealed virtual void AddDependenciesTo(IDependencyStore store, string accessName);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Util.MergedResourceSymbolInfo : ResourceSymbolInfo {
    [NotNullAttribute]
private List`1<ISymbolInfo> myMergedInfos;
    [NotNullAttribute]
public List`1<ISymbolInfo> MergedResources { get; }
    public MergedResourceSymbolInfo(ResourceSymbolInfo info1, ResourceSymbolInfo info2);
    public List`1<ISymbolInfo> get_MergedResources();
}
public static class JetBrains.ReSharper.Psi.Xaml.Impl.Util.ModifierKeysUtil : object {
    private static string CONTROL;
    private static string CONTROL_ALIAS;
    private static string WINDOWS_ALIAS;
    private static string WINDOWS;
    public static string MODIFIERS_KEY;
    public static bool IsModifierKeysType(IType type);
    public static IList`1<string> GetAllNames(string name);
    public static bool IsShortAlias(string name);
    public static string GetOriginalName(string name);
}
public static class JetBrains.ReSharper.Psi.Xaml.Impl.Util.ModifiersUtil : object {
    [CanBeNullAttribute]
public static string GetDefaultValue(IXamlAttribute attribute);
    public static AccessRights GetDefaultRights(ITreeNode context, string attributeName);
    public static bool IsDefaultValue(IXamlAttribute attribute);
    [CanBeNullAttribute]
public static string GetPublicString(ITreeNode context);
    [CanBeNullAttribute]
public static string GetInternalString(ITreeNode context);
    [CanBeNullAttribute]
public static string GetProtectedString(ITreeNode context);
    [CanBeNullAttribute]
public static string GetPrivateString(ITreeNode context);
    [CanBeNullAttribute]
private static IXamlModifiersSupport GetModifiersSupport(ITreeNode context);
    [NotNullAttribute]
public static IList`1<string> GetValidModifierStrings(IModifiersAttribute attribute);
    public static AccessRights ResolveAccessRight(IXamlObjectElement objectElement, string attributeName, Nullable`1<AccessRights> defaultRights);
    public static Nullable`1<AccessRights> TryResolveAccessRight(IModifiersAttribute attribute);
    public static void SetAccessRight(IXamlObjectElement objectElement, string attributeName, AccessRights rights);
    private static string RenderAccessRights(IXamlModifiersSupport support, AccessRights rights);
}
public static class JetBrains.ReSharper.Psi.Xaml.Impl.Util.NameInClassOrResourceAttributeUtil : object {
    [NotNullAttribute]
public static IType GetType(INameInClassOrResourceAttribute attribute);
    public static AccessRights GetAccessRights(INameInClassOrResourceAttribute attribute);
    public static void SetAccessRights(INameInClassOrResourceAttribute attribute, AccessRights accessRights);
}
public static class JetBrains.ReSharper.Psi.Xaml.Impl.Util.NamespaceAliasesUtil : object {
    public static Dictionary`2<INamespaceAlias, bool> GetRedundantNamespaceAliases(IXamlFile file);
}
public static class JetBrains.ReSharper.Psi.Xaml.Impl.Util.NamespaceAliasUtil : object {
    public static string DEFAULT_NAME;
    public static string TEMPORARY_NAME;
    public static string CLR_NAMESPACE;
    public static string URN;
    public static string USING_NAMESPACE;
    public static string ASSEMBLY_QUALIFIER;
    public static ISymbolFilter[] NAMESPACE_ALIAS_FILTERS;
    private static NamespaceAliasUtil();
    [NotNullAttribute]
public static ISymbolFilter[] GetNamespaceAliasFilters(IReference reference);
    private static bool TryBindReferenceToExistingAlias(IXamlNamespaceAliasReference& referenceToBind, IXamlTag tag, INamespace targetNamespace, IPsiModule targetModule, JetHashSet`1<string> namesToIgnore);
    private static void BindNamespaceAliasReferences(INamespace nameSpace, IPsiModule module, IXamlTypeDeclaration typeDeclaration, IList`1<IReference> aliasReferences, bool preserveAliasName);
    private static bool BindNamespaceAliasReferencesToExisting(INamespace nameSpace, IPsiModule module, JetHashSet`1<IReference> references);
    [NotNullAttribute]
public static string CreateNamespaceAliasPrefix(INamespace nameSpace, ITreeNode context);
    [NotNullAttribute]
public static string CreateAliasValue(INamespace nameSpace, IPsiModule targetModule, ITreeNode context);
    [CanBeNullAttribute]
public static string GetXamlModuleName(IPsiModule targetModule, ITreeNode context);
    private static bool IsValidAliasName(PsiLanguageType language, string aliasName);
    public static void BindNamespaceAliasReferences(INamespace namespace, IPsiModule module, bool preserverAliasName, IReference[] aliasReferences);
    public static bool IsReferenceBound(IXamlNamespaceAliasReference aliasReference, INamespace targetNamespace, IPsiModule targetModule);
    public static IList`1<string> GetAvailableUriNamespaces(INamespaceAlias namespaceAlias);
    [NotNullAttribute]
public static IList`1<TreeTextRange> ParseNamespaceRanges(INamespaceAlias alias);
    public static AssemblyNameRanges ParseAssemblyNameRange(INamespaceAlias alias);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Psi.Xaml.Impl.Util.PresentationOptionsUtil : object {
    [ExtensionAttribute]
public static bool IsFreezeAttribute(IXamlAttribute attribute);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Psi.Xaml.Impl.Util.PropertyAttributeUtil : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static IType GetPropertyType(ITreeNode node);
    [CanBeNullAttribute]
private static ITypeMemberUsage GetBoundTypeMember(ITreeNode node);
    public static bool IsStyleSetterValue(ITypeMemberUsage typeMemberUsage, IType& targetPropertyType);
}
internal static class JetBrains.ReSharper.Psi.Xaml.Impl.Util.PropertyReferenceUtil : object {
    public static ReferenceCollection CreatePropertyReferences(ITreeNode owner, IXamlIdentifier identifier, bool isMarkup);
}
public static class JetBrains.ReSharper.Psi.Xaml.Impl.Util.ReferenceUtil : object {
    private static Key`1<ProjectFileType> ProjectLanguageTypeKey;
    private static Key`1<PsiLanguageType> PsiLanguageTypeKey;
    [NotNullAttribute]
private static Char[] ourModifierKeysSeparatorChars;
    [NotNullAttribute]
private static Char[] ourSeparatorChars;
    private static ReferenceUtil();
    public static PsiLanguageType GetProjectLanguage(ITreeNode element);
    public static bool PsiModuleMatchesName(IPsiModule module, string moduleName);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Psi.Xaml.Impl.Util.ReferenceUtil/<GetReferencedModules>d__4")]
public static IEnumerable`1<IPsiModule> GetReferencedModules(IPsiModule currentModule, string moduleName);
    public static bool IsSubtypeOf(IType child, IDeclaredType parent);
    public static TReference GetReference(ITreeNode element);
    public static TReference GetFirstClassReference(ITreeNode element);
    public static TReference GetSecondClassReference(ITreeNode element);
    public static TReference GetLastSecondClassReference(ITreeNode element);
    [CanBeNullAttribute]
public static TReference GetReferenceRecursive(ITreeNode element, Predicate`1<TReference> predicate);
    [ContractAnnotationAttribute("null <= null")]
[CanBeNullAttribute]
[PureAttribute]
public static IType GetType(IReference typeReference);
    [CanBeNullAttribute]
[PureAttribute]
public static IType GetType(IReference typeReference, IResolveResult resolveResult);
    [NotNullAttribute]
[PureAttribute]
public static IType GetType(IXamlObjectElement objectElement);
    [NotNullAttribute]
public static IType GetType(ITypeUsage typeUsage);
    [NotNullAttribute]
public static IType GetType(IMarkup markup);
    [NotNullAttribute]
public static IType GetPropertyType(ITypeMemberUsage memberUsage);
    [NotNullAttribute]
public static IType GetPropertyType(IReference reference);
    public static ReferenceCollection CreateTypeReferences(ITreeNode element, IXmlToken token, XamlTypeReferenceType typeReferenceType);
    public static ReferenceCollection CreateTypeReferences(ITreeNode element, IXmlToken token, TreeTextRange typeRange, XamlTypeReferenceType typeReferenceType);
    public static ReferenceCollection CreateValueReferences(IValueReferenceData valueReferenceData, TreeTextRange rangeWithin, IXmlToken token, ITreeNode owner);
    private static ISymbolFilter[] GetCustomFilters(ITreeNode owner);
    public static ReferenceCollection CreateValueReferences(ITypeMemberReference reference, ITreeNode owner, IXmlToken token, TreeTextRange rangeWithin);
    internal static ReferenceCollection CreateReferencesWithNamespaceAlias(ITreeNode element, IXmlToken token, TreeTextRange rangeWithin, bool ignorable, XamlTypeReferenceType referenceType, CreateReferenceDelegate factory);
    public static BuildAction GetBuildAction(IReference reference);
    [ContractAnnotationAttribute("null <= null")]
public static IType GetContainerType(IXamlTag parentTag);
    public static void ResetReferencesRecursively(ITreeNode root);
}
public static class JetBrains.ReSharper.Psi.Xaml.Impl.Util.RelativeSourceUtil : object {
    public static int UNKNOWN_ANCESTOR_LEVEL;
    public static RelativeSourceMode GetMode(string text);
    public static RelativeSourceMode GetMode(IXStatic staticMarkup);
    public static RelativeSourceMode GetDefaultMode(ITreeNode context);
    public static int GetAncestorLevel(string text);
}
[DebuggerDisplayAttribute("ResourcesSymbolTable ({myResources.Count,nq} resources)")]
public class JetBrains.ReSharper.Psi.Xaml.Impl.Util.ResourcesSymbolTable : SymbolTableBase {
    [DebuggerBrowsableAttribute("3")]
private OneToListMap`2<string, ISymbolInfo> myResources;
    private static ExpandMergedResourcesFilter ourExpandFilterInstance;
    public static ISymbolFilter ExpandFilter { get; }
    private ResourcesSymbolTable(IEnumerable`1<IXamlResource> resources);
    private static ResourcesSymbolTable();
    public virtual IList`1<ISymbolInfo> GetSymbolInfos(string name);
    public virtual void AppendSymbolInfos(string name, List`1<ISymbolInfo> consumer);
    public virtual bool ForAllSymbolInfos(TState state, Func`3<TState, ISymbolInfo, bool> processor);
    public virtual IEnumerable`1<string> Names();
    public virtual ISymbolTableDependencySet GetDependencySet();
    [NotNullAttribute]
public static ISymbolTable Create(IList`1<IXamlResource> resources);
    [NotNullAttribute]
public static ISymbolTable MergeInherited(ISymbolTable tableToHide, ISymbolTable newTable);
    [NotNullAttribute]
public static ISymbolTable MergeSameLevel(IEnumerable`1<ISymbolTable> tables);
    public static ISymbolFilter get_ExpandFilter();
}
[DebuggerDisplayAttribute("{DebugView,nq}")]
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Util.ResourceSymbolInfo : object {
    [CompilerGeneratedAttribute]
private string <ShortName>k__BackingField;
    [CompilerGeneratedAttribute]
private object <ResourceKey>k__BackingField;
    [CompilerGeneratedAttribute]
private IXamlResource <Resource>k__BackingField;
    public string ShortName { get; }
    [NotNullAttribute]
public object ResourceKey { get; }
    [NotNullAttribute]
public IXamlResource Resource { get; }
    public Nullable`1<int> InheritanceLevel { get; }
    public int Level { get; }
    [UsedImplicitlyAttribute]
[NotNullAttribute]
private string DebugView { get; }
    public ResourceSymbolInfo(ResourceSymbolInfo other);
    public ResourceSymbolInfo(IXamlResource resource);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ShortName();
    [CompilerGeneratedAttribute]
public object get_ResourceKey();
    [CompilerGeneratedAttribute]
public IXamlResource get_Resource();
    public sealed virtual IDeclaredElement GetDeclaredElement();
    public sealed virtual ISubstitution GetSubstitution();
    public sealed virtual ISymbolInfo ReplaceSubstitution(ISubstitution substitution);
    public sealed virtual ISymbolInfo ReplaceLevel(int level);
    public sealed virtual Nullable`1<int> get_InheritanceLevel();
    public sealed virtual int get_Level();
    private string get_DebugView();
    [NotNullAttribute]
private string GetKeyPresentation();
}
public static class JetBrains.ReSharper.Psi.Xaml.Impl.Util.StoryboardUtil : object {
    private static bool IsStoryboardAttribute(IXamlAttribute attribute, string propertyName);
    public static bool IsStoryboardTargetProperty(IXamlAttribute attribute);
    public static bool IsStoryboardTargetName(IXamlPropertyElement propertyElement);
    public static bool IsStoryboardTargetProperty(IXamlPropertyElement propertyElement);
    [NotNullAttribute]
public static ISymbolTable GetSymbolTableByStoryboard(ITreeNode element);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Psi.Xaml.Impl.Util.StyleUtil : object {
    [NotNullAttribute]
public static IList`1<SetterInfo> GetStyleSetters(IResourceReference styleReference, bool includeBaseStyle);
    [NotNullAttribute]
public static IList`1<SetterInfo> GetStyleSetters(IXamlObjectElement styleElement, bool includeBaseStyle);
    [NotNullAttribute]
private static IList`1<SetterInfo> GetStylePropertiesImpl(IXamlObjectElement styleElement, IXamlTypeCache cache, bool includeBaseStyle);
    [ExtensionAttribute]
[NotNullAttribute]
public static Dictionary`2<DeclaredElementInstance`1<ITypeMember>, SetterInfo> RemoveOverriddenSetters(IList`1<SetterInfo> styleSetters);
}
internal static class JetBrains.ReSharper.Psi.Xaml.Impl.Util.SymbolTableUtil : object {
    [NotNullAttribute]
public static ISymbolTable GetSymbolTable(IType type, SymbolTableMode mode, IPsiModule module);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Psi.Xaml.Impl.Util.TokenizerUtil : object {
    [ExtensionAttribute]
public static IList`1<TokenInfo> Tokenize(string text, char separator, char quote);
    private static int ReadWhile(StringSlice slice, int pos, Func`2<char, bool> acceptChar);
    [ExtensionAttribute]
public static IList`1<TokenInfo> Tokenize(StringSlice slice, char separator, char quote);
}
public static class JetBrains.ReSharper.Psi.Xaml.Impl.Util.TypeArgumentUtil : object {
    [NotNullAttribute]
public static IList`1<IType> GetTypeArguments(IXamlTypeReference reference);
    [NotNullAttribute]
public static IList`1<IType> GetTypeArguments(ITreeNode element);
    [NotNullAttribute]
public static ISubstitution GetSubstitution(ITypeElement typeElement, ITreeNode context);
}
internal static class JetBrains.ReSharper.Psi.Xaml.Impl.Util.TypeExpressionUtil : object {
    [NotNullAttribute]
public static ITypeExpressionBase CreateTypeExpression(ITreeNode node, ITypeElement typeElement);
}
public class JetBrains.ReSharper.Psi.Xaml.Impl.Util.TypeMemberInfo : object {
    [NotNullAttribute]
public ITypeMember TypeMember;
    [NotNullAttribute]
public ISubstitution Substitution;
    [NotNullAttribute]
public IDeclaredType ContainingType;
    private TypeMemberInfo(ITypeMember typeMember, ISubstitution substitution, IDeclaredType containingType);
    [CanBeNullAttribute]
public static TypeMemberInfo Create(ITypeMemberReference memberReference);
    public bool Is(string typeMemberName, IDeclaredType containingType);
    public bool IsOneOf(String[] typeMemberNames, IDeclaredType containingType);
}
public static class JetBrains.ReSharper.Psi.Xaml.Impl.Util.TypeReferenceUtil : object {
    public static ICollection`1<IXamlTypeReference> CollectTypeReferences(IXamlTypeReference typeReference);
    [CanBeNullAttribute]
public static IDeclaration GetDeclarationByResourceUsage(XmlCompositeElement element);
    [CanBeNullAttribute]
public static IReference GetTypeReferenceByResourceUsage(XmlCompositeElement compositeElement);
    [CanBeNullAttribute]
public static IReference GetTypeReference(IXamlObjectElement objectElement, string propertyName, bool processStyleReference, String[] typeNames);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Psi.Xaml.Impl.Util.UpdateSourceTriggerUtil : object {
    [ExtensionAttribute]
public static bool IsXBindUpdateSourceTriggerAttribute(ITreeNode node);
    [ExtensionAttribute]
public static string GetValue(UpdateSourceTrigger updateSourceTrigger);
    public static UpdateSourceTrigger GetUpdateSourceTrigger(string value);
}
public static class JetBrains.ReSharper.Psi.Xaml.Impl.Util.WinRTPathReferenceUtil : object {
    private static string LangQualifier;
    private static string LanguageQualifier;
    private static string ScaleQualifier;
    private static string TargetSizeQualifier;
    [NotNullAttribute]
private static Pair`2[] TrivialQualifiers;
    [NotNullAttribute]
private static HashSet`1<string> LanguagePrefixes;
    private static WinRTPathReferenceUtil();
    [NotNullAttribute]
public static ISymbolTable GetSymbolTableByFolder(IProjectFolder projectFolder, IPsiServices psiServices, string referenceName, bool codeCompletion);
    [NotNullAttribute]
internal static ISymbolTable GetSymbolTableByPathTable(ISymbolTable symbolTable, IPsiServices psiServices, string referenceName, bool codeCompletion);
    [NotNullAttribute]
private static ISymbolTable BakeSymbolTable(HashSet`1<QualifiedResource> resources, IPsiServices psiServices, string referenceName, bool codeCompletion);
    [CanBeNullAttribute]
private static HashSet`1<QualifiedResource> CollectQualifiedResources(ISymbolTable symbolTable, Qualifiers possible, string referenceName, HashSet`1<QualifiedResource> resources);
    [CanBeNullAttribute]
private static HashSet`1<QualifiedResource> CollectQualifiedResources(IProjectFolder folder, VirtualFileSystemPath logicalPathBase, Qualifiers possible, bool atRootLevel, string referenceName, HashSet`1<QualifiedResource> resources);
    [CanBeNullAttribute]
private static HashSet`1<QualifiedResource> FindQualifiedFile(string fileName, VirtualFileSystemPath physicalPath, VirtualFileSystemPath logicalPathBase, Qualifiers possible, bool atRootLevel, string referenceName, HashSet`1<QualifiedResource> resources);
    private static bool IsResourceQualifier(string qualifierValue, Qualifiers& possible, bool isFolder);
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.Psi.Xaml.Impl.Util.XamlAssemblyResourcesPathProvider : object {
    [NotNullAttribute]
private IPsiModules myModules;
    [NotNullAttribute]
private IXamlAssemblyResourcesCache myResourceCache;
    public XamlAssemblyResourcesPathProvider(Lifetime lifetime, IVirtualPathsService virtualPathsService, IPsiModules modules, IXamlAssemblyResourcesCache resourceCache);
    private IEnumerable`1<VirtualFileSystemPath> GetPathsFromCache(IProject project, Func`3<IXamlAssemblyResourcesCache, IPsiAssembly, ICollection`1<VirtualFileSystemPath>> collector);
    public sealed virtual IEnumerable`1<VirtualFileSystemPath> GetAbsolutePathsToVirtualFiles(IProject project);
    public sealed virtual IEnumerable`1<VirtualFileSystemPath> GetAbsolutePathsToVirtualFolders(IProject project);
    public sealed virtual IProjectFolder GetProjectFolderByVirtualPath(IProject project, VirtualFileSystemPath virtualPath);
    public sealed virtual IPsiSourceFile GetPsiSourceFileByVirtualPath(IProject project, VirtualFileSystemPath virtualPath);
    public sealed virtual IProjectFile GetProjectFileByVirtualPath(IProject project, VirtualFileSystemPath virtualPath);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Psi.Xaml.Impl.Util.XamlCodeBehindTypeConversionRuleProviderExtensions : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static ITypeConversionRule GetTypeConversionRule(IXamlCodeBehindTypeConversionRuleProvider provider, ITreeNode xamlNode, bool useStrict);
}
public static class JetBrains.ReSharper.Psi.Xaml.Impl.Util.XamlDeclaredElementUtil : object {
    [NotNullAttribute]
private static Key`1<CachedPsiValue`1<bool>> RESOURCES_CAN_DECLARE_FIELDS;
    private static XamlDeclaredElementUtil();
    public static bool CanDeclareTypeMember(ITypeMemberDeclaration declaration, string declaredName);
    public static bool CanObjectDeclareElement(IXamlObjectElement objectElement);
    public static bool CanDeclareElement(IXamlAttribute nameAttribute);
    public static bool CanDeclareElement(IDeclarationNameElement nameElement);
    [ObsoleteAttribute("DO NOT USE ME PLZ")]
[CanBeNullAttribute]
private static IType QuickResolveObjectElementType(IXamlObjectElement objectElement);
    private static bool IsVisualStateManagerChild(ITypeMemberDeclaration declaration);
    private static bool CanDeclareFieldsInXamlResources(IResourceDeclaration resource);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Psi.Xaml.Impl.Util.XamlEqualityUtil : object {
    public static bool AreValuesEqual(IPropertySetter lhs, IPropertySetter rhs, bool compareWithStyle);
    public static bool AreValuesEqual(IMarkupAttribute lhs, IMarkupAttribute rhs);
    public static bool AreValuesEqual(IPropertySetter lhs, IMarkupAttribute rhs, bool compareWithStyle);
    public static bool AreValuesEqual(IMarkupAttribute lhs, IPropertySetter rhs, bool compareWithStyle);
    private static bool AreSetterValuesEqual(IPropertySetter lhs, IPropertySetter rhs, bool compareWithStyle, bool syntaxStep);
    private static bool AreSetterAndMarkupValuesEqual(IPropertySetter lhs, IMarkupAttribute rhs, bool compareWithStyle, bool syntaxStep);
    private static bool ArePropertyElementAndAttributeEqual(IXamlPropertyElement propertyElement, IPropertyAttribute attribute, bool syntaxStep);
    private static bool AreElementAndMarkupSyntaxEqual(IXamlObjectElement element, IMarkup markup);
    private static bool AreElementAndMarkupSemanticEqual(IXamlObjectElement element, IMarkup markup);
    private static bool AreTagsInnerXmlContentEqual(IXamlTag lhs, IXamlTag rhs, bool syntaxStep);
    private static bool AreObjectElementsSyntaxEqual(IXamlObjectElement lhs, IXamlObjectElement rhs);
    private static bool AreObjectElementsSemanticEqual(IXamlObjectElement lhs, IXamlObjectElement rhs);
    private static bool AreMarkupAttributeValuesEqual(IMarkupAttribute lhs, IMarkupAttribute rhs, bool syntaxStep);
    private static bool AreMarkupValuesEqual(IMarkupAttributeValue lhs, IMarkupAttributeValue rhs, bool syntaxStep);
    private static bool CompareNamesWithPossibleSuffix(string lhs, string rhs, string suffix);
    private static bool AreMarkupsEqual(IMarkup lhs, IMarkup rhs, bool syntaxStep);
    private static bool AreMarkupAttributeListsEqual(IAttributeListMarkupValue lhs, IAttributeListMarkupValue rhs, bool syntaxStep);
    private static bool AreMarkupAttributeListTailsSyntaxEqual(TreeNodeCollection`1<IMarkupAttribute> lhsList, TreeNodeCollection`1<IMarkupAttribute> rhsList, int startIndex);
    private static bool AreMarkupAttributeListTailsSemanticEqual(TreeNodeCollection`1<IMarkupAttribute> lhsList, TreeNodeCollection`1<IMarkupAttribute> rhsList, int startIndex);
    private static bool IsConverterSetterEqualToPropertyElement(ITypeMemberUsage converterSetter, IPropertySetter otherSetter, string converterValue, bool compareWithStyleSetter, bool syntaxStep);
    private static bool TwoMemberTypesEqual(ITypeMemberUsage lhs, ITypeMemberUsage rhs, bool compareWithStyleSetter);
    private static bool TwoReferencesEqual(IReference lhsReference, IReference rhsReference);
    private static bool TwoMembersUsagesEqual(ITypeMemberUsage lhs, ITypeMemberUsage rhs);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IReference GetPropertyReferenceByStyleSetter(IPropertySetter setter);
    private static bool TwoValueReferencesEqual(ITreeNode lhs, ITreeNode rhs);
}
public static class JetBrains.ReSharper.Psi.Xaml.Impl.Util.XamlEventUtil : object {
    public static string EVENT_FIELD_SUFFIX;
    public static string ACCESSOR_ADD_PREFIX;
    public static string ACCESSOR_REMOVE_PREFIX;
    public static string ACCESSOR_SUFFIX;
    [NotNullAttribute]
public static ISymbolFilter[] AttachedAddHandlerFilters;
    [NotNullAttribute]
public static ISymbolFilter[] AttachedRemoveHandlerFilters;
    [NotNullAttribute]
public static ISymbolFilter[] RoutedEventFieldFilters;
    private static XamlEventUtil();
    [NotNullAttribute]
public static string GetAddHandlerName(string referenceName);
    [NotNullAttribute]
public static string GetRemoveHandlerName(string referenceName);
    [NotNullAttribute]
public static string GetEventFieldName(string referenceName);
    public static bool IsAddHandlerName(string methodName);
    public static bool IsRemoveHandlerName(string methodName);
    public static bool IsRoutedEventFieldName(string fieldName);
    [CanBeNullAttribute]
public static string TryGetReferenceName(IDeclaredElement element, string newName);
    [NotNullAttribute]
public static string GetReferenceName(IDeclaredElement declaredElement, string newName);
    public static bool IsAddHandler(IDeclaredElement element, ISubstitution substitution, IXamlTypeCache cache);
    public static bool IsRemoveHandler(IDeclaredElement element, ISubstitution substitution, IXamlTypeCache cache);
    public static bool IsRoutedEventField(IDeclaredElement element, IXamlTypeCache cache);
    [CanBeNullAttribute]
public static IType GetAttachedEventType(IDeclaredElement accessor, ISubstitution substitution);
    private static bool CheckAccessorMethodSignature(IMethod accessor, ISubstitution substitution);
    private static bool CheckAcessorOwnerType(IMethod accessor, IType ownerType);
}
public static class JetBrains.ReSharper.Psi.Xaml.Impl.Util.XamlFieldUtil : object {
    [NotNullAttribute]
public static IList`1<IXamlDeclaration> GetXamlFields(ITreeNode context);
    [NotNullAttribute]
public static IList`1<ITemplateFieldDeclaration> GetTemplateFields(ITreeNode context);
    [ContractAnnotationAttribute("null => null")]
[CanBeNullAttribute]
public static IXamlObjectElement GetControlOrDataTemplate(ITreeNode element);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Psi.Xaml.Impl.Util.XamlMarkupAttributeUtil : object {
    [ExtensionAttribute]
public static IMarkupAttribute BuildAttribute(IXmlTreeNode element, string attributeName, IMarkupAttributeValue value);
    [ExtensionAttribute]
public static IMarkupAttributeValue BuildAttributeValue(IXmlTreeNode element, string value);
    [ExtensionAttribute]
public static void ChangeAttributeValue(IMarkupAttribute attribute, IMarkupAttributeValue newValue);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Psi.Xaml.Impl.Util.XamlObjectElementExtensions : object {
    [ExtensionAttribute]
public static bool IsKnownSetter(IPropertySetter propertySetter, string propertyName, Func`2<IXamlTypeCache, IDeclaredType> typeSelector);
    [ExtensionAttribute]
public static bool IsKnownSetter(IPropertySetter propertySetter, string propertyName, IDeclaredType ownerType);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IPropertySetter GetKnownSetter(IXamlObjectElement objectElement, string propertyName, Func`2<IXamlTypeCache, IDeclaredType> typeSelector);
    private static bool ResolveAndCheck(IPropertySetter propertySetter, Func`2<IXamlTypeCache, IDeclaredType> ownerType);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IPropertySetter GetKnownSetter(IXamlObjectElement objectElement, string propertyName, IDeclaredType ownerType);
    private static bool ResolveAndCheck(IPropertySetter propertySetter, IDeclaredType ownerType);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IPropertySetter GetResourcesSetter(IXamlObjectElement objectElement);
    private static bool CheckResourcesProperty(IPropertySetter propertySetter);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Psi.Xaml.Impl.Util.XamlObjectElementExtensions/<GetMeaningfulContents>d__8")]
[ExtensionAttribute]
[NotNullAttribute]
[ItemNotNullAttribute]
public static IEnumerable`1<object> GetMeaningfulContents(IXamlTag xamlTag);
    [ExtensionAttribute]
[NotNullAttribute]
public static INamespaceAlias AddNamespaceAlias(IXamlTag xamlTag, INamespaceAlias alias);
    [ExtensionAttribute]
[NotNullAttribute]
public static TXamlAttribute AddAttributeAfterAnchorOrAsLastAndIndent(IXamlTag xamlTag, TXamlAttribute attribute, IXamlAttribute anchor);
    private static void IndentAttribute(IXmlAttribute original, IXmlAttribute target);
    [ContractAnnotationAttribute("null => false")]
private static bool IsIndentToken(IXmlToken token);
    private static void BreakLine(ITreeNode namespaceAlias, IEnumerable`1<ITreeNode> nodes, Func`3<ITreeNode, ITreeNode, ITreeNode> inserter);
    public static bool IsVisualStateManagerChild(IXamlObjectElement objectElement);
}
public static class JetBrains.ReSharper.Psi.Xaml.Impl.Util.XamlPathReferenceUtil : object {
    public static ReferenceCollection CreatePathReferences(ITreeNode element, IXmlToken token, TreeTextRange rangeWithin, bool useRootFolder, CreateFileReferenceDelegate createLast);
    private static bool IsDesignTimeMarkup(ITreeNode context);
    [NotNullAttribute]
public static ISymbolTable GetReferenceSymbolTable(IXamlPathReference pathReference, bool useReferenceName);
    [NotNullAttribute]
private static VirtualFileSystemPath GetLevelUpPath(VirtualFileSystemPath basePath, IPathReference reference);
    [NotNullAttribute]
public static VirtualFileSystemPath GetBasePathBeforeMapping(IXamlPathReference pathReference);
    [NotNullAttribute]
private static VirtualFileSystemPath GetProjectPath(IReference pathReference);
    [NotNullAttribute]
public static VirtualFileSystemPath GetBasePath(IXamlPathReference pathReference);
    [NotNullAttribute]
private static VirtualFileSystemPath GetBasePath(IXamlPathReference pathReference, VirtualFileSystemPath beforeMapping);
    [NotNullAttribute]
public static ResolveResultWithInfo CheckResolveResult(IXamlPathReference pathReference, ResolveResultWithInfo resolveResult);
    [NotNullAttribute]
private static ResolveResultWithInfo FixResolveResultForNavigationProperties(IXamlPathReference pathReference, ResolveResultWithInfo resolveResult);
    private static bool IsEmbeddedResourceReferenceRequired(ITreeNode element, string text);
    private static ReferenceCollection CreateEmbeddedResourceReference(ITreeNode element, string text, IXmlToken token, TreeTextRange rangeWithin);
}
[FlagsAttribute]
public enum JetBrains.ReSharper.Psi.Xaml.Impl.Util.XamlPlatform : Enum {
    public int value__;
    public static XamlPlatform NO_PLATFORM;
    public static XamlPlatform NOT_SURE;
    public static XamlPlatform SILVERLIGHT;
    public static XamlPlatform WINDOWS_PHONE;
    public static XamlPlatform WINRT;
    public static XamlPlatform WPF;
    public static XamlPlatform XAMARIN_FORMS;
    public static XamlPlatform UWP;
    public static XamlPlatform AVALONIA;
    public static XamlPlatform WINUI;
    public static XamlPlatform UNO;
    public static XamlPlatform MAUI;
    public static XamlPlatform ALL;
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Psi.Xaml.Impl.Util.XamlPlatformUtil : object {
    [NotNullAttribute]
private static Key`1<CachedPsiValue`1<XamlPlatform>> PlatformKey;
    [NotNullAttribute]
private static Func`1<CachedPsiValue`1<XamlPlatform>> CachedPsiValueCreator;
    [NotNullAttribute]
private static Func`2<IXamlFile, XamlPlatform> GetXamlPlatformByFileCalculator;
    private static XamlPlatformUtil();
    [PureAttribute]
public static XamlPlatform GetXamlNodePlatform(ITreeNode context);
    [PureAttribute]
private static XamlPlatform GetXamlPlatformByFile(IPsiModule psiModule, IEnumerable`1<IXamlTypeDeclaration> typeDeclarations);
    [PureAttribute]
private static XamlPlatform GetXamlPlatformByModule(IPsiModule psiModule);
    [PureAttribute]
public static XamlPlatform GetAllPossiblePlatforms(IPsiModule psiModule);
    [PureAttribute]
public static XamlPlatform GetAllPossiblePlatforms(IProject project);
    [ExtensionAttribute]
[PureAttribute]
public static bool IsWinRTXamlNode(ITreeNode context);
    [ExtensionAttribute]
[PureAttribute]
public static bool IsWinUINode(ITreeNode context);
    [ExtensionAttribute]
[PureAttribute]
public static bool IsUwpNode(ITreeNode context);
    [ExtensionAttribute]
[PureAttribute]
public static bool IsSilverlightXamlNode(ITreeNode context);
    [ExtensionAttribute]
[PureAttribute]
public static bool IsWPFXamlNode(ITreeNode context);
    [ExtensionAttribute]
[PureAttribute]
public static bool IsXamarinFormsXamlNode(ITreeNode context);
    [ExtensionAttribute]
[PureAttribute]
public static bool IsMauiXamlNode(ITreeNode context);
    [ExtensionAttribute]
[PureAttribute]
public static bool IsAvaloniaXamlNode(ITreeNode context);
    [ExtensionAttribute]
[PureAttribute]
public static bool IsUnoXamlNode(ITreeNode context);
    [ExtensionAttribute]
[PureAttribute]
public static bool IsAvaloniaModule(IPsiModule module);
}
public static class JetBrains.ReSharper.Psi.Xaml.Impl.Util.XamlPropertyUtil : object {
    public static string PROPERTY_FIELD_SUFFIX;
    public static string PROPERTYKEY_FIELD_SUFFIX;
    public static string ACCESSOR_SET_PREFIX;
    public static string ACCESSOR_GET_PREFIX;
    [NotNullAttribute]
public static ISymbolFilter[] AttachedGetMethodFilters;
    [NotNullAttribute]
public static ISymbolFilter[] AttachedSetMethodFilters;
    [NotNullAttribute]
public static ISymbolFilter[] StyledPropertyFilters;
    [NotNullAttribute]
public static ISymbolFilter[] DependencyPropertyFieldFilters;
    [NotNullAttribute]
public static ISymbolFilter[] WinRTDependencyPropertyFieldFilters;
    private static XamlPropertyUtil();
    [NotNullAttribute]
public static string GetSetterName(string referenceName);
    [NotNullAttribute]
public static string GetGetterName(string referenceName);
    [NotNullAttribute]
public static string GetPropertyFieldName(string referenceName);
    [NotNullAttribute]
public static string GetBackingFieldName(string referenceName);
    public static bool IsSetterName(string methodName);
    public static bool IsGetterName(string methodName);
    public static bool IsDependencyPropertyFieldName(string fieldName);
    [CanBeNullAttribute]
public static string TryGetReferenceName(IDeclaredElement element, string newName);
    [NotNullAttribute]
public static string GetReferenceName(IDeclaredElement declaredElement, string newName);
    public static bool IsSetterMethod(IDeclaredElement element, ISubstitution substitution, IXamlTypeCache cache);
    public static bool IsGetterMethod(IDeclaredElement element, ISubstitution substitution, IXamlTypeCache cache);
    public static bool IsAccessorMethod(IDeclaredElement element, ISubstitution substitution, IXamlTypeCache cache);
    public static bool IsDependencyPropertyField(IDeclaredElement element, IXamlTypeCache cache);
    [CanBeNullAttribute]
public static IType GetPropertyType(IDeclaredElement accessor, ISubstitution substitution);
    private static bool CheckSetterSignature(IMethod accessor, ISubstitution substitution, IXamlTypeCache cache);
    private static bool IsFluentStyleExtensionMethod(IMethod method);
    private static bool CheckGetterSignature(IMethod accessor, ISubstitution substitution, IXamlTypeCache cache);
    [NotNullAttribute]
public static IType GetExpectedPropertyType(IXamlObjectElement objectElement);
}
[PsiComponentAttribute("10")]
public class JetBrains.ReSharper.Psi.Xaml.Impl.Util.XamlResourcesCache : InvalidatingPsiCache {
    [NotNullAttribute]
private LazyForkedContentModelData`1<Dictionary`2<IPsiSourceFile, ISymbolTable>> myResourcesPerFile;
    [NotNullAttribute]
private IXamlAssemblyResourcesCache myResourcesCache;
    [NotNullAttribute]
private ApplicationTypesCache myAppTypesCache;
    [NotNullAttribute]
private IPsiModules myPsiModules;
    [NotNullAttribute]
private static Key`1<CachedPsiValue`1<ConcurrentDictionary`2<SearchContext, ISymbolTable>>> RESOURCES_BY_ELEMENT_KEY;
    public XamlResourcesCache(Lifetime lifetime, IPsiModules psiModules, ApplicationTypesCache appTypesCache, IXamlAssemblyResourcesCache resourcesCache, ChangeManager changeManager);
    private static XamlResourcesCache();
    [NotNullAttribute]
public static XamlResourcesCache GetCache(ITreeNode element);
    public void Clear();
    protected virtual void InvalidateOnPhysicalChange(PsiChangedElementType elementType);
    private void InvalidateOnChangeManagerChange(ChangeEventArgs changeEventArgs);
    [NotNullAttribute]
public ISymbolTable GetApplicationResources(IPsiModule xamlContext);
    [NotNullAttribute]
public ISymbolTable GetApplicationResources(ITreeNode xamlContext);
    [NotNullAttribute]
public ISymbolTable GetResourcesDefinedInElement(IXamlObjectElement element, ITreeNode ignoreResourcesFrom);
    [NotNullAttribute]
private ISymbolTable GetResourcesDefinedInElement(IXamlObjectElement element, SearchContext context);
    private static bool IsResourceDictionary(IXamlObjectElement objectElement);
    private static bool IsResourceInclude(IXamlObjectElement objectElement);
    private static bool IsStyleInclude(IXamlObjectElement objectElement);
    [NotNullAttribute]
private ISymbolTable CalculateResourcesDefinedInElement(IXamlObjectElement objectElement, SearchContext searchContext);
    private ISymbolTable CollectFromPropertySetter(IPropertySetter propertySetter, SearchContext searchContext);
    [CanBeNullAttribute]
private static IResourceUsage LookForResourceUsage(IPropertySetter setter);
    [NotNullAttribute]
private ISymbolTable CalculateResourcesByInclude(IXamlObjectElement objectElement, SearchContext context);
    [NotNullAttribute]
private ISymbolTable CalculateResourcesByResourceDictionary(IXamlObjectElement objectElement, SearchContext context);
    private static IPsiSourceFile SelectReferencedPsiSourceFile(IProjectFile projectFile, ITreeNode context);
    [NotNullAttribute]
private ISymbolTable CalculateResourcesByResourceDictionarySource(IPropertySetter sourcePropertySetter, SearchContext searchContext, HashSet`1<VirtualFileSystemPath> walkedPaths);
    [NotNullAttribute]
private ISymbolTable CalculateResourcesByCompiledAssembly(ITreeNode context, IAssemblyPsiModule assemblyModule, IPathDeclaredElement pathDeclaredElement, SearchContext searchContext, HashSet`1<VirtualFileSystemPath> virtualFileSystemPaths);
    private void RequestCompiledResources(VirtualFileSystemPath resourcePath, List`1<IXamlResource> resources, IPsiModule psiModule, IPsiAssembly assembly, HashSet`1<VirtualFileSystemPath> walkedPaths, ITreeNode context, SearchContext searchContext);
    [CanBeNullAttribute]
private IPropertyAttribute BuildPropertyAttributeForDictionarySource(IPsiModule psiModule, ITreeNode context, string dictionaryUri);
    [NotNullAttribute]
private ISymbolTable GetResourcesDefinedInFile(IPsiSourceFile sourceFile, SearchContext context);
    private ISymbolTable CollectClasses(ISelectorExpression selectorExpression);
    [NotNullAttribute]
private ISymbolTable CollectResources(IXamlTag elementWithResources, bool fetchResourcesFromResourceDictionary);
    private ISymbolTable CollectClasses(IStyleDeclaration declaration);
    public bool IsApplicationDefinition(IXamlTypeDeclaration declaration);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Psi.Xaml.Impl.Util.XamlResourceUtil : object {
    [ExtensionAttribute]
public static bool IsResourceDictionary(IType type, IXamlTypeCache xamlTypeCache);
    [PureAttribute]
public static bool IsResourceDictionaryResource(IXamlObjectElement objectElement);
    [PureAttribute]
public static bool IsResourceDictionaryGroupingElement(IResourceDeclaration resourceDeclaration);
    [PureAttribute]
public static bool IsResourceDictionary(IXamlObjectElement objectElement);
    [PureAttribute]
public static bool IsResourceDictionary(IReference typeReference);
    [CanBeNullAttribute]
public static IXamlObjectElement GetResourceContainer(ITreeNode element);
    public static bool IsGlobalResource(IResourceDeclaration declaration);
    [NotNullAttribute]
public static ISymbolTable GetResourcesFromAllApplicationDefinitions(ITreeNode context);
    [NotNullAttribute]
public static ISymbolTable GetResourcesSymbolTable(ITreeNode node, bool skipFirstElement, ITreeNode ignoreResourcesFrom);
    [NotNullAttribute]
public static ISymbolTable GetBaseResources(IXamlTypeDeclaration topElement);
    [CanBeNullAttribute]
public static INameInClassOrResourceAttribute GetXNameAttributeDeclaringResource(IResourceDeclaration declaration);
    public static IXamlTag GetResourcesElement(IXamlObjectElement objectElement);
    public static bool IsFromThemeDictionary(IXamlTag resourcesElement, IXamlTag& resourceDictionary);
    public static bool CheckResourceKeyAvailable(IXamlObjectElement target, string resourceName, IType resourceKeyType);
    public static Nullable`1<bool> CanUsageBeDynamic(ITreeNode usageContext);
    public static Pair`2<ITreeNode, IDeclaredType> GetResourceTypeWithOwner(ITreeNode node);
    [CanBeNullAttribute]
private static IType CanCreateResourceFromMarkupAttribute(IMarkupAttribute attribute);
    [CanBeNullAttribute]
private static IType CanCreateResourceFromMarkup(IMarkup markup);
    [CanBeNullAttribute]
private static IType CanCreateResourceFromPropertySetter(IPropertySetter setter);
    [CanBeNullAttribute]
private static IReference FixReferenceByStyle(IPropertySetter setter);
}
public static class JetBrains.ReSharper.Psi.Xaml.Impl.Util.XamlStyleClassUtil : object {
    public static bool IsGlobalStyle(IStyleDeclaration declaration);
    [PureAttribute]
public static bool IsStylesDictionary(IXamlObjectElement objectElement);
    [PureAttribute]
public static bool IsStylesDictionary(IReference typeReference);
}
public static class JetBrains.ReSharper.Psi.Xaml.Impl.Util.XArrayUtil : object {
    [ContractAnnotationAttribute("null => false")]
public static bool IsXArray(IXamlObjectElement objectElement);
    [NotNullAttribute]
public static IType GetArrayType(IXamlObjectElement objectElement);
}
[SettingsKeyAttribute("System.Reflection.Missing", "JetBrains.ReSharper.Psi.Xaml.Resources.Strings", "XAMLBuildActionsSettingsSettingDescription")]
public class JetBrains.ReSharper.Psi.Xaml.Impl.XamlBuildActionsSettingsKey : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Psi.Xaml.Resources.Strings", "XAMLCustomBuildActionsSettingDescription")]
public string CustomBuildActions;
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xaml.XamlLanguage", "16")]
public class JetBrains.ReSharper.Psi.Xaml.Impl.XamlCacheProvider : object {
    private bool myGenerateMembers;
    public sealed virtual void BuildCache(IFile file, ICacheBuilder builder);
    public sealed virtual void BuildCache(ISandBox sandBox, ICacheBuilder builder);
    public sealed virtual bool NeedCacheUpdate(ITreeNode elementContainingChanges, PsiChangedElementType type);
    public sealed virtual bool IsCaseSensitive(IPsiModule module);
    public sealed virtual IEnumerable`1<IPsiSourceFile> GetAffectedOnPsiModulePropertiesChange(IPsiModule module);
    public sealed virtual Part ReadPart(byte tag, IReader reader);
    public sealed virtual ProjectFilePart LoadProjectFilePart(IPsiSourceFile sourceFile, ProjectFilePartsTree tree, IReader reader);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.XamlCustomReferenceProvider : object {
    public sealed virtual ReferenceCollection GetReferences(ITreeNode element, ReferenceCollection oldReferences);
    public sealed virtual bool HasReference(ITreeNode element, IReferenceNameContainer names);
}
[ReferenceProviderFactoryAttribute("16")]
internal class JetBrains.ReSharper.Psi.Xaml.Impl.XamlCustomReferenceProviderFactory : object {
    [CompilerGeneratedAttribute]
private ISignal`1<IReferenceProviderFactory> <Changed>k__BackingField;
    public ISignal`1<IReferenceProviderFactory> Changed { get; }
    public XamlCustomReferenceProviderFactory(Lifetime lifetime);
    public sealed virtual IReferenceFactory CreateFactory(IPsiSourceFile sourceFile, IFile file, IWordIndex wordIndexForChecks);
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<IReferenceProviderFactory> get_Changed();
}
[CodeAnnotationProviderAttribute("0")]
public class JetBrains.ReSharper.Psi.Xaml.Impl.XamlDefaultBindingModeProvider : CodeAnnotationInfoProvider`2<IProperty, Nullable`1<BindingMode>> {
    private static string XamlTwoWayBindingModeByDefaultAttribute;
    private static string XamlOneWayBindingModeByDefaultAttribute;
    public XamlDefaultBindingModeProvider(AttributeInstancesProvider attributeInstancesProvider, CodeAnnotationsConfiguration codeAnnotationsConfiguration);
    protected virtual Nullable`1<BindingMode> CalculateInfo(IProperty attributesOwner, IEnumerable`1<IAttributeInstance> attributeInstances);
    protected virtual Nullable`1<BindingMode> GetDefaultInfo(IProperty attributesOwner);
    protected virtual string DoGetDescription(IProperty attributesOwner, IEnumerable`1<IAttributeInstance> relatedInstances, IEnumerable`1<IAttributeInstance> excludeInstances);
}
public class JetBrains.ReSharper.Psi.Xaml.Impl.XamlElementFactory : XmlElementFactory`1<XamlLanguage> {
    private XamlElementFactory(IPsiModule module, bool applyFormatter);
    [NotNullAttribute]
public static XamlElementFactory GetInstance(IPsiModule module, bool applyFormatter);
    [NotNullAttribute]
public static XamlElementFactory GetInstance(ITreeNode context, bool applyFormatter);
    [NotNullAttribute]
public IXamlFile CreateFile(string xmlText);
    [NotNullAttribute]
public IXamlTypeDeclaration CreateRootTag(string tagText);
    [NotNullAttribute]
public IXamlAttribute CreateRootAttribute(string attributeText);
    [NotNullAttribute]
public IXamlTag CreateTagForTag(IXmlTag contextTag, string tagText, string rootTagText);
    [NotNullAttribute]
public IXamlAttribute CreateAttributeForTag(IXamlTag contextTag, string attributeText);
    [NotNullAttribute]
public IStyleDeclaration CreateStyleDeclaration(IXamlTag contextTag, IDeclaredType type);
    [NotNullAttribute]
public IXamlObjectElement CreateObjectElement(IXamlTag contextTag, IDeclaredType type);
    [NotNullAttribute]
private TObjectElement CreateObjectElement(IXamlTag contextTag, IDeclaredType type, string template);
    [NotNullAttribute]
public TObjectElement CreateObjectElement(IXamlTag contextTag, IDeclaredElement element, ISubstitution substitution);
    [NotNullAttribute]
public IXamlPropertyElement CreatePropertyElement(IXamlObjectElement contextElement, string propertyName, IDeclaredType ownerType);
    [NotNullAttribute]
public IPropertyAttribute CreatePropertyAttribute(IXamlTag contextElement, string propertyName, string value, IDeclaredType qualifier);
    [NotNullAttribute]
public INamespaceAlias CreateNamespaceAlias(string aliasName, string value);
    [NotNullAttribute]
public IXKeyAttribute CreateXKeyAttribute(string value);
    [NotNullAttribute]
public TMarkup CreateMarkup(string markupContent, IDeclaredType markupType);
    [NotNullAttribute]
public IXamlArgument CreateArgument(ITreeNode argumentTreeNode);
    [NotNullAttribute]
public IXamlArgument CreateArgument(string argumentContent);
    [NotNullAttribute]
public IMethodInvocationExpression CreateMethodInvocation(string pathToMethod, IMethodArgumentsList argumentsList);
    [NotNullAttribute]
public IPropertyExpression CreatePropertyExpression(string propertyPath);
    [NotNullAttribute]
public IExpression CreateExpression(string text);
    [NotNullAttribute]
public string GetOrCreateNamespaceAlias(ITreeNode node, ITypeElement typeElement, INamespaceAlias& createdAlias);
    [NotNullAttribute]
public ICastExpression CreateCastExpression(ITreeNode node, ITypeElement targetType, ITreeNode value);
    [NotNullAttribute]
public IPropertyExpression CreateStaticMemberAccess(ITreeNode node, IClrDeclaredElement declaredElement);
    [NotNullAttribute]
public IXamlIdentifier CreateIdentifier(string name);
    [NotNullAttribute]
public IRelativeSourceExpression CreateRelativeSourceExpression(string arguments);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Psi.Xaml.Impl.XamlInheritorTypeNames : InvalidatingPsiCache {
    private static string DbId;
    private IShellLocks myLocks;
    private ISolution mySolution;
    private IWordIndex myWordIndex;
    private ChangeManager myChangeManager;
    private ILogger myLogger;
    private IPersistentSortedMap`2<string, HashSet`1<string>> myPossibleResourceDictionaryNames;
    private Nullable`1<bool> myHasPossibleResourceNames;
    private SynchronizationPoint mySyncPoint;
    private Reasons`1<string> mySyncForbiddenReasons;
    private RetryingAsyncCommitClient myCommitClient;
    private SequentialLifetimes mySyncNamesLifetimes;
    private bool myIsSyncRequested;
    private bool myIsSyncQueued;
    public IProperty`1<bool> SyncAllowed { get; }
    public XamlInheritorTypeNames(Lifetime lifetime, ILogger logger, IShellLocks locks, ISolutionCaches solutionCaches, ISolution solution, IWordIndex wordIndex, SynchronizationPoints syncPoints, ILanguageManagerServiceProvider`2<XamlLanguage, IXmlElementFactory> xamlTreeNodeFactoryProvider, ChangeManager changeManager, IPsiTransactions psiTransactions, IPsiCachesState psiCachesState, ISolutionLoadTasksScheduler solutionLoadTasksScheduler, AsyncCommitService asyncCommitService);
    public IProperty`1<bool> get_SyncAllowed();
    private void SuppressSyncWhenCachesAreBusy(Lifetime lifetime, IShellLocks locks, IPsiCachesState psiCachesState);
    private void SuppressSyncUntilStartPsi(Lifetime lifetime, ISolutionLoadTasksScheduler solutionLoadTasksScheduler);
    private void SuppressSyncOnPsiTransactions(Lifetime lifetime, IPsiTransactions psiTransactions);
    public sealed virtual HashSet`1<string> TryGetPossibleInheritorTypeNames(string typeName);
    private void ScheduleUpdateNames(string reason);
    protected virtual void InvalidateOnPhysicalChange(PsiChangedElementType elementType);
    [CompilerGeneratedAttribute]
private void <.ctor>b__16_1(Lifetime syncAllowedLifetime);
    [CompilerGeneratedAttribute]
private void <SuppressSyncWhenCachesAreBusy>b__17_0(Lifetime psiCachesBusyLifetime);
}
[CodeAnnotationProviderAttribute("16")]
public class JetBrains.ReSharper.Psi.Xaml.Impl.XamlItemBindingOfItemsControlAnnotationProvider : SimpleCodeAnnotationProvider {
}
[CodeAnnotationProviderAttribute("16")]
public class JetBrains.ReSharper.Psi.Xaml.Impl.XamlItemsControlAnnotationProvider : SimpleCodeAnnotationProvider {
}
[CodeAnnotationProviderAttribute("16")]
public class JetBrains.ReSharper.Psi.Xaml.Impl.XamlItemStyleOfItemsControlAnnotationProvider : SimpleCodeAnnotationProvider {
}
public static class JetBrains.ReSharper.Psi.Xaml.Impl.XamlKeywords : object {
    public static string MAIN;
    public static string INITIALIZE_COMPONENT;
    public static string CONNECT;
    public static string CONNECT_WINRT_VB;
    public static string CONNECT_WPF_VB;
    public static string GET_BINDING_CONNECTOR;
    public static string GET_BINDING_CONNECTOR_VB;
    public static string BINDINGS;
    public static string XMLNS_DEFAULT;
    public static string XMLNS_X;
    public static string XMLNS_MARKUP_COMPATIBILITY;
    public static string XMLNS_PRESENTATION_OPTIONS;
    public static string XMLNS_D;
    public static string XMLNS_WORKFLOW;
    public static string XMLNS_X_XAMARIN;
    public static string ACTIVITY;
    public static string APPLICATION;
    public static string STARTUP_URI;
    public static string XCODE;
    public static string XFIELD_MODIFIER;
    public static string XCLASS_MODIFIER;
    public static string XTYPE_ARGUMENTS;
    public static string ARGUMENTS;
    public static string XARGUMENTS;
    public static string XSUBCLASS;
    public static string FACTORY_METHOD;
    public static string XMEMBERS;
    public static string MEMBERS;
    public static string XPROPERTY;
    public static string PROPERTY;
    public static string CLASS_ATTRIBUTES;
    public static string ATTRIBUTES;
    public static string I_COMPONENT_CONNECTOR;
    public static string I_COMPONENT_CONNECTOR2;
    public static string I_SUPPORT_INITIALIZE;
    public static string RESOURCE_DICTIONARY;
    public static string RESOURCES_PROPERTY;
    public static string STYLES_PROPERTY;
    public static string STATIC_RESOURCE;
    public static string DYNAMIC_RESOURCE;
    public static string XDYNAMIC_RESOURCE;
    public static string XSTATIC_RESOURCE;
    public static string THEME_RESOURCE;
    public static string RESOURCE_ATTRIBUTE_NAME;
    public static string XAMARIN_RESOURCE_ATTRIBUTE_NAME;
    public static string CLASS;
    public static string CLASSES;
    public static string STYLE_CLASS;
    public static string APPLY_TO_DERIVED_TYPES;
    public static string EXTENSION;
    public static string STYLE;
    public static string CONTROL_THEME;
    public static string TARGET_TYPE_ATTRIBUTE;
    public static string DATA_TYPE_ATTRIBUTE;
    public static string TARGET_NAME_ATTRIBUTE;
    public static string SOURCE_NAME_ATTRIBUTE;
    public static string STYLE_TARGET_TYPE;
    public static string BASED_ON_ATTRIBUTE;
    public static string BASED_ON_TYPE;
    public static string OBJECT_DATA_PROVIDER;
    public static string OBJECT_INSTANCE_ATTRIBUTE;
    public static string OBJECT_TYPE_ATTRIBUTE;
    public static string METHOD_NAME_ATTRIBUTE;
    public static string METHOD_PARAMETERS_ATTRIBUTE;
    public static string CONSTRUCTOR_PARAMETERS_ATTRIBUTE;
    public static string XUID;
    public static string XDATA;
    public static string XARRAY;
    public static string XARRAY_EXTENSION;
    public static string XML_DATA_PROVIDER;
    public static string NULL;
    public static string XNULL;
    public static string TRUE;
    public static string FALSE;
    public static string TYPE;
    public static string TYPE_EXTENSION;
    public static string XTYPE;
    public static string XTYPE_EXTENSION;
    public static string XTYPE_ATTRIBUTE_NAME;
    public static string XML;
    public static string XML_LANG;
    public static string XML_SPACE;
    public static string KEY_ATTRIBUTE;
    public static string XMLNS_ATTRIBUTE;
    public static string NAME_ATTRIBUTE;
    public static string XNAME_ATTRIBUTE;
    public static string XKEY;
    public static string XCLASS_ATTRIBUTE;
    public static string XSHARED_ATTRIBUTE;
    public static string XDATA_TYPE;
    public static string PROPERTY_ATTRIBUTE;
    public static string EVENT_ATTRIBUTE;
    public static string ROUTED_EVENT_ATTRIBUTE;
    public static string VALUE_ATTRIBUTE;
    public static string HANDLER_ATTRIBUTE;
    public static string SETTER;
    public static string SETTERS;
    public static string TRIGGER;
    public static string CONDITION;
    public static string EVENT_SETTER;
    public static string EVENT_TRIGGER;
    public static string EVENT_SETTER_EVENT;
    public static string EVENT_TRIGGER_ROUTED_EVENT;
    public static string EVENT_SETTER_HANDLER;
    public static string SETTER_PROPERTY;
    public static string TRIGGER_PROPERTY;
    public static string CONDITION_PROPERTY;
    public static string BIND;
    public static string XBIND;
    public static string BINDING;
    public static string MULTI_BINDING;
    public static string PRIORITY_BINDING;
    public static string COMMAND_BINDING;
    public static string PATH_ATTRIBUTE;
    public static string BIND_BACK_ATTRIBUTE;
    public static string XPATH_ATTRIBUTE;
    public static string ELEMENT_NAME_ATTRIBUTE;
    public static string SOURCE_ATTRIBUTE;
    public static string MERGED_DICTIONARIES_ATTRIBUTE;
    public static string THEME_DICTIONARIES_ATTRIBUTE;
    public static string RELATIVE_SOURCE;
    public static string CONVERTER_PROPERTY;
    public static string COMPILE_BINDINGS;
    public static string DEFAULT_BIND_MODE_ATTRIBUTE;
    public static string XDEFAULT_BIND_MODE_ATTRIBUTE;
    public static string BINDING_MODE_ATTRIBUTE;
    public static string BINDING_MODE_TWO_WAY;
    public static string BINDING_MODE_ONE_WAY;
    public static string BINDING_MODE_ONE_TIME;
    public static string BINDING_MODE_ONE_WAY_TO_SOURCE;
    public static string BINDING_MODE_DEFAULT;
    public static string MODE_ATTRIBUTE;
    public static string ANCESTOR_TYPE_ATTRIBUTE;
    public static string ANCESTOR_LEVEL_ATTRIBUTE;
    public static string FALLBACK_VALUE;
    public static string UPDATE_SOURCE_TRIGGER_ATTRIBUTE;
    public static string UPDATE_SOURCE_TRIGGER_EXPLICIT;
    public static string UPDATE_SOURCE_TRIGGER_DEFAULT;
    public static string UPDATE_SOURCE_TRIGGER_PROPERTY_CHANGED;
    public static string UPDATE_SOURCE_TRIGGER_LOST_FOCUS;
    public static string DATA_CONTEXT;
    public static string BINDING_CONTEXT;
    public static string STATIC;
    public static string XSTATIC;
    public static string XSTATIC_EXTENSION;
    public static string XSTATIC_MEMBER_ATTRIBUTE;
    public static string XSTATIC_MEMBER_TYPE_ATTRIBUTE;
    public static string REFERENCE;
    public static string XREFERENCE;
    public static string COMPONENT_RESOURCE_KEY;
    public static string RESOURCE_ID_ATTRIBUTE;
    public static string TEMPLATE_BINDING;
    public static string CONTROL_TEMPLATE;
    public static string DATA_TEMPLATE;
    public static string XDATA_TEMPLATE;
    public static string DATA_TEMPLATES;
    public static string HIERARCHIAL_DATA_TEMPLATE;
    public static string TREE_DATA_TEMPLATE;
    public static string TEMPLATE;
    public static string ITEMS_PANEL;
    public static string IGNORABLE_ATTRIBUTE;
    public static string PROCESS_CONTENT_ATTRIBUTE;
    public static string FREEZE_ATTRIBUTE;
    public static string ALTERNATE_CONTENT;
    public static string CHOICE;
    public static string FALLBACK;
    public static string REQUIRES;
    public static string FIND_ANCESTOR;
    public static string PREVIOUS_DATA;
    public static string SELF;
    public static string TEMPLATED_PARENT;
    public static string TARGET;
    public static string TARGET_PROPERTY_ATTRIBUTE;
    public static string IMAGE;
    public static string STORYBOARD;
    public static string MENU_ITEM;
    public static string BUTTON;
    public static string COMMAND_ATTRIBUTE;
    public static string ITEM_TEMPLATE;
    public static string ITEMS_SOURCE;
    public static string ITEMS;
    public static string SELECTED_ITEM;
    public static string DESIGN_INSTANCE;
    public static string DESIGN_DATA;
    public static string DESIGN_SOURCE;
    public static string CREATE_LIST;
    public static string IS_DESIGN_TIME_CREATABLE;
    public static string DESIGN_WIDTH;
    public static string DESIGN_HEIGHT;
    public static string BACKGROUND;
    public static string COLOR;
    public static string INVALID_TYPE_DECLARATION;
    public static string SELECTOR_ATTRIBUTE;
    public static string COMPILED_BINDING;
    public static string XCOMPILE_BINDINGS;
    public static string COLUMN_DEFINITIONS;
    public static string ROW_DEFINITIONS;
    public static string COLUMN_DEFINITION;
    public static string ROW_DEFINITION;
    public static string OPTIONS_ATTRIBUTE;
    public static bool IsResourceKeyword(string keyword);
    public static bool IsResourceDictionary(IXmlTagContainer tagContainer, IXamlInheritorTypeNames xamlInheritorTypeNames);
    public static string GetMarkupExtensionName(string name);
    public static bool IsMarkupExtension(string markupName, string shortName, bool canSkipNs);
    public static bool IsBindingExtension(string markupName);
    public static bool IsXBindExtension(string markupName);
}
[FlagsAttribute]
public enum JetBrains.ReSharper.Psi.Xaml.Impl.XamlLanguageLevel : Enum {
    public int value__;
    public static XamlLanguageLevel NO_XAML;
    public static XamlLanguageLevel FLG_XAML_2006;
    public static XamlLanguageLevel FLG_XAML_2009;
    public static XamlLanguageLevel FLG_XAML_2009_PLUS;
    public static XamlLanguageLevel FLG_XAML_2009_WORKFLOW;
    public static XamlLanguageLevel XAML_2006;
    public static XamlLanguageLevel XAML_2009;
    public static XamlLanguageLevel XAML_2009_PLUS;
    public static XamlLanguageLevel XAML_2009_WORKFLOW;
    public static XamlLanguageLevel ALL;
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Psi.Xaml.Impl.XamlLanguageLevelExtensions : object {
    [ExtensionAttribute]
public static bool IsAllowedIn(IXamlPredefinedDeclaredElement declaredElement, XamlLanguageLevel projectFileLevel);
    [ExtensionAttribute]
public static bool IsAllowedIn(XamlLanguageLevel constructLevel, XamlLanguageLevel projectFileLevel);
    [ExtensionAttribute]
public static XamlLanguageLevel GetLanguageLevel(ITreeNode element);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Psi.Xaml.Impl.XamlLanguageLevelProvider : object {
    [NotNullAttribute]
public static XamlLanguageLevelProvider Instance { get; }
    public static XamlLanguageLevelProvider get_Instance();
    public virtual XamlLanguageLevel GetLanguageLevel(ITreeNode context);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xaml.XamlLanguage", "16")]
public class JetBrains.ReSharper.Psi.Xaml.Impl.XamlLanguageService : XmlLanguageService {
    [CompilerGeneratedAttribute]
private ILanguageCacheProvider <CacheProvider>k__BackingField;
    public ITypePresenter TypePresenter { get; }
    public ILanguageCacheProvider CacheProvider { get; }
    public bool SupportTypeMemberCache { get; }
    public XamlLanguageService(XamlLanguage languageType, IConstantValueService constantValueService, XmlTokenTypes tokenTypes, IXmlElementFactory elementFactory, XmlCodeFormatter codeFormatter, CommonIdentifierIntern commonIdentifierIntern, ILanguageCacheProvider cacheProvider);
    public virtual ITypePresenter get_TypePresenter();
    public virtual IParser CreateParser(ILexer lexer, IPsiModule module, IPsiSourceFile sourceFile);
    [CompilerGeneratedAttribute]
public virtual ILanguageCacheProvider get_CacheProvider();
    public virtual bool get_SupportTypeMemberCache();
    public virtual ReferenceAccessType GetReferenceAccessType(IDeclaredElement target, IReference reference);
    public virtual IReferenceContextCodec CreateReferenceContextCodec();
    public virtual bool IsValidName(DeclaredElementType elementType, string name);
    public virtual IDeclaredElementPointer`1<T> CreateElementPointer(T declaredElement);
    public virtual bool CanContainCachableDeclarations(ITreeNode node);
    public virtual IEnumerable`1<ITypeDeclaration> FindTypeDeclarations(IFile file);
    public virtual ITypeConversionRule GetTypeConversionRule(ITreeNode context, bool useStrict);
    public virtual TreeOffset CalcOffset(IDeclaration declaration);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xaml.XamlLanguage", "16")]
public class JetBrains.ReSharper.Psi.Xaml.Impl.XamlLanguageSupport : XmlLanguageSupport {
    public virtual bool IsValidTagName(string name);
    public virtual bool CanConvertAttributeToTag(IXmlAttribute attribute);
    public static bool CanConvertAttributeToTag(IXamlAttribute attribute, bool checkConstructorArguments);
    public virtual string GetTagName(IXmlAttribute attribute);
    public virtual string ConvertAttributeValue(IXmlAttribute attribute, Boolean& preserveRequired);
    public virtual bool CanConvertTagToAttribute(IXmlTag tag);
    public virtual string GetAttributeName(IXmlTag tag);
    public virtual string ConvertTagToValue(IXmlTag tag);
    public static bool CanConvertMarkupToTag(IMarkup markup, bool checkConstructorArguments);
    private static bool CanOmitMarkupPropertyName(IXamlObjectElement markup, IPropertySetter setter);
    private static bool NeedQuoteAndEscape(IPropertyAttributeValue value);
    [NotNullAttribute]
private static string MarkupArgumentToAttributeValue(IMarkupAttributeValue value);
    [CanBeNullAttribute]
public static IProperty GetPropertyByConstructorArgument(IMarkupAttribute attribute);
    public virtual bool CanRemoveTagAndKeepChildren(IXmlTag tagToRemove);
    public virtual bool CanMakeTagEmpty(IXmlTag tag);
    public virtual bool CanRemoveAllTags(IXmlTag tagToRemove);
    public virtual IXmlTreeBuilderContext CreateTreeBuilderContext(IPsiModule psiModule);
    public virtual XmlTreeBuilder CreateTreeBuilder(IXmlElementFactory factory, IXmlElementFactoryContext factoryContext, ITokenIntern intern, IXmlTreeBuilderContext treeBuilderContext);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.Psi.Xaml.Impl.XamlModulePlatformCache : object {
    [NotNullAttribute]
private ISolution mySolution;
    [NotNullAttribute]
private Dictionary`2<IModule, ModulePlatformInfo> myCache;
    [NotNullAttribute]
private static ILogger ourLogger;
    public XamlModulePlatformCache(ISolution solution, ChangeManager changeManager, Lifetime lifetime);
    private static XamlModulePlatformCache();
    [NotNullAttribute]
[PureAttribute]
public static XamlModulePlatformCache GetInstance(IModule module);
    [NotNullAttribute]
[PureAttribute]
private ModulePlatformInfo GetOrCreateEntry(IModule module);
    [PureAttribute]
public XamlPlatform GetPossibleXamlPlatforms(IModule module, TargetFrameworkId targetFrameworkId);
    [NotNullAttribute]
[PureAttribute]
public string GetDefaultNamespace(IModule module);
    public bool UpdateDefaultNamespaceIfNecessary(IModule module);
    public bool UpdateXamlPlatformIfNecessary(IModule module);
    [NotNullAttribute]
private static string CalculateDefaultNamespace(IModule module);
    [PureAttribute]
private static IDictionary`2<TargetFrameworkId, XamlPlatform> CalculateXamlPlatforms(IModule module);
    [PureAttribute]
private static XamlPlatform CalculateXamlPlatforms(IModule module, TargetFrameworkId targetFrameworkId);
    [PureAttribute]
private static XamlPlatform CalculateXamlPlatformsByProjectFlavors(IProject project);
    [PureAttribute]
private static XamlPlatform CalculateXamlPlatformsByReferences(IEnumerable`1<TProjectToModuleReference> references, TargetFrameworkId targetFrameworkId);
    [PureAttribute]
private static XamlPlatform CalculateXamlPlatformsByAssemblyModule(string moduleName, Func`1<IModule> moduleFunc, TargetFrameworkId targetFrameworkId);
    private static XamlPlatform CalculateXamlPlatformsByProjectProperties(IProject project, TargetFrameworkId targetFrameworkId);
    private void OnChangeManagerChanged(ChangeEventArgs args);
    public void Dump(StreamWriter writer);
}
[ProjectFileTypeAttribute("JetBrains.ProjectModel.XamlProjectFileType", "16")]
public class JetBrains.ReSharper.Psi.Xaml.Impl.XamlProjectFileLanguageService : XmlProjectFileLanguageService {
    public IconId Icon { get; }
    public XamlProjectFileLanguageService(XamlProjectFileType xamlProjectFileType);
    public virtual IconId get_Icon();
    public virtual PsiLanguageType GetPsiLanguageType(IPsiSourceFile sourceFile);
    public virtual PsiLanguageType GetPsiLanguageType(IProjectFile projectFile);
    protected virtual PsiLanguageType GetPsiLanguageType(IProjectFile projectFile, TargetFrameworkId targetFrameworkId);
    public virtual PsiLanguageType GetPsiLanguageType(ProjectFileType languageType);
    protected virtual Nullable`1<bool> CalculateShouldBuildPsiInCaseOfMultipleFilesWithTheSameLocation(IProjectFile projectFile, FrugalLocalList`1<IProjectFile> projectFilesWithTheSamePath);
    public virtual IPsiSourceFileProperties GetPsiProperties(IProjectFile projectFile, IPsiSourceFile sourceFile, IsCompileService isCompileService);
}
public static class JetBrains.ReSharper.Psi.Xaml.Impl.XamlRelativePanelConstants : object {
    public static String[] ReferenceMembers;
    private static XamlRelativePanelConstants();
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.XamlResourceElementPointer`1 : SourceElementPointer`1<T> {
    public XamlResourceElementPointer`1(T xamlResource);
    protected virtual Binding CreateBinding(IPsiSourceFile sourceFile, IDeclaration declaration);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xaml.XamlLanguage", "16")]
public class JetBrains.ReSharper.Psi.Xaml.Impl.XamlTextOccurrenceSearcherFactory : XmlTextOccurrenceSearcherFactory {
    public virtual XmlTextOccurrenceSearchHelper`1<TResult> CreateHelper(JetHashSet`1<string> names, IFindResultConsumer`1<TResult> consumer);
}
internal class JetBrains.ReSharper.Psi.Xaml.Impl.XamlTextOccurrenceSearchHelper`1 : XmlTextOccurrenceSearchHelper`1<TResult> {
    public XamlTextOccurrenceSearchHelper`1(JetHashSet`1<string> names, IFindResultConsumer`1<TResult> consumer);
    protected virtual bool ProcessAttribute(IFile file, IXmlAttribute attribute);
    protected virtual bool DeclarationExists(IXmlToken textToken, TreeTextRange textRange);
}
public class JetBrains.ReSharper.Psi.Xaml.Impl.XamlTreeBuilderContext : object {
    [CompilerGeneratedAttribute]
private XamlPlatform <XamlPlatform>k__BackingField;
    public XamlPlatform XamlPlatform { get; }
    public XamlTreeBuilderContext(IPsiModule psiModule);
    [CompilerGeneratedAttribute]
public sealed virtual XamlPlatform get_XamlPlatform();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xaml.XamlLanguage", "16")]
public class JetBrains.ReSharper.Psi.Xaml.Impl.XamlTreeNodeFactory : XmlTreeNodeFactory {
    [NotNullAttribute]
private XamlElementTypes myXamlElementType;
    [CanBeNullAttribute]
private IXamlInheritorTypeNames myXamlInheritorTypeNames;
    public XamlTreeNodeFactory(XamlLanguage languageType, XmlTokenTypes tokenTypes, XamlElementTypes elementTypes);
    public void SetResourceDictionaryNames(Lifetime lifetime, IXamlInheritorTypeNames inheritorTypeNames);
    public virtual IXmlTag CreateRootTag(IXmlTagHeader header, IXmlElementFactoryContext context);
    public virtual IXmlTag CreateTag(IXmlTagHeader header, IXmlTag parentTag, IXmlElementFactoryContext context);
    public virtual IXmlTagFooter CreateTagFooter(IXmlTagContainer parentTag, IXmlElementFactoryContext context);
    public virtual IXmlAttribute CreateAttribute(IXmlIdentifier nameIdentifier, IXmlAttributeContainer attributeContainer, IXmlTagContainer parentTag, IXmlElementFactoryContext context);
    public virtual IXmlIdentifier CreateIdentifier(ITokenIntern internalizer, XmlTokenNodeType tokenType, IBuffer buffer, int startOffset, int endOffset);
    private static bool IsInXDataOrXArray(IXmlTagContainer parentTag);
}
public class JetBrains.ReSharper.Psi.Xaml.Impl.XamlTypeConversionRule : object {
    [NotNullAttribute]
public static XamlTypeConversionRule Instance;
    public IEqualityComparer`1<IType> EqualityComparer { get; }
    private static XamlTypeConversionRule();
    public sealed virtual IEqualityComparer`1<IType> get_EqualityComparer();
    public sealed virtual bool IsImplicitlyConvertibleTo(IType from, IType to);
    public sealed virtual bool IsExplicitlyConvertibleTo(IType from, IType to);
    public sealed virtual bool IsImplicitlyConvertibleTo(IExpressionType from, IType to);
    public sealed virtual bool IsExplicitlyConvertibleTo(IExpressionType from, IType to);
    public sealed virtual bool IsImplicitlyConvertiblePredefined(IType from, IType to);
    public sealed virtual bool IsExplicitlyConvertiblePredefined(IType from, IType to);
    public sealed virtual bool HasStandardImplicitConversion(IType from, IType to);
    public sealed virtual bool HasExtensionMethodThisArgumentConversion(IType from, IType to, ParameterKind thisParameterKind);
    public sealed virtual bool HasIdentityConversion(IType from, IType to);
    protected virtual bool IsExplicitlyConvertiblePredefinedImpl(IType from, IType to);
    protected virtual bool IsImplicitlyConvertiblePredefinedImpl(IType from, IType to, bool allowNumeric);
    public virtual bool IdentityConvertionExist(IType from, IType to);
    public virtual bool ImplicitNumericConversionExist(IType from, IType to);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Psi.Xaml.Impl.XamlTypeConversionRuleExtensions : object {
    [ExtensionAttribute]
[NotNullAttribute]
[PureAttribute]
public static IXamlTypeConversionRule GetTypeConversionRule(ITreeNode node);
    [ExtensionAttribute]
[CanBeNullAttribute]
[PureAttribute]
public static ITypeConversionRule GetCodeBehindTypeConversionRule(ITreeNode node, bool useStrict);
}
public class JetBrains.ReSharper.Psi.Xaml.Impl.XamlWinRTTypeConversionRule : XamlTypeConversionRule {
    private IWinMDTypeProjectionModuleCache myTypeProjectionCache;
    public XamlWinRTTypeConversionRule(IPsiModule module);
    public virtual bool ImplicitNumericConversionExist(IType from, IType to);
    public virtual bool IdentityConvertionExist(IType from, IType to);
    protected virtual bool IsImplicitlyConvertiblePredefinedImpl(IType from, IType to, bool allowNumeric);
    protected virtual bool IsExplicitlyConvertiblePredefinedImpl(IType from, IType to);
}
public class JetBrains.ReSharper.Psi.Xaml.Impl.XamlXamarinFormsTypeConversionRule : object {
    [NotNullAttribute]
public static XamlXamarinFormsTypeConversionRule Instance;
    public IEqualityComparer`1<IType> EqualityComparer { get; }
    private static XamlXamarinFormsTypeConversionRule();
    public sealed virtual IEqualityComparer`1<IType> get_EqualityComparer();
    public sealed virtual bool IsImplicitlyConvertibleTo(IType from, IType to);
    public sealed virtual bool IsExplicitlyConvertibleTo(IType from, IType to);
    public sealed virtual bool IsImplicitlyConvertibleTo(IExpressionType from, IType to);
    public sealed virtual bool IsExplicitlyConvertibleTo(IExpressionType from, IType to);
    public sealed virtual bool IsImplicitlyConvertiblePredefined(IType from, IType to);
    public sealed virtual bool IsExplicitlyConvertiblePredefined(IType from, IType to);
    public sealed virtual bool HasStandardImplicitConversion(IType from, IType to);
    public sealed virtual bool HasExtensionMethodThisArgumentConversion(IType from, IType to, ParameterKind thisParameterKind);
    public sealed virtual bool HasIdentityConversion(IType from, IType to);
    public bool IsXamarinConvertibleTo(IType from, IType to);
    private static bool CanBeImplicitOperatorConversion(IType from, IType to);
    [NotNullAttribute]
private static IEnumerable`1<ISymbolInfo> CustomConversionOperators(IType type, IPsiModule module);
    private static bool CanContainsImplicitConversionOperator(IClass classType);
    private static bool CanContainsImplicitConversionOperator(IStruct struct);
}
public class JetBrains.ReSharper.Psi.Xaml.Naming.XamlNameCompletionUtil : NameCompletionUtil {
    public static IEnumerable`1<string> SuggestNamesForField(string tagName, string prefix, PsiLanguageType language, ISolution solution, IPsiSourceFile sourceFile);
}
[NamedElementsBagAttribute("JetBrains.ReSharper.Psi.Xaml.XamlLanguage")]
public class JetBrains.ReSharper.Psi.Xaml.Naming.XamlNamedElements : ElementKindOfElementType {
    private NamingRule myNamingRule;
    public static IElementKind NAMESPACE_ALIAS;
    public static IElementKind XAML_FIELD;
    public static IElementKind XAML_RESOURCE;
    public PsiLanguageType Language { get; }
    protected XamlNamedElements(string name, Type resourceType, string resourceName, Func`2<IDeclaredElement, bool> isApplicable, NamingRule namingRule);
    private static XamlNamedElements();
    public virtual NamingRule GetDefaultRule();
    public virtual PsiLanguageType get_Language();
}
[NamingConsistencyCheckerAttribute("JetBrains.ReSharper.Psi.Xaml.XamlLanguage", "16")]
public class JetBrains.ReSharper.Psi.Xaml.Naming.XamlNamingConsistencyChecker : object {
    public sealed virtual bool IsApplicable(IPsiSourceFile sourceFile);
    public sealed virtual void Check(IDeclaration declaration, INamingPolicyProvider policyProvider, Boolean& isFinalResult, NamingConsistencyCheckResult& result);
    [NotNullAttribute]
public static NamingConsistencyCheckResult GetCheckResult(IDeclaredElement element, string shortName, INamingPolicyProvider provider);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xaml.XamlLanguage", "16")]
public class JetBrains.ReSharper.Psi.Xaml.Naming.XamlNamingLanguageService : ClrNamingLanguageServiceBase {
    public XamlNamingLanguageService(PsiLanguageType language, IEnumerable`1<IClrNamingSuggestionAdviser> namingSuggestionAdvisers);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Psi.Xaml.Naming.XamlNamingLanguageService/<SuggestRoots>d__1")]
public virtual IEnumerable`1<NameRoot> SuggestRoots(ITreeNode element, bool useExpectedTypes, INamingPolicyProvider policyProvider);
}
[SettingsKeyAttribute("JetBrains.ReSharper.Psi.Naming.Settings.NamingSettings", "JetBrains.ReSharper.Psi.Xaml.Resources.Strings", "XAMLNamingSettingsSettingDescription")]
public class JetBrains.ReSharper.Psi.Xaml.Naming.XamlNamingSettingsKey : CustomRulesNamingSettingsKeyBase {
}
public class JetBrains.ReSharper.Psi.Xaml.Naming.XamlPolicyProvider : CustomRulesBasedPolicyProvider`1<XamlNamingSettingsKey> {
    protected NamingPolicy UndefinedPolicy { get; }
    public XamlPolicyProvider(PsiLanguageType language, IPsiSourceFile sourceFile, IContextBoundSettingsStore settingsStore);
    protected virtual NamingPolicy get_UndefinedPolicy();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xaml.XamlLanguage", "16")]
public class JetBrains.ReSharper.Psi.Xaml.Naming.XamlPolicyProviderFactory : object {
    private PsiLanguageType myLanguage;
    public XamlPolicyProviderFactory(PsiLanguageType language);
    public sealed virtual INamingPolicyProvider CreatePolicyProvider(ISolution solution, IPsiSourceFile sourceFile, IContextBoundSettingsStore settingsStore);
}
public class JetBrains.ReSharper.Psi.Xaml.Parsing.MarkupExtensionLexerState : ValueType {
    public TokenNodeType currTokenType;
    public int yy_buffer_index;
    public int yy_buffer_start;
    public int yy_buffer_end;
    public int yy_lexical_state;
}
public class JetBrains.ReSharper.Psi.Xaml.Parsing.MarkupExtensionsAttributeValueLexerGenerated : object {
    protected TokenNodeType currTokenType;
    private XamlTokenTypes myXamlTokenTypes;
    private static int YY_F;
    private static int YY_NO_STATE;
    private static int YY_NOT_ACCEPT;
    private static int YY_START;
    private static int YY_END;
    private static int YY_NO_ANCHOR;
    private static int YY_BOL;
    private static int YY_EOF;
    private int yy_buffer_index;
    private int yy_buffer_start;
    private int yy_buffer_end;
    private IBuffer yy_buffer;
    private int yy_eof_pos;
    private bool yy_at_bol;
    private int yy_lexical_state;
    protected static int YYINITIAL;
    private static Int32[] yy_state_dtrans;
    private static int YY_E_INTERNAL;
    private static int YY_E_MATCH;
    private static String[] yy_error_string;
    private static Int32[] yy_acpt;
    private static Int32[] yy_cmap;
    private static Int32[] yy_rmap;
    private static Int32[0...,0...] yy_nxt;
    public XamlTokenTypes XamlTokenType { get; }
    public UInt32 LexerStateEx { get; }
    public MarkupExtensionLexerState CurrentPosition { get; public set; }
    private object JetBrains.ReSharper.Psi.Parsing.ILexer.CurrentPosition { get; private set; }
    public TokenNodeType TokenType { get; }
    public int TokenStart { get; }
    public int TokenEnd { get; }
    public int LexemIndent { get; }
    public IBuffer Buffer { get; }
    public int EOFPos { get; }
    public MarkupExtensionsAttributeValueLexerGenerated(IBuffer buffer, XamlTokenTypes xamlTokenTypes);
    private MarkupExtensionsAttributeValueLexerGenerated(IBuffer buffer);
    private MarkupExtensionsAttributeValueLexerGenerated(IBuffer buffer, int startOffset, int endOffset);
    private static MarkupExtensionsAttributeValueLexerGenerated();
    public XamlTokenTypes get_XamlTokenType();
    protected TokenNodeType makeToken(TokenNodeType type);
    public sealed virtual void Start();
    public sealed virtual void Start(int startOffset, int endOffset, UInt32 state);
    public sealed virtual void Advance();
    public sealed virtual UInt32 get_LexerStateEx();
    public sealed virtual MarkupExtensionLexerState get_CurrentPosition();
    public sealed virtual void set_CurrentPosition(MarkupExtensionLexerState value);
    private sealed virtual override object JetBrains.ReSharper.Psi.Parsing.ILexer.get_CurrentPosition();
    private sealed virtual override void JetBrains.ReSharper.Psi.Parsing.ILexer.set_CurrentPosition(object value);
    public sealed virtual TokenNodeType get_TokenType();
    public sealed virtual int get_TokenStart();
    public sealed virtual int get_TokenEnd();
    public sealed virtual int get_LexemIndent();
    public sealed virtual IBuffer get_Buffer();
    public sealed virtual int get_EOFPos();
    protected void locateToken();
    private void yybegin(int state);
    private void yy_move_end();
    private static bool yy_isnewline(char c);
    internal string yytext();
    private int yylength();
    private void yy_error(int code, bool fatal);
    public TokenNodeType _locateToken();
}
public class JetBrains.ReSharper.Psi.Xaml.Parsing.MarkupExtensionsLexerGenerated : object {
    protected TokenNodeType currTokenType;
    private XamlTokenTypes myXamlTokenTypes;
    private static int YY_F;
    private static int YY_NO_STATE;
    private static int YY_NOT_ACCEPT;
    private static int YY_START;
    private static int YY_END;
    private static int YY_NO_ANCHOR;
    private static int YY_BOL;
    private static int YY_EOF;
    private int yy_buffer_index;
    private int yy_buffer_start;
    private int yy_buffer_end;
    private IBuffer yy_buffer;
    private int yy_eof_pos;
    private bool yy_at_bol;
    private int yy_lexical_state;
    protected static int YY_IN_COMMENT;
    protected static int YYINITIAL;
    protected static int WORK;
    private static Int32[] yy_state_dtrans;
    private static int YY_E_INTERNAL;
    private static int YY_E_MATCH;
    private static String[] yy_error_string;
    private static Int32[] yy_acpt;
    private static Int32[] yy_cmap;
    private static Int32[] yy_rmap;
    private static Int32[0...,0...] yy_nxt;
    public XamlTokenTypes XamlTokenType { get; }
    public UInt32 LexerStateEx { get; }
    public MarkupExtensionLexerState CurrentPosition { get; public set; }
    private object JetBrains.ReSharper.Psi.Parsing.ILexer.CurrentPosition { get; private set; }
    public TokenNodeType TokenType { get; }
    public int TokenStart { get; }
    public int TokenEnd { get; }
    public int LexemIndent { get; }
    public IBuffer Buffer { get; }
    public int EOFPos { get; }
    public MarkupExtensionsLexerGenerated(IBuffer buffer, XamlTokenTypes xamlTokenTypes);
    private MarkupExtensionsLexerGenerated(IBuffer buffer);
    private MarkupExtensionsLexerGenerated(IBuffer buffer, int startOffset, int endOffset);
    private static MarkupExtensionsLexerGenerated();
    public XamlTokenTypes get_XamlTokenType();
    protected TokenNodeType makeToken(TokenNodeType type);
    public sealed virtual void Start();
    public sealed virtual void Start(int startOffset, int endOffset, UInt32 state);
    public sealed virtual void Advance();
    public sealed virtual UInt32 get_LexerStateEx();
    public sealed virtual MarkupExtensionLexerState get_CurrentPosition();
    public sealed virtual void set_CurrentPosition(MarkupExtensionLexerState value);
    private sealed virtual override object JetBrains.ReSharper.Psi.Parsing.ILexer.get_CurrentPosition();
    private sealed virtual override void JetBrains.ReSharper.Psi.Parsing.ILexer.set_CurrentPosition(object value);
    public sealed virtual TokenNodeType get_TokenType();
    public sealed virtual int get_TokenStart();
    public sealed virtual int get_TokenEnd();
    public sealed virtual int get_LexemIndent();
    public sealed virtual IBuffer get_Buffer();
    public sealed virtual int get_EOFPos();
    protected void locateToken();
    private void yybegin(int state);
    private void yy_move_end();
    private static bool yy_isnewline(char c);
    internal string yytext();
    private int yylength();
    private void yy_error(int code, bool fatal);
    public TokenNodeType _locateToken();
}
public class JetBrains.ReSharper.Psi.Xaml.Parsing.MarkupExtensionsTreeBuilder : object {
    [CanBeNullAttribute]
private IXamlTreeBuilderContext myContext;
    private XamlTokenTypes myXamlTokens;
    private XamlElementTypes myXamlElements;
    private IXmlElementFactory myXmlElementFactory;
    private PsiBuilderLexer myLexer;
    private List`1<TokenEntry> myTokens;
    private int myCurrentToken;
    private TokenEntry myCurrentEntry;
    protected TokenEntry CurrentEntry { get; }
    private XmlTokenNodeType CurrentToken { get; }
    private TreeOffset TokenStart { get; }
    private TreeOffset TokenEnd { get; }
    private string TokenText { get; }
    private MarkupExtensionsTreeBuilder(ITreeNode parent, IXamlTreeBuilderContext context);
    [CanBeNullAttribute]
private IMarkupValue ParseMarkupValue(Markup markup, String[] defaultAttributeNames);
    [CanBeNullAttribute]
private IMarkupValue ParseAttributeList(Markup markup, String[] defaultAttributeNames);
    [CanBeNullAttribute]
private MarkupAttribute ParseMarkupAttribute(string markupName, string defaultAttributeName, bool nameRequired);
    private MarkupAttribute CreateMarkupAttribute(string markupName, ComplexIdentifier complexIdentifier);
    [NotNullAttribute]
private MarkupAttribute CreateMarkupAttribute(string markupName, string attributeName);
    private IMarkupAttributeValue ParseEscapedValue();
    protected TokenEntry get_CurrentEntry();
    private XmlTokenNodeType get_CurrentToken();
    private TreeOffset get_TokenStart();
    private TreeOffset get_TokenEnd();
    private string get_TokenText();
    private bool SkipFilter(TokenNodeType tokenType);
    private void Start();
    private TokenNodeType GetNextToken();
    private void PushBack(int nTokens);
    private void CheckInterrupted();
    private IPropertyAttributeValue Parse(IXmlAttributeValue value, ParseDelegate parseDelegate, Predicate`1<TokenNodeType> skip);
    public static IPropertyAttributeValue ParsePathAttributeValue(IXmlAttributeValue value, IXamlTreeBuilderContext context);
    public static IPropertyAttributeValue ParseTypeNameAttributeValue(IXmlAttributeValue value, IXamlTreeBuilderContext context);
    public static IPropertyAttributeValue ParseTypeNameOrMarkupAttributeValue(IXmlAttributeValue value, IXamlTreeBuilderContext context);
    public static IPropertyAttributeValue ParseStaticAttributeValue(IXmlAttributeValue value, IXamlTreeBuilderContext context);
    public static IPropertyAttributeValue ParsePropertyAttribute(IXmlAttributeValue value, IXamlTreeBuilderContext context);
    private XamlIdentifier CreateCurrentIdentifier();
    private IXmlToken CreateCurrentToken();
    private IXmlToken AppendCurrentToken(CompositeElement parent);
    private void AppendNewChild(CompositeElement parent, ITreeNode child);
    private CompositeElement CreateError(CompositeElement compositeElement, XmlSyntaxErrorType errorType, ITreeNode child);
    private void ParseInit(CompositeElement parent, bool leadingSpaceAllowed);
    private ComplexIdentifier ParseComplexIdentifier();
    private IMarkup ParseMarkup(CompositeElement parentElement);
    private static CompositeElement GetParent(Markup markup, AttributeListMarkupValue attrList, MarkupAttribute attr);
    [NotNullAttribute]
private IdentifierMarkupValue CreateIdentifierMarkupValue(ComplexIdentifier complexIdentifier);
    private IMarkupAttributeValue ParseAttributeValue(CompositeElement parent, ParseValueDelegate delegate);
    private IMarkupAttributeValue ParseAttributeValue(CompositeElement parent, string markupName, string attributeName);
    private IMarkupAttributeValue FixTextValue(IMarkupAttributeValue value);
    [CanBeNullAttribute]
private IMarkupAttributeValue ParseXPathValue(CompositeElement parent, ComplexIdentifier complexIdentifier);
    [CanBeNullAttribute]
private IAttachedPropertyExpression ParseAttachedPropertyExpression(CompositeElement parent, TokenNodeType namespaceSeparator);
    [CanBeNullAttribute]
private IQualifierExpression ParseQualifierExpression(TokenNodeType namespaceSeparator);
    [NotNullAttribute]
private IPropertyExpression ParseSimplePropertyExpression();
    [NotNullAttribute]
private IPropertyExpression ParseQualifiedPropertyExpression(TokenNodeType namespaceSeparator);
    [NotNullAttribute]
private IRelativeSourceExpression ParseRelativeSourceExpression();
    [NotNullAttribute]
private IControlNameExpression ParseControlNameExpression();
    [CanBeNullAttribute]
private IMarkupAttributeValue ParsePathValue(CompositeElement parent, bool allowMarkup);
    private IndexerExpression ParseIndexerValue(IQualifierExpression expression);
    private IIndexerParameterList ParseParamList();
    [CanBeNullAttribute]
private IndexerParameter ParseSimpleIndexerParameter();
    [CanBeNullAttribute]
private IIndexerParameter ParseIndexerParameter();
    private static T ConvertElement(ITreeNode source, T destination);
    [CanBeNullAttribute]
private IStaticExpression ParseStaticExpression();
    private bool CanBeAttachedPropertyExpression();
    [CanBeNullAttribute]
private INamespaceAliasQualifier TryParseNamespaceAliasQualifier();
    [CanBeNullAttribute]
private ITypeExpressionBase ParseTypeExpression();
    private void ParseTypeArguments_2009_only(ITypeExpressionBase typeExpression);
    private void ParseRankSpecifiers(ITypeExpressionBase typeExpression);
    private void FlushText(TypeExpressionRankSpecifier rankSpecifier, IXmlToken firstToken, IXmlToken lastToken, int start, int end);
    private CastedIndexerParameter ParseCast();
    public static IPropertyAttributeValue ParseStyleSelectorAttributeValue(IXmlAttributeValue value, IXamlTreeBuilderContext context);
    [CanBeNullAttribute]
private IMarkupAttributeValue ParseStyleSelector(CompositeElement parent);
    [CanBeNullAttribute]
private SelectorExpression TryParseSingleSelectorSegment(SelectorExpression qualifier);
    private NestedSelectorExpression ParseNestedSelector(SelectorExpression qualifier);
    private ChildSelectorExpression ParseChildSelector(ISelectorExpression qualifier);
    private TemplateSelectorExpression ParseTemplateSelector(ISelectorExpression qualifier);
    private ClassSelectorExpression ParseClassSelector(ISelectorExpression qualifier);
    private PseudoClassSelectorExpression ParsePseudoClassSelector(ISelectorExpression qualifier);
    [NotNullAttribute]
private IPseudoClassSelectorArgumentsExpression ParsePseudoClassSelectorArgumentsExpression();
    private ControlNameSelectorExpression ParseControlNameSelector(ISelectorExpression qualifier);
    private OfTypeSelectorExpression ParseOfTypeSelector(ISelectorExpression qualifier);
    private PropertyEqualsSelectorExpression ParsePropertyEqualsSelectorExpression(ISelectorExpression qualifier);
    [CanBeNullAttribute]
private IMarkupAttributeValue ParseXBindPathValue();
    [CanBeNullAttribute]
private MethodInvocationExpression ParseMethodInvocationExpression(IQualifierExpression qualifierExpression);
    private bool NextElementIsMethodInvocation();
    [NotNullAttribute]
private CastExpression ParseCastExpression();
    [CanBeNullAttribute]
private IQualifierExpression ParseFullPathToPropertyOrType();
    [CanBeNullAttribute]
private AttachedPropertyExpression ParseXBindAttachedPropertyExpression();
    [CanBeNullAttribute]
private TypeExpression ParseTypeExpressionWithNamespaceAlias();
    [CanBeNullAttribute]
private IQualifierExpression ParsePropertyOrTypePathExpression();
    [CanBeNullAttribute]
private IPathValue ParseXConstant();
    [CanBeNullAttribute]
private IMarkupStringValue ParseMarkupStringValue();
    [CanBeNullAttribute]
private IPathValue ParseMarkupNumberValue();
}
public class JetBrains.ReSharper.Psi.Xaml.Parsing.XamlTokenNodeType : XmlTokenNodeType {
    [NotNullAttribute]
public XamlTokenTypes XamlTokenTypes { get; }
    public bool IsWhitespace { get; }
    public bool IsComment { get; }
    public bool IsStringLiteral { get; }
    public bool IsConstantLiteral { get; }
    public bool IsIdentifier { get; }
    public bool IsKeyword { get; }
    public XamlTokenNodeType(string s, XmlTokenTypes xmlTokenTypes, IXmlTokenBuilder xmlTokenBuilder, int index);
    public XamlTokenTypes get_XamlTokenTypes();
    public virtual LeafElementBase Create(IBuffer buffer, TreeOffset startOffset, TreeOffset endOffset);
    public virtual bool get_IsWhitespace();
    public virtual bool get_IsComment();
    public virtual bool get_IsStringLiteral();
    public virtual bool get_IsConstantLiteral();
    public virtual bool get_IsIdentifier();
    public virtual bool get_IsKeyword();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xaml.XamlLanguage", "16")]
public class JetBrains.ReSharper.Psi.Xaml.Parsing.XamlTokenTypes : XmlTokenTypesImpl {
    public XamlTokenNodeType MARKUP_LBRACE;
    public XamlTokenNodeType MARKUP_RBRACE;
    public XamlTokenNodeType MARKUP_LBRAKET;
    public XamlTokenNodeType MARKUP_RBRAKET;
    public XamlTokenNodeType MARKUP_LPARENTH;
    public XamlTokenNodeType MARKUP_RPARENTH;
    public XamlTokenNodeType MARKUP_ESCAPE_START;
    public XamlTokenNodeType MARKUP_IDENTIFIER;
    public XamlTokenNodeType MARKUP_RELATIVE_SOURCE_IDENTIFIER;
    public XamlTokenNodeType MARKUP_CONTROL_NAME_IDENTIFIER;
    public XamlTokenNodeType MARKUP_XNUMBER_OR_CONTROL_NAME_IDENTIFIER;
    public XamlTokenNodeType MARKUP_NUMBER;
    public XamlTokenNodeType MARKUP_XNUMBER;
    public XamlTokenNodeType MARKUP_EQ;
    public XamlTokenNodeType MARKUP_SPACE;
    public XamlTokenNodeType MARKUP_COMMA;
    public XamlTokenNodeType MARKUP_DOT;
    public XamlTokenNodeType MARKUP_COLON;
    public XamlTokenNodeType MARKUP_SLASH;
    public XamlTokenNodeType MARKUP_SEMICOLON;
    public XamlTokenNodeType MARKUP_EXCLAMATION;
    public XamlTokenNodeType MARKUP_CIRCUMFLEX;
    public XamlTokenNodeType MARKUP_GT;
    public XamlTokenNodeType MARKUP_ESC_AMP;
    public XamlTokenNodeType MARKUP_ESC_GT;
    public XamlTokenNodeType MARKUP_ESC_GT_EQ;
    public XamlTokenNodeType MARKUP_ESC_LT;
    public XamlTokenNodeType MARKUP_ESC_LT_EQ;
    public XamlTokenNodeType MARKUP_ESC_BACKSLASH;
    public XamlTokenNodeType MARKUP_ESC_EQ;
    public XamlTokenNodeType MARKUP_ESC_COMMA;
    public XamlTokenNodeType MARKUP_ESC_LBRACE;
    public XamlTokenNodeType MARKUP_ESC_RBRACE;
    public XamlTokenNodeType MARKUP_ESC_SINGLEQUOTE;
    public XamlTokenNodeType MARKUP_ESC_DOUBLEQUOTE;
    public XamlTokenNodeType MARKUP_PERCENT;
    public XamlTokenNodeType MARKUP_BACKTICK;
    public XamlTokenNodeType MARKUP_ERROR;
    public XamlTokenNodeType MARKUP_QUOTE;
    public XamlTokenNodeType MARKUP_TEXT;
    public XamlTokenNodeType XPATH_AT;
    public XamlTokenNodeType XPATH_ASTERISK;
    public XamlTokenNodeType XPATH_ADD;
    public XamlTokenNodeType XPATH_SUB;
    public XamlTokenNodeType XPATH_NOT_EQ;
    public XamlTokenNodeType XPATH_SET_OP;
    public XamlTokenTypes(PsiLanguageType languageType, IXmlTokenBuilder xmlTokenBuilder);
    public static XamlTokenTypes GetInstance(PsiLanguageType languageType);
    public static XamlTokenTypes GetInstance();
}
public class JetBrains.ReSharper.Psi.Xaml.Parsing.XamlTreeBuilder : XmlTreeBuilder {
    private IXamlTreeBuilderContext myTreeBuilderContext;
    protected XamlTokenTypes XamlTokenTypes { get; }
    public XamlTreeBuilder(IXmlElementFactory elementFactory, IXmlElementFactoryContext factoryContext, ITokenIntern intern, IXamlTreeBuilderContext treeBuilderContext);
    protected XamlTokenTypes get_XamlTokenTypes();
    private IPropertyAttributeValue ParseTypeArguments(IXmlAttributeValue child);
    protected virtual void AppendNewChild(IXmlAttribute parent, IXmlAttributeValue child);
    protected virtual void OnTagContainerCreated(IXmlTagContainer container);
    private void ParseBindingPathPropertyElementValue(XamlPropertyElement propertyElement);
    private void FixCommentTokensInAttribteValue(IPropertyAttributeValue attributeValue);
    private static bool IsMarkupQuoteToken(ITreeNode node);
}
[ShellFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Psi.Xaml.ProjectModel.Editing.XamlNewFileBuildActionProvider : NewFileBuildActionProvider {
    public virtual bool IsApplicable(IProject project);
    public virtual BuildAction GetBuildAction(IProjectFolder parentFolder, VirtualFileSystemPath location);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Psi.Xaml.ProjectModel.Editing.XamlReloadProjectOnChangePolicy : object {
    private static string MarkupCompileCacheName;
    public sealed virtual bool ShouldReload(IProjectItem projectItem);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Psi.Xaml.ProjectModel.Editing.ZoneMarker : object {
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Psi.Xaml.ProjectModel.WpfCoreProjectPropertiesRequest : object {
    public static string UseWpf;
    public static string UseWpf2;
    public static string ImportXamlTargets;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <RequestedProperties>k__BackingField;
    public IEnumerable`1<string> RequestedProperties { get; }
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<string> get_RequestedProperties();
}
public class JetBrains.ReSharper.Psi.Xaml.Resources.PsiXamlThemedIcons : object {
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public static class JetBrains.ReSharper.Psi.Xaml.Resources.Strings : object {
    private static ILogger ourLog;
    private static Lazy`1<JetResourceManager> ourResourceManager;
    [EditorBrowsableAttribute("2")]
public static JetResourceManager ResourceManager { get; }
    public static string XAMLNamingSettingsSettingDescription { get; }
    public static string XAMLBuildActionsSettingsSettingDescription { get; }
    public static string XAMLCustomBuildActionsSettingDescription { get; }
    public static string FileGeneratedFromXAMLIsIgnored_Text { get; }
    public static string PropertyExpected_ToolTip { get; }
    public static string PropertyOrEventExpected_ToolTip { get; }
    public static string FieldExpected_ToolTip { get; }
    public static string MethodExpected_ToolTip { get; }
    public static string IncorrectSignature_ToolTip { get; }
    public static string EventExpected_ToolTip { get; }
    public static string CommandExpected_ToolTip { get; }
    public static string InvalidResourceType_ToolTip { get; }
    public static string StaticMemberExpected_ToolTip { get; }
    public static string PublicMemberExpected_ToolTip { get; }
    public static string ResourceExpected_ToolTip { get; }
    public static string DefaultPropertyExpected_ToolTip { get; }
    public static string StyleClassExpected_ToolTip { get; }
    public static string FieldOrPropertyExpected_ToolTip { get; }
    public static string EnumMemberExpected_ToolTip { get; }
    public static string ParentIndexOutsideTheCurrentComponent_ToolTip { get; }
    public static string AttachedEventHasNoAddHandlerMethod_ToolTip { get; }
    public static string ParameterTypeMismatch_ToolTip { get; }
    public static string NotNestedTypeExpected_ToolTip { get; }
    public static string NamespaceOrNotNestedTypeExpected_ToolTip { get; }
    public static string NamespaceAliasExpected_ToolTip { get; }
    public static string TypeThatCanBeInstantiatedExpected_ToolTip { get; }
    public static string WritablePropertyOrCollectionExpected_ToolTip { get; }
    public static string InheritorOfTheResourceDictionaryIsExpected_ToolTip { get; }
    public static string AssemblyNameExpectedInsteadOfProject_ToolTip { get; }
    public static string FieldOrTemplateFieldExpected_ToolTip { get; }
    public static string WritablePropertyExpected_ToolTip { get; }
    public static string ReadablePropertyExpected_ToolTip { get; }
    public static string XAML_LANGUAGE_LEVEL_ERROR_ToolTip { get; }
    public static string IncorrectReturnType_ToolTip { get; }
    public static string StaticResourceNotFound_ToolTip { get; }
    public static string MultipleOverloadsFound_ToolTip { get; }
    public static string ThisEnumValueIsNotSupported_ToolTip { get; }
    public static string NonNegativeDoubleValueExpected_Text { get; }
    public static string ExpectedDoubleValueFollowedByOptional_Text { get; }
    public static string NamespaceAlias_Text { get; }
    public static string Resource_Text { get; }
    public static string ObjectElement_Text { get; }
    public static string Attribute_Text { get; }
    public static string DefaultAlias_Text { get; }
    public static string WrongXAMLLanguageVersions_Text { get; }
    public static string NamespaceAliasNamedElement { get; }
    public static string XamlFieldNamedElement { get; }
    public static string XamlResourceNamedElement { get; }
    private static Strings();
    public static JetResourceManager get_ResourceManager();
    public static string Choice(string format, Object[] args);
    public static string get_XAMLNamingSettingsSettingDescription();
    public static string get_XAMLBuildActionsSettingsSettingDescription();
    public static string get_XAMLCustomBuildActionsSettingDescription();
    public static string get_FileGeneratedFromXAMLIsIgnored_Text();
    public static string get_PropertyExpected_ToolTip();
    public static string get_PropertyOrEventExpected_ToolTip();
    public static string get_FieldExpected_ToolTip();
    public static string get_MethodExpected_ToolTip();
    public static string get_IncorrectSignature_ToolTip();
    public static string get_EventExpected_ToolTip();
    public static string get_CommandExpected_ToolTip();
    public static string get_InvalidResourceType_ToolTip();
    public static string get_StaticMemberExpected_ToolTip();
    public static string get_PublicMemberExpected_ToolTip();
    public static string get_ResourceExpected_ToolTip();
    public static string get_DefaultPropertyExpected_ToolTip();
    public static string get_StyleClassExpected_ToolTip();
    public static string get_FieldOrPropertyExpected_ToolTip();
    public static string get_EnumMemberExpected_ToolTip();
    public static string get_ParentIndexOutsideTheCurrentComponent_ToolTip();
    public static string get_AttachedEventHasNoAddHandlerMethod_ToolTip();
    public static string get_ParameterTypeMismatch_ToolTip();
    public static string get_NotNestedTypeExpected_ToolTip();
    public static string get_NamespaceOrNotNestedTypeExpected_ToolTip();
    public static string get_NamespaceAliasExpected_ToolTip();
    public static string get_TypeThatCanBeInstantiatedExpected_ToolTip();
    public static string get_WritablePropertyOrCollectionExpected_ToolTip();
    public static string get_InheritorOfTheResourceDictionaryIsExpected_ToolTip();
    public static string get_AssemblyNameExpectedInsteadOfProject_ToolTip();
    public static string get_FieldOrTemplateFieldExpected_ToolTip();
    public static string get_WritablePropertyExpected_ToolTip();
    public static string get_ReadablePropertyExpected_ToolTip();
    public static string get_XAML_LANGUAGE_LEVEL_ERROR_ToolTip();
    public static string get_IncorrectReturnType_ToolTip();
    public static string get_StaticResourceNotFound_ToolTip();
    public static string get_MultipleOverloadsFound_ToolTip();
    public static string get_ThisEnumValueIsNotSupported_ToolTip();
    public static string get_NonNegativeDoubleValueExpected_Text();
    public static string get_ExpectedDoubleValueFollowedByOptional_Text();
    public static string get_NamespaceAlias_Text();
    public static string get_Resource_Text();
    public static string get_ObjectElement_Text();
    public static string get_Attribute_Text();
    public static string get_DefaultAlias_Text();
    public static string get_WrongXAMLLanguageVersions_Text();
    public static string get_NamespaceAliasNamedElement();
    public static string get_XamlFieldNamedElement();
    public static string get_XamlResourceNamedElement();
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Psi.Xaml.Tree.BindingExtension : object {
    private static Key`1<CachedPsiValue`1<Tuple`2<IType, IXamlObjectElement>>> ourSourceTypeKey;
    [ThreadStaticAttribute]
private static JetHashSet`1<ITreeNode> ourBindingsInProgress;
    private static BindingExtension();
    [ExtensionAttribute]
[NotNullAttribute]
public static IType GetBindingSourceType(ITreeNode binding);
    [ExtensionAttribute]
[NotNullAttribute]
public static IType GetBindingSourceType(ITreeNode binding, IXamlObjectElement& objectElement);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static ITreeNode GetConverterSetter(IBinding binding);
    [ExtensionAttribute]
public static bool IsReferenceInsideTemplateBindingProperty(IXamlReference reference);
}
public enum JetBrains.ReSharper.Psi.Xaml.Tree.BindingMode : Enum {
    public int value__;
    public static BindingMode UNKNOWN;
    public static BindingMode ONE_WAY;
    public static BindingMode ONE_TIME;
    public static BindingMode TWO_WAY;
    public static BindingMode ONE_WAY_TO_SOURCE;
    public static BindingMode DEFAULT;
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.IAliasExpandableReference {
    [NotNullAttribute]
public abstract virtual ISymbolFilter[] GetExpandedCompletionFilters();
    [NotNullAttribute]
public abstract virtual ISymbolFilter[] GetExpandedSmartSymbolFilters();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.IArgumentsAttribute {
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.IAuthorityReference {
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.IBinding {
    public BindingMode Mode { get; }
    [CanBeNullAttribute]
public IPathValue Path { get; }
    [CanBeNullAttribute]
public ISourceUsage Source { get; }
    [CanBeNullAttribute]
public IElementNameUsage ElementName { get; }
    [CanBeNullAttribute]
public IRelativeSourceUsage RelativeSource { get; }
    [CanBeNullAttribute]
public ITreeNode FallbackValue { get; }
    [CanBeNullAttribute]
public IType DataType { get; }
    public abstract virtual BindingMode get_Mode();
    public abstract virtual IPathValue get_Path();
    public abstract virtual ISourceUsage get_Source();
    public abstract virtual IElementNameUsage get_ElementName();
    public abstract virtual IRelativeSourceUsage get_RelativeSource();
    public abstract virtual ITreeNode get_FallbackValue();
    public abstract virtual IType get_DataType();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.IBindingElement {
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.IControlTemplateDeclaration {
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.IDataTemplateDeclaration {
    [CanBeNullAttribute]
public IReference DataTypeReference { get; }
    public abstract virtual IReference get_DataTypeReference();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.IDeclarationNameAttribute {
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.IDeclarationNameElement {
    [NotNullAttribute]
public string DeclaredName { get; }
    public abstract virtual string get_DeclaredName();
    public abstract virtual TreeTextRange GetNameRange();
    public abstract virtual void SetName(string newName);
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.IDeclarationNamePropertyElement {
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.IDependencyPropertyReference {
    public bool CanBeAttachedProperty { get; }
    public bool CanBeRegularProperty { get; }
    public abstract virtual bool get_CanBeAttachedProperty();
    public abstract virtual bool get_CanBeRegularProperty();
    [NotNullAttribute]
public abstract virtual ResolveResultWithInfo ResolveAsUnqualified();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.IElementNameReference {
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.IElementNameUsage {
    [CanBeNullAttribute]
public IElementNameReference ElementNameReference { get; }
    public abstract virtual IElementNameReference get_ElementNameReference();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.IFieldDeclaration {
    [CanBeNullAttribute]
public IField DeclaredElement { get; }
    public abstract virtual IField get_DeclaredElement();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.IFolderOrAssemblyReference {
    [CanBeNullAttribute]
public abstract virtual IModule GetResolvedModule();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.IKeywordAttribute {
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.IMarkupPropertyReference {
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.IModifiersAttribute {
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.INameAttribute {
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.INameInClassOrResourceAttribute {
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.INamespaceAlias {
    [NotNullAttribute]
public IXamlNamespaceAlias DeclaredElement { get; }
    public bool IsDefault { get; }
    public abstract virtual IXamlNamespaceAlias get_DeclaredElement();
    public abstract virtual bool get_IsDefault();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.IObjectDataProviderDeclaration {
    [CanBeNullAttribute]
public IPropertySetter ObjectInstance { get; }
    [CanBeNullAttribute]
public IReference ObjectTypeReference { get; }
    [CanBeNullAttribute]
public IReference MethodReference { get; }
    public TreeNodeEnumerable`1<IXamlObjectElement> ConstructorParameters { get; }
    public TreeNodeEnumerable`1<IXamlObjectElement> MethodParameters { get; }
    public abstract virtual IPropertySetter get_ObjectInstance();
    public abstract virtual IReference get_ObjectTypeReference();
    public abstract virtual IReference get_MethodReference();
    public abstract virtual TreeNodeEnumerable`1<IXamlObjectElement> get_ConstructorParameters();
    public abstract virtual TreeNodeEnumerable`1<IXamlObjectElement> get_MethodParameters();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.IPathQualifier {
    [NotNullAttribute]
public abstract virtual VirtualFileSystemPath GetQualifierPath();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.IPredefinedAttributeReference {
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.IPropertyAttribute {
    [CanBeNullAttribute]
public IPropertyAttributeValue Value { get; }
    public abstract virtual IPropertyAttributeValue get_Value();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.IPropertyAttributeValue {
    [CanBeNullAttribute]
public IXmlToken LQuote { get; }
    [CanBeNullAttribute]
public IXmlToken RQuote { get; }
    [CanBeNullAttribute]
public IMarkup MarkupExtension { get; }
    [CanBeNullAttribute]
public IMarkupAttributeValue MarkupAttributeValue { get; }
    public abstract virtual IXmlToken get_LQuote();
    public abstract virtual IXmlToken get_RQuote();
    [CanBeNullAttribute]
public abstract virtual IXmlToken GetTextToken();
    public abstract virtual IMarkup get_MarkupExtension();
    public abstract virtual IMarkupAttributeValue get_MarkupAttributeValue();
    public abstract virtual TreeNodeCollection`1<IMarkupAttributeValue> GetMarkupAttributeValues();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.IPropertyReference {
    public abstract virtual bool CanBeSelfProperty();
    public abstract virtual bool CanBeAttachedProperty();
    [NotNullAttribute]
public abstract virtual ResolveResultWithInfo ResolveAsUnqualified();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.IRelativeSourceReference {
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.IRelativeSourceUsage {
    public RelativeSourceMode Mode { get; }
    public int AncestorLevel { get; }
    [CanBeNullAttribute]
public ITypeUsage AncestorType { get; }
    public abstract virtual RelativeSourceMode get_Mode();
    public abstract virtual int get_AncestorLevel();
    public abstract virtual ITypeUsage get_AncestorType();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.IResourceByClassReference {
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.IResourceByStaticMemberReference {
    [CanBeNullAttribute]
public abstract virtual IDeclaredElement GetStaticMember();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.IResourceByTypeReference {
    [NotNullAttribute]
public abstract virtual IType GetKeyType();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.IResourceDeclaration {
    [CanBeNullAttribute]
public IXamlResource DeclaredElement { get; }
    [CanBeNullAttribute]
public IReference KeyTypeReference { get; }
    [CanBeNullAttribute]
public IReference StaticMemberReference { get; }
    public abstract virtual IXamlResource get_DeclaredElement();
    [NotNullAttribute]
public abstract virtual IEnumerable`1<IXKeyElement> GetXKeyElements();
    public abstract virtual IReference get_KeyTypeReference();
    public abstract virtual IReference get_StaticMemberReference();
    public abstract virtual IEnumerable`1<IXamarinFormsClassElement> GetXamarinFormsClassElements();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.IResourceInSpecificContainerReference {
    [CanBeNullAttribute]
public IXamlObjectElement TargetContainer { get; }
    public abstract virtual IXamlObjectElement get_TargetContainer();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.IResourceKeyAttribute {
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.IResourceReference {
    [CanBeNullAttribute]
public ITypeMemberReference TargetMemberReference { get; }
    public bool IsStatic { get; }
    public bool IsDynamic { get; }
    public abstract virtual ITypeMemberReference get_TargetMemberReference();
    [NotNullAttribute]
public abstract virtual IType GetExpectedType();
    public abstract virtual bool get_IsStatic();
    public abstract virtual bool get_IsDynamic();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.IResourceUsage {
    [NotNullAttribute]
public ITreeNode ReferenceName { get; }
    [CanBeNullAttribute]
public IResourceReference ResourceReference { get; }
    public bool IsStaticResource { get; }
    public bool IsDynamicResource { get; }
    public bool IsThemeResource { get; }
    public abstract virtual ITreeNode get_ReferenceName();
    public abstract virtual IResourceReference get_ResourceReference();
    public abstract virtual bool get_IsStaticResource();
    public abstract virtual bool get_IsDynamicResource();
    public abstract virtual bool get_IsThemeResource();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.IRoutedEventReference {
    [NotNullAttribute]
public abstract virtual ResolveResultWithInfo ResolveAsUnqualified();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.ISharedAttribute {
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.ISmartCompletableReference {
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.ISourceUsage {
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.IStaticMemberReference {
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.IStyleDeclaration {
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.ITargetNameReference {
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.ITargetTypeContainerDeclaration {
    [CanBeNullAttribute]
public IReference TargetTypeReference { get; }
    [CanBeNullAttribute]
public IType TargetType { get; }
    public abstract virtual IReference get_TargetTypeReference();
    public abstract virtual IType get_TargetType();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.ITemplateBinding {
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.ITemplateFieldDeclaration {
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.ITypeArgumentsAttribute {
    [NotNullAttribute]
public IList`1<IXamlTypeReference> TypeReferences { get; }
    public abstract virtual IList`1<IXamlTypeReference> get_TypeReferences();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.IUriPrefixReference {
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.IValueReference {
    public abstract virtual IReference SetValue(string text);
    public abstract virtual ValueReferenceType GetValueReferenceType();
    public abstract virtual IDeclaredType GetReferencedEventType();
    public abstract virtual IType GetExpectedType();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.IXamarinFormsClassAttribute {
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.IXamarinFormsClassElement {
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.IXamarinFormsClassPropertyElement {
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.IXamlAttribute {
    [NotNullAttribute]
public IXamlIdentifier Identifier { get; }
    public abstract virtual IXamlIdentifier get_Identifier();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.IXamlBindBackMethodReference {
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.IXamlConstructorReference {
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.IXamlDeclaration {
    [NotNullAttribute]
public IType Type { get; }
    public abstract virtual IType get_Type();
    public abstract virtual bool CanBeBoundTo(IDeclaredElement element);
    [NotNullAttribute]
public abstract virtual IEnumerable`1<string> GetPossibleDeclaredNames();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.IXamlEmbeddedResourceReference {
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.IXamlFactoryMethodReference {
    [NotNullAttribute]
public IType ExpectedReturnType { get; }
    public abstract virtual IType get_ExpectedReturnType();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.IXamlFile {
    public abstract virtual TreeNodeEnumerable`1<IXamlTypeDeclaration> GetTypeDeclarations();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.IXamlFunctionReference {
    public bool CaseSensitive { get; }
    [CanBeNullAttribute]
public IReference TypeReference { get; }
    [NotNullAttribute]
public IList`1<IExpressionType> ParameterTypes { get; }
    public abstract virtual bool get_CaseSensitive();
    public abstract virtual IReference get_TypeReference();
    public abstract virtual IList`1<IExpressionType> get_ParameterTypes();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.IXamlIdentifier {
    public TreeTextRange QualifierRange { get; }
    public TreeTextRange IdRange { get; }
    [NotNullAttribute]
public string Qualifier { get; }
    [NotNullAttribute]
public string Id { get; }
    public abstract virtual TreeTextRange get_QualifierRange();
    public abstract virtual TreeTextRange get_IdRange();
    public abstract virtual string get_Qualifier();
    public abstract virtual string get_Id();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.IXamlMethodReference {
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.IXamlNamespaceAliasReference {
    [NotNullAttribute]
public abstract virtual IReference BindToUri(string aliasName, string aliasUri);
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.IXamlNestedTypeReference {
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.IXamlObjectElement {
    [NotNullAttribute]
public IList`1<IType> TypeArguments { get; }
    [CanBeNullAttribute]
public IReference ContentPropertyReference { get; }
    public abstract virtual IList`1<IType> get_TypeArguments();
    public abstract virtual IReference get_ContentPropertyReference();
    [CanBeNullAttribute]
public abstract virtual IPropertySetter GetPropertySetter(string propertyName, Predicate`1<IPropertySetter> predicate);
    [NotNullAttribute]
public abstract virtual IEnumerable`1<IPropertySetter> GetPropertySetters();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.IXamlObjectElementDeclaration {
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.IXamlObjectElementDeclaration`1 {
    [NotNullAttribute]
public string Name { get; }
    [CanBeNullAttribute]
public abstract virtual TNameElement GetDeclarationNameElement();
    public abstract virtual string get_Name();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.IXamlOdpMethodReference {
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.IXamlPathReference {
    public bool CanBeMappedOrIgnored { get; }
    public bool IsEmptyNameAllowed { get; }
    public bool UseRootFolder { get; }
    public bool CanBeWinRtQualified { get; }
    public bool IsDesignTime { get; }
    public abstract virtual bool get_CanBeMappedOrIgnored();
    public abstract virtual bool get_IsEmptyNameAllowed();
    public abstract virtual bool get_UseRootFolder();
    public abstract virtual bool get_CanBeWinRtQualified();
    public abstract virtual bool get_IsDesignTime();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.IXamlPropertyElement {
    [NotNullAttribute]
public string TypeName { get; }
    public abstract virtual string get_TypeName();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.IXamlReference {
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.IXamlReferenceWithExpectedType {
    [NotNullAttribute]
public abstract virtual IType[] GetExpectedTypes();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.IXamlReferenceWithToken {
    [CanBeNullAttribute]
public abstract virtual ITypeElement GetQualifierTypeElement();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.IXamlStyleClassReference {
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.IXamlTag {
    public TreeNodeCollection`1<INamespaceAlias> NamespaceAliases { get; }
    public TreeNodeEnumerable`1<INamespaceAlias> NamespaceAliasesEnumerable { get; }
    public abstract virtual TreeNodeCollection`1<INamespaceAlias> get_NamespaceAliases();
    public abstract virtual TreeNodeEnumerable`1<INamespaceAlias> get_NamespaceAliasesEnumerable();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.IXamlToken {
    [NotNullAttribute]
public XamlTokenTypes XamlTokenTypes { get; }
    public abstract virtual XamlTokenTypes get_XamlTokenTypes();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.IXamlTypeDeclaration {
    [NotNullAttribute]
public String[] NamespaceNames { get; }
    [NotNullAttribute]
public TreeTextRange[] NamespaceRanges { get; }
    [NotNullAttribute]
public String[] ExtendsList { get; }
    public bool DeviceFamilyViewsAllowed { get; }
    [CanBeNullAttribute]
public DeviceFamilyData DeviceFamilyData { get; }
    public abstract virtual String[] get_NamespaceNames();
    public abstract virtual TreeTextRange[] get_NamespaceRanges();
    public abstract virtual String[] get_ExtendsList();
    public abstract virtual void SetNamespaceName(int namespacePartsCount, string newName);
    public abstract virtual void SetNamespaceName(string newName);
    public abstract virtual bool get_DeviceFamilyViewsAllowed();
    public abstract virtual DeviceFamilyData get_DeviceFamilyData();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.IXamlTypeReference {
    public bool CanBeMarkupExtensionReference { get; }
    [CanBeNullAttribute]
public IList`1<ReferencedNamespace> ContainingNamespaces { get; }
    public abstract virtual bool get_CanBeMarkupExtensionReference();
    public abstract virtual IList`1<ReferencedNamespace> get_ContainingNamespaces();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.IXamlXBindEventReference {
    public abstract virtual IDelegate GetExpectedDelegate();
    public abstract virtual IDeclaredType GetExpectedEventType();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.IXamlXBindMethodInvocationReference {
    [NotNullAttribute]
public IType ExpectedReturnType { get; }
    public abstract virtual IType get_ExpectedReturnType();
    public abstract virtual bool TryGetFirstUnmatchedArgument(IXamlArgument& argument, IParameter& parameter);
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.IXamlXBindMethodReference {
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.IXClassAttribute {
    [NotNullAttribute]
public String[] NamespaceNames { get; }
    [NotNullAttribute]
public TreeTextRange[] NamespaceTreeTextRanges { get; }
    public abstract virtual String[] get_NamespaceNames();
    public abstract virtual TreeTextRange[] get_NamespaceTreeTextRanges();
    public abstract virtual void SetNamespaceName(string newName);
    public abstract virtual void SetNamespaceName(int namespacePartsCount, string newName);
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.IXKeyAttribute {
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.IXKeyElement {
    [CanBeNullAttribute]
public IReference KeyTypeReference { get; }
    [CanBeNullAttribute]
public IReference StaticMemberReference { get; }
    public abstract virtual IReference get_KeyTypeReference();
    public abstract virtual IReference get_StaticMemberReference();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.IXKeyObjectElement {
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.IXmlDataProviderDeclaration {
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.IXmlSpaceAttribute {
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.IXNameAttribute {
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.IXNull {
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.IXReference {
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.IXStatic {
    [NotNullAttribute]
public string MemberName { get; }
    public abstract virtual string get_MemberName();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.IXType {
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.MarkupExtensions.IAttachedPropertyExpression {
    [CanBeNullAttribute]
public IXmlToken LParenth { get; }
    [CanBeNullAttribute]
public IXmlToken RParenth { get; }
    [CanBeNullAttribute]
public ISimplePropertyExpression Property { get; }
    public abstract virtual IXmlToken get_LParenth();
    public abstract virtual IXmlToken get_RParenth();
    public abstract virtual ISimplePropertyExpression get_Property();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.MarkupExtensions.IAttributeListMarkupValue {
    public TreeNodeCollection`1<IMarkupAttribute> Attributes { get; }
    public abstract virtual TreeNodeCollection`1<IMarkupAttribute> get_Attributes();
    public abstract virtual void RemoveAttribute(IMarkupAttribute attribute);
    [NotNullAttribute]
public abstract virtual IMarkupAttribute AddAttributeAfter(IMarkupAttribute child, IMarkupAttribute anchor);
    [NotNullAttribute]
public abstract virtual IMarkupAttribute AddAttributeBefore(IMarkupAttribute child, IMarkupAttribute anchor);
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.MarkupExtensions.IBindingMarkup {
    public IMarkupAttribute ModeAttribute { get; }
    public abstract virtual IMarkupAttribute get_ModeAttribute();
    public abstract virtual void SetBindingMode(BindingMode mode);
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.MarkupExtensions.ICastedIndexerParameter {
    [NotNullAttribute]
public IXmlToken LParenth { get; }
    [CanBeNullAttribute]
public IXmlToken RParenth { get; }
    [CanBeNullAttribute]
public ITypeExpression TypeExpression { get; }
    public abstract virtual IXmlToken get_LParenth();
    public abstract virtual IXmlToken get_RParenth();
    public abstract virtual ITypeExpression get_TypeExpression();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.MarkupExtensions.ICastedPropertyExpression {
    [CanBeNullAttribute]
public IQualifierExpression Qualifier { get; }
    public ICastExpression CastExpression { get; }
    public abstract virtual IQualifierExpression get_Qualifier();
    public abstract virtual ICastExpression get_CastExpression();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.MarkupExtensions.ICastExpression {
    public IXmlToken LParenth { get; }
    public IXmlToken TargetLParenth { get; }
    [CanBeNullAttribute]
public ITypeExpression TargetType { get; }
    public IXmlToken TargetRParenth { get; }
    [CanBeNullAttribute]
public IPathValue Value { get; }
    public IXmlToken RParenth { get; }
    public abstract virtual IXmlToken get_LParenth();
    public abstract virtual IXmlToken get_TargetLParenth();
    public abstract virtual ITypeExpression get_TargetType();
    public abstract virtual IXmlToken get_TargetRParenth();
    public abstract virtual IPathValue get_Value();
    public abstract virtual IXmlToken get_RParenth();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.MarkupExtensions.IChildSelectorExpression {
    [CanBeNullAttribute]
public ISelectorExpression Qualifier { get; }
    public abstract virtual ISelectorExpression get_Qualifier();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.MarkupExtensions.IClassSelectorExpression {
    [CanBeNullAttribute]
public ISelectorExpression Qualifier { get; }
    [CanBeNullAttribute]
public IXamlIdentifier Name { get; }
    public abstract virtual ISelectorExpression get_Qualifier();
    public abstract virtual IXamlIdentifier get_Name();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.MarkupExtensions.IControlNameExpression {
    public IXamlToken Name { get; }
    public abstract virtual IXamlToken get_Name();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.MarkupExtensions.IControlNameSelectorExpression {
    [CanBeNullAttribute]
public ISelectorExpression Qualifier { get; }
    public abstract virtual ISelectorExpression get_Qualifier();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.MarkupExtensions.IDescendantSelectorExpression {
    [CanBeNullAttribute]
public ISelectorExpression Qualifier { get; }
    public abstract virtual ISelectorExpression get_Qualifier();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.MarkupExtensions.IEscapedValue {
    [NotNullAttribute]
public IXmlToken EscapeToken { get; }
    public abstract virtual IXmlToken get_EscapeToken();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.MarkupExtensions.IIdentifierMarkupValue {
    [NotNullAttribute]
public IXamlIdentifier Identifier { get; }
    public abstract virtual IXamlIdentifier get_Identifier();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.MarkupExtensions.IIndexerExpression {
    [CanBeNullAttribute]
public IQualifierExpression Qualifier { get; }
    [NotNullAttribute]
public IIndexerParameterList ParameterList { get; }
    public abstract virtual IQualifierExpression get_Qualifier();
    public abstract virtual IIndexerParameterList get_ParameterList();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.MarkupExtensions.IIndexerExpressionNode {
    [NotNullAttribute]
public IXmlToken LBracket { get; }
    [CanBeNullAttribute]
public IXmlToken Dot { get; }
    [CanBeNullAttribute]
public IXmlToken RBracket { get; }
    public abstract virtual IXmlToken get_LBracket();
    public abstract virtual IXmlToken get_Dot();
    public abstract virtual IXmlToken get_RBracket();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.MarkupExtensions.IIndexerParameter {
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.MarkupExtensions.IIndexerParameterList {
    public TreeNodeCollection`1<IIndexerParameter> Parameters { get; }
    public abstract virtual TreeNodeCollection`1<IIndexerParameter> get_Parameters();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.MarkupExtensions.IMarkup {
    [NotNullAttribute]
public IXmlToken LBrace { get; }
    [CanBeNullAttribute]
public IXamlIdentifier NameNode { get; }
    [CanBeNullAttribute]
public IXmlToken RBrace { get; }
    [NotNullAttribute]
public string Name { get; }
    [CanBeNullAttribute]
public IMarkupValue Value { get; }
    public abstract virtual IXmlToken get_LBrace();
    public abstract virtual IXamlIdentifier get_NameNode();
    public abstract virtual IXmlToken get_RBrace();
    public abstract virtual string get_Name();
    public abstract virtual IMarkupValue get_Value();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.MarkupExtensions.IMarkupAttribute {
    [CanBeNullAttribute]
public IXamlIdentifier NameNode { get; }
    [CanBeNullAttribute]
public IXmlToken Eq { get; }
    [NotNullAttribute]
public string Name { get; }
    [CanBeNullAttribute]
public IMarkupAttributeValue Value { get; }
    public abstract virtual IXamlIdentifier get_NameNode();
    public abstract virtual IXmlToken get_Eq();
    public abstract virtual string get_Name();
    public abstract virtual IMarkupAttributeValue get_Value();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.MarkupExtensions.IMarkupAttributeValue {
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.MarkupExtensions.IMarkupConstant {
    public INamespaceAliasQualifier NamespaceAlias { get; }
    public IXamlIdentifier Name { get; }
    public abstract virtual INamespaceAliasQualifier get_NamespaceAlias();
    public abstract virtual IXamlIdentifier get_Name();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.MarkupExtensions.IMarkupNumberConstant {
    public IXmlToken Value { get; }
    public abstract virtual IXmlToken get_Value();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.MarkupExtensions.IMarkupStringValue {
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.MarkupExtensions.IMarkupValue {
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.MarkupExtensions.IMethodArgumentsList {
    public TreeNodeCollection`1<IXamlArgument> Arguments { get; }
    public abstract virtual TreeNodeCollection`1<IXamlArgument> get_Arguments();
    public abstract virtual void RemoveArgument(IXamlArgument argument);
    public abstract virtual IXamlArgument AddArgumentBefore(IXamlArgument newArgument, IXamlArgument anchor);
    public abstract virtual IXamlArgument AddArgumentAfter(IXamlArgument newArgument, IXamlArgument anchor);
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.MarkupExtensions.IMethodInvocationExpression {
    public IQualifierExpression Qualifier { get; }
    public IXmlToken Dot { get; }
    public IXamlIdentifier MethodName { get; }
    public IXmlToken LeftParenthesis { get; }
    public IMethodArgumentsList ArgumentsList { get; }
    public IXmlToken RightParenthesis { get; }
    public abstract virtual IQualifierExpression get_Qualifier();
    public abstract virtual IXmlToken get_Dot();
    public abstract virtual IXamlIdentifier get_MethodName();
    public abstract virtual IXmlToken get_LeftParenthesis();
    public abstract virtual IMethodArgumentsList get_ArgumentsList();
    public abstract virtual IXmlToken get_RightParenthesis();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.MarkupExtensions.INamespaceAliasQualifier {
    [CanBeNullAttribute]
public IXamlIdentifier NamespaceAlias { get; }
    public abstract virtual IXamlIdentifier get_NamespaceAlias();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.MarkupExtensions.INegationExpression {
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.MarkupExtensions.INestedSelectorExpression {
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.MarkupExtensions.INestedTypeExpression {
    [NotNullAttribute]
public IXmlToken Plus { get; }
    [NotNullAttribute]
public ITypeExpressionBase Qualifier { get; }
    [CanBeNullAttribute]
public IXamlIdentifier NestedType { get; }
    public abstract virtual IXmlToken get_Plus();
    public abstract virtual ITypeExpressionBase get_Qualifier();
    public abstract virtual IXamlIdentifier get_NestedType();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.MarkupExtensions.INumberValue {
    [NotNullAttribute]
public IXmlToken NumberToken { get; }
    public abstract virtual IXmlToken get_NumberToken();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.MarkupExtensions.IOfTypeSelectorExpression {
    [CanBeNullAttribute]
public ISelectorExpression Qualifier { get; }
    public IStyleTypeSelectorExpression TargetTypeExpression { get; }
    public abstract virtual ISelectorExpression get_Qualifier();
    public abstract virtual IStyleTypeSelectorExpression get_TargetTypeExpression();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.MarkupExtensions.IOrSelectorExpression {
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.MarkupExtensions.IPathValue {
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.MarkupExtensions.IPropertyEqualsSelectorExpression {
    [CanBeNullAttribute]
public ISelectorExpression Qualifier { get; }
    public IXamlToken LBracket { get; }
    [CanBeNullAttribute]
public IPropertyExpression Property { get; }
    [CanBeNullAttribute]
public IXamlToken Eq { get; }
    [CanBeNullAttribute]
public IXamlToken Value { get; }
    [CanBeNullAttribute]
public IXamlToken RBracket { get; }
    [NotNullAttribute]
public IType PropertyType { get; }
    public abstract virtual ISelectorExpression get_Qualifier();
    public abstract virtual IXamlToken get_LBracket();
    public abstract virtual IPropertyExpression get_Property();
    public abstract virtual IXamlToken get_Eq();
    public abstract virtual IXamlToken get_Value();
    public abstract virtual IXamlToken get_RBracket();
    public abstract virtual IType get_PropertyType();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.MarkupExtensions.IPropertyExpression {
    [CanBeNullAttribute]
public IQualifierExpression Qualifier { get; }
    [CanBeNullAttribute]
public IXmlToken Dot { get; }
    public abstract virtual IQualifierExpression get_Qualifier();
    public abstract virtual IXmlToken get_Dot();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.MarkupExtensions.IPseudoClassSelectorArgumentsExpression {
    public IXamlToken LParenth { get; }
    [CanBeNullAttribute]
public IXamlToken RParenth { get; }
    [CanBeNullAttribute]
public ISelectorExpression Argument { get; }
    public abstract virtual IXamlToken get_LParenth();
    public abstract virtual IXamlToken get_RParenth();
    public abstract virtual ISelectorExpression get_Argument();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.MarkupExtensions.IPseudoClassSelectorExpression {
    public IXamlToken Colon { get; }
    [CanBeNullAttribute]
public IXamlIdentifier Name { get; }
    [CanBeNullAttribute]
public ISelectorExpression Qualifier { get; }
    [CanBeNullAttribute]
public IPseudoClassSelectorArgumentsExpression Arguments { get; }
    public abstract virtual IXamlToken get_Colon();
    public abstract virtual IXamlIdentifier get_Name();
    public abstract virtual ISelectorExpression get_Qualifier();
    public abstract virtual IPseudoClassSelectorArgumentsExpression get_Arguments();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.MarkupExtensions.IQualifierExpression {
    [CanBeNullAttribute]
public IReference PropertyReference { get; }
    public abstract virtual IReference get_PropertyReference();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.MarkupExtensions.IQuotedValue {
    [NotNullAttribute]
public IXmlToken LQuote { get; }
    [CanBeNullAttribute]
public IXmlToken RQuote { get; }
    [CanBeNullAttribute]
public IMarkupAttributeValue Value { get; }
    public abstract virtual IXmlToken get_LQuote();
    public abstract virtual IXmlToken get_RQuote();
    public abstract virtual IMarkupAttributeValue get_Value();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.MarkupExtensions.IRelativeSourceExpression {
    public IXamlToken Name { get; }
    [CanBeNullAttribute]
public IRelativeSourceParametersExpression Parameters { get; }
    [CanBeNullAttribute]
public IType AncestorType { get; }
    public int AncestorLevel { get; }
    public Nullable`1<RelativeSourceMode> Mode { get; }
    public abstract virtual IXamlToken get_Name();
    public abstract virtual IRelativeSourceParametersExpression get_Parameters();
    public abstract virtual IType get_AncestorType();
    public abstract virtual int get_AncestorLevel();
    public abstract virtual Nullable`1<RelativeSourceMode> get_Mode();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.MarkupExtensions.IRelativeSourceParametersExpression {
    [CanBeNullAttribute]
public ITypeExpression ParentType { get; }
    [CanBeNullAttribute]
public IMarkupNumberConstant ParentIndex { get; }
    [ItemNotNullAttribute]
public TreeNodeCollection`1<ITypeExpression> ParentTypes { get; }
    [ItemNotNullAttribute]
public TreeNodeCollection`1<IMarkupNumberConstant> ParentIndices { get; }
    public abstract virtual ITypeExpression get_ParentType();
    public abstract virtual IMarkupNumberConstant get_ParentIndex();
    public abstract virtual TreeNodeCollection`1<ITypeExpression> get_ParentTypes();
    public abstract virtual TreeNodeCollection`1<IMarkupNumberConstant> get_ParentIndices();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.MarkupExtensions.IResourceMarkup {
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.MarkupExtensions.ISelectorExpression {
    [CanBeNullAttribute]
public IType TargetType { get; }
    public abstract virtual IType get_TargetType();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.MarkupExtensions.ISimplePropertyExpression {
    [CanBeNullAttribute]
public IXamlIdentifier Property { get; }
    public abstract virtual IXamlIdentifier get_Property();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.MarkupExtensions.ISourceTraversalValue {
    [CanBeNullAttribute]
public IQualifierExpression Qualifier { get; }
    [NotNullAttribute]
public IXmlToken Slash { get; }
    public abstract virtual IQualifierExpression get_Qualifier();
    public abstract virtual IXmlToken get_Slash();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.MarkupExtensions.IStaticExpression {
    [CanBeNullAttribute]
public ITypeExpressionBase Qualifier { get; }
    [CanBeNullAttribute]
public IXamlIdentifier MemberName { get; }
    public abstract virtual ITypeExpressionBase get_Qualifier();
    public abstract virtual IXamlIdentifier get_MemberName();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.MarkupExtensions.IStaticExpressionNode {
    [CanBeNullAttribute]
public IXmlToken Dot { get; }
    public abstract virtual IXmlToken get_Dot();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.MarkupExtensions.IStreamExpression {
    public IQualifierExpression Qualifier { get; }
    public abstract virtual IQualifierExpression get_Qualifier();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.MarkupExtensions.IStringValue {
    [NotNullAttribute]
public IXmlToken StringToken { get; }
    public TreeTextRange UnquotedRange { get; }
    public abstract virtual IXmlToken get_StringToken();
    public abstract virtual TreeTextRange get_UnquotedRange();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.MarkupExtensions.IStyleTypeSelectorExpression {
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.MarkupExtensions.ITemplateSelectorExpression {
    [CanBeNullAttribute]
public ISelectorExpression Qualifier { get; }
    public abstract virtual ISelectorExpression get_Qualifier();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.MarkupExtensions.ITextValue {
    [NotNullAttribute]
public IXmlToken TextToken { get; }
    public abstract virtual IXmlToken get_TextToken();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.MarkupExtensions.ITypeExpression {
    [CanBeNullAttribute]
public IXmlToken DotOrColon { get; }
    [CanBeNullAttribute]
public IQualifierExpression Qualifier { get; }
    [CanBeNullAttribute]
public IXamlIdentifier TypeName { get; }
    public abstract virtual IXmlToken get_DotOrColon();
    public abstract virtual IQualifierExpression get_Qualifier();
    public abstract virtual IXamlIdentifier get_TypeName();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.MarkupExtensions.ITypeExpressionBase {
    [CanBeNullAttribute]
public ITypeExpressionTypeArguments TypeArguments { get; }
    public TreeNodeCollection`1<ITypeExpressionRankSpecifier> RankSpecifiers { get; }
    [CanBeNullAttribute]
public IXmlToken TypeParametersCount { get; }
    public abstract virtual ITypeExpressionTypeArguments get_TypeArguments();
    public abstract virtual TreeNodeCollection`1<ITypeExpressionRankSpecifier> get_RankSpecifiers();
    public abstract virtual IXmlToken get_TypeParametersCount();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.MarkupExtensions.ITypeExpressionRankSpecifier {
    [NotNullAttribute]
public IXmlToken LBracket { get; }
    [CanBeNullAttribute]
public IXmlToken RBracket { get; }
    public abstract virtual IXmlToken get_LBracket();
    public abstract virtual IXmlToken get_RBracket();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.MarkupExtensions.ITypeExpressionTypeArguments {
    [CanBeNullAttribute]
public IXmlToken LParenth { get; }
    [CanBeNullAttribute]
public IXmlToken RParenth { get; }
    public TreeNodeCollection`1<IXmlToken> Commas { get; }
    [NotNullAttribute]
public IList`1<ITypeExpressionBase> TypeArguments { get; }
    public abstract virtual IXmlToken get_LParenth();
    public abstract virtual IXmlToken get_RParenth();
    public abstract virtual TreeNodeCollection`1<IXmlToken> get_Commas();
    public abstract virtual IList`1<ITypeExpressionBase> get_TypeArguments();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.MarkupExtensions.ITypeOrNamespaceExpression {
    [CanBeNullAttribute]
public IXmlToken DotOrColon { get; }
    [CanBeNullAttribute]
public IQualifierExpression Qualifier { get; }
    [CanBeNullAttribute]
public IXamlIdentifier TypeOrNamespace { get; }
    public abstract virtual IXmlToken get_DotOrColon();
    public abstract virtual IQualifierExpression get_Qualifier();
    public abstract virtual IXamlIdentifier get_TypeOrNamespace();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.MarkupExtensions.IXamlArgument {
    public IPathValue Value { get; }
    public abstract virtual IPathValue get_Value();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.MarkupExtensions.IXamlArgumentsOwner {
    public abstract virtual void RemoveArgument(IXamlArgument argument);
    public abstract virtual IXamlArgument AddArgumentBefore(IXamlArgument newArgument, IXamlArgument anchor);
    public abstract virtual IXamlArgument AddArgumentAfter(IXamlArgument newArgument, IXamlArgument anchor);
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.MarkupExtensions.IXBindMarkup {
    public IMarkupAttribute BindBackAttribute { get; }
    public IMarkupAttribute ModeAttribute { get; }
    public IMarkupAttribute PathAttribute { get; }
    public IMarkupAttribute UpdateSourceTriggerAttribute { get; }
    public IMarkupAttribute FallbackValue { get; }
    public BindingMode Mode { get; }
    public UpdateSourceTrigger UpdateSourceTrigger { get; }
    [CanBeNullAttribute]
public IPathValue Path { get; }
    [CanBeNullAttribute]
public IPathValue BindBack { get; }
    public abstract virtual IMarkupAttribute get_BindBackAttribute();
    public abstract virtual IMarkupAttribute get_ModeAttribute();
    public abstract virtual IMarkupAttribute get_PathAttribute();
    public abstract virtual IMarkupAttribute get_UpdateSourceTriggerAttribute();
    public abstract virtual IMarkupAttribute get_FallbackValue();
    public abstract virtual BindingMode get_Mode();
    public abstract virtual UpdateSourceTrigger get_UpdateSourceTrigger();
    public abstract virtual IPathValue get_Path();
    public abstract virtual IPathValue get_BindBack();
    public abstract virtual void SetBindingMode(BindingMode bindingMode);
    public abstract virtual void AddBindBack();
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.MarkupExtensions.IXPathValue {
}
public interface JetBrains.ReSharper.Psi.Xaml.Tree.MarkupExtensions.IXReferenceMarkup {
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Psi.Xaml.Tree.MarkupExtensions.MarkupAttributeExtensions : object {
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IMarkupAttributeValue GetUnquotedValue(IMarkupAttribute markupAttribute);
}
public static class JetBrains.ReSharper.Psi.Xaml.Tree.MarkupExtensions.MarkupAttributeListValueNavigator : object {
    [ContractAnnotationAttribute("null <= null")]
public static IAttributeListMarkupValue GetByAttribute(IMarkupAttribute attribute);
}
public static class JetBrains.ReSharper.Psi.Xaml.Tree.MarkupExtensions.MarkupAttributeNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null <= null")]
public static IMarkupAttribute GetByValue(IMarkupAttributeValue value);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null <= null")]
public static IMarkupAttribute GetByUnquotedValue(IMarkupAttributeValue value);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Psi.Xaml.Tree.MarkupExtensions.MarkupExtensions : object {
    [ExtensionAttribute]
public static TreeNodeCollection`1<IMarkupAttribute> GetAttributes(IMarkup markup);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IMarkupAttribute GetAttribute(IMarkup markup, Predicate`1<IMarkupAttribute> accept);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IMarkupAttribute GetAttribute(IMarkup markup, string attributeName);
}
public static class JetBrains.ReSharper.Psi.Xaml.Tree.MarkupExtensions.MarkupNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null <= null")]
public static IMarkup GetByValue(IMarkupValue value);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null <= null")]
public static IMarkup GetByAttribute(IMarkupAttribute attribute);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Psi.Xaml.Tree.MarkupExtensions.MethodInvocationExpressionExtensions : object {
    [ExtensionAttribute]
public static DocumentRange GetArgumentsRange(IMethodInvocationExpression expression);
    [ExtensionAttribute]
public static IType[] GetPossibleArgumentTypes(IMethodInvocationExpression methodInvocationExpression, IXamlArgument argument);
    private static IList`1<IMethod> GetMatchingMethods(IMethodInvocationExpression methodInvocationExpression);
}
[IsReadOnlyAttribute]
public class JetBrains.ReSharper.Psi.Xaml.Tree.ReferencedNamespace : ValueType {
    [CompilerGeneratedAttribute]
private INamespace <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
private IPsiModule <TargetModule>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsFromXmlNsDefinitionAttribute>k__BackingField;
    [NotNullAttribute]
public INamespace Namespace { get; }
    [CanBeNullAttribute]
public IPsiModule TargetModule { get; }
    public bool IsFromXmlNsDefinitionAttribute { get; }
    public ReferencedNamespace(INamespace nameSpace, IPsiModule targetModule, bool isFromXmlNsDefinitionAttribute);
    [CompilerGeneratedAttribute]
public INamespace get_Namespace();
    [CompilerGeneratedAttribute]
public IPsiModule get_TargetModule();
    [CompilerGeneratedAttribute]
public bool get_IsFromXmlNsDefinitionAttribute();
    public HybridCollection`1<IPsiModule> GetReferencedModules(ITreeNode context);
    [NotNullAttribute]
public static IList`1<IPsiModule> GetModulesTable(INamespace nameSpace, ITreeNode context);
    public ISymbolTable GetSymbolTable(IPsiModule module, ITreeNode context);
    public bool CanBeUsedToReferenceTypes(ITreeNode context);
    public sealed virtual bool Equals(ReferencedNamespace other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public enum JetBrains.ReSharper.Psi.Xaml.Tree.RelativeSourceMode : Enum {
    public int value__;
    public static RelativeSourceMode UNKNOWN;
    public static RelativeSourceMode DEFAULT;
    public static RelativeSourceMode FIND_ANCESTOR;
    public static RelativeSourceMode PREVIOUS_DATA;
    public static RelativeSourceMode SELF;
    public static RelativeSourceMode TEMPLATED_PARENT;
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Psi.Xaml.Tree.ResourceUsageEx : object {
    [ExtensionAttribute]
public static bool IsStaticOrThemeResource(IResourceUsage resourceUsage);
}
public enum JetBrains.ReSharper.Psi.Xaml.Tree.UpdateSourceTrigger : Enum {
    public int value__;
    public static UpdateSourceTrigger DEFAULT;
    public static UpdateSourceTrigger PROPERTY_CHANGED;
    public static UpdateSourceTrigger EXPLICIT;
    public static UpdateSourceTrigger LOST_FOCUS;
    public static UpdateSourceTrigger UNKNOWN;
}
public enum JetBrains.ReSharper.Psi.Xaml.Tree.ValueReferenceType : Enum {
    public int value__;
    public static ValueReferenceType NONE;
    public static ValueReferenceType EVENT;
    public static ValueReferenceType ENUM;
    public static ValueReferenceType BRUSH;
    public static ValueReferenceType COLOR;
    public static ValueReferenceType FONT_WEIGHT;
    public static ValueReferenceType FONT_STYLE;
    public static ValueReferenceType FONT_STRETCH;
    public static ValueReferenceType STARTUP_URI;
    public static ValueReferenceType GRID_LENGTH;
    public static ValueReferenceType BOOL;
    public static ValueReferenceType SILVERLIGHT_BRUSH;
    public static ValueReferenceType SILVERLIGHT_COLOR;
    public static ValueReferenceType SILVERLIGHT_FONT_STYLE;
    public static ValueReferenceType STORYBOARD_TARGET_NAME;
    public static ValueReferenceType STORYBOARD_TARGET_PROPERTY;
    public static ValueReferenceType REPEAT_BEHAVIOUR;
    public static ValueReferenceType XAMARIN_LAYOUT_OPTIONS;
    public static ValueReferenceType XAMARIN_FONT;
    public static ValueReferenceType XAMARIN_KEYBOARD_TYPE;
    public static ValueReferenceType ELEMENT_NAME;
    public static ValueReferenceType CURSOR;
    public static ValueReferenceType MAUI_LAYOUT_OPTIONS;
    public static ValueReferenceType AVALONIA_ON_PATTERN;
    public static ValueReferenceType DELEGATE;
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xaml.XamlLanguage", "16")]
public class JetBrains.ReSharper.Psi.Xaml.Tree.XamlElementTypes : XmlElementTypes {
    private static int BASE_INDEX;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <TYPE_DECL>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <FIELD_DECL>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <PROPERTY_DECL>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <TEMPLATE_FIELD_DECL>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <RESOURCE_DECL>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <STYLE_DECL>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <CONTROL_TEMPLATE_DECL>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <DATA_TEMPLATE_DECL>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <OBJECT_DATA_PROVIDER_DECL>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <XML_DATA_PROVIDER_DECL>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <PROPERTY_ELEMENT>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <DEPENDECY_PROPERTY_ELEMENT>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <EVENT_SETTER_ELEMENT>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <ELEMENT_NAME_ELEMENT>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <SOURCE_ELEMENT>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <NAMESPACE_ALIAS>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <PROPERTY_ATTRIBUTE>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <PI_ATTRIBUTE>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <NAME_IN_XPROPERTY_ATTRIBUTE>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <NAME_IN_CLASS_OR_RESOURCE_ATTRIBUTE>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <XNAME_IN_CLASS_OR_RESOURCE_ATTRIBUTE>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <PROPERTY_ATTRIBUTE_VALUE>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <DEPENDENCY_PROPERTY_ATTRIBUTE_VALUE>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <EVENT_SETTER_PROPERTY_ATTRIBUTE_VALUE>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <NAME_ATTRIBUTE>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <XNAME_ATTRIBUTE>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <XCLASS_ATTRIBUTE>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <XKEY_ATTRIBUTE>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <XUID_ATTRIBUTE>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <TYPE_ARGUMENTS_ATTRIBUTE>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <TYPE_ATTRIBUTE>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <XSUBCLASS_ATTRIBUTE>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <RESOURCE_KEY_ATTRIBUTE>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <ELEMENT_NAME_ATTRIBUTE>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <TARGET_NAME_ATTRIBUTE>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <SOURCE_ATTRIBUTE>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <RELATIVE_SOURCE_ATTRIBUTE>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <TYPE_NAME_ATTRIBUTE>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <OBJECT_TYPE_ATTRIBUTE>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <SHARED_ATTRIBUTE>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <RESOURCE_USAGE>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <XTYPE_ELEMENT>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <XREFERENCE_ELEMENT>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <RELATIVE_SOURCE_ELEMENT>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <IDENTIFIER_MARKUP_VALUE>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <XPATH_VALUE>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <MARKUP>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <RELATIVE_SOURCE_MARKUP>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <RESOURCE_MARKUP>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <XTYPE_MARKUP>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <BINDING_MARKUP>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <XREFERENCE_MARKUP>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <TEMPLATE_BINDING_MARKUP>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <TEMPLATE_BINDING_ELEMENT>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <MARKUP_ATTRIBUTE>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <MARKUP_SOURCE_ATTRIBUTE>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <MARKUP_RELATIVE_SOURCE_ATTRIBUTE>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <MARKUP_ANCESTOR_TYPE_ATTRIBUTE>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <MARKUP_ELEMENT_NAME_ATTRIBUTE>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <ATTRIBUTE_LIST_MARKUP_VALUE>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <PATH_PROPERTY_EXPRESSION>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <PATH_SOURCE_TRAVERSAL_VALUE>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <PATH_TYPE_EXPRESSION>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <TYPE_EXPRESSION_TYPE_ARGUMENTS>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <TYPE_EXPRESSION_RANK_SPECIFIER>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <ATTRIBUTE_INDEXER_VALUE>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <ATTRIBUTE_ATTACHED_PROPERTY_VALUE>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <ATTRIBUTE_INDEXER_PARAMETER_LIST>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <ATTRIBUTE_INDEXER_PARAMETER>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <ATTRIBUTE_INDEXER_CASTED_PARAMETER>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <BINDING_ELEMENT>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <XBIND_MARKUP>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <METHOD_INVOCATION_EXPRESSION>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <METHOD_ARGUMENTS_LIST>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <CAST_EXPRESSION>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <CASTED_PROPERTY_EXPRESSION>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <MARKUP_CONSTANT>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <MARKUP_STRING_VALUE>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <MARKUP_NUMBER_CONSTANT>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <ARGUMENT_EXPRESSION>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <NEGATION_EXPRESSION>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <STREAM_EXPRESSION>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <RELATIVE_SOURCE_EXPRESSION>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <RELATIVE_SOURCE_PARAMETERS>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <CONTROL_NAME_EXPRESSION>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <STATIC_MARKUP>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <STATIC_ELEMENT>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <STATIC_RESOURCE_DECL_ELEMENT>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <STATIC_MEMBER_ATTRIBUTE>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <STATIC_EXPRESSION>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <STATIC_NAMESPACE_ALIAS>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <STATIC_TYPE_OR_NAMESPACE>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <NESTED_TYPE>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <NULL_ELEMENT>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <CODE_ELEMENT>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <XKEY_ELEMENT>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <XDATA_ELEMENT>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <NULL_MARKUP>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <NUMBER_VALUE>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <QUOTED_VALUE>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <STRING_VALUE>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <ESCAPED_VALUE>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <TEXT_VALUE>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <ERROR_VALUE>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <XML_SPACE_ATTRIBUTE>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <XML_LANG_ATTRIBUTE>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <CLASS_MODIFIER_ATTRIBUTE>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <FIELD_MODIFIER_ATTRIBUTE>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <XAMARIN_FORMS_CLASS_ATTRIBUTE>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <XAMARIN_FORMS_CLASS_PROPERTY_ELEMENT>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <OF_TYPE_SELECTOR_EXPRESSION>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <CLASS_SELECTOR_EXPRESSION>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <PSEUDO_CLASS_SELECTOR_EXPRESSION>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <PSEUDO_CLASS_SELECTOR_ARGUMENTS_EXPRESSION>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <OR_SELECTOR_EXPRESSION>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <CONTROL_NAME_SELECTOR_EXPRESSION>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <PROPERTY_EQUALS_SELECTOR_EXPRESSION>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <DESCENDANT_SELECTOR_EXPRESSION>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <CHILD_SELECTOR_EXPRESSION>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <TEMPLATE_SELECTOR_EXPRESSION>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <STYLE_TYPE_SELECTOR_EXPRESSION>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <NESTED_SELECTOR_EXPRESSION>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <NAME_PROPERTY_ELEMENT>k__BackingField;
    public XmlCompositeNodeType TYPE_DECL { get; }
    public XmlCompositeNodeType FIELD_DECL { get; }
    public XmlCompositeNodeType PROPERTY_DECL { get; }
    public XmlCompositeNodeType TEMPLATE_FIELD_DECL { get; }
    public XmlCompositeNodeType RESOURCE_DECL { get; }
    public XmlCompositeNodeType STYLE_DECL { get; }
    public XmlCompositeNodeType CONTROL_TEMPLATE_DECL { get; }
    public XmlCompositeNodeType DATA_TEMPLATE_DECL { get; }
    public XmlCompositeNodeType OBJECT_DATA_PROVIDER_DECL { get; }
    public XmlCompositeNodeType XML_DATA_PROVIDER_DECL { get; }
    public XmlCompositeNodeType PROPERTY_ELEMENT { get; }
    public XmlCompositeNodeType DEPENDECY_PROPERTY_ELEMENT { get; }
    public XmlCompositeNodeType EVENT_SETTER_ELEMENT { get; }
    public XmlCompositeNodeType ELEMENT_NAME_ELEMENT { get; }
    public XmlCompositeNodeType SOURCE_ELEMENT { get; }
    public XmlCompositeNodeType NAMESPACE_ALIAS { get; }
    public XmlCompositeNodeType PROPERTY_ATTRIBUTE { get; }
    public XmlCompositeNodeType PI_ATTRIBUTE { get; }
    public XmlCompositeNodeType NAME_IN_XPROPERTY_ATTRIBUTE { get; }
    public XmlCompositeNodeType NAME_IN_CLASS_OR_RESOURCE_ATTRIBUTE { get; }
    public XmlCompositeNodeType XNAME_IN_CLASS_OR_RESOURCE_ATTRIBUTE { get; }
    public XmlCompositeNodeType PROPERTY_ATTRIBUTE_VALUE { get; }
    public XmlCompositeNodeType DEPENDENCY_PROPERTY_ATTRIBUTE_VALUE { get; }
    public XmlCompositeNodeType EVENT_SETTER_PROPERTY_ATTRIBUTE_VALUE { get; }
    public XmlCompositeNodeType NAME_ATTRIBUTE { get; }
    public XmlCompositeNodeType XNAME_ATTRIBUTE { get; }
    public XmlCompositeNodeType XCLASS_ATTRIBUTE { get; }
    public XmlCompositeNodeType XKEY_ATTRIBUTE { get; }
    public XmlCompositeNodeType XUID_ATTRIBUTE { get; }
    public XmlCompositeNodeType TYPE_ARGUMENTS_ATTRIBUTE { get; }
    public XmlCompositeNodeType TYPE_ATTRIBUTE { get; }
    public XmlCompositeNodeType XSUBCLASS_ATTRIBUTE { get; }
    public XmlCompositeNodeType RESOURCE_KEY_ATTRIBUTE { get; }
    public XmlCompositeNodeType ELEMENT_NAME_ATTRIBUTE { get; }
    public XmlCompositeNodeType TARGET_NAME_ATTRIBUTE { get; }
    public XmlCompositeNodeType SOURCE_ATTRIBUTE { get; }
    public XmlCompositeNodeType RELATIVE_SOURCE_ATTRIBUTE { get; }
    public XmlCompositeNodeType TYPE_NAME_ATTRIBUTE { get; }
    public XmlCompositeNodeType OBJECT_TYPE_ATTRIBUTE { get; }
    public XmlCompositeNodeType SHARED_ATTRIBUTE { get; }
    public XmlCompositeNodeType RESOURCE_USAGE { get; }
    public XmlCompositeNodeType XTYPE_ELEMENT { get; }
    public XmlCompositeNodeType XREFERENCE_ELEMENT { get; }
    public XmlCompositeNodeType RELATIVE_SOURCE_ELEMENT { get; }
    public XmlCompositeNodeType IDENTIFIER_MARKUP_VALUE { get; }
    public XmlCompositeNodeType XPATH_VALUE { get; }
    public XmlCompositeNodeType MARKUP { get; }
    public XmlCompositeNodeType RELATIVE_SOURCE_MARKUP { get; }
    public XmlCompositeNodeType RESOURCE_MARKUP { get; }
    public XmlCompositeNodeType XTYPE_MARKUP { get; }
    public XmlCompositeNodeType BINDING_MARKUP { get; }
    public XmlCompositeNodeType XREFERENCE_MARKUP { get; }
    public XmlCompositeNodeType TEMPLATE_BINDING_MARKUP { get; }
    public XmlCompositeNodeType TEMPLATE_BINDING_ELEMENT { get; }
    public XmlCompositeNodeType MARKUP_ATTRIBUTE { get; }
    public XmlCompositeNodeType MARKUP_SOURCE_ATTRIBUTE { get; }
    public XmlCompositeNodeType MARKUP_RELATIVE_SOURCE_ATTRIBUTE { get; }
    public XmlCompositeNodeType MARKUP_ANCESTOR_TYPE_ATTRIBUTE { get; }
    public XmlCompositeNodeType MARKUP_ELEMENT_NAME_ATTRIBUTE { get; }
    public XmlCompositeNodeType ATTRIBUTE_LIST_MARKUP_VALUE { get; }
    public XmlCompositeNodeType PATH_PROPERTY_EXPRESSION { get; }
    public XmlCompositeNodeType PATH_SOURCE_TRAVERSAL_VALUE { get; }
    public XmlCompositeNodeType PATH_TYPE_EXPRESSION { get; }
    public XmlCompositeNodeType TYPE_EXPRESSION_TYPE_ARGUMENTS { get; }
    public XmlCompositeNodeType TYPE_EXPRESSION_RANK_SPECIFIER { get; }
    public XmlCompositeNodeType ATTRIBUTE_INDEXER_VALUE { get; }
    public XmlCompositeNodeType ATTRIBUTE_ATTACHED_PROPERTY_VALUE { get; }
    public XmlCompositeNodeType ATTRIBUTE_INDEXER_PARAMETER_LIST { get; }
    public XmlCompositeNodeType ATTRIBUTE_INDEXER_PARAMETER { get; }
    public XmlCompositeNodeType ATTRIBUTE_INDEXER_CASTED_PARAMETER { get; }
    public XmlCompositeNodeType BINDING_ELEMENT { get; }
    public XmlCompositeNodeType XBIND_MARKUP { get; }
    public XmlCompositeNodeType METHOD_INVOCATION_EXPRESSION { get; }
    public XmlCompositeNodeType METHOD_ARGUMENTS_LIST { get; }
    public XmlCompositeNodeType CAST_EXPRESSION { get; }
    public XmlCompositeNodeType CASTED_PROPERTY_EXPRESSION { get; }
    public XmlCompositeNodeType MARKUP_CONSTANT { get; }
    public XmlCompositeNodeType MARKUP_STRING_VALUE { get; }
    public XmlCompositeNodeType MARKUP_NUMBER_CONSTANT { get; }
    public XmlCompositeNodeType ARGUMENT_EXPRESSION { get; }
    public XmlCompositeNodeType NEGATION_EXPRESSION { get; }
    public XmlCompositeNodeType STREAM_EXPRESSION { get; }
    public XmlCompositeNodeType RELATIVE_SOURCE_EXPRESSION { get; }
    public XmlCompositeNodeType RELATIVE_SOURCE_PARAMETERS { get; }
    public XmlCompositeNodeType CONTROL_NAME_EXPRESSION { get; }
    public XmlCompositeNodeType STATIC_MARKUP { get; }
    public XmlCompositeNodeType STATIC_ELEMENT { get; }
    public XmlCompositeNodeType STATIC_RESOURCE_DECL_ELEMENT { get; }
    public XmlCompositeNodeType STATIC_MEMBER_ATTRIBUTE { get; }
    public XmlCompositeNodeType STATIC_EXPRESSION { get; }
    public XmlCompositeNodeType STATIC_NAMESPACE_ALIAS { get; }
    public XmlCompositeNodeType STATIC_TYPE_OR_NAMESPACE { get; }
    public XmlCompositeNodeType NESTED_TYPE { get; }
    public XmlCompositeNodeType NULL_ELEMENT { get; }
    public XmlCompositeNodeType CODE_ELEMENT { get; }
    public XmlCompositeNodeType XKEY_ELEMENT { get; }
    public XmlCompositeNodeType XDATA_ELEMENT { get; }
    public XmlCompositeNodeType NULL_MARKUP { get; }
    public XmlCompositeNodeType NUMBER_VALUE { get; }
    public XmlCompositeNodeType QUOTED_VALUE { get; }
    public XmlCompositeNodeType STRING_VALUE { get; }
    public XmlCompositeNodeType ESCAPED_VALUE { get; }
    public XmlCompositeNodeType TEXT_VALUE { get; }
    public XmlCompositeNodeType ERROR_VALUE { get; }
    public XmlCompositeNodeType XML_SPACE_ATTRIBUTE { get; }
    public XmlCompositeNodeType XML_LANG_ATTRIBUTE { get; }
    public XmlCompositeNodeType CLASS_MODIFIER_ATTRIBUTE { get; }
    public XmlCompositeNodeType FIELD_MODIFIER_ATTRIBUTE { get; }
    public XmlCompositeNodeType XAMARIN_FORMS_CLASS_ATTRIBUTE { get; }
    public XmlCompositeNodeType XAMARIN_FORMS_CLASS_PROPERTY_ELEMENT { get; }
    public XmlCompositeNodeType OF_TYPE_SELECTOR_EXPRESSION { get; }
    public XmlCompositeNodeType CLASS_SELECTOR_EXPRESSION { get; }
    public XmlCompositeNodeType PSEUDO_CLASS_SELECTOR_EXPRESSION { get; }
    public XmlCompositeNodeType PSEUDO_CLASS_SELECTOR_ARGUMENTS_EXPRESSION { get; }
    public XmlCompositeNodeType OR_SELECTOR_EXPRESSION { get; }
    public XmlCompositeNodeType CONTROL_NAME_SELECTOR_EXPRESSION { get; }
    public XmlCompositeNodeType PROPERTY_EQUALS_SELECTOR_EXPRESSION { get; }
    public XmlCompositeNodeType DESCENDANT_SELECTOR_EXPRESSION { get; }
    public XmlCompositeNodeType CHILD_SELECTOR_EXPRESSION { get; }
    public XmlCompositeNodeType TEMPLATE_SELECTOR_EXPRESSION { get; }
    public XmlCompositeNodeType STYLE_TYPE_SELECTOR_EXPRESSION { get; }
    public XmlCompositeNodeType NESTED_SELECTOR_EXPRESSION { get; }
    public XmlCompositeNodeType NAME_PROPERTY_ELEMENT { get; }
    public XamlElementTypes(XmlTokenTypes xmlTokenTypes);
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_TYPE_DECL();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_FIELD_DECL();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_PROPERTY_DECL();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_TEMPLATE_FIELD_DECL();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_RESOURCE_DECL();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_STYLE_DECL();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_CONTROL_TEMPLATE_DECL();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_DATA_TEMPLATE_DECL();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_OBJECT_DATA_PROVIDER_DECL();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_XML_DATA_PROVIDER_DECL();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_PROPERTY_ELEMENT();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_DEPENDECY_PROPERTY_ELEMENT();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_EVENT_SETTER_ELEMENT();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_ELEMENT_NAME_ELEMENT();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_SOURCE_ELEMENT();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_NAMESPACE_ALIAS();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_PROPERTY_ATTRIBUTE();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_PI_ATTRIBUTE();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_NAME_IN_XPROPERTY_ATTRIBUTE();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_NAME_IN_CLASS_OR_RESOURCE_ATTRIBUTE();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_XNAME_IN_CLASS_OR_RESOURCE_ATTRIBUTE();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_PROPERTY_ATTRIBUTE_VALUE();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_DEPENDENCY_PROPERTY_ATTRIBUTE_VALUE();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_EVENT_SETTER_PROPERTY_ATTRIBUTE_VALUE();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_NAME_ATTRIBUTE();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_XNAME_ATTRIBUTE();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_XCLASS_ATTRIBUTE();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_XKEY_ATTRIBUTE();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_XUID_ATTRIBUTE();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_TYPE_ARGUMENTS_ATTRIBUTE();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_TYPE_ATTRIBUTE();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_XSUBCLASS_ATTRIBUTE();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_RESOURCE_KEY_ATTRIBUTE();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_ELEMENT_NAME_ATTRIBUTE();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_TARGET_NAME_ATTRIBUTE();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_SOURCE_ATTRIBUTE();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_RELATIVE_SOURCE_ATTRIBUTE();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_TYPE_NAME_ATTRIBUTE();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_OBJECT_TYPE_ATTRIBUTE();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_SHARED_ATTRIBUTE();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_RESOURCE_USAGE();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_XTYPE_ELEMENT();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_XREFERENCE_ELEMENT();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_RELATIVE_SOURCE_ELEMENT();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_IDENTIFIER_MARKUP_VALUE();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_XPATH_VALUE();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_MARKUP();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_RELATIVE_SOURCE_MARKUP();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_RESOURCE_MARKUP();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_XTYPE_MARKUP();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_BINDING_MARKUP();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_XREFERENCE_MARKUP();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_TEMPLATE_BINDING_MARKUP();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_TEMPLATE_BINDING_ELEMENT();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_MARKUP_ATTRIBUTE();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_MARKUP_SOURCE_ATTRIBUTE();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_MARKUP_RELATIVE_SOURCE_ATTRIBUTE();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_MARKUP_ANCESTOR_TYPE_ATTRIBUTE();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_MARKUP_ELEMENT_NAME_ATTRIBUTE();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_ATTRIBUTE_LIST_MARKUP_VALUE();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_PATH_PROPERTY_EXPRESSION();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_PATH_SOURCE_TRAVERSAL_VALUE();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_PATH_TYPE_EXPRESSION();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_TYPE_EXPRESSION_TYPE_ARGUMENTS();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_TYPE_EXPRESSION_RANK_SPECIFIER();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_ATTRIBUTE_INDEXER_VALUE();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_ATTRIBUTE_ATTACHED_PROPERTY_VALUE();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_ATTRIBUTE_INDEXER_PARAMETER_LIST();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_ATTRIBUTE_INDEXER_PARAMETER();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_ATTRIBUTE_INDEXER_CASTED_PARAMETER();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_BINDING_ELEMENT();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_XBIND_MARKUP();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_METHOD_INVOCATION_EXPRESSION();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_METHOD_ARGUMENTS_LIST();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_CAST_EXPRESSION();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_CASTED_PROPERTY_EXPRESSION();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_MARKUP_CONSTANT();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_MARKUP_STRING_VALUE();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_MARKUP_NUMBER_CONSTANT();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_ARGUMENT_EXPRESSION();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_NEGATION_EXPRESSION();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_STREAM_EXPRESSION();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_RELATIVE_SOURCE_EXPRESSION();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_RELATIVE_SOURCE_PARAMETERS();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_CONTROL_NAME_EXPRESSION();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_STATIC_MARKUP();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_STATIC_ELEMENT();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_STATIC_RESOURCE_DECL_ELEMENT();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_STATIC_MEMBER_ATTRIBUTE();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_STATIC_EXPRESSION();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_STATIC_NAMESPACE_ALIAS();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_STATIC_TYPE_OR_NAMESPACE();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_NESTED_TYPE();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_NULL_ELEMENT();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_CODE_ELEMENT();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_XKEY_ELEMENT();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_XDATA_ELEMENT();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_NULL_MARKUP();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_NUMBER_VALUE();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_QUOTED_VALUE();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_STRING_VALUE();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_ESCAPED_VALUE();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_TEXT_VALUE();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_ERROR_VALUE();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_XML_SPACE_ATTRIBUTE();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_XML_LANG_ATTRIBUTE();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_CLASS_MODIFIER_ATTRIBUTE();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_FIELD_MODIFIER_ATTRIBUTE();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_XAMARIN_FORMS_CLASS_ATTRIBUTE();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_XAMARIN_FORMS_CLASS_PROPERTY_ELEMENT();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_OF_TYPE_SELECTOR_EXPRESSION();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_CLASS_SELECTOR_EXPRESSION();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_PSEUDO_CLASS_SELECTOR_EXPRESSION();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_PSEUDO_CLASS_SELECTOR_ARGUMENTS_EXPRESSION();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_OR_SELECTOR_EXPRESSION();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_CONTROL_NAME_SELECTOR_EXPRESSION();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_PROPERTY_EQUALS_SELECTOR_EXPRESSION();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_DESCENDANT_SELECTOR_EXPRESSION();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_CHILD_SELECTOR_EXPRESSION();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_TEMPLATE_SELECTOR_EXPRESSION();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_STYLE_TYPE_SELECTOR_EXPRESSION();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_NESTED_SELECTOR_EXPRESSION();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_NAME_PROPERTY_ELEMENT();
}
public class JetBrains.ReSharper.Psi.Xaml.Tree.XamlSyntaxErrorType : XmlSyntaxErrorType {
    public static XmlSyntaxErrorType UNMATCHED_ATTACHED_PROPERTY;
    public static XmlSyntaxErrorType TYPE_EXPECTED;
    public static XmlSyntaxErrorType TYPE_OR_INDEX_EXPECTED;
    public static XmlSyntaxErrorType PARAMETER_VALUE_EXPECTED;
    public static XmlSyntaxErrorType PARAMETER_EXPECTED;
    public static XmlSyntaxErrorType VALUE_EXPECTED;
    public static XmlSyntaxErrorType PROPERTY_NAME_EXPECTED;
    public static XmlSyntaxErrorType QUALIFIER_EXPECTED;
    public static XmlSyntaxErrorType TYPE_NAME_EXPECTED;
    public static XmlSyntaxErrorType NAMESPACE_ALIAS_EXPECTED;
    public static XmlSyntaxErrorType STATIC_MEMBER_EXPECTED;
    public static XmlSyntaxErrorType ARGUMENT_EXPECTED;
    public static XmlSyntaxErrorType INDEX_EXPECTED;
    public static XmlSyntaxErrorType METHOD_INVOCATION_NOT_ALLOWED;
    public static XmlSyntaxErrorType EXPRESSION_EXPECTED;
    public static XmlSyntaxErrorType COMMA_EXPECTED;
    public static XmlSyntaxErrorType BRACKET_EXPECTED;
    public static XmlSyntaxErrorType BRACE_EXPECTED;
    public static XmlSyntaxErrorType PARENTH_EXPECTED;
    public static XmlSyntaxErrorType DOT_EXPECTED;
    public static XmlSyntaxErrorType SINGLE_QUOTE_EXPECTED;
    public static XmlSyntaxErrorType DOUBLE_QUOTE_EXPECTED;
    public static XmlSyntaxErrorType UNFINISHED_STRING;
    public static XmlSyntaxErrorType MISMATCHED_BRACE;
    public static XmlSyntaxErrorType TEXT_AFTER_MARKUP_NOT_ALLOWED;
    public static XmlSyntaxErrorType MARKUP_NAME_EXPECTED;
    public static XmlSyntaxErrorType SEMICOLON_EXPECTED;
    public static XmlSyntaxErrorType SELECTOR_EXPECTED;
    public static XmlSyntaxErrorType PROPERTY_EQ_EXPECTED;
    public static XmlSyntaxErrorType PROPERTY_VALUE_EXPECTED;
    public static XmlSyntaxErrorType SLASH_EXPECTED;
    private XamlSyntaxErrorType(string description);
    private static XamlSyntaxErrorType();
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Psi.Xaml.Tree.XamlTypeDeclarationExtensions : object {
    [ExtensionAttribute]
public static BuildAction GetBuildAction(IXamlTypeDeclaration context);
    [ExtensionAttribute]
public static bool IsLooksLikeApplicationDefinition(IXamlTypeDeclaration declaration);
    [ExtensionAttribute]
[PureAttribute]
public static bool IsApplicationDefinition(IXamlTypeDeclaration declaration);
    [PureAttribute]
[CanBeNullAttribute]
private static IProjectFile GetProjectFile(IXamlTypeDeclaration declaration);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xaml.XamlLanguage", "16")]
internal class JetBrains.ReSharper.Psi.Xaml.Util.XamlLanguageReferenceSelector : object {
    public sealed virtual IConstructor GetBaseConstructor(IConstructor constructor);
    public sealed virtual IDeclaredElement TryGetNavigatableCorrespondingElementForImplicitElement(IDeclaredElement declaredElement);
    public sealed virtual IEnumerable`1<DeclaredElementInstance> GetCandidates(IReference reference, IDataContext dataContext, ReferencePreferenceKind preferenceKind);
    public sealed virtual IEnumerable`1<DeclaredElementInstance> GetDeclaredElementsCandidates(DeclaredElementInstance instance, IDataContext dataContext, ReferencePreferenceKind preferenceKind);
    private static IEnumerable`1<DeclaredElementInstance> GetFromMarkup(IMarkup markup, ReferencePreferenceKind kind);
    private static IEnumerable`1<DeclaredElementInstance> GetFromObjectElement(IXamlObjectElement objectElement, ReferencePreferenceKind kind);
    private static IList`1<DeclaredElementInstance> CalculateCandidates(IReference reference);
    private static DeclaredElementInstance ProcessDeclaredElement(IDeclaredElement declaredElement, ISubstitution substitution);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Psi.Xaml.VB.Impl.Resolve.XamlVBFunctionResolver : object {
    public sealed virtual ResolveResultWithInfo ResolveMethod(IXamlFunctionReference functionReference, bool filterByName, ISymbolTable symbolTable, IAccessContext context);
    private bool ParamsExpanded(ISymbolInfo candidate, List`1<IVBArgumentInfo> argumentInfos);
    private static ResolveResultWithInfo CreateResolveResult(IList`1<ISymbolInfo> candidates, IResolveInfo resolveInfo);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Psi.Xaml.VB.Impl.Resolve.XamlVBMethodGroupConvertibleFilterFactory : object {
    public sealed virtual SimpleSymbolFilter CreateMethodGroupConvertibleFilter(ITreeNode xamlContext, DeclaredElementInstance`1<IDelegate> eventTypeInstance);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Psi.Xaml.VB.Impl.Resolve.XamlVBModifiersSupport : object {
    public string PublicString { get; }
    public string InternalString { get; }
    public string PrivateString { get; }
    public string ProtectedString { get; }
    public sealed virtual string get_PublicString();
    public sealed virtual string get_InternalString();
    public sealed virtual string get_PrivateString();
    public sealed virtual string get_ProtectedString();
    public sealed virtual IEqualityComparer`1<string> GetModifierComparer(ITreeNode context);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Psi.Xaml.VB.Impl.Resolve.XamlVBNullExpressionTypeProvider : object {
    public sealed virtual IExpressionType CreateNullExpressionType(IPsiModule psiModule);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.Psi.Xaml.VB.Impl.Resolve.XamlVBTypeConversionRuleProvider : object {
    public sealed virtual ITypeConversionRule GetTypeConversionRule(IPsiModule module, bool useStrict);
}
[ProjectFileTypeAttribute("JetBrains.ProjectModel.XamlProjectFileType", "16")]
public class JetBrains.ReSharper.Psi.Xaml.VB.Impl.XamlVBProjectFileCustomPsiPropertiesProvider : object {
    public sealed virtual T GetCustomProperties(IPsiSourceFile sourceFile);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Psi.Xaml.VB.Impl.XamlVBWithEventsFieldRecognizer : object {
    public sealed virtual bool IsWithEvents(IField field);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Psi.Xaml.VB.ZoneMarker : object {
}
[LanguageDefinitionAttribute("XAML")]
public class JetBrains.ReSharper.Psi.Xaml.XamlLanguage : XmlLanguage {
    public static string Name;
    [CompilerGeneratedAttribute]
private static XamlLanguage <Instance>k__BackingField;
    [CanBeNullAttribute]
[UsedImplicitlyAttribute]
public static XamlLanguage Instance { get; private set; }
    public PsiLanguageCategories SupportedCategories { get; }
    protected XamlLanguage(string name);
    protected XamlLanguage(string name, string presentableName);
    [CompilerGeneratedAttribute]
public static XamlLanguage get_Instance();
    [CompilerGeneratedAttribute]
private static void set_Instance(XamlLanguage value);
    public virtual PsiLanguageCategories get_SupportedCategories();
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Psi.Xaml.ZoneMarker : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
