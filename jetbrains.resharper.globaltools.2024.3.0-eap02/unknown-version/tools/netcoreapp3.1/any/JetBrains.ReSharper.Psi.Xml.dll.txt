[SolutionSettingsUpgraderAttribute("0")]
[GlobalSettingsUpgraderAttribute("0")]
public class JetBrains.ReSharper.Psi.Xml.CodeStyle.FormatSettingsUpgrade.XmlFormatSettingsUpgrade : CodeStyleSettingsUpgrade {
    public XmlFormatSettingsUpgrade(ShellPartCatalogSet partsSet, ISolution solution);
    protected virtual void DoUpgrade(CodeStyleSettingsObsolete codeStyleSettings, IContextBoundSettingsStore contextBoundSettingsStore);
}
[MigrateSettingsAttribute]
public class JetBrains.ReSharper.Psi.Xml.CodeStyle.FormatSettingsUpgrade.XmlMoveToCommonFormatterSettingsUpgrade : object {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Psi.Xml.CodeStyle.FormatSettingsUpgrade.XmlMoveToCommonFormatterSettingsUpgrade/<GetEntriesToMigrate>d__0")]
public sealed virtual IEnumerable`1<SettingsEntry> GetEntriesToMigrate(ISettingsSchema schema);
    public sealed virtual IEnumerable`1<SettingsKey> GetKeysToMigrate(ISettingsSchema schema);
    private void Migrate(IContextBoundSettingsStoreImplementation store);
    public sealed virtual void Migrate(IContextBoundSettingsStoreImplementation store);
}
public enum JetBrains.ReSharper.Psi.Xml.CodeStyle.XmlAttributeIndenting : Enum {
    public int value__;
    [LocalizedDescriptionAttribute("Single indent")]
[EditorConfigValueAliasAttribute("single_indent", "False")]
public static XmlAttributeIndenting OneStep;
    [LocalizedDescriptionAttribute("Double indent")]
[EditorConfigValueAliasAttribute("double_indent", "False")]
public static XmlAttributeIndenting TwoSteps;
    [LocalizedDescriptionAttribute("Align by first attribute")]
[EditorConfigValueAliasAttribute("align_by_first_attribute", "False")]
public static XmlAttributeIndenting ByFirstAttr;
}
public enum JetBrains.ReSharper.Psi.Xml.CodeStyle.XmlAttributesFormat : Enum {
    public int value__;
    [LocalizedDescriptionAttribute("On single line")]
[EditorConfigValueAliasAttribute("on_single_line", "False")]
public static XmlAttributesFormat OnSingleLine;
    [LocalizedDescriptionAttribute("First attribute on single line")]
[EditorConfigValueAliasAttribute("first_attribute_on_single_line", "False")]
public static XmlAttributesFormat FirstAttributeOnSingleLine;
    [LocalizedDescriptionAttribute("Each attribute on separate lines")]
[EditorConfigValueAliasAttribute("on_different_lines", "False")]
public static XmlAttributesFormat OnDifferentLines;
    [LocalizedDescriptionAttribute("Do not touch")]
[EditorConfigValueAliasAttribute("do_not_touch", "False")]
public static XmlAttributesFormat DoNotTouch;
}
[CodeStyleSettingsAttribute("XML")]
public class JetBrains.ReSharper.Psi.Xml.CodeStyle.XmlCodeStyleSettings : object {
    private static string ourFormatSettingsTag;
    private XmlFormatSettingsObsolete myFormatSettings;
    public XmlFormatSettingsObsolete FormatSettings { get; public set; }
    public XmlFormatSettingsObsolete get_FormatSettings();
    public void set_FormatSettings(XmlFormatSettingsObsolete value);
    public sealed virtual void ReadFromXml(XmlElement element);
    public sealed virtual XmlCodeStyleSettings Clone();
    private sealed virtual override object System.ICloneable.Clone();
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Psi.Xml.CodeStyle.XmlDocFormatterPredefinedSettings : HaveDefaultSettings`1<XmlDocFormatterSettingsKey> {
    public string Name { get; }
    public XmlDocFormatterPredefinedSettings(ILogger logger, ISettingsSchema settingsSchema);
    public virtual void InitDefaultSettings(ISettingsStorageMountPoint mountPoint);
    public virtual string get_Name();
}
public class JetBrains.ReSharper.Psi.Xml.CodeStyle.XmlDocFormatterSettingsAccessor : XmlFormatterSettingsAccessor`1<XmlDocFormatterSettingsKey> {
}
[SettingsKeyAttribute("JetBrains.ReSharper.Psi.CodeStyle.CodeFormattingSettingsKey", "JetBrains.ReSharper.Psi.Xml.Resources.Strings", "CodeFormattingInXMLDocumentationSettingDescription")]
[EditorConfigKeyAttribute("xmldoc")]
public class JetBrains.ReSharper.Psi.Xml.CodeStyle.XmlDocFormatterSettingsKey : XmlFormatterSettingsKey {
    [EditorConfigEntryAliasAttribute("space_after_triple_slash", "0")]
[SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Psi.Xml.Resources.Strings", "SpaceAfterSettingDescription")]
public bool SpaceAtStart;
}
public class JetBrains.ReSharper.Psi.Xml.CodeStyle.XmlFormatSettingsObsolete : object {
    private static int ourMaxBlankLines;
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public int MaxBlankLines;
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public bool TagSpacesAroundAttributeEq;
    private static bool ourDefaultTagAfterLastAttr;
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public bool TagSpaceAfterLastAttr;
    private static bool ourDefaultTagSpaceBeforeHeaderEnd1;
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public bool TagSpaceBeforeHeaderEnd1;
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public XmlAttributesFormat TagAttributesFormat;
    private static XmlAttributeIndenting ourDefaultTagAttributeIndenting;
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public XmlAttributeIndenting TagAttributeIndenting;
    private static int ourDefaultMaxSingleLineTagLength;
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public int MaxSingleLineTagLength;
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public bool ProcessingInstructionAroundAttributeEq;
    private static bool ourDefaultProcessingInstructionSpaceAfterLastAttr;
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public bool ProcessingInstructionSpaceAfterLastAttr;
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public XmlAttributesFormat ProcessingInstructionAttributesFormat;
    private static XmlAttributeIndenting ourDefaultProcessingInstructionAttributeIndenting;
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public XmlAttributeIndenting ProcessingInstructionAttributeIndenting;
    private static bool ourDefaultBlankLineAfterProcessingInstructions;
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public bool BlankLineAfterProcessingInstructions;
    private static bool ourDefaultWrapLongLines;
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public bool WrapLongLines;
    private static int ourDefaultWrapLimit;
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public int WrapLimit;
    private static bool ourDefaultWrapBeforeAttr;
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public bool WrapBeforeAttr;
    private static bool ourDefaultWrapInsideText;
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public bool WrapInsideText;
    public sealed virtual void ReadFromXml(XmlElement element);
    public sealed virtual XmlFormatSettingsObsolete Clone();
    private sealed virtual override object System.ICloneable.Clone();
}
public class JetBrains.ReSharper.Psi.Xml.CodeStyle.XmlFormatterSettingsAccessor : XmlFormatterSettingsAccessor`1<XmlFormatterSettingsKey> {
}
public class JetBrains.ReSharper.Psi.Xml.CodeStyle.XmlFormatterSettingsAccessor`1 : object {
    public static Expression`1<Func`2<TSettingsKey, int>> MaxBlankLines;
    public static Expression`1<Func`2<TSettingsKey, XmlAttributeIndenting>> TagAttributeIndenting;
    public static Expression`1<Func`2<TSettingsKey, bool>> TagSpaceBeforeHeaderEnd1;
    public static Expression`1<Func`2<TSettingsKey, bool>> WrapBeforeAttr;
    public static Expression`1<Func`2<TSettingsKey, int>> WrapLimit;
    public static Expression`1<Func`2<TSettingsKey, bool>> WrapInsideText;
    public static Expression`1<Func`2<TSettingsKey, bool>> WrapLongLines;
    public static Expression`1<Func`2<TSettingsKey, string>> NamesOfTagsAlwaysOnNewLine;
    private static XmlFormatterSettingsAccessor`1();
}
[SettingsKeyAttribute("JetBrains.ReSharper.Psi.CodeStyle.CodeFormattingSettingsKey", "JetBrains.ReSharper.Psi.Xml.Resources.Strings", "CodeFormattingInXMLSettingDescription")]
[EditorConfigKeyAttribute("xml")]
public class JetBrains.ReSharper.Psi.Xml.CodeStyle.XmlFormatterSettingsKey : FormatSettingsKeyBase {
    [ObsoleteAttribute]
[ExcludeFromEditorConfigAttribute]
[SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Psi.Xml.Resources.Strings", "WrapLongLinesSettingDescription")]
public bool WrapLongLines;
    [ObsoleteAttribute]
[ExcludeFromEditorConfigAttribute]
[SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Psi.Xml.Resources.Strings", "RightMarginColumnsSettingDescription")]
public int WrapLimit;
    [EditorConfigEntryAliasAttribute("wrap_tags_and_pi", "0")]
[SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Psi.Xml.Resources.Strings", "WrapTagsAndProcessingInstructionsSettingDescription")]
public bool WrapBeforeAttr;
    [EditorConfigEntryAliasAttribute("spaces_around_eq_in_pi_attribute", "0")]
[SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Psi.Xml.Resources.Strings", "SpacesAroundInAttributeSettingDescription")]
public bool ProcessingInstructionAroundAttributeEq;
    [EditorConfigEntryAliasAttribute("space_after_last_pi_attribute", "0")]
[SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Psi.Xml.Resources.Strings", "SpaceAfterLastAttributeSettingDescription")]
public bool ProcessingInstructionSpaceAfterLastAttr;
    [EditorConfigEntryAliasAttribute("pi_attribute_style", "0")]
[SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Psi.Xml.Resources.Strings", "AttributesFormatSettingDescription")]
public XmlAttributesFormat ProcessingInstructionAttributesFormat;
    [EditorConfigEntryAliasAttribute("pi_attributes_indent", "0")]
[SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Psi.Xml.Resources.Strings", "AttributesIndentingSettingDescription")]
public XmlAttributeIndenting ProcessingInstructionAttributeIndenting;
    [EditorConfigEntryAliasAttribute("blank_line_after_pi", "0")]
[SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Psi.Xml.Resources.Strings", "BlankLineAfterProcessingInstructionsSettingDescription")]
public bool BlankLineAfterProcessingInstructions;
    [EditorConfigEntryAliasAttribute("spaces_around_eq_in_attribute", "0")]
[SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Psi.Xml.Resources.Strings", "SpacesAroundInAttributeSettingDescription")]
public bool TagSpacesAroundAttributeEq;
    [EditorConfigEntryAliasAttribute("space_after_last_attribute", "0")]
[SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Psi.Xml.Resources.Strings", "SpaceAfterLastAttributeSettingDescription")]
public bool TagSpaceAfterLastAttr;
    [EditorConfigEntryAliasAttribute("space_before_self_closing", "0")]
[SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Psi.Xml.Resources.Strings", "SpaceBeforeSettingDescription")]
public bool TagSpaceBeforeHeaderEnd1;
    [EditorConfigEntryAliasAttribute("attribute_style", "0")]
[SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Psi.Xml.Resources.Strings", "AttributesFormatSettingDescription")]
public XmlAttributesFormat TagAttributesFormat;
    [EditorConfigEntryAliasAttribute("attribute_indent", "0")]
[SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Psi.Xml.Resources.Strings", "AttributesIndentingSettingDescription")]
public XmlAttributeIndenting TagAttributeIndenting;
    [EditorConfigEntryAliasAttribute("keep_user_linebreaks", "0")]
[SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Psi.Xml.Resources.Strings", "KeepExistingLineBreaksSettingDescription")]
public bool KeepUserLineBreaks;
    [EditorConfigEntryAliasAttribute("linebreaks_inside_tags_for_multiline_elements", "0")]
[SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Psi.Xml.Resources.Strings", "LineBreaksAfterStartTagAndBeforeEndTagInMultilineElementsSettingDescription")]
public bool LinebreaksInsideMultilineTag;
    [EditorConfigEntryAliasAttribute("linebreaks_inside_tags_for_elements_with_child_elements", "0")]
[SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Psi.Xml.Resources.Strings", "LineBreaksAfterStartTagAndBeforeEndTagInElementsThatContainOtherElementsAndNoTextSettingDescription")]
public bool LinebreaksInsideTagsWithTags;
    [EditorConfigEntryAliasAttribute("linebreaks_inside_tags_for_elements_longer_than", "0")]
[SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Psi.Xml.Resources.Strings", "LineBreaksAfterStartTagAndBeforeEndTagWhenElementIsLongerThanSettingDescription")]
public int MaxSingleLineTagLength;
    [EditorConfigEntryAliasAttribute("spaces_inside_tags", "0")]
[SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Psi.Xml.Resources.Strings", "SpacesAfterStartTagAndBeforeEndTagOtherwiseSettingDescription")]
public bool SpacesInsideSinglelineTag;
    [EditorConfigEntryAliasAttribute("wrap_text", "0")]
[SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Psi.Xml.Resources.Strings", "WrapInsideTextSettingDescription")]
public bool WrapInsideText;
    [EditorConfigEntryAliasAttribute("wrap_around_elements", "0")]
[SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Psi.Xml.Resources.Strings", "WrapBeforeAndAfterElementsSettingDescription")]
public bool WrapOutsideOfElements;
    [EditorConfigEntryAliasAttribute("indent_child_elements", "0")]
[SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Psi.Xml.Resources.Strings", "IndentInsideElementThatDoesntContainTextSettingDescription")]
public XmlIndentingStyle IndentSubtags;
    [EditorConfigEntryAliasAttribute("indent_text", "0")]
[SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Psi.Xml.Resources.Strings", "IndentInsideElementThatContainTextSettingDescription")]
public XmlIndentingStyle IndentTagContent;
    [EditorConfigEntryAliasAttribute("max_blank_lines_between_tags", "0")]
[SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Psi.Xml.Resources.Strings", "MaximumBlankLinesBetweenTagsSettingDescription")]
public int MaxBlankLines;
    [EditorConfigEntryAliasAttribute("linebreak_before_multiline_elements", "0")]
[SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Psi.Xml.Resources.Strings", "PlaceMultilineElementsOnNewLineSettingDescription")]
public bool TagAlwaysOnNewLine;
    [EditorConfigEntryAliasAttribute("linebreak_before_singleline_elements", "0")]
[SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Psi.Xml.Resources.Strings", "PlaceSinglelineElementsOnNewLineSettingDescription")]
public bool SimpleTagAlwaysOnNewLine;
    [EditorConfigEntryAliasAttribute("linebreak_before_elements", "0")]
[SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Psi.Xml.Resources.Strings", "PlaceTheseElementsOnNewLineRegardlessSettingDescription")]
public string NamesOfTagsAlwaysOnNewLine;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.Psi.Xml.Resources.Strings", "IgnoreSpacePreservationSettingDescription")]
public bool IgnoreSpacePreservation;
}
public enum JetBrains.ReSharper.Psi.Xml.CodeStyle.XmlIndentingStyle : Enum {
    public int value__;
    [LocalizedDescriptionAttribute("Do not change indenting")]
[EditorConfigValueAliasAttribute("DoNotTouch", "True")]
public static XmlIndentingStyle DoNotTouch;
    [LocalizedDescriptionAttribute("One indent from parent element")]
[EditorConfigValueAliasAttribute("OneIndent", "True")]
public static XmlIndentingStyle OneIndent;
    [LocalizedDescriptionAttribute("No indent from parent element")]
[EditorConfigValueAliasAttribute("ZeroIndent", "True")]
public static XmlIndentingStyle ZeroIndent;
    [LocalizedDescriptionAttribute("No indent at all")]
[EditorConfigValueAliasAttribute("RemoveIndent", "True")]
public static XmlIndentingStyle RemoveIndent;
}
[LanguageDefinitionAttribute("DTD")]
public class JetBrains.ReSharper.Psi.Xml.DtdLanguage : XmlLanguage {
    public static string Name;
    [CompilerGeneratedAttribute]
private static DtdLanguage <Instance>k__BackingField;
    [CanBeNullAttribute]
[UsedImplicitlyAttribute]
public static DtdLanguage Instance { get; private set; }
    public PsiLanguageCategories SupportedCategories { get; }
    protected DtdLanguage(string name);
    protected DtdLanguage(string name, string presentableName);
    [CompilerGeneratedAttribute]
public static DtdLanguage get_Instance();
    [CompilerGeneratedAttribute]
private static void set_Instance(DtdLanguage value);
    public virtual PsiLanguageCategories get_SupportedCategories();
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Psi.Xml.Extensions.XmlAttributeExtension : object {
    public static string GetUnquotedText(IXmlAttribute attribute, TreeTextRange& range);
    [ExtensionAttribute]
public static DocumentRange GetUnquotedValueRange(IXmlAttribute attribute);
    [ExtensionAttribute]
[PureAttribute]
public static bool IsXmlnsDefault(IXmlAttribute xmlAttribute);
    [ExtensionAttribute]
[PureAttribute]
public static bool IsXmlnsAlias(IXmlAttribute xmlAttribute);
}
internal class JetBrains.ReSharper.Psi.Xml.Impl.CodeStyle.Formatting.XmlFormattingStage`1 : object {
    private FormattingVisitor<TSettingsKey> myFormattingVisitor;
    private XmlFormattingStage`1(FmtSettingsClassic`1<TSettingsKey> settings, XmlCodeFormattingContext context);
    public static void DoFormat(XmlTokenTypes xmlTokenTypes, XmlCodeFormattingContext context, IProgressIndicator progress, FmtSettingsClassic`1<TSettingsKey> settings);
    private IEnumerable`1<string> CalcSpaces(FormattingStageContext ctx);
}
[PsiSharedComponentAttribute("16")]
public class JetBrains.ReSharper.Psi.Xml.Impl.CodeStyle.Indenting.XmlIndentingInfoProvider : XmlIndentingInfoProviderBase`1<XmlFormatterSettingsKey> {
    public XmlIndentingInfoProvider(IThreading threading, Lifetime lifetime, ISettingsSchema settingsSchema, ICalculatedSettingsSchema calculatedSettingsSchema);
}
public class JetBrains.ReSharper.Psi.Xml.Impl.CodeStyle.Indenting.XmlIndentingInfoProviderBase`1 : FormatterInfoProviderWithMethodApi`2<XmlCodeFormattingContext, TSettingsKey> {
    public ProjectFileType MainProjectFileType { get; }
    public XmlIndentingInfoProviderBase`1(IThreading threading, Lifetime lifetime, ISettingsSchema settingsSchema, ICalculatedSettingsSchema calculatedSettingsSchema);
    protected virtual void Initialize();
    public virtual ProjectFileType get_MainProjectFileType();
    public virtual void ModifyIndent(ITreeNode nodeToIndent, Nullable`1& indent, XmlCodeFormattingContext context, IIndentingStage`1<TSettingsKey> callback, IndentType indentType);
    public virtual bool CanCollapseUnusedRegions();
}
public interface JetBrains.ReSharper.Psi.Xml.Impl.CodeStyle.IXmlCodeFormatter {
    public abstract virtual bool HasSpacePreservation(IXmlTag tag);
}
internal class JetBrains.ReSharper.Psi.Xml.Impl.CodeStyle.Wrapping.XmlWrappingStage`1 : object {
    private XmlTokenTypes myXmlTokenTypes;
    private XmlCodeFormattingContext myContext;
    private WrappingVisitor<TSettingsKey> myWrappingVisitor;
    private XmlWrappingStage`1(XmlTokenTypes xmlTokenTypes, FmtSettingsClassic`1<TSettingsKey> formatSettings, XmlCodeFormattingContext context);
    public static bool DoWrap(XmlTokenTypes xmlTokenTypes, XmlCodeFormattingContext context, FmtSettingsClassic`1<TSettingsKey> formatSettings, FmtSettingsHolder`1<TSettingsKey> formatSettingsDecl, IProgressIndicator progress);
    private bool ShouldWrap(FormattingStageContext context);
    private void BreakLines(ITreeNode first, ITreeNode last, LineEnding lineEnding);
}
public enum JetBrains.ReSharper.Psi.Xml.Impl.CodeStyle.WrapType : Enum {
    public int value__;
    public static WrapType Default;
    public static WrapType Wrap;
    public static WrapType NoWrap;
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xml.XmlLanguage", "16")]
public class JetBrains.ReSharper.Psi.Xml.Impl.CodeStyle.XmlCodeFormatter : XmlCodeFormatterBase`1<XmlFormatterSettingsKey> {
    public XmlCodeFormatter(XmlLanguage language, XmlTokenTypes xmlTokenTypes, XmlIndentingInfoProvider indentingInfoProvider, CodeFormatterRequirements requirements);
}
public abstract class JetBrains.ReSharper.Psi.Xml.Impl.CodeStyle.XmlCodeFormatterBase`1 : CodeFormatterBase`1<TSettingsKey> {
    private XmlTokenTypes myXmlTokenTypes;
    private XmlIndentingInfoProviderBase`1<TSettingsKey> myIndentingInfoProvider;
    public XmlIndentingInfoProviderBase`1<TSettingsKey> IndentingInfoProvider { get; }
    public bool SupportsWrapping { get; }
    public IFormatterInfoProvider FormatterInfoProvider { get; }
    public string OverridenSettingPrefix { get; }
    public string OverridenSettingSuffix { get; }
    public XmlCodeFormatterBase`1(XmlLanguage language, XmlTokenTypes xmlTokenTypes, XmlIndentingInfoProviderBase`1<TSettingsKey> indentingInfoProvider, CodeFormatterRequirements requirements);
    public XmlIndentingInfoProviderBase`1<TSettingsKey> get_IndentingInfoProvider();
    public virtual bool get_SupportsWrapping();
    public virtual bool IsWhitespaceToken(ITokenNode token);
    public virtual bool IsNewLine(ITreeNode ws);
    public virtual ITreeNode CreateSpace(string text, NodeType replacedOrLeftSiblingType);
    public virtual ITreeNode CreateSpace();
    public virtual ITreeNode CreateNewLine(LineEnding lineEnding, NodeType lineBreakType);
    public virtual IFormatterInfoProvider get_FormatterInfoProvider();
    public virtual IFormatterInfoProvider GetFormatterInfoProvider(IPsiSourceFile sourceFile, AdditionalFormatterParameters parameters);
    protected virtual bool IsFormatNextSpaces(CodeFormatProfile profile);
    private static IXmlAttribute FindSpaceAttribute(IXmlTag tag);
    public virtual bool HasSpacePreservation(IXmlTag tag);
    public virtual ITreeRange Format(ITreeNode firstElement, ITreeNode lastElement, CodeFormatProfile profile, AdditionalFormatterParameters parameters);
    public virtual string get_OverridenSettingPrefix();
    public virtual string get_OverridenSettingSuffix();
    protected virtual CodeFormattingContext CreateFormatterContext(AdditionalFormatterParameters parameters, ICustomFormatterInfoProvider provider, int tabWidth, SingleLangChangeAccu changeAccu, FormatTask[] formatTasks);
    private void DoIndent(XmlCodeFormattingContext context, FmtSettingsHolder`1<TSettingsKey> formatSettings, IProgressIndicator indentProgress);
    private void DoFormat(XmlCodeFormattingContext context, IProgressIndicator fmtProgress, FmtSettingsClassic`1<TSettingsKey> formatSettings);
    public virtual void FormatInsertedNodes(ITreeNode nodeFirst, ITreeNode nodeLast, bool formatSurround, bool indentSurround);
    public virtual ITreeRange FormatInsertedRange(ITreeNode nodeFirst, ITreeNode nodeLast, ITreeRange origin);
    public virtual void FormatReplacedNode(ITreeNode oldNode, ITreeNode newNode);
    public virtual void FormatReplacedRange(ITreeNode first, ITreeNode last, ITreeRange oldNodes);
    public virtual void FormatDeletedNodes(ITreeNode parent, ITreeNode prevNode, ITreeNode nextNode);
    public virtual MinimalSeparatorType GetMinimalSeparatorByNodeTypes(TokenNodeType tokenType1, TokenNodeType tokenType2);
}
public class JetBrains.ReSharper.Psi.Xml.Impl.CodeStyle.XmlCodeFormattingContext : CodeFormattingContext {
    private JetHashSet`1<string> myNamesOfTagsAlwaysOnNewLine;
    public XmlCodeFormattingContext(IXmlCodeFormatter codeFormatter, IFormatterDebugInfoLogger debugInfoLogger, AdditionalFormatterParameters parameters, int tabWidth, SingleLangChangeAccu changeAccu, FormatTask[] formatTasks);
    public JetHashSet`1<string> NamesOfTagsAlwaysOnNewLine(FmtSettingsClassic`1<TSettingsKey> settingsClassic);
    public bool HasSpacePreservation(IXmlTag tag);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xml.XmlDocComments.XmlDocLanguage", "16")]
public class JetBrains.ReSharper.Psi.Xml.Impl.CodeStyle.XmlDocFormatter : XmlCodeFormatterBase`1<XmlDocFormatterSettingsKey> {
    public XmlDocFormatter(XmlLanguage xmlLanguage, XmlTokenTypes xmlTokenTypes, XmlDocIndentingInfoProvider indentingInfoProvider, CodeFormatterRequirements requirements);
    public virtual bool HasSpacePreservation(IXmlTag tag);
    public virtual void InsertLineFeedAtFileEndIfNeeded(IFile fileNode, IContextBoundSettingsStore overrideSettingsStore);
    protected virtual void AdjustExternalSettings(FormatSettingsKeyBase result);
}
public static class JetBrains.ReSharper.Psi.Xml.Impl.CodeStyle.XmlDocFormatterImplHelper : object {
    public static void FormatDocComment(IDocCommentBlockWithPsi`2<TXmlPsi, TCommentNode> node);
    public static IList`1<IDocCommentBlock> GetSelectedDocComments(ITreeNode file, IRangeMarker range);
}
[PsiSharedComponentAttribute("16")]
public class JetBrains.ReSharper.Psi.Xml.Impl.CodeStyle.XmlDocIndentingInfoProvider : XmlIndentingInfoProviderBase`1<XmlDocFormatterSettingsKey> {
    public XmlDocIndentingInfoProvider(IThreading threading, Lifetime lifetime, ISettingsSchema settingsSchema, ICalculatedSettingsSchema calculatedSettingsSchema);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Psi.Xml.Impl.CodeStyle.XmlFormatterImplHelper : object {
    public static bool IsWhitespaceToken(ITokenNode token);
    public static bool IsWhitespaceToken(ITreeNode node);
    [ExtensionAttribute]
public static bool IsNewLine(IXmlFloatingTextTokenNode node);
    [ExtensionAttribute]
public static IEnumerable`1<IXmlFloatingTextTokenNode> LeftWhitespaces(ITreeNode node);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Psi.Xml.Impl.CodeStyle.XmlFormatterImplHelper/<SelfAndLeftWhitespaces>d__4")]
[ExtensionAttribute]
public static IEnumerable`1<IXmlFloatingTextTokenNode> SelfAndLeftWhitespaces(ITreeNode node);
    [ExtensionAttribute]
public static IEnumerable`1<IXmlFloatingTextTokenNode> RightWhitespaces(ITreeNode node);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Psi.Xml.Impl.CodeStyle.XmlFormatterImplHelper/<SelfAndRightWhitespaces>d__6")]
[ExtensionAttribute]
public static IEnumerable`1<IXmlFloatingTextTokenNode> SelfAndRightWhitespaces(ITreeNode node);
    [ExtensionAttribute]
public static IEnumerable`1<IXmlFloatingTextTokenNode> GetWhitespacesTo(ITreeNode fromNode, ITreeNode toNode);
    [ExtensionAttribute]
public static IEnumerable`1<IXmlFloatingTextTokenNode> GetLineFeedsTo(ITreeNode fromNode, ITreeNode toNode);
    [ExtensionAttribute]
public static bool HasLineFeedsTo(ITreeNode fromNode, ITreeNode toNode);
    private static IXmlAttribute FindSpaceAttribute(IXmlTag tag);
    [ExtensionAttribute]
public static bool HasSpacePreservation(IXmlTag tag);
    [ExtensionAttribute]
public static bool HasNonWhitespaceText(ITreeNode node);
    [ExtensionAttribute]
public static bool ContainsText(IXmlTag tag);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xml.DtdLanguage", "16")]
internal class JetBrains.ReSharper.Psi.Xml.Impl.DtdLanguageService : XmlLanguageService {
    public ITypePresenter TypePresenter { get; }
    public DtdLanguageService(DtdLanguage languageType, IConstantValueService constantValueService, XmlTokenTypes tokenTypes, IXmlElementFactory elementFactory, XmlCodeFormatter codeFormatter, CommonIdentifierIntern commonIdentifierIntern);
    public virtual ITypePresenter get_TypePresenter();
    public virtual bool IsTypeMemberVisible(ITypeMember member);
    public virtual ILexerFactory GetPrimaryLexerFactory();
    public virtual IParser CreateParser(ILexer lexer, IPsiModule module, IPsiSourceFile sourceFile);
}
public class JetBrains.ReSharper.Psi.Xml.Impl.DtdLexerFactory : XmlLexerFactory {
    private XmlTokenTypes myXmlTokenTypes;
    public DtdLexerFactory(XmlTokenTypes xmlTokenTypes);
    protected virtual XmlLexerGenerated CreateLexer(IBuffer buffer);
}
[ProjectFileTypeAttribute("JetBrains.ProjectModel.DtdProjectFileType", "16")]
public class JetBrains.ReSharper.Psi.Xml.Impl.DtdProjectFileLanguageService : XmlProjectFileLanguageService {
    public IconId Icon { get; }
    public DtdProjectFileLanguageService(DtdProjectFileType dtdProjectFileType);
    public virtual IconId get_Icon();
    public virtual PsiLanguageType GetPsiLanguageType(ProjectFileType languageType);
    public virtual ILexerFactory GetMixedLexerFactory(ISolution solution, IBuffer buffer, IPsiSourceFile sourceFile);
}
public class JetBrains.ReSharper.Psi.Xml.Impl.Parsing.XmlElementFactoryForCreateAttribute : DelegatingXmlElementFactory {
    [NotNullAttribute]
private IXmlTagContainer myTagContainer;
    public XmlElementFactoryForCreateAttribute(IXmlElementFactory factory, IXmlTag tag);
    public virtual IXmlAttribute CreateAttribute(IXmlIdentifier nameIdentifier, IXmlAttributeContainer attributeContainer, IXmlTagContainer parentTag, IXmlElementFactoryContext context);
}
public class JetBrains.ReSharper.Psi.Xml.Impl.Parsing.XmlElementFactoryForCreateTag : DelegatingXmlElementFactory {
    [NotNullAttribute]
private IXmlTag myTag;
    public XmlElementFactoryForCreateTag(IXmlElementFactory factory, IXmlTag tag);
    public virtual IXmlTag CreateTag(IXmlTagHeader header, IXmlTag parentTag, IXmlElementFactoryContext context);
    public virtual IXmlAttribute CreateAttribute(IXmlIdentifier nameIdentifier, IXmlAttributeContainer attributeContainer, IXmlTagContainer parentTag, IXmlElementFactoryContext context);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xml.XmlLanguage", "16")]
public class JetBrains.ReSharper.Psi.Xml.Impl.Parsing.XmlTokenBuilder : object {
    public XmlTokenBuilder(PsiLanguageType xmlLanguage);
    public virtual LeafElementBase CreateToken(XmlTokenNodeType tokenType, IBuffer buffer, TreeOffset startOffset, TreeOffset endOffset);
}
[ObsoleteAttribute("Use SimpleSymbolFilter instead")]
public class JetBrains.ReSharper.Psi.Xml.Impl.Resolve.DelegateFilter : SimpleSymbolFilterWithErrorType {
    private Func`3<IDeclaredElement, ISubstitution, bool> myAcceptsDelegate;
    public DelegateFilter(ResolveErrorType errorType, Func`3<IDeclaredElement, ISubstitution, bool> acceptsDelegate);
    public virtual bool Accepts(IDeclaredElement declaredElement, ISubstitution substitution);
}
public class JetBrains.ReSharper.Psi.Xml.Impl.Resolve.XmlResolveErrorType : ResolveErrorTypeWithTooltip {
    public static XmlResolveErrorType NAMESPACE_EXPECTED;
    public static XmlResolveErrorType TYPE_EXPECTED;
    public static XmlResolveErrorType MULTIPLE_CANDIDATES;
    protected XmlResolveErrorType(string name, string tooltip);
    private static XmlResolveErrorType();
}
public static class JetBrains.ReSharper.Psi.Xml.Impl.Resolve.XmlResolveFilters : object {
    public static SimpleSymbolFilter IsNamespace;
    public static SimpleSymbolFilter IsType;
    public static SimpleSymbolFilter IsNotRootNamespace;
    private static XmlResolveFilters();
}
public class JetBrains.ReSharper.Psi.Xml.Impl.Tree.AnyContent : XmlCompositeElement {
    public AnyContent(XmlCompositeNodeType type);
}
public class JetBrains.ReSharper.Psi.Xml.Impl.Tree.DTD.DoctTypeDeclaration : XmlCompositeElement {
    private static short INT_SUBSET_ROLE;
    private static short EXTERNAL_ID_ROLE;
    private static short START_ROLE;
    private static short END_ROLE;
    public IXmlDtdStartTokenNode Start { get; }
    public IXmlTagEndTokenNode End { get; }
    public IExternalId ExternalId { get; }
    public IDTDBody IntSubset { get; }
    public DoctTypeDeclaration(XmlCompositeNodeType type);
    public virtual short GetChildRole(TreeElement child);
    public sealed virtual IXmlDtdStartTokenNode get_Start();
    public sealed virtual IXmlTagEndTokenNode get_End();
    public sealed virtual IExternalId get_ExternalId();
    public sealed virtual IDTDBody get_IntSubset();
}
public class JetBrains.ReSharper.Psi.Xml.Impl.Tree.DTD.DTDAttDef : XmlCompositeElement {
    public static String[] TYPE_NAMES;
    private static short NAME_ROLE;
    private static short TYPE_ROLE;
    public string Name { get; }
    public IAttType AttributeType { get; }
    public DTDAttDef(XmlCompositeNodeType type);
    private static DTDAttDef();
    public virtual short GetChildRole(TreeElement child);
    public sealed virtual string get_Name();
    public sealed virtual IAttType get_AttributeType();
}
public class JetBrains.ReSharper.Psi.Xml.Impl.Tree.DTD.DTDAttListDecl : XmlCompositeElement {
    private static short ATTDEF_ROLE;
    private static short ELEMENT_NAME_ROLE;
    private static short START_ROLE;
    private static short END_ROLE;
    public string ElementName { get; }
    public TreeNodeCollection`1<IAttDef> AttDefs { get; }
    public IXmlAttlistStartTokenNode Start { get; }
    public IXmlTagEndTokenNode End { get; }
    public DTDAttListDecl(XmlCompositeNodeType type);
    public virtual short GetChildRole(TreeElement child);
    public sealed virtual string get_ElementName();
    public sealed virtual TreeNodeCollection`1<IAttDef> get_AttDefs();
    public sealed virtual IXmlAttlistStartTokenNode get_Start();
    public sealed virtual IXmlTagEndTokenNode get_End();
}
public class JetBrains.ReSharper.Psi.Xml.Impl.Tree.DTD.DTDAttType : XmlCompositeElement {
    private static short TYPE_OR_ITEM_ROLE;
    private static short LPAR_ROLE;
    private static short RPAR_ROLE;
    private IXmlToken AttTypeToken { get; }
    public AttType AttType { get; }
    public IEnumerable`1<string> Types { get; }
    public IXmlLparenthTokenNode LPar { get; }
    public IXmlRparenthTokenNode RPar { get; }
    public DTDAttType(XmlCompositeNodeType type);
    public virtual short GetChildRole(TreeElement child);
    private IXmlToken get_AttTypeToken();
    public sealed virtual AttType get_AttType();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Psi.Xml.Impl.Tree.DTD.DTDAttType/<get_Types>d__10")]
public sealed virtual IEnumerable`1<string> get_Types();
    public sealed virtual IXmlLparenthTokenNode get_LPar();
    public sealed virtual IXmlRparenthTokenNode get_RPar();
}
public class JetBrains.ReSharper.Psi.Xml.Impl.Tree.DTD.DTDElementDecl : XmlCompositeElement {
    private static short NAME_ROLE;
    private static short CONTENT_ROLE;
    private static short START_ROLE;
    private static short END_ROLE;
    public string Name { get; }
    public IElementContent ContentSpec { get; }
    public IXmlElementStartTokenNode Start { get; }
    public IXmlTagEndTokenNode End { get; }
    public DTDElementDecl(XmlCompositeNodeType type);
    public virtual short GetChildRole(TreeElement child);
    public sealed virtual string get_Name();
    public sealed virtual IElementContent get_ContentSpec();
    public sealed virtual IXmlElementStartTokenNode get_Start();
    public sealed virtual IXmlTagEndTokenNode get_End();
}
public class JetBrains.ReSharper.Psi.Xml.Impl.Tree.DTD.DTDEntityDecl : XmlCompositeElement {
    private static short START_ROLE;
    private static short END_ROLE;
    private static short NAME_ROLE;
    private static short VALUE_ROLE;
    public string Name { get; }
    public string Value { get; }
    public IXmlEntityStartTokenNode Start { get; }
    public IXmlTagEndTokenNode End { get; }
    public DTDEntityDecl(XmlCompositeNodeType type);
    public virtual short GetChildRole(TreeElement child);
    public sealed virtual string get_Name();
    public sealed virtual string get_Value();
    public sealed virtual IXmlEntityStartTokenNode get_Start();
    public sealed virtual IXmlTagEndTokenNode get_End();
}
public class JetBrains.ReSharper.Psi.Xml.Impl.Tree.DTD.DTDFile : XmlFile {
    public IXmlLbracketTokenNode LBracket { get; }
    public IXmlRbracketTokenNode RBracket { get; }
    public DTDFile(XmlCompositeNodeType elementType);
    public sealed virtual IXmlLbracketTokenNode get_LBracket();
    public sealed virtual IXmlRbracketTokenNode get_RBracket();
}
public class JetBrains.ReSharper.Psi.Xml.Impl.Tree.DTD.DTDNDataDecl : XmlCompositeElement {
    private static short NAME_ROLE;
    public string Name { get; }
    public DTDNDataDecl(XmlCompositeNodeType type);
    public virtual short GetChildRole(TreeElement child);
    public sealed virtual string get_Name();
}
public class JetBrains.ReSharper.Psi.Xml.Impl.Tree.DTD.DTDNotationDecl : XmlCompositeElement {
    private static short NAME_ROLE;
    private static short START_ROLE;
    private static short END_ROLE;
    public string Name { get; }
    public IXmlNotationStartTokenNode Start { get; }
    public IXmlTagEndTokenNode End { get; }
    public DTDNotationDecl(XmlCompositeNodeType type);
    public virtual short GetChildRole(TreeElement child);
    public sealed virtual string get_Name();
    public sealed virtual IXmlNotationStartTokenNode get_Start();
    public sealed virtual IXmlTagEndTokenNode get_End();
}
public class JetBrains.ReSharper.Psi.Xml.Impl.Tree.EmptyContent : XmlCompositeElement {
    public EmptyContent(XmlCompositeNodeType type);
}
public class JetBrains.ReSharper.Psi.Xml.Impl.Tree.GrouppedContent : XmlCompositeElement {
    private static short CONTENT_ROLE;
    private static short LPAR_ROLE;
    private static short RPAR_ROLE;
    public TreeNodeCollection`1<IElementContent> Items { get; }
    public IXmlLparenthTokenNode LPar { get; }
    public IXmlRparenthTokenNode RPar { get; }
    public GrouppedContent(XmlCompositeNodeType type);
    public virtual short GetChildRole(TreeElement child);
    public sealed virtual TreeNodeCollection`1<IElementContent> get_Items();
    public sealed virtual IXmlLparenthTokenNode get_LPar();
    public sealed virtual IXmlRparenthTokenNode get_RPar();
}
public class JetBrains.ReSharper.Psi.Xml.Impl.Tree.IntSubset : XmlCompositeElement {
    public static short LBRACKET_ROLE;
    public static short RBRACKET_ROLE;
    public IXmlLbracketTokenNode LBracket { get; }
    public IXmlRbracketTokenNode RBracket { get; }
    public IntSubset(XmlCompositeNodeType type);
    public virtual short GetChildRole(TreeElement child);
    public sealed virtual IXmlLbracketTokenNode get_LBracket();
    public sealed virtual IXmlRbracketTokenNode get_RBracket();
}
public class JetBrains.ReSharper.Psi.Xml.Impl.Tree.ProcessingInstruction : XmlCompositeElement {
    public static short START_ROLE;
    public static short END_ROLE;
    public static short NAME_ROLE;
    public static short BODY_ROLE;
    public IXmlToken Start { get; }
    public IXmlToken Body { get; }
    public IXmlToken End { get; }
    public IXmlIdentifier InstructionTargetNode { get; }
    public string InstructionTarget { get; }
    public ProcessingInstruction(XmlCompositeNodeType type);
    public sealed virtual TReturn AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public sealed virtual IXmlToken get_Start();
    public sealed virtual IXmlToken get_Body();
    public sealed virtual IXmlToken get_End();
    public sealed virtual IXmlIdentifier get_InstructionTargetNode();
    public sealed virtual string get_InstructionTarget();
}
public class JetBrains.ReSharper.Psi.Xml.Impl.Tree.PublicExternalId : XmlCompositeElement {
    public PublicExternalId(XmlCompositeNodeType type);
}
public abstract class JetBrains.ReSharper.Psi.Xml.Impl.Tree.References.XmlQualifiableReferenceWithToken : QualifiableReferenceWithinElement`2<ITreeNode, IXmlToken> {
    protected XmlQualifiableReferenceWithToken(ITreeNode owner, IQualifier qualifier, IXmlToken token);
    protected XmlQualifiableReferenceWithToken(ITreeNode owner, IQualifier qualifier, IXmlToken token, TreeTextRange rangeWithin);
    public virtual Refers RefersToDeclaredElement(IDeclaredElement declaredElement);
    [CompilerGeneratedAttribute]
private bool <RefersToDeclaredElement>b__2_0(IDeclaredElement element);
}
public abstract class JetBrains.ReSharper.Psi.Xml.Impl.Tree.References.XmlReferenceWithTokenBase`1 : ReferenceWithinElementBase`2<T, IXmlToken> {
    protected XmlReferenceWithTokenBase`1(T owner, IXmlToken token, TreeTextRange rangeWithin);
    protected virtual IReference BindToInternal(IDeclaredElement element, ISubstitution substitution);
    public virtual Refers RefersToDeclaredElement(IDeclaredElement declaredElement);
    [CompilerGeneratedAttribute]
private bool <RefersToDeclaredElement>b__2_0(IDeclaredElement element);
}
public class JetBrains.ReSharper.Psi.Xml.Impl.Tree.RepetitionContent : XmlCompositeElement {
    private static short CONTENT_ROLE;
    private static short REPETITION_ROLE;
    public IElementContent Content { get; }
    public RepetitionType RepetitionType { get; }
    public RepetitionContent(XmlCompositeNodeType type);
    public virtual short GetChildRole(TreeElement child);
    public sealed virtual IElementContent get_Content();
    public sealed virtual RepetitionType get_RepetitionType();
}
public class JetBrains.ReSharper.Psi.Xml.Impl.Tree.ResyncXmlElementFactory : DelegatingXmlElementFactory {
    [NotNullAttribute]
private IXmlTagContainer myXmlTagContainer;
    public ResyncXmlElementFactory(IXmlTagContainer xmlTagContainer, IXmlElementFactory factory);
    public virtual IXmlTag CreateRootTag(IXmlTagHeader header, IXmlElementFactoryContext context);
    public virtual IXmlTag CreateTag(IXmlTagHeader header, IXmlTag parentTag, IXmlElementFactoryContext context);
    public virtual IXmlTagHeader CreateTagHeader(IXmlTagContainer parentTag, IXmlElementFactoryContext context);
    public virtual IXmlTagFooter CreateTagFooter(IXmlTagContainer parentTag, IXmlElementFactoryContext context);
    public virtual IXmlAttribute CreateAttribute(IXmlIdentifier nameIdentifier, IXmlAttributeContainer attributeContainer, IXmlTagContainer parentTag, IXmlElementFactoryContext context);
    private IXmlTagContainer FixTagContainer(IXmlTagContainer container);
}
public class JetBrains.ReSharper.Psi.Xml.Impl.Tree.ResyncXmlElementFactoryContext : object {
    [NotNullAttribute]
private ITreeNode myPhysicalNode;
    public ResyncXmlElementFactoryContext(ITreeNode physicalNode);
    public sealed virtual T GetContainingNode(ITreeNode currentNode, bool returnCurrent);
    public sealed virtual IXmlTag GetParentTag(IXmlTag currentTag);
}
public class JetBrains.ReSharper.Psi.Xml.Impl.Tree.SimpleContent : XmlCompositeElement {
    public SimpleContent(XmlCompositeNodeType type);
}
public class JetBrains.ReSharper.Psi.Xml.Impl.Tree.SystemExternalId : XmlCompositeElement {
    public SystemExternalId(XmlCompositeNodeType type);
}
public class JetBrains.ReSharper.Psi.Xml.Impl.Tree.XmlAsteriskToken : XmlTokenBase {
    public XmlAsteriskToken(XmlTokenNodeType tokenNodeType);
    public virtual string GetText();
    public virtual int GetTextLength();
    public virtual TReturn AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
}
public class JetBrains.ReSharper.Psi.Xml.Impl.Tree.XmlAttlistStartToken : XmlTokenBase {
    public XmlAttlistStartToken(XmlTokenNodeType tokenNodeType);
    public virtual string GetText();
    public virtual int GetTextLength();
    public virtual TReturn AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
}
public class JetBrains.ReSharper.Psi.Xml.Impl.Tree.XmlAttribute : XmlCompositeElement {
    public static short UNKNOWN_ROLE;
    public static short NAME_ROLE;
    public static short EQ_ROLE;
    public static short VALUE_ROLE;
    public string AttributeName { get; }
    public string XmlNamespace { get; }
    public TreeTextRange XmlNamespaceRange { get; }
    public string XmlName { get; }
    public TreeTextRange XmlNameRange { get; }
    public string UnquotedValue { get; }
    public IXmlIdentifier Identifier { get; }
    public IXmlIdentifier NameNode { get; }
    public IXmlToken Eq { get; }
    public IXmlAttributeValue Value { get; }
    public XmlAttribute(XmlCompositeNodeType type);
    public sealed virtual TReturn AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public sealed virtual string get_AttributeName();
    public sealed virtual string get_XmlNamespace();
    public sealed virtual TreeTextRange get_XmlNamespaceRange();
    public sealed virtual string get_XmlName();
    public sealed virtual TreeTextRange get_XmlNameRange();
    public sealed virtual string get_UnquotedValue();
    public sealed virtual IXmlIdentifier get_Identifier();
    public sealed virtual IXmlIdentifier get_NameNode();
    public sealed virtual IXmlToken get_Eq();
    public sealed virtual IXmlAttributeValue get_Value();
}
public abstract class JetBrains.ReSharper.Psi.Xml.Impl.Tree.XmlAttributeContainer : XmlCompositeElement {
    protected static short UNKNOWN_ROLE;
    public static short ATTRIBUTE_ROLE;
    public static short START_ROLE;
    public static short END_ROLE;
    public static short NAME_ROLE;
    public IXmlToken StartNode { get; }
    public IXmlToken EndNode { get; }
    public IXmlIdentifier Name { get; }
    public string ContainerName { get; }
    public TreeNodeCollection`1<IXmlAttribute> Attributes { get; }
    public TreeNodeEnumerable`1<IXmlAttribute> AttributesEnumerable { get; }
    protected XmlAttributeContainer(XmlCompositeNodeType type);
    public sealed virtual IXmlToken get_StartNode();
    public sealed virtual IXmlToken get_EndNode();
    public sealed virtual IXmlIdentifier get_Name();
    public virtual short GetChildRole(TreeElement child);
    protected abstract virtual bool IsEndToken(TokenNodeType tokenType);
    protected abstract virtual bool IsStartToken(TokenNodeType tokenType);
    public virtual string get_ContainerName();
    public sealed virtual TreeNodeCollection`1<IXmlAttribute> get_Attributes();
    public sealed virtual TreeNodeEnumerable`1<IXmlAttribute> get_AttributesEnumerable();
    public abstract virtual TReturn AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
}
public static class JetBrains.ReSharper.Psi.Xml.Impl.Tree.XmlAttributeNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null <= null")]
public static IXmlAttribute GetByAttributeValue(IXmlAttributeValue attributeValue);
}
public class JetBrains.ReSharper.Psi.Xml.Impl.Tree.XmlCData : XmlCompositeElement {
    private static short UNKNOWN_ROLE;
    private static short START_ROLE;
    private static short BODY_ROLE;
    private static short END_ROLE;
    public string CData { get; }
    public IXmlToken Start { get; }
    public IXmlToken Body { get; }
    public IXmlToken End { get; }
    public bool IsOpened { get; }
    public XmlCData(XmlCompositeNodeType type);
    public virtual short GetChildRole(TreeElement child);
    public sealed virtual TReturn AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
    public sealed virtual string get_CData();
    public sealed virtual IXmlToken get_Start();
    public sealed virtual IXmlToken get_Body();
    public sealed virtual IXmlToken get_End();
    public sealed virtual IChameleonNode ReSync(CachingLexer cachingLexer, TreeTextRange changedRange, int insertedTextLen);
    public sealed virtual bool get_IsOpened();
}
public class JetBrains.ReSharper.Psi.Xml.Impl.Tree.XmlCdataEndToken : XmlTokenBase {
    public XmlCdataEndToken(XmlTokenNodeType tokenNodeType);
    public virtual string GetText();
    public virtual int GetTextLength();
    public virtual TReturn AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
}
public class JetBrains.ReSharper.Psi.Xml.Impl.Tree.XmlCdataStartToken : XmlTokenBase {
    public XmlCdataStartToken(XmlTokenNodeType tokenNodeType);
    public virtual string GetText();
    public virtual int GetTextLength();
    public virtual TReturn AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
}
public class JetBrains.ReSharper.Psi.Xml.Impl.Tree.XmlCommaToken : XmlTokenBase {
    public XmlCommaToken(XmlTokenNodeType tokenNodeType);
    public virtual string GetText();
    public virtual int GetTextLength();
    public virtual TReturn AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
}
public class JetBrains.ReSharper.Psi.Xml.Impl.Tree.XmlComment : XmlCompositeElement {
    protected static short START_ROLE;
    protected static short BODY_ROLE;
    protected static short END_ROLE;
    public IXmlToken CommentStart { get; }
    public IXmlToken CommentBody { get; }
    public IXmlToken CommentEnd { get; }
    public string CommentText { get; }
    public bool IsOpened { get; }
    public XmlComment(XmlCompositeNodeType type);
    private static XmlComment();
    public sealed virtual TReturn AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public sealed virtual IXmlToken get_CommentStart();
    public sealed virtual IXmlToken get_CommentBody();
    public sealed virtual IXmlToken get_CommentEnd();
    public sealed virtual string get_CommentText();
    public sealed virtual TreeTextRange GetCommentRange();
    public sealed virtual IChameleonNode ReSync(CachingLexer cachingLexer, TreeTextRange changedRange, int insertedTextLen);
    public sealed virtual bool get_IsOpened();
}
public class JetBrains.ReSharper.Psi.Xml.Impl.Tree.XmlCommentEndToken : XmlTokenBase {
    public XmlCommentEndToken(XmlTokenNodeType tokenNodeType);
    public virtual string GetText();
    public virtual int GetTextLength();
    public virtual bool IsFiltered();
    public virtual TReturn AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
}
public class JetBrains.ReSharper.Psi.Xml.Impl.Tree.XmlCommentStartToken : XmlTokenBase {
    public XmlCommentStartToken(XmlTokenNodeType tokenNodeType);
    public virtual string GetText();
    public virtual int GetTextLength();
    public virtual bool IsFiltered();
    public virtual TReturn AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
}
public abstract class JetBrains.ReSharper.Psi.Xml.Impl.Tree.XmlCompositeElement : CompositeElementWithReferences {
    private XmlCompositeNodeType myNodeType;
    public PsiLanguageType Language { get; }
    public NodeType NodeType { get; }
    public XmlElementTypes XmlElementTypes { get; }
    public XmlTokenTypes XmlTokenTypes { get; }
    protected XmlCompositeElement(XmlCompositeNodeType type);
    public virtual PsiLanguageType get_Language();
    public virtual NodeType get_NodeType();
    public XmlElementTypes get_XmlElementTypes();
    public sealed virtual XmlTokenTypes get_XmlTokenTypes();
    private sealed virtual override TReturn JetBrains.ReSharper.Psi.Xml.Tree.IXmlTreeNode.AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
}
public class JetBrains.ReSharper.Psi.Xml.Impl.Tree.XmlDtdStartToken : XmlTokenBase {
    public XmlDtdStartToken(XmlTokenNodeType tokenNodeType);
    public virtual string GetText();
    public virtual int GetTextLength();
    public virtual TReturn AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
}
public class JetBrains.ReSharper.Psi.Xml.Impl.Tree.XmlElementStartToken : XmlTokenBase {
    public XmlElementStartToken(XmlTokenNodeType tokenNodeType);
    public virtual string GetText();
    public virtual int GetTextLength();
    public virtual TReturn AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
}
public class JetBrains.ReSharper.Psi.Xml.Impl.Tree.XmlEntityStartToken : XmlTokenBase {
    public XmlEntityStartToken(XmlTokenNodeType tokenNodeType);
    public virtual string GetText();
    public virtual int GetTextLength();
    public virtual TReturn AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
}
public class JetBrains.ReSharper.Psi.Xml.Impl.Tree.XmlEntityToken : XmlFloatingTextToken {
    public bool IsNumericEntity { get; }
    public string Name { get; }
    public XmlEntityToken(XmlTokenNodeType tokenNodeType, string text);
    public sealed virtual bool get_IsNumericEntity();
    public sealed virtual string get_Name();
}
public class JetBrains.ReSharper.Psi.Xml.Impl.Tree.XmlEqToken : XmlTokenBase {
    public XmlEqToken(XmlTokenNodeType tokenNodeType);
    public virtual string GetText();
    public virtual int GetTextLength();
    public virtual TReturn AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
}
public class JetBrains.ReSharper.Psi.Xml.Impl.Tree.XmlFile : FileElementBase {
    public static short PI_ROLE;
    public static short TAG_ROLE;
    public static short TEXT_ROLE;
    private XmlCompositeNodeType myElementType;
    public NodeType NodeType { get; }
    public PsiLanguageType Language { get; }
    public XmlElementTypes XmlElementTypes { get; }
    public XmlTokenTypes XmlTokenTypes { get; }
    public TreeNodeCollection`1<IProcessingInstruction> ProcessingInstructions { get; }
    public TreeNodeCollection`1<IXmlProcessingInstruction> XmlProcessingInstructions { get; }
    public TreeNodeCollection`1<IXmlTag> InnerTags { get; }
    public XmlFile(XmlCompositeNodeType elementType);
    public virtual NodeType get_NodeType();
    public virtual PsiLanguageType get_Language();
    public sealed virtual XmlElementTypes get_XmlElementTypes();
    public sealed virtual XmlTokenTypes get_XmlTokenTypes();
    public sealed virtual TreeNodeCollection`1<IProcessingInstruction> get_ProcessingInstructions();
    public sealed virtual TreeNodeCollection`1<IXmlProcessingInstruction> get_XmlProcessingInstructions();
    public sealed virtual TreeNodeCollection`1<IXmlTag> get_InnerTags();
    public sealed virtual IXmlTag GetTag(Predicate`1<IXmlTag> predicate);
    public sealed virtual TreeNodeEnumerable`1<T> GetTags();
    public sealed virtual TreeNodeCollection`1<T> GetTags2();
    public sealed virtual IList`1<T> GetNestedTags(string xpath);
    public sealed virtual TXmlTag AddTagBefore(TXmlTag tag, IXmlTag anchor);
    public sealed virtual TXmlTag AddTagAfter(TXmlTag tag, IXmlTag anchor);
    public virtual void RemoveTag(IXmlTag tag);
    public sealed virtual TReturn AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
}
public class JetBrains.ReSharper.Psi.Xml.Impl.Tree.XmlFixedToken : XmlTokenBase {
    public XmlFixedToken(XmlTokenNodeType tokenNodeType);
    public virtual string GetText();
    public virtual int GetTextLength();
    public virtual TReturn AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
}
public class JetBrains.ReSharper.Psi.Xml.Impl.Tree.XmlFloatingTextToken : XmlTokenBase {
    [NotNullAttribute]
private string myText;
    public XmlFloatingTextToken(XmlTokenNodeType tokenNodeType, string text);
    public virtual int GetTextLength();
    public virtual string GetText();
    public virtual TReturn AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
}
public class JetBrains.ReSharper.Psi.Xml.Impl.Tree.XmlIdentifier : XmlFloatingTextToken {
    private string myCachedNamespace;
    private string myCachedName;
    private string myCachedText;
    private TreeTextRange myXmlNamespaceRange;
    private TreeTextRange myXmlNameRange;
    public static char NAMESPACE_DELIM;
    public string XmlNamespace { get; }
    public TreeTextRange XmlNamespaceRange { get; }
    public string XmlName { get; }
    public TreeTextRange XmlNameRange { get; }
    public XmlIdentifier(XmlTokenNodeType tokenNodeType, string text);
    private static XmlIdentifier();
    public virtual string GetText();
    public sealed virtual string get_XmlNamespace();
    public sealed virtual TreeTextRange get_XmlNamespaceRange();
    public sealed virtual string get_XmlName();
    public sealed virtual TreeTextRange get_XmlNameRange();
    public virtual TReturn AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
}
public class JetBrains.ReSharper.Psi.Xml.Impl.Tree.XmlImpliedToken : XmlTokenBase {
    public XmlImpliedToken(XmlTokenNodeType tokenNodeType);
    public virtual string GetText();
    public virtual int GetTextLength();
    public virtual TReturn AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
}
public class JetBrains.ReSharper.Psi.Xml.Impl.Tree.XmlLbracketToken : XmlTokenBase {
    public XmlLbracketToken(XmlTokenNodeType tokenNodeType);
    public virtual string GetText();
    public virtual int GetTextLength();
    public virtual TReturn AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
}
public class JetBrains.ReSharper.Psi.Xml.Impl.Tree.XmlLparenthToken : XmlTokenBase {
    public XmlLparenthToken(XmlTokenNodeType tokenNodeType);
    public virtual string GetText();
    public virtual int GetTextLength();
    public virtual TReturn AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
}
public class JetBrains.ReSharper.Psi.Xml.Impl.Tree.XmlNotationStartToken : XmlTokenBase {
    public XmlNotationStartToken(XmlTokenNodeType tokenNodeType);
    public virtual string GetText();
    public virtual int GetTextLength();
    public virtual TReturn AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
}
public class JetBrains.ReSharper.Psi.Xml.Impl.Tree.XmlOrToken : XmlTokenBase {
    public XmlOrToken(XmlTokenNodeType tokenNodeType);
    public virtual string GetText();
    public virtual int GetTextLength();
    public virtual TReturn AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
}
public class JetBrains.ReSharper.Psi.Xml.Impl.Tree.XmlPercentToken : XmlTokenBase {
    public XmlPercentToken(XmlTokenNodeType tokenNodeType);
    public virtual string GetText();
    public virtual int GetTextLength();
    public virtual TReturn AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
}
public class JetBrains.ReSharper.Psi.Xml.Impl.Tree.XmlPiendToken : XmlTokenBase {
    public XmlPiendToken(XmlTokenNodeType tokenNodeType);
    public virtual string GetText();
    public virtual int GetTextLength();
    public virtual TReturn AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
}
public class JetBrains.ReSharper.Psi.Xml.Impl.Tree.XmlPistartToken : XmlTokenBase {
    public XmlPistartToken(XmlTokenNodeType tokenNodeType);
    public virtual string GetText();
    public virtual int GetTextLength();
    public virtual TReturn AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
}
public class JetBrains.ReSharper.Psi.Xml.Impl.Tree.XmlPlusToken : XmlTokenBase {
    public XmlPlusToken(XmlTokenNodeType tokenNodeType);
    public virtual string GetText();
    public virtual int GetTextLength();
    public virtual TReturn AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
}
public class JetBrains.ReSharper.Psi.Xml.Impl.Tree.XmlProcessingInstruction : XmlAttributeContainer {
    public string ContainerName { get; }
    public bool IsOpened { get; }
    public XmlProcessingInstruction(XmlCompositeNodeType type);
    public virtual TReturn AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual string get_ContainerName();
    protected virtual bool IsEndToken(TokenNodeType tokenType);
    protected virtual bool IsStartToken(TokenNodeType tokenType);
    public sealed virtual IChameleonNode ReSync(CachingLexer cachingLexer, TreeTextRange changedRange, int insertedTextLen);
    public sealed virtual bool get_IsOpened();
}
public class JetBrains.ReSharper.Psi.Xml.Impl.Tree.XmlQuestionToken : XmlTokenBase {
    public XmlQuestionToken(XmlTokenNodeType tokenNodeType);
    public virtual string GetText();
    public virtual int GetTextLength();
    public virtual TReturn AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
}
public class JetBrains.ReSharper.Psi.Xml.Impl.Tree.XmlRbracketToken : XmlTokenBase {
    public XmlRbracketToken(XmlTokenNodeType tokenNodeType);
    public virtual string GetText();
    public virtual int GetTextLength();
    public virtual TReturn AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
}
public class JetBrains.ReSharper.Psi.Xml.Impl.Tree.XmlRequiredToken : XmlTokenBase {
    public XmlRequiredToken(XmlTokenNodeType tokenNodeType);
    public virtual string GetText();
    public virtual int GetTextLength();
    public virtual TReturn AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
}
public class JetBrains.ReSharper.Psi.Xml.Impl.Tree.XmlRparenthToken : XmlTokenBase {
    public XmlRparenthToken(XmlTokenNodeType tokenNodeType);
    public virtual string GetText();
    public virtual int GetTextLength();
    public virtual TReturn AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
}
public class JetBrains.ReSharper.Psi.Xml.Impl.Tree.XmlSyntaxErrorElement : ErrorElement {
    [NotNullAttribute]
private XmlCompositeNodeType myNodeType;
    [NotNullAttribute]
private XmlSyntaxErrorType myErrorType;
    public PsiLanguageType Language { get; }
    public NodeType NodeType { get; }
    public XmlTokenTypes XmlTokenTypes { get; }
    public XmlSyntaxErrorType ErrorType { get; }
    public XmlSyntaxErrorElement(XmlCompositeNodeType nodeType, XmlSyntaxErrorType errorType);
    public virtual PsiLanguageType get_Language();
    public virtual NodeType get_NodeType();
    public sealed virtual XmlTokenTypes get_XmlTokenTypes();
    public sealed virtual XmlSyntaxErrorType get_ErrorType();
    public sealed virtual TReturn AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
}
public class JetBrains.ReSharper.Psi.Xml.Impl.Tree.XmlTag : XmlCompositeElement {
    public static short UNKNOWN_ROLE;
    public static short HEADER_ROLE;
    public static short FOOTER_ROLE;
    public static short TAG_ROLE;
    public static short TEXT_ROLE;
    public string InnerText { get; }
    public string InnerValue { get; }
    public TreeNodeCollection`1<IXmlToken> InnerTextTokens { get; }
    public bool IsEmptyTag { get; }
    public TreeNodeCollection`1<IXmlTag> InnerTags { get; }
    public IXmlTagHeader Header { get; }
    public IXmlTagFooter Footer { get; }
    public IXmlTagHeader HeaderNode { get; }
    public IXmlTagFooter FooterNode { get; }
    public ITreeRange InnerXml { get; }
    public bool IsOpened { get; }
    public XmlTag(XmlCompositeNodeType type);
    public sealed virtual TReturn AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual short GetChildRole(TreeElement child);
    public sealed virtual string get_InnerText();
    public sealed virtual string get_InnerValue();
    public sealed virtual TreeNodeCollection`1<IXmlToken> get_InnerTextTokens();
    public sealed virtual bool get_IsEmptyTag();
    public sealed virtual TXmlAttribute AddAttributeBefore(TXmlAttribute attribute, IXmlAttribute anchor);
    public sealed virtual TXmlAttribute AddAttributeAfter(TXmlAttribute attribute, IXmlAttribute anchor);
    public virtual void RemoveAttribute(IXmlAttribute attribute);
    public sealed virtual TreeNodeCollection`1<IXmlTag> get_InnerTags();
    public sealed virtual IXmlTag GetTag(Predicate`1<IXmlTag> predicate);
    public sealed virtual TreeNodeEnumerable`1<T> GetTags();
    public sealed virtual TreeNodeCollection`1<T> GetTags2();
    public sealed virtual IList`1<T> GetNestedTags(string xpath);
    public sealed virtual TXmlTag AddTagBefore(TXmlTag tag, IXmlTag anchor);
    public sealed virtual TXmlTag AddTagAfter(TXmlTag tag, IXmlTag anchor);
    public sealed virtual void RemoveTag(IXmlTag tag);
    public sealed virtual IXmlTagHeader get_Header();
    public sealed virtual IXmlTagFooter get_Footer();
    public sealed virtual IXmlTagHeader get_HeaderNode();
    public sealed virtual IXmlTagFooter get_FooterNode();
    public sealed virtual ITreeRange get_InnerXml();
    public sealed virtual bool get_IsOpened();
    public virtual IChameleonNode FindChameleonWhichCoversRange(TreeTextRange textRange);
    public sealed virtual IChameleonNode ReSync(CachingLexer cachingLexer, TreeTextRange changedRange, int insertedTextLen);
    private HashSet`1<string> GetOuterTagNames();
    public virtual void SubTreeChanged(ITreeNode elementContainingChanges, PsiChangedElementType changeType);
}
public static class JetBrains.ReSharper.Psi.Xml.Impl.Tree.XmlTagContainerNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null <= null")]
public static IXmlTagContainer GetByTag(IXmlTag tag);
}
public class JetBrains.ReSharper.Psi.Xml.Impl.Tree.XmlTagEnd1Token : XmlTokenBase {
    public XmlTagEnd1Token(XmlTokenNodeType tokenNodeType);
    public virtual string GetText();
    public virtual int GetTextLength();
    public virtual TReturn AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
}
public class JetBrains.ReSharper.Psi.Xml.Impl.Tree.XmlTagEndToken : XmlTokenBase {
    public XmlTagEndToken(XmlTokenNodeType tokenNodeType);
    public virtual string GetText();
    public virtual int GetTextLength();
    public virtual TReturn AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
}
public class JetBrains.ReSharper.Psi.Xml.Impl.Tree.XmlTagFooterNode : XmlCompositeElement {
    public static short UNKNOWN_ROLE;
    public static short TAG_START_ROLE;
    public static short TAG_END_ROLE;
    public static short NAME_ROLE;
    public IXmlToken StartNode { get; }
    public IXmlIdentifier Name { get; }
    public IXmlToken EndNode { get; }
    public XmlTagFooterNode(XmlCompositeNodeType type);
    public virtual short GetChildRole(TreeElement child);
    public sealed virtual IXmlToken get_StartNode();
    public sealed virtual IXmlIdentifier get_Name();
    public sealed virtual IXmlToken get_EndNode();
    public sealed virtual TReturn AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
}
public class JetBrains.ReSharper.Psi.Xml.Impl.Tree.XmlTagHeaderNode : XmlAttributeContainer {
    public bool IsOpened { get; }
    public bool IsClosed { get; }
    public XmlTagHeaderNode(XmlCompositeNodeType type);
    public sealed virtual bool get_IsOpened();
    public sealed virtual bool get_IsClosed();
    protected virtual bool IsEndToken(TokenNodeType tokenType);
    protected virtual bool IsStartToken(TokenNodeType tokenType);
    public virtual TReturn AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
    public sealed virtual IChameleonNode ReSync(CachingLexer cachingLexer, TreeTextRange changedRange, int insertedTextLen);
    protected virtual XmlTreeBuilder CreateTreeBuilder(ITokenIntern intern);
}
public static class JetBrains.ReSharper.Psi.Xml.Impl.Tree.XmlTagNavigator : object {
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null <= null")]
public static IXmlTag GetByTag(IXmlTag tag);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null <= null")]
public static IXmlTag GetByTagHeader(IXmlTagHeader header);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null <= null")]
public static IXmlTag GetByTagFooter(IXmlTagFooter footer);
    [PureAttribute]
[CanBeNullAttribute]
[ContractAnnotationAttribute("null <= null")]
public static IXmlTag GetByAttribute(IXmlAttribute attribute);
}
public class JetBrains.ReSharper.Psi.Xml.Impl.Tree.XmlTagStart1Token : XmlTokenBase {
    public XmlTagStart1Token(XmlTokenNodeType tokenNodeType);
    public virtual string GetText();
    public virtual int GetTextLength();
    public virtual TReturn AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
}
public class JetBrains.ReSharper.Psi.Xml.Impl.Tree.XmlTagStartToken : XmlTokenBase {
    public XmlTagStartToken(XmlTokenNodeType tokenNodeType);
    public virtual string GetText();
    public virtual int GetTextLength();
    public virtual TReturn AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
}
public class JetBrains.ReSharper.Psi.Xml.Impl.Tree.XmlToken : BoundToBufferLeafElement {
    public XmlTokenTypes XmlTokenTypes { get; }
    public PsiLanguageType Language { get; }
    public XmlToken(XmlTokenNodeType type, IBuffer buffer, TreeOffset startOffset, TreeOffset endOffset);
    public virtual TReturn AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
    private sealed virtual override TokenNodeType JetBrains.ReSharper.Psi.Tree.ITokenNode.GetTokenType();
    public sealed virtual XmlTokenTypes get_XmlTokenTypes();
    public sealed virtual XmlTokenNodeType GetTokenType();
    public virtual PsiLanguageType get_Language();
    public virtual string ToString();
}
public abstract class JetBrains.ReSharper.Psi.Xml.Impl.Tree.XmlTokenBase : LeafElementBase {
    private XmlTokenNodeType myTokenNodeType;
    public PsiLanguageType Language { get; }
    public NodeType NodeType { get; }
    public XmlTokenTypes XmlTokenTypes { get; }
    protected XmlTokenBase(XmlTokenNodeType tokenNodeType);
    public virtual PsiLanguageType get_Language();
    private sealed virtual override TokenNodeType JetBrains.ReSharper.Psi.Tree.ITokenNode.GetTokenType();
    public sealed virtual XmlTokenNodeType GetTokenType();
    public virtual NodeType get_NodeType();
    public sealed virtual XmlTokenTypes get_XmlTokenTypes();
    public virtual string ToString();
    public virtual IBuffer GetTextAsBuffer();
    public abstract virtual TReturn AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual StringBuilder GetText(StringBuilder to);
}
public class JetBrains.ReSharper.Psi.Xml.Impl.Tree.XmlValueToken : XmlToken {
    private string myCachedUnquotedValue;
    private TreeTextRange myUnquotedRange;
    public IXmlValueToken ValueToken { get; }
    public string UnquotedValue { get; }
    public TreeTextRange UnquotedValueRange { get; }
    public XmlValueToken(XmlTokenNodeType type, IBuffer buffer, TreeOffset startOffset, TreeOffset endOffset);
    public sealed virtual IXmlValueToken get_ValueToken();
    public sealed virtual string get_UnquotedValue();
    public sealed virtual TreeTextRange get_UnquotedValueRange();
    public virtual TReturn AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
}
public class JetBrains.ReSharper.Psi.Xml.Impl.Tree.XmlWhitespaceToken : XmlFloatingTextToken {
    public XmlWhitespaceToken(XmlTokenNodeType tokenNodeType, string text);
    public virtual bool IsFiltered();
}
public static class JetBrains.ReSharper.Psi.Xml.Impl.Util.ReferenceWithTokenUtil : object {
    public static void AddRestoreTransactionAction(IPsiServices psiServices, IReferenceWithToken referenceWithToken, ElementRange`1<IXmlToken> oldRange);
    private static IXmlToken CreateNewToken(IXmlToken oldToken, IBuffer buffer);
    public static IXmlToken SetText(IXmlToken token, TreeTextRange oldRange, string newText, ITreeNode elementToDropReferences);
    public static IReferenceWithToken SetText(IReferenceWithToken reference, string newText);
}
internal static class JetBrains.ReSharper.Psi.Xml.Impl.Util.XmlTagContainerUtil : object {
    public static TXmlTag AddTagBefore(IXmlTagContainer container, TXmlTag tag, IXmlTag anchor);
    public static TXamlTag AddTagAfter(IXmlTagContainer container, TXamlTag tag, IXmlTag anchor);
    internal static void RemoveTag(IXmlTagContainer tagContainer, IXmlTag tag);
}
public static class JetBrains.ReSharper.Psi.Xml.Impl.Util.XmlTagUtil : object {
    public static bool CanBeEmptyTag(IXmlTag tag);
    public static void MakeEmptyTag(IXmlTag tag);
    public static void MakeCompound(IXmlTag tag);
}
[PsiComponentAttribute("16")]
internal class JetBrains.ReSharper.Psi.Xml.Impl.XmlSearcherFactory : DomainSpecificSearcherFactoryBase {
    [NotNullAttribute]
private ILanguageManager myLanguageManager;
    public XmlSearcherFactory(ILanguageManager languageManager);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Psi.Xml.Impl.XmlSearcherFactory/<GetAllPossibleWordsInFile>d__2")]
public virtual IEnumerable`1<string> GetAllPossibleWordsInFile(IDeclaredElement element);
    public virtual bool IsCompatibleWithLanguage(PsiLanguageType languageType);
    public virtual IDomainSpecificSearcher CreateTextOccurrenceSearcher(IDeclaredElementsSet elements);
    public virtual IDomainSpecificSearcher CreateTextOccurrenceSearcher(string subject);
    public virtual IDomainSpecificSearcher CreateConstantExpressionSearcher(ConstantValue constantValue, bool onlyLiteralExpression);
}
public class JetBrains.ReSharper.Psi.Xml.Impl.XmlTextOccurrenceSearcher : object {
    [NotNullAttribute]
private JetHashSet`1<string> myNames;
    [NotNullAttribute]
private ILanguageManager myLanguageManager;
    public XmlTextOccurrenceSearcher(IDeclaredElementsSet elements, ILanguageManager languageManager);
    public XmlTextOccurrenceSearcher(string subject, ILanguageManager languageManager);
    public sealed virtual bool ProcessProjectItem(IPsiSourceFile sourceFile, IFindResultConsumer`1<TResult> consumer);
    public sealed virtual bool ProcessElement(ITreeNode element, IFindResultConsumer`1<TResult> consumer);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xml.XmlLanguage", "16")]
public class JetBrains.ReSharper.Psi.Xml.Impl.XmlTextOccurrenceSearcherFactory : object {
    public virtual XmlTextOccurrenceSearchHelper`1<TResult> CreateHelper(JetHashSet`1<string> names, IFindResultConsumer`1<TResult> consumer);
}
public class JetBrains.ReSharper.Psi.Xml.Impl.XmlTextOccurrenceSearchHelper`1 : object {
    [CompilerGeneratedAttribute]
private JetHashSet`1<string> <Names>k__BackingField;
    [CompilerGeneratedAttribute]
private IFindResultConsumer`1<TResult> <Consumer>k__BackingField;
    [CompilerGeneratedAttribute]
private Stack`1<bool> <ProcessInterior>k__BackingField;
    protected JetHashSet`1<string> Names { get; }
    protected IFindResultConsumer`1<TResult> Consumer { get; }
    protected Stack`1<bool> ProcessInterior { get; }
    public bool ProcessingIsFinished { get; }
    public XmlTextOccurrenceSearchHelper`1(JetHashSet`1<string> names, IFindResultConsumer`1<TResult> consumer);
    [CompilerGeneratedAttribute]
protected JetHashSet`1<string> get_Names();
    [CompilerGeneratedAttribute]
protected IFindResultConsumer`1<TResult> get_Consumer();
    [CompilerGeneratedAttribute]
protected Stack`1<bool> get_ProcessInterior();
    public sealed virtual bool InteriorShouldBeProcessed(ITreeNode element);
    protected virtual bool IsWordSeparator(char c);
    public sealed virtual bool get_ProcessingIsFinished();
    protected virtual bool ReferenceExists(IFile file, TreeTextRange range);
    protected virtual bool DeclarationExists(IXmlToken textToken, TreeTextRange textRange);
    protected void FetchTextOccurrences(IXmlToken textToken, IFile file);
    public virtual void ProcessBeforeInterior(ITreeNode element);
    protected virtual bool ProcessAttribute(IFile file, IXmlAttribute attribute);
    public sealed virtual void ProcessAfterInterior(ITreeNode element);
}
public class JetBrains.ReSharper.Psi.Xml.Impl.XmlTreeVisitor`2 : object {
    public virtual TReturn VisitNode(IXmlTreeNode node, TContext context);
    public virtual TReturn VisitAttributeContainer(IXmlAttributeContainer container, TContext context);
    public virtual TReturn Visit(IXmlFile file, TContext context);
    public virtual TReturn Visit(IXmlDocumentNode document, TContext context);
    public virtual TReturn Visit(IProcessingInstruction instruction, TContext context);
    public virtual TReturn Visit(IXmlProcessingInstruction processingInstruction, TContext context);
    public virtual TReturn Visit(IXmlAttribute attribute, TContext context);
    public virtual TReturn Visit(IXmlAttributeValue attribute, TContext context);
    public virtual TReturn Visit(IXmlCData cData, TContext context);
    public virtual TReturn Visit(IXmlCommentNode comment, TContext context);
    public virtual TReturn Visit(IXmlTag tag, TContext context);
    public virtual TReturn Visit(IXmlTagFooter footer, TContext context);
    public virtual TReturn Visit(IXmlTagHeader header, TContext context);
    public virtual TReturn VisitTokenNode(IXmlToken token, TContext context);
    public virtual TReturn Visit(IXmlFloatingTextTokenNode token, TContext context);
    public virtual TReturn Visit(IXmlIdentifier token, TContext context);
    public virtual TReturn Visit(IXmlCommentStartTokenNode startToken, TContext context);
    public virtual TReturn Visit(IXmlCommentEndTokenNode endToken, TContext context);
    public virtual TReturn Visit(IXmlAsteriskTokenNode token, TContext context);
    public virtual TReturn Visit(IXmlAttlistStartTokenNode token, TContext context);
    public virtual TReturn Visit(IXmlCdataEndTokenNode token, TContext context);
    public virtual TReturn Visit(IXmlCdataStartTokenNode token, TContext context);
    public virtual TReturn Visit(IXmlCommaTokenNode token, TContext context);
    public virtual TReturn Visit(IXmlDtdStartTokenNode token, TContext context);
    public virtual TReturn Visit(IXmlElementStartTokenNode token, TContext context);
    public virtual TReturn Visit(IXmlEntityStartTokenNode token, TContext context);
    public virtual TReturn Visit(IXmlEqTokenNode token, TContext context);
    public virtual TReturn Visit(IXmlFixedTokenNode token, TContext context);
    public virtual TReturn Visit(IXmlImpliedTokenNode token, TContext context);
    public virtual TReturn Visit(IXmlLbracketTokenNode token, TContext context);
    public virtual TReturn Visit(IXmlLparenthTokenNode token, TContext context);
    public virtual TReturn Visit(IXmlNotationStartTokenNode token, TContext context);
    public virtual TReturn Visit(IXmlOrTokenNode token, TContext context);
    public virtual TReturn Visit(IXmlPercentTokenNode token, TContext context);
    public virtual TReturn Visit(IXmlPiendTokenNode token, TContext context);
    public virtual TReturn Visit(IXmlPistartTokenNode token, TContext context);
    public virtual TReturn Visit(IXmlPlusTokenNode token, TContext context);
    public virtual TReturn Visit(IXmlQuestionTokenNode token, TContext context);
    public virtual TReturn Visit(IXmlRbracketTokenNode token, TContext context);
    public virtual TReturn Visit(IXmlRequiredTokenNode token, TContext context);
    public virtual TReturn Visit(IXmlRparenthTokenNode token, TContext context);
    public virtual TReturn Visit(IXmlTagEnd1TokenNode token, TContext context);
    public virtual TReturn Visit(IXmlTagEndTokenNode token, TContext context);
    public virtual TReturn Visit(IXmlTagStart1TokenNode token, TContext context);
    public virtual TReturn Visit(IXmlTagStartTokenNode token, TContext context);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xml.Injected.InjectedXmlLanguage", "16")]
public class JetBrains.ReSharper.Psi.Xml.Injected.InjectedXmlCodeFormatter : XmlCodeFormatter {
    public InjectedXmlCodeFormatter(XmlLanguage language, XmlTokenTypes xmlTokenTypes, XmlIndentingInfoProvider indentingInfoProvider, CodeFormatterRequirements requirements);
    public virtual bool CanModifyInsideNodeRange(ITreeNode leftElement, ITreeNode rightElement, CodeFormattingContext context);
    public virtual bool CanModifyNode(ITreeNode element, CodeFormattingContext context);
    public virtual bool IsWhitespaceToken(ITokenNode token);
    protected virtual void RemoveLeadingAndTrailingSpacesInFile(IFile fileNode, IContextBoundSettingsStore overrideSettingsStore);
    public virtual void InsertLineFeedAtFileEndIfNeeded(IFile fileNode, IContextBoundSettingsStore overrideSettingsStore);
}
[LanguageDefinitionAttribute("INJECTEDXML")]
public class JetBrains.ReSharper.Psi.Xml.Injected.InjectedXmlLanguage : XmlLanguage {
    public static string Name;
    [CompilerGeneratedAttribute]
private static InjectedXmlLanguage <Instance>k__BackingField;
    [CanBeNullAttribute]
[UsedImplicitlyAttribute]
public static InjectedXmlLanguage Instance { get; private set; }
    public PsiLanguageCategories SupportedCategories { get; }
    protected InjectedXmlLanguage(string name);
    protected InjectedXmlLanguage(string name, string presentableName);
    [CompilerGeneratedAttribute]
public static InjectedXmlLanguage get_Instance();
    [CompilerGeneratedAttribute]
private static void set_Instance(InjectedXmlLanguage value);
    public virtual PsiLanguageCategories get_SupportedCategories();
}
public interface JetBrains.ReSharper.Psi.Xml.IXmlLanguageSupport {
    public abstract virtual bool IsValidTagName(string name);
    public abstract virtual bool CanConvertAttributeToTag(IXmlAttribute attribute);
    [NotNullAttribute]
public abstract virtual string GetTagName(IXmlAttribute attribute);
    [NotNullAttribute]
public abstract virtual string ConvertAttributeValue(IXmlAttribute attribute, Boolean& preserveRequired);
    public abstract virtual bool CanConvertTagToAttribute(IXmlTag tag);
    [NotNullAttribute]
public abstract virtual string GetAttributeName(IXmlTag tag);
    [NotNullAttribute]
public abstract virtual string ConvertTagToValue(IXmlTag tag);
    public abstract virtual bool CanRemoveTagAndKeepChildren(IXmlTag tagToRemove);
    public abstract virtual bool CanRemoveAllTags(IXmlTag tagToRemove);
    public abstract virtual bool CanMakeTagEmpty(IXmlTag tag);
    public abstract virtual bool IsFormattingAllowed(IPsiSourceFile sourceFile);
    [NotNullAttribute]
public abstract virtual IXmlTreeBuilderContext CreateTreeBuilderContext(IPsiModule psiModule);
    [NotNullAttribute]
public abstract virtual XmlTreeBuilder CreateTreeBuilder(IXmlElementFactory factory, IXmlElementFactoryContext factoryContext, ITokenIntern intern, IXmlTreeBuilderContext treeBuilderContext);
}
public class JetBrains.ReSharper.Psi.Xml.Parsing.DefaultXmlElementFactoryContext : object {
    public static DefaultXmlElementFactoryContext Instance;
    private static DefaultXmlElementFactoryContext();
    public sealed virtual T GetContainingNode(ITreeNode currentNode, bool returnCurrent);
    public sealed virtual IXmlTag GetParentTag(IXmlTag currentTag);
}
public class JetBrains.ReSharper.Psi.Xml.Parsing.DelegatingXmlElementFactory : object {
    [CompilerGeneratedAttribute]
private IXmlElementFactory <Factory>k__BackingField;
    [NotNullAttribute]
protected IXmlElementFactory Factory { get; }
    public PsiLanguageType LanguageType { get; }
    public XmlElementTypes XmlElementType { get; }
    public XmlTokenTypes XmlTokenTypes { get; }
    public DelegatingXmlElementFactory(IXmlElementFactory factory);
    [CompilerGeneratedAttribute]
protected IXmlElementFactory get_Factory();
    public sealed virtual PsiLanguageType get_LanguageType();
    public sealed virtual XmlElementTypes get_XmlElementType();
    public sealed virtual XmlTokenTypes get_XmlTokenTypes();
    public virtual IXmlFile CreateFile();
    public virtual IXmlTag CreateRootTag(IXmlTagHeader header, IXmlElementFactoryContext context);
    public virtual IXmlTag CreateTag(IXmlTagHeader header, IXmlTag parentTag, IXmlElementFactoryContext context);
    public virtual IXmlTagHeader CreateTagHeader(IXmlTagContainer parentTag, IXmlElementFactoryContext context);
    public virtual IXmlTagFooter CreateTagFooter(IXmlTagContainer parentTag, IXmlElementFactoryContext context);
    public virtual IXmlAttribute CreateAttribute(IXmlIdentifier nameIdentifier, IXmlAttributeContainer attributeContainer, IXmlTagContainer parentTag, IXmlElementFactoryContext context);
    public virtual IXmlIdentifier CreateIdentifier(ITokenIntern internalizer, XmlTokenNodeType tokenType, IBuffer buffer, int startOffset, int endOffset);
    public virtual IXmlToken CreateToken(ITokenIntern internalizer, XmlTokenNodeType tokenType, IBuffer buffer, int startOffset, int endOffset);
    public virtual IXmlAttributeValue CreateAttributeValue(XmlTokenNodeType tokenType, IBuffer buffer, int startOffset, int endOffset);
    public virtual IDocTypeDeclaration CreateDocTypeDeclaration();
    public virtual IProcessingInstruction CreatePI();
    public virtual IXmlProcessingInstruction CreatePIXml();
    public virtual IXmlCData CreateCData();
    public virtual IXmlComment CreateComment();
    public virtual IXmlSyntaxErrorElement CreateError(XmlSyntaxErrorType errorType);
    public virtual IExternalId CreateSystemExternalID();
    public virtual IExternalId CreatePublicExternalID();
    public virtual IDTDBody CreateIntSubset();
    public virtual IElementContent CreateSimpleContent();
    public virtual IDTDElementDecl CreateDTDElementDecl();
    public virtual IEmptyContent CreateEmptyContent();
    public virtual IAnyContent CreateAnyContent();
    public virtual IRepetitionContent CreateRepetionContent();
    public virtual IGrouppedContent CreateGrouppedContent();
    public virtual IDTDEntityDecl CreateDTDEntityDecl();
    public virtual IDTDNDataDecl CreateNDataDecl();
    public virtual IDTDNotationDecl CreateDTDNotationDecl();
    public virtual IDTDAttListDecl CreateDTDAttListDecl();
    public virtual IAttDef CreateAttDef();
    public virtual IAttType CreateAttType();
}
public interface JetBrains.ReSharper.Psi.Xml.Parsing.IXmlElementFactory {
    [NotNullAttribute]
public PsiLanguageType LanguageType { get; }
    [NotNullAttribute]
public XmlElementTypes XmlElementType { get; }
    [NotNullAttribute]
public XmlTokenTypes XmlTokenTypes { get; }
    public abstract virtual PsiLanguageType get_LanguageType();
    public abstract virtual XmlElementTypes get_XmlElementType();
    public abstract virtual XmlTokenTypes get_XmlTokenTypes();
    [NotNullAttribute]
public abstract virtual IXmlFile CreateFile();
    [NotNullAttribute]
public abstract virtual IXmlTag CreateRootTag(IXmlTagHeader header, IXmlElementFactoryContext context);
    [NotNullAttribute]
public abstract virtual IXmlTag CreateTag(IXmlTagHeader header, IXmlTag parentTag, IXmlElementFactoryContext context);
    [NotNullAttribute]
public abstract virtual IXmlTagHeader CreateTagHeader(IXmlTagContainer parentTag, IXmlElementFactoryContext context);
    [NotNullAttribute]
public abstract virtual IXmlTagFooter CreateTagFooter(IXmlTagContainer parentTag, IXmlElementFactoryContext context);
    [NotNullAttribute]
public abstract virtual IXmlAttribute CreateAttribute(IXmlIdentifier nameIdentifier, IXmlAttributeContainer attributeContainer, IXmlTagContainer parentTag, IXmlElementFactoryContext context);
    [NotNullAttribute]
public abstract virtual IXmlIdentifier CreateIdentifier(ITokenIntern internalizer, XmlTokenNodeType tokenType, IBuffer buffer, int startOffset, int endOffset);
    [NotNullAttribute]
public abstract virtual IXmlToken CreateToken(ITokenIntern internalizer, XmlTokenNodeType tokenType, IBuffer buffer, int startOffset, int endOffset);
    [NotNullAttribute]
public abstract virtual IXmlAttributeValue CreateAttributeValue(XmlTokenNodeType tokenType, IBuffer buffer, int startOffset, int endOffset);
    [NotNullAttribute]
public abstract virtual IDocTypeDeclaration CreateDocTypeDeclaration();
    [NotNullAttribute]
public abstract virtual IProcessingInstruction CreatePI();
    [NotNullAttribute]
public abstract virtual IXmlProcessingInstruction CreatePIXml();
    [NotNullAttribute]
public abstract virtual IXmlCData CreateCData();
    [NotNullAttribute]
public abstract virtual IXmlComment CreateComment();
    [NotNullAttribute]
public abstract virtual IXmlSyntaxErrorElement CreateError(XmlSyntaxErrorType errorType);
    [NotNullAttribute]
public abstract virtual IExternalId CreateSystemExternalID();
    [NotNullAttribute]
public abstract virtual IExternalId CreatePublicExternalID();
    [NotNullAttribute]
public abstract virtual IDTDBody CreateIntSubset();
    [NotNullAttribute]
public abstract virtual IElementContent CreateSimpleContent();
    [NotNullAttribute]
public abstract virtual IDTDElementDecl CreateDTDElementDecl();
    [NotNullAttribute]
public abstract virtual IEmptyContent CreateEmptyContent();
    [NotNullAttribute]
public abstract virtual IAnyContent CreateAnyContent();
    [NotNullAttribute]
public abstract virtual IRepetitionContent CreateRepetionContent();
    [NotNullAttribute]
public abstract virtual IGrouppedContent CreateGrouppedContent();
    [NotNullAttribute]
public abstract virtual IDTDEntityDecl CreateDTDEntityDecl();
    [NotNullAttribute]
public abstract virtual IDTDNDataDecl CreateNDataDecl();
    [NotNullAttribute]
public abstract virtual IDTDNotationDecl CreateDTDNotationDecl();
    [NotNullAttribute]
public abstract virtual IDTDAttListDecl CreateDTDAttListDecl();
    [NotNullAttribute]
public abstract virtual IAttDef CreateAttDef();
    [NotNullAttribute]
public abstract virtual IAttType CreateAttType();
}
public interface JetBrains.ReSharper.Psi.Xml.Parsing.IXmlElementFactoryContext {
    [CanBeNullAttribute]
public abstract virtual IXmlTag GetParentTag(IXmlTag currentTag);
    [CanBeNullAttribute]
public abstract virtual T GetContainingNode(ITreeNode currentNode, bool returnCurrent);
}
public interface JetBrains.ReSharper.Psi.Xml.Parsing.IXmlTreeBuilderContext {
}
public class JetBrains.ReSharper.Psi.Xml.Parsing.XmlElementFactory : object {
    [CanBeNullAttribute]
protected IPsiModule Module;
    [NotNullAttribute]
protected IXmlElementFactory Factory;
    [NotNullAttribute]
protected IXmlLanguageSupport Support;
    protected bool ApplyFormatter;
    protected XmlElementFactory(IPsiModule module, IXmlElementFactory factory, IXmlLanguageSupport support, bool applyFormatter);
    [NotNullAttribute]
public static XmlElementFactory GetInstance(ITreeNode context, bool applyFormatter);
    [NotNullAttribute]
public IXmlFile CreateFile(string xmlText);
    [NotNullAttribute]
private IXmlFile CreateFile(string xmlText, IXmlElementFactory factory);
    [NotNullAttribute]
public IXmlTag CreateRootTag(string tagText);
    [NotNullAttribute]
public IXmlAttribute CreateRootAttribute(string attributeText);
    [NotNullAttribute]
public IXmlTag CreateTagForTag(IXmlTag contextTag, string tagText, string rootTagText);
    [NotNullAttribute]
public IXmlAttribute CreateAttributeForTag(IXmlTag contextTag, string attributeText);
    [NotNullAttribute]
private static IXmlTag FindTag(IXmlTagContainer container, string tagText);
    [NotNullAttribute]
private static IXmlAttribute FindAttribute(IXmlTagContainer container, string attributeText);
}
public class JetBrains.ReSharper.Psi.Xml.Parsing.XmlElementFactory`1 : XmlElementFactory {
    protected XmlElementFactory`1(IPsiModule module, bool applyFormatter);
    [NotNullAttribute]
public static XmlElementFactory`1<TXmlLanguage> GetInstance(IPsiModule module, bool applyFormatter);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Psi.Xml.Parsing.XmlElementFactoryExtensions : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static IXmlFile CreateFileRaw(IXmlElementFactory factory, string xmlText, IXmlTreeBuilderContext context);
    [ExtensionAttribute]
[NotNullAttribute]
public static IXmlAttribute CreateAttributeRaw(IXmlElementFactory factory, string attributeText);
}
public class JetBrains.ReSharper.Psi.Xml.Parsing.XmlTreeBuilder : object {
    private ITokenIntern myInternalizer;
    private IXmlElementFactory myFactory;
    private IXmlElementFactoryContext myFactoryContext;
    private MyBuilderLexer myLexer;
    private bool myIsPushedBack;
    private NodeTypeSet myEndOfTagHeaderTokens;
    private NodeTypeSet myStopAttrsToken;
    private NodeTypeSet DEFAULT_VALUE_TOKENS;
    private NodeTypeSet ATTRIBUTE_TYPE_STOPPERS;
    private NodeTypeSet TAG_END_STOPPER;
    private NodeTypeSet LBRACKET_STOPPERS;
    private NodeTypeSet LPARENTH_STOPPERS;
    private NodeTypeSet DTD_DECL_STOPPERS;
    private NodeTypeSet STRING_STOPPERS;
    private NodeTypeSet IDENTIFIER_STOPPERS;
    protected XmlTokenTypes XmlTokenTypes { get; }
    protected XmlElementTypes XmlElementTypes { get; }
    protected IXmlElementFactory XmlElementFactory { get; }
    private XmlTokenNodeType CurrentToken { get; }
    private int CurrentTokenStart { get; }
    private int CurrentTokenEnd { get; }
    public XmlTreeBuilder(IXmlElementFactory elementFactory, IXmlElementFactoryContext factoryContext, ITokenIntern intern);
    protected XmlTokenTypes get_XmlTokenTypes();
    protected XmlElementTypes get_XmlElementTypes();
    protected IXmlElementFactory get_XmlElementFactory();
    public IXmlFile BuildXml(IProjectFile file, DocumentManager documentManager);
    [NotNullAttribute]
public IXmlFile BuildXml(IBuffer buffer);
    [NotNullAttribute]
public IXmlFile BuildXml(ILexer lexer);
    [NotNullAttribute]
public IDTDFile BuildDTD(ILexer lexer);
    private XmlTokenNodeType get_CurrentToken();
    private int get_CurrentTokenStart();
    private int get_CurrentTokenEnd();
    private XmlTokenNodeType GetNextToken();
    private void PushBack();
    private void AppendNewChild(ITreeNode parent, ITreeNode child);
    protected virtual void AppendNewChild(IXmlAttribute parent, IXmlAttributeValue child);
    protected virtual void AppendNewChild(ITreeNode parent, IXmlComment comment);
    protected void CreateError(ITreeNode compositeElement, XmlSyntaxErrorType errorType, ITreeNode child);
    private IXmlToken CreateCurrentToken();
    private string GetCurrentTokenText();
    [NotNullAttribute]
private IXmlFile ParseXml();
    private IExternalId TryParseExternalId(ITreeNode parent, bool publicRequires2Params, NodeTypeSet stoppers);
    private IDocTypeDeclaration ParseDTD(TokenNodeType token);
    private IDTDBody ParseIntSubset();
    [CanBeNullAttribute]
private TokenNodeType ReadToken(ITreeNode parent, NodeTypeSet expectedTokens, NodeTypeSet stoppers);
    [CanBeNullAttribute]
private TokenNodeType ReadToken(ITreeNode parent, TokenNodeType expectedToken, NodeTypeSet stoppers);
    [CanBeNullAttribute]
private TokenNodeType ReadToken(ITreeNode parent, String[] expectedStrings, NodeTypeSet stoppers);
    private bool EatToken(ITreeNode parent, TokenNodeType expectedToken, NodeTypeSet stoppers);
    protected virtual void OnTagContainerCreated(IXmlTagContainer container);
    private IXmlProcessingInstruction ParseXmlPI(IXmlProcessingInstruction pi, IXmlTagContainer parentTag);
    private IXmlComment ParseComment();
    private void CheckInterrupted();
    private IXmlCData ParseCData();
    private ITreeNode ParsePI(ITreeNode parent);
    private IXmlTagFooter ParseTagFooter(IXmlTagContainer parentTag);
    private IXmlTagHeader ParseTagHeader(IXmlTagContainer parentTag);
    private IXmlIdentifier CreateCurrentIdentifier();
    private bool IsEndOfTagToken(NodeType type);
    private void ParseTagAttributes(XmlAttributeContainer header, IXmlTagContainer parentTag);
    private void CheckAttributeValidity(IXmlAttribute attr);
    private void ParseDTDBody(ITreeNode parent, TokenNodeType stopToken);
    private IDTDAttListDecl ParseAttListDecl();
    private IAttDef ParseAttDef(IDTDAttListDecl parent);
    private IDTDNotationDecl ParseNotationDecl();
    private IDTDEntityDecl ParseEntityDecl();
    private IDTDElementDecl ParseElementDecl();
    [CanBeNullAttribute]
private IElementContent ParseContent();
    private IGrouppedContent ParseGrouppedContent();
}
public class JetBrains.ReSharper.Psi.Xml.Parsing.XmlTreeBuilderContext : object {
    public static XmlTreeBuilderContext Instance;
    private static XmlTreeBuilderContext();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xml.XmlLanguage", "16")]
public class JetBrains.ReSharper.Psi.Xml.Parsing.XmlTreeNodeFactory : object {
    [CompilerGeneratedAttribute]
private PsiLanguageType <LanguageType>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlElementTypes <XmlElementType>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlTokenTypes <XmlTokenTypes>k__BackingField;
    public PsiLanguageType LanguageType { get; }
    public XmlElementTypes XmlElementType { get; }
    public XmlTokenTypes XmlTokenTypes { get; }
    public XmlTreeNodeFactory(XmlLanguage languageType, XmlTokenTypes tokenTypes, XmlElementTypes elementTypes);
    [NotNullAttribute]
public static IXmlElementFactory GetInstance();
    [NotNullAttribute]
public static IXmlElementFactory GetInstance(ITreeNode element);
    [CompilerGeneratedAttribute]
public sealed virtual PsiLanguageType get_LanguageType();
    [CompilerGeneratedAttribute]
public sealed virtual XmlElementTypes get_XmlElementType();
    [CompilerGeneratedAttribute]
public sealed virtual XmlTokenTypes get_XmlTokenTypes();
    public virtual IXmlFile CreateFile();
    public virtual IXmlTag CreateRootTag(IXmlTagHeader header, IXmlElementFactoryContext context);
    public virtual IXmlTag CreateTag(IXmlTagHeader header, IXmlTag parentTag, IXmlElementFactoryContext context);
    public virtual IXmlTagHeader CreateTagHeader(IXmlTagContainer parentTag, IXmlElementFactoryContext context);
    public virtual IXmlTagFooter CreateTagFooter(IXmlTagContainer parentTag, IXmlElementFactoryContext context);
    public virtual IXmlAttribute CreateAttribute(IXmlIdentifier nameIdentifier, IXmlAttributeContainer attributeContainer, IXmlTagContainer parentTag, IXmlElementFactoryContext context);
    public virtual IXmlIdentifier CreateIdentifier(ITokenIntern internalizer, XmlTokenNodeType tokenType, IBuffer buffer, int startOffset, int endOffset);
    public virtual IXmlToken CreateToken(ITokenIntern internalizer, XmlTokenNodeType tokenType, IBuffer buffer, int startOffset, int endOffset);
    public virtual IXmlAttributeValue CreateAttributeValue(XmlTokenNodeType tokenType, IBuffer buffer, int startOffset, int endOffset);
    public virtual IDocTypeDeclaration CreateDocTypeDeclaration();
    public virtual IProcessingInstruction CreatePI();
    public sealed virtual IXmlProcessingInstruction CreatePIXml();
    public virtual IXmlCData CreateCData();
    public virtual IXmlComment CreateComment();
    public virtual IXmlSyntaxErrorElement CreateError(XmlSyntaxErrorType errorType);
    public virtual IExternalId CreateSystemExternalID();
    public virtual IExternalId CreatePublicExternalID();
    public virtual IDTDBody CreateIntSubset();
    public sealed virtual IElementContent CreateSimpleContent();
    public sealed virtual IDTDElementDecl CreateDTDElementDecl();
    public sealed virtual IEmptyContent CreateEmptyContent();
    public sealed virtual IAnyContent CreateAnyContent();
    public sealed virtual IRepetitionContent CreateRepetionContent();
    public sealed virtual IGrouppedContent CreateGrouppedContent();
    public sealed virtual IDTDEntityDecl CreateDTDEntityDecl();
    public sealed virtual IDTDNDataDecl CreateNDataDecl();
    public sealed virtual IDTDNotationDecl CreateDTDNotationDecl();
    public sealed virtual IDTDAttListDecl CreateDTDAttListDecl();
    public sealed virtual IAttDef CreateAttDef();
    public sealed virtual IAttType CreateAttType();
}
public class JetBrains.ReSharper.Psi.Xml.Resources.PsiXmlThemedIcons : object {
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public static class JetBrains.ReSharper.Psi.Xml.Resources.Strings : object {
    private static ILogger ourLog;
    private static Lazy`1<JetResourceManager> ourResourceManager;
    [EditorBrowsableAttribute("2")]
public static JetResourceManager ResourceManager { get; }
    public static string AttributesFormatSettingDescription { get; }
    public static string AttributesIndentingSettingDescription { get; }
    public static string BlankLineAfterProcessingInstructionsSettingDescription { get; }
    public static string CodeFormattingInXMLDocumentationSettingDescription { get; }
    public static string CodeFormattingInXMLSettingDescription { get; }
    public static string IgnoreSpacePreservationSettingDescription { get; }
    public static string IndentInsideElementThatContainTextSettingDescription { get; }
    public static string IndentInsideElementThatDoesntContainTextSettingDescription { get; }
    public static string KeepExistingLineBreaksSettingDescription { get; }
    public static string LineBreaksAfterStartTagAndBeforeEndTagInElementsThatContainOtherElementsAndNoTextSettingDescription { get; }
    public static string LineBreaksAfterStartTagAndBeforeEndTagInMultilineElementsSettingDescription { get; }
    public static string LineBreaksAfterStartTagAndBeforeEndTagWhenElementIsLongerThanSettingDescription { get; }
    public static string MaximumBlankLinesBetweenTagsSettingDescription { get; }
    public static string PlaceMultilineElementsOnNewLineSettingDescription { get; }
    public static string PlaceSinglelineElementsOnNewLineSettingDescription { get; }
    public static string PlaceTheseElementsOnNewLineRegardlessSettingDescription { get; }
    public static string RightMarginColumnsSettingDescription { get; }
    public static string SpaceAfterLastAttributeSettingDescription { get; }
    public static string SpaceAfterSettingDescription { get; }
    public static string SpaceBeforeSettingDescription { get; }
    public static string SpacesAfterStartTagAndBeforeEndTagOtherwiseSettingDescription { get; }
    public static string SpacesAroundInAttributeSettingDescription { get; }
    public static string WrapBeforeAndAfterElementsSettingDescription { get; }
    public static string WrapInsideTextSettingDescription { get; }
    public static string WrapLongLinesSettingDescription { get; }
    public static string WrapTagsAndProcessingInstructionsSettingDescription { get; }
    public static string XMLDocFormatterPredefinedSettings_Text { get; }
    public static string Formatting_Text { get; }
    public static string NamespaceExpected_ToolTip { get; }
    public static string TypeExpected_ToolTip { get; }
    public static string AmbiguousReference_ToolTip { get; }
    public static string InvalidTagHeader_Text { get; }
    public static string InvalidClosingTag_Text { get; }
    public static string NoOpenTagFound_Text { get; }
    public static string IdentifierExpected_Text { get; }
    public static string UnexpectedToken_Text { get; }
    public static string AttributeExpectedAfterComma_Text { get; }
    public static string AttributeNameExpected_Text { get; }
    public static string AttributeValueExpected_Text { get; }
    public static string ElementContentExpected_Text { get; }
    public static string EntityValueExpected_Text { get; }
    public static string DefaultValueExpected_Text { get; }
    public static string AlignByFirstAttribute_Description_Text { get; }
    public static string DoNotChangeIndenting_Description_Text { get; }
    public static string DoNotTouch_Description_Text { get; }
    public static string DoubleIndent_Description_Text { get; }
    public static string EachAttributeOnSeparateLines_Description_Text { get; }
    public static string FirstAttributeOnSingleLine_Description_Text { get; }
    public static string NoIndentAtAll_Description_Text { get; }
    public static string NoIndentFromParentElement_Description_Text { get; }
    public static string OneIndentFromParentElement_Description_Text { get; }
    public static string OnSingleLine_Description_Text { get; }
    public static string SingleIndent_Description_Text { get; }
    public static string SymbolExpectedOr_Text { get; }
    public static string SymbolExpected_Text { get; }
    private static Strings();
    public static JetResourceManager get_ResourceManager();
    public static string Choice(string format, Object[] args);
    public static string get_AttributesFormatSettingDescription();
    public static string get_AttributesIndentingSettingDescription();
    public static string get_BlankLineAfterProcessingInstructionsSettingDescription();
    public static string get_CodeFormattingInXMLDocumentationSettingDescription();
    public static string get_CodeFormattingInXMLSettingDescription();
    public static string get_IgnoreSpacePreservationSettingDescription();
    public static string get_IndentInsideElementThatContainTextSettingDescription();
    public static string get_IndentInsideElementThatDoesntContainTextSettingDescription();
    public static string get_KeepExistingLineBreaksSettingDescription();
    public static string get_LineBreaksAfterStartTagAndBeforeEndTagInElementsThatContainOtherElementsAndNoTextSettingDescription();
    public static string get_LineBreaksAfterStartTagAndBeforeEndTagInMultilineElementsSettingDescription();
    public static string get_LineBreaksAfterStartTagAndBeforeEndTagWhenElementIsLongerThanSettingDescription();
    public static string get_MaximumBlankLinesBetweenTagsSettingDescription();
    public static string get_PlaceMultilineElementsOnNewLineSettingDescription();
    public static string get_PlaceSinglelineElementsOnNewLineSettingDescription();
    public static string get_PlaceTheseElementsOnNewLineRegardlessSettingDescription();
    public static string get_RightMarginColumnsSettingDescription();
    public static string get_SpaceAfterLastAttributeSettingDescription();
    public static string get_SpaceAfterSettingDescription();
    public static string get_SpaceBeforeSettingDescription();
    public static string get_SpacesAfterStartTagAndBeforeEndTagOtherwiseSettingDescription();
    public static string get_SpacesAroundInAttributeSettingDescription();
    public static string get_WrapBeforeAndAfterElementsSettingDescription();
    public static string get_WrapInsideTextSettingDescription();
    public static string get_WrapLongLinesSettingDescription();
    public static string get_WrapTagsAndProcessingInstructionsSettingDescription();
    public static string get_XMLDocFormatterPredefinedSettings_Text();
    public static string get_Formatting_Text();
    public static string get_NamespaceExpected_ToolTip();
    public static string get_TypeExpected_ToolTip();
    public static string get_AmbiguousReference_ToolTip();
    public static string get_InvalidTagHeader_Text();
    public static string get_InvalidClosingTag_Text();
    public static string get_NoOpenTagFound_Text();
    public static string get_IdentifierExpected_Text();
    public static string get_UnexpectedToken_Text();
    public static string get_AttributeExpectedAfterComma_Text();
    public static string get_AttributeNameExpected_Text();
    public static string get_AttributeValueExpected_Text();
    public static string get_ElementContentExpected_Text();
    public static string get_EntityValueExpected_Text();
    public static string get_DefaultValueExpected_Text();
    public static string get_AlignByFirstAttribute_Description_Text();
    public static string get_DoNotChangeIndenting_Description_Text();
    public static string get_DoNotTouch_Description_Text();
    public static string get_DoubleIndent_Description_Text();
    public static string get_EachAttributeOnSeparateLines_Description_Text();
    public static string get_FirstAttributeOnSingleLine_Description_Text();
    public static string get_NoIndentAtAll_Description_Text();
    public static string get_NoIndentFromParentElement_Description_Text();
    public static string get_OneIndentFromParentElement_Description_Text();
    public static string get_OnSingleLine_Description_Text();
    public static string get_SingleIndent_Description_Text();
    public static string get_SymbolExpectedOr_Text();
    public static string get_SymbolExpected_Text();
}
public enum JetBrains.ReSharper.Psi.Xml.Tree.AttType : Enum {
    public int value__;
    public static AttType CDATA;
    public static AttType ID;
    public static AttType IDREF;
    public static AttType IDREFS;
    public static AttType ENTITY;
    public static AttType ENTITIES;
    public static AttType NMTOKEN;
    public static AttType NMTOKENS;
    public static AttType NOTATION;
    public static AttType ENUMERATION;
    public static AttType UNKNOWN;
}
public enum JetBrains.ReSharper.Psi.Xml.Tree.GroupType : Enum {
    public int value__;
    public static GroupType SEQUENCE;
    public static GroupType CHOICE;
}
public interface JetBrains.ReSharper.Psi.Xml.Tree.IAnyContent {
}
public interface JetBrains.ReSharper.Psi.Xml.Tree.IAttDef {
    [NotNullAttribute]
public string Name { get; }
    [CanBeNullAttribute]
public IAttType AttributeType { get; }
    public abstract virtual string get_Name();
    public abstract virtual IAttType get_AttributeType();
}
public interface JetBrains.ReSharper.Psi.Xml.Tree.IAttType {
    public AttType AttType { get; }
    [NotNullAttribute]
public IEnumerable`1<string> Types { get; }
    [CanBeNullAttribute]
public IXmlLparenthTokenNode LPar { get; }
    [CanBeNullAttribute]
public IXmlRparenthTokenNode RPar { get; }
    public abstract virtual AttType get_AttType();
    public abstract virtual IEnumerable`1<string> get_Types();
    public abstract virtual IXmlLparenthTokenNode get_LPar();
    public abstract virtual IXmlRparenthTokenNode get_RPar();
}
public interface JetBrains.ReSharper.Psi.Xml.Tree.IDocTypeDeclaration {
    [NotNullAttribute]
public IXmlDtdStartTokenNode Start { get; }
    [CanBeNullAttribute]
public IXmlTagEndTokenNode End { get; }
    [CanBeNullAttribute]
public IExternalId ExternalId { get; }
    [CanBeNullAttribute]
public IDTDBody IntSubset { get; }
    public abstract virtual IXmlDtdStartTokenNode get_Start();
    public abstract virtual IXmlTagEndTokenNode get_End();
    public abstract virtual IExternalId get_ExternalId();
    public abstract virtual IDTDBody get_IntSubset();
}
public interface JetBrains.ReSharper.Psi.Xml.Tree.IDTDAttListDecl {
    [NotNullAttribute]
public IXmlAttlistStartTokenNode Start { get; }
    [CanBeNullAttribute]
public IXmlTagEndTokenNode End { get; }
    [NotNullAttribute]
public string ElementName { get; }
    public TreeNodeCollection`1<IAttDef> AttDefs { get; }
    public abstract virtual IXmlAttlistStartTokenNode get_Start();
    public abstract virtual IXmlTagEndTokenNode get_End();
    public abstract virtual string get_ElementName();
    public abstract virtual TreeNodeCollection`1<IAttDef> get_AttDefs();
}
public interface JetBrains.ReSharper.Psi.Xml.Tree.IDTDBody {
    [CanBeNullAttribute]
public IXmlLbracketTokenNode LBracket { get; }
    [CanBeNullAttribute]
public IXmlRbracketTokenNode RBracket { get; }
    public abstract virtual IXmlLbracketTokenNode get_LBracket();
    public abstract virtual IXmlRbracketTokenNode get_RBracket();
}
public interface JetBrains.ReSharper.Psi.Xml.Tree.IDTDElementDecl {
    [NotNullAttribute]
public IXmlElementStartTokenNode Start { get; }
    [CanBeNullAttribute]
public IXmlTagEndTokenNode End { get; }
    [NotNullAttribute]
public string Name { get; }
    [CanBeNullAttribute]
public IElementContent ContentSpec { get; }
    public abstract virtual IXmlElementStartTokenNode get_Start();
    public abstract virtual IXmlTagEndTokenNode get_End();
    public abstract virtual string get_Name();
    public abstract virtual IElementContent get_ContentSpec();
}
public interface JetBrains.ReSharper.Psi.Xml.Tree.IDTDEntityDecl {
    [NotNullAttribute]
public IXmlEntityStartTokenNode Start { get; }
    [CanBeNullAttribute]
public IXmlTagEndTokenNode End { get; }
    [NotNullAttribute]
public string Name { get; }
    [NotNullAttribute]
public string Value { get; }
    public abstract virtual IXmlEntityStartTokenNode get_Start();
    public abstract virtual IXmlTagEndTokenNode get_End();
    public abstract virtual string get_Name();
    public abstract virtual string get_Value();
}
public interface JetBrains.ReSharper.Psi.Xml.Tree.IDTDFile {
}
public interface JetBrains.ReSharper.Psi.Xml.Tree.IDTDNDataDecl {
    [NotNullAttribute]
public string Name { get; }
    public abstract virtual string get_Name();
}
public interface JetBrains.ReSharper.Psi.Xml.Tree.IDTDNotationDecl {
    [NotNullAttribute]
public IXmlNotationStartTokenNode Start { get; }
    [CanBeNullAttribute]
public IXmlTagEndTokenNode End { get; }
    [NotNullAttribute]
public string Name { get; }
    public abstract virtual IXmlNotationStartTokenNode get_Start();
    public abstract virtual IXmlTagEndTokenNode get_End();
    public abstract virtual string get_Name();
}
public interface JetBrains.ReSharper.Psi.Xml.Tree.IElementContent {
}
public interface JetBrains.ReSharper.Psi.Xml.Tree.IEmptyContent {
}
public interface JetBrains.ReSharper.Psi.Xml.Tree.IExternalId {
}
public interface JetBrains.ReSharper.Psi.Xml.Tree.IGrouppedContent {
    public TreeNodeCollection`1<IElementContent> Items { get; }
    [CanBeNullAttribute]
public IXmlLparenthTokenNode LPar { get; }
    [CanBeNullAttribute]
public IXmlRparenthTokenNode RPar { get; }
    public abstract virtual TreeNodeCollection`1<IElementContent> get_Items();
    public abstract virtual IXmlLparenthTokenNode get_LPar();
    public abstract virtual IXmlRparenthTokenNode get_RPar();
}
public interface JetBrains.ReSharper.Psi.Xml.Tree.IProcessingInstruction {
    [NotNullAttribute]
public IXmlToken Start { get; }
    [CanBeNullAttribute]
public IXmlToken Body { get; }
    [CanBeNullAttribute]
public IXmlToken End { get; }
    [CanBeNullAttribute]
public IXmlIdentifier InstructionTargetNode { get; }
    [NotNullAttribute]
public string InstructionTarget { get; }
    public abstract virtual IXmlToken get_Start();
    public abstract virtual IXmlToken get_Body();
    public abstract virtual IXmlToken get_End();
    public abstract virtual IXmlIdentifier get_InstructionTargetNode();
    public abstract virtual string get_InstructionTarget();
}
public interface JetBrains.ReSharper.Psi.Xml.Tree.IPublicExternalId {
}
public interface JetBrains.ReSharper.Psi.Xml.Tree.IRepetitionContent {
    [CanBeNullAttribute]
public IElementContent Content { get; }
    public RepetitionType RepetitionType { get; }
    public abstract virtual IElementContent get_Content();
    public abstract virtual RepetitionType get_RepetitionType();
}
public interface JetBrains.ReSharper.Psi.Xml.Tree.ISimpleContent {
}
public interface JetBrains.ReSharper.Psi.Xml.Tree.ISystemExternalId {
}
public interface JetBrains.ReSharper.Psi.Xml.Tree.IXmlAsteriskTokenNode {
}
public interface JetBrains.ReSharper.Psi.Xml.Tree.IXmlAttlistStartTokenNode {
}
public interface JetBrains.ReSharper.Psi.Xml.Tree.IXmlAttribute {
    [NotNullAttribute]
public IXmlIdentifier Identifier { get; }
    [NotNullAttribute]
public string XmlNamespace { get; }
    [NotNullAttribute]
public string XmlName { get; }
    public TreeTextRange XmlNamespaceRange { get; }
    public TreeTextRange XmlNameRange { get; }
    [CanBeNullAttribute]
public IXmlToken Eq { get; }
    [NotNullAttribute]
public string AttributeName { get; }
    [CanBeNullAttribute]
public IXmlAttributeValue Value { get; }
    [NotNullAttribute]
public string UnquotedValue { get; }
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use Identifier property instead")]
[NotNullAttribute]
public IXmlIdentifier NameNode { get; }
    public abstract virtual IXmlIdentifier get_Identifier();
    public abstract virtual string get_XmlNamespace();
    public abstract virtual string get_XmlName();
    public abstract virtual TreeTextRange get_XmlNamespaceRange();
    public abstract virtual TreeTextRange get_XmlNameRange();
    public abstract virtual IXmlToken get_Eq();
    public abstract virtual string get_AttributeName();
    public abstract virtual IXmlAttributeValue get_Value();
    public abstract virtual string get_UnquotedValue();
    public abstract virtual IXmlIdentifier get_NameNode();
}
public interface JetBrains.ReSharper.Psi.Xml.Tree.IXmlAttributeContainer {
    [NotNullAttribute]
public string ContainerName { get; }
    public TreeNodeCollection`1<IXmlAttribute> Attributes { get; }
    public TreeNodeEnumerable`1<IXmlAttribute> AttributesEnumerable { get; }
    public abstract virtual string get_ContainerName();
    public abstract virtual TreeNodeCollection`1<IXmlAttribute> get_Attributes();
    public abstract virtual TreeNodeEnumerable`1<IXmlAttribute> get_AttributesEnumerable();
}
public interface JetBrains.ReSharper.Psi.Xml.Tree.IXmlAttributeValue {
    [CanBeNullAttribute]
public IXmlValueToken ValueToken { get; }
    [NotNullAttribute]
public string UnquotedValue { get; }
    public abstract virtual IXmlValueToken get_ValueToken();
    public abstract virtual string get_UnquotedValue();
}
public interface JetBrains.ReSharper.Psi.Xml.Tree.IXmlCData {
    [NotNullAttribute]
public IXmlToken Start { get; }
    [CanBeNullAttribute]
public IXmlToken Body { get; }
    [CanBeNullAttribute]
public IXmlToken End { get; }
    [NotNullAttribute]
public string CData { get; }
    public abstract virtual IXmlToken get_Start();
    public abstract virtual IXmlToken get_Body();
    public abstract virtual IXmlToken get_End();
    public abstract virtual string get_CData();
}
public interface JetBrains.ReSharper.Psi.Xml.Tree.IXmlCdataEndTokenNode {
}
public interface JetBrains.ReSharper.Psi.Xml.Tree.IXmlCdataStartTokenNode {
}
public interface JetBrains.ReSharper.Psi.Xml.Tree.IXmlCommaTokenNode {
}
public interface JetBrains.ReSharper.Psi.Xml.Tree.IXmlComment {
}
public interface JetBrains.ReSharper.Psi.Xml.Tree.IXmlCommentEndTokenNode {
}
public interface JetBrains.ReSharper.Psi.Xml.Tree.IXmlCommentNode {
    [NotNullAttribute]
public IXmlToken CommentStart { get; }
    [CanBeNullAttribute]
public IXmlToken CommentBody { get; }
    [CanBeNullAttribute]
public IXmlToken CommentEnd { get; }
    public abstract virtual IXmlToken get_CommentStart();
    public abstract virtual IXmlToken get_CommentBody();
    public abstract virtual IXmlToken get_CommentEnd();
}
public interface JetBrains.ReSharper.Psi.Xml.Tree.IXmlCommentStartTokenNode {
}
public interface JetBrains.ReSharper.Psi.Xml.Tree.IXmlDocumentNode {
}
public interface JetBrains.ReSharper.Psi.Xml.Tree.IXmlDtdStartTokenNode {
}
public interface JetBrains.ReSharper.Psi.Xml.Tree.IXmlElementStartTokenNode {
}
public interface JetBrains.ReSharper.Psi.Xml.Tree.IXmlEntityStartTokenNode {
}
public interface JetBrains.ReSharper.Psi.Xml.Tree.IXmlEntityTokenNode {
    public bool IsNumericEntity { get; }
    [CanBeNullAttribute]
public string Name { get; }
    public abstract virtual bool get_IsNumericEntity();
    public abstract virtual string get_Name();
}
public interface JetBrains.ReSharper.Psi.Xml.Tree.IXmlEqTokenNode {
}
public interface JetBrains.ReSharper.Psi.Xml.Tree.IXmlFile {
    [NotNullAttribute]
public XmlElementTypes XmlElementTypes { get; }
    public TreeNodeCollection`1<IProcessingInstruction> ProcessingInstructions { get; }
    public TreeNodeCollection`1<IXmlProcessingInstruction> XmlProcessingInstructions { get; }
    public abstract virtual XmlElementTypes get_XmlElementTypes();
    public abstract virtual TreeNodeCollection`1<IProcessingInstruction> get_ProcessingInstructions();
    public abstract virtual TreeNodeCollection`1<IXmlProcessingInstruction> get_XmlProcessingInstructions();
}
public interface JetBrains.ReSharper.Psi.Xml.Tree.IXmlFixedTokenNode {
}
public interface JetBrains.ReSharper.Psi.Xml.Tree.IXmlFloatingTextTokenNode {
}
public interface JetBrains.ReSharper.Psi.Xml.Tree.IXmlIdentifier {
    [NotNullAttribute]
public string XmlNamespace { get; }
    [NotNullAttribute]
public string XmlName { get; }
    public TreeTextRange XmlNamespaceRange { get; }
    public TreeTextRange XmlNameRange { get; }
    public abstract virtual string get_XmlNamespace();
    public abstract virtual string get_XmlName();
    public abstract virtual TreeTextRange get_XmlNamespaceRange();
    public abstract virtual TreeTextRange get_XmlNameRange();
}
public interface JetBrains.ReSharper.Psi.Xml.Tree.IXmlImpliedTokenNode {
}
public interface JetBrains.ReSharper.Psi.Xml.Tree.IXmlLbracketTokenNode {
}
public interface JetBrains.ReSharper.Psi.Xml.Tree.IXmlLparenthTokenNode {
}
public interface JetBrains.ReSharper.Psi.Xml.Tree.IXmlNotationStartTokenNode {
}
public interface JetBrains.ReSharper.Psi.Xml.Tree.IXmlOrTokenNode {
}
public interface JetBrains.ReSharper.Psi.Xml.Tree.IXmlPercentTokenNode {
}
public interface JetBrains.ReSharper.Psi.Xml.Tree.IXmlPiendTokenNode {
}
public interface JetBrains.ReSharper.Psi.Xml.Tree.IXmlPistartTokenNode {
}
public interface JetBrains.ReSharper.Psi.Xml.Tree.IXmlPlusTokenNode {
}
public interface JetBrains.ReSharper.Psi.Xml.Tree.IXmlProcessingInstruction {
    [NotNullAttribute]
public IXmlToken StartNode { get; }
    [NotNullAttribute]
public IXmlIdentifier Name { get; }
    [CanBeNullAttribute]
public IXmlToken EndNode { get; }
    public abstract virtual IXmlToken get_StartNode();
    public abstract virtual IXmlIdentifier get_Name();
    public abstract virtual IXmlToken get_EndNode();
}
public interface JetBrains.ReSharper.Psi.Xml.Tree.IXmlQuestionTokenNode {
}
public interface JetBrains.ReSharper.Psi.Xml.Tree.IXmlRbracketTokenNode {
}
public interface JetBrains.ReSharper.Psi.Xml.Tree.IXmlRequiredTokenNode {
}
public interface JetBrains.ReSharper.Psi.Xml.Tree.IXmlRparenthTokenNode {
}
public interface JetBrains.ReSharper.Psi.Xml.Tree.IXmlSyntaxErrorElement {
    public string ErrorDescription { get; }
    [NotNullAttribute]
public XmlSyntaxErrorType ErrorType { get; }
    public abstract virtual string get_ErrorDescription();
    public abstract virtual XmlSyntaxErrorType get_ErrorType();
}
public interface JetBrains.ReSharper.Psi.Xml.Tree.IXmlTag {
    [NotNullAttribute]
public IXmlTagHeader Header { get; }
    [CanBeNullAttribute]
public IXmlTagFooter Footer { get; }
    public bool IsEmptyTag { get; }
    [NotNullAttribute]
public ITreeRange InnerXml { get; }
    public TreeNodeCollection`1<IXmlToken> InnerTextTokens { get; }
    [NotNullAttribute]
public string InnerText { get; }
    [NotNullAttribute]
public string InnerValue { get; }
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use Header property instead")]
[NotNullAttribute]
public IXmlTagHeader HeaderNode { get; }
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use Footer property instead")]
[CanBeNullAttribute]
public IXmlTagFooter FooterNode { get; }
    public abstract virtual IXmlTagHeader get_Header();
    public abstract virtual IXmlTagFooter get_Footer();
    public abstract virtual bool get_IsEmptyTag();
    public abstract virtual ITreeRange get_InnerXml();
    public abstract virtual TreeNodeCollection`1<IXmlToken> get_InnerTextTokens();
    public abstract virtual string get_InnerText();
    public abstract virtual string get_InnerValue();
    [NotNullAttribute]
public abstract virtual TXmlAttribute AddAttributeBefore(TXmlAttribute attribute, IXmlAttribute anchor);
    [NotNullAttribute]
public abstract virtual TXmlAttribute AddAttributeAfter(TXmlAttribute attribute, IXmlAttribute anchor);
    public abstract virtual void RemoveAttribute(IXmlAttribute attribute);
    public abstract virtual IXmlTagHeader get_HeaderNode();
    public abstract virtual IXmlTagFooter get_FooterNode();
}
public interface JetBrains.ReSharper.Psi.Xml.Tree.IXmlTagContainer {
    public TreeNodeCollection`1<IXmlTag> InnerTags { get; }
    public abstract virtual TreeNodeCollection`1<IXmlTag> get_InnerTags();
    [CanBeNullAttribute]
public abstract virtual IXmlTag GetTag(Predicate`1<IXmlTag> predicate);
    public abstract virtual TreeNodeEnumerable`1<T> GetTags();
    public abstract virtual TreeNodeCollection`1<T> GetTags2();
    public abstract virtual IList`1<T> GetNestedTags(string xpath);
    [NotNullAttribute]
public abstract virtual TXmlTag AddTagBefore(TXmlTag tag, IXmlTag anchor);
    [NotNullAttribute]
public abstract virtual TXmlTag AddTagAfter(TXmlTag tag, IXmlTag anchor);
    public abstract virtual void RemoveTag(IXmlTag tag);
}
public interface JetBrains.ReSharper.Psi.Xml.Tree.IXmlTagEnd1TokenNode {
}
public interface JetBrains.ReSharper.Psi.Xml.Tree.IXmlTagEndTokenNode {
}
public interface JetBrains.ReSharper.Psi.Xml.Tree.IXmlTagFooter {
    [NotNullAttribute]
public IXmlToken StartNode { get; }
    [NotNullAttribute]
public IXmlIdentifier Name { get; }
    [CanBeNullAttribute]
public IXmlToken EndNode { get; }
    public abstract virtual IXmlToken get_StartNode();
    public abstract virtual IXmlIdentifier get_Name();
    public abstract virtual IXmlToken get_EndNode();
}
public interface JetBrains.ReSharper.Psi.Xml.Tree.IXmlTagHeader {
    [NotNullAttribute]
public IXmlToken StartNode { get; }
    [CanBeNullAttribute]
public IXmlToken EndNode { get; }
    [NotNullAttribute]
public IXmlIdentifier Name { get; }
    public bool IsClosed { get; }
    public abstract virtual IXmlToken get_StartNode();
    public abstract virtual IXmlToken get_EndNode();
    public abstract virtual IXmlIdentifier get_Name();
    public abstract virtual bool get_IsClosed();
}
public interface JetBrains.ReSharper.Psi.Xml.Tree.IXmlTagStart1TokenNode {
}
public interface JetBrains.ReSharper.Psi.Xml.Tree.IXmlTagStartTokenNode {
}
public interface JetBrains.ReSharper.Psi.Xml.Tree.IXmlToken {
    [NotNullAttribute]
public abstract virtual XmlTokenNodeType GetTokenType();
}
public interface JetBrains.ReSharper.Psi.Xml.Tree.IXmlTreeNode {
    [NotNullAttribute]
public XmlTokenTypes XmlTokenTypes { get; }
    public abstract virtual XmlTokenTypes get_XmlTokenTypes();
    public abstract virtual TReturn AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
}
public interface JetBrains.ReSharper.Psi.Xml.Tree.IXmlTreeVisitor`2 {
    public abstract virtual TReturn Visit(IXmlFile file, TContext context);
    public abstract virtual TReturn Visit(IXmlDocumentNode document, TContext context);
    public abstract virtual TReturn Visit(IProcessingInstruction instruction, TContext context);
    public abstract virtual TReturn Visit(IXmlProcessingInstruction processingInstruction, TContext context);
    public abstract virtual TReturn Visit(IXmlAttribute attribute, TContext context);
    public abstract virtual TReturn Visit(IXmlAttributeValue attribute, TContext context);
    public abstract virtual TReturn Visit(IXmlCData cData, TContext context);
    public abstract virtual TReturn Visit(IXmlCommentNode comment, TContext context);
    public abstract virtual TReturn Visit(IXmlTag tag, TContext context);
    public abstract virtual TReturn Visit(IXmlTagFooter footer, TContext context);
    public abstract virtual TReturn Visit(IXmlTagHeader header, TContext context);
    public abstract virtual TReturn VisitTokenNode(IXmlToken token, TContext context);
    public abstract virtual TReturn Visit(IXmlFloatingTextTokenNode token, TContext context);
    public abstract virtual TReturn Visit(IXmlIdentifier token, TContext context);
    public abstract virtual TReturn Visit(IXmlCommentStartTokenNode startToken, TContext context);
    public abstract virtual TReturn Visit(IXmlCommentEndTokenNode endToken, TContext context);
    public abstract virtual TReturn Visit(IXmlAsteriskTokenNode token, TContext context);
    public abstract virtual TReturn Visit(IXmlAttlistStartTokenNode token, TContext context);
    public abstract virtual TReturn Visit(IXmlCdataEndTokenNode token, TContext context);
    public abstract virtual TReturn Visit(IXmlCdataStartTokenNode token, TContext context);
    public abstract virtual TReturn Visit(IXmlCommaTokenNode token, TContext context);
    public abstract virtual TReturn Visit(IXmlDtdStartTokenNode token, TContext context);
    public abstract virtual TReturn Visit(IXmlElementStartTokenNode token, TContext context);
    public abstract virtual TReturn Visit(IXmlEntityStartTokenNode token, TContext context);
    public abstract virtual TReturn Visit(IXmlEqTokenNode token, TContext context);
    public abstract virtual TReturn Visit(IXmlFixedTokenNode token, TContext context);
    public abstract virtual TReturn Visit(IXmlImpliedTokenNode token, TContext context);
    public abstract virtual TReturn Visit(IXmlLbracketTokenNode token, TContext context);
    public abstract virtual TReturn Visit(IXmlLparenthTokenNode token, TContext context);
    public abstract virtual TReturn Visit(IXmlNotationStartTokenNode token, TContext context);
    public abstract virtual TReturn Visit(IXmlOrTokenNode token, TContext context);
    public abstract virtual TReturn Visit(IXmlPercentTokenNode token, TContext context);
    public abstract virtual TReturn Visit(IXmlPiendTokenNode token, TContext context);
    public abstract virtual TReturn Visit(IXmlPistartTokenNode token, TContext context);
    public abstract virtual TReturn Visit(IXmlPlusTokenNode token, TContext context);
    public abstract virtual TReturn Visit(IXmlQuestionTokenNode token, TContext context);
    public abstract virtual TReturn Visit(IXmlRbracketTokenNode token, TContext context);
    public abstract virtual TReturn Visit(IXmlRequiredTokenNode token, TContext context);
    public abstract virtual TReturn Visit(IXmlRparenthTokenNode token, TContext context);
    public abstract virtual TReturn Visit(IXmlTagEnd1TokenNode token, TContext context);
    public abstract virtual TReturn Visit(IXmlTagEndTokenNode token, TContext context);
    public abstract virtual TReturn Visit(IXmlTagStart1TokenNode token, TContext context);
    public abstract virtual TReturn Visit(IXmlTagStartTokenNode token, TContext context);
}
public interface JetBrains.ReSharper.Psi.Xml.Tree.IXmlValueToken {
    [NotNullAttribute]
public string UnquotedValue { get; }
    public TreeTextRange UnquotedValueRange { get; }
    public abstract virtual string get_UnquotedValue();
    public abstract virtual TreeTextRange get_UnquotedValueRange();
}
public interface JetBrains.ReSharper.Psi.Xml.Tree.References.IReferenceWithToken {
}
public interface JetBrains.ReSharper.Psi.Xml.Tree.References.IXmlCompletableReference {
}
public interface JetBrains.ReSharper.Psi.Xml.Tree.References.IXmlReference {
}
public interface JetBrains.ReSharper.Psi.Xml.Tree.References.IXmlSmartCompletableReference {
    [NotNullAttribute]
public abstract virtual ISymbolTable GetSmartCompletionSymbolTable();
}
public interface JetBrains.ReSharper.Psi.Xml.Tree.References.IXmlTypeNameCompletableReference {
}
public enum JetBrains.ReSharper.Psi.Xml.Tree.RepetitionType : Enum {
    public int value__;
    public static RepetitionType ZERO_OR_ONE;
    public static RepetitionType ONE_OR_MORE;
    public static RepetitionType ANY;
    public static RepetitionType UNKNOWN;
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Psi.Xml.Tree.XmlAttributeContainerExtensions : object {
    [ExtensionAttribute]
[CanBeNullAttribute]
public static TAttribute GetAttribute(IXmlAttributeContainer container);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IXmlAttribute GetAttribute(IXmlAttributeContainer container, Predicate`1<IXmlAttribute> predicate);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IXmlAttribute GetAttribute(IXmlAttributeContainer container, string fullName);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Psi.Xml.Tree.XmlAttributeExtensions : object {
    [ExtensionAttribute]
public static void Remove(IXmlAttribute xmlAttribute);
}
public abstract class JetBrains.ReSharper.Psi.Xml.Tree.XmlCompositeNodeType : CompositeNodeType {
    [NotNullAttribute]
private XmlElementTypes myElementTypes;
    [NotNullAttribute]
public XmlElementTypes XmlElementTypes { get; }
    [NotNullAttribute]
public XmlTokenTypes XmlTokenTypes { get; }
    protected XmlCompositeNodeType(string s, XmlElementTypes elementTypes, int index);
    public XmlElementTypes get_XmlElementTypes();
    public XmlTokenTypes get_XmlTokenTypes();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xml.XmlLanguage", "16")]
public class JetBrains.ReSharper.Psi.Xml.Tree.XmlElementTypes : object {
    [CompilerGeneratedAttribute]
private PsiLanguageType <Language>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlTokenTypes <XmlTokenTypes>k__BackingField;
    private static int BASE_INDEX;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <FILE>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <TAG>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <TAG_HEADER>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <TAG_FOOTER>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <ATTRIBUTE>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <PI>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <PI_XML>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <CDATA>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <COMMENT>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <SYNTAX_ERROR>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <DOCTYPE>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <SYSTEM_EXT_ID>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <PUBLIC_EXT_ID>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <INT_SUBSET>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <GROUPPED_CONTENT>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <REPETITION_CONTENT>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <SIMPLE_CONTENT>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <ANY_CONTENT>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <EMPTY_CONTENT>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <DTD_ELEMENT>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <DTD_ENTITY>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <DTD_NDATA>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <DTD_NOTATION>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <DTD_ATTLIST>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <DTD_ATTDEF>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <DTD_ATTTYPE>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <DTD_FILE>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlCompositeNodeType <XML_DOC_HOLDER>k__BackingField;
    [NotNullAttribute]
public PsiLanguageType Language { get; }
    [NotNullAttribute]
public XmlTokenTypes XmlTokenTypes { get; }
    public XmlCompositeNodeType FILE { get; protected set; }
    public XmlCompositeNodeType TAG { get; protected set; }
    public XmlCompositeNodeType TAG_HEADER { get; protected set; }
    public XmlCompositeNodeType TAG_FOOTER { get; protected set; }
    public XmlCompositeNodeType ATTRIBUTE { get; protected set; }
    public XmlCompositeNodeType PI { get; protected set; }
    public XmlCompositeNodeType PI_XML { get; protected set; }
    public XmlCompositeNodeType CDATA { get; protected set; }
    public XmlCompositeNodeType COMMENT { get; protected set; }
    public XmlCompositeNodeType SYNTAX_ERROR { get; protected set; }
    public XmlCompositeNodeType DOCTYPE { get; protected set; }
    public XmlCompositeNodeType SYSTEM_EXT_ID { get; protected set; }
    public XmlCompositeNodeType PUBLIC_EXT_ID { get; protected set; }
    public XmlCompositeNodeType INT_SUBSET { get; protected set; }
    public XmlCompositeNodeType GROUPPED_CONTENT { get; protected set; }
    public XmlCompositeNodeType REPETITION_CONTENT { get; protected set; }
    public XmlCompositeNodeType SIMPLE_CONTENT { get; protected set; }
    public XmlCompositeNodeType ANY_CONTENT { get; protected set; }
    public XmlCompositeNodeType EMPTY_CONTENT { get; protected set; }
    public XmlCompositeNodeType DTD_ELEMENT { get; protected set; }
    public XmlCompositeNodeType DTD_ENTITY { get; protected set; }
    public XmlCompositeNodeType DTD_NDATA { get; protected set; }
    public XmlCompositeNodeType DTD_NOTATION { get; protected set; }
    public XmlCompositeNodeType DTD_ATTLIST { get; protected set; }
    public XmlCompositeNodeType DTD_ATTDEF { get; protected set; }
    public XmlCompositeNodeType DTD_ATTTYPE { get; protected set; }
    public XmlCompositeNodeType DTD_FILE { get; protected set; }
    public XmlCompositeNodeType XML_DOC_HOLDER { get; protected set; }
    public XmlElementTypes(XmlTokenTypes xmlTokenTypes);
    public static TElementTypes GetInstance(PsiLanguageType languageType);
    [CompilerGeneratedAttribute]
public PsiLanguageType get_Language();
    [CompilerGeneratedAttribute]
public XmlTokenTypes get_XmlTokenTypes();
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_FILE();
    [CompilerGeneratedAttribute]
protected void set_FILE(XmlCompositeNodeType value);
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_TAG();
    [CompilerGeneratedAttribute]
protected void set_TAG(XmlCompositeNodeType value);
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_TAG_HEADER();
    [CompilerGeneratedAttribute]
protected void set_TAG_HEADER(XmlCompositeNodeType value);
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_TAG_FOOTER();
    [CompilerGeneratedAttribute]
protected void set_TAG_FOOTER(XmlCompositeNodeType value);
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_ATTRIBUTE();
    [CompilerGeneratedAttribute]
protected void set_ATTRIBUTE(XmlCompositeNodeType value);
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_PI();
    [CompilerGeneratedAttribute]
protected void set_PI(XmlCompositeNodeType value);
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_PI_XML();
    [CompilerGeneratedAttribute]
protected void set_PI_XML(XmlCompositeNodeType value);
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_CDATA();
    [CompilerGeneratedAttribute]
protected void set_CDATA(XmlCompositeNodeType value);
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_COMMENT();
    [CompilerGeneratedAttribute]
protected void set_COMMENT(XmlCompositeNodeType value);
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_SYNTAX_ERROR();
    [CompilerGeneratedAttribute]
protected void set_SYNTAX_ERROR(XmlCompositeNodeType value);
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_DOCTYPE();
    [CompilerGeneratedAttribute]
protected void set_DOCTYPE(XmlCompositeNodeType value);
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_SYSTEM_EXT_ID();
    [CompilerGeneratedAttribute]
protected void set_SYSTEM_EXT_ID(XmlCompositeNodeType value);
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_PUBLIC_EXT_ID();
    [CompilerGeneratedAttribute]
protected void set_PUBLIC_EXT_ID(XmlCompositeNodeType value);
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_INT_SUBSET();
    [CompilerGeneratedAttribute]
protected void set_INT_SUBSET(XmlCompositeNodeType value);
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_GROUPPED_CONTENT();
    [CompilerGeneratedAttribute]
protected void set_GROUPPED_CONTENT(XmlCompositeNodeType value);
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_REPETITION_CONTENT();
    [CompilerGeneratedAttribute]
protected void set_REPETITION_CONTENT(XmlCompositeNodeType value);
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_SIMPLE_CONTENT();
    [CompilerGeneratedAttribute]
protected void set_SIMPLE_CONTENT(XmlCompositeNodeType value);
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_ANY_CONTENT();
    [CompilerGeneratedAttribute]
protected void set_ANY_CONTENT(XmlCompositeNodeType value);
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_EMPTY_CONTENT();
    [CompilerGeneratedAttribute]
protected void set_EMPTY_CONTENT(XmlCompositeNodeType value);
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_DTD_ELEMENT();
    [CompilerGeneratedAttribute]
protected void set_DTD_ELEMENT(XmlCompositeNodeType value);
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_DTD_ENTITY();
    [CompilerGeneratedAttribute]
protected void set_DTD_ENTITY(XmlCompositeNodeType value);
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_DTD_NDATA();
    [CompilerGeneratedAttribute]
protected void set_DTD_NDATA(XmlCompositeNodeType value);
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_DTD_NOTATION();
    [CompilerGeneratedAttribute]
protected void set_DTD_NOTATION(XmlCompositeNodeType value);
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_DTD_ATTLIST();
    [CompilerGeneratedAttribute]
protected void set_DTD_ATTLIST(XmlCompositeNodeType value);
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_DTD_ATTDEF();
    [CompilerGeneratedAttribute]
protected void set_DTD_ATTDEF(XmlCompositeNodeType value);
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_DTD_ATTTYPE();
    [CompilerGeneratedAttribute]
protected void set_DTD_ATTTYPE(XmlCompositeNodeType value);
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_DTD_FILE();
    [CompilerGeneratedAttribute]
protected void set_DTD_FILE(XmlCompositeNodeType value);
    [CompilerGeneratedAttribute]
public XmlCompositeNodeType get_XML_DOC_HOLDER();
    [CompilerGeneratedAttribute]
protected void set_XML_DOC_HOLDER(XmlCompositeNodeType value);
}
public class JetBrains.ReSharper.Psi.Xml.Tree.XmlSyntaxErrorType : EnumPattern {
    public static XmlSyntaxErrorType INVALID_TAG_HEADER;
    public static XmlSyntaxErrorType INVALID_TAG_FOOTER;
    public static XmlSyntaxErrorType NO_OPEN_TAG_FOUND;
    public static XmlSyntaxErrorType IDENTIFIER_EXPECTED;
    public static XmlSyntaxErrorType UNEXPECTED_TOKEN;
    public static XmlSyntaxErrorType ATTRIBUTE_EXPECTED;
    public static XmlSyntaxErrorType ATTRIBUTE_NAME_EXPECTED;
    public static XmlSyntaxErrorType ATTRIBUTE_EQ_EXPECTED;
    public static XmlSyntaxErrorType ATTRIBUTE_VALUE_EXPECTED;
    public static XmlSyntaxErrorType CDATA_CLOSING_SYMBOL_EXPECTED;
    public static XmlSyntaxErrorType PI_CLOSING_SYMBOL_EXPECTED;
    public static XmlSyntaxErrorType TAG_HEADER_CLOSING_SYMBOL_EXPECTED;
    public static XmlSyntaxErrorType TAG_FOOTER_CLOSING_SYMBOL_EXPECTED;
    public static XmlSyntaxErrorType RBRACKET_EXPECTED;
    public static XmlSyntaxErrorType RPARENTH_EXPECTED;
    public static XmlSyntaxErrorType ELEMENT_CONTENT_EXPECTED;
    public static XmlSyntaxErrorType OR_EXPECTED;
    public static XmlSyntaxErrorType COMMA_EXPECTED;
    public static XmlSyntaxErrorType OR_COMMA_EXPECTED;
    public static XmlSyntaxErrorType PUBLIC_SYSTEM_EXPECTED;
    public static XmlSyntaxErrorType ENTITY_VALUE_EXPECTED;
    public static XmlSyntaxErrorType ATTRIBUTE_TYPE_EXPECTED;
    public static XmlSyntaxErrorType ATTRIBUTE_DEFAULT_EXPECTED;
    public static XmlSyntaxErrorType ATTRIBUTE_DEFAULT_VALUE_EXPECTED;
    public static XmlSyntaxErrorType COMMENT_END_EXPECTED;
    protected XmlSyntaxErrorType(string description);
    private static XmlSyntaxErrorType();
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Psi.Xml.Tree.XmlTagExtensions : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static IXmlIdentifier GetNameNode(IXmlTag tag);
    [ExtensionAttribute]
[NotNullAttribute]
public static IXmlIdentifier GetName(IXmlTag tag);
    [ExtensionAttribute]
[PureAttribute]
public static TreeNodeEnumerable`1<IXmlAttribute> GetAttributes(IXmlTag tag);
    [ExtensionAttribute]
[CanBeNullAttribute]
[PureAttribute]
public static IXmlAttribute GetAttribute(IXmlTag tag, Predicate`1<IXmlAttribute> predicate);
    [ExtensionAttribute]
[CanBeNullAttribute]
[PureAttribute]
public static IXmlAttribute GetAttribute(IXmlTag tag, string fullName);
    [ExtensionAttribute]
public static string GetTagNamespace(IXmlTag tag);
    [ExtensionAttribute]
public static string GetTagName(IXmlTag tag);
    [ExtensionAttribute]
public static string GetFullTagName(IXmlTag tag);
    [ExtensionAttribute]
public static void Remove(IXmlTag xmlTag);
}
public static class JetBrains.ReSharper.Psi.Xml.Util.ModuleQualificationUtil : object {
    public static string GetTypeName(IXmlAttributeValue value, AssemblyNameInfo& assemblyName);
    public static ICollection`1<ITypeElement> ResolveType(string clrName, IPsiModule module, bool caseSensitive);
    public static string GetModuleName(IPsiModule psiModule);
    public static string GetModuleQualification(IPsiModule module);
    public static bool IsIdentifierChar(char c);
    public static bool IsTypeNameChar(char c);
    public static TextRange GetTypeNameFullRange(string text, int offset);
    public static TreeTextRange GetTypeNameCompletionRange(string text, TreeOffset offset);
}
public static class JetBrains.ReSharper.Psi.Xml.Util.XmlAttributeUtil : object {
    public static TreeTextRange UnquotedValueRange(IXmlAttribute attribute);
    public static DocumentRange UnquotedValueDocumentRange(IXmlAttribute attribute);
    public static void SetValue(IXmlAttribute attribute, string unquotedValue);
}
public static class JetBrains.ReSharper.Psi.Xml.Util.XmlReferenceUtil : object {
    [CanBeNullAttribute]
public static TReference FindReferenceRecursively(ITreeNode element, Predicate`1<TReference> predicate);
}
public static class JetBrains.ReSharper.Psi.Xml.Util.XPathUtil : object {
    [NotNullAttribute]
public static IList`1<T> GetNestedTags(IXmlTagContainer container, string xpath);
    private static bool TagNameMatches(IXmlTag tag, string name);
    private static void GetNestedTagsImpl(IXmlTagContainer container, String[] paths, int iPath, List`1<T> consumer);
}
public abstract class JetBrains.ReSharper.Psi.Xml.XmlDocComments.ClrDocCommentElementFactoryImpl : DocCommentElementFactory {
    protected Key`1<object> XmlResolveKey { get; }
    protected ClrDocCommentElementFactoryImpl(IDocCommentXmlPsi xmlPsi);
    protected abstract virtual Key`1<object> get_XmlResolveKey();
    private void EncodeCRefs(IXmlTag tag, Object[] elements);
    public IXmlTag CreateException(IDeclaredType type);
    [NotNullAttribute]
public IList`1<DecodeInfo> DecodeCRefs(IXmlTagContainer file);
    internal void DecodeCRefs(IXmlTag tag, List`1<DecodeInfo> infos);
}
public abstract class JetBrains.ReSharper.Psi.Xml.XmlDocComments.ClrDocCommentXmlPsi`1 : DocCommentXmlPsiBase`1<TTreeNode> {
    protected ClrDocCommentXmlPsi`1(InjectedPsiHolderNode docCommentsHolder, IXmlFile xmlFile, bool isShifted, TTreeNode docCommentBlock);
    protected void BindReferences(IList`1<DecodeInfo> infos);
    protected static void BuildXmlPsi(XmlLanguage docCommentLanguage, ITreeNode block, IReadOnlyList`1<string> allDocCommentLines, InjectedPsiHolderNode& holderNode, IXmlFile& xmlPsiFile, Boolean& isShifted);
}
public class JetBrains.ReSharper.Psi.Xml.XmlDocComments.DecodeInfo : ValueType {
    public TreeOffset StartOffsetInXmlTree;
    public object ResolveInfo;
    public DecodeInfo(TreeOffset startOffsetInXmlTree, object resolveInfo);
}
public static class JetBrains.ReSharper.Psi.Xml.XmlDocComments.DocCommentBlockUtil : object {
    public static bool TryGetXml(IReadOnlyList`1<string> lines, ITypeMember element, XmlNode& node);
    [CompilerGeneratedAttribute]
internal static int <TryGetXml>g__CalcIndent|0_0(string line);
}
public class JetBrains.ReSharper.Psi.Xml.XmlDocComments.DocCommentElementFactory : object {
    [NotNullAttribute]
protected XmlElementFactory Factory;
    protected DocCommentElementFactory(IDocCommentXmlPsi xmlPsi);
    [NotNullAttribute]
public static DocCommentElementFactory GetInstance(IDocCommentXmlPsi docCommentXmlPsi);
    public IXmlTag CreateTag(string text);
    public IXmlTag CreateParameterNode(string name, string innerText);
    public IXmlTag CreateTypeParameterNode(string name, string innerText);
    public IXmlTag CreateReturnNode(string text);
    public IXmlTag CreateValueNode(string text);
}
public abstract class JetBrains.ReSharper.Psi.Xml.XmlDocComments.DocCommentXmlPsiBase`1 : object {
    [NotNullAttribute]
private static String[] ourOrderedDocCommentTags;
    [CompilerGeneratedAttribute]
private IXmlFile <XmlFile>k__BackingField;
    [CompilerGeneratedAttribute]
private TTreeNode <DocCommentBlock>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsShifted>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsInChange>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BulkChangesCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SkippedChangesCount>k__BackingField;
    [CanBeNullAttribute]
private List`1<Pair`2<TreeTextRange, TreeTextRange>> myDocToXmlRangesMap;
    private TreeOffset myLastBaseOffset;
    private bool myIsValid;
    public IXmlFile XmlFile { get; }
    public TTreeNode DocCommentBlock { get; }
    public bool IsShifted { get; private set; }
    public bool IsInChange { get; protected set; }
    protected int BulkChangesCount { get; protected set; }
    protected int SkippedChangesCount { get; protected set; }
    public IFile OriginalFile { get; }
    protected DocCommentXmlPsiBase`1(InjectedPsiHolderNode docCommentsHolder, IXmlFile xmlFile, bool isShifted, TTreeNode docCommentBlock);
    private static DocCommentXmlPsiBase`1();
    [CompilerGeneratedAttribute]
public sealed virtual IXmlFile get_XmlFile();
    [CompilerGeneratedAttribute]
public TTreeNode get_DocCommentBlock();
    [CompilerGeneratedAttribute]
public bool get_IsShifted();
    [CompilerGeneratedAttribute]
private void set_IsShifted(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsInChange();
    [CompilerGeneratedAttribute]
protected void set_IsInChange(bool value);
    [CompilerGeneratedAttribute]
protected int get_BulkChangesCount();
    [CompilerGeneratedAttribute]
protected void set_BulkChangesCount(int value);
    [CompilerGeneratedAttribute]
protected int get_SkippedChangesCount();
    [CompilerGeneratedAttribute]
protected void set_SkippedChangesCount(int value);
    [NotNullAttribute]
protected abstract virtual IReadOnlyList`1<ITreeNode> GetDocCommentNodes();
    [NotNullAttribute]
internal List`1<Pair`2<TreeTextRange, TreeTextRange>> GetDocToXmlRangesMap();
    [NotNullAttribute]
private List`1<Pair`2<TreeTextRange, TreeTextRange>> ComputeRangesMap();
    [NotNullAttribute]
[PureAttribute]
protected abstract virtual string GetDocCommentStartText(ITreeNode commentNode);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Psi.Xml.XmlDocComments.DocCommentXmlPsiBase`1/<GetCommentLinesStartOffsets>d__30")]
protected virtual IEnumerable`1<int> GetCommentLinesStartOffsets(ITreeNode commentNode);
    public sealed virtual TElement FindNodeAt(TreeTextRange treeRange);
    public sealed virtual IList`1<IXmlTag> GetExceptionNodes();
    public sealed virtual IList`1<IXmlTag> GetReturnNodes();
    public sealed virtual IReference GetCrefReference(IXmlTag tag);
    public sealed virtual IList`1<IXmlTag> GetParameterNodes(string name);
    public sealed virtual IList`1<IXmlTag> GetTypeParameterNodes(string name);
    public sealed virtual IList`1<IXmlTag> GetValueNodes();
    public sealed virtual void RemoveTag(IXmlTag node);
    public sealed virtual IXmlTag AddParameterNodeAfter(IXmlTag xmlTag, IXmlTag anchorXmlTag);
    public sealed virtual IXmlTag AddParameterNodeBefore(IXmlTag xmlTag, IXmlTag anchorXmlTag);
    public sealed virtual IXmlTag AddTypeParameterNodeAfter(IXmlTag xmlTag, IXmlTag anchorXmlTag);
    public sealed virtual IXmlTag AddTypeParameterNodeBefore(IXmlTag xmlTag, IXmlTag anchorXmlTag);
    public sealed virtual IXmlTag AddSummaryNode(IXmlTag xmlTag);
    public sealed virtual IXmlTag AddReturnsNode(IXmlTag xmlTag);
    public sealed virtual IXmlTag AddReturnsNodeAfter(IXmlTag xmlTag, IXmlTag anchorXmlTag);
    public sealed virtual IXmlTag AddReturnsNodeBefore(IXmlTag xmlTag, IXmlTag anchorXmlTag);
    public sealed virtual IXmlTag AddExceptionNode(IXmlTag xmlTag);
    public sealed virtual IXmlTag AddValueNodeAfter(IXmlTag xmlTag, IXmlTag anchorXmlTag);
    public sealed virtual IXmlTag AddValueNodeBefore(IXmlTag xmlTag, IXmlTag anchorXmlTag);
    public sealed virtual IXmlTag AddValueNode(IXmlTag xmlTag);
    public sealed virtual IDisposable GetBulkModificationCookie();
    public sealed virtual IPsiServices GetPsiServices();
    public abstract virtual void SubTreeChanged();
    public sealed virtual IFile get_OriginalFile();
    public sealed virtual IReadOnlyList`1<TreeTextRange> GetIntersectedGeneratedRanges(TreeTextRange originalRange, bool includeHidden, bool strict);
    public sealed virtual IReadOnlyList`1<TreeTextRange> GetIntersectedOriginalRanges(TreeTextRange generatedRange);
    public sealed virtual IReadOnlyList`1<TreeTextRange> GetIntersectedOriginalRangesLowLevel(TreeTextRange generatedRange, bool includeHidden, bool strict);
    public sealed virtual TreeTextRange OriginalToGenerated(TreeTextRange originalRange);
    public sealed virtual TreeTextRange GeneratedToOriginal(TreeTextRange generatedRange, bool forModification);
    public sealed virtual Tuple`2<TreeTextRange, TreeTextRange> GetCoveringRange(TreeTextRange originalRange);
    public sealed virtual string Dump(IFile generatedFile, bool dumpContext);
    protected TreeOffset ToDocComment(TreeOffset offset, Int32& rangeIndex);
    private TreeOffset ToXmlPsi(TreeOffset offset, Int32& rangeIndex);
    protected virtual void InvalidateCachedData();
    [CanBeNullAttribute]
protected IXmlTag AddTopLevelTagWithNameBefore(IXmlTag xmlTag, IXmlTag anchorXmlTag, string name);
    private IXmlTag InsertWithoutSibling(IXmlTag xmlTag, string name);
    protected virtual IList`1<string> OrderedDocCommentTags();
    protected IXmlTag AddTopLevelTagWithNameAfter(IXmlTag xmlTag, IXmlTag anchorXmlTag, string name);
    [NotNullAttribute]
private IList`1<IXmlTag> GetTopLevelTags(string name);
    public void Invalidate();
    protected void UpdateIsShifted();
}
public interface JetBrains.ReSharper.Psi.Xml.XmlDocComments.IDocCommentBlockWithPsi`2 {
    public TreeNodeCollection`1<TCommentNode> DocComments { get; }
    public abstract virtual TreeNodeCollection`1<TCommentNode> get_DocComments();
    [NotNullAttribute]
public abstract virtual TCommentNode AddDocCommentBefore(TCommentNode nodeToAdd, TCommentNode anchor);
    [NotNullAttribute]
public abstract virtual TCommentNode AddDocCommentAfter(TCommentNode nodeToAdd, TCommentNode anchor);
    public abstract virtual void RemoveDocComment(TCommentNode docCommentNode);
    [NotNullAttribute]
public abstract virtual TXmlPsi GetXmlPsi();
}
public interface JetBrains.ReSharper.Psi.Xml.XmlDocComments.IDocCommentXmlPsi {
    [NotNullAttribute]
public IXmlFile XmlFile { get; }
    public abstract virtual IXmlFile get_XmlFile();
    [NotNullAttribute]
public abstract virtual IList`1<IXmlTag> GetParameterNodes(string name);
    [NotNullAttribute]
public abstract virtual IList`1<IXmlTag> GetTypeParameterNodes(string name);
    [NotNullAttribute]
public abstract virtual IList`1<IXmlTag> GetValueNodes();
    [NotNullAttribute]
public abstract virtual IList`1<IXmlTag> GetExceptionNodes();
    [NotNullAttribute]
public abstract virtual IList`1<IXmlTag> GetReturnNodes();
    public abstract virtual void RemoveTag(IXmlTag node);
    public abstract virtual IXmlTag AddParameterNodeAfter(IXmlTag xmlTag, IXmlTag anchorXmlTag);
    public abstract virtual IXmlTag AddParameterNodeBefore(IXmlTag xmlTag, IXmlTag anchorXmlTag);
    public abstract virtual IXmlTag AddTypeParameterNodeAfter(IXmlTag xmlTag, IXmlTag anchorXmlTag);
    public abstract virtual IXmlTag AddTypeParameterNodeBefore(IXmlTag xmlTag, IXmlTag anchorXmlTag);
    public abstract virtual IXmlTag AddReturnsNodeAfter(IXmlTag xmlTag, IXmlTag anchorXmlTag);
    public abstract virtual IXmlTag AddReturnsNodeBefore(IXmlTag xmlTag, IXmlTag anchorXmlTag);
    public abstract virtual IXmlTag AddValueNodeAfter(IXmlTag xmlTag, IXmlTag anchorXmlTag);
    public abstract virtual IXmlTag AddValueNodeBefore(IXmlTag xmlTag, IXmlTag anchorXmlTag);
    public abstract virtual IXmlTag AddSummaryNode(IXmlTag xmlTag);
    public abstract virtual IXmlTag AddValueNode(IXmlTag xmlTag);
    public abstract virtual IXmlTag AddReturnsNode(IXmlTag xmlTag);
    public abstract virtual IXmlTag AddExceptionNode(IXmlTag xmlTag);
    [NotNullAttribute]
public abstract virtual IDisposable GetBulkModificationCookie();
    [CanBeNullAttribute]
public abstract virtual TNode FindNodeAt(TreeTextRange treeRange);
    [CanBeNullAttribute]
public abstract virtual IReference GetCrefReference(IXmlTag node);
    public abstract virtual IPsiServices GetPsiServices();
    public abstract virtual void SubTreeChanged();
}
public class JetBrains.ReSharper.Psi.Xml.XmlDocComments.InjectedPsiHolderNode : CompositeElement {
    private IPsiServices myPsiServices;
    private ITreeNode myOwnerPsiContext;
    private XmlTokenTypes myXmlTokenTypes;
    private CompositeNodeType myNodeType;
    [CompilerGeneratedAttribute]
private NodeUserDataHolder <NodeUserDataHolder>k__BackingField;
    [CompilerGeneratedAttribute]
private IDocCommentXmlPsi <DocCommentXmlPsi>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ModificationStamp>k__BackingField;
    public NodeUserDataHolder NodeUserDataHolder { get; }
    public bool HoldOwnUserData { get; }
    public IDocCommentXmlPsi DocCommentXmlPsi { get; public set; }
    public XmlTokenTypes XmlTokenTypes { get; }
    public NodeType NodeType { get; }
    public PsiLanguageType Language { get; }
    public int LevelDelta { get; }
    public ITreeNode ContextNode { get; }
    public SandBoxContextType ContextType { get; }
    public Nullable`1<int> ModificationStamp { get; public set; }
    private InjectedPsiHolderNode(IPsiServices psiServices, ITreeNode context, XmlElementTypes xmlElementTypes);
    [CompilerGeneratedAttribute]
public sealed virtual NodeUserDataHolder get_NodeUserDataHolder();
    public sealed virtual bool get_HoldOwnUserData();
    [CompilerGeneratedAttribute]
public IDocCommentXmlPsi get_DocCommentXmlPsi();
    [CompilerGeneratedAttribute]
public void set_DocCommentXmlPsi(IDocCommentXmlPsi value);
    public static InjectedPsiHolderNode CreateHolderFor(IXmlFile file, IPsiServices psiServices, ITreeNode context);
    public virtual void SubTreeChanged(ITreeNode elementContainingChanges, PsiChangedElementType changeType);
    public virtual IPsiServices GetPsiServices();
    public sealed virtual IPsiModule GetPsiModule();
    public sealed virtual XmlTokenTypes get_XmlTokenTypes();
    public virtual bool IsValid();
    public sealed virtual TReturn AcceptVisitor(IXmlTreeVisitor`2<TContext, TReturn> visitor, TContext context);
    public virtual NodeType get_NodeType();
    public virtual PsiLanguageType get_Language();
    public ISymbolTable AddGlobalDeclarations(ISymbolTable parentTable, int level, SymbolTableMode mode);
    public int get_LevelDelta();
    public sealed virtual ITreeNode get_ContextNode();
    public sealed virtual SandBoxContextType get_ContextType();
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_ModificationStamp();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ModificationStamp(Nullable`1<int> value);
}
[LanguageDefinitionAttribute("XMLDOC")]
public class JetBrains.ReSharper.Psi.Xml.XmlDocComments.XmlDocLanguage : XmlLanguage {
    public static string Name;
    [CompilerGeneratedAttribute]
private static XmlDocLanguage <Instance>k__BackingField;
    [CanBeNullAttribute]
[UsedImplicitlyAttribute]
public static XmlDocLanguage Instance { get; private set; }
    protected XmlDocLanguage(string name, string presentableName);
    [CompilerGeneratedAttribute]
public static XmlDocLanguage get_Instance();
    [CompilerGeneratedAttribute]
private static void set_Instance(XmlDocLanguage value);
}
[LanguageDefinitionAttribute("XML")]
public class JetBrains.ReSharper.Psi.Xml.XmlLanguage : KnownLanguage {
    public static string Name;
    [CompilerGeneratedAttribute]
private static XmlLanguage <Instance>k__BackingField;
    [CanBeNullAttribute]
[UsedImplicitlyAttribute]
public static XmlLanguage Instance { get; private set; }
    protected XmlLanguage(string name);
    protected XmlLanguage(string name, string presentableName);
    [CompilerGeneratedAttribute]
public static XmlLanguage get_Instance();
    [CompilerGeneratedAttribute]
private static void set_Instance(XmlLanguage value);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xml.XmlLanguage", "16")]
public class JetBrains.ReSharper.Psi.Xml.XmlLanguageService : XmlLanguageServiceBase {
    public bool IsCaseSensitive { get; }
    public ILanguageCacheProvider CacheProvider { get; }
    public ITypePresenter TypePresenter { get; }
    public IDeclaredElementPresenter DeclaredElementPresenter { get; }
    public bool SupportTypeMemberCache { get; }
    public XmlLanguageService(XmlLanguage languageType, IConstantValueService constantValueService, XmlTokenTypes tokenTypes, IXmlElementFactory elementFactory, IXmlCodeFormatter codeFormatter, CommonIdentifierIntern commonIdentifierIntern);
    public virtual bool get_IsCaseSensitive();
    public virtual ILanguageCacheProvider get_CacheProvider();
    public virtual ITypePresenter get_TypePresenter();
    public virtual IDeclaredElementPresenter get_DeclaredElementPresenter();
    public virtual IReferenceContextCodec CreateReferenceContextCodec();
    public virtual bool get_SupportTypeMemberCache();
    public virtual bool IsTypeMemberVisible(ITypeMember member);
    public virtual ReferenceAccessType GetReferenceAccessType(IDeclaredElement target, IReference reference);
    public virtual bool CanContainCachableDeclarations(ITreeNode node);
}
public abstract class JetBrains.ReSharper.Psi.Xml.XmlLanguageServiceBase : LanguageService {
    private IXmlCodeFormatter myCodeFormatter;
    protected CommonIdentifierIntern myCommonIdentifierIntern;
    private NodeTypeSet WHITESPACE_OR_COMMENT;
    [CompilerGeneratedAttribute]
private XmlTokenTypes <TokenTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private IXmlElementFactory <ElementFactory>k__BackingField;
    protected XmlTokenTypes TokenTypes { get; }
    public IXmlElementFactory ElementFactory { get; }
    public ICodeFormatter CodeFormatter { get; }
    protected XmlLanguageServiceBase(XmlLanguage xmlLanguage, IConstantValueService constantValueService, XmlTokenTypes tokenTypes, IXmlElementFactory elementFactory, IXmlCodeFormatter codeFormatter, CommonIdentifierIntern commonIdentifierIntern);
    [CompilerGeneratedAttribute]
protected XmlTokenTypes get_TokenTypes();
    [CompilerGeneratedAttribute]
public IXmlElementFactory get_ElementFactory();
    public virtual ICodeFormatter get_CodeFormatter();
    public virtual ILexerFactory GetPrimaryLexerFactory();
    public virtual ILexer CreateFilteringLexer(ILexer lexer);
    public virtual IParser CreateParser(ILexer lexer, IPsiModule module, IPsiSourceFile sourceFile);
    public virtual IEnumerable`1<ITypeDeclaration> FindTypeDeclarations(IFile file);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xml.XmlLanguage", "16")]
public class JetBrains.ReSharper.Psi.Xml.XmlLanguageSupport : object {
    public static string XmlSpace;
    public virtual bool IsValidTagName(string name);
    public virtual bool CanConvertAttributeToTag(IXmlAttribute attribute);
    public virtual string GetTagName(IXmlAttribute attribute);
    public virtual string ConvertAttributeValue(IXmlAttribute attribute, Boolean& preserveRequired);
    public virtual bool CanConvertTagToAttribute(IXmlTag tag);
    public static bool IsSpacePreserved(IXmlTag tag);
    private static bool HasAttributtesExceptXmlSpace(IXmlTag tag);
    public virtual string GetAttributeName(IXmlTag tag);
    public virtual string ConvertTagToValue(IXmlTag tag);
    public virtual bool CanRemoveTagAndKeepChildren(IXmlTag tagToRemove);
    public virtual bool CanMakeTagEmpty(IXmlTag tag);
    public virtual bool CanRemoveAllTags(IXmlTag tagToRemove);
    public virtual bool IsFormattingAllowed(IPsiSourceFile sourceFile);
    [NotNullAttribute]
public static IXmlLanguageSupport GetInstance(PsiLanguageType language);
    public virtual IXmlTreeBuilderContext CreateTreeBuilderContext(IPsiModule psiModule);
    public virtual XmlTreeBuilder CreateTreeBuilder(IXmlElementFactory factory, IXmlElementFactoryContext factoryContext, ITokenIntern intern, IXmlTreeBuilderContext treeBuilderContext);
}
[ProjectFileTypeAttribute("JetBrains.ProjectModel.XmlProjectFileType", "16")]
public class JetBrains.ReSharper.Psi.Xml.XmlProjectFileLanguageService : object {
    private XmlProjectFileType myXmlProjectFileType;
    public ProjectFileType LanguageType { get; }
    public IconId Icon { get; }
    public XmlProjectFileLanguageService(XmlProjectFileType xmlProjectFileType);
    public sealed virtual ProjectFileType get_LanguageType();
    public virtual IconId get_Icon();
    public virtual PreProcessingDirective[] GetPreprocessorDefines(IProject project, TargetFrameworkId targetFrameworkId);
    public virtual IPsiSourceFileProperties GetPsiProperties(IProjectFile projectFile, IPsiSourceFile sourceFile, IsCompileService isCompileService);
    public virtual PsiLanguageType GetPsiLanguageType(IProjectFile projectFile);
    public virtual PsiLanguageType GetPsiLanguageType(IPsiSourceFile sourceFile);
    public virtual PsiLanguageType GetPsiLanguageType(ProjectFileType languageType);
    [CanBeNullAttribute]
protected XmlTokenTypes GetXmlTokenTypes(IPsiSourceFile sourceFile);
    public virtual ILexerFactory GetMixedLexerFactory(ISolution solution, IBuffer buffer, IPsiSourceFile sourceFile);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xml.XmlLanguage", "16")]
public class JetBrains.ReSharper.Psi.Xml.XmlTokenTypesImpl : XmlTokenTypes {
    private static int BASE_INDEX;
    public XmlTokenTypesImpl(PsiLanguageType languageType, IXmlTokenBuilder xmlTokenBuilder);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Psi.Xml.ZoneMarker : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
