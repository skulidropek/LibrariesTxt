[LanguageAttribute("JetBrains.ReSharper.Psi.Asp.AspLanguage", "16")]
internal class JetBrains.ReSharper.Refactorings.Asp.AspRefactoringLanguageService : HtmlRefactoringLanguageService {
    public RefactoringsHelper Helper { get; }
    public virtual RefactoringsHelper get_Helper();
    public virtual AdjustNamespacesHelperBase CreateAdjustNamespaceHelper();
    public virtual MoveToFolderHelperBase CreateMoveToFolderHelper();
    public virtual MoveToNamespaceHelperBase CreateMoveToNamespaceHelper();
    public virtual SafeDeleteBase CreateSafeDeleteBase(SafeDeleteWorkflow workflow, ISolution solution, IRefactoringDriver driver);
    public virtual SafeDeleteHelperUnsupported CreateSafeDeleteHelper();
}
internal class JetBrains.ReSharper.Refactorings.Asp.AspRefactoringsHelper : HtmlRefactoringsHelper {
    public static AspRefactoringsHelper Instance;
    private static AspRefactoringsHelper();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Asp.AspLanguage", "16")]
internal class JetBrains.ReSharper.Refactorings.Asp.AspRenameNamespace : object {
    public sealed virtual IEnumerable`1<INamespaceDeclarationUpdater> BuildNamespaceDeclarationUpdatersForFile(INamespace namespace, IFile file, string newName);
    private static bool NamespaceMatches(ICollection`1<string> originalNamespace, ICollection`1<string> namespaceToTest);
    public sealed virtual IConflictSearcher GetConflictSearcher(INamespace namespace, string name);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Refactorings.Asp.CSharp.AspCSharpAdjustNamespaceHelperProvider : object {
    [CompilerGeneratedAttribute]
private AdjustNamespacesHelperBase <Helper>k__BackingField;
    public AdjustNamespacesHelperBase Helper { get; }
    public PsiLanguageType LanguageType { get; }
    public string FileExtension { get; }
    [CompilerGeneratedAttribute]
public sealed virtual AdjustNamespacesHelperBase get_Helper();
    public sealed virtual PsiLanguageType get_LanguageType();
    public sealed virtual string get_FileExtension();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
internal class JetBrains.ReSharper.Refactorings.Asp.CSharp.CSharpExtractContentPlaceholderTemplateProvider : object {
    private Guid myGuid;
    public Guid TemplateId { get; }
    public sealed virtual Guid get_TemplateId();
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Refactorings.Asp.CSharp.ZoneMarker : object {
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Refactorings.Asp.InplaceRefactorings.AspImportOnPasteProvider : object {
    public sealed virtual ReferenceData CreateReferenceData(IReference reference, ResolveResultWithInfo resolveResult);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Asp.AspLanguage", "16")]
internal class JetBrains.ReSharper.Refactorings.Asp.InplaceRefactorings.AspInplaceRenameLanguageSpecifics : HtmlInplaceRenameLanguageSpecifics {
    public virtual bool SuggestRenameOnRenamingReference(IReference reference);
}
public abstract class JetBrains.ReSharper.Refactorings.Asp.Masterpage.AspRefactoringWorkflowBase : DrivenRefactoringWorkflow {
    [CompilerGeneratedAttribute]
private IDataContext <DataContext>k__BackingField;
    [CompilerGeneratedAttribute]
private IAspFile <AspFile>k__BackingField;
    public HelpId HelpKeyword { get; }
    public IDataContext DataContext { get; private set; }
    public IAspFile AspFile { get; private set; }
    protected AspRefactoringWorkflowBase(ISolution solution, string actionId);
    private static T ProcessDataContext(IDataContext context, Func`3<IAspFile, ITextControl, T> processor);
    public virtual bool IsAvailable(IDataContext context);
    protected abstract virtual bool IsAvailable(IAspFile aspFileNode, ITextControl textControl);
    public virtual HelpId get_HelpKeyword();
    public virtual bool Initialize(IDataContext context);
    [CompilerGeneratedAttribute]
public IDataContext get_DataContext();
    [CompilerGeneratedAttribute]
private void set_DataContext(IDataContext value);
    protected abstract virtual bool Initialize(IAspFile aspFile, ITextControl textControl);
    [CompilerGeneratedAttribute]
public IAspFile get_AspFile();
    [CompilerGeneratedAttribute]
private void set_AspFile(IAspFile value);
    [CompilerGeneratedAttribute]
private bool <Initialize>b__6_0(IAspFile aspFile, ITextControl textControl);
}
public class JetBrains.ReSharper.Refactorings.Asp.Masterpage.ExtractContentPlaceholder : RefactoringExecBase`2<ExtractContentPlaceholderWorkflow, ExtractContentPlaceholderRefactoring> {
    public ExtractContentPlaceholder(ExtractContentPlaceholderWorkflow workflow, ISolution solution, IRefactoringDriver driver);
}
public class JetBrains.ReSharper.Refactorings.Asp.Masterpage.ExtractContentPlaceholderRefactoring : DrivenRefactoring`2<ExtractContentPlaceholderWorkflow, ExtractContentPlaceholder> {
    private ITextControl myTextControl;
    private ILanguageManager myLanguageManager;
    public ExtractContentPlaceholderRefactoring(ExtractContentPlaceholderWorkflow workFlow, ISolution solution, IRefactoringDriver driver, ITextControl textControl);
    public virtual bool Execute(IProgressIndicator pi);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.Refactorings.Asp.Masterpage.ExtractContentPlaceholderRefactoring/<CreateMasterPage>d__4")]
private Task`1<bool> CreateMasterPage(IDataContext context);
}
public class JetBrains.ReSharper.Refactorings.Asp.Masterpage.ExtractContentPlaceholderWorkflow : AspRefactoringWorkflowBase {
    private ITextControl myTextControl;
    public RefactoringActionGroup ActionGroup { get; }
    public IRefactoringPage FirstPendingRefactoringPage { get; }
    public bool MightModifyManyDocuments { get; }
    public string Title { get; }
    public ExtractContentPlaceholderWorkflow(ISolution solution, string actionId);
    public virtual RefactoringActionGroup get_ActionGroup();
    public virtual IRefactoringPage get_FirstPendingRefactoringPage();
    public virtual bool get_MightModifyManyDocuments();
    public virtual string get_Title();
    protected virtual bool IsAvailable(IAspFile aspFile, ITextControl textControl);
    protected virtual bool Initialize(IAspFile aspFile, ITextControl textControl);
    public virtual IRefactoringExecuter CreateRefactoring(IRefactoringDriver driver);
}
public interface JetBrains.ReSharper.Refactorings.Asp.Masterpage.IExtractContentPlaceholderTemplateProvider {
    public Guid TemplateId { get; }
    public abstract virtual Guid get_TemplateId();
}
public class JetBrains.ReSharper.Refactorings.Asp.Masterpage.InlineContent : RefactoringExecBase`2<InlineContentWorkflow, InlineContentRefactoring> {
    public InlineContent(InlineContentWorkflow workflow, ISolution solution, IRefactoringDriver driver);
}
[ActionAttribute("JetBrains.ReSharper.Refactorings.Resources.Strings13", "InlineMasterPageContent_Action_text")]
[InternalActionAttribute]
public class JetBrains.ReSharper.Refactorings.Asp.Masterpage.InlineContentAction : RefactoringAction {
}
public class JetBrains.ReSharper.Refactorings.Asp.Masterpage.InlineContentRefactoring : DrivenRefactoring`2<InlineContentWorkflow, InlineContent> {
    private IHtmlTag myContentTag;
    public InlineContentRefactoring(InlineContentWorkflow workFlow, ISolution solution, IRefactoringDriver driver, IHtmlTag contentTag);
    public virtual bool Execute(IProgressIndicator pi);
}
public class JetBrains.ReSharper.Refactorings.Asp.Masterpage.InlineContentWorkflow : AspRefactoringWorkflowBase {
    private IHtmlTag myContentTag;
    public RefactoringActionGroup ActionGroup { get; }
    public IRefactoringPage FirstPendingRefactoringPage { get; }
    public bool MightModifyManyDocuments { get; }
    public string Title { get; }
    public InlineContentWorkflow(ISolution solution, string actionId);
    public virtual RefactoringActionGroup get_ActionGroup();
    public virtual IRefactoringPage get_FirstPendingRefactoringPage();
    public virtual bool get_MightModifyManyDocuments();
    public virtual string get_Title();
    protected virtual bool IsAvailable(IAspFile aspFile, ITextControl textControl);
    private static IHtmlTag GetContentTag(ITreeNode aspFile, TreeTextRange caretTreeRange);
    protected virtual bool Initialize(IAspFile aspFile, ITextControl textControl);
    public virtual IRefactoringExecuter CreateRefactoring(IRefactoringDriver driver);
}
[ActionAttribute("JetBrains.ReSharper.Refactorings.Resources.Strings13", "ExtractContentPlaceholder_Action_Text")]
[InternalActionAttribute]
public class JetBrains.ReSharper.Refactorings.Asp.Masterpage.InternalActions.ExtractContentPlaceholderAction : RefactoringAction {
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Refactorings.Asp.Masterpage.InternalActions.ZoneMarker : object {
}
internal class JetBrains.ReSharper.Refactorings.Asp.Move.AspAdjustNamespacesHelper : AdjustNamespacesHelperBase {
    private IDictionary`2<PsiLanguageType, AdjustNamespacesHelperBase> myCodeBehindHelpers;
    private IDictionary`2<PsiLanguageType, string> myLanguageFileExtensions;
    public bool IsLanguageSupported { get; }
    public virtual bool get_IsLanguageSupported();
    public virtual void FixFile(IFile file, string name, ResolveImagesRepository repository, List`1<IDeclaredElement> elements);
    public virtual bool IsFromExtendsList(ITreeNode element);
    public virtual bool IsReferenceName(ITreeNode element);
    public virtual void SaveUnusedUsings(IFile file, UnusedUsingSaver saver);
    public virtual void RemoveUnusedUsing(IFile file, HashSet`1<ITreeNode> usings);
    public virtual IEnumerable`1<ITreeNode> GetUsingsFromFile(IFile file, IList`1<INamespace> namespaces);
    public virtual void RemoveUsing(ITreeNode element);
    public virtual IDeclaredElement GetImportedSymbolOfUsing(ITreeNode element);
    private static IFile GetCodeBehindFile2(IAspFile aspFile, PsiLanguageType language, string fileExtension);
    public virtual bool FileHasProblems(IFile file, string ns);
    public virtual IReadOnlyList`1<ITypeDeclaration> GetTopLevelTypeDeclarations(IFile file);
}
internal class JetBrains.ReSharper.Refactorings.Asp.Move.AspMoveToFolderHelper : MoveToFolderHelperBase {
    public bool IsLanguageSupported { get; }
    public virtual bool MoveWholeFile(MoveToFolderHierarchyProjectItem item, IFile sourceFile, IFile targetFile, bool fixNamespaces, string name, ResolveImagesRepository repository, bool searchInRelatedFiles);
    public virtual bool get_IsLanguageSupported();
    public virtual IReadOnlyList`1<IDeclaration> GetTopLevelTypeDeclarations(IFile file);
}
internal class JetBrains.ReSharper.Refactorings.Asp.Move.AspMoveToNamespaceHelper : MoveToNamespaceHelperBase {
    public bool IsLanguageSupported { get; }
    public bool AllowEmptyNamespace { get; }
    public virtual bool get_IsLanguageSupported();
    public virtual bool IsFromExtendsList(ITreeNode element);
    public virtual void MovePrimaryDeclaration(IDeclaration typeDeclaration, string newNamespaceName, ResolveImagesRepository repository, IRefactoringDriver driver);
    public virtual string ValidateNamespaceName(string newNamespace, IDeclaration declaration);
    public virtual bool get_AllowEmptyNamespace();
    public virtual IEnumerable`1<ITreeNode> GetUsingsFromFile(IFile file, IList`1<INamespace> namespaces);
    public virtual void RemoveUsing(ITreeNode element);
}
public static class JetBrains.ReSharper.Refactorings.Asp.Move.AspMoveUtil : object {
    public static IReadOnlyList`1<ITypeDeclaration> GetTopLevelTypeDeclarations(IFile file);
}
public interface JetBrains.ReSharper.Refactorings.Asp.Move.IAspCodeBehindAdjustNamespaceHelperProvider {
    public AdjustNamespacesHelperBase Helper { get; }
    public PsiLanguageType LanguageType { get; }
    public string FileExtension { get; }
    public abstract virtual AdjustNamespacesHelperBase get_Helper();
    public abstract virtual PsiLanguageType get_LanguageType();
    public abstract virtual string get_FileExtension();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Asp.AspLanguage", "16")]
internal class JetBrains.ReSharper.Refactorings.Asp.Rename.AspRenameHelper : HtmlRenameHelper {
}
[ShellFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Refactorings.Asp.Rename.AspRenamesFactory : AtomicRenamesFactory {
    public virtual bool IsApplicable(IDeclaredElement declaredElement);
    public virtual RenameAvailabilityCheckResult CheckRenameAvailability(IDeclaredElement element);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[SolutionComponentAttribute("16")]
internal class JetBrains.ReSharper.Refactorings.Asp.Rename.AspRenameSuspiciousReferencesSearchService : SuspiciousReferencesSearchService {
    public virtual IEnumerable`1<string> GetPossibleReferenceNames(IDeclaredElement element, string newName);
    public virtual IEnumerable`1<Type> GetCustomReferenceTypesToIgnore();
}
[FileRenameProviderAttribute("16")]
public class JetBrains.ReSharper.Refactorings.Asp.Rename.MvcFileRenameProvider : object {
    private Lazy`1<MvcReferencedAssembliesService> myMvcReferencedAssembliesService;
    public MvcFileRenameProvider(Lazy`1<MvcReferencedAssembliesService> mvcReferencedAssembliesService);
    public sealed virtual IEnumerable`1<FileRename> GetFileRenames(IDeclaredElement declaredElement, string name);
}
[FileRenameProviderAttribute("16")]
public class JetBrains.ReSharper.Refactorings.Asp.Rename.RazorComponentFileRenameProvider : RelatedFileRenameProvider {
    public virtual IEnumerable`1<FileRename> GetFileRenames(IDeclaredElement declaredElement, string name);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Refactorings.Asp.Rename.ZoneMarker : object {
}
public class JetBrains.ReSharper.Refactorings.Asp.SafeDelete.AspSafeDelete : SafeDeleteBase {
    public AspSafeDelete(SafeDeleteWorkflow workflow, ISolution solution, IRefactoringDriver driver);
    public virtual void RemoveDeclaration(IDeclaration declaration);
    private static bool RemoveIdAttribute(IIdTagAttribute idTagAttribute);
    public virtual bool RemoveReference(IReference reference);
}
public class JetBrains.ReSharper.Refactorings.Asp.SafeDelete.AspSafeDeleteHelper : SafeDeleteHelperUnsupported {
    public bool IsLanguageSupported { get; }
    public virtual bool get_IsLanguageSupported();
    public virtual bool CanBeRemoved(IDeclaredElement element);
    public virtual bool CanBeRemoved(IDeclaration declaration);
    public virtual bool IsBaseClassSpecifier(IReference reference);
    public virtual bool IsInterfaceImplementationSpecifier(IReference reference);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.Refactorings.Asp.VB.AspVBAdjustNamespaceHelperProvider : object {
    [CompilerGeneratedAttribute]
private AdjustNamespacesHelperBase <Helper>k__BackingField;
    public AdjustNamespacesHelperBase Helper { get; }
    public PsiLanguageType LanguageType { get; }
    public string FileExtension { get; }
    [CompilerGeneratedAttribute]
public sealed virtual AdjustNamespacesHelperBase get_Helper();
    public sealed virtual PsiLanguageType get_LanguageType();
    public sealed virtual string get_FileExtension();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
internal class JetBrains.ReSharper.Refactorings.Asp.VB.VBExtractContentPlaceholderTemplateProvider : object {
    private Guid myGuid;
    public Guid TemplateId { get; }
    public sealed virtual Guid get_TemplateId();
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Refactorings.Asp.VB.ZoneMarker : object {
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Refactorings.Asp.ZoneMarker : object {
}
[ShellFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Refactorings.AspRouteTemplates.Rename.Constraints.RouteTemplateImpossibleRenameFactory : AtomicRenamesFactory {
    public virtual bool IsApplicable(IDeclaredElement declaredElement);
    public virtual RenameAvailabilityCheckResult CheckRenameAvailability(IDeclaredElement declaredElement);
}
public class JetBrains.ReSharper.Refactorings.AspRouteTemplates.Rename.Parameters.EndpointRouteParametersConflictCheckingRename : AtomicRenameBase {
    private IAspNetHttpEndpoint myEndpoint;
    [CompilerGeneratedAttribute]
private string <NewName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OldName>k__BackingField;
    [CompilerGeneratedAttribute]
private IDeclaredElement <PrimaryDeclaredElement>k__BackingField;
    public IDeclaredElement NewDeclaredElement { get; }
    public string NewName { get; }
    public string OldName { get; }
    public IDeclaredElement PrimaryDeclaredElement { get; }
    public IList`1<IDeclaredElement> SecondaryDeclaredElements { get; }
    public EndpointRouteParametersConflictCheckingRename(IDeclaredElement declaredElement, string newName, IAspNetHttpEndpoint endpoint);
    public virtual IDeclaredElement get_NewDeclaredElement();
    [CompilerGeneratedAttribute]
public virtual string get_NewName();
    [CompilerGeneratedAttribute]
public virtual string get_OldName();
    [CompilerGeneratedAttribute]
public virtual IDeclaredElement get_PrimaryDeclaredElement();
    public virtual IList`1<IDeclaredElement> get_SecondaryDeclaredElements();
    public virtual void Rename(IRenameRefactoring executer, IProgressIndicator pi, bool hasConflictsWithDeclarations, IRefactoringDriver driver);
}
public class JetBrains.ReSharper.Refactorings.AspRouteTemplates.Rename.Parameters.RouteParameterAtomicRename : AtomicRenameBase {
    private IRouteTemplateProvider myRouteTemplateProvider;
    [CompilerGeneratedAttribute]
private string <NewName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OldName>k__BackingField;
    [CompilerGeneratedAttribute]
private IDeclaredElement <PrimaryDeclaredElement>k__BackingField;
    public IDeclaredElement NewDeclaredElement { get; }
    public string NewName { get; }
    public string OldName { get; }
    public IDeclaredElement PrimaryDeclaredElement { get; }
    public IList`1<IDeclaredElement> SecondaryDeclaredElements { get; }
    public RouteParameterAtomicRename(IDeclaredElement primaryDeclaredElement, string newName, IRouteTemplateProvider routeTemplateProvider);
    public virtual IDeclaredElement get_NewDeclaredElement();
    [CompilerGeneratedAttribute]
public virtual string get_NewName();
    [CompilerGeneratedAttribute]
public virtual string get_OldName();
    [CompilerGeneratedAttribute]
public virtual IDeclaredElement get_PrimaryDeclaredElement();
    public virtual IList`1<IDeclaredElement> get_SecondaryDeclaredElements();
    public virtual void Rename(IRenameRefactoring executer, IProgressIndicator pi, bool hasConflictsWithDeclarations, IRefactoringDriver driver);
    [CompilerGeneratedAttribute]
private bool <Rename>b__15_0(IRouteParameterTreeNode x);
    [CompilerGeneratedAttribute]
private bool <Rename>b__15_1(RouteParameterInstance x);
}
[ShellFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Refactorings.AspRouteTemplates.Rename.Parameters.RouteTemplateParameterRenamesFactory : AtomicRenamesFactory {
    public virtual bool IsApplicable(IDeclaredElement declaredElement);
    private RouteTemplateParameterRenameData BuildRenameData(IDeclaredElement declaredElement);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Refactorings.AspRouteTemplates.Rename.Parameters.RouteTemplateParameterRenamesFactory/<CreateAtomicRenames>d__2")]
public virtual IEnumerable`1<AtomicRenameBase> CreateAtomicRenames(IDeclaredElement declaredElement, string newName, bool doNotAddBindingConflicts);
    public virtual RenameAvailabilityCheckResult CheckRenameAvailability(IDeclaredElement declaredElement);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Refactorings.AspRouteTemplates.Rename.Parameters.RouteTemplateParameterRenamesFactory/<GetTemplateProvidersWithMatchedParameter>d__4")]
private IEnumerable`1<IRouteTemplateProvider> GetTemplateProvidersWithMatchedParameter(IParameter parameter);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Refactorings.AspRouteTemplates.Rename.Parameters.RouteTemplateParameterRenamesFactory/<GetEndpointsToCheckParameterNameConflicts>d__5")]
private IEnumerable`1<IAspNetHttpEndpoint> GetEndpointsToCheckParameterNameConflicts(IParameter parameter);
    private bool ParameterReceivedFromControllerRoute(IPsiModule psiModule, IMethod method, IParameter parameter);
}
public class JetBrains.ReSharper.Refactorings.AspRouteTemplates.Rename.QueryParameters.UrlQueryParameterAtomicRename : AtomicRenameBase {
    [CompilerGeneratedAttribute]
private IDeclaredElement <NewDeclaredElement>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NewName>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IDeclaredElement> <SecondaryDeclaredElements>k__BackingField;
    private IUrlQueryParameterDeclaredElement myQueryParameterDeclaredElement;
    public IDeclaredElement NewDeclaredElement { get; }
    public string NewName { get; }
    public string OldName { get; }
    public IDeclaredElement PrimaryDeclaredElement { get; }
    public IList`1<IDeclaredElement> SecondaryDeclaredElements { get; }
    public UrlQueryParameterAtomicRename(IUrlQueryParameterDeclaredElement element, string newName);
    [CompilerGeneratedAttribute]
public virtual IDeclaredElement get_NewDeclaredElement();
    [CompilerGeneratedAttribute]
public virtual string get_NewName();
    public virtual string get_OldName();
    public virtual IDeclaredElement get_PrimaryDeclaredElement();
    [CompilerGeneratedAttribute]
public virtual IList`1<IDeclaredElement> get_SecondaryDeclaredElements();
    public virtual void Rename(IRenameRefactoring executer, IProgressIndicator pi, bool hasConflictsWithDeclarations, IRefactoringDriver driver);
}
[ShellFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Refactorings.AspRouteTemplates.Rename.QueryParameters.UrlQueryParameterRenamesFactory : AtomicRenamesFactory {
    public virtual bool IsApplicable(IDeclaredElement declaredElement);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Refactorings.AspRouteTemplates.Rename.QueryParameters.UrlQueryParameterRenamesFactory/<CreateAtomicRenames>d__1")]
public virtual IEnumerable`1<AtomicRenameBase> CreateAtomicRenames(IDeclaredElement declaredElement, string newName, bool doNotAddBindingConflicts);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.AspRouteTemplates.RouteTemplateLanguage", "16")]
public class JetBrains.ReSharper.Refactorings.AspRouteTemplates.Rename.RouteTemplateRenameHelper : RenameHelperBase {
    public bool IsLanguageSupported { get; }
    public virtual IList`1<IConflictSearcher> AdditionalConflictsSearchers(IDeclaredElement element, string newName);
    public virtual bool get_IsLanguageSupported();
    public virtual bool ShouldFindSuspiciousReferences();
}
internal class JetBrains.ReSharper.Refactorings.AspRouteTemplates.Rename.Segments.ErasingNameAtomicRename : AtomicRenameBase {
    private IRouteSegmentTreeNode myRouteSegmentTreeNode;
    [CompilerGeneratedAttribute]
private string <NewName>k__BackingField;
    [CompilerGeneratedAttribute]
private IDeclaredElement <PrimaryDeclaredElement>k__BackingField;
    public IDeclaredElement NewDeclaredElement { get; }
    public string NewName { get; }
    public string OldName { get; }
    public IDeclaredElement PrimaryDeclaredElement { get; }
    public IList`1<IDeclaredElement> SecondaryDeclaredElements { get; }
    public ErasingNameAtomicRename(IDeclaredElement primaryDeclaredElement, IRouteSegmentTreeNode routeSegmentTreeNode, string newName);
    public virtual IDeclaredElement get_NewDeclaredElement();
    [CompilerGeneratedAttribute]
public virtual string get_NewName();
    public virtual string get_OldName();
    [CompilerGeneratedAttribute]
public virtual IDeclaredElement get_PrimaryDeclaredElement();
    public virtual IList`1<IDeclaredElement> get_SecondaryDeclaredElements();
    public virtual void Rename(IRenameRefactoring executer, IProgressIndicator pi, bool hasConflictsWithDeclarations, IRefactoringDriver driver);
}
internal class JetBrains.ReSharper.Refactorings.AspRouteTemplates.Rename.Segments.SettingNameAtomicRename : AtomicRenameBase {
    private IRouteSegmentTreeNode myRouteSegmentTreeNode;
    private IUrlSegmentDeclaredElement myPrimaryDeclaredElement;
    [CompilerGeneratedAttribute]
private string <NewName>k__BackingField;
    public IDeclaredElement NewDeclaredElement { get; }
    public string NewName { get; }
    public string OldName { get; }
    public IDeclaredElement PrimaryDeclaredElement { get; }
    public IList`1<IDeclaredElement> SecondaryDeclaredElements { get; }
    public SettingNameAtomicRename(IUrlSegmentDeclaredElement primaryDeclaredElement, IRouteSegmentTreeNode routeSegmentTreeNode, string newName);
    public virtual IDeclaredElement get_NewDeclaredElement();
    [CompilerGeneratedAttribute]
public virtual string get_NewName();
    public virtual string get_OldName();
    public virtual IDeclaredElement get_PrimaryDeclaredElement();
    public virtual IList`1<IDeclaredElement> get_SecondaryDeclaredElements();
    public virtual void Rename(IRenameRefactoring executer, IProgressIndicator pi, bool hasConflictsWithDeclarations, IRefactoringDriver driver);
}
public class JetBrains.ReSharper.Refactorings.AspRouteTemplates.Rename.Segments.UrlSegmentRenameData : object {
    [CompilerGeneratedAttribute]
private IEndpoint <Endpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<List`1<IRouteSegmentTreeNode>> <SegmentsDeclarationNodes>k__BackingField;
    [CompilerGeneratedAttribute]
private DocumentRange <SegmentDeclarationRange>k__BackingField;
    [CompilerGeneratedAttribute]
private IRouteTemplateProvider <RouteSource>k__BackingField;
    public IEndpoint Endpoint { get; private set; }
    public List`1<List`1<IRouteSegmentTreeNode>> SegmentsDeclarationNodes { get; private set; }
    public DocumentRange SegmentDeclarationRange { get; private set; }
    public IRouteTemplateProvider RouteSource { get; private set; }
    public static UrlSegmentRenameData CanRename(IEndpoint endpoint, List`1<List`1<IRouteSegmentTreeNode>> nodes);
    public static UrlSegmentRenameData CanNotRename(IEndpoint endpoint, DocumentRange segmentDeclarationRange);
    public static UrlSegmentRenameData CanNotRename(IAspNetHttpEndpoint endpoint, IRouteTemplateProvider routeSource);
    [CompilerGeneratedAttribute]
public IEndpoint get_Endpoint();
    [CompilerGeneratedAttribute]
private void set_Endpoint(IEndpoint value);
    [CompilerGeneratedAttribute]
public List`1<List`1<IRouteSegmentTreeNode>> get_SegmentsDeclarationNodes();
    [CompilerGeneratedAttribute]
private void set_SegmentsDeclarationNodes(List`1<List`1<IRouteSegmentTreeNode>> value);
    [CompilerGeneratedAttribute]
public DocumentRange get_SegmentDeclarationRange();
    [CompilerGeneratedAttribute]
private void set_SegmentDeclarationRange(DocumentRange value);
    [CompilerGeneratedAttribute]
public IRouteTemplateProvider get_RouteSource();
    [CompilerGeneratedAttribute]
private void set_RouteSource(IRouteTemplateProvider value);
}
[ShellFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Refactorings.AspRouteTemplates.Rename.Segments.UrlSegmentRenamesFactory : AtomicRenamesFactory {
    public virtual bool IsApplicable(IDeclaredElement declaredElement);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Refactorings.AspRouteTemplates.Rename.Segments.UrlSegmentRenamesFactory/<CreateAtomicRenames>d__1")]
public virtual IEnumerable`1<AtomicRenameBase> CreateAtomicRenames(IDeclaredElement declaredElement, string newName, bool doNotAddBindingConflicts);
}
internal class JetBrains.ReSharper.Refactorings.AspRouteTemplates.Rename.Segments.UrlSegmentsAtomicRename : AtomicRenameBase {
    [CompilerGeneratedAttribute]
private IDeclaredElement <NewDeclaredElement>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NewName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OldName>k__BackingField;
    [CompilerGeneratedAttribute]
private IDeclaredElement <PrimaryDeclaredElement>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IDeclaredElement> <SecondaryDeclaredElements>k__BackingField;
    public IDeclaredElement NewDeclaredElement { get; }
    public string NewName { get; }
    public string OldName { get; }
    public IDeclaredElement PrimaryDeclaredElement { get; }
    public IList`1<IDeclaredElement> SecondaryDeclaredElements { get; }
    public UrlSegmentsAtomicRename(IUrlSegmentDeclaredElement urlSegmentDeclaredElement, string oldName, string newName);
    [CompilerGeneratedAttribute]
public virtual IDeclaredElement get_NewDeclaredElement();
    [CompilerGeneratedAttribute]
public virtual string get_NewName();
    [CompilerGeneratedAttribute]
public virtual string get_OldName();
    [CompilerGeneratedAttribute]
public virtual IDeclaredElement get_PrimaryDeclaredElement();
    [CompilerGeneratedAttribute]
public virtual IList`1<IDeclaredElement> get_SecondaryDeclaredElements();
    public virtual void Rename(IRenameRefactoring executer, IProgressIndicator pi, bool hasConflictsWithDeclarations, IRefactoringDriver driver);
}
public class JetBrains.ReSharper.Refactorings.AspRouteTemplates.Rename.Segments.UrlSegmentsConflictSearcher : object {
    private IUrlSegmentDeclaredElement myDeclaredElement;
    [CompilerGeneratedAttribute]
private ConflictSearchResult <LastResult>k__BackingField;
    public ConflictSearchResult LastResult { get; private set; }
    public UrlSegmentsConflictSearcher(IDeclaredElement declaredElement);
    public sealed virtual ConflictSearchResult SearchConflicts(IProgressIndicator progressIndicator, bool canPerformRefactoring);
    [CompilerGeneratedAttribute]
public sealed virtual ConflictSearchResult get_LastResult();
    [CompilerGeneratedAttribute]
private void set_LastResult(ConflictSearchResult value);
}
public class JetBrains.ReSharper.Refactorings.AspRouteTemplates.Rename.Segments.UrlSegmentsRenameData : object {
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<UrlSegmentRenameData> <RenameDatum>k__BackingField;
    public IReadOnlyCollection`1<UrlSegmentRenameData> RenameDatum { get; }
    public UrlSegmentsRenameData(IReadOnlyCollection`1<UrlSegmentRenameData> renameDatum);
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<UrlSegmentRenameData> get_RenameDatum();
}
public static class JetBrains.ReSharper.Refactorings.AspRouteTemplates.Rename.Segments.UrlSegmentsRenameDataBuilder : object {
    public static UrlSegmentsRenameData Build(IReadOnlyList`1<IEndpointsProvider> endpointsProviders, UrlPath urlPath);
    [NotNullAttribute]
private static List`1<UrlSegmentRenameData> Build(IAspNetHttpEndpoint aspNetHttpEndpoint, int segmentIndex);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Refactorings.AspRouteTemplates.ZoneMarker : object {
}
public abstract class JetBrains.ReSharper.Refactorings.Common.MoveToCodeBehind.ContextProviders.MoveToCodeBehindContextProviderBase : Type2PartialContextProviderBase`1<IMoveToCodeBehindHelper> {
    protected MoveToCodeBehindContextProviderBase(ILanguageMapOfWorkflow`1<IMoveToCodeBehindHelper> helper);
    [CanBeNullAttribute]
public IMoveToCodeBehindContext GetWorkflowContext(IDataContext context);
    protected abstract virtual TreeTextRange GetMoveRange(IWebFileWithCodeBehind webPsiFile, IMoveToCodeBehindHelper helper);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Refactorings.Common.MoveToCodeBehind.ContextProviders.MoveToCodeBehindContextProviderBase/<GetCodeBehindDeclarations>d__3")]
[ItemNotNullAttribute]
private static IEnumerable`1<ITypeMemberDeclaration> GetCodeBehindDeclarations(IFile codeBehindPsiFile, TreeTextRange codeBehindRange);
    [CanBeNullAttribute]
private static IDeclaration GetOwnerTypeDeclaration(ITypeElement ownerType, IPsiSourceFile psiSourceFile, TreeTextRange codeBehindRange);
}
public class JetBrains.ReSharper.Refactorings.Common.MoveToCodeBehind.ContextProviders.MoveToCodeBehindCustomFileRangeContextProvider : MoveToCodeBehindContextProviderBase {
    public MoveToCodeBehindCustomFileRangeContextProvider(ILanguageMapOfWorkflow`1<IMoveToCodeBehindHelper> helper);
    protected virtual TreeTextRange GetMoveRange(IWebFileWithCodeBehind webPsiFile, IMoveToCodeBehindHelper helper);
}
public class JetBrains.ReSharper.Refactorings.Common.MoveToCodeBehind.ContextProviders.MoveToCodeBehindSelectionContextProvider : MoveToCodeBehindContextProviderBase {
    [CompilerGeneratedAttribute]
private DocumentRange <selectionDocumentRange>P;
    public MoveToCodeBehindSelectionContextProvider(ILanguageMapOfWorkflow`1<IMoveToCodeBehindHelper> helper, DocumentRange selectionDocumentRange);
    protected virtual TreeTextRange GetMoveRange(IWebFileWithCodeBehind webPsiFile, IMoveToCodeBehindHelper helper);
}
public interface JetBrains.ReSharper.Refactorings.Common.MoveToCodeBehind.IMoveToCodeBehindHelper {
    public abstract virtual TreeTextRange GetCustomRange(IWebFileWithCodeBehind psiFile);
    public abstract virtual TreeTextRange GetRangeFromSelection(IWebFileWithCodeBehind psiFile, TreeTextRange selectedTreeRange);
    public abstract virtual VirtualFileSystemPath ComposeCodeBehindFilePath(IProjectFile primaryProjectFile, string codeBehindFileExtension);
}
public interface JetBrains.ReSharper.Refactorings.Common.MoveToCodeBehind.Model.IMoveToCodeBehindContext {
    [NotNullAttribute]
public PsiLanguageType CodeBehindLanguage { get; }
    [NotNullAttribute]
public ITypeElement OwnerType { get; }
    [NotNullAttribute]
public IDeclaration OwnerTypeDeclaration { get; }
    [NotNullAttribute]
public PsiLanguageType PrimaryLanguage { get; }
    [NotNullAttribute]
public IProjectFile PrimaryProjectFile { get; }
    [CanBeNullAttribute]
public ITextControl TextControl { get; }
    [NotNullAttribute]
[ItemNotNullAttribute]
public IReadOnlyList`1<IDeclaration> SelectedDeclarations { get; }
    public abstract virtual PsiLanguageType get_CodeBehindLanguage();
    public abstract virtual ITypeElement get_OwnerType();
    public abstract virtual IDeclaration get_OwnerTypeDeclaration();
    public abstract virtual PsiLanguageType get_PrimaryLanguage();
    public abstract virtual IProjectFile get_PrimaryProjectFile();
    public abstract virtual ITextControl get_TextControl();
    public abstract virtual IReadOnlyList`1<IDeclaration> get_SelectedDeclarations();
}
public class JetBrains.ReSharper.Refactorings.Common.MoveToCodeBehind.Model.MoveToCodeBehindContext : object {
    [CompilerGeneratedAttribute]
private PsiLanguageType <CodeBehindLanguage>k__BackingField;
    [CompilerGeneratedAttribute]
private ITypeElement <OwnerType>k__BackingField;
    [CompilerGeneratedAttribute]
private IDeclaration <OwnerTypeDeclaration>k__BackingField;
    [CompilerGeneratedAttribute]
private PsiLanguageType <PrimaryLanguage>k__BackingField;
    [CompilerGeneratedAttribute]
private IProjectFile <PrimaryProjectFile>k__BackingField;
    [CompilerGeneratedAttribute]
private ITextControl <TextControl>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<IDeclaration> <SelectedDeclarations>k__BackingField;
    public PsiLanguageType CodeBehindLanguage { get; }
    public ITypeElement OwnerType { get; }
    public IDeclaration OwnerTypeDeclaration { get; }
    public PsiLanguageType PrimaryLanguage { get; }
    public IProjectFile PrimaryProjectFile { get; }
    public ITextControl TextControl { get; }
    public IReadOnlyList`1<IDeclaration> SelectedDeclarations { get; }
    public MoveToCodeBehindContext(PsiLanguageType codeBehindLanguage, ITypeElement ownerType, IDeclaration ownerTypeDeclaration, PsiLanguageType primaryLanguage, IProjectFile primaryProjectFile, ITextControl textControl, IReadOnlyList`1<IDeclaration> selectedDeclarations);
    [CompilerGeneratedAttribute]
public sealed virtual PsiLanguageType get_CodeBehindLanguage();
    [CompilerGeneratedAttribute]
public sealed virtual ITypeElement get_OwnerType();
    [CompilerGeneratedAttribute]
public sealed virtual IDeclaration get_OwnerTypeDeclaration();
    [CompilerGeneratedAttribute]
public sealed virtual PsiLanguageType get_PrimaryLanguage();
    [CompilerGeneratedAttribute]
public sealed virtual IProjectFile get_PrimaryProjectFile();
    [CompilerGeneratedAttribute]
public sealed virtual ITextControl get_TextControl();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyList`1<IDeclaration> get_SelectedDeclarations();
}
public class JetBrains.ReSharper.Refactorings.Common.MoveToCodeBehind.Model.MoveToCodeBehindDataModel : Type2PartialDataModel {
    [CompilerGeneratedAttribute]
private PsiLanguageType <PrimaryPsiLanguage>k__BackingField;
    public PsiLanguageType PrimaryPsiLanguage { get; public set; }
    public MoveToCodeBehindDataModel(IDeclaration typeDeclaration, IDeclaration selectedExistingPart, IList`1<IDeclaration> selectedTypeMembers, IProjectFile createdFile, PsiLanguageType primaryPsiLanguage);
    [CompilerGeneratedAttribute]
public PsiLanguageType get_PrimaryPsiLanguage();
    [CompilerGeneratedAttribute]
public void set_PrimaryPsiLanguage(PsiLanguageType value);
}
public class JetBrains.ReSharper.Refactorings.Common.MoveToCodeBehind.Model.MoveToCodeBehindDataProvider : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<ITreeNodePointer`1<IDeclaration>> <DeclarationsToMove>k__BackingField;
    [CompilerGeneratedAttribute]
private ITreeNodePointer`1<IDeclaration> <ExistingTypePartDeclaration>k__BackingField;
    [CompilerGeneratedAttribute]
private ITreeNodePointer`1<IDeclaration> <TypeDeclaration>k__BackingField;
    [CompilerGeneratedAttribute]
private VirtualFileSystemPath <NewFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private IProjectFile <PrimaryProjectFile>k__BackingField;
    [CompilerGeneratedAttribute]
private PsiLanguageType <PrimaryLanguage>k__BackingField;
    public IReadOnlyList`1<ITreeNodePointer`1<IDeclaration>> DeclarationsToMove { get; }
    [CanBeNullAttribute]
public ITreeNodePointer`1<IDeclaration> ExistingTypePartDeclaration { get; }
    public ITreeNodePointer`1<IDeclaration> TypeDeclaration { get; }
    public VirtualFileSystemPath NewFilePath { get; }
    public IProjectFile PrimaryProjectFile { get; }
    public PsiLanguageType PrimaryLanguage { get; }
    public bool NonInteractive { get; }
    public MoveToCodeBehindDataProvider(MoveToCodeBehindWorkflow workflow, IMoveToCodeBehindContext workflowContext, PsiProjectFileTypeCoordinator coordinator, ProjectFileExtensions projectFileExtensions);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<ITreeNodePointer`1<IDeclaration>> get_DeclarationsToMove();
    [CompilerGeneratedAttribute]
public ITreeNodePointer`1<IDeclaration> get_ExistingTypePartDeclaration();
    [CompilerGeneratedAttribute]
public ITreeNodePointer`1<IDeclaration> get_TypeDeclaration();
    [CompilerGeneratedAttribute]
public VirtualFileSystemPath get_NewFilePath();
    [CompilerGeneratedAttribute]
public IProjectFile get_PrimaryProjectFile();
    [CompilerGeneratedAttribute]
public PsiLanguageType get_PrimaryLanguage();
    public virtual bool get_NonInteractive();
    protected VirtualFileSystemPath GetNewPathFromPrimaryFile(MoveToCodeBehindWorkflow workflow, IMoveToCodeBehindContext context, PsiProjectFileTypeCoordinator coordinator, ProjectFileExtensions projectFileExtensions);
    [CanBeNullAttribute]
protected ITreeNodePointer`1<IDeclaration> FindExistingPart(IMoveToCodeBehindContext context);
}
public class JetBrains.ReSharper.Refactorings.Common.MoveToCodeBehind.MoveToCodeBehindRefactoring : DrivenRefactoringBase`1<MoveToCodeBehindWorkflow> {
    public MoveToCodeBehindRefactoring(MoveToCodeBehindWorkflow workflow, ISolution solution, IRefactoringDriver driver);
    public virtual bool Execute(IProgressIndicator pi);
}
public class JetBrains.ReSharper.Refactorings.Common.MoveToCodeBehind.MoveToCodeBehindUnsupported : object {
    private static string UNSUPPORTED_MESSAGE;
    public bool IsLanguageSupported { get; }
    public sealed virtual bool get_IsLanguageSupported();
    public sealed virtual TreeTextRange GetCustomRange(IWebFileWithCodeBehind psiFile);
    public sealed virtual TreeTextRange GetRangeFromSelection(IWebFileWithCodeBehind psiFile, TreeTextRange selectedTreeRange);
    public sealed virtual VirtualFileSystemPath ComposeCodeBehindFilePath(IProjectFile primaryProjectFile, string codeBehindFileExtension);
    public sealed virtual ITypeDeclaration AddNewTypePart(Type2PartialDataModel model, ITreeNode& formatRoot);
    public sealed virtual string GetExtension();
    public sealed virtual TreeTextRange AdjustSelectedRange(IFile psiFile, TreeTextRange treeTextRange, String& partName);
    public sealed virtual bool IsAvailableForTypeElement(ITypeElement typeElement, IPsiSourceFile psiSourceFile);
    public sealed virtual bool CanSuggestProjectFile(IProjectFile projectFile);
}
public class JetBrains.ReSharper.Refactorings.Common.MoveToCodeBehind.MoveToCodeBehindWorkflow : DrivenRefactoringWorkflow2`1<IMoveToCodeBehindHelper> {
    [CompilerGeneratedAttribute]
private MoveToCodeBehindDataModel <DataModel>k__BackingField;
    [CompilerGeneratedAttribute]
private MoveToCodeBehindDataProvider <DataProvider>k__BackingField;
    public MoveToCodeBehindDataModel DataModel { get; private set; }
    public MoveToCodeBehindDataProvider DataProvider { get; public set; }
    public IConflictSearcher ConflictSearcher { get; }
    public bool HasUI { get; }
    public HelpId HelpKeyword { get; }
    public IRefactoringPage FirstPendingRefactoringPage { get; }
    public bool MightModifyManyDocuments { get; }
    public string Title { get; }
    public RefactoringActionGroup ActionGroup { get; }
    public MoveToCodeBehindWorkflow(ISolution solution, string actionId);
    [CompilerGeneratedAttribute]
public MoveToCodeBehindDataModel get_DataModel();
    [CompilerGeneratedAttribute]
private void set_DataModel(MoveToCodeBehindDataModel value);
    [CompilerGeneratedAttribute]
public sealed virtual MoveToCodeBehindDataProvider get_DataProvider();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DataProvider(MoveToCodeBehindDataProvider value);
    public virtual IConflictSearcher get_ConflictSearcher();
    public virtual bool get_HasUI();
    public virtual HelpId get_HelpKeyword();
    public virtual IRefactoringPage get_FirstPendingRefactoringPage();
    public virtual bool get_MightModifyManyDocuments();
    public virtual string get_Title();
    public virtual RefactoringActionGroup get_ActionGroup();
    public virtual bool IsAvailable(IDataContext context);
    public virtual bool Initialize(IDataContext context);
    public virtual bool PreExecute(IProgressIndicator pi);
    protected virtual void OnSuccessfullyFinished();
    public virtual IRefactoringExecuter CreateRefactoring(IRefactoringDriver driver);
    protected virtual IMoveToCodeBehindHelper CreateUnsupportedHelper();
    protected virtual IMoveToCodeBehindHelper CreateHelper(IRefactoringLanguageService service);
    [CanBeNullAttribute]
private IMoveToCodeBehindContext GetWorkflowContext(IDataContext context);
}
public abstract class JetBrains.ReSharper.Refactorings.Common.Rename.WebAtomicRenameBase : AtomicRenameBase {
    private IDeclaredElementPointer`1<IDeclaredElement> myPointer;
    protected List`1<IReferencePointer> myCheckedOccurrences;
    protected IDeclaredElementPointer`1<IDeclaredElement> myNewPointer;
    [CompilerGeneratedAttribute]
private string <NewName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OldName>k__BackingField;
    public string NewName { get; }
    public string OldName { get; }
    public IDeclaredElement NewDeclaredElement { get; }
    public IDeclaredElement PrimaryDeclaredElement { get; }
    public IList`1<IDeclaredElement> SecondaryDeclaredElements { get; }
    protected WebAtomicRenameBase(IDeclaredElement element, string newName);
    [CompilerGeneratedAttribute]
public virtual string get_NewName();
    [CompilerGeneratedAttribute]
public virtual string get_OldName();
    public virtual IDeclaredElement get_NewDeclaredElement();
    public virtual IDeclaredElement get_PrimaryDeclaredElement();
    public virtual IList`1<IDeclaredElement> get_SecondaryDeclaredElements();
    public virtual IRefactoringPage CreateRenamesConfirmationPage(IRenameWorkflow renameWorkflow, IProgressIndicator pi);
    [CompilerGeneratedAttribute]
private void <CreateRenamesConfirmationPage>b__16_2(IList`1<IOccurrence> list, bool allEnabled);
}
[ActionAttribute("JetBrains.ReSharper.Refactorings.Resources.Strings13", "ExtractCSSStyleActionText")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Refactorings.Css.Refactorings.ExtractStyle.ExtractStyleAction : ExtensibleRefactoringAction`1<IExtractStyleWorkflowProvider> {
    public static string ACTION_ID;
    protected RichText Caption { get; }
    protected virtual RichText get_Caption();
}
public class JetBrains.ReSharper.Refactorings.Css.Refactorings.ExtractStyle.ExtractStyleDrivenWorkflow : DrivenRefactoringWorkflow2`1<IWorkflowExec> {
    [CanBeNullAttribute]
private IExtractStyleDataProvider myDataProvider;
    private DocumentRange mySelectionRange;
    [CompilerGeneratedAttribute]
private string <Selector>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ITreeNodePointer`1<ICssPropertyStatement>> <PropertyStatements>k__BackingField;
    [CompilerGeneratedAttribute]
private ITreeNodePointer`1<IRuleset> <Ruleset>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractStyleRefactoringAction <Action>k__BackingField;
    public string Title { get; }
    public RefactoringActionGroup ActionGroup { get; }
    public HelpId HelpKeyword { get; }
    public bool MightModifyManyDocuments { get; }
    public IRefactoringPage FirstPendingRefactoringPage { get; }
    public DocumentRange SelectionRange { get; }
    [NotNullAttribute]
public string Selector { get; public set; }
    [NotNullAttribute]
public IList`1<ITreeNodePointer`1<ICssPropertyStatement>> PropertyStatements { get; public set; }
    [CanBeNullAttribute]
public ITreeNodePointer`1<IRuleset> Ruleset { get; private set; }
    [CanBeNullAttribute]
public IExtractStyleRefactoringAction Action { get; public set; }
    public ExtractStyleDrivenWorkflow(ISolution solution, string actionId);
    public virtual string get_Title();
    public virtual RefactoringActionGroup get_ActionGroup();
    public virtual HelpId get_HelpKeyword();
    public virtual bool get_MightModifyManyDocuments();
    public virtual IRefactoringPage get_FirstPendingRefactoringPage();
    public DocumentRange get_SelectionRange();
    [CompilerGeneratedAttribute]
public string get_Selector();
    [CompilerGeneratedAttribute]
public void set_Selector(string value);
    [CompilerGeneratedAttribute]
public IList`1<ITreeNodePointer`1<ICssPropertyStatement>> get_PropertyStatements();
    [CompilerGeneratedAttribute]
public void set_PropertyStatements(IList`1<ITreeNodePointer`1<ICssPropertyStatement>> value);
    [CompilerGeneratedAttribute]
public ITreeNodePointer`1<IRuleset> get_Ruleset();
    [CompilerGeneratedAttribute]
private void set_Ruleset(ITreeNodePointer`1<IRuleset> value);
    [CompilerGeneratedAttribute]
public IExtractStyleRefactoringAction get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(IExtractStyleRefactoringAction value);
    public virtual bool IsAvailable(IDataContext context);
    [CanBeNullAttribute]
private IExtractStyleRefactoringAction GetExtractStyleAction(ITreeNodePointer`1<IRuleset> ruleset);
    public virtual bool Initialize(IDataContext context);
    public virtual IRefactoringExecuter CreateRefactoring(IRefactoringDriver driver);
    protected virtual IWorkflowExec CreateHelper(IRefactoringLanguageService service);
    protected virtual IWorkflowExec CreateUnsupportedHelper();
    public void SetDataProvider(IExtractStyleDataProvider dataProvider);
    public bool IsValid();
    [CanBeNullAttribute]
private static ITreeNodePointer`1<IRuleset> GetCurrentRuleset(IDataContext context, DocumentRange& selectionRange);
}
public class JetBrains.ReSharper.Refactorings.Css.Refactorings.ExtractStyle.ExtractStylePage : SingleBeRefactoringPage {
    public static string SelectorTextBoxId;
    public static string PropertiesTreeGridId;
    private ExtractStyleDrivenWorkflow myWorkflow;
    private List`1<ITreeNodePointer`1<ICssPropertyStatement>> myElements;
    public string Title { get; }
    public string Description { get; }
    public ExtractStylePage(ExtractStyleDrivenWorkflow workflow);
    public virtual string get_Title();
    public virtual string get_Description();
    public virtual BeControl GetPageContent();
    public virtual void Commit();
    private string OfferDefaultSelector();
    private bool IsValidSelector(string text);
    private static bool IsSelected(ITreeNodePointer`1<ICssPropertyStatement> pointer, ExtractStyleDrivenWorkflow workflow);
}
public class JetBrains.ReSharper.Refactorings.Css.Refactorings.ExtractStyle.ExtractStyleRefactoring : DrivenRefactoringBase`1<ExtractStyleDrivenWorkflow> {
    public ExtractStyleRefactoring(ExtractStyleDrivenWorkflow workflow, ISolution solution, IRefactoringDriver driver);
    public virtual bool Execute(IProgressIndicator pi);
}
[RefactoringWorkflowProviderAttribute("16")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Refactorings.Css.Refactorings.ExtractStyle.ExtractStyleWorkflowProvider : object {
    public sealed virtual IEnumerable`1<IRefactoringWorkflow> CreateWorkflow(IDataContext dataContext);
}
public interface JetBrains.ReSharper.Refactorings.Css.Refactorings.ExtractStyle.IExtractStyleDataProvider {
    [NotNullAttribute]
public string Selector { get; }
    public abstract virtual string get_Selector();
    [NotNullAttribute]
public abstract virtual IList`1<ITreeNodePointer`1<ICssPropertyStatement>> GetSelectedPropertyStatements(ITreeNodePointer`1<IRuleset> ruleset);
}
public interface JetBrains.ReSharper.Refactorings.Css.Refactorings.ExtractStyle.IExtractStyleWorkflowProvider {
}
[ExtensionAttribute]
internal static class JetBrains.ReSharper.Refactorings.Css.Refactorings.ExtractStyle.ProjectItemUtil : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static VirtualFileSystemPath ConvertToProjectRelativePath(IProjectItem projectItem);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Refactorings.Css.Refactorings.ExtractStyle.RefactoringActions.ExtractStyleFromCssRefactoringAction : object {
    public sealed virtual bool CanExtract(ITreeNodePointer`1<IRuleset> pointer);
    public string OfferTargetFile(ITreeNodePointer`1<IRuleset> pointer);
    public string OfferDefaultTargetFile(ITreeNodePointer`1<IRuleset> pointer);
    public bool CanExtractStyletTo(ITreeNodePointer`1<IRuleset> pointer, IProjectFile targetFile);
    public sealed virtual ITreeNodePointer`1<IRuleset> Execute(ExtractStyleDrivenWorkflow workflow, IProgressIndicator pi);
    private static ITreeNodePointer`1<IRuleset> ExtractStyle(ExtractStyleDrivenWorkflow workflow, IProgressIndicator pi, IRuleset rulesetNode);
    private static bool CreateNewStyle(string selector, IEnumerable`1<ICssPropertyStatement> propertyStatements, CssElementFactory cssElementFactory, IRuleset& newRuleset);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Refactorings.Css.Refactorings.ExtractStyle.RefactoringActions.ExtractStyleFromHtmlRefactoringAction : object {
    public sealed virtual bool CanExtract(ITreeNodePointer`1<IRuleset> pointer);
    public sealed virtual ITreeNodePointer`1<IRuleset> Execute(ExtractStyleDrivenWorkflow workflow, IProgressIndicator pi);
    private ITreeNodePointer`1<IRuleset> ExtractStyle(ExtractStyleDrivenWorkflow workflow, IProgressIndicator pi, IHtmlFile currentPsiFile, IRuleset rulesetNode);
    private void ProcessCurrentHtmlTag(IRuleset newRuleset, IHtmlTag htmlTag);
    private static ISimpleSelector GetSimpleSelector(ISelector selector);
    private void ApplyNewSelector(IHtmlTag htmlTag, List`1<ISimpleSelector> selectors);
    private static bool CreateNewStyle(string selector, IEnumerable`1<ICssPropertyStatement> propertyStatements, CssElementFactory cssElementFactory, IRuleset& newRuleset);
}
public interface JetBrains.ReSharper.Refactorings.Css.Refactorings.ExtractStyle.RefactoringActions.IExtractStyleRefactoringAction {
    public abstract virtual bool CanExtract(ITreeNodePointer`1<IRuleset> pointer);
    [CanBeNullAttribute]
public abstract virtual ITreeNodePointer`1<IRuleset> Execute(ExtractStyleDrivenWorkflow workflow, IProgressIndicator pi);
}
public static class JetBrains.ReSharper.Refactorings.Css.Refactorings.HtmlCssHelper : object {
    public static IHtmlTag GetCurrentTag(IHtmlFile currentHtmlFile, DocumentRange range);
    public static ICssFileSection GetCssSectionForStyleTag(IHtmlFile htmlFile);
    public static void FixIdAttribute(IHtmlTag htmlTag, string id);
    public static ITagAttribute GetIdAttribute(IHtmlTag htmlTag);
    public static void FixClassAttribute(IHtmlTag htmlTag, JetHashSet`1<string> classes);
    public static ICssFileSection CreateStyleTag(IHtmlFile htmlFile);
    public static ICssFileSection CreateStyleTag2(IHtmlFile htmlFile);
    public static bool IsEmptyTag(IHtmlTag htmlTag);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Css.CssLanguage", "16")]
public class JetBrains.ReSharper.Refactorings.Css.Refactorings.InplaceRefactorings.CssInplaceRenameLanguageSpecifics : object {
    public sealed virtual bool SuggestRenameOnRenamingReference(IReference reference);
    public sealed virtual bool SuggestRenameOnRenamingTreeNode(TreeTextRange treeRange, ITreeNode node);
}
[RefactoringWorkflowProviderAttribute("16")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Refactorings.Css.Refactorings.MoveStyle.CssMoveWorkflowProvider : MoveWorkflowProvider {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Refactorings.Css.Refactorings.MoveStyle.CssMoveWorkflowProvider/<CreateWorkflow>d__0")]
public virtual IEnumerable`1<IRefactoringWorkflow> CreateWorkflow(IDataContext dataContext);
}
public class JetBrains.ReSharper.Refactorings.Css.Refactorings.MoveStyle.MoveStyleDrivenWorkflow : DrivenRefactoringWorkflow2`1<IWorkflowExec> {
    [CompilerGeneratedAttribute]
private IProjectFile <TargetFile>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<ITreeNodePointer`1<ICssRule>> <Declarations>k__BackingField;
    [CompilerGeneratedAttribute]
private IMoveStyleRefactoringAction <Action>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InsertImportDirective>k__BackingField;
    public string Title { get; }
    public RefactoringActionGroup ActionGroup { get; }
    public HelpId HelpKeyword { get; }
    public bool MightModifyManyDocuments { get; }
    public IRefactoringPage FirstPendingRefactoringPage { get; }
    public IProjectFile TargetFile { get; public set; }
    [NotNullAttribute]
public ICollection`1<ITreeNodePointer`1<ICssRule>> Declarations { get; public set; }
    public IMoveStyleRefactoringAction Action { get; public set; }
    public bool InsertImportDirective { get; public set; }
    public MoveStyleDrivenWorkflow(ISolution solution, string actionId);
    public virtual string get_Title();
    public virtual RefactoringActionGroup get_ActionGroup();
    public virtual HelpId get_HelpKeyword();
    public virtual bool get_MightModifyManyDocuments();
    public virtual IRefactoringPage get_FirstPendingRefactoringPage();
    [CompilerGeneratedAttribute]
public IProjectFile get_TargetFile();
    [CompilerGeneratedAttribute]
public void set_TargetFile(IProjectFile value);
    [CompilerGeneratedAttribute]
public ICollection`1<ITreeNodePointer`1<ICssRule>> get_Declarations();
    [CompilerGeneratedAttribute]
public void set_Declarations(ICollection`1<ITreeNodePointer`1<ICssRule>> value);
    [CompilerGeneratedAttribute]
public IMoveStyleRefactoringAction get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(IMoveStyleRefactoringAction value);
    [CompilerGeneratedAttribute]
public bool get_InsertImportDirective();
    [CompilerGeneratedAttribute]
public void set_InsertImportDirective(bool value);
    public virtual bool IsAvailable(IDataContext context);
    public virtual bool Initialize(IDataContext context);
    public virtual IRefactoringExecuter CreateRefactoring(IRefactoringDriver driver);
    public bool IsValid();
    protected virtual IWorkflowExec CreateHelper(IRefactoringLanguageService service);
    protected virtual IWorkflowExec CreateUnsupportedHelper();
    [NotNullAttribute]
private static ICollection`1<ITreeNodePointer`1<ICssRule>> GetDeclarations(IDataContext context);
    private static ICssRule GetDeclaration(ITreeNode node);
}
public class JetBrains.ReSharper.Refactorings.Css.Refactorings.MoveStyle.MoveStylePage : SingleBeRefactoringPage {
    public static string TargetFileTextBoxId;
    public static string ImportDirectiveCheckBoxId;
    private MoveStyleDrivenWorkflow myWorkflow;
    private string myTargetFileName;
    private IList`1<IMoveStyleRefactoringAction> myActions;
    private IProjectFolder myProjectFolder;
    public string Title { get; }
    public string Description { get; }
    public MoveStylePage(MoveStyleDrivenWorkflow workflow);
    public virtual string get_Title();
    public virtual string get_Description();
    public virtual bool RefreshContents(IProgressIndicator pi);
    public virtual void Commit();
    public virtual BeControl GetPageContent();
    [NotNullAttribute]
private string OfferDefaultStyleTargetFile();
    [CompilerGeneratedAttribute]
private bool <.ctor>b__4_0(IMoveStyleRefactoringAction action);
    [CompilerGeneratedAttribute]
private bool <Commit>b__12_0(IMoveStyleRefactoringAction action);
    [CompilerGeneratedAttribute]
private string <OfferDefaultStyleTargetFile>b__14_0(IMoveStyleRefactoringAction action);
    [CompilerGeneratedAttribute]
private string <OfferDefaultStyleTargetFile>b__14_1(IMoveStyleRefactoringAction action);
}
public class JetBrains.ReSharper.Refactorings.Css.Refactorings.MoveStyle.MoveStyleRefactoring : object {
    private IRefactoringDriver myDriver;
    private MoveStyleDrivenWorkflow myWorkflow;
    public MoveStyleRefactoring(MoveStyleDrivenWorkflow workflow, IRefactoringDriver driver);
    public sealed virtual bool Execute(IProgressIndicator pi);
}
public interface JetBrains.ReSharper.Refactorings.Css.Refactorings.MoveStyle.RefactoringActions.IMoveStyleRefactoringAction {
    public bool SupportImportDerictive { get; }
    public abstract virtual bool get_SupportImportDerictive();
    public abstract virtual bool CanMove(ICollection`1<ITreeNodePointer`1<ICssRule>> declarations);
    public abstract virtual bool CanMoveTo(ICollection`1<ITreeNodePointer`1<ICssRule>> declarations, IProjectFile targetFile);
    public abstract virtual string OfferTargetFile(ICollection`1<ITreeNodePointer`1<ICssRule>> declarations);
    public abstract virtual string OfferDefaultTargetFile(ICollection`1<ITreeNodePointer`1<ICssRule>> declarations);
    [NotNullAttribute]
public abstract virtual ICollection`1<ITreeNodePointer`1<ICssRule>> Execute(MoveStyleDrivenWorkflow workflow, IRefactoringDriver driver, IProgressIndicator pi);
}
internal abstract class JetBrains.ReSharper.Refactorings.Css.Refactorings.MoveStyle.RefactoringActions.MoveStyleRefactoringActionBase : object {
    public bool SupportImportDerictive { get; }
    public abstract virtual bool get_SupportImportDerictive();
    public abstract virtual bool CanMoveTo(ICollection`1<ITreeNodePointer`1<ICssRule>> declarations, IProjectFile targetFile);
    public abstract virtual string OfferDefaultTargetFile(ICollection`1<ITreeNodePointer`1<ICssRule>> declarations);
    public abstract virtual string OfferTargetFile(ICollection`1<ITreeNodePointer`1<ICssRule>> declarations);
    public virtual bool CanMove(ICollection`1<ITreeNodePointer`1<ICssRule>> declarations);
    public virtual ICollection`1<ITreeNodePointer`1<ICssRule>> Execute(MoveStyleDrivenWorkflow workflow, IRefactoringDriver driver, IProgressIndicator pi);
    protected virtual ICollection`1<ITreeNodePointer`1<ICssRule>> MoveDeclarations(MoveStyleDrivenWorkflow workflow, IRefactoringDriver driver, IProgressIndicator pi, IFile targetPsiFile);
    protected virtual ITreeNodePointer`1<ICssRule> MoveDeclaration(MoveStyleDrivenWorkflow workflow, IProgressIndicator pi, ICssRule declaration, IFile targetPsiFile, IRefactoringDriver driver, bool insertImport);
    protected virtual void StartProgress(IProgressIndicator pi);
    protected virtual List`1<IDeclaredElement> CollectElementsFromPathReferences(IProgressIndicator pi, ICssRule declaration);
    protected virtual void RemoveDeclaration(MoveStyleDrivenWorkflow workflow, IProgressIndicator pi, ICssRule declaration, IFile targetPsiFile, bool insertImport);
    protected virtual ITreeNodePointer`1<ICssRule> InsertIntoTargetFile(IProgressIndicator pi, ICssRule declaration, IFile targetPsiFile);
    protected virtual void RebindPathReferences(IProgressIndicator pi, IRefactoringDriver driver, List`1<IDeclaredElement> elements, ITreeNodePointer`1<ICssRule> declaration);
    protected virtual IImport CreateImport(IProjectFile currentFile, IProjectFile targetFile);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Refactorings.Css.Refactorings.MoveStyle.RefactoringActions.MoveStyleRefactoringActionBase/<ProcessReferences>d__15")]
private static IEnumerable`1<IReference> ProcessReferences(IEnumerable`1<IPathReference> references);
}
[SolutionComponentAttribute("16")]
internal class JetBrains.ReSharper.Refactorings.Css.Refactorings.MoveStyle.RefactoringActions.MoveStyleToCssFileRefactoringAction : MoveStyleRefactoringActionBase {
    public bool SupportImportDerictive { get; }
    public virtual bool get_SupportImportDerictive();
    public virtual bool CanMoveTo(ICollection`1<ITreeNodePointer`1<ICssRule>> declarations, IProjectFile targetFile);
    public virtual string OfferDefaultTargetFile(ICollection`1<ITreeNodePointer`1<ICssRule>> declarations);
    public virtual string OfferTargetFile(ICollection`1<ITreeNodePointer`1<ICssRule>> declarations);
}
[SolutionComponentAttribute("16")]
internal class JetBrains.ReSharper.Refactorings.Css.Refactorings.MoveStyle.RefactoringActions.MoveStyleToHtmlFileRefactoringAction : MoveStyleRefactoringActionBase {
    public bool SupportImportDerictive { get; }
    public virtual bool get_SupportImportDerictive();
    public virtual bool CanMoveTo(ICollection`1<ITreeNodePointer`1<ICssRule>> declarations, IProjectFile targetFile);
    public virtual string OfferDefaultTargetFile(ICollection`1<ITreeNodePointer`1<ICssRule>> declarations);
    public virtual string OfferTargetFile(ICollection`1<ITreeNodePointer`1<ICssRule>> declarations);
    public virtual ICollection`1<ITreeNodePointer`1<ICssRule>> Execute(MoveStyleDrivenWorkflow workflow, IRefactoringDriver driver, IProgressIndicator pi);
    protected virtual ITreeNodePointer`1<ICssRule> InsertIntoTargetFile(IProgressIndicator pi, ICssRule declaration, IFile targetPsiFile);
    protected virtual IImport CreateImport(IProjectFile currentFile, IProjectFile targetFile);
}
public class JetBrains.ReSharper.Refactorings.Css.Refactorings.Rename.CssClassAtomicRename : WebAtomicRenameBase {
    public CssClassAtomicRename(ICssClassDeclaredElement element, string newName);
    public virtual void Rename(IRenameRefactoring executer, IProgressIndicator pi, bool hasConflictsWithDeclarations, IRefactoringDriver driver);
}
[ShellFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Refactorings.Css.Refactorings.Rename.CssClassRenamesFactory : AtomicRenamesFactory {
    public virtual bool IsApplicable(IDeclaredElement declaredElement);
    public virtual RenameAvailabilityCheckResult CheckRenameAvailability(IDeclaredElement element);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Refactorings.Css.Refactorings.Rename.CssClassRenamesFactory/<CreateAtomicRenames>d__2")]
public virtual IEnumerable`1<AtomicRenameBase> CreateAtomicRenames(IDeclaredElement declaredElement, string newName, bool doNotAddBindingConflicts);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<AtomicRenameBase> <>n__0(IDeclaredElement declaredElement, string newName, bool doNotAddBindingConflicts);
}
[RenamePartAttribute("16")]
public class JetBrains.ReSharper.Refactorings.Css.Refactorings.Rename.CssPrimaryDeclaredElementForRenameProvider : object {
    public sealed virtual IDeclaredElement GetPrimaryDeclaredElement(IDeclaredElement element, IReference reference);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Css.CssLanguage", "16")]
public class JetBrains.ReSharper.Refactorings.Css.Refactorings.Rename.CssRenameHelper : RenameHelperBase {
    public bool IsLanguageSupported { get; }
    public virtual bool get_IsLanguageSupported();
    public virtual bool IsLocalRename(IDeclaredElement primevalDeclaredElement);
    public virtual IList`1<IConflictSearcher> AdditionalConflictsSearchers(IDeclaredElement element, string newName);
    public virtual void AdditionalReferenceProcessing(IDeclaredElement newTarget, IReference reference, ICollection`1<IReference> newReferences);
    public virtual IReference TransformProjectedInitializer(IReference reference);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Refactorings.Css.ZoneMarker : object {
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Html.HtmlLanguage", "16")]
public class JetBrains.ReSharper.Refactorings.Html.HtmlRefactoringLanguageService : InternalRefactoringLanguageService {
    public RefactoringsHelper Helper { get; }
    public virtual RefactoringsHelper get_Helper();
}
public class JetBrains.ReSharper.Refactorings.Html.HtmlRefactoringsHelper : RefactoringsHelper {
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Html.HtmlLanguage", "16")]
public class JetBrains.ReSharper.Refactorings.Html.InplaceRefactorings.HtmlInplaceRenameLanguageSpecifics : object {
    public virtual bool SuggestRenameOnRenamingReference(IReference reference);
    public sealed virtual bool SuggestRenameOnRenamingTreeNode(TreeTextRange treeRange, ITreeNode node);
}
[ShellFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Refactorings.Html.Rename.HtmlBuiltinsRenamesFactory : AtomicRenamesFactory {
    public virtual bool IsApplicable(IDeclaredElement declaredElement);
    public virtual RenameAvailabilityCheckResult CheckRenameAvailability(IDeclaredElement declaredElement);
}
public class JetBrains.ReSharper.Refactorings.Html.Rename.HtmlElementWithNameAtomicRename : WebAtomicRenameBase {
    [CanBeNullAttribute]
private List`1<IDeclaredElementPointer`1<IDeclaredElement>> mySecondaryElements;
    public IList`1<IDeclaredElement> SecondaryDeclaredElements { get; }
    public HtmlElementWithNameAtomicRename(IRenameableElementInHtml element, string newName);
    public virtual IList`1<IDeclaredElement> get_SecondaryDeclaredElements();
    public virtual void Rename(IRenameRefactoring executer, IProgressIndicator pi, bool hasConflictsWithDeclarations, IRefactoringDriver driver);
}
[ShellFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Refactorings.Html.Rename.HtmlRenameableElementRenamesFactory : AtomicRenamesFactory {
    public virtual bool IsApplicable(IDeclaredElement declaredElement);
    public virtual RenameAvailabilityCheckResult CheckRenameAvailability(IDeclaredElement declaredElement);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Refactorings.Html.Rename.HtmlRenameableElementRenamesFactory/<CreateAtomicRenames>d__2")]
public virtual IEnumerable`1<AtomicRenameBase> CreateAtomicRenames(IDeclaredElement declaredElement, string newName, bool doNotAddBindingConflicts);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Html.HtmlLanguage", "16")]
public class JetBrains.ReSharper.Refactorings.Html.Rename.HtmlRenameHelper : RenameHelperBase {
    public bool IsLanguageSupported { get; }
    public virtual IList`1<IConflictSearcher> AdditionalConflictsSearchers(IDeclaredElement element, string newName);
    public virtual void AdditionalReferenceProcessing(IDeclaredElement newTarget, IReference reference, ICollection`1<IReference> newReferences);
    public virtual IReference TransformProjectedInitializer(IReference reference);
    public virtual bool get_IsLanguageSupported();
    public virtual bool IsLocalRename(IDeclaredElement primevalDeclaredElement);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Refactorings.Html.ZoneMarker : object {
}
public static class JetBrains.ReSharper.Refactorings.JavaScript.CopyType.TypeScript.TsDeclaredElementUtil : object {
    public static IDeclaredElement GetContainingTypeElement(IDeclaredElement typeElement);
    [CanBeNullAttribute]
public static string GetContainingNamespaceQualifiedName(IDeclaredElement typeElement);
    public static string NormalizeModuleName(string name);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.JavaScript.LanguageImpl.TypeScript.TypeScriptLanguage", "16")]
public class JetBrains.ReSharper.Refactorings.JavaScript.CopyType.TypeScript.TypeScriptNamespaceFilter : object {
    public sealed virtual bool NamespaceFilter(IDeclaredElement element);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.JavaScript.LanguageImpl.TypeScript.TypeScriptLanguage", "16")]
public class JetBrains.ReSharper.Refactorings.JavaScript.CopyType.TypeScript.TypeScriptSpecificCopyType : object {
    public string TextForNamespaceTitle { get; }
    public sealed virtual bool IsAvailable(IDeclaration typeDeclaration);
    public sealed virtual bool IsAvailable(IDeclaredElement declaredElement);
    public sealed virtual bool CanSetNamespace(IDeclaredElement declaredElement);
    public sealed virtual IDeclaration CreateCopy(IDeclaration typeDeclaration, IFile file, string qualifiedName, ITreeNode& alreadyCreatedScope);
    public sealed virtual string GenerateFileName(IDeclaration typeDeclaration, string name);
    public sealed virtual IConflictSearcher GetConflictSearcher(IDeclaredElement typeElement, string qualifiedName);
    public sealed virtual int GetTypeParametersCount(IDeclaredElement typeElement);
    public sealed virtual IDeclaredElement GetContainingTypeElement(IDeclaredElement typeElement);
    public sealed virtual string GetContainingNamespaceQualifiedName(IDeclaredElement typeElement);
    public sealed virtual IDeclaration GetTypeDeclaration(IDataContext dataContext);
    public sealed virtual string get_TextForNamespaceTitle();
}
public class JetBrains.ReSharper.Refactorings.JavaScript.EncapsulateField.TypeScript.TypeScriptEncapsulateField : EncapsulateFieldBase {
    public TypeScriptEncapsulateField(EncapsulateFieldWorkflow workflow, ISolution solution, IRefactoringDriver driver);
    public virtual void SetAccessRights(ConstructionUtil construction, IDeclaredElement field, AccessRights rights);
    public virtual IDeclaredElement RenameFieldDeclaration(IDeclaredElement field, NameSuggestionManager suggestionManager, SuggestionOptions suggestionOptions, IPsiSourceFile sourceFile, bool willMakeFieldPrivate);
    [NotNullAttribute]
private static string GetTypeAnnotationForMember(ITsMemberElement element, JsResolveContext ctx, ITreeNode context);
    public virtual IDeclaredElement CreatePropertyDeclaration(IDeclaredElement fieldElement);
    public virtual void RemoveFieldDeclaration(IDeclaredElement field);
    public virtual IDeclaredElement EnsureReadable(IDeclaredElement property, IDeclaredElement field);
    public virtual IDeclaredElement EnsureWriteable(IDeclaredElement property, IDeclaredElement field);
    [NotNullAttribute]
private static ITsMemberAccessorDeclaration CreateReadAccessor(ITsTypeMember field, ITsMemberAccessorDeclaration context);
    [NotNullAttribute]
private static ITsMemberAccessorDeclaration CreateWriteAccessor(ITsTypeMember field, ITsMemberAccessorDeclaration context);
    protected virtual void ProcessReference(IReference reference, ReferenceAccessType accessType, IDeclaredElement property);
    private IReference ReplaceReference(IReference reference, IDeclaredElement property, ReferenceAccessType accessType);
    private static IReference DoReplaceReference(IReference reference, IDeclaredElement property);
    [NotNullAttribute]
private static TExpression CreatePropertyExpression(TExpression initialExpression, IDeclaredElement property);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.JavaScript.LanguageImpl.TypeScript.TypeScriptLanguage", "16")]
public class JetBrains.ReSharper.Refactorings.JavaScript.EncapsulateField.TypeScript.TypeScriptEncapsulateFieldUtil : object {
    public bool LanguageSupportsAutoProperties { get; }
    public bool LanguageSupportsInternalModifier { get; }
    public sealed virtual bool IsUnderTypeDeclaration(ITreeNode treeNode, IDeclaredElement containingType);
    public sealed virtual IDeclaredElement GetContainingTypeForField(IDeclaredElement field);
    public sealed virtual bool IsStaticField(IDeclaredElement declaredElement);
    public sealed virtual bool IsField(IDeclaredElement declaredElement);
    public sealed virtual bool IsConstant(IDeclaredElement declaredElement);
    public sealed virtual AccessRights GetAccessRights(IDeclaredElement fieldOrProperty);
    public sealed virtual bool IsReadOnly(IDeclaredElement field);
    public sealed virtual bool IsReadableProperty(IDeclaredElement property);
    public sealed virtual bool IsWriteableProperty(IDeclaredElement property);
    public sealed virtual bool CanEncapsulateToAutoProperty(IDeclaredElement field);
    [NotNullAttribute]
private HashSet`1<string> GetPossibleBackingFieldNames(ITsTypeMember property, FoundAccessors& foundAccessors, AccessRights propertyAccessRights);
    public sealed virtual IReadOnlyCollection`1<IDeclaredElement> FindEncapsulatingProperties(IDeclaredElement fieldElement, IReadOnlyCollection`1<AccessRights> possibleAccessRights);
    public sealed virtual INamesSuggestion SuggestPropertyName(IDeclaredElement field, IPsiSourceFile sourceFile, PsiLanguageType languageType);
    public sealed virtual string GetTypePresentableName(IDeclaredElement property, PsiLanguageType language);
    public sealed virtual bool get_LanguageSupportsAutoProperties();
    public sealed virtual bool get_LanguageSupportsInternalModifier();
    public sealed virtual bool LanguageSupportsPrivateProtectedModifier(IDeclaredElement field);
}
public abstract class JetBrains.ReSharper.Refactorings.JavaScript.ExtractMethod.Common.JsExtractMethodWorkflowBase : DrivenRefactoringWorkflow {
    [CanBeNullAttribute]
private IJsExtractMethodInspectionResult myInspectionResult;
    [CanBeNullAttribute]
private IList`1<JsExtractMethodTarget> myExtractTargets;
    [CanBeNullAttribute]
private JsExtractMethodTarget mySelectedExtractTarget;
    public string Title { get; }
    public HelpId HelpKeyword { get; }
    public bool MightModifyManyDocuments { get; }
    public RefactoringActionGroup ActionGroup { get; }
    public IRefactoringPage FirstPendingRefactoringPage { get; }
    protected JsExtractMethodWorkflowBase(ISolution solution, string actionId);
    public virtual string get_Title();
    public virtual HelpId get_HelpKeyword();
    public virtual bool get_MightModifyManyDocuments();
    public virtual RefactoringActionGroup get_ActionGroup();
    public virtual IRefactoringPage get_FirstPendingRefactoringPage();
    public virtual bool Initialize(IDataContext context);
    [NotNullAttribute]
private JsExtractMethodTarget GetPrefferedTarget(IList`1<JsExtractMethodTarget> extractTargets);
    public virtual bool IsValid();
    [NotNullAttribute]
protected abstract virtual ITreeRange GetTreeRange();
    private IJsExtractMethodInspectionResult AnalizeDataFlow(JsExtractMethodTarget extractTarget);
    [NotNullAttribute]
protected abstract virtual IList`1<JsExtractMethodTarget> CalculateTargets();
    public virtual IRefactoringExecuter CreateRefactoring(IRefactoringDriver driver);
    protected static bool IsSelectedWithSemicolon(IJavaScriptExpression expression, TextRange selectionRange);
    [NotNullAttribute]
public string Dump();
}
public interface JetBrains.ReSharper.Refactorings.JavaScript.ExtractMethod.ControlFlow.IJsExtractMethodInspectionResult {
    public bool HasMultipleProblemsProblem { get; }
    [NotNullAttribute]
public JsExtractMethodParameter ReturnValueParameter { get; }
    public abstract virtual bool get_HasMultipleProblemsProblem();
    public abstract virtual JsExtractMethodParameter get_ReturnValueParameter();
    public abstract virtual bool IsValid();
    [NotNullAttribute]
public abstract virtual string Dump();
}
public class JetBrains.ReSharper.Refactorings.JavaScript.ExtractMethod.ControlFlow.JsExtractMethodInspectionContext : ExtractMethodInspectionContextBase {
    public JsExtractMethodInspectionContext(JsExtractMethodInspectionContext other);
    public JsExtractMethodInspectionContext(IList`1<JsExtractMethodInspectionContext> contexts);
    [NotNullAttribute]
public JsExtractMethodInspectionContext Write(IJavaScriptTypeOwner typeOwner, ITreeNode node, bool writeOnly);
    protected virtual ExtractMethodInspectionContextBase CloneSelf();
    public sealed virtual bool Equals(JsExtractMethodInspectionContext other);
}
public class JetBrains.ReSharper.Refactorings.JavaScript.ExtractMethod.ControlFlow.JsExtractMethodInspectionResult : ExtractMethodControlFlowInspectorBase`2<IJavaScriptTypeOwner, JsExtractMethodInspectionContext> {
    [NotNullAttribute]
private ITreeRange myTreeRange;
    [NotNullAttribute]
private ITreeNode myGraphOwner;
    [NotNullAttribute]
private JsExtractMethodTarget myExtractTarget;
    [NotNullAttribute]
private JsResolveContext myJsResolveContext;
    [NotNullAttribute]
private JsExtractMethodVariableAnalyzer myVariableAnalyzer;
    [NotNullAttribute]
private TsTypeParametersAnalyzer myTypeParametersAnalyzer;
    public bool HasMultipleProblemsProblem { get; }
    public JsExtractMethodParameter ReturnValueParameter { get; }
    private JsExtractMethodInspectionResult(ITreeRange treeRange, IJsControlFlowGraph graph, ITreeNode graphOwner, JsExtractMethodTarget extractTarget);
    protected virtual void InspectLeafNode(IControlFlowElement element, ITreeNode sourceElement, JsExtractMethodInspectionContext context);
    public static IJsExtractMethodInspectionResult Analyse(ITreeRange treeRange, JsExtractMethodTarget extractTarget);
    private static bool RangeExistsInGraph(ITreeRange treeRange, IJsControlFlowGraph graph);
    private void BuildParameters();
    private void RegisterReadAndWriteUsages();
    protected virtual ITreeNode FindControlFlowOwner(ITreeNode context);
    protected virtual ITreeNode GetDeclaration(IJavaScriptTypeOwner typeOwner);
    private static bool IsExpressionRange(ITreeRange treeRange);
    public sealed virtual bool get_HasMultipleProblemsProblem();
    public sealed virtual JsExtractMethodParameter get_ReturnValueParameter();
    public sealed virtual bool IsValid();
    public sealed virtual string Dump();
}
public class JetBrains.ReSharper.Refactorings.JavaScript.ExtractMethod.ControlFlow.JsExtractMethodInspectionResultWithoutGraph : object {
    [NotNullAttribute]
private ITreeRange myTreeRange;
    [CompilerGeneratedAttribute]
private JsExtractMethodParameter <ReturnValueParameter>k__BackingField;
    public bool HasMultipleProblemsProblem { get; }
    public JsExtractMethodParameter ReturnValueParameter { get; }
    public JsExtractMethodInspectionResultWithoutGraph(ITreeRange treeRange, bool isExpression);
    public sealed virtual bool get_HasMultipleProblemsProblem();
    [CompilerGeneratedAttribute]
public sealed virtual JsExtractMethodParameter get_ReturnValueParameter();
    public sealed virtual bool IsValid();
    public sealed virtual string Dump();
}
public class JetBrains.ReSharper.Refactorings.JavaScript.ExtractMethod.ControlFlow.JsExtractMethodVariableAnalyzer : object {
    [NotNullAttribute]
private ITreeNode myGraphOwner;
    [NotNullAttribute]
private IList`1<IYieldExpression> myYieldExpressions;
    [NotNullAttribute]
private Dictionary`2<IJavaScriptTypeOwner, JsExtractMethodParameter> myParameters;
    [CanBeNullAttribute]
private JsExtractMethodParameter myThisUsageParameter;
    [CanBeNullAttribute]
private JsExtractMethodParameter mySuperUsageParameter;
    [NotNullAttribute]
public IEnumerable`1<JsExtractMethodParameter> AllParameters { get; }
    [NotNullAttribute]
public Dictionary`2<IJavaScriptTypeOwner, JsExtractMethodParameter> ParametersFromVariables { get; }
    public JsExtractMethodVariableAnalyzer(ITreeNode graphOwner);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Refactorings.JavaScript.ExtractMethod.ControlFlow.JsExtractMethodVariableAnalyzer/<get_AllParameters>d__7")]
public IEnumerable`1<JsExtractMethodParameter> get_AllParameters();
    public Dictionary`2<IJavaScriptTypeOwner, JsExtractMethodParameter> get_ParametersFromVariables();
    public void RegisterVariables(ITreeRange treeRange);
    private void RegisterVariable(IJavaScriptTypeOwner typeOwner, TreeTextRange range);
    private void RegisterThisUsage(IThisExpression thisExpression);
    private void RegisterSuperUsage(ITsSuperExpression superExpression);
    private bool DeclarationIsLocal(IJavaScriptTypeOwner typeOwner);
    public void Dump(StringBuilder builder);
}
public class JetBrains.ReSharper.Refactorings.JavaScript.ExtractMethod.ControlFlow.JsMethodInspectionContextFactory : object {
    [NotNullAttribute]
public static IControlFlowContextFactory`1<JsExtractMethodInspectionContext> Instance;
    public JsExtractMethodInspectionContext InitialContext { get; }
    private static JsMethodInspectionContextFactory();
    public sealed virtual JsExtractMethodInspectionContext get_InitialContext();
    public sealed virtual JsExtractMethodInspectionContext CloneContext(JsExtractMethodInspectionContext context);
    public sealed virtual JsExtractMethodInspectionContext Merge(IList`1<JsExtractMethodInspectionContext> contexts);
}
public class JetBrains.ReSharper.Refactorings.JavaScript.ExtractMethod.ControlFlow.TsTypeParametersAnalyzer : object {
    [NotNullAttribute]
private ITreeNode myGraphOwner;
    [NotNullAttribute]
private ITreeNode myTargetNode;
    [NotNullAttribute]
private JsResolveContext myJsResolveContext;
    [NotNullAttribute]
private JetHashSet`1<ITsTypeParameter> myUsedTypeParameters;
    [NotNullAttribute]
public JetHashSet`1<ITsTypeParameter> UsedTypeParameters { get; }
    public TsTypeParametersAnalyzer(ITreeNode graphOwner, ITreeNode targetNode, JsResolveContext jsResolveContext);
    public JetHashSet`1<ITsTypeParameter> get_UsedTypeParameters();
    public void RegisterTypeParameters();
    [NotNullAttribute]
private ICollection`1<ITsTypeParameter> CollectAllTypeParameters();
    public void Dump(StringBuilder builder);
}
public abstract class JetBrains.ReSharper.Refactorings.JavaScript.ExtractMethod.ExtractTarget.JsExtractMethodTarget : object {
    [NotNullAttribute]
private string myTargetName;
    [NotNullAttribute]
private ITreeNode myTargetNode;
    private TreeTextRange myTreeRange;
    [NotNullAttribute]
public string TargetName { get; }
    [NotNullAttribute]
public ITreeNode TargetNode { get; }
    public TreeTextRange TreeRange { get; }
    public bool CanBeFunctionExpression { get; }
    public bool CanBeStaticOrInstance { get; }
    public bool CanBePublicOrPrivate { get; }
    public bool CanBeExportedOrNot { get; }
    public bool CanBeFunctionOrAccessor { get; }
    public bool ExtractedCallWillBeTyped { get; }
    public bool IsInStaticContext { get; }
    protected JsExtractMethodTarget(ITreeNode targetNode, string targetName, TreeTextRange treeRange);
    public string get_TargetName();
    public ITreeNode get_TargetNode();
    public TreeTextRange get_TreeRange();
    public virtual bool get_CanBeFunctionExpression();
    public virtual bool get_CanBeStaticOrInstance();
    public virtual bool get_CanBePublicOrPrivate();
    public virtual bool get_CanBeExportedOrNot();
    public virtual bool get_CanBeFunctionOrAccessor();
    public virtual bool get_ExtractedCallWillBeTyped();
    public virtual bool get_IsInStaticContext();
    public virtual int GetScore(ITreeNode contextNode);
    [NotNullAttribute]
public static IList`1<JsExtractMethodTarget> BuildTargets(ITreeNode context);
    [NotNullAttribute]
public string Dump();
}
public class JetBrains.ReSharper.Refactorings.JavaScript.ExtractMethod.ExtractTarget.JsLocalFunctionExtractMethodTarget : JsExtractMethodTarget {
    public bool CanBeFunctionExpression { get; }
    public bool CanBeStaticOrInstance { get; }
    private JsLocalFunctionExtractMethodTarget(IJavaScriptFileSection fileSection);
    private JsLocalFunctionExtractMethodTarget(IFunctionExpression function);
    private JsLocalFunctionExtractMethodTarget(IObjectPropertyAccessor accessor);
    public virtual bool get_CanBeFunctionExpression();
    public virtual bool get_CanBeStaticOrInstance();
    public virtual int GetScore(ITreeNode contextNode);
    [CanBeNullAttribute]
public static JsExtractMethodTarget TryBuild(ITreeNode treeNode);
    [NotNullAttribute]
private static string GetTargetName(IFunctionExpression function);
    private static TreeTextRange GetTargetRange(IFunctionExpression function);
}
public class JetBrains.ReSharper.Refactorings.JavaScript.ExtractMethod.ExtractTarget.JsPrototypeFunctionExtractMethodTarget : JsExtractMethodTarget {
    [NotNullAttribute]
private IReferenceExpression myConstructorReference;
    private bool myIsStaticFunction;
    [NotNullAttribute]
public IExpressionStatement TargetNode { get; }
    public bool CanBeStaticOrInstance { get; }
    public bool IsInStaticContext { get; }
    [NotNullAttribute]
public IReferenceExpression ConstructorReference { get; }
    public JsPrototypeFunctionExtractMethodTarget(IExpressionStatement targetNode, string targetName, IReferenceExpression targetReference, IReferenceExpression constructorReference, bool isStaticFunction);
    public IExpressionStatement get_TargetNode();
    public virtual bool get_CanBeStaticOrInstance();
    public virtual bool get_IsInStaticContext();
    public virtual int GetScore(ITreeNode contextNode);
    public IReferenceExpression get_ConstructorReference();
    [CanBeNullAttribute]
public static JsExtractMethodTarget TryBuild(ITreeNode treeNode);
    [CanBeNullAttribute]
private static IAssignmentExpression FindAssignment(IExpressionStatement statement);
    [CanBeNullAttribute]
private static IReferenceExpression MatchPrototypeFill(IReferenceExpression referenceExpression, Boolean& isStaticFunction);
    private static bool IsConstructorName(string name);
}
public class JetBrains.ReSharper.Refactorings.JavaScript.ExtractMethod.ExtractTarget.TsClassExtractMethodTarget : JsExtractMethodTarget {
    private bool myIsStaticMember;
    [NotNullAttribute]
public ITsClassLikeDeclaration TargetNode { get; }
    public bool CanBeStaticOrInstance { get; }
    public bool CanBePublicOrPrivate { get; }
    public bool CanBeFunctionOrAccessor { get; }
    public bool IsInStaticContext { get; }
    public TsClassExtractMethodTarget(ITsClassLikeDeclaration classDeclaration);
    public ITsClassLikeDeclaration get_TargetNode();
    public virtual bool get_CanBeStaticOrInstance();
    public virtual bool get_CanBePublicOrPrivate();
    public virtual bool get_CanBeFunctionOrAccessor();
    public virtual bool get_IsInStaticContext();
    public virtual int GetScore(ITreeNode contextNode);
    [CanBeNullAttribute]
public static JsExtractMethodTarget TryBuild(ITreeNode node);
}
public class JetBrains.ReSharper.Refactorings.JavaScript.ExtractMethod.ExtractTarget.TsLocalFunctionExtractMethodTarget : JsExtractMethodTarget {
    public bool CanBeFunctionExpression { get; }
    public bool CanBeStaticOrInstance { get; }
    private TsLocalFunctionExtractMethodTarget(ITsConstructorDeclaration constructorDeclaration);
    private TsLocalFunctionExtractMethodTarget(ITsMemberFunctionDeclaration functionDeclaration);
    private TsLocalFunctionExtractMethodTarget(ITsMemberAccessorDeclaration accessorDeclaration);
    private TsLocalFunctionExtractMethodTarget(ITsLambdaExpression lambdaExpression);
    private TsLocalFunctionExtractMethodTarget(ITsFunctionStatement functionStatement);
    private TsLocalFunctionExtractMethodTarget(ITsObjectPropertyFunction objectPropertyFunction);
    public virtual bool get_CanBeFunctionExpression();
    public virtual bool get_CanBeStaticOrInstance();
    public virtual int GetScore(ITreeNode contextNode);
    [CanBeNullAttribute]
public static JsExtractMethodTarget TryBuild(ITreeNode treeNode);
    private static TreeTextRange GetTargetRange(ITsFunctionStatement functionStatement);
}
public class JetBrains.ReSharper.Refactorings.JavaScript.ExtractMethod.ExtractTarget.TsModuleExtractMethodTarget : JsExtractMethodTarget {
    public bool CanBeExportedOrNot { get; }
    [NotNullAttribute]
public ITsModuleDeclaration TargetNode { get; }
    public TsModuleExtractMethodTarget(ITsModuleDeclaration moduleDeclaration);
    public virtual bool get_CanBeExportedOrNot();
    public virtual int GetScore(ITreeNode contextNode);
    public ITsModuleDeclaration get_TargetNode();
    [CanBeNullAttribute]
public static JsExtractMethodTarget TryBuild(ITreeNode node);
}
public class JetBrains.ReSharper.Refactorings.JavaScript.ExtractMethod.FromExpression.JsExtractMethodFromExpressionWorkflow : JsExtractMethodWorkflowBase {
    [CompilerGeneratedAttribute]
private IJavaScriptExpression <Expression>k__BackingField;
    [CanBeNullAttribute]
public IJavaScriptExpression Expression { get; private set; }
    public JsExtractMethodFromExpressionWorkflow(ISolution solution, string actionId);
    [CompilerGeneratedAttribute]
public IJavaScriptExpression get_Expression();
    [CompilerGeneratedAttribute]
private void set_Expression(IJavaScriptExpression value);
    protected virtual ITreeRange GetTreeRange();
    public virtual bool IsAvailable(IDataContext context);
    public virtual bool IsValid();
    protected virtual IList`1<JsExtractMethodTarget> CalculateTargets();
}
[RefactoringWorkflowProviderAttribute("16")]
internal class JetBrains.ReSharper.Refactorings.JavaScript.ExtractMethod.FromExpression.JsExtractMethodFromStatementsProvider : object {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Refactorings.JavaScript.ExtractMethod.FromExpression.JsExtractMethodFromStatementsProvider/<CreateWorkflow>d__0")]
public sealed virtual IEnumerable`1<IRefactoringWorkflow> CreateWorkflow(IDataContext dataContext);
}
[RefactoringWorkflowProviderAttribute("16")]
internal class JetBrains.ReSharper.Refactorings.JavaScript.ExtractMethod.FromStatements.JsExtractMethodFromStatementsProvider : object {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Refactorings.JavaScript.ExtractMethod.FromStatements.JsExtractMethodFromStatementsProvider/<CreateWorkflow>d__0")]
public sealed virtual IEnumerable`1<IRefactoringWorkflow> CreateWorkflow(IDataContext dataContext);
}
public class JetBrains.ReSharper.Refactorings.JavaScript.ExtractMethod.FromStatements.JsExtractMethodFromStatementsWorkflow : JsExtractMethodWorkflowBase {
    [CompilerGeneratedAttribute]
private IJavaScriptStatementsRange <StatementsRange>k__BackingField;
    [CanBeNullAttribute]
public IJavaScriptStatementsRange StatementsRange { get; private set; }
    public JsExtractMethodFromStatementsWorkflow(ISolution solution, string actionId);
    [CompilerGeneratedAttribute]
public IJavaScriptStatementsRange get_StatementsRange();
    [CompilerGeneratedAttribute]
private void set_StatementsRange(IJavaScriptStatementsRange value);
    protected virtual ITreeRange GetTreeRange();
    public virtual bool IsAvailable(IDataContext context);
    public virtual bool IsValid();
    protected virtual IList`1<JsExtractMethodTarget> CalculateTargets();
}
public class JetBrains.ReSharper.Refactorings.JavaScript.ExtractMethod.Parameters.JsExtraceMethodParameterThisUsage : JsExtractMethodParameter {
    public virtual string Dump();
}
public abstract class JetBrains.ReSharper.Refactorings.JavaScript.ExtractMethod.Parameters.JsExtractMethodParameter : object {
    [CompilerGeneratedAttribute]
private JsExtractMethodParameterKind <Kind>k__BackingField;
    public JsExtractMethodParameterKind Kind { get; public set; }
    public bool IsFieldLike { get; }
    [CompilerGeneratedAttribute]
public JsExtractMethodParameterKind get_Kind();
    [CompilerGeneratedAttribute]
public void set_Kind(JsExtractMethodParameterKind value);
    [CanBeNullAttribute]
public static JsExtractMethodParameter Create(IJavaScriptTypeOwner typeOwner, bool declarationIsLocal);
    public virtual bool get_IsFieldLike();
    [ConditionalAttribute("JET_MODE_ASSERT")]
public void AddUsageRange(TreeTextRange treeTextRange);
    public abstract virtual string Dump();
}
public class JetBrains.ReSharper.Refactorings.JavaScript.ExtractMethod.Parameters.JsExtractMethodParameterFromVariable : JsExtractMethodParameter {
    [NotNullAttribute]
private IJavaScriptTypeOwner myTypeOwner;
    private bool myDeclarationIsLocal;
    [NotNullAttribute]
public IJavaScriptTypeOwner TypeOwner { get; }
    public bool IsFieldLike { get; }
    public JsExtractMethodParameterFromVariable(IJavaScriptTypeOwner typeOwner, bool declarationIsLocal);
    public IJavaScriptTypeOwner get_TypeOwner();
    public virtual bool get_IsFieldLike();
    public virtual string Dump();
}
public enum JetBrains.ReSharper.Refactorings.JavaScript.ExtractMethod.Parameters.JsExtractMethodParameterKind : Enum {
    public int value__;
    public static JsExtractMethodParameterKind PassByValue;
    public static JsExtractMethodParameterKind ReturnOnly;
    public static JsExtractMethodParameterKind Return;
    public static JsExtractMethodParameterKind CanReturn;
    public static JsExtractMethodParameterKind PassThrough;
    public static JsExtractMethodParameterKind DoNotPass;
    public static JsExtractMethodParameterKind Implicit;
}
public class JetBrains.ReSharper.Refactorings.JavaScript.ExtractMethod.Parameters.JsExtractMethodParameterReturnExpression : JsExtractMethodParameter {
    [CompilerGeneratedAttribute]
private IJavaScriptExpression <Expression>k__BackingField;
    [NotNullAttribute]
public IJavaScriptExpression Expression { get; }
    public JsExtractMethodParameterReturnExpression(IJavaScriptExpression expression);
    [CompilerGeneratedAttribute]
public IJavaScriptExpression get_Expression();
    public virtual string Dump();
}
public class JetBrains.ReSharper.Refactorings.JavaScript.ExtractMethod.Parameters.JsExtractMethodParameterSuperUsage : JsExtractMethodParameter {
    public virtual string Dump();
}
public class JetBrains.ReSharper.Refactorings.JavaScript.ExtractMethod.Parameters.JsExtractMethodParameterUndefinedReturn : JsExtractMethodParameter {
    public virtual string Dump();
}
[ActionAttribute("JetBrains.ReSharper.Refactorings.Resources.Strings13", "InlineTypeAliasActionText")]
public class JetBrains.ReSharper.Refactorings.JavaScript.InlineTypeAlias.TypeScript.TsInlineTypeAliasAction : ExtensibleRefactoringAction`1<TsInlineTypeAliasWorkflowProvider> {
    public static string ACTION_ID;
    protected RichText Caption { get; }
    protected virtual RichText get_Caption();
}
public class JetBrains.ReSharper.Refactorings.JavaScript.InlineTypeAlias.TypeScript.TsInlineTypeAliasWorkflow : DrivenRefactoringWorkflow {
    [CompilerGeneratedAttribute]
private ITsTypeUsage <TypeUsage>k__BackingField;
    [CompilerGeneratedAttribute]
private ITsTypeAliasDeclaration <AliasDeclaration>k__BackingField;
    public HelpId HelpKeyword { get; }
    public IRefactoringPage FirstPendingRefactoringPage { get; }
    public bool MightModifyManyDocuments { get; }
    public string Title { get; }
    public RefactoringActionGroup ActionGroup { get; }
    public ITsTypeUsage TypeUsage { get; private set; }
    public ITsTypeAliasDeclaration AliasDeclaration { get; private set; }
    public TsInlineTypeAliasWorkflow(ISolution solution, string actionID);
    public virtual HelpId get_HelpKeyword();
    public virtual IRefactoringPage get_FirstPendingRefactoringPage();
    public virtual bool get_MightModifyManyDocuments();
    public virtual string get_Title();
    public virtual RefactoringActionGroup get_ActionGroup();
    [CompilerGeneratedAttribute]
public ITsTypeUsage get_TypeUsage();
    [CompilerGeneratedAttribute]
private void set_TypeUsage(ITsTypeUsage value);
    [CompilerGeneratedAttribute]
public ITsTypeAliasDeclaration get_AliasDeclaration();
    [CompilerGeneratedAttribute]
private void set_AliasDeclaration(ITsTypeAliasDeclaration value);
    private static Tuple`2<ITsTypeAliasDeclaration, ITsTypeUsage> FindAliasDeclarationWithType(IDataContext context);
    public virtual bool Initialize(IDataContext context);
    public virtual bool IsAvailable(IDataContext context);
    public virtual IRefactoringExecuter CreateRefactoring(IRefactoringDriver driver);
}
[RefactoringWorkflowProviderAttribute("16")]
public class JetBrains.ReSharper.Refactorings.JavaScript.InlineTypeAlias.TypeScript.TsInlineTypeAliasWorkflowProvider : object {
    public sealed virtual IEnumerable`1<IRefactoringWorkflow> CreateWorkflow(IDataContext dataContext);
}
public class JetBrains.ReSharper.Refactorings.JavaScript.InlineTypeAlias.TypeScript.TsInlineTypeRefactoringExecuter : object {
    private TsInlineTypeAliasWorkflow myTsInlineTypeAliasWorkflow;
    public TsInlineTypeRefactoringExecuter(TsInlineTypeAliasWorkflow tsInlineTypeAliasWorkflow);
    public sealed virtual bool Execute(IProgressIndicator pi);
}
public class JetBrains.ReSharper.Refactorings.JavaScript.InlineVar.JavaScriptInlineHelper : InlineHelper {
    public JavaScriptInlineHelper(IRefactoringDriver driver);
    public virtual bool CanHaveSideEffects(IExpression expression);
    public virtual void ReplaceTypeParameter(IReference reference, ITypeParameter parameter, ISubstitution substitution);
    public virtual IExpression GetQualifierExpression(IReference reference);
    public virtual Dictionary`2<IParameter, ArgumentFromParameter> GetParameter2Argument(IReference reference, IParametersOwner param);
    public virtual Dictionary`2<ArgumentFromParameter, InlinedArgumentInfo> GetArgument2Infos(IReference reference, Dictionary`2<IParameter, ArgumentFromParameter> parameter2argument, Dictionary`2<int, IParameter> inlinedMethodParameterInfos);
    public virtual bool CanHaveSideEffects(IArgument argument);
    public virtual IDeclaredElement SplitDeclarationAndInitializer(IDeclaredElement declaredElement);
    public virtual IDeclaredElement InsertReturnValueTempVariable(InlineMethodCallInfo inlineMethodCallInfo, IType returnType, IReference reference, CallSiteContext context);
    public virtual IDeclaredElement InsertTempForQualifier(IExpression qualifierExpression, IReference reference, CallSiteContext context, ReferenceIdentitySaver saver, ReferenceKind referenceKind);
    public virtual IDeclaredElement InsertTempVariableForAssignedValue(IExpression assignedExpression, IReference reference, CallSiteContext context, ReferenceIdentitySaver referenceIdentitySaver);
    public virtual IDeclaredElement InsertTempForArgument(IParameter parameterInfo, InlinedArgumentInfo argumentInfo, IReference reference, CallSiteContext context, ReferenceIdentitySaver saver, ArgumentFromParameter argumentFromParameter);
    public virtual void RemoveCastFromElement(ITreeNode element);
    public virtual IArgumentsOwner GetArgumentOwner(IReference& reference, bool replaceMethodGroup);
    public virtual IEnumerable`1<IReference> AllNotQualifiableReferences(IReference reference);
    public virtual ITreeNode GetContainingStatement(ITreeNode element);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Refactorings.JavaScript.InlineVar.JavaScriptInlineUtil : object {
    [ExtensionAttribute]
internal static bool ReferencesElement(ITreeNode node, IDeclaredElement element, bool onlyNonQualified);
}
public class JetBrains.ReSharper.Refactorings.JavaScript.InlineVar.JavaScriptInlineVar : InlineVarBase {
    private InlineHelper myInlineHelper;
    public InlineHelper InlineHelper { get; }
    public JavaScriptInlineVar(InlineVarWorkflow workflow, ISolution solution, IRefactoringDriver driver);
    public virtual void ProcessReferenceWithContext(IReference reference, CallSiteContext context, InlineTypeOwnerInitializerCallInfo info);
    public virtual InlineHelper get_InlineHelper();
    private static ITreeNode FindCommaForward(ICompositeElement parent, TreeElement child);
    private static ITreeNode FindCommaBackward(ICompositeElement parent, TreeElement child);
    private void RemoveDeclaration(IJavaScriptStatement variableStatement, IVariableDeclaration declaration, IVariableDeclarationList declarationList);
    public virtual void RemoveVariableDeclaration(IDeclaration declaration);
    public virtual void RemoveAssignment(ITreeNode expression);
}
public class JetBrains.ReSharper.Refactorings.JavaScript.InlineVar.JavaScriptInlineVarAnalyser : InlineVarAnalyserBase {
    private List`1<IReference> myReferences;
    private ITreeNode myExpression;
    private ITreeNode myAssignmentExpression;
    [CompilerGeneratedAttribute]
private bool <InlineAll>k__BackingField;
    public bool InlineAll { get; public set; }
    public List`1<IReference> References { get; }
    public ITreeNode Expression { get; }
    public ITreeNode AssignmentExpression { get; }
    public JavaScriptInlineVarAnalyser(InlineVarWorkflow workflow);
    [CompilerGeneratedAttribute]
public virtual bool get_InlineAll();
    [CompilerGeneratedAttribute]
public virtual void set_InlineAll(bool value);
    public virtual List`1<IReference> get_References();
    public virtual ITreeNode get_Expression();
    public virtual ITreeNode get_AssignmentExpression();
    public virtual Pair`2<bool, string> Run(IDeclaredElement variable, ITreeNode element, IList`1<IReference> references);
    protected virtual ITreeNode CalculateExpression(IDeclaredElement variable, IList`1<IDeclaration> declarations, String& message);
    protected virtual IJavaScriptExpression TransformExpression(IJavaScriptExpression expression);
}
internal class JetBrains.ReSharper.Refactorings.JavaScript.InlineVar.TypeScript.TypeScriptInlineVar : JavaScriptInlineVar {
    public TypeScriptInlineVar(InlineVarWorkflow workflow, ISolution solution, IRefactoringDriver driver);
    public virtual void RemoveVariableDeclaration(IDeclaration declaration);
}
internal class JetBrains.ReSharper.Refactorings.JavaScript.InlineVar.TypeScriptInlineVarAnalyser : JavaScriptInlineVarAnalyser {
    public TypeScriptInlineVarAnalyser(InlineVarWorkflow workflow);
    protected virtual ITreeNode CalculateExpression(IDeclaredElement variable, IList`1<IDeclaration> declarations, String& message);
    protected virtual IJavaScriptExpression TransformExpression(IJavaScriptExpression expression);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.JavaScript.LanguageImpl.JavaScriptLikeBaseLanguage", "16")]
public class JetBrains.ReSharper.Refactorings.JavaScript.Inplace.JavaScriptInplaceRefactoringsLanguageSpecifics : object {
    [CompilerGeneratedAttribute]
private IVisualizationModelLanguageHelper <VisualizationModelLanguageHelper>k__BackingField;
    public IVisualizationModelLanguageHelper VisualizationModelLanguageHelper { get; }
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Refactorings.JavaScript.Inplace.JavaScriptInplaceRefactoringsLanguageSpecifics/<UsingListRanges>d__0")]
public sealed virtual IEnumerable`1<DocumentRange> UsingListRanges(IFile file);
    [CompilerGeneratedAttribute]
public sealed virtual IVisualizationModelLanguageHelper get_VisualizationModelLanguageHelper();
    public sealed virtual SignatureKind GetSignatureKind(IDeclaration declaration);
    public sealed virtual bool IsInplaceRenameAvailable(IDeclaredElement declaredElement);
}
[SolutionComponentAttribute("16")]
internal class JetBrains.ReSharper.Refactorings.JavaScript.Inplace.TypeImportOnPasteProvider : object {
    private static int MAX_DEPTH;
    public sealed virtual ReferenceData CreateReferenceData(IReference reference, ResolveResultWithInfo resolveResult);
    public ReferenceData CreateReferenceDataRecursive(IReference reference, IDeclaredElement element, int depth);
}
internal class JetBrains.ReSharper.Refactorings.JavaScript.IntroduceField.TypeScript.IntroduceFieldRefactoringExec : RefactoringExecBase`2<IntroduceFieldWorkflow, IntroduceFieldRefactoring> {
    public IntroduceFieldRefactoringExec(IntroduceFieldWorkflow workflow, ISolution solution, IRefactoringDriver driver);
}
[RefactoringWorkflowProviderAttribute("16")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Refactorings.JavaScript.IntroduceField.TypeScript.IntroduceFieldWorkflowProvider : object {
    public sealed virtual IEnumerable`1<IRefactoringWorkflow> CreateWorkflow(IDataContext dataContext);
}
public class JetBrains.ReSharper.Refactorings.JavaScript.IntroduceField.TypeScript.TsIntroduceFieldOptions : object {
    private static DependencyResult AnalyzeDependencies(ITreeNode element);
    public static IntroduceFieldOptions CreateFromExpression(ITsExpression expression, List`1<ITreeNode> selected, ITsClassLikeDeclaration classDeclaration, IEnumerable`1<ITsExpression> memberContextOccurrences, IList`1<ITreeNode> classContextOccurrences, ITreeNode memberContext, bool hasCtorUsages);
    private static bool GetCanInitLocal(ITreeNode expression);
    private static bool GetCanInitLocal(IEnumerable`1<ITreeNode> expressions);
    public static IntroduceFieldOptions CreateFromLocalElement(IJavaScriptLocalElement localElement, ITsClassLikeDeclaration classDeclaration, ITreeNode workingNode, ITreeNode memberContext);
    private static bool HasWriteUsages(IDeclaredElement variable);
}
public class JetBrains.ReSharper.Refactorings.JavaScript.IntroduceField.TypeScript.TsIntroduceFieldPage : IntroduceFieldPage {
    private IntroduceFieldWorkflow myWorkflow;
    [CompilerGeneratedAttribute]
private IProperty`1<AccessRights> <AccessRights>k__BackingField;
    public IProperty`1<AccessRights> AccessRights { get; public set; }
    public TsIntroduceFieldPage(Lifetime lifetime, IntroduceFieldWorkflow workflow);
    [CompilerGeneratedAttribute]
public IProperty`1<AccessRights> get_AccessRights();
    [CompilerGeneratedAttribute]
public void set_AccessRights(IProperty`1<AccessRights> value);
    public virtual void Commit();
    protected virtual BeControl GetSpecific();
    protected virtual void ProcessInitializationValue(InitializationPlace place, RadioButtonProperties radioButtonProperties);
    [CompilerGeneratedAttribute]
private void <.ctor>b__5_0(PropertyChangedEventArgs`1<AccessRights> v);
    [CompilerGeneratedAttribute]
internal static bool <GetSpecific>g__IsVisible|7_2(AccessRights ar);
}
internal class JetBrains.ReSharper.Refactorings.JavaScript.IntroduceField.TypeScript.TsIntroduceFieldRefactoring : DrivenRefactoring`2<TsIntroduceFieldWorkflow, IntroduceFieldRefactoringExec> {
    private TsIntroduceFieldWorkflow myWorkflow;
    private ITreeNode myWorkingNode;
    private ITsClassLikeDeclaration myClassDeclaration;
    private TsIntroduceFieldViewModel myViewModel;
    private IntroFieldData myIntroFieldData;
    public TsIntroduceFieldRefactoring(TsIntroduceFieldWorkflow workflow, ISolution solution, IRefactoringDriver driver);
    public virtual bool Execute(IProgressIndicator pi);
    private void PushEvent(IPsiServices psiServices, ITsMemberVariableDeclaration fieldDeclaration);
}
public class JetBrains.ReSharper.Refactorings.JavaScript.IntroduceField.TypeScript.TsIntroduceFieldViewModel : IntroduceFieldViewModel {
    [CompilerGeneratedAttribute]
private IJavaScriptLocalElement <LocalElement>k__BackingField;
    [CompilerGeneratedAttribute]
private ITsClassLikeDeclaration <ClassDeclaration>k__BackingField;
    [CompilerGeneratedAttribute]
private ITreeNode <WorkingNode>k__BackingField;
    public IJavaScriptLocalElement LocalElement { get; }
    public ITsClassLikeDeclaration ClassDeclaration { get; public set; }
    public ITreeNode WorkingNode { get; public set; }
    public TsIntroduceFieldViewModel(ITreeNode workingNode, IJavaScriptLocalElement localElement);
    public TsIntroduceFieldViewModel(ITsExpression expression, ITreeNode workingNode, IList`1<ITreeNode> selected, IntroduceFieldOptions options);
    private TsIntroduceFieldViewModel(ITreeNode workingNode);
    [CompilerGeneratedAttribute]
public IJavaScriptLocalElement get_LocalElement();
    [CompilerGeneratedAttribute]
public ITsClassLikeDeclaration get_ClassDeclaration();
    [CompilerGeneratedAttribute]
public void set_ClassDeclaration(ITsClassLikeDeclaration value);
    [CompilerGeneratedAttribute]
public ITreeNode get_WorkingNode();
    [CompilerGeneratedAttribute]
public void set_WorkingNode(ITreeNode value);
    private void InitName();
}
public class JetBrains.ReSharper.Refactorings.JavaScript.IntroduceField.TypeScript.TsIntroduceFieldWorkflow : IntroduceFieldWorkflow {
    public IRefactoringPage FirstPendingRefactoringPage { get; }
    public TsIntroduceFieldWorkflow(ISolution solution, string actionId);
    public virtual bool IsAvailable(IDataContext context);
    public virtual IRefactoringPage get_FirstPendingRefactoringPage();
    private bool IsAvailableEx(IDataContext context, IJavaScriptLocalElement& element, ITreeNode& workingNode, ITsExpression& expression);
    public virtual IRefactoringExecuter CreateRefactoring(IRefactoringDriver driver);
    public virtual bool Initialize(IDataContext context);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.JavaScript.LanguageImpl.TypeScript.TypeScriptLanguage", "16")]
internal class JetBrains.ReSharper.Refactorings.JavaScript.IntroduceField.TypeScript.TypeScriptInstanceObjectUsageChecker : object {
    public sealed virtual InstanceObjectUsageResult GetCheckResult(ITreeNode element);
}
public class JetBrains.ReSharper.Refactorings.JavaScript.IntroducePartOfString.JsIntroducePartOfStringRefactoring : IntroduceLocalRefactoring {
    private static string TemporaryName;
    private JsIntroducePartOfStringWorkflow Workflow { get; }
    protected string CanNotPerformActionText { get; }
    public JsIntroducePartOfStringRefactoring(IntroduceLocalWorkflowBase workflow, ISolution solution, IRefactoringDriver driver);
    private JsIntroducePartOfStringWorkflow get_Workflow();
    protected virtual IntroduceVariableResult Execute();
    private static ITreeNode TransformNoSubstitutionLiteral(IJavaScriptLiteralExpression literalExpression, TreeTextRange range);
    private static string IntroducedText(TreeTextRange range, TreeTextRange expressionRange, string text, String& beforeText, String& afterText);
    private static ITreeNode TransformTemplateWithSubstitutionSubstring(ITreeNode templatePartToken, TreeTextRange range);
    private static ITreeNode TransformSubstring(IJavaScriptLiteralExpression literalExpression, TreeTextRange range, ITreeNode templatePartToken);
    protected virtual string get_CanNotPerformActionText();
}
public class JetBrains.ReSharper.Refactorings.JavaScript.IntroducePartOfString.JsIntroducePartOfStringWorkflow : IntroduceLocalWorkflowBase {
    [CompilerGeneratedAttribute]
private TreeTextRange <SelectionTreeRange>k__BackingField;
    [CompilerGeneratedAttribute]
private IJavaScriptLiteralExpression <OwnerExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private ITreeNode <TemplatePartToken>k__BackingField;
    public TreeTextRange SelectionTreeRange { get; private set; }
    public IJavaScriptLiteralExpression OwnerExpression { get; private set; }
    public ITreeNode TemplatePartToken { get; private set; }
    public string Title { get; }
    public JsIntroducePartOfStringWorkflow(ISolution solution, string actionId);
    [CompilerGeneratedAttribute]
public TreeTextRange get_SelectionTreeRange();
    [CompilerGeneratedAttribute]
private void set_SelectionTreeRange(TreeTextRange value);
    [CompilerGeneratedAttribute]
public IJavaScriptLiteralExpression get_OwnerExpression();
    [CompilerGeneratedAttribute]
private void set_OwnerExpression(IJavaScriptLiteralExpression value);
    [CompilerGeneratedAttribute]
public ITreeNode get_TemplatePartToken();
    [CompilerGeneratedAttribute]
private void set_TemplatePartToken(ITreeNode value);
    public virtual bool IsAvailable(IDataContext context);
    public virtual bool Initialize(IDataContext context);
    public virtual IRefactoringExecuter CreateRefactoring(IRefactoringDriver driver);
    public virtual string get_Title();
}
[RefactoringWorkflowProviderAttribute("16")]
public class JetBrains.ReSharper.Refactorings.JavaScript.IntroducePartOfString.JsIntroducePartOfStringWorkflowProvider : object {
    public sealed virtual IEnumerable`1<IRefactoringWorkflow> CreateWorkflow(IDataContext dataContext);
}
[ActionAttribute("JetBrains.ReSharper.Refactorings.Resources.Strings13", "IntroduceTypeAliasActionText")]
public class JetBrains.ReSharper.Refactorings.JavaScript.IntroduceTypeAlias.TypeScript.TsIntroduceTypeAliasAction : ExtensibleRefactoringAction`1<TsIntroduceTypeAliasWorkflowProvider> {
    public static string ACTION_ID;
    protected RichText Caption { get; }
    protected virtual RichText get_Caption();
}
public class JetBrains.ReSharper.Refactorings.JavaScript.IntroduceTypeAlias.TypeScript.TsIntroduceTypeAliasRefactoringExecuter : object {
    private TsIntroduceTypeAliasWorkflow myTsIntroduceTypeAliasWorkflow;
    public TsIntroduceTypeAliasRefactoringExecuter(TsIntroduceTypeAliasWorkflow tsIntroduceTypeAliasWorkflow);
    public sealed virtual bool Execute(IProgressIndicator pi);
}
public class JetBrains.ReSharper.Refactorings.JavaScript.IntroduceTypeAlias.TypeScript.TsIntroduceTypeAliasWorkflow : DrivenRefactoringWorkflow {
    [CompilerGeneratedAttribute]
private CustomHighlightingRequest <HighlightingRequest>k__BackingField;
    [CompilerGeneratedAttribute]
private ITextControl <TextControl>k__BackingField;
    [CompilerGeneratedAttribute]
private DocumentRange <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<DocumentRange> <Usages>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<DocumentRange> <MoreUsages>k__BackingField;
    [CompilerGeneratedAttribute]
private SelectedOccurrences <Occurrences>k__BackingField;
    [CompilerGeneratedAttribute]
private ITsTypeUsage <SelectedTreeNode>k__BackingField;
    [CompilerGeneratedAttribute]
private IJavaScriptFile <PsiFile>k__BackingField;
    public HelpId HelpKeyword { get; }
    public IRefactoringPage FirstPendingRefactoringPage { get; }
    public bool MightModifyManyDocuments { get; }
    public string Title { get; }
    public RefactoringActionGroup ActionGroup { get; }
    public bool HasManyUsages { get; }
    public CustomHighlightingRequest HighlightingRequest { get; public set; }
    public ITextControl TextControl { get; private set; }
    public DocumentRange Expression { get; private set; }
    public List`1<DocumentRange> Usages { get; private set; }
    public List`1<DocumentRange> MoreUsages { get; private set; }
    public SelectedOccurrences Occurrences { get; public set; }
    public ITsTypeUsage SelectedTreeNode { get; private set; }
    public IJavaScriptFile PsiFile { get; private set; }
    public TsIntroduceTypeAliasWorkflow(ISolution solution, string actionID);
    public virtual HelpId get_HelpKeyword();
    public virtual IRefactoringPage get_FirstPendingRefactoringPage();
    public virtual bool get_MightModifyManyDocuments();
    private static Tuple`3<IJavaScriptFile, DocumentRange, ITextControl> GetJavaScriptFileAndSelection(IDataContext context);
    public virtual bool IsAvailable(IDataContext context);
    public virtual string get_Title();
    public virtual RefactoringActionGroup get_ActionGroup();
    public sealed virtual bool get_HasManyUsages();
    [CompilerGeneratedAttribute]
public sealed virtual CustomHighlightingRequest get_HighlightingRequest();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HighlightingRequest(CustomHighlightingRequest value);
    [CompilerGeneratedAttribute]
public sealed virtual ITextControl get_TextControl();
    [CompilerGeneratedAttribute]
private void set_TextControl(ITextControl value);
    [CompilerGeneratedAttribute]
public sealed virtual DocumentRange get_Expression();
    [CompilerGeneratedAttribute]
private void set_Expression(DocumentRange value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<DocumentRange> get_Usages();
    [CompilerGeneratedAttribute]
private void set_Usages(List`1<DocumentRange> value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<DocumentRange> get_MoreUsages();
    [CompilerGeneratedAttribute]
private void set_MoreUsages(List`1<DocumentRange> value);
    public sealed virtual void SetIndex(SelectedOccurrences value);
    [CompilerGeneratedAttribute]
public SelectedOccurrences get_Occurrences();
    [CompilerGeneratedAttribute]
public void set_Occurrences(SelectedOccurrences value);
    [CompilerGeneratedAttribute]
public ITsTypeUsage get_SelectedTreeNode();
    [CompilerGeneratedAttribute]
private void set_SelectedTreeNode(ITsTypeUsage value);
    public sealed virtual IIntroduceOccurencesPresentation TryCreateSelectedOccurences(SelectedOccurrences value);
    public sealed virtual IEnumerable`1<DocumentRange> GetRangesForHighlighting(SelectedOccurrences value);
    public virtual IRefactoringExecuter CreateRefactoring(IRefactoringDriver driver);
    public virtual bool Initialize(IDataContext context);
    [CompilerGeneratedAttribute]
public IJavaScriptFile get_PsiFile();
    [CompilerGeneratedAttribute]
private void set_PsiFile(IJavaScriptFile value);
}
[RefactoringWorkflowProviderAttribute("16")]
public class JetBrains.ReSharper.Refactorings.JavaScript.IntroduceTypeAlias.TypeScript.TsIntroduceTypeAliasWorkflowProvider : object {
    public sealed virtual IEnumerable`1<IRefactoringWorkflow> CreateWorkflow(IDataContext dataContext);
}
internal class JetBrains.ReSharper.Refactorings.JavaScript.IntroduceVariable.ExpressionData : object {
    [CompilerGeneratedAttribute]
private bool <Remove>k__BackingField;
    public bool Remove { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Remove();
    [CompilerGeneratedAttribute]
public void set_Remove(bool value);
}
[PostfixTemplateAttribute("var", "Introduces variable for expression", "var x = expr;")]
public class JetBrains.ReSharper.Refactorings.JavaScript.IntroduceVariable.IntroduceVariableTemplate : IntroduceVariableTemplateBase {
}
public abstract class JetBrains.ReSharper.Refactorings.JavaScript.IntroduceVariable.IntroduceVariableTemplateBase : JavaScriptPostfixTemplate {
    public static string TemplateName;
    public virtual PostfixTemplateInfo TryCreateInfo(JavaScriptPostfixTemplateContext context);
    private static PostfixTemplateInfo Create(JavaScriptPostfixExpressionContext bestContext, bool availableInPreciseMode);
    private static bool IsConstructorInvocation(IJavaScriptExpression expression);
    private static bool IsItMattersToShowVar(JavaScriptPostfixExpressionContext context);
    public virtual PostfixTemplateBehavior CreateBehavior(PostfixTemplateInfo info);
    private static void ExecuteRefactoring(ITextControl textControl, IJavaScriptExpression expression, Action executeAfter);
}
public class JetBrains.ReSharper.Refactorings.JavaScript.IntroduceVariable.JavaScriptIntroduceVariable : IntroduceVariableBase {
    public JavaScriptIntroduceVariable(IntroduceLocalWorkflowBase workflow, ISolution solution, IRefactoringDriver driver);
    public virtual IntroduceVariableResult Process(IntroduceVariableData introduceVariableData);
}
public class JetBrains.ReSharper.Refactorings.JavaScript.IntroduceVariable.JavaScriptIntroduceVariableHelper : IntroduceVariableHelper {
    public bool IsLanguageSupported { get; }
    public virtual bool get_IsLanguageSupported();
    public virtual bool CheckAvailability(ITreeNode element);
    public virtual ITreeNode GetScope(ITreeNode element);
    public virtual bool CheckOccurrence(ITreeNode masterExpression, ITreeNode occurrence);
}
public static class JetBrains.ReSharper.Refactorings.JavaScript.IntroduceVariable.JsIntroduceVariableUtil : object {
    private static Key`1<ExpressionData> ourMarkKey;
    private static JsIntroduceVariableUtil();
    public static IntroduceVariableResult IntroduceVariable(IEnumerable`1<ITreeNode> elements, ITreeNode sourceExpression, ISolution solution);
    private static IJavaScriptStatement CreateLocalVariableDeclaration(IJavaScriptExpression expression, JavaScriptElementFactory factory, string uniqueName, int count, DefaultVariableKind preferredVarKind);
    private static IJavaScriptStatement CreateJsLocalVariableDeclaration(IJavaScriptExpression expression, JavaScriptElementFactory factory, string uniqueName, int count, DefaultVariableKind preferredVarKind);
    private static IJavaScriptStatement CreateTsLocalVariableDeclaration(IJavaScriptExpression expression, JavaScriptElementFactory factory, string uniqueName, int count, DefaultVariableKind preferredVarKind);
    private static String[] GetUniqueNames(IJavaScriptStatement statement, NamingManager namingManager, INamesCollection namesCollection);
    private static string GetLetOrVarKeyword(IJavaScriptTreeNode node, DefaultVariableKind preferredVarKind);
}
[PostfixTemplateAttribute("var", "Introduces variable for expression", "let x = expr;")]
public class JetBrains.ReSharper.Refactorings.JavaScript.IntroduceVariable.TypeScript.IntroduceVariableTemplate : IntroduceVariableTemplateBase {
    public PsiLanguageType Language { get; }
    public virtual PsiLanguageType get_Language();
}
public class JetBrains.ReSharper.Refactorings.JavaScript.IntroduceVariable.TypeScript.TypeScriptIntroduceVariable : JavaScriptIntroduceVariable {
    public TypeScriptIntroduceVariable(IntroduceLocalWorkflowBase workflow, ISolution solution, IRefactoringDriver driver);
}
public class JetBrains.ReSharper.Refactorings.JavaScript.IntroduceVariable.TypeScript.TypeScriptIntroduceVariableHelper : JavaScriptIntroduceVariableHelper {
    public virtual bool CheckOccurrence(ITreeNode masterExpression, ITreeNode occurrence);
}
public static class JetBrains.ReSharper.Refactorings.JavaScript.Move.TypeScript.TypeScriptImportsUtil : object {
    public static void RemoveNewUsusedUsings(IFile file, HashSet`1<ITreeNode> oldUnusedUsings);
    private static void RemoveUsingDirective(ITsImportDeclaration usingDirective);
    private static void CollectAllImportDirectives(ITypeScriptModuleScope declaration, List`1<ITsAnyImportDeclaration> directives);
    private static IDictionary`2<ITsAnyImportDeclaration, IList`1<IReference>> GetUsingDirectiveUsage(ITsFile file);
    public static void AddFileToUsingSaver(UnusedUsingSaver saver, IFile file);
}
public static class JetBrains.ReSharper.Refactorings.JavaScript.Move.TypeScript.TypeScriptMoveHelpers : object {
    private static void DoWithValidReferenceNode(IReference reference, Action`1<ITreeNode> doAction);
    public static void RemoveAllJsFileReferences(IPsiServices psiServices, VirtualFileSystemPath originalLocation, ISolution solution);
    public static void UpdateJsFileReferences(IPsiServices psiServices, VirtualFileSystemPath originalLocation, ISolution solution, VirtualFileSystemPath newLocation);
    public static void AddNewRequiredJsFileReferences(IPsiServices psiServices, VirtualFileSystemPath originalLocation, ISolution solution, VirtualFileSystemPath newLocation);
    public static bool IsExternallyVisibleSymbol(IDeclaredElement element);
    public static bool IsFromExtendsList(ITreeNode element);
    public static void RemoveUsing(ITreeNode usingNode);
    public static IDeclaredElement GetContainingTypeElement(IDeclaredElement typeElement);
    public static string NormalizeModuleName(string name);
    public static string GetContainingNamespaceQualifiedName(IDeclaredElement typeElement);
    public static string GetFullNameWithoutNamespace(IDeclaredElement typeElement);
    public static void CheckVisibilityConflicts(ITreeNode oldDeclaration, ITypeScriptModuleScope holder, JsResolveContext context, IRefactoringDriver driver);
    public static void FixContainingHolderIfNeeded(ITypeScriptModuleScope containingHolder);
    private static ITsModuleDeclaration GetInnerModuleDeclarationForName(ITsModuleDeclaration current, string name);
    public static ITypeScriptModuleScope CreateNamespaceDeclaration(ITsFile file, string name, bool shouldBeExported, Boolean& mustDeleteDeclarationInNewHolder);
    public static IReadOnlyList`1<IDeclaration> GetTopLevelTypeDeclarations(IFile file);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Refactorings.JavaScript.Move.TypeScript.TypeScriptMoveHelpers/<GetExportedModuleDeclarations>d__16")]
private static IEnumerable`1<IDeclaration> GetExportedModuleDeclarations(ITsModuleDeclaration module, bool requireExported);
}
public class JetBrains.ReSharper.Refactorings.JavaScript.Move.TypeScript.TypeScriptMoveIntoMatchingFilesHelper : MoveIntoMatchingFilesHelperBase {
    public bool IsLanguageSupported { get; }
    public bool ShouldUpdateAllUsages { get; }
    public bool SuggestDelegates { get; }
    public virtual bool IsFromExtendsList(ITreeNode element);
    public virtual void SaveUnusedUsings(IFile file, UnusedUsingSaver saver);
    public virtual void RemoveUnusedUsing(IFile file, HashSet`1<ITreeNode> usings);
    public virtual bool IsExternallyVisibleSymbol(IDeclaredElement element);
    public virtual bool get_IsLanguageSupported();
    public virtual bool get_ShouldUpdateAllUsages();
    public virtual IReadOnlyList`1<IDeclaration> GetTopLevelTypeDeclarations(IFile file, Boolean& hasTopLevelCode);
    public virtual bool IsReferenceName(ITreeNode element);
    public virtual void MoveDeclarationFromFile(MovedDeclaration declaration, ResolveImagesRepository repository);
    public virtual ITreeNode GetOwnerNamespaceDeclaration(IDeclaration declaration);
    public virtual bool IsEnum(IDeclaredElement typeElement);
    public virtual bool IsType(IDeclaredElement typeElement);
    public virtual bool IsClassOrStruct(IDeclaredElement declaredElement);
    public virtual bool IsInterface(IDeclaredElement declaredElement);
    public virtual void UpdateFileReferences(MovedDeclaration declaration, ISolution solution);
    public virtual bool get_SuggestDelegates();
}
public class JetBrains.ReSharper.Refactorings.JavaScript.Move.TypeScript.TypeScriptMoveToFileHelper : MoveToFileHelperBase {
    public bool IsLanguageSupported { get; }
    public bool ShouldUpdateAllUsages { get; }
    public virtual bool IsFromExtendsList(ITreeNode element);
    public virtual void SaveUnusedUsings(IFile file, UnusedUsingSaver saver);
    public virtual void RemoveUnusedUsing(IFile file, HashSet`1<ITreeNode> usings);
    public virtual bool IsExternallyVisibleSymbol(IDeclaredElement element);
    public virtual bool get_IsLanguageSupported();
    public virtual bool FileHasOtherDeclarations(IDeclaration declaration);
    private bool ScanForOtherDeclarations(ITypeScriptModuleScope holder, IDeclaration declaration);
    public virtual bool IsReferenceName(ITreeNode element);
    public virtual bool get_ShouldUpdateAllUsages();
    public virtual bool MoveDeclaration(IDeclaration declaration, ResolveImagesRepository repository, IFile file, MoveToFileWorkflow workflow, IRefactoringDriver driver);
    public virtual bool AcceptTypeElement(IDeclaredElement typeElement);
    public virtual IDeclaration GetTypeDeclaration(IDataContext context);
}
public class JetBrains.ReSharper.Refactorings.JavaScript.Move.TypeScript.TypeScriptMoveToFolderHelper : MoveToFolderHelperBase {
    private static Key`1<IDictionary`2<string, ITsType>> ourSourceFileImportAliases;
    public bool IsLanguageSupported { get; }
    public bool CanMoveSingleTypeDeclaration { get; }
    public bool SuggestFixNamespaces { get; }
    public bool SearchInRelatedFiles { get; }
    private static TypeScriptMoveToFolderHelper();
    public virtual bool get_IsLanguageSupported();
    public virtual IReadOnlyList`1<IDeclaration> GetTopLevelTypeDeclarations(IFile file);
    public virtual bool get_CanMoveSingleTypeDeclaration();
    public virtual bool IsFromExtendsList(ITreeNode element);
    public virtual bool IsReferenceName(ITreeNode element);
    public virtual bool IsExternallyVisibleSymbol(IDeclaredElement element);
    private static bool IsExportedUpTo(ITypeScriptModifiersOwner decl, ITypeScriptModuleScope stopScope);
    public virtual IDeclaredElement CheckTypeElement(IDeclaredElement declaredElement);
    public virtual string GetContainingNamespaceQualifiedName(IDeclaredElement declaredElement);
    public virtual void GetElementToPublicDeps(IDeclaredElement declaredElement, Queue`1<IDeclaredElement> queue, JetHashSet`1<IDeclaredElement> processedElements);
    public virtual void MakePublic(IDeclaration declaration);
    public virtual bool DeclarationCanProvideName(IDeclaration declaration);
    public virtual bool IsNonPublic(IDeclaredElement declaredElement);
    public virtual bool MoveWholeFile(MoveToFolderHierarchyProjectItem item, IFile sourceFile, IFile targetFile, bool fixNamespaces, string name, ResolveImagesRepository repository, bool searchInRelatedFiles);
    private static IEnumerable`1<ITypeScriptGlobalDeclaration> GetTypeDeclarations(ITypeScriptModuleScope scope);
    private static void RemoveNamespace(ITypeScriptModuleScope sourceNamespace);
    private static void RemoveTypeDeclaration(ITypeScriptGlobalDeclaration declaration);
    private static bool RemoveDeclarationsInFiles(ITypeScriptModuleScope sourceHolder, ITypeScriptModuleScope targetHolder, IList`1<IDeclaration> children);
    private static void RemoveTypeDeclarationWithNamespaces(ITypeScriptGlobalDeclaration declaration);
    public virtual bool MoveFewDeclarations(IFile sourceFile, IFile targetFile, bool fixNamespaces, string name, ResolveImagesRepository repository, IList`1<IDeclaration> children, bool searchInRelatedFiles);
    public virtual bool MoveSingleDeclaration(IDeclaration typeDeclaration, IFile targetFile, string expectedNamespaceName, ResolveImagesRepository repository, bool searchInRelatedFiles);
    public virtual bool get_SuggestFixNamespaces();
    public virtual bool get_SearchInRelatedFiles();
    private static ITypeScriptModuleScope RemoveImports(ITypeScriptModuleScope holder);
    public virtual void SaveUnusedUsings(IFile file, UnusedUsingSaver saver);
    public virtual void RemoveUnusedUsing(IFile file, HashSet`1<ITreeNode> usings);
    public virtual void RemoveUsing(ITreeNode element);
    public virtual void PostProcessFile(IFile file, bool fileMovedOrRemoved, List`1<VirtualFileSystemPath> movedPaths, bool searchInRelatedFiles, VirtualFileSystemPath oldLocation);
    public virtual BeControl GetAdditionalContent(Lifetime lifetime, MoveToFolderDataModel workflowDataModel);
    private static Dictionary`2<string, ITsType> GetSourceFileCustomAliases(ITsFile tsSourceFile);
}
public class JetBrains.ReSharper.Refactorings.JavaScript.Move.TypeScript.TypeScriptMoveToNamespaceHelper : MoveToNamespaceHelperBase {
    public bool IsLanguageSupported { get; }
    public bool AllowEmptyNamespace { get; }
    public virtual string GetFullNameWithoutNamespace(IDeclaredElement typeElement);
    public virtual string GetContainingNamespaceQualifiedName(IDeclaredElement typeElement);
    public virtual IDeclaredElement GetContainingType(IDeclaredElement typeElement);
    public virtual bool IsFromExtendsList(ITreeNode element);
    public virtual void SaveUnusedUsings(IFile file, UnusedUsingSaver saver);
    public virtual void RemoveUnusedUsing(IFile file, HashSet`1<ITreeNode> usings);
    public virtual bool IsExternallyVisibleSymbol(IDeclaredElement element);
    public virtual void RemoveUsing(ITreeNode element);
    public virtual bool get_IsLanguageSupported();
    public virtual bool ShouldDisallowByContainingType(IDeclaredElement typeElement);
    public virtual bool IsTypeElement(IDeclaredElement element);
    public virtual bool IsReferenceName(ITreeNode element);
    public virtual bool CheckTypeExists(string ns, PsiLanguageType language, IPsiServices psiServices, ISolution solution, bool isCaseSensitive, object context, string shortName);
    public virtual bool IsTypeParameter(IDeclaredElement element);
    public virtual void MovePrimaryDeclaration(IDeclaration typeDeclaration, string newNamespaceName, ResolveImagesRepository repository, IRefactoringDriver driver);
    private ITypeScriptModuleScope GetNewTypeDeclarationHolder(ITypeScriptGlobalDeclaration typeDeclaration, string namespaceName, bool mustExport, Boolean& mustDeleteDeclarationInNewHolder);
    public virtual string ValidateNamespaceName(string newNamespace, IDeclaration declaration);
    public virtual string LanguageSpecificNamespaceName();
    public virtual void FillItemsFromCache(object context, List`1<IDeclaredElement> elementsToSearch, IPsiServices psiServices);
    public virtual bool get_AllowEmptyNamespace();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.JavaScript.LanguageImpl.Angular2.Angular2BaseLanguage", "16")]
public class JetBrains.ReSharper.Refactorings.JavaScript.Prelude.Angular2.Angular2RefactoringLanguageService : JavaScriptRefactoringLanguageService {
    public virtual IntroduceVariableBase CreateIntroduceVariable(IntroduceLocalWorkflowBase workflow, ISolution solution, IRefactoringDriver driver);
    public virtual InlineVarBase CreateInlineVar(InlineVarWorkflow workflow, ISolution solution, IRefactoringDriver driver);
    public virtual IntroduceVariableHelper CreateIntroduceVariableHelper();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.JavaScript.LanguageImpl.JavaScriptLikeBaseLanguage", "16")]
public class JetBrains.ReSharper.Refactorings.JavaScript.Prelude.JavaScriptRefactoringLanguageService : InternalRefactoringLanguageService {
    public RefactoringsHelper Helper { get; }
    public virtual RefactoringsHelper get_Helper();
    public virtual IntroduceVariableBase CreateIntroduceVariable(IntroduceLocalWorkflowBase workflow, ISolution solution, IRefactoringDriver driver);
    public virtual InlineVarBase CreateInlineVar(InlineVarWorkflow workflow, ISolution solution, IRefactoringDriver driver);
    public virtual IntroduceVariableHelper CreateIntroduceVariableHelper();
}
public class JetBrains.ReSharper.Refactorings.JavaScript.Prelude.JavaScriptRefactoringsHelper : RefactoringsHelper {
    public virtual bool IsLocalVariable(IDeclaredElement element);
    public virtual bool InitializerIsRecursive(IDeclaredElement element);
    public virtual InlineVarAnalyserBase CreateInlineVarAnalyser(InlineVarWorkflow workflow);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.JavaScript.LanguageImpl.JSon.JsonLanguage", "16")]
public class JetBrains.ReSharper.Refactorings.JavaScript.Prelude.JsonRefactoringLanguageService : JavaScriptRefactoringLanguageService {
    public virtual IntroduceVariableBase CreateIntroduceVariable(IntroduceLocalWorkflowBase workflow, ISolution solution, IRefactoringDriver driver);
    public virtual InlineVarBase CreateInlineVar(InlineVarWorkflow workflow, ISolution solution, IRefactoringDriver driver);
    public virtual IntroduceVariableHelper CreateIntroduceVariableHelper();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.JavaScript.LanguageImpl.TypeScript.TypeScriptLanguage", "16")]
public class JetBrains.ReSharper.Refactorings.JavaScript.Prelude.TypeScript.TypeScriptRefactoringLanguageService : JavaScriptRefactoringLanguageService {
    public RefactoringsHelper Helper { get; }
    public virtual InlineVarBase CreateInlineVar(InlineVarWorkflow workflow, ISolution solution, IRefactoringDriver driver);
    public virtual MoveToNamespaceHelperBase CreateMoveToNamespaceHelper();
    public virtual MoveToFileHelperBase CreateMoveToFileHelper();
    public virtual MoveIntoMatchingFilesHelperBase CreateMoveIntoMatchingFilesHelper();
    public virtual MoveToFolderHelperBase CreateMoveToFolderHelper();
    public virtual RefactoringsHelper get_Helper();
    public virtual RenameFileHelper CreateRenameFileHelper(RenameFileWorkflow renameFileWorkflow);
    public virtual IntroduceVariableBase CreateIntroduceVariable(IntroduceLocalWorkflowBase workflow, ISolution solution, IRefactoringDriver driver);
    public virtual IntroduceVariableHelper CreateIntroduceVariableHelper();
    public virtual EncapsulateFieldBase CreateEncapsulateField(EncapsulateFieldWorkflow workflow, ISolution solution, IRefactoringDriver driver);
}
public class JetBrains.ReSharper.Refactorings.JavaScript.Prelude.TypeScript.TypeScriptRefactoringsHelper : JavaScriptRefactoringsHelper {
    public virtual InlineVarAnalyserBase CreateInlineVarAnalyser(InlineVarWorkflow workflow);
    public virtual bool CanUseInstanceFields(ITreeNode element);
}
[RenamePartAttribute("16")]
public class JetBrains.ReSharper.Refactorings.JavaScript.Rename.Angular2.Angular2PrimaryDeclaredElementProvider : object {
    private Lazy`1<AngularIsEnabledProvider> myAngularIsEnabledProvider;
    public Angular2PrimaryDeclaredElementProvider(Lazy`1<AngularIsEnabledProvider> angularIsEnabledProvider);
    public sealed virtual IDeclaredElement GetPrimaryDeclaredElement(IDeclaredElement declaredElement, IReference reference);
}
[DerivedRenamesEvaluatorAttribute("16")]
public class JetBrains.ReSharper.Refactorings.JavaScript.Rename.Angular2.AngularEntitiesDerivedRename : object {
    private Lazy`1<AngularIsEnabledProvider> myAngularIsEnabledProvider;
    public bool SuggestedElementsHaveDerivedName { get; }
    public AngularEntitiesDerivedRename(Lazy`1<AngularIsEnabledProvider> angularIsEnabledProvider);
    public sealed virtual bool get_SuggestedElementsHaveDerivedName();
    public sealed virtual IEnumerable`1<IDeclaredElement> CreateFromElement(IEnumerable`1<IDeclaredElement> initialElements, DerivedElement derivedElement, IProgressIndicator pi);
    public sealed virtual IEnumerable`1<IDeclaredElement> CreateFromReference(IReference reference, IDeclaredElement declaredElement, IProgressIndicator pi);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Refactorings.JavaScript.Rename.Angular2.ZoneMarker : object {
}
public class JetBrains.ReSharper.Refactorings.JavaScript.Rename.AtomicRenames.DynamicPropertyAtomicRename : JavaScriptAtomicRenameBase {
    private Dictionary`2<IReference, ReferenceType> myReferenceTypes;
    private IList`1<IReferencePointer> myCheckedReferenceOccurrences;
    private IList`1<ITreeNodePointer`1<IDeclaration>> myCheckedDeclarationOccurrences;
    [CompilerGeneratedAttribute]
private string <OldName>k__BackingField;
    public string OldName { get; }
    public DynamicPropertyAtomicRename(IJavaScriptDynamicProperty dynamicProperty, string newName);
    [CompilerGeneratedAttribute]
public virtual string get_OldName();
    protected virtual IEnumerable`1<IDeclaration> GetOwnStrictDeclarations();
    protected virtual IEnumerable`1<IReference> GetOwnStrictReferences(RenameWorkflowBase workflow, IProgressIndicator pi);
    protected virtual IEnumerable`1<IDeclaration> GetFinalOptionalDeclarations(RenameWorkflowBase workflow);
    protected virtual IEnumerable`1<IReference> GetFinalOptionalReferences(RenameWorkflowBase workflow, IProgressIndicator pi);
    private IEnumerable`1<IReference> GetOptionalReferences(RenameWorkflowBase workflow, List`1<IDeclaredElement> elements, IProgressIndicator pi);
    private IEnumerable`1<IReference> ObtainOptionalReferences(RenameWorkflowBase workflow, IProgressIndicator pi);
    public virtual IRefactoringPage CreateRenamesConfirmationPage(IRenameWorkflow renameWorkflow, IProgressIndicator pi);
    public void CommitCheckedOccurrences(IEnumerable`1<IReference> checkedOccurrences, IEnumerable`1<IDeclaration> declarationOccurrences);
}
public abstract class JetBrains.ReSharper.Refactorings.JavaScript.Rename.AtomicRenames.JavaScriptAtomicRenameBase : AtomicRenameBase {
    private IDeclaredElementPointer`1<IRenameableDeclaredElement> myDeclaredElementPointer;
    private string myNewName;
    private IDeclaredElementPointer`1<IRenameableDeclaredElement> myNewPropertyPointer;
    [CompilerGeneratedAttribute]
private string <OldName>k__BackingField;
    public IDeclaredElement NewDeclaredElement { get; }
    public string NewName { get; }
    public string OldName { get; }
    public IDeclaredElement PrimaryDeclaredElement { get; }
    public IList`1<IDeclaredElement> SecondaryDeclaredElements { get; }
    protected JavaScriptAtomicRenameBase(IRenameableDeclaredElement element, string newName);
    public virtual IDeclaredElement get_NewDeclaredElement();
    public virtual string get_NewName();
    [CompilerGeneratedAttribute]
public virtual string get_OldName();
    public virtual IDeclaredElement get_PrimaryDeclaredElement();
    public virtual IList`1<IDeclaredElement> get_SecondaryDeclaredElements();
    public virtual void Rename(IRenameRefactoring exec, IProgressIndicator pi, bool hasConflictsWithDeclarations, IRefactoringDriver driver);
    private void RenameDeclarations(IEnumerable`1<IDeclaration> declarations, SubProgressIndicator renamePi);
    private void RenameReferences(IEnumerable`1<IReference> references, IDeclaredElement newProperty, SubProgressIndicator renamePi);
    protected IEnumerable`1<IReference> FindStrictReferences(RenameWorkflow workflow, IDeclaration declaration, IProgressIndicator pi);
    protected static IEnumerable`1<IReference> FindStrictReferences(IDeclaredElement declaredElement, IProgressIndicator pi);
    protected bool AcceptDeclaration(IDeclaration declaration);
    protected bool AcceptReference(IReference reference);
    protected abstract virtual IEnumerable`1<IDeclaration> GetOwnStrictDeclarations();
    protected abstract virtual IEnumerable`1<IReference> GetOwnStrictReferences(RenameWorkflowBase workflow, IProgressIndicator pi);
    protected abstract virtual IEnumerable`1<IDeclaration> GetFinalOptionalDeclarations(RenameWorkflowBase workflow);
    protected abstract virtual IEnumerable`1<IReference> GetFinalOptionalReferences(RenameWorkflowBase workflow, IProgressIndicator pi);
}
internal class JetBrains.ReSharper.Refactorings.JavaScript.Rename.AtomicRenames.JsSmartSectionsDescriptor : MultiSectionalCheckUsagesDescriptor {
    [CompilerGeneratedAttribute]
private IList`1<IDeclaredElement> <TargetElements>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<IReference, ReferenceType> <ReferenceTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IDeclaration> <OnlySmartDeclarations>k__BackingField;
    public IList`1<IDeclaredElement> TargetElements { get; }
    public Dictionary`2<IReference, ReferenceType> ReferenceTypes { get; }
    public IEnumerable`1<IDeclaration> OnlySmartDeclarations { get; public set; }
    public JsSmartSectionsDescriptor(RenameWorkflow workflow, IList`1<IDeclaredElement> targetElements, Dictionary`2<IReference, ReferenceType> referenceTypes, IEnumerable`1<IDeclaration> onlySmartDeclarations);
    [CompilerGeneratedAttribute]
public IList`1<IDeclaredElement> get_TargetElements();
    [CompilerGeneratedAttribute]
public Dictionary`2<IReference, ReferenceType> get_ReferenceTypes();
    [CompilerGeneratedAttribute]
public IEnumerable`1<IDeclaration> get_OnlySmartDeclarations();
    [CompilerGeneratedAttribute]
public void set_OnlySmartDeclarations(IEnumerable`1<IDeclaration> value);
}
[ShellFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Refactorings.JavaScript.Rename.AtomicRenames.JsUsagesSectionProvider : OccurrenceSectionProvider {
    private static GroupingSectionId DynamicSmart;
    private static GroupingSectionId DynamicOther;
    private static JsUsagesSectionProvider();
    public virtual ICollection`1<GroupingSectionId> GetGroupSectionId(IOccurrence occurrence, IOccurrenceBrowserDescriptor descriptor);
    public virtual ICollection`1<TreeSection> GetTreeSections(IOccurrenceBrowserDescriptor descriptor);
    public virtual bool IsApplicable(IOccurrenceBrowserDescriptor descriptor);
}
public class JetBrains.ReSharper.Refactorings.JavaScript.Rename.AtomicRenames.ReferencesDeclarationsAtomicRename : JavaScriptAtomicRenameBase {
    private IList`1<IDeclaration> myOwnStrictDeclarations;
    public ReferencesDeclarationsAtomicRename(IRenameableDeclaredElement element, string newName);
    protected virtual IEnumerable`1<IDeclaration> GetOwnStrictDeclarations();
    protected virtual IEnumerable`1<IReference> GetOwnStrictReferences(RenameWorkflowBase workflow, IProgressIndicator pi);
    protected virtual IEnumerable`1<IDeclaration> GetFinalOptionalDeclarations(RenameWorkflowBase workflow);
    protected virtual IEnumerable`1<IReference> GetFinalOptionalReferences(RenameWorkflowBase workflow, IProgressIndicator pi);
}
public enum JetBrains.ReSharper.Refactorings.JavaScript.Rename.CheckScope : Enum {
    public int value__;
    public static CheckScope RelatedScope;
    public static CheckScope DynamicRefsScope;
    public static CheckScope DynamicDeclarationsScope;
}
public class JetBrains.ReSharper.Refactorings.JavaScript.Rename.CompatibleElementsProvider : RelatedElementsProvider {
    public string Title { get; }
    public string Description { get; }
    public CompatibleElementsProvider(ITsStaticTypedProperty property, JsResolveContext context, Lifetime lifetime);
    public virtual string get_Title();
    public virtual string get_Description();
    private static IEnumerable`1<ITsTypeMember> TryFindAllImplementations(ITsStaticTypedProperty member, JsResolveContext context);
}
public enum JetBrains.ReSharper.Refactorings.JavaScript.Rename.ForceElementCheckPolicy : Enum {
    public int value__;
    public static ForceElementCheckPolicy CheckAll;
    public static ForceElementCheckPolicy CheckNone;
    public static ForceElementCheckPolicy NotApplicable;
}
[LanguageAttribute("JetBrains.ReSharper.Psi.JavaScript.WinRT.LanguageImpl.JavaScriptWinRTLanguage", "16")]
internal class JetBrains.ReSharper.Refactorings.JavaScript.Rename.JavaScript.WinRt.JavaScriptWinRtRenameHelper : JavaScriptRenameHelper {
    public JavaScriptWinRtRenameHelper(SearchDomainFactory factory);
    public virtual IEnumerable`1<IDeclaredElement> GetSecondaryElements(IDeclaredElement declaredElement, string newName);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.JavaScript.LanguageImpl.JavaScriptLikeBaseLanguage", "16")]
public class JetBrains.ReSharper.Refactorings.JavaScript.Rename.JavaScriptRenameHelper : RenameHelperBase {
    private SearchDomainFactory myFactory;
    [CompilerGeneratedAttribute]
private bool <CanRenameMultipleLocal>k__BackingField;
    public bool IsLanguageSupported { get; }
    public bool CanRenameMultipleLocal { get; }
    public JavaScriptRenameHelper(SearchDomainFactory factory);
    public virtual bool get_IsLanguageSupported();
    public virtual bool CanHavePageAfterInitial();
    public virtual IEnumerable`1<IDeclaredElement> GetOverloads(IDeclaredElement element);
    public virtual bool CheckLocalRenameSameDocument(IDeclaredElement primevalDeclaredElement);
    public virtual bool IsLocalRename(IDeclaredElement primevalDeclaredElement);
    [CompilerGeneratedAttribute]
public virtual bool get_CanRenameMultipleLocal();
    public virtual IRefactoringPage GetPageAfterInitial(IRenameWorkflow renameWorkflow);
    public static RelatedElementsProvider GetRelatedElementsProvider(IDeclaredElement element, RenameWorkflowBase workflow, IReference reference, CustomRenameModel customRenameModel);
    public virtual bool IsCheckResolvedTo(IReference newReference, IDeclaredElement newDeclaredElement);
    public virtual bool IsValidName(IDeclaredElement primaryDeclaredElement, DeclaredElementType declaredElementType, string newName);
    public virtual bool IsValidName(IDeclaration declaration, DeclaredElementType declaredElementType, string newName);
    public virtual SuspiciousReferencesSearchProcessor CreateSuspiciousReferenceSearchProcessor(ITreeNode root, SuspiciousReferenceSearchContext context);
    public virtual bool CanBeRenamedInplace(IDeclaredElement element);
    public virtual CustomRenameModel GetOptionsModel(IDeclaredElement primaryDeclaredElement, IReference reference, Lifetime lifetime);
}
[ShellFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Refactorings.JavaScript.Rename.JavaScriptRenamesFactory : AtomicRenamesFactory {
    public virtual bool IsApplicable(IDeclaredElement declaredElement);
    public virtual RenameAvailabilityCheckResult CheckRenameAvailability(IDeclaredElement element);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Refactorings.JavaScript.Rename.JavaScriptRenamesFactory/<CreateAtomicRenames>d__2")]
public virtual IEnumerable`1<AtomicRenameBase> CreateAtomicRenames(IDeclaredElement declaredElement, string newName, bool doNotAddBindingConflicts);
}
public class JetBrains.ReSharper.Refactorings.JavaScript.Rename.JsCustomRenameModel : CustomRenameModel {
    private IDeclaredElement myPrimaryDeclaredElement;
    private IContextBoundSettingsStore myContextBoundSettingsStore;
    [CompilerGeneratedAttribute]
private bool <CanSearchForDynamics>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FindDynamics>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FindStructurallyCompatible>k__BackingField;
    public bool CanSearchForDynamics { get; protected set; }
    public bool CanSearchForStructurallyCompatible { get; }
    public bool FindDynamics { get; public set; }
    public bool FindStructurallyCompatible { get; public set; }
    public JsCustomRenameModel(IDeclaredElement primaryDeclaredElement);
    [CompilerGeneratedAttribute]
public bool get_CanSearchForDynamics();
    [CompilerGeneratedAttribute]
protected void set_CanSearchForDynamics(bool value);
    public virtual bool get_CanSearchForStructurallyCompatible();
    [CompilerGeneratedAttribute]
public bool get_FindDynamics();
    [CompilerGeneratedAttribute]
public void set_FindDynamics(bool value);
    [CompilerGeneratedAttribute]
public bool get_FindStructurallyCompatible();
    [CompilerGeneratedAttribute]
public void set_FindStructurallyCompatible(bool value);
    public virtual BeControl GetSpecific(Lifetime lifetime, Action update);
    public virtual ISearchDomain GetCustomDomain();
    public virtual void Commit();
    public ISearchDomain GetCustomSearchDomain(IDeclaredElement primaryDeclaredElement);
    [CompilerGeneratedAttribute]
private void <GetSpecific>b__17_0(Nullable`1<bool> b);
    [CompilerGeneratedAttribute]
private void <GetSpecific>b__17_1(Nullable`1<bool> b);
}
public class JetBrains.ReSharper.Refactorings.JavaScript.Rename.RelatedElementSection : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DefaultCheckedValue>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ITreeGridNode> <Children>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Included>k__BackingField;
    [NotNullAttribute]
public string Name { get; }
    public bool DefaultCheckedValue { get; public set; }
    public List`1<ITreeGridNode> Children { get; public set; }
    public bool Included { get; public set; }
    public RelatedElementSection(string name, bool defaultCheckedValue, Lifetime lifetime);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public bool get_DefaultCheckedValue();
    [CompilerGeneratedAttribute]
public void set_DefaultCheckedValue(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<ITreeGridNode> get_Children();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Children(List`1<ITreeGridNode> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Included();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Included(bool value);
}
public class JetBrains.ReSharper.Refactorings.JavaScript.Rename.RelatedElementsPage : SingleBeRefactoringPage {
    public static string RenameRelatedId;
    private RelatedElementsProvider myProvider;
    private RenameWorkflowBase myWorkflow;
    private BeControl myContent;
    public string Title { get; }
    public RelatedElementsPage(RelatedElementsProvider provider, RenameWorkflowBase workflow);
    public virtual string get_Title();
    public virtual BeControl GetPageContent();
    public virtual bool RefreshContents(IProgressIndicator pi);
    public virtual void Commit();
}
public abstract class JetBrains.ReSharper.Refactorings.JavaScript.Rename.RelatedElementsProvider : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<RelatedElementSection> <RelatedElements>k__BackingField;
    public IEnumerable`1<RelatedElementSection> RelatedElements { get; protected set; }
    public string Title { get; }
    public string Description { get; }
    [CompilerGeneratedAttribute]
public IEnumerable`1<RelatedElementSection> get_RelatedElements();
    [CompilerGeneratedAttribute]
protected void set_RelatedElements(IEnumerable`1<RelatedElementSection> value);
    public abstract virtual string get_Title();
    public abstract virtual string get_Description();
}
internal class JetBrains.ReSharper.Refactorings.JavaScript.Rename.SameNamedElementsProvider : RelatedElementsProvider {
    public string Title { get; }
    public string Description { get; }
    public SameNamedElementsProvider(IJavaScriptDynamicProperty dynamicProperty, IReferenceExpressionReference reference, JsResolveContext context, Lifetime lifetime);
    public virtual string get_Title();
    public virtual string get_Description();
}
internal class JetBrains.ReSharper.Refactorings.JavaScript.Rename.TsCustomRenameModel : JsCustomRenameModel {
    public bool CanSearchForStructurallyCompatible { get; }
    public TsCustomRenameModel(IDeclaredElement primaryDeclaredElement);
    public virtual bool get_CanSearchForStructurallyCompatible();
}
public class JetBrains.ReSharper.Refactorings.JavaScript.Rename.TsRenameDataProvider : RenameDataProvider {
    [CompilerGeneratedAttribute]
private bool <SearchDynamics>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SearchStructurallyCompatible>k__BackingField;
    [CompilerGeneratedAttribute]
private ForceElementCheckPolicy <DynamicReferencesPolicy>k__BackingField;
    [CompilerGeneratedAttribute]
private ForceElementCheckPolicy <RelatedPolicy>k__BackingField;
    [CompilerGeneratedAttribute]
private ForceElementCheckPolicy <DynamicDeclarationsPolicy>k__BackingField;
    public bool SearchDynamics { get; public set; }
    public bool SearchStructurallyCompatible { get; public set; }
    public ForceElementCheckPolicy DynamicReferencesPolicy { get; public set; }
    public ForceElementCheckPolicy RelatedPolicy { get; public set; }
    public ForceElementCheckPolicy DynamicDeclarationsPolicy { get; public set; }
    public TsRenameDataProvider(string name, bool searchDynamics, bool searchStructurallyCompatible, ForceElementCheckPolicy dynamicReferencesPolicy, ForceElementCheckPolicy dynamicDeclaraiontPolicy, ForceElementCheckPolicy relatedPolicy);
    [CompilerGeneratedAttribute]
public bool get_SearchDynamics();
    [CompilerGeneratedAttribute]
public void set_SearchDynamics(bool value);
    [CompilerGeneratedAttribute]
public bool get_SearchStructurallyCompatible();
    [CompilerGeneratedAttribute]
public void set_SearchStructurallyCompatible(bool value);
    [CompilerGeneratedAttribute]
public ForceElementCheckPolicy get_DynamicReferencesPolicy();
    [CompilerGeneratedAttribute]
public void set_DynamicReferencesPolicy(ForceElementCheckPolicy value);
    [CompilerGeneratedAttribute]
public ForceElementCheckPolicy get_RelatedPolicy();
    [CompilerGeneratedAttribute]
public void set_RelatedPolicy(ForceElementCheckPolicy value);
    [CompilerGeneratedAttribute]
public ForceElementCheckPolicy get_DynamicDeclarationsPolicy();
    [CompilerGeneratedAttribute]
public void set_DynamicDeclarationsPolicy(ForceElementCheckPolicy value);
}
[DerivedRenamesEvaluatorAttribute("16")]
public class JetBrains.ReSharper.Refactorings.JavaScript.Rename.TypeScript.TsCombinedTypeDerivedRename : object {
    public bool SuggestedElementsHaveDerivedName { get; }
    public sealed virtual bool get_SuggestedElementsHaveDerivedName();
    public sealed virtual IEnumerable`1<IDeclaredElement> CreateFromElement(IEnumerable`1<IDeclaredElement> initialElements, DerivedElement derivedElement, IProgressIndicator pi);
    public sealed virtual IEnumerable`1<IDeclaredElement> CreateFromReference(IReference reference, IDeclaredElement declaredElement, IProgressIndicator pi);
}
[DerivedRenamesEvaluatorAttribute("16")]
public class JetBrains.ReSharper.Refactorings.JavaScript.Rename.TypeScript.TsDestructuredDerivedRename : object {
    public bool SuggestedElementsHaveDerivedName { get; }
    public sealed virtual bool get_SuggestedElementsHaveDerivedName();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Refactorings.JavaScript.Rename.TypeScript.TsDestructuredDerivedRename/<CreateFromElement>d__2")]
public sealed virtual IEnumerable`1<IDeclaredElement> CreateFromElement(IEnumerable`1<IDeclaredElement> initialElements, DerivedElement derivedElement, IProgressIndicator pi);
    public sealed virtual IEnumerable`1<IDeclaredElement> CreateFromReference(IReference reference, IDeclaredElement declaredElement, IProgressIndicator pi);
}
[RenamePartAttribute("16")]
public class JetBrains.ReSharper.Refactorings.JavaScript.Rename.TypeScript.TsDestructuredPrimaryElementProvider : object {
    public sealed virtual IDeclaredElement GetPrimaryDeclaredElement(IDeclaredElement element, IReference reference);
    public static IDeclaredElement GetOriginalDeclaredElement(IDeclaredElement element, IDeclaredElement& mainElement);
}
[DerivedRenamesEvaluatorAttribute("16")]
public class JetBrains.ReSharper.Refactorings.JavaScript.Rename.TypeScript.TsMappedTypeDerivedRename : object {
    public bool SuggestedElementsHaveDerivedName { get; }
    public sealed virtual bool get_SuggestedElementsHaveDerivedName();
    public sealed virtual IEnumerable`1<IDeclaredElement> CreateFromElement(IEnumerable`1<IDeclaredElement> initialElements, DerivedElement derivedElement, IProgressIndicator pi);
    public sealed virtual IEnumerable`1<IDeclaredElement> CreateFromReference(IReference reference, IDeclaredElement declaredElement, IProgressIndicator pi);
}
[RenamePartAttribute("16")]
public class JetBrains.ReSharper.Refactorings.JavaScript.Rename.TypeScript.TsPrimaryDeclaredElementProvider : object {
    public sealed virtual IDeclaredElement GetPrimaryDeclaredElement(IDeclaredElement declaredElement, IReference reference);
}
[FileRenameProviderAttribute("16")]
public class JetBrains.ReSharper.Refactorings.JavaScript.Rename.TypeScript.TsRelatedFileRenameProvider : object {
    public sealed virtual IEnumerable`1<FileRename> GetFileRenames(IDeclaredElement declaredElement, string name);
    private static IEnumerable`1<IProjectFile> GetDependentProjectFiles(IDeclaredElement typeElement);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.JavaScript.LanguageImpl.TypeScript.TypeScriptLanguage", "16")]
public class JetBrains.ReSharper.Refactorings.JavaScript.Rename.TypeScript.TypeScriptRenameHelper : JavaScriptRenameHelper {
    public TypeScriptRenameHelper(SearchDomainFactory factory);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Refactorings.JavaScript.Rename.TypeScript.TypeScriptRenameHelper/<GetAtomicRenamesForHierarchy>d__1")]
public virtual IEnumerable`1<AtomicRenameBase> GetAtomicRenamesForHierarchy(IDeclaredElement declaredElement, IRenameWorkflow workflow, string newName, IProgressIndicator pi);
    public virtual bool IsLocalRename(IDeclaredElement primevalDeclaredElement);
    public virtual CustomRenameModel GetOptionsModel(IDeclaredElement primaryDeclaredElement, IReference reference, Lifetime lifetime);
    public virtual bool IsCheckResolvedTo(IReference newReference, IDeclaredElement newDeclaredElement);
    public virtual bool IsValidName(IDeclaredElement primaryDeclaredElement, DeclaredElementType declaredElementType, string newName);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Refactorings.JavaScript.Rename.TypeScript.TypeScriptRenameHelper/<GetDynamicDeclaredElements>d__6")]
public virtual IEnumerable`1<IDeclaredElement> GetDynamicDeclaredElements(IFindResultReference reference);
    public virtual IList`1<RenameWorkflowPopupOccurrence> GetPopupOccurences(IDeclaredElement declaredElement);
    public virtual bool AlwaysIncludeExtraElements();
    public virtual bool DoNotProcess(IPsiSourceFile sourceFile, IRenameWorkflow workflow, IDeclaredElement initialDeclaredElement);
    private static bool IsStrongTsUsageFile(IProjectFile f);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<AtomicRenameBase> <>n__0(IDeclaredElement declaredElement, IRenameWorkflow workflow, string newName, IProgressIndicator pi);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<IDeclaredElement> <>n__1(IFindResultReference reference);
}
[ShellFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Refactorings.JavaScript.Rename.TypeScript.TypeScriptRenamesFactory : JavaScriptRenamesFactory {
    public virtual bool IsApplicable(IDeclaredElement declaredElement);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Refactorings.JavaScript.Rename.TypeScript.TypeScriptRenamesFactory/<CreateAtomicRenames>d__1")]
public virtual IEnumerable`1<AtomicRenameBase> CreateAtomicRenames(IDeclaredElement declaredElement, string newName, bool doNotAddBindingConflicts);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<AtomicRenameBase> <>n__0(IDeclaredElement declaredElement, string newName, bool doNotAddBindingConflicts);
}
public class JetBrains.ReSharper.Refactorings.JavaScript.RenameFile.TypeScript.TypeScriptRenameFileHelper : RenameFileHelper {
    public bool IsLanguageSupported { get; }
    public bool SuggestTypeRename { get; }
    public TypeScriptRenameFileHelper(RenameFileWorkflow workflow);
    public virtual bool get_IsLanguageSupported();
    private static int CountTopLevelTypeDeclarations(ITypeScriptModuleScope declaration);
    private static ITypeScriptGlobalDeclaration GetSingleTopLevelTypeDeclaration(ITypeScriptModuleScope declaration);
    public virtual bool get_SuggestTypeRename();
    public virtual IDeclaredElement GetSingleTypeElement(IFile psiFile);
    public virtual void PreRename(IProjectFile projectFile, IFile psiFile, string newName, IProgressIndicator subPi);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.JavaScript.LanguageImpl.JavaScriptLikeBaseLanguage", "16")]
public class JetBrains.ReSharper.Refactorings.JavaScript.Utils.JavaScriptRefactoringDataConstantsService : object {
    public sealed virtual bool IsNameNodeSelected(ITreeNode node, DocumentRange documentRange);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Refactorings.JavaScript.ZoneMarker : object {
}
[RefactoringWorkflowProviderAttribute("16")]
public class JetBrains.ReSharper.Refactorings.Razor.CSharp.ExtractMethod.RazorCSharpExtractHelperProvider : object {
    private IProjectFileTypeServices myProjectFileTypeServices;
    public RazorCSharpExtractHelperProvider(IProjectFileTypeServices projectFileTypeServices);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Refactorings.Razor.CSharp.ExtractMethod.RazorCSharpExtractHelperProvider/<CreateWorkflow>d__2")]
public sealed virtual IEnumerable`1<IRefactoringWorkflow> CreateWorkflow(IDataContext dataContext);
}
public class JetBrains.ReSharper.Refactorings.Razor.CSharp.ExtractMethod.RazorCSharpExtractHelperRefactoring : object {
    private RazorCSharpExtractHelperWorkflow myWorkflow;
    private ISolution mySolution;
    private IRefactoringDriver myDriver;
    private CSharpExtractMethodRunnerFromStatements myRunner;
    public RazorCSharpExtractHelperRefactoring(RazorCSharpExtractHelperWorkflow workflow, ISolution solution, IRefactoringDriver driver);
    public sealed virtual bool Execute(IProgressIndicator pi);
}
public class JetBrains.ReSharper.Refactorings.Razor.CSharp.ExtractMethod.RazorCSharpExtractHelperWorkflow : DrivenRefactoringWorkflow {
    [NotNullAttribute]
private IProjectFileTypeServices myProjectFileTypeServices;
    private RazorExtractMethodModel myModel;
    [CompilerGeneratedAttribute]
private ICSharpStatementsRange <StatementsRange>k__BackingField;
    public HelpId HelpKeyword { get; }
    public IRefactoringPage FirstPendingRefactoringPage { get; }
    public bool MightModifyManyDocuments { get; }
    public CSharpExtractMethodModel Model { get; }
    public ICSharpStatementsRange StatementsRange { get; public set; }
    public string Title { get; }
    public RefactoringActionGroup ActionGroup { get; }
    public RazorCSharpExtractHelperWorkflow(IProjectFileTypeServices projectFileTypeServices, ISolution solution, string actionId);
    public virtual bool PreExecute(IProgressIndicator pi);
    public sealed virtual ITreeNode CreatePreviewElement();
    public sealed virtual LocalFunctionSignatureInfo CreateSignaturePreviewElement(ICSharpExtractMethodControlFlowInspectionResult analysisResult);
    public bool IsValid();
    public virtual HelpId get_HelpKeyword();
    public virtual IRefactoringPage get_FirstPendingRefactoringPage();
    public virtual bool get_MightModifyManyDocuments();
    public sealed virtual CSharpExtractMethodModel get_Model();
    public sealed virtual IBlock PrepareBody(IBlock body, CSharpElementFactory factory);
    [CanBeNullAttribute]
private ICSharpExtractMethodControlFlowInspectionResult AnalizeDataFlow();
    public virtual bool Initialize(IDataContext context);
    [CompilerGeneratedAttribute]
public ICSharpStatementsRange get_StatementsRange();
    [CompilerGeneratedAttribute]
public void set_StatementsRange(ICSharpStatementsRange value);
    public virtual bool IsAvailable(IDataContext context);
    private bool IsAvailableEx(IDataContext context, IRazorFile& razorFile, TreeTextRange& razorRange);
    public virtual string get_Title();
    public virtual RefactoringActionGroup get_ActionGroup();
    public virtual IRefactoringExecuter CreateRefactoring(IRefactoringDriver driver);
    public string Dump();
}
public class JetBrains.ReSharper.Refactorings.Razor.CSharp.ExtractMethod.RazorExtractHelperReturnValue : CSharpExtractMethodParameter {
    private RazorCSharpExtractHelperWorkflow myWorkflow;
    public RazorExtractHelperReturnValue(RazorCSharpExtractHelperWorkflow workflow);
    public virtual string ToString();
    protected virtual IType GetParameterSourceType(IPsiModule module, ParameterKind kind, ITreeNode context);
    public virtual string Dump();
    public virtual void SuggestName(INamesCollection collection);
    public virtual ExtractMethodReturnValue CreateReturnValue(CSharpElementFactory factory, ICSharpStatement originalStatement, ICSharpExtractMethodControlFlowInspectionResult inspector, bool isExitClassA);
    public virtual IReadOnlyList`1<ICSharpStatement> AddCall(CSharpElementFactory factory, ICSharpExpression call, ICSharpExtractMethodControlFlowInspectionResult inspectionResult, ITreeNode context);
}
public class JetBrains.ReSharper.Refactorings.Razor.CSharp.ExtractMethod.RazorExtractMethodModel : CSharpExtractMethodModel {
    [CompilerGeneratedAttribute]
private string <HtmlWriterParameterName>k__BackingField;
    [CompilerGeneratedAttribute]
private TreeTextRange <RazorRange>k__BackingField;
    [CompilerGeneratedAttribute]
private IRazorFile <RazorFile>k__BackingField;
    [CompilerGeneratedAttribute]
private IRazorRegenerator <RazorRegenerator>k__BackingField;
    [CompilerGeneratedAttribute]
private IRazorPsiServices <RazorPsiServices>k__BackingField;
    [CompilerGeneratedAttribute]
private RazorCodeGenerator <RazorCodeGenerator>k__BackingField;
    [CompilerGeneratedAttribute]
private ITreeNodePointer`1<IClassLikeDeclaration> <ClassDeclarationPointer>k__BackingField;
    public NamingPolicy NamingPolicy { get; }
    public string HtmlWriterParameterName { get; }
    public TreeTextRange RazorRange { get; }
    public IRazorFile RazorFile { get; }
    public IRazorRegenerator RazorRegenerator { get; }
    public IRazorPsiServices RazorPsiServices { get; }
    public RazorCodeGenerator RazorCodeGenerator { get; }
    public ITreeNodePointer`1<IClassLikeDeclaration> ClassDeclarationPointer { get; public set; }
    public RazorExtractMethodModel(IProjectFileTypeServices projectFileTypeServices, ICSharpExtractMethodControlFlowInspectionResult analysisResult, ITreeRange selectedRange, TreeTextRange razorRange, IRazorFile razorFile, IClassLikeDeclaration classLikeDeclaration, IPsiSourceFile psiSourceFile, Lifetime lifetime, IExtractMethodWorkflow result);
    public virtual void InitializeNaming();
    public virtual NamingPolicy get_NamingPolicy();
    [CompilerGeneratedAttribute]
public string get_HtmlWriterParameterName();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Refactorings.Razor.CSharp.ExtractMethod.RazorExtractMethodModel/<GetPossibleReturnParameters>d__6")]
public virtual IEnumerable`1<IReturnParameter> GetPossibleReturnParameters();
    public virtual BeGrid GetSpecificPresentation(Lifetime lifetime, Action update);
    public IEnumerable`1<CSharpExtractMethodParameter> GetPossibleParameters(ICSharpExtractMethodControlFlowInspectionResult inspectionResult);
    [CompilerGeneratedAttribute]
public TreeTextRange get_RazorRange();
    [CompilerGeneratedAttribute]
public IRazorFile get_RazorFile();
    [CompilerGeneratedAttribute]
public IRazorRegenerator get_RazorRegenerator();
    [CompilerGeneratedAttribute]
public IRazorPsiServices get_RazorPsiServices();
    [CompilerGeneratedAttribute]
public RazorCodeGenerator get_RazorCodeGenerator();
    [CompilerGeneratedAttribute]
public ITreeNodePointer`1<IClassLikeDeclaration> get_ClassDeclarationPointer();
    [CompilerGeneratedAttribute]
public void set_ClassDeclarationPointer(ITreeNodePointer`1<IClassLikeDeclaration> value);
}
public class JetBrains.ReSharper.Refactorings.Razor.CSharp.ExtractMethod.RazorTargetSiteContext : CSharpExtractMethodTargetSiteContext {
    public RazorTargetSiteContext(IClassLikeDeclaration targetContainer);
    public virtual IDeclaration AddDeclaration(IDeclaration declaration);
}
[ProjectFileTypeAttribute("JetBrains.ProjectModel.RazorCSharpProjectFileType", "16")]
public class JetBrains.ReSharper.Refactorings.Razor.CSharp.InplaceRefactorings.RazorCSharpInplaceChangeSignatureHelper : CSharpInplaceChangeSignatureHelper {
    private IRazorPsiServices myRazorPsiServices;
    public RazorCSharpInplaceChangeSignatureHelper(IRazorPsiServices razorPsiServices);
    public virtual TreeTextRange GetSignatureRange(IDeclaration declaration);
}
internal class JetBrains.ReSharper.Refactorings.Razor.CSharp.Move.RazorCSharpAdjustNamespacesHelper : AdjustNamespacesHelperBase {
    private CSharpAdjustNamespaceHelper myCSharpAdjustNamespaceHelper;
    public bool IsLanguageSupported { get; }
    public virtual bool get_IsLanguageSupported();
    public virtual void FixFile(IFile file, string name, ResolveImagesRepository repository, List`1<IDeclaredElement> elements);
    public virtual bool IsFromExtendsList(ITreeNode element);
    public virtual bool IsReferenceName(ITreeNode element);
    public virtual void SaveUnusedUsings(IFile file, UnusedUsingSaver saver);
    public virtual void RemoveUnusedUsing(IFile file, HashSet`1<ITreeNode> usings);
    public virtual IEnumerable`1<ITreeNode> GetUsingsFromFile(IFile file, IList`1<INamespace> namespaces);
    public virtual void RemoveUsing(ITreeNode element);
    public virtual IDeclaredElement GetImportedSymbolOfUsing(ITreeNode element);
    public virtual bool FileHasProblems(IFile file, string ns);
}
public class JetBrains.ReSharper.Refactorings.Razor.CSharp.MoveToCodeBehind.RazorMoveToCodeBehindHelper : CSharpType2PartialHelper {
    public bool IsLanguageSupported { get; }
    public virtual bool get_IsLanguageSupported();
    private static bool CodeBlockFilter(IRazorFunctionsBlock block);
    public virtual TreeTextRange GetCustomRange(IWebFileWithCodeBehind psiFile);
    public virtual TreeTextRange GetRangeFromSelection(IWebFileWithCodeBehind psiFile, TreeTextRange selectedTreeRange);
    public virtual VirtualFileSystemPath ComposeCodeBehindFilePath(IProjectFile primaryProjectFile, string codeBehindFileExtension);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Razor.CSharp.RazorCSharpLanguage", "16")]
public class JetBrains.ReSharper.Refactorings.Razor.CSharp.RazorCSharpRefactoringLanguageService : RazorRefactoringLanguageService {
    public virtual AdjustNamespacesHelperBase CreateAdjustNamespaceHelper();
    public virtual IMoveToCodeBehindHelper CreateMoveToCodeBehindHelper(MoveToCodeBehindWorkflow moveToCodeBehindWorkflow);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.Refactorings.Razor.CSharp.Rename.RazorCodeBehindRenameHelper : CSharpRenameHelper {
    public virtual IEnumerable`1<IDeclaredElement> GetSecondaryElementsToInlineRename(IDeclaredElement declaredElement);
    public virtual IEnumerable`1<IDeclaredElement> GetSecondaryElements(IDeclaredElement declaredElement, string newName);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Refactorings.Razor.CSharp.ZoneMarker : object {
}
public class JetBrains.ReSharper.Refactorings.Razor.Move.RazorMoveToFolderHelper : MoveToFolderHelperBase {
    public bool IsLanguageSupported { get; }
    public bool CanMoveSingleTypeDeclaration { get; }
    public virtual bool get_IsLanguageSupported();
    public virtual bool get_CanMoveSingleTypeDeclaration();
    public virtual bool MoveWholeFile(MoveToFolderHierarchyProjectItem item, IFile sourceFile, IFile targetFile, bool fixNamespaces, string name, ResolveImagesRepository repository, bool searchInRelatedFiles);
    public virtual string GetCanMoveToProjectFolderError(IProjectFolder projectFolder);
}
public interface JetBrains.ReSharper.Refactorings.Razor.MoveHelper.IMoveHelperDataProvider {
    public string FileName { get; }
    public abstract virtual string get_FileName();
}
public interface JetBrains.ReSharper.Refactorings.Razor.MoveHelper.IMoveHelperWorkflowProvider {
}
public class JetBrains.ReSharper.Refactorings.Razor.MoveHelper.MoveHelperDataModel : MoveStaticDataModel {
    private ITypeMemberDeclaration myDeclaration;
    private IEnumerable`1<StaticMemberInfo> myList;
    public string NewFileExtension { get; }
    public IEnumerable`1<StaticMemberInfo> IncludedMembers { get; }
    public MoveHelperDataModel(ITypeElement typeElement, IEnumerable`1<ITypeMember> initialElements, IProjectFile projectFile, IMoveStaticMembersBatchDataProvider provider, ITypeMemberDeclaration declaration, Lifetime lifetime);
    public virtual string get_NewFileExtension();
    public virtual IEnumerable`1<StaticMemberInfo> get_IncludedMembers();
}
public class JetBrains.ReSharper.Refactorings.Razor.MoveHelper.MoveHelperMakeStaticDataProvider : MakeStaticDataProvider {
    [CompilerGeneratedAttribute]
private CodeAnnotationsConfiguration <AnnotationsConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    public CodeAnnotationsConfiguration AnnotationsConfiguration { get; }
    public bool Show { get; }
    public string FileName { get; public set; }
    public MoveHelperMakeStaticDataProvider(CodeAnnotationsConfiguration codeAnnotationsConfiguration);
    [CompilerGeneratedAttribute]
public CodeAnnotationsConfiguration get_AnnotationsConfiguration();
    public virtual bool get_Show();
    [CompilerGeneratedAttribute]
public sealed virtual string get_FileName();
    [CompilerGeneratedAttribute]
public void set_FileName(string value);
}
public class JetBrains.ReSharper.Refactorings.Razor.MoveHelper.MoveHelperMoveStaticDataModel : MoveToFileDataModel {
    private string myAttributeName;
    public static TreeNodeMarker Marker;
    public IProjectModelElementPointer ProjectFolderPointer { get; public set; }
    public MoveHelperMoveStaticDataModel(MakeStaticModel staticModel, MoveStaticDataModel moveModel, Lifetime lifetime, IMoveHelperDataProvider provider);
    private static MoveHelperMoveStaticDataModel();
    public virtual void PreProcessParameters(IList`1<ThisUsageElement> parameters, MoveHelperMakeStaticDataProvider dataProvider);
    public IProjectModelElementPointer get_ProjectFolderPointer();
    public void set_ProjectFolderPointer(IProjectModelElementPointer value);
}
public class JetBrains.ReSharper.Refactorings.Razor.MoveHelper.MoveHelperMoveStaticMembersWorkflow : MoveStaticMembersWorkflow {
    private MakeStaticWorkflow myWorkflow;
    private MoveHelperWorkflow myMoveToFileWorkflow;
    public MoveHelperMoveStaticMembersWorkflow(ISolution solution, MakeStaticWorkflow workflow, MoveHelperWorkflow moveToFileWorkflow);
    public virtual bool Initialize(IDataContext context);
    protected virtual bool CanMove(ITypeMember typeMember);
    public virtual bool PreExecute(IProgressIndicator progressIndicator);
}
[NonHighlightingSourceAttribute]
public class JetBrains.ReSharper.Refactorings.Razor.MoveHelper.MoveHelperRefactoring : object {
    private IRefactoringDriver myRefactoringDriver;
    private ResolveHighlighterRegistrar myResolveHighlighterRegistrar;
    private MakeStaticRefactoring myMakeStaticRefactoring;
    private MoveStaticMembersRefactoring myMoveRefactoring;
    public MoveHelperRefactoring(IRefactoringDriver refactoringDriver, ResolveHighlighterRegistrar resolveHighlighterRegistrar, MakeStaticRefactoring makeStaticRefactoring, MoveStaticMembersRefactoring moveRefactoring);
    public sealed virtual bool Execute(IProgressIndicator pi);
}
public static class JetBrains.ReSharper.Refactorings.Razor.MoveHelper.MoveHelperUtil : object {
    public static bool ExecuteSequence(IProgressIndicator pi, Func`2[] executors);
}
public class JetBrains.ReSharper.Refactorings.Razor.MoveHelper.MoveHelperWorkflow : DrivenRefactoringWorkflow2`1<IWorkflowExec> {
    private IMoveHelperDataProvider myProvider;
    private Lifetime myLifetime;
    private IProjectFileTypeServices myProjectFileTypeServices;
    private MakeStaticWorkflow myStaticWorkflow;
    private MoveHelperMoveStaticMembersWorkflow myMoveWorkflow;
    [CompilerGeneratedAttribute]
private MoveHelperMoveStaticDataModel <DataModel>k__BackingField;
    public MoveHelperMoveStaticDataModel DataModel { get; private set; }
    public HelpId HelpKeyword { get; }
    public IRefactoringPage FirstPendingRefactoringPage { get; }
    public bool MightModifyManyDocuments { get; }
    public string Title { get; }
    public RefactoringActionGroup ActionGroup { get; }
    public MoveHelperWorkflow(Lifetime lifetime, IProjectFileTypeServices projectFileTypeServices, ISolution solution, string actionId, CodeAnnotationsConfiguration codeAnnotationsConfiguration);
    [CompilerGeneratedAttribute]
public MoveHelperMoveStaticDataModel get_DataModel();
    [CompilerGeneratedAttribute]
private void set_DataModel(MoveHelperMoveStaticDataModel value);
    public virtual HelpId get_HelpKeyword();
    public virtual IRefactoringPage get_FirstPendingRefactoringPage();
    public void SetDataProvider(IMoveHelperDataProvider provider);
    public virtual bool get_MightModifyManyDocuments();
    public virtual bool IsAvailable(IDataContext context);
    public virtual bool Initialize(IDataContext context);
    public virtual string get_Title();
    public virtual RefactoringActionGroup get_ActionGroup();
    public virtual bool PreExecute(IProgressIndicator pi);
    public virtual bool PostExecute(IProgressIndicator pi);
    public virtual IRefactoringExecuter CreateRefactoring(IRefactoringDriver driver);
    protected virtual IWorkflowExec CreateUnsupportedHelper();
    protected virtual IWorkflowExec CreateHelper(IRefactoringLanguageService service);
    public bool IsValid();
    [CompilerGeneratedAttribute]
private bool <PreExecute>b__23_1(IProgressIndicator progressIndicator);
    [CompilerGeneratedAttribute]
private bool <PreExecute>b__23_2(IProgressIndicator progressIndicator);
}
[RefactoringWorkflowProviderAttribute("16")]
internal class JetBrains.ReSharper.Refactorings.Razor.MoveHelper.MoveHelperWorkflowProvider : MoveWorkflowProvider {
    private Lifetime myLifetime;
    private IProjectFileTypeServices myProjectFileTypeServices;
    public MoveHelperWorkflowProvider(Lifetime lifetime, IShellLocks locks, IWindowsHookManager windowsHookManager, IProjectFileTypeServices projectFileTypeServices);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Refactorings.Razor.MoveHelper.MoveHelperWorkflowProvider/<CreateWorkflow>d__3")]
public virtual IEnumerable`1<IRefactoringWorkflow> CreateWorkflow(IDataContext dataContext);
}
public class JetBrains.ReSharper.Refactorings.Razor.MoveStaticMembers.RazorMoveStaticMembers : MoveStaticMembers {
    public RazorMoveStaticMembers(MoveStaticMembersWorkflow workflow, ISolution solution, IRefactoringDriver driver);
    public virtual void RemoveOldDeclaration(IDeclaration declaration);
    public virtual Dictionary`2<ITypeParameter, ITypeParameter> PasteDeclaration(StaticMemberInfo copy, ITypeMember& newTypeMember);
    public virtual ITypeDeclaration CreateTypeDeclaration(IFile file);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Razor.RazorLanguage", "16")]
public class JetBrains.ReSharper.Refactorings.Razor.Prelude.RazorRefactoringLanguageService : HtmlRefactoringLanguageService {
    public RefactoringsHelper Helper { get; }
    public virtual RefactoringsHelper get_Helper();
    public virtual MoveToFolderHelperBase CreateMoveToFolderHelper();
    public virtual MoveStaticMembers CreateMoveStaticMembers(MoveStaticMembersWorkflow workflow, ISolution solution, IRefactoringDriver driver);
    public virtual IMoveToCodeBehindHelper CreateMoveToCodeBehindHelper(MoveToCodeBehindWorkflow moveToCodeBehindWorkflow);
}
public class JetBrains.ReSharper.Refactorings.Razor.Prelude.RazorRefactoringsHelper : HtmlRefactoringsHelper {
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Razor.RazorLanguage", "16")]
public class JetBrains.ReSharper.Refactorings.Razor.Rename.RazorRenameHelper : HtmlRenameHelper {
    public virtual bool IsCheckResolvedTo(IReference newReference, IDeclaredElement newDeclaredElement);
    public virtual bool IsLocalRename(IDeclaredElement primevalDeclaredElement);
}
[SolutionComponentAttribute("16")]
internal class JetBrains.ReSharper.Refactorings.Razor.Rename.RazorRenameSuspiciousReferencesSearchService : SuspiciousReferencesSearchService {
    public virtual IEnumerable`1<Type> GetCustomReferenceTypesToIgnore();
}
public class JetBrains.ReSharper.Refactorings.Razor.Rename.RazorSectionAtomicRename : WebAtomicRenameBase {
    public RazorSectionAtomicRename(IRazorSectionDeclaredElement razorSectionDeclaredElement, string newName);
    public virtual void Rename(IRenameRefactoring executer, IProgressIndicator pi, bool hasConflictsWithDeclarations, IRefactoringDriver driver);
}
[ShellFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Refactorings.Razor.Rename.RazorSectionRenamesFactory : AtomicRenamesFactory {
    public virtual bool IsApplicable(IDeclaredElement declaredElement);
    public virtual RenameAvailabilityCheckResult CheckRenameAvailability(IDeclaredElement declaredElement);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Refactorings.Razor.Rename.RazorSectionRenamesFactory/<CreateAtomicRenames>d__2")]
public virtual IEnumerable`1<AtomicRenameBase> CreateAtomicRenames(IDeclaredElement declaredElement, string newName, bool doNotAddBindingConflicts);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Refactorings.Razor.ZoneMarker : object {
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public static class JetBrains.ReSharper.Refactorings.Resources.Strings13 : object {
    private static ILogger ourLog;
    private static Lazy`1<JetResourceManager> ourResourceManager;
    [EditorBrowsableAttribute("2")]
public static JetResourceManager ResourceManager { get; }
    public static string ExtractCSSStyleActionText { get; }
    public static string InlineTypeAliasActionText { get; }
    public static string IntroduceTypeAliasActionText { get; }
    public static string RouteParameter0_IsAlreadyDeclaredIn_Text { get; }
    public static string CannotRenameRouteParameter0_OnExternal_Text { get; }
    public static string CannotUpdate0RouteTemplate_Text { get; }
    public static string ExtractContentPlaceholder_Text { get; }
    public static string File_HaveContentReferencedTo_Placeholder_Text { get; }
    public static string InLineContentToMasterpage_Text { get; }
    public static string AdditionalReferencesInDependentCode_Text { get; }
    public static string RefactoringHasFoundAdditionalReferences_Text { get; }
    public static string ExtractCSSStyle_Text { get; }
    public static string ExtractStyle_Text { get; }
    public static string PleaseSpecify_Text { get; }
    public static string SelectorForNewStyle_Text { get; }
    public static string SelectorIsNotValid_Text { get; }
    public static string _Selector_Text { get; }
    public static string SelectionShouldNotBeEmpty_Text { get; }
    public static string _Properties_Text { get; }
    public static string ExtractingStyle_Text { get; }
    public static string Move_Text { get; }
    public static string TargetFile_Text { get; }
    public static string Insert_importDirective_Text { get; }
    public static string _TargetFile_Text { get; }
    public static string CannotInsertDeclarationIntoTargetFile_Text { get; }
    public static string MoveStyle_Text { get; }
    public static string CannotFindDeclarationInTargetFile_Text { get; }
    public static string CannotBindPathReferences_Text { get; }
    public static string PossibleConflictWith__Text { get; }
    public static string UnableToAddReadAccessorTo__Text { get; }
    public static string UnableToAddWriteAccessorTo__Text { get; }
    public static string ExtractFunction_Text { get; }
    public static string InlineTypeAlias_Text { get; }
    public static string In_LineTypeAlias_Text { get; }
    public static string VariableHasNoDeclarations_Text { get; }
    public static string CannotInlineFunctionWithManyDeclarations_Text { get; }
    public static string CannotInlineRecursiveFunction_Text { get; }
    public static string VariableHasNoInitializers_Text { get; }
    public static string VariableHasManyInitializers_Text { get; }
    public static string VariableHasWriteUsages_Text { get; }
    public static string RouteParameter0_IsAlreadyDeclared_Text { get; }
    public static string CannotRenameRouteParameter0_SinceIt_Text { get; }
    public static string Make_static_Text { get; }
    public static string _Visibility_Text { get; }
    public static string UnableToIntroduceVariableFromTheSelected_Text { get; }
    public static string IntroduceTypeAlias_Text { get; }
    public static string SearchIn_relatedFiles_Text { get; }
    public static string RenameOnly__Text { get; }
    public static string RenameSelectedElementOnly_Text { get; }
    public static string RenameInAllTypes_Text { get; }
    public static string RenameMemberInAllTypes_Text { get; }
    public static string SearchingDynamicReferences_Text { get; }
    public static string AdditionalDynamicReferences_Text { get; }
    public static string RefactoringHasFoundAdditionalDynamic_Text { get; }
    public static string PossibleDynamicReferences_Text { get; }
    public static string RefactoringHasFoundPossibleDynamicReferences_Text { get; }
    public static string DynamicReferences_FindUsagesSection_Text { get; }
    public static string PossibleDynamicReferences_FindUsagesSection_Text { get; }
    public static string StructurallyCompatibleMembers_Text { get; }
    public static string YouHaveChosenATypeMemberForRenameThe_Text { get; }
    public static string RelatedStronglyTypedMembers_Text { get; }
    public static string YouAreAboutToRenameATypeMemberTheFollowing_Text { get; }
    public static string TheExtractedCodeHasMultipleExits_Text { get; }
    public static string ExtractHelper_Text { get; }
    public static string MoveHelperToApp_Code_Text { get; }
    public static string ProfileGroupClassNameMustStartWith__Text { get; }
    public static string IfTheClass_IsRenamedTo_TheProperty__Text { get; }
    public static string IntroduceVariableForSubstring_Text { get; }
    public static string IntroduceType_Alias_Text { get; }
    public static string FindPossible_dynamicUsages_Text { get; }
    public static string FindS_tructurallyCompatibleMembers_Text { get; }
    public static string MoveToFolderIsNotSupportedForRAZORFiles_Text { get; }
    public static string IfTheProperty_IsRenamedTo_TheClass__Text { get; }
    public static string InlineMasterPageContent_Action_text { get; }
    public static string ExtractContentPlaceholder_Action_Text { get; }
    public static string Mo_dule_Text { get; }
    public static string MoveBlockToCodeBehind_Text { get; }
    private static Strings13();
    public static JetResourceManager get_ResourceManager();
    public static string Choice(string format, Object[] args);
    public static string get_ExtractCSSStyleActionText();
    public static string get_InlineTypeAliasActionText();
    public static string get_IntroduceTypeAliasActionText();
    public static string get_RouteParameter0_IsAlreadyDeclaredIn_Text();
    public static string get_CannotRenameRouteParameter0_OnExternal_Text();
    public static string get_CannotUpdate0RouteTemplate_Text();
    public static string get_ExtractContentPlaceholder_Text();
    public static string get_File_HaveContentReferencedTo_Placeholder_Text();
    public static string get_InLineContentToMasterpage_Text();
    public static string get_AdditionalReferencesInDependentCode_Text();
    public static string get_RefactoringHasFoundAdditionalReferences_Text();
    public static string get_ExtractCSSStyle_Text();
    public static string get_ExtractStyle_Text();
    public static string get_PleaseSpecify_Text();
    public static string get_SelectorForNewStyle_Text();
    public static string get_SelectorIsNotValid_Text();
    public static string get__Selector_Text();
    public static string get_SelectionShouldNotBeEmpty_Text();
    public static string get__Properties_Text();
    public static string get_ExtractingStyle_Text();
    public static string get_Move_Text();
    public static string get_TargetFile_Text();
    public static string get_Insert_importDirective_Text();
    public static string get__TargetFile_Text();
    public static string get_CannotInsertDeclarationIntoTargetFile_Text();
    public static string get_MoveStyle_Text();
    public static string get_CannotFindDeclarationInTargetFile_Text();
    public static string get_CannotBindPathReferences_Text();
    public static string get_PossibleConflictWith__Text();
    public static string get_UnableToAddReadAccessorTo__Text();
    public static string get_UnableToAddWriteAccessorTo__Text();
    public static string get_ExtractFunction_Text();
    public static string get_InlineTypeAlias_Text();
    public static string get_In_LineTypeAlias_Text();
    public static string get_VariableHasNoDeclarations_Text();
    public static string get_CannotInlineFunctionWithManyDeclarations_Text();
    public static string get_CannotInlineRecursiveFunction_Text();
    public static string get_VariableHasNoInitializers_Text();
    public static string get_VariableHasManyInitializers_Text();
    public static string get_VariableHasWriteUsages_Text();
    public static string get_RouteParameter0_IsAlreadyDeclared_Text();
    public static string get_CannotRenameRouteParameter0_SinceIt_Text();
    public static string get_Make_static_Text();
    public static string get__Visibility_Text();
    public static string get_UnableToIntroduceVariableFromTheSelected_Text();
    public static string get_IntroduceTypeAlias_Text();
    public static string get_SearchIn_relatedFiles_Text();
    public static string get_RenameOnly__Text();
    public static string get_RenameSelectedElementOnly_Text();
    public static string get_RenameInAllTypes_Text();
    public static string get_RenameMemberInAllTypes_Text();
    public static string get_SearchingDynamicReferences_Text();
    public static string get_AdditionalDynamicReferences_Text();
    public static string get_RefactoringHasFoundAdditionalDynamic_Text();
    public static string get_PossibleDynamicReferences_Text();
    public static string get_RefactoringHasFoundPossibleDynamicReferences_Text();
    public static string get_DynamicReferences_FindUsagesSection_Text();
    public static string get_PossibleDynamicReferences_FindUsagesSection_Text();
    public static string get_StructurallyCompatibleMembers_Text();
    public static string get_YouHaveChosenATypeMemberForRenameThe_Text();
    public static string get_RelatedStronglyTypedMembers_Text();
    public static string get_YouAreAboutToRenameATypeMemberTheFollowing_Text();
    public static string get_TheExtractedCodeHasMultipleExits_Text();
    public static string get_ExtractHelper_Text();
    public static string get_MoveHelperToApp_Code_Text();
    public static string get_ProfileGroupClassNameMustStartWith__Text();
    public static string get_IfTheClass_IsRenamedTo_TheProperty__Text();
    public static string get_IntroduceVariableForSubstring_Text();
    public static string get_IntroduceType_Alias_Text();
    public static string get_FindPossible_dynamicUsages_Text();
    public static string get_FindS_tructurallyCompatibleMembers_Text();
    public static string get_MoveToFolderIsNotSupportedForRAZORFiles_Text();
    public static string get_IfTheProperty_IsRenamedTo_TheClass__Text();
    public static string get_InlineMasterPageContent_Action_text();
    public static string get_ExtractContentPlaceholder_Action_Text();
    public static string get_Mo_dule_Text();
    public static string get_MoveBlockToCodeBehind_Text();
}
public class JetBrains.ReSharper.Refactorings.WebConfig.Move.WebConfigMoveToNamespaceHelper : MoveToNamespaceHelperBase {
    public virtual IEnumerable`1<ITreeNode> GetUsingsFromFile(IFile file, IList`1<INamespace> namespaces);
    public virtual void RemoveUsing(ITreeNode element);
}
internal class JetBrains.ReSharper.Refactorings.WebConfig.Rename.GrouppedPropertyConflictSearcher : object {
    private IDeclaredElement myElement;
    private string myNewName;
    [CompilerGeneratedAttribute]
private ConflictSearchResult <LastResult>k__BackingField;
    public ConflictSearchResult LastResult { get; private set; }
    public GrouppedPropertyConflictSearcher(IDeclaredElement element, string newName);
    public sealed virtual ConflictSearchResult SearchConflicts(IProgressIndicator pi, bool canPerformRefactoring);
    [CompilerGeneratedAttribute]
public sealed virtual ConflictSearchResult get_LastResult();
    [CompilerGeneratedAttribute]
private void set_LastResult(ConflictSearchResult value);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Web.WebConfig.WebConfigLanguage", "16")]
public class JetBrains.ReSharper.Refactorings.WebConfig.Rename.WebConfigRenameHelper : RenameHelperBase {
    public bool IsLanguageSupported { get; }
    public virtual IList`1<IConflictSearcher> AdditionalConflictsSearchers(IDeclaredElement element, string newName);
    public virtual void AdditionalReferenceProcessing(IDeclaredElement newTarget, IReference reference, ICollection`1<IReference> newReferences);
    public virtual IReference TransformProjectedInitializer(IReference reference);
    public virtual bool get_IsLanguageSupported();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Web.WebConfig.WebConfigLanguage", "16")]
internal class JetBrains.ReSharper.Refactorings.WebConfig.Rename.WebConfigRenameNamespace : object {
    public sealed virtual IEnumerable`1<INamespaceDeclarationUpdater> BuildNamespaceDeclarationUpdatersForFile(INamespace namespace, IFile file, string newName);
    public sealed virtual IConflictSearcher GetConflictSearcher(INamespace namespace, string name);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Web.WebConfig.WebConfigLanguage", "16")]
public class JetBrains.ReSharper.Refactorings.WebConfig.WebConfigRefactoringLanguageService : InternalRefactoringLanguageService {
    public RefactoringsHelper Helper { get; }
    public virtual RefactoringsHelper get_Helper();
    public virtual MoveToNamespaceHelperBase CreateMoveToNamespaceHelper();
}
public class JetBrains.ReSharper.Refactorings.WebConfig.WebConfigRefactoringsHelper : RefactoringsHelper {
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Refactorings.WebConfig.ZoneMarker : object {
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Refactorings.ZoneMarker : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
