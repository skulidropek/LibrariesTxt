public class JetBrains.ReSharper.Refactorings.Xaml.ChangeSignature.XamlArgumentsOwnerUsage : SignatureUsage`1<IXamlArgument> {
    [CompilerGeneratedAttribute]
private IXamlArgumentsOwner <context>P;
    public XamlArgumentsOwnerUsage(IXamlArgumentsOwner context, ClrChangeSignatureModel changeSignatureModel, RebindableReference rebindableReference);
    protected virtual bool TryGetItem(int index, IXamlArgument& item);
    protected virtual void RemoveItem(IXamlArgument item);
    protected virtual ArgumentLikeInfo CreateItemForParameter(ClrChangeSignatureParameter parameter, bool isRecursivePass);
    protected virtual IXamlArgument ReplaceItemBy(IXamlArgument item, IXamlArgument newItem, ClrChangeSignatureParameter parameter);
    protected virtual IXamlArgument AddItemAfter(IXamlArgument item, IXamlArgument anchor, ClrChangeSignatureParameter parameter);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xaml.XamlLanguage", "16")]
public class JetBrains.ReSharper.Refactorings.Xaml.ChangeSignature.XamlCallPreviewProvider : object {
    public sealed virtual IArgumentsOwner GetCallPreview(IArgumentsOwner call, ClrChangeSignatureParameter parameter, object argumentValue, bool addFake);
    private IPathValue BuildStaticMemberAccess(ITreeNode node, IDeclaredElement declaredElement, XamlElementFactory xamlElementFactory);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xaml.XamlLanguage", "16")]
public class JetBrains.ReSharper.Refactorings.Xaml.ChangeSignature.XamlChangeSignature : ChangeSignature {
    public XamlChangeSignature(PsiLanguageType language);
    public virtual bool IsExtensionCallReference(IReference reference);
    public virtual Dictionary`2<int, int> GetArgumentToParameterMapping(IReference reference, bool isExtensionCall, IArgumentsOwner owner);
    public virtual IExpression CreateExpression(string text, ITreeNode context);
    public virtual IExpression CreateReferenceExpression(string name, ITreeNode context);
    public virtual IExpression CreateThisExpression(ITreeNode context);
    public virtual void BindReferenceExpression(IExpression expression, IDeclaredElement element);
    public virtual bool IsLocalEqualToFieldOrAutoProperty(ITypeMember fieldOrProperty, IDeclaredElement local, ITreeNode place);
    public virtual ILocalVariable DeclareLocalOutVariable(string variableName, IType variableType, IExpression& beforeExpression, IElementsSet elementsToKeep);
    public virtual ISignatureUsage CreateSignatureUsage(ClrChangeSignatureModel changeSignatureModel, RebindableReference rebindableReference);
    protected virtual void ChangeDefaultConstructor(IConstructor inheritorConstructor, ClrChangeSignatureModel model, List`1<ArgumentLikeInfo> postActions);
    public virtual bool IsAvailable(IParametersOwner owner);
    public virtual ClrChangeSignatureModel CreateModel(IParametersOwner owner, IProgressIndicator progressIndicator);
    public virtual ClrChangeSignatureModel CreateModel(IParametersOwner parametersOwner, ChangeSignatureFixNode fix, IProgressIndicator progressIndicator);
    public virtual void ChangeDeclaration(IDeclaration declaration, IList`1<IDeclaration> parameterDeclarations, ClrChangeSignatureModel changeSignatureModel, ISubstitution substitution, List`1<ArgumentLikeInfo> postActionsList);
    public virtual void CreateProxy(ClrChangeSignatureModel changeSignatureModel, List`1<ArgumentLikeInfo> postActionsList);
    public virtual IParametersOwner AddDefaultConstructorDeclaration(IConstructor defaultConstructor);
    public virtual IParameterDeclaration CreateParameterDeclaration(IPsiModule module, string name, IType type, ParameterKind parameterKind, bool isParams, bool isVarArg, IDeclaration originalDeclaration, bool isThis, IParameterValue defaultValue, ClrChangeSignatureModel changeSignatureModel);
}
public class JetBrains.ReSharper.Refactorings.Xaml.ChangeStaticness.XamlMakeStatic : MakeStatic {
    public InlineHelper InlineHelper { get; }
    public XamlMakeStatic(MakeStaticWorkflow workflow, ISolution solution, IRefactoringDriver driver);
    public virtual void BindTo(IReference reference, IDeclaredElement declaredElement, ISubstitution substitution);
    public virtual void AddArgumentAndBind(IReference reference, IDeclaredElement declaredElement, ISubstitution substitution, DisposableMarker marker);
    public virtual IReference ConvertMethodGroupToLambda(IReference reference, IList`1<IParameter> parameters);
    public virtual bool CallSiteCanBeModifiedWithParametersIntroduction(IReference reference);
    private IMethodInvocationExpression ConvertToStatic(XamlElementFactory xamlElementFactory, IMethodInvocationExpression expression, IClrDeclaredElement member);
    public virtual void CallInline(IReference reference, CallSiteContext context, IntroduceParameterInlineCallInfo info, IList`1<string> lambdaParameterNames);
    public virtual InlineHelper get_InlineHelper();
    public virtual void FixOtherArguments(IReference reference, Dictionary`2<int, InlinedArgumentInfo> inlinedArgumentInfos);
    public virtual void AddArgument(IReference reference, string marker);
    public virtual int ReferencesToThis(IExpression expression);
    public virtual void Qualify(ITreeNode node, IParameter parameter);
    public virtual void SetStatic(IDeclaration declaration);
    public virtual IParameter AddParameter(IDeclaration declaration, IType type, string name);
    public virtual void Replace(ITreeNode node, string name);
}
public class JetBrains.ReSharper.Refactorings.Xaml.Common.CodebehindReferencesSearcher : object {
    [CompilerGeneratedAttribute]
private List`1<ITreeNode> <LocalItems>k__BackingField;
    [NotNullAttribute]
public List`1<ITreeNode> LocalItems { get; }
    public bool ProcessingIsFinished { get; }
    [NotNullAttribute]
public static IList`1<ITreeNode> FindLocalElements(ITreeNode node);
    [CompilerGeneratedAttribute]
public List`1<ITreeNode> get_LocalItems();
    public sealed virtual bool get_ProcessingIsFinished();
    public sealed virtual bool InteriorShouldBeProcessed(ITreeNode element);
    public sealed virtual void ProcessAfterInterior(ITreeNode element);
    public sealed virtual void ProcessBeforeInterior(ITreeNode element);
}
public interface JetBrains.ReSharper.Refactorings.Xaml.Common.IStyleableProperty {
    [NotNullAttribute]
public string PropertyName { get; }
    [CanBeNullAttribute]
public IPropertySetter ValueSetter { get; }
    [CanBeNullAttribute]
public IPsiSourceFile SourceFile { get; }
    [CanBeNullAttribute]
public IReference PropertyReference { get; }
    [CanBeNullAttribute]
public IReference TypeReference { get; }
    [CanBeNullAttribute]
public ITreeNode Setter { get; }
    public DocumentRange DocumentRange { get; }
    public bool IsEventSetter { get; }
    public bool IsAttached { get; }
    public bool IsQualified { get; }
    public bool IsValid { get; }
    public abstract virtual string get_PropertyName();
    public abstract virtual IPropertySetter get_ValueSetter();
    public abstract virtual IPsiSourceFile get_SourceFile();
    public abstract virtual IReference get_PropertyReference();
    public abstract virtual IReference get_TypeReference();
    public abstract virtual ITreeNode get_Setter();
    public abstract virtual DocumentRange get_DocumentRange();
    public abstract virtual bool get_IsEventSetter();
    public abstract virtual bool get_IsAttached();
    public abstract virtual bool get_IsQualified();
    public abstract virtual bool get_IsValid();
}
public static class JetBrains.ReSharper.Refactorings.Xaml.Common.StyleablePropertiesFactory : object {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Refactorings.Xaml.Common.StyleablePropertiesFactory/<FromContext>d__0")]
[NotNullAttribute]
public static IEnumerable`1<IStyleableProperty> FromContext(IXamlObjectElement objectElement);
    [CanBeNullAttribute]
public static IStyleableProperty FromSetter(IPropertySetter setter, IXamlTypeCache cache, bool canBeEvent);
}
public class JetBrains.ReSharper.Refactorings.Xaml.Common.StyleablePropertyEqualityComparer : object {
    [NotNullAttribute]
public static IEqualityComparer`1<IStyleableProperty> Instance;
    private static StyleablePropertyEqualityComparer();
    public sealed virtual bool Equals(IStyleableProperty x, IStyleableProperty y);
    public sealed virtual int GetHashCode(IStyleableProperty obj);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.Refactorings.Xaml.Common.StyleablePropertyExtensions : object {
    [ExtensionAttribute]
public static PsiLanguageType GetLanguage(IStyleableProperty property);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IType GetPropertyType(IStyleableProperty property);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IDeclaredType GetQualifierType(IStyleableProperty property);
}
internal class JetBrains.ReSharper.Refactorings.Xaml.Common.StyleablePropertyFromSetter : object {
    [NotNullAttribute]
private ITreeNodePointer`1<IPropertySetter> myPointer;
    [CompilerGeneratedAttribute]
private DocumentRange <DocumentRange>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEventSetter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAttached>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsQualified>k__BackingField;
    public IPropertySetter ValueSetter { get; }
    public IPsiSourceFile SourceFile { get; }
    public IReference PropertyReference { get; }
    public IReference TypeReference { get; }
    public ITreeNode Setter { get; }
    public DocumentRange DocumentRange { get; }
    public string PropertyName { get; }
    public bool IsEventSetter { get; }
    public bool IsAttached { get; }
    public bool IsQualified { get; }
    public bool IsValid { get; }
    public StyleablePropertyFromSetter(IPropertySetter setter, bool isEventSetter, bool isAttached);
    public sealed virtual IPropertySetter get_ValueSetter();
    public sealed virtual IPsiSourceFile get_SourceFile();
    public sealed virtual IReference get_PropertyReference();
    public sealed virtual IReference get_TypeReference();
    public sealed virtual ITreeNode get_Setter();
    [CompilerGeneratedAttribute]
public sealed virtual DocumentRange get_DocumentRange();
    [CompilerGeneratedAttribute]
public sealed virtual string get_PropertyName();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsEventSetter();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsAttached();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsQualified();
    public sealed virtual bool get_IsValid();
}
internal class JetBrains.ReSharper.Refactorings.Xaml.Common.StyleablePropertyFromStyle : object {
    [NotNullAttribute]
private ITreeNodePointer`1<IXamlObjectElement> mySetterPointer;
    [NotNullAttribute]
private ITreeNodePointer`1<IPropertySetter> myPropertyPointer;
    [CanBeNullAttribute]
private ITreeNodePointer`1<IPropertySetter> myValuePointer;
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    [CompilerGeneratedAttribute]
private DocumentRange <DocumentRange>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEventSetter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAttached>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsQualified>k__BackingField;
    public string PropertyName { get; }
    public IPropertySetter ValueSetter { get; }
    public IPsiSourceFile SourceFile { get; }
    public IReference PropertyReference { get; }
    public IReference TypeReference { get; }
    public ITreeNode Setter { get; }
    public DocumentRange DocumentRange { get; }
    public bool IsEventSetter { get; }
    public bool IsAttached { get; }
    public bool IsQualified { get; }
    public bool IsValid { get; }
    public StyleablePropertyFromStyle(IXamlObjectElement setter, IPropertySetter propertyProperty, IPropertySetter valueProperty, bool isEventSetter);
    [CompilerGeneratedAttribute]
public sealed virtual string get_PropertyName();
    public sealed virtual IPropertySetter get_ValueSetter();
    public sealed virtual IPsiSourceFile get_SourceFile();
    public sealed virtual IReference get_PropertyReference();
    public sealed virtual IReference get_TypeReference();
    public sealed virtual ITreeNode get_Setter();
    [CompilerGeneratedAttribute]
public sealed virtual DocumentRange get_DocumentRange();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsEventSetter();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsAttached();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsQualified();
    public sealed virtual bool get_IsValid();
    [CanBeNullAttribute]
private static TReference GetPropertyQualifier(IPropertySetter propertyProperty);
    private static bool IsValidPointer(ITreeNodePointer`1<T> pointer);
}
public class JetBrains.ReSharper.Refactorings.Xaml.Common.StyleResource : object {
    [NotNullAttribute]
private ITreeNodePointer`1<IResourceDeclaration> myPointer;
    [CanBeNullAttribute]
public IResourceDeclaration Declaration { get; }
    public bool IsValid { get; }
    private StyleResource(IResourceDeclaration declaration);
    public IResourceDeclaration get_Declaration();
    public bool get_IsValid();
    [CanBeNullAttribute]
public static StyleResource FromExplicit(IXamlObjectElement element, Boolean& isStyle);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Refactorings.Xaml.Common.StyleResource/<FromContext>d__7")]
[NotNullAttribute]
public static IEnumerable`1<StyleResource> FromContext(IXamlObjectElement element);
}
public class JetBrains.ReSharper.Refactorings.Xaml.Common.XamlMoveConflictsSearcherBase : object {
    [CompilerGeneratedAttribute]
private ITreeNode <SourceElement>k__BackingField;
    [CompilerGeneratedAttribute]
private ITreeNode <TargetElement>k__BackingField;
    [CompilerGeneratedAttribute]
private IPsiSourceFile <SourceFile>k__BackingField;
    [CompilerGeneratedAttribute]
private IPsiSourceFile <TargetFile>k__BackingField;
    [CompilerGeneratedAttribute]
private IPsiModule <SourceModule>k__BackingField;
    [CompilerGeneratedAttribute]
private IPsiModule <TargetModule>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ITreeNode> <ElementsToMove>k__BackingField;
    [CompilerGeneratedAttribute]
private ISolution <Solution>k__BackingField;
    [CompilerGeneratedAttribute]
private OneToSetMap`2<IPsiModule, ITypeElement> <TypeUsages>k__BackingField;
    [CompilerGeneratedAttribute]
private OneToListMap`2<IXamlResource, IResourceReference> <ResourceUsages>k__BackingField;
    protected static DeclaredElementPresenterStyle ResourcesStyle;
    [CompilerGeneratedAttribute]
private ConflictSearchResult <LastResult>k__BackingField;
    [NotNullAttribute]
public ITreeNode SourceElement { get; }
    [NotNullAttribute]
public ITreeNode TargetElement { get; }
    [NotNullAttribute]
public IPsiSourceFile SourceFile { get; }
    [NotNullAttribute]
public IPsiSourceFile TargetFile { get; }
    [NotNullAttribute]
public IPsiModule SourceModule { get; }
    [NotNullAttribute]
public IPsiModule TargetModule { get; }
    [NotNullAttribute]
public IList`1<ITreeNode> ElementsToMove { get; }
    [NotNullAttribute]
public ISolution Solution { get; }
    [CanBeNullAttribute]
protected OneToSetMap`2<IPsiModule, ITypeElement> TypeUsages { get; protected set; }
    [NotNullAttribute]
protected OneToListMap`2<IXamlResource, IResourceReference> ResourceUsages { get; protected set; }
    public ConflictSearchResult LastResult { get; private set; }
    public XamlMoveConflictsSearcherBase(ITreeNode sourceElement, ITreeNode targetElement, IEnumerable`1<ITreeNode> elementsToMove);
    private static XamlMoveConflictsSearcherBase();
    [CompilerGeneratedAttribute]
public ITreeNode get_SourceElement();
    [CompilerGeneratedAttribute]
public ITreeNode get_TargetElement();
    [CompilerGeneratedAttribute]
public IPsiSourceFile get_SourceFile();
    [CompilerGeneratedAttribute]
public IPsiSourceFile get_TargetFile();
    [CompilerGeneratedAttribute]
public IPsiModule get_SourceModule();
    [CompilerGeneratedAttribute]
public IPsiModule get_TargetModule();
    [CompilerGeneratedAttribute]
public IList`1<ITreeNode> get_ElementsToMove();
    [CompilerGeneratedAttribute]
public ISolution get_Solution();
    [CompilerGeneratedAttribute]
protected OneToSetMap`2<IPsiModule, ITypeElement> get_TypeUsages();
    [CompilerGeneratedAttribute]
protected void set_TypeUsages(OneToSetMap`2<IPsiModule, ITypeElement> value);
    [CompilerGeneratedAttribute]
protected OneToListMap`2<IXamlResource, IResourceReference> get_ResourceUsages();
    [CompilerGeneratedAttribute]
protected void set_ResourceUsages(OneToListMap`2<IXamlResource, IResourceReference> value);
    public virtual ConflictSearchResult SearchConflicts(IProgressIndicator progressIndicator, bool canPerformRefactoring);
    [CompilerGeneratedAttribute]
public sealed virtual ConflictSearchResult get_LastResult();
    [CompilerGeneratedAttribute]
private void set_LastResult(ConflictSearchResult value);
    private void CheckForCodebehindReferences(IProgressIndicator progressIndicator, List`1<IConflict> conflicts);
    private void CheckAllReferences(IProgressIndicator progressIndicator, List`1<IConflict> conflicts);
    private void ProcessElement(ITreeNode node);
    private bool IsIncluded(ITreeNode treeNode);
    protected virtual void CheckOther(IProgressIndicator progressIndicator, List`1<IConflict> conflicts);
}
public static class JetBrains.ReSharper.Refactorings.Xaml.Common.XamlMoveUtil : object {
    public static IEnumerable`1<ITreeNode> GetUsingsFromFile(IFile file, IList`1<INamespace> namespaces);
    public static void FindAliases(IXmlTagContainer tagContainer, IList`1<INamespace> removedNamespaces, List`1<ITreeNode> ret);
    public static void RemoveUsingFromFile(ITreeNode element);
    public static void FixNamespacesInFileAndRegisterTypes(IXamlFile xamlFile, string expectedNamespaceName, ResolveImagesRepository repository);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[LanguageAttribute("JetBrains.ReSharper.Psi.Xaml.XamlLanguage", "16")]
internal class JetBrains.ReSharper.Refactorings.Xaml.CopyType.XamlCopyType : CLRLanguageSpecificCopyTypeBase {
    public virtual bool IsAvailable(IDeclaration typeDeclaration);
    public virtual IDeclaration CreateCopy(IDeclaration typeDeclaration, IFile file, string qualifiedName, ITreeNode& alreadyCreatedScope);
    public virtual string GenerateFileName(IDeclaration typeDeclaration, string name);
    public virtual IConflictSearcher GetConflictSearcher(IDeclaredElement typeElement, string qualifiedName);
}
public class JetBrains.ReSharper.Refactorings.Xaml.EncapsulateField.XamlEncapsulateField : EncapsulateFieldBase {
    public XamlEncapsulateField(EncapsulateFieldWorkflow workflow, ISolution solution, IRefactoringDriver driver);
    protected virtual void ProcessReference(IReference reference, ReferenceAccessType accessType, IDeclaredElement property);
    private void ReplaceReference(IReference reference, IDeclaredElement property);
    public virtual IDeclaredElement CreatePropertyDeclaration(IDeclaredElement field);
    public virtual void RemoveFieldDeclaration(IDeclaredElement field);
    public virtual IDeclaredElement EnsureReadable(IDeclaredElement property, IDeclaredElement field);
    public virtual IDeclaredElement EnsureWriteable(IDeclaredElement property, IDeclaredElement field);
}
[ActionAttribute("ExtractXamlResource", "JetBrains.ReSharper.Refactorings.Xaml.Resources.Strings", "ExtractXAMLResourceActionText")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Refactorings.Xaml.ExtractResource.ExtractResourceAction : IntroduceWithOccurrencesAction`1<IExtractResourceWorkflowProvider> {
    public static string ACTION_ID;
    protected RichText Caption { get; }
    protected virtual RichText get_Caption();
}
public class JetBrains.ReSharper.Refactorings.Xaml.ExtractResource.ExtractResourceConflictSearcher : XamlMoveConflictsSearcherBase {
    [CompilerGeneratedAttribute]
private ExtractResourceDrivenWorkflow <Workflow>k__BackingField;
    [CompilerGeneratedAttribute]
private IConflictSearcher <DrivenConflictSearcher>k__BackingField;
    [NotNullAttribute]
public ExtractResourceDrivenWorkflow Workflow { get; }
    [NotNullAttribute]
public IConflictSearcher DrivenConflictSearcher { get; public set; }
    public ExtractResourceConflictSearcher(ExtractResourceDrivenWorkflow workflow, ITreeNode sourceElement, ITreeNode targetElement, IEnumerable`1<ITreeNode> elementsToMove, IConflictSearcher drivenConflictSearcher);
    [CompilerGeneratedAttribute]
public ExtractResourceDrivenWorkflow get_Workflow();
    [CompilerGeneratedAttribute]
public IConflictSearcher get_DrivenConflictSearcher();
    [CompilerGeneratedAttribute]
public void set_DrivenConflictSearcher(IConflictSearcher value);
    public virtual ConflictSearchResult SearchConflicts(IProgressIndicator progressIndicator, bool canPerformRefactoring);
}
public class JetBrains.ReSharper.Refactorings.Xaml.ExtractResource.ExtractResourceDrivenWorkflow : DrivenRefactoringWorkflow {
    private static string DefaultResourceName;
    [CompilerGeneratedAttribute]
private List`1<ITreeNodePointer`1<ITreeNode>> <Occurrences>k__BackingField;
    [CompilerGeneratedAttribute]
private ITreeNodePointer`1<IXamlObjectElement> <CommonParent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsMoveResource>k__BackingField;
    [CompilerGeneratedAttribute]
private IDeclaredType <ResourceType>k__BackingField;
    [CompilerGeneratedAttribute]
private ITreeNodePointer`1<IXamlObjectElement> <TargetElement>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetResourceName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReferenceStatically>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CollapsePropertyElements>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TargetRootTag>k__BackingField;
    public string Title { get; }
    public HelpId HelpKeyword { get; }
    public bool MightModifyManyDocuments { get; }
    public RefactoringActionGroup ActionGroup { get; }
    public List`1<ITreeNodePointer`1<ITreeNode>> Occurrences { get; }
    public ITreeNodePointer`1<IXamlObjectElement> CommonParent { get; private set; }
    public bool IsMoveResource { get; private set; }
    public IDeclaredType ResourceType { get; private set; }
    public ITreeNodePointer`1<IXamlObjectElement> TargetElement { get; public set; }
    public string TargetResourceName { get; public set; }
    public bool ReferenceStatically { get; public set; }
    public bool CollapsePropertyElements { get; public set; }
    public bool TargetRootTag { get; public set; }
    public IRefactoringPage FirstPendingRefactoringPage { get; }
    public IConflictSearcher ConflictSearcher { get; }
    public ExtractResourceDrivenWorkflow(ISolution solution, string actionId);
    public virtual string get_Title();
    public virtual HelpId get_HelpKeyword();
    public virtual bool get_MightModifyManyDocuments();
    public virtual RefactoringActionGroup get_ActionGroup();
    [CompilerGeneratedAttribute]
public List`1<ITreeNodePointer`1<ITreeNode>> get_Occurrences();
    [CompilerGeneratedAttribute]
public ITreeNodePointer`1<IXamlObjectElement> get_CommonParent();
    [CompilerGeneratedAttribute]
private void set_CommonParent(ITreeNodePointer`1<IXamlObjectElement> value);
    [CompilerGeneratedAttribute]
public bool get_IsMoveResource();
    [CompilerGeneratedAttribute]
private void set_IsMoveResource(bool value);
    [CompilerGeneratedAttribute]
public IDeclaredType get_ResourceType();
    [CompilerGeneratedAttribute]
private void set_ResourceType(IDeclaredType value);
    [CompilerGeneratedAttribute]
public ITreeNodePointer`1<IXamlObjectElement> get_TargetElement();
    [CompilerGeneratedAttribute]
public void set_TargetElement(ITreeNodePointer`1<IXamlObjectElement> value);
    [CompilerGeneratedAttribute]
public string get_TargetResourceName();
    [CompilerGeneratedAttribute]
public void set_TargetResourceName(string value);
    [CompilerGeneratedAttribute]
public bool get_ReferenceStatically();
    [CompilerGeneratedAttribute]
public void set_ReferenceStatically(bool value);
    [CompilerGeneratedAttribute]
public bool get_CollapsePropertyElements();
    [CompilerGeneratedAttribute]
public void set_CollapsePropertyElements(bool value);
    [CompilerGeneratedAttribute]
public bool get_TargetRootTag();
    [CompilerGeneratedAttribute]
public void set_TargetRootTag(bool value);
    public virtual IRefactoringPage get_FirstPendingRefactoringPage();
    public virtual IConflictSearcher get_ConflictSearcher();
    public void SetIndex(List`1<ITreeNode> usages);
    [CanBeNullAttribute]
private static IXamlObjectElement GetResourceOwnerElement(ITreeNode element);
    [ContractAnnotationAttribute("null <= null")]
private static IXamlObjectElement GetContainingElement(IXamlObjectElement element);
    public virtual bool IsAvailable(IDataContext context);
    public virtual bool Initialize(IDataContext context);
    public static bool IsValidResourceType(IDeclaredType type, ITreeNode context);
    private bool CollectUsagesInFile(ITreeNode property, IDataContext context);
    public virtual IRefactoringExecuter CreateRefactoring(IRefactoringDriver driver);
    [CanBeNullAttribute]
private static ITreeNode GetResource(IDataContext context, IDeclaredType& resourceType, Boolean& isMoveResource);
    [NotNullAttribute]
public INamesSuggestion SuggestResourceName(NamingPolicy& policy, String& firstName);
}
public class JetBrains.ReSharper.Refactorings.Xaml.ExtractResource.ExtractResourceOccurrenceSearcher : object {
    [CanBeNullAttribute]
private IMarkupAttribute myAttribute;
    [CanBeNullAttribute]
private IPropertySetter mySetter;
    [NotNullAttribute]
private List`1<ITreeNode> myResults;
    [NotNullAttribute]
public List`1<ITreeNode> Results { get; }
    public bool ProcessingIsFinished { get; }
    public ExtractResourceOccurrenceSearcher(ITreeNode element);
    public List`1<ITreeNode> get_Results();
    public sealed virtual bool InteriorShouldBeProcessed(ITreeNode element);
    public sealed virtual bool get_ProcessingIsFinished();
    public sealed virtual void ProcessAfterInterior(ITreeNode element);
    public sealed virtual void ProcessBeforeInterior(ITreeNode element);
    private static bool SkipOccurrence(ITypeMemberUsage memberUsage);
}
public class JetBrains.ReSharper.Refactorings.Xaml.ExtractResource.ExtractResourceRefactoring : DrivenRefactoring`2<ExtractResourceDrivenWorkflow, ExtractResourceRefactoringExec> {
    public ExtractResourceRefactoring(ExtractResourceDrivenWorkflow workflow, ISolution solution, IRefactoringDriver driver);
    public virtual bool Execute(IProgressIndicator progressIndicator);
    [NotNullAttribute]
private IXamlObjectElement CreateResourceElement(IXamlObjectElement targetElement, List`1<ITreeNode> occurrences);
    [CanBeNullAttribute]
private IResourceUsage ReplaceOccurrenceWithReference(ITreeNode occurrence);
    private static void FillResourceDeclaration(ITreeNode occurrence, IXamlObjectElement targetElement);
    public static void FillElementFromResource(IXmlTag sourceElement, IXmlTag targetElement);
    private bool ReferenceOccurrenceStatically(ITreeNode element, IXamlTypeCache cache);
    public static void ExpandMarkupToResource(IMarkup markup, IXamlObjectElement resource);
    private bool CheckResolveConflicts(IXamlObjectElement resource, JetHashSet`1<IResourceUsage> newUsages, List`1<ITreeNode> occurrences, IProgressIndicator progressIndicator);
}
public class JetBrains.ReSharper.Refactorings.Xaml.ExtractResource.ExtractResourceRefactoringExec : RefactoringExecBase`2<ExtractResourceDrivenWorkflow, ExtractResourceRefactoring> {
    public ExtractResourceRefactoringExec(ExtractResourceDrivenWorkflow workflow, ISolution solution, IRefactoringDriver driver);
}
[RefactoringWorkflowProviderAttribute("16")]
public class JetBrains.ReSharper.Refactorings.Xaml.ExtractResource.ExtractResourceWorkflowProvider : object {
    public sealed virtual IEnumerable`1<IRefactoringWorkflow> CreateWorkflow(IDataContext dataContext);
}
public interface JetBrains.ReSharper.Refactorings.Xaml.ExtractResource.IExtractResourceWorkflowProvider {
}
public class JetBrains.ReSharper.Refactorings.Xaml.ExtractResource.MoveResourceRefactoring : DrivenRefactoring`2<ExtractResourceDrivenWorkflow, ExtractResourceRefactoringExec> {
    public MoveResourceRefactoring(ExtractResourceDrivenWorkflow workflow, ISolution solution, IRefactoringDriver driver);
    public virtual bool Execute(IProgressIndicator progressIndicator);
    private void ReportResolveConflicts(IList`1<ITreeNodePointer`1<ITreeNode>> existingUsages, IList`1<ITreeNodePointer`1<ITreeNode>> newUsages);
    [CanBeNullAttribute]
private static IList`1<ITreeNodePointer`1<ITreeNode>> CollectResourceUsages(IXamlObjectElement resource, IProgressIndicator progressIndicator);
    [NotNullAttribute]
private static IXamlObjectElement MoveResourceDeclaration(IXamlObjectElement element, IXamlObjectElement targetElement);
}
public class JetBrains.ReSharper.Refactorings.Xaml.ExtractResource.MoveResourceRefactoringExec : RefactoringExecBase`2<ExtractResourceDrivenWorkflow, MoveResourceRefactoring> {
    public MoveResourceRefactoringExec(ExtractResourceDrivenWorkflow workflow, ISolution solution, IRefactoringDriver driver);
}
public class JetBrains.ReSharper.Refactorings.Xaml.ExtractResource.ResourceDictionaryTarget : object {
    [CompilerGeneratedAttribute]
private ITreeNodePointer`1<IXamlObjectElement> <Pointer>k__BackingField;
    [CompilerGeneratedAttribute]
private ResourceDictionaryType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ResourcesCount>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDefault>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsExpanded>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ResourceDictionaryTarget> <Children>k__BackingField;
    [NotNullAttribute]
public ITreeNodePointer`1<IXamlObjectElement> Pointer { get; }
    [CanBeNullAttribute]
public IXamlObjectElement Element { get; }
    [CanBeNullAttribute]
public IPsiSourceFile SourceFile { get; }
    public ResourceDictionaryType Type { get; }
    public int ResourcesCount { get; }
    public bool IsDefault { get; }
    public bool IsExpanded { get; private set; }
    [NotNullAttribute]
public List`1<ResourceDictionaryTarget> Children { get; }
    public ResourceDictionaryTarget(IXamlObjectElement element, ResourceDictionaryType type, bool isDefault);
    [CompilerGeneratedAttribute]
public ITreeNodePointer`1<IXamlObjectElement> get_Pointer();
    private int CalculateResourcesCount(IXamlObjectElement element);
    public IXamlObjectElement get_Element();
    public IPsiSourceFile get_SourceFile();
    [CompilerGeneratedAttribute]
public ResourceDictionaryType get_Type();
    [CompilerGeneratedAttribute]
public int get_ResourcesCount();
    [CompilerGeneratedAttribute]
public bool get_IsDefault();
    [CompilerGeneratedAttribute]
public bool get_IsExpanded();
    [CompilerGeneratedAttribute]
private void set_IsExpanded(bool value);
    [CompilerGeneratedAttribute]
public List`1<ResourceDictionaryTarget> get_Children();
    public void AddChild(ResourceDictionaryTarget target);
    public void Expand();
    [CanBeNullAttribute]
public static ResourceDictionaryTarget BuildTargets(IXamlObjectElement element, ITreeNode xamlContext);
    [CanBeNullAttribute]
private static ResourceDictionaryTarget FromElement(IXamlObjectElement element, IXamlTypeCache cache, ResourceDictionaryTarget child, ResourceDictionaryType dictionaryType, bool canBeDefaultElement);
    private static void FromMergedDictionaries(ResourceDictionaryTarget target, IXamlObjectElement element, IXamlTypeCache cache);
    [CanBeNullAttribute]
private static ResourceDictionaryTarget FromDictionarySource(IPropertySetter sourceSetter, IXamlTypeCache cache, ResourceDictionaryTarget child);
    [CanBeNullAttribute]
private static ResourceDictionaryTarget GetBaseResources(IXamlTypeDeclaration topElement, IXamlTypeCache cache, ResourceDictionaryTarget target);
}
public enum JetBrains.ReSharper.Refactorings.Xaml.ExtractResource.ResourceDictionaryType : Enum {
    public int value__;
    public static ResourceDictionaryType Element;
    public static ResourceDictionaryType Application;
    public static ResourceDictionaryType Dictionary;
    public static ResourceDictionaryType DictionaryFile;
}
public class JetBrains.ReSharper.Refactorings.Xaml.ExtractResource.UI.ExtractResourcePage : SingleBeRefactoringPage {
    public static string TargetNameId;
    public static string TargetDictionaryId;
    public static string ReferenceStaticallyId;
    public static string CollapsePropertiesId;
    [NotNullAttribute]
private ExtractResourceDrivenWorkflow myWorkflow;
    public bool myCollapseIsVisible;
    public bool myReferenceStaticallyVisible;
    public string Title { get; }
    public string Description { get; }
    public ExtractResourcePage(ExtractResourceDrivenWorkflow workflow);
    public virtual string get_Title();
    public virtual string get_Description();
    public virtual BeControl GetPageContent();
}
public class JetBrains.ReSharper.Refactorings.Xaml.ExtractResource.UI.ResourceDictionaryViewModel : object {
    [CompilerGeneratedAttribute]
private ResourceDictionaryTarget <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OwnerName>k__BackingField;
    [CompilerGeneratedAttribute]
private ListEvents`1<ResourceDictionaryViewModel> <Children>k__BackingField;
    [NotNullAttribute]
public ResourceDictionaryTarget Target { get; public set; }
    public bool IsDefault { get; }
    public bool IsExpanded { get; }
    public int ResourcesCount { get; }
    [NotNullAttribute]
public string OwnerName { get; }
    public bool HasResources { get; }
    [NotNullAttribute]
public ListEvents`1<ResourceDictionaryViewModel> Children { get; }
    public IconId Icon { get; }
    public ResourceDictionaryViewModel(ResourceDictionaryTarget target);
    [CompilerGeneratedAttribute]
public ResourceDictionaryTarget get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(ResourceDictionaryTarget value);
    public bool get_IsDefault();
    public bool get_IsExpanded();
    public int get_ResourcesCount();
    [CompilerGeneratedAttribute]
public string get_OwnerName();
    public bool get_HasResources();
    [CompilerGeneratedAttribute]
public ListEvents`1<ResourceDictionaryViewModel> get_Children();
    public IconId get_Icon();
    public bool IsValid();
    public void Expand();
    public void RemoveInvalid();
    [CanBeNullAttribute]
public ResourceDictionaryViewModel Find(Predicate`1<ResourceDictionaryTarget> predicate);
    public void Navigate();
    [CompilerGeneratedAttribute]
private void <Expand>b__22_0();
}
public class JetBrains.ReSharper.Refactorings.Xaml.ExtractStyle.ExtractStyleConflictsSearcher : XamlMoveConflictsSearcherBase {
    [NotNullAttribute]
private ExtractStyleDrivenWorkflow myWorkflow;
    [NotNullAttribute]
private IConflictSearcher myDrivenConflictSearcher;
    public ExtractStyleConflictsSearcher(ExtractStyleDrivenWorkflow workflow, ITreeNode sourceElement, ITreeNode targetElement, IEnumerable`1<ITreeNode> elementsToMove, IConflictSearcher drivenConflictSearcher);
    protected virtual void CheckOther(IProgressIndicator progressIndicator, List`1<IConflict> conflicts);
    public virtual ConflictSearchResult SearchConflicts(IProgressIndicator progressIndicator, bool canPerformRefactoring);
    private void CheckConflicts(List`1<IConflict> conflicts, IXamlObjectElement element, IXamlResource targetStyle, IXamlObjectElement styleDeclaration);
}
public class JetBrains.ReSharper.Refactorings.Xaml.ExtractStyle.ExtractStyleDrivenWorkflow : DrivenRefactoringWorkflow {
    [CompilerGeneratedAttribute]
private DocumentRange <SelectionRange>k__BackingField;
    [CompilerGeneratedAttribute]
private ITreeNodePointer`1<IXamlObjectElement> <Element>k__BackingField;
    [CompilerGeneratedAttribute]
private IPsiSourceFile <SourceFile>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IStyleableProperty> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<StyleResource> <TargetResources>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsExtractFromStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasExplicitStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanCreateNewStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsInitialized>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNonInteractive>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsExtractToExisting>k__BackingField;
    [CompilerGeneratedAttribute]
private StyleResource <TargetResource>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetResourceName>k__BackingField;
    public string Title { get; }
    public HelpId HelpKeyword { get; }
    public bool MightModifyManyDocuments { get; }
    public RefactoringActionGroup ActionGroup { get; }
    public DocumentRange SelectionRange { get; private set; }
    [NotNullAttribute]
public ITreeNodePointer`1<IXamlObjectElement> Element { get; private set; }
    [NotNullAttribute]
public IPsiSourceFile SourceFile { get; private set; }
    [NotNullAttribute]
public List`1<IStyleableProperty> Properties { get; }
    [NotNullAttribute]
public List`1<StyleResource> TargetResources { get; }
    public bool IsExtractFromStyle { get; private set; }
    public bool HasExplicitStyle { get; private set; }
    public bool CanCreateNewStyle { get; private set; }
    private bool IsInitialized { get; private set; }
    public bool IsNonInteractive { get; public set; }
    public bool IsExtractToExisting { get; public set; }
    public StyleResource TargetResource { get; public set; }
    public string TargetResourceName { get; public set; }
    public IRefactoringPage FirstPendingRefactoringPage { get; }
    public IConflictSearcher ConflictSearcher { get; }
    public ExtractStyleDrivenWorkflow(ISolution solution, string actionId);
    public virtual string get_Title();
    public virtual HelpId get_HelpKeyword();
    public virtual bool get_MightModifyManyDocuments();
    public virtual RefactoringActionGroup get_ActionGroup();
    [CompilerGeneratedAttribute]
public DocumentRange get_SelectionRange();
    [CompilerGeneratedAttribute]
private void set_SelectionRange(DocumentRange value);
    [CompilerGeneratedAttribute]
public ITreeNodePointer`1<IXamlObjectElement> get_Element();
    [CompilerGeneratedAttribute]
private void set_Element(ITreeNodePointer`1<IXamlObjectElement> value);
    [CompilerGeneratedAttribute]
public IPsiSourceFile get_SourceFile();
    [CompilerGeneratedAttribute]
private void set_SourceFile(IPsiSourceFile value);
    [CompilerGeneratedAttribute]
public List`1<IStyleableProperty> get_Properties();
    [CompilerGeneratedAttribute]
public List`1<StyleResource> get_TargetResources();
    [CompilerGeneratedAttribute]
public bool get_IsExtractFromStyle();
    [CompilerGeneratedAttribute]
private void set_IsExtractFromStyle(bool value);
    [CompilerGeneratedAttribute]
public bool get_HasExplicitStyle();
    [CompilerGeneratedAttribute]
private void set_HasExplicitStyle(bool value);
    [CompilerGeneratedAttribute]
public bool get_CanCreateNewStyle();
    [CompilerGeneratedAttribute]
private void set_CanCreateNewStyle(bool value);
    [CompilerGeneratedAttribute]
private bool get_IsInitialized();
    [CompilerGeneratedAttribute]
private void set_IsInitialized(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsNonInteractive();
    [CompilerGeneratedAttribute]
public void set_IsNonInteractive(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsExtractToExisting();
    [CompilerGeneratedAttribute]
public void set_IsExtractToExisting(bool value);
    [CompilerGeneratedAttribute]
public StyleResource get_TargetResource();
    [CompilerGeneratedAttribute]
public void set_TargetResource(StyleResource value);
    [CompilerGeneratedAttribute]
public string get_TargetResourceName();
    [CompilerGeneratedAttribute]
public void set_TargetResourceName(string value);
    public virtual IRefactoringPage get_FirstPendingRefactoringPage();
    public virtual IConflictSearcher get_ConflictSearcher();
    public virtual bool IsAvailable(IDataContext context);
    public virtual bool Initialize(IDataContext context);
    public virtual IRefactoringExecuter CreateRefactoring(IRefactoringDriver driver);
    [CanBeNullAttribute]
public IXamlObjectElement GetNewResourceTarget(ITreeNode context);
    [CanBeNullAttribute]
private static IXamlObjectElement GetCurrentObjectElement(IDataContext context, DocumentRange& selectionRange);
    [NotNullAttribute]
public INamesSuggestion SuggestStyleName(IXamlObjectElement element, NamingPolicy& policy);
}
public class JetBrains.ReSharper.Refactorings.Xaml.ExtractStyle.ExtractStyleRefactoring : DrivenRefactoring`2<ExtractStyleDrivenWorkflow, ExtractStyleRefactoringExec> {
    public ExtractStyleRefactoring(ExtractStyleDrivenWorkflow workflow, ISolution solution, IRefactoringDriver driver);
    public virtual bool Execute(IProgressIndicator progressIndicator);
    private static void ExtractSingleProperty(IStyleableProperty property, IResourceDeclaration targetStyle, IXamlTypeCache cache, XamlElementFactory factory, bool qualifyProperties);
    [NotNullAttribute]
private IResourceDeclaration GetTargetStyle(IXamlObjectElement objectElement, Boolean& qualifyProperties);
    [NotNullAttribute]
private IStyleDeclaration CreateStyleDeclaration(IXamlObjectElement objectElement);
}
public class JetBrains.ReSharper.Refactorings.Xaml.ExtractStyle.ExtractStyleRefactoringExec : RefactoringExecBase`2<ExtractStyleDrivenWorkflow, ExtractStyleRefactoring> {
    public ExtractStyleRefactoringExec(ExtractStyleDrivenWorkflow workflow, ISolution solution, IRefactoringDriver driver);
}
[RefactoringWorkflowProviderAttribute("16")]
public class JetBrains.ReSharper.Refactorings.Xaml.ExtractStyle.ExtractStyleWorkflowProvider : object {
    public sealed virtual IEnumerable`1<IRefactoringWorkflow> CreateWorkflow(IDataContext dataContext);
}
[ActionAttribute("JetBrains.ReSharper.Refactorings.Xaml.Resources.Strings", "ExtractXAMLStyleActionText")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Refactorings.Xaml.ExtractStyle.ExtractXamlStyleAction : ExtensibleRefactoringAction`1<IExtractStyleWorkflowProvider> {
    public static string ACTION_ID;
    protected RichText Caption { get; }
    protected virtual RichText get_Caption();
}
public interface JetBrains.ReSharper.Refactorings.Xaml.ExtractStyle.IExtractStyleWorkflowProvider {
}
public class JetBrains.ReSharper.Refactorings.Xaml.ExtractStyle.UI.ExtractStylePage : SingleBeRefactoringPage {
    public static string PropertiesListId;
    [NotNullAttribute]
private ExtractStyleDrivenWorkflow myWorkflow;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    public string Title { get; protected set; }
    public string Description { get; protected set; }
    public ExtractStylePage(ExtractStyleDrivenWorkflow workflow);
    [CompilerGeneratedAttribute]
public virtual string get_Title();
    [CompilerGeneratedAttribute]
protected virtual void set_Title(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Description();
    [CompilerGeneratedAttribute]
protected virtual void set_Description(string value);
    public virtual BeControl GetPageContent();
    private void Navigate(IStyleableProperty element);
    private static List`1<BeControl> PresentProperty(IStyleableProperty property, IconHostBase iconHostBase);
}
public class JetBrains.ReSharper.Refactorings.Xaml.ExtractStyle.UI.ExtractStyleUseOrCreateData : AddOrCreateData`1<StyleResource> {
    private ExtractStyleDrivenWorkflow myWorkflow;
    public static string ExtractStyleTargetNameId;
    public static string ExtractStyleTargetComboId;
    private static DeclaredElementPresenterStyle ourStyle;
    private IReadOnlyCollection`1<NameRoot> myRoots;
    private NamingPolicy myPolicy;
    private Lifetime myLifetime;
    public ExtractStyleUseOrCreateData(ExtractStyleDrivenWorkflow workflow, IXamlObjectElement element);
    private static ExtractStyleUseOrCreateData();
    public virtual void Navigate();
    public virtual BeControl InitText(BeTextBox textBox);
    public virtual BeControl Present(StyleResource resource, IconHostBase iconHostBase);
    [CompilerGeneratedAttribute]
private bool <InitText>b__5_0(string v);
}
public interface JetBrains.ReSharper.Refactorings.Xaml.InlineResource.IInlineResourceWorkflowProvider {
}
[ActionAttribute("InlineXamlResource", "JetBrains.ReSharper.Refactorings.Xaml.Resources.Strings", "InlineXAMLResourceActionText")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Refactorings.Xaml.InlineResource.InlineResourceAction : IntroduceWithOccurrencesAction`1<IInlineResourceWorkflowProvider> {
    public static string ACTION_ID;
    protected RichText Caption { get; }
    protected virtual RichText get_Caption();
}
public class JetBrains.ReSharper.Refactorings.Xaml.InlineResource.InlineResourceDrivenWorkflow : DrivenRefactoringWorkflow {
    [CompilerGeneratedAttribute]
private ITreeNodePointer`1<IResourceDeclaration> <Resource>k__BackingField;
    [CompilerGeneratedAttribute]
private ITreeNodePointer`1<IResourceUsage> <ResourceUsage>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNonInteractive>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsInitialized>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InlineAllUsages>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InlineDynamicUsages>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExpandMarkupExtensions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RemoveInlinedResource>k__BackingField;
    public string Title { get; }
    public HelpId HelpKeyword { get; }
    public bool MightModifyManyDocuments { get; }
    public RefactoringActionGroup ActionGroup { get; }
    [NotNullAttribute]
public ITreeNodePointer`1<IResourceDeclaration> Resource { get; private set; }
    [CanBeNullAttribute]
public ITreeNodePointer`1<IResourceUsage> ResourceUsage { get; private set; }
    public bool IsNonInteractive { get; public set; }
    private bool IsInitialized { get; private set; }
    public bool InlineAllUsages { get; public set; }
    public bool InlineDynamicUsages { get; public set; }
    public bool ExpandMarkupExtensions { get; public set; }
    public bool RemoveInlinedResource { get; public set; }
    public IRefactoringPage FirstPendingRefactoringPage { get; }
    public InlineResourceDrivenWorkflow(ISolution solution, string actionId);
    public virtual string get_Title();
    public virtual HelpId get_HelpKeyword();
    public virtual bool get_MightModifyManyDocuments();
    public virtual RefactoringActionGroup get_ActionGroup();
    [CompilerGeneratedAttribute]
public ITreeNodePointer`1<IResourceDeclaration> get_Resource();
    [CompilerGeneratedAttribute]
private void set_Resource(ITreeNodePointer`1<IResourceDeclaration> value);
    [CompilerGeneratedAttribute]
public ITreeNodePointer`1<IResourceUsage> get_ResourceUsage();
    [CompilerGeneratedAttribute]
private void set_ResourceUsage(ITreeNodePointer`1<IResourceUsage> value);
    [CompilerGeneratedAttribute]
public bool get_IsNonInteractive();
    [CompilerGeneratedAttribute]
public void set_IsNonInteractive(bool value);
    [CompilerGeneratedAttribute]
private bool get_IsInitialized();
    [CompilerGeneratedAttribute]
private void set_IsInitialized(bool value);
    [CompilerGeneratedAttribute]
public bool get_InlineAllUsages();
    [CompilerGeneratedAttribute]
public void set_InlineAllUsages(bool value);
    [CompilerGeneratedAttribute]
public bool get_InlineDynamicUsages();
    [CompilerGeneratedAttribute]
public void set_InlineDynamicUsages(bool value);
    [CompilerGeneratedAttribute]
public bool get_ExpandMarkupExtensions();
    [CompilerGeneratedAttribute]
public void set_ExpandMarkupExtensions(bool value);
    [CompilerGeneratedAttribute]
public bool get_RemoveInlinedResource();
    [CompilerGeneratedAttribute]
public void set_RemoveInlinedResource(bool value);
    public virtual IRefactoringPage get_FirstPendingRefactoringPage();
    public virtual bool IsAvailable(IDataContext context);
    public virtual bool Initialize(IDataContext context);
    public virtual IRefactoringExecuter CreateRefactoring(IRefactoringDriver driver);
    [CanBeNullAttribute]
private static IResourceDeclaration GetResource(IDataContext context, IResourceUsage& resourceUsage);
}
public class JetBrains.ReSharper.Refactorings.Xaml.InlineResource.InlineResourceRefactoring : DrivenRefactoring`2<InlineResourceDrivenWorkflow, InlineResourceRefactoringExec> {
    public InlineResourceRefactoring(InlineResourceDrivenWorkflow workflow, ISolution solution, IRefactoringDriver driver);
    public virtual bool Execute(IProgressIndicator progressIndicator);
    private bool InlineUsage(ITreeNodePointer`1<IResourceUsage> pointer, IResourceDeclaration resource, IType resourceType, string stringValue, bool isSimpleValue);
    [NotNullAttribute]
public List`1<ITreeNodePointer`1<IResourceUsage>> CollectResourceUsages(IResourceDeclaration resource, IProgressIndicator progressIndicator, List`1& dynamicUsages);
    [CanBeNullAttribute]
private static string GetResourceStringValue(IXamlObjectElement objectElement, Boolean& isSimpleValue);
    private static bool ExpandMarkupExtensions(List`1<ITreeNodePointer`1<IResourceUsage>> resourceUsages, IType resourceType, bool isSimpleStringValue);
    [CanBeNullAttribute]
private static IXamlPropertyElement CreatePropertyElementFromAttribute(IPropertyAttribute attribute);
}
public class JetBrains.ReSharper.Refactorings.Xaml.InlineResource.InlineResourceRefactoringExec : RefactoringExecBase`2<InlineResourceDrivenWorkflow, InlineResourceRefactoring> {
    public InlineResourceRefactoringExec(InlineResourceDrivenWorkflow workflow, ISolution solution, IRefactoringDriver driver);
}
[RefactoringWorkflowProviderAttribute("16")]
public class JetBrains.ReSharper.Refactorings.Xaml.InlineResource.InlineResourceWorkflowProvider : object {
    public sealed virtual IEnumerable`1<IRefactoringWorkflow> CreateWorkflow(IDataContext dataContext);
}
public class JetBrains.ReSharper.Refactorings.Xaml.InlineResource.UI.InlineResourcePage : SingleBeRefactoringPage {
    [NotNullAttribute]
private InlineResourceDrivenWorkflow myWorkflow;
    private string myResourceName;
    public static string InlineAllUsagesId;
    public static string InlineDynamicUsagesId;
    public static string AllowMarkupExtensionsId;
    public static string RemoveDeclarationId;
    public string Title { get; }
    public string Description { get; }
    public InlineResourcePage(InlineResourceDrivenWorkflow workflow);
    public virtual string get_Title();
    public virtual string get_Description();
    public virtual BeControl GetPageContent();
    public virtual bool RefreshContents(IProgressIndicator pi);
    [CompilerGeneratedAttribute]
private void <GetPageContent>b__11_0(bool v);
    [CompilerGeneratedAttribute]
private void <GetPageContent>b__11_1(bool v);
    [CompilerGeneratedAttribute]
private void <GetPageContent>b__11_2(bool v);
    [CompilerGeneratedAttribute]
private void <GetPageContent>b__11_3(bool v);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.Refactorings.Xaml.Inplace.XamlImportOnPasteProvider : object {
    public sealed virtual ReferenceData CreateReferenceData(IReference reference, ResolveResultWithInfo resolveResult);
}
internal class JetBrains.ReSharper.Refactorings.Xaml.InvertBool.XamlInvertBoolHelper : InvertBoolHelper {
    public virtual bool ProcessReference(IReference reference);
    private static bool ProcessAttribute(IXmlAttribute attribute);
    private static bool ProcessTag(IXmlTag tag);
    private static string GetInvertedText(string convertedValue);
}
public class JetBrains.ReSharper.Refactorings.Xaml.MoveMembers.XamlExtractSuperclass : PullUpBase {
    public XamlExtractSuperclass(ISolution solution, IRefactoringDriver driver);
    public virtual bool IsInstanceSpecificEventAccess(IReference reference);
    public virtual MoveMembersHelper GetHelper();
}
public class JetBrains.ReSharper.Refactorings.Xaml.MoveMembers.XamlMoveMembersHelper : MoveMembersHelperUnsupported {
    public XamlMoveMembersHelper(IMoveMembersExecuter executer, IRefactoringDriver driver);
    public virtual void SetSuperclass(ITypeDeclaration sourceTypeDeclaration, ITypeElement newSuperTypeElement, ISubstitution substitution);
}
[ExtensionAttribute]
internal static class JetBrains.ReSharper.Refactorings.Xaml.MoveToNamespace.<XamlAdjustNamespacesHelper>F1345D5690E75D16E422D7101422CC3FD0BE64B0271B1F4ECC23A978AE571FFED__NamespaceExtensions : object {
    [ExtensionAttribute]
public static bool IsSuppressedWithCheckNamespace(ITreeNode node);
}
public class JetBrains.ReSharper.Refactorings.Xaml.MoveToNamespace.XamlAdjustNamespacesHelper : AdjustNamespacesHelperBase {
    public bool IsLanguageSupported { get; }
    public virtual bool get_IsLanguageSupported();
    public virtual void FixFile(IFile file, string expectedNamespaceName, ResolveImagesRepository repository, List`1<IDeclaredElement> importedNamespaces);
    public virtual bool IsFromExtendsList(ITreeNode element);
    public virtual bool IsReferenceName(ITreeNode element);
    public virtual void SaveUnusedUsings(IFile file, UnusedUsingSaver saver);
    public virtual void RemoveUnusedUsing(IFile file, HashSet`1<ITreeNode> usings);
    public virtual IDeclaredElement GetImportedSymbolOfUsing(ITreeNode element);
    public virtual IEnumerable`1<ITreeNode> GetUsingsFromFile(IFile file, IList`1<INamespace> namespaces);
    public virtual void RemoveUsing(ITreeNode element);
    public virtual bool FileHasProblems(IFile file, string expectedNamespace);
    private bool IsNamespaceSuppressedWithCheckNamespace(INamespace namespace, ITypeDeclaration typeDeclaration, PsiLanguageType codeBehindLanguageType);
    private bool IsClassSuppressedWithCheckNamespace(ITypeDeclaration typeDeclaration, PsiLanguageType codeBehindLanguageType);
    public virtual IReadOnlyList`1<ITypeDeclaration> GetTopLevelTypeDeclarations(IFile file);
}
internal class JetBrains.ReSharper.Refactorings.Xaml.MoveToNamespace.XamlFileFixer : object {
    private IProjectFile myProjectFile;
    private List`1<INamespaceAlias> mySuspectedAliases;
    public bool IsEmpty { get; }
    public IProjectFile ProjectFile { get; }
    public XamlFileFixer(IXamlFile file, INamespace namespace);
    public sealed virtual bool get_IsEmpty();
    public sealed virtual IProjectFile get_ProjectFile();
    private void FindAliases(IXmlTagContainer tagContainer, INamespace namespace);
    public sealed virtual void FixUsages();
    [CompilerGeneratedAttribute]
private FindExecution <FixUsages>b__8_0(FindResult result);
}
public class JetBrains.ReSharper.Refactorings.Xaml.MoveToNamespace.XamlMoveToFolderHelperBase : MoveToFolderHelperBase {
    public bool IsLanguageSupported { get; }
    public virtual bool get_IsLanguageSupported();
    public virtual IReadOnlyList`1<IDeclaration> GetTopLevelTypeDeclarations(IFile file);
    public virtual bool IsFromExtendsList(ITreeNode element);
    public virtual bool IsReferenceName(ITreeNode element);
    public virtual void SaveUnusedUsings(IFile file, UnusedUsingSaver saver);
    public virtual void RemoveUnusedUsing(IFile file, HashSet`1<ITreeNode> usings);
    public virtual IEnumerable`1<ITreeNode> GetUsingsFromFile(IFile file, IList`1<INamespace> namespaces);
    public virtual void MakePublic(IDeclaration declaration);
    public virtual void RemoveUsing(ITreeNode element);
    public virtual bool MoveWholeFile(MoveToFolderHierarchyProjectItem item, IFile sourceFile, IFile targetFile, bool fixNamespaces, string expectedNamespaceName, ResolveImagesRepository repository, bool searchInRelatedFiles);
    public virtual bool MoveFewDeclarations(IFile sourceFile, IFile targetFile, bool fixNamespaces, string name, ResolveImagesRepository repository, IList`1<IDeclaration> children, bool searchInRelatedFiles);
    public virtual bool MoveSingleDeclaration(IDeclaration typeDeclaration, IFile targetFile, string expectedNamespaceName, ResolveImagesRepository repository, bool searchInRelatedFiles);
}
public class JetBrains.ReSharper.Refactorings.Xaml.MoveToNamespace.XamlMoveToNamespaceHelper : MoveToNamespaceHelperBase {
    public bool IsLanguageSupported { get; }
    public bool AllowEmptyNamespace { get; }
    public virtual bool get_IsLanguageSupported();
    public virtual bool IsFromExtendsList(ITreeNode element);
    public virtual bool IsReferenceName(ITreeNode element);
    public virtual void SaveUnusedUsings(IFile file, UnusedUsingSaver saver);
    public virtual void RemoveUnusedUsing(IFile file, HashSet`1<ITreeNode> usings);
    public virtual IEnumerable`1<ITreeNode> GetUsingsFromFile(IFile file, IList`1<INamespace> namespaces);
    public virtual void RemoveUsing(ITreeNode element);
    public virtual bool get_AllowEmptyNamespace();
    public virtual void MovePrimaryDeclaration(IDeclaration typeDeclaration, string newNamespaceName, ResolveImagesRepository repository, IRefactoringDriver driver);
}
[ShellFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Refactorings.Xaml.Rename.DependencyPropertyRenamesFactory : AtomicRenamesFactory {
    public virtual bool IsApplicable(IDeclaredElement declaredElement);
    private static DependencyEntityType CalculateApplicability(IClrDeclaredElement clrElement);
    public virtual RenameAvailabilityCheckResult CheckRenameAvailability(IDeclaredElement declaredElement);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Refactorings.Xaml.Rename.DependencyPropertyRenamesFactory/<CreateAtomicRenames>d__4")]
public virtual IEnumerable`1<AtomicRenameBase> CreateAtomicRenames(IDeclaredElement declaredElement, string newName, bool doNotAddConflicts);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Refactorings.Xaml.Rename.DependencyPropertyRenamesFactory/<CreateRenames>d__5")]
private static IEnumerable`1<AtomicRenameBase> CreateRenames(IClrDeclaredElement clrElement, ITypeElement containingType, string referenceName, string newReferenceName, bool doNotAddConflicts, bool dependencyPropertyField, bool dependencyPropertyAccessor, bool routedEventField, bool routedEventAccessor, bool attachedPropertyGetter, bool attachedEventAdder, bool attachedPropertySetter, bool attachedEventRemover);
    private static bool IsDescriptorFieldAccessed(IClrDeclaredElement field, IClrDeclaredElement accessor);
}
internal class JetBrains.ReSharper.Refactorings.Xaml.Rename.NamespaceAliasConflictSearcher : object {
    private IXamlNamespaceAlias myAlias;
    private string myNewName;
    [CompilerGeneratedAttribute]
private ConflictSearchResult <LastResult>k__BackingField;
    public ConflictSearchResult LastResult { get; private set; }
    public NamespaceAliasConflictSearcher(IXamlNamespaceAlias alias, string newName);
    public sealed virtual ConflictSearchResult SearchConflicts(IProgressIndicator pi, bool canPerformRefactoring);
    [CompilerGeneratedAttribute]
public sealed virtual ConflictSearchResult get_LastResult();
    [CompilerGeneratedAttribute]
private void set_LastResult(ConflictSearchResult value);
}
[RefactoringWorkflowProviderAttribute("0")]
public class JetBrains.ReSharper.Refactorings.Xaml.Rename.NamespaceAliasRenameProvider : RenameWorkflowProvider {
    private RenameRefactoringService myService;
    private IActionManager myActionManager;
    public NamespaceAliasRenameProvider(RenameRefactoringService service, IActionManager actionManager);
    public virtual IEnumerable`1<IRefactoringWorkflow> CreateWorkflow(IDataContext dataContext);
}
public class JetBrains.ReSharper.Refactorings.Xaml.Rename.NamespaceAliasRenameWorkflow : RenameWorkflow {
    private static string NamespaceAliasRenameWorkflowId;
    private IActionManager myActionManager;
    public NamespaceAliasRenameWorkflow(IActionManager actionManager, RenameRefactoringService renameRefactoringService, ISolution solution, string actionId);
    public virtual bool IsAvailable(IDataContext context);
    public virtual bool Initialize(IDataContext context);
    private bool WrapDataContext(IDataContext context, Func`2<IDataContext, bool> action);
    [CompilerGeneratedAttribute]
private bool <IsAvailable>b__3_0(IDataContext dataContext);
    [CompilerGeneratedAttribute]
private bool <Initialize>b__4_0(IDataContext dataContext);
}
internal class JetBrains.ReSharper.Refactorings.Xaml.Rename.ResourceConflictSearcher : object {
    private IXamlResource myResource;
    private string myNewName;
    [CompilerGeneratedAttribute]
private ConflictSearchResult <LastResult>k__BackingField;
    public ConflictSearchResult LastResult { get; private set; }
    public ResourceConflictSearcher(IXamlResource resource, string newName);
    public sealed virtual ConflictSearchResult SearchConflicts(IProgressIndicator pi, bool canPerformRefactoring);
    [CompilerGeneratedAttribute]
public sealed virtual ConflictSearchResult get_LastResult();
    [CompilerGeneratedAttribute]
private void set_LastResult(ConflictSearchResult value);
}
[ShellFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Refactorings.Xaml.Rename.XamlElementsRenamesFactory : AtomicRenamesFactory {
    public virtual bool IsApplicable(IDeclaredElement declaredElement);
    public virtual RenameAvailabilityCheckResult CheckRenameAvailability(IDeclaredElement declaredElement);
}
internal class JetBrains.ReSharper.Refactorings.Xaml.Rename.XamlNamespaceDeclarationUpdater : object {
    private IXamlTypeDeclaration myTypeDecl;
    private int myNamespacePartsCount;
    private string myNewName;
    public XamlNamespaceDeclarationUpdater(IXamlTypeDeclaration typeDecl, int namespacePartNumber, string newName);
    public sealed virtual void PreProcess();
    public sealed virtual void SetNewName();
    public sealed virtual void RestoreReferences();
}
public class JetBrains.ReSharper.Refactorings.Xaml.Rename.XamlRenameAvailabilityCheckResult : RenameAvailabilityCheckResult {
    [NotNullAttribute]
public static RenameAvailabilityCheckResult NotSupportedInXaml;
    protected XamlRenameAvailabilityCheckResult(string name, string presentation);
    private static XamlRenameAvailabilityCheckResult();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xaml.XamlLanguage", "16")]
public class JetBrains.ReSharper.Refactorings.Xaml.Rename.XamlRenameHelper : RenameHelperBase {
    public bool IsLanguageSupported { get; }
    public virtual bool get_IsLanguageSupported();
    public virtual IList`1<IConflictSearcher> AdditionalConflictsSearchers(IDeclaredElement element, string newName);
    public virtual CustomRenameModel GetOptionsModel(IDeclaredElement primaryDeclaredElement, IReference reference, Lifetime lifetime);
    public virtual void AdditionalReferenceProcessing(IDeclaredElement newTarget, IReference reference, ICollection`1<IReference> newReferences);
    public virtual IReference TransformProjectedInitializer(IReference reference);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xaml.XamlLanguage", "16")]
internal class JetBrains.ReSharper.Refactorings.Xaml.Rename.XamlRenameNamespace : object {
    public sealed virtual IEnumerable`1<INamespaceDeclarationUpdater> BuildNamespaceDeclarationUpdatersForFile(INamespace namespace, IFile file, string newName);
    public sealed virtual IConflictSearcher GetConflictSearcher(INamespace namespace, string name);
}
[ShellFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Refactorings.Xaml.Rename.XamlResourceDeclarationRenamesFactory : AtomicRenamesFactory {
    public virtual bool IsApplicable(IDeclaredElement declaredElement);
    public virtual RenameAvailabilityCheckResult CheckRenameAvailability(IDeclaredElement declaredElement);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Refactorings.Xaml.Rename.XamlResourceDeclarationRenamesFactory/<CreateAtomicRenames>d__2")]
public virtual IEnumerable`1<AtomicRenameBase> CreateAtomicRenames(IDeclaredElement declaredElement, string newName, bool doNotAddBindingConflicts);
    [CanBeNullAttribute]
private static IXamlResource GetXamlResource(IDeclaredElement declaredElement);
}
[ShellFeaturePartAttribute("16")]
public class JetBrains.ReSharper.Refactorings.Xaml.Rename.XamlResourceRenamesFactory : AtomicRenamesFactory {
    public virtual bool IsApplicable(IDeclaredElement declaredElement);
    public virtual RenameAvailabilityCheckResult CheckRenameAvailability(IDeclaredElement declaredElement);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.Refactorings.Xaml.Rename.XamlResourceRenamesFactory/<CreateAtomicRenames>d__2")]
public virtual IEnumerable`1<AtomicRenameBase> CreateAtomicRenames(IDeclaredElement declaredElement, string newName, bool doNotAddBindingConflicts);
    [CanBeNullAttribute]
private static ITypeMember GetTypeMember(IDeclaredElement declaredElement);
}
[ActionGroupAttribute("InsertInto.Refactor.Extract.Anchored.ClassFromParameters", "0", "10")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.Refactorings.Xaml.resources.InsertIntoRefactorExtractAnchoredClassFromParametersActionGroup : object {
    public InsertIntoRefactorExtractAnchoredClassFromParametersActionGroup(ExtractResourceAction extractResourceAction, ExtractXamlStyleAction extractStyleAction);
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public static class JetBrains.ReSharper.Refactorings.Xaml.Resources.Strings : object {
    private static ILogger ourLog;
    private static Lazy`1<JetResourceManager> ourResourceManager;
    [EditorBrowsableAttribute("2")]
public static JetResourceManager ResourceManager { get; }
    public static string ExtractXAMLResourceActionText { get; }
    public static string ExtractXAMLStyleActionText { get; }
    public static string InlineXAMLResourceActionText { get; }
    public static string CanTAddArgumentsTo0BindBackMethodSince_Text { get; }
    public static string CanTConvert0BoundEventHandlerToMethod_Text { get; }
    public static string MethodInvocationInXBindCanTBeMadeStatic_Text { get; }
    public static string BindBackMethodInXBindCanTBeMadeStatic_Text { get; }
    public static string CallSiteCanTBeMadeStaticWithIntroducing_Text { get; }
    public static string CanTAddArgumentsTo0BindBackMethodSinceItShouldNotBeInvoked_Text { get; }
    public static string CheckingConflicts_Text { get; }
    public static string CheckingCodebehindReferences_Text { get; }
    public static string UsagesOf0DeclarationMayBeBroken_Text { get; }
    public static string CollectingReferences_Text { get; }
    public static string CheckingResources_Text { get; }
    public static string CheckingTypeReferences_Text { get; }
    public static string Project_Text { get; }
    public static string Assembly_Text { get; }
    public static string RefactoringHasDetectedThatExtraReference_Text { get; }
    public static string __More_Text { get; }
    public static string StaticResource_0Usage_WillBeBroken_Text { get; }
    public static string DynamicResource_0Usage_WillBeBroken_Text { get; }
    public static string _More_Text { get; }
    public static string Hides__Text { get; }
    public static string ConflictWithDefaultNamespaceAlias_Text { get; }
    public static string SpecifyOptions_Text { get; }
    public static string ForInliningResource__Text { get; }
    public static string Inline_allUsages_Text { get; }
    public static string Inline_dynamicUsages_Text { get; }
    public static string Allow_markupExtensionsExpansion_Text { get; }
    public static string _RemoveInlinedResourceDeclaration_Text { get; }
    public static string CheckingForConflicts_Text { get; }
    public static string Resource0UsageInlineWillProduceConflicts_Text { get; }
    public static string LookingForReferencesInsideMarkupExtensions_Text { get; }
    public static string InliningUsages_Text { get; }
    public static string NoResourceUsagesInlinedButDynamicReferences_Text { get; }
    public static string NoResourceUsagesInlined_Text { get; }
    public static string InlinedResourceHasPossibleDynamic0Usage_Text { get; }
    public static string Resource0UsageInsideDeclaration_Text { get; }
    public static string SearchingForResourceUsages_Text { get; }
    public static string InlineXAMLResource_Text { get; }
    public static string Use_existingStyle_Text { get; }
    public static string _StyleName_Text { get; }
    public static string CreateNewStyle_Text { get; }
    public static string ResourceWithTheSameNameAlreadyExists_Text { get; }
    public static string Invalid_Text { get; }
    public static string ChooseProperties_Text { get; }
    public static string ToExtractIntoNewOrExistingStyle_Text { get; }
    public static string AtLeastOnePropertyShouldBeSelected_Text { get; }
    public static string ChooseLocation_Text { get; }
    public static string WhereToMoveResource_Text { get; }
    public static string WhereToExtractNewResource_Text { get; }
    public static string ThereIsNoTargetResourceDictionaryFound_Text { get; }
    public static string ResourceN_ame_Text { get; }
    public static string ResourceType_Text { get; }
    public static string _Resources__Text { get; }
    public static string ReferenceResource_statically_Text { get; }
    public static string C_ollapsePropertyElementsToAttributes_Text { get; }
    public static string CollectingResourceUsages_Text { get; }
    public static string MovingResourceDeclaration_Text { get; }
    public static string SearchingForConflicts_Text { get; }
    public static string ExistingResource0ReferenceWillBeHidden_Text { get; }
    public static string FailedTo0ReferenceMovedResourceResource_Text { get; }
    public static string CreatingResourceDeclaration_Text { get; }
    public static string CreatingResourceBody_Text { get; }
    public static string ReplacingOccurrencesWithReferences_Text { get; }
    public static string ReplacingOccurrencesWithResourceReferences_Text { get; }
    public static string ExistingResource0ReferenceWillBeHiddenByExtractedResource_Text { get; }
    public static string FailedToReferenceExtractedResourceAfter_Text { get; }
    public static string ExtractedStyleIsNotExplicitlyReferenced_Text { get; }
    public static string InitializingRefactoring_Text { get; }
    public static string ExtractingProperties_Text { get; }
    public static string RemovingSetters_Text { get; }
    public static string ExtractXAMLStyle_Text { get; }
    public static string ExtractXAMLStyle_Column_Property { get; }
    public static string ExtractXAMLStyle_Column_Value { get; }
    public static string ExtractXAMLStyle_Column_Type { get; }
    public static string ExplicitlyProvidedStyleIs_Extracted_Text { get; }
    public static string TargetStyle_AlreadyProvides0SetterFor_Text { get; }
    public static string MoveXAMLResource_Text { get; }
    public static string ExtractXAMLResource_Text { get; }
    public static string ReplaceOneOccurrence_Text { get; }
    public static string ReplaceInitialExpressionOnly_Text { get; }
    public static string Replace_Occurrences_Text { get; }
    public static string ReplaceAllHighlightedOccurrencesOfInitial_Text { get; }
    private static Strings();
    public static JetResourceManager get_ResourceManager();
    public static string Choice(string format, Object[] args);
    public static string get_ExtractXAMLResourceActionText();
    public static string get_ExtractXAMLStyleActionText();
    public static string get_InlineXAMLResourceActionText();
    public static string get_CanTAddArgumentsTo0BindBackMethodSince_Text();
    public static string get_CanTConvert0BoundEventHandlerToMethod_Text();
    public static string get_MethodInvocationInXBindCanTBeMadeStatic_Text();
    public static string get_BindBackMethodInXBindCanTBeMadeStatic_Text();
    public static string get_CallSiteCanTBeMadeStaticWithIntroducing_Text();
    public static string get_CanTAddArgumentsTo0BindBackMethodSinceItShouldNotBeInvoked_Text();
    public static string get_CheckingConflicts_Text();
    public static string get_CheckingCodebehindReferences_Text();
    public static string get_UsagesOf0DeclarationMayBeBroken_Text();
    public static string get_CollectingReferences_Text();
    public static string get_CheckingResources_Text();
    public static string get_CheckingTypeReferences_Text();
    public static string get_Project_Text();
    public static string get_Assembly_Text();
    public static string get_RefactoringHasDetectedThatExtraReference_Text();
    public static string get___More_Text();
    public static string get_StaticResource_0Usage_WillBeBroken_Text();
    public static string get_DynamicResource_0Usage_WillBeBroken_Text();
    public static string get__More_Text();
    public static string get_Hides__Text();
    public static string get_ConflictWithDefaultNamespaceAlias_Text();
    public static string get_SpecifyOptions_Text();
    public static string get_ForInliningResource__Text();
    public static string get_Inline_allUsages_Text();
    public static string get_Inline_dynamicUsages_Text();
    public static string get_Allow_markupExtensionsExpansion_Text();
    public static string get__RemoveInlinedResourceDeclaration_Text();
    public static string get_CheckingForConflicts_Text();
    public static string get_Resource0UsageInlineWillProduceConflicts_Text();
    public static string get_LookingForReferencesInsideMarkupExtensions_Text();
    public static string get_InliningUsages_Text();
    public static string get_NoResourceUsagesInlinedButDynamicReferences_Text();
    public static string get_NoResourceUsagesInlined_Text();
    public static string get_InlinedResourceHasPossibleDynamic0Usage_Text();
    public static string get_Resource0UsageInsideDeclaration_Text();
    public static string get_SearchingForResourceUsages_Text();
    public static string get_InlineXAMLResource_Text();
    public static string get_Use_existingStyle_Text();
    public static string get__StyleName_Text();
    public static string get_CreateNewStyle_Text();
    public static string get_ResourceWithTheSameNameAlreadyExists_Text();
    public static string get_Invalid_Text();
    public static string get_ChooseProperties_Text();
    public static string get_ToExtractIntoNewOrExistingStyle_Text();
    public static string get_AtLeastOnePropertyShouldBeSelected_Text();
    public static string get_ChooseLocation_Text();
    public static string get_WhereToMoveResource_Text();
    public static string get_WhereToExtractNewResource_Text();
    public static string get_ThereIsNoTargetResourceDictionaryFound_Text();
    public static string get_ResourceN_ame_Text();
    public static string get_ResourceType_Text();
    public static string get__Resources__Text();
    public static string get_ReferenceResource_statically_Text();
    public static string get_C_ollapsePropertyElementsToAttributes_Text();
    public static string get_CollectingResourceUsages_Text();
    public static string get_MovingResourceDeclaration_Text();
    public static string get_SearchingForConflicts_Text();
    public static string get_ExistingResource0ReferenceWillBeHidden_Text();
    public static string get_FailedTo0ReferenceMovedResourceResource_Text();
    public static string get_CreatingResourceDeclaration_Text();
    public static string get_CreatingResourceBody_Text();
    public static string get_ReplacingOccurrencesWithReferences_Text();
    public static string get_ReplacingOccurrencesWithResourceReferences_Text();
    public static string get_ExistingResource0ReferenceWillBeHiddenByExtractedResource_Text();
    public static string get_FailedToReferenceExtractedResourceAfter_Text();
    public static string get_ExtractedStyleIsNotExplicitlyReferenced_Text();
    public static string get_InitializingRefactoring_Text();
    public static string get_ExtractingProperties_Text();
    public static string get_RemovingSetters_Text();
    public static string get_ExtractXAMLStyle_Text();
    public static string get_ExtractXAMLStyle_Column_Property();
    public static string get_ExtractXAMLStyle_Column_Value();
    public static string get_ExtractXAMLStyle_Column_Type();
    public static string get_ExplicitlyProvidedStyleIs_Extracted_Text();
    public static string get_TargetStyle_AlreadyProvides0SetterFor_Text();
    public static string get_MoveXAMLResource_Text();
    public static string get_ExtractXAMLResource_Text();
    public static string get_ReplaceOneOccurrence_Text();
    public static string get_ReplaceInitialExpressionOnly_Text();
    public static string get_Replace_Occurrences_Text();
    public static string get_ReplaceAllHighlightedOccurrencesOfInitial_Text();
}
public class JetBrains.ReSharper.Refactorings.Xaml.SafeDelete.XamlSafeDelete : SafeDeleteBase {
    public XamlSafeDelete(SafeDeleteWorkflow workflow, ISolution solution, IRefactoringDriver driver);
    public virtual void RemoveDeclaration(IDeclaration declaration);
    public virtual void SetBaseTypes(IDeclaration declaration, IDeclaredType baseClass, IList`1<IDeclaredType> param, ITypeElement baseElementToRemove);
    public virtual IList`1<ElementRemover> GetExtraElementsFromDeclaration(IDeclaration declaration);
    private static void GetInnerDeclaredElements(IXmlTagContainer tag, ICollection`1<IDeclaredElement> elements);
    public virtual IList`1<IArgument> GetArgumentsToRemove(IReference reference, IParametersOwner owner, IParameter parameter);
    public virtual void RemoveArgument(IReference reference, ArgumentRemover remover, PerReferenceData data);
}
public class JetBrains.ReSharper.Refactorings.Xaml.SafeDelete.XamlSafeDeleteHelper : SafeDeleteHelperUnsupported {
    public bool IsLanguageSupported { get; }
    public virtual bool get_IsLanguageSupported();
    public virtual bool CanBeRemoved(IDeclaredElement element);
    public virtual bool CanBeRemoved(IDeclaration declaration);
    public virtual bool IsBaseClassSpecifier(IReference reference);
    public virtual bool IsInterfaceImplementationSpecifier(IReference reference);
    public virtual void RemoveUsing(ITreeNode element);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xaml.XamlLanguage", "16")]
public class JetBrains.ReSharper.Refactorings.Xaml.SafeDeleteFolder.XamlSafeDeleteFolderHelper : SafeDeleteFolderLanguageSpecific {
    public bool IsLanguageSupported { get; }
    public virtual bool get_IsLanguageSupported();
    public virtual IList`1<IDeclaredElement> GetExternalDeclaredElements(IFile file);
    public virtual IEnumerable`1<ITreeNode> GetUsingsFromFile(IFile file, IList`1<INamespace> namespaces);
    public virtual void RemoveUsing(ITreeNode element);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.Xaml.XamlLanguage", "16")]
public class JetBrains.ReSharper.Refactorings.Xaml.XamlRefactoringLanguageService : InternalRefactoringLanguageService {
    public RefactoringsHelper Helper { get; }
    public virtual IExtractSuperclass ExtractSuperclassRefactoring(ISolution solution, IRefactoringDriver driver);
    public virtual SafeDeleteBase CreateSafeDeleteBase(SafeDeleteWorkflow workflow, ISolution solution, IRefactoringDriver driver);
    public virtual RefactoringsHelper get_Helper();
    public virtual SafeDeleteHelperUnsupported CreateSafeDeleteHelper();
    public virtual AdjustNamespacesHelperBase CreateAdjustNamespaceHelper();
    public virtual MoveToFolderHelperBase CreateMoveToFolderHelper();
    public virtual MoveToNamespaceHelperBase CreateMoveToNamespaceHelper();
    public virtual InvertBoolHelper CreateInvertBoolHelper(InvertBoolWorkflow invertBoolWorkflow);
    public virtual MakeStatic CreateMakeStaticHelper(MakeStaticWorkflow workflow, ISolution solution, IRefactoringDriver driver);
    public virtual EncapsulateFieldBase CreateEncapsulateField(EncapsulateFieldWorkflow workflow, ISolution solution, IRefactoringDriver driver);
}
public class JetBrains.ReSharper.Refactorings.Xaml.XamlRefactoringsHelper : RefactoringsHelper {
    public virtual IArgumentsOwner GetArgumentsOwner(IReference& reference, bool replaceMethodGroup);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.Refactorings.Xaml.ZoneMarker : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
