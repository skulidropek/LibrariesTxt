[ActionGroupAttribute("0", "10")]
public class JetBrains.ReSharper.UnitTestFramework.Actions.InsertIntoOccurrenceBrowserContextMenuAnchoredActionGroup : object {
    public InsertIntoOccurrenceBrowserContextMenuAnchoredActionGroup(Separator sep, UnitTestContextMenuActionGroup unitTestContextMenuActionGroup, AppendTestsAction appendTestsAction);
}
[ActionAttribute("DumpUnitTestNuGetAdapterSearcherAction", "Dump UnitTest NuGet Adapters")]
public class JetBrains.ReSharper.UnitTestFramework.Actions.Internal.DumpUnitTestNuGetAdapterSearcherAction : EditorDumpActionBase`1<UnitTestNuGetAdapterSearcher> {
}
[ActionAttribute("Dump UnitTestResultManager")]
public class JetBrains.ReSharper.UnitTestFramework.Actions.Internal.DumpUnitTestResultManager : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.UnitTestFramework.Actions.Internal.ZoneMarker : object {
}
[ActionGroupAttribute("0", "10")]
public class JetBrains.ReSharper.UnitTestFramework.Actions.IntoUnitTestsMenu : object {
    public IntoUnitTestsMenu(UnitTestContextMenuActionGroup unitTestContextMenuActionGroup, UnitTestRunSolutionActionsActionGroup unitTestRunSolutionActionsActionGroup, UnitTestSessionRunCurrentSessionAction unitTestExplorerRunCurrentSessionAction, RepeatPreviousRunAction repeatPreviousRunAction, Separator sep, AppendTestsAction appendTestsAction, NewSessionAction newSessionAction, Separator sep1);
}
[ActionAttribute("UnitTestExplorer.OpenInExplorer", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "UnitTestExplorerActionText")]
public class JetBrains.ReSharper.UnitTestFramework.Actions.OpenInUnitTestExplorerAction : ContextNavigationActionBase`1<OpenInUnitTestExplorerNavigationProvider> {
}
[ContextNavigationProviderAttribute("16")]
public class JetBrains.ReSharper.UnitTestFramework.Actions.OpenInUnitTestExplorerNavigationProvider : object {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Actions.OpenInUnitTestExplorerNavigationProvider/<CreateWorkflow>d__0")]
public sealed virtual IEnumerable`1<ContextNavigation> CreateWorkflow(IDataContext dataContext);
    private static bool IsAvailable(IDataContext context);
    private static void Execute(IDataContext context);
}
public class JetBrains.ReSharper.UnitTestFramework.Actions.OpenInUnitTestSessionAction : object {
    public static bool IsAvailable(IDataContext context);
    public static void Execute(IDataContext context);
    private static IUnitTestSession[] GetUnitTestSessions(Int32`1<IUnitTestElement> testId, IUnitTestSessionRepository repository);
}
[ContextNavigationProviderAttribute("16")]
public class JetBrains.ReSharper.UnitTestFramework.Actions.OpenInUnitTestSessionNavigationProvider : object {
    public sealed virtual IEnumerable`1<ContextNavigation> CreateWorkflow(IDataContext dataContext);
}
[ActionAttribute("StackTraceExplorer.AppendUnitTests", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "AppendUnitTestsToSessionActionText")]
public class JetBrains.ReSharper.UnitTestFramework.Actions.StackTraceExplorerAppendTestsAction : AppendTestsBaseAction {
    protected virtual UnitTestElements GetElements(IDataContext context);
}
[ActionAttribute("StackTraceExplorer.RunUnitTests", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "RunUnitTestsActionText")]
public class JetBrains.ReSharper.UnitTestFramework.Actions.StackTraceExplorerRunTestsAction : UnitTestRunContextActionImpl {
    protected virtual UnitTestElements GetElementsToRun(IDataContext context);
}
internal class JetBrains.ReSharper.UnitTestFramework.Actions.StackTraceExplorerUnitTestElementsProvider : object {
    [CanBeNullAttribute]
public static UnitTestElements GetElements(IDataContext context);
}
public static class JetBrains.ReSharper.UnitTestFramework.Actions.UnitTestDataConstants : object {
    public static TreeDataConstant TREE;
    public static DataConstant`1<IUnitTestElementCriterion> CRITERION_FOR_SESSION_NODE;
    private static UnitTestDataConstants();
}
[SolutionComponentAttribute("10")]
[NonHighlightingSourceAttribute]
internal class JetBrains.ReSharper.UnitTestFramework.Actions.UnitTestDataRules : object {
    private IUnitTestPsiManager myUnitTestManager;
    private UnitTestFileExplorer myFileExplorer;
    public UnitTestDataRules(Lifetime lifetime, IActionManager actionManager, UnitTestFileExplorer fileExplorer, IUnitTestPsiManager unitTestManager);
    [CanBeNullAttribute]
private UnitTestElements EverythingToCriterion(IDataContext context);
    [CanBeNullAttribute]
private IUnitTestTreeViewModel TreeModelToTree(IDataContext context);
    [CanBeNullAttribute]
private UnitTestElements TreeModelToAllElements(IDataContext context);
    [CanBeNullAttribute]
private UnitTestElements TreeViewModelToAllElements(IUnitTestTreeViewModel viewModel);
    private UnitTestElements TreeModelToSelectedElements(IDataContext context);
    [CanBeNullAttribute]
private UnitTestElements DeclaredElementToCriterion(IDataContext context);
    [NotNullAttribute]
private static UnitTestElements GetUnitTestElements(IReadOnlySet`1<IUnitTestTreeNode> nodes, IUnitTestTreeViewModel viewModel);
    [NotNullAttribute]
private static UnitTestElements GetSelectedElementsCriterion(IReadOnlySet`1<IUnitTestTreeNode> nodes, IUnitTestTree tree);
    [NotNullAttribute]
public static UnitTestElements GetSelectedNodesCriterion(IReadOnlySet`1<IUnitTestTreeNode> nodes, IUnitTestTree tree);
    private static IUnitTestElementCriterion Reduce(IUnitTestTree tree, IReadOnlyCollection`1<IUnitTestTreeNode> nodes);
    [NotNullAttribute]
internal static IReadOnlyCollection`1<IUnitTestTreeNode> GetLeafNodes(IReadOnlySet`1<IUnitTestTreeNode> nodes);
    [CanBeNullAttribute]
private UnitTestElements DocumentSelectionToCriterion(IDataContext context);
    [CanBeNullAttribute]
private UnitTestElements ProjectModelToCriterion(IDataContext context);
    [CanBeNullAttribute]
private IUnitTestSession TreeModelToSession(IDataContext context);
    [CanBeNullAttribute]
private IUnitTestSessionTreeViewModel TreeModelToSessionTree(IDataContext context);
    [CanBeNullAttribute]
private UnitTestElements TreeModelToSessionAllElements(IDataContext context);
    [CanBeNullAttribute]
private UnitTestElements TreeModelToSessionSelectedElements(IDataContext context);
    [CanBeNullAttribute]
private IUnitTestSession CurrentSessionToSession(IDataContext context);
    [CanBeNullAttribute]
private IUnitTestSessionTreeViewModel CurrentSessionToSessionTree(IDataContext context);
    private UnitTestElements CurrentSessionToSessionAllElements(IDataContext context);
    [CanBeNullAttribute]
private UnitTestElements CurrentSessionToSessionSelectedElements(IDataContext context);
    [NotNullAttribute]
private static IUnitTestElementCriterion GetFilterCriterion(IUnitTestTreeViewModel viewModel);
    [CanBeNullAttribute]
private ICollection`1<IDeclaredElement> GetDeclaredElements(IDataContext context);
    [CompilerGeneratedAttribute]
internal static IUnitTestElementCriterion <Reduce>g__Get|12_0(IUnitTestTreeNode node, ISet`1<IUnitTestTreeNode> affectedNodes);
    [CompilerGeneratedAttribute]
internal static IUnitTestElementCriterion <Reduce>g__GetCriterionFor|12_1(IUnitTestTreeNode node);
    [CompilerGeneratedAttribute]
internal static HashSet`1<IUnitTestTreeNode> <GetLeafNodes>g__GetLeaves|13_0(IEnumerable`1<IUnitTestTreeNode> nodes);
}
[ActionAttribute("UnitTest_DebugContext", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "DebugUnitTestsActionText")]
public class JetBrains.ReSharper.UnitTestFramework.Actions.UnitTestDebugContextAction : UnitTestRunFromContextAction {
    protected virtual IHostProvider GetHostProvider();
}
[ActionAttribute("UnitTest.DebugTestsInAllTargetFrameworks", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "InAllTargetFrameworksActionText")]
public class JetBrains.ReSharper.UnitTestFramework.Actions.UnitTestDebugInAllTargetFrameworks : UnitTestRunInAllTargetFrameworksBase {
    protected virtual IHostProvider GetHostProvider();
}
[ActionAttribute("UnitTest.RunSolution", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "RuNAllTestsFromSolutionActionText")]
public class JetBrains.ReSharper.UnitTestFramework.Actions.UnitTestExplorerRunSolutionAction : UnitTestRunSolutionActionsBase {
    protected virtual IHostProvider GetHostProvider();
}
public abstract class JetBrains.ReSharper.UnitTestFramework.Actions.UnitTestRunBaseAction : object {
    protected bool OnlyAvailableWhenIdle { get; }
    public sealed virtual IActionRequirement GetRequirement(IDataContext dataContext);
    public virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    [CanBeNullAttribute]
protected IHostProvider GetHostProviderWhenAvailable(ActionPresentation presentation);
    public virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    protected virtual bool get_OnlyAvailableWhenIdle();
    [NotNullAttribute]
protected abstract virtual IHostProvider GetHostProvider();
    [CanBeNullAttribute]
protected abstract virtual UnitTestElements GetElementsToRun(IDataContext context);
    protected virtual void DoWhenLaunchCreated(IUnitTestLaunch launch, bool sessionShouldBeFocused);
}
[ActionAttribute("UnitTest.RunFromContext", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "RunUnitTestsActionText")]
public class JetBrains.ReSharper.UnitTestFramework.Actions.UnitTestRunContextAction : UnitTestRunContextActionImpl {
}
public abstract class JetBrains.ReSharper.UnitTestFramework.Actions.UnitTestRunContextActionImpl : UnitTestRunFromContextAction {
    protected virtual IHostProvider GetHostProvider();
}
[ActionAttribute("UnitTest.RunFromContextUntilFail", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "RunUnitTestsUntilFailActionText")]
public class JetBrains.ReSharper.UnitTestFramework.Actions.UnitTestRunContextUntilFail : UnitTestRunContextUntilFailBase {
}
public class JetBrains.ReSharper.UnitTestFramework.Actions.UnitTestRunContextUntilFailBase : UnitTestRunContextActionImpl {
    public virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    private void RunRepeatedly(IUnitTestingFacade facade, UnitTestElements elements, IHostProvider hostProvider);
    public static bool HasFailedTests(IUnitTestLaunch launch, IUnitTestResultManager resultManager);
}
public abstract class JetBrains.ReSharper.UnitTestFramework.Actions.UnitTestRunFromContextAction : UnitTestRunBaseAction {
    protected virtual UnitTestElements GetElementsToRun(IDataContext context);
}
[ActionGroupAttribute("UnitTest.RunFromContextGroup", "1", "16")]
public class JetBrains.ReSharper.UnitTestFramework.Actions.UnitTestRunFromContextActionGroup : UnitTestRunContextActionImpl {
}
[ActionAttribute("UnitTest.RunInAllTargetFrameworks", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "InAllTargetFrameworksActionText")]
public class JetBrains.ReSharper.UnitTestFramework.Actions.UnitTestRunInAllTargetFrameworks : UnitTestRunInAllTargetFrameworksBase {
    protected virtual IHostProvider GetHostProvider();
}
public abstract class JetBrains.ReSharper.UnitTestFramework.Actions.UnitTestRunInAllTargetFrameworksBase : UnitTestRunFromContextAction {
    public virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    private bool UpdateCore(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    protected virtual UnitTestElements GetElementsToRun(IDataContext context);
}
[ActionGroupAttribute("UnitTest.RunSolutionActions", "0", "10")]
public class JetBrains.ReSharper.UnitTestFramework.Actions.UnitTestRunSolutionActionsActionGroup : object {
    public UnitTestRunSolutionActionsActionGroup(UnitTestExplorerRunSolutionAction unitTestExplorerRunSolutionAction);
}
public abstract class JetBrains.ReSharper.UnitTestFramework.Actions.UnitTestRunSolutionActionsBase : object {
    [NotNullAttribute]
protected abstract virtual IHostProvider GetHostProvider();
    protected virtual void DoWhenLaunchCreated(IUnitTestLaunch launch, bool sessionShouldBeFocused);
    public virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
public abstract class JetBrains.ReSharper.UnitTestFramework.Actions.UnitTestRunTreeActionBase : object {
    [CanBeNullAttribute]
private ContextTree BuildContextTree(IDataContext context);
    public virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    [NotNullAttribute]
protected abstract virtual IHostProviderDescriptor GetHostProviderDescriptor();
    protected virtual void DoWhenLaunchCreated(IUnitTestLaunch launch, bool sessionShouldBeFocused);
}
[ActionGroupAttribute("UnitTest.SessionContextMenuDebugTestsFromContextAction", "1", "16")]
public class JetBrains.ReSharper.UnitTestFramework.Actions.UnitTestSessionContextMenuDebugTestsFromContextAction : UnitTestRunFromContextAction {
    protected virtual IHostProvider GetHostProvider();
}
[ActionGroupAttribute("UnitTest.SessionContextMenuRunFromContextAction", "1", "16")]
public class JetBrains.ReSharper.UnitTestFramework.Actions.UnitTestSessionContextMenuRunFromContextAction : UnitTestRunContextActionImpl {
}
[ActionGroupAttribute("UnitTest.SessionContextMenuRunFromContextActionGroup", "0", "16")]
public class JetBrains.ReSharper.UnitTestFramework.Actions.UnitTestSessionContextMenuRunFromContextActionGroup : object {
}
public class JetBrains.ReSharper.UnitTestFramework.AssemblyReferenceClass_PsiFeatures_UnitTestFramework : object {
}
public interface JetBrains.ReSharper.UnitTestFramework.Caching.IUnitTestingProjectCache {
    [NotNullAttribute]
public abstract virtual IProject GetProject(string projectPersistentId);
}
public interface JetBrains.ReSharper.UnitTestFramework.Caching.IUnitTestingProviderCache {
    [NotNullAttribute]
public abstract virtual IUnitTestProvider GetProviderByProviderId(string providerId);
}
public interface JetBrains.ReSharper.UnitTestFramework.Caching.IUnitTestingTypeCache {
    [CanBeNullAttribute]
public abstract virtual ITypeElement GetTypeElement(IProject project, TargetFrameworkId targetFrameworkId, IClrTypeName clrTypeName, bool withReferences, bool caseSensitive);
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.UnitTestFramework.Caching.UnitTestingProjectCache : object {
    private ILogger myLogger;
    private IShellLocks myLocks;
    private ISolution mySolution;
    private MyChangeVisitor myChangeVisitor;
    private ConcurrentDictionary`2<string, IProject> myCachedProjects;
    public UnitTestingProjectCache(Lifetime lifetime, IShellLocks locks, ISolution solution, ChangeManager changeManager);
    private void OnChanged(ChangeEventArgs e);
    private void OnProjectAddedOrRemoved(string projectPersistentId);
    public sealed virtual IProject GetProject(string projectPersistentId);
    private IProject FindProjectByPersistentId(string projectPersistentId);
}
[SolutionComponentAttribute("0")]
internal class JetBrains.ReSharper.UnitTestFramework.Caching.UnitTestingProviderCache : object {
    private IUnitTestProviderManager myProviderManager;
    public UnitTestingProviderCache(IUnitTestProviderManager providerManager);
    public sealed virtual IUnitTestProvider GetProviderByProviderId(string providerId);
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.UnitTestFramework.Caching.UnitTestingTypeCache : object {
    private IShellLocks myLocks;
    private IPsiServices myPsiServices;
    private ResolveContextManager myResolveContextManager;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<ValueTuple`4<IProject, TargetFrameworkId, bool, bool>, Dictionary`2<IClrTypeName, ITypeElement>> myTypeElementCache;
    public UnitTestingTypeCache(Lifetime lifetime, IShellLocks locks, IPsiServices psiServices, ResolveContextManager resolveContextManager);
    private void BeforeAcquireWriteLock(object sender, BeforeAcquiringWriteLockEventArgs beforeAcquiringWriteLockEventArgs);
    private void DropCache();
    public sealed virtual ITypeElement GetTypeElement(IProject project, TargetFrameworkId targetFrameworkId, IClrTypeName clrTypeName, bool withReferences, bool caseSensitive);
}
public class JetBrains.ReSharper.UnitTestFramework.Common.Exceptions.CannotConnectToServerException : OuterWorldException {
    public CannotConnectToServerException(string message);
}
public class JetBrains.ReSharper.UnitTestFramework.Common.Exceptions.ElementDoesNotExistException : PersistenceException {
    public ElementDoesNotExistException(Int32`1<IUnitTestElement> testId);
}
public interface JetBrains.ReSharper.UnitTestFramework.Common.Exceptions.IHumanReadableException {
}
public class JetBrains.ReSharper.UnitTestFramework.Common.Exceptions.MissingDataException : Exception {
    public MissingDataException(string message);
    public MissingDataException(string message, Exception innerException);
}
public class JetBrains.ReSharper.UnitTestFramework.Common.Exceptions.ProcessExitedUnexpectedlyException : OuterWorldException {
    public ProcessExitedUnexpectedlyException(string message);
    public ProcessExitedUnexpectedlyException(string message, Exception innerException);
    protected ProcessExitedUnexpectedlyException(SerializationInfo info, StreamingContext context);
}
public class JetBrains.ReSharper.UnitTestFramework.Common.Exceptions.RecordDoesNotExistException : PersistenceException {
    public RecordDoesNotExistException(Int32`1<IUnitTestElement> testId);
}
public class JetBrains.ReSharper.UnitTestFramework.Common.Exceptions.UnitTestingException : Exception {
    public UnitTestingException(string message);
    public UnitTestingException(string message, Exception innerException);
}
public class JetBrains.ReSharper.UnitTestFramework.Common.Exceptions.UnknownExitCodeException : OuterWorldException {
    [CompilerGeneratedAttribute]
private int <ExitCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Output>k__BackingField;
    public int ExitCode { get; }
    public string Output { get; }
    public UnknownExitCodeException(int exitCode, string output, string message);
    [CompilerGeneratedAttribute]
public int get_ExitCode();
    [CompilerGeneratedAttribute]
public string get_Output();
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.UnitTestFramework.Common.Extensions.ComponentContainerExtensions : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static ComponentContainer RegisterFrom(ComponentContainer container, ITaskRunnerHostController hostController);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.UnitTestFramework.Common.Extensions.DictionaryExtensions : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static StringDictionary ToStringDictionary(IDictionary`2<string, string> dict);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.UnitTestFramework.Common.Extensions.HashSetExtensions : object {
    [ExtensionAttribute]
public static T GetValueOrDefault(ISet`1<T> set, T value, T defaultValue);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.UnitTestFramework.Common.Extensions.LifetimeExtensions : object {
    [AsyncStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Common.Extensions.LifetimeExtensions/<RetryIfThrows>d__0`1")]
[ExtensionAttribute]
[NotNullAttribute]
public static Task RetryIfThrows(Lifetime lifetime, TimeSpan timeout, Func`1<Task> task);
}
[ExtensionAttribute]
[LocalizableAttribute("False")]
public static class JetBrains.ReSharper.UnitTestFramework.Common.Extensions.LoggerExtensions : object {
    [ExtensionAttribute]
public static LocalDisposable Bracket(ILogger logger, LoggingLevel level, string message);
    [ExtensionAttribute]
public static LocalDisposable Bracket(ILogger logger, object caller, LoggingLevel level, string callerMemberName);
    [ExtensionAttribute]
[NotNullAttribute]
public static INotificationConsumer AsNotificationConsumer(ILogger logger);
    [ExtensionAttribute]
[NotNullAttribute]
public static ILogger RelaxTo(ILogger logger, LoggingLevel level);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.UnitTestFramework.Common.Extensions.ObjectExtensions : object {
    [ExtensionAttribute]
[CanBeNullAttribute]
public static T As(object instance);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.UnitTestFramework.Common.Extensions.PlatformTypeExtensions : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static JetProcessRuntimeRequest ToJetProcessRuntimeRequest(IRuntimeDescriptor runtime, IUnitTestLaunch launch);
    [ExtensionAttribute]
private static JetProcessRuntimePlatformRequest ToJetProcessRuntimePlatformRequest(TargetPlatform targetPlatform);
    [ExtensionAttribute]
public static TargetPlatform DefaultIfAnyCpu(TargetPlatform targetPlatform, Nullable`1<TargetPlatform> default);
    [ExtensionAttribute]
public static JetArchitecture ToJetArchitecture(TargetPlatform platform);
    [CompilerGeneratedAttribute]
internal static JetArchitecture <ToJetArchitecture>g__ThrowNotSupported|3_0(<>c__DisplayClass3_0& );
    [CompilerGeneratedAttribute]
internal static JetArchitecture <ToJetArchitecture>g__GetMatchingOrThrowNotSupported|3_1(JetArchitecture requested, <>c__DisplayClass3_0& );
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.UnitTestFramework.Common.Extensions.ProgressIndicatorExtensions : object {
    [ExtensionAttribute]
public static Lifetime ToLifetime(IProgressIndicator pi);
    [ExtensionAttribute]
internal static IProgressIndicatorModel GetModel(IProgressIndicator pi);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.UnitTestFramework.Common.Extensions.SettingsExtensions : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static OptionsSettingsSmartContext DefaultToSolution(OptionsSettingsSmartContext origin, Lifetime lifetime, ISolution solution);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.UnitTestFramework.Common.Extensions.SettingsStoreExtensions : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static IProperty`1<TResult> GetValueProperty2(IContextBoundSettingsStoreLive store, Lifetime lifetime, Expression`1<Func`2<TKeyClass, TEntryMemberType>> lambdaexpression, ApartmentForNotifications apartmentForNotifications, Func`2<TEntryMemberType, TResult> convertFrom, Func`2<TResult, TEntryMemberType> convertTo, IDictionary`2<SettingsKey, object> keyIndices);
    [ExtensionAttribute]
public static IProperty`1<IDictionary`2<TKey, TValue>> GetIndexedProperty(IContextBoundSettingsStoreLive store, Lifetime lifetime, Expression`1<Func`2<TKeyClass, IIndexedEntry`2<TKey, TValue>>> lambdaexpression, IDictionary`2<SettingsKey, object> keyIndices);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.UnitTestFramework.Common.Extensions.ShellLockExtensions : object {
    [ExtensionAttribute]
public static void WithReadLock(IShellLocks locks, Action action);
    [ExtensionAttribute]
public static T WithReadLock(IShellLocks locks, Func`1<T> func);
    [ExtensionAttribute]
public static void Fire(EventHandler`1<T> handler, object sender, T args);
    [ExtensionAttribute]
public static Lifetime CancellationSourceForWriteRequest(IShellLocks locks);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.UnitTestFramework.Common.Extensions.StringExtensions : object {
    [ExtensionAttribute]
[CanBeNullAttribute]
public static string InternIfNotNull(string value);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static string ToLiteral(string value);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.UnitTestFramework.Common.Extensions.TargetFrameworkIdExtensions : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static string GetShortIdentifierOrDefault(TargetFrameworkId tf);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.UnitTestFramework.Common.Extensions.TaskExtensions : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static Task OnFaulted(Task task, Action`1<Task> continuation, TaskScheduler scheduler);
    [ExtensionAttribute]
[NotNullAttribute]
public static Task OnSuccess(Task task, Action`1<Task> continuation, TaskScheduler scheduler);
    [ExtensionAttribute]
[NotNullAttribute]
public static Task OnSuccess(Task`1<T> task, Action`1<Task`1<T>> continuation, TaskScheduler scheduler);
    [ExtensionAttribute]
[NotNullAttribute]
public static Task OnSuccess(Task`1<T> task, Action`1<Task`1<T>> continuation, CancellationToken token, TaskScheduler scheduler);
    [ExtensionAttribute]
[NotNullAttribute]
public static Task`1<TResult> OnSuccess(Task task, Func`2<Task, TResult> continuation, TaskScheduler scheduler);
    [ExtensionAttribute]
[NotNullAttribute]
public static Task OnSuccess(Task task, Func`2<Task, Task> continuation, TaskScheduler scheduler);
    [ExtensionAttribute]
[NotNullAttribute]
public static Task OnCanceled(Task task, Action`1<Task> continuation, TaskScheduler scheduler);
    [ExtensionAttribute]
[NotNullAttribute]
public static Task`1<TResult> OnCanceled(Task task, Func`2<Task, TResult> continuation, TaskScheduler scheduler);
    [ExtensionAttribute]
[NotNullAttribute]
public static Task OnCanceled(Task task, Func`2<Task, Task> continuation, TaskScheduler scheduler);
    [ExtensionAttribute]
[NotNullAttribute]
public static Task Finally(Task task, Action`1<Task> continuation);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Common.Extensions.TaskExtensions/<ThrowIf>d__10`2")]
[ExtensionAttribute]
[NotNullAttribute]
public static Task`1<TResult> ThrowIf(Task`1<TResult> task, Task signallingTask, Func`1<TException> exceptionFactory);
    [ExtensionAttribute]
[NotNullAttribute]
public static Task`1<TResult> ThrowIf(Task`1<TResult> task, WaitHandle waitHandle, Func`1<TException> exceptionFactory);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Common.Extensions.TaskExtensions/<ThrowIf>d__12`2")]
[ExtensionAttribute]
[NotNullAttribute]
public static Task`1<TResult> ThrowIf(Task`1<TResult> task, CancellationToken ct, Func`1<TException> exceptionFactory);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Common.Extensions.TaskExtensions/<ThrowIf>d__13`1")]
[ExtensionAttribute]
[NotNullAttribute]
public static Task ThrowIf(Task task, Task signallingTask, Func`1<TException> exceptionFactory);
    [ExtensionAttribute]
[NotNullAttribute]
public static Task`1<TResult> ThrowAfter(Task`1<TResult> task, TimeSpan timeout, Func`2<TimeSpan, TException> exceptionFactory);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Common.Extensions.TaskExtensions/<CancelIf>d__15")]
[ExtensionAttribute]
[NotNullAttribute]
public static Task CancelIf(Task task, CancellationToken ct, TaskCreationOptions options);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Common.Extensions.TaskExtensions/<CancelIf>d__16`1")]
[ExtensionAttribute]
[NotNullAttribute]
public static Task`1<TResult> CancelIf(Task`1<TResult> task, CancellationToken ct);
    [ExtensionAttribute]
public static CancellationToken ToCancellationToken(TimeSpan timeout);
    [ExtensionAttribute]
public static T ResultOrBaseException(Task`1<T> task);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.UnitTestFramework.Common.Extensions.XElementExtensions : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static XmlElement ToXmlElement(XElement el);
}
public class JetBrains.ReSharper.UnitTestFramework.Common.Processes.PreparedProcess : object {
    [CompilerGeneratedAttribute]
private LineReadHandler OutputLineRead;
    [CompilerGeneratedAttribute]
private LineReadHandler ErrorLineRead;
    [CompilerGeneratedAttribute]
private ExitProcessHandler Exited;
    private static string SYSTEM_CANNOT_FIND_FILE;
    private static TimeSpan KILL_TIMEOUT;
    [NotNullAttribute]
private ProcessStartInfo myPatchedStartInfo;
    [NotNullAttribute]
private CircularBuffer`1<string> myOutputBuilder;
    [NotNullAttribute]
private ILogger myLogger;
    private Process myTargetProcess;
    private int myProcessId;
    private int myExitCode;
    private bool myIsRunning;
    private bool myIsDisposed;
    private AsyncStreamReader myOutput;
    private AsyncStreamReader myError;
    private ManualResetEvent myProcessInitialized;
    public int ProcessId { get; }
    public IntPtr Handle { get; }
    public string ProcessName { get; }
    public string ProcessArgs { get; }
    public int ExitCode { get; }
    public string Output { get; }
    public bool IsRunning { get; }
    public bool HasExited { get; }
    public Nullable`1<DateTime> StartTime { get; }
    public Nullable`1<DateTime> ExitTime { get; }
    public PreparedProcess(JetProcessStartInfo rawStartInfo, JetProcessStartInfoPatch patch);
    public PreparedProcess(JetProcessStartInfo rawStartInfo, ILogger logger, JetProcessStartInfoPatch patch);
    private static PreparedProcess();
    [CompilerGeneratedAttribute]
public sealed virtual void add_OutputLineRead(LineReadHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_OutputLineRead(LineReadHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ErrorLineRead(LineReadHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ErrorLineRead(LineReadHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Exited(ExitProcessHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Exited(ExitProcessHandler value);
    public sealed virtual int get_ProcessId();
    public IntPtr get_Handle();
    public sealed virtual string get_ProcessName();
    public sealed virtual string get_ProcessArgs();
    public sealed virtual int get_ExitCode();
    public string get_Output();
    public sealed virtual bool get_IsRunning();
    public bool get_HasExited();
    public Nullable`1<DateTime> get_StartTime();
    public Nullable`1<DateTime> get_ExitTime();
    public sealed virtual void Start();
    private void OnOutputDataReceived(string data);
    private void OnErrorDataReceived(string data);
    public sealed virtual bool WaitForExit(Nullable`1<TimeSpan> timeSpan);
    public sealed virtual void Kill();
    public sealed virtual void Dispose();
    private ProcessStartInfo PrepareStartInfo(JetProcessStartInfo startInfo, JetProcessStartInfoPatch patch);
    private void OnExit(object sender, EventArgs eventArgs);
    private void TryWaitForOutput();
    private bool HasRunningChildProcesses();
    [NotNullAttribute]
public static IPreparedProcess FromExistingProcess(int pid, ProcessStartInfo startInfo, ILogger logger);
    [CompilerGeneratedAttribute]
private bool <TryWaitForOutput>g__AllOutputRead|52_0(int millisecondsTimeout);
    [CompilerGeneratedAttribute]
private bool <HasRunningChildProcesses>b__53_0(ProcessInfo p);
}
internal class JetBrains.ReSharper.UnitTestFramework.Common.Processes.PreparedProcessFromRunningProcess : object {
    [CompilerGeneratedAttribute]
private ExitProcessHandler Exited;
    [CompilerGeneratedAttribute]
private LineReadHandler OutputLineRead;
    [CompilerGeneratedAttribute]
private LineReadHandler ErrorLineRead;
    [CanBeNullAttribute]
private ProcessStartInfo myStartInfo;
    [CanBeNullAttribute]
private ILogger myLogger;
    [CanBeNullAttribute]
private Process myProcess;
    [CanBeNullAttribute]
private Thread myWaitThread;
    [CompilerGeneratedAttribute]
private int <ProcessId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ExitCode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRunning>k__BackingField;
    public int ProcessId { get; }
    public int ExitCode { get; private set; }
    public IntPtr Handle { get; }
    public bool IsRunning { get; private set; }
    public Nullable`1<DateTime> StartTime { get; }
    public Nullable`1<DateTime> ExitTime { get; }
    public string ProcessName { get; }
    public string ProcessArgs { get; }
    public string Output { get; }
    public PreparedProcessFromRunningProcess(int processId, ProcessStartInfo startInfo, ILogger logger);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Exited(ExitProcessHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Exited(ExitProcessHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_OutputLineRead(LineReadHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_OutputLineRead(LineReadHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ErrorLineRead(LineReadHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ErrorLineRead(LineReadHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_ProcessId();
    [CompilerGeneratedAttribute]
public sealed virtual int get_ExitCode();
    [CompilerGeneratedAttribute]
private void set_ExitCode(int value);
    public IntPtr get_Handle();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsRunning();
    [CompilerGeneratedAttribute]
private void set_IsRunning(bool value);
    public Nullable`1<DateTime> get_StartTime();
    public Nullable`1<DateTime> get_ExitTime();
    public sealed virtual string get_ProcessName();
    public sealed virtual string get_ProcessArgs();
    public string get_Output();
    public sealed virtual void Start();
    private void WaitForExitAndSignal();
    public sealed virtual bool WaitForExit(Nullable`1<TimeSpan> timeout);
    public sealed virtual void Kill();
    public sealed virtual void Dispose();
}
internal class JetBrains.ReSharper.UnitTestFramework.Common.Processes.PreparedProcessWrapper : object {
    [CompilerGeneratedAttribute]
private ExitProcessHandler Exited;
    [CompilerGeneratedAttribute]
private LineReadHandler OutputLineRead;
    [CompilerGeneratedAttribute]
private LineReadHandler ErrorLineRead;
    private ProcessStartInfo myStartInfo;
    private ILogger myLogger;
    private Void* myProcessHandle;
    private Thread myWaitThread;
    [CompilerGeneratedAttribute]
private int <ProcessId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRunning>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <StartTime>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <ExitTime>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ExitCode>k__BackingField;
    public int ProcessId { get; }
    public bool IsRunning { get; private set; }
    public Nullable`1<DateTime> StartTime { get; }
    public Nullable`1<DateTime> ExitTime { get; private set; }
    public int ExitCode { get; private set; }
    public IntPtr Handle { get; }
    public string ProcessName { get; }
    public string ProcessArgs { get; }
    public string Output { get; }
    public PreparedProcessWrapper(int processId, ProcessStartInfo startInfo, ILogger logger);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Exited(ExitProcessHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Exited(ExitProcessHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_OutputLineRead(LineReadHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_OutputLineRead(LineReadHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ErrorLineRead(LineReadHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ErrorLineRead(LineReadHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_ProcessId();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsRunning();
    [CompilerGeneratedAttribute]
private void set_IsRunning(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_StartTime();
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_ExitTime();
    [CompilerGeneratedAttribute]
private void set_ExitTime(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_ExitCode();
    [CompilerGeneratedAttribute]
private void set_ExitCode(int value);
    public IntPtr get_Handle();
    public sealed virtual string get_ProcessName();
    public sealed virtual string get_ProcessArgs();
    public string get_Output();
    public sealed virtual void Dispose();
    public sealed virtual void Start();
    private void WaitForExitAndSignal();
    public sealed virtual bool WaitForExit(Nullable`1<TimeSpan> timeout);
    public sealed virtual void Kill();
}
public class JetBrains.ReSharper.UnitTestFramework.Common.SecondLevelLock : ReaderWriterSlimWrapper {
    public int WaitingReadCount { get; }
    public int WaitingWriteCount { get; }
    public SecondLevelLock(ISync parentReadLock, string name);
    public int get_WaitingReadCount();
    public int get_WaitingWriteCount();
}
public static class JetBrains.ReSharper.UnitTestFramework.Common.Utils.Call : object {
    public static void Generic(Expression`1<Action> expression, Type[] typeArgs);
    public static T Generic(Expression`1<Func`1<T>> expression, Type[] typeArgs);
    private static object Generic(MethodCallExpression methodCall, Type[] typeArgs);
    private static object ExtractParameter(Expression parameter);
}
public static class JetBrains.ReSharper.UnitTestFramework.Common.Utils.CallContext : object {
    [NotNullAttribute]
private static ConcurrentDictionary`2<string, AsyncLocal`1<object>> ourState;
    private static CallContext();
    public static object GetData(string key);
    public static void SetData(string key, object data);
    public static void RemoveData(string key);
}
public static class JetBrains.ReSharper.UnitTestFramework.Common.Utils.UTStrings : object {
    [NotNullAttribute]
private static DataIntern`1<string> ourStrings;
    private static UTStrings();
    public static string Intern(string value);
}
public class JetBrains.ReSharper.UnitTestFramework.Common.Utils.XmlUtils : object {
    private static Char[] ourSpecialXmlChars;
    private static XmlUtils();
    public static void SetOrUpdate(XmlDocument xmlDoc, string xpath, string value);
    public static void SetIfDoesNotExist(XmlDocument xmlDoc, string xpath, string value);
    public static void SetValue(XmlNode node, string value);
    public static XmlNode AddNode(XmlNode parent, string xpath);
    public static bool HasNode(XmlNode node, string xpath);
}
public class JetBrains.ReSharper.UnitTestFramework.Criteria.CategoryCriterion : object {
    [CompilerGeneratedAttribute]
private UnitTestElementCategory <Category>k__BackingField;
    [NotNullAttribute]
public UnitTestElementCategory Category { get; }
    private bool JetBrains.Application.UI.BindableLinq.Dependencies.IDependencyDefinition.AppliesToCollections { get; }
    private bool JetBrains.Application.UI.BindableLinq.Dependencies.IDependencyDefinition.AppliesToSingleElement { get; }
    public CategoryCriterion(UnitTestElementCategory category);
    [CompilerGeneratedAttribute]
public UnitTestElementCategory get_Category();
    public sealed virtual bool Matches(IUnitTestElement element);
    public sealed virtual IUnitTestElementCriterion CreateSnapshot();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public bool Equals(IUnitTestElementCriterion other);
    public bool Equals(CategoryCriterion other);
    public virtual int GetHashCode();
    private sealed virtual override bool JetBrains.Application.UI.BindableLinq.Dependencies.IDependencyDefinition.get_AppliesToCollections();
    private sealed virtual override bool JetBrains.Application.UI.BindableLinq.Dependencies.IDependencyDefinition.get_AppliesToSingleElement();
    private sealed virtual override IDependency JetBrains.Application.UI.BindableLinq.Dependencies.IDependencyDefinition.ConstructForCollection(IBindableView`1<TElement> sourceElements, IPathNavigator pathNavigator);
    private sealed virtual override IDependency JetBrains.Application.UI.BindableLinq.Dependencies.IDependencyDefinition.ConstructForElement(TElement sourceElement, IPathNavigator pathNavigator);
}
public class JetBrains.ReSharper.UnitTestFramework.Criteria.ConjunctiveCriterion : ConjunctiveCriterion`1<IUnitTestElement> {
    private Nullable`1<int> myHashCode;
    [NotNullAttribute]
[ItemNotNullAttribute]
public IReadOnlyCollection`1<IUnitTestElementCriterion> Criteria { get; }
    private ConjunctiveCriterion(IReadOnlyCollection`1<IUnitTestElementCriterion> criteria);
    public IReadOnlyCollection`1<IUnitTestElementCriterion> get_Criteria();
    public sealed virtual IUnitTestElementCriterion CreateSnapshot();
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public bool Equals(IUnitTestElementCriterion other);
    public bool Equals(ConjunctiveCriterion other);
    [NotNullAttribute]
public static IUnitTestElementCriterion From(IReadOnlyCollection`1<IUnitTestElementCriterion> criteria);
}
internal class JetBrains.ReSharper.UnitTestFramework.Criteria.CriterionAppender : object {
    private IUnitTestElementCriterion myCriterion;
    public CriterionAppender(IUnitTestElementCriterion criterion);
    [NotNullAttribute]
public IUnitTestElementCriterion AppendOr(IUnitTestElementCriterion criterion);
    [NotNullAttribute]
public IUnitTestElementCriterion AppendAnd(IUnitTestElementCriterion criterion);
    [NotNullAttribute]
public IUnitTestElementCriterion AppendAndNot(IUnitTestElementCriterion criterion);
}
public class JetBrains.ReSharper.UnitTestFramework.Criteria.DisjunctiveCriterion : DisjunctiveCriterion`1<IUnitTestElement> {
    private Nullable`1<int> myHashCode;
    [NotNullAttribute]
[ItemNotNullAttribute]
public IReadOnlyCollection`1<IUnitTestElementCriterion> Criteria { get; }
    private DisjunctiveCriterion(IReadOnlyCollection`1<IUnitTestElementCriterion> criteria);
    public IReadOnlyCollection`1<IUnitTestElementCriterion> get_Criteria();
    public sealed virtual IUnitTestElementCriterion CreateSnapshot();
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public bool Equals(IUnitTestElementCriterion other);
    public bool Equals(DisjunctiveCriterion other);
    [NotNullAttribute]
public static IUnitTestElementCriterion From(IReadOnlyCollection`1<IUnitTestElementCriterion> criteria);
}
public class JetBrains.ReSharper.UnitTestFramework.Criteria.HasChildrenCriterion : object {
    [NotNullAttribute]
public static HasChildrenCriterion InstanceTyped;
    [NotNullAttribute]
public static IUnitTestElementCriterion Instance;
    private static HasChildrenCriterion();
    public sealed virtual bool Matches(IUnitTestElement entity);
    public sealed virtual IUnitTestElementCriterion CreateSnapshot();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public bool Equals(IUnitTestElementCriterion other);
    public bool Equals(HasChildrenCriterion other);
    public virtual int GetHashCode();
}
public interface JetBrains.ReSharper.UnitTestFramework.Criteria.IUnitTestElementCriterion {
    [NotNullAttribute]
public abstract virtual IUnitTestElementCriterion CreateSnapshot();
}
public class JetBrains.ReSharper.UnitTestFramework.Criteria.NamespaceCriterion : object {
    [CompilerGeneratedAttribute]
private UnitTestElementNamespace <Namespace>k__BackingField;
    [NotNullAttribute]
public UnitTestElementNamespace Namespace { get; }
    public NamespaceCriterion(UnitTestElementNamespace namespace);
    [CompilerGeneratedAttribute]
public UnitTestElementNamespace get_Namespace();
    public sealed virtual bool Matches(IUnitTestElement element);
    public sealed virtual IUnitTestElementCriterion CreateSnapshot();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public bool Equals(IUnitTestElementCriterion other);
    public bool Equals(NamespaceCriterion other);
    public virtual int GetHashCode();
}
public class JetBrains.ReSharper.UnitTestFramework.Criteria.NegativeCriterion : NotCriterion`1<IUnitTestElement> {
    [NotNullAttribute]
public IUnitTestElementCriterion Inner { get; }
    private NegativeCriterion(IUnitTestElementCriterion inner);
    public IUnitTestElementCriterion get_Inner();
    public sealed virtual IUnitTestElementCriterion CreateSnapshot();
    public virtual string ToString();
    [NotNullAttribute]
public static IUnitTestElementCriterion From(IUnitTestElementCriterion inner);
    public virtual bool Equals(object obj);
    public bool Equals(IUnitTestElementCriterion other);
    public bool Equals(NegativeCriterion other);
    public virtual int GetHashCode();
}
public class JetBrains.ReSharper.UnitTestFramework.Criteria.NotCacheableCriterion : object {
    [CompilerGeneratedAttribute]
private IUnitTestElementCriterion <Inner>k__BackingField;
    [NotNullAttribute]
public IUnitTestElementCriterion Inner { get; }
    public NotCacheableCriterion(IUnitTestElementCriterion criterion);
    [CompilerGeneratedAttribute]
public IUnitTestElementCriterion get_Inner();
    public sealed virtual bool Matches(IUnitTestElement entity);
    public sealed virtual IUnitTestElementCriterion CreateSnapshot();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public bool Equals(IUnitTestElementCriterion other);
    public bool Equals(NotCacheableCriterion other);
    public virtual int GetHashCode();
}
public class JetBrains.ReSharper.UnitTestFramework.Criteria.NothingCriterion : object {
    [NotNullAttribute]
public static NothingCriterion InstanceTyped;
    [NotNullAttribute]
public static IUnitTestElementCriterion Instance;
    private static NothingCriterion();
    public sealed virtual bool Matches(IUnitTestElement element);
    public sealed virtual IUnitTestElementCriterion CreateSnapshot();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public bool Equals(IUnitTestElementCriterion other);
    public bool Equals(NothingCriterion other);
    public virtual int GetHashCode();
}
internal class JetBrains.ReSharper.UnitTestFramework.Criteria.PossibleCrossMatchChecker : object {
    [NotNullAttribute]
private IUnitTestElementCriterion myTestedCriterion;
    public PossibleCrossMatchChecker(IUnitTestElementCriterion testedCriterion);
    public bool DoesNotMatchElementsMatchedBy(IUnitTestElementCriterion criterion);
    private bool Visit(IUnitTestElementCriterion criterion);
    private bool VisitCategory(CategoryCriterion criterion);
    private bool VisitConjunctive(ConjunctiveCriterion criterion);
    private bool VisitDisjunctive(DisjunctiveCriterion criterion);
    private bool VisitNamespace(NamespaceCriterion criterion);
    private bool VisitNegative(NegativeCriterion criterion);
    private bool VisitNothing(NothingCriterion criterion);
    private bool VisitProject(ProjectCriterion criterion);
    private bool VisitProjectFile(ProjectFileCriterion criterion);
    private bool VisitProjectFolder(ProjectFolderCriterion criterion);
    private bool VisitSolution(SolutionCriterion criterion);
    private bool VisitTargetFramework(TargetFrameworkIdCriterion criterion);
}
public class JetBrains.ReSharper.UnitTestFramework.Criteria.ProjectCriterion : object {
    [CompilerGeneratedAttribute]
private string <Presentation>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <Location>k__BackingField;
    [NotNullAttribute]
public string Presentation { get; }
    [NotNullAttribute]
public FileSystemPath Location { get; }
    public ProjectCriterion(IProject project);
    public ProjectCriterion(string projectPresentation, FileSystemPath projectLocation);
    [CompilerGeneratedAttribute]
public string get_Presentation();
    [CompilerGeneratedAttribute]
public FileSystemPath get_Location();
    public sealed virtual bool Matches(IUnitTestElement element);
    public sealed virtual IUnitTestElementCriterion CreateSnapshot();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public bool Equals(IUnitTestElementCriterion other);
    public bool Equals(ProjectCriterion other);
    public virtual int GetHashCode();
}
public class JetBrains.ReSharper.UnitTestFramework.Criteria.ProjectFileCriterion : object {
    [CompilerGeneratedAttribute]
private string <PersistentId>k__BackingField;
    [NotNullAttribute]
public string PersistentId { get; }
    public ProjectFileCriterion(IProjectFile projectFile);
    internal ProjectFileCriterion(string filePersistentId);
    [CompilerGeneratedAttribute]
public string get_PersistentId();
    public sealed virtual bool Matches(IUnitTestElement element);
    public sealed virtual IUnitTestElementCriterion CreateSnapshot();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public bool Equals(IUnitTestElementCriterion other);
    public bool Equals(ProjectFileCriterion other);
    public virtual int GetHashCode();
}
public class JetBrains.ReSharper.UnitTestFramework.Criteria.ProjectFolderCriterion : object {
    [CompilerGeneratedAttribute]
private string <PersistentId>k__BackingField;
    [NotNullAttribute]
public string PersistentId { get; }
    public ProjectFolderCriterion(IProjectFolder folder);
    internal ProjectFolderCriterion(string folderPersistentId);
    [CompilerGeneratedAttribute]
public string get_PersistentId();
    public sealed virtual bool Matches(IUnitTestElement element);
    public sealed virtual IUnitTestElementCriterion CreateSnapshot();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public bool Equals(IUnitTestElementCriterion other);
    public bool Equals(ProjectFolderCriterion other);
    public virtual int GetHashCode();
}
public class JetBrains.ReSharper.UnitTestFramework.Criteria.ProjectIdCriterion : object {
    [CompilerGeneratedAttribute]
private string <PersistentId>k__BackingField;
    [NotNullAttribute]
public string PersistentId { get; }
    public ProjectIdCriterion(IProject project);
    public ProjectIdCriterion(string persistentId);
    [CompilerGeneratedAttribute]
public string get_PersistentId();
    public sealed virtual bool Matches(IUnitTestElement element);
    public sealed virtual IUnitTestElementCriterion CreateSnapshot();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public bool Equals(IUnitTestElementCriterion other);
    public bool Equals(ProjectIdCriterion other);
    public virtual int GetHashCode();
}
[LocalizableAttribute("False")]
public class JetBrains.ReSharper.UnitTestFramework.Criteria.ShortNameCriterion : object {
    [CompilerGeneratedAttribute]
private string <ShortName>k__BackingField;
    [NotNullAttribute]
public string ShortName { get; }
    public ShortNameCriterion(string shortName);
    [CompilerGeneratedAttribute]
public string get_ShortName();
    public sealed virtual bool Matches(IUnitTestElement entity);
    public sealed virtual IUnitTestElementCriterion CreateSnapshot();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public bool Equals(IUnitTestElementCriterion other);
    public bool Equals(ShortNameCriterion other);
    public virtual int GetHashCode();
}
public class JetBrains.ReSharper.UnitTestFramework.Criteria.SolutionCriterion : object {
    [NotNullAttribute]
public static SolutionCriterion InstanceTyped;
    [NotNullAttribute]
public static IUnitTestElementCriterion Instance;
    private static SolutionCriterion();
    public sealed virtual bool Matches(IUnitTestElement element);
    public sealed virtual IUnitTestElementCriterion CreateSnapshot();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public bool Equals(IUnitTestElementCriterion other);
    public bool Equals(SolutionCriterion other);
    public virtual int GetHashCode();
}
public class JetBrains.ReSharper.UnitTestFramework.Criteria.TargetFrameworkIdCriterion : object {
    [CompilerGeneratedAttribute]
private TargetFrameworkId <TargetFrameworkId>k__BackingField;
    [NotNullAttribute]
public TargetFrameworkId TargetFrameworkId { get; }
    public TargetFrameworkIdCriterion(string tf);
    public TargetFrameworkIdCriterion(TargetFrameworkId targetFrameworkId);
    [CompilerGeneratedAttribute]
public TargetFrameworkId get_TargetFrameworkId();
    public sealed virtual bool Matches(IUnitTestElement element);
    public sealed virtual IUnitTestElementCriterion CreateSnapshot();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public bool Equals(IUnitTestElementCriterion other);
    public bool Equals(TargetFrameworkIdCriterion other);
    public virtual int GetHashCode();
}
public class JetBrains.ReSharper.UnitTestFramework.Criteria.TestAncestorCriterion : object {
    [CompilerGeneratedAttribute]
private ISet`1<UnitTestElementId> <AncestorIds>k__BackingField;
    private Nullable`1<int> myHashCode;
    [NotNullAttribute]
[ItemNotNullAttribute]
public ISet`1<UnitTestElementId> AncestorIds { get; }
    public TestAncestorCriterion(UnitTestElementId[] ancestorIds);
    public TestAncestorCriterion(IEnumerable`1<UnitTestElementId> ancestorIds);
    public TestAncestorCriterion(IUnitTestElement[] ancestors);
    public TestAncestorCriterion(IEnumerable`1<IUnitTestElement> ancestors);
    public TestAncestorCriterion(ISet`1<UnitTestElementId> ancestorIds);
    [CompilerGeneratedAttribute]
public ISet`1<UnitTestElementId> get_AncestorIds();
    public sealed virtual bool Matches(IUnitTestElement element);
    public sealed virtual IUnitTestElementCriterion CreateSnapshot();
    public virtual string ToString();
    [NotNullAttribute]
public static IUnitTestElementCriterion From(IReadOnlyCollection`1<IUnitTestElement> elements);
    [NotNullAttribute]
public static IUnitTestElementCriterion From(Int32`1[] ids);
    [NotNullAttribute]
public static IUnitTestElementCriterion From(IEnumerable`1<Int32`1<IUnitTestElement>> ids);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public bool Equals(IUnitTestElementCriterion other);
    public bool Equals(TestAncestorCriterion other);
}
public class JetBrains.ReSharper.UnitTestFramework.Criteria.TestDurationCriterion : object {
    [NotNullAttribute]
private Node myNode;
    public TestDurationCriterion(Node node);
    public sealed virtual bool Matches(IUnitTestElement entity);
    private IReadOnlySet`1<Int32`1<IUnitTestElement>> GetResultSet();
    public sealed virtual IUnitTestElementCriterion CreateSnapshot();
}
public class JetBrains.ReSharper.UnitTestFramework.Criteria.TestElementCriterion : object {
    [CompilerGeneratedAttribute]
private ISet`1<UnitTestElementId> <ElementIds>k__BackingField;
    private Nullable`1<int> myHashCode;
    [NotNullAttribute]
[ItemNotNullAttribute]
public ISet`1<UnitTestElementId> ElementIds { get; }
    public TestElementCriterion(UnitTestElementId[] elementIds);
    public TestElementCriterion(IEnumerable`1<UnitTestElementId> elementIds);
    public TestElementCriterion(IUnitTestElement[] elements);
    public TestElementCriterion(IEnumerable`1<IUnitTestElement> elements);
    public TestElementCriterion(ISet`1<UnitTestElementId> elementIds);
    [CompilerGeneratedAttribute]
public ISet`1<UnitTestElementId> get_ElementIds();
    public sealed virtual bool Matches(IUnitTestElement element);
    public sealed virtual IUnitTestElementCriterion CreateSnapshot();
    public virtual string ToString();
    [NotNullAttribute]
public static IUnitTestElementCriterion From(IReadOnlyCollection`1<IUnitTestElement> elements);
    [NotNullAttribute]
public static IUnitTestElementCriterion From(Int32`1[] ids);
    [NotNullAttribute]
public static IUnitTestElementCriterion From(IEnumerable`1<Int32`1<IUnitTestElement>> ids);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public bool Equals(IUnitTestElementCriterion other);
    public bool Equals(TestElementCriterion other);
}
public class JetBrains.ReSharper.UnitTestFramework.Criteria.TestElementInternalIdCriterion : object {
    [CompilerGeneratedAttribute]
private IReadOnlySet`1<Int32`1<IUnitTestElement>> <Ids>k__BackingField;
    private Nullable`1<int> myHashCode;
    [NotNullAttribute]
public IReadOnlySet`1<Int32`1<IUnitTestElement>> Ids { get; }
    public TestElementInternalIdCriterion(Int32`1[] ids);
    public TestElementInternalIdCriterion(IReadOnlySet`1<Int32`1<IUnitTestElement>> ids);
    [CompilerGeneratedAttribute]
public IReadOnlySet`1<Int32`1<IUnitTestElement>> get_Ids();
    public sealed virtual bool Matches(IUnitTestElement element);
    public sealed virtual IUnitTestElementCriterion CreateSnapshot();
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public bool Equals(IUnitTestElementCriterion other);
    public bool Equals(TestElementInternalIdCriterion other);
}
public class JetBrains.ReSharper.UnitTestFramework.Criteria.TestElementTypeCriterion : object {
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [NotNullAttribute]
public Type Type { get; }
    public TestElementTypeCriterion(Type type);
    [CompilerGeneratedAttribute]
public Type get_Type();
    public sealed virtual bool Matches(IUnitTestElement entity);
    public sealed virtual IUnitTestElementCriterion CreateSnapshot();
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public bool Equals(IUnitTestElementCriterion other);
    public bool Equals(TestElementTypeCriterion other);
}
public class JetBrains.ReSharper.UnitTestFramework.Criteria.TestIdCriterion : object {
    [CompilerGeneratedAttribute]
private string <TestId>k__BackingField;
    [NotNullAttribute]
public string TestId { get; }
    public TestIdCriterion(string testId);
    [CompilerGeneratedAttribute]
public string get_TestId();
    public sealed virtual bool Matches(IUnitTestElement element);
    public sealed virtual IUnitTestElementCriterion CreateSnapshot();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public bool Equals(IUnitTestElementCriterion other);
    public bool Equals(TestIdCriterion other);
    public virtual int GetHashCode();
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.UnitTestFramework.Criteria.UnitTestElementCriterionExtensions : object {
    [ExtensionAttribute]
public static bool CannotMatchElementsMatchedBy(IUnitTestElementCriterion left, IUnitTestElementCriterion right);
    [ExtensionAttribute]
[NotNullAttribute]
public static IUnitTestElementCriterion Reduce(IUnitTestElementCriterion value);
    [ExtensionAttribute]
[NotNullAttribute]
public static IUnitTestElementCriterion Or(IUnitTestElementCriterion left, IUnitTestElementCriterion right);
    [CanBeNullAttribute]
private static IUnitTestElementCriterion JoinByOr(IUnitTestElementCriterion left, IUnitTestElementCriterion right);
    [ExtensionAttribute]
[NotNullAttribute]
public static IUnitTestElementCriterion And(IUnitTestElementCriterion left, IUnitTestElementCriterion right);
    [CanBeNullAttribute]
private static IUnitTestElementCriterion JoinByAnd(IUnitTestElementCriterion left, IUnitTestElementCriterion right);
    [ExtensionAttribute]
[NotNullAttribute]
[ItemNotNullAttribute]
private static IEnumerable`1<IUnitTestElementCriterion> Replace(IEnumerable`1<IUnitTestElementCriterion> criteria, T criterionToReplace, Func`2<T, IUnitTestElementCriterion> replaceWithFactory);
    [ExtensionAttribute]
[NotNullAttribute]
public static IUnitTestElementCriterion AndNot(IUnitTestElementCriterion left, IUnitTestElementCriterion right);
    [ExtensionAttribute]
public static bool HasMatchingElements(IUnitTestElementCriterion criterion);
    [ExtensionAttribute]
[NotNullAttribute]
public static IQueryResult Evaluate(IUnitTestElementCriterion criterion);
    [ExtensionAttribute]
[NotNullAttribute]
public static IQueryResult EvaluateNoCache(IUnitTestElementCriterion criterion);
    [ExtensionAttribute]
[NotNullAttribute]
public static string SuggestName(IUnitTestElementCriterion criterion);
}
public class JetBrains.ReSharper.UnitTestFramework.Criteria.UnitTestProviderCriterion : object {
    [CompilerGeneratedAttribute]
private string <ProviderId>k__BackingField;
    [NotNullAttribute]
public string ProviderId { get; }
    public UnitTestProviderCriterion(IUnitTestProvider provider);
    internal UnitTestProviderCriterion(string providerId);
    [CompilerGeneratedAttribute]
public string get_ProviderId();
    public sealed virtual bool Matches(IUnitTestElement element);
    public sealed virtual IUnitTestElementCriterion CreateSnapshot();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public bool Equals(IUnitTestElementCriterion other);
    public bool Equals(UnitTestProviderCriterion other);
    public virtual int GetHashCode();
}
public abstract class JetBrains.ReSharper.UnitTestFramework.Elements.ClrUnitTestElement : UnitTestElement {
    protected ClrUnitTestElement(string testId, string salt);
    public virtual IEnumerable`1<UnitTestElementLocation> GetLocations();
}
internal class JetBrains.ReSharper.UnitTestFramework.Elements.ClrUnitTestElementMethodDeclaringTypeCoalescer : object {
    public sealed virtual UnitTestElementChanges Merge(IUnitTestElement target, IUnitTestElement original, IUnitTestElementSource source);
}
[AttributeUsageAttribute("128")]
public class JetBrains.ReSharper.UnitTestFramework.Elements.CoalescePropertyAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <MergerType>k__BackingField;
    [NotNullAttribute]
public Type MergerType { get; }
    public CoalescePropertyAttribute(Type mergerType);
    [CompilerGeneratedAttribute]
public Type get_MergerType();
}
public abstract class JetBrains.ReSharper.UnitTestFramework.Elements.FakeUnitTestElement : object {
    [CompilerGeneratedAttribute]
private IProject <Project>k__BackingField;
    [CompilerGeneratedAttribute]
private TargetFrameworkId <TargetFrameworkId>k__BackingField;
    [CompilerGeneratedAttribute]
private IUnitTestProvider <Provider>k__BackingField;
    public IProject Project { get; }
    public TargetFrameworkId TargetFrameworkId { get; }
    public IUnitTestProvider Provider { get; }
    [CompilerGeneratedAttribute]
public IProject get_Project();
    [CompilerGeneratedAttribute]
public TargetFrameworkId get_TargetFrameworkId();
    [CompilerGeneratedAttribute]
public IUnitTestProvider get_Provider();
    public abstract virtual IReadOnlyCollection`1<IUnitTestElement> GetRelatedUnitTestElements();
}
public interface JetBrains.ReSharper.UnitTestFramework.Elements.IFakeUnitTestElement {
}
public interface JetBrains.ReSharper.UnitTestFramework.Elements.IRemoveWithChildren {
}
public interface JetBrains.ReSharper.UnitTestFramework.Elements.IRemoveWithParent {
}
public interface JetBrains.ReSharper.UnitTestFramework.Elements.ITestCase {
    public bool IsNotRunnableStandalone { get; }
    public abstract virtual bool get_IsNotRunnableStandalone();
}
[CannotApplyEqualityOperatorAttribute]
public interface JetBrains.ReSharper.UnitTestFramework.Elements.IUnitTestElement {
    [NotNullAttribute]
public UnitTestElementId NaturalId { get; }
    [NotNullAttribute]
public IProject Project { get; }
    [NotNullAttribute]
public TargetFrameworkId TargetFrameworkId { get; }
    [NotNullAttribute]
public IUnitTestProvider Provider { get; }
    public string Kind { get; }
    [CanBeNullAttribute]
[ItemNotNullAttribute]
public IJetSet`1<UnitTestElementCategory> OwnCategories { get; public set; }
    [CanBeNullAttribute]
public IUnitTestElement Parent { get; public set; }
    [NotNullAttribute]
public IJetSet`1<IUnitTestElement> Children { get; }
    public string ShortName { get; }
    public UnitTestElementOrigin Origin { get; public set; }
    public abstract virtual UnitTestElementId get_NaturalId();
    public abstract virtual IProject get_Project();
    public abstract virtual TargetFrameworkId get_TargetFrameworkId();
    public abstract virtual IUnitTestProvider get_Provider();
    [NotNullAttribute]
public abstract virtual string GetPresentation();
    public abstract virtual UnitTestElementNamespace GetNamespace();
    [NotNullAttribute]
public abstract virtual IEnumerable`1<UnitTestElementLocation> GetLocations();
    [CanBeNullAttribute]
[ItemCanBeNullAttribute]
public abstract virtual IEnumerable`1<IProjectFile> GetProjectFiles();
    [CanBeNullAttribute]
public abstract virtual IDeclaredElement GetDeclaredElement();
    public abstract virtual string get_Kind();
    public abstract virtual IJetSet`1<UnitTestElementCategory> get_OwnCategories();
    public abstract virtual void set_OwnCategories(IJetSet`1<UnitTestElementCategory> value);
    public abstract virtual IUnitTestElement get_Parent();
    public abstract virtual void set_Parent(IUnitTestElement value);
    public abstract virtual IJetSet`1<IUnitTestElement> get_Children();
    public abstract virtual string get_ShortName();
    public abstract virtual UnitTestElementOrigin get_Origin();
    public abstract virtual void set_Origin(UnitTestElementOrigin value);
}
[PublicAPIAttribute]
public interface JetBrains.ReSharper.UnitTestFramework.Elements.IUnitTestElementPropertyCoalescer {
    public abstract virtual UnitTestElementChanges Merge(IUnitTestElement target, IUnitTestElement original, IUnitTestElementSource source);
}
public interface JetBrains.ReSharper.UnitTestFramework.Elements.IUnitTestGroupingElement {
}
public interface JetBrains.ReSharper.UnitTestFramework.Elements.IUnitTestLikeElement {
    [NotNullAttribute]
[ItemNotNullAttribute]
public abstract virtual IReadOnlyCollection`1<IUnitTestElement> GetRelatedUnitTestElements();
}
public abstract class JetBrains.ReSharper.UnitTestFramework.Elements.UnitTestElement : object {
    [CanBeNullAttribute]
protected UnitTestElement myParent;
    [CanBeNullAttribute]
private IJetSet`1<IUnitTestElement> myChildren;
    [CanBeNullAttribute]
private IJetSet`1<UnitTestElementCategory> myOwnCategories;
    [CompilerGeneratedAttribute]
private Int32`1<IUnitTestElement> <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private UnitTestElementId <NaturalId>k__BackingField;
    [CompilerGeneratedAttribute]
private UnitTestElementOrigin <Origin>k__BackingField;
    public IProject Project { get; }
    public TargetFrameworkId TargetFrameworkId { get; }
    public IUnitTestProvider Provider { get; }
    public Int32`1<IUnitTestElement> Id { get; public set; }
    public UnitTestElementId NaturalId { get; public set; }
    [CoalescePropertyAttribute("JetBrains.ReSharper.UnitTestFramework.Elements.UnitTestElementOwnCategoriesCoalescer")]
public IJetSet`1<UnitTestElementCategory> OwnCategories { get; public set; }
    [PersistAttribute]
public UnitTestElementOrigin Origin { get; public set; }
    [CanBeNullAttribute]
public UnitTestElement Parent { get; public set; }
    public IJetSet`1<IUnitTestElement> Children { get; protected set; }
    private IUnitTestElement JetBrains.ReSharper.UnitTestFramework.Elements.IUnitTestElement.Parent { get; private set; }
    public string ShortName { get; }
    public string Kind { get; }
    protected UnitTestElement(string testId, string salt);
    public sealed virtual IProject get_Project();
    public sealed virtual TargetFrameworkId get_TargetFrameworkId();
    public sealed virtual IUnitTestProvider get_Provider();
    [CompilerGeneratedAttribute]
public sealed virtual Int32`1<IUnitTestElement> get_Id();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Id(Int32`1<IUnitTestElement> value);
    [CompilerGeneratedAttribute]
public virtual UnitTestElementId get_NaturalId();
    [CompilerGeneratedAttribute]
public virtual void set_NaturalId(UnitTestElementId value);
    public virtual IJetSet`1<UnitTestElementCategory> get_OwnCategories();
    public virtual void set_OwnCategories(IJetSet`1<UnitTestElementCategory> value);
    [CompilerGeneratedAttribute]
public sealed virtual UnitTestElementOrigin get_Origin();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Origin(UnitTestElementOrigin value);
    public virtual UnitTestElement get_Parent();
    public virtual void set_Parent(UnitTestElement value);
    public virtual IJetSet`1<IUnitTestElement> get_Children();
    protected virtual void set_Children(IJetSet`1<IUnitTestElement> value);
    private sealed virtual override IUnitTestElement JetBrains.ReSharper.UnitTestFramework.Elements.IUnitTestElement.get_Parent();
    private sealed virtual override void JetBrains.ReSharper.UnitTestFramework.Elements.IUnitTestElement.set_Parent(IUnitTestElement value);
    public abstract virtual string get_ShortName();
    public abstract virtual string get_Kind();
    public virtual string GetPresentation();
    public abstract virtual IReadOnlyCollection`1<IUnitTestElement> GetRelatedUnitTestElements();
    public abstract virtual UnitTestElementNamespace GetNamespace();
    public abstract virtual IEnumerable`1<UnitTestElementLocation> GetLocations();
    public abstract virtual IEnumerable`1<IProjectFile> GetProjectFiles();
    public abstract virtual IDeclaredElement GetDeclaredElement();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    internal UnitTestElement Clone();
}
public class JetBrains.ReSharper.UnitTestFramework.Elements.UnitTestElementCategory : object {
    public static string UncategorizedString;
    public static UnitTestElementCategory Uncategorized;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private UnitTestElementOrigin <Origin>k__BackingField;
    [NotNullAttribute]
public string Name { get; }
    public UnitTestElementOrigin Origin { get; public set; }
    public UnitTestElementCategory(string name);
    public UnitTestElementCategory(string name, UnitTestElementOrigin origin);
    private static UnitTestElementCategory();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public UnitTestElementOrigin get_Origin();
    [CompilerGeneratedAttribute]
public void set_Origin(UnitTestElementOrigin value);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public bool Equals(UnitTestElementCategory other);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.UnitTestFramework.Elements.UnitTestElementExtensions : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static IUnitTestRunStrategy GetRunStrategy(IUnitTestElement element, IHostProvider hostProvider);
    [ExtensionAttribute]
public static bool IsOfKind(IUnitTestElement element, UnitTestElementKind kind);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Elements.UnitTestElementExtensions/<Categories>d__2")]
[ExtensionAttribute]
[NotNullAttribute]
public static IEnumerable`1<UnitTestElementCategory> Categories(IUnitTestElement element);
    [ExtensionAttribute]
public static bool IsDynamic(IUnitTestElement element);
    [ExtensionAttribute]
[NotNullAttribute]
internal static string Ident(IUnitTestElement element);
    [ExtensionAttribute]
[NotNullAttribute]
public static T InternAndCast(JetHashSet`1<IUnitTestElement> set, T element);
    [ExtensionAttribute]
public static Int32`1<IUnitTestElement> GetParentId(Int32`1<IUnitTestElement> id);
    [ExtensionAttribute]
public static int GetChildrenCount(Int32`1<IUnitTestElement> id);
}
[DebuggerDisplayAttribute("UnitTestElementId({TestId})")]
public class JetBrains.ReSharper.UnitTestFramework.Elements.UnitTestElementId : object {
    public static char Delimiter;
    private string myProjectId;
    private string myTargetFrameworkId;
    private string myProviderId;
    [CompilerGeneratedAttribute]
private string <TestId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Salt>k__BackingField;
    [DataMemberAttribute]
public string ProjectId { get; public set; }
    [DataMemberAttribute]
public string TargetFrameworkId { get; public set; }
    [DataMemberAttribute]
public string ProviderId { get; public set; }
    [DataMemberAttribute]
public string TestId { get; }
    [DataMemberAttribute]
public string Salt { get; }
    public UnitTestElementId(string projectId, string targetFrameworkId, string providerId, string testId, string salt);
    public string get_ProjectId();
    public void set_ProjectId(string value);
    public string get_TargetFrameworkId();
    public void set_TargetFrameworkId(string value);
    public string get_ProviderId();
    public void set_ProviderId(string value);
    [CompilerGeneratedAttribute]
public string get_TestId();
    [CompilerGeneratedAttribute]
public string get_Salt();
    public sealed virtual bool Equals(UnitTestElementId other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public enum JetBrains.ReSharper.UnitTestFramework.Elements.UnitTestElementKind : Enum {
    public int value__;
    public static UnitTestElementKind Unknown;
    public static UnitTestElementKind Test;
    public static UnitTestElementKind TestContainer;
    public static UnitTestElementKind TestStuff;
}
public class JetBrains.ReSharper.UnitTestFramework.Elements.UnitTestElementLocation : object {
    [CompilerGeneratedAttribute]
private IProjectFile <ProjectFile>k__BackingField;
    [CompilerGeneratedAttribute]
private TextRange <NavigationRange>k__BackingField;
    [CompilerGeneratedAttribute]
private TextRange <ContainingRange>k__BackingField;
    public IProjectFile ProjectFile { get; }
    public TextRange NavigationRange { get; }
    public TextRange ContainingRange { get; }
    public UnitTestElementLocation(IProjectFile projectFile, TextRange navigationRange, TextRange containingRange);
    [CompilerGeneratedAttribute]
public IProjectFile get_ProjectFile();
    [CompilerGeneratedAttribute]
public TextRange get_NavigationRange();
    [CompilerGeneratedAttribute]
public TextRange get_ContainingRange();
}
public class JetBrains.ReSharper.UnitTestFramework.Elements.UnitTestElementNamespace : object {
    [NotNullAttribute]
public static UnitTestElementNamespace Global;
    [NotNullAttribute]
private static Dictionary`2<string, UnitTestElementNamespace> ourTable;
    [CanBeNullAttribute]
private string myQualifiedName;
    [CompilerGeneratedAttribute]
private UnitTestElementNamespace <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CanBeNullAttribute]
public UnitTestElementNamespace Parent { get; }
    [NotNullAttribute]
public string Name { get; }
    public string QualifiedName { get; }
    private UnitTestElementNamespace(string lastPart, UnitTestElementNamespace parent);
    private static UnitTestElementNamespace();
    [CompilerGeneratedAttribute]
public UnitTestElementNamespace get_Parent();
    [CompilerGeneratedAttribute]
public string get_Name();
    public string get_QualifiedName();
    private string GetQualifiedName();
    public virtual string ToString();
    [NotNullAttribute]
public static string op_Subtraction(UnitTestElementNamespace child, UnitTestElementNamespace parent);
    public static UnitTestElementNamespace Create(string ns, char delimiter);
    private static UnitTestElementNamespace CreateCore(string key, char delimiter);
}
[FlagsAttribute]
public enum JetBrains.ReSharper.UnitTestFramework.Elements.UnitTestElementOrigin : Enum {
    public int value__;
    public static UnitTestElementOrigin Source;
    public static UnitTestElementOrigin Artifact;
    public static UnitTestElementOrigin Runner;
    public static UnitTestElementOrigin Dynamic;
}
internal class JetBrains.ReSharper.UnitTestFramework.Elements.UnitTestElementOwnCategoriesCoalescer : object {
    public sealed virtual UnitTestElementChanges Merge(IUnitTestElement target, IUnitTestElement original, IUnitTestElementSource source);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.UnitTestFramework.Elements.UnitTestNamespaceExtensions : object {
    [ExtensionAttribute]
public static bool IsParentOf(UnitTestElementNamespace parentNs, UnitTestElementNamespace childNs);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Elements.UnitTestNamespaceExtensions/<WithAncestors>d__1")]
[ExtensionAttribute]
[NotNullAttribute]
public static IEnumerable`1<UnitTestElementNamespace> WithAncestors(UnitTestElementNamespace ns, UnitTestElementNamespace upTo);
    [ExtensionAttribute]
public static String[] Parts(UnitTestElementNamespace ns);
}
public class JetBrains.ReSharper.UnitTestFramework.Execution.AggregatedTestStatus : ValueType {
    private static UnitTestStatus[] ourAtomicStatusByIndex;
    private static Int32[] ourAtomicStatusValueToIndex;
    public Int32[] Data;
    private static AggregatedTestStatus();
    public AggregatedTestStatus(Int32[] data);
    public UnitTestStatus AggregateResult();
    public void Add(UnitTestStatusTuple status, int childrenCount);
    public void Remove(UnitTestStatusTuple status, int childrenCount);
    public void Replace(UnitTestStatusTuple oldStatus, UnitTestStatusTuple newStatus, int childrenCount);
    public void Add(UnitTestStatus status, int childrenCount);
    public void Remove(UnitTestStatus status, int childrenCount);
    public void Replace(UnitTestStatus oldStatus, UnitTestStatus newStatus, int childrenCount);
    public void CheckChildrenCount(int childrenCount);
    public string DumpState();
}
public class JetBrains.ReSharper.UnitTestFramework.Execution.DoNothingRunStrategy : object {
    [NotNullAttribute]
public static DoNothingRunStrategy Instance;
    private static DoNothingRunStrategy();
    public sealed virtual bool RequiresProjectBuild(IProject project);
    public sealed virtual bool RequiresProjectExplorationAfterBuild(IProject project);
    public sealed virtual IProject GetProjectForPropertiesRefreshBeforeLaunch(IUnitTestElement element);
    public sealed virtual IRuntimeDescriptor GetRuntimeDescriptor(IUnitTestLaunch launch, IUnitTestElement element);
    public sealed virtual Task Run(IUnitTestRun run);
    public sealed virtual void Cancel(IUnitTestRun run);
    public sealed virtual void Abort(IUnitTestRun run);
}
public class JetBrains.ReSharper.UnitTestFramework.Execution.Hosting.ClientControllerInfo : object {
    [CompilerGeneratedAttribute]
private string <AssemblyLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ExtraDependencies>k__BackingField;
    public string AssemblyLocation { get; }
    public string TypeName { get; }
    public String[] ExtraDependencies { get; }
    public ClientControllerInfo(string assemblyLocation, string typeName, String[] extraDependencies);
    public ClientControllerInfo(Type controllerType, String[] extraDependencies);
    [CompilerGeneratedAttribute]
public string get_AssemblyLocation();
    [CompilerGeneratedAttribute]
public string get_TypeName();
    [CompilerGeneratedAttribute]
public String[] get_ExtraDependencies();
}
public class JetBrains.ReSharper.UnitTestFramework.Execution.Hosting.DebugHostController : TaskRunnerHostControllerBase {
    [NotNullAttribute]
private IUnitTestDebugHost myDebugHost;
    public string HostId { get; }
    public DebugHostController(IUnitTestLaunch launch, IUnitTestDebugHost debugHost, ILogger logger);
    public virtual string get_HostId();
    protected virtual void CustomizeSettingsFor(IUnitTestLaunch launch, IUnitTestingSettings settings);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Execution.Hosting.DebugHostController/<StartProcess>d__5")]
public virtual Task`1<IPreparedProcess> StartProcess(ProcessStartInfo startInfo, IUnitTestRun run, ILogger logger);
    public virtual Task AttachToProcess(int processId, IUnitTestRun run, ILogger logger);
}
[UnitTestHostProviderAttribute("0")]
public class JetBrains.ReSharper.UnitTestFramework.Execution.Hosting.DebugHostProvider : object {
    [NotNullAttribute]
private IUnitTestDebugHost myDebugHost;
    public string ID { get; }
    public DebugHostProvider(IUnitTestDebugHost debugHost);
    public sealed virtual string get_ID();
    public sealed virtual HostProviderAvailability GetAvailability();
    public sealed virtual HostProviderAvailability GetAvailability(IUnitTestElement element);
    public sealed virtual bool SuppressBuild();
    public virtual ITaskRunnerHostController CreateHostController(IUnitTestLaunch launch);
}
[UnitTestHostProviderDescriptorAttribute("0")]
public class JetBrains.ReSharper.UnitTestFramework.Execution.Hosting.DebugHostProviderDescriptor : object {
    private DebugHostProvider myProvider;
    public IHostProvider Provider { get; }
    public int Priority { get; }
    public IconId Icon { get; }
    public string Format { get; }
    public string ShortText { get; }
    public DebugHostProviderDescriptor(DebugHostProvider provider);
    public sealed virtual IHostProvider get_Provider();
    public sealed virtual int get_Priority();
    public sealed virtual IconId get_Icon();
    public sealed virtual string get_Format();
    public sealed virtual string get_ShortText();
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.UnitTestFramework.Execution.Hosting.DefaultUnitTestDebugHost : object {
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsDebuggerAvailable>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsDebuggerActive>k__BackingField;
    public IProperty`1<bool> IsDebuggerAvailable { get; }
    public IProperty`1<bool> IsDebuggerActive { get; }
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsDebuggerAvailable();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsDebuggerActive();
    public sealed virtual Task`1<ICreateProcessDebugSession> CreateProcess(IUnitTestRun run, ProcessStartInfo startInfo);
    public sealed virtual Task`1<IAttachProcessDebugSession> AttachToProcess(IUnitTestRun run, string remoteMachine, int processId);
}
public enum JetBrains.ReSharper.UnitTestFramework.Execution.Hosting.HostProviderAvailability : Enum {
    public int value__;
    public static HostProviderAvailability Nonexistent;
    public static HostProviderAvailability Busy;
    public static HostProviderAvailability Available;
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.UnitTestFramework.Execution.Hosting.HostProviderExtensions : object {
    [ExtensionAttribute]
public static bool IsAvailable(IHostProvider hostProvider, IUnitTestElement element);
}
public interface JetBrains.ReSharper.UnitTestFramework.Execution.Hosting.IAttachProcessDebugSession {
}
public interface JetBrains.ReSharper.UnitTestFramework.Execution.Hosting.ICreateProcessDebugSession {
    [NotNullAttribute]
public IPreparedProcess Process { get; }
    public abstract virtual IPreparedProcess get_Process();
}
public interface JetBrains.ReSharper.UnitTestFramework.Execution.Hosting.IExternalProcessHost {
    [NotNullAttribute]
public abstract virtual Task`1<IPreparedProcess> StartProcess(ProcessStartInfo startInfo);
    [NotNullAttribute]
public abstract virtual Task AttachToProcess(int processId);
}
public interface JetBrains.ReSharper.UnitTestFramework.Execution.Hosting.IHostProvider {
    public string ID { get; }
    public abstract virtual string get_ID();
    public abstract virtual HostProviderAvailability GetAvailability();
    public abstract virtual HostProviderAvailability GetAvailability(IUnitTestElement element);
    public abstract virtual bool SuppressBuild();
    public abstract virtual ITaskRunnerHostController CreateHostController(IUnitTestLaunch launch);
}
public interface JetBrains.ReSharper.UnitTestFramework.Execution.Hosting.IHostProviderDescriptor {
    public IHostProvider Provider { get; }
    public int Priority { get; }
    public IconId Icon { get; }
    public string Format { get; }
    [CanBeNullAttribute]
public string ShortText { get; }
    public abstract virtual IHostProvider get_Provider();
    public abstract virtual int get_Priority();
    public abstract virtual IconId get_Icon();
    public abstract virtual string get_Format();
    public abstract virtual string get_ShortText();
}
public interface JetBrains.ReSharper.UnitTestFramework.Execution.Hosting.ITaskRunnerHostController {
    [NotNullAttribute]
public string HostId { get; }
    public abstract virtual string get_HostId();
    public abstract virtual void SupplementContainer(ComponentContainer container);
    [NotNullAttribute]
public abstract virtual IEnumerable`1<Type> GetSupplementaryContainerAttributeTypes();
    [NotNullAttribute]
public abstract virtual Task AfterLaunchStarted();
    [NotNullAttribute]
public abstract virtual Task BeforeLaunchFinished();
    [CanBeNullAttribute]
public abstract virtual ClientControllerInfo GetClientControllerInfo(IUnitTestRun run);
    [NotNullAttribute]
public abstract virtual Task PrepareForRun(IUnitTestRun run);
    [NotNullAttribute]
public abstract virtual Task CleanupAfterRun(IUnitTestRun run);
    public abstract virtual void Cancel(IUnitTestRun run);
    public abstract virtual void Abort(IUnitTestRun run);
    [NotNullAttribute]
public abstract virtual Task`1<IPreparedProcess> StartProcess(ProcessStartInfo startInfo, IUnitTestRun run, ILogger logger);
    [NotNullAttribute]
public abstract virtual Task AttachToProcess(int processId, IUnitTestRun run, ILogger logger);
}
public interface JetBrains.ReSharper.UnitTestFramework.Execution.Hosting.ITaskRunnerHostControllerExtension {
    public abstract virtual bool IsApplicable(IUnitTestRun run);
    [CanBeNullAttribute]
public abstract virtual ClientControllerInfo GetClientControllerInfo(IUnitTestRun run, ITaskRunnerHostController next);
    [NotNullAttribute]
public abstract virtual Task PrepareForRun(IUnitTestRun run, ITaskRunnerHostController next);
    [NotNullAttribute]
public abstract virtual Task CleanupAfterRun(IUnitTestRun run, ITaskRunnerHostController next);
    public abstract virtual void Cancel(IUnitTestRun run);
}
public interface JetBrains.ReSharper.UnitTestFramework.Execution.Hosting.IUnitTestDebugHost {
    [NotNullAttribute]
public IProperty`1<bool> IsDebuggerAvailable { get; }
    [NotNullAttribute]
public IProperty`1<bool> IsDebuggerActive { get; }
    public abstract virtual IProperty`1<bool> get_IsDebuggerAvailable();
    public abstract virtual IProperty`1<bool> get_IsDebuggerActive();
    [NotNullAttribute]
public abstract virtual Task`1<ICreateProcessDebugSession> CreateProcess(IUnitTestRun run, ProcessStartInfo startInfo);
    [NotNullAttribute]
public abstract virtual Task`1<IAttachProcessDebugSession> AttachToProcess(IUnitTestRun run, string remoteMachine, int processId);
}
public interface JetBrains.ReSharper.UnitTestFramework.Execution.Hosting.IUnitTestDebugSession {
    [NotNullAttribute]
public abstract virtual Task Stop();
}
public abstract class JetBrains.ReSharper.UnitTestFramework.Execution.Hosting.MsTestAwareTaskRunnerHostControllerBase : TaskRunnerHostControllerBase {
    protected MsTestAwareTaskRunnerHostControllerBase(ILogger logger, IUnitTestLaunch launch);
    protected virtual Task PrepareForRunCore(IUnitTestRun run);
    protected virtual Task BeforeMetroTestsStarted(IUnitTestRun run, string packageFullName);
    protected virtual Task CleanupAfterRunCore(IUnitTestRun run);
    protected virtual Task AfterMetroTestsFinished(IUnitTestRun run);
}
public class JetBrains.ReSharper.UnitTestFramework.Execution.Hosting.RunHostController : TaskRunnerHostControllerBase {
    [NotNullAttribute]
private ISolutionProcessStartInfoPatcher myProcessStartInfoPatcher;
    public string HostId { get; }
    public RunHostController(IUnitTestLaunch launch, ISolutionProcessStartInfoPatcher processStartInfoPatcher, ILogger logger);
    public virtual string get_HostId();
    public virtual Task`1<IPreparedProcess> StartProcess(ProcessStartInfo startInfo, IUnitTestRun run, ILogger logger);
    public virtual Task AttachToProcess(int processId, IUnitTestRun run, ILogger logger);
}
[UnitTestHostProviderAttribute("16")]
public class JetBrains.ReSharper.UnitTestFramework.Execution.Hosting.RunHostProvider : object {
    public string ID { get; }
    public sealed virtual string get_ID();
    public sealed virtual HostProviderAvailability GetAvailability();
    public sealed virtual HostProviderAvailability GetAvailability(IUnitTestElement element);
    public sealed virtual bool SuppressBuild();
    public virtual ITaskRunnerHostController CreateHostController(IUnitTestLaunch launch);
}
[UnitTestHostProviderDescriptorAttribute("16")]
public class JetBrains.ReSharper.UnitTestFramework.Execution.Hosting.RunHostProviderDescriptor : object {
    [NotNullAttribute]
private RunHostProvider myProvider;
    public IHostProvider Provider { get; }
    public int Priority { get; }
    public IconId Icon { get; }
    public string Format { get; }
    public string ShortText { get; }
    public RunHostProviderDescriptor(RunHostProvider provider);
    public sealed virtual IHostProvider get_Provider();
    public sealed virtual int get_Priority();
    public sealed virtual IconId get_Icon();
    public sealed virtual string get_Format();
    public sealed virtual string get_ShortText();
}
public abstract class JetBrains.ReSharper.UnitTestFramework.Execution.Hosting.TaskRunnerHostControllerBase : object {
    [CompilerGeneratedAttribute]
private IUnitTestLaunch <Launch>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    public IUnitTestLaunch Launch { get; }
    public ILogger Logger { get; }
    public string HostId { get; }
    protected TaskRunnerHostControllerBase(ILogger logger, IUnitTestLaunch launch);
    [CompilerGeneratedAttribute]
public IUnitTestLaunch get_Launch();
    [CompilerGeneratedAttribute]
public ILogger get_Logger();
    protected virtual override void Finalize();
    protected virtual void CustomizeSettingsFor(IUnitTestLaunch launch, IUnitTestingSettings settings);
    protected virtual Task AfterLaunchStartedCore();
    protected virtual void CustomizeSettingsFor(IUnitTestRun run, IUnitTestingSettings settings);
    protected virtual Task PrepareForRunCore(IUnitTestRun run);
    protected virtual Task CleanupAfterRunCore(IUnitTestRun run);
    protected virtual Task BeforeLaunchFinishedCore();
    public abstract virtual string get_HostId();
    public virtual void SupplementContainer(ComponentContainer container);
    public virtual IEnumerable`1<Type> GetSupplementaryContainerAttributeTypes();
    public sealed virtual Task AfterLaunchStarted();
    public sealed virtual Task BeforeLaunchFinished();
    public virtual ClientControllerInfo GetClientControllerInfo(IUnitTestRun run);
    public sealed virtual Task PrepareForRun(IUnitTestRun run);
    public sealed virtual Task CleanupAfterRun(IUnitTestRun run);
    public virtual void Cancel(IUnitTestRun run);
    public virtual void Abort(IUnitTestRun run);
    public abstract virtual Task`1<IPreparedProcess> StartProcess(ProcessStartInfo startInfo, IUnitTestRun run, ILogger logger);
    public abstract virtual Task AttachToProcess(int processId, IUnitTestRun run, ILogger logger);
    protected void ForceAbortLaunch();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
[ShellComponentAttribute("10")]
public class JetBrains.ReSharper.UnitTestFramework.Execution.Hosting.UnitTestHost : object {
    private IDictionary`2<string, IHostProvider> myHostProviders;
    private IEnumerable`1<IHostProviderDescriptor> myHostProviderDescriptors;
    [NotNullAttribute]
public static UnitTestHost Instance { get; }
    public UnitTestHost(IEnumerable`1<IHostProvider> hostProviders, IEnumerable`1<IHostProviderDescriptor> hostProviderDescriptors);
    public static UnitTestHost get_Instance();
    public IEnumerable`1<IHostProviderDescriptor> GetProviderDescriptors();
    public IHostProviderDescriptor GetProviderDescriptor(string id);
    [NotNullAttribute]
public IHostProvider GetProvider(string id);
}
[AttributeUsageAttribute("4")]
[MeansImplicitUseAttribute]
public class JetBrains.ReSharper.UnitTestFramework.Execution.Hosting.UnitTestHostProviderAttribute : ShellComponentAttribute {
    public UnitTestHostProviderAttribute(Instantiation instantiation);
}
[MeansImplicitUseAttribute]
[BaseTypeRequiredAttribute("JetBrains.ReSharper.UnitTestFramework.Execution.Hosting.IHostProviderDescriptor")]
public class JetBrains.ReSharper.UnitTestFramework.Execution.Hosting.UnitTestHostProviderDescriptorAttribute : ShellComponentAttribute {
    public UnitTestHostProviderDescriptorAttribute(Instantiation instantiation);
}
public class JetBrains.ReSharper.UnitTestFramework.Execution.Hosting.WellKnownHostProvidersIds : object {
    public static string RunProviderId;
    public static string DebugProviderId;
}
public interface JetBrains.ReSharper.UnitTestFramework.Execution.IMsTestMetroStrategy {
    public abstract virtual string PackageFullName(IUnitTestRun run);
    public abstract virtual Task RegisterPackage(IUnitTestRun run);
    public abstract virtual Task UnregisterPackage(IUnitTestRun run);
}
public interface JetBrains.ReSharper.UnitTestFramework.Execution.IOutOfProcessUnitTestRunStrategy {
    public abstract virtual bool SupportsPreloading();
}
public interface JetBrains.ReSharper.UnitTestFramework.Execution.IUnitTestingVsBuildFacade {
    [NotNullAttribute]
public abstract virtual Task RefreshProjectProperties(IEnumerable`1<IProjectSearchDescriptor> descriptors);
}
public interface JetBrains.ReSharper.UnitTestFramework.Execution.IUnitTestLaunchHistory {
    public abstract virtual bool HasPreviousRunForSession(IUnitTestSession session);
    public abstract virtual void RepeatPreviousRunForSession(IUnitTestSession session);
    public abstract virtual void SaveRunForSession(IUnitTestLaunch launch);
}
public interface JetBrains.ReSharper.UnitTestFramework.Execution.IUnitTestLaunchManager {
    [NotNullAttribute]
public abstract virtual IUnitTestLaunch BuildAndRunSession(IUnitTestSession session, UnitTestElements elements, IHostProvider hostProvider, Nullable`1<BuildPolicy> buildPolicy, Nullable`1<PlatformType> platformType, Nullable`1<PlatformVersion> frameworkVersion, Nullable`1<PlatformMonoPreference> platformMonoPreference, bool isRepeatedLaunch);
    [NotNullAttribute]
public abstract virtual IUnitTestLaunch CreateLaunch(IUnitTestSession session, UnitTestElements elements, IHostProvider hostProvider, Nullable`1<BuildPolicy> buildPolicy, Nullable`1<PlatformType> platformType, Nullable`1<PlatformVersion> frameworkVersion, Nullable`1<PlatformMonoPreference> platformMonoPreference, bool isRepeatedLaunch);
    [CanBeNullAttribute]
public abstract virtual IUnitTestLaunch GetLaunch(string launchId);
    [CanBeNullAttribute]
public abstract virtual IUnitTestRun GetRun(string runId);
}
public interface JetBrains.ReSharper.UnitTestFramework.Execution.IUnitTestResultManager {
    public abstract virtual void RegisterSession(IUnitTestSession session);
    public abstract virtual void UnregisterSession(IUnitTestSession session);
    [NotNullAttribute]
public abstract virtual UnitTestResultWithPropagation GetResult(Int32`1<IUnitTestElement> elementId);
    [NotNullAttribute]
public abstract virtual UnitTestResult GetResult(Int32`1<IUnitTestElement> elementId, IUnitTestSession session);
    [NotNullAttribute]
public abstract virtual UnitTestResultData GetResultData(Int32`1<IUnitTestElement> elementId, IUnitTestSession session);
    public abstract virtual void RemoveResult(Int32`1<IUnitTestElement> id, IUnitTestSession session);
    public abstract virtual void MarkOutdated(Int32`1<IUnitTestElement> id, IUnitTestSession session);
    public abstract virtual void MarkOutdated(Int32`1<IUnitTestElement> id);
    public abstract virtual void MarkPending(Int32`1<IUnitTestElement> id, IUnitTestSession session);
    public abstract virtual void MarkIgnored(Int32`1<IUnitTestElement> id, IUnitTestSession session, string reason);
    public abstract virtual void TestStarting(Int32`1<IUnitTestElement> id, IUnitTestSession session);
    public abstract virtual void TestAborting(Int32`1<IUnitTestElement> id, IUnitTestSession session, string message);
    public abstract virtual void TestFinishing(Int32`1<IUnitTestElement> id, IUnitTestSession session, UnitTestStatus status, string message, Nullable`1<TimeSpan> duration);
    public abstract virtual void TestOutput(Int32`1<IUnitTestElement> id, IUnitTestSession session, string text, TestOutputType type);
    public abstract virtual void TestException(Int32`1<IUnitTestElement> id, IUnitTestSession session, IEnumerable`1<TestException> exceptions);
    public abstract virtual void CopyTestResult(IUnitTestSession fromSession, Int32`1<IUnitTestElement> id, IUnitTestSession toSession, bool copyOutputAndException);
}
public interface JetBrains.ReSharper.UnitTestFramework.Execution.IUnitTestRunStrategy {
    public abstract virtual bool RequiresProjectBuild(IProject project);
    public abstract virtual bool RequiresProjectExplorationAfterBuild(IProject project);
    [CanBeNullAttribute]
public abstract virtual IProject GetProjectForPropertiesRefreshBeforeLaunch(IUnitTestElement element);
    [NotNullAttribute]
public abstract virtual IRuntimeDescriptor GetRuntimeDescriptor(IUnitTestLaunch launch, IUnitTestElement element);
    [NotNullAttribute]
public abstract virtual Task Run(IUnitTestRun run);
    public abstract virtual void Cancel(IUnitTestRun run);
    public abstract virtual void Abort(IUnitTestRun run);
}
public interface JetBrains.ReSharper.UnitTestFramework.Execution.IUnitTestSolutionBuilder {
    public abstract virtual void BuildProjects(Lifetime lifetime, ProjectsToBuild targetProjects, BuildPolicy buildPolicy, Action`1<ISet`1<IProject>> buildSucceeded, Action`1<IEnumerable`1<string>> buildFailed);
    public abstract virtual void AbortBuild();
    public abstract virtual bool IsOwnBuild(ISolutionBuilderRequest buildRequest);
}
internal static class JetBrains.ReSharper.UnitTestFramework.Execution.Launch.CatalogComponentSourcesConcat : object {
    public static List`1<IComponentDescriptor> GetDescriptors(List`1[] componentSources, IPartSelector partSelector);
}
[UnitTestLaunchComponentAttribute]
public class JetBrains.ReSharper.UnitTestFramework.Execution.Launch.DefaultUnitTestLaunchStagesProvider : object {
    private IComponentContainer myContainer;
    public DefaultUnitTestLaunchStagesProvider(IComponentContainer container);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Execution.Launch.DefaultUnitTestLaunchStagesProvider/<GetStages>d__2")]
public virtual IEnumerable`1<IUnitTestLaunchStage> GetStages(IUnitTestLaunch launch);
}
public interface JetBrains.ReSharper.UnitTestFramework.Execution.Launch.INativeRuntimeDescriptor {
    public bool HasNativeCode { get; }
    public abstract virtual bool get_HasNativeCode();
}
public interface JetBrains.ReSharper.UnitTestFramework.Execution.Launch.INotificationConsumer {
    public abstract virtual void Error(string message);
    public abstract virtual void Warn(string message);
}
public interface JetBrains.ReSharper.UnitTestFramework.Execution.Launch.IRequireInProcDataCollectorForProfiling {
}
[CannotApplyEqualityOperatorAttribute]
public interface JetBrains.ReSharper.UnitTestFramework.Execution.Launch.IRuntimeDescriptor {
}
public interface JetBrains.ReSharper.UnitTestFramework.Execution.Launch.IRuntimeDescriptorWithPlatform {
    public TargetPlatform Platform { get; }
    public abstract virtual TargetPlatform get_Platform();
}
public interface JetBrains.ReSharper.UnitTestFramework.Execution.Launch.IRuntimeDescriptorWithProject {
    [NotNullAttribute]
public IProject Project { get; }
    public abstract virtual IProject get_Project();
}
public interface JetBrains.ReSharper.UnitTestFramework.Execution.Launch.IRuntimeDescriptorWithTargetFramework {
    [NotNullAttribute]
public TargetFrameworkId TargetFrameworkId { get; }
    public abstract virtual TargetFrameworkId get_TargetFrameworkId();
}
public interface JetBrains.ReSharper.UnitTestFramework.Execution.Launch.IUnitTestElementCollection {
    [NotNullAttribute]
public IBindableSet`1<Int32`1<IUnitTestElement>> Ids { get; }
    public abstract virtual IBindableSet`1<Int32`1<IUnitTestElement>> get_Ids();
}
public interface JetBrains.ReSharper.UnitTestFramework.Execution.Launch.IUnitTestLaunch {
    [NotNullAttribute]
public string Id { get; }
    [NotNullAttribute]
public UpgradableReadWriteLock Locks { get; }
    [NotNullAttribute]
public Lifetime Lifetime { get; }
    [NotNullAttribute]
public ISolution Solution { get; }
    [NotNullAttribute]
public IProperty`1<UnitTestLaunchStatus> Status { get; }
    [NotNullAttribute]
public IProperty`1<UnitTestLaunchStageStatus> StageStatus { get; }
    [NotNullAttribute]
public IUnitTestSession Session { get; }
    [NotNullAttribute]
public UnitTestElements Criterion { get; public set; }
    [NotNullAttribute]
public IHostProvider HostProvider { get; }
    [NotNullAttribute]
public ITaskRunnerHostController HostController { get; }
    [NotNullAttribute]
public BuildPolicy BuildPolicy { get; }
    [NotNullAttribute]
public PlatformType PlatformType { get; }
    [NotNullAttribute]
public PlatformVersion FrameworkVersion { get; }
    [NotNullAttribute]
public PlatformMonoPreference PlatformMonoPreference { get; }
    public bool IsRepeatedLaunch { get; }
    [NotNullAttribute]
[ItemNotNullAttribute]
public IEnumerable`1<IUnitTestRun> Runs { get; }
    [NotNullAttribute]
public IUnitTestLaunchElements Elements { get; }
    [NotNullAttribute]
public IUnitTestLaunchOutput Output { get; }
    [NotNullAttribute]
public DateTimeOffset StartedOn { get; }
    [NotNullAttribute]
public IComponentContainer ComponentContainer { get; }
    [NotNullAttribute]
public IUnitTestingSettings Settings { get; }
    public abstract virtual string get_Id();
    public abstract virtual UpgradableReadWriteLock get_Locks();
    public abstract virtual Lifetime get_Lifetime();
    public abstract virtual ISolution get_Solution();
    public abstract virtual IProperty`1<UnitTestLaunchStatus> get_Status();
    public abstract virtual IProperty`1<UnitTestLaunchStageStatus> get_StageStatus();
    public abstract virtual IUnitTestSession get_Session();
    public abstract virtual UnitTestElements get_Criterion();
    public abstract virtual void set_Criterion(UnitTestElements value);
    public abstract virtual IHostProvider get_HostProvider();
    public abstract virtual ITaskRunnerHostController get_HostController();
    public abstract virtual BuildPolicy get_BuildPolicy();
    public abstract virtual PlatformType get_PlatformType();
    public abstract virtual PlatformVersion get_FrameworkVersion();
    public abstract virtual PlatformMonoPreference get_PlatformMonoPreference();
    public abstract virtual bool get_IsRepeatedLaunch();
    public abstract virtual IEnumerable`1<IUnitTestRun> get_Runs();
    public abstract virtual IUnitTestLaunchElements get_Elements();
    public abstract virtual IUnitTestLaunchOutput get_Output();
    public abstract virtual DateTimeOffset get_StartedOn();
    public abstract virtual IComponentContainer get_ComponentContainer();
    public abstract virtual IUnitTestingSettings get_Settings();
    public abstract virtual Task Run();
    public abstract virtual void Cancel();
    public abstract virtual void Abort();
    [CanBeNullAttribute]
public abstract virtual IUnitTestRun GetRun(string runId);
    [NotNullAttribute]
public abstract virtual ISettingsCache GetSettingsCacheFor(IProject project);
}
public interface JetBrains.ReSharper.UnitTestFramework.Execution.Launch.IUnitTestLaunchElements {
    public abstract virtual void AddRange(IEnumerable`1<IUnitTestElement> elements);
    public abstract virtual void RemoveRange(IEnumerable`1<IUnitTestElement> elements);
}
public interface JetBrains.ReSharper.UnitTestFramework.Execution.Launch.IUnitTestLaunchOutput {
}
public interface JetBrains.ReSharper.UnitTestFramework.Execution.Launch.IUnitTestLaunchOutputFactory {
    [NotNullAttribute]
public abstract virtual IUnitTestLaunchOutput CreateOutput();
}
public interface JetBrains.ReSharper.UnitTestFramework.Execution.Launch.IUnitTestLaunchOutputMessage {
    public DateTime TimeStamp { get; }
    public LoggingLevel Severity { get; }
    public string Message { get; }
    public abstract virtual DateTime get_TimeStamp();
    public abstract virtual LoggingLevel get_Severity();
    public abstract virtual string get_Message();
}
public interface JetBrains.ReSharper.UnitTestFramework.Execution.Launch.IUnitTestLaunchStage {
    [NotNullAttribute]
public string Name { get; }
    [NotNullAttribute]
public TaskScheduler Scheduler { get; }
    [NotNullAttribute]
public TaskContinuationOptions RunWhen { get; }
    public abstract virtual string get_Name();
    public abstract virtual TaskScheduler get_Scheduler();
    public abstract virtual TaskContinuationOptions get_RunWhen();
    public abstract virtual Task Run(CancellationToken onCancel, CancellationToken onAbort);
}
public interface JetBrains.ReSharper.UnitTestFramework.Execution.Launch.IUnitTestLaunchStagesProvider {
    [NotNullAttribute]
[ItemNotNullAttribute]
public abstract virtual IEnumerable`1<IUnitTestLaunchStage> GetStages(IUnitTestLaunch launch);
}
public interface JetBrains.ReSharper.UnitTestFramework.Execution.Launch.IUnitTestRun {
    [NotNullAttribute]
public string Id { get; }
    [NotNullAttribute]
public Lifetime Lifetime { get; }
    [NotNullAttribute]
public IUnitTestLaunch Launch { get; }
    [NotNullAttribute]
public IUnitTestProvider Provider { get; }
    [NotNullAttribute]
public ITaskRunnerHostController HostController { get; }
    [NotNullAttribute]
public IUnitTestRunStrategy RunStrategy { get; }
    [NotNullAttribute]
public IProperty`1<UnitTestRunStatus> RunStatus { get; }
    [NotNullAttribute]
public IRuntimeDescriptor RuntimeDescriptor { get; }
    [NotNullAttribute]
public TargetFrameworkId TargetFrameworkId { get; }
    [NotNullAttribute]
public IUnitTestingSettings Settings { get; }
    [NotNullAttribute]
public ISet`1<IUnitTestElement> Elements { get; }
    [NotNullAttribute]
public IUnitTestElementCriterion Criterion { get; }
    [CanBeNullAttribute]
public string CrashReason { get; public set; }
    public abstract virtual string get_Id();
    public abstract virtual Lifetime get_Lifetime();
    public abstract virtual IUnitTestLaunch get_Launch();
    public abstract virtual IUnitTestProvider get_Provider();
    public abstract virtual ITaskRunnerHostController get_HostController();
    public abstract virtual IUnitTestRunStrategy get_RunStrategy();
    public abstract virtual IProperty`1<UnitTestRunStatus> get_RunStatus();
    public abstract virtual IRuntimeDescriptor get_RuntimeDescriptor();
    public abstract virtual TargetFrameworkId get_TargetFrameworkId();
    public abstract virtual IUnitTestingSettings get_Settings();
    public abstract virtual ISet`1<IUnitTestElement> get_Elements();
    public abstract virtual IUnitTestElementCriterion get_Criterion();
    public abstract virtual string get_CrashReason();
    public abstract virtual void set_CrashReason(string value);
    [NotNullAttribute]
public abstract virtual Task Start(CancellationToken onCancel, CancellationToken onAbort);
}
public enum JetBrains.ReSharper.UnitTestFramework.Execution.Launch.PlatformMonoPreference : Enum {
    public int value__;
    [DisplayAttribute]
public static PlatformMonoPreference PreferClr;
    [DisplayAttribute]
public static PlatformMonoPreference PreferMono;
}
public enum JetBrains.ReSharper.UnitTestFramework.Execution.Launch.PlatformType : Enum {
    public int value__;
    [DisplayAttribute]
public static PlatformType Automatic;
    [DisplayAttribute]
public static PlatformType x86;
    [DisplayAttribute]
public static PlatformType x64;
    [DisplayAttribute]
public static PlatformType Arm;
    [DisplayAttribute]
public static PlatformType Arm64;
}
public enum JetBrains.ReSharper.UnitTestFramework.Execution.Launch.PlatformVersion : Enum {
    public int value__;
    [DisplayAttribute]
public static PlatformVersion Automatic;
    [DisplayAttribute]
public static PlatformVersion v2_0;
    [DisplayAttribute]
public static PlatformVersion v4_0;
    [DisplayAttribute]
public static PlatformVersion v4_5;
    [DisplayAttribute]
public static PlatformVersion v4_6;
    [DisplayAttribute]
public static PlatformVersion v4_7;
    [BrowsableAttribute("False")]
[DisplayAttribute]
public static PlatformVersion CoreLatest;
}
[UnitTestElementsTransformationRuleAttribute("16")]
public class JetBrains.ReSharper.UnitTestFramework.Execution.Launch.Rules.AddMinimalRunnableSuiteForNotRunnableTestCasesRule : object {
    public sealed virtual IUnitTestElementCriterion Apply(IUnitTestElementCriterion criterion, IUnitTestSession session, IHostProvider hostProvider);
    public sealed virtual void Apply(ISet`1<IUnitTestElement> elements, IUnitTestSession session, IHostProvider hostProvider);
}
public interface JetBrains.ReSharper.UnitTestFramework.Execution.Launch.Rules.IUnitTestElementsTransformationRule {
    [NotNullAttribute]
public abstract virtual IUnitTestElementCriterion Apply(IUnitTestElementCriterion criterion, IUnitTestSession session, IHostProvider hostProvider);
    public abstract virtual void Apply(ISet`1<IUnitTestElement> elements, IUnitTestSession session, IHostProvider hostProvider);
}
[UnitTestElementsTransformationRuleAttribute("0")]
internal class JetBrains.ReSharper.UnitTestFramework.Execution.Launch.Rules.RemoveElementsUnsupportedByHostProviderRule : object {
    private IUnitTestResultManager myResultManager;
    private ILogger myLogger;
    public RemoveElementsUnsupportedByHostProviderRule(IUnitTestResultManager resultManager, ILogger logger);
    public sealed virtual IUnitTestElementCriterion Apply(IUnitTestElementCriterion criterion, IUnitTestSession session, IHostProvider hostProvider);
    public sealed virtual void Apply(ISet`1<IUnitTestElement> elements, IUnitTestSession session, IHostProvider hostProvider);
    private void MarkElementsAsIgnored(IUnitTestSession session, HashSet`1<IUnitTestElement> unsupported);
}
[UnitTestElementsTransformationRuleAttribute("0")]
internal class JetBrains.ReSharper.UnitTestFramework.Execution.Launch.Rules.RemoveElementsWithIgnoredCategoriesRule : object {
    [NotNullAttribute]
private IUnitTestingSettings mySettings;
    [NotNullAttribute]
private IUnitTestResultManager myResultManager;
    public RemoveElementsWithIgnoredCategoriesRule(Lifetime lifetime, IUnitTestingSettings settings, IUnitTestResultManager resultManager);
    public sealed virtual IUnitTestElementCriterion Apply(IUnitTestElementCriterion criterion, IUnitTestSession session, IHostProvider hostProvider);
    public sealed virtual void Apply(ISet`1<IUnitTestElement> elements, IUnitTestSession session, IHostProvider hostProvider);
    private void MarkElementsAsIgnored(IUnitTestSession session, ISet`1<IUnitTestElement> testsToIgnore, ISet`1<UnitTestElementCategory> ignoredCategories);
}
[UnitTestElementsTransformationRuleAttribute("0")]
internal class JetBrains.ReSharper.UnitTestFramework.Execution.Launch.Rules.RemoveEmptyParentElementsRule : object {
    private IUnitTestResultManager myResultManager;
    public RemoveEmptyParentElementsRule(IUnitTestResultManager resultManager);
    public sealed virtual IUnitTestElementCriterion Apply(IUnitTestElementCriterion criterion, IUnitTestSession session, IHostProvider hostProvider);
    public sealed virtual void Apply(ISet`1<IUnitTestElement> elements, IUnitTestSession session, IHostProvider hostProvider);
    private void MarkElementsAsInconclusive(IUnitTestSession session, ISet`1<IUnitTestElement> elements);
    private bool HasEmptyParents(ISet`1<IUnitTestElement> elements, ISet`1& parents);
}
[MeansImplicitUseAttribute]
[AttributeUsageAttribute("4")]
[BaseTypeRequiredAttribute("JetBrains.ReSharper.UnitTestFramework.Execution.Launch.Rules.IUnitTestElementsTransformationRule")]
public class JetBrains.ReSharper.UnitTestFramework.Execution.Launch.Rules.UnitTestElementsTransformationRuleAttribute : SolutionComponentAttribute {
    [CompilerGeneratedAttribute]
private int <Priority>k__BackingField;
    public int Priority { get; public set; }
    public UnitTestElementsTransformationRuleAttribute(Instantiation instantiation);
    [CompilerGeneratedAttribute]
public int get_Priority();
    [CompilerGeneratedAttribute]
public void set_Priority(int value);
    public static int GetPriority(IUnitTestElementsTransformationRule rule);
}
[UnitTestLaunchComponentAttribute]
public class JetBrains.ReSharper.UnitTestFramework.Execution.Launch.Stages.ApplyRulesStage : WithDefaultScheduler {
    [NotNullAttribute]
private IUnitTestLaunch myLaunch;
    [NotNullAttribute]
private IUnitTestElementRepository myElementRepository;
    [NotNullAttribute]
private IEnumerable`1<IUnitTestElementsTransformationRule> myRules;
    public ApplyRulesStage(IUnitTestLaunch launch, IUnitTestElementRepository elementRepository, IEnumerable`1<IUnitTestElementsTransformationRule> rules);
    public virtual Task Run(CancellationToken onCancel, CancellationToken onAbort);
    private void SubscribeToElements();
    [CompilerGeneratedAttribute]
private IUnitTestElementCriterion <Run>b__4_0(IUnitTestElementCriterion c, IUnitTestElementsTransformationRule r);
    [CompilerGeneratedAttribute]
private void <SubscribeToElements>b__5_0(UnitTestElementsCreatedEvent e);
    [CompilerGeneratedAttribute]
private void <SubscribeToElements>b__5_1(UnitTestElementsRemovedEvent e);
}
[UnitTestLaunchComponentAttribute]
public class JetBrains.ReSharper.UnitTestFramework.Execution.Launch.Stages.BuildPipelineStage : WithDefaultScheduler {
    [NotNullAttribute]
private IUnitTestLaunch myLaunch;
    [NotNullAttribute]
private MarkElementsAsPendingStage myMarkPendingStage;
    [NotNullAttribute]
private DistributeElementsIntoRunsStage myDistributeStage;
    public BuildPipelineStage(IUnitTestLaunch launch, MarkElementsAsPendingStage markPendingStage, DistributeElementsIntoRunsStage distributeStage);
    public virtual Task Run(CancellationToken onCancel, CancellationToken onAbort);
}
[UnitTestLaunchComponentAttribute]
public class JetBrains.ReSharper.UnitTestFramework.Execution.Launch.Stages.BuildStage : WithDefaultScheduler {
    [NotNullAttribute]
public static Key`1<ISet`1<IProject>> BuiltProjects;
    [NotNullAttribute]
private IUnitTestLaunch myLaunch;
    [NotNullAttribute]
private IThreading myThreading;
    [NotNullAttribute]
private IUnitTestElementRepository myElementRepository;
    [NotNullAttribute]
private IUnitTestSolutionBuilder mySolutionBuilder;
    public BuildStage(IUnitTestLaunch launch, IThreading threading, IUnitTestElementRepository elementRepository, IUnitTestSolutionBuilder solutionBuilder);
    private static BuildStage();
    public virtual Task Run(CancellationToken onCancel, CancellationToken onAbort);
    private ProjectsToBuild CollectProjectsToBuild();
}
[UnitTestLaunchComponentAttribute]
public class JetBrains.ReSharper.UnitTestFramework.Execution.Launch.Stages.DiscoveryStage : WithDefaultScheduler {
    [NotNullAttribute]
private IUnitTestLaunch myLaunch;
    [NotNullAttribute]
private IUnitTestSessionSettings mySessionSettings;
    [NotNullAttribute]
private IUnitTestElementRepository myElementRepository;
    [NotNullAttribute]
private IUnitTestArtifactExplorationProcess myBackgroundExplorer;
    public DiscoveryStage(IUnitTestLaunch launch, IUnitTestingSettings settings, IUnitTestElementRepository elementRepository, IUnitTestArtifactExplorationProcess backgroundExplorer);
    public virtual Task Run(CancellationToken onCancel, CancellationToken onAbort);
    private ISet`1<IProject> GetProjectsToExplore();
}
public class JetBrains.ReSharper.UnitTestFramework.Execution.Launch.Stages.DoNotMarkPendingCookie : object {
    private static int ourCounter;
    public static bool IsSet { get; }
    public static bool get_IsSet();
    public sealed virtual void Dispose();
}
[UnitTestLaunchComponentAttribute]
public class JetBrains.ReSharper.UnitTestFramework.Execution.Launch.Stages.FinishLaunchStage : WithDefaultScheduler {
    [NotNullAttribute]
private IUnitTestLaunch myLaunch;
    public TaskContinuationOptions RunWhen { get; }
    public FinishLaunchStage(IUnitTestLaunch launch, IUnitTestSessionConductor sessionConductor, IUnitTestElementRepository elementRepository, IUnitTestResultManager resultManager);
    public virtual TaskContinuationOptions get_RunWhen();
    public virtual Task Run(CancellationToken onCancel, CancellationToken onAbort);
}
public class JetBrains.ReSharper.UnitTestFramework.Execution.Launch.Stages.ProjectsToBuild : object {
    [CompilerGeneratedAttribute]
private ISet`1<IProject> <Projects>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WholeSolution>k__BackingField;
    [NotNullAttribute]
public ISet`1<IProject> Projects { get; }
    public bool WholeSolution { get; }
    public int Count { get; }
    private ProjectsToBuild(ISet`1<IProject> projects, bool wholeSolution);
    [CompilerGeneratedAttribute]
public ISet`1<IProject> get_Projects();
    [CompilerGeneratedAttribute]
public bool get_WholeSolution();
    public int get_Count();
    public bool IsEmpty();
    [NotNullAttribute]
public static ProjectsToBuild Create(ISet`1<IProject> projects);
    [NotNullAttribute]
public static ProjectsToBuild CreateForWholeSolution(ISet`1<IProject> projects);
}
[UnitTestLaunchComponentAttribute]
public class JetBrains.ReSharper.UnitTestFramework.Execution.Launch.Stages.RefreshProjectPropertiesStage : WithDefaultScheduler {
    [NotNullAttribute]
private IUnitTestElementRepository myElementRepository;
    [NotNullAttribute]
private IUnitTestLaunch myLaunch;
    [NotNullAttribute]
private IThreading myThreading;
    [CanBeNullAttribute]
private IUnitTestingVsBuildFacade myBuildFacade;
    public RefreshProjectPropertiesStage(IUnitTestLaunch launch, IUnitTestElementRepository elementRepository, IThreading threading, IUnitTestingVsBuildFacade buildFacade);
    public virtual Task Run(CancellationToken onCancel, CancellationToken onAbort);
}
[UnitTestLaunchComponentAttribute]
public class JetBrains.ReSharper.UnitTestFramework.Execution.Launch.Stages.RunTestsStage : WithDefaultScheduler {
    [NotNullAttribute]
private IUnitTestLaunch myLaunch;
    [NotNullAttribute]
private IUnitTestLaunchHistory myLaunchHistory;
    [NotNullAttribute]
private IUnitTestElementRepository myElementRepository;
    [NotNullAttribute]
private IUnitTestResultManager myResultManager;
    [NotNullAttribute]
private IProperty`1<int> myMaxParallelRuns;
    public RunTestsStage(IUnitTestLaunch launch, IUnitTestLaunchHistory launchHistory, IUnitTestElementRepository elementRepository, IUnitTestResultManager resultManager, IUnitTestingSettings settings);
    public virtual Task Run(CancellationToken onCancel, CancellationToken onAbort);
    private Task StartRunChained(ConcurrentQueue`1<IUnitTestRun> queue, CancellationToken onCancel, CancellationToken onAbort);
    public void Finish(IUnitTestRun run);
    private void MarkAsSkippedIfNotCompleted(IUnitTestRun run, IUnitTestElement element, UnitTestResult result, ISet`1<IUnitTestElement> invalidDynamicElements);
    private bool TryFinishQuietlyIfHasChildren(IUnitTestRun run, IUnitTestElement element, UnitTestResult result, ISet`1<IUnitTestElement> invalidDynamicElements);
}
public static class JetBrains.ReSharper.UnitTestFramework.Execution.Launch.Stages.UnitTestLaunchStage : object {
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.UnitTestFramework.Execution.Launch.TargetPlatformCalculator : object {
    private static ITargetPlatformCalculator Instance;
    public TargetPlatformCalculator(Lifetime lifetime, ITargetPlatformCalculator targetPlatformCalculator);
    public static TargetPlatform GetTargetPlatform(IUnitTestLaunch launch, IProject project, TargetFrameworkId targetFrameworkId);
    public static TargetPlatform GetTargetPlatform(IProject project, TargetFrameworkId targetFrameworkId);
    public static TargetPlatform GetTargetPlatform(PlatformType selectedPlatformType, IProject project, TargetFrameworkId targetFrameworkId, ITargetPlatformCalculator overrideCalculator);
}
public class JetBrains.ReSharper.UnitTestFramework.Execution.Launch.UnitTestElements : object {
    [CompilerGeneratedAttribute]
private IUnitTestElementCriterion <Criterion>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlySet`1<Int32`1<IUnitTestElement>> <Explicit>k__BackingField;
    [NotNullAttribute]
public IUnitTestElementCriterion Criterion { get; }
    [NotNullAttribute]
public IReadOnlySet`1<Int32`1<IUnitTestElement>> Explicit { get; }
    public UnitTestElements(IUnitTestElementCriterion criterion);
    public UnitTestElements(IUnitTestElementCriterion criterion, IUnitTestElement explicit);
    public UnitTestElements(IUnitTestElementCriterion criterion, Int32`1<IUnitTestElement> explicit);
    public UnitTestElements(IUnitTestElementCriterion criterion, IEnumerable`1<IUnitTestElement> explicit);
    public UnitTestElements(IUnitTestElementCriterion criterion, IEnumerable`1<Int32`1<IUnitTestElement>> explicit);
    [CompilerGeneratedAttribute]
public IUnitTestElementCriterion get_Criterion();
    [CompilerGeneratedAttribute]
public IReadOnlySet`1<Int32`1<IUnitTestElement>> get_Explicit();
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.UnitTestFramework.Execution.Launch.UnitTestElementsExtensions : object {
    [ExtensionAttribute]
public static bool IsEmpty(UnitTestElements elements);
    [ExtensionAttribute]
[NotNullAttribute]
public static IReadOnlySet`1<IUnitTestElement> Evaluate(UnitTestElements elements);
}
public class JetBrains.ReSharper.UnitTestFramework.Execution.Launch.UnitTestLaunch : UserDataHolder {
    private CancellationTokenSource myCancelCts;
    private CancellationTokenSource myAbortCts;
    private ConcurrentDictionary`2<IProject, ISettingsCache> mySettingsCaches;
    [CompilerGeneratedAttribute]
private LifetimeDefinition <LifetimeDefinition>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private UpgradableReadWriteLock <Locks>k__BackingField;
    [CompilerGeneratedAttribute]
private ISolution <Solution>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<UnitTestLaunchStatus> <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<UnitTestLaunchStageStatus> <StageStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private IUnitTestSession <Session>k__BackingField;
    [CompilerGeneratedAttribute]
private UnitTestElements <Criterion>k__BackingField;
    [CompilerGeneratedAttribute]
private IHostProvider <HostProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskRunnerHostController <HostController>k__BackingField;
    [CompilerGeneratedAttribute]
private BuildPolicy <BuildPolicy>k__BackingField;
    [CompilerGeneratedAttribute]
private PlatformType <PlatformType>k__BackingField;
    [CompilerGeneratedAttribute]
private PlatformVersion <FrameworkVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private PlatformMonoPreference <PlatformMonoPreference>k__BackingField;
    [CompilerGeneratedAttribute]
private IUnitTestLaunchElements <Elements>k__BackingField;
    [CompilerGeneratedAttribute]
private IUnitTestLaunchOutput <Output>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IUnitTestRun> <Runs>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <StartedOn>k__BackingField;
    [CompilerGeneratedAttribute]
private IComponentContainer <ComponentContainer>k__BackingField;
    [CompilerGeneratedAttribute]
private IUnitTestingSettings <Settings>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRepeatedLaunch>k__BackingField;
    private LifetimeDefinition LifetimeDefinition { get; }
    public string Id { get; }
    public UpgradableReadWriteLock Locks { get; }
    public Lifetime Lifetime { get; }
    public ISolution Solution { get; }
    public IProperty`1<UnitTestLaunchStatus> Status { get; }
    public IProperty`1<UnitTestLaunchStageStatus> StageStatus { get; }
    public IUnitTestSession Session { get; }
    public UnitTestElements Criterion { get; public set; }
    public IHostProvider HostProvider { get; }
    public ITaskRunnerHostController HostController { get; }
    public BuildPolicy BuildPolicy { get; }
    public PlatformType PlatformType { get; }
    public PlatformVersion FrameworkVersion { get; }
    public PlatformMonoPreference PlatformMonoPreference { get; }
    public IUnitTestLaunchElements Elements { get; }
    public IUnitTestLaunchOutput Output { get; }
    public IEnumerable`1<IUnitTestRun> Runs { get; }
    public DateTimeOffset StartedOn { get; private set; }
    public IComponentContainer ComponentContainer { get; }
    public IUnitTestingSettings Settings { get; }
    public bool IsRepeatedLaunch { get; }
    public UnitTestLaunch(LifetimeDefinition lifetime, ISolution solution, IUnitTestSession session, IHostProvider hostProvider, UnitTestElements elements, Nullable`1<BuildPolicy> buildPolicy, Nullable`1<PlatformType> platformType, Nullable`1<PlatformVersion> frameworkVersion, Nullable`1<PlatformMonoPreference> platformMonoPreference, bool isRepeatedLaunch);
    [CompilerGeneratedAttribute]
private LifetimeDefinition get_LifetimeDefinition();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Id();
    [CompilerGeneratedAttribute]
public sealed virtual UpgradableReadWriteLock get_Locks();
    public sealed virtual Lifetime get_Lifetime();
    [CompilerGeneratedAttribute]
public sealed virtual ISolution get_Solution();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<UnitTestLaunchStatus> get_Status();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<UnitTestLaunchStageStatus> get_StageStatus();
    [CompilerGeneratedAttribute]
public sealed virtual IUnitTestSession get_Session();
    [CompilerGeneratedAttribute]
public sealed virtual UnitTestElements get_Criterion();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Criterion(UnitTestElements value);
    [CompilerGeneratedAttribute]
public sealed virtual IHostProvider get_HostProvider();
    [CompilerGeneratedAttribute]
public sealed virtual ITaskRunnerHostController get_HostController();
    [CompilerGeneratedAttribute]
public sealed virtual BuildPolicy get_BuildPolicy();
    [CompilerGeneratedAttribute]
public sealed virtual PlatformType get_PlatformType();
    [CompilerGeneratedAttribute]
public sealed virtual PlatformVersion get_FrameworkVersion();
    [CompilerGeneratedAttribute]
public sealed virtual PlatformMonoPreference get_PlatformMonoPreference();
    [CompilerGeneratedAttribute]
public sealed virtual IUnitTestLaunchElements get_Elements();
    [CompilerGeneratedAttribute]
public sealed virtual IUnitTestLaunchOutput get_Output();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<IUnitTestRun> get_Runs();
    [CompilerGeneratedAttribute]
public sealed virtual DateTimeOffset get_StartedOn();
    [CompilerGeneratedAttribute]
private void set_StartedOn(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public sealed virtual IComponentContainer get_ComponentContainer();
    [CompilerGeneratedAttribute]
public sealed virtual IUnitTestingSettings get_Settings();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsRepeatedLaunch();
    private ITaskRunnerHostController InitializeHostController();
    private ComponentContainer InitializeComponentContainer();
    [AsyncStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Execution.Launch.UnitTestLaunch/<Run>d__75")]
public sealed virtual Task Run();
    private Task TerminateLifetime();
    private Task RunAllStages(IEnumerable`1<IUnitTestLaunchStage> stages);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Execution.Launch.UnitTestLaunch/<RunStage>d__78")]
private Task RunStage(IUnitTestLaunchStage stage);
    public sealed virtual void Cancel();
    public sealed virtual void Abort();
    public sealed virtual IUnitTestRun GetRun(string runId);
    public sealed virtual ISettingsCache GetSettingsCacheFor(IProject project);
    public sealed virtual void Error(string message);
    public sealed virtual void Warn(string message);
    [CompilerGeneratedAttribute]
private void <InitializeHostController>b__71_0();
    [CompilerGeneratedAttribute]
private void <InitializeHostController>b__71_1();
    [CompilerGeneratedAttribute]
private void <InitializeComponentContainer>b__72_0();
    [CompilerGeneratedAttribute]
private void <InitializeComponentContainer>b__72_1();
    [CompilerGeneratedAttribute]
private UnitTestLaunchStatus <Run>b__75_0();
    [CompilerGeneratedAttribute]
private void <TerminateLifetime>b__76_0();
    [CompilerGeneratedAttribute]
private Task <RunAllStages>b__77_1(Task t, object s);
    [CompilerGeneratedAttribute]
private ISettingsCache <GetSettingsCacheFor>b__82_0(IProject p);
}
internal class JetBrains.ReSharper.UnitTestFramework.Execution.Launch.UnitTestLaunchComponentAttribute : PartAttribute {
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.UnitTestFramework.Execution.Launch.UnitTestLaunchDependencies : object {
    [CompilerGeneratedAttribute]
private IThreading <Threading>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskHost <TaskHost>k__BackingField;
    [CompilerGeneratedAttribute]
private IUnitTestSolutionBuilder <SolutionBuilder>k__BackingField;
    [CompilerGeneratedAttribute]
private IUnitTestingVsBuildFacade <VsBuildFacade>k__BackingField;
    [CompilerGeneratedAttribute]
private IUnitTestResultManager <ResultManager>k__BackingField;
    [CompilerGeneratedAttribute]
private IUnitTestLaunchHistory <LaunchHistory>k__BackingField;
    [CompilerGeneratedAttribute]
private IUnitTestArtifactExplorationProcess <BackgroundExplorer>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IUnitTestElementsTransformationRule> <Rules>k__BackingField;
    [CompilerGeneratedAttribute]
private IUnitTestSessionConductor <SessionConductor>k__BackingField;
    [CompilerGeneratedAttribute]
private IUnitTestingSettings <Settings>k__BackingField;
    public IThreading Threading { get; }
    public ITaskHost TaskHost { get; }
    public IUnitTestSolutionBuilder SolutionBuilder { get; }
    public IUnitTestingVsBuildFacade VsBuildFacade { get; }
    public IUnitTestResultManager ResultManager { get; }
    public IUnitTestLaunchHistory LaunchHistory { get; public set; }
    public IUnitTestArtifactExplorationProcess BackgroundExplorer { get; }
    public IEnumerable`1<IUnitTestElementsTransformationRule> Rules { get; }
    public IUnitTestSessionConductor SessionConductor { get; }
    public IUnitTestingSettings Settings { get; }
    public UnitTestLaunchDependencies(IShellLocks shellLocks, IUnitTestingSettings unitTestingSettings, IUnitTestSolutionBuilder solutionBuilder, IUnitTestResultManager resultManager, IUnitTestLaunchHistory launchHistory, IUnitTestArtifactExplorationProcess backgroundExplorer, IEnumerable`1<IUnitTestElementsTransformationRule> rules, IUnitTestSessionConductor sessionConductor, IUnitTestingVsBuildFacade vsBuildFacade);
    [CompilerGeneratedAttribute]
public IThreading get_Threading();
    [CompilerGeneratedAttribute]
public ITaskHost get_TaskHost();
    [CompilerGeneratedAttribute]
public IUnitTestSolutionBuilder get_SolutionBuilder();
    [CompilerGeneratedAttribute]
public IUnitTestingVsBuildFacade get_VsBuildFacade();
    [CompilerGeneratedAttribute]
public IUnitTestResultManager get_ResultManager();
    [CompilerGeneratedAttribute]
public IUnitTestLaunchHistory get_LaunchHistory();
    [CompilerGeneratedAttribute]
public void set_LaunchHistory(IUnitTestLaunchHistory value);
    [CompilerGeneratedAttribute]
public IUnitTestArtifactExplorationProcess get_BackgroundExplorer();
    [CompilerGeneratedAttribute]
public IEnumerable`1<IUnitTestElementsTransformationRule> get_Rules();
    [CompilerGeneratedAttribute]
public IUnitTestSessionConductor get_SessionConductor();
    [CompilerGeneratedAttribute]
public IUnitTestingSettings get_Settings();
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.UnitTestFramework.Execution.Launch.UnitTestLaunchDialogMessageExtensions : object {
    [ExtensionAttribute]
public static void ShowMessage(IUnitTestLaunchOutput output, string header, string content);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.UnitTestFramework.Execution.Launch.UnitTestLaunchExtensions : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static T GetComponent(IUnitTestLaunch launch);
    [ExtensionAttribute]
[NotNullAttribute]
public static IEnumerable`1<T> GetComponents(IUnitTestLaunch launch);
}
public class JetBrains.ReSharper.UnitTestFramework.Execution.Launch.UnitTestLaunchLogMessage : AAutomation {
    [NotNullAttribute]
private static ILogger ourLogger;
    [CompilerGeneratedAttribute]
private DateTime <TimeStamp>k__BackingField;
    [CompilerGeneratedAttribute]
private LoggingLevel <Severity>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <SuppressErrors>k__BackingField;
    public DateTime TimeStamp { get; }
    public LoggingLevel Severity { get; }
    public string Message { get; }
    public static bool SuppressErrors { get; public set; }
    private static UnitTestLaunchLogMessage();
    public UnitTestLaunchLogMessage(LoggingLevel level, string message);
    [CompilerGeneratedAttribute]
public sealed virtual DateTime get_TimeStamp();
    [CompilerGeneratedAttribute]
public sealed virtual LoggingLevel get_Severity();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Message();
    [CompilerGeneratedAttribute]
public static bool get_SuppressErrors();
    [CompilerGeneratedAttribute]
public static void set_SuppressErrors(bool value);
}
public class JetBrains.ReSharper.UnitTestFramework.Execution.Launch.UnitTestLaunchOutput : object {
    private Subject`1<IUnitTestLaunchOutputMessage> mySequence;
    private IObservable`1<IUnitTestLaunchOutputMessage> myFinalSequence;
    private IDisposable myConnectionToken;
    public string Category { get; }
    public sealed virtual string get_Category();
    public sealed virtual bool IsEnabled(LoggingLevel level);
    public sealed virtual void Log(LoggingLevel level, string message, Exception exception);
    public sealed virtual void Log(LogEvent logEvent);
    [MustDisposeResourceAttribute]
public sealed virtual IDisposable Subscribe(IObserver`1<IUnitTestLaunchOutputMessage> observer);
}
[SolutionComponentAttribute("16")]
internal class JetBrains.ReSharper.UnitTestFramework.Execution.Launch.UnitTestLaunchOutputFactory : object {
    public sealed virtual IUnitTestLaunchOutput CreateOutput();
}
[UnitTestLaunchComponentAttribute]
internal class JetBrains.ReSharper.UnitTestFramework.Execution.Launch.UnitTestLaunchSettings : UnitTestingOverridableSettings {
    public UnitTestLaunchSettings(Lifetime lifetime, UnitTestingDefaultSettings defaultSettings);
}
[FlagsAttribute]
public enum JetBrains.ReSharper.UnitTestFramework.Execution.Launch.UnitTestLaunchStageStatus : Enum {
    public int value__;
    public static UnitTestLaunchStageStatus None;
    [LocalizedDescriptionAttribute("Building")]
public static UnitTestLaunchStageStatus Building;
    public static UnitTestLaunchStageStatus Built;
    [LocalizedDescriptionAttribute("Build failed")]
public static UnitTestLaunchStageStatus BuildFailed;
    [LocalizedDescriptionAttribute("Build succeeded")]
public static UnitTestLaunchStageStatus BuildSucceeded;
    [LocalizedDescriptionAttribute("Exploring tests")]
public static UnitTestLaunchStageStatus Exploring;
    [LocalizedDescriptionAttribute("Starting")]
public static UnitTestLaunchStageStatus Starting;
    [LocalizedDescriptionAttribute("Running")]
public static UnitTestLaunchStageStatus Running;
    [LocalizedDescriptionAttribute("Finishing")]
public static UnitTestLaunchStageStatus Finishing;
}
[FlagsAttribute]
public enum JetBrains.ReSharper.UnitTestFramework.Execution.Launch.UnitTestLaunchStatus : Enum {
    public int value__;
    public static UnitTestLaunchStatus Pending;
    public static UnitTestLaunchStatus Running;
    public static UnitTestLaunchStatus Cancelling;
    public static UnitTestLaunchStatus Aborting;
    public static UnitTestLaunchStatus Failing;
    public static UnitTestLaunchStatus Finished;
    public static UnitTestLaunchStatus Cancelled;
    public static UnitTestLaunchStatus Aborted;
    public static UnitTestLaunchStatus Faulted;
}
public class JetBrains.ReSharper.UnitTestFramework.Execution.Launch.UnitTestRun : UserDataHolder {
    [NotNullAttribute]
private UnitTestRunProperties myProperties;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private IUnitTestLaunch <Launch>k__BackingField;
    [CompilerGeneratedAttribute]
private IUnitTestingSettings <Settings>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<UnitTestRunStatus> <RunStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private ISet`1<IUnitTestElement> <Elements>k__BackingField;
    [CompilerGeneratedAttribute]
private IUnitTestElementCriterion <Criterion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CrashReason>k__BackingField;
    public string Id { get; }
    public IUnitTestLaunch Launch { get; }
    public Lifetime Lifetime { get; }
    public IUnitTestProvider Provider { get; }
    public IUnitTestRunStrategy RunStrategy { get; }
    public IRuntimeDescriptor RuntimeDescriptor { get; }
    public TargetFrameworkId TargetFrameworkId { get; }
    public IUnitTestingSettings Settings { get; }
    public ITaskRunnerHostController HostController { get; }
    public IProperty`1<UnitTestRunStatus> RunStatus { get; }
    public ISet`1<IUnitTestElement> Elements { get; }
    public IUnitTestElementCriterion Criterion { get; }
    public string CrashReason { get; public set; }
    public UnitTestRun(UnitTestRunProperties props, IUnitTestLaunch launch, IUnitTestElementCriterion criterion);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Id();
    [CompilerGeneratedAttribute]
public sealed virtual IUnitTestLaunch get_Launch();
    public sealed virtual Lifetime get_Lifetime();
    public sealed virtual IUnitTestProvider get_Provider();
    public sealed virtual IUnitTestRunStrategy get_RunStrategy();
    public sealed virtual IRuntimeDescriptor get_RuntimeDescriptor();
    public sealed virtual TargetFrameworkId get_TargetFrameworkId();
    [CompilerGeneratedAttribute]
public sealed virtual IUnitTestingSettings get_Settings();
    public sealed virtual ITaskRunnerHostController get_HostController();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<UnitTestRunStatus> get_RunStatus();
    [CompilerGeneratedAttribute]
public sealed virtual ISet`1<IUnitTestElement> get_Elements();
    [CompilerGeneratedAttribute]
public sealed virtual IUnitTestElementCriterion get_Criterion();
    [CompilerGeneratedAttribute]
public sealed virtual string get_CrashReason();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CrashReason(string value);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Execution.Launch.UnitTestRun/<Start>d__36")]
public sealed virtual Task Start(CancellationToken onCancel, CancellationToken onAbort);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Execution.Launch.UnitTestRun/<StartCore>d__37")]
private Task StartCore(CancellationToken onCancel, CancellationToken onAbort);
    private CancellationTokenRegistration ExecuteAndSet(CancellationToken cancellationToken, Action`1<IUnitTestRun> onCancel, UnitTestRunStatus runStatus);
    [CompilerGeneratedAttribute]
private void <Start>b__36_0();
    [CompilerGeneratedAttribute]
private void <Start>b__36_1();
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.UnitTestFramework.Execution.Launch.UnitTestRunExtensions : object {
    [NotNullAttribute]
private static Key`1<IUnitTestResultManager> ourResultManagerKey;
    [NotNullAttribute]
private static Key`1<IUnitTestDiscoveryManager> ourDiscoveryManagerKey;
    private static UnitTestRunExtensions();
    [ExtensionAttribute]
[NotNullAttribute]
private static IUnitTestResultManager ResultManager(IUnitTestRun run);
    [ExtensionAttribute]
[NotNullAttribute]
private static IUnitTestDiscoveryManager DiscoveryManager(IUnitTestRun run);
    [ExtensionAttribute]
public static void TestStarting(IUnitTestRun run, IUnitTestElement element);
    [ExtensionAttribute]
public static void TestAborting(IUnitTestRun run, IUnitTestElement element, string message);
    [ExtensionAttribute]
public static void TestFinishing(IUnitTestRun run, IUnitTestElement element, UnitTestStatus status, string message, Nullable`1<TimeSpan> duration);
    [ExtensionAttribute]
public static void TestOutput(IUnitTestRun run, IUnitTestElement element, string text, TestOutputType type);
    [ExtensionAttribute]
public static void TestException(IUnitTestRun run, IUnitTestElement element, IEnumerable`1<TestException> exceptions);
    [ExtensionAttribute]
[NotNullAttribute]
public static T CreateDynamicElement(IUnitTestRun run, Func`1<T> elementFactory);
    [ExtensionAttribute]
public static void CreateElements(IUnitTestRun run, UnitTestElementOrigin origin, Func`1<IEnumerable`1<T>> elementsFactory, IUnitTestElementCriterion criterion);
}
public class JetBrains.ReSharper.UnitTestFramework.Execution.Launch.UnitTestRunProperties : object {
    [CompilerGeneratedAttribute]
private LifetimeDefinition <Lifetime>k__BackingField;
    [CompilerGeneratedAttribute]
private IUnitTestProvider <Provider>k__BackingField;
    [CompilerGeneratedAttribute]
private IUnitTestRunStrategy <RunStrategy>k__BackingField;
    [CompilerGeneratedAttribute]
private IRuntimeDescriptor <RuntimeDescriptor>k__BackingField;
    [CompilerGeneratedAttribute]
private TargetFrameworkId <TargetFrameworkId>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ProjectGuid>k__BackingField;
    [NotNullAttribute]
public LifetimeDefinition Lifetime { get; private set; }
    [NotNullAttribute]
public IUnitTestProvider Provider { get; }
    [NotNullAttribute]
public IUnitTestRunStrategy RunStrategy { get; }
    [NotNullAttribute]
public IRuntimeDescriptor RuntimeDescriptor { get; }
    [NotNullAttribute]
public TargetFrameworkId TargetFrameworkId { get; }
    [NotNullAttribute]
public Guid ProjectGuid { get; }
    public UnitTestRunProperties(IUnitTestProvider provider, IUnitTestRunStrategy runStrategy, TargetFrameworkId targetFrameworkId, IRuntimeDescriptor runtimeEnvironment, Guid projectGuid);
    [CompilerGeneratedAttribute]
public LifetimeDefinition get_Lifetime();
    [CompilerGeneratedAttribute]
private void set_Lifetime(LifetimeDefinition value);
    [CompilerGeneratedAttribute]
public IUnitTestProvider get_Provider();
    [CompilerGeneratedAttribute]
public IUnitTestRunStrategy get_RunStrategy();
    [CompilerGeneratedAttribute]
public IRuntimeDescriptor get_RuntimeDescriptor();
    [CompilerGeneratedAttribute]
public TargetFrameworkId get_TargetFrameworkId();
    [CompilerGeneratedAttribute]
public Guid get_ProjectGuid();
    public UnitTestRunProperties EnsureLifetime(IUnitTestLaunch launch);
    public sealed virtual bool Equals(UnitTestRunProperties other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[FlagsAttribute]
public enum JetBrains.ReSharper.UnitTestFramework.Execution.Launch.UnitTestRunStatus : Enum {
    public int value__;
    public static UnitTestRunStatus Pending;
    public static UnitTestRunStatus Starting;
    public static UnitTestRunStatus Running;
    public static UnitTestRunStatus Finishing;
    public static UnitTestRunStatus Cancelling;
    public static UnitTestRunStatus Aborting;
    public static UnitTestRunStatus Failing;
    public static UnitTestRunStatus Finished;
    public static UnitTestRunStatus Cancelled;
    public static UnitTestRunStatus Aborted;
    public static UnitTestRunStatus Faulted;
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.UnitTestFramework.Execution.Launch.UnitTestRunStatusExtension : object {
    [ExtensionAttribute]
public static UnitTestRunStatus ToFinalStatus(UnitTestRunStatus status);
    [ExtensionAttribute]
public static UnitTestLaunchStatus ToFinalStatus(UnitTestLaunchStatus status);
}
public class JetBrains.ReSharper.UnitTestFramework.Execution.NoopRuntimeDescriptor : object {
    [NotNullAttribute]
public static IRuntimeDescriptor Instance;
    public TargetPlatform TargetPlatform { get; }
    private static NoopRuntimeDescriptor();
    public TargetPlatform get_TargetPlatform();
}
[ExtensionAttribute]
internal static class JetBrains.ReSharper.UnitTestFramework.Execution.OptimizedUnitTestResultPropagationDataExtensions : object {
    [ExtensionAttribute]
public static void Write(UnsafeWriter writer, UnitTestResultPropagationData data);
    [ExtensionAttribute]
public static UnitTestResultPropagationData ReadPropagationData(UnsafeReader reader);
}
public enum JetBrains.ReSharper.UnitTestFramework.Execution.ShadowCopyOption : Enum {
    public int value__;
    [LocalizedDescriptionAttribute("None")]
public static ShadowCopyOption None;
    [LocalizedDescriptionAttribute("Native")]
public static ShadowCopyOption Native;
    [LocalizedDescriptionAttribute("Advanced")]
public static ShadowCopyOption Advanced;
}
public enum JetBrains.ReSharper.UnitTestFramework.Execution.TestDurationGrade : Enum {
    public int value__;
    public static TestDurationGrade NotRun;
    public static TestDurationGrade Fast;
    public static TestDurationGrade Medium;
    public static TestDurationGrade Slow;
    public static TestDurationGrade Slower;
    public static TestDurationGrade Slowest;
}
public class JetBrains.ReSharper.UnitTestFramework.Execution.TestException : object {
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StackTrace>k__BackingField;
    [CanBeNullAttribute]
public string Type { get; public set; }
    [CanBeNullAttribute]
public string Message { get; public set; }
    [CanBeNullAttribute]
public string StackTrace { get; public set; }
    public TestException(string type, string message, string stackTrace);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public string get_StackTrace();
    [CompilerGeneratedAttribute]
public void set_StackTrace(string value);
    public void Render(TextWriter writer);
    public int GetLineCount();
}
public enum JetBrains.ReSharper.UnitTestFramework.Execution.TestOutputType : Enum {
    public int value__;
    public static TestOutputType STDOUT;
    public static TestOutputType STDERR;
    public static TestOutputType DEBUGTRACE;
}
[SolutionComponentAttribute("16")]
internal class JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.Activation.AdHocTestRunnerAgentPool : object {
    [NotNullAttribute]
private ITestRunnerAgentInvoker myAgentInvoker;
    public AdHocTestRunnerAgentPool(ITestRunnerAgentInvoker agentInvoker);
    public sealed virtual Task`1<ITestRunnerAgent> Allocate(ITestRunnerContext context, CancellationToken ct);
}
internal class JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.Activation.DataCollectorStartInfoBuilder : StartInfoBuilder {
    [NotNullAttribute]
private int myPort;
    [NotNullAttribute]
private string myAgentId;
    [NotNullAttribute]
private ITestRunnerContext myContext;
    [NotNullAttribute]
private FileSystemPath myVisualStudioDirectory;
    public DataCollectorStartInfoBuilder(int port, string agentId, ITestRunnerContext context, FileSystemPath visualStudioDirectory);
    [NotNullAttribute]
public ProcessStartInfo Build();
    private ProcessStartInfo BuildNetCore();
    [NotNullAttribute]
private ProcessStartInfo BuildNetFramework();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.Activation.DotNetCliToolset : object {
    [NotNullAttribute]
private Lifetime myLifetime;
    [NotNullAttribute]
private ISolution mySolution;
    [NotNullAttribute]
private DotNetCoreInstallationsDetector myDotNetCoreInstallationsDetector;
    [NotNullAttribute]
private IContextBoundSettingsStoreLive mySettingsStore;
    [NotNullAttribute]
private ConcurrentDictionary`2<JetArchitecture, VirtualFileSystemPath> myCachedTools;
    [NotNullAttribute]
private ILogger myLogger;
    public DotNetCliToolset(Lifetime lifetime, ISolution solution, ISettingsStore settingsStore, DotNetCoreInstallationsDetector dotNetCoreInstallationsDetector, ILogger logger);
    [CanBeNullAttribute]
public VirtualFileSystemPath TryGetDotNetCliFor(JetArchitecture architecture);
    private VirtualFileSystemPath CalculateDotNetExe(JetArchitecture architecture);
    private static Func`5<Lifetime, IContextBoundSettingsStore, DotNetCoreInstallationsDetector, VirtualFileSystemPath, DotNetCoreToolset> GetLoader(JetArchitecture architecture);
    [CompilerGeneratedAttribute]
private void <.ctor>b__6_0();
}
public interface JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.Activation.IRemoteAgentSerializers {
    public abstract virtual void RegisterFrom(Assembly assembly);
}
public interface JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.Activation.ITestRunnerAgent {
    [NotNullAttribute]
public string Id { get; }
    [NotNullAttribute]
public Lifetime Lifetime { get; }
    [NotNullAttribute]
public IPreparedProcessWithCachedOutput Process { get; }
    [NotNullAttribute]
public IMessageBroker MessageBroker { get; }
    [NotNullAttribute]
public IRemoteAgentSerializers Serializers { get; }
    [NotNullAttribute]
public ITestRunnerMessageHandlerRegistry MessageHandlers { get; }
    public abstract virtual string get_Id();
    public abstract virtual Lifetime get_Lifetime();
    public abstract virtual IPreparedProcessWithCachedOutput get_Process();
    public abstract virtual IMessageBroker get_MessageBroker();
    public abstract virtual IRemoteAgentSerializers get_Serializers();
    public abstract virtual ITestRunnerMessageHandlerRegistry get_MessageHandlers();
    [NotNullAttribute]
public abstract virtual Task`1<int> Shutdown();
}
public interface JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.Activation.ITestRunnerAgentInvoker {
    [NotNullAttribute]
public abstract virtual Task`1<ITestRunnerAgent> StartTestRunnerAgent(ITestRunnerContext ctx, CancellationToken ct);
}
public interface JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.Activation.ITestRunnerAgentPool {
    [NotNullAttribute]
public abstract virtual Task`1<ITestRunnerAgent> Allocate(ITestRunnerContext context, CancellationToken ct);
}
public interface JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.Activation.ITestRunnerAgentServerHub {
    public int Port { get; }
    [NotNullAttribute]
public IViewableSet`1<Server> OnAgentActivation { get; }
    public abstract virtual int get_Port();
    public abstract virtual IViewableSet`1<Server> get_OnAgentActivation();
}
public interface JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.Activation.ITestRunnerMessageHandlerRegistry {
    public abstract virtual bool AddOrUpdate(Lifetime lt, IMessageHandlerMarker marker);
}
internal class JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.Activation.RemoteAgentSerializers : ReflectionSerializersFacade {
    public sealed virtual void RegisterFrom(Assembly assembly);
}
[RdExtAttribute("JetBrains.ReSharper.TestRunner.Abstractions.IServerEndpoint")]
internal class JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.Activation.ServerEndpoint : RdExtReflectionBindableBase {
    [NotNullAttribute]
private TaskFactory myFactory;
    [NotNullAttribute]
private HandlerRegistry myHandlers;
    [NotNullAttribute]
private ILogger myLogger;
    public ServerEndpoint(IEnumerable`1<IMessageHandlerMarker> markers, TaskScheduler scheduler);
    public sealed virtual bool AddOrUpdate(Lifetime lt, IMessageHandlerMarker marker);
    private bool TryRegisterAsyncHandlerWithResult(Lifetime lt, IMessageHandlerMarker marker);
    private void RegisterGeneric(Lifetime lt, IMessageHandlerMarker marker);
    private bool TryRegisterAsyncHandler(Lifetime lt, IMessageHandlerMarker marker);
    private bool TryRegisterHandlerWithResult(Lifetime lt, IMessageHandlerMarker marker);
    private bool TryRegisterHandler(Lifetime lt, IMessageHandlerMarker marker);
    public sealed virtual Task`1<IAutoRegisterInProtocol> SendMessage(IAutoRegisterInProtocol message);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.Activation.ServerEndpoint/<RunAndLog>d__11")]
private Task`1<IAutoRegisterInProtocol> RunAndLog(Func`2<IAutoRegisterInProtocol, Task`1<IAutoRegisterInProtocol>> handler, IAutoRegisterInProtocol message);
}
internal class JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.Activation.ServerMessageBroker : object {
    [NotNullAttribute]
private IClientEndpoint myClient;
    public ServerMessageBroker(IClientEndpoint client);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.Activation.ServerMessageBroker/<SendMessage>d__2")]
public sealed virtual Task SendMessage(IMessage message);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.Activation.ServerMessageBroker/<SendMessage>d__3`1")]
public sealed virtual Task`1<TResult> SendMessage(IMessage`1<TResult> message);
}
[LocalizableAttribute("False")]
internal abstract class JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.Activation.StartInfoBuilder : object {
    internal static string Port(int port);
    internal static string Diagnostics(string appName, IUnitTestRunnerSettings settings);
    internal static string Q(FileSystemPath value);
    internal static string AttachDebugger(IUnitTestRunnerSettings settings);
    protected static string Q(string value);
}
[ShellComponentAttribute("16")]
internal class JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.Activation.TemporaryTestRunnerAgentInvoker : object {
    [NotNullAttribute]
private ILogger myLogger;
    [AsyncStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.Activation.TemporaryTestRunnerAgentInvoker/<StartTestRunnerAgent>d__2")]
public sealed virtual Task`1<ITestRunnerAgent> StartTestRunnerAgent(ITestRunnerContext ctx, CancellationToken ct);
    private IPreparedProcessWithCachedOutput StartTestRunner(int port, ITestRunnerContext ctx);
}
internal class JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.Activation.TestRunnerAgent : object {
    [CompilerGeneratedAttribute]
private static EventHandler`1<ITestRunnerAgent> Started;
    [NotNullAttribute]
private static Lazy`1<ILogger> ourLogger;
    [NotNullAttribute]
private LifetimeDefinition myLtd;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private IPreparedProcessWithCachedOutput <Process>k__BackingField;
    [CompilerGeneratedAttribute]
private IMessageBroker <MessageBroker>k__BackingField;
    [CompilerGeneratedAttribute]
private IRemoteAgentSerializers <Serializers>k__BackingField;
    [CompilerGeneratedAttribute]
private ITestRunnerMessageHandlerRegistry <MessageHandlers>k__BackingField;
    public string Id { get; }
    public Lifetime Lifetime { get; }
    public IPreparedProcessWithCachedOutput Process { get; }
    public IMessageBroker MessageBroker { get; }
    public IRemoteAgentSerializers Serializers { get; }
    public ITestRunnerMessageHandlerRegistry MessageHandlers { get; }
    public TestRunnerAgent(string id, LifetimeDefinition lifetime, IPreparedProcessWithCachedOutput process, IRemoteAgentSerializers serializers, ITestRunnerMessageHandlerRegistry messageHandlers, IMessageBroker messageBroker);
    private static TestRunnerAgent();
    [CompilerGeneratedAttribute]
public static void add_Started(EventHandler`1<ITestRunnerAgent> value);
    [CompilerGeneratedAttribute]
public static void remove_Started(EventHandler`1<ITestRunnerAgent> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Id();
    public sealed virtual Lifetime get_Lifetime();
    [CompilerGeneratedAttribute]
public sealed virtual IPreparedProcessWithCachedOutput get_Process();
    [CompilerGeneratedAttribute]
public sealed virtual IMessageBroker get_MessageBroker();
    [CompilerGeneratedAttribute]
public sealed virtual IRemoteAgentSerializers get_Serializers();
    [CompilerGeneratedAttribute]
public sealed virtual ITestRunnerMessageHandlerRegistry get_MessageHandlers();
    public sealed virtual void Dispose();
    public sealed virtual Task`1<int> Shutdown();
    internal static ProcessExitedUnexpectedlyException AnalyseExitCode(IPreparedProcessWithCachedOutput process);
    private static Exception GetInnerException(IPreparedProcessWithCachedOutput process);
}
internal class JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.Activation.TestRunnerAgentServerHub : object {
    [NotNullAttribute]
private ServerFactory myWire;
    public int Port { get; }
    public IViewableSet`1<Server> OnAgentActivation { get; }
    public TestRunnerAgentServerHub(Lifetime lifetime);
    public sealed virtual int get_Port();
    public sealed virtual IViewableSet`1<Server> get_OnAgentActivation();
}
[ExtensionAttribute]
internal static class JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.Activation.TestRunnerMessageHandlerRegistryExtensions : object {
    [ExtensionAttribute]
public static void AddOrUpdate(ITestRunnerMessageHandlerRegistry registry, Lifetime lt, object instance);
}
internal class JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.Activation.TestRunnerStartInfoBuilder : StartInfoBuilder {
    [NotNullAttribute]
private IPlatformManager myPlatformManager;
    [NotNullAttribute]
private DotNetCliToolset myCliToolset;
    [NotNullAttribute]
private ITestRunnerContext myContext;
    public TestRunnerStartInfoBuilder(IPlatformManager platformManager, DotNetCliToolset cliToolset, ITestRunnerContext context);
    [NotNullAttribute]
public ProcessStartInfo Build();
    private ProcessStartInfo ThrowTargetFrameworkNotSupported();
    private ProcessStartInfo BuildNetCore();
    private string GetDotNetExe(JetArchitecture architecture);
    private FileSystemPath PrepareRunConfig(FileSystemPath output, TargetFrameworkId runAsTargetFrameworkId);
    private FileSystemPath OverrideRuntimeConfig(FileSystemPath output, TargetFrameworkId targetFrameworkId);
    [NotNullAttribute]
private string ResolveFrameworkVersion(FileSystemPath runnerAssembly, TargetFrameworkId projectTargetFramework, IProject project);
    [NotNullAttribute]
private ProcessStartInfo BuildNetFramework();
    private static string GetSuffixNetCore(TargetPlatform platform);
    private static string GetSuffixNetFramework(TargetPlatform platform);
}
[ExtensionAttribute]
internal static class JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.BoundTestRunnerAgentExtensions : object {
    [ExtensionAttribute]
public static void RegisterRemoteTasks(IBoundTestRunnerAgent`1<TCtx> agent);
    [ExtensionAttribute]
public static void RegisterHandlers(IBoundTestRunnerAgent`1<TCtx> agent);
}
[SolutionComponentAttribute("0")]
internal class JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.DataCollection.DataCollectorFactory : object {
    [NotNullAttribute]
private static AssemblyNameInfo ourTypeMockReferenceInfo;
    [NotNullAttribute]
private IMsTestAgentInfoProvider myMsTestAgentInfoProvider;
    [NotNullAttribute]
private IRunSettingsProvider myRunSettingsProvider;
    public DataCollectorFactory(IMsTestAgentInfoProvider msTestAgentInfoProvider, IRunSettingsProvider runSettingsProvider);
    private static DataCollectorFactory();
    public sealed virtual IDataCollector Build(IUnitTestRun run, CancellationToken ct);
    private bool HasDataCollector(XmlDocument runSettings, ILogger logger);
    private bool IsCurrentOSSupported(ILogger logger);
    private bool HasValidVsRoot(ILogger logger);
    private bool HasReferenceToTypeMock(IProject project, TargetFrameworkId targetFrameworkId, ILogger logger);
    private bool HasTypeMockInstalledForCurrentUser(ILogger logger);
}
public interface JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.DataCollection.IDataCollector {
}
public interface JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.DataCollection.IDataCollectorFactory {
    [NotNullAttribute]
public abstract virtual IDataCollector Build(IUnitTestRun run, CancellationToken ct);
}
internal class JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.DataCollection.JustMockDataCollector : EmptyDisposable {
    [NotNullAttribute]
private IUnitTestRun myRun;
    [CanBeNullAttribute]
private VirtualFileSystemPath myProfilerPath;
    public JustMockDataCollector(IUnitTestRun run, VirtualFileSystemPath profilerPath);
    public sealed virtual IDictionary`2<string, string> GetEnvironmentVariables();
}
internal class JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.DataCollection.JustMockSupport : object {
    [NotNullAttribute]
private static AssemblyNameInfo ourJustMockReferenceInfo;
    private static JustMockSupport();
    [CanBeNullAttribute]
public static IDataCollector TryGetDataCollectorIfRequiredAndAvailable(IUnitTestRun run);
    private static bool HasReferenceToJustMock(IRuntimeDescriptorWithTargetFramework env, IUnitTestRun run);
    private static bool IsInstalledInSystem();
    private static bool IsInstalledAsNuget(IRuntimeDescriptorWithTargetFramework env, IUnitTestRun run, VirtualFileSystemPath& profilerPath);
    [LocalizableAttribute("False")]
[CanBeNullAttribute]
private static VirtualFileSystemPath TryGetPathToProfiler(IRuntimeDescriptorWithTargetFramework env, IUnitTestRun run);
    [CompilerGeneratedAttribute]
internal static bool <TryGetPathToProfiler>g__PackageIsJustMockCommercial|5_0(PackageReference reference);
}
internal class JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.DataCollection.NoopDataCollector : EmptyDisposable {
    public sealed virtual IDictionary`2<string, string> GetEnvironmentVariables();
}
internal class JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.DataCollection.RemoteDataCollector : object {
    [NotNullAttribute]
private IUnitTestRun myRun;
    [NotNullAttribute]
private XmlDocument myRunSettings;
    [NotNullAttribute]
private FileSystemPath myVisualStudioDirectory;
    [NotNullAttribute]
private LifetimeDefinition myLtd;
    [NotNullAttribute]
private IMessageBroker myProxy;
    [NotNullAttribute]
private IPreparedProcess myProcess;
    [NotNullAttribute]
private TimeSpan myTimeout;
    [NotNullAttribute]
private TaskCompletionSource`1<Exception> myProcessTcs;
    [NotNullAttribute]
private CancellationToken myAbortCt;
    [NotNullAttribute]
private CancellationTokenRegistration myOnAbort;
    public RemoteDataCollector(IUnitTestRun run, XmlDocument runSettings, FileSystemPath visualStudioDirectory, CancellationToken abortCt);
    private IMessageBroker InitializeProxy(IUnitTestRun run, Int32& port);
    private IPreparedProcess StartProcess(IUnitTestRun run, int port);
    public sealed virtual IDictionary`2<string, string> GetEnvironmentVariables();
    [AsyncStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.DataCollection.RemoteDataCollector/<GetEnvironmentVariablesAsync>d__14")]
private Task`1<IDictionary`2<string, string>> GetEnvironmentVariablesAsync();
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private void <StartProcess>g__OnDataCollectorProcessExited|12_0(IPreparedProcess p, int exitCode);
}
internal class JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.DataCollection.TypeMockDataCollector : EmptyDisposable {
    public sealed virtual IDictionary`2<string, string> GetEnvironmentVariables();
}
public class JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.DefaultTestRunnerHost : object {
    [NotNullAttribute]
public static ITestRunnerHost Instance;
    public IEnumerable`1<Assembly> InProcessAssemblies { get; }
    public int Priority { get; }
    private static DefaultTestRunnerHost();
    public virtual IEnumerable`1<Assembly> get_InProcessAssemblies();
    public virtual int get_Priority();
    public virtual IEnumerable`1<IMessageHandlerMarker> GetMessageHandlers(ITestRunnerContext ctx);
    public virtual IPreparedProcess StartProcess(ProcessStartInfo startInfo, ITestRunnerContext context);
}
internal class JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.DiscoveryTestRunnerHost : object {
    [NotNullAttribute]
public static ITestRunnerHost Instance;
    public IEnumerable`1<Assembly> InProcessAssemblies { get; }
    public int Priority { get; }
    private static DiscoveryTestRunnerHost();
    public sealed virtual IEnumerable`1<Assembly> get_InProcessAssemblies();
    public virtual int get_Priority();
    public sealed virtual IEnumerable`1<IMessageHandlerMarker> GetMessageHandlers(ITestRunnerContext ctx);
    public sealed virtual IPreparedProcess StartProcess(ProcessStartInfo startInfo, ITestRunnerContext context);
}
public class JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.EmptyOptions : object {
    [NotNullAttribute]
public static ITestRunnerAdditionalStartupOptions Instance;
    private static EmptyOptions();
    public sealed virtual IDictionary`2<string, string> GetEnvironmentVariables();
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.Extensions.Extensions : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static ShadowCopy ToShadowCopy(IUnitTestRunnerSettings settings);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static ClientControllerInfo ToInfo(ClientControllerInfo info);
    [ExtensionAttribute]
public static bool IsNetCoreSdk(TargetFrameworkId targetFrameworkId);
    [ExtensionAttribute]
public static TestOutputType ToTaskOutputType(TestOutputType outputType);
    [ExtensionAttribute]
public static UnitTestStatus ToUnitTestStatus(TestOutcome testOutcome);
    [ExtensionAttribute]
public static TestException ToTaskException(ExceptionInfo info);
    [ExtensionAttribute]
public static ProcessStartInfo ToStartInfo(StartProcessRequest request);
}
public class JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.Handlers.AgentConnectedMessageHandler : object {
    [NotNullAttribute]
private Action`1<string> myOnAgentConnected;
    public AgentConnectedMessageHandler(Action`1<string> onAgentConnected);
    public sealed virtual void Execute(ConnectMessage message);
}
internal class JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.Handlers.TestRunnerAgentLoggingHandler : object {
    [NotNullAttribute]
private ILogger myLogger;
    [NotNullAttribute]
private string myAgentId;
    public TestRunnerAgentLoggingHandler(ILogger logger, string agentId);
    public sealed virtual void Execute(LogMessage message);
    private LoggingLevel ToReSharperLoggingLevel(LoggingLevel level);
}
public interface JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.IBoundTestRunnerAgent`1 {
    [NotNullAttribute]
public TContext Context { get; }
    public abstract virtual TContext get_Context();
}
public interface JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.IMsTestAgentInfoProvider {
    [NotNullAttribute]
public string InvalidInstallationFolderMessage { get; }
    public abstract virtual bool IsValidInstallationFolder();
    [NotNullAttribute]
public abstract virtual FileSystemPath GetInstallationFolder();
    public abstract virtual string get_InvalidInstallationFolderMessage();
}
public interface JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.IProvideTestRunnerAgentMessageHandlers {
    public int Priority { get; }
    public abstract virtual int get_Priority();
    [NotNullAttribute]
[ItemNotNullAttribute]
public abstract virtual IEnumerable`1<IMessageHandlerMarker> GetMessageHandlers(ITestRunnerContext context);
}
public interface JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.IRemoteTaskToUnitTestElementMapper {
    [CanBeNullAttribute]
public abstract virtual IUnitTestElement GetElement(RemoteTask task, ITestRunnerDiscoveryContext ctx, IUnitTestElementObserver observer);
}
public interface JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.IRemoteTaskToUnitTestElementMapping`1 {
    [NotNullAttribute]
public abstract virtual IUnitTestElement GetElement(TTask task, ITestRunnerDiscoveryContext ctx, IUnitTestElementObserver observer);
}
public interface JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.IRemoteTaskToUnitTestElementMappingMarker {
}
public interface JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.ITestRunnerAdapter {
    [NotNullAttribute]
public Assembly InProcessAdapterAssembly { get; }
    public abstract virtual Assembly get_InProcessAdapterAssembly();
    [NotNullAttribute]
public abstract virtual TestAdapterLoader GetTestAdapterLoader(ITestRunnerContext ctx);
    [NotNullAttribute]
public abstract virtual TestContainer GetTestContainer(ITestRunnerContext ctx);
}
public interface JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.ITestRunnerAdditionalStartupOptions {
    [NotNullAttribute]
public abstract virtual IDictionary`2<string, string> GetEnvironmentVariables();
}
public interface JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.ITestRunnerAgentManager {
    [NotNullAttribute]
public abstract virtual Task`1<ITestRunnerExecutionAgent> GetExecutionAgent(ITestRunnerExecutionContext context, CancellationToken ct);
    [NotNullAttribute]
public abstract virtual Task`1<ITestRunnerDiscoveryAgent> GetDiscoveryAgent(ITestRunnerDiscoveryContext context, CancellationToken ct);
}
public interface JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.ITestRunnerContext {
    [NotNullAttribute]
public Lifetime Lifetime { get; }
    [NotNullAttribute]
public ILogger Logger { get; }
    [NotNullAttribute]
public IUnitTestingSettings Settings { get; }
    [NotNullAttribute]
public ITestRunnerRuntimeDescriptor RuntimeDescriptor { get; }
    [NotNullAttribute]
public ITestRunnerAdditionalStartupOptions StartupOptions { get; }
    [NotNullAttribute]
public IComponentContainer Container { get; }
    [NotNullAttribute]
public ITestRunnerAdapter Adapter { get; }
    [NotNullAttribute]
public XmlDocument RunSettings { get; }
    public abstract virtual Lifetime get_Lifetime();
    public abstract virtual ILogger get_Logger();
    public abstract virtual IUnitTestingSettings get_Settings();
    public abstract virtual ITestRunnerRuntimeDescriptor get_RuntimeDescriptor();
    public abstract virtual ITestRunnerAdditionalStartupOptions get_StartupOptions();
    public abstract virtual IComponentContainer get_Container();
    public abstract virtual ITestRunnerAdapter get_Adapter();
    public abstract virtual XmlDocument get_RunSettings();
    public abstract virtual FileSystemPath GetOutputPath();
    public abstract virtual TData GetSettings(ICachedSettingsReader`1<TData> reader);
}
public interface JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.ITestRunnerDiscoveryAgent {
    [NotNullAttribute]
public abstract virtual Task DiscoverTests(CancellationToken ct);
}
public interface JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.ITestRunnerDiscoveryContext {
    [NotNullAttribute]
public string UniqueId { get; }
    [NotNullAttribute]
public IProject Project { get; }
    [NotNullAttribute]
public TargetFrameworkId TargetFrameworkId { get; }
    [NotNullAttribute]
public UnitTestElementOrigin Origin { get; }
    [NotNullAttribute]
public IUnitTestElementCriterion Criterion { get; }
    public abstract virtual string get_UniqueId();
    public abstract virtual IProject get_Project();
    public abstract virtual TargetFrameworkId get_TargetFrameworkId();
    public abstract virtual UnitTestElementOrigin get_Origin();
    public abstract virtual IUnitTestElementCriterion get_Criterion();
}
public interface JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.ITestRunnerExecutionAgent {
    [NotNullAttribute]
public abstract virtual Task RunTests(CancellationToken cancelCt, CancellationToken abortCt);
}
public interface JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.ITestRunnerExecutionContext {
    [NotNullAttribute]
public IUnitTestRun Run { get; }
    [NotNullAttribute]
public bool IsRunFinished { get; public set; }
    public abstract virtual IUnitTestRun get_Run();
    public abstract virtual bool get_IsRunFinished();
    public abstract virtual void set_IsRunFinished(bool value);
}
public interface JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.ITestRunnerHost {
    [NotNullAttribute]
[ItemNotNullAttribute]
public IEnumerable`1<Assembly> InProcessAssemblies { get; }
    public abstract virtual IEnumerable`1<Assembly> get_InProcessAssemblies();
    [NotNullAttribute]
public abstract virtual IPreparedProcess StartProcess(ProcessStartInfo startInfo, ITestRunnerContext context);
}
public interface JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.ITestRunnerHostProvider {
    [CanBeNullAttribute]
public abstract virtual ITestRunnerHost TryGetHost(IProject project, TargetFrameworkId targetFrameworkId);
}
public interface JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.ITestRunnerHostSource {
    [NotNullAttribute]
public abstract virtual ITestRunnerHost GetHost(IProject project, TargetFrameworkId targetFrameworkId);
}
public interface JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.ITestRunnerRemoteTaskDepot {
    [CanBeNullAttribute]
public abstract virtual RemoteTask GetRemoteTask(IUnitTestElement element);
    public abstract virtual void CreateElementsFromTasks(RemoteTask[] tasks);
    public abstract virtual void CreateDynamicElements(RemoteTask[] task);
    public abstract virtual void WithElementFor(TMessage message, Action`2<TMessage, IUnitTestElement> action);
}
public interface JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.ITestRunnerRuntimeDescriptor {
    [NotNullAttribute]
public ITestRunnerHost TestRunnerHost { get; }
    public abstract virtual ITestRunnerHost get_TestRunnerHost();
}
public interface JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.IUnitTestElementToRemoteTaskMapper {
    [NotNullAttribute]
public abstract virtual RemoteTask GetRemoteTask(IUnitTestElement element, ITestRunnerExecutionContext ctx);
}
public interface JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.IUnitTestElementToRemoteTaskMapping`1 {
    [NotNullAttribute]
public abstract virtual RemoteTask GetRemoteTask(TElement element, ITestRunnerExecutionContext ctx);
}
public interface JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.IUnitTestElementToRemoteTaskMappingMarker {
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.MsTestAgentInfoProvider : MsTestAgentInfoProviderBase {
    public string InvalidInstallationFolderMessage { get; }
    public virtual string get_InvalidInstallationFolderMessage();
    public virtual FileSystemPath GetInstallationFolder();
}
public abstract class JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.MsTestAgentInfoProviderBase : object {
    public string InvalidInstallationFolderMessage { get; }
    public abstract virtual string get_InvalidInstallationFolderMessage();
    public abstract virtual FileSystemPath GetInstallationFolder();
    public sealed virtual bool IsValidInstallationFolder();
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.MsTestAgentInfoProviderExtensions : object {
    [ExtensionAttribute]
public static void WithAssemblyResolver(IMsTestAgentInfoProvider vsInfoProvider, Action action);
    [ExtensionAttribute]
[NotNullAttribute]
public static FileSystemPath GetPathToMsTestExe(IMsTestAgentInfoProvider vsInfoProvider);
    [ExtensionAttribute]
[NotNullAttribute]
public static FileSystemPath GetPathToDevEnvExe(IMsTestAgentInfoProvider vsInfoProvider);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static Version GetMsTestVersionInfo(IMsTestAgentInfoProvider vsInfoProvider);
    [ExtensionAttribute]
public static Version GetDevEnvVersionInfo(IMsTestAgentInfoProvider vsInfoProvider);
    [ExtensionAttribute]
public static FileSystemPath GetTestWindowFolder(IMsTestAgentInfoProvider vsInfoProvider);
    [ExtensionAttribute]
public static FileSystemPath GetTestHostFolder(IMsTestAgentInfoProvider vsInfoProvider);
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.RemoteTaskToUnitTestElementMapper : object {
    [NotNullAttribute]
private IDictionary`2<Type, IRemoteTaskToUnitTestElementMappingMarker> myBuilders;
    [NotNullAttribute]
private IList`1<Type> myKnownBuilderTypes;
    [NotNullAttribute]
private ConcurrentDictionary`2<Type, Type> myMappings;
    [NotNullAttribute]
private ConcurrentDictionary`2<Type, Func`4<RemoteTask, ITestRunnerDiscoveryContext, IUnitTestElementObserver, IUnitTestElement>> myFactories;
    public RemoteTaskToUnitTestElementMapper(IEnumerable`1<IRemoteTaskToUnitTestElementMappingMarker> builders);
    private static Type GetRemoteTaskType(IRemoteTaskToUnitTestElementMappingMarker builder);
    [LocalizableAttribute("False")]
public sealed virtual IUnitTestElement GetElement(RemoteTask task, ITestRunnerDiscoveryContext ctx, IUnitTestElementObserver observer);
    private Func`4<RemoteTask, ITestRunnerDiscoveryContext, IUnitTestElementObserver, IUnitTestElement> FactoryFactory(Type taskType);
    private Type GetBuilderType(Type taskType);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.RunSettings.DefaultRunSettingsFileProvider : RunSettingsFileProviderBase {
    public DefaultRunSettingsFileProvider(ISolution solution, ISettingsStore settingsStore);
    protected virtual string TryGetRunSettingsFilePath(IProject project, TargetFrameworkId targetFrameworkId);
}
[SolutionComponentAttribute("0")]
internal class JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.RunSettings.DisableParallelizationPostProcessor : object {
    [NotNullAttribute]
private IMsTestAgentInfoProvider myMsTestAgentInfoProvider;
    public DisableParallelizationPostProcessor(IMsTestAgentInfoProvider msTestAgentInfoProvider);
    public sealed virtual void ProcessRunSettings(IUnitTestRun run, XmlDocument runSettings);
}
[SolutionComponentAttribute("0")]
internal class JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.RunSettings.FakesDataCollectorPostProcessor : object {
    [NotNullAttribute]
private IMsTestAgentInfoProvider myAgentInfoProvider;
    [NotNullAttribute]
private IUnitTestProjectArtifactResolver myArtifactResolver;
    public FakesDataCollectorPostProcessor(IMsTestAgentInfoProvider agentInfoProvider, IUnitTestProjectArtifactResolver artifactResolver);
    public sealed virtual void ProcessRunSettings(IUnitTestRun run, XmlDocument runSettings);
    private void Add(IProject project, TargetFrameworkId targetFrameworkId, XmlDocument runSettings);
    private XElement CreateFakes10Collector(string configuration);
    private XElement CreateFakes20Collector(string configuration);
    private bool HasReferenceToFakes(IProject project, TargetFrameworkId targetFrameworkId);
}
public interface JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.RunSettings.IRunSettingsFileProvider {
    [CanBeNullAttribute]
public abstract virtual FileSystemPath GetRunConfigurationFile(IProject project, TargetFrameworkId targetFrameworkId);
}
public interface JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.RunSettings.IRunSettingsPostProcessor {
    public abstract virtual void ProcessRunSettings(IUnitTestRun run, XmlDocument runSettings);
}
public interface JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.RunSettings.IRunSettingsProvider {
    [NotNullAttribute]
public abstract virtual XmlDocument GetRunSettings(IUnitTestRun run, bool addDummyDataCollector, RunSettingsVersion version);
    [NotNullAttribute]
public abstract virtual XmlDocument GetRunSettings(IRuntimeDescriptorWithTargetFramework environment, RunSettingsVersion version);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.RunSettings.RunSettingsExtensions : object {
    [ExtensionAttribute]
public static IDictionary`2<string, string> GetEnvironmentVariables(XmlDocument runSettings);
    [ExtensionAttribute]
public static string TryGeDotNetHostPath(XmlDocument runSettings);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.RunSettings.RunSettingsFilePathPropertiesRequest : object {
    [NotNullAttribute]
public static string Property;
    public IEnumerable`1<string> RequestedProperties { get; }
    private static RunSettingsFilePathPropertiesRequest();
    public sealed virtual IEnumerable`1<string> get_RequestedProperties();
}
public abstract class JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.RunSettings.RunSettingsFileProviderBase : object {
    [NotNullAttribute]
protected ISolution Solution;
    [NotNullAttribute]
protected ISettingsStore SettingsStore;
    protected RunSettingsFileProviderBase(ISolution solution, ISettingsStore settingsStore);
    public virtual FileSystemPath GetRunConfigurationFile(IProject project, TargetFrameworkId targetFrameworkId);
    protected string TryGetFromProjectFile(IProject project, TargetFrameworkId targetFrameworkId);
    protected string TryGetFromSettings(IProject project);
    protected abstract virtual string TryGetRunSettingsFilePath(IProject project, TargetFrameworkId targetFrameworkId);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.RunSettings.RunSettingsProvider : object {
    [NotNullAttribute]
private IRunSettingsFileProvider myRunSettingsFileProvider;
    [NotNullAttribute]
private IEnumerable`1<IRunSettingsPostProcessor> myRunSettingsPostProcessors;
    [NotNullAttribute]
private ILogger myLogger;
    public RunSettingsProvider(IRunSettingsFileProvider runSettingsFileProvider, IEnumerable`1<IRunSettingsPostProcessor> runSettingsPostProcessors, ILogger logger);
    public sealed virtual XmlDocument GetRunSettings(IUnitTestRun run, bool addDummyDataCollector, RunSettingsVersion version);
    public sealed virtual XmlDocument GetRunSettings(IRuntimeDescriptorWithTargetFramework environment, RunSettingsVersion version);
    private XmlDocument Generate(IRuntimeDescriptorWithTargetFramework environment, bool createFromTemplateIfNotExists, bool addDummyDataCollector, RunSettingsVersion version);
}
public enum JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.RunSettings.RunSettingsVersion : Enum {
    public int value__;
    public static RunSettingsVersion MsTestV1;
    public static RunSettingsVersion MsTestV2;
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.TestRunnerAgentManager : object {
    [NotNullAttribute]
private ITestRunnerAgentPool myAgentPool;
    [NotNullAttribute]
private ILogger myLogger;
    public TestRunnerAgentManager(ITestRunnerAgentPool agentPool);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.TestRunnerAgentManager/<GetExecutionAgent>d__3")]
public sealed virtual Task`1<ITestRunnerExecutionAgent> GetExecutionAgent(ITestRunnerExecutionContext context, CancellationToken ct);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.TestRunnerAgentManager/<GetDiscoveryAgent>d__4")]
public sealed virtual Task`1<ITestRunnerDiscoveryAgent> GetDiscoveryAgent(ITestRunnerDiscoveryContext context, CancellationToken ct);
    private TAgent BindAgentToContext(ITestRunnerAgent agent, TContext context, Func`4<Lifetime, TContext, ITestRunnerAgent, TAgent> agentCtor);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.TestRunnerContextExtensions : object {
    [NotNullAttribute]
private static Key`1<ProcessStartInfo> ourStartInfoKey;
    private static TestRunnerContextExtensions();
    [ExtensionAttribute]
private static ITestRunnerRemoteTaskDepot Depot(ITestRunnerExecutionContext ctx);
    [ExtensionAttribute]
public static Guid Parent(ITestRunnerExecutionContext ctx, IUnitTestElement element);
    [ExtensionAttribute]
public static bool RunAllChildren(ITestRunnerExecutionContext ctx, IUnitTestElement element);
    [ExtensionAttribute]
public static bool IsRunExplicitly(ITestRunnerExecutionContext ctx, IUnitTestElement element);
    [ExtensionAttribute]
[NotNullAttribute]
[LocalizableAttribute("False")]
public static ProcessStartInfo ToTestRunnerStartInfo(ITestRunnerContext ctx, int port);
    [ExtensionAttribute]
[NotNullAttribute]
public static ProcessStartInfo ToComparableTestRunnerStartInfo(ITestRunnerContext ctx);
    [ExtensionAttribute]
[CanBeNullAttribute]
internal static IDictionary`2<string, string> GetEnvironmentVariables(ITestRunnerContext ctx);
    [ExtensionAttribute]
[LocalizableAttribute("False")]
internal static void CaptureOutputIfRequired(IPreparedProcess process, ITestRunnerContext ctx);
}
[SolutionComponentAttribute("16")]
internal class JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.TestRunnerHostSource : object {
    [NotNullAttribute]
private IEnumerable`1<ITestRunnerHostProvider> myProviders;
    public TestRunnerHostSource(IEnumerable`1<ITestRunnerHostProvider> providers);
    public sealed virtual ITestRunnerHost GetHost(IProject project, TargetFrameworkId targetFrameworkId);
}
public static class JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.TestRunnerInfo : object {
    [NotNullAttribute]
public static string TESTRUNNER_ENVIRONMENT_VARIABLE;
}
internal class JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.TestRunnerRemoteTaskDepot : object {
    [NotNullAttribute]
private ITestRunnerExecutionContext myContext;
    [NotNullAttribute]
private IUnitTestDiscoveryManager myDiscoveryManager;
    [NotNullAttribute]
private IUnitTestElementToRemoteTaskMapper myRemoteTaskFactory;
    [NotNullAttribute]
private IRemoteTaskToUnitTestElementMapper myElementFactory;
    [NotNullAttribute]
private IDictionary`2<IUnitTestElement, RemoteTask> myForward;
    [NotNullAttribute]
private IDictionary`2<Guid, IUnitTestElement> myBackward;
    private int System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<System.Guid,JetBrains.ReSharper.UnitTestFramework.Elements.IUnitTestElement>>.Count { get; }
    private IUnitTestElement System.Collections.Generic.IReadOnlyDictionary<System.Guid,JetBrains.ReSharper.UnitTestFramework.Elements.IUnitTestElement>.Item { get; }
    private IEnumerable`1<Guid> System.Collections.Generic.IReadOnlyDictionary<System.Guid,JetBrains.ReSharper.UnitTestFramework.Elements.IUnitTestElement>.Keys { get; }
    private IEnumerable`1<IUnitTestElement> System.Collections.Generic.IReadOnlyDictionary<System.Guid,JetBrains.ReSharper.UnitTestFramework.Elements.IUnitTestElement>.Values { get; }
    public TestRunnerRemoteTaskDepot(ITestRunnerExecutionContext context, IUnitTestDiscoveryManager discoveryManager, IUnitTestElementToRemoteTaskMapper remoteTaskFactory, IRemoteTaskToUnitTestElementMapper elementFactory);
    public sealed virtual RemoteTask GetRemoteTask(IUnitTestElement element);
    public sealed virtual void WithElementFor(TMessage message, Action`2<TMessage, IUnitTestElement> action);
    [CanBeNullAttribute]
private IUnitTestElement GetElement(ITestMessage message);
    public sealed virtual void CreateElementsFromTasks(RemoteTask[] tasks);
    public sealed virtual void CreateDynamicElements(RemoteTask[] tasks);
    [NotNullAttribute]
private IUnitTestTransactionCommitResult CreateElementsAndCommit(UnitTestElementOrigin origin, RemoteTask[] tasks);
    private sealed virtual override int System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<System.Guid,JetBrains.ReSharper.UnitTestFramework.Elements.IUnitTestElement>>.get_Count();
    private sealed virtual override bool System.Collections.Generic.IReadOnlyDictionary<System.Guid,JetBrains.ReSharper.UnitTestFramework.Elements.IUnitTestElement>.ContainsKey(Guid key);
    private sealed virtual override bool System.Collections.Generic.IReadOnlyDictionary<System.Guid,JetBrains.ReSharper.UnitTestFramework.Elements.IUnitTestElement>.TryGetValue(Guid key, IUnitTestElement& value);
    private sealed virtual override IUnitTestElement System.Collections.Generic.IReadOnlyDictionary<System.Guid,JetBrains.ReSharper.UnitTestFramework.Elements.IUnitTestElement>.get_Item(Guid key);
    private sealed virtual override IEnumerable`1<Guid> System.Collections.Generic.IReadOnlyDictionary<System.Guid,JetBrains.ReSharper.UnitTestFramework.Elements.IUnitTestElement>.get_Keys();
    private sealed virtual override IEnumerable`1<IUnitTestElement> System.Collections.Generic.IReadOnlyDictionary<System.Guid,JetBrains.ReSharper.UnitTestFramework.Elements.IUnitTestElement>.get_Values();
    private sealed virtual override IEnumerator`1<KeyValuePair`2<Guid, IUnitTestElement>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Guid,JetBrains.ReSharper.UnitTestFramework.Elements.IUnitTestElement>>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [CompilerGeneratedAttribute]
private RemoteTask <GetRemoteTask>b__7_0(IUnitTestElement e);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.TestRunnerRemoteTaskDepotExtensions : object {
    [NotNullAttribute]
internal static Key`1<ITestRunnerRemoteTaskDepot> DepotKey;
    private static TestRunnerRemoteTaskDepotExtensions();
    [ExtensionAttribute]
[NotNullAttribute]
public static ITestRunnerRemoteTaskDepot GetRemoteTaskDepot(IUnitTestRun run);
    [ExtensionAttribute]
[NotNullAttribute]
[ItemNotNullAttribute]
public static RemoteTask[] GetRemoteTasks(ITestRunnerRemoteTaskDepot depot, IUnitTestRun run);
}
public abstract class JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.TestRunnerRunStrategy : object {
    [NotNullAttribute]
public static Key`1<IPreparedProcess> AgentProcessKey;
    [NotNullAttribute]
private static Key`1<CancellationTokenSource> ourCancelTcsKey;
    [NotNullAttribute]
private static Key`1<CancellationTokenSource> ourAbortTcsKey;
    [NotNullAttribute]
private IDataCollectorFactory myDataCollectorFactory;
    [NotNullAttribute]
private ITestRunnerAgentManager myAgentManager;
    [NotNullAttribute]
private IUnitTestProjectArtifactResolver myArtifactResolver;
    [NotNullAttribute]
private ITestRunnerAdapter myAdapter;
    protected TestRunnerRunStrategy(IDataCollectorFactory dataCollectorFactory, ITestRunnerAgentManager agentManager, ITestRunnerAdapter adapter, IUnitTestProjectArtifactResolver artifactResolver);
    private static TestRunnerRunStrategy();
    public sealed virtual bool RequiresProjectBuild(IProject project);
    public sealed virtual bool RequiresProjectExplorationAfterBuild(IProject project);
    public sealed virtual IProject GetProjectForPropertiesRefreshBeforeLaunch(IUnitTestElement element);
    public sealed virtual bool SupportsPreloading();
    public virtual IRuntimeDescriptor GetRuntimeDescriptor(IUnitTestLaunch launch, IUnitTestElement element);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.TestRunnerRunStrategy/<Run>d__14")]
public sealed virtual Task Run(IUnitTestRun run);
    private void AnalyseProcessCrash(ProcessExitedUnexpectedlyException ex, IUnitTestRun run);
    private IDataCollector StartDataCollector(IUnitTestRun run, CancellationTokenSource cancelCts, CancellationTokenSource abortCts);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.TestRunnerRunStrategy/<StartTestRunner>d__17")]
private Task`1<DisposableAgentWrapper> StartTestRunner(IUnitTestRun run, ITestRunnerAdditionalStartupOptions environmentSpecifier, CancellationToken cancelCt, CancellationToken abortCt);
    public sealed virtual void Cancel(IUnitTestRun run);
    public sealed virtual void Abort(IUnitTestRun run);
}
public abstract class JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.TestRunnerRuntimeDescriptor : object {
    [CompilerGeneratedAttribute]
private ITestRunnerHost <TestRunnerHost>k__BackingField;
    [CompilerGeneratedAttribute]
private TargetPlatform <Platform>k__BackingField;
    [CompilerGeneratedAttribute]
private IProject <Project>k__BackingField;
    [CompilerGeneratedAttribute]
private TargetFrameworkId <TargetFrameworkId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasNativeCode>k__BackingField;
    public ITestRunnerHost TestRunnerHost { get; }
    public TargetPlatform Platform { get; }
    public IProject Project { get; }
    public TargetFrameworkId TargetFrameworkId { get; }
    public bool HasNativeCode { get; }
    protected TestRunnerRuntimeDescriptor(ITestRunnerHost host, IUnitTestLaunch launch, IProject project, TargetFrameworkId targetFrameworkId, Nullable`1<TargetPlatform> platform);
    [CompilerGeneratedAttribute]
public sealed virtual ITestRunnerHost get_TestRunnerHost();
    [CompilerGeneratedAttribute]
public sealed virtual TargetPlatform get_Platform();
    [CompilerGeneratedAttribute]
public sealed virtual IProject get_Project();
    [CompilerGeneratedAttribute]
public sealed virtual TargetFrameworkId get_TargetFrameworkId();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasNativeCode();
    protected virtual TargetPlatform CalculatePlatform(IUnitTestLaunch launch, IProject project, TargetFrameworkId targetFrameworkId);
    protected virtual bool CalculateHasNativeCode(IUnitTestLaunch launch, TargetFrameworkId tf);
    protected virtual TargetFrameworkId CalculateRunAsTargetFramework(IUnitTestLaunch launch, TargetFrameworkId defaultTf);
    protected bool Equals(TestRunnerRuntimeDescriptor other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static IRuntimeDescriptor Create(IUnitTestLaunch launch, IUnitTestElement element, Nullable`1<TargetPlatform> platform);
    [NotNullAttribute]
public static ITestRunnerRuntimeDescriptor Create(IUnitTestElementObserver observer);
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.UnitTestElementToRemoteTaskMapper : object {
    [NotNullAttribute]
private IDictionary`2<Type, IUnitTestElementToRemoteTaskMappingMarker> myBuilders;
    [NotNullAttribute]
private IList`1<Type> myKnownBuilderTypes;
    [NotNullAttribute]
private ConcurrentDictionary`2<Type, Type> myMappings;
    [NotNullAttribute]
private ConcurrentDictionary`2<Type, Func`3<IUnitTestElement, ITestRunnerExecutionContext, RemoteTask>> myFactories;
    public UnitTestElementToRemoteTaskMapper(IEnumerable`1<IUnitTestElementToRemoteTaskMappingMarker> builders);
    private static Type GetElementType(IUnitTestElementToRemoteTaskMappingMarker builder);
    public sealed virtual RemoteTask GetRemoteTask(IUnitTestElement element, ITestRunnerExecutionContext ctx);
    private Func`3<IUnitTestElement, ITestRunnerExecutionContext, RemoteTask> FactoryFactory(Type elementType);
    private Type GetBuilderType(Type elementType);
}
public interface JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.Uwp.IUwpDebuggerLauncher {
    [NotNullAttribute]
public abstract virtual Task`1<int> LaunchDebugger(ITestRunnerExecutionContext context, UwpProcessStartRequest request);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.Uwp.NoopUwpDebuggerLauncher : object {
    public sealed virtual Task`1<int> LaunchDebugger(ITestRunnerExecutionContext context, UwpProcessStartRequest request);
}
internal class JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.Uwp.UwpProcessStartRequestHandler : object {
    [NotNullAttribute]
private ITestRunnerExecutionContext myContext;
    public UwpProcessStartRequestHandler(ITestRunnerExecutionContext context);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.Uwp.UwpProcessStartRequestHandler/<Execute>d__2")]
public sealed virtual Task`1<UwpProcessStartResult> Execute(UwpProcessStartRequest message);
}
internal class JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.Uwp.UwpTestRunnerHost : DefaultTestRunnerHost {
    [NotNullAttribute]
public static ITestRunnerHost Instance;
    public IEnumerable`1<Assembly> InProcessAssemblies { get; }
    private static UwpTestRunnerHost();
    public virtual IEnumerable`1<Assembly> get_InProcessAssemblies();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.Uwp.UwpTestRunnerHost/<GetMessageHandlers>d__3")]
public virtual IEnumerable`1<IMessageHandlerMarker> GetMessageHandlers(ITestRunnerContext ctx);
    public virtual IPreparedProcess StartProcess(ProcessStartInfo startInfo, ITestRunnerContext context);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<IMessageHandlerMarker> <>n__0(ITestRunnerContext ctx);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.Uwp.UwpTestRunnerHostProvider : object {
    public sealed virtual ITestRunnerHost TryGetHost(IProject project, TargetFrameworkId targetFrameworkId);
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.UnitTestFramework.Execution.UnitTestLaunchHistory : object {
    private ISolution mySolution;
    private UnitTestHost myHost;
    private OptimizedPersistentSortedMap`2<Guid, LaunchData> myLaunchHistory;
    public UnitTestLaunchHistory(Lifetime lifetime, ISolution solution, IPersistentIndexManager persistentIndexManager, UnitTestHost host);
    public sealed virtual bool HasPreviousRunForSession(IUnitTestSession session);
    public sealed virtual void RepeatPreviousRunForSession(IUnitTestSession session);
    public sealed virtual void SaveRunForSession(IUnitTestLaunch launch);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.UnitTestFramework.Execution.UnitTestLaunchManager : object {
    private ISolution mySolution;
    private IThreading myThreading;
    private List`1<IUnitTestLaunch> myLaunches;
    private IUnitTestArtifactExplorationProcess myBackgroundExplorer;
    public UnitTestLaunchManager(ISolution solution, IThreading threading, IUnitTestArtifactExplorationProcess backgroundExplorer);
    public sealed virtual IUnitTestRun GetRun(string runId);
    public sealed virtual IUnitTestLaunch GetLaunch(string launchId);
    public sealed virtual IUnitTestLaunch BuildAndRunSession(IUnitTestSession session, UnitTestElements elements, IHostProvider hostProvider, Nullable`1<BuildPolicy> buildPolicy, Nullable`1<PlatformType> platformType, Nullable`1<PlatformVersion> frameworkVersion, Nullable`1<PlatformMonoPreference> platformMonoPreference, bool isRepeatedLaunch);
    public sealed virtual IUnitTestLaunch CreateLaunch(IUnitTestSession session, UnitTestElements elements, IHostProvider hostProvider, Nullable`1<BuildPolicy> buildPolicy, Nullable`1<PlatformType> platformType, Nullable`1<PlatformVersion> frameworkVersion, Nullable`1<PlatformMonoPreference> platformMonoPreference, bool isRepeatedLaunch);
}
public class JetBrains.ReSharper.UnitTestFramework.Execution.UnitTestRecentResultEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IUnitTestElement <Element>k__BackingField;
    [CompilerGeneratedAttribute]
private UnitTestResultWithPropagation <Result>k__BackingField;
    [NotNullAttribute]
public IUnitTestElement Element { get; }
    [NotNullAttribute]
public UnitTestResultWithPropagation Result { get; }
    public UnitTestRecentResultEventArgs(IUnitTestElement element, UnitTestResultWithPropagation result);
    [CompilerGeneratedAttribute]
public IUnitTestElement get_Element();
    [CompilerGeneratedAttribute]
public UnitTestResultWithPropagation get_Result();
}
public class JetBrains.ReSharper.UnitTestFramework.Execution.UnitTestResult : object {
    [NotNullAttribute]
public static UnitTestResult Empty;
    public UnitTestStatus Status;
    public bool Outdated;
    public string ShortMessage;
    public DateTime StartTime;
    public DateTime EndTime;
    public TimeSpan Duration;
    private static UnitTestResult();
    public UnitTestResult Clone();
    public TestDurationGrade GetDurationGrade(TestGradationByDuration gradationValues);
    public sealed virtual bool Equals(UnitTestResult other);
    public virtual string ToString();
}
public class JetBrains.ReSharper.UnitTestFramework.Execution.UnitTestResultData : object {
    [NotNullAttribute]
public static UnitTestResultData Empty;
    private OptimizedPersistentSortedMap`2<UnitTestOutputChunkKey, TestException> myExceptions;
    private OptimizedPersistentSortedMap`2<UnitTestOutputChunkKey, string> myOutput;
    [NotNullAttribute]
public Guid SessionId;
    [NotNullAttribute]
public Int32`1<IUnitTestElement> ElementId;
    [CompilerGeneratedAttribute]
private int <ExceptionCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <OutputChunksCount>k__BackingField;
    public int ExceptionCount { get; private set; }
    public int OutputChunksCount { get; private set; }
    public UnitTestResultData(OptimizedPersistentSortedMap`2<UnitTestOutputChunkKey, TestException> exceptions, OptimizedPersistentSortedMap`2<UnitTestOutputChunkKey, string> output, IUnitTestSession session, IUnitTestElement element);
    private UnitTestResultData(OptimizedPersistentSortedMap`2<UnitTestOutputChunkKey, TestException> exceptions, OptimizedPersistentSortedMap`2<UnitTestOutputChunkKey, string> output, Guid sessionId, Int32`1<IUnitTestElement> elementId, int exceptionCount, int outputChunksCount);
    private static UnitTestResultData();
    [CompilerGeneratedAttribute]
public int get_ExceptionCount();
    [CompilerGeneratedAttribute]
private void set_ExceptionCount(int value);
    [CompilerGeneratedAttribute]
public int get_OutputChunksCount();
    [CompilerGeneratedAttribute]
private void set_OutputChunksCount(int value);
    public void AddException(TestException info);
    public void AddOutput(string output);
    [NotNullAttribute]
public TestException GetExceptionInfo(int pos);
    public string GetOutputChunk(int chunkNumber);
    public void Clear();
    public static int GetLineCount(string chunk);
}
public class JetBrains.ReSharper.UnitTestFramework.Execution.UnitTestResultDataEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IUnitTestSession <Session>k__BackingField;
    [CompilerGeneratedAttribute]
private IUnitTestElement <Element>k__BackingField;
    [CompilerGeneratedAttribute]
private UnitTestResultData <ResultData>k__BackingField;
    [NotNullAttribute]
public IUnitTestSession Session { get; }
    [NotNullAttribute]
public IUnitTestElement Element { get; }
    [NotNullAttribute]
public UnitTestResultData ResultData { get; }
    public UnitTestResultDataEventArgs(IUnitTestSession session, IUnitTestElement element, UnitTestResultData resultData);
    [CompilerGeneratedAttribute]
public IUnitTestSession get_Session();
    [CompilerGeneratedAttribute]
public IUnitTestElement get_Element();
    [CompilerGeneratedAttribute]
public UnitTestResultData get_ResultData();
}
public class JetBrains.ReSharper.UnitTestFramework.Execution.UnitTestResultEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IUnitTestSession <Session>k__BackingField;
    [CompilerGeneratedAttribute]
private IUnitTestElement <Element>k__BackingField;
    [CompilerGeneratedAttribute]
private UnitTestResult <Result>k__BackingField;
    [CompilerGeneratedAttribute]
private UnitTestResult <ResultOld>k__BackingField;
    [NotNullAttribute]
public IUnitTestSession Session { get; }
    [NotNullAttribute]
public IUnitTestElement Element { get; }
    [NotNullAttribute]
public UnitTestResult Result { get; }
    [NotNullAttribute]
public UnitTestResult ResultOld { get; }
    public UnitTestResultEventArgs(IUnitTestSession session, IUnitTestElement element, UnitTestResult result, UnitTestResult resultOld);
    [CompilerGeneratedAttribute]
public IUnitTestSession get_Session();
    [CompilerGeneratedAttribute]
public IUnitTestElement get_Element();
    [CompilerGeneratedAttribute]
public UnitTestResult get_Result();
    [CompilerGeneratedAttribute]
public UnitTestResult get_ResultOld();
}
[ExtensionAttribute]
internal static class JetBrains.ReSharper.UnitTestFramework.Execution.UnitTestResultExtensions : object {
    [ExtensionAttribute]
public static int FailedCount(UnitTestResultWithPropagation result);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.UnitTestFramework.Execution.UnitTestResultManagerExtensions : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static UnitTestResultWithPropagation GetResult(IUnitTestResultManager manager, IUnitTestElement element);
    [ExtensionAttribute]
[NotNullAttribute]
public static UnitTestResult GetResult(IUnitTestResultManager manager, IUnitTestElement element, IUnitTestSession session);
    [ExtensionAttribute]
[NotNullAttribute]
public static UnitTestResultData GetResultData(IUnitTestResultManager manager, IUnitTestElement element, IUnitTestSession session);
    [ExtensionAttribute]
public static void RemoveResult(IUnitTestResultManager manager, IUnitTestElement element, IUnitTestSession session);
    [ExtensionAttribute]
public static void MarkOutdated(IUnitTestResultManager manager, IUnitTestElement element, IUnitTestSession session);
    [ExtensionAttribute]
public static void MarkOutdated(IUnitTestResultManager manager, IUnitTestElement element);
    [ExtensionAttribute]
public static void MarkPending(IUnitTestResultManager manager, IUnitTestElement element, IUnitTestSession session);
    [ExtensionAttribute]
public static void MarkIgnored(IUnitTestResultManager manager, IUnitTestElement element, IUnitTestSession session, string reason);
    [ExtensionAttribute]
public static void TestStarting(IUnitTestResultManager manager, IUnitTestElement element, IUnitTestSession session);
    [ExtensionAttribute]
public static void TestAborting(IUnitTestResultManager manager, IUnitTestElement element, IUnitTestSession session, string message);
    [ExtensionAttribute]
public static void TestFinishing(IUnitTestResultManager manager, IUnitTestElement element, IUnitTestSession session, UnitTestStatus status, string message, Nullable`1<TimeSpan> duration);
    [ExtensionAttribute]
public static void TestOutput(IUnitTestResultManager manager, IUnitTestElement element, IUnitTestSession session, string text, TestOutputType type);
    [ExtensionAttribute]
public static void TestException(IUnitTestResultManager manager, IUnitTestElement element, IUnitTestSession session, IEnumerable`1<TestException> exceptions);
    [ExtensionAttribute]
[NotNullAttribute]
[ItemNotNullAttribute]
public static IDictionary`2<IUnitTestElement, UnitTestResult> GetResults(IUnitTestResultManager resultManager, IEnumerable`1<IUnitTestElement> elements, IUnitTestSession session);
    [ExtensionAttribute]
public static void MarkPending(IUnitTestResultManager resultManager, IEnumerable`1<IUnitTestElement> elements, IUnitTestSession session);
    [ExtensionAttribute]
public static void RemoveResults(IUnitTestResultManager resultManager, IEnumerable`1<Int32`1<IUnitTestElement>> elements, IUnitTestSession session);
}
[DebuggerDisplayAttribute("{AggregatedStatus.DumpState()}")]
public class JetBrains.ReSharper.UnitTestFramework.Execution.UnitTestResultPropagationData : object {
    public AggregatedTestStatus AggregatedStatus;
    public int OutdatedCount;
    public int FailedCount;
    public TimeSpan Duration;
    public void Add(UnitTestResult result);
    public void Remove(UnitTestResult result);
}
internal class JetBrains.ReSharper.UnitTestFramework.Execution.UnitTestResultPropagationDataMalformed : Exception {
    public UnitTestResultPropagationDataMalformed(string message);
}
public class JetBrains.ReSharper.UnitTestFramework.Execution.UnitTestResultWithPropagation : object {
    [NotNullAttribute]
public static UnitTestResultWithPropagation Empty;
    public UnitTestStatusTuple Status;
    public bool Outdated;
    public string ShortMessage;
    public DateTime StartTime;
    public DateTime EndTime;
    public TimeSpan Duration;
    public int ChildrenFailCount;
    public UnitTestResultPropagationData PropagationData;
    private static UnitTestResultWithPropagation();
    public UnitTestResultWithPropagation Clone();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(UnitTestResultWithPropagation other);
    public virtual string ToString();
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.UnitTestFramework.Execution.UnitTestSolutionBuilder : object {
    private Lifetime myLifetime;
    private ISolution mySolution;
    private IShellLocks myShellLocks;
    private ISolutionBuilder mySolutionBuilder;
    private ILogger myLogger;
    private bool myAborted;
    private ISet`1<ISolutionBuilderRequest> myOwnBuilds;
    public UnitTestSolutionBuilder(Lifetime lifetime, ISolution solution, IShellLocks shellLocks, ISolutionBuilder solutionBuilder);
    public virtual void BuildProjects(Lifetime lifetime, ProjectsToBuild targetProjects, BuildPolicy buildPolicy, Action`1<ISet`1<IProject>> successAction, Action`1<IEnumerable`1<string>> funcFailed);
    protected virtual SolutionBuilderRequestAdvancedSettings GetRequestAdvancedSettings(ProjectsToBuild targetProjects);
    public virtual void AbortBuild();
    public sealed virtual bool IsOwnBuild(ISolutionBuilderRequest buildRequest);
    private void BuildProjects(Lifetime lifetime, ProjectsToBuild targetProjects, Action successAction, Action`1<List`1<string>> funcFailed);
    private void BuildProjects_SolBuilder(Lifetime lifetime, ProjectsToBuild projectsToBuild, Action`2<SolutionBuilderRequest, List`1<string>> funcCompleted);
    private void PresentBuildErrors(SolutionBuilderRequest request, List`1<string> arProjectBuildErrors);
}
[IsReadOnlyAttribute]
public class JetBrains.ReSharper.UnitTestFramework.Execution.UnitTestStatus : ValueType {
    private static byte ourFlagsRegistry;
    private static IDictionary`2<byte, string> ourNamesRegistry;
    public static UnitTestStatus None;
    public static UnitTestStatus Unknown;
    public static UnitTestStatus Inconclusive;
    public static UnitTestStatus Ignored;
    public static UnitTestStatus Success;
    public static UnitTestStatus Failed;
    public static UnitTestStatus Aborted;
    public static UnitTestStatus Pending;
    public static UnitTestStatus Running;
    public static UnitTestStatus All;
    private byte myFlagValue;
    private UnitTestStatus(byte flagValue);
    private static UnitTestStatus();
    private static UnitTestStatus RegisterAtomicUnitTestStatus(byte flagValue, string name);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Execution.UnitTestStatus/<GetAtomicNonEmptyStatuses>d__15")]
[NotNullAttribute]
public static IEnumerable`1<UnitTestStatus> GetAtomicNonEmptyStatuses();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Execution.UnitTestStatus/<GetAtomicStatuses>d__16")]
[NotNullAttribute]
public static IEnumerable`1<UnitTestStatus> GetAtomicStatuses();
    public bool Has(UnitTestStatus status);
    public bool HasOnly(UnitTestStatus status);
    public sealed virtual bool Equals(UnitTestStatus other);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public static bool op_Equality(UnitTestStatus left, UnitTestStatus right);
    public static bool op_Inequality(UnitTestStatus left, UnitTestStatus right);
    public static UnitTestStatus op_BitwiseOr(UnitTestStatus left, UnitTestStatus right);
    public static UnitTestStatus op_BitwiseAnd(UnitTestStatus left, UnitTestStatus right);
    public static UnitTestStatus op_OnesComplement(UnitTestStatus value);
    public static byte op_Implicit(UnitTestStatus value);
    public static UnitTestStatus op_Implicit(byte value);
    public virtual string ToString();
    public UnitTestStatus ToHighestStatus();
    public UnitTestStatus GetResultStatus();
    public static UnitTestStatus Max(UnitTestStatus left, UnitTestStatus right);
    public static UnitTestStatus Min(UnitTestStatus left, UnitTestStatus right);
}
[IsReadOnlyAttribute]
public class JetBrains.ReSharper.UnitTestFramework.Execution.UnitTestStatusTuple : ValueType {
    public static UnitTestStatusTuple Empty;
    [CompilerGeneratedAttribute]
private UnitTestStatus <Own>k__BackingField;
    [CompilerGeneratedAttribute]
private UnitTestStatus <Propagated>k__BackingField;
    public UnitTestStatus Own { get; }
    public UnitTestStatus Propagated { get; }
    public UnitTestStatus Merged { get; }
    public UnitTestStatusTuple(UnitTestStatus ownStatus, UnitTestStatus propagatedStatus);
    private static UnitTestStatusTuple();
    [CompilerGeneratedAttribute]
public UnitTestStatus get_Own();
    [CompilerGeneratedAttribute]
public UnitTestStatus get_Propagated();
    public UnitTestStatus get_Merged();
    public bool Has(UnitTestStatus status);
    public bool HasOnly(UnitTestStatus status);
    public UnitTestStatus GetCurrentStatus();
    public UnitTestStatus GetResultStatus();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public bool Equals(UnitTestStatusTuple other);
    public virtual int GetHashCode();
    public static UnitTestStatus op_Implicit(UnitTestStatusTuple tuple);
    public static bool op_Equality(UnitTestStatusTuple x, UnitTestStatusTuple y);
    public static bool op_Inequality(UnitTestStatusTuple x, UnitTestStatusTuple y);
}
[DebuggerDisplayAttribute("Cached = {InnerResult}, Outcome = {Outcome}")]
public class JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.CachedExplorationResult : object {
    [CompilerGeneratedAttribute]
private IExplorationResult <InnerResult>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Duration>k__BackingField;
    [NotNullAttribute]
public IExplorationResult InnerResult { get; }
    public IExplorationDetails Details { get; }
    public ExplorationOutcome Outcome { get; }
    public TimeSpan Duration { get; public set; }
    public CachedExplorationResult(IExplorationResult innerResult);
    [CompilerGeneratedAttribute]
public IExplorationResult get_InnerResult();
    public sealed virtual IExplorationDetails get_Details();
    public sealed virtual ExplorationOutcome get_Outcome();
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_Duration();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Duration(TimeSpan value);
    public sealed virtual void Accept(IExplorationResultVisitor visitor);
}
[SolutionComponentAttribute("0")]
internal class JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.CachingUnitTestArtifactExplorationRunner : object {
    [NotNullAttribute]
private IUnitTestArtifactExplorationRunner myInnerRunner;
    [NotNullAttribute]
private IEventContext myEventContext;
    [NotNullAttribute]
private ILogger myLogger;
    [NotNullAttribute]
private TimeStampBasedCaching myCachingStrategy;
    [NotNullAttribute]
private Dictionary`2<string, Dictionary`2<string, Dictionary`2<string, CachedResult>>> myCachedResults;
    public CachingUnitTestArtifactExplorationRunner(UnitTestArtifactExplorationRunner innerRunner, IEventContext eventContext, ILogger logger);
    internal CachingUnitTestArtifactExplorationRunner(IUnitTestArtifactExplorationRunner innerRunner, IEventContext eventContext, ILogger logger);
    public sealed virtual void InvalidateAll();
    public sealed virtual void Invalidate(string projectPersistentId);
    public sealed virtual void Invalidate(string projectPersistentId, TargetFrameworkId targetFrameworkId);
    public sealed virtual IExplorationResult TryGetResult(IExplorationTarget target);
    public sealed virtual IExplorationResult TryGetResultOrPromise(IExplorationTarget target);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.CachingUnitTestArtifactExplorationRunner/<ProcessProject>d__12")]
public sealed virtual Task`1<IExplorationResult> ProcessProject(IExplorationTarget target, CancellationToken token);
    public sealed virtual IExplorationResult Promise(IExplorationTarget target);
    [CompilerGeneratedAttribute]
private CachedResult <ProcessProject>b__12_2();
}
[SolutionComponentAttribute("16")]
internal class JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.CustomOutputFolderCollaborator : object {
    [NotNullAttribute]
private IUnitTestingSettings mySettings;
    public CustomOutputFolderCollaborator(IUnitTestingSettings settings);
    public sealed virtual bool CanResolveArtifact(IProject project, TargetFrameworkId targetFrameworkId);
    public sealed virtual FileSystemPath ResolveArtifact(IProject project, TargetFrameworkId targetFrameworkId);
}
public enum JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.DiscoveryMethod : Enum {
    public int value__;
    public static DiscoveryMethod Metadata;
    public static DiscoveryMethod TestRunner;
}
[DebuggerDisplayAttribute("Exception = {Exception}")]
public class JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.ExceptionDetails : AAutomation {
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    public Exception Exception { get; }
    public ExceptionDetails(Exception exception);
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    private sealed virtual override void JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.IExplorationDetails.Accept(IExplorationResultVisitor visitor);
    public virtual string ToString();
}
public enum JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.ExplorationOutcome : Enum {
    public int value__;
    public static ExplorationOutcome None;
    public static ExplorationOutcome Skipped;
    public static ExplorationOutcome Success;
    public static ExplorationOutcome Faulted;
    public static ExplorationOutcome Aborted;
}
public class JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.ExplorationResult : object {
    [NotNullAttribute]
private static ExplorationResult ourSuccess;
    [NotNullAttribute]
private static ExplorationResult ourSkipped;
    [NotNullAttribute]
private static ExplorationResult ourAborted;
    [CompilerGeneratedAttribute]
private ExplorationOutcome <Outcome>k__BackingField;
    [CompilerGeneratedAttribute]
private IExplorationDetails <Details>k__BackingField;
    [NotNullAttribute]
public ExplorationOutcome Outcome { get; }
    [CanBeNullAttribute]
public IExplorationDetails Details { get; }
    [NotNullAttribute]
public static ExplorationResult Success { get; }
    public ExplorationResult(ExplorationOutcome outcome, IExplorationDetails details);
    public ExplorationResult(ExplorationOutcome outcome, string reason);
    public ExplorationResult(Exception exception);
    private static ExplorationResult();
    [CompilerGeneratedAttribute]
public ExplorationOutcome get_Outcome();
    [CompilerGeneratedAttribute]
public IExplorationDetails get_Details();
    [NotNullAttribute]
public static ExplorationResult Aborted(string reason);
    [NotNullAttribute]
public static ExplorationResult Failed(string reason);
    [NotNullAttribute]
public static ExplorationResult Failed(Exception exception);
    [NotNullAttribute]
public static ExplorationResult Failed(IExplorationDetails details);
    [NotNullAttribute]
public static ExplorationResult Skipped(string reason);
    public static ExplorationResult get_Success();
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.ExplorationResultExtensions : object {
    [ExtensionAttribute]
[NotNullAttribute]
internal static T WithDuration(T result, Stopwatch timer);
    [ExtensionAttribute]
[NotNullAttribute]
internal static Pair`2[] GetSensitiveData(IExplorationResult result);
    [ExtensionAttribute]
[NotNullAttribute]
internal static IExplorationResult AsPromise(IExplorationResult result);
}
public abstract class JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.ExplorationResultVisitor : object {
    public virtual void VisitResult(IExplorationResult result);
    public virtual void VisitExplorerResult(ExplorerExplorationResult result);
    public virtual void VisitProviderResult(ProviderExplorationResult result);
    public virtual void VisitTargetFrameworkResult(TargetFrameworkExplorationResult result);
    public virtual void VisitProjectResult(ProjectExplorationResult result);
    public virtual void VisitCachedResult(CachedExplorationResult result);
    public virtual void VisitPromisedResult(PromisedExplorationResult result);
    public virtual void VisitDetails(IExplorationDetails details);
    public virtual void VisitExceptionDetails(ExceptionDetails details);
    public virtual void VisitReasonDetails(ReasonDetails details);
    public virtual void VisitSummaryDetails(SummaryDetails details);
}
public class JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.ExplorationTarget : object {
    [NotNullAttribute]
private Lazy`1<FileSystemPath> myOutput;
    [CompilerGeneratedAttribute]
private IProject <Project>k__BackingField;
    [CompilerGeneratedAttribute]
private TargetFrameworkId <TargetFrameworkId>k__BackingField;
    [CompilerGeneratedAttribute]
private IUnitTestProvider <Provider>k__BackingField;
    [NotNullAttribute]
public IProject Project { get; }
    [NotNullAttribute]
public TargetFrameworkId TargetFrameworkId { get; }
    [NotNullAttribute]
public IUnitTestProvider Provider { get; }
    [NotNullAttribute]
public FileSystemPath Output { get; }
    public ExplorationTarget(IProject project, TargetFrameworkId targetFrameworkId, IUnitTestProvider provider, FileSystemPath output);
    [CompilerGeneratedAttribute]
public sealed virtual IProject get_Project();
    [CompilerGeneratedAttribute]
public sealed virtual TargetFrameworkId get_TargetFrameworkId();
    [CompilerGeneratedAttribute]
public sealed virtual IUnitTestProvider get_Provider();
    public sealed virtual FileSystemPath get_Output();
    private bool Equals(ExplorationTarget other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.ExplorerExplorationFinished : EventArgs {
    [CompilerGeneratedAttribute]
private ExplorerExplorationResult <Result>k__BackingField;
    [NotNullAttribute]
public IProject Project { get; }
    [NotNullAttribute]
public TargetFrameworkId TargetFrameworkId { get; }
    [NotNullAttribute]
public IUnitTestProvider Provider { get; }
    [NotNullAttribute]
public FileSystemPath Output { get; }
    [NotNullAttribute]
public IUnitTestExplorerFromArtifacts Explorer { get; }
    [NotNullAttribute]
public ExplorerExplorationResult Result { get; }
    private IExplorationResult JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.IExplorationFinishedEventArgs.Result { get; }
    public ExplorerExplorationFinished(ExplorerExplorationResult result);
    public sealed virtual IProject get_Project();
    public sealed virtual TargetFrameworkId get_TargetFrameworkId();
    public sealed virtual IUnitTestProvider get_Provider();
    public sealed virtual FileSystemPath get_Output();
    public sealed virtual IUnitTestExplorerFromArtifacts get_Explorer();
    [CompilerGeneratedAttribute]
public ExplorerExplorationResult get_Result();
    private sealed virtual override string JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.IExplorationEventArgs.GetTargetPresentation();
    private sealed virtual override IExplorationResult JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.IExplorationFinishedEventArgs.get_Result();
}
[DebuggerDisplayAttribute("Explorer = {Explorer.GetType().Name}, Outcome = {Outcome}")]
public class JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.ExplorerExplorationResult : object {
    [CompilerGeneratedAttribute]
private IExplorationTarget <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private IUnitTestExplorerFromArtifacts <Explorer>k__BackingField;
    [CompilerGeneratedAttribute]
private ExplorationOutcome <Outcome>k__BackingField;
    [CompilerGeneratedAttribute]
private IExplorationDetails <Details>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Duration>k__BackingField;
    [NotNullAttribute]
internal IExplorationTarget Target { get; }
    [NotNullAttribute]
public IProject Project { get; }
    [NotNullAttribute]
public TargetFrameworkId TargetFrameworkId { get; }
    [NotNullAttribute]
public IUnitTestProvider Provider { get; }
    [NotNullAttribute]
public FileSystemPath Output { get; }
    [NotNullAttribute]
public IUnitTestExplorerFromArtifacts Explorer { get; }
    public ExplorationOutcome Outcome { get; }
    public IExplorationDetails Details { get; }
    public TimeSpan Duration { get; public set; }
    internal ExplorerExplorationResult(IExplorationTarget target, IUnitTestExplorerFromArtifacts explorer, ExplorationOutcome outcome, IExplorationDetails details);
    internal ExplorerExplorationResult(IExplorationTarget target, IUnitTestExplorerFromArtifacts explorer, ExplorationOutcome outcome, string reason);
    internal ExplorerExplorationResult(IExplorationTarget target, IUnitTestExplorerFromArtifacts explorer, Exception exception);
    internal ExplorerExplorationResult(IExplorationTarget target, IUnitTestExplorerFromArtifacts explorer, ExplorationResult result);
    internal ExplorerExplorationResult(IExplorationTarget target, IUnitTestExplorerFromArtifacts explorer, PertinenceResult pertinenceResult);
    [CompilerGeneratedAttribute]
internal IExplorationTarget get_Target();
    public IProject get_Project();
    public TargetFrameworkId get_TargetFrameworkId();
    public IUnitTestProvider get_Provider();
    public FileSystemPath get_Output();
    [CompilerGeneratedAttribute]
public IUnitTestExplorerFromArtifacts get_Explorer();
    [CompilerGeneratedAttribute]
public sealed virtual ExplorationOutcome get_Outcome();
    [CompilerGeneratedAttribute]
public sealed virtual IExplorationDetails get_Details();
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_Duration();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Duration(TimeSpan value);
    private sealed virtual override void JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.IExplorationResult.Accept(IExplorationResultVisitor visitor);
    private sealed virtual override Pair`2[] JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.IProvideSensitiveData.GetSensitiveData();
}
public class JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.ExplorerExplorationStarted : EventArgs {
    [NotNullAttribute]
private IUnitTestElementSource myTarget;
    [CompilerGeneratedAttribute]
private IUnitTestExplorerFromArtifacts <Explorer>k__BackingField;
    [NotNullAttribute]
public IProject Project { get; }
    [NotNullAttribute]
public TargetFrameworkId TargetFrameworkId { get; }
    [NotNullAttribute]
public IUnitTestProvider Provider { get; }
    [NotNullAttribute]
public FileSystemPath Output { get; }
    [NotNullAttribute]
public IUnitTestExplorerFromArtifacts Explorer { get; }
    public ExplorerExplorationStarted(IUnitTestElementSource target, IUnitTestExplorerFromArtifacts explorer);
    public sealed virtual IProject get_Project();
    public sealed virtual TargetFrameworkId get_TargetFrameworkId();
    public sealed virtual IUnitTestProvider get_Provider();
    public sealed virtual FileSystemPath get_Output();
    [CompilerGeneratedAttribute]
public sealed virtual IUnitTestExplorerFromArtifacts get_Explorer();
    private sealed virtual override string JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.IExplorationEventArgs.GetTargetPresentation();
}
internal interface JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.ICanSetExplorationResultDuration {
    unknown TimeSpan Duration {public set; }
    public abstract virtual void set_Duration(TimeSpan value);
}
public interface JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.IExplorationDetails {
    public abstract virtual void Accept(IExplorationResultVisitor visitor);
}
public interface JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.IExplorationEventArgs {
    [NotNullAttribute]
public abstract virtual string GetTargetPresentation();
}
public interface JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.IExplorationFinishedEventArgs {
    [NotNullAttribute]
public IExplorationResult Result { get; }
    public abstract virtual IExplorationResult get_Result();
}
public interface JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.IExplorationResult {
    [CanBeNullAttribute]
public IExplorationDetails Details { get; }
    public ExplorationOutcome Outcome { get; }
    public TimeSpan Duration { get; }
    public abstract virtual IExplorationDetails get_Details();
    public abstract virtual ExplorationOutcome get_Outcome();
    public abstract virtual TimeSpan get_Duration();
    public abstract virtual void Accept(IExplorationResultVisitor visitor);
}
public interface JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.IExplorationResultVisitor {
    public abstract virtual void VisitResult(IExplorationResult result);
    public abstract virtual void VisitExplorerResult(ExplorerExplorationResult result);
    public abstract virtual void VisitProviderResult(ProviderExplorationResult result);
    public abstract virtual void VisitTargetFrameworkResult(TargetFrameworkExplorationResult result);
    public abstract virtual void VisitProjectResult(ProjectExplorationResult result);
    public abstract virtual void VisitCachedResult(CachedExplorationResult result);
    public abstract virtual void VisitPromisedResult(PromisedExplorationResult result);
    public abstract virtual void VisitDetails(IExplorationDetails details);
    public abstract virtual void VisitExceptionDetails(ExceptionDetails details);
    public abstract virtual void VisitReasonDetails(ReasonDetails details);
    public abstract virtual void VisitSummaryDetails(SummaryDetails details);
}
public interface JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.IExplorationTarget {
    [NotNullAttribute]
public IProject Project { get; }
    [NotNullAttribute]
public TargetFrameworkId TargetFrameworkId { get; }
    [NotNullAttribute]
public IUnitTestProvider Provider { get; }
    [NotNullAttribute]
public FileSystemPath Output { get; }
    public abstract virtual IProject get_Project();
    public abstract virtual TargetFrameworkId get_TargetFrameworkId();
    public abstract virtual IUnitTestProvider get_Provider();
    public abstract virtual FileSystemPath get_Output();
}
public interface JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.IExplorerExplorationEventArgs {
    [NotNullAttribute]
public IUnitTestExplorerFromArtifacts Explorer { get; }
    public abstract virtual IUnitTestExplorerFromArtifacts get_Explorer();
}
public interface JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.IProjectExplorationEventArgs {
    [NotNullAttribute]
public IProject Project { get; }
    public abstract virtual IProject get_Project();
}
public interface JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.IProviderExplorationEventArgs {
    [NotNullAttribute]
public IUnitTestProvider Provider { get; }
    [NotNullAttribute]
public FileSystemPath Output { get; }
    public abstract virtual IUnitTestProvider get_Provider();
    public abstract virtual FileSystemPath get_Output();
}
internal interface JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.IProvideSensitiveData {
    [NotNullAttribute]
public abstract virtual Pair`2[] GetSensitiveData();
}
public interface JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.ITargetFrameworkExplorationEventArgs {
    [NotNullAttribute]
public TargetFrameworkId TargetFrameworkId { get; }
    public abstract virtual TargetFrameworkId get_TargetFrameworkId();
}
internal interface JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.IUnitTestArtifactExplorationCache {
    public abstract virtual void InvalidateAll();
    public abstract virtual void Invalidate(string projectPersistentId);
    public abstract virtual void Invalidate(string projectPersistentId, TargetFrameworkId targetFrameworkId);
    [CanBeNullAttribute]
public abstract virtual IExplorationResult TryGetResult(IExplorationTarget target);
    [NotNullAttribute]
public abstract virtual IExplorationResult TryGetResultOrPromise(IExplorationTarget target);
}
public interface JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.IUnitTestArtifactExplorationProcess {
    [NotNullAttribute]
public abstract virtual Task`1<IExplorationResult> ExploreProject(IProject project);
    [NotNullAttribute]
public abstract virtual Task WaitForExplorationToFinish(CancellationToken token);
}
internal interface JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.IUnitTestArtifactExplorationRunner {
    [NotNullAttribute]
public abstract virtual Task`1<IExplorationResult> ProcessProject(IExplorationTarget target, CancellationToken token);
    [NotNullAttribute]
public abstract virtual IExplorationResult Promise(IExplorationTarget target);
}
public interface JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.IUnitTestExplorerFromArtifacts {
    [NotNullAttribute]
public IUnitTestProvider Provider { get; }
    public abstract virtual IUnitTestProvider get_Provider();
    [NotNullAttribute]
public abstract virtual PertinenceResult IsSupported(IProject project, TargetFrameworkId targetFrameworkId);
    [NotNullAttribute]
public abstract virtual Task`1<ExplorationResult> ProcessArtifact(IUnitTestElementObserver observer, CancellationToken token);
}
public interface JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.IUnitTestProjectArtifactResolver {
    [NotNullAttribute]
public abstract virtual FileSystemPath GetArtifactFilePath(IProject project, TargetFrameworkId targetFrameworkId);
    public abstract virtual bool TryGetOnlyAlternativeArtifactFilePath(IProject project, TargetFrameworkId targetFrameworkId, FileSystemPath& filePath);
}
public interface JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.IUnitTestProjectArtifactResolverCollaborator {
    public abstract virtual bool CanResolveArtifact(IProject project, TargetFrameworkId targetFrameworkId);
    [NotNullAttribute]
public abstract virtual FileSystemPath ResolveArtifact(IProject project, TargetFrameworkId targetFrameworkId);
}
public static class JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.MetadataElementsSource : object {
    public static void ExploreProject(IProject project, FileSystemPath outputPath, MetadataLoader loader, ILogger logger, CancellationToken cancellationToken, Action`1<IMetadataAssembly> exploreAssembly);
}
public class JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.NugetPackageMissingDetails : ReasonDetails {
    [CompilerGeneratedAttribute]
private string <PackageId>k__BackingField;
    public string PackageId { get; }
    public NugetPackageMissingDetails(string packageId);
    [CompilerGeneratedAttribute]
public string get_PackageId();
}
public enum JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.Pertinence : Enum {
    public int value__;
    public static Pertinence Yes;
    public static Pertinence No;
    public static Pertinence Maybe;
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.PertinenceExtensions : object {
    [ExtensionAttribute]
public static ExplorationOutcome ToExplorationOutcome(Pertinence pertinence);
}
public class JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.PertinenceResult : object {
    [NotNullAttribute]
private static PertinenceResult ourYes;
    [NotNullAttribute]
private static PertinenceResult ourNo;
    [CompilerGeneratedAttribute]
private Pertinence <Resolution>k__BackingField;
    [CompilerGeneratedAttribute]
private IExplorationDetails <Details>k__BackingField;
    public Pertinence Resolution { get; }
    public IExplorationDetails Details { get; }
    [NotNullAttribute]
public static PertinenceResult Yes { get; }
    protected PertinenceResult(Pertinence resolution);
    protected PertinenceResult(Pertinence resolution, IExplorationDetails details);
    private static PertinenceResult();
    [CompilerGeneratedAttribute]
public Pertinence get_Resolution();
    [CompilerGeneratedAttribute]
public IExplorationDetails get_Details();
    [NotNullAttribute]
public static PertinenceResult No(string reason);
    [NotNullAttribute]
public static PertinenceResult Maybe(string reason);
    [NotNullAttribute]
public static PertinenceResult Maybe(IExplorationDetails details);
    public static PertinenceResult get_Yes();
}
public class JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.ProjectExplorationFinished : EventArgs {
    [CompilerGeneratedAttribute]
private ProjectExplorationResult <Result>k__BackingField;
    [NotNullAttribute]
public IProject Project { get; }
    [NotNullAttribute]
public ProjectExplorationResult Result { get; }
    private IExplorationResult JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.IExplorationFinishedEventArgs.Result { get; }
    public ProjectExplorationFinished(ProjectExplorationResult result);
    public sealed virtual IProject get_Project();
    [CompilerGeneratedAttribute]
public ProjectExplorationResult get_Result();
    private sealed virtual override string JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.IExplorationEventArgs.GetTargetPresentation();
    private sealed virtual override IExplorationResult JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.IExplorationFinishedEventArgs.get_Result();
}
[DebuggerDisplayAttribute("Project = {Project.Name}, Outcome = {Outcome}")]
public class JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.ProjectExplorationResult : object {
    [CompilerGeneratedAttribute]
private IProject <Project>k__BackingField;
    [CompilerGeneratedAttribute]
private IExplorationResult[] <Results>k__BackingField;
    [CompilerGeneratedAttribute]
private ExplorationOutcome <Outcome>k__BackingField;
    [CompilerGeneratedAttribute]
private IExplorationDetails <Details>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Duration>k__BackingField;
    [NotNullAttribute]
public IProject Project { get; }
    [CanBeNullAttribute]
public IExplorationResult[] Results { get; }
    public ExplorationOutcome Outcome { get; }
    public IExplorationDetails Details { get; }
    public TimeSpan Duration { get; public set; }
    internal ProjectExplorationResult(IProject project, IExplorationResult[] results, ExplorationOutcome outcome, IExplorationDetails details);
    internal ProjectExplorationResult(IProject project, ExplorationOutcome outcome, string reason);
    internal ProjectExplorationResult(IProject project, Exception exception, IExplorationResult[] results);
    [CompilerGeneratedAttribute]
public IProject get_Project();
    [CompilerGeneratedAttribute]
public IExplorationResult[] get_Results();
    [CompilerGeneratedAttribute]
public sealed virtual ExplorationOutcome get_Outcome();
    [CompilerGeneratedAttribute]
public sealed virtual IExplorationDetails get_Details();
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_Duration();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Duration(TimeSpan value);
    private sealed virtual override void JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.IExplorationResult.Accept(IExplorationResultVisitor visitor);
    private sealed virtual override Pair`2[] JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.IProvideSensitiveData.GetSensitiveData();
    [NotNullAttribute]
public static ProjectExplorationResult FromResults(IProject project, IExplorationResult[] results);
}
public class JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.ProjectExplorationStarted : EventArgs {
    [CompilerGeneratedAttribute]
private IProject <Project>k__BackingField;
    [NotNullAttribute]
public IProject Project { get; }
    public ProjectExplorationStarted(IProject project);
    [CompilerGeneratedAttribute]
public sealed virtual IProject get_Project();
    private sealed virtual override string JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.IExplorationEventArgs.GetTargetPresentation();
}
[DebuggerDisplayAttribute("Promise = {InnerResult}, Outcome = {Outcome}")]
public class JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.PromisedExplorationResult : object {
    [CompilerGeneratedAttribute]
private IExplorationResult <InnerResult>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Duration>k__BackingField;
    [NotNullAttribute]
public IExplorationResult InnerResult { get; }
    public IExplorationDetails Details { get; }
    public ExplorationOutcome Outcome { get; }
    public TimeSpan Duration { get; public set; }
    public PromisedExplorationResult(IExplorationResult innerResult);
    [CompilerGeneratedAttribute]
public IExplorationResult get_InnerResult();
    public sealed virtual IExplorationDetails get_Details();
    public sealed virtual ExplorationOutcome get_Outcome();
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_Duration();
    [CompilerGeneratedAttribute]
public void set_Duration(TimeSpan value);
    public sealed virtual void Accept(IExplorationResultVisitor visitor);
}
public class JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.ProviderExplorationFinished : EventArgs {
    [CompilerGeneratedAttribute]
private IExplorationTarget <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private IExplorationResult <Result>k__BackingField;
    [NotNullAttribute]
public IProject Project { get; }
    [NotNullAttribute]
public TargetFrameworkId TargetFrameworkId { get; }
    [NotNullAttribute]
public IUnitTestProvider Provider { get; }
    [NotNullAttribute]
public FileSystemPath Output { get; }
    [NotNullAttribute]
public IExplorationTarget Target { get; }
    [NotNullAttribute]
public IExplorationResult Result { get; }
    private IExplorationResult JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.IExplorationFinishedEventArgs.Result { get; }
    public ProviderExplorationFinished(ProviderExplorationResult result);
    public ProviderExplorationFinished(IExplorationTarget target, IExplorationResult result);
    public sealed virtual IProject get_Project();
    public sealed virtual TargetFrameworkId get_TargetFrameworkId();
    public sealed virtual IUnitTestProvider get_Provider();
    public sealed virtual FileSystemPath get_Output();
    [CompilerGeneratedAttribute]
public IExplorationTarget get_Target();
    [CompilerGeneratedAttribute]
public IExplorationResult get_Result();
    private sealed virtual override string JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.IExplorationEventArgs.GetTargetPresentation();
    private sealed virtual override IExplorationResult JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.IExplorationFinishedEventArgs.get_Result();
}
[DebuggerDisplayAttribute("Provider = {Provider.Name}, Outcome = {Outcome}")]
public class JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.ProviderExplorationResult : object {
    [CompilerGeneratedAttribute]
private IExplorationTarget <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private IExplorationResult[] <Results>k__BackingField;
    [CompilerGeneratedAttribute]
private ExplorationOutcome <Outcome>k__BackingField;
    [CompilerGeneratedAttribute]
private IExplorationDetails <Details>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Duration>k__BackingField;
    [NotNullAttribute]
internal IExplorationTarget Target { get; }
    [NotNullAttribute]
public IProject Project { get; }
    [NotNullAttribute]
public TargetFrameworkId TargetFrameworkId { get; }
    [NotNullAttribute]
public IUnitTestProvider Provider { get; }
    [NotNullAttribute]
public FileSystemPath Output { get; }
    [CanBeNullAttribute]
public IExplorationResult[] Results { get; }
    public ExplorationOutcome Outcome { get; }
    public IExplorationDetails Details { get; }
    public TimeSpan Duration { get; public set; }
    internal ProviderExplorationResult(IExplorationTarget target, IExplorationResult[] results, ExplorationOutcome outcome, IExplorationDetails details);
    internal ProviderExplorationResult(IExplorationTarget target, ExplorationOutcome outcome, string reason);
    internal ProviderExplorationResult(IExplorationTarget target, Exception exception, IExplorationResult[] results);
    [CompilerGeneratedAttribute]
internal IExplorationTarget get_Target();
    public IProject get_Project();
    public TargetFrameworkId get_TargetFrameworkId();
    public IUnitTestProvider get_Provider();
    public FileSystemPath get_Output();
    [CompilerGeneratedAttribute]
public IExplorationResult[] get_Results();
    [CompilerGeneratedAttribute]
public sealed virtual ExplorationOutcome get_Outcome();
    [CompilerGeneratedAttribute]
public sealed virtual IExplorationDetails get_Details();
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_Duration();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Duration(TimeSpan value);
    private sealed virtual override void JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.IExplorationResult.Accept(IExplorationResultVisitor visitor);
    private sealed virtual override Pair`2[] JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.IProvideSensitiveData.GetSensitiveData();
    [NotNullAttribute]
internal static ProviderExplorationResult FromObserver(IUnitTestElementObserver observer, IUnitTestTransactionCommitResult commitResult, IExplorationResult[] results);
}
public class JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.ProviderExplorationStarted : EventArgs {
    [NotNullAttribute]
private IExplorationTarget myTarget;
    [NotNullAttribute]
public IProject Project { get; }
    [NotNullAttribute]
public TargetFrameworkId TargetFrameworkId { get; }
    [NotNullAttribute]
public IUnitTestProvider Provider { get; }
    [NotNullAttribute]
public FileSystemPath Output { get; }
    public ProviderExplorationStarted(IExplorationTarget target);
    public sealed virtual IProject get_Project();
    public sealed virtual TargetFrameworkId get_TargetFrameworkId();
    public sealed virtual IUnitTestProvider get_Provider();
    public sealed virtual FileSystemPath get_Output();
    private sealed virtual override string JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.IExplorationEventArgs.GetTargetPresentation();
}
[DebuggerDisplayAttribute("Message = {Message}")]
public class JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.ReasonDetails : object {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Details>k__BackingField;
    [NotNullAttribute]
public string Message { get; }
    [CanBeNullAttribute]
public string Details { get; }
    public ReasonDetails(string message, string details);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public string get_Details();
    private sealed virtual override void JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.IExplorationDetails.Accept(IExplorationResultVisitor visitor);
    public virtual string ToString();
}
[DebuggerDisplayAttribute("{CommitResult}")]
public class JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.SummaryDetails : object {
    [CompilerGeneratedAttribute]
private IUnitTestTransactionCommitResult <CommitResult>k__BackingField;
    [NotNullAttribute]
public IUnitTestTransactionCommitResult CommitResult { get; }
    public SummaryDetails(IUnitTestTransactionCommitResult result);
    [CompilerGeneratedAttribute]
public IUnitTestTransactionCommitResult get_CommitResult();
    private sealed virtual override void JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.IExplorationDetails.Accept(IExplorationResultVisitor visitor);
    public virtual string ToString();
}
public class JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.TargetFrameworkExplorationFinished : EventArgs {
    [CompilerGeneratedAttribute]
private TargetFrameworkExplorationResult <Result>k__BackingField;
    [NotNullAttribute]
public IProject Project { get; }
    [NotNullAttribute]
public TargetFrameworkId TargetFrameworkId { get; }
    [NotNullAttribute]
public TargetFrameworkExplorationResult Result { get; }
    private IExplorationResult JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.IExplorationFinishedEventArgs.Result { get; }
    public TargetFrameworkExplorationFinished(TargetFrameworkExplorationResult result);
    public sealed virtual IProject get_Project();
    public sealed virtual TargetFrameworkId get_TargetFrameworkId();
    [CompilerGeneratedAttribute]
public TargetFrameworkExplorationResult get_Result();
    private sealed virtual override string JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.IExplorationEventArgs.GetTargetPresentation();
    private sealed virtual override IExplorationResult JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.IExplorationFinishedEventArgs.get_Result();
}
[DebuggerDisplayAttribute("TargetFrameworkId = {TargetFrameworkId}, Outcome = {Outcome}")]
public class JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.TargetFrameworkExplorationResult : object {
    [CompilerGeneratedAttribute]
private IProject <Project>k__BackingField;
    [CompilerGeneratedAttribute]
private TargetFrameworkId <TargetFrameworkId>k__BackingField;
    [CompilerGeneratedAttribute]
private IExplorationResult[] <Results>k__BackingField;
    [CompilerGeneratedAttribute]
private ExplorationOutcome <Outcome>k__BackingField;
    [CompilerGeneratedAttribute]
private IExplorationDetails <Details>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Duration>k__BackingField;
    [NotNullAttribute]
public IProject Project { get; }
    [NotNullAttribute]
public TargetFrameworkId TargetFrameworkId { get; }
    [CanBeNullAttribute]
public IExplorationResult[] Results { get; }
    public ExplorationOutcome Outcome { get; }
    public IExplorationDetails Details { get; }
    public TimeSpan Duration { get; public set; }
    internal TargetFrameworkExplorationResult(IProject project, TargetFrameworkId targetFrameworkId, IExplorationResult[] results, ExplorationOutcome outcome, IExplorationDetails details);
    internal TargetFrameworkExplorationResult(IProject project, TargetFrameworkId targetFrameworkId, Exception exception, IExplorationResult[] results);
    [CompilerGeneratedAttribute]
public IProject get_Project();
    [CompilerGeneratedAttribute]
public TargetFrameworkId get_TargetFrameworkId();
    [CompilerGeneratedAttribute]
public IExplorationResult[] get_Results();
    [CompilerGeneratedAttribute]
public sealed virtual ExplorationOutcome get_Outcome();
    [CompilerGeneratedAttribute]
public sealed virtual IExplorationDetails get_Details();
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_Duration();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Duration(TimeSpan value);
    private sealed virtual override void JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.IExplorationResult.Accept(IExplorationResultVisitor visitor);
    private sealed virtual override Pair`2[] JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.IProvideSensitiveData.GetSensitiveData();
    [NotNullAttribute]
internal static TargetFrameworkExplorationResult FromResults(IProject project, TargetFrameworkId targetFrameworkId, IExplorationResult[] results);
}
public class JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.TargetFrameworkExplorationStarted : EventArgs {
    [CompilerGeneratedAttribute]
private IProject <Project>k__BackingField;
    [CompilerGeneratedAttribute]
private TargetFrameworkId <TargetFrameworkId>k__BackingField;
    [NotNullAttribute]
public IProject Project { get; }
    [NotNullAttribute]
public TargetFrameworkId TargetFrameworkId { get; }
    public TargetFrameworkExplorationStarted(IProject project, TargetFrameworkId targetFrameworkId);
    [CompilerGeneratedAttribute]
public sealed virtual IProject get_Project();
    [CompilerGeneratedAttribute]
public sealed virtual TargetFrameworkId get_TargetFrameworkId();
    private sealed virtual override string JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.IExplorationEventArgs.GetTargetPresentation();
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.UnitTestArtifactExplorationProcess : object {
    [NotNullAttribute]
private CancellationToken myToken;
    [NotNullAttribute]
private IUnitTestProjectArtifactResolver myArtifactResolver;
    [NotNullAttribute]
private IUnitTestArtifactExplorationRunner myExplorationRunner;
    [NotNullAttribute]
private ExplorationActivityTracker myExplorationActivityTracker;
    [NotNullAttribute]
private IUnitTestChangeListener myChangeTracker;
    [CanBeNullAttribute]
private IEventContext myEventContext;
    public UnitTestArtifactExplorationProcess(Lifetime lifetime, IUnitTestProjectArtifactResolver artifactResolver, CachingUnitTestArtifactExplorationRunner explorationRunner, IUnitTestChangeListener changeTracker, IEventContext eventContext, ILogger logger);
    internal UnitTestArtifactExplorationProcess(Lifetime lifetime, IUnitTestProjectArtifactResolver artifactResolver, IUnitTestArtifactExplorationRunner explorationRunner, IUnitTestChangeListener changeTracker, IEventContext eventContext, ILogger logger);
    public sealed virtual Task WaitForExplorationToFinish(CancellationToken token);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.UnitTestArtifactExplorationProcess/<ExploreProject>d__9")]
public sealed virtual Task`1<IExplorationResult> ExploreProject(IProject project);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.UnitTestArtifactExplorationProcess/<ExploreTargetFrameworkId>d__10")]
private Task`1<IExplorationResult> ExploreTargetFrameworkId(TargetFrameworkSubscription subscription);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.UnitTestArtifactExplorationProcess/<ExploreProvider>d__11")]
private Task`1<IExplorationResult> ExploreProvider(ProviderSubscription subscription);
    [CompilerGeneratedAttribute]
private void <.ctor>b__7_0();
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.UnitTestArtifactExplorationProcessExtensions : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static Task ExploreProjects(IUnitTestArtifactExplorationProcess process, IEnumerable`1<IProject> projects);
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.UnitTestArtifactExplorationRunner : object {
    [NotNullAttribute]
private IDictionary`2<IUnitTestProvider, IUnitTestExplorerFromArtifacts[]> myExplorers;
    [NotNullAttribute]
private IUnitTestDiscoveryManager myDiscoveryManager;
    [NotNullAttribute]
private IEventContext myEventContext;
    [NotNullAttribute]
private ILogger myLogger;
    public UnitTestArtifactExplorationRunner(IEnumerable`1<IUnitTestExplorerFromArtifacts> explorers, IUnitTestDiscoveryManager discoveryManager, IEventContext eventContext, ILogger logger);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.UnitTestArtifactExplorationRunner/<ProcessProject>d__5")]
public sealed virtual Task`1<IExplorationResult> ProcessProject(IExplorationTarget target, CancellationToken token);
    public sealed virtual IExplorationResult Promise(IExplorationTarget target);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.UnitTestArtifactExplorationRunner/<ApplyExplorationResults>d__7")]
private Task`1<ProviderExplorationResult> ApplyExplorationResults(IExplorationResult[] results, IUnitTestDiscoveryTransaction tx, bool supportedByProvider, CancellationToken token);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.UnitTestArtifactExplorationRunner/<ExploreProjectAndFire>d__8")]
private Task`1<IExplorationResult> ExploreProjectAndFire(IUnitTestExplorerFromArtifacts explorer, IUnitTestElementObserver observer, CancellationToken token);
    private Task`1<ExplorerExplorationResult> ExploreProject(IUnitTestExplorerFromArtifacts explorer, IUnitTestElementObserver observer, CancellationToken token);
    private static void ExplorationAborted(TaskCompletionSource`1<ExplorerExplorationResult> tcs, IUnitTestElementObserver observer, IUnitTestExplorerFromArtifacts explorer);
    private static void ExplorationFailed(TaskCompletionSource`1<ExplorerExplorationResult> tcs, IUnitTestElementObserver observer, IUnitTestExplorerFromArtifacts explorer, Exception e);
    [NotNullAttribute]
internal IUnitTestArtifactExplorationRunner ReplaceEventContext(IEventContext newEventContext);
}
[ShellComponentAttribute("2")]
internal class JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.UnitTestExplorationLogger : object {
    [NotNullAttribute]
private IUnitTestOutputPane myOutputPane;
    [NotNullAttribute]
private ILogger myLogger;
    public UnitTestExplorationLogger(Lifetime lifetime, EventsLifetime eventsLifetime, IUnitTestOutputPane outputPane, ILogger logger);
    private void ExplorationStarted(IExplorationEventArgs e);
    private void ExplorationFinished(IExplorationFinishedEventArgs e);
    private void ProjectExplorationStarted(ProjectExplorationStarted e);
    private void ProjectExplorationFinished(ProjectExplorationFinished e);
    private LoggingLevel GetSeverity(IExplorationResult result);
    private string TryGetDetails(IExplorationResult result);
    private string TryGetExceptionDetails(IExplorationResult result);
}
internal class JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.UnitTestExplorationResultPreviewBuilder : ExplorationResultVisitor {
    private bool myIsCached;
    [NotNullAttribute]
private StringBuilder myOutput;
    [NotNullAttribute]
public string Result { get; }
    public string get_Result();
    public string GetPreview(IExplorationResult result);
    public virtual void VisitResult(IExplorationResult result);
    public virtual void VisitProjectResult(ProjectExplorationResult result);
    public virtual void VisitTargetFrameworkResult(TargetFrameworkExplorationResult result);
    public virtual void VisitProviderResult(ProviderExplorationResult result);
    public virtual void VisitExplorerResult(ExplorerExplorationResult result);
    public virtual void VisitCachedResult(CachedExplorationResult result);
    public virtual void VisitSummaryDetails(SummaryDetails details);
    public virtual void VisitReasonDetails(ReasonDetails details);
    public virtual void VisitExceptionDetails(ExceptionDetails details);
    [CompilerGeneratedAttribute]
private void <VisitCachedResult>b__10_0();
    [CompilerGeneratedAttribute]
private void <VisitCachedResult>b__10_1();
}
public static class JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.UnitTestExplorerFrom : object {
}
[SolutionComponentAttribute("0")]
internal class JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.UnitTestProjectArtifactResolver : object {
    [NotNullAttribute]
[ItemNotNullAttribute]
private IEnumerable`1<IUnitTestProjectArtifactResolverCollaborator> myCollaborators;
    public UnitTestProjectArtifactResolver(IEnumerable`1<IUnitTestProjectArtifactResolverCollaborator> collaborators);
    public sealed virtual FileSystemPath GetArtifactFilePath(IProject project, TargetFrameworkId targetFrameworkId);
    public sealed virtual bool TryGetOnlyAlternativeArtifactFilePath(IProject project, TargetFrameworkId targetFrameworkId, FileSystemPath& filePath);
    private bool TryGetFromResolverCollaborator(IProject project, TargetFrameworkId targetFrameworkId, FileSystemPath& filePath);
}
public class JetBrains.ReSharper.UnitTestFramework.Exploration.Artifacts.VsIntegrationShouldBeConfiguredMissingDetails : ReasonDetails {
}
public interface JetBrains.ReSharper.UnitTestFramework.Exploration.AttributeChecker.IUnitTestAttributeCache {
    [NotNullAttribute]
[ItemNotNullAttribute]
public abstract virtual Task`1<IClrTypeName[]> GetDerivedAttributesAsync(IModule module, TargetFrameworkId targetFrameworkId, IClrTypeName attrOrInterfaceName, IClrTypeName[] exceptName);
    [NotNullAttribute]
[ItemNotNullAttribute]
public abstract virtual IClrTypeName[] GetDerivedAttributes(IModule module, TargetFrameworkId targetFrameworkId, IClrTypeName attrOrInterfaceName, IClrTypeName[] exceptName);
}
public interface JetBrains.ReSharper.UnitTestFramework.Exploration.AttributeChecker.IUnitTestAttributeChecker {
    [NotNullAttribute]
public abstract virtual Task`1<bool> HasAttributeAsync(IAttributesOwner attributesOwner, Task`1<IClrTypeName[]> attrNames);
    [NotNullAttribute]
public abstract virtual Task`1<bool> HasAttributeAsync(IMetadataEntity metadataEntity, Task`1<IClrTypeName[]> attrNames);
    [NotNullAttribute]
[ItemNotNullAttribute]
public abstract virtual Task`1<IClrTypeName[]> GetDerivedAttributesAsync(IModule module, TargetFrameworkId targetFrameworkId, IClrTypeName attrOrInterfaceName, IClrTypeName[] exceptName);
    public abstract virtual bool HasAttribute(IAttributesOwner attributesOwner, IClrTypeName[] attrNames);
    public abstract virtual bool HasAttribute(IMetadataEntity metadataEntity, IClrTypeName[] attrNames);
    [NotNullAttribute]
[ItemNotNullAttribute]
public abstract virtual IClrTypeName[] GetDerivedAttributes(IModule module, TargetFrameworkId targetFrameworkId, IClrTypeName attrOrInterfaceName, IClrTypeName[] exceptName);
}
[PsiComponentAttribute("16")]
internal class JetBrains.ReSharper.UnitTestFramework.Exploration.AttributeChecker.UnitTestAttributeCache2 : InvalidatingPsiCache {
    private Lifetime myLifetime;
    [NotNullAttribute]
private Lazy`1<IPsiServices> myPsiServices;
    [NotNullAttribute]
private JetFastSemiReenterableRWLock myReaderWriterLock;
    [NotNullAttribute]
private Dictionary`2<Key, IClrTypeName[]> myAttributesCache;
    public UnitTestAttributeCache2(Lifetime lifetime, ISolution solution);
    protected virtual void InvalidateOnPhysicalChange(PsiChangedElementType elementType);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Exploration.AttributeChecker.UnitTestAttributeCache2/<GetDerivedAttributesAsync>d__6")]
public sealed virtual Task`1<IClrTypeName[]> GetDerivedAttributesAsync(IModule module, TargetFrameworkId targetFrameworkId, IClrTypeName attrOrInterfaceName, IClrTypeName[] exceptName);
    public sealed virtual IClrTypeName[] GetDerivedAttributes(IModule module, TargetFrameworkId targetFrameworkId, IClrTypeName attrOrInterfaceName, IClrTypeName[] exceptName);
}
[SolutionComponentAttribute("16")]
internal class JetBrains.ReSharper.UnitTestFramework.Exploration.AttributeChecker.UnitTestAttributeChecker : object {
    [NotNullAttribute]
private IUnitTestAttributeCache myAttributeCache;
    public UnitTestAttributeChecker(IUnitTestAttributeCache attributeCache);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Exploration.AttributeChecker.UnitTestAttributeChecker/<HasAttributeAsync>d__2")]
public sealed virtual Task`1<bool> HasAttributeAsync(IAttributesOwner attributesOwner, Task`1<IClrTypeName[]> attrNames);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Exploration.AttributeChecker.UnitTestAttributeChecker/<HasAttributeAsync>d__3")]
public sealed virtual Task`1<bool> HasAttributeAsync(IMetadataEntity metadataEntity, Task`1<IClrTypeName[]> attrNames);
    private IMetadataMethod FindOverridenMethod(IMetadataMethod method);
    public sealed virtual Task`1<IClrTypeName[]> GetDerivedAttributesAsync(IModule module, TargetFrameworkId targetFrameworkId, IClrTypeName attrOrInterfaceName, IClrTypeName[] exceptName);
    public sealed virtual bool HasAttribute(IAttributesOwner attributesOwner, IClrTypeName[] attrNames);
    public sealed virtual bool HasAttribute(IMetadataEntity metadataEntity, IClrTypeName[] attrNames);
    public sealed virtual IClrTypeName[] GetDerivedAttributes(IModule module, TargetFrameworkId targetFrameworkId, IClrTypeName attrOrInterfaceName, IClrTypeName[] exceptName);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.UnitTestFramework.Exploration.AttributeChecker.UnitTestAttributeCheckerExtensions : object {
    [AsyncStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Exploration.AttributeChecker.UnitTestAttributeCheckerExtensions/<HasDerivedAttributeAsync>d__0")]
[ExtensionAttribute]
[NotNullAttribute]
public static Task`1<bool> HasDerivedAttributeAsync(IUnitTestAttributeChecker checker, IAttributesOwner attributesOwner, IClrTypeName[] attrNames);
    [ExtensionAttribute]
[NotNullAttribute]
public static Task`1<bool> HasDerivedAttributeAsync(IUnitTestAttributeChecker checker, IAttributesOwner attributesOwner, IClrTypeName attrOrInterfaceName, IClrTypeName[] exceptName);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Exploration.AttributeChecker.UnitTestAttributeCheckerExtensions/<HasDerivedAttributeAsync>d__2")]
[ExtensionAttribute]
[NotNullAttribute]
public static Task`1<bool> HasDerivedAttributeAsync(IUnitTestAttributeChecker checker, IProject project, TargetFrameworkId targetFrameworkId, IMetadataEntity metadataEntity, IClrTypeName[] attrNames);
    [ExtensionAttribute]
[NotNullAttribute]
public static Task`1<bool> HasDerivedAttributeAsync(IUnitTestAttributeChecker checker, IProject project, TargetFrameworkId targetFrameworkId, IMetadataEntity metadataEntity, IClrTypeName attrOrInterfaceName, IClrTypeName[] exceptName);
    [ExtensionAttribute]
public static bool HasDerivedAttribute(IUnitTestAttributeChecker checker, IAttributesOwner attributesOwner, IClrTypeName[] attrNames);
    [ExtensionAttribute]
public static bool HasDerivedAttribute(IUnitTestAttributeChecker checker, IAttributesOwner attributesOwner, IClrTypeName attrOrInterfaceName, IClrTypeName[] exceptName);
    [ExtensionAttribute]
public static bool HasDerivedAttribute(IUnitTestAttributeChecker checker, IProject project, TargetFrameworkId targetFrameworkId, IMetadataEntity metadataEntity, IClrTypeName[] attrNames);
    [ExtensionAttribute]
public static bool HasDerivedAttribute(IUnitTestAttributeChecker checker, IProject project, TargetFrameworkId targetFrameworkId, IMetadataEntity metadataEntity, IClrTypeName attrOrInterfaceName, IClrTypeName[] exceptName);
}
public class JetBrains.ReSharper.UnitTestFramework.Exploration.Daemon.FakeUnitTestElementDisposition : object {
    [CompilerGeneratedAttribute]
private IFakeUnitTestElement <Element>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<UnitTestElementLocation> <Locations>k__BackingField;
    [NotNullAttribute]
public IFakeUnitTestElement Element { get; }
    public IReadOnlyList`1<UnitTestElementLocation> Locations { get; }
    public FakeUnitTestElementDisposition(IFakeUnitTestElement element, UnitTestElementLocation[] locations);
    [CompilerGeneratedAttribute]
public IFakeUnitTestElement get_Element();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyList`1<UnitTestElementLocation> get_Locations();
}
internal class JetBrains.ReSharper.UnitTestFramework.Exploration.Daemon.Highlighting.BrokenUnitTestElementGutterMark : UnitTestElementGutterMarkBase {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Exploration.Daemon.Highlighting.BrokenUnitTestElementGutterMark/<GetBulbMenuItems>d__1")]
public virtual IEnumerable`1<BulbMenuItem> GetBulbMenuItems(IHighlighter highlighter);
    private static void OpenInExplorationResults(BrokenUnitTestElementHighlighting highlighting);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<BulbMenuItem> <>n__0(IHighlighter highlighter);
}
[StaticSeverityHighlightingAttribute("1", "JetBrains.ReSharper.UnitTestFramework.Exploration.Daemon.Highlighting.UnitTestGutterMarks")]
public class JetBrains.ReSharper.UnitTestFramework.Exploration.Daemon.Highlighting.BrokenUnitTestElementHighlighting : object {
    private DocumentRange myRange;
    [CompilerGeneratedAttribute]
private IProject <Project>k__BackingField;
    [CompilerGeneratedAttribute]
private IExplorationResult <Result>k__BackingField;
    [CompilerGeneratedAttribute]
private ExplorationIssue <Issue>k__BackingField;
    [NotNullAttribute]
public IProject Project { get; }
    [NotNullAttribute]
public IExplorationResult Result { get; }
    [NotNullAttribute]
public ExplorationIssue Issue { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public string AttributeId { get; }
    public BrokenUnitTestElementHighlighting(IProject project, IExplorationResult explorationResult, ExplorationIssue issue, DocumentRange range);
    [CompilerGeneratedAttribute]
public IProject get_Project();
    [CompilerGeneratedAttribute]
public IExplorationResult get_Result();
    [CompilerGeneratedAttribute]
public ExplorationIssue get_Issue();
    public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual string get_AttributeId();
    public sealed virtual bool IsValid();
    public sealed virtual DocumentRange CalculateRange();
}
public class JetBrains.ReSharper.UnitTestFramework.Exploration.Daemon.Highlighting.ExplorationIssue : object {
    [CompilerGeneratedAttribute]
private string <HumanReadableMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private IExplorationDetails <Details>k__BackingField;
    [NotNullAttribute]
public string HumanReadableMessage { get; }
    [NotNullAttribute]
public IExplorationDetails Details { get; }
    public ExplorationIssue(string humanReadableMessage, IExplorationDetails details);
    [CompilerGeneratedAttribute]
public string get_HumanReadableMessage();
    [CompilerGeneratedAttribute]
public IExplorationDetails get_Details();
}
public interface JetBrains.ReSharper.UnitTestFramework.Exploration.Daemon.Highlighting.IUnitTestElementHighlighting {
    [NotNullAttribute]
public IUnitTestLikeElementDisposition Disposition { get; }
    public abstract virtual IUnitTestLikeElementDisposition get_Disposition();
}
internal class JetBrains.ReSharper.UnitTestFramework.Exploration.Daemon.Highlighting.UnitTestBulbItemsCollector : object {
    [CompilerGeneratedAttribute]
private IUnitTestLikeElement <Element>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<IUnitTestElement> <SubElements>k__BackingField;
    [CompilerGeneratedAttribute]
private IUnitTestingFacade <Facade>k__BackingField;
    [CompilerGeneratedAttribute]
private ISolution <Solution>k__BackingField;
    private static int MAX_SUBELEMENTS;
    private IUnitTestLikeElement Element { get; }
    private IReadOnlyCollection`1<IUnitTestElement> SubElements { get; }
    private IUnitTestingFacade Facade { get; }
    private ISolution Solution { get; }
    public UnitTestBulbItemsCollector(IUnitTestLikeElement element, IReadOnlyCollection`1<IUnitTestElement> subElements, ISolution solution, IUnitTestingFacade facade);
    [CompilerGeneratedAttribute]
private IUnitTestLikeElement get_Element();
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<IUnitTestElement> get_SubElements();
    [CompilerGeneratedAttribute]
private IUnitTestingFacade get_Facade();
    [CompilerGeneratedAttribute]
private ISolution get_Solution();
    [NotNullAttribute]
public static UnitTestBulbItemsCollector FromHighlighting(UnitTestElementHighlighting highlighting, ISolution solution, IUnitTestingFacade facade);
    public IEnumerable`1<BulbMenuItem> CollectBulbMenuItems();
    private BulbMenuItem GetNewSessionItem(IUnitTestElement element);
    private IEnumerable`1<BulbMenuItem> AppendToSessionItems(IUnitTestElement element);
    private void AddAppendItems(IEnumerable`1<IUnitTestSession> sessions, IUnitTestElementCriterion criterion, IAnchor appendToSessionAnchor, ICollection`1<BulbMenuItem> menuItemsConsumer, bool isBold, Boolean& first);
    [NotNullAttribute]
private static BulbMenuItem GetLocateInUnitTestExplorerItem(ISolution solution, IList`1<IUnitTestElement> subElements, IAnchor anchor);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Exploration.Daemon.Highlighting.UnitTestBulbItemsCollector/<CategoriesToBulbMenuItem>d__20")]
[ItemNotNullAttribute]
private IEnumerable`1<BulbMenuItem> CategoriesToBulbMenuItem(IEnumerable`1<UnitTestElementCategory> categories, IHostProvider hostProvider, IAnchor providerAnchor);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Exploration.Daemon.Highlighting.UnitTestBulbItemsCollector/<ElementsToBulbMenuItem>d__21")]
private IEnumerable`1<BulbMenuItem> ElementsToBulbMenuItem(IList`1<IUnitTestElement> subElements, bool addMoreItem);
    private string GetDescriptiveNameForSubElement(IUnitTestElement subElement);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Exploration.Daemon.Highlighting.UnitTestBulbItemsCollector/<ProviderToBulbMenuItem>d__23")]
private IEnumerable`1<BulbMenuItem> ProviderToBulbMenuItem(IHostProviderDescriptor provider, IUnitTestElement element, IAnchor anchor, bool appendCategoriesItems);
}
public static class JetBrains.ReSharper.UnitTestFramework.Exploration.Daemon.Highlighting.UnitTestBulbMenuAnchors : object {
    [NotNullAttribute]
public static InvisibleAnchor RunTestsAnchor;
    [NotNullAttribute]
public static InvisibleAnchor SubelementsAnchor;
    [NotNullAttribute]
public static InvisibleAnchor SuperElementAnchor;
    [NotNullAttribute]
public static InvisibleAnchor AppendSessionAnchor;
    [NotNullAttribute]
public static InvisibleAnchor CreateSessionAnchor;
    private static UnitTestBulbMenuAnchors();
}
[HighlightingSourceAttribute]
internal class JetBrains.ReSharper.UnitTestFramework.Exploration.Daemon.Highlighting.UnitTestDaemonProcess : object {
    [NotNullAttribute]
private IDaemonProcess myProcess;
    [NotNullAttribute]
private UnitTestFileExplorer myUnitTestFileExplorer;
    public IDaemonProcess DaemonProcess { get; }
    public UnitTestDaemonProcess(IDaemonProcess process, UnitTestFileExplorer unitTestFileExplorer);
    public sealed virtual IDaemonProcess get_DaemonProcess();
    public sealed virtual void Execute(Action`1<DaemonStageResult> committer);
    [CompilerGeneratedAttribute]
private bool <Execute>b__5_0();
}
[DaemonStageAttribute("0")]
internal class JetBrains.ReSharper.UnitTestFramework.Exploration.Daemon.Highlighting.UnitTestDaemonStage : object {
    [NotNullAttribute]
private UnitTestFileExplorer myUnitTestFileExplorer;
    public UnitTestDaemonStage(UnitTestFileExplorer unitTestFileExplorer);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Exploration.Daemon.Highlighting.UnitTestDaemonStage/<CreateProcess>d__2")]
public sealed virtual IEnumerable`1<IDaemonStageProcess> CreateProcess(IDaemonProcess process, IContextBoundSettingsStore settings, DaemonProcessKind processKind);
}
internal class JetBrains.ReSharper.UnitTestFramework.Exploration.Daemon.Highlighting.UnitTestElementGutterMark : UnitTestElementGutterMarkBase {
}
internal abstract class JetBrains.ReSharper.UnitTestFramework.Exploration.Daemon.Highlighting.UnitTestElementGutterMarkBase : IconGutterMarkType {
    private static IDictionary`2<UnitTestStatus, IconId> ourIconsDictionary;
    public IAnchor Priority { get; }
    protected UnitTestElementGutterMarkBase(IconId image);
    private static UnitTestElementGutterMarkBase();
    public virtual IAnchor get_Priority();
    public virtual IEnumerable`1<BulbMenuItem> GetBulbMenuItems(IHighlighter highlighter);
    [CanBeNullAttribute]
private static UnitTestBulbItemsCollector CreateCollector(IHighlighter highlighter);
    [NotNullAttribute]
public static IconId GetIcon(ISolution solution, IUnitTestElement element);
}
[StaticSeverityHighlightingAttribute("1", "JetBrains.ReSharper.UnitTestFramework.Exploration.Daemon.Highlighting.UnitTestGutterMarks")]
internal class JetBrains.ReSharper.UnitTestFramework.Exploration.Daemon.Highlighting.UnitTestElementHighlighting : object {
    public static string HIGHLIGHTER_ATTRIBUTE_BROKEN_ELEMENT;
    public static string HIGHLIGHTER_ATTRIBUTE_ELEMENT;
    public static string HIGHLIGHTER_ATTRIBUTE_ELEMENTS;
    public static string HIGHLIGHTER_ATTRIBUTE_CONTAINER_SUCCESSFUL;
    public static string HIGHLIGHTER_ATTRIBUTE_ELEMENT_SUCCESSFUL;
    public static string HIGHLIGHTER_ATTRIBUTE_CONTAINER_FAILED;
    public static string HIGHLIGHTER_ATTRIBUTE_ELEMENT_FAILED;
    public static string HIGHLIGHTER_ATTRIBUTE_CONTAINER_IGNORED;
    public static string HIGHLIGHTER_ATTRIBUTE_ELEMENT_IGNORED;
    private DocumentRange myRange;
    [CompilerGeneratedAttribute]
private IUnitTestLikeElementDisposition <Disposition>k__BackingField;
    public IUnitTestLikeElementDisposition Disposition { get; }
    public string AttributeId { get; }
    public string ErrorStripeToolTip { get; }
    public string ToolTip { get; }
    public UnitTestElementHighlighting(IUnitTestLikeElementDisposition disposition, DocumentRange range);
    [CompilerGeneratedAttribute]
public sealed virtual IUnitTestLikeElementDisposition get_Disposition();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
    public sealed virtual string get_AttributeId();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual string get_ToolTip();
    public sealed virtual RichTextBlock TryGetTooltip(HighlighterTooltipKind where);
    [CompilerGeneratedAttribute]
internal static RichTextBlock <TryGetTooltip>g__Render|22_0(string outcome, UnitTestResultWithPropagation resultIfShown, <>c__DisplayClass22_0& );
}
internal class JetBrains.ReSharper.UnitTestFramework.Exploration.Daemon.Highlighting.UnitTestElementsGutterContainerFailedMark : UnitTestElementGutterMarkBase {
}
internal class JetBrains.ReSharper.UnitTestFramework.Exploration.Daemon.Highlighting.UnitTestElementsGutterContainerIgnoredMark : UnitTestElementGutterMarkBase {
}
internal class JetBrains.ReSharper.UnitTestFramework.Exploration.Daemon.Highlighting.UnitTestElementsGutterContainerSuccessfulMark : UnitTestElementGutterMarkBase {
}
internal class JetBrains.ReSharper.UnitTestFramework.Exploration.Daemon.Highlighting.UnitTestElementsGutterFailedMark : UnitTestElementGutterMarkBase {
}
internal class JetBrains.ReSharper.UnitTestFramework.Exploration.Daemon.Highlighting.UnitTestElementsGutterIgnoredMark : UnitTestElementGutterMarkBase {
}
internal class JetBrains.ReSharper.UnitTestFramework.Exploration.Daemon.Highlighting.UnitTestElementsGutterMark : UnitTestElementGutterMarkBase {
}
internal class JetBrains.ReSharper.UnitTestFramework.Exploration.Daemon.Highlighting.UnitTestElementsGutterSuccessfulMark : UnitTestElementGutterMarkBase {
}
[RegisterHighlighterAttribute("ReSharper Broken Unit Test Element")]
[RegisterHighlighterAttribute("ReSharper Unit Test Element")]
[RegisterHighlighterAttribute("ReSharper Unit Test Element Container")]
[RegisterHighlighterAttribute("ReSharper Unit Test Container Successful")]
[RegisterHighlighterAttribute("ReSharper Unit Test Element Successful")]
[RegisterHighlighterAttribute("ReSharper Unit Test Container Failed")]
[RegisterHighlighterAttribute("ReSharper Unit Test Element Failed")]
[RegisterHighlighterAttribute("ReSharper Unit Test Container Ignored")]
[RegisterHighlighterAttribute("ReSharper Unit Test Element Ignored")]
[RegisterStaticHighlightingsGroupAttribute("JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "UnitTestGutterMarks_Text", "False")]
public static class JetBrains.ReSharper.UnitTestFramework.Exploration.Daemon.Highlighting.UnitTestGutterMarks : object {
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.UnitTestFramework.Exploration.Daemon.Highlighting.UnitTestNugetPackageMissingDetailsBulbItemProvider : object {
    public sealed virtual BulbMenuItem TryCreateBulbMenuItem(BrokenUnitTestElementHighlighting highlighting);
    private static void Resolve(BrokenUnitTestElementHighlighting highlighting, NugetPackageMissingDetails missedNuGet);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.UnitTestFramework.Exploration.Daemon.Highlighting.UnitTestPsiIconManagerExtension : object {
    private IUnitTestPsiManager myUnitTestManager;
    private IUnitTestResultManager myResultManager;
    public UnitTestPsiIconManagerExtension(Lifetime lifetime, IUnitTestPsiManager unitTestManager, IUnitTestResultManager resultManager, PsiIconManager psiIconManager);
    public sealed virtual IconId GetImageId(IDeclaredElement declaredElement, PsiLanguageType languageType, Boolean& canApplyExtensions);
    private UnitTestElementKind GetKind(IUnitTestElement element);
}
public interface JetBrains.ReSharper.UnitTestFramework.Exploration.Daemon.IUnitTestExplorerFromFile {
    [NotNullAttribute]
public IUnitTestProvider Provider { get; }
    public abstract virtual IUnitTestProvider get_Provider();
    public abstract virtual void ProcessFile(IFile psiFile, IUnitTestElementObserverOnFile observer, Func`1<bool> interrupted);
}
public interface JetBrains.ReSharper.UnitTestFramework.Exploration.Daemon.IUnitTestLikeElementDisposition {
    [NotNullAttribute]
[ItemNotNullAttribute]
public IReadOnlyList`1<UnitTestElementLocation> Locations { get; }
    public abstract virtual IReadOnlyList`1<UnitTestElementLocation> get_Locations();
}
public class JetBrains.ReSharper.UnitTestFramework.Exploration.Daemon.UnitTestElementDisposition : object {
    [NotNullAttribute]
public static UnitTestElementDisposition InvalidDisposition;
    [CompilerGeneratedAttribute]
private IUnitTestElement <Element>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<UnitTestElementLocation> <Locations>k__BackingField;
    [NotNullAttribute]
public IUnitTestElement Element { get; }
    public IReadOnlyList`1<UnitTestElementLocation> Locations { get; }
    public UnitTestElementDisposition(IUnitTestElement element, UnitTestElementLocation[] locations);
    public UnitTestElementDisposition(IUnitTestElement element, IReadOnlyList`1<UnitTestElementLocation> locations);
    private static UnitTestElementDisposition();
    [CompilerGeneratedAttribute]
public IUnitTestElement get_Element();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyList`1<UnitTestElementLocation> get_Locations();
}
public abstract class JetBrains.ReSharper.UnitTestFramework.Exploration.Daemon.UnitTestElementRecursivePsiProcessor : object {
    [NotNullAttribute]
private Func`1<bool> myInterrupted;
    public bool ProcessingIsFinished { get; }
    protected UnitTestElementRecursivePsiProcessor(Func`1<bool> interrupted);
    public virtual bool InteriorShouldBeProcessed(ITreeNode element);
    public virtual bool get_ProcessingIsFinished();
    public virtual void ProcessAfterInterior(ITreeNode element);
    public abstract virtual void ProcessBeforeInterior(ITreeNode element);
    protected void DiscoverInheritedTests(ITypeElement derivedType, Predicate`1<IMethod> isTestMethod, Action`1<IMethod> elementFromMethodFactory, bool includeSelf);
    protected bool IsOverridenInInheritor(IMethod method, ITypeElement typeElement);
    protected void CheckForInterrupt();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Exploration.Daemon.UnitTestElementRecursivePsiProcessor/<<DiscoverInheritedTests>g__GetAllTypes|7_0>d")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<ITypeElement> <DiscoverInheritedTests>g__GetAllTypes|7_0(ITypeElement typeElement, bool includeSelf);
}
[SolutionComponentAttribute("0")]
[HighlightingSourceAttribute]
internal class JetBrains.ReSharper.UnitTestFramework.Exploration.Daemon.UnitTestFileExplorer : object {
    [NotNullAttribute]
private IShellLocks myShellLocks;
    [NotNullAttribute]
private ISolution mySolution;
    [NotNullAttribute]
private IPsiServices myPsiServices;
    [NotNullAttribute]
private IEnumerable`1<IUnitTestExplorerFromFile> myExplorers;
    [NotNullAttribute]
private IUnitTestArtifactExplorationCache myExplorationCache;
    [NotNullAttribute]
private IUnitTestProviderManager myProviderManager;
    [NotNullAttribute]
private IUnitTestElementRepository myRepository;
    [NotNullAttribute]
private IUnitTestDiscoveryManager myDiscoveryManager;
    public UnitTestFileExplorer(IShellLocks shellLocks, ISolution solution, IPsiServices psiServices, IEnumerable`1<IUnitTestExplorerFromFile> explorers, IUnitTestArtifactExplorationCache explorationCache, IUnitTestProviderManager providerManager, IUnitTestElementRepository repository, IUnitTestDiscoveryManager discoveryManager);
    public void Explore(IPsiSourceFile sourceFile, IDocument document, Func`1<bool> interrupt, Action`1<HighlightingInfo> addHighlighting);
    private IUnitTestElementObserverOnFile GetObserverOnFile(IUnitTestDiscoveryTransaction tx, IPsiSourceFile psiSourceFile, Action`1<HighlightingInfo> addHighlighting);
    private bool ShouldProcessFile(IUnitTestElementSource source);
    [NotNullAttribute]
public IList`1<IUnitTestElement> GetElements(IDocument document, TextRange documentRange, Func`1<bool> checkForInterrupt);
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.UnitTestFramework.Exploration.Daemon.UnitTestingBetterGutterMarkIconsUpdater : object {
    private ILogger myLogger;
    private ISolution mySolution;
    private IDocumentMarkupManager myDocumentMarkupManager;
    private UnitTestingHighlightersCache myHighlightersCache;
    private ISet`1<UnitTestElementId> myUpdatedElements;
    private GroupingEvent myResultUpdated;
    public UnitTestingBetterGutterMarkIconsUpdater(Lifetime lifetime, ISolution solution, IShellLocks shellLocks, ITextControlManager textControlManager, IDocumentMarkupManager documentMarkupManager, ILogger logger);
    private void OnProcessUpdated();
    private void UpdateIconsInActiveDocuments(ISet`1<UnitTestElementId> updatedElements);
    private void OnUnitTestResultUpdated(UnitTestRecentResultEventArgs e);
}
public static class JetBrains.ReSharper.UnitTestFramework.Exploration.DiscoveryContext : object {
    [CanBeNullAttribute]
public static IUnitTestElementSource Source { get; }
    public static IUnitTestElementSource get_Source();
    public static void SetSource(IUnitTestElementSource source);
    public static void ClearSource();
    [NotNullAttribute]
public static IDisposable As(IUnitTestElementSource source);
}
public class JetBrains.ReSharper.UnitTestFramework.Exploration.DispositionDiscardingObserverOnFile : object {
    [NotNullAttribute]
private IUnitTestElementObserver myInner;
    public IUnitTestElementSource Source { get; }
    public IPsiSourceFile PsiSourceFile { get; }
    public DispositionDiscardingObserverOnFile(IUnitTestElementObserver inner);
    public sealed virtual IUnitTestElementSource get_Source();
    public sealed virtual IPsiSourceFile get_PsiSourceFile();
    public sealed virtual T GetElementById(string testId, string salt);
    public sealed virtual void OnUnitTestElement(IUnitTestElement element);
    public sealed virtual void OnUnitTestElementDisposition(IUnitTestLikeElement element, TextRange navigationRange, TextRange containingRange);
}
public interface JetBrains.ReSharper.UnitTestFramework.Exploration.External.IUnitTestExplorerExternal {
    [NotNullAttribute]
public abstract virtual Task ProcessExternal(CancellationToken ct);
}
public interface JetBrains.ReSharper.UnitTestFramework.Exploration.External.IUnitTestExternalExplorationRunner {
    [NotNullAttribute]
public abstract virtual Task ProcessExternal(CancellationToken ct);
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.UnitTestFramework.Exploration.External.UnitTestExternalExplorationRunner : object {
    private IEnumerable`1<IUnitTestExplorerExternal> myExplorers;
    public UnitTestExternalExplorationRunner(IEnumerable`1<IUnitTestExplorerExternal> explorers);
    public sealed virtual Task ProcessExternal(CancellationToken ct);
}
public interface JetBrains.ReSharper.UnitTestFramework.Exploration.ICppTestSuiteElement {
}
public interface JetBrains.ReSharper.UnitTestFramework.Exploration.IUnitTestChangeListener {
    [NotNullAttribute]
public abstract virtual ProjectSubscription SubscribeToProject(IProject project, CancellationToken token);
    [NotNullAttribute]
[ItemNotNullAttribute]
public abstract virtual TargetFrameworkSubscription[] SubscribeToFrameworks(IProject project, CancellationToken token);
    [NotNullAttribute]
[ItemNotNullAttribute]
public abstract virtual ProviderSubscription[] SubscribeToProviders(IProject project, TargetFrameworkId targetFrameworkId, CancellationToken token);
}
public interface JetBrains.ReSharper.UnitTestFramework.Exploration.IUnitTestDiscoveryManager {
    [NotNullAttribute]
public abstract virtual IUnitTestDiscoveryTransaction BeginTransaction(IUnitTestElementSource source);
}
public interface JetBrains.ReSharper.UnitTestFramework.Exploration.IUnitTestDiscoveryTransaction {
    [NotNullAttribute]
public IUnitTestElementObserver Observer { get; }
    [NotNullAttribute]
[ItemNotNullAttribute]
public ISet`1<IUnitTestElement> Elements { get; }
    public abstract virtual IUnitTestElementObserver get_Observer();
    public abstract virtual ISet`1<IUnitTestElement> get_Elements();
    [NotNullAttribute]
public abstract virtual Task`1<IUnitTestTransactionCommitResult> CommitAsync(CancellationToken ct);
}
public interface JetBrains.ReSharper.UnitTestFramework.Exploration.IUnitTestElementObserver {
    [NotNullAttribute]
public IUnitTestElementSource Source { get; }
    public abstract virtual IUnitTestElementSource get_Source();
    [CanBeNullAttribute]
public abstract virtual T GetElementById(string testId, string salt);
    public abstract virtual void OnUnitTestElement(IUnitTestElement element);
}
public interface JetBrains.ReSharper.UnitTestFramework.Exploration.IUnitTestElementObserverOnFile {
    [NotNullAttribute]
public IPsiSourceFile PsiSourceFile { get; }
    public abstract virtual IPsiSourceFile get_PsiSourceFile();
    public abstract virtual void OnUnitTestElementDisposition(IUnitTestLikeElement element, TextRange navigationRange, TextRange containingRange);
}
public interface JetBrains.ReSharper.UnitTestFramework.Exploration.IUnitTestElementsCreatedEvent {
    public UnitTestElementOrigin Origin { get; }
    public abstract virtual UnitTestElementOrigin get_Origin();
}
public interface JetBrains.ReSharper.UnitTestFramework.Exploration.IUnitTestElementsCreatingEvent {
}
public interface JetBrains.ReSharper.UnitTestFramework.Exploration.IUnitTestElementsEvent {
    [NotNullAttribute]
public IUnitTestTransaction Tx { get; }
    [NotNullAttribute]
[ItemNotNullAttribute]
public IReadOnlySet`1<IUnitTestElement> Elements { get; }
    public abstract virtual IUnitTestTransaction get_Tx();
    public abstract virtual IReadOnlySet`1<IUnitTestElement> get_Elements();
}
public interface JetBrains.ReSharper.UnitTestFramework.Exploration.IUnitTestElementSource {
    public UnitTestElementOrigin Origin { get; }
    public abstract virtual UnitTestElementOrigin get_Origin();
    [NotNullAttribute]
public abstract virtual IUnitTestElementCriterion ToCriterion();
}
public interface JetBrains.ReSharper.UnitTestFramework.Exploration.IUnitTestElementsRemovedEvent {
}
public interface JetBrains.ReSharper.UnitTestFramework.Exploration.IUnitTestElementUpdateEvent {
    public UnitTestElementChanges Changes { get; }
    public abstract virtual UnitTestElementChanges get_Changes();
}
public interface JetBrains.ReSharper.UnitTestFramework.Exploration.IUnitTestExplorationFacade {
    [NotNullAttribute]
public abstract virtual Task RescanAll(CancellationToken ct);
}
public interface JetBrains.ReSharper.UnitTestFramework.Exploration.IUnitTestExplorationResultBrowser {
    public abstract virtual void OpenResult(IExplorationResult result);
}
public interface JetBrains.ReSharper.UnitTestFramework.Exploration.IUnitTestPersistenceEvent {
    [NotNullAttribute]
public IUnitTestTransaction Tx { get; }
    [NotNullAttribute]
public IUnitTestElement Element { get; }
    public abstract virtual IUnitTestTransaction get_Tx();
    public abstract virtual IUnitTestElement get_Element();
}
public class JetBrains.ReSharper.UnitTestFramework.Exploration.ProjectSubscription : object {
    private CancellationTokenSource myCts;
    [CompilerGeneratedAttribute]
private IProject <Project>k__BackingField;
    [NotNullAttribute]
public IProject Project { get; }
    [NotNullAttribute]
public CancellationToken Token { get; }
    public ProjectSubscription(IProject project, CancellationTokenSource cts);
    [CompilerGeneratedAttribute]
public IProject get_Project();
    public CancellationToken get_Token();
    public sealed virtual void Dispose();
}
public class JetBrains.ReSharper.UnitTestFramework.Exploration.ProviderSubscription : object {
    [NotNullAttribute]
private CancellationTokenSource myCts;
    [CompilerGeneratedAttribute]
private IProject <Project>k__BackingField;
    [CompilerGeneratedAttribute]
private TargetFrameworkId <TargetFrameworkId>k__BackingField;
    [CompilerGeneratedAttribute]
private IUnitTestProvider <Provider>k__BackingField;
    [NotNullAttribute]
public IProject Project { get; }
    [NotNullAttribute]
public TargetFrameworkId TargetFrameworkId { get; }
    [NotNullAttribute]
public IUnitTestProvider Provider { get; }
    [NotNullAttribute]
public CancellationToken Token { get; }
    public ProviderSubscription(IProject project, TargetFrameworkId targetFrameworkId, IUnitTestProvider provider, CancellationTokenSource cts);
    [CompilerGeneratedAttribute]
public IProject get_Project();
    [CompilerGeneratedAttribute]
public TargetFrameworkId get_TargetFrameworkId();
    [CompilerGeneratedAttribute]
public IUnitTestProvider get_Provider();
    public CancellationToken get_Token();
    public sealed virtual void Dispose();
}
public class JetBrains.ReSharper.UnitTestFramework.Exploration.TargetFrameworkSubscription : object {
    [NotNullAttribute]
private CancellationTokenSource myCts;
    [CompilerGeneratedAttribute]
private IProject <Project>k__BackingField;
    [CompilerGeneratedAttribute]
private TargetFrameworkId <TargetFrameworkId>k__BackingField;
    [NotNullAttribute]
public IProject Project { get; }
    [NotNullAttribute]
public TargetFrameworkId TargetFrameworkId { get; }
    [NotNullAttribute]
public CancellationToken Token { get; }
    public TargetFrameworkSubscription(IProject project, TargetFrameworkId targetFrameworkId, CancellationTokenSource cts);
    [CompilerGeneratedAttribute]
public IProject get_Project();
    [CompilerGeneratedAttribute]
public TargetFrameworkId get_TargetFrameworkId();
    public CancellationToken get_Token();
    public sealed virtual void Dispose();
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.UnitTestFramework.Exploration.UnitTestChangeListener : object {
    [NotNullAttribute]
private Lifetime myLifetime;
    [NotNullAttribute]
private ISolution mySolution;
    [NotNullAttribute]
private IPsiServices myPsiServices;
    [NotNullAttribute]
private IProjectModelAwaiter myProjectModelAwaiter;
    [NotNullAttribute]
private IUnitTestProviderManager myProviderManager;
    [NotNullAttribute]
private IUnitTestArtifactExplorationCache myExplorationCache;
    [NotNullAttribute]
private Lazy`1<IUnitTestArtifactExplorationProcess> myBackgroundExplorer;
    [NotNullAttribute]
private IUnitTestElementRepository myElementRepository;
    [NotNullAttribute]
private ChangeManager myChangeManager;
    [NotNullAttribute]
private IDaemon myDaemon;
    [NotNullAttribute]
private ConcurrentDictionary`2<string, CancellationTokenSource> myProjectRootCts;
    [NotNullAttribute]
private ConcurrentDictionary`2<Key, CancellationTokenSource> myTfRootCts;
    [NotNullAttribute]
private ConcurrentDictionary`2<string, CancellationTokenSource> myProviderRootCts;
    [NotNullAttribute]
private ISet`1<string> myProjectsToTrack;
    [NotNullAttribute]
private Task myReady;
    public UnitTestChangeListener(Lifetime lifetime, ISolution solution, IPsiServices psiServices, IProjectModelAwaiter projectModelAwaiter, IUnitTestProviderManager providerManager, IUnitTestArtifactExplorationCache explorationCache, IUnitTestElementRepository elementRepository, ChangeManager changeManager, ISolutionBuilder solutionBuilder, IUnitTestingInitializationAwaiter ready, IDaemon daemon);
    private void OnChanged(ChangeEventArgs e);
    private void OnUnitTestProvidersChanged();
    private void OnBuildSessionChanged(SolutionBuilderRequest state);
    public sealed virtual ProjectSubscription SubscribeToProject(IProject project, CancellationToken token);
    public sealed virtual TargetFrameworkSubscription[] SubscribeToFrameworks(IProject project, CancellationToken token);
    public sealed virtual ProviderSubscription[] SubscribeToProviders(IProject project, TargetFrameworkId targetFrameworkId, CancellationToken token);
    protected virtual void ScheduleExplorationOnBuildFinish(List`1<IProject> builtProjects);
    [CompilerGeneratedAttribute]
private void <OnChanged>g__CancelDiscoveryForDeletedProjects|16_0(MyProjectModelChangeVisitor visitor);
    [CompilerGeneratedAttribute]
private void <OnChanged>g__RemoveElementsFromDeletedEntities|16_1(MyProjectModelChangeVisitor visitor);
    [CompilerGeneratedAttribute]
private void <OnChanged>g__ScheduleDiscoveryForNewProjects|16_2(IProject project);
}
public class JetBrains.ReSharper.UnitTestFramework.Exploration.UnitTestDiscoveryEventArgs : object {
    [CompilerGeneratedAttribute]
private IUnitTestElementSource <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private IUnitTestTransactionCommitResult <Result>k__BackingField;
    [NotNullAttribute]
public IUnitTestElementSource Source { get; }
    [NotNullAttribute]
public IUnitTestTransactionCommitResult Result { get; }
    public UnitTestDiscoveryEventArgs(IUnitTestElementSource source, IUnitTestTransactionCommitResult result);
    [CompilerGeneratedAttribute]
public IUnitTestElementSource get_Source();
    [CompilerGeneratedAttribute]
public IUnitTestTransactionCommitResult get_Result();
}
[SolutionComponentAttribute("0")]
internal class JetBrains.ReSharper.UnitTestFramework.Exploration.UnitTestDiscoveryManager : object {
    [NotNullAttribute]
private IEventContext myEventContext;
    [NotNullAttribute]
private IUnitTestElementRepository myRepository;
    public UnitTestDiscoveryManager(IEventContext eventContext, IUnitTestElementRepository repository);
    public sealed virtual IUnitTestDiscoveryTransaction BeginTransaction(IUnitTestElementSource source);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.UnitTestFramework.Exploration.UnitTestDiscoveryManagerExtensions : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static IUnitTestDiscoveryTransaction BeginTransaction(IUnitTestDiscoveryManager manager, IUnitTestProvider provider, IProjectFile projectFile);
}
internal class JetBrains.ReSharper.UnitTestFramework.Exploration.UnitTestDiscoveryTransaction : object {
    [NotNullAttribute]
private IEventContext myEventContext;
    [NotNullAttribute]
private IUnitTestElementRepository myRepository;
    [NotNullAttribute]
private JetHashSet`1<IUnitTestElement> myElements;
    [NotNullAttribute]
private IUnitTestElementSource mySource;
    [NotNullAttribute]
private UnitTestElement myFakeElementForSearch;
    [NotNullAttribute]
private ILogger myLogger;
    [NotNullAttribute]
private Guid myId;
    public IUnitTestElementObserver Observer { get; }
    public ISet`1<IUnitTestElement> Elements { get; }
    public IUnitTestElementSource Source { get; }
    private string Ident { get; }
    public UnitTestDiscoveryTransaction(IEventContext eventContext, IUnitTestElementRepository repository, IUnitTestElementSource source);
    public sealed virtual IUnitTestElementObserver get_Observer();
    public sealed virtual ISet`1<IUnitTestElement> get_Elements();
    public sealed virtual IUnitTestElementSource get_Source();
    private string get_Ident();
    private sealed virtual override T JetBrains.ReSharper.UnitTestFramework.Exploration.IUnitTestElementObserver.GetElementById(string testId, string salt);
    public sealed virtual void OnUnitTestElement(IUnitTestElement element);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Exploration.UnitTestDiscoveryTransaction/<CommitAsync>d__18")]
public sealed virtual Task`1<IUnitTestTransactionCommitResult> CommitAsync(CancellationToken ct);
    private void PrepareForCommit(IUnitTestTransaction tx);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
internal static IUnitTestElement <PrepareForCommit>g__TryGetByNaturalId|19_2(IUnitTestElement element, <>c__DisplayClass19_0& );
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.UnitTestFramework.Exploration.UnitTestElementObserverExtensions : object {
    [ExtensionAttribute]
public static void OnUnitTestElementWithChildren(IUnitTestElementObserver observer, IUnitTestElement element);
}
public class JetBrains.ReSharper.UnitTestFramework.Exploration.UnitTestElementsCreatedEvent : object {
    [CompilerGeneratedAttribute]
private IUnitTestTransaction <Tx>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlySet`1<IUnitTestElement> <Elements>k__BackingField;
    [CompilerGeneratedAttribute]
private UnitTestElementOrigin <Origin>k__BackingField;
    public IUnitTestTransaction Tx { get; }
    public IReadOnlySet`1<IUnitTestElement> Elements { get; }
    public UnitTestElementOrigin Origin { get; }
    public UnitTestElementsCreatedEvent(IUnitTestTransaction tx, IReadOnlySet`1<IUnitTestElement> elements, UnitTestElementOrigin origin);
    [CompilerGeneratedAttribute]
public sealed virtual IUnitTestTransaction get_Tx();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlySet`1<IUnitTestElement> get_Elements();
    [CompilerGeneratedAttribute]
public sealed virtual UnitTestElementOrigin get_Origin();
}
public class JetBrains.ReSharper.UnitTestFramework.Exploration.UnitTestElementsCreatingEvent : object {
    [CompilerGeneratedAttribute]
private IUnitTestTransaction <Tx>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlySet`1<IUnitTestElement> <Elements>k__BackingField;
    public IUnitTestTransaction Tx { get; }
    public IReadOnlySet`1<IUnitTestElement> Elements { get; }
    public UnitTestElementsCreatingEvent(IUnitTestTransaction tx, IReadOnlySet`1<IUnitTestElement> elements);
    [CompilerGeneratedAttribute]
public sealed virtual IUnitTestTransaction get_Tx();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlySet`1<IUnitTestElement> get_Elements();
}
public class JetBrains.ReSharper.UnitTestFramework.Exploration.UnitTestElementSource : object {
    [NotNullAttribute]
private IExplorationTarget myTarget;
    [CanBeNullAttribute]
private IUnitTestElementCriterion myCriterion;
    [CompilerGeneratedAttribute]
private UnitTestElementOrigin <Origin>k__BackingField;
    public UnitTestElementOrigin Origin { get; }
    public IProject Project { get; }
    public TargetFrameworkId TargetFrameworkId { get; }
    public IUnitTestProvider Provider { get; }
    public FileSystemPath Output { get; }
    public UnitTestElementSource(UnitTestElementOrigin origin, IExplorationTarget target, IUnitTestElementCriterion criterion);
    [CompilerGeneratedAttribute]
public sealed virtual UnitTestElementOrigin get_Origin();
    public sealed virtual IProject get_Project();
    public sealed virtual TargetFrameworkId get_TargetFrameworkId();
    public sealed virtual IUnitTestProvider get_Provider();
    public sealed virtual FileSystemPath get_Output();
    public sealed virtual IUnitTestElementCriterion ToCriterion();
    public virtual string ToString();
}
public class JetBrains.ReSharper.UnitTestFramework.Exploration.UnitTestElementSourceOnFile : UnitTestElementSource {
    [CompilerGeneratedAttribute]
private IProjectFile <ProjectFile>k__BackingField;
    [NotNullAttribute]
public IProjectFile ProjectFile { get; }
    public UnitTestElementSourceOnFile(UnitTestElementOrigin origin, IExplorationTarget target, IProjectFile projectFile);
    [CompilerGeneratedAttribute]
public IProjectFile get_ProjectFile();
    public virtual string ToString();
}
public class JetBrains.ReSharper.UnitTestFramework.Exploration.UnitTestElementsRemovedEvent : object {
    [CompilerGeneratedAttribute]
private IUnitTestTransaction <Tx>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlySet`1<IUnitTestElement> <Elements>k__BackingField;
    public IUnitTestTransaction Tx { get; }
    public IReadOnlySet`1<IUnitTestElement> Elements { get; }
    public UnitTestElementsRemovedEvent(IUnitTestTransaction tx, IReadOnlySet`1<IUnitTestElement> elements);
    [CompilerGeneratedAttribute]
public sealed virtual IUnitTestTransaction get_Tx();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlySet`1<IUnitTestElement> get_Elements();
}
public class JetBrains.ReSharper.UnitTestFramework.Exploration.UnitTestElementUpdateEvent : UnitTestPersistenceEvent {
    [CompilerGeneratedAttribute]
private UnitTestElementChanges <Changes>k__BackingField;
    public UnitTestElementChanges Changes { get; }
    public UnitTestElementUpdateEvent(IUnitTestTransaction tx, IUnitTestElement element, UnitTestElementChanges changes);
    [CompilerGeneratedAttribute]
public sealed virtual UnitTestElementChanges get_Changes();
}
public class JetBrains.ReSharper.UnitTestFramework.Exploration.UnitTestElementUpdatingEvent : UnitTestPersistenceEvent {
    [CompilerGeneratedAttribute]
private IUnitTestElement <Original>k__BackingField;
    [CompilerGeneratedAttribute]
private UnitTestElementChanges <Changes>k__BackingField;
    [NotNullAttribute]
public IUnitTestElement Original { get; }
    public UnitTestElementChanges Changes { get; }
    public UnitTestElementUpdatingEvent(IUnitTestTransaction tx, IUnitTestElement element, IUnitTestElement original, UnitTestElementChanges changes);
    [CompilerGeneratedAttribute]
public IUnitTestElement get_Original();
    [CompilerGeneratedAttribute]
public UnitTestElementChanges get_Changes();
}
[SolutionComponentAttribute("0")]
internal class JetBrains.ReSharper.UnitTestFramework.Exploration.UnitTestExplorationFacade : object {
    [NotNullAttribute]
private IShellLocks myLocks;
    [NotNullAttribute]
private ISolution mySolution;
    [NotNullAttribute]
private IUnitTestArtifactExplorationProcess myArtifactExplorer;
    [NotNullAttribute]
private IUnitTestArtifactExplorationCache myArtifactExplorationCache;
    [NotNullAttribute]
private IUnitTestExternalExplorationRunner myExternalExplorer;
    [NotNullAttribute]
private ILogger myLogger;
    public UnitTestExplorationFacade(IShellLocks locks, ISolution solution, IUnitTestArtifactExplorationProcess artifactExplorer, IUnitTestArtifactExplorationCache artifactExplorationCache, IUnitTestExternalExplorationRunner externalExplorer, ILogger logger);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Exploration.UnitTestExplorationFacade/<RescanAll>d__7")]
public sealed virtual Task RescanAll(CancellationToken ct);
    [CompilerGeneratedAttribute]
private void <RescanAll>b__7_0();
    [CompilerGeneratedAttribute]
private void <RescanAll>b__7_1();
    [CompilerGeneratedAttribute]
private ICollection`1<IProject> <RescanAll>b__7_2();
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.UnitTestFramework.Exploration.UnitTestNuGetAdapterSearcher : object {
    private static PathSearchFlags SearchFlags;
    private static string AdapterMask;
    [NotNullAttribute]
private IShellLocks myLocks;
    [NotNullAttribute]
private ISolution mySolution;
    [NotNullAttribute]
private NuGetPackageReferenceTracker myNuGetPackageReferenceTracker;
    public UnitTestNuGetAdapterSearcher(IShellLocks locks, ISolution solution, NuGetPackageReferenceTracker nuGetPackageReferenceTracker);
    [NotNullAttribute]
[ItemNotNullAttribute]
[PureAttribute]
public IEnumerable`1<VirtualFileSystemPath> GetNuGetAdapters(IProject project);
    public sealed virtual void Dump(StreamWriter writer);
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.UnitTestFramework.Exploration.UnitTestNuGetInvalidator : object {
    private TaskCompletionSource`1<int> myInitialTcs;
    private TaskCompletionSource`1<int> myIsReadyTcs;
    [CompilerGeneratedAttribute]
private Task <Task>k__BackingField;
    public Task Task { get; }
    public UnitTestNuGetInvalidator(Lifetime lifetime, INuGetSolutionManagerEx nuGetSolutionManager, NuGetLockFileTracker nuGetLockFileTracker, IDaemon daemon, NuGetPackageReferenceTracker nuGetPackageReferenceTracker, IUnitTestArtifactExplorationCache explorationProcess, ILogger logger);
    [CompilerGeneratedAttribute]
public sealed virtual Task get_Task();
}
public class JetBrains.ReSharper.UnitTestFramework.Exploration.UnitTestPersistenceEvent : object {
    [CompilerGeneratedAttribute]
private IUnitTestTransaction <Tx>k__BackingField;
    [CompilerGeneratedAttribute]
private IUnitTestElement <Element>k__BackingField;
    public IUnitTestTransaction Tx { get; }
    public IUnitTestElement Element { get; }
    public UnitTestPersistenceEvent(IUnitTestTransaction tx, IUnitTestElement element);
    [CompilerGeneratedAttribute]
public sealed virtual IUnitTestTransaction get_Tx();
    [CompilerGeneratedAttribute]
public sealed virtual IUnitTestElement get_Element();
}
public class JetBrains.ReSharper.UnitTestFramework.Features.Analysis.MethodFieldPropertyFilter : object {
    [NotNullAttribute]
public static MethodFieldPropertyFilter Instance;
    public ResolveErrorType ErrorType { get; }
    public FilterRunType RunType { get; }
    private static MethodFieldPropertyFilter();
    public sealed virtual bool TryFilterToDestination(List`1<ISymbolInfo> source, List`1<ISymbolInfo> destination);
    public sealed virtual ResolveErrorType get_ErrorType();
    public sealed virtual FilterRunType get_RunType();
}
public interface JetBrains.ReSharper.UnitTestFramework.Features.Editor.IBrokenUnitTestElementGutterMarkItemProvider {
    [CanBeNullAttribute]
public abstract virtual BulbMenuItem TryCreateBulbMenuItem(BrokenUnitTestElementHighlighting highlighting);
}
public interface JetBrains.ReSharper.UnitTestFramework.Features.Editor.IUnitTestElementGutterMarkItemProvider {
    [NotNullAttribute]
public abstract virtual IEnumerable`1<BulbMenuItem> CreateBulbMenuItems(IUnitTestElement element, IEnumerable`1<IUnitTestElement> subElements);
}
public interface JetBrains.ReSharper.UnitTestFramework.Features.IUnitTestPsiManager {
    public abstract virtual bool IsElementOfKind(IDeclaredElement declaredElement, UnitTestElementKind elementKind);
    [CanBeNullAttribute]
public abstract virtual IUnitTestElement GetElement(IDeclaredElement declaredElement);
    [NotNullAttribute]
public abstract virtual IEnumerable`1<IUnitTestElement> GetElements(IReadOnlyCollection`1<IDeclaredElement> elements);
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.UnitTestFramework.Features.Navigation.CodeStructureUpdateProvider : object {
    public CodeStructureUpdateProvider(Lifetime lifetime, ICodeStructureBrowser codeStructureBrowser);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.UnitTestFramework.Features.Navigation.ProjectWithTestsCache : object {
    [NotNullAttribute]
private WeakToStrongDictionary`2<IProject, bool> myCache;
    public sealed virtual void ElementCreated(IUnitTestElement element);
    public sealed virtual void ElementUpdated(IUnitTestElement element, UnitTestElementChanges changes);
    public sealed virtual void ElementRemoved(IUnitTestElement element);
    public sealed virtual void Clear();
    public sealed virtual void Commit();
    public sealed virtual void Rollback();
    public bool GetOrQuery(IUnitTestElementRepository repository, IProject project);
    private void Invalidate();
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.UnitTestFramework.Features.Navigation.ProjectWithTestsDetector : object {
    private ProjectWithTestsCache myProjectWithTestsCache;
    private IUnitTestElementRepository myUnitTestElementRepository;
    public ProjectWithTestsDetector(IUnitTestElementRepository unitTestElementRepository, ProjectWithTestsCache projectWithTestsCache);
    public sealed virtual bool HasTests(IProject project);
}
[ShellFeaturePartAttribute("16")]
internal class JetBrains.ReSharper.UnitTestFramework.Features.Navigation.UnitTestElementGotoProvider : CachedGotoSymbolBase`1<IByShortNameCache> {
    public Func`2<MatcherScore, int> ItemsPriorityFunc { get; }
    public UnitTestElementGotoProvider(IShellLocks locks);
    public virtual bool IsApplicable(INavigationScope scope, GotoContext gotoContext, IIdentifierMatcher matcher);
    private sealed virtual override bool JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.IApplicableGotoProvider.IsApplicable(INavigationScope scope, GotoContext gotoContext, IIdentifierMatcher matcher);
    protected virtual IByShortNameCache GetCache(INavigationScope scope, ISolution solution, GotoContext gotoContext);
    protected virtual IEnumerable`1<string> GetNames(IByShortNameCache cache, INavigationScope scope, GotoContext context);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Features.Navigation.UnitTestElementGotoProvider/<GetOccurrencesByMatchingInfo>d__5")]
public virtual IEnumerable`1<IOccurrence> GetOccurrencesByMatchingInfo(MatchingInfo navigationInfo, INavigationScope scope, GotoContext gotoContext);
    public sealed virtual Func`2<MatcherScore, int> get_ItemsPriorityFunc();
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.UnitTestFramework.Features.Navigation.ZoneMarker : object {
}
public interface JetBrains.ReSharper.UnitTestFramework.Features.QuickDoc.IUnitTestQuickDocContributor {
    public abstract virtual void ContributeToSummary(IUnitTestElement element, IDeclaredElement declaredElement, XmlNode xmldoc);
}
public class JetBrains.ReSharper.UnitTestFramework.Features.QuickDoc.UnitTestingQuickDocPresenter : object {
    private IShellLocks myShellLocks;
    private IEnumerable`1<IUnitTestQuickDocContributor> myUnitTestQuickDocContributors;
    private NavigationManager myNavigationManager;
    private QuickDocTypeMemberProvider myQuickDocTypeMemberProvider;
    private IUnitTestElement myElement;
    private IMainWindowPopupWindowContext myMainWindowPopupWindowContext;
    private DeclaredElementEnvoy`1<IDeclaredElement> myEnvoy;
    private ITheming myTheming;
    public UnitTestingQuickDocPresenter(IShellLocks shellLocks, ITheming theming, IEnumerable`1<IUnitTestQuickDocContributor> unitTestQuickDocContributors, NavigationManager navigationManager, QuickDocTypeMemberProvider quickDocTypeMemberProvider, IUnitTestElement element, IDeclaredElement declaredElement, IMainWindowPopupWindowContext mainWindowPopupWindowContext);
    public sealed virtual QuickDocTitleAndText GetHtml(PsiLanguageType presentationLanguage);
    public sealed virtual string GetId();
    public sealed virtual IQuickDocPresenter Resolve(string id);
    public sealed virtual void OpenInEditor(string navigationId);
    public sealed virtual void ReadMore(string navigationId);
}
[QuickDocProviderAttribute("-10")]
public class JetBrains.ReSharper.UnitTestFramework.Features.QuickDoc.UnitTestingQuickDocProvider : object {
    private IShellLocks myShellLocks;
    private NavigationManager myNavigationManager;
    private QuickDocTypeMemberProvider myQuickDocTypeMemberProvider;
    private IMainWindowPopupWindowContext myMainWindowPopupWindowContext;
    private IEnumerable`1<IUnitTestQuickDocContributor> myUnitTestQuickDocProviders;
    private ITheming myTheming;
    public UnitTestingQuickDocProvider(Lifetime lifetime, IShellLocks shellLocks, ITheming theming, NavigationManager navigationManager, QuickDocTypeMemberProvider quickDocTypeMemberProvider, IEnumerable`1<IUnitTestQuickDocContributor> unitTestQuickDocContributors, IMainWindowPopupWindowContext mainWindowPopupWindowContext);
    public sealed virtual bool CanNavigate(IDataContext context);
    public sealed virtual void Resolve(IDataContext context, Action`2<IQuickDocPresenter, PsiLanguageType> resolved);
    private static Pair`2<IDeclaredElement, IUnitTestElement> GetDeclaredElementFromExplicitUnitTestElement(IDataContext context);
}
public interface JetBrains.ReSharper.UnitTestFramework.Features.ResultAnalysis.IUnitTestResultAnalyzer {
    [NotNullAttribute]
public abstract virtual IEnumerable`1<UnitTestResultConclusion> GetConclusions(IUnitTestElement element, UnitTestResult result, IUnitTestSession session);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.UnitTestFramework.Features.ResultAnalysis.UnitTestResultAnalyzer : object {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Features.ResultAnalysis.UnitTestResultAnalyzer/<GetConclusions>d__0")]
public sealed virtual IEnumerable`1<UnitTestResultConclusion> GetConclusions(IUnitTestElement element, UnitTestResult result, IUnitTestSession session);
}
public class JetBrains.ReSharper.UnitTestFramework.Features.ResultAnalysis.UnitTestResultConclusion : object {
    [CompilerGeneratedAttribute]
private LoggingLevel <Severity>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    public LoggingLevel Severity { get; }
    [NotNullAttribute]
public string Message { get; }
    private UnitTestResultConclusion(LoggingLevel severity, string message);
    [CompilerGeneratedAttribute]
public LoggingLevel get_Severity();
    [CompilerGeneratedAttribute]
public string get_Message();
    public static UnitTestResultConclusion CreateError(string message);
    public static UnitTestResultConclusion CreateWarning(string message);
    public static UnitTestResultConclusion CreateInfo(string message);
    public sealed virtual int CompareTo(UnitTestResultConclusion other);
}
[ActionAttribute("GenerateUnitTestAction", "JetBrains.ReSharper.UnitTestFramework.Src.Features.TestLinker.Strings", "GenerateUnitTest_Text")]
public class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Actions.GenerateUnitTestAction : GenerateActionBase`1<GenerateUnitTestWorkflowProvider> {
    public virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
}
public class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Actions.GenerateUnitTestWorkflow : object {
    public string Title { get; }
    public IconId Icon { get; }
    public string ActionId { get; }
    public GenerateActionGroup ActionGroup { get; }
    public double Order { get; }
    public sealed virtual string get_Title();
    public sealed virtual IconId get_Icon();
    public sealed virtual string get_ActionId();
    public sealed virtual GenerateActionGroup get_ActionGroup();
    public sealed virtual double get_Order();
    public sealed virtual bool IsAvailable(IDataContext ctx);
    internal static bool CanCreateTestsFor(IClrDeclaredElement element);
    public static IClrDeclaredElement FindTarget(IDataContext ctx);
    public sealed virtual bool IsEnabled(IDataContext ctx);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Actions.GenerateUnitTestWorkflow/<Execute>d__14")]
public sealed virtual void Execute(IDataContext ctx);
}
[GenerateProviderAttribute("16")]
public class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Actions.GenerateUnitTestWorkflowProvider : object {
    public sealed virtual IEnumerable`1<IGenerateActionWorkflow> CreateWorkflow(IDataContext dataContext);
}
public class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.AI.GenerateTestsPromptParameters : object {
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<VirtualFileSystemPath> <AccessedFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <FilesWithContent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceFileClrName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetTestFileName>k__BackingField;
    public IReadOnlyCollection`1<VirtualFileSystemPath> AccessedFiles { get; }
    public List`1<string> FilesWithContent { get; }
    public string SourceFileClrName { get; }
    public string TargetTestFileName { get; }
    public GenerateTestsPromptParameters(IReadOnlyCollection`1<VirtualFileSystemPath> accessedFiles, List`1<string> filesWithContent, string sourceFileClrName, string targetTestFileName);
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<VirtualFileSystemPath> get_AccessedFiles();
    [CompilerGeneratedAttribute]
public List`1<string> get_FilesWithContent();
    [CompilerGeneratedAttribute]
public string get_SourceFileClrName();
    [CompilerGeneratedAttribute]
public string get_TargetTestFileName();
}
public interface JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.AI.ITestGenerationPromptProvider {
    public abstract virtual GenerateTestsPromptParameters GetPromptParameters(ITestGenerationContext ctx);
}
[SolutionComponentAttribute("0")]
internal class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.AuthoredChangesAwaiter : object {
    [NotNullAttribute]
private IProjectModelAwaiter myProjectModelAwaiter;
    [NotNullAttribute]
private IPsiCachesAwaiter myPsiCachesAwaiter;
    [NotNullAttribute]
private ILogger myLogger;
    public AuthoredChangesAwaiter(IProjectModelAwaiter projectModelAwaiter, IPsiCachesAwaiter psiCachesAwaiter, ILogger logger);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.AuthoredChangesAwaiter/<WaitForChangesProcessed>d__4")]
public sealed virtual Task WaitForChangesProcessed(CancellationToken ct);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.AuthoredChangesAwaiter/<WaitForChangesProcessed>d__5")]
public sealed virtual Task WaitForChangesProcessed(IProject project, CancellationToken ct);
}
public class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.CreateUnitTestException : Exception {
    public CreateUnitTestException(string message);
    public CreateUnitTestException(string message, Exception innerException);
    protected CreateUnitTestException(SerializationInfo info, StreamingContext context);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Dialog.CreateUnitTestDialogExtensions : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static string GetName(ICreateUnitTestDialog dialog, Expression`1<Func`2<ICreateUnitTestDialog, TValue>> propertyRef);
}
[SolutionComponentAttribute("0")]
internal class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Dialog.CreateUnitTestDialogFactory : object {
    [NotNullAttribute]
protected ISolution mySolution;
    [NotNullAttribute]
protected IShellLocks myLocks;
    [NotNullAttribute]
protected ISettingsStore mySettingsStore;
    [NotNullAttribute]
protected IQueryProjectSupport myQueryProjectSupport;
    [NotNullAttribute]
protected IUnitTestProviderManager myUnitTestProviderManager;
    [NotNullAttribute]
protected ITestGenerationTemplatesProvider myTemplatesProvider;
    [NotNullAttribute]
protected ITestFrameworkReferenceExtractor myReferenceExtractor;
    [NotNullAttribute]
protected ICommonFileDialogs myCommonFileDialogs;
    [NotNullAttribute]
protected IAssemblyInfoDatabase myAssemblyInfoDatabase;
    [NotNullAttribute]
protected IEnumerable`1<ITestMethodGenerator> myMethodGenerators;
    public CreateUnitTestDialogFactory(ISolution solution, IShellLocks locks, ISettingsStore settingsStore, IQueryProjectSupport queryProjectSupport, IUnitTestProviderManager unitTestProviderManager, ITestGenerationTemplatesProvider templatesProvider, ITestFrameworkReferenceExtractor referenceExtractor, ICommonFileDialogs commonFileDialogs, IAssemblyInfoDatabase assemblyInfoDatabase, IEnumerable`1<ITestMethodGenerator> methodGenerators);
    public virtual ICreateUnitTestDialog Create(Lifetime lifetime, ITestClassGenerationContext ctx);
}
[SettingsKeyAttribute("JetBrains.ReSharper.UnitTestFramework.Settings.UnitTestingSettings", "JetBrains.ReSharper.UnitTestFramework.Src.Features.TestLinker.Strings", "GenerateUnitTest_DialogSettings_Description")]
public class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Dialog.CreateUnitTestDialogSettings : object {
    [SettingsIndexedEntryAttribute("JetBrains.ReSharper.UnitTestFramework.Src.Features.TestLinker.Strings", "GenerateUnitTest_DialogSettings_TestProjectMapping_Description")]
public IIndexedEntry`2<string, string> TestProjectMapping;
    [SettingsIndexedEntryAttribute("JetBrains.ReSharper.UnitTestFramework.Src.Features.TestLinker.Strings", "GenerateUnitTest_DialogSettings_TestTemplateMapping_Description")]
public IIndexedEntry`2<string, Guid> TestTemplateMapping;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.UnitTestFramework.Src.Features.TestLinker.Strings", "GenerateUnitTest_DialogSettings_ShowAdvancedOptions_Description")]
public bool ShowAdvancedOptions;
}
public class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Dialog.CreateUnitTestDialogViewModel : AAutomation {
    [NotNullAttribute]
private ITestClassGenerationContext myCtx;
    [NotNullAttribute]
private ISolution mySolution;
    [NotNullAttribute]
private IQueryProjectSupport myQueryProjectSupport;
    [NotNullAttribute]
private IContextBoundSettingsStore mySettingsStore;
    [NotNullAttribute]
private IUnitTestProviderManager myUnitTestProviderManager;
    [NotNullAttribute]
private ICommonFileDialogs myCommonFileDialogs;
    [NotNullAttribute]
private IAssemblyInfoDatabase myAssemblyInfoDatabase;
    [NotNullAttribute]
private NewProjectValuesProvider myNewProjectData;
    [CompilerGeneratedAttribute]
private IBindableView`1<IProjectDescriptor> <Projects>k__BackingField;
    [CompilerGeneratedAttribute]
private IBindableView`1<ITestFrameworkGroup> <TestFrameworks>k__BackingField;
    [CompilerGeneratedAttribute]
private IBindableView`1<Template> <FileTemplates>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<ITestMethodGenerator> <MethodGenerators>k__BackingField;
    [CompilerGeneratedAttribute]
private IBindable`1<IProjectDescriptor> <Project>k__BackingField;
    [CompilerGeneratedAttribute]
private IBindable`1<string> <CustomProjectName>k__BackingField;
    [CompilerGeneratedAttribute]
private IBindable`1<ITestFrameworkGroup> <TestFramework>k__BackingField;
    [CompilerGeneratedAttribute]
private IBindable`1<bool> <TestFrameworksLoaded>k__BackingField;
    [CompilerGeneratedAttribute]
private IBindable`1<Template> <FileTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private IBindable`1<string> <ClassName>k__BackingField;
    [CompilerGeneratedAttribute]
private IBindable`1<string> <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
private IBindable`1<string> <Destination>k__BackingField;
    [CompilerGeneratedAttribute]
private IBindable`1<bool> <ShowAdvancedOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private IBindable`1<ITestMethodGenerator> <MethodGenerator>k__BackingField;
    [CompilerGeneratedAttribute]
private IBindable`1<INotification> <ProjectNotification>k__BackingField;
    [CompilerGeneratedAttribute]
private IBindable`1<INotification> <TestFrameworkNotification>k__BackingField;
    [CompilerGeneratedAttribute]
private IBindable`1<INotification> <FileTemplateNotification>k__BackingField;
    [NotNullAttribute]
public ObjectValidator`1<CreateUnitTestDialogViewModel> Validator;
    public string Header { get; }
    public string HeaderDescription { get; }
    public IBindableView`1<IProjectDescriptor> Projects { get; }
    public IBindableView`1<ITestFrameworkGroup> TestFrameworks { get; }
    public IBindableView`1<Template> FileTemplates { get; }
    public IReadOnlyCollection`1<ITestMethodGenerator> MethodGenerators { get; }
    [RequiredAttribute]
[MustBeValidProjectNameAttribute]
[DisplayAttribute]
public IBindable`1<IProjectDescriptor> Project { get; public set; }
    public IBindable`1<string> CustomProjectName { get; public set; }
    [RequiredAttribute]
[DisplayAttribute]
public IBindable`1<ITestFrameworkGroup> TestFramework { get; public set; }
    public IBindable`1<bool> TestFrameworksLoaded { get; public set; }
    [RequiredAttribute]
[DisplayAttribute]
public IBindable`1<Template> FileTemplate { get; public set; }
    [RequiredAttribute]
[MustBeValidClassNameAttribute]
[MustNotBeTakenClassNameAttribute]
[DisplayAttribute]
public IBindable`1<string> ClassName { get; public set; }
    [RequiredAttribute]
[MustBeValidNamespaceAttribute]
[DisplayAttribute]
public IBindable`1<string> Namespace { get; public set; }
    [PathMustNotBeEmptyAttribute]
[MustBeValidRelativePathAttribute]
[MustNotExistAttribute]
[DisplayAttribute]
public IBindable`1<string> Destination { get; public set; }
    [DisplayAttribute]
public IBindable`1<bool> ShowAdvancedOptions { get; public set; }
    [RequiredAttribute]
[DisplayAttribute]
public IBindable`1<ITestMethodGenerator> MethodGenerator { get; public set; }
    public IBindable`1<INotification> ProjectNotification { get; public set; }
    public IBindable`1<INotification> TestFrameworkNotification { get; public set; }
    public IBindable`1<INotification> FileTemplateNotification { get; public set; }
    public IBindable`1<bool> IsValid { get; }
    private bool System.ComponentModel.INotifyDataErrorInfo.HasErrors { get; }
    public CreateUnitTestDialogViewModel(Lifetime lifetime, ITestClassGenerationContext ctx, ISolution solution, ISettingsStore settingsStore, IQueryProjectSupport queryProjectSupport, ITestGenerationTemplatesProvider templatesProvider, IUnitTestProviderManager unitTestProviderManager, ITestFrameworkReferenceExtractor frameworkExtractor, ICommonFileDialogs commonFileDialogs, IAssemblyInfoDatabase assemblyInfoDatabase, JetDispatcher dispatcher, IEnumerable`1<ITestMethodGenerator> methodGenerators);
    public sealed virtual string get_Header();
    public sealed virtual string get_HeaderDescription();
    [CompilerGeneratedAttribute]
public sealed virtual IBindableView`1<IProjectDescriptor> get_Projects();
    [CompilerGeneratedAttribute]
public sealed virtual IBindableView`1<ITestFrameworkGroup> get_TestFrameworks();
    [CompilerGeneratedAttribute]
public sealed virtual IBindableView`1<Template> get_FileTemplates();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyCollection`1<ITestMethodGenerator> get_MethodGenerators();
    [CompilerGeneratedAttribute]
public sealed virtual IBindable`1<IProjectDescriptor> get_Project();
    [CompilerGeneratedAttribute]
public void set_Project(IBindable`1<IProjectDescriptor> value);
    [CompilerGeneratedAttribute]
public sealed virtual IBindable`1<string> get_CustomProjectName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CustomProjectName(IBindable`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual IBindable`1<ITestFrameworkGroup> get_TestFramework();
    [CompilerGeneratedAttribute]
public void set_TestFramework(IBindable`1<ITestFrameworkGroup> value);
    [CompilerGeneratedAttribute]
public sealed virtual IBindable`1<bool> get_TestFrameworksLoaded();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TestFrameworksLoaded(IBindable`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual IBindable`1<Template> get_FileTemplate();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FileTemplate(IBindable`1<Template> value);
    [CompilerGeneratedAttribute]
public sealed virtual IBindable`1<string> get_ClassName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ClassName(IBindable`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual IBindable`1<string> get_Namespace();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Namespace(IBindable`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual IBindable`1<string> get_Destination();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Destination(IBindable`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual IBindable`1<bool> get_ShowAdvancedOptions();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ShowAdvancedOptions(IBindable`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual IBindable`1<ITestMethodGenerator> get_MethodGenerator();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MethodGenerator(IBindable`1<ITestMethodGenerator> value);
    [CompilerGeneratedAttribute]
public sealed virtual IBindable`1<INotification> get_ProjectNotification();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ProjectNotification(IBindable`1<INotification> value);
    [CompilerGeneratedAttribute]
public sealed virtual IBindable`1<INotification> get_TestFrameworkNotification();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TestFrameworkNotification(IBindable`1<INotification> value);
    [CompilerGeneratedAttribute]
public sealed virtual IBindable`1<INotification> get_FileTemplateNotification();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FileTemplateNotification(IBindable`1<INotification> value);
    public sealed virtual IBindable`1<bool> get_IsValid();
    private ITestMethodGenerator ChooseMethodGenerator(ITestMethodGenerator generator);
    private IEnumerable`1<IProjectReference> CollectProjects(ISolution solution);
    [CanBeNullAttribute]
private IProjectDescriptor ChooseProject();
    private IBindableView`1<TestFrameworkGroup> GetAllTestFrameworksGrouped(Lifetime lifetime, ITestFrameworkReferenceExtractor extractor, JetDispatcher dispatcher);
    private IBindableView`1<Template> GetAllFileTemplatesFiltered(ITestGenerationTemplatesProvider templatesProvider);
    private INotification ChooseProjectNotification(IProjectDescriptor _);
    private INotification ChooseTestFrameworkNotification(ITestFrameworkGroup group);
    [LocalizableAttribute("False")]
private string ChooseTestClassName();
    private string ChooseDestination(string className);
    [LocalizableAttribute("False")]
private string ChooseNamespace(string _);
    public sealed virtual void OnDestinationFilePickerClicked();
    public sealed virtual ICreateUnitTestDialogResult GetResult();
    private void SaveSelectionInSettings();
    private sealed virtual override void System.ComponentModel.INotifyDataErrorInfo.add_ErrorsChanged(EventHandler`1<DataErrorsChangedEventArgs> value);
    private sealed virtual override void System.ComponentModel.INotifyDataErrorInfo.remove_ErrorsChanged(EventHandler`1<DataErrorsChangedEventArgs> value);
    private sealed virtual override bool System.ComponentModel.INotifyDataErrorInfo.get_HasErrors();
    private sealed virtual override IEnumerable System.ComponentModel.INotifyDataErrorInfo.GetErrors(string propertyName);
    [CompilerGeneratedAttribute]
private IProjectDescriptor <.ctor>b__79_1(string name);
    [CompilerGeneratedAttribute]
[CanBeNullAttribute]
private IProjectDescriptor <ChooseProject>g__TryGetLastSelectedTestProject|82_0(<>c__DisplayClass82_0& );
    [CompilerGeneratedAttribute]
[CanBeNullAttribute]
private IProjectDescriptor <ChooseProject>g__TryGetTestProjectReferencingTargetProject|82_1(<>c__DisplayClass82_0& );
    [CompilerGeneratedAttribute]
[CanBeNullAttribute]
private IProjectDescriptor <ChooseProject>g__TryGetAnyTestProject|82_2(<>c__DisplayClass82_0& );
    [CompilerGeneratedAttribute]
[NotNullAttribute]
private NewProject <ChooseProject>g__SuggestCreateNewProject|82_3(<>c__DisplayClass82_0& );
    [CompilerGeneratedAttribute]
private bool <GetAllFileTemplatesFiltered>g__TemplateMatchesToTestFramework|84_0(Template template);
    [CompilerGeneratedAttribute]
private bool <ChooseTestFrameworkNotification>b__86_0(ITestFrameworkReference f);
    [CompilerGeneratedAttribute]
internal static string <ChooseNamespace>g__GetExistingHeadNamespace|89_2(RelativePath folder, RelativePath& tail, <>c__DisplayClass89_0& );
    [CompilerGeneratedAttribute]
internal static VirtualFileSystemPath <OnDestinationFilePickerClicked>g__FindFirstExistingParent|90_0(VirtualFileSystemPath initial);
}
public interface JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Dialog.ICreateUnitTestDialog {
    [NotNullAttribute]
public string Header { get; }
    [NotNullAttribute]
public string HeaderDescription { get; }
    [NotNullAttribute]
public IBindable`1<string> CustomProjectName { get; public set; }
    [NotNullAttribute]
public IBindableView`1<IProjectDescriptor> Projects { get; }
    [NotNullAttribute]
public IBindableView`1<ITestFrameworkGroup> TestFrameworks { get; }
    [NotNullAttribute]
public IBindable`1<bool> TestFrameworksLoaded { get; public set; }
    [NotNullAttribute]
public IBindableView`1<Template> FileTemplates { get; }
    [NotNullAttribute]
public IReadOnlyCollection`1<ITestMethodGenerator> MethodGenerators { get; }
    [NotNullAttribute]
public IBindable`1<IProjectDescriptor> Project { get; }
    [NotNullAttribute]
public IBindable`1<ITestFrameworkGroup> TestFramework { get; }
    [NotNullAttribute]
public IBindable`1<Template> FileTemplate { get; public set; }
    [NotNullAttribute]
public IBindable`1<string> ClassName { get; public set; }
    [NotNullAttribute]
public IBindable`1<string> Namespace { get; public set; }
    [NotNullAttribute]
public IBindable`1<string> Destination { get; public set; }
    [NotNullAttribute]
public IBindable`1<ITestMethodGenerator> MethodGenerator { get; public set; }
    [NotNullAttribute]
public IBindable`1<INotification> ProjectNotification { get; public set; }
    [NotNullAttribute]
public IBindable`1<INotification> TestFrameworkNotification { get; public set; }
    [NotNullAttribute]
public IBindable`1<INotification> FileTemplateNotification { get; public set; }
    [NotNullAttribute]
public IBindable`1<bool> ShowAdvancedOptions { get; public set; }
    [NotNullAttribute]
public IBindable`1<bool> IsValid { get; }
    public abstract virtual string get_Header();
    public abstract virtual string get_HeaderDescription();
    public abstract virtual IBindable`1<string> get_CustomProjectName();
    public abstract virtual void set_CustomProjectName(IBindable`1<string> value);
    public abstract virtual IBindableView`1<IProjectDescriptor> get_Projects();
    public abstract virtual IBindableView`1<ITestFrameworkGroup> get_TestFrameworks();
    public abstract virtual IBindable`1<bool> get_TestFrameworksLoaded();
    public abstract virtual void set_TestFrameworksLoaded(IBindable`1<bool> value);
    public abstract virtual IBindableView`1<Template> get_FileTemplates();
    public abstract virtual IReadOnlyCollection`1<ITestMethodGenerator> get_MethodGenerators();
    public abstract virtual IBindable`1<IProjectDescriptor> get_Project();
    public abstract virtual IBindable`1<ITestFrameworkGroup> get_TestFramework();
    public abstract virtual IBindable`1<Template> get_FileTemplate();
    public abstract virtual void set_FileTemplate(IBindable`1<Template> value);
    public abstract virtual IBindable`1<string> get_ClassName();
    public abstract virtual void set_ClassName(IBindable`1<string> value);
    public abstract virtual IBindable`1<string> get_Namespace();
    public abstract virtual void set_Namespace(IBindable`1<string> value);
    public abstract virtual IBindable`1<string> get_Destination();
    public abstract virtual void set_Destination(IBindable`1<string> value);
    public abstract virtual IBindable`1<ITestMethodGenerator> get_MethodGenerator();
    public abstract virtual void set_MethodGenerator(IBindable`1<ITestMethodGenerator> value);
    public abstract virtual IBindable`1<INotification> get_ProjectNotification();
    public abstract virtual void set_ProjectNotification(IBindable`1<INotification> value);
    public abstract virtual IBindable`1<INotification> get_TestFrameworkNotification();
    public abstract virtual void set_TestFrameworkNotification(IBindable`1<INotification> value);
    public abstract virtual IBindable`1<INotification> get_FileTemplateNotification();
    public abstract virtual void set_FileTemplateNotification(IBindable`1<INotification> value);
    public abstract virtual IBindable`1<bool> get_ShowAdvancedOptions();
    public abstract virtual void set_ShowAdvancedOptions(IBindable`1<bool> value);
    public abstract virtual IBindable`1<bool> get_IsValid();
    [NotNullAttribute]
public abstract virtual ICreateUnitTestDialogResult GetResult();
    public abstract virtual void OnDestinationFilePickerClicked();
}
public interface JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Dialog.ICreateUnitTestDialogFactory {
    [NotNullAttribute]
public abstract virtual ICreateUnitTestDialog Create(Lifetime lifetime, ITestClassGenerationContext ctx);
}
public interface JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Dialog.ICreateUnitTestDialogResult {
    [NotNullAttribute]
public IProjectDescriptor Project { get; }
    [NotNullAttribute]
public ITestFrameworkReference TestFramework { get; }
    [NotNullAttribute]
public RelativePath Destination { get; }
    [NotNullAttribute]
public string Namespace { get; }
    [NotNullAttribute]
public string ClassName { get; }
    [NotNullAttribute]
public Template FileTemplate { get; }
    [NotNullAttribute]
public ITestMethodGenerator MethodGenerator { get; }
    public abstract virtual IProjectDescriptor get_Project();
    public abstract virtual ITestFrameworkReference get_TestFramework();
    public abstract virtual RelativePath get_Destination();
    public abstract virtual string get_Namespace();
    public abstract virtual string get_ClassName();
    public abstract virtual Template get_FileTemplate();
    public abstract virtual ITestMethodGenerator get_MethodGenerator();
}
public interface JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Dialog.ICreateUnitTestDialogViewFactory {
    [NotNullAttribute]
public abstract virtual BeControl Compose(Lifetime lifetime, ICreateUnitTestDialog dialog);
}
public interface JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Dialog.INotification {
    public BeNotificationType Severity { get; }
    public IconId Icon { get; }
    public RichText Text { get; }
    public abstract virtual BeNotificationType get_Severity();
    public abstract virtual IconId get_Icon();
    public abstract virtual RichText get_Text();
}
public interface JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Dialog.ITestFrameworkGroup {
    [NotNullAttribute]
public string Name { get; }
    [NotNullAttribute]
public IUnitTestProvider Provider { get; }
    [NotNullAttribute]
public IBindableView`1<ITestFrameworkReference> Frameworks { get; }
    [NotNullAttribute]
public IProperty`1<string> Origin { get; }
    public abstract virtual string get_Name();
    public abstract virtual IUnitTestProvider get_Provider();
    public abstract virtual IBindableView`1<ITestFrameworkReference> get_Frameworks();
    public abstract virtual IProperty`1<string> get_Origin();
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Dialog.NoopCreateUnitTestDialogViewFactory : object {
    public virtual BeControl Compose(Lifetime lifetime, ICreateUnitTestDialog dialog);
}
public class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Dialog.TestFrameworkGroup : AAutomation {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IUnitTestProvider <Provider>k__BackingField;
    [CompilerGeneratedAttribute]
private IBindableView`1<ITestFrameworkReference> <Frameworks>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <Origin>k__BackingField;
    [LocalizableAttribute("False")]
public string Name { get; }
    public IUnitTestProvider Provider { get; }
    public IBindableView`1<ITestFrameworkReference> Frameworks { get; }
    public IProperty`1<string> Origin { get; }
    public TestFrameworkGroup(Lifetime lifetime, IUnitTestProvider provider, SemanticVersion version, IBindableView`1<ITestFrameworkReference> frameworks, IBindable`1<IProjectDescriptor> selectedProject);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual IUnitTestProvider get_Provider();
    [CompilerGeneratedAttribute]
public sealed virtual IBindableView`1<ITestFrameworkReference> get_Frameworks();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<string> get_Origin();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Dialog.TestFrameworkGroup/<GetScopePoints>d__13")]
public sealed virtual IEnumerable`1<ITemplateScopePoint> GetScopePoints();
}
public class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Dialog.Validation.MustBeValidProjectNameAttribute : ReSharperValidationAttribute {
    [NotNullAttribute]
private Regex myRegex;
    public bool RequiresValidationContext { get; }
    public virtual bool get_RequiresValidationContext();
    protected virtual bool IsValidCore(object value, ValidationContext ctx);
    private bool IsUniqueProjectName(INewProjectDescriptor newProject, ValidationContext ctx);
    private bool IsLocationOnDiskVacant(INewProjectDescriptor newProject);
}
internal class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Dialog.Validation.MustNotBeTakenClassNameAttribute : ReSharperValidationAttribute {
    [LocalizableAttribute("False")]
protected virtual bool IsValidCore(object value, ValidationContext ctx);
}
internal class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Dialog.Validation.MustNotExistAttribute : PathMustNotExistAttribute {
    protected virtual VirtualFileSystemPath GetRoot(ValidationContext ctx);
}
[SolutionComponentAttribute("0")]
internal class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.EmptyTestMethodGenerator : object {
    [NotNullAttribute]
private Lifetime myLifetime;
    [NotNullAttribute]
private IShellLocks myLocks;
    [NotNullAttribute]
private ISolution mySolution;
    [NotNullAttribute]
private IPsiServices myPsiServices;
    [NotNullAttribute]
private IEditorManager myEditorManager;
    [NotNullAttribute]
private ILanguageManager myLanguageManager;
    [NotNullAttribute]
private ITestGenerationTemplatesProvider myTemplatesProvider;
    public string CheckboxLabel { get; }
    public string ComboboxItemLabel { get; }
    public EmptyTestMethodGenerator(Lifetime lifetime, IShellLocks locks, ISolution solution, IPsiServices psiServices, IEditorManager editorManager, ILanguageManager languageManager, ITestGenerationTemplatesProvider templatesProvider);
    public sealed virtual string get_CheckboxLabel();
    public sealed virtual string get_ComboboxItemLabel();
    public sealed virtual bool IsAvailable();
    [AsyncStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.EmptyTestMethodGenerator/<Generate>d__13")]
public sealed virtual Task Generate(ITestGenerationContext ctx);
    private Template ChooseTestTemplate(IUnitTestProvider provider, PsiLanguageType language);
    private Task`1<DocumentOffset> GetDocumentOffset(IPsiSourceFile sourceFile, ITypeElement testClass);
    private ITypeDeclaration GetTypeDeclaration(IPsiTestNavigator navigator, IPsiSourceFile sourceFile, ITypeElement typeElement);
}
public abstract class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.FileContentReplacingTestMethodGenerator : object {
    [NotNullAttribute]
protected Lifetime myLifetime;
    [NotNullAttribute]
protected IShellLocks myLocks;
    [NotNullAttribute]
protected IPsiServices myPsiServices;
    [CompilerGeneratedAttribute]
private string <CheckboxLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ComboboxItemLabel>k__BackingField;
    public string CheckboxLabel { get; }
    public string ComboboxItemLabel { get; }
    protected FileContentReplacingTestMethodGenerator(string checkboxLabel, string comboboxItemLabel, Lifetime lifetime, IShellLocks locks, IPsiServices psiServices);
    [CompilerGeneratedAttribute]
public sealed virtual string get_CheckboxLabel();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ComboboxItemLabel();
    public abstract virtual bool IsAvailable();
    [AsyncStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.FileContentReplacingTestMethodGenerator/<Generate>d__11")]
public sealed virtual Task Generate(ITestGenerationContext ctx);
    protected abstract virtual Task`1<string> GetNewFileContent(ITestGenerationContext ctx);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.FileContentReplacingTestMethodGenerator/<UpdateTextInDocument>d__13")]
private Task UpdateTextInDocument(ITestGenerationContext ctx, string text);
    [CompilerGeneratedAttribute]
internal static string <UpdateTextInDocument>g__ExtractCodeBlock|13_2(string text);
}
public class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Hacks.BeContentPresenter : BeControl {
    [CompilerGeneratedAttribute]
private object <DataContext>k__BackingField;
    public object DataContext { get; public set; }
    public BeContentPresenter(object dataContext);
    [CompilerGeneratedAttribute]
public object get_DataContext();
    [CompilerGeneratedAttribute]
public void set_DataContext(object value);
}
public interface JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.IAuthoredChangesAwaiter {
    [NotNullAttribute]
public abstract virtual Task WaitForChangesProcessed(CancellationToken ct);
    [NotNullAttribute]
public abstract virtual Task WaitForChangesProcessed(IProject project, CancellationToken ct);
}
public interface JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.IImportInjector {
    public abstract virtual bool TryAddImport(IFile file, INamespace ns, IPsiModule sourceModule, IClrDeclaredElement target);
}
public interface JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.IInternalsVisibleToInstaller {
    [NotNullAttribute]
public abstract virtual Task AddInternalsVisibleToIfRequired(ITestClassGenerationContext ctx, IProjectReference testProject);
}
public interface JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.IInternalVisibleToAttributeFactory {
    [NotNullAttribute]
public abstract virtual ITreeNode Create(IPsiModule module, AssemblyNameInfo assemblyNameInfo);
}
public interface JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.INewProjectDescriptor {
    [NotNullAttribute]
public TargetFrameworkId TargetFrameworkId { get; }
    [CanBeNullAttribute]
public IProjectFolder ParentFolder { get; }
    public abstract virtual TargetFrameworkId get_TargetFrameworkId();
    public abstract virtual IProjectFolder get_ParentFolder();
}
[ShellComponentAttribute("0")]
internal class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.InteractiveAmbiguityResolver : object {
    [NotNullAttribute]
private JetPopupMenus myMenus;
    public InteractiveAmbiguityResolver(JetPopupMenus jetPopupMenus);
    public sealed virtual Task`1<ITypeElement> ChooseFromCandidates(IReadOnlyCollection`1<ITypeElement> candidates, IDataContext context);
    private void DescribeItem(DescribeItemEventArgs e);
    private static ITypeElement ExtractTypeElement(object o);
}
[SolutionComponentAttribute("0")]
internal class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.InternalsVisibleToInstaller : object {
    [NotNullAttribute]
private Lifetime myLifetime;
    [NotNullAttribute]
private IShellLocks myLocks;
    [NotNullAttribute]
private IPsiServices myPsiServices;
    [NotNullAttribute]
private IEditorManager myEditorManager;
    public InternalsVisibleToInstaller(Lifetime lifetime, IShellLocks locks, IPsiServices psiServices, IEditorManager editorManager);
    public sealed virtual Task AddInternalsVisibleToIfRequired(ITestClassGenerationContext ctx, IProjectReference testProjectRef);
    private bool TargetClassIsVisible(ITestClassGenerationContext ctx);
    private bool InternalsVisibleTo(ITestClassGenerationContext ctx, IProject testProject);
    private ITreeNode TryFindAssemblyLevelAttribute(ITestClassGenerationContext ctx);
    [LocalizableAttribute("False")]
private IProjectFile GetOrCreateProjectFile(ITestClassGenerationContext ctx, ITreeNode anchorAttr);
    [CanBeNullAttribute]
private ITreeNode FindAnchor(ITreeNode attributeNode);
}
public interface JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.IProjectDescriptor {
    [NotNullAttribute]
public string Id { get; }
    [NotNullAttribute]
public string Name { get; }
    [NotNullAttribute]
public PsiLanguageType Language { get; }
    [NotNullAttribute]
public VirtualFileSystemPath Location { get; }
    [NotNullAttribute]
public IEnumerable`1<TargetFrameworkId> TargetFrameworkIds { get; }
    [NotNullAttribute]
public string DefaultNamespace { get; }
    public abstract virtual string get_Id();
    public abstract virtual string get_Name();
    public abstract virtual PsiLanguageType get_Language();
    public abstract virtual VirtualFileSystemPath get_Location();
    public abstract virtual IEnumerable`1<TargetFrameworkId> get_TargetFrameworkIds();
    public abstract virtual string get_DefaultNamespace();
}
public interface JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.IProjectReference {
    [NotNullAttribute]
public ProjectModelElementEnvoy Envoy { get; }
    public abstract virtual ProjectModelElementEnvoy get_Envoy();
}
public interface JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.IPsiCachesAwaiter {
    [NotNullAttribute]
public abstract virtual Task WaitForCaches(CancellationToken ct);
}
internal interface JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.IPsiTestNavigator {
    [CanBeNullAttribute]
public abstract virtual INamespaceDeclaration FindNamespaceDeclaration(ITreeNode root, string nsName);
    [CanBeNullAttribute]
public abstract virtual ITypeDeclaration FindTypeDeclaration(INamespaceDeclaration root, string typeName);
    [NotNullAttribute]
public abstract virtual ITreeNode FindAnchorForNewTest(ITypeDeclaration root);
}
public interface JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.IQueryLanguageSupport {
    public abstract virtual bool CanHostTestsInProject(IProject project);
}
public interface JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.IQueryProjectSupport {
    public abstract virtual bool CanHostTestsInProject(IProject project, PsiLanguageType componentLanguage);
}
public interface JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.ITestClassAmbiguityResolver {
    [NotNullAttribute]
public abstract virtual Task`1<ITypeElement> ChooseFromCandidates(IReadOnlyCollection`1<ITypeElement> candidates, IDataContext context);
}
public interface JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.ITestClassGenerationContext {
    [NotNullAttribute]
public ILogger Logger { get; }
    [NotNullAttribute]
public ITypeElement TargetClass { get; }
    [CanBeNullAttribute]
public IMethod TargetMethod { get; }
    [CanBeNullAttribute]
public ITestMethodGenerator Generator { get; }
    public abstract virtual ILogger get_Logger();
    public abstract virtual ITypeElement get_TargetClass();
    public abstract virtual IMethod get_TargetMethod();
    public abstract virtual ITestMethodGenerator get_Generator();
    public abstract virtual void DumpProjectModel(string step);
}
public interface JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.ITestClassGenerator {
    [NotNullAttribute]
public abstract virtual Task`1<ITestClassResolutionResult> Generate(ITestClassGenerationContext ctx);
}
public interface JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.ITestClassResolutionResult {
    [NotNullAttribute]
public IUnitTestProvider Provider { get; }
    [NotNullAttribute]
public ITypeElement TypeElement { get; }
    [NotNullAttribute]
public ITestMethodGenerator MethodGenerator { get; }
    public abstract virtual IUnitTestProvider get_Provider();
    public abstract virtual ITypeElement get_TypeElement();
    public abstract virtual ITestMethodGenerator get_MethodGenerator();
}
public interface JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.ITestClassResolver {
    [NotNullAttribute]
public abstract virtual Task`1<ITestClassResolutionResult> GetOrCreateTestClass(ITestClassGenerationContext context);
}
public interface JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.ITestGenerationContext {
    [NotNullAttribute]
public ITypeElement TestClass { get; }
    [NotNullAttribute]
public IUnitTestProvider Provider { get; }
    public abstract virtual ITypeElement get_TestClass();
    public abstract virtual IUnitTestProvider get_Provider();
    [NotNullAttribute]
public abstract virtual Task WaitForChangesProcessed(CancellationToken ct);
}
public interface JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.ITestGenerator {
    [NotNullAttribute]
public abstract virtual Task Generate(IDataContext ctx, IClrDeclaredElement target);
}
public interface JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.ITestMethodGenerator {
    [NotNullAttribute]
public string CheckboxLabel { get; }
    [NotNullAttribute]
public string ComboboxItemLabel { get; }
    public abstract virtual string get_CheckboxLabel();
    public abstract virtual string get_ComboboxItemLabel();
    public abstract virtual bool IsAvailable();
    [NotNullAttribute]
public abstract virtual Task Generate(ITestGenerationContext ctx);
}
public interface JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.ITestProjectActivator {
    [NotNullAttribute]
[ItemNotNullAttribute]
public abstract virtual Task`1<IProjectReference> Create(ITestClassGenerationContext ctx, VirtualFileSystemPath projectFile, IProjectFolder parentFolder, CancellationToken ct);
}
public interface JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.ITestProjectFactory {
    [NotNullAttribute]
public abstract virtual Task`1<IProjectReference> Create(ITestClassGenerationContext ctx, INewProjectDescriptor projectInfo, CancellationToken ct);
}
public interface JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.ITestProjectFileFactory {
    [NotNullAttribute]
[ItemNotNullAttribute]
public abstract virtual Task`1<VirtualFileSystemPath> CreateProjectFile(ITestClassGenerationContext ctx, INewProjectDescriptor descriptor, CancellationToken ct);
}
public interface JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.ITestSubjectInjector {
    [NotNullAttribute]
public abstract virtual Task TryInjectTestSubject(ITestGenerationContext ctx, IProgressIndicator pi);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Navigation.CreateUnitTestAltEnterHandler : object {
    [CanBeNullAttribute]
private Action myHandler;
    public double Priority { get; }
    public sealed virtual double get_Priority();
    public void RegisterHandler(Lifetime lifetime, Action handler);
    public sealed virtual bool IsAvailable(IDataContext context);
    public sealed virtual bool HandleAction(IDataContext context);
}
[ContextNavigationProviderAttribute("0")]
internal class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Navigation.LinkedTypesNavigationAndCreationProvider : LinkedTypesNavigationProvider {
    [NotNullAttribute]
private Lifetime myLifetime;
    [NotNullAttribute]
private IShellLocks myLocks;
    [NotNullAttribute]
private IActionManager myActionManager;
    [NotNullAttribute]
private ITooltipManager myTooltipManager;
    [NotNullAttribute]
private CreateUnitTestAltEnterHandler myAltEnterHandler;
    public LinkedTypesNavigationAndCreationProvider(Lifetime lifetime, IShellLocks locks, IFeaturePartsContainer manager, IActionManager actionManager, ITooltipManager tooltipManager, CreateUnitTestAltEnterHandler altEnterHandler);
    public virtual string GetNotFoundMessage(SearchRequest request);
    private bool ShouldAddAltEnterShortcut(SearchRequest request);
    protected virtual void ProcessMessage(IDataContext context, SearchRequest request, INavigationExecutionHost host, string message);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Navigation.LinkedTypesNavigationAndCreationProvider/<OnEnterPressed>d__9")]
private void OnEnterPressed(LifetimeDefinition ltd, IDataContext ctx, SearchRequest searchRequest);
    private Task`1<IClrDeclaredElement> TryAcquireTarget(IDataContext ctx, SearchRequest request);
}
[SolutionComponentAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.NoopTestProjectActivator : object {
    public virtual Task`1<IProjectReference> Create(ITestClassGenerationContext ctx, VirtualFileSystemPath projectFile, IProjectFolder parentFolder, CancellationToken ct);
}
[OptionsPageAttribute("TestGenerationOptionsPage", "Test Generation", "JetBrains.Application.UI.Icons.Special.ThemedIcons.SpecialThemedIcons/Placeholder")]
public class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Options.TestGenerationOptionsPage : BeSimpleOptionsPage {
    public TestGenerationOptionsPage(Lifetime lifetime, OptionsPageContext pageContext, OptionsSettingsSmartContext smartContext, ISolution solution);
    private string GetPresentation(T value);
}
[LocalizableAttribute("False")]
public class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.ProjectReference : AAutomation {
    private IEnumerable`1<ITemplateScopePoint> myScopePoints;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private PsiLanguageType <Language>k__BackingField;
    [CompilerGeneratedAttribute]
private VirtualFileSystemPath <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<TargetFrameworkId> <TargetFrameworkIds>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private ProjectModelElementEnvoy <Envoy>k__BackingField;
    public string Id { get; }
    public string Name { get; }
    public PsiLanguageType Language { get; }
    public VirtualFileSystemPath Location { get; }
    public IEnumerable`1<TargetFrameworkId> TargetFrameworkIds { get; }
    public string DefaultNamespace { get; }
    public ProjectModelElementEnvoy Envoy { get; }
    public ProjectReference(IProject project);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Id();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual PsiLanguageType get_Language();
    [CompilerGeneratedAttribute]
public sealed virtual VirtualFileSystemPath get_Location();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<TargetFrameworkId> get_TargetFrameworkIds();
    [CompilerGeneratedAttribute]
public sealed virtual string get_DefaultNamespace();
    [CompilerGeneratedAttribute]
public sealed virtual ProjectModelElementEnvoy get_Envoy();
    private IEnumerable`1<ITemplateScopePoint> InitScopePoints(IProject project);
    public sealed virtual IEnumerable`1<ITemplateScopePoint> GetScopePoints();
    private static PsiLanguageType GetPsiLanguage(IProject project);
    public virtual string ToString();
    public virtual int GetHashCode();
    private bool Equals(ProjectReference other);
    public virtual bool Equals(object obj);
    public static bool op_Equality(ProjectReference x, IProjectDescriptor y);
    public static bool op_Inequality(ProjectReference x, IProjectDescriptor y);
}
[SolutionComponentAttribute("0")]
internal class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.PsiCachesAwaiter : object {
    [NotNullAttribute]
private Lifetime myLifetime;
    [NotNullAttribute]
private IPsiServices myPsiServices;
    public PsiCachesAwaiter(Lifetime lifetime, IPsiServices psiServices);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.PsiCachesAwaiter/<WaitForCaches>d__3")]
public sealed virtual Task WaitForCaches(CancellationToken ct);
}
[SolutionComponentAttribute("0")]
internal class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.QueryProjectSupport : object {
    [NotNullAttribute]
private ILanguages myLanguages;
    [NotNullAttribute]
private ILanguageManager myLanguageManager;
    [NotNullAttribute]
private ITestGenerationTemplatesProvider myTemplatesProvider;
    public QueryProjectSupport(ILanguages languages, ILanguageManager languageManager, ITestGenerationTemplatesProvider templatesProvider);
    public sealed virtual bool CanHostTestsInProject(IProject project, PsiLanguageType componentLanguage);
}
public abstract class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.References.AbstractReferenceExtractor : object {
    [NotNullAttribute]
private NuGetPackageReferenceTracker myNuGetPackageReferenceTracker;
    protected AbstractReferenceExtractor(NuGetPackageReferenceTracker nuGetPackageReferenceTracker);
    [NotNullAttribute]
protected IEnumerable`1<IAbstractReference> ExtractReferencesFromProject(IProject project, IReferenceDescriptor descriptor, TargetFrameworkId tf);
    [CompilerGeneratedAttribute]
internal static Func`2<IProjectToAssemblyReference, bool> <ExtractReferencesFromProject>g__AssemblyMatches|2_0(AssemblyReferenceDescriptor descriptor);
    [CompilerGeneratedAttribute]
internal static Func`2<PackageReference, bool> <ExtractReferencesFromProject>g__PackageIs|2_1(NuGetPackageDependencyInfo package);
}
public class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.References.AggregateDescriptor : object {
    [CompilerGeneratedAttribute]
private IReferenceDescriptor <Main>k__BackingField;
    [CompilerGeneratedAttribute]
private IReferenceDescriptor[] <Additional>k__BackingField;
    [NotNullAttribute]
public IReferenceDescriptor Main { get; }
    [NotNullAttribute]
public IReferenceDescriptor[] Additional { get; }
    public AggregateDescriptor(IReferenceDescriptor main, IReferenceDescriptor[] additional);
    public AggregateDescriptor(NuGetPackageDependencyInfo mainPackage, NuGetPackageDependencyInfo[] additionalPackages);
    [CompilerGeneratedAttribute]
public IReferenceDescriptor get_Main();
    [CompilerGeneratedAttribute]
public IReferenceDescriptor[] get_Additional();
}
public class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.References.AggregateReference : object {
    [CompilerGeneratedAttribute]
private IAbstractReference <Main>k__BackingField;
    [CompilerGeneratedAttribute]
private IAbstractReference[] <Additional>k__BackingField;
    [NotNullAttribute]
public IAbstractReference Main { get; }
    [CanBeNullAttribute]
public IAbstractReference[] Additional { get; }
    [LocalizableAttribute("False")]
public string Name { get; }
    public SemanticVersion Version { get; }
    public IReadOnlyCollection`1<IAbstractReference> References { get; }
    public int Count { get; }
    public AggregateReference(IAbstractReference main, IAbstractReference[] additional);
    [CompilerGeneratedAttribute]
public IAbstractReference get_Main();
    [CompilerGeneratedAttribute]
public IAbstractReference[] get_Additional();
    public sealed virtual string get_Name();
    public sealed virtual SemanticVersion get_Version();
    public IReadOnlyCollection`1<IAbstractReference> get_References();
    public sealed virtual int get_Count();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.References.AggregateReference/<GetEnumerator>d__15")]
public sealed virtual IEnumerator`1<IAbstractReference> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.References.AssemblyReference : object {
    [CompilerGeneratedAttribute]
private AssemblyReferenceTarget <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private SemanticVersion <Version>k__BackingField;
    [NotNullAttribute]
public AssemblyReferenceTarget Target { get; }
    public string Name { get; }
    public SemanticVersion Version { get; }
    public AssemblyReference(AssemblyReferenceTarget target);
    [CompilerGeneratedAttribute]
public AssemblyReferenceTarget get_Target();
    public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual SemanticVersion get_Version();
}
public class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.References.AssemblyReferenceDescriptor : object {
    [CompilerGeneratedAttribute]
private string <AssemblyName>k__BackingField;
    [CompilerGeneratedAttribute]
private VersionRange <VersionRange>k__BackingField;
    [CompilerGeneratedAttribute]
private PublicKeyToken <PublicKeyToken>k__BackingField;
    [NotNullAttribute]
public string AssemblyName { get; }
    [NotNullAttribute]
public VersionRange VersionRange { get; }
    [NotNullAttribute]
public PublicKeyToken PublicKeyToken { get; }
    public AssemblyReferenceDescriptor(string assemblyName, VersionRange versionRange, PublicKeyToken publicKeyToken);
    [CompilerGeneratedAttribute]
public string get_AssemblyName();
    [CompilerGeneratedAttribute]
public VersionRange get_VersionRange();
    [CompilerGeneratedAttribute]
public PublicKeyToken get_PublicKeyToken();
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.References.FakeItEasyReferenceDescriptor : AssemblyReferenceDescriptor {
    public string Name { get; }
    public sealed virtual string get_Name();
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.References.FluentAssertionsReferenceDescriptor : AssemblyReferenceDescriptor {
    public string Name { get; }
    public sealed virtual string get_Name();
}
public interface JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.References.IAbstractReference {
    [NotNullAttribute]
public string Name { get; }
    [NotNullAttribute]
public SemanticVersion Version { get; }
    public abstract virtual string get_Name();
    public abstract virtual SemanticVersion get_Version();
}
public interface JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.References.IAssertionLibraryReferenceDescriptor {
}
public interface JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.References.IDescribeTestReferenceFor`1 {
}
public interface JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.References.ILibraryReferenceDescriptor {
    [NotNullAttribute]
[LocalizableAttribute("False")]
public string Name { get; }
    public abstract virtual string get_Name();
}
public interface JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.References.IMockingLibraryReferenceDescriptor {
}
public interface JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.References.IReferenceDescriptor {
}
public interface JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.References.IReferencedLibrariesExtractor {
    [NotNullAttribute]
public abstract virtual Task`1<IEnumerable`1<IAbstractReference>> GetMockingLibraries(IProject project, TargetFrameworkId targetFrameworkId);
    [NotNullAttribute]
public abstract virtual Task`1<IEnumerable`1<IAbstractReference>> GetAssertionLibraries(IProject project, TargetFrameworkId targetFrameworkId);
}
public interface JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.References.ITestFrameworkReference {
    [NotNullAttribute]
public IUnitTestProvider Provider { get; }
    [NotNullAttribute]
public IAbstractReference Reference { get; }
    [CanBeNullAttribute]
public IProjectReference SourceProject { get; }
    public abstract virtual IUnitTestProvider get_Provider();
    public abstract virtual IAbstractReference get_Reference();
    public abstract virtual IProjectReference get_SourceProject();
}
public interface JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.References.ITestFrameworkReferenceDescriptor {
}
public interface JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.References.ITestFrameworkReferenceExtractor {
    [NotNullAttribute]
public abstract virtual Task`1<IEnumerable`1<ITestFrameworkReference>> DetectInstalled(IEnumerable`1<IProjectDescriptor> projectDescriptor, TargetFrameworkId targetFrameworkId);
    [NotNullAttribute]
public abstract virtual Task`1<IEnumerable`1<ITestFrameworkReference>> GetLatestVersions(TargetFrameworkId targetFrameworkId);
}
public interface JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.References.ITestFrameworkReferenceInstaller {
    [NotNullAttribute]
public abstract virtual Task Install(IProjectReference project, ITestFrameworkReference reference, IProgressIndicator progressIndicator);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.References.JustMockReferenceDescriptor : AssemblyReferenceDescriptor {
    public string Name { get; }
    public sealed virtual string get_Name();
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.References.MoqReferenceDescriptor : AssemblyReferenceDescriptor {
    public string Name { get; }
    public sealed virtual string get_Name();
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.References.MsFakesReferenceDescriptor : AssemblyReferenceDescriptor {
    public string Name { get; }
    public sealed virtual string get_Name();
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.References.NSubstituteReferenceDescriptor : AssemblyReferenceDescriptor {
    public string Name { get; }
    public sealed virtual string get_Name();
}
public class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.References.NugetPackageReference : object {
    [CompilerGeneratedAttribute]
private PackageReference <Target>k__BackingField;
    [NotNullAttribute]
public PackageReference Target { get; }
    public string Name { get; }
    public SemanticVersion Version { get; }
    public NugetPackageReference(PackageReference packageReference);
    [CompilerGeneratedAttribute]
public PackageReference get_Target();
    public sealed virtual string get_Name();
    public sealed virtual SemanticVersion get_Version();
}
public class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.References.NugetPackageReferenceDescriptor : object {
    [CompilerGeneratedAttribute]
private NuGetPackageDependencyInfo <Package>k__BackingField;
    [NotNullAttribute]
public NuGetPackageDependencyInfo Package { get; }
    public NugetPackageReferenceDescriptor(NuGetPackageDependencyInfo packageInfo);
    [CompilerGeneratedAttribute]
public NuGetPackageDependencyInfo get_Package();
}
[SolutionComponentAttribute("0")]
internal class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.References.ReferencedLibrariesExtractor : AbstractReferenceExtractor {
    [NotNullAttribute]
private IEnumerable`1<IMockingLibraryReferenceDescriptor> myMockingLibraryReferenceDescriptors;
    [NotNullAttribute]
private IEnumerable`1<IAssertionLibraryReferenceDescriptor> myAssertionLibraryReferenceDescriptors;
    public ReferencedLibrariesExtractor(NuGetPackageReferenceTracker nuGetPackageReferenceTracker, IEnumerable`1<IMockingLibraryReferenceDescriptor> mockingLibraryReferenceDescriptors, IEnumerable`1<IAssertionLibraryReferenceDescriptor> assertionLibraryReferenceDescriptors);
    public sealed virtual Task`1<IEnumerable`1<IAbstractReference>> GetMockingLibraries(IProject project, TargetFrameworkId targetFrameworkId);
    public sealed virtual Task`1<IEnumerable`1<IAbstractReference>> GetAssertionLibraries(IProject project, TargetFrameworkId targetFrameworkId);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.References.RhinoMocksReferenceDescriptor : AssemblyReferenceDescriptor {
    public string Name { get; }
    public sealed virtual string get_Name();
}
public class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.References.TestFrameworkReference : AAutomation {
    [CompilerGeneratedAttribute]
private IUnitTestProvider <Provider>k__BackingField;
    [CompilerGeneratedAttribute]
private IAbstractReference <Reference>k__BackingField;
    [CompilerGeneratedAttribute]
private IProjectReference <SourceProject>k__BackingField;
    public IUnitTestProvider Provider { get; }
    public IAbstractReference Reference { get; }
    public IProjectReference SourceProject { get; }
    public TestFrameworkReference(IUnitTestProvider provider, IAbstractReference reference, IProjectReference sourceProject);
    [CompilerGeneratedAttribute]
public sealed virtual IUnitTestProvider get_Provider();
    [CompilerGeneratedAttribute]
public sealed virtual IAbstractReference get_Reference();
    [CompilerGeneratedAttribute]
public sealed virtual IProjectReference get_SourceProject();
    [LocalizableAttribute("False")]
public virtual string ToString();
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.References.TestFrameworkReferenceExtractor : AbstractReferenceExtractor {
    [NotNullAttribute]
private ILogger myLogger;
    [NotNullAttribute]
private IUnitTestProviderManager myUnitTestProviderManager;
    [NotNullAttribute]
private INuGetCompletionProvider myNuGetCompletionProvider;
    [NotNullAttribute]
private IEnumerable`1<IGrouping`2<IUnitTestProvider, ITestFrameworkReferenceDescriptor>> myDescriptors;
    public TestFrameworkReferenceExtractor(ILogger logger, IUnitTestProviderManager unitTestProviderManager, NuGetPackageReferenceTracker nuGetPackageReferenceTracker, NuGetNativeCompletionProvider nuGetCompletionProvider, IEnumerable`1<ITestFrameworkReferenceDescriptor> descriptors);
    private IEnumerable`1<IGrouping`2<IUnitTestProvider, ITestFrameworkReferenceDescriptor>> InstantiateProviders(IEnumerable`1<ITestFrameworkReferenceDescriptor> descriptors);
    public sealed virtual Task`1<IEnumerable`1<ITestFrameworkReference>> DetectInstalled(IEnumerable`1<IProjectDescriptor> projectDescriptor, TargetFrameworkId tf);
    private IEnumerable`1<ITestFrameworkReference> GetReferencedFrameworks(IProjectDescriptor projectDescriptor, TargetFrameworkId tf);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.References.TestFrameworkReferenceExtractor/<GetLatestVersions>d__8")]
public sealed virtual Task`1<IEnumerable`1<ITestFrameworkReference>> GetLatestVersions(TargetFrameworkId tf);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.References.TestFrameworkReferenceExtractor/<TryGetLatestVersion>d__9")]
private Task`1<ITestFrameworkReference> TryGetLatestVersion(IUnitTestProvider provider, IReferenceDescriptor descriptor, TargetFrameworkId tf);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.References.TestFrameworkReferenceExtractor/<TryLoadLatestVersion>d__10")]
private Task`1<IAbstractReference> TryLoadLatestVersion(IReferenceDescriptor descriptor, TargetFrameworkId tf);
    [CompilerGeneratedAttribute]
private IUnitTestProvider <InstantiateProviders>g__GetProvider|5_0(ITestFrameworkReferenceDescriptor descriptor);
}
[SolutionComponentAttribute("0")]
internal class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.References.TestFrameworkReferenceInstaller : object {
    [NotNullAttribute]
private IShellLocks myLocks;
    [NotNullAttribute]
private ISolution mySolution;
    [NotNullAttribute]
private IUnitTestArtifactExplorationCache myExplorationCache;
    [NotNullAttribute]
private IAuthoredChangesAwaiter myAuthoredChangesAwaiter;
    [NotNullAttribute]
private NuGetNativePackageManager myPackageManager;
    public TestFrameworkReferenceInstaller(IShellLocks locks, ISolution solution, IUnitTestArtifactExplorationCache explorationCache, IAuthoredChangesAwaiter authoredChangesAwaiter, NuGetNativePackageManager packageManager);
    public sealed virtual Task Install(IProjectReference projectReference, ITestFrameworkReference frameworkReference, IProgressIndicator progressIndicator);
    private IList`1<IAbstractReference> Flatten(IAbstractReference reference, IList`1<IAbstractReference> result);
    private Task InstallReference(IProject project, IAbstractReference reference, IProgressIndicator pi);
    private Task InstallAssemblyReference(IProject project, AssemblyReference assemblyRef, IProgressIndicator pi);
    private Task InstallNugetPackageReference(IProject project, NugetPackageReference nugetPackageRef);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.References.TypeMockReferenceDescriptor : AssemblyReferenceDescriptor {
    public string Name { get; }
    public sealed virtual string get_Name();
}
public class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.ResolutionResult : ValueType {
    [CompilerGeneratedAttribute]
private IUnitTestProvider <Provider>k__BackingField;
    [CompilerGeneratedAttribute]
private ITypeElement <TypeElement>k__BackingField;
    [CompilerGeneratedAttribute]
private ITestMethodGenerator <MethodGenerator>k__BackingField;
    public IUnitTestProvider Provider { get; public set; }
    public ITypeElement TypeElement { get; public set; }
    public ITestMethodGenerator MethodGenerator { get; public set; }
    public ResolutionResult(IUnitTestProvider provider, ITypeElement typeElement, ITestMethodGenerator methodGenerator);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual IUnitTestProvider get_Provider();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Provider(IUnitTestProvider value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual ITypeElement get_TypeElement();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_TypeElement(ITypeElement value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual ITestMethodGenerator get_MethodGenerator();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_MethodGenerator(ITestMethodGenerator value);
}
internal abstract class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.SdkTestProjectFileFactory : TestProjectFileFactoryBase {
    protected SdkTestProjectFileFactory(string projectFileExtension);
    protected virtual string GetText(INewProjectDescriptor descriptor);
    [LocalizableAttribute("False")]
private string TargetFrameworks(INewProjectDescriptor descriptor);
    [LocalizableAttribute("False")]
private string Namespace(INewProjectDescriptor descriptor);
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.SubjectInjection.DefaultTestSubjectInjector : TestSubjectInjectorBase {
    [NotNullAttribute]
private Lifetime myLifetime;
    [NotNullAttribute]
private IShellLocks myLocks;
    [NotNullAttribute]
private ISolution mySolution;
    [NotNullAttribute]
private IPsiServices myPsiServices;
    [NotNullAttribute]
private ISettingsStore mySettingsStore;
    [NotNullAttribute]
private JetBrainsAnnotationsTestSubjectInjector myJetBrainsAnnotationsTestSubjectInjector;
    [NotNullAttribute]
private Lazy`1<IProperty`1<string>> myTestSubjectAttrName;
    public DefaultTestSubjectInjector(Lifetime lifetime, IShellLocks locks, ISolution solution, IPsiServices psiServices, ILanguageManager languageManager, ISettingsStore settingsStore, JetBrainsAnnotationsTestSubjectInjector jetBrainsAnnotationsTestSubjectInjector);
    private IProperty`1<string> InitializeAttrNameProperty();
    public sealed virtual Task TryInjectTestSubject(ITestGenerationContext ctx, IProgressIndicator pi);
    private Task AddJetBrainsTestSubject(ITestGenerationContext ctx, IProgressIndicator pi);
    private Task AddCustomTestSubject(ITestGenerationContext ctx, IProgressIndicator pi);
    private Task AddReferenceToLibraryDefiningAttribute(Lifetime lifetime, ITypeElement attrTypeElement, ITestGenerationContext ctx, IProgressIndicator pi);
    private ITypeElement GetSubjectAttribute(string attrName);
}
public interface JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.SubjectInjection.ICustomTestSubjectInjector {
    [NotNullAttribute]
public abstract virtual Task TryInjectTestSubject(ITestGenerationContext ctx, IProgressIndicator pi);
}
public interface JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.SubjectInjection.ITestSubjectInjector`1 {
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.SubjectInjection.JetBrainsAnnotationsTestSubjectInjector : TestSubjectInjectorBase {
    [NotNullAttribute]
private IShellLocks myLocks;
    [NotNullAttribute]
private IDialogHost myDialogHost;
    [NotNullAttribute]
private NuGetPackageReferenceTracker myPackageReferenceTracker;
    [NotNullAttribute]
private NuGetNativePackageManager myPackageManager;
    [NotNullAttribute]
private PackageIdentity myAnnotationsPackage;
    [NotNullAttribute]
private ClrTypeName myTestSubjectAttrName;
    [LocalizableAttribute("False")]
public JetBrainsAnnotationsTestSubjectInjector(IShellLocks locks, IDialogHost dialogHost, IPsiServices psiServices, ILanguageManager languageManager, NuGetPackageReferenceTracker packageReferenceTracker, NuGetNativePackageManager packageManager);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.SubjectInjection.JetBrainsAnnotationsTestSubjectInjector/<TryInjectTestSubject>d__7")]
public Task TryInjectTestSubject(ITestGenerationContext ctx, IProgressIndicator pi);
    private Task InstallJetBrainsAnnotationsNuget(IProject project);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.SubjectInjection.JetBrainsAnnotationsTestSubjectInjector/<DoInstallJetBrainsAnnotationsNuget>d__9")]
private Task DoInstallJetBrainsAnnotationsNuget(IProject project);
    private Task`1<NuGetVersion> GetVersionToInstall();
    private Task`1<bool> AskUserConsent();
    private bool HasTestSubjectAttribute(PackageReference reference);
    private bool IsJetBrainsAnnotations(PackageReference reference);
}
public class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.SubjectInjection.TestSubjectInjectionException : Exception {
    public TestSubjectInjectionException(ITestGenerationContext ctx, string attributeName, string reason);
}
public abstract class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.SubjectInjection.TestSubjectInjectorBase : object {
    [NotNullAttribute]
private IPsiServices myPsiServices;
    [NotNullAttribute]
private ILanguageManager myLanguageManager;
    protected TestSubjectInjectorBase(IPsiServices psiServices, ILanguageManager languageManager);
    protected Task Annotate(Lifetime lifetime, ITestGenerationContext ctx, IClrTypeName attrTypeName);
    protected Task Annotate(Lifetime lifetime, ITestGenerationContext ctx, ITypeElement attrTypeElement);
    [CanBeNullAttribute]
private ITypeElement GetSubjectAttribute(ITestGenerationContext ctx, ITypeElement testClass, IClrTypeName attrName);
}
[ExtensionAttribute]
internal static class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.TargetFrameworkIdExtensions : object {
    [ExtensionAttribute]
[CanBeNullAttribute]
public static TargetFrameworkId ChooseReferencingTargetFramework(TargetFrameworkId targetFrameworkToReference, IReadOnlyCollection`1<TargetFrameworkId> targetFrameworkToReferenceFrom);
    public static TargetFrameworkId CalculateTargetFramework(IProject testProject, IProject businessProject, TargetFrameworkId businessTf);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Templates.AnyFrameworkScopeDescriptor : object {
    [NotNullAttribute]
public static ITestProjectScopeDescriptor Instance;
    [CompilerGeneratedAttribute]
private IUnitTestProvider <Provider>k__BackingField;
    public IUnitTestProvider Provider { get; }
    private static AnyFrameworkScopeDescriptor();
    [CompilerGeneratedAttribute]
public sealed virtual IUnitTestProvider get_Provider();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Templates.BeInTestProjectScopePointEditor : ScopeOptionsBeBase {
    [NotNullAttribute]
private InTestProject myScopePoint;
    [NotNullAttribute]
private IEnumerable`1<ITestProjectScopeDescriptor> myDescriptors;
    [NotNullAttribute]
private Property`1<ITestProjectScopeDescriptor> mySelection;
    public BeInTestProjectScopePointEditor(InTestProject scopePoint, IEnumerable`1<ITestProjectScopeDescriptor> descriptors);
    public virtual BeControl GetBeControl(Lifetime lifetime);
    public virtual void Done();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ContextActionAttribute]
public class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Templates.CSharp.CreateUnitTestContextAction : ContextActionBase {
    [CompilerGeneratedAttribute]
private ICSharpContextActionDataProvider <dataProvider>P;
    public string Text { get; }
    public CreateUnitTestContextAction(ICSharpContextActionDataProvider dataProvider);
    public virtual string get_Text();
    public virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [CompilerGeneratedAttribute]
private void <ExecutePsiTransaction>b__6_0(ITextControl textControl);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
internal class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Templates.CSharp.CSharpImportInjector : object {
    public sealed virtual bool TryAddImport(IFile file, INamespace ns, IPsiModule sourceModule, IClrDeclaredElement target);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
internal class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Templates.CSharp.CSharpInternalVisibleToAttributeFactory : object {
    public sealed virtual ITreeNode Create(IPsiModule module, AssemblyNameInfo assemblyNameInfo);
    [LocalizableAttribute("False")]
private string GetFriendAssemblyNameAndToken(AssemblyNameInfo assemblyNameInfo);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
internal class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Templates.CSharp.CSharpLanguageSupport : object {
    public sealed virtual bool CanHostTestsInProject(IProject project);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
internal class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Templates.CSharp.CSharpPsiTestNavigator : object {
    public sealed virtual INamespaceDeclaration FindNamespaceDeclaration(ITreeNode root, string nsName);
    public sealed virtual ITypeDeclaration FindTypeDeclaration(INamespaceDeclaration root, string typeName);
    public sealed virtual ITreeNode FindAnchorForNewTest(ITypeDeclaration root);
}
[ShellComponentAttribute("16")]
internal class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Templates.CSharp.CSharpSdkTestProjectFileFactory : SdkTestProjectFileFactory {
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
internal class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Templates.CSharp.CSharpTestProjectFileFactory : TestProjectFileFactory {
    public CSharpTestProjectFileFactory(CSharpVanillaTestProjectFileFactory vanillaStyleFactory, CSharpSdkTestProjectFileFactory sdkStyleFactory);
}
[ShellComponentAttribute("16")]
internal class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Templates.CSharp.CSharpVanillaTestProjectFileFactory : VanillaTestProjectFileFactory {
    protected string Imports { get; }
    protected virtual string get_Imports();
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Templates.CSharp.ZoneMarker : object {
}
[DefaultSettingsAttribute("JetBrains.ReSharper.Feature.Services.LiveTemplates.Settings.LiveTemplatesSettings", "16")]
public class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Templates.DefaultTestTemplates : object {
    [NotNullAttribute]
private IEnumerable`1<IContributeTestFileTemplate> myFileTemplateContributors;
    [NotNullAttribute]
private IEnumerable`1<IContributeTestLiveTemplate> myLiveTemplateContributors;
    [NotNullAttribute]
private ILogger myLogger;
    public string Name { get; }
    private static DefaultTestTemplates();
    public DefaultTestTemplates(IEnumerable`1<IContributeTestFileTemplate> fileTemplateContributors, IEnumerable`1<IContributeTestLiveTemplate> liveTemplateContributors, ILogger logger);
    public sealed virtual string get_Name();
    public sealed virtual Stream GetDefaultSettingsStream(Lifetime lifetime);
}
public interface JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Templates.IContributeTestFileTemplate {
    public string TemplateResourceName { get; }
    public abstract virtual string get_TemplateResourceName();
}
public interface JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Templates.IContributeTestLiveTemplate {
    public string TemplateResourceName { get; }
    public abstract virtual string get_TemplateResourceName();
}
public class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Templates.InTestProject : InAnyProject {
    public static string ProviderAttributeName;
    private static Guid ourDefaultUID;
    [CompilerGeneratedAttribute]
private ITestProjectScopeDescriptor <Descriptor>k__BackingField;
    public ITestProjectScopeDescriptor Descriptor { get; }
    public string PresentableShortName { get; }
    public Guid QuickListUID { get; }
    public string QuickListTitle { get; }
    public InTestProject(ITestProjectScopeDescriptor descriptor);
    private static InTestProject();
    [CompilerGeneratedAttribute]
public ITestProjectScopeDescriptor get_Descriptor();
    public virtual string get_PresentableShortName();
    public virtual Guid GetDefaultUID();
    public virtual Guid get_QuickListUID();
    public virtual string get_QuickListTitle();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Templates.InTestProject/<EnumerateCustomProperties>d__14")]
public virtual IEnumerable`1<Pair`2<string, string>> EnumerateCustomProperties();
    public virtual bool IsSubsetOf(ITemplateScopePoint other);
}
[DerivedComponentsInstantiationRequirementAttribute("1")]
public interface JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Templates.IScopePointEditorViewFactory {
    [NotNullAttribute]
public abstract virtual IScopeOptionsUIBase CreateEditor(object viewModel);
}
public interface JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Templates.IScopePointProvider {
    [NotNullAttribute]
[ItemNotNullAttribute]
public abstract virtual IEnumerable`1<ITemplateScopePoint> GetScopePoints();
}
public interface JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Templates.ITestGenerationTemplatesProvider {
    public abstract virtual bool IsLanguageSupported(PsiLanguageType language);
    [NotNullAttribute]
public abstract virtual IReadOnlyCollection`1<Template> GetFileTemplates(PsiLanguageType language, IProjectDescriptor projectDescriptor);
    [NotNullAttribute]
public abstract virtual IReadOnlyCollection`1<Template> GetLiveTemplates(PsiLanguageType language);
}
[DerivedComponentsInstantiationRequirementAttribute("1")]
public interface JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Templates.ITestProjectScopeDescriptor {
    [NotNullAttribute]
public IUnitTestProvider Provider { get; }
    public abstract virtual IUnitTestProvider get_Provider();
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Templates.TestGenerationTemplatesProvider : object {
    [NotNullAttribute]
[LocalizableAttribute("False")]
public static string SearchedLiveTemplateName;
    [NotNullAttribute]
private ISolution mySolution;
    [NotNullAttribute]
private ISettingsStore mySettingsStore;
    [NotNullAttribute]
private ILanguageManager myLanguageManager;
    [NotNullAttribute]
private StoredTemplatesProvider myTemplatesProvider;
    [NotNullAttribute]
private ConcurrentDictionary`2<PsiLanguageType, bool> myCache;
    public TestGenerationTemplatesProvider(Lifetime lifetime, ISolution solution, ISettingsStore settingsStore, ILanguageManager languageManager, StoredTemplatesProvider templatesProvider);
    public sealed virtual bool IsLanguageSupported(PsiLanguageType language);
    private bool CalculateIsLanguageSupported(PsiLanguageType language);
    public IReadOnlyCollection`1<Template> GetFileTemplates(PsiLanguageType language);
    public sealed virtual IReadOnlyCollection`1<Template> GetFileTemplates(PsiLanguageType language, IProjectDescriptor projectDescriptor);
    private IReadOnlyCollection`1<Template> GetFileTemplates(IContextBoundSettingsStore settingsStore, PsiLanguageType language);
    private Func`3<Lifetime, DataContexts, IDataContext> GetDataContextForProjectOrDefault(IProjectDescriptor projectDescriptor);
    public sealed virtual IReadOnlyCollection`1<Template> GetLiveTemplates(PsiLanguageType language);
    private bool IsSupportedLanguage(Template template, PsiLanguageType language);
    [CompilerGeneratedAttribute]
private void <.ctor>b__6_0(bool _);
}
[ScopeCategoryUIProviderAttribute("16")]
internal class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Templates.TestProjectScopeCategoryUIProvider : ScopeCategoryUIProvider {
    [NotNullAttribute]
private IEnumerable`1<ITestProjectScopeDescriptor> myDescriptors;
    [CanBeNullAttribute]
private IScopePointEditorViewFactory myEditorViewFactory;
    public string CategoryCaption { get; }
    public TestProjectScopeCategoryUIProvider(IImmutableList`1<ITestProjectScopeDescriptor> descriptors, IScopePointEditorViewFactory editorViewFactory);
    public virtual string get_CategoryCaption();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Templates.TestProjectScopeCategoryUIProvider/<BuildAllPoints>d__5")]
public virtual IEnumerable`1<ITemplateScopePoint> BuildAllPoints();
    public virtual string Present(ITemplateScopePoint point);
    public virtual bool HaveOptionsUIFor(ITemplateScopePoint point);
    public virtual IScopeOptionsUIBase CreateUI(ITemplateScopePoint point);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Templates.TestProjectScopeProvider : object {
    [NotNullAttribute]
private IEnumerable`1<ITestProjectScopeDescriptor> myDescriptors;
    [NotNullAttribute]
private ILogger myLogger;
    public TestProjectScopeProvider(IEnumerable`1<ITestProjectScopeDescriptor> descriptors, ILogger logger);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Templates.TestProjectScopeProvider/<ProvideScopePoints>d__3")]
public sealed virtual IEnumerable`1<ITemplateScopePoint> ProvideScopePoints(TemplateAcceptanceContext context);
    public sealed virtual ITemplateScopePoint CreateScope(Guid scopeGuid, string typeName, IEnumerable`1<Pair`2<string, string>> customProperties);
}
[MacroDefinitionAttribute("TestSubject")]
public class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Templates.TestSubjectMacroDefinition : SimpleMacroDefinition {
    [LocalizableAttribute("False")]
public static string Id;
}
internal class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Templates.TypeExpression : object {
    [NotNullAttribute]
private ITypeElement myTypeElement;
    public TypeExpression(ITypeElement typeElement);
    public sealed virtual HotspotItems GetLookupItems(IHotspotContext context);
    public sealed virtual string EvaluateQuickResult(IHotspotContext context);
    public sealed virtual void HandleExpansion(IHotspotContext context);
    public sealed virtual object Clone();
    public sealed virtual string Serialize();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
internal class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Templates.VB.VBInternalVisibleToAttributeFactory : object {
    public sealed virtual ITreeNode Create(IPsiModule module, AssemblyNameInfo assemblyNameInfo);
    [LocalizableAttribute("False")]
private string GetFriendAssemblyNameAndToken(AssemblyNameInfo assemblyNameInfo);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
internal class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Templates.VB.VBLanguageSupport : object {
    public sealed virtual bool CanHostTestsInProject(IProject project);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
internal class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Templates.VB.VBPsiTestNavigator : object {
    public sealed virtual INamespaceDeclaration FindNamespaceDeclaration(ITreeNode root, string nsName);
    public sealed virtual ITypeDeclaration FindTypeDeclaration(INamespaceDeclaration root, string typeName);
    public sealed virtual ITreeNode FindAnchorForNewTest(ITypeDeclaration root);
}
[ShellComponentAttribute("16")]
internal class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Templates.VB.VBSdkTestProjectFileFactory : SdkTestProjectFileFactory {
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
internal class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Templates.VB.VBTestProjectFileFactory : TestProjectFileFactory {
    public VBTestProjectFileFactory(VBVanillaTestProjectFileFactory vanillaStyleFactory, VBSdkTestProjectFileFactory sdkStyleFactory);
}
[ShellComponentAttribute("16")]
internal class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Templates.VB.VBVanillaTestProjectFileFactory : VanillaTestProjectFileFactory {
    protected string Imports { get; }
    protected virtual string get_Imports();
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Templates.VB.ZoneMarker : object {
}
public class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Templates.ViewModels.InTestProjectScopePointEditorViewModel : object {
    [CompilerGeneratedAttribute]
private IBindable`1<ITestProjectScopeDescriptor> <SelectedDescriptor>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ITestProjectScopeDescriptor> <Descriptors>k__BackingField;
    public IBindable`1<ITestProjectScopeDescriptor> SelectedDescriptor { get; }
    public IEnumerable`1<ITestProjectScopeDescriptor> Descriptors { get; }
    public InTestProjectScopePointEditorViewModel(InTestProject scopePoint, IEnumerable`1<ITestProjectScopeDescriptor> descriptors);
    [CompilerGeneratedAttribute]
public IBindable`1<ITestProjectScopeDescriptor> get_SelectedDescriptor();
    [CompilerGeneratedAttribute]
public IEnumerable`1<ITestProjectScopeDescriptor> get_Descriptors();
}
public class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.TestClassGenerationContext : object {
    [NotNullAttribute]
public static DataConstant`1<ITestMethodGenerator> GENERATOR;
    [NotNullAttribute]
private IDataContext myInner;
    [NotNullAttribute]
private ISolution mySolution;
    [NotNullAttribute]
private string myTargetModuleId;
    [NotNullAttribute]
private IClrTypeName myTargetTypeName;
    private ITypeElement myTargetClass;
    private int myNum;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private IMethod <TargetMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private ITestMethodGenerator <Generator>k__BackingField;
    public ILogger Logger { get; }
    public ITypeElement TargetClass { get; }
    public IMethod TargetMethod { get; }
    public ITestMethodGenerator Generator { get; }
    public bool IsEmpty { get; }
    public DataContextState State { get; }
    public TestClassGenerationContext(IDataContext inner, IClrDeclaredElement target, ILogger logger);
    private static TestClassGenerationContext();
    [CompilerGeneratedAttribute]
public sealed virtual ILogger get_Logger();
    public sealed virtual ITypeElement get_TargetClass();
    [CompilerGeneratedAttribute]
public sealed virtual IMethod get_TargetMethod();
    [CompilerGeneratedAttribute]
public sealed virtual ITestMethodGenerator get_Generator();
    private ITypeElement GetValidOrTryRestore();
    [CanBeNullAttribute]
public static ITypeElement GetTargetClass(IClrDeclaredElement target);
    public sealed virtual void DumpProjectModel(string step);
    public sealed virtual T GetData(DataConstant`1<T> dataConstant);
    public sealed virtual IDataContext Prolongate(Lifetime lifetime);
    public sealed virtual bool get_IsEmpty();
    public sealed virtual DataContextState get_State();
    [CompilerGeneratedAttribute]
private object <GetValidOrTryRestore>b__19_0();
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.TestClassGenerator : object {
    [NotNullAttribute]
private IShellLocks myLocks;
    [NotNullAttribute]
private ISolution mySolution;
    [NotNullAttribute]
private IDialogHost myDialogHost;
    [NotNullAttribute]
private IPsiServices myPsiServices;
    [NotNullAttribute]
private ICreateUnitTestDialogFactory myDialogFactory;
    [NotNullAttribute]
private ICreateUnitTestDialogViewFactory myDialogViewFactory;
    [NotNullAttribute]
private ITestLinkerStatsCollector myStatsCollector;
    [NotNullAttribute]
private ITestProjectFactory myTestProjectFactory;
    [NotNullAttribute]
private ITestFrameworkReferenceInstaller myReferenceInstaller;
    [NotNullAttribute]
private IInternalsVisibleToInstaller myInternalsVisibleToInstaller;
    [NotNullAttribute]
private ITestSubjectInjector myTestSubjectInjector;
    [NotNullAttribute]
private IAuthoredChangesAwaiter myChangesAwaiter;
    [NotNullAttribute]
private ITaskExecutor myExecutor;
    [NotNullAttribute]
private HelpSystem myHelpSystem;
    public TestClassGenerator(IShellLocks locks, ISolution solution, IDialogHost dialogHost, IPsiServices psiServices, ICreateUnitTestDialogFactory dialogFactory, ICreateUnitTestDialogViewFactory dialogViewFactory, ITestLinkerStatsCollector statsCollector, ITestProjectFactory testProjectFactory, ITestFrameworkReferenceInstaller referenceInstaller, IInternalsVisibleToInstaller internalsVisibleToInstaller, ITestSubjectInjector testSubjectInjector, IAuthoredChangesAwaiter changesAwaiter, UITaskExecutor executor, HelpSystem helpSystem);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.TestClassGenerator/<Generate>d__15")]
public sealed virtual Task`1<ITestClassResolutionResult> Generate(ITestClassGenerationContext ctx);
    private Task`1<ICreateUnitTestDialogResult> ShowDialog(ITestClassGenerationContext ctx);
    private Task`1<ITypeElement> CreateFromDialogResult(ITestClassGenerationContext ctx, ICreateUnitTestDialogResult dialogResult);
}
[SolutionComponentAttribute("0")]
internal class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.TestClassResolver : object {
    [NotNullAttribute]
private ILinkedTypesLocator myLocator;
    [NotNullAttribute]
private ITestClassGenerator myClassGenerator;
    [NotNullAttribute]
private EmptyTestMethodGenerator myMethodGenerator;
    [NotNullAttribute]
private IUnitTestPsiManager myPsiManager;
    [NotNullAttribute]
private ITestClassAmbiguityResolver myAmbiguityResolver;
    public TestClassResolver(ILinkedTypesLocator locator, ITestClassGenerator classGenerator, EmptyTestMethodGenerator methodGenerator, IUnitTestPsiManager psiManager, ITestClassAmbiguityResolver ambiguityResolver);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.TestClassResolver/<GetOrCreateTestClass>d__6")]
public sealed virtual Task`1<ITestClassResolutionResult> GetOrCreateTestClass(ITestClassGenerationContext ctx);
    private Task`1<IReadOnlyCollection`1<ITypeElement>> FindExistingTestClasses(ITypeElement target);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.TestClassResolver/<ChooseFromCandidates>d__8")]
private Task`1<ITypeElement> ChooseFromCandidates(IReadOnlyCollection`1<ITypeElement> candidates, ITestClassGenerationContext ctx);
    [NotNullAttribute]
private ITypeElement ChooseBestFromGroup(IEnumerable`1<ITypeElement> group, ITestClassGenerationContext ctx);
}
internal class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.TestGenerationContext : object {
    [NotNullAttribute]
private ITestClassGenerationContext myInner;
    [NotNullAttribute]
private ITestClassResolutionResult myTestClassResolution;
    [NotNullAttribute]
private IAuthoredChangesAwaiter myChangesAwaiter;
    public ITypeElement TestClass { get; }
    public IUnitTestProvider Provider { get; }
    public ITestMethodGenerator Generator { get; }
    public ILogger Logger { get; }
    public ITypeElement TargetClass { get; }
    public IMethod TargetMethod { get; }
    public DataContextState State { get; }
    public bool IsEmpty { get; }
    public TestGenerationContext(ITestClassGenerationContext inner, IAuthoredChangesAwaiter changesAwaiter, ITestClassResolutionResult testClassResolution);
    public sealed virtual ITypeElement get_TestClass();
    public sealed virtual IUnitTestProvider get_Provider();
    public sealed virtual ITestMethodGenerator get_Generator();
    [AsyncStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.TestGenerationContext/<WaitForChangesProcessed>d__10")]
public sealed virtual Task WaitForChangesProcessed(CancellationToken ct);
    public sealed virtual ILogger get_Logger();
    public sealed virtual ITypeElement get_TargetClass();
    public sealed virtual IMethod get_TargetMethod();
    public sealed virtual DataContextState get_State();
    public sealed virtual bool get_IsEmpty();
    public sealed virtual T GetData(DataConstant`1<T> dataConstant);
    public sealed virtual IDataContext Prolongate(Lifetime lifetime);
    public sealed virtual void DumpProjectModel(string step);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.TestGenerator : object {
    [NotNullAttribute]
private ITestClassResolver myTestClassResolver;
    [NotNullAttribute]
private IAuthoredChangesAwaiter myChangesAwaiter;
    [NotNullAttribute]
private ILogger myLogger;
    public TestGenerator(ITestClassResolver testClassResolver, IAuthoredChangesAwaiter changesAwaiter, ILogger logger);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.TestGenerator/<Generate>d__4")]
public sealed virtual Task Generate(IDataContext ctx, IClrDeclaredElement target);
}
[SolutionComponentAttribute("0")]
internal class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.TestProjectFactory : object {
    [NotNullAttribute]
private ILanguageManager myLanguageManager;
    [NotNullAttribute]
private ITestProjectActivator myProjectActivator;
    public TestProjectFactory(ILanguageManager languageManager, ITestProjectActivator projectActivator);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.TestProjectFactory/<Create>d__3")]
public sealed virtual Task`1<IProjectReference> Create(ITestClassGenerationContext ctx, INewProjectDescriptor projectInfo, CancellationToken ct);
}
internal abstract class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.TestProjectFileFactory : object {
    [NotNullAttribute]
private VanillaTestProjectFileFactory myVanillaStyleFactory;
    [NotNullAttribute]
private SdkTestProjectFileFactory mySdkStyleFactory;
    protected TestProjectFileFactory(VanillaTestProjectFileFactory vanillaStyleFactory, SdkTestProjectFileFactory sdkStyleFactory);
    public sealed virtual Task`1<VirtualFileSystemPath> CreateProjectFile(ITestClassGenerationContext ctx, INewProjectDescriptor descriptor, CancellationToken ct);
}
internal abstract class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.TestProjectFileFactoryBase : object {
    [NotNullAttribute]
private string myProjectFileExtension;
    protected TestProjectFileFactoryBase(string projectFileExtension);
    [LocalizableAttribute("False")]
public Task`1<VirtualFileSystemPath> CreateProjectFile(ITestClassGenerationContext ctx, INewProjectDescriptor descriptor, CancellationToken ct);
    protected abstract virtual string GetText(INewProjectDescriptor descriptor);
    private void EnsureDirectoryExists(VirtualFileSystemPath filePath);
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.TestSubjectInjector : object {
    [NotNullAttribute]
private ITestSubjectExtractorInternal myAttributeBasedSubjectExtractor;
    [NotNullAttribute]
private ITestSubjectExtractorInternal myGenericArgumentSubjectExtractor;
    [NotNullAttribute]
private ITestSubjectExtractorInternal myNamingConventionBasedSubjectExtractor;
    [NotNullAttribute]
private AggregateExtractor myAggregateExtractor;
    [NotNullAttribute]
private Dictionary`2<Type, ICustomTestSubjectInjector> mySubjectInjectors;
    [NotNullAttribute]
private ConcurrentDictionary`2<Type, ICustomTestSubjectInjector> myCachedInjectorsByProvider;
    [NotNullAttribute]
private Lazy`1<IProperty`1<AnnotationStrategy>> myAnnotationStrategy;
    public TestSubjectInjector(Lifetime lifetime, ISolution solution, ISettingsStore settingsStore, AttributeBasedTestSubjectExtractor attributeBasedSubjectExtractor, FromGenericArgumentTestSubjectExtractor genericArgumentSubjectExtractor, NamingConventionBasedTestSubjectExtractor namingConventionBasedSubjectExtractor, IEnumerable`1<ITestSubjectExtractor> allExtractors, IEnumerable`1<ICustomTestSubjectInjector> customInjectors);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.TestSubjectInjector/<TryInjectTestSubject>d__8")]
public sealed virtual Task TryInjectTestSubject(ITestGenerationContext ctx, IProgressIndicator pi);
    [LocalizableAttribute("False")]
private bool CanBeFoundUsing(ITestSubjectExtractorInternal extractor, ITestGenerationContext ctx);
    [NotNullAttribute]
private ICustomTestSubjectInjector FindBestSuitedTestSubjectInjector(Type providerType);
    [CompilerGeneratedAttribute]
internal static IEnumerable`1<ITypeElement> <CanBeFoundUsing>g__TryGetSubjectsFrom|9_0(ITestSubjectExtractorInternal extractor, <>c__DisplayClass9_0& );
}
internal abstract class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.VanillaTestProjectFileFactory : TestProjectFileFactoryBase {
    private static string FileTemplate;
    protected string Imports { get; }
    protected VanillaTestProjectFileFactory(string projectFileExtension);
    protected abstract virtual string get_Imports();
    protected virtual string GetText(INewProjectDescriptor descriptor);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.ZoneMarker : object {
}
[ZoneDefinitionAttribute]
public interface JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.ITestLinkerZone {
}
[ActionAttribute("GoToLinkedTypesAction", "JetBrains.ReSharper.UnitTestFramework.Src.Features.TestLinker.Strings", "GoToLinkedTypesAction_Text")]
internal class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.NavigateToTest.Actions.GoToLinkedTypesAction : ContextNavigationActionBase`1<LinkedTypesNavigationProvider> {
    public virtual IActionRequirement GetRequirement(IDataContext dataContext);
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.NavigateToTest.Extractors.AttributeBasedTestSubjectExtractor : object {
    [NotNullAttribute]
private Lazy`1<IPsiServices> myPsiServices;
    [NotNullAttribute]
private IEnumerable`1<IExtractTestSubjectFromAttribute> myExtractors;
    [NotNullAttribute]
private IProperty`1<bool> myEnableSearch;
    [NotNullAttribute]
private IDictionary`2<IClrTypeName, string> myQueryByAttr;
    public bool IsBasedOnFuzzySearch { get; }
    public AttributeBasedTestSubjectExtractor(Lifetime lifetime, ISolution solution, ISettingsStore settingsStore, IEnumerable`1<IExtractTestSubjectFromAttribute> extractors);
    public sealed virtual bool get_IsBasedOnFuzzySearch();
    public sealed virtual IEnumerable`1<ITypeElement> TryGetSubjects(ITypeElement testElement, IPsiSourceFile sourceFile);
    public sealed virtual IEnumerable`1<ITypeElement> TryGetSubjectsIgnoreSettings(ITypeElement testElement);
    private IEnumerable`1<ITypeElement> TryGetSubjects(ITypeElement testElement, IPsiSourceFile sourceFile, bool checkSettings);
    private bool CanHaveAttribute(ITypeElement testElement, IExtractTestSubjectFromAttribute extractor, IPsiSourceFile sourceFile);
    [LocalizableAttribute("False")]
private string GetQuery(IExtractTestSubjectFromAttribute extractor);
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.NavigateToTest.Extractors.CustomTestSubjectExtractor : object {
    private IProperty`1<ClrTypeName> myAttributeName;
    public IClrTypeName AttributeName { get; }
    public string Query { get; }
    public CustomTestSubjectExtractor(Lifetime lifetime, ISolution solution, ISettingsStore settingsStore);
    public sealed virtual IClrTypeName get_AttributeName();
    public sealed virtual string get_Query();
    public sealed virtual IEnumerable`1<ITypeElement> TryGetSubjects(IList`1<IAttributeInstance> attributes);
    public IEnumerable`1<ITypeElement> TryGetSubjects(IAttributeInstance attribute);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.NavigateToTest.Extractors.CustomTestSubjectExtractor/<FlattenArguments>d__8")]
private static IEnumerable`1<AttributeValue> FlattenArguments(IEnumerable`1<AttributeValue> attributeValues);
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.NavigateToTest.Extractors.FromGenericArgumentTestSubjectExtractor : object {
    [NotNullAttribute]
private NuGetPackageReferenceTracker myPackageReferenceTracker;
    [NotNullAttribute]
private IProperty`1<bool> myEnableSearch;
    [NotNullAttribute]
private IProperty`1<string> myMarkerAttribute;
    [NotNullAttribute]
private PackageIdentity myAnnotationsPackage;
    public bool IsBasedOnFuzzySearch { get; }
    public FromGenericArgumentTestSubjectExtractor(Lifetime lifetime, ISolution solution, ISettingsStore settingsStore, NuGetPackageReferenceTracker packageReferenceTracker);
    public sealed virtual bool get_IsBasedOnFuzzySearch();
    public sealed virtual IEnumerable`1<ITypeElement> TryGetSubjects(ITypeElement testElement, IPsiSourceFile sourceFile);
    public sealed virtual IEnumerable`1<ITypeElement> TryGetSubjectsIgnoreSettings(ITypeElement testElement);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.NavigateToTest.Extractors.FromGenericArgumentTestSubjectExtractor/<TryGetSubjects>d__9")]
private IEnumerable`1<ITypeElement> TryGetSubjects(ITypeElement testElement, bool checkSettings);
    private bool HasJetBrainsAnnotationsNuget(IProject project);
    private IEnumerable`1<ITypeElement> TryGetSubjectsFrom(ITypeElement testElement, IClrTypeName attr);
    [CompilerGeneratedAttribute]
private bool <HasJetBrainsAnnotationsNuget>g__IsJetBrainsAnnotations|10_0(PackageReference reference);
    [CompilerGeneratedAttribute]
private bool <HasJetBrainsAnnotationsNuget>g__HasMeansTestSubjectAttribute|10_1(PackageReference reference);
}
public interface JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.NavigateToTest.Extractors.IExtractTestSubjectFromAttribute {
    [CanBeNullAttribute]
public IClrTypeName AttributeName { get; }
    [CanBeNullAttribute]
public string Query { get; }
    public abstract virtual IClrTypeName get_AttributeName();
    [CanBeNullAttribute]
public abstract virtual IEnumerable`1<ITypeElement> TryGetSubjects(IList`1<IAttributeInstance> attributes);
    public abstract virtual string get_Query();
}
[ShellComponentAttribute("16")]
internal class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.NavigateToTest.Extractors.JetBrainsAnnotationsTestSubjectExtractor : object {
    [CompilerGeneratedAttribute]
private IClrTypeName <AttributeName>k__BackingField;
    public IClrTypeName AttributeName { get; }
    public string Query { get; }
    [CompilerGeneratedAttribute]
public sealed virtual IClrTypeName get_AttributeName();
    public sealed virtual string get_Query();
    public sealed virtual IEnumerable`1<ITypeElement> TryGetSubjects(IList`1<IAttributeInstance> attributes);
    public ITypeElement TryGetSubject(IAttributeInstance attribute);
}
[ShellComponentAttribute("16")]
internal class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.NavigateToTest.Extractors.NamingConventionBasedTestSubjectExtractor : object {
    public bool IsBasedOnFuzzySearch { get; }
    public sealed virtual IEnumerable`1<ITypeElement> TryGetSubjects(ITypeElement testElement, IPsiSourceFile sourceFile);
    public sealed virtual IEnumerable`1<ITypeElement> TryGetSubjectsIgnoreSettings(ITypeElement testElement);
    public sealed virtual bool get_IsBasedOnFuzzySearch();
    private IEnumerable`1<ITypeElement> TryGetSubjects(ITypeElement testElement, bool checkSettings);
    private static TestLinkerSettings GetSettings(ISolution solution);
    public IEnumerable`1<ITypeElement> TryGetTestClasses(ITypeElement source);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.NavigateToTest.Extractors.NamingConventionBasedTestSubjectExtractor/<GetPsiModulesFromTestProjects>d__7")]
private IEnumerable`1<IPsiModule> GetPsiModulesFromTestProjects(ITypeElement source);
}
public interface JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.NavigateToTest.ILinkedTypesLocator {
    [NotNullAttribute]
public abstract virtual IReadOnlyCollection`1<ITypeElement> GetTestTypes(ITypeElement typeElement, bool inspectBase);
    [NotNullAttribute]
public abstract virtual IReadOnlyCollection`1<ITypeElement> GetProductionTypes(ITypeElement typeElement);
}
public interface JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.NavigateToTest.ITestSubjectExtractor {
    public bool IsBasedOnFuzzySearch { get; }
    public abstract virtual bool get_IsBasedOnFuzzySearch();
    [CanBeNullAttribute]
[ItemNotNullAttribute]
public abstract virtual IEnumerable`1<ITypeElement> TryGetSubjects(ITypeElement testElement, IPsiSourceFile sourceFile);
}
internal interface JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.NavigateToTest.ITestSubjectExtractorInternal {
    [CanBeNullAttribute]
[ItemNotNullAttribute]
public abstract virtual IEnumerable`1<ITypeElement> TryGetSubjectsIgnoreSettings(ITypeElement testElement);
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.NavigateToTest.LinkedTypesLocator : object {
    [NotNullAttribute]
private IPsiServices myPsiServices;
    [NotNullAttribute]
private ITrigramIndex myTrigramIndex;
    [NotNullAttribute]
private IUnitTestPsiManager myUnitTestPsiManager;
    [NotNullAttribute]
private IByProjectFileCache myByProjectFileCache;
    [NotNullAttribute]
private IByShortNameCache myByShortNameCache;
    [NotNullAttribute]
private IEnumerable`1<ITestSubjectExtractor> mySubjectsExtractors;
    public LinkedTypesLocator(IPsiServices psiServices, SourcesTrigramIndex trigramIndex, IUnitTestPsiManager unitTestPsiManager, IByProjectFileCache byProjectFileCache, IByShortNameCache byShortNameCache, IEnumerable`1<ITestSubjectExtractor> subjectsExtractors);
    public sealed virtual IReadOnlyCollection`1<ITypeElement> GetTestTypes(ITypeElement productionTypeElement, bool inspectBase);
    public sealed virtual IReadOnlyCollection`1<ITypeElement> GetProductionTypes(ITypeElement testTypeElement);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.NavigateToTest.LinkedTypesLocator/<TryGetTestCodeFor>d__9")]
private IEnumerable`1<ITypeElement> TryGetTestCodeFor(ISet`1<ITypeElement> sources);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.NavigateToTest.LinkedTypesLocator/<GetSelfOrNestedTypes>d__10")]
private IEnumerable`1<ITypeElement> GetSelfOrNestedTypes(ITypeElement typeElement);
    private IEnumerable`1<ITypeElement> AllSources(ITypeElement typeElement, bool inspectBase);
    [CompilerGeneratedAttribute]
private bool <GetTestTypes>b__7_0(ITypeElement t);
    [CompilerGeneratedAttribute]
private bool <GetProductionTypes>b__8_0(ITypeElement t);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.NavigateToTest.LinkedTypesLocator/<<GetProductionTypes>g__QueryAllExtractors|8_1>d")]
[CompilerGeneratedAttribute]
private IEnumerable`1<ITypeElement> <GetProductionTypes>g__QueryAllExtractors|8_1(ITypeElement typeElement);
}
[ShellFeaturePartAttribute("16")]
internal class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.NavigateToTest.Navigation.LinkedTypesContextSearch : DeclaredElementContextSearchBase`1<LinkedTypesSearchRequest> {
    protected virtual LinkedTypesSearchRequest CreateSearchRequest(IDataContext dataContext, IDeclaredElement element, IDeclaredElement initialTarget);
    protected virtual IEnumerable`1<IDeclaredElement> GetElementCandidates(IDataContext context, ReferencePreferenceKind kind, bool updateOnly);
    internal static IClrDeclaredElement TryAcquireTarget(IDataContext ctx);
    private static IClrDeclaredElement TryAcquireFromPsi(IDataContext ctx);
    private static IClrDeclaredElement TryAcquireFromContext(IDataContext ctx);
}
[ContextNavigationProviderAttribute("0")]
internal class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.NavigateToTest.Navigation.LinkedTypesNavigationProvider : RequestContextSearchProvider`3<LinkedTypesContextSearch, LinkedTypesSearchRequest, LinkedTypesSearchDescriptor> {
    private static OccurrencePresentationOptions ourPresentationOptions;
    public LinkedTypesNavigationProvider(IFeaturePartsContainer manager);
    private static LinkedTypesNavigationProvider();
    public virtual string GetNotFoundMessage(SearchRequest request);
    protected virtual void ExecuteSearchRequest(IDataContext context, SearchRequest searchRequest, INavigationExecutionHost host);
    protected virtual void ProcessResults(IDataContext context, LinkedTypesSearchRequest searchRequest, INavigationExecutionHost host, ICollection`1<IOccurrence> occurrences, Func`1<IOccurrenceBrowserDescriptor> descriptorFactory);
    protected virtual LinkedTypesSearchDescriptor CreateSearchDescriptor(LinkedTypesSearchRequest searchRequest, ICollection`1<IOccurrence> results);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.NavigateToTest.Navigation.LinkedTypesNavigationProvider/<CreateWorkflow>d__6")]
public sealed virtual IEnumerable`1<ContextNavigation> CreateWorkflow(IDataContext dataContext);
    private string GetNavigationMenuTitle(IDataContext dataContext);
}
public class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.NavigateToTest.Navigation.LinkedTypesOccurrence : DeclaredElementOccurrence {
    public LinkedTypesOccurrence(IDeclaredElement element, OccurrenceType occurrenceKind);
    public virtual bool Navigate(ISolution solution, PopupWindowContextSource windowContext, bool transferFocus, TabOptions tabOptions);
}
public class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.NavigateToTest.Navigation.LinkedTypesSearchDescriptor : SearchDescriptor {
    public string ActionBarID { get; }
    public TypeDependenciesOptions DiagrammingOptions { get; }
    public LinkedTypesSearchDescriptor(LinkedTypesSearchRequest request, ICollection`1<IOccurrence> results);
    public virtual string get_ActionBarID();
    public virtual string GetResultsTitle(OccurrenceSection section);
    public virtual TypeDependenciesOptions get_DiagrammingOptions();
    protected virtual Func`2<SearchRequest, IOccurrenceBrowserDescriptor> GetDescriptorFactory();
}
public class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.NavigateToTest.Navigation.LinkedTypesSearchRequest : SearchRequest {
    [CompilerGeneratedAttribute]
private ITypeElement <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForTestElement>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEditorContext>k__BackingField;
    [NotNullAttribute]
public ITypeElement Target { get; }
    public bool ForTestElement { get; }
    public bool IsEditorContext { get; }
    public string Title { get; }
    public ISolution Solution { get; }
    public ICollection SearchTargets { get; }
    public LinkedTypesSearchRequest(ITypeElement typeElement, bool isTestElement, bool isEditorContext);
    [CompilerGeneratedAttribute]
public ITypeElement get_Target();
    [CompilerGeneratedAttribute]
public bool get_ForTestElement();
    [CompilerGeneratedAttribute]
public bool get_IsEditorContext();
    public virtual string get_Title();
    public virtual ISolution get_Solution();
    public virtual ICollection get_SearchTargets();
    public virtual ICollection`1<IOccurrence> Search(IProgressIndicator progressIndicator);
    private IEnumerable`1<ITypeElement> WithInheritors(IEnumerable`1<ITypeElement> result, IProgressIndicator progressIndicator);
    private string GetTitle();
}
[OptionsPageAttribute("TestNavigationOptionsPage", "Test Navigation", "JetBrains.Application.UI.Icons.Special.ThemedIcons.SpecialThemedIcons/Placeholder")]
public class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.NavigateToTest.Options.TestNavigationOptionsPage : BeSimpleOptionsPage {
    public TestNavigationOptionsPage(Lifetime lifetime, OptionsPageContext pageContext, OptionsSettingsSmartContext smartContext, ISolution solution);
}
[DerivedRenamesEvaluatorAttribute("16")]
internal class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.NavigateToTest.Refactorings.LinkedTypesDerivedNameEvaluator : object {
    [NotNullAttribute]
private NamingConventionBasedTestSubjectExtractor myExtractor;
    public bool SuggestedElementsHaveDerivedName { get; }
    public LinkedTypesDerivedNameEvaluator(NamingConventionBasedTestSubjectExtractor extractor);
    public sealed virtual bool get_SuggestedElementsHaveDerivedName();
    public sealed virtual IEnumerable`1<IDeclaredElement> CreateFromElement(IEnumerable`1<IDeclaredElement> initialElements, DerivedElement derivedElement, IProgressIndicator pi);
    public sealed virtual IEnumerable`1<IDeclaredElement> CreateFromReference(IReference reference, IDeclaredElement declaredElement, IProgressIndicator pi);
    private IEnumerable`1<IDeclaredElement> GetRelatedTypesWithDerivedName(IDeclaredElement declaredElement);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.NavigateToTest.Refactorings.ZoneMarker : object {
}
[OptionsPageAttribute("TestLinkerOptionsPage", "Test Linker", "JetBrains.ReSharper.UnitTestFramework.Resources.UnitTestingThemedIcons/TestLinker")]
public class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.Options.TestLinkerOptionsPage : BetterCustomOptionsPage {
    public TestLinkerOptionsPage(Lifetime lifetime, OptionsPageContext pageContext, OptionsSettingsSmartContext smartContext, IconHostBase iconHost, HelpSystem helpSystem, IShellLocks locks, ISolution solution);
}
[FlagsAttribute]
public enum JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.Settings.AnnotationStrategy : Enum {
    public int value__;
    [DisplayAttribute]
public static AnnotationStrategy Never;
    [DisplayAttribute]
public static AnnotationStrategy WhenNotEvident;
    [DisplayAttribute]
public static AnnotationStrategy WhenCannotBeInferredFromName;
    [DisplayAttribute]
public static AnnotationStrategy WhenCannotBeInferred;
    [DisplayAttribute]
public static AnnotationStrategy Always;
}
public enum JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.Settings.NamingStyle : Enum {
    public int value__;
    [DisplayAttribute]
public static NamingStyle Prefix;
    [DisplayAttribute]
public static NamingStyle Postfix;
}
[SettingsKeyAttribute("JetBrains.ReSharper.UnitTestFramework.Settings.UnitTestingSettings", "JetBrains.ReSharper.UnitTestFramework.Src.Features.TestLinker.Strings", "TestLinker_Settings_Description")]
public class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.Settings.TestLinkerSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.UnitTestFramework.Src.Features.TestLinker.Strings", "TestLinker_Settings_UseAffixSearch_Description")]
public bool EnableAffixSearch;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.UnitTestFramework.Src.Features.TestLinker.Strings", "TestLinker_Settings_NamingSuffixes_Description")]
public string NamingAffixes;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.UnitTestFramework.Src.Features.TestLinker.Strings", "TestLinker_Settings_UseAttributeSearch_Description")]
public bool EnableAttributeSearch;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.UnitTestFramework.Src.Features.TestLinker.Strings", "TestLinker_Settings_SubjectAttribute_Description")]
public string SubjectAttributeName;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.UnitTestFramework.Src.Features.TestLinker.Strings", "TestLinker_Settings_UseGenericArgumentSearch_Description")]
public bool EnableGenericArgumentSearch;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.UnitTestFramework.Src.Features.TestLinker.Strings", "TestLinker_Settings_SubjectMarkerAttribute_Description")]
public string SubjectMarkerAttributeName;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.UnitTestFramework.Src.Features.TestLinker.Strings", "TestLinker_Settings_NamingStyle_Description")]
public NamingStyle NamingStyle;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.UnitTestFramework.Src.Features.TestLinker.Strings", "TestLinker_Settings_TestSubjectAnnotationStrategy_Description")]
public AnnotationStrategy TestSubjectAnnotationStrategy;
}
public enum JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.Statistics.AIGenerationOutcome : Enum {
    public int value__;
    public static AIGenerationOutcome Succeeded;
    public static AIGenerationOutcome Aborted;
    public static AIGenerationOutcome Failed;
}
public interface JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.Statistics.ITestLinkerStatsCollector {
    public abstract virtual void PushCreateTestDialogSelection(ICreateUnitTestDialogResult dialogResult);
    public abstract virtual void PushGenerationResult(AIGenerationOutcome result, int inputTokenCount, int outputTokenCount, TimeSpan duration);
}
[LocalizableAttribute("False")]
[CounterUsagesCollectorAttribute("16")]
internal class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.Statistics.TestLinkerStatsCollector : CounterUsagesCollector {
    [NotNullAttribute]
private EventLogGroup myGroup;
    [NotNullAttribute]
private VarargEventId myCreateTestActionEvent;
    [NotNullAttribute]
private EnumEventField`1<TestProject> myTestProjectField;
    [NotNullAttribute]
private TypeEventField myTestFrameworkField;
    [NotNullAttribute]
private EnumEventField`1<ReferenceType> myReferenceTypeField;
    [NotNullAttribute]
private EnumEventField`1<GeneratorType> myGeneratorTypeField;
    [NotNullAttribute]
private VarargEventId myAiGenerationFinishedEvent;
    [NotNullAttribute]
private EnumEventField`1<AIGenerationOutcome> myOutcomeField;
    [NotNullAttribute]
private StringEventField myInputTokenCountField;
    [NotNullAttribute]
private StringEventField myOutputTokenCountField;
    [NotNullAttribute]
private LongEventField myDurationField;
    public TestLinkerStatsCollector(FeatureUsageLogger featureUsageLogger);
    public virtual EventLogGroup GetGroup();
    public sealed virtual void PushCreateTestDialogSelection(ICreateUnitTestDialogResult dialogResult);
    public sealed virtual void PushGenerationResult(AIGenerationOutcome result, int inputTokenCount, int outputTokenCount, TimeSpan duration);
    [CompilerGeneratedAttribute]
internal static TestProject <PushCreateTestDialogSelection>g__SelectedProject|13_0(IProjectDescriptor descriptor);
    [CompilerGeneratedAttribute]
internal static ReferenceType <PushCreateTestDialogSelection>g__GetReferenceType|13_1(IAbstractReference reference);
    [CompilerGeneratedAttribute]
internal static GeneratorType <PushCreateTestDialogSelection>g__GetGeneratorType|13_2(ITestMethodGenerator generator);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.ZoneMarker : object {
}
[NamedElementsBagAttribute("")]
public class JetBrains.ReSharper.UnitTestFramework.Features.UnitTestElementKindOfElementType : ElementKindOfElementType {
    public static IElementKind TEST_TYPE;
    public static IElementKind TEST_MEMBER;
    public PsiLanguageType Language { get; }
    [ObsoleteAttribute("Consider to use overload with resourceType and resourceName instead of presentableName.")]
protected UnitTestElementKindOfElementType(string name, string presentableName, Func`2<IDeclaredElement, bool> isApplicable, IElementKind parent);
    protected UnitTestElementKindOfElementType(string name, Type resourceType, string resourceName, Func`2<IDeclaredElement, bool> isApplicable, IElementKind parent);
    private static UnitTestElementKindOfElementType();
    public virtual PsiLanguageType get_Language();
    private static bool IsTestType(IDeclaredElement declaredElement);
    private static bool IsTestMethod(IDeclaredElement declaredElement);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.UnitTestFramework.Features.UnitTestOccurrenceKindProvider : object {
    [NotNullAttribute]
private IUnitTestPsiManager myManager;
    private OccurrenceKind[] myOccurrenceKinds;
    private DirectMappedCache`2<IDeclaredElement, bool> myIsUnitTestElementCache;
    public UnitTestOccurrenceKindProvider(Lifetime lifetime, IUnitTestPsiManager manager);
    private void ClearCache();
    public sealed virtual ICollection`1<OccurrenceKind> GetOccurrenceKinds(IOccurrence occurrence);
    private bool CheckDeclaredElement(IDeclaredElementEnvoy envoy, UnitTestElementKind kind);
    public sealed virtual IEnumerable`1<OccurrenceKind> GetAllPossibleOccurrenceKinds();
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_0(UnitTestElementsCreatedEvent _);
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_1(UnitTestElementsRemovedEvent _);
}
[ProtocolHandlerAttribute("16")]
public class JetBrains.ReSharper.UnitTestFramework.Features.UnitTestProtocolHandler : object {
    private static string Protocol;
    private static string SchemeDelimiter;
    public static string LinkPrefix;
    public sealed virtual void Navigate(string link, object host);
}
[SolutionComponentAttribute("0")]
internal class JetBrains.ReSharper.UnitTestFramework.Features.UnitTestPsiManager : object {
    private IUnitTestProviderManager myUnitTestProviderManager;
    private IUnitTestElementRepository myElementRepository;
    private IByShortNameCache myByShortNameCache;
    public UnitTestPsiManager(IUnitTestProviderManager unitTestProviderManager, IUnitTestElementRepository elementRepository, IByShortNameCache byShortNameCache);
    public sealed virtual bool IsElementOfKind(IDeclaredElement declaredElement, UnitTestElementKind elementKind);
    public sealed virtual IUnitTestElement GetElement(IDeclaredElement declaredElement);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Features.UnitTestPsiManager/<GetElements>d__6")]
public sealed virtual IEnumerable`1<IUnitTestElement> GetElements(IReadOnlyCollection`1<IDeclaredElement> declaredElements);
}
public interface JetBrains.ReSharper.UnitTestFramework.IDotNetArtifactBasedUnitTestProvider {
}
[LocalizableAttribute("False")]
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.UnitTestFramework.Initialization.CheckDatabaseTask : object {
    [NotNullAttribute]
private Lifetime myLifetime;
    [NotNullAttribute]
private IShellLocks myLocks;
    [NotNullAttribute]
private IUnitTestElementRepository myElementRepository;
    [NotNullAttribute]
private ElementStateCache myElementStateCache;
    [NotNullAttribute]
private IEnumerable`1<IValidatableUnitTestElementCache> myCaches;
    [NotNullAttribute]
private ILogger myLogger;
    [CompilerGeneratedAttribute]
private Task <Task>k__BackingField;
    public Task Task { get; }
    public CheckDatabaseTask(Lifetime lifetime, IShellLocks locks, ISolution solution, CleanUpUnitTestElementsTask cleanUpTask, IUnitTestElementRepository elementRepository, ElementStateCache elementStateCache, IEnumerable`1<IValidatableUnitTestElementCache> caches, ILogger logger);
    [CompilerGeneratedAttribute]
public sealed virtual Task get_Task();
    private void Run(Task antecedent);
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.UnitTestFramework.Initialization.CleanUpUnitTestElementsTask : object {
    [NotNullAttribute]
private ISolution mySolution;
    [NotNullAttribute]
private IUnitTestProviderManager myProviderManager;
    [NotNullAttribute]
private IUnitTestElementRepository myRepository;
    [NotNullAttribute]
private ILogger myLogger;
    [CompilerGeneratedAttribute]
private Task <Task>k__BackingField;
    public Task Task { get; }
    public CleanUpUnitTestElementsTask(ISolution solution, IUnitTestProviderManager providerManager, IUnitTestElementRepository repository, IWaitForCachesTask cachesTask, ILogger logger);
    [CompilerGeneratedAttribute]
public sealed virtual Task get_Task();
    [AsyncStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Initialization.CleanUpUnitTestElementsTask/<RemoveObsoleteElements>d__8")]
private Task RemoveObsoleteElements(Task task);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Initialization.CleanUpUnitTestElementsTask/<RemoveElementsFromUnknownProviders>d__9")]
private Task RemoveElementsFromUnknownProviders();
    [AsyncStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Initialization.CleanUpUnitTestElementsTask/<RemoveElementsFromUnknownProjects>d__10")]
private Task RemoveElementsFromUnknownProjects();
    [AsyncStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Initialization.CleanUpUnitTestElementsTask/<RemoveElementsFromUnknownTargetFrameworks>d__11")]
private Task RemoveElementsFromUnknownTargetFrameworks();
    private IUnitTestElementCriterion CriterionForKnownTargetFrameworks(IProject project);
    [CompilerGeneratedAttribute]
private IUnitTestElementCriterion <RemoveElementsFromUnknownProjects>b__10_0();
    [CompilerGeneratedAttribute]
private IUnitTestElementCriterion <RemoveElementsFromUnknownTargetFrameworks>b__11_0();
}
public interface JetBrains.ReSharper.UnitTestFramework.Initialization.IInitialExplorationTask {
    public Task Task { get; }
    public abstract virtual Task get_Task();
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.UnitTestFramework.Initialization.InitialExplorationTask : object {
    [CompilerGeneratedAttribute]
private Task <Task>k__BackingField;
    public Task Task { get; }
    public InitialExplorationTask(ISolution solution, IUnitTestExplorationFacade explorationFacade, IUnitTestingInitializationAwaiter utReadyTask, ILogger logger);
    [CompilerGeneratedAttribute]
public sealed virtual Task get_Task();
}
public interface JetBrains.ReSharper.UnitTestFramework.Initialization.IUnitTestingInitializationAwaiter {
    [NotNullAttribute]
public Task Task { get; }
    public abstract virtual Task get_Task();
}
public interface JetBrains.ReSharper.UnitTestFramework.Initialization.IUnitTestingInitTask {
    [NotNullAttribute]
public Task Task { get; }
    public abstract virtual Task get_Task();
}
public interface JetBrains.ReSharper.UnitTestFramework.Initialization.IWaitForCachesTask {
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.UnitTestFramework.Initialization.UnitTestingReadyTask : object {
    [CompilerGeneratedAttribute]
private Task <Task>k__BackingField;
    public Task Task { get; }
    public UnitTestingReadyTask(IEnumerable`1<IUnitTestingInitTask> unitTestingInitTasks);
    [CompilerGeneratedAttribute]
public sealed virtual Task get_Task();
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.UnitTestFramework.Initialization.WaitForPsiCachesTask : object {
    [CompilerGeneratedAttribute]
private Task <Task>k__BackingField;
    public Task Task { get; }
    public WaitForPsiCachesTask(Lifetime lifetime, IShellLocks shellLocks, ISolutionLoadTasksScheduler solutionLoadScheduler, IPsiCachesState psiCaches);
    [CompilerGeneratedAttribute]
public sealed virtual Task get_Task();
}
public class JetBrains.ReSharper.UnitTestFramework.InvalidProvider : object {
    public static IUnitTestProvider Instance;
    public string ID { get; }
    public string Name { get; }
    private static InvalidProvider();
    public sealed virtual string get_ID();
    public sealed virtual string get_Name();
    public sealed virtual bool IsElementOfKind(IDeclaredElement declaredElement, UnitTestElementKind elementKind);
    public sealed virtual bool IsElementOfKind(IUnitTestElement element, UnitTestElementKind elementKind);
    public sealed virtual bool IsSupported(IHostProvider hostProvider, IProject project, TargetFrameworkId targetFrameworkId);
    public sealed virtual bool IsSupported(IProject project, TargetFrameworkId targetFrameworkId);
    public sealed virtual bool SupportsResultEventsForParentOf(IUnitTestElement element);
    public sealed virtual IUnitTestRunStrategy GetRunStrategy(IUnitTestElement element, IHostProvider hostProvider);
}
public interface JetBrains.ReSharper.UnitTestFramework.IUnitTestingFacade {
    [NotNullAttribute]
public IShellLocks Locks { get; }
    [NotNullAttribute]
public ISolution Solution { get; }
    [NotNullAttribute]
public Task Initialized { get; }
    [NotNullAttribute]
public IUnitTestElementRepository ElementRepository { get; }
    [NotNullAttribute]
public IByParentCache ByParentCache { get; }
    [NotNullAttribute]
public IUnitTestResultManager ResultManager { get; }
    [NotNullAttribute]
public IUnitTestSessionRepository SessionRepository { get; }
    [NotNullAttribute]
public IUnitTestSessionManager SessionManager { get; }
    [NotNullAttribute]
public IUnitTestLaunchManager LaunchManager { get; }
    [NotNullAttribute]
public IUnitTestingSettings Settings { get; }
    [NotNullAttribute]
public IUnitTestingTypeCache TypeCache { get; }
    [NotNullAttribute]
public IUnitTestingProjectCache ProjectCache { get; }
    [NotNullAttribute]
public IUnitTestingProviderCache ProviderCache { get; }
    public abstract virtual IShellLocks get_Locks();
    public abstract virtual ISolution get_Solution();
    public abstract virtual Task get_Initialized();
    public abstract virtual IUnitTestElementRepository get_ElementRepository();
    public abstract virtual IByParentCache get_ByParentCache();
    public abstract virtual IUnitTestResultManager get_ResultManager();
    public abstract virtual IUnitTestSessionRepository get_SessionRepository();
    public abstract virtual IUnitTestSessionManager get_SessionManager();
    public abstract virtual IUnitTestLaunchManager get_LaunchManager();
    public abstract virtual IUnitTestingSettings get_Settings();
    public abstract virtual IUnitTestingTypeCache get_TypeCache();
    public abstract virtual IUnitTestingProjectCache get_ProjectCache();
    public abstract virtual IUnitTestingProviderCache get_ProviderCache();
    [NotNullAttribute]
public abstract virtual T Get();
}
public interface JetBrains.ReSharper.UnitTestFramework.IUnitTestingLocks {
    [NotNullAttribute]
public ISync ContentLock { get; }
    [NotNullAttribute]
public IInterruptionSource InterruptOnReadRequest { get; }
    public abstract virtual ISync get_ContentLock();
    public abstract virtual bool HasReadAccess();
    public abstract virtual bool HasUpgradableReadAccess();
    public abstract virtual bool HasWriteAccess();
    public abstract virtual IInterruptionSource get_InterruptOnReadRequest();
}
[ZoneDefinitionAttribute]
[ZoneDefinitionConfigurableFeatureAttribute("Unit Testing", "Unit test runner, explorer and unit test framework related features in code editor", "False")]
[ZoneLicenseAttribute("2891987611347207505191127652560015143097556724128711558977")]
public interface JetBrains.ReSharper.UnitTestFramework.IUnitTestingZone {
}
public interface JetBrains.ReSharper.UnitTestFramework.IUnitTestProvider {
    public string ID { get; }
    public string Name { get; }
    public abstract virtual string get_ID();
    public abstract virtual string get_Name();
    public abstract virtual bool IsElementOfKind(IDeclaredElement declaredElement, UnitTestElementKind elementKind);
    public abstract virtual bool IsElementOfKind(IUnitTestElement element, UnitTestElementKind elementKind);
    public abstract virtual bool IsSupported(IHostProvider hostProvider, IProject project, TargetFrameworkId targetFrameworkId);
    public abstract virtual bool IsSupported(IProject project, TargetFrameworkId targetFrameworkId);
    public abstract virtual bool SupportsResultEventsForParentOf(IUnitTestElement element);
    [NotNullAttribute]
public abstract virtual IUnitTestRunStrategy GetRunStrategy(IUnitTestElement element, IHostProvider hostProvider);
}
public interface JetBrains.ReSharper.UnitTestFramework.IUnitTestProviderManager {
    [NotNullAttribute]
public ISimpleSignal ProvidersChanged { get; }
    [CanBeNullAttribute]
public abstract virtual IUnitTestProvider GetById(string id);
    [CanBeNullAttribute]
public abstract virtual IUnitTestProvider GetByType(Type type);
    [NotNullAttribute]
[ItemNotNullAttribute]
public abstract virtual IEnumerable`1<IUnitTestProvider> GetProviders();
    [NotNullAttribute]
[ItemNotNullAttribute]
public abstract virtual IEnumerable`1<IUnitTestProvider> GetEnabledProviders();
    public abstract virtual bool IsProviderEnabled(IUnitTestProvider provider);
    public abstract virtual void EnableProvider(IUnitTestProvider provider);
    public abstract virtual void DisableProvider(IUnitTestProvider provider);
    public abstract virtual ISimpleSignal get_ProvidersChanged();
}
[MigrateSettingsAttribute]
public class JetBrains.ReSharper.UnitTestFramework.Migrations.EnableDisabledProvidersMigration : object {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Migrations.EnableDisabledProvidersMigration/<GetEntriesToMigrate>d__0")]
public sealed virtual IEnumerable`1<SettingsEntry> GetEntriesToMigrate(ISettingsSchema schema);
    public sealed virtual IEnumerable`1<SettingsKey> GetKeysToMigrate(ISettingsSchema schema);
    public sealed virtual void Migrate(IContextBoundSettingsStoreImplementation store);
}
[MigrateSettingsAttribute]
public class JetBrains.ReSharper.UnitTestFramework.Migrations.MigrateCheckForOrphanedProcessesSetting : object {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Migrations.MigrateCheckForOrphanedProcessesSetting/<GetEntriesToMigrate>d__0")]
public sealed virtual IEnumerable`1<SettingsEntry> GetEntriesToMigrate(ISettingsSchema schema);
    public sealed virtual IEnumerable`1<SettingsKey> GetKeysToMigrate(ISettingsSchema schema);
    public sealed virtual void Migrate(IContextBoundSettingsStoreImplementation store);
}
[MigrateSettingsAttribute]
public class JetBrains.ReSharper.UnitTestFramework.Migrations.MigrateEnvironmentVariablesSetting : object {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Migrations.MigrateEnvironmentVariablesSetting/<GetEntriesToMigrate>d__0")]
public sealed virtual IEnumerable`1<SettingsEntry> GetEntriesToMigrate(ISettingsSchema schema);
    public sealed virtual IEnumerable`1<SettingsKey> GetKeysToMigrate(ISettingsSchema schema);
    public sealed virtual void Migrate(IContextBoundSettingsStoreImplementation store);
}
public class JetBrains.ReSharper.UnitTestFramework.Persistence.InvalidTypeException : PersistenceException {
    public InvalidTypeException(string message);
    public InvalidTypeException(string message, Exception innerException);
    protected InvalidTypeException(SerializationInfo info, StreamingContext context);
}
public interface JetBrains.ReSharper.UnitTestFramework.Persistence.IQueryResult {
    [NotNullAttribute]
public IReadOnlySet`1<Int32`1<IUnitTestElement>> Ids { get; }
    public abstract virtual IReadOnlySet`1<Int32`1<IUnitTestElement>> get_Ids();
    public abstract virtual bool Any();
}
public interface JetBrains.ReSharper.UnitTestFramework.Persistence.IUnitTestElementRepository {
    [CanBeNullAttribute]
public abstract virtual IUnitTestElement GetBy(Int32`1<IUnitTestElement> id);
    [NotNullAttribute]
public abstract virtual Task`1<IUnitTestTransactionCommitResult> BeginTransaction(Action`1<IUnitTestTransaction> runBeforeCommit, CancellationToken ct);
    public abstract virtual void Clear();
    [NotNullAttribute]
[ItemNotNullAttribute]
public abstract virtual IQueryResult Query(IUnitTestElementCriterion criterion);
}
public interface JetBrains.ReSharper.UnitTestFramework.Persistence.IUnitTestElementStore {
}
public interface JetBrains.ReSharper.UnitTestFramework.Persistence.IUnitTestTransaction {
    [NotNullAttribute]
public Guid Id { get; }
    [NotNullAttribute]
public Lifetime Lifetime { get; }
    [NotNullAttribute]
public ulong CommittedAt { get; }
    public abstract virtual Guid get_Id();
    public abstract virtual Lifetime get_Lifetime();
    public abstract virtual ulong get_CommittedAt();
    [CanBeNullAttribute]
public abstract virtual IUnitTestElement GetBy(Int32`1<IUnitTestElement> id);
    [NotNullAttribute]
[ItemNotNullAttribute]
public abstract virtual IEnumerable`1<IUnitTestElement> Query(IUnitTestElementCriterion criterion);
    [NotNullAttribute]
public abstract virtual Task`1<IUnitTestTransactionCommitResult> Schedule(Action`1<IUnitTestTransaction> runBeforeCommit);
    public abstract virtual void Create(IUnitTestElement element);
    public abstract virtual void Update(IUnitTestElement element);
    public abstract virtual void Delete(IUnitTestElement element);
    [NotNullAttribute]
public abstract virtual IUnitTestTransactionCommitResult Commit();
}
public interface JetBrains.ReSharper.UnitTestFramework.Persistence.IUnitTestTransactionCommitResult {
    [NotNullAttribute]
public ICommitStats SubmittedCount { get; }
    [NotNullAttribute]
public ICommitStats CommittedCount { get; }
    public bool WasAborted { get; }
    public int WasInterrupted { get; }
    public abstract virtual ICommitStats get_SubmittedCount();
    public abstract virtual ICommitStats get_CommittedCount();
    public abstract virtual bool get_WasAborted();
    public abstract virtual int get_WasInterrupted();
}
public interface JetBrains.ReSharper.UnitTestFramework.Persistence.IWithId`1 {
    public TId Id { get; public set; }
    public abstract virtual TId get_Id();
    public abstract virtual void set_Id(TId value);
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.Caches.ByElementTypeCache : OneToOneLevelDbCache`1<Type> {
    public ByElementTypeCache(Lifetime lifetime, IPersistentIndexManager persistentIndexManager);
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.Caches.ByNaturalIdCache : object {
    [NotNullAttribute]
private ExplicitCommitMap`2<Int32`1<IUnitTestElement>, UnitTestElementId> myForward;
    [NotNullAttribute]
private ExplicitCommitMap`2<UnitTestElementId, Int32`1<IUnitTestElement>> myBackward;
    private int myLastId;
    public ByNaturalIdCache(Lifetime lifetime, IPersistentIndexManager pim);
    private int LoadLastId();
    public sealed virtual Int32`1<IUnitTestElement> GenerateId();
    public UnitTestElementId GetBy(Int32`1<IUnitTestElement> id);
    public Nullable`1<Int32`1<IUnitTestElement>> GetBy(UnitTestElementId naturalId);
    public sealed virtual void ElementCreated(IUnitTestElement element);
    public sealed virtual void ElementUpdated(IUnitTestElement element, UnitTestElementChanges changes);
    public sealed virtual void ElementRemoved(IUnitTestElement element);
    public sealed virtual void Clear();
    public sealed virtual void Commit();
    public sealed virtual void Rollback();
    private sealed virtual override bool JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.Caches.IValidatableUnitTestElementCache.CheckIsConsistent(ISet`1<Int32`1<IUnitTestElement>> knownIds);
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.Caches.ByOwnCategoryCache : OneToSetLevelDbCache`2<UnitTestElementCategory, string> {
    [NotNullAttribute]
private IEnumerable`1<IUnitTestingCategoriesAttributeProvider> myAttributeProviders;
    public IEnumerable`1<string> Categories { get; }
    public IEnumerable`1<IClrTypeName> AttributeTypes { get; }
    public IconId Image { get; }
    public ByOwnCategoryCache(Lifetime lifetime, IPersistentIndexManager persistentIndexManager, IEnumerable`1<IUnitTestingCategoriesAttributeProvider> attributeProviders);
    public sealed virtual IEnumerable`1<string> get_Categories();
    public sealed virtual IEnumerable`1<IClrTypeName> get_AttributeTypes();
    public sealed virtual IconId get_Image();
    [CanBeNullAttribute]
public IReadOnlySet`1<UnitTestElementCategory> GetCategories(Int32`1<IUnitTestElement> id);
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.Caches.ByParentCache : OneToOneLevelDbCache`1<Int32`1<IUnitTestElement>> {
    public ByParentCache(Lifetime lifetime, IPersistentIndexManager pim);
    private static Int32`1<IUnitTestElement> GetValidParentIdIfPresent(IUnitTestElement e);
    public sealed virtual IReadOnlySet`1<Int32`1<IUnitTestElement>> GetAllParentIds();
    public sealed virtual Int32`1<IUnitTestElement> GetParentId(Int32`1<IUnitTestElement> id);
    public sealed virtual IReadOnlySet`1<Int32`1<IUnitTestElement>> GetChildrenIds(Int32`1<IUnitTestElement> id);
    private sealed virtual override bool JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.Caches.IValidatableUnitTestElementCache.CheckIsConsistent(ISet`1<Int32`1<IUnitTestElement>> knownIds);
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.Caches.ByProjectCache : OneToOneLevelDbCache`1<string> {
    public ByProjectCache(Lifetime lifetime, IPersistentIndexManager persistentIndexManager);
    public bool HasAny(IProject arg);
    public IReadOnlySet`1<Int32`1<IUnitTestElement>> GetBy(IProject arg);
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.Caches.ByProjectFileCache : OneToSetLevelDbCache`1<string> {
    public ByProjectFileCache(Lifetime lifetime, IPersistentIndexManager persistentIndexManager);
    public sealed virtual bool HasAny(IProjectFile arg);
    public IReadOnlySet`1<Int32`1<IUnitTestElement>> GetBy(IProjectFile arg);
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.Caches.ByProviderCache : OneToOneLevelDbCache`1<string> {
    public ByProviderCache(Lifetime lifetime, IPersistentIndexManager persistentIndexManager);
    public bool HasAny(IUnitTestProvider arg);
    public IReadOnlySet`1<Int32`1<IUnitTestElement>> GetBy(IUnitTestProvider arg);
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.Caches.ByShortNameCache : OneToOneLevelDbCache`1<string> {
    public ByShortNameCache(Lifetime lifetime, IPersistentIndexManager persistentIndexManager);
    [NotNullAttribute]
public sealed virtual IEnumerable`1<string> GetNames();
    public sealed virtual bool CanElementExist(string name);
    public sealed virtual bool CanHaveNameCollisions(string name);
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.Caches.ByTargetFrameworkIdCache : OneToOneLevelDbCache`1<TargetFrameworkId> {
    public ByTargetFrameworkIdCache(Lifetime lifetime, IPersistentIndexManager persistentIndexManager);
    public sealed virtual TargetFrameworkId GetTargetFrameworkId(Int32`1<IUnitTestElement> id);
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.Caches.ByTestIdCache : OneToOneLevelDbCache`1<string> {
    public ByTestIdCache(Lifetime lifetime, IPersistentIndexManager persistentIndexManager);
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.Caches.ElementStateCache : object {
    [NotNullAttribute]
private Marshaller myMarshaller;
    [NotNullAttribute]
private ExplicitCommitMap`2<Int32`1<IUnitTestElement>, IUnitTestElement> myStore;
    [CompilerGeneratedAttribute]
private NotifyCollectionChangedEventHandler CollectionChanged;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    private int myCachedCount;
    private HashSet`1<Int32`1<IUnitTestElement>> myCachedKeys;
    public ISync Lock { get; }
    public IBindableView ParentView { get; }
    public IBindableView RootView { get; }
    public int Count { get; }
    public bool IsEvaluated { get; }
    private int JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView<JetBrains.Util.dataStructures.TypedIntrinsics.Int32<JetBrains.ReSharper.UnitTestFramework.Elements.IUnitTestElement>>.Count { get; }
    private int JetBrains.Application.UI.BindableLinq.Interfaces.IBindableSet<JetBrains.Util.dataStructures.TypedIntrinsics.Int32<JetBrains.ReSharper.UnitTestFramework.Elements.IUnitTestElement>>.Count { get; }
    private Int32`1<IUnitTestElement> JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView<JetBrains.Util.dataStructures.TypedIntrinsics.Int32<JetBrains.ReSharper.UnitTestFramework.Elements.IUnitTestElement>>.Item { get; }
    public ElementStateCache(Lifetime lifetime, ISolution solution, IPersistentIndexManager pim, IObjectActivator activator);
    protected ElementStateCache(Lifetime lifetime);
    public sealed virtual IUnitTestElement Load(Int32`1<IUnitTestElement> id);
    public sealed virtual IEnumerable`1<Int32`1<IUnitTestElement>> EnumerateIds();
    public sealed virtual void ElementCreated(IUnitTestElement element);
    public sealed virtual void ElementUpdated(IUnitTestElement element, UnitTestElementChanges changes);
    public sealed virtual void ElementRemoved(IUnitTestElement element);
    public sealed virtual void Clear();
    public sealed virtual void Commit();
    public sealed virtual void Rollback();
    [CompilerGeneratedAttribute]
public sealed virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual ISync get_Lock();
    public sealed virtual IBindableView get_ParentView();
    public sealed virtual IBindableView get_RootView();
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsEvaluated();
    public sealed virtual bool Contains(Int32`1<IUnitTestElement> item);
    public sealed virtual IEnumerator`1<Int32`1<IUnitTestElement>> GetEnumerator();
    public sealed virtual bool Contains(object item);
    private sealed virtual override void JetBrains.Application.UI.BindableLinq.Interfaces.IBindable.Evaluate();
    private sealed virtual override void JetBrains.Application.UI.BindableLinq.Dependencies.IAcceptsDependencies.AcceptDependency(IDependencyDefinition definition);
    private sealed virtual override int JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView.IndexOf(object item);
    private sealed virtual override int JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView<JetBrains.Util.dataStructures.TypedIntrinsics.Int32<JetBrains.ReSharper.UnitTestFramework.Elements.IUnitTestElement>>.get_Count();
    private sealed virtual override int JetBrains.Application.UI.BindableLinq.Interfaces.IBindableSet<JetBrains.Util.dataStructures.TypedIntrinsics.Int32<JetBrains.ReSharper.UnitTestFramework.Elements.IUnitTestElement>>.get_Count();
    private sealed virtual override Int32`1<IUnitTestElement> JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView<JetBrains.Util.dataStructures.TypedIntrinsics.Int32<JetBrains.ReSharper.UnitTestFramework.Elements.IUnitTestElement>>.get_Item(int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override IEnumerator`1<Int32`1<IUnitTestElement>> JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView<JetBrains.Util.dataStructures.TypedIntrinsics.Int32<JetBrains.ReSharper.UnitTestFramework.Elements.IUnitTestElement>>.GetEnumeratorUnsafe();
    private sealed virtual override void System.IDisposable.Dispose();
    [CompilerGeneratedAttribute]
private void <.ctor>b__21_0(UnitTestElementsCreatedEvent e);
    [CompilerGeneratedAttribute]
private void <.ctor>b__21_1(UnitTestElementsRemovedEvent e);
    [CompilerGeneratedAttribute]
private void <.ctor>b__21_2(UnitTestElementsRemovedEvent e);
}
[ExtensionAttribute]
internal static class JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.Caches.ExplicitCommitMapExtensions : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static ExplicitCommitMap`2<TKey, TValue> ToExplicitCommitMap(OptimizedPersistentSortedMap`2<TKey, TValue> map);
    [ExtensionAttribute]
public static void AddToSetBy(ExplicitCommitMap`2<TKey, TCollection> map, TKey key, TItem item);
    [ExtensionAttribute]
public static void AddEmptySetBy(ExplicitCommitMap`2<TKey, TCollection> map, TKey key, TItem item);
    [ExtensionAttribute]
public static void RemoveFromSetBy(ExplicitCommitMap`2<TKey, TCollection> map, TKey key, TItem item);
    [ExtensionAttribute]
[NotNullAttribute]
public static TCollection GetOrCreateValue(ExplicitCommitMap`2<TKey, TCollection> map, TKey key, Func`1<CachedSet`1<TItem>> func);
}
public interface JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.Caches.IByParentCache {
    [NotNullAttribute]
public abstract virtual IReadOnlySet`1<Int32`1<IUnitTestElement>> GetChildrenIds(Int32`1<IUnitTestElement> id);
    [NotNullAttribute]
public abstract virtual IReadOnlySet`1<Int32`1<IUnitTestElement>> GetAllParentIds();
    public abstract virtual Int32`1<IUnitTestElement> GetParentId(Int32`1<IUnitTestElement> id);
}
public interface JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.Caches.IByProjectFileCache {
    public abstract virtual bool HasAny(IProjectFile projectFile);
}
public interface JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.Caches.IByShortNameCache {
    [NotNullAttribute]
public abstract virtual IEnumerable`1<string> GetNames();
    [NotNullAttribute]
public abstract virtual IReadOnlySet`1<Int32`1<IUnitTestElement>> GetBy(string shortName);
    public abstract virtual bool CanElementExist(string shortName);
    public abstract virtual bool CanHaveNameCollisions(string shortName);
}
public interface JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.Caches.IByTargetFrameworkCache {
    [CanBeNullAttribute]
public abstract virtual TargetFrameworkId GetTargetFrameworkId(Int32`1<IUnitTestElement> id);
}
internal interface JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.Caches.IUnitTestElementCache {
    public abstract virtual void ElementCreated(IUnitTestElement element);
    public abstract virtual void ElementUpdated(IUnitTestElement element, UnitTestElementChanges changes);
    public abstract virtual void ElementRemoved(IUnitTestElement element);
    public abstract virtual void Clear();
    public abstract virtual void Commit();
    public abstract virtual void Rollback();
}
internal interface JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.Caches.IUnitTestElementCache`1 {
    [NotNullAttribute]
public abstract virtual IReadOnlySet`1<Int32`1<IUnitTestElement>> GetBy(TKey key);
    public abstract virtual bool HasAny(TKey key);
}
internal interface JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.Caches.IValidatableUnitTestElementCache {
    public abstract virtual bool CheckIsConsistent(ISet`1<Int32`1<IUnitTestElement>> knownIds);
}
internal abstract class JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.Caches.OneToOneLevelDbCache`1 : UnitTestElementCache {
    [NotNullAttribute]
protected ExplicitCommitMap`2<TKey, CachedIds> myBackward;
    [NotNullAttribute]
protected ExplicitCommitMap`2<Int32`1<IUnitTestElement>, TKey> myForward;
    [NotNullAttribute]
private Func`2<IUnitTestElement, TKey> myKeySelector;
    [NotNullAttribute]
private UnitTestElementChanges myChangesToTrack;
    [NotNullAttribute]
private ILogger myLogger;
    protected OneToOneLevelDbCache`1(Lifetime lifetime, IPersistentIndexManager persistentIndexManager, Func`2<IUnitTestElement, TKey> keySelector, IUnsafeMarshaller`1<TKey> keyMarshaller, UnitTestElementChanges changesToTrack);
    public sealed virtual void ElementCreated(IUnitTestElement element);
    public sealed virtual void ElementUpdated(IUnitTestElement element, UnitTestElementChanges changes);
    public sealed virtual void ElementRemoved(IUnitTestElement element);
    public sealed virtual void Clear();
    public sealed virtual void Commit();
    public sealed virtual void Rollback();
    public sealed virtual IReadOnlySet`1<Int32`1<IUnitTestElement>> GetBy(TKey key);
    public sealed virtual bool HasAny(TKey key);
    private sealed virtual override bool JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.Caches.IValidatableUnitTestElementCache.CheckIsConsistent(ISet`1<Int32`1<IUnitTestElement>> knownIds);
}
internal abstract class JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.Caches.OneToSetLevelDbCache`1 : OneToSetLevelDbCache`2<TKey, TKey> {
    protected OneToSetLevelDbCache`1(Lifetime lifetime, IPersistentIndexManager persistentIndexManager, Func`2<IUnitTestElement, IEnumerable`1<TKey>> keysSelector, IUnsafeMarshaller`1<TKey> keyMarshaller, UnitTestElementChanges changesToTrack);
}
internal abstract class JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.Caches.OneToSetLevelDbCache`2 : UnitTestElementCache {
    [NotNullAttribute]
protected ExplicitCommitMap`2<TQueryKey, CachedIds> myBackward;
    [NotNullAttribute]
protected ExplicitCommitMap`2<Int32`1<IUnitTestElement>, CachedSet`1<TKey>> myForward;
    [NotNullAttribute]
protected Func`2<IUnitTestElement, IEnumerable`1<TKey>> myKeysSelector;
    [NotNullAttribute]
protected Func`2<TKey, TQueryKey> myQueryKeySelector;
    [NotNullAttribute]
protected UnitTestElementChanges myChangesToTrack;
    [NotNullAttribute]
protected ILogger myLogger;
    protected OneToSetLevelDbCache`2(Lifetime lifetime, IPersistentIndexManager persistentIndexManager, Func`2<IUnitTestElement, IEnumerable`1<TKey>> keysSelector, Func`2<TKey, TQueryKey> queryKeySelector, IUnsafeMarshaller`1<TKey> keyMarshaller, IUnsafeMarshaller`1<TQueryKey> backwardKeyMarshaller, UnitTestElementChanges changesToTrack);
    public sealed virtual void ElementCreated(IUnitTestElement element);
    public sealed virtual void ElementUpdated(IUnitTestElement element, UnitTestElementChanges changes);
    public sealed virtual void ElementRemoved(IUnitTestElement element);
    public sealed virtual void Clear();
    public sealed virtual void Commit();
    public sealed virtual void Rollback();
    public sealed virtual IReadOnlySet`1<Int32`1<IUnitTestElement>> GetBy(TQueryKey key);
    public sealed virtual bool HasAny(TQueryKey key);
    private sealed virtual override bool JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.Caches.IValidatableUnitTestElementCache.CheckIsConsistent(ISet`1<Int32`1<IUnitTestElement>> knownIds);
}
[ExtensionAttribute]
internal static class JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.Caches.PersistentSortedMapExtension : object {
    [ExtensionAttribute]
public static void RemoveFromSetBy(OptimizedPersistentSortedMap`2<TKey, TCollection> map, TKey key, TItem item);
    [ExtensionAttribute]
public static void AddToSetBy(OptimizedPersistentSortedMap`2<TKey, TCollection> map, TKey key, TItem item);
    [ExtensionAttribute]
public static void AddEmptySetBy(OptimizedPersistentSortedMap`2<TKey, TCollection> map, TKey key, TItem item);
}
public abstract class JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.Caches.UnitTestElementCache : object {
}
public class JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.CommitResult : object {
    [NotNullAttribute]
public static CommitResult Empty;
    [CompilerGeneratedAttribute]
private ICommitStats <SubmittedCount>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommitStats <CommittedCount>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WasAborted>k__BackingField;
    [CompilerGeneratedAttribute]
private int <WasInterrupted>k__BackingField;
    public ICommitStats SubmittedCount { get; }
    public ICommitStats CommittedCount { get; }
    public bool WasAborted { get; }
    public int WasInterrupted { get; }
    public CommitResult(bool wasAborted, int wasInterrupted, int submittedForCreate, int submittedForUpdate, int submittedForDelete, int created, int updated, int deleted);
    private static CommitResult();
    [CompilerGeneratedAttribute]
public sealed virtual ICommitStats get_SubmittedCount();
    [CompilerGeneratedAttribute]
public sealed virtual ICommitStats get_CommittedCount();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_WasAborted();
    [CompilerGeneratedAttribute]
public sealed virtual int get_WasInterrupted();
    public virtual string ToString();
}
internal interface JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.IAggregateRoot`2 {
    public int Count { get; }
    [CanBeNullAttribute]
public abstract virtual T Load(TId id);
    public abstract virtual IEnumerable`1<TId> EnumerateIds();
    public abstract virtual int get_Count();
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.Intercept.AggregatingPropertyInterceptorFactory : object {
    [NotNullAttribute]
private IPropertyInterceptor myInterceptor;
    [NotNullAttribute]
private InterruptibleLazy`1<ISet`1<PropertyInfo>> myInterceptedProperties;
    public AggregatingPropertyInterceptorFactory(ISolution solution);
    public sealed virtual bool ShouldIntercept(PropertyInfo propertyInfo);
    public sealed virtual IPropertyInterceptor Build();
}
public interface JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.Intercept.IHavePropertyInterceptor {
    [NotNullAttribute]
public IPropertyInterceptor Interceptor { get; public set; }
    public abstract virtual IPropertyInterceptor get_Interceptor();
    public abstract virtual void set_Interceptor(IPropertyInterceptor value);
}
internal interface JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.Intercept.IPropertyInterceptingProxyFactory {
    [NotNullAttribute]
public abstract virtual object CreateInstance(Type type);
}
public interface JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.Intercept.IPropertyInterceptor {
    public abstract virtual object InterceptGet(object target, string propertyName, object value);
    public abstract virtual object InterceptSet(object target, string propertyName, object value);
}
internal interface JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.Intercept.IPropertyInterceptorFactory {
    public abstract virtual bool ShouldIntercept(PropertyInfo propertyInfo);
    [NotNullAttribute]
public abstract virtual IPropertyInterceptor Build();
}
internal interface JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.Intercept.IPropertyInterceptorMarker {
    [NotNullAttribute]
public Type Type { get; }
    [NotNullAttribute]
public PropertyInfo Property { get; }
    public abstract virtual Type get_Type();
    public abstract virtual PropertyInfo get_Property();
}
[SolutionComponentAttribute("0")]
internal class JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.Intercept.PropertyInterceptingProxyFactory : object {
    [NotNullAttribute]
private static MethodInfo GetInterceptorMethod;
    [NotNullAttribute]
private static MethodInfo InterceptGetMethod;
    [NotNullAttribute]
private static MethodInfo InterceptSetMethod;
    [NotNullAttribute]
private static FieldInfo InvokeImplementationField;
    [NotNullAttribute]
private IPropertyInterceptorFactory myInterceptorFactory;
    [NotNullAttribute]
private ConcurrentDictionary`2<Type, Type> myKnownProxyTypes;
    public PropertyInterceptingProxyFactory(IPropertyInterceptorFactory interceptorFactory);
    private static PropertyInterceptingProxyFactory();
    public sealed virtual object CreateInstance(Type type);
    public Type CreateProxyType(Type baseType);
    private Type BuildType(Type baseType);
    private void Implement(TypeBuilder typeBuilder);
    private static void ImplementGetAutoProperty(TypeBuilder typeBuilder, PropertyInfo property, FieldInfo field);
    private static void ImplementSetAutoProperty(TypeBuilder typeBuilder, PropertyInfo property, FieldInfo field);
    private IEnumerable`1<PropertyInfo> GetPropertiesToProxify(Type type);
    private void CreateInterceptedProperty(TypeBuilder typeBuilder, PropertyInfo property);
    private void ImplementSetIntercepted(TypeBuilder typeBuilder, PropertyInfo property);
    private void ImplementGetIntercepted(TypeBuilder typeBuilder, PropertyInfo property);
    internal static MethodBuilder GenerateMethodSignature(TypeBuilder typeBuilder, MethodInfo method);
    private static Type ResolveTypeConstraint(MethodInfo method, Type typeConstraint);
    private static Type BuildTypeConstraint(Type typeConstraint, Type declaringType);
    [CompilerGeneratedAttribute]
internal static bool <GetPropertiesToProxify>g__IsProxifiable|13_0(MethodInfo method);
    [CompilerGeneratedAttribute]
private bool <GetPropertiesToProxify>b__13_1(PropertyInfo pi);
}
[ExtensionAttribute]
internal static class JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.Intercept.PropertyInterceptingProxyFactoryExtensions : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static T CreateInstance(IPropertyInterceptingProxyFactory factory);
}
public abstract class JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.Intercept.PropertyInterceptor : object {
    [NotNullAttribute]
public static object InvokeImplementation;
    private static PropertyInterceptor();
    public abstract virtual object InterceptGet(object target, string propertyName, object value);
    public abstract virtual object InterceptSet(object target, string propertyName, object value);
}
public abstract class JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.Intercept.PropertyInterceptor`2 : PropertyInterceptor {
    [CompilerGeneratedAttribute]
private PropertyInfo <Property>k__BackingField;
    public Type Type { get; }
    public PropertyInfo Property { get; }
    protected PropertyInterceptor`2(Expression`1<Func`2<T, TValue>> propertySelector);
    public sealed virtual Type get_Type();
    [CompilerGeneratedAttribute]
public sealed virtual PropertyInfo get_Property();
    public virtual object InterceptGet(object target, string propertyName, object value);
    public virtual object InterceptSet(object target, string propertyName, object value);
    protected abstract virtual TValue InterceptGet(T entity, TValue value);
    protected abstract virtual TValue InterceptSet(T entity, TValue value);
}
public class JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.Intercept.ProxyGenerationException : Exception {
    public ProxyGenerationException(string message);
    public ProxyGenerationException(string message, Exception innerException);
}
internal interface JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.IObjectActivator {
    [NotNullAttribute]
public abstract virtual object CreateInstance(Type type);
}
internal interface JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.IQueryResultCache {
    [NotNullAttribute]
public abstract virtual IQueryResult GetOrAdd(IUnitTestElementCriterion criterion, Func`2<IUnitTestElementCriterion, IQueryResult> factory);
}
internal interface JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.IUnitTestElementIdGenerator {
    public abstract virtual Int32`1<IUnitTestElement> GenerateId();
}
internal interface JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.IUnitTestElementLoader {
}
internal interface JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.IUnitTestElementPersister {
    public abstract virtual UnitTestElementChanges DetectChanges(IUnitTestElement transient, IUnitTestElement persisted);
}
internal interface JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.IUnitTestElementPropertyCoalescerCache {
    [NotNullAttribute]
[ItemNotNullAttribute]
public abstract virtual IEnumerable`1<IUnitTestElementPropertyCoalescer> GetCoalescers(Type elementType);
}
public interface JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.IUnitTestTransactionDispatcher {
    [NotNullAttribute]
public abstract virtual Task`1<IUnitTestTransactionCommitResult> Post(IUnitTestTransaction tx, TaskCreationOptions options);
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.LazyLoading.UnitTestElementChildrenInterceptor : PropertyInterceptor`2<UnitTestElement, IJetSet`1<IUnitTestElement>> {
    [NotNullAttribute]
private ByParentCache myByParentCache;
    [NotNullAttribute]
private IUnitTestElementLoader myLoader;
    public UnitTestElementChildrenInterceptor(Lifetime lifetime, ByParentCache byParentCache, IUnitTestElementLoader loader);
    protected virtual IJetSet`1<IUnitTestElement> InterceptGet(UnitTestElement entity, IJetSet`1<IUnitTestElement> children);
    protected virtual IJetSet`1<IUnitTestElement> InterceptSet(UnitTestElement entity, IJetSet`1<IUnitTestElement> value);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_1(UnitTestElementUpdateEvent evt);
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.LazyLoading.UnitTestElementNaturalIdInterceptor : PropertyInterceptor`2<UnitTestElement, UnitTestElementId> {
    [NotNullAttribute]
private ByNaturalIdCache myByNaturalIdCache;
    public UnitTestElementNaturalIdInterceptor(ByNaturalIdCache byNaturalIdCache);
    protected virtual UnitTestElementId InterceptGet(UnitTestElement entity, UnitTestElementId naturalId);
    protected virtual UnitTestElementId InterceptSet(UnitTestElement entity, UnitTestElementId value);
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.LazyLoading.UnitTestElementOwnCategoriesInterceptor : PropertyInterceptor`2<UnitTestElement, IJetSet`1<UnitTestElementCategory>> {
    [NotNullAttribute]
private ByOwnCategoryCache myByCategoryCache;
    public UnitTestElementOwnCategoriesInterceptor(ByOwnCategoryCache byCategoryCache);
    protected virtual IJetSet`1<UnitTestElementCategory> InterceptGet(UnitTestElement entity, IJetSet`1<UnitTestElementCategory> categories);
    protected virtual IJetSet`1<UnitTestElementCategory> InterceptSet(UnitTestElement entity, IJetSet`1<UnitTestElementCategory> value);
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.LazyLoading.UnitTestElementParentInterceptor : PropertyInterceptor`2<UnitTestElement, IUnitTestElement> {
    [NotNullAttribute]
private ByParentCache myByParentCache;
    [NotNullAttribute]
private IUnitTestElementLoader myLoader;
    public UnitTestElementParentInterceptor(ByParentCache byParentCache, IUnitTestElementLoader loader);
    protected virtual IUnitTestElement InterceptGet(UnitTestElement entity, IUnitTestElement value);
    protected virtual IUnitTestElement InterceptSet(UnitTestElement entity, IUnitTestElement value);
}
public class JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.Marshalling.ClrTypeNameMarshaller : object {
    [NotNullAttribute]
private static ConditionalWeakTable`2<string, IClrTypeName> ourCache;
    private static ClrTypeNameMarshaller();
    public sealed virtual void Marshal(UnsafeWriter writer, IClrTypeName value);
    public sealed virtual IClrTypeName Unmarshal(UnsafeReader reader);
}
internal class JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.Marshalling.CollectionPropertyPersister`2 : object {
    [NotNullAttribute]
private PropertyInfo myPropertyInfo;
    [NotNullAttribute]
private IUnsafeMarshaller`1<TItem> myMarshaller;
    public CollectionPropertyPersister`2(PropertyInfo propertyInfo, IUnsafeMarshaller`1<TItem> marshaller);
    public sealed virtual void Write(UnsafeWriter writer, object parentObject);
    public sealed virtual void Read(UnsafeReader reader, object parentObject);
}
public static class JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.Marshalling.DelegateUtils : object {
    [NotNullAttribute]
public static T CreateCompatibleDelegate(object firstArgument, MethodInfo method);
}
internal class JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.Marshalling.EntityPersisterFactory : object {
    [NotNullAttribute]
private ISolution mySolution;
    [NotNullAttribute]
private IObjectActivator myActivator;
    [NotNullAttribute]
private ConcurrentDictionary`2<Type, object> myPersisters;
    public EntityPersisterFactory(ISolution solution, IObjectActivator activator);
    public sealed virtual IEntityPersister GetOrCreate(Type type);
    private object GetOrCreateInternal(Type type);
    [NotNullAttribute]
private IEntityPersister Build(Type type);
    private IMemberPersister GetPersisterForProperty(PropertyInfo pi);
    private object GetMarshallerForType(Type type, PersistAttribute attr);
    private static object CreateNullableMarshaller(object marshaller);
    private static object CreateArrayMarshaller(object marshaller);
    private static object CreateCollectionMarshaller(object marshaller);
    private static object CreateDynamicMarshaller(IEntityPersisterFactory factory, IObjectActivator activator);
    private static object CreateEnumMarshaller(object baseMarshaller);
    private static IMemberPersister CreatePersisterFromMarshaller(PropertyInfo pi, object marshaller);
    private static IMemberPersister ConstructCollectionPersister(PropertyInfo pi, object marshaller);
    private static IMemberPersister ConstructEntityPersister(PropertyInfo pi, object marshaller);
    private static IMemberPersister ConstructMemberPersister(PropertyInfo pi, object marshaller);
    private static IEntityPersister ConstructEntityPersister(IEnumerable`1<IMemberPersister> persisters);
}
internal class JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.Marshalling.EntityPropertyPersister`1 : object {
    [NotNullAttribute]
private PropertyInfo myPropertyInfo;
    [NotNullAttribute]
private IEntityPersister`1<T> myMarshaller;
    public EntityPropertyPersister`1(PropertyInfo propertyInfo, IEntityPersister`1<T> marshaller);
    public sealed virtual void Write(UnsafeWriter writer, object parentObject);
    public sealed virtual void Read(UnsafeReader reader, object parentObject);
}
internal class JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.Marshalling.EnumMarshaller`2 : object {
    [NotNullAttribute]
private IUnsafeMarshaller`1<TBase> myInner;
    public EnumMarshaller`2(IUnsafeMarshaller`1<TBase> baseMarshaller);
    public sealed virtual void Marshal(UnsafeWriter writer, TEnum value);
    public sealed virtual TEnum Unmarshal(UnsafeReader reader);
}
internal interface JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.Marshalling.IEntityPersister {
    public abstract virtual void Dehydrate(UnsafeWriter writer, object entity);
    public abstract virtual void Hydrate(UnsafeReader reader, object entity);
}
internal interface JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.Marshalling.IEntityPersister`1 {
}
internal interface JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.Marshalling.IEntityPersisterFactory {
    [NotNullAttribute]
public abstract virtual IEntityPersister GetOrCreate(Type type);
}
internal interface JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.Marshalling.IMemberPersister {
    public abstract virtual void Write(UnsafeWriter writer, object parentObject);
    public abstract virtual void Read(UnsafeReader reader, object parentObject);
}
[DerivedComponentsInstantiationRequirementAttribute("1")]
public interface JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.Marshalling.IUnitTestingMarshaller {
}
public interface JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.Marshalling.IUnitTestingMarshaller`1 {
}
internal class JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.Marshalling.NullableMarshaller`1 : object {
    [NotNullAttribute]
private IUnsafeMarshaller`1<TValue> myInner;
    public NullableMarshaller`1(IUnsafeMarshaller`1<TValue> baseMarshaller);
    public sealed virtual void Marshal(UnsafeWriter writer, Nullable`1<TValue> value);
    public sealed virtual Nullable`1<TValue> Unmarshal(UnsafeReader reader);
}
internal class JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.Marshalling.PersistAttributeBasedMarshaller`1 : object {
    [NotNullAttribute]
private IEntityPersisterFactory myPersisterFactory;
    [NotNullAttribute]
private IObjectActivator myObjectActivator;
    [NotNullAttribute]
private ConcurrentDictionary`2<string, Type> myCachedTypes;
    public PersistAttributeBasedMarshaller`1(IEntityPersisterFactory persisterFactory, IObjectActivator objectActivator);
    public sealed virtual void Marshal(UnsafeWriter writer, T value);
    public sealed virtual T Unmarshal(UnsafeReader reader);
}
internal class JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.Marshalling.PropertyPersister`1 : object {
    [NotNullAttribute]
private PropertyInfo myPropertyInfo;
    [NotNullAttribute]
private IUnsafeMarshaller`1<T> myMarshaller;
    public PropertyPersister`1(PropertyInfo propertyInfo, IUnsafeMarshaller`1<T> marshaller);
    public sealed virtual void Write(UnsafeWriter writer, object parentObject);
    public sealed virtual void Read(UnsafeReader reader, object parentObject);
}
[AttributeUsageAttribute("4")]
[BaseTypeRequiredAttribute("JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.Marshalling.IUnitTestingMarshaller`1")]
public class JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.Marshalling.UnitTestingMarshallerAttribute : ShellComponentAttribute {
    protected static Instantiation UnitTestingMarshallerInstantiation;
    [CompilerGeneratedAttribute]
private int <HashMixin>k__BackingField;
    public int HashMixin { get; }
    public UnitTestingMarshallerAttribute(Instantiation instantiation);
    public UnitTestingMarshallerAttribute(int mixin, Instantiation instantiation);
    [CompilerGeneratedAttribute]
public int get_HashMixin();
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.Marshalling.UnitTestingMarshallerExtensions : object {
    [ExtensionAttribute]
public static void WriteUnitTesting(UnsafeWriter writer, object value);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static T ReadUnitTesting(UnsafeReader reader);
    [ExtensionAttribute]
public static void WriteEnum(UnsafeWriter writer, T value);
    [ExtensionAttribute]
public static T ReadEnum(UnsafeReader reader);
    [NotNullAttribute]
private static UnitTestingSerializer GetRegistry();
}
[DefaultMemberAttribute("Item")]
[SolutionComponentAttribute("18")]
public class JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.Marshalling.UnitTestingSerializer : object {
    public static int NullId;
    [CompilerGeneratedAttribute]
private static UnitTestingSerializer <Instance>k__BackingField;
    private IDictionary`2<int, ReadDelegate`1<object>> myReaders;
    private IDictionary`2<Type, Pair`2<int, WriteDelegate`1<object>>> myWriters;
    [CanBeNullAttribute]
public static UnitTestingSerializer Instance { get; private set; }
    public Pair`2<int, WriteDelegate`1<object>> Item { get; }
    public ReadDelegate`1<object> Item { get; }
    public UnitTestingSerializer(Lifetime lifetime, IEnumerable`1<IUnitTestingMarshaller> marshallers);
    [CompilerGeneratedAttribute]
public static UnitTestingSerializer get_Instance();
    [CompilerGeneratedAttribute]
private static void set_Instance(UnitTestingSerializer value);
    public void Register(IUnitTestingMarshaller marshaller);
    public Pair`2<int, WriteDelegate`1<object>> get_Item(Type clazz);
    public ReadDelegate`1<object> get_Item(int typeHash);
    private int CalcHash(Type type, UnitTestingMarshallerAttribute attr);
    private Pair`2<int, WriteDelegate`1<object>> GetWriteDelegateFor(Type clazz);
    [CompilerGeneratedAttribute]
private void <.ctor>b__7_0();
}
public class JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.OnBeforeCommit : MulticastDelegate {
    public OnBeforeCommit(object object, IntPtr method);
    public virtual void Invoke(IUnitTestTransaction tx);
    public virtual IAsyncResult BeginInvoke(IUnitTestTransaction tx, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[SolutionComponentAttribute("0")]
internal class JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.ProxyInstanceActivator : object {
    [NotNullAttribute]
private IPropertyInterceptingProxyFactory myProxyFactory;
    public ProxyInstanceActivator(IPropertyInterceptingProxyFactory proxyFactory);
    public sealed virtual object CreateInstance(Type type);
}
public class JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.Query.ConjunctiveCriterion`1 : object {
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<ICriterion`1<T>> <Criteria>k__BackingField;
    [NotNullAttribute]
[ItemNotNullAttribute]
public IReadOnlyCollection`1<ICriterion`1<T>> Criteria { get; }
    public ConjunctiveCriterion`1(IReadOnlyCollection`1<ICriterion`1<T>> criteria);
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<ICriterion`1<T>> get_Criteria();
    public sealed virtual bool Matches(T entity);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.Query.CriterionOptimizationRegistryExtensions : object {
    [ExtensionAttribute]
public static void Register(IOptimizationRegistry registry, Func`2<TCriterion, IReadOnlySet`1<Int32`1<IUnitTestElement>>> fetchMatching, Func`2<TCriterion, bool> fetchHasAny);
}
public class JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.Query.DisjunctiveCriterion`1 : object {
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<ICriterion`1<T>> <Criteria>k__BackingField;
    [NotNullAttribute]
[ItemNotNullAttribute]
public IReadOnlyCollection`1<ICriterion`1<T>> Criteria { get; }
    public DisjunctiveCriterion`1(IReadOnlyCollection`1<ICriterion`1<T>> criteria);
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<ICriterion`1<T>> get_Criteria();
    public sealed virtual bool Matches(T entity);
}
public interface JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.Query.ICriterion`1 {
    public abstract virtual bool Matches(T entity);
}
public interface JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.Query.IOptimization`2 {
    [NotNullAttribute]
public abstract virtual IReadOnlySet`1<TId> FetchMatching(ICriterion`1<T> criterion);
    public abstract virtual bool FetchHasAny(ICriterion`1<T> criterion);
}
public interface JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.Query.IOptimizationRegistry {
    public abstract virtual void Register(Func`2<TCriterion, IReadOnlySet`1<TId>> fetchMatching, Func`2<TCriterion, bool> fetchHasAny);
    [CanBeNullAttribute]
public abstract virtual IOptimization`2<T, TId> TryGetOptimization(ICriterion`1<T> criterion);
}
public class JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.Query.NotCriterion`1 : object {
    [CompilerGeneratedAttribute]
private ICriterion`1<T> <Inner>k__BackingField;
    public ICriterion`1<T> Inner { get; }
    public NotCriterion`1(ICriterion`1<T> inner);
    [CompilerGeneratedAttribute]
public ICriterion`1<T> get_Inner();
    public sealed virtual bool Matches(T entity);
}
internal class JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.Query.Optimization`2 : object {
    [NotNullAttribute]
private Func`2<ICriterion`1<T>, IReadOnlySet`1<TId>> myFetchMatching;
    [NotNullAttribute]
private Func`2<ICriterion`1<T>, bool> myFetchHasAny;
    public Optimization`2(Func`2<ICriterion`1<T>, IReadOnlySet`1<TId>> fetchMatching, Func`2<ICriterion`1<T>, bool> fetchHasAny);
    public sealed virtual IReadOnlySet`1<TId> FetchMatching(ICriterion`1<T> criterion);
    public sealed virtual bool FetchHasAny(ICriterion`1<T> criterion);
}
[SolutionComponentAttribute("16")]
internal class JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.Query.OptimizationRegistry : object {
    [NotNullAttribute]
private IDictionary`2<Type, object> myOptimizations;
    public sealed virtual void Register(Func`2<TCriterion, IReadOnlySet`1<TId>> fetchMatching, Func`2<TCriterion, bool> fetchHasAny);
    public sealed virtual IOptimization`2<T, TId> TryGetOptimization(ICriterion`1<T> criterion);
}
internal class JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.Query.QueryProcessor`2 : object {
    [NotNullAttribute]
private IAggregateRoot`2<T, TId> myRoot;
    [NotNullAttribute]
private IOptimizationRegistry myRegistry;
    [NotNullAttribute]
private ICriterion`1<T> myCriterion;
    public QueryProcessor`2(IAggregateRoot`2<T, TId> root, IOptimizationRegistry registry, ICriterion`1<T> criterion);
    public bool Any();
    [NotNullAttribute]
public IReadOnlySet`1<TId> Ids();
    private static ResultSet<T, TId> AsResultSet(IReadOnlySet`1<TId> ids);
}
internal class JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.Query.QueryResult : object {
    [NotNullAttribute]
public static IQueryResult Empty;
    [NotNullAttribute]
private IUnitTestElementLoader myLoader;
    [NotNullAttribute]
private QueryProcessor`2<IUnitTestElement, Int32`1<IUnitTestElement>> myProcessor;
    [NotNullAttribute]
private Lazy`1<IReadOnlySet`1<Int32`1<IUnitTestElement>>> myIds;
    public IReadOnlySet`1<Int32`1<IUnitTestElement>> Ids { get; }
    public int Count { get; }
    public QueryResult(IUnitTestElementLoader loader, QueryProcessor`2<IUnitTestElement, Int32`1<IUnitTestElement>> processor);
    private static QueryResult();
    public sealed virtual IReadOnlySet`1<Int32`1<IUnitTestElement>> get_Ids();
    public sealed virtual int get_Count();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.Query.QueryResult/<GetEnumerator>d__9")]
public sealed virtual IEnumerator`1<IUnitTestElement> GetEnumerator();
    public sealed virtual bool Any();
    public sealed virtual bool Contains(IUnitTestElement item);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[SolutionComponentAttribute("16")]
internal class JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.QueryResultCache : object {
    [NotNullAttribute]
private ConcurrentDictionary`2<IUnitTestElementCriterion, IQueryResult> myData;
    [NotNullAttribute]
private ILogger myLogger;
    private int myShouldClearCache;
    public QueryResultCache(ILogger logger);
    public sealed virtual void ElementCreated(IUnitTestElement element);
    public sealed virtual void ElementUpdated(IUnitTestElement element, UnitTestElementChanges changes);
    public sealed virtual void ElementRemoved(IUnitTestElement element);
    public sealed virtual void Clear();
    public sealed virtual void Rollback();
    public sealed virtual void Commit();
    public sealed virtual IQueryResult GetOrAdd(IUnitTestElementCriterion criterion, Func`2<IUnitTestElementCriterion, IQueryResult> factory);
}
[ShellComponentAttribute("16")]
internal class JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.UnitTestElementPersister : object {
    [NotNullAttribute]
private IUnitTestElementPropertyCoalescerCache myCoalescerCache;
    public UnitTestElementPersister(IUnitTestElementPropertyCoalescerCache coalescerCache);
    public sealed virtual UnitTestElementChanges DetectChanges(IUnitTestElement transient, IUnitTestElement persisted);
    private UnitTestElementChanges CompareProjectFiles(IUnitTestElement discovered, IUnitTestElement existing);
}
[ShellComponentAttribute("16")]
internal class JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.UnitTestElementPropertyCoalescerCache : object {
    [NotNullAttribute]
private ConcurrentDictionary`2<Type, IUnitTestElementPropertyCoalescer[]> myStore;
    public sealed virtual IEnumerable`1<IUnitTestElementPropertyCoalescer> GetCoalescers(Type elementType);
    private IUnitTestElementPropertyCoalescer[] BuildCoalescers(Type type);
}
[SolutionComponentAttribute("4")]
internal class JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.UnitTestElementRepository : object {
    [NotNullAttribute]
private Lifetime myLifetime;
    [NotNullAttribute]
private IShellLocks myShellLocks;
    [NotNullAttribute]
private IEventContext myEventContext;
    [NotNullAttribute]
private IUnitTestElementLoader myLoader;
    [NotNullAttribute]
private IUnitTestElementPersister myPersister;
    [NotNullAttribute]
private IUnitTestElementIdGenerator myIdGenerator;
    [NotNullAttribute]
private IUnitTestTransactionDispatcher myDispatcher;
    [NotNullAttribute]
private IEnumerable`1<IUnitTestElementCache> myCaches;
    [NotNullAttribute]
private IQueryResultCache myQueryResultCache;
    [NotNullAttribute]
private IOptimizationRegistry myOptimizationRegistry;
    [NotNullAttribute]
private ILogger myLogger;
    public UnitTestElementRepository(Lifetime lifetime, IShellLocks shellLocks, IEventContext eventContext, IUnitTestElementLoader loader, IUnitTestElementPersister persister, IUnitTestElementIdGenerator idGenerator, IUnitTestTransactionDispatcher dispatcher, IEnumerable`1<IUnitTestElementCache> caches, IQueryResultCache queryResultCache, IOptimizationRegistry optimizationRegistry, ILogger logger);
    public sealed virtual IUnitTestElement GetBy(Int32`1<IUnitTestElement> id);
    public sealed virtual IQueryResult Query(IUnitTestElementCriterion criterion);
    public sealed virtual Task`1<IUnitTestTransactionCommitResult> BeginTransaction(Action`1<IUnitTestTransaction> runBeforeCommit, CancellationToken ct);
    public sealed virtual void Clear();
    [CompilerGeneratedAttribute]
private IQueryResult <Query>b__13_0(IUnitTestElementCriterion c);
}
[SolutionComponentAttribute("2")]
internal class JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.UnitTestResultManager : object {
    [NotNullAttribute]
private IEventContext myEventContext;
    [NotNullAttribute]
private IUnitTestElementRepository myElementRepository;
    [NotNullAttribute]
private IByParentCache myByParentCache;
    private ILogger myLogger;
    private object myLock;
    private ISet`1<IUnitTestSession> myKnownSessions;
    private OptimizedPersistentSortedMap`2<PersistentSessionUnitTestElementKey, UnitTestResult> myResultsMap;
    private OptimizedPersistentSortedMap`2<PersistentUnitTestElementKey, UnitTestResultWithPropagation> myResultsRecentMap;
    private OptimizedPersistentSortedMap`2<UnitTestOutputChunkKey, TestException> myResultsExceptionsMap;
    private OptimizedPersistentSortedMap`2<UnitTestOutputChunkKey, string> myResultsOutputMap;
    private OptimizedPersistentSortedMap`2<PersistentSessionUnitTestElementKey, UnitTestResultData> myResultsDataMap;
    private IDictionaryBasedCache`2<PersistentSessionUnitTestElementKey, UnitTestResult> myRemovedResultsCache;
    private ConditionalWeakTable`2<IUnitTestTransaction, ISet`1<Int32`1<IUnitTestElement>>> myTransactions;
    public UnitTestResultManager(Lifetime lifetime, IEventBus eventContext, IPersistentIndexManager persistentIndexManager, IUnitTestElementRepository elementRepository, IByParentCache byParentCache);
    public sealed virtual void RegisterSession(IUnitTestSession session);
    public sealed virtual void UnregisterSession(IUnitTestSession session);
    private void TrackElementsInSession(IUnitTestSession session);
    private void OnSessionElementsChanged(IUnitTestSession session, ICollection elements);
    private void ClearDataForRemovedSession(IUnitTestSession session);
    private void ResetPropagationDataOnChildrenChanged(UnitTestElementUpdateEvent args);
    private void ClearRecent(IUnitTestElementsEvent evt);
    private void ClearAll(UnitTestElementsRemovedEvent obj);
    public sealed virtual void RemoveResult(Int32`1<IUnitTestElement> id, IUnitTestSession session);
    public sealed virtual UnitTestResultWithPropagation GetResult(Int32`1<IUnitTestElement> elementId);
    public sealed virtual UnitTestResult GetResult(Int32`1<IUnitTestElement> elementId, IUnitTestSession session);
    public sealed virtual UnitTestResultData GetResultData(Int32`1<IUnitTestElement> elementId, IUnitTestSession session);
    [LocalizableAttribute("False")]
public sealed virtual void Dump(StreamWriter writer);
    public sealed virtual void MarkOutdated(Int32`1<IUnitTestElement> id, IUnitTestSession session);
    public sealed virtual void MarkOutdated(Int32`1<IUnitTestElement> id);
    public sealed virtual void MarkPending(Int32`1<IUnitTestElement> id, IUnitTestSession session);
    public sealed virtual void MarkIgnored(Int32`1<IUnitTestElement> id, IUnitTestSession session, string reason);
    public sealed virtual void TestStarting(Int32`1<IUnitTestElement> id, IUnitTestSession session);
    public void TestDuration(Int32`1<IUnitTestElement> id, IUnitTestSession session, TimeSpan duration);
    public sealed virtual void TestAborting(Int32`1<IUnitTestElement> id, IUnitTestSession session, string message);
    public sealed virtual void TestFinishing(Int32`1<IUnitTestElement> id, IUnitTestSession session, UnitTestStatus status, string message, Nullable`1<TimeSpan> duration);
    public sealed virtual void TestException(Int32`1<IUnitTestElement> id, IUnitTestSession session, IEnumerable`1<TestException> exceptions);
    public sealed virtual void TestOutput(Int32`1<IUnitTestElement> id, IUnitTestSession session, string text, TestOutputType type);
    public sealed virtual void CopyTestResult(IUnitTestSession fromSession, Int32`1<IUnitTestElement> id, IUnitTestSession toSession, bool copyOutputAndException);
    private void ExecuteWithResultData(Int32`1<IUnitTestElement> elementId, IUnitTestSession session, Action`2<PersistentSessionUnitTestElementKey, UnitTestResultData> action);
    private void ExecuteWithResult(Int32`1<IUnitTestElement> elementId, IUnitTestSession session, Func`4<PersistentSessionUnitTestElementKey, IUnitTestElement, UnitTestResult, UnitTestResult> getResult);
    private void ExecuteWithRecentResult(Int32`1<IUnitTestElement> elementId, Func`3<IUnitTestElement, UnitTestResultWithPropagation, UnitTestResultWithPropagation> getResult);
    private void PropagateRecentResult(IUnitTestElement child, UnitTestResultWithPropagation oldChildResult, UnitTestResultWithPropagation newChildResult);
    private void MaintainPropagationData(IUnitTestElement element, UnitTestResultWithPropagation result, UnitTestResultWithPropagation oldChildResult, UnitTestResultWithPropagation newChildResult);
    private void InitializePropagationData(IUnitTestElement element, UnitTestResultWithPropagation result);
    private void UpdatePropagationData(IUnitTestElement element, UnitTestResultWithPropagation result, UnitTestResultWithPropagation oldChildResult, UnitTestResultWithPropagation newChildResult);
    [NotNullAttribute]
private PersistentSessionUnitTestElementKey GetKey(IUnitTestSession session, Int32`1<IUnitTestElement> elementId);
    [CompilerGeneratedAttribute]
internal static void <Dump>g__DumpMap|26_0(string name, OptimizedPersistentSortedMap`2<TKey, TValue> map, <>c__DisplayClass26_0& );
}
internal class JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.UnitTestTransaction : object {
    [NotNullAttribute]
private IShellLocks myShellLocks;
    [NotNullAttribute]
private IEventContext myEventContext;
    [NotNullAttribute]
private IUnitTestElementLoader myLoader;
    [NotNullAttribute]
private IUnitTestElementPersister myPersister;
    [NotNullAttribute]
private IUnitTestElementIdGenerator myIdGenerator;
    [NotNullAttribute]
private IUnitTestTransactionDispatcher myDispatcher;
    [NotNullAttribute]
private IOptimizationRegistry myOptimizationRegistry;
    [NotNullAttribute]
private IEnumerable`1<IUnitTestElementCache> myCaches;
    [NotNullAttribute]
private OnBeforeCommit myRunOnceBeforeCommit;
    [NotNullAttribute]
private ILogger myLogger;
    private Lifetime myParentLifetime;
    private LifetimeDefinition myLtd;
    private CreatedWorkingSet myToCreate;
    private UpdatedWorkingSet myToUpdate;
    private DeletedWorkingSet myToDelete;
    private TimeSpan myNonInterruptableCommitWindow;
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <CommittedAt>k__BackingField;
    public Guid Id { get; }
    public Lifetime Lifetime { get; }
    public ulong CommittedAt { get; private set; }
    public bool HasElementsToProcess { get; }
    public UnitTestTransaction(Lifetime lifetime, IShellLocks shellLocks, IEventContext eventContext, IUnitTestElementLoader loader, IUnitTestElementPersister persister, IUnitTestElementIdGenerator idGenerator, IUnitTestTransactionDispatcher dispatcher, IOptimizationRegistry optimizationRegistry, IEnumerable`1<IUnitTestElementCache> caches, OnBeforeCommit runOnceBeforeCommit);
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_Id();
    public sealed virtual Lifetime get_Lifetime();
    [CompilerGeneratedAttribute]
public sealed virtual ulong get_CommittedAt();
    [CompilerGeneratedAttribute]
private void set_CommittedAt(ulong value);
    public bool get_HasElementsToProcess();
    public sealed virtual IUnitTestElement GetBy(Int32`1<IUnitTestElement> id);
    public sealed virtual IEnumerable`1<IUnitTestElement> Query(IUnitTestElementCriterion criterion);
    public sealed virtual void Create(IUnitTestElement element);
    public sealed virtual void Update(IUnitTestElement element);
    public sealed virtual void Delete(IUnitTestElement element);
    public sealed virtual Task`1<IUnitTestTransactionCommitResult> Schedule(Action`1<IUnitTestTransaction> runBeforeCommit);
    public sealed virtual IUnitTestTransactionCommitResult Commit();
    public IUnitTestTransactionCommitResult CommitCore();
    private void AssertTransactionIntegrity();
    private void ProcessAll(WorkingSet set, Action`1<IUnitTestElement> worker, Stopwatch stopwatch);
    private void PerformDelete(IUnitTestElement element);
    private void PerformCreate(IUnitTestElement element);
    private void PerformUpdate(IUnitTestElement element);
    private void EnsureParentIsPersisted(IUnitTestElement element);
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.UnitTestTransactionDispatcher : object {
    [NotNullAttribute]
private TaskFactory myFactory;
    public UnitTestTransactionDispatcher(Lifetime lifetime);
    public sealed virtual Task`1<IUnitTestTransactionCommitResult> Post(IUnitTestTransaction tx, TaskCreationOptions options);
}
[AttributeUsageAttribute("128")]
public class JetBrains.ReSharper.UnitTestFramework.Persistence.PersistAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <Marshaller>k__BackingField;
    [CanBeNullAttribute]
public Type Marshaller { get; }
    public PersistAttribute(Type marshaller);
    [CompilerGeneratedAttribute]
public Type get_Marshaller();
}
public class JetBrains.ReSharper.UnitTestFramework.Persistence.PersistenceException : Exception {
    public PersistenceException(string message);
    public PersistenceException(string message, Exception innerException);
    protected PersistenceException(SerializationInfo info, StreamingContext context);
}
[FlagsAttribute]
public enum JetBrains.ReSharper.UnitTestFramework.Persistence.UnitTestElementChanges : Enum {
    public int value__;
    public static UnitTestElementChanges None;
    public static UnitTestElementChanges Unknown;
    public static UnitTestElementChanges Parent;
    public static UnitTestElementChanges ShortName;
    public static UnitTestElementChanges Namespace;
    public static UnitTestElementChanges Children;
    public static UnitTestElementChanges ProjectFiles;
    public static UnitTestElementChanges CategoriesOrigin;
    public static UnitTestElementChanges Categories;
    public static UnitTestElementChanges Internal;
    public static UnitTestElementChanges Origin;
    public static UnitTestElementChanges Any;
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.UnitTestFramework.Persistence.UnitTestElementRepositoryExtensions : object {
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IUnitTestElement GetByWithLock(IUnitTestElementRepository repository, Int32`1<IUnitTestElement> id);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IUnitTestElement GetBy(IUnitTestElementRepository repository, UnitTestElementId naturalId);
    [ExtensionAttribute]
[NotNullAttribute]
public static IQueryResult GetBy(IUnitTestElementRepository repository, IProjectFile projectFile);
    [ExtensionAttribute]
[NotNullAttribute]
public static IQueryResult GetBy(IUnitTestElementRepository repository, IProjectFile projectFile, TargetFrameworkId targetFrameworkId);
    [ExtensionAttribute]
[NotNullAttribute]
public static IQueryResult GetBy(IUnitTestElementRepository repository, IProject project);
    [ExtensionAttribute]
[NotNullAttribute]
public static IQueryResult GetBy(IUnitTestElementRepository repository, IProject project, TargetFrameworkId targetFrameworkId);
    [ExtensionAttribute]
[NotNullAttribute]
public static IQueryResult GetBy(IUnitTestElementRepository repository, IUnitTestProvider provider);
    [ExtensionAttribute]
[NotNullAttribute]
public static IQueryResult GetBy(IUnitTestElementRepository repository, IUnitTestProvider provider, IProject project, TargetFrameworkId targetFrameworkId);
    [ExtensionAttribute]
[NotNullAttribute]
public static IQueryResult GetBy(IUnitTestElementRepository repository, IUnitTestProvider provider, IProjectFile projectFile, TargetFrameworkId targetFrameworkId);
    [ExtensionAttribute]
[NotNullAttribute]
public static Task`1<IUnitTestTransactionCommitResult> Remove(IUnitTestElementRepository repository, IEnumerable`1<IUnitTestElement> elements);
    [ExtensionAttribute]
[NotNullAttribute]
public static Task`1<IUnitTestTransactionCommitResult> RemoveBy(IUnitTestElementRepository repository, IUnitTestElementCriterion criterion);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.UnitTestFramework.Persistence.UnitTestTransactionExtensions : object {
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IUnitTestElement GetBy(IUnitTestTransaction tx, UnitTestElementId naturalId);
    [ExtensionAttribute]
[NotNullAttribute]
public static string Ident(IUnitTestTransaction tx);
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public static class JetBrains.ReSharper.UnitTestFramework.Resources.Strings : object {
    private static ILogger ourLog;
    private static Lazy`1<JetResourceManager> ourResourceManager;
    [EditorBrowsableAttribute("2")]
public static JetResourceManager ResourceManager { get; }
    public static string ActivateUnitTestSessionWindowWhenRunStartsSettingDescription { get; }
    public static string AdditionalEnvironmentVariablesToBeUsedByTheTestRunnerSettingDescription { get; }
    public static string AppendContainedTestsActionText { get; }
    public static string AppendTestsToSessionActionText { get; }
    public static string AppendUnitTestsToSessionActionText { get; }
    public static string AutoDetectRunSettingsFile_Text { get; }
    public static string AutomaticActionText { get; }
    public static string AutomaticWholeSolutionActionText { get; }
    public static string AutoScrollToBottomOfOutputPanelDuringTestRunSettingDescription { get; }
    public static string BuildSettingsActionGroupText { get; }
    public static string CaptureTestRunnerOutputSettingDescription { get; }
    public static string CheckForOrphanedProcessesSettingDescription { get; }
    public static string ClearTestResultActionText { get; }
    public static string ClearTestResults_Text { get; }
    public static string UnitTestGutterMarks_Text { get; }
    public static string UnitTesting_Guttermark_Tooltip_Text { get; }
    public static string CreateAppDomainWhenRunningTestsSettingDescription { get; }
    public static string CreateNeWSessionActionText { get; }
    public static string CustomDirectoryForTestAssembliesAndDataSettingDescription { get; }
    public static string DebugUnitTestsActionGroupDescription { get; }
    public static string DebugUnitTestsActionGroupText { get; }
    public static string DebugUnitTestsActionText { get; }
    public static string DefaultActionText { get; }
    public static string DefaultSolutionBuildPolicyBeforeRunningTestsInAllNewSessionsSettingDescription { get; }
    public static string DefaultUnitTestSessionSettingsSettingDescription { get; }
    public static string DisabledProvidersSettingDescription { get; }
    public static string EnableInternalDebugSettingDescription { get; }
    public static string EnableInternalLoggingSettingDescription { get; }
    public static string EnableUnitTestingSettingDescription { get; }
    public static string ExpandTestSessionTreeToATestWhenPossibleSettingDescription { get; }
    public static string ExportSessionActionText { get; }
    public static string GeneralOptionPageTitle { get; }
    public static string GroupingProvidersSettingDescription { get; }
    public static string HangingTestExecutionResponseSettingDescription { get; }
    public static string ImportSessionActionText { get; }
    public static string InAllTargetFrameworksActionText { get; }
    public static string LimitNumberOfShownInputDataForParametrizedTestsSettingDescription { get; }
    public static string LimitTestOutputToASpecifiedNumberOfLinesSettingDescription { get; }
    public static string ListOfExcludedCategoriesSettingDescription { get; }
    public static string ListOfProcessesWithSetRepliesSettingDescription { get; }
    public static string LockSessionActionText { get; }
    public static string MRUValuesForUnitTestingSettingDescription { get; }
    public static string NET20ActionText { get; }
    public static string NET40ActionText { get; }
    public static string NET45ActionText { get; }
    public static string NET46ActionText { get; }
    public static string NET47ActionText { get; }
    public static string NeverBuildActionText { get; }
    public static string NumberOfTestRunnerProcessesRunningInParallelSettingDescription { get; }
    public static string PathToRunconfigTestsettingsFileSettingDescription { get; }
    public static string PlatformTypeXXToRunTestsSettingDescription { get; }
    public static string PreferClrPreferMonoToRunTestsSettingDescription { get; }
    public static string ProcessorArchitectureForStandaloneIntegrationTestsSettingDescription { get; }
    public static string RenameSessionActionText { get; }
    public static string REpeatPreviousRunActionText { get; }
    public static string RuNAllTestsFromSolutionActionText { get; }
    public static string RunCurrentSessionActionText { get; }
    public static string RunNETCoreWithoutIsolationSettingDescription { get; }
    public static string RunNETFrameworkWithoutIsolationSettingDescription { get; }
    public static string RuntimeEnvironmentCLRToRunTestsSettingDescription { get; }
    public static string RunUnitTestsActionGroupDescription { get; }
    public static string RunUnitTestsActionGroupText { get; }
    public static string RunUnitTestsActionText { get; }
    public static string RunUnitTestsUntilFailActionText { get; }
    public static string SaveSessionStateOnCloseAndRestoreOnStartupSettingDescription { get; }
    public static string SessionsSettingDescription { get; }
    public static string ShadowCopyAssembliesBeingTestedSettingDescription { get; }
    public static string ShowEntriesWithSeverityEqualOrHigherThanSettingDescription { get; }
    public static string ShowIntegrationTestsOptionInUTSessionSettingDescription { get; }
    public static string ShowNotificationWhenSessionIsFinishedSettingDescription { get; }
    public static string ShowSkippedExplorationResultsSettingDescription { get; }
    public static string ShowTestTimeByDefaultInAllNewSessionsSettingDescription { get; }
    public static string ShowTimeActionText { get; }
    public static string SpawnedProcessesCheckResponseSettingDescription { get; }
    public static string StopExecutionActionText { get; }
    public static string TargetFrameworkActionGroupText { get; }
    public static string TargetPlatformActionGroupText { get; }
    public static string TestFrameworksOptionPageTitle { get; }
    public static string TestGradationByDurationSettingDescription { get; }
    public static string TestMethodProperty_PresentableName_Text { get; }
    public static string TestRunnerOptionPageTitle { get; }
    public static string TestType_PresentableName_Text { get; }
    public static string TrackActiveElementInTreeByDefaultInAllNewSessionsSettingDescription { get; }
    public static string UnitTesting_Category_Uncategorized_Text { get; }
    public static string UnitTestExplorerActionText { get; }
    public static string UnitTestExplorerSettingsSettingDescription { get; }
    public static string UnitTestingOptionPageTitle { get; }
    public static string UnitTestingSessionsSettingDescription { get; }
    public static string UnitTestingSettingsSettingDescription { get; }
    public static string UnitTestRunnerSettingsSettingDescription { get; }
    public static string UseCustomDirectoryForTestsSettingDescription { get; }
    public static string VSHiveForIntegrationTestsSettingDescription { get; }
    public static string WaitIntervalForProcessesSpawnedByTestRunnerToExitAfterTestRunnerExitsSettingDescription { get; }
    public static string WaitIntervalForTestRunnerToExitAfterTestsSeeminglyFinishSettingDescription { get; }
    public static string WrapLongLinesInUnitTestsOutputSettingDescription { get; }
    public static string X86ActionText { get; }
    public static string X64ActionText { get; }
    public static string LatestNetCoreAppActionText { get; }
    public static string TestRunnerResultEventsFrequency { get; }
    public static string TestRunnerResultEventsTimeout { get; }
    public static string UseSpecificRunsettingsTestsettingsSettings_Text_Text { get; }
    public static string WhenRunningTestsDiscoveryFromArtifacts_RadioOption_Caption { get; }
    public static string Metadata_Text { get; }
    public static string FastButMightNotBeAbleToFindCertainEntities_ToolTip { get; }
    public static string TestRunner_Text { get; }
    public static string SlowerFindsAllTestsOrCategories_ToolTip { get; }
    public static string DefaultPlatform_architecture_Caption { get; }
    public static string DefaultNET_FrameworkVersion_Caption { get; }
    public static string SkipTestsFromCategories_Caption { get; }
    public static string TestRunnersInParallel_Text { get; }
    public static string RunTestsFrom_RadioOption_Caption { get; }
    public static string _ProjectOutputFolder_Text { get; }
    public static string Specified_folder_Text { get; }
    public static string UnitTestExplorer_Text { get; }
    public static string SkipParameterizedTestAfterInputData_TextPrefix { get; }
    public static string UnitTestSessions_Text { get; }
    public static string Items_PostfixText { get; }
    public static string _SaveAndRestoreUnitTestSessions_Caption { get; }
    public static string ActivateUnitTestSessionWindowWhenRun_Caption { get; }
    public static string ShowLogEntriesWithSeverity_Text { get; }
    public static string ShowNotificationWhenSessionIsFinished_Caption { get; }
    public static string UnitTestOutput_Text { get; }
    public static string _WrapLongLinesInUnitTestSessionOutput_Caption { get; }
    public static string LimitAutoLoadedOutputTo_Text { get; }
    public static string IntegrationTests_Text { get; }
    public static string ShowIntegrationTestsOptionInUTSession_Caption { get; }
    public static string _ShadowCopyAssembliesBeingTested_Caption { get; }
    public static string IfTheTestRunnerProcessDoesNotExitAfter_TextPrefix { get; }
    public static string Seconds_PostfixText { get; }
    public static string AskWhatToDo_Option_Text { get; }
    public static string ContinueWaiting_Option_Text { get; }
    public static string KillProcess_Option_Text { get; }
    public static string IfTheSpawnedProcessesDoNotExitAfter_TextPrefix { get; }
    public static string DoNothing_Option_Text { get; }
    public static string KillProcesses_Option_Text { get; }
    public static string EnvironmentVariables_Header_Text { get; }
    public static string TestSettings_Header_Text { get; }
    public static string InternalOptions_Text { get; }
    public static string Enable_Debug_Caption { get; }
    public static string Cap_tureOutput_Caption { get; }
    public static string _LoggingLevel_Caption { get; }
    public static string RunTestsWithoutIsolation_Text_Text { get; }
    public static string ForNETFramework_Caption { get; }
    public static string ForNETCoreSameAsDotnetTest_Caption { get; }
    public static string Skip_Action_Text { get; }
    public static string Kill_Action_Text { get; }
    public static string UnitTestExplorer_Caption { get; }
    public static string UNitTestSession_Caption { get; }
    public static string _AlwaysForTheseProcesses_Text { get; }
    public static string AllTestsHaveFinishedButProcessesSpawned_Text { get; }
    public static string OrphanedProcesses_Text { get; }
    public static string UnitTestRunner_Caption { get; }
    public static string LeaveRunning_Text { get; }
    public static string KillOrphaned_Text { get; }
    public static string _DoNotShowAgain_Text { get; }
    public static string TheProcess__HasFinishedRunningTests_Text { get; }
    public static string PossibleReasonsAreIncorrectAsynchronous_Text { get; }
    public static string Wait_Text { get; }
    public static string Kill_Text { get; }
    public static string WhyCanTIRunTests_Text { get; }
    public static string NotRunnable__Text { get; }
    public static string NotRunnableTest_Text { get; }
    public static string Debug__Text { get; }
    public static string Debug_Text { get; }
    public static string AppendTo_Text { get; }
    public static string AppendTo__Text { get; }
    public static string More_Text { get; }
    public static string Category__Text { get; }
    public static string All_Text { get; }
    public static string In__Text { get; }
    public static string InAllTargetFrameworks_Text { get; }
    public static string CreateNewSession_Text { get; }
    public static string Run__Text { get; }
    public static string Run_Text { get; }
    public static string NotRunnableInvalidDeclaration_Text { get; }
    public static string Install__Text { get; }
    public static string NuGetPackage_IsNotInstalled_Text { get; }
    public static string VisualStudioInstallationFolderIsNot_Text { get; }
    public static string ExceptionOccurredDuringExploration_Text { get; }
    public static string ExceptionOccurredDuringDiscovery_Text { get; }
    public static string Declarations_Caption { get; }
    public static string ChooseFile_Caption { get; }
    public static string AnErrorOccurredDuringImportN__Text { get; }
    public static string CouldNotImportSession_Caption { get; }
    public static string UnitTestTree_Text { get; }
    public static string Remove_Text { get; }
    public static string ChildProcessName_Text { get; }
    public static string ActionAuto_Text { get; }
    public static string Add_Text { get; }
    public static string Name_Text { get; }
    public static string Value_Text { get; }
    public static string LifetimeIsTerminated_Text { get; }
    public static string ProjectIsNotValid_Text { get; }
    public static string ProjectIsNotAUserProject_Text { get; }
    public static string NotSupportedByProvider_Text { get; }
    public static string CancellationRequested_Text { get; }
    public static string ProjectDoesNotHaveOutputForTargetFramework_Text { get; }
    public static string OutputDoesNotExistOnDisk_Text { get; }
    public static string _IsNotAValidTargetForAUnitTestProject_Text { get; }
    public static string AppendToSession_Text { get; }
    public static string AnErrorOccurredDuringExport___Text { get; }
    public static string CouldNotExportSession_Caption { get; }
    public static string AppendAllTestsFrom__Text { get; }
    public static string BuildPolicy__Text { get; }
    public static string Auto_Text { get; }
    public static string AutoWholeSolution_Text { get; }
    public static string Never_Text { get; }
    public static string CurrentSession_Text { get; }
    public static string Framework__Text { get; }
    public static string FrameworkDefault__Text { get; }
    public static string Platform__Text { get; }
    public static string PlatformDefault__Text { get; }
    public static string Failures_Caption { get; }
    public static string RunningUnitTests_Text { get; }
    public static string BuildFailed_Description_Text { get; }
    public static string Building_Description_Text { get; }
    public static string BuildSucceeded_Description_Text { get; }
    public static string ExploringTests_Description_Text { get; }
    public static string Finishing_Description_Text { get; }
    public static string Running_Description_Text { get; }
    public static string Starting_Description_Text { get; }
    public static string Passed_Text { get; }
    public static string Failed_Text { get; }
    public static string Skipped_Text { get; }
    public static string ShadowCopyCustomFileMask { get; }
    public static string ShadowCopyRecursive { get; }
    public static string FileMask_Caption { get; }
    public static string CopyRecursively_Caption { get; }
    public static string Diagnostics_Header_Text { get; }
    public static string ArmActionText { get; }
    public static string Arm64ActionText { get; }
    public static string None_Text { get; }
    public static string Native_Text { get; }
    public static string Advanced_Text { get; }
    public static string UnitTestingGroupName_TestHierarchy_Text { get; }
    public static string UnitTestingGroupName_ProjectStructure_Text { get; }
    public static string UnitTestingGroupName_Projects_Text { get; }
    public static string UnitTestingGroupName_Namespaces_Text { get; }
    public static string UnitTestingGroupName_ProjectsAndNamespaces_Text { get; }
    public static string UnitTestingGroupName_Categories_Text { get; }
    public static string UnitTestingGroupName_ProjectAndCategories_Text { get; }
    public static string AllTestsFromSolution_Text { get; }
    public static string AllTestsFrom__Text { get; }
    public static string AllTestsFrom_TargetFramework_Text { get; }
    public static string AllTestsFrom_0_Text { get; }
    public static string AllTestsInCategory__Text { get; }
    public static string Session_Text { get; }
    public static string TestNotRun_Text { get; }
    public static string RunWasAborted_Text { get; }
    public static string RunWasCancelled_Text { get; }
    public static string InAnotherTest_Text { get; }
    public static string StackOverflowException_Text { get; }
    public static string CannotConnectToTestRunner_Text { get; }
    public static string ExitCodeIs_Text { get; }
    public static string ExitCodeIs_WithError_Text { get; }
    public static string TestsPassed_Failed_Ignored__Text { get; }
    public static string UnitTestGroupingProvider_TestHierarchy { get; }
    public static string UnitTestGroupingProvider_Category { get; }
    public static string UnitTestGroupingProvider_Namespace { get; }
    public static string UnitTestGroupingProvider_TargetFramework { get; }
    public static string UnitTestGroupingProvider_Project { get; }
    public static string UnitTestGroupingProvider_FileSystem { get; }
    public static string UnitTestGroupingProvider_Duration { get; }
    public static string UnitTesting_Session_TestCountPattern_Plural { get; }
    public static string UnitTesting_Session_TestCountPattern_Singular { get; }
    public static string UnitTesting_Session_FailedTestCountPattern_Plural { get; }
    public static string UnitTesting_Session_FailedTestCountPattern_Singular { get; }
    public static string UnitTesting_TestStatus_None { get; }
    public static string UnitTesting_TestStatus_Unknown { get; }
    public static string UnitTesting_TestStatus_Inconclusive { get; }
    public static string UnitTesting_TestStatus_Ignored { get; }
    public static string UnitTesting_TestStatus_Success { get; }
    public static string UnitTesting_TestStatus_Failed { get; }
    public static string UnitTesting_TestStatus_Aborted { get; }
    public static string UnitTesting_TestStatus_Pending { get; }
    public static string UnitTesting_TestStatus_Running { get; }
    public static string PlatformType_Automatic_Name { get; }
    public static string PlatformType_Automatic_Description { get; }
    public static string PlatformType_X86_Name { get; }
    public static string PlatformType_X86_Description { get; }
    public static string PlatformType_X64_Name { get; }
    public static string PlatformType_X64_Description { get; }
    public static string PlatformType_Arm_Name { get; }
    public static string PlatformType_Arm_Description { get; }
    public static string PlatformType_Arm64_Name { get; }
    public static string PlatformType_Arm64_Description { get; }
    public static string PlatformMonoPreference_PreferCLR_Name { get; }
    public static string PlatformMonoPreference_PreferCLR_Description { get; }
    public static string PlatformMonoPreference_PreferMono_Name { get; }
    public static string PlatformMonoPreference_PreferMono_Description { get; }
    public static string PlatformVersion_Automatic_Name { get; }
    public static string PlatformVersion_Automatic_Description { get; }
    public static string PlatformVersion_Net20_ShortName { get; }
    public static string PlatformVersion_Net20_Name { get; }
    public static string PlatformVersion_Net20_Description { get; }
    public static string PlatformVersion_Net40_ShortName { get; }
    public static string PlatformVersion_Net40_Name { get; }
    public static string PlatformVersion_Net40_Description { get; }
    public static string PlatformVersion_Net45_ShortName { get; }
    public static string PlatformVersion_Net45_Name { get; }
    public static string PlatformVersion_Net45_Description { get; }
    public static string PlatformVersion_Net46_ShortName { get; }
    public static string PlatformVersion_Net46_Name { get; }
    public static string PlatformVersion_Net46_Description { get; }
    public static string PlatformVersion_Net47_ShortName { get; }
    public static string PlatformVersion_Net47_Name { get; }
    public static string PlatformVersion_Net47_Description { get; }
    public static string PlatformVersion_NetCoreApp_ShortName { get; }
    public static string PlatformVersion_NetCoreApp_Name { get; }
    public static string PlatformVersion_NetCoreApp_Description { get; }
    public static string AllTestsFilter_Name_All_Tests { get; }
    public static string PassedTestsFilter_PassedTestsFilter_Passed_Tests { get; }
    public static string FailedTestsFilter_FailedTestsFilter_Failed_Tests { get; }
    public static string IgnoredTestsFilter_IgnoredTestsFilter_Ignored_Tests { get; }
    public static string UnknownTestsFilter_UnknownTestsFilter_New_and_Outdated_Tests { get; }
    public static string IgnoreReason_TestIsInIgnoredCategory { get; }
    public static string TestDuration_Category_NotRun { get; }
    public static string TestDuration_Category_Fast { get; }
    public static string TestDuration_Category_Medium { get; }
    public static string TestDuration_Category_Slow { get; }
    public static string TestDuration_Category_Slower { get; }
    public static string TestDuration_Category_Slowest { get; }
    public static string TestDuration_ValueQualifier_Min { get; }
    public static string TestDuration_ValueQualifier_Sec { get; }
    public static string TestDuration_ValueQualifier_Ms { get; }
    private static Strings();
    public static JetResourceManager get_ResourceManager();
    public static string Choice(string format, Object[] args);
    public static string get_ActivateUnitTestSessionWindowWhenRunStartsSettingDescription();
    public static string get_AdditionalEnvironmentVariablesToBeUsedByTheTestRunnerSettingDescription();
    public static string get_AppendContainedTestsActionText();
    public static string get_AppendTestsToSessionActionText();
    public static string get_AppendUnitTestsToSessionActionText();
    public static string get_AutoDetectRunSettingsFile_Text();
    public static string get_AutomaticActionText();
    public static string get_AutomaticWholeSolutionActionText();
    public static string get_AutoScrollToBottomOfOutputPanelDuringTestRunSettingDescription();
    public static string get_BuildSettingsActionGroupText();
    public static string get_CaptureTestRunnerOutputSettingDescription();
    public static string get_CheckForOrphanedProcessesSettingDescription();
    public static string get_ClearTestResultActionText();
    public static string get_ClearTestResults_Text();
    public static string get_UnitTestGutterMarks_Text();
    public static string get_UnitTesting_Guttermark_Tooltip_Text();
    public static string get_CreateAppDomainWhenRunningTestsSettingDescription();
    public static string get_CreateNeWSessionActionText();
    public static string get_CustomDirectoryForTestAssembliesAndDataSettingDescription();
    public static string get_DebugUnitTestsActionGroupDescription();
    public static string get_DebugUnitTestsActionGroupText();
    public static string get_DebugUnitTestsActionText();
    public static string get_DefaultActionText();
    public static string get_DefaultSolutionBuildPolicyBeforeRunningTestsInAllNewSessionsSettingDescription();
    public static string get_DefaultUnitTestSessionSettingsSettingDescription();
    public static string get_DisabledProvidersSettingDescription();
    public static string get_EnableInternalDebugSettingDescription();
    public static string get_EnableInternalLoggingSettingDescription();
    public static string get_EnableUnitTestingSettingDescription();
    public static string get_ExpandTestSessionTreeToATestWhenPossibleSettingDescription();
    public static string get_ExportSessionActionText();
    public static string get_GeneralOptionPageTitle();
    public static string get_GroupingProvidersSettingDescription();
    public static string get_HangingTestExecutionResponseSettingDescription();
    public static string get_ImportSessionActionText();
    public static string get_InAllTargetFrameworksActionText();
    public static string get_LimitNumberOfShownInputDataForParametrizedTestsSettingDescription();
    public static string get_LimitTestOutputToASpecifiedNumberOfLinesSettingDescription();
    public static string get_ListOfExcludedCategoriesSettingDescription();
    public static string get_ListOfProcessesWithSetRepliesSettingDescription();
    public static string get_LockSessionActionText();
    public static string get_MRUValuesForUnitTestingSettingDescription();
    public static string get_NET20ActionText();
    public static string get_NET40ActionText();
    public static string get_NET45ActionText();
    public static string get_NET46ActionText();
    public static string get_NET47ActionText();
    public static string get_NeverBuildActionText();
    public static string get_NumberOfTestRunnerProcessesRunningInParallelSettingDescription();
    public static string get_PathToRunconfigTestsettingsFileSettingDescription();
    public static string get_PlatformTypeXXToRunTestsSettingDescription();
    public static string get_PreferClrPreferMonoToRunTestsSettingDescription();
    public static string get_ProcessorArchitectureForStandaloneIntegrationTestsSettingDescription();
    public static string get_RenameSessionActionText();
    public static string get_REpeatPreviousRunActionText();
    public static string get_RuNAllTestsFromSolutionActionText();
    public static string get_RunCurrentSessionActionText();
    public static string get_RunNETCoreWithoutIsolationSettingDescription();
    public static string get_RunNETFrameworkWithoutIsolationSettingDescription();
    public static string get_RuntimeEnvironmentCLRToRunTestsSettingDescription();
    public static string get_RunUnitTestsActionGroupDescription();
    public static string get_RunUnitTestsActionGroupText();
    public static string get_RunUnitTestsActionText();
    public static string get_RunUnitTestsUntilFailActionText();
    public static string get_SaveSessionStateOnCloseAndRestoreOnStartupSettingDescription();
    public static string get_SessionsSettingDescription();
    public static string get_ShadowCopyAssembliesBeingTestedSettingDescription();
    public static string get_ShowEntriesWithSeverityEqualOrHigherThanSettingDescription();
    public static string get_ShowIntegrationTestsOptionInUTSessionSettingDescription();
    public static string get_ShowNotificationWhenSessionIsFinishedSettingDescription();
    public static string get_ShowSkippedExplorationResultsSettingDescription();
    public static string get_ShowTestTimeByDefaultInAllNewSessionsSettingDescription();
    public static string get_ShowTimeActionText();
    public static string get_SpawnedProcessesCheckResponseSettingDescription();
    public static string get_StopExecutionActionText();
    public static string get_TargetFrameworkActionGroupText();
    public static string get_TargetPlatformActionGroupText();
    public static string get_TestFrameworksOptionPageTitle();
    public static string get_TestGradationByDurationSettingDescription();
    public static string get_TestMethodProperty_PresentableName_Text();
    public static string get_TestRunnerOptionPageTitle();
    public static string get_TestType_PresentableName_Text();
    public static string get_TrackActiveElementInTreeByDefaultInAllNewSessionsSettingDescription();
    public static string get_UnitTesting_Category_Uncategorized_Text();
    public static string get_UnitTestExplorerActionText();
    public static string get_UnitTestExplorerSettingsSettingDescription();
    public static string get_UnitTestingOptionPageTitle();
    public static string get_UnitTestingSessionsSettingDescription();
    public static string get_UnitTestingSettingsSettingDescription();
    public static string get_UnitTestRunnerSettingsSettingDescription();
    public static string get_UseCustomDirectoryForTestsSettingDescription();
    public static string get_VSHiveForIntegrationTestsSettingDescription();
    public static string get_WaitIntervalForProcessesSpawnedByTestRunnerToExitAfterTestRunnerExitsSettingDescription();
    public static string get_WaitIntervalForTestRunnerToExitAfterTestsSeeminglyFinishSettingDescription();
    public static string get_WrapLongLinesInUnitTestsOutputSettingDescription();
    public static string get_X86ActionText();
    public static string get_X64ActionText();
    public static string get_LatestNetCoreAppActionText();
    public static string get_TestRunnerResultEventsFrequency();
    public static string get_TestRunnerResultEventsTimeout();
    public static string get_UseSpecificRunsettingsTestsettingsSettings_Text_Text();
    public static string get_WhenRunningTestsDiscoveryFromArtifacts_RadioOption_Caption();
    public static string get_Metadata_Text();
    public static string get_FastButMightNotBeAbleToFindCertainEntities_ToolTip();
    public static string get_TestRunner_Text();
    public static string get_SlowerFindsAllTestsOrCategories_ToolTip();
    public static string get_DefaultPlatform_architecture_Caption();
    public static string get_DefaultNET_FrameworkVersion_Caption();
    public static string get_SkipTestsFromCategories_Caption();
    public static string get_TestRunnersInParallel_Text();
    public static string get_RunTestsFrom_RadioOption_Caption();
    public static string get__ProjectOutputFolder_Text();
    public static string get_Specified_folder_Text();
    public static string get_UnitTestExplorer_Text();
    public static string get_SkipParameterizedTestAfterInputData_TextPrefix();
    public static string get_UnitTestSessions_Text();
    public static string get_Items_PostfixText();
    public static string get__SaveAndRestoreUnitTestSessions_Caption();
    public static string get_ActivateUnitTestSessionWindowWhenRun_Caption();
    public static string get_ShowLogEntriesWithSeverity_Text();
    public static string get_ShowNotificationWhenSessionIsFinished_Caption();
    public static string get_UnitTestOutput_Text();
    public static string get__WrapLongLinesInUnitTestSessionOutput_Caption();
    public static string get_LimitAutoLoadedOutputTo_Text();
    public static string get_IntegrationTests_Text();
    public static string get_ShowIntegrationTestsOptionInUTSession_Caption();
    public static string get__ShadowCopyAssembliesBeingTested_Caption();
    public static string get_IfTheTestRunnerProcessDoesNotExitAfter_TextPrefix();
    public static string get_Seconds_PostfixText();
    public static string get_AskWhatToDo_Option_Text();
    public static string get_ContinueWaiting_Option_Text();
    public static string get_KillProcess_Option_Text();
    public static string get_IfTheSpawnedProcessesDoNotExitAfter_TextPrefix();
    public static string get_DoNothing_Option_Text();
    public static string get_KillProcesses_Option_Text();
    public static string get_EnvironmentVariables_Header_Text();
    public static string get_TestSettings_Header_Text();
    public static string get_InternalOptions_Text();
    public static string get_Enable_Debug_Caption();
    public static string get_Cap_tureOutput_Caption();
    public static string get__LoggingLevel_Caption();
    public static string get_RunTestsWithoutIsolation_Text_Text();
    public static string get_ForNETFramework_Caption();
    public static string get_ForNETCoreSameAsDotnetTest_Caption();
    public static string get_Skip_Action_Text();
    public static string get_Kill_Action_Text();
    public static string get_UnitTestExplorer_Caption();
    public static string get_UNitTestSession_Caption();
    public static string get__AlwaysForTheseProcesses_Text();
    public static string get_AllTestsHaveFinishedButProcessesSpawned_Text();
    public static string get_OrphanedProcesses_Text();
    public static string get_UnitTestRunner_Caption();
    public static string get_LeaveRunning_Text();
    public static string get_KillOrphaned_Text();
    public static string get__DoNotShowAgain_Text();
    public static string get_TheProcess__HasFinishedRunningTests_Text();
    public static string get_PossibleReasonsAreIncorrectAsynchronous_Text();
    public static string get_Wait_Text();
    public static string get_Kill_Text();
    public static string get_WhyCanTIRunTests_Text();
    public static string get_NotRunnable__Text();
    public static string get_NotRunnableTest_Text();
    public static string get_Debug__Text();
    public static string get_Debug_Text();
    public static string get_AppendTo_Text();
    public static string get_AppendTo__Text();
    public static string get_More_Text();
    public static string get_Category__Text();
    public static string get_All_Text();
    public static string get_In__Text();
    public static string get_InAllTargetFrameworks_Text();
    public static string get_CreateNewSession_Text();
    public static string get_Run__Text();
    public static string get_Run_Text();
    public static string get_NotRunnableInvalidDeclaration_Text();
    public static string get_Install__Text();
    public static string get_NuGetPackage_IsNotInstalled_Text();
    public static string get_VisualStudioInstallationFolderIsNot_Text();
    public static string get_ExceptionOccurredDuringExploration_Text();
    public static string get_ExceptionOccurredDuringDiscovery_Text();
    public static string get_Declarations_Caption();
    public static string get_ChooseFile_Caption();
    public static string get_AnErrorOccurredDuringImportN__Text();
    public static string get_CouldNotImportSession_Caption();
    public static string get_UnitTestTree_Text();
    public static string get_Remove_Text();
    public static string get_ChildProcessName_Text();
    public static string get_ActionAuto_Text();
    public static string get_Add_Text();
    public static string get_Name_Text();
    public static string get_Value_Text();
    public static string get_LifetimeIsTerminated_Text();
    public static string get_ProjectIsNotValid_Text();
    public static string get_ProjectIsNotAUserProject_Text();
    public static string get_NotSupportedByProvider_Text();
    public static string get_CancellationRequested_Text();
    public static string get_ProjectDoesNotHaveOutputForTargetFramework_Text();
    public static string get_OutputDoesNotExistOnDisk_Text();
    public static string get__IsNotAValidTargetForAUnitTestProject_Text();
    public static string get_AppendToSession_Text();
    public static string get_AnErrorOccurredDuringExport___Text();
    public static string get_CouldNotExportSession_Caption();
    public static string get_AppendAllTestsFrom__Text();
    public static string get_BuildPolicy__Text();
    public static string get_Auto_Text();
    public static string get_AutoWholeSolution_Text();
    public static string get_Never_Text();
    public static string get_CurrentSession_Text();
    public static string get_Framework__Text();
    public static string get_FrameworkDefault__Text();
    public static string get_Platform__Text();
    public static string get_PlatformDefault__Text();
    public static string get_Failures_Caption();
    public static string get_RunningUnitTests_Text();
    public static string get_BuildFailed_Description_Text();
    public static string get_Building_Description_Text();
    public static string get_BuildSucceeded_Description_Text();
    public static string get_ExploringTests_Description_Text();
    public static string get_Finishing_Description_Text();
    public static string get_Running_Description_Text();
    public static string get_Starting_Description_Text();
    public static string get_Passed_Text();
    public static string get_Failed_Text();
    public static string get_Skipped_Text();
    public static string get_ShadowCopyCustomFileMask();
    public static string get_ShadowCopyRecursive();
    public static string get_FileMask_Caption();
    public static string get_CopyRecursively_Caption();
    public static string get_Diagnostics_Header_Text();
    public static string get_ArmActionText();
    public static string get_Arm64ActionText();
    public static string get_None_Text();
    public static string get_Native_Text();
    public static string get_Advanced_Text();
    public static string get_UnitTestingGroupName_TestHierarchy_Text();
    public static string get_UnitTestingGroupName_ProjectStructure_Text();
    public static string get_UnitTestingGroupName_Projects_Text();
    public static string get_UnitTestingGroupName_Namespaces_Text();
    public static string get_UnitTestingGroupName_ProjectsAndNamespaces_Text();
    public static string get_UnitTestingGroupName_Categories_Text();
    public static string get_UnitTestingGroupName_ProjectAndCategories_Text();
    public static string get_AllTestsFromSolution_Text();
    public static string get_AllTestsFrom__Text();
    public static string get_AllTestsFrom_TargetFramework_Text();
    public static string get_AllTestsFrom_0_Text();
    public static string get_AllTestsInCategory__Text();
    public static string get_Session_Text();
    public static string get_TestNotRun_Text();
    public static string get_RunWasAborted_Text();
    public static string get_RunWasCancelled_Text();
    public static string get_InAnotherTest_Text();
    public static string get_StackOverflowException_Text();
    public static string get_CannotConnectToTestRunner_Text();
    public static string get_ExitCodeIs_Text();
    public static string get_ExitCodeIs_WithError_Text();
    public static string get_TestsPassed_Failed_Ignored__Text();
    public static string get_UnitTestGroupingProvider_TestHierarchy();
    public static string get_UnitTestGroupingProvider_Category();
    public static string get_UnitTestGroupingProvider_Namespace();
    public static string get_UnitTestGroupingProvider_TargetFramework();
    public static string get_UnitTestGroupingProvider_Project();
    public static string get_UnitTestGroupingProvider_FileSystem();
    public static string get_UnitTestGroupingProvider_Duration();
    public static string get_UnitTesting_Session_TestCountPattern_Plural();
    public static string get_UnitTesting_Session_TestCountPattern_Singular();
    public static string get_UnitTesting_Session_FailedTestCountPattern_Plural();
    public static string get_UnitTesting_Session_FailedTestCountPattern_Singular();
    public static string get_UnitTesting_TestStatus_None();
    public static string get_UnitTesting_TestStatus_Unknown();
    public static string get_UnitTesting_TestStatus_Inconclusive();
    public static string get_UnitTesting_TestStatus_Ignored();
    public static string get_UnitTesting_TestStatus_Success();
    public static string get_UnitTesting_TestStatus_Failed();
    public static string get_UnitTesting_TestStatus_Aborted();
    public static string get_UnitTesting_TestStatus_Pending();
    public static string get_UnitTesting_TestStatus_Running();
    public static string get_PlatformType_Automatic_Name();
    public static string get_PlatformType_Automatic_Description();
    public static string get_PlatformType_X86_Name();
    public static string get_PlatformType_X86_Description();
    public static string get_PlatformType_X64_Name();
    public static string get_PlatformType_X64_Description();
    public static string get_PlatformType_Arm_Name();
    public static string get_PlatformType_Arm_Description();
    public static string get_PlatformType_Arm64_Name();
    public static string get_PlatformType_Arm64_Description();
    public static string get_PlatformMonoPreference_PreferCLR_Name();
    public static string get_PlatformMonoPreference_PreferCLR_Description();
    public static string get_PlatformMonoPreference_PreferMono_Name();
    public static string get_PlatformMonoPreference_PreferMono_Description();
    public static string get_PlatformVersion_Automatic_Name();
    public static string get_PlatformVersion_Automatic_Description();
    public static string get_PlatformVersion_Net20_ShortName();
    public static string get_PlatformVersion_Net20_Name();
    public static string get_PlatformVersion_Net20_Description();
    public static string get_PlatformVersion_Net40_ShortName();
    public static string get_PlatformVersion_Net40_Name();
    public static string get_PlatformVersion_Net40_Description();
    public static string get_PlatformVersion_Net45_ShortName();
    public static string get_PlatformVersion_Net45_Name();
    public static string get_PlatformVersion_Net45_Description();
    public static string get_PlatformVersion_Net46_ShortName();
    public static string get_PlatformVersion_Net46_Name();
    public static string get_PlatformVersion_Net46_Description();
    public static string get_PlatformVersion_Net47_ShortName();
    public static string get_PlatformVersion_Net47_Name();
    public static string get_PlatformVersion_Net47_Description();
    public static string get_PlatformVersion_NetCoreApp_ShortName();
    public static string get_PlatformVersion_NetCoreApp_Name();
    public static string get_PlatformVersion_NetCoreApp_Description();
    public static string get_AllTestsFilter_Name_All_Tests();
    public static string get_PassedTestsFilter_PassedTestsFilter_Passed_Tests();
    public static string get_FailedTestsFilter_FailedTestsFilter_Failed_Tests();
    public static string get_IgnoredTestsFilter_IgnoredTestsFilter_Ignored_Tests();
    public static string get_UnknownTestsFilter_UnknownTestsFilter_New_and_Outdated_Tests();
    public static string get_IgnoreReason_TestIsInIgnoredCategory();
    public static string get_TestDuration_Category_NotRun();
    public static string get_TestDuration_Category_Fast();
    public static string get_TestDuration_Category_Medium();
    public static string get_TestDuration_Category_Slow();
    public static string get_TestDuration_Category_Slower();
    public static string get_TestDuration_Category_Slowest();
    public static string get_TestDuration_ValueQualifier_Min();
    public static string get_TestDuration_ValueQualifier_Sec();
    public static string get_TestDuration_ValueQualifier_Ms();
}
public class JetBrains.ReSharper.UnitTestFramework.Resources.UnitTestingThemedIcons : object {
}
public enum JetBrains.ReSharper.UnitTestFramework.Session.BuildPolicy : Enum {
    public byte value__;
    public static BuildPolicy Automatic;
    [ObsoleteAttribute]
public static BuildPolicy Always;
    public static BuildPolicy Never;
    public static BuildPolicy WholeSolution;
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.UnitTestFramework.Session.BuildPolicyExtensions : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static string ToShortString(BuildPolicy buildPolicy);
}
public class JetBrains.ReSharper.UnitTestFramework.Session.ContinuousTestingMode : object {
    private static IDictionary`2<int, string> ourModesRegistry;
    public static ContinuousTestingMode Off;
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    public int Id { get; }
    public string PresentableName { get; }
    private ContinuousTestingMode(int id);
    private static ContinuousTestingMode();
    public static ContinuousTestingMode CreateContinuousTestingMode(int id, string presentableName);
    public static ContinuousTestingMode FromId(int id);
    [CompilerGeneratedAttribute]
public int get_Id();
    public string get_PresentableName();
    public sealed virtual bool Equals(ContinuousTestingMode other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(ContinuousTestingMode left, ContinuousTestingMode right);
    public static bool op_Inequality(ContinuousTestingMode left, ContinuousTestingMode right);
}
public interface JetBrains.ReSharper.UnitTestFramework.Session.ITestRunEvent {
    [NotNullAttribute]
public IUnitTestSession Session { get; }
    public abstract virtual IUnitTestSession get_Session();
}
public interface JetBrains.ReSharper.UnitTestFramework.Session.IUnitTestSession {
    [NotNullAttribute]
public Lifetime Lifetime { get; }
    [NotNullAttribute]
public UpgradableReadWriteLock Locks { get; }
    [NotNullAttribute]
public Guid Id { get; }
    [NotNullAttribute]
public IProperty`1<IUnitTestElementCriterion> Criterion { get; }
    [NotNullAttribute]
public IProperty`1<IUnitTestLaunch> Launch { get; }
    [NotNullAttribute]
public IProperty`1<string> Name { get; }
    [NotNullAttribute]
public IProperty`1<bool> IsIdle { get; }
    [NotNullAttribute]
public IProperty`1<bool> IsLocked { get; }
    [NotNullAttribute]
public IProperty`1<bool> IsActive { get; }
    [NotNullAttribute]
public IProperty`1<bool> IsUpdating { get; }
    [NotNullAttribute]
public IProperty`1<BuildPolicy> BuildPolicy { get; }
    [NotNullAttribute]
public IProperty`1<Nullable`1<PlatformType>> PlatformType { get; }
    [NotNullAttribute]
public IProperty`1<Nullable`1<PlatformVersion>> FrameworkVersion { get; }
    [NotNullAttribute]
public IProperty`1<Nullable`1<PlatformMonoPreference>> PlatformMonoPreference { get; }
    [NotNullAttribute]
public IProperty`1<bool> ContinuousTestingIsOn { get; }
    [NotNullAttribute]
public IProperty`1<ContinuousTestingMode> ContinuousTestingMode { get; }
    [NotNullAttribute]
[ItemNotNullAttribute]
public IUnitTestSessionElements Elements { get; }
    public abstract virtual Lifetime get_Lifetime();
    public abstract virtual UpgradableReadWriteLock get_Locks();
    public abstract virtual Guid get_Id();
    public abstract virtual IProperty`1<IUnitTestElementCriterion> get_Criterion();
    public abstract virtual IProperty`1<IUnitTestLaunch> get_Launch();
    public abstract virtual IProperty`1<string> get_Name();
    public abstract virtual IProperty`1<bool> get_IsIdle();
    public abstract virtual IProperty`1<bool> get_IsLocked();
    public abstract virtual IProperty`1<bool> get_IsActive();
    public abstract virtual IProperty`1<bool> get_IsUpdating();
    public abstract virtual IProperty`1<BuildPolicy> get_BuildPolicy();
    public abstract virtual IProperty`1<Nullable`1<PlatformType>> get_PlatformType();
    public abstract virtual IProperty`1<Nullable`1<PlatformVersion>> get_FrameworkVersion();
    public abstract virtual IProperty`1<Nullable`1<PlatformMonoPreference>> get_PlatformMonoPreference();
    public abstract virtual IProperty`1<bool> get_ContinuousTestingIsOn();
    public abstract virtual IProperty`1<ContinuousTestingMode> get_ContinuousTestingMode();
    public abstract virtual IUnitTestSessionElements get_Elements();
}
public interface JetBrains.ReSharper.UnitTestFramework.Session.IUnitTestSessionElements {
}
public interface JetBrains.ReSharper.UnitTestFramework.Session.IUnitTestSessionManager {
    [CanBeNullAttribute]
public IUnitTestSession ActiveSession { get; }
    [NotNullAttribute]
public IEnumerable`1<IUnitTestSession> Sessions { get; }
    public abstract virtual IUnitTestSession get_ActiveSession();
    public abstract virtual IEnumerable`1<IUnitTestSession> get_Sessions();
    [NotNullAttribute]
public abstract virtual Task OpenSession(IUnitTestSession session, bool activate, IReadOnlyCollection`1<Int32`1<IUnitTestElement>> elementsToScopeOn);
    [NotNullAttribute]
public abstract virtual Task CloseSession(IUnitTestSession session);
}
public interface JetBrains.ReSharper.UnitTestFramework.Session.IUnitTestSessionRepository {
    [NotNullAttribute]
public ISignal`1<IUnitTestSession> SessionCreated { get; }
    [NotNullAttribute]
public ISignal`1<IUnitTestSession> SessionDestroyed { get; }
    [NotNullAttribute]
public IProperty`1<bool> SessionsLoaded { get; }
    [CanBeNullAttribute]
public abstract virtual IUnitTestSession GetById(Guid id);
    [NotNullAttribute]
public abstract virtual IQueryable`1<IUnitTestSession> Query();
    [NotNullAttribute]
public abstract virtual IUnitTestSession CreateSession(IUnitTestElementCriterion criterion, string name, Nullable`1<Guid> id);
    public abstract virtual void DestroySession(IUnitTestSession session);
    [NotNullAttribute]
public abstract virtual IUnitTestSession LoadSessionFrom(SessionState sessionState, Nullable`1<Guid> id);
    public abstract virtual ISignal`1<IUnitTestSession> get_SessionCreated();
    public abstract virtual ISignal`1<IUnitTestSession> get_SessionDestroyed();
    public abstract virtual IProperty`1<bool> get_SessionsLoaded();
}
[ContentPropertyAttribute("Criteria")]
public class JetBrains.ReSharper.UnitTestFramework.Session.Serialization.And : object {
    [CompilerGeneratedAttribute]
private IList`1<IUnitTestElementCriterionDto> <Criteria>k__BackingField;
    [DesignerSerializationVisibilityAttribute("2")]
public IList`1<IUnitTestElementCriterionDto> Criteria { get; private set; }
    public And(IUnitTestElementCriterionDto[] criteria);
    public And(IEnumerable`1<IUnitTestElementCriterionDto> criteria);
    [CompilerGeneratedAttribute]
public IList`1<IUnitTestElementCriterionDto> get_Criteria();
    [CompilerGeneratedAttribute]
private void set_Criteria(IList`1<IUnitTestElementCriterionDto> value);
    public sealed virtual IUnitTestElementCriterion ToCriterion(IUnitTestingFacade facade);
}
[ContentPropertyAttribute("Name")]
public class JetBrains.ReSharper.UnitTestFramework.Session.Serialization.Category : UnitTestElementCriterionDto`1<CategoryCriterion> {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    public virtual CategoryCriterion ToCriterion(IUnitTestingFacade facade);
}
public interface JetBrains.ReSharper.UnitTestFramework.Session.Serialization.ISessionStateSerializer {
    public abstract virtual void Serialize(SessionState session, TextWriter writer);
    public abstract virtual SessionState Deserialize(TextReader reader);
}
public interface JetBrains.ReSharper.UnitTestFramework.Session.Serialization.IUnitTestElementCriterionDto {
    [NotNullAttribute]
public abstract virtual IUnitTestElementCriterion ToCriterion(IUnitTestingFacade facade);
}
[ContentPropertyAttribute("Name")]
public class JetBrains.ReSharper.UnitTestFramework.Session.Serialization.Namespace : UnitTestElementCriterionDto`1<NamespaceCriterion> {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    public virtual NamespaceCriterion ToCriterion(IUnitTestingFacade facade);
}
[ContentPropertyAttribute("Criterion")]
public class JetBrains.ReSharper.UnitTestFramework.Session.Serialization.Not : object {
    [CompilerGeneratedAttribute]
private IUnitTestElementCriterionDto <Criterion>k__BackingField;
    public IUnitTestElementCriterionDto Criterion { get; public set; }
    [CompilerGeneratedAttribute]
public IUnitTestElementCriterionDto get_Criterion();
    [CompilerGeneratedAttribute]
public void set_Criterion(IUnitTestElementCriterionDto value);
    public sealed virtual IUnitTestElementCriterion ToCriterion(IUnitTestingFacade facade);
}
public class JetBrains.ReSharper.UnitTestFramework.Session.Serialization.Nothing : UnitTestElementCriterionDto`1<NothingCriterion> {
    public virtual NothingCriterion ToCriterion(IUnitTestingFacade facade);
}
[ContentPropertyAttribute("Criteria")]
public class JetBrains.ReSharper.UnitTestFramework.Session.Serialization.Or : object {
    [CompilerGeneratedAttribute]
private IList`1<IUnitTestElementCriterionDto> <Criteria>k__BackingField;
    [DesignerSerializationVisibilityAttribute("2")]
public IList`1<IUnitTestElementCriterionDto> Criteria { get; private set; }
    public Or(IUnitTestElementCriterionDto[] criteria);
    public Or(IEnumerable`1<IUnitTestElementCriterionDto> criteria);
    [CompilerGeneratedAttribute]
public IList`1<IUnitTestElementCriterionDto> get_Criteria();
    [CompilerGeneratedAttribute]
private void set_Criteria(IList`1<IUnitTestElementCriterionDto> value);
    public sealed virtual IUnitTestElementCriterion ToCriterion(IUnitTestingFacade facade);
}
public class JetBrains.ReSharper.UnitTestFramework.Session.Serialization.Project : UnitTestElementCriterionDto`1<ProjectCriterion> {
    [CompilerGeneratedAttribute]
private string <Presentation>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <Location>k__BackingField;
    public string Presentation { get; public set; }
    public FileSystemPath Location { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Presentation();
    [CompilerGeneratedAttribute]
public void set_Presentation(string value);
    [CompilerGeneratedAttribute]
public FileSystemPath get_Location();
    [CompilerGeneratedAttribute]
public void set_Location(FileSystemPath value);
    public virtual ProjectCriterion ToCriterion(IUnitTestingFacade facade);
}
[ContentPropertyAttribute("PersistentId")]
public class JetBrains.ReSharper.UnitTestFramework.Session.Serialization.ProjectFile : UnitTestElementCriterionDto`1<ProjectFileCriterion> {
    [CompilerGeneratedAttribute]
private string <PersistentId>k__BackingField;
    public string PersistentId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_PersistentId();
    [CompilerGeneratedAttribute]
public void set_PersistentId(string value);
    public virtual ProjectFileCriterion ToCriterion(IUnitTestingFacade facade);
}
[ContentPropertyAttribute("PersistentId")]
public class JetBrains.ReSharper.UnitTestFramework.Session.Serialization.ProjectFolder : UnitTestElementCriterionDto`1<ProjectFolderCriterion> {
    [CompilerGeneratedAttribute]
private string <PersistentId>k__BackingField;
    public string PersistentId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_PersistentId();
    [CompilerGeneratedAttribute]
public void set_PersistentId(string value);
    public virtual ProjectFolderCriterion ToCriterion(IUnitTestingFacade facade);
}
[ValueSerializerAttribute("JetBrains.ReSharper.UnitTestFramework.Session.Serialization.SessionStateSerializer")]
[ContentPropertyAttribute("Criterion")]
public class JetBrains.ReSharper.UnitTestFramework.Session.Serialization.SessionState : object {
    [NotNullAttribute]
public static SessionState Invalid;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IUnitTestElementCriterionDto <Criterion>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLocked>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsActive>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<PlatformVersion> <FrameworkVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<PlatformType> <PlatformType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<PlatformMonoPreference> <PlatformMonoPreference>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ContinuousTestingIsOn>k__BackingField;
    [CompilerGeneratedAttribute]
private ContinuousTestingMode <ContinuousTestingMode>k__BackingField;
    public string Name { get; public set; }
    public IUnitTestElementCriterionDto Criterion { get; public set; }
    [DefaultValueAttribute("False")]
public bool IsLocked { get; public set; }
    [DefaultValueAttribute("False")]
public bool IsActive { get; public set; }
    [DefaultValueAttribute("")]
public Nullable`1<PlatformVersion> FrameworkVersion { get; public set; }
    [DefaultValueAttribute("")]
public Nullable`1<PlatformType> PlatformType { get; public set; }
    [DefaultValueAttribute("")]
public Nullable`1<PlatformMonoPreference> PlatformMonoPreference { get; public set; }
    [DefaultValueAttribute("False")]
public bool ContinuousTestingIsOn { get; public set; }
    [TypeConverterAttribute("JetBrains.ReSharper.UnitTestFramework.Session.ContinuousTestingMode/Converter")]
public ContinuousTestingMode ContinuousTestingMode { get; public set; }
    private static SessionState();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public IUnitTestElementCriterionDto get_Criterion();
    [CompilerGeneratedAttribute]
public void set_Criterion(IUnitTestElementCriterionDto value);
    [CompilerGeneratedAttribute]
public bool get_IsLocked();
    [CompilerGeneratedAttribute]
public void set_IsLocked(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsActive();
    [CompilerGeneratedAttribute]
public void set_IsActive(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<PlatformVersion> get_FrameworkVersion();
    [CompilerGeneratedAttribute]
public void set_FrameworkVersion(Nullable`1<PlatformVersion> value);
    [CompilerGeneratedAttribute]
public Nullable`1<PlatformType> get_PlatformType();
    [CompilerGeneratedAttribute]
public void set_PlatformType(Nullable`1<PlatformType> value);
    [CompilerGeneratedAttribute]
public Nullable`1<PlatformMonoPreference> get_PlatformMonoPreference();
    [CompilerGeneratedAttribute]
public void set_PlatformMonoPreference(Nullable`1<PlatformMonoPreference> value);
    [CompilerGeneratedAttribute]
public bool get_ContinuousTestingIsOn();
    [CompilerGeneratedAttribute]
public void set_ContinuousTestingIsOn(bool value);
    [CompilerGeneratedAttribute]
public ContinuousTestingMode get_ContinuousTestingMode();
    [CompilerGeneratedAttribute]
public void set_ContinuousTestingMode(ContinuousTestingMode value);
    public static SessionState From(IUnitTestSession session);
    protected bool Equals(SessionState other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.ReSharper.UnitTestFramework.Session.Serialization.SessionStateSerializer : ValueSerializer {
    private static ILogger ourLogger;
    private static bool ourReentrancyGuard;
    private TimeSpan myTimeout;
    public SessionStateSerializer(TimeSpan timeout);
    private static SessionStateSerializer();
    public virtual bool CanConvertToString(object value, IValueSerializerContext context);
    public virtual string ConvertToString(object value, IValueSerializerContext context);
    public virtual bool CanConvertFromString(string value, IValueSerializerContext context);
    public virtual object ConvertFromString(string value, IValueSerializerContext context);
    public sealed virtual void Serialize(SessionState session, TextWriter textWriter);
    public sealed virtual SessionState Deserialize(TextReader reader);
}
[ContentPropertyAttribute("TestId")]
public class JetBrains.ReSharper.UnitTestFramework.Session.Serialization.ShortTestId : UnitTestElementCriterionDto`1<TestIdCriterion> {
    [CompilerGeneratedAttribute]
private string <TestId>k__BackingField;
    public string TestId { get; public set; }
    public ShortTestId(string testId);
    [CompilerGeneratedAttribute]
public string get_TestId();
    [CompilerGeneratedAttribute]
public void set_TestId(string value);
    public virtual TestIdCriterion ToCriterion(IUnitTestingFacade facade);
}
public class JetBrains.ReSharper.UnitTestFramework.Session.Serialization.Solution : UnitTestElementCriterionDto`1<SolutionCriterion> {
    public virtual SolutionCriterion ToCriterion(IUnitTestingFacade facade);
}
[ContentPropertyAttribute("Name")]
public class JetBrains.ReSharper.UnitTestFramework.Session.Serialization.TargetFrameworkId : UnitTestElementCriterionDto`1<TargetFrameworkIdCriterion> {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    public virtual TargetFrameworkIdCriterion ToCriterion(IUnitTestingFacade facade);
}
[ContentPropertyAttribute("Ids")]
public class JetBrains.ReSharper.UnitTestFramework.Session.Serialization.Test : UnitTestElementCriterionDto`1<TestElementCriterion> {
    [CompilerGeneratedAttribute]
private ISet`1<TestId> <Ids>k__BackingField;
    [DesignerSerializationVisibilityAttribute("2")]
public ISet`1<TestId> Ids { get; private set; }
    public Test(TestId[] ids);
    public Test(IEnumerable`1<TestId> ids);
    [CompilerGeneratedAttribute]
public ISet`1<TestId> get_Ids();
    [CompilerGeneratedAttribute]
private void set_Ids(ISet`1<TestId> value);
    public virtual TestElementCriterion ToCriterion(IUnitTestingFacade facade);
}
[ContentPropertyAttribute("Ids")]
public class JetBrains.ReSharper.UnitTestFramework.Session.Serialization.TestAncestor : UnitTestElementCriterionDto`1<TestAncestorCriterion> {
    [CompilerGeneratedAttribute]
private ISet`1<TestId> <Ids>k__BackingField;
    [DesignerSerializationVisibilityAttribute("2")]
public ISet`1<TestId> Ids { get; private set; }
    public TestAncestor(TestId[] ids);
    public TestAncestor(IEnumerable`1<TestId> ids);
    [CompilerGeneratedAttribute]
public ISet`1<TestId> get_Ids();
    [CompilerGeneratedAttribute]
private void set_Ids(ISet`1<TestId> value);
    public virtual TestAncestorCriterion ToCriterion(IUnitTestingFacade facade);
}
[TypeConverterAttribute("JetBrains.ReSharper.UnitTestFramework.Session.Serialization.TestIdConverter")]
public class JetBrains.ReSharper.UnitTestFramework.Session.Serialization.TestId : object {
    [CompilerGeneratedAttribute]
private string <ProviderId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetFrameworkId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Salt>k__BackingField;
    public string ProviderId { get; public set; }
    public string ProjectId { get; public set; }
    public string TargetFrameworkId { get; public set; }
    public string Id { get; public set; }
    public string Salt { get; public set; }
    public TestId(UnitTestElementId id);
    [CompilerGeneratedAttribute]
public string get_ProviderId();
    [CompilerGeneratedAttribute]
public void set_ProviderId(string value);
    [CompilerGeneratedAttribute]
public string get_ProjectId();
    [CompilerGeneratedAttribute]
public void set_ProjectId(string value);
    [CompilerGeneratedAttribute]
public string get_TargetFrameworkId();
    [CompilerGeneratedAttribute]
public void set_TargetFrameworkId(string value);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_Salt();
    [CompilerGeneratedAttribute]
public void set_Salt(string value);
    public virtual string ToString();
}
public class JetBrains.ReSharper.UnitTestFramework.Session.Serialization.TestIdConverter : TypeConverter {
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public static class JetBrains.ReSharper.UnitTestFramework.Session.Serialization.UnitTestElementCriterionDto : object {
    [NotNullAttribute]
public static IUnitTestElementCriterionDto From(IUnitTestElementCriterion criterion);
}
public abstract class JetBrains.ReSharper.UnitTestFramework.Session.Serialization.UnitTestElementCriterionDto`1 : object {
    public abstract virtual T ToCriterion(IUnitTestingFacade facade);
    private sealed virtual override IUnitTestElementCriterion JetBrains.ReSharper.UnitTestFramework.Session.Serialization.IUnitTestElementCriterionDto.ToCriterion(IUnitTestingFacade facade);
}
public class JetBrains.ReSharper.UnitTestFramework.Session.TestRunEventArgs : object {
    [CompilerGeneratedAttribute]
private IUnitTestSession <Session>k__BackingField;
    public IUnitTestSession Session { get; }
    public TestRunEventArgs(IUnitTestSession session);
    [CompilerGeneratedAttribute]
public sealed virtual IUnitTestSession get_Session();
}
public class JetBrains.ReSharper.UnitTestFramework.Session.UnitTestSession : UserDataHolder {
    [CompilerGeneratedAttribute]
private Lifetime <Lifetime>k__BackingField;
    [CompilerGeneratedAttribute]
private UpgradableReadWriteLock <Locks>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<IUnitTestElementCriterion> <Criterion>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<IUnitTestLaunch> <Launch>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsIdle>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsLocked>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsActive>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsUpdating>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<BuildPolicy> <BuildPolicy>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<Nullable`1<PlatformType>> <PlatformType>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<Nullable`1<PlatformVersion>> <FrameworkVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<Nullable`1<PlatformMonoPreference>> <PlatformMonoPreference>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <ContinuousTestingIsOn>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<ContinuousTestingMode> <ContinuousTestingMode>k__BackingField;
    [CompilerGeneratedAttribute]
private IUnitTestSessionElements <Elements>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSuspended>k__BackingField;
    public Lifetime Lifetime { get; }
    public UpgradableReadWriteLock Locks { get; }
    public Guid Id { get; }
    public IProperty`1<IUnitTestElementCriterion> Criterion { get; }
    public IProperty`1<IUnitTestLaunch> Launch { get; }
    public IProperty`1<string> Name { get; }
    public IProperty`1<bool> IsIdle { get; }
    public IProperty`1<bool> IsLocked { get; }
    public IProperty`1<bool> IsActive { get; }
    public IProperty`1<bool> IsUpdating { get; }
    public IProperty`1<BuildPolicy> BuildPolicy { get; }
    public IProperty`1<Nullable`1<PlatformType>> PlatformType { get; }
    public IProperty`1<Nullable`1<PlatformVersion>> FrameworkVersion { get; }
    public IProperty`1<Nullable`1<PlatformMonoPreference>> PlatformMonoPreference { get; }
    public IProperty`1<bool> ContinuousTestingIsOn { get; }
    public IProperty`1<ContinuousTestingMode> ContinuousTestingMode { get; }
    public IUnitTestSessionElements Elements { get; }
    public bool IsSuspended { get; private set; }
    public UnitTestSession(IOptimizedPersistentSortedMap`2<Guid, IReadOnlySet`1<Int32`1<IUnitTestElement>>> store, Lifetime lifetime, Guid id, IProperty`1<BuildPolicy> buildPolicy, IUnitTestElementCriterion criterion, string name);
    [CompilerGeneratedAttribute]
public sealed virtual Lifetime get_Lifetime();
    [CompilerGeneratedAttribute]
public sealed virtual UpgradableReadWriteLock get_Locks();
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_Id();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<IUnitTestElementCriterion> get_Criterion();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<IUnitTestLaunch> get_Launch();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<string> get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsIdle();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsLocked();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsActive();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsUpdating();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<BuildPolicy> get_BuildPolicy();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<Nullable`1<PlatformType>> get_PlatformType();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<Nullable`1<PlatformVersion>> get_FrameworkVersion();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<Nullable`1<PlatformMonoPreference>> get_PlatformMonoPreference();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_ContinuousTestingIsOn();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<ContinuousTestingMode> get_ContinuousTestingMode();
    [CompilerGeneratedAttribute]
public sealed virtual IUnitTestSessionElements get_Elements();
    public virtual string ToString();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsSuspended();
    [CompilerGeneratedAttribute]
private void set_IsSuspended(bool value);
    public sealed virtual void Suspend();
    public sealed virtual void Resume();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.UnitTestFramework.Session.UnitTestSessionActivityTracking : object {
    public UnitTestSessionActivityTracking(Lifetime lifetime, IEventContext context, IUnitTestSessionRepository sessionRepository);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.UnitTestFramework.Session.UnitTestSessionExtensions : object {
    [ExtensionAttribute]
public static void AddElementsMatching(IUnitTestSession session, IUnitTestElementCriterion criterion);
    [ExtensionAttribute]
public static void ExcludeElementsMatching(IUnitTestSession session, IUnitTestElementCriterion criterion);
}
[SolutionComponentAttribute("4")]
internal class JetBrains.ReSharper.UnitTestFramework.Session.UnitTestSessionManager : object {
    [NotNullAttribute]
private IUnitTestSessionRepository myRepository;
    [NotNullAttribute]
private IUnitTestSessionConductor myConductor;
    public IEnumerable`1<IUnitTestSession> Sessions { get; }
    public IUnitTestSession ActiveSession { get; }
    public UnitTestSessionManager(IUnitTestSessionRepository repository, IUnitTestSessionConductor conductor);
    public sealed virtual IEnumerable`1<IUnitTestSession> get_Sessions();
    public sealed virtual IUnitTestSession get_ActiveSession();
    [AsyncStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Session.UnitTestSessionManager/<OpenSession>d__7")]
public virtual Task OpenSession(IUnitTestSession session, bool activate, IReadOnlyCollection`1<Int32`1<IUnitTestElement>> elementsToScopeOn);
    public sealed virtual Task CloseSession(IUnitTestSession session);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.UnitTestFramework.Session.UnitTestSessionManagerExtensions : object {
    [ExtensionAttribute]
public static void CloseAllSessions(IUnitTestSessionManager manager);
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.UnitTestFramework.Session.UnitTestSessionRegistrar : object {
    public UnitTestSessionRegistrar(Lifetime lifetime, IUnitTestSessionRepository sessionRepository, IUnitTestResultManager resultManager);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.UnitTestFramework.Session.UnitTestSessionRepository : object {
    [NotNullAttribute]
private Lifetime myLifetime;
    [NotNullAttribute]
private IUnitTestingSettings mySettings;
    [NotNullAttribute]
private IContextBoundSettingsStore myBoundContext;
    [NotNullAttribute]
private IDictionary`2<Guid, IUnitTestSession> mySessions;
    [NotNullAttribute]
private IDictionary`2<Guid, LifetimeDefinition> mySessionLifetimes;
    [NotNullAttribute]
private ReentrantWriterPreferenceReadWriteLock myLock;
    [NotNullAttribute]
private OptimizedPersistentSortedMap`2<Guid, IReadOnlySet`1<Int32`1<IUnitTestElement>>> myMaterializedIdsStore;
    [NotNullAttribute]
private ILogger myLogger;
    private int mySessionsLoaded;
    [CompilerGeneratedAttribute]
private ISignal`1<IUnitTestSession> <SessionCreated>k__BackingField;
    [CompilerGeneratedAttribute]
private ISignal`1<IUnitTestSession> <SessionDestroyed>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <SessionsLoaded>k__BackingField;
    public ISignal`1<IUnitTestSession> SessionCreated { get; }
    public ISignal`1<IUnitTestSession> SessionDestroyed { get; }
    public IProperty`1<bool> SessionsLoaded { get; }
    public UnitTestSessionRepository(Lifetime lifetime, ISolution solution, ISettingsStore settingsStore, IPersistentIndexManager pim, IUnitTestingSettings utSettings, ILogger logger);
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<IUnitTestSession> get_SessionCreated();
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<IUnitTestSession> get_SessionDestroyed();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_SessionsLoaded();
    public sealed virtual IUnitTestSession LoadSessionFrom(SessionState state, Nullable`1<Guid> id);
    public sealed virtual IUnitTestSession CreateSession(IUnitTestElementCriterion criterion, string name, Nullable`1<Guid> id);
    private IUnitTestSession CreateSession(IUnitTestElementCriterion criterion, Guid id, string name, bool isLocked, bool isActive, bool continuousTestingIsOn, ContinuousTestingMode continuousTestingMode, Nullable`1<PlatformVersion> frameworkVersion, Nullable`1<PlatformType> platformType, Nullable`1<PlatformMonoPreference> platformMonoPreference);
    private string SuggestUniqueName(string name);
    private bool SessionExistsWithName(string name);
    public sealed virtual IUnitTestSession GetById(Guid id);
    public sealed virtual IQueryable`1<IUnitTestSession> Query();
    private void EnsureSessionsAreLoaded();
    private void LoadSessionsFromPersistentStorage();
    private void PersistSessionWhenModified(Lifetime sessionLifetime, IUnitTestSession session);
    public sealed virtual void DestroySession(IUnitTestSession session);
}
[SettingsKeyAttribute("JetBrains.ReSharper.UnitTestFramework.Settings.UnitTestingSettings", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "UnitTestingSessionsSettingDescription")]
public class JetBrains.ReSharper.UnitTestFramework.Session.UnitTestSessionStore : object {
    [SettingsIndexedEntryAttribute("JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "SessionsSettingDescription")]
public IIndexedEntry`2<string, SessionState> Sessions;
}
public class JetBrains.ReSharper.UnitTestFramework.Session.UnitTestSessionViewModelState : object {
    public bool AutoScrollOutput;
    public bool ShowDuration;
    public bool TrackRunningElement;
    public String[] Grouping;
    public object FilterValue;
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.UnitTestFramework.Session.UnitTestSessionViewModelStateExtensions : object {
    [ExtensionAttribute]
public static void Apply(UnitTestSessionViewModelState state, IUnitTestSessionTreeViewModel viewModel, ISolution solution);
    private static UnitTestingGroupingSelection GetGrouping(UnitTestSessionViewModelState state, ISolution solution, IUnitTestSessionTreeViewModel viewModel);
}
public enum JetBrains.ReSharper.UnitTestFramework.Settings.HangingTestRunnerResponse : Enum {
    public int value__;
    public static HangingTestRunnerResponse AskUser;
    public static HangingTestRunnerResponse WaitForExit;
    public static HangingTestRunnerResponse KillProcess;
}
public interface JetBrains.ReSharper.UnitTestFramework.Settings.IHangingTestRunnerSettings {
    [NotNullAttribute]
public IProperty`1<int> ExitTimeout { get; }
    [NotNullAttribute]
public IProperty`1<HangingTestRunnerResponse> Response { get; }
    public abstract virtual IProperty`1<int> get_ExitTimeout();
    public abstract virtual IProperty`1<HangingTestRunnerResponse> get_Response();
}
public interface JetBrains.ReSharper.UnitTestFramework.Settings.IShadowCopySettings {
    [NotNullAttribute]
public IProperty`1<ShadowCopyOption> Mode { get; }
    [NotNullAttribute]
public IProperty`1<string> FileMask { get; }
    [NotNullAttribute]
public IProperty`1<bool> IsRecursive { get; }
    public abstract virtual IProperty`1<ShadowCopyOption> get_Mode();
    public abstract virtual IProperty`1<string> get_FileMask();
    public abstract virtual IProperty`1<bool> get_IsRecursive();
}
public interface JetBrains.ReSharper.UnitTestFramework.Settings.ISpawnedProcessesSettings {
    [NotNullAttribute]
public IProperty`1<int> ExitTimeout { get; }
    [NotNullAttribute]
public IProperty`1<SpawnedProcessesResponse> OverallResponse { get; }
    [NotNullAttribute]
public IIndexedEntry`2<string, SpawnedProcessesResponse> KnownResponses { get; }
    public abstract virtual IProperty`1<int> get_ExitTimeout();
    public abstract virtual IProperty`1<SpawnedProcessesResponse> get_OverallResponse();
    public abstract virtual IIndexedEntry`2<string, SpawnedProcessesResponse> get_KnownResponses();
}
public interface JetBrains.ReSharper.UnitTestFramework.Settings.IUnitTestExplorerSettings {
    [NotNullAttribute]
public IProperty`1<String[]> Grouping { get; }
    [NotNullAttribute]
public IProperty`1<bool> ShowSkippedResults { get; }
    public abstract virtual IProperty`1<String[]> get_Grouping();
    public abstract virtual IProperty`1<bool> get_ShowSkippedResults();
}
public interface JetBrains.ReSharper.UnitTestFramework.Settings.IUnitTestingSettings {
    [NotNullAttribute]
public IProperty`1<bool> ShouldPersistSessions { get; }
    [NotNullAttribute]
public IProperty`1<int> MaxParallelRunsInLaunch { get; }
    [NotNullAttribute]
public IProperty`1<ISet`1<UnitTestElementCategory>> ExcludedCategories { get; }
    [NotNullAttribute]
public IUnitTestSessionSettings Session { get; }
    [NotNullAttribute]
public IUnitTestExplorerSettings Explorer { get; }
    [NotNullAttribute]
public IUnitTestRunnerSettings TestRunner { get; }
    public abstract virtual IProperty`1<bool> get_ShouldPersistSessions();
    public abstract virtual IProperty`1<int> get_MaxParallelRunsInLaunch();
    public abstract virtual IProperty`1<ISet`1<UnitTestElementCategory>> get_ExcludedCategories();
    public abstract virtual IUnitTestSessionSettings get_Session();
    public abstract virtual IUnitTestExplorerSettings get_Explorer();
    public abstract virtual IUnitTestRunnerSettings get_TestRunner();
}
public interface JetBrains.ReSharper.UnitTestFramework.Settings.IUnitTestRunnerSettings {
    [NotNullAttribute]
public IProperty`1<bool> UseCustomStartDirectory { get; }
    [NotNullAttribute]
public IProperty`1<string> CustomStartDirectory { get; }
    [NotNullAttribute]
public IShadowCopySettings ShadowCopy { get; }
    [NotNullAttribute]
public IProperty`1<Nullable`1<bool>> SynchronousEvents { get; }
    [NotNullAttribute]
public IProperty`1<Nullable`1<bool>> DisableParallelization { get; }
    [NotNullAttribute]
public IProperty`1<Nullable`1<bool>> KeepAlive { get; }
    [NotNullAttribute]
public IProperty`1<bool> NoIsolationNetFramework { get; }
    [NotNullAttribute]
public IProperty`1<bool> NoIsolationNetCore { get; }
    [NotNullAttribute]
public IProperty`1<Nullable`1<TimeSpan>> ResultEventsFrequency { get; }
    [NotNullAttribute]
public IProperty`1<Nullable`1<TimeSpan>> ResultEventsTimeout { get; }
    [NotNullAttribute]
public IHangingTestRunnerSettings HangingTestRunner { get; }
    [NotNullAttribute]
public ISpawnedProcessesSettings SpawnedProcesses { get; }
    [NotNullAttribute]
public IProperty`1<IDictionary`2<string, string>> EnvironmentVariables { get; }
    [NotNullAttribute]
public IProperty`1<bool> EnableDebug { get; }
    [NotNullAttribute]
public IProperty`1<bool> CaptureOutput { get; }
    [NotNullAttribute]
public IProperty`1<LoggingLevel> LoggingInternal { get; }
    public abstract virtual IProperty`1<bool> get_UseCustomStartDirectory();
    public abstract virtual IProperty`1<string> get_CustomStartDirectory();
    public abstract virtual IShadowCopySettings get_ShadowCopy();
    public abstract virtual IProperty`1<Nullable`1<bool>> get_SynchronousEvents();
    public abstract virtual IProperty`1<Nullable`1<bool>> get_DisableParallelization();
    public abstract virtual IProperty`1<Nullable`1<bool>> get_KeepAlive();
    public abstract virtual IProperty`1<bool> get_NoIsolationNetFramework();
    public abstract virtual IProperty`1<bool> get_NoIsolationNetCore();
    public abstract virtual IProperty`1<Nullable`1<TimeSpan>> get_ResultEventsFrequency();
    public abstract virtual IProperty`1<Nullable`1<TimeSpan>> get_ResultEventsTimeout();
    public abstract virtual IHangingTestRunnerSettings get_HangingTestRunner();
    public abstract virtual ISpawnedProcessesSettings get_SpawnedProcesses();
    public abstract virtual IProperty`1<IDictionary`2<string, string>> get_EnvironmentVariables();
    public abstract virtual IProperty`1<bool> get_EnableDebug();
    public abstract virtual IProperty`1<bool> get_CaptureOutput();
    public abstract virtual IProperty`1<LoggingLevel> get_LoggingInternal();
}
public interface JetBrains.ReSharper.UnitTestFramework.Settings.IUnitTestSessionSettings {
    [NotNullAttribute]
public IProperty`1<LoggingLevel> LogSeverity { get; }
    [NotNullAttribute]
public IProperty`1<int> OutputLineNumberLimit { get; }
    [NotNullAttribute]
public IProperty`1<bool> ActivateOnRun { get; }
    [NotNullAttribute]
public IProperty`1<bool> AutoScrollOutput { get; }
    [NotNullAttribute]
public IProperty`1<bool> ShowDuration { get; }
    [NotNullAttribute]
public IProperty`1<bool> MayExpandToTest { get; }
    [NotNullAttribute]
public IProperty`1<bool> TrackActiveElement { get; }
    [NotNullAttribute]
public IProperty`1<String[]> Grouping { get; }
    [NotNullAttribute]
public IProperty`1<BuildPolicy> BuildPolicy { get; }
    [NotNullAttribute]
public IProperty`1<PlatformType> PlatformType { get; }
    [NotNullAttribute]
public IProperty`1<PlatformVersion> PlatformVersion { get; }
    [NotNullAttribute]
public IProperty`1<PlatformMonoPreference> PlatformMonoPreference { get; }
    [NotNullAttribute]
public IProperty`1<TimeSpan> ExplorationTimeout { get; }
    [NotNullAttribute]
public IProperty`1<TestGradationByDuration> TestGradationByDuration { get; }
    public abstract virtual IProperty`1<LoggingLevel> get_LogSeverity();
    public abstract virtual IProperty`1<int> get_OutputLineNumberLimit();
    public abstract virtual IProperty`1<bool> get_ActivateOnRun();
    public abstract virtual IProperty`1<bool> get_AutoScrollOutput();
    public abstract virtual IProperty`1<bool> get_ShowDuration();
    public abstract virtual IProperty`1<bool> get_MayExpandToTest();
    public abstract virtual IProperty`1<bool> get_TrackActiveElement();
    public abstract virtual IProperty`1<String[]> get_Grouping();
    public abstract virtual IProperty`1<BuildPolicy> get_BuildPolicy();
    public abstract virtual IProperty`1<PlatformType> get_PlatformType();
    public abstract virtual IProperty`1<PlatformVersion> get_PlatformVersion();
    public abstract virtual IProperty`1<PlatformMonoPreference> get_PlatformMonoPreference();
    public abstract virtual IProperty`1<TimeSpan> get_ExplorationTimeout();
    public abstract virtual IProperty`1<TestGradationByDuration> get_TestGradationByDuration();
}
[MigrateSettingsAttribute]
internal class JetBrains.ReSharper.UnitTestFramework.Settings.Migrations.RemoveBuildPolicyAlwaysMigration : object {
    public sealed virtual IEnumerable`1<SettingsEntry> GetEntriesToMigrate(ISettingsSchema schema);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Settings.Migrations.RemoveBuildPolicyAlwaysMigration/<GetKeysToMigrate>d__1")]
public sealed virtual IEnumerable`1<SettingsKey> GetKeysToMigrate(ISettingsSchema schema);
    public sealed virtual void Migrate(IContextBoundSettingsStoreImplementation store);
    private BuildPolicy GetUpgradedValue(IContextBoundSettingsStore store);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.UnitTestFramework.Settings.SpawnedChildrenIgnoredByDefault : HaveDefaultSettings`1<UnitTestRunnerSettings> {
    public string Name { get; }
    public SpawnedChildrenIgnoredByDefault(ISettingsSchema settingsSchema, ILogger logger);
    public virtual void InitDefaultSettings(ISettingsStorageMountPoint mountPoint);
    public virtual string get_Name();
}
public enum JetBrains.ReSharper.UnitTestFramework.Settings.SpawnedProcessesResponse : Enum {
    public int value__;
    public static SpawnedProcessesResponse AskUser;
    public static SpawnedProcessesResponse DoNothing;
    public static SpawnedProcessesResponse KillOrphaned;
}
[TypeConverterAttribute("JetBrains.ReSharper.UnitTestFramework.Settings.TestGradationByDuration/Converter")]
public class JetBrains.ReSharper.UnitTestFramework.Settings.TestGradationByDuration : ValueType {
    public TimeSpan Fast;
    public TimeSpan Medium;
    public TimeSpan Slow;
    public TimeSpan Slower;
    public TestGradationByDuration(TimeSpan fast, TimeSpan medium, TimeSpan slow, TimeSpan slower);
}
[SettingsKeyAttribute("JetBrains.ReSharper.UnitTestFramework.Settings.UnitTestingMruSettings", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "UnitTestExplorerSettingsSettingDescription")]
public class JetBrains.ReSharper.UnitTestFramework.Settings.UnitTestExplorerSettings : object {
    [ObsoleteAttribute]
[SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "Index of tree grouping provider")]
public int GroupingIndex;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "GroupingProvidersSettingDescription")]
public string Groupings;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "ShowSkippedExplorationResultsSettingDescription")]
public bool ShowSkippedResults;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "LimitNumberOfShownInputDataForParametrizedTestsSettingDescription")]
public int ParametrizedTestInputDataLimit;
}
[SolutionComponentAttribute("20")]
internal class JetBrains.ReSharper.UnitTestFramework.Settings.UnitTestingDefaultSettings : object {
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <ShouldPersistSessions>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<int> <MaxParallelRunsInLaunch>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<ISet`1<UnitTestElementCategory>> <ExcludedCategories>k__BackingField;
    [CompilerGeneratedAttribute]
private IUnitTestSessionSettings <Session>k__BackingField;
    [CompilerGeneratedAttribute]
private IUnitTestExplorerSettings <Explorer>k__BackingField;
    [CompilerGeneratedAttribute]
private IUnitTestRunnerSettings <TestRunner>k__BackingField;
    public IProperty`1<bool> ShouldPersistSessions { get; }
    public IProperty`1<int> MaxParallelRunsInLaunch { get; }
    public IProperty`1<ISet`1<UnitTestElementCategory>> ExcludedCategories { get; }
    public IUnitTestSessionSettings Session { get; }
    public IUnitTestExplorerSettings Explorer { get; }
    public IUnitTestRunnerSettings TestRunner { get; }
    public UnitTestingDefaultSettings(Lifetime lifetime, ISolution solution, ISettingsStore settingsStore, IThreading threading);
    private UnitTestingDefaultSettings(Lifetime lifetime, IContextBoundSettingsStoreLive settingsStore, IThreading threading);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_ShouldPersistSessions();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<int> get_MaxParallelRunsInLaunch();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<ISet`1<UnitTestElementCategory>> get_ExcludedCategories();
    [CompilerGeneratedAttribute]
public sealed virtual IUnitTestSessionSettings get_Session();
    [CompilerGeneratedAttribute]
public sealed virtual IUnitTestExplorerSettings get_Explorer();
    [CompilerGeneratedAttribute]
public sealed virtual IUnitTestRunnerSettings get_TestRunner();
}
[SettingsKeyAttribute("JetBrains.Application.Settings.WellKnownRootKeys.HousekeepingSettings", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "MRUValuesForUnitTestingSettingDescription")]
public class JetBrains.ReSharper.UnitTestFramework.Settings.UnitTestingMruSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "ShowIntegrationTestsOptionInUTSessionSettingDescription")]
public bool ShowIntTestsOptionInSession;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "VSHiveForIntegrationTestsSettingDescription")]
public string InTestVsHive;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "ProcessorArchitectureForStandaloneIntegrationTestsSettingDescription")]
public string InTestProcessorArchitecture;
}
internal class JetBrains.ReSharper.UnitTestFramework.Settings.UnitTestingOverridableSettings : object {
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <ShouldPersistSessions>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<int> <MaxParallelRunsInLaunch>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<ISet`1<UnitTestElementCategory>> <ExcludedCategories>k__BackingField;
    [CompilerGeneratedAttribute]
private IUnitTestSessionSettings <Session>k__BackingField;
    [CompilerGeneratedAttribute]
private IUnitTestExplorerSettings <Explorer>k__BackingField;
    [CompilerGeneratedAttribute]
private IUnitTestRunnerSettings <TestRunner>k__BackingField;
    public IProperty`1<bool> ShouldPersistSessions { get; }
    public IProperty`1<int> MaxParallelRunsInLaunch { get; }
    public IProperty`1<ISet`1<UnitTestElementCategory>> ExcludedCategories { get; }
    public IUnitTestSessionSettings Session { get; }
    public IUnitTestExplorerSettings Explorer { get; }
    public IUnitTestRunnerSettings TestRunner { get; }
    public UnitTestingOverridableSettings(Lifetime lifetime, IUnitTestingSettings defaultSettings);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_ShouldPersistSessions();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<int> get_MaxParallelRunsInLaunch();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<ISet`1<UnitTestElementCategory>> get_ExcludedCategories();
    [CompilerGeneratedAttribute]
public sealed virtual IUnitTestSessionSettings get_Session();
    [CompilerGeneratedAttribute]
public sealed virtual IUnitTestExplorerSettings get_Explorer();
    [CompilerGeneratedAttribute]
public sealed virtual IUnitTestRunnerSettings get_TestRunner();
    private static IProperty`1<T> InitializeFrom(IProperty`1<T> property, Lifetime lifetime);
}
[SettingsKeyAttribute("JetBrains.Application.Settings.WellKnownRootKeys.EnvironmentSettings", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "UnitTestingSettingsSettingDescription")]
public class JetBrains.ReSharper.UnitTestFramework.Settings.UnitTestingSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "CustomDirectoryForTestAssembliesAndDataSettingDescription")]
public string CustomStartDirectory;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "ListOfExcludedCategoriesSettingDescription")]
public string ExcludedCategoriesList;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "ShadowCopyAssembliesBeingTestedSettingDescription")]
[ObsoleteAttribute("Use ShadowCopy2")]
public bool ShadowCopy;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "ShadowCopyAssembliesBeingTestedSettingDescription")]
public ShadowCopyOption ShadowCopy2;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "ShadowCopyCustomFileMask")]
public string ShadowCopyCustomFileMask;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "ShadowCopyRecursive")]
public bool ShadowCopyRecursive;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "CreateAppDomainWhenRunningTestsSettingDescription")]
[ObsoleteAttribute("Tests are run in an AppDomain always")]
public bool UseAppDomain;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "UseCustomDirectoryForTestsSettingDescription")]
public bool UseCustomStartDirectory;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "NumberOfTestRunnerProcessesRunningInParallelSettingDescription")]
public int ParallelProcessesCount;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "SaveSessionStateOnCloseAndRestoreOnStartupSettingDescription")]
public bool SaveSessionState;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "EnableUnitTestingSettingDescription")]
public bool EnableUnitTesting;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "EnableInternalDebugSettingDescription")]
public bool EnableDebugInternal;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "CaptureTestRunnerOutputSettingDescription")]
public bool CaptureOutputInternal;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "WrapLongLinesInUnitTestsOutputSettingDescription")]
public bool WrapLongLinesInUnitTestSessionOutput;
    [SettingsIndexedEntryAttribute("JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "DisabledProvidersSettingDescription")]
public IIndexedEntry`2<string, bool> DisabledProviders;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "ShowNotificationWhenSessionIsFinishedSettingDescription")]
public bool ShowNotificationOnFinish;
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.UnitTestFramework.Settings.UnitTestingTestRunnerDefaultSettings : HaveDefaultSettings`1<UnitTestRunnerSettings> {
    private IHostProductInfo myHostProductInfo;
    public string Name { get; }
    public UnitTestingTestRunnerDefaultSettings(ISettingsSchema settingsSchema, ILogger logger, IHostProductInfo hostProductInfo);
    public virtual string get_Name();
    public virtual void InitDefaultSettings(ISettingsStorageMountPoint mountPoint);
}
[SettingsKeyAttribute("JetBrains.ReSharper.UnitTestFramework.Settings.UnitTestingMruSettings", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "UnitTestRunnerSettingsSettingDescription")]
public class JetBrains.ReSharper.UnitTestFramework.Settings.UnitTestRunnerSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "RunNETFrameworkWithoutIsolationSettingDescription")]
public bool NoIsolationNetFramework;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "RunNETCoreWithoutIsolationSettingDescription")]
public bool NoIsolationNetCore;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "TestRunnerResultEventsFrequency")]
public Nullable`1<TimeSpan> ResultEventsFrequency;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "TestRunnerResultEventsTimeout")]
public Nullable`1<TimeSpan> ResultEventsTimeout;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "HangingTestExecutionResponseSettingDescription")]
public HangingTestRunnerResponse HangingTestRunnerResponse;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "WaitIntervalForTestRunnerToExitAfterTestsSeeminglyFinishSettingDescription")]
public int WaitIntervalForRunnerToExit;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "SpawnedProcessesCheckResponseSettingDescription")]
public SpawnedProcessesResponse SpawnedProcessesResponse;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "WaitIntervalForProcessesSpawnedByTestRunnerToExitAfterTestRunnerExitsSettingDescription")]
public int WaitIntervalForSpawnedProcessesToExit;
    [SettingsIndexedEntryAttribute("JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "ListOfProcessesWithSetRepliesSettingDescription")]
public IIndexedEntry`2<string, SpawnedProcessesResponse> SpawnedProcessesKnownList;
    [ObsoleteAttribute]
[SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "CheckForOrphanedProcessesSettingDescription")]
public bool CheckForOrphanedProcesses;
    [ObsoleteAttribute]
[SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "AdditionalEnvironmentVariablesToBeUsedByTheTestRunnerSettingDescription")]
public string EnvironmentVariables;
    [SettingsIndexedEntryAttribute("JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "AdditionalEnvironmentVariablesToBeUsedByTheTestRunnerSettingDescription")]
public IIndexedEntry`2<string, string> EnvironmentVariablesIndexed;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "AutoDetectRunSettingsFile_Text")]
public bool AutoDetectRunConfigurationFile;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "PathToRunconfigTestsettingsFileSettingDescription")]
public string RunConfigurationFilename;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "EnableInternalLoggingSettingDescription")]
public LoggingLevel LoggingInternal;
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.UnitTestFramework.Settings.UnitTestRunnerSettingsExtensions : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static ProcessStartInfo Augment(ProcessStartInfo startInfo, IUnitTestRun run);
    [ExtensionAttribute]
public static void SetEnvironmentVariables(ProcessStartInfo startInfo, string key, string value, ILogger logger);
    [ExtensionAttribute]
[NotNullAttribute]
public static ProcessStartInfo AddEnvironmentVariables(ProcessStartInfo startInfo, IDictionary`2<string, string> value, ILogger logger);
}
[SettingsKeyAttribute("JetBrains.ReSharper.UnitTestFramework.Settings.UnitTestingMruSettings", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "DefaultUnitTestSessionSettingsSettingDescription")]
public class JetBrains.ReSharper.UnitTestFramework.Settings.UnitTestSessionDefaultSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "LimitTestOutputToASpecifiedNumberOfLinesSettingDescription")]
public int OutputLineNumberLimit;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "ShowEntriesWithSeverityEqualOrHigherThanSettingDescription")]
public LoggingLevel LogSeverity;
    [ObsoleteAttribute]
[SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "Index of tree grouping provider")]
public int GroupingIndex;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "GroupingProvidersSettingDescription")]
public string Groupings;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "TrackActiveElementInTreeByDefaultInAllNewSessionsSettingDescription")]
public bool TrackActiveElement;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "DefaultSolutionBuildPolicyBeforeRunningTestsInAllNewSessionsSettingDescription")]
public BuildPolicy BuildPolicy;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "ShowTestTimeByDefaultInAllNewSessionsSettingDescription")]
public bool ShowTime;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "ExpandTestSessionTreeToATestWhenPossibleSettingDescription")]
public bool MayExpandToTest;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "AutoScrollToBottomOfOutputPanelDuringTestRunSettingDescription")]
public bool AutoScrollOutput;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "ActivateUnitTestSessionWindowWhenRunStartsSettingDescription")]
public bool ActivateOnRun;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "PlatformTypeXXToRunTestsSettingDescription")]
public PlatformType PlatformType;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "RuntimeEnvironmentCLRToRunTestsSettingDescription")]
public PlatformVersion PlatformVersion;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "PreferClrPreferMonoToRunTestsSettingDescription")]
public PlatformMonoPreference PlatformMonoPreference;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "TestGradationByDurationSettingDescription")]
public TestGradationByDuration TestGradationByDuration;
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public static class JetBrains.ReSharper.UnitTestFramework.Src.Features.TestLinker.Strings : object {
    private static ILogger ourLog;
    private static Lazy`1<JetResourceManager> ourResourceManager;
    [EditorBrowsableAttribute("2")]
public static JetResourceManager ResourceManager { get; }
    public static string TestLinker_Settings_Description { get; }
    public static string TestLinker_Settings_UseAffixSearch_Description { get; }
    public static string TestLinker_Settings_NamingSuffixes_Description { get; }
    public static string TestLinker_Settings_UseAttributeSearch_Description { get; }
    public static string TestLinker_Settings_SubjectAttribute_Description { get; }
    public static string TestLinker_Settings_UseGenericArgumentSearch_Description { get; }
    public static string TestLinker_Settings_SubjectMarkerAttribute_Description { get; }
    public static string TestLinker_Settings_NamingStyle_Description { get; }
    public static string TestLinker_Settings_TestSubjectAnnotationStrategy_Description { get; }
    public static string TestLinker_NamingConvention_Prefix_DisplayName { get; }
    public static string TestLinker_NamingConvention_Postfix_DisplayName { get; }
    public static string TestLinker_AnnotationStrategy_Never_DisplayName { get; }
    public static string TestLinker_AnnotationStrategy_WhenNotEvident_DisplayName { get; }
    public static string TestLinker_AnnotationStrategy_WhenCannotBeInferredFromName_DisplayName { get; }
    public static string TestLinker_AnnotationStrategy_WhenCannotBeInferred_DisplayName { get; }
    public static string TestLinker_AnnotationStrategy_Always_DisplayName { get; }
    public static string TestLinkerOptionsPage_Name { get; }
    public static string TestLinkerOptionsPage_NavigationPage_Name { get; }
    public static string TestLinkerOptionsPage_GenerationPage_Name { get; }
    public static string TestLinkerOptionsPage_GenerationSection_Header { get; }
    public static string TestLinkerOptionsPage_GenerationSection_TestClassNamingConvention_Label { get; }
    public static string TestLinkerOptionsPage_GenerationSection_TestSubjectAnnotationStrategy_Label { get; }
    public static string TestLinkerOptionsPage_NavigationSection_Header { get; }
    public static string TestLinkerOptionsPage_NavigationSection_EnableAffixSearchCheckBox_Label { get; }
    public static string TestLinkerOptionsPage_NavigationSection_TestClassAffixesTextBox_Label { get; }
    public static string TestLinkerOptionsPage_NavigationSection_EnableAttributeSearchCheckBox_Label { get; }
    public static string TestLinkerOptionsPage_NavigationSection_NameOfSubjectAttributeTextBox_Label { get; }
    public static string TestLinkerOptionsPage_NavigationSection_EnableGenericArgumentSearchCheckBox_Label { get; }
    public static string TestLinkerOptionsPage_NavigationSection_NameOfSubjectMarkerAttributeTextBox_Label { get; }
    public static string GoToLinkedTypesAction_Text { get; }
    public static string LinkedTypesNavigationProvider_TestsNotFoundMessage { get; }
    public static string LinkedTypesNavigationProvider_ProductionCodeNotFoundMessage { get; }
    public static string LinkedTypesNavigationProvider_LinkedTypesNotFoundMessage { get; }
    public static string LinkedTypesNavigationProvider_NavigateToMenuItemTitle_ProductionCode { get; }
    public static string LinkedTypesNavigationProvider_NavigateToMenuItemTitle_TestCode { get; }
    public static string LinkedTypesNavigationProvider_NavigateToMenuItemTitle_LinkedTypes { get; }
    public static string LinkedTypesSearchDescriptor_SectionTitle_MultipleResultsFound { get; }
    public static string LinkedTypesSearchDescriptor_SectionTitle_SingleResultFound { get; }
    public static string LinkedTypesSearchDescriptor_SectionTitle_NoResultsFound { get; }
    public static string LinkedTypesSearchDescriptor_SectionTitle_SomeOfManyResultsDisplayed { get; }
    public static string LinkedTypesSearchRequest_Title_ProductionCodeForElement { get; }
    public static string LinkedTypesSearchRequest_Title_TestCodeForElement { get; }
    public static string GenerateUnitTest_Text { get; }
    public static string GenerateUnitTest_WorkflowTitle { get; }
    public static string GenerateUnitTest_DialogSettings_TestTemplateMapping_Description { get; }
    public static string GenerateUnitTest_DialogSettings_TestProjectMapping_Description { get; }
    public static string GenerateUnitTest_DialogSettings_ShowAdvancedOptions_Description { get; }
    public static string GenerateUnitTest_DialogSettings_Description { get; }
    public static string GenerateUnitTest_Dialog_HelpButton_Label { get; }
    public static string GenerateUnitTest_Dialog_Validation_MustBeValidProjectName { get; }
    public static string GenerateUnitTest_Dialog_Validation_MustBeUniqueProjectName { get; }
    public static string GenerateUnitTest_Dialog_Validation_MustNotExistNotDiskIfNewProject { get; }
    public static string GenerateUnitTest_Dialog_Header_Title { get; }
    public static string GenerateUnitTest_Dialog_Header_Description { get; }
    public static string GenerateUnitTest_Dialog_Project_Label { get; }
    public static string GenerateUnitTest_Dialog_TestFramework_Label { get; }
    public static string GenerateUnitTest_Dialog_FileTemplate_Label { get; }
    public static string GenerateUnitTest_Dialog_ClassName_Label { get; }
    public static string GenerateUnitTest_Dialog_Namespace_Label { get; }
    public static string GenerateUnitTest_Dialog_Destination_Label { get; }
    public static string GenerateUnitTest_Dialog_MethodGenerator_Label { get; }
    public static string GenerateUnitTest_Dialog_AdvancedOptions_Label { get; }
    public static string GenerateUnitTest_Dialog_Notification_ExistingProject_Text { get; }
    public static string GenerateUnitTest_Dialog_Notification_NewProject_Text { get; }
    public static string GenerateUnitTest_Dialog_Notification_TestFrameworkAreLoading_Text { get; }
    public static string GenerateUnitTest_Dialog_Notification_TestFrameworkAlreadyUsedInSelectedProject_Text { get; }
    public static string GenerateUnitTest_Dialog_Notification_TestFrameworkAlreadyUsedInCurrentSolution_Text { get; }
    public static string GenerateUnitTest_Dialog_Notification_TestFrameworkWillBeInstalledFromNuget_Text { get; }
    public static string GenerateUnitTest_Dialog_Notification_FileTemplateCanBeEdited_Text { get; }
    public static string GenerateUnitTest_Dialog_Notification_FileTemplateCanBeEdited_EditorLocation { get; }
    public static string GenerateUnitTest_Dialog_Destination_FilePicker_Header { get; }
    public static string GenerateUnitTest_Dialog_TestFrameworkGroup_Origin_FromFeed { get; }
    public static string GenerateUnitTest_Dialog_TestFrameworkGroup_Origin_InThisProject { get; }
    public static string GenerateUnitTest_Dialog_TestFrameworkGroup_Origin_InAnotherProject { get; }
    public static string GenerateUnitTest_Dialog_TestFrameworkGroup_Origin_InOtherProjects { get; }
    public static string GenerateUnitTest_TargetClassDisambiquePopup_Header { get; }
    public static string GenerateUnitTest_FromSearch_TestsNotFoundMessage { get; }
    public static string GenerateUnitTest_TestSubjectMacro_Description { get; }
    public static string GenerateUnitTest_TestSubjectMacro_LongDescription { get; }
    public static string GenerateUnitTest_ProgressDialog_Failure { get; }
    public static string GenerateUnitTest_ProgressDialog_Title { get; }
    public static string GenerateUnitTest_ProgressDialog_CreatingProject { get; }
    public static string GenerateUnitTest_ProgressDialog_ReferencingTestFramework { get; }
    public static string GenerateUnitTest_ProgressDialog_InstallingReference { get; }
    public static string GenerateUnitTest_ProgressDialog_ReferencingProject { get; }
    public static string GenerateUnitTest_ProgressDialog_AddingInternalsVisibleTo { get; }
    public static string GenerateUnitTest_ProgressDialog_ExpandingFileTemplate { get; }
    public static string GenerateUnitTest_ProgressDialog_InjectingTestSubject { get; }
    public static string GenerateUnitTest_InstallAnnotationsDialog_Title { get; }
    public static string GenerateUnitTest_InstallAnnotationsDialog_Text { get; }
    public static string EmptyTestMethodGenerator_CheckboxLabel { get; }
    public static string EmptyTestMethodGenerator_ComboboxItemLabel { get; }
    public static string EmptyTestMethodGenerator_ExpandLiveTemplateCommandName { get; }
    public static string CreateUnitTestContextAction_Name { get; }
    public static string CreateUnitTestContextAction_Description { get; }
    public static string CreateUnitTestContextAction_Text { get; }
    public static string GenerateUnitTest_Dialog_Validation_MustNotBeTakenClassName { get; }
    private static Strings();
    public static JetResourceManager get_ResourceManager();
    public static string Choice(string format, Object[] args);
    public static string get_TestLinker_Settings_Description();
    public static string get_TestLinker_Settings_UseAffixSearch_Description();
    public static string get_TestLinker_Settings_NamingSuffixes_Description();
    public static string get_TestLinker_Settings_UseAttributeSearch_Description();
    public static string get_TestLinker_Settings_SubjectAttribute_Description();
    public static string get_TestLinker_Settings_UseGenericArgumentSearch_Description();
    public static string get_TestLinker_Settings_SubjectMarkerAttribute_Description();
    public static string get_TestLinker_Settings_NamingStyle_Description();
    public static string get_TestLinker_Settings_TestSubjectAnnotationStrategy_Description();
    public static string get_TestLinker_NamingConvention_Prefix_DisplayName();
    public static string get_TestLinker_NamingConvention_Postfix_DisplayName();
    public static string get_TestLinker_AnnotationStrategy_Never_DisplayName();
    public static string get_TestLinker_AnnotationStrategy_WhenNotEvident_DisplayName();
    public static string get_TestLinker_AnnotationStrategy_WhenCannotBeInferredFromName_DisplayName();
    public static string get_TestLinker_AnnotationStrategy_WhenCannotBeInferred_DisplayName();
    public static string get_TestLinker_AnnotationStrategy_Always_DisplayName();
    public static string get_TestLinkerOptionsPage_Name();
    public static string get_TestLinkerOptionsPage_NavigationPage_Name();
    public static string get_TestLinkerOptionsPage_GenerationPage_Name();
    public static string get_TestLinkerOptionsPage_GenerationSection_Header();
    public static string get_TestLinkerOptionsPage_GenerationSection_TestClassNamingConvention_Label();
    public static string get_TestLinkerOptionsPage_GenerationSection_TestSubjectAnnotationStrategy_Label();
    public static string get_TestLinkerOptionsPage_NavigationSection_Header();
    public static string get_TestLinkerOptionsPage_NavigationSection_EnableAffixSearchCheckBox_Label();
    public static string get_TestLinkerOptionsPage_NavigationSection_TestClassAffixesTextBox_Label();
    public static string get_TestLinkerOptionsPage_NavigationSection_EnableAttributeSearchCheckBox_Label();
    public static string get_TestLinkerOptionsPage_NavigationSection_NameOfSubjectAttributeTextBox_Label();
    public static string get_TestLinkerOptionsPage_NavigationSection_EnableGenericArgumentSearchCheckBox_Label();
    public static string get_TestLinkerOptionsPage_NavigationSection_NameOfSubjectMarkerAttributeTextBox_Label();
    public static string get_GoToLinkedTypesAction_Text();
    public static string get_LinkedTypesNavigationProvider_TestsNotFoundMessage();
    public static string get_LinkedTypesNavigationProvider_ProductionCodeNotFoundMessage();
    public static string get_LinkedTypesNavigationProvider_LinkedTypesNotFoundMessage();
    public static string get_LinkedTypesNavigationProvider_NavigateToMenuItemTitle_ProductionCode();
    public static string get_LinkedTypesNavigationProvider_NavigateToMenuItemTitle_TestCode();
    public static string get_LinkedTypesNavigationProvider_NavigateToMenuItemTitle_LinkedTypes();
    public static string get_LinkedTypesSearchDescriptor_SectionTitle_MultipleResultsFound();
    public static string get_LinkedTypesSearchDescriptor_SectionTitle_SingleResultFound();
    public static string get_LinkedTypesSearchDescriptor_SectionTitle_NoResultsFound();
    public static string get_LinkedTypesSearchDescriptor_SectionTitle_SomeOfManyResultsDisplayed();
    public static string get_LinkedTypesSearchRequest_Title_ProductionCodeForElement();
    public static string get_LinkedTypesSearchRequest_Title_TestCodeForElement();
    public static string get_GenerateUnitTest_Text();
    public static string get_GenerateUnitTest_WorkflowTitle();
    public static string get_GenerateUnitTest_DialogSettings_TestTemplateMapping_Description();
    public static string get_GenerateUnitTest_DialogSettings_TestProjectMapping_Description();
    public static string get_GenerateUnitTest_DialogSettings_ShowAdvancedOptions_Description();
    public static string get_GenerateUnitTest_DialogSettings_Description();
    public static string get_GenerateUnitTest_Dialog_HelpButton_Label();
    public static string get_GenerateUnitTest_Dialog_Validation_MustBeValidProjectName();
    public static string get_GenerateUnitTest_Dialog_Validation_MustBeUniqueProjectName();
    public static string get_GenerateUnitTest_Dialog_Validation_MustNotExistNotDiskIfNewProject();
    public static string get_GenerateUnitTest_Dialog_Header_Title();
    public static string get_GenerateUnitTest_Dialog_Header_Description();
    public static string get_GenerateUnitTest_Dialog_Project_Label();
    public static string get_GenerateUnitTest_Dialog_TestFramework_Label();
    public static string get_GenerateUnitTest_Dialog_FileTemplate_Label();
    public static string get_GenerateUnitTest_Dialog_ClassName_Label();
    public static string get_GenerateUnitTest_Dialog_Namespace_Label();
    public static string get_GenerateUnitTest_Dialog_Destination_Label();
    public static string get_GenerateUnitTest_Dialog_MethodGenerator_Label();
    public static string get_GenerateUnitTest_Dialog_AdvancedOptions_Label();
    public static string get_GenerateUnitTest_Dialog_Notification_ExistingProject_Text();
    public static string get_GenerateUnitTest_Dialog_Notification_NewProject_Text();
    public static string get_GenerateUnitTest_Dialog_Notification_TestFrameworkAreLoading_Text();
    public static string get_GenerateUnitTest_Dialog_Notification_TestFrameworkAlreadyUsedInSelectedProject_Text();
    public static string get_GenerateUnitTest_Dialog_Notification_TestFrameworkAlreadyUsedInCurrentSolution_Text();
    public static string get_GenerateUnitTest_Dialog_Notification_TestFrameworkWillBeInstalledFromNuget_Text();
    public static string get_GenerateUnitTest_Dialog_Notification_FileTemplateCanBeEdited_Text();
    public static string get_GenerateUnitTest_Dialog_Notification_FileTemplateCanBeEdited_EditorLocation();
    public static string get_GenerateUnitTest_Dialog_Destination_FilePicker_Header();
    public static string get_GenerateUnitTest_Dialog_TestFrameworkGroup_Origin_FromFeed();
    public static string get_GenerateUnitTest_Dialog_TestFrameworkGroup_Origin_InThisProject();
    public static string get_GenerateUnitTest_Dialog_TestFrameworkGroup_Origin_InAnotherProject();
    public static string get_GenerateUnitTest_Dialog_TestFrameworkGroup_Origin_InOtherProjects();
    public static string get_GenerateUnitTest_TargetClassDisambiquePopup_Header();
    public static string get_GenerateUnitTest_FromSearch_TestsNotFoundMessage();
    public static string get_GenerateUnitTest_TestSubjectMacro_Description();
    public static string get_GenerateUnitTest_TestSubjectMacro_LongDescription();
    public static string get_GenerateUnitTest_ProgressDialog_Failure();
    public static string get_GenerateUnitTest_ProgressDialog_Title();
    public static string get_GenerateUnitTest_ProgressDialog_CreatingProject();
    public static string get_GenerateUnitTest_ProgressDialog_ReferencingTestFramework();
    public static string get_GenerateUnitTest_ProgressDialog_InstallingReference();
    public static string get_GenerateUnitTest_ProgressDialog_ReferencingProject();
    public static string get_GenerateUnitTest_ProgressDialog_AddingInternalsVisibleTo();
    public static string get_GenerateUnitTest_ProgressDialog_ExpandingFileTemplate();
    public static string get_GenerateUnitTest_ProgressDialog_InjectingTestSubject();
    public static string get_GenerateUnitTest_InstallAnnotationsDialog_Title();
    public static string get_GenerateUnitTest_InstallAnnotationsDialog_Text();
    public static string get_EmptyTestMethodGenerator_CheckboxLabel();
    public static string get_EmptyTestMethodGenerator_ComboboxItemLabel();
    public static string get_EmptyTestMethodGenerator_ExpandLiveTemplateCommandName();
    public static string get_CreateUnitTestContextAction_Name();
    public static string get_CreateUnitTestContextAction_Description();
    public static string get_CreateUnitTestContextAction_Text();
    public static string get_GenerateUnitTest_Dialog_Validation_MustNotBeTakenClassName();
}
internal static class JetBrains.ReSharper.UnitTestFramework.Statistics.StatsUtils : object {
    [NotNullAttribute]
private static List`1<int> ourCountingSteps;
    [NotNullAttribute]
private static List`1<int> ourTokenCountSteps;
    private static StatsUtils();
    [NotNullAttribute]
public static string GetApproximateCount(int value);
    [NotNullAttribute]
public static string GetApproximateTokenCount(int value);
    [NotNullAttribute]
public static TypeEventField TestFramework();
}
[LocalizableAttribute("False")]
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.UnitTestFramework.Statistics.UnitTestingExecutionCollector : CounterUsagesCollector {
    [NotNullAttribute]
private static string Other;
    [NotNullAttribute]
private EventLogGroup myGroup;
    [NotNullAttribute]
private VarargEventId myLaunchEvent;
    [NotNullAttribute]
private VarargEventId myRunEvent;
    [NotNullAttribute]
private StringEventField myTestCountField;
    [NotNullAttribute]
private TypeEventField myTestFrameworkField;
    [NotNullAttribute]
private TypeEventField myStrategyTypeField;
    [NotNullAttribute]
private StringEventField myExecutionMethodField;
    [NotNullAttribute]
private HashSet`1<string> myKnownExecutionMethods;
    public UnitTestingExecutionCollector(Lifetime lifetime, FeatureUsageLogger featureUsageLogger);
    public virtual EventLogGroup GetGroup();
}
[LocalizableAttribute("False")]
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.UnitTestFramework.Statistics.UnitTestingStateCollector : SolutionUsagesCollector {
    [NotNullAttribute]
private IUnitTestElementRepository myRepository;
    [NotNullAttribute]
private IInitialExplorationTask myInitialExplorationTask;
    [NotNullAttribute]
private ILogger myLogger;
    [NotNullAttribute]
private EventLogGroup myGroup;
    [NotNullAttribute]
private EventId1`1<string> myTestCountEvent;
    public UnitTestingStateCollector(IUnitTestElementRepository repository, IInitialExplorationTask initialExplorationTask, FeatureUsageLogger featureUsageLogger, ILogger logger);
    public virtual EventLogGroup GetGroup();
    [AsyncStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.Statistics.UnitTestingStateCollector/<GetMetricsAsync>d__7")]
public virtual Task`1<ISet`1<MetricEvent>> GetMetricsAsync(Lifetime lifetime);
}
public class JetBrains.ReSharper.UnitTestFramework.UI.Converters.ExplorationPreviewHeaderBackgroundConverter : object {
    public static ExplorationPreviewHeaderBackgroundConverter Instance;
    private static IDictionary`2<ExplorationOutcome, JetRgbaColor> ourBrushColorsDictionary;
    private static ExplorationPreviewHeaderBackgroundConverter();
    public sealed virtual object Convert(Object[] values, Type targetType, object parameter, CultureInfo culture);
    private SolidColorBrush Convert(bool isRunning, ExplorationOutcome outcome, SolidColorBrush background);
    private JetRgbaColor GetColorFromStatus(bool isRunning, ExplorationOutcome outcome);
    public sealed virtual Object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture);
}
public class JetBrains.ReSharper.UnitTestFramework.UI.Converters.ExplorationPreviewHeaderTextConverter : object {
    public static ExplorationPreviewHeaderTextConverter Instance;
    private static ExplorationPreviewHeaderTextConverter();
    public sealed virtual object Convert(Object[] values, Type targetType, object parameter, CultureInfo culture);
    private string Convert(string source, bool isRunning, ExplorationOutcome outcome);
    public sealed virtual Object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture);
}
public class JetBrains.ReSharper.UnitTestFramework.UI.Converters.ExplorationStatusConverter : object {
    public static ExplorationStatusConverter Instance;
    public static IDictionary`2<ExplorationOutcome, JetRgbaColor> ourLightStatusColorsDictionary;
    public static IDictionary`2<ExplorationOutcome, JetRgbaColor> ourDarkStatusColorsDictionary;
    private static ExplorationStatusConverter();
    public sealed virtual object Convert(Object[] values, Type targetType, object parameter, CultureInfo culture);
    private RichText Convert(bool isRunning, ExplorationOutcome outcome, TimeSpan duration, IExplorationDetails details, bool isDarkTheme);
    private JetRgbaColor GetColorFromStatus(bool isRunning, ExplorationOutcome outcome, bool isDarkTheme);
    private string GetDuration(TimeSpan duration);
    public sealed virtual Object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture);
}
public class JetBrains.ReSharper.UnitTestFramework.UI.Converters.ExplorationStatusIconConverter : object {
    [NotNullAttribute]
public static ExplorationStatusIconConverter Instance;
    private static ExplorationStatusIconConverter();
    public sealed virtual object Convert(Object[] values, Type targetType, object parameter, CultureInfo culture);
    public IconId Convert(bool isRunning, ExplorationOutcome outcome);
    public sealed virtual Object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture);
}
public class JetBrains.ReSharper.UnitTestFramework.UI.Converters.StatusConverter : object {
    [LocalizableAttribute("False")]
private static string Separator;
    public static StatusConverter Instance;
    private static IDictionary`2<UnitTestStatus, JetRgbaColor> ourLightStatusColorsDictionary;
    private static IDictionary`2<UnitTestStatus, JetRgbaColor> ourDarkStatusColorsDictionary;
    private static StatusConverter();
    public sealed virtual object Convert(Object[] values, Type targetType, object parameter, CultureInfo culture);
    [CanBeNullAttribute]
public static RichText Convert(bool showDuration, UnitTestStatusTuple status, TimeSpan duration, string message, int failedCount, bool isDarkTheme);
    private static JetRgbaColor GetColorFromStatus(UnitTestStatusTuple status, bool isDarkTheme);
    [LocalizableAttribute("False")]
private static string GetDuration(TimeSpan duration);
    public sealed virtual Object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture);
}
public class JetBrains.ReSharper.UnitTestFramework.UI.Converters.StatusIconConverter : object {
    [NotNullAttribute]
public static StatusIconConverter Instance;
    private static StatusIconConverter();
    public static IconId Convert(UnitTestStatusTuple status, bool outdated);
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class JetBrains.ReSharper.UnitTestFramework.UI.Converters.TestCountConverter : object {
    public static IValueConverter Instance;
    private static TestCountConverter();
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.UnitTestFramework.UI.DefaultUnitTestOutputPane : object {
    public sealed virtual void Log(string message);
}
public class JetBrains.ReSharper.UnitTestFramework.UI.Exploration.UnitTestExplorationTree : LiveTreeModel`1<IExplorationTargetTreeNode> {
    [NotNullAttribute]
private ISolution mySolution;
    [NotNullAttribute]
private ChangeManager myChangeManager;
    [NotNullAttribute]
private IPsiModules myPsiModules;
    [NotNullAttribute]
private ProjectModelElementPresentationService myElementPresentationService;
    [NotNullAttribute]
private PsiIconManager myIconManager;
    public UnitTestExplorationTree(Lifetime lifetime, IThreading threading, ISolution solution, ChangeManager changeManager, IPsiModules psiModules, IUnitTestExplorerSettings settings, ProjectModelElementPresentationService elementPresentationService, PsiIconManager iconManager);
    private void OnChanged(ChangeEventArgs e);
    public IExplorationTargetTreeNode LoadResult(IExplorationResult result);
    protected virtual IExplorationTargetTreeNode InitializeTypedRoot();
    protected virtual ITreeModelNode CreateNode(object dataItem);
    private void OnExplorationStarted(IExplorationEventArgs e);
    private void OnExplorationFinished(IExplorationFinishedEventArgs e);
    private IExplorationTargetTreeNode GetOrCreateHierarchy(IExplorationEventArgs e);
    private void TryRemoveHierarchy(Object[] keys);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.UnitTestFramework.UI.Exploration.UnitTestExplorationTree/<GetKeys>d__15")]
private IEnumerable`1<object> GetKeys(IExplorationEventArgs e);
    private IExplorationTargetTreeNode GetOrCreateNode(object key, IExplorationTargetTreeNode parent);
}
[ActionAttribute("UnitTestExplorer.ImportSession", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "ImportSessionActionText")]
public class JetBrains.ReSharper.UnitTestFramework.UI.Explorer.Actions.ImportSessionAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
public class JetBrains.ReSharper.UnitTestFramework.UI.Explorer.Browser.UnitTestBrowserDescriptorBase : UnitTestDescriptorBase {
    public UnitTestExplorerTree TreeModel { get; }
    public UnitTestBrowserDescriptorBase(Lifetime lifetime, ISolution solution, IUnitTestingSettings settings, IUnitTestElementStore elementStore, IUnitTestElementRepository elementRepository, IUnitTestViewModelFactory viewModelFactory, IUnitTestingInitializationAwaiter utReadyTask);
    public UnitTestExplorerTree get_TreeModel();
    private static void Bind(Lifetime lifetime, IProperty`1<TSource> source, IProperty`1<TTarget> target, Func`2<TSource, TTarget> convertTo, Func`2<TTarget, TSource> convertFrom);
    protected virtual IUnitTestTreeGroupProviderMarker GetHierarchyProvider(ISolution solution);
}
public abstract class JetBrains.ReSharper.UnitTestFramework.UI.Explorer.Common.UnitTestDescriptorBase : TreeModelBrowserDescriptorPsi {
    [NotNullAttribute]
protected IUnitTestElementRepository ElementRepository;
    [NotNullAttribute]
protected ReadonlyToken ReadonlyToken;
    [CompilerGeneratedAttribute]
private Lifetime <Lifetime>k__BackingField;
    [CompilerGeneratedAttribute]
private IAsyncUnitTestTree <TreeModel>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<UnitTestingGroupingSelection> <Grouping>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<IUnitTestTreeNode> <SelectedNode>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<IReadOnlySet`1<IUnitTestTreeNode>> <SelectedNodes>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<IReadOnlySet`1<Int32`1<IUnitTestElement>>> <SelectedElements>k__BackingField;
    private UserDataHolder myDataHolder;
    public Lifetime Lifetime { get; }
    public IAsyncUnitTestTree TreeModel { get; }
    public IProperty`1<UnitTestingGroupingSelection> Grouping { get; }
    public IProperty`1<IUnitTestTreeNode> SelectedNode { get; }
    public IProperty`1<IReadOnlySet`1<IUnitTestTreeNode>> SelectedNodes { get; }
    public IProperty`1<IReadOnlySet`1<Int32`1<IUnitTestElement>>> SelectedElements { get; }
    public IProperty`1<IUnitTestTreeFilter> Filter { get; }
    public TreeModel Model { get; }
    public StructuredPresenter`2<TreeModelNode, IPresentableItem> Presenter { get; }
    public bool VisibilitySupported { get; }
    public bool QuickSearchSupported { get; }
    public bool IsSuspended { get; }
    protected UnitTestDescriptorBase(Lifetime lifetime, ISolution solution, IUnitTestElementRepository elementRepository, IAsyncUnitTestTree treeModel);
    [CompilerGeneratedAttribute]
public sealed virtual Lifetime get_Lifetime();
    [CompilerGeneratedAttribute]
public sealed virtual IAsyncUnitTestTree get_TreeModel();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<UnitTestingGroupingSelection> get_Grouping();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<IUnitTestTreeNode> get_SelectedNode();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<IReadOnlySet`1<IUnitTestTreeNode>> get_SelectedNodes();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<IReadOnlySet`1<Int32`1<IUnitTestElement>>> get_SelectedElements();
    public sealed virtual IProperty`1<IUnitTestTreeFilter> get_Filter();
    private void SetGrouping(UnitTestingGroupingSelection groupings);
    protected abstract virtual IUnitTestTreeGroupProviderMarker GetHierarchyProvider(ISolution solution);
    public sealed virtual IUnitTestTreeNode TrySelectElement(Int32`1<IUnitTestElement> elementId);
    public virtual TreeModel get_Model();
    public virtual StructuredPresenter`2<TreeModelNode, IPresentableItem> get_Presenter();
    public virtual bool get_VisibilitySupported();
    public sealed virtual bool VisibilityState(TreeModelNode modelNode);
    public virtual void Update(UpdateKind updateKind);
    public virtual bool Navigate(TreeModelNode node, PopupWindowContextSource windowContext, bool transferFocus, TabOptions options);
    public virtual bool get_QuickSearchSupported();
    public virtual bool QuickSearchMatches(TreeModelNode viewNode, string quickSearchText);
    public sealed virtual bool get_IsSuspended();
    public virtual void Suspend();
    public virtual void Resume();
    public sealed virtual IEnumerable`1<KeyValuePair`2<object, object>> EnumerateData();
    public sealed virtual void PutData(Key`1<T> key, T val);
    public sealed virtual T GetData(Key`1<T> key);
    public sealed virtual T GetOrCreateDataUnderLock(Key`1<T> key, Func`1<T> factory);
    public sealed virtual T GetOrCreateDataUnderLock(Key`1<T> key, TState state, Func`2<TState, T> factory);
    public bool IsEmpty();
    private sealed virtual override IProperty`1<IconId> JetBrains.ReSharper.UnitTestFramework.UI.ViewModels.IUnitTestTreeViewModel.get_Image();
    private sealed virtual override IProperty`1<string> JetBrains.ReSharper.UnitTestFramework.UI.ViewModels.IUnitTestTreeViewModel.get_Title();
    [CompilerGeneratedAttribute]
private void <.ctor>b__22_0(PropertyChangedEventArgs`1<UnitTestingGroupingSelection> e);
    [CompilerGeneratedAttribute]
private void <.ctor>b__22_1(PropertyChangedEventArgs`1<IReadOnlySet`1<IUnitTestTreeNode>> args);
}
public interface JetBrains.ReSharper.UnitTestFramework.UI.Explorer.IUnitTestExplorerWindowService {
    public abstract virtual void OpenInExplorer(Int32`1<IUnitTestElement> element);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.UnitTestFramework.UI.Explorer.UnitTestExplorerWindowServiceExtensions : object {
    [ExtensionAttribute]
public static void OpenInExplorer(IUnitTestExplorerWindowService service, IEnumerable`1<IUnitTestElement> elements);
}
public interface JetBrains.ReSharper.UnitTestFramework.UI.IIntegrationTestTargetsDiscovery {
    public IProperty`1<bool> IsUiEnabled { get; }
    public abstract virtual IProperty`1<bool> get_IsUiEnabled();
    public abstract virtual ImmutableArray`1<string> GetAllTargetsDescriptions();
    [NotNullAttribute]
public abstract virtual string GetCurrentTargetDescription();
    [NotNullAttribute]
public abstract virtual string GetCurrentTargetShortText();
    public abstract virtual void TrySetTargetFromDescription(string description);
}
[LocalizableAttribute("False")]
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.UnitTestFramework.UI.Internal.IntegrationTestTargetsDiscovery : object {
    private List`1<IntegrationTestTarget> myTargets;
    private ImmutableArray`1<string> myDescriptions;
    private int myCurrentTargetIndex;
    private IProperty`1<bool> myIsUiEnabled;
    private IProperty`1<string> myVsHive;
    private IProperty`1<string> myArchitecture;
    private IProperty`1<bool> JetBrains.ReSharper.UnitTestFramework.UI.IIntegrationTestTargetsDiscovery.IsUiEnabled { get; }
    public IntegrationTestTargetsDiscovery(Lifetime lifetime, ISettingsStore settingsStore);
    private int GetCurrentTargetIndex();
    private sealed virtual override IProperty`1<bool> JetBrains.ReSharper.UnitTestFramework.UI.IIntegrationTestTargetsDiscovery.get_IsUiEnabled();
    private sealed virtual override ImmutableArray`1<string> JetBrains.ReSharper.UnitTestFramework.UI.IIntegrationTestTargetsDiscovery.GetAllTargetsDescriptions();
    private sealed virtual override string JetBrains.ReSharper.UnitTestFramework.UI.IIntegrationTestTargetsDiscovery.GetCurrentTargetDescription();
    private sealed virtual override void JetBrains.ReSharper.UnitTestFramework.UI.IIntegrationTestTargetsDiscovery.TrySetTargetFromDescription(string description);
    private sealed virtual override string JetBrains.ReSharper.UnitTestFramework.UI.IIntegrationTestTargetsDiscovery.GetCurrentTargetShortText();
    [CompilerGeneratedAttribute]
internal static void <.ctor>g__SetProcessEnvVar|6_5(Lifetime lifetime, string variable, string value);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.UnitTestFramework.UI.Internal.ZoneMarker : object {
}
public interface JetBrains.ReSharper.UnitTestFramework.UI.IUnitTestOutputPane {
    public abstract virtual void Log(string message);
}
public abstract class JetBrains.ReSharper.UnitTestFramework.UI.Options.BetterCustomOptionsPage : CustomSimpleOptionsPage {
    private int myCurrentIndent;
    protected BetterCustomOptionsPage(Lifetime lifetime, OptionsSettingsSmartContext optionsSettingsSmartContext);
    [NotNullAttribute]
protected IOptionEntity ComboBox(Expression`1<Func`2<TKeyClass, TEntryMemberType>> setting, RichText caption);
    [NotNullAttribute]
protected IOptionEntity ComboBox(RichText caption, Expression`1<Func`2<TKeyClass, TEntryMemberType>> setting);
    [NotNullAttribute]
protected IOptionEntity ComboBox(RichText prefix, Expression`1<Func`2<TKeyClass, TEntryMemberType>> reference, RichText postfix);
    [NotNullAttribute]
protected IOptionEntity CheckBox(Expression`1<Func`2<TKeyClass, TEntryMemberType>> setting, RichText caption, string tooltip);
    [NotNullAttribute]
protected IOptionEntity Spinner(RichText caption, SpinnerOptions`1<TKeyClass> options);
    [NotNullAttribute]
protected IOptionEntity Spinner(SpinnerOptions`1<TKeyClass> options, RichText caption);
    [NotNullAttribute]
protected IOptionEntity Spinner(RichText prefix, SpinnerOptions`1<TKeyClass> options, RichText postfix, string tooltip);
    [NotNullAttribute]
protected SpinnerOptions`1<TKeyClass> From(Expression`1<Func`2<TKeyClass, int>> setting, int min, int max);
    protected IOptionEntity InputField(RichText caption, Expression`1<Func`2<TKeyClass, TEntryMemberType>> reference);
    protected void Header(RichText text);
    protected void BeginSection();
    protected void EndSection();
}
[ShellComponentAttribute("0")]
public class JetBrains.ReSharper.UnitTestFramework.UI.Options.DefaultRunSettingsSelectorDescriptor : object {
    private ICommonFileDialogs myCommonFileDialogs;
    public DefaultRunSettingsSelectorDescriptor(ICommonFileDialogs commonFileDialogs);
    public sealed virtual void Describe(CustomSimpleOptionsPage page, Lifetime lifetime, ISolution solution);
}
public class JetBrains.ReSharper.UnitTestFramework.UI.Options.EnvironmentVariablesModel : FromIndexed<string, string> {
    public EnvironmentVariablesModel(Lifetime lifetime, GroupingEventHosts hosts, OptionsSettingsSmartContext smartContext);
    public virtual Entry<string, string> GetNewEntry();
}
public interface JetBrains.ReSharper.UnitTestFramework.UI.Options.IRunSettingsSelectorDescriptor {
    public abstract virtual void Describe(CustomSimpleOptionsPage page, Lifetime lifetime, ISolution solution);
}
public class JetBrains.ReSharper.UnitTestFramework.UI.Options.KnownChildrenModel : FromIndexed<string, SpawnedProcessesResponse> {
    public KnownChildrenModel(Lifetime lifetime, GroupingEventHosts hosts, OptionsSettingsSmartContext smartContext);
    public virtual Entry<string, SpawnedProcessesResponse> GetNewEntry();
}
[OptionsPageAttribute("UnitTesting_Frameworks", "Test Frameworks", "JetBrains.ReSharper.UnitTestFramework.Resources.UnitTestingThemedIcons/Session")]
public class JetBrains.ReSharper.UnitTestFramework.UI.Options.UnitTestFrameworksPage : AEmptyOptionsPage {
}
[OptionsPageAttribute("UnitTesting_General", "General", "JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons/Options")]
public class JetBrains.ReSharper.UnitTestFramework.UI.Options.UnitTestingGeneralPage : BetterCustomOptionsPage {
    public UnitTestingGeneralPage(Lifetime lifetime, OptionsSettingsSmartContext smartContext, OptionsPageContext pageContext, ProductConfigurations productConfigurations, ICommonFileDialogs commonFileDialogs);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_6(PropertyChangedEventArgs`1<FileSystemPath> args);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.UnitTestFramework.UI.Options.UnitTestingOptionsPageExtensions : object {
    [ExtensionAttribute]
public static void AddExplorationMethodSelect(SimpleOptionsPage page, Expression`1<Func`2<TKeyClass, DiscoveryMethod>> optionAccessor);
}
[OptionsPageAttribute("UnitTesting", "Unit Testing", "JetBrains.ReSharper.UnitTestFramework.Resources.UnitTestingThemedIcons/UnitTestingOptionsPage")]
public class JetBrains.ReSharper.UnitTestFramework.UI.Options.UnitTestingPage : AEmptyOptionsPage {
}
public static class JetBrains.ReSharper.UnitTestFramework.UI.Options.UnitTestingPages : object {
    public static string Entry;
    public static string General;
    public static string Frameworks;
    public static string UnitTestRunner;
}
public static class JetBrains.ReSharper.UnitTestFramework.UI.Options.UnitTestProviderOptionsPage : object {
    public static IProperty`1<bool> GetTestSupportEnabledOption(Lifetime lifetime, OptionsSettingsSmartContext optionsSettingsSmartContext, string providerId);
}
[OptionsPageAttribute("UnitTesting_UnitTestRunner", "Test Runner", "JetBrains.ReSharper.UnitTestFramework.Resources.UnitTestingThemedIcons/UnitTestRunner")]
public class JetBrains.ReSharper.UnitTestFramework.UI.Options.UnitTestRunnerPage : BetterCustomOptionsPage {
    public UnitTestRunnerPage(Lifetime lifetime, IThreading threading, OptionsSettingsSmartContext smartContext, OptionsPageContext pageContext, IconHostBase iconHost, HelpSystem helpSystem, IShellLocks locks, ProductConfigurations productConfigurations, IRunSettingsSelectorDescriptor runSettingsSelectorDescriptor, ISolution solution);
    private void KnownChildProcesses(Lifetime lifetime, IThreading threading, OptionsSettingsSmartContext smartContext, OptionsPageContext pageContext, IconHostBase iconHost, IShellLocks locks);
    private void AddRunSettings(IRunSettingsSelectorDescriptor descriptor, Lifetime& lifetime, ISolution solution);
    private BeControl EnvironmentVariables(Lifetime lifetime, IThreading threading, OptionsSettingsSmartContext smartContext, OptionsPageContext pageContext, IconHostBase iconHost, IShellLocks locks);
}
public class JetBrains.ReSharper.UnitTestFramework.UI.Options.ViewModel.EnableProviderViewModel : AAutomation {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <CheckedProperty>k__BackingField;
    [UsedImplicitlyAttribute]
public string Text { get; private set; }
    [UsedImplicitlyAttribute]
public IProperty`1<bool> CheckedProperty { get; private set; }
    public EnableProviderViewModel(IProperty`1<bool> checkedProperty, string text);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
private void set_Text(string value);
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_CheckedProperty();
    [CompilerGeneratedAttribute]
private void set_CheckedProperty(IProperty`1<bool> value);
}
public static class JetBrains.ReSharper.UnitTestFramework.UI.Options.ViewModel.SemicolonSeparatedPairSerializer : object {
    public static string Serialize(IList`1<Tuple`2<string, string>> value);
    private static string EscapeIfRequired(string value);
    public static IList`1<Tuple`2<string, string>> Deserialize(string rawValue);
}
public class JetBrains.ReSharper.UnitTestFramework.UI.Options.ViewModel.UnitTestDurationGradeSettingsViewModel : AAutomation {
    private IProperty`1<TestGradationByDuration> mySettings;
    [CompilerGeneratedAttribute]
private IProperty`1<TimeSpan> <Fast>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<TimeSpan> <Medium>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<TimeSpan> <Slow>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<TimeSpan> <Slower>k__BackingField;
    public IProperty`1<TimeSpan> Fast { get; }
    public IProperty`1<TimeSpan> Medium { get; }
    public IProperty`1<TimeSpan> Slow { get; }
    public IProperty`1<TimeSpan> Slower { get; }
    public UnitTestDurationGradeSettingsViewModel(Lifetime lifetime, IProperty`1<TestGradationByDuration> settings);
    [CompilerGeneratedAttribute]
public IProperty`1<TimeSpan> get_Fast();
    [CompilerGeneratedAttribute]
public IProperty`1<TimeSpan> get_Medium();
    [CompilerGeneratedAttribute]
public IProperty`1<TimeSpan> get_Slow();
    [CompilerGeneratedAttribute]
public IProperty`1<TimeSpan> get_Slower();
    private void Update();
}
public class JetBrains.ReSharper.UnitTestFramework.UI.Options.ViewModel.UnitTestingCustomStartDirectoryViewModel : AAutomation {
    [CompilerGeneratedAttribute]
private IProperty`1<string> <CustomStartDirectoryProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsEnabledProperty>k__BackingField;
    [UsedImplicitlyAttribute]
public IProperty`1<string> CustomStartDirectoryProperty { get; public set; }
    [UsedImplicitlyAttribute]
public IProperty`1<bool> IsEnabledProperty { get; private set; }
    public UnitTestingCustomStartDirectoryViewModel(IProperty`1<string> customStartDirectoryProperty);
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_CustomStartDirectoryProperty();
    [CompilerGeneratedAttribute]
public void set_CustomStartDirectoryProperty(IProperty`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsEnabledProperty();
    [CompilerGeneratedAttribute]
private void set_IsEnabledProperty(IProperty`1<bool> value);
}
public class JetBrains.ReSharper.UnitTestFramework.UI.Options.ViewModel.UnitTestingProcessesCountViewModel : AAutomation {
    [CompilerGeneratedAttribute]
private string <Prefix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Suffix>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<int> <ProcessesCountPossibleValues>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<int> <ParallelProcessesCountProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsEnabledProperty>k__BackingField;
    public string Prefix { get; }
    public string Suffix { get; }
    public IEnumerable`1<int> ProcessesCountPossibleValues { get; }
    public IProperty`1<int> ParallelProcessesCountProperty { get; }
    public IProperty`1<bool> IsEnabledProperty { get; }
    public UnitTestingProcessesCountViewModel(IProperty`1<int> parallelProcessesCountProperty, IEnumerable`1<int> processesCountPossibleValues, string prefix, string suffix);
    [CompilerGeneratedAttribute]
public string get_Prefix();
    [CompilerGeneratedAttribute]
public string get_Suffix();
    [CompilerGeneratedAttribute]
public IEnumerable`1<int> get_ProcessesCountPossibleValues();
    [CompilerGeneratedAttribute]
public IProperty`1<int> get_ParallelProcessesCountProperty();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsEnabledProperty();
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.UnitTestFramework.UI.Options.ZoneMarker : object {
}
[ActionAttribute("UnitTestSession.AppendTests", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "AppendTestsToSessionActionText")]
public class JetBrains.ReSharper.UnitTestFramework.UI.Session.Actions.AppendTestsAction : AppendTestsBaseAction {
    protected virtual UnitTestElements GetElements(IDataContext context);
}
public abstract class JetBrains.ReSharper.UnitTestFramework.UI.Session.Actions.AppendTestsBaseAction : object {
    [CanBeNullAttribute]
protected abstract virtual UnitTestElements GetElements(IDataContext context);
    public sealed virtual IActionRequirement GetRequirement(IDataContext dataContext);
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
public static class JetBrains.ReSharper.UnitTestFramework.UI.Session.Actions.AppendToSessionMenu : object {
    public static void FillMenu(Lifetime lifetime, JetPopupMenu menu, IUnitTestingFacade facade, IUnitTestElementCriterion criterion, bool addNewSessionItem, IUnitTestSession currentSession);
    public static void Show(Lifetime lifetime, PopupWindowContextSource ctx, IUnitTestingFacade facade, IUnitTestElementCriterion criterion, IUnitTestSession currentSession);
    public static bool CanAddElementsToSession(IUnitTestSession session);
}
[ActionAttribute("UnitTestSession.ExportSession", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "ExportSessionActionText")]
public class JetBrains.ReSharper.UnitTestFramework.UI.Session.Actions.ExportSessionAction : ExportSessionActionBase {
}
public abstract class JetBrains.ReSharper.UnitTestFramework.UI.Session.Actions.ExportSessionActionBase : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("UnitTestSession.NewSession", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "CreateNeWSessionActionText")]
public class JetBrains.ReSharper.UnitTestFramework.UI.Session.Actions.NewSessionAction : NewSessionBaseAction {
    public virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    protected virtual UnitTestElements GetElements(IDataContext context);
}
public abstract class JetBrains.ReSharper.UnitTestFramework.UI.Session.Actions.NewSessionBaseAction : object {
    public sealed virtual IActionRequirement GetRequirement(IDataContext dataContext);
    public virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    [CanBeNullAttribute]
protected abstract virtual UnitTestElements GetElements(IDataContext context);
}
[ActionAttribute("UnitTestSession.RepeatPreviousRun", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "REpeatPreviousRunActionText")]
public class JetBrains.ReSharper.UnitTestFramework.UI.Session.Actions.RepeatPreviousRunAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("UnitTestSession.Abort", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "StopExecutionActionText")]
public class JetBrains.ReSharper.UnitTestFramework.UI.Session.Actions.UnitTestSessionAbortAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("UnitTestSession.AppendChildren", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "AppendContainedTestsActionText")]
public class JetBrains.ReSharper.UnitTestFramework.UI.Session.Actions.UnitTestSessionAppendChildren : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    public sealed virtual IActionRequirement GetRequirement(IDataContext dataContext);
}
[ActionGroupAttribute("UnitTestSession.BuildPolicy", "1", "10")]
public class JetBrains.ReSharper.UnitTestFramework.UI.Session.Actions.UnitTestSessionBuildPolicyActionGroup : UnitTestSessionBuildPolicyActionGroupBase {
    public UnitTestSessionBuildPolicyActionGroup(UnitTestSessionBuildPolicyAutomatic unitTestSessionBuildPolicyAutomatic, UnitTestSessionBuildPolicyWholeSolution unitTestSessionBuildPolicyWholeSolution, UnitTestSessionBuildPolicyNever unitTestSessionBuildPolicyNever);
}
public abstract class JetBrains.ReSharper.UnitTestFramework.UI.Session.Actions.UnitTestSessionBuildPolicyActionGroupBase : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation);
}
[ActionAttribute("UnitTestSession.BuildPolicy.Automatic", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "AutomaticActionText")]
public class JetBrains.ReSharper.UnitTestFramework.UI.Session.Actions.UnitTestSessionBuildPolicyAutomatic : UnitTestSessionBuildPolicyBase {
    protected BuildPolicy BuildPolicy { get; }
    protected virtual BuildPolicy get_BuildPolicy();
}
public abstract class JetBrains.ReSharper.UnitTestFramework.UI.Session.Actions.UnitTestSessionBuildPolicyBase : object {
    protected BuildPolicy BuildPolicy { get; }
    public sealed virtual bool Update(IDataContext context, CheckedActionPresentation presentation);
    public sealed virtual void Execute(IDataContext context);
    protected abstract virtual BuildPolicy get_BuildPolicy();
}
[ActionAttribute("UnitTestSession.BuildPolicy.Never", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "NeverBuildActionText")]
public class JetBrains.ReSharper.UnitTestFramework.UI.Session.Actions.UnitTestSessionBuildPolicyNever : UnitTestSessionBuildPolicyBase {
    protected BuildPolicy BuildPolicy { get; }
    protected virtual BuildPolicy get_BuildPolicy();
}
[ActionAttribute("UnitTestSession.BuildPolicy.WholeSolution", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "AutomaticWholeSolutionActionText")]
public class JetBrains.ReSharper.UnitTestFramework.UI.Session.Actions.UnitTestSessionBuildPolicyWholeSolution : UnitTestSessionBuildPolicyBase {
    protected BuildPolicy BuildPolicy { get; }
    protected virtual BuildPolicy get_BuildPolicy();
}
[ActionAttribute("UnitTestSession.ClearResult", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "ClearTestResultActionText")]
public class JetBrains.ReSharper.UnitTestFramework.UI.Session.Actions.UnitTestSessionClearResult : object {
    public sealed virtual IActionRequirement GetRequirement(IDataContext dataContext);
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("UnitTestSession.Lock", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "LockSessionActionText")]
public class JetBrains.ReSharper.UnitTestFramework.UI.Session.Actions.UnitTestSessionLockAction : object {
    public sealed virtual bool Update(IDataContext context, CheckedActionPresentation presentation);
    public sealed virtual void Execute(IDataContext context);
}
[ActionAttribute("UnitTestSession.Rename", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "RenameSessionActionText")]
public class JetBrains.ReSharper.UnitTestFramework.UI.Session.Actions.UnitTestSessionRenameAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
public abstract class JetBrains.ReSharper.UnitTestFramework.UI.Session.Actions.UnitTestSessionRunAllActionBase : object {
    public virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    protected virtual bool ShouldFocus(IDataContext context);
    [NotNullAttribute]
protected abstract virtual IHostProviderDescriptor GetHostProviderDescriptor();
    [CanBeNullAttribute]
protected virtual IUnitTestSession GetSession(IDataContext context);
    [CanBeNullAttribute]
protected virtual UnitTestElements GetElementsToRun(IDataContext context);
    protected virtual void DoWhenLaunchCreated(IUnitTestLaunch launch, bool sessionShouldBeFocused);
}
[ActionGroupAttribute("UnitTestSession.RunAllActionGroup", "1", "16")]
public class JetBrains.ReSharper.UnitTestFramework.UI.Session.Actions.UnitTestSessionRunAllActionGroup : UnitTestSessionRunAllActionImpl {
}
public abstract class JetBrains.ReSharper.UnitTestFramework.UI.Session.Actions.UnitTestSessionRunAllActionImpl : UnitTestSessionRunAllActionBase {
    protected virtual IHostProviderDescriptor GetHostProviderDescriptor();
}
[ActionAttribute("UnitTest.RunCurrentSession", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "RunCurrentSessionActionText")]
public class JetBrains.ReSharper.UnitTestFramework.UI.Session.Actions.UnitTestSessionRunCurrentSessionAction : UnitTestSessionRunAllActionBase {
    protected virtual IHostProviderDescriptor GetHostProviderDescriptor();
    protected virtual bool ShouldFocus(IDataContext context);
}
public abstract class JetBrains.ReSharper.UnitTestFramework.UI.Session.Actions.UnitTestSessionTargetFrameworkActionBase : object {
    protected Nullable`1<PlatformVersion> PlatformVersion { get; }
    protected bool IsInternal { get; }
    protected abstract virtual Nullable`1<PlatformVersion> get_PlatformVersion();
    protected virtual bool get_IsInternal();
    public sealed virtual void Execute(IDataContext context);
    public sealed virtual bool Update(IDataContext context, CheckedActionPresentation presentation);
}
[ActionAttribute("UnitTestSession.TargetFramework.Automatic", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "AutomaticActionText")]
public class JetBrains.ReSharper.UnitTestFramework.UI.Session.Actions.UnitTestSessionTargetFrameworkAutomatic : UnitTestSessionTargetFrameworkActionBase {
    protected Nullable`1<PlatformVersion> PlatformVersion { get; }
    protected virtual Nullable`1<PlatformVersion> get_PlatformVersion();
}
[ActionAttribute("UnitTestSession.TargetFramework.CLR2", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "NET20ActionText")]
public class JetBrains.ReSharper.UnitTestFramework.UI.Session.Actions.UnitTestSessionTargetFrameworkClr2 : UnitTestSessionTargetFrameworkActionBase {
    protected Nullable`1<PlatformVersion> PlatformVersion { get; }
    protected virtual Nullable`1<PlatformVersion> get_PlatformVersion();
}
[ActionAttribute("UnitTestSession.TargetFramework.CLR4", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "NET40ActionText")]
public class JetBrains.ReSharper.UnitTestFramework.UI.Session.Actions.UnitTestSessionTargetFrameworkClr4 : UnitTestSessionTargetFrameworkActionBase {
    protected Nullable`1<PlatformVersion> PlatformVersion { get; }
    protected virtual Nullable`1<PlatformVersion> get_PlatformVersion();
}
[ActionAttribute("UnitTestSession.TargetFramework.CLR45", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "NET45ActionText")]
public class JetBrains.ReSharper.UnitTestFramework.UI.Session.Actions.UnitTestSessionTargetFrameworkClr45 : UnitTestSessionTargetFrameworkActionBase {
    protected Nullable`1<PlatformVersion> PlatformVersion { get; }
    protected virtual Nullable`1<PlatformVersion> get_PlatformVersion();
}
[ActionAttribute("UnitTestSession.TargetFramework.CLR46", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "NET46ActionText")]
public class JetBrains.ReSharper.UnitTestFramework.UI.Session.Actions.UnitTestSessionTargetFrameworkClr46 : UnitTestSessionTargetFrameworkActionBase {
    protected Nullable`1<PlatformVersion> PlatformVersion { get; }
    protected virtual Nullable`1<PlatformVersion> get_PlatformVersion();
}
[ActionAttribute("UnitTestSession.TargetFramework.CLR47", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "NET47ActionText")]
public class JetBrains.ReSharper.UnitTestFramework.UI.Session.Actions.UnitTestSessionTargetFrameworkClr47 : UnitTestSessionTargetFrameworkActionBase {
    protected Nullable`1<PlatformVersion> PlatformVersion { get; }
    protected virtual Nullable`1<PlatformVersion> get_PlatformVersion();
}
[ActionAttribute("UnitTestSession.TargetFramework.Default", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "DefaultActionText")]
public class JetBrains.ReSharper.UnitTestFramework.UI.Session.Actions.UnitTestSessionTargetFrameworkDefault : UnitTestSessionTargetFrameworkActionBase {
    protected Nullable`1<PlatformVersion> PlatformVersion { get; }
    protected virtual Nullable`1<PlatformVersion> get_PlatformVersion();
}
[ActionGroupAttribute("UnitTestSession.TargetFramework", "1", "10")]
public class JetBrains.ReSharper.UnitTestFramework.UI.Session.Actions.UnitTestSessionTargetFrameworkGroup : UnitTestSessionTargetFrameworkGroupBase {
    public UnitTestSessionTargetFrameworkGroup(UnitTestSessionTargetFrameworkDefault unitTestSessionTargetFrameworkDefault, UnitTestSessionTargetFrameworkAutomatic unitTestSessionTargetFrameworkAutomatic, UnitTestSessionTargetFrameworkClr2 unitTestSessionTargetFrameworkClr2, UnitTestSessionTargetFrameworkClr4 unitTestSessionTargetFrameworkClr4, UnitTestSessionTargetFrameworkClr45 unitTestSessionTargetFrameworkClr45, UnitTestSessionTargetFrameworkClr46 unitTestSessionTargetFrameworkClr46, UnitTestSessionTargetFrameworkClr47 unitTestSessionTargetFrameworkClr47, UnitTestSessionTargetFrameworkNetCoreApp netCoreApp);
}
public abstract class JetBrains.ReSharper.UnitTestFramework.UI.Session.Actions.UnitTestSessionTargetFrameworkGroupBase : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation);
}
[ActionAttribute("UnitTestSession.TargetFramework.NetCoreApp", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "LatestNetCoreAppActionText")]
public class JetBrains.ReSharper.UnitTestFramework.UI.Session.Actions.UnitTestSessionTargetFrameworkNetCoreApp : UnitTestSessionTargetFrameworkActionBase {
    protected Nullable`1<PlatformVersion> PlatformVersion { get; }
    protected bool IsInternal { get; }
    protected virtual Nullable`1<PlatformVersion> get_PlatformVersion();
    protected virtual bool get_IsInternal();
}
[ActionAttribute("UnitTestSession.TargetPlatform.Arm", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "ArmActionText")]
public class JetBrains.ReSharper.UnitTestFramework.UI.Session.Actions.UnitTestSessionTargetPlatformArm : UnitTestSessionTargetPlatformBase {
    protected Nullable`1<PlatformType> PlatformType { get; }
    protected virtual Nullable`1<PlatformType> get_PlatformType();
}
[ActionAttribute("UnitTestSession.TargetPlatform.Arm64", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "Arm64ActionText")]
public class JetBrains.ReSharper.UnitTestFramework.UI.Session.Actions.UnitTestSessionTargetPlatformArm64 : UnitTestSessionTargetPlatformBase {
    protected Nullable`1<PlatformType> PlatformType { get; }
    protected virtual Nullable`1<PlatformType> get_PlatformType();
}
[ActionAttribute("UnitTestSession.TargetPlatform.Automatic", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "AutomaticActionText")]
public class JetBrains.ReSharper.UnitTestFramework.UI.Session.Actions.UnitTestSessionTargetPlatformAutomatic : UnitTestSessionTargetPlatformBase {
    protected Nullable`1<PlatformType> PlatformType { get; }
    protected virtual Nullable`1<PlatformType> get_PlatformType();
}
public abstract class JetBrains.ReSharper.UnitTestFramework.UI.Session.Actions.UnitTestSessionTargetPlatformBase : object {
    protected Nullable`1<PlatformType> PlatformType { get; }
    public sealed virtual void Execute(IDataContext context);
    public sealed virtual bool Update(IDataContext context, CheckedActionPresentation presentation);
    protected abstract virtual Nullable`1<PlatformType> get_PlatformType();
}
[ActionAttribute("UnitTestSession.TargetPlatform.Default", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "DefaultActionText")]
public class JetBrains.ReSharper.UnitTestFramework.UI.Session.Actions.UnitTestSessionTargetPlatformDefault : UnitTestSessionTargetPlatformBase {
    protected Nullable`1<PlatformType> PlatformType { get; }
    protected virtual Nullable`1<PlatformType> get_PlatformType();
}
[ActionGroupAttribute("UnitTestSession.TargetPlatform", "1", "10")]
public class JetBrains.ReSharper.UnitTestFramework.UI.Session.Actions.UnitTestSessionTargetPlatformGroup : UnitTestSessionTargetPlatformGroupBase {
    public UnitTestSessionTargetPlatformGroup(UnitTestSessionTargetPlatformDefault unitTestSessionTargetPlatformDefault, UnitTestSessionTargetPlatformAutomatic unitTestSessionTargetPlatformAutomatic, UnitTestSessionTargetPlatformX86 unitTestSessionTargetPlatformX86, UnitTestSessionTargetPlatformX64 unitTestSessionTargetPlatformX64, UnitTestSessionTargetPlatformArm unitTestSessionTargetPlatformArm, UnitTestSessionTargetPlatformArm64 unitTestSessionTargetPlatformArm64);
}
public abstract class JetBrains.ReSharper.UnitTestFramework.UI.Session.Actions.UnitTestSessionTargetPlatformGroupBase : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation);
}
[ActionAttribute("UnitTestSession.TargetPlatform.x64", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "X64ActionText")]
public class JetBrains.ReSharper.UnitTestFramework.UI.Session.Actions.UnitTestSessionTargetPlatformX64 : UnitTestSessionTargetPlatformBase {
    protected Nullable`1<PlatformType> PlatformType { get; }
    protected virtual Nullable`1<PlatformType> get_PlatformType();
}
[ActionAttribute("UnitTestSession.TargetPlatform.x86", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "X86ActionText")]
public class JetBrains.ReSharper.UnitTestFramework.UI.Session.Actions.UnitTestSessionTargetPlatformX86 : UnitTestSessionTargetPlatformBase {
    protected Nullable`1<PlatformType> PlatformType { get; }
    protected virtual Nullable`1<PlatformType> get_PlatformType();
}
[ActionAttribute("UnitTestSession.Time", "JetBrains.ReSharper.UnitTestFramework.Resources.Strings", "ShowTimeActionText")]
public class JetBrains.ReSharper.UnitTestFramework.UI.Session.Actions.UnitTestSessionTimeAction : object {
    public sealed virtual bool Update(IDataContext context, CheckedActionPresentation presentation);
    public sealed virtual void Execute(IDataContext context);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.UnitTestFramework.UI.Session.DefaultNoopUnitTestSessionConductor : object {
    [CompilerGeneratedAttribute]
private ISignal`1<IUnitTestSessionTreeViewModel> <SessionOpened>k__BackingField;
    [CompilerGeneratedAttribute]
private ISignal`1<IUnitTestSessionTreeViewModel> <SessionClosed>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<IUnitTestSessionTreeViewModel> <ActiveSession>k__BackingField;
    public ISignal`1<IUnitTestSessionTreeViewModel> SessionOpened { get; }
    public ISignal`1<IUnitTestSessionTreeViewModel> SessionClosed { get; }
    public IProperty`1<IUnitTestSessionTreeViewModel> ActiveSession { get; }
    public IEnumerable`1<IUnitTestSessionTreeViewModel> Sessions { get; }
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<IUnitTestSessionTreeViewModel> get_SessionOpened();
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<IUnitTestSessionTreeViewModel> get_SessionClosed();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<IUnitTestSessionTreeViewModel> get_ActiveSession();
    public sealed virtual IEnumerable`1<IUnitTestSessionTreeViewModel> get_Sessions();
    public sealed virtual IUnitTestSessionTreeViewModel GetSession(IUnitTestSession session);
    public sealed virtual Task`1<IUnitTestSessionTreeViewModel> OpenSession(IUnitTestSession session, bool activate);
    public sealed virtual Task CloseSession(IUnitTestSession session);
}
public interface JetBrains.ReSharper.UnitTestFramework.UI.Session.IRunningUnitTestTracker {
    public abstract virtual LocalDisposable DoNotResetCookie();
}
public interface JetBrains.ReSharper.UnitTestFramework.UI.Session.IUnitTestSessionConductor {
    [NotNullAttribute]
public IEnumerable`1<IUnitTestSessionTreeViewModel> Sessions { get; }
    [NotNullAttribute]
public IProperty`1<IUnitTestSessionTreeViewModel> ActiveSession { get; }
    [NotNullAttribute]
public ISignal`1<IUnitTestSessionTreeViewModel> SessionOpened { get; }
    [NotNullAttribute]
public ISignal`1<IUnitTestSessionTreeViewModel> SessionClosed { get; }
    public abstract virtual IEnumerable`1<IUnitTestSessionTreeViewModel> get_Sessions();
    public abstract virtual IProperty`1<IUnitTestSessionTreeViewModel> get_ActiveSession();
    [CanBeNullAttribute]
public abstract virtual IUnitTestSessionTreeViewModel GetSession(IUnitTestSession session);
    [NotNullAttribute]
public abstract virtual Task`1<IUnitTestSessionTreeViewModel> OpenSession(IUnitTestSession session, bool activate);
    [NotNullAttribute]
public abstract virtual Task CloseSession(IUnitTestSession session);
    public abstract virtual ISignal`1<IUnitTestSessionTreeViewModel> get_SessionOpened();
    public abstract virtual ISignal`1<IUnitTestSessionTreeViewModel> get_SessionClosed();
}
public interface JetBrains.ReSharper.UnitTestFramework.UI.Session.IUnitTestSessionTreeViewModel {
    [NotNullAttribute]
public ISolution Solution { get; }
    [NotNullAttribute]
public IUnitTestSession Session { get; }
    [NotNullAttribute]
public IUnitTestResultManager ResultManager { get; }
    [NotNullAttribute]
public IProperty`1<bool> ShowDuration { get; }
    [NotNullAttribute]
public IProperty`1<bool> AutoScrollOutput { get; }
    [NotNullAttribute]
public IRunningUnitTestTracker TrackRunning { get; }
    public abstract virtual ISolution get_Solution();
    public abstract virtual IUnitTestSession get_Session();
    public abstract virtual IUnitTestResultManager get_ResultManager();
    public abstract virtual IProperty`1<bool> get_ShowDuration();
    public abstract virtual IProperty`1<bool> get_AutoScrollOutput();
    public abstract virtual IRunningUnitTestTracker get_TrackRunning();
}
public abstract class JetBrains.ReSharper.UnitTestFramework.UI.Session.UnitTestSessionConductorBase : object {
    protected ILogger myLogger;
    protected Lifetime myLifetime;
    protected ISolution mySolution;
    protected IUnitTestingSettings mySettings;
    protected IUIApplication myApplication;
    protected IActionManager myActionManager;
    protected IActionBarManager myActionBarManager;
    protected IUnitTestSessionRepository mySessionRepository;
    protected ConcurrentDictionary`2<Guid, Task`1<ToolWindowInstance>> myToolWindows;
    protected ConcurrentDictionary`2<Guid, IUnitTestSessionTreeViewModel> myViewModels;
    protected ConcurrentDictionary`2<Guid, LifetimeDefinition> myViewModelsLifetimes;
    protected object myLock;
    protected OptimizedPersistentSortedMap`2<Guid, UnitTestSessionViewModelState> myViewModelsPersistentState;
    private int myInitialized;
    [CompilerGeneratedAttribute]
private IProperty`1<IUnitTestSessionTreeViewModel> <ActiveSession>k__BackingField;
    [CompilerGeneratedAttribute]
private ISignal`1<IUnitTestSessionTreeViewModel> <SessionOpened>k__BackingField;
    [CompilerGeneratedAttribute]
private ISignal`1<IUnitTestSessionTreeViewModel> <SessionClosed>k__BackingField;
    public IEnumerable`1<IUnitTestSessionTreeViewModel> Sessions { get; }
    public IProperty`1<IUnitTestSessionTreeViewModel> ActiveSession { get; }
    public ISignal`1<IUnitTestSessionTreeViewModel> SessionOpened { get; }
    public ISignal`1<IUnitTestSessionTreeViewModel> SessionClosed { get; }
    public UnitTestSessionConductorBase(UnitTestingSerializer serializer, Lifetime lifetime, ISolution solution, ITheming theming, IUIApplication application, IUnitTestingSettings settings, IActionManager actionManager, IActionBarManager actionBarManager, IPersistentIndexManager persistentIndexManager, IUnitTestSessionRepository sessionRepository, ILogger logger);
    public sealed virtual IEnumerable`1<IUnitTestSessionTreeViewModel> get_Sessions();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<IUnitTestSessionTreeViewModel> get_ActiveSession();
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<IUnitTestSessionTreeViewModel> get_SessionOpened();
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<IUnitTestSessionTreeViewModel> get_SessionClosed();
    protected void EnsureSessionsAreOpened();
    public sealed virtual IUnitTestSessionTreeViewModel GetSession(IUnitTestSession session);
    public IUnitTestSessionTreeViewModel GetSession(Guid sessionId);
    public abstract virtual Task`1<IUnitTestSessionTreeViewModel> OpenSession(IUnitTestSession session, bool activate);
    public abstract virtual Task CloseSession(IUnitTestSession session);
    protected void PersistSessionWhenModified(Lifetime viewModelLifetime, IUnitTestSessionTreeViewModel viewModel);
    private void UpdateViewModelState(IUnitTestSessionTreeViewModel viewModel);
    protected UnitTestSessionViewModelState GetViewModelState(Guid sessionId);
    [CompilerGeneratedAttribute]
private void <.ctor>b__25_2(IUnitTestSession e);
    [CompilerGeneratedAttribute]
private bool <EnsureSessionsAreOpened>b__26_0(IUnitTestSession s);
    [CompilerGeneratedAttribute]
private void <EnsureSessionsAreOpened>b__26_1(IUnitTestSession s);
}
public abstract class JetBrains.ReSharper.UnitTestFramework.UI.Session.UnitTestSessionDescriptorSuperBase : UnitTestDescriptorBase {
    [NotNullAttribute]
private StackTracePathResolverCache myPathResolverCache;
    [NotNullAttribute]
private IUnitTestingInitializationAwaiter myUtReadyTask;
    [CompilerGeneratedAttribute]
private IUnitTestSession <Session>k__BackingField;
    [CompilerGeneratedAttribute]
private IUnitTestResultManager <ResultManager>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <ShowDuration>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <AutoScrollOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private IRunningUnitTestTracker <TrackRunning>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsUpdatingContent>k__BackingField;
    public UnitTestSessionTree TreeModel { get; }
    public IUnitTestSession Session { get; }
    public IUnitTestResultManager ResultManager { get; }
    public IProperty`1<bool> ShowDuration { get; }
    public IProperty`1<bool> AutoScrollOutput { get; }
    public IRunningUnitTestTracker TrackRunning { get; }
    public IProperty`1<bool> IsUpdatingContent { get; }
    public PreviewSupport PreviewSupport { get; }
    protected UnitTestSessionDescriptorSuperBase(Lifetime lifetime, ISolution solution, IUnitTestSession session, IUnitTestElementRepository elementRepository, IUnitTestResultManager resultManager, IUnitTestViewModelFactory viewModelFactory, StackTracePathResolverCache pathResolverCache, IUnitTestingInitializationAwaiter utReadyTask);
    public UnitTestSessionTree get_TreeModel();
    [CompilerGeneratedAttribute]
public sealed virtual IUnitTestSession get_Session();
    [CompilerGeneratedAttribute]
public sealed virtual IUnitTestResultManager get_ResultManager();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_ShowDuration();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_AutoScrollOutput();
    [CompilerGeneratedAttribute]
public sealed virtual IRunningUnitTestTracker get_TrackRunning();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsUpdatingContent();
    protected void InitializeTreeModelItems();
    protected virtual IUnitTestTreeGroupProviderMarker GetHierarchyProvider(ISolution solution);
    public virtual string ToString();
    public virtual bool AcceptOccurrence(object value);
    public PreviewSupport get_PreviewSupport();
    public virtual bool Navigate(TreeModelNode node, PopupWindowContextSource windowContext, bool transferFocus, TabOptions options);
    private sealed virtual override IProperty`1<IconId> JetBrains.ReSharper.UnitTestFramework.UI.ViewModels.IUnitTestTreeViewModel.get_Image();
    private sealed virtual override IProperty`1<string> JetBrains.ReSharper.UnitTestFramework.UI.ViewModels.IUnitTestTreeViewModel.get_Title();
    [CompilerGeneratedAttribute]
private IBindableSet`1<Int32`1<IUnitTestElement>> <InitializeTreeModelItems>b__23_0(Task _);
}
public static class JetBrains.ReSharper.UnitTestFramework.UI.UnitTestIconManager : object {
    private static ConcurrentDictionary`2<UnitTestStatus, IconId> ourOutdatedIcons;
    private static ConcurrentDictionary`2<UnitTestStatus, IconId> ourRotatingIcons;
    private static UnitTestIconManager();
    [CanBeNullAttribute]
public static IconId GetGutterStateImage(UnitTestStatus status, UnitTestElementKind elementKind);
    [NotNullAttribute]
public static IconId GetStateImage(UnitTestStatusTuple status, bool outdated);
    [NotNullAttribute]
public static IconId GetStateImage(UnitTestStatus status, bool outdated);
    [NotNullAttribute]
private static IconId GetStateImage(UnitTestStatus status);
    [NotNullAttribute]
private static IconId GetRotatingIcon(UnitTestStatus status);
}
public class JetBrains.ReSharper.UnitTestFramework.UI.ViewModels.Filters.AllTestsFilter : AAutomation {
    private ElementChangesDependency myElementManagerDependency;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private IBindable`1<TestCount> <Count>k__BackingField;
    public string Name { get; }
    public IconId Icon { get; }
    public IProperty`1<bool> IsEnabled { get; }
    public IBindable`1<TestCount> Count { get; }
    public UnitTestStatus Status { get; }
    public IEnumerable`1<IDependencyDefinition> Dependencies { get; }
    public AllTestsFilter(Lifetime lifetime, IUnitTestSessionTree tree, IUnitTestTreeFilter additionalFilter);
    public sealed virtual string get_Name();
    public sealed virtual IconId get_Icon();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsEnabled();
    [CompilerGeneratedAttribute]
public sealed virtual IBindable`1<TestCount> get_Count();
    public sealed virtual UnitTestStatus get_Status();
    public sealed virtual IEnumerable`1<IDependencyDefinition> get_Dependencies();
    public sealed virtual IUnitTestElementCriterion ToCriterion();
    public bool Matches(IUnitTestElement element);
}
public class JetBrains.ReSharper.UnitTestFramework.UI.ViewModels.Filters.CompoundUnitTestTreeFilter : AAutomation {
    private int myBusyCounter;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IUnitTestTreeFilter> <Filters>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<IUnitTestTreeFilterValueObject> <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsBusy>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSuspended>k__BackingField;
    [NotNullAttribute]
public IEnumerable`1<IUnitTestTreeFilter> Filters { get; }
    public IProperty`1<IUnitTestTreeFilterValueObject> Value { get; public set; }
    public IProperty`1<bool> IsBusy { get; }
    public bool IsSuspended { get; private set; }
    public CompoundUnitTestTreeFilter(Lifetime lifetime, IUnitTestTreeFilter[] filters);
    [CompilerGeneratedAttribute]
public IEnumerable`1<IUnitTestTreeFilter> get_Filters();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<IUnitTestTreeFilterValueObject> get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(IProperty`1<IUnitTestTreeFilterValueObject> value);
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_IsBusy();
    private IUnitTestTreeFilterValueObject AggregateValue();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsSuspended();
    [CompilerGeneratedAttribute]
private void set_IsSuspended(bool value);
    public sealed virtual void Suspend();
    public sealed virtual void Resume();
    [CompilerGeneratedAttribute]
private void <.ctor>b__11_0(PropertyChangedEventArgs`1<IUnitTestTreeFilterValueObject> args);
}
public class JetBrains.ReSharper.UnitTestFramework.UI.ViewModels.Filters.ElementChangesDependency : object {
    [NotNullAttribute]
private IBindableSet`1<Int32`1<IUnitTestElement>> myElements;
    [NotNullAttribute]
private ISync myWriteLock;
    [NotNullAttribute]
private UnitTestElementChanges myChangesToNotify;
    public bool AppliesToCollections { get; }
    public bool AppliesToSingleElement { get; }
    public ElementChangesDependency(IBindableSet`1<Int32`1<IUnitTestElement>> elements, ISync writeLock, UnitTestElementChanges changesToNotify);
    public sealed virtual bool get_AppliesToCollections();
    public sealed virtual bool get_AppliesToSingleElement();
    public sealed virtual IDependency ConstructForCollection(IBindableView`1<TElement> sourceElements, IPathNavigator pathNavigator);
    public sealed virtual IDependency ConstructForElement(TElement sourceElement, IPathNavigator pathNavigator);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
public class JetBrains.ReSharper.UnitTestFramework.UI.ViewModels.Filters.FailedTestsFilter : UnitTestSessionStatusFilter {
    public FailedTestsFilter(Lifetime lifetime, IUnitTestSession session, IUnitTestResultManager unitTestResultManager, IUnitTestTreeFilter additionalFilter);
}
public class JetBrains.ReSharper.UnitTestFramework.UI.ViewModels.Filters.IgnoredTestsFilter : UnitTestSessionStatusFilter {
    public IgnoredTestsFilter(Lifetime lifetime, IUnitTestSession session, IUnitTestResultManager unitTestResultManager, IUnitTestTreeFilter additionalFilter);
}
public interface JetBrains.ReSharper.UnitTestFramework.UI.ViewModels.Filters.IUnitTestSessionFilterConductor {
    [NotNullAttribute]
[ItemNotNullAttribute]
public IUnitTestSessionStatusFilter[] Filters { get; }
    public abstract virtual IUnitTestSessionStatusFilter[] get_Filters();
}
public interface JetBrains.ReSharper.UnitTestFramework.UI.ViewModels.Filters.IUnitTestSessionFilterViewModel {
    [NotNullAttribute]
public string Name { get; }
    [NotNullAttribute]
public IconId Icon { get; }
    [NotNullAttribute]
public IProperty`1<bool> IsEnabled { get; }
    [NotNullAttribute]
public IBindable`1<TestCount> Count { get; }
    public abstract virtual string get_Name();
    public abstract virtual IconId get_Icon();
    public abstract virtual IProperty`1<bool> get_IsEnabled();
    public abstract virtual IBindable`1<TestCount> get_Count();
}
public interface JetBrains.ReSharper.UnitTestFramework.UI.ViewModels.Filters.IUnitTestSessionStatusFilter {
    [NotNullAttribute]
public UnitTestStatus Status { get; }
    [NotNullAttribute]
public IEnumerable`1<IDependencyDefinition> Dependencies { get; }
    public abstract virtual UnitTestStatus get_Status();
    public abstract virtual IEnumerable`1<IDependencyDefinition> get_Dependencies();
    [NotNullAttribute]
public abstract virtual IUnitTestElementCriterion ToCriterion();
}
public interface JetBrains.ReSharper.UnitTestFramework.UI.ViewModels.Filters.IUnitTestTargetFrameworkFilter {
    [NotNullAttribute]
public IProperty`1<ISet`1<TargetFrameworkId>> SelectedTargetFrameworkIds { get; }
    public abstract virtual IProperty`1<ISet`1<TargetFrameworkId>> get_SelectedTargetFrameworkIds();
}
public class JetBrains.ReSharper.UnitTestFramework.UI.ViewModels.Filters.PassedTestsFilter : UnitTestSessionStatusFilter {
    public PassedTestsFilter(Lifetime lifetime, IUnitTestSession session, IUnitTestResultManager unitTestResultManager, IUnitTestTreeFilter additionalFilter);
}
[IsReadOnlyAttribute]
public class JetBrains.ReSharper.UnitTestFramework.UI.ViewModels.Filters.TestCount : ValueType {
    [CompilerGeneratedAttribute]
private int <Visible>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Total>k__BackingField;
    public int Visible { get; }
    public int Total { get; }
    public TestCount(int visible, int total);
    [CompilerGeneratedAttribute]
public int get_Visible();
    [CompilerGeneratedAttribute]
public int get_Total();
    public bool Equals(TestCount other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    private sealed virtual override void System.ComponentModel.INotifyPropertyChanged.add_PropertyChanged(PropertyChangedEventHandler value);
    private sealed virtual override void System.ComponentModel.INotifyPropertyChanged.remove_PropertyChanged(PropertyChangedEventHandler value);
}
public abstract class JetBrains.ReSharper.UnitTestFramework.UI.ViewModels.Filters.UnitTestResultDependentFilterBase : AAutomation {
    [NotNullAttribute]
protected IUnitTestResultManager ResultManager;
    [NotNullAttribute]
protected IUnitTestSession Session;
    [NotNullAttribute]
protected IBindableView`1<Int32`1<IUnitTestElement>> FilteredElements;
    private ResultManagerDependency myResultManagerDependency;
    private ElementChangesDependency myElementManagerDependency;
    public IEnumerable`1<IDependencyDefinition> Dependencies { get; }
    protected UnitTestResultDependentFilterBase(Lifetime lifetime, ISync writeLock, IUnitTestSession session, IBindableSet`1<Int32`1<IUnitTestElement>> elements, IUnitTestResultManager resultManager);
    public virtual IEnumerable`1<IDependencyDefinition> get_Dependencies();
    public abstract virtual bool ResultMatches(UnitTestResult result);
    public virtual bool Matches(Int32`1<IUnitTestElement> elementId);
    [CompilerGeneratedAttribute]
private bool <.ctor>b__7_0(Int32`1<IUnitTestElement> id);
}
public abstract class JetBrains.ReSharper.UnitTestFramework.UI.ViewModels.Filters.UnitTestSessionStatusFilter : UnitTestStatusFilterBase {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IconId <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsEnabled>k__BackingField;
    public string Name { get; }
    public IconId Icon { get; }
    public IProperty`1<bool> IsEnabled { get; }
    protected UnitTestSessionStatusFilter(string name, UnitTestStatus status, IconId icon, Lifetime lifetime, IUnitTestSession session, IUnitTestResultManager resultManager, IUnitTestTreeFilter additionalFilter);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual IconId get_Icon();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsEnabled();
    public sealed virtual IUnitTestElementCriterion ToCriterion();
    private sealed virtual override bool JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.Query.ICriterion<JetBrains.ReSharper.UnitTestFramework.Elements.IUnitTestElement>.Matches(IUnitTestElement element);
    public sealed virtual IUnitTestElementCriterion CreateSnapshot();
}
public class JetBrains.ReSharper.UnitTestFramework.UI.ViewModels.Filters.UnitTestSessionStatusFilterConductor : AAutomation {
    [NotNullAttribute]
private object myLock;
    [CompilerGeneratedAttribute]
private IUnitTestSessionStatusFilter[] <Filters>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<IUnitTestTreeFilterValueObject> <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSuspended>k__BackingField;
    public IUnitTestSessionStatusFilter[] Filters { get; }
    public IProperty`1<IUnitTestTreeFilterValueObject> Value { get; public set; }
    public UnitTestStatus Status { get; public set; }
    public bool IsSuspended { get; private set; }
    public UnitTestSessionStatusFilterConductor(Lifetime lifetime, IUnitTestSessionStatusFilter[] filters);
    [CompilerGeneratedAttribute]
public sealed virtual IUnitTestSessionStatusFilter[] get_Filters();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<IUnitTestTreeFilterValueObject> get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(IProperty`1<IUnitTestTreeFilterValueObject> value);
    public UnitTestStatus get_Status();
    public void set_Status(UnitTestStatus value);
    private UnitTestStatus GetStatus();
    private void SetStatus(UnitTestStatus status);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsSuspended();
    [CompilerGeneratedAttribute]
private void set_IsSuspended(bool value);
    public sealed virtual void Suspend();
    public sealed virtual void Resume();
}
public abstract class JetBrains.ReSharper.UnitTestFramework.UI.ViewModels.Filters.UnitTestStatusFilterBase : UnitTestResultDependentFilterBase {
    [CompilerGeneratedAttribute]
private UnitTestStatus <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private IBindable`1<TestCount> <Count>k__BackingField;
    public UnitTestStatus Status { get; }
    public IBindable`1<TestCount> Count { get; }
    protected UnitTestStatusFilterBase(UnitTestStatus status, Lifetime lifetime, ISync writeLock, IUnitTestSession session, IBindableSet`1<Int32`1<IUnitTestElement>> elements, IUnitTestResultManager resultManager, IUnitTestTreeFilter additionalFilter);
    [CompilerGeneratedAttribute]
public sealed virtual UnitTestStatus get_Status();
    [CompilerGeneratedAttribute]
public sealed virtual IBindable`1<TestCount> get_Count();
    public virtual bool ResultMatches(UnitTestResult result);
}
public class JetBrains.ReSharper.UnitTestFramework.UI.ViewModels.Filters.UnitTestTargetFrameworkFilter : AAutomation {
    private IDisposable myAllFrameworksActioner;
    private IDisposable mySelectedFrameworksActioner;
    private object mySyncRoot;
    [CompilerGeneratedAttribute]
private IBindableView`1<TargetFrameworkId> <AllItems>k__BackingField;
    [CompilerGeneratedAttribute]
private IBindableCollection`1<TargetFrameworkId> <SelectedItems>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<ISet`1<TargetFrameworkId>> <SelectedTargetFrameworkIds>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <AreAllSelected>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<IUnitTestTreeFilterValueObject> <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSuspended>k__BackingField;
    public IBindableView`1<TargetFrameworkId> AllItems { get; }
    public IBindableCollection`1<TargetFrameworkId> SelectedItems { get; }
    public IProperty`1<ISet`1<TargetFrameworkId>> SelectedTargetFrameworkIds { get; }
    public IProperty`1<bool> AreAllSelected { get; }
    public IProperty`1<IUnitTestTreeFilterValueObject> Value { get; public set; }
    public bool IsSuspended { get; private set; }
    public UnitTestTargetFrameworkFilter(Lifetime lifetime, IBindableView`1<Int32`1<IUnitTestElement>> elementIds, IByTargetFrameworkCache byTargetFrameworkIdCache);
    [CompilerGeneratedAttribute]
public IBindableView`1<TargetFrameworkId> get_AllItems();
    [CompilerGeneratedAttribute]
public IBindableCollection`1<TargetFrameworkId> get_SelectedItems();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<ISet`1<TargetFrameworkId>> get_SelectedTargetFrameworkIds();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_AreAllSelected();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<IUnitTestTreeFilterValueObject> get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(IProperty`1<IUnitTestTreeFilterValueObject> value);
    private IUnitTestTreeFilterValueObject AggregateValue(ISet`1<TargetFrameworkId> targetFrameworks);
    private void OnSelectedTargetFrameworkIdsChanged(PropertyChangedEventArgs`1<ISet`1<TargetFrameworkId>> e);
    private void OnTargetFrameworkAdded(TargetFrameworkId tf);
    private void OnTargetFrameworkRemoved(TargetFrameworkId tf);
    private void OnTargetFrameworkSelected(TargetFrameworkId tf);
    private void OnTargetFrameworkDeselected(TargetFrameworkId tf);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsSuspended();
    [CompilerGeneratedAttribute]
private void set_IsSuspended(bool value);
    public sealed virtual void Suspend();
    public sealed virtual void Resume();
}
public class JetBrains.ReSharper.UnitTestFramework.UI.ViewModels.Filters.UnitTestTextFilter : AAutomation {
    private Lifetime myLifetime;
    private int myUpdateProlongationStrategyCount;
    [NotNullAttribute]
private IShellLocks myLocks;
    [NotNullAttribute]
private IUnitTestTree myTree;
    [NotNullAttribute]
private FreeThreadedGroupingEvent myTextFilterGroupingEvent;
    [NotNullAttribute]
private object myUpdateProlongationStrategySync;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <SearchQuery>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<IUnitTestTreeFilterValueObject> <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSuspended>k__BackingField;
    [NotNullAttribute]
public IProperty`1<string> SearchQuery { get; }
    public IProperty`1<IUnitTestTreeFilterValueObject> Value { get; }
    public bool IsReady { get; }
    public bool IsSuspended { get; private set; }
    public UnitTestTextFilter(Lifetime lifetime, IShellLocks locks, IUnitTestTree tree);
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_SearchQuery();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<IUnitTestTreeFilterValueObject> get_Value();
    public bool get_IsReady();
    private void UpdateProlongationStrategy();
    private void FConverter(string arg);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsSuspended();
    [CompilerGeneratedAttribute]
private void set_IsSuspended(bool value);
    public sealed virtual void Suspend();
    public sealed virtual void Resume();
    [CompilerGeneratedAttribute]
private void <.ctor>b__14_0();
    [CompilerGeneratedAttribute]
private void <UpdateProlongationStrategy>b__15_0();
}
public class JetBrains.ReSharper.UnitTestFramework.UI.ViewModels.Filters.UnknownTestsFilter : UnitTestSessionStatusFilter {
    public UnknownTestsFilter(Lifetime lifetime, IUnitTestSession session, IUnitTestResultManager unitTestResultManager, IUnitTestTreeFilter additionalFilter);
    private sealed virtual override bool JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.Query.ICriterion<JetBrains.ReSharper.UnitTestFramework.Elements.IUnitTestElement>.Matches(IUnitTestElement element);
    public virtual bool ResultMatches(UnitTestResult result);
}
public interface JetBrains.ReSharper.UnitTestFramework.UI.ViewModels.IPartialUnitTestCount {
    [NotNullAttribute]
public IBindable`1<TestCount> Count { get; }
    public abstract virtual IBindable`1<TestCount> get_Count();
}
public interface JetBrains.ReSharper.UnitTestFramework.UI.ViewModels.IUnitTestTreeGroupProviderMarker {
    [NotNullAttribute]
public IconId IconId { get; }
    [NotNullAttribute]
[LocalizableAttribute("False")]
public string Key { get; }
    [NotNullAttribute]
[LocalizableAttribute("True")]
public string Name { get; }
    public abstract virtual IconId get_IconId();
    public abstract virtual string get_Key();
    public abstract virtual string get_Name();
}
public interface JetBrains.ReSharper.UnitTestFramework.UI.ViewModels.IUnitTestTreeViewModel {
    [NotNullAttribute]
public Lifetime Lifetime { get; }
    [NotNullAttribute]
public IAsyncUnitTestTree TreeModel { get; }
    [NotNullAttribute]
public IProperty`1<IconId> Image { get; }
    [NotNullAttribute]
public IProperty`1<string> Title { get; }
    [NotNullAttribute]
public IProperty`1<UnitTestingGroupingSelection> Grouping { get; }
    [NotNullAttribute]
public IProperty`1<IUnitTestTreeNode> SelectedNode { get; }
    [NotNullAttribute]
public IProperty`1<IReadOnlySet`1<IUnitTestTreeNode>> SelectedNodes { get; }
    [NotNullAttribute]
public IProperty`1<IReadOnlySet`1<Int32`1<IUnitTestElement>>> SelectedElements { get; }
    [NotNullAttribute]
public IProperty`1<IUnitTestTreeFilter> Filter { get; }
    public abstract virtual Lifetime get_Lifetime();
    public abstract virtual IAsyncUnitTestTree get_TreeModel();
    public abstract virtual IProperty`1<IconId> get_Image();
    public abstract virtual IProperty`1<string> get_Title();
    public abstract virtual IProperty`1<UnitTestingGroupingSelection> get_Grouping();
    public abstract virtual IProperty`1<IUnitTestTreeNode> get_SelectedNode();
    public abstract virtual IProperty`1<IReadOnlySet`1<IUnitTestTreeNode>> get_SelectedNodes();
    public abstract virtual IProperty`1<IReadOnlySet`1<Int32`1<IUnitTestElement>>> get_SelectedElements();
    public abstract virtual IProperty`1<IUnitTestTreeFilter> get_Filter();
    [CanBeNullAttribute]
public abstract virtual IUnitTestTreeNode TrySelectElement(Int32`1<IUnitTestElement> elementId);
}
public static class JetBrains.ReSharper.UnitTestFramework.UI.ViewModels.Providers : object {
    [LocalizableAttribute("False")]
public static string Project;
    [LocalizableAttribute("False")]
public static string FileSystem;
    [LocalizableAttribute("False")]
public static string Namespace;
    [LocalizableAttribute("False")]
public static string Category;
    [LocalizableAttribute("False")]
public static string Hierarchy;
    [LocalizableAttribute("False")]
public static string TargetFramework;
}
internal class JetBrains.ReSharper.UnitTestFramework.UI.ViewModels.TreeModel.Disambigue`1 : object {
    private IByShortNameCache myCountingCache;
    private IDictionary`2<TNode, Dictionary`2<string, int>> myNodes;
    private int myCollisionsCount;
    private int myLastCollisionsCountOnRun;
    private bool myNeedToDisambiguate;
    public Disambigue`1(IByShortNameCache byShortNameCache);
    public void NodeAdded(TNode parent, TNode node);
    public void NodeRemoved(TNode parent, TNode node);
    public void Run();
    private void RunOnNode(TNode node);
}
public class JetBrains.ReSharper.UnitTestFramework.UI.ViewModels.TreeModel.FilterValue : object {
    [NotNullAttribute]
public static IUnitTestTreeFilterValueObject Empty;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IDependencyDefinition> <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private IUnitTestElementCriterion <Criterion>k__BackingField;
    public IEnumerable`1<IDependencyDefinition> Dependencies { get; }
    public IUnitTestElementCriterion Criterion { get; }
    public FilterValue(IEnumerable`1<IDependencyDefinition> dependencies, IUnitTestElementCriterion criterion);
    private static FilterValue();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<IDependencyDefinition> get_Dependencies();
    [CompilerGeneratedAttribute]
public sealed virtual IUnitTestElementCriterion get_Criterion();
    public static IUnitTestTreeFilterValueObject Create(IUnitTestElementCriterion criterion);
    public static IUnitTestTreeFilterValueObject Create(IUnitTestTreeFilterValueObject[] values);
}
public interface JetBrains.ReSharper.UnitTestFramework.UI.ViewModels.TreeModel.IAsyncUnitTestTree {
    [NotNullAttribute]
public IProperty`1<bool> IsUpdating { get; }
    public abstract virtual IProperty`1<bool> get_IsUpdating();
}
public interface JetBrains.ReSharper.UnitTestFramework.UI.ViewModels.TreeModel.IUnitTestSessionTree {
    [NotNullAttribute]
public IUnitTestSessionTreeNode Root { get; }
    [NotNullAttribute]
public IUnitTestSession Session { get; }
    [NotNullAttribute]
public IBindable`1<bool> ShowDuration { get; public set; }
    public abstract virtual IUnitTestSessionTreeNode get_Root();
    public abstract virtual IUnitTestSession get_Session();
    public abstract virtual IBindable`1<bool> get_ShowDuration();
    public abstract virtual void set_ShowDuration(IBindable`1<bool> value);
}
public interface JetBrains.ReSharper.UnitTestFramework.UI.ViewModels.TreeModel.IUnitTestSessionTreeNode {
    [CanBeNullAttribute]
public IUnitTestSessionTreeNode Parent { get; }
    [NotNullAttribute]
public IBindableView`1<IUnitTestSessionTreeNode> Children { get; }
    [NotNullAttribute]
public IUnitTestSessionTree Model { get; }
    [NotNullAttribute]
public IBindable`1<UnitTestResultWithPropagation> Result { get; }
    public abstract virtual IUnitTestSessionTreeNode get_Parent();
    public abstract virtual IBindableView`1<IUnitTestSessionTreeNode> get_Children();
    public abstract virtual IUnitTestSessionTree get_Model();
    public abstract virtual IBindable`1<UnitTestResultWithPropagation> get_Result();
}
public interface JetBrains.ReSharper.UnitTestFramework.UI.ViewModels.TreeModel.IUnitTestSessionTreeNodeData {
    [NotNullAttribute]
public IBindable`1<UnitTestResultWithPropagation> Result { get; }
    public abstract virtual IBindable`1<UnitTestResultWithPropagation> get_Result();
}
public interface JetBrains.ReSharper.UnitTestFramework.UI.ViewModels.TreeModel.IUnitTestSessionTreeNodeUpdater {
    [NotNullAttribute]
public abstract virtual IUnitTestSessionTreeNodeData Initialize(Node node);
    public abstract virtual void OnResultUpdated(IUnitTestElement element);
    public abstract virtual void OnItemAddedToNode(Node node, Int32`1<IUnitTestElement> item);
    public abstract virtual void OnItemRemoveFromNode(Node node, Int32`1<IUnitTestElement> item);
    public abstract virtual void OnItemChangesLeafState(Int32`1<IUnitTestElement> item);
    public abstract virtual void OnItemRemoved(Int32`1<IUnitTestElement> item);
    public abstract virtual void OnTreeCleared();
    public abstract virtual LocalDisposable`1<ReaderWriterLockSlim> ReadLock();
    public abstract virtual LocalDisposable`1<ReaderWriterLockSlim> WriteLock();
}
public interface JetBrains.ReSharper.UnitTestFramework.UI.ViewModels.TreeModel.IUnitTestTree {
    [NotNullAttribute]
public IUnitTestElementCriterion Criterion { get; }
    [NotNullAttribute]
public IBindableSet`1<Int32`1<IUnitTestElement>> Items { get; }
    [NotNullAttribute]
public IReadOnlySet`1<Int32`1<IUnitTestElement>> FilteredItems { get; }
    [NotNullAttribute]
public IProperty`1<IUnitTestTreeFilter> Filter { get; }
    [NotNullAttribute]
public IEnumerable`1<IUnitTestTreeGroupProviderMarker> GroupProviders { get; public set; }
    public abstract virtual IUnitTestElementCriterion get_Criterion();
    public abstract virtual IBindableSet`1<Int32`1<IUnitTestElement>> get_Items();
    public abstract virtual IReadOnlySet`1<Int32`1<IUnitTestElement>> get_FilteredItems();
    public abstract virtual IProperty`1<IUnitTestTreeFilter> get_Filter();
    public abstract virtual IEnumerable`1<IUnitTestTreeGroupProviderMarker> get_GroupProviders();
    public abstract virtual void set_GroupProviders(IEnumerable`1<IUnitTestTreeGroupProviderMarker> value);
    [NotNullAttribute]
public abstract virtual IEnumerable`1<IUnitTestTreeNode> GetNodes(Int32`1<IUnitTestElement> elementId);
    [NotNullAttribute]
public abstract virtual IEnumerable`1<IUnitTestTreeNode> GetNodesHavingItem(Int32`1<IUnitTestElement> elementId);
}
public interface JetBrains.ReSharper.UnitTestFramework.UI.ViewModels.TreeModel.IUnitTestTreeEventBus {
    [NotNullAttribute]
public ISignal`1<IUnitTestTreeNode> NodeAdded { get; }
    [NotNullAttribute]
public ISignal`1<IUnitTestTreeNode> NodeRemoved { get; }
    [NotNullAttribute]
public ISignal`1<IUnitTestTreeNode> NodeChanged { get; }
    [NotNullAttribute]
public ISignal`1<IUnitTestTree> TreeCleared { get; }
    public abstract virtual ISignal`1<IUnitTestTreeNode> get_NodeAdded();
    public abstract virtual ISignal`1<IUnitTestTreeNode> get_NodeRemoved();
    public abstract virtual ISignal`1<IUnitTestTreeNode> get_NodeChanged();
    public abstract virtual ISignal`1<IUnitTestTree> get_TreeCleared();
}
public interface JetBrains.ReSharper.UnitTestFramework.UI.ViewModels.TreeModel.IUnitTestTreeFilter {
    [NotNullAttribute]
public IProperty`1<IUnitTestTreeFilterValueObject> Value { get; }
    public abstract virtual IProperty`1<IUnitTestTreeFilterValueObject> get_Value();
}
public interface JetBrains.ReSharper.UnitTestFramework.UI.ViewModels.TreeModel.IUnitTestTreeFilterValueObject {
    [NotNullAttribute]
[ItemNotNullAttribute]
public IEnumerable`1<IDependencyDefinition> Dependencies { get; }
    [NotNullAttribute]
public IUnitTestElementCriterion Criterion { get; }
    public abstract virtual IEnumerable`1<IDependencyDefinition> get_Dependencies();
    public abstract virtual IUnitTestElementCriterion get_Criterion();
}
public interface JetBrains.ReSharper.UnitTestFramework.UI.ViewModels.TreeModel.IUnitTestTreeNode {
    [NotNullAttribute]
public IUnitTestTree Model { get; }
    [NotNullAttribute]
public IReadOnlySet`1<Int32`1<IUnitTestElement>> Items { get; }
    [NotNullAttribute]
public IUnitTestViewModel ViewModel { get; }
    [NotNullAttribute]
public IUnitTestElementCriterion Criterion { get; }
    [NotNullAttribute]
public IBindable`1<IconId> EntityIcon { get; }
    [NotNullAttribute]
public IBindable`1<RichText> RichText { get; }
    [NotNullAttribute]
public IBindable`1<int> TestsCount { get; }
    [NotNullAttribute]
public bool HasChildren { get; }
    public abstract virtual IUnitTestTree get_Model();
    public abstract virtual IReadOnlySet`1<Int32`1<IUnitTestElement>> get_Items();
    public abstract virtual IUnitTestViewModel get_ViewModel();
    public abstract virtual IUnitTestElementCriterion get_Criterion();
    public abstract virtual IBindable`1<IconId> get_EntityIcon();
    public abstract virtual IBindable`1<RichText> get_RichText();
    public abstract virtual IBindable`1<int> get_TestsCount();
    public abstract virtual bool get_HasChildren();
}
[UnitTestViewModelAttribute("JetBrains.ReSharper.UnitTestFramework.Elements.UnitTestElementCategory")]
public class JetBrains.ReSharper.UnitTestFramework.UI.ViewModels.TreeModel.Nodes.CategoryViewModel : AAutomation {
    [CompilerGeneratedAttribute]
private UnitTestElementCategory <Category>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<Int32`1<IUnitTestElement>> <ItemsNotInCategory>k__BackingField;
    [CompilerGeneratedAttribute]
private OneToSetMap`2<Int32`1<IUnitTestElement>, Int32`1<IUnitTestElement>> <Ancestors>k__BackingField;
    [CompilerGeneratedAttribute]
private IBindable`1<IconId> <EntityIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private IBindable`1<RichText> <RichText>k__BackingField;
    [NotNullAttribute]
public UnitTestElementCategory Category { get; }
    [NotNullAttribute]
public HashSet`1<Int32`1<IUnitTestElement>> ItemsNotInCategory { get; }
    [NotNullAttribute]
public OneToSetMap`2<Int32`1<IUnitTestElement>, Int32`1<IUnitTestElement>> Ancestors { get; }
    public object DataItem { get; }
    public IBindable`1<IconId> EntityIcon { get; }
    public IBindable`1<RichText> RichText { get; }
    public bool IsLastNodeInChain { get; }
    public CategoryViewModel(UnitTestElementCategory category);
    [CompilerGeneratedAttribute]
public UnitTestElementCategory get_Category();
    [CompilerGeneratedAttribute]
public HashSet`1<Int32`1<IUnitTestElement>> get_ItemsNotInCategory();
    [CompilerGeneratedAttribute]
public OneToSetMap`2<Int32`1<IUnitTestElement>, Int32`1<IUnitTestElement>> get_Ancestors();
    public sealed virtual object get_DataItem();
    [CompilerGeneratedAttribute]
public sealed virtual IBindable`1<IconId> get_EntityIcon();
    [CompilerGeneratedAttribute]
public sealed virtual IBindable`1<RichText> get_RichText();
    public sealed virtual bool get_IsLastNodeInChain();
    public virtual string ToString();
}
[UnitTestViewModelAttribute("JetBrains.ReSharper.UnitTestFramework.Execution.TestDurationGrade")]
public class JetBrains.ReSharper.UnitTestFramework.UI.ViewModels.TreeModel.Nodes.DurationViewModel : AAutomation {
    [NotNullAttribute]
private IUnitTestingSettings mySettings;
    [CompilerGeneratedAttribute]
private TestDurationGrade <Grade>k__BackingField;
    [CompilerGeneratedAttribute]
private IBindable`1<IconId> <EntityIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private IBindable`1<RichText> <RichText>k__BackingField;
    public TestDurationGrade Grade { get; }
    public object DataItem { get; }
    public IBindable`1<IconId> EntityIcon { get; }
    public IBindable`1<RichText> RichText { get; }
    public bool IsLastNodeInChain { get; }
    public DurationViewModel(IUnitTestingSettings settings, TestDurationGrade grade);
    [CompilerGeneratedAttribute]
public TestDurationGrade get_Grade();
    public sealed virtual object get_DataItem();
    [CompilerGeneratedAttribute]
public sealed virtual IBindable`1<IconId> get_EntityIcon();
    [CompilerGeneratedAttribute]
public sealed virtual IBindable`1<RichText> get_RichText();
    public sealed virtual bool get_IsLastNodeInChain();
    private string DescribeGrade(TestDurationGrade grade);
    private string HumanReadableDuration(TimeSpan timeSpan);
    [LocalizableAttribute("False")]
public virtual string ToString();
}
[UnitTestViewModelAttribute("JetBrains.ProjectModel.ProjectModelElementEnvoy")]
public class JetBrains.ReSharper.UnitTestFramework.UI.ViewModels.TreeModel.Nodes.FileSystemItemViewModel : ProjectModelElementEnvoyViewModel {
    [CompilerGeneratedAttribute]
private bool <IsLastNodeInChain>k__BackingField;
    public bool IsLastNodeInChain { get; public set; }
    public FileSystemItemViewModel(ProjectModelElementPresentationService elementPresentationService, ProjectModelElementEnvoy envoy);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsLastNodeInChain();
    [CompilerGeneratedAttribute]
public void set_IsLastNodeInChain(bool value);
}
public interface JetBrains.ReSharper.UnitTestFramework.UI.ViewModels.TreeModel.Nodes.IUnitTestViewModel {
    [NotNullAttribute]
public object DataItem { get; }
    [NotNullAttribute]
public bool IsLastNodeInChain { get; }
    [NotNullAttribute]
public IBindable`1<IconId> EntityIcon { get; }
    [NotNullAttribute]
public IBindable`1<RichText> RichText { get; }
    public abstract virtual object get_DataItem();
    public abstract virtual bool get_IsLastNodeInChain();
    public abstract virtual IBindable`1<IconId> get_EntityIcon();
    public abstract virtual IBindable`1<RichText> get_RichText();
}
public interface JetBrains.ReSharper.UnitTestFramework.UI.ViewModels.TreeModel.Nodes.IUnitTestViewModelFactory {
    [NotNullAttribute]
public abstract virtual IUnitTestViewModel CreateFor(object dataItem);
}
[UnitTestViewModelAttribute("JetBrains.ReSharper.UnitTestFramework.UI.ViewModels.Providers/NamespaceLikeElement")]
public class JetBrains.ReSharper.UnitTestFramework.UI.ViewModels.TreeModel.Nodes.NamespaceLikeElementViewModel : TestElementViewModel {
    [CompilerGeneratedAttribute]
private object <DataItem>k__BackingField;
    public object DataItem { get; }
    public NamespaceLikeElementViewModel(IUnitTestElementRepository repository, NamespaceLikeElement element);
    [CompilerGeneratedAttribute]
public virtual object get_DataItem();
}
[UnitTestViewModelAttribute("JetBrains.ReSharper.UnitTestFramework.Elements.UnitTestElementNamespace")]
public class JetBrains.ReSharper.UnitTestFramework.UI.ViewModels.TreeModel.Nodes.NamespaceViewModel : AAutomation {
    [CompilerGeneratedAttribute]
private UnitTestElementNamespace <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
private OneToSetMap`2<UnitTestElementNamespace, Int32`1<IUnitTestElement>> <ImmediateChildren>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLastNodeInChain>k__BackingField;
    [CompilerGeneratedAttribute]
private IBindable`1<IconId> <EntityIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private IBindable`1<RichText> <RichText>k__BackingField;
    [NotNullAttribute]
public UnitTestElementNamespace Namespace { get; public set; }
    [NotNullAttribute]
public OneToSetMap`2<UnitTestElementNamespace, Int32`1<IUnitTestElement>> ImmediateChildren { get; }
    public object DataItem { get; }
    public bool IsLastNodeInChain { get; public set; }
    public IBindable`1<IconId> EntityIcon { get; }
    public IBindable`1<RichText> RichText { get; }
    public NamespaceViewModel(PsiIconManager iconManager, UnitTestElementNamespace ns);
    [CompilerGeneratedAttribute]
public UnitTestElementNamespace get_Namespace();
    [CompilerGeneratedAttribute]
public void set_Namespace(UnitTestElementNamespace value);
    [CompilerGeneratedAttribute]
public OneToSetMap`2<UnitTestElementNamespace, Int32`1<IUnitTestElement>> get_ImmediateChildren();
    public sealed virtual object get_DataItem();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsLastNodeInChain();
    [CompilerGeneratedAttribute]
public void set_IsLastNodeInChain(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual IBindable`1<IconId> get_EntityIcon();
    [CompilerGeneratedAttribute]
public sealed virtual IBindable`1<RichText> get_RichText();
    public virtual string ToString();
}
[UnitTestViewModelAttribute("JetBrains.ReSharper.UnitTestFramework.UI.ViewModels.Providers/ProjectGroup")]
public class JetBrains.ReSharper.UnitTestFramework.UI.ViewModels.TreeModel.Nodes.ProjectItemViewModel : ProjectModelElementEnvoyViewModel {
    [CompilerGeneratedAttribute]
private bool <IsLastNodeInChain>k__BackingField;
    public bool IsLastNodeInChain { get; }
    public ProjectItemViewModel(ProjectModelElementPresentationService elementPresentationService, ProjectGroup group);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsLastNodeInChain();
}
public abstract class JetBrains.ReSharper.UnitTestFramework.UI.ViewModels.TreeModel.Nodes.ProjectModelElementEnvoyViewModel : AAutomation {
    [CompilerGeneratedAttribute]
private ProjectModelElementEnvoy <Envoy>k__BackingField;
    [CompilerGeneratedAttribute]
private object <DataItem>k__BackingField;
    [CompilerGeneratedAttribute]
private IBindable`1<IconId> <EntityIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private IBindable`1<RichText> <RichText>k__BackingField;
    [NotNullAttribute]
public ProjectModelElementEnvoy Envoy { get; }
    public object DataItem { get; }
    public IBindable`1<IconId> EntityIcon { get; }
    public IBindable`1<RichText> RichText { get; }
    protected ProjectModelElementEnvoyViewModel(ProjectModelElementPresentationService elementPresentationService, ProjectModelElementEnvoy envoy, object dataItem);
    [CompilerGeneratedAttribute]
public ProjectModelElementEnvoy get_Envoy();
    [CompilerGeneratedAttribute]
public sealed virtual object get_DataItem();
    [CompilerGeneratedAttribute]
public sealed virtual IBindable`1<IconId> get_EntityIcon();
    [CompilerGeneratedAttribute]
public sealed virtual IBindable`1<RichText> get_RichText();
    private RichText GetText(IProjectItem projectItem);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private string <ToString>b__14_0();
}
[UnitTestViewModelAttribute("JetBrains.Util.Dotnet.TargetFrameworkIds.TargetFrameworkId")]
public class JetBrains.ReSharper.UnitTestFramework.UI.ViewModels.TreeModel.Nodes.TargetFrameworkIdViewModel : AAutomation {
    [CompilerGeneratedAttribute]
private TargetFrameworkId <TargetFrameworkId>k__BackingField;
    [CompilerGeneratedAttribute]
private IBindable`1<IconId> <EntityIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private IBindable`1<RichText> <RichText>k__BackingField;
    [NotNullAttribute]
public TargetFrameworkId TargetFrameworkId { get; }
    public object DataItem { get; }
    public IBindable`1<IconId> EntityIcon { get; }
    public IBindable`1<RichText> RichText { get; }
    public bool IsLastNodeInChain { get; }
    public TargetFrameworkIdViewModel(PsiIconManager iconManager, TargetFrameworkId tf);
    [CompilerGeneratedAttribute]
public TargetFrameworkId get_TargetFrameworkId();
    public sealed virtual object get_DataItem();
    [CompilerGeneratedAttribute]
public sealed virtual IBindable`1<IconId> get_EntityIcon();
    [CompilerGeneratedAttribute]
public sealed virtual IBindable`1<RichText> get_RichText();
    public sealed virtual bool get_IsLastNodeInChain();
    public virtual string ToString();
}
[UnitTestViewModelAttribute("JetBrains.Util.dataStructures.TypedIntrinsics.Int32`1<JetBrains.ReSharper.UnitTestFramework.Elements.IUnitTestElement>")]
public class JetBrains.ReSharper.UnitTestFramework.UI.ViewModels.TreeModel.Nodes.TestElementViewModel : AAutomation {
    [NotNullAttribute]
private IUnitTestElementRepository myRepository;
    [CompilerGeneratedAttribute]
private Int32`1<IUnitTestElement> <ElementId>k__BackingField;
    [CompilerGeneratedAttribute]
private IBindable`1<IconId> <EntityIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private IBindable`1<RichText> <RichText>k__BackingField;
    [CompilerGeneratedAttribute]
private IBindable`1<string> <TargetFramework>k__BackingField;
    [CompilerGeneratedAttribute]
private IBindable`1<string> <Namespace>k__BackingField;
    public object DataItem { get; }
    public bool IsLastNodeInChain { get; }
    public Int32`1<IUnitTestElement> ElementId { get; }
    public IBindable`1<IconId> EntityIcon { get; }
    public IBindable`1<RichText> RichText { get; }
    public IBindable`1<string> TargetFramework { get; }
    public IBindable`1<string> Namespace { get; }
    public IUnitTestElement Element { get; }
    public TestElementViewModel(IUnitTestElementRepository repository, Int32`1<IUnitTestElement> elementId);
    public virtual object get_DataItem();
    public sealed virtual bool get_IsLastNodeInChain();
    [CompilerGeneratedAttribute]
public Int32`1<IUnitTestElement> get_ElementId();
    [CompilerGeneratedAttribute]
public sealed virtual IBindable`1<IconId> get_EntityIcon();
    [CompilerGeneratedAttribute]
public sealed virtual IBindable`1<RichText> get_RichText();
    [CompilerGeneratedAttribute]
public IBindable`1<string> get_TargetFramework();
    [CompilerGeneratedAttribute]
public IBindable`1<string> get_Namespace();
    public IUnitTestElement get_Element();
    private RichText GetText();
    private IconId GetEntityIcon();
    public virtual string ToString();
}
[BaseTypeRequiredAttribute("JetBrains.ReSharper.UnitTestFramework.UI.ViewModels.TreeModel.Nodes.IUnitTestViewModel")]
[AttributeUsageAttribute("4")]
public class JetBrains.ReSharper.UnitTestFramework.UI.ViewModels.TreeModel.Nodes.UnitTestViewModelAttribute : PartAttribute {
    [CompilerGeneratedAttribute]
private Type <DataItemType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Before>k__BackingField;
    [NotNullAttribute]
public Type DataItemType { get; }
    [CanBeNullAttribute]
public Type Before { get; public set; }
    public UnitTestViewModelAttribute(Type dataItemType);
    [CompilerGeneratedAttribute]
public Type get_DataItemType();
    [CompilerGeneratedAttribute]
public Type get_Before();
    [CompilerGeneratedAttribute]
public void set_Before(Type value);
    public static Nullable`1<int> Compare(Type left, Type right);
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.UnitTestFramework.UI.ViewModels.TreeModel.Nodes.UnitTestViewModelFactory : object {
    private static MethodInfo ourHelperInfo;
    private IComponentContainer myContainer;
    private ConcurrentDictionary`2<Type, Type> myMappings;
    private ConcurrentDictionary`2<Type, Func`2<object, IUnitTestViewModel>> myFactories;
    private IEnumerable`1<Type> myKnownViewModelTypes;
    public UnitTestViewModelFactory(Lifetime lifetime, IComponentContainer container, ShellPartCatalogSet catalogSet);
    private static UnitTestViewModelFactory();
    public sealed virtual IUnitTestViewModel CreateFor(object dataItem);
    private Func`2<object, IUnitTestViewModel> ValueFactory(Type type);
    [CanBeNullAttribute]
private Expression TryGetArgument(Type type);
    [UsedImplicitlyAttribute]
private Expression TryGetArgumentHelper();
    private Type GetViewModelType(Type dataItemType);
}
[UnitTestViewModelAttribute("JetBrains.ReSharper.UnitTestFramework.UI.ViewModels.Providers/UnknownProjectGroup")]
public class JetBrains.ReSharper.UnitTestFramework.UI.ViewModels.TreeModel.Nodes.UnknownProjectViewModel : object {
    [CompilerGeneratedAttribute]
private object <DataItem>k__BackingField;
    [CompilerGeneratedAttribute]
private IBindable`1<IconId> <EntityIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private IBindable`1<RichText> <RichText>k__BackingField;
    public object DataItem { get; }
    public bool IsLastNodeInChain { get; }
    public IBindable`1<IconId> EntityIcon { get; }
    public IBindable`1<RichText> RichText { get; }
    public UnknownProjectViewModel(UnknownProjectGroup group);
    [CompilerGeneratedAttribute]
public sealed virtual object get_DataItem();
    public sealed virtual bool get_IsLastNodeInChain();
    [CompilerGeneratedAttribute]
public sealed virtual IBindable`1<IconId> get_EntityIcon();
    [CompilerGeneratedAttribute]
public sealed virtual IBindable`1<RichText> get_RichText();
}
public class JetBrains.ReSharper.UnitTestFramework.UI.ViewModels.TreeModel.UnitTestExplorerTree : Async<Node> {
    [NotNullAttribute]
private IUnitTestViewModelFactory myViewModelFactory;
    public UnitTestExplorerTree(Lifetime lifetime, IByParentCache byParentCache, IByShortNameCache byShortNameCache, IUnitTestViewModelFactory viewModelFactory);
    public virtual Node CreateNode(object dataItem);
}
public class JetBrains.ReSharper.UnitTestFramework.UI.ViewModels.TreeModel.UnitTestSessionTree : Async<Node> {
    [NotNullAttribute]
private IUnitTestSession mySession;
    [NotNullAttribute]
private IUnitTestViewModelFactory myViewModelFactory;
    [NotNullAttribute]
private IUnitTestSessionTreeNodeUpdater myNodeUpdater;
    [CompilerGeneratedAttribute]
private IBindable`1<bool> <ShowDuration>k__BackingField;
    [CompilerGeneratedAttribute]
private JetHashSet`1<Int32`1<IUnitTestElement>> <Leaves>k__BackingField;
    [NotNullAttribute]
public IUnitTestSession Session { get; }
    [NotNullAttribute]
public IBindable`1<bool> ShowDuration { get; public set; }
    [NotNullAttribute]
public JetHashSet`1<Int32`1<IUnitTestElement>> Leaves { get; }
    private IUnitTestSessionTreeNode JetBrains.Application.UI.TreeModels.Revised.ITreeModel<JetBrains.ReSharper.UnitTestFramework.UI.ViewModels.TreeModel.IUnitTestSessionTreeNode>.Root { get; }
    private IUnitTestSessionTreeNode JetBrains.ReSharper.UnitTestFramework.UI.ViewModels.TreeModel.IUnitTestSessionTree.Root { get; }
    public UnitTestSessionTree(Lifetime lifetime, IUnitTestSession session, IByParentCache byParentCache, IByShortNameCache byShortNameCache, IUnitTestViewModelFactory viewModelFactory, IPersistentIndexManager persistentIndexManager, IUnitTestResultManager resultManager);
    public sealed virtual IUnitTestSession get_Session();
    [CompilerGeneratedAttribute]
public sealed virtual IBindable`1<bool> get_ShowDuration();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ShowDuration(IBindable`1<bool> value);
    [CompilerGeneratedAttribute]
public JetHashSet`1<Int32`1<IUnitTestElement>> get_Leaves();
    private sealed virtual override IUnitTestSessionTreeNode JetBrains.Application.UI.TreeModels.Revised.ITreeModel<JetBrains.ReSharper.UnitTestFramework.UI.ViewModels.TreeModel.IUnitTestSessionTreeNode>.get_Root();
    private sealed virtual override IUnitTestSessionTreeNode JetBrains.ReSharper.UnitTestFramework.UI.ViewModels.TreeModel.IUnitTestSessionTree.get_Root();
    public void RemoveNodesAsync(IEnumerable`1<Node> nodes, IUnitTestElementCriterion criterion);
    protected virtual void ClearTree();
    protected void OnItemChanged(Int32`1<IUnitTestElement> item);
    protected virtual AsyncProcessingQueue<Node> CreateQueue(Lifetime lt, BindableSetCollectionWithoutIndexTracking`1<Int32`1<IUnitTestElement>> items);
    protected virtual void SubscribeQueueToEvents(Lifetime lt, AsyncProcessingQueue<Node> queue, IBindableView`1<Int32`1<IUnitTestElement>> items);
    public virtual Node CreateNode(object dataItem);
    protected virtual void OnItemsAdded(IReadOnlyCollection`1<Int32`1<IUnitTestElement>> items);
    protected virtual void OnItemsRemoved(IReadOnlyCollection`1<Int32`1<IUnitTestElement>> items);
    protected virtual bool AddItemToNode(Node node, Int32`1<IUnitTestElement> item);
    protected virtual void OnItemAddedToNode(Node node, Int32`1<IUnitTestElement> item);
    protected virtual bool RemoveItemFromNode(Node node, Int32`1<IUnitTestElement> item);
    protected virtual void OnItemRemovedFromNode(Node node, Int32`1<IUnitTestElement> item);
    private bool TryGetItemHierarchyInfo(Int32`1<IUnitTestElement> elementId, Int32`1& parentId, Boolean& isLeaf);
}
internal class JetBrains.ReSharper.UnitTestFramework.UI.ViewModels.TreeModel.UnitTestSessionTreeNodeUpdater : object {
    [NotNullAttribute]
private UnitTestSessionTree myTree;
    [NotNullAttribute]
private ResultStore myResultStore;
    [NotNullAttribute]
private ConditionalWeakTable`2<Node, AggregatedResult> myCachedData;
    [NotNullAttribute]
private ReaderWriterLockSlim myLock;
    [NotNullAttribute]
private ILogger myLogger;
    public UnitTestSessionTreeNodeUpdater(UnitTestSessionTree tree, IPersistentIndexManager persistentIndexManager, IUnitTestResultManager resultManager);
    public sealed virtual IUnitTestSessionTreeNodeData Initialize(Node node);
    public sealed virtual void OnItemAddedToNode(Node node, Int32`1<IUnitTestElement> item);
    public sealed virtual void OnItemRemoveFromNode(Node node, Int32`1<IUnitTestElement> item);
    public sealed virtual void OnItemChangesLeafState(Int32`1<IUnitTestElement> item);
    public sealed virtual void OnItemRemoved(Int32`1<IUnitTestElement> item);
    public sealed virtual void OnTreeCleared();
    public sealed virtual LocalDisposable`1<ReaderWriterLockSlim> ReadLock();
    public sealed virtual LocalDisposable`1<ReaderWriterLockSlim> WriteLock();
    public sealed virtual void OnResultUpdated(IUnitTestElement element);
    private void Add(AggregatedResult aggregatedResult, UnitTestResultPropagationData data, Int32`1<IUnitTestElement> item, bool isLeaf, object _);
    private void Remove(AggregatedResult aggregatedResult, UnitTestResultPropagationData data, Int32`1<IUnitTestElement> item, bool isLeaf, object _);
    private void Replace(AggregatedResult result, UnitTestResultPropagationData data, Int32`1<IUnitTestElement> item, bool isLeaf, UnitTestResultEventArgs args);
    private void Move(AggregatedResult aggregatedResult, Int32`1<IUnitTestElement> item, bool itemBecameLeaf);
    private void SafeUpdate(Node node, Int32`1<IUnitTestElement> item, T arg, Action`5<AggregatedResult, UnitTestResultPropagationData, Int32`1<IUnitTestElement>, bool, T> updater);
    [CompilerGeneratedAttribute]
private AggregatedResult <Initialize>b__6_0(Node n);
}
public abstract class JetBrains.ReSharper.UnitTestFramework.UI.ViewModels.TreeModel.UnitTestTree`1 : TreeModel`1<TNode> {
    [NotNullAttribute]
private IByParentCache myByParentCache;
    [NotNullAttribute]
private Func`1<IUnitTestElementCriterion> myCriterionSource;
    [NotNullAttribute]
private HashSet`1<TNode> myNodesInNeedToRefreshTestCount;
    [NotNullAttribute]
private Disambigue`1<TNode> myDisambigue;
    [NotNullAttribute]
private Dictionary`2<Int32`1<IUnitTestElement>, HashSet`1<TNode>> myNodesHavingItem;
    [NotNullAttribute]
private SuppressableSignal`1<TNode, IUnitTestTreeNode> myNodeAddedSignal;
    [NotNullAttribute]
private SuppressableSignal`1<TNode, IUnitTestTreeNode> myNodeRemovedSignal;
    [NotNullAttribute]
private SuppressableSignal`1<TNode, IUnitTestTreeNode> myNodeChangedSignal;
    [NotNullAttribute]
private SuppressableSignal`1<TNode, IUnitTestTree> myTreeClearedSignal;
    [NotNullAttribute]
protected GroupedChildrenInitializer<TNode> GroupInitializer;
    [NotNullAttribute]
protected FilteredChildrenInitializer2<TNode> FilterInitializer;
    [NotNullAttribute]
protected CustomSortedChildrenInitializer<TNode> SortInitializer;
    public ISignal`1<IUnitTestTreeNode> NodeAdded { get; }
    public ISignal`1<IUnitTestTreeNode> NodeRemoved { get; }
    public ISignal`1<IUnitTestTreeNode> NodeChanged { get; }
    public ISignal`1<IUnitTestTree> TreeCleared { get; }
    public IReadOnlySet`1<Int32`1<IUnitTestElement>> FilteredItems { get; }
    public IUnitTestElementCriterion Criterion { get; }
    public IProperty`1<IUnitTestTreeFilter> Filter { get; }
    public IProperty`1<ITreeModelComparer> Comparer { get; }
    public SecondLevelLock Lock { get; }
    public IBindableSet`1<Int32`1<IUnitTestElement>> Items { get; public set; }
    public IEnumerable`1<IUnitTestTreeGroupProviderMarker> GroupProviders { get; public set; }
    private IUnitTestTreeNode JetBrains.Application.UI.TreeModels.Revised.ITreeModel<JetBrains.ReSharper.UnitTestFramework.UI.ViewModels.TreeModel.IUnitTestTreeNode>.Root { get; }
    protected UnitTestTree`1(Lifetime lifetime, IByParentCache byParentCache, IByShortNameCache byShortNameCache, Func`1<IUnitTestElementCriterion> criterionSource);
    public sealed virtual ISignal`1<IUnitTestTreeNode> get_NodeAdded();
    public sealed virtual ISignal`1<IUnitTestTreeNode> get_NodeRemoved();
    public sealed virtual ISignal`1<IUnitTestTreeNode> get_NodeChanged();
    public sealed virtual ISignal`1<IUnitTestTree> get_TreeCleared();
    public sealed virtual IReadOnlySet`1<Int32`1<IUnitTestElement>> get_FilteredItems();
    public sealed virtual IUnitTestElementCriterion get_Criterion();
    public sealed virtual IProperty`1<IUnitTestTreeFilter> get_Filter();
    public IProperty`1<ITreeModelComparer> get_Comparer();
    public SecondLevelLock get_Lock();
    public sealed virtual IBindableSet`1<Int32`1<IUnitTestElement>> get_Items();
    public void set_Items(IBindableSet`1<Int32`1<IUnitTestElement>> value);
    public sealed virtual IEnumerable`1<IUnitTestTreeGroupProviderMarker> get_GroupProviders();
    public sealed virtual void set_GroupProviders(IEnumerable`1<IUnitTestTreeGroupProviderMarker> value);
    private sealed virtual override IUnitTestTreeNode JetBrains.Application.UI.TreeModels.Revised.ITreeModel<JetBrains.ReSharper.UnitTestFramework.UI.ViewModels.TreeModel.IUnitTestTreeNode>.get_Root();
    private sealed virtual override IEnumerable`1<IUnitTestTreeNode> JetBrains.ReSharper.UnitTestFramework.UI.ViewModels.TreeModel.IUnitTestTree.GetNodes(Int32`1<IUnitTestElement> elementId);
    [NotNullAttribute]
public IReadOnlyCollection`1<TNode> GetNodesHavingItem(Int32`1<IUnitTestElement> elementId);
    private sealed virtual override IEnumerable`1<IUnitTestTreeNode> JetBrains.ReSharper.UnitTestFramework.UI.ViewModels.TreeModel.IUnitTestTree.GetNodesHavingItem(Int32`1<IUnitTestElement> elementId);
    protected virtual void OnNodeAttached(TNode parent, TNode node);
    protected virtual void OnNodeDetached(TNode parent, TNode node);
    protected virtual void OnItemsAdded(IReadOnlyCollection`1<Int32`1<IUnitTestElement>> items);
    protected virtual void OnItemsAdded(IReadOnlyCollection`1<Int32`1<IUnitTestElement>> items, TNode nodeBeingAddedTo);
    protected virtual void OnItemsRemoved(IReadOnlyCollection`1<Int32`1<IUnitTestElement>> items);
    protected virtual void OnItemAdded(Int32`1<IUnitTestElement> item, IEnumerable`1<IGroupProvider<Int32`1<IUnitTestElement>, TNode>> providers, TNode startingNode);
    protected virtual bool AddItemToNode(TNode node, Int32`1<IUnitTestElement> item);
    protected virtual void OnItemAddedToNode(TNode node, Int32`1<IUnitTestElement> item);
    protected virtual bool RemoveItemFromNode(TNode node, Int32`1<IUnitTestElement> item);
    protected virtual void OnItemRemovedFromNode(TNode node, Int32`1<IUnitTestElement> item);
    protected virtual void ClearTree();
    protected virtual void RegroupItem(Int32`1<IUnitTestElement> item);
    protected LocalDisposable`1<UnitTestTree`1<TNode>> PendingTestCountUpdate();
    protected virtual void OnUpdateTestCount();
    protected void UpdateTestCount();
    private LocalDisposable`1<UnitTestTree`1<TNode>> SuppressNodeEvents();
    protected virtual void OnFilterValueChangedCallback();
    protected virtual void OnFilterItemChangedCallback(Int32`1<IUnitTestElement> elementId);
    private IReadOnlyCollection`1<Int32`1<IUnitTestElement>> GetAffectedItems(Int32`1<IUnitTestElement> item);
    [CompilerGeneratedAttribute]
private void <.ctor>b__39_0(UnitTestElementUpdateEvent evt);
    [CompilerGeneratedAttribute]
private void <GetAffectedItems>g__CollectItemsRecursive|61_0(Int32`1<IUnitTestElement> id, HashSet`1<Int32`1<IUnitTestElement>> result);
}
public static class JetBrains.ReSharper.UnitTestFramework.UI.ViewModels.TreeModel.UnitTestTreeComparer : object {
    [NotNullAttribute]
public static ITreeModelComparer NodeComparer;
    [NotNullAttribute]
public static IEqualityComparer`1<object> DataValueComparer;
    private static UnitTestTreeComparer();
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.UnitTestFramework.UI.ViewModels.TreeModel.UnitTestTreeNodesExtensions : object {
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IUnitTestTreeNode EvaluateTo(IUnitTestTree tree, Int32`1<IUnitTestElement> elementId);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IUnitTestTreeNode EvaluateToCommonAncestor(UnitTestTree`1<TNode> tree, IReadOnlyCollection`1<Int32`1<IUnitTestElement>> items);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static TNode EvaluateTo(UnitTestTree`1<TNode> tree, Int32`1<IUnitTestElement> elementId);
    [ExtensionAttribute]
public static bool IsVisible(IUnitTestTreeNode node);
    [ExtensionAttribute]
public static bool IsDataValueOfType(IUnitTestTreeNode node, T& value);
    [ExtensionAttribute]
public static bool IsDataValueOfType(TreeModelNode node, T& value);
}
public class JetBrains.ReSharper.UnitTestFramework.UI.ViewModels.UnitTestBrowserProgressBarViewModel : AAutomation {
    [CompilerGeneratedAttribute]
private IProperty`1<int> <RunningCount>k__BackingField;
    private object myLock;
    [NotNullAttribute]
public IProperty`1<int> RunningCount { get; }
    public UnitTestBrowserProgressBarViewModel(Lifetime& lifetime);
    [CompilerGeneratedAttribute]
public IProperty`1<int> get_RunningCount();
    [CompilerGeneratedAttribute]
private void <.ctor>b__4_0(ProjectExplorationStarted e);
    [CompilerGeneratedAttribute]
private void <.ctor>b__4_1(ProjectExplorationFinished e);
}
public class JetBrains.ReSharper.UnitTestFramework.UI.ViewModels.UnitTestExplorerTreeGroupings : UnitTestTreeGroupings`1<Node> {
    [NotNullAttribute]
[ItemNotNullAttribute]
public static IUnitTestTreeGroupProviderMarker[] GetBrowserProviders(ISolution solution);
}
public class JetBrains.ReSharper.UnitTestFramework.UI.ViewModels.UnitTestGroupingControllerViewModel : AAutomation {
    [NotNullAttribute]
protected IUnitTestTreeViewModel TreeViewModel;
    [NotNullAttribute]
protected Dictionary`2<string, Selection> AllProviders;
    [NotNullAttribute]
private BindableCollection`1<Item> myAllItems;
    [NotNullAttribute]
private BindableCollection`1<Item> mySelectedItems;
    [NotNullAttribute]
private GroupingEvent myUpdateGroupingEvent;
    public BindableCollection`1<Item> AllItems { get; }
    public BindableCollection`1<Item> SelectedItems { get; }
    public UnitTestGroupingControllerViewModel(IUnitTestTreeViewModel treeViewModel, IUnitTestTreeGroupProviderMarker[] providers, UnitTestPredefinedGrouping[] predefinedGroupings);
    public BindableCollection`1<Item> get_AllItems();
    public BindableCollection`1<Item> get_SelectedItems();
    public bool IsUpdating();
    private void UpdateGrouping();
    [CompilerGeneratedAttribute]
private void <.ctor>b__9_2(object _, NotifyCollectionChangedEventArgs _);
    [CompilerGeneratedAttribute]
private Selection <.ctor>b__9_3(IUnitTestTreeGroupProviderMarker x);
}
public class JetBrains.ReSharper.UnitTestFramework.UI.ViewModels.UnitTestingGroupingSelection : object {
    [NotNullAttribute]
public static UnitTestingGroupingSelection Empty;
    [CompilerGeneratedAttribute]
private IUnitTestTreeGroupProviderMarker[] <Providers>k__BackingField;
    [NotNullAttribute]
public IUnitTestTreeGroupProviderMarker[] Providers { get; }
    public UnitTestingGroupingSelection(IUnitTestTreeGroupProviderMarker[] providers);
    private static UnitTestingGroupingSelection();
    [CompilerGeneratedAttribute]
public IUnitTestTreeGroupProviderMarker[] get_Providers();
    public sealed virtual bool Equals(UnitTestingGroupingSelection other);
}
public class JetBrains.ReSharper.UnitTestFramework.UI.ViewModels.UnitTestPredefinedGrouping : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ProviderKeys>k__BackingField;
    [NotNullAttribute]
public string Name { get; }
    [NotNullAttribute]
public String[] ProviderKeys { get; }
    public UnitTestPredefinedGrouping(string name, String[] providerKeys);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public String[] get_ProviderKeys();
    public virtual string ToString();
    [NotNullAttribute]
[ItemNotNullAttribute]
public static UnitTestPredefinedGrouping[] GetPredefinedGroupings();
}
public class JetBrains.ReSharper.UnitTestFramework.UI.ViewModels.UnitTestSessionProgressBarViewModel : AAutomation {
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsIndeterminate>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsRunning>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<int> <TotalCount>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<TestCount> <CompletedCount>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<UnitTestStatus> <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <Message>k__BackingField;
    public IProperty`1<bool> IsIndeterminate { get; }
    public IProperty`1<bool> IsRunning { get; }
    public IProperty`1<int> TotalCount { get; }
    public IProperty`1<TestCount> CompletedCount { get; }
    public IProperty`1<UnitTestStatus> Status { get; }
    public IProperty`1<string> Message { get; }
    public UnitTestSessionProgressBarViewModel(Lifetime lifetime, IUnitTestSession session, IUnitTestResultManager resultManager);
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_IsIndeterminate();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_IsRunning();
    [CompilerGeneratedAttribute]
public IProperty`1<int> get_TotalCount();
    [CompilerGeneratedAttribute]
public IProperty`1<TestCount> get_CompletedCount();
    [CompilerGeneratedAttribute]
public IProperty`1<UnitTestStatus> get_Status();
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_Message();
    private bool CalculateIsIndeterminate(IUnitTestLaunch launch);
}
public class JetBrains.ReSharper.UnitTestFramework.UI.ViewModels.UnitTestSessionProgressOnTaskBar : object {
    public UnitTestSessionProgressOnTaskBar(Lifetime lifetime, UnitTestSessionProgressBarViewModel viewModel, IShellLocks shellLocks, ITaskBarManager taskBarManager);
}
public class JetBrains.ReSharper.UnitTestFramework.UI.ViewModels.UnitTestSessionTreeGroupings : UnitTestTreeGroupings`1<Node> {
    [NotNullAttribute]
[ItemNotNullAttribute]
public static IUnitTestTreeGroupProviderMarker[] GetSessionProviders(ISolution solution, IUnitTestSession session);
}
public abstract class JetBrains.ReSharper.UnitTestFramework.UI.ViewModels.UnitTestTreeGroupings`1 : object {
    [NotNullAttribute]
public static IUnitTestTreeGroupProviderMarker HierarchyProvider(ISolution solution);
}
[SolutionComponentAttribute("4")]
internal class JetBrains.ReSharper.UnitTestFramework.UnitTestingFacade : object {
    [CompilerGeneratedAttribute]
private IShellLocks <Locks>k__BackingField;
    [CompilerGeneratedAttribute]
private ISolution <Solution>k__BackingField;
    [CompilerGeneratedAttribute]
private Task <Initialized>k__BackingField;
    [CompilerGeneratedAttribute]
private IUnitTestElementRepository <ElementRepository>k__BackingField;
    [CompilerGeneratedAttribute]
private IByParentCache <ByParentCache>k__BackingField;
    [CompilerGeneratedAttribute]
private IUnitTestResultManager <ResultManager>k__BackingField;
    [CompilerGeneratedAttribute]
private IUnitTestSessionRepository <SessionRepository>k__BackingField;
    [CompilerGeneratedAttribute]
private IUnitTestSessionManager <SessionManager>k__BackingField;
    [CompilerGeneratedAttribute]
private IUnitTestLaunchManager <LaunchManager>k__BackingField;
    [CompilerGeneratedAttribute]
private IUnitTestingSettings <Settings>k__BackingField;
    [CompilerGeneratedAttribute]
private IUnitTestingTypeCache <TypeCache>k__BackingField;
    [CompilerGeneratedAttribute]
private IUnitTestingProjectCache <ProjectCache>k__BackingField;
    [CompilerGeneratedAttribute]
private IUnitTestingProviderCache <ProviderCache>k__BackingField;
    public IShellLocks Locks { get; }
    public ISolution Solution { get; }
    public Task Initialized { get; }
    public IUnitTestElementRepository ElementRepository { get; }
    public IByParentCache ByParentCache { get; }
    public IUnitTestResultManager ResultManager { get; }
    public IUnitTestSessionRepository SessionRepository { get; }
    public IUnitTestSessionManager SessionManager { get; }
    public IUnitTestLaunchManager LaunchManager { get; }
    public IUnitTestingSettings Settings { get; }
    public IUnitTestingTypeCache TypeCache { get; }
    public IUnitTestingProjectCache ProjectCache { get; }
    public IUnitTestingProviderCache ProviderCache { get; }
    public UnitTestingFacade(IShellLocks locks, ISolution solution, IUnitTestElementRepository elementRepository, IByParentCache byParentCache, IUnitTestResultManager resultManager, IUnitTestSessionRepository sessionRepository, IUnitTestSessionManager sessionManager, IUnitTestLaunchManager launchManager, IUnitTestingSettings settings, IUnitTestingTypeCache typeCache, IUnitTestingProjectCache projectCache, IUnitTestingProviderCache providerCache, IUnitTestingInitializationAwaiter utReadyTask);
    [CompilerGeneratedAttribute]
public sealed virtual IShellLocks get_Locks();
    [CompilerGeneratedAttribute]
public sealed virtual ISolution get_Solution();
    [CompilerGeneratedAttribute]
public sealed virtual Task get_Initialized();
    [CompilerGeneratedAttribute]
public sealed virtual IUnitTestElementRepository get_ElementRepository();
    [CompilerGeneratedAttribute]
public sealed virtual IByParentCache get_ByParentCache();
    [CompilerGeneratedAttribute]
public sealed virtual IUnitTestResultManager get_ResultManager();
    [CompilerGeneratedAttribute]
public sealed virtual IUnitTestSessionRepository get_SessionRepository();
    [CompilerGeneratedAttribute]
public sealed virtual IUnitTestSessionManager get_SessionManager();
    [CompilerGeneratedAttribute]
public sealed virtual IUnitTestLaunchManager get_LaunchManager();
    [CompilerGeneratedAttribute]
public sealed virtual IUnitTestingSettings get_Settings();
    [CompilerGeneratedAttribute]
public sealed virtual IUnitTestingTypeCache get_TypeCache();
    [CompilerGeneratedAttribute]
public sealed virtual IUnitTestingProjectCache get_ProjectCache();
    [CompilerGeneratedAttribute]
public sealed virtual IUnitTestingProviderCache get_ProviderCache();
    public sealed virtual T Get();
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.UnitTestFramework.UnitTestingFacadeFluentExtensions : object {
    [ExtensionAttribute]
public static AppendClause Append(IUnitTestingFacade facade, IUnitTestElementCriterion criterion);
    [ExtensionAttribute]
public static AppendClause Append(IUnitTestingFacade facade, UnitTestElements elements);
    [ExtensionAttribute]
public static RunClause Run(IUnitTestingFacade facade, IUnitTestElementCriterion criterion);
    [ExtensionAttribute]
public static RunClause Run(IUnitTestingFacade facade, UnitTestElements elements);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.UnitTestFramework.UnitTestingLocksExtensions : object {
    [ExtensionAttribute]
[ConditionalAttribute("JET_MODE_ASSERT")]
public static void AssertReadLock(IUnitTestingLocks locks);
    [ExtensionAttribute]
[ConditionalAttribute("JET_MODE_ASSERT")]
public static void AssertUpgradableReadLock(IUnitTestingLocks locks);
    [ExtensionAttribute]
[ConditionalAttribute("JET_MODE_ASSERT")]
public static void AssertWriteLock(IUnitTestingLocks locks);
}
[SolutionSettingsUpgraderAttribute("16")]
public class JetBrains.ReSharper.UnitTestFramework.UnitTestManagerSettingsUpgrader : object {
    private static string ProvidersElement;
    private static string ConfigName;
    private static XmlExternalizationScope ConfigScope;
    private Dictionary`2<string, bool> myProviderDisabledTable;
    private IContextBoundSettingsStore myStore;
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public string CustomStartDirectory { get; public set; }
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public string ExcludedCategoriesList { get; public set; }
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public bool ShadowCopy { get; public set; }
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public bool UseCustomStartDirectory { get; public set; }
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public int ParallelProcessesCount { get; public set; }
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public bool SaveSessionState { get; public set; }
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public bool EnableUnitTesting { get; public set; }
    public bool EnableDebugInternal { get; public set; }
    private sealed virtual override void JetBrains.Application.Configuration.IXmlReadable.ReadFromXml(XmlElement element);
    public void set_CustomStartDirectory(string value);
    public string get_CustomStartDirectory();
    public void set_ExcludedCategoriesList(string value);
    public string get_ExcludedCategoriesList();
    public void set_ShadowCopy(bool value);
    public bool get_ShadowCopy();
    public void set_UseCustomStartDirectory(bool value);
    public bool get_UseCustomStartDirectory();
    public void set_ParallelProcessesCount(int value);
    public int get_ParallelProcessesCount();
    public void set_SaveSessionState(bool value);
    public bool get_SaveSessionState();
    public void set_EnableUnitTesting(bool value);
    public bool get_EnableUnitTesting();
    public void set_EnableDebugInternal(bool value);
    public bool get_EnableDebugInternal();
    private sealed virtual override void JetBrains.ProjectModel.Settings.Upgrade.ISolutionSettingsUpgrader.Upgrade(IComponentSettingsProvider legacySettingsProvider, IContextBoundSettingsStore boundSettingsStore, Lifetime upgradeLifetime);
}
[AttributeUsageAttribute("4")]
public class JetBrains.ReSharper.UnitTestFramework.UnitTestProviderAttribute : ShellComponentAttribute {
    public UnitTestProviderAttribute(Instantiation instantiation);
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.UnitTestFramework.UnitTestProviderManager : object {
    private Lifetime myLifetime;
    private IEnumerable`1<IUnitTestProvider> myFrameworks;
    private IContextBoundSettingsStoreLive mySettingsStore;
    private SettingsIndexedEntry myDisabledFrameworksEntry;
    private ISimpleSignal myFrameworksChangedSignal;
    private ConcurrentDictionary`2<IUnitTestProvider, bool> myIsEnabledCache;
    private ConcurrentDictionary`2<string, IUnitTestProvider> myProvidersCache;
    public ISimpleSignal ProvidersChanged { get; }
    public UnitTestProviderManager(Lifetime lifetime, ISolution solution, IEnumerable`1<IUnitTestProvider> frameworks, ISettingsStore settingsStore);
    public sealed virtual ISimpleSignal get_ProvidersChanged();
    private void OnSettingsChanged(SettingsStoreChangeArgs args);
    public sealed virtual IUnitTestProvider GetById(string id);
    public sealed virtual IUnitTestProvider GetByType(Type type);
    public sealed virtual IEnumerable`1<IUnitTestProvider> GetProviders();
    public sealed virtual IEnumerable`1<IUnitTestProvider> GetEnabledProviders();
    public sealed virtual bool IsProviderEnabled(IUnitTestProvider framework);
    private bool IsProviderEnabledCore(IUnitTestProvider framework);
    public sealed virtual void EnableProvider(IUnitTestProvider framework);
    public sealed virtual void DisableProvider(IUnitTestProvider framework);
    private bool SetIsEnabled(IUnitTestProvider framework, bool value);
    [CompilerGeneratedAttribute]
private IUnitTestProvider <GetById>b__11_0(string providerId);
    [CompilerGeneratedAttribute]
private bool <EnableProvider>b__17_0(IUnitTestProvider f);
    [CompilerGeneratedAttribute]
private bool <EnableProvider>b__17_1(IUnitTestProvider f, bool _);
    [CompilerGeneratedAttribute]
private bool <DisableProvider>b__18_0(IUnitTestProvider f);
    [CompilerGeneratedAttribute]
private bool <DisableProvider>b__18_1(IUnitTestProvider f, bool _);
}
public abstract class JetBrains.ReSharper.UnitTestFramework.UnitTestProviderSettingsUpgraderBase : object {
    private IContextBoundSettingsStore mySettingsStore;
    internal static XmlExternalizationScope Scope;
    protected internal string SectionName { get; }
    public IContextBoundSettingsStore SettingsStore { get; }
    protected internal abstract virtual string get_SectionName();
    public IContextBoundSettingsStore get_SettingsStore();
    private sealed virtual override void JetBrains.Application.Configuration.IXmlReadable.ReadFromXml(XmlElement element);
    public sealed virtual void Upgrade(IComponentSettingsProvider legacySettingsProvider, IContextBoundSettingsStore boundSettingsStore, Lifetime upgradeLifetime);
}
public static class JetBrains.ReSharper.UnitTestFramework.UT : object {
    [CanBeNullAttribute]
private static IEventBus ourEventBus;
    [CanBeNullAttribute]
private static IUnitTestingFacade ourFacade;
    [CanBeNullAttribute]
private static ISolution ourSolution;
    [NotNullAttribute]
public static IUnitTestingLocks Locks;
    private static long ourTicks;
    [NotNullAttribute]
public static IEventBus EventBus { get; }
    [NotNullAttribute]
public static IUnitTestingFacade Facade { get; }
    public static ulong Ticks { get; }
    private static UT();
    public static IEventBus get_EventBus();
    public static void ReplaceEventBus(Lifetime lifetime, IEventBus eventBus);
    public static IUnitTestingFacade get_Facade();
    public static void ReplaceFacade(Lifetime lifetime, IUnitTestingFacade facade);
    [NotNullAttribute]
public static UnitTestElementId CreateId(string testId, string salt);
    [NotNullAttribute]
public static UnitTestElementId CreateId(IPsiModule module, IUnitTestProvider provider, string testId, string salt);
    [NotNullAttribute]
public static UnitTestElementId CreateId(IProject project, TargetFrameworkId targetFrameworkId, IUnitTestProvider provider, string testId, string salt);
    public static SyncCookie ContentLock();
    public static SyncCookie ReadLock(bool upgradable);
    public static SyncCookie WriteLock();
    public static T WithReadLock(Func`1<T> func);
    public static ulong get_Ticks();
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.UnitTestFramework.ZoneMarker : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
