[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.UnitTestProvider.Xunit.Categories.CSharpCategoriesCompletionProvider : XunitCategoriesCompletionProviderBase`1<CSharpCodeCompletionContext> {
    protected virtual IReference GetAttributeTypeReference(ITreeNode treeNode);
    private static IAttribute GetAttribute(ITreeNode treeNode);
    private static IArgument GetArgument(ITreeNode treeNode);
    protected virtual string GetParameterName(ITreeNode treeNode);
    protected virtual IEnumerable`1<IArgument> GetAttributeArguments(ITreeNode treeNode);
    protected virtual string GetConstantValue(IArgument argument);
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.UnitTestProvider.Xunit.Categories.VBCategoriesCompletionProvider : XunitCategoriesCompletionProviderBase`1<VBCodeCompletionContextBase> {
    protected virtual IReference GetAttributeTypeReference(ITreeNode treeNode);
    private static IAttribute GetAttribute(ITreeNode treeNode);
    private static IVBArgument GetArgument(ITreeNode treeNode);
    protected virtual string GetParameterName(ITreeNode treeNode);
    protected virtual IEnumerable`1<IArgument> GetAttributeArguments(ITreeNode treeNode);
    protected virtual string GetConstantValue(IArgument argument);
}
public abstract class JetBrains.ReSharper.UnitTestProvider.Xunit.Categories.XunitCategoriesCompletionProviderBase`1 : ItemsProviderOfSpecificContext`1<T> {
    protected virtual bool IsAvailable(T context);
    private ITypeElement GetAttributeType(T context);
    protected virtual bool AddLookupItems(T context, IItemsCollector collector);
    protected virtual LookupFocusBehaviour GetLookupFocusBehaviour(T context);
    private IEnumerable`1<string> GetCategories(T context, IEnumerable`1<string> categories);
    protected abstract virtual string GetParameterName(ITreeNode treeNode);
    protected abstract virtual IEnumerable`1<IArgument> GetAttributeArguments(ITreeNode treeNode);
    protected abstract virtual string GetConstantValue(IArgument argument);
    private static IEnumerable`1<string> GetTraitNames(IEnumerable`1<string> categories);
    private static IEnumerable`1<string> GetTraitValues(string name, IEnumerable`1<string> categories);
    private static TextLookupRanges EvaluateRanges(T context);
    protected abstract virtual IReference GetAttributeTypeReference(ITreeNode treeNode);
    private static TextLookupRanges CreateRanges(DocumentRange insertRange, DocumentRange replaceRange);
    [CompilerGeneratedAttribute]
private string <GetCategories>b__4_1(IArgument arg);
}
public abstract class JetBrains.ReSharper.UnitTestProvider.Xunit.DotNetCore.Proprietary.Mappings.XUnitElementMapping`2 : object {
    [NotNullAttribute]
protected XunitServiceProvider myServiceProvider;
    protected XUnitElementMapping`2(XunitServiceProvider serviceProvider);
    public abstract virtual TTask ToRemoteTask(TElement element, ITestRunnerExecutionContext ctx);
    public abstract virtual TElement ToElement(TTask task, ITestRunnerDiscoveryContext ctx, IUnitTestElementObserver observer);
    [NotNullAttribute]
protected UnitTestElementFactory GetFactory(ITestRunnerDiscoveryContext ctx);
    private sealed virtual override RemoteTask JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.IUnitTestElementToRemoteTaskMapping<TElement>.GetRemoteTask(TElement element, ITestRunnerExecutionContext ctx);
    private sealed virtual override IUnitTestElement JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.IRemoteTaskToUnitTestElementMapping<TTask>.GetElement(TTask task, ITestRunnerDiscoveryContext ctx, IUnitTestElementObserver observer);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.UnitTestProvider.Xunit.DotNetCore.Proprietary.Mappings.XUnitElementMappingKeys : object {
    [NotNullAttribute]
public static Key`1<UnitTestElementFactory> ElementFactoryKey;
    private static XUnitElementMappingKeys();
    [ExtensionAttribute]
[CanBeNullAttribute]
public static OneToSetMap`2<string, string> ToOneToSetMap(TraitsCollection traits);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.UnitTestProvider.Xunit.DotNetCore.Proprietary.Mappings.XUnitTestClassMapping : XUnitElementMapping`2<XunitTestClassElement, XUnitTestClassTask> {
    public XUnitTestClassMapping(XunitServiceProvider serviceProvider);
    public virtual XUnitTestClassTask ToRemoteTask(XunitTestClassElement element, ITestRunnerExecutionContext ctx);
    public virtual XunitTestClassElement ToElement(XUnitTestClassTask task, ITestRunnerDiscoveryContext ctx, IUnitTestElementObserver observer);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.UnitTestProvider.Xunit.DotNetCore.Proprietary.Mappings.XUnitTestMethodMapping : XUnitElementMapping`2<XunitTestMethodElement, XUnitTestMethodTask> {
    public XUnitTestMethodMapping(XunitServiceProvider serviceProvider);
    public virtual XUnitTestMethodTask ToRemoteTask(XunitTestMethodElement element, ITestRunnerExecutionContext ctx);
    public virtual XunitTestMethodElement ToElement(XUnitTestMethodTask task, ITestRunnerDiscoveryContext ctx, IUnitTestElementObserver observer);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.UnitTestProvider.Xunit.DotNetCore.Proprietary.Mappings.XUnitTestTheoryMapping : XUnitElementMapping`2<XunitTestTheoryElement, XUnitTestTheoryTask> {
    public XUnitTestTheoryMapping(XunitServiceProvider serviceProvider);
    public virtual XUnitTestTheoryTask ToRemoteTask(XunitTestTheoryElement element, ITestRunnerExecutionContext ctx);
    public virtual XunitTestTheoryElement ToElement(XUnitTestTheoryTask task, ITestRunnerDiscoveryContext ctx, IUnitTestElementObserver observer);
}
[OptionsPageAttribute("xUnit", "xUnit.net", "JetBrains.ReSharper.UnitTestProvider.Xunit.Resources.UnitTestingXunitThemedIcons/Xunit")]
public class JetBrains.ReSharper.UnitTestProvider.Xunit.Options.XunitPage : CustomSimpleOptionsPage {
    public XunitPage(Lifetime lifetime, OptionsSettingsSmartContext optionsSettingsSmartContext, XunitTestProvider provider, ICommonFileDialogs commonFileDialogs, ProductConfigurations productConfigurations);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_4(PropertyChangedEventArgs`1<FileSystemPath> args);
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public static class JetBrains.ReSharper.UnitTestProvider.Xunit.Resources.Strings : object {
    private static ILogger ourLog;
    private static Lazy`1<JetResourceManager> ourResourceManager;
    [EditorBrowsableAttribute("2")]
public static JetResourceManager ResourceManager { get; }
    public static string AutoDetectSettingDescription { get; }
    public static string DiscoveryMethodForDiscoveryTestsFromArtifactsSettingDescription { get; }
    public static string PathToXUnitNetConfigurationSettingDescription { get; }
    public static string SettingsForXUnitUnitTestProviderSettingDescription { get; }
    public static string XUnitNetOptionPageTitle { get; }
    public static string _Enable_Support_BoolOption_Text { get; }
    public static string TestDiscovery_Header_Text { get; }
    public static string XUnitNetConfigFile_Header_Text { get; }
    public static string AutomaticallyLooksForAndLoadsConfig_Text_Text { get; }
    public static string AssemblynameXunitRunnerJson_Text_Text { get; }
    public static string XunitRunnerJson_Text_Text { get; }
    public static string AssemblynameXml_Text_Text { get; }
    public static string UseSpecificConfigurationFile_BoolOption_Text { get; }
    public static string PathToXUnitNetConfigFile_FileChooserOption_ToolTip { get; }
    private static Strings();
    public static JetResourceManager get_ResourceManager();
    public static string Choice(string format, Object[] args);
    public static string get_AutoDetectSettingDescription();
    public static string get_DiscoveryMethodForDiscoveryTestsFromArtifactsSettingDescription();
    public static string get_PathToXUnitNetConfigurationSettingDescription();
    public static string get_SettingsForXUnitUnitTestProviderSettingDescription();
    public static string get_XUnitNetOptionPageTitle();
    public static string get__Enable_Support_BoolOption_Text();
    public static string get_TestDiscovery_Header_Text();
    public static string get_XUnitNetConfigFile_Header_Text();
    public static string get_AutomaticallyLooksForAndLoadsConfig_Text_Text();
    public static string get_AssemblynameXunitRunnerJson_Text_Text();
    public static string get_XunitRunnerJson_Text_Text();
    public static string get_AssemblynameXml_Text_Text();
    public static string get_UseSpecificConfigurationFile_BoolOption_Text();
    public static string get_PathToXUnitNetConfigFile_FileChooserOption_ToolTip();
}
public class JetBrains.ReSharper.UnitTestProvider.Xunit.Resources.UnitTestingXunitThemedIcons : object {
}
[UnitTestElementsTransformationRuleAttribute("16")]
public class JetBrains.ReSharper.UnitTestProvider.Xunit.Rules.EnsureAncestorsAddedToExecutedElementsRule : object {
    public sealed virtual IUnitTestElementCriterion Apply(IUnitTestElementCriterion criterion, IUnitTestSession session, IHostProvider hostProvider);
    public sealed virtual void Apply(ISet`1<IUnitTestElement> elements, IUnitTestSession session, IHostProvider hostProvider);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.UnitTestProvider.Xunit.TestLinker.Templates.CSharp.CSharpXUnitFileTemplateContributor : object {
    private string JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Templates.IContributeTestFileTemplate.TemplateResourceName { get; }
    private string JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Templates.IContributeTestLiveTemplate.TemplateResourceName { get; }
    private sealed virtual override string JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Templates.IContributeTestFileTemplate.get_TemplateResourceName();
    private sealed virtual override string JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Templates.IContributeTestLiveTemplate.get_TemplateResourceName();
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.UnitTestProvider.Xunit.TestLinker.Templates.CSharp.ZoneMarker : object {
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.UnitTestProvider.Xunit.TestLinker.Templates.VB.VbXUnitFileTemplateContributor : object {
    private string JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Templates.IContributeTestFileTemplate.TemplateResourceName { get; }
    private string JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Templates.IContributeTestLiveTemplate.TemplateResourceName { get; }
    private sealed virtual override string JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Templates.IContributeTestFileTemplate.get_TemplateResourceName();
    private sealed virtual override string JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Templates.IContributeTestLiveTemplate.get_TemplateResourceName();
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.UnitTestProvider.Xunit.TestLinker.Templates.VB.ZoneMarker : object {
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.UnitTestProvider.Xunit.TestLinker.XUnit1FrameworkAssemblyReferenceDescriptor : AssemblyReferenceDescriptor {
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.UnitTestProvider.Xunit.TestLinker.XUnit2FrameworkAssemblyReferenceDescriptor : AggregateDescriptor {
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.UnitTestProvider.Xunit.TestLinker.XUnit3FrameworkNuGetReferenceDescriptor : AggregateDescriptor {
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.UnitTestProvider.Xunit.TestLinker.XUnitFrameworkNuGetReferenceDescriptor : AggregateDescriptor {
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.UnitTestProvider.Xunit.TestLinker.XUnitTestProjectScopeDescriptor : object {
    [CompilerGeneratedAttribute]
private IUnitTestProvider <Provider>k__BackingField;
    public IUnitTestProvider Provider { get; }
    public XUnitTestProjectScopeDescriptor(XunitTestProvider provider);
    [CompilerGeneratedAttribute]
public sealed virtual IUnitTestProvider get_Provider();
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.UnitTestProvider.Xunit.TestLinker.ZoneMarker : object {
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.UnitTestProvider.Xunit.TraitsUtility : object {
    [ExtensionAttribute]
public static OneToSetMap`2<string, string> GetTraits(ITypeInfo typeInfo);
    [ExtensionAttribute]
public static OneToSetMap`2<string, string> GetTraits(IMethodInfo methodInfo);
    private static OneToSetMap`2<string, string> GetTraitsFromAttributes(IEnumerable`1<IAttributeInfo> attributes);
}
public class JetBrains.ReSharper.UnitTestProvider.Xunit.UnitTestElementFactory : object {
    [NotNullAttribute]
private JetHashSet`1<IUnitTestElement> myElements;
    public XunitInheritedTestMethodContainerElement GetOrCreateInheritedTestMethodContainer(IClrTypeName typeName, string methodName);
    private IJetSet`1<UnitTestElementCategory> GetCategories(OneToSetMap`2<string, string> traits);
    public XunitTestClassElement GetOrCreateTestClass(IClrTypeName typeName, XunitTestClassElement parent, OneToSetMap`2<string, string> traits);
    [NotNullAttribute]
public XunitTestMethodElement GetOrCreateTestMethod(XunitTestClassElement testClassElement, string methodName, string displayName, string declaredInTypeShortName, OneToSetMap`2<string, string> traits);
    public XunitTestTheoryElement GetOrCreateTestTheory(XunitTestMethodElement methodElement, string displayName, OneToSetMap`2<string, string> traits);
}
public interface JetBrains.ReSharper.UnitTestProvider.Xunit.UnitTestElements.IXUnitTestElement {
}
public class JetBrains.ReSharper.UnitTestProvider.Xunit.UnitTestElements.XunitInheritedTestMethodContainerElement : FakeUnitTestElement {
    [CompilerGeneratedAttribute]
private IClrTypeName <TypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MethodName>k__BackingField;
    [NotNullAttribute]
public IClrTypeName TypeName { get; }
    [NotNullAttribute]
public string MethodName { get; }
    public XunitInheritedTestMethodContainerElement(IClrTypeName typeName, string methodName);
    [CompilerGeneratedAttribute]
public IClrTypeName get_TypeName();
    [CompilerGeneratedAttribute]
public string get_MethodName();
    public virtual IReadOnlyCollection`1<IUnitTestElement> GetRelatedUnitTestElements();
    private ITypeElement GetDeclaredType();
}
public class JetBrains.ReSharper.UnitTestProvider.Xunit.UnitTestElements.XunitTestClassElement : FromClass {
    private string myShortName;
    public string Kind { get; }
    public string ShortName { get; }
    public XunitTestClassElement(IClrTypeName typeName);
    public virtual string get_Kind();
    public virtual string get_ShortName();
    private static string FormatTypeName(TypeNameAndTypeParameterNumber typeName);
}
public class JetBrains.ReSharper.UnitTestProvider.Xunit.UnitTestElements.XunitTestMethodElement : FromMethod`1<XunitTestClassElement> {
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [PersistAttribute]
public string DisplayName { get; protected set; }
    public string ShortName { get; }
    public string Kind { get; }
    public XunitTestMethodElement(XunitTestClassElement parent, string methodName, string displayName, string declaredInTypeShortName);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
protected void set_DisplayName(string value);
    public virtual string get_ShortName();
    public virtual string get_Kind();
}
public class JetBrains.ReSharper.UnitTestProvider.Xunit.UnitTestElements.XunitTestTheoryElement : Row {
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [PersistAttribute]
[NotNullAttribute]
public string DisplayName { get; protected set; }
    public bool IsNotRunnableStandalone { get; }
    public string ShortName { get; }
    public string Kind { get; }
    public XunitTestTheoryElement(string testId, XunitTestMethodElement parent, string displayName);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
protected void set_DisplayName(string value);
    public sealed virtual bool get_IsNotRunnableStandalone();
    public virtual string get_ShortName();
    public virtual string get_Kind();
}
[ExtensionAttribute]
internal static class JetBrains.ReSharper.UnitTestProvider.Xunit.UnitTestIdentifier : object {
    [ExtensionAttribute]
public static bool IsAnyUnitTestElement(IDeclaredElement element);
    [ExtensionAttribute]
public static bool IsUnitTest(IDeclaredElement element);
    [ExtensionAttribute]
public static bool IsUnitTestContainer(IDeclaredElement element);
    private static bool IsUnitTestMethod(IMethod testMethod);
    private static bool IsUnitTestClass(IClass class);
    private static bool IsExportedType(IAccessRightsOwner class);
    private static bool IsUnitTestClassMember(ITypeMember member);
    private static bool HasNestedUnitTestClass(IClass class);
}
public static class JetBrains.ReSharper.UnitTestProvider.Xunit.XUnitAttributeNameProvider : object {
    public static IClrTypeName InlineDataAttribute;
    public static IClrTypeName AutoFixtureAutoDataAttribute;
    public static IClrTypeName AutoFixtureInlineAutoDataAttribute;
    private static XUnitAttributeNameProvider();
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.UnitTestProvider.Xunit.XUnitConfigurationSource : object {
    [NotNullAttribute]
private Lifetime myLifetime;
    [NotNullAttribute]
private ISolution mySolution;
    [NotNullAttribute]
private ISettingsStore mySettingsStore;
    [NotNullAttribute]
private XunitTestProvider myProvider;
    [NotNullAttribute]
private IUnitTestProjectArtifactResolver myArtifactResolver;
    [NotNullAttribute]
private Lazy`1<IUnitTestArtifactExplorationCache> myExplorationCache;
    [NotNullAttribute]
private Lazy`1<CachingUnitTestArtifactExplorationRunner> myExplorationRunner;
    [NotNullAttribute]
private IFileSystemTracker myFileSystemTracker;
    [NotNullAttribute]
private ChangeManager myChangeManager;
    [NotNullAttribute]
private ILogger myLogger;
    [NotNullAttribute]
private ConcurrentDictionary`2<Target, TestAssemblyConfiguration> myCachedConfig;
    [NotNullAttribute]
private SettingsScalarEntry myAutoDetectConfigSetting;
    [NotNullAttribute]
private SettingsScalarEntry myXUnitConfigPathSetting;
    public XUnitConfigurationSource(Lifetime lifetime, ISolution solution, ISettingsStore settingsStore, XunitTestProvider provider, IUnitTestProjectArtifactResolver artifactResolver, IFileSystemTracker fileSystemTracker, ChangeManager changeManager, ILogger logger);
    public TestAssemblyConfiguration GetConfiguration(IProject project, TargetFrameworkId targetFrameworkId);
    private TestAssemblyConfiguration ReadConfiguration(Target target);
    private void SubscribeToChanges(LifetimeDefinition ltd, IContextBoundSettingsStoreLive store, Target target, FileSystemPath[] filesToWatch);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.UnitTestProvider.Xunit.XUnitConfigurationSource/<GetFilesToWatch>d__17")]
private IEnumerable`1<FileSystemPath> GetFilesToWatch(IContextBoundSettingsStore store, IProject project, TargetFrameworkId targetFrameworkId);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.UnitTestProvider.Xunit.XUnitConfigurationSource/<GetAllPossiblePredefinedFiles>d__18")]
private IEnumerable`1<FileSystemPath> GetAllPossiblePredefinedFiles(IProject project, TargetFrameworkId targetFrameworkId);
}
internal class JetBrains.ReSharper.UnitTestProvider.Xunit.XUnitDisplayNameFormatter : object {
    [NotNullAttribute]
private CharacterRule myRule;
    public XUnitDisplayNameFormatter(TestMethodDisplayOptions displayOptions);
    public string Format(string displayName);
}
[SettingsKeyAttribute("JetBrains.ReSharper.UnitTestFramework.Settings.UnitTestingSettings", "JetBrains.ReSharper.UnitTestProvider.Xunit.Resources.Strings", "SettingsForXUnitUnitTestProviderSettingDescription")]
public class JetBrains.ReSharper.UnitTestProvider.Xunit.XunitProviderSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.UnitTestProvider.Xunit.Resources.Strings", "PathToXUnitNetConfigurationSettingDescription")]
public string XunitConfigPath;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.UnitTestProvider.Xunit.Resources.Strings", "AutoDetectSettingDescription")]
public bool AutoDetectConfig;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.UnitTestProvider.Xunit.Resources.Strings", "DiscoveryMethodForDiscoveryTestsFromArtifactsSettingDescription")]
public DiscoveryMethod TestDiscoveryFromArtifactsMethod;
}
internal class JetBrains.ReSharper.UnitTestProvider.Xunit.XunitPsiFileExplorer : UnitTestElementRecursivePsiProcessor {
    private Dictionary`2<ITypeElement, IUnitTestElement> myElementByTypeElement;
    private IUnitTestElementObserverOnFile myObserver;
    private UnitTestElementFactory myFactory;
    private XUnitDisplayNameFormatter myDisplayNameFormatter;
    private IPsiSourceFile mySourceFile;
    public XunitPsiFileExplorer(XUnitConfigurationSource configurationSource, IUnitTestElementObserverOnFile observer, IFile file, Func`1<bool> interrupted);
    public virtual bool InteriorShouldBeProcessed(ITreeNode element);
    public virtual void ProcessBeforeInterior(ITreeNode element);
    private XunitTestClassElement GetOrCreateTestClass(ITypeElement typeElement);
    private bool IsValidTestClass(IClass testClass);
    private IUnitTestElement ProcessTestClass(ITypeElement typeElement);
    private XunitTestClassElement GetOrCreateOuterClass(ITypeElement typeElement);
    [CanBeNullAttribute]
private IUnitTestElement CreateAbstractTestClass(IClass testClass);
    private void AppendTests(XunitTestClassElement classElement, ITypeInfo typeInfo, ITypeElement typeElement);
    private static bool IsAbstractClass(IClass testClass);
    private IUnitTestLikeElement ProcessTestMethod(IMethod method);
    [NotNullAttribute]
private IUnitTestLikeElement CreateTestMethodIn(XunitTestClassElement parent, IMethod method, IMethodInfo methodInfo);
}
public class JetBrains.ReSharper.UnitTestProvider.Xunit.XunitSdkAdapters.MetadataAssemblyInfoAdapter : object {
    private IMetadataAssembly myAssembly;
    public string AssemblyPath { get; }
    public string Name { get; }
    public MetadataAssemblyInfoAdapter(IMetadataAssembly assembly);
    public sealed virtual IEnumerable`1<IAttributeInfo> GetCustomAttributes(string assemblyQualifiedAttributeTypeName);
    public sealed virtual ITypeInfo GetType(string typeName);
    public sealed virtual IEnumerable`1<ITypeInfo> GetTypes(bool includePrivateTypes);
    public sealed virtual string get_AssemblyPath();
    public sealed virtual string get_Name();
}
internal class JetBrains.ReSharper.UnitTestProvider.Xunit.XunitSdkAdapters.MetadataAttributeInfoAdapter : object {
    private IMetadataCustomAttribute myAttribute;
    public MetadataAttributeInfoAdapter(IMetadataCustomAttribute attribute);
    public sealed virtual T GetInstance();
    public sealed virtual TValue GetPropertyValue(string propertyName);
}
public class JetBrains.ReSharper.UnitTestProvider.Xunit.XunitSdkAdapters.MetadataAttributeInfoAdapter2 : object {
    private IMetadataCustomAttribute myAttribute;
    public MetadataAttributeInfoAdapter2(IMetadataCustomAttribute attribute);
    public sealed virtual IEnumerable`1<object> GetConstructorArguments();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.UnitTestProvider.Xunit.XunitSdkAdapters.MetadataAttributeInfoAdapter2/<GetCustomAttributes>d__3")]
public sealed virtual IEnumerable`1<IAttributeInfo> GetCustomAttributes(string assemblyQualifiedAttributeTypeName);
    public sealed virtual TValue GetNamedArgument(string argumentName);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.UnitTestProvider.Xunit.XunitSdkAdapters.MetadataExtensions : object {
    [ExtensionAttribute]
public static ITypeInfo AsTypeInfo(IMetadataTypeInfo type, IProject project, TargetFrameworkId targetFrameworkId, XunitTestAttributeCache unitTestAttributeCache);
    [ExtensionAttribute]
public static IMethodInfo AsMethodInfo(IMetadataMethod method, IProject project, TargetFrameworkId targetFrameworkId, XunitTestAttributeCache unitTestAttributeCache);
    [ExtensionAttribute]
public static IAttributeInfo AsAttributeInfo(IMetadataCustomAttribute attribute);
}
internal class JetBrains.ReSharper.UnitTestProvider.Xunit.XunitSdkAdapters.MetadataMethodInfoAdapter : object {
    private IProject myProject;
    private TargetFrameworkId myTargetFrameworkId;
    private IMetadataMethod myMethod;
    private XunitTestAttributeCache myUnitTestAttributeCache;
    public string TypeName { get; }
    public ITypeInfo Class { get; }
    public bool IsAbstract { get; }
    public bool IsStatic { get; }
    public MethodInfo MethodInfo { get; }
    public string Name { get; }
    public string ReturnType { get; }
    public MetadataMethodInfoAdapter(IMetadataMethod method, IProject project, TargetFrameworkId targetFrameworkId, XunitTestAttributeCache unitTestAttributeCache);
    public sealed virtual string get_TypeName();
    public sealed virtual void Invoke(object testClass, Object[] parameters);
    public sealed virtual ITypeInfo get_Class();
    public sealed virtual bool get_IsAbstract();
    public sealed virtual bool get_IsStatic();
    public sealed virtual MethodInfo get_MethodInfo();
    public sealed virtual string get_Name();
    public sealed virtual string get_ReturnType();
    public sealed virtual object CreateInstance();
    public sealed virtual IEnumerable`1<IAttributeInfo> GetCustomAttributes(Type attributeType);
    private IMetadataMethod FindOverridenMethod(IMetadataMethod method);
    public sealed virtual bool HasAttribute(Type attributeType);
    public virtual string ToString();
}
public class JetBrains.ReSharper.UnitTestProvider.Xunit.XunitSdkAdapters.MetadataMethodInfoAdapter2 : object {
    private IMetadataMethod myMethod;
    private ITypeInfo[] mySubstitutions;
    private MetadataTypeInfoAdapter2 myTypeInfo;
    public bool IsAbstract { get; }
    public bool IsGenericMethodDefinition { get; }
    public bool IsPublic { get; }
    public bool IsStatic { get; }
    public string Name { get; }
    public ITypeInfo ReturnType { get; }
    public ITypeInfo Type { get; }
    public MetadataMethodInfoAdapter2(MetadataTypeInfoAdapter2 typeInfo, IMetadataMethod method);
    private MetadataMethodInfoAdapter2(MetadataTypeInfoAdapter2 typeInfo, IMetadataMethod method, ITypeInfo[] substitutions);
    public sealed virtual IEnumerable`1<IAttributeInfo> GetCustomAttributes(string assemblyQualifiedAttributeTypeName);
    public sealed virtual IEnumerable`1<ITypeInfo> GetGenericArguments();
    public sealed virtual IEnumerable`1<IParameterInfo> GetParameters();
    public sealed virtual IMethodInfo MakeGenericMethod(ITypeInfo[] typeArguments);
    public sealed virtual bool get_IsAbstract();
    public sealed virtual bool get_IsGenericMethodDefinition();
    public sealed virtual bool get_IsPublic();
    public sealed virtual bool get_IsStatic();
    public sealed virtual string get_Name();
    public sealed virtual ITypeInfo get_ReturnType();
    public sealed virtual ITypeInfo get_Type();
    [CompilerGeneratedAttribute]
private ITypeInfo <GetGenericArguments>b__6_0(IMetadataTypeParameter a);
    [CompilerGeneratedAttribute]
private IParameterInfo <GetParameters>b__7_0(IMetadataParameter p);
}
public class JetBrains.ReSharper.UnitTestProvider.Xunit.XunitSdkAdapters.MetadataParameterInfoAdapter : object {
    private MetadataMethodInfoAdapter2 myMethodInfo;
    private IMetadataParameter myParameter;
    private MetadataTypeInfoAdapter2 myTypeInfo;
    public string Name { get; }
    public ITypeInfo ParameterType { get; }
    public MetadataParameterInfoAdapter(MetadataTypeInfoAdapter2 typeInfo, MetadataMethodInfoAdapter2 methodInfo, IMetadataParameter parameter);
    public sealed virtual string get_Name();
    public sealed virtual ITypeInfo get_ParameterType();
}
internal class JetBrains.ReSharper.UnitTestProvider.Xunit.XunitSdkAdapters.MetadataTypeInfoAdapter : object {
    private IMetadataTypeInfo myMetadataTypeInfo;
    private IProject myProject;
    private TargetFrameworkId myTargetFrameworkId;
    private XunitTestAttributeCache myAttributeCache;
    public bool IsAbstract { get; }
    public bool IsSealed { get; }
    public Type Type { get; }
    public MetadataTypeInfoAdapter(IMetadataTypeInfo metadataTypeInfo, IProject project, TargetFrameworkId targetFrameworkId, XunitTestAttributeCache attributeCache);
    public sealed virtual bool get_IsAbstract();
    public sealed virtual bool get_IsSealed();
    public sealed virtual Type get_Type();
    public sealed virtual IEnumerable`1<IAttributeInfo> GetCustomAttributes(Type attributeType);
    public sealed virtual IMethodInfo GetMethod(string methodName);
    public sealed virtual IEnumerable`1<IMethodInfo> GetMethods();
    public sealed virtual bool HasAttribute(Type attributeType);
    public sealed virtual bool HasInterface(Type attributeType);
    public virtual string ToString();
}
public class JetBrains.ReSharper.UnitTestProvider.Xunit.XunitSdkAdapters.MetadataTypeInfoAdapter2 : object {
    private IMetadataTypeParameter myTypeParameter;
    [CanBeNullAttribute]
private IMetadataClassType myMetadataType;
    private IMetadataTypeInfo myMetadataTypeInfo;
    public IAssemblyInfo Assembly { get; }
    public ITypeInfo BaseType { get; }
    public IEnumerable`1<ITypeInfo> Interfaces { get; }
    public bool IsAbstract { get; }
    public bool IsGenericParameter { get; }
    public bool IsGenericType { get; }
    public bool IsSealed { get; }
    public bool IsValueType { get; }
    public string Name { get; }
    public MetadataTypeInfoAdapter2(IMetadataTypeInfo metadataTypeInfo);
    public MetadataTypeInfoAdapter2(IMetadataClassType metadataType);
    public MetadataTypeInfoAdapter2(IMetadataClassType metadataType, IMetadataTypeParameter typeParameter);
    private MetadataTypeInfoAdapter2(IMetadataClassType metadataType, IMetadataTypeInfo metadataTypeInfo);
    public sealed virtual IEnumerable`1<IAttributeInfo> GetCustomAttributes(string assemblyQualifiedAttributeTypeName);
    public sealed virtual IEnumerable`1<ITypeInfo> GetGenericArguments();
    public sealed virtual IMethodInfo GetMethod(string methodName, bool includePrivateMethod);
    public sealed virtual IEnumerable`1<IMethodInfo> GetMethods(bool includePrivateMethods);
    public sealed virtual IAssemblyInfo get_Assembly();
    public sealed virtual ITypeInfo get_BaseType();
    public sealed virtual IEnumerable`1<ITypeInfo> get_Interfaces();
    public sealed virtual bool get_IsAbstract();
    public sealed virtual bool get_IsGenericParameter();
    public sealed virtual bool get_IsGenericType();
    public sealed virtual bool get_IsSealed();
    public sealed virtual bool get_IsValueType();
    public sealed virtual string get_Name();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.UnitTestProvider.Xunit.XunitSdkAdapters.MetadataTypeInfoAdapter2/<GetAllMethods>d__29")]
private IEnumerable`1<IMetadataMethod> GetAllMethods();
    [IteratorStateMachineAttribute("JetBrains.ReSharper.UnitTestProvider.Xunit.XunitSdkAdapters.MetadataTypeInfoAdapter2/<GetAllAttributes>d__30")]
private IEnumerable`1<IMetadataCustomAttribute> GetAllAttributes(string fullName);
    [CompilerGeneratedAttribute]
private ITypeInfo <GetGenericArguments>b__8_2(IMetadataTypeParameter t);
}
public static class JetBrains.ReSharper.UnitTestProvider.Xunit.XunitSdkAdapters.MetadataTypeSystem : object {
    public static ITypeInfo GetType(IMetadataType type, MetadataTypeInfoAdapter2 typeInfo, MetadataMethodInfoAdapter2 methodInfo);
    private static ITypeInfo GetTypeFromTypeParameterReferenceType(IMetadataTypeParameterReferenceType typeParameterReferenceType, ITypeInfo typeInfo, IMethodInfo methodInfo);
}
internal class JetBrains.ReSharper.UnitTestProvider.Xunit.XunitSdkAdapters.PsiAttributeInfoAdapter : object {
    private IAttributeInstance myAttribute;
    public PsiAttributeInfoAdapter(IAttributeInstance attribute);
    public sealed virtual T GetInstance();
    public sealed virtual TValue GetPropertyValue(string propertyName);
    private AttributeValue GetAttributeValueFromParameters(string propertyName);
    private AttributeValue GetAttributeValueFromBaseInitialiser(string propertyName);
    private AttributeValue GetAttributeValueFromCSharpInitiailiser(IConstructorDeclaration declaration, string propertyName);
    private static bool ArgumentNameMatches(ICSharpArgumentInfo argument, string propertyName);
    private static bool ParameterNameMatches(ICSharpArgument argument, string propertyName);
    private AttributeValue GetAttributeValueFromVBInitiailiser(IConstructorDeclaration declaration, string propertyName);
    private static bool ArgumentNameMatches(IVBArgumentInfo argument, string propertyName);
    private static bool ParameterNameMatches(IArgumentInfo argument, string propertyName);
}
[ExtensionAttribute]
internal static class JetBrains.ReSharper.UnitTestProvider.Xunit.XunitSdkAdapters.PsiExtensions : object {
    [ExtensionAttribute]
internal static ITypeInfo AsTypeInfo(IClass type);
    [ExtensionAttribute]
public static IMethodInfo AsMethodInfo(IMethod method, ITypeInfo typeInfo);
    [ExtensionAttribute]
internal static IAttributeInfo AsAttributeInfo(IAttributeInstance attribute);
    [ExtensionAttribute]
internal static bool IsAssignableFrom(Type type, ITypeElement c);
    [ExtensionAttribute]
internal static bool IsAssignableFrom(Type type, IDeclaredType c);
}
internal class JetBrains.ReSharper.UnitTestProvider.Xunit.XunitSdkAdapters.PsiMethodInfoAdapter : object {
    private IMethod myMethod;
    [CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private ITypeInfo <Class>k__BackingField;
    public string TypeName { get; private set; }
    public ITypeInfo Class { get; private set; }
    public bool IsAbstract { get; }
    public bool IsStatic { get; }
    public MethodInfo MethodInfo { get; }
    public string Name { get; }
    public string ReturnType { get; }
    public PsiMethodInfoAdapter(IMethod method, ITypeInfo typeInfo);
    [CompilerGeneratedAttribute]
public sealed virtual string get_TypeName();
    [CompilerGeneratedAttribute]
private void set_TypeName(string value);
    public sealed virtual void Invoke(object testClass, Object[] parameters);
    [CompilerGeneratedAttribute]
public sealed virtual ITypeInfo get_Class();
    [CompilerGeneratedAttribute]
private void set_Class(ITypeInfo value);
    public sealed virtual bool get_IsAbstract();
    public sealed virtual bool get_IsStatic();
    public sealed virtual MethodInfo get_MethodInfo();
    public sealed virtual string get_Name();
    public sealed virtual string get_ReturnType();
    public sealed virtual object CreateInstance();
    public sealed virtual IEnumerable`1<IAttributeInfo> GetCustomAttributes(Type attributeType);
    public sealed virtual bool HasAttribute(Type attributeType);
    public void Reset(IMethod method, ITypeInfo typeInfo);
    public virtual string ToString();
}
internal class JetBrains.ReSharper.UnitTestProvider.Xunit.XunitSdkAdapters.PsiTypeInfoAdapter : object {
    private IClass myPsiType;
    public bool IsAbstract { get; }
    public bool IsSealed { get; }
    public Type Type { get; }
    public PsiTypeInfoAdapter(IClass psiType);
    public sealed virtual bool get_IsAbstract();
    public sealed virtual bool get_IsSealed();
    public sealed virtual Type get_Type();
    public sealed virtual IEnumerable`1<IAttributeInfo> GetCustomAttributes(Type attributeType);
    public sealed virtual IMethodInfo GetMethod(string methodName);
    public sealed virtual IEnumerable`1<IMethodInfo> GetMethods();
    public sealed virtual bool HasAttribute(Type attributeType);
    public sealed virtual bool HasInterface(Type interfaceType);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private IMethodInfo <GetMethods>b__10_2(<>f__AnonymousType8`2<TypeMemberInstance, IMethod> <>h__TransparentIdentifier0);
    [CompilerGeneratedAttribute]
private IMethodInfo <GetMethods>b__10_4(IMethod method);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.UnitTestProvider.Xunit.XunitServiceProvider : object {
    private Lazy`1<XUnitTestRunnerRunStrategy> myUniversalRunner;
    [CompilerGeneratedAttribute]
private XunitTestProvider <Provider>k__BackingField;
    [CompilerGeneratedAttribute]
private IPsiModules <PsiModules>k__BackingField;
    [CompilerGeneratedAttribute]
private ISymbolCache <SymbolCache>k__BackingField;
    [CompilerGeneratedAttribute]
private ResolveContextManager <ResolveContextManager>k__BackingField;
    public XunitTestProvider Provider { get; }
    public IPsiModules PsiModules { get; }
    public ISymbolCache SymbolCache { get; }
    public ResolveContextManager ResolveContextManager { get; }
    public XunitServiceProvider(ISolution solution, XunitTestProvider provider, IPsiModules psiModules, ISymbolCache symbolCache, ResolveContextManager resolveContextManager);
    [CompilerGeneratedAttribute]
public XunitTestProvider get_Provider();
    [CompilerGeneratedAttribute]
public IPsiModules get_PsiModules();
    [CompilerGeneratedAttribute]
public ISymbolCache get_SymbolCache();
    [CompilerGeneratedAttribute]
public ResolveContextManager get_ResolveContextManager();
    public IUnitTestRunStrategy GetRunStrategy(IUnitTestElement element);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.UnitTestProvider.Xunit.XunitTestAttributeCache : object {
    private IUnitTestAttributeChecker myUnitTestAttributeCache;
    private JetFastSemiReenterableRWLock myReaderWriterLock;
    private IDictionary`2<string, IClrTypeName> myClrTypeNameCache;
    public XunitTestAttributeCache(IUnitTestAttributeChecker unitTestAttributeCache);
    public Task`1<IClrTypeName[]> GetDerivedAttributesAsync(IProject project, TargetFrameworkId targetFrameworkId, string attributeFullName);
    public Task`1<bool> HasDerivedAttributeAsync(IProject project, TargetFrameworkId targetFrameworkId, IMetadataEntity metadataEntity, string attributeFullName);
    private IClrTypeName GetClrTypeName(string attributeFullTypeName);
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.UnitTestProvider.Xunit.XUnitTestExplorerFromArtifacts : Switching`1<XunitProviderSettings> {
    public XUnitTestExplorerFromArtifacts(ISettingsStore settingsStore, XUnitTestExplorerFromMetadata metadataExplorer, XUnitTestExplorerFromTestRunner testRunnerExplorer);
}
[SolutionComponentAttribute("0")]
internal class JetBrains.ReSharper.UnitTestProvider.Xunit.XUnitTestExplorerFromFile : object {
    [NotNullAttribute]
private XunitTestProvider myProvider;
    [NotNullAttribute]
private XUnitConfigurationSource myConfigurationSource;
    public IUnitTestProvider Provider { get; }
    public XUnitTestExplorerFromFile(XunitTestProvider provider, XUnitConfigurationSource configurationSource);
    public sealed virtual IUnitTestProvider get_Provider();
    public sealed virtual void ProcessFile(IFile psiFile, IUnitTestElementObserverOnFile observer, Func`1<bool> interrupted);
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.UnitTestProvider.Xunit.XUnitTestExplorerFromMetadata : Metadata {
    private ILogger myLogger;
    private XunitServiceProvider myServices;
    private XunitTestAttributeCache myUnitTestAttributeCache;
    [NotNullAttribute]
private XUnitConfigurationSource myConfigurationSource;
    public XUnitTestExplorerFromMetadata(XunitServiceProvider services, AssemblyToAssemblyReferencesResolveManager resolveManager, ResolveContextManager resolveContextManager, NuGetInstalledPackageChecker installedPackageChecker, XunitTestAttributeCache unitTestAttributeCache, XUnitConfigurationSource configurationSource, ILogger logger);
    protected virtual void ProcessProject(MetadataLoader loader, IUnitTestElementObserver observer, CancellationToken token);
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.UnitTestProvider.Xunit.XUnitTestExplorerFromTestRunner : TestRunner {
    public XUnitTestExplorerFromTestRunner(XunitTestProvider provider, ITestRunnerAgentManager agentManager, XUnitTestRunnerAdapter adapter, NuGetInstalledPackageChecker installedPackageChecker);
}
internal class JetBrains.ReSharper.UnitTestProvider.Xunit.XunitTestMetadataExplorer : object {
    [NotNullAttribute]
private IUnitTestElementObserver myObserver;
    [NotNullAttribute]
private UnitTestElementFactory myUnitTestElementFactory;
    [NotNullAttribute]
private XunitTestAttributeCache myUnitTestAttributeCache;
    [NotNullAttribute]
private XUnitDisplayNameFormatter myDisplayNameFormatter;
    public XunitTestMetadataExplorer(IUnitTestElementObserver observer, UnitTestElementFactory unitTestElementFactory, XunitTestAttributeCache unitTestAttributeCache, XUnitConfigurationSource configurationSource);
    public void ExploreAssembly(IMetadataAssembly assembly, CancellationToken cancellationToken);
    private IEnumerable`1<IMetadataTypeInfo> GetExportedTypes(IEnumerable`1<IMetadataTypeInfo> types);
    protected virtual bool IsPublic(IMetadataTypeInfo type);
    private void ExploreType(IMetadataTypeInfo metadataTypeInfo);
    private void ExploreTestClass(IUnitTestElementObserver observer, ITypeInfo typeInfo, string typeName);
    private void ExploreTestMethod(XunitTestClassElement classUnitTestElement, IUnitTestElementObserver observer, IMethodInfo methodInfo);
}
[UnitTestProviderAttribute("16")]
[UsedImplicitlyAttribute]
public class JetBrains.ReSharper.UnitTestProvider.Xunit.XunitTestProvider : object {
    private static AssemblyNameInfo ourXunitReferenceName;
    private static AssemblyNameInfo ourXunitCoreReferenceName;
    private static AssemblyNameInfo ourXunit3CoreReferenceName;
    public string ID { get; }
    public string Name { get; }
    private static XunitTestProvider();
    public sealed virtual string get_ID();
    public sealed virtual string get_Name();
    public sealed virtual bool IsSupported(IHostProvider hostProvider, IProject project, TargetFrameworkId targetFrameworkId);
    public sealed virtual bool IsSupported(IProject project, TargetFrameworkId targetFrameworkId);
    public sealed virtual bool SupportsResultEventsForParentOf(IUnitTestElement element);
    public sealed virtual IUnitTestRunStrategy GetRunStrategy(IUnitTestElement element, IHostProvider hostProvider);
    public sealed virtual bool IsElementOfKind(IDeclaredElement declaredElement, UnitTestElementKind elementKind);
    public sealed virtual bool IsElementOfKind(IUnitTestElement element, UnitTestElementKind elementKind);
    public Nullable`1<XUnitVersion> TryGetFlavor(IProject project, TargetFrameworkId targetFrameworkId);
    private bool IsReferencingAssembly(IProject project, AssemblyNameInfo assembly, TargetFrameworkId targetFrameworkId);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.UnitTestProvider.Xunit.XUnitTestRunnerAdapter : object {
    [NotNullAttribute]
private XunitTestProvider myProvider;
    [NotNullAttribute]
private Reader mySettingsReader;
    public Assembly InProcessAdapterAssembly { get; }
    public int Priority { get; }
    public XUnitTestRunnerAdapter(XunitTestProvider provider, Reader settingsReader);
    public sealed virtual Assembly get_InProcessAdapterAssembly();
    public sealed virtual int get_Priority();
    public sealed virtual TestAdapterLoader GetTestAdapterLoader(ITestRunnerContext ctx);
    public sealed virtual TestContainer GetTestContainer(ITestRunnerContext ctx);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.UnitTestProvider.Xunit.XUnitTestRunnerAdapter/<GetMessageHandlers>d__9")]
public sealed virtual IEnumerable`1<IMessageHandlerMarker> GetMessageHandlers(ITestRunnerContext ctx);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.UnitTestProvider.Xunit.XUnitTestRunnerRunStrategy : TestRunnerRunStrategy {
    public XUnitTestRunnerRunStrategy(IDataCollectorFactory dataCollectorFactory, ITestRunnerAgentManager agentManager, XUnitTestRunnerAdapter adapter, IUnitTestProjectArtifactResolver artifactResolver);
}
public enum JetBrains.ReSharper.UnitTestProvider.Xunit.XUnitVersion : Enum {
    public int value__;
    public static XUnitVersion V1;
    public static XUnitVersion V2;
    public static XUnitVersion V3;
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.UnitTestProvider.Xunit.ZoneMarker : object {
}
public static class JetBrains.ReSharper.UnitTestRunner.Xunit.DisplayNameUtil : object {
    public static string Escape(string name);
    private static string EscapeControlChar(char c);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
