public class JetBrains.ReSharper.UnitTesting.Analysis.VB.nUnit.TestCaseSource.TestCaseSourceApplicableTypeMemberFilter : object {
    private IVBDeclaration myOwnerDeclaration;
    public ResolveErrorType ErrorType { get; }
    public FilterRunType RunType { get; }
    public TestCaseSourceApplicableTypeMemberFilter(IVBDeclaration ownerDeclaration);
    public sealed virtual override bool TryFilterToDestination(List`1<ISymbolInfo> source, List`1<ISymbolInfo> destination);
    private bool HasCorrectType(PredefinedType predefinedType, IType type);
    private bool CheckSingleType(PredefinedType predefinedType, IPsiModule psiModule, IType type, IVBTypeConversionRule conversionRule, IType typeInDeclaration);
    public sealed virtual override ResolveErrorType get_ErrorType();
    public sealed virtual override FilterRunType get_RunType();
}
public class JetBrains.ReSharper.UnitTesting.Analysis.VB.nUnit.TestCaseSource.TestCaseSourceReference : TreeReferenceBase`1<ILiteralExpression> {
    private ITypeElement myTypeElement;
    private IVBDeclaration myOwnerDeclaration;
    private bool myIsAbstract;
    public TestCaseSourceReference(ITypeElement typeElement, ILiteralExpression literal, IVBDeclaration ownerDeclaration);
    public virtual bool IsValid();
    public virtual ResolveResultWithInfo ResolveWithoutCache();
    public virtual string GetName();
    public virtual ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
    public virtual TreeTextRange GetTreeTextRange();
    public virtual IReference BindTo(IDeclaredElement element);
    public virtual IReference BindTo(IDeclaredElement element, ISubstitution substitution);
    public virtual IAccessContext GetAccessContext();
    public sealed virtual override ISymbolTable GetCompletionSymbolTable();
    public bool Equals(TestCaseSourceReference other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.ReSharper.UnitTesting.Analysis.VB.nUnit.TestCaseSource.TestCaseSourceReferenceFactory : object {
    private IModule myModule;
    private TargetFrameworkId myTargetFrameworkId;
    private IUnitTestAttributeChecker myAttributeCache;
    public TestCaseSourceReferenceFactory(IModule modul, TargetFrameworkId targetFrameworkId, IUnitTestAttributeChecker attributeCache);
    public sealed virtual override ReferenceCollection GetReferences(ITreeNode element, ReferenceCollection oldReferences);
    private static IMethodDeclaration GetMethodDeclaration(ITreeNode node);
    public sealed virtual override bool HasReference(ITreeNode element, IReferenceNameContainer names);
}
[ReferenceProviderFactoryAttribute("16")]
public class JetBrains.ReSharper.UnitTesting.Analysis.VB.nUnit.TestCaseSource.TestCaseSourceReferenceProviderFactory : object {
    private IUnitTestAttributeChecker myAttributeCache;
    private Signal`1<IReferenceProviderFactory> myChanged;
    public ISignal`1<IReferenceProviderFactory> Changed { get; }
    public TestCaseSourceReferenceProviderFactory(Lifetime lifetime, IUnitTestAttributeChecker attributeCache);
    public sealed virtual override IReferenceFactory CreateFactory(IPsiSourceFile sourceFile, IFile file, IWordIndex wordIndexForChecks);
    public sealed virtual override ISignal`1<IReferenceProviderFactory> get_Changed();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
public class JetBrains.ReSharper.UnitTesting.Analysis.VB.nUnit.TestCaseSource.TestCaseSourceReferenceSuggestionRule : ItemsProviderOfSpecificContext`1<VBCodeCompletionContextBase> {
    protected virtual AutocompletionBehaviour GetAutocompletionBehaviour(VBCodeCompletionContextBase specificContext);
    protected virtual bool IsAvailable(VBCodeCompletionContextBase context);
    protected virtual void TransformItems(VBCodeCompletionContextBase context, IItemsCollector collector);
}
public abstract class JetBrains.ReSharper.UnitTesting.Analysis.VB.Xunit.References.DataReferenceFactoryBase : object {
    protected IClrTypeName DataAttributeName { get; }
    protected string TypeMemberName { get; }
    protected abstract virtual IClrTypeName get_DataAttributeName();
    protected abstract virtual string get_TypeMemberName();
    public sealed virtual override ReferenceCollection GetReferences(ITreeNode element, ReferenceCollection oldReferences);
    public sealed virtual override bool HasReference(ITreeNode element, IReferenceNameContainer names);
    private ITypeElement GetTypeof(IGetTypeExpression getTypeExpression);
    protected abstract virtual IReference CreateReference(ITypeElement typeElement, ILiteralExpression literalExpression);
    [CompilerGeneratedAttribute]
private bool _Lambda$__5-0(IVBArgument a);
    [CompilerGeneratedAttribute]
private ITypeElement _Lambda$__5-1(IVBArgument a);
}
public class JetBrains.ReSharper.UnitTesting.Analysis.VB.Xunit.References.ExternalAccessContext : object {
    private ITreeNode _element;
    public ExternalAccessContext(ITreeNode element);
    public sealed virtual override ITypeElement GetAccessContainingTypeElement();
    public sealed virtual override Staticness GetStaticness();
    public sealed virtual override QualifierKind GetQualifierKind();
    public sealed virtual override ITypeElement GetQualifierTypeElement();
    public sealed virtual override IPsiModule GetPsiModule();
    public sealed virtual override IPsiSourceFile GetSourceFile();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.VB.VBLanguage", "16")]
internal class JetBrains.ReSharper.UnitTesting.Analysis.VB.Xunit.References.MemberDataAttributeUsageProcessor : object {
    public sealed virtual override void ProcessElement(ITreeNode treeNode, IParameters parameters);
    public sealed virtual override void ProcessMemberUsage(ITypeMember member, IReference reference, IParameters parameters);
    public sealed virtual override void ProcessDeclaration(IDeclaration declaration, IDeclaredElement element, IParameters parameters);
}
public class JetBrains.ReSharper.UnitTesting.Analysis.VB.Xunit.References.MemberDataReference : TreeReferenceBase`1<ILiteralExpression> {
    private ITypeElement _typeElement;
    private ExactNameFilter _exactNameFilter;
    private PredicateFilter _propertyFilter;
    public MemberDataReference(ITypeElement typeElement, ILiteralExpression literalExpression);
    public virtual IReference BindTo(IDeclaredElement element);
    public virtual IReference BindTo(IDeclaredElement element, ISubstitution substitution);
    public virtual IAccessContext GetAccessContext();
    public sealed virtual override ISymbolTable GetCompletionSymbolTable();
    public virtual string GetName();
    public virtual ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
    public virtual TreeTextRange GetTreeTextRange();
    public virtual ResolveResultWithInfo ResolveWithoutCache();
    private bool FilterToApplicableMembers(ISymbolInfo symbolInfo);
}
public class JetBrains.ReSharper.UnitTesting.Analysis.VB.Xunit.References.MemberDataReferenceFactory : DataReferenceFactoryBase {
    public static IClrTypeName MemberDataAttributeName;
    protected IClrTypeName DataAttributeName { get; }
    protected string TypeMemberName { get; }
    private static MemberDataReferenceFactory();
    protected virtual IClrTypeName get_DataAttributeName();
    protected virtual string get_TypeMemberName();
    protected virtual IReference CreateReference(ITypeElement typeElement, ILiteralExpression literalExpression);
}
[ReferenceProviderFactoryAttribute("16")]
public class JetBrains.ReSharper.UnitTesting.Analysis.VB.Xunit.References.MemberDataReferenceProviderFactory : object {
    private Signal`1<IReferenceProviderFactory> myChanged;
    public ISignal`1<IReferenceProviderFactory> Changed { get; }
    public MemberDataReferenceProviderFactory(Lifetime lifetime);
    public sealed virtual override IReferenceFactory CreateFactory(IPsiSourceFile sourceFile, IFile file, IWordIndex wordIndexForChecks);
    public sealed virtual override ISignal`1<IReferenceProviderFactory> get_Changed();
}
public class JetBrains.ReSharper.UnitTesting.Analysis.VB.Xunit.References.PropertyDataReference : TreeReferenceBase`1<ILiteralExpression> {
    private ITypeElement _typeElement;
    private ExactNameFilter _exactNameFilter;
    private PredicateFilter _propertyFilter;
    public PropertyDataReference(ITypeElement typeElement, ILiteralExpression literalExpression);
    public virtual IReference BindTo(IDeclaredElement element);
    public virtual IReference BindTo(IDeclaredElement element, ISubstitution substitution);
    public virtual IAccessContext GetAccessContext();
    public sealed virtual override ISymbolTable GetCompletionSymbolTable();
    public virtual string GetName();
    public virtual ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
    public virtual TreeTextRange GetTreeTextRange();
    public virtual ResolveResultWithInfo ResolveWithoutCache();
    private bool FilterToApplicableMembers(ISymbolInfo symbolInfo);
}
public class JetBrains.ReSharper.UnitTesting.Analysis.VB.Xunit.References.PropertyDataReferenceFactory : DataReferenceFactoryBase {
    private static IClrTypeName OurPropertyDataAttributeName;
    protected IClrTypeName DataAttributeName { get; }
    protected string TypeMemberName { get; }
    private static PropertyDataReferenceFactory();
    protected virtual IClrTypeName get_DataAttributeName();
    protected virtual string get_TypeMemberName();
    protected virtual IReference CreateReference(ITypeElement typeElement, ILiteralExpression literalExpression);
}
[ReferenceProviderFactoryAttribute("16")]
public class JetBrains.ReSharper.UnitTesting.Analysis.VB.Xunit.References.PropertyDataReferenceProviderFactory : object {
    private Signal`1<IReferenceProviderFactory> myChanged;
    public ISignal`1<IReferenceProviderFactory> Changed { get; }
    public PropertyDataReferenceProviderFactory(Lifetime lifetime);
    public sealed virtual override IReferenceFactory CreateFactory(IPsiSourceFile sourceFile, IFile file, IWordIndex wordIndexForChecks);
    public sealed virtual override ISignal`1<IReferenceProviderFactory> get_Changed();
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.UnitTesting.Analysis.VB.ZoneMarker : object {
}
