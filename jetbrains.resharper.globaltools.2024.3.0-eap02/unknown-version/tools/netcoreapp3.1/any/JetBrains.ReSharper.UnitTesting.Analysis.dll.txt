internal class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.AttributeArgumentHotSpotExpression : object {
    [NotNullAttribute]
private AttributeSelectionHotSpotExpression myAttributeSelectionHotSpotExpression;
    [NotNullAttribute]
private string myDefaultValue;
    [NotNullAttribute]
private INUnitParameterAttributeProvider myParameterAttributeProvider;
    public AttributeArgumentHotSpotExpression(AttributeSelectionHotSpotExpression attributeSelectionHotSpotExpression, string defaultValue, INUnitParameterAttributeProvider parameterAttributeProvider);
    public sealed virtual string EvaluateQuickResult(IHotspotContext context);
    public sealed virtual void HandleExpansion(IHotspotContext context);
    public sealed virtual HotspotItems GetLookupItems(IHotspotContext context);
    public sealed virtual string Serialize();
    public sealed virtual object Clone();
}
internal class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.AttributeSelectionHotSpotExpression : object {
    private INUnitParameterAttributeProvider myParameterAttributeProvider;
    [CompilerGeneratedAttribute]
private string <SelectedItem>k__BackingField;
    public string SelectedItem { get; private set; }
    public AttributeSelectionHotSpotExpression(INUnitParameterAttributeProvider parameterAttributeProvider);
    [CompilerGeneratedAttribute]
public string get_SelectedItem();
    [CompilerGeneratedAttribute]
private void set_SelectedItem(string value);
    public sealed virtual string EvaluateQuickResult(IHotspotContext context);
    public sealed virtual void HandleExpansion(IHotspotContext context);
    public sealed virtual HotspotItems GetLookupItems(IHotspotContext context);
    public sealed virtual string Serialize();
    public sealed virtual object Clone();
    [CompilerGeneratedAttribute]
private ILookupItem <GetLookupItems>b__8_0(string a);
}
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.AutoFixture.AutoFixtureNUnit3Simulator : NUnitSimulatorBase {
}
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.AutoFixture.AutoFixtureNUnit3SpecialConversions : SpecialConversionsBase {
    public AutoFixtureNUnit3SpecialConversions(IEnumerable`1<ISpecialConversion> conversions);
    [NotNullAttribute]
public static ISpecialConversions Create();
}
[HighlightingSourceAttribute]
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.AutoFixture.AutoFixtureNUnitHighlightingReporter : object {
    [NotNullAttribute]
private IHighlightingConsumer myConsumer;
    public AutoFixtureNUnitHighlightingReporter(IHighlightingConsumer consumer);
    public sealed virtual void ReportTestsWillNotBeExecuted(ICSharpTypeDeclaration classDeclaration, IMethodDeclaration method, IAttribute attribute);
    public sealed virtual void ReportRedundantArgument(ICSharpArgument argument);
    public sealed virtual void ReportIncorrectArgumentType(ICSharpArgument argument, string parameterName, IType expectedType);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.AutoFixture.AutoFixtureNUnitPsiExtensions : object {
    [ExtensionAttribute]
public static bool IsAutoFixtureNUnitInlineAutoDataAttribute(IAttribute attribute);
    [ExtensionAttribute]
public static bool IsAutoFixtureNUnitAutoDataAttribute(IAttribute attribute);
    [ExtensionAttribute]
public static bool HasNUnitDeclaredAttribute(IMethodDeclaration methodDeclaration);
    [ExtensionAttribute]
public static bool HasNUnitTestFixtureAttribute(ITypeDeclaration classDeclaration);
    [ExtensionAttribute]
public static bool HasNUnitTestAttribute(IMethodDeclaration methodDeclaration);
    [ExtensionAttribute]
public static bool HasNUnitTestFixtureAttributeInDeclaredClass(IMethodDeclaration methodDeclaration);
    [ExtensionAttribute]
public static bool IsNullValue(ICSharpArgument argument);
}
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.AutoFixture.AutoFixtureNUnitSimulatorProvider : object {
    public sealed virtual INUnitSimulator GetSimulator(int majorVersion);
}
[ElementProblemAnalyzerAttribute("0", "Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.AutoFixture.AutoFixtureNUnitTestMethodAnalyzer : ElementProblemAnalyzer`1<IMethodDeclaration> {
    [NotNullAttribute]
private Lazy`1<INUnitSimulatorProvider> myNUnitSimulatorProvider;
    [NotNullAttribute]
private INUnitSettingsProvider mySettingsProvider;
    public AutoFixtureNUnitTestMethodAnalyzer(Lifetime lifetime, ISolution solution, INUnitSettingsProvider settingsProvider);
    protected virtual void Run(IMethodDeclaration element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
    private void ProcessAutoDataAttribute(IMethodDeclaration method, IAttribute attribute, IAutoFixtureNUnitHighlightingReporter reporter);
    private void ProcessInlineAutoDataAttribute(IMethodDeclaration method, IAttribute attribute, IAutoFixtureNUnitHighlightingReporter reporter, ITypeConversionRule conversionRule, FrameworkTypeProvider typeProvider, TypeConversionAnalyzer typeConversionAnalyzer);
    private bool IsArgumentCompatible(ICSharpArgument argument, ICSharpParameterDeclaration methodParameter, TypeConversionAnalyzer typeConversionAnalyzer);
}
public static class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.AutoFixture.AutoFixtureNUnitTestProvider : object {
    public static IClrTypeName AutoDataAttribute;
    public static IClrTypeName InlineAutoDataAttribute;
    private static AutoFixtureNUnitTestProvider();
}
public interface JetBrains.ReSharper.UnitTesting.Analysis.nUnit.AutoFixture.IAutoFixtureNUnitHighlightingReporter {
    public abstract virtual void ReportTestsWillNotBeExecuted(ICSharpTypeDeclaration classDeclaration, IMethodDeclaration method, IAttribute attribute);
    public abstract virtual void ReportRedundantArgument(ICSharpArgument argument);
    public abstract virtual void ReportIncorrectArgumentType(ICSharpArgument argument, string parameterName, IType expectedType);
}
public abstract class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.Combinations.CombinationsAttributeValidatorBase : object {
    [NotNullAttribute]
private NUnitParameterAttributeProvider myParameterAttributeProvider;
    [NotNullAttribute]
private IRandomValuesValidatorProvider myRandomValuesValidatorProvider;
    [NotNullAttribute]
private IRangeValuesValidatorProvider myRangeValuesValidatorProvider;
    [NotNullAttribute]
private ITestCaseOrValueSourceAttributeValidatorProvider mySourceValidatorProvider;
    [NotNullAttribute]
private ICSharpTypeConversionRule myTypeConversionRule;
    [NotNullAttribute]
private FrameworkTypeProvider myTypeProvider;
    [NotNullAttribute]
private IValuesAttributeValidatorProvider myValuesAttributeValidatorProvider;
    [NotNullAttribute]
protected NUnitVersion myNUnitVersion;
    protected bool AllowDuplicateValues { get; }
    protected CombinationsAttributeValidatorBase(FrameworkTypeProvider typeProvider, ICSharpTypeConversionRule typeConversionRule, NUnitParameterAttributeProvider parameterAttributeProvider, IRandomValuesValidatorProvider randomValuesValidatorProvider, IRangeValuesValidatorProvider rangeValuesValidatorProvider, ITestCaseOrValueSourceAttributeValidatorProvider sourceValidatorProvider, IValuesAttributeValidatorProvider valuesAttributeValidatorProvider, NUnitVersion nUnitVersion);
    protected virtual bool get_AllowDuplicateValues();
    public virtual void Validate(IAttribute attribute, IMethod method, IMethodDeclaration methodDeclaration, NUnitVersion nUnitVersion, int testCountLimit, ICombinationsReporter reporter);
    protected abstract virtual ulong GetTestCount(IEnumerable`1<ulong> parameterTestCounts);
    protected virtual bool IsAutoValuesSupported(IParameter parameter, ICombinationsReporter reporter);
    protected bool IsParameterDataSourceAttribute(IAttributeInstance parameterAttribute);
    private void CheckRangeAttribute(IParameter parameter, IAttributeInstance rangeAttribute, NUnitVersion nUnitVersion, int testCountLimit, ICombinationsReporter reporter);
    private void CheckRandomAttribute(IParameter parameter, IAttributeInstance randomAttribute, NUnitVersion nUnitVersion, int testCountLimit, ICombinationsReporter reporter);
    private object GetValidValue(ConstantValue value);
    private Nullable`1<int> GetIntValue(ConstantValue value);
    private void CheckValuesAttribute(IParameter parameter, IAttributeInstance valuesAttribute, NUnitVersion nUnitVersion, bool allowDuplicates, int testCountLimit, ICombinationsReporter reporter);
}
[HighlightingSourceAttribute]
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.Combinations.CombinationsReporter : object {
    [NotNullAttribute]
private IHighlightingConsumer myConsumer;
    [NotNullAttribute]
private IMethodDeclaration myMethodDeclaration;
    [NotNullAttribute]
private IDictionary`2<string, ulong> myParameterTestCounts;
    [CompilerGeneratedAttribute]
private ulong <TestCount>k__BackingField;
    public ulong TestCount { get; private set; }
    public CombinationsReporter(IHighlightingConsumer consumer, IMethodDeclaration methodDeclaration);
    public sealed virtual void ReportTestCount(ulong testCount);
    [CompilerGeneratedAttribute]
public sealed virtual ulong get_TestCount();
    [CompilerGeneratedAttribute]
private void set_TestCount(ulong value);
    public sealed virtual void ReportParameterTestCount(IParameter parameter, ulong testCount);
    public sealed virtual IDictionary`2<string, ulong> GetParameterTestCounts();
    public sealed virtual void ReportNoValuesProvided(NUnitVersion nUnitVersion);
    public sealed virtual void ReportIncompatibleType(string attributeName, IParameter parameter, IType firstParameterType);
    public sealed virtual void ReportTooManyTests(IAttribute attribute, ulong testCount, ulong testCountLimit);
    public sealed virtual void ReportUnusedParameterAttribute(IAttribute attribute);
    public sealed virtual void ReportImplicitAttributeValues(IAttribute attribute, ulong expectedTestCount, ulong actualTestCount);
    public sealed virtual void ReportMissingCancelAfterAttribute(IParameter parameter);
}
[HighlightingSourceAttribute]
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.Combinations.CombinationsValidatorProvider : object {
    [NotNullAttribute]
private Lazy`1<ICombinationsValidator> myCombinatorialValidator;
    [NotNullAttribute]
private Lazy`1<ICombinationsValidator> myImplicitCombinatorialValidator;
    [NotNullAttribute]
private Lazy`1<ICombinationsValidator> myPairwiseValidator;
    [NotNullAttribute]
private Lazy`1<ICombinationsReporter> myReporter;
    [NotNullAttribute]
private Lazy`1<ICombinationsValidator> mySequentialValidator;
    [NotNullAttribute]
private Lazy`1<ICombinationsValidator> myTheoryValidator;
    public CombinationsValidatorProvider(IHighlightingConsumer consumer, IMethodDeclaration methodDeclaration, NUnitParameterAttributeProvider parameterAttributeProvider, FrameworkTypeProvider typeProvider, ICSharpTypeConversionRule typeConversionRule, IRandomValuesValidatorProvider randomValuesValidatorProvider, IRangeValuesValidatorProvider rangeValuesValidatorProvider, ITestCaseOrValueSourceAttributeValidatorProvider sourceValidatorProvider, IValuesAttributeValidatorProvider valuesAttributeValidatorProvider, NUnitVersion nUnitVersion);
    public sealed virtual ICombinationsValidator GetImplicitCombinatorialValidator();
    public sealed virtual ICombinationsValidator GetCombinatorialValidator();
    public sealed virtual ICombinationsValidator GetSequentialValidator();
    public sealed virtual ICombinationsValidator GetPairwiseValidator();
    public sealed virtual ICombinationsValidator GetTheoryValidator();
    public sealed virtual ICombinationsReporter GetReporter();
}
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.Combinations.CombinatorialAttributeValidator : CombinationsAttributeValidatorBase {
    public CombinatorialAttributeValidator(FrameworkTypeProvider typeProvider, ICSharpTypeConversionRule typeConversionRule, NUnitParameterAttributeProvider parameterAttributeProvider, IRandomValuesValidatorProvider randomValuesValidatorProvider, IRangeValuesValidatorProvider rangeValuesValidatorProvider, ITestCaseOrValueSourceAttributeValidatorProvider sourceValidatorProvider, IValuesAttributeValidatorProvider valuesAttributeValidatorProvider, NUnitVersion nUnitVersion);
    protected virtual ulong GetTestCount(IEnumerable`1<ulong> parameterTestCounts);
}
public interface JetBrains.ReSharper.UnitTesting.Analysis.nUnit.Combinations.ICombinationsReporter {
    public abstract virtual void ReportParameterTestCount(IParameter parameter, ulong testCount);
    [NotNullAttribute]
public abstract virtual IDictionary`2<string, ulong> GetParameterTestCounts();
    public abstract virtual void ReportNoValuesProvided(NUnitVersion nUnitVersion);
    public abstract virtual void ReportIncompatibleType(string attributeName, IParameter parameter, IType parameterType);
    public abstract virtual void ReportTooManyTests(IAttribute attribute, ulong testCount, ulong testCountLimit);
    public abstract virtual void ReportUnusedParameterAttribute(IAttribute attribute);
    public abstract virtual void ReportImplicitAttributeValues(IAttribute attribute, ulong methodTestCount, ulong attributeTestCount);
    public abstract virtual void ReportMissingCancelAfterAttribute(IParameter parameter);
}
public interface JetBrains.ReSharper.UnitTesting.Analysis.nUnit.Combinations.ICombinationsValidator {
    public abstract virtual void Validate(IAttribute attribute, IMethod method, IMethodDeclaration methodDeclaration, NUnitVersion nUnitVersion, int testCountLimit, ICombinationsReporter reporter);
}
public interface JetBrains.ReSharper.UnitTesting.Analysis.nUnit.Combinations.ICombinationsValidatorProvider {
    [NotNullAttribute]
public abstract virtual ICombinationsValidator GetImplicitCombinatorialValidator();
    [NotNullAttribute]
public abstract virtual ICombinationsValidator GetCombinatorialValidator();
    [NotNullAttribute]
public abstract virtual ICombinationsValidator GetSequentialValidator();
    [NotNullAttribute]
public abstract virtual ICombinationsValidator GetPairwiseValidator();
    [NotNullAttribute]
public abstract virtual ICombinationsValidator GetTheoryValidator();
    [NotNullAttribute]
public abstract virtual ICombinationsReporter GetReporter();
}
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.Combinations.ImplicitCombinatorialAttributeValidator : CombinationsAttributeValidatorBase {
    public ImplicitCombinatorialAttributeValidator(FrameworkTypeProvider typeProvider, ICSharpTypeConversionRule typeConversionRule, NUnitParameterAttributeProvider parameterAttributeProvider, IRandomValuesValidatorProvider randomValuesValidatorProvider, IRangeValuesValidatorProvider rangeValuesValidatorProvider, ITestCaseOrValueSourceAttributeValidatorProvider sourceValidatorProvider, IValuesAttributeValidatorProvider valuesAttributeValidatorProvider, NUnitVersion nUnitVersion);
    protected virtual ulong GetTestCount(IEnumerable`1<ulong> parameterTestCounts);
}
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.Combinations.PairwiseAttributeValidator : CombinationsAttributeValidatorBase {
    public PairwiseAttributeValidator(FrameworkTypeProvider typeProvider, ICSharpTypeConversionRule typeConversionRule, NUnitParameterAttributeProvider parameterAttributeProvider, IRandomValuesValidatorProvider randomValuesValidatorProvider, IRangeValuesValidatorProvider rangeValuesValidatorProvider, ITestCaseOrValueSourceAttributeValidatorProvider sourceValidatorProvider, IValuesAttributeValidatorProvider valuesAttributeValidatorProvider, NUnitVersion nUnitVersion);
    protected virtual ulong GetTestCount(IEnumerable`1<ulong> parameterTestCounts);
}
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.Combinations.SequentialAttributeValidator : CombinationsAttributeValidatorBase {
    protected bool AllowDuplicateValues { get; }
    public SequentialAttributeValidator(FrameworkTypeProvider typeProvider, ICSharpTypeConversionRule typeConversionRule, NUnitParameterAttributeProvider parameterAttributeProvider, IRandomValuesValidatorProvider randomValuesValidatorProvider, IRangeValuesValidatorProvider rangeValuesValidatorProvider, ITestCaseOrValueSourceAttributeValidatorProvider sourceValidatorProvider, IValuesAttributeValidatorProvider valuesAttributeValidatorProvider, NUnitVersion nUnitVersion);
    public virtual void Validate(IAttribute attribute, IMethod method, IMethodDeclaration methodDeclaration, NUnitVersion nUnitVersion, int testCountLimit, ICombinationsReporter reporter);
    protected virtual bool get_AllowDuplicateValues();
    protected virtual ulong GetTestCount(IEnumerable`1<ulong> parameterTestCounts);
}
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.Combinations.TheoryAttributeValidator : CombinationsAttributeValidatorBase {
    public TheoryAttributeValidator(FrameworkTypeProvider typeProvider, ICSharpTypeConversionRule typeConversionRule, NUnitParameterAttributeProvider parameterAttributeProvider, IRandomValuesValidatorProvider randomValuesValidatorProvider, IRangeValuesValidatorProvider rangeValuesValidatorProvider, ITestCaseOrValueSourceAttributeValidatorProvider sourceValidatorProvider, IValuesAttributeValidatorProvider valuesAttributeValidatorProvider, NUnitVersion nUnitVersion);
    protected virtual ulong GetTestCount(IEnumerable`1<ulong> parameterTestCounts);
    protected virtual bool IsAutoValuesSupported(IParameter parameter, ICombinationsReporter reporter);
}
public static class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.Common.Utils : object {
    public static void Swap(T& x, T& y);
}
public interface JetBrains.ReSharper.UnitTesting.Analysis.nUnit.INUnitParameterAttributeProvider {
    public string ValuesAttribute { get; }
    public string ValueSourceAttribute { get; }
    public string RangeAttribute { get; }
    public string RandomAttribute { get; }
    public abstract virtual bool IsParameterAttribute(IAttributeInstance attribute);
    public abstract virtual bool IsParameterDataSourceAttribute(IAttributeInstance attribute);
    public abstract virtual string get_ValuesAttribute();
    public abstract virtual string get_ValueSourceAttribute();
    public abstract virtual string get_RangeAttribute();
    public abstract virtual string get_RandomAttribute();
    public abstract virtual IEnumerable`1<string> GetParameterAttributes();
    public abstract virtual string GetDefaultParameterAttribute();
}
public interface JetBrains.ReSharper.UnitTesting.Analysis.nUnit.INUnitSettingsProvider {
    public bool IsNUnit2Enabled { get; }
    public bool IsNUnit3Enabled { get; }
    public int TestCountLimit { get; }
    public abstract virtual bool get_IsNUnit2Enabled();
    public abstract virtual bool get_IsNUnit3Enabled();
    public abstract virtual int get_TestCountLimit();
}
public interface JetBrains.ReSharper.UnitTesting.Analysis.nUnit.ITestCountReporter {
    public ulong TestCount { get; }
    public abstract virtual void ReportTestCount(ulong testCount);
    public abstract virtual ulong get_TestCount();
}
[ConfigurableSeverityHighlightingAttribute("NUnit.AsyncMethodMustBeTask", "CSHARP")]
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.NUnitAsyncMethodMustBeTaskWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private IMethodDeclaration <MethodDeclaration>k__BackingField;
    public IMethodDeclaration MethodDeclaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public NUnitAsyncMethodMustBeTaskWarning(IMethodDeclaration methodDeclaration);
    [CompilerGeneratedAttribute]
public IMethodDeclaration get_MethodDeclaration();
    public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("NUnit.AttributeProducesTooManyTests", "CSHARP")]
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.NUnitAttributeProducesTooManyTestsWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private IAttribute <Attribute>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TestCount>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TestCountLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public IAttribute Attribute { get; }
    public string TestCount { get; }
    public string TestCountLimit { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public NUnitAttributeProducesTooManyTestsWarning(IAttribute attribute, string testCount, string testCountLimit);
    [CompilerGeneratedAttribute]
public IAttribute get_Attribute();
    [CompilerGeneratedAttribute]
public string get_TestCount();
    [CompilerGeneratedAttribute]
public string get_TestCountLimit();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("NUnit.AutoFixture.IncorrectArgumentType", "CSHARP")]
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.NUnitAutoFixtureIncorrectArgumentTypeWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private ICSharpExpression <Argument>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    [CompilerGeneratedAttribute]
private IType <ExpectedType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public ICSharpExpression Argument { get; }
    public string ParameterName { get; }
    public IType ExpectedType { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public NUnitAutoFixtureIncorrectArgumentTypeWarning(ICSharpExpression argument, string parameterName, IType expectedType);
    [CompilerGeneratedAttribute]
public ICSharpExpression get_Argument();
    [CompilerGeneratedAttribute]
public string get_ParameterName();
    [CompilerGeneratedAttribute]
public IType get_ExpectedType();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("NUnit.AutoFixture.MissedTestOrTestFixtureAttribute", "CSHARP")]
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.NUnitAutoFixtureMissedTestOrTestFixtureAttributeWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private ICSharpTypeDeclaration <ClassDeclaration>k__BackingField;
    [CompilerGeneratedAttribute]
private IMethodDeclaration <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private IAttribute <Attribute>k__BackingField;
    public ICSharpTypeDeclaration ClassDeclaration { get; }
    public IMethodDeclaration Method { get; }
    public IAttribute Attribute { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public NUnitAutoFixtureMissedTestOrTestFixtureAttributeWarning(ICSharpTypeDeclaration classDeclaration, IMethodDeclaration method, IAttribute attribute);
    [CompilerGeneratedAttribute]
public ICSharpTypeDeclaration get_ClassDeclaration();
    [CompilerGeneratedAttribute]
public IMethodDeclaration get_Method();
    [CompilerGeneratedAttribute]
public IAttribute get_Attribute();
    public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("NUnit.AutoFixture.RedundantArgumentInInlineAutoDataAttribute", "CSHARP")]
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.NUnitAutoFixtureRedundantArgumentInInlineAutoDataAttributeWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private ICSharpArgument <Argument>k__BackingField;
    public ICSharpArgument Argument { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public NUnitAutoFixtureRedundantArgumentInInlineAutoDataAttributeWarning(ICSharpArgument argument);
    [CompilerGeneratedAttribute]
public ICSharpArgument get_Argument();
    public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("NUnit.DuplicateValues", "CSHARP")]
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.NUnitDuplicateValuesWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private ICSharpExpression <Expression>k__BackingField;
    public ICSharpExpression Expression { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public NUnitDuplicateValuesWarning(ICSharpExpression expression);
    [CompilerGeneratedAttribute]
public ICSharpExpression get_Expression();
    public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
public enum JetBrains.ReSharper.UnitTesting.Analysis.nUnit.NUnitGeneration : Enum {
    public int value__;
    public static NUnitGeneration Unknown;
    public static NUnitGeneration V25;
    public static NUnitGeneration V26;
    public static NUnitGeneration V30;
    public static NUnitGeneration V36;
    public static NUnitGeneration V40;
}
[ConfigurableSeverityHighlightingAttribute("NUnit.IgnoredParameterAttribute", "CSHARP")]
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.NUnitIgnoredParameterAttributeWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private IAttribute <Attribute>k__BackingField;
    public IAttribute Attribute { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public NUnitIgnoredParameterAttributeWarning(IAttribute attribute);
    [CompilerGeneratedAttribute]
public IAttribute get_Attribute();
    public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("NUnit.ImplicitUnspecifiedNullValues", "CSHARP")]
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.NUnitImplicitUnspecifiedNullValuesWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private IAttribute <Attribute>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExpectedTestCount>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ActualTestCount>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public IAttribute Attribute { get; }
    public string ExpectedTestCount { get; }
    public string ActualTestCount { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public NUnitImplicitUnspecifiedNullValuesWarning(IAttribute attribute, string expectedTestCount, string actualTestCount);
    [CompilerGeneratedAttribute]
public IAttribute get_Attribute();
    [CompilerGeneratedAttribute]
public string get_ExpectedTestCount();
    [CompilerGeneratedAttribute]
public string get_ActualTestCount();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("NUnit.IncorrectArgumentType", "CSHARP")]
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.NUnitIncorrectArgumentTypeWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private ICSharpExpression <Argument>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    [CompilerGeneratedAttribute]
private IType <ExpectedType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public ICSharpExpression Argument { get; }
    public string ParameterName { get; }
    public IType ExpectedType { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public NUnitIncorrectArgumentTypeWarning(ICSharpExpression argument, string parameterName, IType expectedType);
    [CompilerGeneratedAttribute]
public ICSharpExpression get_Argument();
    [CompilerGeneratedAttribute]
public string get_ParameterName();
    [CompilerGeneratedAttribute]
public IType get_ExpectedType();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("NUnit.IncorrectExpectedResultType", "CSHARP")]
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.NUnitIncorrectExpectedResultTypeWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private ICSharpExpression <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private IType <ExpectedType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public ICSharpExpression Value { get; }
    public IType ExpectedType { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public NUnitIncorrectExpectedResultTypeWarning(ICSharpExpression value, IType expectedType);
    [CompilerGeneratedAttribute]
public ICSharpExpression get_Value();
    [CompilerGeneratedAttribute]
public IType get_ExpectedType();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("NUnit.IncorrectRangeBounds", "CSHARP")]
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.NUnitIncorrectRangeBoundsWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private ICSharpArgument <Value>k__BackingField;
    public ICSharpArgument Value { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public NUnitIncorrectRangeBoundsWarning(ICSharpArgument value);
    [CompilerGeneratedAttribute]
public ICSharpArgument get_Value();
    public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("NUnit.MethodWithParametersAndTestAttribute", "CSHARP")]
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.NUnitMethodWithParametersAndTestAttributeWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private IMethodDeclaration <MethodDeclaration>k__BackingField;
    [CompilerGeneratedAttribute]
private NUnitVersion <NUnitVersion>k__BackingField;
    public IMethodDeclaration MethodDeclaration { get; }
    public NUnitVersion NUnitVersion { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public NUnitMethodWithParametersAndTestAttributeWarning(IMethodDeclaration methodDeclaration, NUnitVersion nUnitVersion);
    [CompilerGeneratedAttribute]
public IMethodDeclaration get_MethodDeclaration();
    [CompilerGeneratedAttribute]
public NUnitVersion get_NUnitVersion();
    public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("NUnit.MissingArgumentsInTestCaseAttribute", "CSHARP")]
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.NUnitMissingArgumentsInTestCaseAttributeWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private IAttribute <Attribute>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <MissingParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public IAttribute Attribute { get; }
    public IEnumerable`1<string> MissingParameters { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public NUnitMissingArgumentsInTestCaseAttributeWarning(IAttribute attribute, IEnumerable`1<string> missingParameters);
    [CompilerGeneratedAttribute]
public IAttribute get_Attribute();
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_MissingParameters();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("NUnit.MissingCancelAfterAttribute", "CSHARP")]
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.NUnitMissingCancelAfterAttributeWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private ITypeMemberRegularParameterDeclaration <Parameter>k__BackingField;
    public ITypeMemberRegularParameterDeclaration Parameter { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public NUnitMissingCancelAfterAttributeWarning(ITypeMemberRegularParameterDeclaration parameter);
    [CompilerGeneratedAttribute]
public ITypeMemberRegularParameterDeclaration get_Parameter();
    public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("NUnit.NonPublicMethodWithTestAttribute", "CSHARP")]
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.NUnitNonPublicMethodWithTestAttributeWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private IMethodDeclaration <MethodDeclaration>k__BackingField;
    public IMethodDeclaration MethodDeclaration { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public NUnitNonPublicMethodWithTestAttributeWarning(IMethodDeclaration methodDeclaration);
    [CompilerGeneratedAttribute]
public IMethodDeclaration get_MethodDeclaration();
    public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("NUnit.NoValuesProvided", "CSHARP")]
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.NUnitNoValuesProvidedWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private IAttribute <Attribute>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ParameterType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Comment>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public IAttribute Attribute { get; }
    public string ParameterType { get; }
    public string Comment { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public NUnitNoValuesProvidedWarning(IAttribute attribute, string parameterType, string comment);
    [CompilerGeneratedAttribute]
public IAttribute get_Attribute();
    [CompilerGeneratedAttribute]
public string get_ParameterType();
    [CompilerGeneratedAttribute]
public string get_Comment();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.NUnitParameterAttributeProvider : object {
    [NotNullAttribute]
private IDeclaredType myNUnitAttributeType;
    [NotNullAttribute]
private IDeclaredType myParameterDataAttributeType;
    [NotNullAttribute]
private IDeclaredType myParameterDataSourceInterfaceType;
    [NotNullAttribute]
private ICSharpTypeConversionRule myTypeConversionRule;
    public string ValuesAttribute { get; }
    public string ValueSourceAttribute { get; }
    public string RangeAttribute { get; }
    public string RandomAttribute { get; }
    public NUnitParameterAttributeProvider(IPsiModule module);
    public sealed virtual bool IsParameterAttribute(IAttributeInstance attribute);
    public sealed virtual bool IsParameterDataSourceAttribute(IAttributeInstance attribute);
    public sealed virtual string get_ValuesAttribute();
    public sealed virtual string get_ValueSourceAttribute();
    public sealed virtual string get_RangeAttribute();
    public sealed virtual string get_RandomAttribute();
    [NotNullAttribute]
public sealed virtual IEnumerable`1<string> GetParameterAttributes();
    public sealed virtual string GetDefaultParameterAttribute();
    public bool IsNUnit3Attribute(IAttribute attribute);
    private bool IsConvertible(IType actualType, IType expectedType);
}
[ConfigurableSeverityHighlightingAttribute("NUnit.ParameterTypeIsNotCompatibleWithAttribute", "CSHARP")]
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.NUnitParameterTypeIsNotCompatibleWithAttributeWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private string <AttributeName>k__BackingField;
    [CompilerGeneratedAttribute]
private ITypeMemberRegularParameterDeclaration <Parameter>k__BackingField;
    [CompilerGeneratedAttribute]
private IType <AttributeDataType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public string AttributeName { get; }
    public ITypeMemberRegularParameterDeclaration Parameter { get; }
    public IType AttributeDataType { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public NUnitParameterTypeIsNotCompatibleWithAttributeWarning(string attributeName, ITypeMemberRegularParameterDeclaration parameter, IType attributeDataType);
    [CompilerGeneratedAttribute]
public string get_AttributeName();
    [CompilerGeneratedAttribute]
public ITypeMemberRegularParameterDeclaration get_Parameter();
    [CompilerGeneratedAttribute]
public IType get_AttributeDataType();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ExtensionAttribute]
internal static class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.NUnitPsiExtensions : object {
    [ExtensionAttribute]
public static bool IsField(ICSharpTypeMemberDeclaration memberDeclaration);
    [ExtensionAttribute]
public static bool IsProperty(ICSharpTypeMemberDeclaration memberDeclaration);
    [ExtensionAttribute]
public static bool IsMethod(ICSharpTypeMemberDeclaration memberDeclaration);
    [ExtensionAttribute]
public static bool IsNUnitTestCaseAttribute(IAttribute attribute);
    [ExtensionAttribute]
public static bool TryGetReturnType(ICSharpTypeMemberDeclaration memberDeclaration, IType& returnType);
    [ExtensionAttribute]
public static bool IsNameOf(ICSharpExpression expression);
    [ExtensionAttribute]
public static bool IsStringLiteral(ICSharpExpression expression);
    [ExtensionAttribute]
public static bool IsExpectedResult(IPropertyAssignment assignment, NUnitVersion nUnitVersion);
    [ExtensionAttribute]
public static bool IsObsoleteExpectedResult(IPropertyAssignment assignment, NUnitVersion nUnitVersion);
    [ExtensionAttribute]
[NotNullAttribute]
public static string GetExpectedResultPropertyName(NUnitVersion nUnitVersion);
    [ExtensionAttribute]
[NotNullAttribute]
private static string GetObsoleteExpectedResultPropertyName(NUnitVersion nUnitVersion);
    [ExtensionAttribute]
public static bool TryEvaluateStringValue(ICSharpArgument argument, String& value);
    [ExtensionAttribute]
public static bool TryEvaluateTypeValue(ICSharpArgument argument, IType& value);
    [ExtensionAttribute]
public static bool TryGetMember(ICSharpTypeDeclaration classDeclaration, string memberName, ICSharpTypeMemberDeclaration& memberDeclaration);
    [ExtensionAttribute]
public static bool TryGetSourceMember(ITypeElement typeElement, string memberName, IDeclaredElement& memberDeclaration);
    [ExtensionAttribute]
public static bool IsGeneric(IMethod method);
    [ExtensionAttribute]
public static IAttribute GetAttribute(ITypeMemberRegularParameterDeclaration parameter, IClrTypeName attributeType);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IAttribute GetAttribute(IAttributeInstance attributeInstance);
    [ExtensionAttribute]
[NotNullAttribute]
private static NUnitVersion GuessNUnitVersionByAttributes(IMethodDeclaration methodDeclaration);
    [ExtensionAttribute]
[NotNullAttribute]
private static NUnitVersion GetNUnitVersionByCachedNUnitReference(IMethodDeclaration methodDeclaration);
    [ExtensionAttribute]
[NotNullAttribute]
public static NUnitVersion GetNUnitVersion(IMethodDeclaration methodDeclaration);
    [ExtensionAttribute]
public static bool IsPublic(ICSharpTypeMemberDeclaration member);
    [ExtensionAttribute]
public static bool In(Type type, Type[] types);
    [ExtensionAttribute]
public static bool IsNullableEnumType(IType type);
    [ExtensionAttribute]
public static bool IsNullableEnumType(IType type, IEnum& enumType);
    [ExtensionAttribute]
public static bool IsArrayInitialize(ICSharpArgument argument, IArrayInitializer& arrayInitializer);
    [ExtensionAttribute]
private static bool IsTypeOf(ICSharpExpression expression);
    [ExtensionAttribute]
private static bool IsTypeOf(ICSharpExpression expression, ITypeofExpression& typeofExpression);
    [ExtensionAttribute]
public static bool IsConstantExpression(ICSharpExpression expression);
    [ExtensionAttribute]
[NotNullAttribute]
public static ConstantValue GetConstantValue(ICSharpExpression expression);
    [ExtensionAttribute]
public static bool IsNUnitDeclaredType(IClrTypeName clrTypeName);
    [ExtensionAttribute]
public static bool IsNUnitTestProject(IProject project);
}
[ConfigurableSeverityHighlightingAttribute("NUnit.RangeAttributeBoundsAreOutOfRange", "CSHARP")]
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.NUnitRangeAttributeBoundsAreOutOfRangeWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private ICSharpExpression <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ParameterType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public ICSharpExpression Value { get; }
    public string ParameterType { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public NUnitRangeAttributeBoundsAreOutOfRangeWarning(ICSharpExpression value, string parameterType);
    [CompilerGeneratedAttribute]
public ICSharpExpression get_Value();
    [CompilerGeneratedAttribute]
public string get_ParameterType();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("NUnit.RangeStepSignMismatch", "CSHARP")]
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.NUnitRangeStepSignMismatchWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private ICSharpArgument <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequiredSign>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public ICSharpArgument Value { get; }
    public bool RequiredSign { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public NUnitRangeStepSignMismatchWarning(ICSharpArgument value, bool requiredSign);
    [CompilerGeneratedAttribute]
public ICSharpArgument get_Value();
    [CompilerGeneratedAttribute]
public bool get_RequiredSign();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("NUnit.RangeStepValueMustNotBeZero", "CSHARP")]
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.NUnitRangeStepValueMustNotBeZeroWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private ICSharpArgument <Value>k__BackingField;
    public ICSharpArgument Value { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public NUnitRangeStepValueMustNotBeZeroWarning(ICSharpArgument value);
    [CompilerGeneratedAttribute]
public ICSharpArgument get_Value();
    public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("NUnit.RangeToValueIsNotReachable", "CSHARP")]
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.NUnitRangeToValueIsNotReachableWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private ICSharpArgument <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ActualValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExpectedValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public ICSharpArgument Value { get; }
    public string ActualValue { get; }
    public string ExpectedValue { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public NUnitRangeToValueIsNotReachableWarning(ICSharpArgument value, string actualValue, string expectedValue);
    [CompilerGeneratedAttribute]
public ICSharpArgument get_Value();
    [CompilerGeneratedAttribute]
public string get_ActualValue();
    [CompilerGeneratedAttribute]
public string get_ExpectedValue();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("NUnit.RedundantArgumentInsteadOfExpectedResult", "CSHARP")]
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.NUnitRedundantArgumentInsteadOfExpectedResultWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private ICSharpArgument <Argument>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExpectedResultPropertyName>k__BackingField;
    public ICSharpArgument Argument { get; }
    public string ExpectedResultPropertyName { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public NUnitRedundantArgumentInsteadOfExpectedResultWarning(ICSharpArgument argument, string expectedResultPropertyName);
    [CompilerGeneratedAttribute]
public ICSharpArgument get_Argument();
    [CompilerGeneratedAttribute]
public string get_ExpectedResultPropertyName();
    public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("NUnit.RedundantArgumentInTestCaseAttribute", "CSHARP")]
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.NUnitRedundantArgumentInTestCaseAttributeWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private ICSharpArgument <Argument>k__BackingField;
    public ICSharpArgument Argument { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public NUnitRedundantArgumentInTestCaseAttributeWarning(ICSharpArgument argument);
    [CompilerGeneratedAttribute]
public ICSharpArgument get_Argument();
    public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("NUnit.RedundantExpectedResultInTestCaseAttribute", "CSHARP")]
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.NUnitRedundantExpectedResultInTestCaseAttributeWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private IPropertyAssignment <Assignment>k__BackingField;
    public IPropertyAssignment Assignment { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public NUnitRedundantExpectedResultInTestCaseAttributeWarning(IPropertyAssignment assignment);
    [CompilerGeneratedAttribute]
public IPropertyAssignment get_Assignment();
    public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.NUnitReferencesTracker : object {
    [NotNullAttribute]
private static JetHashSet`1<string> ourNUnitReferenceNames;
    [NotNullAttribute]
private static ICollection`1<AssemblyNameInfo> ourNUnitReferenceNameInfos;
    [NotNullAttribute]
public static Key`1<NUnitReferencesTracker> NUnitReferencesTrackerKey;
    [NotNullAttribute]
private ChangeManager myChangeManager;
    private Lifetime myLifetime;
    [NotNullAttribute]
private ILogger myLogger;
    [NotNullAttribute]
private ModuleReferenceResolveSync myModuleReferenceResolveSync;
    [NotNullAttribute]
private HashSet`1<IProject> myNUnitProjects;
    [NotNullAttribute]
private IViewableProjectsCollection myProjects;
    [NotNullAttribute]
private ISolution mySolution;
    private static NUnitReferencesTracker();
    public NUnitReferencesTracker(Lifetime lifetime, ISolution solution, ChangeManager changeManager, ISolutionLoadTasksScheduler scheduler, IViewableProjectsCollection projects, ModuleReferenceResolveSync moduleReferenceResolveSync, ILogger logger);
    private sealed virtual override object JetBrains.Application.changes.IChangeProvider.Execute(IChangeMap changeMap);
    private void OnSolutionPreparePsiModules();
    private bool HasNUnitReference(IProject project);
    public bool IsNUnitProject(IProject project);
    [CompilerGeneratedAttribute]
private void <OnSolutionPreparePsiModules>b__13_0(Lifetime projectLifetime, IProject project);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.NUnitSettingsProvider : object {
    [NotNullAttribute]
private IContextBoundSettingsStoreLive myBoundSettingsStore;
    [NotNullAttribute]
private string myNUnit2ProviderId;
    [NotNullAttribute]
private string myNUnit3ProviderId;
    public bool IsNUnit2Enabled { get; }
    public bool IsNUnit3Enabled { get; }
    public int TestCountLimit { get; }
    public NUnitSettingsProvider(Lifetime lifetime, ISolution solution, ISettingsStore settingsStore, NUnitTestProvider v26Provider, NUnitTestProvider v30Provider);
    public sealed virtual bool get_IsNUnit2Enabled();
    public sealed virtual bool get_IsNUnit3Enabled();
    public sealed virtual int get_TestCountLimit();
    private bool IsProviderEnabled(string providerId);
}
[ConfigurableSeverityHighlightingAttribute("NUnit.TestCaseAttributeRequiresExpectedResult", "CSHARP")]
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.NUnitTestCaseAttributeRequiresExpectedResultWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private IMethodDeclaration <MethodDeclaration>k__BackingField;
    [CompilerGeneratedAttribute]
private IAttribute <Attribute>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNUnit26OrLater>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public IMethodDeclaration MethodDeclaration { get; }
    public IAttribute Attribute { get; }
    public bool IsNUnit26OrLater { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public NUnitTestCaseAttributeRequiresExpectedResultWarning(IMethodDeclaration methodDeclaration, IAttribute attribute, bool isNUnit26OrLater);
    [CompilerGeneratedAttribute]
public IMethodDeclaration get_MethodDeclaration();
    [CompilerGeneratedAttribute]
public IAttribute get_Attribute();
    [CompilerGeneratedAttribute]
public bool get_IsNUnit26OrLater();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("NUnit.TestCaseResultPropertyDuplicatesExpectedResult", "CSHARP")]
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.NUnitTestCaseResultPropertyDuplicatesExpectedResultWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private IPropertyAssignment <Property>k__BackingField;
    public IPropertyAssignment Property { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public NUnitTestCaseResultPropertyDuplicatesExpectedResultWarning(IPropertyAssignment property);
    [CompilerGeneratedAttribute]
public IPropertyAssignment get_Property();
    public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("NUnit.TestCaseResultPropertyIsObsolete", "CSHARP")]
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.NUnitTestCaseResultPropertyIsObsoleteWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private IPropertyAssignment <Property>k__BackingField;
    public IPropertyAssignment Property { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public NUnitTestCaseResultPropertyIsObsoleteWarning(IPropertyAssignment property);
    [CompilerGeneratedAttribute]
public IPropertyAssignment get_Property();
    public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("NUnit.TestCaseSourceMustBeFieldPropertyMethod", "CSHARP")]
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.NUnitTestCaseSourceMustBeFieldPropertyMethodWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private ICSharpExpression <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MemberName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public ICSharpExpression Expression { get; }
    public string MemberName { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public NUnitTestCaseSourceMustBeFieldPropertyMethodWarning(ICSharpExpression expression, string memberName);
    [CompilerGeneratedAttribute]
public ICSharpExpression get_Expression();
    [CompilerGeneratedAttribute]
public string get_MemberName();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("NUnit.TestCaseSourceMustBeStatic", "CSHARP")]
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.NUnitTestCaseSourceMustBeStaticWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private ICSharpExpression <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private ICSharpTypeMemberDeclaration <MemberDeclaration>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanFixSafe>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public ICSharpExpression Expression { get; }
    public ICSharpTypeMemberDeclaration MemberDeclaration { get; }
    public bool CanFixSafe { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public NUnitTestCaseSourceMustBeStaticWarning(ICSharpExpression expression, ICSharpTypeMemberDeclaration memberDeclaration, bool canFixSafe);
    [CompilerGeneratedAttribute]
public ICSharpExpression get_Expression();
    [CompilerGeneratedAttribute]
public ICSharpTypeMemberDeclaration get_MemberDeclaration();
    [CompilerGeneratedAttribute]
public bool get_CanFixSafe();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ConfigurableSeverityHighlightingAttribute("NUnit.TestCaseSourceShouldImplementIEnumerable", "CSHARP")]
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.NUnitTestCaseSourceShouldImplementIEnumerableWarning : object {
    private static string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private ICSharpExpression <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ValueIsType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ValueText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MemberName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public ICSharpExpression Value { get; }
    public bool ValueIsType { get; }
    public string ValueText { get; }
    public string MemberName { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public NUnitTestCaseSourceShouldImplementIEnumerableWarning(ICSharpExpression value, bool valueIsType, string valueText, string memberName);
    [CompilerGeneratedAttribute]
public ICSharpExpression get_Value();
    [CompilerGeneratedAttribute]
public bool get_ValueIsType();
    [CompilerGeneratedAttribute]
public string get_ValueText();
    [CompilerGeneratedAttribute]
public string get_MemberName();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    protected string BuildTooltip();
    public sealed virtual bool IsValid();
}
[HighlightingSourceAttribute]
internal class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.NUnitTestMethodAnalysisSession : object {
    [NotNullAttribute]
private IHighlightingConsumer myConsumer;
    [NotNullAttribute]
private IExpectedResultValidatorProvider myExpectedResultValidatorProvider;
    [NotNullAttribute]
private IMethodDeclaration myMethodDeclaration;
    [NotNullAttribute]
private NUnitVersion myNUnitVersion;
    [NotNullAttribute]
private NUnitParameterAttributeProvider myParameterAttributeProvider;
    [NotNullAttribute]
private IParameterAttributesValidatorProvider myParameterAttributesValidatorProvider;
    [NotNullAttribute]
private ITestCaseOrValueSourceAttributeValidatorProvider mySourceValidatorProvider;
    [NotNullAttribute]
private ITestCaseParametersValidatorProvider myTestCaseParametersValidatorProvider;
    private NUnitTestMethodAnalysisSession(IMethod method, IMethodDeclaration methodDeclaration, IHighlightingConsumer consumer, FrameworkTypeProvider typeProvider, INUnitSimulatorProvider simulatorProvider, NUnitVersion nUnitVersion, int testCountLimit);
    private static bool NoSession(NUnitTestMethodAnalysisSession& session);
    public static bool TryCreate(IMethodDeclaration methodDeclaration, IHighlightingConsumer consumer, INUnitSimulatorProvider simulatorProvider, INUnitSettingsProvider settingsProvider, NUnitTestMethodAnalysisSession& session);
    public void Run();
}
[ElementProblemAnalyzerAttribute("0", "Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.NUnitTestMethodAnalyzer : ElementProblemAnalyzer`1<IMethodDeclaration> {
    [NotNullAttribute]
private Lazy`1<INUnitSimulatorProvider> myNUnitSimulatorProvider;
    [NotNullAttribute]
private INUnitSettingsProvider mySettingsProvider;
    public NUnitTestMethodAnalyzer(Lifetime lifetime, INUnitSettingsProvider settingsProvider);
    protected virtual void Run(IMethodDeclaration methodDeclaration, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.NUnitVersion : object {
    [CompilerGeneratedAttribute]
private NUnitGeneration <Generation>k__BackingField;
    public NUnitGeneration Generation { get; private set; }
    [NotNullAttribute]
public static NUnitVersion Undefined { get; }
    public bool IsDefined { get; }
    public bool IsNUnit26 { get; }
    public bool IsNUnit26OrLater { get; }
    public bool IsNUnit3OrLater { get; }
    public bool IsNUnit36OrLater { get; }
    public bool IsNUnit40OrLater { get; }
    private NUnitVersion(NUnitGeneration generation);
    [CompilerGeneratedAttribute]
public NUnitGeneration get_Generation();
    [CompilerGeneratedAttribute]
private void set_Generation(NUnitGeneration value);
    public static NUnitVersion get_Undefined();
    public bool get_IsDefined();
    public bool get_IsNUnit26();
    public bool get_IsNUnit26OrLater();
    public bool get_IsNUnit3OrLater();
    public bool get_IsNUnit36OrLater();
    public bool get_IsNUnit40OrLater();
    [NotNullAttribute]
public static NUnitVersion Create(Version version);
    [NotNullAttribute]
public static NUnitVersion Create(NUnitGeneration generation);
    public void Refine(NUnitGeneration generation);
    public int GetSupportedMajorVersion();
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.NUnitWarningsQuickFixRegistration : object {
    public IEnumerable`1<Type> Dependencies { get; }
    public sealed virtual IEnumerable`1<Type> get_Dependencies();
    public sealed virtual void Register(IQuickFixesRegistrar table);
}
public interface JetBrains.ReSharper.UnitTesting.Analysis.nUnit.Parameters.IParameterAttributesValidator {
    public abstract virtual void Validate(bool expectCombinations);
}
public interface JetBrains.ReSharper.UnitTesting.Analysis.nUnit.Parameters.IParameterAttributesValidatorProvider {
    [NotNullAttribute]
public abstract virtual IParameterAttributesValidator GetValidator();
}
[HighlightingSourceAttribute]
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.Parameters.ParameterAttributesValidator : object {
    [NotNullAttribute]
private ICombinationsValidatorProvider myCombinationsValidatorProvider;
    [NotNullAttribute]
private IHighlightingConsumer myConsumer;
    [NotNullAttribute]
private IMethod myMethod;
    [NotNullAttribute]
private IMethodDeclaration myMethodDeclaration;
    [NotNullAttribute]
private NUnitVersion myNUnitVersion;
    private int myTestCountLimit;
    public ParameterAttributesValidator(IHighlightingConsumer consumer, IMethod method, IMethodDeclaration methodDeclaration, ICombinationsValidatorProvider combinationsValidatorProvider, NUnitVersion nUnitVersion, int testCountLimit);
    public sealed virtual void Validate(bool expectCombinations);
    private void CheckAttribute(ICombinationsValidator validator, IAttribute attribute, int testCountLimit);
}
[HighlightingSourceAttribute]
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.Parameters.ParameterAttributesValidatorProvider : object {
    [NotNullAttribute]
private Lazy`1<IParameterAttributesValidator> myValidator;
    public ParameterAttributesValidatorProvider(IMethod method, IMethodDeclaration methodDeclaration, IHighlightingConsumer consumer, ICombinationsValidatorProvider combinationsValidatorProvider, NUnitVersion nUnitVersion, int testCountLimit);
    public sealed virtual IParameterAttributesValidator GetValidator();
}
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.ProvideValuesFix : QuickFixBase {
    [NotNullAttribute]
private IMethodDeclaration myMethodDeclaration;
    [NotNullAttribute]
private INUnitParameterAttributeProvider myParameterAttributeProvider;
    public string Text { get; }
    internal ProvideValuesFix(IMethodDeclaration methodDeclaration);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private ITypeElement FindValuesAttributeTypeElement();
    private bool HasValueOrValueSourceAttribute(IParameter parameter);
}
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.QuickFixes.AddCancelAfterAttributeFix : QuickFixBase {
    [NotNullAttribute]
private ITypeMemberRegularParameterDeclaration myParameterDeclaration;
    public string Text { get; }
    internal AddCancelAfterAttributeFix(ITypeMemberRegularParameterDeclaration parameterDeclaration);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static HotspotInfo CreateHotSpotInfo(int placeholderIndex, ICSharpExpression argumentValueExpression);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.QuickFixes.AddExpectedResultFix : QuickFixBase {
    [NotNullAttribute]
private IAttribute myAttribute;
    [NotNullAttribute]
private IMethodDeclaration myMethodDeclaration;
    [NotNullAttribute]
private NUnitVersion myNUnitVersion;
    public string Text { get; }
    public AddExpectedResultFix(IMethodDeclaration methodDeclaration, IAttribute attribute, bool isNUnit26OrLater);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    private bool IsMethodReturnTypeValid();
    [NotNullAttribute]
private ConstantValue GetDefaultReturnValue(IMethod method);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private bool HasExpectedResult(IAttribute attribute);
}
[ContextActionAttribute]
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.QuickFixes.AddTestCaseAttributeAction : object {
    [NotNullAttribute]
private static SubmenuAnchor ourSubmenuAnchor;
    [NotNullAttribute]
private ICSharpContextActionDataProvider myDataProvider;
    public AddTestCaseAttributeAction(ICSharpContextActionDataProvider dataProvider);
    private static AddTestCaseAttributeAction();
    public sealed virtual bool IsAvailable(IUserDataHolder cache);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.UnitTesting.Analysis.nUnit.QuickFixes.AddTestCaseAttributeAction/<CreateBulbItems>d__4")]
public sealed virtual IEnumerable`1<IntentionAction> CreateBulbItems();
    private IAttribute GetAttributeToInsertAfter(IMethodDeclaration methodDeclaration);
    private static bool IsTestMethodAccepted(IMethodDeclaration methodDeclaration);
    private static bool AllParametersWithoutDataSources(IMethodDeclaration methodDeclaration);
}
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.QuickFixes.AddTestCaseAttributeFix : QuickFixBase {
    [CanBeNullAttribute]
private IAttribute myAttributeToInsertAfter;
    [NotNullAttribute]
private NUnitVersion myNUnitVersion;
    [NotNullAttribute]
private IMethodDeclaration myMethodDeclaration;
    public string Text { get; }
    internal AddTestCaseAttributeFix(IMethodDeclaration methodDeclaration, IAttribute attributeToInsertAfter, NUnitVersion nUnitVersion);
    internal AddTestCaseAttributeFix(IMethodDeclaration methodDeclaration, NUnitVersion nUnitVersion);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    [CanBeNullAttribute]
private IAttribute GetLastAttribute();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    private static HotspotInfo CreateHotSpotInfo(int placeholderIndex, ICSharpExpression argumentValueExpression);
    private ITypeElement FindTestCaseAttributeTypeElement();
}
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.QuickFixes.ConvertToExpectedResultFix : QuickFixBase {
    private ICSharpArgument myArgument;
    private string myExpectedResultPropertyName;
    public string Text { get; }
    public ConvertToExpectedResultFix(ICSharpArgument argument, string expectedResultPropertyName);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.QuickFixes.MarkTestClassWithTestFixtureAttributeFix : QuickFixBase {
    [NotNullAttribute]
private ICSharpTypeDeclaration myClassDeclaration;
    public string Text { get; }
    public MarkTestClassWithTestFixtureAttributeFix(ICSharpTypeDeclaration classDeclaration);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.QuickFixes.MarkTestMethodWithTestAttributeFix : QuickFixBase {
    [NotNullAttribute]
private IMethodDeclaration myMethodDeclaration;
    public string Text { get; }
    public MarkTestMethodWithTestAttributeFix(IMethodDeclaration methodDeclaration);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.QuickFixes.NUnitMakeStaticFix : MakeStaticFix {
    private bool myCanFixSafe;
    public NUnitMakeStaticFix(IDeclaredElement typeMember, bool canFixSafe);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public interface JetBrains.ReSharper.UnitTesting.Analysis.nUnit.Random.IRandomHighlightingReporter {
    public abstract virtual void ReportInvalidTypeCast(IType attributeDataType, IType parameterType);
    public abstract virtual void ReportTooManyTests(int testCountLimit, int testCount);
    public abstract virtual void ReportMinValueOutOfRange(object minValue);
    public abstract virtual void ReportMaxValueOutOfRange(object maxValue);
    public abstract virtual void ReportNoValues(int testCount, string comment);
}
public interface JetBrains.ReSharper.UnitTesting.Analysis.nUnit.Random.IRandomValuesValidator {
    public abstract virtual void Validate(Nullable`1<int> testCount, IType parameterType, int testCountLimit, IRandomHighlightingReporter reporter);
    public abstract virtual void Validate(IType attributeType, object minValue, object maxValue, Nullable`1<int> testCount, IType parameterType, int testCountLimit, IRandomHighlightingReporter reporter);
}
public interface JetBrains.ReSharper.UnitTesting.Analysis.nUnit.Random.IRandomValuesValidatorProvider {
    [NotNullAttribute]
public abstract virtual IRandomValuesValidator GetValidator(NUnitVersion nUnitVersion);
    [NotNullAttribute]
public abstract virtual IRandomHighlightingReporter GetReporter(IParameter parameter, IAttribute attribute, ICombinationsReporter reporter);
}
[HighlightingSourceAttribute]
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.Random.RandomHighlightingReporter : object {
    [NotNullAttribute]
private IAttribute myAttribute;
    [NotNullAttribute]
private ICombinationsReporter myCombinationsReporter;
    [NotNullAttribute]
private IHighlightingConsumer myConsumer;
    [NotNullAttribute]
private IParameter myParameter;
    private bool myInvalidTypeCastReported;
    [CompilerGeneratedAttribute]
private ulong <TestCount>k__BackingField;
    public ulong TestCount { get; private set; }
    public RandomHighlightingReporter(IHighlightingConsumer consumer, IParameter parameter, IAttribute attribute, ICombinationsReporter combinationsReporter);
    public sealed virtual void ReportTestCount(ulong testCount);
    [CompilerGeneratedAttribute]
public sealed virtual ulong get_TestCount();
    [CompilerGeneratedAttribute]
private void set_TestCount(ulong value);
    public sealed virtual void ReportInvalidTypeCast(IType attributeDataType, IType parameterType);
    public sealed virtual void ReportTooManyTests(int testCountLimit, int testCount);
    public sealed virtual void ReportMinValueOutOfRange(object minValue);
    public sealed virtual void ReportMaxValueOutOfRange(object maxValue);
    public sealed virtual void ReportNoValues(int testCount, string comment);
}
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.Random.RandomValues2XValidator : RandomValuesValidatorBase {
    [NotNullAttribute]
private PredefinedType myPredefinedType;
    public RandomValues2XValidator(INUnitSimulator nUnitSimulator, PredefinedType predefinedType, ICSharpTypeConversionRule typeConversionRule, FrameworkTypeProvider typeProvider, INonTypedArithmeticOperations operations);
    protected virtual bool ValidateCustomConversions(IType attributeType, IType parameterType, IRandomHighlightingReporter reporter);
    protected virtual bool ValidateDefaultCustomConversions(IType attributeDataType, IType parameterType, IRandomHighlightingReporter reporter);
    protected virtual bool IsImplicitlySupportedDataType(IType parameterType);
    protected virtual IType GetDefaultAttributeDataType(IType parameterType);
    protected virtual bool IsSupportedArgumentType(IType type);
}
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.Random.RandomValues3XValidator : RandomValuesValidatorBase {
    [NotNullAttribute]
private PredefinedType myPredefinedType;
    public RandomValues3XValidator(INUnitSimulator nUnitSimulator, PredefinedType predefinedType, ICSharpTypeConversionRule typeConversionRule, FrameworkTypeProvider typeProvider, INonTypedArithmeticOperations operations);
    protected virtual IType GetDefaultAttributeDataType(IType parameterType);
    protected virtual bool IsSupportedArgumentType(IType type);
    protected virtual bool ValidateCustomConversions(IType attributeType, IType parameterType, IRandomHighlightingReporter reporter);
    protected virtual bool ValidateDefaultCustomConversions(IType attributeDataType, IType parameterType, IRandomHighlightingReporter reporter);
    protected virtual bool IsImplicitlySupportedDataType(IType parameterType);
}
public abstract class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.Random.RandomValuesValidatorBase : object {
    [NotNullAttribute]
private INUnitSimulator myNUnitSimulator;
    [NotNullAttribute]
private INonTypedArithmeticOperations myOperations;
    [NotNullAttribute]
private ICSharpTypeConversionRule myTypeConversionRule;
    [NotNullAttribute]
private FrameworkTypeProvider myTypeProvider;
    protected RandomValuesValidatorBase(INUnitSimulator nUnitSimulator, ICSharpTypeConversionRule typeConversionRule, FrameworkTypeProvider typeProvider, INonTypedArithmeticOperations operations);
    public sealed virtual void Validate(Nullable`1<int> testCount, IType parameterType, int testCountLimit, IRandomHighlightingReporter reporter);
    public sealed virtual void Validate(IType attributeType, object minValue, object maxValue, Nullable`1<int> testCount, IType parameterType, int testCountLimit, IRandomHighlightingReporter reporter);
    protected bool TryGetType(IType iType, Type& frameworkType);
    protected abstract virtual bool ValidateDefaultCustomConversions(IType attributeDataType, IType parameterType, IRandomHighlightingReporter reporter);
    protected abstract virtual bool ValidateCustomConversions(IType attributeType, IType parameterType, IRandomHighlightingReporter reporter);
    protected abstract virtual bool IsImplicitlySupportedDataType(IType parameterType);
    [NotNullAttribute]
protected abstract virtual IType GetDefaultAttributeDataType(IType parameterType);
    protected abstract virtual bool IsSupportedArgumentType(IType type);
    private void CheckTestCount(Nullable`1<int> testCount, int testCountLimit, IRandomHighlightingReporter reporter);
    protected bool IsConvertible(IType actualType, IType expectedType);
}
[HighlightingSourceAttribute]
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.Random.RandomValuesValidatorProvider : object {
    [NotNullAttribute]
private IHighlightingConsumer myConsumer;
    [NotNullAttribute]
private Lazy`1<IRandomValuesValidator> myInstance2X;
    [NotNullAttribute]
private Lazy`1<IRandomValuesValidator> myInstance3X;
    public RandomValuesValidatorProvider(IHighlightingConsumer consumer, INUnitSimulatorProvider simulatorProvider, PredefinedType predefinedType, ICSharpTypeConversionRule typeConversionRule, FrameworkTypeProvider typeProvider, INonTypedArithmeticOperations operations);
    public sealed virtual IRandomValuesValidator GetValidator(NUnitVersion nUnitVersion);
    public sealed virtual IRandomHighlightingReporter GetReporter(IParameter parameter, IAttribute attribute, ICombinationsReporter reporter);
}
internal class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.Ranges.Arithmetic.ArithmeticOperationsProvider : object {
    [NotNullAttribute]
private IDictionary`2<Type, object> myOperationFactories;
    public sealed virtual bool TryGetOperations(IArithmeticOperations`1& operations);
    public sealed virtual IArithmeticOperations`1<T> GetOperations();
}
internal class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.Ranges.Arithmetic.ByteArithmeticOperations : object {
    public byte Zero { get; }
    public sealed virtual byte get_Zero();
    public sealed virtual byte GetValue(long value);
    public sealed virtual byte Sub(byte x, byte y);
    public sealed virtual byte Add(byte x, byte y);
    public sealed virtual int Compare(byte x, byte y);
    public sealed virtual byte GetRemainder(byte dividend, byte divider);
    public sealed virtual long GetQuotient(byte dividend, byte divider);
}
internal class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.Ranges.Arithmetic.DoubleArithmeticOperations : object {
    private static double Epsilon;
    public double Zero { get; }
    public sealed virtual double get_Zero();
    public sealed virtual double GetValue(long value);
    public sealed virtual double Sub(double x, double y);
    public sealed virtual double Add(double x, double y);
    public sealed virtual int Compare(double x, double y);
    public sealed virtual double GetRemainder(double dividend, double divider);
    public sealed virtual long GetQuotient(double dividend, double divider);
}
internal class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.Ranges.Arithmetic.FloatArithmeticOperations : object {
    private static double Epsilon;
    public float Zero { get; }
    public sealed virtual float get_Zero();
    public sealed virtual float GetValue(long value);
    public sealed virtual float Sub(float x, float y);
    public sealed virtual float Add(float x, float y);
    public sealed virtual int Compare(float x, float y);
    public sealed virtual float GetRemainder(float dividend, float divider);
    public sealed virtual long GetQuotient(float dividend, float divider);
}
public interface JetBrains.ReSharper.UnitTesting.Analysis.nUnit.Ranges.Arithmetic.IArithmeticOperations`1 {
    public T Zero { get; }
    public abstract virtual T get_Zero();
    public abstract virtual T GetValue(long value);
    public abstract virtual T Sub(T x, T y);
    public abstract virtual T Add(T x, T y);
    public abstract virtual int Compare(T x, T y);
    public abstract virtual T GetRemainder(T dividend, T divider);
    public abstract virtual long GetQuotient(T dividend, T divider);
}
public interface JetBrains.ReSharper.UnitTesting.Analysis.nUnit.Ranges.Arithmetic.IArithmeticOperationsProvider {
    public abstract virtual bool TryGetOperations(IArithmeticOperations`1& operations);
    [NotNullAttribute]
public abstract virtual IArithmeticOperations`1<T> GetOperations();
}
public interface JetBrains.ReSharper.UnitTesting.Analysis.nUnit.Ranges.Arithmetic.INonTypedArithmeticOperations {
    public abstract virtual int Compare(object x, object y);
}
internal class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.Ranges.Arithmetic.IntArithmeticOperations : object {
    public int Zero { get; }
    public sealed virtual int get_Zero();
    public sealed virtual int GetValue(long value);
    public sealed virtual int Sub(int x, int y);
    public sealed virtual int Add(int x, int y);
    public sealed virtual int Compare(int x, int y);
    public sealed virtual int GetRemainder(int dividend, int divider);
    public sealed virtual long GetQuotient(int dividend, int divider);
}
internal class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.Ranges.Arithmetic.LongArithmeticOperations : object {
    public long Zero { get; }
    public sealed virtual long get_Zero();
    public sealed virtual long GetValue(long value);
    public sealed virtual long Sub(long x, long y);
    public sealed virtual long Add(long x, long y);
    public sealed virtual int Compare(long x, long y);
    public sealed virtual long GetRemainder(long dividend, long divider);
    public sealed virtual long GetQuotient(long dividend, long divider);
}
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.Ranges.Arithmetic.NonTypedArithmeticOperations : object {
    [NotNullAttribute]
private IArithmeticOperationsProvider myOperationsProvider;
    public NonTypedArithmeticOperations(IArithmeticOperationsProvider operationsProvider);
    public sealed virtual int Compare(object x, object y);
    private int Compare(T x, T y);
}
internal class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.Ranges.Arithmetic.SByteArithmeticOperations : object {
    public sbyte Zero { get; }
    public sealed virtual sbyte get_Zero();
    public sealed virtual sbyte GetValue(long value);
    public sealed virtual sbyte Sub(sbyte x, sbyte y);
    public sealed virtual sbyte Add(sbyte x, sbyte y);
    public sealed virtual int Compare(sbyte x, sbyte y);
    public sealed virtual sbyte GetRemainder(sbyte dividend, sbyte divider);
    public sealed virtual long GetQuotient(sbyte dividend, sbyte divider);
}
internal class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.Ranges.Arithmetic.ShortArithmeticOperations : object {
    public short Zero { get; }
    public sealed virtual short get_Zero();
    public sealed virtual short GetValue(long value);
    public sealed virtual short Sub(short x, short y);
    public sealed virtual short Add(short x, short y);
    public sealed virtual int Compare(short x, short y);
    public sealed virtual short GetRemainder(short dividend, short divider);
    public sealed virtual long GetQuotient(short dividend, short divider);
}
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.Ranges.Arithmetic.UIntArithmeticOperations : object {
    public UInt32 Zero { get; }
    public sealed virtual UInt32 get_Zero();
    public sealed virtual UInt32 GetValue(long value);
    public sealed virtual UInt32 Sub(UInt32 x, UInt32 y);
    public sealed virtual UInt32 Add(UInt32 x, UInt32 y);
    public sealed virtual int Compare(UInt32 x, UInt32 y);
    public sealed virtual UInt32 GetRemainder(UInt32 dividend, UInt32 divider);
    public sealed virtual long GetQuotient(UInt32 dividend, UInt32 divider);
}
internal class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.Ranges.Arithmetic.ULongArithmeticOperations : object {
    public ulong Zero { get; }
    public sealed virtual ulong get_Zero();
    public sealed virtual ulong GetValue(long value);
    public sealed virtual ulong Sub(ulong x, ulong y);
    public sealed virtual ulong Add(ulong x, ulong y);
    public sealed virtual int Compare(ulong x, ulong y);
    public sealed virtual ulong GetRemainder(ulong dividend, ulong divider);
    public sealed virtual long GetQuotient(ulong dividend, ulong divider);
}
internal class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.Ranges.Arithmetic.UShortArithmeticOperations : object {
    public ushort Zero { get; }
    public sealed virtual ushort get_Zero();
    public sealed virtual ushort GetValue(long value);
    public sealed virtual ushort Sub(ushort x, ushort y);
    public sealed virtual ushort Add(ushort x, ushort y);
    public sealed virtual int Compare(ushort x, ushort y);
    public sealed virtual ushort GetRemainder(ushort dividend, ushort divider);
    public sealed virtual long GetQuotient(ushort dividend, ushort divider);
}
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.Ranges.Formatters.DoubleValueFormatter : object {
    public sealed virtual string Format(double value);
}
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.Ranges.Formatters.FloatValueFormatter : object {
    public sealed virtual string Format(float value);
}
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.Ranges.Formatters.IntValueFormatter : object {
    public sealed virtual string Format(int value);
}
public interface JetBrains.ReSharper.UnitTesting.Analysis.nUnit.Ranges.Formatters.IValueFormatter`1 {
    public abstract virtual string Format(T value);
}
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.Ranges.Formatters.LongValueFormatter : object {
    public sealed virtual string Format(long value);
}
public interface JetBrains.ReSharper.UnitTesting.Analysis.nUnit.Ranges.IRangeHighlightingReporter {
    public abstract virtual void ReportStepZeroWarning();
    public abstract virtual void ReportOutOfRangeFrom();
    public abstract virtual void ReportInvalidTypeCastFrom();
    public abstract virtual void ReportOutOfRangeTo();
    public abstract virtual void ReportInvalidTypeCastTo();
    public abstract virtual void ReportTooManyTests(ulong expected, ulong actual);
    public abstract virtual void ReportNotReachableTo(string actual, string expectedValue);
    public abstract virtual void ReportToValueMustBeGreaterThanToValue();
    public abstract virtual void ReportStepValueShouldBePositive();
    public abstract virtual void ReportStepValueShouldBeNegative();
}
public interface JetBrains.ReSharper.UnitTesting.Analysis.nUnit.Ranges.IRangeValuesValidator {
    public abstract virtual void Validate(Type rangeArgumentType, object fromValue, object toValue, object stepValue, Type parameterType, int testCountLimit, IRangeHighlightingReporter reporter);
    public abstract virtual void Validate(Type rangeArgumentType, object fromValue, object toValue, Type parameterType, int testCountLimit, IRangeHighlightingReporter reporter);
}
public interface JetBrains.ReSharper.UnitTesting.Analysis.nUnit.Ranges.IRangeValuesValidator`1 {
    public abstract virtual void Validate(Nullable`1<T> fromValue, Nullable`1<T> toValue, Nullable`1<T> stepValue, Type parameterType, int testCountLimit, IRangeHighlightingReporter reporter);
    public abstract virtual void Validate(Nullable`1<T> fromValue, Nullable`1<T> toValue, Type parameterType, int testCountLimit, IRangeHighlightingReporter reporter);
}
public interface JetBrains.ReSharper.UnitTesting.Analysis.nUnit.Ranges.IRangeValuesValidatorProvider {
    [NotNullAttribute]
public abstract virtual IRangeValuesValidator GetValidator(NUnitVersion nUnitVersion);
    [NotNullAttribute]
public abstract virtual IRangeHighlightingReporter GetReporter(IParameter parameter, IAttribute attribute, IType attributeDataType, ICombinationsReporter combinationsReporter);
}
internal class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.Ranges.Range2XValuesValidator`1 : RangeValuesValidatorBase`1<T> {
    internal Range2XValuesValidator`1(IArithmeticOperations`1<T> operations, IValueFormatter`1<T> valueFormatter, INUnitSimulator nUnitSimulator);
    public virtual void Validate(Nullable`1<T> fromValue, Nullable`1<T> toValue, Nullable`1<T> stepValue, Type parameterType, int testCountLimit, IRangeHighlightingReporter reporter);
    public virtual void Validate(Nullable`1<T> fromValue, Nullable`1<T> toValue, Type parameterType, int testCountLimit, IRangeHighlightingReporter reporter);
    private T GetLatestRangeValue(T fromValue, T toValue, T stepValue);
}
internal class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.Ranges.Range3XValuesValidator`1 : RangeValuesValidatorBase`1<T> {
    internal Range3XValuesValidator`1(IArithmeticOperations`1<T> operations, IValueFormatter`1<T> valueFormatter, INUnitSimulator nUnitSimulator);
    public virtual void Validate(Nullable`1<T> fromValue, Nullable`1<T> toValue, Nullable`1<T> stepValue, Type parameterType, int testCountLimit, IRangeHighlightingReporter reporter);
    public virtual void Validate(Nullable`1<T> fromValue, Nullable`1<T> toValue, Type parameterType, int testCountLimit, IRangeHighlightingReporter reporter);
}
[HighlightingSourceAttribute]
internal class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.Ranges.RangeHighlightingReporter : object {
    [NotNullAttribute]
private IHighlightingConsumer myConsumer;
    [NotNullAttribute]
private IParameterDeclaration myParameterDeclaration;
    [NotNullAttribute]
private ITypeMemberRegularParameterDeclaration myRegularParameterDeclaration;
    [NotNullAttribute]
private IAttribute myRangeAttribute;
    [NotNullAttribute]
private IType myRangeArgumentType;
    [NotNullAttribute]
private ICombinationsReporter myCombinationsReporter;
    private bool myIncorrectParameterTypeReported;
    [CompilerGeneratedAttribute]
private ulong <TestCount>k__BackingField;
    private ICSharpArgument FromArgument { get; }
    private ICSharpArgument ToArgument { get; }
    private ICSharpArgument StepArgument { get; }
    public ulong TestCount { get; private set; }
    public RangeHighlightingReporter(IHighlightingConsumer consumer, IParameterDeclaration parameterDeclaration, ITypeMemberRegularParameterDeclaration regularParameterDeclaration, IAttribute rangeAttribute, IType rangeArgumentType, ICombinationsReporter combinationsReporter);
    private ICSharpArgument get_FromArgument();
    private ICSharpArgument get_ToArgument();
    private ICSharpArgument get_StepArgument();
    public sealed virtual void ReportTestCount(ulong testCount);
    [CompilerGeneratedAttribute]
public sealed virtual ulong get_TestCount();
    [CompilerGeneratedAttribute]
private void set_TestCount(ulong value);
    public sealed virtual void ReportStepZeroWarning();
    public sealed virtual void ReportOutOfRangeFrom();
    public sealed virtual void ReportInvalidTypeCastFrom();
    public sealed virtual void ReportOutOfRangeTo();
    public sealed virtual void ReportInvalidTypeCastTo();
    public sealed virtual void ReportTooManyTests(ulong expected, ulong actual);
    public sealed virtual void ReportNotReachableTo(string actualValue, string expectedValue);
    public sealed virtual void ReportToValueMustBeGreaterThanToValue();
    public sealed virtual void ReportStepValueShouldBePositive();
    public sealed virtual void ReportStepValueShouldBeNegative();
}
internal class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.Ranges.RangeValuesValidator : object {
    [NotNullAttribute]
private IRangeValuesValidator`1<double> myRangeDoubleValuesValidator;
    [NotNullAttribute]
private IRangeValuesValidator`1<float> myRangeFloatValuesValidator;
    [NotNullAttribute]
private IRangeValuesValidator`1<int> myRangeIntValuesValidator;
    [NotNullAttribute]
private IRangeValuesValidator`1<long> myRangeLongValuesValidator;
    public RangeValuesValidator(IRangeValuesValidator`1<double> rangeDoubleValuesValidator, IRangeValuesValidator`1<float> rangeFloatValuesValidator, IRangeValuesValidator`1<int> rangeIntValuesValidator, IRangeValuesValidator`1<long> rangeLongValuesValidator);
    public sealed virtual void Validate(Type rangeArgumentType, object fromValue, object toValue, object stepValue, Type parameterType, int testCountLimit, IRangeHighlightingReporter reporter);
    public sealed virtual void Validate(Type rangeArgumentType, object fromValue, object toValue, Type parameterType, int testCountLimit, IRangeHighlightingReporter reporter);
}
internal abstract class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.Ranges.RangeValuesValidatorBase`1 : object {
    [NotNullAttribute]
protected IArithmeticOperations`1<T> ArithmeticOperations;
    [NotNullAttribute]
private INUnitSimulator myNUnitSimulator;
    [NotNullAttribute]
protected IValueFormatter`1<T> ValueFormatter;
    protected RangeValuesValidatorBase`1(IArithmeticOperations`1<T> operations, IValueFormatter`1<T> valueFormatter, INUnitSimulator nUnitSimulator);
    public abstract virtual void Validate(Nullable`1<T> fromValue, Nullable`1<T> toValue, Nullable`1<T> stepValue, Type parameterType, int testCountLimit, IRangeHighlightingReporter reporter);
    public abstract virtual void Validate(Nullable`1<T> fromValue, Nullable`1<T> toValue, Type parameterType, int testCountLimit, IRangeHighlightingReporter reporter);
    protected void TryConvertFrom(Nullable`1<T> fromValue, Type parameterType, IRangeHighlightingReporter reporter);
    protected void TryConvertTo(Nullable`1<T> toValue, Type parameterType, IRangeHighlightingReporter reporter);
    protected ulong GetTestCount(T fromValue, T toValue, T stepValue);
}
[HighlightingSourceAttribute]
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.Ranges.RangeValuesValidatorProvider : object {
    [NotNullAttribute]
private IHighlightingConsumer myConsumer;
    [NotNullAttribute]
private Lazy`1<IRangeValuesValidator> myInstance2X;
    [NotNullAttribute]
private Lazy`1<IRangeValuesValidator> myInstance3X;
    [NotNullAttribute]
private Lazy`1<IValueFormatter`1<double>> myDoubleValueFormatter;
    [NotNullAttribute]
private Lazy`1<IValueFormatter`1<float>> myFloatValueFormatter;
    [NotNullAttribute]
private Lazy`1<IValueFormatter`1<int>> myIntValueFormatter;
    [NotNullAttribute]
private Lazy`1<IValueFormatter`1<long>> myLongValueFormatter;
    public RangeValuesValidatorProvider(IHighlightingConsumer consumer, INUnitSimulatorProvider simulatorProvider, IArithmeticOperationsProvider operationsProvider);
    public sealed virtual IRangeValuesValidator GetValidator(NUnitVersion nUnitVersion);
    public sealed virtual IRangeHighlightingReporter GetReporter(IParameter parameter, IAttribute attribute, IType attributeDataType, ICombinationsReporter combinationsReporter);
}
[RegisterConfigurableSeverityAttribute("NUnit.NonPublicMethodWithTestAttribute", "", "", "", "NUnit", "", "JetBrains.ReSharper.UnitTesting.Analysis.Resources.Strings", "NUnitNonPublicTestMethod", "", "JetBrains.ReSharper.UnitTesting.Analysis.Resources.Strings", "NUnitTestMethodsMustHavePublicVisibility", "4")]
[RegisterConfigurableSeverityAttribute("NUnit.MethodWithParametersAndTestAttribute", "", "", "", "NUnit", "", "JetBrains.ReSharper.UnitTesting.Analysis.Resources.Strings", "NUnitValuesForTestMethodParametersAreNotProvided", "", "JetBrains.ReSharper.UnitTesting.Analysis.Resources.Strings", "ParametersOfNUnitTestMethodMustBeProvidedWithValuesThroughEitherValuesOrTestCaseAttribute", "4")]
[RegisterConfigurableSeverityAttribute("NUnit.TestCaseAttributeRequiresExpectedResult", "", "", "", "NUnit", "", "JetBrains.ReSharper.UnitTesting.Analysis.Resources.Strings", "NUnitMissingExpectedResultForNonVoidTestMethod", "", "JetBrains.ReSharper.UnitTesting.Analysis.Resources.Strings", "ExpectedResultOfACompatibleTypeMustBeProvidedForNonVoidNUnitTestMethodsThroughTheTestCaseAttribute", "4")]
[RegisterConfigurableSeverityAttribute("NUnit.RedundantExpectedResultInTestCaseAttribute", "", "", "", "NUnit", "", "JetBrains.ReSharper.UnitTesting.Analysis.Resources.Strings", "NUnitRedundantExpectedResultForVoidTestMethod", "", "JetBrains.ReSharper.UnitTesting.Analysis.Resources.Strings", "SpecifyingExpectedResultForVoidNUnitTestMethodsThroughTheTestCaseAttributeIsRedundant", "4")]
[RegisterConfigurableSeverityAttribute("NUnit.RedundantArgumentInsteadOfExpectedResult", "", "", "", "NUnit", "", "JetBrains.ReSharper.UnitTesting.Analysis.Resources.Strings", "NUnitRedundantArgumentInsteadOfExpectedResult", "", "JetBrains.ReSharper.UnitTesting.Analysis.Resources.Strings", "RedundantArgumentIsFoundInsteadOfExpectedResult", "4")]
[RegisterConfigurableSeverityAttribute("NUnit.RedundantArgumentInTestCaseAttribute", "", "", "", "NUnit", "", "JetBrains.ReSharper.UnitTesting.Analysis.Resources.Strings", "NUnitRedundantArgumentInTestCaseAttribute", "", "JetBrains.ReSharper.UnitTesting.Analysis.Resources.Strings", "AccordingToTheTestMethodSignatureTheArgumentInTheTestCaseAttributeIsRedundant", "4")]
[RegisterConfigurableSeverityAttribute("NUnit.MissingArgumentsInTestCaseAttribute", "", "", "", "NUnit", "", "JetBrains.ReSharper.UnitTesting.Analysis.Resources.Strings", "NUnitMissingArgumentsInTestCaseAttribute", "", "JetBrains.ReSharper.UnitTesting.Analysis.Resources.Strings", "AccordingToTheTestMethodSignatureThereAreMissingArgumentsInTheTestCaseAttribute", "4")]
[RegisterConfigurableSeverityAttribute("NUnit.MissingCancelAfterAttribute", "", "", "", "NUnit", "", "JetBrains.ReSharper.UnitTesting.Analysis.Resources.Strings", "NUnitMissingCancelAfterAttribute", "", "JetBrains.ReSharper.UnitTesting.Analysis.Resources.Strings", "NUnitMissingCancelAfterAttributeDescription", "4")]
[RegisterConfigurableSeverityAttribute("NUnit.AsyncMethodMustBeTask", "", "", "", "NUnit", "", "JetBrains.ReSharper.UnitTesting.Analysis.Resources.Strings", "NUnitAsyncTestMethodMustReturnTaskOrTaskT", "", "JetBrains.ReSharper.UnitTesting.Analysis.Resources.Strings", "NUnitSupportsOnlyAsyncTestMethodsThatReturnTaskOrTaskT", "4")]
[RegisterConfigurableSeverityAttribute("NUnit.IncorrectArgumentType", "", "", "", "NUnit", "", "JetBrains.ReSharper.UnitTesting.Analysis.Resources.Strings", "NUnitIncompatibleArgumentTypeOrIncorrectArgumentValue", "", "JetBrains.ReSharper.UnitTesting.Analysis.Resources.Strings", "ArgumentValueInTheTestCaseAttributeIsIncorrectOrIsNotCompatibleWithTheTestMethodParameterType", "4")]
[RegisterConfigurableSeverityAttribute("NUnit.IncorrectExpectedResultType", "", "", "", "NUnit", "", "JetBrains.ReSharper.UnitTesting.Analysis.Resources.Strings", "NUnitIncompatibleExpectedResultTypeOrIncorrectValue", "", "JetBrains.ReSharper.UnitTesting.Analysis.Resources.Strings", "ExpectedResultValueInTestCaseOrTestAttributesIsIncorrectOrIsNotCompatibleWithTheTestMethodReturnType", "4")]
[RegisterConfigurableSeverityAttribute("NUnit.TestCaseSourceMustBeStatic", "", "", "", "NUnit", "", "JetBrains.ReSharper.UnitTesting.Analysis.Resources.Strings", "NUnitTestCaseSourceMustBeStatic", "", "JetBrains.ReSharper.UnitTesting.Analysis.Resources.Strings", "NUnitTestCaseSourceFieldPropertyMethodSpecifiedInTestCaseSourceOrValuesSourceAttributesMustBeStatic", "4")]
[RegisterConfigurableSeverityAttribute("NUnit.TestCaseSourceMustBeFieldPropertyMethod", "", "", "", "NUnit", "", "JetBrains.ReSharper.UnitTesting.Analysis.Resources.Strings", "NUnitTestCaseSourceMustBeFieldPropertyOrMethod", "", "JetBrains.ReSharper.UnitTesting.Analysis.Resources.Strings", "NUnitTestCaseSourceSpecifiedInTestCaseSourceOrValueSourceAttributesMustOnlyReferToFieldPropertyOrMethod", "4")]
[RegisterConfigurableSeverityAttribute("NUnit.TestCaseSourceShouldImplementIEnumerable", "", "", "", "NUnit", "", "JetBrains.ReSharper.UnitTesting.Analysis.Resources.Strings", "NUnitTestCaseSourceMustBeNonAbstractAndImplementIEnumerable", "", "JetBrains.ReSharper.UnitTesting.Analysis.Resources.Strings", "NUnitTestCaseSourceMustReferToNonAbstractClassImplementingIEnumerable", "4")]
[RegisterConfigurableSeverityAttribute("NUnit.TestCaseResultPropertyIsObsolete", "", "", "", "NUnit", "", "JetBrains.ReSharper.UnitTesting.Analysis.Resources.Strings", "NUnitTestCaseResultPropertyIsObsolete", "", "JetBrains.ReSharper.UnitTesting.Analysis.Resources.Strings", "NUnitTestCaseResultPropertyIsObsoleteSinceNUnit", "4")]
[RegisterConfigurableSeverityAttribute("NUnit.TestCaseResultPropertyDuplicatesExpectedResult", "", "", "", "NUnit", "", "JetBrains.ReSharper.UnitTesting.Analysis.Resources.Strings", "NUnitTestCaseResultPropertyDuplicatesExpectedResult", "", "JetBrains.ReSharper.UnitTesting.Analysis.Resources.Strings", "NUnitTestCaseResultPropertyDuplicatesSpecifiedExpectedResult", "4")]
[RegisterConfigurableSeverityAttribute("NUnit.RangeStepSignMismatch", "", "", "", "NUnit", "", "JetBrains.ReSharper.UnitTesting.Analysis.Resources.Strings", "NUnitMismatchOfTheRangeStepSign", "", "JetBrains.ReSharper.UnitTesting.Analysis.Resources.Strings", "NUnitTheSignOfThestepParameterOfRangeDoesNotMatchTheRangeValues", "4")]
[RegisterConfigurableSeverityAttribute("NUnit.RangeStepValueMustNotBeZero", "", "", "", "NUnit", "", "JetBrains.ReSharper.UnitTesting.Analysis.Resources.Strings", "NUnitRangestepParameterValueMustBeNonZero", "", "JetBrains.ReSharper.UnitTesting.Analysis.Resources.Strings", "NUnitstepParameterValueOfRangeIsIncorrectItMustBeNonZero", "4")]
[RegisterConfigurableSeverityAttribute("NUnit.RangeToValueIsNotReachable", "", "", "", "NUnit", "", "JetBrains.ReSharper.UnitTesting.Analysis.Resources.Strings", "NUnitTheMaximumRangeValueIsNotReachableWithTheStepValue", "", "JetBrains.ReSharper.UnitTesting.Analysis.Resources.Strings", "NUnitTheMaximumValueOfRangeIsNotReachableCheckRangeAndStepValues", "4")]
[RegisterConfigurableSeverityAttribute("NUnit.IncorrectRangeBounds", "", "", "", "NUnit", "", "JetBrains.ReSharper.UnitTesting.Analysis.Resources.Strings", "NUnitIncorrectRangeBoundstoMustBeGreaterThanOrEqualTofrom", "", "JetBrains.ReSharper.UnitTesting.Analysis.Resources.Strings", "NUnitIncorrectRangeBoundsTheValueOftoParameterMustBeGreaterThanOrEqualTofromOrThereMustBeANegativeStep", "4")]
[RegisterConfigurableSeverityAttribute("NUnit.AttributeProducesTooManyTests", "", "", "", "NUnit", "", "JetBrains.ReSharper.UnitTesting.Analysis.Resources.Strings", "NUnitSpecifiedAttributeValuesProduceTooManyTests", "", "JetBrains.ReSharper.UnitTesting.Analysis.Resources.Strings", "NUnitValuesOfTheAttributeProduceTooManyTestsWhichMayLeadNUnitTestRunnerToOutOfMemory", "0")]
[RegisterConfigurableSeverityAttribute("NUnit.ParameterTypeIsNotCompatibleWithAttribute", "", "", "", "NUnit", "", "JetBrains.ReSharper.UnitTesting.Analysis.Resources.Strings", "NUnitSpecifiedValuesAreNotCompatibleWithTheTestParameterType", "", "JetBrains.ReSharper.UnitTesting.Analysis.Resources.Strings", "NUnitValuesSpecifiedInTheAttributeAreNotCompatibleWithTheCorrespondingTestParameterType", "4")]
[RegisterConfigurableSeverityAttribute("NUnit.RangeAttributeBoundsAreOutOfRange", "", "", "", "NUnit", "", "JetBrains.ReSharper.UnitTesting.Analysis.Resources.Strings", "NUnitValuesInRangeDoNotFitTheTypeOfTheTestParameter", "", "JetBrains.ReSharper.UnitTesting.Analysis.Resources.Strings", "NUnitValuesSpecifiedInRangeAreOutRangeForTheTypeOfTheTestParameter", "4")]
[RegisterConfigurableSeverityAttribute("NUnit.NoValuesProvided", "", "", "", "NUnit", "", "JetBrains.ReSharper.UnitTesting.Analysis.Resources.Strings", "NUnitNoValuesProvidedInTheAttributes", "", "JetBrains.ReSharper.UnitTesting.Analysis.Resources.Strings", "NUnitNoValuesAreProvidedInTheAttributeOrTheCurrentNUnitVersionDoesNotSupportAutomaticGenerationOfValuesForTheParameterType", "4")]
[RegisterConfigurableSeverityAttribute("NUnit.DuplicateValues", "", "", "", "NUnit", "", "JetBrains.ReSharper.UnitTesting.Analysis.Resources.Strings", "NUnitDuplicateValues", "", "JetBrains.ReSharper.UnitTesting.Analysis.Resources.Strings", "NUnitDuplicateValuesProduceUnnecessaryDuplicateTests", "4")]
[RegisterConfigurableSeverityAttribute("NUnit.ImplicitUnspecifiedNullValues", "", "", "", "NUnit", "", "JetBrains.ReSharper.UnitTesting.Analysis.Resources.Strings", "NUnitImplicitlyUnspecifiedNullValues", "", "JetBrains.ReSharper.UnitTesting.Analysis.Resources.Strings", "NUnitNoEnoughValuesAreProvidedInTheValuesAttributeSoNUnitImplicitlyAddsnullValuesToFillTestData", "4")]
[RegisterConfigurableSeverityAttribute("NUnit.IgnoredParameterAttribute", "", "", "", "NUnit", "", "JetBrains.ReSharper.UnitTesting.Analysis.Resources.Strings", "NUnitIgnoredParameterAttribute", "", "JetBrains.ReSharper.UnitTesting.Analysis.Resources.Strings", "NUnitParameterAttributeIsIgnoredByNUnitFramework", "4")]
[RegisterConfigurableSeverityAttribute("NUnit.AutoFixture.RedundantArgumentInInlineAutoDataAttribute", "", "", "", "NUnit", "", "JetBrains.ReSharper.UnitTesting.Analysis.Resources.Strings", "NUnitAutoFixtureRedundantArgumentInInlineAutoDataAttribute", "", "JetBrains.ReSharper.UnitTesting.Analysis.Resources.Strings", "NUnitAutoFixtureAccordingToTheTestMethodSignatureTheArgumentInTheInlineAutoDataAttributeIsRedundant", "4")]
[RegisterConfigurableSeverityAttribute("NUnit.AutoFixture.IncorrectArgumentType", "", "", "", "NUnit", "", "JetBrains.ReSharper.UnitTesting.Analysis.Resources.Strings", "NUnitAutoFixtureIncompatibleArgumentTypeOrIncorrectArgumentValue", "", "JetBrains.ReSharper.UnitTesting.Analysis.Resources.Strings", "NUnitAutoFixtureArgumentValueInTheInlineAutoDataAttributeIsIncorrectOrIsNotCompatibleWithTheTestMethodParameterType", "4")]
[RegisterConfigurableSeverityAttribute("NUnit.AutoFixture.MissedTestAttribute", "", "", "", "NUnit", "", "JetBrains.ReSharper.UnitTesting.Analysis.Resources.Strings", "NUnitAutoFixtureMissedTestAttribute", "", "JetBrains.ReSharper.UnitTesting.Analysis.Resources.Strings", "NUnitAutoFixtureMissedTestAttributeTestMethodWillNotBeRun", "4")]
[RegisterConfigurableSeverityAttribute("NUnit.AutoFixture.MissedTestOrTestFixtureAttribute", "", "", "", "NUnit", "", "JetBrains.ReSharper.UnitTesting.Analysis.Resources.Strings", "NUnitAutoFixtureMissedTestOrTestFixtureAttribute", "", "JetBrains.ReSharper.UnitTesting.Analysis.Resources.Strings", "NUnitAutoFixtureMissedTestOrTestFixtureAttributeTestMethodWillNotBeRun", "4")]
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.RegisterSeverityComponentAFBC7E2A39790582E70934C0E3696B78FD89B8B75F2B0A57E31CE23ABA53380C : object {
}
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.RemoveIgnoredAttributeFix : QuickFixBase {
    [NotNullAttribute]
private IAttribute myAttribute;
    [CanBeNullAttribute]
private IAttributesOwnerDeclaration myAttributeOwnerDeclaration;
    public string Text { get; }
    public RemoveIgnoredAttributeFix(IAttribute attribute);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.RemoveResultPropertyFix : QuickFixBase {
    [NotNullAttribute]
private IPropertyAssignment myPropertyAssignment;
    public string Text { get; }
    public RemoveResultPropertyFix(IPropertyAssignment propertyAssignment);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
    [NotNullAttribute]
private ITreeRange GetTreeRange();
}
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.RenameResultToExpectedResultFix : QuickFixBase {
    [NotNullAttribute]
private IPropertyAssignment myPropertyAssignment;
    public string Text { get; }
    public RenameResultToExpectedResultFix(IPropertyAssignment propertyAssignment);
    public virtual string get_Text();
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    public virtual bool IsAvailable(IUserDataHolder cache);
}
public enum JetBrains.ReSharper.UnitTesting.Analysis.nUnit.SpecialConversions.ConversionError : Enum {
    public int value__;
    public static ConversionError None;
    public static ConversionError Generic;
    public static ConversionError Overflow;
    public static ConversionError InvalidTypeCast;
}
[ExtensionAttribute]
internal static class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.SpecialConversions.ConversionErrorExtensions : object {
    [ExtensionAttribute]
public static ConversionError GetErrorType(Exception ex);
}
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.SpecialConversions.ConversionResult : object {
    [CompilerGeneratedAttribute]
private object <SourceValue>k__BackingField;
    [CompilerGeneratedAttribute]
private object <TargetValue>k__BackingField;
    [CompilerGeneratedAttribute]
private ConversionError <ErrorType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsOk>k__BackingField;
    public object SourceValue { get; }
    public object TargetValue { get; }
    public ConversionError ErrorType { get; }
    public string ErrorMessage { get; }
    public bool IsOk { get; }
    public bool IsError { get; }
    private ConversionResult(bool isOk, object sourceValue, object targetValue, string errorMessage, ConversionError errorType);
    [CompilerGeneratedAttribute]
public object get_SourceValue();
    [CompilerGeneratedAttribute]
public object get_TargetValue();
    [CompilerGeneratedAttribute]
public ConversionError get_ErrorType();
    [CompilerGeneratedAttribute]
public string get_ErrorMessage();
    [CompilerGeneratedAttribute]
public bool get_IsOk();
    public bool get_IsError();
    [NotNullAttribute]
public static ConversionResult CreateOk(object sourceValue, object targetValue);
    [NotNullAttribute]
public static ConversionResult CreateError(object sourceValue, Exception ex);
    [NotNullAttribute]
public static ConversionResult CreateSkipped(object sourceValue);
}
internal class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.SpecialConversions.DynamicTestMethod : object {
    [NotNullAttribute]
private DynamicMethod myDynamicMethod;
    public DynamicTestMethod(DynamicMethod dynamicMethod);
    public sealed virtual void Invoke(object value);
}
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.SpecialConversions.DynamicTestMethodProvider : object {
    [NotNullAttribute]
private ConcurrentDictionary`2<Type, ITestMethod> myMethods;
    public sealed virtual bool TryGetMethod(Type parameterType, ITestMethod& method);
    [NotNullAttribute]
public static ITestMethodProvider Create();
    [NotNullAttribute]
private ITestMethod CreateTestMethod(Type parameterType);
}
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.SpecialConversions.FrameworkTypeProvider : object {
    [NotNullAttribute]
private IDictionary`2<string, Type> myTypes;
    private FrameworkTypeProvider(IDictionary`2<string, Type> types);
    [NotNullAttribute]
public static FrameworkTypeProvider Create(IPsiModule module);
    [NotNullAttribute]
private static string GetTypeName(IDeclaredType declaredType);
    [NotNullAttribute]
private static string GetTypeName(IType type);
    public bool TryGetType(IDeclaredType type, Type& frameworkType);
    public bool TryGetType(IType type, Type& frameworkType);
}
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.SpecialConversions.GeneralConversion`2 : SpecialConversion`2<TSource, TTarget> {
    protected virtual bool TryConvertCore(object arg, TTarget& value);
}
public interface JetBrains.ReSharper.UnitTesting.Analysis.nUnit.SpecialConversions.INUnitSimulator {
    [NotNullAttribute]
public abstract virtual TestExecutionInfo ExecuteTestMethod(Type methodParameterType, object testCaseArgument);
}
public interface JetBrains.ReSharper.UnitTesting.Analysis.nUnit.SpecialConversions.INUnitSimulatorProvider {
    [NotNullAttribute]
public abstract virtual INUnitSimulator GetSimulator(int majorVersion);
}
public interface JetBrains.ReSharper.UnitTesting.Analysis.nUnit.SpecialConversions.ISpecialConversion {
    [NotNullAttribute]
public Type SourceType { get; }
    [NotNullAttribute]
public Type TargetType { get; }
    public abstract virtual Type get_SourceType();
    public abstract virtual Type get_TargetType();
    public abstract virtual bool TryConvert(object arg, Object& value);
}
public interface JetBrains.ReSharper.UnitTesting.Analysis.nUnit.SpecialConversions.ISpecialConversions {
    [NotNullAttribute]
public abstract virtual ConversionResult Convert(object arg, Type targetType);
}
public interface JetBrains.ReSharper.UnitTesting.Analysis.nUnit.SpecialConversions.ITestMethod {
    public abstract virtual void Invoke(object value);
}
public interface JetBrains.ReSharper.UnitTesting.Analysis.nUnit.SpecialConversions.ITestMethodProvider {
    public abstract virtual bool TryGetMethod(Type parameterType, ITestMethod& method);
}
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.SpecialConversions.NUnit2.NUnit2Simulator : NUnitSimulatorBase {
}
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.SpecialConversions.NUnit2.NUnit2SpecialConversions : SpecialConversionsBase {
    private NUnit2SpecialConversions(IEnumerable`1<ISpecialConversion> conversions);
    [NotNullAttribute]
public static ISpecialConversions Create();
}
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.SpecialConversions.NUnit3.NullableGeneralConversion`2 : SpecialConversion`2<TSource, Nullable`1<TTarget>> {
    protected virtual bool TryConvertCore(object arg, Nullable`1& value);
}
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.SpecialConversions.NUnit3.NUnit3Simulator : NUnitSimulatorBase {
}
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.SpecialConversions.NUnit3.NUnit3SpecialConversions : SpecialConversionsBase {
    private NUnit3SpecialConversions(IEnumerable`1<ISpecialConversion> conversions);
    [NotNullAttribute]
public static ISpecialConversions Create();
}
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.SpecialConversions.NUnit3.StringToNullableTimeSpanConversion : SpecialConversion`2<string, Nullable`1<TimeSpan>> {
    protected virtual bool TryConvertCore(object arg, Nullable`1& value);
}
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.SpecialConversions.NUnit3.StringToTimeSpanConversion : SpecialConversion`2<string, TimeSpan> {
    protected virtual bool TryConvertCore(object arg, TimeSpan& value);
}
public abstract class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.SpecialConversions.NUnitSimulatorBase : object {
    [NotNullAttribute]
private ISpecialConversions mySpecialConversions;
    [NotNullAttribute]
private ITestMethodProvider myTestMethodProvider;
    protected NUnitSimulatorBase(ISpecialConversions specialConversions);
    public sealed virtual TestExecutionInfo ExecuteTestMethod(Type methodParameterType, object testCaseArgument);
    [NotNullAttribute]
private TestExecutionInfo InvokeTestMethod(Type methodParameterType, object argumentValue);
}
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.SpecialConversions.NUnitSimulatorProvider : object {
    [NotNullAttribute]
private INUnitSimulator myNUnit2Simulator;
    [NotNullAttribute]
private INUnitSimulator myNUnit3Simulator;
    public sealed virtual INUnitSimulator GetSimulator(int majorVersion);
}
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.SpecialConversions.PredefinedTestMethodProvider : object {
    private static string TestMethodPostfix;
    [NotNullAttribute]
private IDictionary`2<Type, ITestMethod> myMethods;
    private PredefinedTestMethodProvider(IDictionary`2<Type, ITestMethod> methods);
    public sealed virtual bool TryGetMethod(Type parameterType, ITestMethod& method);
    [NotNullAttribute]
public static ITestMethodProvider Create();
}
internal class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.SpecialConversions.ReflectionTestMethod : object {
    [NotNullAttribute]
private MethodInfo myMethodInfo;
    public ReflectionTestMethod(MethodInfo methodInfo);
    public sealed virtual void Invoke(object value);
}
public abstract class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.SpecialConversions.SpecialConversion`2 : object {
    public Type SourceType { get; }
    public Type TargetType { get; }
    public sealed virtual Type get_SourceType();
    public sealed virtual Type get_TargetType();
    public sealed virtual bool TryConvert(object arg, Object& value);
    protected abstract virtual bool TryConvertCore(object arg, TTarget& value);
}
public abstract class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.SpecialConversions.SpecialConversionsBase : object {
    [NotNullAttribute]
private IDictionary`2<Type, IDictionary`2<Type, ISpecialConversion>> myExplicitConversions;
    protected SpecialConversionsBase(IEnumerable`1<ISpecialConversion> conversions);
    public sealed virtual ConversionResult Convert(object arg, Type targetType);
    [NotNullAttribute]
private static IDictionary`2<Type, IDictionary`2<Type, ISpecialConversion>> ToFastAccessStructure(IEnumerable`1<ISpecialConversion> conversions);
    private bool TryGetExplicitConversion(Type sourceType, Type targetType, ISpecialConversion& conversion);
}
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.SpecialConversions.TestExecutionInfo : object {
    [CompilerGeneratedAttribute]
private TestExecutionResult <ExecutionResult>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private ConversionError <ErrorType>k__BackingField;
    public TestExecutionResult ExecutionResult { get; }
    public string ErrorMessage { get; }
    public ConversionError ErrorType { get; }
    private TestExecutionInfo(TestExecutionResult executionResult, string errorMessage, ConversionError errorType);
    [CompilerGeneratedAttribute]
public TestExecutionResult get_ExecutionResult();
    [CompilerGeneratedAttribute]
public string get_ErrorMessage();
    [CompilerGeneratedAttribute]
public ConversionError get_ErrorType();
    [NotNullAttribute]
public static TestExecutionInfo CreateOk();
    [NotNullAttribute]
public static TestExecutionInfo CreateError(string errorMessage, ConversionError errorType);
    [NotNullAttribute]
public static TestExecutionInfo CreateSkipped(string errorMessage);
}
public enum JetBrains.ReSharper.UnitTesting.Analysis.nUnit.SpecialConversions.TestExecutionResult : Enum {
    public int value__;
    public static TestExecutionResult Ok;
    public static TestExecutionResult Error;
    public static TestExecutionResult Skipped;
}
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.SpecialConversions.TestMethodProvider : object {
    [NotNullAttribute]
private ITestMethodProvider myDynamicMethodProvider;
    [NotNullAttribute]
private ITestMethodProvider myExplicitMethodProvider;
    public sealed virtual bool TryGetMethod(Type parameterType, ITestMethod& method);
    [NotNullAttribute]
public static ITestMethodProvider Create();
}
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.TestCase.ExpectedResultValidator : object {
    [NotNullAttribute]
private IMethod myMethod;
    [NotNullAttribute]
private IMethodDeclaration myMethodDeclaration;
    [NotNullAttribute]
private NUnitVersion myNUnitVersion;
    [NotNullAttribute]
private TypeConversionAnalyzer myTypeConversionAnalyzer;
    public ExpectedResultValidator(IMethod method, IMethodDeclaration methodDeclaration, NUnitVersion nUnitVersion, TypeConversionAnalyzer typeConversionAnalyzer);
    public sealed virtual void Validate(IAttribute attribute, bool requiredExpectedResult, Nullable`1<bool> missedExpectedResult, IExpectedResultValidatorReporter reporter);
    [NotNullAttribute]
private IType GetMethodExpectedResultType();
    [CompilerGeneratedAttribute]
private bool <Validate>b__5_0(IPropertyAssignment p);
    [CompilerGeneratedAttribute]
private bool <Validate>b__5_1(IPropertyAssignment p);
}
[HighlightingSourceAttribute]
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.TestCase.ExpectedResultValidatorProvider : object {
    [NotNullAttribute]
private Lazy`1<IExpectedResultValidatorReporter> myReporter;
    [NotNullAttribute]
private Lazy`1<IExpectedResultValidator> myValidator;
    public ExpectedResultValidatorProvider(IMethod method, IMethodDeclaration methodDeclaration, IHighlightingConsumer consumer, NUnitVersion nUnitVersion, TypeConversionAnalyzer typeConversionAnalyzer);
    public sealed virtual IExpectedResultValidator GetValidator();
    public sealed virtual IExpectedResultValidatorReporter GetReporter();
}
[HighlightingSourceAttribute]
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.TestCase.ExpectedResultValidatorReporter : object {
    [NotNullAttribute]
private IHighlightingConsumer myConsumer;
    [NotNullAttribute]
private IMethodDeclaration myMethodDeclaration;
    public ExpectedResultValidatorReporter(IHighlightingConsumer consumer, IMethodDeclaration methodDeclaration);
    public sealed virtual void ReportResultPropertyIsObsolete(IPropertyAssignment property);
    public sealed virtual void ReportResultPropertyDuplicatesExpectedResult(IPropertyAssignment property);
    public sealed virtual void ReportExpectedResultRequired(IMethodDeclaration methodDeclaration, IAttribute attribute, bool isNUnit26OrLater);
    public sealed virtual void ReportRedundantExpectedResult(IPropertyAssignment property);
    public sealed virtual void ReportIncorrectExpectedResultType(ICSharpExpression expectedResultSource, IType methodResultType);
}
public interface JetBrains.ReSharper.UnitTesting.Analysis.nUnit.TestCase.IExpectedResultValidator {
    public abstract virtual void Validate(IAttribute attribute, bool requiredExpectedResult, Nullable`1<bool> missedExpectedResult, IExpectedResultValidatorReporter reporter);
}
public interface JetBrains.ReSharper.UnitTesting.Analysis.nUnit.TestCase.IExpectedResultValidatorProvider {
    [NotNullAttribute]
public abstract virtual IExpectedResultValidator GetValidator();
    [NotNullAttribute]
public abstract virtual IExpectedResultValidatorReporter GetReporter();
}
public interface JetBrains.ReSharper.UnitTesting.Analysis.nUnit.TestCase.IExpectedResultValidatorReporter {
    public abstract virtual void ReportResultPropertyIsObsolete(IPropertyAssignment property);
    public abstract virtual void ReportResultPropertyDuplicatesExpectedResult(IPropertyAssignment property);
    public abstract virtual void ReportExpectedResultRequired(IMethodDeclaration methodDeclaration, IAttribute attribute, bool isNUnit26OrLater);
    public abstract virtual void ReportRedundantExpectedResult(IPropertyAssignment property);
    public abstract virtual void ReportIncorrectExpectedResultType(ICSharpExpression expectedResultSource, IType methodResultType);
}
public interface JetBrains.ReSharper.UnitTesting.Analysis.nUnit.TestCase.ITestCaseParametersValidator {
    public abstract virtual void Validate(IAttribute attribute, bool requiredExpectedResult, ITestCaseParametersValidatorReporter reporter);
}
public interface JetBrains.ReSharper.UnitTesting.Analysis.nUnit.TestCase.ITestCaseParametersValidatorProvider {
    [NotNullAttribute]
public abstract virtual ITestCaseParametersValidator GetValidator();
    [NotNullAttribute]
public abstract virtual ITestCaseParametersValidatorReporter GetReporter();
}
public interface JetBrains.ReSharper.UnitTesting.Analysis.nUnit.TestCase.ITestCaseParametersValidatorReporter {
    public abstract virtual void ReportResultPropertyIsObsolete(IPropertyAssignment property);
    public abstract virtual void ReportResultPropertyDuplicates(IPropertyAssignment property);
    public abstract virtual void ReportRedundantArgumentInsteadOfExpectedResult(ICSharpArgument argument, string expectedResultPropertyName);
    public abstract virtual void ReportRedundantArgument(ICSharpArgument argument);
    public abstract virtual void ReportIncorrectArgumentType(ICSharpArgument argument, string parameterName, IType expectedType);
    public abstract virtual void ReportMissingArguments(IAttribute attribute, IEnumerable`1<string> missingParameters);
    public abstract virtual void ReportMissingCancelAfterAttribute(IParameter parameter);
}
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.TestCase.TestCaseParametersValidator : object {
    [NotNullAttribute]
private IExpectedResultValidatorProvider myExpectedResultValidatorProvider;
    [NotNullAttribute]
private IMethod myMethod;
    [NotNullAttribute]
private NUnitVersion myNUnitVersion;
    [NotNullAttribute]
private TypeConversionAnalyzer myTypeConversionAnalyzer;
    public TestCaseParametersValidator(IMethod method, NUnitVersion nUnitVersion, TypeConversionAnalyzer typeConversionAnalyzer, IExpectedResultValidatorProvider expectedResultValidatorProvider);
    public sealed virtual void Validate(IAttribute attribute, bool requiredExpectedResult, ITestCaseParametersValidatorReporter reporter);
    [ContractAnnotationAttribute("=> true, parameter: notnull; => false, parameter: null")]
private bool TryGetMethodParameterInfo(int attributeParameterIndex, IParameter& parameter);
    [ContractAnnotationAttribute("=> true, expectedArgumentType: notnull; => false, expectedArgumentType: null")]
private bool TryGetExpectedArgumentType(IParameter parameter, bool exactly, ITreeNode context, IType& expectedArgumentType);
}
[HighlightingSourceAttribute]
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.TestCase.TestCaseParametersValidatorProvider : object {
    [NotNullAttribute]
private Lazy`1<ITestCaseParametersValidatorReporter> myReporter;
    [NotNullAttribute]
private Lazy`1<ITestCaseParametersValidator> myValidator;
    public TestCaseParametersValidatorProvider(IMethod method, IHighlightingConsumer consumer, NUnitVersion nUnitVersion, TypeConversionAnalyzer typeConversionAnalyzer, IExpectedResultValidatorProvider expectedResultValidatorProvider);
    public sealed virtual ITestCaseParametersValidator GetValidator();
    public sealed virtual ITestCaseParametersValidatorReporter GetReporter();
}
[HighlightingSourceAttribute]
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.TestCase.TestCaseParametersValidatorReporter : object {
    [NotNullAttribute]
private IHighlightingConsumer myConsumer;
    public TestCaseParametersValidatorReporter(IHighlightingConsumer consumer);
    public sealed virtual void ReportResultPropertyIsObsolete(IPropertyAssignment property);
    public sealed virtual void ReportResultPropertyDuplicates(IPropertyAssignment property);
    public sealed virtual void ReportRedundantArgumentInsteadOfExpectedResult(ICSharpArgument argument, string expectedResultPropertyName);
    public sealed virtual void ReportRedundantArgument(ICSharpArgument argument);
    public sealed virtual void ReportIncorrectArgumentType(ICSharpArgument argument, string parameterName, IType expectedType);
    public sealed virtual void ReportMissingArguments(IAttribute attribute, IEnumerable`1<string> missingParameters);
    public sealed virtual void ReportMissingCancelAfterAttribute(IParameter parameter);
}
public interface JetBrains.ReSharper.UnitTesting.Analysis.nUnit.TestCaseSource.ITestCaseOrValueSourceAttributeReporter {
    public abstract virtual void ReportShouldImplementIEnumerable(ICSharpExpression expression, bool valueIsType, string valueText, string memberName);
    public abstract virtual void ReportSourceMustBeFieldPropertyMethod(ICSharpExpression expression, string memberName);
    public abstract virtual void ReportSourceMustBeStatic(ICSharpExpression expression, ICSharpTypeMemberDeclaration memberDeclaration, bool canFixSafe);
}
public interface JetBrains.ReSharper.UnitTesting.Analysis.nUnit.TestCaseSource.ITestCaseOrValueSourceAttributeValidator {
    public abstract virtual void Validate(IAttribute attribute, ITestCaseOrValueSourceAttributeReporter reporter);
}
public interface JetBrains.ReSharper.UnitTesting.Analysis.nUnit.TestCaseSource.ITestCaseOrValueSourceAttributeValidatorProvider {
    [NotNullAttribute]
public abstract virtual ITestCaseOrValueSourceAttributeValidator GetValidator();
    [NotNullAttribute]
public abstract virtual ITestCaseOrValueSourceAttributeReporter GetReporter();
}
[HighlightingSourceAttribute]
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.TestCaseSource.TestCaseOrValueSourceAttributeReporter : object {
    [NotNullAttribute]
private IHighlightingConsumer myConsumer;
    public TestCaseOrValueSourceAttributeReporter(IHighlightingConsumer consumer);
    public sealed virtual void ReportShouldImplementIEnumerable(ICSharpExpression expression, bool valueIsType, string valueText, string memberName);
    public sealed virtual void ReportSourceMustBeFieldPropertyMethod(ICSharpExpression expression, string memberName);
    public sealed virtual void ReportSourceMustBeStatic(ICSharpExpression expression, ICSharpTypeMemberDeclaration memberDeclaration, bool canFixSafe);
}
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.TestCaseSource.TestCaseOrValueSourceAttributeValidator : object {
    [NotNullAttribute]
private IMethodDeclaration myMethodDeclaration;
    [NotNullAttribute]
private NUnitVersion myNUnitVersion;
    [NotNullAttribute]
private TypeConversionAnalyzer myTypeConversionAnalyzer;
    public TestCaseOrValueSourceAttributeValidator(IMethodDeclaration methodDeclaration, TypeConversionAnalyzer typeConversionAnalyzer, NUnitVersion nUnitVersion);
    public sealed virtual void Validate(IAttribute attribute, ITestCaseOrValueSourceAttributeReporter reporter);
    private void CheckSourceMemberImplementsIEnumerable(ICSharpTypeDeclaration classDeclaration, string memberName, ICSharpArgument memberArgument, ITestCaseOrValueSourceAttributeReporter reporter);
}
[HighlightingSourceAttribute]
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.TestCaseSource.TestCaseOrValueSourceAttributeValidatorProvider : object {
    [NotNullAttribute]
private Lazy`1<ITestCaseOrValueSourceAttributeReporter> myReporter;
    [NotNullAttribute]
private Lazy`1<ITestCaseOrValueSourceAttributeValidator> myValidator;
    public TestCaseOrValueSourceAttributeValidatorProvider(IHighlightingConsumer consumer, IMethodDeclaration methodDeclaration, TypeConversionAnalyzer typeConversionAnalyzer, NUnitVersion nUnitVersion);
    public sealed virtual ITestCaseOrValueSourceAttributeValidator GetValidator();
    public sealed virtual ITestCaseOrValueSourceAttributeReporter GetReporter();
}
internal class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.TestCaseSource.TestCaseSourceApplicableTypeMemberFilter : object {
    [CanBeNullAttribute]
private ICSharpDeclaration myOwnerDeclaration;
    public ResolveErrorType ErrorType { get; }
    public FilterRunType RunType { get; }
    public TestCaseSourceApplicableTypeMemberFilter(ICSharpDeclaration ownerDeclaration);
    public sealed virtual bool TryFilterToDestination(List`1<ISymbolInfo> source, List`1<ISymbolInfo> destination);
    public sealed virtual ResolveErrorType get_ErrorType();
    public sealed virtual FilterRunType get_RunType();
    private bool HasCorrectType(PredefinedType predefinedType, IPsiModule module, IType type);
    private static bool CheckSingleType(PredefinedType predefinedType, IPsiModule module, IType type, ITypeConversionRule conversionRule, IType typeInDeclaration);
}
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.TestCaseSource.TestCaseSourceReference : TreeReferenceBase`1<ICSharpArgument> {
    [CanBeNullAttribute]
private ICSharpDeclaration myOwnerDeclaration;
    [NotNullAttribute]
private ITypeElement myTypeElement;
    private bool myCanBeInheritor;
    [CanBeNullAttribute]
public ICSharpLiteralExpression LiteralExpression { get; }
    public TestCaseSourceReference(ITypeElement typeElement, ICSharpArgument argument, ICSharpDeclaration ownerDeclaration, bool canBeInheritor);
    public ICSharpLiteralExpression get_LiteralExpression();
    public virtual string GetName();
    public sealed virtual ISymbolTable GetCompletionSymbolTable();
    public virtual ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
    public virtual TreeTextRange GetTreeTextRange();
    public virtual IReference BindTo(IDeclaredElement element);
    public virtual IReference BindTo(IDeclaredElement element, ISubstitution substitution);
    public virtual IAccessContext GetAccessContext();
    public virtual ResolveResultWithInfo ResolveWithoutCache();
    private bool Equals(TestCaseSourceReference other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.TestCaseSource.TestCaseSourceReferenceFactory : object {
    [NotNullAttribute]
private IModule myModule;
    [NotNullAttribute]
private TargetFrameworkId myTargetFrameworkId;
    [NotNullAttribute]
private IUnitTestAttributeChecker myAttributeCache;
    public TestCaseSourceReferenceFactory(IModule module, TargetFrameworkId targetFrameworkId, IUnitTestAttributeChecker attributeCache);
    public sealed virtual ReferenceCollection GetReferences(ITreeNode element, ReferenceCollection oldReferences);
    public sealed virtual bool HasReference(ITreeNode element, IReferenceNameContainer names);
    [CompilerGeneratedAttribute]
internal static bool <GetReferences>g__CheckAttributeNameWithoutResolve|4_0(<>c__DisplayClass4_0& );
    [CompilerGeneratedAttribute]
internal static bool <GetReferences>g__HasReferenceName|4_1(IClrTypeName typeName, string referenceName);
    [CompilerGeneratedAttribute]
internal static bool <GetReferences>g__CheckAttributeNameWithResolve|4_2(<>c__DisplayClass4_0& );
}
[ReferenceProviderFactoryAttribute("16")]
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.TestCaseSource.TestCaseSourceReferenceProviderFactory : object {
    [NotNullAttribute]
private IUnitTestAttributeChecker myAttributeCache;
    [CompilerGeneratedAttribute]
private ISignal`1<IReferenceProviderFactory> <Changed>k__BackingField;
    public ISignal`1<IReferenceProviderFactory> Changed { get; }
    public TestCaseSourceReferenceProviderFactory(IUnitTestAttributeChecker attributeCache);
    public sealed virtual IReferenceFactory CreateFactory(IPsiSourceFile sourceFile, IFile file, IWordIndex wordIndexForChecks);
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<IReferenceProviderFactory> get_Changed();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.TestCaseSource.TestCaseSourceReferenceSuggestionRule : ItemsProviderOfSpecificContext`1<CSharpCodeCompletionContext> {
    public EvaluationMode SupportedEvaluationMode { get; }
    public virtual EvaluationMode get_SupportedEvaluationMode();
    protected virtual AutocompletionBehaviour GetAutocompletionBehaviour(CSharpCodeCompletionContext specificContext);
    protected virtual bool IsAvailable(CSharpCodeCompletionContext context);
    protected virtual void TransformItems(CSharpCodeCompletionContext context, IItemsCollector collector);
}
public interface JetBrains.ReSharper.UnitTesting.Analysis.nUnit.TestMethod.ITestMethodHighlightingReporter {
    public abstract virtual void ReportNonPublicMethod();
    public abstract virtual void ReportAsyncMethodMustBeTask();
}
[HighlightingSourceAttribute]
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.TestMethod.TestMethodHighlightingReporter : object {
    [NotNullAttribute]
private IHighlightingConsumer myConsumer;
    [NotNullAttribute]
private IMethodDeclaration myMethodDeclaration;
    public TestMethodHighlightingReporter(IHighlightingConsumer consumer, IMethodDeclaration methodDeclaration);
    public sealed virtual void ReportNonPublicMethod();
    public sealed virtual void ReportAsyncMethodMustBeTask();
}
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.TypeConversionAnalyzer : object {
    [NotNullAttribute]
private NUnitVersion myNUnitVersion;
    [NotNullAttribute]
private PredefinedType myPredefinedType;
    [NotNullAttribute]
private INUnitSimulatorProvider mySimulatorProvider;
    [NotNullAttribute]
private ICSharpTypeConversionRule myTypeConversionRule;
    [NotNullAttribute]
private FrameworkTypeProvider myTypeProvider;
    public TypeConversionAnalyzer(ICSharpTypeConversionRule typeConversionRule, PredefinedType predefinedType, INUnitSimulatorProvider simulatorProvider, FrameworkTypeProvider typeProvider, NUnitVersion nUnitVersion);
    private bool IsConvertible(IType actualType, IType expectedType);
    public bool IsIEnumerableConvertible(IType type);
    public bool IsArgumentConvertible(ConstantValue actualValue, IExpressionType actualType, IType expectedType);
    private bool TryGetManagedType(IExpressionType expressionType, Type& managedType);
}
public interface JetBrains.ReSharper.UnitTesting.Analysis.nUnit.Values.IValuesAttributeHighlightingReporter {
    public abstract virtual void ReportNoValues(Nullable`1<NUnitGeneration> supportedByNUnit);
    public abstract virtual void ReportInvalidTypeCast(ICSharpExpression argument);
    public abstract virtual void ReportOutOfRange(ICSharpExpression argument, string parameterType);
    public abstract virtual void ReportTooManyTests(int actual, int expected);
    public abstract virtual void ReportDuplicateValues(IEnumerable`1<ICSharpExpression> values);
}
public interface JetBrains.ReSharper.UnitTesting.Analysis.nUnit.Values.IValuesAttributeValidator {
    public abstract virtual void Validate(IParameter parameter, IAttribute attribute, NUnitVersion nUnitVersion, bool allowDuplicates, int testCountLimit, IValuesAttributeHighlightingReporter reporter);
}
public interface JetBrains.ReSharper.UnitTesting.Analysis.nUnit.Values.IValuesAttributeValidatorProvider {
    [NotNullAttribute]
public abstract virtual IValuesAttributeValidator GetValidator(NUnitVersion nUnitVersion);
    [NotNullAttribute]
public abstract virtual IValuesAttributeHighlightingReporter GetReporter(IParameter parameter, IAttribute attribute, ICombinationsReporter reporter);
}
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.Values.ValuesAttribute2XValidator : ValuesAttributeValidatorBase {
    public ValuesAttribute2XValidator(INUnitSimulator simulator, ICSharpTypeConversionRule typeConversionRule, FrameworkTypeProvider typeProvider);
    protected virtual bool AreArrayInitializersSupported(NUnitVersion nUnitVersion);
    protected virtual void ValidateImplicitValues(IParameter parameter, NUnitVersion nUnitVersion, int testCountLimit, IValuesAttributeHighlightingReporter reporter);
}
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.Values.ValuesAttribute3XValidator : ValuesAttributeValidatorBase {
    public ValuesAttribute3XValidator(INUnitSimulator simulator, ICSharpTypeConversionRule typeConversionRule, FrameworkTypeProvider typeProvider);
    protected virtual bool AreArrayInitializersSupported(NUnitVersion nUnitVersion);
    protected virtual void ValidateImplicitValues(IParameter parameter, NUnitVersion nUnitVersion, int testCountLimit, IValuesAttributeHighlightingReporter reporter);
    private static void ValidateBoolValues(IValuesAttributeHighlightingReporter reporter);
    private static void ValidateNullableBoolValues(NUnitVersion nUnitVersion, IValuesAttributeHighlightingReporter reporter);
    private static void ValidateNullableEnumValues(NUnitVersion nUnitVersion, int testCountLimit, IValuesAttributeHighlightingReporter reporter, IEnum enumType);
    private static void ValidateEnumValues(int testCountLimit, IValuesAttributeHighlightingReporter reporter, IEnum enumType);
}
[HighlightingSourceAttribute]
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.Values.ValuesAttributeHighlightingReporter : object {
    [NotNullAttribute]
private IAttribute myAttribute;
    [NotNullAttribute]
private ICombinationsReporter myCombinationsReporter;
    [NotNullAttribute]
private IHighlightingConsumer myConsumer;
    [NotNullAttribute]
private IParameter myParameter;
    [CompilerGeneratedAttribute]
private ulong <TestCount>k__BackingField;
    public ulong TestCount { get; private set; }
    public ValuesAttributeHighlightingReporter(IHighlightingConsumer consumer, IParameter parameter, IAttribute attribute, ICombinationsReporter combinationsReporter);
    public sealed virtual void ReportInvalidTypeCast(ICSharpExpression argument);
    public sealed virtual void ReportOutOfRange(ICSharpExpression argument, string parameterType);
    public sealed virtual void ReportTooManyTests(int actual, int expected);
    public sealed virtual void ReportDuplicateValues(IEnumerable`1<ICSharpExpression> values);
    public sealed virtual void ReportTestCount(ulong testCount);
    [CompilerGeneratedAttribute]
public sealed virtual ulong get_TestCount();
    [CompilerGeneratedAttribute]
private void set_TestCount(ulong value);
    public sealed virtual void ReportNoValues(Nullable`1<NUnitGeneration> supportedByNUnit);
    private string GetNoValuesMessage(NUnitGeneration nUnitGeneration);
}
public abstract class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.Values.ValuesAttributeValidatorBase : object {
    [NotNullAttribute]
private INUnitSimulator myNUnitSimulator;
    [NotNullAttribute]
private ICSharpTypeConversionRule myTypeConversionRule;
    [NotNullAttribute]
private FrameworkTypeProvider myTypeProvider;
    protected ValuesAttributeValidatorBase(INUnitSimulator simulator, ICSharpTypeConversionRule typeConversionRule, FrameworkTypeProvider typeProvider);
    public sealed virtual void Validate(IParameter parameter, IAttribute attribute, NUnitVersion nUnitVersion, bool allowDuplicates, int testCountLimit, IValuesAttributeHighlightingReporter reporter);
    protected abstract virtual bool AreArrayInitializersSupported(NUnitVersion nUnitVersion);
    protected abstract virtual void ValidateImplicitValues(IParameter parameter, NUnitVersion nUnitVersion, int testCountLimit, IValuesAttributeHighlightingReporter reporter);
    private void ValidateExplicitValues(IParameter parameter, IAttribute attribute, NUnitVersion nUnitVersion, bool allowDuplicates, int testCountLimit, IValuesAttributeHighlightingReporter reporter);
    private void ValidateValues(IEnumerable`1<IValueExpression> values, IParameter parameter, bool allowDuplicates, IValuesAttributeHighlightingReporter reporter);
    private void ValidateValuesCheckDuplicates(IEnumerable`1<IValueExpression> values, IParameter parameter, IValuesAttributeHighlightingReporter reporter);
    private void ValidateValuesAllowDuplicates(IEnumerable`1<IValueExpression> values, IParameter parameter, IValuesAttributeHighlightingReporter reporter);
    private bool IsConvertible(IType actualType, IType expectedType);
    private void ValidateValue(IValueExpression valueExpression, IParameter parameter, IValuesAttributeHighlightingReporter reporter);
    private void CheckLiveConversion(ICSharpExpression value, IParameter parameter, IValuesAttributeHighlightingReporter reporter);
}
[HighlightingSourceAttribute]
public class JetBrains.ReSharper.UnitTesting.Analysis.nUnit.Values.ValuesAttributeValidatorProvider : object {
    [NotNullAttribute]
private IHighlightingConsumer myConsumer;
    [NotNullAttribute]
private Lazy`1<IValuesAttributeValidator> myValidator2X;
    [NotNullAttribute]
private Lazy`1<IValuesAttributeValidator> myValidator3X;
    public ValuesAttributeValidatorProvider(IHighlightingConsumer consumer, INUnitSimulatorProvider simulatorProvider, ICSharpTypeConversionRule typeConversionRule, FrameworkTypeProvider typeProvider);
    public sealed virtual IValuesAttributeValidator GetValidator(NUnitVersion nUnitVersion);
    public sealed virtual IValuesAttributeHighlightingReporter GetReporter(IParameter parameter, IAttribute attribute, ICombinationsReporter reporter);
}
public abstract class JetBrains.ReSharper.UnitTesting.Analysis.ParameterNameHints.AttributeParameterNameHintsHighlightingProvider`1 : object {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.UnitTesting.Analysis.ParameterNameHints.AttributeParameterNameHintsHighlightingProvider`1/<GetHighlightings>d__0")]
public sealed virtual IEnumerable`1<IHighlighting> GetHighlightings(ManagedLanguageParameterNameHintsHighlightingContextBase`1<T> context, IArgument[] argumentsOwner, IParametersOwner parametersOwner, Func`1<string> getQualifiedName, IParameter[] parameters, int offset, int count, Func`4<IParameter, IArgument, string, ParameterNameHintHighlighting> create, Action checkForInterrupt);
    public abstract virtual bool IsApplicable(ManagedLanguageParameterNameHintsHighlightingContextBase`1<T> context, IArgumentsOwner argumentsOwner, IParametersOwner parametersOwner);
    private bool TryGetDeclaredMethod(IAttribute attribute, IMethodDeclaration& methodDeclaration);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.UnitTesting.Analysis.ParameterNameHints.NUnit.NUnitAttributeParameterNameHintsHighlightingProvider : AttributeParameterNameHintsHighlightingProvider`1<CSharpParameterNameHintsOptions> {
    public virtual bool IsApplicable(ManagedLanguageParameterNameHintsHighlightingContextBase`1<CSharpParameterNameHintsOptions> managedLanguageParameterNameHintsHighlightingContext, IArgumentsOwner argumentsOwner, IParametersOwner parametersOwner);
    [CompilerGeneratedAttribute]
internal static bool <IsApplicable>g__IsTestCaseAttributeApplicable|0_0(<>c__DisplayClass0_0& );
    [CompilerGeneratedAttribute]
internal static bool <IsApplicable>g__IsInlineAutoDataAttributeApplicable|0_1(<>c__DisplayClass0_0& );
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.UnitTesting.Analysis.ParameterNameHints.xUnit.XUnitAttributeParameterNameHintsHighlightingProvider : AttributeParameterNameHintsHighlightingProvider`1<CSharpParameterNameHintsOptions> {
    public virtual bool IsApplicable(ManagedLanguageParameterNameHintsHighlightingContextBase`1<CSharpParameterNameHintsOptions> managedLanguageParameterNameHintsHighlightingContext, IArgumentsOwner argumentsOwner, IParametersOwner parametersOwner);
    [CompilerGeneratedAttribute]
internal static bool <IsApplicable>g__IsInlineDataAttributeApplicable|0_0(<>c__DisplayClass0_0& );
    [CompilerGeneratedAttribute]
internal static bool <IsApplicable>g__IsInlineAutoDataAttributeApplicable|0_1(<>c__DisplayClass0_0& );
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public static class JetBrains.ReSharper.UnitTesting.Analysis.Resources.Strings : object {
    private static ILogger ourLog;
    private static Lazy`1<JetResourceManager> ourResourceManager;
    [EditorBrowsableAttribute("2")]
public static JetResourceManager ResourceManager { get; }
    public static string ConvertToExpectedResult_Text { get; }
    public static string AddExpectedResult_Text { get; }
    public static string NUnitAddCancelAfterAttribute_Text { get; }
    public static string NUnitAutoFixtureAddTestFixtureAttribute_Text { get; }
    public static string NUnitAutoFixtureAddTestAttribute_Text { get; }
    public static string ProvideValues_Text { get; }
    public static string RemoveIgnoredAttribute_Text { get; }
    public static string RemoveResultPropertyAssignment_Text { get; }
    public static string RenameResultToExpectedResult_Text { get; }
    public static string UseITestOutputHelperInstead_Text { get; }
    public static string AddTestCaseAttribute_Text { get; }
    public static string AccordingToTheTestMethodSignatureTheArgumentInTheTestCaseAttributeIsRedundant { get; }
    public static string AccordingToTheTestMethodSignatureThereAreMissingArgumentsInTheTestCaseAttribute { get; }
    public static string ArgumentValueInTheTestCaseAttributeIsIncorrectOrIsNotCompatibleWithTheTestMethodParameterType { get; }
    public static string ArgumentValueOfTypeIsIncorrectOrIsNotAssignableToParameterOfTypeMessage { get; }
    public static string CannotResolveSymbolMessage { get; }
    public static string CannotResolveSymbolSpecifiedInTestCaseSourceOrValueSourceAttributes { get; }
    public static string DoesLastArgumentOfNUnitTestCaseAttributeMeanExpectedResultMessage { get; }
    public static string ExpectedResultOfACompatibleTypeMustBeProvidedForNonVoidNUnitTestMethodsThroughTheTestCaseAttribute { get; }
    public static string ExpectedResultValueInTestCaseOrTestAttributesIsIncorrectOrIsNotCompatibleWithTheTestMethodReturnType { get; }
    public static string IncorrectRangeBoundstoMustBeGreaterThanOrEqualTofromOrThereMustBeANegativeStepMessage { get; }
    public static string MissedTestOrTestFixtureAttributeTestMethodWillNotBeRunMessage { get; }
    public static string MissingRequiredInNUnitTestCaseAttributeMessage { get; }
    public static string MissingCancelAfterAttributeMessage { get; }
    public static string NoValuesProvidedForAllParametersOfNUnitTestMethodMessage { get; }
    public static string NoValuesProvidedForTheParameterOfTypeInTheAttributeMessage { get; }
    public static string NUnitAsyncTestMethodMustReturnTaskOrTaskT { get; }
    public static string NUnitAttributeShouldProvideExpectedResultForTestMethodWithReturnValueMessage { get; }
    public static string NUnitAutoFixtureAccordingToTheTestMethodSignatureTheArgumentInTheInlineAutoDataAttributeIsRedundant { get; }
    public static string NUnitAutoFixtureArgumentValueInTheInlineAutoDataAttributeIsIncorrectOrIsNotCompatibleWithTheTestMethodParameterType { get; }
    public static string NUnitAutoFixtureIncompatibleArgumentTypeOrIncorrectArgumentValue { get; }
    public static string NUnitAutoFixtureMissedTestAttribute { get; }
    public static string NUnitAutoFixtureMissedTestAttributeTestMethodWillNotBeRun { get; }
    public static string NUnitAutoFixtureMissedTestOrTestFixtureAttribute { get; }
    public static string NUnitAutoFixtureMissedTestOrTestFixtureAttributeTestMethodWillNotBeRun { get; }
    public static string NUnitAutoFixtureRedundantArgumentInInlineAutoDataAttribute { get; }
    public static string NUnitCannotResolveSymbolInTestCaseSourceOrValueSourceAttribute { get; }
    public static string NUnitDuplicateValues { get; }
    public static string NUnitDuplicateValuesProduceUnnecessaryDuplicateTests { get; }
    public static string NUnitIgnoredParameterAttribute { get; }
    public static string NUnitImplicitlyUnspecifiedNullValues { get; }
    public static string NUnitIncompatibleArgumentTypeOrIncorrectArgumentValue { get; }
    public static string NUnitIncompatibleExpectedResultTypeOrIncorrectValue { get; }
    public static string NUnitIncorrectRangeBoundsTheValueOftoParameterMustBeGreaterThanOrEqualTofromOrThereMustBeANegativeStep { get; }
    public static string NUnitIncorrectRangeBoundstoMustBeGreaterThanOrEqualTofrom { get; }
    public static string NUnitMismatchOfTheRangeStepSign { get; }
    public static string NUnitMissingArgumentsInTestCaseAttribute { get; }
    public static string NUnitMissingCancelAfterAttribute { get; }
    public static string NUnitMissingCancelAfterAttributeDescription { get; }
    public static string NUnitMissingExpectedResultForNonVoidTestMethod { get; }
    public static string NUnitNoEnoughValuesAreProvidedInTheValuesAttributeSoNUnitImplicitlyAddsnullValuesToFillTestData { get; }
    public static string NUnitNonPublicTestMethod { get; }
    public static string NUnitNoValuesAreProvidedInTheAttributeOrTheCurrentNUnitVersionDoesNotSupportAutomaticGenerationOfValuesForTheParameterType { get; }
    public static string NUnitNoValuesProvidedInTheAttributes { get; }
    public static string NUnitParameterAttributeIsIgnoredByNUnitFramework { get; }
    public static string NUnitRangestepParameterValueMustBeNonZero { get; }
    public static string NUnitRedundantArgumentInsteadOfExpectedResult { get; }
    public static string NUnitRedundantArgumentInTestCaseAttribute { get; }
    public static string NUnitRedundantExpectedResultForVoidTestMethod { get; }
    public static string NUnitSpecifiedAttributeValuesProduceTooManyTests { get; }
    public static string NUnitSpecifiedValuesAreNotCompatibleWithTheTestParameterType { get; }
    public static string NUnitstepParameterValueOfRangeIsIncorrectItMustBeNonZero { get; }
    public static string NUnitSupportsOnlyAsyncTestMethodsThatReturnTaskOrTaskT { get; }
    public static string NUnitSupportsOnlyAsyncTestMethodsThatReturnTaskOrTaskTMessage { get; }
    public static string NUnitTestCaseAttributeShouldNotProvideExpectedResultForTestMethodWithoutReturnValueMessage { get; }
    public static string NUnitTestCaseResultPropertyDuplicatesExpectedResult { get; }
    public static string NUnitTestCaseResultPropertyDuplicatesSpecifiedExpectedResult { get; }
    public static string NUnitTestCaseResultPropertyIsObsolete { get; }
    public static string NUnitTestCaseResultPropertyIsObsoleteSinceNUnit { get; }
    public static string NUnitTestCaseSourceFieldPropertyMethodShouldBeStaticMessage { get; }
    public static string NUnitTestCaseSourceFieldPropertyMethodSpecifiedInTestCaseSourceOrValuesSourceAttributesMustBeStatic { get; }
    public static string NUnitTestCaseSourceMustBeFieldPropertyOrMethod { get; }
    public static string NUnitTestCaseSourceMustBeNonAbstractAndImplementIEnumerable { get; }
    public static string NUnitTestCaseSourceMustBeStatic { get; }
    public static string NUnitTestCaseSourceMustReferToNonAbstractClassImplementingIEnumerable { get; }
    public static string NUnitTestCaseSourceShouldBeFieldPropertyOrMethodOnlyMessage { get; }
    public static string NUnitTestCaseSourceSpecifiedInTestCaseSourceOrValueSourceAttributesMustOnlyReferToFieldPropertyOrMethod { get; }
    public static string NUnitTestMethodsMustHavePublicVisibility { get; }
    public static string NUnitTestMethodsShouldHavePublicVisibilityMessage { get; }
    public static string NUnitTheMaximumRangeValueIsNotReachableWithTheStepValue { get; }
    public static string NUnitTheMaximumValueOfRangeIsNotReachableCheckRangeAndStepValues { get; }
    public static string NUnitTheSignOfThestepParameterOfRangeDoesNotMatchTheRangeValues { get; }
    public static string NUnitValuesForTestMethodParametersAreNotProvided { get; }
    public static string NUnitValuesInRangeDoNotFitTheTypeOfTheTestParameter { get; }
    public static string NUnitValuesOfTheAttributeProduceTooManyTestsWhichMayLeadNUnitTestRunnerToOutOfMemory { get; }
    public static string NUnitValuesSpecifiedInRangeAreOutRangeForTheTypeOfTheTestParameter { get; }
    public static string NUnitValuesSpecifiedInTheAttributeAreNotCompatibleWithTheCorrespondingTestParameterType { get; }
    public static string ObsoleteTestCaseResultPropertyDuplicatesSpecifiedExpectedResultMessage { get; }
    public static string ParametersOfNUnitTestMethodMustBeProvidedWithValuesThroughEitherValuesOrTestCaseAttribute { get; }
    public static string RedundantArgumentInAutoFixtureInlineAutoDataAttributeMessage { get; }
    public static string RedundantArgumentInNUnitTestCaseAttributeMessage { get; }
    public static string RedundantArgumentIsFoundInsteadOfExpectedResult { get; }
    public static string SequentialAttributeProducesTestsButValuesAreProvidedByTheAttributeNUnitAddsImplicitlynullValuesMessage { get; }
    public static string SpecifyingExpectedResultForVoidNUnitTestMethodsThroughTheTestCaseAttributeIsRedundant { get; }
    public static string stepParameterValueIsIncorrectItMustBeNonZeroMessage { get; }
    public static string TestCaseResultPropertyIsObsoleteSinceNUnitUseExpectedResultInsteadOfItMessage { get; }
    public static string TestCaseSourceTypeIEnumerableMessage { get; }
    public static string TestCaseSourceMemberOfTypeIEnumerableMessage { get; }
    public static string TheAttributeIsIgnoredBecauseAnotherParameterAttributeHasAlreadyBeenSpecifiedMessage { get; }
    public static string TheAttributeProducesTestsWhichExceedsTheSpecifiedThresholdWithThisManyTestsNUnitTestRunnerMayFailWithOutOfMemoryMessage { get; }
    public static string TheSignOfThestepParameterMustBeToMatchTheRangeValuesMessage { get; }
    public static string TheTypeProvidedInIsNotCompatibleWithTheTestParameterTypeMessage { get; }
    public static string TheValueIsDuplicatedItProducesUnnecessaryDuplicateTestsMessage { get; }
    public static string TheValueIsOutOfRangeForTheTestParameterTypeMessage { get; }
    public static string ValueOfTypeIsIncorrectOrIsNotAssignableToTheTestMethodsExpectedResultOfTypeMessage { get; }
    public static string WithTheCurrentStepTheTestWillReachButNotCheckRangeAndStepValuesMessage { get; }
    public static string ConsoleOutputInXunitTests { get; }
    public static string XunitTestsShouldUseITestOutputHelperInsteadOfSystemConsole { get; }
    public static string XunitTestsShouldUseITestOutputHelperInsteadOfSystemConsoleMessage { get; }
    public static string AddsTestCaseAttributeToNUnitTestMethod_Text { get; }
    private static Strings();
    public static JetResourceManager get_ResourceManager();
    public static string Choice(string format, Object[] args);
    public static string get_ConvertToExpectedResult_Text();
    public static string get_AddExpectedResult_Text();
    public static string get_NUnitAddCancelAfterAttribute_Text();
    public static string get_NUnitAutoFixtureAddTestFixtureAttribute_Text();
    public static string get_NUnitAutoFixtureAddTestAttribute_Text();
    public static string get_ProvideValues_Text();
    public static string get_RemoveIgnoredAttribute_Text();
    public static string get_RemoveResultPropertyAssignment_Text();
    public static string get_RenameResultToExpectedResult_Text();
    public static string get_UseITestOutputHelperInstead_Text();
    public static string get_AddTestCaseAttribute_Text();
    public static string get_AccordingToTheTestMethodSignatureTheArgumentInTheTestCaseAttributeIsRedundant();
    public static string get_AccordingToTheTestMethodSignatureThereAreMissingArgumentsInTheTestCaseAttribute();
    public static string get_ArgumentValueInTheTestCaseAttributeIsIncorrectOrIsNotCompatibleWithTheTestMethodParameterType();
    public static string get_ArgumentValueOfTypeIsIncorrectOrIsNotAssignableToParameterOfTypeMessage();
    public static string get_CannotResolveSymbolMessage();
    public static string get_CannotResolveSymbolSpecifiedInTestCaseSourceOrValueSourceAttributes();
    public static string get_DoesLastArgumentOfNUnitTestCaseAttributeMeanExpectedResultMessage();
    public static string get_ExpectedResultOfACompatibleTypeMustBeProvidedForNonVoidNUnitTestMethodsThroughTheTestCaseAttribute();
    public static string get_ExpectedResultValueInTestCaseOrTestAttributesIsIncorrectOrIsNotCompatibleWithTheTestMethodReturnType();
    public static string get_IncorrectRangeBoundstoMustBeGreaterThanOrEqualTofromOrThereMustBeANegativeStepMessage();
    public static string get_MissedTestOrTestFixtureAttributeTestMethodWillNotBeRunMessage();
    public static string get_MissingRequiredInNUnitTestCaseAttributeMessage();
    public static string get_MissingCancelAfterAttributeMessage();
    public static string get_NoValuesProvidedForAllParametersOfNUnitTestMethodMessage();
    public static string get_NoValuesProvidedForTheParameterOfTypeInTheAttributeMessage();
    public static string get_NUnitAsyncTestMethodMustReturnTaskOrTaskT();
    public static string get_NUnitAttributeShouldProvideExpectedResultForTestMethodWithReturnValueMessage();
    public static string get_NUnitAutoFixtureAccordingToTheTestMethodSignatureTheArgumentInTheInlineAutoDataAttributeIsRedundant();
    public static string get_NUnitAutoFixtureArgumentValueInTheInlineAutoDataAttributeIsIncorrectOrIsNotCompatibleWithTheTestMethodParameterType();
    public static string get_NUnitAutoFixtureIncompatibleArgumentTypeOrIncorrectArgumentValue();
    public static string get_NUnitAutoFixtureMissedTestAttribute();
    public static string get_NUnitAutoFixtureMissedTestAttributeTestMethodWillNotBeRun();
    public static string get_NUnitAutoFixtureMissedTestOrTestFixtureAttribute();
    public static string get_NUnitAutoFixtureMissedTestOrTestFixtureAttributeTestMethodWillNotBeRun();
    public static string get_NUnitAutoFixtureRedundantArgumentInInlineAutoDataAttribute();
    public static string get_NUnitCannotResolveSymbolInTestCaseSourceOrValueSourceAttribute();
    public static string get_NUnitDuplicateValues();
    public static string get_NUnitDuplicateValuesProduceUnnecessaryDuplicateTests();
    public static string get_NUnitIgnoredParameterAttribute();
    public static string get_NUnitImplicitlyUnspecifiedNullValues();
    public static string get_NUnitIncompatibleArgumentTypeOrIncorrectArgumentValue();
    public static string get_NUnitIncompatibleExpectedResultTypeOrIncorrectValue();
    public static string get_NUnitIncorrectRangeBoundsTheValueOftoParameterMustBeGreaterThanOrEqualTofromOrThereMustBeANegativeStep();
    public static string get_NUnitIncorrectRangeBoundstoMustBeGreaterThanOrEqualTofrom();
    public static string get_NUnitMismatchOfTheRangeStepSign();
    public static string get_NUnitMissingArgumentsInTestCaseAttribute();
    public static string get_NUnitMissingCancelAfterAttribute();
    public static string get_NUnitMissingCancelAfterAttributeDescription();
    public static string get_NUnitMissingExpectedResultForNonVoidTestMethod();
    public static string get_NUnitNoEnoughValuesAreProvidedInTheValuesAttributeSoNUnitImplicitlyAddsnullValuesToFillTestData();
    public static string get_NUnitNonPublicTestMethod();
    public static string get_NUnitNoValuesAreProvidedInTheAttributeOrTheCurrentNUnitVersionDoesNotSupportAutomaticGenerationOfValuesForTheParameterType();
    public static string get_NUnitNoValuesProvidedInTheAttributes();
    public static string get_NUnitParameterAttributeIsIgnoredByNUnitFramework();
    public static string get_NUnitRangestepParameterValueMustBeNonZero();
    public static string get_NUnitRedundantArgumentInsteadOfExpectedResult();
    public static string get_NUnitRedundantArgumentInTestCaseAttribute();
    public static string get_NUnitRedundantExpectedResultForVoidTestMethod();
    public static string get_NUnitSpecifiedAttributeValuesProduceTooManyTests();
    public static string get_NUnitSpecifiedValuesAreNotCompatibleWithTheTestParameterType();
    public static string get_NUnitstepParameterValueOfRangeIsIncorrectItMustBeNonZero();
    public static string get_NUnitSupportsOnlyAsyncTestMethodsThatReturnTaskOrTaskT();
    public static string get_NUnitSupportsOnlyAsyncTestMethodsThatReturnTaskOrTaskTMessage();
    public static string get_NUnitTestCaseAttributeShouldNotProvideExpectedResultForTestMethodWithoutReturnValueMessage();
    public static string get_NUnitTestCaseResultPropertyDuplicatesExpectedResult();
    public static string get_NUnitTestCaseResultPropertyDuplicatesSpecifiedExpectedResult();
    public static string get_NUnitTestCaseResultPropertyIsObsolete();
    public static string get_NUnitTestCaseResultPropertyIsObsoleteSinceNUnit();
    public static string get_NUnitTestCaseSourceFieldPropertyMethodShouldBeStaticMessage();
    public static string get_NUnitTestCaseSourceFieldPropertyMethodSpecifiedInTestCaseSourceOrValuesSourceAttributesMustBeStatic();
    public static string get_NUnitTestCaseSourceMustBeFieldPropertyOrMethod();
    public static string get_NUnitTestCaseSourceMustBeNonAbstractAndImplementIEnumerable();
    public static string get_NUnitTestCaseSourceMustBeStatic();
    public static string get_NUnitTestCaseSourceMustReferToNonAbstractClassImplementingIEnumerable();
    public static string get_NUnitTestCaseSourceShouldBeFieldPropertyOrMethodOnlyMessage();
    public static string get_NUnitTestCaseSourceSpecifiedInTestCaseSourceOrValueSourceAttributesMustOnlyReferToFieldPropertyOrMethod();
    public static string get_NUnitTestMethodsMustHavePublicVisibility();
    public static string get_NUnitTestMethodsShouldHavePublicVisibilityMessage();
    public static string get_NUnitTheMaximumRangeValueIsNotReachableWithTheStepValue();
    public static string get_NUnitTheMaximumValueOfRangeIsNotReachableCheckRangeAndStepValues();
    public static string get_NUnitTheSignOfThestepParameterOfRangeDoesNotMatchTheRangeValues();
    public static string get_NUnitValuesForTestMethodParametersAreNotProvided();
    public static string get_NUnitValuesInRangeDoNotFitTheTypeOfTheTestParameter();
    public static string get_NUnitValuesOfTheAttributeProduceTooManyTestsWhichMayLeadNUnitTestRunnerToOutOfMemory();
    public static string get_NUnitValuesSpecifiedInRangeAreOutRangeForTheTypeOfTheTestParameter();
    public static string get_NUnitValuesSpecifiedInTheAttributeAreNotCompatibleWithTheCorrespondingTestParameterType();
    public static string get_ObsoleteTestCaseResultPropertyDuplicatesSpecifiedExpectedResultMessage();
    public static string get_ParametersOfNUnitTestMethodMustBeProvidedWithValuesThroughEitherValuesOrTestCaseAttribute();
    public static string get_RedundantArgumentInAutoFixtureInlineAutoDataAttributeMessage();
    public static string get_RedundantArgumentInNUnitTestCaseAttributeMessage();
    public static string get_RedundantArgumentIsFoundInsteadOfExpectedResult();
    public static string get_SequentialAttributeProducesTestsButValuesAreProvidedByTheAttributeNUnitAddsImplicitlynullValuesMessage();
    public static string get_SpecifyingExpectedResultForVoidNUnitTestMethodsThroughTheTestCaseAttributeIsRedundant();
    public static string get_stepParameterValueIsIncorrectItMustBeNonZeroMessage();
    public static string get_TestCaseResultPropertyIsObsoleteSinceNUnitUseExpectedResultInsteadOfItMessage();
    public static string get_TestCaseSourceTypeIEnumerableMessage();
    public static string get_TestCaseSourceMemberOfTypeIEnumerableMessage();
    public static string get_TheAttributeIsIgnoredBecauseAnotherParameterAttributeHasAlreadyBeenSpecifiedMessage();
    public static string get_TheAttributeProducesTestsWhichExceedsTheSpecifiedThresholdWithThisManyTestsNUnitTestRunnerMayFailWithOutOfMemoryMessage();
    public static string get_TheSignOfThestepParameterMustBeToMatchTheRangeValuesMessage();
    public static string get_TheTypeProvidedInIsNotCompatibleWithTheTestParameterTypeMessage();
    public static string get_TheValueIsDuplicatedItProducesUnnecessaryDuplicateTestsMessage();
    public static string get_TheValueIsOutOfRangeForTheTestParameterTypeMessage();
    public static string get_ValueOfTypeIsIncorrectOrIsNotAssignableToTheTestMethodsExpectedResultOfTypeMessage();
    public static string get_WithTheCurrentStepTheTestWillReachButNotCheckRangeAndStepValuesMessage();
    public static string get_ConsoleOutputInXunitTests();
    public static string get_XunitTestsShouldUseITestOutputHelperInsteadOfSystemConsole();
    public static string get_XunitTestsShouldUseITestOutputHelperInsteadOfSystemConsoleMessage();
    public static string get_AddsTestCaseAttributeToNUnitTestMethod_Text();
}
internal class JetBrains.ReSharper.UnitTesting.Analysis.Xunit.IntroduceITestOutputHelperFix : QuickFixBase {
    private IMethodDeclaration myMethodDeclaration;
    private IInvocationExpression myInvocationExpression;
    public string Text { get; }
    public IntroduceITestOutputHelperFix(XunitTestWithConsoleOutputWarning error);
    public virtual string get_Text();
    public virtual bool IsAvailable(IUserDataHolder cache);
    protected virtual Action`1<ITextControl> ExecutePsiTransaction(ISolution solution, IProgressIndicator progress);
    [CanBeNullAttribute]
private ICSharpTypeMemberDeclaration GetTestOutputHelperMember();
}
public abstract class JetBrains.ReSharper.UnitTesting.Analysis.Xunit.References.DataReferenceFactoryBase : object {
    protected IClrTypeName DataAttributeName { get; }
    protected string TypeMemberName { get; }
    protected abstract virtual IClrTypeName get_DataAttributeName();
    protected abstract virtual string get_TypeMemberName();
    protected abstract virtual bool IsDataAttributeName(string name);
    public sealed virtual ReferenceCollection GetReferences(ITreeNode element, ReferenceCollection oldReferences);
    public sealed virtual bool HasReference(ITreeNode element, IReferenceNameContainer names);
    [CanBeNullAttribute]
private static ITypeElement GetTypeof(ITypeofExpression typeofExpression);
    protected abstract virtual IReference CreateReference(ITypeElement typeElement, ILiteralExpression literalExpression);
    [CompilerGeneratedAttribute]
private bool <GetReferences>b__5_0(IPropertyAssignment a);
}
public class JetBrains.ReSharper.UnitTesting.Analysis.Xunit.References.ExternalAccessContext : object {
    private ITreeNode myElement;
    public ExternalAccessContext(ITreeNode element);
    public sealed virtual ITypeElement GetAccessContainingTypeElement();
    public sealed virtual Staticness GetStaticness();
    public sealed virtual QualifierKind GetQualifierKind();
    public sealed virtual ITypeElement GetQualifierTypeElement();
    public sealed virtual IPsiModule GetPsiModule();
    public sealed virtual IPsiSourceFile GetSourceFile();
}
[LanguageAttribute("JetBrains.ReSharper.Psi.CSharp.CSharpLanguage", "16")]
internal class JetBrains.ReSharper.UnitTesting.Analysis.Xunit.References.MemberDataAttributeUsageProcessor : object {
    public sealed virtual void ProcessElement(ITreeNode treeNode, IParameters parameters);
    public sealed virtual void ProcessMemberUsage(ITypeMember member, IReference reference, IParameters parameters);
    public sealed virtual void ProcessDeclaration(IDeclaration declaration, IDeclaredElement element, IParameters parameters);
}
public class JetBrains.ReSharper.UnitTesting.Analysis.Xunit.References.MemberDataReference : TreeReferenceBase`1<ILiteralExpression> {
    private ISymbolFilter myExactNameFilter;
    private ISymbolFilter myPropertyFilter;
    private ITypeElement myTypeElement;
    public MemberDataReference(ITypeElement typeElement, ILiteralExpression literal);
    public virtual string GetName();
    public virtual ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
    public virtual TreeTextRange GetTreeTextRange();
    public virtual IReference BindTo(IDeclaredElement element);
    public virtual IReference BindTo(IDeclaredElement element, ISubstitution substitution);
    public virtual IAccessContext GetAccessContext();
    public sealed virtual ISymbolTable GetCompletionSymbolTable();
    public virtual ResolveResultWithInfo ResolveWithoutCache();
    private bool FilterToApplicableMembers(ISymbolInfo symbolInfo);
}
public class JetBrains.ReSharper.UnitTesting.Analysis.Xunit.References.MemberDataReferenceFactory : DataReferenceFactoryBase {
    public static IClrTypeName MemberDataAttributeName;
    protected IClrTypeName DataAttributeName { get; }
    protected string TypeMemberName { get; }
    private static MemberDataReferenceFactory();
    protected virtual IClrTypeName get_DataAttributeName();
    protected virtual string get_TypeMemberName();
    protected virtual bool IsDataAttributeName(string name);
    protected virtual IReference CreateReference(ITypeElement typeElement, ILiteralExpression literalExpression);
}
[ReferenceProviderFactoryAttribute("16")]
public class JetBrains.ReSharper.UnitTesting.Analysis.Xunit.References.MemberDataReferenceProviderFactory : object {
    [CompilerGeneratedAttribute]
private ISignal`1<IReferenceProviderFactory> <Changed>k__BackingField;
    public ISignal`1<IReferenceProviderFactory> Changed { get; }
    public MemberDataReferenceProviderFactory(Lifetime lifetime);
    public sealed virtual IReferenceFactory CreateFactory(IPsiSourceFile sourceFile, IFile file, IWordIndex wordIndexForChecks);
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<IReferenceProviderFactory> get_Changed();
}
public class JetBrains.ReSharper.UnitTesting.Analysis.Xunit.References.PropertyDataReference : TreeReferenceBase`1<ILiteralExpression> {
    private ISymbolFilter myExactNameFilter;
    private ISymbolFilter myPropertyFilter;
    private ITypeElement myTypeElement;
    public PropertyDataReference(ITypeElement typeElement, ILiteralExpression literal);
    public virtual string GetName();
    public virtual ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
    public virtual TreeTextRange GetTreeTextRange();
    public virtual IReference BindTo(IDeclaredElement element);
    public virtual IReference BindTo(IDeclaredElement element, ISubstitution substitution);
    public virtual IAccessContext GetAccessContext();
    public sealed virtual ISymbolTable GetCompletionSymbolTable();
    public virtual ResolveResultWithInfo ResolveWithoutCache();
    private static bool FilterToApplicableProperties(ISymbolInfo symbolInfo);
}
public class JetBrains.ReSharper.UnitTesting.Analysis.Xunit.References.PropertyDataReferenceFactory : DataReferenceFactoryBase {
    private static IClrTypeName ourPropertyDataAttribute;
    protected IClrTypeName DataAttributeName { get; }
    protected string TypeMemberName { get; }
    private static PropertyDataReferenceFactory();
    protected virtual IClrTypeName get_DataAttributeName();
    protected virtual string get_TypeMemberName();
    protected virtual bool IsDataAttributeName(string name);
    protected virtual IReference CreateReference(ITypeElement typeElement, ILiteralExpression literalExpression);
}
[ReferenceProviderFactoryAttribute("16")]
public class JetBrains.ReSharper.UnitTesting.Analysis.Xunit.References.PropertyDataReferenceProviderFactory : object {
    [CompilerGeneratedAttribute]
private ISignal`1<IReferenceProviderFactory> <Changed>k__BackingField;
    public ISignal`1<IReferenceProviderFactory> Changed { get; }
    public PropertyDataReferenceProviderFactory(Lifetime lifetime);
    public sealed virtual IReferenceFactory CreateFactory(IPsiSourceFile sourceFile, IFile file, IWordIndex wordIndexForChecks);
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<IReferenceProviderFactory> get_Changed();
}
[RegisterConfigurableSeverityAttribute("Xunit.XunitTestWithConsoleOutput", "", "", "", "Xunit", "", "JetBrains.ReSharper.UnitTesting.Analysis.Resources.Strings", "ConsoleOutputInXunitTests", "", "JetBrains.ReSharper.UnitTesting.Analysis.Resources.Strings", "XunitTestsShouldUseITestOutputHelperInsteadOfSystemConsole", "4")]
public class JetBrains.ReSharper.UnitTesting.Analysis.Xunit.RegisterSeverityComponent07A7A8B66386BB7E4AC730A1072879D14DE38EE1234738FC70616EDEEBD6553D : object {
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.UnitTesting.Analysis.Xunit.XUnitPsiEx : object {
    [ExtensionAttribute]
public static bool IsXUnitInlineDataAttribute(IAttribute attribute);
    [ExtensionAttribute]
public static bool IsAutoFixtureXUnitInlineAutoDataAttribute(IAttribute attribute);
}
[ElementProblemAnalyzerAttribute("16", "Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.ReSharper.UnitTesting.Analysis.Xunit.XunitTestWithConsoleOutputProblemAnalyzer : ElementProblemAnalyzer`1<IInvocationExpression> {
    [NotNullAttribute]
private static IClrTypeName[] ourTestAttributeNames;
    [NotNullAttribute]
private IUnitTestAttributeChecker myUnitTestAttributeCache;
    public XunitTestWithConsoleOutputProblemAnalyzer(IUnitTestAttributeChecker unitTestAttributeCache);
    private static XunitTestWithConsoleOutputProblemAnalyzer();
    protected virtual void Run(IInvocationExpression invocationExpression, ElementProblemAnalyzerData data, IHighlightingConsumer consumer);
}
[ConfigurableSeverityHighlightingAttribute("Xunit.XunitTestWithConsoleOutput", "CSHARP")]
public class JetBrains.ReSharper.UnitTesting.Analysis.Xunit.XunitTestWithConsoleOutputWarning : object {
    private string MESSAGE;
    public static string HIGHLIGHTING_ID;
    [CompilerGeneratedAttribute]
private IMethodDeclaration <MethodDeclaration>k__BackingField;
    [CompilerGeneratedAttribute]
private IInvocationExpression <InvocationExpression>k__BackingField;
    public IMethodDeclaration MethodDeclaration { get; }
    public IInvocationExpression InvocationExpression { get; }
    public string ToolTip { get; }
    public string ErrorStripeToolTip { get; }
    public XunitTestWithConsoleOutputWarning(IMethodDeclaration methodDeclaration, IInvocationExpression invocationExpression);
    [CompilerGeneratedAttribute]
public IMethodDeclaration get_MethodDeclaration();
    [CompilerGeneratedAttribute]
public IInvocationExpression get_InvocationExpression();
    public sealed virtual string get_ToolTip();
    public sealed virtual string get_ErrorStripeToolTip();
    public sealed virtual DocumentRange CalculateRange();
    public sealed virtual bool IsValid();
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.UnitTesting.Analysis.Xunit.XunitWarningsQuickFixRegistration : object {
    public IEnumerable`1<Type> Dependencies { get; }
    public sealed virtual IEnumerable`1<Type> get_Dependencies();
    public sealed virtual void Register(IQuickFixesRegistrar table);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.UnitTesting.Analysis.ZoneMarker : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
