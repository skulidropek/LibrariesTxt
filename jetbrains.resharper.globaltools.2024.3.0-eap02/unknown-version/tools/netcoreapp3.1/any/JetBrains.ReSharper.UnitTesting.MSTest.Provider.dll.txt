public interface JetBrains.ReSharper.UnitTestFramework.DotNetCore.Common.ITestElementMapper {
    [NotNullAttribute]
public abstract virtual IUnitTestElement Map(Test test, bool isDiscovery, Boolean& wasChanged);
}
public interface JetBrains.ReSharper.UnitTestFramework.DotNetCore.Common.ITestElementMapperFactory {
    [NotNullAttribute]
public abstract virtual ITestElementMapper Create(UnitTestElementOrigin origin, IProject project, TargetFrameworkId targetFrameworkId);
}
public class JetBrains.ReSharper.UnitTestFramework.DotNetCore.Common.Test : object {
    [CompilerGeneratedAttribute]
private Uri <ExecutorUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullyQualifiedName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Traits>k__BackingField;
    [CompilerGeneratedAttribute]
private object <NativeObject>k__BackingField;
    public Uri ExecutorUri { get; public set; }
    public string FullyQualifiedName { get; public set; }
    public string Source { get; public set; }
    public string DisplayName { get; public set; }
    public IDictionary`2<string, object> Properties { get; public set; }
    public IDictionary`2<string, string> Traits { get; public set; }
    public object NativeObject { get; public set; }
    [CompilerGeneratedAttribute]
public Uri get_ExecutorUri();
    [CompilerGeneratedAttribute]
public void set_ExecutorUri(Uri value);
    [CompilerGeneratedAttribute]
public string get_FullyQualifiedName();
    [CompilerGeneratedAttribute]
public void set_FullyQualifiedName(string value);
    [CompilerGeneratedAttribute]
public string get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(string value);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_Properties();
    [CompilerGeneratedAttribute]
public void set_Properties(IDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Traits();
    [CompilerGeneratedAttribute]
public void set_Traits(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public object get_NativeObject();
    [CompilerGeneratedAttribute]
public void set_NativeObject(object value);
}
public abstract class JetBrains.ReSharper.UnitTestFramework.DotNetCore.Common.TestElementMapper : object {
    private static Regex ourCategoryRegexp;
    [CompilerGeneratedAttribute]
private IProject <Project>k__BackingField;
    [CompilerGeneratedAttribute]
private TargetFrameworkId <TargetFrameworkId>k__BackingField;
    [NotNullAttribute]
public IProject Project { get; }
    [NotNullAttribute]
public TargetFrameworkId TargetFrameworkId { get; }
    protected TestElementMapper(IProject project, TargetFrameworkId targetFrameworkId);
    private static TestElementMapper();
    [CompilerGeneratedAttribute]
public IProject get_Project();
    [CompilerGeneratedAttribute]
public TargetFrameworkId get_TargetFrameworkId();
    public abstract virtual IUnitTestElement Map(Test test, bool isDiscovery, Boolean& wasChanged);
    protected virtual ISet`1<string> GetCategories(Test test);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.UnitTestFramework.DotNetCore.Common.TestObjectsExtensions : object {
    [ExtensionAttribute]
public static string Dump(Test test);
    [ExtensionAttribute]
public static TestOutputType GetTaskOutputType(TestResultMessage message);
}
public enum JetBrains.ReSharper.UnitTestFramework.DotNetCore.Common.TestOutcome : Enum {
    public int value__;
    public static TestOutcome None;
    public static TestOutcome Passed;
    public static TestOutcome Failed;
    public static TestOutcome Skipped;
    public static TestOutcome NotFound;
}
public class JetBrains.ReSharper.UnitTestFramework.DotNetCore.Common.TestResult : object {
    [CompilerGeneratedAttribute]
private Test <TestCase>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <StartTime>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <EndTime>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Duration>k__BackingField;
    [CompilerGeneratedAttribute]
private TestOutcome <Outcome>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorStackTrace>k__BackingField;
    [CompilerGeneratedAttribute]
private TestResultMessage[] <Messages>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Traits>k__BackingField;
    [CompilerGeneratedAttribute]
private object <NativeObject>k__BackingField;
    public Test TestCase { get; public set; }
    public string DisplayName { get; public set; }
    public DateTimeOffset StartTime { get; public set; }
    public DateTimeOffset EndTime { get; public set; }
    public TimeSpan Duration { get; public set; }
    public TestOutcome Outcome { get; public set; }
    public string ErrorMessage { get; public set; }
    public string ErrorStackTrace { get; public set; }
    public TestResultMessage[] Messages { get; public set; }
    public IDictionary`2<string, object> Properties { get; public set; }
    public IDictionary`2<string, string> Traits { get; public set; }
    public object NativeObject { get; public set; }
    [CompilerGeneratedAttribute]
public Test get_TestCase();
    [CompilerGeneratedAttribute]
public void set_TestCase(Test value);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_StartTime();
    [CompilerGeneratedAttribute]
public void set_StartTime(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_EndTime();
    [CompilerGeneratedAttribute]
public void set_EndTime(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public TimeSpan get_Duration();
    [CompilerGeneratedAttribute]
public void set_Duration(TimeSpan value);
    [CompilerGeneratedAttribute]
public TestOutcome get_Outcome();
    [CompilerGeneratedAttribute]
public void set_Outcome(TestOutcome value);
    [CompilerGeneratedAttribute]
public string get_ErrorMessage();
    [CompilerGeneratedAttribute]
public void set_ErrorMessage(string value);
    [CompilerGeneratedAttribute]
public string get_ErrorStackTrace();
    [CompilerGeneratedAttribute]
public void set_ErrorStackTrace(string value);
    [CompilerGeneratedAttribute]
public TestResultMessage[] get_Messages();
    [CompilerGeneratedAttribute]
public void set_Messages(TestResultMessage[] value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_Properties();
    [CompilerGeneratedAttribute]
public void set_Properties(IDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Traits();
    [CompilerGeneratedAttribute]
public void set_Traits(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public object get_NativeObject();
    [CompilerGeneratedAttribute]
public void set_NativeObject(object value);
}
public class JetBrains.ReSharper.UnitTestFramework.DotNetCore.Common.TestResultMessage : object {
    [CompilerGeneratedAttribute]
private string <Category>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public string Category { get; public set; }
    public string Text { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Category();
    [CompilerGeneratedAttribute]
public void set_Category(string value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
}
internal class JetBrains.ReSharper.UnitTesting.MSTest.Provider.DotNetCore.MsTestDotNetCoreTestElementMapper : TestElementMapper {
    [NotNullAttribute]
private MsTestElementFactory myElementFactory;
    [NotNullAttribute]
private IMsTestServices myMsTestServices;
    [NotNullAttribute]
private Lazy`1<ISymbolScope> mySymbolScope;
    public MsTestDotNetCoreTestElementMapper(IProject project, TargetFrameworkId targetFrameworkId, MsTestElementFactory elementFactory, IMsTestServices msTestServices);
    public virtual IUnitTestElement Map(Test test, bool isDiscovery, Boolean& wasChanged);
    public static string TypeName(Test test);
    public static string MethodName(Test test);
    [CompilerGeneratedAttribute]
private ISymbolScope <.ctor>b__3_0();
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.UnitTesting.MSTest.Provider.DotNetCore.MsTestDotNetCoreTestElementMapperFactory : object {
    [NotNullAttribute]
private IMsTestServices myServices;
    public MsTestDotNetCoreTestElementMapperFactory(IMsTestServices services);
    public sealed virtual ITestElementMapper Create(UnitTestElementOrigin origin, IProject project, TargetFrameworkId targetFrameworkId);
}
public abstract class JetBrains.ReSharper.UnitTesting.MSTest.Provider.DotNetCore.Proprietary.Mappings.MsTestElementMapping`2 : object {
    [NotNullAttribute]
protected IMsTestServices myServices;
    protected MsTestElementMapping`2(IMsTestServices services);
    public abstract virtual TTask ToRemoteTask(TElement element, ITestRunnerExecutionContext ctx);
    public abstract virtual TElement ToElement(TTask task, ITestRunnerDiscoveryContext ctx, IUnitTestElementObserver observer);
    [NotNullAttribute]
protected MsTestElementFactory GetFactory(ITestRunnerDiscoveryContext ctx);
    private sealed virtual override RemoteTask JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.IUnitTestElementToRemoteTaskMapping<TElement>.GetRemoteTask(TElement element, ITestRunnerExecutionContext ctx);
    private sealed virtual override IUnitTestElement JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.IRemoteTaskToUnitTestElementMapping<TTask>.GetElement(TTask task, ITestRunnerDiscoveryContext ctx, IUnitTestElementObserver observer);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.UnitTesting.MSTest.Provider.DotNetCore.Proprietary.Mappings.MsTestTestClassMapping : MsTestElementMapping`2<MsTestTestClassElement, MsTestTestClassTask> {
    public MsTestTestClassMapping(IMsTestServices services);
    public virtual MsTestTestClassTask ToRemoteTask(MsTestTestClassElement element, ITestRunnerExecutionContext ctx);
    public virtual MsTestTestClassElement ToElement(MsTestTestClassTask task, ITestRunnerDiscoveryContext ctx, IUnitTestElementObserver observer);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.UnitTesting.MSTest.Provider.DotNetCore.Proprietary.Mappings.MsTestTestMethodMapping : MsTestElementMapping`2<MsTestTestMethodElement, MsTestTestMethodTask> {
    public MsTestTestMethodMapping(IMsTestServices services);
    public virtual MsTestTestMethodTask ToRemoteTask(MsTestTestMethodElement element, ITestRunnerExecutionContext ctx);
    public virtual MsTestTestMethodElement ToElement(MsTestTestMethodTask task, ITestRunnerDiscoveryContext ctx, IUnitTestElementObserver observer);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.UnitTesting.MSTest.Provider.DotNetCore.Proprietary.Mappings.MsTestTestRowMapping : MsTestElementMapping`2<MsTestTestRowElement, MsTestTestRowTask> {
    public MsTestTestRowMapping(IMsTestServices services);
    public virtual MsTestTestRowTask ToRemoteTask(MsTestTestRowElement element, ITestRunnerExecutionContext ctx);
    public virtual MsTestTestRowElement ToElement(MsTestTestRowTask task, ITestRunnerDiscoveryContext ctx, IUnitTestElementObserver observer);
}
public static class JetBrains.ReSharper.UnitTesting.MSTest.Provider.DotNetCore.Proprietary.Mappings.NUnitElementMappingKeys : object {
    [NotNullAttribute]
public static Key`1<MsTestElementFactory> ElementFactoryKey;
    private static NUnitElementMappingKeys();
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.UnitTesting.MSTest.Provider.DotNetCore.Proprietary.MsTestTestExplorerFromArtifacts : Switching`1<MsTestProviderSettings> {
    public MsTestTestExplorerFromArtifacts(ISettingsStore settingsStore, MsTestTestExplorerFromMetadata metadataExplorer, MsTestTestExplorerFromTestRunner testRunnerExplorer);
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.UnitTesting.MSTest.Provider.DotNetCore.Proprietary.MsTestTestExplorerFromMetadata : Metadata {
    [NotNullAttribute]
private IMsTestServices myServices;
    [NotNullAttribute]
private IMsTestFlavorResolver myFlavorResolver;
    [NotNullAttribute]
private ILogger myLogger;
    public MsTestTestExplorerFromMetadata(IMsTestServices services, IMsTestFlavorResolver flavorResolver, AssemblyToAssemblyReferencesResolveManager resolveManager, ResolveContextManager resolveContextManager, NuGetInstalledPackageChecker installedPackageChecker, ILogger logger);
    public virtual PertinenceResult IsSupported(IProject project, TargetFrameworkId targetFrameworkId);
    protected virtual void ProcessProject(MetadataLoader loader, IUnitTestElementObserver observer, CancellationToken token);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.UnitTesting.MSTest.Provider.DotNetCore.Proprietary.MsTestTestExplorerFromMetadata/<GetRequiredNuGetDependencies>d__6")]
protected virtual IEnumerable`1<string> GetRequiredNuGetDependencies(IProject project, TargetFrameworkId targetFrameworkId);
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.UnitTesting.MSTest.Provider.DotNetCore.Proprietary.MsTestTestExplorerFromTestRunner : TestRunner {
    [NotNullAttribute]
private IMsTestFlavorResolver myFlavorResolver;
    public MsTestTestExplorerFromTestRunner(MsTestProvider provider, ITestRunnerAgentManager agentManager, MsTestTestRunnerAdapter adapter, IMsTestFlavorResolver flavorResolver, NuGetInstalledPackageChecker installedPackageChecker);
    public virtual PertinenceResult IsSupported(IProject project, TargetFrameworkId targetFrameworkId);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.UnitTesting.MSTest.Provider.DotNetCore.Proprietary.MsTestTestExplorerFromTestRunner/<GetRequiredNuGetDependencies>d__3")]
protected virtual IEnumerable`1<string> GetRequiredNuGetDependencies(IProject project, TargetFrameworkId targetFrameworkId);
}
[SolutionComponentAttribute("10")]
public class JetBrains.ReSharper.UnitTesting.MSTest.Provider.DotNetCore.Proprietary.MsTestTestRunnerAdapter : object {
    [NotNullAttribute]
private ISettingsOptimization mySettingsOptimization;
    [NotNullAttribute]
private IMsTestAgentInfoProvider myMsTestAgentInfoProvider;
    [NotNullAttribute]
private NuGetPackageReferenceTracker myNuGetPackageReferenceTracker;
    [CompilerGeneratedAttribute]
private SettingsKey <KeyExposed>k__BackingField;
    public Assembly InProcessAdapterAssembly { get; }
    public int Priority { get; }
    public SettingsKey KeyExposed { get; }
    public MsTestTestRunnerAdapter(ISettingsStore settingsStore, ISettingsOptimization settingsOptimization, IMsTestAgentInfoProvider msTestAgentInfoProvider, NuGetPackageReferenceTracker nuGetPackageReferenceTracker);
    public sealed virtual Assembly get_InProcessAdapterAssembly();
    public sealed virtual int get_Priority();
    public sealed virtual TestAdapterLoader GetTestAdapterLoader(ITestRunnerContext ctx);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.UnitTesting.MSTest.Provider.DotNetCore.Proprietary.MsTestTestRunnerAdapter/<GetProbingPaths>d__9")]
private IEnumerable`1<string> GetProbingPaths(ITestRunnerContext ctx, TargetFrameworkId targetFrameworkId);
    public sealed virtual TestContainer GetTestContainer(ITestRunnerContext ctx);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.UnitTesting.MSTest.Provider.DotNetCore.Proprietary.MsTestTestRunnerAdapter/<GetMessageHandlers>d__11")]
public sealed virtual IEnumerable`1<IMessageHandlerMarker> GetMessageHandlers(ITestRunnerContext ctx);
    public sealed virtual MsTestProviderSettings ReadData(Lifetime lifetime, IContextBoundSettingsStore store);
    [CompilerGeneratedAttribute]
public sealed virtual SettingsKey get_KeyExposed();
    [CompilerGeneratedAttribute]
internal static TargetFrameworkId[] <GetProbingPaths>g__GetSupportedTargetFrameworks|9_0(NuGetNupkg pkg);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.UnitTesting.MSTest.Provider.DotNetCore.Proprietary.MsTestTestRunnerRunStrategy : TestRunnerRunStrategy {
    [NotNullAttribute]
private IMsTestAgentInfoProvider myVsInfoProvider;
    public MsTestTestRunnerRunStrategy(IDataCollectorFactory dataCollectorFactory, ITestRunnerAgentManager agentManager, MsTestTestRunnerAdapter adapter, IUnitTestProjectArtifactResolver artifactResolver, IMsTestAgentInfoProvider vsInfoProvider);
    public virtual IRuntimeDescriptor GetRuntimeDescriptor(IUnitTestLaunch launch, IUnitTestElement element);
}
[ExtensionAttribute]
internal static class JetBrains.ReSharper.UnitTesting.MSTest.Provider.DotNetCore.Proprietary.ProjectExtensions : object {
    [NotNullAttribute]
private static AssemblyNameInfo ourTestAdapterAsmName;
    private static ProjectExtensions();
    [ExtensionAttribute]
public static bool ReferencesMsTestTestAdapter(IProject project, TargetFrameworkId targetFrameworkId);
}
[ExtensionAttribute]
internal static class JetBrains.ReSharper.UnitTesting.MSTest.Provider.DotNetCore.TestCaseExtensions : object {
    [ExtensionAttribute]
public static String[] GetCategories(Test test);
}
[MsTestFlavorAttribute("7", "16")]
internal class JetBrains.ReSharper.UnitTesting.MSTest.Provider.DotNetCore.V2.MsTestAttributesProvider : MsTestAttributesProviderBase {
    private static IClrTypeName ourTestClassAttribute;
    private static IClrTypeName ourTestMethodAttribute;
    private static IClrTypeName ourDataTestMethodAttribute;
    private static IClrTypeName ourDataRowAttribute;
    private static IClrTypeName ourIgnoreAttribute;
    private static IClrTypeName ourCategoryAttribute;
    private static IClrTypeName ourDeploymentItemAttribute;
    private static IClrTypeName[] ourTestClassAttributes;
    private static IClrTypeName[] ourTestMethodAttributes;
    private static IClrTypeName[] ourCategoryAttributes;
    private static IClrTypeName[] ourIgnoreAttributes;
    private static IClrTypeName[] ourDataRowAttributes;
    private static IClrTypeName[] ourDeploymentItemAttributes;
    public IEnumerable`1<IClrTypeName> TestClassAttributes { get; }
    public IEnumerable`1<IClrTypeName> TestMethodAttributes { get; }
    public IEnumerable`1<IClrTypeName> IgnoreAttributes { get; }
    public IEnumerable`1<IClrTypeName> DeploymentItemAttributes { get; }
    public IEnumerable`1<IClrTypeName> CategoryAttributes { get; }
    public IEnumerable`1<IClrTypeName> DataRowAttributes { get; }
    public bool CanHaveTestWithParameters { get; }
    public MsTestAttributesProvider(IUnitTestAttributeChecker attributeChecker);
    private static MsTestAttributesProvider();
    public virtual IEnumerable`1<IClrTypeName> get_TestClassAttributes();
    public virtual IEnumerable`1<IClrTypeName> get_TestMethodAttributes();
    public virtual IEnumerable`1<IClrTypeName> get_IgnoreAttributes();
    public virtual IEnumerable`1<IClrTypeName> get_DeploymentItemAttributes();
    public virtual IEnumerable`1<IClrTypeName> get_CategoryAttributes();
    public virtual IEnumerable`1<IClrTypeName> get_DataRowAttributes();
    public virtual bool get_CanHaveTestWithParameters();
}
public class JetBrains.ReSharper.UnitTesting.MSTest.Provider.Elements.DeploymentItem : object {
    [CompilerGeneratedAttribute]
private string <SourcePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RelativeOutputDirectory>k__BackingField;
    public string SourcePath { get; public set; }
    public string RelativeOutputDirectory { get; public set; }
    [CompilerGeneratedAttribute]
public string get_SourcePath();
    [CompilerGeneratedAttribute]
public void set_SourcePath(string value);
    [CompilerGeneratedAttribute]
public string get_RelativeOutputDirectory();
    [CompilerGeneratedAttribute]
public void set_RelativeOutputDirectory(string value);
}
public interface JetBrains.ReSharper.UnitTesting.MSTest.Provider.Elements.IMsTestTestElement {
    public ISet`1<DeploymentItem> OwnDeploymentItems { get; public set; }
    public abstract virtual ISet`1<DeploymentItem> get_OwnDeploymentItems();
    public abstract virtual void set_OwnDeploymentItems(ISet`1<DeploymentItem> value);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.UnitTesting.MSTest.Provider.Elements.IMsTestTestElementExtensions : object {
    [IteratorStateMachineAttribute("JetBrains.ReSharper.UnitTesting.MSTest.Provider.Elements.IMsTestTestElementExtensions/<DeploymentItems>d__0")]
[ExtensionAttribute]
public static IEnumerable`1<DeploymentItem> DeploymentItems(IMsTestTestElement element);
}
public class JetBrains.ReSharper.UnitTesting.MSTest.Provider.Elements.MsTestTestClassElement : FromClass {
    [CompilerGeneratedAttribute]
private ISet`1<DeploymentItem> <OwnDeploymentItems>k__BackingField;
    public ISet`1<DeploymentItem> OwnDeploymentItems { get; public set; }
    public string Kind { get; }
    public MsTestTestClassElement(IClrTypeName typeName);
    [CompilerGeneratedAttribute]
public sealed virtual ISet`1<DeploymentItem> get_OwnDeploymentItems();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OwnDeploymentItems(ISet`1<DeploymentItem> value);
    public virtual string get_Kind();
}
public class JetBrains.ReSharper.UnitTesting.MSTest.Provider.Elements.MsTestTestMethodElement : FromMethod`1<MsTestTestClassElement> {
    [CompilerGeneratedAttribute]
private ISet`1<DeploymentItem> <OwnDeploymentItems>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDataDriven>k__BackingField;
    public ISet`1<DeploymentItem> OwnDeploymentItems { get; public set; }
    [PersistAttribute]
public bool IsDataDriven { get; public set; }
    public string Kind { get; }
    public MsTestTestMethodElement(MsTestTestClassElement parent, string methodName, string declaredInTypeShortName);
    [CompilerGeneratedAttribute]
public sealed virtual ISet`1<DeploymentItem> get_OwnDeploymentItems();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OwnDeploymentItems(ISet`1<DeploymentItem> value);
    [CompilerGeneratedAttribute]
public bool get_IsDataDriven();
    [CompilerGeneratedAttribute]
public void set_IsDataDriven(bool value);
    public virtual string get_Kind();
    protected virtual IDeclaredElement GetTypeMember(ITypeElement declaredType);
}
public class JetBrains.ReSharper.UnitTesting.MSTest.Provider.Elements.MsTestTestRowElement : Row {
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private ISet`1<DeploymentItem> <OwnDeploymentItems>k__BackingField;
    [PersistAttribute]
[NotNullAttribute]
public string DisplayName { get; public set; }
    public bool IsNotRunnableStandalone { get; }
    public string Kind { get; }
    public string ShortName { get; }
    public ISet`1<DeploymentItem> OwnDeploymentItems { get; public set; }
    public MsTestTestRowElement(MsTestTestMethodElement parent, string displayName);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
    public sealed virtual bool get_IsNotRunnableStandalone();
    public virtual string get_Kind();
    public virtual string get_ShortName();
    [CompilerGeneratedAttribute]
public sealed virtual ISet`1<DeploymentItem> get_OwnDeploymentItems();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OwnDeploymentItems(ISet`1<DeploymentItem> value);
}
[UnitTestElementsTransformationRuleAttribute("16")]
public class JetBrains.ReSharper.UnitTesting.MSTest.Provider.EnsureAncestorsAddedToExecutedElementsRule : object {
    public sealed virtual IUnitTestElementCriterion Apply(IUnitTestElementCriterion criterion, IUnitTestSession session, IHostProvider hostProvider);
    public sealed virtual void Apply(ISet`1<IUnitTestElement> elements, IUnitTestSession session, IHostProvider hostProvider);
}
public class JetBrains.ReSharper.UnitTesting.MSTest.Provider.Execution.AsyncObjectPool`1 : object {
    private PoolItem[] myItems;
    private Func`1<T> myFactory;
    private LinkedList`1<TaskCompletionSource`1<T>> myWaitingQueue;
    public AsyncObjectPool`1(int capacity, Func`1<T> factory);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.UnitTesting.MSTest.Provider.Execution.AsyncObjectPool`1/<Acquire>d__4")]
public Task`1<T> Acquire(CancellationToken token);
    private void RemoveFromWaitingQueueAndCancel(TaskCompletionSource`1<T> tcs);
    public void Release(T obj);
    private int GetItemIndex(T obj);
    public void Remove(T obj);
}
[ServiceBehaviorAttribute]
internal class JetBrains.ReSharper.UnitTesting.MSTest.Provider.Execution.DataCollector : object {
    [NotNullAttribute]
private IMsTestExecutionProtocol myProtocol;
    [NotNullAttribute]
private IMsTestEventsSink mySink;
    [NotNullAttribute]
private ILogger myLogger;
    [NotNullAttribute]
private Discovery myDiscoveryEngineInvoker;
    [NotNullAttribute]
private XmlDocument myRunSettings;
    [NotNullAttribute]
private Random mySeed;
    private IPreparedProcess myProcess;
    private ResurrectableProxy`1<ITestRunEventSinkService> myTestRunProxy;
    private ResurrectableProxy`1<ITestCaseEventSinkService> myTestCaseProxy;
    private ServiceHost myDataCollectorServer;
    public Uri Address { get; }
    public DataCollector(IMsTestExecutionProtocol protocol, IMsTestEventsSink sink, IMsTestAgentInfoProvider vsInfoProvider, XmlDocument runSettings, ILogger logger);
    public Uri get_Address();
    public void Initialize();
    private bool HasNonDummyDataCollector();
    public void Close();
    private void StartRemoteDataCollector();
    private void StartLocalDataCollector();
    public sealed virtual void TestConnection();
    public sealed virtual void BeforeTestCaseStart(TestCase testCase);
    public sealed virtual Collection`1<AttachmentSet> AfterTestCaseEnd(TestCase testCase, TestOutcome testOutcome);
    public sealed virtual BeforeTestRunStartResult BeforeTestRunStart(string settingsXml, bool resetDataCollectors, bool isRunStartingNow);
    public sealed virtual Collection`1<AttachmentSet> AfterTestRunEnd(bool isCanceled);
}
public interface JetBrains.ReSharper.UnitTesting.MSTest.Provider.Execution.IMsTestState {
}
public interface JetBrains.ReSharper.UnitTesting.MSTest.Provider.Execution.IMsTestTrigger {
}
public interface JetBrains.ReSharper.UnitTesting.MSTest.Provider.Execution.IRemoteMsTestTrigger {
}
public interface JetBrains.ReSharper.UnitTesting.MSTest.Provider.Execution.IRemoteMsTestTrigger`1 {
}
public interface JetBrains.ReSharper.UnitTesting.MSTest.Provider.Execution.ITestAdapterTempCopy {
    [NotNullAttribute]
public FileSystemPath AdapterPath { get; }
    public abstract virtual FileSystemPath get_AdapterPath();
    public abstract virtual void AcquireLock();
    public abstract virtual void ReleaseLock();
}
public class JetBrains.ReSharper.UnitTesting.MSTest.Provider.Execution.MessageType : object {
    public static string Connected;
    public static string RunStarted;
    public static string TestStarted;
    public static string TestFinished;
    public static string RunFinished;
    public static string DiscoveryStarted;
    public static string TestFound;
    public static string DiscoveryFinished;
    private static MessageType();
}
public abstract class JetBrains.ReSharper.UnitTesting.MSTest.Provider.Execution.MsTestRunStrategyBase : object {
    [NotNullAttribute]
private static Key`1<CancellationTokenSource> ourExecutorKey;
    [NotNullAttribute]
private IVsTestRuntimeEnvironmentFactory myRuntimeEnvironmentFactory;
    [NotNullAttribute]
private IMsTestRunnerFactoryFactory myRunnerFactoryFactory;
    [NotNullAttribute]
private ITestElementMapperFactory myMapperFactory;
    [NotNullAttribute]
private IUnitTestDiscoveryManager myDiscoveryManager;
    [NotNullAttribute]
private IUnitTestResultManager myResultManager;
    [NotNullAttribute]
private RunSettingsVersion myRunSettingsVersion;
    [NotNullAttribute]
private ILogger myLogger;
    protected MsTestRunStrategyBase(IVsTestRuntimeEnvironmentFactory runtimeEnvironmentFactory, IMsTestRunnerFactoryFactory runnerFactoryFactory, ITestElementMapperFactory mapperFactory, IUnitTestDiscoveryManager discoveryManager, IUnitTestResultManager resultManager, RunSettingsVersion runSettingsVersion, ILogger logger);
    private static MsTestRunStrategyBase();
    public sealed virtual bool RequiresProjectBuild(IProject project);
    public sealed virtual bool RequiresProjectExplorationAfterBuild(IProject project);
    public sealed virtual IProject GetProjectForPropertiesRefreshBeforeLaunch(IUnitTestElement element);
    public sealed virtual bool SupportsPreloading();
    public sealed virtual IRuntimeDescriptor GetRuntimeDescriptor(IUnitTestLaunch launch, IUnitTestElement element);
    public sealed virtual Task Run(IUnitTestRun run);
    public sealed virtual void Cancel(IUnitTestRun run);
    public sealed virtual void Abort(IUnitTestRun run);
}
public static class JetBrains.ReSharper.UnitTesting.MSTest.Provider.Execution.MsTestState : object {
    public static IMsTestState Disconnected;
    public static IMsTestState Connecting;
    public static IMsTestState Connected;
    public static IMsTestState Terminating;
    public static IMsTestState Aborted;
    public static IMsTestState Failed;
    public static IMsTestState Completed;
    public static IMsTestState RunnerFailure;
    private static MsTestState();
}
public static class JetBrains.ReSharper.UnitTesting.MSTest.Provider.Execution.MsTestTrigger : object {
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.UnitTesting.MSTest.Provider.Execution.TestAdapterCache : object {
    [NotNullAttribute]
private ConcurrentDictionary`2<AssemblyId, TestAdapterTempCopy> myCachedAdapters;
    [NotNullAttribute]
private FileSystemPath myAdapterCacheRoot;
    [NotNullAttribute]
public IEnumerable`1<ITestAdapterTempCopy> CreateSideCopy(IEnumerable`1<string> adapterPaths);
    [CanBeNullAttribute]
private TestAdapterTempCopy GetAdapterTempCopy(string testAdapterPath);
    private IList`1<FileSystemPath> GetReferencedAssembliesAndSelf(IMetadataAssembly adapter, MetadataLoader loader);
}
public class JetBrains.ReSharper.UnitTesting.MSTest.Provider.Execution.TestHostRuntimeDescriptor : VsTestRuntimeDescriptor {
    public TestHostRuntimeDescriptor(IProject project, TargetPlatform targetPlatform, TargetFrameworkId targetFrameworkId, bool unmanaged);
}
public class JetBrains.ReSharper.UnitTesting.MSTest.Provider.Execution.VsTestRuntimeDescriptor : object {
    [CompilerGeneratedAttribute]
private IProject <Project>k__BackingField;
    [CompilerGeneratedAttribute]
private TargetPlatform <Platform>k__BackingField;
    [CompilerGeneratedAttribute]
private TargetFrameworkId <TargetFrameworkId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasNativeCode>k__BackingField;
    public IProject Project { get; }
    public TargetPlatform Platform { get; }
    public TargetFrameworkId TargetFrameworkId { get; }
    public bool HasNativeCode { get; }
    public VsTestRuntimeDescriptor(IProject project, TargetPlatform targetPlatform, TargetFrameworkId targetFrameworkId, bool unmanaged);
    [CompilerGeneratedAttribute]
public sealed virtual IProject get_Project();
    [CompilerGeneratedAttribute]
public sealed virtual TargetPlatform get_Platform();
    [CompilerGeneratedAttribute]
public sealed virtual TargetFrameworkId get_TargetFrameworkId();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasNativeCode();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public bool Equals(VsTestRuntimeDescriptor obj);
    public virtual string ToString();
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.UnitTesting.MSTest.Provider.Execution.Wcf.ClientBaseExtensions : object {
    [ExtensionAttribute]
public static void SafeClose(ClientBase`1<T> channel);
    [ExtensionAttribute]
private static void DoSafeAbort(ClientBase`1<T> channel);
}
public class JetBrains.ReSharper.UnitTesting.MSTest.Provider.Execution.Wcf.DisposableDuplexClientBase`1 : DuplexClientBase`1<TChannel> {
    [CompilerGeneratedAttribute]
private bool <Disposed>k__BackingField;
    protected bool Disposed { get; private set; }
    public DisposableDuplexClientBase`1(InstanceContext callbackInstance);
    public DisposableDuplexClientBase`1(InstanceContext callbackInstance, string endpointConfigurationName);
    public DisposableDuplexClientBase`1(InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress);
    public DisposableDuplexClientBase`1(InstanceContext callbackInstance, string endpointConfigurationName, EndpointAddress remoteAddress);
    public DisposableDuplexClientBase`1(InstanceContext callbackInstance, Binding binding, EndpointAddress remoteAddress);
    [CompilerGeneratedAttribute]
protected bool get_Disposed();
    [CompilerGeneratedAttribute]
private void set_Disposed(bool value);
    protected virtual override void Finalize();
    public void Close();
    public void Dispose();
    private sealed virtual override void System.IDisposable.Dispose();
    protected virtual void Dispose(bool disposing);
}
[SolutionComponentAttribute("16")]
public class JetBrains.ReSharper.UnitTesting.MSTest.Provider.Execution.Wcf.DoNothingMsTestEventsSink : object {
    public sealed virtual void BeforeTestCaseStart(IUnitTestRun run, TestCase testCase);
    public sealed virtual void AfterTestCaseEnd(IUnitTestRun run, TestCase testCase);
}
public interface JetBrains.ReSharper.UnitTesting.MSTest.Provider.Execution.Wcf.IMsTestEventsSink {
    public abstract virtual void BeforeTestCaseStart(IUnitTestRun run, TestCase testCase);
    public abstract virtual void AfterTestCaseEnd(IUnitTestRun run, TestCase testCase);
}
internal class JetBrains.ReSharper.UnitTesting.MSTest.Provider.Execution.Wcf.ResurrectableProxy`1 : object {
    [NotNullAttribute]
private Func`1<ClientBase`1<T>> myChannelFactory;
    [NotNullAttribute]
private ILogger myLogger;
    private ClientBase`1<T> myChannel;
    public T Channel { get; }
    public Uri Address { get; }
    public ResurrectableProxy`1(Func`1<ClientBase`1<T>> channelFactory, ILogger logger);
    public T get_Channel();
    public Uri get_Address();
    public void Close();
    public void WithTimeout(TimeSpan timeout, Action`1<T> action);
}
[ServiceBehaviorAttribute]
public class JetBrains.ReSharper.UnitTesting.MSTest.Provider.Execution.Wcf.TestCaseEventSinkClient : object {
    [NotNullAttribute]
private IUnitTestRun myRun;
    [NotNullAttribute]
private IMsTestEventsSink mySink;
    [NotNullAttribute]
private ILogger myLogger;
    public TestCaseEventSinkClient(IUnitTestRun run, IMsTestEventsSink sink, ILogger logger);
    public sealed virtual void TestConnection();
    public sealed virtual void BeforeTestCaseStart(TestCase testCase);
    public sealed virtual Collection`1<AttachmentSet> AfterTestCaseEnd(TestCase testCase, TestOutcome testOutcome);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
internal class JetBrains.ReSharper.UnitTesting.MSTest.Provider.Execution.Wcf.TestCaseEventSinkProxy : ClientBase`1<ITestCaseEventSinkService> {
    public TestCaseEventSinkProxy(string endpointConfigurationName);
    public TestCaseEventSinkProxy(string endpointConfigurationName, string remoteAddress);
    public TestCaseEventSinkProxy(string endpointConfigurationName, EndpointAddress remoteAddress);
    public TestCaseEventSinkProxy(Binding binding, EndpointAddress remoteAddress);
    public sealed virtual void TestConnection();
    public sealed virtual void BeforeTestCaseStart(TestCase testCase);
    public sealed virtual Collection`1<AttachmentSet> AfterTestCaseEnd(TestCase testCase, TestOutcome testOutcome);
}
[CallbackBehaviorAttribute]
internal class JetBrains.ReSharper.UnitTesting.MSTest.Provider.Execution.Wcf.TestExecutorServiceClient : object {
    [NotNullAttribute]
private IMsTestExecutionProtocol myProtocol;
    public TestExecutorServiceClient(IMsTestExecutionProtocol protocol);
    public sealed virtual void ReceiveCallbackMessage(CallbackContractName contractName, IEnumerable`1<string> contractMembers);
    public sealed virtual void TestConnection(IEnumerable`1<TestResult> dummyTestResults);
    public sealed virtual void OnTestRunChange(TestRunStats testRunStats, IEnumerable`1<TestResult> newTestResults);
    public sealed virtual void OnTestRunChanges(TestRunStats testRunStats, IEnumerable`1<TestResult> newTestResults, IEnumerable`1<TestCase> inProgressTestCases);
    public sealed virtual void OnLogMessages(IEnumerable`1<LogMessage> messages);
    public sealed virtual void OnRunComplete(bool isCanceled, bool isAborted, ICollection`1<string> executorUris, Exception exception, TestRunStats testRunStats, IEnumerable`1<TestResult> lastChunk, bool adapterHintedToShutdownAfterRun, TimeSpan elapsedTime, ICollection`1<AttachmentSet> runContextAttachments);
    public sealed virtual int LaunchProcessWithDebuggerAttached(string filePath, string workingDirectory, string arguments, IDictionary`2<string, string> environmentVariables);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public class JetBrains.ReSharper.UnitTesting.MSTest.Provider.Execution.Wcf.TestExecutorServiceProxy : DisposableDuplexClientBase`1<ITestExecutorService> {
    public TestExecutorServiceProxy(InstanceContext callbackInstance);
    public TestExecutorServiceProxy(InstanceContext callbackInstance, string endpointConfigurationName);
    public TestExecutorServiceProxy(InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress);
    public TestExecutorServiceProxy(InstanceContext callbackInstance, string endpointConfigurationName, EndpointAddress remoteAddress);
    public TestExecutorServiceProxy(InstanceContext callbackInstance, Binding binding, EndpointAddress remoteAddress);
    public sealed virtual void InitializeConnection(IEnumerable`1<string> pathToAdditionalExtensions, bool loadOnlyWellKnownExtensions);
    public sealed virtual void StartTestRun(IEnumerable`1<TestCase> tests, string testRunSettings, TestExecutionContext executionContext, string dataCollectorServiceUri);
    public sealed virtual void StartTestRun(IEnumerable`1<string> sources, string testRunSettings, TestExecutionContext executionContext, string dataCollectorServiceUri);
    public sealed virtual void CancelTestRun();
    public sealed virtual void Shutdown();
    public sealed virtual void RegisterForChannelFaultEvents(EventHandler action);
    public sealed virtual void UnregisterForChannelFaultEvents(EventHandler action);
    private sealed virtual override void Microsoft.VisualStudio.TestPlatform.Core.ITestExecutorChannel.Close();
    private sealed virtual override void Microsoft.VisualStudio.TestPlatform.Core.ITestExecutorChannel.Dispose();
}
[CallbackBehaviorAttribute]
public class JetBrains.ReSharper.UnitTesting.MSTest.Provider.Execution.Wcf.TestRunEventSinkClient : object {
    [NotNullAttribute]
private ILogger myLogger;
    public TestRunEventSinkClient(ILogger logger);
    public sealed virtual void OnDataCollectionMessage(DataCollectionMessageEventArgs args);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
internal class JetBrains.ReSharper.UnitTesting.MSTest.Provider.Execution.Wcf.TestRunEventSinkProxy : DisposableDuplexClientBase`1<ITestRunEventSinkService> {
    public TestRunEventSinkProxy(InstanceContext callbackInstance);
    public TestRunEventSinkProxy(InstanceContext callbackInstance, string endpointConfigurationName);
    public TestRunEventSinkProxy(InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress);
    public TestRunEventSinkProxy(InstanceContext callbackInstance, string endpointConfigurationName, EndpointAddress remoteAddress);
    public TestRunEventSinkProxy(InstanceContext callbackInstance, Binding binding, EndpointAddress remoteAddress);
    public sealed virtual void TestConnection();
    public sealed virtual BeforeTestRunStartResult BeforeTestRunStart(string settingsXml, bool resetDataCollectors, bool isRunStartingNow);
    public sealed virtual Collection`1<AttachmentSet> AfterTestRunEnd(bool isCanceled);
}
[CallbackBehaviorAttribute]
internal class JetBrains.ReSharper.UnitTesting.MSTest.Provider.Execution.Wcf.TestRunnerServiceClient : object {
    [NotNullAttribute]
private ILogger myLogger;
    [NotNullAttribute]
private IMsTestDiscoveryProtocol myProtocol;
    public TestRunnerServiceClient(IMsTestDiscoveryProtocol protocol, ILogger logger);
    public sealed virtual void TestConnection(IEnumerable`1<TestCase> dummyTests);
    public sealed virtual void DiscoveryComplete(long totalTests, IEnumerable`1<TestCase> lastChunk, bool isAborted);
    public sealed virtual void DiscoveredTests(IEnumerable`1<TestCase> currentlyDiscoveredTests);
    public sealed virtual void TestRunMessage(TestMessageLevel level, string message);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
internal class JetBrains.ReSharper.UnitTesting.MSTest.Provider.Execution.Wcf.TestRunnerServiceProxy : DisposableDuplexClientBase`1<ITestRunnerService> {
    public TestRunnerServiceProxy(InstanceContext callbackInstance);
    public TestRunnerServiceProxy(InstanceContext callbackInstance, string endpointConfigurationName);
    public TestRunnerServiceProxy(InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress);
    public TestRunnerServiceProxy(InstanceContext callbackInstance, string endpointConfigurationName, EndpointAddress remoteAddress);
    public TestRunnerServiceProxy(InstanceContext callbackInstance, Binding binding, EndpointAddress remoteAddress);
    public sealed virtual void DiscoverTests(IEnumerable`1<string> sources, string settings, long frequencyOfDiscoveredTestsEvent, TimeSpan discoveredTestEventTimeout);
    public sealed virtual void InitializeConnection(IEnumerable`1<string> pathToAdditionalExtensions, bool loadOnlyWellKnownExtensions);
}
public class JetBrains.ReSharper.UnitTesting.MSTest.Provider.Execution.Wcf.WcfUtilities : object {
    public static Binding CreateServerBinding();
    private static Binding CreateNamedPipeBinding();
    public static Uri CreateServerUri(string namedPipeProcessToken, string namedPipeIdToken);
    public static Uri CreateServerUri(string namedPipeProcessToken, string namedPipeIdToken, string machineName);
}
public interface JetBrains.ReSharper.UnitTesting.MSTest.Provider.IMsTestAttributesProvider {
    [NotNullAttribute]
[ItemNotNullAttribute]
public IEnumerable`1<IClrTypeName> TestClassAttributes { get; }
    [NotNullAttribute]
[ItemNotNullAttribute]
public IEnumerable`1<IClrTypeName> TestMethodAttributes { get; }
    [NotNullAttribute]
[ItemNotNullAttribute]
public IEnumerable`1<IClrTypeName> DataRowAttributes { get; }
    [NotNullAttribute]
[ItemNotNullAttribute]
public IEnumerable`1<IClrTypeName> IgnoreAttributes { get; }
    [NotNullAttribute]
[ItemNotNullAttribute]
public IEnumerable`1<IClrTypeName> DeploymentItemAttributes { get; }
    public bool CanHaveTestWithParameters { get; }
    public abstract virtual IEnumerable`1<IClrTypeName> get_TestClassAttributes();
    public abstract virtual IEnumerable`1<IClrTypeName> get_TestMethodAttributes();
    public abstract virtual IEnumerable`1<IClrTypeName> get_DataRowAttributes();
    public abstract virtual IEnumerable`1<IClrTypeName> get_IgnoreAttributes();
    public abstract virtual IEnumerable`1<IClrTypeName> get_DeploymentItemAttributes();
    public abstract virtual bool get_CanHaveTestWithParameters();
    public abstract virtual bool IsTestClass(ITypeElement typeElement);
    public abstract virtual bool IsTestMethod(ITypeMember typeMember);
    public abstract virtual Task`1<bool> IsTestClass(IProject project, TargetFrameworkId targetFrameworkId, IMetadataTypeInfo typeInfo);
    public abstract virtual Task`1<bool> IsTestMethod(IProject project, TargetFrameworkId targetFrameworkId, IMetadataTypeMember typeMember);
    public abstract virtual bool IsDataDriven(ITypeMember typeMember);
    public abstract virtual bool IsDataDriven(IMetadataTypeMember typeMember);
}
public interface JetBrains.ReSharper.UnitTesting.MSTest.Provider.IMsTestContainer {
    [CanBeNullAttribute]
public abstract virtual T TryGetService(MsTestFlavor flavor);
}
public interface JetBrains.ReSharper.UnitTesting.MSTest.Provider.IMsTestExtensionsSource {
    [NotNullAttribute]
[ItemNotNullAttribute]
public abstract virtual String[] GetPathsToAdditionalExtensions(FileSystemPath output);
}
public interface JetBrains.ReSharper.UnitTesting.MSTest.Provider.IMsTestFlavorResolver {
    [CanBeNullAttribute]
public abstract virtual MsTestFlavor TryGetFlavor(IProject project, TargetFrameworkId targetFrameworkId);
}
public interface JetBrains.ReSharper.UnitTesting.MSTest.Provider.IMsTestServices {
    [NotNullAttribute]
public MsTestProvider Provider { get; }
    [NotNullAttribute]
public IRunSettingsFileProvider RunSettingsFileProvider { get; }
    public abstract virtual MsTestProvider get_Provider();
    public abstract virtual IRunSettingsFileProvider get_RunSettingsFileProvider();
    [CanBeNullAttribute]
public abstract virtual TService GetComponent(MsTestFlavor flavor);
    [CanBeNullAttribute]
public abstract virtual MsTestFlavor TryGetFlavor(IProject project, TargetFrameworkId targetFrameworkId);
    [NotNullAttribute]
public abstract virtual IUnitTestRunStrategy GetRunStrategy(IHostProvider hostProvider, IUnitTestElement element);
}
public interface JetBrains.ReSharper.UnitTesting.MSTest.Provider.IMsTestTestCaseFactory {
    [NotNullAttribute]
public abstract virtual TestCase CreateFor(MsTestTestMethodElement element);
}
[MsTestFlavorAttribute("4", "16")]
internal class JetBrains.ReSharper.UnitTesting.MSTest.Provider.Metro.MsTestAttributesProvider : MsTestAttributesProviderBase {
    private static IClrTypeName ourMetroTestClassAttribute;
    private static IClrTypeName ourMetroTestMethodAttribute;
    private static IClrTypeName ourMetroDataTestMethodAttribute;
    private static IClrTypeName ourMetroUITestMethodAttribute;
    private static IClrTypeName ourMetroIgnoreAttribute;
    private static IClrTypeName ourMetroCategoryAttribute;
    private static IClrTypeName ourMetroDataRowAttribute;
    private static IClrTypeName[] ourTestClassAttributes;
    private static IClrTypeName[] ourTestMethodAttributes;
    private static IClrTypeName[] ourCategoryAttributes;
    private static IClrTypeName[] ourIgnoreAttributes;
    private static IClrTypeName[] ourDataRowAttributes;
    public IEnumerable`1<IClrTypeName> TestClassAttributes { get; }
    public IEnumerable`1<IClrTypeName> TestMethodAttributes { get; }
    public IEnumerable`1<IClrTypeName> IgnoreAttributes { get; }
    public IEnumerable`1<IClrTypeName> DeploymentItemAttributes { get; }
    public IEnumerable`1<IClrTypeName> CategoryAttributes { get; }
    public IEnumerable`1<IClrTypeName> DataRowAttributes { get; }
    public bool CanHaveTestWithParameters { get; }
    public MsTestAttributesProvider(IUnitTestAttributeChecker attributeChecker);
    private static MsTestAttributesProvider();
    public virtual IEnumerable`1<IClrTypeName> get_TestClassAttributes();
    public virtual IEnumerable`1<IClrTypeName> get_TestMethodAttributes();
    public virtual IEnumerable`1<IClrTypeName> get_IgnoreAttributes();
    public virtual IEnumerable`1<IClrTypeName> get_DeploymentItemAttributes();
    public virtual IEnumerable`1<IClrTypeName> get_CategoryAttributes();
    public virtual IEnumerable`1<IClrTypeName> get_DataRowAttributes();
    public virtual bool get_CanHaveTestWithParameters();
}
[MsTestFlavorAttribute("4", "16")]
public class JetBrains.ReSharper.UnitTesting.MSTest.Provider.Metro.MsTestTestCaseFactory : object {
    public static TestProperty TestEnabledProperty;
    public static TestProperty TestClassNameProperty;
    public static TestProperty AsyncTestProperty;
    public static TestProperty TestCategoryProperty;
    public static TestProperty PriorityProperty;
    private static MsTestTestCaseFactory();
    public sealed virtual TestCase CreateFor(MsTestTestMethodElement element);
}
public abstract class JetBrains.ReSharper.UnitTesting.MSTest.Provider.MsTestAttributesProviderBase : object {
    [NotNullAttribute]
private IUnitTestAttributeChecker myAttributeChecker;
    public IEnumerable`1<IClrTypeName> TestClassAttributes { get; }
    public IEnumerable`1<IClrTypeName> TestMethodAttributes { get; }
    public IEnumerable`1<IClrTypeName> DataRowAttributes { get; }
    public IEnumerable`1<IClrTypeName> IgnoreAttributes { get; }
    public IEnumerable`1<IClrTypeName> DeploymentItemAttributes { get; }
    public IEnumerable`1<IClrTypeName> CategoryAttributes { get; }
    public bool CanHaveTestWithParameters { get; }
    protected MsTestAttributesProviderBase(IUnitTestAttributeChecker attributeChecker);
    public abstract virtual IEnumerable`1<IClrTypeName> get_TestClassAttributes();
    public abstract virtual IEnumerable`1<IClrTypeName> get_TestMethodAttributes();
    public abstract virtual IEnumerable`1<IClrTypeName> get_DataRowAttributes();
    public abstract virtual IEnumerable`1<IClrTypeName> get_IgnoreAttributes();
    public abstract virtual IEnumerable`1<IClrTypeName> get_DeploymentItemAttributes();
    public abstract virtual IEnumerable`1<IClrTypeName> get_CategoryAttributes();
    public abstract virtual bool get_CanHaveTestWithParameters();
    public sealed virtual bool IsTestClass(ITypeElement typeElement);
    public sealed virtual bool IsTestMethod(ITypeMember typeMember);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.UnitTesting.MSTest.Provider.MsTestAttributesProviderBase/<IsTestClass>d__18")]
public sealed virtual Task`1<bool> IsTestClass(IProject project, TargetFrameworkId targetFrameworkId, IMetadataTypeInfo typeInfo);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.UnitTesting.MSTest.Provider.MsTestAttributesProviderBase/<IsTestMethod>d__19")]
public sealed virtual Task`1<bool> IsTestMethod(IProject project, TargetFrameworkId targetFrameworkId, IMetadataTypeMember typeMember);
    public virtual bool IsDataDriven(ITypeMember typeMember);
    public virtual bool IsDataDriven(IMetadataTypeMember typeMember);
}
public static class JetBrains.ReSharper.UnitTesting.MSTest.Provider.MsTestAttributeValuePresenter : object {
    public static string PresentAttrValue(AttributeValue value);
    public static string PresentAttrValue(MetadataAttributeValue value);
    public static string PresentBuiltInValue(object value);
    private static string EnumValueRepresentation(object value, IMetadataTypeInfo type);
    private static string FlagsValueRepresentation(ulong value, IMetadataTypeInfo type);
    private static string EnumValueRepresentation(object value, IEnum enum);
    private static string FlagsValueRepresentation(ulong value, IEnum enum);
    private static bool IsUInt64(object value);
    private static ulong ToUInt64(object value);
}
[SolutionComponentAttribute("0")]
internal class JetBrains.ReSharper.UnitTesting.MSTest.Provider.MsTestContainer : object {
    [NotNullAttribute]
private IDictionary`2<MsTestFlavor, IComponentContainer> myContainers;
    public MsTestContainer(INestedComponentContainerDictionary`2<MsTestFlavor, NestedContainerDictionaryRegisterStrategy> containers);
    public sealed virtual T TryGetService(MsTestFlavor flavor);
}
public class JetBrains.ReSharper.UnitTesting.MSTest.Provider.MsTestElementFactory : object {
    private JetHashSet`1<IUnitTestElement> myElements;
    [NotNullAttribute]
public MsTestTestClassElement GetOrCreateClassElement(IClrTypeName typeName, MsTestTestClassElement parent, IJetSet`1<UnitTestElementCategory> categories);
    [NotNullAttribute]
public MsTestTestMethodElement GetOrCreateMethodElement(MsTestTestClassElement parent, string methodName, string declaredInTypeShortName, IJetSet`1<UnitTestElementCategory> categories);
    [NotNullAttribute]
public MsTestTestRowElement GetOrCreateRowElement(MsTestTestMethodElement parent, string displayName);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.UnitTesting.MSTest.Provider.MsTestFileExplorer : object {
    [NotNullAttribute]
private IUnitTestProvider myProvider;
    [NotNullAttribute]
private IMsTestServices myServices;
    public IUnitTestProvider Provider { get; }
    public MsTestFileExplorer(MsTestProvider provider, IMsTestServices services);
    public sealed virtual IUnitTestProvider get_Provider();
    public sealed virtual void ProcessFile(IFile psiFile, IUnitTestElementObserverOnFile observer, Func`1<bool> interrupted);
}
[CannotApplyEqualityOperatorAttribute]
public class JetBrains.ReSharper.UnitTesting.MSTest.Provider.MsTestFlavor : object {
    public static MsTestFlavor VanillaV1;
    public static MsTestFlavor VanillaV2;
    public static MsTestFlavor WinPhone;
    public static MsTestFlavor Metro;
    public static MsTestFlavor UniversalV1;
    public static MsTestFlavor UniversalV2;
    public static MsTestFlavor DotNetCoreV2;
    [CompilerGeneratedAttribute]
private MsTestFlavorId <Id>k__BackingField;
    public MsTestFlavorId Id { get; private set; }
    public MsTestFlavor(MsTestFlavorId flavorId);
    private static MsTestFlavor();
    [CompilerGeneratedAttribute]
public MsTestFlavorId get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(MsTestFlavorId value);
    public virtual string ToString();
}
public class JetBrains.ReSharper.UnitTesting.MSTest.Provider.MsTestFlavorAttribute : ProductComponentAttribute {
    [CompilerGeneratedAttribute]
private MsTestFlavorId <FlavorId>k__BackingField;
    public MsTestFlavorId FlavorId { get; }
    public MsTestFlavorAttribute(MsTestFlavorId flavorId, Instantiation instantiation);
    [CompilerGeneratedAttribute]
public MsTestFlavorId get_FlavorId();
}
public enum JetBrains.ReSharper.UnitTesting.MSTest.Provider.MsTestFlavorId : Enum {
    public int value__;
    public static MsTestFlavorId VanillaV1;
    public static MsTestFlavorId VanillaV2;
    public static MsTestFlavorId Silverlight;
    public static MsTestFlavorId WinPhone;
    public static MsTestFlavorId Metro;
    public static MsTestFlavorId UniversalV1;
    public static MsTestFlavorId UniversalV2;
    public static MsTestFlavorId DotNetCoreV2;
}
[ShellComponentAttribute("16")]
internal class JetBrains.ReSharper.UnitTesting.MSTest.Provider.MsTestFlavorResolver : object {
    private static AssemblyNameInfo ourVanillaV1Reference;
    private static AssemblyNameInfo ourVanillaV2Reference;
    private static AssemblyNameInfo ourWinPhoneReference;
    private static AssemblyNameInfo ourMetroReference;
    private static AssemblyNameInfo ourUniversalV1Reference;
    private static AssemblyNameInfo ourUniversalV2Reference;
    private static AssemblyNameInfo ourDotNetTestReference;
    private static MsTestFlavorResolver();
    public sealed virtual MsTestFlavor TryGetFlavor(IProject project, TargetFrameworkId targetFrameworkId);
}
[UnitTestProviderAttribute("16")]
public class JetBrains.ReSharper.UnitTesting.MSTest.Provider.MsTestProvider : object {
    private static string MSTEST_ID;
    [NotNullAttribute]
private IMsTestFlavorResolver myFlavorResolver;
    public string ID { get; }
    public string Name { get; }
    public MsTestProvider(IMsTestFlavorResolver flavorResolver);
    public sealed virtual string get_ID();
    public sealed virtual string get_Name();
    public sealed virtual bool IsSupported(IProject project, TargetFrameworkId targetFrameworkId);
    public sealed virtual bool IsSupported(IHostProvider hostProvider, IProject project, TargetFrameworkId targetFrameworkId);
    public sealed virtual bool IsElementOfKind(IDeclaredElement declaredElement, UnitTestElementKind elementKind);
    private bool IsUnitTest(IDeclaredElement element, IMsTestAttributesProvider attributesProvider);
    private bool IsUnitTestContainer(IDeclaredElement element, IMsTestAttributesProvider attributesProvider);
    private bool IsUnitTestStuff(IDeclaredElement declaredElement, IMsTestAttributesProvider attributesProvider);
    public sealed virtual bool IsElementOfKind(IUnitTestElement element, UnitTestElementKind elementKind);
    public sealed virtual bool SupportsResultEventsForParentOf(IUnitTestElement element);
    public sealed virtual IUnitTestRunStrategy GetRunStrategy(IUnitTestElement element, IHostProvider hostProvider);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.UnitTesting.MSTest.Provider.MsTestServices : object {
    [NotNullAttribute]
private ISolution mySolution;
    [NotNullAttribute]
private IMsTestAgentInfoProvider myVsInfoProvider;
    private IMsTestFlavorResolver myFlavorResolver;
    private IMsTestContainer myFlavoredContainer;
    [CompilerGeneratedAttribute]
private MsTestProvider <Provider>k__BackingField;
    [CompilerGeneratedAttribute]
private IRunSettingsFileProvider <RunSettingsFileProvider>k__BackingField;
    private static bool myProblemReported;
    [NotNullAttribute]
public IMsTestFlavorResolver FlavorResolver { get; }
    [NotNullAttribute]
public IMsTestContainer FlavoredContainer { get; }
    public MsTestProvider Provider { get; }
    public IRunSettingsFileProvider RunSettingsFileProvider { get; }
    public MsTestServices(ISolution solution, MsTestProvider provider, IRunSettingsFileProvider msTestRunSettingsFileProvider, IMsTestAgentInfoProvider vsInfoProvider);
    public IMsTestFlavorResolver get_FlavorResolver();
    public IMsTestContainer get_FlavoredContainer();
    [CompilerGeneratedAttribute]
public sealed virtual MsTestProvider get_Provider();
    [CompilerGeneratedAttribute]
public sealed virtual IRunSettingsFileProvider get_RunSettingsFileProvider();
    public sealed virtual TService GetComponent(MsTestFlavor flavor);
    public sealed virtual MsTestFlavor TryGetFlavor(IProject project, TargetFrameworkId targetFrameworkId);
    public virtual IUnitTestRunStrategy GetRunStrategy(IHostProvider hostProvider, IUnitTestElement element);
}
public interface JetBrains.ReSharper.UnitTesting.MSTest.Provider.New.ILocalTrigger {
}
public interface JetBrains.ReSharper.UnitTesting.MSTest.Provider.New.IMsTestDiscoverer {
    [NotNullAttribute]
public abstract virtual Task Initialize(CancellationToken ct);
    public abstract virtual void StartDiscovery();
    public abstract virtual void AbortDiscovery();
}
public interface JetBrains.ReSharper.UnitTesting.MSTest.Provider.New.IMsTestDiscovererFactory {
    [NotNullAttribute]
public abstract virtual Task`1<IMsTestDiscoverer> Allocate(IMsTestDiscoveryProtocol protocol, CancellationToken ct);
}
public interface JetBrains.ReSharper.UnitTesting.MSTest.Provider.New.IMsTestDiscovererFactoryFactory {
    [NotNullAttribute]
public abstract virtual IMsTestDiscovererFactory Build(VsTestRuntimeDescriptor environment);
}
public interface JetBrains.ReSharper.UnitTesting.MSTest.Provider.New.IMsTestDiscoveryProtocol {
    [NotNullAttribute]
public abstract virtual Task`1<ExplorationResult> Run(CancellationToken ct);
}
public interface JetBrains.ReSharper.UnitTesting.MSTest.Provider.New.IMsTestExecutionProtocol {
    [NotNullAttribute]
public IUnitTestRun UnitTestRun { get; }
    public abstract virtual IUnitTestRun get_UnitTestRun();
    [NotNullAttribute]
public abstract virtual Task Run(CancellationToken ct);
}
public interface JetBrains.ReSharper.UnitTesting.MSTest.Provider.New.IMsTestProtocol {
    [NotNullAttribute]
public RunSettingsVersion RunSettingsVersion { get; }
    [NotNullAttribute]
public VsTestRuntimeDescriptor RuntimeDescriptor { get; }
    [NotNullAttribute]
public ILogger Logger { get; }
    public abstract virtual RunSettingsVersion get_RunSettingsVersion();
    public abstract virtual VsTestRuntimeDescriptor get_RuntimeDescriptor();
    public abstract virtual ILogger get_Logger();
}
public interface JetBrains.ReSharper.UnitTesting.MSTest.Provider.New.IMsTestRunner {
    [NotNullAttribute]
public abstract virtual Task Initialize(CancellationToken ct);
    public abstract virtual void StartTestRun();
    public abstract virtual void AbortTestRun();
}
public interface JetBrains.ReSharper.UnitTesting.MSTest.Provider.New.IMsTestRunnerFactory {
    [NotNullAttribute]
public abstract virtual Task`1<IMsTestRunner> Allocate(IMsTestExecutionProtocol protocol, CancellationToken ct);
}
public interface JetBrains.ReSharper.UnitTesting.MSTest.Provider.New.IMsTestRunnerFactoryFactory {
    [NotNullAttribute]
public abstract virtual IMsTestRunnerFactory Build(VsTestRuntimeDescriptor environment);
}
public interface JetBrains.ReSharper.UnitTesting.MSTest.Provider.New.IMsTestTestCaseMap {
    public abstract virtual void Register(IUnitTestElement element, T testCase);
    [CanBeNullAttribute]
public abstract virtual T TestCase(IUnitTestElement element);
    [CanBeNullAttribute]
public abstract virtual IUnitTestElement Element(T testCase);
}
public interface JetBrains.ReSharper.UnitTesting.MSTest.Provider.New.IRemoteTrigger {
    [NotNullAttribute]
public string MessageType { get; }
    public abstract virtual string get_MessageType();
}
public interface JetBrains.ReSharper.UnitTesting.MSTest.Provider.New.IRemoteTrigger`1 {
}
public interface JetBrains.ReSharper.UnitTesting.MSTest.Provider.New.IState {
}
internal interface JetBrains.ReSharper.UnitTesting.MSTest.Provider.New.ITestCaseMarshaller {
    [NotNullAttribute]
public string AssemblyQualifiedTypeName { get; }
    public abstract virtual string get_AssemblyQualifiedTypeName();
}
public interface JetBrains.ReSharper.UnitTesting.MSTest.Provider.New.ITrigger {
}
public interface JetBrains.ReSharper.UnitTesting.MSTest.Provider.New.IVsTestRuntimeEnvironmentFactory {
    [NotNullAttribute]
public abstract virtual VsTestRuntimeDescriptor GetDescriptor(IProject project, TargetFrameworkId targetFrameworkId, PlatformType selectedPlatformType);
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.UnitTesting.MSTest.Provider.New.LevelDbMsTestTestCaseMap : object {
    [NotNullAttribute]
private OptimizedPersistentSortedMap`2<UnitTestElementId, object> myDirectMap;
    public LevelDbMsTestTestCaseMap(Lifetime lifetime, IPersistentIndexManager persistentIndexManager, IEnumerable`1<ITestCaseMarshaller> marshallers);
    private void RemoveStaleRecords(UnitTestElementsRemovedEvent evt);
    public sealed virtual void Register(IUnitTestElement element, T testCase);
    public sealed virtual T TestCase(IUnitTestElement element);
    public sealed virtual IUnitTestElement Element(T testCase);
}
internal class JetBrains.ReSharper.UnitTesting.MSTest.Provider.New.MsTestDiscoveryProtocol : ActiveStateMachine`2<IState, ITrigger> {
    [NotNullAttribute]
private VsTestRuntimeDescriptor myEnvironment;
    [NotNullAttribute]
private IMsTestDiscovererFactory myDiscovererFactory;
    [NotNullAttribute]
private IUnitTestElementObserver myElementObserver;
    [NotNullAttribute]
private IMsTestTestCaseMap myTestCaseMap;
    [NotNullAttribute]
private ITestElementMapper myMapper;
    [NotNullAttribute]
private ILogger myLogger;
    [NotNullAttribute]
private TaskCompletionSource`1<ExplorationResult> myTcs;
    [NotNullAttribute]
private RunSettingsVersion myRunSettingsVersion;
    private IMsTestDiscoverer myDiscoverer;
    private CancellationToken myCt;
    public RunSettingsVersion RunSettingsVersion { get; }
    public VsTestRuntimeDescriptor RuntimeDescriptor { get; }
    public ILogger Logger { get; }
    public MsTestDiscoveryProtocol(VsTestRuntimeDescriptor environment, IMsTestDiscovererFactory discovererFactory, IUnitTestElementObserver elementObserver, IMsTestTestCaseMap testCaseMap, ITestElementMapper mapper, RunSettingsVersion runSettingsVersion, ILogger logger);
    public sealed virtual RunSettingsVersion get_RunSettingsVersion();
    public sealed virtual VsTestRuntimeDescriptor get_RuntimeDescriptor();
    public sealed virtual ILogger get_Logger();
    [AsyncStateMachineAttribute("JetBrains.ReSharper.UnitTesting.MSTest.Provider.New.MsTestDiscoveryProtocol/<AllocateDiscoverer>d__17")]
private void AllocateDiscoverer();
    private void ReleaseDiscoverer();
    private void OnTestFound(Test test);
    private void OnDiscoveryCompleted();
    [AsyncStateMachineAttribute("JetBrains.ReSharper.UnitTesting.MSTest.Provider.New.MsTestDiscoveryProtocol/<Run>d__21")]
public sealed virtual Task`1<ExplorationResult> Run(CancellationToken ct);
    [CompilerGeneratedAttribute]
private void <.ctor>b__16_0();
    [CompilerGeneratedAttribute]
private void <.ctor>b__16_1();
    [CompilerGeneratedAttribute]
private void <.ctor>b__16_2();
    [CompilerGeneratedAttribute]
private void <.ctor>b__16_3();
    [CompilerGeneratedAttribute]
private void <.ctor>b__16_4();
    [CompilerGeneratedAttribute]
private void <.ctor>b__16_5(Exception e);
    [CompilerGeneratedAttribute]
private void <.ctor>b__16_6();
    [CompilerGeneratedAttribute]
private void <.ctor>b__16_7(object sender, TransitionEventArgs`2<IState, ITrigger> args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__16_8(object sender, TransitionExceptionEventArgs`2<IState, ITrigger> args);
    [CompilerGeneratedAttribute]
private void <Run>b__21_0();
    [CompilerGeneratedAttribute]
private void <Run>b__21_1();
}
internal class JetBrains.ReSharper.UnitTesting.MSTest.Provider.New.MsTestExecutionProtocol : ActiveStateMachine`2<IState, ITrigger> {
    [NotNullAttribute]
private IUnitTestRun myRun;
    [NotNullAttribute]
private ITestElementMapper myMapper;
    [NotNullAttribute]
private IMsTestRunnerFactory myRunnerFactory;
    [NotNullAttribute]
private IUnitTestDiscoveryManager myDiscoveryManager;
    [NotNullAttribute]
private IUnitTestResultManager myResultManager;
    [NotNullAttribute]
private ILogger myLogger;
    [NotNullAttribute]
private TaskCompletionSource`1<int> myTcs;
    [NotNullAttribute]
private HashSet`1<IUnitTestElement> myPendingElements;
    [NotNullAttribute]
private RunSettingsVersion myRunSettingsVersion;
    private IMsTestRunner myRunner;
    private CancellationToken myCt;
    public RunSettingsVersion RunSettingsVersion { get; }
    public VsTestRuntimeDescriptor RuntimeDescriptor { get; }
    public ILogger Logger { get; }
    public IUnitTestRun UnitTestRun { get; }
    public MsTestExecutionProtocol(IUnitTestRun run, IMsTestRunnerFactory runnerFactory, IUnitTestDiscoveryManager discoveryManager, IUnitTestResultManager resultManager, ITestElementMapper mapper, RunSettingsVersion runSettingsVersion, ILogger logger);
    public sealed virtual RunSettingsVersion get_RunSettingsVersion();
    public sealed virtual VsTestRuntimeDescriptor get_RuntimeDescriptor();
    public sealed virtual ILogger get_Logger();
    public sealed virtual IUnitTestRun get_UnitTestRun();
    [AsyncStateMachineAttribute("JetBrains.ReSharper.UnitTesting.MSTest.Provider.New.MsTestExecutionProtocol/<AllocateRunner>d__20")]
private void AllocateRunner();
    private void ReleaseRunner();
    private void OnTestStarted(Test test);
    private void OnTestFinished(TestResult result);
    [CanBeNullAttribute]
private IUnitTestElement FindElement(Test test);
    private IUnitTestElement FindElementOrCreateDynamic(TestResult result);
    private IUnitTestElement Map(TestResult result);
    private void OnRunFinished(bool wasAborted);
    private void ReportPendingTestCases();
    [AsyncStateMachineAttribute("JetBrains.ReSharper.UnitTesting.MSTest.Provider.New.MsTestExecutionProtocol/<Run>d__29")]
public sealed virtual Task Run(CancellationToken ct);
    [CompilerGeneratedAttribute]
private void <.ctor>b__19_0();
    [CompilerGeneratedAttribute]
private void <.ctor>b__19_1();
    [CompilerGeneratedAttribute]
private void <.ctor>b__19_2();
    [CompilerGeneratedAttribute]
private void <.ctor>b__19_3();
    [CompilerGeneratedAttribute]
private void <.ctor>b__19_4();
    [CompilerGeneratedAttribute]
private void <.ctor>b__19_5(Exception e);
    [CompilerGeneratedAttribute]
private void <.ctor>b__19_6();
    [CompilerGeneratedAttribute]
private void <.ctor>b__19_7(object sender, TransitionEventArgs`2<IState, ITrigger> args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__19_8(object sender, TransitionExceptionEventArgs`2<IState, ITrigger> args);
    [CompilerGeneratedAttribute]
private void <Run>b__29_0();
    [CompilerGeneratedAttribute]
private void <Run>b__29_1();
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.UnitTesting.MSTest.Provider.New.MsTestMetadataExplorer : object {
    [NotNullAttribute]
private ITestElementMapperFactory myMapperFactory;
    [NotNullAttribute]
private IMsTestServices myServices;
    [NotNullAttribute]
private IMsTestFlavorResolver myFlavorResolver;
    [NotNullAttribute]
private IMsTestAgentInfoProvider myVsInfoProvider;
    [NotNullAttribute]
private IVsTestRuntimeEnvironmentFactory myRuntimeEnvironmentFactory;
    [NotNullAttribute]
private IMsTestDiscovererFactoryFactory myDiscovererFactoryFactory;
    [NotNullAttribute]
private IMsTestTestCaseMap myTestCaseMap;
    [NotNullAttribute]
private ILogger myLogger;
    public IUnitTestProvider Provider { get; }
    public MsTestMetadataExplorer(IMsTestServices services, IMsTestFlavorResolver flavorResolver, IMsTestAgentInfoProvider vsInfoProvider, IVsTestRuntimeEnvironmentFactory runtimeEnvironmentFactory, IMsTestDiscovererFactoryFactory discovererFactoryFactory, MsTestDotNetCoreTestElementMapperFactory mapperFactory, IMsTestTestCaseMap testCaseMap, ILogger logger);
    public sealed virtual IUnitTestProvider get_Provider();
    public sealed virtual PertinenceResult IsSupported(IProject project, TargetFrameworkId targetFrameworkId);
    public sealed virtual Task`1<ExplorationResult> ProcessArtifact(IUnitTestElementObserver observer, CancellationToken token);
}
[SolutionComponentAttribute("0")]
internal class JetBrains.ReSharper.UnitTesting.MSTest.Provider.New.MsTestRunnerFactoryFactory : object {
    [NotNullAttribute]
private TestHostMsTestRunnerFactory myTestHostFactory;
    [NotNullAttribute]
private TestWindowMsTestRunnerFactory myTestWindowRunnerFactory;
    [NotNullAttribute]
private TestWindowMsTestDiscovererFactory myTestWindowDiscovererFactory;
    public MsTestRunnerFactoryFactory(TestHostMsTestRunnerFactory testHostFactory, TestWindowMsTestRunnerFactory testWindowRunnerFactory, TestWindowMsTestDiscovererFactory testWindowDiscovererFactory);
    private sealed virtual override IMsTestRunnerFactory JetBrains.ReSharper.UnitTesting.MSTest.Provider.New.IMsTestRunnerFactoryFactory.Build(VsTestRuntimeDescriptor environment);
    private sealed virtual override IMsTestDiscovererFactory JetBrains.ReSharper.UnitTesting.MSTest.Provider.New.IMsTestDiscovererFactoryFactory.Build(VsTestRuntimeDescriptor environment);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.UnitTesting.MSTest.Provider.New.MsTestTestCaseMapExtensions : object {
    [ExtensionAttribute]
[NotNullAttribute]
[ItemNotNullAttribute]
public static IReadOnlyCollection`1<T> GetTestCases(IMsTestTestCaseMap map, IUnitTestRun run, IUnitTestResultManager resultManager);
}
public interface JetBrains.ReSharper.UnitTesting.MSTest.Provider.New.TestHost.IAllocatedEngine {
    public abstract virtual void BindTo(IMsTestProtocol protocol);
    public abstract virtual void Invoke(Action`1<IVsTestConsoleWrapper> action);
}
public interface JetBrains.ReSharper.UnitTesting.MSTest.Provider.New.TestHost.IMsTestTestHostPool {
    [NotNullAttribute]
public abstract virtual Task`1<IAllocatedEngine> Allocate(IMsTestProtocol protocol, CancellationToken ct);
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.UnitTesting.MSTest.Provider.New.TestHost.MsTestTestHostPool : object {
    [NotNullAttribute]
private Lifetime myLifetime;
    [NotNullAttribute]
private IMsTestAgentInfoProvider myVsInfoProvider;
    [NotNullAttribute]
private IUnitTestingSettings mySettings;
    [NotNullAttribute]
private ILogger myLogger;
    [NotNullAttribute]
private AsyncObjectPool`1<IAllocatedEngine> myPool;
    [NotNullAttribute]
private int myEngineCount;
    public MsTestTestHostPool(Lifetime lifetime, IMsTestAgentInfoProvider vsInfoProvider, IUnitTestingSettings settings, ILogger logger);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.UnitTesting.MSTest.Provider.New.TestHost.MsTestTestHostPool/<Allocate>d__7")]
public sealed virtual Task`1<IAllocatedEngine> Allocate(IMsTestProtocol protocol, CancellationToken ct);
    private void Release(ReSharperAwareWrapper service);
    private ReSharperAwareWrapper CreateTestHostWrapper();
}
[ExtensionAttribute]
internal static class JetBrains.ReSharper.UnitTesting.MSTest.Provider.New.TestHost.TestCaseExtensions : object {
    [ExtensionAttribute]
public static Test ToTest(TestCase testCase);
    [ExtensionAttribute]
public static TestResult ToTestResult(TestResult result);
    [ExtensionAttribute]
public static TestResultMessage ToTestResultMessage(TestResultMessage message);
    [ExtensionAttribute]
public static TestOutcome ToTestOutcome(TestOutcome outcome);
    [ExtensionAttribute]
public static LoggingLevel ToLoggingLevel(TestMessageLevel level);
}
internal abstract class JetBrains.ReSharper.UnitTesting.MSTest.Provider.New.TestHost.TestHostMsTestBase : object {
    [NotNullAttribute]
private IMsTestProtocol myProtocol;
    [NotNullAttribute]
private IMsTestFlavorResolver myFlavorResolver;
    [NotNullAttribute]
private IMsTestContainer myMsTestContainer;
    [NotNullAttribute]
private IAllocatedEngine myEngine;
    protected TestHostMsTestBase(IMsTestProtocol protocol, IMsTestFlavorResolver flavorResolver, IMsTestContainer msTestContainer, IAllocatedEngine engine);
    public sealed virtual Task Initialize(CancellationToken ct);
    [CompilerGeneratedAttribute]
private void <Initialize>b__5_0();
}
internal class JetBrains.ReSharper.UnitTesting.MSTest.Provider.New.TestHost.TestHostMsTestDiscoverer : TestHostMsTestBase {
    [NotNullAttribute]
private IMsTestDiscoveryProtocol myProtocol;
    [NotNullAttribute]
private IRunSettingsProvider myRunSettingsGenerator;
    [NotNullAttribute]
private IAllocatedEngine myEngine;
    public TestHostMsTestDiscoverer(IMsTestDiscoveryProtocol protocol, IMsTestFlavorResolver flavorResolver, IMsTestContainer msTestContainer, IRunSettingsProvider runSettingsGenerator, IAllocatedEngine engine);
    public sealed virtual void Dispose();
    public sealed virtual void StartDiscovery();
    public sealed virtual void AbortDiscovery();
    public IMsTestDiscoverer Initialize(CancellationToken ct);
}
internal class JetBrains.ReSharper.UnitTesting.MSTest.Provider.New.TestHost.TestHostMsTestRunner : TestHostMsTestBase {
    [NotNullAttribute]
private IUnitTestRun myRun;
    [NotNullAttribute]
private IMsTestExecutionProtocol myProtocol;
    [NotNullAttribute]
private IUnitTestResultManager myResultManager;
    [NotNullAttribute]
private IMsTestTestCaseMap myTestCaseMap;
    [NotNullAttribute]
private IRunSettingsProvider myRunSettingsGenerator;
    [NotNullAttribute]
private IAllocatedEngine myEngine;
    public TestHostMsTestRunner(IMsTestExecutionProtocol protocol, IMsTestFlavorResolver flavorResolver, IMsTestContainer msTestContainer, IUnitTestResultManager resultManager, IMsTestTestCaseMap testCaseMap, IRunSettingsProvider runSettingsGenerator, IAllocatedEngine engine);
    public sealed virtual void Dispose();
    public sealed virtual void StartTestRun();
    public sealed virtual void AbortTestRun();
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.UnitTesting.MSTest.Provider.New.TestHost.TestHostMsTestRunnerFactory : object {
    [NotNullAttribute]
private IUnitTestResultManager myResultManager;
    [NotNullAttribute]
private IMsTestTestCaseMap myTestCaseMap;
    [NotNullAttribute]
private IRunSettingsProvider myRunSettingsGenerator;
    [NotNullAttribute]
private IMsTestFlavorResolver myFlavorResolver;
    [NotNullAttribute]
private IMsTestTestHostPool myTestHostPool;
    [NotNullAttribute]
private Lazy`1<IMsTestContainer> myMsTestContainer;
    public TestHostMsTestRunnerFactory(ISolution solution, IMsTestTestHostPool testHostPool, IMsTestFlavorResolver flavorResolver, IUnitTestResultManager resultManager, IMsTestTestCaseMap testCaseMap, IRunSettingsProvider runSettingsGenerator);
    public sealed virtual Task`1<IMsTestDiscoverer> Allocate(IMsTestDiscoveryProtocol protocol, CancellationToken ct);
    private IMsTestDiscoverer CreateDiscoverer(IMsTestDiscoveryProtocol protocol, IAllocatedEngine engine);
    public sealed virtual Task`1<IMsTestRunner> Allocate(IMsTestExecutionProtocol protocol, CancellationToken ct);
    private IMsTestRunner CreateRunner(IMsTestExecutionProtocol protocol, IAllocatedEngine engine);
}
[ShellComponentAttribute("16")]
internal class JetBrains.ReSharper.UnitTesting.MSTest.Provider.New.TestHost.TestHostTestCaseMarshaller : object {
    private Lazy`1<PropertyMarshaller> myPropertyMarshaller;
    public string AssemblyQualifiedTypeName { get; }
    public sealed virtual string get_AssemblyQualifiedTypeName();
    public sealed virtual void Marshal(UnsafeWriter writer, object value);
    public sealed virtual object Unmarshal(UnsafeReader reader);
    private object DeserializePropertyValue(string rawValue, TestProperty property);
}
public interface JetBrains.ReSharper.UnitTesting.MSTest.Provider.New.TestWindow.IMsTestDiscoveryEnginePool {
    [NotNullAttribute]
public abstract virtual Task`1<ITestRunnerService> Allocate(IMsTestDiscoveryProtocol protocol, CancellationToken ct);
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.UnitTesting.MSTest.Provider.New.TestWindow.MsTestDiscoveryEnginePool : object {
    [NotNullAttribute]
private ILogger myLogger;
    [NotNullAttribute]
private Lifetime myLifetime;
    [NotNullAttribute]
private TestAdapterCache myTestAdapterCache;
    [NotNullAttribute]
private Discovery myEngineInvoker;
    [NotNullAttribute]
private ConcurrentDictionary`2<TargetPlatform, AsyncObjectPool`1<TestRunnerService>> myRunners;
    [NotNullAttribute]
private int myEngineCount;
    public MsTestDiscoveryEnginePool(Lifetime lifetime, IMsTestAgentInfoProvider vsInfoProvider, TestAdapterCache testAdapterCache, ILogger logger);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.UnitTesting.MSTest.Provider.New.TestWindow.MsTestDiscoveryEnginePool/<Allocate>d__7")]
public sealed virtual Task`1<ITestRunnerService> Allocate(IMsTestDiscoveryProtocol protocol, CancellationToken ct);
    private TestRunnerService GetRunner(TargetPlatform targetPlatform);
    private void Release(TargetPlatform targetPlatform, TestRunnerService service);
    private void Remove(TargetPlatform targetPlatform, TestRunnerService service);
    private AsyncObjectPool`1<TestRunnerService> GetPool(TargetPlatform targetPlatform);
    [CompilerGeneratedAttribute]
private AsyncObjectPool`1<TestRunnerService> <GetPool>b__11_0(TargetPlatform tp);
}
[ExtensionAttribute]
internal static class JetBrains.ReSharper.UnitTesting.MSTest.Provider.New.TestWindow.TestCaseExtensions : object {
    [ExtensionAttribute]
public static Test ToTest(TestCase testCase);
    [ExtensionAttribute]
public static TestResult ToTestResult(TestResult result);
    [ExtensionAttribute]
public static TestResultMessage ToTestResultMessage(TestResultMessage message);
    [ExtensionAttribute]
public static TestOutcome ToTestOutcome(TestOutcome outcome);
    [ExtensionAttribute]
public static LoggingLevel ToLoggingLevel(TestMessageLevel level);
}
[ShellComponentAttribute("16")]
internal class JetBrains.ReSharper.UnitTesting.MSTest.Provider.New.TestWindow.TestCaseMarshaller : object {
    private PropertyMarshaller myPropertyMarshaller;
    public string AssemblyQualifiedTypeName { get; }
    public sealed virtual string get_AssemblyQualifiedTypeName();
    public sealed virtual void Marshal(UnsafeWriter writer, object value);
    public sealed virtual object Unmarshal(UnsafeReader reader);
    private object DeserializePropertyValue(string rawValue, TestProperty property);
}
internal class JetBrains.ReSharper.UnitTesting.MSTest.Provider.New.TestWindow.TestWindowMsTestDiscoverer : object {
    [NotNullAttribute]
private IMsTestDiscoveryProtocol myProtocol;
    [NotNullAttribute]
private IMsTestFlavorResolver myFlavorResolver;
    [NotNullAttribute]
private IMsTestContainer myMsTestContainer;
    [NotNullAttribute]
private IRunSettingsProvider myRunSettingsGenerator;
    [NotNullAttribute]
private ITestRunnerService myRunner;
    public TestWindowMsTestDiscoverer(IMsTestDiscoveryProtocol protocol, IMsTestFlavorResolver flavorResolver, IMsTestContainer msTestContainer, IRunSettingsProvider runSettingsGenerator, ITestRunnerService runner);
    public sealed virtual void Dispose();
    public sealed virtual void StartDiscovery();
    public sealed virtual void AbortDiscovery();
    public sealed virtual Task Initialize(CancellationToken ct);
    [CompilerGeneratedAttribute]
private void <Initialize>b__9_0();
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.UnitTesting.MSTest.Provider.New.TestWindow.TestWindowMsTestDiscovererFactory : object {
    [NotNullAttribute]
private IMsTestFlavorResolver myFlavorResolver;
    [NotNullAttribute]
private IRunSettingsProvider myRunSettingsGenerator;
    [NotNullAttribute]
private IMsTestDiscoveryEnginePool myEnginePool;
    [NotNullAttribute]
private Lazy`1<IMsTestContainer> myMsTestContainer;
    public TestWindowMsTestDiscovererFactory(ISolution solution, IMsTestFlavorResolver flavorResolver, IRunSettingsProvider runSettingsGenerator, IMsTestDiscoveryEnginePool enginePool);
    public sealed virtual Task`1<IMsTestDiscoverer> Allocate(IMsTestDiscoveryProtocol protocol, CancellationToken ct);
    private IMsTestDiscoverer CreateDiscoverer(IMsTestDiscoveryProtocol protocol, ITestRunnerService runner);
}
internal class JetBrains.ReSharper.UnitTesting.MSTest.Provider.New.TestWindow.TestWindowMsTestRunner : object {
    [NotNullAttribute]
private IMsTestEventsSink myTestEventsSink;
    [NotNullAttribute]
private IMsTestExecutionProtocol myProtocol;
    [NotNullAttribute]
private IMsTestAgentInfoProvider myVsInfoProvider;
    [NotNullAttribute]
private IMsTestFlavorResolver myFlavorResolver;
    [NotNullAttribute]
private IMsTestContainer myMsTestContainer;
    [NotNullAttribute]
private IUnitTestResultManager myResultManager;
    [NotNullAttribute]
private IMsTestTestCaseMap myTestCaseMap;
    [NotNullAttribute]
private Execution myEngineInvoker;
    [NotNullAttribute]
private Lazy`1<XmlDocument> myRunSettings;
    private DataCollector myDataCollector;
    private IPreparedProcess myRunnerProcess;
    private ResurrectableProxy`1<ITestExecutorService> myTestExecutor;
    public TestWindowMsTestRunner(IMsTestExecutionProtocol protocol, IMsTestAgentInfoProvider vsInfoProvider, IMsTestFlavorResolver flavorResolver, IMsTestContainer msTestContainer, IUnitTestResultManager resultManager, IMsTestTestCaseMap testCaseMap, IMsTestEventsSink testEventsSink, IRunSettingsProvider runSettingsGenerator);
    public sealed virtual Task Initialize(CancellationToken ct);
    private void StartDataCollector();
    private void StartExecutionEngine();
    private IDictionary`2<string, string> GetEnvironmentVariables();
    protected void OpenClient();
    public sealed virtual void StartTestRun();
    public sealed virtual void AbortTestRun();
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private void <Initialize>b__13_0();
    [CompilerGeneratedAttribute]
private void <StartExecutionEngine>b__15_0(IPreparedProcess sender, int args);
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.UnitTesting.MSTest.Provider.New.TestWindow.TestWindowMsTestRunnerFactory : object {
    [NotNullAttribute]
private IMsTestAgentInfoProvider myVsInfoProvider;
    [NotNullAttribute]
private IMsTestFlavorResolver myFlavorResolver;
    [NotNullAttribute]
private IUnitTestResultManager myResultManager;
    [NotNullAttribute]
private IMsTestTestCaseMap myTestCaseMap;
    [NotNullAttribute]
private IMsTestEventsSink myTestEventsSink;
    [NotNullAttribute]
private IRunSettingsProvider myRunSettingsGenerator;
    [NotNullAttribute]
private Lazy`1<IMsTestContainer> myMsTestContainer;
    public TestWindowMsTestRunnerFactory(ISolution solution, IMsTestAgentInfoProvider vsInfoProvider, IMsTestFlavorResolver flavorResolver, IUnitTestResultManager resultManager, IMsTestTestCaseMap testCaseMap, IMsTestEventsSink testEventsSink, IRunSettingsProvider runSettingsGenerator);
    public sealed virtual Task`1<IMsTestRunner> Allocate(IMsTestExecutionProtocol protocol, CancellationToken ct);
}
public static class JetBrains.ReSharper.UnitTesting.MSTest.Provider.New.TestWindow.VsTestEngine : object {
}
[ShellComponentAttribute("0")]
internal class JetBrains.ReSharper.UnitTesting.MSTest.Provider.New.VsTestRuntimeEnvironmentFactory : object {
    [NotNullAttribute]
private IMsTestAgentInfoProvider myVsInfoProvider;
    public VsTestRuntimeEnvironmentFactory(IMsTestAgentInfoProvider vsInfoProvider);
    public sealed virtual VsTestRuntimeDescriptor GetDescriptor(IProject project, TargetFrameworkId targetFrameworkId, PlatformType selectedPlatformType);
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public static class JetBrains.ReSharper.UnitTesting.MSTest.Provider.Resources.Strings : object {
    private static ILogger ourLog;
    private static Lazy`1<JetResourceManager> ourResourceManager;
    [EditorBrowsableAttribute("2")]
public static JetResourceManager ResourceManager { get; }
    public static string DiscoveryMethodForDiscoveryTestsFromArtifactsSettingDescription { get; }
    public static string ForceMSTestRunnerToRunTestsEvenIfNotAllFeaturesAreSupportedSettingDescription { get; }
    public static string ForceMSTestRunnerToRunTestsWithMstestExeSettingDescription { get; }
    public static string MSTestOptionPageTitle { get; }
    public static string PathToRunconfigTestsettingsFileSettingDescription { get; }
    public static string SettingsForMSTestUnitTestProviderSettingDescription { get; }
    public static string UseRunconfigTestsettingsSelectedInVSUIVsmdiFileSettingDescription { get; }
    public static string _Enable_Support_BoolOption_Text { get; }
    public static string TestDiscovery_Header_Text { get; }
    public static string TestSettings_Header_Text { get; }
    public static string NotAnMSTestProject_Text { get; }
    public static string UnsupportedMSTestFlavor__Text { get; }
    public static string CanOnlyBeExecutedOnWindows_Text { get; }
    private static Strings();
    public static JetResourceManager get_ResourceManager();
    public static string Choice(string format, Object[] args);
    public static string get_DiscoveryMethodForDiscoveryTestsFromArtifactsSettingDescription();
    public static string get_ForceMSTestRunnerToRunTestsEvenIfNotAllFeaturesAreSupportedSettingDescription();
    public static string get_ForceMSTestRunnerToRunTestsWithMstestExeSettingDescription();
    public static string get_MSTestOptionPageTitle();
    public static string get_PathToRunconfigTestsettingsFileSettingDescription();
    public static string get_SettingsForMSTestUnitTestProviderSettingDescription();
    public static string get_UseRunconfigTestsettingsSelectedInVSUIVsmdiFileSettingDescription();
    public static string get__Enable_Support_BoolOption_Text();
    public static string get_TestDiscovery_Header_Text();
    public static string get_TestSettings_Header_Text();
    public static string get_NotAnMSTestProject_Text();
    public static string get_UnsupportedMSTestFlavor__Text();
    public static string get_CanOnlyBeExecutedOnWindows_Text();
}
public static class JetBrains.ReSharper.UnitTesting.MSTest.Provider.TestLinker.KnownPackages : object {
    public static string TestFramework;
    public static string TestAdapter;
    public static string Sdk;
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.UnitTesting.MSTest.Provider.TestLinker.MsTestFrameworkReferenceDescriptor : AggregateDescriptor {
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.UnitTesting.MSTest.Provider.TestLinker.MsTestTestProjectScopeDescriptor : object {
    [CompilerGeneratedAttribute]
private IUnitTestProvider <Provider>k__BackingField;
    public IUnitTestProvider Provider { get; }
    public MsTestTestProjectScopeDescriptor(MsTestProvider provider);
    [CompilerGeneratedAttribute]
public sealed virtual IUnitTestProvider get_Provider();
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.UnitTesting.MSTest.Provider.TestLinker.Templates.CSharp.CSharpMSTestFileTemplateContributor : object {
    private string JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Templates.IContributeTestFileTemplate.TemplateResourceName { get; }
    private string JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Templates.IContributeTestLiveTemplate.TemplateResourceName { get; }
    private sealed virtual override string JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Templates.IContributeTestFileTemplate.get_TemplateResourceName();
    private sealed virtual override string JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Templates.IContributeTestLiveTemplate.get_TemplateResourceName();
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.UnitTesting.MSTest.Provider.TestLinker.Templates.CSharp.ZoneMarker : object {
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.UnitTesting.MSTest.Provider.TestLinker.Templates.VB.VbMSTestFileTemplateContributor : object {
    private string JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Templates.IContributeTestFileTemplate.TemplateResourceName { get; }
    private string JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Templates.IContributeTestLiveTemplate.TemplateResourceName { get; }
    private sealed virtual override string JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Templates.IContributeTestFileTemplate.get_TemplateResourceName();
    private sealed virtual override string JetBrains.ReSharper.UnitTestFramework.Features.TestLinker.CreateTest.Templates.IContributeTestLiveTemplate.get_TemplateResourceName();
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.UnitTesting.MSTest.Provider.TestLinker.Templates.VB.ZoneMarker : object {
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.UnitTesting.MSTest.Provider.TestLinker.ZoneMarker : object {
}
[MsTestFlavorAttribute("5", "16")]
internal class JetBrains.ReSharper.UnitTesting.MSTest.Provider.Universal.V1.MsTestAttributesProvider : MsTestAttributesProviderBase {
    private static IClrTypeName ourMetroTestClassAttribute;
    private static IClrTypeName ourMetroTestMethodAttribute;
    private static IClrTypeName ourMetroDataTestMethodAttribute;
    private static IClrTypeName ourMetroUITestMethodAttribute;
    private static IClrTypeName ourMetroIgnoreAttribute;
    private static IClrTypeName ourMetroCategoryAttribute;
    private static IClrTypeName ourMetroDataRowAttribute;
    private static IClrTypeName[] ourTestClassAttributes;
    private static IClrTypeName[] ourTestMethodAttributes;
    private static IClrTypeName[] ourCategoryAttributes;
    private static IClrTypeName[] ourIgnoreAttributes;
    private static IClrTypeName[] ourDataRowAttributes;
    public IEnumerable`1<IClrTypeName> TestClassAttributes { get; }
    public IEnumerable`1<IClrTypeName> TestMethodAttributes { get; }
    public IEnumerable`1<IClrTypeName> IgnoreAttributes { get; }
    public IEnumerable`1<IClrTypeName> DeploymentItemAttributes { get; }
    public IEnumerable`1<IClrTypeName> CategoryAttributes { get; }
    public IEnumerable`1<IClrTypeName> DataRowAttributes { get; }
    public bool CanHaveTestWithParameters { get; }
    public MsTestAttributesProvider(IUnitTestAttributeChecker attributeChecker);
    private static MsTestAttributesProvider();
    public virtual IEnumerable`1<IClrTypeName> get_TestClassAttributes();
    public virtual IEnumerable`1<IClrTypeName> get_TestMethodAttributes();
    public virtual IEnumerable`1<IClrTypeName> get_IgnoreAttributes();
    public virtual IEnumerable`1<IClrTypeName> get_DeploymentItemAttributes();
    public virtual IEnumerable`1<IClrTypeName> get_CategoryAttributes();
    public virtual IEnumerable`1<IClrTypeName> get_DataRowAttributes();
    public virtual bool get_CanHaveTestWithParameters();
}
[MsTestFlavorAttribute("5", "16")]
public class JetBrains.ReSharper.UnitTesting.MSTest.Provider.Universal.V1.MsTestTestCaseFactory : object {
    public static TestProperty TestEnabledProperty;
    public static TestProperty TestClassNameProperty;
    public static TestProperty AsyncTestProperty;
    public static TestProperty TestCategoryProperty;
    public static TestProperty PriorityProperty;
    private static MsTestTestCaseFactory();
    public sealed virtual TestCase CreateFor(MsTestTestMethodElement element);
}
[MsTestFlavorAttribute("6", "16")]
internal class JetBrains.ReSharper.UnitTesting.MSTest.Provider.Universal.V2.MsTestAttributesProvider : MsTestAttributesProviderBase {
    private static IClrTypeName ourTestClassAttribute;
    private static IClrTypeName ourTestMethodAttribute;
    private static IClrTypeName ourDataTestMethodAttribute;
    private static IClrTypeName ourDataRowAttribute;
    private static IClrTypeName ourIgnoreAttribute;
    private static IClrTypeName ourCategoryAttribute;
    private static IClrTypeName[] ourTestClassAttributes;
    private static IClrTypeName[] ourTestMethodAttributes;
    private static IClrTypeName[] ourCategoryAttributes;
    private static IClrTypeName[] ourIgnoreAttributes;
    private static IClrTypeName[] ourDataRowAttributes;
    public IEnumerable`1<IClrTypeName> TestClassAttributes { get; }
    public IEnumerable`1<IClrTypeName> TestMethodAttributes { get; }
    public IEnumerable`1<IClrTypeName> IgnoreAttributes { get; }
    public IEnumerable`1<IClrTypeName> DeploymentItemAttributes { get; }
    public IEnumerable`1<IClrTypeName> CategoryAttributes { get; }
    public IEnumerable`1<IClrTypeName> DataRowAttributes { get; }
    public bool CanHaveTestWithParameters { get; }
    public MsTestAttributesProvider(IUnitTestAttributeChecker attributeChecker);
    private static MsTestAttributesProvider();
    public virtual IEnumerable`1<IClrTypeName> get_TestClassAttributes();
    public virtual IEnumerable`1<IClrTypeName> get_TestMethodAttributes();
    public virtual IEnumerable`1<IClrTypeName> get_IgnoreAttributes();
    public virtual IEnumerable`1<IClrTypeName> get_DeploymentItemAttributes();
    public virtual IEnumerable`1<IClrTypeName> get_CategoryAttributes();
    public virtual IEnumerable`1<IClrTypeName> get_DataRowAttributes();
    public virtual bool get_CanHaveTestWithParameters();
}
[MsTestFlavorAttribute("6", "16")]
public class JetBrains.ReSharper.UnitTesting.MSTest.Provider.Universal.V2.MsTestTestCaseFactory : object {
    public static TestProperty TestEnabledProperty;
    public static TestProperty TestClassNameProperty;
    private static MsTestTestCaseFactory();
    public sealed virtual TestCase CreateFor(MsTestTestMethodElement element);
}
[MsTestFlavorAttribute("0", "16")]
internal class JetBrains.ReSharper.UnitTesting.MSTest.Provider.Vanilla.V1.MsTestAttributesProvider : MsTestAttributesProviderBase {
    private static IClrTypeName ourTestClassAttribute;
    private static IClrTypeName ourTestClassExtensionAttribute;
    private static IClrTypeName ourTestMethodAttribute;
    private static IClrTypeName ourIgnoreAttribute;
    private static IClrTypeName ourCategoryAttribute;
    private static IClrTypeName ourDataSourceAttribute;
    private static IClrTypeName ourDeploymentItemAttribute;
    private static IClrTypeName[] ourTestClassAttributes;
    private static IClrTypeName[] ourTestMethodAttributes;
    private static IClrTypeName[] ourCategoryAttributes;
    private static IClrTypeName[] ourIgnoreAttributes;
    private static IClrTypeName[] ourDeploymentItemAttributes;
    public IEnumerable`1<IClrTypeName> TestClassAttributes { get; }
    public IEnumerable`1<IClrTypeName> TestMethodAttributes { get; }
    public IEnumerable`1<IClrTypeName> IgnoreAttributes { get; }
    public IEnumerable`1<IClrTypeName> DeploymentItemAttributes { get; }
    public IEnumerable`1<IClrTypeName> CategoryAttributes { get; }
    public IEnumerable`1<IClrTypeName> DataRowAttributes { get; }
    public bool CanHaveTestWithParameters { get; }
    public MsTestAttributesProvider(IUnitTestAttributeChecker attributeChecker);
    private static MsTestAttributesProvider();
    public virtual IEnumerable`1<IClrTypeName> get_TestClassAttributes();
    public virtual IEnumerable`1<IClrTypeName> get_TestMethodAttributes();
    public virtual IEnumerable`1<IClrTypeName> get_IgnoreAttributes();
    public virtual IEnumerable`1<IClrTypeName> get_DeploymentItemAttributes();
    public virtual IEnumerable`1<IClrTypeName> get_CategoryAttributes();
    public virtual IEnumerable`1<IClrTypeName> get_DataRowAttributes();
    public virtual bool get_CanHaveTestWithParameters();
    public virtual bool IsDataDriven(ITypeMember typeMember);
    public virtual bool IsDataDriven(IMetadataTypeMember typeMember);
}
[MsTestFlavorAttribute("0", "0")]
public class JetBrains.ReSharper.UnitTesting.MSTest.Provider.Vanilla.V1.MsTestRunStrategy : MsTestRunStrategyBase {
    public MsTestRunStrategy(IVsTestRuntimeEnvironmentFactory runtimeEnvironmentFactory, IMsTestRunnerFactoryFactory runnerFactoryFactory, MsTestDotNetCoreTestElementMapperFactory mapperFactory, IUnitTestDiscoveryManager discoveryManager, IUnitTestResultManager resultManager, ILogger logger);
}
[MsTestFlavorAttribute("0", "16")]
public class JetBrains.ReSharper.UnitTesting.MSTest.Provider.Vanilla.V1.MsTestTestCaseFactory : object {
    public static TestProperty TestEnabledProperty;
    public static TestProperty TestClassNameProperty;
    public static TestProperty TestDataDrivenProperty;
    public static TestProperty DeploymentItemsProperty;
    private static MsTestTestCaseFactory();
    public sealed virtual TestCase CreateFor(MsTestTestMethodElement element);
}
[MsTestFlavorAttribute("0", "16")]
internal class JetBrains.ReSharper.UnitTesting.MSTest.Provider.Vanilla.V1.MsTestTestExtensionsSource : object {
    public sealed virtual String[] GetPathsToAdditionalExtensions(FileSystemPath output);
}
[MsTestFlavorAttribute("1", "16")]
internal class JetBrains.ReSharper.UnitTesting.MSTest.Provider.Vanilla.V2.MsTestAttributesProvider : MsTestAttributesProviderBase {
    private static IClrTypeName ourTestClassAttribute;
    private static IClrTypeName ourTestMethodAttribute;
    private static IClrTypeName ourDataTestMethodAttribute;
    private static IClrTypeName ourDataRowAttribute;
    private static IClrTypeName ourIgnoreAttribute;
    private static IClrTypeName ourCategoryAttribute;
    private static IClrTypeName ourDataSourceAttribute;
    private static IClrTypeName ourDeploymentItemAttribute;
    private static IClrTypeName[] ourTestClassAttributes;
    private static IClrTypeName[] ourTestMethodAttributes;
    private static IClrTypeName[] ourCategoryAttributes;
    private static IClrTypeName[] ourIgnoreAttributes;
    private static IClrTypeName[] ourDataRowAttributes;
    private static IClrTypeName[] ourDeploymentItemAttributes;
    public IEnumerable`1<IClrTypeName> TestClassAttributes { get; }
    public IEnumerable`1<IClrTypeName> TestMethodAttributes { get; }
    public IEnumerable`1<IClrTypeName> IgnoreAttributes { get; }
    public IEnumerable`1<IClrTypeName> DeploymentItemAttributes { get; }
    public IEnumerable`1<IClrTypeName> CategoryAttributes { get; }
    public IEnumerable`1<IClrTypeName> DataRowAttributes { get; }
    public bool CanHaveTestWithParameters { get; }
    public MsTestAttributesProvider(IUnitTestAttributeChecker attributeChecker);
    private static MsTestAttributesProvider();
    public virtual IEnumerable`1<IClrTypeName> get_TestClassAttributes();
    public virtual IEnumerable`1<IClrTypeName> get_TestMethodAttributes();
    public virtual IEnumerable`1<IClrTypeName> get_IgnoreAttributes();
    public virtual IEnumerable`1<IClrTypeName> get_DeploymentItemAttributes();
    public virtual IEnumerable`1<IClrTypeName> get_CategoryAttributes();
    public virtual IEnumerable`1<IClrTypeName> get_DataRowAttributes();
    public virtual bool get_CanHaveTestWithParameters();
    public virtual bool IsDataDriven(ITypeMember typeMember);
    public virtual bool IsDataDriven(IMetadataTypeMember typeMember);
}
[SolutionComponentAttribute("0")]
public class JetBrains.ReSharper.UnitTesting.MSTest.Provider.Vanilla.V2.MsTestRunStrategy : MsTestRunStrategyBase {
    public MsTestRunStrategy(IVsTestRuntimeEnvironmentFactory runtimeEnvironmentFactory, IMsTestRunnerFactoryFactory runnerFactoryFactory, MsTestDotNetCoreTestElementMapperFactory mapperFactory, IUnitTestDiscoveryManager discoveryManager, IUnitTestResultManager resultManager, ILogger logger);
}
[MsTestFlavorAttribute("1", "16")]
public class JetBrains.ReSharper.UnitTesting.MSTest.Provider.Vanilla.V2.MsTestTestCaseFactory : object {
    public sealed virtual TestCase CreateFor(MsTestTestMethodElement element);
}
[MsTestFlavorAttribute("1", "16")]
internal class JetBrains.ReSharper.UnitTesting.MSTest.Provider.Vanilla.V2.MsTestTestExtensionsSource : object {
    public sealed virtual String[] GetPathsToAdditionalExtensions(FileSystemPath output);
}
[MsTestFlavorAttribute("3", "16")]
internal class JetBrains.ReSharper.UnitTesting.MSTest.Provider.WinPhone.MsTestAttributesProvider : MsTestAttributesProviderBase {
    private static IClrTypeName ourMetroTestClassAttribute;
    private static IClrTypeName ourMetroTestMethodAttribute;
    private static IClrTypeName ourMetroDataTestMethodAttribute;
    private static IClrTypeName ourMetroUITestMethodAttribute;
    private static IClrTypeName ourMetroIgnoreAttribute;
    private static IClrTypeName ourMetroCategoryAttribute;
    private static IClrTypeName ourMetroDataRowAttribute;
    private static IClrTypeName[] ourTestClassAttributes;
    private static IClrTypeName[] ourTestMethodAttributes;
    private static IClrTypeName[] ourCategoryAttributes;
    private static IClrTypeName[] ourIgnoreAttributes;
    private static IClrTypeName[] ourDataRowAttributes;
    public IEnumerable`1<IClrTypeName> TestClassAttributes { get; }
    public IEnumerable`1<IClrTypeName> TestMethodAttributes { get; }
    public IEnumerable`1<IClrTypeName> IgnoreAttributes { get; }
    public IEnumerable`1<IClrTypeName> DeploymentItemAttributes { get; }
    public IEnumerable`1<IClrTypeName> CategoryAttributes { get; }
    public IEnumerable`1<IClrTypeName> DataRowAttributes { get; }
    public bool CanHaveTestWithParameters { get; }
    public MsTestAttributesProvider(IUnitTestAttributeChecker attributeChecker);
    private static MsTestAttributesProvider();
    public virtual IEnumerable`1<IClrTypeName> get_TestClassAttributes();
    public virtual IEnumerable`1<IClrTypeName> get_TestMethodAttributes();
    public virtual IEnumerable`1<IClrTypeName> get_IgnoreAttributes();
    public virtual IEnumerable`1<IClrTypeName> get_DeploymentItemAttributes();
    public virtual IEnumerable`1<IClrTypeName> get_CategoryAttributes();
    public virtual IEnumerable`1<IClrTypeName> get_DataRowAttributes();
    public virtual bool get_CanHaveTestWithParameters();
}
[MsTestFlavorAttribute("3", "16")]
public class JetBrains.ReSharper.UnitTesting.MSTest.Provider.WinPhone.MsTestTestCaseFactory : object {
    public static TestProperty TestEnabledProperty;
    public static TestProperty TestClassNameProperty;
    public static TestProperty AsyncTestProperty;
    public static TestProperty TestCategoryProperty;
    public static TestProperty PriorityProperty;
    private static MsTestTestCaseFactory();
    public sealed virtual TestCase CreateFor(MsTestTestMethodElement element);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.UnitTesting.MSTest.Provider.ZoneMarker : object {
}
public interface JetBrains.ReSharper.UnitTestProvider.MSTest.IMsTestPageExtensionProvider {
    [CanBeNullAttribute]
public abstract virtual IAutomation TryGetViewModel(Lifetime lifetime, OptionsSettingsSmartContext optionsSettingsSmartContext, IMsTestServices services);
}
[OptionsPageAttribute("MSTest", "MSTest", "JetBrains.ReSharper.UnitTestFramework.Resources.UnitTestingThemedIcons/Mstest")]
public class JetBrains.ReSharper.UnitTestProvider.MSTest.MsTestPage : CustomSimpleOptionsPage {
    private static string PID;
    public MsTestPage(Lifetime lifetime, OptionsSettingsSmartContext optionsSettingsSmartContext, IRunSettingsSelectorDescriptor runSettingsSelectorDescriptor, IEnumerable`1<IMsTestPageExtensionProvider> msTestPageExtensionProviders, MsTestProvider provider, OptionsPageContext pageContext, ProductConfigurations productConfigurations, IMsTestServices services, ISolution solution);
    private void AddRunSettings(IRunSettingsSelectorDescriptor descriptor, Lifetime& lifetime, ISolution solution);
}
[SettingsKeyAttribute("JetBrains.ReSharper.UnitTestFramework.Settings.UnitTestingSettings", "JetBrains.ReSharper.UnitTesting.MSTest.Provider.Resources.Strings", "SettingsForMSTestUnitTestProviderSettingDescription")]
public class JetBrains.ReSharper.UnitTestProvider.MSTest.MsTestProviderSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.UnitTesting.MSTest.Provider.Resources.Strings", "UseRunconfigTestsettingsSelectedInVSUIVsmdiFileSettingDescription")]
public bool UseTestRunConfigFromMetadataFile;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.UnitTesting.MSTest.Provider.Resources.Strings", "ForceMSTestRunnerToRunTestsEvenIfNotAllFeaturesAreSupportedSettingDescription")]
public bool RunTestsEvenIfCodeCoverageEnabled;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.UnitTesting.MSTest.Provider.Resources.Strings", "ForceMSTestRunnerToRunTestsWithMstestExeSettingDescription")]
public bool RunTestsWithMsTestExe;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.ReSharper.UnitTesting.MSTest.Provider.Resources.Strings", "DiscoveryMethodForDiscoveryTestsFromArtifactsSettingDescription")]
public DiscoveryMethod TestDiscoveryFromArtifactsMethod;
}
public class JetBrains.ReSharper.UnitTestProvider.MSTest.MsTestRunConfigurationInfo : object {
    private FileSystemPath myPath;
    private string myName;
    public string Name { get; }
    public FileSystemPath Path { get; }
    public string Filename { get; }
    public bool CodeCoverageEnabled { get; }
    public bool IsMsilHost { get; }
    public MsTestRunConfigurationInfo(FileSystemPath path);
    public string get_Name();
    public FileSystemPath get_Path();
    public string get_Filename();
    public bool get_CodeCoverageEnabled();
    private static bool CheckDataCollector(XmlNode node);
    public bool get_IsMsilHost();
    public static void Edit(ISolution solution, FileSystemPath path);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.ReSharper.UnitTestProvider.MSTest.ViewModel.MsTestRunConfigSelectorViewModel : AAutomation {
    [CompilerGeneratedAttribute]
private ObservableCollection`1<MsTestRunConfigurationInfo> <RunConfigLocations>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<MsTestRunConfigurationInfo> <RunConfigInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private ISolution <Solution>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsEnabledProperty>k__BackingField;
    [UsedImplicitlyAttribute]
public ObservableCollection`1<MsTestRunConfigurationInfo> RunConfigLocations { get; private set; }
    [UsedImplicitlyAttribute]
public IProperty`1<MsTestRunConfigurationInfo> RunConfigInfo { get; private set; }
    public ISolution Solution { get; }
    public IProperty`1<bool> IsEnabledProperty { get; }
    public MsTestRunConfigSelectorViewModel(Lifetime lifetime, ISolution solution, IEnumerable`1<MsTestRunConfigurationInfo> runConfigLocations, IProperty`1<string> runConfigFilename);
    [CompilerGeneratedAttribute]
public ObservableCollection`1<MsTestRunConfigurationInfo> get_RunConfigLocations();
    [CompilerGeneratedAttribute]
private void set_RunConfigLocations(ObservableCollection`1<MsTestRunConfigurationInfo> value);
    [CompilerGeneratedAttribute]
public IProperty`1<MsTestRunConfigurationInfo> get_RunConfigInfo();
    [CompilerGeneratedAttribute]
private void set_RunConfigInfo(IProperty`1<MsTestRunConfigurationInfo> value);
    [CompilerGeneratedAttribute]
public ISolution get_Solution();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsEnabledProperty();
}
public class JetBrains.ReSharper.UnitTestProvider.MSTest.ViewModel.MsTestRunSettingsFileSelectorViewModel : AAutomation {
    [CompilerGeneratedAttribute]
private IProperty`1<string> <TestSettingsLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <TestSettingsEditEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsEnabledProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private ISolution <Solution>k__BackingField;
    [UsedImplicitlyAttribute]
public IProperty`1<string> TestSettingsLocation { get; private set; }
    [UsedImplicitlyAttribute]
public IProperty`1<bool> TestSettingsEditEnabled { get; private set; }
    public IProperty`1<bool> IsEnabledProperty { get; }
    public ISolution Solution { get; private set; }
    public MsTestRunSettingsFileSelectorViewModel(Lifetime lifetime, ISolution solution, IProperty`1<bool> isEnabled, IProperty`1<string> testSettingsLocation);
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_TestSettingsLocation();
    [CompilerGeneratedAttribute]
private void set_TestSettingsLocation(IProperty`1<string> value);
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_TestSettingsEditEnabled();
    [CompilerGeneratedAttribute]
private void set_TestSettingsEditEnabled(IProperty`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsEnabledProperty();
    [CompilerGeneratedAttribute]
public ISolution get_Solution();
    [CompilerGeneratedAttribute]
private void set_Solution(ISolution value);
    [CompilerGeneratedAttribute]
private bool <.ctor>b__0_0(string location);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_1();
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.UnitTestProvider.MSTest.ZoneMarker : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public interface Microsoft.VisualStudio.TestPlatform.Client.ITestExecutorServiceProxy {
}
[DataContractAttribute]
public class Microsoft.VisualStudio.TestPlatform.Common.Interfaces.BeforeTestRunStartResult : object {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <EnvironmentVariables>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AreTestCaseLevelEventsRequired>k__BackingField;
    [DataMemberAttribute]
public IDictionary`2<string, string> EnvironmentVariables { get; private set; }
    [DataMemberAttribute]
public bool AreTestCaseLevelEventsRequired { get; private set; }
    public BeforeTestRunStartResult(IDictionary`2<string, string> environmentVariables, bool areTestCaseLevelEventsRequired);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_EnvironmentVariables();
    [CompilerGeneratedAttribute]
private void set_EnvironmentVariables(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public bool get_AreTestCaseLevelEventsRequired();
    [CompilerGeneratedAttribute]
private void set_AreTestCaseLevelEventsRequired(bool value);
}
[ServiceContractAttribute]
public interface Microsoft.VisualStudio.TestPlatform.Common.Interfaces.ITestRunEventSinkService {
    [OperationContractAttribute]
public abstract virtual void TestConnection();
    [OperationContractAttribute]
public abstract virtual BeforeTestRunStartResult BeforeTestRunStart(string settingsXml, bool resetDataCollectors, bool isRunStartingNow);
    [OperationContractAttribute]
public abstract virtual Collection`1<AttachmentSet> AfterTestRunEnd(bool isCanceled);
}
public interface Microsoft.VisualStudio.TestPlatform.Common.Interfaces.ITestRunEventSinkServiceCallback {
    [OperationContractAttribute]
public abstract virtual void OnDataCollectionMessage(DataCollectionMessageEventArgs args);
}
public static class Microsoft.VisualStudio.TestPlatform.Common.TestRunner.ExceptionConverter : object {
    private static string rocksteadyExceptionNameSpace;
    public static Exception ConvertException(FaultException faultEx);
    private static Exception ConvertException(string exceptionType, string message, Exception innerException);
}
public class Microsoft.VisualStudio.TestPlatform.Common.TestRunner.TestPlatformException : Exception {
    public TestPlatformException(string message);
    public TestPlatformException(string message, Exception innerException);
}
[DataContractAttribute]
public enum Microsoft.VisualStudio.TestPlatform.Core.CallbackContractName : Enum {
    public int value__;
    [EnumMemberAttribute]
public static CallbackContractName LaunchProcessWithDebuggerAttached;
    [EnumMemberAttribute]
public static CallbackContractName None;
    [EnumMemberAttribute]
public static CallbackContractName OnLogMessages;
    [EnumMemberAttribute]
public static CallbackContractName OnRunComplete;
    [EnumMemberAttribute]
public static CallbackContractName OnTestRunChange;
    [EnumMemberAttribute]
public static CallbackContractName TestConnection;
    [EnumMemberAttribute]
public static CallbackContractName TestRunChanges;
}
public interface Microsoft.VisualStudio.TestPlatform.Core.IRemoteTestExecutorServiceCallback {
    [OperationContractAttribute]
public abstract virtual void ReceiveCallbackMessage(CallbackContractName contractName, IEnumerable`1<string> contractMembers);
}
[ServiceContractAttribute]
public interface Microsoft.VisualStudio.TestPlatform.Core.ITestCaseEventSinkService {
    [OperationContractAttribute]
public abstract virtual void TestConnection();
    [OperationContractAttribute]
public abstract virtual void BeforeTestCaseStart(TestCase testCase);
    [OperationContractAttribute]
public abstract virtual Collection`1<AttachmentSet> AfterTestCaseEnd(TestCase testCase, TestOutcome testOutcome);
}
public interface Microsoft.VisualStudio.TestPlatform.Core.ITestExecutorChannel {
    public CommunicationState State { get; }
    public abstract virtual CommunicationState get_State();
    public abstract virtual void RegisterForChannelFaultEvents(EventHandler action);
    public abstract virtual void UnregisterForChannelFaultEvents(EventHandler action);
    public abstract virtual void Close();
    public abstract virtual void Abort();
    public abstract virtual void Dispose();
}
[ServiceContractAttribute]
public interface Microsoft.VisualStudio.TestPlatform.Core.ITestExecutorService {
    [OperationContractAttribute]
public abstract virtual void InitializeConnection(IEnumerable`1<string> pathToAdditionalExtensions, bool loadOnlyWellKnownExtensions);
    [OperationContractAttribute]
public abstract virtual void StartTestRun(IEnumerable`1<TestCase> tests, string testRunSettings, TestExecutionContext executionContext, string dataCollectorServiceUri);
    [OperationContractAttribute]
public abstract virtual void StartTestRun(IEnumerable`1<string> sources, string testRunSettings, TestExecutionContext executionContext, string dataCollectorServiceUri);
    [OperationContractAttribute]
public abstract virtual void CancelTestRun();
    [OperationContractAttribute]
public abstract virtual void Shutdown();
}
public interface Microsoft.VisualStudio.TestPlatform.Core.ITestExecutorServiceCallback {
    [OperationContractAttribute]
public abstract virtual void TestConnection(IEnumerable`1<TestResult> dummyTestResults);
    [OperationContractAttribute]
public abstract virtual void OnTestRunChange(TestRunStats testRunStats, IEnumerable`1<TestResult> newTestResults);
    [OperationContractAttribute]
public abstract virtual void OnTestRunChanges(TestRunStats testRunStats, IEnumerable`1<TestResult> newTestResults, IEnumerable`1<TestCase> inProgressTestCases);
    [OperationContractAttribute]
public abstract virtual void OnLogMessages(IEnumerable`1<LogMessage> messages);
    [OperationContractAttribute]
public abstract virtual void OnRunComplete(bool isCanceled, bool isAborted, ICollection`1<string> executorUris, Exception exception, TestRunStats testRunStats, IEnumerable`1<TestResult> lastChunk, bool adapterHintedToShutdownAfterRun, TimeSpan elapsedTime, ICollection`1<AttachmentSet> runContextAttachments);
    [OperationContractAttribute]
public abstract virtual int LaunchProcessWithDebuggerAttached(string filePath, string workingDirectory, string arguments, IDictionary`2<string, string> environmentVariables);
}
[ServiceContractAttribute]
public interface Microsoft.VisualStudio.TestPlatform.Core.ITestRunnerService {
    [OperationContractAttribute]
[FaultContractAttribute("System.Int32")]
public abstract virtual void InitializeConnection(IEnumerable`1<string> pathToAdditionalExtensions, bool loadOnlyWellKnownExtensions);
    [OperationContractAttribute]
[FaultContractAttribute("System.Int32")]
public abstract virtual void DiscoverTests(IEnumerable`1<string> sources, string settings, long frequencyOfDiscoveredTestsEvent, TimeSpan discoveredTestEventTimeout);
}
public interface Microsoft.VisualStudio.TestPlatform.Core.ITestRunnerServiceCallback {
    [OperationContractAttribute]
public abstract virtual void TestConnection(IEnumerable`1<TestCase> dummyTests);
    [OperationContractAttribute]
public abstract virtual void DiscoveryComplete(long totalTests, IEnumerable`1<TestCase> lastChunk, bool isAborted);
    [OperationContractAttribute]
public abstract virtual void DiscoveredTests(IEnumerable`1<TestCase> currentlyDiscoveredTests);
    [OperationContractAttribute]
public abstract virtual void TestRunMessage(TestMessageLevel level, string message);
}
[DataContractAttribute]
public class Microsoft.VisualStudio.TestPlatform.Core.LogMessage : object {
    [CompilerGeneratedAttribute]
private TestMessageLevel <MessageLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [DataMemberAttribute]
public TestMessageLevel MessageLevel { get; public set; }
    [DataMemberAttribute]
public string Message { get; public set; }
    [CompilerGeneratedAttribute]
public TestMessageLevel get_MessageLevel();
    [CompilerGeneratedAttribute]
public void set_MessageLevel(TestMessageLevel value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    public static LogMessage FromTestRunMessageEventArgs(TestRunMessageEventArgs e);
}
[DataContractAttribute]
public class Microsoft.VisualStudio.TestPlatform.Core.TestExecutionContext : object {
    [CompilerGeneratedAttribute]
private bool <IsDebug>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InIsolation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <KeepAlive>k__BackingField;
    [CompilerGeneratedAttribute]
private long <FrequencyOfRunStatsChangeEvent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AreTestCaseLevelEventsRequired>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <RunStatsChangeEventTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TestCaseFilter>k__BackingField;
    [DataMemberAttribute]
public bool IsDebug { get; private set; }
    [DataMemberAttribute]
public bool InIsolation { get; private set; }
    [DataMemberAttribute]
public bool KeepAlive { get; private set; }
    [DataMemberAttribute]
public long FrequencyOfRunStatsChangeEvent { get; private set; }
    [DataMemberAttribute]
public bool AreTestCaseLevelEventsRequired { get; private set; }
    [DataMemberAttribute]
public TimeSpan RunStatsChangeEventTimeout { get; private set; }
    [DataMemberAttribute]
public string TestCaseFilter { get; private set; }
    public TestExecutionContext(long frequencyOfRunStatsChangeEvent, TimeSpan runStatsChangeEventTimeout, bool inIsolation, bool keepAlive, bool areTestCaseLevelEventsRequired, string testCaseFilter, bool isDebug);
    [CompilerGeneratedAttribute]
public bool get_IsDebug();
    [CompilerGeneratedAttribute]
private void set_IsDebug(bool value);
    [CompilerGeneratedAttribute]
public bool get_InIsolation();
    [CompilerGeneratedAttribute]
private void set_InIsolation(bool value);
    [CompilerGeneratedAttribute]
public bool get_KeepAlive();
    [CompilerGeneratedAttribute]
private void set_KeepAlive(bool value);
    [CompilerGeneratedAttribute]
public long get_FrequencyOfRunStatsChangeEvent();
    [CompilerGeneratedAttribute]
private void set_FrequencyOfRunStatsChangeEvent(long value);
    [CompilerGeneratedAttribute]
public bool get_AreTestCaseLevelEventsRequired();
    [CompilerGeneratedAttribute]
private void set_AreTestCaseLevelEventsRequired(bool value);
    [CompilerGeneratedAttribute]
public TimeSpan get_RunStatsChangeEventTimeout();
    [CompilerGeneratedAttribute]
private void set_RunStatsChangeEventTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public string get_TestCaseFilter();
    [CompilerGeneratedAttribute]
private void set_TestCaseFilter(string value);
}
[DataContractAttribute]
public class Microsoft.VisualStudio.TestPlatform.Core.TestRunStats : object {
    [CompilerGeneratedAttribute]
private long <ExecutedTests>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<TestOutcome, long> <Stats>k__BackingField;
    [DataMemberAttribute]
public long ExecutedTests { get; public set; }
    [DataMemberAttribute]
public Dictionary`2<TestOutcome, long> Stats { get; private set; }
    public TestRunStats(Dictionary`2<TestOutcome, long> stats);
    [CompilerGeneratedAttribute]
public long get_ExecutedTests();
    [CompilerGeneratedAttribute]
public void set_ExecutedTests(long value);
    [CompilerGeneratedAttribute]
public Dictionary`2<TestOutcome, long> get_Stats();
    [CompilerGeneratedAttribute]
private void set_Stats(Dictionary`2<TestOutcome, long> value);
}
[DataContractAttribute]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.AttachmentSet : object {
    [CompilerGeneratedAttribute]
private Uri <Uri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<UriDataAttachment> <Attachments>k__BackingField;
    [DataMemberAttribute]
public Uri Uri { get; private set; }
    [DataMemberAttribute]
public string DisplayName { get; private set; }
    [DataMemberAttribute]
public IList`1<UriDataAttachment> Attachments { get; private set; }
    public AttachmentSet(Uri uri, string displayName);
    [CompilerGeneratedAttribute]
public Uri get_Uri();
    [CompilerGeneratedAttribute]
private void set_Uri(Uri value);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
private void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public IList`1<UriDataAttachment> get_Attachments();
    [CompilerGeneratedAttribute]
private void set_Attachments(IList`1<UriDataAttachment> value);
}
internal class Microsoft.VisualStudio.TestPlatform.ObjectModel.CustomKeyValueConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
internal class Microsoft.VisualStudio.TestPlatform.ObjectModel.CustomStringArrayConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
internal interface Microsoft.VisualStudio.TestPlatform.ObjectModel.ILazyPropertyValue {
    public object Value { get; }
    public abstract virtual object get_Value();
}
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.LazyPropertyValue`1 : object {
    private Func`1<T> myGetValue;
    private bool myIsValueCreated;
    private T myValue;
    public T Value { get; }
    private object Microsoft.VisualStudio.TestPlatform.ObjectModel.ILazyPropertyValue.Value { get; }
    public LazyPropertyValue`1(Func`1<T> getValue);
    public T get_Value();
    private sealed virtual override object Microsoft.VisualStudio.TestPlatform.ObjectModel.ILazyPropertyValue.get_Value();
}
[DataContractAttribute]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.DataCollectionMessageEventArgs : TestRunMessageEventArgs {
    [CompilerGeneratedAttribute]
private string <FriendlyName>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <Uri>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <TestCaseId>k__BackingField;
    [DataMemberAttribute]
public string FriendlyName { get; public set; }
    [DataMemberAttribute]
public Uri Uri { get; public set; }
    [DataMemberAttribute]
public Guid TestCaseId { get; public set; }
    public DataCollectionMessageEventArgs(TestMessageLevel level, string message);
    [CompilerGeneratedAttribute]
public string get_FriendlyName();
    [CompilerGeneratedAttribute]
public void set_FriendlyName(string value);
    [CompilerGeneratedAttribute]
public Uri get_Uri();
    [CompilerGeneratedAttribute]
public void set_Uri(Uri value);
    [CompilerGeneratedAttribute]
public Guid get_TestCaseId();
    [CompilerGeneratedAttribute]
public void set_TestCaseId(Guid value);
}
public enum Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.TestMessageLevel : Enum {
    public int value__;
    public static TestMessageLevel Informational;
    public static TestMessageLevel Warning;
    public static TestMessageLevel Error;
}
[DataContractAttribute]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.TestRunMessageEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private TestMessageLevel <Level>k__BackingField;
    [DataMemberAttribute]
public string Message { get; public set; }
    [DataMemberAttribute]
public TestMessageLevel Level { get; public set; }
    public TestRunMessageEventArgs(TestMessageLevel level, string message);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public TestMessageLevel get_Level();
    [CompilerGeneratedAttribute]
public void set_Level(TestMessageLevel value);
}
[DataContractAttribute]
[KnownTypeAttribute("System.String[]")]
[KnownTypeAttribute("System.Collections.Generic.KeyValuePair`2<System.String,System.String>[]")]
[KnownTypeAttribute("Microsoft.VisualStudio.TestPlatform.ObjectModel.TestOutcome")]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase : TestObject {
    private Guid myDefaultId;
    [CompilerGeneratedAttribute]
private object <LocalExtensionData>k__BackingField;
    public object LocalExtensionData { get; public set; }
    [DataMemberAttribute]
public Guid Id { get; public set; }
    [DataMemberAttribute]
public string FullyQualifiedName { get; public set; }
    [DataMemberAttribute]
public string DisplayName { get; public set; }
    [DataMemberAttribute]
public Uri ExecutorUri { get; public set; }
    [DataMemberAttribute]
public string Source { get; private set; }
    [DataMemberAttribute]
public string CodeFilePath { get; public set; }
    [DataMemberAttribute]
public int LineNumber { get; public set; }
    public TestCase(string fullyQualifiedName, Uri executorUri, string source);
    [CompilerGeneratedAttribute]
public object get_LocalExtensionData();
    [CompilerGeneratedAttribute]
public void set_LocalExtensionData(object value);
    public Guid get_Id();
    public void set_Id(Guid value);
    public string get_FullyQualifiedName();
    public void set_FullyQualifiedName(string value);
    public string get_DisplayName();
    public void set_DisplayName(string value);
    public Uri get_ExecutorUri();
    public void set_ExecutorUri(Uri value);
    public string get_Source();
    private void set_Source(string value);
    public string get_CodeFilePath();
    public void set_CodeFilePath(string value);
    public int get_LineNumber();
    public void set_LineNumber(int value);
    private Guid GetTestId();
    public virtual string ToString();
    public string Dump();
}
public static class Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCaseProperties : object {
    public static TestProperty Id;
    public static TestProperty FullyQualifiedName;
    public static TestProperty DisplayName;
    public static TestProperty ExecutorUri;
    public static TestProperty Source;
    public static TestProperty CodeFilePath;
    public static TestProperty LineNumber;
    private static string IdLabel;
    private static string FullyQualifiedNameLabel;
    private static string NameLabel;
    private static string ExecutorUriLabel;
    private static string SourceLabel;
    private static string FilePathLabel;
    private static string LineNumberLabel;
    private static TestCaseProperties();
    private static bool ValidateName(object value);
    private static bool ValidateDisplay(object value);
    private static bool ValidateExecutorUri(object value);
    private static bool ValidateGuid(object value);
}
[DataContractAttribute]
public abstract class Microsoft.VisualStudio.TestPlatform.ObjectModel.TestObject : object {
    [DataMemberAttribute]
private Dictionary`2<TestProperty, object> myStore;
    private TraitCollection myTraits;
    [DataMemberAttribute]
private List`1<KeyValuePair`2<TestProperty, object>> StorekvpList { get; private set; }
    public IEnumerable`1<TestProperty> Properties { get; }
    public TraitCollection Traits { get; }
    private List`1<KeyValuePair`2<TestProperty, object>> get_StorekvpList();
    private void set_StorekvpList(List`1<KeyValuePair`2<TestProperty, object>> value);
    public IEnumerable`1<TestProperty> get_Properties();
    public TraitCollection get_Traits();
    [OnSerializingAttribute]
private void CacheLazyValuesOnSerializing(StreamingContext context);
    public object GetPropertyValue(TestProperty property);
    public T GetPropertyValue(TestProperty property, T defaultValue);
    public void SetPropertyValue(TestProperty property, T value);
    public void SetPropertyValue(TestProperty property, LazyPropertyValue`1<T> value);
    public void SetPropertyValue(TestProperty property, object value);
    public void RemovePropertyValue(TestProperty property);
    public T GetPropertyValue(TestProperty property, T defaultValue, CultureInfo culture);
    public void SetPropertyValue(TestProperty property, T value, CultureInfo culture);
    public void SetPropertyValue(TestProperty property, LazyPropertyValue`1<T> value, CultureInfo culture);
    private object PrivateGetPropertyValue(TestProperty property, object defaultValue);
    private void PrivateSetPropertyValue(TestProperty property, object value);
    private static object ConvertPropertyFrom(TestProperty property, CultureInfo culture, object value);
    private static T ConvertPropertyTo(TestProperty property, CultureInfo culture, object value);
    [CompilerGeneratedAttribute]
private bool <set_StorekvpList>b__4_0(KeyValuePair`2<TestProperty, object> kvp);
}
public enum Microsoft.VisualStudio.TestPlatform.ObjectModel.TestOutcome : Enum {
    public int value__;
    public static TestOutcome None;
    public static TestOutcome Passed;
    public static TestOutcome Failed;
    public static TestOutcome Skipped;
    public static TestOutcome NotFound;
}
[DataContractAttribute]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.TestProperty : object {
    private static Dictionary`2<string, KeyValuePair`2<TestProperty, HashSet`1<Type>>> ourProperties;
    private Type myValueType;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Category>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ValueType>k__BackingField;
    [CompilerGeneratedAttribute]
private TestPropertyAttributes <Attributes>k__BackingField;
    [CompilerGeneratedAttribute]
private ValidateValueCallback <ValidateValueCallback>k__BackingField;
    [DataMemberAttribute]
public string Id { get; public set; }
    [DataMemberAttribute]
public string Label { get; public set; }
    [DataMemberAttribute]
public string Category { get; public set; }
    [DataMemberAttribute]
public string Description { get; public set; }
    [DataMemberAttribute]
public string ValueType { get; public set; }
    [DataMemberAttribute]
public TestPropertyAttributes Attributes { get; public set; }
    [DataMemberAttribute]
private string Id2 { get; private set; }
    [DataMemberAttribute]
private string Label2 { get; private set; }
    [DataMemberAttribute]
private string Category2 { get; private set; }
    [DataMemberAttribute]
private string Description2 { get; private set; }
    [DataMemberAttribute]
private string ValueType2 { get; private set; }
    [DataMemberAttribute]
private TestPropertyAttributes Attributes2 { get; private set; }
    public ValidateValueCallback ValidateValueCallback { get; }
    private TestProperty(string id, string label, string category, string description, Type valueType, ValidateValueCallback validateValueCallback, TestPropertyAttributes attributes);
    private static TestProperty();
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_Label();
    [CompilerGeneratedAttribute]
public void set_Label(string value);
    [CompilerGeneratedAttribute]
public string get_Category();
    [CompilerGeneratedAttribute]
public void set_Category(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_ValueType();
    [CompilerGeneratedAttribute]
public void set_ValueType(string value);
    [CompilerGeneratedAttribute]
public TestPropertyAttributes get_Attributes();
    [CompilerGeneratedAttribute]
public void set_Attributes(TestPropertyAttributes value);
    private string get_Id2();
    private void set_Id2(string value);
    private string get_Label2();
    private void set_Label2(string value);
    private string get_Category2();
    private void set_Category2(string value);
    private string get_Description2();
    private void set_Description2(string value);
    private string get_ValueType2();
    private void set_ValueType2(string value);
    private TestPropertyAttributes get_Attributes2();
    private void set_Attributes2(TestPropertyAttributes value);
    [CompilerGeneratedAttribute]
public ValidateValueCallback get_ValidateValueCallback();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(TestProperty other);
    public virtual string ToString();
    public Type GetValueType();
    private Type GetType(string typeName);
    public static void ClearRegisteredProperties();
    public static TestProperty Find(string id);
    public static TestProperty Register(string id, string label, Type valueType, Type owner);
    public static TestProperty Register(string id, string label, Type valueType, TestPropertyAttributes attributes, Type owner);
    public static TestProperty Register(string id, string label, string category, string description, Type valueType, ValidateValueCallback validateValueCallback, TestPropertyAttributes attributes, Type owner);
    public static bool TryUnregister(string id, KeyValuePair`2& propertyTypePair);
    public sealed virtual object GetRealObject(StreamingContext context);
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.TestPlatform.ObjectModel.TestPropertyAttributes : Enum {
    public int value__;
    public static TestPropertyAttributes None;
    public static TestPropertyAttributes Hidden;
    public static TestPropertyAttributes Immutable;
    [ObsoleteAttribute("Use TestObject.Traits collection to create traits")]
public static TestPropertyAttributes Trait;
}
[DataContractAttribute]
[KnownTypeAttribute("Microsoft.VisualStudio.TestPlatform.ObjectModel.TestOutcome")]
[KnownTypeAttribute("System.DateTimeOffset")]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.TestResult : TestObject {
    [CompilerGeneratedAttribute]
private TestCase <TestCase>k__BackingField;
    [CompilerGeneratedAttribute]
private Collection`1<AttachmentSet> <Attachments>k__BackingField;
    [CompilerGeneratedAttribute]
private Collection`1<TestResultMessage> <Messages>k__BackingField;
    [DataMemberAttribute]
public TestCase TestCase { get; private set; }
    [DataMemberAttribute]
public Collection`1<AttachmentSet> Attachments { get; private set; }
    [DataMemberAttribute]
public TestOutcome Outcome { get; public set; }
    [DataMemberAttribute]
public string ErrorMessage { get; public set; }
    [DataMemberAttribute]
public string ErrorStackTrace { get; public set; }
    [DataMemberAttribute]
public string DisplayName { get; public set; }
    [DataMemberAttribute]
public Collection`1<TestResultMessage> Messages { get; private set; }
    [IgnoreDataMemberAttribute]
public string ComputerName { get; public set; }
    [DataMemberAttribute]
public TimeSpan Duration { get; public set; }
    [DataMemberAttribute]
public DateTimeOffset StartTime { get; public set; }
    [DataMemberAttribute]
public DateTimeOffset EndTime { get; public set; }
    public TestResult(TestCase testCase);
    [CompilerGeneratedAttribute]
public TestCase get_TestCase();
    [CompilerGeneratedAttribute]
private void set_TestCase(TestCase value);
    [CompilerGeneratedAttribute]
public Collection`1<AttachmentSet> get_Attachments();
    [CompilerGeneratedAttribute]
private void set_Attachments(Collection`1<AttachmentSet> value);
    public TestOutcome get_Outcome();
    public void set_Outcome(TestOutcome value);
    public string get_ErrorMessage();
    public void set_ErrorMessage(string value);
    public string get_ErrorStackTrace();
    public void set_ErrorStackTrace(string value);
    public string get_DisplayName();
    public void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public Collection`1<TestResultMessage> get_Messages();
    [CompilerGeneratedAttribute]
private void set_Messages(Collection`1<TestResultMessage> value);
    public string get_ComputerName();
    public void set_ComputerName(string value);
    public TimeSpan get_Duration();
    public void set_Duration(TimeSpan value);
    public DateTimeOffset get_StartTime();
    public void set_StartTime(DateTimeOffset value);
    public DateTimeOffset get_EndTime();
    public void set_EndTime(DateTimeOffset value);
}
[DataContractAttribute]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.TestResultMessage : object {
    public static string StandardOutCategory;
    public static string StandardErrorCategory;
    public static string DebugTraceCategory;
    public static string AdditionalInfoCategory;
    [CompilerGeneratedAttribute]
private string <Category>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [DataMemberAttribute]
public string Category { get; private set; }
    [DataMemberAttribute]
public string Text { get; private set; }
    public TestResultMessage(string category, string text);
    private static TestResultMessage();
    [CompilerGeneratedAttribute]
public string get_Category();
    [CompilerGeneratedAttribute]
private void set_Category(string value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
private void set_Text(string value);
}
[ExtensionAttribute]
public static class Microsoft.VisualStudio.TestPlatform.ObjectModel.TestResultMessageExtensions : object {
    [ExtensionAttribute]
public static TestOutputType GetTaskOutputType(TestResultMessage message);
}
public static class Microsoft.VisualStudio.TestPlatform.ObjectModel.TestResultProperties : object {
    public static TestProperty DisplayName;
    public static TestProperty ComputerName;
    public static TestProperty Outcome;
    public static TestProperty Duration;
    public static TestProperty StartTime;
    public static TestProperty EndTime;
    public static TestProperty ErrorMessage;
    public static TestProperty ErrorStackTrace;
    public static string TestResultPropertyComputerNameLabel;
    public static string TestResultPropertyDisplayNameLabel;
    public static string TestResultPropertyDurationLabel;
    public static string TestResultPropertyEndTimeLabel;
    public static string TestResultPropertyErrorColumnNumberLabel;
    public static string TestResultPropertyErrorMessageLabel;
    public static string TestResultPropertyErrorStackTraceLabel;
    public static string TestResultPropertyOutcomeLabel;
    public static string TestResultPropertyStartTimeLabel;
    private static TestResultProperties();
    private static bool ValidateComputerName(object value);
    private static bool ValidateOutcome(object value);
}
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.Trait : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Name { get; private set; }
    public string Value { get; private set; }
    internal Trait(KeyValuePair`2<string, string> data);
    public Trait(string name, string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(string value);
}
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.TraitCollection : object {
    private static TestProperty TraitsProperty;
    internal static string TraitPropertyId;
    private TestObject myTestObject;
    internal TraitCollection(TestObject testObject);
    private static TraitCollection();
    public void Add(Trait trait);
    public void Add(string name, string value);
    public void AddRange(IEnumerable`1<Trait> traits);
    public sealed virtual IEnumerator`1<Trait> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.TestPlatform.ObjectModel.TraitCollection/<GetTraits>d__9")]
private IEnumerable`1<Trait> GetTraits();
    private void Add(IEnumerable`1<Trait> traits, IEnumerable`1<Trait> newTraits);
}
[DataContractAttribute]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.UriDataAttachment : object {
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <Uri>k__BackingField;
    [DataMemberAttribute]
public string Description { get; private set; }
    [DataMemberAttribute]
public Uri Uri { get; private set; }
    public UriDataAttachment(Uri uri, string description);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
private void set_Description(string value);
    [CompilerGeneratedAttribute]
public Uri get_Uri();
    [CompilerGeneratedAttribute]
private void set_Uri(Uri value);
}
public static class Microsoft.VisualStudio.TestPlatform.ObjectModel.Utilities.EqtHash : object {
    public static Guid GuidFromString(string data);
}
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.ValidateValueCallback : MulticastDelegate {
    public ValidateValueCallback(object object, IntPtr method);
    public virtual bool Invoke(object value);
    public virtual IAsyncResult BeginInvoke(object value, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
