public abstract class JetBrains.ReSharper.UnitTesting.VsTest.Provider.Elements.VsTestElementBase : UnitTestElement {
    [CompilerGeneratedAttribute]
private string <ExecutorUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullyQualifiedName>k__BackingField;
    public string ExecutorUri { get; public set; }
    public string FullyQualifiedName { get; public set; }
    public string Kind { get; }
    protected VsTestElementBase(string testId);
    [CompilerGeneratedAttribute]
public virtual string get_ExecutorUri();
    [CompilerGeneratedAttribute]
public virtual void set_ExecutorUri(string value);
    [CompilerGeneratedAttribute]
public virtual string get_FullyQualifiedName();
    [CompilerGeneratedAttribute]
public virtual void set_FullyQualifiedName(string value);
    public virtual string get_Kind();
    public virtual IEnumerable`1<UnitTestElementLocation> GetLocations();
    public virtual IReadOnlyCollection`1<IUnitTestElement> GetRelatedUnitTestElements();
}
public class JetBrains.ReSharper.UnitTesting.VsTest.Provider.Elements.VsTestMemberElement : VsTestElementBase {
    [CompilerGeneratedAttribute]
private string <MemberName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExecutorUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullyQualifiedName>k__BackingField;
    [PersistAttribute]
[NotNullAttribute]
public string MemberName { get; public set; }
    [PersistAttribute]
[NotNullAttribute]
public string ExecutorUri { get; public set; }
    [PersistAttribute]
[NotNullAttribute]
public string FullyQualifiedName { get; public set; }
    public string ShortName { get; }
    public VsTestMemberElement(VsTestElementBase parent, string memberName);
    [CompilerGeneratedAttribute]
public string get_MemberName();
    [CompilerGeneratedAttribute]
public void set_MemberName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ExecutorUri();
    [CompilerGeneratedAttribute]
public virtual void set_ExecutorUri(string value);
    [CompilerGeneratedAttribute]
public virtual string get_FullyQualifiedName();
    [CompilerGeneratedAttribute]
public virtual void set_FullyQualifiedName(string value);
    public virtual string get_ShortName();
    public virtual IEnumerable`1<IProjectFile> GetProjectFiles();
    public virtual UnitTestElementNamespace GetNamespace();
    public virtual IDeclaredElement GetDeclaredElement();
    public virtual IReadOnlyCollection`1<IUnitTestElement> GetRelatedUnitTestElements();
}
public class JetBrains.ReSharper.UnitTesting.VsTest.Provider.Elements.VsTestParameterizedTypeElement : WithParent`1<VsTestElementBase> {
    [CompilerGeneratedAttribute]
private string <Parameters>k__BackingField;
    [PersistAttribute]
[NotNullAttribute]
public string Parameters { get; public set; }
    public string ShortName { get; }
    public VsTestParameterizedTypeElement(VsTestElementBase parent, string parameters);
    [CompilerGeneratedAttribute]
public string get_Parameters();
    [CompilerGeneratedAttribute]
public void set_Parameters(string value);
    public virtual string get_ShortName();
    public virtual IEnumerable`1<IProjectFile> GetProjectFiles();
    public virtual UnitTestElementNamespace GetNamespace();
    public virtual IEnumerable`1<UnitTestElementLocation> GetLocations();
    public virtual IDeclaredElement GetDeclaredElement();
}
public class JetBrains.ReSharper.UnitTesting.VsTest.Provider.Elements.VsTestTestElement : VsTestElementBase {
    [CompilerGeneratedAttribute]
private string <ExecutorUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullyQualifiedName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [PersistAttribute]
[NotNullAttribute]
public string ExecutorUri { get; public set; }
    [PersistAttribute]
[NotNullAttribute]
public string FullyQualifiedName { get; public set; }
    [PersistAttribute]
[NotNullAttribute]
public string DisplayName { get; public set; }
    public string ShortName { get; }
    public VsTestTestElement(string testId, string displayName);
    [CompilerGeneratedAttribute]
public virtual string get_ExecutorUri();
    [CompilerGeneratedAttribute]
public virtual void set_ExecutorUri(string value);
    [CompilerGeneratedAttribute]
public virtual string get_FullyQualifiedName();
    [CompilerGeneratedAttribute]
public virtual void set_FullyQualifiedName(string value);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
    public virtual string get_ShortName();
    public virtual UnitTestElementNamespace GetNamespace();
    public virtual IEnumerable`1<UnitTestElementLocation> GetLocations();
    public virtual IDeclaredElement GetDeclaredElement();
    public virtual IEnumerable`1<IProjectFile> GetProjectFiles();
}
public class JetBrains.ReSharper.UnitTesting.VsTest.Provider.Elements.VsTestTestRowElement : WithParent`1<VsTestElementBase> {
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [PersistAttribute]
[NotNullAttribute]
public string DisplayName { get; public set; }
    public bool IsNotRunnableStandalone { get; }
    public string ExecutorUri { get; }
    public string FullyQualifiedName { get; }
    public string ShortName { get; }
    public VsTestTestRowElement(VsTestElementBase parent, string displayName);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
    public sealed virtual bool get_IsNotRunnableStandalone();
    public virtual string get_ExecutorUri();
    public virtual string get_FullyQualifiedName();
    public virtual string get_ShortName();
    public virtual UnitTestElementNamespace GetNamespace();
    public virtual IEnumerable`1<UnitTestElementLocation> GetLocations();
    public virtual IDeclaredElement GetDeclaredElement();
    public virtual IEnumerable`1<IProjectFile> GetProjectFiles();
}
public class JetBrains.ReSharper.UnitTesting.VsTest.Provider.Elements.VsTestTypeElement : VsTestElementBase {
    [CompilerGeneratedAttribute]
private IClrTypeName <TypeName>k__BackingField;
    [PersistAttribute("JetBrains.ReSharper.UnitTestFramework.Persistence.LevelDb.Marshalling.ClrTypeNameMarshaller")]
[NotNullAttribute]
public IClrTypeName TypeName { get; public set; }
    public string ShortName { get; }
    public VsTestTypeElement(string testId, IClrTypeName typeName);
    [CompilerGeneratedAttribute]
public IClrTypeName get_TypeName();
    [CompilerGeneratedAttribute]
public void set_TypeName(IClrTypeName value);
    public virtual string get_ShortName();
    public virtual UnitTestElementNamespace GetNamespace();
    public virtual IDeclaredElement GetDeclaredElement();
    public virtual IReadOnlyCollection`1<IUnitTestElement> GetRelatedUnitTestElements();
    public virtual IEnumerable`1<IProjectFile> GetProjectFiles();
}
internal interface JetBrains.ReSharper.UnitTesting.VsTest.Provider.IVsTestServices {
    [NotNullAttribute]
public VsTestProvider Provider { get; }
    [NotNullAttribute]
public IUnitTestingTypeCache TypeCache { get; }
    [NotNullAttribute]
public IUnitTestRunStrategy RunStrategy { get; }
    public abstract virtual VsTestProvider get_Provider();
    public abstract virtual IUnitTestingTypeCache get_TypeCache();
    public abstract virtual IUnitTestRunStrategy get_RunStrategy();
}
internal abstract class JetBrains.ReSharper.UnitTesting.VsTest.Provider.Mappings.VsTestElementMapping`2 : object {
    [NotNullAttribute]
protected IVsTestServices myServices;
    protected VsTestElementMapping`2(IVsTestServices services);
    public abstract virtual TTask ToRemoteTask(TElement element, ITestRunnerExecutionContext ctx);
    public abstract virtual TElement ToElement(TTask task, ITestRunnerDiscoveryContext ctx, IUnitTestElementObserver observer);
    [NotNullAttribute]
protected VsTestElementFactory GetFactory(ITestRunnerDiscoveryContext context);
    private sealed virtual override RemoteTask JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.IUnitTestElementToRemoteTaskMapping<TElement>.GetRemoteTask(TElement element, ITestRunnerExecutionContext ctx);
    private sealed virtual override IUnitTestElement JetBrains.ReSharper.UnitTestFramework.Execution.TestRunner.IRemoteTaskToUnitTestElementMapping<TTask>.GetElement(TTask task, ITestRunnerDiscoveryContext ctx, IUnitTestElementObserver observer);
}
internal static class JetBrains.ReSharper.UnitTesting.VsTest.Provider.Mappings.VsTestElementMappingKeys : object {
    [NotNullAttribute]
public static Key`1<VsTestElementFactory> ElementFactoryKey;
    private static VsTestElementMappingKeys();
}
[SolutionComponentAttribute("0")]
internal class JetBrains.ReSharper.UnitTesting.VsTest.Provider.Mappings.VsTestTestCaseMapping : VsTestElementMapping`2<VsTestElementBase, VsTestTestCaseTask> {
    public VsTestTestCaseMapping(IVsTestServices services);
    public virtual VsTestTestCaseTask ToRemoteTask(VsTestElementBase element, ITestRunnerExecutionContext ctx);
    public virtual VsTestElementBase ToElement(VsTestTestCaseTask task, ITestRunnerDiscoveryContext ctx, IUnitTestElementObserver observer);
    private VsTestElementBase BuildHierarchy(VsTestTestCaseTask task, ITestRunnerDiscoveryContext ctx);
    private IJetSet`1<UnitTestElementCategory> GetCategories(TraitsCollection traits);
    private VsTestElementBase TryCreateParameterised(VsTestElementFactory factory, ITestRunnerDiscoveryContext ctx, VsTestElementBase parent, string testId, Int32& i);
    private ITypeMember TryFindMember(ITypeElement type, string memberName);
    [CompilerGeneratedAttribute]
private void <BuildHierarchy>g__TryCreatePart|3_0(Int32& i, int j, <>c__DisplayClass3_0& );
    [CompilerGeneratedAttribute]
internal static int <TryCreateParameterised>g__GetLastIndex|5_0(int i, <>c__DisplayClass5_0& );
}
[SolutionComponentAttribute("0")]
internal class JetBrains.ReSharper.UnitTesting.VsTest.Provider.Mappings.VsTestTestRowMapping : VsTestElementMapping`2<VsTestTestRowElement, VsTestTestRowTask> {
    public VsTestTestRowMapping(IVsTestServices services);
    public virtual VsTestTestRowTask ToRemoteTask(VsTestTestRowElement element, ITestRunnerExecutionContext ctx);
    public virtual VsTestTestRowElement ToElement(VsTestTestRowTask task, ITestRunnerDiscoveryContext ctx, IUnitTestElementObserver observer);
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public static class JetBrains.ReSharper.UnitTesting.VsTest.Provider.Resources.Strings : object {
    private static ILogger ourLog;
    private static Lazy`1<JetResourceManager> ourResourceManager;
    [EditorBrowsableAttribute("2")]
public static JetResourceManager ResourceManager { get; }
    public static string VSTestPage_Enable_TestingPlatformSupport_Checkbox { get; }
    public static string ListOfIgnoredExecutorsURIAdapterNameSettingDescription { get; }
    public static string SettingsForVsTestAdapterSettingDescription { get; }
    public static string TestProjectMasksSettingDescription { get; }
    public static string VSTestOptionPageTitle { get; }
    public static string _EnableVSTestAdaptersSupport_BoolOption_Text { get; }
    public static string ProjectsWithUnitTests_Header_Text { get; }
    public static string SpecifyFileMasksOfProjectsThatShould_Text_Text { get; }
    public static string TestsDiscoveryWillBeExecutedEvenIfNo_Text_Text { get; }
    public static string AdapterIgnoreList_Header_Text { get; }
    public static string AddDefaultTestProjectMask_Text { get; }
    public static string DisableVSTestProvider_Text { get; }
    public static string Add_ButtonWithListAction_ToolTip { get; }
    public static string Remove_Text { get; }
    public static string FillExecutorExcludeList_Text { get; }
    public static string AdaptersIngoreList_ExecutorURI_Column { get; }
    public static string AdaptersIgnoreList_Filename_Column { get; }
    private static Strings();
    public static JetResourceManager get_ResourceManager();
    public static string Choice(string format, Object[] args);
    public static string get_VSTestPage_Enable_TestingPlatformSupport_Checkbox();
    public static string get_ListOfIgnoredExecutorsURIAdapterNameSettingDescription();
    public static string get_SettingsForVsTestAdapterSettingDescription();
    public static string get_TestProjectMasksSettingDescription();
    public static string get_VSTestOptionPageTitle();
    public static string get__EnableVSTestAdaptersSupport_BoolOption_Text();
    public static string get_ProjectsWithUnitTests_Header_Text();
    public static string get_SpecifyFileMasksOfProjectsThatShould_Text_Text();
    public static string get_TestsDiscoveryWillBeExecutedEvenIfNo_Text_Text();
    public static string get_AdapterIgnoreList_Header_Text();
    public static string get_AddDefaultTestProjectMask_Text();
    public static string get_DisableVSTestProvider_Text();
    public static string get_Add_ButtonWithListAction_ToolTip();
    public static string get_Remove_Text();
    public static string get_FillExecutorExcludeList_Text();
    public static string get_AdaptersIngoreList_ExecutorURI_Column();
    public static string get_AdaptersIgnoreList_Filename_Column();
}
[UnitTestElementsTransformationRuleAttribute("16")]
internal class JetBrains.ReSharper.UnitTesting.VsTest.Provider.Rules.RemoveNonRunnableVsTestElementsRule : object {
    public sealed virtual IUnitTestElementCriterion Apply(IUnitTestElementCriterion criterion, IUnitTestSession session, IHostProvider hostProvider);
    public sealed virtual void Apply(ISet`1<IUnitTestElement> elements, IUnitTestSession session, IHostProvider hostProvider);
    private bool IsNotRunnable(IUnitTestElement element);
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.UnitTesting.VsTest.Provider.Settings.DisableTestingPlatformSupportProviderByDefault : HaveDefaultSettings`1<UnitTestingSettings> {
    public string Name { get; }
    public DisableTestingPlatformSupportProviderByDefault(ISettingsSchema settingsSchema, ILogger logger);
    public virtual void InitDefaultSettings(ISettingsStorageMountPoint mountPoint);
    public virtual string get_Name();
}
[ShellComponentAttribute("16")]
public class JetBrains.ReSharper.UnitTesting.VsTest.Provider.Settings.FillExecutorExcludeListWithDefaultValues : HaveDefaultSettings`1<VsTestProviderSettings> {
    public string Name { get; }
    public FillExecutorExcludeListWithDefaultValues(ISettingsSchema schema, ILogger logger);
    public virtual void InitDefaultSettings(ISettingsStorageMountPoint mountPoint);
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
private void <InitDefaultSettings>g__Add|1_0(string uri, string adapterFileName, <>c__DisplayClass1_0& );
}
public class JetBrains.ReSharper.UnitTesting.VsTest.Provider.TestingPlatform.Elements.TestingPlatformElement : UnitTestElement {
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MethodName>k__BackingField;
    [PersistAttribute]
[NotNullAttribute]
public string DisplayName { get; public set; }
    [PersistAttribute]
[CanBeNullAttribute]
public string Namespace { get; public set; }
    [PersistAttribute]
[CanBeNullAttribute]
public string TypeName { get; public set; }
    [PersistAttribute]
[CanBeNullAttribute]
public string MethodName { get; public set; }
    public string ShortName { get; }
    public string Kind { get; }
    public TestingPlatformElement(string id, string displayName, string ns, string typeName, string methodName);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public string get_Namespace();
    [CompilerGeneratedAttribute]
public void set_Namespace(string value);
    [CompilerGeneratedAttribute]
public string get_TypeName();
    [CompilerGeneratedAttribute]
public void set_TypeName(string value);
    [CompilerGeneratedAttribute]
public string get_MethodName();
    [CompilerGeneratedAttribute]
public void set_MethodName(string value);
    public virtual string get_ShortName();
    public virtual string get_Kind();
    public virtual IDeclaredElement GetDeclaredElement();
    public virtual IReadOnlyCollection`1<IUnitTestElement> GetRelatedUnitTestElements();
    public virtual UnitTestElementNamespace GetNamespace();
    public virtual IEnumerable`1<UnitTestElementLocation> GetLocations();
    public virtual IEnumerable`1<IProjectFile> GetProjectFiles();
}
internal interface JetBrains.ReSharper.UnitTesting.VsTest.Provider.TestingPlatform.ITcpClient {
    [NotNullAttribute]
public abstract virtual Stream GetStream();
}
internal interface JetBrains.ReSharper.UnitTesting.VsTest.Provider.TestingPlatform.ITcpListener {
    public int Port { get; }
    public abstract virtual int get_Port();
    public abstract virtual void Start();
    public abstract virtual void Stop();
    [NotNullAttribute]
public abstract virtual Task`1<ITcpClient> AcceptTcpClientAsync(CancellationToken ct);
}
internal interface JetBrains.ReSharper.UnitTesting.VsTest.Provider.TestingPlatform.ITestingPlatformCallbackHandler {
    [NotNullAttribute]
public abstract virtual Task LogAsync(LogMessage message);
    [NotNullAttribute]
public abstract virtual Task TelemetryUpdateAsync(TelemetryUpdate telemetryUpdate);
    [NotNullAttribute]
public abstract virtual Task LaunchDebuggerAsync(CreateProcessRequest request);
    [NotNullAttribute]
public abstract virtual Task AttachDebuggerAsync(AttachDebuggerRequest request, CancellationToken ct);
    [NotNullAttribute]
public abstract virtual Task TestsUpdateAsync(TestUpdateNotification notification);
}
internal interface JetBrains.ReSharper.UnitTesting.VsTest.Provider.TestingPlatform.ITestingPlatformClient {
    [NotNullAttribute]
public abstract virtual Task`1<InitializeResponse> Initialize(CancellationToken ct);
    [NotNullAttribute]
public abstract virtual Task DiscoverTests(CancellationToken ct);
    [NotNullAttribute]
public abstract virtual Task`1<RunTestsResponse> RunTests(IUnitTestRun run, CancellationToken ct);
    [NotNullAttribute]
public abstract virtual Task Shutdown();
}
internal interface JetBrains.ReSharper.UnitTesting.VsTest.Provider.TestingPlatform.ITestingPlatformClientProvider {
    [NotNullAttribute]
public abstract virtual Task`1<ITestingPlatformClient> Allocate(ITestingPlatformRuntimeDescriptor descriptor, ITestingPlatformCallbackHandler handler, IExternalProcessHost host, CancellationToken ct);
}
public interface JetBrains.ReSharper.UnitTesting.VsTest.Provider.TestingPlatform.ITestingPlatformRuntimeDescriptor {
}
[LocalizableAttribute("False")]
internal class JetBrains.ReSharper.UnitTesting.VsTest.Provider.TestingPlatform.Messages.AgentInfo : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [NotNullAttribute]
[JsonPropertyNameAttribute("name")]
public string Name { get; public set; }
    [NotNullAttribute]
[JsonPropertyNameAttribute("version")]
public string Version { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
}
[LocalizableAttribute("False")]
internal class JetBrains.ReSharper.UnitTesting.VsTest.Provider.TestingPlatform.Messages.AttachDebuggerRequest : object {
    [CompilerGeneratedAttribute]
private int <ProcessId>k__BackingField;
    [JsonPropertyNameAttribute("processId")]
public int ProcessId { get; public set; }
    [CompilerGeneratedAttribute]
public int get_ProcessId();
    [CompilerGeneratedAttribute]
public void set_ProcessId(int value);
}
[LocalizableAttribute("False")]
internal class JetBrains.ReSharper.UnitTesting.VsTest.Provider.TestingPlatform.Messages.ClientCapabilities : object {
    [CompilerGeneratedAttribute]
private TestingCapabilities <Testing>k__BackingField;
    [NotNullAttribute]
[JsonPropertyNameAttribute("testing")]
public TestingCapabilities Testing { get; public set; }
    public ClientCapabilities(TestingCapabilities testing);
    [CompilerGeneratedAttribute]
public TestingCapabilities get_Testing();
    [CompilerGeneratedAttribute]
public void set_Testing(TestingCapabilities value);
}
[LocalizableAttribute("False")]
internal class JetBrains.ReSharper.UnitTesting.VsTest.Provider.TestingPlatform.Messages.CreateProcessRequest : object {
    [CompilerGeneratedAttribute]
private string <Program>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Args>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WorkingDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <EnvironmentVariables>k__BackingField;
    [CanBeNullAttribute]
[JsonPropertyNameAttribute("program")]
public string Program { get; public set; }
    [CanBeNullAttribute]
[JsonPropertyNameAttribute("args")]
public string Args { get; public set; }
    [CanBeNullAttribute]
[JsonPropertyNameAttribute("workingDirectory")]
public string WorkingDirectory { get; public set; }
    [CanBeNullAttribute]
[JsonPropertyNameAttribute("environmentVariables")]
public IDictionary`2<string, string> EnvironmentVariables { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Program();
    [CompilerGeneratedAttribute]
public void set_Program(string value);
    [CompilerGeneratedAttribute]
public string get_Args();
    [CompilerGeneratedAttribute]
public void set_Args(string value);
    [CompilerGeneratedAttribute]
public string get_WorkingDirectory();
    [CompilerGeneratedAttribute]
public void set_WorkingDirectory(string value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_EnvironmentVariables();
    [CompilerGeneratedAttribute]
public void set_EnvironmentVariables(IDictionary`2<string, string> value);
}
[ExtensionAttribute]
internal static class JetBrains.ReSharper.UnitTesting.VsTest.Provider.TestingPlatform.Messages.CreateProcessRequestExtensions : object {
    [ExtensionAttribute]
public static ProcessStartInfo ToStartInfo(CreateProcessRequest request);
}
[LocalizableAttribute("False")]
internal class JetBrains.ReSharper.UnitTesting.VsTest.Provider.TestingPlatform.Messages.DiscoveryRequest : object {
    [CompilerGeneratedAttribute]
private Guid <RunId>k__BackingField;
    [JsonPropertyNameAttribute("runId")]
public Guid RunId { get; public set; }
    public DiscoveryRequest(Guid runId);
    [CompilerGeneratedAttribute]
public Guid get_RunId();
    [CompilerGeneratedAttribute]
public void set_RunId(Guid value);
}
[LocalizableAttribute("False")]
internal class JetBrains.ReSharper.UnitTesting.VsTest.Provider.TestingPlatform.Messages.InitializeRequest : object {
    [CompilerGeneratedAttribute]
private int <ProcessId>k__BackingField;
    [CompilerGeneratedAttribute]
private AgentInfo <ClientInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private ClientCapabilities <Capabilities>k__BackingField;
    [JsonPropertyNameAttribute("processId")]
public int ProcessId { get; public set; }
    [NotNullAttribute]
[JsonPropertyNameAttribute("clientInfo")]
public AgentInfo ClientInfo { get; public set; }
    [NotNullAttribute]
[JsonPropertyNameAttribute("capabilities")]
public ClientCapabilities Capabilities { get; public set; }
    public InitializeRequest(int processId, AgentInfo clientInfo, ClientCapabilities capabilities);
    [CompilerGeneratedAttribute]
public int get_ProcessId();
    [CompilerGeneratedAttribute]
public void set_ProcessId(int value);
    [CompilerGeneratedAttribute]
public AgentInfo get_ClientInfo();
    [CompilerGeneratedAttribute]
public void set_ClientInfo(AgentInfo value);
    [CompilerGeneratedAttribute]
public ClientCapabilities get_Capabilities();
    [CompilerGeneratedAttribute]
public void set_Capabilities(ClientCapabilities value);
}
[LocalizableAttribute("False")]
internal class JetBrains.ReSharper.UnitTesting.VsTest.Provider.TestingPlatform.Messages.InitializeResponse : object {
    [CompilerGeneratedAttribute]
private AgentInfo <ServerInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private ServerCapabilities <Capabilities>k__BackingField;
    [NotNullAttribute]
[JsonPropertyNameAttribute("serverInfo")]
public AgentInfo ServerInfo { get; public set; }
    [NotNullAttribute]
[JsonPropertyNameAttribute("capabilities")]
public ServerCapabilities Capabilities { get; public set; }
    public InitializeResponse(AgentInfo serverInfo, ServerCapabilities capabilities);
    [CompilerGeneratedAttribute]
public AgentInfo get_ServerInfo();
    [CompilerGeneratedAttribute]
public void set_ServerInfo(AgentInfo value);
    [CompilerGeneratedAttribute]
public ServerCapabilities get_Capabilities();
    [CompilerGeneratedAttribute]
public void set_Capabilities(ServerCapabilities value);
}
[LocalizableAttribute("False")]
internal class JetBrains.ReSharper.UnitTesting.VsTest.Provider.TestingPlatform.Messages.LogMessage : object {
    [CompilerGeneratedAttribute]
private TestingPlatformLogLevel <LogLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [JsonPropertyNameAttribute("level")]
public TestingPlatformLogLevel LogLevel { get; public set; }
    [JsonPropertyNameAttribute("message")]
public string Message { get; public set; }
    [CompilerGeneratedAttribute]
public TestingPlatformLogLevel get_LogLevel();
    [CompilerGeneratedAttribute]
public void set_LogLevel(TestingPlatformLogLevel value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
}
[ExtensionAttribute]
internal static class JetBrains.ReSharper.UnitTesting.VsTest.Provider.TestingPlatform.Messages.LogMessageExtensions : object {
    [ExtensionAttribute]
public static LoggingLevel ToLoggingLevel(TestingPlatformLogLevel level);
}
[LocalizableAttribute("False")]
internal class JetBrains.ReSharper.UnitTesting.VsTest.Provider.TestingPlatform.Messages.RunTestAttachment : object {
    [CompilerGeneratedAttribute]
private string <Uri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Producer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CanBeNullAttribute]
[JsonPropertyNameAttribute("uri")]
public string Uri { get; public set; }
    [CanBeNullAttribute]
[JsonPropertyNameAttribute("producer")]
public string Producer { get; public set; }
    [CanBeNullAttribute]
[JsonPropertyNameAttribute("type")]
public string Type { get; public set; }
    [CanBeNullAttribute]
[JsonPropertyNameAttribute("display-name")]
public string DisplayName { get; public set; }
    [CanBeNullAttribute]
[JsonPropertyNameAttribute("description")]
public string Description { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Uri();
    [CompilerGeneratedAttribute]
public void set_Uri(string value);
    [CompilerGeneratedAttribute]
public string get_Producer();
    [CompilerGeneratedAttribute]
public void set_Producer(string value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
}
[LocalizableAttribute("False")]
internal class JetBrains.ReSharper.UnitTesting.VsTest.Provider.TestingPlatform.Messages.RunTestsRequest : object {
    [CompilerGeneratedAttribute]
private Guid <RunId>k__BackingField;
    [CompilerGeneratedAttribute]
private TestNode[] <Tests>k__BackingField;
    [JsonPropertyNameAttribute("runId")]
public Guid RunId { get; public set; }
    [CanBeNullAttribute]
[JsonPropertyNameAttribute("tests")]
public TestNode[] Tests { get; public set; }
    public RunTestsRequest(Guid runId, TestNode[] tests);
    public RunTestsRequest(Guid runId);
    [CompilerGeneratedAttribute]
public Guid get_RunId();
    [CompilerGeneratedAttribute]
public void set_RunId(Guid value);
    [CompilerGeneratedAttribute]
public TestNode[] get_Tests();
    [CompilerGeneratedAttribute]
public void set_Tests(TestNode[] value);
}
[LocalizableAttribute("False")]
internal class JetBrains.ReSharper.UnitTesting.VsTest.Provider.TestingPlatform.Messages.RunTestsResponse : object {
    [CompilerGeneratedAttribute]
private RunTestAttachment[] <Attachments>k__BackingField;
    [JsonPropertyNameAttribute("attachments")]
public RunTestAttachment[] Attachments { get; public set; }
    [CompilerGeneratedAttribute]
public RunTestAttachment[] get_Attachments();
    [CompilerGeneratedAttribute]
public void set_Attachments(RunTestAttachment[] value);
}
[LocalizableAttribute("False")]
internal class JetBrains.ReSharper.UnitTesting.VsTest.Provider.TestingPlatform.Messages.ServerCapabilities : object {
    [CompilerGeneratedAttribute]
private TestingCapabilities <Testing>k__BackingField;
    [JsonPropertyNameAttribute("testing")]
public TestingCapabilities Testing { get; public set; }
    [CompilerGeneratedAttribute]
public TestingCapabilities get_Testing();
    [CompilerGeneratedAttribute]
public void set_Testing(TestingCapabilities value);
}
[LocalizableAttribute("False")]
internal class JetBrains.ReSharper.UnitTesting.VsTest.Provider.TestingPlatform.Messages.TelemetryUpdate : object {
    [CompilerGeneratedAttribute]
private string <EventName>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <Metrics>k__BackingField;
    [JsonPropertyNameAttribute("eventName")]
public string EventName { get; public set; }
    [JsonPropertyNameAttribute("metrics")]
public Dictionary`2<string, object> Metrics { get; public set; }
    [CompilerGeneratedAttribute]
public string get_EventName();
    [CompilerGeneratedAttribute]
public void set_EventName(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, object> get_Metrics();
    [CompilerGeneratedAttribute]
public void set_Metrics(Dictionary`2<string, object> value);
}
internal enum JetBrains.ReSharper.UnitTesting.VsTest.Provider.TestingPlatform.Messages.TestingPlatformLogLevel : Enum {
    public int value__;
    public static TestingPlatformLogLevel Trace;
    public static TestingPlatformLogLevel Debug;
    public static TestingPlatformLogLevel Information;
    public static TestingPlatformLogLevel Warning;
    public static TestingPlatformLogLevel Error;
    public static TestingPlatformLogLevel Critical;
    public static TestingPlatformLogLevel None;
}
[LocalizableAttribute("False")]
internal class JetBrains.ReSharper.UnitTesting.VsTest.Provider.TestingPlatform.Messages.TestNode : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, JsonElement> <ExtensionProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Uid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExecutionState>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<KeyValuePair`2<string, string>> <Traits>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LocationNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LocationType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LocationMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LocationFile>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <LocationLineStart>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <LocationLineEnd>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorStacktrace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssertExpected>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssertActual>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <TimeDurationMs>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TimeStartUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TimeStopUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VSTestOriginalExecutorUri>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <VSTestTestCaseId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VSTestTestCaseFullyQualifiedName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VSTestTestCaseDisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VSTestTestCaseLineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VSTestTestCaseCodeFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VSTestTestCaseManagedType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VSTestTestCaseCodeManagedMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <VSTestCaseTestHierarchy>k__BackingField;
    [CanBeNullAttribute]
[JsonExtensionDataAttribute]
public Dictionary`2<string, JsonElement> ExtensionProperties { get; public set; }
    [JsonPropertyNameAttribute("uid")]
public string Uid { get; public set; }
    [JsonPropertyNameAttribute("display-name")]
public string DisplayName { get; public set; }
    [JsonPropertyNameAttribute("node-type")]
[JsonIgnoreAttribute]
public string NodeType { get; public set; }
    [NotNullAttribute]
[JsonPropertyNameAttribute("execution-state")]
[JsonIgnoreAttribute]
public string ExecutionState { get; public set; }
    [JsonPropertyNameAttribute("traits")]
[JsonConverterAttribute("JetBrains.ReSharper.UnitTesting.VsTest.Provider.TestingPlatform.Messages.TestNode/TraitsConverter")]
[JsonIgnoreAttribute]
public ICollection`1<KeyValuePair`2<string, string>> Traits { get; public set; }
    [CanBeNullAttribute]
[JsonPropertyNameAttribute("location.namespace")]
[JsonIgnoreAttribute]
public string LocationNamespace { get; public set; }
    [CanBeNullAttribute]
[JsonPropertyNameAttribute("location.type")]
[JsonIgnoreAttribute]
public string LocationType { get; public set; }
    [CanBeNullAttribute]
[JsonPropertyNameAttribute("location.method")]
[JsonIgnoreAttribute]
public string LocationMethod { get; public set; }
    [CanBeNullAttribute]
[JsonPropertyNameAttribute("location.file")]
[JsonIgnoreAttribute]
public string LocationFile { get; public set; }
    [JsonPropertyNameAttribute("location.line-start")]
[JsonIgnoreAttribute]
public Nullable`1<int> LocationLineStart { get; public set; }
    [JsonPropertyNameAttribute("location.line-end")]
[JsonIgnoreAttribute]
public Nullable`1<int> LocationLineEnd { get; public set; }
    [CanBeNullAttribute]
[JsonPropertyNameAttribute("error.message")]
[JsonIgnoreAttribute]
public string ErrorMessage { get; public set; }
    [CanBeNullAttribute]
[JsonPropertyNameAttribute("error.stacktrace")]
[JsonIgnoreAttribute]
public string ErrorStacktrace { get; public set; }
    [CanBeNullAttribute]
[JsonPropertyNameAttribute("assert.expected")]
[JsonIgnoreAttribute]
public string AssertExpected { get; public set; }
    [CanBeNullAttribute]
[JsonPropertyNameAttribute("assert.actual")]
[JsonIgnoreAttribute]
public string AssertActual { get; public set; }
    [JsonPropertyNameAttribute("time.duration-ms")]
[JsonIgnoreAttribute]
public Nullable`1<double> TimeDurationMs { get; public set; }
    [CanBeNullAttribute]
[JsonPropertyNameAttribute("time.start-utc")]
[JsonIgnoreAttribute]
public string TimeStartUtc { get; public set; }
    [CanBeNullAttribute]
[JsonPropertyNameAttribute("time.stop-utc")]
[JsonIgnoreAttribute]
public string TimeStopUtc { get; public set; }
    [CanBeNullAttribute]
[JsonPropertyNameAttribute("vstest.original-executor-uri")]
[JsonIgnoreAttribute]
public string VSTestOriginalExecutorUri { get; public set; }
    [JsonPropertyNameAttribute("vstest.TestCase.Id")]
[JsonIgnoreAttribute]
public Guid VSTestTestCaseId { get; public set; }
    [CanBeNullAttribute]
[JsonPropertyNameAttribute("vstest.TestCase.FullyQualifiedName")]
[JsonIgnoreAttribute]
public string VSTestTestCaseFullyQualifiedName { get; public set; }
    [CanBeNullAttribute]
[JsonPropertyNameAttribute("vstest.TestCase.DisplayName")]
[JsonIgnoreAttribute]
public string VSTestTestCaseDisplayName { get; public set; }
    [CanBeNullAttribute]
[JsonPropertyNameAttribute("vstest.TestCase.LineNumber")]
[JsonIgnoreAttribute]
public string VSTestTestCaseLineNumber { get; public set; }
    [CanBeNullAttribute]
[JsonPropertyNameAttribute("vstest.TestCase.CodeFilePath")]
[JsonIgnoreAttribute]
public string VSTestTestCaseCodeFilePath { get; public set; }
    [CanBeNullAttribute]
[JsonPropertyNameAttribute("vstest.TestCase.ManagedType")]
[JsonIgnoreAttribute]
public string VSTestTestCaseManagedType { get; public set; }
    [CanBeNullAttribute]
[JsonPropertyNameAttribute("vstest.TestCase.ManagedMethod")]
[JsonIgnoreAttribute]
public string VSTestTestCaseCodeManagedMethod { get; public set; }
    [CanBeNullAttribute]
[JsonPropertyNameAttribute("vstest.TestCase.Hierarchy")]
[JsonIgnoreAttribute]
public String[] VSTestCaseTestHierarchy { get; public set; }
    [CompilerGeneratedAttribute]
public Dictionary`2<string, JsonElement> get_ExtensionProperties();
    [CompilerGeneratedAttribute]
public void set_ExtensionProperties(Dictionary`2<string, JsonElement> value);
    [CompilerGeneratedAttribute]
public string get_Uid();
    [CompilerGeneratedAttribute]
public void set_Uid(string value);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public string get_NodeType();
    [CompilerGeneratedAttribute]
public void set_NodeType(string value);
    [CompilerGeneratedAttribute]
public string get_ExecutionState();
    [CompilerGeneratedAttribute]
public void set_ExecutionState(string value);
    [CompilerGeneratedAttribute]
public ICollection`1<KeyValuePair`2<string, string>> get_Traits();
    [CompilerGeneratedAttribute]
public void set_Traits(ICollection`1<KeyValuePair`2<string, string>> value);
    [CompilerGeneratedAttribute]
public string get_LocationNamespace();
    [CompilerGeneratedAttribute]
public void set_LocationNamespace(string value);
    [CompilerGeneratedAttribute]
public string get_LocationType();
    [CompilerGeneratedAttribute]
public void set_LocationType(string value);
    [CompilerGeneratedAttribute]
public string get_LocationMethod();
    [CompilerGeneratedAttribute]
public void set_LocationMethod(string value);
    [CompilerGeneratedAttribute]
public string get_LocationFile();
    [CompilerGeneratedAttribute]
public void set_LocationFile(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_LocationLineStart();
    [CompilerGeneratedAttribute]
public void set_LocationLineStart(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_LocationLineEnd();
    [CompilerGeneratedAttribute]
public void set_LocationLineEnd(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_ErrorMessage();
    [CompilerGeneratedAttribute]
public void set_ErrorMessage(string value);
    [CompilerGeneratedAttribute]
public string get_ErrorStacktrace();
    [CompilerGeneratedAttribute]
public void set_ErrorStacktrace(string value);
    [CompilerGeneratedAttribute]
public string get_AssertExpected();
    [CompilerGeneratedAttribute]
public void set_AssertExpected(string value);
    [CompilerGeneratedAttribute]
public string get_AssertActual();
    [CompilerGeneratedAttribute]
public void set_AssertActual(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_TimeDurationMs();
    [CompilerGeneratedAttribute]
public void set_TimeDurationMs(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public string get_TimeStartUtc();
    [CompilerGeneratedAttribute]
public void set_TimeStartUtc(string value);
    [CompilerGeneratedAttribute]
public string get_TimeStopUtc();
    [CompilerGeneratedAttribute]
public void set_TimeStopUtc(string value);
    [CompilerGeneratedAttribute]
public string get_VSTestOriginalExecutorUri();
    [CompilerGeneratedAttribute]
public void set_VSTestOriginalExecutorUri(string value);
    [CompilerGeneratedAttribute]
public Guid get_VSTestTestCaseId();
    [CompilerGeneratedAttribute]
public void set_VSTestTestCaseId(Guid value);
    [CompilerGeneratedAttribute]
public string get_VSTestTestCaseFullyQualifiedName();
    [CompilerGeneratedAttribute]
public void set_VSTestTestCaseFullyQualifiedName(string value);
    [CompilerGeneratedAttribute]
public string get_VSTestTestCaseDisplayName();
    [CompilerGeneratedAttribute]
public void set_VSTestTestCaseDisplayName(string value);
    [CompilerGeneratedAttribute]
public string get_VSTestTestCaseLineNumber();
    [CompilerGeneratedAttribute]
public void set_VSTestTestCaseLineNumber(string value);
    [CompilerGeneratedAttribute]
public string get_VSTestTestCaseCodeFilePath();
    [CompilerGeneratedAttribute]
public void set_VSTestTestCaseCodeFilePath(string value);
    [CompilerGeneratedAttribute]
public string get_VSTestTestCaseManagedType();
    [CompilerGeneratedAttribute]
public void set_VSTestTestCaseManagedType(string value);
    [CompilerGeneratedAttribute]
public string get_VSTestTestCaseCodeManagedMethod();
    [CompilerGeneratedAttribute]
public void set_VSTestTestCaseCodeManagedMethod(string value);
    [CompilerGeneratedAttribute]
public String[] get_VSTestCaseTestHierarchy();
    [CompilerGeneratedAttribute]
public void set_VSTestCaseTestHierarchy(String[] value);
}
[LocalizableAttribute("False")]
internal class JetBrains.ReSharper.UnitTesting.VsTest.Provider.TestingPlatform.Messages.TestUpdateNotification : object {
    [CompilerGeneratedAttribute]
private Guid <RunId>k__BackingField;
    [CompilerGeneratedAttribute]
private TestUpdateChange[] <Changes>k__BackingField;
    [JsonPropertyNameAttribute("runId")]
public Guid RunId { get; public set; }
    [CanBeNullAttribute]
[JsonPropertyNameAttribute("changes")]
public TestUpdateChange[] Changes { get; public set; }
    [CompilerGeneratedAttribute]
public Guid get_RunId();
    [CompilerGeneratedAttribute]
public void set_RunId(Guid value);
    [CompilerGeneratedAttribute]
public TestUpdateChange[] get_Changes();
    [CompilerGeneratedAttribute]
public void set_Changes(TestUpdateChange[] value);
}
[LocalizableAttribute("False")]
internal class JetBrains.ReSharper.UnitTesting.VsTest.Provider.TestingPlatform.TestingPlatformClient : object {
    [NotNullAttribute]
private IPreparedProcess myServerProcess;
    [NotNullAttribute]
private IUnitTestDebugHost myDebugHost;
    [NotNullAttribute]
private ITcpListener myTcpListener;
    [NotNullAttribute]
private JsonRpc myRpc;
    public TestingPlatformClient(IUnitTestDebugHost debugHost, ITcpListener tcpListener, IPreparedProcess serverProcess, JsonRpc rpc);
    public sealed virtual Task`1<InitializeResponse> Initialize(CancellationToken ct);
    public sealed virtual Task DiscoverTests(CancellationToken ct);
    public sealed virtual Task`1<RunTestsResponse> RunTests(IUnitTestRun run, CancellationToken ct);
    public sealed virtual Task Shutdown();
    private Task RunSafe(string method, T arg, CancellationToken ct);
    private Task`1<TResult> RunSafe(string method, T arg, CancellationToken ct);
    public sealed virtual void Dispose();
}
[SolutionComponentAttribute("16")]
internal class JetBrains.ReSharper.UnitTesting.VsTest.Provider.TestingPlatform.TestingPlatformClientProvider : object {
    [NotNullAttribute]
private ISolutionToolset myToolset;
    [NotNullAttribute]
private IUnitTestDebugHost myDebugHost;
    public TestingPlatformClientProvider(ISolutionToolset toolset, IUnitTestDebugHost debugHost);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.UnitTesting.VsTest.Provider.TestingPlatform.TestingPlatformClientProvider/<Allocate>d__3")]
public sealed virtual Task`1<ITestingPlatformClient> Allocate(ITestingPlatformRuntimeDescriptor descriptor, ITestingPlatformCallbackHandler callbackHandler, IExternalProcessHost host, CancellationToken ct);
    private ProcessStartInfo PrepareStartInfo(ITestingPlatformRuntimeDescriptor descriptor, int clientPort);
}
[ExtensionAttribute]
internal static class JetBrains.ReSharper.UnitTesting.VsTest.Provider.TestingPlatform.TestingPlatformClientProviderExtensions : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static Task`1<ITestingPlatformClient> Allocate(ITestingPlatformClientProvider provider, IUnitTestRun run, ITestingPlatformCallbackHandler handler, CancellationToken ct);
    [ExtensionAttribute]
[NotNullAttribute]
public static Task`1<ITestingPlatformClient> Allocate(ITestingPlatformClientProvider provider, IUnitTestElementObserver observer, ITestingPlatformCallbackHandler handler, CancellationToken ct);
}
internal abstract class JetBrains.ReSharper.UnitTesting.VsTest.Provider.TestingPlatform.TestingPlatformHandler : object {
    [NotNullAttribute]
private static ConcurrentExclusiveSchedulerPair ourSchedulerPair;
    [NotNullAttribute]
private ILogger myLogger;
    [NotNullAttribute]
private TaskFactory myTaskFactory;
    [NotNullAttribute]
private TaskCompletionSource`1<int> myRequestCompleted;
    protected TestingPlatformHandler(ILogger logger);
    private static TestingPlatformHandler();
    [JsonRpcMethodAttribute("client/log")]
public sealed virtual Task LogAsync(LogMessage message);
    [JsonRpcMethodAttribute("telemetry/update")]
public sealed virtual Task TelemetryUpdateAsync(TelemetryUpdate telemetryUpdate);
    [JsonRpcMethodAttribute("client/launchDebugger")]
public virtual Task LaunchDebuggerAsync(CreateProcessRequest request);
    [JsonRpcMethodAttribute("client/attachDebugger")]
public virtual Task AttachDebuggerAsync(AttachDebuggerRequest request, CancellationToken ct);
    [JsonRpcMethodAttribute("testing/testUpdates/tests")]
public sealed virtual Task TestsUpdateAsync(TestUpdateNotification notification);
    [NotNullAttribute]
public Task RequestCompleted();
    protected abstract virtual void ProcessUpdate(TestUpdateNotification notification);
    protected abstract virtual void ProcessCompleted();
}
internal enum JetBrains.ReSharper.UnitTesting.VsTest.Provider.TestingPlatform.TestingPlatformLogLevel : Enum {
    public int value__;
    public static TestingPlatformLogLevel Trace;
    public static TestingPlatformLogLevel Debug;
    public static TestingPlatformLogLevel Information;
    public static TestingPlatformLogLevel Warning;
    public static TestingPlatformLogLevel Error;
    public static TestingPlatformLogLevel Critical;
    public static TestingPlatformLogLevel None;
}
[SolutionComponentAttribute("16")]
internal class JetBrains.ReSharper.UnitTesting.VsTest.Provider.TestingPlatform.TestingPlatformRunStrategy : object {
    [NotNullAttribute]
private static Key`1<CancellationTokenSource> ourCancelTcsKey;
    [NotNullAttribute]
private static Key`1<CancellationTokenSource> ourAbortTcsKey;
    [NotNullAttribute]
private ITestingPlatformClientProvider myClientProvider;
    public TestingPlatformRunStrategy(ITestingPlatformClientProvider clientProvider);
    private static TestingPlatformRunStrategy();
    public sealed virtual bool RequiresProjectBuild(IProject project);
    public sealed virtual bool RequiresProjectExplorationAfterBuild(IProject project);
    public sealed virtual IProject GetProjectForPropertiesRefreshBeforeLaunch(IUnitTestElement element);
    public sealed virtual IRuntimeDescriptor GetRuntimeDescriptor(IUnitTestLaunch launch, IUnitTestElement element);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.UnitTesting.VsTest.Provider.TestingPlatform.TestingPlatformRunStrategy/<Run>d__8")]
public sealed virtual Task Run(IUnitTestRun run);
    public sealed virtual void Cancel(IUnitTestRun run);
    public sealed virtual void Abort(IUnitTestRun run);
    private CancellationTokenSource Token(IUnitTestRun run, Key`1<CancellationTokenSource> key);
}
public abstract class JetBrains.ReSharper.UnitTesting.VsTest.Provider.TestingPlatform.TestingPlatformRuntimeDescriptor : object {
    [CompilerGeneratedAttribute]
private TargetPlatform <Platform>k__BackingField;
    [CompilerGeneratedAttribute]
private IProject <Project>k__BackingField;
    [CompilerGeneratedAttribute]
private TargetFrameworkId <TargetFrameworkId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasNativeCode>k__BackingField;
    public TargetPlatform Platform { get; }
    public IProject Project { get; }
    public TargetFrameworkId TargetFrameworkId { get; }
    public bool HasNativeCode { get; }
    protected TestingPlatformRuntimeDescriptor(IUnitTestLaunch launch, IProject project, TargetFrameworkId targetFrameworkId, Nullable`1<TargetPlatform> platform);
    [CompilerGeneratedAttribute]
public sealed virtual TargetPlatform get_Platform();
    [CompilerGeneratedAttribute]
public sealed virtual IProject get_Project();
    [CompilerGeneratedAttribute]
public sealed virtual TargetFrameworkId get_TargetFrameworkId();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasNativeCode();
    protected virtual TargetPlatform CalculatePlatform(IUnitTestLaunch launch);
    protected virtual bool CalculateHasNativeCode(IUnitTestLaunch launch);
    protected bool Equals(TestingPlatformRuntimeDescriptor other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static IRuntimeDescriptor Create(IUnitTestLaunch launch, IUnitTestElement element, Nullable`1<TargetPlatform> platform);
    [NotNullAttribute]
public static ITestingPlatformRuntimeDescriptor Create(IUnitTestElementObserver observer);
}
internal class JetBrains.ReSharper.UnitTesting.VsTest.Provider.TestingPlatform.TestingPlatformTcpClient : object {
    [NotNullAttribute]
private TcpClient myClient;
    public TestingPlatformTcpClient(TcpClient client);
    public sealed virtual Stream GetStream();
}
internal class JetBrains.ReSharper.UnitTesting.VsTest.Provider.TestingPlatform.TestingPlatformTcpListener : object {
    private TcpListener myListener;
    public int Port { get; }
    public TestingPlatformTcpListener(int port);
    public sealed virtual int get_Port();
    public sealed virtual void Start();
    public sealed virtual void Stop();
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("JetBrains.ReSharper.UnitTesting.VsTest.Provider.TestingPlatform.TestingPlatformTcpListener/<AcceptTcpClientAsync>d__7")]
public sealed virtual Task`1<ITcpClient> AcceptTcpClientAsync(CancellationToken ct);
}
[SolutionComponentAttribute("0")]
internal class JetBrains.ReSharper.UnitTesting.VsTest.Provider.TestingPlatform.TestingPlatformTestExplorerFromArtifacts : Async {
    [NotNullAttribute]
private static SemaphoreSlim ourPool;
    [NotNullAttribute]
private ITestingPlatformClientProvider myClientProvider;
    protected SemaphoreSlim Semaphore { get; }
    public TestingPlatformTestExplorerFromArtifacts(TestingPlatformTestProvider provider, ITestingPlatformClientProvider clientProvider, NuGetInstalledPackageChecker installedPackageChecker);
    private static TestingPlatformTestExplorerFromArtifacts();
    protected virtual SemaphoreSlim get_Semaphore();
    public virtual PertinenceResult IsSupported(IProject project, TargetFrameworkId targetFrameworkId);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.UnitTesting.VsTest.Provider.TestingPlatform.TestingPlatformTestExplorerFromArtifacts/<ProcessProject>d__6")]
protected virtual Task ProcessProject(IUnitTestElementObserver observer, CancellationToken token);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.UnitTesting.VsTest.Provider.TestingPlatform.TestingPlatformTestExplorerFromArtifacts/<GetRequiredNuGetDependencies>d__7")]
protected virtual IEnumerable`1<string> GetRequiredNuGetDependencies(IProject project, TargetFrameworkId targetFrameworkId);
}
[UnitTestProviderAttribute("16")]
public class JetBrains.ReSharper.UnitTesting.VsTest.Provider.TestingPlatform.TestingPlatformTestProvider : object {
    public static string PROVIDER_ID;
    private static AssemblyNameInfo ourReferenceName;
    public string ID { get; }
    public string Name { get; }
    private static TestingPlatformTestProvider();
    public sealed virtual string get_ID();
    public sealed virtual string get_Name();
    public sealed virtual bool IsElementOfKind(IDeclaredElement declaredElement, UnitTestElementKind elementKind);
    public sealed virtual bool IsElementOfKind(IUnitTestElement element, UnitTestElementKind elementKind);
    public sealed virtual bool IsSupported(IHostProvider hostProvider, IProject project, TargetFrameworkId targetFrameworkId);
    public sealed virtual bool IsSupported(IProject project, TargetFrameworkId targetFrameworkId);
    public sealed virtual bool SupportsResultEventsForParentOf(IUnitTestElement element);
    public sealed virtual IUnitTestRunStrategy GetRunStrategy(IUnitTestElement element, IHostProvider hostProvider);
}
[SolutionComponentAttribute("0")]
internal class JetBrains.ReSharper.UnitTesting.VsTest.Provider.TestingPlatformTestExplorerFromFile : object {
    [NotNullAttribute]
private IUnitTestElementRepository myRepository;
    [CompilerGeneratedAttribute]
private IUnitTestProvider <Provider>k__BackingField;
    public IUnitTestProvider Provider { get; }
    public TestingPlatformTestExplorerFromFile(TestingPlatformTestProvider provider, IUnitTestElementRepository repository);
    [CompilerGeneratedAttribute]
public sealed virtual IUnitTestProvider get_Provider();
    public sealed virtual void ProcessFile(IFile psiFile, IUnitTestElementObserverOnFile observer, Func`1<bool> interrupted);
}
internal class JetBrains.ReSharper.UnitTesting.VsTest.Provider.VsTestElementFactory : object {
    [NotNullAttribute]
private JetHashSet`1<IUnitTestElement> myElements;
    [NotNullAttribute]
public VsTestTypeElement GetOrCreateType(string executorUri, IClrTypeName clrTypeName, VsTestElementBase parent);
    [NotNullAttribute]
public VsTestParameterizedTypeElement GetOrCreateParameterisedType(VsTestElementBase parent, string parameters);
    [NotNullAttribute]
public VsTestMemberElement GetOrCreateMember(string executorUri, string memberName, VsTestElementBase parent);
    [NotNullAttribute]
public VsTestTestElement GetOrCreateTestCase(string id, string displayName, VsTestElementBase parent);
    public VsTestTestRowElement GetOrCreateRowElement(VsTestElementBase parent, string displayName);
}
[OptionsPageAttribute("VsTest", "VSTest", "JetBrains.ReSharper.UnitTestProvider.VsTest.Provider.VsTestThemedIcons/VsTest")]
public class JetBrains.ReSharper.UnitTesting.VsTest.Provider.VsTestPage : CustomSimpleOptionsPage {
    public VsTestPage(Lifetime lifetime, IThreading threading, OptionsPageContext pageContext, IconHostBase iconHost, IShellLocks locks, OptionsSettingsSmartContext smartContext);
    private BeControl ProjectsToTreatAsTestProjects(Lifetime lifetime, IThreading threading, OptionsSettingsSmartContext smartContext, OptionsPageContext pageContext, IconHostBase iconHost, IShellLocks locks);
    private BeControl AdaptersIgnoreList(Lifetime lifetime, IThreading threading, OptionsSettingsSmartContext smartContext, OptionsPageContext pageContext, IconHostBase iconHost, IShellLocks locks);
}
[UnitTestProviderAttribute("16")]
public class JetBrains.ReSharper.UnitTesting.VsTest.Provider.VsTestProvider : object {
    public static string PROVIDER_ID;
    public string ID { get; }
    public string Name { get; }
    public sealed virtual string get_ID();
    public sealed virtual string get_Name();
    public sealed virtual bool IsElementOfKind(IDeclaredElement declaredElement, UnitTestElementKind elementKind);
    public sealed virtual bool IsElementOfKind(IUnitTestElement element, UnitTestElementKind elementKind);
    public sealed virtual bool IsSupported(IHostProvider hostProvider, IProject project, TargetFrameworkId targetFrameworkId);
    public sealed virtual bool IsSupported(IProject project, TargetFrameworkId targetFrameworkId);
    private bool HasTestAdapter(IProject project, TargetFrameworkId targetFrameworkId);
    public sealed virtual bool SupportsResultEventsForParentOf(IUnitTestElement element);
    public sealed virtual IUnitTestRunStrategy GetRunStrategy(IUnitTestElement element, IHostProvider hostProvider);
}
[SettingsKeyAttribute("JetBrains.ReSharper.UnitTestFramework.Settings.UnitTestingSettings", "JetBrains.ReSharper.UnitTesting.VsTest.Provider.Resources.Strings", "SettingsForVsTestAdapterSettingDescription")]
public class JetBrains.ReSharper.UnitTesting.VsTest.Provider.VsTestProviderSettings : object {
    [SettingsIndexedEntryAttribute("JetBrains.ReSharper.UnitTesting.VsTest.Provider.Resources.Strings", "ListOfIgnoredExecutorsURIAdapterNameSettingDescription")]
public IIndexedEntry`2<string, string> ExecutorExcludeList;
    [SettingsIndexedEntryAttribute("JetBrains.ReSharper.UnitTesting.VsTest.Provider.Resources.Strings", "TestProjectMasksSettingDescription")]
public IIndexedEntry`2<string, bool> TestProjectMasks;
}
[SolutionComponentAttribute("0")]
internal class JetBrains.ReSharper.UnitTesting.VsTest.Provider.VsTestServices : object {
    [CompilerGeneratedAttribute]
private VsTestProvider <Provider>k__BackingField;
    [CompilerGeneratedAttribute]
private IUnitTestingTypeCache <TypeCache>k__BackingField;
    [CompilerGeneratedAttribute]
private IUnitTestRunStrategy <RunStrategy>k__BackingField;
    public VsTestProvider Provider { get; }
    public IUnitTestingTypeCache TypeCache { get; }
    public IUnitTestRunStrategy RunStrategy { get; }
    public VsTestServices(VsTestProvider provider, IUnitTestingTypeCache typeCache, VsTestTestRunnerRunStrategy runStrategy);
    [CompilerGeneratedAttribute]
public sealed virtual VsTestProvider get_Provider();
    [CompilerGeneratedAttribute]
public sealed virtual IUnitTestingTypeCache get_TypeCache();
    [CompilerGeneratedAttribute]
public sealed virtual IUnitTestRunStrategy get_RunStrategy();
}
[SolutionComponentAttribute("10")]
internal class JetBrains.ReSharper.UnitTesting.VsTest.Provider.VsTestTestExplorerFromArtifacts : Discoverable {
    public VsTestTestExplorerFromArtifacts(VsTestProvider provider, ITestRunnerAgentManager agentManager, VsTestTestRunnerOrchestrator adapter, NuGetInstalledPackageChecker installedPackageChecker);
}
[SolutionComponentAttribute("0")]
internal class JetBrains.ReSharper.UnitTesting.VsTest.Provider.VsTestTestExplorerFromFile : object {
    [NotNullAttribute]
private IUnitTestElementRepository myRepository;
    [CompilerGeneratedAttribute]
private IUnitTestProvider <Provider>k__BackingField;
    public IUnitTestProvider Provider { get; }
    public VsTestTestExplorerFromFile(VsTestProvider provider, IUnitTestElementRepository repository);
    [CompilerGeneratedAttribute]
public sealed virtual IUnitTestProvider get_Provider();
    public sealed virtual void ProcessFile(IFile psiFile, IUnitTestElementObserverOnFile observer, Func`1<bool> interrupted);
}
[SolutionComponentAttribute("0")]
internal class JetBrains.ReSharper.UnitTesting.VsTest.Provider.VsTestTestRunnerOrchestrator : object {
    [NotNullAttribute]
private IMsTestAgentInfoProvider myMsTestAgentInfoProvider;
    [NotNullAttribute]
private Reader mySettingsReader;
    public Assembly InProcessAdapterAssembly { get; }
    public int Priority { get; }
    public VsTestTestRunnerOrchestrator(IMsTestAgentInfoProvider msTestAgentInfoProvider, Reader settingsReader);
    public sealed virtual Assembly get_InProcessAdapterAssembly();
    public sealed virtual int get_Priority();
    public sealed virtual TestAdapterLoader GetTestAdapterLoader(ITestRunnerContext ctx);
    public sealed virtual TestContainer GetTestContainer(ITestRunnerContext ctx);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.UnitTesting.VsTest.Provider.VsTestTestRunnerOrchestrator/<GetMessageHandlers>d__9")]
public sealed virtual IEnumerable`1<IMessageHandlerMarker> GetMessageHandlers(ITestRunnerContext ctx);
}
[SolutionComponentAttribute("0")]
internal class JetBrains.ReSharper.UnitTesting.VsTest.Provider.VsTestTestRunnerRunStrategy : TestRunnerRunStrategy {
    public VsTestTestRunnerRunStrategy(IDataCollectorFactory dataCollectorFactory, ITestRunnerAgentManager agentManager, VsTestTestRunnerOrchestrator adapter, IUnitTestProjectArtifactResolver artifactResolver);
}
[ZoneMarkerAttribute]
public class JetBrains.ReSharper.UnitTesting.VsTest.Provider.ZoneMarker : object {
}
public static class JetBrains.ReSharper.UnitTestProvider.VsTest.Provider.UnitTestingVsTestThemedIcons : object {
}
public class JetBrains.ReSharper.UnitTestProvider.VsTest.Provider.VsTestThemedIcons : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
