public static class Elfie.Serialization.Resource : object {
    public static String[] ReadAllStreamLines(string streamName, Assembly asm);
    public static void SaveStreamTo(string streamName, string filePath, Assembly asm);
    public static void SaveStreamFolderTo(string streamFolderName, string folderPath, Assembly asm);
}
public class Microsoft.CodeAnalysis.Elfie.Diagnostics.Cmd : object {
    private object _locker;
    [CompilerGeneratedAttribute]
private Process <Process>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShouldEcho>k__BackingField;
    [CompilerGeneratedAttribute]
private StreamWriter <OutputWriter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Command>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WasKilled>k__BackingField;
    private Process Process { get; private set; }
    private bool ShouldEcho { get; private set; }
    private StreamWriter OutputWriter { get; private set; }
    public string Command { get; private set; }
    public bool WasKilled { get; private set; }
    public bool HasExited { get; }
    public int ExitCode { get; }
    private Cmd(string executable, string arguments, bool shouldEcho, string outputFilePath);
    private Cmd(string command, bool shouldEcho, string outputFilePath);
    [CompilerGeneratedAttribute]
private Process get_Process();
    [CompilerGeneratedAttribute]
private void set_Process(Process value);
    [CompilerGeneratedAttribute]
private bool get_ShouldEcho();
    [CompilerGeneratedAttribute]
private void set_ShouldEcho(bool value);
    [CompilerGeneratedAttribute]
private StreamWriter get_OutputWriter();
    [CompilerGeneratedAttribute]
private void set_OutputWriter(StreamWriter value);
    [CompilerGeneratedAttribute]
public string get_Command();
    [CompilerGeneratedAttribute]
private void set_Command(string value);
    [CompilerGeneratedAttribute]
public bool get_WasKilled();
    [CompilerGeneratedAttribute]
private void set_WasKilled(bool value);
    public static Cmd Echo(string executable, string arguments, TimeSpan timeout, long memoryLimitBytes, string outputFilePath);
    public static Cmd Quiet(string executable, string arguments, TimeSpan timeout, long memoryLimitBytes, string outputFilePath);
    public static Cmd Echo(string command, TimeSpan timeout, string outputFilePath);
    public static Cmd Quiet(string command, TimeSpan timeout, string outputFilePath);
    public bool Wait(TimeSpan timeout, long memoryLimitBytes);
    public void Kill();
    public bool get_HasExited();
    public int get_ExitCode();
    private void Process_ErrorDataReceived(object sender, DataReceivedEventArgs e);
    private void Process_OutputDataReceived(object sender, DataReceivedEventArgs e);
    public void Dispose();
}
public static class Microsoft.CodeAnalysis.Elfie.Diagnostics.ConsoleHighlighter : object {
    public static void WriteWithHighlight(string content, string query);
    private static void SetHighlightColors();
}
public class Microsoft.CodeAnalysis.Elfie.Diagnostics.ConsoleSearchInterface`1 : object {
    [CompilerGeneratedAttribute]
private int <LimitToShow>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Query>k__BackingField;
    [CompilerGeneratedAttribute]
private Position <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private Position <QueryEnd>k__BackingField;
    [CompilerGeneratedAttribute]
private Position <End>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<string, SearchResult`1<T>> <Search>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`2<T, StringBuilder> <Write>k__BackingField;
    private int LimitToShow { get; private set; }
    private string Query { get; private set; }
    private Position Start { get; private set; }
    private Position QueryEnd { get; private set; }
    private Position End { get; private set; }
    private Func`2<string, SearchResult`1<T>> Search { get; private set; }
    private Action`2<T, StringBuilder> Write { get; private set; }
    public ConsoleSearchInterface`1(Func`2<string, SearchResult`1<T>> searchMethod, Action`2<T, StringBuilder> writeMethod, int limitToShow);
    [CompilerGeneratedAttribute]
private int get_LimitToShow();
    [CompilerGeneratedAttribute]
private void set_LimitToShow(int value);
    [CompilerGeneratedAttribute]
private string get_Query();
    [CompilerGeneratedAttribute]
private void set_Query(string value);
    [CompilerGeneratedAttribute]
private Position get_Start();
    [CompilerGeneratedAttribute]
private void set_Start(Position value);
    [CompilerGeneratedAttribute]
private Position get_QueryEnd();
    [CompilerGeneratedAttribute]
private void set_QueryEnd(Position value);
    [CompilerGeneratedAttribute]
private Position get_End();
    [CompilerGeneratedAttribute]
private void set_End(Position value);
    [CompilerGeneratedAttribute]
private Func`2<string, SearchResult`1<T>> get_Search();
    [CompilerGeneratedAttribute]
private void set_Search(Func`2<string, SearchResult`1<T>> value);
    [CompilerGeneratedAttribute]
private Action`2<T, StringBuilder> get_Write();
    [CompilerGeneratedAttribute]
private void set_Write(Action`2<T, StringBuilder> value);
    public void Run();
    private bool ReadKey();
}
public interface Microsoft.CodeAnalysis.Elfie.Diagnostics.IStatistics {
    public int Count { get; }
    public long Bytes { get; }
    public abstract virtual int get_Count();
    public abstract virtual long get_Bytes();
}
public class Microsoft.CodeAnalysis.Elfie.Diagnostics.Logger : object {
    public static string ErrorEntryFormat;
    [CompilerGeneratedAttribute]
private string <LogPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorLogPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UseLogPath>k__BackingField;
    private string LogPath { get; private set; }
    private string ErrorLogPath { get; private set; }
    private string UseLogPath { get; private set; }
    public Logger(string logName);
    [CompilerGeneratedAttribute]
private string get_LogPath();
    [CompilerGeneratedAttribute]
private void set_LogPath(string value);
    [CompilerGeneratedAttribute]
private string get_ErrorLogPath();
    [CompilerGeneratedAttribute]
private void set_ErrorLogPath(string value);
    [CompilerGeneratedAttribute]
private string get_UseLogPath();
    [CompilerGeneratedAttribute]
private void set_UseLogPath(string value);
    public void LogUse();
    public void LogException(Exception ex);
    private void TryLog(string logPath, string message);
}
public class Microsoft.CodeAnalysis.Elfie.Diagnostics.MeasureDiagnostics : object {
    public TimeSpan LoadTime;
    public long MemoryUsedBytes;
}
public static class Microsoft.CodeAnalysis.Elfie.Diagnostics.Memory : object {
    public static MeasureDiagnostics Measure(Func`1<object> creator);
}
public class Microsoft.CodeAnalysis.Elfie.Diagnostics.Position : object {
    public int Left;
    public int Top;
    public void Save();
    public void Restore();
    public void ClearUpTo(Position end);
    public int CompareTo(Position other);
}
public class Microsoft.CodeAnalysis.Elfie.Diagnostics.ProgressWriter : object {
    public static int TotalDotsToWrite;
    public static string Guide;
    [CompilerGeneratedAttribute]
private TextWriter <Destination>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TotalItems>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LastCountDone>k__BackingField;
    internal TextWriter Destination { get; internal set; }
    private int TotalItems { get; private set; }
    private int LastCountDone { get; private set; }
    public ProgressWriter(int totalItems);
    public ProgressWriter(int totalItems, TextWriter destination);
    [CompilerGeneratedAttribute]
internal TextWriter get_Destination();
    [CompilerGeneratedAttribute]
internal void set_Destination(TextWriter value);
    [CompilerGeneratedAttribute]
private int get_TotalItems();
    [CompilerGeneratedAttribute]
private void set_TotalItems(int value);
    [CompilerGeneratedAttribute]
private int get_LastCountDone();
    [CompilerGeneratedAttribute]
private void set_LastCountDone(int value);
    public void SetProgress(int countDone);
    public void IncrementProgress();
    private void Write(string value);
}
public class Microsoft.CodeAnalysis.Elfie.Diagnostics.SearchResult`1 : object {
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerator`1<T> <Matches>k__BackingField;
    private static IEnumerator`1<T> s_empty;
    public int Count { get; public set; }
    public IEnumerator`1<T> Matches { get; public set; }
    public SearchResult`1(int count, IEnumerator`1<T> matches);
    public SearchResult`1(ICollection`1<T> matches);
    private static SearchResult`1();
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
public void set_Count(int value);
    [CompilerGeneratedAttribute]
public IEnumerator`1<T> get_Matches();
    [CompilerGeneratedAttribute]
public void set_Matches(IEnumerator`1<T> value);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class Microsoft.CodeAnalysis.Elfie.Diagnostics.StatisticsRollup : object {
    private IStatistics[] _parts;
    public long Bytes { get; }
    public int Count { get; }
    public StatisticsRollup(IEnumerable`1<IStatistics> parts);
    public StatisticsRollup(IStatistics[] parts);
    public sealed virtual long get_Bytes();
    public sealed virtual int get_Count();
}
public class Microsoft.CodeAnalysis.Elfie.Diagnostics.TraceWatch : object {
    [CompilerGeneratedAttribute]
private Stopwatch <Watch>k__BackingField;
    private Stopwatch Watch { get; private set; }
    public TraceWatch(string message);
    public TraceWatch(string format, Object[] arguments);
    [CompilerGeneratedAttribute]
private Stopwatch get_Watch();
    [CompilerGeneratedAttribute]
private void set_Watch(Stopwatch value);
    public sealed virtual void Dispose();
}
[ExtensionAttribute]
public static class Microsoft.CodeAnalysis.Elfie.Extensions.BinaryReaderWriterExtensions : object {
    [ExtensionAttribute]
public static void WritePrimitiveArray(BinaryWriter writer, Array array, int index, int length);
    [ExtensionAttribute]
public static T[] ReadPrimitiveArray(BinaryReader reader);
    [ExtensionAttribute]
public static void Write(BinaryWriter writer, IList`1<T> items, int index, int length);
    [ExtensionAttribute]
public static List`1<T> ReadList(BinaryReader reader);
    [ExtensionAttribute]
public static int ReadArrayLength(BinaryReader reader, int elementSizeInBytes);
}
[ExtensionAttribute]
public static class Microsoft.CodeAnalysis.Elfie.Extensions.BinarySerializableExtensions : object {
    [IteratorStateMachineAttribute("Microsoft.CodeAnalysis.Elfie.Extensions.BinarySerializableExtensions/<LoadEach>d__0`1")]
public static IEnumerable`1<T> LoadEach(string sourcePath, bool handleErrors);
    [IteratorStateMachineAttribute("Microsoft.CodeAnalysis.Elfie.Extensions.BinarySerializableExtensions/<LoadEach>d__1`1")]
public static IEnumerable`1<T> LoadEach(IEnumerable`1<string> sourcePaths, bool handleErrors);
    [ExtensionAttribute]
public static void FileWrite(IBinarySerializable item, string filePath);
    [ExtensionAttribute]
public static bool TryFileRead(IBinarySerializable item, string filePath, bool logErrors);
    [ExtensionAttribute]
public static void FileRead(IBinarySerializable item, string filePath);
    [ExtensionAttribute]
public static long FileSize(IBinarySerializable item, string filePath);
    [ExtensionAttribute]
public static bool FileExists(IBinarySerializable item, string filePath);
    [ExtensionAttribute]
public static void DeleteFile(IBinarySerializable item, string filePath);
}
[ExtensionAttribute]
public static class Microsoft.CodeAnalysis.Elfie.Extensions.DateTimeExtensions : object {
    [ExtensionAttribute]
public static long ToLong(DateTime value);
}
[ExtensionAttribute]
public static class Microsoft.CodeAnalysis.Elfie.Extensions.IntExtensions : object {
    [ExtensionAttribute]
public static ushort TrimToUShort(int value);
}
[ExtensionAttribute]
public static class Microsoft.CodeAnalysis.Elfie.Extensions.IReadOnlyListExtensions : object {
    [ExtensionAttribute]
public static IEnumerator`1<T> GetDefaultEnumerator(IReadOnlyList`1<T> list);
}
[ExtensionAttribute]
public static class Microsoft.CodeAnalysis.Elfie.Extensions.IStatisticsExtensions : object {
    [ExtensionAttribute]
public static string ToStatisticsString(IStatistics item, string itemNamePlural);
}
[ExtensionAttribute]
public static class Microsoft.CodeAnalysis.Elfie.Extensions.LongExtensions : object {
    public static long Kilobyte;
    public static long Megabyte;
    public static long Gigabyte;
    public static long Thousand;
    public static long Million;
    public static long Billion;
    public static String[] SizeScales;
    public static String[] CountScales;
    private static LongExtensions();
    [ExtensionAttribute]
public static string SizeString(long bytes);
    [ExtensionAttribute]
public static string CountString(long count);
    [ExtensionAttribute]
private static string SizeString(long bytes, long divisorPerUnit, String[] unitOptions);
    [ExtensionAttribute]
public static DateTime ToDateTime(long dateTimeValue);
}
public class Microsoft.CodeAnalysis.Elfie.Extensions.ReadOnlyListEnumerator`1 : object {
    private IReadOnlyList`1<T> _list;
    private int _index;
    public T Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    public ReadOnlyListEnumerator`1(IReadOnlyList`1<T> list);
    public sealed virtual T get_Current();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual void Dispose();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
}
[ExtensionAttribute]
public static class Microsoft.CodeAnalysis.Elfie.Extensions.StringExtensions : object {
    public static string Join(string separator, IEnumerator`1<T> enumerator);
    [ExtensionAttribute]
public static IEnumerable`1<string> ToFrameworkNames(string encodedFrameworkNames);
    public static string EncodeFrameworkNamesToXml(String[] tfms);
    [ExtensionAttribute]
public static Byte[] ToSHA256(string text);
    [ExtensionAttribute]
public static string ToSHA256String(string text);
}
[ExtensionAttribute]
public static class Microsoft.CodeAnalysis.Elfie.Extensions.TimeSpanExtensions : object {
    [ExtensionAttribute]
public static string ToFriendlyString(TimeSpan s);
}
public class Microsoft.CodeAnalysis.Elfie.Model.AddReferenceDatabase : object {
    public static string TextFilePrefix;
    [CompilerGeneratedAttribute]
private ArdbVersion <DatabaseFormatVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DatabaseVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private StringStore <StringStore>k__BackingField;
    [CompilerGeneratedAttribute]
private ItemTree <DeclaredMembers>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<SymbolType> <DeclaredMemberTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private MemberIndex <Index>k__BackingField;
    private MergedMembersDatabase _mergedMembers;
    public ArdbVersion DatabaseFormatVersion { get; public set; }
    public int DatabaseVersion { get; public set; }
    public StringStore StringStore { get; private set; }
    public ItemTree DeclaredMembers { get; private set; }
    public IList`1<SymbolType> DeclaredMemberTypes { get; private set; }
    public MemberIndex Index { get; private set; }
    public Symbol QueryRoot { get; }
    public int Count { get; }
    public long Bytes { get; }
    public AddReferenceDatabase(ArdbVersion ardbVersion);
    private static AddReferenceDatabase();
    public int GetFileFormatVersion();
    [CompilerGeneratedAttribute]
public ArdbVersion get_DatabaseFormatVersion();
    [CompilerGeneratedAttribute]
public void set_DatabaseFormatVersion(ArdbVersion value);
    [CompilerGeneratedAttribute]
public int get_DatabaseVersion();
    [CompilerGeneratedAttribute]
public void set_DatabaseVersion(int value);
    [CompilerGeneratedAttribute]
public sealed virtual StringStore get_StringStore();
    [CompilerGeneratedAttribute]
private void set_StringStore(StringStore value);
    [CompilerGeneratedAttribute]
public sealed virtual ItemTree get_DeclaredMembers();
    [CompilerGeneratedAttribute]
private void set_DeclaredMembers(ItemTree value);
    [CompilerGeneratedAttribute]
public IList`1<SymbolType> get_DeclaredMemberTypes();
    [CompilerGeneratedAttribute]
private void set_DeclaredMemberTypes(IList`1<SymbolType> value);
    [CompilerGeneratedAttribute]
public sealed virtual MemberIndex get_Index();
    [CompilerGeneratedAttribute]
private void set_Index(MemberIndex value);
    public void AddReferenceAssemblyTypes(PackageDatabase source);
    public DatabaseAddResult AddUniqueMembers(PackageDatabase source);
    private int ImportPackageNodes(PackageDatabase source);
    private void ImportFrameworkTargets(PackageDatabase source, int packageMemberIndex, DatabaseAddResult databaseAddResult);
    private IEnumerable`1<string> Sorted(IEnumerable`1<string> strings);
    private void ImportPublics(PackageDatabase source, int sourceMemberIndex, int targetMemberIndex, Nullable`1[] uniqueMembers, ArdbVersion ardbVersion);
    public Symbol get_QueryRoot();
    public sealed virtual String8 GetPackageName(int index);
    public sealed virtual String8 GetPackageVersion(int index);
    public sealed virtual int GetPopularityRank(int index);
    public sealed virtual String8 GetAssemblyName(int index);
    public sealed virtual String8 GetFrameworkTargets(int index);
    public sealed virtual SymbolType GetMemberType(int memberIndex);
    public sealed virtual SymbolModifier GetMemberModifiers(int memberIndex);
    public sealed virtual String8 GetMemberParameters(int memberIndex);
    public sealed virtual Path8 GetMemberFilePath(int memberIndex);
    public sealed virtual ushort GetMemberFileLine(int memberIndex);
    public sealed virtual ushort GetMemberCharInLine(int memberIndex);
    public sealed virtual void SetLocation(int memberIndex, string filePath, ushort line, ushort charInLine);
    public sealed virtual int get_Count();
    public sealed virtual long get_Bytes();
    public void ConvertToImmutable();
    public sealed virtual void WriteBinary(BinaryWriter w);
    public sealed virtual void ReadBinary(BinaryReader r);
    public void WriteText(TextWriter w);
    public void WriteText(TextWriter w, Func`2<Symbol, bool> includeSymbol);
    private void WriteText(TextWriter w, int index, int indent, Func`2<Symbol, bool> includeSymbol);
    public void ReadText(TextReader r);
    public static Tuple`2<int, int> ReadVersionsOnly(TextReader r);
    private bool IsArdbSymbolType(SymbolType type);
    private void AssertCharacter(string lineString, int lineNumber, int charIndex, char expected);
    public MergedMembersDatabase GetMergedMembers();
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private int <ConvertToImmutable>b__53_0(int left, int right);
}
public enum Microsoft.CodeAnalysis.Elfie.Model.ArdbVersion : Enum {
    public int value__;
    public static ArdbVersion Unknown;
    public static ArdbVersion V1;
    public static ArdbVersion Current;
}
[DefaultMemberAttribute("Item")]
public abstract class Microsoft.CodeAnalysis.Elfie.Model.BaseItemSet`1 : object {
    protected StringStore Strings;
    private List`1<IColumn> _columns;
    private int _count;
    public int Count { get; }
    public T Item { get; }
    protected void AddColumn(IColumn column);
    public sealed virtual int get_Count();
    public abstract virtual T get_Item(int index);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual T Add();
    public virtual void Clear();
    public virtual void ConvertToImmutable();
    public virtual void WriteBinary(BinaryWriter w);
    public virtual void ReadBinary(BinaryReader r);
}
public class Microsoft.CodeAnalysis.Elfie.Model.DatabaseAddResult : object {
    public PackageDatabase Source;
    public int PublicTypeCount;
    public int MergedTypeCount;
    public Nullable`1[] WasMemberAdded;
    public String8[] SourcePackageNames;
    public StringBuilder CurrentPath;
    public HashSet`1<string> CurrentFrameworkNames;
    public Dictionary`2<string, int> TypeNameToTypeIndexMap;
    public Dictionary`2<string, HashSet`1<string>> TypeToFrameworkTargetsMap;
    public DatabaseAddResult(PackageDatabase source);
    public void WriteMemberResults(TextWriter writer);
    public void WriteDuplicateComponents(TextWriter writer);
    private void WriteDuplicateTree(TextWriter writer, int index);
    [CompilerGeneratedAttribute]
private void <WriteMemberResults>b__10_0(int index, TextWriter w);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.CodeAnalysis.Elfie.Model.DateTimeColumn : object {
    private PartialArray`1<long> _ticksValues;
    public DateTime Item { get; public set; }
    public int Count { get; }
    public DateTime get_Item(int index);
    public void set_Item(int index, DateTime value);
    public sealed virtual int get_Count();
    public sealed virtual void Add();
    public sealed virtual void SetCount(int count);
    public sealed virtual void Clear();
    public sealed virtual void ConvertToImmutable();
    public sealed virtual void ReadBinary(BinaryReader r);
    public sealed virtual void WriteBinary(BinaryWriter w);
}
internal static class Microsoft.CodeAnalysis.Elfie.Model.EmptyArray`1 : object {
    public static T[] Instance;
    private static EmptyArray`1();
}
public interface Microsoft.CodeAnalysis.Elfie.Model.IColumn {
    public int Count { get; }
    public abstract virtual int get_Count();
    public abstract virtual void Clear();
    public abstract virtual void Add();
    public abstract virtual void SetCount(int count);
    public abstract virtual void ConvertToImmutable();
}
public interface Microsoft.CodeAnalysis.Elfie.Model.IMemberDatabase {
    public StringStore StringStore { get; }
    public ItemTree DeclaredMembers { get; }
    public MemberIndex Index { get; }
    public abstract virtual StringStore get_StringStore();
    public abstract virtual ItemTree get_DeclaredMembers();
    public abstract virtual MemberIndex get_Index();
    public abstract virtual String8 GetPackageName(int memberIndex);
    public abstract virtual int GetPopularityRank(int memberIndex);
    public abstract virtual String8 GetPackageVersion(int memberIndex);
    public abstract virtual String8 GetAssemblyName(int memberIndex);
    public abstract virtual String8 GetFrameworkTargets(int memberIndex);
    public abstract virtual SymbolType GetMemberType(int memberIndex);
    public abstract virtual SymbolModifier GetMemberModifiers(int memberIndex);
    public abstract virtual String8 GetMemberParameters(int memberIndex);
    public abstract virtual Path8 GetMemberFilePath(int memberIndex);
    public abstract virtual ushort GetMemberFileLine(int memberIndex);
    public abstract virtual ushort GetMemberCharInLine(int memberIndex);
    public abstract virtual void SetLocation(int memberIndex, string filePath, ushort line, ushort charInLine);
}
internal class Microsoft.CodeAnalysis.Elfie.Model.Index.ImmutableMemberIndex : object {
    private Int32[] _sortedWordIdentifiers;
    private Int32[] _indexOfFirstMatch;
    private Int32[] _matchesBlock;
    public static ImmutableMemberIndex Empty;
    public int Count { get; }
    public long Bytes { get; }
    internal ImmutableMemberIndex(Int32[] sortedWordIdentifiers, Int32[] indexOfFirstMatch, Int32[] matchesBlock);
    private static ImmutableMemberIndex();
    public bool TryGetMatchesInRange(Range range, Int32[]& buffer, Int32& index, Int32& count);
    private int GetIndexAfterLastMatch(int wordIndex);
    public sealed virtual int get_Count();
    public sealed virtual long get_Bytes();
    public sealed virtual void WriteBinary(BinaryWriter w);
    public sealed virtual void ReadBinary(BinaryReader r);
}
public class Microsoft.CodeAnalysis.Elfie.Model.Index.MemberIndex : object {
    private ImmutableMemberIndex _existingIndex;
    private MutableMemberIndex _addedIndex;
    public int Count { get; }
    public long Bytes { get; }
    public void AddItem(int wordIdentifier, int itemIndex);
    public bool TryGetMatchesInRange(Range identifiers, Int32[]& buffer, Int32& index, Int32& count);
    public sealed virtual int get_Count();
    public sealed virtual long get_Bytes();
    public void ConvertToImmutable(StringStore strings);
    public void WriteBinary(BinaryWriter w);
    public void ReadBinary(BinaryReader r);
}
internal class Microsoft.CodeAnalysis.Elfie.Model.Index.MutableMemberIndex : object {
    private Dictionary`2<int, List`1<int>> _wordToItemsIndex;
    public int Count { get; }
    public long Bytes { get; }
    public void AddItem(int wordIdentifier, int itemIndex);
    public void UpdateIdentifiers(StringStore strings);
    public ImmutableMemberIndex ConvertToImmutable(StringStore strings);
    public sealed virtual int get_Count();
    public sealed virtual long get_Bytes();
}
internal class Microsoft.CodeAnalysis.Elfie.Model.Map.ImmutableItemMap`1 : object {
    internal IReadOnlyList`1<T> _provider;
    internal PartialArray`1<int> _firstMemberIndexForGroup;
    internal PartialArray`1<int> _memberIndices;
    public int Count { get; }
    public ImmutableItemMap`1(IReadOnlyList`1<T> provider);
    public void AddLink(int groupIndex, int memberIndex);
    public MapEnumerator`1<T> LinksFrom(int sourceItemIndex);
    public int LinkCountFrom(int sourceItemIndex);
    public int get_Count();
    public sealed virtual void ReadBinary(BinaryReader r);
    public sealed virtual void WriteBinary(BinaryWriter w);
}
public class Microsoft.CodeAnalysis.Elfie.Model.Map.ItemMap`1 : object {
    internal IReadOnlyList`1<T> _provider;
    internal MutableItemMap`1<T> _mutableMap;
    internal ImmutableItemMap`1<T> _immutableMap;
    public int Count { get; }
    public ItemMap`1(IReadOnlyList`1<T> provider);
    public sealed virtual void Add();
    public sealed virtual void SetCount(int count);
    public void AddLink(int groupIndex, int memberIndex);
    public MapEnumerator`1<T> LinksFrom(int sourceItemIndex);
    public int LinkCountFrom(int sourceItemIndex);
    public sealed virtual int get_Count();
    public sealed virtual void Clear();
    public void AddItem();
    public sealed virtual void ConvertToImmutable();
    public sealed virtual void ReadBinary(BinaryReader r);
    public sealed virtual void WriteBinary(BinaryWriter w);
}
public class Microsoft.CodeAnalysis.Elfie.Model.Map.MapEnumerator`1 : ValueType {
    private ImmutableItemMap`1<U> _map;
    private int _firstIndex;
    private int _currentIndex;
    private int _afterLastIndex;
    public U Current { get; }
    public int CurrentIndex { get; }
    private object System.Collections.IEnumerator.Current { get; }
    public int Count { get; }
    internal MapEnumerator`1(ImmutableItemMap`1<U> map, int firstIndex, int afterLastIndex);
    public sealed virtual U get_Current();
    public int get_CurrentIndex();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual void Dispose();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
    public int get_Count();
}
internal class Microsoft.CodeAnalysis.Elfie.Model.Map.MutableItemMap`1 : object {
    private IReadOnlyList`1<T> _provider;
    private PartialArray`1<int> _groupIndices;
    private PartialArray`1<int> _memberIndices;
    public int Count { get; }
    public MutableItemMap`1(IReadOnlyList`1<T> provider);
    public void AddLink(int groupIndex, int memberIndex);
    public ImmutableItemMap`1<T> ConvertToImmutable(ImmutableItemMap`1<T> previousLinks);
    public int get_Count();
}
[ExtensionAttribute]
public static class Microsoft.CodeAnalysis.Elfie.Model.MemberDatabase : object {
    public static IMemberDatabase Load(string filePath);
    [ExtensionAttribute]
public static bool TryGetAncestorOfType(IMemberDatabase db, int memberIndex, SymbolType ancestorType, Int32& ancestor);
    [ExtensionAttribute]
public static bool TryGetFirstChildOfType(IMemberDatabase db, int memberIndex, SymbolType symbolType, Int32& childIndex);
}
public class Microsoft.CodeAnalysis.Elfie.Model.MemberQuery : object {
    public SymbolType Type;
    public SymbolModifier Modifiers;
    public bool IsFullNamespace;
    public bool IsFullSuffix;
    public bool IgnoreCase;
    internal String8 SymbolName8;
    internal String8 Parameters8;
    internal String8 SymbolNameSuffix;
    internal String8Set SplitSymbolName8;
    internal Range[] SymbolNamePrefixIdentifiers;
    internal Range SymbolNameSuffixIdentifiers;
    internal Range ParametersIdentifiers;
    internal StringStore LastResolvedStore;
    internal bool LastResolveResult;
    public string SymbolName { get; public set; }
    public string Parameters { get; public set; }
    public MemberQuery(string symbolName, bool isFullSuffix, bool isFullNamespace);
    public MemberQuery(string symbolName, string parameters, bool isFullSuffix, bool isFullNamespace);
    public string get_SymbolName();
    public void set_SymbolName(string value);
    public string get_Parameters();
    public void set_Parameters(string value);
    public void ForceReresolve();
    internal bool ResolveStringsTo(StringStore store);
    public Symbol[] FindMembers(IMemberDatabase db, int maxResultCount);
    public bool TryFindMembers(IMemberDatabase db, PartialArray`1& results);
    private bool Matches(ItemTree declaredMembers, StringStore strings, int symbolIndex);
    private bool MatchesDetailed(ItemTree declaredMembers, StringStore strings, IMemberDatabase db, int symbolIndex);
}
public class Microsoft.CodeAnalysis.Elfie.Model.MergedMembersDatabase : object {
    internal StringStore StringStore;
    internal ItemTree MergedMembers;
    internal PartialArray`1<int> MergedMemberSourcePackageIdentifier;
    internal PartialArray`1<int> MergedMemberDuplicateCount;
    public MergedMembersDatabase(StringStore sharedStore);
    public DatabaseAddResult Add(PackageDatabase source, ArdbVersion ardbVersion);
    private bool AddUniqueMembers(PackageDatabase source, int sourceMemberIndex, int targetMemberIndex, DatabaseAddResult result, ArdbVersion version);
    private bool ContainsPublics(IMemberDatabase source, int index);
    public void ConvertToImmutable();
    public void WriteMergedTree(TextWriter writer);
    public void WriteDuplicateCounts(TextWriter writer);
    public void WriteDuplicateHistogram(TextWriter writer);
    public void WriteDuplicateWeight(TextWriter writer);
    public int DuplicateWeight(int index, Int32[] duplicateWeight);
    [CompilerGeneratedAttribute]
private int <ConvertToImmutable>b__8_0(int left, int right);
    [CompilerGeneratedAttribute]
private void <WriteMergedTree>b__9_0(int index, TextWriter w);
}
[ExtensionAttribute]
public static class Microsoft.CodeAnalysis.Elfie.Model.NugetVersionUtilities : object {
    [ExtensionAttribute]
public static bool IsPrereleaseVersion(string version);
}
public class Microsoft.CodeAnalysis.Elfie.Model.PackageDatabase : object {
    public static int BinaryFileFormatVersion;
    public PackageIdentity Identity;
    [CompilerGeneratedAttribute]
private StringStore <StringStore>k__BackingField;
    [CompilerGeneratedAttribute]
private ItemTree <DeclaredMembers>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<SymbolDetails> <DeclaredMemberDetails>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<SymbolLocation> <DeclaredMemberLocations>k__BackingField;
    [CompilerGeneratedAttribute]
private ItemTree <FileTree>k__BackingField;
    [CompilerGeneratedAttribute]
private MemberIndex <Index>k__BackingField;
    public StringStore StringStore { get; internal set; }
    public ItemTree DeclaredMembers { get; internal set; }
    public IList`1<SymbolDetails> DeclaredMemberDetails { get; internal set; }
    public IList`1<SymbolLocation> DeclaredMemberLocations { get; internal set; }
    public ItemTree FileTree { get; internal set; }
    public MemberIndex Index { get; internal set; }
    public Symbol QueryRoot { get; }
    public MutableSymbol MutableRoot { get; }
    public int TypeCount { get; }
    public int MemberCount { get; }
    public int LocatedMemberCount { get; }
    public IStatistics StringStatistics { get; }
    public IStatistics SymbolStatistics { get; }
    public IStatistics FileStatistics { get; }
    public IStatistics IndexStatistics { get; }
    public int Count { get; }
    public long Bytes { get; }
    public bool IsEmpty { get; }
    public PackageDatabase(PackageIdentity identity);
    private static PackageDatabase();
    [CompilerGeneratedAttribute]
public sealed virtual StringStore get_StringStore();
    [CompilerGeneratedAttribute]
internal void set_StringStore(StringStore value);
    [CompilerGeneratedAttribute]
public sealed virtual ItemTree get_DeclaredMembers();
    [CompilerGeneratedAttribute]
internal void set_DeclaredMembers(ItemTree value);
    [CompilerGeneratedAttribute]
public IList`1<SymbolDetails> get_DeclaredMemberDetails();
    [CompilerGeneratedAttribute]
internal void set_DeclaredMemberDetails(IList`1<SymbolDetails> value);
    [CompilerGeneratedAttribute]
public IList`1<SymbolLocation> get_DeclaredMemberLocations();
    [CompilerGeneratedAttribute]
internal void set_DeclaredMemberLocations(IList`1<SymbolLocation> value);
    [CompilerGeneratedAttribute]
public ItemTree get_FileTree();
    [CompilerGeneratedAttribute]
internal void set_FileTree(ItemTree value);
    [CompilerGeneratedAttribute]
public sealed virtual MemberIndex get_Index();
    [CompilerGeneratedAttribute]
internal void set_Index(MemberIndex value);
    public Symbol get_QueryRoot();
    public MutableSymbol get_MutableRoot();
    public int get_TypeCount();
    public int get_MemberCount();
    public int get_LocatedMemberCount();
    public IStatistics get_StringStatistics();
    public IStatistics get_SymbolStatistics();
    public IStatistics get_FileStatistics();
    public IStatistics get_IndexStatistics();
    public sealed virtual int get_Count();
    public sealed virtual long get_Bytes();
    public bool get_IsEmpty();
    public sealed virtual String8 GetPackageName(int memberIndex);
    public sealed virtual String8 GetPackageVersion(int memberIndex);
    public sealed virtual int GetPopularityRank(int memberIndex);
    public sealed virtual String8 GetAssemblyName(int index);
    public sealed virtual String8 GetFrameworkTargets(int index);
    public sealed virtual SymbolType GetMemberType(int memberIndex);
    public sealed virtual SymbolModifier GetMemberModifiers(int memberIndex);
    public sealed virtual String8 GetMemberParameters(int memberIndex);
    public sealed virtual Path8 GetMemberFilePath(int memberIndex);
    public sealed virtual ushort GetMemberFileLine(int memberIndex);
    public sealed virtual ushort GetMemberCharInLine(int memberIndex);
    public sealed virtual void SetLocation(int memberIndex, string filePath, ushort line, ushort charInLine);
    public void ConvertToImmutable();
    public sealed virtual void WriteBinary(BinaryWriter w);
    public sealed virtual void ReadBinary(BinaryReader r);
    public static int ReadDownloadsOnly(BinaryReader r);
    public void WriteStringsOnly(string filePath);
    public virtual string ToString();
    private void WriteTree(StringBuilder sb, int memberIndex, int indent);
    [CompilerGeneratedAttribute]
private int <ConvertToImmutable>b__64_0(int left, int right);
}
public class Microsoft.CodeAnalysis.Elfie.Model.PackageIdentity : object {
    [CompilerGeneratedAttribute]
private string <PackageName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReleaseName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DownloadCount>k__BackingField;
    public string PackageName { get; public set; }
    public string ReleaseName { get; public set; }
    public string ProjectUrl { get; public set; }
    public int DownloadCount { get; public set; }
    public string IndexFileName { get; }
    public PackageIdentity(string packageName);
    [CompilerGeneratedAttribute]
public string get_PackageName();
    [CompilerGeneratedAttribute]
public void set_PackageName(string value);
    [CompilerGeneratedAttribute]
public string get_ReleaseName();
    [CompilerGeneratedAttribute]
public void set_ReleaseName(string value);
    [CompilerGeneratedAttribute]
public string get_ProjectUrl();
    [CompilerGeneratedAttribute]
public void set_ProjectUrl(string value);
    [CompilerGeneratedAttribute]
public int get_DownloadCount();
    [CompilerGeneratedAttribute]
public void set_DownloadCount(int value);
    public string get_IndexFileName();
    public bool Matches(PackageIdentity queryCriteria);
    public sealed virtual void WriteBinary(BinaryWriter w);
    public sealed virtual void ReadBinary(BinaryReader r);
}
public static class Microsoft.CodeAnalysis.Elfie.Model.Strings.AlphanumericSplitter : object {
    public static String8Set Split(String8 value, PartialArray`1& buffer);
    public static bool IsAlphaNumeric(byte c);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.CodeAnalysis.Elfie.Model.Strings.ImmutableStringStore : object {
    private static bool IgnoreCase;
    private String8Set _sortedExistingValues;
    public String8 Item { get; }
    public int Count { get; }
    public long Bytes { get; }
    internal ImmutableStringStore(String8Set sortedExistingValues);
    public sealed virtual String8 get_Item(int identifier);
    public sealed virtual Range RangeForString(int identifier);
    public sealed virtual bool TryFindString(string value, Range& matches);
    public sealed virtual bool TryFindString(String8 value, Range& matches);
    public sealed virtual bool TryGetRangeStartingWith(String8 prefix, Range& matches);
    public sealed virtual int CompareValues(int leftIdentifier, int rightIdentifier);
    public sealed virtual int GetSerializationIdentifier(int identifier);
    public sealed virtual void WriteBinary(BinaryWriter w);
    public sealed virtual void ReadBinary(BinaryReader r);
    public sealed virtual int get_Count();
    public sealed virtual long get_Bytes();
    internal Int32[] CountByPaddedLength();
}
[DefaultMemberAttribute("Item")]
public interface Microsoft.CodeAnalysis.Elfie.Model.Strings.IStringStore {
    public String8 Item { get; }
    public abstract virtual String8 get_Item(int identifier);
    public abstract virtual Range RangeForString(int identifier);
    public abstract virtual bool TryFindString(string value, Range& matches);
    public abstract virtual bool TryFindString(String8 value, Range& matches);
    public abstract virtual bool TryGetRangeStartingWith(String8 prefix, Range& matches);
    public abstract virtual int CompareValues(int leftIdentifier, int rightIdentifier);
    public abstract virtual int GetSerializationIdentifier(int identifier);
}
public interface Microsoft.CodeAnalysis.Elfie.Model.Strings.IWriteableString {
    public int Length { get; }
    public abstract virtual int get_Length();
    public abstract virtual int WriteTo(Byte[] buffer, int index);
    public abstract virtual int WriteTo(Stream stream);
    public abstract virtual int WriteTo(TextWriter w);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.CodeAnalysis.Elfie.Model.Strings.MutableStringStore : object {
    private static IComparer`1<string> s_comparer;
    private static StringComparison s_comparison;
    private List`1<string> _values;
    private Dictionary`2<string, int> _valueToIdentifier;
    public String8 Item { get; }
    public int Count { get; }
    public long Bytes { get; }
    private static MutableStringStore();
    public String8 get_Item(int identifier);
    public int FindOrAddString(String8 value);
    public int FindOrAddString(string value);
    public bool TryFindString(string value, Int32& identifier);
    public bool TryFindString(String8 value, Int32& identifier);
    public bool TryGetRangeStartingWith(String8 prefix, Int32& firstIdentifier, Int32& lastIdentifier);
    public int CompareValues(int leftIdentifier, int rightIdentifier);
    public ImmutableStringStore ConvertToImmutable(Int32[]& identifierToSerializedIdentifier);
    public int get_Count();
    public long get_Bytes();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.CodeAnalysis.Elfie.Model.Strings.String8 : ValueType {
    [CompilerGeneratedAttribute]
private Byte[] <Array>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    public static String8 Empty;
    private static String8 s_true8;
    private static String8 s_false8;
    public Byte[] Array { get; private set; }
    public int Index { get; private set; }
    public int Length { get; private set; }
    public byte Item { get; }
    public String8(Byte[] array, int index, int length);
    private static String8();
    [CompilerGeneratedAttribute]
public Byte[] get_Array();
    [CompilerGeneratedAttribute]
private void set_Array(Byte[] value);
    [CompilerGeneratedAttribute]
public int get_Index();
    [CompilerGeneratedAttribute]
private void set_Index(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Length();
    [CompilerGeneratedAttribute]
private void set_Length(int value);
    public static String8 Convert(string value, Byte[] buffer, int index);
    public static String8 Convert(string value, int charIndex, int charLength, Byte[] buffer, int index);
    public String8Set Split(byte delimiter, Int32[] positionArray);
    public String8Set Split(char delimiter, Int32[] positionArray);
    public String8Set Split(byte delimiter, PartialArray`1<int> positions);
    public String8Set SplitOutsideQuotes(byte delimiter, PartialArray`1<int> positions);
    public String8Set SplitAndDecodeCsvCells(PartialArray`1<int> positions);
    public static int GetLength(string value);
    public static int GetLength(string value, int index, int length);
    public bool IsEmpty();
    public bool IsAscii();
    public byte get_Item(int index);
    public String8 Substring(int index);
    public String8 Substring(int index, int length);
    public int IndexOf(byte c, int startIndex);
    public String8 BeforeFirst(byte c);
    public String8 AfterFirst(byte c);
    public bool SplitOnFirst(byte splitter, String8& beforeSplitter, String8& afterSplitter);
    public int LastIndexOf(byte c, int startIndex);
    public String8 Trim();
    private static bool IsWhiteSpace(byte c);
    public String8 TrimEnd(byte c);
    public bool StartsWith(byte c);
    public bool EndsWith(byte c);
    public bool StartsWith(String8 other, bool ignoreCase);
    public bool EndsWith(String8 other, bool ignoreCase);
    public void ToUpperInvariant();
    public void ToLowerInvariant();
    public bool TryToBoolean(Boolean& result);
    private static byte ParseDigit(byte digit, Boolean& valid);
    private ulong ParseWithCutoff(ulong cutoff, Boolean& valid);
    private long Negate(ulong value, Boolean& valid);
    public bool TryToByte(Byte& result);
    public bool TryToSByte(SByte& result);
    public bool TryToUShort(UInt16& result);
    public bool TryToShort(Int16& result);
    public bool TryToInteger(Int32& result);
    public bool TryToUInt(UInt32& result);
    public bool TryToLong(Int64& result);
    public bool TryToULong(UInt64& result);
    public bool TryToDouble(Double& result);
    public bool TryToFloat(Single& result);
    public static String8 FromBoolean(bool value);
    public static String8 FromInteger(int value, Byte[] buffer);
    public static String8 FromInteger(int value, Byte[] buffer, int index, int minimumDigits);
    public static String8 FromNumber(long value, Byte[] buffer, int index, int minimumDigits);
    public static String8 FromNumber(ulong value, bool isNegative, Byte[] buffer, int index, int minimumDigits);
    public static String8 FromNumber(double value, Byte[] buffer, int index, int minimumDigits);
    private static String8 FromNumber(double value, bool isNegative, Byte[] buffer, int index, int minimumDigits);
    public static String8 FromDateTime(DateTime value, Byte[] buffer, int index);
    public bool TryToDateTime(DateTime& result);
    public bool TryToDateTimeExact(DateTime& result, int yearIndex, int monthIndex, int dayIndex);
    public bool TryToDateTimeExact(DateTime& result, int yearIndex, int monthIndex, int dayIndex, int hourIndex, int minuteIndex, int secondIndex);
    private bool TryToDateTimeAsIso8601(DateTime& result);
    private bool TryToDateTimeAsUs(DateTime& result);
    public static String8 FromTimeSpan(TimeSpan value, Byte[] buffer, int index);
    public bool TryToTimeSpan(TimeSpan& result);
    public bool TryToTimeSpanFriendly(TimeSpan& result);
    public sealed virtual int CompareTo(string other);
    public int CompareTo(string other, bool ignoreCase);
    public int CompareCaseInsensitiveStableTo(String8 other);
    public sealed virtual int CompareTo(String8 other);
    public int CompareTo(String8 other, bool ignoreCase);
    public int CompareAsPrefixTo(String8 other, bool ignoreCase);
    private int CompareToCommonLength(String8 other);
    private int CompareToCommonLengthOrdinalIgnoreCase(String8 other);
    private int CompareOrdinalIgnoreCase(byte left, byte right);
    private bool IsAlphaNumeric(byte value);
    public int IndexOfAll(String8 value, int startIndex, bool ignoreCase, Int32[] results);
    public int IndexOf(String8 value, int startIndex);
    public int IndexOfOrdinalIgnoreCase(String8 other, int startIndex);
    public int Contains(String8 other, int startIndex);
    public int ContainsExact(String8 other, int startIndex);
    public String8 ShiftBack(int byteCount);
    public sealed virtual int WriteTo(Byte[] buffer, int index);
    public sealed virtual int WriteTo(TextWriter writer);
    public sealed virtual int WriteTo(Stream stream);
    public static bool op_Equality(String8 left, String8 right);
    public static bool op_Inequality(String8 left, String8 right);
    public virtual bool Equals(object o);
    public bool Equals(String8 other);
    public bool Equals(string other);
    public virtual int GetHashCode();
    public virtual string ToString();
    public sealed virtual void WriteBinary(BinaryWriter w);
    public sealed virtual void ReadBinary(BinaryReader r);
}
public class Microsoft.CodeAnalysis.Elfie.Model.Strings.String8Block : object {
    public static int DefaultBlockLengthBytes;
    public static int StoreIndividuallyLengthBytes;
    private List`1<BlockPart> _blocks;
    private BlockPart _current;
    private BlockPart GetBlockForLength(int length);
    public String8 GetCopy(ITabularValue source);
    public String8 GetCopy(String8 source);
    public String8 Concatenate(String8 first, String8 delimiter, String8 second);
    public String8 GetCopy(string source);
    public void Clear();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.CodeAnalysis.Elfie.Model.Strings.String8Column : object {
    private StringStore _strings;
    private PartialArray`1<int> _identifiers;
    public String8 Item { get; public set; }
    public int Count { get; }
    public String8Column(StringStore strings);
    public String8 get_Item(int index);
    public void set_Item(int index, String8 value);
    public int IdentifierFor(int index);
    public sealed virtual int get_Count();
    public sealed virtual void Clear();
    public sealed virtual void Add();
    public sealed virtual void SetCount(int count);
    public sealed virtual void ConvertToImmutable();
    public sealed virtual void WriteBinary(BinaryWriter w);
    public sealed virtual void ReadBinary(BinaryReader r);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.CodeAnalysis.Elfie.Model.Strings.String8Set : ValueType {
    private String8 _content;
    private PartialArray`1<int> _partPositions;
    private int _delimiterWidth;
    public static String8Set Empty;
    public String8 Value { get; }
    public String8 Item { get; }
    public int Count { get; }
    public long Bytes { get; }
    internal String8Set(String8 content, int delimiterWidth, PartialArray`1<int> partPositions);
    private static String8Set();
    public String8 get_Value();
    public String8 get_Item(int index);
    public virtual string ToString();
    public String8 Join(byte delimiter, Byte[] buffer);
    public static String8Set Split(String8 value, char delimiter, Int32[] positionArray);
    public static String8Set Split(String8 value, byte delimiter, Int32[] positionArray);
    public static String8Set Split(String8 value, byte delimiter, PartialArray`1<int> positions);
    public static int GetLength(String8 value, char delimiter);
    public static int GetLength(String8 value, byte delimiter);
    public static String8Set SplitOutsideQuotes(String8 value, byte delimiter, PartialArray`1<int> positions);
    public static String8Set SplitAndDecodeCsvCells(String8 row, PartialArray`1<int> positions);
    public sealed virtual void WriteBinary(BinaryWriter w);
    public sealed virtual void ReadBinary(BinaryReader r);
    public sealed virtual int get_Count();
    public sealed virtual long get_Bytes();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.CodeAnalysis.Elfie.Model.Strings.StringStore : object {
    private ImmutableStringStore _existingValues;
    private MutableStringStore _addedValues;
    private Int32[] _addedIdentifierToExistingIdentifier;
    public String8 Item { get; }
    public int Count { get; }
    public long Bytes { get; }
    public void Clear();
    public sealed virtual String8 get_Item(int identifier);
    public sealed virtual Range RangeForString(int identifier);
    public int FindOrAddString(string value);
    public int FindOrAddString(String8 value);
    public sealed virtual bool TryFindString(string value, Range& matches);
    public sealed virtual bool TryFindString(String8 value, Range& matches);
    public bool TryFindString(String8 value, bool ignoreCase, Range& matches);
    private Range MakeCaseSensitive(Range r, String8 value);
    public sealed virtual bool TryGetRangeStartingWith(String8 prefix, Range& matches);
    public IEnumerator`1<String8> GetSetStartingWith(String8 prefix);
    public sealed virtual int CompareValues(int leftIdentifier, int rightIdentifier);
    public bool ConvertToImmutable();
    public void ConvertToImmutable(PartialArray`1<int> stringIdentifiers);
    public sealed virtual int GetSerializationIdentifier(int identifier);
    public sealed virtual void ReadBinary(BinaryReader r);
    public sealed virtual void WriteBinary(BinaryWriter w);
    public sealed virtual int get_Count();
    public sealed virtual long get_Bytes();
}
internal class Microsoft.CodeAnalysis.Elfie.Model.Strings.UTF8 : object {
    public static byte Null;
    public static byte Quote;
    public static byte Pound;
    public static byte Comma;
    public static byte Dash;
    public static byte Period;
    public static byte Backslash;
    public static byte Slash;
    public static byte Pipe;
    public static byte Tab;
    public static byte CR;
    public static byte LF;
    public static byte Newline;
    public static byte Space;
    public static byte Colon;
    public static byte Semicolon;
    public static byte a;
    public static byte z;
    public static byte A;
    public static byte T;
    public static byte Z;
    public static byte Zero;
    public static byte Nine;
    public static byte LeftBrace;
    public static byte RightBrace;
    public static byte LeftBracket;
    public static byte RightBracket;
    public static byte ToUpperSubtract;
    public static byte AlphabetLength;
    public static byte DigitsLength;
}
public class Microsoft.CodeAnalysis.Elfie.Model.Structures.MutableSymbol : object {
    private PackageDatabase _database;
    private int _index;
    public string Name;
    public SymbolType Type;
    public SymbolModifier Modifiers;
    public string Parameters;
    public string FilePath;
    public ushort Line;
    public ushort CharInLine;
    internal MutableSymbol(PackageDatabase database, int index);
    public MutableSymbol(string name, SymbolType type);
    public MutableSymbol(Symbol source);
    public MutableSymbol FindByFullName(string path, char delimiter);
    public MutableSymbol FindOrAddPath(string path, char delimiter, SymbolType pathPartType);
    public MutableSymbol AddChild(MutableSymbol child);
    public void AddTree(Symbol root);
    public string ToLocationString();
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.CodeAnalysis.Elfie.Model.Structures.PartialArray`1 : object {
    private T[] _array;
    [CompilerGeneratedAttribute]
private bool <IsStaticSize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    public bool IsStaticSize { get; private set; }
    public int Count { get; private set; }
    public T Item { get; public set; }
    public int Capacity { get; }
    public bool IsFull { get; }
    public PartialArray`1(int capacity, bool isStaticSize);
    public PartialArray`1(T[] array, int currentCount, bool isStaticSize);
    [CompilerGeneratedAttribute]
public bool get_IsStaticSize();
    [CompilerGeneratedAttribute]
private void set_IsStaticSize(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Count();
    [CompilerGeneratedAttribute]
private void set_Count(int value);
    public T get_Item(int index);
    public void set_Item(int index, T value);
    public sealed virtual void Add();
    public sealed virtual void SetCount(int count);
    public void Add(T item);
    public sealed virtual void Clear();
    public void Sort(IComparer`1<T> comparer);
    public static void SortKeysAndItems(PartialArray`1<U> keys, PartialArray`1<V> items);
    public int get_Capacity();
    public bool get_IsFull();
    public void CopyTo(PartialArray`1& other);
    public T[] ToArray();
    public sealed virtual void ConvertToImmutable();
    public sealed virtual void WriteBinary(BinaryWriter w);
    public sealed virtual void ReadBinary(BinaryReader r);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class Microsoft.CodeAnalysis.Elfie.Model.Structures.Range : ValueType {
    [CompilerGeneratedAttribute]
private int <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private int <End>k__BackingField;
    public static Range Empty;
    public static Range Max;
    public int Start { get; private set; }
    public int End { get; private set; }
    public int Length { get; }
    public Range(int singleValue);
    public Range(int start, int end);
    private static Range();
    [CompilerGeneratedAttribute]
public int get_Start();
    [CompilerGeneratedAttribute]
private void set_Start(int value);
    [CompilerGeneratedAttribute]
public int get_End();
    [CompilerGeneratedAttribute]
private void set_End(int value);
    public bool IsEmpty();
    public bool Contains(int value);
    public int get_Length();
    public virtual string ToString();
}
public class Microsoft.CodeAnalysis.Elfie.Model.Structures.SymbolDetails : ValueType {
    public int ParametersIdentifier;
    public SymbolType Type;
    public SymbolModifier Modifiers;
    public void UpdateIdentifiers(StringStore store);
    public virtual bool Equals(object o);
    public virtual int GetHashCode();
    public sealed virtual void WriteBinary(BinaryWriter w);
    public sealed virtual void ReadBinary(BinaryReader r);
}
public class Microsoft.CodeAnalysis.Elfie.Model.Structures.SymbolLocation : ValueType {
    public int FileIndex;
    public ushort Line;
    public ushort CharInLine;
    public SymbolLocation(int fileIndex, ushort line, ushort charInLine);
    public sealed virtual void WriteBinary(BinaryWriter w);
    public sealed virtual void ReadBinary(BinaryReader r);
}
[FlagsAttribute]
public enum Microsoft.CodeAnalysis.Elfie.Model.Structures.SymbolModifier : Enum {
    public byte value__;
    public static SymbolModifier None;
    public static SymbolModifier Public;
    public static SymbolModifier Protected;
    public static SymbolModifier Internal;
    public static SymbolModifier Private;
    public static SymbolModifier Static;
}
[ExtensionAttribute]
public static class Microsoft.CodeAnalysis.Elfie.Model.Structures.SymbolModifierExtensions : object {
    [ExtensionAttribute]
public static bool Matches(SymbolModifier query, SymbolModifier candidate);
}
public enum Microsoft.CodeAnalysis.Elfie.Model.Structures.SymbolType : Enum {
    public byte value__;
    public static SymbolType Any;
    public static SymbolType Package;
    public static SymbolType Metadata;
    public static SymbolType Version;
    public static SymbolType PopularityRank;
    public static SymbolType Assembly;
    public static SymbolType FrameworkTarget;
    public static SymbolType Namespace;
    public static SymbolType Class;
    public static SymbolType Struct;
    public static SymbolType Enum;
    public static SymbolType Interface;
    public static SymbolType Constructor;
    public static SymbolType StaticConstructor;
    public static SymbolType Destructor;
    public static SymbolType Field;
    public static SymbolType Property;
    public static SymbolType Indexer;
    public static SymbolType Method;
    public static SymbolType ExtensionMethod;
    public static SymbolType ExtendedType;
    public static SymbolType Event;
    public static SymbolType Excluded;
}
[ExtensionAttribute]
public static class Microsoft.CodeAnalysis.Elfie.Model.Structures.SymbolTypeExtensions : object {
    [ExtensionAttribute]
public static bool IsAboveNamespace(SymbolType type);
    [ExtensionAttribute]
public static bool IsAboveType(SymbolType type);
    [ExtensionAttribute]
public static bool IsType(SymbolType type);
    [ExtensionAttribute]
public static bool IsExtensionMethod(SymbolType type);
    [ExtensionAttribute]
public static bool IsBracedType(SymbolType type);
}
public class Microsoft.CodeAnalysis.Elfie.Model.Symbol : ValueType {
    private IMemberDatabase _database;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    public int Index { get; private set; }
    public bool IsValid { get; }
    public String8 Name { get; }
    public SymbolType Type { get; }
    public SymbolModifier Modifiers { get; }
    public String8 Parameters { get; }
    public String8 PackageName { get; }
    public String8 AssemblyName { get; }
    public String8 FrameworkTargets { get; }
    public String8 AssemblyNameWithoutExtension { get; }
    public String8 ExtendedType { get; }
    public Path8 FullName { get; }
    public Path8 ContainerName { get; }
    private int DepthToRootNamespace { get; }
    public bool HasLocation { get; }
    public Path8 FilePath { get; }
    public ushort Line { get; }
    public ushort CharInLine { get; }
    public Symbol(IMemberDatabase database, int index);
    [CompilerGeneratedAttribute]
public int get_Index();
    [CompilerGeneratedAttribute]
private void set_Index(int value);
    public bool get_IsValid();
    public String8 get_Name();
    public SymbolType get_Type();
    public SymbolModifier get_Modifiers();
    public String8 get_Parameters();
    public String8 get_PackageName();
    public String8 get_AssemblyName();
    public String8 get_FrameworkTargets();
    public String8 get_AssemblyNameWithoutExtension();
    public String8 get_ExtendedType();
    public Path8 get_FullName();
    public Path8 get_ContainerName();
    private int get_DepthToRootNamespace();
    public bool get_HasLocation();
    public Path8 get_FilePath();
    public ushort get_Line();
    public ushort get_CharInLine();
    public Symbol Parent();
    public Symbol FirstChild();
    public Symbol NextSibling();
    public Symbol GetAncestorOfType(SymbolType type);
    public void Walk(Action`1<Symbol> action);
    public void Write(TextWriter writer);
    public void WriteDetails(TextWriter writer);
    public int WriteSignature(TextWriter writer);
    public void WriteLocation(TextWriter writer);
    public void WriteTree(TextWriter writer, int indent);
}
public class Microsoft.CodeAnalysis.Elfie.Model.Tree.ItemTree : object {
    private PartialArray`1<int> _parentIndex;
    private PartialArray`1<int> _firstChildIndex;
    private PartialArray`1<int> _nextSiblingIndex;
    private PartialArray`1<int> _nameIdentifier;
    public int Count { get; }
    public long Bytes { get; }
    public ItemTree(int rootIdentifier);
    public int Add(int parentIndex, int nameIdentifier);
    public int AddPath(int rootIndex, String8Set path, StringStore strings);
    public int GetNameIdentifier(int index);
    public Path8 GetPath(int index, StringStore strings, char delimiter);
    public int GetParent(int index);
    public int GetFirstChild(int index);
    public int GetNextSibling(int index);
    public int GetDepth(int index);
    public int GetAncestorAtDepth(int index, int desiredDepth);
    public bool TryFindChild(int parentIndex, Func`2<int, bool> doesNodeIndexMatch, Int32& matchingIndex);
    public bool TryFindChildByName(int parentIndex, int nameIdentifier, Int32& matchingIndex);
    public bool TryFindChildByName(int parentIndex, Range nameRange, Int32& matchingIndex);
    public bool TryFindByPath(int startIndex, String8Set path, StringStore strings, Int32& matchingIndex);
    private bool TryFindByPath(int parentNodeIndex, int currentPathPartIndex, String8Set path, StringStore strings, Int32& matchingIndex);
    public int FindByPath(int startIndex, String8Set path, StringStore strings);
    public void Sort(Func`3<int, int, int> nodeIndexComparer);
    public void Sort(IComparer`1<int> nodeIndexComparer);
    public void SortByName(StringStore strings);
    private void Sort(int parentNodeIndex, IComparer`1<int> nodeIndexComparer, PartialArray`1& buffer);
    public sealed virtual int get_Count();
    public virtual long get_Bytes();
    public bool RequiresRemap();
    public void UpdateIdentifiers(StringStore strings);
    public sealed virtual void WriteBinary(BinaryWriter w);
    public sealed virtual void ReadBinary(BinaryReader r);
    public void WriteChildrenOf(TextWriter writer, StringStore strings, int parentIndex);
    public void WriteTree(TextWriter writer, StringStore strings, int index, int indent, Action`2<int, TextWriter> writeAdditionalDetail);
}
public class Microsoft.CodeAnalysis.Elfie.Model.Tree.Path8 : ValueType {
    private StringStore _strings;
    private ItemTree _tree;
    private int _index;
    private byte _delimiter;
    private int _includeDepth;
    public static Path8 Empty;
    public String8 Name { get; }
    public Path8 Parent { get; }
    public bool IsRoot { get; }
    public bool IsEmpty { get; }
    public int Length { get; }
    public Path8(StringStore strings, ItemTree tree, int index, char delimiter, int includeDepth);
    internal Path8(StringStore strings, ItemTree tree, int index, byte delimiter, int includeDepth);
    private static Path8();
    public String8 get_Name();
    public Path8 get_Parent();
    public bool get_IsRoot();
    public bool get_IsEmpty();
    public sealed virtual int get_Length();
    public sealed virtual int WriteTo(Byte[] buffer, int index);
    public sealed virtual int WriteTo(Stream stream);
    public sealed virtual int WriteTo(TextWriter writer);
    public virtual string ToString();
}
public class Microsoft.CodeAnalysis.Elfie.Model.Tree.TreeItemNotFoundException : Exception {
    public TreeItemNotFoundException(string message);
    public TreeItemNotFoundException(string message, Exception inner);
    protected TreeItemNotFoundException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.CodeAnalysis.Elfie.PDB.SourceFileDetails : object {
    [CompilerGeneratedAttribute]
private string <PathInPdb>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CachedPathSuffix>k__BackingField;
    public string PathInPdb { get; public set; }
    public string SourceUrl { get; public set; }
    public string CachedPathSuffix { get; public set; }
    public SourceFileDetails(string pathInPdb, string sourceUrl);
    [CompilerGeneratedAttribute]
public string get_PathInPdb();
    [CompilerGeneratedAttribute]
public void set_PathInPdb(string value);
    [CompilerGeneratedAttribute]
public string get_SourceUrl();
    [CompilerGeneratedAttribute]
public void set_SourceUrl(string value);
    [CompilerGeneratedAttribute]
public string get_CachedPathSuffix();
    [CompilerGeneratedAttribute]
public void set_CachedPathSuffix(string value);
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.CodeAnalysis.Elfie.PDB.SourceFileMap : object {
    private static string FileMapFileExtension;
    private static string SrcToolExe;
    private static string SrcToolFormatString;
    private static string SrcToolParseRegex;
    [CompilerGeneratedAttribute]
private string <PdbPath>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<SourceFileDetails> <Files>k__BackingField;
    public string PdbPath { get; private set; }
    public IList`1<SourceFileDetails> Files { get; private set; }
    public string Item { get; }
    private string FileMapPath { get; }
    private SourceFileMap(string pdbPath);
    [CompilerGeneratedAttribute]
public string get_PdbPath();
    [CompilerGeneratedAttribute]
private void set_PdbPath(string value);
    [CompilerGeneratedAttribute]
public IList`1<SourceFileDetails> get_Files();
    [CompilerGeneratedAttribute]
private void set_Files(IList`1<SourceFileDetails> value);
    public string get_Item(string pathInPdb);
    public SourceFileDetails Details(string pathInPdbOrSourceUrl);
    public static SourceFileMap BuildOrLoad(string pdbPath);
    public static SourceFileMap Load(string pdbPath);
    private void Build();
    private void Load();
    public void Save(string filePath);
    private string get_FileMapPath();
    public static string CachePathSuffix(string sourceFileUrl);
    public static string ComputeCachedPath(string binaryName, string sourceFileUrl);
    [AsyncStateMachineAttribute("Microsoft.CodeAnalysis.Elfie.PDB.SourceFileMap/<Download>d__25")]
public static Task Download(string pdbPath, string sourceFileUrl, TimeSpan timeout);
    public static string GetLocalPath(Symbol match);
}
public static class Microsoft.CodeAnalysis.Elfie.PDB.SymbolCache : object {
    [CompilerGeneratedAttribute]
private static string <Path>k__BackingField;
    public static string Path { get; public set; }
    private static SymbolCache();
    [CompilerGeneratedAttribute]
public static string get_Path();
    [CompilerGeneratedAttribute]
public static void set_Path(string value);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.CodeAnalysis.Elfie.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string BufferTooSmall { get; }
    internal static string ConvertToImmutableRequired { get; }
    internal static string Database_NoAncestorOfType { get; }
    internal static string DatabaseArraysOutOfSync { get; }
    internal static string DatabaseCharacterUnexpected { get; }
    internal static string DatabaseFormatVersionWrong { get; }
    internal static string DatabaseLineTooShort { get; }
    internal static string DatabaseVersionNotInteger { get; }
    internal static string LoadEach_FileNotFound { get; }
    internal static string MemberDatabase_ExtensionNotSupported { get; }
    internal static string ReadArrayLength_LengthInvalid { get; }
    internal static string ReadPrimitiveArray_WrongElementSize { get; }
    internal static string TryFileRead_ExceptionDuringRead { get; }
    internal static string UnableToSupportMultibyteCharacter { get; }
    internal static string UnrecognizedDatabaseFormatVersion { get; }
    internal static string WritePrimitiveArray_NoPrimitiveType { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_BufferTooSmall();
    internal static string get_ConvertToImmutableRequired();
    internal static string get_Database_NoAncestorOfType();
    internal static string get_DatabaseArraysOutOfSync();
    internal static string get_DatabaseCharacterUnexpected();
    internal static string get_DatabaseFormatVersionWrong();
    internal static string get_DatabaseLineTooShort();
    internal static string get_DatabaseVersionNotInteger();
    internal static string get_LoadEach_FileNotFound();
    internal static string get_MemberDatabase_ExtensionNotSupported();
    internal static string get_ReadArrayLength_LengthInvalid();
    internal static string get_ReadPrimitiveArray_WrongElementSize();
    internal static string get_TryFileRead_ExceptionDuringRead();
    internal static string get_UnableToSupportMultibyteCharacter();
    internal static string get_UnrecognizedDatabaseFormatVersion();
    internal static string get_WritePrimitiveArray_NoPrimitiveType();
}
public abstract class Microsoft.CodeAnalysis.Elfie.Serialization.BaseTabularReader : object {
    private BufferedRowReader _reader;
    protected List`1<string> _columnHeadingsList;
    protected Dictionary`2<string, int> _columnHeadings;
    private String8Set _currentRowColumns;
    private PartialArray`1<int> _cellPositionArray;
    private String8TabularValue[] _valueBoxes;
    [CompilerGeneratedAttribute]
private int <RowCountRead>k__BackingField;
    public IReadOnlyList`1<string> Columns { get; }
    public int RowCountRead { get; protected set; }
    public long BytesRead { get; }
    public int CurrentRowColumns { get; }
    public BaseTabularReader(string filePath, bool hasHeaderRow);
    public BaseTabularReader(Stream stream, bool hasHeaderRow);
    protected abstract virtual String8Set SplitCells(String8 row, PartialArray`1<int> cellPositionArray);
    protected abstract virtual String8Set SplitRows(String8 block, PartialArray`1<int> rowPositionArray);
    public sealed virtual IReadOnlyList`1<string> get_Columns();
    public sealed virtual bool TryGetColumnIndex(string columnNameOrIndex, Int32& columnIndex);
    public sealed virtual ITabularValue Current(int index);
    [CompilerGeneratedAttribute]
public sealed virtual int get_RowCountRead();
    [CompilerGeneratedAttribute]
protected void set_RowCountRead(int value);
    public sealed virtual long get_BytesRead();
    public sealed virtual int get_CurrentRowColumns();
    public virtual bool NextRow();
    public sealed virtual void Dispose();
}
public abstract class Microsoft.CodeAnalysis.Elfie.Serialization.BaseTabularWriter : object {
    private Stream _stream;
    private bool _writeHeaderRow;
    private int _columnCount;
    private int _rowCountWritten;
    private int _currentRowColumnCount;
    private bool _inPartialColumn;
    private Byte[] _typeConversionBuffer;
    public int RowCountWritten { get; }
    public long BytesWritten { get; }
    public BaseTabularWriter(string filePath, bool writeHeaderRow);
    public BaseTabularWriter(Stream stream, bool writeHeaderRow);
    protected abstract virtual void WriteCellValue(Stream stream, String8 value);
    protected abstract virtual void WriteCellDelimiter(Stream stream);
    protected abstract virtual void WriteRowSeparator(Stream stream);
    protected abstract virtual void WriteValueStart(Stream stream);
    protected abstract virtual void WriteValuePart(Stream stream, String8 part);
    protected abstract virtual void WriteValuePart(Stream stream, byte c);
    protected abstract virtual void WriteValueEnd(Stream stream);
    public sealed virtual void SetColumns(IEnumerable`1<string> columnNames);
    public sealed virtual void Write(String8 value);
    public sealed virtual void Write(long value);
    public sealed virtual void Write(double value);
    public sealed virtual void Write(bool value);
    public sealed virtual void Write(byte value);
    public sealed virtual void Write(DateTime value);
    public sealed virtual void WriteValueStart();
    public sealed virtual void WriteValuePart(String8 part);
    public sealed virtual void WriteValuePart(byte c);
    public sealed virtual void WriteValueEnd();
    public sealed virtual void WriteValuePart(DateTime part);
    public sealed virtual void WriteValuePart(int part);
    public sealed virtual void WriteValuePart(bool part);
    public sealed virtual void NextRow();
    public sealed virtual int get_RowCountWritten();
    public sealed virtual long get_BytesWritten();
    public sealed virtual void Dispose();
}
public class Microsoft.CodeAnalysis.Elfie.Serialization.BufferedRowReader : object {
    private Stream _stream;
    private Func`3<String8, PartialArray`1<int>, String8Set> _splitRows;
    private bool _startOfStream;
    private Byte[] _buffer;
    private PartialArray`1<int> _rowPositionArray;
    private int _nextRowIndexInBlock;
    private String8Set _currentBlock;
    private String8 _currentRow;
    public long BytesRead { get; }
    public BufferedRowReader(Stream stream, Func`3<String8, PartialArray`1<int>, String8Set> splitRows);
    public long get_BytesRead();
    public String8 NextRow();
    private void NextBlock();
    public sealed virtual void Dispose();
}
public class Microsoft.CodeAnalysis.Elfie.Serialization.ColumnNotFoundException : Exception {
    public ColumnNotFoundException(string message);
    public ColumnNotFoundException(string message, Exception inner);
    protected ColumnNotFoundException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.CodeAnalysis.Elfie.Serialization.ConsoleTabularWriter : object {
    private StreamWriter _consoleOutStream;
    private int _currentRowColumnCount;
    private int _rowCountWritten;
    private int _columnCount;
    private List`1<string> _columnNames;
    public long BytesWritten { get; }
    public int RowCountWritten { get; }
    public sealed virtual long get_BytesWritten();
    public sealed virtual int get_RowCountWritten();
    public sealed virtual void SetColumns(IEnumerable`1<string> columnNames);
    public sealed virtual void Write(long value);
    public sealed virtual void Write(double value);
    public sealed virtual void Write(bool value);
    public sealed virtual void Write(DateTime value);
    public sealed virtual void Write(byte value);
    public sealed virtual void Write(String8 value);
    public sealed virtual void WriteValueStart();
    public sealed virtual void WriteValuePart(DateTime value);
    public sealed virtual void WriteValuePart(int part);
    public sealed virtual void WriteValuePart(bool part);
    public sealed virtual void WriteValuePart(byte c);
    public sealed virtual void WriteValuePart(String8 part);
    public sealed virtual void WriteValueEnd();
    public sealed virtual void NextRow();
    public sealed virtual void Dispose();
}
public class Microsoft.CodeAnalysis.Elfie.Serialization.CsvReader : BaseTabularReader {
    public CsvReader(string tsvFilePath, bool hasHeaderRow);
    public CsvReader(Stream stream, bool hasHeaderRow);
    protected virtual String8Set SplitCells(String8 row, PartialArray`1<int> cellPositionArray);
    protected virtual String8Set SplitRows(String8 block, PartialArray`1<int> rowPositionArray);
}
public class Microsoft.CodeAnalysis.Elfie.Serialization.CsvWriter : BaseTabularWriter {
    public CsvWriter(string filePath, bool writeHeaderRow);
    public CsvWriter(Stream stream, bool writeHeaderRow);
    protected virtual void WriteCellDelimiter(Stream stream);
    protected virtual void WriteRowSeparator(Stream stream);
    protected virtual void WriteCellValue(Stream stream, String8 value);
    protected virtual void WriteValueStart(Stream stream);
    protected virtual void WriteValuePart(Stream stream, String8 value);
    protected virtual void WriteValuePart(Stream stream, byte c);
    protected virtual void WriteValueEnd(Stream stream);
}
public class Microsoft.CodeAnalysis.Elfie.Serialization.DataReaderTabularReader : object {
    private IDataReader _reader;
    private List`1<string> _columnNames;
    private int _rowCountRead;
    private String8Block _block;
    private ObjectTabularValue[] _valueBoxes;
    public IReadOnlyList`1<string> Columns { get; }
    public int CurrentRowColumns { get; }
    public int RowCountRead { get; }
    public long BytesRead { get; }
    public DataReaderTabularReader(IDataReader reader);
    public sealed virtual IReadOnlyList`1<string> get_Columns();
    public sealed virtual int get_CurrentRowColumns();
    public sealed virtual int get_RowCountRead();
    public sealed virtual long get_BytesRead();
    public sealed virtual bool TryGetColumnIndex(string columnNameOrIndex, Int32& columnIndex);
    public sealed virtual bool NextRow();
    public sealed virtual ITabularValue Current(int index);
    public sealed virtual void Dispose();
}
public static class Microsoft.CodeAnalysis.Elfie.Serialization.FileIO : object {
    public static string CleanPath(string filePath, int lengthLimit);
    public static bool IsManagedBinary(string filePath);
}
public interface Microsoft.CodeAnalysis.Elfie.Serialization.IBinarySerializable {
    public abstract virtual void WriteBinary(BinaryWriter w);
    public abstract virtual void ReadBinary(BinaryReader r);
}
public class Microsoft.CodeAnalysis.Elfie.Serialization.IISTabularReader : BaseTabularReader {
    public IISTabularReader(string filePath);
    public IISTabularReader(Stream stream);
    private bool IsCommentRow();
    private void ReadColumns();
    public virtual bool NextRow();
    protected virtual String8Set SplitCells(String8 row, PartialArray`1<int> cellPositionArray);
    protected virtual String8Set SplitRows(String8 block, PartialArray`1<int> rowPositionArray);
}
public interface Microsoft.CodeAnalysis.Elfie.Serialization.ITabularReader {
    public IReadOnlyList`1<string> Columns { get; }
    public int RowCountRead { get; }
    public long BytesRead { get; }
    public int CurrentRowColumns { get; }
    public abstract virtual IReadOnlyList`1<string> get_Columns();
    public abstract virtual bool TryGetColumnIndex(string columnNameOrIndex, Int32& columnIndex);
    public abstract virtual ITabularValue Current(int index);
    public abstract virtual int get_RowCountRead();
    public abstract virtual long get_BytesRead();
    public abstract virtual int get_CurrentRowColumns();
    public abstract virtual bool NextRow();
}
[ExtensionAttribute]
public static class Microsoft.CodeAnalysis.Elfie.Serialization.ITabularReaderExtensions : object {
    [ExtensionAttribute]
public static ITabularValue CurrentOrEmpty(ITabularReader reader, int index);
    [ExtensionAttribute]
public static int ColumnIndex(ITabularReader reader, string columnNameOrIndex);
}
public interface Microsoft.CodeAnalysis.Elfie.Serialization.ITabularValue {
    public abstract virtual String8 ToString8();
    public abstract virtual bool IsNullOrEmpty();
    public abstract virtual string ToString();
    public abstract virtual bool TryToBoolean(Boolean& result);
    public abstract virtual bool TryToInteger(Int32& result);
    public abstract virtual bool TryToDateTime(DateTime& result);
}
[ExtensionAttribute]
public static class Microsoft.CodeAnalysis.Elfie.Serialization.ITabularValueExtensions : object {
    [ExtensionAttribute]
public static DateTime ToDateTime(ITabularValue value);
    [ExtensionAttribute]
public static int ToInteger(ITabularValue value);
    [ExtensionAttribute]
public static bool ToBoolean(ITabularValue value);
}
public interface Microsoft.CodeAnalysis.Elfie.Serialization.ITabularWriter {
    public int RowCountWritten { get; }
    public long BytesWritten { get; }
    public abstract virtual void SetColumns(IEnumerable`1<string> columnNames);
    public abstract virtual void Write(String8 value);
    public abstract virtual void Write(DateTime value);
    public abstract virtual void Write(long value);
    public abstract virtual void Write(double value);
    public abstract virtual void Write(bool value);
    public abstract virtual void Write(byte value);
    public abstract virtual void WriteValueStart();
    public abstract virtual void WriteValueEnd();
    public abstract virtual void WriteValuePart(String8 part);
    public abstract virtual void WriteValuePart(DateTime value);
    public abstract virtual void WriteValuePart(int part);
    public abstract virtual void WriteValuePart(bool part);
    public abstract virtual void WriteValuePart(byte c);
    public abstract virtual void NextRow();
    public abstract virtual int get_RowCountWritten();
    public abstract virtual long get_BytesWritten();
}
public class Microsoft.CodeAnalysis.Elfie.Serialization.JsonTabularWriter : object {
    private static String8 s_beforeColumnNames;
    private static String8 s_afterColumnNames;
    private static String8 s_escapedCharPrefix;
    private static String8 s_valueDelimiter;
    private Stream _stream;
    private Byte[] _typeConversionBuffer;
    private int _columnCount;
    private int _rowCountWritten;
    private int _currentRowColumnCount;
    private bool _inPartialColumn;
    public long BytesWritten { get; }
    public int RowCountWritten { get; }
    public JsonTabularWriter(string filePath);
    public JsonTabularWriter(Stream stream);
    private static JsonTabularWriter();
    private byte ToHexDigit(int b);
    private void WriteEscaped(byte c);
    private void WriteEscaped(String8 value);
    public sealed virtual void SetColumns(IEnumerable`1<string> columnNames);
    public sealed virtual void NextRow();
    private void WriteColumnSeparator();
    public sealed virtual void Write(bool value);
    public sealed virtual void Write(long value);
    public sealed virtual void Write(double value);
    public sealed virtual void Write(String8 value);
    public sealed virtual void Write(byte value);
    public sealed virtual void Write(DateTime value);
    public sealed virtual void WriteValueStart();
    public sealed virtual void WriteValueEnd();
    public sealed virtual void WriteValuePart(int part);
    public sealed virtual void WriteValuePart(bool part);
    public sealed virtual void WriteValuePart(DateTime value);
    public sealed virtual void WriteValuePart(byte c);
    public sealed virtual void WriteValuePart(String8 value);
    public sealed virtual long get_BytesWritten();
    public sealed virtual int get_RowCountWritten();
    public sealed virtual void Dispose();
}
public class Microsoft.CodeAnalysis.Elfie.Serialization.LdfTabularReader : object {
    private static String8 s_multiValueDelimiter;
    private BufferedRowReader _reader;
    private String8Block _columnNamesBlock;
    private Dictionary`2<String8, int> _columnIndices8;
    private Dictionary`2<string, int> _columnIndices;
    private List`1<string> _columnNames;
    private String8Set _blockLines;
    private PartialArray`1<int> _lineArray;
    private int _nextLineIndex;
    private String8Block _currentRowBlock;
    private String8TabularValue[] _currentRowValues;
    [CompilerGeneratedAttribute]
private int <RowCountRead>k__BackingField;
    public IReadOnlyList`1<string> Columns { get; }
    public int CurrentRowColumns { get; }
    public long BytesRead { get; }
    public int RowCountRead { get; private set; }
    public LdfTabularReader(string filePath);
    public LdfTabularReader(Stream stream);
    private static LdfTabularReader();
    public sealed virtual IReadOnlyList`1<string> get_Columns();
    public sealed virtual int get_CurrentRowColumns();
    public sealed virtual long get_BytesRead();
    [CompilerGeneratedAttribute]
public sealed virtual int get_RowCountRead();
    [CompilerGeneratedAttribute]
private void set_RowCountRead(int value);
    private void ReadColumns(Stream stream);
    private void ReadColumnLine(String8 line);
    public sealed virtual bool TryGetColumnIndex(string columnNameOrIndex, Int32& columnIndex);
    public sealed virtual ITabularValue Current(int index);
    private String8Set SplitRows(String8 block, PartialArray`1<int> rowPositionArray);
    public sealed virtual bool NextRow();
    private void SetColumnValue(String8 currentPropertyName, String8 currentPropertyValue, bool isEncoded);
    private String8 DecodeBase64(String8 value);
    private String8 DecodeSid(String8 sidBytes);
    public sealed virtual void Dispose();
}
public class Microsoft.CodeAnalysis.Elfie.Serialization.ObjectTabularValue : object {
    private object _value;
    private String8Block _block;
    public ObjectTabularValue(String8Block convertBuffer);
    public void SetValue(object value);
    public sealed virtual String8 ToString8();
    public sealed virtual bool IsNullOrEmpty();
    public virtual string ToString();
    public sealed virtual bool TryToBoolean(Boolean& result);
    public sealed virtual bool TryToDateTime(DateTime& result);
    public sealed virtual bool TryToInteger(Int32& result);
}
public static class Microsoft.CodeAnalysis.Elfie.Serialization.Read : object {
    public static void FromFile(Action`1<TextReader> readMethod, string filePath);
    public static void FromString(Action`1<TextReader> readMethod, string content);
}
public class Microsoft.CodeAnalysis.Elfie.Serialization.String8TabularValue : object {
    public static String8TabularValue Empty;
    private String8 _value;
    private static String8TabularValue();
    public void SetValue(String8 value);
    public sealed virtual String8 ToString8();
    public virtual string ToString();
    public sealed virtual bool IsNullOrEmpty();
    public sealed virtual bool TryToBoolean(Boolean& result);
    public sealed virtual bool TryToDateTime(DateTime& result);
    public sealed virtual bool TryToInteger(Int32& result);
}
public static class Microsoft.CodeAnalysis.Elfie.Serialization.TabularFactory : object {
    private static Dictionary`2<string, Func`2<string, ITabularReader>> s_PathToReader;
    private static Dictionary`2<string, Func`2<string, ITabularWriter>> s_PathToWriter;
    private static Dictionary`2<string, Func`2<Stream, ITabularReader>> s_StreamToReader;
    private static Dictionary`2<string, Func`2<Stream, ITabularWriter>> s_StreamToWriter;
    private static void LoadReadersAndWriters();
    private static string MapExtension(string filePath, string toExtension);
    private static Func`2<U, T> GetConstructorFunc(string keyName, string assemblyName, string typeName);
    public static ITabularReader BuildReader(string filePath);
    public static ITabularReader BuildReader(Stream stream, string filePath);
    public static ITabularWriter BuildWriter(string filePath);
    public static ITabularWriter BuildWriter(Stream stream, string filePath);
    public static ITabularWriter AppendWriter(string filePath, IEnumerable`1<string> columnNames);
}
public class Microsoft.CodeAnalysis.Elfie.Serialization.TsvReader : BaseTabularReader {
    public TsvReader(string tsvFilePath, bool hasHeaderRow);
    public TsvReader(Stream stream, bool hasHeaderRow);
    protected virtual String8Set SplitCells(String8 row, PartialArray`1<int> cellPositionArray);
    protected virtual String8Set SplitRows(String8 block, PartialArray`1<int> rowPositionArray);
}
public class Microsoft.CodeAnalysis.Elfie.Serialization.TsvWriter : BaseTabularWriter {
    public TsvWriter(string filePath, bool writeHeaderRow);
    public TsvWriter(Stream stream, bool writeHeaderRow);
    protected virtual void WriteCellDelimiter(Stream stream);
    protected virtual void WriteRowSeparator(Stream stream);
    protected virtual void WriteCellValue(Stream stream, String8 value);
    protected virtual void WriteValueStart(Stream stream);
    protected virtual void WriteValueEnd(Stream stream);
    protected virtual void WriteValuePart(Stream stream, String8 part);
    protected virtual void WriteValuePart(Stream stream, byte c);
}
public static class Microsoft.CodeAnalysis.Elfie.Serialization.Write : object {
    public static string ToString(Action`1<TextWriter> writeMethod);
    public static string ToString(Func`2<TextWriter, T> writeMethod);
    public static void ToFile(Action`1<TextWriter> writeMethod, string filePath);
}
public static class Microsoft.CodeAnalysis.Elfie.VersionConstants : object {
    public static string Prerelease;
    public static string AssemblyVersion;
    public static string FileVersion;
    public static string Version;
}
