public class Microsoft.IdentityModel.Clients.ActiveDirectory.AdalClaimChallengeException : AdalServiceException {
    [CompilerGeneratedAttribute]
private string <Claims>k__BackingField;
    public string Claims { get; internal set; }
    public AdalClaimChallengeException(string errorCode, string message, Exception innerException, string claims);
    [CompilerGeneratedAttribute]
public string get_Claims();
    [CompilerGeneratedAttribute]
internal void set_Claims(string value);
}
public static class Microsoft.IdentityModel.Clients.ActiveDirectory.AdalError : object {
    public static string Unknown;
    public static string NonHttpsRedirectNotSupported;
    public static string InvalidArgument;
    public static string AuthenticationFailed;
    public static string AuthenticationCanceled;
    public static string UnauthorizedResponseExpected;
    public static string AuthorityNotInValidList;
    public static string AuthorityValidationFailed;
    public static string AssemblyLoadFailed;
    public static string AssemblyNotFound;
    public static string InvalidOwnerWindowType;
    public static string MultipleTokensMatched;
    public static string InvalidAuthorityType;
    public static string InvalidCredentialType;
    public static string InvalidServiceUrl;
    public static string FailedToAcquireTokenSilently;
    public static string CertificateKeySizeTooSmall;
    public static string IdentityProtocolLoginUrlNull;
    public static string IdentityProtocolMismatch;
    public static string EmailAddressSuffixMismatch;
    public static string IdentityProviderRequestFailed;
    public static string StsTokenRequestFailed;
    public static string EncodedTokenTooLong;
    public static string ServiceUnavailable;
    public static string ServiceReturnedError;
    public static string FederatedServiceReturnedError;
    public static string StsMetadataRequestFailed;
    public static string NoDataFromSts;
    public static string UserMismatch;
    public static string UnknownUserType;
    public static string UnknownUser;
    public static string UserRealmDiscoveryFailed;
    public static string AccessingWsMetadataExchangeFailed;
    public static string ParsingWsMetadataExchangeFailed;
    public static string WsTrustEndpointNotFoundInMetadataDocument;
    public static string ParsingWsTrustResponseFailed;
    public static string NetworkNotAvailable;
    public static string AuthenticationUiFailed;
    public static string UserInteractionRequired;
    public static string PasswordRequiredForManagedUserError;
    public static string GetUserNameFailed;
    public static string MissingFederationMetadataUrl;
    public static string FailedToRefreshToken;
    public static string IntegratedAuthFailed;
    public static string DuplicateQueryParameter;
    public static string BrokerReponseHashMismatch;
    public static string DeviceCertificateNotFound;
    public static string InteractionRequired;
}
public class Microsoft.IdentityModel.Clients.ActiveDirectory.AdalException : Exception {
    [CompilerGeneratedAttribute]
private string <ErrorCode>k__BackingField;
    public string ErrorCode { get; private set; }
    public AdalException(string errorCode);
    public AdalException(string errorCode, string message);
    public AdalException(string errorCode, Exception innerException);
    public AdalException(string errorCode, string message, Exception innerException);
    [CompilerGeneratedAttribute]
public string get_ErrorCode();
    [CompilerGeneratedAttribute]
private void set_ErrorCode(string value);
    public virtual string ToString();
    internal static string GetErrorMessage(string errorCode);
}
public static class Microsoft.IdentityModel.Clients.ActiveDirectory.AdalOption : object {
    public static EventSource AdalEventSource { get; }
    public static EventSource get_AdalEventSource();
}
public class Microsoft.IdentityModel.Clients.ActiveDirectory.AdalServiceException : AdalException {
    [CompilerGeneratedAttribute]
private int <StatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ServiceErrorCodes>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpResponseHeaders <Headers>k__BackingField;
    public int StatusCode { get; public set; }
    public String[] ServiceErrorCodes { get; public set; }
    public HttpResponseHeaders Headers { get; internal set; }
    public AdalServiceException(string errorCode, string message);
    internal AdalServiceException(string errorCode, Exception innerException);
    internal AdalServiceException(string errorCode, string message, String[] serviceErrorCodes, Exception innerException);
    [CompilerGeneratedAttribute]
public int get_StatusCode();
    [CompilerGeneratedAttribute]
public void set_StatusCode(int value);
    [CompilerGeneratedAttribute]
public String[] get_ServiceErrorCodes();
    [CompilerGeneratedAttribute]
public void set_ServiceErrorCodes(String[] value);
    [CompilerGeneratedAttribute]
public HttpResponseHeaders get_Headers();
    [CompilerGeneratedAttribute]
internal void set_Headers(HttpResponseHeaders value);
    public virtual string ToString();
}
public class Microsoft.IdentityModel.Clients.ActiveDirectory.AdalSilentTokenAcquisitionException : AdalException {
    public AdalSilentTokenAcquisitionException(Exception innerException);
}
public class Microsoft.IdentityModel.Clients.ActiveDirectory.AdalUserMismatchException : AdalException {
    [CompilerGeneratedAttribute]
private string <RequestedUser>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReturnedUser>k__BackingField;
    public string RequestedUser { get; private set; }
    public string ReturnedUser { get; private set; }
    public AdalUserMismatchException(string requestedUser, string returnedUser);
    [CompilerGeneratedAttribute]
public string get_RequestedUser();
    [CompilerGeneratedAttribute]
private void set_RequestedUser(string value);
    [CompilerGeneratedAttribute]
public string get_ReturnedUser();
    [CompilerGeneratedAttribute]
private void set_ReturnedUser(string value);
    public virtual string ToString();
}
public class Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext : object {
    internal Authenticator Authenticator;
    [CompilerGeneratedAttribute]
private bool <ExtendedLifeTimeEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private TokenCache <TokenCache>k__BackingField;
    public bool ExtendedLifeTimeEnabled { get; public set; }
    public string Authority { get; }
    public bool ValidateAuthority { get; }
    public TokenCache TokenCache { get; private set; }
    public Guid CorrelationId { get; public set; }
    public AuthenticationContext(string authority);
    public AuthenticationContext(string authority, bool validateAuthority);
    public AuthenticationContext(string authority, TokenCache tokenCache);
    public AuthenticationContext(string authority, bool validateAuthority, TokenCache tokenCache);
    private AuthenticationContext(string authority, AuthorityValidationType validateAuthority, TokenCache tokenCache);
    [CompilerGeneratedAttribute]
public bool get_ExtendedLifeTimeEnabled();
    [CompilerGeneratedAttribute]
public void set_ExtendedLifeTimeEnabled(bool value);
    public string get_Authority();
    public bool get_ValidateAuthority();
    [CompilerGeneratedAttribute]
public TokenCache get_TokenCache();
    [CompilerGeneratedAttribute]
private void set_TokenCache(TokenCache value);
    public Guid get_CorrelationId();
    public void set_CorrelationId(Guid value);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext/<AcquireDeviceCodeAsync>d__21")]
public Task`1<DeviceCodeResult> AcquireDeviceCodeAsync(string resource, string clientId);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext/<AcquireDeviceCodeAsync>d__22")]
public Task`1<DeviceCodeResult> AcquireDeviceCodeAsync(string resource, string clientId, string extraQueryParameters);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext/<AcquireTokenByDeviceCodeAsync>d__23")]
public Task`1<AuthenticationResult> AcquireTokenByDeviceCodeAsync(DeviceCodeResult deviceCodeResult);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext/<AcquireTokenAsync>d__24")]
public Task`1<AuthenticationResult> AcquireTokenAsync(string resource, string clientId, Uri redirectUri, IPlatformParameters parameters, UserIdentifier userId, string extraQueryParameters, string claims);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext/<AcquireTokenSilentAsync>d__25")]
public Task`1<AuthenticationResult> AcquireTokenSilentAsync(string resource, string clientId);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext/<AcquireTokenSilentAsync>d__26")]
public Task`1<AuthenticationResult> AcquireTokenSilentAsync(string resource, string clientId, UserIdentifier userId);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext/<AcquireTokenSilentAsync>d__27")]
public Task`1<AuthenticationResult> AcquireTokenSilentAsync(string resource, string clientId, UserIdentifier userId, IPlatformParameters parameters);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext/<AcquireTokenAsync>d__28")]
public Task`1<AuthenticationResult> AcquireTokenAsync(string resource, string clientId, Uri redirectUri, IPlatformParameters parameters);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext/<AcquireTokenAsync>d__29")]
public Task`1<AuthenticationResult> AcquireTokenAsync(string resource, string clientId, Uri redirectUri, IPlatformParameters parameters, UserIdentifier userId);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext/<AcquireTokenAsync>d__30")]
public Task`1<AuthenticationResult> AcquireTokenAsync(string resource, string clientId, Uri redirectUri, IPlatformParameters parameters, UserIdentifier userId, string extraQueryParameters);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext/<GetAuthorizationRequestUrlCommonAsync>d__31")]
internal Task`1<Uri> GetAuthorizationRequestUrlCommonAsync(string resource, string clientId, Uri redirectUri, UserIdentifier userId, string extraQueryParameters, string claims);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext/<AcquireTokenByAuthorizationCodeCommonAsync>d__32")]
internal Task`1<AuthenticationResult> AcquireTokenByAuthorizationCodeCommonAsync(string authorizationCode, Uri redirectUri, ClientKey clientKey, string resource);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext/<AcquireTokenForClientCommonAsync>d__33")]
internal Task`1<AuthenticationResult> AcquireTokenForClientCommonAsync(string resource, ClientKey clientKey);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext/<AcquireTokenOnBehalfCommonAsync>d__34")]
internal Task`1<AuthenticationResult> AcquireTokenOnBehalfCommonAsync(string resource, ClientKey clientKey, UserAssertion userAssertion);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext/<AcquireTokenWithClaimsCommonAsync>d__35")]
private Task`1<AuthenticationResult> AcquireTokenWithClaimsCommonAsync(string resource, ClientKey clientKey, Uri redirectUri, IPlatformParameters parameters, UserIdentifier userId, string extraQueryParameters, IWebUI webUI, string claims);
    internal IWebUI CreateWebAuthenticationDialog(IPlatformParameters parameters);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext/<AcquireTokenCommonAsync>d__37")]
internal Task`1<AuthenticationResult> AcquireTokenCommonAsync(string resource, string clientId, UserCredential userCredential);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext/<AcquireTokenCommonAsync>d__38")]
internal Task`1<AuthenticationResult> AcquireTokenCommonAsync(string resource, string clientId, UserAssertion userAssertion);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext/<AcquireTokenCommonAsync>d__39")]
private Task`1<AuthenticationResult> AcquireTokenCommonAsync(string resource, string clientId, Uri redirectUri, IPlatformParameters parameters, UserIdentifier userId, string extraQueryParameters, string claims);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext/<AcquireTokenSilentCommonAsync>d__40")]
internal Task`1<AuthenticationResult> AcquireTokenSilentCommonAsync(string resource, ClientKey clientKey, UserIdentifier userId, IPlatformParameters parameters);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext/<GetAuthorizationRequestUrlAsync>d__41")]
public Task`1<Uri> GetAuthorizationRequestUrlAsync(string resource, string clientId, Uri redirectUri, UserIdentifier userId, string extraQueryParameters);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext/<GetAuthorizationRequestUrlAsync>d__42")]
public Task`1<Uri> GetAuthorizationRequestUrlAsync(string resource, string clientId, Uri redirectUri, UserIdentifier userId, string extraQueryParameters, string claims);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext/<AcquireTokenSilentAsync>d__43")]
public Task`1<AuthenticationResult> AcquireTokenSilentAsync(string resource, ClientCredential clientCredential, UserIdentifier userId);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext/<AcquireTokenSilentAsync>d__44")]
public Task`1<AuthenticationResult> AcquireTokenSilentAsync(string resource, IClientAssertionCertificate clientCertificate, UserIdentifier userId);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext/<AcquireTokenSilentAsync>d__45")]
public Task`1<AuthenticationResult> AcquireTokenSilentAsync(string resource, ClientAssertion clientAssertion, UserIdentifier userId);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext/<AcquireTokenByAuthorizationCodeAsync>d__46")]
public Task`1<AuthenticationResult> AcquireTokenByAuthorizationCodeAsync(string authorizationCode, Uri redirectUri, ClientCredential clientCredential);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext/<AcquireTokenByAuthorizationCodeAsync>d__47")]
public Task`1<AuthenticationResult> AcquireTokenByAuthorizationCodeAsync(string authorizationCode, Uri redirectUri, ClientCredential clientCredential, string resource);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext/<AcquireTokenByAuthorizationCodeAsync>d__48")]
public Task`1<AuthenticationResult> AcquireTokenByAuthorizationCodeAsync(string authorizationCode, Uri redirectUri, ClientAssertion clientAssertion);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext/<AcquireTokenByAuthorizationCodeAsync>d__49")]
public Task`1<AuthenticationResult> AcquireTokenByAuthorizationCodeAsync(string authorizationCode, Uri redirectUri, ClientAssertion clientAssertion, string resource);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext/<AcquireTokenByAuthorizationCodeAsync>d__50")]
public Task`1<AuthenticationResult> AcquireTokenByAuthorizationCodeAsync(string authorizationCode, Uri redirectUri, IClientAssertionCertificate clientCertificate);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext/<AcquireTokenByAuthorizationCodeAsync>d__51")]
public Task`1<AuthenticationResult> AcquireTokenByAuthorizationCodeAsync(string authorizationCode, Uri redirectUri, IClientAssertionCertificate clientCertificate, string resource);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext/<AcquireTokenByAuthorizationCodeAsync>d__52")]
public Task`1<AuthenticationResult> AcquireTokenByAuthorizationCodeAsync(string authorizationCode, Uri redirectUri, IClientAssertionCertificate clientCertificate, string resource, bool sendX5c);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext/<AcquireTokenAsync>d__53")]
public Task`1<AuthenticationResult> AcquireTokenAsync(string resource, ClientCredential clientCredential, UserAssertion userAssertion);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext/<AcquireTokenAsync>d__54")]
public Task`1<AuthenticationResult> AcquireTokenAsync(string resource, IClientAssertionCertificate clientCertificate, UserAssertion userAssertion);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext/<AcquireTokenAsync>d__55")]
public Task`1<AuthenticationResult> AcquireTokenAsync(string resource, ClientAssertion clientAssertion, UserAssertion userAssertion);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext/<AcquireTokenAsync>d__56")]
public Task`1<AuthenticationResult> AcquireTokenAsync(string resource, string clientId, UserAssertion userAssertion);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext/<AcquireTokenAsync>d__57")]
public Task`1<AuthenticationResult> AcquireTokenAsync(string resource, IClientAssertionCertificate clientCertificate);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext/<AcquireTokenAsync>d__58")]
public Task`1<AuthenticationResult> AcquireTokenAsync(string resource, IClientAssertionCertificate clientCertificate, bool sendX5c);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext/<AcquireTokenAsync>d__59")]
public Task`1<AuthenticationResult> AcquireTokenAsync(string resource, ClientAssertion clientAssertion);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext/<AcquireTokenAsync>d__60")]
public Task`1<AuthenticationResult> AcquireTokenAsync(string resource, ClientCredential clientCredential);
}
[ExtensionAttribute]
public static class Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContextIntegratedAuthExtensions : object {
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContextIntegratedAuthExtensions/<AcquireTokenAsync>d__0")]
[ExtensionAttribute]
public static Task`1<AuthenticationResult> AcquireTokenAsync(AuthenticationContext ctx, string resource, string clientId, UserCredential userCredential);
}
public class Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationParameters : object {
    private static string AuthenticateHeader;
    private static string Bearer;
    private static string AuthorityKey;
    private static string ResourceKey;
    [CompilerGeneratedAttribute]
private string <Authority>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Resource>k__BackingField;
    public string Authority { get; public set; }
    public string Resource { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Authority();
    [CompilerGeneratedAttribute]
public void set_Authority(string value);
    [CompilerGeneratedAttribute]
public string get_Resource();
    [CompilerGeneratedAttribute]
public void set_Resource(string value);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationParameters/<CreateFromResourceUrlAsync>d__12")]
public static Task`1<AuthenticationParameters> CreateFromResourceUrlAsync(Uri resourceUrl);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationParameters/<CreateFromUnauthorizedResponseAsync>d__13")]
public static Task`1<AuthenticationParameters> CreateFromUnauthorizedResponseAsync(HttpResponseMessage responseMessage);
    public static AuthenticationParameters CreateFromResponseAuthenticateHeader(string authenticateHeader);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationParameters/<CreateFromResourceUrlCommonAsync>d__15")]
private static Task`1<AuthenticationParameters> CreateFromResourceUrlCommonAsync(Uri resourceUrl);
    private static AuthenticationParameters CreateFromUnauthorizedResponseCommon(IHttpWebResponse response);
}
[DataContractAttribute]
public class Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationResult : object {
    private static string Oauth2AuthorizationHeader;
    [CompilerGeneratedAttribute]
private string <AccessTokenType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AccessToken>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <ExpiresOn>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <ExtendedExpiresOn>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExtendedLifeTimeToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TenantId>k__BackingField;
    [CompilerGeneratedAttribute]
private UserInfo <UserInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IdToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Authority>k__BackingField;
    [DataMemberAttribute]
public string AccessTokenType { get; private set; }
    [DataMemberAttribute]
public string AccessToken { get; internal set; }
    [DataMemberAttribute]
public DateTimeOffset ExpiresOn { get; internal set; }
    [DataMemberAttribute]
internal DateTimeOffset ExtendedExpiresOn { get; internal set; }
    [DataMemberAttribute]
public bool ExtendedLifeTimeToken { get; internal set; }
    [DataMemberAttribute]
public string TenantId { get; internal set; }
    [DataMemberAttribute]
public UserInfo UserInfo { get; internal set; }
    [DataMemberAttribute]
public string IdToken { get; internal set; }
    public string Authority { get; internal set; }
    internal AuthenticationResult(string accessTokenType, string accessToken, DateTimeOffset expiresOn);
    internal AuthenticationResult(string accessTokenType, string accessToken, DateTimeOffset expiresOn, DateTimeOffset extendedExpiresOn);
    [CompilerGeneratedAttribute]
public string get_AccessTokenType();
    [CompilerGeneratedAttribute]
private void set_AccessTokenType(string value);
    [CompilerGeneratedAttribute]
public string get_AccessToken();
    [CompilerGeneratedAttribute]
internal void set_AccessToken(string value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_ExpiresOn();
    [CompilerGeneratedAttribute]
internal void set_ExpiresOn(DateTimeOffset value);
    [CompilerGeneratedAttribute]
internal DateTimeOffset get_ExtendedExpiresOn();
    [CompilerGeneratedAttribute]
internal void set_ExtendedExpiresOn(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public bool get_ExtendedLifeTimeToken();
    [CompilerGeneratedAttribute]
internal void set_ExtendedLifeTimeToken(bool value);
    [CompilerGeneratedAttribute]
public string get_TenantId();
    [CompilerGeneratedAttribute]
internal void set_TenantId(string value);
    [CompilerGeneratedAttribute]
public UserInfo get_UserInfo();
    [CompilerGeneratedAttribute]
internal void set_UserInfo(UserInfo value);
    [CompilerGeneratedAttribute]
public string get_IdToken();
    [CompilerGeneratedAttribute]
internal void set_IdToken(string value);
    [CompilerGeneratedAttribute]
public string get_Authority();
    [CompilerGeneratedAttribute]
internal void set_Authority(string value);
    public string CreateAuthorizationHeader();
    internal void UpdateTenantAndUserInfo(string tenantId, string idToken, UserInfo userInfo);
}
internal enum Microsoft.IdentityModel.Clients.ActiveDirectory.AuthorityValidationType : Enum {
    public int value__;
    public static AuthorityValidationType True;
    public static AuthorityValidationType False;
    public static AuthorityValidationType NotProvided;
}
public class Microsoft.IdentityModel.Clients.ActiveDirectory.ClientAssertion : object {
    [CompilerGeneratedAttribute]
private string <ClientId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Assertion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssertionType>k__BackingField;
    public string ClientId { get; private set; }
    public string Assertion { get; private set; }
    public string AssertionType { get; private set; }
    public ClientAssertion(string clientId, string assertion);
    [CompilerGeneratedAttribute]
public string get_ClientId();
    [CompilerGeneratedAttribute]
private void set_ClientId(string value);
    [CompilerGeneratedAttribute]
public string get_Assertion();
    [CompilerGeneratedAttribute]
private void set_Assertion(string value);
    [CompilerGeneratedAttribute]
public string get_AssertionType();
    [CompilerGeneratedAttribute]
private void set_AssertionType(string value);
}
public class Microsoft.IdentityModel.Clients.ActiveDirectory.ClientAssertionCertificate : object {
    private string clientId;
    [CompilerGeneratedAttribute]
private X509Certificate2 <Certificate>k__BackingField;
    public string ClientId { get; }
    public static int MinKeySizeInBits { get; }
    public X509Certificate2 Certificate { get; private set; }
    public string Thumbprint { get; }
    public ClientAssertionCertificate(string clientId, X509Certificate2 certificate);
    public sealed virtual string get_ClientId();
    public static int get_MinKeySizeInBits();
    [CompilerGeneratedAttribute]
public X509Certificate2 get_Certificate();
    [CompilerGeneratedAttribute]
private void set_Certificate(X509Certificate2 value);
    public sealed virtual Byte[] Sign(string message);
    public sealed virtual string get_Thumbprint();
}
public class Microsoft.IdentityModel.Clients.ActiveDirectory.ClientCredential : object {
    [CompilerGeneratedAttribute]
private string <ClientId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientSecret>k__BackingField;
    [CompilerGeneratedAttribute]
private ISecureClientSecret <SecureClientSecret>k__BackingField;
    public string ClientId { get; private set; }
    internal string ClientSecret { get; private set; }
    internal ISecureClientSecret SecureClientSecret { get; private set; }
    public ClientCredential(string clientId, string clientSecret);
    public ClientCredential(string clientId, ISecureClientSecret secureClientSecret);
    [CompilerGeneratedAttribute]
public string get_ClientId();
    [CompilerGeneratedAttribute]
private void set_ClientId(string value);
    [CompilerGeneratedAttribute]
internal string get_ClientSecret();
    [CompilerGeneratedAttribute]
private void set_ClientSecret(string value);
    [CompilerGeneratedAttribute]
internal ISecureClientSecret get_SecureClientSecret();
    [CompilerGeneratedAttribute]
private void set_SecureClientSecret(ISecureClientSecret value);
}
public class Microsoft.IdentityModel.Clients.ActiveDirectory.DeviceCodeResult : object {
    [CompilerGeneratedAttribute]
private string <UserCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DeviceCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VerificationUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <ExpiresOn>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Interval>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Resource>k__BackingField;
    public string UserCode { get; internal set; }
    public string DeviceCode { get; internal set; }
    public string VerificationUrl { get; internal set; }
    public DateTimeOffset ExpiresOn { get; internal set; }
    public long Interval { get; internal set; }
    public string Message { get; internal set; }
    public string ClientId { get; internal set; }
    public string Resource { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_UserCode();
    [CompilerGeneratedAttribute]
internal void set_UserCode(string value);
    [CompilerGeneratedAttribute]
public string get_DeviceCode();
    [CompilerGeneratedAttribute]
internal void set_DeviceCode(string value);
    [CompilerGeneratedAttribute]
public string get_VerificationUrl();
    [CompilerGeneratedAttribute]
internal void set_VerificationUrl(string value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_ExpiresOn();
    [CompilerGeneratedAttribute]
internal void set_ExpiresOn(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public long get_Interval();
    [CompilerGeneratedAttribute]
internal void set_Interval(long value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
internal void set_Message(string value);
    [CompilerGeneratedAttribute]
public string get_ClientId();
    [CompilerGeneratedAttribute]
internal void set_ClientId(string value);
    [CompilerGeneratedAttribute]
public string get_Resource();
    [CompilerGeneratedAttribute]
internal void set_Resource(string value);
}
[ExtensionAttribute]
internal static class Microsoft.IdentityModel.Clients.ActiveDirectory.Extensions : object {
    [ExtensionAttribute]
internal static string GetPiiScrubbedDetails(Exception ex);
}
[ObsoleteAttribute("Use LogCallback delegate instead")]
public interface Microsoft.IdentityModel.Clients.ActiveDirectory.IAdalLogCallback {
    public abstract virtual void Log(LogLevel level, string message);
}
public interface Microsoft.IdentityModel.Clients.ActiveDirectory.IClientAssertionCertificate {
    public string ClientId { get; }
    public string Thumbprint { get; }
    public abstract virtual Byte[] Sign(string message);
    public abstract virtual string get_ClientId();
    public abstract virtual string get_Thumbprint();
}
internal static class Microsoft.IdentityModel.Clients.ActiveDirectory.InstanceDiscovery : object {
    public static string DefaultTrustedAuthority;
    private static HashSet`1<string> WhitelistedAuthorities;
    public static ConcurrentDictionary`2<string, InstanceDiscoveryMetadataEntry> InstanceCache;
    private static SemaphoreSlim semaphore;
    private static InstanceDiscovery();
    internal static bool IsWhitelisted(string authorityHost);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Clients.ActiveDirectory.InstanceDiscovery/<GetMetadataEntryAsync>d__5")]
public static Task`1<InstanceDiscoveryMetadataEntry> GetMetadataEntryAsync(Uri authority, bool validateAuthority, CallState callState);
    public static string FormatAuthorizeEndpoint(string host, string tenant);
    private static string GetTenant(Uri uri);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Clients.ActiveDirectory.InstanceDiscovery/<DiscoverAsync>d__8")]
private static Task DiscoverAsync(Uri authority, bool validateAuthority, CallState callState);
    public static bool AddMetadataEntry(string host);
}
[DataContractAttribute]
internal class Microsoft.IdentityModel.Clients.ActiveDirectory.InstanceDiscoveryMetadataEntry : object {
    [CompilerGeneratedAttribute]
private string <PreferredNetwork>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PreferredCache>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Aliases>k__BackingField;
    [DataMemberAttribute]
public string PreferredNetwork { get; public set; }
    [DataMemberAttribute]
public string PreferredCache { get; public set; }
    [DataMemberAttribute]
public String[] Aliases { get; public set; }
    [CompilerGeneratedAttribute]
public string get_PreferredNetwork();
    [CompilerGeneratedAttribute]
public void set_PreferredNetwork(string value);
    [CompilerGeneratedAttribute]
public string get_PreferredCache();
    [CompilerGeneratedAttribute]
public void set_PreferredCache(string value);
    [CompilerGeneratedAttribute]
public String[] get_Aliases();
    [CompilerGeneratedAttribute]
public void set_Aliases(String[] value);
}
[DataContractAttribute]
internal class Microsoft.IdentityModel.Clients.ActiveDirectory.InstanceDiscoveryResponse : object {
    [CompilerGeneratedAttribute]
private string <TenantDiscoveryEndpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private InstanceDiscoveryMetadataEntry[] <Metadata>k__BackingField;
    [DataMemberAttribute]
public string TenantDiscoveryEndpoint { get; public set; }
    [DataMemberAttribute]
public InstanceDiscoveryMetadataEntry[] Metadata { get; public set; }
    [CompilerGeneratedAttribute]
public string get_TenantDiscoveryEndpoint();
    [CompilerGeneratedAttribute]
public void set_TenantDiscoveryEndpoint(string value);
    [CompilerGeneratedAttribute]
public InstanceDiscoveryMetadataEntry[] get_Metadata();
    [CompilerGeneratedAttribute]
public void set_Metadata(InstanceDiscoveryMetadataEntry[] value);
}
internal static class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.AdalErrorEx : object {
    public static string UnauthorizedUserInformationAccess;
    public static string CannotAccessUserInformation;
    public static string NeedToSetCallbackUriAsLocalSetting;
    public static string DeviceCodeAuthorizationPendingError;
}
internal static class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.AdalErrorMessage : object {
    public static string AccessingMetadataDocumentFailed;
    public static string AssemblyNotFoundTemplate;
    public static string AssemblyLoadFailedTemplate;
    public static string AuthenticationUiFailed;
    public static string AuthorityInvalidUriFormat;
    public static string AuthorityNotInValidList;
    public static string AuthorityValidationFailed;
    public static string NonHttpsRedirectNotSupported;
    public static string AuthorityUriInsecure;
    public static string AuthorityUriInvalidPath;
    public static string AuthorizationServerInvalidResponse;
    public static string CertificateKeySizeTooSmallTemplate;
    public static string EmailAddressSuffixMismatch;
    public static string EncodedTokenTooLong;
    public static string FailedToAcquireTokenSilently;
    public static string FailedToRefreshToken;
    public static string FederatedServiceReturnedErrorTemplate;
    public static string IdentityProtocolLoginUrlNull;
    public static string IdentityProtocolMismatch;
    public static string IdentityProviderRequestFailed;
    public static string InvalidArgumentLength;
    public static string InvalidAuthenticateHeaderFormat;
    public static string InvalidAuthorityTypeTemplate;
    public static string InvalidCredentialType;
    public static string InvalidFormatParameterTemplate;
    public static string InvalidTokenCacheKeyFormat;
    public static string MissingAuthenticateHeader;
    public static string MultipleTokensMatched;
    public static string NetworkIsNotAvailable;
    public static string NoDataFromSTS;
    public static string NullParameterTemplate;
    public static string ParsingMetadataDocumentFailed;
    public static string ParsingWsTrustResponseFailed;
    public static string PasswordRequiredForManagedUserError;
    public static string RedirectUriContainsFragment;
    public static string ServiceReturnedError;
    public static string BrokerReponseHashMismatch;
    public static string StsMetadataRequestFailed;
    public static string StsTokenRequestFailed;
    public static string UnauthorizedHttpStatusCodeExpected;
    public static string UnauthorizedResponseExpected;
    public static string UnexpectedAuthorityValidList;
    public static string Unknown;
    public static string UnknownUser;
    public static string UnknownUserType;
    public static string UnsupportedAuthorityValidation;
    public static string UnsupportedMultiRefreshToken;
    public static string AuthenticationCanceled;
    public static string UserMismatch;
    public static string UserCredentialAssertionTypeEmpty;
    public static string UserInteractionRequired;
    public static string UserRealmDiscoveryFailed;
    public static string WsTrustEndpointNotFoundInMetadataDocument;
    public static string GetUserNameFailed;
    public static string MissingFederationMetadataUrl;
    public static string SpecifyAnyUser;
    public static string IntegratedAuthFailed;
    public static string DuplicateQueryParameterTemplate;
    public static string DeviceCertificateNotFoundTemplate;
    public static string InteractionRequired;
}
internal static class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.AdalErrorMessageEx : object {
    public static string CannotAccessUserInformation;
    public static string RedirectUriUnsupportedWithPromptBehaviorNever;
    public static string UnauthorizedUserInformationAccess;
    public static string NeedToSetCallbackUriAsLocalSetting;
}
[EventSourceAttribute]
internal class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.AdalEventSource : EventSource {
    [EventAttribute("1")]
internal void Verbose(string message);
    [EventAttribute("2")]
internal void Information(string message);
    [EventAttribute("3")]
internal void Warning(string message);
    [EventAttribute("4")]
internal void Error(string message);
}
[DataContractAttribute]
internal class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.AuthenticationResultEx : object {
    [CompilerGeneratedAttribute]
private AuthenticationResult <Result>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RefreshToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResourceInResponse>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserAssertionHash>k__BackingField;
    [DataMemberAttribute]
public AuthenticationResult Result { get; public set; }
    [DataMemberAttribute]
public string RefreshToken { get; public set; }
    internal bool IsMultipleResourceRefreshToken { get; }
    [DataMemberAttribute]
internal string ResourceInResponse { get; internal set; }
    internal Exception Exception { get; internal set; }
    [DataMemberAttribute]
public string UserAssertionHash { get; public set; }
    [CompilerGeneratedAttribute]
public AuthenticationResult get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(AuthenticationResult value);
    [CompilerGeneratedAttribute]
public string get_RefreshToken();
    [CompilerGeneratedAttribute]
public void set_RefreshToken(string value);
    internal bool get_IsMultipleResourceRefreshToken();
    [CompilerGeneratedAttribute]
internal string get_ResourceInResponse();
    [CompilerGeneratedAttribute]
internal void set_ResourceInResponse(string value);
    public static AuthenticationResultEx Deserialize(string serializedObject);
    public string Serialize();
    [CompilerGeneratedAttribute]
internal Exception get_Exception();
    [CompilerGeneratedAttribute]
internal void set_Exception(Exception value);
    [CompilerGeneratedAttribute]
public string get_UserAssertionHash();
    [CompilerGeneratedAttribute]
public void set_UserAssertionHash(string value);
    internal AuthenticationResultEx Clone();
}
[DataContractAttribute]
internal class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.AuthorizationResult : object {
    [CompilerGeneratedAttribute]
private AuthorizationStatus <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Code>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Error>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CloudInstanceHost>k__BackingField;
    public AuthorizationStatus Status { get; private set; }
    [DataMemberAttribute]
public string Code { get; private set; }
    [DataMemberAttribute]
public string Error { get; public set; }
    [DataMemberAttribute]
public string ErrorDescription { get; public set; }
    [DataMemberAttribute]
public string CloudInstanceHost { get; public set; }
    internal AuthorizationResult(AuthorizationStatus status);
    internal AuthorizationResult(AuthorizationStatus status, string returnedUriInput);
    [CompilerGeneratedAttribute]
public AuthorizationStatus get_Status();
    [CompilerGeneratedAttribute]
private void set_Status(AuthorizationStatus value);
    [CompilerGeneratedAttribute]
public string get_Code();
    [CompilerGeneratedAttribute]
private void set_Code(string value);
    [CompilerGeneratedAttribute]
public string get_Error();
    [CompilerGeneratedAttribute]
public void set_Error(string value);
    [CompilerGeneratedAttribute]
public string get_ErrorDescription();
    [CompilerGeneratedAttribute]
public void set_ErrorDescription(string value);
    [CompilerGeneratedAttribute]
public string get_CloudInstanceHost();
    [CompilerGeneratedAttribute]
public void set_CloudInstanceHost(string value);
    public void ParseAuthorizeResponse(string webAuthenticationResult);
}
internal enum Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.AuthorizationStatus : Enum {
    public int value__;
    public static AuthorizationStatus Success;
    public static AuthorizationStatus ErrorHttp;
    public static AuthorizationStatus ProtocolError;
    public static AuthorizationStatus UserCancel;
    public static AuthorizationStatus UnknownError;
}
internal class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Cache.CacheQueryData : object {
    [CompilerGeneratedAttribute]
private string <Authority>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Resource>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientId>k__BackingField;
    [CompilerGeneratedAttribute]
private TokenSubjectType <SubjectType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UniqueId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayableId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssertionHash>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExtendedLifeTimeEnabled>k__BackingField;
    public string Authority { get; public set; }
    public string Resource { get; public set; }
    public string ClientId { get; public set; }
    public TokenSubjectType SubjectType { get; public set; }
    public string UniqueId { get; public set; }
    public string DisplayableId { get; public set; }
    public string AssertionHash { get; public set; }
    public bool ExtendedLifeTimeEnabled { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Authority();
    [CompilerGeneratedAttribute]
public void set_Authority(string value);
    [CompilerGeneratedAttribute]
public string get_Resource();
    [CompilerGeneratedAttribute]
public void set_Resource(string value);
    [CompilerGeneratedAttribute]
public string get_ClientId();
    [CompilerGeneratedAttribute]
public void set_ClientId(string value);
    [CompilerGeneratedAttribute]
public TokenSubjectType get_SubjectType();
    [CompilerGeneratedAttribute]
public void set_SubjectType(TokenSubjectType value);
    [CompilerGeneratedAttribute]
public string get_UniqueId();
    [CompilerGeneratedAttribute]
public void set_UniqueId(string value);
    [CompilerGeneratedAttribute]
public string get_DisplayableId();
    [CompilerGeneratedAttribute]
public void set_DisplayableId(string value);
    [CompilerGeneratedAttribute]
public string get_AssertionHash();
    [CompilerGeneratedAttribute]
public void set_AssertionHash(string value);
    [CompilerGeneratedAttribute]
public bool get_ExtendedLifeTimeEnabled();
    [CompilerGeneratedAttribute]
public void set_ExtendedLifeTimeEnabled(bool value);
}
internal class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Cache.TokenCacheKey : object {
    [CompilerGeneratedAttribute]
private string <Authority>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Resource>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UniqueId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayableId>k__BackingField;
    [CompilerGeneratedAttribute]
private TokenSubjectType <TokenSubjectType>k__BackingField;
    public string Authority { get; }
    public string Resource { get; }
    public string ClientId { get; }
    public string UniqueId { get; }
    public string DisplayableId { get; }
    public TokenSubjectType TokenSubjectType { get; }
    internal TokenCacheKey(string authority, string resource, string clientId, TokenSubjectType tokenSubjectType, UserInfo userInfo);
    internal TokenCacheKey(string authority, string resource, string clientId, TokenSubjectType tokenSubjectType, string uniqueId, string displayableId);
    [CompilerGeneratedAttribute]
public string get_Authority();
    [CompilerGeneratedAttribute]
public string get_Resource();
    [CompilerGeneratedAttribute]
public string get_ClientId();
    [CompilerGeneratedAttribute]
public string get_UniqueId();
    [CompilerGeneratedAttribute]
public string get_DisplayableId();
    [CompilerGeneratedAttribute]
public TokenSubjectType get_TokenSubjectType();
    public virtual bool Equals(object obj);
    public bool Equals(TokenCacheKey other);
    public virtual int GetHashCode();
    internal bool ResourceEquals(string otherResource);
    internal bool ClientIdEquals(string otherClientId);
    internal bool DisplayableIdEquals(string otherDisplayableId);
}
internal static class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Cache.TokenCachePlugin : object {
    public static void BeforeAccess(TokenCacheNotificationArgs args);
    public static void AfterAccess(TokenCacheNotificationArgs args);
}
internal enum Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Cache.TokenSubjectType : Enum {
    public int value__;
    public static TokenSubjectType User;
    public static TokenSubjectType Client;
    public static TokenSubjectType UserPlusClient;
}
internal class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.CallState : object {
    [CompilerGeneratedAttribute]
private Guid <CorrelationId>k__BackingField;
    [CompilerGeneratedAttribute]
private Logger <Logger>k__BackingField;
    public Guid CorrelationId { get; public set; }
    public Logger Logger { get; internal set; }
    public static CallState Default { get; }
    public CallState(Guid correlationId);
    [CompilerGeneratedAttribute]
public Guid get_CorrelationId();
    [CompilerGeneratedAttribute]
public void set_CorrelationId(Guid value);
    [CompilerGeneratedAttribute]
public Logger get_Logger();
    [CompilerGeneratedAttribute]
internal void set_Logger(Logger value);
    public static CallState get_Default();
}
internal class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.ClientCreds.ClientKey : object {
    [CompilerGeneratedAttribute]
private ClientCredential <Credential>k__BackingField;
    [CompilerGeneratedAttribute]
private IClientAssertionCertificate <Certificate>k__BackingField;
    [CompilerGeneratedAttribute]
private ClientAssertion <Assertion>k__BackingField;
    [CompilerGeneratedAttribute]
private Authenticator <Authenticator>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasCredential>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SendX5c>k__BackingField;
    public ClientCredential Credential { get; private set; }
    public IClientAssertionCertificate Certificate { get; private set; }
    public ClientAssertion Assertion { get; private set; }
    public Authenticator Authenticator { get; private set; }
    public string ClientId { get; private set; }
    public bool HasCredential { get; private set; }
    public bool SendX5c { get; public set; }
    public ClientKey(string clientId);
    public ClientKey(ClientCredential clientCredential);
    public ClientKey(IClientAssertionCertificate clientCertificate, Authenticator authenticator);
    public ClientKey(ClientAssertion clientAssertion);
    [CompilerGeneratedAttribute]
public ClientCredential get_Credential();
    [CompilerGeneratedAttribute]
private void set_Credential(ClientCredential value);
    [CompilerGeneratedAttribute]
public IClientAssertionCertificate get_Certificate();
    [CompilerGeneratedAttribute]
private void set_Certificate(IClientAssertionCertificate value);
    [CompilerGeneratedAttribute]
public ClientAssertion get_Assertion();
    [CompilerGeneratedAttribute]
private void set_Assertion(ClientAssertion value);
    [CompilerGeneratedAttribute]
public Authenticator get_Authenticator();
    [CompilerGeneratedAttribute]
private void set_Authenticator(Authenticator value);
    [CompilerGeneratedAttribute]
public string get_ClientId();
    [CompilerGeneratedAttribute]
private void set_ClientId(string value);
    [CompilerGeneratedAttribute]
public bool get_HasCredential();
    [CompilerGeneratedAttribute]
private void set_HasCredential(bool value);
    [CompilerGeneratedAttribute]
public bool get_SendX5c();
    [CompilerGeneratedAttribute]
public void set_SendX5c(bool value);
    public void AddToParameters(IDictionary`2<string, string> parameters);
}
internal class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.ClientCreds.JsonWebToken : object {
    private static int MaxTokenLength;
    private JWTPayload payload;
    public JsonWebToken(IClientAssertionCertificate certificate, string audience);
    public ClientAssertion Sign(IClientAssertionCertificate credential, bool sendX5C);
    private static string EncodeSegment(string segment);
    private static string UrlEncodeSegment(Byte[] segment);
    private static string EncodeHeaderToJson(IClientAssertionCertificate credential, bool sendX5C);
    private static long ConvertToTimeT(DateTime time);
    private string Encode(IClientAssertionCertificate credential, bool sendX5C);
}
internal static class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.ClientCreds.JsonWebTokenConstants : object {
    public static UInt32 JwtToAadLifetimeInSeconds;
    public static string HeaderType;
}
internal static class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Constant : object {
    public static string MsAppScheme;
    public static Uri SsoPlaceHolderUri;
    private static Constant();
}
internal class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.DictionaryRequestParameters : Dictionary`2<string, string> {
    [CompilerGeneratedAttribute]
private string <ExtraQueryParameter>k__BackingField;
    public string ExtraQueryParameter { get; public set; }
    public DictionaryRequestParameters(string resource, ClientKey clientKey);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
public string get_ExtraQueryParameter();
    [CompilerGeneratedAttribute]
public void set_ExtraQueryParameter(string value);
}
internal class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Flows.AcquireDeviceCodeHandler : object {
    private Authenticator authenticator;
    private ClientKey clientKey;
    private string resource;
    private CallState callState;
    private string extraQueryParameters;
    public AcquireDeviceCodeHandler(Authenticator authenticator, string resource, string clientId, string extraQueryParameters);
    private string CreateDeviceCodeRequestUriString();
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Flows.AcquireDeviceCodeHandler/<RunHandlerAsync>d__7")]
internal Task`1<DeviceCodeResult> RunHandlerAsync();
    private void ValidateAuthorityType();
}
internal class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Flows.AcquireTokenByAuthorizationCodeHandler : AcquireTokenHandlerBase {
    private string authorizationCode;
    private Uri redirectUri;
    public AcquireTokenByAuthorizationCodeHandler(RequestData requestData, string authorizationCode, Uri redirectUri);
    protected virtual void AddAditionalRequestParameters(DictionaryRequestParameters requestParameters);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Flows.AcquireTokenByAuthorizationCodeHandler/<PostTokenRequestAsync>d__4")]
protected virtual Task PostTokenRequestAsync(AuthenticationResultEx resultEx);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(AuthenticationResultEx resultEx);
}
internal class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Flows.AcquireTokenByDeviceCodeHandler : AcquireTokenHandlerBase {
    private DeviceCodeResult deviceCodeResult;
    public AcquireTokenByDeviceCodeHandler(RequestData requestData, DeviceCodeResult deviceCodeResult);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Flows.AcquireTokenByDeviceCodeHandler/<SendTokenRequestAsync>d__2")]
protected virtual Task`1<AuthenticationResultEx> SendTokenRequestAsync();
    protected virtual void AddAditionalRequestParameters(DictionaryRequestParameters requestParameters);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<AuthenticationResultEx> <>n__0();
}
internal class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Flows.AcquireTokenForClientHandler : AcquireTokenHandlerBase {
    public AcquireTokenForClientHandler(RequestData requestData);
    protected virtual void AddAditionalRequestParameters(DictionaryRequestParameters requestParameters);
}
internal abstract class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Flows.AcquireTokenHandlerBase : object {
    protected static string NullResource;
    protected static Task CompletedTask;
    private TokenCache tokenCache;
    internal IDictionary`2<string, string> brokerParameters;
    protected CacheQueryData CacheQueryData;
    protected BrokerHelper brokerHelper;
    private AdalHttpClient client;
    protected PlatformInformation platformInformation;
    [CompilerGeneratedAttribute]
private CallState <CallState>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportADFS>k__BackingField;
    [CompilerGeneratedAttribute]
private Authenticator <Authenticator>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Resource>k__BackingField;
    [CompilerGeneratedAttribute]
private ClientKey <ClientKey>k__BackingField;
    [CompilerGeneratedAttribute]
private AuthenticationResultEx <ResultEx>k__BackingField;
    [CompilerGeneratedAttribute]
private TokenSubjectType <TokenSubjectType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UniqueId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayableId>k__BackingField;
    [CompilerGeneratedAttribute]
private UserIdentifierType <UserIdentifierType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LoadFromCache>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StoreToCache>k__BackingField;
    internal CallState CallState { get; internal set; }
    protected bool SupportADFS { get; protected set; }
    protected Authenticator Authenticator { get; protected set; }
    protected string Resource { get; protected set; }
    protected ClientKey ClientKey { get; private set; }
    protected AuthenticationResultEx ResultEx { get; protected set; }
    protected TokenSubjectType TokenSubjectType { get; private set; }
    protected string UniqueId { get; protected set; }
    protected string DisplayableId { get; protected set; }
    protected UserIdentifierType UserIdentifierType { get; protected set; }
    protected bool LoadFromCache { get; protected set; }
    protected bool StoreToCache { get; protected set; }
    protected AcquireTokenHandlerBase(RequestData requestData);
    private static AcquireTokenHandlerBase();
    [CompilerGeneratedAttribute]
internal CallState get_CallState();
    [CompilerGeneratedAttribute]
internal void set_CallState(CallState value);
    [CompilerGeneratedAttribute]
protected bool get_SupportADFS();
    [CompilerGeneratedAttribute]
protected void set_SupportADFS(bool value);
    [CompilerGeneratedAttribute]
protected Authenticator get_Authenticator();
    [CompilerGeneratedAttribute]
protected void set_Authenticator(Authenticator value);
    [CompilerGeneratedAttribute]
protected string get_Resource();
    [CompilerGeneratedAttribute]
protected void set_Resource(string value);
    [CompilerGeneratedAttribute]
protected ClientKey get_ClientKey();
    [CompilerGeneratedAttribute]
private void set_ClientKey(ClientKey value);
    [CompilerGeneratedAttribute]
protected AuthenticationResultEx get_ResultEx();
    [CompilerGeneratedAttribute]
protected void set_ResultEx(AuthenticationResultEx value);
    [CompilerGeneratedAttribute]
protected TokenSubjectType get_TokenSubjectType();
    [CompilerGeneratedAttribute]
private void set_TokenSubjectType(TokenSubjectType value);
    [CompilerGeneratedAttribute]
protected string get_UniqueId();
    [CompilerGeneratedAttribute]
protected void set_UniqueId(string value);
    [CompilerGeneratedAttribute]
protected string get_DisplayableId();
    [CompilerGeneratedAttribute]
protected void set_DisplayableId(string value);
    [CompilerGeneratedAttribute]
protected UserIdentifierType get_UserIdentifierType();
    [CompilerGeneratedAttribute]
protected void set_UserIdentifierType(UserIdentifierType value);
    [CompilerGeneratedAttribute]
protected bool get_LoadFromCache();
    [CompilerGeneratedAttribute]
protected void set_LoadFromCache(bool value);
    [CompilerGeneratedAttribute]
protected bool get_StoreToCache();
    [CompilerGeneratedAttribute]
protected void set_StoreToCache(bool value);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Flows.AcquireTokenHandlerBase/<RunAsync>d__57")]
public Task`1<AuthenticationResult> RunAsync();
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Flows.AcquireTokenHandlerBase/<StoreResultExToCacheAsync>d__58")]
private Task`1<bool> StoreResultExToCacheAsync(bool notifiedBeforeAccessCache);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Flows.AcquireTokenHandlerBase/<CheckAndAcquireTokenUsingBrokerAsync>d__59")]
private Task CheckAndAcquireTokenUsingBrokerAsync();
    protected virtual void UpdateBrokerParameters(IDictionary`2<string, string> parameters);
    protected virtual bool BrokerInvocationRequired();
    public static CallState CreateCallState(Guid correlationId);
    protected virtual Task PostRunAsync(AuthenticationResult result);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Flows.AcquireTokenHandlerBase/<PreRunAsync>d__64")]
protected virtual Task PreRunAsync();
    protected virtual Task PreTokenRequestAsync();
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Flows.AcquireTokenHandlerBase/<UpdateAuthorityAsync>d__66")]
protected Task UpdateAuthorityAsync(string updatedAuthority);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Flows.AcquireTokenHandlerBase/<PostTokenRequestAsync>d__67")]
protected virtual Task PostTokenRequestAsync(AuthenticationResultEx resultEx);
    protected abstract virtual void AddAditionalRequestParameters(DictionaryRequestParameters requestParameters);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Flows.AcquireTokenHandlerBase/<SendTokenRequestAsync>d__69")]
protected virtual Task`1<AuthenticationResultEx> SendTokenRequestAsync();
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Flows.AcquireTokenHandlerBase/<SendTokenRequestByRefreshTokenAsync>d__70")]
protected Task`1<AuthenticationResultEx> SendTokenRequestByRefreshTokenAsync(string refreshToken);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Flows.AcquireTokenHandlerBase/<RefreshAccessTokenAsync>d__71")]
private Task`1<AuthenticationResultEx> RefreshAccessTokenAsync(AuthenticationResultEx result);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Flows.AcquireTokenHandlerBase/<SendHttpMessageAsync>d__72")]
private Task`1<AuthenticationResultEx> SendHttpMessageAsync(IRequestParameters requestParameters);
    private void NotifyBeforeAccessCache();
    private void NotifyAfterAccessCache();
    private void LogReturnedToken(AuthenticationResult result);
    protected void ValidateAuthorityType();
}
internal class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Flows.AcquireTokenInteractiveHandler : AcquireTokenHandlerBase {
    internal AuthorizationResult authorizationResult;
    private Uri redirectUri;
    private string redirectUriRequestParameter;
    private IPlatformParameters authorizationParameters;
    private string extraQueryParameters;
    private IWebUI webUi;
    private UserIdentifier userId;
    private string claims;
    public AcquireTokenInteractiveHandler(RequestData requestData, Uri redirectUri, IPlatformParameters parameters, UserIdentifier userId, string extraQueryParameters, IWebUI webUI, string claims);
    private static string ReplaceHost(string original, string newHost);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Flows.AcquireTokenInteractiveHandler/<PreTokenRequestAsync>d__10")]
protected virtual Task PreTokenRequestAsync();
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Flows.AcquireTokenInteractiveHandler/<AcquireAuthorizationAsync>d__11")]
internal Task AcquireAuthorizationAsync();
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Flows.AcquireTokenInteractiveHandler/<CreateAuthorizationUriAsync>d__12")]
internal Task`1<Uri> CreateAuthorizationUriAsync(Guid correlationId);
    protected virtual void AddAditionalRequestParameters(DictionaryRequestParameters requestParameters);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Flows.AcquireTokenInteractiveHandler/<PostTokenRequestAsync>d__14")]
protected virtual Task PostTokenRequestAsync(AuthenticationResultEx resultEx);
    private Uri CreateAuthorizationUri();
    private DictionaryRequestParameters CreateAuthorizationRequest(string loginHint);
    private void VerifyAuthorizationResult();
    protected virtual void UpdateBrokerParameters(IDictionary`2<string, string> parameters);
    protected virtual bool BrokerInvocationRequired();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__1(AuthenticationResultEx resultEx);
}
internal class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Flows.AcquireTokenNonInteractiveHandler : AcquireTokenHandlerBase {
    private UserCredential userCredential;
    private UserAssertion userAssertion;
    public AcquireTokenNonInteractiveHandler(RequestData requestData, UserCredential userCredential);
    public AcquireTokenNonInteractiveHandler(RequestData requestData, UserAssertion userAssertion);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Flows.AcquireTokenNonInteractiveHandler/<PreRunAsync>d__4")]
protected virtual Task PreRunAsync();
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Flows.AcquireTokenNonInteractiveHandler/<PreTokenRequestAsync>d__5")]
protected virtual Task PreTokenRequestAsync();
    protected virtual void AddAditionalRequestParameters(DictionaryRequestParameters requestParameters);
    private bool PerformUserRealmDiscovery();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__1();
}
internal class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Flows.AcquireTokenOnBehalfHandler : AcquireTokenHandlerBase {
    private UserAssertion userAssertion;
    public AcquireTokenOnBehalfHandler(RequestData requestData, UserAssertion userAssertion);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Flows.AcquireTokenOnBehalfHandler/<SendTokenRequestAsync>d__2")]
protected virtual Task`1<AuthenticationResultEx> SendTokenRequestAsync();
    protected virtual void AddAditionalRequestParameters(DictionaryRequestParameters requestParameters);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<AuthenticationResultEx> <>n__0();
}
internal class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Flows.AcquireTokenSilentHandler : AcquireTokenHandlerBase {
    public AcquireTokenSilentHandler(RequestData requestData, UserIdentifier userId, IPlatformParameters parameters);
    protected virtual Task`1<AuthenticationResultEx> SendTokenRequestAsync();
    protected virtual void AddAditionalRequestParameters(DictionaryRequestParameters requestParameters);
}
internal static class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Flows.BrokerParameter : object {
    public static string Authority;
    public static string Resource;
    public static string ClientId;
    public static string CorrelationId;
    public static string ClientVersion;
    public static string Force;
    public static string Username;
    public static string UsernameType;
    public static string RedirectUri;
    public static string ExtraQp;
    public static string Claims;
    public static string SilentBrokerFlow;
    public static string BrokerInstallUrl;
}
internal static class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Helpers.AdalIdHelper : object {
    private static Regex AdalVersionRegex;
    internal static string VersionNotDetermined;
    private static AdalIdHelper();
    public static IDictionary`2<string, string> GetAdalIdParameters();
    public static string GetAdalVersion();
    public static string GetAssemblyFileVersion();
    public static string GetClientVersion();
    public static string GetAssemblyInformationalVersion();
}
internal static class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Helpers.AdalIdParameter : object {
    public static string Product;
    public static string Version;
    public static string CpuPlatform;
    public static string OS;
    public static string DeviceModel;
}
internal static class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Helpers.Base64UrlEncoder : object {
    private static char Base64PadCharacter;
    private static char Base64Character62;
    private static char Base64Character63;
    private static char Base64UrlCharacter62;
    private static char Base64UrlCharacter63;
    private static Encoding TextEncoding;
    private static string DoubleBase64PadCharacter;
    private static Base64UrlEncoder();
    public static string Encode(string arg);
    public static Byte[] DecodeBytes(string arg);
    internal static string Encode(Byte[] arg);
}
[ExtensionAttribute]
internal static class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Helpers.EncodingHelper : object {
    public static string UrlEncode(string message);
    public static string UrlDecode(string message);
    public static void AddKeyValueString(StringBuilder messageBuilder, string key, string value);
    [ExtensionAttribute]
public static string ToQueryParameter(IDictionary`2<string, string> input);
    public static Dictionary`2<string, string> ParseKeyValueList(string input, char delimiter, bool urlDecode, bool lowercaseKeys, CallState callState);
    public static Dictionary`2<string, string> ParseKeyValueListStrict(string input, char delimiter, bool urlDecode, bool lowercaseKeys, CallState callState);
    private static Dictionary`2<string, string> ParseKeyValueList(string input, char delimiter, bool urlDecode, bool lowercaseKeys, CallState callState, bool strict);
    public static Dictionary`2<string, string> ParseKeyValueList(string input, char delimiter, bool urlDecode, CallState callState);
    [ExtensionAttribute]
public static Byte[] ToByteArray(string stringInput);
    [ExtensionAttribute]
public static Byte[] ToByteArray(StringBuilder stringBuilder);
    [ExtensionAttribute]
public static void SecureClear(StringBuilder stringBuilder);
    [ExtensionAttribute]
public static void SecureClear(Byte[] bytes);
    [ExtensionAttribute]
public static void SecureClear(Char[] chars);
    public static Stream GenerateStreamFromString(string s);
    public static T DeserializeResponse(string response);
    internal static string Base64Encode(string input);
    internal static string Base64Decode(string encodedString);
    internal static Char[] UrlEncode(Char[] message);
    internal static List`1<string> SplitWithQuotes(string input, char delimiter);
    internal static void AddKeyValueString(StringBuilder messageBuilder, string key, Char[] value);
    internal static string GetString(Byte[] bytes);
}
internal static class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Helpers.JsonHelper : object {
    internal static string EncodeToJson(T toEncode);
    internal static T DecodeFromJson(string json);
}
internal class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Http.AdalHttpClient : object {
    private static string DeviceAuthHeaderName;
    private static string DeviceAuthHeaderValue;
    private static string WwwAuthenticateHeader;
    private static string PKeyAuthName;
    private static int DelayTimePeriodMilliSeconds;
    private CallState _callState;
    internal bool Resiliency;
    internal bool RetryOnce;
    [CompilerGeneratedAttribute]
private string <RequestUri>k__BackingField;
    [CompilerGeneratedAttribute]
private IHttpClient <Client>k__BackingField;
    [CompilerGeneratedAttribute]
private CallState <CallState>k__BackingField;
    internal string RequestUri { get; internal set; }
    public IHttpClient Client { get; private set; }
    public CallState CallState { get; private set; }
    public AdalHttpClient(string uri, CallState callState);
    [CompilerGeneratedAttribute]
internal string get_RequestUri();
    [CompilerGeneratedAttribute]
internal void set_RequestUri(string value);
    [CompilerGeneratedAttribute]
public IHttpClient get_Client();
    [CompilerGeneratedAttribute]
private void set_Client(IHttpClient value);
    [CompilerGeneratedAttribute]
public CallState get_CallState();
    [CompilerGeneratedAttribute]
private void set_CallState(CallState value);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Http.AdalHttpClient/<GetResponseAsync>d__21`1")]
public Task`1<T> GetResponseAsync();
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Http.AdalHttpClient/<GetResponseAsync>d__22`1")]
private Task`1<T> GetResponseAsync(bool respondToDeviceAuthChallenge);
    private bool IsDeviceAuthChallenge(IHttpWebResponse response, bool respondToDeviceAuthChallenge);
    private IDictionary`2<string, string> ParseChallengeData(IHttpWebResponse response);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Http.AdalHttpClient/<HandleDeviceAuthChallengeAsync>d__25`1")]
private Task`1<T> HandleDeviceAuthChallengeAsync(IHttpWebResponse response);
    private static string CheckForExtraQueryParameter(string url);
}
internal class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Http.HttpClientFactory : object {
    public sealed virtual IHttpClient Create(string uri, CallState callState);
}
internal class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Http.HttpClientWrapper : object {
    private string uri;
    private int _timeoutInMilliSeconds;
    private long _maxResponseSizeInBytes;
    [CompilerGeneratedAttribute]
private CallState <CallState>k__BackingField;
    [CompilerGeneratedAttribute]
private IRequestParameters <BodyParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Accept>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseDefaultCredentials>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Headers>k__BackingField;
    protected CallState CallState { get; protected set; }
    public IRequestParameters BodyParameters { get; public set; }
    public string Accept { get; public set; }
    public string ContentType { get; public set; }
    public bool UseDefaultCredentials { get; public set; }
    public Dictionary`2<string, string> Headers { get; private set; }
    public int TimeoutInMilliSeconds { get; public set; }
    public HttpClientWrapper(string uri, CallState callState);
    [CompilerGeneratedAttribute]
protected CallState get_CallState();
    [CompilerGeneratedAttribute]
protected void set_CallState(CallState value);
    [CompilerGeneratedAttribute]
public sealed virtual IRequestParameters get_BodyParameters();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BodyParameters(IRequestParameters value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Accept();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Accept(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ContentType();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ContentType(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_UseDefaultCredentials();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UseDefaultCredentials(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, string> get_Headers();
    [CompilerGeneratedAttribute]
private void set_Headers(Dictionary`2<string, string> value);
    public void set_TimeoutInMilliSeconds(int value);
    public int get_TimeoutInMilliSeconds();
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Http.HttpClientWrapper/<GetResponseAsync>d__31")]
public sealed virtual Task`1<IHttpWebResponse> GetResponseAsync();
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Http.HttpClientWrapper/<CreateResponseAsync>d__32")]
public static Task`1<IHttpWebResponse> CreateResponseAsync(HttpResponseMessage response);
    private void VerifyCorrelationIdHeaderInReponse(HttpResponseHeaders headers);
}
internal static class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Http.HttpMessageHandlerFactory : object {
    private static Queue`1<HttpMessageHandler> MockHandlerQueue;
    [CompilerGeneratedAttribute]
private static bool <UseMocks>k__BackingField;
    public static bool UseMocks { get; public set; }
    private static HttpMessageHandlerFactory();
    internal static HttpMessageHandler GetMessageHandler(bool useDefaultCredentials);
    public static void AddMockHandler(HttpMessageHandler mockHandler);
    public static void InitializeMockProvider();
    public static int MockHandlersCount();
    [CompilerGeneratedAttribute]
public static bool get_UseMocks();
    [CompilerGeneratedAttribute]
public static void set_UseMocks(bool value);
}
internal class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Http.HttpWebResponseWrapper : object {
    [CompilerGeneratedAttribute]
private HttpStatusCode <StatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpResponseHeaders <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResponseString>k__BackingField;
    public HttpStatusCode StatusCode { get; private set; }
    public HttpResponseHeaders Headers { get; private set; }
    public string ResponseString { get; private set; }
    public HttpWebResponseWrapper(string responseString, HttpResponseHeaders headers, HttpStatusCode statusCode);
    [CompilerGeneratedAttribute]
public sealed virtual HttpStatusCode get_StatusCode();
    [CompilerGeneratedAttribute]
private void set_StatusCode(HttpStatusCode value);
    [CompilerGeneratedAttribute]
public sealed virtual HttpResponseHeaders get_Headers();
    [CompilerGeneratedAttribute]
private void set_Headers(HttpResponseHeaders value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ResponseString();
    [CompilerGeneratedAttribute]
private void set_ResponseString(string value);
    public sealed virtual void Dispose();
}
internal interface Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Http.IHttpWebResponse {
    public HttpStatusCode StatusCode { get; }
    public HttpResponseHeaders Headers { get; }
    public string ResponseString { get; }
    public abstract virtual HttpStatusCode get_StatusCode();
    public abstract virtual HttpResponseHeaders get_Headers();
    public abstract virtual string get_ResponseString();
}
internal static class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Http.WebProxyProvider : object {
    public static IWebProxy DefaultWebProxy { get; }
    public static IWebProxy get_DefaultWebProxy();
}
internal class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.HttpRequestWrapperException : Exception {
    [CompilerGeneratedAttribute]
private IHttpWebResponse <WebResponse>k__BackingField;
    public IHttpWebResponse WebResponse { get; private set; }
    public HttpRequestWrapperException(IHttpWebResponse webResponse, Exception innerException);
    [CompilerGeneratedAttribute]
public IHttpWebResponse get_WebResponse();
    [CompilerGeneratedAttribute]
private void set_WebResponse(IHttpWebResponse value);
}
internal class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Instance.Authenticator : object {
    private static string TenantlessTenantName;
    private bool updatedFromTemplate;
    private static Regex TenantNameRegex;
    [CompilerGeneratedAttribute]
private string <Authority>k__BackingField;
    [CompilerGeneratedAttribute]
private AuthorityType <AuthorityType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ValidateAuthority>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsTenantless>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AuthorizationUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DeviceCodeUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TokenUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserRealmUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SelfSignedJwtAudience>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <CorrelationId>k__BackingField;
    public string Authority { get; private set; }
    public AuthorityType AuthorityType { get; private set; }
    public bool ValidateAuthority { get; private set; }
    public bool IsTenantless { get; private set; }
    public string AuthorizationUri { get; public set; }
    public string DeviceCodeUri { get; public set; }
    public string TokenUri { get; private set; }
    public string UserRealmUri { get; private set; }
    public string SelfSignedJwtAudience { get; private set; }
    public Guid CorrelationId { get; public set; }
    public Authenticator(string authority, bool validateAuthority);
    private static Authenticator();
    private void Init(string authority, bool validateAuthority);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Instance.Authenticator/<UpdateAuthorityAsync>d__5")]
public Task UpdateAuthorityAsync(string authority, CallState callState);
    [CompilerGeneratedAttribute]
public string get_Authority();
    [CompilerGeneratedAttribute]
private void set_Authority(string value);
    public string GetAuthorityHost();
    [CompilerGeneratedAttribute]
public AuthorityType get_AuthorityType();
    [CompilerGeneratedAttribute]
private void set_AuthorityType(AuthorityType value);
    [CompilerGeneratedAttribute]
public bool get_ValidateAuthority();
    [CompilerGeneratedAttribute]
private void set_ValidateAuthority(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsTenantless();
    [CompilerGeneratedAttribute]
private void set_IsTenantless(bool value);
    [CompilerGeneratedAttribute]
public string get_AuthorizationUri();
    [CompilerGeneratedAttribute]
public void set_AuthorizationUri(string value);
    [CompilerGeneratedAttribute]
public string get_DeviceCodeUri();
    [CompilerGeneratedAttribute]
public void set_DeviceCodeUri(string value);
    [CompilerGeneratedAttribute]
public string get_TokenUri();
    [CompilerGeneratedAttribute]
private void set_TokenUri(string value);
    [CompilerGeneratedAttribute]
public string get_UserRealmUri();
    [CompilerGeneratedAttribute]
private void set_UserRealmUri(string value);
    [CompilerGeneratedAttribute]
public string get_SelfSignedJwtAudience();
    [CompilerGeneratedAttribute]
private void set_SelfSignedJwtAudience(string value);
    [CompilerGeneratedAttribute]
public Guid get_CorrelationId();
    [CompilerGeneratedAttribute]
public void set_CorrelationId(Guid value);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Instance.Authenticator/<UpdateFromTemplateAsync>d__47")]
public Task UpdateFromTemplateAsync(CallState callState);
    public void UpdateTenantId(string tenantId);
    internal static AuthorityType DetectAuthorityType(string authority);
    internal static string EnsureUrlEndsWithForwardSlash(string uri);
    private static bool IsAdfsAuthority(string firstPath);
    private void ReplaceTenantlessTenant(string tenantId);
}
internal enum Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Instance.AuthorityType : Enum {
    public int value__;
    public static AuthorityType AAD;
    public static AuthorityType ADFS;
}
internal interface Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.IRequestParameters {
}
internal interface Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Native.ICngAlgorithm {
    public CngProvider Provider { get; }
    public abstract virtual CngProvider get_Provider();
}
internal interface Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Native.ICngAsymmetricAlgorithm {
    public CngKey Key { get; }
    [SecurityCriticalAttribute]
public abstract virtual CngKey get_Key();
}
[FlagsAttribute]
internal enum Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Native.NCryptAlgorithmOperations : Enum {
    public int value__;
    public static NCryptAlgorithmOperations None;
    public static NCryptAlgorithmOperations Cipher;
    public static NCryptAlgorithmOperations Hash;
    public static NCryptAlgorithmOperations AsymmetricEncryption;
    public static NCryptAlgorithmOperations SecretAgreement;
    public static NCryptAlgorithmOperations Signature;
    public static NCryptAlgorithmOperations RandomNumberGeneration;
}
internal static class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Native.NCryptNative : object {
    [SecurityCriticalAttribute]
private static Byte[] SignHash(SafeNCryptKeyHandle key, Byte[] hash, T& paddingInfo, AsymmetricPaddingMode paddingMode, NCryptHashSigner`1<T> signer);
    [SecurityCriticalAttribute]
internal static Byte[] SignHashPkcs1(SafeNCryptKeyHandle key, Byte[] hash, string hashAlgorithm);
    [SecurityCriticalAttribute]
internal static Byte[] SignHashPss(SafeNCryptKeyHandle key, Byte[] hash, string hashAlgorithm, int saltBytes);
}
internal class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Native.RSACng : RSA {
    private static KeySizes[] s_legalKeySizes;
    private CngKey m_key;
    private AsymmetricPaddingMode m_encryptionPaddingMode;
    private CngAlgorithm m_encryptionHashAlgorithm;
    private AsymmetricPaddingMode m_signaturePaddingMode;
    private CngAlgorithm m_signatureHashAlgorithm;
    private int m_signatureSaltBytes;
    public CngAlgorithm EncryptionHashAlgorithm { get; public set; }
    public AsymmetricPaddingMode EncryptionPaddingMode { get; public set; }
    public CngKey Key { get; private set; }
    private SafeNCryptKeyHandle KeyHandle { get; }
    public string KeyExchangeAlgorithm { get; }
    public CngProvider Provider { get; }
    public string SignatureAlgorithm { get; }
    public CngAlgorithm SignatureHashAlgorithm { get; public set; }
    public AsymmetricPaddingMode SignaturePaddingMode { get; public set; }
    public int SignatureSaltBytes { get; public set; }
    public RSACng(int keySize);
    [SecurityCriticalAttribute]
public RSACng(CngKey key);
    private static RSACng();
    public CngAlgorithm get_EncryptionHashAlgorithm();
    public void set_EncryptionHashAlgorithm(CngAlgorithm value);
    public AsymmetricPaddingMode get_EncryptionPaddingMode();
    public void set_EncryptionPaddingMode(AsymmetricPaddingMode value);
    [SecurityCriticalAttribute]
public sealed virtual CngKey get_Key();
    private void set_Key(CngKey value);
    [SecurityCriticalAttribute]
private SafeNCryptKeyHandle get_KeyHandle();
    public virtual string get_KeyExchangeAlgorithm();
    [SecurityCriticalAttribute]
public sealed virtual CngProvider get_Provider();
    public virtual string get_SignatureAlgorithm();
    public CngAlgorithm get_SignatureHashAlgorithm();
    public void set_SignatureHashAlgorithm(CngAlgorithm value);
    public AsymmetricPaddingMode get_SignaturePaddingMode();
    public void set_SignaturePaddingMode(AsymmetricPaddingMode value);
    public int get_SignatureSaltBytes();
    public void set_SignatureSaltBytes(int value);
    protected virtual void Dispose(bool disposing);
    private static KeyContainerPermission BuildKeyContainerPermission(CngKey key, KeyContainerPermissionFlags flags);
    private HashAlgorithm CreateSignatureHashObject();
    public Byte[] SignData(Byte[] data);
    public Byte[] SignData(Byte[] data, int offset, int count);
    public Byte[] SignHash(Byte[] hash);
    [SecurityCriticalAttribute]
public Byte[] SignHash(Byte[] hash, CngAlgorithm hashAlgorithm);
    public virtual Byte[] DecryptValue(Byte[] rgb);
    public virtual Byte[] EncryptValue(Byte[] rgb);
    public virtual RSAParameters ExportParameters(bool includePrivateParameters);
    public virtual void ImportParameters(RSAParameters parameters);
}
internal abstract class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Native.SafeHandleWithBuffer : SafeHandleZeroOrMinusOneIsInvalid {
    private IntPtr m_dataBuffer;
    public bool IsInvalid { get; }
    internal IntPtr DataBuffer { get; internal set; }
    public virtual bool get_IsInvalid();
    [ReliabilityContractAttribute("3", "2")]
internal IntPtr get_DataBuffer();
    [ReliabilityContractAttribute("3", "2")]
internal void set_DataBuffer(IntPtr value);
    [ReliabilityContractAttribute("3", "2")]
protected virtual bool ReleaseBuffer();
    [ReliabilityContractAttribute("3", "2")]
protected sealed virtual bool ReleaseHandle();
    [ReliabilityContractAttribute("3", "2")]
protected abstract virtual bool ReleaseNativeHandle();
}
internal class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Native.SafeLibraryHandle : SafeHandleZeroOrMinusOneIsInvalid {
    [ReliabilityContractAttribute("3", "2")]
[SuppressUnmanagedCodeSecurityAttribute]
private static bool FreeLibrary(IntPtr hModule);
    protected virtual bool ReleaseHandle();
}
internal class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Native.SafeLocalAllocHandle : SafeHandleZeroOrMinusOneIsInvalid {
    [ReliabilityContractAttribute("3", "2")]
[SuppressUnmanagedCodeSecurityAttribute]
private static IntPtr LocalFree(IntPtr hMem);
    internal T Read(int offset);
    protected virtual bool ReleaseHandle();
}
internal class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Native.SafeNCryptBuffer : SafeHandleZeroOrMinusOneIsInvalid {
    [SecurityCriticalAttribute]
internal T ReadArray(UInt32 index);
    protected virtual bool ReleaseHandle();
}
internal static class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Native.Win32Native : object {
    [SecurityCriticalAttribute]
internal static string FormatMessageFromLibrary(int message, string library);
    internal static string GetNTStatusMessage(int ntstatus);
}
internal static class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Native.X509Native : object {
    [SecurityCriticalAttribute]
internal static SafeCertContextHandle DuplicateCertContext(IntPtr context);
    [SecurityCriticalAttribute]
internal static SafeNCryptKeyHandle AcquireCngPrivateKey(SafeCertContextHandle certificateContext);
}
[DataContractAttribute]
internal class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.OAuth2.DeviceAuthHeader : object {
    [CompilerGeneratedAttribute]
private List`1<string> <X5c>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Alg>k__BackingField;
    [DataMemberAttribute]
public List`1<string> X5c { get; public set; }
    [DataMemberAttribute]
public string Type { get; public set; }
    [DataMemberAttribute]
public string Alg { get; private set; }
    public DeviceAuthHeader(string base64EncodedCertificate);
    [CompilerGeneratedAttribute]
public List`1<string> get_X5c();
    [CompilerGeneratedAttribute]
public void set_X5c(List`1<string> value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [CompilerGeneratedAttribute]
public string get_Alg();
    [CompilerGeneratedAttribute]
private void set_Alg(string value);
}
internal class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.OAuth2.DeviceAuthJWTResponse : object {
    private DeviceAuthHeader header;
    private DeviceAuthPayload payload;
    public DeviceAuthJWTResponse(string audience, string nonce, string base64EncodedCertificate);
    public string GetResponseToSign();
}
[DataContractAttribute]
internal class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.OAuth2.DeviceAuthPayload : object {
    [CompilerGeneratedAttribute]
private long <Iat>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Audience>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Nonce>k__BackingField;
    [DataMemberAttribute]
public long Iat { get; public set; }
    [DataMemberAttribute]
public string Audience { get; public set; }
    [DataMemberAttribute]
public string Nonce { get; private set; }
    public DeviceAuthPayload(string audience, string nonce);
    [CompilerGeneratedAttribute]
public long get_Iat();
    [CompilerGeneratedAttribute]
public void set_Iat(long value);
    [CompilerGeneratedAttribute]
public string get_Audience();
    [CompilerGeneratedAttribute]
public void set_Audience(string value);
    [CompilerGeneratedAttribute]
public string get_Nonce();
    [CompilerGeneratedAttribute]
private void set_Nonce(string value);
}
[DataContractAttribute]
internal class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.OAuth2.DeviceCodeResponse : object {
    [CompilerGeneratedAttribute]
private string <UserCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DeviceCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VerificationUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ExpiresIn>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Interval>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Error>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorDescription>k__BackingField;
    [DataMemberAttribute]
public string UserCode { get; internal set; }
    [DataMemberAttribute]
public string DeviceCode { get; internal set; }
    [DataMemberAttribute]
public string VerificationUrl { get; internal set; }
    [DataMemberAttribute]
public long ExpiresIn { get; internal set; }
    [DataMemberAttribute]
public long Interval { get; internal set; }
    [DataMemberAttribute]
public string Message { get; internal set; }
    [DataMemberAttribute]
public string Error { get; internal set; }
    [DataMemberAttribute]
public string ErrorDescription { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_UserCode();
    [CompilerGeneratedAttribute]
internal void set_UserCode(string value);
    [CompilerGeneratedAttribute]
public string get_DeviceCode();
    [CompilerGeneratedAttribute]
internal void set_DeviceCode(string value);
    [CompilerGeneratedAttribute]
public string get_VerificationUrl();
    [CompilerGeneratedAttribute]
internal void set_VerificationUrl(string value);
    [CompilerGeneratedAttribute]
public long get_ExpiresIn();
    [CompilerGeneratedAttribute]
internal void set_ExpiresIn(long value);
    [CompilerGeneratedAttribute]
public long get_Interval();
    [CompilerGeneratedAttribute]
internal void set_Interval(long value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
internal void set_Message(string value);
    [CompilerGeneratedAttribute]
public string get_Error();
    [CompilerGeneratedAttribute]
internal void set_Error(string value);
    [CompilerGeneratedAttribute]
public string get_ErrorDescription();
    [CompilerGeneratedAttribute]
internal void set_ErrorDescription(string value);
    public DeviceCodeResult GetResult(string clientId, string resource);
}
[DataContractAttribute]
internal class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.OAuth2.IdToken : object {
    [CompilerGeneratedAttribute]
private string <ObjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Subject>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TenantId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UPN>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GivenName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FamilyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Email>k__BackingField;
    [CompilerGeneratedAttribute]
private long <PasswordExpiration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PasswordChangeUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IdentityProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Issuer>k__BackingField;
    [DataMemberAttribute]
public string ObjectId { get; public set; }
    [DataMemberAttribute]
public string Subject { get; public set; }
    [DataMemberAttribute]
public string TenantId { get; public set; }
    [DataMemberAttribute]
public string UPN { get; public set; }
    [DataMemberAttribute]
public string GivenName { get; public set; }
    [DataMemberAttribute]
public string FamilyName { get; public set; }
    [DataMemberAttribute]
public string Email { get; public set; }
    [DataMemberAttribute]
public long PasswordExpiration { get; public set; }
    [DataMemberAttribute]
public string PasswordChangeUrl { get; public set; }
    [DataMemberAttribute]
public string IdentityProvider { get; public set; }
    [DataMemberAttribute]
public string Issuer { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ObjectId();
    [CompilerGeneratedAttribute]
public void set_ObjectId(string value);
    [CompilerGeneratedAttribute]
public string get_Subject();
    [CompilerGeneratedAttribute]
public void set_Subject(string value);
    [CompilerGeneratedAttribute]
public string get_TenantId();
    [CompilerGeneratedAttribute]
public void set_TenantId(string value);
    [CompilerGeneratedAttribute]
public string get_UPN();
    [CompilerGeneratedAttribute]
public void set_UPN(string value);
    [CompilerGeneratedAttribute]
public string get_GivenName();
    [CompilerGeneratedAttribute]
public void set_GivenName(string value);
    [CompilerGeneratedAttribute]
public string get_FamilyName();
    [CompilerGeneratedAttribute]
public void set_FamilyName(string value);
    [CompilerGeneratedAttribute]
public string get_Email();
    [CompilerGeneratedAttribute]
public void set_Email(string value);
    [CompilerGeneratedAttribute]
public long get_PasswordExpiration();
    [CompilerGeneratedAttribute]
public void set_PasswordExpiration(long value);
    [CompilerGeneratedAttribute]
public string get_PasswordChangeUrl();
    [CompilerGeneratedAttribute]
public void set_PasswordChangeUrl(string value);
    [CompilerGeneratedAttribute]
public string get_IdentityProvider();
    [CompilerGeneratedAttribute]
public void set_IdentityProvider(string value);
    [CompilerGeneratedAttribute]
public string get_Issuer();
    [CompilerGeneratedAttribute]
public void set_Issuer(string value);
    public static IdToken Parse(string idToken);
}
internal static class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.OAuth2.IdTokenClaim : object {
    public static string ObjectId;
    public static string Subject;
    public static string TenantId;
    public static string UPN;
    public static string Email;
    public static string GivenName;
    public static string FamilyName;
    public static string IdentityProvider;
    public static string Issuer;
    public static string PasswordExpiration;
    public static string PasswordChangeUrl;
}
internal static class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.OAuth2.OAuthAssertionType : object {
    public static string JwtBearer;
}
internal static class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.OAuth2.OAuthError : object {
    public static string LoginRequired;
}
internal static class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.OAuth2.OAuthGrantType : object {
    public static string AuthorizationCode;
    public static string RefreshToken;
    public static string ClientCredentials;
    public static string Saml11Bearer;
    public static string Saml20Bearer;
    public static string JwtBearer;
    public static string Password;
    public static string DeviceCode;
}
internal static class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.OAuth2.OAuthHeader : object {
    public static string CorrelationId;
    public static string RequestCorrelationIdInResponse;
}
internal static class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.OAuth2.OAuthParameter : object {
    public static string ResponseType;
    public static string GrantType;
    public static string ClientId;
    public static string ClientSecret;
    public static string ClientAssertion;
    public static string ClientAssertionType;
    public static string RefreshToken;
    public static string RedirectUri;
    public static string Resource;
    public static string Code;
    public static string Scope;
    public static string Assertion;
    public static string RequestedTokenUse;
    public static string Username;
    public static string Password;
    public static string HasChrome;
    public static string LoginHint;
    public static string CorrelationId;
    public static string Prompt;
}
internal static class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.OAuth2.OAuthRequestedTokenUse : object {
    public static string OnBehalfOf;
}
internal static class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.OAuth2.OAuthResponseType : object {
    public static string Code;
}
internal static class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.OAuth2.OAuthValue : object {
    public static string ScopeOpenId;
}
internal static class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.OAuth2.PromptValue : object {
    public static string Login;
    public static string RefreshSession;
    public static string SelectAccount;
    public static string AttemptNone;
}
[DataContractAttribute]
internal class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.OAuth2.TokenResponse : object {
    private static string CorrelationIdClaim;
    [CompilerGeneratedAttribute]
private string <TokenType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AccessToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RefreshToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Resource>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IdTokenString>k__BackingField;
    [CompilerGeneratedAttribute]
private long <CreatedOn>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ExpiresOn>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ExpiresIn>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ExtendedExpiresIn>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Error>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ErrorCodes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CorrelationId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Claims>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Authority>k__BackingField;
    [DataMemberAttribute]
public string TokenType { get; public set; }
    [DataMemberAttribute]
public string AccessToken { get; public set; }
    [DataMemberAttribute]
public string RefreshToken { get; public set; }
    [DataMemberAttribute]
public string Resource { get; public set; }
    [DataMemberAttribute]
public string IdTokenString { get; public set; }
    [DataMemberAttribute]
public long CreatedOn { get; public set; }
    [DataMemberAttribute]
public long ExpiresOn { get; public set; }
    [DataMemberAttribute]
public long ExpiresIn { get; public set; }
    [DataMemberAttribute]
public long ExtendedExpiresIn { get; public set; }
    [DataMemberAttribute]
public string Error { get; public set; }
    [DataMemberAttribute]
public string ErrorDescription { get; public set; }
    [DataMemberAttribute]
public String[] ErrorCodes { get; public set; }
    [DataMemberAttribute]
public string CorrelationId { get; public set; }
    [DataMemberAttribute]
public string Claims { get; public set; }
    public string Authority { get; public set; }
    [CompilerGeneratedAttribute]
public string get_TokenType();
    [CompilerGeneratedAttribute]
public void set_TokenType(string value);
    [CompilerGeneratedAttribute]
public string get_AccessToken();
    [CompilerGeneratedAttribute]
public void set_AccessToken(string value);
    [CompilerGeneratedAttribute]
public string get_RefreshToken();
    [CompilerGeneratedAttribute]
public void set_RefreshToken(string value);
    [CompilerGeneratedAttribute]
public string get_Resource();
    [CompilerGeneratedAttribute]
public void set_Resource(string value);
    [CompilerGeneratedAttribute]
public string get_IdTokenString();
    [CompilerGeneratedAttribute]
public void set_IdTokenString(string value);
    [CompilerGeneratedAttribute]
public long get_CreatedOn();
    [CompilerGeneratedAttribute]
public void set_CreatedOn(long value);
    [CompilerGeneratedAttribute]
public long get_ExpiresOn();
    [CompilerGeneratedAttribute]
public void set_ExpiresOn(long value);
    [CompilerGeneratedAttribute]
public long get_ExpiresIn();
    [CompilerGeneratedAttribute]
public void set_ExpiresIn(long value);
    [CompilerGeneratedAttribute]
public long get_ExtendedExpiresIn();
    [CompilerGeneratedAttribute]
public void set_ExtendedExpiresIn(long value);
    [CompilerGeneratedAttribute]
public string get_Error();
    [CompilerGeneratedAttribute]
public void set_Error(string value);
    [CompilerGeneratedAttribute]
public string get_ErrorDescription();
    [CompilerGeneratedAttribute]
public void set_ErrorDescription(string value);
    [CompilerGeneratedAttribute]
public String[] get_ErrorCodes();
    [CompilerGeneratedAttribute]
public void set_ErrorCodes(String[] value);
    [CompilerGeneratedAttribute]
public string get_CorrelationId();
    [CompilerGeneratedAttribute]
public void set_CorrelationId(string value);
    [CompilerGeneratedAttribute]
public string get_Claims();
    [CompilerGeneratedAttribute]
public void set_Claims(string value);
    [CompilerGeneratedAttribute]
public string get_Authority();
    [CompilerGeneratedAttribute]
public void set_Authority(string value);
    internal static TokenResponse CreateFromBrokerResponse(IDictionary`2<string, string> responseDictionary);
    public static TokenResponse CreateFromErrorResponse(IHttpWebResponse webResponse);
    public AuthenticationResultEx GetResult();
    public AuthenticationResultEx GetResult(DateTimeOffset expiresOn, DateTimeOffset extendedExpiresOn);
    private static string ReadStreamContent(Stream stream);
}
internal static class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.OAuth2.TokenResponseClaim : object {
    public static string Code;
    public static string TokenType;
    public static string AccessToken;
    public static string RefreshToken;
    public static string Resource;
    public static string IdToken;
    public static string CreatedOn;
    public static string ExpiresOn;
    public static string ExpiresIn;
    public static string ExtendedExpiresIn;
    public static string Error;
    public static string ErrorDescription;
    public static string ErrorCodes;
    public static string Claims;
    public static string CloudInstanceHost;
    public static string Authority;
}
[DataContractAttribute]
internal class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.OAuth2.UserRealmDiscoveryResponse : object {
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AccountType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FederationProtocol>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FederationMetadataUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FederationActiveAuthUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CloudAudienceUrn>k__BackingField;
    [DataMemberAttribute]
public string Version { get; public set; }
    [DataMemberAttribute]
public string AccountType { get; public set; }
    [DataMemberAttribute]
public string FederationProtocol { get; public set; }
    [DataMemberAttribute]
public string FederationMetadataUrl { get; public set; }
    [DataMemberAttribute]
public string FederationActiveAuthUrl { get; public set; }
    [DataMemberAttribute]
public string CloudAudienceUrn { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public string get_AccountType();
    [CompilerGeneratedAttribute]
public void set_AccountType(string value);
    [CompilerGeneratedAttribute]
public string get_FederationProtocol();
    [CompilerGeneratedAttribute]
public void set_FederationProtocol(string value);
    [CompilerGeneratedAttribute]
public string get_FederationMetadataUrl();
    [CompilerGeneratedAttribute]
public void set_FederationMetadataUrl(string value);
    [CompilerGeneratedAttribute]
public string get_FederationActiveAuthUrl();
    [CompilerGeneratedAttribute]
public void set_FederationActiveAuthUrl(string value);
    [CompilerGeneratedAttribute]
public string get_CloudAudienceUrn();
    [CompilerGeneratedAttribute]
public void set_CloudAudienceUrn(string value);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.OAuth2.UserRealmDiscoveryResponse/<CreateByDiscoveryAsync>d__24")]
internal static Task`1<UserRealmDiscoveryResponse> CreateByDiscoveryAsync(string userRealmUri, string userName, CallState callState);
}
internal class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Platform.BrokerHelper : object {
    [CompilerGeneratedAttribute]
private CallState <CallState>k__BackingField;
    [CompilerGeneratedAttribute]
private IPlatformParameters <PlatformParameters>k__BackingField;
    public CallState CallState { get; public set; }
    public IPlatformParameters PlatformParameters { get; public set; }
    public bool CanInvokeBroker { get; }
    [CompilerGeneratedAttribute]
public CallState get_CallState();
    [CompilerGeneratedAttribute]
public void set_CallState(CallState value);
    [CompilerGeneratedAttribute]
public IPlatformParameters get_PlatformParameters();
    [CompilerGeneratedAttribute]
public void set_PlatformParameters(IPlatformParameters value);
    public bool get_CanInvokeBroker();
    public Task`1<AuthenticationResultEx> AcquireTokenUsingBrokerAsync(IDictionary`2<string, string> brokerPayload);
}
internal class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Platform.CryptographyHelper : object {
    public static string CreateSha256Hash(string input);
    public Byte[] SignWithCertificate(string message, X509Certificate2 certificate);
    private static RSACryptoServiceProvider GetCryptoProviderForSha256(RSACryptoServiceProvider rsaProvider);
    [SecurityCriticalAttribute]
public static CngKey GetCngPrivateKey(X509Certificate2 certificate);
    [SecurityCriticalAttribute]
public static SafeCertContextHandle GetCertificateContext(X509Certificate certificate);
}
internal class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Platform.CustomWebBrowser : WebBrowser {
    private static int S_OK;
    private static int S_FALSE;
    private static int WM_CHAR;
    private ConnectionPointCookie webBrowserEventCookie;
    private CustomWebBrowserEvent webBrowserEvent;
    private static HashSet`1<Shortcut> shortcutBlacklist;
    [CompilerGeneratedAttribute]
private WebBrowserNavigateErrorEventHandler NavigateError;
    private static CustomWebBrowser();
    protected virtual WebBrowserSiteBase CreateWebBrowserSiteBase();
    protected virtual void CreateSink();
    protected virtual void DetachSink();
    protected virtual void OnNavigateError(WebBrowserNavigateErrorEventArgs e);
    [CompilerGeneratedAttribute]
public void add_NavigateError(WebBrowserNavigateErrorEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_NavigateError(WebBrowserNavigateErrorEventHandler value);
}
internal static class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Platform.DeviceAuthHelper : object {
    public static bool CanHandleDeviceAuthChallenge { get; }
    public static bool get_CanHandleDeviceAuthChallenge();
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Platform.DeviceAuthHelper/<CreateDeviceAuthChallengeResponseAsync>d__2")]
public static Task`1<string> CreateDeviceAuthChallengeResponseAsync(IDictionary`2<string, string> challengeData);
    private static X509Certificate2 FindCertificate(IDictionary`2<string, string> challengeData);
    private static X509Certificate2 FindCertificateByCertAuthorities(IDictionary`2<string, string> challengeData, X509Certificate2Collection certCollection);
}
internal interface Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Platform.IHttpClient {
    public IRequestParameters BodyParameters { get; public set; }
    public string Accept { get; public set; }
    public string ContentType { get; public set; }
    public bool UseDefaultCredentials { get; public set; }
    public Dictionary`2<string, string> Headers { get; }
    public abstract virtual IRequestParameters get_BodyParameters();
    public abstract virtual void set_BodyParameters(IRequestParameters value);
    public abstract virtual void set_Accept(string value);
    public abstract virtual string get_Accept();
    public abstract virtual void set_ContentType(string value);
    public abstract virtual string get_ContentType();
    public abstract virtual void set_UseDefaultCredentials(bool value);
    public abstract virtual bool get_UseDefaultCredentials();
    public abstract virtual Dictionary`2<string, string> get_Headers();
    public abstract virtual Task`1<IHttpWebResponse> GetResponseAsync();
}
internal interface Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Platform.IHttpClientFactory {
    public abstract virtual IHttpClient Create(string uri, CallState callState);
}
internal class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Platform.InteractiveWebUI : WebUI {
    protected virtual AuthorizationResult OnAuthenticate();
}
internal interface Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Platform.IWebUI {
    public abstract virtual Task`1<AuthorizationResult> AcquireAuthorizationAsync(Uri authorizationUri, Uri redirectUri, CallState callState);
}
internal interface Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Platform.IWebUIFactory {
    public abstract virtual IWebUI CreateAuthenticationDialog(IPlatformParameters parameters);
}
internal class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Platform.Logger : LoggerBase {
    [CompilerGeneratedAttribute]
private static AdalEventSource <AdalEventSource>k__BackingField;
    internal static AdalEventSource AdalEventSource { get; private set; }
    private static Logger();
    [CompilerGeneratedAttribute]
internal static AdalEventSource get_AdalEventSource();
    [CompilerGeneratedAttribute]
private static void set_AdalEventSource(AdalEventSource value);
    internal virtual void DefaultLog(LogLevel logLevel, string message);
}
internal abstract class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Platform.LoggerBase : object {
    [CompilerGeneratedAttribute]
private string <CorrelationId>k__BackingField;
    internal string CorrelationId { get; internal set; }
    internal abstract virtual void DefaultLog(LogLevel logLevel, string message);
    private void Log(CallState callState, LogLevel logLevel, string message, bool containsPii, string callerFilePath);
    internal static string GetCallerFilename(string callerFilePath);
    [CompilerGeneratedAttribute]
internal string get_CorrelationId();
    [CompilerGeneratedAttribute]
internal void set_CorrelationId(string value);
    internal string FormatLogMessage(CallState callState, string classOrComponent, string message);
    internal void Verbose(CallState callState, string message);
    internal void VerbosePii(CallState callState, string message);
    internal void Information(CallState callState, string message);
    internal void InformationPii(CallState callState, string message);
    internal void Warning(CallState callState, string message);
    internal void WarningPii(CallState callState, string message);
    internal void Error(CallState callState, Exception ex);
    internal void ErrorPii(CallState callState, Exception ex);
    internal void Error(CallState callState, string message);
}
internal class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Platform.NativeWrapper : object {
}
internal class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Platform.NavigateErrorStatus : object {
    public Dictionary`2<int, string> Messages;
}
internal enum Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Platform.NavigateErrorStatusCode : Enum {
    public int value__;
    public static NavigateErrorStatusCode HTTP_STATUS_BAD_REQUEST;
    public static NavigateErrorStatusCode HTTP_STATUS_DENIED;
    public static NavigateErrorStatusCode HTTP_STATUS_PAYMENT_REQ;
    public static NavigateErrorStatusCode HTTP_STATUS_FORBIDDEN;
    public static NavigateErrorStatusCode HTTP_STATUS_NOT_FOUND;
    public static NavigateErrorStatusCode HTTP_STATUS_BAD_METHOD;
    public static NavigateErrorStatusCode HTTP_STATUS_NONE_ACCEPTABLE;
    public static NavigateErrorStatusCode HTTP_STATUS_PROXY_AUTH_REQ;
    public static NavigateErrorStatusCode HTTP_STATUS_REQUEST_TIMEOUT;
    public static NavigateErrorStatusCode HTTP_STATUS_CONFLICT;
    public static NavigateErrorStatusCode HTTP_STATUS_GONE;
    public static NavigateErrorStatusCode HTTP_STATUS_LENGTH_REQUIRED;
    public static NavigateErrorStatusCode HTTP_STATUS_PRECOND_FAILED;
    public static NavigateErrorStatusCode HTTP_STATUS_REQUEST_TOO_LARGE;
    public static NavigateErrorStatusCode HTTP_STATUS_URI_TOO_LONG;
    public static NavigateErrorStatusCode HTTP_STATUS_UNSUPPORTED_MEDIA;
    public static NavigateErrorStatusCode HTTP_STATUS_RETRY_WITH;
    public static NavigateErrorStatusCode HTTP_STATUS_SERVER_ERROR;
    public static NavigateErrorStatusCode HTTP_STATUS_NOT_SUPPORTED;
    public static NavigateErrorStatusCode HTTP_STATUS_BAD_GATEWAY;
    public static NavigateErrorStatusCode HTTP_STATUS_SERVICE_UNAVAIL;
    public static NavigateErrorStatusCode HTTP_STATUS_GATEWAY_TIMEOUT;
    public static NavigateErrorStatusCode HTTP_STATUS_VERSION_NOT_SUP;
    public static NavigateErrorStatusCode INET_E_INVALID_URL;
    public static NavigateErrorStatusCode INET_E_NO_SESSION;
    public static NavigateErrorStatusCode INET_E_CANNOT_CONNECT;
    public static NavigateErrorStatusCode INET_E_RESOURCE_NOT_FOUND;
    public static NavigateErrorStatusCode INET_E_OBJECT_NOT_FOUND;
    public static NavigateErrorStatusCode INET_E_DATA_NOT_AVAILABLE;
    public static NavigateErrorStatusCode INET_E_DOWNLOAD_FAILURE;
    public static NavigateErrorStatusCode INET_E_AUTHENTICATION_REQUIRED;
    public static NavigateErrorStatusCode INET_E_NO_VALID_MEDIA;
    public static NavigateErrorStatusCode INET_E_CONNECTION_TIMEOUT;
    public static NavigateErrorStatusCode INET_E_INVALID_REQUEST;
    public static NavigateErrorStatusCode INET_E_UNKNOWN_PROTOCOL;
    public static NavigateErrorStatusCode INET_E_SECURITY_PROBLEM;
    public static NavigateErrorStatusCode INET_E_CANNOT_LOAD_DATA;
    public static NavigateErrorStatusCode INET_E_CANNOT_INSTANTIATE_OBJECT;
    public static NavigateErrorStatusCode INET_E_REDIRECT_FAILED;
    public static NavigateErrorStatusCode INET_E_REDIRECT_TO_DIR;
    public static NavigateErrorStatusCode INET_E_CANNOT_LOCK_REQUEST;
    public static NavigateErrorStatusCode INET_E_USE_EXTEND_BINDING;
    public static NavigateErrorStatusCode INET_E_TERMINATED_BIND;
    public static NavigateErrorStatusCode INET_E_INVALID_CERTIFICATE;
    public static NavigateErrorStatusCode INET_E_CODE_DOWNLOAD_DECLINED;
    public static NavigateErrorStatusCode INET_E_RESULT_DISPATCHED;
    public static NavigateErrorStatusCode INET_E_CANNOT_REPLACE_SFP_FILE;
    public static NavigateErrorStatusCode INET_E_CODE_INSTALL_BLOCKED_BY_HASH_POLICY;
    public static NavigateErrorStatusCode INET_E_CODE_INSTALL_SUPPRESSED;
}
internal class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Platform.PlatformInformation : PlatformInformationBase {
    public virtual string GetProductName();
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Platform.PlatformInformation/<GetUserPrincipalNameAsync>d__1")]
public virtual Task`1<string> GetUserPrincipalNameAsync();
    public virtual string GetEnvironmentVariable(string variable);
    public virtual string GetProcessorArchitecture();
    public virtual string GetOperatingSystem();
    public virtual string GetDeviceModel();
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Platform.PlatformInformation/<IsUserLocalAsync>d__6")]
public virtual Task`1<bool> IsUserLocalAsync(CallState callState);
    public virtual bool IsDomainJoined();
    public virtual void AddPromptBehaviorQueryParameter(IPlatformParameters parameters, DictionaryRequestParameters authorizationRequestParameters);
    public virtual bool GetCacheLoadPolicy(IPlatformParameters parameters);
}
internal abstract class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Platform.PlatformInformationBase : object {
    public abstract virtual string GetProductName();
    public abstract virtual string GetEnvironmentVariable(string variable);
    public abstract virtual Task`1<string> GetUserPrincipalNameAsync();
    public abstract virtual string GetProcessorArchitecture();
    public abstract virtual string GetOperatingSystem();
    public abstract virtual string GetDeviceModel();
    public virtual string GetAssemblyFileVersionAttribute();
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Platform.PlatformInformationBase/<IsUserLocalAsync>d__7")]
public virtual Task`1<bool> IsUserLocalAsync(CallState callState);
    public virtual bool IsDomainJoined();
    public virtual void AddPromptBehaviorQueryParameter(IPlatformParameters parameters, DictionaryRequestParameters authorizationRequestParameters);
    public virtual bool GetCacheLoadPolicy(IPlatformParameters parameters);
    public virtual Uri ValidateRedirectUri(Uri redirectUri, CallState callState);
    public virtual string GetRedirectUriAsString(Uri redirectUri, CallState callState);
}
[SecurityCriticalAttribute]
internal class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Platform.SafeCertContextHandle : SafeHandleZeroOrMinusOneIsInvalid {
    [ReliabilityContractAttribute("3", "2")]
[SuppressUnmanagedCodeSecurityAttribute]
private static bool CertFreeCertificateContext(IntPtr pCertContext);
    protected virtual bool ReleaseHandle();
}
internal class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Platform.SilentWebUI : WebUI {
    private static int NavigationWaitMiliSecs;
    private static int NavigationOverallTimeout;
    private bool disposed;
    private WindowsFormsSynchronizationContext formsSyncContext;
    private AuthorizationResult result;
    private Exception uiException;
    private ManualResetEvent threadInitializedEvent;
    private SilentWindowsFormsAuthenticationDialog dialog;
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    private void WaitForCompletionOrTimeout(Thread uiThread);
    private Thread StartUIThread();
    protected virtual AuthorizationResult OnAuthenticate();
    protected virtual void Dispose(bool disposing);
    private void Cleanup();
    private void ThrowIfTransferredException();
    private void UIDoneHandler(object sender, SilentWebUIDoneEventArgs e);
    [CompilerGeneratedAttribute]
private void <WaitForCompletionOrTimeout>b__11_0(object state);
    [CompilerGeneratedAttribute]
private void <StartUIThread>b__12_0();
}
internal class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Platform.SilentWebUIDoneEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Exception <TransferedException>k__BackingField;
    public Exception TransferedException { get; private set; }
    public SilentWebUIDoneEventArgs(Exception e);
    [CompilerGeneratedAttribute]
public Exception get_TransferedException();
    [CompilerGeneratedAttribute]
private void set_TransferedException(Exception value);
}
[ComVisibleAttribute("True")]
[EditorBrowsableAttribute("1")]
internal class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Platform.SilentWindowsFormsAuthenticationDialog : WindowsFormsWebAuthenticationDialogBase {
    [CompilerGeneratedAttribute]
private SilentWebUIDoneEventHandler Done;
    private DateTime navigationExpiry;
    private Timer timer;
    private bool doneSignaled;
    [CompilerGeneratedAttribute]
private int <NavigationWaitMiliSecs>k__BackingField;
    public int NavigationWaitMiliSecs { get; public set; }
    public SilentWindowsFormsAuthenticationDialog(object ownerWindow);
    [CompilerGeneratedAttribute]
internal void add_Done(SilentWebUIDoneEventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_Done(SilentWebUIDoneEventHandler value);
    [CompilerGeneratedAttribute]
public int get_NavigationWaitMiliSecs();
    [CompilerGeneratedAttribute]
public void set_NavigationWaitMiliSecs(int value);
    public void CloseBrowser();
    private void SuppressBrowserSubDialogs();
    protected virtual void WebBrowserNavigatingHandler(object sender, WebBrowserNavigatingEventArgs e);
    private static Timer CreateStartedTimer(Action onTickAction, int interval);
    private void SignalDone(Exception exception);
    private void DocumentCompletedHandler(object sender, WebBrowserDocumentCompletedEventArgs args);
    private void OnUserInteractionRequired();
    protected virtual void OnClosingUrl();
    protected virtual void OnNavigationCanceled(int statusCode);
    private bool HasLoginPage();
    protected virtual void Dispose(bool disposing);
    [CompilerGeneratedAttribute]
private void <WebBrowserNavigatingHandler>b__14_0();
}
internal class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Platform.StaTaskScheduler : TaskScheduler {
    private BlockingCollection`1<Task> _tasks;
    private List`1<Thread> _threads;
    public int MaximumConcurrencyLevel { get; }
    public StaTaskScheduler(int numberOfThreads);
    protected virtual void QueueTask(Task task);
    protected virtual IEnumerable`1<Task> GetScheduledTasks();
    protected virtual bool TryExecuteTaskInline(Task task, bool taskWasPreviouslyQueued);
    public virtual int get_MaximumConcurrencyLevel();
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private Thread <.ctor>b__2_0(int i);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_2();
}
internal abstract class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Platform.WebUI : object {
    [CompilerGeneratedAttribute]
private Uri <RequestUri>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <CallbackUri>k__BackingField;
    [CompilerGeneratedAttribute]
private object <OwnerWindow>k__BackingField;
    protected Uri RequestUri { get; private set; }
    protected Uri CallbackUri { get; private set; }
    public object OwnerWindow { get; public set; }
    [CompilerGeneratedAttribute]
protected Uri get_RequestUri();
    [CompilerGeneratedAttribute]
private void set_RequestUri(Uri value);
    [CompilerGeneratedAttribute]
protected Uri get_CallbackUri();
    [CompilerGeneratedAttribute]
private void set_CallbackUri(Uri value);
    [CompilerGeneratedAttribute]
public object get_OwnerWindow();
    [CompilerGeneratedAttribute]
public void set_OwnerWindow(object value);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Platform.WebUI/<AcquireAuthorizationAsync>d__12")]
public sealed virtual Task`1<AuthorizationResult> AcquireAuthorizationAsync(Uri authorizationUri, Uri redirectUri, CallState callState);
    internal AuthorizationResult Authenticate(Uri requestUri, Uri callbackUri);
    private static void ThrowOnNetworkDown();
    protected abstract virtual AuthorizationResult OnAuthenticate();
}
internal class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Platform.WebUIFactory : object {
    public sealed virtual IWebUI CreateAuthenticationDialog(IPlatformParameters inputParameters);
}
internal static class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Platform.WebUIFactoryProvider : object {
    [CompilerGeneratedAttribute]
private static IWebUIFactory <WebUIFactory>k__BackingField;
    public static IWebUIFactory WebUIFactory { get; public set; }
    private static WebUIFactoryProvider();
    [CompilerGeneratedAttribute]
public static IWebUIFactory get_WebUIFactory();
    [CompilerGeneratedAttribute]
public static void set_WebUIFactory(IWebUIFactory value);
}
internal class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.RequestData : object {
    [CompilerGeneratedAttribute]
private Authenticator <Authenticator>k__BackingField;
    [CompilerGeneratedAttribute]
private TokenCache <TokenCache>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Resource>k__BackingField;
    [CompilerGeneratedAttribute]
private ClientKey <ClientKey>k__BackingField;
    [CompilerGeneratedAttribute]
private TokenSubjectType <SubjectType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExtendedLifeTimeEnabled>k__BackingField;
    public Authenticator Authenticator { get; public set; }
    public TokenCache TokenCache { get; public set; }
    public string Resource { get; public set; }
    public ClientKey ClientKey { get; public set; }
    public TokenSubjectType SubjectType { get; public set; }
    public bool ExtendedLifeTimeEnabled { get; public set; }
    [CompilerGeneratedAttribute]
public Authenticator get_Authenticator();
    [CompilerGeneratedAttribute]
public void set_Authenticator(Authenticator value);
    [CompilerGeneratedAttribute]
public TokenCache get_TokenCache();
    [CompilerGeneratedAttribute]
public void set_TokenCache(TokenCache value);
    [CompilerGeneratedAttribute]
public string get_Resource();
    [CompilerGeneratedAttribute]
public void set_Resource(string value);
    [CompilerGeneratedAttribute]
public ClientKey get_ClientKey();
    [CompilerGeneratedAttribute]
public void set_ClientKey(ClientKey value);
    [CompilerGeneratedAttribute]
public TokenSubjectType get_SubjectType();
    [CompilerGeneratedAttribute]
public void set_SubjectType(TokenSubjectType value);
    [CompilerGeneratedAttribute]
public bool get_ExtendedLifeTimeEnabled();
    [CompilerGeneratedAttribute]
public void set_ExtendedLifeTimeEnabled(bool value);
}
internal class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.StringRequestParameters : object {
    private StringBuilder parameter;
    public StringRequestParameters(StringBuilder stringBuilderParameter);
    public virtual string ToString();
}
public class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.WebBrowserNavigateErrorEventArgs : CancelEventArgs {
    private string targetFrameName;
    private string url;
    private int statusCode;
    private object webBrowserActiveXInstance;
    public string TargetFrameName { get; }
    public string Url { get; }
    public int StatusCode { get; }
    public object WebBrowserActiveXInstance { get; }
    public WebBrowserNavigateErrorEventArgs(string url, string targetFrameName, int statusCode, object webBrowserActiveXInstance);
    public string get_TargetFrameName();
    public string get_Url();
    public int get_StatusCode();
    public object get_WebBrowserActiveXInstance();
}
public class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.WebBrowserNavigateErrorEventHandler : MulticastDelegate {
    public WebBrowserNavigateErrorEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, WebBrowserNavigateErrorEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, WebBrowserNavigateErrorEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ComVisibleAttribute("True")]
[EditorBrowsableAttribute("1")]
public class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.WindowsFormsWebAuthenticationDialog : WindowsFormsWebAuthenticationDialogBase {
    private bool zoomed;
    private int statusCode;
    public WindowsFormsWebAuthenticationDialog(object ownerWindow);
    protected virtual void OnAuthenticate();
    public void ShowBrowser();
    protected virtual void WebBrowserNavigatingHandler(object sender, WebBrowserNavigatingEventArgs e);
    protected virtual void OnClosingUrl();
    protected virtual void OnNavigationCanceled(int inputStatusCode);
    private void SetBrowserZoom();
    private void SetBrowserControlZoom(int zoomPercent);
    private void FormShownHandler(object sender, EventArgs e);
    private void WebBrowserDocumentTitleChangedHandler(object sender, EventArgs e);
}
[ComVisibleAttribute("True")]
[EditorBrowsableAttribute("1")]
public abstract class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.WindowsFormsWebAuthenticationDialogBase : Form {
    private static NavigateErrorStatus NavigateErrorStatus;
    private static HashSet`1<string> WhiteListedSchemes;
    private static int UIWidth;
    private static string BrowserScheme;
    private static string JavaScriptScheme;
    private static string AboutBlankUri;
    private CustomWebBrowser webBrowser;
    private Panel webBrowserPanel;
    private Keys key;
    private Uri desiredCallbackUri;
    protected IWin32Window ownerWindow;
    [CompilerGeneratedAttribute]
private AuthorizationResult <Result>k__BackingField;
    internal AuthorizationResult Result { get; internal set; }
    public WebBrowser WebBrowser { get; }
    protected WindowsFormsWebAuthenticationDialogBase(object ownerWindow);
    private static WindowsFormsWebAuthenticationDialogBase();
    [CompilerGeneratedAttribute]
internal AuthorizationResult get_Result();
    [CompilerGeneratedAttribute]
internal void set_Result(AuthorizationResult value);
    private void webBrowser_PreviewKeyDown(object sender, PreviewKeyDownEventArgs e);
    public WebBrowser get_WebBrowser();
    protected virtual void WebBrowserNavigatingHandler(object sender, WebBrowserNavigatingEventArgs e);
    private void WebBrowserNavigatedHandler(object sender, WebBrowserNavigatedEventArgs e);
    protected virtual void WebBrowserNavigateErrorHandler(object sender, WebBrowserNavigateErrorEventArgs e);
    private bool CheckForClosingUrl(Uri url);
    private void StopWebBrowser();
    protected abstract virtual void OnClosingUrl();
    protected abstract virtual void OnNavigationCanceled(int statusCode);
    internal AuthorizationResult AuthenticateAAD(Uri requestUri, Uri callbackUri);
    protected virtual void OnAuthenticate();
    private void InitializeComponent();
    protected virtual void Dispose(bool disposing);
    protected AdalException CreateExceptionForAuthenticationUiFailed(int statusCode);
}
internal static class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.WsTrust.MexParser : object {
    private static string WsTrustSoapTransport;
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.WsTrust.MexParser/<FetchWsTrustAddressFromMexAsync>d__1")]
public static Task`1<WsTrustAddress> FetchWsTrustAddressFromMexAsync(string federationMetadataUrl, UserAuthType userAuthType, CallState callState);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.WsTrust.MexParser/<FetchMexAsync>d__2")]
internal static Task`1<XDocument> FetchMexAsync(string federationMetadataUrl, CallState callState);
    internal static WsTrustAddress ExtractWsTrustAddressFromMex(XDocument mexDocument, UserAuthType userAuthType, CallState callState);
    internal static Dictionary`2<string, MexPolicy> ReadPolicies(XContainer mexDocument);
    private static Dictionary`2<string, MexPolicy> ReadPolicyBindings(XContainer mexDocument, IReadOnlyDictionary`2<string, MexPolicy> policies);
    private static void SetPolicyEndpointAddresses(XContainer mexDocument, IReadOnlyDictionary`2<string, MexPolicy> bindings);
    private static void AddPolicy(IDictionary`2<string, MexPolicy> policies, XElement policy, UserAuthType policyAuthType);
}
internal class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.WsTrust.MexPolicy : object {
    [CompilerGeneratedAttribute]
private WsTrustVersion <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private UserAuthType <AuthType>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <Url>k__BackingField;
    public WsTrustVersion Version { get; public set; }
    public string Id { get; public set; }
    public UserAuthType AuthType { get; public set; }
    public Uri Url { get; public set; }
    [CompilerGeneratedAttribute]
public WsTrustVersion get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(WsTrustVersion value);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public UserAuthType get_AuthType();
    [CompilerGeneratedAttribute]
public void set_AuthType(UserAuthType value);
    [CompilerGeneratedAttribute]
public Uri get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(Uri value);
}
internal class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.WsTrust.WsTrustAddress : object {
    [CompilerGeneratedAttribute]
private Uri <Uri>k__BackingField;
    [CompilerGeneratedAttribute]
private WsTrustVersion <Version>k__BackingField;
    public Uri Uri { get; public set; }
    public WsTrustVersion Version { get; public set; }
    [CompilerGeneratedAttribute]
public Uri get_Uri();
    [CompilerGeneratedAttribute]
public void set_Uri(Uri value);
    [CompilerGeneratedAttribute]
public WsTrustVersion get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(WsTrustVersion value);
}
internal static class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.WsTrust.WsTrustRequest : object {
    private static int MaxExpectedMessageSize;
    private static string WsTrustEnvelopeTemplate;
    private static string defaultAppliesTo;
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.WsTrust.WsTrustRequest/<SendRequestAsync>d__3")]
public static Task`1<WsTrustResponse> SendRequestAsync(WsTrustAddress wsTrustAddress, UserCredential credential, CallState callState, string cloudAudience);
    private static void SetKerberosOption(IHttpClient request);
    public static StringBuilder BuildMessage(string appliesTo, WsTrustAddress wsTrustAddress, UserCredential credential);
    internal static string XmlEscape(string escapeStr);
    private static StringBuilder BuildSecurityHeader(UserCredential credential);
    private static string BuildTimeString(DateTime utcTime);
}
internal class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.WsTrust.WsTrustResponse : object {
    public static string Saml1Assertion;
    [CompilerGeneratedAttribute]
private string <Token>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TokenType>k__BackingField;
    public string Token { get; private set; }
    public string TokenType { get; private set; }
    [CompilerGeneratedAttribute]
public string get_Token();
    [CompilerGeneratedAttribute]
private void set_Token(string value);
    [CompilerGeneratedAttribute]
public string get_TokenType();
    [CompilerGeneratedAttribute]
private void set_TokenType(string value);
    public static WsTrustResponse CreateFromResponse(Stream responseStream, WsTrustVersion version);
    public static string ReadErrorResponse(XDocument responseDocument, CallState callState);
    private static string GetFaultMessage(XElement fault);
    internal static XDocument ReadDocumentFromResponse(Stream responseStream);
    internal static WsTrustResponse CreateFromResponseDocument(XDocument responseDocument, WsTrustVersion version);
}
internal enum Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.WsTrust.WsTrustVersion : Enum {
    public int value__;
    public static WsTrustVersion WsTrust13;
    public static WsTrustVersion WsTrust2005;
}
internal static class Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.XmlNamespace : object {
    public static XNamespace Wsdl;
    public static XNamespace Wsp;
    public static XNamespace Http;
    public static XNamespace Sp;
    public static XNamespace Sp2005;
    public static XNamespace Wsu;
    public static XNamespace Soap12;
    public static XNamespace Wsa10;
    public static XNamespace Trust;
    public static XNamespace Trust2005;
    public static XNamespace Issue;
    public static XNamespace Issue2005;
    public static XNamespace SoapEnvelope;
    private static XmlNamespace();
}
public interface Microsoft.IdentityModel.Clients.ActiveDirectory.IPlatformParameters {
}
public interface Microsoft.IdentityModel.Clients.ActiveDirectory.ISecureClientSecret {
    public abstract virtual void ApplyTo(IDictionary`2<string, string> parameters);
}
public class Microsoft.IdentityModel.Clients.ActiveDirectory.LogCallback : MulticastDelegate {
    public LogCallback(object object, IntPtr method);
    public virtual void Invoke(LogLevel level, string message, bool containsPii);
    public virtual IAsyncResult BeginInvoke(LogLevel level, string message, bool containsPii, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.IdentityModel.Clients.ActiveDirectory.LoggerCallbackHandler : object {
    private static object LockObj;
    [CompilerGeneratedAttribute]
private static bool <PiiLoggingEnabled>k__BackingField;
    public static bool UseDefaultLogging;
    private static IAdalLogCallback _localCallback;
    private static LogCallback modreq(System.Runtime.CompilerServices.IsVolatile) _logCallback;
    public static bool PiiLoggingEnabled { get; public set; }
    internal static IAdalLogCallback Callback { get; public set; }
    internal static LogCallback LogCallback { get; public set; }
    private static LoggerCallbackHandler();
    [CompilerGeneratedAttribute]
public static bool get_PiiLoggingEnabled();
    [CompilerGeneratedAttribute]
public static void set_PiiLoggingEnabled(bool value);
    public static void set_Callback(IAdalLogCallback value);
    internal static IAdalLogCallback get_Callback();
    internal static void ExecuteObsoleteCallback(LogLevel level, string message);
    public static void set_LogCallback(LogCallback value);
    internal static LogCallback get_LogCallback();
    internal static void ExecuteCallback(LogLevel level, string message, bool containsPii);
}
public enum Microsoft.IdentityModel.Clients.ActiveDirectory.LogLevel : Enum {
    public int value__;
    public static LogLevel Information;
    public static LogLevel Verbose;
    public static LogLevel Warning;
    public static LogLevel Error;
}
public enum Microsoft.IdentityModel.Clients.ActiveDirectory.Native.AsymmetricPaddingMode : Enum {
    public int value__;
    public static AsymmetricPaddingMode None;
    public static AsymmetricPaddingMode Pkcs1;
    public static AsymmetricPaddingMode Oaep;
    public static AsymmetricPaddingMode Pss;
}
internal static class Microsoft.IdentityModel.Clients.ActiveDirectory.Native.BCryptNative : object {
}
internal class Microsoft.IdentityModel.Clients.ActiveDirectory.Native.SafeBCryptAlgorithmHandle : SafeHandleZeroOrMinusOneIsInvalid {
    [ReliabilityContractAttribute("3", "2")]
[SuppressUnmanagedCodeSecurityAttribute]
private static ErrorCode BCryptCloseAlgorithmProvider(IntPtr hAlgorithm, int flags);
    protected virtual bool ReleaseHandle();
}
internal class Microsoft.IdentityModel.Clients.ActiveDirectory.Native.SafeBCryptHashHandle : SafeHandleWithBuffer {
    [ReliabilityContractAttribute("3", "2")]
[SuppressUnmanagedCodeSecurityAttribute]
private static ErrorCode BCryptDestroyHash(IntPtr hHash);
    [ReliabilityContractAttribute("3", "2")]
protected virtual bool ReleaseNativeHandle();
}
internal class Microsoft.IdentityModel.Clients.ActiveDirectory.Native.SafeBCryptKeyHandle : SafeHandleWithBuffer {
    [ReliabilityContractAttribute("3", "2")]
[SuppressUnmanagedCodeSecurityAttribute]
private static ErrorCode BCryptDestroyKey(IntPtr hKey);
    [ReliabilityContractAttribute("3", "2")]
protected virtual bool ReleaseNativeHandle();
}
public class Microsoft.IdentityModel.Clients.ActiveDirectory.PlatformParameters : object {
    [CompilerGeneratedAttribute]
private object <OwnerWindow>k__BackingField;
    [CompilerGeneratedAttribute]
private PromptBehavior <PromptBehavior>k__BackingField;
    public object OwnerWindow { get; private set; }
    public PromptBehavior PromptBehavior { get; internal set; }
    public PlatformParameters(PromptBehavior promptBehavior);
    public PlatformParameters(PromptBehavior promptBehavior, object ownerWindow);
    [CompilerGeneratedAttribute]
public object get_OwnerWindow();
    [CompilerGeneratedAttribute]
private void set_OwnerWindow(object value);
    [CompilerGeneratedAttribute]
public PromptBehavior get_PromptBehavior();
    [CompilerGeneratedAttribute]
internal void set_PromptBehavior(PromptBehavior value);
}
public enum Microsoft.IdentityModel.Clients.ActiveDirectory.PromptBehavior : Enum {
    public int value__;
    public static PromptBehavior Auto;
    public static PromptBehavior Always;
    public static PromptBehavior Never;
    public static PromptBehavior RefreshSession;
    public static PromptBehavior SelectAccount;
}
public class Microsoft.IdentityModel.Clients.ActiveDirectory.SecureClientSecret : object {
    private SecureString secureString;
    public SecureClientSecret(SecureString secret);
    public sealed virtual void ApplyTo(IDictionary`2<string, string> parameters);
}
public class Microsoft.IdentityModel.Clients.ActiveDirectory.TokenCache : object {
    private static int SchemaVersion;
    private static string Delimiter;
    internal IDictionary`2<TokenCacheKey, AuthenticationResultEx> tokenCacheDictionary;
    private static int ExpirationMarginInMinutes;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) hasStateChanged;
    private object cacheLock;
    [CompilerGeneratedAttribute]
private static TokenCache <DefaultShared>k__BackingField;
    [CompilerGeneratedAttribute]
private TokenCacheNotification <BeforeAccess>k__BackingField;
    [CompilerGeneratedAttribute]
private TokenCacheNotification <BeforeWrite>k__BackingField;
    [CompilerGeneratedAttribute]
private TokenCacheNotification <AfterAccess>k__BackingField;
    public static TokenCache DefaultShared { get; private set; }
    public TokenCacheNotification BeforeAccess { get; public set; }
    public TokenCacheNotification BeforeWrite { get; public set; }
    public TokenCacheNotification AfterAccess { get; public set; }
    public bool HasStateChanged { get; public set; }
    public int Count { get; }
    private static TokenCache();
    public TokenCache(Byte[] state);
    [CompilerGeneratedAttribute]
public static TokenCache get_DefaultShared();
    [CompilerGeneratedAttribute]
private static void set_DefaultShared(TokenCache value);
    [CompilerGeneratedAttribute]
public TokenCacheNotification get_BeforeAccess();
    [CompilerGeneratedAttribute]
public void set_BeforeAccess(TokenCacheNotification value);
    [CompilerGeneratedAttribute]
public TokenCacheNotification get_BeforeWrite();
    [CompilerGeneratedAttribute]
public void set_BeforeWrite(TokenCacheNotification value);
    [CompilerGeneratedAttribute]
public TokenCacheNotification get_AfterAccess();
    [CompilerGeneratedAttribute]
public void set_AfterAccess(TokenCacheNotification value);
    public bool get_HasStateChanged();
    public void set_HasStateChanged(bool value);
    public int get_Count();
    public Byte[] Serialize();
    public void Deserialize(Byte[] state);
    public virtual IEnumerable`1<TokenCacheItem> ReadItems();
    public virtual void DeleteItem(TokenCacheItem item);
    public virtual void Clear();
    internal void OnAfterAccess(TokenCacheNotificationArgs args);
    internal void OnBeforeAccess(TokenCacheNotificationArgs args);
    internal void OnBeforeWrite(TokenCacheNotificationArgs args);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Clients.ActiveDirectory.TokenCache/<LoadFromCacheAsync>d__39")]
internal Task`1<AuthenticationResultEx> LoadFromCacheAsync(CacheQueryData cacheQueryData, CallState callState);
    private static string GetHost(string uri);
    private static string ReplaceHost(string oldUri, string newHost);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Clients.ActiveDirectory.TokenCache/<GetOrderedAliasesAsync>d__42")]
internal static Task`1<List`1<string>> GetOrderedAliasesAsync(string authority, bool validateAuthority, CallState callState);
    internal AuthenticationResultEx LoadFromCacheCommon(CacheQueryData cacheQueryData, CallState callState);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Clients.ActiveDirectory.TokenCache/<StoreToCacheAsync>d__44")]
internal Task StoreToCacheAsync(AuthenticationResultEx result, string authority, string resource, string clientId, TokenSubjectType subjectType, CallState callState);
    internal void StoreToCacheCommon(AuthenticationResultEx result, string authority, string resource, string clientId, TokenSubjectType subjectType, CallState callState);
    private void UpdateCachedMrrtRefreshTokens(AuthenticationResultEx result, string clientId, TokenSubjectType subjectType);
    private Nullable`1<KeyValuePair`2<TokenCacheKey, AuthenticationResultEx>> LoadSingleItemFromCache(CacheQueryData cacheQueryData, CallState callState);
    private static bool IsSameCloud(string authority, string authority1);
    private List`1<KeyValuePair`2<TokenCacheKey, AuthenticationResultEx>> QueryCache(string authority, string clientId, TokenSubjectType subjectType, string uniqueId, string displayableId, string assertionHash);
}
public class Microsoft.IdentityModel.Clients.ActiveDirectory.TokenCacheItem : object {
    [CompilerGeneratedAttribute]
private string <Authority>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientId>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <ExpiresOn>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FamilyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GivenName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IdentityProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Resource>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TenantId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UniqueId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayableId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AccessToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IdToken>k__BackingField;
    [CompilerGeneratedAttribute]
private TokenSubjectType <TokenSubjectType>k__BackingField;
    public string Authority { get; private set; }
    public string ClientId { get; internal set; }
    public DateTimeOffset ExpiresOn { get; internal set; }
    public string FamilyName { get; internal set; }
    public string GivenName { get; internal set; }
    public string IdentityProvider { get; internal set; }
    public string Resource { get; internal set; }
    public string TenantId { get; internal set; }
    public string UniqueId { get; internal set; }
    public string DisplayableId { get; internal set; }
    public string AccessToken { get; internal set; }
    public string IdToken { get; internal set; }
    internal TokenSubjectType TokenSubjectType { get; internal set; }
    internal TokenCacheItem(TokenCacheKey key, AuthenticationResult result);
    [CompilerGeneratedAttribute]
public string get_Authority();
    [CompilerGeneratedAttribute]
private void set_Authority(string value);
    [CompilerGeneratedAttribute]
public string get_ClientId();
    [CompilerGeneratedAttribute]
internal void set_ClientId(string value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_ExpiresOn();
    [CompilerGeneratedAttribute]
internal void set_ExpiresOn(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public string get_FamilyName();
    [CompilerGeneratedAttribute]
internal void set_FamilyName(string value);
    [CompilerGeneratedAttribute]
public string get_GivenName();
    [CompilerGeneratedAttribute]
internal void set_GivenName(string value);
    [CompilerGeneratedAttribute]
public string get_IdentityProvider();
    [CompilerGeneratedAttribute]
internal void set_IdentityProvider(string value);
    [CompilerGeneratedAttribute]
public string get_Resource();
    [CompilerGeneratedAttribute]
internal void set_Resource(string value);
    [CompilerGeneratedAttribute]
public string get_TenantId();
    [CompilerGeneratedAttribute]
internal void set_TenantId(string value);
    [CompilerGeneratedAttribute]
public string get_UniqueId();
    [CompilerGeneratedAttribute]
internal void set_UniqueId(string value);
    [CompilerGeneratedAttribute]
public string get_DisplayableId();
    [CompilerGeneratedAttribute]
internal void set_DisplayableId(string value);
    [CompilerGeneratedAttribute]
public string get_AccessToken();
    [CompilerGeneratedAttribute]
internal void set_AccessToken(string value);
    [CompilerGeneratedAttribute]
public string get_IdToken();
    [CompilerGeneratedAttribute]
internal void set_IdToken(string value);
    [CompilerGeneratedAttribute]
internal TokenSubjectType get_TokenSubjectType();
    [CompilerGeneratedAttribute]
internal void set_TokenSubjectType(TokenSubjectType value);
    internal bool Match(TokenCacheKey key);
}
public class Microsoft.IdentityModel.Clients.ActiveDirectory.TokenCacheNotificationArgs : object {
    [CompilerGeneratedAttribute]
private TokenCache <TokenCache>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Resource>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UniqueId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayableId>k__BackingField;
    public TokenCache TokenCache { get; internal set; }
    public string ClientId { get; internal set; }
    public string Resource { get; internal set; }
    public string UniqueId { get; internal set; }
    public string DisplayableId { get; internal set; }
    [CompilerGeneratedAttribute]
public TokenCache get_TokenCache();
    [CompilerGeneratedAttribute]
internal void set_TokenCache(TokenCache value);
    [CompilerGeneratedAttribute]
public string get_ClientId();
    [CompilerGeneratedAttribute]
internal void set_ClientId(string value);
    [CompilerGeneratedAttribute]
public string get_Resource();
    [CompilerGeneratedAttribute]
internal void set_Resource(string value);
    [CompilerGeneratedAttribute]
public string get_UniqueId();
    [CompilerGeneratedAttribute]
internal void set_UniqueId(string value);
    [CompilerGeneratedAttribute]
public string get_DisplayableId();
    [CompilerGeneratedAttribute]
internal void set_DisplayableId(string value);
}
public class Microsoft.IdentityModel.Clients.ActiveDirectory.UserAssertion : object {
    [CompilerGeneratedAttribute]
private string <Assertion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssertionType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserName>k__BackingField;
    public string Assertion { get; private set; }
    public string AssertionType { get; private set; }
    public string UserName { get; internal set; }
    public UserAssertion(string assertion);
    public UserAssertion(string assertion, string assertionType);
    public UserAssertion(string assertion, string assertionType, string userName);
    [CompilerGeneratedAttribute]
public string get_Assertion();
    [CompilerGeneratedAttribute]
private void set_Assertion(string value);
    [CompilerGeneratedAttribute]
public string get_AssertionType();
    [CompilerGeneratedAttribute]
private void set_AssertionType(string value);
    [CompilerGeneratedAttribute]
public string get_UserName();
    [CompilerGeneratedAttribute]
internal void set_UserName(string value);
}
internal enum Microsoft.IdentityModel.Clients.ActiveDirectory.UserAuthType : Enum {
    public int value__;
    public static UserAuthType IntegratedAuth;
    public static UserAuthType UsernamePassword;
}
public class Microsoft.IdentityModel.Clients.ActiveDirectory.UserCredential : object {
    [CompilerGeneratedAttribute]
private string <UserName>k__BackingField;
    [CompilerGeneratedAttribute]
private UserAuthType <UserAuthType>k__BackingField;
    public string UserName { get; internal set; }
    internal UserAuthType UserAuthType { get; private set; }
    public UserCredential(string userName);
    internal UserCredential(string userName, UserAuthType userAuthType);
    [CompilerGeneratedAttribute]
public string get_UserName();
    [CompilerGeneratedAttribute]
internal void set_UserName(string value);
    [CompilerGeneratedAttribute]
internal UserAuthType get_UserAuthType();
    [CompilerGeneratedAttribute]
private void set_UserAuthType(UserAuthType value);
    internal virtual void ApplyTo(DictionaryRequestParameters requestParameters);
    internal virtual Char[] PasswordToCharArray();
}
public class Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifier : object {
    private static string AnyUserId;
    private static UserIdentifier AnyUserSingleton;
    [CompilerGeneratedAttribute]
private UserIdentifierType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    public UserIdentifierType Type { get; private set; }
    public string Id { get; private set; }
    public static UserIdentifier AnyUser { get; }
    internal bool IsAnyUser { get; }
    internal string UniqueId { get; }
    internal string DisplayableId { get; }
    public UserIdentifier(string id, UserIdentifierType type);
    private static UserIdentifier();
    [CompilerGeneratedAttribute]
public UserIdentifierType get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(UserIdentifierType value);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(string value);
    public static UserIdentifier get_AnyUser();
    internal bool get_IsAnyUser();
    internal string get_UniqueId();
    internal string get_DisplayableId();
}
public enum Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifierType : Enum {
    public int value__;
    public static UserIdentifierType UniqueId;
    public static UserIdentifierType OptionalDisplayableId;
    public static UserIdentifierType RequiredDisplayableId;
}
[DataContractAttribute]
public class Microsoft.IdentityModel.Clients.ActiveDirectory.UserInfo : object {
    [CompilerGeneratedAttribute]
private string <UniqueId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayableId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GivenName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FamilyName>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <PasswordExpiresOn>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <PasswordChangeUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IdentityProvider>k__BackingField;
    [DataMemberAttribute]
public string UniqueId { get; internal set; }
    [DataMemberAttribute]
public string DisplayableId { get; internal set; }
    [DataMemberAttribute]
public string GivenName { get; internal set; }
    [DataMemberAttribute]
public string FamilyName { get; internal set; }
    [DataMemberAttribute]
public Nullable`1<DateTimeOffset> PasswordExpiresOn { get; internal set; }
    [DataMemberAttribute]
public Uri PasswordChangeUrl { get; internal set; }
    [DataMemberAttribute]
public string IdentityProvider { get; internal set; }
    public UserInfo(UserInfo other);
    [CompilerGeneratedAttribute]
public string get_UniqueId();
    [CompilerGeneratedAttribute]
internal void set_UniqueId(string value);
    [CompilerGeneratedAttribute]
public string get_DisplayableId();
    [CompilerGeneratedAttribute]
internal void set_DisplayableId(string value);
    [CompilerGeneratedAttribute]
public string get_GivenName();
    [CompilerGeneratedAttribute]
internal void set_GivenName(string value);
    [CompilerGeneratedAttribute]
public string get_FamilyName();
    [CompilerGeneratedAttribute]
internal void set_FamilyName(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_PasswordExpiresOn();
    [CompilerGeneratedAttribute]
internal void set_PasswordExpiresOn(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public Uri get_PasswordChangeUrl();
    [CompilerGeneratedAttribute]
internal void set_PasswordChangeUrl(Uri value);
    [CompilerGeneratedAttribute]
public string get_IdentityProvider();
    [CompilerGeneratedAttribute]
internal void set_IdentityProvider(string value);
}
public class Microsoft.IdentityModel.Clients.ActiveDirectory.UserPasswordCredential : UserCredential {
    [CompilerGeneratedAttribute]
private SecureString <SecurePassword>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    internal SecureString SecurePassword { get; private set; }
    internal string Password { get; }
    public UserPasswordCredential(string userName, string password);
    public UserPasswordCredential(string userName, SecureString securePassword);
    [CompilerGeneratedAttribute]
internal SecureString get_SecurePassword();
    [CompilerGeneratedAttribute]
private void set_SecurePassword(SecureString value);
    [CompilerGeneratedAttribute]
internal string get_Password();
    internal virtual Char[] PasswordToCharArray();
    internal virtual void ApplyTo(DictionaryRequestParameters requestParameters);
}
