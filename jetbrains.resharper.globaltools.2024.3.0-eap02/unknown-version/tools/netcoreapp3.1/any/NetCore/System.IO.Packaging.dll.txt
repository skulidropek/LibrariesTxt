internal static class FxResources.System.IO.Packaging.SR : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.AllowNullAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.DisallowNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ParameterValue>k__BackingField;
    public bool ParameterValue { get; }
    public DoesNotReturnIfAttribute(bool parameterValue);
    [CompilerGeneratedAttribute]
public bool get_ParameterValue();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public MaybeNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public String[] Members { get; }
    public MemberNotNullAttribute(string member);
    public MemberNotNullAttribute(String[] members);
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public bool ReturnValue { get; }
    public String[] Members { get; }
    public MemberNotNullWhenAttribute(bool returnValue, string member);
    public MemberNotNullWhenAttribute(bool returnValue, String[] members);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[AttributeUsageAttribute("10368")]
internal class System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public NotNullIfNotNullAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[TypeForwardedFromAttribute("WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
public class System.IO.FileFormatException : FormatException {
    private Uri _sourceUri;
    public Uri SourceUri { get; }
    public FileFormatException(string message);
    public FileFormatException(string message, Exception innerException);
    public FileFormatException(Uri sourceUri);
    public FileFormatException(Uri sourceUri, string message);
    public FileFormatException(Uri sourceUri, Exception innerException);
    public FileFormatException(Uri sourceUri, string message, Exception innerException);
    [NullableContextAttribute("1")]
protected FileFormatException(SerializationInfo info, StreamingContext context);
    [NullableContextAttribute("1")]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public Uri get_SourceUri();
}
public enum System.IO.Packaging.CompressionOption : Enum {
    public int value__;
    public static CompressionOption NotCompressed;
    public static CompressionOption Normal;
    public static CompressionOption Maximum;
    public static CompressionOption Fast;
    public static CompressionOption SuperFast;
}
internal class System.IO.Packaging.ContentType : object {
    private string _contentType;
    private string _type;
    private string _subType;
    private Dictionary`2<string, string> _parameterDictionary;
    private static Char[] s_allowedCharacters;
    private static Char[] s_linearWhiteSpaceChars;
    internal string TypeComponent { get; }
    internal string SubTypeComponent { get; }
    internal Enumerator<string, string> ParameterValuePairs { get; }
    internal ContentType(string contentType);
    private static ContentType();
    internal string get_TypeComponent();
    internal string get_SubTypeComponent();
    internal Enumerator<string, string> get_ParameterValuePairs();
    internal bool AreTypeAndSubTypeEqual(ContentType contentType);
    internal bool AreTypeAndSubTypeEqual(ContentType contentType, bool allowParameterValuePairs);
    public virtual string ToString();
    private static void ValidateCarriageReturns(string contentType);
    private void ParseTypeAndSubType(ReadOnlySpan`1<char> typeAndSubType);
    private void ParseParameterAndValue(ReadOnlySpan`1<char> parameterAndValue);
    private static int GetLengthOfParameterValue(ReadOnlySpan`1<char> s, int startIndex);
    private static string ValidateToken(string token);
    private static string ValidateQuotedStringOrToken(string parameterValue);
    private static void ValidateQuotedText(ReadOnlySpan`1<char> quotedText);
    private static bool IsAllowedCharacter(char character);
    private static bool IsAsciiLetterOrDigit(char character);
    private static bool IsLinearWhiteSpaceChar(char ch);
}
public enum System.IO.Packaging.EncryptionOption : Enum {
    public int value__;
    public static EncryptionOption None;
    public static EncryptionOption RightsManagement;
}
internal class System.IO.Packaging.HandleAttributeCallback : MulticastDelegate {
    public HandleAttributeCallback(object object, IntPtr method);
    public virtual void Invoke(int elementDepth);
    public virtual IAsyncResult BeginInvoke(int elementDepth, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class System.IO.Packaging.HandleElementCallback : MulticastDelegate {
    public HandleElementCallback(object object, IntPtr method);
    public virtual void Invoke(int elementDepth, Boolean& more);
    public virtual IAsyncResult BeginInvoke(int elementDepth, Boolean& more, AsyncCallback callback, object object);
    public virtual void EndInvoke(Boolean& more, IAsyncResult result);
}
internal class System.IO.Packaging.IgnoreFlushAndCloseStream : Stream {
    private Stream _stream;
    private bool _disposed;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    internal IgnoreFlushAndCloseStream(Stream stream);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long newLength);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual void Write(Byte[] buf, int offset, int count);
    public virtual void Flush();
    protected virtual void Dispose(bool disposing);
    private void ThrowIfStreamDisposed();
}
internal class System.IO.Packaging.InternalRelationshipCollection : object {
    private static UriKind DotNetRelativeOrAbsolute;
    private OrderedDictionary`2<string, PackageRelationship> _relationships;
    private bool _dirty;
    private Package _package;
    private PackagePart _sourcePart;
    private PackagePart _relationshipPart;
    private Uri _uri;
    private static int TimestampLength;
    private static string RelationshipsTagName;
    private static string RelationshipTagName;
    private static string TargetAttributeName;
    private static string TypeAttributeName;
    private static string IdAttributeName;
    private static string XmlBaseAttributeName;
    private static string TargetModeAttributeName;
    private static String[] s_relationshipKnownNamespaces;
    internal InternalRelationshipCollection(PackagePart part);
    internal InternalRelationshipCollection(Package package);
    private InternalRelationshipCollection(Package package, PackagePart part);
    private static InternalRelationshipCollection();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IEnumerator`1<PackageRelationship> GetEnumerator();
    internal PackageRelationship Add(Uri targetUri, TargetMode targetMode, string relationshipType, string id);
    internal PackageRelationship GetRelationship(string id);
    internal void Delete(string id);
    internal void Clear();
    internal void Flush();
    internal static void ThrowIfInvalidRelationshipType(string relationshipType);
    internal static void ThrowIfInvalidXsdId(string id);
    private static Uri GetRelationshipPartUri(PackagePart part);
    private void ParseRelationshipPart(PackagePart part);
    private void ProcessRelationshipAttributes(XmlCompatibilityReader reader);
    private static void ProcessEndElementForRelationshipTag(XmlCompatibilityReader reader);
    private PackageRelationship Add(Uri targetUri, TargetMode targetMode, string relationshipType, string id, bool parsing);
    private void WriteRelationshipPart(PackagePart part);
    internal static void WriteRelationshipsAsXml(XmlWriter writer, IEnumerable`1<PackageRelationship> relationships, bool alwaysWriteTargetModeAttribute);
    [MemberNotNullAttribute("_relationshipPart")]
private void EnsureRelationshipPart();
    private Uri GetResolvedTargetUri(Uri target, TargetMode targetMode);
    private static void ThrowIfIncorrectContentType(ContentType contentType);
    private static void ThrowIfXmlBaseAttributeIsPresent(XmlCompatibilityReader reader);
    private static void ThrowForInvalidAttributeValue(XmlCompatibilityReader reader, string attributeName, Exception ex);
    private string GenerateUniqueRelationshipId();
    private static string GenerateRelationshipId();
    private void ValidateUniqueRelationshipId(string id);
}
internal class System.IO.Packaging.IsXmlNamespaceSupportedCallback : MulticastDelegate {
    public IsXmlNamespaceSupportedCallback(object object, IntPtr method);
    public virtual bool Invoke(string xmlNamespace, String& newXmlNamespace);
    public virtual IAsyncResult BeginInvoke(string xmlNamespace, String& newXmlNamespace, AsyncCallback callback, object object);
    public virtual bool EndInvoke(String& newXmlNamespace, IAsyncResult result);
}
internal class System.IO.Packaging.OrderedDictionary`2 : object {
    private Dictionary`2<TKey, LinkedListNode`1<TValue>> _dictionary;
    private LinkedList`1<TValue> _order;
    public int Count { get; }
    public OrderedDictionary`2(int initialCapacity);
    public bool Contains(TKey key);
    public bool Add(TKey key, TValue value);
    public void Clear();
    public bool Remove(TKey key);
    public bool TryGetValue(TKey key, TValue& value);
    public int get_Count();
    public sealed virtual IEnumerator`1<TValue> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class System.IO.Packaging.Package : object {
    private static FileMode s_defaultFileMode;
    private static FileAccess s_defaultFileAccess;
    private static FileShare s_defaultFileShare;
    private static FileMode s_defaultStreamMode;
    private static FileAccess s_defaultStreamAccess;
    private FileAccess _openFileAccess;
    private FileMode _openFileMode;
    private bool _disposed;
    private SortedList`2<ValidatedPartUri, PackagePart> _partList;
    private PackagePartCollection _partCollection;
    private InternalRelationshipCollection _relationships;
    private PartBasedPackageProperties _packageProperties;
    public FileAccess FileOpenAccess { get; }
    public PackageProperties PackageProperties { get; }
    protected Package(FileAccess openFileAccess);
    public FileAccess get_FileOpenAccess();
    public PackageProperties get_PackageProperties();
    public static Package Open(string path);
    public static Package Open(string path, FileMode packageMode);
    public static Package Open(string path, FileMode packageMode, FileAccess packageAccess);
    public static Package Open(Stream stream);
    public static Package Open(Stream stream, FileMode packageMode);
    public PackagePart CreatePart(Uri partUri, string contentType);
    public PackagePart CreatePart(Uri partUri, string contentType, CompressionOption compressionOption);
    public PackagePart GetPart(Uri partUri);
    public virtual bool PartExists(Uri partUri);
    public void DeletePart(Uri partUri);
    public PackagePartCollection GetParts();
    private sealed virtual override void System.IDisposable.Dispose();
    public void Close();
    public void Flush();
    public PackageRelationship CreateRelationship(Uri targetUri, TargetMode targetMode, string relationshipType);
    public PackageRelationship CreateRelationship(Uri targetUri, TargetMode targetMode, string relationshipType, string id);
    public void DeleteRelationship(string id);
    public PackageRelationshipCollection GetRelationships();
    public PackageRelationshipCollection GetRelationshipsByType(string relationshipType);
    public PackageRelationship GetRelationship(string id);
    public bool RelationshipExists(string id);
    protected abstract virtual PackagePart CreatePartCore(Uri partUri, string contentType, CompressionOption compressionOption);
    protected abstract virtual PackagePart GetPartCore(Uri partUri);
    protected abstract virtual void DeletePartCore(Uri partUri);
    protected abstract virtual PackagePart[] GetPartsCore();
    protected virtual void Dispose(bool disposing);
    protected abstract virtual void FlushCore();
    internal void ThrowIfReadOnly();
    internal void ThrowIfWriteOnly();
    internal static void ThrowIfFileModeInvalid(FileMode mode);
    internal static void ThrowIfFileAccessInvalid(FileAccess access);
    internal static void ThrowIfCompressionOptionInvalid(CompressionOption compressionOption);
    public static Package Open(string path, FileMode packageMode, FileAccess packageAccess, FileShare packageShare);
    public static Package Open(Stream stream, FileMode packageMode, FileAccess packageAccess);
    private void AddIfNoPrefixCollisionDetected(ValidatedPartUri partUri, PackagePart part);
    private void ThrowIfObjectDisposed();
    [MemberNotNullAttribute("_relationships")]
private void EnsureRelationships();
    private void ClearRelationships();
    private void FlushRelationships();
    private void DoOperationOnEachPart(PartOperation operation);
    private bool DoClose(PackagePart p);
    private bool DoFlush(PackagePart p);
    private bool DoWriteRelationshipsXml(PackagePart p);
    private bool DoCloseRelationshipsXml(PackagePart p);
    private PackagePart GetPartHelper(Uri partUri);
    private PackageRelationship GetRelationshipHelper(string id);
    private PackageRelationshipCollection GetRelationshipsHelper(string filterString);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class System.IO.Packaging.PackagePart : object {
    private ValidatedPartUri _uri;
    private Package _container;
    private ContentType _contentType;
    private List`1<Stream> _requestedStreams;
    private InternalRelationshipCollection _relationships;
    private CompressionOption _compressionOption;
    private bool _disposed;
    private bool _deleted;
    private bool _isRelationshipPart;
    public Uri Uri { get; }
    public string ContentType { get; }
    public Package Package { get; }
    public CompressionOption CompressionOption { get; }
    internal bool IsRelationshipPart { get; }
    internal bool IsDeleted { get; internal set; }
    internal bool IsClosed { get; }
    internal ContentType ValidatedContentType { get; }
    protected PackagePart(Package package, Uri partUri);
    protected PackagePart(Package package, Uri partUri, string contentType);
    protected PackagePart(Package package, Uri partUri, string contentType, CompressionOption compressionOption);
    public Uri get_Uri();
    public string get_ContentType();
    public Package get_Package();
    public CompressionOption get_CompressionOption();
    protected virtual string GetContentTypeCore();
    public Stream GetStream();
    public Stream GetStream(FileMode mode);
    public Stream GetStream(FileMode mode, FileAccess access);
    [NullableContextAttribute("2")]
protected abstract virtual Stream GetStreamCore(FileMode mode, FileAccess access);
    public PackageRelationship CreateRelationship(Uri targetUri, TargetMode targetMode, string relationshipType);
    public PackageRelationship CreateRelationship(Uri targetUri, TargetMode targetMode, string relationshipType, string id);
    public void DeleteRelationship(string id);
    public PackageRelationshipCollection GetRelationships();
    public PackageRelationshipCollection GetRelationshipsByType(string relationshipType);
    public PackageRelationship GetRelationship(string id);
    public bool RelationshipExists(string id);
    internal bool get_IsRelationshipPart();
    internal bool get_IsDeleted();
    internal void set_IsDeleted(bool value);
    internal bool get_IsClosed();
    internal ContentType get_ValidatedContentType();
    internal void ClearRelationships();
    internal void Flush();
    internal void Close();
    internal void FlushRelationships();
    internal void CloseRelationships();
    [MemberNotNullAttribute("_relationships")]
private void EnsureRelationships();
    private void ThrowIfOpenAccessModesAreIncompatible(FileMode mode, FileAccess access);
    private void CheckInvalidState();
    private void ThrowIfParentContainerClosed();
    private void ThrowIfPackagePartDeleted();
    private void ThrowIfRelationship();
    private PackageRelationship GetRelationshipHelper(string id);
    private PackageRelationshipCollection GetRelationshipsHelper(string filterString);
    private void CleanUpRequestedStreamsList();
    private static bool IsStreamClosed(Stream s);
}
public class System.IO.Packaging.PackagePartCollection : object {
    private SortedList`2<ValidatedPartUri, PackagePart> _partList;
    internal PackagePartCollection(SortedList`2<ValidatedPartUri, PackagePart> partList);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override IEnumerator`1<PackagePart> System.Collections.Generic.IEnumerable<System.IO.Packaging.PackagePart>.GetEnumerator();
    [NullableContextAttribute("1")]
public IEnumerator`1<PackagePart> GetEnumerator();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class System.IO.Packaging.PackageProperties : object {
    public string Title { get; public set; }
    public string Subject { get; public set; }
    public string Creator { get; public set; }
    public string Keywords { get; public set; }
    public string Description { get; public set; }
    public string LastModifiedBy { get; public set; }
    public string Revision { get; public set; }
    public Nullable`1<DateTime> LastPrinted { get; public set; }
    public Nullable`1<DateTime> Created { get; public set; }
    public Nullable`1<DateTime> Modified { get; public set; }
    public string Category { get; public set; }
    public string Identifier { get; public set; }
    public string ContentType { get; public set; }
    public string Language { get; public set; }
    public string Version { get; public set; }
    public string ContentStatus { get; public set; }
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public abstract virtual string get_Title();
    public abstract virtual void set_Title(string value);
    public abstract virtual string get_Subject();
    public abstract virtual void set_Subject(string value);
    public abstract virtual string get_Creator();
    public abstract virtual void set_Creator(string value);
    public abstract virtual string get_Keywords();
    public abstract virtual void set_Keywords(string value);
    public abstract virtual string get_Description();
    public abstract virtual void set_Description(string value);
    public abstract virtual string get_LastModifiedBy();
    public abstract virtual void set_LastModifiedBy(string value);
    public abstract virtual string get_Revision();
    public abstract virtual void set_Revision(string value);
    public abstract virtual Nullable`1<DateTime> get_LastPrinted();
    public abstract virtual void set_LastPrinted(Nullable`1<DateTime> value);
    public abstract virtual Nullable`1<DateTime> get_Created();
    public abstract virtual void set_Created(Nullable`1<DateTime> value);
    public abstract virtual Nullable`1<DateTime> get_Modified();
    public abstract virtual void set_Modified(Nullable`1<DateTime> value);
    public abstract virtual string get_Category();
    public abstract virtual void set_Category(string value);
    public abstract virtual string get_Identifier();
    public abstract virtual void set_Identifier(string value);
    public abstract virtual string get_ContentType();
    public abstract virtual void set_ContentType(string value);
    public abstract virtual string get_Language();
    public abstract virtual void set_Language(string value);
    public abstract virtual string get_Version();
    public abstract virtual void set_Version(string value);
    public abstract virtual string get_ContentStatus();
    public abstract virtual void set_ContentStatus(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.IO.Packaging.PackageRelationship : object {
    private Package _package;
    private PackagePart _source;
    private Uri _targetUri;
    private string _relationshipType;
    private TargetMode _targetMode;
    private string _id;
    private static Uri s_containerRelationshipPartName;
    public Uri SourceUri { get; }
    public Uri TargetUri { get; }
    public string RelationshipType { get; }
    public TargetMode TargetMode { get; }
    public string Id { get; }
    public Package Package { get; }
    internal static Uri ContainerRelationshipPartName { get; }
    internal PackageRelationship(Package package, PackagePart sourcePart, Uri targetUri, TargetMode targetMode, string relationshipType, string id);
    private static PackageRelationship();
    public Uri get_SourceUri();
    public Uri get_TargetUri();
    public string get_RelationshipType();
    public TargetMode get_TargetMode();
    public string get_Id();
    public Package get_Package();
    internal static Uri get_ContainerRelationshipPartName();
}
public class System.IO.Packaging.PackageRelationshipCollection : object {
    private InternalRelationshipCollection _relationships;
    private string _filter;
    internal PackageRelationshipCollection(InternalRelationshipCollection relationships, string filter);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [NullableContextAttribute("1")]
public sealed virtual IEnumerator`1<PackageRelationship> GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.IO.Packaging.PackageRelationshipSelector : object {
    private Uri _sourceUri;
    private string _selectionCriteria;
    private PackageRelationshipSelectorType _selectorType;
    public Uri SourceUri { get; }
    public PackageRelationshipSelectorType SelectorType { get; }
    public string SelectionCriteria { get; }
    public PackageRelationshipSelector(Uri sourceUri, PackageRelationshipSelectorType selectorType, string selectionCriteria);
    public Uri get_SourceUri();
    public PackageRelationshipSelectorType get_SelectorType();
    public string get_SelectionCriteria();
    public List`1<PackageRelationship> Select(Package package);
}
public enum System.IO.Packaging.PackageRelationshipSelectorType : Enum {
    public int value__;
    public static PackageRelationshipSelectorType Id;
    public static PackageRelationshipSelectorType Type;
}
internal enum System.IO.Packaging.PackageXmlEnum : Enum {
    public int value__;
    public static PackageXmlEnum NotDefined;
    public static PackageXmlEnum XmlSchemaInstanceNamespace;
    public static PackageXmlEnum XmlSchemaInstanceNamespacePrefix;
    public static PackageXmlEnum XmlNamespacePrefix;
    public static PackageXmlEnum PackageCorePropertiesNamespace;
    public static PackageXmlEnum DublinCorePropertiesNamespace;
    public static PackageXmlEnum DublinCoreTermsNamespace;
    public static PackageXmlEnum DublinCorePropertiesNamespacePrefix;
    public static PackageXmlEnum DublincCoreTermsNamespacePrefix;
    public static PackageXmlEnum CoreProperties;
    public static PackageXmlEnum Type;
    public static PackageXmlEnum Creator;
    public static PackageXmlEnum Identifier;
    public static PackageXmlEnum Title;
    public static PackageXmlEnum Subject;
    public static PackageXmlEnum Description;
    public static PackageXmlEnum Language;
    public static PackageXmlEnum Created;
    public static PackageXmlEnum Modified;
    public static PackageXmlEnum ContentType;
    public static PackageXmlEnum Keywords;
    public static PackageXmlEnum Category;
    public static PackageXmlEnum Version;
    public static PackageXmlEnum LastModifiedBy;
    public static PackageXmlEnum ContentStatus;
    public static PackageXmlEnum Revision;
    public static PackageXmlEnum LastPrinted;
}
internal static class System.IO.Packaging.PackageXmlStringTable : object {
    private static ThreadSafeNameTable s_nameTable;
    private static XmlStringTableStruct[] s_xmlstringtable;
    internal static NameTable NameTable { get; }
    private static PackageXmlStringTable();
    private static void CheckIdRange(PackageXmlEnum id);
    internal static PackageXmlEnum GetEnumOf(object xmlString);
    internal static string GetValueType(PackageXmlEnum id);
    internal static PackageXmlEnum GetXmlNamespace(PackageXmlEnum id);
    internal static string GetXmlString(PackageXmlEnum id);
    internal static object GetXmlStringAsObject(PackageXmlEnum id);
    internal static NameTable get_NameTable();
}
internal static class System.IO.Packaging.PackagingUtilities : object {
    internal static string RelationshipNamespaceUri;
    internal static ContentType RelationshipPartContentType;
    internal static string ContainerFileExtension;
    internal static string XamlFileExtension;
    private static string XmlNamespace;
    private static string EncodingAttribute;
    private static string WebNameUTF8;
    private static string WebNameUnicode;
    private static PackagingUtilities();
    internal static void PerformInitialReadAndVerifyEncoding(XmlReader reader);
    internal static int GetNonXmlnsAttributeCount(XmlReader reader);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class System.IO.Packaging.PackUriHelper : object {
    private static Uri s_defaultUri;
    private static Uri s_packageRootUri;
    private static string RelationshipPartSegmentName;
    private static string RelationshipPartExtensionName;
    internal static char ForwardSlashChar;
    internal static Char[] s_forwardSlashCharArray;
    internal static char BackwardSlashChar;
    public static string UriSchemePack;
    private static Char[] s_specialCharacterChars;
    internal static Uri PackageRootUri { get; }
    private static PackUriHelper();
    public static Uri CreatePartUri(Uri partUri);
    public static Uri ResolvePartUri(Uri sourcePartUri, Uri targetUri);
    public static Uri GetRelativeUri(Uri sourcePartUri, Uri targetPartUri);
    public static Uri GetNormalizedPartUri(Uri partUri);
    [NullableContextAttribute("2")]
public static int ComparePartUri(Uri firstPartUri, Uri secondPartUri);
    public static bool IsRelationshipPartUri(Uri partUri);
    public static Uri GetRelationshipPartUri(Uri partUri);
    public static Uri GetSourcePartUriFromRelationshipPartUri(Uri relationshipPartUri);
    internal static Uri get_PackageRootUri();
    internal static bool TryValidatePartUri(Uri partUri, ValidatedPartUri& validatedPartUri);
    internal static ValidatedPartUri ValidatePartUri(Uri partUri);
    internal static string GetStringForPartUri(Uri partUri);
    private static Exception GetExceptionIfPartUriInvalid(Uri partUri, String& partUriString);
    private static void ThrowIfAbsoluteUri(Uri uri);
    private static ArgumentException GetExceptionIfAbsoluteUri(Uri uri);
    private static void ThrowIfFragmentPresent(string partName);
    private static ArgumentException GetExceptionIfFragmentPresent(string partName);
    private static void ThrowIfPartNameEndsWithSlash(string partName);
    private static ArgumentException GetExceptionIfPartNameEndsWithSlash(string partName);
    private static void ThrowIfPartNameStartsWithTwoSlashes(string partName);
    private static ArgumentException GetExceptionIfPartNameStartsWithTwoSlashes(string partName);
    private static int CompareUsingSystemUri(Uri firstUri, Uri secondUri);
    private static string GetStringForPartUriFromAnyUri(Uri partUri);
    private static bool IsPartNameEmpty(string partName);
    public static Uri Create(Uri packageUri);
    public static Uri Create(Uri packageUri, Uri partUri);
    public static Uri Create(Uri packageUri, Uri partUri, string fragment);
    public static Uri GetPackageUri(Uri packUri);
    public static Uri GetPartUri(Uri packUri);
    [NullableContextAttribute("2")]
public static int ComparePackUri(Uri firstPackUri, Uri secondPackUri);
    internal static void ValidateAndGetPackUriComponents(Uri packUri, Uri& packageUri, Uri& partUri);
    private static void EnsurePackSchemeRegistered();
    private static Uri ValidatePackageUri(Uri packageUri);
    private static Uri ValidatePackUri(Uri packUri);
    private static string EscapeSpecialCharacters(string path);
    private static Uri GetPackageUriComponent(Uri packUri);
    private static ValidatedPartUri GetPartUriComponent(Uri packUri);
}
internal class System.IO.Packaging.PartBasedPackageProperties : PackageProperties {
    private Package _package;
    private PackagePart _propertyPart;
    private XmlWriter _xmlWriter;
    private static int NumCoreProperties;
    private Dictionary`2<PackageXmlEnum, object> _propertyDictionary;
    private bool _dirty;
    private NameTable _nameTable;
    private static ContentType s_coreDocumentPropertiesContentType;
    private static string CoreDocumentPropertiesRelationshipType;
    private static string DefaultPropertyPartNamePrefix;
    private static string W3cdtf;
    private static string DefaultPropertyPartNameExtension;
    private static string GuidStorageFormatString;
    private static PackageXmlEnum[] s_validProperties;
    private static String[] s_dateTimeFormats;
    public string Creator { get; public set; }
    public string Title { get; public set; }
    public string Subject { get; public set; }
    public string Category { get; public set; }
    public string Keywords { get; public set; }
    public string Description { get; public set; }
    public string ContentType { get; public set; }
    public string ContentStatus { get; public set; }
    public string Version { get; public set; }
    public string Revision { get; public set; }
    public Nullable`1<DateTime> Created { get; public set; }
    public Nullable`1<DateTime> Modified { get; public set; }
    public string LastModifiedBy { get; public set; }
    public Nullable`1<DateTime> LastPrinted { get; public set; }
    public string Language { get; public set; }
    public string Identifier { get; public set; }
    internal PartBasedPackageProperties(Package package);
    private static PartBasedPackageProperties();
    public virtual string get_Creator();
    public virtual void set_Creator(string value);
    public virtual string get_Title();
    public virtual void set_Title(string value);
    public virtual string get_Subject();
    public virtual void set_Subject(string value);
    public virtual string get_Category();
    public virtual void set_Category(string value);
    public virtual string get_Keywords();
    public virtual void set_Keywords(string value);
    public virtual string get_Description();
    public virtual void set_Description(string value);
    public virtual string get_ContentType();
    public virtual void set_ContentType(string value);
    public virtual string get_ContentStatus();
    public virtual void set_ContentStatus(string value);
    public virtual string get_Version();
    public virtual void set_Version(string value);
    public virtual string get_Revision();
    public virtual void set_Revision(string value);
    public virtual Nullable`1<DateTime> get_Created();
    public virtual void set_Created(Nullable`1<DateTime> value);
    public virtual Nullable`1<DateTime> get_Modified();
    public virtual void set_Modified(Nullable`1<DateTime> value);
    public virtual string get_LastModifiedBy();
    public virtual void set_LastModifiedBy(string value);
    public virtual Nullable`1<DateTime> get_LastPrinted();
    public virtual void set_LastPrinted(Nullable`1<DateTime> value);
    public virtual string get_Language();
    public virtual void set_Language(string value);
    public virtual string get_Identifier();
    public virtual void set_Identifier(string value);
    internal void Flush();
    internal void Close();
    private object GetPropertyValue(PackageXmlEnum propertyName);
    private Nullable`1<DateTime> GetDateTimePropertyValue(PackageXmlEnum propertyName);
    private void RecordNewBinding(PackageXmlEnum propertyenum, object value);
    private void RecordNewBinding(PackageXmlEnum propertyenum, object value, bool initializing, XmlReader reader);
    private void ReadPropertyValuesFromPackage();
    private PackagePart GetPropertyPart();
    private PackageRelationship GetCorePropertiesRelationship();
    private void ParseCorePropertyPart(PackagePart part);
    internal static void ValidateXsiType(XmlReader reader, object ns, string name);
    private static string GetStringData(XmlReader reader);
    private static DateTime GetDateData(XmlReader reader);
    private void EnsureXmlWriter(Stream& zipStream);
    [MemberNotNullAttribute("_propertyPart")]
private void EnsurePropertyPart();
    [MemberNotNullAttribute("_propertyPart")]
private void CreatePropertyPart();
    private static Uri GeneratePropertyPartUri();
    private void WriteXmlStartTagsForPackageProperties();
    private void SerializeDirtyProperties();
    private void CloseXmlWriter();
}
public enum System.IO.Packaging.TargetMode : Enum {
    public int value__;
    public static TargetMode Internal;
    public static TargetMode External;
}
internal class System.IO.Packaging.XmlCompatibilityReader : XmlWrappingReader {
    private bool _inAttribute;
    private string _currentName;
    private IsXmlNamespaceSupportedCallback _namespaceCallback;
    private Dictionary`2<string, object> _knownNamespaces;
    private Dictionary`2<string, string> _namespaceMap;
    private Dictionary`2<string, object> _subsumingNamespaces;
    private Dictionary`2<string, HandleElementCallback> _elementHandler;
    private Dictionary`2<string, HandleAttributeCallback> _attributeHandler;
    private int _depthOffset;
    private int _ignoredAttributeCount;
    private int _attributePosition;
    private string _compatibilityUri;
    private string _alternateContent;
    private string _choice;
    private string _fallback;
    private string _requires;
    private string _ignorable;
    private string _mustUnderstand;
    private string _processContent;
    private string _preserveElements;
    private string _preserveAttributes;
    private CompatibilityScope _compatibilityScope;
    private bool _isPreviousElementEmpty;
    private int _previousElementDepth;
    private static string XmlnsDeclaration;
    private static string MarkupCompatibilityURI;
    private static String[] s_predefinedNamespaces;
    public string Value { get; }
    public string NamespaceURI { get; }
    public int Depth { get; }
    public bool HasAttributes { get; }
    public int AttributeCount { get; }
    private CompatibilityScope Scope { get; }
    private string AlternateContent { get; }
    private string Choice { get; }
    private string Fallback { get; }
    private string Requires { get; }
    private string Ignorable { get; }
    private string MustUnderstand { get; }
    private string ProcessContent { get; }
    private string PreserveElements { get; }
    private string PreserveAttributes { get; }
    private string CompatibilityUri { get; }
    public XmlCompatibilityReader(XmlReader baseReader);
    public XmlCompatibilityReader(XmlReader baseReader, IsXmlNamespaceSupportedCallback isXmlNamespaceSupported);
    public XmlCompatibilityReader(XmlReader baseReader, IsXmlNamespaceSupportedCallback isXmlNamespaceSupported, IEnumerable`1<string> supportedNamespaces);
    public XmlCompatibilityReader(XmlReader baseReader, IEnumerable`1<string> supportedNamespaces);
    private static XmlCompatibilityReader();
    public void DeclareNamespaceCompatibility(string newNamespace, string oldNamespace);
    public virtual bool Read();
    private bool ReadStartElement(Boolean& more);
    private bool ReadEndElement(Boolean& more);
    public virtual string GetAttribute(int i);
    public virtual string GetAttribute(string name);
    public virtual string GetAttribute(string localName, string namespaceURI);
    public virtual void MoveToAttribute(int i);
    public virtual bool MoveToAttribute(string name);
    public virtual bool MoveToAttribute(string localName, string namespaceURI);
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToNextAttribute();
    public virtual string LookupNamespace(string prefix);
    public virtual string get_Value();
    public virtual string get_NamespaceURI();
    public virtual int get_Depth();
    public virtual bool get_HasAttributes();
    public virtual int get_AttributeCount();
    private void SaveReaderPosition();
    private void RestoreReaderPosition();
    private string GetMappedNamespace(string namespaceName);
    private string MapNewNamespace(string namespaceName);
    private bool IsSubsumingNamespace(string namespaceName);
    private void AddSubsumingNamespace(string namespaceName);
    private bool IsNamespaceKnown(string namespaceName);
    private void AddKnownNamespace(string namespaceName);
    private bool ShouldIgnoreNamespace(string namespaceName);
    [IteratorStateMachineAttribute("System.IO.Packaging.XmlCompatibilityReader/<ParseContentToNamespaceElementPair>d__36")]
private IEnumerable`1<NamespaceElementPair> ParseContentToNamespaceElementPair(string content, string callerContext);
    [IteratorStateMachineAttribute("System.IO.Packaging.XmlCompatibilityReader/<PrefixesToNamespaces>d__37")]
private IEnumerable`1<string> PrefixesToNamespaces(string prefixes);
    private bool SkipToKnownAttribute();
    private void ScanForCompatibility(int elementDepth);
    private void ScanForEndCompatibility(int elementDepth);
    private void PushScope(int elementDepth);
    private void PopScope();
    private void HandleAlternateContent(int elementDepth, Boolean& more);
    private void HandleChoice(int elementDepth, Boolean& more);
    private void HandleFallback(int elementDepth, Boolean& more);
    private void HandleIgnorable(int elementDepth);
    private void HandleMustUnderstand(int elementDepth);
    private void HandleProcessContent(int elementDepth);
    private void HandlePreserveElements(int elementDepth);
    private void HandlePreserveAttributes(int elementDepth);
    [DoesNotReturnAttribute]
private void Error(string message, Object[] args);
    private CompatibilityScope get_Scope();
    private string get_AlternateContent();
    private string get_Choice();
    private string get_Fallback();
    private string get_Requires();
    private string get_Ignorable();
    private string get_MustUnderstand();
    private string get_ProcessContent();
    private string get_PreserveElements();
    private string get_PreserveAttributes();
    private string get_CompatibilityUri();
}
[DefaultMemberAttribute("Item")]
internal class System.IO.Packaging.XmlWrappingReader : XmlReader {
    protected XmlReader _reader;
    protected IXmlLineInfo _readerAsIXmlLineInfo;
    protected IXmlNamespaceResolver _readerAsResolver;
    public XmlReaderSettings Settings { get; }
    public XmlNodeType NodeType { get; }
    public string Name { get; }
    public string LocalName { get; }
    public string NamespaceURI { get; }
    public string Prefix { get; }
    public bool HasValue { get; }
    public string Value { get; }
    public int Depth { get; }
    public string BaseURI { get; }
    public bool IsEmptyElement { get; }
    public bool IsDefault { get; }
    public XmlSpace XmlSpace { get; }
    public string XmlLang { get; }
    public Type ValueType { get; }
    public int AttributeCount { get; }
    public string Item { get; }
    public string Item { get; }
    public string Item { get; }
    public bool CanResolveEntity { get; }
    public bool EOF { get; }
    public ReadState ReadState { get; }
    public bool HasAttributes { get; }
    public XmlNameTable NameTable { get; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    protected XmlReader Reader { get; protected set; }
    internal XmlWrappingReader(XmlReader baseReader);
    public virtual XmlReaderSettings get_Settings();
    public virtual XmlNodeType get_NodeType();
    public virtual string get_Name();
    public virtual string get_LocalName();
    public virtual string get_NamespaceURI();
    public virtual string get_Prefix();
    public virtual bool get_HasValue();
    public virtual string get_Value();
    public virtual int get_Depth();
    public virtual string get_BaseURI();
    public virtual bool get_IsEmptyElement();
    public virtual bool get_IsDefault();
    public virtual XmlSpace get_XmlSpace();
    public virtual string get_XmlLang();
    public virtual Type get_ValueType();
    public virtual int get_AttributeCount();
    public virtual string get_Item(int i);
    public virtual string get_Item(string name);
    public virtual string get_Item(string name, string namespaceURI);
    public virtual bool get_CanResolveEntity();
    public virtual bool get_EOF();
    public virtual ReadState get_ReadState();
    public virtual bool get_HasAttributes();
    public virtual XmlNameTable get_NameTable();
    public virtual string GetAttribute(string name);
    public virtual string GetAttribute(string name, string namespaceURI);
    public virtual string GetAttribute(int i);
    public virtual bool MoveToAttribute(string name);
    public virtual bool MoveToAttribute(string name, string ns);
    public virtual void MoveToAttribute(int i);
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToNextAttribute();
    public virtual bool MoveToElement();
    public virtual bool Read();
    public virtual void Skip();
    public virtual string LookupNamespace(string prefix);
    private sealed virtual override string System.Xml.IXmlNamespaceResolver.LookupPrefix(string namespaceName);
    private sealed virtual override IDictionary`2<string, string> System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(XmlNamespaceScope scope);
    public virtual void ResolveEntity();
    public virtual bool ReadAttributeValue();
    protected virtual void Dispose(bool disposing);
    public virtual bool HasLineInfo();
    public virtual int get_LineNumber();
    public virtual int get_LinePosition();
    protected XmlReader get_Reader();
    [MemberNotNullAttribute("_reader")]
protected void set_Reader(XmlReader value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.IO.Packaging.ZipPackage : Package {
    private static int InitialPartListSize;
    private ZipArchive _zipArchive;
    private Stream _containerStream;
    private bool _shouldCloseContainerStream;
    private ContentTypeHelper _contentTypeHelper;
    private ZipStreamManager _zipStreamManager;
    private FileAccess _packageFileAccess;
    private FileMode _packageFileMode;
    private static string ForwardSlashString;
    private static ExtensionEqualityComparer s_extensionEqualityComparer;
    internal FileMode PackageFileMode { get; }
    internal ZipPackage(string path, FileMode packageFileMode, FileAccess packageFileAccess, FileShare share);
    internal ZipPackage(Stream s, FileMode packageFileMode, FileAccess packageFileAccess);
    private static ZipPackage();
    protected virtual PackagePart CreatePartCore(Uri partUri, string contentType, CompressionOption compressionOption);
    protected virtual PackagePart GetPartCore(Uri partUri);
    protected virtual void DeletePartCore(Uri partUri);
    protected virtual PackagePart[] GetPartsCore();
    protected virtual void FlushCore();
    protected virtual void Dispose(bool disposing);
    internal static string GetZipItemNameFromOpcName(string opcName);
    internal static string GetOpcNameFromZipItemName(string zipItemName);
    internal static void GetZipCompressionMethodFromOpcCompressionOption(CompressionOption compressionOption, CompressionLevel& compressionLevel);
    internal FileMode get_PackageFileMode();
    private static bool IsZipItemValidOpcPartOrPiece(string zipItemName);
    private static CompressionOption GetCompressionOptionFromZipFileInfo();
}
public class System.IO.Packaging.ZipPackagePart : PackagePart {
    private ZipPackage _zipPackage;
    private ZipArchiveEntry _zipArchiveEntry;
    private ZipArchive _zipArchive;
    private ZipStreamManager _zipStreamManager;
    [NullableAttribute("1")]
internal ZipArchiveEntry ZipArchiveEntry { get; }
    internal ZipPackagePart(ZipPackage zipPackage, ZipArchive zipArchive, ZipArchiveEntry zipArchiveEntry, ZipStreamManager zipStreamManager, ValidatedPartUri partUri, string contentType, CompressionOption compressionOption);
    [NullableContextAttribute("2")]
protected virtual Stream GetStreamCore(FileMode streamFileMode, FileAccess streamFileAccess);
    internal ZipArchiveEntry get_ZipArchiveEntry();
}
internal class System.IO.Packaging.ZipStreamManager : object {
    private ZipArchive _zipArchive;
    private FileAccess _packageFileAccess;
    private FileMode _packageFileMode;
    public ZipStreamManager(ZipArchive zipArchive, FileMode packageFileMode, FileAccess packageFileAccess);
    public Stream Open(ZipArchiveEntry zipArchiveEntry, FileAccess streamFileAccess);
}
internal class System.IO.Packaging.ZipWrappingStream : Stream {
    private Stream _baseStream;
    private ZipArchiveEntry _zipArchiveEntry;
    private FileMode _packageFileMode;
    private FileAccess _packageFileAccess;
    private bool _canRead;
    private bool _canWrite;
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public long Position { get; public set; }
    public long Length { get; }
    public bool CanSeek { get; }
    public ZipWrappingStream(ZipArchiveEntry zipArchiveEntry, Stream stream, FileMode packageFileMode, FileAccess packageFileAccess, bool canRead, bool canWrite);
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual void SetLength(long value);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void Flush();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual long get_Length();
    public virtual bool get_CanSeek();
    protected virtual void Dispose(bool disposing);
}
internal static class System.Obsoletions : object {
    internal static string SharedUrlFormat;
    internal static string SystemTextEncodingUTF7Message;
    internal static string SystemTextEncodingUTF7DiagId;
    internal static string PrincipalPermissionAttributeMessage;
    internal static string PrincipalPermissionAttributeDiagId;
    internal static string CodeAccessSecurityMessage;
    internal static string CodeAccessSecurityDiagId;
    internal static string ConstrainedExecutionRegionMessage;
    internal static string ConstrainedExecutionRegionDiagId;
    internal static string GlobalAssemblyCacheMessage;
    internal static string GlobalAssemblyCacheDiagId;
    internal static string ThreadAbortMessage;
    internal static string ThreadResetAbortMessage;
    internal static string ThreadAbortDiagId;
    internal static string DefaultCryptoAlgorithmsMessage;
    internal static string DefaultCryptoAlgorithmsDiagId;
    internal static string CreatePdbGeneratorMessage;
    internal static string CreatePdbGeneratorDiagId;
    internal static string AuthenticationManagerMessage;
    internal static string AuthenticationManagerDiagId;
    internal static string RemotingApisMessage;
    internal static string RemotingApisDiagId;
    internal static string BinaryFormatterMessage;
    internal static string BinaryFormatterDiagId;
    internal static string CodeBaseMessage;
    internal static string CodeBaseDiagId;
    internal static string EscapeUriStringMessage;
    internal static string EscapeUriStringDiagId;
    internal static string WebRequestMessage;
    internal static string WebRequestDiagId;
    internal static string DisablePrivateReflectionAttributeMessage;
    internal static string DisablePrivateReflectionAttributeDiagId;
    internal static string GetContextInfoMessage;
    internal static string GetContextInfoDiagId;
    internal static string StrongNameKeyPairMessage;
    internal static string StrongNameKeyPairDiagId;
    internal static string ReflectionOnlyLoadingMessage;
    internal static string ReflectionOnlyLoadingDiagId;
    internal static string RuntimeEnvironmentMessage;
    internal static string RuntimeEnvironmentDiagId;
    internal static string JsonSerializerOptionsIgnoreNullValuesMessage;
    internal static string JsonSerializerOptionsIgnoreNullValuesDiagId;
    internal static string DerivedCryptographicTypesMessage;
    internal static string DerivedCryptographicTypesDiagId;
    internal static string RijndaelMessage;
    internal static string RijndaelDiagId;
    internal static string RNGCryptoServiceProviderMessage;
    internal static string RNGCryptoServiceProviderDiagId;
    internal static string AppDomainCreateUnloadMessage;
    internal static string AppDomainCreateUnloadDiagId;
    internal static string SuppressIldasmAttributeMessage;
    internal static string SuppressIldasmAttributeDiagId;
    internal static string X509CertificateImmutableMessage;
    internal static string X509CertificateImmutableDiagId;
    internal static string PublicKeyPropertyMessage;
    internal static string PublicKeyPropertyDiagId;
    internal static string X509CertificatePrivateKeyMessage;
    internal static string X509CertificatePrivateKeyDiagId;
    internal static string ProduceLegacyHmacValuesMessage;
    internal static string ProduceLegacyHmacValuesDiagId;
    internal static string UseManagedSha1Message;
    internal static string UseManagedSha1DiagId;
    internal static string CryptoConfigEncodeOIDMessage;
    internal static string CryptoConfigEncodeOIDDiagId;
    internal static string CorruptedStateRecoveryMessage;
    internal static string CorruptedStateRecoveryDiagId;
    internal static string Rfc2898CryptDeriveKeyMessage;
    internal static string Rfc2898CryptDeriveKeyDiagId;
    internal static string CmsSignerCspParamsCtorMessage;
    internal static string CmsSignerCspParamsCtorDiagId;
    internal static string SignerInfoCounterSigMessage;
    internal static string SignerInfoCounterSigDiagId;
    internal static string RegexCompileToAssemblyMessage;
    internal static string RegexCompileToAssemblyDiagId;
    internal static string AssemblyNameMembersMessage;
    internal static string AssemblyNameMembersDiagId;
    internal static string SystemDataSerializationFormatBinaryMessage;
    internal static string SystemDataSerializationFormatBinaryDiagId;
    internal static string TlsVersion10and11Message;
    internal static string TlsVersion10and11DiagId;
    internal static string EncryptionPolicyMessage;
    internal static string EncryptionPolicyDiagId;
    internal static string Rfc2898OutdatedCtorMessage;
    internal static string Rfc2898OutdatedCtorDiagId;
    internal static string EccXmlExportImportMessage;
    internal static string EccXmlExportImportDiagId;
    internal static string EcDhPublicKeyBlobMessage;
    internal static string EcDhPublicKeyBlobDiagId;
    internal static string AssemblyNameCodeBaseMessage;
    internal static string AssemblyNameCodeBaseDiagId;
    internal static string CryptoStringFactoryMessage;
    internal static string CryptoStringFactoryDiagId;
    internal static string ControlledExecutionRunMessage;
    internal static string ControlledExecutionRunDiagId;
    internal static string XmlSecureResolverMessage;
    internal static string XmlSecureResolverDiagId;
    internal static string RsaEncryptDecryptValueMessage;
    internal static string RsaEncryptDecryptDiagId;
    internal static string JsonSerializerOptionsAddContextMessage;
    internal static string JsonSerializerOptionsAddContextDiagId;
    internal static string LegacyFormatterMessage;
    internal static string LegacyFormatterDiagId;
    internal static string LegacyFormatterImplMessage;
    internal static string LegacyFormatterImplDiagId;
    internal static string RegexExtensibilityImplMessage;
    internal static string RegexExtensibilityDiagId;
    internal static string AesGcmTagConstructorMessage;
    internal static string AesGcmTagConstructorDiagId;
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.NullablePublicOnlyAttribute : Attribute {
    public bool IncludesInternals;
    public NullablePublicOnlyAttribute(bool );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[AttributeUsageAttribute("64")]
internal class System.Runtime.InteropServices.LibraryImportAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <LibraryName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EntryPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private StringMarshalling <StringMarshalling>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <StringMarshallingCustomType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SetLastError>k__BackingField;
    public string LibraryName { get; }
    public string EntryPoint { get; public set; }
    public StringMarshalling StringMarshalling { get; public set; }
    public Type StringMarshallingCustomType { get; public set; }
    public bool SetLastError { get; public set; }
    public LibraryImportAttribute(string libraryName);
    [CompilerGeneratedAttribute]
public string get_LibraryName();
    [CompilerGeneratedAttribute]
public string get_EntryPoint();
    [CompilerGeneratedAttribute]
public void set_EntryPoint(string value);
    [CompilerGeneratedAttribute]
public StringMarshalling get_StringMarshalling();
    [CompilerGeneratedAttribute]
public void set_StringMarshalling(StringMarshalling value);
    [CompilerGeneratedAttribute]
public Type get_StringMarshallingCustomType();
    [CompilerGeneratedAttribute]
public void set_StringMarshallingCustomType(Type value);
    [CompilerGeneratedAttribute]
public bool get_SetLastError();
    [CompilerGeneratedAttribute]
public void set_SetLastError(bool value);
}
internal enum System.Runtime.InteropServices.StringMarshalling : Enum {
    public int value__;
    public static StringMarshalling Custom;
    public static StringMarshalling Utf8;
    public static StringMarshalling Utf16;
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string BadPackageFormat { get; }
    internal static string CannotModifyReadOnlyContainer { get; }
    internal static string CannotRetrievePartsOfWriteOnlyContainer { get; }
    internal static string ContainerAndPartModeIncompatible { get; }
    internal static string ContentTypeCannotHaveLeadingTrailingLWS { get; }
    internal static string CorePropertiesElementExpected { get; }
    internal static string CreateNewNotSupported { get; }
    internal static string DanglingMetadataRelationship { get; }
    internal static string DefaultTagDoesNotMatchSchema { get; }
    internal static string DuplicateCorePropertyName { get; }
    internal static string ElementIsNotEmptyElement { get; }
    internal static string EncodingNotSupported { get; }
    internal static string ExpectedRelationshipsElementTag { get; }
    internal static string ExpectingParameterValuePairs { get; }
    internal static string ExpectingSemicolon { get; }
    internal static string FileFormatException { get; }
    internal static string FileFormatExceptionWithFileName { get; }
    internal static string GetContentTypeCoreNotImplemented { get; }
    internal static string InvalidLinearWhiteSpaceCharacter { get; }
    internal static string InvalidParameterValue { get; }
    internal static string InvalidParameterValuePair { get; }
    internal static string InvalidPartUri { get; }
    internal static string InvalidPropertyNameInCorePropertiesPart { get; }
    internal static string InvalidRelationshipType { get; }
    internal static string InvalidToken_ContentType { get; }
    internal static string InvalidTypeSubType { get; }
    internal static string InvalidValueForTheAttribute { get; }
    internal static string InvalidXmlBaseAttributePresent { get; }
    internal static string MoreThanOneMetadataRelationships { get; }
    internal static string NoExternalTargetForMetadataRelationship { get; }
    internal static string NoStructuredContentInsideProperties { get; }
    internal static string NotAUniqueRelationshipId { get; }
    internal static string NotAValidRelationshipPartUri { get; }
    internal static string NotAValidXmlIdString { get; }
    internal static string NullContentTypeProvided { get; }
    internal static string NullStreamReturned { get; }
    internal static string ObjectDisposed { get; }
    internal static string OverrideTagDoesNotMatchSchema { get; }
    internal static string PackagePartDeleted { get; }
    internal static string PackagePartRelationshipDoesNotExist { get; }
    internal static string PackageRelationshipDoesNotExist { get; }
    internal static string ParentContainerClosed { get; }
    internal static string PartAlreadyExists { get; }
    internal static string PartDoesNotExist { get; }
    internal static string PartNamePrefixExists { get; }
    internal static string PartUriCannotHaveAFragment { get; }
    internal static string PartUriIsEmpty { get; }
    internal static string PartUriShouldNotEndWithForwardSlash { get; }
    internal static string PartUriShouldNotStartWithTwoForwardSlashes { get; }
    internal static string PartUriShouldStartWithForwardSlash { get; }
    internal static string PropertyStartTagExpected { get; }
    internal static string PropertyWrongNumbOfAttribsDefinedOn { get; }
    internal static string RelationshipPartIncorrectContentType { get; }
    internal static string RelationshipPartsCannotHaveRelationships { get; }
    internal static string RelationshipPartUriExpected { get; }
    internal static string RelationshipPartUriNotExpected { get; }
    internal static string RelationshipsTagHasExtraAttributes { get; }
    internal static string RelationshipTagDoesntMatchSchema { get; }
    internal static string RelationshipTargetMustBeRelative { get; }
    internal static string RelationshipToRelationshipIllegal { get; }
    internal static string RequiredAttributeEmpty { get; }
    internal static string RequiredAttributeMissing { get; }
    internal static string RequiredRelationshipAttributeMissing { get; }
    internal static string StreamObjectDisposed { get; }
    internal static string TruncateNotSupported { get; }
    internal static string TypesElementExpected { get; }
    internal static string TypesTagHasExtraAttributes { get; }
    internal static string TypesXmlDoesNotMatchSchema { get; }
    internal static string UnknownDCDateTimeXsiType { get; }
    internal static string UnknownNamespaceInCorePropertiesPart { get; }
    internal static string UnknownTagEncountered { get; }
    internal static string UnsupportedCombinationOfModeAccess { get; }
    internal static string URIShouldNotBeAbsolute { get; }
    internal static string WrongContentTypeForPropertyPart { get; }
    internal static string XCRChoiceAfterFallback { get; }
    internal static string XCRChoiceNotFound { get; }
    internal static string XCRChoiceOnlyInAC { get; }
    internal static string XCRCompatCycle { get; }
    internal static string XCRDuplicatePreserve { get; }
    internal static string XCRDuplicateProcessContent { get; }
    internal static string XCRDuplicateWildcardPreserve { get; }
    internal static string XCRDuplicateWildcardProcessContent { get; }
    internal static string XCRFallbackOnlyInAC { get; }
    internal static string XCRInvalidACChild { get; }
    internal static string XCRInvalidAttribInElement { get; }
    internal static string XCRInvalidFormat { get; }
    internal static string XCRInvalidPreserve { get; }
    internal static string XCRInvalidProcessContent { get; }
    internal static string XCRInvalidRequiresAttribute { get; }
    internal static string XCRInvalidXMLName { get; }
    internal static string XCRMultipleFallbackFound { get; }
    internal static string XCRMustUnderstandFailed { get; }
    internal static string XCRNSPreserveNotIgnorable { get; }
    internal static string XCRNSProcessContentNotIgnorable { get; }
    internal static string XCRRequiresAttribNotFound { get; }
    internal static string XCRUndefinedPrefix { get; }
    internal static string XCRUnknownCompatAttrib { get; }
    internal static string XCRUnknownCompatElement { get; }
    internal static string XsdDateTimeExpected { get; }
    internal static string CreateNewOnNonEmptyStream { get; }
    internal static string ZipZeroSizeFileIsNotValidArchive { get; }
    internal static string InnerPackageUriHasFragment { get; }
    internal static string FragmentMustStartWithHash { get; }
    internal static string UriShouldBePackScheme { get; }
    internal static string UriShouldBeAbsolute { get; }
    internal static string FileContainsCorruptedData { get; }
    private static SR();
    internal static bool UsingResourceKeys();
    private static string GetResourceString(string resourceKey);
    private static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2, object p3);
    internal static string Format(IFormatProvider provider, string resourceFormat, Object[] args);
    internal static ResourceManager get_ResourceManager();
    internal static string get_BadPackageFormat();
    internal static string get_CannotModifyReadOnlyContainer();
    internal static string get_CannotRetrievePartsOfWriteOnlyContainer();
    internal static string get_ContainerAndPartModeIncompatible();
    internal static string get_ContentTypeCannotHaveLeadingTrailingLWS();
    internal static string get_CorePropertiesElementExpected();
    internal static string get_CreateNewNotSupported();
    internal static string get_DanglingMetadataRelationship();
    internal static string get_DefaultTagDoesNotMatchSchema();
    internal static string get_DuplicateCorePropertyName();
    internal static string get_ElementIsNotEmptyElement();
    internal static string get_EncodingNotSupported();
    internal static string get_ExpectedRelationshipsElementTag();
    internal static string get_ExpectingParameterValuePairs();
    internal static string get_ExpectingSemicolon();
    internal static string get_FileFormatException();
    internal static string get_FileFormatExceptionWithFileName();
    internal static string get_GetContentTypeCoreNotImplemented();
    internal static string get_InvalidLinearWhiteSpaceCharacter();
    internal static string get_InvalidParameterValue();
    internal static string get_InvalidParameterValuePair();
    internal static string get_InvalidPartUri();
    internal static string get_InvalidPropertyNameInCorePropertiesPart();
    internal static string get_InvalidRelationshipType();
    internal static string get_InvalidToken_ContentType();
    internal static string get_InvalidTypeSubType();
    internal static string get_InvalidValueForTheAttribute();
    internal static string get_InvalidXmlBaseAttributePresent();
    internal static string get_MoreThanOneMetadataRelationships();
    internal static string get_NoExternalTargetForMetadataRelationship();
    internal static string get_NoStructuredContentInsideProperties();
    internal static string get_NotAUniqueRelationshipId();
    internal static string get_NotAValidRelationshipPartUri();
    internal static string get_NotAValidXmlIdString();
    internal static string get_NullContentTypeProvided();
    internal static string get_NullStreamReturned();
    internal static string get_ObjectDisposed();
    internal static string get_OverrideTagDoesNotMatchSchema();
    internal static string get_PackagePartDeleted();
    internal static string get_PackagePartRelationshipDoesNotExist();
    internal static string get_PackageRelationshipDoesNotExist();
    internal static string get_ParentContainerClosed();
    internal static string get_PartAlreadyExists();
    internal static string get_PartDoesNotExist();
    internal static string get_PartNamePrefixExists();
    internal static string get_PartUriCannotHaveAFragment();
    internal static string get_PartUriIsEmpty();
    internal static string get_PartUriShouldNotEndWithForwardSlash();
    internal static string get_PartUriShouldNotStartWithTwoForwardSlashes();
    internal static string get_PartUriShouldStartWithForwardSlash();
    internal static string get_PropertyStartTagExpected();
    internal static string get_PropertyWrongNumbOfAttribsDefinedOn();
    internal static string get_RelationshipPartIncorrectContentType();
    internal static string get_RelationshipPartsCannotHaveRelationships();
    internal static string get_RelationshipPartUriExpected();
    internal static string get_RelationshipPartUriNotExpected();
    internal static string get_RelationshipsTagHasExtraAttributes();
    internal static string get_RelationshipTagDoesntMatchSchema();
    internal static string get_RelationshipTargetMustBeRelative();
    internal static string get_RelationshipToRelationshipIllegal();
    internal static string get_RequiredAttributeEmpty();
    internal static string get_RequiredAttributeMissing();
    internal static string get_RequiredRelationshipAttributeMissing();
    internal static string get_StreamObjectDisposed();
    internal static string get_TruncateNotSupported();
    internal static string get_TypesElementExpected();
    internal static string get_TypesTagHasExtraAttributes();
    internal static string get_TypesXmlDoesNotMatchSchema();
    internal static string get_UnknownDCDateTimeXsiType();
    internal static string get_UnknownNamespaceInCorePropertiesPart();
    internal static string get_UnknownTagEncountered();
    internal static string get_UnsupportedCombinationOfModeAccess();
    internal static string get_URIShouldNotBeAbsolute();
    internal static string get_WrongContentTypeForPropertyPart();
    internal static string get_XCRChoiceAfterFallback();
    internal static string get_XCRChoiceNotFound();
    internal static string get_XCRChoiceOnlyInAC();
    internal static string get_XCRCompatCycle();
    internal static string get_XCRDuplicatePreserve();
    internal static string get_XCRDuplicateProcessContent();
    internal static string get_XCRDuplicateWildcardPreserve();
    internal static string get_XCRDuplicateWildcardProcessContent();
    internal static string get_XCRFallbackOnlyInAC();
    internal static string get_XCRInvalidACChild();
    internal static string get_XCRInvalidAttribInElement();
    internal static string get_XCRInvalidFormat();
    internal static string get_XCRInvalidPreserve();
    internal static string get_XCRInvalidProcessContent();
    internal static string get_XCRInvalidRequiresAttribute();
    internal static string get_XCRInvalidXMLName();
    internal static string get_XCRMultipleFallbackFound();
    internal static string get_XCRMustUnderstandFailed();
    internal static string get_XCRNSPreserveNotIgnorable();
    internal static string get_XCRNSProcessContentNotIgnorable();
    internal static string get_XCRRequiresAttribNotFound();
    internal static string get_XCRUndefinedPrefix();
    internal static string get_XCRUnknownCompatAttrib();
    internal static string get_XCRUnknownCompatElement();
    internal static string get_XsdDateTimeExpected();
    internal static string get_CreateNewOnNonEmptyStream();
    internal static string get_ZipZeroSizeFileIsNotValidArchive();
    internal static string get_InnerPackageUriHasFragment();
    internal static string get_FragmentMustStartWithHash();
    internal static string get_UriShouldBePackScheme();
    internal static string get_UriShouldBeAbsolute();
    internal static string get_FileContainsCorruptedData();
}
