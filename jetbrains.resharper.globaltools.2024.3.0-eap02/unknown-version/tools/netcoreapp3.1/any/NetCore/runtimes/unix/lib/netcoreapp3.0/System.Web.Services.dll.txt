internal static class Consts : object {
    public static string MonoVersion;
    public static string MonoCompany;
    public static string MonoProduct;
    public static string MonoCopyright;
    public static string MonoCorlibVersion;
    public static string FxVersion;
    public static string FxFileVersion;
    public static string EnvironmentVersion;
    public static string VsVersion;
    public static string VsFileVersion;
    private static string PublicKeyToken;
    public static string AssemblyI18N;
    public static string AssemblyMicrosoft_JScript;
    public static string AssemblyMicrosoft_VisualStudio;
    public static string AssemblyMicrosoft_VisualStudio_Web;
    public static string AssemblyMicrosoft_VSDesigner;
    public static string AssemblyMono_Http;
    public static string AssemblyMono_Posix;
    public static string AssemblyMono_Security;
    public static string AssemblyMono_Messaging_RabbitMQ;
    public static string AssemblyCorlib;
    public static string AssemblySystem;
    public static string AssemblySystem_Data;
    public static string AssemblySystem_Design;
    public static string AssemblySystem_DirectoryServices;
    public static string AssemblySystem_Drawing;
    public static string AssemblySystem_Drawing_Design;
    public static string AssemblySystem_Messaging;
    public static string AssemblySystem_Security;
    public static string AssemblySystem_ServiceProcess;
    public static string AssemblySystem_Web;
    public static string AssemblySystem_Windows_Forms;
    public static string AssemblySystem_2_0;
    public static string AssemblySystemCore_3_5;
    public static string AssemblySystem_Core;
    public static string WindowsBase_3_0;
    public static string AssemblyWindowsBase;
    public static string AssemblyPresentationCore_3_5;
    public static string AssemblyPresentationCore_4_0;
    public static string AssemblyPresentationFramework_3_5;
    public static string AssemblySystemServiceModel_3_0;
}
internal class System.ComponentModel.CompModSwitches : object {
    private static BooleanSwitch dynamicDiscoVirtualSearch;
    private static TraceSwitch dynamicDiscoSearcher;
    private static BooleanSwitch disableRemoteDebugging;
    private static TraceSwitch remote;
    public static BooleanSwitch DisableRemoteDebugging { get; }
    public static TraceSwitch DynamicDiscoverySearcher { get; }
    public static BooleanSwitch DynamicDiscoveryVirtualSearch { get; }
    public static TraceSwitch Remote { get; }
    public static BooleanSwitch get_DisableRemoteDebugging();
    public static TraceSwitch get_DynamicDiscoverySearcher();
    public static BooleanSwitch get_DynamicDiscoveryVirtualSearch();
    public static TraceSwitch get_Remote();
}
internal static class System.Configuration.PrivilegedConfigurationManager : object {
    internal static ConnectionStringSettingsCollection ConnectionStrings { get; }
    internal static ConnectionStringSettingsCollection get_ConnectionStrings();
    internal static object GetSection(string sectionName);
}
internal class System.InvariantComparer : object {
    private CompareInfo m_compareInfo;
    internal static InvariantComparer Default;
    private static InvariantComparer();
    public sealed virtual int Compare(object a, object b);
}
public class System.Web.Services.Configuration.DiagnosticsElement : ConfigurationElement {
    private ConfigurationPropertyCollection properties;
    private ConfigurationProperty suppressReturningExceptions;
    [ConfigurationPropertyAttribute("suppressReturningExceptions")]
public bool SuppressReturningExceptions { get; public set; }
    protected ConfigurationPropertyCollection Properties { get; }
    public bool get_SuppressReturningExceptions();
    public void set_SuppressReturningExceptions(bool value);
    protected virtual ConfigurationPropertyCollection get_Properties();
}
public enum System.Web.Services.Configuration.PriorityGroup : Enum {
    public int value__;
    public static PriorityGroup High;
    public static PriorityGroup Low;
}
public class System.Web.Services.Configuration.ProtocolElement : ConfigurationElement {
    private ConfigurationPropertyCollection properties;
    private ConfigurationProperty name;
    [ConfigurationPropertyAttribute("name")]
public WebServiceProtocols Name { get; public set; }
    protected ConfigurationPropertyCollection Properties { get; }
    public ProtocolElement(WebServiceProtocols protocol);
    public WebServiceProtocols get_Name();
    public void set_Name(WebServiceProtocols value);
    protected virtual ConfigurationPropertyCollection get_Properties();
    private bool IsValidProtocolsValue(WebServiceProtocols value);
}
[DefaultMemberAttribute("Item")]
[ConfigurationCollectionAttribute("System.Web.Services.Configuration.ProtocolElement")]
public class System.Web.Services.Configuration.ProtocolElementCollection : ConfigurationElementCollection {
    public ProtocolElement Item { get; public set; }
    public ProtocolElement Item { get; public set; }
    public void Add(ProtocolElement element);
    public void Clear();
    public bool ContainsKey(object key);
    protected virtual ConfigurationElement CreateNewElement();
    public void CopyTo(ProtocolElement[] array, int index);
    protected virtual object GetElementKey(ConfigurationElement element);
    public int IndexOf(ProtocolElement element);
    public void Remove(ProtocolElement element);
    public void RemoveAt(object key);
    public void RemoveAt(int index);
    internal void SetDefaults();
    public ProtocolElement get_Item(object key);
    public void set_Item(object key, ProtocolElement value);
    public ProtocolElement get_Item(int index);
    public void set_Item(int index, ProtocolElement value);
}
public class System.Web.Services.Configuration.SoapEnvelopeProcessingElement : ConfigurationElement {
    private ConfigurationPropertyCollection properties;
    private ConfigurationProperty readTimeout;
    private ConfigurationProperty strict;
    [ConfigurationPropertyAttribute("readTimeout")]
[TypeConverterAttribute("System.Configuration.InfiniteIntConverter")]
public int ReadTimeout { get; public set; }
    [ConfigurationPropertyAttribute("strict")]
public bool IsStrict { get; public set; }
    protected ConfigurationPropertyCollection Properties { get; }
    public SoapEnvelopeProcessingElement(int readTimeout);
    public SoapEnvelopeProcessingElement(int readTimeout, bool strict);
    public int get_ReadTimeout();
    public void set_ReadTimeout(int value);
    public bool get_IsStrict();
    public void set_IsStrict(bool value);
    protected virtual ConfigurationPropertyCollection get_Properties();
}
public class System.Web.Services.Configuration.SoapExtensionTypeElement : ConfigurationElement {
    private ConfigurationPropertyCollection properties;
    private ConfigurationProperty group;
    private ConfigurationProperty priority;
    private ConfigurationProperty type;
    [ConfigurationPropertyAttribute("group")]
public PriorityGroup Group { get; public set; }
    [ConfigurationPropertyAttribute("priority")]
[IntegerValidatorAttribute]
public int Priority { get; public set; }
    [ConfigurationPropertyAttribute("type")]
[TypeConverterAttribute("System.Web.Services.Configuration.TypeTypeConverter")]
public Type Type { get; public set; }
    protected ConfigurationPropertyCollection Properties { get; }
    public SoapExtensionTypeElement(string type, int priority, PriorityGroup group);
    public SoapExtensionTypeElement(Type type, int priority, PriorityGroup group);
    public PriorityGroup get_Group();
    public void set_Group(PriorityGroup value);
    public int get_Priority();
    public void set_Priority(int value);
    public Type get_Type();
    public void set_Type(Type value);
    protected virtual ConfigurationPropertyCollection get_Properties();
}
[DefaultMemberAttribute("Item")]
[ConfigurationCollectionAttribute("System.Web.Services.Configuration.SoapExtensionTypeElement")]
public class System.Web.Services.Configuration.SoapExtensionTypeElementCollection : ConfigurationElementCollection {
    public SoapExtensionTypeElement Item { get; public set; }
    public SoapExtensionTypeElement Item { get; public set; }
    public void Add(SoapExtensionTypeElement element);
    public void Clear();
    public bool ContainsKey(object key);
    protected virtual ConfigurationElement CreateNewElement();
    public void CopyTo(SoapExtensionTypeElement[] array, int index);
    protected virtual object GetElementKey(ConfigurationElement element);
    public int IndexOf(SoapExtensionTypeElement element);
    public void Remove(SoapExtensionTypeElement element);
    public void RemoveAt(object key);
    public void RemoveAt(int index);
    public SoapExtensionTypeElement get_Item(object key);
    public void set_Item(object key, SoapExtensionTypeElement value);
    public SoapExtensionTypeElement get_Item(int index);
    public void set_Item(int index, SoapExtensionTypeElement value);
}
internal class System.Web.Services.Configuration.TypeAndName : object {
    public Type type;
    public string name;
    public TypeAndName(string name);
    public TypeAndName(Type type);
    public virtual int GetHashCode();
    public virtual bool Equals(object comparand);
}
internal class System.Web.Services.Configuration.TypeAndNameConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public class System.Web.Services.Configuration.TypeElement : ConfigurationElement {
    private ConfigurationPropertyCollection properties;
    private ConfigurationProperty type;
    [ConfigurationPropertyAttribute("type")]
[TypeConverterAttribute("System.Web.Services.Configuration.TypeAndNameConverter")]
public Type Type { get; public set; }
    protected ConfigurationPropertyCollection Properties { get; }
    public TypeElement(string type);
    public TypeElement(Type type);
    public Type get_Type();
    public void set_Type(Type value);
    protected virtual ConfigurationPropertyCollection get_Properties();
}
[DefaultMemberAttribute("Item")]
[ConfigurationCollectionAttribute("System.Web.Services.Configuration.TypeElement")]
public class System.Web.Services.Configuration.TypeElementCollection : ConfigurationElementCollection {
    public TypeElement Item { get; public set; }
    public TypeElement Item { get; public set; }
    public void Add(TypeElement element);
    public void Clear();
    public bool ContainsKey(object key);
    protected virtual ConfigurationElement CreateNewElement();
    public void CopyTo(TypeElement[] array, int index);
    protected virtual object GetElementKey(ConfigurationElement element);
    public int IndexOf(TypeElement element);
    public void Remove(TypeElement element);
    public void RemoveAt(object key);
    public void RemoveAt(int index);
    public TypeElement get_Item(object key);
    public void set_Item(object key, TypeElement value);
    public TypeElement get_Item(int index);
    public void set_Item(int index, TypeElement value);
}
internal class System.Web.Services.Configuration.TypeTypeConverter : TypeAndNameConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
[FlagsAttribute]
public enum System.Web.Services.Configuration.WebServiceProtocols : Enum {
    public int value__;
    public static WebServiceProtocols Unknown;
    public static WebServiceProtocols HttpSoap;
    public static WebServiceProtocols HttpGet;
    public static WebServiceProtocols HttpPost;
    public static WebServiceProtocols Documentation;
    public static WebServiceProtocols HttpPostLocalhost;
    public static WebServiceProtocols HttpSoap12;
    public static WebServiceProtocols AnyHttpSoap;
}
public class System.Web.Services.Configuration.WebServicesSection : ConfigurationSection {
    private ConfigurationPropertyCollection properties;
    private static object classSyncObject;
    private static string SectionName;
    private ConfigurationProperty conformanceWarnings;
    private ConfigurationProperty protocols;
    private ConfigurationProperty serviceDescriptionFormatExtensionTypes;
    private ConfigurationProperty soapEnvelopeProcessing;
    private ConfigurationProperty soapExtensionImporterTypes;
    private ConfigurationProperty soapExtensionReflectorTypes;
    private ConfigurationProperty soapExtensionTypes;
    private ConfigurationProperty soapTransportImporterTypes;
    private ConfigurationProperty wsdlHelpGenerator;
    private ConfigurationProperty soapServerProtocolFactoryType;
    private ConfigurationProperty diagnostics;
    private Type[] defaultFormatTypes;
    private Type[] discoveryReferenceTypes;
    private XmlSerializer discoveryDocumentSerializer;
    private WebServiceProtocols enabledProtocols;
    private Type[] mimeImporterTypes;
    private Type[] mimeReflectorTypes;
    private Type[] parameterReaderTypes;
    private Type[] protocolImporterTypes;
    private Type[] protocolReflectorTypes;
    private Type[] returnWriterTypes;
    private ServerProtocolFactory[] serverProtocolFactories;
    private Type soapServerProtocolFactory;
    private static object ClassSyncObject { get; }
    [ConfigurationPropertyAttribute("conformanceWarnings")]
public WsiProfilesElementCollection ConformanceWarnings { get; }
    internal WsiProfiles EnabledConformanceWarnings { get; }
    public static WebServicesSection Current { get; }
    internal XmlSerializer DiscoveryDocumentSerializer { get; }
    internal Type[] DiscoveryReferenceTypes { get; }
    public WebServiceProtocols EnabledProtocols { get; }
    internal Type[] MimeImporterTypes { get; }
    internal Type[] MimeReflectorTypes { get; }
    internal Type[] ParameterReaderTypes { get; }
    protected ConfigurationPropertyCollection Properties { get; }
    internal Type[] ProtocolImporterTypes { get; internal set; }
    internal Type[] ProtocolReflectorTypes { get; internal set; }
    [ConfigurationPropertyAttribute("protocols")]
public ProtocolElementCollection Protocols { get; }
    [ConfigurationPropertyAttribute("soapEnvelopeProcessing")]
public SoapEnvelopeProcessingElement SoapEnvelopeProcessing { get; public set; }
    public DiagnosticsElement Diagnostics { get; public set; }
    internal Type[] ReturnWriterTypes { get; }
    internal ServerProtocolFactory[] ServerProtocolFactories { get; }
    internal bool ServiceDescriptionExtended { get; }
    [ConfigurationPropertyAttribute("serviceDescriptionFormatExtensionTypes")]
public TypeElementCollection ServiceDescriptionFormatExtensionTypes { get; }
    [ConfigurationPropertyAttribute("soapExtensionImporterTypes")]
public TypeElementCollection SoapExtensionImporterTypes { get; }
    [ConfigurationPropertyAttribute("soapExtensionReflectorTypes")]
public TypeElementCollection SoapExtensionReflectorTypes { get; }
    [ConfigurationPropertyAttribute("soapExtensionTypes")]
public SoapExtensionTypeElementCollection SoapExtensionTypes { get; }
    [ConfigurationPropertyAttribute("soapServerProtocolFactory")]
public TypeElement SoapServerProtocolFactoryType { get; }
    internal Type SoapServerProtocolFactory { get; }
    [ConfigurationPropertyAttribute("soapTransportImporterTypes")]
public TypeElementCollection SoapTransportImporterTypes { get; }
    internal Type[] SoapTransportImporters { get; }
    [ConfigurationPropertyAttribute("wsdlHelpGenerator")]
public WsdlHelpGeneratorElement WsdlHelpGenerator { get; }
    private static WebServicesSection();
    private static object get_ClassSyncObject();
    public WsiProfilesElementCollection get_ConformanceWarnings();
    internal WsiProfiles get_EnabledConformanceWarnings();
    public static WebServicesSection get_Current();
    private static WebServicesSection GetConfigFromHttpContext();
    internal XmlSerializer get_DiscoveryDocumentSerializer();
    internal Type[] get_DiscoveryReferenceTypes();
    public WebServiceProtocols get_EnabledProtocols();
    internal Type[] GetAllFormatExtensionTypes();
    private static XmlFormatExtensionPointAttribute GetExtensionPointAttribute(Type type);
    public static WebServicesSection GetSection(Configuration config);
    protected virtual void InitializeDefault();
    internal static void LoadXmlFormatExtensions(Type[] extensionTypes, XmlAttributeOverrides overrides, XmlSerializerNamespaces namespaces);
    internal Type[] get_MimeImporterTypes();
    internal Type[] get_MimeReflectorTypes();
    internal Type[] get_ParameterReaderTypes();
    protected virtual ConfigurationPropertyCollection get_Properties();
    internal Type[] get_ProtocolImporterTypes();
    internal void set_ProtocolImporterTypes(Type[] value);
    internal Type[] get_ProtocolReflectorTypes();
    internal void set_ProtocolReflectorTypes(Type[] value);
    public ProtocolElementCollection get_Protocols();
    public SoapEnvelopeProcessingElement get_SoapEnvelopeProcessing();
    public void set_SoapEnvelopeProcessing(SoapEnvelopeProcessingElement value);
    public DiagnosticsElement get_Diagnostics();
    public void set_Diagnostics(DiagnosticsElement value);
    protected virtual void Reset(ConfigurationElement parentElement);
    internal Type[] get_ReturnWriterTypes();
    internal ServerProtocolFactory[] get_ServerProtocolFactories();
    internal bool get_ServiceDescriptionExtended();
    public TypeElementCollection get_ServiceDescriptionFormatExtensionTypes();
    public TypeElementCollection get_SoapExtensionImporterTypes();
    public TypeElementCollection get_SoapExtensionReflectorTypes();
    public SoapExtensionTypeElementCollection get_SoapExtensionTypes();
    public TypeElement get_SoapServerProtocolFactoryType();
    internal Type get_SoapServerProtocolFactory();
    public TypeElementCollection get_SoapTransportImporterTypes();
    internal Type[] get_SoapTransportImporters();
    private void TurnOnGetAndPost();
    public WsdlHelpGeneratorElement get_WsdlHelpGenerator();
}
public class System.Web.Services.Configuration.WsdlHelpGeneratorElement : ConfigurationElement {
    private ConfigurationPropertyCollection properties;
    private ConfigurationProperty href;
    private string virtualPath;
    private string actualPath;
    private bool needToValidateHref;
    internal string HelpGeneratorVirtualPath { get; }
    internal string HelpGeneratorPath { get; }
    [ConfigurationPropertyAttribute("href")]
public string Href { get; public set; }
    protected ConfigurationPropertyCollection Properties { get; }
    private string GetConfigurationDirectory();
    internal string get_HelpGeneratorVirtualPath();
    internal string get_HelpGeneratorPath();
    public string get_Href();
    public void set_Href(string value);
    protected virtual ConfigurationPropertyCollection get_Properties();
    protected virtual void DeserializeElement(XmlReader reader, bool serializeCollectionKey);
    protected virtual void Reset(ConfigurationElement parentElement);
    internal void SetDefaults();
    private static void CheckIOReadPermission(string path, string file);
}
public class System.Web.Services.Configuration.WsiProfilesElement : ConfigurationElement {
    private ConfigurationPropertyCollection properties;
    private ConfigurationProperty name;
    [ConfigurationPropertyAttribute("name")]
public WsiProfiles Name { get; public set; }
    protected ConfigurationPropertyCollection Properties { get; }
    public WsiProfilesElement(WsiProfiles name);
    public WsiProfiles get_Name();
    public void set_Name(WsiProfiles value);
    protected virtual ConfigurationPropertyCollection get_Properties();
    private bool IsValidWsiProfilesValue(WsiProfiles value);
}
[DefaultMemberAttribute("Item")]
[ConfigurationCollectionAttribute("System.Web.Services.Configuration.WsiProfilesElement")]
public class System.Web.Services.Configuration.WsiProfilesElementCollection : ConfigurationElementCollection {
    public WsiProfilesElement Item { get; public set; }
    public WsiProfilesElement Item { get; public set; }
    public void Add(WsiProfilesElement element);
    public void Clear();
    public bool ContainsKey(object key);
    protected virtual ConfigurationElement CreateNewElement();
    public void CopyTo(WsiProfilesElement[] array, int index);
    protected virtual object GetElementKey(ConfigurationElement element);
    public int IndexOf(WsiProfilesElement element);
    public void Remove(WsiProfilesElement element);
    public void RemoveAt(object key);
    public void RemoveAt(int index);
    internal void SetDefaults();
    public WsiProfilesElement get_Item(object key);
    public void set_Item(object key, WsiProfilesElement value);
    public WsiProfilesElement get_Item(int index);
    public void set_Item(int index, WsiProfilesElement value);
}
[AttributeUsageAttribute("4")]
public class System.Web.Services.Configuration.XmlFormatExtensionAttribute : Attribute {
    private Type[] types;
    private string name;
    private string ns;
    public Type[] ExtensionPoints { get; public set; }
    public string Namespace { get; public set; }
    public string ElementName { get; public set; }
    public XmlFormatExtensionAttribute(string elementName, string ns, Type extensionPoint1);
    public XmlFormatExtensionAttribute(string elementName, string ns, Type extensionPoint1, Type extensionPoint2);
    public XmlFormatExtensionAttribute(string elementName, string ns, Type extensionPoint1, Type extensionPoint2, Type extensionPoint3);
    public XmlFormatExtensionAttribute(string elementName, string ns, Type extensionPoint1, Type extensionPoint2, Type extensionPoint3, Type extensionPoint4);
    public XmlFormatExtensionAttribute(string elementName, string ns, Type[] extensionPoints);
    public Type[] get_ExtensionPoints();
    public void set_ExtensionPoints(Type[] value);
    public string get_Namespace();
    public void set_Namespace(string value);
    public string get_ElementName();
    public void set_ElementName(string value);
}
[AttributeUsageAttribute("4")]
public class System.Web.Services.Configuration.XmlFormatExtensionPointAttribute : Attribute {
    private string name;
    private bool allowElements;
    public string MemberName { get; public set; }
    public bool AllowElements { get; public set; }
    public XmlFormatExtensionPointAttribute(string memberName);
    public string get_MemberName();
    public void set_MemberName(string value);
    public bool get_AllowElements();
    public void set_AllowElements(bool value);
}
[AttributeUsageAttribute("4")]
public class System.Web.Services.Configuration.XmlFormatExtensionPrefixAttribute : Attribute {
    private string prefix;
    private string ns;
    public string Prefix { get; public set; }
    public string Namespace { get; public set; }
    public XmlFormatExtensionPrefixAttribute(string prefix, string ns);
    public string get_Prefix();
    public void set_Prefix(string value);
    public string get_Namespace();
    public void set_Namespace(string value);
}
public class System.Web.Services.Description.BasicProfileViolation : object {
    private WsiProfiles claims;
    private string normativeStatement;
    private string details;
    private string recommendation;
    private StringCollection elements;
    public WsiProfiles Claims { get; }
    public string Details { get; }
    public StringCollection Elements { get; }
    public string NormativeStatement { get; }
    public string Recommendation { get; }
    internal BasicProfileViolation(string normativeStatement);
    internal BasicProfileViolation(string normativeStatement, string element);
    public WsiProfiles get_Claims();
    public string get_Details();
    public StringCollection get_Elements();
    public string get_NormativeStatement();
    public string get_Recommendation();
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
public class System.Web.Services.Description.BasicProfileViolationCollection : CollectionBase {
    private Hashtable violations;
    public BasicProfileViolation Item { get; public set; }
    public BasicProfileViolation get_Item(int index);
    public void set_Item(int index, BasicProfileViolation value);
    internal int Add(BasicProfileViolation violation);
    internal int Add(string normativeStatement);
    internal int Add(string normativeStatement, string element);
    private sealed virtual override IEnumerator`1<BasicProfileViolation> System.Collections.Generic.IEnumerable<System.Web.Services.Description.BasicProfileViolation>.GetEnumerator();
    public void Insert(int index, BasicProfileViolation violation);
    public int IndexOf(BasicProfileViolation violation);
    public bool Contains(BasicProfileViolation violation);
    public void Remove(BasicProfileViolation violation);
    public void CopyTo(BasicProfileViolation[] array, int index);
    public virtual string ToString();
}
public class System.Web.Services.Description.BasicProfileViolationEnumerator : object {
    private BasicProfileViolationCollection list;
    private int idx;
    private int end;
    public BasicProfileViolation Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    public BasicProfileViolationEnumerator(BasicProfileViolationCollection list);
    public sealed virtual void Dispose();
    public sealed virtual bool MoveNext();
    public sealed virtual BasicProfileViolation get_Current();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    private sealed virtual override void System.Collections.IEnumerator.Reset();
}
[XmlFormatExtensionPointAttribute("Extensions")]
public class System.Web.Services.Description.Binding : NamedItem {
    private ServiceDescriptionFormatExtensionCollection extensions;
    private OperationBindingCollection operations;
    private XmlQualifiedName type;
    private ServiceDescription parent;
    public ServiceDescription ServiceDescription { get; }
    [XmlIgnoreAttribute]
public ServiceDescriptionFormatExtensionCollection Extensions { get; }
    [XmlElementAttribute("operation")]
public OperationBindingCollection Operations { get; }
    [XmlAttributeAttribute("type")]
public XmlQualifiedName Type { get; public set; }
    internal void SetParent(ServiceDescription parent);
    public ServiceDescription get_ServiceDescription();
    public virtual ServiceDescriptionFormatExtensionCollection get_Extensions();
    public OperationBindingCollection get_Operations();
    public XmlQualifiedName get_Type();
    public void set_Type(XmlQualifiedName value);
}
[DefaultMemberAttribute("Item")]
public class System.Web.Services.Description.BindingCollection : ServiceDescriptionBaseCollection {
    public Binding Item { get; public set; }
    public Binding Item { get; }
    internal BindingCollection(ServiceDescription serviceDescription);
    public Binding get_Item(int index);
    public void set_Item(int index, Binding value);
    public int Add(Binding binding);
    public void Insert(int index, Binding binding);
    public int IndexOf(Binding binding);
    public bool Contains(Binding binding);
    public void Remove(Binding binding);
    public void CopyTo(Binding[] array, int index);
    public Binding get_Item(string name);
    protected virtual string GetKey(object value);
    protected virtual void SetParent(object value, object parent);
}
internal enum System.Web.Services.Description.CodeFlags : Enum {
    public int value__;
    public static CodeFlags IsPublic;
    public static CodeFlags IsAbstract;
    public static CodeFlags IsStruct;
    public static CodeFlags IsNew;
    public static CodeFlags IsByRef;
    public static CodeFlags IsOut;
    public static CodeFlags IsInterface;
}
internal class System.Web.Services.Description.DelegateInfo : object {
    internal string handlerType;
    internal string handlerArgs;
    internal DelegateInfo(string handlerType, string handlerArgs);
}
public abstract class System.Web.Services.Description.DocumentableItem : object {
    private XmlDocument parent;
    private string documentation;
    private XmlElement documentationElement;
    private XmlAttribute[] anyAttribute;
    private XmlSerializerNamespaces namespaces;
    [XmlIgnoreAttribute]
public string Documentation { get; public set; }
    [XmlAnyElementAttribute("documentation")]
[ComVisibleAttribute("False")]
public XmlElement DocumentationElement { get; public set; }
    [XmlAnyAttributeAttribute]
public XmlAttribute[] ExtensibleAttributes { get; public set; }
    [XmlNamespaceDeclarationsAttribute]
public XmlSerializerNamespaces Namespaces { get; public set; }
    [XmlIgnoreAttribute]
public ServiceDescriptionFormatExtensionCollection Extensions { get; }
    internal XmlDocument Parent { get; }
    public string get_Documentation();
    public void set_Documentation(string value);
    public XmlElement get_DocumentationElement();
    public void set_DocumentationElement(XmlElement value);
    public XmlAttribute[] get_ExtensibleAttributes();
    public void set_ExtensibleAttributes(XmlAttribute[] value);
    public XmlSerializerNamespaces get_Namespaces();
    public void set_Namespaces(XmlSerializerNamespaces value);
    public abstract virtual ServiceDescriptionFormatExtensionCollection get_Extensions();
    internal XmlDocument get_Parent();
    internal XmlElement GetDocumentationElement();
}
[XmlFormatExtensionPointAttribute("Extensions")]
public class System.Web.Services.Description.FaultBinding : MessageBinding {
    private ServiceDescriptionFormatExtensionCollection extensions;
    [XmlIgnoreAttribute]
public ServiceDescriptionFormatExtensionCollection Extensions { get; }
    public virtual ServiceDescriptionFormatExtensionCollection get_Extensions();
}
[DefaultMemberAttribute("Item")]
public class System.Web.Services.Description.FaultBindingCollection : ServiceDescriptionBaseCollection {
    public FaultBinding Item { get; public set; }
    public FaultBinding Item { get; }
    internal FaultBindingCollection(OperationBinding operationBinding);
    public FaultBinding get_Item(int index);
    public void set_Item(int index, FaultBinding value);
    public int Add(FaultBinding bindingOperationFault);
    public void Insert(int index, FaultBinding bindingOperationFault);
    public int IndexOf(FaultBinding bindingOperationFault);
    public bool Contains(FaultBinding bindingOperationFault);
    public void Remove(FaultBinding bindingOperationFault);
    public void CopyTo(FaultBinding[] array, int index);
    public FaultBinding get_Item(string name);
    protected virtual string GetKey(object value);
    protected virtual void SetParent(object value, object parent);
}
internal class System.Web.Services.Description.GlobalSoapHeader : object {
    internal string fieldName;
    internal XmlTypeMapping mapping;
    internal bool isEncoded;
}
[XmlFormatExtensionAttribute("address", "http://schemas.xmlsoap.org/wsdl/http/", "System.Web.Services.Description.Port")]
public class System.Web.Services.Description.HttpAddressBinding : ServiceDescriptionFormatExtension {
    private string location;
    [XmlAttributeAttribute("location")]
public string Location { get; public set; }
    public string get_Location();
    public void set_Location(string value);
}
[XmlFormatExtensionAttribute("binding", "http://schemas.xmlsoap.org/wsdl/http/", "System.Web.Services.Description.Binding")]
[XmlFormatExtensionPrefixAttribute("http", "http://schemas.xmlsoap.org/wsdl/http/")]
public class System.Web.Services.Description.HttpBinding : ServiceDescriptionFormatExtension {
    private string verb;
    public static string Namespace;
    [XmlAttributeAttribute("verb")]
public string Verb { get; public set; }
    public string get_Verb();
    public void set_Verb(string value);
}
internal class System.Web.Services.Description.HttpGetProtocolImporter : HttpProtocolImporter {
    public string ProtocolName { get; }
    internal Type BaseClass { get; }
    public virtual string get_ProtocolName();
    internal virtual Type get_BaseClass();
    protected virtual bool IsBindingSupported();
}
internal class System.Web.Services.Description.HttpGetProtocolReflector : HttpProtocolReflector {
    public string ProtocolName { get; }
    public virtual string get_ProtocolName();
    protected virtual void BeginClass();
    protected virtual bool ReflectMethod();
}
internal class System.Web.Services.Description.HttpMethodInfo : object {
    internal MimeParameterCollection UrlParameters;
    internal MimeParameterCollection MimeParameters;
    internal MimeReturn MimeReturn;
    internal string Name;
    internal string Href;
}
[XmlFormatExtensionAttribute("operation", "http://schemas.xmlsoap.org/wsdl/http/", "System.Web.Services.Description.OperationBinding")]
public class System.Web.Services.Description.HttpOperationBinding : ServiceDescriptionFormatExtension {
    private string location;
    [XmlAttributeAttribute("location")]
public string Location { get; public set; }
    public string get_Location();
    public void set_Location(string value);
}
internal class System.Web.Services.Description.HttpPostProtocolImporter : HttpProtocolImporter {
    public string ProtocolName { get; }
    internal Type BaseClass { get; }
    public virtual string get_ProtocolName();
    internal virtual Type get_BaseClass();
    protected virtual bool IsBindingSupported();
}
internal class System.Web.Services.Description.HttpPostProtocolReflector : HttpProtocolReflector {
    public string ProtocolName { get; }
    public virtual string get_ProtocolName();
    protected virtual void BeginClass();
    protected virtual bool ReflectMethod();
}
internal abstract class System.Web.Services.Description.HttpProtocolImporter : ProtocolImporter {
    private MimeImporter[] importers;
    private ArrayList[] importedParameters;
    private ArrayList[] importedReturns;
    private bool hasInputPayload;
    private ArrayList codeClasses;
    internal Type BaseClass { get; }
    protected HttpProtocolImporter(bool hasInputPayload);
    private MimeParameterCollection ImportMimeParameters();
    private MimeReturn ImportMimeReturn();
    private MimeParameterCollection ImportUrlParameters();
    internal MimeParameterCollection ImportStringParametersMessage();
    private MimeParameter ImportUrlParameter(MessagePart part);
    private bool IsRepeatingParameter(MessagePart part);
    private static void AppendMetadata(CodeAttributeDeclarationCollection from, CodeAttributeDeclarationCollection to);
    private CodeMemberMethod GenerateMethod(HttpMethodInfo method);
    private void CreateInvokeParams(CodeExpression[] invokeParams, HttpMethodInfo method, String[] parameterNames);
    protected virtual bool IsOperationFlowSupported(OperationFlow flow);
    protected virtual CodeMemberMethod GenerateMethod();
    protected virtual CodeTypeDeclaration BeginClass();
    protected virtual void EndNamespace();
    internal abstract virtual Type get_BaseClass();
}
internal abstract class System.Web.Services.Description.HttpProtocolReflector : ProtocolReflector {
    private MimeReflector[] reflectors;
    internal string MethodUrl { get; }
    protected bool ReflectMimeParameters();
    protected bool ReflectMimeReturn();
    protected bool ReflectUrlParameters();
    internal void ReflectStringParametersMessage();
    internal string get_MethodUrl();
}
[XmlFormatExtensionAttribute("urlEncoded", "http://schemas.xmlsoap.org/wsdl/http/", "System.Web.Services.Description.InputBinding")]
public class System.Web.Services.Description.HttpUrlEncodedBinding : ServiceDescriptionFormatExtension {
}
[XmlFormatExtensionAttribute("urlReplacement", "http://schemas.xmlsoap.org/wsdl/http/", "System.Web.Services.Description.InputBinding")]
public class System.Web.Services.Description.HttpUrlReplacementBinding : ServiceDescriptionFormatExtension {
}
[XmlFormatExtensionPointAttribute("Extensions")]
public class System.Web.Services.Description.Import : DocumentableItem {
    private string ns;
    private string location;
    private ServiceDescription parent;
    private ServiceDescriptionFormatExtensionCollection extensions;
    [XmlIgnoreAttribute]
public ServiceDescriptionFormatExtensionCollection Extensions { get; }
    public ServiceDescription ServiceDescription { get; }
    [XmlAttributeAttribute("namespace")]
public string Namespace { get; public set; }
    [XmlAttributeAttribute("location")]
public string Location { get; public set; }
    internal void SetParent(ServiceDescription parent);
    public virtual ServiceDescriptionFormatExtensionCollection get_Extensions();
    public ServiceDescription get_ServiceDescription();
    public string get_Namespace();
    public void set_Namespace(string value);
    public string get_Location();
    public void set_Location(string value);
}
[DefaultMemberAttribute("Item")]
public class System.Web.Services.Description.ImportCollection : ServiceDescriptionBaseCollection {
    public Import Item { get; public set; }
    internal ImportCollection(ServiceDescription serviceDescription);
    public Import get_Item(int index);
    public void set_Item(int index, Import value);
    public int Add(Import import);
    public void Insert(int index, Import import);
    public int IndexOf(Import import);
    public bool Contains(Import import);
    public void Remove(Import import);
    public void CopyTo(Import[] array, int index);
    protected virtual void SetParent(object value, object parent);
}
[XmlFormatExtensionPointAttribute("Extensions")]
public class System.Web.Services.Description.InputBinding : MessageBinding {
    private ServiceDescriptionFormatExtensionCollection extensions;
    [XmlIgnoreAttribute]
public ServiceDescriptionFormatExtensionCollection Extensions { get; }
    public virtual ServiceDescriptionFormatExtensionCollection get_Extensions();
}
internal class System.Web.Services.Description.LocalSoapHeader : object {
    internal SoapHeaderDirection direction;
    internal string fieldName;
}
[XmlFormatExtensionPointAttribute("Extensions")]
public class System.Web.Services.Description.Message : NamedItem {
    private MessagePartCollection parts;
    private ServiceDescription parent;
    private ServiceDescriptionFormatExtensionCollection extensions;
    [XmlIgnoreAttribute]
public ServiceDescriptionFormatExtensionCollection Extensions { get; }
    public ServiceDescription ServiceDescription { get; }
    [XmlElementAttribute("part")]
public MessagePartCollection Parts { get; }
    internal void SetParent(ServiceDescription parent);
    public virtual ServiceDescriptionFormatExtensionCollection get_Extensions();
    public ServiceDescription get_ServiceDescription();
    public MessagePartCollection get_Parts();
    public MessagePart[] FindPartsByName(String[] partNames);
    public MessagePart FindPartByName(string partName);
}
public abstract class System.Web.Services.Description.MessageBinding : NamedItem {
    private OperationBinding parent;
    public OperationBinding OperationBinding { get; }
    internal void SetParent(OperationBinding parent);
    public OperationBinding get_OperationBinding();
}
[DefaultMemberAttribute("Item")]
public class System.Web.Services.Description.MessageCollection : ServiceDescriptionBaseCollection {
    public Message Item { get; public set; }
    public Message Item { get; }
    internal MessageCollection(ServiceDescription serviceDescription);
    public Message get_Item(int index);
    public void set_Item(int index, Message value);
    public int Add(Message message);
    public void Insert(int index, Message message);
    public int IndexOf(Message message);
    public bool Contains(Message message);
    public void Remove(Message message);
    public void CopyTo(Message[] array, int index);
    public Message get_Item(string name);
    protected virtual string GetKey(object value);
    protected virtual void SetParent(object value, object parent);
}
[XmlFormatExtensionPointAttribute("Extensions")]
public class System.Web.Services.Description.MessagePart : NamedItem {
    private XmlQualifiedName type;
    private XmlQualifiedName element;
    private Message parent;
    private ServiceDescriptionFormatExtensionCollection extensions;
    [XmlIgnoreAttribute]
public ServiceDescriptionFormatExtensionCollection Extensions { get; }
    public Message Message { get; }
    [XmlAttributeAttribute("element")]
public XmlQualifiedName Element { get; public set; }
    [XmlAttributeAttribute("type")]
public XmlQualifiedName Type { get; public set; }
    internal void SetParent(Message parent);
    public virtual ServiceDescriptionFormatExtensionCollection get_Extensions();
    public Message get_Message();
    public XmlQualifiedName get_Element();
    public void set_Element(XmlQualifiedName value);
    public XmlQualifiedName get_Type();
    public void set_Type(XmlQualifiedName value);
}
[DefaultMemberAttribute("Item")]
public class System.Web.Services.Description.MessagePartCollection : ServiceDescriptionBaseCollection {
    public MessagePart Item { get; public set; }
    public MessagePart Item { get; }
    internal MessagePartCollection(Message message);
    public MessagePart get_Item(int index);
    public void set_Item(int index, MessagePart value);
    public int Add(MessagePart messagePart);
    public void Insert(int index, MessagePart messagePart);
    public int IndexOf(MessagePart messagePart);
    public bool Contains(MessagePart messagePart);
    public void Remove(MessagePart messagePart);
    public void CopyTo(MessagePart[] array, int index);
    public MessagePart get_Item(string name);
    protected virtual string GetKey(object value);
    protected virtual void SetParent(object value, object parent);
}
internal class System.Web.Services.Description.MimeAnyImporter : MimeImporter {
    internal virtual MimeParameterCollection ImportParameters();
    internal virtual MimeReturn ImportReturn();
}
[XmlFormatExtensionAttribute("content", "http://schemas.xmlsoap.org/wsdl/mime/", "System.Web.Services.Description.MimePart", "System.Web.Services.Description.InputBinding", "System.Web.Services.Description.OutputBinding")]
[XmlFormatExtensionPrefixAttribute("mime", "http://schemas.xmlsoap.org/wsdl/mime/")]
public class System.Web.Services.Description.MimeContentBinding : ServiceDescriptionFormatExtension {
    private string type;
    private string part;
    public static string Namespace;
    [XmlAttributeAttribute("part")]
public string Part { get; public set; }
    [XmlAttributeAttribute("type")]
public string Type { get; public set; }
    public string get_Part();
    public void set_Part(string value);
    public string get_Type();
    public void set_Type(string value);
}
internal class System.Web.Services.Description.MimeFormImporter : MimeImporter {
    internal virtual MimeParameterCollection ImportParameters();
    internal virtual MimeReturn ImportReturn();
}
internal class System.Web.Services.Description.MimeFormReflector : MimeReflector {
    internal virtual bool ReflectParameters();
    internal virtual bool ReflectReturn();
}
internal abstract class System.Web.Services.Description.MimeImporter : object {
    private HttpProtocolImporter protocol;
    internal HttpProtocolImporter ImportContext { get; internal set; }
    internal abstract virtual MimeParameterCollection ImportParameters();
    internal abstract virtual MimeReturn ImportReturn();
    internal virtual void GenerateCode(MimeReturn[] importedReturns, MimeParameterCollection[] importedParameters);
    internal virtual void AddClassMetadata(CodeTypeDeclaration codeClass);
    internal HttpProtocolImporter get_ImportContext();
    internal void set_ImportContext(HttpProtocolImporter value);
}
[XmlFormatExtensionAttribute("multipartRelated", "http://schemas.xmlsoap.org/wsdl/mime/", "System.Web.Services.Description.InputBinding", "System.Web.Services.Description.OutputBinding")]
public class System.Web.Services.Description.MimeMultipartRelatedBinding : ServiceDescriptionFormatExtension {
    private MimePartCollection parts;
    [XmlElementAttribute("part")]
public MimePartCollection Parts { get; }
    public MimePartCollection get_Parts();
}
internal class System.Web.Services.Description.MimeParameter : object {
    private string name;
    private string typeName;
    private CodeAttributeDeclarationCollection attrs;
    internal string Name { get; internal set; }
    internal string TypeName { get; internal set; }
    internal CodeAttributeDeclarationCollection Attributes { get; }
    internal string get_Name();
    internal void set_Name(string value);
    internal string get_TypeName();
    internal void set_TypeName(string value);
    internal CodeAttributeDeclarationCollection get_Attributes();
}
[DefaultMemberAttribute("Item")]
internal class System.Web.Services.Description.MimeParameterCollection : CollectionBase {
    private Type writerType;
    internal Type WriterType { get; internal set; }
    internal MimeParameter Item { get; internal set; }
    internal Type get_WriterType();
    internal void set_WriterType(Type value);
    internal MimeParameter get_Item(int index);
    internal void set_Item(int index, MimeParameter value);
    internal int Add(MimeParameter parameter);
    internal void Insert(int index, MimeParameter parameter);
    internal int IndexOf(MimeParameter parameter);
    internal bool Contains(MimeParameter parameter);
    internal void Remove(MimeParameter parameter);
    internal void CopyTo(MimeParameter[] array, int index);
}
[XmlFormatExtensionPointAttribute("Extensions")]
public class System.Web.Services.Description.MimePart : ServiceDescriptionFormatExtension {
    private ServiceDescriptionFormatExtensionCollection extensions;
    [XmlIgnoreAttribute]
public ServiceDescriptionFormatExtensionCollection Extensions { get; }
    public ServiceDescriptionFormatExtensionCollection get_Extensions();
}
[DefaultMemberAttribute("Item")]
public class System.Web.Services.Description.MimePartCollection : CollectionBase {
    public MimePart Item { get; public set; }
    public MimePart get_Item(int index);
    public void set_Item(int index, MimePart value);
    public int Add(MimePart mimePart);
    public void Insert(int index, MimePart mimePart);
    public int IndexOf(MimePart mimePart);
    public bool Contains(MimePart mimePart);
    public void Remove(MimePart mimePart);
    public void CopyTo(MimePart[] array, int index);
}
internal abstract class System.Web.Services.Description.MimeReflector : object {
    private HttpProtocolReflector protocol;
    internal HttpProtocolReflector ReflectionContext { get; internal set; }
    internal abstract virtual bool ReflectParameters();
    internal abstract virtual bool ReflectReturn();
    internal HttpProtocolReflector get_ReflectionContext();
    internal void set_ReflectionContext(HttpProtocolReflector value);
}
internal class System.Web.Services.Description.MimeReturn : object {
    private string typeName;
    private Type readerType;
    private CodeAttributeDeclarationCollection attrs;
    internal string TypeName { get; internal set; }
    internal Type ReaderType { get; internal set; }
    internal CodeAttributeDeclarationCollection Attributes { get; }
    internal string get_TypeName();
    internal void set_TypeName(string value);
    internal Type get_ReaderType();
    internal void set_ReaderType(Type value);
    internal CodeAttributeDeclarationCollection get_Attributes();
}
[XmlFormatExtensionAttribute("text", "http://microsoft.com/wsdl/mime/textMatching/", "System.Web.Services.Description.InputBinding", "System.Web.Services.Description.OutputBinding", "System.Web.Services.Description.MimePart")]
[XmlFormatExtensionPrefixAttribute("tm", "http://microsoft.com/wsdl/mime/textMatching/")]
public class System.Web.Services.Description.MimeTextBinding : ServiceDescriptionFormatExtension {
    private MimeTextMatchCollection matches;
    public static string Namespace;
    [XmlElementAttribute("match", "System.Web.Services.Description.MimeTextMatch")]
public MimeTextMatchCollection Matches { get; }
    public MimeTextMatchCollection get_Matches();
}
internal class System.Web.Services.Description.MimeTextImporter : MimeImporter {
    private string methodName;
    internal virtual MimeParameterCollection ImportParameters();
    internal virtual MimeReturn ImportReturn();
    internal virtual void GenerateCode(MimeReturn[] importedReturns, MimeParameterCollection[] importedParameters);
    private void GenerateCode(MimeTextReturn importedReturn, CodeGenerationOptions options);
    private void GenerateCode(string typeName, MimeTextMatchCollection matches, CodeGenerationOptions options);
}
public class System.Web.Services.Description.MimeTextMatch : object {
    private string name;
    private string type;
    private int repeats;
    private string pattern;
    private int group;
    private int capture;
    private bool ignoreCase;
    private MimeTextMatchCollection matches;
    [XmlAttributeAttribute("name")]
public string Name { get; public set; }
    [XmlAttributeAttribute("type")]
public string Type { get; public set; }
    [XmlAttributeAttribute("group")]
[DefaultValueAttribute("1")]
public int Group { get; public set; }
    [XmlAttributeAttribute("capture")]
[DefaultValueAttribute("0")]
public int Capture { get; public set; }
    [XmlIgnoreAttribute]
public int Repeats { get; public set; }
    [XmlAttributeAttribute("repeats")]
[DefaultValueAttribute("1")]
public string RepeatsString { get; public set; }
    [XmlAttributeAttribute("pattern")]
public string Pattern { get; public set; }
    [XmlAttributeAttribute("ignoreCase")]
public bool IgnoreCase { get; public set; }
    [XmlElementAttribute("match")]
public MimeTextMatchCollection Matches { get; }
    public string get_Name();
    public void set_Name(string value);
    public string get_Type();
    public void set_Type(string value);
    public int get_Group();
    public void set_Group(int value);
    public int get_Capture();
    public void set_Capture(int value);
    public int get_Repeats();
    public void set_Repeats(int value);
    public string get_RepeatsString();
    public void set_RepeatsString(string value);
    public string get_Pattern();
    public void set_Pattern(string value);
    public bool get_IgnoreCase();
    public void set_IgnoreCase(bool value);
    public MimeTextMatchCollection get_Matches();
}
[DefaultMemberAttribute("Item")]
public class System.Web.Services.Description.MimeTextMatchCollection : CollectionBase {
    public MimeTextMatch Item { get; public set; }
    public MimeTextMatch get_Item(int index);
    public void set_Item(int index, MimeTextMatch value);
    public int Add(MimeTextMatch match);
    public void Insert(int index, MimeTextMatch match);
    public int IndexOf(MimeTextMatch match);
    public bool Contains(MimeTextMatch match);
    public void Remove(MimeTextMatch match);
    public void CopyTo(MimeTextMatch[] array, int index);
}
internal class System.Web.Services.Description.MimeTextReturn : MimeReturn {
    private MimeTextBinding textBinding;
    internal MimeTextBinding TextBinding { get; internal set; }
    internal MimeTextBinding get_TextBinding();
    internal void set_TextBinding(MimeTextBinding value);
}
[XmlFormatExtensionAttribute("mimeXml", "http://schemas.xmlsoap.org/wsdl/mime/", "System.Web.Services.Description.MimePart", "System.Web.Services.Description.InputBinding", "System.Web.Services.Description.OutputBinding")]
public class System.Web.Services.Description.MimeXmlBinding : ServiceDescriptionFormatExtension {
    private string part;
    [XmlAttributeAttribute("part")]
public string Part { get; public set; }
    public string get_Part();
    public void set_Part(string value);
}
internal class System.Web.Services.Description.MimeXmlImporter : MimeImporter {
    private XmlSchemaImporter importer;
    private XmlCodeExporter exporter;
    private XmlSchemaImporter Importer { get; }
    private XmlCodeExporter Exporter { get; }
    internal virtual MimeParameterCollection ImportParameters();
    internal virtual MimeReturn ImportReturn();
    private XmlSchemaImporter get_Importer();
    private XmlCodeExporter get_Exporter();
    internal virtual void GenerateCode(MimeReturn[] importedReturns, MimeParameterCollection[] importedParameters);
    private void GenerateCode(MimeXmlReturn importedReturn);
    internal virtual void AddClassMetadata(CodeTypeDeclaration codeClass);
}
internal class System.Web.Services.Description.MimeXmlReflector : MimeReflector {
    internal virtual bool ReflectParameters();
    internal virtual bool ReflectReturn();
}
internal class System.Web.Services.Description.MimeXmlReturn : MimeReturn {
    private XmlTypeMapping mapping;
    internal XmlTypeMapping TypeMapping { get; internal set; }
    internal XmlTypeMapping get_TypeMapping();
    internal void set_TypeMapping(XmlTypeMapping value);
}
public abstract class System.Web.Services.Description.NamedItem : DocumentableItem {
    private string name;
    [XmlAttributeAttribute("name")]
public string Name { get; public set; }
    public string get_Name();
    public void set_Name(string value);
}
[XmlFormatExtensionPointAttribute("Extensions")]
public class System.Web.Services.Description.Operation : NamedItem {
    private String[] parameters;
    private OperationMessageCollection messages;
    private OperationFaultCollection faults;
    private PortType parent;
    private ServiceDescriptionFormatExtensionCollection extensions;
    [XmlIgnoreAttribute]
public ServiceDescriptionFormatExtensionCollection Extensions { get; }
    public PortType PortType { get; }
    [XmlAttributeAttribute("parameterOrder")]
[DefaultValueAttribute("")]
public string ParameterOrderString { get; public set; }
    [XmlIgnoreAttribute]
public String[] ParameterOrder { get; public set; }
    [XmlElementAttribute("input", "System.Web.Services.Description.OperationInput")]
[XmlElementAttribute("output", "System.Web.Services.Description.OperationOutput")]
public OperationMessageCollection Messages { get; }
    [XmlElementAttribute("fault")]
public OperationFaultCollection Faults { get; }
    internal void SetParent(PortType parent);
    public virtual ServiceDescriptionFormatExtensionCollection get_Extensions();
    public PortType get_PortType();
    public string get_ParameterOrderString();
    public void set_ParameterOrderString(string value);
    public String[] get_ParameterOrder();
    public void set_ParameterOrder(String[] value);
    public OperationMessageCollection get_Messages();
    public OperationFaultCollection get_Faults();
    public bool IsBoundBy(OperationBinding operationBinding);
    private string GetMessageName(string operationName, string messageName, bool isInput);
}
[XmlFormatExtensionPointAttribute("Extensions")]
public class System.Web.Services.Description.OperationBinding : NamedItem {
    private ServiceDescriptionFormatExtensionCollection extensions;
    private FaultBindingCollection faults;
    private InputBinding input;
    private OutputBinding output;
    private Binding parent;
    public Binding Binding { get; }
    [XmlIgnoreAttribute]
public ServiceDescriptionFormatExtensionCollection Extensions { get; }
    [XmlElementAttribute("input")]
public InputBinding Input { get; public set; }
    [XmlElementAttribute("output")]
public OutputBinding Output { get; public set; }
    [XmlElementAttribute("fault")]
public FaultBindingCollection Faults { get; }
    internal void SetParent(Binding parent);
    public Binding get_Binding();
    public virtual ServiceDescriptionFormatExtensionCollection get_Extensions();
    public InputBinding get_Input();
    public void set_Input(InputBinding value);
    public OutputBinding get_Output();
    public void set_Output(OutputBinding value);
    public FaultBindingCollection get_Faults();
}
[DefaultMemberAttribute("Item")]
public class System.Web.Services.Description.OperationBindingCollection : ServiceDescriptionBaseCollection {
    public OperationBinding Item { get; public set; }
    internal OperationBindingCollection(Binding binding);
    public OperationBinding get_Item(int index);
    public void set_Item(int index, OperationBinding value);
    public int Add(OperationBinding bindingOperation);
    public void Insert(int index, OperationBinding bindingOperation);
    public int IndexOf(OperationBinding bindingOperation);
    public bool Contains(OperationBinding bindingOperation);
    public void Remove(OperationBinding bindingOperation);
    public void CopyTo(OperationBinding[] array, int index);
    protected virtual void SetParent(object value, object parent);
}
[DefaultMemberAttribute("Item")]
public class System.Web.Services.Description.OperationCollection : ServiceDescriptionBaseCollection {
    public Operation Item { get; public set; }
    internal OperationCollection(PortType portType);
    public Operation get_Item(int index);
    public void set_Item(int index, Operation value);
    public int Add(Operation operation);
    public void Insert(int index, Operation operation);
    public int IndexOf(Operation operation);
    public bool Contains(Operation operation);
    public void Remove(Operation operation);
    public void CopyTo(Operation[] array, int index);
    protected virtual void SetParent(object value, object parent);
}
[XmlFormatExtensionPointAttribute("Extensions")]
public class System.Web.Services.Description.OperationFault : OperationMessage {
    private ServiceDescriptionFormatExtensionCollection extensions;
    [XmlIgnoreAttribute]
public ServiceDescriptionFormatExtensionCollection Extensions { get; }
    public virtual ServiceDescriptionFormatExtensionCollection get_Extensions();
}
[DefaultMemberAttribute("Item")]
public class System.Web.Services.Description.OperationFaultCollection : ServiceDescriptionBaseCollection {
    public OperationFault Item { get; public set; }
    public OperationFault Item { get; }
    internal OperationFaultCollection(Operation operation);
    public OperationFault get_Item(int index);
    public void set_Item(int index, OperationFault value);
    public int Add(OperationFault operationFaultMessage);
    public void Insert(int index, OperationFault operationFaultMessage);
    public int IndexOf(OperationFault operationFaultMessage);
    public bool Contains(OperationFault operationFaultMessage);
    public void Remove(OperationFault operationFaultMessage);
    public void CopyTo(OperationFault[] array, int index);
    public OperationFault get_Item(string name);
    protected virtual string GetKey(object value);
    protected virtual void SetParent(object value, object parent);
}
public enum System.Web.Services.Description.OperationFlow : Enum {
    public int value__;
    public static OperationFlow None;
    public static OperationFlow OneWay;
    public static OperationFlow Notification;
    public static OperationFlow RequestResponse;
    public static OperationFlow SolicitResponse;
}
[XmlFormatExtensionPointAttribute("Extensions")]
public class System.Web.Services.Description.OperationInput : OperationMessage {
    private ServiceDescriptionFormatExtensionCollection extensions;
    [XmlIgnoreAttribute]
public ServiceDescriptionFormatExtensionCollection Extensions { get; }
    public virtual ServiceDescriptionFormatExtensionCollection get_Extensions();
}
public abstract class System.Web.Services.Description.OperationMessage : NamedItem {
    private XmlQualifiedName message;
    private Operation parent;
    public Operation Operation { get; }
    [XmlAttributeAttribute("message")]
public XmlQualifiedName Message { get; public set; }
    internal void SetParent(Operation parent);
    public Operation get_Operation();
    public XmlQualifiedName get_Message();
    public void set_Message(XmlQualifiedName value);
}
[DefaultMemberAttribute("Item")]
public class System.Web.Services.Description.OperationMessageCollection : ServiceDescriptionBaseCollection {
    public OperationMessage Item { get; public set; }
    public OperationInput Input { get; }
    public OperationOutput Output { get; }
    public OperationFlow Flow { get; }
    internal OperationMessageCollection(Operation operation);
    public OperationMessage get_Item(int index);
    public void set_Item(int index, OperationMessage value);
    public int Add(OperationMessage operationMessage);
    public void Insert(int index, OperationMessage operationMessage);
    public int IndexOf(OperationMessage operationMessage);
    public bool Contains(OperationMessage operationMessage);
    public void Remove(OperationMessage operationMessage);
    public void CopyTo(OperationMessage[] array, int index);
    public OperationInput get_Input();
    public OperationOutput get_Output();
    public OperationFlow get_Flow();
    protected virtual void SetParent(object value, object parent);
    protected virtual void OnInsert(int index, object value);
    protected virtual void OnSet(int index, object oldValue, object newValue);
    protected virtual void OnValidate(object value);
}
[XmlFormatExtensionPointAttribute("Extensions")]
public class System.Web.Services.Description.OperationOutput : OperationMessage {
    private ServiceDescriptionFormatExtensionCollection extensions;
    [XmlIgnoreAttribute]
public ServiceDescriptionFormatExtensionCollection Extensions { get; }
    public virtual ServiceDescriptionFormatExtensionCollection get_Extensions();
}
[XmlFormatExtensionPointAttribute("Extensions")]
public class System.Web.Services.Description.OutputBinding : MessageBinding {
    private ServiceDescriptionFormatExtensionCollection extensions;
    [XmlIgnoreAttribute]
public ServiceDescriptionFormatExtensionCollection Extensions { get; }
    public virtual ServiceDescriptionFormatExtensionCollection get_Extensions();
}
[XmlFormatExtensionPointAttribute("Extensions")]
public class System.Web.Services.Description.Port : NamedItem {
    private ServiceDescriptionFormatExtensionCollection extensions;
    private XmlQualifiedName binding;
    private Service parent;
    public Service Service { get; }
    [XmlIgnoreAttribute]
public ServiceDescriptionFormatExtensionCollection Extensions { get; }
    [XmlAttributeAttribute("binding")]
public XmlQualifiedName Binding { get; public set; }
    internal void SetParent(Service parent);
    public Service get_Service();
    public virtual ServiceDescriptionFormatExtensionCollection get_Extensions();
    public XmlQualifiedName get_Binding();
    public void set_Binding(XmlQualifiedName value);
}
[DefaultMemberAttribute("Item")]
public class System.Web.Services.Description.PortCollection : ServiceDescriptionBaseCollection {
    public Port Item { get; public set; }
    public Port Item { get; }
    internal PortCollection(Service service);
    public Port get_Item(int index);
    public void set_Item(int index, Port value);
    public int Add(Port port);
    public void Insert(int index, Port port);
    public int IndexOf(Port port);
    public bool Contains(Port port);
    public void Remove(Port port);
    public void CopyTo(Port[] array, int index);
    public Port get_Item(string name);
    protected virtual string GetKey(object value);
    protected virtual void SetParent(object value, object parent);
}
[XmlFormatExtensionPointAttribute("Extensions")]
public class System.Web.Services.Description.PortType : NamedItem {
    private OperationCollection operations;
    private ServiceDescription parent;
    private ServiceDescriptionFormatExtensionCollection extensions;
    [XmlIgnoreAttribute]
public ServiceDescriptionFormatExtensionCollection Extensions { get; }
    public ServiceDescription ServiceDescription { get; }
    [XmlElementAttribute("operation")]
public OperationCollection Operations { get; }
    internal void SetParent(ServiceDescription parent);
    public virtual ServiceDescriptionFormatExtensionCollection get_Extensions();
    public ServiceDescription get_ServiceDescription();
    public OperationCollection get_Operations();
}
[DefaultMemberAttribute("Item")]
public class System.Web.Services.Description.PortTypeCollection : ServiceDescriptionBaseCollection {
    public PortType Item { get; public set; }
    public PortType Item { get; }
    internal PortTypeCollection(ServiceDescription serviceDescription);
    public PortType get_Item(int index);
    public void set_Item(int index, PortType value);
    public int Add(PortType portType);
    public void Insert(int index, PortType portType);
    public int IndexOf(PortType portType);
    public bool Contains(PortType portType);
    public void Remove(PortType portType);
    public void CopyTo(PortType[] array, int index);
    public PortType get_Item(string name);
    protected virtual string GetKey(object value);
    protected virtual void SetParent(object value, object parent);
}
public abstract class System.Web.Services.Description.ProtocolImporter : object {
    private ServiceDescriptionImporter importer;
    private CodeNamespace codeNamespace;
    private CodeIdentifiers methodNames;
    private CodeTypeDeclaration codeClass;
    private CodeTypeDeclarationCollection classes;
    private ServiceDescriptionImportWarnings warnings;
    private Port port;
    private PortType portType;
    private Binding binding;
    private Operation operation;
    private OperationBinding operationBinding;
    private bool encodedBinding;
    private ImportContext importContext;
    private Hashtable exportContext;
    private Service service;
    private Message inputMessage;
    private Message outputMessage;
    private string className;
    private int bindingCount;
    private bool anyPorts;
    public ServiceDescriptionCollection ServiceDescriptions { get; }
    public XmlSchemas Schemas { get; }
    public XmlSchemas AbstractSchemas { get; }
    public XmlSchemas ConcreteSchemas { get; }
    public CodeNamespace CodeNamespace { get; }
    public CodeTypeDeclaration CodeTypeDeclaration { get; }
    internal CodeTypeDeclarationCollection ExtraCodeClasses { get; }
    public ServiceDescriptionImportStyle Style { get; }
    public ServiceDescriptionImportWarnings Warnings { get; public set; }
    public CodeIdentifiers ClassNames { get; }
    public string MethodName { get; }
    public string ClassName { get; }
    public Port Port { get; }
    public PortType PortType { get; }
    public Binding Binding { get; }
    public Service Service { get; }
    internal ServiceDescriptionImporter ServiceImporter { get; }
    public Operation Operation { get; }
    public OperationBinding OperationBinding { get; }
    public Message InputMessage { get; }
    public Message OutputMessage { get; }
    internal ImportContext ImportContext { get; }
    internal bool IsEncodedBinding { get; internal set; }
    internal Hashtable ExportContext { get; }
    internal CodeIdentifiers MethodNames { get; }
    public string ProtocolName { get; }
    internal void Initialize(ServiceDescriptionImporter importer);
    public ServiceDescriptionCollection get_ServiceDescriptions();
    public XmlSchemas get_Schemas();
    public XmlSchemas get_AbstractSchemas();
    public XmlSchemas get_ConcreteSchemas();
    public CodeNamespace get_CodeNamespace();
    public CodeTypeDeclaration get_CodeTypeDeclaration();
    internal CodeTypeDeclarationCollection get_ExtraCodeClasses();
    public ServiceDescriptionImportStyle get_Style();
    public ServiceDescriptionImportWarnings get_Warnings();
    public void set_Warnings(ServiceDescriptionImportWarnings value);
    public CodeIdentifiers get_ClassNames();
    public string get_MethodName();
    public string get_ClassName();
    public Port get_Port();
    public PortType get_PortType();
    public Binding get_Binding();
    public Service get_Service();
    internal ServiceDescriptionImporter get_ServiceImporter();
    public Operation get_Operation();
    public OperationBinding get_OperationBinding();
    public Message get_InputMessage();
    public Message get_OutputMessage();
    internal ImportContext get_ImportContext();
    internal bool get_IsEncodedBinding();
    internal void set_IsEncodedBinding(bool value);
    internal Hashtable get_ExportContext();
    internal CodeIdentifiers get_MethodNames();
    internal bool GenerateCode(CodeNamespace codeNamespace, ImportContext importContext, Hashtable exportContext);
    private void MoveToBinding(Binding binding, PortType portType);
    private void MoveToBinding(Service service, Port port, Binding binding, PortType portType);
    private void MoveToOperation(Operation operation);
    private void GenerateClassForBinding();
    public void AddExtensionWarningComments(CodeCommentStatementCollection comments, ServiceDescriptionFormatExtensionCollection extensions);
    public void UnsupportedBindingWarning(string text);
    public void UnsupportedOperationWarning(string text);
    public void UnsupportedOperationBindingWarning(string text);
    private void NoMethodsGeneratedWarning();
    internal static void AddWarningComment(CodeCommentStatementCollection comments, string text);
    public Exception OperationSyntaxException(string text);
    public Exception OperationBindingSyntaxException(string text);
    public abstract virtual string get_ProtocolName();
    protected virtual void BeginNamespace();
    protected abstract virtual bool IsBindingSupported();
    protected abstract virtual bool IsOperationFlowSupported(OperationFlow flow);
    protected abstract virtual CodeTypeDeclaration BeginClass();
    protected abstract virtual CodeMemberMethod GenerateMethod();
    protected virtual void EndClass();
    protected virtual void EndNamespace();
    internal static string UniqueName(string baseName, String[] scope);
    internal static string MethodSignature(string methodName, string returnType, CodeFlags[] parameterFlags, String[] parameterTypes);
}
internal class System.Web.Services.Description.ProtocolImporterUtil : object {
    internal static void GenerateConstructorStatements(CodeConstructor ctor, string url, string appSettingUrlKey, string appSettingBaseUrl, bool soap11);
}
public abstract class System.Web.Services.Description.ProtocolReflector : object {
    private ServiceDescriptionReflector reflector;
    private LogicalMethodInfo method;
    private Operation operation;
    private OperationBinding operationBinding;
    private Port port;
    private PortType portType;
    private Binding binding;
    private WebMethodAttribute methodAttr;
    private Message inputMessage;
    private Message outputMessage;
    private MessageCollection headerMessages;
    private ServiceDescription bindingServiceDescription;
    private CodeIdentifiers portNames;
    private bool emptyBinding;
    internal bool IsEmptyBinding { get; }
    public Service Service { get; }
    public ServiceDescription ServiceDescription { get; }
    public ServiceDescriptionCollection ServiceDescriptions { get; }
    internal List`1<Action`1<Uri>> UriFixups { get; }
    public XmlSchemas Schemas { get; }
    public XmlSchemaExporter SchemaExporter { get; }
    public XmlReflectionImporter ReflectionImporter { get; }
    public string DefaultNamespace { get; }
    public string ServiceUrl { get; }
    public Type ServiceType { get; }
    public LogicalMethodInfo Method { get; }
    public Binding Binding { get; }
    public PortType PortType { get; }
    public Port Port { get; }
    public Operation Operation { get; }
    public OperationBinding OperationBinding { get; }
    public WebMethodAttribute MethodAttribute { get; }
    public LogicalMethodInfo[] Methods { get; }
    internal Hashtable ReflectionContext { get; }
    public Message InputMessage { get; }
    public Message OutputMessage { get; }
    public MessageCollection HeaderMessages { get; }
    internal WsiProfiles ConformsTo { get; }
    public string ProtocolName { get; }
    internal void Initialize(ServiceDescriptionReflector reflector);
    internal bool get_IsEmptyBinding();
    public Service get_Service();
    public ServiceDescription get_ServiceDescription();
    public ServiceDescriptionCollection get_ServiceDescriptions();
    internal List`1<Action`1<Uri>> get_UriFixups();
    public XmlSchemas get_Schemas();
    public XmlSchemaExporter get_SchemaExporter();
    public XmlReflectionImporter get_ReflectionImporter();
    public string get_DefaultNamespace();
    public string get_ServiceUrl();
    public Type get_ServiceType();
    public LogicalMethodInfo get_Method();
    public Binding get_Binding();
    public PortType get_PortType();
    public Port get_Port();
    public Operation get_Operation();
    public OperationBinding get_OperationBinding();
    public WebMethodAttribute get_MethodAttribute();
    public LogicalMethodInfo[] get_Methods();
    internal Hashtable get_ReflectionContext();
    public Message get_InputMessage();
    public Message get_OutputMessage();
    public MessageCollection get_HeaderMessages();
    private void MoveToMethod(LogicalMethodInfo method);
    internal void Reflect();
    private void AddImport(string ns, string location);
    public ServiceDescription GetServiceDescription(string ns);
    private void ReflectBinding(ReflectedBinding reflectedBinding);
    internal virtual WsiProfiles get_ConformsTo();
    public abstract virtual string get_ProtocolName();
    protected virtual void BeginClass();
    protected abstract virtual bool ReflectMethod();
    protected virtual string ReflectMethodBinding();
    protected virtual void EndClass();
    protected virtual void ReflectDescription();
}
internal class System.Web.Services.Description.SchemaCompiler : object {
    private static StringCollection warnings;
    internal static StringCollection Warnings { get; }
    internal static StringCollection get_Warnings();
    internal static StringCollection Compile(XmlSchemas schemas);
    private static void AddImport(XmlSchema schema, string ns);
    private static void AddImports(XmlSchemas schemas);
    internal static string WarningDetails(XmlSchemaException exception, string message);
    private static string GetSchemaItem(XmlSchemaObject o, string ns, string details);
    internal static XmlQualifiedName GetParentName(XmlSchemaObject item);
    private static void ValidationCallbackWithErrorCode(object sender, ValidationEventArgs args);
}
internal class System.Web.Services.Description.Schemas : object {
    internal static string Wsdl;
    internal static string Soap;
    internal static string WebRef;
    internal static string SoapEncoding;
}
[XmlFormatExtensionPointAttribute("Extensions")]
public class System.Web.Services.Description.Service : NamedItem {
    private ServiceDescriptionFormatExtensionCollection extensions;
    private PortCollection ports;
    private ServiceDescription parent;
    public ServiceDescription ServiceDescription { get; }
    [XmlIgnoreAttribute]
public ServiceDescriptionFormatExtensionCollection Extensions { get; }
    [XmlElementAttribute("port")]
public PortCollection Ports { get; }
    internal void SetParent(ServiceDescription parent);
    public ServiceDescription get_ServiceDescription();
    public virtual ServiceDescriptionFormatExtensionCollection get_Extensions();
    public PortCollection get_Ports();
}
[DefaultMemberAttribute("Item")]
public class System.Web.Services.Description.ServiceCollection : ServiceDescriptionBaseCollection {
    public Service Item { get; public set; }
    public Service Item { get; }
    internal ServiceCollection(ServiceDescription serviceDescription);
    public Service get_Item(int index);
    public void set_Item(int index, Service value);
    public int Add(Service service);
    public void Insert(int index, Service service);
    public int IndexOf(Service service);
    public bool Contains(Service service);
    public void Remove(Service service);
    public void CopyTo(Service[] array, int index);
    public Service get_Item(string name);
    protected virtual string GetKey(object value);
    protected virtual void SetParent(object value, object parent);
}
[XmlRootAttribute("definitions")]
[XmlFormatExtensionPointAttribute("Extensions")]
public class System.Web.Services.Description.ServiceDescription : NamedItem {
    public static string Namespace;
    internal static string Prefix;
    private Types types;
    private ImportCollection imports;
    private MessageCollection messages;
    private PortTypeCollection portTypes;
    private BindingCollection bindings;
    private ServiceCollection services;
    private string targetNamespace;
    private ServiceDescriptionFormatExtensionCollection extensions;
    private ServiceDescriptionCollection parent;
    private string appSettingUrlKey;
    private string appSettingBaseUrl;
    private string retrievalUrl;
    private static XmlSerializer serializer;
    private static XmlSerializerNamespaces namespaces;
    private static WsiProfiles SupportedClaims;
    private static XmlSchema schema;
    private static XmlSchema soapEncodingSchema;
    private StringCollection validationWarnings;
    private static StringCollection warnings;
    private ServiceDescription next;
    [XmlIgnoreAttribute]
public string RetrievalUrl { get; public set; }
    [XmlIgnoreAttribute]
public ServiceDescriptionCollection ServiceDescriptions { get; }
    [XmlIgnoreAttribute]
public ServiceDescriptionFormatExtensionCollection Extensions { get; }
    [XmlElementAttribute("import")]
public ImportCollection Imports { get; }
    [XmlElementAttribute("types")]
public Types Types { get; public set; }
    [XmlElementAttribute("message")]
public MessageCollection Messages { get; }
    [XmlElementAttribute("portType")]
public PortTypeCollection PortTypes { get; }
    [XmlElementAttribute("binding")]
public BindingCollection Bindings { get; }
    [XmlElementAttribute("service")]
public ServiceCollection Services { get; }
    [XmlAttributeAttribute("targetNamespace")]
public string TargetNamespace { get; public set; }
    public static XmlSchema Schema { get; }
    internal static XmlSchema SoapEncodingSchema { get; }
    [XmlIgnoreAttribute]
public StringCollection ValidationWarnings { get; }
    [XmlIgnoreAttribute]
public static XmlSerializer Serializer { get; }
    internal string AppSettingBaseUrl { get; internal set; }
    internal string AppSettingUrlKey { get; internal set; }
    internal ServiceDescription Next { get; internal set; }
    private static ServiceDescription();
    private static void InstanceValidation(object sender, ValidationEventArgs args);
    public string get_RetrievalUrl();
    public void set_RetrievalUrl(string value);
    internal void SetParent(ServiceDescriptionCollection parent);
    public ServiceDescriptionCollection get_ServiceDescriptions();
    public virtual ServiceDescriptionFormatExtensionCollection get_Extensions();
    public ImportCollection get_Imports();
    public Types get_Types();
    public void set_Types(Types value);
    private bool ShouldSerializeTypes();
    public MessageCollection get_Messages();
    public PortTypeCollection get_PortTypes();
    public BindingCollection get_Bindings();
    public ServiceCollection get_Services();
    public string get_TargetNamespace();
    public void set_TargetNamespace(string value);
    public static XmlSchema get_Schema();
    internal static XmlSchema get_SoapEncodingSchema();
    public StringCollection get_ValidationWarnings();
    internal void SetWarnings(StringCollection warnings);
    public static XmlSerializer get_Serializer();
    internal string get_AppSettingBaseUrl();
    internal void set_AppSettingBaseUrl(string value);
    internal string get_AppSettingUrlKey();
    internal void set_AppSettingUrlKey(string value);
    internal ServiceDescription get_Next();
    internal void set_Next(ServiceDescription value);
    public static ServiceDescription Read(TextReader textReader);
    public static ServiceDescription Read(Stream stream);
    public static ServiceDescription Read(XmlReader reader);
    public static ServiceDescription Read(string fileName);
    public static ServiceDescription Read(TextReader textReader, bool validate);
    public static ServiceDescription Read(Stream stream, bool validate);
    public static ServiceDescription Read(string fileName, bool validate);
    public static ServiceDescription Read(XmlReader reader, bool validate);
    public static bool CanRead(XmlReader reader);
    public void Write(string fileName);
    public void Write(TextWriter writer);
    public void Write(Stream stream);
    public void Write(XmlWriter writer);
    internal static WsiProfiles GetConformanceClaims(XmlElement documentation);
    internal static void AddConformanceClaims(XmlElement documentation, WsiProfiles claims);
}
public abstract class System.Web.Services.Description.ServiceDescriptionBaseCollection : CollectionBase {
    private Hashtable table;
    private object parent;
    protected IDictionary Table { get; }
    internal ServiceDescriptionBaseCollection(object parent);
    protected virtual IDictionary get_Table();
    protected virtual string GetKey(object value);
    protected virtual void SetParent(object value, object parent);
    protected virtual void OnInsertComplete(int index, object value);
    protected virtual void OnRemove(int index, object value);
    protected virtual void OnClear();
    protected virtual void OnSet(int index, object oldValue, object newValue);
    private void AddValue(object value);
    private void RemoveValue(object value);
    private static string GetDuplicateMessage(Type type, string elemName);
}
[DefaultMemberAttribute("Item")]
public class System.Web.Services.Description.ServiceDescriptionCollection : ServiceDescriptionBaseCollection {
    public ServiceDescription Item { get; public set; }
    public ServiceDescription Item { get; }
    public ServiceDescription get_Item(int index);
    public void set_Item(int index, ServiceDescription value);
    public ServiceDescription get_Item(string ns);
    public int Add(ServiceDescription serviceDescription);
    public void Insert(int index, ServiceDescription serviceDescription);
    public int IndexOf(ServiceDescription serviceDescription);
    public bool Contains(ServiceDescription serviceDescription);
    public void Remove(ServiceDescription serviceDescription);
    public void CopyTo(ServiceDescription[] array, int index);
    protected virtual string GetKey(object value);
    private Exception ItemNotFound(XmlQualifiedName name, string type);
    public Message GetMessage(XmlQualifiedName name);
    public PortType GetPortType(XmlQualifiedName name);
    public Service GetService(XmlQualifiedName name);
    public Binding GetBinding(XmlQualifiedName name);
    private ServiceDescription GetServiceDescription(XmlQualifiedName name);
    protected virtual void SetParent(object value, object parent);
    protected virtual void OnInsertComplete(int index, object value);
}
public abstract class System.Web.Services.Description.ServiceDescriptionFormatExtension : object {
    private object parent;
    private bool required;
    private bool handled;
    public object Parent { get; }
    [XmlAttributeAttribute("required")]
[DefaultValueAttribute("False")]
public bool Required { get; public set; }
    [XmlIgnoreAttribute]
public bool Handled { get; public set; }
    internal void SetParent(object parent);
    public object get_Parent();
    public bool get_Required();
    public void set_Required(bool value);
    public bool get_Handled();
    public void set_Handled(bool value);
}
[DefaultMemberAttribute("Item")]
public class System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection : ServiceDescriptionBaseCollection {
    private ArrayList handledElements;
    public object Item { get; public set; }
    public ServiceDescriptionFormatExtensionCollection(object parent);
    public object get_Item(int index);
    public void set_Item(int index, object value);
    public int Add(object extension);
    public void Insert(int index, object extension);
    public int IndexOf(object extension);
    public bool Contains(object extension);
    public void Remove(object extension);
    public void CopyTo(Object[] array, int index);
    public object Find(Type type);
    public Object[] FindAll(Type type);
    public XmlElement Find(string name, string ns);
    public XmlElement[] FindAll(string name, string ns);
    private void SetHandled(XmlElement element);
    public bool IsHandled(object item);
    public bool IsRequired(object item);
    private bool IsHandled(XmlElement element);
    private bool IsRequired(XmlElement element);
    protected virtual void SetParent(object value, object parent);
    protected virtual void OnValidate(object value);
}
public class System.Web.Services.Description.ServiceDescriptionImporter : object {
    private ServiceDescriptionImportStyle style;
    private ServiceDescriptionCollection serviceDescriptions;
    private XmlSchemas schemas;
    private XmlSchemas allSchemas;
    private string protocolName;
    private CodeGenerationOptions options;
    private CodeCompileUnit codeCompileUnit;
    private CodeDomProvider codeProvider;
    private ProtocolImporter[] importers;
    private XmlSchemas abstractSchemas;
    private XmlSchemas concreteSchemas;
    private List`1<Type> extensions;
    public ServiceDescriptionCollection ServiceDescriptions { get; }
    public XmlSchemas Schemas { get; }
    public ServiceDescriptionImportStyle Style { get; public set; }
    [ComVisibleAttribute("False")]
public CodeGenerationOptions CodeGenerationOptions { get; public set; }
    internal CodeCompileUnit CodeCompileUnit { get; }
    [ComVisibleAttribute("False")]
public CodeDomProvider CodeGenerator { get; public set; }
    internal List`1<Type> Extensions { get; }
    public string ProtocolName { get; public set; }
    internal XmlSchemas AllSchemas { get; }
    internal XmlSchemas AbstractSchemas { get; }
    internal XmlSchemas ConcreteSchemas { get; }
    internal ServiceDescriptionImporter(CodeCompileUnit codeCompileUnit);
    public ServiceDescriptionCollection get_ServiceDescriptions();
    public XmlSchemas get_Schemas();
    public ServiceDescriptionImportStyle get_Style();
    public void set_Style(ServiceDescriptionImportStyle value);
    public CodeGenerationOptions get_CodeGenerationOptions();
    public void set_CodeGenerationOptions(CodeGenerationOptions value);
    internal CodeCompileUnit get_CodeCompileUnit();
    public CodeDomProvider get_CodeGenerator();
    public void set_CodeGenerator(CodeDomProvider value);
    internal List`1<Type> get_Extensions();
    public string get_ProtocolName();
    public void set_ProtocolName(string value);
    private ProtocolImporter FindImporterByName(string protocolName);
    internal XmlSchemas get_AllSchemas();
    internal XmlSchemas get_AbstractSchemas();
    internal XmlSchemas get_ConcreteSchemas();
    public void AddServiceDescription(ServiceDescription serviceDescription, string appSettingUrlKey, string appSettingBaseUrl);
    public ServiceDescriptionImportWarnings Import(CodeNamespace codeNamespace, CodeCompileUnit codeCompileUnit);
    public static StringCollection GenerateWebReferences(WebReferenceCollection webReferences, CodeDomProvider codeProvider, CodeCompileUnit codeCompileUnit, WebReferenceOptions options);
    internal static ImportContext Context(CodeNamespace ns, Hashtable namespaces, bool verbose);
    internal static void AddDocument(string path, object document, XmlSchemas schemas, ServiceDescriptionCollection descriptions, StringCollection warnings);
    private void FindUse(MessagePart part, Boolean& isEncoded, Boolean& isLiteral);
    private void FindUse(Operation operation, ServiceDescription description, string messageName, Boolean& isEncoded, Boolean& isLiteral);
    private void AddImport(XmlSchema schema, Hashtable imports);
    private ServiceDescriptionImportWarnings Import(CodeNamespace codeNamespace, ImportContext importContext, Hashtable exportContext, StringCollection warnings);
    private static void AddSchema(XmlSchema schema, bool isEncoded, bool isLiteral, XmlSchemas abstractSchemas, XmlSchemas concreteSchemas, Hashtable references);
}
public enum System.Web.Services.Description.ServiceDescriptionImportStyle : Enum {
    public int value__;
    [XmlEnumAttribute("client")]
public static ServiceDescriptionImportStyle Client;
    [XmlEnumAttribute("server")]
public static ServiceDescriptionImportStyle Server;
    [XmlEnumAttribute("serverInterface")]
public static ServiceDescriptionImportStyle ServerInterface;
}
[FlagsAttribute]
public enum System.Web.Services.Description.ServiceDescriptionImportWarnings : Enum {
    public int value__;
    public static ServiceDescriptionImportWarnings NoCodeGenerated;
    public static ServiceDescriptionImportWarnings OptionalExtensionsIgnored;
    public static ServiceDescriptionImportWarnings RequiredExtensionsIgnored;
    public static ServiceDescriptionImportWarnings UnsupportedOperationsIgnored;
    public static ServiceDescriptionImportWarnings UnsupportedBindingsIgnored;
    public static ServiceDescriptionImportWarnings NoMethodsGenerated;
    public static ServiceDescriptionImportWarnings SchemaValidation;
    public static ServiceDescriptionImportWarnings WsiConformance;
}
public class System.Web.Services.Description.ServiceDescriptionReflector : object {
    private ProtocolReflector[] reflectors;
    private ProtocolReflector[] reflectorsWithPost;
    private ServiceDescriptionCollection descriptions;
    private XmlSchemas schemas;
    private ServiceDescriptionCollection descriptionsWithPost;
    private XmlSchemas schemasWithPost;
    private WebServiceAttribute serviceAttr;
    private ServiceDescription description;
    private Service service;
    private LogicalMethodInfo[] methods;
    private XmlSchemaExporter exporter;
    private XmlReflectionImporter importer;
    private Type serviceType;
    private string serviceUrl;
    private Hashtable reflectionContext;
    private List`1<Action`1<Uri>> uriFixups;
    internal List`1<Action`1<Uri>> UriFixups { get; }
    public ServiceDescriptionCollection ServiceDescriptions { get; }
    public XmlSchemas Schemas { get; }
    internal ServiceDescriptionCollection ServiceDescriptionsWithPost { get; }
    internal XmlSchemas SchemasWithPost { get; }
    internal ServiceDescription ServiceDescription { get; }
    internal Service Service { get; }
    internal Type ServiceType { get; }
    internal LogicalMethodInfo[] Methods { get; }
    internal string ServiceUrl { get; }
    internal XmlSchemaExporter SchemaExporter { get; }
    internal XmlReflectionImporter ReflectionImporter { get; }
    internal WebServiceAttribute ServiceAttribute { get; }
    internal Hashtable ReflectionContext { get; }
    internal ServiceDescriptionReflector(List`1<Action`1<Uri>> uriFixups);
    internal List`1<Action`1<Uri>> get_UriFixups();
    public ServiceDescriptionCollection get_ServiceDescriptions();
    public XmlSchemas get_Schemas();
    internal ServiceDescriptionCollection get_ServiceDescriptionsWithPost();
    internal XmlSchemas get_SchemasWithPost();
    internal ServiceDescription get_ServiceDescription();
    internal Service get_Service();
    internal Type get_ServiceType();
    internal LogicalMethodInfo[] get_Methods();
    internal string get_ServiceUrl();
    internal XmlSchemaExporter get_SchemaExporter();
    internal XmlReflectionImporter get_ReflectionImporter();
    internal WebServiceAttribute get_ServiceAttribute();
    internal Hashtable get_ReflectionContext();
    private void ReflectInternal(ProtocolReflector[] reflectors);
    public void Reflect(Type type, string url);
    private void CheckForDuplicateMethods(LogicalMethodInfo[] methods);
}
internal class System.Web.Services.Description.ServiceDescriptionSerializationReader : XmlSerializationReader {
    private Hashtable _XmlSchemaDerivationMethodValues;
    private string id133_XmlSchemaSimpleTypeUnion;
    private string id143_maxInclusive;
    private string id46_body;
    private string id190_any;
    private string id88_OperationOutput;
    private string id6_targetNamespace;
    private string id158_XmlSchemaMaxLengthFacet;
    private string id11_portType;
    private string id182_mixed;
    private string id172_keyref;
    private string id187_all;
    private string id162_itemType;
    private string id68_InputBinding;
    private string id25_HttpAddressBinding;
    private string id82_HttpBinding;
    private string id17_address;
    private string id3_ServiceDescription;
    private string id38_SoapFaultBinding;
    private string id123_ref;
    private string id198_XmlSchemaComplexContent;
    private string id53_parts;
    private string id35_use;
    private string id157_XmlSchemaLengthFacet;
    private string id207_XmlSchemaImport;
    private string id44_text;
    private string id117_XmlSchemaAppInfo;
    private string id203_public;
    private string id69_urlEncoded;
    private string id7_documentation;
    private string id19_Item;
    private string id129_final;
    private string id163_XmlSchemaElement;
    private string id60_capture;
    private string id37_encodingStyle;
    private string id185_sequence;
    private string id166_abstract;
    private string id23_location;
    private string id111_XmlSchemaAttributeGroup;
    private string id192_XmlSchemaSequence;
    private string id33_FaultBinding;
    private string id153_XmlSchemaMaxInclusiveFacet;
    private string id201_XmlSchemaGroup;
    private string id43_multipartRelated;
    private string id168_nillable;
    private string id149_value;
    private string id64_MimeMultipartRelatedBinding;
    private string id193_XmlSchemaAny;
    private string id191_XmlSchemaGroupRef;
    private string id74_soapAction;
    private string id63_ignoreCase;
    private string id101_version;
    private string id47_header;
    private string id195_extension;
    private string id48_Soap12HeaderBinding;
    private string id134_memberTypes;
    private string id121_Item;
    private string id146_minExclusive;
    private string id84_PortType;
    private string id42_mimeXml;
    private string id138_minInclusive;
    private string id118_source;
    private string id73_Soap12OperationBinding;
    private string id131_restriction;
    private string id152_XmlSchemaMaxExclusiveFacet;
    private string id135_XmlSchemaSimpleTypeRestriction;
    private string id188_XmlSchemaAll;
    private string id116_appinfo;
    private string id86_parameterOrder;
    private string id147_minLength;
    private string id78_HttpOperationBinding;
    private string id161_XmlSchemaSimpleTypeList;
    private string id205_XmlSchemaRedefine;
    private string id194_XmlSchemaSimpleContent;
    private string id91_MessagePart;
    private string id92_element;
    private string id114_processContents;
    private string id18_Item;
    private string id50_headerfault;
    private string id154_XmlSchemaEnumerationFacet;
    private string id96_XmlSchema;
    private string id127_form;
    private string id176_field;
    private string id49_part;
    private string id5_Item;
    private string id57_match;
    private string id52_Soap12BodyBinding;
    private string id104_redefine;
    private string id20_Item;
    private string id21_Soap12AddressBinding;
    private string id142_enumeration;
    private string id24_SoapAddressBinding;
    private string id103_include;
    private string id139_maxLength;
    private string id165_maxOccurs;
    private string id65_MimePart;
    private string id102_id;
    private string id196_Item;
    private string id140_length;
    private string id27_type;
    private string id106_complexType;
    private string id31_output;
    private string id1_definitions;
    private string id4_name;
    private string id132_union;
    private string id29_OperationBinding;
    private string id170_key;
    private string id45_Item;
    private string id95_Item;
    private string id169_substitutionGroup;
    private string id178_xpath;
    private string id9_types;
    private string id97_attributeFormDefault;
    private string id62_pattern;
    private string id58_MimeTextMatch;
    private string id180_XmlSchemaKey;
    private string id10_message;
    private string id8_import;
    private string id148_XmlSchemaMinLengthFacet;
    private string id105_simpleType;
    private string id181_XmlSchemaComplexType;
    private string id164_minOccurs;
    private string id144_maxExclusive;
    private string id160_XmlSchemaFractionDigitsFacet;
    private string id124_XmlSchemaAttribute;
    private string id209_Import;
    private string id206_schemaLocation;
    private string id179_XmlSchemaUnique;
    private string id75_style;
    private string id119_XmlSchemaDocumentation;
    private string id136_base;
    private string id66_MimeXmlBinding;
    private string id30_input;
    private string id40_content;
    private string id93_Types;
    private string id94_schema;
    private string id200_Item;
    private string id67_MimeContentBinding;
    private string id59_group;
    private string id32_fault;
    private string id80_transport;
    private string id98_blockDefault;
    private string id13_service;
    private string id54_SoapHeaderBinding;
    private string id204_system;
    private string id16_Port;
    private string id108_notation;
    private string id186_choice;
    private string id110_attributeGroup;
    private string id79_Soap12Binding;
    private string id77_SoapOperationBinding;
    private string id115_XmlSchemaAnnotation;
    private string id83_verb;
    private string id72_HttpUrlEncodedBinding;
    private string id39_OutputBinding;
    private string id183_complexContent;
    private string id202_XmlSchemaNotation;
    private string id81_SoapBinding;
    private string id199_Item;
    private string id28_operation;
    private string id122_XmlSchemaAttributeGroupRef;
    private string id155_XmlSchemaPatternFacet;
    private string id76_soapActionRequired;
    private string id90_Message;
    private string id159_XmlSchemaMinInclusiveFacet;
    private string id208_XmlSchemaInclude;
    private string id85_Operation;
    private string id130_list;
    private string id14_Service;
    private string id22_required;
    private string id174_refer;
    private string id71_HttpUrlReplacementBinding;
    private string id56_MimeTextBinding;
    private string id87_OperationFault;
    private string id125_default;
    private string id15_port;
    private string id51_SoapHeaderFaultBinding;
    private string id128_XmlSchemaSimpleType;
    private string id36_namespace;
    private string id175_selector;
    private string id150_XmlSchemaMinExclusiveFacet;
    private string id100_elementFormDefault;
    private string id26_Binding;
    private string id197_Item;
    private string id126_fixed;
    private string id107_annotation;
    private string id99_finalDefault;
    private string id137_fractionDigits;
    private string id70_urlReplacement;
    private string id189_XmlSchemaChoice;
    private string id2_Item;
    private string id112_anyAttribute;
    private string id89_OperationInput;
    private string id141_totalDigits;
    private string id61_repeats;
    private string id184_simpleContent;
    private string id55_SoapBodyBinding;
    private string id145_whiteSpace;
    private string id167_block;
    private string id151_XmlSchemaWhiteSpaceFacet;
    private string id12_binding;
    private string id109_attribute;
    private string id171_unique;
    private string id120_lang;
    private string id173_XmlSchemaKeyref;
    private string id177_XmlSchemaXPath;
    private string id34_Soap12FaultBinding;
    private string id41_Item;
    private string id156_XmlSchemaTotalDigitsFacet;
    private string id113_XmlSchemaAnyAttribute;
    internal Hashtable XmlSchemaDerivationMethodValues { get; }
    public object Read125_definitions();
    private ServiceDescription Read124_ServiceDescription(bool isNullable, bool checkType);
    private Service Read123_Service(bool isNullable, bool checkType);
    private Port Read122_Port(bool isNullable, bool checkType);
    private Soap12AddressBinding Read121_Soap12AddressBinding(bool isNullable, bool checkType);
    private SoapAddressBinding Read119_SoapAddressBinding(bool isNullable, bool checkType);
    private HttpAddressBinding Read118_HttpAddressBinding(bool isNullable, bool checkType);
    private Binding Read117_Binding(bool isNullable, bool checkType);
    private OperationBinding Read116_OperationBinding(bool isNullable, bool checkType);
    private FaultBinding Read115_FaultBinding(bool isNullable, bool checkType);
    private Soap12FaultBinding Read114_Soap12FaultBinding(bool isNullable, bool checkType);
    private SoapBindingUse Read100_SoapBindingUse(string s);
    private SoapFaultBinding Read112_SoapFaultBinding(bool isNullable, bool checkType);
    private SoapBindingUse Read98_SoapBindingUse(string s);
    private OutputBinding Read111_OutputBinding(bool isNullable, bool checkType);
    private Soap12HeaderBinding Read109_Soap12HeaderBinding(bool isNullable, bool checkType);
    private SoapHeaderFaultBinding Read107_SoapHeaderFaultBinding(bool isNullable, bool checkType);
    private Soap12BodyBinding Read102_Soap12BodyBinding(bool isNullable, bool checkType);
    private SoapHeaderBinding Read106_SoapHeaderBinding(bool isNullable, bool checkType);
    private SoapHeaderFaultBinding Read105_SoapHeaderFaultBinding(bool isNullable, bool checkType);
    private SoapBodyBinding Read99_SoapBodyBinding(bool isNullable, bool checkType);
    private MimeTextBinding Read97_MimeTextBinding(bool isNullable, bool checkType);
    private MimeTextMatch Read96_MimeTextMatch(bool isNullable, bool checkType);
    private MimeMultipartRelatedBinding Read104_MimeMultipartRelatedBinding(bool isNullable, bool checkType);
    private MimePart Read103_MimePart(bool isNullable, bool checkType);
    private MimeXmlBinding Read94_MimeXmlBinding(bool isNullable, bool checkType);
    private MimeContentBinding Read93_MimeContentBinding(bool isNullable, bool checkType);
    private InputBinding Read110_InputBinding(bool isNullable, bool checkType);
    private HttpUrlReplacementBinding Read91_HttpUrlReplacementBinding(bool isNullable, bool checkType);
    private HttpUrlEncodedBinding Read90_HttpUrlEncodedBinding(bool isNullable, bool checkType);
    private Soap12OperationBinding Read88_Soap12OperationBinding(bool isNullable, bool checkType);
    private SoapBindingStyle Read82_SoapBindingStyle(string s);
    private SoapOperationBinding Read86_SoapOperationBinding(bool isNullable, bool checkType);
    private SoapBindingStyle Read79_SoapBindingStyle(string s);
    private HttpOperationBinding Read85_HttpOperationBinding(bool isNullable, bool checkType);
    private Soap12Binding Read84_Soap12Binding(bool isNullable, bool checkType);
    private SoapBinding Read80_SoapBinding(bool isNullable, bool checkType);
    private HttpBinding Read77_HttpBinding(bool isNullable, bool checkType);
    private PortType Read75_PortType(bool isNullable, bool checkType);
    private Operation Read74_Operation(bool isNullable, bool checkType);
    private OperationFault Read73_OperationFault(bool isNullable, bool checkType);
    private OperationOutput Read72_OperationOutput(bool isNullable, bool checkType);
    private OperationInput Read71_OperationInput(bool isNullable, bool checkType);
    private Message Read69_Message(bool isNullable, bool checkType);
    private MessagePart Read68_MessagePart(bool isNullable, bool checkType);
    private Types Read67_Types(bool isNullable, bool checkType);
    private XmlSchema Read66_XmlSchema(bool isNullable, bool checkType);
    private XmlSchemaAttributeGroup Read40_XmlSchemaAttributeGroup(bool isNullable, bool checkType);
    private XmlSchemaAnyAttribute Read39_XmlSchemaAnyAttribute(bool isNullable, bool checkType);
    private XmlSchemaAnnotation Read11_XmlSchemaAnnotation(bool isNullable, bool checkType);
    private XmlSchemaAppInfo Read10_XmlSchemaAppInfo(bool isNullable, bool checkType);
    private XmlSchemaDocumentation Read9_XmlSchemaDocumentation(bool isNullable, bool checkType);
    private XmlSchemaContentProcessing Read38_XmlSchemaContentProcessing(string s);
    private XmlSchemaAttributeGroupRef Read37_XmlSchemaAttributeGroupRef(bool isNullable, bool checkType);
    private XmlSchemaAttribute Read36_XmlSchemaAttribute(bool isNullable, bool checkType);
    private XmlSchemaSimpleType Read34_XmlSchemaSimpleType(bool isNullable, bool checkType);
    private XmlSchemaSimpleTypeUnion Read33_XmlSchemaSimpleTypeUnion(bool isNullable, bool checkType);
    private XmlSchemaSimpleTypeRestriction Read32_XmlSchemaSimpleTypeRestriction(bool isNullable, bool checkType);
    private XmlSchemaMinLengthFacet Read31_XmlSchemaMinLengthFacet(bool isNullable, bool checkType);
    private XmlSchemaMinExclusiveFacet Read30_XmlSchemaMinExclusiveFacet(bool isNullable, bool checkType);
    private XmlSchemaWhiteSpaceFacet Read29_XmlSchemaWhiteSpaceFacet(bool isNullable, bool checkType);
    private XmlSchemaMaxExclusiveFacet Read28_XmlSchemaMaxExclusiveFacet(bool isNullable, bool checkType);
    private XmlSchemaMaxInclusiveFacet Read27_XmlSchemaMaxInclusiveFacet(bool isNullable, bool checkType);
    private XmlSchemaEnumerationFacet Read26_XmlSchemaEnumerationFacet(bool isNullable, bool checkType);
    private XmlSchemaPatternFacet Read25_XmlSchemaPatternFacet(bool isNullable, bool checkType);
    private XmlSchemaTotalDigitsFacet Read24_XmlSchemaTotalDigitsFacet(bool isNullable, bool checkType);
    private XmlSchemaLengthFacet Read23_XmlSchemaLengthFacet(bool isNullable, bool checkType);
    private XmlSchemaMaxLengthFacet Read22_XmlSchemaMaxLengthFacet(bool isNullable, bool checkType);
    private XmlSchemaMinInclusiveFacet Read21_XmlSchemaMinInclusiveFacet(bool isNullable, bool checkType);
    private XmlSchemaFractionDigitsFacet Read20_XmlSchemaFractionDigitsFacet(bool isNullable, bool checkType);
    private XmlSchemaSimpleTypeList Read17_XmlSchemaSimpleTypeList(bool isNullable, bool checkType);
    internal Hashtable get_XmlSchemaDerivationMethodValues();
    private XmlSchemaDerivationMethod Read7_XmlSchemaDerivationMethod(string s);
    private XmlSchemaUse Read35_XmlSchemaUse(string s);
    private XmlSchemaForm Read6_XmlSchemaForm(string s);
    private XmlSchemaElement Read52_XmlSchemaElement(bool isNullable, bool checkType);
    private XmlSchemaKeyref Read51_XmlSchemaKeyref(bool isNullable, bool checkType);
    private XmlSchemaXPath Read47_XmlSchemaXPath(bool isNullable, bool checkType);
    private XmlSchemaUnique Read50_XmlSchemaUnique(bool isNullable, bool checkType);
    private XmlSchemaKey Read49_XmlSchemaKey(bool isNullable, bool checkType);
    private XmlSchemaComplexType Read62_XmlSchemaComplexType(bool isNullable, bool checkType);
    private XmlSchemaAll Read55_XmlSchemaAll(bool isNullable, bool checkType);
    private XmlSchemaChoice Read54_XmlSchemaChoice(bool isNullable, bool checkType);
    private XmlSchemaGroupRef Read44_XmlSchemaGroupRef(bool isNullable, bool checkType);
    private XmlSchemaSequence Read53_XmlSchemaSequence(bool isNullable, bool checkType);
    private XmlSchemaAny Read46_XmlSchemaAny(bool isNullable, bool checkType);
    private XmlSchemaSimpleContent Read61_XmlSchemaSimpleContent(bool isNullable, bool checkType);
    private XmlSchemaSimpleContentExtension Read60_Item(bool isNullable, bool checkType);
    private XmlSchemaSimpleContentRestriction Read59_Item(bool isNullable, bool checkType);
    private XmlSchemaComplexContent Read58_XmlSchemaComplexContent(bool isNullable, bool checkType);
    private XmlSchemaComplexContentRestriction Read57_Item(bool isNullable, bool checkType);
    private XmlSchemaComplexContentExtension Read56_Item(bool isNullable, bool checkType);
    private XmlSchemaGroup Read63_XmlSchemaGroup(bool isNullable, bool checkType);
    private XmlSchemaNotation Read65_XmlSchemaNotation(bool isNullable, bool checkType);
    private XmlSchemaRedefine Read64_XmlSchemaRedefine(bool isNullable, bool checkType);
    private XmlSchemaImport Read13_XmlSchemaImport(bool isNullable, bool checkType);
    private XmlSchemaInclude Read12_XmlSchemaInclude(bool isNullable, bool checkType);
    private Import Read4_Import(bool isNullable, bool checkType);
    protected virtual void InitCallbacks();
    protected virtual void InitIDs();
}
internal class System.Web.Services.Description.ServiceDescriptionSerializationWriter : XmlSerializationWriter {
    public void Write125_definitions(object o);
    private void Write124_ServiceDescription(string n, string ns, ServiceDescription o, bool isNullable, bool needType);
    private void Write123_Service(string n, string ns, Service o, bool isNullable, bool needType);
    private void Write122_Port(string n, string ns, Port o, bool isNullable, bool needType);
    private void Write119_SoapAddressBinding(string n, string ns, SoapAddressBinding o, bool isNullable, bool needType);
    private void Write118_HttpAddressBinding(string n, string ns, HttpAddressBinding o, bool isNullable, bool needType);
    private void Write121_Soap12AddressBinding(string n, string ns, Soap12AddressBinding o, bool isNullable, bool needType);
    private void Write117_Binding(string n, string ns, Binding o, bool isNullable, bool needType);
    private void Write116_OperationBinding(string n, string ns, OperationBinding o, bool isNullable, bool needType);
    private void Write115_FaultBinding(string n, string ns, FaultBinding o, bool isNullable, bool needType);
    private void Write112_SoapFaultBinding(string n, string ns, SoapFaultBinding o, bool isNullable, bool needType);
    private string Write98_SoapBindingUse(SoapBindingUse v);
    private void Write114_Soap12FaultBinding(string n, string ns, Soap12FaultBinding o, bool isNullable, bool needType);
    private string Write100_SoapBindingUse(SoapBindingUse v);
    private void Write111_OutputBinding(string n, string ns, OutputBinding o, bool isNullable, bool needType);
    private void Write104_MimeMultipartRelatedBinding(string n, string ns, MimeMultipartRelatedBinding o, bool isNullable, bool needType);
    private void Write103_MimePart(string n, string ns, MimePart o, bool isNullable, bool needType);
    private void Write97_MimeTextBinding(string n, string ns, MimeTextBinding o, bool isNullable, bool needType);
    private void Write96_MimeTextMatch(string n, string ns, MimeTextMatch o, bool isNullable, bool needType);
    private void Write94_MimeXmlBinding(string n, string ns, MimeXmlBinding o, bool isNullable, bool needType);
    private void Write93_MimeContentBinding(string n, string ns, MimeContentBinding o, bool isNullable, bool needType);
    private void Write99_SoapBodyBinding(string n, string ns, SoapBodyBinding o, bool isNullable, bool needType);
    private void Write102_Soap12BodyBinding(string n, string ns, Soap12BodyBinding o, bool isNullable, bool needType);
    private void Write106_SoapHeaderBinding(string n, string ns, SoapHeaderBinding o, bool isNullable, bool needType);
    private void Write105_SoapHeaderFaultBinding(string n, string ns, SoapHeaderFaultBinding o, bool isNullable, bool needType);
    private void Write109_Soap12HeaderBinding(string n, string ns, Soap12HeaderBinding o, bool isNullable, bool needType);
    private void Write107_SoapHeaderFaultBinding(string n, string ns, SoapHeaderFaultBinding o, bool isNullable, bool needType);
    private void Write110_InputBinding(string n, string ns, InputBinding o, bool isNullable, bool needType);
    private void Write90_HttpUrlEncodedBinding(string n, string ns, HttpUrlEncodedBinding o, bool isNullable, bool needType);
    private void Write91_HttpUrlReplacementBinding(string n, string ns, HttpUrlReplacementBinding o, bool isNullable, bool needType);
    private void Write86_SoapOperationBinding(string n, string ns, SoapOperationBinding o, bool isNullable, bool needType);
    private string Write79_SoapBindingStyle(SoapBindingStyle v);
    private void Write85_HttpOperationBinding(string n, string ns, HttpOperationBinding o, bool isNullable, bool needType);
    private void Write88_Soap12OperationBinding(string n, string ns, Soap12OperationBinding o, bool isNullable, bool needType);
    private string Write82_SoapBindingStyle(SoapBindingStyle v);
    private void Write80_SoapBinding(string n, string ns, SoapBinding o, bool isNullable, bool needType);
    private void Write77_HttpBinding(string n, string ns, HttpBinding o, bool isNullable, bool needType);
    private void Write84_Soap12Binding(string n, string ns, Soap12Binding o, bool isNullable, bool needType);
    private void Write75_PortType(string n, string ns, PortType o, bool isNullable, bool needType);
    private void Write74_Operation(string n, string ns, Operation o, bool isNullable, bool needType);
    private void Write73_OperationFault(string n, string ns, OperationFault o, bool isNullable, bool needType);
    private void Write71_OperationInput(string n, string ns, OperationInput o, bool isNullable, bool needType);
    private void Write72_OperationOutput(string n, string ns, OperationOutput o, bool isNullable, bool needType);
    private void Write69_Message(string n, string ns, Message o, bool isNullable, bool needType);
    private void Write68_MessagePart(string n, string ns, MessagePart o, bool isNullable, bool needType);
    private void Write67_Types(string n, string ns, Types o, bool isNullable, bool needType);
    private void Write66_XmlSchema(string n, string ns, XmlSchema o, bool isNullable, bool needType);
    private void Write11_XmlSchemaAnnotation(string n, string ns, XmlSchemaAnnotation o, bool isNullable, bool needType);
    private void Write9_XmlSchemaDocumentation(string n, string ns, XmlSchemaDocumentation o, bool isNullable, bool needType);
    private void Write10_XmlSchemaAppInfo(string n, string ns, XmlSchemaAppInfo o, bool isNullable, bool needType);
    private void Write63_XmlSchemaGroup(string n, string ns, XmlSchemaGroup o, bool isNullable, bool needType);
    private void Write53_XmlSchemaSequence(string n, string ns, XmlSchemaSequence o, bool isNullable, bool needType);
    private void Write46_XmlSchemaAny(string n, string ns, XmlSchemaAny o, bool isNullable, bool needType);
    private string Write38_XmlSchemaContentProcessing(XmlSchemaContentProcessing v);
    private void Write52_XmlSchemaElement(string n, string ns, XmlSchemaElement o, bool isNullable, bool needType);
    private void Write49_XmlSchemaKey(string n, string ns, XmlSchemaKey o, bool isNullable, bool needType);
    private void Write47_XmlSchemaXPath(string n, string ns, XmlSchemaXPath o, bool isNullable, bool needType);
    private void Write50_XmlSchemaUnique(string n, string ns, XmlSchemaUnique o, bool isNullable, bool needType);
    private void Write51_XmlSchemaKeyref(string n, string ns, XmlSchemaKeyref o, bool isNullable, bool needType);
    private void Write34_XmlSchemaSimpleType(string n, string ns, XmlSchemaSimpleType o, bool isNullable, bool needType);
    private void Write17_XmlSchemaSimpleTypeList(string n, string ns, XmlSchemaSimpleTypeList o, bool isNullable, bool needType);
    private void Write32_XmlSchemaSimpleTypeRestriction(string n, string ns, XmlSchemaSimpleTypeRestriction o, bool isNullable, bool needType);
    private void Write26_XmlSchemaEnumerationFacet(string n, string ns, XmlSchemaEnumerationFacet o, bool isNullable, bool needType);
    private void Write27_XmlSchemaMaxInclusiveFacet(string n, string ns, XmlSchemaMaxInclusiveFacet o, bool isNullable, bool needType);
    private void Write21_XmlSchemaMinInclusiveFacet(string n, string ns, XmlSchemaMinInclusiveFacet o, bool isNullable, bool needType);
    private void Write25_XmlSchemaPatternFacet(string n, string ns, XmlSchemaPatternFacet o, bool isNullable, bool needType);
    private void Write30_XmlSchemaMinExclusiveFacet(string n, string ns, XmlSchemaMinExclusiveFacet o, bool isNullable, bool needType);
    private void Write29_XmlSchemaWhiteSpaceFacet(string n, string ns, XmlSchemaWhiteSpaceFacet o, bool isNullable, bool needType);
    private void Write28_XmlSchemaMaxExclusiveFacet(string n, string ns, XmlSchemaMaxExclusiveFacet o, bool isNullable, bool needType);
    private void Write31_XmlSchemaMinLengthFacet(string n, string ns, XmlSchemaMinLengthFacet o, bool isNullable, bool needType);
    private void Write20_XmlSchemaFractionDigitsFacet(string n, string ns, XmlSchemaFractionDigitsFacet o, bool isNullable, bool needType);
    private void Write22_XmlSchemaMaxLengthFacet(string n, string ns, XmlSchemaMaxLengthFacet o, bool isNullable, bool needType);
    private void Write24_XmlSchemaTotalDigitsFacet(string n, string ns, XmlSchemaTotalDigitsFacet o, bool isNullable, bool needType);
    private void Write23_XmlSchemaLengthFacet(string n, string ns, XmlSchemaLengthFacet o, bool isNullable, bool needType);
    private void Write33_XmlSchemaSimpleTypeUnion(string n, string ns, XmlSchemaSimpleTypeUnion o, bool isNullable, bool needType);
    private string Write7_XmlSchemaDerivationMethod(XmlSchemaDerivationMethod v);
    private void Write62_XmlSchemaComplexType(string n, string ns, XmlSchemaComplexType o, bool isNullable, bool needType);
    private void Write39_XmlSchemaAnyAttribute(string n, string ns, XmlSchemaAnyAttribute o, bool isNullable, bool needType);
    private void Write36_XmlSchemaAttribute(string n, string ns, XmlSchemaAttribute o, bool isNullable, bool needType);
    private string Write35_XmlSchemaUse(XmlSchemaUse v);
    private string Write6_XmlSchemaForm(XmlSchemaForm v);
    private void Write37_XmlSchemaAttributeGroupRef(string n, string ns, XmlSchemaAttributeGroupRef o, bool isNullable, bool needType);
    private void Write44_XmlSchemaGroupRef(string n, string ns, XmlSchemaGroupRef o, bool isNullable, bool needType);
    private void Write55_XmlSchemaAll(string n, string ns, XmlSchemaAll o, bool isNullable, bool needType);
    private void Write54_XmlSchemaChoice(string n, string ns, XmlSchemaChoice o, bool isNullable, bool needType);
    private void Write58_XmlSchemaComplexContent(string n, string ns, XmlSchemaComplexContent o, bool isNullable, bool needType);
    private void Write56_Item(string n, string ns, XmlSchemaComplexContentExtension o, bool isNullable, bool needType);
    private void Write57_Item(string n, string ns, XmlSchemaComplexContentRestriction o, bool isNullable, bool needType);
    private void Write61_XmlSchemaSimpleContent(string n, string ns, XmlSchemaSimpleContent o, bool isNullable, bool needType);
    private void Write59_Item(string n, string ns, XmlSchemaSimpleContentRestriction o, bool isNullable, bool needType);
    private void Write60_Item(string n, string ns, XmlSchemaSimpleContentExtension o, bool isNullable, bool needType);
    private void Write65_XmlSchemaNotation(string n, string ns, XmlSchemaNotation o, bool isNullable, bool needType);
    private void Write40_XmlSchemaAttributeGroup(string n, string ns, XmlSchemaAttributeGroup o, bool isNullable, bool needType);
    private void Write12_XmlSchemaInclude(string n, string ns, XmlSchemaInclude o, bool isNullable, bool needType);
    private void Write13_XmlSchemaImport(string n, string ns, XmlSchemaImport o, bool isNullable, bool needType);
    private void Write64_XmlSchemaRedefine(string n, string ns, XmlSchemaRedefine o, bool isNullable, bool needType);
    private void Write4_Import(string n, string ns, Import o, bool isNullable, bool needType);
    protected virtual void InitCallbacks();
}
[XmlFormatExtensionAttribute("address", "http://schemas.xmlsoap.org/wsdl/soap12/", "System.Web.Services.Description.Port")]
public class System.Web.Services.Description.Soap12AddressBinding : SoapAddressBinding {
}
[XmlFormatExtensionAttribute("binding", "http://schemas.xmlsoap.org/wsdl/soap12/", "System.Web.Services.Description.Binding")]
[XmlFormatExtensionPrefixAttribute("soap12", "http://schemas.xmlsoap.org/wsdl/soap12/")]
public class System.Web.Services.Description.Soap12Binding : SoapBinding {
    public static string Namespace;
    public static string HttpTransport;
}
[XmlFormatExtensionAttribute("body", "http://schemas.xmlsoap.org/wsdl/soap12/", "System.Web.Services.Description.InputBinding", "System.Web.Services.Description.OutputBinding", "System.Web.Services.Description.MimePart")]
public class System.Web.Services.Description.Soap12BodyBinding : SoapBodyBinding {
}
[XmlFormatExtensionAttribute("fault", "http://schemas.xmlsoap.org/wsdl/soap12/", "System.Web.Services.Description.FaultBinding")]
public class System.Web.Services.Description.Soap12FaultBinding : SoapFaultBinding {
}
[XmlFormatExtensionAttribute("header", "http://schemas.xmlsoap.org/wsdl/soap12/", "System.Web.Services.Description.InputBinding", "System.Web.Services.Description.OutputBinding")]
public class System.Web.Services.Description.Soap12HeaderBinding : SoapHeaderBinding {
}
[XmlFormatExtensionAttribute("operation", "http://schemas.xmlsoap.org/wsdl/soap12/", "System.Web.Services.Description.OperationBinding")]
public class System.Web.Services.Description.Soap12OperationBinding : SoapOperationBinding {
    private bool soapActionRequired;
    private Soap12OperationBinding duplicateBySoapAction;
    private Soap12OperationBinding duplicateByRequestElement;
    private SoapReflectedMethod method;
    [XmlAttributeAttribute("soapActionRequired")]
[DefaultValueAttribute("False")]
public bool SoapActionRequired { get; public set; }
    internal SoapReflectedMethod Method { get; internal set; }
    internal Soap12OperationBinding DuplicateBySoapAction { get; internal set; }
    internal Soap12OperationBinding DuplicateByRequestElement { get; internal set; }
    public bool get_SoapActionRequired();
    public void set_SoapActionRequired(bool value);
    internal SoapReflectedMethod get_Method();
    internal void set_Method(SoapReflectedMethod value);
    internal Soap12OperationBinding get_DuplicateBySoapAction();
    internal void set_DuplicateBySoapAction(Soap12OperationBinding value);
    internal Soap12OperationBinding get_DuplicateByRequestElement();
    internal void set_DuplicateByRequestElement(Soap12OperationBinding value);
}
internal class System.Web.Services.Description.Soap12ProtocolImporter : SoapProtocolImporter {
    public string ProtocolName { get; }
    public virtual string get_ProtocolName();
    protected virtual bool IsBindingSupported();
    protected virtual bool IsSoapEncodingPresent(string uriList);
}
internal class System.Web.Services.Description.Soap12ProtocolReflector : SoapProtocolReflector {
    private Hashtable requestElements;
    private Hashtable actions;
    private XmlQualifiedName soap11PortType;
    internal WsiProfiles ConformsTo { get; }
    public string ProtocolName { get; }
    internal virtual WsiProfiles get_ConformsTo();
    public virtual string get_ProtocolName();
    protected virtual void BeginClass();
    protected virtual bool ReflectMethod();
    protected virtual void EndClass();
    protected virtual SoapBinding CreateSoapBinding(SoapBindingStyle style);
    protected virtual SoapAddressBinding CreateSoapAddressBinding(string serviceUrl);
    protected virtual SoapOperationBinding CreateSoapOperationBinding(SoapBindingStyle style, string action);
    protected virtual SoapBodyBinding CreateSoapBodyBinding(SoapBindingUse use, string ns);
    protected virtual SoapHeaderBinding CreateSoapHeaderBinding(XmlQualifiedName message, string partName, SoapBindingUse use);
    protected virtual SoapHeaderBinding CreateSoapHeaderBinding(XmlQualifiedName message, string partName, string ns, SoapBindingUse use);
    private void DealWithAmbiguity(string action, string requestElement, Soap12OperationBinding operation);
    private void CheckOperationDuplicates(Soap12OperationBinding operation);
}
[XmlFormatExtensionAttribute("address", "http://schemas.xmlsoap.org/wsdl/soap/", "System.Web.Services.Description.Port")]
public class System.Web.Services.Description.SoapAddressBinding : ServiceDescriptionFormatExtension {
    private string location;
    [XmlAttributeAttribute("location")]
public string Location { get; public set; }
    public string get_Location();
    public void set_Location(string value);
}
[XmlFormatExtensionAttribute("binding", "http://schemas.xmlsoap.org/wsdl/soap/", "System.Web.Services.Description.Binding")]
[XmlFormatExtensionPrefixAttribute("soap", "http://schemas.xmlsoap.org/wsdl/soap/")]
[XmlFormatExtensionPrefixAttribute("soapenc", "http://schemas.xmlsoap.org/soap/encoding/")]
public class System.Web.Services.Description.SoapBinding : ServiceDescriptionFormatExtension {
    private SoapBindingStyle style;
    private string transport;
    private static XmlSchema schema;
    public static string Namespace;
    public static string HttpTransport;
    [XmlAttributeAttribute("transport")]
public string Transport { get; public set; }
    [XmlAttributeAttribute("style")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public SoapBindingStyle Style { get; public set; }
    public static XmlSchema Schema { get; }
    private static SoapBinding();
    public string get_Transport();
    public void set_Transport(string value);
    public SoapBindingStyle get_Style();
    public void set_Style(SoapBindingStyle value);
    public static XmlSchema get_Schema();
}
public enum System.Web.Services.Description.SoapBindingStyle : Enum {
    public int value__;
    [XmlIgnoreAttribute]
public static SoapBindingStyle Default;
    [XmlEnumAttribute("document")]
public static SoapBindingStyle Document;
    [XmlEnumAttribute("rpc")]
public static SoapBindingStyle Rpc;
}
public enum System.Web.Services.Description.SoapBindingUse : Enum {
    public int value__;
    [XmlIgnoreAttribute]
public static SoapBindingUse Default;
    [XmlEnumAttribute("encoded")]
public static SoapBindingUse Encoded;
    [XmlEnumAttribute("literal")]
public static SoapBindingUse Literal;
}
[XmlFormatExtensionAttribute("body", "http://schemas.xmlsoap.org/wsdl/soap/", "System.Web.Services.Description.InputBinding", "System.Web.Services.Description.OutputBinding", "System.Web.Services.Description.MimePart")]
public class System.Web.Services.Description.SoapBodyBinding : ServiceDescriptionFormatExtension {
    private SoapBindingUse use;
    private string ns;
    private string encoding;
    private String[] parts;
    [XmlAttributeAttribute("use")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public SoapBindingUse Use { get; public set; }
    [XmlAttributeAttribute("namespace")]
[DefaultValueAttribute("")]
public string Namespace { get; public set; }
    [XmlAttributeAttribute("encodingStyle")]
[DefaultValueAttribute("")]
public string Encoding { get; public set; }
    [XmlAttributeAttribute("parts")]
public string PartsString { get; public set; }
    [XmlIgnoreAttribute]
public String[] Parts { get; public set; }
    public SoapBindingUse get_Use();
    public void set_Use(SoapBindingUse value);
    public string get_Namespace();
    public void set_Namespace(string value);
    public string get_Encoding();
    public void set_Encoding(string value);
    public string get_PartsString();
    public void set_PartsString(string value);
    public String[] get_Parts();
    public void set_Parts(String[] value);
}
public abstract class System.Web.Services.Description.SoapExtensionImporter : object {
    private SoapProtocolImporter protocolImporter;
    public SoapProtocolImporter ImportContext { get; public set; }
    public abstract virtual void ImportMethod(CodeAttributeDeclarationCollection metadata);
    public SoapProtocolImporter get_ImportContext();
    public void set_ImportContext(SoapProtocolImporter value);
}
public abstract class System.Web.Services.Description.SoapExtensionReflector : object {
    private ProtocolReflector protocolReflector;
    public ProtocolReflector ReflectionContext { get; public set; }
    public abstract virtual void ReflectMethod();
    public virtual void ReflectDescription();
    public ProtocolReflector get_ReflectionContext();
    public void set_ReflectionContext(ProtocolReflector value);
}
[XmlFormatExtensionAttribute("fault", "http://schemas.xmlsoap.org/wsdl/soap/", "System.Web.Services.Description.FaultBinding")]
public class System.Web.Services.Description.SoapFaultBinding : ServiceDescriptionFormatExtension {
    private SoapBindingUse use;
    private string ns;
    private string encoding;
    private string name;
    [XmlAttributeAttribute("use")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public SoapBindingUse Use { get; public set; }
    [XmlAttributeAttribute("name")]
public string Name { get; public set; }
    [XmlAttributeAttribute("namespace")]
public string Namespace { get; public set; }
    [XmlAttributeAttribute("encodingStyle")]
[DefaultValueAttribute("")]
public string Encoding { get; public set; }
    public SoapBindingUse get_Use();
    public void set_Use(SoapBindingUse value);
    public string get_Name();
    public void set_Name(string value);
    public string get_Namespace();
    public void set_Namespace(string value);
    public string get_Encoding();
    public void set_Encoding(string value);
}
[XmlFormatExtensionAttribute("header", "http://schemas.xmlsoap.org/wsdl/soap/", "System.Web.Services.Description.InputBinding", "System.Web.Services.Description.OutputBinding")]
public class System.Web.Services.Description.SoapHeaderBinding : ServiceDescriptionFormatExtension {
    private XmlQualifiedName message;
    private string part;
    private SoapBindingUse use;
    private string encoding;
    private string ns;
    private bool mapToProperty;
    private SoapHeaderFaultBinding fault;
    [XmlIgnoreAttribute]
public bool MapToProperty { get; public set; }
    [XmlAttributeAttribute("message")]
public XmlQualifiedName Message { get; public set; }
    [XmlAttributeAttribute("part")]
public string Part { get; public set; }
    [XmlAttributeAttribute("use")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public SoapBindingUse Use { get; public set; }
    [XmlAttributeAttribute("encodingStyle")]
[DefaultValueAttribute("")]
public string Encoding { get; public set; }
    [XmlAttributeAttribute("namespace")]
[DefaultValueAttribute("")]
public string Namespace { get; public set; }
    [XmlElementAttribute("headerfault")]
public SoapHeaderFaultBinding Fault { get; public set; }
    public bool get_MapToProperty();
    public void set_MapToProperty(bool value);
    public XmlQualifiedName get_Message();
    public void set_Message(XmlQualifiedName value);
    public string get_Part();
    public void set_Part(string value);
    public SoapBindingUse get_Use();
    public void set_Use(SoapBindingUse value);
    public string get_Encoding();
    public void set_Encoding(string value);
    public string get_Namespace();
    public void set_Namespace(string value);
    public SoapHeaderFaultBinding get_Fault();
    public void set_Fault(SoapHeaderFaultBinding value);
}
public class System.Web.Services.Description.SoapHeaderFaultBinding : ServiceDescriptionFormatExtension {
    private XmlQualifiedName message;
    private string part;
    private SoapBindingUse use;
    private string encoding;
    private string ns;
    [XmlAttributeAttribute("message")]
public XmlQualifiedName Message { get; public set; }
    [XmlAttributeAttribute("part")]
public string Part { get; public set; }
    [XmlAttributeAttribute("use")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public SoapBindingUse Use { get; public set; }
    [XmlAttributeAttribute("encodingStyle")]
[DefaultValueAttribute("")]
public string Encoding { get; public set; }
    [XmlAttributeAttribute("namespace")]
[DefaultValueAttribute("")]
public string Namespace { get; public set; }
    public XmlQualifiedName get_Message();
    public void set_Message(XmlQualifiedName value);
    public string get_Part();
    public void set_Part(string value);
    public SoapBindingUse get_Use();
    public void set_Use(SoapBindingUse value);
    public string get_Encoding();
    public void set_Encoding(string value);
    public string get_Namespace();
    public void set_Namespace(string value);
}
internal class System.Web.Services.Description.SoapHttpTransportImporter : SoapTransportImporter {
    public virtual bool IsSupportedTransport(string transport);
    public virtual void ImportClass();
}
[XmlFormatExtensionAttribute("operation", "http://schemas.xmlsoap.org/wsdl/soap/", "System.Web.Services.Description.OperationBinding")]
public class System.Web.Services.Description.SoapOperationBinding : ServiceDescriptionFormatExtension {
    private string soapAction;
    private SoapBindingStyle style;
    [XmlAttributeAttribute("soapAction")]
public string SoapAction { get; public set; }
    [XmlAttributeAttribute("style")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public SoapBindingStyle Style { get; public set; }
    public string get_SoapAction();
    public void set_SoapAction(string value);
    public SoapBindingStyle get_Style();
    public void set_Style(SoapBindingStyle value);
}
internal class System.Web.Services.Description.SoapParameter : object {
    internal CodeFlags codeFlags;
    internal string name;
    internal XmlMemberMapping mapping;
    internal string specifiedName;
    internal bool IsOut { get; }
    internal bool IsByRef { get; }
    internal bool get_IsOut();
    internal bool get_IsByRef();
    internal static String[] GetTypeFullNames(IList parameters, int specifiedCount, CodeDomProvider codeProvider);
    internal static void GetTypeFullNames(IList parameters, String[] typeFullNames, int start, int specifiedCount, CodeDomProvider codeProvider);
    internal static String[] GetNames(IList parameters, int specifiedCount);
    internal static void GetNames(IList parameters, String[] names, int start, int specifiedCount);
    internal static CodeFlags[] GetCodeFlags(IList parameters, int specifiedCount);
    internal static void GetCodeFlags(IList parameters, CodeFlags[] codeFlags, int start, int specifiedCount);
}
internal class System.Web.Services.Description.SoapParameters : object {
    private XmlMemberMapping ret;
    private ArrayList parameters;
    private ArrayList inParameters;
    private ArrayList outParameters;
    private int checkSpecifiedCount;
    private int inCheckSpecifiedCount;
    private int outCheckSpecifiedCount;
    internal XmlMemberMapping Return { get; }
    internal IList Parameters { get; }
    internal IList InParameters { get; }
    internal IList OutParameters { get; }
    internal int CheckSpecifiedCount { get; }
    internal int InCheckSpecifiedCount { get; }
    internal int OutCheckSpecifiedCount { get; }
    internal SoapParameters(XmlMembersMapping request, XmlMembersMapping response, String[] parameterOrder, CodeIdentifiers identifiers);
    private void AddParameter(SoapParameter parameter);
    private static bool RemoveByRefMapping(ArrayList responseList, XmlMemberMapping requestMapping);
    private static void AddMappings(ArrayList mappingsList, XmlMembersMapping mappings);
    private static XmlMemberMapping FindMapping(ArrayList mappingsList, string elementName);
    internal XmlMemberMapping get_Return();
    internal IList get_Parameters();
    internal IList get_InParameters();
    internal IList get_OutParameters();
    internal int get_CheckSpecifiedCount();
    internal int get_InCheckSpecifiedCount();
    internal int get_OutCheckSpecifiedCount();
}
public class System.Web.Services.Description.SoapProtocolImporter : ProtocolImporter {
    private XmlSchemaImporter xmlImporter;
    private XmlCodeExporter xmlExporter;
    private SoapSchemaImporter soapImporter;
    private SoapCodeExporter soapExporter;
    private ArrayList xmlMembers;
    private ArrayList soapMembers;
    private Hashtable headers;
    private Hashtable classHeaders;
    private ArrayList propertyNames;
    private ArrayList propertyValues;
    private SoapExtensionImporter[] extensions;
    private SoapTransportImporter transport;
    private SoapBinding soapBinding;
    private ArrayList codeClasses;
    private static TypedDataSetSchemaImporterExtension typedDataSetSchemaImporterExtension;
    public string ProtocolName { get; }
    public SoapBinding SoapBinding { get; }
    public SoapSchemaImporter SoapImporter { get; }
    public XmlSchemaImporter XmlImporter { get; }
    public XmlCodeExporter XmlExporter { get; }
    public SoapCodeExporter SoapExporter { get; }
    private static TypedDataSetSchemaImporterExtension TypedDataSetSchemaImporterExtension { get; }
    private bool MetadataPropertiesAdded { get; }
    public virtual string get_ProtocolName();
    public SoapBinding get_SoapBinding();
    public SoapSchemaImporter get_SoapImporter();
    public XmlSchemaImporter get_XmlImporter();
    public XmlCodeExporter get_XmlExporter();
    public SoapCodeExporter get_SoapExporter();
    private static TypedDataSetSchemaImporterExtension get_TypedDataSetSchemaImporterExtension();
    protected virtual void BeginNamespace();
    protected virtual void EndNamespace();
    protected virtual bool IsBindingSupported();
    internal SoapTransportImporter GetTransport(string transport);
    protected virtual CodeTypeDeclaration BeginClass();
    protected virtual void EndClass();
    protected virtual bool IsOperationFlowSupported(OperationFlow flow);
    private void BeginMetadata();
    private bool get_MetadataPropertiesAdded();
    private void AddMetadataProperty(string name, object value);
    private void AddMetadataProperty(string name, CodeExpression expr);
    private void EndMetadata(CodeAttributeDeclarationCollection metadata, Type attributeType, string parameter);
    private void GenerateExtensionMetadata(CodeAttributeDeclarationCollection metadata);
    private void PrepareHeaders(MessageBinding messageBinding);
    private void GenerateHeaders(CodeAttributeDeclarationCollection metadata, SoapBindingUse use, bool rpc, MessageBinding requestMessage, MessageBinding responseMessage);
    protected virtual CodeMemberMethod GenerateMethod();
    private void WriteReturnMappings(CodeMemberMethod codeMethod, CodeExpression invoke, SoapParameters parameters, string resultsName);
    private void CreateInvokeParams(CodeExpression[] invokeParams, string methodName, IList parameters, int checkSpecifiedCount);
    private bool CheckMessageStyles(string messageName, MessagePart[] parts, SoapBodyBinding soapBodyBinding, SoapBindingStyle soapBindingStyle, Boolean& hasWrapper);
    protected virtual bool IsSoapEncodingPresent(string uriList);
    private MessagePart[] GetMessageParts(Message message, SoapBodyBinding soapBodyBinding);
    private XmlMembersMapping ImportMessage(string messageName, MessagePart[] parts, SoapBodyBinding soapBodyBinding, SoapBindingStyle soapBindingStyle, bool wrapped);
    private XmlMembersMapping ImportEncodedMessage(string messageName, MessagePart[] parts, SoapBodyBinding soapBodyBinding, bool wrapped);
    private XmlMembersMapping ImportLiteralMessage(string messageName, MessagePart[] parts, SoapBodyBinding soapBodyBinding, SoapBindingStyle soapBindingStyle, bool wrapped);
}
internal class System.Web.Services.Description.SoapProtocolReflector : ProtocolReflector {
    private ArrayList mappings;
    private SoapExtensionReflector[] extensions;
    private SoapReflectedMethod soapMethod;
    internal WsiProfiles ConformsTo { get; }
    public string ProtocolName { get; }
    internal SoapReflectedMethod SoapMethod { get; }
    internal SoapReflectionImporter SoapImporter { get; }
    internal SoapSchemaExporter SoapExporter { get; }
    internal virtual WsiProfiles get_ConformsTo();
    public virtual string get_ProtocolName();
    internal SoapReflectedMethod get_SoapMethod();
    internal SoapReflectionImporter get_SoapImporter();
    internal SoapSchemaExporter get_SoapExporter();
    protected virtual bool ReflectMethod();
    protected virtual void ReflectDescription();
    private void CreateHeaderMessages(string methodName, SoapBindingUse use, XmlMembersMapping inHeaderMappings, XmlMembersMapping outHeaderMappings, SoapReflectedHeader[] headers, bool rpc);
    private void CreateMessage(bool rpc, SoapBindingUse use, SoapParameterStyle paramStyle, Message message, MessageBinding messageBinding, XmlMembersMapping members);
    private void CreateEncodedMessage(Message message, MessageBinding messageBinding, XmlMembersMapping members, bool wrapped);
    private void CreateLiteralMessage(Message message, MessageBinding messageBinding, XmlMembersMapping members, bool wrapped, bool rpc);
    private static String[] GetParameterOrder(LogicalMethodInfo methodInfo);
    protected virtual string ReflectMethodBinding();
    protected virtual void BeginClass();
    private void AllowExtensionsToReflectMethod();
    private void AllowExtensionsToReflectDescription();
    protected virtual SoapBinding CreateSoapBinding(SoapBindingStyle style);
    protected virtual SoapAddressBinding CreateSoapAddressBinding(string serviceUrl);
    protected virtual SoapOperationBinding CreateSoapOperationBinding(SoapBindingStyle style, string action);
    protected virtual SoapBodyBinding CreateSoapBodyBinding(SoapBindingUse use, string ns);
    protected virtual SoapHeaderBinding CreateSoapHeaderBinding(XmlQualifiedName message, string partName, SoapBindingUse use);
    protected virtual SoapHeaderBinding CreateSoapHeaderBinding(XmlQualifiedName message, string partName, string ns, SoapBindingUse use);
}
public abstract class System.Web.Services.Description.SoapTransportImporter : object {
    private SoapProtocolImporter protocolImporter;
    public SoapProtocolImporter ImportContext { get; public set; }
    public abstract virtual bool IsSupportedTransport(string transport);
    public abstract virtual void ImportClass();
    public SoapProtocolImporter get_ImportContext();
    public void set_ImportContext(SoapProtocolImporter value);
}
[XmlFormatExtensionPointAttribute("Extensions")]
public class System.Web.Services.Description.Types : DocumentableItem {
    private XmlSchemas schemas;
    private ServiceDescriptionFormatExtensionCollection extensions;
    [XmlIgnoreAttribute]
public ServiceDescriptionFormatExtensionCollection Extensions { get; }
    [XmlElementAttribute("schema", "System.Xml.Schema.XmlSchema")]
public XmlSchemas Schemas { get; }
    internal bool HasItems();
    public virtual ServiceDescriptionFormatExtensionCollection get_Extensions();
    public XmlSchemas get_Schemas();
}
internal class System.Web.Services.Description.WebCodeGenerator : object {
    private static CodeAttributeDeclaration generatedCodeAttribute;
    internal static CodeAttributeDeclaration GeneratedCodeAttribute { get; }
    internal static CodeAttributeDeclaration get_GeneratedCodeAttribute();
    private static string GetProductVersion(Assembly assembly);
    internal static String[] GetNamespacesForTypes(Type[] types);
    internal static void AddImports(CodeNamespace codeNamespace, String[] namespaces);
    private static CodeMemberProperty CreatePropertyDeclaration(CodeMemberField field, string name, string typeName);
    internal static CodeTypeMember AddMember(CodeTypeDeclaration codeClass, string typeName, string memberName, CodeExpression initializer, CodeAttributeDeclarationCollection metadata, CodeFlags flags, CodeGenerationOptions options);
    internal static string FullTypeName(XmlMemberMapping mapping, CodeDomProvider codeProvider);
    private static string MakeFieldName(string name);
    internal static CodeConstructor AddConstructor(CodeTypeDeclaration codeClass, String[] parameterTypeNames, String[] parameterNames, CodeAttributeDeclarationCollection metadata, CodeFlags flags);
    internal static CodeMemberMethod AddMethod(CodeTypeDeclaration codeClass, string methodName, CodeFlags[] parameterFlags, String[] parameterTypeNames, String[] parameterNames, string returnTypeName, CodeAttributeDeclarationCollection metadata, CodeFlags flags);
    internal static CodeMemberMethod AddMethod(CodeTypeDeclaration codeClass, string methodName, CodeFlags[] parameterFlags, String[] parameterTypeNames, String[] parameterNames, CodeAttributeDeclarationCollection[] parameterAttributes, string returnTypeName, CodeAttributeDeclarationCollection metadata, CodeFlags flags);
    internal static CodeTypeDeclaration AddClass(CodeNamespace codeNamespace, string className, string baseClassName, String[] implementedInterfaceNames, CodeAttributeDeclarationCollection metadata, CodeFlags flags, bool isPartial);
    internal static CodeTypeDeclaration CreateClass(string className, string baseClassName, String[] implementedInterfaceNames, CodeAttributeDeclarationCollection metadata, CodeFlags flags, bool isPartial);
    internal static CodeAttributeDeclarationCollection AddCustomAttribute(CodeAttributeDeclarationCollection metadata, Type type, CodeAttributeArgument[] arguments);
    internal static CodeAttributeDeclarationCollection AddCustomAttribute(CodeAttributeDeclarationCollection metadata, Type type, CodeExpression[] arguments);
    internal static CodeAttributeDeclarationCollection AddCustomAttribute(CodeAttributeDeclarationCollection metadata, Type type, CodeExpression[] parameters, String[] propNames, CodeExpression[] propValues);
    internal static void AddEvent(CodeTypeMemberCollection members, string handlerType, string handlerName);
    internal static void AddDelegate(CodeTypeDeclarationCollection codeClasses, string handlerType, string handlerArgs);
    internal static void AddCallbackDeclaration(CodeTypeMemberCollection members, string callbackMember);
    internal static void AddCallbackImplementation(CodeTypeDeclaration codeClass, string callbackName, string handlerName, string handlerArgs, bool methodHasOutParameters);
    internal static CodeMemberMethod AddAsyncMethod(CodeTypeDeclaration codeClass, string methodName, String[] parameterTypeNames, String[] parameterNames, string callbackMember, string callbackName, string userState);
    internal static CodeTypeDeclaration CreateArgsClass(string name, String[] paramTypes, String[] paramNames, bool isPartial);
    private static CodeMemberProperty CreatePropertyDeclaration(CodeMemberField field, string name, string typeName, int index);
}
public class System.Web.Services.Description.WebReference : object {
    private CodeNamespace proxyCode;
    private DiscoveryClientDocumentCollection documents;
    private string appSettingUrlKey;
    private string appSettingBaseUrl;
    private string protocolName;
    private ServiceDescriptionImportWarnings warnings;
    private StringCollection validationWarnings;
    public string AppSettingBaseUrl { get; }
    public string AppSettingUrlKey { get; }
    public DiscoveryClientDocumentCollection Documents { get; }
    public CodeNamespace ProxyCode { get; }
    public StringCollection ValidationWarnings { get; }
    public ServiceDescriptionImportWarnings Warnings { get; public set; }
    public string ProtocolName { get; public set; }
    public WebReference(DiscoveryClientDocumentCollection documents, CodeNamespace proxyCode, string protocolName, string appSettingUrlKey, string appSettingBaseUrl);
    public WebReference(DiscoveryClientDocumentCollection documents, CodeNamespace proxyCode);
    public WebReference(DiscoveryClientDocumentCollection documents, CodeNamespace proxyCode, string appSettingUrlKey, string appSettingBaseUrl);
    public string get_AppSettingBaseUrl();
    public string get_AppSettingUrlKey();
    public DiscoveryClientDocumentCollection get_Documents();
    public CodeNamespace get_ProxyCode();
    public StringCollection get_ValidationWarnings();
    public ServiceDescriptionImportWarnings get_Warnings();
    public void set_Warnings(ServiceDescriptionImportWarnings value);
    public string get_ProtocolName();
    public void set_ProtocolName(string value);
}
[DefaultMemberAttribute("Item")]
public class System.Web.Services.Description.WebReferenceCollection : CollectionBase {
    public WebReference Item { get; public set; }
    public WebReference get_Item(int index);
    public void set_Item(int index, WebReference value);
    public int Add(WebReference webReference);
    public void Insert(int index, WebReference webReference);
    public int IndexOf(WebReference webReference);
    public bool Contains(WebReference webReference);
    public void Remove(WebReference webReference);
    public void CopyTo(WebReference[] array, int index);
}
[XmlTypeAttribute("webReferenceOptions")]
[XmlRootAttribute("webReferenceOptions")]
public class System.Web.Services.Description.WebReferenceOptions : object {
    public static string TargetNamespace;
    private static XmlSchema schema;
    private CodeGenerationOptions codeGenerationOptions;
    private ServiceDescriptionImportStyle style;
    private StringCollection schemaImporterExtensions;
    private bool verbose;
    [XmlElementAttribute("codeGenerationOptions")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public CodeGenerationOptions CodeGenerationOptions { get; public set; }
    [XmlArrayAttribute("schemaImporterExtensions")]
[XmlArrayItemAttribute("type")]
public StringCollection SchemaImporterExtensions { get; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[XmlElementAttribute("style")]
public ServiceDescriptionImportStyle Style { get; public set; }
    [XmlElementAttribute("verbose")]
public bool Verbose { get; public set; }
    public static XmlSchema Schema { get; }
    private static WebReferenceOptions();
    public CodeGenerationOptions get_CodeGenerationOptions();
    public void set_CodeGenerationOptions(CodeGenerationOptions value);
    public StringCollection get_SchemaImporterExtensions();
    public ServiceDescriptionImportStyle get_Style();
    public void set_Style(ServiceDescriptionImportStyle value);
    public bool get_Verbose();
    public void set_Verbose(bool value);
    public static XmlSchema get_Schema();
    public static WebReferenceOptions Read(TextReader reader, ValidationEventHandler validationEventHandler);
    public static WebReferenceOptions Read(Stream stream, ValidationEventHandler validationEventHandler);
    public static WebReferenceOptions Read(XmlReader xmlReader, ValidationEventHandler validationEventHandler);
    private static void SchemaValidationHandler(object sender, ValidationEventArgs args);
}
internal class System.Web.Services.Description.WebReferenceOptionsSerializationReader : XmlSerializationReader {
    private Hashtable _CodeGenerationOptionsValues;
    private string id2_Item;
    private string id5_type;
    private string id4_schemaImporterExtensions;
    private string id3_codeGenerationOptions;
    private string id6_style;
    private string id7_verbose;
    private string id1_webReferenceOptions;
    internal Hashtable CodeGenerationOptionsValues { get; }
    internal Hashtable get_CodeGenerationOptionsValues();
    private CodeGenerationOptions Read1_CodeGenerationOptions(string s);
    private ServiceDescriptionImportStyle Read2_ServiceDescriptionImportStyle(string s);
    private WebReferenceOptions Read4_WebReferenceOptions(bool isNullable, bool checkType);
    protected virtual void InitCallbacks();
    internal object Read5_webReferenceOptions();
    protected virtual void InitIDs();
}
internal class System.Web.Services.Description.WebReferenceOptionsSerializationWriter : XmlSerializationWriter {
    private string Write1_CodeGenerationOptions(CodeGenerationOptions v);
    private string Write2_ServiceDescriptionImportStyle(ServiceDescriptionImportStyle v);
    private void Write4_WebReferenceOptions(string n, string ns, WebReferenceOptions o, bool isNullable, bool needType);
    protected virtual void InitCallbacks();
    internal void Write5_webReferenceOptions(object o);
}
internal class System.Web.Services.Description.webReferenceOptionsSerializer : XmlSerializer {
    protected virtual XmlSerializationReader CreateReader();
    protected virtual XmlSerializationWriter CreateWriter();
    public virtual bool CanDeserialize(XmlReader xmlReader);
    protected virtual void Serialize(object objectToSerialize, XmlSerializationWriter writer);
    protected virtual object Deserialize(XmlSerializationReader reader);
}
public class System.Web.Services.Description.WebServicesInteroperability : object {
    public static bool CheckConformance(WsiProfiles claims, ServiceDescription description, BasicProfileViolationCollection violations);
    public static bool CheckConformance(WsiProfiles claims, ServiceDescriptionCollection descriptions, BasicProfileViolationCollection violations);
    public static bool CheckConformance(WsiProfiles claims, WebReference webReference, BasicProfileViolationCollection violations);
    internal static bool AnalyzeBinding(Binding binding, ServiceDescription description, ServiceDescriptionCollection descriptions, BasicProfileViolationCollection violations);
    internal static void AnalyzeDescription(ServiceDescriptionCollection descriptions, BasicProfileViolationCollection violations);
    private static void CheckWsdlImports(ServiceDescription description, BasicProfileViolationCollection violations);
    private static void CheckTypes(ServiceDescription description, BasicProfileViolationCollection violations);
    private static void CheckMessagePart(MessagePart part, bool element, string message, string operation, string binding, string ns, Hashtable wireSignatures, BasicProfileViolationCollection violations);
    private static void AddSignature(Hashtable wireSignatures, string name, string ns, string message, string messageNs, BasicProfileViolationCollection violations);
    private static void CheckMessageParts(Message message, String[] parts, bool element, string operation, string binding, string ns, Hashtable wireSignatures, BasicProfileViolationCollection violations);
    private static SoapBodyBinding FindSoapBodyBinding(bool input, ServiceDescriptionFormatExtensionCollection extensions, BasicProfileViolationCollection violations, bool documentBinding, string operationName, string bindingName, string bindingNs);
    private static string MessageString(object item, string operation, string binding, string ns, bool input, string details);
    private static bool CheckExtensions(ServiceDescriptionFormatExtensionCollection extensions);
    private static void CheckExtensions(Binding binding, ServiceDescription description, BasicProfileViolationCollection violations);
    private static void CheckExtensions(ServiceDescriptionCollection descriptions, BasicProfileViolationCollection violations);
    private static Operation FindOperation(OperationCollection operations, OperationBinding bindingOperation);
}
internal class System.Web.Services.Diagnostics.TraceMethod : object {
    private object target;
    private string name;
    private Object[] args;
    private string call;
    internal TraceMethod(object target, string name, Object[] args);
    public virtual string ToString();
    internal static string CallString(object target, string method, Object[] args);
    internal static string MethodId(object target, string method);
    private static void WriteObjectId(StringBuilder sb, object o);
    private static void WriteValue(StringBuilder sb, object o);
    private static string HashString(object objectValue);
}
internal static class System.Web.Services.Diagnostics.Tracing : object {
    private static bool tracingEnabled;
    private static bool tracingInitialized;
    private static bool appDomainShutdown;
    private static string TraceSourceAsmx;
    private static TraceSource asmxTraceSource;
    private static object internalSyncObject;
    private static object InternalSyncObject { get; }
    internal static bool On { get; }
    internal static bool IsVerbose { get; }
    internal static TraceSource Asmx { get; }
    private static Tracing();
    private static object get_InternalSyncObject();
    internal static bool get_On();
    internal static bool get_IsVerbose();
    internal static TraceSource get_Asmx();
    private static void InitializeLogging();
    private static void Close();
    private static void UnhandledExceptionHandler(object sender, UnhandledExceptionEventArgs args);
    private static void ProcessExitEvent(object sender, EventArgs e);
    private static void AppDomainUnloadEvent(object sender, EventArgs e);
    private static bool ValidateSettings(TraceSource traceSource, TraceEventType traceLevel);
    internal static void Information(string format, Object[] args);
    private static void TraceEvent(TraceEventType eventType, string format);
    internal static Exception ExceptionThrow(TraceMethod method, Exception e);
    internal static Exception ExceptionThrow(TraceEventType eventType, TraceMethod method, Exception e);
    internal static Exception ExceptionCatch(TraceMethod method, Exception e);
    internal static Exception ExceptionCatch(TraceEventType eventType, TraceMethod method, Exception e);
    internal static Exception ExceptionCatch(TraceEventType eventType, object target, string method, Exception e);
    internal static Exception ExceptionIgnore(TraceEventType eventType, TraceMethod method, Exception e);
    private static void StackTrace(TraceEventType eventType, Exception e);
    internal static string TraceId(string id);
    private static string GetHostByAddress(string ipAddress);
    internal static List`1<string> Details(HttpRequest request);
    internal static void Enter(string callId, TraceMethod caller);
    internal static void Enter(string callId, TraceMethod caller, List`1<string> details);
    internal static void Enter(string callId, TraceMethod caller, TraceMethod callDetails);
    internal static void Enter(string callId, TraceMethod caller, TraceMethod callDetails, List`1<string> details);
    internal static XmlDeserializationEvents GetDeserializationEvents();
    internal static void Exit(string callId, TraceMethod caller);
    internal static void OnUnknownElement(object sender, XmlElementEventArgs e);
    internal static void OnUnknownAttribute(object sender, XmlAttributeEventArgs e);
}
[XmlRootAttribute("contractRef")]
public class System.Web.Services.Discovery.ContractReference : DiscoveryReference {
    public static string Namespace;
    private string docRef;
    private string reference;
    [XmlAttributeAttribute("ref")]
public string Ref { get; public set; }
    [XmlAttributeAttribute("docRef")]
public string DocRef { get; public set; }
    [XmlIgnoreAttribute]
public string Url { get; public set; }
    [XmlIgnoreAttribute]
public ServiceDescription Contract { get; }
    [XmlIgnoreAttribute]
public string DefaultFilename { get; }
    public ContractReference(string href);
    public ContractReference(string href, string docRef);
    public string get_Ref();
    public void set_Ref(string value);
    public string get_DocRef();
    public void set_DocRef(string value);
    public virtual string get_Url();
    public virtual void set_Url(string value);
    internal virtual void LoadExternals(Hashtable loadedExternals);
    public ServiceDescription get_Contract();
    public virtual string get_DefaultFilename();
    public virtual void WriteDocument(object document, Stream stream);
    public virtual object ReadDocument(Stream stream);
    protected internal virtual void Resolve(string contentType, Stream stream);
}
public class System.Web.Services.Discovery.ContractSearchPattern : DiscoverySearchPattern {
    public string Pattern { get; }
    public virtual string get_Pattern();
    public virtual DiscoveryReference GetDiscoveryReference(string filename);
}
[DefaultMemberAttribute("Item")]
public class System.Web.Services.Discovery.DiscoveryClientDocumentCollection : DictionaryBase {
    public object Item { get; public set; }
    public ICollection Keys { get; }
    public ICollection Values { get; }
    public object get_Item(string url);
    public void set_Item(string url, object value);
    public ICollection get_Keys();
    public ICollection get_Values();
    public void Add(string url, object value);
    public bool Contains(string url);
    public void Remove(string url);
}
public class System.Web.Services.Discovery.DiscoveryClientProtocol : HttpWebClientProtocol {
    private DiscoveryClientReferenceCollection references;
    private DiscoveryClientDocumentCollection documents;
    private Hashtable inlinedSchemas;
    private ArrayList additionalInformation;
    private DiscoveryExceptionDictionary errors;
    public IList AdditionalInformation { get; }
    public DiscoveryClientDocumentCollection Documents { get; }
    public DiscoveryExceptionDictionary Errors { get; }
    public DiscoveryClientReferenceCollection References { get; }
    internal Hashtable InlinedSchemas { get; }
    internal DiscoveryClientProtocol(HttpWebClientProtocol protocol);
    public IList get_AdditionalInformation();
    public DiscoveryClientDocumentCollection get_Documents();
    public DiscoveryExceptionDictionary get_Errors();
    public DiscoveryClientReferenceCollection get_References();
    internal Hashtable get_InlinedSchemas();
    public DiscoveryDocument Discover(string url);
    public DiscoveryDocument DiscoverAny(string url);
    public Stream Download(String& url);
    public Stream Download(String& url, String& contentType);
    [ObsoleteAttribute("This method will be removed from a future version. The method call is no longer required for resource discovery", "False")]
[ComVisibleAttribute("False")]
public void LoadExternals();
    internal void FixupReferences();
    private static bool IsFilenameInUse(Hashtable filenames, string path);
    private static void AddFilename(Hashtable filenames, string path);
    private static string GetUniqueFilename(Hashtable filenames, string path);
    public DiscoveryClientResultCollection ReadAll(string topLevelFilename);
    public void ResolveAll();
    public void ResolveOneLevel();
    private static string GetRelativePath(string fullPath, string relativeTo);
    public DiscoveryClientResultCollection WriteAll(string directory, string topLevelFilename);
}
[DefaultMemberAttribute("Item")]
public class System.Web.Services.Discovery.DiscoveryClientReferenceCollection : DictionaryBase {
    public DiscoveryReference Item { get; public set; }
    public ICollection Keys { get; }
    public ICollection Values { get; }
    public DiscoveryReference get_Item(string url);
    public void set_Item(string url, DiscoveryReference value);
    public ICollection get_Keys();
    public ICollection get_Values();
    public void Add(DiscoveryReference value);
    public void Add(string url, DiscoveryReference value);
    public bool Contains(string url);
    public void Remove(string url);
}
public class System.Web.Services.Discovery.DiscoveryClientResult : object {
    private string referenceTypeName;
    private string url;
    private string filename;
    [XmlAttributeAttribute("referenceType")]
public string ReferenceTypeName { get; public set; }
    [XmlAttributeAttribute("url")]
public string Url { get; public set; }
    [XmlAttributeAttribute("filename")]
public string Filename { get; public set; }
    public DiscoveryClientResult(Type referenceType, string url, string filename);
    public string get_ReferenceTypeName();
    public void set_ReferenceTypeName(string value);
    public string get_Url();
    public void set_Url(string value);
    public string get_Filename();
    public void set_Filename(string value);
}
[DefaultMemberAttribute("Item")]
public class System.Web.Services.Discovery.DiscoveryClientResultCollection : CollectionBase {
    public DiscoveryClientResult Item { get; public set; }
    public DiscoveryClientResult get_Item(int i);
    public void set_Item(int i, DiscoveryClientResult value);
    public int Add(DiscoveryClientResult value);
    public bool Contains(DiscoveryClientResult value);
    public void Remove(DiscoveryClientResult value);
}
[XmlRootAttribute("discovery")]
public class System.Web.Services.Discovery.DiscoveryDocument : object {
    public static string Namespace;
    private ArrayList references;
    [XmlIgnoreAttribute]
public IList References { get; }
    public IList get_References();
    public static DiscoveryDocument Read(Stream stream);
    public static DiscoveryDocument Read(TextReader reader);
    public static DiscoveryDocument Read(XmlReader xmlReader);
    public static bool CanRead(XmlReader xmlReader);
    public void Write(TextWriter writer);
    public void Write(Stream stream);
    public void Write(XmlWriter writer);
}
public class System.Web.Services.Discovery.DiscoveryDocumentLinksPattern : DiscoverySearchPattern {
    public string Pattern { get; }
    public virtual string get_Pattern();
    public virtual DiscoveryReference GetDiscoveryReference(string filename);
}
[XmlRootAttribute("discoveryRef")]
public class System.Web.Services.Discovery.DiscoveryDocumentReference : DiscoveryReference {
    private string reference;
    [XmlAttributeAttribute("ref")]
public string Ref { get; public set; }
    [XmlIgnoreAttribute]
public string DefaultFilename { get; }
    [XmlIgnoreAttribute]
public DiscoveryDocument Document { get; }
    [XmlIgnoreAttribute]
public string Url { get; public set; }
    public DiscoveryDocumentReference(string href);
    public string get_Ref();
    public void set_Ref(string value);
    public virtual string get_DefaultFilename();
    public DiscoveryDocument get_Document();
    public virtual void WriteDocument(object document, Stream stream);
    public virtual object ReadDocument(Stream stream);
    public virtual string get_Url();
    public virtual void set_Url(string value);
    private static DiscoveryDocument GetDocumentNoParse(String& url, DiscoveryClientProtocol client);
    protected internal virtual void Resolve(string contentType, Stream stream);
    public void ResolveAll();
    internal void ResolveAll(bool throwOnError);
}
public class System.Web.Services.Discovery.DiscoveryDocumentSearchPattern : DiscoverySearchPattern {
    public string Pattern { get; }
    public virtual string get_Pattern();
    public virtual DiscoveryReference GetDiscoveryReference(string filename);
}
internal class System.Web.Services.Discovery.DiscoveryDocumentSerializationReader : XmlSerializationReader {
    private string id1_discovery;
    private string id4_discoveryRef;
    private string id19_docRef;
    private string id8_Item;
    private string id14_binding;
    private string id20_DiscoveryDocumentReference;
    private string id17_targetNamespace;
    private string id5_contractRef;
    private string id10_Item;
    private string id13_Item;
    private string id7_schemaRef;
    private string id3_DiscoveryDocument;
    private string id9_soap;
    private string id12_address;
    private string id16_ref;
    private string id11_SoapBinding;
    private string id18_ContractReference;
    private string id2_Item;
    private string id15_SchemaReference;
    private string id6_Item;
    public object Read10_discovery();
    private DiscoveryDocument Read9_DiscoveryDocument(bool isNullable, bool checkType);
    private SoapBinding Read8_SoapBinding(bool isNullable, bool checkType);
    private SchemaReference Read7_SchemaReference(bool isNullable, bool checkType);
    private ContractReference Read5_ContractReference(bool isNullable, bool checkType);
    private DiscoveryDocumentReference Read3_DiscoveryDocumentReference(bool isNullable, bool checkType);
    protected virtual void InitCallbacks();
    protected virtual void InitIDs();
}
internal class System.Web.Services.Discovery.DiscoveryDocumentSerializationWriter : XmlSerializationWriter {
    public void Write10_discovery(object o);
    private void Write9_DiscoveryDocument(string n, string ns, DiscoveryDocument o, bool isNullable, bool needType);
    private void Write8_SoapBinding(string n, string ns, SoapBinding o, bool isNullable, bool needType);
    private void Write3_DiscoveryDocumentReference(string n, string ns, DiscoveryDocumentReference o, bool isNullable, bool needType);
    private void Write5_ContractReference(string n, string ns, ContractReference o, bool isNullable, bool needType);
    private void Write7_SchemaReference(string n, string ns, SchemaReference o, bool isNullable, bool needType);
    protected virtual void InitCallbacks();
}
internal class System.Web.Services.Discovery.DiscoveryDocumentSerializer : XmlSerializer {
    protected virtual XmlSerializationReader CreateReader();
    protected virtual XmlSerializationWriter CreateWriter();
    public virtual bool CanDeserialize(XmlReader xmlReader);
    protected virtual void Serialize(object objectToSerialize, XmlSerializationWriter writer);
    protected virtual object Deserialize(XmlSerializationReader reader);
}
[DefaultMemberAttribute("Item")]
public class System.Web.Services.Discovery.DiscoveryExceptionDictionary : DictionaryBase {
    public Exception Item { get; public set; }
    public ICollection Keys { get; }
    public ICollection Values { get; }
    public Exception get_Item(string url);
    public void set_Item(string url, Exception value);
    public ICollection get_Keys();
    public ICollection get_Values();
    public void Add(string url, Exception value);
    public bool Contains(string url);
    public void Remove(string url);
}
public abstract class System.Web.Services.Discovery.DiscoveryReference : object {
    private DiscoveryClientProtocol clientProtocol;
    [XmlIgnoreAttribute]
public DiscoveryClientProtocol ClientProtocol { get; public set; }
    [XmlIgnoreAttribute]
public string DefaultFilename { get; }
    [XmlIgnoreAttribute]
public string Url { get; public set; }
    public DiscoveryClientProtocol get_ClientProtocol();
    public void set_ClientProtocol(DiscoveryClientProtocol value);
    public virtual string get_DefaultFilename();
    public abstract virtual void WriteDocument(object document, Stream stream);
    public abstract virtual object ReadDocument(Stream stream);
    public abstract virtual string get_Url();
    public abstract virtual void set_Url(string value);
    internal virtual void LoadExternals(Hashtable loadedExternals);
    public static string FilenameFromUrl(string url);
    private static bool FindChar(char ch, Char[] chars);
    internal static string MakeValidFilename(string filename);
    public void Resolve();
    internal Exception AttemptResolve(string contentType, Stream stream);
    protected internal abstract virtual void Resolve(string contentType, Stream stream);
    internal static string UriToString(string baseUrl, string relUrl);
}
[DefaultMemberAttribute("Item")]
public class System.Web.Services.Discovery.DiscoveryReferenceCollection : CollectionBase {
    public DiscoveryReference Item { get; public set; }
    public DiscoveryReference get_Item(int i);
    public void set_Item(int i, DiscoveryReference value);
    public int Add(DiscoveryReference value);
    public bool Contains(DiscoveryReference value);
    public void Remove(DiscoveryReference value);
}
public class System.Web.Services.Discovery.DiscoveryRequestHandler : object {
    public bool IsReusable { get; }
    public sealed virtual bool get_IsReusable();
    public sealed virtual void ProcessRequest(HttpContext context);
    private static string GetDirPartOfPath(string str);
    private static string GetFilePartOfPath(string str);
}
public abstract class System.Web.Services.Discovery.DiscoverySearchPattern : object {
    public string Pattern { get; }
    public abstract virtual string get_Pattern();
    public abstract virtual DiscoveryReference GetDiscoveryReference(string filename);
}
internal abstract class System.Web.Services.Discovery.DynamicDiscoSearcher : object {
    protected string origUrl;
    protected String[] excludedUrls;
    protected string fileToSkipFirst;
    protected ArrayList filesFound;
    protected DiscoverySearchPattern[] primarySearchPatterns;
    protected DiscoverySearchPattern[] secondarySearchPatterns;
    protected DiscoveryDocument discoDoc;
    protected Hashtable excludedUrlsTable;
    protected int subDirLevel;
    internal DiscoveryDocument DiscoveryDocument { get; }
    internal DiscoverySearchPattern[] PrimarySearchPattern { get; }
    internal DiscoverySearchPattern[] SecondarySearchPattern { get; }
    protected bool IsVirtualSearch { get; }
    internal DynamicDiscoSearcher(String[] excludeUrlsList);
    internal virtual void SearchInit(string fileToSkipAtBegin);
    protected bool IsExcluded(string url);
    internal DiscoveryDocument get_DiscoveryDocument();
    internal DiscoverySearchPattern[] get_PrimarySearchPattern();
    internal DiscoverySearchPattern[] get_SecondarySearchPattern();
    protected void ScanDirectory(string directory);
    protected bool ScanDirByPattern(string dir, bool IsPrimary, DiscoverySearchPattern[] patterns);
    internal abstract virtual void Search(string fileToSkipAtBegin);
    protected abstract virtual DirectoryInfo GetPhysicalDir(string dir);
    protected abstract virtual void SearchSubDirectories(string directory);
    protected abstract virtual string MakeResultPath(string dirName, string fileName);
    protected abstract virtual string MakeAbsExcludedPath(string pathRelativ);
    protected abstract virtual bool get_IsVirtualSearch();
}
[XmlRootAttribute("dynamicDiscovery")]
public class System.Web.Services.Discovery.DynamicDiscoveryDocument : object {
    private ExcludePathInfo[] excludePaths;
    public static string Namespace;
    [XmlElementAttribute("exclude", "System.Web.Services.Discovery.ExcludePathInfo")]
public ExcludePathInfo[] ExcludePaths { get; public set; }
    public ExcludePathInfo[] get_ExcludePaths();
    public void set_ExcludePaths(ExcludePathInfo[] value);
    public void Write(Stream stream);
    public static DynamicDiscoveryDocument Load(Stream stream);
}
internal class System.Web.Services.Discovery.DynamicPhysicalDiscoSearcher : DynamicDiscoSearcher {
    private string startDir;
    protected bool IsVirtualSearch { get; }
    internal DynamicPhysicalDiscoSearcher(string searchDir, String[] excludedUrls, string startUrl);
    internal virtual void Search(string fileToSkipAtBegin);
    protected virtual void SearchSubDirectories(string localDir);
    protected virtual DirectoryInfo GetPhysicalDir(string dir);
    protected virtual string MakeResultPath(string dirName, string fileName);
    protected virtual string MakeAbsExcludedPath(string pathRelativ);
    protected virtual bool get_IsVirtualSearch();
}
internal class System.Web.Services.Discovery.DynamicVirtualDiscoSearcher : DynamicDiscoSearcher {
    private string rootPathAsdi;
    private string entryPathPrefix;
    private string startDir;
    private Hashtable webApps;
    private Hashtable Adsi;
    protected bool IsVirtualSearch { get; }
    internal DynamicVirtualDiscoSearcher(string startDir, String[] excludedUrls, string rootUrl);
    internal virtual void Search(string fileToSkipAtBegin);
    protected virtual void SearchSubDirectories(string nameAdsiDir);
    protected virtual DirectoryInfo GetPhysicalDir(string dir);
    private string GetWebServerForUrl(string url);
    protected virtual string MakeResultPath(string dirName, string fileName);
    protected virtual string MakeAbsExcludedPath(string pathRelativ);
    protected virtual bool get_IsVirtualSearch();
    private AppSettings GetAppSettings(DirectoryEntry entry);
    private void CleanupCache();
}
public class System.Web.Services.Discovery.ExcludePathInfo : object {
    private string path;
    [XmlAttributeAttribute("path")]
public string Path { get; public set; }
    public ExcludePathInfo(string path);
    public string get_Path();
    public void set_Path(string value);
}
internal class System.Web.Services.Discovery.InvalidContentTypeException : Exception {
    private string contentType;
    internal string ContentType { get; }
    internal InvalidContentTypeException(string message, string contentType);
    internal string get_ContentType();
}
internal class System.Web.Services.Discovery.InvalidDocumentContentsException : Exception {
    internal InvalidDocumentContentsException(string message, Exception inner);
}
internal class System.Web.Services.Discovery.LinkGrep : object {
    private static Regex tagRegex;
    private static Regex doctypeDirectiveRegex;
    private static Regex endtagRegex;
    private static Regex commentRegex;
    private static Regex whitespaceRegex;
    private static Regex textRegex;
    private static LinkGrep();
    private static string ReadEntireStream(TextReader input);
    internal static string SearchForLink(Stream stream);
}
[XmlRootAttribute("schemaRef")]
public class System.Web.Services.Discovery.SchemaReference : DiscoveryReference {
    public static string Namespace;
    private string reference;
    private string targetNamespace;
    [XmlAttributeAttribute("ref")]
public string Ref { get; public set; }
    [XmlAttributeAttribute("targetNamespace")]
[DefaultValueAttribute("")]
public string TargetNamespace { get; public set; }
    [XmlIgnoreAttribute]
public string Url { get; public set; }
    [XmlIgnoreAttribute]
public string DefaultFilename { get; }
    [XmlIgnoreAttribute]
public XmlSchema Schema { get; }
    public SchemaReference(string url);
    public string get_Ref();
    public void set_Ref(string value);
    public string get_TargetNamespace();
    public void set_TargetNamespace(string value);
    public virtual string get_Url();
    public virtual void set_Url(string value);
    internal XmlSchema GetSchema();
    internal virtual void LoadExternals(Hashtable loadedExternals);
    internal static void LoadExternals(XmlSchema schema, string url, DiscoveryClientProtocol client, Hashtable loadedExternals);
    public virtual void WriteDocument(object document, Stream stream);
    public virtual object ReadDocument(Stream stream);
    public virtual string get_DefaultFilename();
    public XmlSchema get_Schema();
    protected internal virtual void Resolve(string contentType, Stream stream);
}
[XmlRootAttribute("soap")]
public class System.Web.Services.Discovery.SoapBinding : object {
    public static string Namespace;
    private XmlQualifiedName binding;
    private string address;
    [XmlAttributeAttribute("address")]
public string Address { get; public set; }
    [XmlAttributeAttribute("binding")]
public XmlQualifiedName Binding { get; public set; }
    public string get_Address();
    public void set_Address(string value);
    public XmlQualifiedName get_Binding();
    public void set_Binding(XmlQualifiedName value);
}
public class System.Web.Services.Discovery.XmlSchemaSearchPattern : DiscoverySearchPattern {
    public string Pattern { get; }
    public virtual string get_Pattern();
    public virtual DiscoveryReference GetDiscoveryReference(string filename);
}
internal class System.Web.Services.Interop.CallId : ValueType {
    public string szMachine;
    public int dwPid;
    public IntPtr userThread;
    public long addStackPointer;
    public string szEntryPoint;
    public string szDestinationMachine;
    public CallId(string machine, int pid, IntPtr userThread, long stackPtr, string entryPoint, string destMachine);
}
[GuidAttribute("1AF04045-6659-4aaa-9F4B-2741AC56224B")]
[InterfaceTypeAttribute("1")]
[SuppressUnmanagedCodeSecurityAttribute]
internal interface System.Web.Services.Interop.INotifyConnection2 {
    public abstract virtual INotifySink2 RegisterNotifySource(INotifySource2 in_pNotifySource);
    public abstract virtual void UnregisterNotifySource(INotifySource2 in_pNotifySource);
}
[GuidAttribute("C43CC2F3-90AF-4e93-9112-DFB8B36749B5")]
[InterfaceTypeAttribute("1")]
[SuppressUnmanagedCodeSecurityAttribute]
internal interface System.Web.Services.Interop.INotifySink2 {
    public abstract virtual void OnSyncCallOut(CallId callId, IntPtr& out_ppBuffer, Int32& inout_pBufferSize);
    public abstract virtual void OnSyncCallEnter(CallId callId, Byte[] in_pBuffer, int in_BufferSize);
    public abstract virtual void OnSyncCallReturn(CallId callId, Byte[] in_pBuffer, int in_BufferSize);
    public abstract virtual void OnSyncCallExit(CallId callId, IntPtr& out_ppBuffer, Int32& inout_pBufferSize);
}
[GuidAttribute("26E7F0F1-B49C-48cb-B43E-78DCD577E1D9")]
[InterfaceTypeAttribute("1")]
internal interface System.Web.Services.Interop.INotifySource2 {
    public abstract virtual void SetNotifyFilter(NotifyFilter in_NotifyFilter, UserThread in_pUserThreadFilter);
}
internal enum System.Web.Services.Interop.NotifyFilter : Enum {
    public int value__;
    public static NotifyFilter OnSyncCallOut;
    public static NotifyFilter OnSyncCallEnter;
    public static NotifyFilter OnSyncCallExit;
    public static NotifyFilter OnSyncCallReturn;
    public static NotifyFilter AllSync;
    public static NotifyFilter All;
    public static NotifyFilter None;
}
internal class System.Web.Services.Interop.UserThread : object {
    internal int pSidBuffer;
    internal int dwSidLen;
    internal int dwTid;
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal static class System.Web.Services.PartialTrustHelpers : object {
    [SecurityCriticalAttribute]
private static bool isInPartialTrustOutsideAspNet;
    [SecurityCriticalAttribute]
private static bool isInPartialTrustOutsideAspNetInitialized;
    private static PartialTrustHelpers();
    [SecuritySafeCriticalAttribute]
internal static void FailIfInPartialTrustOutsideAspNet();
}
public class System.Web.Services.Protocols.AnyReturnReader : MimeReturnReader {
    public virtual void Initialize(object o);
    public virtual object GetInitializer(LogicalMethodInfo methodInfo);
    public virtual object Read(WebResponse response, Stream responseStream);
}
internal class System.Web.Services.Protocols.AsyncSessionHandler : AsyncSessionlessHandler {
    internal AsyncSessionHandler(ServerProtocol protocol);
}
internal class System.Web.Services.Protocols.AsyncSessionlessHandler : SyncSessionlessHandler {
    internal AsyncSessionlessHandler(ServerProtocol protocol);
    public sealed virtual IAsyncResult BeginProcessRequest(HttpContext context, AsyncCallback callback, object asyncState);
    public sealed virtual void EndProcessRequest(IAsyncResult asyncResult);
}
internal class System.Web.Services.Protocols.BufferedResponseStream : Stream {
    private Stream outputStream;
    private Byte[] buffer;
    private int position;
    private bool flushEnabled;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    unknown bool FlushEnabled {internal set; }
    internal BufferedResponseStream(Stream outputStream, int buffersize);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    protected virtual void Dispose(bool disposing);
    internal void set_FlushEnabled(bool value);
    public virtual void Flush();
    public virtual IAsyncResult BeginRead(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual int EndRead(IAsyncResult asyncResult);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual int ReadByte();
    public virtual void Write(Byte[] array, int offset, int count);
    private void FlushWrite();
    public virtual void WriteByte(byte value);
}
[DefaultMemberAttribute("Item")]
internal class System.Web.Services.Protocols.ClientTypeCache : object {
    private Hashtable cache;
    internal object Item { get; }
    internal object get_Item(Type key);
    internal void Add(Type key, object value);
}
internal class System.Web.Services.Protocols.CompletedAsyncResult : object {
    private object asyncState;
    private bool completedSynchronously;
    public object AsyncState { get; }
    public bool CompletedSynchronously { get; }
    public bool IsCompleted { get; }
    public WaitHandle AsyncWaitHandle { get; }
    internal CompletedAsyncResult(object asyncState, bool completedSynchronously);
    public sealed virtual object get_AsyncState();
    public sealed virtual bool get_CompletedSynchronously();
    public sealed virtual bool get_IsCompleted();
    public sealed virtual WaitHandle get_AsyncWaitHandle();
}
internal class System.Web.Services.Protocols.ContentType : object {
    internal static string TextBase;
    internal static string TextXml;
    internal static string TextPlain;
    internal static string TextHtml;
    internal static string ApplicationBase;
    internal static string ApplicationXml;
    internal static string ApplicationSoap;
    internal static string ApplicationOctetStream;
    internal static string ContentEncoding;
    internal static string GetBase(string contentType);
    internal static string GetMediaType(string contentType);
    internal static string GetCharset(string contentType);
    internal static string GetAction(string contentType);
    private static string GetParameter(string contentType, string paramName);
    internal static bool MatchesBase(string contentType, string baseContentType);
    internal static bool IsApplication(string contentType);
    internal static bool IsSoap(string contentType);
    internal static bool IsXml(string contentType);
    internal static bool IsHtml(string contentType);
    internal static string Compose(string contentType, Encoding encoding);
    internal static string Compose(string contentType, Encoding encoding, string action);
}
internal class System.Web.Services.Protocols.DiscoveryServerProtocol : ServerProtocol {
    private DiscoveryServerType serverType;
    private object syncRoot;
    internal ServerType ServerType { get; }
    internal bool IsOneWay { get; }
    internal LogicalMethodInfo MethodInfo { get; }
    internal virtual bool Initialize();
    internal virtual ServerType get_ServerType();
    internal virtual bool get_IsOneWay();
    internal virtual LogicalMethodInfo get_MethodInfo();
    internal virtual Object[] ReadParameters();
    internal virtual void WriteReturns(Object[] returnValues, Stream outputStream);
    internal virtual bool WriteException(Exception e, Stream outputStream);
    internal void Discover();
    private void RunUriFixups();
}
internal class System.Web.Services.Protocols.DiscoveryServerProtocolFactory : ServerProtocolFactory {
    protected virtual ServerProtocol CreateIfRequestCompatible(HttpRequest request);
}
internal class System.Web.Services.Protocols.DiscoveryServerType : ServerType {
    private ServiceDescription description;
    private LogicalMethodInfo methodInfo;
    private Hashtable schemaTable;
    private Hashtable wsdlTable;
    private DiscoveryDocument discoDoc;
    [CompilerGeneratedAttribute]
private List`1<Action`1<Uri>> <UriFixups>k__BackingField;
    public List`1<Action`1<Uri>> UriFixups { get; private set; }
    internal ServiceDescription Description { get; }
    internal LogicalMethodInfo MethodInfo { get; }
    internal DiscoveryDocument Disco { get; }
    internal DiscoveryServerType(Type type, string uri, bool excludeSchemeHostPortFromCachingKey);
    [CompilerGeneratedAttribute]
public List`1<Action`1<Uri>> get_UriFixups();
    [CompilerGeneratedAttribute]
private void set_UriFixups(List`1<Action`1<Uri>> value);
    private void AddUriFixup(Action`1<Uri> fixup);
    internal void AddExternal(XmlSchema schema, string ns, string location);
    private void AddSchemaImports(XmlSchemas schemas, string uri, ServiceDescriptionCollection descriptions);
    internal XmlSchema GetSchema(string id);
    internal ServiceDescription GetServiceDescription(string id);
    internal ServiceDescription get_Description();
    internal LogicalMethodInfo get_MethodInfo();
    internal DiscoveryDocument get_Disco();
    internal static string CombineUris(Uri schemeHostPort, string absolutePathAndQuery);
}
internal class System.Web.Services.Protocols.DocumentationServerProtocol : ServerProtocol {
    private DocumentationServerType serverType;
    private IHttpHandler handler;
    private object syncRoot;
    private static int MAX_PATH_SIZE;
    internal ServerType ServerType { get; }
    internal bool IsOneWay { get; }
    internal LogicalMethodInfo MethodInfo { get; }
    internal virtual bool Initialize();
    private IHttpHandler GetCompiledPageInstance(string virtualPath, string inputFile, HttpContext context);
    internal virtual ServerType get_ServerType();
    internal virtual bool get_IsOneWay();
    internal virtual LogicalMethodInfo get_MethodInfo();
    internal virtual Object[] ReadParameters();
    internal virtual void WriteReturns(Object[] returnValues, Stream outputStream);
    internal virtual bool WriteException(Exception e, Stream outputStream);
    internal void Documentation();
    private void RunUriFixups();
}
internal class System.Web.Services.Protocols.DocumentationServerProtocolFactory : ServerProtocolFactory {
    protected virtual ServerProtocol CreateIfRequestCompatible(HttpRequest request);
}
internal class System.Web.Services.Protocols.DocumentationServerType : ServerType {
    private ServiceDescriptionCollection serviceDescriptions;
    private ServiceDescriptionCollection serviceDescriptionsWithPost;
    private XmlSchemas schemas;
    private XmlSchemas schemasWithPost;
    private LogicalMethodInfo methodInfo;
    [CompilerGeneratedAttribute]
private List`1<Action`1<Uri>> <UriFixups>k__BackingField;
    public List`1<Action`1<Uri>> UriFixups { get; private set; }
    internal LogicalMethodInfo MethodInfo { get; }
    internal XmlSchemas Schemas { get; }
    internal ServiceDescriptionCollection ServiceDescriptions { get; }
    internal ServiceDescriptionCollection ServiceDescriptionsWithPost { get; }
    internal XmlSchemas SchemasWithPost { get; }
    internal DocumentationServerType(Type type, string uri, bool excludeSchemeHostPortFromCachingKey);
    [CompilerGeneratedAttribute]
public List`1<Action`1<Uri>> get_UriFixups();
    [CompilerGeneratedAttribute]
private void set_UriFixups(List`1<Action`1<Uri>> value);
    private void AddUriFixup(Action`1<Uri> fixup);
    internal LogicalMethodInfo get_MethodInfo();
    internal XmlSchemas get_Schemas();
    internal ServiceDescriptionCollection get_ServiceDescriptions();
    internal ServiceDescriptionCollection get_ServiceDescriptionsWithPost();
    internal XmlSchemas get_SchemasWithPost();
}
public class System.Web.Services.Protocols.HtmlFormParameterReader : ValueCollectionParameterReader {
    internal static string MimeType;
    public virtual Object[] Read(HttpRequest request);
}
public class System.Web.Services.Protocols.HtmlFormParameterWriter : UrlEncodedParameterWriter {
    public bool UsesWriteRequest { get; }
    public virtual bool get_UsesWriteRequest();
    public virtual void InitializeRequest(WebRequest request, Object[] values);
    public virtual void WriteRequest(Stream requestStream, Object[] values);
}
internal class System.Web.Services.Protocols.HttpClientMethod : object {
    internal Type readerType;
    internal object readerInitializer;
    internal Type writerType;
    internal object writerInitializer;
    internal LogicalMethodInfo methodInfo;
}
internal class System.Web.Services.Protocols.HttpClientType : object {
    private Hashtable methods;
    internal HttpClientType(Type type);
    private static void AddFormatter(Hashtable formatterTypes, Type formatterType, HttpClientMethod method);
    internal HttpClientMethod GetMethod(string name);
}
public class System.Web.Services.Protocols.HttpGetClientProtocol : HttpSimpleClientProtocol {
    protected virtual WebRequest GetWebRequest(Uri uri);
}
internal class System.Web.Services.Protocols.HttpGetServerProtocol : HttpServerProtocol {
}
internal class System.Web.Services.Protocols.HttpGetServerProtocolFactory : ServerProtocolFactory {
    protected virtual ServerProtocol CreateIfRequestCompatible(HttpRequest request);
}
[AttributeUsageAttribute("64")]
public class System.Web.Services.Protocols.HttpMethodAttribute : Attribute {
    private Type returnFormatter;
    private Type parameterFormatter;
    public Type ReturnFormatter { get; public set; }
    public Type ParameterFormatter { get; public set; }
    public HttpMethodAttribute(Type returnFormatter, Type parameterFormatter);
    public Type get_ReturnFormatter();
    public void set_ReturnFormatter(Type value);
    public Type get_ParameterFormatter();
    public void set_ParameterFormatter(Type value);
}
public class System.Web.Services.Protocols.HttpPostClientProtocol : HttpSimpleClientProtocol {
    protected virtual WebRequest GetWebRequest(Uri uri);
}
internal class System.Web.Services.Protocols.HttpPostLocalhostServerProtocolFactory : ServerProtocolFactory {
    protected virtual ServerProtocol CreateIfRequestCompatible(HttpRequest request);
}
internal class System.Web.Services.Protocols.HttpPostServerProtocol : HttpServerProtocol {
}
internal class System.Web.Services.Protocols.HttpPostServerProtocolFactory : ServerProtocolFactory {
    protected virtual ServerProtocol CreateIfRequestCompatible(HttpRequest request);
}
internal class System.Web.Services.Protocols.HttpServerMethod : object {
    internal string name;
    internal LogicalMethodInfo methodInfo;
    internal Type[] readerTypes;
    internal Object[] readerInitializers;
    internal Type writerType;
    internal object writerInitializer;
}
internal abstract class System.Web.Services.Protocols.HttpServerProtocol : ServerProtocol {
    private HttpServerMethod serverMethod;
    private HttpServerType serverType;
    private bool hasInputPayload;
    internal bool IsOneWay { get; }
    internal LogicalMethodInfo MethodInfo { get; }
    internal ServerType ServerType { get; }
    protected HttpServerProtocol(bool hasInputPayload);
    internal virtual bool Initialize();
    internal virtual bool get_IsOneWay();
    internal virtual LogicalMethodInfo get_MethodInfo();
    internal virtual ServerType get_ServerType();
    internal virtual Object[] ReadParameters();
    internal virtual void WriteReturns(Object[] returnValues, Stream outputStream);
    internal virtual bool WriteException(Exception e, Stream outputStream);
    internal static bool AreUrlParametersSupported(LogicalMethodInfo methodInfo);
}
internal class System.Web.Services.Protocols.HttpServerType : ServerType {
    private Hashtable methods;
    internal HttpServerType(Type type);
    internal HttpServerMethod GetMethod(string name);
    internal HttpServerMethod GetMethodIgnoreCase(string name);
}
[ComVisibleAttribute("True")]
public abstract class System.Web.Services.Protocols.HttpSimpleClientProtocol : HttpWebClientProtocol {
    private HttpClientType clientType;
    protected object Invoke(string methodName, string requestUrl, Object[] parameters);
    protected IAsyncResult BeginInvoke(string methodName, string requestUrl, Object[] parameters, AsyncCallback callback, object asyncState);
    internal virtual void InitializeAsyncRequest(WebRequest request, object internalAsyncState);
    internal virtual void AsyncBufferedSerialize(WebRequest request, Stream requestStream, object internalAsyncState);
    protected object EndInvoke(IAsyncResult asyncResult);
    private void InvokeAsyncCallback(IAsyncResult result);
    protected void InvokeAsync(string methodName, string requestUrl, Object[] parameters, SendOrPostCallback callback);
    protected void InvokeAsync(string methodName, string requestUrl, Object[] parameters, SendOrPostCallback callback, object userState);
    private MimeParameterWriter GetParameterWriter(HttpClientMethod method);
    private HttpClientMethod GetClientMethod(string methodName);
    private object ReadResponse(HttpClientMethod method, WebResponse response, Stream responseStream);
}
[ComVisibleAttribute("True")]
public abstract class System.Web.Services.Protocols.HttpWebClientProtocol : WebClientProtocol {
    private bool allowAutoRedirect;
    private bool enableDecompression;
    private CookieContainer cookieJar;
    private X509CertificateCollection clientCertificates;
    private IWebProxy proxy;
    private static string UserAgentDefault;
    private string userAgent;
    private bool unsafeAuthenticatedConnectionSharing;
    [DefaultValueAttribute("False")]
[WebServicesDescriptionAttribute("ClientProtocolAllowAutoRedirect")]
public bool AllowAutoRedirect { get; public set; }
    [DefaultValueAttribute("")]
[WebServicesDescriptionAttribute("ClientProtocolCookieContainer")]
public CookieContainer CookieContainer { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[WebServicesDescriptionAttribute("ClientProtocolClientCertificates")]
public X509CertificateCollection ClientCertificates { get; }
    [DefaultValueAttribute("False")]
[WebServicesDescriptionAttribute("ClientProtocolEnableDecompression")]
public bool EnableDecompression { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[WebServicesDescriptionAttribute("ClientProtocolUserAgent")]
public string UserAgent { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public IWebProxy Proxy { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool UnsafeAuthenticatedConnectionSharing { get; public set; }
    internal HttpWebClientProtocol(HttpWebClientProtocol protocol);
    private static HttpWebClientProtocol();
    public bool get_AllowAutoRedirect();
    public void set_AllowAutoRedirect(bool value);
    public CookieContainer get_CookieContainer();
    public void set_CookieContainer(CookieContainer value);
    public X509CertificateCollection get_ClientCertificates();
    public bool get_EnableDecompression();
    public void set_EnableDecompression(bool value);
    public string get_UserAgent();
    public void set_UserAgent(string value);
    public IWebProxy get_Proxy();
    public void set_Proxy(IWebProxy value);
    protected virtual WebRequest GetWebRequest(Uri uri);
    protected virtual WebResponse GetWebResponse(WebRequest request);
    protected virtual WebResponse GetWebResponse(WebRequest request, IAsyncResult result);
    public bool get_UnsafeAuthenticatedConnectionSharing();
    public void set_UnsafeAuthenticatedConnectionSharing(bool value);
    protected void CancelAsync(object userState);
    internal WebClientAsyncResult OperationCompleted(object userState, Object[] parameters, Exception e, bool canceled);
    public static bool GenerateXmlMappings(Type type, ArrayList mappings);
    public static Hashtable GenerateXmlMappings(Type[] types, ArrayList mappings);
}
public class System.Web.Services.Protocols.InvokeCompletedEventArgs : AsyncCompletedEventArgs {
    private Object[] results;
    public Object[] Results { get; }
    internal InvokeCompletedEventArgs(Object[] results, Exception exception, bool cancelled, object userState);
    public Object[] get_Results();
}
public class System.Web.Services.Protocols.InvokeCompletedEventHandler : MulticastDelegate {
    public InvokeCompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, InvokeCompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, InvokeCompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Web.Services.Protocols.LogicalMethodInfo : object {
    private MethodInfo methodInfo;
    private MethodInfo endMethodInfo;
    private ParameterInfo[] inParams;
    private ParameterInfo[] outParams;
    private ParameterInfo[] parameters;
    private Hashtable attributes;
    private Type retType;
    private ParameterInfo callbackParam;
    private ParameterInfo stateParam;
    private ParameterInfo resultParam;
    private string methodName;
    private bool isVoid;
    private static Object[] emptyObjectArray;
    private WebServiceBindingAttribute binding;
    private WebMethodAttribute attribute;
    private MethodInfo declaration;
    private static HashAlgorithm hash;
    internal WebServiceBindingAttribute Binding { get; }
    internal MethodInfo Declaration { get; }
    public Type DeclaringType { get; }
    public string Name { get; }
    public ParameterInfo AsyncResultParameter { get; }
    public ParameterInfo AsyncCallbackParameter { get; }
    public ParameterInfo AsyncStateParameter { get; }
    public Type ReturnType { get; }
    public bool IsVoid { get; }
    public bool IsAsync { get; }
    public ParameterInfo[] InParameters { get; }
    public ParameterInfo[] OutParameters { get; }
    public ParameterInfo[] Parameters { get; }
    internal WebMethodAttribute MethodAttribute { get; }
    public ICustomAttributeProvider CustomAttributeProvider { get; }
    public ICustomAttributeProvider ReturnTypeCustomAttributeProvider { get; }
    public MethodInfo MethodInfo { get; }
    public MethodInfo BeginMethodInfo { get; }
    public MethodInfo EndMethodInfo { get; }
    internal static HashAlgorithm HashAlgorithm { get; }
    public LogicalMethodInfo(MethodInfo methodInfo);
    internal LogicalMethodInfo(MethodInfo methodInfo, WebMethod webMethod);
    private LogicalMethodInfo(MethodInfo beginMethodInfo, MethodInfo endMethodInfo, WebMethod webMethod);
    private static LogicalMethodInfo();
    public virtual string ToString();
    public Object[] Invoke(object target, Object[] values);
    public IAsyncResult BeginInvoke(object target, Object[] values, AsyncCallback callback, object asyncState);
    public Object[] EndInvoke(object target, IAsyncResult asyncResult);
    internal WebServiceBindingAttribute get_Binding();
    internal MethodInfo get_Declaration();
    public Type get_DeclaringType();
    public string get_Name();
    public ParameterInfo get_AsyncResultParameter();
    public ParameterInfo get_AsyncCallbackParameter();
    public ParameterInfo get_AsyncStateParameter();
    public Type get_ReturnType();
    public bool get_IsVoid();
    public bool get_IsAsync();
    public ParameterInfo[] get_InParameters();
    public ParameterInfo[] get_OutParameters();
    public ParameterInfo[] get_Parameters();
    public Object[] GetCustomAttributes(Type type);
    public object GetCustomAttribute(Type type);
    internal WebMethodAttribute get_MethodAttribute();
    public ICustomAttributeProvider get_CustomAttributeProvider();
    public ICustomAttributeProvider get_ReturnTypeCustomAttributeProvider();
    public MethodInfo get_MethodInfo();
    public MethodInfo get_BeginMethodInfo();
    public MethodInfo get_EndMethodInfo();
    private static ParameterInfo[] GetInParameters(MethodInfo methodInfo, ParameterInfo[] paramInfos, int start, int length, bool mustBeIn);
    private static ParameterInfo[] GetOutParameters(MethodInfo methodInfo, ParameterInfo[] paramInfos, int start, int length, bool mustBeOut);
    private static bool IsInParameter(ParameterInfo paramInfo);
    private static bool IsOutParameter(ParameterInfo paramInfo);
    public static bool IsBeginMethod(MethodInfo methodInfo);
    public static bool IsEndMethod(MethodInfo methodInfo);
    public static LogicalMethodInfo[] Create(MethodInfo[] methodInfos);
    public static LogicalMethodInfo[] Create(MethodInfo[] methodInfos, LogicalMethodTypes types);
    internal static LogicalMethodInfo[] Create(MethodInfo[] methodInfos, LogicalMethodTypes types, Hashtable declarations);
    internal static HashAlgorithm get_HashAlgorithm();
    internal string GetKey();
    internal void CheckContractOverride();
    internal static bool CanMerge(Type type);
}
public enum System.Web.Services.Protocols.LogicalMethodTypes : Enum {
    public int value__;
    public static LogicalMethodTypes Sync;
    public static LogicalMethodTypes Async;
}
[AttributeUsageAttribute("32767")]
public class System.Web.Services.Protocols.MatchAttribute : Attribute {
    private string pattern;
    private int group;
    private int capture;
    private bool ignoreCase;
    private int repeats;
    public string Pattern { get; public set; }
    public int Group { get; public set; }
    public int Capture { get; public set; }
    public bool IgnoreCase { get; public set; }
    public int MaxRepeats { get; public set; }
    public MatchAttribute(string pattern);
    public string get_Pattern();
    public void set_Pattern(string value);
    public int get_Group();
    public void set_Group(int value);
    public int get_Capture();
    public void set_Capture(int value);
    public bool get_IgnoreCase();
    public void set_IgnoreCase(bool value);
    public int get_MaxRepeats();
    public void set_MaxRepeats(int value);
}
internal class System.Web.Services.Protocols.MatchMember : object {
    private MemberInfo memberInfo;
    private Regex regex;
    private int group;
    private int capture;
    private int maxRepeats;
    private MatchType matchType;
    internal void Match(object target, string text);
    private object MatchString(string text);
    private object MatchClass(string text);
    private static Exception BadCaptureIndexException(int index, string matchName, int highestIndex);
    private static Exception BadGroupIndexException(int index, string matchName, int highestIndex);
    internal static MatchMember Reflect(MemberInfo memberInfo);
}
internal class System.Web.Services.Protocols.MatchType : object {
    private Type type;
    private MatchMember[] fields;
    internal Type Type { get; }
    internal Type get_Type();
    internal static MatchType Reflect(Type type);
    internal object Match(string text);
}
internal class System.Web.Services.Protocols.MemberHelper : object {
    private static Object[] emptyObjectArray;
    private static MemberHelper();
    internal static void SetValue(MemberInfo memberInfo, object target, object value);
    internal static object GetValue(MemberInfo memberInfo, object target);
    internal static bool IsStatic(MemberInfo memberInfo);
    internal static bool CanRead(MemberInfo memberInfo);
    internal static bool CanWrite(MemberInfo memberInfo);
}
public abstract class System.Web.Services.Protocols.MimeFormatter : object {
    public abstract virtual object GetInitializer(LogicalMethodInfo methodInfo);
    public abstract virtual void Initialize(object initializer);
    public virtual Object[] GetInitializers(LogicalMethodInfo[] methodInfos);
    public static object GetInitializer(Type type, LogicalMethodInfo methodInfo);
    public static Object[] GetInitializers(Type type, LogicalMethodInfo[] methodInfos);
    public static MimeFormatter CreateInstance(Type type, object initializer);
}
public abstract class System.Web.Services.Protocols.MimeParameterReader : MimeFormatter {
    public abstract virtual Object[] Read(HttpRequest request);
}
public abstract class System.Web.Services.Protocols.MimeParameterWriter : MimeFormatter {
    public bool UsesWriteRequest { get; }
    public Encoding RequestEncoding { get; public set; }
    public virtual bool get_UsesWriteRequest();
    public virtual Encoding get_RequestEncoding();
    public virtual void set_RequestEncoding(Encoding value);
    public virtual string GetRequestUrl(string url, Object[] parameters);
    public virtual void InitializeRequest(WebRequest request, Object[] values);
    public virtual void WriteRequest(Stream requestStream, Object[] values);
}
public abstract class System.Web.Services.Protocols.MimeReturnReader : MimeFormatter {
    public abstract virtual object Read(WebResponse response, Stream responseStream);
}
internal abstract class System.Web.Services.Protocols.MimeReturnWriter : MimeFormatter {
    internal abstract virtual void Write(HttpResponse response, Stream outputStream, object returnValue);
}
internal class System.Web.Services.Protocols.NopHandler : object {
    public bool IsReusable { get; }
    public sealed virtual bool get_IsReusable();
    public sealed virtual void ProcessRequest(HttpContext context);
}
public class System.Web.Services.Protocols.NopReturnReader : MimeReturnReader {
    public virtual object GetInitializer(LogicalMethodInfo methodInfo);
    public virtual void Initialize(object initializer);
    public virtual object Read(WebResponse response, Stream responseStream);
}
public class System.Web.Services.Protocols.PatternMatcher : object {
    private MatchType matchType;
    public PatternMatcher(Type type);
    public object Match(string text);
}
internal class System.Web.Services.Protocols.RequestResponseUtils : object {
    internal static Encoding GetEncoding(string contentType);
    internal static Encoding GetEncoding2(string contentType);
    internal static string ReadResponse(WebResponse response);
    internal static string ReadResponse(WebResponse response, Stream stream);
    internal static Stream StreamToMemoryStream(Stream stream);
    internal static string CreateResponseExceptionString(WebResponse response);
    internal static string CreateResponseExceptionString(WebResponse response, Stream stream);
    internal static int GetBufferSize(int contentLength);
}
internal class System.Web.Services.Protocols.RuntimeUtils : object {
    internal static XmlDeserializationEvents GetDeserializationEvents();
    private static void OnUnknownAttribute(object sender, XmlAttributeEventArgs e);
    internal static string ElementString(XmlElement element);
    internal static void OnUnknownElement(object sender, XmlElementEventArgs e);
    internal static bool IsKnownNamespace(string ns);
    internal static string EscapeUri(Uri uri);
}
internal class System.Web.Services.Protocols.ScalarFormatter : object {
    internal static string ToString(object value);
    internal static object FromString(string value, Type type);
    private static object EnumFromString(string value, Type type);
    private static string EnumToString(object value);
    internal static bool IsTypeSupported(Type type);
}
public abstract class System.Web.Services.Protocols.ServerProtocol : object {
    private Type type;
    private HttpRequest request;
    private HttpResponse response;
    private HttpContext context;
    private object target;
    private WebMethodAttribute methodAttr;
    private static object s_InternalSyncObject;
    internal static object InternalSyncObject { get; }
    protected internal HttpContext Context { get; }
    protected internal HttpRequest Request { get; }
    protected internal HttpResponse Response { get; }
    internal Type Type { get; }
    protected internal object Target { get; }
    internal LogicalMethodInfo MethodInfo { get; }
    internal ServerType ServerType { get; }
    internal bool IsOneWay { get; }
    internal Exception OnewayInitException { get; }
    internal WebMethodAttribute MethodAttribute { get; }
    internal static object get_InternalSyncObject();
    internal void SetContext(Type type, HttpContext context, HttpRequest request, HttpResponse response);
    internal virtual void CreateServerInstance();
    internal virtual void DisposeServerInstance();
    protected internal HttpContext get_Context();
    protected internal HttpRequest get_Request();
    protected internal HttpResponse get_Response();
    internal Type get_Type();
    protected internal virtual object get_Target();
    internal virtual bool WriteException(Exception e, Stream outputStream);
    internal abstract virtual bool Initialize();
    internal abstract virtual Object[] ReadParameters();
    internal abstract virtual void WriteReturns(Object[] returns, Stream outputStream);
    internal abstract virtual LogicalMethodInfo get_MethodInfo();
    internal abstract virtual ServerType get_ServerType();
    internal abstract virtual bool get_IsOneWay();
    internal virtual Exception get_OnewayInitException();
    internal WebMethodAttribute get_MethodAttribute();
    internal string GenerateFaultString(Exception e);
    internal static void SetHttpResponseStatusCode(HttpResponse httpResponse, int statusCode);
    internal string GenerateFaultString(Exception e, bool htmlEscapeMessage);
    private static void GenerateFaultString(Exception e, StringBuilder builder);
    internal void WriteOneWayResponse();
    private static string DefaultCreateCustomKeyForAspNetWebServiceMetadataCache(Type protocolType, Type serverType, string originalKey);
    private static CreateCustomKeyForAspNetWebServiceMetadataCache GetCreateCustomKeyForAspNetWebServiceMetadataCacheDelegate(Type serverType);
    private string CreateKey(Type protocolType, Type serverType, bool excludeSchemeHostPort, string keySuffix);
    protected void AddToCache(Type protocolType, Type serverType, object value);
    internal void AddToCache(Type protocolType, Type serverType, object value, bool excludeSchemeHostPort);
    protected object GetFromCache(Type protocolType, Type serverType);
    internal object GetFromCache(Type protocolType, Type serverType, bool excludeSchemeHostPort);
    internal bool IsCacheUnderPressure(Type protocolType, Type serverType);
}
public abstract class System.Web.Services.Protocols.ServerProtocolFactory : object {
    internal ServerProtocol Create(Type type, HttpContext context, HttpRequest request, HttpResponse response, Boolean& abortProcessing);
    protected abstract virtual ServerProtocol CreateIfRequestCompatible(HttpRequest request);
}
public class System.Web.Services.Protocols.ServerType : object {
    private Type type;
    internal Type Type { get; }
    internal Evidence Evidence { get; }
    public ServerType(Type type);
    internal Type get_Type();
    internal Evidence get_Evidence();
}
internal class System.Web.Services.Protocols.Soap11ServerProtocolHelper : SoapServerProtocolHelper {
    internal SoapProtocolVersion Version { get; }
    internal WebServiceProtocols Protocol { get; }
    internal string EnvelopeNs { get; }
    internal string EncodingNs { get; }
    internal string HttpContentType { get; }
    internal Soap11ServerProtocolHelper(SoapServerProtocol protocol);
    internal Soap11ServerProtocolHelper(SoapServerProtocol protocol, string requestNamespace);
    internal virtual SoapProtocolVersion get_Version();
    internal virtual WebServiceProtocols get_Protocol();
    internal virtual string get_EnvelopeNs();
    internal virtual string get_EncodingNs();
    internal virtual string get_HttpContentType();
    internal virtual SoapServerMethod RouteRequest();
    internal virtual void WriteFault(XmlWriter writer, SoapException soapException, HttpStatusCode statusCode);
    private static XmlQualifiedName TranslateFaultCode(XmlQualifiedName code);
}
public class System.Web.Services.Protocols.Soap12FaultCodes : object {
    public static XmlQualifiedName ReceiverFaultCode;
    public static XmlQualifiedName SenderFaultCode;
    public static XmlQualifiedName VersionMismatchFaultCode;
    public static XmlQualifiedName MustUnderstandFaultCode;
    public static XmlQualifiedName DataEncodingUnknownFaultCode;
    public static XmlQualifiedName RpcProcedureNotPresentFaultCode;
    public static XmlQualifiedName RpcBadArgumentsFaultCode;
    public static XmlQualifiedName EncodingMissingIdFaultCode;
    public static XmlQualifiedName EncodingUntypedValueFaultCode;
    internal static XmlQualifiedName UnsupportedMediaTypeFaultCode;
    internal static XmlQualifiedName MethodNotAllowed;
    private static Soap12FaultCodes();
}
internal class System.Web.Services.Protocols.Soap12ServerProtocolHelper : SoapServerProtocolHelper {
    internal SoapProtocolVersion Version { get; }
    internal WebServiceProtocols Protocol { get; }
    internal string EnvelopeNs { get; }
    internal string EncodingNs { get; }
    internal string HttpContentType { get; }
    internal Soap12ServerProtocolHelper(SoapServerProtocol protocol);
    internal Soap12ServerProtocolHelper(SoapServerProtocol protocol, string requestNamespace);
    internal virtual SoapProtocolVersion get_Version();
    internal virtual WebServiceProtocols get_Protocol();
    internal virtual string get_EnvelopeNs();
    internal virtual string get_EncodingNs();
    internal virtual string get_HttpContentType();
    internal virtual SoapServerMethod RouteRequest();
    internal virtual void WriteFault(XmlWriter writer, SoapException soapException, HttpStatusCode statusCode);
    private static void WriteFaultCodeValue(XmlWriter writer, XmlQualifiedName code, SoapFaultSubCode subcode);
    private static XmlQualifiedName TranslateFaultCode(XmlQualifiedName code);
}
public class System.Web.Services.Protocols.SoapClientMessage : SoapMessage {
    private SoapClientMethod method;
    private SoapHttpClientProtocol protocol;
    private string url;
    internal SoapExtension[] initializedExtensions;
    public bool OneWay { get; }
    public SoapHttpClientProtocol Client { get; }
    public LogicalMethodInfo MethodInfo { get; }
    public string Url { get; }
    public string Action { get; }
    [ComVisibleAttribute("False")]
public SoapProtocolVersion SoapVersion { get; }
    internal SoapClientMethod Method { get; }
    internal SoapClientMessage(SoapHttpClientProtocol protocol, SoapClientMethod method, string url);
    public virtual bool get_OneWay();
    public SoapHttpClientProtocol get_Client();
    public virtual LogicalMethodInfo get_MethodInfo();
    public virtual string get_Url();
    public virtual string get_Action();
    public virtual SoapProtocolVersion get_SoapVersion();
    internal SoapClientMethod get_Method();
    protected virtual void EnsureOutStage();
    protected virtual void EnsureInStage();
}
internal class System.Web.Services.Protocols.SoapClientMethod : object {
    internal XmlSerializer returnSerializer;
    internal XmlSerializer parameterSerializer;
    internal XmlSerializer inHeaderSerializer;
    internal XmlSerializer outHeaderSerializer;
    internal string action;
    internal LogicalMethodInfo methodInfo;
    internal SoapHeaderMapping[] inHeaderMappings;
    internal SoapHeaderMapping[] outHeaderMappings;
    internal SoapReflectedExtension[] extensions;
    internal Object[] extensionInitializers;
    internal bool oneWay;
    internal bool rpc;
    internal SoapBindingUse use;
    internal SoapParameterStyle paramStyle;
}
internal class System.Web.Services.Protocols.SoapClientType : object {
    private Hashtable methods;
    private WebServiceBindingAttribute binding;
    internal SoapReflectedExtension[] HighPriExtensions;
    internal SoapReflectedExtension[] LowPriExtensions;
    internal Object[] HighPriExtensionInitializers;
    internal Object[] LowPriExtensionInitializers;
    internal string serviceNamespace;
    internal bool serviceDefaultIsEncoded;
    internal WebServiceBindingAttribute Binding { get; }
    internal SoapClientType(Type type);
    internal static void GenerateXmlMappings(Type type, ArrayList soapMethodList, string serviceNamespace, bool serviceDefaultIsEncoded, ArrayList mappings);
    internal SoapClientMethod GetMethod(string name);
    internal WebServiceBindingAttribute get_Binding();
}
[AttributeUsageAttribute("64")]
public class System.Web.Services.Protocols.SoapDocumentMethodAttribute : Attribute {
    private string action;
    private string requestName;
    private string responseName;
    private string requestNamespace;
    private string responseNamespace;
    private bool oneWay;
    private SoapBindingUse use;
    private SoapParameterStyle style;
    private string binding;
    public string Action { get; public set; }
    public bool OneWay { get; public set; }
    public string RequestNamespace { get; public set; }
    public string ResponseNamespace { get; public set; }
    public string RequestElementName { get; public set; }
    public string ResponseElementName { get; public set; }
    public SoapBindingUse Use { get; public set; }
    public SoapParameterStyle ParameterStyle { get; public set; }
    public string Binding { get; public set; }
    public SoapDocumentMethodAttribute(string action);
    public string get_Action();
    public void set_Action(string value);
    public bool get_OneWay();
    public void set_OneWay(bool value);
    public string get_RequestNamespace();
    public void set_RequestNamespace(string value);
    public string get_ResponseNamespace();
    public void set_ResponseNamespace(string value);
    public string get_RequestElementName();
    public void set_RequestElementName(string value);
    public string get_ResponseElementName();
    public void set_ResponseElementName(string value);
    public SoapBindingUse get_Use();
    public void set_Use(SoapBindingUse value);
    public SoapParameterStyle get_ParameterStyle();
    public void set_ParameterStyle(SoapParameterStyle value);
    public string get_Binding();
    public void set_Binding(string value);
}
[AttributeUsageAttribute("4")]
public class System.Web.Services.Protocols.SoapDocumentServiceAttribute : Attribute {
    private SoapBindingUse use;
    private SoapParameterStyle paramStyle;
    private SoapServiceRoutingStyle routingStyle;
    public SoapBindingUse Use { get; public set; }
    public SoapParameterStyle ParameterStyle { get; public set; }
    public SoapServiceRoutingStyle RoutingStyle { get; public set; }
    public SoapDocumentServiceAttribute(SoapBindingUse use);
    public SoapDocumentServiceAttribute(SoapBindingUse use, SoapParameterStyle paramStyle);
    public SoapBindingUse get_Use();
    public void set_Use(SoapBindingUse value);
    public SoapParameterStyle get_ParameterStyle();
    public void set_ParameterStyle(SoapParameterStyle value);
    public SoapServiceRoutingStyle get_RoutingStyle();
    public void set_RoutingStyle(SoapServiceRoutingStyle value);
}
public class System.Web.Services.Protocols.SoapException : SystemException {
    private XmlQualifiedName code;
    private string actor;
    private string role;
    private XmlNode detail;
    private SoapFaultSubCode subCode;
    private string lang;
    public static XmlQualifiedName ServerFaultCode;
    public static XmlQualifiedName ClientFaultCode;
    public static XmlQualifiedName VersionMismatchFaultCode;
    public static XmlQualifiedName MustUnderstandFaultCode;
    public static XmlQualifiedName DetailElementName;
    public string Actor { get; }
    public XmlQualifiedName Code { get; }
    public XmlNode Detail { get; }
    [ComVisibleAttribute("False")]
public string Lang { get; }
    [ComVisibleAttribute("False")]
public string Node { get; }
    [ComVisibleAttribute("False")]
public string Role { get; }
    [ComVisibleAttribute("False")]
public SoapFaultSubCode SubCode { get; }
    public SoapException(string message, XmlQualifiedName code, string actor);
    public SoapException(string message, XmlQualifiedName code, string actor, Exception innerException);
    public SoapException(string message, XmlQualifiedName code);
    public SoapException(string message, XmlQualifiedName code, Exception innerException);
    public SoapException(string message, XmlQualifiedName code, string actor, XmlNode detail);
    public SoapException(string message, XmlQualifiedName code, string actor, XmlNode detail, Exception innerException);
    public SoapException(string message, XmlQualifiedName code, SoapFaultSubCode subCode);
    public SoapException(string message, XmlQualifiedName code, string actor, string role, XmlNode detail, SoapFaultSubCode subCode, Exception innerException);
    public SoapException(string message, XmlQualifiedName code, string actor, string role, string lang, XmlNode detail, SoapFaultSubCode subCode, Exception innerException);
    protected SoapException(SerializationInfo info, StreamingContext context);
    private static SoapException();
    public static bool IsServerFaultCode(XmlQualifiedName code);
    public static bool IsClientFaultCode(XmlQualifiedName code);
    public static bool IsVersionMismatchFaultCode(XmlQualifiedName code);
    public static bool IsMustUnderstandFaultCode(XmlQualifiedName code);
    public string get_Actor();
    public XmlQualifiedName get_Code();
    public XmlNode get_Detail();
    public string get_Lang();
    public string get_Node();
    public string get_Role();
    public SoapFaultSubCode get_SubCode();
    internal void ClearSubCode();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    private static SoapException CreateSuppressedException(SoapProtocolVersion soapVersion, string message, Exception innerException);
    internal static SoapException Create(SoapProtocolVersion soapVersion, string message, XmlQualifiedName code, string actor, string role, XmlNode detail, SoapFaultSubCode subCode, Exception innerException);
    internal static SoapException Create(SoapProtocolVersion soapVersion, string message, XmlQualifiedName code, Exception innerException);
}
public abstract class System.Web.Services.Protocols.SoapExtension : object {
    public abstract virtual object GetInitializer(LogicalMethodInfo methodInfo, SoapExtensionAttribute attribute);
    public abstract virtual object GetInitializer(Type serviceType);
    public abstract virtual void Initialize(object initializer);
    public abstract virtual void ProcessMessage(SoapMessage message);
    public virtual Stream ChainStream(Stream stream);
}
public abstract class System.Web.Services.Protocols.SoapExtensionAttribute : Attribute {
    public Type ExtensionType { get; }
    public int Priority { get; public set; }
    public abstract virtual Type get_ExtensionType();
    public abstract virtual int get_Priority();
    public abstract virtual void set_Priority(int value);
}
internal class System.Web.Services.Protocols.SoapExtensionStream : Stream {
    internal Stream innerStream;
    private bool hasWritten;
    private bool streamReady;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    internal bool HasWritten { get; }
    public long Length { get; }
    public long Position { get; public set; }
    private bool EnsureStreamReady();
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    internal bool get_HasWritten();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    protected virtual void Dispose(bool disposing);
    public virtual void Flush();
    public virtual IAsyncResult BeginRead(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual int EndRead(IAsyncResult asyncResult);
    public virtual IAsyncResult BeginWrite(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual void EndWrite(IAsyncResult asyncResult);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual int ReadByte();
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual void WriteByte(byte value);
    internal void SetInnerStream(Stream stream);
    internal void SetStreamReady();
}
public class System.Web.Services.Protocols.SoapFaultSubCode : object {
    private XmlQualifiedName code;
    private SoapFaultSubCode subCode;
    public XmlQualifiedName Code { get; }
    public SoapFaultSubCode SubCode { get; }
    public SoapFaultSubCode(XmlQualifiedName code);
    public SoapFaultSubCode(XmlQualifiedName code, SoapFaultSubCode subCode);
    public XmlQualifiedName get_Code();
    public SoapFaultSubCode get_SubCode();
}
[XmlTypeAttribute]
[SoapTypeAttribute]
public abstract class System.Web.Services.Protocols.SoapHeader : object {
    private string actor;
    private bool mustUnderstand;
    private bool didUnderstand;
    private bool relay;
    internal SoapProtocolVersion version;
    [XmlAttributeAttribute("mustUnderstand")]
[SoapAttributeAttribute("mustUnderstand")]
[DefaultValueAttribute("0")]
public string EncodedMustUnderstand { get; public set; }
    [XmlAttributeAttribute("mustUnderstand")]
[SoapAttributeAttribute("mustUnderstand")]
[DefaultValueAttribute("0")]
[ComVisibleAttribute("False")]
public string EncodedMustUnderstand12 { get; public set; }
    [XmlIgnoreAttribute]
[SoapIgnoreAttribute]
public bool MustUnderstand { get; public set; }
    internal bool InternalMustUnderstand { get; internal set; }
    [XmlAttributeAttribute("actor")]
[SoapAttributeAttribute("actor")]
[DefaultValueAttribute("")]
public string Actor { get; public set; }
    [XmlAttributeAttribute("role")]
[SoapAttributeAttribute("role")]
[DefaultValueAttribute("")]
[ComVisibleAttribute("False")]
public string Role { get; public set; }
    internal string InternalActor { get; internal set; }
    [XmlIgnoreAttribute]
[SoapIgnoreAttribute]
public bool DidUnderstand { get; public set; }
    [XmlAttributeAttribute("relay")]
[SoapAttributeAttribute("relay")]
[DefaultValueAttribute("0")]
[ComVisibleAttribute("False")]
public string EncodedRelay { get; public set; }
    [XmlIgnoreAttribute]
[SoapIgnoreAttribute]
[ComVisibleAttribute("False")]
public bool Relay { get; public set; }
    internal bool InternalRelay { get; internal set; }
    public string get_EncodedMustUnderstand();
    public void set_EncodedMustUnderstand(string value);
    public string get_EncodedMustUnderstand12();
    public void set_EncodedMustUnderstand12(string value);
    public bool get_MustUnderstand();
    public void set_MustUnderstand(bool value);
    internal virtual bool get_InternalMustUnderstand();
    internal virtual void set_InternalMustUnderstand(bool value);
    public string get_Actor();
    public void set_Actor(string value);
    public string get_Role();
    public void set_Role(string value);
    internal virtual string get_InternalActor();
    internal virtual void set_InternalActor(string value);
    public bool get_DidUnderstand();
    public void set_DidUnderstand(bool value);
    public string get_EncodedRelay();
    public void set_EncodedRelay(string value);
    public bool get_Relay();
    public void set_Relay(bool value);
    internal virtual bool get_InternalRelay();
    internal virtual void set_InternalRelay(bool value);
}
[AttributeUsageAttribute("64")]
public class System.Web.Services.Protocols.SoapHeaderAttribute : Attribute {
    private string memberName;
    private SoapHeaderDirection direction;
    private bool required;
    public string MemberName { get; public set; }
    public SoapHeaderDirection Direction { get; public set; }
    [ObsoleteAttribute("This property will be removed from a future version. The presence of a particular header in a SOAP message is no longer enforced", "False")]
public bool Required { get; public set; }
    public SoapHeaderAttribute(string memberName);
    public string get_MemberName();
    public void set_MemberName(string value);
    public SoapHeaderDirection get_Direction();
    public void set_Direction(SoapHeaderDirection value);
    public bool get_Required();
    public void set_Required(bool value);
}
internal class System.Web.Services.Protocols.SoapHeaderAttributeComparer : object {
    public sealed virtual int Compare(object x, object y);
}
[DefaultMemberAttribute("Item")]
public class System.Web.Services.Protocols.SoapHeaderCollection : CollectionBase {
    public SoapHeader Item { get; public set; }
    public SoapHeader get_Item(int index);
    public void set_Item(int index, SoapHeader value);
    public int Add(SoapHeader header);
    public void Insert(int index, SoapHeader header);
    public int IndexOf(SoapHeader header);
    public bool Contains(SoapHeader header);
    public void Remove(SoapHeader header);
    public void CopyTo(SoapHeader[] array, int index);
}
[FlagsAttribute]
public enum System.Web.Services.Protocols.SoapHeaderDirection : Enum {
    public int value__;
    public static SoapHeaderDirection In;
    public static SoapHeaderDirection Out;
    public static SoapHeaderDirection InOut;
    public static SoapHeaderDirection Fault;
}
public class System.Web.Services.Protocols.SoapHeaderException : SoapException {
    public SoapHeaderException(string message, XmlQualifiedName code, string actor);
    public SoapHeaderException(string message, XmlQualifiedName code, string actor, Exception innerException);
    public SoapHeaderException(string message, XmlQualifiedName code);
    public SoapHeaderException(string message, XmlQualifiedName code, Exception innerException);
    public SoapHeaderException(string message, XmlQualifiedName code, string actor, string role, SoapFaultSubCode subCode, Exception innerException);
    public SoapHeaderException(string message, XmlQualifiedName code, string actor, string role, string lang, SoapFaultSubCode subCode, Exception innerException);
    protected SoapHeaderException(SerializationInfo info, StreamingContext context);
}
public class System.Web.Services.Protocols.SoapHeaderHandling : object {
    private SoapHeaderCollection unknownHeaders;
    private SoapHeaderCollection unreferencedHeaders;
    private int currentThread;
    private string envelopeNS;
    private void OnUnknownElement(object sender, XmlElementEventArgs e);
    private void OnUnreferencedObject(object sender, UnreferencedObjectEventArgs e);
    public string ReadHeaders(XmlReader reader, XmlSerializer serializer, SoapHeaderCollection headers, SoapHeaderMapping[] mappings, SoapHeaderDirection direction, string envelopeNS, string encodingStyle, bool checkRequiredHeaders);
    public static void WriteHeaders(XmlWriter writer, XmlSerializer serializer, SoapHeaderCollection headers, SoapHeaderMapping[] mappings, SoapHeaderDirection direction, bool isEncoded, string defaultNS, bool serviceDefaultIsEncoded, string envelopeNS);
    public static void WriteUnknownHeaders(XmlWriter writer, SoapHeaderCollection headers, string envelopeNS);
    public static void SetHeaderMembers(SoapHeaderCollection headers, object target, SoapHeaderMapping[] mappings, SoapHeaderDirection direction, bool client);
    public static void GetHeaderMembers(SoapHeaderCollection headers, object target, SoapHeaderMapping[] mappings, SoapHeaderDirection direction, bool client);
    public static void EnsureHeadersUnderstood(SoapHeaderCollection headers);
    private static int FindMapping(SoapHeaderMapping[] mappings, SoapHeader header, SoapHeaderDirection direction);
    private static string GetHeaderElementName(Type headerType);
    private static string GetHeaderElementName(SoapHeader header);
}
public class System.Web.Services.Protocols.SoapHeaderMapping : object {
    internal Type headerType;
    internal bool repeats;
    internal bool custom;
    internal SoapHeaderDirection direction;
    internal MemberInfo memberInfo;
    public Type HeaderType { get; }
    public bool Repeats { get; }
    public bool Custom { get; }
    public SoapHeaderDirection Direction { get; }
    public MemberInfo MemberInfo { get; }
    public Type get_HeaderType();
    public bool get_Repeats();
    public bool get_Custom();
    public SoapHeaderDirection get_Direction();
    public MemberInfo get_MemberInfo();
}
[ComVisibleAttribute("True")]
public class System.Web.Services.Protocols.SoapHttpClientProtocol : HttpWebClientProtocol {
    private SoapClientType clientType;
    private SoapProtocolVersion version;
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebServicesDescriptionAttribute("ClientProtocolSoapVersion")]
[ComVisibleAttribute("False")]
public SoapProtocolVersion SoapVersion { get; public set; }
    private string EnvelopeNs { get; }
    private string EncodingNs { get; }
    private string HttpContentType { get; }
    public void Discover();
    protected virtual WebRequest GetWebRequest(Uri uri);
    public SoapProtocolVersion get_SoapVersion();
    public void set_SoapVersion(SoapProtocolVersion value);
    protected virtual XmlWriter GetWriterForMessage(SoapClientMessage message, int bufferSize);
    protected virtual XmlReader GetReaderForMessage(SoapClientMessage message, int bufferSize);
    protected Object[] Invoke(string methodName, Object[] parameters);
    protected IAsyncResult BeginInvoke(string methodName, Object[] parameters, AsyncCallback callback, object asyncState);
    internal virtual void InitializeAsyncRequest(WebRequest request, object internalAsyncState);
    internal virtual void AsyncBufferedSerialize(WebRequest request, Stream requestStream, object internalAsyncState);
    protected Object[] EndInvoke(IAsyncResult asyncResult);
    private void InvokeAsyncCallback(IAsyncResult result);
    protected void InvokeAsync(string methodName, Object[] parameters, SendOrPostCallback callback);
    protected void InvokeAsync(string methodName, Object[] parameters, SendOrPostCallback callback, object userState);
    private static Array CombineExtensionsHelper(Array array1, Array array2, Array array3, Type elementType);
    private string get_EnvelopeNs();
    private string get_EncodingNs();
    private string get_HttpContentType();
    private SoapClientMessage BeforeSerialize(WebRequest request, string methodName, Object[] parameters);
    private void Serialize(SoapClientMessage message);
    private Object[] ReadResponse(SoapClientMessage message, WebResponse response, Stream responseStream, bool asyncCall);
    private SoapException ReadSoapException(XmlReader reader);
    private XmlQualifiedName ReadSoap12FaultCode(XmlReader reader, SoapFaultSubCode& subcode);
    private SoapFaultSubCode ReadSoap12FaultCodesRecursive(XmlReader reader, int depth);
    private XmlQualifiedName ReadFaultCode(XmlReader reader);
}
public abstract class System.Web.Services.Protocols.SoapMessage : object {
    private SoapMessageStage stage;
    private SoapHeaderCollection headers;
    private Stream stream;
    private SoapExtensionStream extensionStream;
    private string contentType;
    private string contentEncoding;
    private Object[] parameterValues;
    private SoapException exception;
    public bool OneWay { get; }
    public SoapException Exception { get; public set; }
    public LogicalMethodInfo MethodInfo { get; }
    public SoapHeaderCollection Headers { get; }
    public Stream Stream { get; }
    public string ContentType { get; public set; }
    public string ContentEncoding { get; public set; }
    public SoapMessageStage Stage { get; }
    public string Url { get; }
    public string Action { get; }
    [ComVisibleAttribute("False")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public SoapProtocolVersion SoapVersion { get; }
    internal void SetParameterValues(Object[] parameterValues);
    internal Object[] GetParameterValues();
    public abstract virtual bool get_OneWay();
    public object GetInParameterValue(int index);
    public object GetOutParameterValue(int index);
    public object GetReturnValue();
    protected abstract virtual void EnsureOutStage();
    protected abstract virtual void EnsureInStage();
    private void EnsureNoException();
    public SoapException get_Exception();
    public void set_Exception(SoapException value);
    public abstract virtual LogicalMethodInfo get_MethodInfo();
    protected void EnsureStage(SoapMessageStage stage);
    public SoapHeaderCollection get_Headers();
    internal void SetStream(Stream stream);
    internal void SetExtensionStream(SoapExtensionStream extensionStream);
    public Stream get_Stream();
    public string get_ContentType();
    public void set_ContentType(string value);
    public string get_ContentEncoding();
    public void set_ContentEncoding(string value);
    public SoapMessageStage get_Stage();
    internal void SetStage(SoapMessageStage stage);
    public abstract virtual string get_Url();
    public abstract virtual string get_Action();
    public virtual SoapProtocolVersion get_SoapVersion();
    internal static SoapExtension[] InitializeExtensions(SoapReflectedExtension[] reflectedExtensions, Object[] extensionInitializers);
    internal void InitExtensionStreamChain(SoapExtension[] extensions);
    internal void RunExtensions(SoapExtension[] extensions, bool throwOnException);
}
public enum System.Web.Services.Protocols.SoapMessageStage : Enum {
    public int value__;
    public static SoapMessageStage BeforeSerialize;
    public static SoapMessageStage AfterSerialize;
    public static SoapMessageStage BeforeDeserialize;
    public static SoapMessageStage AfterDeserialize;
}
public enum System.Web.Services.Protocols.SoapParameterStyle : Enum {
    public int value__;
    public static SoapParameterStyle Default;
    public static SoapParameterStyle Bare;
    public static SoapParameterStyle Wrapped;
}
public enum System.Web.Services.Protocols.SoapProtocolVersion : Enum {
    public int value__;
    public static SoapProtocolVersion Default;
    public static SoapProtocolVersion Soap11;
    public static SoapProtocolVersion Soap12;
}
internal class System.Web.Services.Protocols.SoapReflectedExtension : object {
    private Type type;
    private SoapExtensionAttribute attribute;
    private int priority;
    internal SoapReflectedExtension(Type type, SoapExtensionAttribute attribute);
    internal SoapReflectedExtension(Type type, SoapExtensionAttribute attribute, int priority);
    internal SoapExtension CreateInstance(object initializer);
    internal object GetInitializer(LogicalMethodInfo methodInfo);
    internal object GetInitializer(Type serviceType);
    internal static Object[] GetInitializers(LogicalMethodInfo methodInfo, SoapReflectedExtension[] extensions);
    internal static Object[] GetInitializers(Type serviceType, SoapReflectedExtension[] extensions);
    public sealed virtual int CompareTo(object o);
}
internal class System.Web.Services.Protocols.SoapReflectedHeader : object {
    internal Type headerType;
    internal MemberInfo memberInfo;
    internal SoapHeaderDirection direction;
    internal bool repeats;
    internal bool custom;
}
internal class System.Web.Services.Protocols.SoapReflectedMethod : object {
    internal LogicalMethodInfo methodInfo;
    internal string action;
    internal string name;
    internal XmlMembersMapping requestMappings;
    internal XmlMembersMapping responseMappings;
    internal XmlMembersMapping inHeaderMappings;
    internal XmlMembersMapping outHeaderMappings;
    internal SoapReflectedHeader[] headers;
    internal SoapReflectedExtension[] extensions;
    internal bool oneWay;
    internal bool rpc;
    internal SoapBindingUse use;
    internal SoapParameterStyle paramStyle;
    internal WebServiceBindingAttribute binding;
    internal XmlQualifiedName requestElementName;
    internal XmlQualifiedName portType;
    internal bool IsClaimsConformance { get; }
    internal bool get_IsClaimsConformance();
}
internal static class System.Web.Services.Protocols.SoapReflector : object {
    internal static bool ServiceDefaultIsEncoded(Type type);
    internal static bool ServiceDefaultIsEncoded(object soapServiceAttribute);
    internal static string GetEncodedNamespace(string ns, bool serviceDefaultIsEncoded);
    internal static string GetLiteralNamespace(string ns, bool serviceDefaultIsEncoded);
    internal static SoapReflectionImporter CreateSoapImporter(string defaultNs, bool serviceDefaultIsEncoded);
    internal static XmlReflectionImporter CreateXmlImporter(string defaultNs, bool serviceDefaultIsEncoded);
    internal static void IncludeTypes(LogicalMethodInfo[] methods, SoapReflectionImporter importer);
    internal static void IncludeTypes(LogicalMethodInfo method, SoapReflectionImporter importer);
    internal static object GetSoapMethodAttribute(LogicalMethodInfo methodInfo);
    internal static object GetSoapServiceAttribute(Type type);
    internal static SoapServiceRoutingStyle GetSoapServiceRoutingStyle(object soapServiceAttribute);
    internal static string GetSoapMethodBinding(LogicalMethodInfo method);
    internal static SoapReflectedMethod ReflectMethod(LogicalMethodInfo methodInfo, bool client, XmlReflectionImporter xmlImporter, SoapReflectionImporter soapImporter, string defaultNs);
    private static XmlMembersMapping ImportMembersMapping(XmlReflectionImporter xmlImporter, SoapReflectionImporter soapImporter, bool serviceDefaultIsEncoded, bool rpc, SoapBindingUse use, SoapParameterStyle paramStyle, string elementName, string elementNamespace, bool nsIsDefault, XmlReflectionMember[] members, bool validate, bool openModel, string key, bool writeAccess);
    private static Exception HeaderException(string memberName, Type declaringType, string description);
    private static SoapParameterInfo[] ReflectParameters(ParameterInfo[] paramInfos, string ns);
    private static string GetDefaultAction(string defaultNs, LogicalMethodInfo methodInfo);
}
[AttributeUsageAttribute("64")]
public class System.Web.Services.Protocols.SoapRpcMethodAttribute : Attribute {
    private string action;
    private string requestName;
    private string responseName;
    private string requestNamespace;
    private string responseNamespace;
    private bool oneWay;
    private string binding;
    private SoapBindingUse use;
    public string Action { get; public set; }
    public string Binding { get; public set; }
    public bool OneWay { get; public set; }
    public string RequestNamespace { get; public set; }
    public string ResponseNamespace { get; public set; }
    public string RequestElementName { get; public set; }
    public string ResponseElementName { get; public set; }
    [ComVisibleAttribute("False")]
public SoapBindingUse Use { get; public set; }
    public SoapRpcMethodAttribute(string action);
    public string get_Action();
    public void set_Action(string value);
    public string get_Binding();
    public void set_Binding(string value);
    public bool get_OneWay();
    public void set_OneWay(bool value);
    public string get_RequestNamespace();
    public void set_RequestNamespace(string value);
    public string get_ResponseNamespace();
    public void set_ResponseNamespace(string value);
    public string get_RequestElementName();
    public void set_RequestElementName(string value);
    public string get_ResponseElementName();
    public void set_ResponseElementName(string value);
    public SoapBindingUse get_Use();
    public void set_Use(SoapBindingUse value);
}
[AttributeUsageAttribute("4")]
public class System.Web.Services.Protocols.SoapRpcServiceAttribute : Attribute {
    private SoapServiceRoutingStyle routingStyle;
    private SoapBindingUse use;
    public SoapServiceRoutingStyle RoutingStyle { get; public set; }
    [ComVisibleAttribute("False")]
public SoapBindingUse Use { get; public set; }
    public SoapServiceRoutingStyle get_RoutingStyle();
    public void set_RoutingStyle(SoapServiceRoutingStyle value);
    public SoapBindingUse get_Use();
    public void set_Use(SoapBindingUse value);
}
public class System.Web.Services.Protocols.SoapServerMessage : SoapMessage {
    private SoapServerProtocol protocol;
    internal SoapExtension[] highPriConfigExtensions;
    internal SoapExtension[] otherExtensions;
    internal SoapExtension[] allExtensions;
    public bool OneWay { get; }
    public string Url { get; }
    public string Action { get; }
    [ComVisibleAttribute("False")]
public SoapProtocolVersion SoapVersion { get; }
    public object Server { get; }
    public LogicalMethodInfo MethodInfo { get; }
    internal SoapServerMessage(SoapServerProtocol protocol);
    public virtual bool get_OneWay();
    public virtual string get_Url();
    public virtual string get_Action();
    public virtual SoapProtocolVersion get_SoapVersion();
    public object get_Server();
    public virtual LogicalMethodInfo get_MethodInfo();
    protected virtual void EnsureOutStage();
    protected virtual void EnsureInStage();
}
public class System.Web.Services.Protocols.SoapServerMethod : object {
    internal LogicalMethodInfo methodInfo;
    internal XmlSerializer returnSerializer;
    internal XmlSerializer parameterSerializer;
    internal XmlSerializer inHeaderSerializer;
    internal XmlSerializer outHeaderSerializer;
    internal SoapHeaderMapping[] inHeaderMappings;
    internal SoapHeaderMapping[] outHeaderMappings;
    internal SoapReflectedExtension[] extensions;
    internal Object[] extensionInitializers;
    internal string action;
    internal bool oneWay;
    internal bool rpc;
    internal SoapBindingUse use;
    internal SoapParameterStyle paramStyle;
    internal WsiProfiles wsiClaims;
    public LogicalMethodInfo MethodInfo { get; }
    public XmlSerializer ReturnSerializer { get; }
    public XmlSerializer ParameterSerializer { get; }
    public XmlSerializer InHeaderSerializer { get; }
    public XmlSerializer OutHeaderSerializer { get; }
    public SoapHeaderMapping[] InHeaderMappings { get; }
    public SoapHeaderMapping[] OutHeaderMappings { get; }
    public string Action { get; }
    public bool OneWay { get; }
    public bool Rpc { get; }
    public SoapBindingUse BindingUse { get; }
    public SoapParameterStyle ParameterStyle { get; }
    public WsiProfiles WsiClaims { get; }
    public SoapServerMethod(Type serverType, LogicalMethodInfo methodInfo);
    public LogicalMethodInfo get_MethodInfo();
    public XmlSerializer get_ReturnSerializer();
    public XmlSerializer get_ParameterSerializer();
    public XmlSerializer get_InHeaderSerializer();
    public XmlSerializer get_OutHeaderSerializer();
    public SoapHeaderMapping[] get_InHeaderMappings();
    public SoapHeaderMapping[] get_OutHeaderMappings();
    public string get_Action();
    public bool get_OneWay();
    public bool get_Rpc();
    public SoapBindingUse get_BindingUse();
    public SoapParameterStyle get_ParameterStyle();
    public WsiProfiles get_WsiClaims();
    private Evidence GetServerTypeEvidence(Type type);
    private List`1<XmlMapping> GetXmlMappingsForMethod(SoapReflectedMethod soapMethod);
    private void ImportReflectedMethod(SoapReflectedMethod soapMethod);
    private void ImportHeaderSerializers(SoapReflectedMethod soapMethod);
    private void ImportSerializers(SoapReflectedMethod soapMethod, Evidence serverEvidence);
}
public class System.Web.Services.Protocols.SoapServerProtocol : ServerProtocol {
    private SoapServerType serverType;
    private SoapServerMethod serverMethod;
    private SoapServerMessage message;
    private bool isOneWay;
    private Exception onewayInitException;
    private SoapProtocolVersion version;
    private WebServiceProtocols protocolsSupported;
    private SoapServerProtocolHelper helper;
    internal ServerType ServerType { get; }
    internal LogicalMethodInfo MethodInfo { get; }
    internal SoapServerMethod ServerMethod { get; }
    internal SoapServerMessage Message { get; }
    internal bool IsOneWay { get; }
    internal Exception OnewayInitException { get; }
    internal SoapProtocolVersion Version { get; }
    protected virtual XmlWriter GetWriterForMessage(SoapServerMessage message, int bufferSize);
    protected virtual XmlReader GetReaderForMessage(SoapServerMessage message, int bufferSize);
    internal virtual bool Initialize();
    protected virtual SoapExtension[] ModifyInitializedExtensions(PriorityGroup group, SoapExtension[] extensions);
    protected virtual SoapServerMethod RouteRequest(SoapServerMessage message);
    private void GuessVersion();
    internal bool IsSupported(WebServiceProtocols protocol);
    internal virtual ServerType get_ServerType();
    internal virtual LogicalMethodInfo get_MethodInfo();
    internal SoapServerMethod get_ServerMethod();
    internal SoapServerMessage get_Message();
    internal virtual bool get_IsOneWay();
    internal virtual Exception get_OnewayInitException();
    internal SoapProtocolVersion get_Version();
    internal virtual void CreateServerInstance();
    private void SetHelper(SoapServerProtocolHelper helper);
    private static Array CombineExtensionsHelper(Array array1, Array array2, Type elementType);
    private void CheckHelperVersion();
    internal virtual Object[] ReadParameters();
    internal virtual void WriteReturns(Object[] returnValues, Stream outputStream);
    internal virtual bool WriteException(Exception e, Stream outputStream);
    private bool WriteException_TryWriteFault(SoapServerMessage message, Stream outputStream, HttpStatusCode statusCode, bool disableExtensions);
    internal SoapUnknownHeader CreateUpgradeHeader();
    private static XmlElement CreateUpgradeEnvelope(XmlDocument doc, string prefix, string envelopeNs);
    internal XmlReader GetXmlReader();
}
public class System.Web.Services.Protocols.SoapServerProtocolFactory : ServerProtocolFactory {
    protected virtual ServerProtocol CreateIfRequestCompatible(HttpRequest request);
}
internal abstract class System.Web.Services.Protocols.SoapServerProtocolHelper : object {
    private SoapServerProtocol protocol;
    private string requestNamespace;
    internal SoapProtocolVersion Version { get; }
    internal WebServiceProtocols Protocol { get; }
    internal string EnvelopeNs { get; }
    internal string EncodingNs { get; }
    internal string HttpContentType { get; }
    internal string RequestNamespace { get; }
    protected SoapServerProtocol ServerProtocol { get; }
    protected SoapServerType ServerType { get; }
    protected SoapServerProtocolHelper(SoapServerProtocol protocol);
    protected SoapServerProtocolHelper(SoapServerProtocol protocol, string requestNamespace);
    internal static SoapServerProtocolHelper GetHelper(SoapServerProtocol protocol, string envelopeNs);
    internal HttpStatusCode SetResponseErrorCode(HttpResponse response, SoapException soapException);
    internal abstract virtual void WriteFault(XmlWriter writer, SoapException soapException, HttpStatusCode statusCode);
    internal abstract virtual SoapServerMethod RouteRequest();
    internal abstract virtual SoapProtocolVersion get_Version();
    internal abstract virtual WebServiceProtocols get_Protocol();
    internal abstract virtual string get_EnvelopeNs();
    internal abstract virtual string get_EncodingNs();
    internal abstract virtual string get_HttpContentType();
    internal string get_RequestNamespace();
    protected SoapServerProtocol get_ServerProtocol();
    protected SoapServerType get_ServerType();
    protected XmlQualifiedName GetRequestElement();
}
public class System.Web.Services.Protocols.SoapServerType : ServerType {
    private Hashtable methods;
    private Hashtable duplicateMethods;
    internal SoapReflectedExtension[] HighPriExtensions;
    internal SoapReflectedExtension[] LowPriExtensions;
    internal Object[] HighPriExtensionInitializers;
    internal Object[] LowPriExtensionInitializers;
    internal string serviceNamespace;
    internal bool serviceDefaultIsEncoded;
    internal bool routingOnSoapAction;
    internal WebServiceProtocols protocolsSupported;
    public string ServiceNamespace { get; }
    public bool ServiceDefaultIsEncoded { get; }
    public bool ServiceRoutingOnSoapAction { get; }
    public SoapServerType(Type type, WebServiceProtocols protocolsSupported);
    public string get_ServiceNamespace();
    public bool get_ServiceDefaultIsEncoded();
    public bool get_ServiceRoutingOnSoapAction();
    public SoapServerMethod GetMethod(object key);
    public SoapServerMethod GetDuplicateMethod(object key);
}
public enum System.Web.Services.Protocols.SoapServiceRoutingStyle : Enum {
    public int value__;
    public static SoapServiceRoutingStyle SoapAction;
    public static SoapServiceRoutingStyle RequestElement;
}
public class System.Web.Services.Protocols.SoapUnknownHeader : SoapHeader {
    private XmlElement element;
    [XmlIgnoreAttribute]
public XmlElement Element { get; public set; }
    internal bool InternalMustUnderstand { get; internal set; }
    internal string InternalActor { get; internal set; }
    internal bool InternalRelay { get; internal set; }
    public XmlElement get_Element();
    public void set_Element(XmlElement value);
    internal virtual bool get_InternalMustUnderstand();
    internal virtual void set_InternalMustUnderstand(bool value);
    internal virtual string get_InternalActor();
    internal virtual void set_InternalActor(string value);
    internal virtual bool get_InternalRelay();
    internal virtual void set_InternalRelay(bool value);
    private string GetElementAttribute(string name, string ns, XmlElement element);
}
internal class System.Web.Services.Protocols.SyncSessionHandler : SyncSessionlessHandler {
    internal SyncSessionHandler(ServerProtocol protocol);
}
internal class System.Web.Services.Protocols.SyncSessionlessHandler : WebServiceHandler {
    public bool IsReusable { get; }
    internal SyncSessionlessHandler(ServerProtocol protocol);
    public sealed virtual bool get_IsReusable();
    public sealed virtual void ProcessRequest(HttpContext context);
}
public class System.Web.Services.Protocols.TextReturnReader : MimeReturnReader {
    private PatternMatcher matcher;
    public virtual void Initialize(object o);
    public virtual object GetInitializer(LogicalMethodInfo methodInfo);
    public virtual object Read(WebResponse response, Stream responseStream);
}
internal class System.Web.Services.Protocols.UnsupportedRequestProtocol : ServerProtocol {
    private int httpCode;
    internal int HttpCode { get; }
    internal bool IsOneWay { get; }
    internal LogicalMethodInfo MethodInfo { get; }
    internal ServerType ServerType { get; }
    internal UnsupportedRequestProtocol(int httpCode);
    internal int get_HttpCode();
    internal virtual bool Initialize();
    internal virtual bool get_IsOneWay();
    internal virtual LogicalMethodInfo get_MethodInfo();
    internal virtual ServerType get_ServerType();
    internal virtual Object[] ReadParameters();
    internal virtual void WriteReturns(Object[] returnValues, Stream outputStream);
    internal virtual bool WriteException(Exception e, Stream outputStream);
}
public abstract class System.Web.Services.Protocols.UrlEncodedParameterWriter : MimeParameterWriter {
    private ParameterInfo[] paramInfos;
    private int numberEncoded;
    private Encoding encoding;
    public Encoding RequestEncoding { get; public set; }
    public virtual Encoding get_RequestEncoding();
    public virtual void set_RequestEncoding(Encoding value);
    public virtual object GetInitializer(LogicalMethodInfo methodInfo);
    public virtual void Initialize(object initializer);
    protected void Encode(TextWriter writer, Object[] values);
    protected void Encode(TextWriter writer, string name, object value);
    private string UrlEncode(string value);
}
internal class System.Web.Services.Protocols.UrlEncoder : object {
    private static int Max16BitUtf8SequenceLength;
    internal static Char[] HexUpperChars;
    private static UrlEncoder();
    internal static string EscapeString(string s, Encoding e);
    internal static string UrlEscapeString(string s, Encoding e);
    private static string EscapeStringInternal(string s, Encoding e, bool escapeUriStuff);
    internal static string UrlEscapeStringUnicode(string s);
    private static void HexEscape8(StringBuilder sb, char c);
    private static void HexEscape16(StringBuilder sb, char c);
    private static bool IsSafe(char ch);
}
public class System.Web.Services.Protocols.UrlParameterReader : ValueCollectionParameterReader {
    public virtual Object[] Read(HttpRequest request);
}
public class System.Web.Services.Protocols.UrlParameterWriter : UrlEncodedParameterWriter {
    public virtual string GetRequestUrl(string url, Object[] parameters);
}
internal class System.Web.Services.Protocols.UserToken : object {
    private SendOrPostCallback callback;
    private object userState;
    internal SendOrPostCallback Callback { get; }
    internal object UserState { get; }
    internal UserToken(SendOrPostCallback callback, object userState);
    internal SendOrPostCallback get_Callback();
    internal object get_UserState();
}
public abstract class System.Web.Services.Protocols.ValueCollectionParameterReader : MimeParameterReader {
    private ParameterInfo[] paramInfos;
    public virtual void Initialize(object o);
    public virtual object GetInitializer(LogicalMethodInfo methodInfo);
    protected Object[] Read(NameValueCollection collection);
    public static bool IsSupported(LogicalMethodInfo methodInfo);
    public static bool IsSupported(ParameterInfo paramInfo);
}
public class System.Web.Services.Protocols.WebClientAsyncResult : object {
    private object userAsyncState;
    private bool completedSynchronously;
    private bool isCompleted;
    private ManualResetEvent modreq(System.Runtime.CompilerServices.IsVolatile) manualResetEvent;
    private AsyncCallback userCallback;
    internal WebClientProtocol ClientProtocol;
    internal object InternalAsyncState;
    internal Exception Exception;
    internal WebResponse Response;
    internal WebRequest Request;
    internal Stream ResponseStream;
    internal Stream ResponseBufferedStream;
    internal Byte[] Buffer;
    internal bool EndSendCalled;
    public object AsyncState { get; }
    public WaitHandle AsyncWaitHandle { get; }
    public bool CompletedSynchronously { get; }
    public bool IsCompleted { get; }
    internal WebClientAsyncResult(WebClientProtocol clientProtocol, object internalAsyncState, WebRequest request, AsyncCallback userCallback, object userAsyncState);
    public sealed virtual object get_AsyncState();
    public sealed virtual WaitHandle get_AsyncWaitHandle();
    public sealed virtual bool get_CompletedSynchronously();
    public sealed virtual bool get_IsCompleted();
    public void Abort();
    internal void Complete();
    internal void Complete(Exception e);
    internal WebResponse WaitForResponse();
    internal void CombineCompletedSynchronously(bool innerCompletedSynchronously);
}
[ComVisibleAttribute("True")]
public abstract class System.Web.Services.Protocols.WebClientProtocol : Component {
    private static AsyncCallback getRequestStreamAsyncCallback;
    private static AsyncCallback getResponseAsyncCallback;
    private static AsyncCallback modreq(System.Runtime.CompilerServices.IsVolatile) readResponseAsyncCallback;
    private static ClientTypeCache cache;
    private static RequestCachePolicy bypassCache;
    private ICredentials credentials;
    private bool preAuthenticate;
    private Uri uri;
    private int timeout;
    private string connectionGroupName;
    private Encoding requestEncoding;
    private WebRequest pendingSyncRequest;
    private object nullToken;
    private Hashtable asyncInvokes;
    private static object s_InternalSyncObject;
    internal static object InternalSyncObject { get; }
    internal static RequestCachePolicy BypassCache { get; }
    public ICredentials Credentials { get; public set; }
    public bool UseDefaultCredentials { get; public set; }
    [DefaultValueAttribute("")]
public string ConnectionGroupName { get; public set; }
    internal WebRequest PendingSyncRequest { get; internal set; }
    [DefaultValueAttribute("False")]
[WebServicesDescriptionAttribute("ClientProtocolPreAuthenticate")]
public bool PreAuthenticate { get; public set; }
    [DefaultValueAttribute("")]
[SettingsBindableAttribute("True")]
[WebServicesDescriptionAttribute("ClientProtocolUrl")]
public string Url { get; public set; }
    internal Hashtable AsyncInvokes { get; }
    internal object NullToken { get; }
    internal Uri Uri { get; internal set; }
    [DefaultValueAttribute("")]
[SettingsBindableAttribute("True")]
[WebServicesDescriptionAttribute("ClientProtocolEncoding")]
public Encoding RequestEncoding { get; public set; }
    [DefaultValueAttribute("100000")]
[SettingsBindableAttribute("True")]
[WebServicesDescriptionAttribute("ClientProtocolTimeout")]
public int Timeout { get; public set; }
    private static WebClientProtocol();
    internal WebClientProtocol(WebClientProtocol protocol);
    internal static object get_InternalSyncObject();
    internal static RequestCachePolicy get_BypassCache();
    public ICredentials get_Credentials();
    public void set_Credentials(ICredentials value);
    public bool get_UseDefaultCredentials();
    public void set_UseDefaultCredentials(bool value);
    public string get_ConnectionGroupName();
    public void set_ConnectionGroupName(string value);
    internal WebRequest get_PendingSyncRequest();
    internal void set_PendingSyncRequest(WebRequest value);
    public bool get_PreAuthenticate();
    public void set_PreAuthenticate(bool value);
    public string get_Url();
    public void set_Url(string value);
    internal Hashtable get_AsyncInvokes();
    internal object get_NullToken();
    internal Uri get_Uri();
    internal void set_Uri(Uri value);
    public Encoding get_RequestEncoding();
    public void set_RequestEncoding(Encoding value);
    public int get_Timeout();
    public void set_Timeout(int value);
    public virtual void Abort();
    internal IAsyncResult BeginSend(Uri requestUri, WebClientAsyncResult asyncResult, bool callWriteAsyncRequest);
    private static void ProcessAsyncException(WebClientAsyncResult client, Exception e, string method);
    private static void GetRequestStreamAsyncCallback(IAsyncResult asyncResult);
    private static void GetResponseAsyncCallback(IAsyncResult asyncResult);
    private static void ReadAsyncResponse(WebClientAsyncResult client);
    private static void ReadAsyncResponseStream(WebClientAsyncResult client);
    private static bool ProcessAsyncResponseStreamResult(WebClientAsyncResult client, IAsyncResult asyncResult);
    private static void ReadResponseAsyncCallback(IAsyncResult asyncResult);
    internal void NotifyClientCallOut(WebRequest request);
    protected virtual WebRequest GetWebRequest(Uri uri);
    protected virtual WebResponse GetWebResponse(WebRequest request);
    protected virtual WebResponse GetWebResponse(WebRequest request, IAsyncResult result);
    internal virtual void InitializeAsyncRequest(WebRequest request, object internalAsyncState);
    internal virtual void AsyncBufferedSerialize(WebRequest request, Stream requestStream, object internalAsyncState);
    internal WebResponse EndSend(IAsyncResult asyncResult, Object& internalAsyncState, Stream& responseStream);
    protected static object GetFromCache(Type type);
    protected static void AddToCache(Type type, object value);
}
internal class System.Web.Services.Protocols.WebServiceHandler : object {
    private ServerProtocol protocol;
    private Exception exception;
    private AsyncCallback asyncCallback;
    private ManualResetEvent asyncBeginComplete;
    private int asyncCallbackCalls;
    private bool wroteException;
    private Object[] parameters;
    internal WebServiceHandler(ServerProtocol protocol);
    private static void TraceFlush();
    private void PrepareContext();
    private void WriteException(Exception e);
    private void Invoke();
    private void InvokeTransacted();
    private void ThrowInitException();
    private void HandleOneWayException(Exception e, string method);
    protected void CoreProcessRequest();
    private HttpContext SwitchContext(HttpContext context);
    private void OneWayInvoke();
    private void OneWayInvokeTransacted();
    private void Callback(IAsyncResult result);
    private void DoCallback(IAsyncResult result);
    protected IAsyncResult BeginCoreProcessRequest(AsyncCallback callback, object asyncState);
    private void OneWayAsyncInvoke();
    private IAsyncResult BeginInvoke(AsyncCallback callback, object asyncState);
    private void OneWayCallback(IAsyncResult asyncResult);
    protected void EndCoreProcessRequest(IAsyncResult asyncResult);
    private void EndInvoke(IAsyncResult asyncResult);
    private void WriteReturns(Object[] returnValues);
}
public class System.Web.Services.Protocols.WebServiceHandlerFactory : object {
    public sealed virtual IHttpHandler GetHandler(HttpContext context, string verb, string url, string filePath);
    private Type GetCompiledType(string url, HttpContext context);
    internal IHttpHandler CoreGetHandler(Type type, HttpContext context, HttpRequest request, HttpResponse response);
    private ServerProtocolFactory[] GetServerProtocolFactories();
    public sealed virtual void ReleaseHandler(IHttpHandler handler);
}
internal class System.Web.Services.Protocols.XmlReturn : object {
    internal static Object[] GetInitializers(LogicalMethodInfo[] methodInfos);
    private static bool IsSupported(Type returnType);
    internal static object GetInitializer(LogicalMethodInfo methodInfo);
    private static Evidence GetEvidenceForType(Type type);
}
public class System.Web.Services.Protocols.XmlReturnReader : MimeReturnReader {
    private XmlSerializer xmlSerializer;
    public virtual void Initialize(object o);
    public virtual Object[] GetInitializers(LogicalMethodInfo[] methodInfos);
    public virtual object GetInitializer(LogicalMethodInfo methodInfo);
    public virtual object Read(WebResponse response, Stream responseStream);
}
internal class System.Web.Services.Protocols.XmlReturnWriter : MimeReturnWriter {
    private XmlSerializer xmlSerializer;
    public virtual void Initialize(object o);
    public virtual Object[] GetInitializers(LogicalMethodInfo[] methodInfos);
    public virtual object GetInitializer(LogicalMethodInfo methodInfo);
    internal virtual void Write(HttpResponse response, Stream outputStream, object returnValue);
}
internal static class System.Web.Services.Res : object {
    public static string AsyncDuplicateUserState;
    public static string BPConformanceHeaderFault;
    public static string Binding;
    public static string BindingInvalidAttribute;
    public static string BindingMissingAttribute;
    public static string BindingMultipleParts;
    public static string BothAndUseTheMessageNameUseTheMessageName3;
    public static string CanTCallTheEndMethodOfAnAsyncCallMoreThan;
    public static string CanTSpecifyElementOnEncodedMessagePartsPart;
    public static string CannotRunInPartialTrustOutsideAspNet;
    public static string ClientProtocolAllowAutoRedirect;
    public static string ClientProtocolClientCertificates;
    public static string ClientProtocolCookieContainer;
    public static string ClientProtocolEnableDecompression;
    public static string ClientProtocolEncoding;
    public static string ClientProtocolPreAuthenticate;
    public static string ClientProtocolSoapVersion;
    public static string ClientProtocolTimeout;
    public static string ClientProtocolUrl;
    public static string ClientProtocolUserAgent;
    public static string CodeGenSupportParameterAttributes;
    public static string CodeGenSupportReferenceParameters;
    public static string CodeGenSupportReturnTypeAttributes;
    public static string CodeRemarks;
    public static string CodegenWarningDetails;
    public static string ConfigKeyNotFoundInElementCollection;
    public static string ConfigKeysDoNotMatch;
    public static string ContractOverride;
    public static string Description;
    public static string DiscoveryIsNotPossibleBecauseTypeIsMissing1;
    public static string DuplicateInputOutputNames0;
    public static string EachMessagePartInAUseLiteralMessageMustSpecify0;
    public static string EachMessagePartInAnUseEncodedMessageMustSpecify0;
    public static string EachMessagePartInRpcUseLiteralMessageMustSpecify0;
    public static string Element;
    public static string ElementTypeMustBeObjectOrSoapExtensionOrSoapReflectedException;
    public static string ElementTypeMustBeObjectOrSoapReflectedException;
    public static string FailedToHandleRequest0;
    public static string Fault;
    public static string FaultBinding;
    public static string HeaderFault;
    public static string HelpGeneratorInternalError;
    public static string IfAppSettingBaseUrlArgumentIsSpecifiedThen0;
    public static string InitFailed;
    public static string InputElement;
    public static string Invalid_priority_group_value;
    public static string MessageHasNoParts1;
    public static string Missing2;
    public static string MissingBinding0;
    public static string MissingHttpOperationElement0;
    public static string MissingInputBinding0;
    public static string MissingMatchElement0;
    public static string MissingMessage2;
    public static string MissingMessagePartForMessageFromNamespace3;
    public static string MissingOutputBinding0;
    public static string MissingSoapBodyInputBinding0;
    public static string MissingSoapBodyOutputBinding0;
    public static string MissingSoapOperationBinding0;
    public static string MultipleBindingsWithSameName2;
    public static string NeedConcreteType;
    public static string NoInputHTTPFormatsWereRecognized0;
    public static string NoInputMIMEFormatsWereRecognized0;
    public static string NoMethodsWereFoundInTheWSDLForThisProtocol;
    public static string NoOutputMIMEFormatsWereRecognized0;
    public static string NotificationIsNotSupported0;
    public static string OneWayIsNotSupported0;
    public static string OnlyOneWebServiceBindingAttributeMayBeSpecified1;
    public static string OnlyOperationInputOrOperationOutputTypes;
    public static string OnlyXmlElementsOrTypesDerivingFromServiceDescriptionFormatExtension0;
    public static string Operation;
    public static string OperationBinding;
    public static string OperationFlowNotification;
    public static string OperationFlowSolicitResponse;
    public static string OperationMissingBinding;
    public static string OperationOverload;
    public static string OutputElement;
    public static string Part;
    public static string Port;
    public static string PortTypeOperationMissing;
    public static string ProtocolDoesNotAsyncSerialize;
    public static string ProtocolWithNameIsNotRecognized1;
    public static string RequestResponseIsNotSupported0;
    public static string RequiredXmlFormatExtensionAttributeIsMissing1;
    public static string Rxxxx;
    public static string SchemaSyntaxErrorDetails;
    public static string SchemaValidationError;
    public static string SchemaValidationWarning;
    public static string ServiceDescriptionWasNotFound0;
    public static string SolicitResponseIsNotSupported0;
    public static string SpecifyingATypeForUseLiteralMessagesIs0;
    public static string SpecifyingATypeForUseLiteralMessagesIsAny;
    public static string SpecifyingAnElementForUseEncodedMessageParts0;
    public static string StackTraceEnd;
    public static string StreamDoesNotRead;
    public static string StreamDoesNotSeek;
    public static string TheBinding0FromNamespace1WasIgnored2;
    public static string TheBindingNamedFromNamespaceWasNotFoundIn3;
    public static string TheDocumentWasNotRecognizedAsAKnownDocumentType;
    public static string TheDocumentWasUnderstoodButContainsErrors;
    public static string TheEncodingIsNotSupported1;
    public static string TheHTMLDocumentDoesNotContainDiscoveryInformation;
    public static string TheMethodDoesNotHaveARequestElementEither1;
    public static string TheMethodsAndUseTheSameRequestElementAndSoapActionXmlns6;
    public static string TheMethodsAndUseTheSameRequestElementXmlns4;
    public static string TheMethodsAndUseTheSameSoapActionWhenTheService3;
    public static string TheOperation0FromNamespace1WasIgnored2;
    public static string TheOperationBinding0FromNamespace1WasIgnored;
    public static string TheOperationBindingFromNamespaceHadInvalid3;
    public static string TheOperationFromNamespaceHadInvalidSyntax3;
    public static string TheRequestElementXmlnsWasNotRecognized2;
    public static string TheRootElementForTheRequestCouldNotBeDetermined0;
    public static string TheSchemaDocumentContainsLinksThatCouldNotBeResolved;
    public static string TheSyntaxOfTypeMayNotBeExtended1;
    public static string TheWSDLDocumentContainsLinksThatCouldNotBeResolved;
    public static string ThereIsNoSoapTransportImporterThatUnderstands1;
    public static string ThereWasAnErrorDownloading0;
    public static string ThereWasAnErrorDuringAsyncProcessing;
    public static string TraceCallEnter;
    public static string TraceCallEnterDetails;
    public static string TraceCallExit;
    public static string TraceCreateSerializer;
    public static string TraceExceptionCought;
    public static string TraceExceptionDetails;
    public static string TraceExceptionIgnored;
    public static string TraceExceptionThrown;
    public static string TracePostWorkItemIn;
    public static string TracePostWorkItemOut;
    public static string TraceReadHeaders;
    public static string TraceReadRequest;
    public static string TraceReadResponse;
    public static string TraceUrl;
    public static string TraceUrlReferrer;
    public static string TraceUserHostAddress;
    public static string TraceUserHostName;
    public static string TraceWriteHeaders;
    public static string TraceWriteRequest;
    public static string TraceWriteResponse;
    public static string TypeIsMissingWebServiceBindingAttributeThat2;
    public static string UnableToHandleRequest0;
    public static string UnableToHandleRequestActionNotRecognized1;
    public static string UnableToHandleRequestActionRequired0;
    public static string UnableToImportBindingFromNamespace2;
    public static string UnableToImportOperation1;
    public static string UriValueRelative;
    public static string WebAsyncMissingEnd;
    public static string WebAsyncTransaction;
    public static string WebBadOutParameter;
    public static string WebBadStreamState;
    public static string WebBothMethodAttrs;
    public static string WebBothServiceAttrs;
    public static string WebCannotAccessValue;
    public static string WebCannotAccessValueStage;
    public static string WebCannotUnderstandHeader;
    public static string WebChangeTypeFailed;
    public static string WebClientBindingAttributeRequired;
    public static string WebConfigExtensionError;
    public static string WebConfigInvalidExtensionPriority;
    public static string WebContractReferenceName;
    public static string WebDescriptionHeaderAndBodyUseMismatch;
    public static string WebDescriptionMissing;
    public static string WebDescriptionMissingItem;
    public static string WebDescriptionPartElementRequired;
    public static string WebDescriptionPartElementWarning;
    public static string WebDescriptionPartTypeRequired;
    public static string WebDescriptionPartTypeWarning;
    public static string WebDescriptionTooManyMessages;
    public static string WebDiscoRefReport;
    public static string WebDiscoveryDocumentReferenceName;
    public static string WebDuplicateBinding;
    public static string WebDuplicateFaultBinding;
    public static string WebDuplicateFormatExtension;
    public static string WebDuplicateImport;
    public static string WebDuplicateMessage;
    public static string WebDuplicateMessagePart;
    public static string WebDuplicateOperation;
    public static string WebDuplicateOperationBinding;
    public static string WebDuplicateOperationFault;
    public static string WebDuplicateOperationMessage;
    public static string WebDuplicatePort;
    public static string WebDuplicatePortType;
    public static string WebDuplicateService;
    public static string WebDuplicateUnknownElement;
    public static string WebEmptyRef;
    public static string WebExtensionError;
    public static string WebHeaderInvalidMustUnderstand;
    public static string WebHeaderInvalidRelay;
    public static string WebHeaderMissing;
    public static string WebHeaderOneWayOut;
    public static string WebHeaderRead;
    public static string WebHeaderStatic;
    public static string WebHeaderType;
    public static string WebHeaderWrite;
    public static string WebHttpHeader;
    public static string WebInOutParameter;
    public static string WebInvalidBindingName;
    public static string WebInvalidBindingPlacement;
    public static string WebInvalidContentType;
    public static string WebInvalidDocType;
    public static string WebInvalidEnvelopeNamespace;
    public static string WebInvalidFormat;
    public static string WebInvalidMethodName;
    public static string WebInvalidMethodNameCase;
    public static string WebInvalidRequestFormat;
    public static string WebInvalidRequestFormatDetails;
    public static string WebMethodMissingParams;
    public static string WebMethodStatic;
    public static string WebMissingBodyElement;
    public static string WebMissingClientProtocol;
    public static string WebMissingCustomAttribute;
    public static string WebMissingDocument;
    public static string WebMissingEnvelopeElement;
    public static string WebMissingHeader;
    public static string WebMissingHelpContext;
    public static string WebMissingParameter;
    public static string WebMissingPath;
    public static string WebMissingResource;
    public static string WebMultiDimArray;
    public static string WebMultiplyDeclaredHeaderTypes;
    public static string WebNegativeValue;
    public static string WebNoReturnValue;
    public static string WebNullAsyncResultInBegin;
    public static string WebNullAsyncResultInEnd;
    public static string WebNullReaderForMessage;
    public static string WebNullRef;
    public static string WebNullWriterForMessage;
    public static string WebOneWayOutParameters;
    public static string WebOneWayReturnValue;
    public static string WebPathNotFound;
    public static string WebQNamePrefixUndefined;
    public static string WebRefInvalidAttribute;
    public static string WebRefInvalidAttribute2;
    public static string WebReflectionError;
    public static string WebReflectionErrorMethod;
    public static string WebRequestContent;
    public static string WebRequestUnableToProcess;
    public static string WebRequestUnableToRead;
    public static string WebResolveMissingClientProtocol;
    public static string WebResponseBadXml;
    public static string WebResponseContent;
    public static string WebResponseKnownError;
    public static string WebResponseUnknownError;
    public static string WebResponseUnknownErrorEmptyBody;
    public static string WebResultNotXml;
    public static string WebSchemaNotFound;
    public static string WebServiceContext;
    public static string WebServiceDescriptionIgnoredOptional;
    public static string WebServiceDescriptionIgnoredRequired;
    public static string WebServiceServer;
    public static string WebServiceSession;
    public static string WebServiceSoapVersion;
    public static string WebServiceUser;
    public static string WebShemaReferenceName;
    public static string WebSoap11EncodingStyleNotSupported1;
    public static string WebSuppressedExceptionMessage;
    public static string WebTextMatchBadCaptureIndex;
    public static string WebTextMatchBadGroupIndex;
    public static string WebTextMatchIgnoredTypeWarning;
    public static string WebTextMatchMissingPattern;
    public static string WebTimeout;
    public static string WebUnknownAttribute;
    public static string WebUnknownAttribute2;
    public static string WebUnknownAttribute3;
    public static string WebUnknownElement;
    public static string WebUnknownElement1;
    public static string WebUnknownElement2;
    public static string WebUnknownEncodingStyle;
    public static string WebUnrecognizedRequestFormat;
    public static string WebUnrecognizedRequestFormatUrl;
    public static string WebVirtualDisoRoot;
    public static string WebWsiContentTypeEncoding;
    public static string WebWsiViolation;
    public static string WhenUsingAMessageStyleOfParametersAsDocument0;
    public static string WireSignature;
    public static string WireSignatureEmpty;
    public static string WsdlGenRpcLitAnonimousType;
    public static string WsdlInstanceValidationDetails;
    public static string XmlLang;
    public static string XmlSchema;
    public static string XmlSchemaAttributeReference;
    public static string XmlSchemaContentDef;
    public static string XmlSchemaElementReference;
    public static string XmlSchemaItem;
    public static string XmlSchemaNamedItem;
    public static string indexMustBeBetweenAnd0Inclusive;
    public static string internalError0;
    public static string GetString(string name);
    public static string GetString(string name, Object[] args);
}
internal class System.Web.Services.Soap : object {
    internal static string XmlNamespace;
    internal static string Encoding;
    internal static string Namespace;
    internal static string ConformanceClaim;
    internal static string BasicProfile1_1;
    internal static string Action;
    internal static string ArrayType;
    internal static string Prefix;
    internal static string ClaimPrefix;
    internal static string DimeContentType;
    internal static string SoapContentType;
}
internal class System.Web.Services.Soap12 : object {
    internal static string Namespace;
    internal static string Encoding;
    internal static string RpcNamespace;
    internal static string Prefix;
}
internal class System.Web.Services.WebMethod : object {
    internal MethodInfo declaration;
    internal WebServiceBindingAttribute binding;
    internal WebMethodAttribute attribute;
    internal WebMethod(MethodInfo declaration, WebServiceBindingAttribute binding, WebMethodAttribute attribute);
}
[AttributeUsageAttribute("64")]
public class System.Web.Services.WebMethodAttribute : Attribute {
    private int transactionOption;
    private bool enableSession;
    private int cacheDuration;
    private bool bufferResponse;
    private string description;
    private string messageName;
    private bool transactionOptionSpecified;
    private bool enableSessionSpecified;
    private bool cacheDurationSpecified;
    private bool bufferResponseSpecified;
    private bool descriptionSpecified;
    private bool messageNameSpecified;
    public string Description { get; public set; }
    internal bool DescriptionSpecified { get; }
    public bool EnableSession { get; public set; }
    internal bool EnableSessionSpecified { get; }
    public int CacheDuration { get; public set; }
    internal bool CacheDurationSpecified { get; }
    public bool BufferResponse { get; public set; }
    internal bool BufferResponseSpecified { get; }
    public TransactionOption TransactionOption { get; public set; }
    internal bool TransactionOptionSpecified { get; }
    internal bool TransactionEnabled { get; }
    public string MessageName { get; public set; }
    internal bool MessageNameSpecified { get; }
    public WebMethodAttribute(bool enableSession);
    public WebMethodAttribute(bool enableSession, TransactionOption transactionOption);
    public WebMethodAttribute(bool enableSession, TransactionOption transactionOption, int cacheDuration);
    public WebMethodAttribute(bool enableSession, TransactionOption transactionOption, int cacheDuration, bool bufferResponse);
    public string get_Description();
    public void set_Description(string value);
    internal bool get_DescriptionSpecified();
    public bool get_EnableSession();
    public void set_EnableSession(bool value);
    internal bool get_EnableSessionSpecified();
    public int get_CacheDuration();
    public void set_CacheDuration(int value);
    internal bool get_CacheDurationSpecified();
    public bool get_BufferResponse();
    public void set_BufferResponse(bool value);
    internal bool get_BufferResponseSpecified();
    public TransactionOption get_TransactionOption();
    public void set_TransactionOption(TransactionOption value);
    internal bool get_TransactionOptionSpecified();
    internal bool get_TransactionEnabled();
    public string get_MessageName();
    public void set_MessageName(string value);
    internal bool get_MessageNameSpecified();
}
internal class System.Web.Services.WebMethodReflector : object {
    internal static WebMethodAttribute GetAttribute(MethodInfo implementation, MethodInfo declaration);
    internal static MethodInfo FindInterfaceMethodInfo(Type type, string signature);
    internal static LogicalMethodInfo[] GetMethods(Type type);
    internal static void IncludeTypes(LogicalMethodInfo[] methods, XmlReflectionImporter importer);
    internal static void IncludeTypes(LogicalMethodInfo method, XmlReflectionImporter importer);
}
public class System.Web.Services.WebService : MarshalByValueComponent {
    private HttpContext context;
    internal static string SoapVersionContextSlot;
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[DescriptionAttribute("The ASP.NET application object for the current request.")]
public HttpApplicationState Application { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[WebServicesDescriptionAttribute("WebServiceContext")]
public HttpContext Context { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[WebServicesDescriptionAttribute("WebServiceSession")]
public HttpSessionState Session { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[WebServicesDescriptionAttribute("WebServiceServer")]
public HttpServerUtility Server { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[WebServicesDescriptionAttribute("WebServiceUser")]
public IPrincipal User { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[WebServicesDescriptionAttribute("WebServiceSoapVersion")]
[ComVisibleAttribute("False")]
public SoapProtocolVersion SoapVersion { get; }
    private static WebService();
    public HttpApplicationState get_Application();
    public HttpContext get_Context();
    public HttpSessionState get_Session();
    public HttpServerUtility get_Server();
    public IPrincipal get_User();
    public SoapProtocolVersion get_SoapVersion();
    internal void SetContext(HttpContext context);
}
[AttributeUsageAttribute("1028")]
public class System.Web.Services.WebServiceAttribute : Attribute {
    private string description;
    private string ns;
    private string name;
    public static string DefaultNamespace;
    public string Description { get; public set; }
    public string Namespace { get; public set; }
    public string Name { get; public set; }
    public string get_Description();
    public void set_Description(string value);
    public string get_Namespace();
    public void set_Namespace(string value);
    public string get_Name();
    public void set_Name(string value);
}
[AttributeUsageAttribute("1028")]
public class System.Web.Services.WebServiceBindingAttribute : Attribute {
    private string name;
    private string ns;
    private string location;
    private WsiProfiles claims;
    private bool emitClaims;
    public WsiProfiles ConformsTo { get; public set; }
    public bool EmitConformanceClaims { get; public set; }
    public string Location { get; public set; }
    public string Name { get; public set; }
    public string Namespace { get; public set; }
    public WebServiceBindingAttribute(string name);
    public WebServiceBindingAttribute(string name, string ns);
    public WebServiceBindingAttribute(string name, string ns, string location);
    public WsiProfiles get_ConformsTo();
    public void set_ConformsTo(WsiProfiles value);
    public bool get_EmitConformanceClaims();
    public void set_EmitConformanceClaims(bool value);
    public string get_Location();
    public void set_Location(string value);
    public string get_Name();
    public void set_Name(string value);
    public string get_Namespace();
    public void set_Namespace(string value);
}
internal class System.Web.Services.WebServiceBindingReflector : object {
    internal static WebServiceBindingAttribute GetAttribute(Type type);
    internal static WebServiceBindingAttribute GetAttribute(LogicalMethodInfo methodInfo, string binding);
}
internal class System.Web.Services.WebServiceReflector : object {
    internal static WebServiceAttribute GetAttribute(Type type);
    internal static WebServiceAttribute GetAttribute(LogicalMethodInfo[] methodInfos);
    internal static Type GetMostDerivedType(LogicalMethodInfo[] methodInfos);
}
[AttributeUsageAttribute("32767")]
internal class System.Web.Services.WebServicesDescriptionAttribute : DescriptionAttribute {
    private bool replaced;
    public string Description { get; }
    internal WebServicesDescriptionAttribute(string description);
    public virtual string get_Description();
}
[FlagsAttribute]
public enum System.Web.Services.WsiProfiles : Enum {
    public int value__;
    public static WsiProfiles None;
    public static WsiProfiles BasicProfile1_1;
}
