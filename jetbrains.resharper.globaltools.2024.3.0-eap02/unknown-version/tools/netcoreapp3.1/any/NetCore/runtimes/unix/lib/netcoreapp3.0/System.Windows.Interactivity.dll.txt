internal class System.JetBrainsMockNotImplementedException : NotImplementedException {
    private Guid _guid;
    public string Message { get; }
    public JetBrainsMockNotImplementedException(Guid guid);
    public virtual string get_Message();
}
public abstract class System.Windows.Interactivity.AttachableCollection`1 : FreezableCollection`1<T> {
    private Collection`1<T> snapshot;
    private DependencyObject associatedObject;
    protected DependencyObject AssociatedObject { get; }
    private DependencyObject System.Windows.Interactivity.IAttachedObject.AssociatedObject { get; }
    protected DependencyObject get_AssociatedObject();
    private sealed virtual override DependencyObject System.Windows.Interactivity.IAttachedObject.get_AssociatedObject();
    protected abstract virtual void OnAttached();
    protected abstract virtual void OnDetaching();
    [ConditionalAttribute("DEBUG")]
private void VerifySnapshotIntegrity();
    private void VerifyAdd(T item);
    private void OnCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    public sealed virtual void Attach(DependencyObject dependencyObject);
    public sealed virtual void Detach();
}
public abstract class System.Windows.Interactivity.Behavior : Animatable {
    private Type associatedType;
    private DependencyObject associatedObject;
    protected Type AssociatedType { get; }
    protected DependencyObject AssociatedObject { get; }
    private DependencyObject System.Windows.Interactivity.IAttachedObject.AssociatedObject { get; }
    internal Behavior(Type associatedType);
    protected Type get_AssociatedType();
    protected DependencyObject get_AssociatedObject();
    private sealed virtual override DependencyObject System.Windows.Interactivity.IAttachedObject.get_AssociatedObject();
    protected virtual void OnAttached();
    protected virtual void OnDetaching();
    protected virtual Freezable CreateInstanceCore();
    private void OnAssociatedObjectChanged();
    public sealed virtual void Attach(DependencyObject dependencyObject);
    public sealed virtual void Detach();
}
public abstract class System.Windows.Interactivity.Behavior`1 : Behavior {
    protected T AssociatedObject { get; }
    protected T get_AssociatedObject();
}
public class System.Windows.Interactivity.BehaviorCollection : AttachableCollection`1<Behavior> {
    protected virtual void OnAttached();
    protected virtual void OnDetaching();
    protected virtual Freezable CreateInstanceCore();
}
public enum System.Windows.Interactivity.CustomPropertyValueEditor : Enum {
    public int value__;
    public static CustomPropertyValueEditor Element;
    public static CustomPropertyValueEditor Storyboard;
    public static CustomPropertyValueEditor StateName;
    public static CustomPropertyValueEditor ElementBinding;
    public static CustomPropertyValueEditor PropertyBinding;
}
[AttributeUsageAttribute("128")]
public class System.Windows.Interactivity.CustomPropertyValueEditorAttribute : Attribute {
    public CustomPropertyValueEditor CustomPropertyValueEditor { get; private set; }
    public CustomPropertyValueEditorAttribute(CustomPropertyValueEditor customPropertyValueEditor);
    public CustomPropertyValueEditor get_CustomPropertyValueEditor();
    private void set_CustomPropertyValueEditor(CustomPropertyValueEditor value);
}
[AttributeUsageAttribute("132")]
[CLSCompliantAttribute("False")]
public class System.Windows.Interactivity.DefaultTriggerAttribute : Attribute {
    private Type targetType;
    private Type triggerType;
    private Object[] parameters;
    public Type TargetType { get; }
    public Type TriggerType { get; }
    public IEnumerable Parameters { get; }
    public DefaultTriggerAttribute(Type targetType, Type triggerType, object parameter);
    public DefaultTriggerAttribute(Type targetType, Type triggerType, Object[] parameters);
    public Type get_TargetType();
    public Type get_TriggerType();
    public IEnumerable get_Parameters();
    public TriggerBase Instantiate();
}
[ExtensionAttribute]
public static class System.Windows.Interactivity.DependencyObjectHelper : object {
    [ExtensionAttribute]
public static IEnumerable`1<DependencyObject> GetSelfAndAncestors(DependencyObject dependencyObject);
}
public class System.Windows.Interactivity.EventObserver : object {
    private EventInfo eventInfo;
    private object target;
    private Delegate handler;
    public EventObserver(EventInfo eventInfo, object target, Delegate handler);
    public sealed virtual void Dispose();
}
public class System.Windows.Interactivity.EventTrigger : EventTriggerBase`1<object> {
    public static DependencyProperty EventNameProperty;
    public string EventName { get; public set; }
    public EventTrigger(string eventName);
    private static EventTrigger();
    public string get_EventName();
    public void set_EventName(string value);
    protected virtual string GetEventName();
    private static void OnEventNameChanged(object sender, DependencyPropertyChangedEventArgs args);
}
public abstract class System.Windows.Interactivity.EventTriggerBase : TriggerBase {
    public static DependencyProperty SourceObjectProperty;
    public static DependencyProperty SourceNameProperty;
    private Type sourceTypeConstraint;
    private bool isSourceChangedRegistered;
    private MethodInfo eventHandlerMethodInfo;
    protected Type AssociatedObjectTypeConstraint { get; }
    protected Type SourceTypeConstraint { get; }
    public object SourceObject { get; public set; }
    public string SourceName { get; public set; }
    public object Source { get; }
    private bool IsSourceChangedRegistered { get; private set; }
    private bool IsSourceNameSet { get; }
    private bool IsLoadedRegistered { get; private set; }
    internal EventTriggerBase(Type sourceTypeConstraint);
    private static EventTriggerBase();
    protected sealed virtual Type get_AssociatedObjectTypeConstraint();
    protected Type get_SourceTypeConstraint();
    public object get_SourceObject();
    public void set_SourceObject(object value);
    public string get_SourceName();
    public void set_SourceName(string value);
    public object get_Source();
    private bool get_IsSourceChangedRegistered();
    private void set_IsSourceChangedRegistered(bool value);
    private bool get_IsSourceNameSet();
    private bool get_IsLoadedRegistered();
    private void set_IsLoadedRegistered(bool value);
    protected abstract virtual string GetEventName();
    protected virtual void OnEvent(EventArgs eventArgs);
    private void OnSourceChanged(object oldSource, object newSource);
    protected virtual void OnAttached();
    protected virtual void OnDetaching();
    private void OnBehaviorHostChanged(object sender, EventArgs e);
    private static void OnSourceObjectChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    private static void OnSourceNameChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    private void RegisterSourceChanged();
    private void UnregisterSourceChanged();
    private void RegisterLoaded(FrameworkElement associatedElement);
    private void UnregisterLoaded(FrameworkElement associatedElement);
    private void RegisterEvent(object obj, string eventName);
    private static bool IsValidEvent(EventInfo eventInfo);
    private void UnregisterEvent(object obj, string eventName);
    private void UnregisterEventImpl(object obj, string eventName);
    private void OnEventImpl(object sender, EventArgs eventArgs);
}
public abstract class System.Windows.Interactivity.EventTriggerBase`1 : EventTriggerBase {
    public T Source { get; }
    public T get_Source();
    protected virtual void OnSourceChanged(T oldSource, T newSource);
}
public interface System.Windows.Interactivity.IAttachedObject {
    public DependencyObject AssociatedObject { get; }
    public abstract virtual DependencyObject get_AssociatedObject();
    public abstract virtual void Attach(DependencyObject dependencyObject);
    public abstract virtual void Detach();
}
public static class System.Windows.Interactivity.Interaction : object {
    private static DependencyProperty TriggersProperty;
    private static DependencyProperty BehaviorsProperty;
    private static Interaction();
    public static TriggerCollection GetTriggers(DependencyObject obj);
    public static BehaviorCollection GetBehaviors(DependencyObject obj);
    private static void OnBehaviorsChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    private static void OnTriggersChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
}
public class System.Windows.Interactivity.InvokeCommandAction : TriggerAction`1<DependencyObject> {
    public static DependencyProperty CommandProperty;
    public static DependencyProperty CommandParameterProperty;
    private string commandName;
    public string CommandName { get; public set; }
    public ICommand Command { get; public set; }
    public object CommandParameter { get; public set; }
    private static InvokeCommandAction();
    public string get_CommandName();
    public void set_CommandName(string value);
    public ICommand get_Command();
    public void set_Command(ICommand value);
    public object get_CommandParameter();
    public void set_CommandParameter(object value);
    protected virtual void Invoke(object parameter);
    private ICommand ResolveCommand();
}
public class System.Windows.Interactivity.PreviewInvokeEventArgs : EventArgs {
    public bool Cancelling { get; public set; }
    public bool get_Cancelling();
    public void set_Cancelling(bool value);
}
public abstract class System.Windows.Interactivity.TargetedTriggerAction : TriggerAction {
    public static DependencyProperty TargetObjectProperty;
    public static DependencyProperty TargetNameProperty;
    private Type targetTypeConstraint;
    private bool isTargetChangedRegistered;
    public object TargetObject { get; public set; }
    public string TargetName { get; public set; }
    protected object Target { get; }
    protected Type AssociatedObjectTypeConstraint { get; }
    protected Type TargetTypeConstraint { get; }
    private bool IsTargetNameSet { get; }
    private bool IsTargetChangedRegistered { get; private set; }
    internal TargetedTriggerAction(Type targetTypeConstraint);
    private static TargetedTriggerAction();
    public object get_TargetObject();
    public void set_TargetObject(object value);
    public string get_TargetName();
    public void set_TargetName(string value);
    protected object get_Target();
    protected sealed virtual Type get_AssociatedObjectTypeConstraint();
    protected Type get_TargetTypeConstraint();
    private bool get_IsTargetNameSet();
    private bool get_IsTargetChangedRegistered();
    private void set_IsTargetChangedRegistered(bool value);
    protected virtual void OnAttached();
    protected virtual void OnDetaching();
    private void OnBehaviorHostChanged(object sender, EventArgs e);
    private void RegisterTargetChanged();
    private void UnregisterTargetChanged();
    private static void OnTargetObjectChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    private static void OnTargetNameChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
}
public abstract class System.Windows.Interactivity.TargetedTriggerAction`1 : TargetedTriggerAction {
    protected T Target { get; }
    protected T get_Target();
    protected virtual void OnTargetChanged(T oldTarget, T newTarget);
}
[DefaultTriggerAttribute("System.Windows.UIElement", "System.Windows.Interactivity.EventTrigger", "Mono.Cecil.CustomAttributeArgument")]
[DefaultTriggerAttribute("System.Windows.Controls.Primitives.ButtonBase", "System.Windows.Interactivity.EventTrigger", "Mono.Cecil.CustomAttributeArgument")]
public abstract class System.Windows.Interactivity.TriggerAction : Animatable {
    public static DependencyProperty IsEnabledProperty;
    private bool isHosted;
    private DependencyObject associatedObject;
    private Type associatedObjectTypeConstraint;
    public bool IsEnabled { get; public set; }
    protected DependencyObject AssociatedObject { get; }
    protected Type AssociatedObjectTypeConstraint { get; }
    private DependencyObject System.Windows.Interactivity.IAttachedObject.AssociatedObject { get; }
    internal TriggerAction(Type associatedObjectTypeConstraint);
    private static TriggerAction();
    public bool get_IsEnabled();
    public void set_IsEnabled(bool value);
    protected DependencyObject get_AssociatedObject();
    protected virtual Type get_AssociatedObjectTypeConstraint();
    private sealed virtual override DependencyObject System.Windows.Interactivity.IAttachedObject.get_AssociatedObject();
    protected abstract virtual void Invoke(object parameter);
    protected virtual void OnAttached();
    protected virtual void OnDetaching();
    protected virtual Freezable CreateInstanceCore();
    public sealed virtual void Attach(DependencyObject dependencyObject);
    public sealed virtual void Detach();
}
public abstract class System.Windows.Interactivity.TriggerAction`1 : TriggerAction {
    protected T AssociatedObject { get; }
    protected Type AssociatedObjectTypeConstraint { get; }
    protected T get_AssociatedObject();
    protected sealed virtual Type get_AssociatedObjectTypeConstraint();
}
public class System.Windows.Interactivity.TriggerActionCollection : AttachableCollection`1<TriggerAction> {
    protected virtual void OnAttached();
    protected virtual void OnDetaching();
    protected virtual Freezable CreateInstanceCore();
}
[ContentPropertyAttribute("Actions")]
public abstract class System.Windows.Interactivity.TriggerBase : Animatable {
    private static DependencyPropertyKey ActionsPropertyKey;
    public static DependencyProperty ActionsProperty;
    private DependencyObject associatedObject;
    private Type associatedObjectTypeConstraint;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<PreviewInvokeEventArgs> PreviewInvoke;
    protected DependencyObject AssociatedObject { get; }
    protected Type AssociatedObjectTypeConstraint { get; }
    public TriggerActionCollection Actions { get; }
    private DependencyObject System.Windows.Interactivity.IAttachedObject.AssociatedObject { get; }
    internal TriggerBase(Type associatedObjectTypeConstraint);
    private static TriggerBase();
    protected DependencyObject get_AssociatedObject();
    protected virtual Type get_AssociatedObjectTypeConstraint();
    public TriggerActionCollection get_Actions();
    private sealed virtual override DependencyObject System.Windows.Interactivity.IAttachedObject.get_AssociatedObject();
    [CompilerGeneratedAttribute]
public void add_PreviewInvoke(EventHandler`1<PreviewInvokeEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_PreviewInvoke(EventHandler`1<PreviewInvokeEventArgs> value);
    protected void InvokeActions(object parameter);
    protected virtual void OnAttached();
    protected virtual void OnDetaching();
    protected virtual Freezable CreateInstanceCore();
    public sealed virtual void Attach(DependencyObject dependencyObject);
    public sealed virtual void Detach();
}
public abstract class System.Windows.Interactivity.TriggerBase`1 : TriggerBase {
    protected T AssociatedObject { get; }
    protected Type AssociatedObjectTypeConstraint { get; }
    protected T get_AssociatedObject();
    protected sealed virtual Type get_AssociatedObjectTypeConstraint();
}
public class System.Windows.Interactivity.TriggerCollection : AttachableCollection`1<TriggerBase> {
    protected virtual void OnAttached();
    protected virtual void OnDetaching();
    protected virtual Freezable CreateInstanceCore();
}
[AttributeUsageAttribute("4")]
public class System.Windows.Interactivity.TypeConstraintAttribute : Attribute {
    public Type Constraint { get; private set; }
    public TypeConstraintAttribute(Type constraint);
    public Type get_Constraint();
    private void set_Constraint(Type value);
}
