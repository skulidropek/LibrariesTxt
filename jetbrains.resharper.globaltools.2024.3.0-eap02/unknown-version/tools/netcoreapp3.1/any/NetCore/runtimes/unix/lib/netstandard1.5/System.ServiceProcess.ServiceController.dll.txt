public class System.ServiceProcess.ServiceController : object {
    public bool CanPauseAndContinue { get; }
    public bool CanShutdown { get; }
    public bool CanStop { get; }
    public ServiceController[] DependentServices { get; }
    public string DisplayName { get; }
    public string MachineName { get; }
    public SafeHandle ServiceHandle { get; }
    public string ServiceName { get; }
    public ServiceController[] ServicesDependedOn { get; }
    public ServiceType ServiceType { get; }
    public ServiceStartMode StartType { get; }
    public ServiceControllerStatus Status { get; }
    public ServiceController(string name);
    public ServiceController(string name, string machineName);
    public bool get_CanPauseAndContinue();
    public bool get_CanShutdown();
    public bool get_CanStop();
    public ServiceController[] get_DependentServices();
    public string get_DisplayName();
    public string get_MachineName();
    public SafeHandle get_ServiceHandle();
    public string get_ServiceName();
    public ServiceController[] get_ServicesDependedOn();
    public ServiceType get_ServiceType();
    public ServiceStartMode get_StartType();
    public ServiceControllerStatus get_Status();
    public void Continue();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public static ServiceController[] GetDevices();
    public static ServiceController[] GetDevices(string machineName);
    public static ServiceController[] GetServices();
    public static ServiceController[] GetServices(string machineName);
    public void Pause();
    public void Refresh();
    public void Start();
    public void Start(String[] args);
    public void Stop();
    public void WaitForStatus(ServiceControllerStatus desiredStatus);
    public void WaitForStatus(ServiceControllerStatus desiredStatus, TimeSpan timeout);
}
public enum System.ServiceProcess.ServiceControllerStatus : Enum {
    public int value__;
    public static ServiceControllerStatus ContinuePending;
    public static ServiceControllerStatus Paused;
    public static ServiceControllerStatus PausePending;
    public static ServiceControllerStatus Running;
    public static ServiceControllerStatus StartPending;
    public static ServiceControllerStatus Stopped;
    public static ServiceControllerStatus StopPending;
}
public enum System.ServiceProcess.ServiceStartMode : Enum {
    public int value__;
    public static ServiceStartMode Automatic;
    public static ServiceStartMode Boot;
    public static ServiceStartMode Disabled;
    public static ServiceStartMode Manual;
    public static ServiceStartMode System;
}
[FlagsAttribute]
public enum System.ServiceProcess.ServiceType : Enum {
    public int value__;
    public static ServiceType Adapter;
    public static ServiceType FileSystemDriver;
    public static ServiceType InteractiveProcess;
    public static ServiceType KernelDriver;
    public static ServiceType RecognizerDriver;
    public static ServiceType Win32OwnProcess;
    public static ServiceType Win32ShareProcess;
}
public class System.ServiceProcess.TimeoutException : Exception {
    public TimeoutException(string message);
    public TimeoutException(string message, Exception innerException);
}
