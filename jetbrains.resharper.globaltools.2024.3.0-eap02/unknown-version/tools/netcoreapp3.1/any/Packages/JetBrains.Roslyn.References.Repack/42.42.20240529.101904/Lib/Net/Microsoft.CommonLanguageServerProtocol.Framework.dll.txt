[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public abstract class Microsoft.CommonLanguageServerProtocol.Framework.AbstractHandlerProvider : object {
    public abstract virtual ImmutableArray`1<RequestHandlerMetadata> GetRegisteredMethods();
    [NullableContextAttribute("1")]
public abstract virtual IMethodHandler GetMethodHandler(string method, Type requestType, Type responseType, string language);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.CommonLanguageServerProtocol.Framework.AbstractLanguageServer`1 : object {
    private JsonRpc _jsonRpc;
    protected ILspLogger _logger;
    private Lazy`1<IRequestExecutionQueue`1<TRequestContext>> _queue;
    private Lazy`1<ILspServices> _lspServices;
    [CompilerGeneratedAttribute]
private bool <IsInitialized>k__BackingField;
    private object _lifeCycleLock;
    [NullableAttribute("2")]
private Task _shutdownRequestTask;
    [NullableAttribute("2")]
private Task _exitNotificationTask;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private TaskCompletionSource`1<object> _serverExitedSource;
    public bool IsInitialized { get; private set; }
    protected AbstractHandlerProvider HandlerProvider { get; }
    protected AbstractLanguageServer`1(JsonRpc jsonRpc, ILspLogger logger);
    [CompilerGeneratedAttribute]
public bool get_IsInitialized();
    [CompilerGeneratedAttribute]
private void set_IsInitialized(bool value);
    public void Initialize();
    protected abstract virtual ILspServices ConstructLspServices();
    [ObsoleteAttribute("Use HandlerProvider property instead.", "False")]
protected virtual IHandlerProvider GetHandlerProvider();
    protected virtual AbstractHandlerProvider get_HandlerProvider();
    public ILspServices GetLspServices();
    protected virtual void SetupRequestDispatcher(IHandlerProvider handlerProvider);
    [JsonRpcMethodAttribute("shutdown")]
public Task HandleShutdownRequestAsync(CancellationToken _);
    [JsonRpcMethodAttribute("exit")]
public Task HandleExitNotificationAsync(CancellationToken _);
    public virtual void OnInitialized();
    protected virtual IRequestExecutionQueue`1<TRequestContext> ConstructRequestExecutionQueue();
    protected IRequestExecutionQueue`1<TRequestContext> GetRequestExecutionQueue();
    public Task WaitForExitAsync();
    public Task ShutdownAsync(string message);
    public Task ExitAsync();
    private ValueTask ShutdownRequestExecutionQueueAsync();
    [AsyncStateMachineAttribute("Microsoft.CommonLanguageServerProtocol.Framework.AbstractLanguageServer`1/<JsonRpc_Disconnected>d__30")]
private void JsonRpc_Disconnected(object sender, JsonRpcDisconnectedEventArgs e);
    [NullableContextAttribute("0")]
internal TestAccessor<TRequestContext> GetTestAccessor();
    [CompilerGeneratedAttribute]
private ILspServices <.ctor>b__12_0();
    [CompilerGeneratedAttribute]
private IRequestExecutionQueue`1<TRequestContext> <.ctor>b__12_1();
    [AsyncStateMachineAttribute("Microsoft.CommonLanguageServerProtocol.Framework.AbstractLanguageServer`1/<<ShutdownAsync>g__Shutdown_NoLockAsync|27_0>d")]
[CompilerGeneratedAttribute]
private Task <ShutdownAsync>g__Shutdown_NoLockAsync|27_0(string message);
    [AsyncStateMachineAttribute("Microsoft.CommonLanguageServerProtocol.Framework.AbstractLanguageServer`1/<<ExitAsync>g__Exit_NoLockAsync|28_0>d")]
[CompilerGeneratedAttribute]
private Task <ExitAsync>g__Exit_NoLockAsync|28_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.CommonLanguageServerProtocol.Framework.AbstractLspLogger : object {
    public abstract virtual void LogDebug(string message, Object[] params);
    public abstract virtual void LogStartContext(string message, Object[] params);
    public abstract virtual void LogEndContext(string message, Object[] params);
    public abstract virtual void LogInformation(string message, Object[] params);
    public abstract virtual void LogWarning(string message, Object[] params);
    public abstract virtual void LogError(string message, Object[] params);
    public abstract virtual void LogException(Exception exception, string message, Object[] params);
}
public abstract class Microsoft.CommonLanguageServerProtocol.Framework.AbstractRequestContextFactory`1 : object {
    [NullableContextAttribute("1")]
public abstract virtual Task`1<TRequestContext> CreateRequestContextAsync(IQueueItem`1<TRequestContext> queueItem, IMethodHandler methodHandler, TRequestParam requestParam, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.CommonLanguageServerProtocol.Framework.AbstractRequestScope : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    protected AbstractRequestScope(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    public abstract virtual void RecordCancellation();
    public abstract virtual void RecordException(Exception exception);
    public abstract virtual void RecordWarning(string message);
    public abstract virtual void RecordExecutionStart();
    public abstract virtual void Dispose();
}
public abstract class Microsoft.CommonLanguageServerProtocol.Framework.AbstractTelemetryService : object {
    [NullableContextAttribute("1")]
public abstract virtual AbstractRequestScope CreateRequestScope(string lspMethodName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CommonLanguageServerProtocol.Framework.HandlerProvider : AbstractHandlerProvider {
    private ILspServices _lspServices;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ImmutableDictionary`2<RequestHandlerMetadata, Lazy`1<IMethodHandler>> _requestHandlers;
    private static IReadOnlyList`1<string> RequiredMethods;
    public HandlerProvider(ILspServices lspServices);
    private static HandlerProvider();
    public sealed virtual IMethodHandler GetMethodHandler(string method, Type requestType, Type responseType);
    public virtual IMethodHandler GetMethodHandler(string method, Type requestType, Type responseType, string language);
    public virtual ImmutableArray`1<RequestHandlerMetadata> GetRegisteredMethods();
    private ImmutableDictionary`2<RequestHandlerMetadata, Lazy`1<IMethodHandler>> GetRequestHandlers();
    private static ImmutableDictionary`2<RequestHandlerMetadata, Lazy`1<IMethodHandler>> CreateMethodToHandlerMap(ILspServices lspServices);
    private static List`1<HandlerTypes> ConvertHandlerTypeToRequestResponseTypes(Type handlerType);
    [CompilerGeneratedAttribute]
internal static void <CreateMethodToHandlerMap>g__CheckForDuplicates|7_0(string methodName, string language, HashSet`1<ValueTuple`2<string, string>> existingMethods);
    [CompilerGeneratedAttribute]
internal static ValueTuple`2<string, IEnumerable`1<string>> <CreateMethodToHandlerMap>g__GetRequestHandlerMethod|7_1(Type handlerType, Type requestType, Type contextType, Type responseType);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal static LanguageServerEndpointAttribute <CreateMethodToHandlerMap>g__GetMethodAttributeFromHandlerMethod|7_6(Type handlerType, Type requestType, Type contextType, Type responseType);
    [CompilerGeneratedAttribute]
internal static bool <CreateMethodToHandlerMap>g__MethodInfoMatches|7_8(MethodInfo methodInfo, <>c__DisplayClass7_3& );
    [CompilerGeneratedAttribute]
internal static bool <CreateMethodToHandlerMap>g__TypesMatch|7_9(MethodInfo methodInfo, Type[] types);
    [CompilerGeneratedAttribute]
internal static LanguageServerEndpointAttribute <CreateMethodToHandlerMap>g__GetMethodAttributeFromClassOrInterface|7_7(Type type);
    [CompilerGeneratedAttribute]
internal static void <CreateMethodToHandlerMap>g__VerifyHandlers|7_2(IEnumerable`1<RequestHandlerMetadata> requestHandlerKeys);
}
[LanguageServerEndpointAttribute("initialized", "default", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.CommonLanguageServerProtocol.Framework.Handlers.InitializedHandler`2 : object {
    private bool HasBeenInitialized;
    public bool MutatesSolutionState { get; }
    public sealed virtual bool get_MutatesSolutionState();
    [NullableContextAttribute("1")]
public sealed virtual Task HandleNotificationAsync(TRequest request, TRequestContext requestContext, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[LanguageServerEndpointAttribute("initialize", "default", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.CommonLanguageServerProtocol.Framework.Handlers.InitializeHandler`3 : object {
    private IInitializeManager`2<TRequest, TResponse> _capabilitiesManager;
    public bool MutatesSolutionState { get; }
    public InitializeHandler`3(IInitializeManager`2<TRequest, TResponse> capabilitiesManager);
    public sealed virtual bool get_MutatesSolutionState();
    public sealed virtual Task`1<TResponse> HandleRequestAsync(TRequest request, TRequestContext context, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface Microsoft.CommonLanguageServerProtocol.Framework.IHandlerProvider {
    public abstract virtual ImmutableArray`1<RequestHandlerMetadata> GetRegisteredMethods();
    public abstract virtual IMethodHandler GetMethodHandler(string method, Type requestType, Type responseType);
}
[NullableContextAttribute("1")]
public interface Microsoft.CommonLanguageServerProtocol.Framework.IInitializeManager`2 {
    public abstract virtual TResponse GetInitializeResult();
    public abstract virtual void SetInitializeParams(TRequest request);
    public abstract virtual TRequest GetInitializeParams();
}
[NullableContextAttribute("1")]
public interface Microsoft.CommonLanguageServerProtocol.Framework.ILifeCycleManager {
    public abstract virtual Task ExitAsync();
    public abstract virtual Task ShutdownAsync(string message);
}
[NullableContextAttribute("1")]
public interface Microsoft.CommonLanguageServerProtocol.Framework.ILspLogger {
    public abstract virtual void LogStartContext(string message, Object[] params);
    public abstract virtual void LogEndContext(string message, Object[] params);
    public abstract virtual void LogInformation(string message, Object[] params);
    public abstract virtual void LogWarning(string message, Object[] params);
    public abstract virtual void LogError(string message, Object[] params);
    public abstract virtual void LogException(Exception exception, string message, Object[] params);
}
[NullableContextAttribute("1")]
public interface Microsoft.CommonLanguageServerProtocol.Framework.ILspServices {
    public abstract virtual T GetRequiredService();
    public abstract virtual object TryGetService(Type type);
    public abstract virtual IEnumerable`1<T> GetRequiredServices();
    public abstract virtual ImmutableArray`1<Type> GetRegisteredServices();
    public abstract virtual bool SupportsGetRegisteredServices();
}
public interface Microsoft.CommonLanguageServerProtocol.Framework.IMethodHandler {
    public bool MutatesSolutionState { get; }
    public abstract virtual bool get_MutatesSolutionState();
}
public interface Microsoft.CommonLanguageServerProtocol.Framework.INotificationHandler`1 {
    [NullableContextAttribute("1")]
public abstract virtual Task HandleNotificationAsync(TRequestContext requestContext, CancellationToken cancellationToken);
}
[NullableContextAttribute("2")]
public interface Microsoft.CommonLanguageServerProtocol.Framework.INotificationHandler`2 {
    [NullableContextAttribute("1")]
public abstract virtual Task HandleNotificationAsync(TRequest request, TRequestContext requestContext, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface Microsoft.CommonLanguageServerProtocol.Framework.IQueueItem`1 {
    public ILspServices LspServices { get; }
    public string MethodName { get; }
    public string Language { get; }
    [NullableAttribute("2")]
public Type RequestType { get; }
    [NullableAttribute("2")]
public Type ResponseType { get; }
    public abstract virtual Task StartRequestAsync(TRequestContext requestContext, IMethodHandler handler, CancellationToken cancellationToken);
    public abstract virtual Task`1<TRequestContext> CreateRequestContextAsync(IMethodHandler handler, CancellationToken cancellationToken);
    public abstract virtual ILspServices get_LspServices();
    public abstract virtual string get_MethodName();
    public abstract virtual string get_Language();
    [NullableContextAttribute("2")]
public abstract virtual Type get_RequestType();
    [NullableContextAttribute("2")]
public abstract virtual Type get_ResponseType();
}
[NullableContextAttribute("1")]
[ObsoleteAttribute("Use AbstractRequestContextFactory instead.", "False")]
public interface Microsoft.CommonLanguageServerProtocol.Framework.IRequestContextFactory`1 {
    public abstract virtual Task`1<TRequestContext> CreateRequestContextAsync(IQueueItem`1<TRequestContext> queueItem, TRequestParam requestParam, CancellationToken cancellationToken);
}
public interface Microsoft.CommonLanguageServerProtocol.Framework.IRequestExecutionQueue`1 {
    [NullableContextAttribute("1")]
public abstract virtual Task`1<TResponse> ExecuteAsync(TRequest request, string methodName, ILspServices lspServices, CancellationToken cancellationToken);
    public abstract virtual void Start();
}
[NullableContextAttribute("2")]
public interface Microsoft.CommonLanguageServerProtocol.Framework.IRequestHandler`2 {
    [NullableContextAttribute("1")]
public abstract virtual Task`1<TResponse> HandleRequestAsync(TRequestContext context, CancellationToken cancellationToken);
}
[NullableContextAttribute("2")]
public interface Microsoft.CommonLanguageServerProtocol.Framework.IRequestHandler`3 {
    [NullableContextAttribute("1")]
public abstract virtual Task`1<TResponse> HandleRequestAsync(TRequest request, TRequestContext context, CancellationToken cancellationToken);
}
public interface Microsoft.CommonLanguageServerProtocol.Framework.ITextDocumentIdentifierHandler {
}
[NullableContextAttribute("2")]
public interface Microsoft.CommonLanguageServerProtocol.Framework.ITextDocumentIdentifierHandler`2 {
    [NullableContextAttribute("1")]
public abstract virtual TTextDocumentIdentifier GetTextDocumentIdentifier(TRequest request);
}
public class Microsoft.CommonLanguageServerProtocol.Framework.LanguageServerConstants : object {
    [NullableAttribute("1")]
public static string DefaultLanguageName;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("1092")]
public class Microsoft.CommonLanguageServerProtocol.Framework.LanguageServerEndpointAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Languages>k__BackingField;
    public string Method { get; }
    public String[] Languages { get; }
    [ObsoleteAttribute("Use the constructor that takes a language instead.", "False")]
public LanguageServerEndpointAttribute(string method);
    public LanguageServerEndpointAttribute(string method, string language, String[] additionalLanguages);
    [CompilerGeneratedAttribute]
public string get_Method();
    [CompilerGeneratedAttribute]
public String[] get_Languages();
}
internal class Microsoft.CommonLanguageServerProtocol.Framework.NoValue : object {
    [NullableAttribute("1")]
public static NoValue Instance;
    private static NoValue();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CommonLanguageServerProtocol.Framework.QueueItem`3 : object {
    private TRequest _request;
    private ILspLogger _logger;
    [NullableAttribute("2")]
private AbstractRequestScope _requestTelemetryScope;
    private TaskCompletionSource`1<TResponse> _completionSource;
    [CompilerGeneratedAttribute]
private ILspServices <LspServices>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MethodName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Language>k__BackingField;
    public ILspServices LspServices { get; }
    public string MethodName { get; }
    public string Language { get; }
    [NullableAttribute("2")]
public Type RequestType { get; }
    [NullableAttribute("2")]
public Type ResponseType { get; }
    private QueueItem`3(string methodName, string language, TRequest request, ILspServices lspServices, ILspLogger logger, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
public sealed virtual ILspServices get_LspServices();
    [CompilerGeneratedAttribute]
public sealed virtual string get_MethodName();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Language();
    [NullableContextAttribute("2")]
public sealed virtual Type get_RequestType();
    [NullableContextAttribute("2")]
public sealed virtual Type get_ResponseType();
    public static ValueTuple`2<IQueueItem`1<TRequestContext>, Task`1<TResponse>> Create(string methodName, string language, TRequest request, ILspServices lspServices, ILspLogger logger, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.CommonLanguageServerProtocol.Framework.QueueItem`3/<CreateRequestContextAsync>d__19")]
public sealed virtual Task`1<TRequestContext> CreateRequestContextAsync(IMethodHandler handler, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.CommonLanguageServerProtocol.Framework.QueueItem`3/<StartRequestAsync>d__20")]
public sealed virtual Task StartRequestAsync(TRequestContext context, IMethodHandler handler, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.CommonLanguageServerProtocol.Framework.RequestExecutionQueue`1 : object {
    protected ILspLogger _logger;
    protected AbstractHandlerProvider _handlerProvider;
    private AbstractLanguageServer`1<TRequestContext> _languageServer;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
protected AsyncQueue`1<ValueTuple`3<IQueueItem`1<TRequestContext>, Guid, CancellationToken>> _queue;
    private CancellationTokenSource _cancelSource;
    [NullableAttribute("2")]
protected Task _queueProcessingTask;
    public CancellationToken CancellationToken { get; }
    protected bool CancelInProgressWorkUponMutatingRequest { get; }
    [ObsoleteAttribute("Use constructor with AbstractHandlerProvider instead.", "False")]
public RequestExecutionQueue`1(AbstractLanguageServer`1<TRequestContext> languageServer, ILspLogger logger, IHandlerProvider handlerProvider);
    public RequestExecutionQueue`1(AbstractLanguageServer`1<TRequestContext> languageServer, ILspLogger logger, AbstractHandlerProvider handlerProvider);
    public CancellationToken get_CancellationToken();
    public sealed virtual void Start();
    protected virtual bool get_CancelInProgressWorkUponMutatingRequest();
    public virtual Task`1<TResponse> ExecuteAsync(TRequest request, string methodName, ILspServices lspServices, CancellationToken requestCancellationToken);
    internal ValueTuple`2<IQueueItem`1<TRequestContext>, Task`1<TResponse>> CreateQueueItem(string methodName, TRequest request, ILspServices lspServices, CancellationToken cancellationToken);
    protected virtual string GetLanguageForRequest(string methodName, TRequest request);
    [AsyncStateMachineAttribute("Microsoft.CommonLanguageServerProtocol.Framework.RequestExecutionQueue`1/<ProcessQueueAsync>d__16")]
private Task ProcessQueueAsync();
    protected virtual IMethodHandler GetHandlerForRequest(IQueueItem`1<TRequestContext> work);
    public virtual Task WrapStartRequestTaskAsync(Task nonMutatingRequestTask, bool rethrowExceptions);
    public sealed virtual ValueTask DisposeAsync();
    [NullableContextAttribute("0")]
internal TestAccessor<TRequestContext> GetTestAccessor();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.CommonLanguageServerProtocol.Framework.RequestHandlerMetadata : object {
    [CompilerGeneratedAttribute]
private string <MethodName>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Type <RequestType>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Type <ResponseType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Language>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public string MethodName { get; public set; }
    [NullableAttribute("2")]
public Type RequestType { get; public set; }
    [NullableAttribute("2")]
public Type ResponseType { get; public set; }
    public string Language { get; public set; }
    public RequestHandlerMetadata(string MethodName, Type RequestType, Type ResponseType, string Language);
    [CompilerGeneratedAttribute]
protected RequestHandlerMetadata(RequestHandlerMetadata original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public string get_MethodName();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_MethodName(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Type get_RequestType();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_RequestType(Type value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Type get_ResponseType();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ResponseType(Type value);
    [CompilerGeneratedAttribute]
public string get_Language();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Language(string value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(RequestHandlerMetadata left, RequestHandlerMetadata right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(RequestHandlerMetadata left, RequestHandlerMetadata right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(RequestHandlerMetadata other);
    [CompilerGeneratedAttribute]
public virtual RequestHandlerMetadata <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(String& MethodName, Type& RequestType, Type& ResponseType, String& Language);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.CommonLanguageServerProtocol.Framework.RequestShutdownEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    public string Message { get; }
    public RequestShutdownEventArgs(string message);
    [CompilerGeneratedAttribute]
public string get_Message();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CommonLanguageServerProtocol.Framework.WrappedHandlerProvider : AbstractHandlerProvider {
    private IHandlerProvider _handlerProvider;
    public WrappedHandlerProvider(IHandlerProvider handlerProvider);
    public virtual IMethodHandler GetMethodHandler(string method, Type requestType, Type responseType, string language);
    public virtual ImmutableArray`1<RequestHandlerMetadata> GetRegisteredMethods();
}
[EditorBrowsableAttribute("1")]
internal static class System.Runtime.CompilerServices.IsExternalInit : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
