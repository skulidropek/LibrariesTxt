public class System.ComponentModel.Design.ActiveDesignSurfaceChangedEventArgs : EventArgs {
    private DesignSurface _oldSurface;
    private DesignSurface _newSurface;
    public DesignSurface OldSurface { get; }
    public DesignSurface NewSurface { get; }
    public ActiveDesignSurfaceChangedEventArgs(DesignSurface oldSurface, DesignSurface newSurface);
    public DesignSurface get_OldSurface();
    public DesignSurface get_NewSurface();
}
public class System.ComponentModel.Design.ActiveDesignSurfaceChangedEventHandler : MulticastDelegate {
    public ActiveDesignSurfaceChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ActiveDesignSurfaceChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ActiveDesignSurfaceChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.ComponentModel.Design.ArrayEditor : CollectionEditor {
    public ArrayEditor(Type type);
    protected virtual Type CreateCollectionItemType();
    protected virtual Object[] GetItems(object editValue);
    protected virtual object SetItems(object editValue, Object[] value);
}
public class System.ComponentModel.Design.BinaryEditor : UITypeEditor {
    [MonoTODOAttribute]
public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
}
[DesignTimeVisibleAttribute("False")]
[ToolboxItemAttribute("False")]
public class System.ComponentModel.Design.ByteViewer : TableLayoutPanel {
    [MonoTODOAttribute]
public virtual DisplayMode GetDisplayMode();
    [MonoTODOAttribute]
public virtual void SaveToFile(string path);
    [MonoTODOAttribute]
public virtual Byte[] GetBytes();
    [MonoTODOAttribute]
public virtual void SetBytes(Byte[] bytes);
    [MonoTODOAttribute]
public virtual void SetDisplayMode(DisplayMode mode);
    [MonoTODOAttribute]
public virtual void SetFile(string path);
    [MonoTODOAttribute]
public virtual void SetStartLine(int line);
    [MonoTODOAttribute]
protected virtual void OnKeyDown(KeyEventArgs e);
    [MonoTODOAttribute]
protected virtual void OnPaint(PaintEventArgs e);
    [MonoTODOAttribute]
protected virtual void OnLayout(LayoutEventArgs e);
    [MonoTODOAttribute]
protected virtual void ScrollChanged(object source, EventArgs e);
}
public class System.ComponentModel.Design.CollectionEditor : UITypeEditor {
    private Type type;
    private Type collectionItemType;
    private Type[] newItemTypes;
    private ITypeDescriptorContext context;
    private IServiceProvider provider;
    private IWindowsFormsEditorService editorService;
    protected Type CollectionItemType { get; }
    protected Type CollectionType { get; }
    protected ITypeDescriptorContext Context { get; }
    protected string HelpTopic { get; }
    protected Type[] NewItemTypes { get; }
    public CollectionEditor(Type type);
    protected Type get_CollectionItemType();
    protected Type get_CollectionType();
    protected ITypeDescriptorContext get_Context();
    protected virtual string get_HelpTopic();
    protected Type[] get_NewItemTypes();
    protected virtual void CancelChanges();
    protected virtual bool CanRemoveInstance(object value);
    protected virtual bool CanSelectMultipleInstances();
    protected virtual CollectionForm CreateCollectionForm();
    protected virtual Type CreateCollectionItemType();
    protected virtual object CreateInstance(Type itemType);
    protected virtual Type[] CreateNewItemTypes();
    protected virtual void DestroyInstance(object instance);
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    protected virtual string GetDisplayText(object value);
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
    protected virtual Object[] GetItems(object editValue);
    protected virtual IList GetObjectsFromInstance(object instance);
    protected object GetService(Type serviceType);
    protected virtual object SetItems(object editValue, Object[] value);
    protected virtual void ShowHelp();
}
public enum System.ComponentModel.Design.ComponentActionsType : Enum {
    public int value__;
    public static ComponentActionsType All;
    public static ComponentActionsType Component;
    public static ComponentActionsType Service;
}
public class System.ComponentModel.Design.ComponentDesigner : object {
    private IComponent _component;
    private DesignerVerbCollection _verbs;
    private ShadowPropertyCollection _shadowPropertyCollection;
    private DesignerActionListCollection _designerActionList;
    public ICollection AssociatedComponents { get; }
    public IComponent Component { get; }
    public DesignerVerbCollection Verbs { get; }
    protected InheritanceAttribute InheritanceAttribute { get; }
    protected bool Inherited { get; }
    protected ShadowPropertyCollection ShadowProperties { get; }
    public DesignerActionListCollection ActionLists { get; }
    protected IComponent ParentComponent { get; }
    private ICollection System.ComponentModel.Design.ITreeDesigner.Children { get; }
    private IDesigner System.ComponentModel.Design.ITreeDesigner.Parent { get; }
    public virtual ICollection get_AssociatedComponents();
    public sealed virtual IComponent get_Component();
    public virtual DesignerVerbCollection get_Verbs();
    protected virtual InheritanceAttribute get_InheritanceAttribute();
    protected bool get_Inherited();
    protected ShadowPropertyCollection get_ShadowProperties();
    public virtual DesignerActionListCollection get_ActionLists();
    protected virtual IComponent get_ParentComponent();
    public virtual void InitializeNewComponent(IDictionary defaultValues);
    public virtual void InitializeExistingComponent(IDictionary defaultValues);
    public virtual void Initialize(IComponent component);
    [ObsoleteAttribute("This method has been deprecated. Use InitializeExistingComponent instead.")]
public virtual void InitializeNonDefault();
    public virtual void DoDefaultAction();
    [ObsoleteAttribute("This method has been deprecated. Use InitializeNewComponent instead.")]
public virtual void OnSetComponentDefaults();
    protected InheritanceAttribute InvokeGetInheritanceAttribute(ComponentDesigner toInvoke);
    protected virtual void PostFilterAttributes(IDictionary attributes);
    protected virtual void PostFilterEvents(IDictionary events);
    protected virtual void PostFilterProperties(IDictionary properties);
    protected virtual void PreFilterAttributes(IDictionary attributes);
    protected virtual void PreFilterEvents(IDictionary events);
    protected virtual void PreFilterProperties(IDictionary properties);
    protected void RaiseComponentChanged(MemberDescriptor member, object oldValue, object newValue);
    protected void RaiseComponentChanging(MemberDescriptor member);
    private sealed virtual override void System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes(IDictionary attributes);
    private sealed virtual override void System.ComponentModel.Design.IDesignerFilter.PostFilterEvents(IDictionary events);
    private sealed virtual override void System.ComponentModel.Design.IDesignerFilter.PostFilterProperties(IDictionary properties);
    private sealed virtual override void System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes(IDictionary attributes);
    private sealed virtual override void System.ComponentModel.Design.IDesignerFilter.PreFilterEvents(IDictionary events);
    private sealed virtual override void System.ComponentModel.Design.IDesignerFilter.PreFilterProperties(IDictionary properties);
    private sealed virtual override ICollection System.ComponentModel.Design.ITreeDesigner.get_Children();
    private sealed virtual override IDesigner System.ComponentModel.Design.ITreeDesigner.get_Parent();
    protected virtual object GetService(Type serviceType);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual override void Finalize();
}
public abstract class System.ComponentModel.Design.Data.DataSourceDescriptor : object {
    public Bitmap Image { get; }
    public bool IsDesignable { get; }
    public string Name { get; }
    public string TypeName { get; }
    public abstract virtual Bitmap get_Image();
    public abstract virtual bool get_IsDesignable();
    public abstract virtual string get_Name();
    public abstract virtual string get_TypeName();
}
[DefaultMemberAttribute("Item")]
public class System.ComponentModel.Design.Data.DataSourceDescriptorCollection : CollectionBase {
    [MonoTODOAttribute]
public DataSourceDescriptor Item { get; public set; }
    public DataSourceDescriptor get_Item(int index);
    public void set_Item(int index, DataSourceDescriptor value);
    [MonoTODOAttribute]
public int Add(DataSourceDescriptor value);
    [MonoTODOAttribute]
public bool Contains(DataSourceDescriptor value);
    [MonoTODOAttribute]
public void CopyTo(DataSourceDescriptor[] array, int index);
    [MonoTODOAttribute]
public int IndexOf(DataSourceDescriptor value);
    [MonoTODOAttribute]
public void Insert(int index, DataSourceDescriptor value);
    [MonoTODOAttribute]
public void Remove(DataSourceDescriptor value);
}
public abstract class System.ComponentModel.Design.Data.DataSourceGroup : object {
    public DataSourceDescriptorCollection DataSources { get; }
    public Bitmap Image { get; }
    public bool IsDefault { get; }
    public string Name { get; }
    public abstract virtual DataSourceDescriptorCollection get_DataSources();
    public abstract virtual Bitmap get_Image();
    public abstract virtual bool get_IsDefault();
    public abstract virtual string get_Name();
}
[DefaultMemberAttribute("Item")]
public class System.ComponentModel.Design.Data.DataSourceGroupCollection : CollectionBase {
    [MonoTODOAttribute]
public DataSourceGroup Item { get; public set; }
    public DataSourceGroup get_Item(int index);
    public void set_Item(int index, DataSourceGroup value);
    [MonoTODOAttribute]
public int Add(DataSourceGroup value);
    [MonoTODOAttribute]
public bool Contains(DataSourceGroup value);
    [MonoTODOAttribute]
public void CopyTo(DataSourceGroup[] array, int index);
    [MonoTODOAttribute]
public int IndexOf(DataSourceGroup value);
    [MonoTODOAttribute]
public void Insert(int index, DataSourceGroup value);
    [MonoTODOAttribute]
public void Remove(DataSourceGroup value);
}
[GuidAttribute("ABE5C1F0-C96E-40c4-A22D-4A5CEC899BDC")]
public abstract class System.ComponentModel.Design.Data.DataSourceProviderService : object {
    public bool SupportsAddNewDataSource { get; }
    public bool SupportsConfigureDataSource { get; }
    public abstract virtual bool get_SupportsAddNewDataSource();
    public abstract virtual bool get_SupportsConfigureDataSource();
    public abstract virtual object AddDataSourceInstance(IDesignerHost host, DataSourceDescriptor dataSourceDescriptor);
    public abstract virtual DataSourceGroupCollection GetDataSources();
    public abstract virtual DataSourceGroup InvokeAddNewDataSource(IWin32Window parentWindow, FormStartPosition startPosition);
    public abstract virtual bool InvokeConfigureDataSource(IWin32Window parentWindow, FormStartPosition startPosition, DataSourceDescriptor dataSourceDescriptor);
    public abstract virtual void NotifyDataSourceComponentAdded(object dsc);
}
public class System.ComponentModel.Design.Data.DesignerDataColumn : object {
    private string name;
    private DbType data_type;
    private object default_value;
    private bool identity;
    private bool nullable;
    private bool primary_key;
    private int precision;
    private int scale;
    private int length;
    public string Name { get; }
    public DbType DataType { get; }
    public object DefaultValue { get; }
    public bool Identity { get; }
    public bool Nullable { get; }
    public bool PrimaryKey { get; }
    public int Precision { get; }
    public int Scale { get; }
    public int Length { get; }
    [MonoTODOAttribute]
public DesignerDataColumn(string name, DbType dataType);
    [MonoTODOAttribute]
public DesignerDataColumn(string name, DbType dataType, object defaultValue);
    [MonoTODOAttribute]
public DesignerDataColumn(string name, DbType dataType, object defaultValue, bool identity, bool nullable, bool primaryKey, int precision, int scale, int length);
    public string get_Name();
    public DbType get_DataType();
    public object get_DefaultValue();
    public bool get_Identity();
    public bool get_Nullable();
    public bool get_PrimaryKey();
    public int get_Precision();
    public int get_Scale();
    public int get_Length();
}
public class System.ComponentModel.Design.Data.DesignerDataConnection : object {
    private string name;
    private string provider_name;
    private string connection_string;
    private bool is_configured;
    [MonoTODOAttribute]
public string Name { get; }
    [MonoTODOAttribute]
public string ProviderName { get; }
    [MonoTODOAttribute]
public string ConnectionString { get; }
    [MonoTODOAttribute]
public bool IsConfigured { get; }
    [MonoTODOAttribute]
public DesignerDataConnection(string name, string providerName, string connectionString);
    [MonoTODOAttribute]
public DesignerDataConnection(string name, string providerName, string connectionString, bool isConfigured);
    public string get_Name();
    public string get_ProviderName();
    public string get_ConnectionString();
    public bool get_IsConfigured();
}
public class System.ComponentModel.Design.Data.DesignerDataParameter : object {
    private string name;
    private DbType type;
    private ParameterDirection direction;
    public DbType DataType { get; }
    public string Name { get; }
    public ParameterDirection Direction { get; }
    public DesignerDataParameter(string name, DbType dataType, ParameterDirection direction);
    public DbType get_DataType();
    public string get_Name();
    public ParameterDirection get_Direction();
}
public class System.ComponentModel.Design.Data.DesignerDataRelationship : object {
    private string name;
    private ICollection parent_columns;
    private ICollection child_columns;
    private DesignerDataTable child_table;
    public string Name { get; }
    public ICollection ParentColumns { get; }
    public DesignerDataTable ChildTable { get; }
    public ICollection ChildColumns { get; }
    public DesignerDataRelationship(string name, ICollection parentColumns, DesignerDataTable childTable, ICollection childColumns);
    public string get_Name();
    public ICollection get_ParentColumns();
    public DesignerDataTable get_ChildTable();
    public ICollection get_ChildColumns();
}
public class System.ComponentModel.Design.Data.DesignerDataSchemaClass : object {
    public static DesignerDataSchemaClass StoredProcedures;
    public static DesignerDataSchemaClass Tables;
    public static DesignerDataSchemaClass Views;
    private static DesignerDataSchemaClass();
}
public abstract class System.ComponentModel.Design.Data.DesignerDataStoredProcedure : object {
    private string name;
    private string owner;
    public string Name { get; }
    public string Owner { get; }
    [MonoTODOAttribute]
public ICollection Parameters { get; }
    [MonoTODOAttribute]
protected DesignerDataStoredProcedure(string name);
    [MonoTODOAttribute]
protected DesignerDataStoredProcedure(string name, string owner);
    public string get_Name();
    public string get_Owner();
    public ICollection get_Parameters();
    protected abstract virtual ICollection CreateParameters();
}
public abstract class System.ComponentModel.Design.Data.DesignerDataTable : DesignerDataTableBase {
    [MonoTODOAttribute]
public ICollection Relationships { get; }
    protected DesignerDataTable(string name);
    protected DesignerDataTable(string name, string owner);
    protected abstract virtual ICollection CreateRelationships();
    public ICollection get_Relationships();
}
public abstract class System.ComponentModel.Design.Data.DesignerDataTableBase : object {
    private string name;
    private string owner;
    public string Name { get; }
    public string Owner { get; }
    [MonoTODOAttribute]
public ICollection Columns { get; }
    protected DesignerDataTableBase(string name);
    protected DesignerDataTableBase(string name, string owner);
    public string get_Name();
    public string get_Owner();
    public ICollection get_Columns();
    protected abstract virtual ICollection CreateColumns();
}
public abstract class System.ComponentModel.Design.Data.DesignerDataView : DesignerDataTableBase {
    protected DesignerDataView(string name);
    protected DesignerDataView(string name, string owner);
}
public interface System.ComponentModel.Design.Data.IDataEnvironment {
    public ICollection Connections { get; }
    public abstract virtual ICollection get_Connections();
    public abstract virtual DesignerDataConnection BuildConnection(IWin32Window owner, DesignerDataConnection initialConnection);
    public abstract virtual string BuildQuery(IWin32Window owner, DesignerDataConnection connection, QueryBuilderMode mode, string initialQueryText);
    public abstract virtual DesignerDataConnection ConfigureConnection(IWin32Window owner, DesignerDataConnection connection, string name);
    public abstract virtual CodeExpression GetCodeExpression(DesignerDataConnection connection);
    public abstract virtual IDesignerDataSchema GetConnectionSchema(DesignerDataConnection connection);
    public abstract virtual DbConnection GetDesignTimeConnection(DesignerDataConnection connection);
}
public interface System.ComponentModel.Design.Data.IDesignerDataSchema {
    public abstract virtual ICollection GetSchemaItems(DesignerDataSchemaClass schemaClass);
    public abstract virtual bool SupportsSchemaClass(DesignerDataSchemaClass schemaClass);
}
public enum System.ComponentModel.Design.Data.QueryBuilderMode : Enum {
    public int value__;
    public static QueryBuilderMode Select;
    public static QueryBuilderMode Update;
    public static QueryBuilderMode Insert;
    public static QueryBuilderMode Delete;
}
public class System.ComponentModel.Design.DateTimeEditor : UITypeEditor {
    private IWindowsFormsEditorService editorService;
    private EditorControl control;
    private DateTime editContent;
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    private void control_DateSelected(object sender, DateRangeEventArgs e);
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
}
public class System.ComponentModel.Design.DesignerActionHeaderItem : DesignerActionTextItem {
    public DesignerActionHeaderItem(string displayName);
    public DesignerActionHeaderItem(string displayName, string category);
}
public abstract class System.ComponentModel.Design.DesignerActionItem : object {
    private bool allow_associate;
    private string category;
    private string description;
    private string display_name;
    private IDictionary properties;
    public bool AllowAssociate { get; public set; }
    public string Category { get; }
    public string Description { get; }
    public string DisplayName { get; }
    public IDictionary Properties { get; }
    public DesignerActionItem(string displayName, string category, string description);
    public bool get_AllowAssociate();
    public void set_AllowAssociate(bool value);
    public virtual string get_Category();
    public virtual string get_Description();
    public virtual string get_DisplayName();
    public IDictionary get_Properties();
}
[DefaultMemberAttribute("Item")]
public class System.ComponentModel.Design.DesignerActionItemCollection : CollectionBase {
    public DesignerActionItem Item { get; public set; }
    public DesignerActionItem get_Item(int index);
    public void set_Item(int index, DesignerActionItem value);
    public int Add(DesignerActionItem value);
    public bool Contains(DesignerActionItem value);
    public void CopyTo(DesignerActionItem[] array, int index);
    public int IndexOf(DesignerActionItem value);
    public void Insert(int index, DesignerActionItem value);
    public void Remove(DesignerActionItem value);
}
public class System.ComponentModel.Design.DesignerActionList : object {
    private IComponent component;
    private bool auto_show;
    private DesignerActionItemCollection action_items;
    public bool AutoShow { get; public set; }
    public IComponent Component { get; }
    public DesignerActionList(IComponent component);
    public virtual bool get_AutoShow();
    public virtual void set_AutoShow(bool value);
    public IComponent get_Component();
    public object GetService(Type serviceType);
    public virtual DesignerActionItemCollection GetSortedActionItems();
}
[DefaultMemberAttribute("Item")]
[ComVisibleAttribute("True")]
public class System.ComponentModel.Design.DesignerActionListCollection : CollectionBase {
    public DesignerActionList Item { get; public set; }
    public DesignerActionListCollection(DesignerActionList[] value);
    public DesignerActionList get_Item(int index);
    public void set_Item(int index, DesignerActionList value);
    public int Add(DesignerActionList value);
    public void AddRange(DesignerActionList[] value);
    public void AddRange(DesignerActionListCollection value);
    public bool Contains(DesignerActionList value);
    public void CopyTo(DesignerActionList[] array, int index);
    public int IndexOf(DesignerActionList value);
    public void Insert(int index, DesignerActionList value);
    public void Remove(DesignerActionList value);
    protected virtual void OnClear();
    protected virtual void OnInsert(int index, object value);
    protected virtual void OnRemove(int index, object value);
    protected virtual void OnSet(int index, object oldValue, object newValue);
    protected virtual void OnValidate(object value);
}
public class System.ComponentModel.Design.DesignerActionListsChangedEventArgs : EventArgs {
    private object related_object;
    private DesignerActionListsChangedType change_type;
    private DesignerActionListCollection action_lists;
    public DesignerActionListCollection ActionLists { get; }
    public DesignerActionListsChangedType ChangeType { get; }
    public object RelatedObject { get; }
    public DesignerActionListsChangedEventArgs(object relatedObject, DesignerActionListsChangedType changeType, DesignerActionListCollection actionLists);
    public DesignerActionListCollection get_ActionLists();
    public DesignerActionListsChangedType get_ChangeType();
    public object get_RelatedObject();
}
[ComVisibleAttribute("True")]
public class System.ComponentModel.Design.DesignerActionListsChangedEventHandler : MulticastDelegate {
    public DesignerActionListsChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DesignerActionListsChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DesignerActionListsChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ComVisibleAttribute("True")]
public enum System.ComponentModel.Design.DesignerActionListsChangedType : Enum {
    public int value__;
    public static DesignerActionListsChangedType ActionListsAdded;
    public static DesignerActionListsChangedType ActionListsRemoved;
}
public class System.ComponentModel.Design.DesignerActionMethodItem : DesignerActionItem {
    private string member_name;
    private bool designer_verb;
    private IComponent related_component;
    private DesignerActionList action_list;
    public bool IncludeAsDesignerVerb { get; }
    public string MemberName { get; }
    public IComponent RelatedComponent { get; public set; }
    public DesignerActionMethodItem(DesignerActionList actionList, string memberName, string displayName);
    public DesignerActionMethodItem(DesignerActionList actionList, string memberName, string displayName, bool includeAsDesignerVerb);
    public DesignerActionMethodItem(DesignerActionList actionList, string memberName, string displayName, string category);
    public DesignerActionMethodItem(DesignerActionList actionList, string memberName, string displayName, string category, bool includeAsDesignerVerb);
    public DesignerActionMethodItem(DesignerActionList actionList, string memberName, string displayName, string category, string description);
    public DesignerActionMethodItem(DesignerActionList actionList, string memberName, string displayName, string category, string description, bool includeAsDesignerVerb);
    public virtual bool get_IncludeAsDesignerVerb();
    public virtual string get_MemberName();
    public IComponent get_RelatedComponent();
    public void set_RelatedComponent(IComponent value);
    public virtual void Invoke();
}
public class System.ComponentModel.Design.DesignerActionPropertyItem : DesignerActionItem {
    private string member_name;
    private IComponent related_component;
    public string MemberName { get; }
    public IComponent RelatedComponent { get; public set; }
    public DesignerActionPropertyItem(string memberName, string displayName);
    public DesignerActionPropertyItem(string memberName, string displayName, string category);
    public DesignerActionPropertyItem(string memberName, string displayName, string category, string description);
    public string get_MemberName();
    public IComponent get_RelatedComponent();
    public void set_RelatedComponent(IComponent value);
}
public class System.ComponentModel.Design.DesignerActionService : object {
    [CompilerGeneratedAttribute]
private DesignerActionListsChangedEventHandler DesignerActionListsChanged;
    [MonoTODOAttribute]
public DesignerActionService(IServiceProvider serviceProvider);
    [CompilerGeneratedAttribute]
public void add_DesignerActionListsChanged(DesignerActionListsChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_DesignerActionListsChanged(DesignerActionListsChangedEventHandler value);
    [MonoTODOAttribute]
public void Add(IComponent comp, DesignerActionList actionList);
    [MonoTODOAttribute]
public void Add(IComponent comp, DesignerActionListCollection designerActionListCollection);
    [MonoTODOAttribute]
public void Clear();
    [MonoTODOAttribute]
public bool Contains(IComponent comp);
    public sealed virtual void Dispose();
    [MonoTODOAttribute]
protected virtual void Dispose(bool disposing);
    [MonoTODOAttribute]
public DesignerActionListCollection GetComponentActions(IComponent component);
    [MonoTODOAttribute]
public virtual DesignerActionListCollection GetComponentActions(IComponent component, ComponentActionsType type);
    [MonoTODOAttribute]
protected virtual void GetComponentDesignerActions(IComponent component, DesignerActionListCollection actionLists);
    [MonoTODOAttribute]
protected virtual void GetComponentServiceActions(IComponent component, DesignerActionListCollection actionLists);
    [MonoTODOAttribute]
public void Remove(DesignerActionList actionList);
    [MonoTODOAttribute]
public void Remove(IComponent comp);
    [MonoTODOAttribute]
public void Remove(IComponent comp, DesignerActionList actionList);
}
public class System.ComponentModel.Design.DesignerActionTextItem : DesignerActionItem {
    public DesignerActionTextItem(string displayName, string category);
}
public class System.ComponentModel.Design.DesignerActionUIService : object {
    [CompilerGeneratedAttribute]
private DesignerActionUIStateChangeEventHandler DesignerActionUIStateChange;
    [CompilerGeneratedAttribute]
public void add_DesignerActionUIStateChange(DesignerActionUIStateChangeEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_DesignerActionUIStateChange(DesignerActionUIStateChangeEventHandler value);
    [MonoTODOAttribute]
public sealed virtual void Dispose();
    [MonoTODOAttribute]
public void ShowUI(IComponent component);
    [MonoTODOAttribute]
public void HideUI(IComponent component);
    [MonoTODOAttribute]
public void Refresh(IComponent component);
    [MonoTODOAttribute]
public bool ShouldAutoShow(IComponent component);
}
public class System.ComponentModel.Design.DesignerActionUIStateChangeEventArgs : EventArgs {
    private object related_object;
    private DesignerActionUIStateChangeType change_type;
    public DesignerActionUIStateChangeType ChangeType { get; }
    public object RelatedObject { get; }
    public DesignerActionUIStateChangeEventArgs(object relatedObject, DesignerActionUIStateChangeType changeType);
    public DesignerActionUIStateChangeType get_ChangeType();
    public object get_RelatedObject();
}
public class System.ComponentModel.Design.DesignerActionUIStateChangeEventHandler : MulticastDelegate {
    public DesignerActionUIStateChangeEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DesignerActionUIStateChangeEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DesignerActionUIStateChangeEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.ComponentModel.Design.DesignerActionUIStateChangeType : Enum {
    public int value__;
    public static DesignerActionUIStateChangeType Show;
    public static DesignerActionUIStateChangeType Hide;
    public static DesignerActionUIStateChangeType Refresh;
}
public class System.ComponentModel.Design.DesignerCommandSet : object {
    private DesignerActionListCollection action_lists;
    private DesignerVerbCollection verbs;
    public DesignerActionListCollection ActionLists { get; }
    public DesignerVerbCollection Verbs { get; }
    public DesignerActionListCollection get_ActionLists();
    [MonoTODOAttribute]
public virtual ICollection GetCommands(string name);
    public DesignerVerbCollection get_Verbs();
}
internal class System.ComponentModel.Design.DesignerEventService : object {
    private ArrayList _designerList;
    private IDesignerHost _activeDesigner;
    [CompilerGeneratedAttribute]
private ActiveDesignerEventHandler ActiveDesignerChanged;
    [CompilerGeneratedAttribute]
private DesignerEventHandler DesignerCreated;
    [CompilerGeneratedAttribute]
private DesignerEventHandler DesignerDisposed;
    [CompilerGeneratedAttribute]
private EventHandler SelectionChanged;
    public IDesignerHost ActiveDesigner { get; internal set; }
    public DesignerCollection Designers { get; }
    public sealed virtual IDesignerHost get_ActiveDesigner();
    internal void set_ActiveDesigner(IDesignerHost value);
    public sealed virtual DesignerCollection get_Designers();
    [CompilerGeneratedAttribute]
public sealed virtual void add_ActiveDesignerChanged(ActiveDesignerEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ActiveDesignerChanged(ActiveDesignerEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_DesignerCreated(DesignerEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_DesignerCreated(DesignerEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_DesignerDisposed(DesignerEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_DesignerDisposed(DesignerEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_SelectionChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_SelectionChanged(EventHandler value);
    public void RaiseDesignerCreated(IDesignerHost host);
    public void RaiseDesignerDisposed(IDesignerHost host);
    public void RaiseSelectionChanged();
}
internal class System.ComponentModel.Design.DesignerHost : Container {
    private IServiceProvider _serviceProvider;
    private Hashtable _designers;
    private Stack _transactions;
    private IServiceContainer _serviceContainer;
    private bool _loading;
    private bool _unloading;
    private IComponent _rootComponent;
    [CompilerGeneratedAttribute]
private EventHandler Activated;
    [CompilerGeneratedAttribute]
private EventHandler Deactivated;
    [CompilerGeneratedAttribute]
private EventHandler LoadComplete;
    [CompilerGeneratedAttribute]
private DesignerTransactionCloseEventHandler TransactionClosed;
    [CompilerGeneratedAttribute]
private DesignerTransactionCloseEventHandler TransactionClosing;
    [CompilerGeneratedAttribute]
private EventHandler TransactionOpened;
    [CompilerGeneratedAttribute]
private EventHandler TransactionOpening;
    [CompilerGeneratedAttribute]
private LoadedEventHandler DesignerLoaderHostLoaded;
    [CompilerGeneratedAttribute]
private EventHandler DesignerLoaderHostLoading;
    [CompilerGeneratedAttribute]
private EventHandler DesignerLoaderHostUnloading;
    [CompilerGeneratedAttribute]
private EventHandler DesignerLoaderHostUnloaded;
    [CompilerGeneratedAttribute]
private ComponentEventHandler ComponentAdded;
    [CompilerGeneratedAttribute]
private ComponentEventHandler ComponentAdding;
    [CompilerGeneratedAttribute]
private ComponentChangedEventHandler ComponentChanged;
    [CompilerGeneratedAttribute]
private ComponentChangingEventHandler ComponentChanging;
    [CompilerGeneratedAttribute]
private ComponentEventHandler ComponentRemoved;
    [CompilerGeneratedAttribute]
private ComponentEventHandler ComponentRemoving;
    [CompilerGeneratedAttribute]
private ComponentRenameEventHandler ComponentRename;
    public IContainer Container { get; }
    public bool InTransaction { get; }
    public bool Loading { get; }
    public IComponent RootComponent { get; }
    public string RootComponentClassName { get; }
    public string TransactionDescription { get; }
    public DesignerHost(IServiceProvider serviceProvider);
    public virtual void Add(IComponent component, string name);
    internal void AddPreProcess(IComponent component, string name);
    internal void AddPostProcess(IComponent component, string name);
    public virtual void Remove(IComponent component);
    internal void RemovePreProcess(IComponent component);
    internal void RemovePostProcess(IComponent component);
    protected virtual ISite CreateSite(IComponent component, string name);
    public sealed virtual IContainer get_Container();
    public sealed virtual bool get_InTransaction();
    public sealed virtual bool get_Loading();
    public sealed virtual IComponent get_RootComponent();
    public sealed virtual string get_RootComponentClassName();
    public sealed virtual string get_TransactionDescription();
    public sealed virtual void Activate();
    public sealed virtual IComponent CreateComponent(Type componentClass);
    public sealed virtual IComponent CreateComponent(Type componentClass, string name);
    internal object CreateInstance(Type type);
    internal IDesigner CreateDesigner(IComponent component, bool rootDesigner);
    private IDesigner CreateDesigner(IComponent component, Type designerBaseType);
    public sealed virtual void DestroyComponent(IComponent component);
    public sealed virtual IDesigner GetDesigner(IComponent component);
    public sealed virtual DesignerTransaction CreateTransaction();
    public sealed virtual DesignerTransaction CreateTransaction(string description);
    public sealed virtual Type GetType(string typeName);
    protected virtual void Dispose(bool disposing);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Activated(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Activated(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Deactivated(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Deactivated(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_LoadComplete(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_LoadComplete(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TransactionClosed(DesignerTransactionCloseEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TransactionClosed(DesignerTransactionCloseEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TransactionClosing(DesignerTransactionCloseEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TransactionClosing(DesignerTransactionCloseEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TransactionOpened(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TransactionOpened(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TransactionOpening(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TransactionOpening(EventHandler value);
    private void OnTransactionClosing(DesignerHostTransaction raiser, TransactionAction action);
    private void OnTransactionClosed(DesignerHostTransaction raiser, TransactionAction action);
    [CompilerGeneratedAttribute]
internal void add_DesignerLoaderHostLoaded(LoadedEventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_DesignerLoaderHostLoaded(LoadedEventHandler value);
    [CompilerGeneratedAttribute]
internal void add_DesignerLoaderHostLoading(EventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_DesignerLoaderHostLoading(EventHandler value);
    [CompilerGeneratedAttribute]
internal void add_DesignerLoaderHostUnloading(EventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_DesignerLoaderHostUnloading(EventHandler value);
    [CompilerGeneratedAttribute]
internal void add_DesignerLoaderHostUnloaded(EventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_DesignerLoaderHostUnloaded(EventHandler value);
    public sealed virtual void EndLoad(string rootClassName, bool successful, ICollection errorCollection);
    public sealed virtual void Reload();
    private void Unload();
    [CompilerGeneratedAttribute]
public sealed virtual void add_ComponentAdded(ComponentEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ComponentAdded(ComponentEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ComponentAdding(ComponentEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ComponentAdding(ComponentEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ComponentChanged(ComponentChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ComponentChanged(ComponentChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ComponentChanging(ComponentChangingEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ComponentChanging(ComponentChangingEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ComponentRemoved(ComponentEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ComponentRemoved(ComponentEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ComponentRemoving(ComponentEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ComponentRemoving(ComponentEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ComponentRename(ComponentRenameEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ComponentRename(ComponentRenameEventHandler value);
    public sealed virtual void OnComponentChanged(object component, MemberDescriptor member, object oldValue, object newValue);
    public sealed virtual void OnComponentChanging(object component, MemberDescriptor member);
    internal void OnComponentRename(object component, string oldName, string newName);
    public sealed virtual void AddService(Type serviceType, object serviceInstance);
    public sealed virtual void AddService(Type serviceType, object serviceInstance, bool promote);
    public sealed virtual void AddService(Type serviceType, ServiceCreatorCallback callback);
    public sealed virtual void AddService(Type serviceType, ServiceCreatorCallback callback, bool promote);
    public sealed virtual void RemoveService(Type serviceType);
    public sealed virtual void RemoveService(Type serviceType, bool promote);
    public sealed virtual object GetService(Type serviceType);
}
internal class System.ComponentModel.Design.DesignModeNestedContainer : NestedContainer {
    private string _containerName;
    protected string OwnerName { get; }
    public DesignModeNestedContainer(IComponent owner, string containerName);
    public virtual void Add(IComponent component, string name);
    public virtual void Remove(IComponent component);
    protected virtual string get_OwnerName();
    protected virtual ISite CreateSite(IComponent component, string name);
    protected virtual object GetService(Type service);
}
internal class System.ComponentModel.Design.DesignModeSite : object {
    private IServiceProvider _serviceProvider;
    private IComponent _component;
    private IContainer _container;
    private string _componentName;
    private NestedContainer _nestedContainer;
    private ServiceContainer _siteSpecificServices;
    private Hashtable _dictionary;
    public IComponent Component { get; }
    public IContainer Container { get; }
    public bool DesignMode { get; }
    public string Name { get; public set; }
    private ServiceContainer SiteSpecificServices { get; }
    public DesignModeSite(IComponent component, string name, IContainer container, IServiceProvider serviceProvider);
    public sealed virtual IComponent get_Component();
    public sealed virtual IContainer get_Container();
    public sealed virtual bool get_DesignMode();
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    private ServiceContainer get_SiteSpecificServices();
    private sealed virtual override void System.ComponentModel.Design.IServiceContainer.AddService(Type serviceType, object serviceInstance);
    private sealed virtual override void System.ComponentModel.Design.IServiceContainer.AddService(Type serviceType, object serviceInstance, bool promote);
    private sealed virtual override void System.ComponentModel.Design.IServiceContainer.AddService(Type serviceType, ServiceCreatorCallback callback);
    private sealed virtual override void System.ComponentModel.Design.IServiceContainer.AddService(Type serviceType, ServiceCreatorCallback callback, bool promote);
    private sealed virtual override void System.ComponentModel.Design.IServiceContainer.RemoveService(Type serviceType);
    private sealed virtual override void System.ComponentModel.Design.IServiceContainer.RemoveService(Type serviceType, bool promote);
    private sealed virtual override object System.ComponentModel.Design.IDictionaryService.GetKey(object value);
    private sealed virtual override object System.ComponentModel.Design.IDictionaryService.GetValue(object key);
    private sealed virtual override void System.ComponentModel.Design.IDictionaryService.SetValue(object key, object value);
    public virtual object GetService(Type service);
}
public class System.ComponentModel.Design.DesignSurface : object {
    private DesignerHost _designerHost;
    private DesignSurfaceServiceContainer _serviceContainer;
    private ICollection _loadErrors;
    private bool _isLoaded;
    private DesignerLoader _designerLoader;
    [CompilerGeneratedAttribute]
private EventHandler Disposed;
    [CompilerGeneratedAttribute]
private EventHandler Flushed;
    [CompilerGeneratedAttribute]
private LoadedEventHandler Loaded;
    [CompilerGeneratedAttribute]
private EventHandler Loading;
    [CompilerGeneratedAttribute]
private EventHandler Unloaded;
    [CompilerGeneratedAttribute]
private EventHandler Unloading;
    [CompilerGeneratedAttribute]
private EventHandler ViewActivated;
    protected ServiceContainer ServiceContainer { get; }
    public IContainer ComponentContainer { get; }
    public bool IsLoaded { get; }
    public ICollection LoadErrors { get; }
    public object View { get; }
    public DesignSurface(Type rootComponentType);
    public DesignSurface(IServiceProvider parentProvider, Type rootComponentType);
    public DesignSurface(IServiceProvider parentProvider);
    protected ServiceContainer get_ServiceContainer();
    public IContainer get_ComponentContainer();
    public bool get_IsLoaded();
    public ICollection get_LoadErrors();
    public object get_View();
    [CompilerGeneratedAttribute]
public void add_Disposed(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Disposed(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_Flushed(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Flushed(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_Loaded(LoadedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Loaded(LoadedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_Loading(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Loading(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_Unloaded(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Unloaded(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_Unloading(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Unloading(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_ViewActivated(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ViewActivated(EventHandler value);
    public void BeginLoad(Type rootComponentType);
    public void BeginLoad(DesignerLoader loader);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public void Flush();
    private void OnDesignerHost_Loaded(object sender, LoadedEventArgs e);
    private void OnDesignerHost_Loading(object sender, EventArgs e);
    private void OnDesignerHost_Unloading(object sender, EventArgs e);
    private void OnDesignerHost_Unloaded(object sender, EventArgs e);
    protected virtual void OnLoaded(LoadedEventArgs e);
    protected virtual void OnLoading(EventArgs e);
    protected virtual void OnUnloaded(EventArgs e);
    protected virtual void OnUnloading(EventArgs e);
    internal void OnDesignerHost_Activated(object sender, EventArgs args);
    protected virtual void OnViewActivate(EventArgs e);
    [ObsoleteAttribute("CreateComponent has been replaced by CreateInstance")]
protected internal virtual IComponent CreateComponent(Type componentType);
    protected internal virtual object CreateInstance(Type type);
    protected internal virtual IDesigner CreateDesigner(IComponent component, bool rootDesigner);
    public INestedContainer CreateNestedContainer(IComponent owningComponent);
    public INestedContainer CreateNestedContainer(IComponent owningComponent, string containerName);
    public sealed virtual object GetService(Type serviceType);
}
[DefaultMemberAttribute("Item")]
public class System.ComponentModel.Design.DesignSurfaceCollection : object {
    private DesignerCollection _designers;
    public int Count { get; }
    public DesignSurface Item { get; }
    private int System.Collections.ICollection.Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    internal DesignSurfaceCollection(DesignerCollection designers);
    public int get_Count();
    public DesignSurface get_Item(int index);
    public void CopyTo(DesignSurface[] array, int index);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    public IEnumerator GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
}
public class System.ComponentModel.Design.DesignSurfaceEventArgs : EventArgs {
    private DesignSurface _surface;
    public DesignSurface Surface { get; }
    public DesignSurfaceEventArgs(DesignSurface surface);
    public DesignSurface get_Surface();
}
public class System.ComponentModel.Design.DesignSurfaceEventHandler : MulticastDelegate {
    public DesignSurfaceEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DesignSurfaceEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DesignSurfaceEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.ComponentModel.Design.DesignSurfaceManager : object {
    private IServiceProvider _parentProvider;
    private ServiceContainer _serviceContainer;
    [CompilerGeneratedAttribute]
private EventHandler SelectionChanged;
    [CompilerGeneratedAttribute]
private DesignSurfaceEventHandler DesignSurfaceDisposed;
    [CompilerGeneratedAttribute]
private DesignSurfaceEventHandler DesignSurfaceCreated;
    [CompilerGeneratedAttribute]
private ActiveDesignSurfaceChangedEventHandler ActiveDesignSurfaceChanged;
    public DesignSurface ActiveDesignSurface { get; public set; }
    public DesignSurfaceCollection DesignSurfaces { get; }
    protected ServiceContainer ServiceContainer { get; }
    public DesignSurfaceManager(IServiceProvider parentProvider);
    protected virtual DesignSurface CreateDesignSurfaceCore(IServiceProvider parentProvider);
    public DesignSurface CreateDesignSurface();
    public DesignSurface CreateDesignSurface(IServiceProvider parentProvider);
    public virtual DesignSurface get_ActiveDesignSurface();
    public virtual void set_ActiveDesignSurface(DesignSurface value);
    public DesignSurfaceCollection get_DesignSurfaces();
    protected ServiceContainer get_ServiceContainer();
    [CompilerGeneratedAttribute]
public void add_SelectionChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_SelectionChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_DesignSurfaceDisposed(DesignSurfaceEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_DesignSurfaceDisposed(DesignSurfaceEventHandler value);
    [CompilerGeneratedAttribute]
public void add_DesignSurfaceCreated(DesignSurfaceEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_DesignSurfaceCreated(DesignSurfaceEventHandler value);
    [CompilerGeneratedAttribute]
public void add_ActiveDesignSurfaceChanged(ActiveDesignSurfaceChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ActiveDesignSurfaceChanged(ActiveDesignSurfaceChangedEventHandler value);
    private void OnSelectionChanged(object sender, EventArgs args);
    private void OnDesignSurfaceCreated(DesignSurface surface);
    private void OnDesignSurfaceDisposed(object sender, EventArgs args);
    public sealed virtual object GetService(Type serviceType);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
internal class System.ComponentModel.Design.DesignSurfaceServiceContainer : ServiceContainer {
    private Hashtable _nonRemoveableServices;
    public DesignSurfaceServiceContainer(IServiceProvider parentProvider);
    internal void AddNonReplaceableService(Type serviceType, object instance);
    internal void RemoveNonReplaceableService(Type serviceType, object instance);
    public virtual void RemoveService(Type serviceType, bool promote);
}
public enum System.ComponentModel.Design.DisplayMode : Enum {
    public int value__;
    public static DisplayMode Ansi;
    public static DisplayMode Auto;
    public static DisplayMode Hexdump;
    public static DisplayMode Unicode;
}
public abstract class System.ComponentModel.Design.EventBindingService : object {
    private IServiceProvider _provider;
    protected EventBindingService(IServiceProvider provider);
    protected abstract virtual bool ShowCode(IComponent component, EventDescriptor e, string methodName);
    protected abstract virtual bool ShowCode(int lineNumber);
    protected abstract virtual bool ShowCode();
    protected abstract virtual string CreateUniqueMethodName(IComponent component, EventDescriptor e);
    protected abstract virtual ICollection GetCompatibleMethods(EventDescriptor e);
    protected virtual void FreeMethod(IComponent component, EventDescriptor e, string methodName);
    protected virtual void UseMethod(IComponent component, EventDescriptor e, string methodName);
    protected virtual void ValidateMethodName(string methodName);
    protected object GetService(Type serviceType);
    private sealed virtual override string System.ComponentModel.Design.IEventBindingService.CreateUniqueMethodName(IComponent component, EventDescriptor eventDescriptor);
    private sealed virtual override ICollection System.ComponentModel.Design.IEventBindingService.GetCompatibleMethods(EventDescriptor eventDescriptor);
    private sealed virtual override EventDescriptor System.ComponentModel.Design.IEventBindingService.GetEvent(PropertyDescriptor property);
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.Design.IEventBindingService.GetEventProperties(EventDescriptorCollection events);
    private sealed virtual override PropertyDescriptor System.ComponentModel.Design.IEventBindingService.GetEventProperty(EventDescriptor eventDescriptor);
    private sealed virtual override bool System.ComponentModel.Design.IEventBindingService.ShowCode(IComponent component, EventDescriptor eventDescriptor);
    private sealed virtual override bool System.ComponentModel.Design.IEventBindingService.ShowCode(int lineNumber);
    private sealed virtual override bool System.ComponentModel.Design.IEventBindingService.ShowCode();
}
internal class System.ComponentModel.Design.EventPropertyDescriptor : PropertyDescriptor {
    private EventDescriptor _eventDescriptor;
    public Type ComponentType { get; }
    public bool IsReadOnly { get; }
    public Type PropertyType { get; }
    public TypeConverter Converter { get; }
    internal EventDescriptor InternalEventDescriptor { get; }
    public EventPropertyDescriptor(EventDescriptor eventDescriptor);
    public virtual bool CanResetValue(object component);
    public virtual Type get_ComponentType();
    public virtual bool get_IsReadOnly();
    public virtual Type get_PropertyType();
    public virtual void ResetValue(object component);
    public virtual object GetValue(object component);
    public virtual void SetValue(object component, object value);
    public virtual bool ShouldSerializeValue(object component);
    public virtual TypeConverter get_Converter();
    internal EventDescriptor get_InternalEventDescriptor();
}
public class System.ComponentModel.Design.ExceptionCollection : Exception {
    private ArrayList exceptions;
    public ArrayList Exceptions { get; }
    [MonoTODOAttribute]
public ExceptionCollection(ArrayList exceptions);
    [MonoTODOAttribute]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public ArrayList get_Exceptions();
}
internal class System.ComponentModel.Design.ExtenderService : object {
    private ArrayList _extenderProviders;
    public sealed virtual void AddExtenderProvider(IExtenderProvider provider);
    public sealed virtual void RemoveExtenderProvider(IExtenderProvider provider);
    public sealed virtual IExtenderProvider[] GetExtenderProviders();
    public sealed virtual void Dispose();
}
public interface System.ComponentModel.Design.IComponentDesignerDebugService {
    public int IndentLevel { get; public set; }
    public TraceListenerCollection Listeners { get; }
    public abstract virtual void Assert(bool condition, string message);
    public abstract virtual void Fail(string message);
    public abstract virtual void Trace(string message, string category);
    public abstract virtual int get_IndentLevel();
    public abstract virtual void set_IndentLevel(int value);
    public abstract virtual TraceListenerCollection get_Listeners();
}
public interface System.ComponentModel.Design.IComponentDesignerStateService {
    public abstract virtual object GetState(IComponent component, string key);
    public abstract virtual void SetState(IComponent component, string key, object value);
}
public class System.ComponentModel.Design.InheritanceService : object {
    [MonoTODOAttribute]
public sealed virtual void AddInheritedComponents(IComponent component, IContainer container);
    [MonoTODOAttribute]
protected virtual void AddInheritedComponents(Type type, IComponent component, IContainer container);
    [MonoTODOAttribute]
public sealed virtual void Dispose();
    [MonoTODOAttribute]
protected virtual void Dispose(bool disposing);
    [MonoTODOAttribute]
public sealed virtual InheritanceAttribute GetInheritanceAttribute(IComponent component);
    [MonoTODOAttribute]
protected virtual bool IgnoreInheritedMember(MemberInfo member, IComponent component);
}
public class System.ComponentModel.Design.LoadedEventArgs : EventArgs {
    private ICollection _errors;
    private bool _succeeded;
    public ICollection Errors { get; }
    public bool HasSucceeded { get; }
    public LoadedEventArgs(bool succeeded, ICollection errors);
    public ICollection get_Errors();
    public bool get_HasSucceeded();
}
public class System.ComponentModel.Design.LoadedEventHandler : MulticastDelegate {
    public LoadedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, LoadedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, LoadedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ObsoleteAttribute("use CodeDomLocalizationProvider")]
[ProvidePropertyAttribute("Localizable", "System.Object")]
[ProvidePropertyAttribute("Language", "System.Object")]
[ProvidePropertyAttribute("LoadLanguage", "System.Object")]
public class System.ComponentModel.Design.LocalizationExtenderProvider : object {
    [MonoTODOAttribute]
public LocalizationExtenderProvider(ISite serviceProvider, IComponent baseComponent);
    [MonoTODOAttribute]
public sealed virtual bool CanExtend(object o);
    [MonoTODOAttribute]
public sealed virtual void Dispose();
    [MonoTODOAttribute]
protected virtual void Dispose(bool disposing);
    [MonoTODOAttribute]
[LocalizableAttribute("True")]
[DesignOnlyAttribute("True")]
public CultureInfo GetLanguage(object o);
    [MonoTODOAttribute]
[DesignOnlyAttribute("True")]
[DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public CultureInfo GetLoadLanguage(object o);
    [MonoTODOAttribute]
[LocalizableAttribute("True")]
[DesignOnlyAttribute("True")]
public bool GetLocalizable(object o);
    [MonoTODOAttribute]
public void ResetLanguage(object o);
    [MonoTODOAttribute]
public void SetLanguage(object o, CultureInfo language);
    [MonoTODOAttribute]
public void SetLocalizable(object o, bool localizable);
    [MonoTODOAttribute]
public bool ShouldSerializeLanguage(object o);
}
[ComVisibleAttribute("True")]
public class System.ComponentModel.Design.MenuCommandsChangedEventArgs : EventArgs {
    private MenuCommandsChangedType change_type;
    private MenuCommand command;
    public MenuCommandsChangedType ChangeType { get; }
    public MenuCommand Command { get; }
    public MenuCommandsChangedEventArgs(MenuCommandsChangedType changeType, MenuCommand command);
    public MenuCommandsChangedType get_ChangeType();
    public MenuCommand get_Command();
}
[ComVisibleAttribute("True")]
public class System.ComponentModel.Design.MenuCommandsChangedEventHandler : MulticastDelegate {
    public MenuCommandsChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, MenuCommandsChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, MenuCommandsChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ComVisibleAttribute("True")]
public enum System.ComponentModel.Design.MenuCommandsChangedType : Enum {
    public int value__;
    public static MenuCommandsChangedType CommandAdded;
    public static MenuCommandsChangedType CommandRemoved;
    public static MenuCommandsChangedType CommandChanged;
}
public class System.ComponentModel.Design.MenuCommandService : object {
    private IServiceProvider _serviceProvider;
    private DesignerVerbCollection _globalVerbs;
    private DesignerVerbCollection _verbs;
    private Dictionary`2<CommandID, MenuCommand> _commands;
    [CompilerGeneratedAttribute]
private MenuCommandsChangedEventHandler MenuCommandsChanged;
    public DesignerVerbCollection Verbs { get; }
    public MenuCommandService(IServiceProvider serviceProvider);
    private void OnSelectionChanged(object sender, EventArgs arg);
    [CompilerGeneratedAttribute]
public void add_MenuCommandsChanged(MenuCommandsChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_MenuCommandsChanged(MenuCommandsChangedEventHandler value);
    public virtual DesignerVerbCollection get_Verbs();
    public virtual void AddCommand(MenuCommand command);
    public virtual void AddVerb(DesignerVerb verb);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected void EnsureVerbs();
    protected MenuCommand FindCommand(Guid guid, int id);
    public sealed virtual MenuCommand FindCommand(CommandID commandID);
    protected ICollection GetCommandList(Guid guid);
    public virtual bool GlobalInvoke(CommandID commandID);
    public virtual bool GlobalInvoke(CommandID commandId, object arg);
    protected virtual void OnCommandsChanged(MenuCommandsChangedEventArgs e);
    public virtual void RemoveCommand(MenuCommand command);
    public virtual void RemoveVerb(DesignerVerb verb);
    public virtual void ShowContextMenu(CommandID menuID, int x, int y);
    protected object GetService(Type serviceType);
}
public class System.ComponentModel.Design.MultilineStringEditor : UITypeEditor {
    private IWindowsFormsEditorService editorService;
    private EditorControl control;
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
    public virtual bool GetPaintValueSupported(ITypeDescriptorContext context);
}
public abstract class System.ComponentModel.Design.ObjectSelectorEditor : UITypeEditor {
    protected object currValue;
    protected object prevValue;
    public bool SubObjectSelector;
    public ObjectSelectorEditor(bool subObjectSelector);
    [MonoTODOAttribute]
public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    public bool EqualsToValue(object value);
    [MonoTODOAttribute]
protected virtual void FillTreeWithData(Selector selector, ITypeDescriptorContext context, IServiceProvider provider);
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
    public virtual void SetValue(object value);
}
internal class System.ComponentModel.Design.ReferenceService : object {
    private List`1<IComponent> _references;
    internal ReferenceService(IServiceProvider provider);
    private void OnComponentAdded(object sender, ComponentEventArgs args);
    private void OnComponentRemoved(object sender, ComponentEventArgs args);
    public sealed virtual IComponent GetComponent(object reference);
    public sealed virtual string GetName(object reference);
    public sealed virtual object GetReference(string name);
    public sealed virtual Object[] GetReferences();
    public sealed virtual Object[] GetReferences(Type baseType);
    public sealed virtual void Dispose();
}
internal class System.ComponentModel.Design.SelectionService : object {
    private IServiceProvider _serviceProvider;
    private ArrayList _selection;
    private IComponent _primarySelection;
    [CompilerGeneratedAttribute]
private EventHandler SelectionChanging;
    [CompilerGeneratedAttribute]
private EventHandler SelectionChanged;
    public object PrimarySelection { get; }
    public int SelectionCount { get; }
    private IComponent RootComponent { get; }
    public SelectionService(IServiceProvider provider);
    private void OnComponentRemoving(object sender, ComponentEventArgs args);
    [CompilerGeneratedAttribute]
public sealed virtual void add_SelectionChanging(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_SelectionChanging(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_SelectionChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_SelectionChanged(EventHandler value);
    public sealed virtual ICollection GetSelectedComponents();
    protected virtual void OnSelectionChanging();
    protected virtual void OnSelectionChanged();
    public sealed virtual object get_PrimarySelection();
    public sealed virtual int get_SelectionCount();
    private IComponent get_RootComponent();
    public sealed virtual bool GetComponentSelected(object component);
    public sealed virtual void SetSelectedComponents(ICollection components);
    public sealed virtual void SetSelectedComponents(ICollection components, SelectionTypes selectionType);
}
public abstract class System.ComponentModel.Design.Serialization.BasicDesignerLoader : DesignerLoader {
    private bool _loaded;
    private bool _loading;
    private IDesignerLoaderHost _host;
    private int _dependenciesCount;
    private bool _notificationsEnabled;
    private bool _modified;
    private string _baseComponentClassName;
    private DesignerSerializationManager _serializationMananger;
    private bool _flushing;
    private bool _reloadScheduled;
    private ReloadOptions _reloadOptions;
    public bool Loading { get; }
    protected IDesignerLoaderHost LoaderHost { get; }
    protected bool Modified { get; protected set; }
    protected object PropertyProvider { get; protected set; }
    protected bool ReloadPending { get; }
    protected virtual void Initialize();
    public virtual void BeginLoad(IDesignerLoaderHost host);
    protected abstract virtual void PerformLoad(IDesignerSerializationManager serializationManager);
    protected virtual void OnBeginLoad();
    protected virtual void OnEndLoad(bool successful, ICollection errors);
    public virtual bool get_Loading();
    protected IDesignerLoaderHost get_LoaderHost();
    protected virtual bool get_Modified();
    protected virtual void set_Modified(bool value);
    protected object get_PropertyProvider();
    protected void set_PropertyProvider(object value);
    protected bool get_ReloadPending();
    protected virtual bool EnableComponentNotification(bool enable);
    private void OnComponentAdded(object sender, ComponentEventArgs args);
    private void OnComponentRemoved(object sender, ComponentEventArgs args);
    private void OnComponentAdding(object sender, ComponentEventArgs args);
    private void OnComponentRemoving(object sender, ComponentEventArgs args);
    private void OnComponentChanged(object sender, ComponentChangedEventArgs args);
    private void OnComponentChanging(object sender, ComponentChangingEventArgs args);
    private void OnComponentRename(object sender, ComponentRenameEventArgs args);
    public virtual void Flush();
    protected abstract virtual void PerformFlush(IDesignerSerializationManager serializationManager);
    protected virtual bool IsReloadNeeded();
    protected virtual void OnBeginUnload();
    protected virtual void OnModifying();
    protected void Reload(ReloadOptions flags);
    private void OnIdle(object sender, EventArgs args);
    private void ReloadCore();
    private void Unload();
    protected virtual void ReportFlushErrors(ICollection errors);
    protected void SetBaseComponentClassName(string name);
    private sealed virtual override void System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency();
    private sealed virtual override void System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete(bool successful, ICollection errorCollection);
    private sealed virtual override bool System.ComponentModel.Design.Serialization.IDesignerLoaderService.Reload();
    protected object GetService(Type serviceType);
    public virtual void Dispose();
}
public class System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService : ComponentSerializationService {
    private IServiceProvider _provider;
    public CodeDomComponentSerializationService(IServiceProvider provider);
    public virtual SerializationStore CreateStore();
    public virtual SerializationStore LoadStore(Stream stream);
    public virtual ICollection Deserialize(SerializationStore store);
    public virtual ICollection Deserialize(SerializationStore store, IContainer container);
    public virtual void DeserializeTo(SerializationStore store, IContainer container, bool validateRecycledTypes, bool applyDefaults);
    private ICollection DeserializeCore(SerializationStore store, IContainer container, bool validateRecycledTypes, bool applyDefaults);
    public virtual void Serialize(SerializationStore store, object value);
    public virtual void SerializeAbsolute(SerializationStore store, object value);
    public virtual void SerializeMember(SerializationStore store, object owningObject, MemberDescriptor member);
    public virtual void SerializeMemberAbsolute(SerializationStore store, object owningObject, MemberDescriptor member);
    private void SerializeCore(SerializationStore store, object value, bool absolute);
    private void SerializeMemberCore(SerializationStore store, object owningObject, MemberDescriptor member, bool absolute);
}
public abstract class System.ComponentModel.Design.Serialization.CodeDomDesignerLoader : BasicDesignerLoader {
    private CodeDomSerializer _rootSerializer;
    protected CodeDomProvider CodeDomProvider { get; }
    protected ITypeResolutionService TypeResolutionService { get; }
    protected virtual void Initialize();
    protected virtual bool IsReloadNeeded();
    protected virtual void PerformLoad(IDesignerSerializationManager manager);
    private CodeTypeDeclaration GetFirstCodeTypeDecl(CodeCompileUnit document, String& namespaceName);
    protected virtual void PerformFlush(IDesignerSerializationManager manager);
    private CodeCompileUnit MergeTypeDeclWithCompileUnit(CodeTypeDeclaration typeDecl, CodeCompileUnit unit);
    protected virtual void OnBeginLoad();
    protected virtual void OnBeginUnload();
    protected virtual void OnEndLoad(bool successful, ICollection errors);
    private void OnComponentRename_EventHandler(object sender, ComponentRenameEventArgs args);
    protected virtual void OnComponentRename(object component, string oldName, string newName);
    protected abstract virtual CodeDomProvider get_CodeDomProvider();
    protected abstract virtual ITypeResolutionService get_TypeResolutionService();
    protected abstract virtual CodeCompileUnit Parse();
    protected abstract virtual void Write(CodeCompileUnit unit);
    public virtual void Dispose();
    private sealed virtual override string System.ComponentModel.Design.Serialization.INameCreationService.CreateName(IContainer container, Type dataType);
    private sealed virtual override bool System.ComponentModel.Design.Serialization.INameCreationService.IsValidName(string name);
    private sealed virtual override void System.ComponentModel.Design.Serialization.INameCreationService.ValidateName(string name);
    private sealed virtual override ICollection System.ComponentModel.Design.Serialization.IDesignerSerializationService.Deserialize(object serializationData);
    private sealed virtual override object System.ComponentModel.Design.Serialization.IDesignerSerializationService.Serialize(ICollection objects);
}
public enum System.ComponentModel.Design.Serialization.CodeDomLocalizationModel : Enum {
    public int value__;
    public static CodeDomLocalizationModel None;
    public static CodeDomLocalizationModel PropertyAssignment;
    public static CodeDomLocalizationModel PropertyReflection;
}
public class System.ComponentModel.Design.Serialization.CodeDomLocalizationProvider : object {
    [MonoTODOAttribute]
public CodeDomLocalizationProvider(IServiceProvider provider, CodeDomLocalizationModel model);
    [MonoTODOAttribute]
public CodeDomLocalizationProvider(IServiceProvider provider, CodeDomLocalizationModel model, CultureInfo[] supportedCultures);
    [MonoTODOAttribute]
public sealed virtual void Dispose();
    [MonoTODOAttribute]
private sealed virtual override object System.ComponentModel.Design.Serialization.IDesignerSerializationProvider.GetSerializer(IDesignerSerializationManager manager, object currentSerializer, Type objectType, Type serializerType);
}
internal class System.ComponentModel.Design.Serialization.CodeDomSerializationProvider : object {
    private static CodeDomSerializationProvider _instance;
    private CodeDomSerializerBase _componentSerializer;
    private CodeDomSerializerBase _propertySerializer;
    private CodeDomSerializerBase _eventSerializer;
    private CodeDomSerializerBase _primitiveSerializer;
    private CodeDomSerializerBase _collectionSerializer;
    private CodeDomSerializerBase _rootSerializer;
    private CodeDomSerializerBase _enumSerializer;
    private CodeDomSerializerBase _othersSerializer;
    public static CodeDomSerializationProvider Instance { get; }
    private static CodeDomSerializationProvider();
    public static CodeDomSerializationProvider get_Instance();
    public sealed virtual object GetSerializer(IDesignerSerializationManager manager, object currentSerializer, Type objectType, Type serializerType);
}
public class System.ComponentModel.Design.Serialization.CodeDomSerializer : CodeDomSerializerBase {
    public virtual object SerializeAbsolute(IDesignerSerializationManager manager, object value);
    public virtual object Serialize(IDesignerSerializationManager manager, object value);
    [ObsoleteAttribute("This method has been deprecated. Use SerializeToExpression or GetExpression instead.")]
protected CodeExpression SerializeToReferenceExpression(IDesignerSerializationManager manager, object value);
    public virtual string GetTargetComponentName(CodeStatement statement, CodeExpression expression, Type targetType);
    public virtual CodeStatementCollection SerializeMember(IDesignerSerializationManager manager, object owningObject, MemberDescriptor member);
    public virtual CodeStatementCollection SerializeMemberAbsolute(IDesignerSerializationManager manager, object owningObject, MemberDescriptor member);
    public virtual object Deserialize(IDesignerSerializationManager manager, object codeObject);
    protected object DeserializeStatementToInstance(IDesignerSerializationManager manager, CodeStatement statement);
}
[EditorBrowsableAttribute("1")]
public abstract class System.ComponentModel.Design.Serialization.CodeDomSerializerBase : object {
    private static DeserializationErrorMarker _errorMarker;
    private static CodeDomSerializerBase();
    protected CodeExpression SerializeToExpression(IDesignerSerializationManager manager, object value);
    protected CodeDomSerializer GetSerializer(IDesignerSerializationManager manager, object value);
    protected CodeDomSerializer GetSerializer(IDesignerSerializationManager manager, Type valueType);
    protected CodeExpression GetExpression(IDesignerSerializationManager manager, object value);
    protected void SetExpression(IDesignerSerializationManager manager, object value, CodeExpression expression);
    protected void SetExpression(IDesignerSerializationManager manager, object value, CodeExpression expression, bool isPreset);
    protected bool IsSerialized(IDesignerSerializationManager manager, object value);
    protected bool IsSerialized(IDesignerSerializationManager manager, object value, bool honorPreset);
    protected CodeExpression SerializeCreationExpression(IDesignerSerializationManager manager, object value, Boolean& isComplete);
    private CodeExpression SerializeInstanceDescriptor(IDesignerSerializationManager manager, InstanceDescriptor descriptor);
    private CodeExpression[] SerializeParameters(IDesignerSerializationManager manager, ICollection parameters);
    protected void SerializeEvent(IDesignerSerializationManager manager, CodeStatementCollection statements, object value, EventDescriptor descriptor);
    protected void SerializeEvents(IDesignerSerializationManager manager, CodeStatementCollection statements, object value, Attribute[] filter);
    protected void SerializeProperty(IDesignerSerializationManager manager, CodeStatementCollection statements, object value, PropertyDescriptor propertyToSerialize);
    protected void SerializeProperties(IDesignerSerializationManager manager, CodeStatementCollection statements, object value, Attribute[] filter);
    protected virtual object DeserializeInstance(IDesignerSerializationManager manager, Type type, Object[] parameters, string name, bool addToContainer);
    protected string GetUniqueName(IDesignerSerializationManager manager, object value);
    protected object DeserializeExpression(IDesignerSerializationManager manager, string name, CodeExpression expression);
    private MethodInfo GetExactMethod(Type type, string methodName, BindingFlags flags, ICollection argsCollection);
    protected void DeserializeStatement(IDesignerSerializationManager manager, CodeStatement statement);
    private void DeserializeAssignmentStatement(IDesignerSerializationManager manager, CodeAssignStatement statement);
    internal void ReportError(IDesignerSerializationManager manager, string message);
    internal void ReportError(IDesignerSerializationManager manager, string message, string details);
    protected CodeExpression SerializeToResourceExpression(IDesignerSerializationManager manager, object value);
    protected CodeExpression SerializeToResourceExpression(IDesignerSerializationManager manager, object value, bool ensureInvariant);
    protected void SerializePropertiesToResources(IDesignerSerializationManager manager, CodeStatementCollection statements, object value, Attribute[] filter);
    protected void SerializeResource(IDesignerSerializationManager manager, string resourceName, object value);
    protected void SerializeResourceInvariant(IDesignerSerializationManager manager, string resourceName, object value);
    protected void DeserializePropertiesFromResources(IDesignerSerializationManager manager, object value, Attribute[] filter);
}
public class System.ComponentModel.Design.Serialization.CodeDomSerializerException : SystemException {
    private CodeLinePragma linePragma;
    public CodeLinePragma LinePragma { get; }
    public CodeDomSerializerException(Exception ex, CodeLinePragma linePragma);
    public CodeDomSerializerException(string message, CodeLinePragma linePragma);
    [MonoTODOAttribute]
protected CodeDomSerializerException(SerializationInfo info, StreamingContext context);
    [MonoTODOAttribute]
public CodeDomSerializerException(string message, IDesignerSerializationManager manager);
    [MonoTODOAttribute]
public CodeDomSerializerException(Exception ex, IDesignerSerializationManager manager);
    [MonoTODOAttribute]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public CodeLinePragma get_LinePragma();
}
public class System.ComponentModel.Design.Serialization.CollectionCodeDomSerializer : CodeDomSerializer {
    protected bool MethodSupportsSerialization(MethodInfo method);
    public virtual object Serialize(IDesignerSerializationManager manager, object value);
    protected virtual object SerializeCollection(IDesignerSerializationManager manager, CodeExpression targetExpression, Type targetType, ICollection originalCollection, ICollection valuesToSerialize);
    private MethodInfo GetExactMethod(Type type, string methodName, ICollection argsCollection);
}
internal class System.ComponentModel.Design.Serialization.ComponentCodeDomSerializer : CodeDomSerializer {
    public virtual object Serialize(IDesignerSerializationManager manager, object value);
}
public class System.ComponentModel.Design.Serialization.DesignerSerializationManager : object {
    private IServiceProvider _serviceProvider;
    private bool _preserveNames;
    private bool _validateRecycledTypes;
    private bool _recycleInstances;
    private IContainer _designerContainer;
    private object _propertyProvider;
    private Session _session;
    private ArrayList _errors;
    private List`1<IDesignerSerializationProvider> _serializationProviders;
    private Dictionary`2<Type, object> _serializersCache;
    private Dictionary`2<string, object> _instancesByNameCache;
    private Dictionary`2<object, string> _instancesByValueCache;
    private ContextStack _contextStack;
    [CompilerGeneratedAttribute]
private EventHandler SessionDisposed;
    [CompilerGeneratedAttribute]
private EventHandler SessionCreated;
    private EventHandler _serializationCompleteHandler;
    private ResolveNameEventHandler _resolveNameHandler;
    public bool RecycleInstances { get; public set; }
    public bool PreserveNames { get; public set; }
    public bool ValidateRecycledTypes { get; public set; }
    public IContainer Container { get; public set; }
    public object PropertyProvider { get; public set; }
    public IList Errors { get; }
    private ContextStack System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Context { get; }
    private PropertyDescriptorCollection System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties { get; }
    public DesignerSerializationManager(IServiceProvider provider);
    public bool get_RecycleInstances();
    public void set_RecycleInstances(bool value);
    public bool get_PreserveNames();
    public void set_PreserveNames(bool value);
    public bool get_ValidateRecycledTypes();
    public void set_ValidateRecycledTypes(bool value);
    public IContainer get_Container();
    public void set_Container(IContainer value);
    public object get_PropertyProvider();
    public void set_PropertyProvider(object value);
    public IList get_Errors();
    [CompilerGeneratedAttribute]
public void add_SessionDisposed(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_SessionDisposed(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_SessionCreated(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_SessionCreated(EventHandler value);
    protected virtual void OnSessionCreated(EventArgs e);
    protected virtual object CreateInstance(Type type, ICollection arguments, string name, bool addToContainer);
    private object CreateInstance(Type type, ICollection argsCollection);
    public object GetSerializer(Type objectType, Type serializerType);
    private void VerifyInSession();
    private void VerifyNotInSession();
    public IDisposable CreateSession();
    protected virtual void OnSessionDisposed(EventArgs e);
    protected virtual Type GetType(string typeName);
    protected virtual void OnResolveName(ResolveNameEventArgs e);
    private sealed virtual override void System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(IDesignerSerializationProvider provider);
    private sealed virtual override void System.ComponentModel.Design.Serialization.IDesignerSerializationManager.RemoveSerializationProvider(IDesignerSerializationProvider provider);
    private sealed virtual override object System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance(Type type, ICollection arguments, string name, bool addToContainer);
    private sealed virtual override object System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(string name);
    private object RequestInstance(string name);
    private sealed virtual override Type System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetType(string name);
    private sealed virtual override object System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetSerializer(Type type, Type serializerType);
    private sealed virtual override string System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(object instance);
    private sealed virtual override void System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SetName(object instance, string name);
    private sealed virtual override void System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ReportError(object error);
    private sealed virtual override ContextStack System.ComponentModel.Design.Serialization.IDesignerSerializationManager.get_Context();
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.Design.Serialization.IDesignerSerializationManager.get_Properties();
    private sealed virtual override void System.ComponentModel.Design.Serialization.IDesignerSerializationManager.add_SerializationComplete(EventHandler value);
    private sealed virtual override void System.ComponentModel.Design.Serialization.IDesignerSerializationManager.remove_SerializationComplete(EventHandler value);
    private sealed virtual override void System.ComponentModel.Design.Serialization.IDesignerSerializationManager.add_ResolveName(ResolveNameEventHandler value);
    private sealed virtual override void System.ComponentModel.Design.Serialization.IDesignerSerializationManager.remove_ResolveName(ResolveNameEventHandler value);
    private sealed virtual override object System.IServiceProvider.GetService(Type serviceType);
    protected virtual object GetService(Type serviceType);
}
internal class System.ComponentModel.Design.Serialization.EnumCodeDomSerializer : CodeDomSerializer {
    public virtual object Serialize(IDesignerSerializationManager manager, object value);
    private CodeExpression GetEnumExpression(Enum e);
}
internal class System.ComponentModel.Design.Serialization.EventCodeDomSerializer : MemberCodeDomSerializer {
    private CodeThisReferenceExpression _thisReference;
    public virtual void Serialize(IDesignerSerializationManager manager, object value, MemberDescriptor descriptor, CodeStatementCollection statements);
    public virtual bool ShouldSerialize(IDesignerSerializationManager manager, object value, MemberDescriptor descriptor);
}
public class System.ComponentModel.Design.Serialization.ExpressionContext : object {
    private object _owner;
    private Type _expressionType;
    private CodeExpression _expression;
    private object _presetValue;
    public object PresetValue { get; }
    public CodeExpression Expression { get; }
    public Type ExpressionType { get; }
    public object Owner { get; }
    public ExpressionContext(CodeExpression expression, Type expressionType, object owner);
    public ExpressionContext(CodeExpression expression, Type expressionType, object owner, object presetValue);
    public object get_PresetValue();
    public CodeExpression get_Expression();
    public Type get_ExpressionType();
    public object get_Owner();
}
public interface System.ComponentModel.Design.Serialization.ICodeDomDesignerReload {
    public abstract virtual bool ShouldReloadDesigner(CodeCompileUnit newTree);
}
public abstract class System.ComponentModel.Design.Serialization.MemberCodeDomSerializer : CodeDomSerializerBase {
    public abstract virtual void Serialize(IDesignerSerializationManager manager, object value, MemberDescriptor descriptor, CodeStatementCollection statements);
    public abstract virtual bool ShouldSerialize(IDesignerSerializationManager manager, object value, MemberDescriptor descriptor);
}
[DefaultMemberAttribute("Item")]
public class System.ComponentModel.Design.Serialization.ObjectStatementCollection : object {
    private Hashtable _statements;
    public CodeStatementCollection Item { get; }
    public bool ContainsKey(object statementOwner);
    public IDictionaryEnumerator GetEnumerator();
    public CodeStatementCollection get_Item(object statementOwner);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public void Populate(object owner);
    public void Populate(ICollection statementOwners);
}
internal class System.ComponentModel.Design.Serialization.PrimitiveCodeDomSerializer : CodeDomSerializer {
    public virtual object Serialize(IDesignerSerializationManager manager, object value);
}
internal class System.ComponentModel.Design.Serialization.PropertyCodeDomSerializer : MemberCodeDomSerializer {
    public virtual void Serialize(IDesignerSerializationManager manager, object value, MemberDescriptor descriptor, CodeStatementCollection statements);
    private void SerializeNormalProperty(IDesignerSerializationManager manager, object instance, PropertyDescriptor descriptor, CodeStatementCollection statements);
    private void SerializeContentProperty(IDesignerSerializationManager manager, object instance, PropertyDescriptor descriptor, CodeStatementCollection statements);
    public virtual bool ShouldSerialize(IDesignerSerializationManager manager, object value, MemberDescriptor descriptor);
    private MemberRelationship GetRelationship(IDesignerSerializationManager manager, object value, MemberDescriptor descriptor);
}
internal class System.ComponentModel.Design.Serialization.RootCodeDomSerializer : CodeDomSerializer {
    private CodeMap _codeMap;
    public virtual object Serialize(IDesignerSerializationManager manager, object value);
    private void SerializeComponents(IDesignerSerializationManager manager, ICollection components, IComponent rootComponent);
    private void SerializeComponent(IDesignerSerializationManager manager, IComponent component);
    public virtual object Deserialize(IDesignerSerializationManager manager, object codeObject);
    private CodeMemberMethod GetInitializeMethod(CodeTypeDeclaration declaration);
}
public class System.ComponentModel.Design.Serialization.RootContext : object {
    private CodeExpression _expression;
    private object _value;
    public CodeExpression Expression { get; }
    public object Value { get; }
    public RootContext(CodeExpression expression, object value);
    public CodeExpression get_Expression();
    public object get_Value();
}
public class System.ComponentModel.Design.Serialization.SerializeAbsoluteContext : object {
    private MemberDescriptor _member;
    public MemberDescriptor Member { get; }
    public SerializeAbsoluteContext(MemberDescriptor member);
    public MemberDescriptor get_Member();
    public bool ShouldSerialize(MemberDescriptor member);
}
public class System.ComponentModel.Design.Serialization.StatementContext : object {
    private ObjectStatementCollection _statements;
    public ObjectStatementCollection StatementCollection { get; }
    public ObjectStatementCollection get_StatementCollection();
}
public class System.ComponentModel.Design.Serialization.TypeCodeDomSerializer : CodeDomSerializerBase {
    public virtual CodeTypeDeclaration Serialize(IDesignerSerializationManager manager, object root, ICollection members);
    public virtual object Deserialize(IDesignerSerializationManager manager, CodeTypeDeclaration declaration);
    protected virtual CodeMemberMethod GetInitializeMethod(IDesignerSerializationManager manager, CodeTypeDeclaration declaration, object value);
    protected virtual CodeMemberMethod[] GetInitializeMethods(IDesignerSerializationManager manager, CodeTypeDeclaration declaration);
}
internal class System.ComponentModel.Design.TypeDescriptorFilterService : object {
    private IServiceProvider _serviceProvider;
    public TypeDescriptorFilterService(IServiceProvider serviceProvider);
    public sealed virtual bool FilterAttributes(IComponent component, IDictionary attributes);
    public sealed virtual bool FilterEvents(IComponent component, IDictionary events);
    public sealed virtual bool FilterProperties(IComponent component, IDictionary properties);
    public sealed virtual void Dispose();
}
public abstract class System.ComponentModel.Design.UndoEngine : object {
    private bool _undoing;
    private UndoUnit _currentUnit;
    private IServiceProvider _provider;
    private bool _enabled;
    [CompilerGeneratedAttribute]
private EventHandler Undoing;
    [CompilerGeneratedAttribute]
private EventHandler Undone;
    public bool Enabled { get; public set; }
    public bool UndoInProgress { get; }
    protected UndoEngine(IServiceProvider provider);
    private void Enable();
    private void Disable();
    private void OnTransactionOpened(object sender, EventArgs args);
    private void OnTransactionClosed(object sender, DesignerTransactionCloseEventArgs args);
    private void OnComponentAdding(object sender, ComponentEventArgs args);
    private void OnComponentAdded(object sender, ComponentEventArgs args);
    private void OnComponentRemoving(object sender, ComponentEventArgs args);
    private void OnComponentRemoved(object sender, ComponentEventArgs args);
    private void OnComponentChanging(object sender, ComponentChangingEventArgs args);
    private void OnComponentChanged(object sender, ComponentChangedEventArgs args);
    private void OnComponentRename(object sender, ComponentRenameEventArgs args);
    [CompilerGeneratedAttribute]
public void add_Undoing(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Undoing(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_Undone(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Undone(EventHandler value);
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public bool get_UndoInProgress();
    protected virtual UndoUnit CreateUndoUnit(string name, bool primary);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected object GetRequiredService(Type serviceType);
    protected object GetService(Type serviceType);
    protected virtual void OnUndoing(EventArgs e);
    protected virtual void OnUndone(EventArgs e);
    protected abstract virtual void AddUndoUnit(UndoUnit unit);
    protected virtual void DiscardUndoUnit(UndoUnit unit);
}
public class System.Data.Design.MethodSignatureGenerator : object {
    [MonoTODOAttribute]
public CodeDomProvider CodeProvider { get; public set; }
    [MonoTODOAttribute]
public Type ContainerParameterType { get; public set; }
    [MonoTODOAttribute]
public string DataSetClassName { get; public set; }
    [MonoTODOAttribute]
public bool IsGetMethod { get; public set; }
    [MonoTODOAttribute]
public bool PagingMethod { get; public set; }
    [MonoTODOAttribute]
public ParameterGenerationOption ParameterOption { get; public set; }
    [MonoTODOAttribute]
public string TableClassName { get; public set; }
    public CodeDomProvider get_CodeProvider();
    public void set_CodeProvider(CodeDomProvider value);
    public Type get_ContainerParameterType();
    public void set_ContainerParameterType(Type value);
    public string get_DataSetClassName();
    public void set_DataSetClassName(string value);
    public bool get_IsGetMethod();
    public void set_IsGetMethod(bool value);
    public bool get_PagingMethod();
    public void set_PagingMethod(bool value);
    public ParameterGenerationOption get_ParameterOption();
    public void set_ParameterOption(ParameterGenerationOption value);
    public string get_TableClassName();
    public void set_TableClassName(string value);
    [MonoTODOAttribute]
public CodeMemberMethod GenerateMethod();
    [MonoTODOAttribute]
public string GenerateMethodSignature();
    [MonoTODOAttribute]
public CodeTypeDeclaration GenerateUpdatingMethods();
    [MonoTODOAttribute]
public void SetDesignTableContent(string designTableContent);
    [MonoTODOAttribute]
public void SetMethodSourceContent(string methodSourceContent);
}
public enum System.Data.Design.ParameterGenerationOption : Enum {
    public int value__;
    public static ParameterGenerationOption ClrTypes;
    public static ParameterGenerationOption SqlTypes;
    public static ParameterGenerationOption Objects;
}
public class System.Data.Design.TypedDataSetGenerator : object {
    [MonoTODOAttribute]
public static ICollection`1<Assembly> ReferencedAssemblies { get; }
    public static ICollection`1<Assembly> get_ReferencedAssemblies();
    public static string Generate(DataSet dataSet, CodeNamespace codeNamespace, CodeDomProvider codeProvider);
    public static string Generate(string inputFileContent, CodeCompileUnit compileUnit, CodeNamespace mainNamespace, CodeDomProvider codeProvider);
    [MonoTODOAttribute]
public static void Generate(string inputFileContent, CodeCompileUnit compileUnit, CodeNamespace mainNamespace, CodeDomProvider codeProvider, Hashtable customDBProviders);
    [MonoTODOAttribute]
public static void Generate(string inputFileContent, CodeCompileUnit compileUnit, CodeNamespace mainNamespace, CodeDomProvider codeProvider, DbProviderFactory specifiedFactory);
    [MonoTODOAttribute]
public static string Generate(string inputFileContent, CodeCompileUnit compileUnit, CodeNamespace mainNamespace, CodeDomProvider codeProvider, GenerateOption option);
    [MonoTODOAttribute]
public static void Generate(string inputFileContent, CodeCompileUnit compileUnit, CodeNamespace mainNamespace, CodeDomProvider codeProvider, Hashtable customDBProviders, GenerateOption option);
    [MonoTODOAttribute]
public static string GetProviderName(string inputFileContent);
    [MonoTODOAttribute]
public static string GetProviderName(string inputFileContent, string tableName);
}
public class System.Data.Design.TypedDataSetGeneratorException : DataException {
    private IList errorList;
    public IList ErrorList { get; }
    public TypedDataSetGeneratorException(IList list);
    protected TypedDataSetGeneratorException(SerializationInfo info, StreamingContext context);
    public TypedDataSetGeneratorException(string message);
    public TypedDataSetGeneratorException(string message, Exception innerException);
    public IList get_ErrorList();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class System.Data.Design.TypedDataSetSchemaImporterExtension : SchemaImporterExtension {
    protected TypedDataSetSchemaImporterExtension(GenerateOption dataSetGenerateOptions);
    [MonoTODOAttribute]
public virtual string ImportSchemaType(XmlSchemaType type, XmlSchemaObject context, XmlSchemas schemas, XmlSchemaImporter importer, CodeCompileUnit compileUnit, CodeNamespace mainNamespace, CodeGenerationOptions options, CodeDomProvider codeProvider);
    [MonoTODOAttribute]
public virtual string ImportSchemaType(string name, string namespaceName, XmlSchemaObject context, XmlSchemas schemas, XmlSchemaImporter importer, CodeCompileUnit compileUnit, CodeNamespace mainNamespace, CodeGenerationOptions options, CodeDomProvider codeProvider);
}
internal class System.Design.DummyClass : object {
}
public class System.Diagnostics.Design.LogConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    [MonoTODOAttribute]
public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
}
public class System.Diagnostics.Design.ProcessDesigner : ComponentDesigner {
    [MonoTODOAttribute]
protected virtual void PreFilterProperties(IDictionary properties);
}
public class System.Diagnostics.Design.ProcessModuleDesigner : ComponentDesigner {
    [MonoTODOAttribute]
protected virtual void PreFilterProperties(IDictionary properties);
}
public class System.Diagnostics.Design.ProcessThreadDesigner : ComponentDesigner {
    [MonoTODOAttribute]
protected virtual void PreFilterProperties(IDictionary properties);
}
internal class System.Diagnostics.Design.StringValueConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
public class System.Messaging.Design.MessageDesigner : ComponentDesigner {
    [MonoTODOAttribute]
protected virtual void PreFilterProperties(IDictionary properties);
}
public static class System.Resources.Tools.StronglyTypedResourceBuilder : object {
    private static Char[] specialChars;
    private static Char[] specialCharsNameSpace;
    private static StronglyTypedResourceBuilder();
    public static CodeCompileUnit Create(string resxFile, string baseName, string generatedCodeNamespace, CodeDomProvider codeProvider, bool internalClass, String[]& unmatchable);
    public static CodeCompileUnit Create(string resxFile, string baseName, string generatedCodeNamespace, string resourcesNamespace, CodeDomProvider codeProvider, bool internalClass, String[]& unmatchable);
    public static CodeCompileUnit Create(IDictionary resourceList, string baseName, string generatedCodeNamespace, CodeDomProvider codeProvider, bool internalClass, String[]& unmatchable);
    public static CodeCompileUnit Create(IDictionary resourceList, string baseName, string generatedCodeNamespace, string resourcesNamespace, CodeDomProvider codeProvider, bool internalClass, String[]& unmatchable);
    private static String[] ResourcePropertyGeneration(CodeTypeDeclaration resType, Dictionary`2<string, ResourceItem> resourceItemDict, bool internalClass);
    private static CodeCompileUnit GenerateCodeDOMBase(string baseNameToUse, string generatedCodeNamespaceToUse, string resourcesToUse, bool internalClass);
    private static void ProcessResourceList(Dictionary`2<string, ResourceItem> resourceItemDict, CodeDomProvider codeProvider);
    private static CodeTypeDeclaration GenerateBaseType(string baseNameToUse, bool internalClass);
    private static void GenerateFields(CodeTypeDeclaration resType);
    private static CodeConstructor GenerateConstructor();
    private static CodeAttributeDeclaration DefaultPropertyAttribute();
    private static CodeMemberProperty GenerateCultureProp(bool internalClass);
    private static CodeMemberProperty GenerateResourceManagerProp(string baseNameToUse, string resourcesToUse, bool internalClass);
    private static CodeMemberProperty GenerateStandardResourceProp(string propName, string resName, Type propertyType, bool isInternal);
    private static CodeMemberProperty GenerateStringResourceProp(string propName, string resName, bool isInternal);
    private static CodeMemberProperty GenerateStreamResourceProp(string propName, string resName, bool isInternal);
    private static CodeMemberProperty GeneratePropertyBase(string name, Type propertyType, bool isInternal, bool hasGet, bool hasSet);
    public static string VerifyResourceName(string key, CodeDomProvider provider);
    private static char VerifySpecialChar(char ch);
    private static string CleanNamespaceChars(string name);
}
public class System.ServiceProcess.Design.ServiceControllerDesigner : ComponentDesigner {
    [MonoTODOAttribute]
protected virtual void PreFilterProperties(IDictionary properties);
}
public class System.Web.UI.Design.AppSettingsExpressionEditor : ExpressionEditor {
    public virtual object EvaluateExpression(string expression, object parseTimeData, Type propertyType, IServiceProvider serviceProvider);
    public virtual ExpressionEditorSheet GetExpressionEditorSheet(string expression, IServiceProvider serviceProvider);
}
public class System.Web.UI.Design.CalendarDataBindingHandler : DataBindingHandler {
    [MonoTODOAttribute]
public virtual void DataBindControl(IDesignerHost designerHost, Control control);
}
public class System.Web.UI.Design.ClientScriptItem : object {
    private string text;
    private string source;
    private string language;
    private string type;
    private string id;
    public string Id { get; }
    public string Language { get; }
    public string Source { get; }
    public string Text { get; }
    public string Type { get; }
    public ClientScriptItem(string text, string source, string language, string type, string id);
    public string get_Id();
    public string get_Language();
    public string get_Source();
    public string get_Text();
    public string get_Type();
}
public class System.Web.UI.Design.ClientScriptItemCollection : ReadOnlyCollectionBase {
    public ClientScriptItemCollection(ClientScriptItem[] clientScriptItems);
}
public class System.Web.UI.Design.ColorBuilder : object {
    [MonoTODOAttribute]
public static string BuildColor(IComponent component, Control owner, string initialColor);
}
public class System.Web.UI.Design.ConnectionStringEditor : UITypeEditor {
    [MonoTODOAttribute]
public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    [MonoTODOAttribute]
public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
    [MonoTODOAttribute]
protected virtual string GetProviderName(object instance);
    [MonoTODOAttribute]
protected virtual void SetProviderName(object instance, DesignerDataConnection connection);
}
public class System.Web.UI.Design.ConnectionStringsExpressionEditor : ExpressionEditor {
    public virtual object EvaluateExpression(string expression, object parseTimeData, Type propertyType, IServiceProvider serviceProvider);
    public virtual ExpressionEditorSheet GetExpressionEditorSheet(string expression, IServiceProvider serviceProvider);
}
public class System.Web.UI.Design.ContainerControlDesigner : ControlDesigner {
    [MonoTODOAttribute]
public bool AllowResize { get; }
    [MonoTODOAttribute]
public string FrameCaption { get; }
    [MonoTODOAttribute]
public Style FrameStyle { get; }
    public virtual bool get_AllowResize();
    public virtual string get_FrameCaption();
    public virtual Style get_FrameStyle();
    [MonoTODOAttribute]
protected virtual void AddDesignTimeCssAttributes(IDictionary styleAttributes);
    [MonoTODOAttribute]
public virtual IDictionary GetDesignTimeCssAttributes();
    [MonoTODOAttribute]
public virtual string GetDesignTimeHtml(DesignerRegionCollection regions);
    [MonoTODOAttribute]
public virtual string GetEditableDesignerRegionContent(EditableDesignerRegion region);
    [MonoTODOAttribute]
public virtual string GetPersistenceContent();
    [MonoTODOAttribute]
public virtual void SetEditableDesignerRegionContent(EditableDesignerRegion region, string content);
}
public class System.Web.UI.Design.ContentDefinition : object {
    private string id;
    private string content;
    private string html;
    public string ContentPlaceHolderID { get; }
    public string DefaultContent { get; }
    public string DefaultDesignTimeHtml { get; }
    public ContentDefinition(string id, string content, string designTimeHtml);
    public string get_ContentPlaceHolderID();
    public string get_DefaultContent();
    public string get_DefaultDesignTimeHtml();
}
public enum System.Web.UI.Design.ContentDesignerState : Enum {
    public int value__;
    public static ContentDesignerState ShowDefaultContent;
    public static ContentDesignerState ShowUserContent;
}
[MonoTODOAttribute]
public class System.Web.UI.Design.ControlDesigner : HtmlControlDesigner {
    [MonoTODOAttribute]
public bool AllowResize { get; }
    [MonoTODOAttribute]
[ObsoleteAttribute("It is documented as not in use anymore", "True")]
protected object DesignTimeElementView { get; }
    [MonoTODOAttribute]
[ObsoleteAttribute("Use SetViewFlags(ViewFlags.DesignTimeHtmlRequiresLoadComplete, true)")]
public bool DesignTimeHtmlRequiresLoadComplete { get; }
    [MonoTODOAttribute]
public string ID { get; public set; }
    [MonoTODOAttribute]
[ObsoleteAttribute("Use Tag.SetDirty() and Tag.IsDirty instead.")]
public bool IsDirty { get; public set; }
    [MonoTODOAttribute]
[ObsoleteAttribute("Use ContainerControlDesigner and EditableDesignerRegion")]
public bool ReadOnly { get; public set; }
    [MonoNotSupportedAttribute("")]
public DesignerActionListCollection ActionLists { get; }
    [MonoNotSupportedAttribute("")]
public DesignerAutoFormatCollection AutoFormats { get; }
    [MonoNotSupportedAttribute("")]
protected bool DataBindingsEnabled { get; }
    [MonoNotSupportedAttribute("")]
protected ControlDesignerState DesignerState { get; }
    [MonoNotSupportedAttribute("")]
protected internal bool HidePropertiesInTemplateMode { get; }
    [MonoNotSupportedAttribute("")]
public bool InTemplateMode { get; }
    [MonoNotSupportedAttribute("")]
protected WebFormsRootDesigner RootDesigner { get; }
    [MonoNotSupportedAttribute("")]
protected IControlDesignerTag Tag { get; }
    [MonoNotSupportedAttribute("")]
public TemplateGroupCollection TemplateGroups { get; }
    [MonoNotSupportedAttribute("")]
public Control ViewControl { get; public set; }
    [MonoNotSupportedAttribute("")]
public bool ViewControlCreated { get; public set; }
    [MonoNotSupportedAttribute("")]
protected bool UsePreviewControl { get; }
    [MonoTODOAttribute]
protected string CreatePlaceHolderDesignTimeHtml();
    [MonoTODOAttribute]
protected string CreatePlaceHolderDesignTimeHtml(string instruction);
    [MonoTODOAttribute]
public virtual string GetDesignTimeHtml();
    [MonoNotSupportedAttribute("")]
public static DesignTimeResourceProviderFactory GetDesignTimeResourceProviderFactory(IServiceProvider serviceProvider);
    [MonoNotSupportedAttribute("")]
public static ViewRendering GetViewRendering(Control control);
    [MonoNotSupportedAttribute("")]
public static ViewRendering GetViewRendering(ControlDesigner designer);
    [MonoNotSupportedAttribute("")]
protected string CreateErrorDesignTimeHtml(string errorMessage);
    [MonoNotSupportedAttribute("")]
protected string CreateErrorDesignTimeHtml(string errorMessage, Exception e);
    [MonoNotSupportedAttribute("")]
protected virtual Control CreateViewControl();
    [MonoNotSupportedAttribute("")]
public Rectangle GetBounds();
    [MonoNotSupportedAttribute("")]
public virtual string GetDesignTimeHtml(DesignerRegionCollection regions);
    [MonoNotSupportedAttribute("")]
public virtual string GetEditableDesignerRegionContent(EditableDesignerRegion region);
    [MonoNotSupportedAttribute("")]
public virtual void SetEditableDesignerRegionContent(EditableDesignerRegion region, string content);
    [MonoNotSupportedAttribute("")]
public virtual string GetPersistenceContent();
    [MonoNotSupportedAttribute("")]
public ViewRendering GetViewRendering();
    [MonoTODOAttribute]
public void Invalidate();
    [MonoTODOAttribute]
public void Invalidate(Rectangle rectangle);
    [MonoTODOAttribute]
public static void InvokeTransactedChange(IComponent component, TransactedChangeCallback callback, object context, string description);
    [MonoTODOAttribute]
public static void InvokeTransactedChange(IComponent component, TransactedChangeCallback callback, object context, string description, MemberDescriptor member);
    [MonoTODOAttribute]
public static void InvokeTransactedChange(IServiceProvider serviceProvider, IComponent component, TransactedChangeCallback callback, object context, string description, MemberDescriptor member);
    [MonoTODOAttribute]
public void Localize(IDesignTimeResourceWriter resourceWriter);
    [MonoTODOAttribute]
public virtual void OnAutoFormatApplied(DesignerAutoFormat appliedAutoFormat);
    [MonoTODOAttribute]
public virtual void OnComponentChanging(object sender, ComponentChangingEventArgs ce);
    [MonoTODOAttribute]
protected virtual void OnPaint(PaintEventArgs e);
    [MonoTODOAttribute]
public void RegisterClone(object original, object clone);
    [MonoTODOAttribute]
protected void SetRegionContent(EditableDesignerRegion region, string content);
    [MonoTODOAttribute]
protected virtual string GetEmptyDesignTimeHtml();
    [MonoTODOAttribute]
protected virtual string GetErrorDesignTimeHtml(Exception e);
    [MonoTODOAttribute]
[ObsoleteAttribute("Use GetPersistenceContent() instead")]
public virtual string GetPersistInnerHtml();
    [MonoTODOAttribute]
public virtual void Initialize(IComponent component);
    [MonoTODOAttribute]
[ObsoleteAttribute("Use DataBindings.Contains(string) instead")]
public bool IsPropertyBound(string propName);
    [MonoTODOAttribute]
[ObsoleteAttribute("Use DataBindings.Changed event instead")]
protected virtual void OnBindingsCollectionChanged(string propName);
    [MonoTODOAttribute]
protected virtual void OnClick(DesignerRegionMouseEventArgs e);
    [MonoTODOAttribute]
public virtual void OnComponentChanged(object sender, ComponentChangedEventArgs ce);
    [MonoTODOAttribute]
[ObsoleteAttribute("Use OnComponentChanged() instead")]
protected virtual void OnControlResize();
    [MonoTODOAttribute]
protected virtual void PreFilterProperties(IDictionary properties);
    [MonoTODOAttribute]
[ObsoleteAttribute("Use OnComponentChanged() instead")]
public void RaiseResizeEvent();
    [MonoTODOAttribute]
public virtual void UpdateDesignTimeHtml();
    public virtual bool get_AllowResize();
    protected object get_DesignTimeElementView();
    public virtual bool get_DesignTimeHtmlRequiresLoadComplete();
    public virtual string get_ID();
    public virtual void set_ID(string value);
    public bool get_IsDirty();
    public void set_IsDirty(bool value);
    public bool get_ReadOnly();
    public void set_ReadOnly(bool value);
    public virtual DesignerActionListCollection get_ActionLists();
    public virtual DesignerAutoFormatCollection get_AutoFormats();
    protected virtual bool get_DataBindingsEnabled();
    [MonoNotSupportedAttribute("")]
protected ControlDesignerState get_DesignerState();
    protected internal virtual bool get_HidePropertiesInTemplateMode();
    public bool get_InTemplateMode();
    protected WebFormsRootDesigner get_RootDesigner();
    protected IControlDesignerTag get_Tag();
    [MonoNotSupportedAttribute("")]
protected void SetViewFlags(ViewFlags viewFlags, bool setFlag);
    [MonoNotSupportedAttribute("")]
public virtual TemplateGroupCollection get_TemplateGroups();
    [MonoNotSupportedAttribute("")]
public Control get_ViewControl();
    [MonoNotSupportedAttribute("")]
public void set_ViewControl(Control value);
    [MonoNotSupportedAttribute("")]
public virtual bool get_ViewControlCreated();
    [MonoNotSupportedAttribute("")]
public virtual void set_ViewControlCreated(bool value);
    protected virtual bool get_UsePreviewControl();
}
[DefaultMemberAttribute("Item")]
public class System.Web.UI.Design.ControlDesignerState : object {
    [MonoNotSupportedAttribute("")]
public object Item { get; public set; }
    [MonoNotSupportedAttribute("")]
public object get_Item(string key);
    [MonoNotSupportedAttribute("")]
public void set_Item(string key, object value);
}
public enum System.Web.UI.Design.ControlLocation : Enum {
    public int value__;
    public static ControlLocation Before;
    public static ControlLocation After;
    public static ControlLocation First;
    public static ControlLocation Last;
    public static ControlLocation FirstChild;
    public static ControlLocation LastChild;
}
public class System.Web.UI.Design.ControlParser : object {
    [MonoTODOAttribute]
public static Control ParseControl(IDesignerHost designerHost, string controlText);
    [MonoTODOAttribute]
public static Control ParseControl(IDesignerHost designerHost, string controlText, string directives);
    [MonoTODOAttribute]
public static Control[] ParseControls(IDesignerHost designerHost, string controlText);
    [MonoTODOAttribute]
public static ITemplate ParseTemplate(IDesignerHost designerHost, string templateText);
    [MonoTODOAttribute]
public static ITemplate ParseTemplate(IDesignerHost designerHost, string templateText, string directives);
}
public class System.Web.UI.Design.ControlPersister : object {
    [MonoTODOAttribute]
public static string PersistControl(Control control);
    [MonoTODOAttribute]
public static void PersistControl(TextWriter sw, Control control);
    [MonoTODOAttribute]
public static string PersistControl(Control control, IDesignerHost host);
    [MonoTODOAttribute]
public static void PersistControl(TextWriter sw, Control control, IDesignerHost host);
    [MonoTODOAttribute]
public static string PersistInnerProperties(object component, IDesignerHost host);
    [MonoTODOAttribute]
public static void PersistInnerProperties(TextWriter sw, object component, IDesignerHost host);
    [MonoNotSupportedAttribute("")]
public static string PersistTemplate(ITemplate template, IDesignerHost host);
    [MonoNotSupportedAttribute("")]
public static void PersistTemplate(TextWriter writer, ITemplate template, IDesignerHost host);
}
[ObsoleteAttribute("This class is not supposed to be in use anymore as DesignerActionList is supposed to be used for editing DataBinding")]
public class System.Web.UI.Design.DataBindingCollectionConverter : TypeConverter {
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
[ObsoleteAttribute("This class is not supposed to be in use anymore as DesignerActionList is supposed to be used for editing DataBinding")]
public class System.Web.UI.Design.DataBindingCollectionEditor : UITypeEditor {
    [MonoTODOAttribute]
public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
}
public abstract class System.Web.UI.Design.DataBindingHandler : object {
    public abstract virtual void DataBindControl(IDesignerHost designerHost, Control control);
}
public class System.Web.UI.Design.DataBindingValueUIHandler : object {
    [MonoTODOAttribute]
public void OnGetUIValueItem(ITypeDescriptorContext context, PropertyDescriptor propDesc, ArrayList valueUIItemList);
}
public class System.Web.UI.Design.DataColumnSelectionConverter : TypeConverter {
    [MonoTODOAttribute]
public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    [MonoTODOAttribute]
public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    [MonoTODOAttribute]
public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    [MonoTODOAttribute]
public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    [MonoTODOAttribute]
public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
}
public class System.Web.UI.Design.DataFieldConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    [MonoTODOAttribute]
public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
}
public class System.Web.UI.Design.DataMemberConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    [MonoTODOAttribute]
public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
}
public class System.Web.UI.Design.DataSetFieldSchema : object {
    [MonoTODOAttribute]
public Type DataType { get; }
    [MonoTODOAttribute]
public bool Identity { get; }
    [MonoTODOAttribute]
public bool IsReadOnly { get; }
    [MonoTODOAttribute]
public bool IsUnique { get; }
    [MonoTODOAttribute]
public int Length { get; }
    [MonoTODOAttribute]
public string Name { get; }
    [MonoTODOAttribute]
public bool Nullable { get; }
    [MonoTODOAttribute]
public int Precision { get; }
    [MonoTODOAttribute]
public bool PrimaryKey { get; }
    [MonoTODOAttribute]
public int Scale { get; }
    [MonoTODOAttribute]
public DataSetFieldSchema(DataColumn column);
    public sealed virtual Type get_DataType();
    public sealed virtual bool get_Identity();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool get_IsUnique();
    public sealed virtual int get_Length();
    public sealed virtual string get_Name();
    public sealed virtual bool get_Nullable();
    public sealed virtual int get_Precision();
    public sealed virtual bool get_PrimaryKey();
    public sealed virtual int get_Scale();
}
public class System.Web.UI.Design.DataSetSchema : object {
    [MonoTODOAttribute]
public DataSetSchema(DataSet dataSet);
    [MonoTODOAttribute]
public sealed virtual IDataSourceViewSchema[] GetViews();
}
public class System.Web.UI.Design.DataSetViewSchema : object {
    [MonoTODOAttribute]
public string Name { get; }
    [MonoTODOAttribute]
public DataSetViewSchema(DataTable dataTable);
    public sealed virtual string get_Name();
    [MonoTODOAttribute]
public sealed virtual IDataSourceViewSchema[] GetChildren();
    [MonoTODOAttribute]
public sealed virtual IDataSourceFieldSchema[] GetFields();
}
public class System.Web.UI.Design.DataSourceBooleanViewSchemaConverter : DataSourceViewSchemaConverter {
    [MonoTODOAttribute]
public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
}
public class System.Web.UI.Design.DataSourceConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    [MonoTODOAttribute]
public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    [MonoTODOAttribute]
protected virtual bool IsValidDataSource(IComponent component);
}
public class System.Web.UI.Design.DataSourceDesigner : ControlDesigner {
    [CompilerGeneratedAttribute]
private EventHandler DataSourceChanged;
    [CompilerGeneratedAttribute]
private EventHandler SchemaRefreshed;
    [MonoTODOAttribute]
public DesignerActionListCollection ActionLists { get; }
    [MonoTODOAttribute]
public bool CanConfigure { get; }
    [MonoTODOAttribute]
public bool CanRefreshSchema { get; }
    [MonoTODOAttribute]
protected bool SuppressingDataSourceEvents { get; }
    [MonoTODOAttribute]
public static bool SchemasEquivalent(IDataSourceSchema schema1, IDataSourceSchema schema2);
    [MonoTODOAttribute]
public static bool ViewSchemasEquivalent(IDataSourceViewSchema viewSchema1, IDataSourceViewSchema viewSchema2);
    [CompilerGeneratedAttribute]
public sealed virtual void add_DataSourceChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_DataSourceChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_SchemaRefreshed(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_SchemaRefreshed(EventHandler value);
    public virtual DesignerActionListCollection get_ActionLists();
    public virtual bool get_CanConfigure();
    public virtual bool get_CanRefreshSchema();
    protected bool get_SuppressingDataSourceEvents();
    [MonoTODOAttribute]
public virtual void Configure();
    [MonoTODOAttribute]
public virtual string GetDesignTimeHtml();
    [MonoTODOAttribute]
public virtual DesignerDataSourceView GetView(string viewName);
    [MonoTODOAttribute]
public virtual String[] GetViewNames();
    protected virtual void OnDataSourceChanged(EventArgs e);
    protected virtual void OnSchemaRefreshed(EventArgs e);
    [MonoTODOAttribute]
public virtual void RefreshSchema(bool preferSilent);
    [MonoTODOAttribute]
public virtual void ResumeDataSourceEvents();
    [MonoTODOAttribute]
public virtual void SuppressDataSourceEvents();
}
public class System.Web.UI.Design.DataSourceViewSchemaConverter : TypeConverter {
    [MonoTODOAttribute]
public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    [MonoTODOAttribute]
public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    [MonoTODOAttribute]
public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    [MonoTODOAttribute]
public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context, Type typeFilter);
    [MonoTODOAttribute]
public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    [MonoTODOAttribute]
public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
}
public abstract class System.Web.UI.Design.DesignerAutoFormat : object {
    [MonoTODOAttribute]
public string Name { get; }
    [MonoTODOAttribute]
public DesignerAutoFormatStyle Style { get; }
    protected DesignerAutoFormat(string name);
    public string get_Name();
    public DesignerAutoFormatStyle get_Style();
    public abstract virtual void Apply(Control control);
    [MonoTODOAttribute]
public virtual Control GetPreviewControl(Control runtimeControl);
    [MonoTODOAttribute]
public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
public class System.Web.UI.Design.DesignerAutoFormatCollection : object {
    [MonoTODOAttribute]
public int Count { get; }
    [MonoTODOAttribute]
public DesignerAutoFormat Item { get; }
    [MonoTODOAttribute]
public Size PreviewSize { get; }
    [MonoTODOAttribute]
public object SyncRoot { get; }
    [MonoTODOAttribute]
private int System.Collections.ICollection.Count { get; }
    [MonoTODOAttribute]
private bool System.Collections.ICollection.IsSynchronized { get; }
    [MonoTODOAttribute]
private bool System.Collections.IList.IsFixedSize { get; }
    [MonoTODOAttribute]
private bool System.Collections.IList.IsReadOnly { get; }
    [MonoTODOAttribute]
private object System.Collections.IList.Item { get; private set; }
    public int get_Count();
    public DesignerAutoFormat get_Item(int index);
    public Size get_PreviewSize();
    public sealed virtual object get_SyncRoot();
    [MonoTODOAttribute]
public int Add(DesignerAutoFormat format);
    [MonoTODOAttribute]
public sealed virtual void Clear();
    [MonoTODOAttribute]
public bool Contains(DesignerAutoFormat format);
    [MonoTODOAttribute]
public int IndexOf(DesignerAutoFormat format);
    [MonoTODOAttribute]
public void Insert(int index, DesignerAutoFormat format);
    [MonoTODOAttribute]
public void Remove(DesignerAutoFormat format);
    [MonoTODOAttribute]
public void RemoveAt(int index);
    [MonoTODOAttribute]
private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    [MonoTODOAttribute]
private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [MonoTODOAttribute]
private sealed virtual override int System.Collections.IList.Add(object item);
    [MonoTODOAttribute]
private sealed virtual override bool System.Collections.IList.Contains(object item);
    [MonoTODOAttribute]
private sealed virtual override int System.Collections.IList.IndexOf(object item);
    [MonoTODOAttribute]
private sealed virtual override void System.Collections.IList.Insert(int index, object item);
    [MonoTODOAttribute]
private sealed virtual override void System.Collections.IList.Remove(object item);
    [MonoTODOAttribute]
private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
}
public class System.Web.UI.Design.DesignerAutoFormatStyle : Style {
    [MonoTODOAttribute]
public VerticalAlign VerticalAlign { get; public set; }
    public VerticalAlign get_VerticalAlign();
    public void set_VerticalAlign(VerticalAlign value);
}
public abstract class System.Web.UI.Design.DesignerDataSourceView : object {
    [MonoNotSupportedAttribute("")]
public bool CanDelete { get; }
    [MonoNotSupportedAttribute("")]
public bool CanInsert { get; }
    [MonoNotSupportedAttribute("")]
public bool CanPage { get; }
    [MonoNotSupportedAttribute("")]
public bool CanRetrieveTotalRowCount { get; }
    [MonoNotSupportedAttribute("")]
public bool CanSort { get; }
    [MonoNotSupportedAttribute("")]
public bool CanUpdate { get; }
    [MonoNotSupportedAttribute("")]
public IDataSourceDesigner DataSourceDesigner { get; }
    [MonoNotSupportedAttribute("")]
public string Name { get; }
    [MonoNotSupportedAttribute("")]
public IDataSourceViewSchema Schema { get; }
    [MonoNotSupportedAttribute("")]
protected DesignerDataSourceView(IDataSourceDesigner owner, string viewName);
    [MonoNotSupportedAttribute("")]
public virtual bool get_CanDelete();
    [MonoNotSupportedAttribute("")]
public virtual bool get_CanInsert();
    [MonoNotSupportedAttribute("")]
public virtual bool get_CanPage();
    [MonoNotSupportedAttribute("")]
public virtual bool get_CanRetrieveTotalRowCount();
    [MonoNotSupportedAttribute("")]
public virtual bool get_CanSort();
    [MonoNotSupportedAttribute("")]
public virtual bool get_CanUpdate();
    [MonoNotSupportedAttribute("")]
public IDataSourceDesigner get_DataSourceDesigner();
    [MonoNotSupportedAttribute("")]
public string get_Name();
    [MonoNotSupportedAttribute("")]
public virtual IDataSourceViewSchema get_Schema();
    [MonoNotSupportedAttribute("")]
public virtual IEnumerable GetDesignTimeData(int minimumRows, Boolean& isSampleData);
}
public abstract class System.Web.UI.Design.DesignerHierarchicalDataSourceView : object {
    [MonoTODOAttribute]
public IHierarchicalDataSourceDesigner DataSourceDesigner { get; }
    [MonoTODOAttribute]
public string Path { get; }
    [MonoTODOAttribute]
public IDataSourceSchema Schema { get; }
    [MonoTODOAttribute]
protected DesignerHierarchicalDataSourceView(IHierarchicalDataSourceDesigner owner, string viewPath);
    public IHierarchicalDataSourceDesigner get_DataSourceDesigner();
    public string get_Path();
    public virtual IDataSourceSchema get_Schema();
    [MonoTODOAttribute]
public virtual IHierarchicalEnumerable GetDesignTimeData(Boolean& isSampleData);
}
public abstract class System.Web.UI.Design.DesignerObject : object {
    [MonoNotSupportedAttribute("")]
public ControlDesigner Designer { get; }
    [MonoNotSupportedAttribute("")]
public string Name { get; }
    [MonoNotSupportedAttribute("")]
public IDictionary Properties { get; }
    [MonoNotSupportedAttribute("")]
protected DesignerObject(ControlDesigner designer, string name);
    [MonoNotSupportedAttribute("")]
protected object GetService(Type serviceType);
    [MonoNotSupportedAttribute("")]
private sealed virtual override object System.IServiceProvider.GetService(Type serviceType);
    public ControlDesigner get_Designer();
    public string get_Name();
    public IDictionary get_Properties();
}
public class System.Web.UI.Design.DesignerRegion : DesignerObject {
    public static string DesignerRegionAttributeName;
    [MonoNotSupportedAttribute("")]
public string Description { get; public set; }
    [MonoNotSupportedAttribute("")]
public string DisplayName { get; public set; }
    [MonoNotSupportedAttribute("")]
public bool EnsureSize { get; public set; }
    [MonoNotSupportedAttribute("")]
public bool Highlight { get; public set; }
    [MonoNotSupportedAttribute("")]
public bool Selectable { get; public set; }
    [MonoNotSupportedAttribute("")]
public bool Selected { get; public set; }
    [MonoNotSupportedAttribute("")]
public object UserData { get; public set; }
    [MonoNotSupportedAttribute("")]
public DesignerRegion(ControlDesigner designer, string name);
    [MonoNotSupportedAttribute("")]
public DesignerRegion(ControlDesigner designer, string name, bool selectable);
    [MonoNotSupportedAttribute("")]
public Rectangle GetBounds();
    public virtual string get_Description();
    public virtual void set_Description(string value);
    public virtual string get_DisplayName();
    public virtual void set_DisplayName(string value);
    public bool get_EnsureSize();
    public void set_EnsureSize(bool value);
    public virtual bool get_Highlight();
    public virtual void set_Highlight(bool value);
    public virtual bool get_Selectable();
    public virtual void set_Selectable(bool value);
    public virtual bool get_Selected();
    public virtual void set_Selected(bool value);
    public object get_UserData();
    public void set_UserData(object value);
}
[DefaultMemberAttribute("Item")]
public class System.Web.UI.Design.DesignerRegionCollection : object {
    [MonoNotSupportedAttribute("")]
public int Count { get; }
    [MonoNotSupportedAttribute("")]
public bool IsFixedSize { get; }
    [MonoNotSupportedAttribute("")]
public bool IsReadOnly { get; }
    [MonoNotSupportedAttribute("")]
public bool IsSynchronized { get; }
    [MonoNotSupportedAttribute("")]
public DesignerRegion Item { get; public set; }
    [MonoNotSupportedAttribute("")]
public ControlDesigner Owner { get; }
    [MonoNotSupportedAttribute("")]
public object SyncRoot { get; }
    [MonoNotSupportedAttribute("")]
private int System.Collections.ICollection.Count { get; }
    [MonoNotSupportedAttribute("")]
private bool System.Collections.ICollection.IsSynchronized { get; }
    [MonoNotSupportedAttribute("")]
private object System.Collections.ICollection.SyncRoot { get; }
    [MonoNotSupportedAttribute("")]
private bool System.Collections.IList.IsFixedSize { get; }
    [MonoNotSupportedAttribute("")]
private bool System.Collections.IList.IsReadOnly { get; }
    [MonoNotSupportedAttribute("")]
private object System.Collections.IList.Item { get; private set; }
    [MonoNotSupportedAttribute("")]
public DesignerRegionCollection(ControlDesigner owner);
    [MonoNotSupportedAttribute("")]
public int Add(DesignerRegion region);
    [MonoNotSupportedAttribute("")]
public void Clear();
    [MonoNotSupportedAttribute("")]
public bool Contains(DesignerRegion region);
    [MonoNotSupportedAttribute("")]
public void CopyTo(Array array, int index);
    [MonoNotSupportedAttribute("")]
public IEnumerator GetEnumerator();
    [MonoNotSupportedAttribute("")]
public int IndexOf(DesignerRegion region);
    [MonoNotSupportedAttribute("")]
public void Insert(int index, DesignerRegion region);
    [MonoNotSupportedAttribute("")]
public void Remove(DesignerRegion region);
    [MonoNotSupportedAttribute("")]
public void RemoveAt(int index);
    public int get_Count();
    public bool get_IsFixedSize();
    public bool get_IsReadOnly();
    public bool get_IsSynchronized();
    public DesignerRegion get_Item(int index);
    public void set_Item(int index, DesignerRegion value);
    public ControlDesigner get_Owner();
    public object get_SyncRoot();
    [MonoNotSupportedAttribute("")]
private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    [MonoNotSupportedAttribute("")]
private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [MonoNotSupportedAttribute("")]
private sealed virtual override int System.Collections.IList.Add(object o);
    [MonoNotSupportedAttribute("")]
private sealed virtual override void System.Collections.IList.Clear();
    [MonoNotSupportedAttribute("")]
private sealed virtual override bool System.Collections.IList.Contains(object o);
    [MonoNotSupportedAttribute("")]
private sealed virtual override int System.Collections.IList.IndexOf(object o);
    [MonoNotSupportedAttribute("")]
private sealed virtual override void System.Collections.IList.Insert(int index, object o);
    [MonoNotSupportedAttribute("")]
private sealed virtual override void System.Collections.IList.Remove(object o);
    [MonoNotSupportedAttribute("")]
private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
}
public class System.Web.UI.Design.DesignerRegionMouseEventArgs : EventArgs {
    [MonoNotSupportedAttribute("")]
public Point Location { get; }
    [MonoNotSupportedAttribute("")]
public DesignerRegion Region { get; }
    [MonoNotSupportedAttribute("")]
public DesignerRegionMouseEventArgs(DesignerRegion region, Point location);
    [MonoNotSupportedAttribute("")]
public Point get_Location();
    [MonoNotSupportedAttribute("")]
public DesignerRegion get_Region();
}
public class System.Web.UI.Design.DesignTimeData : object {
    public static EventHandler DataBindingHandler;
    private static DesignTimeData();
    [MonoTODOAttribute]
public static DataTable CreateDummyDataBoundDataTable();
    [MonoTODOAttribute]
public static DataTable CreateDummyDataTable();
    [MonoTODOAttribute]
public static DataTable CreateSampleDataTable(IEnumerable referenceData);
    [MonoTODOAttribute]
public static DataTable CreateSampleDataTable(IEnumerable referenceData, bool useDataBoundData);
    [MonoTODOAttribute]
public static PropertyDescriptorCollection GetDataFields(IEnumerable dataSource);
    [MonoTODOAttribute]
public static IEnumerable GetDataMember(IListSource dataSource, string dataMember);
    [MonoTODOAttribute]
public static String[] GetDataMembers(object dataSource);
    [MonoTODOAttribute]
public static IEnumerable GetDesignTimeDataSource(DataTable dataTable, int minimumRows);
    [MonoTODOAttribute]
public static object GetSelectedDataSource(IComponent component, string dataSource);
    [MonoTODOAttribute]
public static IEnumerable GetSelectedDataSource(IComponent component, string dataSource, string dataMember);
    [MonoTODOAttribute]
private static void OnDataBind(object sender, EventArgs e);
}
public abstract class System.Web.UI.Design.DesignTimeResourceProviderFactory : object {
    public abstract virtual IResourceProvider CreateDesignTimeGlobalResourceProvider(IServiceProvider serviceProvider, string classKey);
    public abstract virtual IResourceProvider CreateDesignTimeLocalResourceProvider(IServiceProvider serviceProvider);
    public abstract virtual IDesignTimeResourceWriter CreateDesignTimeLocalResourceWriter(IServiceProvider serviceProvider);
}
public class System.Web.UI.Design.EditableDesignerRegion : DesignerRegion {
    [MonoNotSupportedAttribute("")]
public string Content { get; public set; }
    [MonoNotSupportedAttribute("")]
public bool ServerControlsOnly { get; public set; }
    [MonoNotSupportedAttribute("")]
public bool SupportsDataBinding { get; public set; }
    [MonoNotSupportedAttribute("")]
public EditableDesignerRegion(ControlDesigner owner, string name);
    [MonoNotSupportedAttribute("")]
public EditableDesignerRegion(ControlDesigner owner, string name, bool serverControlsOnly);
    [MonoNotSupportedAttribute("")]
public virtual ViewRendering GetChildViewRendering(Control control);
    public virtual string get_Content();
    public virtual void set_Content(string value);
    public bool get_ServerControlsOnly();
    public void set_ServerControlsOnly(bool value);
    public virtual bool get_SupportsDataBinding();
    public virtual void set_SupportsDataBinding(bool value);
}
public abstract class System.Web.UI.Design.ExpressionEditor : object {
    private Type expressionBuilderType;
    private string prefixFromReflection;
    public string ExpressionPrefix { get; }
    unknown Type ExpressionBuilderType {private set; }
    public string get_ExpressionPrefix();
    private void set_ExpressionBuilderType(Type value);
    public abstract virtual object EvaluateExpression(string expression, object parseTimeData, Type propertyType, IServiceProvider serviceProvider);
    public static ExpressionEditor GetExpressionEditor(string expressionPrefix, IServiceProvider serviceProvider);
    [MonoTODOAttribute("the docs make it sound like this still requires accessing <expressionBuilders>")]
public static ExpressionEditor GetExpressionEditor(Type expressionBuilderType, IServiceProvider serviceProvider);
    public virtual ExpressionEditorSheet GetExpressionEditorSheet(string expression, IServiceProvider serviceProvider);
}
public abstract class System.Web.UI.Design.ExpressionEditorSheet : object {
    private IServiceProvider serviceProvider;
    [BrowsableAttribute("False")]
public bool IsValid { get; }
    [BrowsableAttribute("False")]
public IServiceProvider ServiceProvider { get; }
    protected ExpressionEditorSheet(IServiceProvider serviceProvider);
    public abstract virtual string GetExpression();
    public virtual bool get_IsValid();
    public IServiceProvider get_ServiceProvider();
}
public class System.Web.UI.Design.ExpressionsCollectionConverter : TypeConverter {
    [MonoTODOAttribute]
public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public class System.Web.UI.Design.ExpressionsCollectionEditor : UITypeEditor {
    [MonoTODOAttribute]
public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    [MonoTODOAttribute]
public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
}
public class System.Web.UI.Design.HierarchicalDataSourceConverter : DataSourceConverter {
    [MonoTODOAttribute]
protected virtual bool IsValidDataSource(IComponent component);
}
public class System.Web.UI.Design.HierarchicalDataSourceDesigner : ControlDesigner {
    [CompilerGeneratedAttribute]
private EventHandler DataSourceChanged;
    [CompilerGeneratedAttribute]
private EventHandler SchemaRefreshed;
    [MonoTODOAttribute]
public DesignerActionListCollection ActionLists { get; }
    [MonoTODOAttribute]
public bool CanConfigure { get; }
    [MonoTODOAttribute]
public bool CanRefreshSchema { get; }
    [MonoTODOAttribute]
protected bool SuppressingDataSourceEvents { get; }
    [CompilerGeneratedAttribute]
public sealed virtual void add_DataSourceChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_DataSourceChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_SchemaRefreshed(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_SchemaRefreshed(EventHandler value);
    public virtual DesignerActionListCollection get_ActionLists();
    public virtual bool get_CanConfigure();
    public virtual bool get_CanRefreshSchema();
    protected bool get_SuppressingDataSourceEvents();
    public virtual void Configure();
    [MonoTODOAttribute]
public virtual string GetDesignTimeHtml();
    [MonoTODOAttribute]
public virtual DesignerHierarchicalDataSourceView GetView(string viewPath);
    [MonoTODOAttribute]
protected virtual void OnDataSourceChanged(EventArgs e);
    [MonoTODOAttribute]
protected virtual void OnSchemaRefreshed(EventArgs e);
    [MonoTODOAttribute]
public virtual void RefreshSchema(bool preferSilent);
    [MonoTODOAttribute]
public virtual void ResumeDataSourceEvents();
    [MonoTODOAttribute]
public virtual void SuppressDataSourceEvents();
}
[MonoTODOAttribute]
public class System.Web.UI.Design.HtmlControlDesigner : ComponentDesigner {
    [MonoTODOAttribute]
[ObsoleteAttribute("Use ControlDesigner.Tag instead")]
public IHtmlControlDesignerBehavior Behavior { get; public set; }
    [MonoTODOAttribute]
public DataBindingCollection DataBindings { get; }
    [MonoTODOAttribute]
[ObsoleteAttribute("Use new WebFormsRootDesigner feature instead. It is not used anymore", "True")]
protected object DesignTimeElement { get; }
    [MonoTODOAttribute]
[ObsoleteAttribute("Code serialization is not supported in 2.0 anymore")]
public bool ShouldCodeSerialize { get; public set; }
    public ExpressionBindingCollection Expressions { get; }
    [MonoTODOAttribute]
protected virtual void Dispose(bool disposing);
    [MonoTODOAttribute]
[ObsoleteAttribute("Use ControlDesigner.Tag instead")]
protected virtual void OnBehaviorAttached();
    [MonoTODOAttribute]
[ObsoleteAttribute("Use ControlDesigner.Tag instead")]
protected virtual void OnBehaviorDetaching();
    [MonoTODOAttribute]
[ObsoleteAttribute("Use DataBinding.Changed event instead")]
protected virtual void OnBindingsCollectionChanged(string propName);
    [MonoTODOAttribute]
public virtual void OnSetParent();
    [MonoTODOAttribute]
protected virtual void PreFilterEvents(IDictionary events);
    [MonoTODOAttribute]
protected virtual void PreFilterProperties(IDictionary properties);
    public IHtmlControlDesignerBehavior get_Behavior();
    public void set_Behavior(IHtmlControlDesignerBehavior value);
    public DataBindingCollection get_DataBindings();
    protected object get_DesignTimeElement();
    public virtual bool get_ShouldCodeSerialize();
    public virtual void set_ShouldCodeSerialize(bool value);
    public ExpressionBindingCollection get_Expressions();
    public virtual void Initialize(IComponent component);
}
public class System.Web.UI.Design.HtmlIntrinsicControlDesigner : HtmlControlDesigner {
}
public class System.Web.UI.Design.HyperLinkDataBindingHandler : DataBindingHandler {
    [MonoTODOAttribute]
public virtual void DataBindControl(IDesignerHost designerHost, Control control);
}
public interface System.Web.UI.Design.IContentResolutionService {
    public IDictionary ContentDefinitions { get; }
    public abstract virtual ContentDesignerState GetContentDesignerState(string identifier);
    public abstract virtual void SetContentDesignerState(string identifier, ContentDesignerState state);
    public abstract virtual IDictionary get_ContentDefinitions();
}
[ObsoleteAttribute("Use IControlDesignerTag interface instead")]
public interface System.Web.UI.Design.IControlDesignerBehavior {
    public object DesignTimeElementView { get; }
    public string DesignTimeHtml { get; public set; }
    public abstract virtual void OnTemplateModeChanged();
    public abstract virtual object get_DesignTimeElementView();
    public abstract virtual string get_DesignTimeHtml();
    public abstract virtual void set_DesignTimeHtml(string value);
}
public interface System.Web.UI.Design.IControlDesignerTag {
    public bool IsDirty { get; }
    public abstract virtual bool get_IsDirty();
    public abstract virtual string GetAttribute(string name);
    public abstract virtual string GetContent();
    public abstract virtual string GetOuterContent();
    public abstract virtual void RemoveAttribute(string name);
    public abstract virtual void SetAttribute(string name, string value);
    public abstract virtual void SetContent(string content);
    public abstract virtual void SetDirty(bool dirty);
}
public interface System.Web.UI.Design.IControlDesignerView {
    public DesignerRegion ContainingRegion { get; }
    public IDesigner NamingContainerDesigner { get; }
    public bool SupportsRegions { get; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_ViewEvent(ViewEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ViewEvent(ViewEventHandler value);
    public abstract virtual DesignerRegion get_ContainingRegion();
    public abstract virtual IDesigner get_NamingContainerDesigner();
    public abstract virtual bool get_SupportsRegions();
    public abstract virtual Rectangle GetBounds(DesignerRegion region);
    public abstract virtual void Invalidate(Rectangle rectangle);
    public abstract virtual void SetFlags(ViewFlags viewFlags, bool setFlag);
    public abstract virtual void SetRegionContent(EditableDesignerRegion region, string content);
    public abstract virtual void Update();
}
public interface System.Web.UI.Design.IDataBindingSchemaProvider {
    public bool CanRefreshSchema { get; }
    public IDataSourceViewSchema Schema { get; }
    public abstract virtual bool get_CanRefreshSchema();
    public abstract virtual IDataSourceViewSchema get_Schema();
    public abstract virtual void RefreshSchema(bool preferSilent);
}
public interface System.Web.UI.Design.IDataSourceDesigner {
    public bool CanConfigure { get; }
    public bool CanRefreshSchema { get; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_DataSourceChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DataSourceChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_SchemaRefreshed(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_SchemaRefreshed(EventHandler value);
    public abstract virtual bool get_CanConfigure();
    public abstract virtual bool get_CanRefreshSchema();
    public abstract virtual void Configure();
    public abstract virtual DesignerDataSourceView GetView(string viewName);
    public abstract virtual String[] GetViewNames();
    public abstract virtual void RefreshSchema(bool preferSilent);
    public abstract virtual void ResumeDataSourceEvents();
    public abstract virtual void SuppressDataSourceEvents();
}
public interface System.Web.UI.Design.IDataSourceFieldSchema {
    public Type DataType { get; }
    public bool Identity { get; }
    public bool IsReadOnly { get; }
    public bool IsUnique { get; }
    public int Length { get; }
    public string Name { get; }
    public bool Nullable { get; }
    public int Precision { get; }
    public bool PrimaryKey { get; }
    public int Scale { get; }
    public abstract virtual Type get_DataType();
    public abstract virtual bool get_Identity();
    public abstract virtual bool get_IsReadOnly();
    public abstract virtual bool get_IsUnique();
    public abstract virtual int get_Length();
    public abstract virtual string get_Name();
    public abstract virtual bool get_Nullable();
    public abstract virtual int get_Precision();
    public abstract virtual bool get_PrimaryKey();
    public abstract virtual int get_Scale();
}
public interface System.Web.UI.Design.IDataSourceProvider {
    public abstract virtual IEnumerable GetResolvedSelectedDataSource();
    public abstract virtual object GetSelectedDataSource();
}
public interface System.Web.UI.Design.IDataSourceSchema {
    public abstract virtual IDataSourceViewSchema[] GetViews();
}
public interface System.Web.UI.Design.IDataSourceViewSchema {
    public string Name { get; }
    public abstract virtual string get_Name();
    public abstract virtual IDataSourceViewSchema[] GetChildren();
    public abstract virtual IDataSourceFieldSchema[] GetFields();
}
public interface System.Web.UI.Design.IDesignTimeResourceProviderFactoryService {
    public abstract virtual DesignTimeResourceProviderFactory GetFactory();
}
public interface System.Web.UI.Design.IDesignTimeResourceWriter {
    public abstract virtual string CreateResourceKey(string resourceName, object obj);
}
public interface System.Web.UI.Design.IDocumentProjectItem {
    public abstract virtual Stream GetContents();
    public abstract virtual void Open();
}
public interface System.Web.UI.Design.IFolderProjectItem {
    public ICollection Children { get; }
    public abstract virtual ICollection get_Children();
    public abstract virtual IDocumentProjectItem AddDocument(string name, Byte[] content);
    public abstract virtual IFolderProjectItem AddFolder(string name);
}
public interface System.Web.UI.Design.IHierarchicalDataSourceDesigner {
    public bool CanConfigure { get; }
    public bool CanRefreshSchema { get; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_DataSourceChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DataSourceChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_SchemaRefreshed(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_SchemaRefreshed(EventHandler value);
    public abstract virtual bool get_CanConfigure();
    public abstract virtual bool get_CanRefreshSchema();
    public abstract virtual void Configure();
    public abstract virtual DesignerHierarchicalDataSourceView GetView(string viewPath);
    public abstract virtual void RefreshSchema(bool preferSilent);
    public abstract virtual void ResumeDataSourceEvents();
    public abstract virtual void SuppressDataSourceEvents();
}
[ObsoleteAttribute("Use IControlDesignerTag and IControlDesignerView instead")]
public interface System.Web.UI.Design.IHtmlControlDesignerBehavior {
    public HtmlControlDesigner Designer { get; public set; }
    public object DesignTimeElement { get; }
    public abstract virtual object GetAttribute(string attribute, bool ignoreCase);
    public abstract virtual object GetStyleAttribute(string attribute, bool designTimeOnly, bool ignoreCase);
    public abstract virtual void RemoveAttribute(string attribute, bool ignoreCase);
    public abstract virtual void RemoveStyleAttribute(string attribute, bool designTimeOnly, bool ignoreCase);
    public abstract virtual void SetAttribute(string attribute, object value, bool ignoreCase);
    public abstract virtual void SetStyleAttribute(string attribute, bool designTimeOnly, object value, bool ignoreCase);
    public abstract virtual HtmlControlDesigner get_Designer();
    public abstract virtual void set_Designer(HtmlControlDesigner value);
    public abstract virtual object get_DesignTimeElement();
}
public class System.Web.UI.Design.ImageUrlEditor : UrlEditor {
    protected string Caption { get; }
    protected string Filter { get; }
    protected virtual string get_Caption();
    protected virtual string get_Filter();
}
public interface System.Web.UI.Design.IProjectItem {
    public string AppRelativeUrl { get; }
    public string Name { get; }
    public IProjectItem Parent { get; }
    public string PhysicalPath { get; }
    public abstract virtual string get_AppRelativeUrl();
    public abstract virtual string get_Name();
    public abstract virtual IProjectItem get_Parent();
    public abstract virtual string get_PhysicalPath();
}
[ObsoleteAttribute("Template editing is supported in ControlDesigner.TemplateGroups with SetViewFlags(ViewFlags.TemplateEditing, true) in 2.0.")]
public interface System.Web.UI.Design.ITemplateEditingFrame {
    public Style ControlStyle { get; }
    public int InitialHeight { get; public set; }
    public int InitialWidth { get; public set; }
    public string Name { get; }
    public String[] TemplateNames { get; }
    public Style[] TemplateStyles { get; }
    public TemplateEditingVerb Verb { get; public set; }
    public abstract virtual void Close(bool saveChanges);
    public abstract virtual void Open();
    public abstract virtual void Resize(int width, int height);
    public abstract virtual void Save();
    public abstract virtual void UpdateControlName(string newName);
    public abstract virtual Style get_ControlStyle();
    public abstract virtual int get_InitialHeight();
    public abstract virtual void set_InitialHeight(int value);
    public abstract virtual int get_InitialWidth();
    public abstract virtual void set_InitialWidth(int value);
    public abstract virtual string get_Name();
    public abstract virtual String[] get_TemplateNames();
    public abstract virtual Style[] get_TemplateStyles();
    public abstract virtual TemplateEditingVerb get_Verb();
    public abstract virtual void set_Verb(TemplateEditingVerb value);
}
[ObsoleteAttribute("Template editing is supported in ControlDesigner.TemplateGroups with SetViewFlags(ViewFlags.TemplateEditing, true) in 2.0.")]
public interface System.Web.UI.Design.ITemplateEditingService {
    public bool SupportsNestedTemplateEditing { get; }
    public abstract virtual ITemplateEditingFrame CreateFrame(TemplatedControlDesigner designer, string frameName, String[] templateNames);
    public abstract virtual ITemplateEditingFrame CreateFrame(TemplatedControlDesigner designer, string frameName, String[] templateNames, Style controlStyle, Style[] templateStyles);
    public abstract virtual string GetContainingTemplateName(Control control);
    public abstract virtual bool get_SupportsNestedTemplateEditing();
}
public interface System.Web.UI.Design.IWebAdministrationService {
    public abstract virtual void Start(IDictionary arguments);
}
[GuidAttribute("cff39fa8-5607-4b6d-86f3-cc80b3cfe2dd")]
public interface System.Web.UI.Design.IWebApplication {
    public IProjectItem RootProjectItem { get; }
    public abstract virtual IProjectItem GetProjectItemFromUrl(string appRelativeUrl);
    public abstract virtual Configuration OpenWebConfiguration(bool isReadOnly);
    public abstract virtual IProjectItem get_RootProjectItem();
}
[ObsoleteAttribute("Use new WebFormsReferenceManager feature")]
public interface System.Web.UI.Design.IWebFormReferenceManager {
    public abstract virtual Type GetObjectType(string tagPrefix, string typeName);
    public abstract virtual string GetRegisterDirectives();
    public abstract virtual string GetTagPrefix(Type objectType);
}
public interface System.Web.UI.Design.IWebFormsBuilderUIService {
    public abstract virtual string BuildColor(Control owner, string initialColor);
    public abstract virtual string BuildUrl(Control owner, string initialUrl, string baseUrl, string caption, string filter, UrlBuilderOptions options);
}
[ObsoleteAttribute("Use new WebFormsReferenceManager feature")]
public interface System.Web.UI.Design.IWebFormsDocumentService {
    public string DocumentUrl { get; }
    public bool IsLoading { get; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_LoadComplete(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_LoadComplete(EventHandler value);
    public abstract virtual object CreateDiscardableUndoUnit();
    public abstract virtual void DiscardUndoUnit(object discardableUndoUnit);
    public abstract virtual void EnableUndo(bool enable);
    public abstract virtual void UpdateSelection();
    public abstract virtual string get_DocumentUrl();
    public abstract virtual bool get_IsLoading();
}
public class System.Web.UI.Design.MailFileEditor : UrlEditor {
    [MonoTODOAttribute]
protected string Caption { get; }
    [MonoTODOAttribute]
protected string Filter { get; }
    protected virtual string get_Caption();
    protected virtual string get_Filter();
}
public class System.Web.UI.Design.MdbDataFileEditor : UrlEditor {
    [MonoTODOAttribute]
protected string Caption { get; }
    [MonoTODOAttribute]
protected string Filter { get; }
    protected virtual string get_Caption();
    protected virtual string get_Filter();
}
[ObsoleteAttribute("Use ContainerControlDesigner instead")]
[MonoTODOAttribute]
public class System.Web.UI.Design.ReadWriteControlDesigner : ControlDesigner {
    [MonoTODOAttribute]
protected virtual void MapPropertyToStyle(string propName, object varPropValue);
    [ObsoleteAttribute("Use ControlDesigner.Tag instead")]
[MonoTODOAttribute]
protected virtual void OnBehaviorAttached();
    [MonoTODOAttribute]
public virtual void OnComponentChanged(object sender, ComponentChangedEventArgs ce);
    [MonoTODOAttribute]
public virtual string GetDesignTimeHtml();
    [MonoTODOAttribute]
public virtual void UpdateDesignTimeHtml();
}
public class System.Web.UI.Design.ResourceExpressionEditor : ExpressionEditor {
    public virtual object EvaluateExpression(string expression, object parseTimeData, Type propertyType, IServiceProvider serviceProvider);
    public virtual ExpressionEditorSheet GetExpressionEditorSheet(string expression, IServiceProvider serviceProvider);
}
public class System.Web.UI.Design.ResourceExpressionEditorSheet : ExpressionEditorSheet {
    [MonoTODOAttribute]
[DefaultValueAttribute("")]
public string ClassKey { get; public set; }
    [MonoTODOAttribute]
public bool IsValid { get; }
    [MonoTODOAttribute]
[DefaultValueAttribute("")]
public string ResourceKey { get; public set; }
    [MonoTODOAttribute]
public ResourceExpressionEditorSheet(string expression, IServiceProvider serviceProvider);
    public string get_ClassKey();
    public void set_ClassKey(string value);
    public virtual bool get_IsValid();
    public string get_ResourceKey();
    public void set_ResourceKey(string value);
    [MonoTODOAttribute]
public virtual string GetExpression();
}
public class System.Web.UI.Design.SkinIDTypeConverter : TypeConverter {
    [MonoTODOAttribute]
public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    [MonoTODOAttribute]
public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destType);
    [MonoTODOAttribute]
public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    [MonoTODOAttribute]
public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    [MonoTODOAttribute]
public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    [MonoTODOAttribute]
public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
}
[AttributeUsageAttribute("4")]
public class System.Web.UI.Design.SupportsPreviewControlAttribute : Attribute {
    private bool is_default;
    private bool supports_preview;
    public static SupportsPreviewControlAttribute Default;
    public bool SupportsPreviewControl { get; }
    public SupportsPreviewControlAttribute(bool supportsPreviewControl);
    private SupportsPreviewControlAttribute(bool supportsPreviewControl, bool isDefault);
    private static SupportsPreviewControlAttribute();
    public bool get_SupportsPreviewControl();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual bool IsDefaultAttribute();
}
public abstract class System.Web.UI.Design.TemplatedControlDesigner : ControlDesigner {
    private ITemplateEditingFrame _activeTemplateFrame;
    private bool _enableTemplateEditing;
    private bool _templateMode;
    private EventHandler _templateVerbHandler;
    protected bool DataBindingsEnabled { get; }
    public TemplateGroupCollection TemplateGroups { get; }
    [ObsoleteAttribute("Template editing is supported in ControlDesigner.TemplateGroups with SetViewFlags(ViewFlags.TemplateEditing, true) in 2.0.")]
public ITemplateEditingFrame ActiveTemplateEditingFrame { get; }
    public bool CanEnterTemplateMode { get; }
    [ObsoleteAttribute("Use ControlDesigner.InTemplateMode instead")]
public bool InTemplateMode { get; }
    internal EventHandler TemplateEditingVerbHandler { get; }
    [MonoTODOAttribute]
public virtual void Initialize(IComponent component);
    [ObsoleteAttribute("Template editing is supported in ControlDesigner.TemplateGroups with SetViewFlags(ViewFlags.TemplateEditing, true) in 2.0.")]
protected abstract virtual ITemplateEditingFrame CreateTemplateEditingFrame(TemplateEditingVerb verb);
    [ObsoleteAttribute("Template editing is supported in ControlDesigner.TemplateGroups with SetViewFlags(ViewFlags.TemplateEditing, true) in 2.0.")]
protected abstract virtual TemplateEditingVerb[] GetCachedTemplateEditingVerbs();
    [ObsoleteAttribute("Template editing is supported in ControlDesigner.TemplateGroups with SetViewFlags(ViewFlags.TemplateEditing, true) in 2.0.")]
public abstract virtual string GetTemplateContent(ITemplateEditingFrame editingFrame, string templateName, Boolean& allowEditing);
    [ObsoleteAttribute("Template editing is supported in ControlDesigner.TemplateGroups with SetViewFlags(ViewFlags.TemplateEditing, true) in 2.0.")]
public abstract virtual void SetTemplateContent(ITemplateEditingFrame editingFrame, string templateName, string templateContent);
    [MonoTODOAttribute]
[ObsoleteAttribute("Template editing is supported in ControlDesigner.TemplateGroups with SetViewFlags(ViewFlags.TemplateEditing, true) in 2.0.")]
public void EnterTemplateMode(ITemplateEditingFrame newTemplateEditingFrame);
    [MonoTODOAttribute]
[ObsoleteAttribute("Template editing is supported in ControlDesigner.TemplateGroups with SetViewFlags(ViewFlags.TemplateEditing, true) in 2.0.")]
public void ExitTemplateMode(bool fSwitchingTemplates, bool fNested, bool fSave);
    [ObsoleteAttribute("Template editing is supported in ControlDesigner.TemplateGroups with SetViewFlags(ViewFlags.TemplateEditing, true) in 2.0.")]
public virtual string GetTemplateContainerDataItemProperty(string templateName);
    [ObsoleteAttribute("Template editing is supported in ControlDesigner.TemplateGroups with SetViewFlags(ViewFlags.TemplateEditing, true) in 2.0.")]
public virtual IEnumerable GetTemplateContainerDataSource(string templateName);
    [MonoTODOAttribute]
[ObsoleteAttribute("Template editing is supported in ControlDesigner.TemplateGroups with SetViewFlags(ViewFlags.TemplateEditing, true) in 2.0.")]
public TemplateEditingVerb[] GetTemplateEditingVerbs();
    [MonoTODOAttribute]
protected ITemplate GetTemplateFromText(string text);
    [ObsoleteAttribute("Template editing is supported in ControlDesigner.TemplateGroups with SetViewFlags(ViewFlags.TemplateEditing, true) in 2.0.")]
public virtual Type GetTemplatePropertyParentType(string templateName);
    [MonoTODOAttribute]
protected string GetTextFromTemplate(ITemplate template);
    [MonoTODOAttribute]
[ObsoleteAttribute("Use ControlDesigner.Tag instead")]
protected virtual void OnBehaviorAttached();
    [MonoTODOAttribute]
public virtual void OnComponentChanged(object sender, ComponentChangedEventArgs ce);
    [MonoTODOAttribute]
public virtual void OnSetParent();
    [MonoTODOAttribute]
protected virtual void OnTemplateModeChanged();
    [MonoTODOAttribute]
protected void SaveActiveTemplateEditingFrame();
    [MonoTODOAttribute]
public virtual void UpdateDesignTimeHtml();
    protected virtual bool get_DataBindingsEnabled();
    public virtual TemplateGroupCollection get_TemplateGroups();
    public ITemplateEditingFrame get_ActiveTemplateEditingFrame();
    public bool get_CanEnterTemplateMode();
    public bool get_InTemplateMode();
    internal EventHandler get_TemplateEditingVerbHandler();
}
public class System.Web.UI.Design.TemplatedEditableDesignerRegion : EditableDesignerRegion {
    [MonoNotSupportedAttribute("")]
public bool IsSingleInstanceTemplate { get; public set; }
    [MonoNotSupportedAttribute("")]
public bool SupportsDataBinding { get; public set; }
    [MonoNotSupportedAttribute("")]
public TemplateDefinition TemplateDefinition { get; }
    [MonoNotSupportedAttribute("")]
public TemplatedEditableDesignerRegion(TemplateDefinition templateDefinition);
    [MonoNotSupportedAttribute("")]
public virtual bool get_IsSingleInstanceTemplate();
    [MonoNotSupportedAttribute("")]
public virtual void set_IsSingleInstanceTemplate(bool value);
    [MonoNotSupportedAttribute("")]
public virtual bool get_SupportsDataBinding();
    [MonoNotSupportedAttribute("")]
public virtual void set_SupportsDataBinding(bool value);
    [MonoNotSupportedAttribute("")]
public TemplateDefinition get_TemplateDefinition();
}
public class System.Web.UI.Design.TemplateDefinition : DesignerObject {
    [MonoNotSupportedAttribute("")]
public bool AllowEditing { get; }
    [MonoNotSupportedAttribute("")]
public string Content { get; public set; }
    [MonoNotSupportedAttribute("")]
public bool ServerControlsOnly { get; }
    [MonoNotSupportedAttribute("")]
public Style Style { get; }
    [MonoNotSupportedAttribute("")]
public bool SupportsDataBinding { get; public set; }
    [MonoNotSupportedAttribute("")]
public object TemplatedObject { get; }
    [MonoNotSupportedAttribute("")]
public string TemplatePropertyName { get; }
    [MonoNotSupportedAttribute("")]
public TemplateDefinition(ControlDesigner designer, string name, object templatedObject, string templatePropertyName);
    [MonoNotSupportedAttribute("")]
public TemplateDefinition(ControlDesigner designer, string name, object templatedObject, string templatePropertyName, bool serverControlsOnly);
    [MonoNotSupportedAttribute("")]
public TemplateDefinition(ControlDesigner designer, string name, object templatedObject, string templatePropertyName, Style style);
    [MonoNotSupportedAttribute("")]
public TemplateDefinition(ControlDesigner designer, string name, object templatedObject, string templatePropertyName, Style style, bool serverControlsOnly);
    [MonoNotSupportedAttribute("")]
public virtual bool get_AllowEditing();
    [MonoNotSupportedAttribute("")]
public virtual string get_Content();
    [MonoNotSupportedAttribute("")]
public virtual void set_Content(string value);
    [MonoNotSupportedAttribute("")]
public bool get_ServerControlsOnly();
    [MonoNotSupportedAttribute("")]
public Style get_Style();
    [MonoNotSupportedAttribute("")]
public bool get_SupportsDataBinding();
    [MonoNotSupportedAttribute("")]
public void set_SupportsDataBinding(bool value);
    [MonoNotSupportedAttribute("")]
public object get_TemplatedObject();
    [MonoNotSupportedAttribute("")]
public string get_TemplatePropertyName();
}
[ObsoleteAttribute("Template editing is supported in ControlDesigner.TemplateGroups with SetViewFlags(ViewFlags.TemplateEditing, true) in 2.0.")]
public class System.Web.UI.Design.TemplateEditingService : object {
    private IDesignerHost _designerHost;
    public bool SupportsNestedTemplateEditing { get; }
    public TemplateEditingService(IDesignerHost designerHost);
    protected virtual override void Finalize();
    [MonoTODOAttribute]
public sealed virtual ITemplateEditingFrame CreateFrame(TemplatedControlDesigner designer, string frameName, String[] templateNames);
    [MonoTODOAttribute]
public sealed virtual ITemplateEditingFrame CreateFrame(TemplatedControlDesigner designer, string frameName, String[] templateNames, Style controlStyle, Style[] templateStyles);
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    [MonoTODOAttribute]
public sealed virtual string GetContainingTemplateName(Control control);
    public sealed virtual bool get_SupportsNestedTemplateEditing();
}
[ObsoleteAttribute("Template editing is supported in ControlDesigner.TemplateGroups with SetViewFlags(ViewFlags.TemplateEditing, true) in 2.0.")]
public class System.Web.UI.Design.TemplateEditingVerb : DesignerVerb {
    private int _index;
    public int Index { get; }
    [MonoTODOAttribute]
public TemplateEditingVerb(string text, int index);
    public TemplateEditingVerb(string text, int index, TemplatedControlDesigner designer);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    [MonoTODOAttribute]
protected virtual void Dispose(bool disposing);
    public int get_Index();
}
public class System.Web.UI.Design.TemplateGroup : object {
    [MonoNotSupportedAttribute("")]
public string GroupName { get; }
    [MonoNotSupportedAttribute("")]
public Style GroupStyle { get; }
    [MonoNotSupportedAttribute("")]
public bool IsEmpty { get; }
    [MonoNotSupportedAttribute("")]
public TemplateDefinition[] Templates { get; }
    [MonoNotSupportedAttribute("")]
public TemplateGroup(string groupName);
    [MonoNotSupportedAttribute("")]
public TemplateGroup(string groupName, Style groupStyle);
    [MonoNotSupportedAttribute("")]
public string get_GroupName();
    [MonoNotSupportedAttribute("")]
public Style get_GroupStyle();
    [MonoNotSupportedAttribute("")]
public bool get_IsEmpty();
    [MonoNotSupportedAttribute("")]
public TemplateDefinition[] get_Templates();
    [MonoNotSupportedAttribute("")]
public void AddTemplateDefinition(TemplateDefinition templateDefinition);
}
[DefaultMemberAttribute("Item")]
public class System.Web.UI.Design.TemplateGroupCollection : object {
    [MonoNotSupportedAttribute("")]
public int Count { get; }
    [MonoNotSupportedAttribute("")]
public TemplateGroup Item { get; public set; }
    [MonoNotSupportedAttribute("")]
private int System.Collections.ICollection.Count { get; }
    [MonoNotSupportedAttribute("")]
private bool System.Collections.ICollection.IsSynchronized { get; }
    [MonoNotSupportedAttribute("")]
private object System.Collections.ICollection.SyncRoot { get; }
    [MonoNotSupportedAttribute("")]
private bool System.Collections.IList.IsFixedSize { get; }
    [MonoNotSupportedAttribute("")]
private bool System.Collections.IList.IsReadOnly { get; }
    [MonoNotSupportedAttribute("")]
private object System.Collections.IList.Item { get; private set; }
    [MonoNotSupportedAttribute("")]
public int get_Count();
    [MonoNotSupportedAttribute("")]
public TemplateGroup get_Item(int index);
    [MonoNotSupportedAttribute("")]
public void set_Item(int index, TemplateGroup value);
    [MonoNotSupportedAttribute("")]
public int Add(TemplateGroup group);
    [MonoNotSupportedAttribute("")]
public void AddRange(TemplateGroupCollection groups);
    [MonoNotSupportedAttribute("")]
public void Clear();
    [MonoNotSupportedAttribute("")]
public bool Contains(TemplateGroup group);
    [MonoNotSupportedAttribute("")]
public void CopyTo(TemplateGroup[] array, int index);
    [MonoNotSupportedAttribute("")]
public int IndexOf(TemplateGroup group);
    [MonoNotSupportedAttribute("")]
public void Insert(int index, TemplateGroup group);
    [MonoNotSupportedAttribute("")]
public void Remove(TemplateGroup group);
    [MonoNotSupportedAttribute("")]
public void RemoveAt(int index);
    [MonoNotSupportedAttribute("")]
private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    [MonoNotSupportedAttribute("")]
private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [MonoNotSupportedAttribute("")]
private sealed virtual override int System.Collections.IList.Add(object o);
    [MonoNotSupportedAttribute("")]
private sealed virtual override void System.Collections.IList.Clear();
    [MonoNotSupportedAttribute("")]
private sealed virtual override bool System.Collections.IList.Contains(object o);
    [MonoNotSupportedAttribute("")]
private sealed virtual override int System.Collections.IList.IndexOf(object o);
    [MonoNotSupportedAttribute("")]
private sealed virtual override void System.Collections.IList.Insert(int index, object o);
    [MonoNotSupportedAttribute("")]
private sealed virtual override void System.Collections.IList.Remove(object o);
    [MonoNotSupportedAttribute("")]
private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    [MonoNotSupportedAttribute("")]
private sealed virtual override int System.Collections.ICollection.get_Count();
    [MonoNotSupportedAttribute("")]
private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    [MonoNotSupportedAttribute("")]
private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    [MonoNotSupportedAttribute("")]
private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    [MonoNotSupportedAttribute("")]
private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    [MonoNotSupportedAttribute("")]
private sealed virtual override object System.Collections.IList.get_Item(int index);
    [MonoNotSupportedAttribute("")]
private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
}
public class System.Web.UI.Design.TemplateModeChangedEventArgs : EventArgs {
    private TemplateGroup group;
    public TemplateGroup NewTemplateGroup { get; }
    public TemplateModeChangedEventArgs(TemplateGroup newTemplateGroup);
    public TemplateGroup get_NewTemplateGroup();
}
public class System.Web.UI.Design.TextControlDesigner : ControlDesigner {
    [MonoTODOAttribute]
public virtual string GetDesignTimeHtml();
}
public class System.Web.UI.Design.TextDataBindingHandler : DataBindingHandler {
    [MonoTODOAttribute]
public virtual void DataBindControl(IDesignerHost designerHost, Control control);
}
public class System.Web.UI.Design.TransactedChangeCallback : MulticastDelegate {
    public TransactedChangeCallback(object object, IntPtr method);
    public virtual bool Invoke(object context);
    public virtual IAsyncResult BeginInvoke(object context, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
public class System.Web.UI.Design.TypeSchema : object {
    [MonoTODOAttribute]
public TypeSchema(Type type);
    [MonoTODOAttribute]
public sealed virtual IDataSourceViewSchema[] GetViews();
}
public class System.Web.UI.Design.UrlBuilder : object {
    [MonoTODOAttribute]
public static string BuildUrl(IComponent component, Control owner, string initialUrl, string caption, string filter);
    [MonoTODOAttribute]
public static string BuildUrl(IComponent component, Control owner, string initialUrl, string caption, string filter, UrlBuilderOptions options);
    [MonoTODOAttribute]
public static string BuildUrl(IServiceProvider serviceProvider, Control owner, string initialUrl, string caption, string filter, UrlBuilderOptions options);
}
[FlagsAttribute]
public enum System.Web.UI.Design.UrlBuilderOptions : Enum {
    public int value__;
    public static UrlBuilderOptions None;
    public static UrlBuilderOptions NoAbsolute;
}
public class System.Web.UI.Design.UrlEditor : UITypeEditor {
    protected string Caption { get; }
    protected string Filter { get; }
    protected UrlBuilderOptions Options { get; }
    protected virtual string get_Caption();
    protected virtual string get_Filter();
    protected virtual UrlBuilderOptions get_Options();
    [MonoTODOAttribute]
public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    [MonoTODOAttribute]
public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
}
public class System.Web.UI.Design.UserControlDesigner : ControlDesigner {
    public DesignerActionListCollection ActionLists { get; }
    public bool AllowResize { get; }
    public virtual string GetDesignTimeHtml();
    public virtual DesignerActionListCollection get_ActionLists();
    public virtual bool get_AllowResize();
}
public class System.Web.UI.Design.UserControlFileEditor : UrlEditor {
    [MonoTODOAttribute]
protected string Caption { get; }
    [MonoTODOAttribute]
protected string Filter { get; }
    protected virtual string get_Caption();
    protected virtual string get_Filter();
}
internal class System.Web.UI.Design.Util.DummyClass : object {
}
public class System.Web.UI.Design.ViewEvent : object {
    public static ViewEvent Click;
    public static ViewEvent Paint;
    public static ViewEvent TemplateModeChanged;
    private static ViewEvent();
}
public class System.Web.UI.Design.ViewEventArgs : EventArgs {
    private ViewEvent event_type;
    private DesignerRegion region;
    private EventArgs event_args;
    public ViewEvent EventType { get; }
    public DesignerRegion Region { get; }
    public EventArgs EventArgs { get; }
    public ViewEventArgs(ViewEvent eventType, DesignerRegion region, EventArgs eventArgs);
    public ViewEvent get_EventType();
    public DesignerRegion get_Region();
    public EventArgs get_EventArgs();
}
public class System.Web.UI.Design.ViewEventHandler : MulticastDelegate {
    public ViewEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ViewEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ViewEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[FlagsAttribute]
public enum System.Web.UI.Design.ViewFlags : Enum {
    public int value__;
    public static ViewFlags CustomPaint;
    public static ViewFlags DesignTimeHtmlRequiresLoadComplete;
    public static ViewFlags TemplateEditing;
}
public class System.Web.UI.Design.ViewRendering : object {
    [MonoNotSupportedAttribute("")]
public string Content { get; }
    [MonoNotSupportedAttribute("")]
public DesignerRegionCollection Regions { get; }
    [MonoNotSupportedAttribute("")]
public ViewRendering(string content, DesignerRegionCollection regions);
    public string get_Content();
    public DesignerRegionCollection get_Regions();
}
public class System.Web.UI.Design.WebControls.AdRotatorDesigner : ControlDesigner {
    public virtual string GetDesignTimeHtml();
}
public abstract class System.Web.UI.Design.WebControls.BaseDataBoundControlDesigner : ControlDesigner {
    [MonoNotSupportedAttribute("")]
public string DataSource { get; public set; }
    [MonoNotSupportedAttribute("")]
public string DataSourceID { get; public set; }
    [MonoNotSupportedAttribute("")]
public string get_DataSource();
    [MonoNotSupportedAttribute("")]
public void set_DataSource(string value);
    [MonoNotSupportedAttribute("")]
public string get_DataSourceID();
    [MonoNotSupportedAttribute("")]
public void set_DataSourceID(string value);
    [MonoNotSupportedAttribute("")]
protected virtual void Dispose(bool disposing);
    [MonoNotSupportedAttribute("")]
public virtual string GetDesignTimeHtml();
    [MonoNotSupportedAttribute("")]
public virtual void Initialize(IComponent component);
    [MonoNotSupportedAttribute("")]
public static DialogResult ShowCreateDataSourceDialog(ControlDesigner controlDesigner, Type dataSourceType, bool configure, String& dataSourceID);
    protected abstract virtual bool ConnectToDataSource();
    protected abstract virtual void CreateDataSource();
    protected abstract virtual void DataBind(BaseDataBoundControl dataBoundControl);
    protected abstract virtual void DisconnectFromDataSource();
    [MonoNotSupportedAttribute("")]
protected virtual string GetEmptyDesignTimeHtml();
    [MonoNotSupportedAttribute("")]
protected virtual string GetErrorDesignTimeHtml(Exception e);
    [MonoNotSupportedAttribute("")]
protected virtual void OnDataSourceChanged(bool forceUpdateView);
    [MonoNotSupportedAttribute("")]
protected virtual void OnSchemaRefreshed();
    [MonoNotSupportedAttribute("")]
protected virtual void PreFilterProperties(IDictionary properties);
}
public abstract class System.Web.UI.Design.WebControls.BaseDataListComponentEditor : WindowsFormsComponentEditor {
    private int initial_page;
    public BaseDataListComponentEditor(int initialPage);
    public virtual bool EditComponent(ITypeDescriptorContext context, object obj, IWin32Window parent);
    protected virtual int GetInitialComponentEditorPageIndex();
}
public abstract class System.Web.UI.Design.WebControls.BaseDataListDesigner : TemplatedControlDesigner {
    private string data_key_field;
    private string data_member;
    private string data_source;
    public string DataKeyField { get; public set; }
    public string DataMember { get; public set; }
    public string DataSource { get; public set; }
    public bool DesignTimeHtmlRequiresLoadComplete { get; }
    public DesignerVerbCollection Verbs { get; }
    public string get_DataKeyField();
    public void set_DataKeyField(string value);
    public string get_DataMember();
    public void set_DataMember(string value);
    public string get_DataSource();
    public void set_DataSource(string value);
    public virtual bool get_DesignTimeHtmlRequiresLoadComplete();
    public virtual DesignerVerbCollection get_Verbs();
    protected virtual void Dispose(bool disposing);
    protected IEnumerable GetDesignTimeDataSource(int minimumRows, Boolean& dummyDataSource);
    protected IEnumerable GetDesignTimeDataSource(IEnumerable selectedDataSource, int minimumRows, Boolean& dummyDataSource);
    public virtual IEnumerable GetResolvedSelectedDataSource();
    public virtual object GetSelectedDataSource();
    public virtual IEnumerable GetTemplateContainerDataSource(string templateName);
    public virtual void Initialize(IComponent component);
    protected internal void InvokePropertyBuilder(int initialPage);
    protected void OnAutoFormat(object sender, EventArgs e);
    public virtual void OnComponentChanged(object sender, ComponentChangedEventArgs e);
    protected internal virtual void OnDataSourceChanged();
    protected void OnPropertyBuilder(object sender, EventArgs e);
    protected internal void OnStylesChanged();
    protected abstract virtual void OnTemplateEditingVerbsChanged();
    protected virtual void PreFilterProperties(IDictionary properties);
}
public class System.Web.UI.Design.WebControls.BaseValidatorDesigner : ControlDesigner {
    public virtual string GetDesignTimeHtml();
}
public class System.Web.UI.Design.WebControls.ButtonDesigner : ControlDesigner {
    public virtual string GetDesignTimeHtml();
}
public class System.Web.UI.Design.WebControls.CalendarAutoFormatDialog : Form {
    public CalendarAutoFormatDialog(Calendar calendar);
    protected void OnDelayLoadActions();
    protected void OnActivated(object source, EventArgs e);
    protected void OnOKClicked(object source, EventArgs e);
    protected void OnSelChangedScheme(object source, EventArgs e);
}
public class System.Web.UI.Design.WebControls.CalendarDesigner : ControlDesigner {
    public DesignerVerbCollection Verbs { get; }
    public virtual DesignerVerbCollection get_Verbs();
    public virtual void Initialize(IComponent component);
    protected void OnAutoFormat(object sender, EventArgs e);
}
public class System.Web.UI.Design.WebControls.CheckBoxDesigner : ControlDesigner {
    public virtual string GetDesignTimeHtml();
}
public class System.Web.UI.Design.WebControls.CompositeControlDesigner : ControlDesigner {
    protected virtual void CreateChildControls();
    public virtual string GetDesignTimeHtml();
    public virtual string GetDesignTimeHtml(DesignerRegionCollection regions);
    public virtual void Initialize(IComponent component);
}
public class System.Web.UI.Design.WebControls.DataBoundControlDesigner : BaseDataBoundControlDesigner {
    [MonoNotSupportedAttribute("")]
public DesignerActionListCollection ActionLists { get; }
    [MonoNotSupportedAttribute("")]
public string DataMember { get; public set; }
    [MonoNotSupportedAttribute("")]
public IDataSourceDesigner DataSourceDesigner { get; }
    [MonoNotSupportedAttribute("")]
public DesignerDataSourceView DesignerView { get; }
    [MonoNotSupportedAttribute("")]
protected int SampleRowCount { get; }
    [MonoNotSupportedAttribute("")]
protected bool UseDataSourcePickerActionList { get; }
    [MonoNotSupportedAttribute("")]
private bool System.Web.UI.Design.IDataBindingSchemaProvider.CanRefreshSchema { get; }
    [MonoNotSupportedAttribute("")]
private IDataSourceViewSchema System.Web.UI.Design.IDataBindingSchemaProvider.Schema { get; }
    [MonoNotSupportedAttribute("")]
public virtual DesignerActionListCollection get_ActionLists();
    [MonoNotSupportedAttribute("")]
public string get_DataMember();
    [MonoNotSupportedAttribute("")]
public void set_DataMember(string value);
    [MonoNotSupportedAttribute("")]
public IDataSourceDesigner get_DataSourceDesigner();
    [MonoNotSupportedAttribute("")]
public DesignerDataSourceView get_DesignerView();
    [MonoNotSupportedAttribute("")]
protected virtual int get_SampleRowCount();
    [MonoNotSupportedAttribute("")]
protected virtual bool get_UseDataSourcePickerActionList();
    [MonoNotSupportedAttribute("")]
protected virtual void Dispose(bool disposing);
    [MonoNotSupportedAttribute("")]
protected virtual bool ConnectToDataSource();
    [MonoNotSupportedAttribute("")]
protected virtual void CreateDataSource();
    [MonoNotSupportedAttribute("")]
protected virtual void DataBind(BaseDataBoundControl dataBoundControl);
    [MonoNotSupportedAttribute("")]
protected virtual void DisconnectFromDataSource();
    [MonoNotSupportedAttribute("")]
protected virtual IEnumerable GetDesignTimeDataSource();
    [MonoNotSupportedAttribute("")]
protected virtual IEnumerable GetSampleDataSource();
    [MonoNotSupportedAttribute("")]
protected virtual void PreFilterProperties(IDictionary properties);
    [MonoNotSupportedAttribute("")]
private sealed virtual override void System.Web.UI.Design.IDataBindingSchemaProvider.RefreshSchema(bool preferSilent);
    [MonoNotSupportedAttribute("")]
private sealed virtual override IEnumerable System.Web.UI.Design.IDataSourceProvider.GetResolvedSelectedDataSource();
    [MonoNotSupportedAttribute("")]
private sealed virtual override object System.Web.UI.Design.IDataSourceProvider.GetSelectedDataSource();
    [MonoNotSupportedAttribute("")]
private sealed virtual override bool System.Web.UI.Design.IDataBindingSchemaProvider.get_CanRefreshSchema();
    private sealed virtual override IDataSourceViewSchema System.Web.UI.Design.IDataBindingSchemaProvider.get_Schema();
}
public class System.Web.UI.Design.WebControls.DataListComponentEditor : BaseDataListComponentEditor {
    public DataListComponentEditor(int initialPage);
    public virtual bool EditComponent(ITypeDescriptorContext context, object obj, IWin32Window parent);
    protected virtual Type[] GetComponentEditorPages();
}
public class System.Web.UI.Design.WebControls.DataProviderNameConverter : StringConverter {
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
}
public class System.Web.UI.Design.WebControls.DataSourceIDConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    [MonoTODOAttribute]
public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    protected virtual bool IsValidDataSource(IComponent component);
}
public class System.Web.UI.Design.WebControls.HierarchicalDataBoundControlDesigner : BaseDataBoundControlDesigner {
    public DesignerActionListCollection ActionLists { get; }
    public IHierarchicalDataSourceDesigner DataSourceDesigner { get; }
    public DesignerHierarchicalDataSourceView DesignerView { get; }
    protected bool UseDataSourcePickerActionList { get; }
    public virtual DesignerActionListCollection get_ActionLists();
    public IHierarchicalDataSourceDesigner get_DataSourceDesigner();
    public DesignerHierarchicalDataSourceView get_DesignerView();
    protected virtual bool get_UseDataSourcePickerActionList();
    protected virtual bool ConnectToDataSource();
    protected virtual void CreateDataSource();
    protected virtual void DataBind(BaseDataBoundControl dataBoundControl);
    protected virtual void DisconnectFromDataSource();
    protected virtual IHierarchicalEnumerable GetDesignTimeDataSource();
    protected virtual IHierarchicalEnumerable GetSampleDataSource();
    protected virtual void PreFilterProperties(IDictionary properties);
}
public class System.Web.UI.Design.WebControls.HyperLinkDesigner : TextControlDesigner {
    public virtual string GetDesignTimeHtml();
}
public class System.Web.UI.Design.WebControls.LabelDesigner : TextControlDesigner {
}
public class System.Web.UI.Design.WebControls.LinkButtonDesigner : TextControlDesigner {
}
public class System.Web.UI.Design.WebControls.ListControlDataBindingHandler : DataBindingHandler {
    public virtual void DataBindControl(IDesignerHost designerHost, Control control);
}
public class System.Web.UI.Design.WebControls.ListControlDesigner : DataBoundControlDesigner {
    private string data_key_field;
    private string data_text_field;
    private string data_value_field;
    public DesignerActionListCollection ActionLists { get; }
    protected bool UseDataSourcePickerActionList { get; }
    public string DataKeyField { get; public set; }
    public string DataTextField { get; public set; }
    public string DataValueField { get; public set; }
    public virtual DesignerActionListCollection get_ActionLists();
    protected virtual bool get_UseDataSourcePickerActionList();
    public string get_DataKeyField();
    public void set_DataKeyField(string value);
    public string get_DataTextField();
    public void set_DataTextField(string value);
    public string get_DataValueField();
    public void set_DataValueField(string value);
    protected virtual void DataBind(BaseDataBoundControl dataBoundControl);
    public virtual void Initialize(IComponent component);
    public virtual string GetDesignTimeHtml();
    public virtual IEnumerable GetResolvedSelectedDataSource();
    public virtual object GetSelectedDataSource();
    public virtual void OnComponentChanged(object sender, ComponentChangedEventArgs e);
    protected internal virtual void OnDataSourceChanged();
    protected virtual void PreFilterProperties(IDictionary properties);
}
public class System.Web.UI.Design.WebControls.PanelDesigner : ReadWriteControlDesigner {
    protected virtual void MapPropertyToStyle(string propName, object varPropValue);
    protected virtual void OnBehaviorAttached();
}
public class System.Web.UI.Design.WebControls.RegexEditorDialog : Form {
    private string regular_expression;
    public string RegularExpression { get; public set; }
    public string get_RegularExpression();
    public void set_RegularExpression(string value);
    protected void CmdHelp_Click(object sender, EventArgs e);
    protected void CmdOK_Click(object sender, EventArgs e);
    protected void CmdTestValidate_Click(object sender, EventArgs e);
    protected virtual void Dispose(bool disposing);
    protected void LstStandardExpressions_SelectedIndexChanged(object sender, EventArgs e);
    protected void RegexTypeEditor_Activated(object sender, EventArgs e);
    protected void TxtExpression_Changed(object sender, EventArgs e);
}
public class System.Web.UI.Design.WebControls.RegexTypeEditor : UITypeEditor {
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
}
public class System.Web.UI.Design.WebControls.RepeaterDesigner : ControlDesigner {
    private string data_member;
    private string data_source;
    public string DataMember { get; public set; }
    public string DataSource { get; public set; }
    protected bool TemplatesExist { get; }
    public string get_DataMember();
    public void set_DataMember(string value);
    public string get_DataSource();
    public void set_DataSource(string value);
    protected bool get_TemplatesExist();
    protected virtual void Dispose(bool disposing);
    protected IEnumerable GetDesignTimeDataSource(int minimumRows);
    protected IEnumerable GetDesignTimeDataSource(IEnumerable selectedDataSource, int minimumRows);
    public virtual string GetDesignTimeHtml();
    protected virtual string GetEmptyDesignTimeHtml();
    protected virtual string GetErrorDesignTimeHtml(Exception e);
    public virtual IEnumerable GetResolvedSelectedDataSource();
    public virtual object GetSelectedDataSource();
    public virtual void Initialize(IComponent component);
    public virtual void OnComponentChanged(object source, ComponentChangedEventArgs ce);
    protected internal virtual void OnDataSourceChanged();
    protected virtual void PreFilterProperties(IDictionary properties);
}
public class System.Web.UI.Design.WebControls.TableCellsCollectionEditor : CollectionEditor {
    public TableCellsCollectionEditor(Type type);
    protected virtual bool CanSelectMultipleInstances();
    protected virtual object CreateInstance(Type itemType);
}
public class System.Web.UI.Design.WebControls.TableDesigner : ControlDesigner {
    public virtual string GetDesignTimeHtml();
    public virtual string GetPersistInnerHtml();
}
public class System.Web.UI.Design.WebControls.TableRowsCollectionEditor : CollectionEditor {
    public TableRowsCollectionEditor(Type type);
    protected virtual bool CanSelectMultipleInstances();
    protected virtual object CreateInstance(Type itemType);
}
public class System.Web.UI.Design.WebControls.XmlDesigner : ControlDesigner {
    protected virtual void Dispose(bool disposing);
    public virtual string GetDesignTimeHtml();
    protected virtual string GetEmptyDesignTimeHtml();
    public virtual void Initialize(IComponent component);
}
[MonoTODOAttribute]
public class System.Web.UI.Design.WebControlToolboxItem : ToolboxItem {
    private int persistChildren;
    private string toolData;
    [MonoTODOAttribute]
public WebControlToolboxItem(Type type);
    protected WebControlToolboxItem(SerializationInfo info, StreamingContext context);
    [MonoTODOAttribute]
protected virtual IComponent[] CreateComponentsCore(IDesignerHost host);
    [MonoTODOAttribute]
protected virtual void Serialize(SerializationInfo info, StreamingContext context);
    [MonoTODOAttribute]
protected virtual void Deserialize(SerializationInfo info, StreamingContext context);
    [MonoTODOAttribute]
public virtual void Initialize(Type type);
    [MonoTODOAttribute]
public object GetToolAttributeValue(IDesignerHost host, Type attributeType);
    [MonoTODOAttribute]
public string GetToolHtml(IDesignerHost host);
    [MonoTODOAttribute]
public Type GetToolType(IDesignerHost host);
}
public class System.Web.UI.Design.WebFormsDesignerActionService : DesignerActionService {
    [MonoTODOAttribute]
public WebFormsDesignerActionService(IServiceProvider serviceProvider);
    [MonoTODOAttribute]
protected virtual void GetComponentDesignerActions(IComponent component, DesignerActionListCollection actionLists);
}
public abstract class System.Web.UI.Design.WebFormsReferenceManager : object {
    public abstract virtual ICollection GetRegisterDirectives();
    public abstract virtual string GetTagPrefix(Type objectType);
    public abstract virtual Type GetType(string tagPrefix, string tagName);
    public abstract virtual string GetUserControlPath(string tagPrefix, string tagName);
    public abstract virtual string RegisterTagPrefix(Type objectType);
}
public abstract class System.Web.UI.Design.WebFormsRootDesigner : object {
    [CompilerGeneratedAttribute]
private EventHandler LoadComplete;
    public string DocumentUrl { get; }
    public bool IsDesignerViewLocked { get; }
    public bool IsLoading { get; }
    public WebFormsReferenceManager ReferenceManager { get; }
    [MonoTODOAttribute]
public IComponent Component { get; public set; }
    [MonoTODOAttribute]
public CultureInfo CurrentCulture { get; }
    [MonoTODOAttribute]
protected ViewTechnology[] SupportedTechnologies { get; }
    [MonoTODOAttribute]
protected DesignerVerbCollection Verbs { get; }
    [MonoTODOAttribute]
private DesignerVerbCollection System.ComponentModel.Design.IDesigner.Verbs { get; }
    [MonoTODOAttribute]
private ViewTechnology[] System.ComponentModel.Design.IRootDesigner.SupportedTechnologies { get; }
    protected virtual override void Finalize();
    [CompilerGeneratedAttribute]
public void add_LoadComplete(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_LoadComplete(EventHandler value);
    public abstract virtual string get_DocumentUrl();
    public abstract virtual bool get_IsDesignerViewLocked();
    public abstract virtual bool get_IsLoading();
    public abstract virtual WebFormsReferenceManager get_ReferenceManager();
    public abstract virtual void AddClientScriptToDocument(ClientScriptItem scriptItem);
    public abstract virtual string AddControlToDocument(Control newControl, Control referenceControl, ControlLocation location);
    public abstract virtual ClientScriptItemCollection GetClientScriptsInDocument();
    protected internal abstract virtual void GetControlViewAndTag(Control control, IControlDesignerView& view, IControlDesignerTag& tag);
    public abstract virtual void RemoveClientScriptFromDocument(string clientScriptId);
    public abstract virtual void RemoveControlFromDocument(Control control);
    public virtual IComponent get_Component();
    public virtual void set_Component(IComponent value);
    public CultureInfo get_CurrentCulture();
    protected ViewTechnology[] get_SupportedTechnologies();
    protected DesignerVerbCollection get_Verbs();
    [MonoTODOAttribute]
protected virtual DesignerActionService CreateDesignerActionService(IServiceProvider serviceProvider);
    [MonoTODOAttribute]
protected virtual IUrlResolutionService CreateUrlResolutionService();
    [MonoTODOAttribute]
protected virtual void Dispose(bool disposing);
    [MonoTODOAttribute]
public virtual string GenerateEmptyDesignTimeHtml(Control control);
    [MonoTODOAttribute]
public virtual string GenerateErrorDesignTimeHtml(Control control, Exception e, string errorMessage);
    [MonoTODOAttribute]
protected internal virtual object GetService(Type serviceType);
    [MonoTODOAttribute]
protected object GetView(ViewTechnology viewTechnology);
    [MonoTODOAttribute]
public virtual void Initialize(IComponent component);
    [MonoTODOAttribute]
protected virtual void OnLoadComplete(EventArgs e);
    [MonoTODOAttribute]
protected virtual void PostFilterAttributes(IDictionary attributes);
    [MonoTODOAttribute]
protected virtual void PostFilterEvents(IDictionary events);
    [MonoTODOAttribute]
protected virtual void PostFilterProperties(IDictionary properties);
    [MonoTODOAttribute]
protected virtual void PreFilterAttributes(IDictionary attributes);
    [MonoTODOAttribute]
protected virtual void PreFilterEvents(IDictionary events);
    [MonoTODOAttribute]
protected virtual void PreFilterProperties(IDictionary properties);
    [MonoTODOAttribute]
public string ResolveUrl(string relativeUrl);
    [MonoTODOAttribute]
public virtual void SetControlID(Control control, string id);
    private sealed virtual override DesignerVerbCollection System.ComponentModel.Design.IDesigner.get_Verbs();
    private sealed virtual override ViewTechnology[] System.ComponentModel.Design.IRootDesigner.get_SupportedTechnologies();
    [MonoTODOAttribute]
private sealed virtual override void System.ComponentModel.Design.IDesigner.DoDefaultAction();
    [MonoTODOAttribute]
private sealed virtual override void System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes(IDictionary attributes);
    [MonoTODOAttribute]
private sealed virtual override void System.ComponentModel.Design.IDesignerFilter.PostFilterEvents(IDictionary events);
    [MonoTODOAttribute]
private sealed virtual override void System.ComponentModel.Design.IDesignerFilter.PostFilterProperties(IDictionary properties);
    [MonoTODOAttribute]
private sealed virtual override void System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes(IDictionary attributes);
    [MonoTODOAttribute]
private sealed virtual override void System.ComponentModel.Design.IDesignerFilter.PreFilterEvents(IDictionary events);
    [MonoTODOAttribute]
private sealed virtual override void System.ComponentModel.Design.IDesignerFilter.PreFilterProperties(IDictionary properties);
    [MonoTODOAttribute]
private sealed virtual override object System.ComponentModel.Design.IRootDesigner.GetView(ViewTechnology viewTechnology);
    [MonoTODOAttribute]
private sealed virtual override void System.IDisposable.Dispose();
}
public class System.Web.UI.Design.XmlDataFileEditor : UrlEditor {
    [MonoTODOAttribute]
protected string Caption { get; }
    [MonoTODOAttribute]
protected string Filter { get; }
    protected virtual string get_Caption();
    protected virtual string get_Filter();
}
public class System.Web.UI.Design.XmlDocumentSchema : object {
    [MonoTODOAttribute]
public XmlDocumentSchema(XmlDocument xmlDocument, string xPath);
    [MonoTODOAttribute]
public sealed virtual IDataSourceViewSchema[] GetViews();
}
public class System.Web.UI.Design.XmlFileEditor : UITypeEditor {
    [MonoTODOAttribute]
public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
}
public class System.Web.UI.Design.XmlUrlEditor : UrlEditor {
    protected string Caption { get; }
    protected string Filter { get; }
    protected UrlBuilderOptions Options { get; }
    protected virtual string get_Caption();
    protected virtual string get_Filter();
    protected virtual UrlBuilderOptions get_Options();
}
public class System.Web.UI.Design.XsdSchemaFileEditor : UrlEditor {
    [MonoTODOAttribute]
protected string Caption { get; }
    [MonoTODOAttribute]
protected string Filter { get; }
    protected virtual string get_Caption();
    protected virtual string get_Filter();
}
public class System.Web.UI.Design.XslTransformFileEditor : UrlEditor {
    [MonoTODOAttribute]
protected string Caption { get; }
    [MonoTODOAttribute]
protected string Filter { get; }
    protected virtual string get_Caption();
    protected virtual string get_Filter();
}
public class System.Web.UI.Design.XslUrlEditor : UrlEditor {
    protected string Caption { get; }
    protected string Filter { get; }
    protected UrlBuilderOptions Options { get; }
    protected virtual string get_Caption();
    protected virtual string get_Filter();
    protected virtual UrlBuilderOptions get_Options();
}
public class System.Windows.Forms.Design.AnchorEditor : UITypeEditor {
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
}
internal class System.Windows.Forms.Design.AnchorSelector : UserControl {
    private IContainer components;
    private AnchorStyles styles;
    public AnchorStyles AnchorStyles { get; }
    public AnchorSelector(IWindowsFormsEditorService editor_service, AnchorStyles startup);
    protected virtual void Dispose(bool disposing);
    private void InitializeComponent();
    public AnchorStyles get_AnchorStyles();
    private void PaintState(Graphics g, int x1, int y1, int x2, int y2, AnchorStyles v);
    protected virtual void OnPaint(PaintEventArgs e);
    protected virtual void OnClick(EventArgs ee);
    protected virtual void OnDoubleClick(EventArgs ee);
}
[MonoTODOAttribute]
public class System.Windows.Forms.Design.AxImporter : object {
    internal Options options;
    [MonoTODOAttribute]
public String[] GeneratedAssemblies { get; }
    [MonoTODOAttribute]
public String[] GeneratedSources { get; }
    [MonoTODOAttribute]
public TYPELIBATTR[] GeneratedTypeLibAttributes { get; }
    [MonoTODOAttribute]
public AxImporter(Options options);
    public String[] get_GeneratedAssemblies();
    public String[] get_GeneratedSources();
    public TYPELIBATTR[] get_GeneratedTypeLibAttributes();
    [MonoTODOAttribute]
public string GenerateFromFile(FileInfo file);
    [MonoTODOAttribute]
public string GenerateFromTypeLibrary(UCOMITypeLib typeLib);
    [MonoTODOAttribute]
public string GenerateFromTypeLibrary(UCOMITypeLib typeLib, Guid clsid);
    [MonoTODOAttribute]
public static string GetFileOfTypeLib(TYPELIBATTR& tlibattr);
}
public class System.Windows.Forms.Design.AxParameterData : object {
    private bool isByRef;
    private bool isIn;
    private bool isOptional;
    private bool isOut;
    private string name;
    private Type type;
    public FieldDirection Direction { get; }
    public bool IsByRef { get; }
    public bool IsIn { get; }
    public bool IsOptional { get; }
    public bool IsOut { get; }
    public string Name { get; public set; }
    public Type ParameterType { get; }
    [MonoTODOAttribute]
public string TypeName { get; }
    [MonoTODOAttribute]
public AxParameterData(ParameterInfo info);
    [MonoTODOAttribute]
public AxParameterData(ParameterInfo info, bool ignoreByRefs);
    [MonoTODOAttribute]
public AxParameterData(string inname, string typeName);
    [MonoTODOAttribute]
public AxParameterData(string inname, Type type);
    [MonoTODOAttribute]
public static AxParameterData[] Convert(ParameterInfo[] infos);
    [MonoTODOAttribute]
public static AxParameterData[] Convert(ParameterInfo[] infos, bool ignoreByRefs);
    public FieldDirection get_Direction();
    public bool get_IsByRef();
    public bool get_IsIn();
    public bool get_IsOptional();
    public bool get_IsOut();
    public string get_Name();
    [MonoTODOAttribute]
public void set_Name(string value);
    public Type get_ParameterType();
    public string get_TypeName();
}
public class System.Windows.Forms.Design.AxWrapperGen : object {
    [MonoTODOAttribute]
public static ArrayList GeneratedSources;
    [MonoTODOAttribute]
public AxWrapperGen(Type axType);
    private static AxWrapperGen();
}
public class System.Windows.Forms.Design.Behavior.Adorner : object {
    [MonoTODOAttribute]
public BehaviorService BehaviorService { get; public set; }
    [MonoTODOAttribute]
public bool Enabled { get; public set; }
    [MonoTODOAttribute]
public GlyphCollection Glyphs { get; }
    [MonoTODOAttribute]
public void Invalidate();
    [MonoTODOAttribute]
public void Invalidate(Rectangle rectangle);
    [MonoTODOAttribute]
public void Invalidate(Region region);
    public BehaviorService get_BehaviorService();
    public void set_BehaviorService(BehaviorService value);
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public GlyphCollection get_Glyphs();
}
public abstract class System.Windows.Forms.Design.Behavior.Behavior : object {
    [MonoTODOAttribute]
public Cursor Cursor { get; }
    [MonoTODOAttribute]
public bool DisableAllCommands { get; }
    [MonoTODOAttribute]
protected Behavior(bool callParentBehavior, BehaviorService behaviorService);
    public virtual Cursor get_Cursor();
    public virtual bool get_DisableAllCommands();
    [MonoTODOAttribute]
public virtual MenuCommand FindCommand(CommandID commandId);
    [MonoTODOAttribute]
public virtual void OnDragDrop(Glyph g, DragEventArgs e);
    [MonoTODOAttribute]
public virtual void OnDragEnter(Glyph g, DragEventArgs e);
    [MonoTODOAttribute]
public virtual void OnDragLeave(Glyph g, EventArgs e);
    [MonoTODOAttribute]
public virtual void OnDragOver(Glyph g, DragEventArgs e);
    [MonoTODOAttribute]
public virtual void OnGiveFeedback(Glyph g, GiveFeedbackEventArgs e);
    [MonoTODOAttribute]
public virtual void OnLoseCapture(Glyph g, EventArgs e);
    [MonoTODOAttribute]
public virtual bool OnMouseDoubleClick(Glyph g, MouseButtons button, Point mouseLoc);
    [MonoTODOAttribute]
public virtual bool OnMouseDown(Glyph g, MouseButtons button, Point mouseLoc);
    [MonoTODOAttribute]
public virtual bool OnMouseEnter(Glyph g);
    [MonoTODOAttribute]
public virtual bool OnMouseHover(Glyph g, Point mouseLoc);
    [MonoTODOAttribute]
public virtual bool OnMouseLeave(Glyph g);
    [MonoTODOAttribute]
public virtual bool OnMouseMove(Glyph g, MouseButtons button, Point mouseLoc);
    [MonoTODOAttribute]
public virtual bool OnMouseUp(Glyph g, MouseButtons button);
    [MonoTODOAttribute]
public virtual void OnQueryContinueDrag(Glyph g, QueryContinueDragEventArgs e);
}
public class System.Windows.Forms.Design.Behavior.BehaviorDragDropEventArgs : EventArgs {
    private ICollection components;
    public ICollection DragComponents { get; }
    public BehaviorDragDropEventArgs(ICollection dragComponents);
    public ICollection get_DragComponents();
}
public class System.Windows.Forms.Design.Behavior.BehaviorDragDropEventHandler : MulticastDelegate {
    public BehaviorDragDropEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, BehaviorDragDropEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, BehaviorDragDropEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Forms.Design.Behavior.BehaviorService : object {
    [CompilerGeneratedAttribute]
private BehaviorDragDropEventHandler BeginDrag;
    [CompilerGeneratedAttribute]
private BehaviorDragDropEventHandler EndDrag;
    [CompilerGeneratedAttribute]
private EventHandler Synchronize;
    [MonoTODOAttribute]
public BehaviorServiceAdornerCollection Adorners { get; }
    [MonoTODOAttribute]
public Graphics AdornerWindowGraphics { get; }
    [MonoTODOAttribute]
public Behavior CurrentBehavior { get; }
    [CompilerGeneratedAttribute]
public void add_BeginDrag(BehaviorDragDropEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_BeginDrag(BehaviorDragDropEventHandler value);
    [CompilerGeneratedAttribute]
public void add_EndDrag(BehaviorDragDropEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_EndDrag(BehaviorDragDropEventHandler value);
    [CompilerGeneratedAttribute]
public void add_Synchronize(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Synchronize(EventHandler value);
    public BehaviorServiceAdornerCollection get_Adorners();
    public Graphics get_AdornerWindowGraphics();
    public Behavior get_CurrentBehavior();
    [MonoTODOAttribute]
public Point AdornerWindowPointToScreen(Point p);
    [MonoTODOAttribute]
public Point AdornerWindowToScreen();
    [MonoTODOAttribute]
public Rectangle ControlRectInAdornerWindow(Control c);
    [MonoTODOAttribute]
public Point ControlToAdornerWindow(Control c);
    [MonoTODOAttribute]
public sealed virtual void Dispose();
    [MonoTODOAttribute]
public Behavior GetNextBehavior(Behavior behavior);
    [MonoTODOAttribute]
public void Invalidate();
    [MonoTODOAttribute]
public void Invalidate(Rectangle rect);
    [MonoTODOAttribute]
public void Invalidate(Region r);
    [MonoTODOAttribute]
public Point MapAdornerWindowPoint(IntPtr handle, Point pt);
    [MonoTODOAttribute]
public Behavior PopBehavior(Behavior behavior);
    [MonoTODOAttribute]
public void PushBehavior(Behavior behavior);
    [MonoTODOAttribute]
public void PushCaptureBehavior(Behavior behavior);
    [MonoTODOAttribute]
public Point ScreenToAdornerWindow(Point p);
    [MonoTODOAttribute]
public void SyncSelection();
}
[DefaultMemberAttribute("Item")]
public class System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection : CollectionBase {
    private int state;
    internal int State { get; }
    public Adorner Item { get; public set; }
    public BehaviorServiceAdornerCollection(BehaviorService behaviorService);
    public BehaviorServiceAdornerCollection(Adorner[] value);
    public BehaviorServiceAdornerCollection(BehaviorServiceAdornerCollection value);
    internal int get_State();
    public Adorner get_Item(int index);
    public void set_Item(int index, Adorner value);
    public int Add(Adorner value);
    public void AddRange(Adorner[] value);
    public void AddRange(BehaviorServiceAdornerCollection value);
    public bool Contains(Adorner value);
    public void CopyTo(Adorner[] array, int index);
    public int IndexOf(Adorner value);
    public BehaviorServiceAdornerCollectionEnumerator GetEnumerator();
    public void Insert(int index, Adorner value);
    public void Remove(Adorner value);
}
public class System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollectionEnumerator : object {
    private BehaviorServiceAdornerCollection mappings;
    private int index;
    private int state;
    public Adorner Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    public BehaviorServiceAdornerCollectionEnumerator(BehaviorServiceAdornerCollection mappings);
    public Adorner get_Current();
    private void CheckState();
    public bool MoveNext();
    public void Reset();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    private sealed virtual override bool System.Collections.IEnumerator.MoveNext();
    private sealed virtual override void System.Collections.IEnumerator.Reset();
}
public class System.Windows.Forms.Design.Behavior.ComponentGlyph : Glyph {
    private IComponent component;
    [MonoTODOAttribute]
public IComponent RelatedComponent { get; }
    public ComponentGlyph(IComponent relatedComponent);
    public ComponentGlyph(IComponent relatedComponent, Behavior behavior);
    public IComponent get_RelatedComponent();
    [MonoTODOAttribute]
public virtual Cursor GetHitTest(Point p);
    [MonoTODOAttribute]
public virtual void Paint(PaintEventArgs pe);
}
public class System.Windows.Forms.Design.Behavior.ControlBodyGlyph : ComponentGlyph {
    private Rectangle bounds;
    [MonoTODOAttribute]
public Rectangle Bounds { get; }
    [MonoTODOAttribute]
public ControlBodyGlyph(Rectangle bounds, Cursor cursor, IComponent relatedComponent, Behavior behavior);
    [MonoTODOAttribute]
public ControlBodyGlyph(Rectangle bounds, Cursor cursor, IComponent relatedComponent, ControlDesigner designer);
    public virtual Rectangle get_Bounds();
    [MonoTODOAttribute]
public virtual Cursor GetHitTest(Point p);
}
public abstract class System.Windows.Forms.Design.Behavior.Glyph : object {
    private Behavior behavior;
    [MonoTODOAttribute]
public Behavior Behavior { get; }
    [MonoTODOAttribute]
public Rectangle Bounds { get; }
    [MonoTODOAttribute]
protected Glyph(Behavior behavior);
    public virtual Behavior get_Behavior();
    public virtual Rectangle get_Bounds();
    public abstract virtual Cursor GetHitTest(Point p);
    public abstract virtual void Paint(PaintEventArgs pe);
    [MonoTODOAttribute]
protected void SetBehavior(Behavior behavior);
}
[DefaultMemberAttribute("Item")]
public class System.Windows.Forms.Design.Behavior.GlyphCollection : CollectionBase {
    public Glyph Item { get; public set; }
    public GlyphCollection(Glyph[] value);
    public GlyphCollection(GlyphCollection value);
    public Glyph get_Item(int index);
    public void set_Item(int index, Glyph value);
    public int Add(Glyph value);
    public void AddRange(Glyph[] value);
    public void AddRange(GlyphCollection value);
    public bool Contains(Glyph value);
    public void CopyTo(Glyph[] array, int index);
    public int IndexOf(Glyph value);
    public void Insert(int index, Glyph value);
    public void Remove(Glyph value);
}
public enum System.Windows.Forms.Design.Behavior.GlyphSelectionType : Enum {
    public int value__;
    public static GlyphSelectionType NotSelected;
    public static GlyphSelectionType Selected;
    public static GlyphSelectionType SelectedPrimary;
}
public class System.Windows.Forms.Design.Behavior.SnapLine : object {
    private SnapLineType type;
    private int offset;
    private string filter;
    private SnapLinePriority priority;
    public string Filter { get; }
    public bool IsHorizontal { get; }
    public bool IsVertical { get; }
    public int Offset { get; }
    public SnapLinePriority Priority { get; }
    public SnapLineType SnapLineType { get; }
    [MonoTODOAttribute]
public SnapLine(SnapLineType type, int offset);
    [MonoTODOAttribute]
public SnapLine(SnapLineType type, int offset, string filter);
    [MonoTODOAttribute]
public SnapLine(SnapLineType type, int offset, SnapLinePriority priority);
    [MonoTODOAttribute]
public SnapLine(SnapLineType type, int offset, string filter, SnapLinePriority priority);
    [MonoTODOAttribute]
public static bool ShouldSnap(SnapLine line1, SnapLine line2);
    public string get_Filter();
    public bool get_IsHorizontal();
    public bool get_IsVertical();
    public int get_Offset();
    public SnapLinePriority get_Priority();
    public SnapLineType get_SnapLineType();
    [MonoTODOAttribute]
public void AdjustOffset(int adjustment);
    [MonoTODOAttribute]
public virtual string ToString();
}
public enum System.Windows.Forms.Design.Behavior.SnapLinePriority : Enum {
    public int value__;
    public static SnapLinePriority Low;
    public static SnapLinePriority Medium;
    public static SnapLinePriority High;
    public static SnapLinePriority Always;
}
public enum System.Windows.Forms.Design.Behavior.SnapLineType : Enum {
    public int value__;
    public static SnapLineType Top;
    public static SnapLineType Bottom;
    public static SnapLineType Left;
    public static SnapLineType Right;
    public static SnapLineType Horizontal;
    public static SnapLineType Vertical;
    public static SnapLineType Baseline;
}
public class System.Windows.Forms.Design.BorderSidesEditor : UITypeEditor {
    [MonoTODOAttribute]
public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    [MonoTODOAttribute]
public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
}
public class System.Windows.Forms.Design.ComponentDocumentDesigner : ComponentDesigner {
    private ViewTechnology[] System.ComponentModel.Design.IRootDesigner.SupportedTechnologies { get; }
    private bool System.Windows.Forms.Design.IOleDragClient.CanModifyComponents { get; }
    [MonoTODOAttribute]
private IComponent System.Windows.Forms.Design.IOleDragClient.Component { get; }
    [MonoTODOAttribute]
public Control Control { get; }
    public bool TrayAutoArrange { get; public set; }
    public bool TrayLargeIcon { get; public set; }
    private sealed virtual override ViewTechnology[] System.ComponentModel.Design.IRootDesigner.get_SupportedTechnologies();
    [MonoTODOAttribute]
private sealed virtual override object System.ComponentModel.Design.IRootDesigner.GetView(ViewTechnology technology);
    private sealed virtual override bool System.Drawing.Design.IToolboxUser.GetToolSupported(ToolboxItem tool);
    [MonoTODOAttribute]
private sealed virtual override void System.Drawing.Design.IToolboxUser.ToolPicked(ToolboxItem tool);
    [MonoTODOAttribute]
private sealed virtual override bool System.ComponentModel.Design.ITypeDescriptorFilterService.FilterAttributes(IComponent component, IDictionary attributes);
    [MonoTODOAttribute]
private sealed virtual override bool System.ComponentModel.Design.ITypeDescriptorFilterService.FilterEvents(IComponent component, IDictionary events);
    [MonoTODOAttribute]
private sealed virtual override bool System.ComponentModel.Design.ITypeDescriptorFilterService.FilterProperties(IComponent component, IDictionary properties);
    [MonoTODOAttribute]
private sealed virtual override bool System.Windows.Forms.Design.IOleDragClient.AddComponent(IComponent component, string name, bool firstAdd);
    private sealed virtual override bool System.Windows.Forms.Design.IOleDragClient.get_CanModifyComponents();
    [MonoTODOAttribute]
private sealed virtual override Control System.Windows.Forms.Design.IOleDragClient.GetControlForComponent(object component);
    [MonoTODOAttribute]
private sealed virtual override Control System.Windows.Forms.Design.IOleDragClient.GetDesignerControl();
    [MonoTODOAttribute]
private sealed virtual override bool System.Windows.Forms.Design.IOleDragClient.IsDropOk(IComponent component);
    private sealed virtual override IComponent System.Windows.Forms.Design.IOleDragClient.get_Component();
    public Control get_Control();
    public bool get_TrayAutoArrange();
    public void set_TrayAutoArrange(bool value);
    public bool get_TrayLargeIcon();
    public void set_TrayLargeIcon(bool value);
    [MonoTODOAttribute]
public virtual void Initialize(IComponent component);
    [MonoTODOAttribute]
protected virtual void Dispose(bool disposing);
    protected virtual bool GetToolSupported(ToolboxItem tool);
    [MonoTODOAttribute]
protected virtual void PreFilterProperties(IDictionary properties);
}
[DesignTimeVisibleAttribute("False")]
[ToolboxItemAttribute("False")]
[ProvidePropertyAttribute("Location", "System.ComponentModel.IComponent")]
public class System.Windows.Forms.Design.ComponentTray : ScrollableControl {
    private IServiceProvider _serviceProvider;
    private IDesigner _mainDesigner;
    private bool _showLargeIcons;
    private bool _autoArrange;
    public bool AutoArrange { get; public set; }
    [MonoTODOAttribute]
public int ComponentCount { get; }
    public bool ShowLargeIcons { get; public set; }
    public ComponentTray(IDesigner mainDesigner, IServiceProvider serviceProvider);
    public bool get_AutoArrange();
    public void set_AutoArrange(bool value);
    public int get_ComponentCount();
    public bool get_ShowLargeIcons();
    public void set_ShowLargeIcons(bool value);
    [MonoTODOAttribute]
public virtual void AddComponent(IComponent component);
    protected virtual bool CanCreateComponentFromTool(ToolboxItem tool);
    protected virtual bool CanDisplayComponent(IComponent component);
    [MonoTODOAttribute]
public void CreateComponentFromTool(ToolboxItem tool);
    [MonoTODOAttribute]
protected void DisplayError(Exception e);
    protected virtual void Dispose(bool disposing);
    [BrowsableAttribute("False")]
[CategoryAttribute("Layout")]
[DesignerSerializationVisibilityAttribute("0")]
[DesignOnlyAttribute("True")]
[LocalizableAttribute("False")]
[MonoTODOAttribute]
public Point GetLocation(IComponent receiver);
    [MonoTODOAttribute]
public void SetLocation(IComponent receiver, Point location);
    [MonoTODOAttribute]
public IComponent GetNextComponent(IComponent component, bool forward);
    [BrowsableAttribute("False")]
[CategoryAttribute("Layout")]
[DesignOnlyAttribute("True")]
[LocalizableAttribute("False")]
[MonoTODOAttribute]
public Point GetTrayLocation(IComponent receiver);
    [MonoTODOAttribute]
public bool IsTrayComponent(IComponent comp);
    [MonoTODOAttribute]
public void SetTrayLocation(IComponent receiver, Point location);
    [MonoTODOAttribute]
protected virtual void OnMouseDoubleClick(MouseEventArgs e);
    [MonoTODOAttribute]
protected virtual void OnDragDrop(DragEventArgs de);
    [MonoTODOAttribute]
protected virtual void OnDragEnter(DragEventArgs de);
    [MonoTODOAttribute]
protected virtual void OnDragLeave(EventArgs e);
    [MonoTODOAttribute]
protected virtual void OnDragOver(DragEventArgs de);
    [MonoTODOAttribute]
protected virtual void OnGiveFeedback(GiveFeedbackEventArgs gfevent);
    [MonoTODOAttribute]
protected virtual void OnLayout(LayoutEventArgs levent);
    [MonoTODOAttribute]
protected virtual void OnLostCapture();
    [MonoTODOAttribute]
protected virtual void OnMouseDown(MouseEventArgs e);
    [MonoTODOAttribute]
protected virtual void OnMouseMove(MouseEventArgs e);
    [MonoTODOAttribute]
protected virtual void OnMouseUp(MouseEventArgs e);
    [MonoTODOAttribute]
protected virtual void OnPaint(PaintEventArgs pe);
    [MonoTODOAttribute]
protected virtual void OnSetCursor();
    [MonoTODOAttribute]
public virtual void RemoveComponent(IComponent component);
    [MonoTODOAttribute]
protected virtual void WndProc(Message& m);
    private sealed virtual override bool System.ComponentModel.IExtenderProvider.CanExtend(object component);
    protected virtual object GetService(Type serviceType);
}
internal class System.Windows.Forms.Design.ControlBindingsConverter : TypeConverter {
    [MonoTODOAttribute]
public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
internal class System.Windows.Forms.Design.ControlCodeDomSerializer : ComponentCodeDomSerializer {
    public virtual object Serialize(IDesignerSerializationManager manager, object value);
}
internal class System.Windows.Forms.Design.ControlCollectionCodeDomSerializaer : CollectionCodeDomSerializer {
}
internal class System.Windows.Forms.Design.ControlDataObject : object {
    private object _data;
    private string _format;
    public ControlDataObject(Control control);
    public ControlDataObject(Control[] controls);
    public sealed virtual object GetData(Type format);
    public sealed virtual object GetData(string format);
    public sealed virtual object GetData(string format, bool autoConvert);
    public sealed virtual bool GetDataPresent(Type format);
    public sealed virtual bool GetDataPresent(string format);
    public sealed virtual bool GetDataPresent(string format, bool autoConvert);
    public sealed virtual String[] GetFormats();
    public sealed virtual String[] GetFormats(bool autoConvert);
    public sealed virtual void SetData(object data);
    public sealed virtual void SetData(Type format, object data);
    public sealed virtual void SetData(string format, object data);
    public sealed virtual void SetData(string format, bool autoConvert, object data);
    private bool ValidateFormat(string format);
}
public class System.Windows.Forms.Design.ControlDesigner : ComponentDesigner {
    private WndProcRouter _messageRouter;
    private bool _locked;
    private bool _mouseDown;
    private bool _mouseMoveAfterMouseDown;
    private bool _mouseDownFirstMove;
    private bool _firstMouseMoveInClient;
    protected static Point InvalidPoint;
    protected AccessibleObject accessibilityObj;
    private MouseButtons _mouseButtonDown;
    protected internal BehaviorService BehaviorService { get; }
    public Control Control { get; }
    protected bool EnableDragRect { get; }
    public SelectionRules SelectionRules { get; }
    public ICollection AssociatedComponents { get; }
    protected IComponent ParentComponent { get; }
    public AccessibleObject AccessibilityObject { get; }
    internal MouseButtons MouseButtonDown { get; }
    private bool Visible { get; private set; }
    private bool Enabled { get; private set; }
    private bool Locked { get; private set; }
    private bool AllowDrop { get; private set; }
    private string Name { get; private set; }
    private ContextMenu ContextMenu { get; private set; }
    private Point Location { get; private set; }
    [MonoTODOAttribute]
protected InheritanceAttribute InheritanceAttribute { get; }
    [MonoTODOAttribute]
public IList SnapLines { get; }
    [MonoTODOAttribute]
public bool ParticipatesWithSnapLines { get; }
    [MonoTODOAttribute]
public bool AutoResizeHandles { get; public set; }
    private static ControlDesigner();
    public virtual void Initialize(IComponent component);
    public virtual void OnSetComponentDefaults();
    protected internal BehaviorService get_BehaviorService();
    public virtual Control get_Control();
    protected virtual bool get_EnableDragRect();
    public virtual SelectionRules get_SelectionRules();
    public virtual ICollection get_AssociatedComponents();
    protected virtual IComponent get_ParentComponent();
    public virtual AccessibleObject get_AccessibilityObject();
    protected void DefWndProc(Message& m);
    protected void BaseWndProc(Message& m);
    private sealed virtual override void System.Windows.Forms.Design.IMessageReceiver.WndProc(Message& m);
    protected virtual void WndProc(Message& m);
    protected virtual bool GetHitTest(Point point);
    private bool IsMouseMessage(Msg msg);
    protected virtual void OnSetCursor();
    private void OnMouseDoubleClick();
    internal virtual void OnMouseDown(int x, int y);
    internal virtual void OnMouseMove(int x, int y);
    internal virtual void OnMouseUp();
    protected virtual void OnContextMenu(int x, int y);
    protected virtual void OnMouseEnter();
    protected virtual void OnMouseHover();
    protected virtual void OnMouseLeave();
    protected virtual void OnCreateHandle();
    protected virtual void OnPaintAdornments(PaintEventArgs pe);
    internal MouseButtons get_MouseButtonDown();
    protected virtual void OnMouseDragBegin(int x, int y);
    protected virtual void OnMouseDragMove(int x, int y);
    protected virtual void OnMouseDragEnd(bool cancel);
    protected void HookChildControls(Control firstChild);
    protected void UnhookChildControls(Control firstChild);
    public virtual bool CanBeParentedTo(IDesigner parentDesigner);
    protected void DisplayError(Exception e);
    protected void EnableDragDrop(bool value);
    private void OnGiveFeedback(object sender, GiveFeedbackEventArgs e);
    private void OnDragDrop(object sender, DragEventArgs e);
    private void OnDragEnter(object sender, DragEventArgs e);
    private void OnDragLeave(object sender, EventArgs e);
    private void OnDragOver(object sender, DragEventArgs e);
    protected virtual void OnGiveFeedback(GiveFeedbackEventArgs e);
    protected virtual void OnDragDrop(DragEventArgs de);
    protected virtual void OnDragEnter(DragEventArgs de);
    protected virtual void OnDragLeave(EventArgs e);
    protected virtual void OnDragOver(DragEventArgs de);
    protected virtual void PreFilterProperties(IDictionary properties);
    private bool get_Visible();
    private void set_Visible(bool value);
    private bool get_Enabled();
    private void set_Enabled(bool value);
    private bool get_Locked();
    private void set_Locked(bool value);
    private bool get_AllowDrop();
    private void set_AllowDrop(bool value);
    private string get_Name();
    private void set_Name(string value);
    private ContextMenu get_ContextMenu();
    private void set_ContextMenu(ContextMenu value);
    private Point get_Location();
    private void set_Location(Point value);
    internal object GetValue(object component, string propertyName);
    internal object GetValue(object component, string propertyName, Type propertyType);
    internal void SetValue(object component, string propertyName, object value);
    protected virtual void Dispose(bool disposing);
    public virtual ControlDesigner InternalControlDesigner(int internalControlIndex);
    public virtual int NumberOfInternalControlDesigners();
    protected bool EnableDesignMode(Control child, string name);
    [MonoTODOAttribute]
protected virtual ControlBodyGlyph GetControlGlyph(GlyphSelectionType selectionType);
    [MonoTODOAttribute]
public virtual GlyphCollection GetGlyphs(GlyphSelectionType selectionType);
    [MonoTODOAttribute]
public virtual void InitializeExistingComponent(IDictionary defaultValues);
    [MonoTODOAttribute]
public virtual void InitializeNewComponent(IDictionary defaultValues);
    [MonoTODOAttribute]
protected virtual void OnDragComplete(DragEventArgs de);
    protected virtual InheritanceAttribute get_InheritanceAttribute();
    public virtual IList get_SnapLines();
    public virtual bool get_ParticipatesWithSnapLines();
    public bool get_AutoResizeHandles();
    public void set_AutoResizeHandles(bool value);
}
internal class System.Windows.Forms.Design.DataMemberFieldConverter : TypeConverter {
}
[MonoTODOAttribute]
internal class System.Windows.Forms.Design.DataMemberFieldEditor : UITypeEditor {
}
[MonoTODOAttribute]
internal class System.Windows.Forms.Design.DataMemberListEditor : UITypeEditor {
}
internal class System.Windows.Forms.Design.DataSourceConverter : TypeConverter {
}
internal class System.Windows.Forms.Design.DefaultMenuCommands : object {
    private IServiceProvider _serviceProvider;
    private static string DT_DATA_FORMAT;
    private object _clipboard;
    public DefaultMenuCommands(IServiceProvider serviceProvider);
    public void AddTo(IMenuCommandService commands);
    private void Copy(object sender, EventArgs args);
    private void Paste(object sender, EventArgs args);
    private void Cut(object sender, EventArgs args);
    private void Delete(object sender, EventArgs args);
    private void SelectAll(object sender, EventArgs args);
    private object GetService(Type serviceType);
}
public class System.Windows.Forms.Design.DesignerOptions : object {
    [MonoTODOAttribute]
[BrowsableAttribute("False")]
public bool EnableInSituEditing { get; public set; }
    [MonoTODOAttribute]
public Size GridSize { get; public set; }
    [MonoTODOAttribute]
public bool ObjectBoundSmartTagAutoShow { get; public set; }
    [MonoTODOAttribute]
public bool ShowGrid { get; public set; }
    [MonoTODOAttribute]
public bool SnapToGrid { get; public set; }
    [MonoTODOAttribute]
public bool UseOptimizedCodeGeneration { get; public set; }
    [MonoTODOAttribute]
public bool UseSmartTags { get; public set; }
    [MonoTODOAttribute]
public bool UseSnapLines { get; public set; }
    public virtual bool get_EnableInSituEditing();
    public virtual void set_EnableInSituEditing(bool value);
    public virtual Size get_GridSize();
    public virtual void set_GridSize(Size value);
    public virtual bool get_ObjectBoundSmartTagAutoShow();
    public virtual void set_ObjectBoundSmartTagAutoShow(bool value);
    public virtual bool get_ShowGrid();
    public virtual void set_ShowGrid(bool value);
    public virtual bool get_SnapToGrid();
    public virtual void set_SnapToGrid(bool value);
    public virtual bool get_UseOptimizedCodeGeneration();
    public virtual void set_UseOptimizedCodeGeneration(bool value);
    public virtual bool get_UseSmartTags();
    public virtual void set_UseSmartTags(bool value);
    public virtual bool get_UseSnapLines();
    public virtual void set_UseSnapLines(bool value);
}
public class System.Windows.Forms.Design.DockEditor : UITypeEditor {
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
}
[ToolboxItemFilterAttribute("System.Windows.Forms")]
public class System.Windows.Forms.Design.DocumentDesigner : ScrollableControlDesigner {
    private DesignerViewFrame _designerViewFrame;
    protected IMenuEditorService menuEditorService;
    private DesignerViewFrame View { get; }
    private ViewTechnology[] System.ComponentModel.Design.IRootDesigner.SupportedTechnologies { get; }
    public SelectionRules SelectionRules { get; }
    private Color BackColor { get; private set; }
    private Point Location { get; private set; }
    private DesignerViewFrame get_View();
    public virtual void Initialize(IComponent component);
    private void InitializeSelectionService();
    protected virtual void Dispose(bool disposing);
    public virtual GlyphCollection GetGlyphs(GlyphSelectionType selectionType);
    protected virtual void WndProc(Message& m);
    protected virtual void OnContextMenu(int x, int y);
    protected virtual void OnCreateHandle();
    private void OnComponentAdded(object sender, ComponentEventArgs args);
    private void OnComponentRemoved(object sender, ComponentEventArgs args);
    private sealed virtual override object System.ComponentModel.Design.IRootDesigner.GetView(ViewTechnology technology);
    private sealed virtual override ViewTechnology[] System.ComponentModel.Design.IRootDesigner.get_SupportedTechnologies();
    private sealed virtual override bool System.Drawing.Design.IToolboxUser.GetToolSupported(ToolboxItem tool);
    protected virtual bool GetToolSupported(ToolboxItem tool);
    private sealed virtual override void System.Drawing.Design.IToolboxUser.ToolPicked(ToolboxItem tool);
    protected virtual void ToolPicked(ToolboxItem tool);
    public virtual SelectionRules get_SelectionRules();
    protected virtual void PreFilterProperties(IDictionary properties);
    private Color get_BackColor();
    private void set_BackColor(Color value);
    private Point get_Location();
    private void set_Location(Point value);
    protected virtual void EnsureMenuEditorService(IComponent c);
}
public class System.Windows.Forms.Design.EventHandlerService : object {
    [CompilerGeneratedAttribute]
private EventHandler EventHandlerChanged;
    private Control _focusWnd;
    public Control FocusWindow { get; }
    public EventHandlerService(Control focusWnd);
    [CompilerGeneratedAttribute]
public void add_EventHandlerChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_EventHandlerChanged(EventHandler value);
    [MonoTODOAttribute]
public object GetHandler(Type handlerType);
    [MonoTODOAttribute]
public void PopHandler(object handler);
    [MonoTODOAttribute]
public void PushHandler(object handler);
    public Control get_FocusWindow();
}
public class System.Windows.Forms.Design.FileNameEditor : UITypeEditor {
    [MonoTODOAttribute]
public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
    [MonoTODOAttribute]
protected virtual void InitializeDialog(OpenFileDialog openFileDialog);
}
[MonoTODOAttribute]
public class System.Windows.Forms.Design.FolderNameEditor : UITypeEditor {
    private FolderBrowser folderBrowser;
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
    protected virtual void InitializeDialog(FolderBrowser folderBrowser);
}
[MonoTODOAttribute]
internal class System.Windows.Forms.Design.FormatStringEditor : UITypeEditor {
}
internal class System.Windows.Forms.Design.FormDocumentDesigner : DocumentDesigner {
    public virtual void Initialize(IComponent component);
    public virtual bool CanParent(Control control);
    protected virtual void WndProc(Message& m);
}
internal class System.Windows.Forms.Design.ImageCollectionEditor : CollectionEditor {
    public ImageCollectionEditor(Type type);
}
[MonoTODOAttribute]
internal class System.Windows.Forms.Design.ImageIndexEditor : UITypeEditor {
}
public class System.Windows.Forms.Design.ImageListCodeDomSerializer : CodeDomSerializer {
    [MonoTODOAttribute]
public virtual object Deserialize(IDesignerSerializationManager manager, object codeObject);
    [MonoTODOAttribute]
public virtual object Serialize(IDesignerSerializationManager manager, object value);
}
public interface System.Windows.Forms.Design.IMenuEditorService {
    public abstract virtual Menu GetMenu();
    public abstract virtual bool IsActive();
    public abstract virtual bool MessageFilter(Message& m);
    public abstract virtual void SetMenu(Menu menu);
    public abstract virtual void SetSelection(MenuItem item);
}
internal interface System.Windows.Forms.Design.IMessageReceiver {
    public abstract virtual void WndProc(Message& m);
}
internal interface System.Windows.Forms.Design.IOleDragClient {
    public bool CanModifyComponents { get; }
    public IComponent Component { get; }
    public abstract virtual bool AddComponent(IComponent component, string name, bool firstAdd);
    public abstract virtual Control GetControlForComponent(object component);
    public abstract virtual Control GetDesignerControl();
    public abstract virtual bool IsDropOk(IComponent component);
    public abstract virtual bool get_CanModifyComponents();
    public abstract virtual IComponent get_Component();
}
internal interface System.Windows.Forms.Design.ISelectionUIHandler {
    public abstract virtual bool BeginDrag(Object[] components, SelectionRules rules, int initialX, int initialY);
    public abstract virtual void DragMoved(Object[] components, Rectangle offset);
    public abstract virtual void EndDrag(Object[] components, bool cancel);
    public abstract virtual Rectangle GetComponentBounds(object component);
    public abstract virtual SelectionRules GetComponentRules(object component);
    public abstract virtual Rectangle GetSelectionClipRect(object component);
    public abstract virtual void OleDragDrop(DragEventArgs de);
    public abstract virtual void OleDragEnter(DragEventArgs de);
    public abstract virtual void OleDragLeave();
    public abstract virtual void OleDragOver(DragEventArgs de);
    public abstract virtual void OnSelectionDoubleClick(IComponent component);
    public abstract virtual bool QueryBeginDrag(Object[] components, SelectionRules rules, int initialX, int initialY);
    public abstract virtual void ShowContextMenu(IComponent component);
}
internal interface System.Windows.Forms.Design.IUISelectionService {
    public bool SelectionInProgress { get; }
    public bool DragDropInProgress { get; }
    public bool ResizeInProgress { get; }
    public Rectangle SelectionBounds { get; }
    public abstract virtual bool get_SelectionInProgress();
    public abstract virtual bool get_DragDropInProgress();
    public abstract virtual bool get_ResizeInProgress();
    public abstract virtual Rectangle get_SelectionBounds();
    public abstract virtual void MouseDragBegin(Control container, int x, int y);
    public abstract virtual void MouseDragMove(int x, int y);
    public abstract virtual void MouseDragEnd(bool cancel);
    public abstract virtual void DragBegin();
    public abstract virtual void DragOver(Control container, int x, int y);
    public abstract virtual void DragDrop(bool cancel, Control container, int x, int y);
    public abstract virtual void PaintAdornments(Control container, Graphics gfx);
    public abstract virtual bool SetCursor(int x, int y);
    public abstract virtual bool AdornmentsHitTest(Control control, int x, int y);
}
internal class System.Windows.Forms.Design.ListControlStringCollectionEditor : StringCollectionEditor {
    public ListControlStringCollectionEditor(Type type);
}
public abstract class System.Windows.Forms.Design.MaskDescriptor : object {
    [MonoTODOAttribute]
public CultureInfo Culture { get; }
    public string Mask { get; }
    public string Name { get; }
    public string Sample { get; }
    public Type ValidatingType { get; }
    public virtual CultureInfo get_Culture();
    public abstract virtual string get_Mask();
    public abstract virtual string get_Name();
    public abstract virtual string get_Sample();
    public abstract virtual Type get_ValidatingType();
    [MonoTODOAttribute]
public virtual bool Equals(object maskDescriptor);
    [MonoTODOAttribute]
public virtual int GetHashCode();
    [MonoTODOAttribute]
public static bool IsValidMaskDescriptor(MaskDescriptor maskDescriptor);
    [MonoTODOAttribute]
public static bool IsValidMaskDescriptor(MaskDescriptor maskDescriptor, String& validationErrorDescription);
    [MonoTODOAttribute]
public virtual string ToString();
}
public class System.Windows.Forms.Design.MenuCommands : StandardCommands {
    public static CommandID ComponentTrayMenu;
    public static CommandID ContainerMenu;
    public static CommandID DesignerProperties;
    public static CommandID KeyCancel;
    public static CommandID KeyDefaultAction;
    public static CommandID KeyMoveDown;
    public static CommandID KeyMoveLeft;
    public static CommandID KeyMoveRight;
    public static CommandID KeyMoveUp;
    public static CommandID KeyNudgeDown;
    public static CommandID KeyNudgeHeightDecrease;
    public static CommandID KeyNudgeHeightIncrease;
    public static CommandID KeyNudgeLeft;
    public static CommandID KeyNudgeRight;
    public static CommandID KeyNudgeUp;
    public static CommandID KeyNudgeWidthDecrease;
    public static CommandID KeyNudgeWidthIncrease;
    public static CommandID KeyReverseCancel;
    public static CommandID KeySelectNext;
    public static CommandID KeySelectPrevious;
    public static CommandID KeySizeHeightDecrease;
    public static CommandID KeySizeHeightIncrease;
    public static CommandID KeySizeWidthDecrease;
    public static CommandID KeySizeWidthIncrease;
    public static CommandID KeyTabOrderSelect;
    public static CommandID SelectionMenu;
    public static CommandID TraySelectionMenu;
    public static CommandID EditLabel;
    public static CommandID KeyEnd;
    public static CommandID KeyHome;
    public static CommandID KeyInvokeSmartTag;
    public static CommandID KeyShiftEnd;
    public static CommandID KeyShiftHome;
    public static CommandID SetStatusRectangle;
    public static CommandID SetStatusText;
    private static Guid guidVSStd97;
    private static Guid guidVSStd2K;
    private static Guid wfCommandSet;
    private static Guid wfMenuGroup;
    private static MenuCommands();
}
internal class System.Windows.Forms.Design.Native : object {
    private static Type _xplatuiType;
    private static Native();
    private static object InvokeMethod(string methodName, Object[] args);
    private static object InvokeMethod(string methodName, Object[] args, Type[] types);
    public static void DefWndProc(Message& m);
    public static IntPtr SendMessage(IntPtr hwnd, Msg message, IntPtr wParam, IntPtr lParam);
    public static Point PointToClient(Control control, Point point);
    public static IntPtr SetParent(IntPtr childHandle, IntPtr parentHandle);
    public static int HiWord(int dword);
    public static int LoWord(int dword);
    public static IntPtr LParam(int hiword, int loword);
}
internal class System.Windows.Forms.Design.PanelDesigner : ParentControlDesigner {
    public virtual void Initialize(IComponent component);
    protected virtual void OnPaintAdornments(PaintEventArgs pe);
}
public class System.Windows.Forms.Design.ParentControlDesigner : ControlDesigner {
    private bool _defaultDrawGrid;
    private bool _defaultSnapToGrid;
    private Size _defaultGridSize;
    private bool _drawGrid;
    private bool _snapToGrid;
    private Size _gridSize;
    private Point _mouseDownPoint;
    protected Point DefaultControlLocation { get; }
    protected bool EnableDragRect { get; }
    protected bool DrawGrid { get; protected set; }
    private bool SnapToGrid { get; private set; }
    protected Size GridSize { get; protected set; }
    [MonoTODOAttribute]
protected bool AllowControlLasso { get; }
    [MonoTODOAttribute]
protected bool AllowGenericDragBox { get; }
    [MonoTODOAttribute]
protected internal bool AllowSetChildIndexOnDrop { get; }
    [MonoTODOAttribute]
public IList SnapLines { get; }
    [MonoTODOAttribute]
protected ToolboxItem MouseDragTool { get; }
    public virtual void Initialize(IComponent component);
    protected virtual void Dispose(bool disposing);
    protected static void InvokeCreateTool(ParentControlDesigner toInvoke, ToolboxItem tool);
    protected void CreateTool(ToolboxItem tool);
    protected void CreateTool(ToolboxItem tool, Point location);
    protected void CreateTool(ToolboxItem tool, Rectangle bounds);
    protected virtual IComponent[] CreateToolCore(ToolboxItem tool, int x, int y, int width, int height, bool hasLocation, bool hasSize);
    public virtual bool CanParent(Control control);
    public virtual bool CanParent(ControlDesigner controlDesigner);
    protected virtual void OnDragDrop(DragEventArgs de);
    protected virtual void OnDragEnter(DragEventArgs de);
    protected virtual void OnDragLeave(EventArgs e);
    protected virtual void OnDragOver(DragEventArgs de);
    protected virtual Point get_DefaultControlLocation();
    protected virtual bool get_EnableDragRect();
    private void OnComponentRemoving(object sender, ComponentEventArgs args);
    private void OnComponentRemoved(object sender, ComponentEventArgs args);
    protected virtual void PreFilterProperties(IDictionary properties);
    private void PopulateGridProperties();
    private void OnParentGridPropertiesChanged(ParentControlDesigner parentDesigner);
    private ParentControlDesigner GetParentControlDesignerOf(Control control);
    protected virtual bool get_DrawGrid();
    protected virtual void set_DrawGrid(bool value);
    private bool get_SnapToGrid();
    private void set_SnapToGrid(bool value);
    protected Size get_GridSize();
    protected void set_GridSize(Size value);
    private bool ShouldSerializeDrawGrid();
    private void ResetDrawGrid();
    private bool ShouldSerializeSnapToGrid();
    private void ResetSnapToGrid();
    private bool ShouldSerializeGridSize();
    private void ResetGridSize();
    protected virtual void OnMouseDragBegin(int x, int y);
    protected virtual void OnMouseDragMove(int x, int y);
    protected virtual void OnMouseDragEnd(bool cancel);
    protected virtual void OnDragComplete(DragEventArgs de);
    internal virtual void OnMouseDown(int x, int y);
    internal virtual void OnMouseUp();
    internal virtual void OnMouseMove(int x, int y);
    private Point SnapPointToGrid(Point location);
    protected virtual void OnSetCursor();
    protected virtual void OnPaintAdornments(PaintEventArgs pe);
    protected Control GetControl(object component);
    protected virtual bool get_AllowControlLasso();
    protected virtual bool get_AllowGenericDragBox();
    protected internal virtual bool get_AllowSetChildIndexOnDrop();
    public virtual IList get_SnapLines();
    protected ToolboxItem get_MouseDragTool();
    [MonoTODOAttribute]
public virtual void InitializeNewComponent(IDictionary defaultValues);
    [MonoTODOAttribute]
protected void AddPaddingSnapLines(ArrayList& snapLines);
    [MonoTODOAttribute]
protected virtual Control GetParentForComponent(IComponent component);
    [MonoTODOAttribute]
protected virtual ControlBodyGlyph GetControlGlyph(GlyphSelectionType selectionType);
    [MonoTODOAttribute]
public virtual GlyphCollection GetGlyphs(GlyphSelectionType selectionType);
    [MonoTODOAttribute]
protected Rectangle GetUpdatedRect(Rectangle originalRect, Rectangle dragRect, bool updateSize);
}
public class System.Windows.Forms.Design.ScrollableControlDesigner : ParentControlDesigner {
    private static int HTHSCROLL;
    private static int HTVSCROLL;
    protected virtual bool GetHitTest(Point pt);
    protected virtual void WndProc(Message& m);
}
internal class System.Windows.Forms.Design.SelectionFrame : object {
    private Rectangle _bounds;
    private Control _control;
    private Rectangle[] _handles;
    private GrabHandle _handle;
    private static int BORDER_SIZE;
    private bool _resizing;
    public Rectangle Bounds { get; public set; }
    private SelectionRules SelectionRules { get; }
    public Control Control { get; public set; }
    public Control Parent { get; }
    private GrabHandle GrabHandleSelected { get; private set; }
    private bool PrimarySelection { get; }
    public SelectionFrame(Control control);
    public Rectangle get_Bounds();
    public void set_Bounds(Rectangle value);
    private SelectionRules get_SelectionRules();
    public Control get_Control();
    public void set_Control(Control value);
    public Control get_Parent();
    private GrabHandle get_GrabHandleSelected();
    private void set_GrabHandleSelected(GrabHandle value);
    private bool get_PrimarySelection();
    public void OnPaint(Graphics gfx);
    private void DrawGrabHandles(Graphics gfx);
    protected void DrawFrame(Graphics gfx);
    public bool SetCursor(int x, int y);
    public void ResizeBegin(int x, int y);
    private bool CheckSelectionRules(SelectionRules rules, SelectionRules toCheck);
    public Rectangle ResizeContinue(int x, int y);
    public void ResizeEnd(bool cancel);
    public void Resize(Rectangle deltaBounds);
    public bool HitTest(int x, int y);
    private GrabHandle PointToGrabHandle(Point pointerLocation);
    private bool IsCursorOnGrabHandle(Point pointerLocation, Rectangle handleRectangle);
    private Point PointToClient(Point screenPoint);
}
[FlagsAttribute]
public enum System.Windows.Forms.Design.SelectionRules : Enum {
    public int value__;
    public static SelectionRules AllSizeable;
    public static SelectionRules BottomSizeable;
    public static SelectionRules LeftSizeable;
    public static SelectionRules Locked;
    public static SelectionRules Moveable;
    public static SelectionRules None;
    public static SelectionRules RightSizeable;
    public static SelectionRules TopSizeable;
    public static SelectionRules Visible;
}
public class System.Windows.Forms.Design.ShortcutKeysEditor : UITypeEditor {
    [MonoTODOAttribute]
public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    [MonoTODOAttribute]
public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
}
internal class System.Windows.Forms.Design.SplitContainerDesigner : ParentControlDesigner {
    public virtual void Initialize(IComponent component);
    public virtual ControlDesigner InternalControlDesigner(int internalControlIndex);
    private ControlDesigner GetDesigner(IComponent component);
    public virtual int NumberOfInternalControlDesigners();
}
internal class System.Windows.Forms.Design.StringArrayEditor : StringCollectionEditor {
    public StringArrayEditor(Type type);
    protected virtual Object[] GetItems(object editValue);
    protected virtual object SetItems(object editValue, Object[] value);
    protected virtual Type CreateCollectionItemType();
}
internal class System.Windows.Forms.Design.StringCollectionEditor : CollectionEditor {
    public StringCollectionEditor(Type type);
    protected virtual CollectionForm CreateCollectionForm();
}
internal class System.Windows.Forms.Design.TabPageCollectionEditor : CollectionEditor {
    public TabPageCollectionEditor(Type type);
}
internal class System.Windows.Forms.Design.UISelectionService : object {
    private IServiceProvider _serviceProvider;
    private DesignerTransaction _transaction;
    private ISelectionService _selectionService;
    private bool _dragging;
    private Point _prevMousePosition;
    private bool _firstMove;
    private bool _selecting;
    private Control _selectionContainer;
    private Point _initialMousePosition;
    private Rectangle _selectionRectangle;
    private ArrayList _selectionFrames;
    private SelectionFrame _selectionFrame;
    private bool _resizing;
    private ISelectionService SelectionService { get; }
    public bool SelectionInProgress { get; }
    public bool DragDropInProgress { get; }
    public bool ResizeInProgress { get; }
    public Rectangle SelectionBounds { get; }
    public UISelectionService(IServiceProvider serviceProvider);
    private ISelectionService get_SelectionService();
    private object GetService(Type service);
    public sealed virtual bool get_SelectionInProgress();
    public sealed virtual bool get_DragDropInProgress();
    public sealed virtual bool get_ResizeInProgress();
    public sealed virtual bool SetCursor(int x, int y);
    public sealed virtual void MouseDragBegin(Control container, int x, int y);
    public sealed virtual void MouseDragMove(int x, int y);
    public sealed virtual void MouseDragEnd(bool cancel);
    public sealed virtual void DragBegin();
    public sealed virtual void DragOver(Control container, int x, int y);
    public sealed virtual void DragDrop(bool cancel, Control container, int x, int y);
    private void MoveSelection(Control container, int dx, int dy);
    public sealed virtual Rectangle get_SelectionBounds();
    private void SelectionBegin(Control container, int x, int y);
    private void SelectionContinue(int x, int y);
    private void SelectionEnd(bool cancel);
    private void ResizeBegin(int x, int y);
    private void ResizeContinue(int x, int y);
    private void ResizeEnd(bool cancel);
    private SelectionFrame GetSelectionFrameAt(int x, int y);
    private SelectionFrame GetSelectionFrameFor(Control control);
    public sealed virtual bool AdornmentsHitTest(Control control, int x, int y);
    public sealed virtual void PaintAdornments(Control container, Graphics gfx);
    private void DrawSelectionRectangle(Graphics gfx, Rectangle frame, Color color);
    private void OnSelectionChanged(object sender, EventArgs args);
    private ICollection GetControlsIn(Rectangle rect);
}
public class System.Windows.Forms.Design.WindowsFormsDesignerOptionService : DesignerOptionService {
    public DesignerOptions CompatibilityOptions { get; }
    public virtual DesignerOptions get_CompatibilityOptions();
    [MonoTODOAttribute]
protected virtual void PopulateOptionCollection(DesignerOptionCollection options);
}
internal class System.Windows.Forms.Design.WndProcRouter : object {
    private IWindowTarget _oldTarget;
    private IMessageReceiver _receiver;
    private Control _control;
    public Control Control { get; }
    public IWindowTarget OldWindowTarget { get; }
    public WndProcRouter(Control control, IMessageReceiver receiver);
    public Control get_Control();
    public IWindowTarget get_OldWindowTarget();
    public void ToControl(Message& m);
    public void ToSystem(Message& m);
    private sealed virtual override void System.Windows.Forms.IWindowTarget.OnHandleChange(IntPtr newHandle);
    private sealed virtual override void System.Windows.Forms.IWindowTarget.OnMessage(Message& m);
    public sealed virtual void Dispose();
}
