public class JetBrains.ReSharper.TestRunner.Adapters.MsTest.AdapterDiscoveryContext : object {
    [CompilerGeneratedAttribute]
private IRunSettings <RunSettings>k__BackingField;
    public IRunSettings RunSettings { get; }
    public AdapterDiscoveryContext(string runSettings, MsTestAssemblyTask assemblyTask);
    [CompilerGeneratedAttribute]
public sealed virtual IRunSettings get_RunSettings();
    [CompilerGeneratedAttribute]
internal static void <.ctor>g__AddResolveDirectory|3_0(string relativePath, <>c__DisplayClass3_0& , <>c__DisplayClass3_1& );
}
public class JetBrains.ReSharper.TestRunner.Adapters.MsTest.AdapterRunContext : AdapterDiscoveryContext {
    [CompilerGeneratedAttribute]
private RunConfiguration <RunConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <KeepAlive>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsBeingDebugged>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TestRunDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SolutionDirectory>k__BackingField;
    public RunConfiguration RunConfiguration { get; }
    public bool KeepAlive { get; }
    public bool InIsolation { get; }
    public bool IsDataCollectionEnabled { get; }
    public bool IsBeingDebugged { get; }
    public string TestRunDirectory { get; }
    public string SolutionDirectory { get; }
    public AdapterRunContext(string runSettings, MsTestAssemblyTask assemblyTask);
    public sealed virtual ITestCaseFilterExpression GetTestCaseFilter(IEnumerable`1<string> supportedProperties, Func`2<string, TestProperty> propertyProvider);
    [CompilerGeneratedAttribute]
public RunConfiguration get_RunConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_KeepAlive();
    public sealed virtual bool get_InIsolation();
    public sealed virtual bool get_IsDataCollectionEnabled();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsBeingDebugged();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TestRunDirectory();
    [CompilerGeneratedAttribute]
public sealed virtual string get_SolutionDirectory();
}
internal class JetBrains.ReSharper.TestRunner.Adapters.MsTest.Discoverer : object {
    private ITestDiscoverySink myDiscoverySink;
    private RemoteTaskDepot myDepot;
    private ILogger myLogger;
    public Discoverer(ITestDiscoverySink discoverySink, RemoteTaskDepot depot);
    public void ReportAll(TestRequest request);
}
internal class JetBrains.ReSharper.TestRunner.Adapters.MsTest.Executor : object {
    private RunContext myRunContext;
    private ILogger myLogger;
    private CancellationToken myCt;
    internal Executor(ITestExecutionSink executionSink, RemoteTaskDepot depot, CancellationToken ct);
    public void RunAll(TestRunRequest request);
    private void RunAllCore(AdapterRunContext adapterContext);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.TestRunner.Adapters.MsTest.Extensions.MsTestExtensions : object {
    [ExtensionAttribute]
public static LoggingLevel ToLoggingLevel(TestMessageLevel testMessageLevel);
    [ExtensionAttribute]
public static TestOutputType GetTaskOutputType(TestResultMessage message);
    [ExtensionAttribute]
public static TestOutcome ToTaskOutcome(TestOutcome outcome);
    [ExtensionAttribute]
public static TestOutcome ToTestOutcome(TestOutcome outcome);
}
public class JetBrains.ReSharper.TestRunner.Adapters.MsTest.MsTestLoader : object {
    private CustomLoader myLoader;
    private Func`2<TestAdapterInfo, IDefaultTestAdapterLoadContextFactory> myFactoryFactory;
    public MsTestLoader(CustomLoader loader, Func`2<TestAdapterInfo, IDefaultTestAdapterLoadContextFactory> factoryFactory);
    public sealed virtual ITestAdapterLoadContext Initialize(TestRequest request);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.TestRunner.Adapters.MsTest.MsTestLoader/<GetProbingPaths>d__4")]
private IEnumerable`1<string> GetProbingPaths(TestRequest request);
}
public class JetBrains.ReSharper.TestRunner.Adapters.MsTest.MsTestRunner : LongLivedMarshalByRefObject {
    private CancellationTokenSource myDiscoveryCts;
    private CancellationTokenSource myExecutionCts;
    private ILogger myLogger;
    public sealed virtual void DiscoverTests(TestDiscoveryRequest request, ITestDiscoverySink discoverySink);
    public sealed virtual void AbortDiscovery();
    public sealed virtual void RunTests(TestRunRequest request, ITestDiscoverySink discoverySink, ITestExecutionSink executionSink);
    public sealed virtual void AbortRun();
}
internal class JetBrains.ReSharper.TestRunner.Adapters.MsTest.RemoteTaskBuilder : object {
    private RemoteTaskDepot myDepot;
    private ILogger myLogger;
    private HashSet`1<string> myTakenIds;
    public RemoteTaskBuilder(RemoteTaskDepot depot, ILogger logger);
    public RemoteTask[] GetRemoteTasks(IEnumerable`1<TestCase> testCases);
    [IteratorStateMachineAttribute("JetBrains.ReSharper.TestRunner.Adapters.MsTest.RemoteTaskBuilder/<GetTaskHierarchy>d__5")]
private IEnumerable`1<MsTestTestElementTask> GetTaskHierarchy(TestCase testCase);
    private String[] GetCategories(TestCase testCase);
}
[DefaultMemberAttribute("Item")]
internal class JetBrains.ReSharper.TestRunner.Adapters.MsTest.RemoteTaskDepot : object {
    private ConcurrentDictionary`2<string, List`1<TestCase>> myTestCasesByReSharperId;
    private Dictionary`2<TestCase, string> myReSharperIdByTestCase;
    private IDictionary`2<string, MsTestTestElementTask> myTasksByReSharperId;
    private ILogger myLogger;
    public MsTestTestElementTask Item { get; }
    public MsTestTestElementTask Item { get; }
    public MsTestTestElementTask Item { get; }
    public RemoteTaskDepot(RemoteTask[] tasks, ILogger logger);
    public MsTestTestElementTask get_Item(MsTestTestElementTask task);
    public MsTestTestElementTask get_Item(TestCase testCase);
    public MsTestTestElementTask get_Item(TestResult testResult);
    public MsTestTestElementTask TryGetParent(MsTestTestElementTask task);
    public void Bind(TestCase testCase, MsTestTestElementTask task);
    public void Add(MsTestTestElementTask task);
    public void Update(MsTestTestElementTask task);
    public IEnumerable`1<TestCase> GetTestCasesToRun();
}
internal class JetBrains.ReSharper.TestRunner.Adapters.MsTest.RunContext : object {
    private RemoteTaskDepot myDepot;
    private ITestExecutionSink myExecutionSink;
    private ConcurrentDictionary`2<object, TaskWrapper> myTasks;
    private ConcurrentDictionary`2<string, TaskWrapper> myTasksById;
    private ISet`1<MsTestTestElementTask> myHandledTests;
    public RunContext(RemoteTaskDepot depot, ITestExecutionSink executionSink);
    public IEnumerable`1<TestCase> GetTestCasesToRun();
    public TaskWrapper GetParentTask(TaskWrapper task);
    public TaskWrapper GetOrCreateTask(TestCase testCase);
    public TaskWrapper GetOrCreateTask(TestResult testResult);
    public TaskWrapper GetTask(TestResult testResult);
    private MsTestTestElementTask CreateTask(TestResult testResult);
    [CompilerGeneratedAttribute]
private RemoteTask <.ctor>b__5_0(RemoteTask t);
}
public class JetBrains.ReSharper.TestRunner.Adapters.MsTest.StaTaskScheduler : TaskScheduler {
    private BlockingCollection`1<Task> myTasks;
    private List`1<Thread> myThreads;
    public int MaximumConcurrencyLevel { get; }
    public StaTaskScheduler(int numberOfThreads);
    protected virtual void QueueTask(Task task);
    protected virtual IEnumerable`1<Task> GetScheduledTasks();
    protected virtual bool TryExecuteTaskInline(Task task, bool taskWasPreviouslyQueued);
    public virtual int get_MaximumConcurrencyLevel();
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private Thread <.ctor>b__2_0(int i);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_2();
}
internal class JetBrains.ReSharper.TestRunner.Adapters.MsTest.TaskWrapper : object {
    private MsTestTestElementTask myTask;
    private ITestExecutionSink mySink;
    private RunContext myRunContext;
    private int myStarted;
    private int myFinished;
    public MsTestTestElementTask Task { get; }
    public TaskWrapper Parent { get; }
    public TaskWrapper(RunContext runContext, MsTestTestElementTask elementTask, ITestExecutionSink executionSink);
    public MsTestTestElementTask get_Task();
    public TaskWrapper get_Parent();
    public void Starting();
    public void Finished(TestResult result);
}
internal static class JetBrains.ReSharper.TestRunner.Adapters.MsTest.ThreadApartmentStateProperty : object {
    public static PlatformApartmentState Get(AdapterRunContext ctx);
    private static PlatformApartmentState TryGetApartmentStateUnsafe(AdapterRunContext ctx);
}
[ExtensionAttribute]
internal static class JetBrains.ReSharper.TestRunner.Adapters.MsTest.XmlUtils : object {
    public static XmlDocument Load(string xml);
    public static XmlNode EnsureNode(XmlNode parent, string xpath);
    [ExtensionAttribute]
public static XmlElement CreateElement(XmlNode parent, string tagName);
}
