internal class JetBrains.ReSharper.TestRunner.Adapters.NUnit2.NUnitAddinsChecker : object {
    private static ILogger ourLogger;
    private static NUnitAddinsChecker();
    public static bool HasAddinsInAssembly(string assemblyLocation);
}
public class JetBrains.ReSharper.TestRunner.Adapters.NUnit2.NUnitCustomInstallationLoader : object {
    private CustomLoader myLoader;
    private ILogger myLogger;
    private Func`2<TestAdapterInfo, IDefaultTestAdapterLoadContextFactory> myFactoryFactory;
    public NUnitCustomInstallationLoader(CustomLoader loader, ILogger logger, Func`2<TestAdapterInfo, IDefaultTestAdapterLoadContextFactory> factoryFactory);
    public sealed virtual ITestAdapterLoadContext Initialize(TestRequest request);
    private void RegisterPriorityAssemblies(ITestAdapterLoadContext ctx, string containerLocation, string customInstallationFolder);
    private bool IsSameOrHigherVersion(string path, AssemblyName asmName);
}
internal class JetBrains.ReSharper.TestRunner.Adapters.NUnit2.NUnitExecutionFilter : object {
    private RemoteTaskDepot myDepot;
    private ITestExecutionSink mySink;
    private IDictionary`2<ITest, bool> myCachedResult;
    public bool IsEmpty { get; }
    public NUnitExecutionFilter(RemoteTaskDepot depot, ITestExecutionSink executionSink, ITest testRoot);
    public sealed virtual bool get_IsEmpty();
    private void BuildAndReportExplicit(ITest test);
    public sealed virtual bool Pass(ITest test);
    public sealed virtual bool Match(ITest test);
    private bool ShouldRun(ITest test, bool isExplicitInEffect);
    private bool ShouldRunInternal(ITest test, bool isExplicitInEffect);
}
public class JetBrains.ReSharper.TestRunner.Adapters.NUnit2.NUnitNUnitId : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullName>k__BackingField;
    public string Id { get; }
    public string FullName { get; }
    public NUnitNUnitId(ITest node);
    public NUnitNUnitId(TestName testName);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public string get_FullName();
    public virtual string ToString();
}
public class JetBrains.ReSharper.TestRunner.Adapters.NUnit2.NUnitReSharperId : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    public string Id { get; }
    public NUnitReSharperId(ITest node);
    public NUnitReSharperId(NUnitTestElementTask task);
    [CompilerGeneratedAttribute]
public string get_Id();
    public static string Self(ITest node);
    public static string Parent(ITest node);
    private static string GenerateId(ITest node);
}
public class JetBrains.ReSharper.TestRunner.Adapters.NUnit2.NUnitRunner : LongLivedMarshalByRefObject {
    private ILogger myLogger;
    private CancellationTokenSource myDiscoveryCts;
    private CancellationTokenSource myExecutionCts;
    public sealed virtual void DiscoverTests(TestDiscoveryRequest request, ITestDiscoverySink discoverySink);
    public sealed virtual void RunTests(TestRunRequest request, ITestDiscoverySink discoverySink, ITestExecutionSink executionSink);
    private ITest DiscoverTestsFrom(TestRunner runner, TestPackage package);
    private void WithContainerAsNUnitAssembly(TestContainer container, Action`1<NUnitTestAssemblyTask> action);
    private void TryLoadAddinsFrom(string addinsDirectory);
    private bool ShouldInstallAddins(NUnitTestAssemblyTask assemblyTask);
    private void UpdateNUnitAddinsDirectory(string addinsDirectory);
    private TestPackage CreateTestPackage(NUnitTestAssemblyTask assemblyTask);
    public sealed virtual void AbortDiscovery();
    public sealed virtual void AbortRun();
}
internal class JetBrains.ReSharper.TestRunner.Adapters.NUnit2.NUnitTestListener : object {
    private RemoteTaskDepot myDepot;
    private ITestExecutionSink mySink;
    private Stack`1<NUnitTestElementTask> myCurrentTasks;
    private ILogger myLogger;
    public NUnitTestListener(RemoteTaskDepot depot, ITestExecutionSink executionSink);
    public sealed virtual void RunStarted(string name, int testCount);
    public sealed virtual void RunFinished(TestResult result);
    public sealed virtual void RunFinished(Exception exception);
    public sealed virtual void TestStarted(TestName testName);
    public sealed virtual void TestFinished(TestResult result);
    public sealed virtual void SuiteStarted(TestName testName);
    public sealed virtual void SuiteFinished(TestResult result);
    public sealed virtual void UnhandledException(Exception exception);
    public sealed virtual void TestOutput(TestOutput testOutput);
    private static TestOutputType GetTaskOutputType(TestOutputType outputType);
    private static TestOutcome GetTestResult(TestResult result);
    private static ExceptionInfo[] GetTestExceptions(TestResult result);
    private static ExceptionInfo[] ConvertExceptions(Exception exception, String& message);
    [CompilerGeneratedAttribute]
private RemoteTask <.ctor>b__4_0(RemoteTask t);
}
internal class JetBrains.ReSharper.TestRunner.Adapters.NUnit2.NUnitTestReporter : object {
    private RemoteTaskDepot myTaskDepot;
    private ITestDiscoverySink myDiscoverySink;
    private HashSet`1<string> myTakenIds;
    private ILogger myLogger;
    public NUnitTestReporter(RemoteTaskDepot taskDepot, ITestDiscoverySink discoverySink);
    public void ReportAll(ITest root);
    private NUnitTestElementTask GetRemoteTask(ITest node);
}
internal static class JetBrains.ReSharper.TestRunner.Adapters.NUnit2.RemoteTaskBuilder : object {
    public static NUnitTestElementTask GetRemoteTask(ITest node);
}
[DefaultMemberAttribute("Item")]
internal class JetBrains.ReSharper.TestRunner.Adapters.NUnit2.RemoteTaskDepot : object {
    private IDictionary`2<string, NUnitTestElementTask> myTasksByReSharperId;
    private IDictionary`2<string, NUnitTestElementTask> myTasksByNUnitId;
    public NUnitTestElementTask Item { get; }
    public NUnitTestElementTask Item { get; public set; }
    public NUnitTestElementTask Item { get; public set; }
    public RemoteTaskDepot(RemoteTask[] tasks);
    public NUnitTestElementTask get_Item(ITest test);
    public NUnitTestElementTask get_Item(NUnitReSharperId id);
    public void set_Item(NUnitReSharperId id, NUnitTestElementTask value);
    public NUnitTestElementTask get_Item(NUnitNUnitId id);
    public void set_Item(NUnitNUnitId id, NUnitTestElementTask value);
    public NUnitTestElementTask TryGetParent(NUnitTestElementTask task);
    public void Bind(NUnitReSharperId resharperId, NUnitNUnitId nunitId);
    public void Add(ITest node, NUnitTestElementTask task);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.TestRunner.Adapters.NUnit2.TestExtensions : object {
    [ExtensionAttribute]
internal static TestPackage Dump(TestPackage package, ILogger logger);
    [ExtensionAttribute]
public static bool IsParameterizedFixture(ITest test);
    [ExtensionAttribute]
public static bool IsParameterizedMethod(ITest test);
    [ExtensionAttribute]
public static bool IsTestFixture(ITest test);
    [ExtensionAttribute]
public static bool IsTestMethod(ITest test);
    [ExtensionAttribute]
public static bool IsSetUpFixture(ITest test);
    [ExtensionAttribute]
public static IEnumerable`1<ITest> GetChildren(ITest test);
    [ExtensionAttribute]
public static string GetDisplayName(ITest test);
    [ExtensionAttribute]
public static String[] GetCategories(ITest test);
    [ExtensionAttribute]
public static bool IsExplicit(ITest test);
    [ExtensionAttribute]
public static string GetSkipReason(ITest test);
    [ExtensionAttribute]
public static IEnumerable`1<ITest> GetLeafs(ITest test);
}
