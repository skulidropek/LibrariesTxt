public class JetBrains.ReSharper.TestRunner.Adapters.NUnit3.AdapterSettings : object {
    private static string RANDOM_SEED_FILE;
    private ILogger myLogger;
    [CompilerGeneratedAttribute]
private int <MaxCpuCount>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResultsDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetPlatform>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetFrameworkVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TestAdapterPaths>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CollectSourceInformation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableAppDomain>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableParallelization>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DesignMode>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <TestProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InternalTraceLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WorkDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Where>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TestOutputXml>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DefaultTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NumberOfTestWorkers>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShadowCopyFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Verbosity>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseVsKeepEngineRunning>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BasePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PrivateBinPath>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <RandomSeed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RandomSeedSpecified>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CollectDataForEachTestSeparately>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InProcDataCollectorsAvailable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SynchronousEvents>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DomainUsage>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowInternalProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseParentFQNForParametrizedTests>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseNUnitIdforTestCaseId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ConsoleOut>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StopOnError>k__BackingField;
    [CompilerGeneratedAttribute]
private VsTestCategoryType <VsTestCategoryType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DumpXmlTestDiscovery>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DumpXmlTestResults>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultTestNamePattern>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreFilter>k__BackingField;
    public int MaxCpuCount { get; private set; }
    public string ResultsDirectory { get; private set; }
    public string TargetPlatform { get; private set; }
    public string TargetFrameworkVersion { get; private set; }
    public string TestAdapterPaths { get; private set; }
    public bool CollectSourceInformation { get; private set; }
    public bool DisableAppDomain { get; private set; }
    public bool DisableParallelization { get; private set; }
    public bool DesignMode { get; private set; }
    public IDictionary`2<string, string> TestProperties { get; private set; }
    public string InternalTraceLevel { get; private set; }
    public string WorkDirectory { get; private set; }
    public string Where { get; private set; }
    public string TestOutputXml { get; private set; }
    public bool UseTestOutputXml { get; }
    public int DefaultTimeout { get; private set; }
    public int NumberOfTestWorkers { get; private set; }
    public bool ShadowCopyFiles { get; private set; }
    public int Verbosity { get; private set; }
    public bool UseVsKeepEngineRunning { get; private set; }
    public string BasePath { get; private set; }
    public string PrivateBinPath { get; private set; }
    public Nullable`1<int> RandomSeed { get; private set; }
    public bool RandomSeedSpecified { get; private set; }
    public bool CollectDataForEachTestSeparately { get; private set; }
    public bool InProcDataCollectorsAvailable { get; private set; }
    public bool SynchronousEvents { get; private set; }
    public string DomainUsage { get; private set; }
    public bool ShowInternalProperties { get; private set; }
    public bool UseParentFQNForParametrizedTests { get; private set; }
    public bool UseNUnitIdforTestCaseId { get; private set; }
    public int ConsoleOut { get; private set; }
    public bool StopOnError { get; private set; }
    public VsTestCategoryType VsTestCategoryType { get; private set; }
    public bool DumpXmlTestDiscovery { get; private set; }
    public bool DumpXmlTestResults { get; private set; }
    public string DefaultTestNamePattern { get; public set; }
    public bool PreFilter { get; private set; }
    public AdapterSettings(ILogger logger);
    [CompilerGeneratedAttribute]
public sealed virtual int get_MaxCpuCount();
    [CompilerGeneratedAttribute]
private void set_MaxCpuCount(int value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ResultsDirectory();
    [CompilerGeneratedAttribute]
private void set_ResultsDirectory(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_TargetPlatform();
    [CompilerGeneratedAttribute]
private void set_TargetPlatform(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_TargetFrameworkVersion();
    [CompilerGeneratedAttribute]
private void set_TargetFrameworkVersion(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_TestAdapterPaths();
    [CompilerGeneratedAttribute]
private void set_TestAdapterPaths(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_CollectSourceInformation();
    [CompilerGeneratedAttribute]
private void set_CollectSourceInformation(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_DisableAppDomain();
    [CompilerGeneratedAttribute]
private void set_DisableAppDomain(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_DisableParallelization();
    [CompilerGeneratedAttribute]
private void set_DisableParallelization(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_DesignMode();
    [CompilerGeneratedAttribute]
private void set_DesignMode(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, string> get_TestProperties();
    [CompilerGeneratedAttribute]
private void set_TestProperties(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_InternalTraceLevel();
    [CompilerGeneratedAttribute]
private void set_InternalTraceLevel(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_WorkDirectory();
    [CompilerGeneratedAttribute]
private void set_WorkDirectory(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Where();
    [CompilerGeneratedAttribute]
private void set_Where(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_TestOutputXml();
    [CompilerGeneratedAttribute]
private void set_TestOutputXml(string value);
    public sealed virtual bool get_UseTestOutputXml();
    [CompilerGeneratedAttribute]
public sealed virtual int get_DefaultTimeout();
    [CompilerGeneratedAttribute]
private void set_DefaultTimeout(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_NumberOfTestWorkers();
    [CompilerGeneratedAttribute]
private void set_NumberOfTestWorkers(int value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ShadowCopyFiles();
    [CompilerGeneratedAttribute]
private void set_ShadowCopyFiles(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Verbosity();
    [CompilerGeneratedAttribute]
private void set_Verbosity(int value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_UseVsKeepEngineRunning();
    [CompilerGeneratedAttribute]
private void set_UseVsKeepEngineRunning(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_BasePath();
    [CompilerGeneratedAttribute]
private void set_BasePath(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_PrivateBinPath();
    [CompilerGeneratedAttribute]
private void set_PrivateBinPath(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_RandomSeed();
    [CompilerGeneratedAttribute]
private void set_RandomSeed(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_RandomSeedSpecified();
    [CompilerGeneratedAttribute]
private void set_RandomSeedSpecified(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_CollectDataForEachTestSeparately();
    [CompilerGeneratedAttribute]
private void set_CollectDataForEachTestSeparately(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_InProcDataCollectorsAvailable();
    [CompilerGeneratedAttribute]
private void set_InProcDataCollectorsAvailable(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_SynchronousEvents();
    [CompilerGeneratedAttribute]
private void set_SynchronousEvents(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_DomainUsage();
    [CompilerGeneratedAttribute]
private void set_DomainUsage(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ShowInternalProperties();
    [CompilerGeneratedAttribute]
private void set_ShowInternalProperties(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_UseParentFQNForParametrizedTests();
    [CompilerGeneratedAttribute]
private void set_UseParentFQNForParametrizedTests(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_UseNUnitIdforTestCaseId();
    [CompilerGeneratedAttribute]
private void set_UseNUnitIdforTestCaseId(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_ConsoleOut();
    [CompilerGeneratedAttribute]
private void set_ConsoleOut(int value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_StopOnError();
    [CompilerGeneratedAttribute]
private void set_StopOnError(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual VsTestCategoryType get_VsTestCategoryType();
    [CompilerGeneratedAttribute]
private void set_VsTestCategoryType(VsTestCategoryType value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_DumpXmlTestDiscovery();
    [CompilerGeneratedAttribute]
private void set_DumpXmlTestDiscovery(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_DumpXmlTestResults();
    [CompilerGeneratedAttribute]
private void set_DumpXmlTestResults(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_DefaultTestNamePattern();
    [CompilerGeneratedAttribute]
public void set_DefaultTestNamePattern(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_PreFilter();
    [CompilerGeneratedAttribute]
private void set_PreFilter(bool value);
    public static IAdapterSettings Get(string settingsXml);
    public sealed virtual void Load(string settingsXml);
    public sealed virtual void SaveRandomSeed(string dirname);
    public sealed virtual void RestoreRandomSeed(string dirname);
    public sealed virtual void Apply(TestPackage package, RemoteTaskDepot depot);
    private void UpdateNumberOfTestWorkers();
    private string GetInnerTextWithLog(XmlNode startNode, string xpath, String[] validValues);
    private string GetInnerText(XmlNode startNode, string xpath, bool log, String[] validValues);
    private int GetInnerTextAsInt(XmlNode startNode, string xpath, int defaultValue);
    private Nullable`1<int> GetInnerTextAsNullableInt(XmlNode startNode, string xpath, bool log);
    private bool GetInnerTextAsBool(XmlNode startNode, string xpath, bool defaultValue);
    private void Log(string xpath, T res);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.TestRunner.Adapters.NUnit3.Extensions : object {
    [ExtensionAttribute]
internal static TestPackage Dump(TestPackage package, ILogger logger);
}
public interface JetBrains.ReSharper.TestRunner.Adapters.NUnit3.IAdapterSettings {
    public int MaxCpuCount { get; }
    public string ResultsDirectory { get; }
    public string TargetPlatform { get; }
    public string TargetFrameworkVersion { get; }
    public string TestAdapterPaths { get; }
    public bool CollectSourceInformation { get; }
    public IDictionary`2<string, string> TestProperties { get; }
    public string InternalTraceLevel { get; }
    public string WorkDirectory { get; }
    public string Where { get; }
    public int DefaultTimeout { get; }
    public int NumberOfTestWorkers { get; }
    public bool ShadowCopyFiles { get; }
    public int Verbosity { get; }
    public bool UseVsKeepEngineRunning { get; }
    public string BasePath { get; }
    public string PrivateBinPath { get; }
    public Nullable`1<int> RandomSeed { get; }
    public bool RandomSeedSpecified { get; }
    public bool InProcDataCollectorsAvailable { get; }
    public bool CollectDataForEachTestSeparately { get; }
    public bool SynchronousEvents { get; }
    public string DomainUsage { get; }
    public bool DumpXmlTestDiscovery { get; }
    public bool DumpXmlTestResults { get; }
    public bool PreFilter { get; }
    public string DefaultTestNamePattern { get; }
    public VsTestCategoryType VsTestCategoryType { get; }
    public string TestOutputXml { get; }
    public bool UseTestOutputXml { get; }
    public bool DesignMode { get; }
    public bool DisableAppDomain { get; }
    public bool DisableParallelization { get; }
    public bool ShowInternalProperties { get; }
    public bool UseParentFQNForParametrizedTests { get; }
    public bool UseNUnitIdforTestCaseId { get; }
    public int ConsoleOut { get; }
    public bool StopOnError { get; }
    public abstract virtual int get_MaxCpuCount();
    public abstract virtual string get_ResultsDirectory();
    public abstract virtual string get_TargetPlatform();
    public abstract virtual string get_TargetFrameworkVersion();
    public abstract virtual string get_TestAdapterPaths();
    public abstract virtual bool get_CollectSourceInformation();
    public abstract virtual IDictionary`2<string, string> get_TestProperties();
    public abstract virtual string get_InternalTraceLevel();
    public abstract virtual string get_WorkDirectory();
    public abstract virtual string get_Where();
    public abstract virtual int get_DefaultTimeout();
    public abstract virtual int get_NumberOfTestWorkers();
    public abstract virtual bool get_ShadowCopyFiles();
    public abstract virtual int get_Verbosity();
    public abstract virtual bool get_UseVsKeepEngineRunning();
    public abstract virtual string get_BasePath();
    public abstract virtual string get_PrivateBinPath();
    public abstract virtual Nullable`1<int> get_RandomSeed();
    public abstract virtual bool get_RandomSeedSpecified();
    public abstract virtual bool get_InProcDataCollectorsAvailable();
    public abstract virtual bool get_CollectDataForEachTestSeparately();
    public abstract virtual bool get_SynchronousEvents();
    public abstract virtual string get_DomainUsage();
    public abstract virtual bool get_DumpXmlTestDiscovery();
    public abstract virtual bool get_DumpXmlTestResults();
    public abstract virtual bool get_PreFilter();
    public abstract virtual string get_DefaultTestNamePattern();
    public abstract virtual VsTestCategoryType get_VsTestCategoryType();
    public abstract virtual string get_TestOutputXml();
    public abstract virtual bool get_UseTestOutputXml();
    public abstract virtual bool get_DesignMode();
    public abstract virtual bool get_DisableAppDomain();
    public abstract virtual bool get_DisableParallelization();
    public abstract virtual bool get_ShowInternalProperties();
    public abstract virtual bool get_UseParentFQNForParametrizedTests();
    public abstract virtual bool get_UseNUnitIdforTestCaseId();
    public abstract virtual int get_ConsoleOut();
    public abstract virtual bool get_StopOnError();
    public abstract virtual void Load(string settingsXml);
    public abstract virtual void SaveRandomSeed(string dirname);
    public abstract virtual void RestoreRandomSeed(string dirname);
    public abstract virtual void Apply(TestPackage package, RemoteTaskDepot depot);
}
internal class JetBrains.ReSharper.TestRunner.Adapters.NUnit3.NUnitCallContextCleaner : object {
    public sealed virtual void Dispose();
}
public class JetBrains.ReSharper.TestRunner.Adapters.NUnit3.NUnitCustomInstallationLoader : object {
    private CustomLoader myLoader;
    private Func`2<TestAdapterInfo, IDefaultTestAdapterLoadContextFactory> myFactoryFactory;
    private ILogger myLogger;
    public NUnitCustomInstallationLoader(CustomLoader loader, Func`2<TestAdapterInfo, IDefaultTestAdapterLoadContextFactory> factoryFactory, ILogger logger);
    public sealed virtual ITestAdapterLoadContext Initialize(TestRequest request);
}
internal class JetBrains.ReSharper.TestRunner.Adapters.NUnit3.NUnitDiscoveryFilterBuilder : TestFilterBuilder {
    private RemoteTaskDepot myDepot;
    private ILogger myLogger;
    public NUnitDiscoveryFilterBuilder(RemoteTaskDepot depot);
    public TestFilter Build();
}
internal class JetBrains.ReSharper.TestRunner.Adapters.NUnit3.NUnitExecutionFilterBuilder : object {
    private RemoteTaskDepot myTaskDepot;
    private ITestExecutionSink mySink;
    private ILogger myLogger;
    public NUnitExecutionFilterBuilder(RemoteTaskDepot taskDepot, ITestExecutionSink sink);
    public TestFilter Build(NUnitTest root);
    private void AddToFilter(Builder builder, NUnitTest node);
    private bool ReportExplicit(NUnitTest node, HashSet`1<NUnitTest> nodesToRun, bool isBeingRun);
    private IEnumerable`1<NUnitTest> GetNodesToRun(NUnitTest node, HashSet`1<NUnitTest> explicitNodes, HashSet`1<NUnitTest> explicitNodesToRun);
    private bool ShouldRun(NUnitTest node, HashSet`1<NUnitTest> explicitNodes, HashSet`1<NUnitTest> explicitNodesToRun);
}
public class JetBrains.ReSharper.TestRunner.Adapters.NUnit3.NUnitNUnitId : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullName>k__BackingField;
    public string Id { get; }
    public string FullName { get; }
    public NUnitNUnitId(NUnitTest node);
    public NUnitNUnitId(string id, string fullName);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public string get_FullName();
    public virtual string ToString();
}
public class JetBrains.ReSharper.TestRunner.Adapters.NUnit3.NUnitRunner : LongLivedMarshalByRefObject {
    private CancellationTokenSource myDiscoveryCts;
    private CancellationTokenSource myExecutionCts;
    private ILogger myLogger;
    public sealed virtual void DiscoverTests(TestDiscoveryRequest request, ITestDiscoverySink discoverySink);
    public sealed virtual void RunTests(TestRunRequest request, ITestDiscoverySink discoverySink, ITestExecutionSink executionSink);
    public sealed virtual void AbortDiscovery();
    public sealed virtual void AbortRun();
    private TestEngine CreateEngine();
    private void WithContainerAsNUnitAssembly(TestContainer container, Action`1<NUnitTestAssemblyTask> action);
    private TestPackage CreateTestPackage(NUnitTestAssemblyTask assemblyTask, IAdapterSettings settings, TestRunRequest runRequest, RemoteTaskDepot depot);
    private NUnitTest DiscoverTestsFrom(ITestRunner runner, TestPackage package, RemoteTaskDepot depot);
}
[DebuggerDisplayAttribute("{FullName}")]
public class JetBrains.ReSharper.TestRunner.Adapters.NUnit3.NUnitTest : object {
    private IDictionary`2<string, object> myData;
    [CompilerGeneratedAttribute]
private XmlNode <Element>k__BackingField;
    [CompilerGeneratedAttribute]
private NUnitTest <Parent>k__BackingField;
    public string Name { get; public set; }
    public string FullName { get; public set; }
    public string Id { get; }
    public string Type { get; }
    public string MethodName { get; }
    public string ClassName { get; }
    public string RunState { get; }
    public bool IsArtificial { get; }
    public String[] Categories { get; }
    public string ShortNameOrDefault { get; }
    public bool IsIgnored { get; }
    public bool IsExplicit { get; }
    public string SkipReason { get; }
    public IEnumerable`1<NUnitTest> Children { get; }
    public XmlNode Element { get; }
    public NUnitTest Parent { get; }
    public NUnitTest(XmlNode node);
    private NUnitTest(NUnitTest parent, XmlNode node);
    public string get_Name();
    public void set_Name(string value);
    public string get_FullName();
    public void set_FullName(string value);
    public string get_Id();
    public string get_Type();
    public string get_MethodName();
    public string get_ClassName();
    public string get_RunState();
    public bool get_IsArtificial();
    public String[] get_Categories();
    public string get_ShortNameOrDefault();
    public bool get_IsIgnored();
    public bool get_IsExplicit();
    public string get_SkipReason();
    public IEnumerable`1<NUnitTest> get_Children();
    [CompilerGeneratedAttribute]
public XmlNode get_Element();
    [CompilerGeneratedAttribute]
public NUnitTest get_Parent();
    private T GetOrInitialize(string propertyName, Func`1<T> factory);
    private string GetProperty(string id);
    private void SetProperty(string id, string value);
    private bool GetSwitch(string id);
    private IEnumerable`1<NUnitTest> GetChildren();
    private string GetShortName();
    private String[] GetCategories();
    private string GetSkipReason();
    public bool IsParameterizedFixture();
    public bool IsTestFixture();
    public bool IsParameterizedMethod();
    public bool IsTestMethod();
    public RunState GetRunState();
    [CompilerGeneratedAttribute]
private NUnitTest[] <GetChildren>b__43_0();
    [CompilerGeneratedAttribute]
private NUnitTest <GetChildren>b__43_1(XmlElement x);
    [CompilerGeneratedAttribute]
private String[] <GetCategories>b__45_0();
    [CompilerGeneratedAttribute]
private string <GetSkipReason>b__46_0();
}
public class JetBrains.ReSharper.TestRunner.Adapters.NUnit3.NUnitTestListener : object {
    private RemoteTaskDepot myDepot;
    private ITestExecutionSink mySink;
    private Regex myEscapeRegex;
    private ILogger myLogger;
    private IDictionary`2<string, RemoteTask> myRunningTests;
    public NUnitTestListener(RemoteTaskDepot depot, ITestExecutionSink executionSink);
    public sealed virtual void OnTestEvent(string report);
    private bool TryGetTask(XmlNode node, NUnitTestElementTask& task);
    private XmlNode LoadXml(string report);
    private void ReportIfAssemblyNotRunnable(XmlNode node);
    private void FinishTest(NUnitTestElementTask task, XmlNode node);
    private string LabelMessage(XmlNode node);
    private string FailureMessage(XmlNode node);
    private string SkipReasonMessage(XmlNode node);
    private void AddOutput(XmlNode node, RemoteTask task);
    private void AddReasonMessage(XmlNode node, RemoteTask task);
    private static ExceptionInfo[] GetTestExceptions(XmlNode node);
    private static IList`1<NUnitAssertion> CollectAssertions(XmlNode node);
    private static string IncorporateAssertionsIntoMessage(string message, string stacktrace, IList`1<NUnitAssertion> assertions);
    private TestOutcome GetTestResult(XmlNode node);
    [CompilerGeneratedAttribute]
private RemoteTask <.ctor>b__5_0(RemoteTask t);
}
public class JetBrains.ReSharper.TestRunner.Adapters.NUnit3.NUnitTestReporter : object {
    private RemoteTaskDepot myTaskDepot;
    private ITestDiscoverySink myDiscoverySink;
    private HashSet`1<NUnitTestElementTask> myTakenIds;
    private ILogger myLogger;
    public NUnitTestReporter(RemoteTaskDepot taskDepot, ITestDiscoverySink discoverySink);
    public void ReportAll(NUnitTest root);
    private NUnitTestElementTask GetRemoteTask(NUnitTest node);
    private void ReportNonRunnableAssembly(NUnitTest node);
}
public static class JetBrains.ReSharper.TestRunner.Adapters.NUnit3.PackageSettings : object {
    public static string DebugTests;
    public static string PauseBeforeRun;
    public static string InternalTraceLevel;
    public static string WorkDirectory;
    public static string ActiveConfig;
    public static string AutoBinPath;
    public static string BasePath;
    public static string ConfigurationFile;
    public static string DebugAgent;
    public static string DomainUsage;
    public static string PrivateBinPath;
    public static string MaxAgents;
    public static string ProcessModel;
    public static string RuntimeFramework;
    public static string RunAsX86;
    public static string DisposeRunners;
    public static string ShadowCopyFiles;
    public static string DefaultTimeout;
    public static string InternalTraceWriter;
    public static string LOAD;
    public static string NumberOfTestWorkers;
    public static string RandomSeed;
    public static string StopOnError;
    public static string SynchronousEvents;
    public static string DefaultTestNamePattern;
    public static string TestParameters;
    public static string TestParametersDictionary;
    public static string ImageRuntimeVersion;
    public static string ImageRequiresX86;
    public static string ImageRequiresDefaultAppDomainAssemblyResolver;
    public static string ImageTargetFrameworkName;
}
internal class JetBrains.ReSharper.TestRunner.Adapters.NUnit3.PreFilterBuilder : object {
    private RemoteTaskDepot myDepot;
    private int myMaxNumberOfEntriesInFilter;
    public PreFilterBuilder(RemoteTaskDepot depot, int maxNumberOfEntriesInFilter);
    public List`1<string> Build();
    private Trie`2<string, int> BuildTrie();
    private List`1<string> GetFullList();
    private List`1<string> ContractTrie(Trie`2<string, int> trie, int maxEntriesCount);
}
internal static class JetBrains.ReSharper.TestRunner.Adapters.NUnit3.RemoteTaskBuilder : object {
    private static Dictionary`2<NUnitTest, NUnitTestElementTask> ourTasks;
    private static RemoteTaskBuilder();
    public static Guid Parent(NUnitTest node);
    public static NUnitTestElementTask GetRemoteTask(NUnitTest node);
    public static NUnitTestElementTask GetRemoteTaskCore(NUnitTest node);
}
[DefaultMemberAttribute("Item")]
public class JetBrains.ReSharper.TestRunner.Adapters.NUnit3.RemoteTaskDepot : object {
    private IDictionary`2<NUnitTestElementTask, NUnitTestElementTask> myTasksByReSharperId;
    private IDictionary`2<string, NUnitTestElementTask> myTasksByNUnitId;
    private IDictionary`2<Guid, NUnitTestElementTask> myTasksByTaskId;
    public NUnitTestElementTask Item { get; }
    public NUnitTestElementTask Item { get; }
    public RemoteTaskDepot(RemoteTask[] tasks);
    public NUnitTestElementTask get_Item(NUnitTest test);
    public NUnitTestElementTask get_Item(NUnitNUnitId id);
    public NUnitTestElementTask TryGetParent(NUnitTestElementTask task);
    public void Add(NUnitTest node, NUnitTestElementTask task);
    public sealed virtual IEnumerator`1<NUnitTestElementTask> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public enum JetBrains.ReSharper.TestRunner.Adapters.NUnit3.VsTestCategoryType : Enum {
    public int value__;
    public static VsTestCategoryType NUnit;
    public static VsTestCategoryType MsTest;
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.TestRunner.Adapters.NUnit3.XmlExtensions : object {
    public static XmlDocument Load(string xml);
    public static XmlDocument Load(XmlReader reader);
    [ExtensionAttribute]
public static object XPathEvaluate(XmlNode node, string xpath);
    [ExtensionAttribute]
public static IEnumerable`1<XmlNode> XPathSelectElements(XmlNode node, string xpath);
    [ExtensionAttribute]
public static IEnumerable`1<XmlNode> Descendants(XmlNode node, string selector);
    [ExtensionAttribute]
public static IEnumerable`1<XmlElement> Elements(XmlNode node, string selector);
    [ExtensionAttribute]
public static string Attribute(XmlNode node, string attrName);
}
