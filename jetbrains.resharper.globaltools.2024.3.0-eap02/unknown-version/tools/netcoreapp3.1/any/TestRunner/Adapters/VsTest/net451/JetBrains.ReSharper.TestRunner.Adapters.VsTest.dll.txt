internal class JetBrains.ReSharper.TestRunner.Adapters.VsTest.Context.AdapterDiscoveryContext : object {
    [CompilerGeneratedAttribute]
private IRunSettings <RunSettings>k__BackingField;
    public IRunSettings RunSettings { get; }
    public AdapterDiscoveryContext(string runSettings);
    [CompilerGeneratedAttribute]
public sealed virtual IRunSettings get_RunSettings();
}
internal class JetBrains.ReSharper.TestRunner.Adapters.VsTest.Context.AdapterRunContext : AdapterDiscoveryContext {
    [CompilerGeneratedAttribute]
private string <TestRunDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SolutionDirectory>k__BackingField;
    public string TestRunDirectory { get; }
    public string SolutionDirectory { get; }
    public bool KeepAlive { get; }
    public bool InIsolation { get; }
    public bool IsDataCollectionEnabled { get; }
    public bool IsBeingDebugged { get; }
    public AdapterRunContext(string runSettings);
    public sealed virtual ITestCaseFilterExpression GetTestCaseFilter(IEnumerable`1<string> supportedProperties, Func`2<string, TestProperty> propertyProvider);
    [CompilerGeneratedAttribute]
public sealed virtual string get_TestRunDirectory();
    [CompilerGeneratedAttribute]
public sealed virtual string get_SolutionDirectory();
    public sealed virtual bool get_KeepAlive();
    public sealed virtual bool get_InIsolation();
    public sealed virtual bool get_IsDataCollectionEnabled();
    public sealed virtual bool get_IsBeingDebugged();
}
internal class JetBrains.ReSharper.TestRunner.Adapters.VsTest.Discoverer : object {
    private ITestDiscoverySink mySink;
    private RemoteTaskDepot myDepot;
    private ILogger myLogger;
    public Discoverer(ITestDiscoverySink sink, RemoteTaskDepot depot);
    public void ReportAll(TestRequest request);
}
internal class JetBrains.ReSharper.TestRunner.Adapters.VsTest.Executor : object {
    private IMessageBroker myMessageBroker;
    private RunContext myRunContext;
    private ILogger myLogger;
    private CancellationToken myCt;
    internal Executor(IMessageBroker messageBroker, ITestExecutionSink executionSink, RemoteTaskDepot depot, CancellationToken ct);
    public void RunAll(TestRunRequest request);
}
internal class JetBrains.ReSharper.TestRunner.Adapters.VsTest.ExtensionsManager : object {
    private ILogger myLogger;
    public IEnumerable`1<LazyExtension`2<ITestExecutor, ITestAdapterCapabilities>> InitializeExecutors(TestRequest request);
    public IEnumerable`1<LazyExtension`2<ITestDiscoverer, ITestAdapterCapabilities>> InitializeDiscoverers(TestRequest request);
    private IEnumerable`1<LazyExtension`2<TFeature, ITestAdapterCapabilities>> Initialize(TestRequest request);
    public IEnumerable`1<LazyExtension`2<IExtension, ITestAdapterCapabilities>> GetExtensions(TestRequest request);
    [CompilerGeneratedAttribute]
private bool <GetExtensions>g__DirectoryExists|5_1(string path);
}
internal interface JetBrains.ReSharper.TestRunner.Adapters.VsTest.Metadata.ITestAdapterCapabilities {
    public Uri ExecutorUri { get; }
    public abstract virtual Uri get_ExecutorUri();
}
internal class JetBrains.ReSharper.TestRunner.Adapters.VsTest.Metadata.TestDiscovererMetadata : object {
    [CompilerGeneratedAttribute]
private Uri <ExecutorUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtensionUri>k__BackingField;
    public Uri ExecutorUri { get; }
    public string ExtensionUri { get; }
    public TestDiscovererMetadata(string executorUri);
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_ExecutorUri();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ExtensionUri();
}
internal class JetBrains.ReSharper.TestRunner.Adapters.VsTest.Metadata.TestDiscovererPluginInformation : TestPluginInformation {
    [CompilerGeneratedAttribute]
private string <DefaultExecutorUri>k__BackingField;
    public string DefaultExecutorUri { get; }
    public ICollection`1<object> Metadata { get; }
    public TestDiscovererPluginInformation(Type testDiscovererType);
    [CompilerGeneratedAttribute]
public string get_DefaultExecutorUri();
    public virtual ICollection`1<object> get_Metadata();
    private static string GetDefaultExecutorUri(Type testDiscovererType);
}
internal class JetBrains.ReSharper.TestRunner.Adapters.VsTest.Metadata.TestExecutorMetadata : object {
    [CompilerGeneratedAttribute]
private Uri <ExecutorUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtensionUri>k__BackingField;
    public Uri ExecutorUri { get; }
    public string ExtensionUri { get; }
    public TestExecutorMetadata(string extensionUri);
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_ExecutorUri();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ExtensionUri();
}
internal class JetBrains.ReSharper.TestRunner.Adapters.VsTest.Metadata.TestExecutorPluginInformation : TestPluginInformation {
    [CompilerGeneratedAttribute]
private string <ExtensionUri>k__BackingField;
    public string ExtensionUri { get; }
    public string IdentifierData { get; }
    public ICollection`1<object> Metadata { get; }
    public TestExecutorPluginInformation(Type type);
    [CompilerGeneratedAttribute]
public string get_ExtensionUri();
    public virtual string get_IdentifierData();
    public virtual ICollection`1<object> get_Metadata();
    private static string GetExtensionUri(Type testLoggerType);
}
internal class JetBrains.ReSharper.TestRunner.Adapters.VsTest.RemoteTaskBuilder : object {
    private RemoteTaskDepot myDepot;
    private ILogger myLogger;
    public RemoteTaskBuilder(RemoteTaskDepot depot, ILogger logger);
    public IEnumerable`1<RemoteTask> GetRemoteTasks(IList`1<TestCase> testCases);
}
[DefaultMemberAttribute("Item")]
internal class JetBrains.ReSharper.TestRunner.Adapters.VsTest.RemoteTaskDepot : object {
    private IDictionary`2<Key, VsTestTestElementTask> myTasksByReSharperId;
    private Dictionary`2<TestCase, Key> myReSharperIdByTestCase;
    public VsTestTestElementTask Item { get; }
    public VsTestTestElementTask Item { get; }
    public VsTestTestElementTask Item { get; }
    public RemoteTaskDepot(RemoteTask[] tasks);
    public VsTestTestElementTask get_Item(Key key);
    public VsTestTestElementTask get_Item(TestCase testCase);
    public VsTestTestElementTask get_Item(TestResult testResult);
    public void Bind(TestCase testCase, VsTestTestCaseTask task);
    public void Add(VsTestTestRowTask task);
    public IEnumerable`1<TestCase> GetTestCasesToRun();
}
internal class JetBrains.ReSharper.TestRunner.Adapters.VsTest.RunContext : object {
    private RemoteTaskDepot myDepot;
    private ITestExecutionSink myExecutionSink;
    private ConcurrentDictionary`2<object, TaskWrapper> myTasks;
    private ConcurrentDictionary`2<Key, TaskWrapper> myTasksById;
    private ISet`1<VsTestTestElementTask> myHandledTests;
    public RunContext(RemoteTaskDepot depot, ITestExecutionSink executionSink);
    public IEnumerable`1<TestCase> GetTestCasesToRun();
    public TaskWrapper GetTask(TestCase testCase);
    public TaskWrapper GetTask(TestResult testResult);
    private VsTestTestElementTask CreateTask(TestResult testResult);
}
internal class JetBrains.ReSharper.TestRunner.Adapters.VsTest.TaskWrapper : object {
    private VsTestTestElementTask myTask;
    private ITestExecutionSink mySink;
    private int myStarted;
    public TaskWrapper(VsTestTestElementTask task, ITestExecutionSink executionSink);
    public void Starting();
    public void Finished(TestResult result);
}
internal class JetBrains.ReSharper.TestRunner.Adapters.VsTest.TestPluginManager : object {
    private static TestPluginManager ourInstance;
    public static TestPluginManager Instance { get; }
    public static TestPluginManager get_Instance();
    public static Type GetTestExtensionType(string extensionTypeName);
    public static T CreateTestExtension(Type extensionType);
    public void GetSpecificTestExtensions(string endsWithPattern, IEnumerable`1& unfiltered, IEnumerable`1& filtered);
    private void GetExtensions(Dictionary`2<string, TPluginInfo> testPluginInfo, IEnumerable`1& unfiltered, IEnumerable`1& filtered);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.TestRunner.Adapters.VsTest.VsTestExtensions : object {
    [ExtensionAttribute]
public static LoggingLevel ToLoggingLevel(TestMessageLevel testMessageLevel);
    [ExtensionAttribute]
public static TestOutputType GetTaskOutputType(TestResultMessage message);
    [ExtensionAttribute]
public static TraitsCollection ToTraitsCollection(TestCase testCase);
    [CompilerGeneratedAttribute]
internal static IEnumerable`1<Trait> <ToTraitsCollection>g__ToTrait|2_0(object value);
}
public class JetBrains.ReSharper.TestRunner.Adapters.VsTest.VsTestRunner : LongLivedMarshalByRefObject {
    private IMessageBroker myMessageBroker;
    private CancellationTokenSource myDiscoveryCts;
    private CancellationTokenSource myExecutionCts;
    private ILogger myLogger;
    public VsTestRunner(IMessageBroker messageBroker);
    public sealed virtual void DiscoverTests(TestDiscoveryRequest request, ITestDiscoverySink discoverySink);
    public sealed virtual void AbortDiscovery();
    public sealed virtual void RunTests(TestRunRequest request, ITestDiscoverySink discoverySink, ITestExecutionSink executionSink);
    public sealed virtual void AbortRun();
}
