public class Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.CommunicationEndpointFactory : object {
    public sealed virtual ICommunicationEndPoint Create(ConnectionRole role);
}
internal class Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.DataCollection.DataCollectionRequestHandler : object {
    private static object SyncObject;
    private ICommunicationManager communicationManager;
    private IMessageSink messageSink;
    private IDataCollectionManager dataCollectionManager;
    private IDataCollectionTestCaseEventHandler dataCollectionTestCaseEventHandler;
    private Task testCaseEventMonitorTask;
    private IDataSerializer dataSerializer;
    private IFileHelper fileHelper;
    private CancellationTokenSource cancellationTokenSource;
    [CompilerGeneratedAttribute]
private static DataCollectionRequestHandler <Instance>k__BackingField;
    public static DataCollectionRequestHandler Instance { get; private set; }
    protected DataCollectionRequestHandler(IMessageSink messageSink);
    protected DataCollectionRequestHandler(ICommunicationManager communicationManager, IMessageSink messageSink, IDataCollectionManager dataCollectionManager, IDataCollectionTestCaseEventHandler dataCollectionTestCaseEventHandler, IDataSerializer dataSerializer, IFileHelper fileHelper);
    private static DataCollectionRequestHandler();
    [CompilerGeneratedAttribute]
public static DataCollectionRequestHandler get_Instance();
    [CompilerGeneratedAttribute]
private static void set_Instance(DataCollectionRequestHandler value);
    public static DataCollectionRequestHandler Create(ICommunicationManager communicationManager, IMessageSink messageSink);
    public sealed virtual void InitializeCommunication(int port);
    public sealed virtual bool WaitForRequestSenderConnection(int connectionTimeout);
    public sealed virtual void ProcessRequests();
    public void SendDataCollectionMessage(DataCollectionMessageEventArgs args);
    public sealed virtual void Dispose();
    public sealed virtual void Close();
    private void AddExtensionAssemblies(BeforeTestRunStartPayload payload);
    private void HandleBeforeTestRunStart(Message message);
    private void HandleAfterTestRunEnd(Message message);
    [CompilerGeneratedAttribute]
private void <HandleBeforeTestRunStart>b__23_0();
}
public class Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.DataCollection.DataCollectionRequestSender : object {
    private ICommunicationManager communicationManager;
    private IDataSerializer dataSerializer;
    internal DataCollectionRequestSender(ICommunicationManager communicationManager, IDataSerializer dataSerializer);
    public sealed virtual int InitializeCommunication();
    public sealed virtual bool WaitForRequestHandlerConnection(int clientConnectionTimeout);
    public void Dispose();
    public sealed virtual void Close();
    public sealed virtual void SendTestHostLaunched(TestHostLaunchedPayload testHostLaunchedPayload);
    public sealed virtual BeforeTestRunStartResult SendBeforeTestRunStartAndGetResult(string settingsXml, IEnumerable`1<string> sources, ITestMessageEventHandler runEventsHandler);
    public sealed virtual Collection`1<AttachmentSet> SendAfterTestRunEndAndGetResult(ITestMessageEventHandler runEventsHandler, bool isCancelled);
    private void LogDataCollectorMessage(DataCollectionMessageEventArgs dataCollectionMessageEventArgs, ITestMessageEventHandler requestHandler);
}
internal class Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.DataCollection.DataCollectionTestCaseEventHandler : object {
    private ICommunicationManager communicationManager;
    private IDataCollectionManager dataCollectionManager;
    private IDataSerializer dataSerializer;
    internal DataCollectionTestCaseEventHandler(ICommunicationManager communicationManager, IDataCollectionManager dataCollectionManager, IDataSerializer dataSerializer);
    public sealed virtual int InitializeCommunication();
    public sealed virtual bool WaitForRequestHandlerConnection(int connectionTimeout);
    public sealed virtual void Close();
    public sealed virtual void ProcessRequests();
}
internal interface Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.DataCollection.Interfaces.IDataCollectionRequestHandler {
    public abstract virtual void InitializeCommunication(int port);
    public abstract virtual bool WaitForRequestSenderConnection(int connectionTimeout);
    public abstract virtual void ProcessRequests();
    public abstract virtual void Close();
}
internal interface Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.DataCollection.Interfaces.IDataCollectionRequestSender {
    public abstract virtual int InitializeCommunication();
    public abstract virtual bool WaitForRequestHandlerConnection(int connectionTimeout);
    public abstract virtual void Close();
    public abstract virtual void SendTestHostLaunched(TestHostLaunchedPayload testHostLaunchedPayload);
    public abstract virtual BeforeTestRunStartResult SendBeforeTestRunStartAndGetResult(string settingXml, IEnumerable`1<string> sources, ITestMessageEventHandler runEventsHandler);
    public abstract virtual Collection`1<AttachmentSet> SendAfterTestRunEndAndGetResult(ITestMessageEventHandler runEventsHandler, bool isCancelled);
}
public class Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.DataCollectionTestCaseEventSender : object {
    private static object SyncObject;
    private ICommunicationManager communicationManager;
    private IDataSerializer dataSerializer;
    [CompilerGeneratedAttribute]
private static DataCollectionTestCaseEventSender <Instance>k__BackingField;
    public static DataCollectionTestCaseEventSender Instance { get; private set; }
    protected DataCollectionTestCaseEventSender(ICommunicationManager communicationManager, IDataSerializer dataSerializer);
    private static DataCollectionTestCaseEventSender();
    [CompilerGeneratedAttribute]
public static DataCollectionTestCaseEventSender get_Instance();
    [CompilerGeneratedAttribute]
private static void set_Instance(DataCollectionTestCaseEventSender value);
    public static DataCollectionTestCaseEventSender Create();
    public sealed virtual void InitializeCommunication(int port);
    public sealed virtual bool WaitForRequestSenderConnection(int connectionTimeout);
    public sealed virtual void Close();
    public sealed virtual void SendTestCaseStart(TestCaseStartEventArgs e);
    public sealed virtual Collection`1<AttachmentSet> SendTestCaseEnd(TestCaseEndEventArgs e);
    public sealed virtual void SendTestSessionEnd(SessionEndEventArgs e);
}
public class Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.EventHandlers.TestInitializeEventsHandler : object {
    private ITestRequestHandler requestHandler;
    public TestInitializeEventsHandler(ITestRequestHandler requestHandler);
    public sealed virtual void HandleLogMessage(TestMessageLevel level, string message);
    public sealed virtual void HandleRawMessage(string rawMessage);
}
public class Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.EventHandlers.TestRunEventsHandler : object {
    private ITestRequestHandler requestHandler;
    public TestRunEventsHandler(ITestRequestHandler requestHandler);
    public sealed virtual void HandleTestRunStatsChange(TestRunChangedEventArgs testRunChangedArgs);
    public sealed virtual void HandleTestRunComplete(TestRunCompleteEventArgs testRunCompleteArgs, TestRunChangedEventArgs lastChunkArgs, ICollection`1<AttachmentSet> runContextAttachments, ICollection`1<string> executorUris);
    public sealed virtual void HandleLogMessage(TestMessageLevel level, string message);
    public sealed virtual void HandleRawMessage(string rawMessage);
    public sealed virtual int LaunchProcessWithDebuggerAttached(TestProcessStartInfo testProcessStartInfo);
    public sealed virtual bool AttachDebuggerToProcess(int pid);
}
public class Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.Interfaces.CommunicationException : Exception {
    public CommunicationException(string message);
    public CommunicationException(string message, Exception inner);
}
public class Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.Interfaces.ConnectedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private ICommunicationChannel <Channel>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Connected>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Fault>k__BackingField;
    public ICommunicationChannel Channel { get; private set; }
    public bool Connected { get; private set; }
    public Exception Fault { get; private set; }
    public ConnectedEventArgs(ICommunicationChannel channel);
    public ConnectedEventArgs(Exception faultException);
    [CompilerGeneratedAttribute]
public ICommunicationChannel get_Channel();
    [CompilerGeneratedAttribute]
private void set_Channel(ICommunicationChannel value);
    [CompilerGeneratedAttribute]
public bool get_Connected();
    [CompilerGeneratedAttribute]
private void set_Connected(bool value);
    [CompilerGeneratedAttribute]
public Exception get_Fault();
    [CompilerGeneratedAttribute]
private void set_Fault(Exception value);
}
public class Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.Interfaces.DisconnectedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Exception <Error>k__BackingField;
    public Exception Error { get; public set; }
    [CompilerGeneratedAttribute]
public Exception get_Error();
    [CompilerGeneratedAttribute]
public void set_Error(Exception value);
}
public interface Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.Interfaces.ICommunicationChannel {
    [CompilerGeneratedAttribute]
public abstract virtual void add_MessageReceived(EventHandler`1<MessageReceivedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_MessageReceived(EventHandler`1<MessageReceivedEventArgs> value);
    public abstract virtual Task Send(string data);
    public abstract virtual Task NotifyDataAvailable();
}
public interface Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.Interfaces.ICommunicationEndPoint {
    [CompilerGeneratedAttribute]
public abstract virtual void add_Connected(EventHandler`1<ConnectedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Connected(EventHandler`1<ConnectedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Disconnected(EventHandler`1<DisconnectedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Disconnected(EventHandler`1<DisconnectedEventArgs> value);
    public abstract virtual string Start(string endPoint);
    public abstract virtual void Stop();
}
public interface Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.Interfaces.ICommunicationEndpointFactory {
    public abstract virtual ICommunicationEndPoint Create(ConnectionRole role);
}
public interface Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.Interfaces.ICommunicationManager {
    public abstract virtual IPEndPoint HostServer(IPEndPoint endpoint);
    public abstract virtual Task AcceptClientAsync();
    public abstract virtual bool WaitForClientConnection(int connectionTimeout);
    public abstract virtual bool WaitForServerConnection(int connectionTimeout);
    public abstract virtual void StopServer();
    public abstract virtual Task SetupClientAsync(IPEndPoint endpoint);
    public abstract virtual void StopClient();
    public abstract virtual void SendMessage(string messageType);
    public abstract virtual Message ReceiveMessage();
    public abstract virtual string ReceiveRawMessage();
    public abstract virtual Task`1<Message> ReceiveMessageAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<string> ReceiveRawMessageAsync(CancellationToken cancellationToken);
    public abstract virtual void SendMessage(string messageType, object payload);
    public abstract virtual void SendMessage(string messageType, object payload, int version);
    public abstract virtual void SendRawMessage(string rawMessage);
    public abstract virtual T DeserializePayload(Message message);
}
internal interface Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.Interfaces.IDataCollectionTestCaseEventHandler {
    public abstract virtual int InitializeCommunication();
    public abstract virtual bool WaitForRequestHandlerConnection(int connectionTimeout);
    public abstract virtual void Close();
    public abstract virtual void ProcessRequests();
}
public interface Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.Interfaces.IDataCollectionTestCaseEventSender {
    public abstract virtual void InitializeCommunication(int port);
    public abstract virtual bool WaitForRequestSenderConnection(int connectionTimeout);
    public abstract virtual void Close();
    public abstract virtual void SendTestCaseStart(TestCaseStartEventArgs e);
    public abstract virtual Collection`1<AttachmentSet> SendTestCaseEnd(TestCaseEndEventArgs e);
    public abstract virtual void SendTestSessionEnd(SessionEndEventArgs e);
}
public interface Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.Interfaces.IDataSerializer {
    public abstract virtual Message DeserializeMessage(string rawMessage);
    public abstract virtual T DeserializePayload(Message message);
    public abstract virtual string SerializeMessage(string messageType);
    public abstract virtual string SerializePayload(string messageType, object payload);
    public abstract virtual string SerializePayload(string messageType, object payload, int version);
    public abstract virtual T Clone(T obj);
}
public interface Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.Interfaces.ITestRequestHandler {
    public TestHostConnectionInfo ConnectionInfo { get; public set; }
    public abstract virtual TestHostConnectionInfo get_ConnectionInfo();
    public abstract virtual void set_ConnectionInfo(TestHostConnectionInfo value);
    public abstract virtual void InitializeCommunication();
    public abstract virtual bool WaitForRequestSenderConnection(int connectionTimeout);
    public abstract virtual void ProcessRequests(ITestHostManagerFactory testHostManagerFactory);
    public abstract virtual void Close();
    public abstract virtual void SendTestCases(IEnumerable`1<TestCase> discoveredTestCases);
    public abstract virtual void SendTestRunStatistics(TestRunChangedEventArgs testRunChangedArgs);
    public abstract virtual void SendLog(TestMessageLevel messageLevel, string message);
    public abstract virtual void SendExecutionComplete(TestRunCompleteEventArgs testRunCompleteArgs, TestRunChangedEventArgs lastChunkArgs, ICollection`1<AttachmentSet> runContextAttachments, ICollection`1<string> executorUris);
    public abstract virtual void DiscoveryComplete(DiscoveryCompleteEventArgs discoveryCompleteEventArgs, IEnumerable`1<TestCase> lastChunk);
    public abstract virtual int LaunchProcessWithDebuggerAttached(TestProcessStartInfo testProcessStartInfo);
    public abstract virtual bool AttachDebuggerToProcess(int pid);
}
public interface Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.Interfaces.ITestRequestSender {
    public abstract virtual int InitializeCommunication();
    public abstract virtual void CheckVersionWithTestHost();
    public abstract virtual bool WaitForRequestHandlerConnection(int connectionTimeout, CancellationToken cancellationToken);
    public abstract virtual void Close();
    public abstract virtual void InitializeDiscovery(IEnumerable`1<string> pathToAdditionalExtensions);
    public abstract virtual void InitializeExecution(IEnumerable`1<string> pathToAdditionalExtensions);
    public abstract virtual void DiscoverTests(DiscoveryCriteria discoveryCriteria, ITestDiscoveryEventsHandler2 discoveryEventsHandler);
    public abstract virtual void StartTestRun(TestRunCriteriaWithSources runCriteria, ITestRunEventsHandler eventHandler);
    public abstract virtual void StartTestRun(TestRunCriteriaWithTests runCriteria, ITestRunEventsHandler eventHandler);
    public abstract virtual void EndSession();
    public abstract virtual void SendTestRunCancel();
    public abstract virtual void SendTestRunAbort();
    public abstract virtual void OnClientProcessExit(string stdError);
}
public interface Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.Interfaces.ITransport {
    public abstract virtual IPEndPoint Initialize();
    public abstract virtual bool WaitForConnection(int connectionTimeout);
}
public class Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.Interfaces.MessageReceivedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <Data>k__BackingField;
    public string Data { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(string value);
}
public class Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.JsonDataSerializer : object {
    private static JsonDataSerializer instance;
    private static JsonSerializer payloadSerializer;
    private static JsonSerializer payloadSerializer2;
    private static JsonSerializer serializer;
    public static JsonDataSerializer Instance { get; }
    public static JsonDataSerializer get_Instance();
    public sealed virtual Message DeserializeMessage(string rawMessage);
    public sealed virtual T DeserializePayload(Message message);
    public T Deserialize(string json, int version);
    public sealed virtual string SerializeMessage(string messageType);
    public sealed virtual string SerializePayload(string messageType, object payload);
    public sealed virtual string SerializePayload(string messageType, object payload, int version);
    public string Serialize(T data, int version);
    public sealed virtual T Clone(T obj);
    private string Serialize(JsonSerializer serializer, T data);
    private T Deserialize(JsonSerializer serializer, string data);
    private T Deserialize(JsonSerializer serializer, JToken jToken);
    private JsonSerializer GetPayloadSerializer(Nullable`1<int> version);
}
public class Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.LengthPrefixCommunicationChannel : object {
    private BinaryReader reader;
    private BinaryWriter writer;
    private object writeSyncObject;
    [CompilerGeneratedAttribute]
private EventHandler`1<MessageReceivedEventArgs> MessageReceived;
    public LengthPrefixCommunicationChannel(Stream stream);
    [CompilerGeneratedAttribute]
public sealed virtual void add_MessageReceived(EventHandler`1<MessageReceivedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_MessageReceived(EventHandler`1<MessageReceivedEventArgs> value);
    public sealed virtual Task Send(string data);
    public sealed virtual Task NotifyDataAvailable();
    public sealed virtual void Dispose();
}
public class Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.Message : object {
    [CompilerGeneratedAttribute]
private string <MessageType>k__BackingField;
    [CompilerGeneratedAttribute]
private JToken <Payload>k__BackingField;
    public string MessageType { get; public set; }
    public JToken Payload { get; public set; }
    [CompilerGeneratedAttribute]
public string get_MessageType();
    [CompilerGeneratedAttribute]
public void set_MessageType(string value);
    [CompilerGeneratedAttribute]
public JToken get_Payload();
    [CompilerGeneratedAttribute]
public void set_Payload(JToken value);
    public virtual string ToString();
}
public class Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.ObjectModel.BeforeTestRunStartPayload : object {
    [CompilerGeneratedAttribute]
private string <SettingsXml>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Sources>k__BackingField;
    public string SettingsXml { get; public set; }
    public IEnumerable`1<string> Sources { get; public set; }
    [CompilerGeneratedAttribute]
public string get_SettingsXml();
    [CompilerGeneratedAttribute]
public void set_SettingsXml(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Sources();
    [CompilerGeneratedAttribute]
public void set_Sources(IEnumerable`1<string> value);
}
public class Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.ObjectModel.DiscoveryCompletePayload : object {
    [CompilerGeneratedAttribute]
private long <TotalTests>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<TestCase> <LastDiscoveredTests>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAborted>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Metrics>k__BackingField;
    public long TotalTests { get; public set; }
    public IEnumerable`1<TestCase> LastDiscoveredTests { get; public set; }
    public bool IsAborted { get; public set; }
    public IDictionary`2<string, object> Metrics { get; public set; }
    [CompilerGeneratedAttribute]
public long get_TotalTests();
    [CompilerGeneratedAttribute]
public void set_TotalTests(long value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<TestCase> get_LastDiscoveredTests();
    [CompilerGeneratedAttribute]
public void set_LastDiscoveredTests(IEnumerable`1<TestCase> value);
    [CompilerGeneratedAttribute]
public bool get_IsAborted();
    [CompilerGeneratedAttribute]
public void set_IsAborted(bool value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_Metrics();
    [CompilerGeneratedAttribute]
public void set_Metrics(IDictionary`2<string, object> value);
}
public static class Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.ObjectModel.MessageType : object {
    public static string SessionStart;
    public static string SessionEnd;
    public static string SessionAbort;
    public static string SessionConnected;
    public static string TestMessage;
    public static string VersionCheck;
    public static string ProtocolError;
    public static string DiscoveryInitialize;
    public static string StartDiscovery;
    public static string TestCasesFound;
    public static string DiscoveryComplete;
    public static string CancelDiscovery;
    public static string ExecutionInitialize;
    public static string CancelTestRun;
    public static string AbortTestRun;
    public static string StartTestExecutionWithSources;
    public static string StartTestExecutionWithTests;
    public static string TestRunStatsChange;
    public static string ExecutionComplete;
    public static string GetTestRunnerProcessStartInfoForRunAll;
    public static string GetTestRunnerProcessStartInfoForRunSelected;
    public static string CustomTestHostLaunch;
    public static string CustomTestHostLaunchCallback;
    public static string TestRunAttachmentsProcessingStart;
    public static string TestRunAttachmentsProcessingComplete;
    public static string TestRunAttachmentsProcessingProgress;
    public static string TestRunAttachmentsProcessingCancel;
    public static string ExtensionsInitialize;
    public static string TestRunAllSourcesWithDefaultHost;
    public static string TestRunSelectedTestCasesDefaultHost;
    public static string LaunchAdapterProcessWithDebuggerAttached;
    public static string LaunchAdapterProcessWithDebuggerAttachedCallback;
    public static string AttachDebugger;
    public static string AttachDebuggerCallback;
    public static string EditorAttachDebugger;
    public static string EditorAttachDebuggerCallback;
    public static string DataCollectionMessage;
    public static string TestHostLaunched;
    public static string BeforeTestRunStart;
    public static string BeforeTestRunStartResult;
    public static string AfterTestRunEnd;
    public static string AfterTestRunEndResult;
    public static string DataCollectionTestStart;
    public static string DataCollectionTestEnd;
    public static string DataCollectionTestEndResult;
    public static string DataCollectionTestStartAck;
}
public class Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.ObjectModel.TestHostLaunchedPayload : object {
    [CompilerGeneratedAttribute]
private int <ProcessId>k__BackingField;
    [DataMemberAttribute]
public int ProcessId { get; public set; }
    [CompilerGeneratedAttribute]
public int get_ProcessId();
    [CompilerGeneratedAttribute]
public void set_ProcessId(int value);
}
public class Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.ObjectModel.TestMessagePayload : object {
    [CompilerGeneratedAttribute]
private TestMessageLevel <MessageLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    public TestMessageLevel MessageLevel { get; public set; }
    public string Message { get; public set; }
    [CompilerGeneratedAttribute]
public TestMessageLevel get_MessageLevel();
    [CompilerGeneratedAttribute]
public void set_MessageLevel(TestMessageLevel value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
}
public class Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.ObjectModel.TestRunAttachmentsProcessingCompletePayload : object {
    [CompilerGeneratedAttribute]
private TestRunAttachmentsProcessingCompleteEventArgs <AttachmentsProcessingCompleteEventArgs>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<AttachmentSet> <Attachments>k__BackingField;
    public TestRunAttachmentsProcessingCompleteEventArgs AttachmentsProcessingCompleteEventArgs { get; public set; }
    public IEnumerable`1<AttachmentSet> Attachments { get; public set; }
    [CompilerGeneratedAttribute]
public TestRunAttachmentsProcessingCompleteEventArgs get_AttachmentsProcessingCompleteEventArgs();
    [CompilerGeneratedAttribute]
public void set_AttachmentsProcessingCompleteEventArgs(TestRunAttachmentsProcessingCompleteEventArgs value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<AttachmentSet> get_Attachments();
    [CompilerGeneratedAttribute]
public void set_Attachments(IEnumerable`1<AttachmentSet> value);
}
public class Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.ObjectModel.TestRunAttachmentsProcessingProgressPayload : object {
    [CompilerGeneratedAttribute]
private TestRunAttachmentsProcessingProgressEventArgs <AttachmentsProcessingProgressEventArgs>k__BackingField;
    public TestRunAttachmentsProcessingProgressEventArgs AttachmentsProcessingProgressEventArgs { get; public set; }
    [CompilerGeneratedAttribute]
public TestRunAttachmentsProcessingProgressEventArgs get_AttachmentsProcessingProgressEventArgs();
    [CompilerGeneratedAttribute]
public void set_AttachmentsProcessingProgressEventArgs(TestRunAttachmentsProcessingProgressEventArgs value);
}
public class Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.ObjectModel.TestRunCompletePayload : object {
    [CompilerGeneratedAttribute]
private TestRunCompleteEventArgs <TestRunCompleteArgs>k__BackingField;
    [CompilerGeneratedAttribute]
private TestRunChangedEventArgs <LastRunTests>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<AttachmentSet> <RunAttachments>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <ExecutorUris>k__BackingField;
    public TestRunCompleteEventArgs TestRunCompleteArgs { get; public set; }
    public TestRunChangedEventArgs LastRunTests { get; public set; }
    public ICollection`1<AttachmentSet> RunAttachments { get; public set; }
    public ICollection`1<string> ExecutorUris { get; public set; }
    [CompilerGeneratedAttribute]
public TestRunCompleteEventArgs get_TestRunCompleteArgs();
    [CompilerGeneratedAttribute]
public void set_TestRunCompleteArgs(TestRunCompleteEventArgs value);
    [CompilerGeneratedAttribute]
public TestRunChangedEventArgs get_LastRunTests();
    [CompilerGeneratedAttribute]
public void set_LastRunTests(TestRunChangedEventArgs value);
    [CompilerGeneratedAttribute]
public ICollection`1<AttachmentSet> get_RunAttachments();
    [CompilerGeneratedAttribute]
public void set_RunAttachments(ICollection`1<AttachmentSet> value);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_ExecutorUris();
    [CompilerGeneratedAttribute]
public void set_ExecutorUris(ICollection`1<string> value);
}
public class Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.ObjectModel.TestRunCriteriaWithSources : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, IEnumerable`1<string>> <AdapterSourceMap>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RunSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private TestExecutionContext <TestExecutionContext>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Package>k__BackingField;
    public Dictionary`2<string, IEnumerable`1<string>> AdapterSourceMap { get; private set; }
    public string RunSettings { get; private set; }
    public TestExecutionContext TestExecutionContext { get; public set; }
    public string Package { get; private set; }
    [JsonConstructorAttribute]
public TestRunCriteriaWithSources(Dictionary`2<string, IEnumerable`1<string>> adapterSourceMap, string package, string runSettings, TestExecutionContext testExecutionContext);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, IEnumerable`1<string>> get_AdapterSourceMap();
    [CompilerGeneratedAttribute]
private void set_AdapterSourceMap(Dictionary`2<string, IEnumerable`1<string>> value);
    [CompilerGeneratedAttribute]
public string get_RunSettings();
    [CompilerGeneratedAttribute]
private void set_RunSettings(string value);
    [CompilerGeneratedAttribute]
public TestExecutionContext get_TestExecutionContext();
    [CompilerGeneratedAttribute]
public void set_TestExecutionContext(TestExecutionContext value);
    [CompilerGeneratedAttribute]
public string get_Package();
    [CompilerGeneratedAttribute]
private void set_Package(string value);
}
public class Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.ObjectModel.TestRunCriteriaWithTests : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<TestCase> <Tests>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RunSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private TestExecutionContext <TestExecutionContext>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Package>k__BackingField;
    public IEnumerable`1<TestCase> Tests { get; private set; }
    public string RunSettings { get; private set; }
    public TestExecutionContext TestExecutionContext { get; public set; }
    public string Package { get; private set; }
    [JsonConstructorAttribute]
public TestRunCriteriaWithTests(IEnumerable`1<TestCase> tests, string package, string runSettings, TestExecutionContext testExecutionContext);
    [CompilerGeneratedAttribute]
public IEnumerable`1<TestCase> get_Tests();
    [CompilerGeneratedAttribute]
private void set_Tests(IEnumerable`1<TestCase> value);
    [CompilerGeneratedAttribute]
public string get_RunSettings();
    [CompilerGeneratedAttribute]
private void set_RunSettings(string value);
    [CompilerGeneratedAttribute]
public TestExecutionContext get_TestExecutionContext();
    [CompilerGeneratedAttribute]
public void set_TestExecutionContext(TestExecutionContext value);
    [CompilerGeneratedAttribute]
public string get_Package();
    [CompilerGeneratedAttribute]
private void set_Package(string value);
}
public class Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.ObjectModel.TestRunStatsPayload : object {
    [CompilerGeneratedAttribute]
private TestRunChangedEventArgs <TestRunChangedArgs>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<TestCase> <InProgressTestCases>k__BackingField;
    public TestRunChangedEventArgs TestRunChangedArgs { get; public set; }
    public IEnumerable`1<TestCase> InProgressTestCases { get; public set; }
    [CompilerGeneratedAttribute]
public TestRunChangedEventArgs get_TestRunChangedArgs();
    [CompilerGeneratedAttribute]
public void set_TestRunChangedArgs(TestRunChangedEventArgs value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<TestCase> get_InProgressTestCases();
    [CompilerGeneratedAttribute]
public void set_InProgressTestCases(IEnumerable`1<TestCase> value);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public class Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.Resources.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
public static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
public static CultureInfo Culture { get; public set; }
    public static string AbortedTestDiscovery { get; }
    public static string AbortedTestRun { get; }
    public static string AttachDebuggerToDefaultTestHostFailure { get; }
    public static string ConnectionClosed { get; }
    public static string ConnectionTimeoutErrorMessage { get; }
    public static string TestHostProcessCrashed { get; }
    public static string UnableToCommunicateToTestHost { get; }
    public static string UnexpectedMessage { get; }
    public static string VersionCheckFailed { get; }
    public static string VersionCheckTimedout { get; }
    public static ResourceManager get_ResourceManager();
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_AbortedTestDiscovery();
    public static string get_AbortedTestRun();
    public static string get_AttachDebuggerToDefaultTestHostFailure();
    public static string get_ConnectionClosed();
    public static string get_ConnectionTimeoutErrorMessage();
    public static string get_TestHostProcessCrashed();
    public static string get_UnableToCommunicateToTestHost();
    public static string get_UnexpectedMessage();
    public static string get_VersionCheckFailed();
    public static string get_VersionCheckTimedout();
}
public class Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.Serialization.DefaultTestPlatformContractResolver : DefaultContractResolver {
    protected virtual JsonContract CreateContract(Type objectType);
}
public class Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.Serialization.TestCaseConverter : JsonConverter {
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    private static void AddProperty(JsonWriter writer, TestProperty property, JsonSerializer serializer);
}
public class Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.Serialization.TestObjectConverter : JsonConverter {
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
public class Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.Serialization.TestPlatformContractResolver1 : DefaultTestPlatformContractResolver {
    protected virtual JsonContract CreateContract(Type objectType);
}
public class Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.Serialization.TestResultConverter : JsonConverter {
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    private static void AddProperty(JsonWriter writer, TestProperty property, JsonSerializer serializer);
}
public class Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.Serialization.TestRunStatisticsConverter : JsonConverter {
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
public class Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.SocketClient : object {
    private CancellationTokenSource cancellation;
    private TcpClient tcpClient;
    private Func`2<Stream, ICommunicationChannel> channelFactory;
    private ICommunicationChannel channel;
    private bool stopped;
    private string endPoint;
    [CompilerGeneratedAttribute]
private EventHandler`1<ConnectedEventArgs> Connected;
    [CompilerGeneratedAttribute]
private EventHandler`1<DisconnectedEventArgs> Disconnected;
    protected SocketClient(Func`2<Stream, ICommunicationChannel> channelFactory);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Connected(EventHandler`1<ConnectedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Connected(EventHandler`1<ConnectedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Disconnected(EventHandler`1<DisconnectedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Disconnected(EventHandler`1<DisconnectedEventArgs> value);
    public sealed virtual string Start(string endPoint);
    public sealed virtual void Stop();
    private void OnServerConnected(Task connectAsyncTask);
    private void Stop(Exception error);
    [CompilerGeneratedAttribute]
private Task <OnServerConnected>b__16_0();
}
public class Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.SocketCommunicationManager : object {
    private static int STREAMREADTIMEOUT;
    private TcpListener tcpListener;
    private TcpClient tcpClient;
    private BinaryWriter binaryWriter;
    private BinaryReader binaryReader;
    private IDataSerializer dataSerializer;
    private ManualResetEvent clientConnectedEvent;
    private ManualResetEvent clientConnectionAcceptedEvent;
    private object sendSyncObject;
    private object receiveSyncObject;
    private Socket socket;
    internal SocketCommunicationManager(IDataSerializer dataSerializer);
    public sealed virtual IPEndPoint HostServer(IPEndPoint endpoint);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.SocketCommunicationManager/<AcceptClientAsync>d__14")]
public sealed virtual Task AcceptClientAsync();
    public sealed virtual bool WaitForClientConnection(int clientConnectionTimeout);
    public sealed virtual void StopServer();
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.SocketCommunicationManager/<SetupClientAsync>d__17")]
public sealed virtual Task SetupClientAsync(IPEndPoint endpoint);
    public sealed virtual bool WaitForServerConnection(int connectionTimeout);
    public sealed virtual void StopClient();
    public sealed virtual void SendMessage(string messageType);
    public sealed virtual void SendMessage(string messageType, object payload);
    public sealed virtual void SendMessage(string messageType, object payload, int version);
    public sealed virtual void SendRawMessage(string rawMessage);
    public sealed virtual Message ReceiveMessage();
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.SocketCommunicationManager/<ReceiveMessageAsync>d__25")]
public sealed virtual Task`1<Message> ReceiveMessageAsync(CancellationToken cancellationToken);
    public sealed virtual string ReceiveRawMessage();
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.SocketCommunicationManager/<ReceiveRawMessageAsync>d__27")]
public sealed virtual Task`1<string> ReceiveRawMessageAsync(CancellationToken cancellationToken);
    public sealed virtual T DeserializePayload(Message message);
    private string TryReceiveRawMessage(CancellationToken cancellationToken);
    private void WriteAndFlushToChannel(string rawMessage);
}
public class Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.SocketConstants : object {
    public static int BufferSize;
}
public class Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.SocketServer : object {
    private CancellationTokenSource cancellation;
    private Func`2<Stream, ICommunicationChannel> channelFactory;
    private ICommunicationChannel channel;
    private TcpListener tcpListener;
    private TcpClient tcpClient;
    private bool stopped;
    private string endPoint;
    [CompilerGeneratedAttribute]
private EventHandler`1<ConnectedEventArgs> Connected;
    [CompilerGeneratedAttribute]
private EventHandler`1<DisconnectedEventArgs> Disconnected;
    protected SocketServer(Func`2<Stream, ICommunicationChannel> channelFactory);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Connected(EventHandler`1<ConnectedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Connected(EventHandler`1<ConnectedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Disconnected(EventHandler`1<DisconnectedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Disconnected(EventHandler`1<DisconnectedEventArgs> value);
    public sealed virtual string Start(string endPoint);
    public sealed virtual void Stop();
    private void OnClientConnected(TcpClient client);
    private void Stop(Exception error);
    [CompilerGeneratedAttribute]
private void <Start>b__15_0(Task`1<TcpClient> t);
    [CompilerGeneratedAttribute]
private Task <OnClientConnected>b__17_0();
    [CompilerGeneratedAttribute]
private void <OnClientConnected>b__17_1(Exception error);
}
public class Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.SocketTransport : object {
    private bool disposed;
    private TestHostConnectionInfo connectionInfo;
    private ICommunicationManager communicationManager;
    public SocketTransport(ICommunicationManager communicationManager, TestHostConnectionInfo connectionInfo);
    public sealed virtual IPEndPoint Initialize();
    public sealed virtual bool WaitForConnection(int connectionTimeout);
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    private IPEndPoint GetIPEndPoint(string endpointAddress);
}
[ExtensionAttribute]
internal static class Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.TcpClientExtensions : object {
    private static int STREAMREADTIMEOUT;
    [ExtensionAttribute]
internal static Task MessageLoopAsync(TcpClient client, ICommunicationChannel channel, Action`1<Exception> errorHandler, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static IPEndPoint GetIPEndPoint(string value);
}
public class Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.TestDiscoveryEventHandler : object {
    private ITestRequestHandler requestHandler;
    public TestDiscoveryEventHandler(ITestRequestHandler requestHandler);
    public sealed virtual void HandleDiscoveredTests(IEnumerable`1<TestCase> discoveredTestCases);
    public sealed virtual void HandleDiscoveryComplete(DiscoveryCompleteEventArgs discoveryCompleteEventArgs, IEnumerable`1<TestCase> lastChunk);
    public sealed virtual void HandleLogMessage(TestMessageLevel level, string message);
    public sealed virtual void HandleRawMessage(string rawMessage);
}
public class Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.TestRequestSender : object {
    private static int ClientProcessExitWaitTimeout;
    private IDataSerializer dataSerializer;
    private ManualResetEventSlim connected;
    private ManualResetEventSlim clientExited;
    private int clientExitedWaitTime;
    private ICommunicationEndPoint communicationEndpoint;
    private ICommunicationChannel channel;
    private EventHandler`1<MessageReceivedEventArgs> onMessageReceived;
    private Action`1<DisconnectedEventArgs> onDisconnected;
    private int operationCompleted;
    private ITestMessageEventHandler messageEventHandler;
    private string clientExitErrorMessage;
    private int protocolVersion;
    private int highestSupportedVersion;
    private TestHostConnectionInfo connectionInfo;
    private ITestRuntimeProvider runtimeProvider;
    public TestRequestSender(ProtocolConfig protocolConfig, ITestRuntimeProvider runtimeProvider);
    internal TestRequestSender(ITestRuntimeProvider runtimeProvider, ICommunicationEndPoint communicationEndPoint, TestHostConnectionInfo connectionInfo, IDataSerializer serializer, ProtocolConfig protocolConfig, int clientExitedWaitTime);
    internal TestRequestSender(ICommunicationEndPoint communicationEndPoint, TestHostConnectionInfo connectionInfo, IDataSerializer serializer, ProtocolConfig protocolConfig, int clientExitedWaitTime);
    public sealed virtual int InitializeCommunication();
    public sealed virtual bool WaitForRequestHandlerConnection(int connectionTimeout, CancellationToken cancellationToken);
    public sealed virtual void CheckVersionWithTestHost();
    public sealed virtual void InitializeDiscovery(IEnumerable`1<string> pathToAdditionalExtensions);
    public sealed virtual void DiscoverTests(DiscoveryCriteria discoveryCriteria, ITestDiscoveryEventsHandler2 discoveryEventsHandler);
    public sealed virtual void InitializeExecution(IEnumerable`1<string> pathToAdditionalExtensions);
    public sealed virtual void StartTestRun(TestRunCriteriaWithSources runCriteria, ITestRunEventsHandler eventHandler);
    public sealed virtual void StartTestRun(TestRunCriteriaWithTests runCriteria, ITestRunEventsHandler eventHandler);
    public sealed virtual void SendTestRunCancel();
    public sealed virtual void SendTestRunAbort();
    public sealed virtual void EndSession();
    public sealed virtual void OnClientProcessExit(string stdError);
    public sealed virtual void Close();
    public sealed virtual void Dispose();
    private void OnExecutionMessageReceived(object sender, MessageReceivedEventArgs messageReceived, ITestRunEventsHandler testRunEventsHandler);
    private void OnDiscoveryMessageReceived(ITestDiscoveryEventsHandler2 discoveryEventsHandler, MessageReceivedEventArgs args);
    private void OnTestRunAbort(ITestRunEventsHandler testRunEventsHandler, Exception exception, bool getClientError);
    private void OnDiscoveryAbort(ITestDiscoveryEventsHandler2 eventHandler, Exception exception, bool getClientError);
    private string GetAbortErrorMessage(Exception exception, bool getClientError);
    private void LogErrorMessage(string message);
    private bool IsOperationComplete();
    private void SetOperationComplete();
    private void SetCommunicationEndPoint();
    [CompilerGeneratedAttribute]
private void <InitializeCommunication>b__19_0(object sender, ConnectedEventArgs args);
    [CompilerGeneratedAttribute]
private void <InitializeCommunication>b__19_1(object sender, DisconnectedEventArgs args);
}
public class Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.VersionedMessage : Message {
    [CompilerGeneratedAttribute]
private int <Version>k__BackingField;
    public int Version { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(int value);
}
