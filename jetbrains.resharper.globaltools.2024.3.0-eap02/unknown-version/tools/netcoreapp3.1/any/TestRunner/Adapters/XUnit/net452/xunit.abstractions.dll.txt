public interface Xunit.Abstractions.IAfterTestFinished {
    public string AttributeName { get; }
    public abstract virtual string get_AttributeName();
}
public interface Xunit.Abstractions.IAfterTestStarting {
    public string AttributeName { get; }
    public abstract virtual string get_AttributeName();
}
public interface Xunit.Abstractions.IAssemblyInfo {
    public string AssemblyPath { get; }
    public string Name { get; }
    public abstract virtual string get_AssemblyPath();
    public abstract virtual string get_Name();
    public abstract virtual IEnumerable`1<IAttributeInfo> GetCustomAttributes(string assemblyQualifiedAttributeTypeName);
    public abstract virtual ITypeInfo GetType(string typeName);
    public abstract virtual IEnumerable`1<ITypeInfo> GetTypes(bool includePrivateTypes);
}
public interface Xunit.Abstractions.IAttributeInfo {
    public abstract virtual IEnumerable`1<object> GetConstructorArguments();
    public abstract virtual IEnumerable`1<IAttributeInfo> GetCustomAttributes(string assemblyQualifiedAttributeTypeName);
    public abstract virtual TValue GetNamedArgument(string argumentName);
}
public interface Xunit.Abstractions.IBeforeTestFinished {
    public string AttributeName { get; }
    public abstract virtual string get_AttributeName();
}
public interface Xunit.Abstractions.IBeforeTestStarting {
    public string AttributeName { get; }
    public abstract virtual string get_AttributeName();
}
public interface Xunit.Abstractions.IDiagnosticMessage {
    public string Message { get; }
    public abstract virtual string get_Message();
}
public interface Xunit.Abstractions.IDiscoveryCompleteMessage {
}
public interface Xunit.Abstractions.IErrorMessage {
}
public interface Xunit.Abstractions.IExecutionMessage {
    public IEnumerable`1<ITestCase> TestCases { get; }
    public abstract virtual IEnumerable`1<ITestCase> get_TestCases();
}
public interface Xunit.Abstractions.IFailureInformation {
    public String[] ExceptionTypes { get; }
    public String[] Messages { get; }
    public String[] StackTraces { get; }
    public Int32[] ExceptionParentIndices { get; }
    public abstract virtual String[] get_ExceptionTypes();
    public abstract virtual String[] get_Messages();
    public abstract virtual String[] get_StackTraces();
    public abstract virtual Int32[] get_ExceptionParentIndices();
}
public interface Xunit.Abstractions.IFinishedMessage {
    public decimal ExecutionTime { get; }
    public int TestsFailed { get; }
    public int TestsRun { get; }
    public int TestsSkipped { get; }
    public abstract virtual decimal get_ExecutionTime();
    public abstract virtual int get_TestsFailed();
    public abstract virtual int get_TestsRun();
    public abstract virtual int get_TestsSkipped();
}
public interface Xunit.Abstractions.IMessageSink {
    public abstract virtual bool OnMessage(IMessageSinkMessage message);
}
public interface Xunit.Abstractions.IMessageSinkMessage {
}
public interface Xunit.Abstractions.IMethodInfo {
    public bool IsAbstract { get; }
    public bool IsGenericMethodDefinition { get; }
    public bool IsPublic { get; }
    public bool IsStatic { get; }
    public string Name { get; }
    public ITypeInfo ReturnType { get; }
    public ITypeInfo Type { get; }
    public abstract virtual bool get_IsAbstract();
    public abstract virtual bool get_IsGenericMethodDefinition();
    public abstract virtual bool get_IsPublic();
    public abstract virtual bool get_IsStatic();
    public abstract virtual string get_Name();
    public abstract virtual ITypeInfo get_ReturnType();
    public abstract virtual ITypeInfo get_Type();
    public abstract virtual IEnumerable`1<IAttributeInfo> GetCustomAttributes(string assemblyQualifiedAttributeTypeName);
    public abstract virtual IEnumerable`1<ITypeInfo> GetGenericArguments();
    public abstract virtual IEnumerable`1<IParameterInfo> GetParameters();
    public abstract virtual IMethodInfo MakeGenericMethod(ITypeInfo[] typeArguments);
}
public interface Xunit.Abstractions.IParameterInfo {
    public string Name { get; }
    public ITypeInfo ParameterType { get; }
    public abstract virtual string get_Name();
    public abstract virtual ITypeInfo get_ParameterType();
}
public interface Xunit.Abstractions.IReflectionAssemblyInfo {
    public Assembly Assembly { get; }
    public abstract virtual Assembly get_Assembly();
}
public interface Xunit.Abstractions.IReflectionAttributeInfo {
    public Attribute Attribute { get; }
    public abstract virtual Attribute get_Attribute();
}
public interface Xunit.Abstractions.IReflectionMethodInfo {
    public MethodInfo MethodInfo { get; }
    public abstract virtual MethodInfo get_MethodInfo();
}
public interface Xunit.Abstractions.IReflectionParameterInfo {
    public ParameterInfo ParameterInfo { get; }
    public abstract virtual ParameterInfo get_ParameterInfo();
}
public interface Xunit.Abstractions.IReflectionTypeInfo {
    public Type Type { get; }
    public abstract virtual Type get_Type();
}
public interface Xunit.Abstractions.ISourceInformation {
    public string FileName { get; public set; }
    public Nullable`1<int> LineNumber { get; public set; }
    public abstract virtual string get_FileName();
    public abstract virtual void set_FileName(string value);
    public abstract virtual Nullable`1<int> get_LineNumber();
    public abstract virtual void set_LineNumber(Nullable`1<int> value);
}
public interface Xunit.Abstractions.ISourceInformationProvider {
    public abstract virtual ISourceInformation GetSourceInformation(ITestCase testCase);
}
public interface Xunit.Abstractions.ITest {
    public string DisplayName { get; }
    public ITestCase TestCase { get; }
    public abstract virtual string get_DisplayName();
    public abstract virtual ITestCase get_TestCase();
}
public interface Xunit.Abstractions.ITestAssembly {
    public IAssemblyInfo Assembly { get; }
    public string ConfigFileName { get; }
    public abstract virtual IAssemblyInfo get_Assembly();
    public abstract virtual string get_ConfigFileName();
}
public interface Xunit.Abstractions.ITestAssemblyCleanupFailure {
}
public interface Xunit.Abstractions.ITestAssemblyFinished {
}
public interface Xunit.Abstractions.ITestAssemblyMessage {
    public ITestAssembly TestAssembly { get; }
    public abstract virtual ITestAssembly get_TestAssembly();
}
public interface Xunit.Abstractions.ITestAssemblyStarting {
    public DateTime StartTime { get; }
    public string TestEnvironment { get; }
    public string TestFrameworkDisplayName { get; }
    public abstract virtual DateTime get_StartTime();
    public abstract virtual string get_TestEnvironment();
    public abstract virtual string get_TestFrameworkDisplayName();
}
public interface Xunit.Abstractions.ITestCase {
    public string DisplayName { get; }
    public string SkipReason { get; }
    public ISourceInformation SourceInformation { get; public set; }
    public ITestMethod TestMethod { get; }
    public Object[] TestMethodArguments { get; }
    public Dictionary`2<string, List`1<string>> Traits { get; }
    public string UniqueID { get; }
    public abstract virtual string get_DisplayName();
    public abstract virtual string get_SkipReason();
    public abstract virtual ISourceInformation get_SourceInformation();
    public abstract virtual void set_SourceInformation(ISourceInformation value);
    public abstract virtual ITestMethod get_TestMethod();
    public abstract virtual Object[] get_TestMethodArguments();
    public abstract virtual Dictionary`2<string, List`1<string>> get_Traits();
    public abstract virtual string get_UniqueID();
}
public interface Xunit.Abstractions.ITestCaseCleanupFailure {
}
public interface Xunit.Abstractions.ITestCaseDiscoveryMessage {
}
public interface Xunit.Abstractions.ITestCaseFinished {
}
public interface Xunit.Abstractions.ITestCaseMessage {
    public ITestCase TestCase { get; }
    public abstract virtual ITestCase get_TestCase();
}
public interface Xunit.Abstractions.ITestCaseStarting {
}
public interface Xunit.Abstractions.ITestClass {
    public ITypeInfo Class { get; }
    public ITestCollection TestCollection { get; }
    public abstract virtual ITypeInfo get_Class();
    public abstract virtual ITestCollection get_TestCollection();
}
public interface Xunit.Abstractions.ITestClassCleanupFailure {
}
public interface Xunit.Abstractions.ITestClassConstructionFinished {
}
public interface Xunit.Abstractions.ITestClassConstructionStarting {
}
public interface Xunit.Abstractions.ITestClassDisposeFinished {
}
public interface Xunit.Abstractions.ITestClassDisposeStarting {
}
public interface Xunit.Abstractions.ITestClassFinished {
}
public interface Xunit.Abstractions.ITestClassMessage {
    public ITestClass TestClass { get; }
    public abstract virtual ITestClass get_TestClass();
}
public interface Xunit.Abstractions.ITestClassStarting {
}
public interface Xunit.Abstractions.ITestCleanupFailure {
}
public interface Xunit.Abstractions.ITestCollection {
    public ITypeInfo CollectionDefinition { get; }
    public string DisplayName { get; }
    public ITestAssembly TestAssembly { get; }
    public Guid UniqueID { get; }
    public abstract virtual ITypeInfo get_CollectionDefinition();
    public abstract virtual string get_DisplayName();
    public abstract virtual ITestAssembly get_TestAssembly();
    public abstract virtual Guid get_UniqueID();
}
public interface Xunit.Abstractions.ITestCollectionCleanupFailure {
}
public interface Xunit.Abstractions.ITestCollectionFinished {
}
public interface Xunit.Abstractions.ITestCollectionMessage {
    public ITestCollection TestCollection { get; }
    public abstract virtual ITestCollection get_TestCollection();
}
public interface Xunit.Abstractions.ITestCollectionStarting {
}
public interface Xunit.Abstractions.ITestFailed {
}
public interface Xunit.Abstractions.ITestFinished {
    public decimal ExecutionTime { get; }
    public string Output { get; }
    public abstract virtual decimal get_ExecutionTime();
    public abstract virtual string get_Output();
}
public interface Xunit.Abstractions.ITestFramework {
    unknown ISourceInformationProvider SourceInformationProvider {public set; }
    public abstract virtual void set_SourceInformationProvider(ISourceInformationProvider value);
    public abstract virtual ITestFrameworkDiscoverer GetDiscoverer(IAssemblyInfo assembly);
    public abstract virtual ITestFrameworkExecutor GetExecutor(AssemblyName assemblyName);
}
public interface Xunit.Abstractions.ITestFrameworkDiscoverer {
    public string TargetFramework { get; }
    public string TestFrameworkDisplayName { get; }
    public abstract virtual string get_TargetFramework();
    public abstract virtual string get_TestFrameworkDisplayName();
    public abstract virtual void Find(bool includeSourceInformation, IMessageSink discoveryMessageSink, ITestFrameworkDiscoveryOptions discoveryOptions);
    public abstract virtual void Find(string typeName, bool includeSourceInformation, IMessageSink discoveryMessageSink, ITestFrameworkDiscoveryOptions discoveryOptions);
    public abstract virtual string Serialize(ITestCase testCase);
}
public interface Xunit.Abstractions.ITestFrameworkDiscoveryOptions {
}
public interface Xunit.Abstractions.ITestFrameworkExecutionOptions {
}
public interface Xunit.Abstractions.ITestFrameworkExecutor {
    public abstract virtual ITestCase Deserialize(string value);
    public abstract virtual void RunAll(IMessageSink executionMessageSink, ITestFrameworkDiscoveryOptions discoveryOptions, ITestFrameworkExecutionOptions executionOptions);
    public abstract virtual void RunTests(IEnumerable`1<ITestCase> testCases, IMessageSink executionMessageSink, ITestFrameworkExecutionOptions executionOptions);
}
public interface Xunit.Abstractions.ITestFrameworkOptions {
    public abstract virtual TValue GetValue(string name);
    public abstract virtual void SetValue(string name, TValue value);
}
public interface Xunit.Abstractions.ITestMessage {
    public ITest Test { get; }
    public abstract virtual ITest get_Test();
}
public interface Xunit.Abstractions.ITestMethod {
    public IMethodInfo Method { get; }
    public ITestClass TestClass { get; }
    public abstract virtual IMethodInfo get_Method();
    public abstract virtual ITestClass get_TestClass();
}
public interface Xunit.Abstractions.ITestMethodCleanupFailure {
}
public interface Xunit.Abstractions.ITestMethodFinished {
}
public interface Xunit.Abstractions.ITestMethodMessage {
    public ITestMethod TestMethod { get; }
    public abstract virtual ITestMethod get_TestMethod();
}
public interface Xunit.Abstractions.ITestMethodStarting {
}
public interface Xunit.Abstractions.ITestOutput {
    public string Output { get; }
    public abstract virtual string get_Output();
}
public interface Xunit.Abstractions.ITestOutputHelper {
    public abstract virtual void WriteLine(string message);
    public abstract virtual void WriteLine(string format, Object[] args);
}
public interface Xunit.Abstractions.ITestPassed {
}
public interface Xunit.Abstractions.ITestResultMessage {
    public decimal ExecutionTime { get; }
    public string Output { get; }
    public abstract virtual decimal get_ExecutionTime();
    public abstract virtual string get_Output();
}
public interface Xunit.Abstractions.ITestSkipped {
    public string Reason { get; }
    public abstract virtual string get_Reason();
}
public interface Xunit.Abstractions.ITestStarting {
}
public interface Xunit.Abstractions.ITypeInfo {
    public IAssemblyInfo Assembly { get; }
    public ITypeInfo BaseType { get; }
    public IEnumerable`1<ITypeInfo> Interfaces { get; }
    public bool IsAbstract { get; }
    public bool IsGenericParameter { get; }
    public bool IsGenericType { get; }
    public bool IsSealed { get; }
    public bool IsValueType { get; }
    public string Name { get; }
    public abstract virtual IAssemblyInfo get_Assembly();
    public abstract virtual ITypeInfo get_BaseType();
    public abstract virtual IEnumerable`1<ITypeInfo> get_Interfaces();
    public abstract virtual bool get_IsAbstract();
    public abstract virtual bool get_IsGenericParameter();
    public abstract virtual bool get_IsGenericType();
    public abstract virtual bool get_IsSealed();
    public abstract virtual bool get_IsValueType();
    public abstract virtual string get_Name();
    public abstract virtual IEnumerable`1<IAttributeInfo> GetCustomAttributes(string assemblyQualifiedAttributeTypeName);
    public abstract virtual IEnumerable`1<ITypeInfo> GetGenericArguments();
    public abstract virtual IMethodInfo GetMethod(string methodName, bool includePrivateMethod);
    public abstract virtual IEnumerable`1<IMethodInfo> GetMethods(bool includePrivateMethods);
}
public interface Xunit.Abstractions.IXunitSerializable {
    public abstract virtual void Deserialize(IXunitSerializationInfo info);
    public abstract virtual void Serialize(IXunitSerializationInfo info);
}
public interface Xunit.Abstractions.IXunitSerializationInfo {
    public abstract virtual void AddValue(string key, object value, Type type);
    public abstract virtual object GetValue(string key, Type type);
    public abstract virtual T GetValue(string key);
}
