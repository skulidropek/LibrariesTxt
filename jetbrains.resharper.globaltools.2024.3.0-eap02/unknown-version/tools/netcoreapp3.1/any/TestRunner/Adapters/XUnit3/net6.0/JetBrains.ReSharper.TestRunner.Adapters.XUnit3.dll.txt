[ExtensionAttribute]
internal static class JetBrains.ReSharper.TestRunner.Adapters.XUnit3.Extensions.DictionaryExtensions : object {
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static TValue GetValueOrDefault(IDictionary`2<TKey, TValue> dictionary, TKey key);
}
[ExtensionAttribute]
internal static class JetBrains.ReSharper.TestRunner.Adapters.XUnit3.Extensions.XUnitExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static ExceptionInfo[] ConvertExceptions(IErrorMetadata failure, String& simplifiedMessage);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.TestRunner.Adapters.XUnit3.RemoteTaskDepot : object {
    private IDictionary`2<string, XUnitTestClassTask> myClasses;
    private IDictionary`2<string, XUnitTestMethodTask> myMethods;
    private IDictionary`2<string, XUnitTestElementTask> myTasksByUniqueId;
    private IDictionary`2<string, XUnitTestElementTask> myTasksByReSharperId;
    private ISet`1<ITestCase> myTestCasesToRun;
    public RemoteTaskDepot(RemoteTask[] tasks);
    public void Add(XUnitTestElementTask task);
    [NullableContextAttribute("2")]
public XUnitTestElementTask TryGetByReSharperId(string testId);
    [NullableContextAttribute("2")]
public XUnitTestElementTask TryGetByXUnitId(string testId);
    public XUnitTestElementTask TryGetParent(XUnitTestElementTask task);
    public ISet`1<RemoteTask> GetDiscoveredTasks();
    public IReadOnlyCollection`1<ITestCase> GetTestsToRun();
    public void ProcessDiscoveryResultsNonEnumerated(IEnumerable`1<ITestCase> testCases);
    public void ProcessDiscoveryResultsEnumerated(IEnumerable`1<ITestCase> testCases);
    private T Register(T task);
    public XUnitTestElementTask GetOrCreateTestCase(ITestCase testCase);
    public XUnitTestElementTask CreateTestCase(ITestCase testCase);
    [NullableContextAttribute("2")]
private XUnitTestClassTask GetOrCreateClass(string typeName);
    private XUnitTestMethodTask TryCreateTestMethod(ITestCase testCase);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.TestRunner.Adapters.XUnit3.RunContext : object {
    private RemoteTaskDepot myDepot;
    private ITestExecutionSink myExecutionSink;
    private ConcurrentDictionary`2<string, TaskWrapper> myWrapperByUniqueId;
    private ConcurrentDictionary`2<string, TaskWrapper> myWrapperByReSharperId;
    private HashSet`1<XUnitTestElementTask> myHandledTests;
    private HashSet`1<XUnitTestElementTask> myHandledTestCases;
    public RunContext(RemoteTaskDepot depot, ITestExecutionSink executionSink);
    public TaskWrapper GetOrCreateTask(ITestStarting test);
    private XUnitTestElementTask CreateDynamicTask(ITestStarting test);
    public TaskWrapper GetTask(ITestMessage test);
    public TaskWrapper GetOrCreateTask(ITestCaseStarting testCase);
    private XUnitTestElementTask CreateDynamicTask(ITestCaseStarting testCase);
    public TaskWrapper GetTask(ITestCaseMessage testCase);
    public TaskWrapper GetTask(ITestMethodMessage testMethod);
    public TaskWrapper GetTask(ITestClassMessage testClass);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private RemoteTask <.ctor>b__6_0(RemoteTask t);
    [CompilerGeneratedAttribute]
private TaskWrapper <GetTask>b__13_0(string key);
    [CompilerGeneratedAttribute]
private TaskWrapper <GetTask>b__14_0(string key);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.TestRunner.Adapters.XUnit3.TaskWrapper : object {
    private XUnitTestElementTask myTask;
    private ITestExecutionSink mySink;
    private TestOutcome myOutcome;
    private string myMessage;
    private long myStarted;
    private long myFinished;
    public TaskWrapper(XUnitTestElementTask elementTask, ITestExecutionSink executionSink);
    public void Starting();
    [NullableContextAttribute("2")]
public void Output(string output);
    [NullableContextAttribute("2")]
public void Skipped(string reason);
    public void Passed();
    public void Failed(ExceptionInfo[] exceptions, string exceptionMessage);
    [NullableContextAttribute("2")]
public void Finished(IExecutionSummaryMetadata message);
    public void Reset();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.TestRunner.Adapters.XUnit3.TestDiscoverer : object {
    private InProcessFrontController myController;
    private XunitProjectAssembly myProjectAssembly;
    private ITestDiscoverySink myDiscoverySink;
    private RemoteTaskDepot myDepot;
    private ILogger myLogger;
    public TestDiscoverer(InProcessFrontController controller, XunitProjectAssembly projectAssembly, ITestDiscoverySink discoverySink, RemoteTaskDepot remoteTaskDepot);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.TestRunner.Adapters.XUnit3.TestDiscoverer/<Run>d__6")]
public Task Run(CancellationToken ct);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.TestRunner.Adapters.XUnit3.TestDiscoverySink : DiscoveryEventSink {
    private CancellationToken myCt;
    private TaskCompletionSource`1<IEnumerable`1<ITestCaseDiscovered>> myTcs;
    private List`1<ITestCaseDiscovered> myCollectedElements;
    public Task`1<IEnumerable`1<ITestCaseDiscovered>> Elements { get; }
    public TestDiscoverySink(CancellationToken ct);
    public Task`1<IEnumerable`1<ITestCaseDiscovered>> get_Elements();
    private void OnTestCaseDiscoveredEvent(MessageHandlerArgs`1<ITestCaseDiscovered> args);
    private void OnDiscoveryCompleteEvent(MessageHandlerArgs`1<IDiscoveryComplete> args);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.TestRunner.Adapters.XUnit3.TestExecutionSink : ExecutionEventSink {
    private CancellationToken myCt;
    private TaskCompletionSource`1<int> myTcs;
    private RunContext myRunContext;
    private ILogger myLogger;
    public Task Completion { get; }
    public TestExecutionSink(CancellationToken ct, RemoteTaskDepot depot, ITestExecutionSink sink);
    public Task get_Completion();
    private void OnTestStartingEvent(MessageHandlerArgs`1<ITestStarting> args);
    private void OnTestOutputEvent(MessageHandlerArgs`1<ITestOutput> args);
    private void OnTestPassedEvent(MessageHandlerArgs`1<ITestPassed> args);
    private void OnTestSkippedEvent(MessageHandlerArgs`1<ITestSkipped> args);
    private void OnTestFailedEvent(MessageHandlerArgs`1<ITestFailed> args);
    private void OnTestFinishedEvent(MessageHandlerArgs`1<ITestFinished> args);
    private void OnTestCaseStartingEvent(MessageHandlerArgs`1<ITestCaseStarting> args);
    private void OnTestCaseFinishedEvent(MessageHandlerArgs`1<ITestCaseFinished> args);
    private void OnTestMethodStartingEvent(MessageHandlerArgs`1<ITestMethodStarting> args);
    private void OnTestMethodFinishedEvent(MessageHandlerArgs`1<ITestMethodFinished> args);
    private void OnTestClassStartingEvent(MessageHandlerArgs`1<ITestClassStarting> args);
    private void OnTestClassFinishedEvent(MessageHandlerArgs`1<ITestClassFinished> args);
    private void OnTestAssemblyStartingEvent(MessageHandlerArgs`1<ITestAssemblyStarting> args);
    private void OnTestAssemblyFinishedEvent(MessageHandlerArgs`1<ITestAssemblyFinished> args);
    private void OnTestAssemblyCleanupFailureEvent(MessageHandlerArgs`1<ITestAssemblyCleanupFailure> args);
    private void OnTestCollectionCleanupFailureEvent(MessageHandlerArgs`1<ITestCollectionCleanupFailure> args);
    private void OnTestClassCleanupFailureEvent(MessageHandlerArgs`1<ITestClassCleanupFailure> args);
    private void OnTestMethodCleanupFailureEvent(MessageHandlerArgs`1<ITestMethodCleanupFailure> args);
    private void OnTestCaseCleanupFailureEvent(MessageHandlerArgs`1<ITestCaseCleanupFailure> args);
    private void OnTestCleanupFailureEvent(MessageHandlerArgs`1<ITestCleanupFailure> args);
    private void HandleFailure(IErrorMetadata errorMetadata);
    private void HandleFailure(TaskWrapper task, IErrorMetadata failureInformation, string message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.ReSharper.TestRunner.Adapters.XUnit3.TestExecutor : object {
    private InProcessFrontController myController;
    private XunitProjectAssembly myProjectAssembly;
    private RemoteTaskDepot myRemoteTaskDepot;
    private ITestExecutionSink myExecutionSink;
    private ILogger myLogger;
    public TestExecutor(InProcessFrontController controller, XunitProjectAssembly projectAssembly, ITestExecutionSink executionSink, RemoteTaskDepot remoteTaskDepot);
    public Task Run(CancellationToken ct);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.ReSharper.TestRunner.Adapters.XUnit3.XUnitRunner : LongLivedMarshalByRefObject {
    private ILogger myLogger;
    private CancellationTokenSource myDiscoveryCts;
    private CancellationTokenSource myExecutionCts;
    public sealed virtual void DiscoverTests(TestDiscoveryRequest request, ITestDiscoverySink discoverySink);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.TestRunner.Adapters.XUnit3.XUnitRunner/<DiscoverTestsAsync>d__5")]
private Task DiscoverTestsAsync(TestDiscoveryRequest request, ITestDiscoverySink discoverySink);
    public sealed virtual void AbortDiscovery();
    public sealed virtual void RunTests(TestRunRequest request, ITestDiscoverySink discoverySink, ITestExecutionSink executionSink);
    [AsyncStateMachineAttribute("JetBrains.ReSharper.TestRunner.Adapters.XUnit3.XUnitRunner/<RunTestsAsync>d__8")]
private Task RunTestsAsync(TestRunRequest request, ITestDiscoverySink discoverySink, ITestExecutionSink executionSink);
    public sealed virtual void AbortRun();
    private XunitProjectAssembly BuildXunitProjectAssembly(TestContainer container, TestRunRequest request);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
