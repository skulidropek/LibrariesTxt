[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.AllowNullAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.DisallowNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ParameterValue>k__BackingField;
    public bool ParameterValue { get; }
    public DoesNotReturnIfAttribute(bool parameterValue);
    [CompilerGeneratedAttribute]
public bool get_ParameterValue();
}
[AttributeUsageAttribute("749")]
internal class System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute : Attribute {
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public MaybeNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[AttributeUsageAttribute("10368")]
internal class System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public NotNullIfNotNullAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[AttributeUsageAttribute("32")]
internal class System.Diagnostics.CodeAnalysis.SetsRequiredMembersAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.StringSyntaxAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Syntax>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Object[] <Arguments>k__BackingField;
    public static string CompositeFormat;
    public static string DateOnlyFormat;
    public static string DateTimeFormat;
    public static string EnumFormat;
    public static string GuidFormat;
    public static string Json;
    public static string NumericFormat;
    public static string Regex;
    public static string TimeOnlyFormat;
    public static string TimeSpanFormat;
    public static string Uri;
    public static string Xml;
    public string Syntax { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Object[] Arguments { get; }
    public StringSyntaxAttribute(string syntax);
    public StringSyntaxAttribute(string syntax, Object[] arguments);
    [CompilerGeneratedAttribute]
public string get_Syntax();
    [CompilerGeneratedAttribute]
public Object[] get_Arguments();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2048")]
internal class System.Runtime.CompilerServices.CallerArgumentExpressionAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public CallerArgumentExpressionAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("32767")]
internal class System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <FeatureName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsOptional>k__BackingField;
    public string FeatureName { get; }
    public bool IsOptional { get; public set; }
    public CompilerFeatureRequiredAttribute(string featureName);
    [CompilerGeneratedAttribute]
public string get_FeatureName();
    [CompilerGeneratedAttribute]
public bool get_IsOptional();
    [CompilerGeneratedAttribute]
public void set_IsOptional(bool value);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[AttributeUsageAttribute("396")]
internal class System.Runtime.CompilerServices.RequiredMemberAttribute : Attribute {
}
[GeneratedCodeAttribute("Nerdbank.GitVersioning.Tasks", "3.6.139.59561")]
[ExcludeFromCodeCoverageAttribute]
internal static class ThisAssembly : object {
    internal static string AssemblyConfiguration;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyVersion;
    internal static DateTime GitCommitDate;
    internal static string GitCommitId;
    internal static bool IsPrerelease;
    internal static bool IsPublicRelease;
    internal static string PublicKey;
    internal static string PublicKeyToken;
    internal static string RootNamespace;
    private static ThisAssembly();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Xunit.Internal.ArgumentFormatter : object {
    internal static string EllipsisInBrackets;
    public static int MAX_DEPTH;
    public static int MAX_ENUMERABLE_LENGTH;
    public static int MAX_OBJECT_ITEM_COUNT;
    public static int MAX_STRING_LENGTH;
    private static Object[] EmptyObjects;
    private static Type[] EmptyTypes;
    [NullableAttribute("2")]
private static PropertyInfo tupleIndexer;
    [NullableAttribute("2")]
private static Type tupleInterfaceType;
    [NullableAttribute("2")]
private static PropertyInfo tupleLength;
    private static Dictionary`2<TypeInfo, string> TypeMappings;
    [CompilerGeneratedAttribute]
private static string <Ellipsis>k__BackingField;
    public static string Ellipsis { get; }
    private static ArgumentFormatter();
    [CompilerGeneratedAttribute]
public static string get_Ellipsis();
    public static string EscapeString(string s);
    public static string Format(object value, int depth);
    private static string FormatCharValue(char value);
    private static string FormatComplexValue(object value, int depth, Type type, bool isAnonymousType);
    private static string FormatDateTimeValue(object value);
    private static string FormatDoubleValue(object value);
    private static string FormatEnumValue(object value);
    private static string FormatEnumerableValue(IEnumerable enumerable, int depth);
    private static string FormatFloatValue(object value);
    private static string FormatStringValue(string value);
    private static string FormatTupleValue(object tupleParameter, int depth);
    public static string FormatTypeName(Type type, bool fullTypeName);
    private static string FormatValueTypeValue(object value, TypeInfo typeInfo);
    [NullableContextAttribute("2")]
internal static Type GetSetElementType(object obj);
    [ExtensionAttribute]
private static bool IsAnonymousType(TypeInfo typeInfo);
    [ExtensionAttribute]
private static bool IsSZArrayType(TypeInfo typeInfo);
    [NullableContextAttribute("2")]
private static bool SafeToMultiEnumerate(IEnumerable collection);
    [NullableContextAttribute("2")]
private static bool TryGetEscapeSequence(char ch, String& value);
    [NullableContextAttribute("2")]
internal static Exception UnwrapException(Exception ex);
    private static string WrapAndGetFormattedValue(Func`1<object> getter, int depth);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Xunit.Internal.AssemblyExtensions : object {
    [NullableAttribute("1")]
public static string UnknownTargetFramework;
    [ExtensionAttribute]
public static string GetLocalCodeBase(Assembly assembly);
    public static string GetLocalCodeBase(string codeBase, char directorySeparator);
    [ExtensionAttribute]
public static string GetSafeCodeBase(Assembly assembly);
    [ExtensionAttribute]
public static string GetSafeLocation(Assembly assembly);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static string GetTargetFramework(Assembly assembly);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Xunit.Internal.DictionaryExtensions : object {
    [ExtensionAttribute]
public static void Add(Dictionary`2<TKey, HashSet`1<TValue>> dictionary, TKey key, TValue value);
    [ExtensionAttribute]
public static TValue AddOrGet(Dictionary`2<TKey, TValue> dictionary, TKey key);
    [ExtensionAttribute]
public static TValue AddOrGet(Dictionary`2<TKey, TValue> dictionary, TKey key, Func`1<TValue> newValue);
    [ExtensionAttribute]
public static void AddRange(HashSet`1<T> hashSet, IEnumerable`1<T> values);
    [ExtensionAttribute]
public static bool Contains(IReadOnlyDictionary`2<TKey, IReadOnlyCollection`1<TValue>> dictionary, TKey key, TValue value, IEqualityComparer`1<TValue> valueComparer);
    [ExtensionAttribute]
public static IReadOnlyDictionary`2<TKey, IReadOnlyCollection`1<TValue>> ToReadOnly(Dictionary`2<TKey, HashSet`1<TValue>> dictionary);
    [ExtensionAttribute]
public static IReadOnlyDictionary`2<TKey, IReadOnlyCollection`1<TValue>> ToReadOnly(Dictionary`2<TKey, List`1<TValue>> dictionary);
    [ExtensionAttribute]
public static Dictionary`2<TKey, HashSet`1<TValue>> ToReadWrite(IReadOnlyDictionary`2<TKey, IReadOnlyCollection`1<TValue>> dictionary, IEqualityComparer`1<TKey> comparer);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Xunit.Internal.EnumerableExtensions : object {
    [NullableAttribute("1")]
private static Func`2<object, bool> notNullTest;
    private static EnumerableExtensions();
    [ExtensionAttribute]
public static T[] CastOrToArray(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static List`1<T> CastOrToList(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static IReadOnlyCollection`1<T> CastOrToReadOnlyCollection(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static IReadOnlyList`1<T> CastOrToReadOnlyList(IEnumerable`1<T> source);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IEnumerable`1<T> WhereNotNull(IEnumerable`1<T> source);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static IEnumerable`1<T> WhereNotNull(IEnumerable`1<Nullable`1<T>> source);
}
[ExtensionAttribute]
public static class Xunit.Internal.ExceptionExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static Exception Unwrap(Exception ex);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Xunit.Internal.Guard : object {
    public static T ArgumentEnumValid(T argValue, HashSet`1<T> validValues, string argName);
    [NullableContextAttribute("0")]
public static T ArgumentNotNull(Nullable`1<T> argValue, string argName);
    public static T ArgumentNotNull(T argValue, string argName);
    public static T ArgumentNotNull(string message, T argValue, string argName);
    public static T ArgumentNotNull(Func`1<string> messageFunc, T argValue, string argName);
    public static T ArgumentNotNullOrEmpty(T argValue, string argName);
    public static T ArgumentNotNullOrEmpty(string message, T argValue, string argName);
    public static T ArgumentNotNullOrEmpty(Func`1<string> messageFunc, T argValue, string argName);
    public static void ArgumentValid(string message, bool test, string argName);
    public static void ArgumentValid(Func`1<string> messageFunc, bool test, string argName);
    [NullableContextAttribute("2")]
public static string FileExists(string fileName, string argName);
    [NullableContextAttribute("2")]
public static T GenericArgumentNotNull(T argValue, string argName);
    public static T NotNull(string message, T value);
    public static T NotNull(Func`1<string> messageFunc, T value);
    [NullableContextAttribute("0")]
public static T NotNull(string message, Nullable`1<T> value);
    [NullableContextAttribute("0")]
public static T NotNull(Func`1<string> messageFunc, Nullable`1<T> value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Xunit.Internal.ObjectExtensions : object {
    private static MethodInfo awaitTaskMethod;
    private static MethodInfo awaitValueTaskMethod;
    private static ObjectExtensions();
    [ExtensionAttribute]
public static Nullable`1<ValueTask`1<object>> AsValueTask(object value);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Xunit.Internal.ObjectExtensions/<AwaitTask>d__3`1")]
private static ValueTask`1<object> AwaitTask(Task`1<T> task);
    [AsyncStateMachineAttribute("Xunit.Internal.ObjectExtensions/<AwaitValueTask>d__4`1")]
private static ValueTask`1<object> AwaitValueTask(ValueTask`1<T> task);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static T ValidateNullablePropertyValue(object object, T value, string propertyName);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static T ValidateNullablePropertyValue(object object, Nullable`1<T> value, string propertyName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Xunit.Internal.StringExtensions : object {
    [ExtensionAttribute]
public static string Quoted(string value);
    [ExtensionAttribute]
public static string QuotedWithTrim(string value, int maxLength);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Xunit.Sdk.AsyncUtility : object {
    [NullableAttribute("2")]
private static MethodInfo fSharpStartAsTaskOpenGenericMethod;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static HashSet`1<string> taskGenericTypes;
    private static AsyncUtility();
    public static bool IsAsync(MethodInfo method);
    public static bool IsAsyncVoid(MethodInfo method);
    [NullableContextAttribute("2")]
public static Nullable`1<ValueTask> TryConvertToValueTask(object obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Sdk.DisposalTracker : object {
    private bool disposed;
    private Stack`1<object> trackedObjects;
    public IReadOnlyCollection`1<object> TrackedObjects { get; }
    public IReadOnlyCollection`1<object> get_TrackedObjects();
    [NullableContextAttribute("2")]
public void Add(object object);
    public void AddAction(Action cleanupAction);
    public void AddAsyncAction(Func`1<ValueTask> cleanupAction);
    [NullableContextAttribute("2")]
private void AddInternal(object object);
    public void AddRange(IEnumerable`1<object> collection);
    public void Clear();
    [AsyncStateMachineAttribute("Xunit.Sdk.DisposalTracker/<DisposeAsync>d__10")]
public sealed virtual ValueTask DisposeAsync();
    private void GuardNotDisposed();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Xunit.Sdk.ExceptionUtility : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ConcurrentDictionary`2<Type, MethodInfo> innerExceptionsPropertyByType;
    private static ExceptionUtility();
    public static string CombineMessages(IErrorMetadata errorMetadata);
    public static string CombineStackTraces(IErrorMetadata errorMetadata);
    public static ValueTuple`5<String[], String[], String[], Int32[], FailureCause> ExtractMetadata(Exception ex);
    private static void ExtractMetadata(Exception ex, int parentIndex, List`1<string> exceptionTypes, List`1<string> messages, List`1<string> stackTraces, List`1<int> indices);
    private static IEnumerable`1<Exception> GetInnerExceptions(Exception ex);
    private static bool FilterStackFrame(string stackFrame);
    [NullableContextAttribute("2")]
private static string FilterStackTrace(string stack);
    private static string GetAt(String[] values, int index);
    [NullableContextAttribute("2")]
private static int GetAt(Int32[] values, int index);
    private static string GetMessage(IErrorMetadata errorMetadata, int index, int level);
    private static string GetNamespace(string exceptionType);
    private static string GetStackTrace(IErrorMetadata errorMetadata, int index);
}
public enum Xunit.Sdk.ExplicitOption : Enum {
    public int value__;
    public static ExplicitOption Off;
    public static ExplicitOption On;
    public static ExplicitOption Only;
}
public enum Xunit.Sdk.FailureCause : Enum {
    public int value__;
    public static FailureCause Unknown;
    public static FailureCause Other;
    public static FailureCause Exception;
    public static FailureCause Assertion;
    public static FailureCause Timeout;
}
public interface Xunit.Sdk.IAfterTestFinished {
    [NullableAttribute("1")]
public string AttributeName { get; }
    [NullableContextAttribute("1")]
public abstract virtual string get_AttributeName();
}
public interface Xunit.Sdk.IAfterTestStarting {
    [NullableAttribute("1")]
public string AttributeName { get; }
    [NullableContextAttribute("1")]
public abstract virtual string get_AttributeName();
}
[NullableContextAttribute("1")]
public interface Xunit.Sdk.IAssemblyMetadata {
    public string AssemblyName { get; }
    public string AssemblyPath { get; }
    [NullableAttribute("2")]
public string ConfigFilePath { get; }
    public IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> Traits { get; }
    public string UniqueID { get; }
    public abstract virtual string get_AssemblyName();
    public abstract virtual string get_AssemblyPath();
    [NullableContextAttribute("2")]
public abstract virtual string get_ConfigFilePath();
    public abstract virtual IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> get_Traits();
    public abstract virtual string get_UniqueID();
}
[ExtensionAttribute]
public static class Xunit.Sdk.IAssemblyMetadataExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static string SimpleAssemblyName(IAssemblyMetadata assemblyMetadata);
}
public interface Xunit.Sdk.IBeforeTestFinished {
    [NullableAttribute("1")]
public string AttributeName { get; }
    [NullableContextAttribute("1")]
public abstract virtual string get_AttributeName();
}
public interface Xunit.Sdk.IBeforeTestStarting {
    [NullableAttribute("1")]
public string AttributeName { get; }
    [NullableContextAttribute("1")]
public abstract virtual string get_AttributeName();
}
public interface Xunit.Sdk.IDiagnosticMessage {
    [NullableAttribute("1")]
public string Message { get; }
    [NullableContextAttribute("1")]
public abstract virtual string get_Message();
}
public interface Xunit.Sdk.IDiscoveryComplete {
    public int TestCasesToRun { get; }
    public abstract virtual int get_TestCasesToRun();
}
[NullableContextAttribute("1")]
public interface Xunit.Sdk.IDiscoveryStarting {
    public string AssemblyName { get; }
    public string AssemblyPath { get; }
    [NullableAttribute("2")]
public string ConfigFilePath { get; }
    public abstract virtual string get_AssemblyName();
    public abstract virtual string get_AssemblyPath();
    [NullableContextAttribute("2")]
public abstract virtual string get_ConfigFilePath();
}
public interface Xunit.Sdk.IErrorMessage {
}
[NullableContextAttribute("1")]
public interface Xunit.Sdk.IErrorMetadata {
    public Int32[] ExceptionParentIndices { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] ExceptionTypes { get; }
    public String[] Messages { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] StackTraces { get; }
    public abstract virtual Int32[] get_ExceptionParentIndices();
    public abstract virtual String[] get_ExceptionTypes();
    public abstract virtual String[] get_Messages();
    public abstract virtual String[] get_StackTraces();
}
[NullableContextAttribute("1")]
public interface Xunit.Sdk.IExecutionMetadata {
    public decimal ExecutionTime { get; }
    public string Output { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] Warnings { get; }
    public abstract virtual decimal get_ExecutionTime();
    public abstract virtual string get_Output();
    public abstract virtual String[] get_Warnings();
}
public interface Xunit.Sdk.IExecutionSummaryMetadata {
    public decimal ExecutionTime { get; }
    public int TestsFailed { get; }
    public int TestsNotRun { get; }
    public int TestsSkipped { get; }
    public int TestsTotal { get; }
    public abstract virtual decimal get_ExecutionTime();
    public abstract virtual int get_TestsFailed();
    public abstract virtual int get_TestsNotRun();
    public abstract virtual int get_TestsSkipped();
    public abstract virtual int get_TestsTotal();
}
public interface Xunit.Sdk.IInternalDiagnosticMessage {
    [NullableAttribute("1")]
public string Message { get; }
    [NullableContextAttribute("1")]
public abstract virtual string get_Message();
}
public interface Xunit.Sdk.IJsonDeserializable {
    public abstract virtual void FromJson(IReadOnlyDictionary`2<string, object> root);
}
[NullableContextAttribute("1")]
public interface Xunit.Sdk.IJsonSerializable {
    public abstract virtual string ToJson();
}
[NullableContextAttribute("1")]
public interface Xunit.Sdk.IMessageSink {
    public abstract virtual bool OnMessage(IMessageSinkMessage message);
}
public interface Xunit.Sdk.IMessageSinkMessage {
}
[NullableContextAttribute("1")]
public interface Xunit.Sdk.ITest {
    public ITestCase TestCase { get; }
    public abstract virtual ITestCase get_TestCase();
}
public interface Xunit.Sdk.ITestAssembly {
    public Guid ModuleVersionID { get; }
    public abstract virtual Guid get_ModuleVersionID();
}
public interface Xunit.Sdk.ITestAssemblyCleanupFailure {
}
public interface Xunit.Sdk.ITestAssemblyFinished {
    public DateTimeOffset FinishTime { get; }
    public abstract virtual DateTimeOffset get_FinishTime();
}
public interface Xunit.Sdk.ITestAssemblyMessage {
    [NullableAttribute("1")]
public string AssemblyUniqueID { get; }
    [NullableContextAttribute("1")]
public abstract virtual string get_AssemblyUniqueID();
}
public interface Xunit.Sdk.ITestAssemblyStarting {
    public Nullable`1<int> Seed { get; }
    public DateTimeOffset StartTime { get; }
    [NullableAttribute("2")]
public string TargetFramework { get; }
    [NullableAttribute("1")]
public string TestEnvironment { get; }
    [NullableAttribute("1")]
public string TestFrameworkDisplayName { get; }
    public abstract virtual Nullable`1<int> get_Seed();
    public abstract virtual DateTimeOffset get_StartTime();
    [NullableContextAttribute("2")]
public abstract virtual string get_TargetFramework();
    [NullableContextAttribute("1")]
public abstract virtual string get_TestEnvironment();
    [NullableContextAttribute("1")]
public abstract virtual string get_TestFrameworkDisplayName();
}
[NullableContextAttribute("2")]
public interface Xunit.Sdk.ITestCase {
    [NotNullIfNotNullAttribute("TestMethod")]
public ITestClass TestClass { get; }
    [NullableAttribute("1")]
public ITestCollection TestCollection { get; }
    public ITestMethod TestMethod { get; }
    public abstract virtual ITestClass get_TestClass();
    [NullableContextAttribute("1")]
public abstract virtual ITestCollection get_TestCollection();
    public abstract virtual ITestMethod get_TestMethod();
}
public interface Xunit.Sdk.ITestCaseCleanupFailure {
}
public interface Xunit.Sdk.ITestCaseDiscovered {
    [NullableAttribute("1")]
public string Serialization { get; }
    [NullableContextAttribute("1")]
public abstract virtual string get_Serialization();
}
public interface Xunit.Sdk.ITestCaseFinished {
}
public interface Xunit.Sdk.ITestCaseMessage {
    [NullableAttribute("1")]
public string TestCaseUniqueID { get; }
    [NullableContextAttribute("1")]
public abstract virtual string get_TestCaseUniqueID();
}
[NullableContextAttribute("2")]
public interface Xunit.Sdk.ITestCaseMetadata {
    public string SkipReason { get; }
    public string SourceFilePath { get; }
    public Nullable`1<int> SourceLineNumber { get; }
    [NullableAttribute("1")]
public string TestCaseDisplayName { get; }
    public Nullable`1<int> TestClassMetadataToken { get; }
    [NotNullIfNotNullAttribute("TestMethodName")]
public string TestClassName { get; }
    public string TestClassNamespace { get; }
    public Nullable`1<int> TestMethodMetadataToken { get; }
    public string TestMethodName { get; }
    [NullableAttribute("1")]
public IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> Traits { get; }
    [NullableAttribute("1")]
public string UniqueID { get; }
    public abstract virtual string get_SkipReason();
    public abstract virtual string get_SourceFilePath();
    public abstract virtual Nullable`1<int> get_SourceLineNumber();
    [NullableContextAttribute("1")]
public abstract virtual string get_TestCaseDisplayName();
    public abstract virtual Nullable`1<int> get_TestClassMetadataToken();
    public abstract virtual string get_TestClassName();
    public abstract virtual string get_TestClassNamespace();
    public abstract virtual Nullable`1<int> get_TestMethodMetadataToken();
    public abstract virtual string get_TestMethodName();
    [NullableContextAttribute("1")]
public abstract virtual IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> get_Traits();
    [NullableContextAttribute("1")]
public abstract virtual string get_UniqueID();
}
public interface Xunit.Sdk.ITestCaseStarting {
}
[NullableContextAttribute("1")]
public interface Xunit.Sdk.ITestClass {
    public ITestCollection TestCollection { get; }
    public abstract virtual ITestCollection get_TestCollection();
}
public interface Xunit.Sdk.ITestClassCleanupFailure {
}
public interface Xunit.Sdk.ITestClassConstructionFinished {
}
public interface Xunit.Sdk.ITestClassConstructionStarting {
}
public interface Xunit.Sdk.ITestClassDisposeFinished {
}
public interface Xunit.Sdk.ITestClassDisposeStarting {
}
public interface Xunit.Sdk.ITestClassFinished {
}
public interface Xunit.Sdk.ITestClassMessage {
    [NullableAttribute("2")]
public string TestClassUniqueID { get; }
    [NullableContextAttribute("2")]
public abstract virtual string get_TestClassUniqueID();
}
[NullableContextAttribute("1")]
public interface Xunit.Sdk.ITestClassMetadata {
    public string TestClassName { get; }
    [NullableAttribute("2")]
public string TestClassNamespace { get; }
    public IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> Traits { get; }
    public string UniqueID { get; }
    public abstract virtual string get_TestClassName();
    [NullableContextAttribute("2")]
public abstract virtual string get_TestClassNamespace();
    public abstract virtual IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> get_Traits();
    public abstract virtual string get_UniqueID();
}
public interface Xunit.Sdk.ITestClassStarting {
}
public interface Xunit.Sdk.ITestCleanupFailure {
}
[NullableContextAttribute("1")]
public interface Xunit.Sdk.ITestCollection {
    public ITestAssembly TestAssembly { get; }
    public abstract virtual ITestAssembly get_TestAssembly();
}
public interface Xunit.Sdk.ITestCollectionCleanupFailure {
}
public interface Xunit.Sdk.ITestCollectionFinished {
}
public interface Xunit.Sdk.ITestCollectionMessage {
    [NullableAttribute("1")]
public string TestCollectionUniqueID { get; }
    [NullableContextAttribute("1")]
public abstract virtual string get_TestCollectionUniqueID();
}
[NullableContextAttribute("1")]
public interface Xunit.Sdk.ITestCollectionMetadata {
    [NullableAttribute("2")]
public string TestCollectionClassName { get; }
    public string TestCollectionDisplayName { get; }
    public IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> Traits { get; }
    public string UniqueID { get; }
    [NullableContextAttribute("2")]
public abstract virtual string get_TestCollectionClassName();
    public abstract virtual string get_TestCollectionDisplayName();
    public abstract virtual IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> get_Traits();
    public abstract virtual string get_UniqueID();
}
public interface Xunit.Sdk.ITestCollectionStarting {
}
public interface Xunit.Sdk.ITestFailed {
    public FailureCause Cause { get; }
    public abstract virtual FailureCause get_Cause();
}
public interface Xunit.Sdk.ITestFinished {
    [NullableAttribute("1")]
public IReadOnlyDictionary`2<string, TestAttachment> Attachments { get; }
    [NullableContextAttribute("1")]
public abstract virtual IReadOnlyDictionary`2<string, TestAttachment> get_Attachments();
}
public interface Xunit.Sdk.ITestFrameworkDiscoveryOptions {
}
public interface Xunit.Sdk.ITestFrameworkExecutionOptions {
}
[NullableContextAttribute("1")]
public interface Xunit.Sdk.ITestFrameworkOptions {
    [NullableContextAttribute("2")]
public abstract virtual TValue GetValue(string name);
    public abstract virtual void SetValue(string name, TValue value);
    public abstract virtual string ToJson();
}
public interface Xunit.Sdk.ITestMessage {
    [NullableAttribute("1")]
public string TestUniqueID { get; }
    [NullableContextAttribute("1")]
public abstract virtual string get_TestUniqueID();
}
[NullableContextAttribute("1")]
public interface Xunit.Sdk.ITestMetadata {
    public string TestDisplayName { get; }
    public IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> Traits { get; }
    public string UniqueID { get; }
    public abstract virtual string get_TestDisplayName();
    public abstract virtual IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> get_Traits();
    public abstract virtual string get_UniqueID();
}
[NullableContextAttribute("1")]
public interface Xunit.Sdk.ITestMethod {
    public ITestClass TestClass { get; }
    public abstract virtual ITestClass get_TestClass();
}
public interface Xunit.Sdk.ITestMethodCleanupFailure {
}
public interface Xunit.Sdk.ITestMethodFinished {
}
public interface Xunit.Sdk.ITestMethodMessage {
    [NullableAttribute("2")]
public string TestMethodUniqueID { get; }
    [NullableContextAttribute("2")]
public abstract virtual string get_TestMethodUniqueID();
}
[NullableContextAttribute("1")]
public interface Xunit.Sdk.ITestMethodMetadata {
    public string MethodName { get; }
    public IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> Traits { get; }
    public string UniqueID { get; }
    public abstract virtual string get_MethodName();
    public abstract virtual IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> get_Traits();
    public abstract virtual string get_UniqueID();
}
public interface Xunit.Sdk.ITestMethodStarting {
}
public interface Xunit.Sdk.ITestNotRun {
}
public interface Xunit.Sdk.ITestOutput {
    [NullableAttribute("1")]
public string Output { get; }
    [NullableContextAttribute("1")]
public abstract virtual string get_Output();
}
public interface Xunit.Sdk.ITestPassed {
}
public interface Xunit.Sdk.ITestResultMessage {
    public DateTimeOffset FinishTime { get; }
    public abstract virtual DateTimeOffset get_FinishTime();
}
public interface Xunit.Sdk.ITestSkipped {
    [NullableAttribute("1")]
public string Reason { get; }
    [NullableContextAttribute("1")]
public abstract virtual string get_Reason();
}
public interface Xunit.Sdk.ITestStarting {
    public bool Explicit { get; }
    public DateTimeOffset StartTime { get; }
    public int Timeout { get; }
    public abstract virtual bool get_Explicit();
    public abstract virtual DateTimeOffset get_StartTime();
    public abstract virtual int get_Timeout();
}
[NullableContextAttribute("1")]
public interface Xunit.Sdk.IXunitSerializable {
    public abstract virtual void Deserialize(IXunitSerializationInfo info);
    public abstract virtual void Serialize(IXunitSerializationInfo info);
}
[NullableContextAttribute("1")]
public interface Xunit.Sdk.IXunitSerializationInfo {
    [NullableContextAttribute("2")]
public abstract virtual void AddValue(string key, object value, Type valueType);
    public abstract virtual object GetValue(string key);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Sdk.JsonArraySerializer : JsonSerializerBase {
    private bool openChild;
    public JsonArraySerializer(StringBuilder buffer, Action disposeNotifier);
    private void GuardNoOpenChild();
    public void Serialize(Nullable`1<bool> value);
    public void Serialize(Nullable`1<DateTimeOffset> value);
    public void Serialize(Nullable`1<decimal> value);
    [NullableContextAttribute("2")]
public void Serialize(Enum value);
    public void Serialize(Nullable`1<int> value);
    public void Serialize(Nullable`1<long> value);
    public void Serialize(IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> dictionary);
    [NullableContextAttribute("2")]
public void Serialize(string value);
    public JsonArraySerializer SerializeArray();
    public JsonObjectSerializer SerializeObject();
    [CompilerGeneratedAttribute]
private void <SerializeArray>b__11_0();
    [CompilerGeneratedAttribute]
private void <SerializeObject>b__12_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Xunit.Sdk.JsonDeserializer : object {
    private static HashSet`1<char> charsBoolean;
    private static HashSet`1<char> charsNull;
    private static HashSet`1<char> charsNumber;
    private static HashSet`1<char> charsWhiteSpace;
    private static IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> emptyTraits;
    private static Dictionary`2<char, char> escapesString;
    private static JsonDeserializer();
    private static string RetrieveToken(string json, HashSet`1<char> chars, Int32& idx);
    private static void SkipWhiteSpace(string json, Int32& idx);
    public static bool TryDeserialize(string json, Object& result);
    private static bool TryDeserialize(string json, Int32& idx, Object& result);
    private static bool TryDeserializeArray(string json, Int32& idx, Object& result);
    private static bool TryDeserializeBoolean(string json, Int32& idx, Object& result);
    private static bool TryDeserializeNull(string json, Int32& idx);
    private static bool TryDeserializeNumber(string json, Int32& idx, Object& result);
    private static bool TryDeserializeObject(string json, Int32& idx, Object& result);
    private static bool TryDeserializeString(string json, Int32& idx, Object& result);
    [NullableContextAttribute("2")]
private static T[] TryConvertArray(Object[] array, Func`2<object, ValueTuple`2<bool, T>> converter);
    public static Object[] TryGetArray(IReadOnlyDictionary`2<string, object> obj, string key);
    [NullableContextAttribute("2")]
public static Object[] TryGetArray(object value);
    public static Boolean[] TryGetArrayOfBoolean(IReadOnlyDictionary`2<string, object> obj, string key);
    [NullableContextAttribute("2")]
public static Boolean[] TryGetArrayOfBoolean(object value);
    public static DateTimeOffset[] TryGetArrayOfDateTimeOffset(IReadOnlyDictionary`2<string, object> obj, string key);
    [NullableContextAttribute("2")]
public static DateTimeOffset[] TryGetArrayOfDateTimeOffset(object value);
    public static Decimal[] TryGetArrayOfDecimal(IReadOnlyDictionary`2<string, object> obj, string key);
    [NullableContextAttribute("2")]
public static Decimal[] TryGetArrayOfDecimal(object value);
    public static TEnum[] TryGetArrayOfEnum(IReadOnlyDictionary`2<string, object> obj, string key);
    [NullableContextAttribute("0")]
public static TEnum[] TryGetArrayOfEnum(object value);
    public static Int32[] TryGetArrayOfInt(IReadOnlyDictionary`2<string, object> obj, string key);
    [NullableContextAttribute("2")]
public static Int32[] TryGetArrayOfInt(object value);
    public static Int64[] TryGetArrayOfLong(IReadOnlyDictionary`2<string, object> obj, string key);
    [NullableContextAttribute("2")]
public static Int64[] TryGetArrayOfLong(object value);
    public static String[] TryGetArrayOfNullableString(IReadOnlyDictionary`2<string, object> obj, string key);
    [NullableContextAttribute("2")]
public static String[] TryGetArrayOfNullableString(object value);
    public static String[] TryGetArrayOfString(IReadOnlyDictionary`2<string, object> obj, string key);
    [NullableContextAttribute("2")]
public static String[] TryGetArrayOfString(object value);
    public static Nullable`1<bool> TryGetBoolean(IReadOnlyDictionary`2<string, object> obj, string key);
    [NullableContextAttribute("2")]
public static Nullable`1<bool> TryGetBoolean(object value);
    public static Nullable`1<DateTimeOffset> TryGetDateTimeOffset(IReadOnlyDictionary`2<string, object> obj, string key);
    [NullableContextAttribute("2")]
public static Nullable`1<DateTimeOffset> TryGetDateTimeOffset(object value);
    public static Nullable`1<decimal> TryGetDecimal(IReadOnlyDictionary`2<string, object> obj, string key);
    [NullableContextAttribute("2")]
public static Nullable`1<decimal> TryGetDecimal(object value);
    [NullableContextAttribute("0")]
public static Nullable`1<TEnum> TryGetEnum(IReadOnlyDictionary`2<string, object> obj, string key);
    [NullableContextAttribute("0")]
public static Nullable`1<TEnum> TryGetEnum(object value);
    public static Nullable`1<int> TryGetInt(IReadOnlyDictionary`2<string, object> obj, string key);
    [NullableContextAttribute("2")]
public static Nullable`1<int> TryGetInt(object value);
    public static Nullable`1<long> TryGetLong(IReadOnlyDictionary`2<string, object> obj, string key);
    [NullableContextAttribute("2")]
public static Nullable`1<long> TryGetLong(object value);
    public static IReadOnlyDictionary`2<string, object> TryGetObject(IReadOnlyDictionary`2<string, object> obj, string key);
    [NullableContextAttribute("2")]
public static IReadOnlyDictionary`2<string, object> TryGetObject(object value);
    public static string TryGetString(IReadOnlyDictionary`2<string, object> obj, string key, bool defaultEmptyString);
    [NullableContextAttribute("2")]
public static string TryGetString(object value, bool defaultEmptyString);
    public static IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> TryGetTraits(IReadOnlyDictionary`2<string, object> obj, string key, bool defaultEmptyDictionary);
    [NullableContextAttribute("2")]
public static IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> TryGetTraits(object value);
    private static bool TryParseCollection(char closing, string json, Int32& idx, Func`2<int, ValueTuple`2<bool, int>> elementParser);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Sdk.JsonObjectSerializer : JsonSerializerBase {
    private bool openChild;
    public JsonObjectSerializer(StringBuilder buffer, Action disposeNotifier);
    private void GuardNoOpenChild();
    public void Serialize(string key, Nullable`1<bool> value, bool includeNullValues);
    public void Serialize(string key, Nullable`1<DateTimeOffset> value, bool includeNullValues);
    public void Serialize(string key, Nullable`1<decimal> value, bool includeNullValues);
    public void Serialize(string key, Enum value, bool includeNullValues);
    public void Serialize(string key, Nullable`1<int> value, bool includeNullValues);
    public void Serialize(string key, Nullable`1<long> value, bool includeNullValues);
    public void Serialize(string key, string value, bool includeNullValues, bool includeEmptyValues);
    public JsonArraySerializer SerializeArray(string key);
    public void SerializeNull(string key);
    public JsonObjectSerializer SerializeObject(string key);
    private void WriteKey(string key);
    [CompilerGeneratedAttribute]
private void <SerializeArray>b__10_0();
    [CompilerGeneratedAttribute]
private void <SerializeObject>b__12_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Xunit.Sdk.JsonSerializerBase : object {
    private Nullable`1<char> close;
    [NullableAttribute("2")]
private Action disposeNotifier;
    private bool writtenValue;
    [CompilerGeneratedAttribute]
private StringBuilder <Buffer>k__BackingField;
    protected StringBuilder Buffer { get; }
    protected JsonSerializerBase(StringBuilder buffer, Action disposeNotifier, Nullable`1<char> open, Nullable`1<char> close);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
protected StringBuilder get_Buffer();
    protected void WriteSeparator();
    protected void WriteValue(Nullable`1<bool> value);
    protected void WriteValue(Nullable`1<DateTimeOffset> value);
    protected void WriteValue(Nullable`1<decimal> value);
    [NullableContextAttribute("2")]
protected void WriteValue(Enum value);
    protected void WriteValue(Nullable`1<int> value);
    protected void WriteValue(Nullable`1<long> value);
    [NullableContextAttribute("2")]
protected void WriteValue(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Xunit.Sdk.JsonSerializerExtensions : object {
    [ExtensionAttribute]
public static void SerializeIntArray(JsonObjectSerializer serializer, string key, IEnumerable`1<int> values, bool includeNullArray);
    [ExtensionAttribute]
public static void SerializeStringArray(JsonObjectSerializer serializer, string key, IEnumerable`1<string> values, bool includeNullArray);
    [ExtensionAttribute]
public static void SerializeTraits(JsonObjectSerializer serializer, string key, IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> dictionary, bool includeEmptyTraits);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4")]
public class Xunit.Sdk.JsonTypeIDAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ID>k__BackingField;
    public string ID { get; }
    public JsonTypeIDAttribute(string id);
    [CompilerGeneratedAttribute]
public string get_ID();
}
public class Xunit.Sdk.NullMessageSink : object {
    [NullableAttribute("1")]
public static NullMessageSink Instance;
    private static NullMessageSink();
    [NullableContextAttribute("1")]
public sealed virtual bool OnMessage(IMessageSinkMessage message);
}
public enum Xunit.Sdk.ParallelAlgorithm : Enum {
    public int value__;
    public static ParallelAlgorithm Conservative;
    public static ParallelAlgorithm Aggressive;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Xunit.Sdk.Randomizer : object {
    private static int seed;
    [CompilerGeneratedAttribute]
private static Random <Current>k__BackingField;
    public static Random Current { get; private set; }
    public static int Seed { get; public set; }
    private static Randomizer();
    [CompilerGeneratedAttribute]
public static Random get_Current();
    [CompilerGeneratedAttribute]
private static void set_Current(Random value);
    public static int get_Seed();
    public static void set_Seed(int value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Xunit.Sdk.ReflectionExtensions : object {
    private static ConcurrentDictionary`2<Type, bool> isFromLocalAssemblyCache;
    private static ConcurrentDictionary`2<Type, bool> isNullableCache;
    private static ConcurrentDictionary`2<Type, bool> isNullableEnumCache;
    private static ReflectionExtensions();
    [IteratorStateMachineAttribute("Xunit.Sdk.ReflectionExtensions/<EnumerateTypeHierarchy>d__3")]
[ExtensionAttribute]
private static IEnumerable`1<Type> EnumerateTypeHierarchy(Type type);
    [ExtensionAttribute]
internal static IReadOnlyCollection`1<Attribute> FindCustomAttributes(IEnumerable`1<Attribute> attributes, Type attributeType);
    [ExtensionAttribute]
internal static IReadOnlyCollection`1<Attribute> FindCustomAttributes(IEnumerable`1<Attribute> attributes, string assemblyQualifiedTypeName);
    [ExtensionAttribute]
public static object GetDefaultValue(Type type);
    [ExtensionAttribute]
public static string GetDisplayNameWithArguments(MethodInfo method, string baseDisplayName, Object[] arguments, Type[] genericTypes);
    [ExtensionAttribute]
public static IReadOnlyCollection`1<Attribute> GetMatchingCustomAttributes(Assembly assembly, Type attributeType);
    [ExtensionAttribute]
public static IReadOnlyCollection`1<Attribute> GetMatchingCustomAttributes(Assembly assembly, string assemblyQualifiedTypeName);
    [ExtensionAttribute]
public static IReadOnlyCollection`1<Attribute> GetMatchingCustomAttributes(Attribute attribute, Type attributeType);
    [ExtensionAttribute]
public static IReadOnlyCollection`1<Attribute> GetMatchingCustomAttributes(Attribute attribute, string assemblyQualifiedTypeName);
    [ExtensionAttribute]
public static IReadOnlyCollection`1<Attribute> GetMatchingCustomAttributes(MethodInfo method, Type attributeType);
    [ExtensionAttribute]
public static IReadOnlyCollection`1<Attribute> GetMatchingCustomAttributes(MethodInfo method, string assemblyQualifiedTypeName);
    [ExtensionAttribute]
public static IReadOnlyCollection`1<Attribute> GetMatchingCustomAttributes(ParameterInfo parameter, Type attributeType);
    [ExtensionAttribute]
public static IReadOnlyCollection`1<Attribute> GetMatchingCustomAttributes(ParameterInfo parameter, string assemblyQualifiedTypeName);
    [ExtensionAttribute]
public static IReadOnlyCollection`1<Attribute> GetMatchingCustomAttributes(Type type, Type attributeType);
    [ExtensionAttribute]
public static IReadOnlyCollection`1<Attribute> GetMatchingCustomAttributes(Type type, string assemblyQualifiedTypeName);
    private static string GetParameterName(ParameterInfo[] parameters, int index);
    [ExtensionAttribute]
public static bool Implements(Type type, Type interfaceType);
    private static bool IsByRefLikeType(Type type);
    [ExtensionAttribute]
public static bool IsFromLocalAssembly(Type type);
    [ExtensionAttribute]
public static bool IsNullable(Type type);
    [ExtensionAttribute]
public static bool IsNullableEnum(Type type);
    private static string ParameterToDisplayValue(string parameterName, object parameterValue);
    private static object PerformDefinedConversions(object argumentValue, Type parameterType);
    private static string ResolveGenericDisplay(Type[] genericTypes);
    [ExtensionAttribute]
private static bool ResolveGenericParameter(Type genericType, Type parameterType, Type argumentType, Type& result);
    [ExtensionAttribute]
private static Type ResolveGenericType(Type genericType, ParameterInfo[] parameters, Object[] arguments);
    [ExtensionAttribute]
public static Type[] ResolveGenericTypes(MethodInfo method, Object[] arguments);
    [ExtensionAttribute]
private static bool ResolveMatchingElementType(Type genericType, Type parameterType, Type argumentType, Type& result);
    [ExtensionAttribute]
private static bool ResolveMatchingGenericArguments(Type genericType, Type parameterType, Type[] parameterGenericArgumentTypes, Type argumentType, Type& result);
    [ExtensionAttribute]
private static bool ResolveMatchingGenericType(Type genericType, Type parameterType, Type argumentType, Type& result);
    [ExtensionAttribute]
public static Object[] ResolveMethodArguments(MethodBase testMethod, Object[] arguments);
    [ExtensionAttribute]
public static string SafeName(Type type);
    [ExtensionAttribute]
public static string ToCommaSeparatedList(IEnumerable`1<Type> types, string nullDisplay);
    [ExtensionAttribute]
public static string ToSimpleTypeName(Type type);
    [NullableContextAttribute("2")]
private static object TryConvertObject(object argumentValue, Type parameterType);
    [ExtensionAttribute]
public static Type UnwrapNullable(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Xunit.Sdk.SerializationHelper : object {
    private static Char[] colonSeparator;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Dictionary`2<TypeIndex, Func`2<string, object>> deserializersByTypeIdx;
    private static Dictionary`2<Type, bool> enumSignsByType;
    private static Dictionary`2<TypeIndex, Func`3<object, Type, string>> serializersByTypeIdx;
    private static Dictionary`2<Type, TypeIndex> typeIndicesByType;
    private static Dictionary`2<TypeIndex, Type> typesByTypeIdx;
    private static TypeIndex TypeIndex_MinValue;
    private static TypeIndex TypeIndex_MaxValue;
    private static SerializationHelper();
    [NullableContextAttribute("2")]
public static T Deserialize(string serializedValue);
    public static object Deserialize(string serializedValue);
    private static Array DeserializeArray(Type elementType, string serializedArray);
    [NullableContextAttribute("2")]
private static T DeserializeEmbeddedTypeValue(string serializedValue, Func`3<Type, string, T> converter);
    private static object DeserializeEnum(string serializedValue);
    private static Dictionary`2<string, HashSet`1<string>> DeserializeTraits(string serializedValue);
    private static IXunitSerializable DeserializeXunitSerializable(string serializedValue);
    internal static string FromBase64(string serializedValue);
    [NullableContextAttribute("2")]
public static bool IsSerializable(object value);
    [NullableContextAttribute("2")]
public static bool IsSerializable(object value, Type type);
    [NullableContextAttribute("2")]
public static string Serialize(object value, Type type);
    private static string SerializeArray(Array array);
    private static string SerializeEmbeddedTypeValue(string value, Type type);
    private static string SerializeEnum(object value, Type type);
    private static string SerializeTraits(Dictionary`2<string, HashSet`1<string>> value);
    private static string SerializeXunitSerializable(IXunitSerializable value, Type type);
    public static Type SerializedTypeNameToType(string assemblyQualifiedTypeName);
    private static IList`1<string> SplitAtOuterCommas(string value, bool trimWhitespace);
    private static string SubstringTrim(string str, int startIndex, int length);
    public static string TypeToSerializedTypeName(Type value);
    internal static string ToBase64(string value);
    [CompilerGeneratedAttribute]
internal static string <.cctor>g__extractValue|6_0(string v);
    [CompilerGeneratedAttribute]
internal static DateTimeStyles <.cctor>g__getDateStyle|6_1(string v);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Sdk.TestAttachment : object {
    private static string BinaryHeader;
    private static string StringHeader;
    private static Regex MediaTypeRegex;
    [NullableAttribute("2")]
private Byte[] byteArrayValue;
    [NullableAttribute("2")]
private string mediaType;
    [NullableAttribute("2")]
private string stringValue;
    public TestAttachmentType AttachmentType { get; }
    private TestAttachment(Byte[] byteArrayValue, string mediaType);
    private TestAttachment(string stringValue);
    private static TestAttachment();
    public TestAttachmentType get_AttachmentType();
    public ValueTuple`2<Byte[], string> AsByteArray();
    public string AsString();
    public static TestAttachment Create(Byte[] value, string mediaType);
    public static TestAttachment Create(string value);
    public static TestAttachment Parse(string value);
    public virtual string ToString();
}
public enum Xunit.Sdk.TestAttachmentType : Enum {
    public int value__;
    public static TestAttachmentType String;
    public static TestAttachmentType ByteArray;
}
public enum Xunit.Sdk.TestMethodDisplay : Enum {
    public int value__;
    public static TestMethodDisplay ClassAndMethod;
    public static TestMethodDisplay Method;
}
[FlagsAttribute]
public enum Xunit.Sdk.TestMethodDisplayOptions : Enum {
    public int value__;
    public static TestMethodDisplayOptions None;
    public static TestMethodDisplayOptions ReplaceUnderscoreWithSpace;
    public static TestMethodDisplayOptions UseOperatorMonikers;
    public static TestMethodDisplayOptions UseEscapeSequences;
    public static TestMethodDisplayOptions ReplacePeriodWithComma;
    public static TestMethodDisplayOptions All;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Xunit.Sdk.TestOptionsNames : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Xunit.Sdk.TypeHelper : object {
    private static MethodInfo enumerableCast;
    private static MethodInfo enumerableToArray;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ConcurrentDictionary`2<string, Type> typeCache;
    private static TypeHelper();
    [NullableContextAttribute("2")]
public static object ConvertArgument(object arg, Type type);
    public static Object[] ConvertArguments(Object[] args, Type[] types);
    public static Array ConvertAttributeArgumentCollection(IReadOnlyCollection`1<CustomAttributeTypedArgument> collection, Type elementType);
    public static Type GetType(string assemblyQualifiedTypeName);
    public static Type GetTypeStrict(string assemblyQualifiedTypeName);
    public static Type GetType(string assemblyName, string typeName);
    private static IList`1<string> SplitAtOuterCommas(string value, bool trimWhitespace);
    private static string SubstringTrim(string str, int startIndex, int length);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Sdk.UniqueIDGenerator : object {
    private bool disposed;
    private HashAlgorithm hasher;
    private Stream stream;
    private object streamLock;
    public void Add(string value);
    public string Compute();
    public sealed virtual void Dispose();
    public static string ForAssembly(string assemblyPath, string configFilePath);
    public static string ForTest(string testCaseUniqueID, int testIndex);
    public static string ForTestCase(string parentUniqueID, Type[] testMethodGenericTypes, Object[] testMethodArguments);
    [NullableContextAttribute("2")]
public static string ForTestClass(string testCollectionUniqueID, string className);
    public static string ForTestCollection(string assemblyUniqueID, string collectionDisplayName, string collectionDefinitionClassName);
    [NullableContextAttribute("2")]
public static string ForTestMethod(string testClassUniqueID, string methodName);
    public static string ForType(Type type);
    private static char ToHexChar(int b);
    private static string ToHexString(Byte[] bytes);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Sdk.UnsetPropertiesException : InvalidOperationException {
    [CompilerGeneratedAttribute]
private String[] <PropertyNames>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    public string Message { get; }
    public String[] PropertyNames { get; }
    public string TypeName { get; }
    public UnsetPropertiesException(IEnumerable`1<string> propertyNames, Type type);
    public virtual string get_Message();
    [CompilerGeneratedAttribute]
public String[] get_PropertyNames();
    [CompilerGeneratedAttribute]
public string get_TypeName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Sdk.UnsetPropertyException : InvalidOperationException {
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    public string Message { get; }
    public string PropertyName { get; }
    public string TypeName { get; }
    public UnsetPropertyException(string propertyName, Type type);
    public virtual string get_Message();
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    [CompilerGeneratedAttribute]
public string get_TypeName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Sdk.XunitSerializationInfo : object {
    private static Char[] colonSeparator;
    private Dictionary`2<string, string> data;
    public XunitSerializationInfo(IXunitSerializable object);
    public XunitSerializationInfo(string serializedValue);
    private static XunitSerializationInfo();
    [NullableContextAttribute("2")]
public sealed virtual void AddValue(string key, object value, Type valueType);
    public sealed virtual object GetValue(string key);
    public string ToSerializedString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Xunit.Sdk.XunitSerializationInfoExtensions : object {
    [ExtensionAttribute]
public static void AddValue(IXunitSerializationInfo info, string key, T value);
    [ExtensionAttribute]
public static T GetValue(IXunitSerializationInfo info, string key);
}
