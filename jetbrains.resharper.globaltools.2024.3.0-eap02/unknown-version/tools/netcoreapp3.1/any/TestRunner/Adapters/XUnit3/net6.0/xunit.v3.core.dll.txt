[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.AllowNullAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.DisallowNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ParameterValue>k__BackingField;
    public bool ParameterValue { get; }
    public DoesNotReturnIfAttribute(bool parameterValue);
    [CompilerGeneratedAttribute]
public bool get_ParameterValue();
}
[AttributeUsageAttribute("749")]
internal class System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute : Attribute {
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public MaybeNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[AttributeUsageAttribute("10368")]
internal class System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public NotNullIfNotNullAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[AttributeUsageAttribute("32")]
internal class System.Diagnostics.CodeAnalysis.SetsRequiredMembersAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.StringSyntaxAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Syntax>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Object[] <Arguments>k__BackingField;
    public static string CompositeFormat;
    public static string DateOnlyFormat;
    public static string DateTimeFormat;
    public static string EnumFormat;
    public static string GuidFormat;
    public static string Json;
    public static string NumericFormat;
    public static string Regex;
    public static string TimeOnlyFormat;
    public static string TimeSpanFormat;
    public static string Uri;
    public static string Xml;
    public string Syntax { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Object[] Arguments { get; }
    public StringSyntaxAttribute(string syntax);
    public StringSyntaxAttribute(string syntax, Object[] arguments);
    [CompilerGeneratedAttribute]
public string get_Syntax();
    [CompilerGeneratedAttribute]
public Object[] get_Arguments();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("32767")]
internal class System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <FeatureName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsOptional>k__BackingField;
    public string FeatureName { get; }
    public bool IsOptional { get; public set; }
    public CompilerFeatureRequiredAttribute(string featureName);
    [CompilerGeneratedAttribute]
public string get_FeatureName();
    [CompilerGeneratedAttribute]
public bool get_IsOptional();
    [CompilerGeneratedAttribute]
public void set_IsOptional(bool value);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[AttributeUsageAttribute("396")]
internal class System.Runtime.CompilerServices.RequiredMemberAttribute : Attribute {
}
[GeneratedCodeAttribute("Nerdbank.GitVersioning.Tasks", "3.6.139.59561")]
[ExcludeFromCodeCoverageAttribute]
internal static class ThisAssembly : object {
    internal static string AssemblyConfiguration;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyVersion;
    internal static DateTime GitCommitDate;
    internal static string GitCommitId;
    internal static bool IsPrerelease;
    internal static bool IsPublicRelease;
    internal static string PublicKey;
    internal static string PublicKeyToken;
    internal static string RootNamespace;
    private static ThisAssembly();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("1")]
public class Xunit.AssemblyFixtureAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <AssemblyFixtureType>k__BackingField;
    public Type AssemblyFixtureType { get; }
    public AssemblyFixtureAttribute(Type assemblyFixtureType);
    [CompilerGeneratedAttribute]
public sealed virtual Type get_AssemblyFixtureType();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("64")]
public class Xunit.ClassDataAttribute : DataAttribute {
    [CompilerGeneratedAttribute]
private Type <Class>k__BackingField;
    public Type Class { get; }
    public ClassDataAttribute(Type class);
    [CompilerGeneratedAttribute]
public Type get_Class();
    protected virtual ITheoryDataRow ConvertDataRow(object dataRow);
    [AsyncStateMachineAttribute("Xunit.ClassDataAttribute/<GetData>d__5")]
public virtual ValueTask`1<IReadOnlyCollection`1<ITheoryDataRow>> GetData(DisposalTracker disposalTracker);
    public virtual bool SupportsDiscoveryEnumeration();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4")]
public class Xunit.CollectionAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    public string Name { get; }
    [NullableAttribute("2")]
public Type Type { get; }
    public CollectionAttribute(string name);
    public CollectionAttribute(Type type);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual Type get_Type();
    public static string GetCollectionNameForType(Type type);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4")]
public class Xunit.CollectionAttribute`1 : Attribute {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [NullableAttribute("1")]
public string Name { get; }
    public Type Type { get; }
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual Type get_Type();
}
public enum Xunit.CollectionBehavior : Enum {
    public int value__;
    public static CollectionBehavior CollectionPerAssembly;
    public static CollectionBehavior CollectionPerClass;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("1")]
public class Xunit.CollectionBehaviorAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <CollectionFactoryType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableTestParallelization>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxParallelThreads>k__BackingField;
    [CompilerGeneratedAttribute]
private ParallelAlgorithm <ParallelAlgorithm>k__BackingField;
    public Type CollectionFactoryType { get; }
    public bool DisableTestParallelization { get; public set; }
    public int MaxParallelThreads { get; public set; }
    public ParallelAlgorithm ParallelAlgorithm { get; public set; }
    public CollectionBehaviorAttribute(CollectionBehavior collectionBehavior);
    [NullableContextAttribute("1")]
public CollectionBehaviorAttribute(Type collectionFactoryType);
    [CompilerGeneratedAttribute]
public sealed virtual Type get_CollectionFactoryType();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_DisableTestParallelization();
    [CompilerGeneratedAttribute]
public void set_DisableTestParallelization(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_MaxParallelThreads();
    [CompilerGeneratedAttribute]
public void set_MaxParallelThreads(int value);
    [CompilerGeneratedAttribute]
public sealed virtual ParallelAlgorithm get_ParallelAlgorithm();
    [CompilerGeneratedAttribute]
public void set_ParallelAlgorithm(ParallelAlgorithm value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4")]
public class Xunit.CollectionDefinitionAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <DisableParallelization>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public bool DisableParallelization { get; public set; }
    public string Name { get; }
    [NullableContextAttribute("1")]
public CollectionDefinitionAttribute(string name);
    [CompilerGeneratedAttribute]
public bool get_DisableParallelization();
    [CompilerGeneratedAttribute]
public void set_DisableParallelization(bool value);
    [CompilerGeneratedAttribute]
public string get_Name();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[XunitTestCaseDiscovererAttribute("Xunit.v3.FactDiscoverer")]
[AttributeUsageAttribute("64")]
public class Xunit.FactAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Explicit>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Skip>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <SkipType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SkipUnless>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SkipWhen>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Timeout>k__BackingField;
    public string DisplayName { get; public set; }
    public bool Explicit { get; public set; }
    public string Skip { get; public set; }
    public Type SkipType { get; public set; }
    public string SkipUnless { get; public set; }
    public string SkipWhen { get; public set; }
    public int Timeout { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Explicit();
    [CompilerGeneratedAttribute]
public void set_Explicit(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Skip();
    [CompilerGeneratedAttribute]
public void set_Skip(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Type get_SkipType();
    [CompilerGeneratedAttribute]
public void set_SkipType(Type value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_SkipUnless();
    [CompilerGeneratedAttribute]
public void set_SkipUnless(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_SkipWhen();
    [CompilerGeneratedAttribute]
public void set_SkipWhen(string value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(int value);
}
public interface Xunit.IAsyncLifetime {
    public abstract virtual ValueTask InitializeAsync();
}
[NullableContextAttribute("1")]
public interface Xunit.IClassFixture`1 {
}
[NullableContextAttribute("1")]
public interface Xunit.ICollectionFixture`1 {
}
[AttributeUsageAttribute("64")]
public class Xunit.InlineDataAttribute : DataAttribute {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Object[] <Data>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Object[] Data { get; }
    public InlineDataAttribute(Object[] data);
    [CompilerGeneratedAttribute]
public Object[] get_Data();
    [NullableContextAttribute("1")]
public virtual ValueTask`1<IReadOnlyCollection`1<ITheoryDataRow>> GetData(DisposalTracker disposalTracker);
    public virtual bool SupportsDiscoveryEnumeration();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Internal.MessageBus : object {
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) continueRunning;
    private bool disposed;
    private IMessageSink messageSink;
    private ConcurrentQueue`1<IMessageSinkMessage> reporterQueue;
    private Thread reporterThread;
    private AutoResetEvent reporterWorkEvent;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) shutdownRequested;
    private bool stopOnFail;
    public MessageBus(IMessageSink messageSink, bool stopOnFail);
    private void DispatchMessages();
    public sealed virtual void Dispose();
    public sealed virtual bool QueueMessage(IMessageSinkMessage message);
    private void ReporterWorker();
}
public class Xunit.Internal.PreserveWorkingFolder : object {
    [NullableAttribute("1")]
private string originalWorkingFolder;
    [NullableContextAttribute("1")]
public PreserveWorkingFolder(ITestAssembly assembly);
    public sealed virtual void Dispose();
}
public class Xunit.Internal.SynchronousMessageBus : object {
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) continueRunning;
    [NullableAttribute("1")]
private IMessageSink messageSink;
    private bool stopOnFail;
    [NullableContextAttribute("1")]
public SynchronousMessageBus(IMessageSink messageSink, bool stopOnFail);
    public sealed virtual void Dispose();
    [NullableContextAttribute("1")]
public sealed virtual bool QueueMessage(IMessageSinkMessage message);
}
[NullableContextAttribute("1")]
public interface Xunit.ITestContextAccessor {
    public TestContext Current { get; }
    public abstract virtual TestContext get_Current();
}
[NullableContextAttribute("1")]
public interface Xunit.ITestOutputHelper {
    public string Output { get; }
    public abstract virtual string get_Output();
    public abstract virtual void WriteLine(string message);
    public abstract virtual void WriteLine(string format, Object[] args);
}
[NullableContextAttribute("2")]
public interface Xunit.ITheoryDataRow {
    public Nullable`1<bool> Explicit { get; }
    public string Skip { get; }
    public string TestDisplayName { get; }
    public Nullable`1<int> Timeout { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Dictionary`2<string, HashSet`1<string>> Traits { get; }
    public abstract virtual Nullable`1<bool> get_Explicit();
    public abstract virtual string get_Skip();
    public abstract virtual string get_TestDisplayName();
    public abstract virtual Nullable`1<int> get_Timeout();
    public abstract virtual Dictionary`2<string, HashSet`1<string>> get_Traits();
    public abstract virtual Object[] GetData();
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Xunit.MatrixTheoryData`2 : TheoryData`2<T1, T2> {
    [NullableContextAttribute("1")]
public MatrixTheoryData`2(IEnumerable`1<T1> dimension1, IEnumerable`1<T2> dimension2);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Xunit.MatrixTheoryData`3 : TheoryData`3<T1, T2, T3> {
    [NullableContextAttribute("1")]
public MatrixTheoryData`3(IEnumerable`1<T1> dimension1, IEnumerable`1<T2> dimension2, IEnumerable`1<T3> dimension3);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Xunit.MatrixTheoryData`4 : TheoryData`4<T1, T2, T3, T4> {
    [NullableContextAttribute("1")]
public MatrixTheoryData`4(IEnumerable`1<T1> dimension1, IEnumerable`1<T2> dimension2, IEnumerable`1<T3> dimension3, IEnumerable`1<T4> dimension4);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Xunit.MatrixTheoryData`5 : TheoryData`5<T1, T2, T3, T4, T5> {
    [NullableContextAttribute("1")]
public MatrixTheoryData`5(IEnumerable`1<T1> dimension1, IEnumerable`1<T2> dimension2, IEnumerable`1<T3> dimension3, IEnumerable`1<T4> dimension4, IEnumerable`1<T5> dimension5);
}
[AttributeUsageAttribute("64")]
public class Xunit.MemberDataAttribute : MemberDataAttributeBase {
    [NullableContextAttribute("1")]
public MemberDataAttribute(string memberName, Object[] arguments);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Xunit.Record : object {
    public static Exception Exception(Action testCode);
    [NullableContextAttribute("2")]
public static Exception Exception(Func`1<object> testCode);
    [EditorBrowsableAttribute("1")]
[DoesNotReturnAttribute]
[ObsoleteAttribute("You must call Record.ExceptionAsync (and await the result) when testing async code.", "True")]
public static Exception Exception(Func`1<Task> testCode);
    [EditorBrowsableAttribute("1")]
[DoesNotReturnAttribute]
[ObsoleteAttribute("You must call Record.ExceptionAsync (and await the result) when testing async code.", "True")]
public static Exception Exception(Func`1<ValueTask> testCode);
    [EditorBrowsableAttribute("1")]
[DoesNotReturnAttribute]
[ObsoleteAttribute("You must call Record.ExceptionAsync (and await the result) when testing async code.", "True")]
public static Exception Exception(Func`1<ValueTask`1<T>> testCode);
    [AsyncStateMachineAttribute("Xunit.Record/<ExceptionAsync>d__5")]
public static ValueTask`1<Exception> ExceptionAsync(Func`1<Task> testCode);
    [AsyncStateMachineAttribute("Xunit.Record/<ExceptionAsync>d__6")]
public static ValueTask`1<Exception> ExceptionAsync(Func`1<ValueTask> testCode);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("Xunit.Record/<ExceptionAsync>d__7`1")]
public static ValueTask`1<Exception> ExceptionAsync(Func`1<ValueTask`1<T>> testCode);
}
internal static class Xunit.Sdk.DynamicSkipToken : object {
    [NullableAttribute("1")]
public static string Value;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Xunit.Sdk.TestFrameworkOptionsReadExtensions : object {
    [ExtensionAttribute]
public static string Culture(ITestFrameworkDiscoveryOptions discoveryOptions);
    [ExtensionAttribute]
public static Nullable`1<bool> DiagnosticMessages(ITestFrameworkDiscoveryOptions discoveryOptions);
    [ExtensionAttribute]
public static bool DiagnosticMessagesOrDefault(ITestFrameworkDiscoveryOptions discoveryOptions);
    [ExtensionAttribute]
public static Nullable`1<bool> IncludeSourceInformation(ITestFrameworkDiscoveryOptions discoveryOptions);
    [ExtensionAttribute]
public static bool IncludeSourceInformationOrDefault(ITestFrameworkDiscoveryOptions discoveryOptions);
    [ExtensionAttribute]
public static Nullable`1<TestMethodDisplay> MethodDisplay(ITestFrameworkDiscoveryOptions discoveryOptions);
    [ExtensionAttribute]
public static TestMethodDisplay MethodDisplayOrDefault(ITestFrameworkDiscoveryOptions discoveryOptions);
    [ExtensionAttribute]
public static Nullable`1<TestMethodDisplayOptions> MethodDisplayOptions(ITestFrameworkDiscoveryOptions discoveryOptions);
    [ExtensionAttribute]
public static TestMethodDisplayOptions MethodDisplayOptionsOrDefault(ITestFrameworkDiscoveryOptions discoveryOptions);
    [ExtensionAttribute]
public static Nullable`1<bool> PreEnumerateTheories(ITestFrameworkDiscoveryOptions discoveryOptions);
    [ExtensionAttribute]
public static bool PreEnumerateTheoriesOrDefault(ITestFrameworkDiscoveryOptions discoveryOptions);
    [ExtensionAttribute]
public static Nullable`1<bool> SynchronousMessageReporting(ITestFrameworkDiscoveryOptions discoveryOptions);
    [ExtensionAttribute]
public static bool SynchronousMessageReportingOrDefault(ITestFrameworkDiscoveryOptions discoveryOptions);
    [ExtensionAttribute]
public static string Culture(ITestFrameworkExecutionOptions executionOptions);
    [ExtensionAttribute]
public static Nullable`1<bool> DiagnosticMessages(ITestFrameworkExecutionOptions executionOptions);
    [ExtensionAttribute]
public static bool DiagnosticMessagesOrDefault(ITestFrameworkExecutionOptions executionOptions);
    [ExtensionAttribute]
public static Nullable`1<bool> DisableParallelization(ITestFrameworkExecutionOptions executionOptions);
    [ExtensionAttribute]
public static bool DisableParallelizationOrDefault(ITestFrameworkExecutionOptions executionOptions);
    [ExtensionAttribute]
public static Nullable`1<ExplicitOption> ExplicitOption(ITestFrameworkExecutionOptions executionOptions);
    [ExtensionAttribute]
public static ExplicitOption ExplicitOptionOrDefault(ITestFrameworkExecutionOptions executionOptions);
    [ExtensionAttribute]
public static Nullable`1<bool> FailSkips(ITestFrameworkExecutionOptions executionOptions);
    [ExtensionAttribute]
public static bool FailSkipsOrDefault(ITestFrameworkExecutionOptions executionOptions);
    [ExtensionAttribute]
public static Nullable`1<bool> FailTestsWithWarnings(ITestFrameworkExecutionOptions executionOptions);
    [ExtensionAttribute]
public static bool FailTestsWithWarningsOrDefault(ITestFrameworkExecutionOptions executionOptions);
    [ExtensionAttribute]
public static Nullable`1<int> MaxParallelThreads(ITestFrameworkExecutionOptions executionOptions);
    [ExtensionAttribute]
public static int MaxParallelThreadsOrDefault(ITestFrameworkExecutionOptions executionOptions);
    [ExtensionAttribute]
public static Nullable`1<ParallelAlgorithm> ParallelAlgorithm(ITestFrameworkExecutionOptions executionOptions);
    [ExtensionAttribute]
public static ParallelAlgorithm ParallelAlgorithmOrDefault(ITestFrameworkExecutionOptions executionOptions);
    [ExtensionAttribute]
public static Nullable`1<int> Seed(ITestFrameworkExecutionOptions executionOptions);
    [ExtensionAttribute]
public static Nullable`1<bool> ShowLiveOutput(ITestFrameworkExecutionOptions executionOptions);
    [ExtensionAttribute]
public static bool ShowLiveOutputOrDefault(ITestFrameworkExecutionOptions executionOptions);
    [ExtensionAttribute]
public static Nullable`1<bool> StopOnTestFail(ITestFrameworkExecutionOptions executionOptions);
    [ExtensionAttribute]
public static bool StopOnTestFailOrDefault(ITestFrameworkExecutionOptions executionOptions);
    [ExtensionAttribute]
public static Nullable`1<bool> SynchronousMessageReporting(ITestFrameworkExecutionOptions executionOptions);
    [ExtensionAttribute]
public static bool SynchronousMessageReportingOrDefault(ITestFrameworkExecutionOptions executionOptions);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Sdk.TestPipelineException : Exception {
    public TestPipelineException(string message);
    public TestPipelineException(string message, Exception innerException);
    protected TestPipelineException(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.Sdk.TestTimeoutException : Exception {
    private TestTimeoutException(string message);
    public static TestTimeoutException ForIncompatibleTest();
    public static TestTimeoutException ForTimedOutTest(int timeout);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("5")]
public class Xunit.TestCaseOrdererAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <OrdererType>k__BackingField;
    public Type OrdererType { get; }
    public TestCaseOrdererAttribute(Type ordererType);
    [CompilerGeneratedAttribute]
public sealed virtual Type get_OrdererType();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("1")]
public class Xunit.TestCollectionOrdererAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <OrdererType>k__BackingField;
    public Type OrdererType { get; }
    public TestCollectionOrdererAttribute(Type ordererType);
    [CompilerGeneratedAttribute]
public sealed virtual Type get_OrdererType();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Xunit.TestContext : object {
    [NullableAttribute("1")]
private static TestContext idleTestContext;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static AsyncLocal`1<TestContext> local;
    [NullableAttribute("1")]
private static HashSet`1<TestEngineStatus> validExecutionStatuses;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, TestAttachment> attachments;
    private IMessageSink diagnosticMessageSink;
    private IMessageSink internalDiagnosticMessageSink;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, object> keyValueStorage;
    [NullableAttribute("1")]
private CancellationTokenSource testCancellationTokenSource;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<string> warnings;
    [CompilerGeneratedAttribute]
private CancellationToken <CancellationToken>k__BackingField;
    [CompilerGeneratedAttribute]
private TestPipelineStage <PipelineStage>k__BackingField;
    [CompilerGeneratedAttribute]
private ITest <Test>k__BackingField;
    [CompilerGeneratedAttribute]
private ITestAssembly <TestAssembly>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TestEngineStatus> <TestAssemblyStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private ITestCase <TestCase>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TestEngineStatus> <TestCaseStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private ITestClass <TestClass>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TestEngineStatus> <TestClassStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private ITestCollection <TestCollection>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TestEngineStatus> <TestCollectionStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private ITestOutputHelper <TestOutputHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private ITestMethod <TestMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TestEngineStatus> <TestMethodStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private TestResultState <TestState>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TestEngineStatus> <TestStatus>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NotNullIfNotNullAttribute("Test")]
public IReadOnlyDictionary`2<string, TestAttachment> Attachments { get; }
    public CancellationToken CancellationToken { get; }
    [NullableAttribute("1")]
public static TestContext Current { get; }
    internal IMessageSink DiagnosticMessageSink { get; internal set; }
    internal IMessageSink InternalDiagnosticMessageSink { get; internal set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Dictionary`2<string, object> KeyValueStorage { get; }
    public TestPipelineStage PipelineStage { get; private set; }
    public ITest Test { get; private set; }
    [NotNullIfNotNullAttribute("TestCollection")]
public ITestAssembly TestAssembly { get; private set; }
    [NotNullIfNotNullAttribute("TestAssembly")]
public Nullable`1<TestEngineStatus> TestAssemblyStatus { get; private set; }
    [NotNullIfNotNullAttribute("Test")]
public ITestCase TestCase { get; private set; }
    [NotNullIfNotNullAttribute("TestCase")]
public Nullable`1<TestEngineStatus> TestCaseStatus { get; private set; }
    [NotNullIfNotNullAttribute("TestMethod")]
public ITestClass TestClass { get; private set; }
    [NotNullIfNotNullAttribute("TestClass")]
public Nullable`1<TestEngineStatus> TestClassStatus { get; private set; }
    [NotNullIfNotNullAttribute("TestClass")]
[NotNullIfNotNullAttribute("TestCase")]
public ITestCollection TestCollection { get; private set; }
    [NotNullIfNotNullAttribute("TestCollection")]
public Nullable`1<TestEngineStatus> TestCollectionStatus { get; private set; }
    public ITestOutputHelper TestOutputHelper { get; private set; }
    public ITestMethod TestMethod { get; private set; }
    [NotNullIfNotNullAttribute("TestMethod")]
public Nullable`1<TestEngineStatus> TestMethodStatus { get; private set; }
    public TestResultState TestState { get; private set; }
    [NotNullIfNotNullAttribute("Test")]
public Nullable`1<TestEngineStatus> TestStatus { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyList`1<string> Warnings { get; }
    private TestContext(IMessageSink diagnosticMessageSink, IMessageSink internalDiagnosticMessageSink, Dictionary`2<string, object> keyValueStorage, TestPipelineStage pipelineStage, CancellationToken cancellationToken, Dictionary`2<string, TestAttachment> attachments, List`1<string> warnings);
    private static TestContext();
    public IReadOnlyDictionary`2<string, TestAttachment> get_Attachments();
    [CompilerGeneratedAttribute]
public CancellationToken get_CancellationToken();
    [NullableContextAttribute("1")]
public static TestContext get_Current();
    internal IMessageSink get_DiagnosticMessageSink();
    internal void set_DiagnosticMessageSink(IMessageSink value);
    internal IMessageSink get_InternalDiagnosticMessageSink();
    internal void set_InternalDiagnosticMessageSink(IMessageSink value);
    public Dictionary`2<string, object> get_KeyValueStorage();
    [CompilerGeneratedAttribute]
public TestPipelineStage get_PipelineStage();
    [CompilerGeneratedAttribute]
private void set_PipelineStage(TestPipelineStage value);
    [CompilerGeneratedAttribute]
public ITest get_Test();
    [CompilerGeneratedAttribute]
private void set_Test(ITest value);
    [CompilerGeneratedAttribute]
public ITestAssembly get_TestAssembly();
    [CompilerGeneratedAttribute]
private void set_TestAssembly(ITestAssembly value);
    [CompilerGeneratedAttribute]
public Nullable`1<TestEngineStatus> get_TestAssemblyStatus();
    [CompilerGeneratedAttribute]
private void set_TestAssemblyStatus(Nullable`1<TestEngineStatus> value);
    [CompilerGeneratedAttribute]
public ITestCase get_TestCase();
    [CompilerGeneratedAttribute]
private void set_TestCase(ITestCase value);
    [CompilerGeneratedAttribute]
public Nullable`1<TestEngineStatus> get_TestCaseStatus();
    [CompilerGeneratedAttribute]
private void set_TestCaseStatus(Nullable`1<TestEngineStatus> value);
    [CompilerGeneratedAttribute]
public ITestClass get_TestClass();
    [CompilerGeneratedAttribute]
private void set_TestClass(ITestClass value);
    [CompilerGeneratedAttribute]
public Nullable`1<TestEngineStatus> get_TestClassStatus();
    [CompilerGeneratedAttribute]
private void set_TestClassStatus(Nullable`1<TestEngineStatus> value);
    [CompilerGeneratedAttribute]
public ITestCollection get_TestCollection();
    [CompilerGeneratedAttribute]
private void set_TestCollection(ITestCollection value);
    [CompilerGeneratedAttribute]
public Nullable`1<TestEngineStatus> get_TestCollectionStatus();
    [CompilerGeneratedAttribute]
private void set_TestCollectionStatus(Nullable`1<TestEngineStatus> value);
    [CompilerGeneratedAttribute]
public ITestOutputHelper get_TestOutputHelper();
    [CompilerGeneratedAttribute]
private void set_TestOutputHelper(ITestOutputHelper value);
    [CompilerGeneratedAttribute]
public ITestMethod get_TestMethod();
    [CompilerGeneratedAttribute]
private void set_TestMethod(ITestMethod value);
    [CompilerGeneratedAttribute]
public Nullable`1<TestEngineStatus> get_TestMethodStatus();
    [CompilerGeneratedAttribute]
private void set_TestMethodStatus(Nullable`1<TestEngineStatus> value);
    [CompilerGeneratedAttribute]
public TestResultState get_TestState();
    [CompilerGeneratedAttribute]
private void set_TestState(TestResultState value);
    [CompilerGeneratedAttribute]
public Nullable`1<TestEngineStatus> get_TestStatus();
    [CompilerGeneratedAttribute]
private void set_TestStatus(Nullable`1<TestEngineStatus> value);
    public IReadOnlyList`1<string> get_Warnings();
    [NullableContextAttribute("1")]
public void AddAttachment(string name, string value);
    [NullableContextAttribute("1")]
public void AddAttachment(string name, Byte[] value, string mediaType);
    [NullableContextAttribute("1")]
public void AddWarning(string message);
    public void CancelCurrentTest();
    public sealed virtual void Dispose();
    [NullableContextAttribute("1")]
public void SendDiagnosticMessage(string message);
    [NullableContextAttribute("1")]
public void SendDiagnosticMessage(string format, object arg0);
    public void SendDiagnosticMessage(string format, object arg0, object arg1);
    public void SendDiagnosticMessage(string format, object arg0, object arg1, object arg2);
    [NullableContextAttribute("1")]
public void SendDiagnosticMessage(string format, Object[] args);
    [NullableContextAttribute("1")]
internal void SendInternalDiagnosticMessage(string message);
    [NullableContextAttribute("1")]
internal void SendInternalDiagnosticMessage(string format, object arg0);
    internal void SendInternalDiagnosticMessage(string format, object arg0, object arg1);
    internal void SendInternalDiagnosticMessage(string format, object arg0, object arg1, object arg2);
    [NullableContextAttribute("1")]
internal void SendInternalDiagnosticMessage(string format, Object[] args);
    public static void SetForInitialization(IMessageSink diagnosticMessageSink, bool diagnosticMessages, bool internalDiagnosticMessages);
    public static void SetForTest(ITest test, TestEngineStatus testStatus, CancellationToken cancellationToken, TestResultState testState, ITestOutputHelper testOutputHelper);
    [NullableContextAttribute("1")]
public static void SetForTestAssembly(ITestAssembly testAssembly, TestEngineStatus testAssemblyStatus, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
public static void SetForTestCase(ITestCase testCase, TestEngineStatus testCaseStatus, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
public static void SetForTestClass(ITestClass testClass, TestEngineStatus testClassStatus, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
public static void SetForTestCollection(ITestCollection testCollection, TestEngineStatus testCollectionStatus, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
public static void SetForTestMethod(ITestMethod testMethod, TestEngineStatus testMethodStatus, CancellationToken cancellationToken);
}
public enum Xunit.TestEngineStatus : Enum {
    public int value__;
    public static TestEngineStatus Initializing;
    public static TestEngineStatus Running;
    public static TestEngineStatus CleaningUp;
    public static TestEngineStatus Discovering;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("1")]
public class Xunit.TestFrameworkAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <FrameworkType>k__BackingField;
    public Type FrameworkType { get; }
    public TestFrameworkAttribute(Type frameworkType);
    [CompilerGeneratedAttribute]
public sealed virtual Type get_FrameworkType();
}
public enum Xunit.TestPipelineStage : Enum {
    public int value__;
    public static TestPipelineStage Unknown;
    public static TestPipelineStage Initialization;
    public static TestPipelineStage Discovery;
    public static TestPipelineStage TestAssemblyExecution;
    public static TestPipelineStage TestCollectionExecution;
    public static TestPipelineStage TestClassExecution;
    public static TestPipelineStage TestMethodExecution;
    public static TestPipelineStage TestCaseExecution;
    public static TestPipelineStage TestExecution;
}
public enum Xunit.TestResult : Enum {
    public int value__;
    public static TestResult Passed;
    public static TestResult Failed;
    public static TestResult Skipped;
    public static TestResult NotRun;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Xunit.TestResultState : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private String[] <ExceptionMessages>k__BackingField;
    [CompilerGeneratedAttribute]
private Int32[] <ExceptionParentIndices>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ExceptionStackTraces>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ExceptionTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <ExecutionTime>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<FailureCause> <FailureCause>k__BackingField;
    [CompilerGeneratedAttribute]
private TestResult <Result>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] ExceptionMessages { get; private set; }
    public Int32[] ExceptionParentIndices { get; private set; }
    public String[] ExceptionStackTraces { get; private set; }
    public String[] ExceptionTypes { get; private set; }
    public Nullable`1<decimal> ExecutionTime { get; private set; }
    public Nullable`1<FailureCause> FailureCause { get; private set; }
    public TestResult Result { get; private set; }
    [CompilerGeneratedAttribute]
public String[] get_ExceptionMessages();
    [CompilerGeneratedAttribute]
private void set_ExceptionMessages(String[] value);
    [CompilerGeneratedAttribute]
public Int32[] get_ExceptionParentIndices();
    [CompilerGeneratedAttribute]
private void set_ExceptionParentIndices(Int32[] value);
    [CompilerGeneratedAttribute]
public String[] get_ExceptionStackTraces();
    [CompilerGeneratedAttribute]
private void set_ExceptionStackTraces(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_ExceptionTypes();
    [CompilerGeneratedAttribute]
private void set_ExceptionTypes(String[] value);
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_ExecutionTime();
    [CompilerGeneratedAttribute]
private void set_ExecutionTime(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public Nullable`1<FailureCause> get_FailureCause();
    [CompilerGeneratedAttribute]
private void set_FailureCause(Nullable`1<FailureCause> value);
    [CompilerGeneratedAttribute]
public TestResult get_Result();
    [CompilerGeneratedAttribute]
private void set_Result(TestResult value);
    [NullableContextAttribute("1")]
public static TestResultState ForNotRun(Nullable`1<decimal> executionTime);
    [NullableContextAttribute("1")]
public static TestResultState ForPassed(Nullable`1<decimal> executionTime);
    [NullableContextAttribute("1")]
public static TestResultState ForSkipped(Nullable`1<decimal> executionTime);
    [NullableContextAttribute("1")]
public static TestResultState FromException(decimal executionTime, Exception exception);
    [NullableContextAttribute("1")]
public static TestResultState FromTestResult(ITestResultMessage testResult);
}
[XunitTestCaseDiscovererAttribute("Xunit.v3.TheoryDiscoverer")]
[AttributeUsageAttribute("64")]
public class Xunit.TheoryAttribute : FactAttribute {
    [CompilerGeneratedAttribute]
private bool <DisableDiscoveryEnumeration>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipTestWithoutData>k__BackingField;
    public bool DisableDiscoveryEnumeration { get; public set; }
    public bool SkipTestWithoutData { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_DisableDiscoveryEnumeration();
    [CompilerGeneratedAttribute]
public void set_DisableDiscoveryEnumeration(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_SkipTestWithoutData();
    [CompilerGeneratedAttribute]
public void set_SkipTestWithoutData(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class Xunit.TheoryData : TheoryDataBase`2<TheoryDataRow, Object[]> {
    protected virtual TheoryDataRow Convert(Object[] row);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Xunit.TheoryData`1 : TheoryDataBase`2<TheoryDataRow`1<T>, T> {
    public TheoryData`1(IEnumerable`1<T> values);
    public TheoryData`1(T[] values);
    public TheoryData`1(IEnumerable`1<TheoryDataRow`1<T>> values);
    public TheoryData`1(TheoryDataRow`1[] values);
    protected virtual TheoryDataRow`1<T> Convert(T row);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Xunit.TheoryData`10 : TheoryDataBase`2<TheoryDataRow`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, ValueTuple`8<T1, T2, T3, T4, T5, T6, T7, ValueTuple`3<T8, T9, T10>>> {
    public TheoryData`10(IEnumerable`1<ValueTuple`8<T1, T2, T3, T4, T5, T6, T7, ValueTuple`3<T8, T9, T10>>> values);
    public TheoryData`10(ValueTuple`8[] values);
    [NullableContextAttribute("1")]
public TheoryData`10(TheoryDataRow`10[] values);
    [NullableContextAttribute("1")]
public void Add(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7, T8 p8, T9 p9, T10 p10);
    [NullableContextAttribute("1")]
protected virtual TheoryDataRow`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> Convert(ValueTuple`8<T1, T2, T3, T4, T5, T6, T7, ValueTuple`3<T8, T9, T10>> row);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Xunit.TheoryData`2 : TheoryDataBase`2<TheoryDataRow`2<T1, T2>, ValueTuple`2<T1, T2>> {
    public TheoryData`2(IEnumerable`1<ValueTuple`2<T1, T2>> values);
    public TheoryData`2(ValueTuple`2[] values);
    public TheoryData`2(IEnumerable`1<TheoryDataRow`2<T1, T2>> values);
    public TheoryData`2(TheoryDataRow`2[] values);
    public void Add(T1 p1, T2 p2);
    protected virtual TheoryDataRow`2<T1, T2> Convert(ValueTuple`2<T1, T2> row);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Xunit.TheoryData`3 : TheoryDataBase`2<TheoryDataRow`3<T1, T2, T3>, ValueTuple`3<T1, T2, T3>> {
    public TheoryData`3(IEnumerable`1<ValueTuple`3<T1, T2, T3>> values);
    public TheoryData`3(ValueTuple`3[] values);
    public TheoryData`3(IEnumerable`1<TheoryDataRow`3<T1, T2, T3>> values);
    public TheoryData`3(TheoryDataRow`3[] values);
    public void Add(T1 p1, T2 p2, T3 p3);
    protected virtual TheoryDataRow`3<T1, T2, T3> Convert(ValueTuple`3<T1, T2, T3> row);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Xunit.TheoryData`4 : TheoryDataBase`2<TheoryDataRow`4<T1, T2, T3, T4>, ValueTuple`4<T1, T2, T3, T4>> {
    public TheoryData`4(IEnumerable`1<ValueTuple`4<T1, T2, T3, T4>> values);
    public TheoryData`4(ValueTuple`4[] values);
    public TheoryData`4(IEnumerable`1<TheoryDataRow`4<T1, T2, T3, T4>> values);
    public TheoryData`4(TheoryDataRow`4[] values);
    public void Add(T1 p1, T2 p2, T3 p3, T4 p4);
    protected virtual TheoryDataRow`4<T1, T2, T3, T4> Convert(ValueTuple`4<T1, T2, T3, T4> row);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Xunit.TheoryData`5 : TheoryDataBase`2<TheoryDataRow`5<T1, T2, T3, T4, T5>, ValueTuple`5<T1, T2, T3, T4, T5>> {
    public TheoryData`5(IEnumerable`1<ValueTuple`5<T1, T2, T3, T4, T5>> values);
    public TheoryData`5(ValueTuple`5[] values);
    [NullableContextAttribute("1")]
public TheoryData`5(IEnumerable`1<TheoryDataRow`5<T1, T2, T3, T4, T5>> values);
    [NullableContextAttribute("1")]
public TheoryData`5(TheoryDataRow`5[] values);
    [NullableContextAttribute("1")]
public void Add(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5);
    [NullableContextAttribute("1")]
protected virtual TheoryDataRow`5<T1, T2, T3, T4, T5> Convert(ValueTuple`5<T1, T2, T3, T4, T5> row);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Xunit.TheoryData`6 : TheoryDataBase`2<TheoryDataRow`6<T1, T2, T3, T4, T5, T6>, ValueTuple`6<T1, T2, T3, T4, T5, T6>> {
    public TheoryData`6(IEnumerable`1<ValueTuple`6<T1, T2, T3, T4, T5, T6>> values);
    public TheoryData`6(ValueTuple`6[] values);
    [NullableContextAttribute("1")]
public TheoryData`6(IEnumerable`1<TheoryDataRow`6<T1, T2, T3, T4, T5, T6>> values);
    [NullableContextAttribute("1")]
public TheoryData`6(TheoryDataRow`6[] values);
    [NullableContextAttribute("1")]
public void Add(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6);
    [NullableContextAttribute("1")]
protected virtual TheoryDataRow`6<T1, T2, T3, T4, T5, T6> Convert(ValueTuple`6<T1, T2, T3, T4, T5, T6> row);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Xunit.TheoryData`7 : TheoryDataBase`2<TheoryDataRow`7<T1, T2, T3, T4, T5, T6, T7>, ValueTuple`7<T1, T2, T3, T4, T5, T6, T7>> {
    public TheoryData`7(IEnumerable`1<ValueTuple`7<T1, T2, T3, T4, T5, T6, T7>> values);
    public TheoryData`7(ValueTuple`7[] values);
    [NullableContextAttribute("1")]
public TheoryData`7(IEnumerable`1<TheoryDataRow`7<T1, T2, T3, T4, T5, T6, T7>> values);
    [NullableContextAttribute("1")]
public TheoryData`7(TheoryDataRow`7[] values);
    [NullableContextAttribute("1")]
public void Add(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7);
    [NullableContextAttribute("1")]
protected virtual TheoryDataRow`7<T1, T2, T3, T4, T5, T6, T7> Convert(ValueTuple`7<T1, T2, T3, T4, T5, T6, T7> row);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Xunit.TheoryData`8 : TheoryDataBase`2<TheoryDataRow`8<T1, T2, T3, T4, T5, T6, T7, T8>, ValueTuple`8<T1, T2, T3, T4, T5, T6, T7, ValueTuple`1<T8>>> {
    public TheoryData`8(IEnumerable`1<ValueTuple`8<T1, T2, T3, T4, T5, T6, T7, ValueTuple`1<T8>>> values);
    public TheoryData`8(ValueTuple`8[] values);
    [NullableContextAttribute("1")]
public TheoryData`8(IEnumerable`1<TheoryDataRow`8<T1, T2, T3, T4, T5, T6, T7, T8>> values);
    [NullableContextAttribute("1")]
public TheoryData`8(TheoryDataRow`8[] values);
    [NullableContextAttribute("1")]
public void Add(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7, T8 p8);
    [NullableContextAttribute("1")]
protected virtual TheoryDataRow`8<T1, T2, T3, T4, T5, T6, T7, T8> Convert(ValueTuple`8<T1, T2, T3, T4, T5, T6, T7, ValueTuple`1<T8>> row);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Xunit.TheoryData`9 : TheoryDataBase`2<TheoryDataRow`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>, ValueTuple`8<T1, T2, T3, T4, T5, T6, T7, ValueTuple`2<T8, T9>>> {
    public TheoryData`9(IEnumerable`1<ValueTuple`8<T1, T2, T3, T4, T5, T6, T7, ValueTuple`2<T8, T9>>> values);
    public TheoryData`9(ValueTuple`8[] values);
    [NullableContextAttribute("1")]
public TheoryData`9(IEnumerable`1<TheoryDataRow`9<T1, T2, T3, T4, T5, T6, T7, T8, T9>> values);
    [NullableContextAttribute("1")]
public TheoryData`9(TheoryDataRow`9[] values);
    [NullableContextAttribute("1")]
public void Add(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7, T8 p8, T9 p9);
    [NullableContextAttribute("1")]
protected virtual TheoryDataRow`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> Convert(ValueTuple`8<T1, T2, T3, T4, T5, T6, T7, ValueTuple`2<T8, T9>> row);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Xunit.TheoryDataBase`2 : object {
    private List`1<TTheoryDataRow> data;
    public int Count { get; }
    public sealed virtual int get_Count();
    public void Add(TRawDataRow row);
    public void Add(TTheoryDataRow row);
    public void AddRange(IEnumerable`1<TRawDataRow> rows);
    public void AddRange(TRawDataRow[] rows);
    public void AddRange(IEnumerable`1<TTheoryDataRow> rows);
    public void AddRange(TTheoryDataRow[] rows);
    protected abstract virtual TTheoryDataRow Convert(TRawDataRow row);
    public sealed virtual IEnumerator`1<TTheoryDataRow> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Xunit.TheoryDataRow : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Object[] data;
    [NullableAttribute("1")]
private Dictionary`2<string, HashSet`1<string>> traits;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Explicit>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Skip>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TestDisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Timeout>k__BackingField;
    public Nullable`1<bool> Explicit { get; public set; }
    public string Skip { get; public set; }
    public string TestDisplayName { get; public set; }
    public Nullable`1<int> Timeout { get; public set; }
    [NullableAttribute("1")]
public Dictionary`2<string, HashSet`1<string>> Traits { get; public set; }
    public TheoryDataRow(Object[] data);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<bool> get_Explicit();
    [CompilerGeneratedAttribute]
public void set_Explicit(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Skip();
    [CompilerGeneratedAttribute]
public void set_Skip(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_TestDisplayName();
    [CompilerGeneratedAttribute]
public void set_TestDisplayName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<int> value);
    [NullableContextAttribute("1")]
public sealed virtual Dictionary`2<string, HashSet`1<string>> get_Traits();
    [NullableContextAttribute("1")]
public void set_Traits(Dictionary`2<string, HashSet`1<string>> value);
    public sealed virtual Object[] GetData();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.TheoryDataRow`1 : TheoryDataRow {
    public TheoryDataRow`1(T1 p1);
    public static TheoryDataRow`1<T1> op_Implicit(T1 p1);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Xunit.TheoryDataRow`10 : TheoryDataRow {
    [NullableContextAttribute("1")]
public TheoryDataRow`10(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7, T8 p8, T9 p9, T10 p10);
    [NullableContextAttribute("1")]
public static TheoryDataRow`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> op_Implicit(ValueTuple`8<T1, T2, T3, T4, T5, T6, T7, ValueTuple`3<T8, T9, T10>> row);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.TheoryDataRow`2 : TheoryDataRow {
    public TheoryDataRow`2(T1 p1, T2 p2);
    public static TheoryDataRow`2<T1, T2> op_Implicit(ValueTuple`2<T1, T2> row);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Xunit.TheoryDataRow`3 : TheoryDataRow {
    [NullableContextAttribute("1")]
public TheoryDataRow`3(T1 p1, T2 p2, T3 p3);
    [NullableContextAttribute("1")]
public static TheoryDataRow`3<T1, T2, T3> op_Implicit(ValueTuple`3<T1, T2, T3> row);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Xunit.TheoryDataRow`4 : TheoryDataRow {
    [NullableContextAttribute("1")]
public TheoryDataRow`4(T1 p1, T2 p2, T3 p3, T4 p4);
    [NullableContextAttribute("1")]
public static TheoryDataRow`4<T1, T2, T3, T4> op_Implicit(ValueTuple`4<T1, T2, T3, T4> row);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Xunit.TheoryDataRow`5 : TheoryDataRow {
    [NullableContextAttribute("1")]
public TheoryDataRow`5(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5);
    [NullableContextAttribute("1")]
public static TheoryDataRow`5<T1, T2, T3, T4, T5> op_Implicit(ValueTuple`5<T1, T2, T3, T4, T5> row);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Xunit.TheoryDataRow`6 : TheoryDataRow {
    [NullableContextAttribute("1")]
public TheoryDataRow`6(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6);
    [NullableContextAttribute("1")]
public static TheoryDataRow`6<T1, T2, T3, T4, T5, T6> op_Implicit(ValueTuple`6<T1, T2, T3, T4, T5, T6> row);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Xunit.TheoryDataRow`7 : TheoryDataRow {
    [NullableContextAttribute("1")]
public TheoryDataRow`7(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7);
    [NullableContextAttribute("1")]
public static TheoryDataRow`7<T1, T2, T3, T4, T5, T6, T7> op_Implicit(ValueTuple`7<T1, T2, T3, T4, T5, T6, T7> row);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Xunit.TheoryDataRow`8 : TheoryDataRow {
    [NullableContextAttribute("1")]
public TheoryDataRow`8(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7, T8 p8);
    [NullableContextAttribute("1")]
public static TheoryDataRow`8<T1, T2, T3, T4, T5, T6, T7, T8> op_Implicit(ValueTuple`8<T1, T2, T3, T4, T5, T6, T7, ValueTuple`1<T8>> row);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Xunit.TheoryDataRow`9 : TheoryDataRow {
    [NullableContextAttribute("1")]
public TheoryDataRow`9(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7, T8 p8, T9 p9);
    [NullableContextAttribute("1")]
public static TheoryDataRow`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> op_Implicit(ValueTuple`8<T1, T2, T3, T4, T5, T6, T7, ValueTuple`2<T8, T9>> row);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Xunit.TheoryDataRowExtensions : object {
    [ExtensionAttribute]
public static TDerived WithExplicit(TDerived theoryDataRow, Nullable`1<bool> explicit);
    [ExtensionAttribute]
public static TDerived WithSkip(TDerived theoryDataRow, string skip);
    [ExtensionAttribute]
public static TDerived WithTestDisplayName(TDerived theoryDataRow, string testDisplayName);
    [ExtensionAttribute]
public static TDerived WithTimeout(TDerived theoryDataRow, Nullable`1<int> timeout);
    [ExtensionAttribute]
public static TDerived WithTrait(TDerived theoryDataRow, string name, string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("69")]
public class Xunit.TraitAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Name { get; }
    public string Value { get; }
    public TraitAttribute(string name, string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_Value();
    public sealed virtual IReadOnlyCollection`1<KeyValuePair`2<string, string>> GetTraits();
}
[RequiredMemberAttribute]
[JsonTypeIDAttribute("after-test-finished")]
public class Xunit.v3.AfterTestFinished : TestMessage {
    [NullableAttribute("2")]
private string attributeName;
    [NullableAttribute("1")]
[RequiredMemberAttribute]
public string AttributeName { get; public set; }
    [NullableContextAttribute("1")]
public sealed virtual string get_AttributeName();
    [NullableContextAttribute("1")]
public void set_AttributeName(string value);
    [NullableContextAttribute("1")]
protected virtual void ValidateObjectState(HashSet`1<string> invalidProperties);
    [NullableContextAttribute("1")]
protected virtual void Serialize(JsonObjectSerializer serializer);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[RequiredMemberAttribute]
[JsonTypeIDAttribute("after-test-starting")]
public class Xunit.v3.AfterTestStarting : TestMessage {
    [NullableAttribute("2")]
private string attributeName;
    [NullableAttribute("1")]
[RequiredMemberAttribute]
public string AttributeName { get; public set; }
    [NullableContextAttribute("1")]
public sealed virtual string get_AttributeName();
    [NullableContextAttribute("1")]
public void set_AttributeName(string value);
    [NullableContextAttribute("1")]
protected virtual void ValidateObjectState(HashSet`1<string> invalidProperties);
    [NullableContextAttribute("1")]
protected virtual void Serialize(JsonObjectSerializer serializer);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[AttributeUsageAttribute("69")]
public abstract class Xunit.v3.BeforeAfterTestAttribute : Attribute {
    [NullableContextAttribute("1")]
public virtual ValueTask After(MethodInfo methodUnderTest, IXunitTest test);
    [NullableContextAttribute("1")]
public virtual ValueTask Before(MethodInfo methodUnderTest, IXunitTest test);
}
[RequiredMemberAttribute]
[JsonTypeIDAttribute("before-test-finished")]
public class Xunit.v3.BeforeTestFinished : TestMessage {
    [NullableAttribute("2")]
private string attributeName;
    [NullableAttribute("1")]
[RequiredMemberAttribute]
public string AttributeName { get; public set; }
    [NullableContextAttribute("1")]
public sealed virtual string get_AttributeName();
    [NullableContextAttribute("1")]
public void set_AttributeName(string value);
    [NullableContextAttribute("1")]
protected virtual void ValidateObjectState(HashSet`1<string> invalidProperties);
    [NullableContextAttribute("1")]
protected virtual void Serialize(JsonObjectSerializer serializer);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[RequiredMemberAttribute]
[JsonTypeIDAttribute("before-test-starting")]
public class Xunit.v3.BeforeTestStarting : TestMessage {
    [NullableAttribute("2")]
private string attributeName;
    [NullableAttribute("1")]
[RequiredMemberAttribute]
public string AttributeName { get; public set; }
    [NullableContextAttribute("1")]
public sealed virtual string get_AttributeName();
    [NullableContextAttribute("1")]
public void set_AttributeName(string value);
    [NullableContextAttribute("1")]
protected virtual void ValidateObjectState(HashSet`1<string> invalidProperties);
    [NullableContextAttribute("1")]
protected virtual void Serialize(JsonObjectSerializer serializer);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.v3.CollectionPerAssemblyTestCollectionFactory : TestCollectionFactoryBase {
    private XunitTestCollection defaultCollection;
    public string DisplayName { get; }
    public CollectionPerAssemblyTestCollectionFactory(IXunitTestAssembly testAssembly);
    public virtual string get_DisplayName();
    protected virtual IXunitTestCollection GetDefaultTestCollection(Type testClass);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.v3.CollectionPerClassTestCollectionFactory : TestCollectionFactoryBase {
    public string DisplayName { get; }
    public CollectionPerClassTestCollectionFactory(IXunitTestAssembly testAssembly);
    public virtual string get_DisplayName();
    protected virtual IXunitTestCollection GetDefaultTestCollection(Type testClass);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.v3.ContextBase : object {
    [CompilerGeneratedAttribute]
private ExceptionAggregator <Aggregator>k__BackingField;
    [CompilerGeneratedAttribute]
private CancellationTokenSource <CancellationTokenSource>k__BackingField;
    [CompilerGeneratedAttribute]
private ExplicitOption <ExplicitOption>k__BackingField;
    [CompilerGeneratedAttribute]
private IMessageBus <MessageBus>k__BackingField;
    public ExceptionAggregator Aggregator { get; }
    public CancellationTokenSource CancellationTokenSource { get; }
    public ExplicitOption ExplicitOption { get; }
    public IMessageBus MessageBus { get; }
    public ContextBase(ExplicitOption explicitOption, IMessageBus messageBus, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource);
    [CompilerGeneratedAttribute]
public ExceptionAggregator get_Aggregator();
    [CompilerGeneratedAttribute]
public CancellationTokenSource get_CancellationTokenSource();
    [CompilerGeneratedAttribute]
public ExplicitOption get_ExplicitOption();
    [CompilerGeneratedAttribute]
public IMessageBus get_MessageBus();
    public virtual ValueTask DisposeAsync();
    public virtual ValueTask InitializeAsync();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Xunit.v3.CultureOverride : object {
    private CultureInfo lastCulture;
    private CultureInfo lastUICulture;
    public CultureOverride(string culture);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("64")]
public abstract class Xunit.v3.DataAttribute : Attribute {
    private static MethodInfo tupleIndexerGetter;
    private static MethodInfo tupleLengthGetter;
    private static Type tupleType;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ExplicitAsNullable>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Skip>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TestDisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <TimeoutAsNullable>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private String[] <Traits>k__BackingField;
    public bool Explicit { get; public set; }
    private Nullable`1<bool> Xunit.v3.IDataAttribute.Explicit { get; }
    protected Nullable`1<bool> ExplicitAsNullable { get; protected set; }
    public string Skip { get; public set; }
    public string TestDisplayName { get; public set; }
    public int Timeout { get; public set; }
    private Nullable`1<int> Xunit.v3.IDataAttribute.Timeout { get; }
    protected Nullable`1<int> TimeoutAsNullable { get; protected set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] Traits { get; public set; }
    private static DataAttribute();
    [ObsoleteAttribute("Use ExplicitAsNullable instead")]
public bool get_Explicit();
    public void set_Explicit(bool value);
    private sealed virtual override Nullable`1<bool> Xunit.v3.IDataAttribute.get_Explicit();
    [CompilerGeneratedAttribute]
protected Nullable`1<bool> get_ExplicitAsNullable();
    [CompilerGeneratedAttribute]
protected void set_ExplicitAsNullable(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Skip();
    [CompilerGeneratedAttribute]
public void set_Skip(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_TestDisplayName();
    [CompilerGeneratedAttribute]
public void set_TestDisplayName(string value);
    [ObsoleteAttribute("Use TimeoutAsNullable instead")]
public int get_Timeout();
    public void set_Timeout(int value);
    private sealed virtual override Nullable`1<int> Xunit.v3.IDataAttribute.get_Timeout();
    [CompilerGeneratedAttribute]
protected Nullable`1<int> get_TimeoutAsNullable();
    [CompilerGeneratedAttribute]
protected void set_TimeoutAsNullable(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_Traits();
    [CompilerGeneratedAttribute]
public void set_Traits(String[] value);
    [NullableContextAttribute("1")]
protected virtual ITheoryDataRow ConvertDataRow(object dataRow);
    [NullableContextAttribute("1")]
public abstract virtual ValueTask`1<IReadOnlyCollection`1<ITheoryDataRow>> GetData(DisposalTracker disposalTracker);
    [NullableContextAttribute("1")]
private void MergeTraitsInto(Dictionary`2<string, HashSet`1<string>> traits);
    public abstract virtual bool SupportsDiscoveryEnumeration();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.v3.DefaultTestCaseOrderer : object {
    [CompilerGeneratedAttribute]
private static DefaultTestCaseOrderer <Instance>k__BackingField;
    public static DefaultTestCaseOrderer Instance { get; }
    private static DefaultTestCaseOrderer();
    [CompilerGeneratedAttribute]
public static DefaultTestCaseOrderer get_Instance();
    public sealed virtual IReadOnlyCollection`1<TTestCase> OrderTestCases(IReadOnlyCollection`1<TTestCase> testCases);
    private static List`1<TTestCase> Randomize(List`1<TTestCase> testCases);
    private static int Compare(TTestCase x, TTestCase y);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.v3.DefaultTestCollectionOrderer : object {
    [CompilerGeneratedAttribute]
private static DefaultTestCollectionOrderer <Instance>k__BackingField;
    public static DefaultTestCollectionOrderer Instance { get; }
    private static DefaultTestCollectionOrderer();
    [CompilerGeneratedAttribute]
public static DefaultTestCollectionOrderer get_Instance();
    public sealed virtual IReadOnlyCollection`1<TTestCollection> OrderTestCollections(IReadOnlyCollection`1<TTestCollection> testCollections);
    private static int Compare(TTestCollection x, TTestCollection y);
}
public class Xunit.v3.DelegatingMessageBus : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`1<IMessageSinkMessage> <callback>P;
    [NullableAttribute("1")]
private IMessageBus innerMessageBus;
    [NullableContextAttribute("1")]
public DelegatingMessageBus(IMessageBus innerMessageBus, Action`1<IMessageSinkMessage> callback);
    [NullableContextAttribute("1")]
public virtual bool QueueMessage(IMessageSinkMessage message);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.v3.DelegatingMessageBus`1 : DelegatingMessageBus {
    [NullableAttribute("2")]
private TFinalMessage finalMessage;
    [CompilerGeneratedAttribute]
private ManualResetEvent <Finished>k__BackingField;
    public TFinalMessage FinalMessage { get; }
    public ManualResetEvent Finished { get; }
    public DelegatingMessageBus`1(IMessageBus innerMessageBus, Action`1<IMessageSinkMessage> callback);
    public TFinalMessage get_FinalMessage();
    [CompilerGeneratedAttribute]
public ManualResetEvent get_Finished();
    public virtual bool QueueMessage(IMessageSinkMessage message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.v3.DelegatingMessageSink : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`1<IMessageSinkMessage> callback;
    private IMessageSink innerSink;
    public DelegatingMessageSink(IMessageSink innerSink, Action`1<IMessageSinkMessage> callback);
    public virtual bool OnMessage(IMessageSinkMessage message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.v3.DelegatingMessageSink`1 : DelegatingMessageSink {
    [NullableAttribute("2")]
private TFinalMessage finalMessage;
    [CompilerGeneratedAttribute]
private ManualResetEvent <Finished>k__BackingField;
    public TFinalMessage FinalMessage { get; }
    public ManualResetEvent Finished { get; }
    public DelegatingMessageSink`1(IMessageSink innerSink, Action`1<IMessageSinkMessage> callback);
    public TFinalMessage get_FinalMessage();
    [CompilerGeneratedAttribute]
public ManualResetEvent get_Finished();
    public virtual bool OnMessage(IMessageSinkMessage message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RequiredMemberAttribute]
[JsonTypeIDAttribute("diagnostic")]
public class Xunit.v3.DiagnosticMessage : MessageSinkMessage {
    [NullableAttribute("2")]
private string message;
    [RequiredMemberAttribute]
public string Message { get; public set; }
    [SetsRequiredMembersAttribute]
public DiagnosticMessage(string message);
    [SetsRequiredMembersAttribute]
public DiagnosticMessage(string messageFormat, object arg0);
    [NullableContextAttribute("2")]
[SetsRequiredMembersAttribute]
public DiagnosticMessage(string messageFormat, object arg0, object arg1);
    [NullableContextAttribute("2")]
[SetsRequiredMembersAttribute]
public DiagnosticMessage(string messageFormat, object arg0, object arg1, object arg2);
    [SetsRequiredMembersAttribute]
public DiagnosticMessage(string messageFormat, Object[] args);
    public sealed virtual string get_Message();
    public void set_Message(string value);
    protected virtual void ValidateObjectState(HashSet`1<string> invalidProperties);
    protected virtual void Serialize(JsonObjectSerializer serializer);
    public virtual string ToString();
}
[RequiredMemberAttribute]
[JsonTypeIDAttribute("discovery-complete")]
public class Xunit.v3.DiscoveryComplete : TestAssemblyMessage {
    private Nullable`1<int> testCasesToRun;
    [RequiredMemberAttribute]
public int TestCasesToRun { get; public set; }
    public sealed virtual int get_TestCasesToRun();
    public void set_TestCasesToRun(int value);
    [NullableContextAttribute("1")]
protected virtual void ValidateObjectState(HashSet`1<string> invalidProperties);
    [NullableContextAttribute("1")]
protected virtual void Serialize(JsonObjectSerializer serializer);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RequiredMemberAttribute]
[JsonTypeIDAttribute("discovery-starting")]
public class Xunit.v3.DiscoveryStarting : TestAssemblyMessage {
    [NullableAttribute("2")]
private string assemblyName;
    [NullableAttribute("2")]
private string assemblyPath;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <ConfigFilePath>k__BackingField;
    [RequiredMemberAttribute]
public string AssemblyName { get; public set; }
    [RequiredMemberAttribute]
public string AssemblyPath { get; public set; }
    [NullableAttribute("2")]
[RequiredMemberAttribute]
public string ConfigFilePath { get; public set; }
    public sealed virtual string get_AssemblyName();
    public void set_AssemblyName(string value);
    public sealed virtual string get_AssemblyPath();
    public void set_AssemblyPath(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual string get_ConfigFilePath();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ConfigFilePath(string value);
    protected virtual void ValidateObjectState(HashSet`1<string> invalidProperties);
    protected virtual void Serialize(JsonObjectSerializer serializer);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.v3.DisplayNameFormatter : object {
    private CharacterRule rule;
    public DisplayNameFormatter(TestMethodDisplay display, TestMethodDisplayOptions displayOptions);
    public string Format(string displayName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RequiredMemberAttribute]
[JsonTypeIDAttribute("error")]
public class Xunit.v3.ErrorMessage : MessageSinkMessage {
    [NullableAttribute("2")]
private Int32[] exceptionParentIndices;
    [NullableAttribute("2")]
private String[] exceptionTypes;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private String[] messages;
    [NullableAttribute("2")]
private String[] stackTraces;
    [RequiredMemberAttribute]
public Int32[] ExceptionParentIndices { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[RequiredMemberAttribute]
public String[] ExceptionTypes { get; public set; }
    [RequiredMemberAttribute]
public String[] Messages { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[RequiredMemberAttribute]
public String[] StackTraces { get; public set; }
    public sealed virtual Int32[] get_ExceptionParentIndices();
    public void set_ExceptionParentIndices(Int32[] value);
    public sealed virtual String[] get_ExceptionTypes();
    public void set_ExceptionTypes(String[] value);
    public sealed virtual String[] get_Messages();
    public void set_Messages(String[] value);
    public sealed virtual String[] get_StackTraces();
    public void set_StackTraces(String[] value);
    protected virtual void ValidateObjectState(HashSet`1<string> invalidProperties);
    public static IErrorMessage FromException(Exception ex);
    protected virtual void Serialize(JsonObjectSerializer serializer);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.v3.ExceptionAggregator : ValueType {
    private List`1<Exception> exceptions;
    public bool HasExceptions { get; }
    private ExceptionAggregator(IEnumerable`1<Exception> exceptionsToClone);
    public bool get_HasExceptions();
    public void Add(Exception ex);
    public void Aggregate(ExceptionAggregator aggregator);
    public void Clear();
    public ExceptionAggregator Clone();
    public static ExceptionAggregator Create();
    private List`1<Exception> GetExceptions();
    public void Run(Action code);
    public T Run(Func`1<T> code, T defaultValue);
    [AsyncStateMachineAttribute("Xunit.v3.ExceptionAggregator/<RunAsync>d__13")]
public ValueTask RunAsync(Func`1<ValueTask> code);
    [AsyncStateMachineAttribute("Xunit.v3.ExceptionAggregator/<RunAsync>d__14`1")]
public ValueTask`1<T> RunAsync(Func`1<ValueTask`1<T>> code, T defaultValue);
    public void ThrowIfFaulted();
    [NullableContextAttribute("2")]
public Exception ToException();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.v3.ExecutionErrorTestCase : XunitTestCase {
    [NullableAttribute("2")]
private string errorMessage;
    public string ErrorMessage { get; }
    public ExecutionErrorTestCase(IXunitTestMethod testMethod, string testCaseDisplayName, string uniqueID, string errorMessage);
    public string get_ErrorMessage();
    protected virtual void Deserialize(IXunitSerializationInfo info);
    public virtual ValueTask`1<RunSummary> RunAsync(ExplicitOption explicitOption, IMessageBus messageBus, Object[] constructorArguments, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource);
    protected virtual void Serialize(IXunitSerializationInfo info);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Xunit.v3.ExecutionErrorTestCaseRunner : XunitTestCaseRunnerBase`2<XunitTestCaseRunnerContext`1<ExecutionErrorTestCase>, ExecutionErrorTestCase> {
    [CompilerGeneratedAttribute]
private static ExecutionErrorTestCaseRunner <Instance>k__BackingField;
    public static ExecutionErrorTestCaseRunner Instance { get; }
    private static ExecutionErrorTestCaseRunner();
    [CompilerGeneratedAttribute]
public static ExecutionErrorTestCaseRunner get_Instance();
    [AsyncStateMachineAttribute("Xunit.v3.ExecutionErrorTestCaseRunner/<RunAsync>d__4")]
public ValueTask`1<RunSummary> RunAsync(ExecutionErrorTestCase testCase, IMessageBus messageBus, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource);
    [NullableContextAttribute("0")]
protected virtual ValueTask`1<RunSummary> RunTestsAsync(XunitTestCaseRunnerContext`1<ExecutionErrorTestCase> ctxt, Exception exception);
}
public static class Xunit.v3.ExecutionTimer : object {
    [NullableContextAttribute("1")]
public static TimeSpan Measure(Action action);
    [NullableContextAttribute("1")]
public static ValueTuple`2<T, TimeSpan> Measure(Func`1<T> func);
    [AsyncStateMachineAttribute("Xunit.v3.ExecutionTimer/<MeasureAsync>d__2")]
public static ValueTask`1<TimeSpan> MeasureAsync(Func`1<ValueTask> asyncAction);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("Xunit.v3.ExecutionTimer/<MeasureAsync>d__3`1")]
public static ValueTask`1<ValueTuple`2<T, TimeSpan>> MeasureAsync(Func`1<ValueTask`1<T>> asyncFunc);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Xunit.v3.ExtensibilityPointFactory : object {
    [NullableContextAttribute("2")]
private static object CreateInstance(Type type, Object[] ctorArgs);
    [NullableContextAttribute("2")]
public static TInterface Get(Type type, Object[] ctorArgs);
    public static ITestFramework GetTestFramework(Assembly testAssembly);
    public static IXunitTestCaseDiscoverer GetXunitTestCaseDiscoverer(Type testCaseDiscovererType);
    [NullableContextAttribute("2")]
public static IXunitTestCollectionFactory GetXunitTestCollectionFactory(Type testCollectionFactoryType, IXunitTestAssembly testAssembly);
    public static IReadOnlyCollection`1<IBeforeAfterTestAttribute> GetAssemblyBeforeAfterTestAttributes(Assembly testAssembly);
    public static IReadOnlyCollection`1<Type> GetAssemblyFixtureTypes(Assembly testAssembly);
    public static ITestCaseOrderer GetAssemblyTestCaseOrderer(Assembly testAssembly);
    public static ITestCollectionOrderer GetAssemblyTestCollectionOrderer(Assembly testAssembly);
    public static IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> GetAssemblyTraits(Assembly testAssembly);
    public static IReadOnlyCollection`1<IBeforeAfterTestAttribute> GetClassBeforeAfterTestAttributes(Type testClass, IReadOnlyCollection`1<IBeforeAfterTestAttribute> collectionBeforeAfterAttributes);
    public static IReadOnlyCollection`1<Type> GetClassClassFixtureTypes(Type testClass, IReadOnlyCollection`1<Type> collectionClassFixtureTypes);
    public static ITestCaseOrderer GetClassTestCaseOrderer(Type testClass);
    public static IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> GetClassTraits(Type testClass, IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> testCollectionTraits);
    public static IReadOnlyCollection`1<IBeforeAfterTestAttribute> GetCollectionBeforeAfterTestAttributes(Type collectionDefinition, IReadOnlyCollection`1<IBeforeAfterTestAttribute> assemblyBeforeAfterTestAttributes);
    public static ICollectionBehaviorAttribute GetCollectionBehavior(Assembly testAssembly);
    public static IReadOnlyDictionary`2<string, ValueTuple`2<Type, CollectionDefinitionAttribute>> GetCollectionDefinitions(Assembly testAssembly);
    public static IReadOnlyCollection`1<Type> GetCollectionClassFixtureTypes(Type collectionDefinition);
    public static IReadOnlyCollection`1<Type> GetCollectionCollectionFixtureTypes(Type collectionDefinition);
    [NullableContextAttribute("2")]
public static ITestCaseOrderer GetCollectionTestCaseOrderer(Type collectionDefinition);
    public static IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> GetCollectionTraits(Type testCollectionDefinition, IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> testAssemblyTraits);
    public static IReadOnlyCollection`1<IBeforeAfterTestAttribute> GetMethodBeforeAfterTestAttributes(MethodInfo testMethod, IReadOnlyCollection`1<IBeforeAfterTestAttribute> classBeforeAfterAttributes);
    public static IReadOnlyCollection`1<IDataAttribute> GetMethodDataAttributes(MethodInfo testMethod);
    public static IReadOnlyCollection`1<IFactAttribute> GetMethodFactAttributes(MethodInfo testMethod);
    public static IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> GetMethodTraits(MethodInfo testMethod, IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> testClassTraits);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.v3.FactDiscoverer : object {
    protected virtual IXunitTestCase CreateTestCase(ITestFrameworkDiscoveryOptions discoveryOptions, IXunitTestMethod testMethod, IFactAttribute factAttribute);
    public virtual ValueTask`1<IReadOnlyCollection`1<IXunitTestCase>> Discover(ITestFrameworkDiscoveryOptions discoveryOptions, IXunitTestMethod testMethod, IFactAttribute factAttribute);
    private static ExecutionErrorTestCase ErrorTestCase(ITestFrameworkDiscoveryOptions discoveryOptions, IXunitTestMethod testMethod, IFactAttribute factAttribute, string message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("category = {fixtureCategory}, cache count = {fixtureCache.Count}, known type count = {knownTypes.Count}")]
public class Xunit.v3.FixtureMappingManager : object {
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) disposed;
    private Dictionary`2<Type, object> fixtureCache;
    private string fixtureCategory;
    private HashSet`1<Type> knownTypes;
    [NullableAttribute("2")]
private FixtureMappingManager parentMappingManager;
    internal IReadOnlyDictionary`2<Type, object> FixtureCache { get; }
    public IReadOnlyCollection`1<Type> LocalFixtureTypes { get; }
    public IReadOnlyCollection`1<Type> GlobalFixtureTypes { get; }
    public FixtureMappingManager(string fixtureCategory, FixtureMappingManager parentMappingManager);
    protected FixtureMappingManager(string fixtureCategory, Object[] cachedFixtureValues);
    internal IReadOnlyDictionary`2<Type, object> get_FixtureCache();
    public IReadOnlyCollection`1<Type> get_LocalFixtureTypes();
    public IReadOnlyCollection`1<Type> get_GlobalFixtureTypes();
    [AsyncStateMachineAttribute("Xunit.v3.FixtureMappingManager/<DisposeAsync>d__13")]
public sealed virtual ValueTask DisposeAsync();
    [AsyncStateMachineAttribute("Xunit.v3.FixtureMappingManager/<GetFixture>d__14")]
public ValueTask`1<object> GetFixture(Type fixtureType);
    public ValueTask InitializeAsync(Type[] fixtureTypes);
    [AsyncStateMachineAttribute("Xunit.v3.FixtureMappingManager/<InitializeAsync>d__16")]
public ValueTask InitializeAsync(IReadOnlyCollection`1<Type> fixtureTypes);
}
[NullableContextAttribute("1")]
public interface Xunit.v3.IAssemblyFixtureAttribute {
    public Type AssemblyFixtureType { get; }
    public abstract virtual Type get_AssemblyFixtureType();
}
[NullableContextAttribute("1")]
public interface Xunit.v3.IBeforeAfterTestAttribute {
    public abstract virtual ValueTask After(MethodInfo methodUnderTest, IXunitTest test);
    public abstract virtual ValueTask Before(MethodInfo methodUnderTest, IXunitTest test);
}
[NullableContextAttribute("1")]
public interface Xunit.v3.ICollectionAttribute {
    public string Name { get; }
    [NullableAttribute("2")]
public Type Type { get; }
    public abstract virtual string get_Name();
    [NullableContextAttribute("2")]
public abstract virtual Type get_Type();
}
[NullableContextAttribute("2")]
public interface Xunit.v3.ICollectionBehaviorAttribute {
    public Type CollectionFactoryType { get; }
    public bool DisableTestParallelization { get; }
    public int MaxParallelThreads { get; }
    public ParallelAlgorithm ParallelAlgorithm { get; }
    public abstract virtual Type get_CollectionFactoryType();
    public abstract virtual bool get_DisableTestParallelization();
    public abstract virtual int get_MaxParallelThreads();
    public abstract virtual ParallelAlgorithm get_ParallelAlgorithm();
}
[NullableContextAttribute("2")]
public interface Xunit.v3.IDataAttribute {
    public Nullable`1<bool> Explicit { get; }
    public string Skip { get; }
    public string TestDisplayName { get; }
    public Nullable`1<int> Timeout { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] Traits { get; }
    public abstract virtual Nullable`1<bool> get_Explicit();
    public abstract virtual string get_Skip();
    public abstract virtual string get_TestDisplayName();
    public abstract virtual Nullable`1<int> get_Timeout();
    public abstract virtual String[] get_Traits();
    [NullableContextAttribute("1")]
public abstract virtual ValueTask`1<IReadOnlyCollection`1<ITheoryDataRow>> GetData(DisposalTracker disposalTracker);
    public abstract virtual bool SupportsDiscoveryEnumeration();
}
[NullableContextAttribute("2")]
public interface Xunit.v3.IFactAttribute {
    public string DisplayName { get; }
    public bool Explicit { get; }
    public string Skip { get; }
    public Type SkipType { get; }
    public string SkipUnless { get; }
    public string SkipWhen { get; }
    public int Timeout { get; }
    public abstract virtual string get_DisplayName();
    public abstract virtual bool get_Explicit();
    public abstract virtual string get_Skip();
    public abstract virtual Type get_SkipType();
    public abstract virtual string get_SkipUnless();
    public abstract virtual string get_SkipWhen();
    public abstract virtual int get_Timeout();
}
public interface Xunit.v3.IMessageBus {
    [NullableContextAttribute("1")]
public abstract virtual bool QueueMessage(IMessageSinkMessage message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.v3.InProcessFrontController : object {
    [NullableAttribute("2")]
private string configFilePath;
    private Lazy`1<ITestFrameworkDiscoverer> discoverer;
    private Lazy`1<ITestFrameworkExecutor> executor;
    private Assembly testAssembly;
    [CompilerGeneratedAttribute]
private string <TestAssemblyUniqueID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TestFrameworkDisplayName>k__BackingField;
    public string TestAssemblyUniqueID { get; }
    public string TestFrameworkDisplayName { get; }
    public InProcessFrontController(ITestFramework testFramework, Assembly testAssembly, string configFilePath);
    [CompilerGeneratedAttribute]
public string get_TestAssemblyUniqueID();
    [CompilerGeneratedAttribute]
public string get_TestFrameworkDisplayName();
    [AsyncStateMachineAttribute("Xunit.v3.InProcessFrontController/<Find>d__11")]
public ValueTask Find(IMessageSink messageSink, ITestFrameworkDiscoveryOptions options, Func`2<ITestCase, bool> filter, Type[] types, Func`3<ITestCase, bool, ValueTask`1<bool>> discoveryCallback);
    [AsyncStateMachineAttribute("Xunit.v3.InProcessFrontController/<FindAndRun>d__12")]
public ValueTask FindAndRun(IMessageSink messageSink, ITestFrameworkDiscoveryOptions discoveryOptions, ITestFrameworkExecutionOptions executionOptions, Func`2<ITestCase, bool> filter, Type[] types);
    public ValueTask Run(IMessageSink messageSink, ITestFrameworkExecutionOptions executionOptions, IReadOnlyCollection`1<ITestCase> testCases);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RequiredMemberAttribute]
[JsonTypeIDAttribute("internal-diagnostic")]
public class Xunit.v3.InternalDiagnosticMessage : MessageSinkMessage {
    [NullableAttribute("2")]
private string message;
    [RequiredMemberAttribute]
public string Message { get; public set; }
    [SetsRequiredMembersAttribute]
public InternalDiagnosticMessage(string message);
    [SetsRequiredMembersAttribute]
public InternalDiagnosticMessage(string messageFormat, object arg0);
    [NullableContextAttribute("2")]
[SetsRequiredMembersAttribute]
public InternalDiagnosticMessage(string messageFormat, object arg0, object arg1);
    [NullableContextAttribute("2")]
[SetsRequiredMembersAttribute]
public InternalDiagnosticMessage(string messageFormat, object arg0, object arg1, object arg2);
    [SetsRequiredMembersAttribute]
public InternalDiagnosticMessage(string messageFormat, Object[] args);
    public sealed virtual string get_Message();
    public void set_Message(string value);
    protected virtual void ValidateObjectState(HashSet`1<string> invalidProperties);
    protected virtual void Serialize(JsonObjectSerializer serializer);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
public interface Xunit.v3.ITestCaseOrderer {
    public abstract virtual IReadOnlyCollection`1<TTestCase> OrderTestCases(IReadOnlyCollection`1<TTestCase> testCases);
}
[NullableContextAttribute("1")]
public interface Xunit.v3.ITestCaseOrdererAttribute {
    public Type OrdererType { get; }
    public abstract virtual Type get_OrdererType();
}
[NullableContextAttribute("1")]
public interface Xunit.v3.ITestCollectionOrderer {
    public abstract virtual IReadOnlyCollection`1<TTestCollection> OrderTestCollections(IReadOnlyCollection`1<TTestCollection> testCollections);
}
[NullableContextAttribute("1")]
public interface Xunit.v3.ITestCollectionOrdererAttribute {
    public Type OrdererType { get; }
    public abstract virtual Type get_OrdererType();
}
[NullableContextAttribute("1")]
public interface Xunit.v3.ITestFramework {
    public string TestFrameworkDisplayName { get; }
    public abstract virtual string get_TestFrameworkDisplayName();
    public abstract virtual void SetTestPipelineStartup(ITestPipelineStartup pipelineStartup);
    public abstract virtual ITestFrameworkDiscoverer GetDiscoverer(Assembly assembly);
    public abstract virtual ITestFrameworkExecutor GetExecutor(Assembly assembly);
}
[NullableContextAttribute("1")]
public interface Xunit.v3.ITestFrameworkAttribute {
    public Type FrameworkType { get; }
    public abstract virtual Type get_FrameworkType();
}
[NullableContextAttribute("1")]
public interface Xunit.v3.ITestFrameworkDiscoverer {
    public ITestAssembly TestAssembly { get; }
    public abstract virtual ITestAssembly get_TestAssembly();
    public abstract virtual ValueTask Find(Func`2<ITestCase, ValueTask`1<bool>> callback, ITestFrameworkDiscoveryOptions discoveryOptions, Type[] types, Nullable`1<CancellationToken> cancellationToken);
}
[NullableContextAttribute("1")]
public interface Xunit.v3.ITestFrameworkExecutor {
    public abstract virtual ValueTask RunTestCases(IReadOnlyCollection`1<ITestCase> testCases, IMessageSink executionMessageSink, ITestFrameworkExecutionOptions executionOptions);
}
[NullableContextAttribute("1")]
public interface Xunit.v3.ITestPipelineStartup {
    public abstract virtual ValueTask StartAsync(IMessageSink diagnosticMessageSink);
    public abstract virtual ValueTask StopAsync();
}
[NullableContextAttribute("1")]
public interface Xunit.v3.ITestPipelineStartupAttribute {
    public Type TestPipelineStartupType { get; }
    public abstract virtual Type get_TestPipelineStartupType();
}
public interface Xunit.v3.ITestTimeoutException {
}
public interface Xunit.v3.ITheoryAttribute {
    public bool DisableDiscoveryEnumeration { get; }
    public bool SkipTestWithoutData { get; }
    public abstract virtual bool get_DisableDiscoveryEnumeration();
    public abstract virtual bool get_SkipTestWithoutData();
}
public interface Xunit.v3.ITraitAttribute {
    public abstract virtual IReadOnlyCollection`1<KeyValuePair`2<string, string>> GetTraits();
}
[NullableContextAttribute("2")]
internal interface Xunit.v3.ITypeAwareDataAttribute {
    public Type MemberType { get; public set; }
    public abstract virtual Type get_MemberType();
    public abstract virtual void set_MemberType(Type value);
}
[NullableContextAttribute("1")]
public interface Xunit.v3.IXunitTest {
    public bool Explicit { get; }
    public IXunitTestCase TestCase { get; }
    public IXunitTestMethod TestMethod { get; }
    public int Timeout { get; }
    public abstract virtual bool get_Explicit();
    public abstract virtual IXunitTestCase get_TestCase();
    public abstract virtual IXunitTestMethod get_TestMethod();
    public abstract virtual int get_Timeout();
}
[NullableContextAttribute("1")]
public interface Xunit.v3.IXunitTestAssembly {
    public Assembly Assembly { get; }
    public IReadOnlyCollection`1<Type> AssemblyFixtureTypes { get; }
    public IReadOnlyCollection`1<IBeforeAfterTestAttribute> BeforeAfterTestAttributes { get; }
    [NullableAttribute("2")]
public ICollectionBehaviorAttribute CollectionBehavior { get; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyDictionary`2<string, ValueTuple`2<Type, CollectionDefinitionAttribute>> CollectionDefinitions { get; }
    public string TargetFramework { get; }
    [NullableAttribute("2")]
public ITestCaseOrderer TestCaseOrderer { get; }
    [NullableAttribute("2")]
public ITestCollectionOrderer TestCollectionOrderer { get; }
    public Version Version { get; }
    public abstract virtual Assembly get_Assembly();
    public abstract virtual IReadOnlyCollection`1<Type> get_AssemblyFixtureTypes();
    public abstract virtual IReadOnlyCollection`1<IBeforeAfterTestAttribute> get_BeforeAfterTestAttributes();
    [NullableContextAttribute("2")]
public abstract virtual ICollectionBehaviorAttribute get_CollectionBehavior();
    public abstract virtual IReadOnlyDictionary`2<string, ValueTuple`2<Type, CollectionDefinitionAttribute>> get_CollectionDefinitions();
    public abstract virtual string get_TargetFramework();
    [NullableContextAttribute("2")]
public abstract virtual ITestCaseOrderer get_TestCaseOrderer();
    [NullableContextAttribute("2")]
public abstract virtual ITestCollectionOrderer get_TestCollectionOrderer();
    public abstract virtual Version get_Version();
}
[NullableContextAttribute("1")]
public interface Xunit.v3.IXunitTestCase {
    public bool Explicit { get; }
    [NullableAttribute("2")]
public string SkipReason { get; }
    [NullableAttribute("2")]
public Type SkipType { get; }
    [NullableAttribute("2")]
public string SkipUnless { get; }
    [NullableAttribute("2")]
public string SkipWhen { get; }
    public IXunitTestClass TestClass { get; }
    public int TestClassMetadataToken { get; }
    public string TestClassName { get; }
    public IXunitTestCollection TestCollection { get; }
    public IXunitTestMethod TestMethod { get; }
    public int TestMethodMetadataToken { get; }
    public string TestMethodName { get; }
    public int Timeout { get; }
    public abstract virtual bool get_Explicit();
    [NullableContextAttribute("2")]
public abstract virtual string get_SkipReason();
    [NullableContextAttribute("2")]
public abstract virtual Type get_SkipType();
    [NullableContextAttribute("2")]
public abstract virtual string get_SkipUnless();
    [NullableContextAttribute("2")]
public abstract virtual string get_SkipWhen();
    public abstract virtual IXunitTestClass get_TestClass();
    public abstract virtual int get_TestClassMetadataToken();
    public abstract virtual string get_TestClassName();
    public abstract virtual IXunitTestCollection get_TestCollection();
    public abstract virtual IXunitTestMethod get_TestMethod();
    public abstract virtual int get_TestMethodMetadataToken();
    public abstract virtual string get_TestMethodName();
    public abstract virtual int get_Timeout();
    public abstract virtual ValueTask`1<RunSummary> RunAsync(ExplicitOption explicitOption, IMessageBus messageBus, Object[] constructorArguments, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource);
}
[NullableContextAttribute("1")]
public interface Xunit.v3.IXunitTestCaseDiscoverer {
    public abstract virtual ValueTask`1<IReadOnlyCollection`1<IXunitTestCase>> Discover(ITestFrameworkDiscoveryOptions discoveryOptions, IXunitTestMethod testMethod, IFactAttribute factAttribute);
}
[NullableContextAttribute("1")]
public interface Xunit.v3.IXunitTestClass {
    public IReadOnlyCollection`1<IBeforeAfterTestAttribute> BeforeAfterTestAttributes { get; }
    public Type Class { get; }
    public IReadOnlyCollection`1<Type> ClassFixtureTypes { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyCollection`1<ConstructorInfo> Constructors { get; }
    public IReadOnlyCollection`1<MethodInfo> Methods { get; }
    [NullableAttribute("2")]
public ITestCaseOrderer TestCaseOrderer { get; }
    public IXunitTestCollection TestCollection { get; }
    public abstract virtual IReadOnlyCollection`1<IBeforeAfterTestAttribute> get_BeforeAfterTestAttributes();
    public abstract virtual Type get_Class();
    public abstract virtual IReadOnlyCollection`1<Type> get_ClassFixtureTypes();
    public abstract virtual IReadOnlyCollection`1<ConstructorInfo> get_Constructors();
    public abstract virtual IReadOnlyCollection`1<MethodInfo> get_Methods();
    [NullableContextAttribute("2")]
public abstract virtual ITestCaseOrderer get_TestCaseOrderer();
    public abstract virtual IXunitTestCollection get_TestCollection();
}
[NullableContextAttribute("1")]
public interface Xunit.v3.IXunitTestCollection {
    public IReadOnlyCollection`1<IBeforeAfterTestAttribute> BeforeAfterTestAttributes { get; }
    public IReadOnlyCollection`1<Type> ClassFixtureTypes { get; }
    [NullableAttribute("2")]
public Type CollectionDefinition { get; }
    public IReadOnlyCollection`1<Type> CollectionFixtureTypes { get; }
    public bool DisableParallelization { get; }
    public IXunitTestAssembly TestAssembly { get; }
    [NullableAttribute("2")]
public ITestCaseOrderer TestCaseOrderer { get; }
    public abstract virtual IReadOnlyCollection`1<IBeforeAfterTestAttribute> get_BeforeAfterTestAttributes();
    public abstract virtual IReadOnlyCollection`1<Type> get_ClassFixtureTypes();
    [NullableContextAttribute("2")]
public abstract virtual Type get_CollectionDefinition();
    public abstract virtual IReadOnlyCollection`1<Type> get_CollectionFixtureTypes();
    public abstract virtual bool get_DisableParallelization();
    public abstract virtual IXunitTestAssembly get_TestAssembly();
    [NullableContextAttribute("2")]
public abstract virtual ITestCaseOrderer get_TestCaseOrderer();
}
[NullableContextAttribute("1")]
public interface Xunit.v3.IXunitTestCollectionFactory {
    public string DisplayName { get; }
    public abstract virtual string get_DisplayName();
    public abstract virtual IXunitTestCollection Get(Type testClass);
}
[NullableContextAttribute("1")]
public interface Xunit.v3.IXunitTestMethod {
    public IReadOnlyCollection`1<IBeforeAfterTestAttribute> BeforeAfterTestAttributes { get; }
    public IReadOnlyCollection`1<IDataAttribute> DataAttributes { get; }
    public IReadOnlyCollection`1<IFactAttribute> FactAttributes { get; }
    public bool IsGenericMethodDefinition { get; }
    public MethodInfo Method { get; }
    public IReadOnlyCollection`1<ParameterInfo> Parameters { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Object[] TestMethodArguments { get; }
    public IXunitTestClass TestClass { get; }
    public abstract virtual IReadOnlyCollection`1<IBeforeAfterTestAttribute> get_BeforeAfterTestAttributes();
    public abstract virtual IReadOnlyCollection`1<IDataAttribute> get_DataAttributes();
    public abstract virtual IReadOnlyCollection`1<IFactAttribute> get_FactAttributes();
    public abstract virtual bool get_IsGenericMethodDefinition();
    public abstract virtual MethodInfo get_Method();
    public abstract virtual IReadOnlyCollection`1<ParameterInfo> get_Parameters();
    public abstract virtual Object[] get_TestMethodArguments();
    public abstract virtual IXunitTestClass get_TestClass();
    public abstract virtual string GetDisplayName(string baseDisplayName, Object[] testMethodArguments, Type[] methodGenericTypes);
    public abstract virtual MethodInfo MakeGenericMethod(Type[] genericTypes);
    public abstract virtual Type[] ResolveGenericTypes(Object[] arguments);
    public abstract virtual Object[] ResolveMethodArguments(Object[] arguments);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.v3.MaxConcurrencySyncContext : SynchronizationContext {
    private bool disposed;
    private ManualResetEvent terminate;
    private List`1<Thread> workerThreads;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ConcurrentQueue`1<ValueTuple`3<SendOrPostCallback, object, ExecutionContext>> workQueue;
    private AutoResetEvent workReady;
    public MaxConcurrencySyncContext(int maximumConcurrencyLevel);
    public sealed virtual void Dispose();
    public virtual void Post(SendOrPostCallback d, object state);
    public virtual void Send(SendOrPostCallback d, object state);
    [SecuritySafeCriticalAttribute]
private void WorkerThreadProc();
    [SecuritySafeCriticalAttribute]
private void RunOnSyncContext(SendOrPostCallback callback, object state);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private Thread <.ctor>b__5_0(int _);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("64")]
public abstract class Xunit.v3.MemberDataAttributeBase : DataAttribute {
    private static Lazy`1<string> supportedDataSignatures;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Object[] <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableDiscoveryEnumeration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MemberName>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Type <MemberType>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Object[] Arguments { get; }
    public bool DisableDiscoveryEnumeration { get; public set; }
    public string MemberName { get; }
    [NullableAttribute("2")]
public Type MemberType { get; public set; }
    protected MemberDataAttributeBase(string memberName, Object[] arguments);
    private static MemberDataAttributeBase();
    [CompilerGeneratedAttribute]
public Object[] get_Arguments();
    [CompilerGeneratedAttribute]
public bool get_DisableDiscoveryEnumeration();
    [CompilerGeneratedAttribute]
public void set_DisableDiscoveryEnumeration(bool value);
    [CompilerGeneratedAttribute]
public string get_MemberName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual Type get_MemberType();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void set_MemberType(Type value);
    protected virtual ITheoryDataRow ConvertDataRow(object dataRow);
    public virtual ValueTask`1<IReadOnlyCollection`1<ITheoryDataRow>> GetData(DisposalTracker disposalTracker);
    [AsyncStateMachineAttribute("Xunit.v3.MemberDataAttributeBase/<GetDataAsync>d__19")]
private ValueTask`1<IReadOnlyCollection`1<ITheoryDataRow>> GetDataAsync(object returnValue, Type type);
    [NullableContextAttribute("2")]
private Func`1<object> GetFieldAccessor(Type type);
    [NullableContextAttribute("2")]
private Func`1<object> GetMethodAccessor(Type type);
    [NullableContextAttribute("2")]
private Func`1<object> GetPropertyAccessor(Type type);
    [IteratorStateMachineAttribute("Xunit.v3.MemberDataAttributeBase/<GetTypesForMemberResolution>d__23")]
private static IEnumerable`1<Type> GetTypesForMemberResolution(Type typeToInspect, bool includeInterfaces);
    private static bool ParameterTypesCompatible(ParameterInfo[] parameters, Type[] argumentTypes);
    public virtual bool SupportsDiscoveryEnumeration();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Xunit.v3.MessageSinkMessage : object {
    [NullableAttribute("2")]
private string type;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ConcurrentDictionary`2<Type, string> typeToTypeIDMappings;
    private static MessageSinkMessage();
    public void ValidateObjectState();
    protected abstract virtual void ValidateObjectState(HashSet`1<string> invalidProperties);
    protected static void ValidatePropertyIsNotNull(object propertyValue, string propertyName, HashSet`1<string> invalidProperties);
    protected abstract virtual void Serialize(JsonObjectSerializer serializer);
    protected static string ToDisplayString(String[] array);
    protected static string ToDisplayString(T[] array);
    public sealed virtual string ToJson();
}
public class Xunit.v3.RunSummary : ValueType {
    public int Total;
    public int Failed;
    public int Skipped;
    public int NotRun;
    public decimal Time;
    public void Aggregate(RunSummary other);
    [IsReadOnlyAttribute]
[NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RequiredMemberAttribute]
[JsonTypeIDAttribute("test-assembly-cleanup-failure")]
public class Xunit.v3.TestAssemblyCleanupFailure : TestAssemblyMessage {
    [NullableAttribute("2")]
private Int32[] exceptionParentIndices;
    [NullableAttribute("2")]
private String[] exceptionTypes;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private String[] messages;
    [NullableAttribute("2")]
private String[] stackTraces;
    [RequiredMemberAttribute]
public Int32[] ExceptionParentIndices { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[RequiredMemberAttribute]
public String[] ExceptionTypes { get; public set; }
    [RequiredMemberAttribute]
public String[] Messages { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[RequiredMemberAttribute]
public String[] StackTraces { get; public set; }
    public sealed virtual Int32[] get_ExceptionParentIndices();
    public void set_ExceptionParentIndices(Int32[] value);
    public sealed virtual String[] get_ExceptionTypes();
    public void set_ExceptionTypes(String[] value);
    public sealed virtual String[] get_Messages();
    public void set_Messages(String[] value);
    public sealed virtual String[] get_StackTraces();
    public void set_StackTraces(String[] value);
    protected virtual void ValidateObjectState(HashSet`1<string> invalidProperties);
    public static ITestAssemblyCleanupFailure FromException(Exception ex, string assemblyUniqueID);
    protected virtual void Serialize(JsonObjectSerializer serializer);
    public virtual string ToString();
}
[RequiredMemberAttribute]
[JsonTypeIDAttribute("test-assembly-finished")]
public class Xunit.v3.TestAssemblyFinished : TestAssemblyMessage {
    private Nullable`1<decimal> executionTime;
    private Nullable`1<DateTimeOffset> finishTime;
    private Nullable`1<int> testsFailed;
    private Nullable`1<int> testsNotRun;
    private Nullable`1<int> testsSkipped;
    private Nullable`1<int> testsTotal;
    [RequiredMemberAttribute]
public decimal ExecutionTime { get; public set; }
    [RequiredMemberAttribute]
public DateTimeOffset FinishTime { get; public set; }
    [RequiredMemberAttribute]
public int TestsFailed { get; public set; }
    [RequiredMemberAttribute]
public int TestsNotRun { get; public set; }
    [RequiredMemberAttribute]
public int TestsSkipped { get; public set; }
    [RequiredMemberAttribute]
public int TestsTotal { get; public set; }
    public sealed virtual decimal get_ExecutionTime();
    public void set_ExecutionTime(decimal value);
    public sealed virtual DateTimeOffset get_FinishTime();
    public void set_FinishTime(DateTimeOffset value);
    public sealed virtual int get_TestsFailed();
    public void set_TestsFailed(int value);
    public sealed virtual int get_TestsNotRun();
    public void set_TestsNotRun(int value);
    public sealed virtual int get_TestsSkipped();
    public void set_TestsSkipped(int value);
    public sealed virtual int get_TestsTotal();
    public void set_TestsTotal(int value);
    [NullableContextAttribute("1")]
protected virtual void ValidateObjectState(HashSet`1<string> invalidProperties);
    [NullableContextAttribute("1")]
protected virtual void Serialize(JsonObjectSerializer serializer);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RequiredMemberAttribute]
public abstract class Xunit.v3.TestAssemblyMessage : MessageSinkMessage {
    [NullableAttribute("2")]
private string assemblyUniqueID;
    [RequiredMemberAttribute]
public string AssemblyUniqueID { get; public set; }
    public sealed virtual string get_AssemblyUniqueID();
    public void set_AssemblyUniqueID(string value);
    protected virtual void ValidateObjectState(HashSet`1<string> invalidProperties);
    protected virtual void Serialize(JsonObjectSerializer serializer);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Xunit.v3.TestAssemblyRunner`4 : object {
    protected abstract virtual ValueTask`1<bool> OnTestAssemblyCleanupFailure(TContext ctxt, Exception exception);
    [NullableContextAttribute("0")]
protected abstract virtual ValueTask`1<bool> OnTestAssemblyFinished(TContext ctxt, RunSummary summary);
    [NullableContextAttribute("0")]
protected abstract virtual ValueTask`1<bool> OnTestAssemblyStarting(TContext ctxt);
    protected virtual List`1<ValueTuple`2<TTestCollection, List`1<TTestCase>>> OrderTestCollections(TContext ctxt);
    private static List`1<ValueTuple`2<TTestCollection, List`1<TTestCase>>> OrderTestCollectionsDefault(TContext ctxt);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Xunit.v3.TestAssemblyRunner`4/<RunAsync>d__6")]
protected ValueTask`1<RunSummary> RunAsync(TContext ctxt);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Xunit.v3.TestAssemblyRunner`4/<RunTestCollectionsAsync>d__7")]
protected virtual ValueTask`1<RunSummary> RunTestCollectionsAsync(TContext ctxt, Exception exception);
    protected abstract virtual ValueTask`1<RunSummary> RunTestCollectionAsync(TContext ctxt, TTestCollection testCollection, IReadOnlyCollection`1<TTestCase> testCases, Exception exception);
    protected virtual void SetTestContext(TContext ctxt, TestEngineStatus testAssemblyStatus);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.v3.TestAssemblyRunnerContext`2 : object {
    [NullableAttribute("2")]
private IMessageBus messageBus;
    [NullableAttribute("2")]
private string startupCurrentDirectory;
    [CompilerGeneratedAttribute]
private ExceptionAggregator <Aggregator>k__BackingField;
    [CompilerGeneratedAttribute]
private CancellationTokenSource <CancellationTokenSource>k__BackingField;
    [CompilerGeneratedAttribute]
private IMessageSink <ExecutionMessageSink>k__BackingField;
    [CompilerGeneratedAttribute]
private ITestFrameworkExecutionOptions <ExecutionOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private TTestAssembly <TestAssembly>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<TTestCase> <TestCases>k__BackingField;
    public ExceptionAggregator Aggregator { get; }
    public CancellationTokenSource CancellationTokenSource { get; }
    protected IMessageSink ExecutionMessageSink { get; }
    protected ITestFrameworkExecutionOptions ExecutionOptions { get; }
    public IMessageBus MessageBus { get; }
    public TTestAssembly TestAssembly { get; }
    public IReadOnlyCollection`1<TTestCase> TestCases { get; protected set; }
    public TestAssemblyRunnerContext`2(TTestAssembly testAssembly, IReadOnlyCollection`1<TTestCase> testCases, IMessageSink executionMessageSink, ITestFrameworkExecutionOptions executionOptions);
    [CompilerGeneratedAttribute]
public virtual ExceptionAggregator get_Aggregator();
    [CompilerGeneratedAttribute]
public virtual CancellationTokenSource get_CancellationTokenSource();
    [CompilerGeneratedAttribute]
protected IMessageSink get_ExecutionMessageSink();
    [CompilerGeneratedAttribute]
protected ITestFrameworkExecutionOptions get_ExecutionOptions();
    public IMessageBus get_MessageBus();
    [CompilerGeneratedAttribute]
public TTestAssembly get_TestAssembly();
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<TTestCase> get_TestCases();
    [CompilerGeneratedAttribute]
protected void set_TestCases(IReadOnlyCollection`1<TTestCase> value);
    protected virtual IMessageBus CreateMessageBus();
    public virtual ValueTask DisposeAsync();
    public virtual ValueTask InitializeAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RequiredMemberAttribute]
[JsonTypeIDAttribute("test-assembly-starting")]
public class Xunit.v3.TestAssemblyStarting : TestAssemblyMessage {
    [NullableAttribute("2")]
private string assemblyName;
    [NullableAttribute("2")]
private string assemblyPath;
    [NullableAttribute("2")]
private string testEnvironment;
    [NullableAttribute("2")]
private string testFrameworkDisplayName;
    private Nullable`1<DateTimeOffset> startTime;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> traits;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <ConfigFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Seed>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <TargetFramework>k__BackingField;
    [RequiredMemberAttribute]
public string AssemblyName { get; public set; }
    [RequiredMemberAttribute]
public string AssemblyPath { get; public set; }
    [NullableAttribute("2")]
[RequiredMemberAttribute]
public string ConfigFilePath { get; public set; }
    [RequiredMemberAttribute]
public Nullable`1<int> Seed { get; public set; }
    [RequiredMemberAttribute]
public DateTimeOffset StartTime { get; public set; }
    [NullableAttribute("2")]
[RequiredMemberAttribute]
public string TargetFramework { get; public set; }
    [RequiredMemberAttribute]
public string TestEnvironment { get; public set; }
    [RequiredMemberAttribute]
public string TestFrameworkDisplayName { get; public set; }
    [RequiredMemberAttribute]
public IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> Traits { get; public set; }
    private string Xunit.Sdk.IAssemblyMetadata.UniqueID { get; }
    public sealed virtual string get_AssemblyName();
    public void set_AssemblyName(string value);
    public sealed virtual string get_AssemblyPath();
    public void set_AssemblyPath(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual string get_ConfigFilePath();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ConfigFilePath(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_Seed();
    [CompilerGeneratedAttribute]
public void set_Seed(Nullable`1<int> value);
    public sealed virtual DateTimeOffset get_StartTime();
    public void set_StartTime(DateTimeOffset value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual string get_TargetFramework();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_TargetFramework(string value);
    public sealed virtual string get_TestEnvironment();
    public void set_TestEnvironment(string value);
    public sealed virtual string get_TestFrameworkDisplayName();
    public void set_TestFrameworkDisplayName(string value);
    public sealed virtual IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> get_Traits();
    public void set_Traits(IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> value);
    protected virtual void ValidateObjectState(HashSet`1<string> invalidProperties);
    private sealed virtual override string Xunit.Sdk.IAssemblyMetadata.get_UniqueID();
    protected virtual void Serialize(JsonObjectSerializer serializer);
    public virtual string ToString();
}
[RequiredMemberAttribute]
[JsonTypeIDAttribute("test-case-cleanup-failure")]
public class Xunit.v3.TestCaseCleanupFailure : TestCaseMessage {
    [NullableAttribute("2")]
private Int32[] exceptionParentIndices;
    [NullableAttribute("2")]
private String[] exceptionTypes;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private String[] messages;
    [NullableAttribute("2")]
private String[] stackTraces;
    [NullableAttribute("1")]
[RequiredMemberAttribute]
public Int32[] ExceptionParentIndices { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[RequiredMemberAttribute]
public String[] ExceptionTypes { get; public set; }
    [NullableAttribute("1")]
[RequiredMemberAttribute]
public String[] Messages { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[RequiredMemberAttribute]
public String[] StackTraces { get; public set; }
    [NullableContextAttribute("1")]
public sealed virtual Int32[] get_ExceptionParentIndices();
    [NullableContextAttribute("1")]
public void set_ExceptionParentIndices(Int32[] value);
    public sealed virtual String[] get_ExceptionTypes();
    public void set_ExceptionTypes(String[] value);
    [NullableContextAttribute("1")]
public sealed virtual String[] get_Messages();
    [NullableContextAttribute("1")]
public void set_Messages(String[] value);
    public sealed virtual String[] get_StackTraces();
    public void set_StackTraces(String[] value);
    [NullableContextAttribute("1")]
protected virtual void ValidateObjectState(HashSet`1<string> invalidProperties);
    [NullableContextAttribute("1")]
public static ITestCaseCleanupFailure FromException(Exception ex, string assemblyUniqueID, string testCollectionUniqueID, string testClassUniqueID, string testMethodUniqueID, string testCaseUniqueID);
    [NullableContextAttribute("1")]
protected virtual void Serialize(JsonObjectSerializer serializer);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[RequiredMemberAttribute]
[JsonTypeIDAttribute("test-case-discovered")]
public class Xunit.v3.TestCaseDiscovered : TestCaseMessage {
    private string serialization;
    private string testCaseDisplayName;
    private string testClassName;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> traits;
    [CompilerGeneratedAttribute]
private string <SkipReason>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <SourceLineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <TestClassMetadataToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TestClassNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <TestMethodMetadataToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TestMethodName>k__BackingField;
    [NullableAttribute("1")]
[RequiredMemberAttribute]
public string Serialization { get; public set; }
    [RequiredMemberAttribute]
public string SkipReason { get; public set; }
    [RequiredMemberAttribute]
public string SourceFilePath { get; public set; }
    [RequiredMemberAttribute]
public Nullable`1<int> SourceLineNumber { get; public set; }
    [NullableAttribute("1")]
[RequiredMemberAttribute]
public string TestCaseDisplayName { get; public set; }
    [RequiredMemberAttribute]
public Nullable`1<int> TestClassMetadataToken { get; public set; }
    [RequiredMemberAttribute]
[NotNullIfNotNullAttribute("TestMethodName")]
public string TestClassName { get; public set; }
    [RequiredMemberAttribute]
public string TestClassNamespace { get; public set; }
    [RequiredMemberAttribute]
public Nullable`1<int> TestMethodMetadataToken { get; public set; }
    [RequiredMemberAttribute]
public string TestMethodName { get; public set; }
    [NullableAttribute("1")]
[RequiredMemberAttribute]
public IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> Traits { get; public set; }
    [NullableAttribute("1")]
private string Xunit.Sdk.ITestCaseMetadata.UniqueID { get; }
    [NullableContextAttribute("1")]
public sealed virtual string get_Serialization();
    [NullableContextAttribute("1")]
public void set_Serialization(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_SkipReason();
    [CompilerGeneratedAttribute]
public void set_SkipReason(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_SourceFilePath();
    [CompilerGeneratedAttribute]
public void set_SourceFilePath(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_SourceLineNumber();
    [CompilerGeneratedAttribute]
public void set_SourceLineNumber(Nullable`1<int> value);
    [NullableContextAttribute("1")]
public sealed virtual string get_TestCaseDisplayName();
    [NullableContextAttribute("1")]
public void set_TestCaseDisplayName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_TestClassMetadataToken();
    [CompilerGeneratedAttribute]
public void set_TestClassMetadataToken(Nullable`1<int> value);
    public sealed virtual string get_TestClassName();
    public void set_TestClassName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_TestClassNamespace();
    [CompilerGeneratedAttribute]
public void set_TestClassNamespace(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_TestMethodMetadataToken();
    [CompilerGeneratedAttribute]
public void set_TestMethodMetadataToken(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_TestMethodName();
    [CompilerGeneratedAttribute]
public void set_TestMethodName(string value);
    [NullableContextAttribute("1")]
public sealed virtual IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> get_Traits();
    [NullableContextAttribute("1")]
public void set_Traits(IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> value);
    [NullableContextAttribute("1")]
protected virtual void ValidateObjectState(HashSet`1<string> invalidProperties);
    [NullableContextAttribute("1")]
private sealed virtual override string Xunit.Sdk.ITestCaseMetadata.get_UniqueID();
    [NullableContextAttribute("1")]
protected virtual void Serialize(JsonObjectSerializer serializer);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[RequiredMemberAttribute]
[JsonTypeIDAttribute("test-case-finished")]
public class Xunit.v3.TestCaseFinished : TestCaseMessage {
    private Nullable`1<decimal> executionTime;
    private Nullable`1<int> testsFailed;
    private Nullable`1<int> testsNotRun;
    private Nullable`1<int> testsSkipped;
    private Nullable`1<int> testsTotal;
    [RequiredMemberAttribute]
public decimal ExecutionTime { get; public set; }
    [RequiredMemberAttribute]
public int TestsFailed { get; public set; }
    [RequiredMemberAttribute]
public int TestsNotRun { get; public set; }
    [RequiredMemberAttribute]
public int TestsSkipped { get; public set; }
    [RequiredMemberAttribute]
public int TestsTotal { get; public set; }
    public sealed virtual decimal get_ExecutionTime();
    public void set_ExecutionTime(decimal value);
    public sealed virtual int get_TestsFailed();
    public void set_TestsFailed(int value);
    public sealed virtual int get_TestsNotRun();
    public void set_TestsNotRun(int value);
    public sealed virtual int get_TestsSkipped();
    public void set_TestsSkipped(int value);
    public sealed virtual int get_TestsTotal();
    public void set_TestsTotal(int value);
    [NullableContextAttribute("1")]
protected virtual void ValidateObjectState(HashSet`1<string> invalidProperties);
    [NullableContextAttribute("1")]
protected virtual void Serialize(JsonObjectSerializer serializer);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[RequiredMemberAttribute]
public abstract class Xunit.v3.TestCaseMessage : TestMethodMessage {
    [NullableAttribute("2")]
private string testCaseUniqueID;
    [NullableAttribute("1")]
[RequiredMemberAttribute]
public string TestCaseUniqueID { get; public set; }
    [NullableContextAttribute("1")]
public sealed virtual string get_TestCaseUniqueID();
    [NullableContextAttribute("1")]
public void set_TestCaseUniqueID(string value);
    [NullableContextAttribute("1")]
protected virtual void ValidateObjectState(HashSet`1<string> invalidProperties);
    [NullableContextAttribute("1")]
protected virtual void Serialize(JsonObjectSerializer serializer);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
public abstract class Xunit.v3.TestCaseRunner`2 : object {
    [NullableContextAttribute("1")]
protected abstract virtual ValueTask`1<bool> OnTestCaseCleanupFailure(TContext ctxt, Exception exception);
    protected abstract virtual ValueTask`1<bool> OnTestCaseFinished(TContext ctxt, RunSummary summary);
    protected abstract virtual ValueTask`1<bool> OnTestCaseStarting(TContext ctxt);
    [AsyncStateMachineAttribute("Xunit.v3.TestCaseRunner`2/<RunAsync>d__4")]
protected ValueTask`1<RunSummary> RunAsync(TContext ctxt);
    protected abstract virtual ValueTask`1<RunSummary> RunTestsAsync(TContext ctxt, Exception exception);
    [NullableContextAttribute("1")]
protected virtual void SetTestContext(TContext ctxt, TestEngineStatus testCaseStatus);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.v3.TestCaseRunnerContext`1 : ContextBase {
    [CompilerGeneratedAttribute]
private TTestCase <TestCase>k__BackingField;
    public TTestCase TestCase { get; }
    public TestCaseRunnerContext`1(TTestCase testCase, ExplicitOption explicitOption, IMessageBus messageBus, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource);
    [CompilerGeneratedAttribute]
public TTestCase get_TestCase();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[RequiredMemberAttribute]
[JsonTypeIDAttribute("test-case-starting")]
public class Xunit.v3.TestCaseStarting : TestCaseMessage {
    private string testCaseDisplayName;
    private string testClassName;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> traits;
    [CompilerGeneratedAttribute]
private string <SkipReason>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <SourceLineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <TestClassMetadataToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TestClassNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <TestMethodMetadataToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TestMethodName>k__BackingField;
    [RequiredMemberAttribute]
public string SkipReason { get; public set; }
    [RequiredMemberAttribute]
public string SourceFilePath { get; public set; }
    [RequiredMemberAttribute]
public Nullable`1<int> SourceLineNumber { get; public set; }
    [NullableAttribute("1")]
[RequiredMemberAttribute]
public string TestCaseDisplayName { get; public set; }
    [RequiredMemberAttribute]
public Nullable`1<int> TestClassMetadataToken { get; public set; }
    [RequiredMemberAttribute]
[NotNullIfNotNullAttribute("TestMethodName")]
public string TestClassName { get; public set; }
    [RequiredMemberAttribute]
public string TestClassNamespace { get; public set; }
    [RequiredMemberAttribute]
public Nullable`1<int> TestMethodMetadataToken { get; public set; }
    [RequiredMemberAttribute]
public string TestMethodName { get; public set; }
    [NullableAttribute("1")]
[RequiredMemberAttribute]
public IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> Traits { get; public set; }
    [NullableAttribute("1")]
private string Xunit.Sdk.ITestCaseMetadata.UniqueID { get; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_SkipReason();
    [CompilerGeneratedAttribute]
public void set_SkipReason(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_SourceFilePath();
    [CompilerGeneratedAttribute]
public void set_SourceFilePath(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_SourceLineNumber();
    [CompilerGeneratedAttribute]
public void set_SourceLineNumber(Nullable`1<int> value);
    [NullableContextAttribute("1")]
public sealed virtual string get_TestCaseDisplayName();
    [NullableContextAttribute("1")]
public void set_TestCaseDisplayName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_TestClassMetadataToken();
    [CompilerGeneratedAttribute]
public void set_TestClassMetadataToken(Nullable`1<int> value);
    public sealed virtual string get_TestClassName();
    public void set_TestClassName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_TestClassNamespace();
    [CompilerGeneratedAttribute]
public void set_TestClassNamespace(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_TestMethodMetadataToken();
    [CompilerGeneratedAttribute]
public void set_TestMethodMetadataToken(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_TestMethodName();
    [CompilerGeneratedAttribute]
public void set_TestMethodName(string value);
    [NullableContextAttribute("1")]
public sealed virtual IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> get_Traits();
    [NullableContextAttribute("1")]
public void set_Traits(IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> value);
    [NullableContextAttribute("1")]
protected virtual void ValidateObjectState(HashSet`1<string> invalidProperties);
    [NullableContextAttribute("1")]
private sealed virtual override string Xunit.Sdk.ITestCaseMetadata.get_UniqueID();
    [NullableContextAttribute("1")]
protected virtual void Serialize(JsonObjectSerializer serializer);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RequiredMemberAttribute]
[JsonTypeIDAttribute("test-class-cleanup-failure")]
public class Xunit.v3.TestClassCleanupFailure : TestClassMessage {
    [NullableAttribute("2")]
private Int32[] exceptionParentIndices;
    [NullableAttribute("2")]
private String[] exceptionTypes;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private String[] messages;
    [NullableAttribute("2")]
private String[] stackTraces;
    [RequiredMemberAttribute]
public Int32[] ExceptionParentIndices { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[RequiredMemberAttribute]
public String[] ExceptionTypes { get; public set; }
    [RequiredMemberAttribute]
public String[] Messages { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[RequiredMemberAttribute]
public String[] StackTraces { get; public set; }
    public sealed virtual Int32[] get_ExceptionParentIndices();
    public void set_ExceptionParentIndices(Int32[] value);
    public sealed virtual String[] get_ExceptionTypes();
    public void set_ExceptionTypes(String[] value);
    public sealed virtual String[] get_Messages();
    public void set_Messages(String[] value);
    public sealed virtual String[] get_StackTraces();
    public void set_StackTraces(String[] value);
    protected virtual void ValidateObjectState(HashSet`1<string> invalidProperties);
    public static ITestClassCleanupFailure FromException(Exception ex, string assemblyUniqueID, string testCollectionUniqueID, string testClassUniqueID);
    protected virtual void Serialize(JsonObjectSerializer serializer);
    public virtual string ToString();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Xunit.v3.TestClassComparer : object {
    [NullableAttribute("1")]
public static TestClassComparer Instance;
    private static TestClassComparer();
    public sealed virtual bool Equals(ITestClass x, ITestClass y);
    public sealed virtual int GetHashCode(ITestClass obj);
}
[JsonTypeIDAttribute("test-class-construction-finished")]
public class Xunit.v3.TestClassConstructionFinished : TestMessage {
}
[JsonTypeIDAttribute("test-class-construction-starting")]
public class Xunit.v3.TestClassConstructionStarting : TestMessage {
}
[JsonTypeIDAttribute("test-class-dispose-finished")]
public class Xunit.v3.TestClassDisposeFinished : TestMessage {
}
[JsonTypeIDAttribute("test-class-dispose-starting")]
public class Xunit.v3.TestClassDisposeStarting : TestMessage {
}
[RequiredMemberAttribute]
[JsonTypeIDAttribute("test-class-finished")]
public class Xunit.v3.TestClassFinished : TestClassMessage {
    private Nullable`1<decimal> executionTime;
    private Nullable`1<int> testsFailed;
    private Nullable`1<int> testsNotRun;
    private Nullable`1<int> testsSkipped;
    private Nullable`1<int> testsTotal;
    [RequiredMemberAttribute]
public decimal ExecutionTime { get; public set; }
    [RequiredMemberAttribute]
public int TestsFailed { get; public set; }
    [RequiredMemberAttribute]
public int TestsNotRun { get; public set; }
    [RequiredMemberAttribute]
public int TestsSkipped { get; public set; }
    [RequiredMemberAttribute]
public int TestsTotal { get; public set; }
    public sealed virtual decimal get_ExecutionTime();
    public void set_ExecutionTime(decimal value);
    public sealed virtual int get_TestsFailed();
    public void set_TestsFailed(int value);
    public sealed virtual int get_TestsNotRun();
    public void set_TestsNotRun(int value);
    public sealed virtual int get_TestsSkipped();
    public void set_TestsSkipped(int value);
    public sealed virtual int get_TestsTotal();
    public void set_TestsTotal(int value);
    [NullableContextAttribute("1")]
protected virtual void ValidateObjectState(HashSet`1<string> invalidProperties);
    [NullableContextAttribute("1")]
protected virtual void Serialize(JsonObjectSerializer serializer);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[RequiredMemberAttribute]
public abstract class Xunit.v3.TestClassMessage : TestCollectionMessage {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <TestClassUniqueID>k__BackingField;
    [NullableAttribute("2")]
[RequiredMemberAttribute]
public string TestClassUniqueID { get; public set; }
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual string get_TestClassUniqueID();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_TestClassUniqueID(string value);
    [NullableContextAttribute("1")]
protected virtual void Serialize(JsonObjectSerializer serializer);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Xunit.v3.TestClassRunner`4 : object {
    protected virtual ValueTask`1<Object[]> CreateTestClassConstructorArguments(TContext ctxt);
    protected abstract virtual ValueTask`1<bool> OnTestClassCleanupFailure(TContext ctxt, Exception exception);
    [NullableContextAttribute("0")]
protected abstract virtual ValueTask`1<bool> OnTestClassFinished(TContext ctxt, RunSummary summary);
    [NullableContextAttribute("0")]
protected abstract virtual ValueTask`1<bool> OnTestClassStarting(TContext ctxt);
    protected virtual IReadOnlyCollection`1<TTestCase> OrderTestCases(TContext ctxt);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Xunit.v3.TestClassRunner`4/<RunAsync>d__6")]
protected ValueTask`1<RunSummary> RunAsync(TContext ctxt);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Xunit.v3.TestClassRunner`4/<RunTestMethodsAsync>d__7")]
protected virtual ValueTask`1<RunSummary> RunTestMethodsAsync(TContext ctxt, Exception exception);
    protected abstract virtual ValueTask`1<RunSummary> RunTestMethodAsync(TContext ctxt, TTestMethod testMethod, IReadOnlyCollection`1<TTestCase> testCases, Object[] constructorArguments, Exception exception);
    protected virtual void SetTestContext(TContext ctxt, TestEngineStatus testClassStatus);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.v3.TestClassRunnerContext`2 : ContextBase {
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<TTestCase> <TestCases>k__BackingField;
    [CompilerGeneratedAttribute]
private TTestClass <TestClass>k__BackingField;
    public IReadOnlyCollection`1<TTestCase> TestCases { get; }
    public TTestClass TestClass { get; }
    public TestClassRunnerContext`2(TTestClass testClass, IReadOnlyCollection`1<TTestCase> testCases, ExplicitOption explicitOption, IMessageBus messageBus, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource);
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<TTestCase> get_TestCases();
    [CompilerGeneratedAttribute]
public TTestClass get_TestClass();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RequiredMemberAttribute]
[JsonTypeIDAttribute("test-class-starting")]
public class Xunit.v3.TestClassStarting : TestClassMessage {
    [NullableAttribute("2")]
private string testClassName;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> traits;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <TestClassNamespace>k__BackingField;
    [RequiredMemberAttribute]
public string TestClassName { get; public set; }
    [NullableAttribute("2")]
[RequiredMemberAttribute]
public string TestClassNamespace { get; public set; }
    [RequiredMemberAttribute]
public IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> Traits { get; public set; }
    private string Xunit.Sdk.ITestClassMetadata.UniqueID { get; }
    public sealed virtual string get_TestClassName();
    public void set_TestClassName(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual string get_TestClassNamespace();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_TestClassNamespace(string value);
    public sealed virtual IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> get_Traits();
    public void set_Traits(IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> value);
    protected virtual void ValidateObjectState(HashSet`1<string> invalidProperties);
    private sealed virtual override string Xunit.Sdk.ITestClassMetadata.get_UniqueID();
    protected virtual void Serialize(JsonObjectSerializer serializer);
    public virtual string ToString();
}
[RequiredMemberAttribute]
[JsonTypeIDAttribute("test-cleanup-failure")]
public class Xunit.v3.TestCleanupFailure : TestMessage {
    [NullableAttribute("2")]
private Int32[] exceptionParentIndices;
    [NullableAttribute("2")]
private String[] exceptionTypes;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private String[] messages;
    [NullableAttribute("2")]
private String[] stackTraces;
    [NullableAttribute("1")]
[RequiredMemberAttribute]
public Int32[] ExceptionParentIndices { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[RequiredMemberAttribute]
public String[] ExceptionTypes { get; public set; }
    [NullableAttribute("1")]
[RequiredMemberAttribute]
public String[] Messages { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[RequiredMemberAttribute]
public String[] StackTraces { get; public set; }
    [NullableContextAttribute("1")]
public sealed virtual Int32[] get_ExceptionParentIndices();
    [NullableContextAttribute("1")]
public void set_ExceptionParentIndices(Int32[] value);
    public sealed virtual String[] get_ExceptionTypes();
    public void set_ExceptionTypes(String[] value);
    [NullableContextAttribute("1")]
public sealed virtual String[] get_Messages();
    [NullableContextAttribute("1")]
public void set_Messages(String[] value);
    public sealed virtual String[] get_StackTraces();
    public void set_StackTraces(String[] value);
    [NullableContextAttribute("1")]
protected virtual void ValidateObjectState(HashSet`1<string> invalidProperties);
    [NullableContextAttribute("1")]
public static ITestCleanupFailure FromException(Exception ex, string assemblyUniqueID, string testCollectionUniqueID, string testClassUniqueID, string testMethodUniqueID, string testCaseUniqueID, string testUniqueID);
    [NullableContextAttribute("1")]
protected virtual void Serialize(JsonObjectSerializer serializer);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RequiredMemberAttribute]
[JsonTypeIDAttribute("test-collection-cleanup-failure")]
public class Xunit.v3.TestCollectionCleanupFailure : TestCollectionMessage {
    [NullableAttribute("2")]
private Int32[] exceptionParentIndices;
    [NullableAttribute("2")]
private String[] exceptionTypes;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private String[] messages;
    [NullableAttribute("2")]
private String[] stackTraces;
    [RequiredMemberAttribute]
public Int32[] ExceptionParentIndices { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[RequiredMemberAttribute]
public String[] ExceptionTypes { get; public set; }
    [RequiredMemberAttribute]
public String[] Messages { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[RequiredMemberAttribute]
public String[] StackTraces { get; public set; }
    public sealed virtual Int32[] get_ExceptionParentIndices();
    public void set_ExceptionParentIndices(Int32[] value);
    public sealed virtual String[] get_ExceptionTypes();
    public void set_ExceptionTypes(String[] value);
    public sealed virtual String[] get_Messages();
    public void set_Messages(String[] value);
    public sealed virtual String[] get_StackTraces();
    public void set_StackTraces(String[] value);
    protected virtual void ValidateObjectState(HashSet`1<string> invalidProperties);
    public static ITestCollectionCleanupFailure FromException(Exception ex, string assemblyUniqueID, string testCollectionUniqueID);
    protected virtual void Serialize(JsonObjectSerializer serializer);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.v3.TestCollectionComparer`1 : object {
    public static TestCollectionComparer`1<TTestCollection> Instance;
    private static TestCollectionComparer`1();
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(TTestCollection x, TTestCollection y);
    public sealed virtual int GetHashCode(TTestCollection obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Xunit.v3.TestCollectionFactoryBase : object {
    private ConcurrentDictionary`2<string, IXunitTestCollection> testCollections;
    [CompilerGeneratedAttribute]
private IXunitTestAssembly <TestAssembly>k__BackingField;
    public string DisplayName { get; }
    protected IXunitTestAssembly TestAssembly { get; }
    protected TestCollectionFactoryBase(IXunitTestAssembly testAssembly);
    public abstract virtual string get_DisplayName();
    [CompilerGeneratedAttribute]
protected IXunitTestAssembly get_TestAssembly();
    private IXunitTestCollection CreateCollection(ICollectionAttribute attribute);
    public sealed virtual IXunitTestCollection Get(Type testClass);
    protected abstract virtual IXunitTestCollection GetDefaultTestCollection(Type testClass);
}
[RequiredMemberAttribute]
[JsonTypeIDAttribute("test-collection-finished")]
public class Xunit.v3.TestCollectionFinished : TestCollectionMessage {
    private Nullable`1<decimal> executionTime;
    private Nullable`1<int> testsFailed;
    private Nullable`1<int> testsNotRun;
    private Nullable`1<int> testsSkipped;
    private Nullable`1<int> testsTotal;
    [RequiredMemberAttribute]
public decimal ExecutionTime { get; public set; }
    [RequiredMemberAttribute]
public int TestsFailed { get; public set; }
    [RequiredMemberAttribute]
public int TestsNotRun { get; public set; }
    [RequiredMemberAttribute]
public int TestsSkipped { get; public set; }
    [RequiredMemberAttribute]
public int TestsTotal { get; public set; }
    public sealed virtual decimal get_ExecutionTime();
    public void set_ExecutionTime(decimal value);
    public sealed virtual int get_TestsFailed();
    public void set_TestsFailed(int value);
    public sealed virtual int get_TestsNotRun();
    public void set_TestsNotRun(int value);
    public sealed virtual int get_TestsSkipped();
    public void set_TestsSkipped(int value);
    public sealed virtual int get_TestsTotal();
    public void set_TestsTotal(int value);
    [NullableContextAttribute("1")]
protected virtual void ValidateObjectState(HashSet`1<string> invalidProperties);
    [NullableContextAttribute("1")]
protected virtual void Serialize(JsonObjectSerializer serializer);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RequiredMemberAttribute]
public abstract class Xunit.v3.TestCollectionMessage : TestAssemblyMessage {
    [NullableAttribute("2")]
private string testCollectionUniqueID;
    [RequiredMemberAttribute]
public string TestCollectionUniqueID { get; public set; }
    public sealed virtual string get_TestCollectionUniqueID();
    public void set_TestCollectionUniqueID(string value);
    protected virtual void ValidateObjectState(HashSet`1<string> invalidProperties);
    protected virtual void Serialize(JsonObjectSerializer serializer);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Xunit.v3.TestCollectionRunner`4 : object {
    protected abstract virtual ValueTask`1<bool> OnTestCollectionCleanupFailure(TContext ctxt, Exception exception);
    [NullableContextAttribute("0")]
protected abstract virtual ValueTask`1<bool> OnTestCollectionFinished(TContext ctxt, RunSummary summary);
    [NullableContextAttribute("0")]
protected abstract virtual ValueTask`1<bool> OnTestCollectionStarting(TContext ctxt);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Xunit.v3.TestCollectionRunner`4/<RunAsync>d__4")]
protected ValueTask`1<RunSummary> RunAsync(TContext ctxt);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Xunit.v3.TestCollectionRunner`4/<RunTestClassesAsync>d__5")]
protected virtual ValueTask`1<RunSummary> RunTestClassesAsync(TContext ctxt, Exception exception);
    protected abstract virtual ValueTask`1<RunSummary> RunTestClassAsync(TContext ctxt, TTestClass testClass, IReadOnlyCollection`1<TTestCase> testCases, Exception exception);
    protected virtual void SetTestContext(TContext ctxt, TestEngineStatus testCollectionStatus);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.v3.TestCollectionRunnerContext`2 : ContextBase {
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<TTestCase> <TestCases>k__BackingField;
    [CompilerGeneratedAttribute]
private TTestCollection <TestCollection>k__BackingField;
    public IReadOnlyCollection`1<TTestCase> TestCases { get; protected set; }
    public TTestCollection TestCollection { get; }
    public TestCollectionRunnerContext`2(TTestCollection testCollection, IReadOnlyCollection`1<TTestCase> testCases, ExplicitOption explicitOption, IMessageBus messageBus, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource);
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<TTestCase> get_TestCases();
    [CompilerGeneratedAttribute]
protected void set_TestCases(IReadOnlyCollection`1<TTestCase> value);
    [CompilerGeneratedAttribute]
public TTestCollection get_TestCollection();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RequiredMemberAttribute]
[JsonTypeIDAttribute("test-collection-starting")]
public class Xunit.v3.TestCollectionStarting : TestCollectionMessage {
    [NullableAttribute("2")]
private string testCollectionDisplayName;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> traits;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <TestCollectionClassName>k__BackingField;
    [NullableAttribute("2")]
[RequiredMemberAttribute]
public string TestCollectionClassName { get; public set; }
    [RequiredMemberAttribute]
public string TestCollectionDisplayName { get; public set; }
    [RequiredMemberAttribute]
public IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> Traits { get; public set; }
    private string Xunit.Sdk.ITestCollectionMetadata.UniqueID { get; }
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual string get_TestCollectionClassName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_TestCollectionClassName(string value);
    public sealed virtual string get_TestCollectionDisplayName();
    public void set_TestCollectionDisplayName(string value);
    public sealed virtual IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> get_Traits();
    public void set_Traits(IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> value);
    protected virtual void ValidateObjectState(HashSet`1<string> invalidProperties);
    private sealed virtual override string Xunit.Sdk.ITestCollectionMetadata.get_UniqueID();
    protected virtual void Serialize(JsonObjectSerializer serializer);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.v3.TestContextAccessor : object {
    public static TestContextAccessor Instance;
    public TestContext Current { get; }
    private static TestContextAccessor();
    public sealed virtual TestContext get_Current();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[EventSourceAttribute]
internal class Xunit.v3.TestEventSource : EventSource {
    private static string sourceName;
    internal static TestEventSource Log;
    private static TestEventSource();
    [EventAttribute("1")]
internal void TestStart(string testName);
    [EventAttribute("2")]
internal void TestStop(string testName);
}
[RequiredMemberAttribute]
[JsonTypeIDAttribute("test-failed")]
public class Xunit.v3.TestFailed : TestResultMessage {
    private Nullable`1<FailureCause> cause;
    [NullableAttribute("2")]
private Int32[] exceptionParentIndices;
    [NullableAttribute("2")]
private String[] exceptionTypes;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private String[] messages;
    [NullableAttribute("2")]
private String[] stackTraces;
    [RequiredMemberAttribute]
public FailureCause Cause { get; public set; }
    [NullableAttribute("1")]
[RequiredMemberAttribute]
public Int32[] ExceptionParentIndices { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[RequiredMemberAttribute]
public String[] ExceptionTypes { get; public set; }
    [NullableAttribute("1")]
[RequiredMemberAttribute]
public String[] Messages { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[RequiredMemberAttribute]
public String[] StackTraces { get; public set; }
    public sealed virtual FailureCause get_Cause();
    public void set_Cause(FailureCause value);
    [NullableContextAttribute("1")]
public sealed virtual Int32[] get_ExceptionParentIndices();
    [NullableContextAttribute("1")]
public void set_ExceptionParentIndices(Int32[] value);
    public sealed virtual String[] get_ExceptionTypes();
    public void set_ExceptionTypes(String[] value);
    [NullableContextAttribute("1")]
public sealed virtual String[] get_Messages();
    [NullableContextAttribute("1")]
public void set_Messages(String[] value);
    public sealed virtual String[] get_StackTraces();
    public void set_StackTraces(String[] value);
    [NullableContextAttribute("1")]
protected virtual void ValidateObjectState(HashSet`1<string> invalidProperties);
    [NullableContextAttribute("1")]
public static ITestFailed FromException(Exception ex, string assemblyUniqueID, string testCollectionUniqueID, string testClassUniqueID, string testMethodUniqueID, string testCaseUniqueID, string testUniqueID, decimal executionTime, string output, String[] warnings, Nullable`1<DateTimeOffset> finishTime);
    [NullableContextAttribute("1")]
protected virtual void Serialize(JsonObjectSerializer serializer);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[RequiredMemberAttribute]
[JsonTypeIDAttribute("test-finished")]
public class Xunit.v3.TestFinished : TestResultMessage {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IReadOnlyDictionary`2<string, TestAttachment> attachments;
    [NullableAttribute("1")]
internal static IReadOnlyDictionary`2<string, TestAttachment> EmptyAttachments;
    [NullableAttribute("1")]
[RequiredMemberAttribute]
public IReadOnlyDictionary`2<string, TestAttachment> Attachments { get; public set; }
    private static TestFinished();
    [NullableContextAttribute("1")]
public sealed virtual IReadOnlyDictionary`2<string, TestAttachment> get_Attachments();
    [NullableContextAttribute("1")]
public void set_Attachments(IReadOnlyDictionary`2<string, TestAttachment> value);
    [NullableContextAttribute("1")]
protected virtual void ValidateObjectState(HashSet`1<string> invalidProperties);
    [NullableContextAttribute("1")]
protected virtual void Serialize(JsonObjectSerializer serializer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Xunit.v3.TestFramework : object {
    private bool disposed;
    [CompilerGeneratedAttribute]
private DisposalTracker <DisposalTracker>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ITestPipelineStartup <TestPipelineStartup>k__BackingField;
    protected DisposalTracker DisposalTracker { get; }
    public string TestFrameworkDisplayName { get; }
    [NullableAttribute("2")]
protected ITestPipelineStartup TestPipelineStartup { get; private set; }
    [CompilerGeneratedAttribute]
protected DisposalTracker get_DisposalTracker();
    public abstract virtual string get_TestFrameworkDisplayName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected ITestPipelineStartup get_TestPipelineStartup();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_TestPipelineStartup(ITestPipelineStartup value);
    [AsyncStateMachineAttribute("Xunit.v3.TestFramework/<DisposeAsync>d__10")]
public virtual ValueTask DisposeAsync();
    protected abstract virtual ITestFrameworkDiscoverer CreateDiscoverer(Assembly assembly);
    protected abstract virtual ITestFrameworkExecutor CreateExecutor(Assembly assembly);
    public sealed virtual ITestFrameworkDiscoverer GetDiscoverer(Assembly assembly);
    public sealed virtual ITestFrameworkExecutor GetExecutor(Assembly assembly);
    public sealed virtual void SetTestPipelineStartup(ITestPipelineStartup pipelineStartup);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Xunit.v3.TestFrameworkDiscoverer`2 : object {
    private bool disposed;
    [CompilerGeneratedAttribute]
private DisposalTracker <DisposalTracker>k__BackingField;
    [CompilerGeneratedAttribute]
private ITestAssembly <TestAssembly>k__BackingField;
    protected DisposalTracker DisposalTracker { get; }
    public ITestAssembly TestAssembly { get; }
    protected TestFrameworkDiscoverer`2(ITestAssembly testAssembly);
    [CompilerGeneratedAttribute]
protected DisposalTracker get_DisposalTracker();
    [CompilerGeneratedAttribute]
public sealed virtual ITestAssembly get_TestAssembly();
    protected abstract virtual ValueTask`1<TTestClass> CreateTestClass(Type class);
    public virtual ValueTask DisposeAsync();
    public sealed virtual ValueTask Find(Func`2<ITestCase, ValueTask`1<bool>> callback, ITestFrameworkDiscoveryOptions discoveryOptions, Type[] types, Nullable`1<CancellationToken> cancellationToken);
    protected abstract virtual ValueTask`1<bool> FindTestsForType(TTestClass testClass, ITestFrameworkDiscoveryOptions discoveryOptions, Func`2<TTestCase, ValueTask`1<bool>> discoveryCallback);
    protected abstract virtual Type[] GetExportedTypes();
    protected virtual bool IsValidTestClass(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Xunit.v3.TestFrameworkExecutor`1 : object {
    private bool disposed;
    [CompilerGeneratedAttribute]
private DisposalTracker <DisposalTracker>k__BackingField;
    [CompilerGeneratedAttribute]
private ITestAssembly <TestAssembly>k__BackingField;
    protected DisposalTracker DisposalTracker { get; }
    protected ITestAssembly TestAssembly { get; }
    protected TestFrameworkExecutor`1(ITestAssembly testAssembly);
    [CompilerGeneratedAttribute]
protected DisposalTracker get_DisposalTracker();
    [CompilerGeneratedAttribute]
protected ITestAssembly get_TestAssembly();
    protected abstract virtual ITestFrameworkDiscoverer CreateDiscoverer();
    public virtual ValueTask DisposeAsync();
    public abstract virtual ValueTask RunTestCases(IReadOnlyCollection`1<TTestCase> testCases, IMessageSink executionMessageSink, ITestFrameworkExecutionOptions executionOptions);
    private sealed virtual override ValueTask Xunit.v3.ITestFrameworkExecutor.RunTestCases(IReadOnlyCollection`1<ITestCase> testCases, IMessageSink executionMessageSink, ITestFrameworkExecutionOptions executionOptions);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Xunit.v3.TestIntrospectionHelper : object {
    public static ValueTuple`8<string, bool, string, Type, string, string, int, ValueTuple`2<string, IXunitTestMethod>> GetTestCaseDetails(ITestFrameworkDiscoveryOptions discoveryOptions, IXunitTestMethod testMethod, IFactAttribute factAttribute, Object[] testMethodArguments, Nullable`1<int> timeout, string baseDisplayName);
    public static ValueTuple`8<string, bool, string, Type, string, string, int, ValueTuple`2<string, IXunitTestMethod>> GetTestCaseDetailsForTheoryDataRow(ITestFrameworkDiscoveryOptions discoveryOptions, IXunitTestMethod testMethod, ITheoryAttribute theoryAttribute, ITheoryDataRow dataRow, Object[] testMethodArguments);
    public static Dictionary`2<string, HashSet`1<string>> GetTraits(IXunitTestMethod testMethod, ITheoryDataRow dataRow);
    public static void MergeTraitsInto(Dictionary`2<string, HashSet`1<string>> traits, String[] additionalTraits);
}
public abstract class Xunit.v3.TestInvoker`2 : object {
    [NullableContextAttribute("1")]
protected virtual object CallTestMethod(TContext ctxt);
    [AsyncStateMachineAttribute("Xunit.v3.TestInvoker`2/<InvokeTestMethodAsync>d__1")]
protected virtual ValueTask`1<TimeSpan> InvokeTestMethodAsync(TContext ctxt);
    protected ValueTask`1<TimeSpan> RunAsync(TContext ctxt);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.v3.TestInvokerContext`1 : ContextBase {
    [CompilerGeneratedAttribute]
private TTest <Test>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <TestClass>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private object <TestClassInstance>k__BackingField;
    [CompilerGeneratedAttribute]
private MethodInfo <TestMethod>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Object[] <TestMethodArguments>k__BackingField;
    public TTest Test { get; }
    public Type TestClass { get; }
    [NullableAttribute("2")]
public object TestClassInstance { get; }
    public MethodInfo TestMethod { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Object[] TestMethodArguments { get; }
    public TestInvokerContext`1(ExplicitOption explicitOption, IMessageBus messageBus, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource, TTest test, Type testClass, object testClassInstance, MethodInfo testMethod, Object[] testMethodArguments);
    [CompilerGeneratedAttribute]
public TTest get_Test();
    [CompilerGeneratedAttribute]
public Type get_TestClass();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public object get_TestClassInstance();
    [CompilerGeneratedAttribute]
public MethodInfo get_TestMethod();
    [CompilerGeneratedAttribute]
public Object[] get_TestMethodArguments();
}
[RequiredMemberAttribute]
public abstract class Xunit.v3.TestMessage : TestCaseMessage {
    [NullableAttribute("2")]
private string testUniqueID;
    [NullableAttribute("1")]
[RequiredMemberAttribute]
public string TestUniqueID { get; public set; }
    [NullableContextAttribute("1")]
public sealed virtual string get_TestUniqueID();
    [NullableContextAttribute("1")]
public void set_TestUniqueID(string value);
    [NullableContextAttribute("1")]
protected virtual void ValidateObjectState(HashSet`1<string> invalidProperties);
    [NullableContextAttribute("1")]
protected virtual void Serialize(JsonObjectSerializer serializer);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RequiredMemberAttribute]
[JsonTypeIDAttribute("test-method-cleanup-failure")]
public class Xunit.v3.TestMethodCleanupFailure : TestMethodMessage {
    [NullableAttribute("2")]
private Int32[] exceptionParentIndices;
    [NullableAttribute("2")]
private String[] exceptionTypes;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private String[] messages;
    [NullableAttribute("2")]
private String[] stackTraces;
    [RequiredMemberAttribute]
public Int32[] ExceptionParentIndices { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[RequiredMemberAttribute]
public String[] ExceptionTypes { get; public set; }
    [RequiredMemberAttribute]
public String[] Messages { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[RequiredMemberAttribute]
public String[] StackTraces { get; public set; }
    public sealed virtual Int32[] get_ExceptionParentIndices();
    public void set_ExceptionParentIndices(Int32[] value);
    public sealed virtual String[] get_ExceptionTypes();
    public void set_ExceptionTypes(String[] value);
    public sealed virtual String[] get_Messages();
    public void set_Messages(String[] value);
    public sealed virtual String[] get_StackTraces();
    public void set_StackTraces(String[] value);
    protected virtual void ValidateObjectState(HashSet`1<string> invalidProperties);
    public static ITestMethodCleanupFailure FromException(Exception ex, string assemblyUniqueID, string testCollectionUniqueID, string testClassUniqueID, string testMethodUniqueID);
    protected virtual void Serialize(JsonObjectSerializer serializer);
    public virtual string ToString();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Xunit.v3.TestMethodComparer : object {
    [NullableAttribute("1")]
public static TestMethodComparer Instance;
    private static TestMethodComparer();
    public sealed virtual bool Equals(ITestMethod x, ITestMethod y);
    public sealed virtual int GetHashCode(ITestMethod obj);
}
[RequiredMemberAttribute]
[JsonTypeIDAttribute("test-method-finished")]
public class Xunit.v3.TestMethodFinished : TestMethodMessage {
    private Nullable`1<decimal> executionTime;
    private Nullable`1<int> testsFailed;
    private Nullable`1<int> testsNotRun;
    private Nullable`1<int> testsSkipped;
    private Nullable`1<int> testsTotal;
    [RequiredMemberAttribute]
public decimal ExecutionTime { get; public set; }
    [RequiredMemberAttribute]
public int TestsFailed { get; public set; }
    [RequiredMemberAttribute]
public int TestsNotRun { get; public set; }
    [RequiredMemberAttribute]
public int TestsSkipped { get; public set; }
    [RequiredMemberAttribute]
public int TestsTotal { get; public set; }
    public sealed virtual decimal get_ExecutionTime();
    public void set_ExecutionTime(decimal value);
    public sealed virtual int get_TestsFailed();
    public void set_TestsFailed(int value);
    public sealed virtual int get_TestsNotRun();
    public void set_TestsNotRun(int value);
    public sealed virtual int get_TestsSkipped();
    public void set_TestsSkipped(int value);
    public sealed virtual int get_TestsTotal();
    public void set_TestsTotal(int value);
    [NullableContextAttribute("1")]
protected virtual void ValidateObjectState(HashSet`1<string> invalidProperties);
    [NullableContextAttribute("1")]
protected virtual void Serialize(JsonObjectSerializer serializer);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[RequiredMemberAttribute]
public abstract class Xunit.v3.TestMethodMessage : TestClassMessage {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <TestMethodUniqueID>k__BackingField;
    [NullableAttribute("2")]
[RequiredMemberAttribute]
public string TestMethodUniqueID { get; public set; }
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual string get_TestMethodUniqueID();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_TestMethodUniqueID(string value);
    [NullableContextAttribute("1")]
protected virtual void Serialize(JsonObjectSerializer serializer);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Xunit.v3.TestMethodRunner`3 : object {
    protected abstract virtual ValueTask`1<bool> OnTestMethodCleanupFailure(TContext ctxt, Exception exception);
    [NullableContextAttribute("0")]
protected abstract virtual ValueTask`1<bool> OnTestMethodFinished(TContext ctxt, RunSummary summary);
    [NullableContextAttribute("0")]
protected abstract virtual ValueTask`1<bool> OnTestMethodStarting(TContext ctxt);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Xunit.v3.TestMethodRunner`3/<RunAsync>d__4")]
protected ValueTask`1<RunSummary> RunAsync(TContext ctxt);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Xunit.v3.TestMethodRunner`3/<RunTestCasesAsync>d__5")]
protected virtual ValueTask`1<RunSummary> RunTestCasesAsync(TContext ctxt, Exception exception);
    protected abstract virtual ValueTask`1<RunSummary> RunTestCaseAsync(TContext ctxt, TTestCase testCase, Exception exception);
    protected virtual void SetTestContext(TContext ctxt, TestEngineStatus testMethodStatus);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.v3.TestMethodRunnerContext`2 : ContextBase {
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<TTestCase> <TestCases>k__BackingField;
    [CompilerGeneratedAttribute]
private TTestMethod <TestMethod>k__BackingField;
    public IReadOnlyCollection`1<TTestCase> TestCases { get; }
    public TTestMethod TestMethod { get; }
    public TestMethodRunnerContext`2(TTestMethod testMethod, IReadOnlyCollection`1<TTestCase> testCases, ExplicitOption explicitOption, IMessageBus messageBus, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource);
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<TTestCase> get_TestCases();
    [CompilerGeneratedAttribute]
public TTestMethod get_TestMethod();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RequiredMemberAttribute]
[JsonTypeIDAttribute("test-method-starting")]
public class Xunit.v3.TestMethodStarting : TestMethodMessage {
    [NullableAttribute("2")]
private string methodName;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> traits;
    [RequiredMemberAttribute]
public string MethodName { get; public set; }
    [RequiredMemberAttribute]
public IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> Traits { get; public set; }
    private string Xunit.Sdk.ITestMethodMetadata.UniqueID { get; }
    public sealed virtual string get_MethodName();
    public void set_MethodName(string value);
    public sealed virtual IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> get_Traits();
    public void set_Traits(IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> value);
    protected virtual void ValidateObjectState(HashSet`1<string> invalidProperties);
    private sealed virtual override string Xunit.Sdk.ITestMethodMetadata.get_UniqueID();
    protected virtual void Serialize(JsonObjectSerializer serializer);
    public virtual string ToString();
}
[JsonTypeIDAttribute("test-not-run")]
public class Xunit.v3.TestNotRun : TestResultMessage {
}
[RequiredMemberAttribute]
[JsonTypeIDAttribute("test-output")]
public class Xunit.v3.TestOutput : TestMessage {
    [NullableAttribute("2")]
private string output;
    [NullableAttribute("1")]
[RequiredMemberAttribute]
public string Output { get; public set; }
    [NullableContextAttribute("1")]
public sealed virtual string get_Output();
    [NullableContextAttribute("1")]
public void set_Output(string value);
    [NullableContextAttribute("1")]
protected virtual void ValidateObjectState(HashSet`1<string> invalidProperties);
    [NullableContextAttribute("1")]
protected virtual void Serialize(JsonObjectSerializer serializer);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.v3.TestOutputHelper : object {
    [NullableAttribute("2")]
private TestState state;
    public string Output { get; }
    public sealed virtual string get_Output();
    public void Initialize(IMessageBus messageBus, ITest test);
    private void QueueTestOutput(string output);
    public void Uninitialize();
    public sealed virtual void WriteLine(string message);
    public sealed virtual void WriteLine(string format, Object[] args);
}
[JsonTypeIDAttribute("test-passed")]
public class Xunit.v3.TestPassed : TestResultMessage {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("1")]
public class Xunit.v3.TestPipelineStartupAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <TestPipelineStartupType>k__BackingField;
    public Type TestPipelineStartupType { get; }
    public TestPipelineStartupAttribute(Type testPipelineStartupType);
    [CompilerGeneratedAttribute]
public sealed virtual Type get_TestPipelineStartupType();
}
[RequiredMemberAttribute]
public abstract class Xunit.v3.TestResultMessage : TestMessage {
    private Nullable`1<decimal> executionTime;
    private Nullable`1<DateTimeOffset> finishTime;
    [NullableAttribute("2")]
private string output;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private String[] <Warnings>k__BackingField;
    [RequiredMemberAttribute]
public decimal ExecutionTime { get; public set; }
    [RequiredMemberAttribute]
public DateTimeOffset FinishTime { get; public set; }
    [NullableAttribute("1")]
[RequiredMemberAttribute]
public string Output { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[RequiredMemberAttribute]
public String[] Warnings { get; public set; }
    public sealed virtual decimal get_ExecutionTime();
    public void set_ExecutionTime(decimal value);
    public sealed virtual DateTimeOffset get_FinishTime();
    public void set_FinishTime(DateTimeOffset value);
    [NullableContextAttribute("1")]
public sealed virtual string get_Output();
    [NullableContextAttribute("1")]
public void set_Output(string value);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_Warnings();
    [CompilerGeneratedAttribute]
public void set_Warnings(String[] value);
    [NullableContextAttribute("1")]
protected virtual void ValidateObjectState(HashSet`1<string> invalidProperties);
    [NullableContextAttribute("1")]
protected virtual void Serialize(JsonObjectSerializer serializer);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Xunit.v3.TestRunner`2 : object {
    [AsyncStateMachineAttribute("Xunit.v3.TestRunner`2/<CreateTestClass>d__1")]
private ValueTask`1<object> CreateTestClass(TContext ctxt);
    protected abstract virtual ValueTask`1<object> CreateTestClassInstance(TContext ctxt);
    [AsyncStateMachineAttribute("Xunit.v3.TestRunner`2/<DisposeTestClass>d__3")]
private ValueTask DisposeTestClass(TContext ctxt, object testClassInstance);
    protected abstract virtual ValueTask DisposeTestClassInstance(TContext ctxt, object testClassInstance);
    protected abstract virtual ValueTask`1<string> GetTestOutput(TContext ctxt);
    [NullableContextAttribute("0")]
protected abstract virtual ValueTask`1<TimeSpan> InvokeTestAsync(TContext ctxt, object testClassInstance);
    protected abstract virtual bool IsTestClassCreatable(TContext ctxt);
    protected abstract virtual bool IsTestClassDisposable(TContext ctxt, object testClassInstance);
    [NullableContextAttribute("0")]
protected abstract virtual ValueTask`1<bool> OnTestClassConstructionFinished(TContext ctxt);
    [NullableContextAttribute("0")]
protected abstract virtual ValueTask`1<bool> OnTestClassConstructionStarting(TContext ctxt);
    [NullableContextAttribute("0")]
protected abstract virtual ValueTask`1<bool> OnTestClassDisposeFinished(TContext ctxt);
    [NullableContextAttribute("0")]
protected abstract virtual ValueTask`1<bool> OnTestClassDisposeStarting(TContext ctxt);
    protected abstract virtual ValueTask`1<bool> OnTestCleanupFailure(TContext ctxt, Exception exception);
    protected abstract virtual ValueTask`1<ValueTuple`2<bool, TestResultState>> OnTestFailed(TContext ctxt, Exception exception, decimal executionTime, string output);
    protected abstract virtual ValueTask`1<bool> OnTestFinished(TContext ctxt, decimal executionTime, string output);
    protected abstract virtual ValueTask`1<ValueTuple`2<bool, TestResultState>> OnTestNotRun(TContext ctxt, string output);
    protected abstract virtual ValueTask`1<ValueTuple`2<bool, TestResultState>> OnTestPassed(TContext ctxt, decimal executionTime, string output);
    protected abstract virtual ValueTask`1<ValueTuple`2<bool, TestResultState>> OnTestSkipped(TContext ctxt, string skipReason, decimal executionTime, string output);
    [NullableContextAttribute("0")]
protected abstract virtual ValueTask`1<bool> OnTestStarting(TContext ctxt);
    protected virtual ValueTask PostInvoke(TContext ctxt);
    protected virtual ValueTask PreInvoke(TContext ctxt);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Xunit.v3.TestRunner`2/<RunAsync>d__22")]
protected ValueTask`1<RunSummary> RunAsync(TContext ctxt);
    protected virtual void SetTestContext(TContext ctxt, TestEngineStatus testStatus, TestResultState testState);
    protected virtual bool ShouldTestRun(TContext ctxt);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.v3.TestRunnerContext`1 : ContextBase {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <SkipReason>k__BackingField;
    [CompilerGeneratedAttribute]
private TTest <Test>k__BackingField;
    [NullableAttribute("2")]
public string SkipReason { get; }
    public TTest Test { get; }
    public TestRunnerContext`1(TTest test, IMessageBus messageBus, string skipReason, ExplicitOption explicitOption, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_SkipReason();
    [CompilerGeneratedAttribute]
public TTest get_Test();
    [NullableContextAttribute("2")]
public virtual string GetSkipReason(Exception exception);
}
[RequiredMemberAttribute]
[JsonTypeIDAttribute("test-skipped")]
public class Xunit.v3.TestSkipped : TestResultMessage {
    [NullableAttribute("2")]
private string reason;
    [NullableAttribute("1")]
[RequiredMemberAttribute]
public string Reason { get; public set; }
    [NullableContextAttribute("1")]
public sealed virtual string get_Reason();
    [NullableContextAttribute("1")]
public void set_Reason(string value);
    [NullableContextAttribute("1")]
protected virtual void ValidateObjectState(HashSet`1<string> invalidProperties);
    [NullableContextAttribute("1")]
protected virtual void Serialize(JsonObjectSerializer serializer);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[RequiredMemberAttribute]
[JsonTypeIDAttribute("test-starting")]
public class Xunit.v3.TestStarting : TestMessage {
    private Nullable`1<bool> explicit;
    private Nullable`1<DateTimeOffset> startTime;
    [NullableAttribute("2")]
private string testDisplayName;
    private Nullable`1<int> timeout;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> traits;
    [RequiredMemberAttribute]
public bool Explicit { get; public set; }
    [RequiredMemberAttribute]
public DateTimeOffset StartTime { get; public set; }
    [NullableAttribute("1")]
[RequiredMemberAttribute]
public string TestDisplayName { get; public set; }
    [RequiredMemberAttribute]
public int Timeout { get; public set; }
    [NullableAttribute("1")]
[RequiredMemberAttribute]
public IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> Traits { get; public set; }
    [NullableAttribute("1")]
private string Xunit.Sdk.ITestMetadata.UniqueID { get; }
    public sealed virtual bool get_Explicit();
    public void set_Explicit(bool value);
    public sealed virtual DateTimeOffset get_StartTime();
    public void set_StartTime(DateTimeOffset value);
    [NullableContextAttribute("1")]
public sealed virtual string get_TestDisplayName();
    [NullableContextAttribute("1")]
public void set_TestDisplayName(string value);
    public sealed virtual int get_Timeout();
    public void set_Timeout(int value);
    [NullableContextAttribute("1")]
public sealed virtual IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> get_Traits();
    [NullableContextAttribute("1")]
public void set_Traits(IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> value);
    [NullableContextAttribute("1")]
protected virtual void ValidateObjectState(HashSet`1<string> invalidProperties);
    [NullableContextAttribute("1")]
private sealed virtual override string Xunit.Sdk.ITestMetadata.get_UniqueID();
    [NullableContextAttribute("1")]
protected virtual void Serialize(JsonObjectSerializer serializer);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.v3.TheoryDiscoverer : object {
    protected virtual ValueTask`1<IReadOnlyCollection`1<IXunitTestCase>> CreateTestCasesForDataRow(ITestFrameworkDiscoveryOptions discoveryOptions, IXunitTestMethod testMethod, ITheoryAttribute theoryAttribute, ITheoryDataRow dataRow, Object[] testMethodArguments);
    protected virtual ValueTask`1<IReadOnlyCollection`1<IXunitTestCase>> CreateTestCasesForTheory(ITestFrameworkDiscoveryOptions discoveryOptions, IXunitTestMethod testMethod, ITheoryAttribute theoryAttribute);
    [AsyncStateMachineAttribute("Xunit.v3.TheoryDiscoverer/<Discover>d__2")]
public virtual ValueTask`1<IReadOnlyCollection`1<IXunitTestCase>> Discover(ITestFrameworkDiscoveryOptions discoveryOptions, IXunitTestMethod testMethod, IFactAttribute factAttribute);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.v3.XunitDelayEnumeratedTheoryTestCase : XunitTestCase {
    [CompilerGeneratedAttribute]
private bool <SkipTestWithoutData>k__BackingField;
    public bool SkipTestWithoutData { get; private set; }
    public XunitDelayEnumeratedTheoryTestCase(IXunitTestMethod testMethod, string testCaseDisplayName, string uniqueID, bool explicit, bool skipTestWithoutData, Dictionary`2<string, HashSet`1<string>> traits, string sourceFilePath, Nullable`1<int> sourceLineNumber, Nullable`1<int> timeout);
    [CompilerGeneratedAttribute]
public bool get_SkipTestWithoutData();
    [CompilerGeneratedAttribute]
private void set_SkipTestWithoutData(bool value);
    protected virtual void Deserialize(IXunitSerializationInfo info);
    public virtual ValueTask`1<RunSummary> RunAsync(ExplicitOption explicitOption, IMessageBus messageBus, Object[] constructorArguments, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource);
    protected virtual void Serialize(IXunitSerializationInfo info);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Xunit.v3.XunitDelayEnumeratedTheoryTestCaseRunner : XunitTestCaseRunnerBase`2<XunitDelayEnumeratedTheoryTestCaseRunnerContext, IXunitTestCase> {
    [CompilerGeneratedAttribute]
private static XunitDelayEnumeratedTheoryTestCaseRunner <Instance>k__BackingField;
    public static XunitDelayEnumeratedTheoryTestCaseRunner Instance { get; }
    private static XunitDelayEnumeratedTheoryTestCaseRunner();
    [CompilerGeneratedAttribute]
public static XunitDelayEnumeratedTheoryTestCaseRunner get_Instance();
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Xunit.v3.XunitDelayEnumeratedTheoryTestCaseRunner/<OnTestCaseFinished>d__4")]
protected virtual ValueTask`1<bool> OnTestCaseFinished(XunitDelayEnumeratedTheoryTestCaseRunnerContext ctxt, RunSummary summary);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Xunit.v3.XunitDelayEnumeratedTheoryTestCaseRunner/<OnTestCaseStarting>d__5")]
protected virtual ValueTask`1<bool> OnTestCaseStarting(XunitDelayEnumeratedTheoryTestCaseRunnerContext ctxt);
    [AsyncStateMachineAttribute("Xunit.v3.XunitDelayEnumeratedTheoryTestCaseRunner/<RunAsync>d__6")]
public ValueTask`1<RunSummary> RunAsync(IXunitTestCase testCase, IMessageBus messageBus, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource, string displayName, string skipReason, ExplicitOption explicitOption, Object[] constructorArguments, Object[] testMethodArguments);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Xunit.v3.XunitDelayEnumeratedTheoryTestCaseRunner/<RunTestsAsync>d__7")]
protected virtual ValueTask`1<RunSummary> RunTestsAsync(XunitDelayEnumeratedTheoryTestCaseRunnerContext ctxt, Exception exception);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private ValueTask`1<bool> <>n__0(XunitDelayEnumeratedTheoryTestCaseRunnerContext ctxt, RunSummary summary);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private ValueTask`1<bool> <>n__1(XunitDelayEnumeratedTheoryTestCaseRunnerContext ctxt);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Xunit.v3.XunitDelayEnumeratedTheoryTestCaseRunnerContext : XunitTestCaseRunnerContext`1<IXunitTestCase> {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<ValueTuple`3<IXunitTest, Object[], string>> <DiscoveredTests>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Exception <DiscoveryException>k__BackingField;
    [CompilerGeneratedAttribute]
private DisposalTracker <DisposalTracker>k__BackingField;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<ValueTuple`3<IXunitTest, Object[], string>> DiscoveredTests { get; }
    [NullableAttribute("2")]
public Exception DiscoveryException { get; public set; }
    public DisposalTracker DisposalTracker { get; }
    public XunitDelayEnumeratedTheoryTestCaseRunnerContext(IXunitTestCase testCase, IMessageBus messageBus, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource, string displayName, string skipReason, ExplicitOption explicitOption, Object[] constructorArguments, Object[] testMethodArguments);
    [CompilerGeneratedAttribute]
public List`1<ValueTuple`3<IXunitTest, Object[], string>> get_DiscoveredTests();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Exception get_DiscoveryException();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_DiscoveryException(Exception value);
    [CompilerGeneratedAttribute]
public DisposalTracker get_DisposalTracker();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Xunit.v3.XunitRunnerHelper : object {
    public static RunSummary FailTestCases(IMessageBus messageBus, CancellationTokenSource cancellationTokenSource, IReadOnlyCollection`1<IXunitTestCase> testCases, string messageFormat, bool sendTestCollectionMessages, bool sendTestClassMessages, bool sendTestMethodMessages, bool sendTestCaseMessages, bool sendTestMessages);
    public static RunSummary FailTestCases(IMessageBus messageBus, CancellationTokenSource cancellationTokenSource, IReadOnlyCollection`1<IXunitTestCase> testCases, Exception exception, bool sendTestCollectionMessages, bool sendTestClassMessages, bool sendTestMethodMessages, bool sendTestCaseMessages, bool sendTestMessages);
    public static RunSummary SkipTestCases(IMessageBus messageBus, CancellationTokenSource cancellationTokenSource, IReadOnlyCollection`1<IXunitTestCase> testCases, string skipReason, bool sendTestCollectionMessages, bool sendTestClassMessages, bool sendTestMethodMessages, bool sendTestCaseMessages, bool sendTestMessages);
    private static void ExecuteTestCase(IMessageBus messageBus, CancellationTokenSource cancellationTokenSource, IXunitTestCase testCase, int testIndex, TestResultMessage testResultMessage, bool sendTestCollectionMessages, bool sendTestClassMessages, bool sendTestMethodMessages, bool sendTestCaseMessages, bool sendTestMessages);
    private static void FailTestCase(IMessageBus messageBus, CancellationTokenSource cancellationTokenSource, IXunitTestCase testCase, int testIndex, FailureCause cause, Int32[] parentIndices, String[] messages, String[] types, String[] stackTraces, bool sendTestCollectionMessages, bool sendTestClassMessages, bool sendTestMethodMessages, bool sendTestCaseMessages, bool sendTestMessages);
    private static void SkipTestCase(IMessageBus messageBus, CancellationTokenSource cancellationTokenSource, IXunitTestCase testCase, int testIndex, string skipReason, bool sendTestCollectionMessages, bool sendTestClassMessages, bool sendTestMethodMessages, bool sendTestCaseMessages, bool sendTestMessages);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("class = {TestCase.TestClassName}, method = {TestCase.TestMethodName}")]
public class Xunit.v3.XunitTest : object {
    private static IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> EmptyDictionary;
    [CompilerGeneratedAttribute]
private bool <Explicit>k__BackingField;
    [CompilerGeneratedAttribute]
private IXunitTestCase <TestCase>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TestDisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private IXunitTestMethod <TestMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> <Traits>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UniqueID>k__BackingField;
    public bool Explicit { get; }
    public IXunitTestCase TestCase { get; }
    private ITestCase Xunit.Sdk.ITest.TestCase { get; }
    public string TestDisplayName { get; }
    public IXunitTestMethod TestMethod { get; }
    public int Timeout { get; }
    public IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> Traits { get; }
    public string UniqueID { get; }
    public XunitTest(IXunitTestCase testCase, IXunitTestMethod testMethod, Nullable`1<bool> explicit, string testDisplayName, int testIndex, IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> traits, Nullable`1<int> timeout);
    public XunitTest(IXunitTestCase testCase, IXunitTestMethod testMethod, Nullable`1<bool> explicit, string testDisplayName, string uniqueID, IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> traits, Nullable`1<int> timeout);
    private static XunitTest();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Explicit();
    [CompilerGeneratedAttribute]
public sealed virtual IXunitTestCase get_TestCase();
    private sealed virtual override ITestCase Xunit.Sdk.ITest.get_TestCase();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TestDisplayName();
    [CompilerGeneratedAttribute]
public sealed virtual IXunitTestMethod get_TestMethod();
    [CompilerGeneratedAttribute]
public sealed virtual int get_Timeout();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> get_Traits();
    [CompilerGeneratedAttribute]
public sealed virtual string get_UniqueID();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("\{ assembly = {AssemblyPath}, config = {ConfigFilePath}, id = {UniqueID} \}")]
public class Xunit.v3.XunitTestAssembly : object {
    [NullableAttribute("2")]
private Assembly assembly;
    [NullableAttribute("2")]
private string uniqueID;
    [NullableAttribute("2")]
private Version version;
    private Lazy`1<IReadOnlyCollection`1<Type>> assemblyFixtureTypes;
    private Lazy`1<string> assemblyName;
    private Lazy`1<IReadOnlyCollection`1<IBeforeAfterTestAttribute>> beforeAfterTestAttributes;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<ICollectionBehaviorAttribute> collectionBehavior;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<IReadOnlyDictionary`2<string, ValueTuple`2<Type, CollectionDefinitionAttribute>>> collectionDefinitions;
    private Lazy`1<string> targetFramework;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<ITestCaseOrderer> testCaseOrderer;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<ITestCollectionOrderer> testCollectionOrderer;
    private Lazy`1<IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>>> traits;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <ConfigFilePath>k__BackingField;
    public Assembly Assembly { get; }
    public IReadOnlyCollection`1<Type> AssemblyFixtureTypes { get; }
    public string AssemblyName { get; }
    public string AssemblyPath { get; }
    public IReadOnlyCollection`1<IBeforeAfterTestAttribute> BeforeAfterTestAttributes { get; }
    [NullableAttribute("2")]
public ICollectionBehaviorAttribute CollectionBehavior { get; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyDictionary`2<string, ValueTuple`2<Type, CollectionDefinitionAttribute>> CollectionDefinitions { get; }
    [NullableAttribute("2")]
public string ConfigFilePath { get; private set; }
    public Guid ModuleVersionID { get; }
    public string TargetFramework { get; }
    [NullableAttribute("2")]
public ITestCaseOrderer TestCaseOrderer { get; }
    [NullableAttribute("2")]
public ITestCollectionOrderer TestCollectionOrderer { get; }
    public IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> Traits { get; }
    public string UniqueID { get; }
    public Version Version { get; }
    [NullableContextAttribute("2")]
public XunitTestAssembly(Assembly assembly, string configFileName, Version version, string uniqueID);
    public sealed virtual Assembly get_Assembly();
    public sealed virtual IReadOnlyCollection`1<Type> get_AssemblyFixtureTypes();
    public sealed virtual string get_AssemblyName();
    public sealed virtual string get_AssemblyPath();
    public sealed virtual IReadOnlyCollection`1<IBeforeAfterTestAttribute> get_BeforeAfterTestAttributes();
    [NullableContextAttribute("2")]
public sealed virtual ICollectionBehaviorAttribute get_CollectionBehavior();
    public sealed virtual IReadOnlyDictionary`2<string, ValueTuple`2<Type, CollectionDefinitionAttribute>> get_CollectionDefinitions();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual string get_ConfigFilePath();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_ConfigFilePath(string value);
    public sealed virtual Guid get_ModuleVersionID();
    public sealed virtual string get_TargetFramework();
    [NullableContextAttribute("2")]
public sealed virtual ITestCaseOrderer get_TestCaseOrderer();
    [NullableContextAttribute("2")]
public sealed virtual ITestCollectionOrderer get_TestCollectionOrderer();
    public sealed virtual IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> get_Traits();
    public sealed virtual string get_UniqueID();
    public sealed virtual Version get_Version();
    public sealed virtual void Deserialize(IXunitSerializationInfo info);
    public sealed virtual void Serialize(IXunitSerializationInfo info);
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<Type> <.ctor>b__12_0();
    [CompilerGeneratedAttribute]
private string <.ctor>b__12_1();
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<IBeforeAfterTestAttribute> <.ctor>b__12_2();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private ICollectionBehaviorAttribute <.ctor>b__12_3();
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, ValueTuple`2<Type, CollectionDefinitionAttribute>> <.ctor>b__12_4();
    [CompilerGeneratedAttribute]
private string <.ctor>b__12_5();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private ITestCaseOrderer <.ctor>b__12_6();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private ITestCollectionOrderer <.ctor>b__12_7();
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> <.ctor>b__12_8();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Xunit.v3.XunitTestAssemblyRunner : TestAssemblyRunner`4<XunitTestAssemblyRunnerContext, IXunitTestAssembly, IXunitTestCollection, IXunitTestCase> {
    [CompilerGeneratedAttribute]
private static XunitTestAssemblyRunner <Instance>k__BackingField;
    public static XunitTestAssemblyRunner Instance { get; }
    private static XunitTestAssemblyRunner();
    [CompilerGeneratedAttribute]
public static XunitTestAssemblyRunner get_Instance();
    protected virtual ValueTask`1<bool> OnTestAssemblyCleanupFailure(XunitTestAssemblyRunnerContext ctxt, Exception exception);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Xunit.v3.XunitTestAssemblyRunner/<OnTestAssemblyFinished>d__5")]
protected virtual ValueTask`1<bool> OnTestAssemblyFinished(XunitTestAssemblyRunnerContext ctxt, RunSummary summary);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Xunit.v3.XunitTestAssemblyRunner/<OnTestAssemblyStarting>d__6")]
protected virtual ValueTask`1<bool> OnTestAssemblyStarting(XunitTestAssemblyRunnerContext ctxt);
    protected virtual List`1<ValueTuple`2<IXunitTestCollection, List`1<IXunitTestCase>>> OrderTestCollections(XunitTestAssemblyRunnerContext ctxt);
    [AsyncStateMachineAttribute("Xunit.v3.XunitTestAssemblyRunner/<RunAsync>d__8")]
public ValueTask`1<RunSummary> RunAsync(IXunitTestAssembly testAssembly, IReadOnlyCollection`1<IXunitTestCase> testCases, IMessageSink executionMessageSink, ITestFrameworkExecutionOptions executionOptions);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Xunit.v3.XunitTestAssemblyRunner/<RunTestCollectionsAsync>d__9")]
protected virtual ValueTask`1<RunSummary> RunTestCollectionsAsync(XunitTestAssemblyRunnerContext ctxt, Exception exception);
    protected virtual ValueTask`1<RunSummary> RunTestCollectionAsync(XunitTestAssemblyRunnerContext ctxt, IXunitTestCollection testCollection, IReadOnlyCollection`1<IXunitTestCase> testCases, Exception exception);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private ValueTask`1<RunSummary> <>n__0(XunitTestAssemblyRunnerContext ctxt, Exception exception);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Xunit.v3.XunitTestAssemblyRunnerContext : TestAssemblyRunnerContext`2<IXunitTestAssembly, IXunitTestCase> {
    private ICollectionBehaviorAttribute collectionBehaviorAttribute;
    private SemaphoreSlim parallelSemaphore;
    private MaxConcurrencySyncContext syncContext;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private FixtureMappingManager <AssemblyFixtureMappings>k__BackingField;
    [CompilerGeneratedAttribute]
private ITestCaseOrderer <AssemblyTestCaseOrderer>k__BackingField;
    [CompilerGeneratedAttribute]
private ITestCollectionOrderer <AssemblyTestCollectionOrderer>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableParallelization>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxParallelThreads>k__BackingField;
    [CompilerGeneratedAttribute]
private ParallelAlgorithm <ParallelAlgorithm>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private IXunitTestAssembly <TestAssembly>k__BackingField;
    [NullableAttribute("1")]
public FixtureMappingManager AssemblyFixtureMappings { get; }
    public ITestCaseOrderer AssemblyTestCaseOrderer { get; private set; }
    public ITestCollectionOrderer AssemblyTestCollectionOrderer { get; private set; }
    public bool DisableParallelization { get; private set; }
    public ExplicitOption ExplicitOption { get; }
    public int MaxParallelThreads { get; private set; }
    public ParallelAlgorithm ParallelAlgorithm { get; private set; }
    [NullableAttribute("1")]
public IXunitTestAssembly TestAssembly { get; }
    [NullableAttribute("1")]
public string TestFrameworkEnvironment { get; }
    [NullableContextAttribute("1")]
public XunitTestAssemblyRunnerContext(IXunitTestAssembly testAssembly, IReadOnlyCollection`1<IXunitTestCase> testCases, IMessageSink executionMessageSink, ITestFrameworkExecutionOptions executionOptions);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public FixtureMappingManager get_AssemblyFixtureMappings();
    [CompilerGeneratedAttribute]
public ITestCaseOrderer get_AssemblyTestCaseOrderer();
    [CompilerGeneratedAttribute]
private void set_AssemblyTestCaseOrderer(ITestCaseOrderer value);
    [CompilerGeneratedAttribute]
public ITestCollectionOrderer get_AssemblyTestCollectionOrderer();
    [CompilerGeneratedAttribute]
private void set_AssemblyTestCollectionOrderer(ITestCollectionOrderer value);
    [CompilerGeneratedAttribute]
public bool get_DisableParallelization();
    [CompilerGeneratedAttribute]
private void set_DisableParallelization(bool value);
    public ExplicitOption get_ExplicitOption();
    [CompilerGeneratedAttribute]
public int get_MaxParallelThreads();
    [CompilerGeneratedAttribute]
private void set_MaxParallelThreads(int value);
    [CompilerGeneratedAttribute]
public ParallelAlgorithm get_ParallelAlgorithm();
    [CompilerGeneratedAttribute]
private void set_ParallelAlgorithm(ParallelAlgorithm value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public IXunitTestAssembly get_TestAssembly();
    [NullableContextAttribute("1")]
public string get_TestFrameworkEnvironment();
    [AsyncStateMachineAttribute("Xunit.v3.XunitTestAssemblyRunnerContext/<DisposeAsync>d__34")]
public virtual ValueTask DisposeAsync();
    [AsyncStateMachineAttribute("Xunit.v3.XunitTestAssemblyRunnerContext/<InitializeAsync>d__35")]
public virtual ValueTask InitializeAsync();
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Xunit.v3.XunitTestAssemblyRunnerContext/<RunTestCollectionAsync>d__36")]
public ValueTask`1<RunSummary> RunTestCollectionAsync(IXunitTestCollection testCollection, IReadOnlyCollection`1<IXunitTestCase> testCases, ITestCaseOrderer testCaseOrderer);
    public virtual void SetupParallelism();
    [SecuritySafeCriticalAttribute]
private static void SetupSyncContextInternal(SynchronizationContext context);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private ValueTask <>n__0();
    [CompilerGeneratedAttribute]
private void <InitializeAsync>b__35_0();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private ValueTask <>n__1();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("\{ class = {TestMethod.TestClass.Class.Name}, method = {TestMethod.Method.Name}, display = {TestCaseDisplayName}, skip = {SkipReason} \}")]
public class Xunit.v3.XunitTestCase : object {
    [NullableAttribute("2")]
private string testCaseDisplayName;
    [NullableAttribute("2")]
private IXunitTestMethod testMethod;
    [NullableAttribute("2")]
private Object[] testMethodArguments;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, HashSet`1<string>> traits;
    [NullableAttribute("2")]
private string uniqueID;
    private DisposalTracker disposalTracker;
    [CompilerGeneratedAttribute]
private bool <Explicit>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <SkipReason>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Type <SkipType>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <SkipUnless>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <SkipWhen>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <SourceFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <SourceLineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Timeout>k__BackingField;
    public bool Explicit { get; private set; }
    [NullableAttribute("2")]
public string SkipReason { get; protected set; }
    [NullableAttribute("2")]
private string Xunit.Sdk.ITestCaseMetadata.SkipReason { get; }
    [NullableAttribute("2")]
public Type SkipType { get; protected set; }
    [NullableAttribute("2")]
public string SkipUnless { get; protected set; }
    [NullableAttribute("2")]
public string SkipWhen { get; protected set; }
    [NullableAttribute("2")]
public string SourceFilePath { get; public set; }
    public Nullable`1<int> SourceLineNumber { get; public set; }
    public int Timeout { get; private set; }
    public string TestCaseDisplayName { get; }
    public IXunitTestCollection TestCollection { get; }
    private ITestCollection Xunit.Sdk.ITestCase.TestCollection { get; }
    public IXunitTestClass TestClass { get; }
    private ITestClass Xunit.Sdk.ITestCase.TestClass { get; }
    public int TestClassMetadataToken { get; }
    private Nullable`1<int> Xunit.Sdk.ITestCaseMetadata.TestClassMetadataToken { get; }
    public string TestClassName { get; }
    [NullableAttribute("2")]
public string TestClassNamespace { get; }
    public IXunitTestMethod TestMethod { get; }
    private ITestMethod Xunit.Sdk.ITestCase.TestMethod { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Object[] TestMethodArguments { get; }
    public int TestMethodMetadataToken { get; }
    private Nullable`1<int> Xunit.Sdk.ITestCaseMetadata.TestMethodMetadataToken { get; }
    public string TestMethodName { get; }
    public Dictionary`2<string, HashSet`1<string>> Traits { get; }
    private IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> Xunit.Sdk.ITestCaseMetadata.Traits { get; }
    public string UniqueID { get; }
    [NullableContextAttribute("2")]
public XunitTestCase(IXunitTestMethod testMethod, string testCaseDisplayName, string uniqueID, bool explicit, string skipReason, Type skipType, string skipUnless, string skipWhen, Dictionary`2<string, HashSet`1<string>> traits, Object[] testMethodArguments, string sourceFilePath, Nullable`1<int> sourceLineNumber, Nullable`1<int> timeout);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Explicit();
    [CompilerGeneratedAttribute]
private void set_Explicit(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual string get_SkipReason();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected void set_SkipReason(string value);
    [NullableContextAttribute("2")]
private sealed virtual override string Xunit.Sdk.ITestCaseMetadata.get_SkipReason();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual Type get_SkipType();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected void set_SkipType(Type value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual string get_SkipUnless();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected void set_SkipUnless(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual string get_SkipWhen();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected void set_SkipWhen(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual string get_SourceFilePath();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_SourceFilePath(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_SourceLineNumber();
    [CompilerGeneratedAttribute]
public void set_SourceLineNumber(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Timeout();
    [CompilerGeneratedAttribute]
private void set_Timeout(int value);
    public sealed virtual string get_TestCaseDisplayName();
    public sealed virtual IXunitTestCollection get_TestCollection();
    private sealed virtual override ITestCollection Xunit.Sdk.ITestCase.get_TestCollection();
    public sealed virtual IXunitTestClass get_TestClass();
    private sealed virtual override ITestClass Xunit.Sdk.ITestCase.get_TestClass();
    public sealed virtual int get_TestClassMetadataToken();
    private sealed virtual override Nullable`1<int> Xunit.Sdk.ITestCaseMetadata.get_TestClassMetadataToken();
    public sealed virtual string get_TestClassName();
    [NullableContextAttribute("2")]
public sealed virtual string get_TestClassNamespace();
    public sealed virtual IXunitTestMethod get_TestMethod();
    private sealed virtual override ITestMethod Xunit.Sdk.ITestCase.get_TestMethod();
    public Object[] get_TestMethodArguments();
    public sealed virtual int get_TestMethodMetadataToken();
    private sealed virtual override Nullable`1<int> Xunit.Sdk.ITestCaseMetadata.get_TestMethodMetadataToken();
    public sealed virtual string get_TestMethodName();
    public Dictionary`2<string, HashSet`1<string>> get_Traits();
    private sealed virtual override IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> Xunit.Sdk.ITestCaseMetadata.get_Traits();
    public virtual string get_UniqueID();
    protected virtual void Deserialize(IXunitSerializationInfo info);
    private sealed virtual override void Xunit.Sdk.IXunitSerializable.Deserialize(IXunitSerializationInfo info);
    public virtual ValueTask DisposeAsync();
    public virtual ValueTask`1<RunSummary> RunAsync(ExplicitOption explicitOption, IMessageBus messageBus, Object[] constructorArguments, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource);
    protected virtual void Serialize(IXunitSerializationInfo info);
    private sealed virtual override void Xunit.Sdk.IXunitSerializable.Serialize(IXunitSerializationInfo info);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4")]
public class Xunit.v3.XunitTestCaseDiscovererAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    public Type Type { get; }
    public XunitTestCaseDiscovererAttribute(Type type);
    [CompilerGeneratedAttribute]
public Type get_Type();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Xunit.v3.XunitTestCaseRunner : XunitTestCaseRunnerBase`2<XunitTestCaseRunnerContext`1<IXunitTestCase>, IXunitTestCase> {
    [CompilerGeneratedAttribute]
private static XunitTestCaseRunner <Instance>k__BackingField;
    public static XunitTestCaseRunner Instance { get; }
    private static XunitTestCaseRunner();
    [CompilerGeneratedAttribute]
public static XunitTestCaseRunner get_Instance();
    [AsyncStateMachineAttribute("Xunit.v3.XunitTestCaseRunner/<RunAsync>d__4")]
public ValueTask`1<RunSummary> RunAsync(IXunitTestCase testCase, IMessageBus messageBus, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource, string displayName, string skipReason, ExplicitOption explicitOption, Object[] constructorArguments, Object[] testMethodArguments);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Xunit.v3.XunitTestCaseRunnerBase`2 : TestCaseRunner`2<TContext, TTestCase> {
    protected virtual IXunitTest CreateTest(TContext ctxt, IXunitTestMethod testMethod, Nullable`1<bool> explicit, string displayName, int testIndex, IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> traits, int timeout);
    protected virtual ValueTask`1<bool> OnTestCaseCleanupFailure(TContext ctxt, Exception exception);
    [NullableContextAttribute("0")]
protected virtual ValueTask`1<bool> OnTestCaseFinished(TContext ctxt, RunSummary summary);
    [NullableContextAttribute("0")]
protected virtual ValueTask`1<bool> OnTestCaseStarting(TContext ctxt);
    protected Object[] ResolveTestMethodArguments(IXunitTestCase testCase, Object[] testMethodArguments);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Xunit.v3.XunitTestCaseRunnerBase`2/<RunTestsAsync>d__5")]
protected virtual ValueTask`1<RunSummary> RunTestsAsync(TContext ctxt, Exception exception);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Xunit.v3.XunitTestCaseRunnerContext`1 : TestCaseRunnerContext`1<TTestCase> {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Object[] <ConstructorArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <SkipReason>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Object[] <TestMethodArguments>k__BackingField;
    public IReadOnlyCollection`1<IBeforeAfterTestAttribute> BeforeAfterTestAttributes { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Object[] ConstructorArguments { get; }
    public string DisplayName { get; }
    [NullableAttribute("2")]
public string SkipReason { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Object[] TestMethodArguments { get; }
    public XunitTestCaseRunnerContext`1(TTestCase testCase, IMessageBus messageBus, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource, string displayName, string skipReason, ExplicitOption explicitOption, Object[] constructorArguments, Object[] testMethodArguments);
    public IReadOnlyCollection`1<IBeforeAfterTestAttribute> get_BeforeAfterTestAttributes();
    [CompilerGeneratedAttribute]
public Object[] get_ConstructorArguments();
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_SkipReason();
    [CompilerGeneratedAttribute]
public Object[] get_TestMethodArguments();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.v3.XunitTestClass : object {
    internal static BindingFlags MethodBindingFlags;
    [NullableAttribute("2")]
private Type class;
    [NullableAttribute("2")]
private IXunitTestCollection testCollection;
    [NullableAttribute("2")]
private string uniqueID;
    private Lazy`1<IReadOnlyCollection`1<IBeforeAfterTestAttribute>> beforeAfterTestAttributes;
    private Lazy`1<IReadOnlyCollection`1<Type>> classFixtureTypes;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<IReadOnlyCollection`1<ConstructorInfo>> constructors;
    private Lazy`1<IReadOnlyCollection`1<MethodInfo>> methods;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<ITestCaseOrderer> testCaseOrderer;
    private Lazy`1<IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>>> traits;
    public IReadOnlyCollection`1<IBeforeAfterTestAttribute> BeforeAfterTestAttributes { get; }
    public Type Class { get; }
    public IReadOnlyCollection`1<Type> ClassFixtureTypes { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyCollection`1<ConstructorInfo> Constructors { get; }
    public IReadOnlyCollection`1<MethodInfo> Methods { get; }
    [NullableAttribute("2")]
public ITestCaseOrderer TestCaseOrderer { get; }
    public string TestClassName { get; }
    [NullableAttribute("2")]
public string TestClassNamespace { get; }
    public IXunitTestCollection TestCollection { get; }
    private ITestCollection Xunit.Sdk.ITestClass.TestCollection { get; }
    public IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> Traits { get; }
    public string UniqueID { get; }
    public XunitTestClass(Type class, IXunitTestCollection testCollection, string uniqueID);
    private static XunitTestClass();
    public sealed virtual IReadOnlyCollection`1<IBeforeAfterTestAttribute> get_BeforeAfterTestAttributes();
    public sealed virtual Type get_Class();
    public sealed virtual IReadOnlyCollection`1<Type> get_ClassFixtureTypes();
    public sealed virtual IReadOnlyCollection`1<ConstructorInfo> get_Constructors();
    public sealed virtual IReadOnlyCollection`1<MethodInfo> get_Methods();
    [NullableContextAttribute("2")]
public sealed virtual ITestCaseOrderer get_TestCaseOrderer();
    public sealed virtual string get_TestClassName();
    [NullableContextAttribute("2")]
public sealed virtual string get_TestClassNamespace();
    public sealed virtual IXunitTestCollection get_TestCollection();
    private sealed virtual override ITestCollection Xunit.Sdk.ITestClass.get_TestCollection();
    public sealed virtual IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> get_Traits();
    public sealed virtual string get_UniqueID();
    public sealed virtual void Deserialize(IXunitSerializationInfo info);
    public sealed virtual void Serialize(IXunitSerializationInfo info);
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<IBeforeAfterTestAttribute> <.ctor>b__10_0();
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<Type> <.ctor>b__10_1();
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<ConstructorInfo> <.ctor>b__10_2();
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<MethodInfo> <.ctor>b__10_3();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private ITestCaseOrderer <.ctor>b__10_4();
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> <.ctor>b__10_5();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Xunit.v3.XunitTestClassRunner : TestClassRunner`4<XunitTestClassRunnerContext, IXunitTestClass, IXunitTestMethod, IXunitTestCase> {
    [CompilerGeneratedAttribute]
private static XunitTestClassRunner <Instance>k__BackingField;
    public static XunitTestClassRunner Instance { get; }
    private static XunitTestClassRunner();
    [CompilerGeneratedAttribute]
public static XunitTestClassRunner get_Instance();
    [AsyncStateMachineAttribute("Xunit.v3.XunitTestClassRunner/<CreateTestClassConstructorArguments>d__4")]
protected virtual ValueTask`1<Object[]> CreateTestClassConstructorArguments(XunitTestClassRunnerContext ctxt);
    protected virtual string FormatConstructorArgsMissingMessage(XunitTestClassRunnerContext ctxt, ConstructorInfo constructor, IReadOnlyList`1<Tuple`2<int, ParameterInfo>> unusedArguments);
    [AsyncStateMachineAttribute("Xunit.v3.XunitTestClassRunner/<GetConstructorArgument>d__6")]
protected virtual ValueTask`1<object> GetConstructorArgument(XunitTestClassRunnerContext ctxt, ConstructorInfo constructor, int index, ParameterInfo parameter);
    protected virtual ValueTask`1<bool> OnTestClassCleanupFailure(XunitTestClassRunnerContext ctxt, Exception exception);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Xunit.v3.XunitTestClassRunner/<OnTestClassFinished>d__8")]
protected virtual ValueTask`1<bool> OnTestClassFinished(XunitTestClassRunnerContext ctxt, RunSummary summary);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Xunit.v3.XunitTestClassRunner/<OnTestClassStarting>d__9")]
protected virtual ValueTask`1<bool> OnTestClassStarting(XunitTestClassRunnerContext ctxt);
    protected virtual IReadOnlyCollection`1<IXunitTestCase> OrderTestCases(XunitTestClassRunnerContext ctxt);
    [AsyncStateMachineAttribute("Xunit.v3.XunitTestClassRunner/<RunAsync>d__11")]
public ValueTask`1<RunSummary> RunAsync(IXunitTestClass testClass, IReadOnlyCollection`1<IXunitTestCase> testCases, ExplicitOption explicitOption, IMessageBus messageBus, ITestCaseOrderer testCaseOrderer, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource, FixtureMappingManager collectionFixtureMappings);
    protected virtual ValueTask`1<RunSummary> RunTestMethodAsync(XunitTestClassRunnerContext ctxt, IXunitTestMethod testMethod, IReadOnlyCollection`1<IXunitTestCase> testCases, Object[] constructorArguments, Exception exception);
    protected virtual ConstructorInfo SelectTestClassConstructor(XunitTestClassRunnerContext ctxt);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Xunit.v3.XunitTestClassRunnerContext : TestClassRunnerContext`2<IXunitTestClass, IXunitTestCase> {
    private ITestCaseOrderer testCaseOrderer;
    [CompilerGeneratedAttribute]
private FixtureMappingManager <ClassFixtureMappings>k__BackingField;
    public FixtureMappingManager ClassFixtureMappings { get; }
    public ITestCaseOrderer TestCaseOrderer { get; public set; }
    public XunitTestClassRunnerContext(IXunitTestClass testClass, IReadOnlyCollection`1<IXunitTestCase> testCases, ExplicitOption explicitOption, IMessageBus messageBus, ITestCaseOrderer testCaseOrderer, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource, FixtureMappingManager collectionFixtureMappings);
    [CompilerGeneratedAttribute]
public FixtureMappingManager get_ClassFixtureMappings();
    public ITestCaseOrderer get_TestCaseOrderer();
    public void set_TestCaseOrderer(ITestCaseOrderer value);
    [AsyncStateMachineAttribute("Xunit.v3.XunitTestClassRunnerContext/<InitializeAsync>d__8")]
public virtual ValueTask InitializeAsync();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private ValueTask <>n__0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("\{ name = {TestCollectionDisplayName}, id = {UniqueID} \}")]
public class Xunit.v3.XunitTestCollection : object {
    [NullableAttribute("2")]
private IXunitTestAssembly testAssembly;
    [NullableAttribute("2")]
private string testCollectionDisplayName;
    [NullableAttribute("2")]
private string uniqueID;
    private Lazy`1<IReadOnlyCollection`1<IBeforeAfterTestAttribute>> beforeAfterTestAttributes;
    private Lazy`1<IReadOnlyCollection`1<Type>> classFixtureTypes;
    private Lazy`1<IReadOnlyCollection`1<Type>> collectionFixtureTypes;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<ITestCaseOrderer> testCaseOrderer;
    private Lazy`1<IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>>> traits;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Type <CollectionDefinition>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableParallelization>k__BackingField;
    public IReadOnlyCollection`1<IBeforeAfterTestAttribute> BeforeAfterTestAttributes { get; }
    public IReadOnlyCollection`1<Type> ClassFixtureTypes { get; }
    [NullableAttribute("2")]
public Type CollectionDefinition { get; private set; }
    public IReadOnlyCollection`1<Type> CollectionFixtureTypes { get; }
    public bool DisableParallelization { get; private set; }
    public IXunitTestAssembly TestAssembly { get; }
    private ITestAssembly Xunit.Sdk.ITestCollection.TestAssembly { get; }
    [NullableAttribute("2")]
public ITestCaseOrderer TestCaseOrderer { get; }
    [NullableAttribute("2")]
public string TestCollectionClassName { get; }
    public string TestCollectionDisplayName { get; }
    public IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> Traits { get; }
    public string UniqueID { get; }
    public XunitTestCollection(IXunitTestAssembly testAssembly, Type collectionDefinition, bool disableParallelization, string displayName, string uniqueID);
    public sealed virtual IReadOnlyCollection`1<IBeforeAfterTestAttribute> get_BeforeAfterTestAttributes();
    public sealed virtual IReadOnlyCollection`1<Type> get_ClassFixtureTypes();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual Type get_CollectionDefinition();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_CollectionDefinition(Type value);
    public sealed virtual IReadOnlyCollection`1<Type> get_CollectionFixtureTypes();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_DisableParallelization();
    [CompilerGeneratedAttribute]
private void set_DisableParallelization(bool value);
    public sealed virtual IXunitTestAssembly get_TestAssembly();
    private sealed virtual override ITestAssembly Xunit.Sdk.ITestCollection.get_TestAssembly();
    [NullableContextAttribute("2")]
public sealed virtual ITestCaseOrderer get_TestCaseOrderer();
    [NullableContextAttribute("2")]
public sealed virtual string get_TestCollectionClassName();
    public sealed virtual string get_TestCollectionDisplayName();
    public sealed virtual IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> get_Traits();
    public sealed virtual string get_UniqueID();
    public sealed virtual void Deserialize(IXunitSerializationInfo info);
    public sealed virtual void Serialize(IXunitSerializationInfo info);
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<IBeforeAfterTestAttribute> <.ctor>b__8_0();
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<Type> <.ctor>b__8_1();
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<Type> <.ctor>b__8_2();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private ITestCaseOrderer <.ctor>b__8_3();
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> <.ctor>b__8_4();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Xunit.v3.XunitTestCollectionRunner : TestCollectionRunner`4<XunitTestCollectionRunnerContext, IXunitTestCollection, IXunitTestClass, IXunitTestCase> {
    [CompilerGeneratedAttribute]
private static XunitTestCollectionRunner <Instance>k__BackingField;
    public static XunitTestCollectionRunner Instance { get; }
    private static XunitTestCollectionRunner();
    [CompilerGeneratedAttribute]
public static XunitTestCollectionRunner get_Instance();
    protected virtual ITestCaseOrderer GetTestCaseOrderer(XunitTestCollectionRunnerContext ctxt);
    protected virtual ValueTask`1<bool> OnTestCollectionCleanupFailure(XunitTestCollectionRunnerContext ctxt, Exception exception);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Xunit.v3.XunitTestCollectionRunner/<OnTestCollectionFinished>d__6")]
protected virtual ValueTask`1<bool> OnTestCollectionFinished(XunitTestCollectionRunnerContext ctxt, RunSummary summary);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Xunit.v3.XunitTestCollectionRunner/<OnTestCollectionStarting>d__7")]
protected virtual ValueTask`1<bool> OnTestCollectionStarting(XunitTestCollectionRunnerContext ctxt);
    [AsyncStateMachineAttribute("Xunit.v3.XunitTestCollectionRunner/<RunAsync>d__8")]
public ValueTask`1<RunSummary> RunAsync(IXunitTestCollection testCollection, IReadOnlyCollection`1<IXunitTestCase> testCases, ExplicitOption explicitOption, IMessageBus messageBus, ITestCaseOrderer testCaseOrderer, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource, FixtureMappingManager assemblyFixtureMappings);
    protected virtual ValueTask`1<RunSummary> RunTestClassAsync(XunitTestCollectionRunnerContext ctxt, IXunitTestClass testClass, IReadOnlyCollection`1<IXunitTestCase> testCases, Exception exception);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Xunit.v3.XunitTestCollectionRunnerContext : TestCollectionRunnerContext`2<IXunitTestCollection, IXunitTestCase> {
    private ITestCaseOrderer testCaseOrderer;
    [CompilerGeneratedAttribute]
private FixtureMappingManager <CollectionFixtureMappings>k__BackingField;
    public FixtureMappingManager CollectionFixtureMappings { get; }
    public ITestCaseOrderer TestCaseOrderer { get; public set; }
    public XunitTestCollectionRunnerContext(IXunitTestCollection testCollection, IReadOnlyCollection`1<IXunitTestCase> testCases, ExplicitOption explicitOption, IMessageBus messageBus, ITestCaseOrderer testCaseOrderer, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource, FixtureMappingManager assemblyFixtureMappings);
    [CompilerGeneratedAttribute]
public FixtureMappingManager get_CollectionFixtureMappings();
    public ITestCaseOrderer get_TestCaseOrderer();
    public void set_TestCaseOrderer(ITestCaseOrderer value);
    [AsyncStateMachineAttribute("Xunit.v3.XunitTestCollectionRunnerContext/<InitializeAsync>d__8")]
public virtual ValueTask InitializeAsync();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private ValueTask <>n__0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Xunit.v3.XunitTestFramework : TestFramework {
    [NullableAttribute("2")]
private string configFileName;
    [CompilerGeneratedAttribute]
private static string <DisplayName>k__BackingField;
    internal static string DisplayName { get; }
    public string TestFrameworkDisplayName { get; }
    [NullableContextAttribute("2")]
public XunitTestFramework(string configFileName);
    private static XunitTestFramework();
    [CompilerGeneratedAttribute]
internal static string get_DisplayName();
    public virtual string get_TestFrameworkDisplayName();
    protected virtual ITestFrameworkDiscoverer CreateDiscoverer(Assembly assembly);
    protected virtual ITestFrameworkExecutor CreateExecutor(Assembly assembly);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Xunit.v3.XunitTestFrameworkDiscoverer : TestFrameworkDiscoverer`2<IXunitTestCase, IXunitTestClass> {
    private static FactAttribute defaultFactAttribute;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Dictionary`2<Type, Type> <DiscovererTypeCache>k__BackingField;
    [CompilerGeneratedAttribute]
private IXunitTestAssembly <TestAssembly>k__BackingField;
    [CompilerGeneratedAttribute]
private IXunitTestCollectionFactory <TestCollectionFactory>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
protected Dictionary`2<Type, Type> DiscovererTypeCache { get; }
    public IXunitTestAssembly TestAssembly { get; }
    public IXunitTestCollectionFactory TestCollectionFactory { get; private set; }
    public XunitTestFrameworkDiscoverer(IXunitTestAssembly testAssembly, IXunitTestCollectionFactory collectionFactory);
    private static XunitTestFrameworkDiscoverer();
    [CompilerGeneratedAttribute]
protected Dictionary`2<Type, Type> get_DiscovererTypeCache();
    [CompilerGeneratedAttribute]
public IXunitTestAssembly get_TestAssembly();
    [CompilerGeneratedAttribute]
public IXunitTestCollectionFactory get_TestCollectionFactory();
    [CompilerGeneratedAttribute]
private void set_TestCollectionFactory(IXunitTestCollectionFactory value);
    protected virtual ValueTask`1<IXunitTestClass> CreateTestClass(Type class);
    [AsyncStateMachineAttribute("Xunit.v3.XunitTestFrameworkDiscoverer/<FindTestsForMethod>d__13")]
protected virtual ValueTask`1<bool> FindTestsForMethod(IXunitTestMethod testMethod, ITestFrameworkDiscoveryOptions discoveryOptions, Func`2<IXunitTestCase, ValueTask`1<bool>> discoveryCallback);
    [AsyncStateMachineAttribute("Xunit.v3.XunitTestFrameworkDiscoverer/<FindTestsForType>d__14")]
protected virtual ValueTask`1<bool> FindTestsForType(IXunitTestClass testClass, ITestFrameworkDiscoveryOptions discoveryOptions, Func`2<IXunitTestCase, ValueTask`1<bool>> discoveryCallback);
    protected static IXunitTestCaseDiscoverer GetDiscoverer(Type discovererType);
    protected virtual Type[] GetExportedTypes();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Xunit.v3.XunitTestFrameworkExecutor : TestFrameworkExecutor`1<IXunitTestCase> {
    private Lazy`1<XunitTestFrameworkDiscoverer> discoverer;
    [CompilerGeneratedAttribute]
private IXunitTestAssembly <TestAssembly>k__BackingField;
    protected IXunitTestAssembly TestAssembly { get; }
    public XunitTestFrameworkExecutor(IXunitTestAssembly testAssembly);
    [CompilerGeneratedAttribute]
protected IXunitTestAssembly get_TestAssembly();
    protected virtual ITestFrameworkDiscoverer CreateDiscoverer();
    [AsyncStateMachineAttribute("Xunit.v3.XunitTestFrameworkExecutor/<RunTestCases>d__6")]
public virtual ValueTask RunTestCases(IReadOnlyCollection`1<IXunitTestCase> testCases, IMessageSink executionMessageSink, ITestFrameworkExecutionOptions executionOptions);
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Xunit.v3.XunitTestInvoker : TestInvoker`2<XunitTestInvokerContext, IXunitTest> {
    [NullableAttribute("1")]
public static XunitTestInvoker Instance;
    private static XunitTestInvoker();
    protected virtual ValueTask`1<TimeSpan> InvokeTestMethodAsync(XunitTestInvokerContext ctxt);
    [AsyncStateMachineAttribute("Xunit.v3.XunitTestInvoker/<InvokeTimeoutTestMethodAsync>d__3")]
private ValueTask`1<TimeSpan> InvokeTimeoutTestMethodAsync(XunitTestInvokerContext ctxt, int timeout);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Xunit.v3.XunitTestInvoker/<RunAsync>d__4")]
public ValueTask`1<TimeSpan> RunAsync(IXunitTest test, object testClassInstance, Object[] testMethodArguments, ExplicitOption explicitOption, IMessageBus messageBus, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private ValueTask`1<TimeSpan> <>n__0(XunitTestInvokerContext ctxt);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Xunit.v3.XunitTestInvokerContext : TestInvokerContext`1<IXunitTest> {
    public XunitTestInvokerContext(ExplicitOption explicitOption, IMessageBus messageBus, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource, IXunitTest test, object testClassInstance, Object[] testMethodArguments);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("\{ class = {TestClass.TestClassName}, method = {Method.Name} \}")]
public class Xunit.v3.XunitTestMethod : object {
    [NullableAttribute("2")]
private MethodInfo method;
    [NullableAttribute("2")]
private IXunitTestClass testClass;
    [NullableAttribute("2")]
private Object[] testMethodArguments;
    [NullableAttribute("2")]
private string uniqueID;
    private Lazy`1<IReadOnlyCollection`1<IBeforeAfterTestAttribute>> beforeAfterTestAttributes;
    private Lazy`1<IReadOnlyCollection`1<IDataAttribute>> dataAttributes;
    private Lazy`1<IReadOnlyCollection`1<IFactAttribute>> factAttributes;
    private Lazy`1<IReadOnlyCollection`1<ParameterInfo>> parameters;
    private Lazy`1<IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>>> traits;
    public IReadOnlyCollection`1<IBeforeAfterTestAttribute> BeforeAfterTestAttributes { get; }
    public IReadOnlyCollection`1<IDataAttribute> DataAttributes { get; }
    public IReadOnlyCollection`1<IFactAttribute> FactAttributes { get; }
    public bool IsGenericMethodDefinition { get; }
    public MethodInfo Method { get; }
    public string MethodName { get; }
    public IReadOnlyCollection`1<ParameterInfo> Parameters { get; }
    public IXunitTestClass TestClass { get; }
    private ITestClass Xunit.Sdk.ITestMethod.TestClass { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Object[] TestMethodArguments { get; }
    public IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> Traits { get; }
    public string UniqueID { get; }
    public XunitTestMethod(IXunitTestClass testClass, MethodInfo method, Object[] testMethodArguments, string uniqueID);
    public sealed virtual IReadOnlyCollection`1<IBeforeAfterTestAttribute> get_BeforeAfterTestAttributes();
    public sealed virtual IReadOnlyCollection`1<IDataAttribute> get_DataAttributes();
    public sealed virtual IReadOnlyCollection`1<IFactAttribute> get_FactAttributes();
    public sealed virtual bool get_IsGenericMethodDefinition();
    public sealed virtual MethodInfo get_Method();
    public sealed virtual string get_MethodName();
    public sealed virtual IReadOnlyCollection`1<ParameterInfo> get_Parameters();
    public sealed virtual IXunitTestClass get_TestClass();
    private sealed virtual override ITestClass Xunit.Sdk.ITestMethod.get_TestClass();
    public sealed virtual Object[] get_TestMethodArguments();
    public sealed virtual IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> get_Traits();
    public sealed virtual string get_UniqueID();
    public sealed virtual void Deserialize(IXunitSerializationInfo info);
    public sealed virtual string GetDisplayName(string baseDisplayName, Object[] testMethodArguments, Type[] methodGenericTypes);
    public sealed virtual MethodInfo MakeGenericMethod(Type[] genericTypes);
    public sealed virtual Type[] ResolveGenericTypes(Object[] arguments);
    public sealed virtual Object[] ResolveMethodArguments(Object[] arguments);
    public sealed virtual void Serialize(IXunitSerializationInfo info);
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<IBeforeAfterTestAttribute> <.ctor>b__9_0();
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<IDataAttribute> <.ctor>b__9_1();
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<IFactAttribute> <.ctor>b__9_2();
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<ParameterInfo> <.ctor>b__9_3();
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, IReadOnlyCollection`1<string>> <.ctor>b__9_4();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Xunit.v3.XunitTestMethodRunner : TestMethodRunner`3<XunitTestMethodRunnerContext, IXunitTestMethod, IXunitTestCase> {
    [CompilerGeneratedAttribute]
private static XunitTestMethodRunner <Instance>k__BackingField;
    public static XunitTestMethodRunner Instance { get; }
    private static XunitTestMethodRunner();
    [CompilerGeneratedAttribute]
public static XunitTestMethodRunner get_Instance();
    [AsyncStateMachineAttribute("Xunit.v3.XunitTestMethodRunner/<RunAsync>d__3")]
public ValueTask`1<RunSummary> RunAsync(IXunitTestMethod testMethod, IReadOnlyCollection`1<IXunitTestCase> testCases, ExplicitOption explicitOption, IMessageBus messageBus, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource, Object[] constructorArguments);
    protected virtual ValueTask`1<bool> OnTestMethodCleanupFailure(XunitTestMethodRunnerContext ctxt, Exception exception);
    [NullableContextAttribute("0")]
protected virtual ValueTask`1<bool> OnTestMethodFinished(XunitTestMethodRunnerContext ctxt, RunSummary summary);
    [NullableContextAttribute("0")]
protected virtual ValueTask`1<bool> OnTestMethodStarting(XunitTestMethodRunnerContext ctxt);
    protected virtual ValueTask`1<RunSummary> RunTestCaseAsync(XunitTestMethodRunnerContext ctxt, IXunitTestCase testCase, Exception exception);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Xunit.v3.XunitTestMethodRunnerContext : TestMethodRunnerContext`2<IXunitTestMethod, IXunitTestCase> {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Object[] <ConstructorArguments>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Object[] ConstructorArguments { get; }
    public XunitTestMethodRunnerContext(IXunitTestMethod testMethod, IReadOnlyCollection`1<IXunitTestCase> testCases, ExplicitOption explicitOption, IMessageBus messageBus, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource, Object[] constructorArguments);
    [CompilerGeneratedAttribute]
public Object[] get_ConstructorArguments();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Xunit.v3.XunitTestRunner : TestRunner`2<XunitTestRunnerContext, IXunitTest> {
    public static XunitTestRunner Instance;
    private static XunitTestRunner();
    [AsyncStateMachineAttribute("Xunit.v3.XunitTestRunner/<CreateTestClassInstance>d__2")]
protected virtual ValueTask`1<object> CreateTestClassInstance(XunitTestRunnerContext ctxt);
    [AsyncStateMachineAttribute("Xunit.v3.XunitTestRunner/<DisposeTestClassInstance>d__3")]
protected virtual ValueTask DisposeTestClassInstance(XunitTestRunnerContext ctxt, object testClassInstance);
    protected virtual ValueTask`1<string> GetTestOutput(XunitTestRunnerContext ctxt);
    [NullableContextAttribute("0")]
protected virtual ValueTask`1<TimeSpan> InvokeTestAsync(XunitTestRunnerContext ctxt, object testClassInstance);
    protected virtual bool IsTestClassCreatable(XunitTestRunnerContext ctxt);
    protected virtual bool IsTestClassDisposable(XunitTestRunnerContext ctxt, object testClassInstance);
    [NullableContextAttribute("0")]
protected virtual ValueTask`1<bool> OnTestClassConstructionFinished(XunitTestRunnerContext ctxt);
    [NullableContextAttribute("0")]
protected virtual ValueTask`1<bool> OnTestClassConstructionStarting(XunitTestRunnerContext ctxt);
    [NullableContextAttribute("0")]
protected virtual ValueTask`1<bool> OnTestClassDisposeFinished(XunitTestRunnerContext ctxt);
    [NullableContextAttribute("0")]
protected virtual ValueTask`1<bool> OnTestClassDisposeStarting(XunitTestRunnerContext ctxt);
    protected virtual ValueTask`1<bool> OnTestCleanupFailure(XunitTestRunnerContext ctxt, Exception exception);
    protected virtual ValueTask`1<ValueTuple`2<bool, TestResultState>> OnTestFailed(XunitTestRunnerContext ctxt, Exception exception, decimal executionTime, string output);
    protected virtual ValueTask`1<bool> OnTestFinished(XunitTestRunnerContext ctxt, decimal executionTime, string output);
    protected virtual ValueTask`1<ValueTuple`2<bool, TestResultState>> OnTestNotRun(XunitTestRunnerContext ctxt, string output);
    protected virtual ValueTask`1<ValueTuple`2<bool, TestResultState>> OnTestPassed(XunitTestRunnerContext ctxt, decimal executionTime, string output);
    protected virtual ValueTask`1<ValueTuple`2<bool, TestResultState>> OnTestSkipped(XunitTestRunnerContext ctxt, string skipReason, decimal executionTime, string output);
    [NullableContextAttribute("0")]
protected virtual ValueTask`1<bool> OnTestStarting(XunitTestRunnerContext ctxt);
    protected virtual ValueTask PostInvoke(XunitTestRunnerContext ctxt);
    protected virtual ValueTask PreInvoke(XunitTestRunnerContext ctxt);
    [AsyncStateMachineAttribute("Xunit.v3.XunitTestRunner/<RunAsync>d__21")]
public ValueTask`1<RunSummary> RunAsync(IXunitTest test, IMessageBus messageBus, Object[] constructorArguments, Object[] testMethodArguments, string skipReason, ExplicitOption explicitOption, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource, IReadOnlyCollection`1<IBeforeAfterTestAttribute> beforeAfterAttributes);
    protected virtual void SetTestContext(XunitTestRunnerContext ctxt, TestEngineStatus testStatus, TestResultState testState);
    protected virtual bool ShouldTestRun(XunitTestRunnerContext ctxt);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Xunit.v3.XunitTestRunnerContext : TestRunnerContext`1<IXunitTest> {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<string> getRuntimeSkipReason;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<IBeforeAfterTestAttribute> <BeforeAfterTestAttributes>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Object[] <ConstructorArguments>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Object[] <TestMethodArguments>k__BackingField;
    public IReadOnlyCollection`1<IBeforeAfterTestAttribute> BeforeAfterTestAttributes { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Object[] ConstructorArguments { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Object[] TestMethodArguments { get; }
    public XunitTestRunnerContext(IXunitTest test, IMessageBus messageBus, string skipReason, ExplicitOption explicitOption, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource, IReadOnlyCollection`1<IBeforeAfterTestAttribute> beforeAfterTestAttributes, Object[] constructorArguments, Object[] testMethodArguments);
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<IBeforeAfterTestAttribute> get_BeforeAfterTestAttributes();
    [CompilerGeneratedAttribute]
private void set_BeforeAfterTestAttributes(IReadOnlyCollection`1<IBeforeAfterTestAttribute> value);
    [CompilerGeneratedAttribute]
public Object[] get_ConstructorArguments();
    [CompilerGeneratedAttribute]
public Object[] get_TestMethodArguments();
    [NullableContextAttribute("2")]
private string GetRuntimeSkipReason();
    [NullableContextAttribute("2")]
public virtual string GetSkipReason(Exception exception);
    [AsyncStateMachineAttribute("Xunit.v3.XunitTestRunnerContext/<RunAfterAttributes>d__14")]
public ValueTask RunAfterAttributes();
    [AsyncStateMachineAttribute("Xunit.v3.XunitTestRunnerContext/<RunBeforeAttributes>d__15")]
public ValueTask RunBeforeAttributes();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private string <GetRuntimeSkipReason>b__12_0();
}
