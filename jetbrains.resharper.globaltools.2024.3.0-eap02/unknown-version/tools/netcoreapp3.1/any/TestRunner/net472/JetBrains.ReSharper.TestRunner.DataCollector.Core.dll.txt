[ExtensionAttribute]
internal static class JetBrains.ReSharper.TestRunner.DataCollector.Extensions.XmlExtensions : object {
    [ExtensionAttribute]
public static void ReadToNextElement(XmlReader reader);
    [ExtensionAttribute]
public static void SkipToNextElement(XmlReader reader);
    [ExtensionAttribute]
public static void ReadToRootNode(XmlReader reader);
}
internal class JetBrains.ReSharper.TestRunner.DataCollector.Implementation.DataCollectionManager : LongLivedMarshalByRefObject {
    private IDataCollectorFactory myDataCollectorFactory;
    private ILogger myLogger;
    public DataCollectionManager(IDataCollectorFactory dataCollectorFactory);
    public sealed virtual IDictionary`2<string, string> InitializeDataCollectors(string runSettings);
}
internal class JetBrains.ReSharper.TestRunner.DataCollector.Implementation.DataCollectorAdapter : object {
    private DataCollector myDataCollector;
    public DataCollectorAdapter(DataCollector dataCollector);
    public sealed virtual void Initialize(XmlElement configuration);
    public sealed virtual IDictionary`2<string, string> GetEnvironmentVariablesForExecution();
}
internal class JetBrains.ReSharper.TestRunner.DataCollector.Implementation.DataCollectorFactory : object {
    private static Regex ourRemoveAssemblyVersionRegex;
    private IAssemblyResolver myAssemblyResolver;
    public DataCollectorFactory(IAssemblyResolver assemblyResolver);
    private static DataCollectorFactory();
    public sealed virtual IDataCollector Build(DataCollectorSettings settings);
}
public interface JetBrains.ReSharper.TestRunner.DataCollector.Implementation.IDataCollectionManager {
    public abstract virtual IDictionary`2<string, string> InitializeDataCollectors(string runSettings);
}
internal interface JetBrains.ReSharper.TestRunner.DataCollector.Implementation.IDataCollector {
    public abstract virtual void Initialize(XmlElement configuration);
    public abstract virtual IDictionary`2<string, string> GetEnvironmentVariablesForExecution();
}
internal interface JetBrains.ReSharper.TestRunner.DataCollector.Implementation.IDataCollectorFactory {
    public abstract virtual IDataCollector Build(DataCollectorSettings settings);
}
internal class JetBrains.ReSharper.TestRunner.DataCollector.Implementation.LegacyDataCollectorAdapter : object {
    private static Lazy`1<Type> ourEnvironmentSpecifierType;
    private static Lazy`1<MethodInfo> ourGetEnvVarsMethod;
    private DataCollector myDataCollector;
    private static LegacyDataCollectorAdapter();
    public LegacyDataCollectorAdapter(DataCollector dataCollector);
    public sealed virtual void Initialize(XmlElement configuration);
    public sealed virtual IDictionary`2<string, string> GetEnvironmentVariablesForExecution();
}
internal static class JetBrains.ReSharper.TestRunner.DataCollector.ImportantTypes : object {
    public static string ExecutionCommonAssembly;
    public static string AgentContext;
    public static string ControllerContext;
    public static string DataCollectionEnvironmentContext;
    public static string DataCollectionEvents;
    public static string DataCollectionSink;
    public static string DataCollectionLogger;
    public static string ITestExecutionEnvironmentSpecifier;
}
internal interface JetBrains.ReSharper.TestRunner.DataCollector.Proxies.IDataCollectionEvents {
}
internal interface JetBrains.ReSharper.TestRunner.DataCollector.Proxies.IDataCollectionLogger {
}
internal interface JetBrains.ReSharper.TestRunner.DataCollector.Proxies.IDataCollectionSink {
}
public class JetBrains.ReSharper.TestRunner.DataCollector.Settings.DataCollectionRunSettings : object {
    [CompilerGeneratedAttribute]
private Collection`1<DataCollectorSettings> <DataCollectors>k__BackingField;
    public Collection`1<DataCollectorSettings> DataCollectors { get; }
    public bool IsCollectionEnabled { get; }
    [CompilerGeneratedAttribute]
public Collection`1<DataCollectorSettings> get_DataCollectors();
    public bool get_IsCollectionEnabled();
    public static DataCollectionRunSettings Load(string runSettings);
    public static DataCollectionRunSettings FromXml(XmlReader reader);
    private static List`1<DataCollectorSettings> ReadListElementFromXml(XmlReader reader, string dataCollectorsName);
}
public class JetBrains.ReSharper.TestRunner.DataCollector.Settings.DataCollectorSettings : object {
    [CompilerGeneratedAttribute]
private Uri <Uri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyQualifiedName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FriendlyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CodeBase>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlElement <Configuration>k__BackingField;
    public Uri Uri { get; public set; }
    public string AssemblyQualifiedName { get; public set; }
    public string FriendlyName { get; public set; }
    public string CodeBase { get; public set; }
    public bool IsEnabled { get; public set; }
    public XmlElement Configuration { get; public set; }
    [CompilerGeneratedAttribute]
public Uri get_Uri();
    [CompilerGeneratedAttribute]
public void set_Uri(Uri value);
    [CompilerGeneratedAttribute]
public string get_AssemblyQualifiedName();
    [CompilerGeneratedAttribute]
public void set_AssemblyQualifiedName(string value);
    [CompilerGeneratedAttribute]
public string get_FriendlyName();
    [CompilerGeneratedAttribute]
public void set_FriendlyName(string value);
    [CompilerGeneratedAttribute]
public string get_CodeBase();
    [CompilerGeneratedAttribute]
public void set_CodeBase(string value);
    [CompilerGeneratedAttribute]
public bool get_IsEnabled();
    [CompilerGeneratedAttribute]
public void set_IsEnabled(bool value);
    [CompilerGeneratedAttribute]
public XmlElement get_Configuration();
    [CompilerGeneratedAttribute]
public void set_Configuration(XmlElement value);
    internal static DataCollectorSettings FromXml(XmlReader reader);
}
public class JetBrains.ReSharper.TestRunner.DataCollector.Settings.SettingsException : Exception {
    public SettingsException(string message);
    public SettingsException(string message, Exception innerException);
}
