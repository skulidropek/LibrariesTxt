public static class JetBrains.ReSharper.TestRunner.Disposable : object {
    public static IDisposable Empty;
    private static Disposable();
    public static IDisposable Create(Action closing);
    public static IDisposable CreateBracket(Action opening, Action closing);
    public static IDisposable CreateBracket(Func`1<T> opening, Action`1<T> closing);
    public static IDisposable Aggregate(IDisposable[] items);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.TestRunner.Extensions.AssemblyResolverExtensions : object {
    [ExtensionAttribute]
public static IDisposable ResolveRelativeTo(IAssemblyResolver resolver, ClientControllerInfo info);
    [ExtensionAttribute]
public static IDisposable ResolveRelativeTo(IAssemblyResolver resolver, ICollection`1<string> probingPaths);
}
[ExtensionAttribute]
internal static class JetBrains.ReSharper.TestRunner.Extensions.InternalExtensions : object {
    [ExtensionAttribute]
internal static string GetParentDirectoryOrSelf(string path);
    [ExtensionAttribute]
internal static bool CanFulfill(AssemblyName probingAsm, AssemblyName requestedAsm);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.TestRunner.Extensions.LoadContextExtensions : object {
    [ExtensionAttribute]
public static T Create(ILoadContext ctx, T1 p1);
    [ExtensionAttribute]
public static T Create(ILoadContext ctx, T1 p1, T2 p2);
    [ExtensionAttribute]
public static T Create(ILoadContext ctx, T1 p1, T2 p2, T3 p3);
    [ExtensionAttribute]
public static T Create(ILoadContext ctx, Object[] args);
    [ExtensionAttribute]
public static void DumpLoadedAssemblies(ILoadContext ctx, ILogger logger, LoggingLevel severity);
}
[ExtensionAttribute]
public static class JetBrains.ReSharper.TestRunner.Extensions.TestExecutionSinkExtensions : object {
    [ExtensionAttribute]
public static ITestExecutionSink WithDurationTracking(ITestExecutionSink inner, Func`2<RemoteTask, RemoteTask> tryGetParentTask);
}
internal class JetBrains.ReSharper.TestRunner.Extensions.TestExecutionSinkWithDurationTracking : object {
    private ITestExecutionSink myInner;
    private Func`2<RemoteTask, RemoteTask> myTryGetParentTask;
    private ConcurrentDictionary`2<RemoteTask, DateTime> myStartTime;
    private ConcurrentDictionary`2<RemoteTask, DateTime> myEndTime;
    private ConcurrentDictionary`2<RemoteTask, DateTime> myFirstChildStartedAt;
    private ConcurrentDictionary`2<RemoteTask, DateTime> myLastChildFinishedAt;
    private ConcurrentDictionary`2<RemoteTask, int> myRunningChildrenCount;
    private ILogger myLogger;
    public TestExecutionSinkWithDurationTracking(ITestExecutionSink inner, Func`2<RemoteTask, RemoteTask> tryGetParentTask);
    public sealed virtual void TestStarting(RemoteTask task);
    public sealed virtual void TestFinished(RemoteTask task, TestOutcome outcome, string message, Nullable`1<TimeSpan> duration);
    private Nullable`1<TimeSpan> CalculateOwnDuration(RemoteTask task, Nullable`1<TimeSpan> totalDuration);
    public sealed virtual void TestException(RemoteTask task, ExceptionInfo[] exceptions);
    public sealed virtual void TestOutput(RemoteTask task, string text, TestOutputType outputType);
    public sealed virtual void DynamicTestDiscovered(RemoteTask task);
}
public class JetBrains.ReSharper.TestRunner.Isolation.AssemblyLoader : object {
    private AssemblyLoadContext myContext;
    private RegisteredAssembliesResolver myAssembliesResolver;
    private DirectoryBoundResolver myDirectoryResolver;
    private IDictionary`2<AssemblyName, string> myResultsCache;
    private ILogger myLogger;
    private object myLock;
    public AssemblyLoader(ILogger logger);
    public AssemblyLoader(AssemblyLoadContext context, bool attachToDefault, ILogger logger);
    private Assembly ContextOnResolving(AssemblyLoadContext ctx, AssemblyName assemblyName);
    public string ResolveAssemblyToPath(AssemblyName assemblyName);
    public sealed virtual Type GetType(string fullyQualifiedName);
    public sealed virtual Assembly LoadFrom(string assemblyFile);
    public sealed virtual IDisposable ResolveRelativeTo(string path);
    public sealed virtual IDisposable RegisterAssembly(AssemblyName asmName, string pathToAssembly);
    public sealed virtual IDisposable RegisterPath(string path);
    private void RunAndDropCache(Action action);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private Assembly <GetType>b__10_0(AssemblyName name);
}
internal class JetBrains.ReSharper.TestRunner.Isolation.DirectoryBoundResolver : ResolverBase {
    private static String[] ourPatterns;
    private Dictionary`2<string, int> myRegisteredPaths;
    private ILogger myLogger;
    private object myLock;
    public DirectoryBoundResolver(ILogger logger);
    private static DirectoryBoundResolver();
    public void RegisterPath(string path);
    public void UnregisterPath(string path);
    public virtual string ResolveAssemblyToPath(AssemblyName asmName);
}
internal class JetBrains.ReSharper.TestRunner.Isolation.RegisteredAssembliesResolver : ResolverBase {
    private Dictionary`2<string, IDictionary`2<string, string>> myRegisteredAssemblies;
    private ILogger myLogger;
    private object myLock;
    public RegisteredAssembliesResolver(ILogger logger);
    public void RegisterAssembly(AssemblyName asmName, string pathToAssembly);
    public void UnregisterAssembly(AssemblyName asmName);
    public virtual string ResolveAssemblyToPath(AssemblyName asmName);
}
internal abstract class JetBrains.ReSharper.TestRunner.Isolation.ResolverBase : object {
    private Dictionary`2<string, AssemblyName> myAssemblyNameCache;
    public abstract virtual string ResolveAssemblyToPath(AssemblyName asmName);
    protected AssemblyName GetAssemblyNameFromPath(string path);
    private AssemblyName GetAssemblyNameFromPathCore(string path);
    protected bool IsManagedAssembly(string pathToAssembly);
}
public class JetBrains.ReSharper.TestRunner.Logging.LoggerFactoryInjector : LongLivedMarshalByRefObject {
    public void Inject(ILoggerFactory factory);
}
public class JetBrains.ReSharper.TestRunner.Logging.LoggerFactoryProxy : RejectingCallContextObject {
    private ILoggerFactory myInner;
    public LoggerFactoryProxy(ILoggerFactory inner);
    public sealed virtual ILogger GetLogger(string category);
    public sealed virtual void Setup(AppDomain appDomain, LoggerFactoryAppointment appointment);
}
public class JetBrains.ReSharper.TestRunner.Logging.LoggerProxy : RejectingCallContextObject {
    private ILogger myInner;
    public LoggerProxy(ILogger inner);
    public sealed virtual bool IsEnabled(LoggingLevel level);
    public sealed virtual void Log(LoggingLevel level, string message, Object[] args);
    public sealed virtual void Log(LoggingLevel level, Exception exception, string message, Object[] args);
    public sealed virtual void Log(LoggingLevel level, LogMessageGenerator messageFunc);
}
public class JetBrains.ReSharper.TestRunner.Logging.TraceListener : DefaultTraceListener {
    public static void Install();
    public virtual void Fail(string message);
    public virtual void Fail(string message, string detailMessage);
}
[EmptyCallContextAttribute]
public class JetBrains.ReSharper.TestRunner.RejectingCallContextObject : ContextBoundObject {
    public virtual object InitializeLifetimeService();
}
[AttributeUsageAttribute("4")]
public class JetBrains.ReSharper.TestRunner.Remoting.EmptyCallContextAttribute : Attribute {
}
public static class JetBrains.ReSharper.TestRunner.Runtime : object {
    public static bool IsMono { get; }
    public static bool get_IsMono();
}
