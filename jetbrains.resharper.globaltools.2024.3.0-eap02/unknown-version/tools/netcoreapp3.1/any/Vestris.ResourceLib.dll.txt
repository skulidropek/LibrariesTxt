public class Vestris.ResourceLib.Accelerator : object {
    private ACCEL _accel;
    public string Key { get; }
    public UInt32 Command { get; public set; }
    internal IntPtr Read(IntPtr lpRes);
    internal void Write(BinaryWriter w);
    public string get_Key();
    public UInt32 get_Command();
    public void set_Command(UInt32 value);
    public virtual string ToString();
}
public class Vestris.ResourceLib.AcceleratorResource : Resource {
    private List`1<Accelerator> _accelerators;
    public List`1<Accelerator> Accelerators { get; public set; }
    public AcceleratorResource(IntPtr hModule, IntPtr hResource, ResourceId type, ResourceId name, ushort language, int size);
    public List`1<Accelerator> get_Accelerators();
    public void set_Accelerators(List`1<Accelerator> value);
    internal virtual IntPtr Read(IntPtr hModule, IntPtr lpRes);
    internal virtual void Write(BinaryWriter w);
    public virtual string ToString();
}
public class Vestris.ResourceLib.BitmapFile : object {
    private BITMAPFILEHEADER _header;
    private DeviceIndependentBitmap _bitmap;
    public DeviceIndependentBitmap Bitmap { get; }
    public BitmapFile(string filename);
    public DeviceIndependentBitmap get_Bitmap();
}
public class Vestris.ResourceLib.BitmapResource : Resource {
    private DeviceIndependentBitmap _bitmap;
    public DeviceIndependentBitmap Bitmap { get; public set; }
    public BitmapResource(IntPtr hModule, IntPtr hResource, ResourceId type, ResourceId name, ushort language, int size);
    internal virtual IntPtr Read(IntPtr hModule, IntPtr lpRes);
    internal virtual void Write(BinaryWriter w);
    public DeviceIndependentBitmap get_Bitmap();
    public void set_Bitmap(DeviceIndependentBitmap value);
}
public class Vestris.ResourceLib.CursorDirectoryResource : DirectoryResource`1<CursorResource> {
    internal CursorDirectoryResource(IntPtr hModule, IntPtr hResource, ResourceId type, ResourceId name, ushort language, int size);
    public CursorDirectoryResource(IconFile iconFile);
}
public class Vestris.ResourceLib.CursorResource : IconImageResource {
    private ushort _hotspotx;
    private ushort _hotspoty;
    public ushort HotspotX { get; public set; }
    public ushort HotspotY { get; public set; }
    internal CursorResource(IntPtr hModule, IntPtr hResource, ResourceId type, ResourceId name, ushort language, int size);
    public CursorResource(IconFileIcon icon, ResourceId id, ushort language);
    public ushort get_HotspotX();
    public void set_HotspotX(ushort value);
    public ushort get_HotspotY();
    public void set_HotspotY(ushort value);
    public virtual void SaveIconTo(string filename);
    internal virtual void ReadImage(IntPtr dibBits, UInt32 size);
}
public class Vestris.ResourceLib.DeviceIndependentBitmap : object {
    private BITMAPINFOHEADER _header;
    private Byte[] _data;
    private Bitmap _mask;
    private Bitmap _color;
    private Bitmap _image;
    public Byte[] Data { get; public set; }
    public BITMAPINFOHEADER Header { get; }
    public int Size { get; }
    private int MaskImageSize { get; }
    private int XorImageSize { get; }
    private int XorImageIndex { get; }
    private UInt32 ColorCount { get; }
    private int MaskImageIndex { get; }
    public Bitmap Mask { get; }
    public Bitmap Color { get; }
    public Bitmap Image { get; }
    public DeviceIndependentBitmap(Byte[] data);
    public DeviceIndependentBitmap(DeviceIndependentBitmap image);
    public Byte[] get_Data();
    public void set_Data(Byte[] value);
    public BITMAPINFOHEADER get_Header();
    public int get_Size();
    internal void Read(IntPtr lpData, UInt32 size);
    private int get_MaskImageSize();
    private int get_XorImageSize();
    private int get_XorImageIndex();
    private UInt32 get_ColorCount();
    private int get_MaskImageIndex();
    private int GetDIBRowWidth(int width);
    public Bitmap get_Mask();
    public Bitmap get_Color();
    public Bitmap get_Image();
}
public class Vestris.ResourceLib.DialogExTemplate : DialogTemplateBase {
    private DIALOGEXTEMPLATE _header;
    private byte _characterSet;
    private ushort _weight;
    private bool _italic;
    public byte CharacterSet { get; public set; }
    public short x { get; public set; }
    public short y { get; public set; }
    public short cx { get; public set; }
    public short cy { get; public set; }
    public UInt32 Style { get; public set; }
    public UInt32 ExtendedStyle { get; public set; }
    public ushort Weight { get; public set; }
    public bool Italic { get; public set; }
    public ushort ControlCount { get; }
    public byte get_CharacterSet();
    public void set_CharacterSet(byte value);
    public virtual short get_x();
    public virtual void set_x(short value);
    public virtual short get_y();
    public virtual void set_y(short value);
    public virtual short get_cx();
    public virtual void set_cx(short value);
    public virtual short get_cy();
    public virtual void set_cy(short value);
    public virtual UInt32 get_Style();
    public virtual void set_Style(UInt32 value);
    public virtual UInt32 get_ExtendedStyle();
    public virtual void set_ExtendedStyle(UInt32 value);
    public ushort get_Weight();
    public void set_Weight(ushort value);
    public bool get_Italic();
    public void set_Italic(bool value);
    public virtual ushort get_ControlCount();
    internal virtual IntPtr Read(IntPtr lpRes);
    internal virtual IntPtr AddControl(IntPtr lpRes);
    public virtual void Write(BinaryWriter w);
    public virtual string ToString();
}
public class Vestris.ResourceLib.DialogExTemplateControl : DialogTemplateControlBase {
    private DIALOGEXITEMTEMPLATE _header;
    public short x { get; public set; }
    public short y { get; public set; }
    public short cx { get; public set; }
    public short cy { get; public set; }
    public UInt32 Style { get; public set; }
    public UInt32 ExtendedStyle { get; public set; }
    public int Id { get; public set; }
    public virtual short get_x();
    public virtual void set_x(short value);
    public virtual short get_y();
    public virtual void set_y(short value);
    public virtual short get_cx();
    public virtual void set_cx(short value);
    public virtual short get_cy();
    public virtual void set_cy(short value);
    public virtual UInt32 get_Style();
    public virtual void set_Style(UInt32 value);
    public virtual UInt32 get_ExtendedStyle();
    public virtual void set_ExtendedStyle(UInt32 value);
    public int get_Id();
    public void set_Id(int value);
    internal virtual IntPtr Read(IntPtr lpRes);
    public virtual void Write(BinaryWriter w);
    public virtual string ToString();
}
public class Vestris.ResourceLib.DialogResource : Resource {
    private DialogTemplateBase _dlgtemplate;
    public DialogTemplateBase Template { get; public set; }
    public DialogResource(IntPtr hModule, IntPtr hResource, ResourceId type, ResourceId name, ushort language, int size);
    public DialogTemplateBase get_Template();
    public void set_Template(DialogTemplateBase value);
    internal virtual IntPtr Read(IntPtr hModule, IntPtr lpRes);
    internal virtual void Write(BinaryWriter w);
    public virtual string ToString();
}
public class Vestris.ResourceLib.DialogTemplate : DialogTemplateBase {
    private DIALOGTEMPLATE _header;
    public short x { get; public set; }
    public short y { get; public set; }
    public short cx { get; public set; }
    public short cy { get; public set; }
    public UInt32 Style { get; public set; }
    public UInt32 ExtendedStyle { get; public set; }
    public ushort ControlCount { get; }
    public virtual short get_x();
    public virtual void set_x(short value);
    public virtual short get_y();
    public virtual void set_y(short value);
    public virtual short get_cx();
    public virtual void set_cx(short value);
    public virtual short get_cy();
    public virtual void set_cy(short value);
    public virtual UInt32 get_Style();
    public virtual void set_Style(UInt32 value);
    public virtual UInt32 get_ExtendedStyle();
    public virtual void set_ExtendedStyle(UInt32 value);
    public virtual ushort get_ControlCount();
    internal virtual IntPtr Read(IntPtr lpRes);
    internal virtual IntPtr AddControl(IntPtr lpRes);
    public virtual void Write(BinaryWriter w);
    public virtual string ToString();
}
public abstract class Vestris.ResourceLib.DialogTemplateBase : object {
    private string _caption;
    private ResourceId _menuId;
    private ResourceId _windowClassId;
    private ushort _pointSize;
    private string _typeface;
    private List`1<DialogTemplateControlBase> _controls;
    public short x { get; public set; }
    public short y { get; public set; }
    public short cx { get; public set; }
    public short cy { get; public set; }
    public UInt32 Style { get; public set; }
    public UInt32 ExtendedStyle { get; public set; }
    public ushort ControlCount { get; }
    public string TypeFace { get; public set; }
    public ushort PointSize { get; public set; }
    public string Caption { get; public set; }
    public ResourceId MenuId { get; public set; }
    public ResourceId WindowClassId { get; public set; }
    public List`1<DialogTemplateControlBase> Controls { get; public set; }
    public abstract virtual short get_x();
    public abstract virtual void set_x(short value);
    public abstract virtual short get_y();
    public abstract virtual void set_y(short value);
    public abstract virtual short get_cx();
    public abstract virtual void set_cx(short value);
    public abstract virtual short get_cy();
    public abstract virtual void set_cy(short value);
    public abstract virtual UInt32 get_Style();
    public abstract virtual void set_Style(UInt32 value);
    public abstract virtual UInt32 get_ExtendedStyle();
    public abstract virtual void set_ExtendedStyle(UInt32 value);
    public abstract virtual ushort get_ControlCount();
    public string get_TypeFace();
    public void set_TypeFace(string value);
    public ushort get_PointSize();
    public void set_PointSize(ushort value);
    public string get_Caption();
    public void set_Caption(string value);
    public ResourceId get_MenuId();
    public void set_MenuId(ResourceId value);
    public ResourceId get_WindowClassId();
    public void set_WindowClassId(ResourceId value);
    public List`1<DialogTemplateControlBase> get_Controls();
    public void set_Controls(List`1<DialogTemplateControlBase> value);
    public virtual string ToString();
    public virtual string ToControlString();
    internal virtual IntPtr Read(IntPtr lpRes);
    internal abstract virtual IntPtr AddControl(IntPtr lpRes);
    internal IntPtr ReadControls(IntPtr lpRes);
    internal void WriteControls(BinaryWriter w);
    public virtual void Write(BinaryWriter w);
}
public class Vestris.ResourceLib.DialogTemplateControl : DialogTemplateControlBase {
    private DIALOGITEMTEMPLATE _header;
    public short x { get; public set; }
    public short y { get; public set; }
    public short cx { get; public set; }
    public short cy { get; public set; }
    public UInt32 Style { get; public set; }
    public UInt32 ExtendedStyle { get; public set; }
    public short Id { get; public set; }
    public virtual short get_x();
    public virtual void set_x(short value);
    public virtual short get_y();
    public virtual void set_y(short value);
    public virtual short get_cx();
    public virtual void set_cx(short value);
    public virtual short get_cy();
    public virtual void set_cy(short value);
    public virtual UInt32 get_Style();
    public virtual void set_Style(UInt32 value);
    public virtual UInt32 get_ExtendedStyle();
    public virtual void set_ExtendedStyle(UInt32 value);
    public short get_Id();
    public void set_Id(short value);
    internal virtual IntPtr Read(IntPtr lpRes);
    public virtual void Write(BinaryWriter w);
    public virtual string ToString();
}
public abstract class Vestris.ResourceLib.DialogTemplateControlBase : object {
    private ResourceId _captionId;
    private ResourceId _controlClassId;
    private Byte[] _creationData;
    public short x { get; public set; }
    public short y { get; public set; }
    public short cx { get; public set; }
    public short cy { get; public set; }
    public UInt32 Style { get; public set; }
    public UInt32 ExtendedStyle { get; public set; }
    public ResourceId CaptionId { get; public set; }
    public ResourceId ControlClassId { get; public set; }
    public DialogItemClass ControlClass { get; }
    public Byte[] CreationData { get; public set; }
    public abstract virtual short get_x();
    public abstract virtual void set_x(short value);
    public abstract virtual short get_y();
    public abstract virtual void set_y(short value);
    public abstract virtual short get_cx();
    public abstract virtual void set_cx(short value);
    public abstract virtual short get_cy();
    public abstract virtual void set_cy(short value);
    public abstract virtual UInt32 get_Style();
    public abstract virtual void set_Style(UInt32 value);
    public abstract virtual UInt32 get_ExtendedStyle();
    public abstract virtual void set_ExtendedStyle(UInt32 value);
    public ResourceId get_CaptionId();
    public void set_CaptionId(ResourceId value);
    public ResourceId get_ControlClassId();
    public void set_ControlClassId(ResourceId value);
    public DialogItemClass get_ControlClass();
    public Byte[] get_CreationData();
    public void set_CreationData(Byte[] value);
    internal virtual IntPtr Read(IntPtr lpRes);
    public virtual void Write(BinaryWriter w);
}
internal abstract class Vestris.ResourceLib.DialogTemplateUtil : object {
    internal static IntPtr ReadResourceId(IntPtr lpRes, ResourceId& rc);
    internal static void WriteResourceId(BinaryWriter w, ResourceId rc);
    internal static string StyleToString(UInt32 style);
    internal static string StyleToString(UInt32 style, UInt32 exstyle);
    internal static string StyleToString(UInt32 style);
}
public class Vestris.ResourceLib.DirectoryResource`1 : Resource {
    private GRPICONDIR _header;
    private List`1<ImageResourceType> _icons;
    public ResourceTypes ResourceType { get; }
    public List`1<ImageResourceType> Icons { get; public set; }
    internal DirectoryResource`1(IntPtr hModule, IntPtr hResource, ResourceId type, ResourceId name, ushort language, int size);
    public DirectoryResource`1(ResourceTypes resourceType);
    public ResourceTypes get_ResourceType();
    public List`1<ImageResourceType> get_Icons();
    public void set_Icons(List`1<ImageResourceType> value);
    public virtual void SaveTo(string filename);
    internal virtual IntPtr Read(IntPtr hModule, IntPtr lpRes);
    internal virtual void Write(BinaryWriter w);
}
public class Vestris.ResourceLib.FixedFileInfo : object {
    private VS_FIXEDFILEINFO _fixedfileinfo;
    public VS_FIXEDFILEINFO Value { get; }
    public string FileVersion { get; public set; }
    public string ProductVersion { get; public set; }
    public UInt32 FileFlags { get; public set; }
    public ushort Size { get; }
    public VS_FIXEDFILEINFO get_Value();
    internal void Read(IntPtr lpRes);
    public string get_FileVersion();
    public void set_FileVersion(string value);
    public string get_ProductVersion();
    public void set_ProductVersion(string value);
    public UInt32 get_FileFlags();
    public void set_FileFlags(UInt32 value);
    public void Write(BinaryWriter w);
    public ushort get_Size();
    public virtual string ToString();
}
public class Vestris.ResourceLib.FontDirectoryEntry : object {
    private ushort _fontOrdinal;
    private FONTDIRENTRY _font;
    private string _faceName;
    private string _deviceName;
    public ushort FontOrdinal { get; public set; }
    public string FaceName { get; public set; }
    public string DeviceName { get; public set; }
    public FONTDIRENTRY Font { get; public set; }
    public ushort get_FontOrdinal();
    public void set_FontOrdinal(ushort value);
    public string get_FaceName();
    public void set_FaceName(string value);
    public string get_DeviceName();
    public void set_DeviceName(string value);
    public FONTDIRENTRY get_Font();
    public void set_Font(FONTDIRENTRY value);
    internal IntPtr Read(IntPtr lpRes);
    public void Write(BinaryWriter w);
}
public class Vestris.ResourceLib.FontDirectoryResource : Resource {
    private List`1<FontDirectoryEntry> _fonts;
    private Byte[] _reserved;
    public List`1<FontDirectoryEntry> Fonts { get; public set; }
    public FontDirectoryResource(IntPtr hModule, IntPtr hResource, ResourceId type, ResourceId name, ushort language, int size);
    public List`1<FontDirectoryEntry> get_Fonts();
    public void set_Fonts(List`1<FontDirectoryEntry> value);
    internal virtual IntPtr Read(IntPtr hModule, IntPtr lpRes);
    internal virtual void Write(BinaryWriter w);
}
public class Vestris.ResourceLib.FontResource : GenericResource {
    public FontResource(IntPtr hModule, IntPtr hResource, ResourceId type, ResourceId name, ushort language, int size);
    internal virtual IntPtr Read(IntPtr hModule, IntPtr lpRes);
    internal virtual void Write(BinaryWriter w);
}
public abstract class Vestris.ResourceLib.Gdi32 : object {
    internal static int SetDIBitsToDevice(IntPtr hdc, int XDest, int YDest, UInt32 dwWidth, UInt32 dwHeight, int XSrc, int YSrc, UInt32 uStartScan, UInt32 cScanLines, Byte[] lpvBits, BITMAPINFO& lpbmi, UInt32 fuColorUse);
    internal static int SetDIBitsToDevice(IntPtr hdc, int XDest, int YDest, UInt32 dwWidth, UInt32 dwHeight, int XSrc, int YSrc, UInt32 uStartScan, UInt32 cScanLines, IntPtr lpvBits, IntPtr lpbmi, UInt32 fuColorUse);
    internal static int GetDIBits(IntPtr hdc, IntPtr hbmp, UInt32 uStartScan, UInt32 cScanLines, Byte[] lpvBits, BITMAPINFO& lpbmi, UInt32 uUsage);
    internal static IntPtr CreateDIBSection(IntPtr hdc, BITMAPINFO& pbmi, UInt32 iUsage, IntPtr& ppvBits, IntPtr hSection, UInt32 dwOffset);
    internal static IntPtr CreateCompatibleDC(IntPtr hdc);
    internal static IntPtr CreateDC(string lpDriverName, string lpDeviceName, string lpOutput, IntPtr lpInitData);
    internal static IntPtr CreateCompatibleBitmap(IntPtr hdc, int nWidth, int nHeight);
    internal static IntPtr SelectObject(IntPtr hdc, IntPtr hgdiobj);
    internal static int DeleteObject(IntPtr hObject);
    internal static int DeleteDC(IntPtr hdc);
}
public class Vestris.ResourceLib.GenericResource : Resource {
    protected Byte[] _data;
    public Byte[] Data { get; public set; }
    public GenericResource(IntPtr hModule, IntPtr hResource, ResourceId type, ResourceId name, ushort language, int size);
    public GenericResource(ResourceId type, ResourceId name, ushort language);
    public Byte[] get_Data();
    public void set_Data(Byte[] value);
    internal virtual IntPtr Read(IntPtr hModule, IntPtr lpRes);
    internal virtual void Write(BinaryWriter w);
}
public class Vestris.ResourceLib.IconDirectoryResource : DirectoryResource`1<IconResource> {
    internal IconDirectoryResource(IntPtr hModule, IntPtr hResource, ResourceId type, ResourceId name, ushort language, int size);
    public IconDirectoryResource(IconFile iconFile);
}
public class Vestris.ResourceLib.IconFile : object {
    private FILEGRPICONDIR _header;
    private List`1<IconFileIcon> _icons;
    public GroupType Type { get; public set; }
    public List`1<IconFileIcon> Icons { get; public set; }
    public IconFile(string filename);
    public GroupType get_Type();
    public void set_Type(GroupType value);
    public List`1<IconFileIcon> get_Icons();
    public void set_Icons(List`1<IconFileIcon> value);
    public void LoadFrom(string filename);
    internal IntPtr Read(IntPtr lpData);
}
public class Vestris.ResourceLib.IconFileIcon : object {
    private FILEGRPICONDIRENTRY _header;
    private DeviceIndependentBitmap _image;
    public FILEGRPICONDIRENTRY Header { get; }
    public DeviceIndependentBitmap Image { get; public set; }
    public byte Width { get; }
    public byte Height { get; }
    public UInt32 ImageSize { get; }
    public FILEGRPICONDIRENTRY get_Header();
    public DeviceIndependentBitmap get_Image();
    public void set_Image(DeviceIndependentBitmap value);
    public byte get_Width();
    public byte get_Height();
    public UInt32 get_ImageSize();
    internal IntPtr Read(IntPtr lpData, IntPtr lpAllData);
    public virtual string ToString();
}
public class Vestris.ResourceLib.IconImageResource : Resource {
    protected GRPICONDIRENTRY _header;
    protected DeviceIndependentBitmap _image;
    public GRPICONDIRENTRY Header { get; public set; }
    public ushort Id { get; public set; }
    public DeviceIndependentBitmap Image { get; public set; }
    public byte Width { get; public set; }
    public byte Height { get; public set; }
    public UInt32 ImageSize { get; public set; }
    public PixelFormat PixelFormat { get; }
    public string PixelFormatString { get; }
    internal IconImageResource(IntPtr hModule, IntPtr hResource, ResourceId type, ResourceId name, ushort language, int size);
    public IconImageResource(ResourceId type);
    public IconImageResource(IconFileIcon icon, ResourceId type, ResourceId name, ushort language);
    public GRPICONDIRENTRY get_Header();
    public void set_Header(GRPICONDIRENTRY value);
    public ushort get_Id();
    public void set_Id(ushort value);
    public DeviceIndependentBitmap get_Image();
    public void set_Image(DeviceIndependentBitmap value);
    public byte get_Width();
    public void set_Width(byte value);
    public byte get_Height();
    public void set_Height(byte value);
    public UInt32 get_ImageSize();
    public void set_ImageSize(UInt32 value);
    internal virtual IntPtr Read(IntPtr hModule, IntPtr lpRes);
    internal virtual void ReadImage(IntPtr dibBits, UInt32 size);
    public PixelFormat get_PixelFormat();
    public string get_PixelFormatString();
    public virtual string ToString();
    internal virtual void Write(BinaryWriter w);
    public virtual void SaveIconTo(string filename);
}
public class Vestris.ResourceLib.IconResource : IconImageResource {
    internal IconResource(IntPtr hModule, IntPtr hResource, ResourceId type, ResourceId name, ushort language, int size);
    public IconResource(IconFileIcon icon, ResourceId id, ushort language);
}
public abstract class Vestris.ResourceLib.Kernel32 : object {
    internal static UInt32 LOAD_LIBRARY_AS_DATAFILE;
    internal static UInt32 DONT_RESOLVE_DLL_REFERENCES;
    internal static UInt32 LOAD_WITH_ALTERED_SEARCH_PATH;
    internal static UInt32 LOAD_IGNORE_CODE_AUTHZ_LEVEL;
    public static ushort LANG_NEUTRAL;
    public static ushort LANG_ENGLISH;
    public static ushort SUBLANG_NEUTRAL;
    public static ushort SUBLANG_ENGLISH_US;
    public static ushort CREATEPROCESS_MANIFEST_RESOURCE_ID;
    public static ushort ISOLATIONAWARE_MANIFEST_RESOURCE_ID;
    public static ushort ISOLATIONAWARE_NOSTATICIMPORT_MANIFEST_RESOURCE_ID;
    internal static IntPtr LoadLibraryEx(string lpFileName, IntPtr hFile, UInt32 dwFlags);
    internal static bool FreeLibrary(IntPtr hModule);
    internal static bool EnumResourceTypes(IntPtr hModule, EnumResourceTypesDelegate lpEnumFunc, IntPtr lParam);
    internal static bool EnumResourceNames(IntPtr hModule, IntPtr lpszType, EnumResourceNamesDelegate lpEnumFunc, IntPtr lParam);
    internal static bool EnumResourceLanguages(IntPtr hModule, IntPtr lpszType, IntPtr lpszName, EnumResourceLanguagesDelegate lpEnumFunc, IntPtr lParam);
    internal static IntPtr FindResourceEx(IntPtr hModule, IntPtr lpszType, IntPtr lpszName, ushort wLanguage);
    internal static IntPtr LockResource(IntPtr hResData);
    internal static IntPtr LoadResource(IntPtr hModule, IntPtr hResData);
    internal static int SizeofResource(IntPtr hInstance, IntPtr hResInfo);
    internal static bool CloseHandle(IntPtr hHandle);
    internal static IntPtr BeginUpdateResource(string pFileName, bool bDeleteExistingResources);
    internal static bool UpdateResource(IntPtr hUpdate, IntPtr lpType, IntPtr lpName, ushort wLanguage, Byte[] lpData, UInt32 cbData);
    internal static bool EndUpdateResource(IntPtr hUpdate, bool fDiscard);
}
public class Vestris.ResourceLib.LoadException : Exception {
    private Exception _outerException;
    public Exception OuterException { get; }
    public string Message { get; }
    public LoadException(string message, Exception innerException, Exception outerException);
    public Exception get_OuterException();
    public virtual string get_Message();
}
public class Vestris.ResourceLib.ManifestResource : Resource {
    private static Byte[] utf8_bom;
    private Byte[] _data;
    private XmlDocument _manifest;
    public XmlDocument Manifest { get; public set; }
    public ManifestType ManifestType { get; public set; }
    public ManifestResource(IntPtr hModule, IntPtr hResource, ResourceId type, ResourceId name, ushort language, int size);
    public ManifestResource(ManifestType manifestType);
    private static ManifestResource();
    public XmlDocument get_Manifest();
    public void set_Manifest(XmlDocument value);
    public ManifestType get_ManifestType();
    public void set_ManifestType(ManifestType value);
    internal virtual IntPtr Read(IntPtr hModule, IntPtr lpRes);
    internal virtual void Write(BinaryWriter w);
    public void LoadFrom(string filename, ManifestType manifestType);
}
public class Vestris.ResourceLib.MenuExTemplate : MenuTemplateBase {
    private MENUEXTEMPLATE _header;
    private MenuExTemplateItemCollection _menuItems;
    public MenuExTemplateItemCollection MenuItems { get; public set; }
    public MenuExTemplateItemCollection get_MenuItems();
    public void set_MenuItems(MenuExTemplateItemCollection value);
    internal virtual IntPtr Read(IntPtr lpRes);
    internal virtual void Write(BinaryWriter w);
    public virtual string ToString();
}
public abstract class Vestris.ResourceLib.MenuExTemplateItem : object {
    protected MENUEXITEMTEMPLATE _header;
    protected string _menuString;
    public string MenuString { get; public set; }
    public string get_MenuString();
    public void set_MenuString(string value);
    internal virtual IntPtr Read(IntPtr lpRes);
    internal virtual void Write(BinaryWriter w);
    public abstract virtual string ToString(int indent);
    public virtual string ToString();
}
public class Vestris.ResourceLib.MenuExTemplateItemCollection : List`1<MenuExTemplateItem> {
    internal IntPtr Read(IntPtr lpRes);
    internal void Write(BinaryWriter w);
    public virtual string ToString();
    public string ToString(int indent);
}
public class Vestris.ResourceLib.MenuExTemplateItemCommand : MenuExTemplateItem {
    public bool IsSeparator { get; }
    public bool get_IsSeparator();
    public virtual string ToString(int indent);
}
public class Vestris.ResourceLib.MenuExTemplateItemPopup : MenuExTemplateItem {
    private UInt32 _dwHelpId;
    private MenuExTemplateItemCollection _subMenuItems;
    public MenuExTemplateItemCollection SubMenuItems { get; public set; }
    public MenuExTemplateItemCollection get_SubMenuItems();
    public void set_SubMenuItems(MenuExTemplateItemCollection value);
    internal virtual IntPtr Read(IntPtr lpRes);
    internal virtual void Write(BinaryWriter w);
    public virtual string ToString(int indent);
}
public class Vestris.ResourceLib.MenuResource : Resource {
    private MenuTemplateBase _menu;
    public MenuTemplateBase Menu { get; public set; }
    public MenuResource(IntPtr hModule, IntPtr hResource, ResourceId type, ResourceId name, ushort language, int size);
    public MenuTemplateBase get_Menu();
    public void set_Menu(MenuTemplateBase value);
    internal virtual IntPtr Read(IntPtr hModule, IntPtr lpRes);
    internal virtual void Write(BinaryWriter w);
    public virtual string ToString();
}
public class Vestris.ResourceLib.MenuTemplate : MenuTemplateBase {
    private MENUTEMPLATE _header;
    private MenuTemplateItemCollection _menuItems;
    public MenuTemplateItemCollection MenuItems { get; public set; }
    public MenuTemplateItemCollection get_MenuItems();
    public void set_MenuItems(MenuTemplateItemCollection value);
    internal virtual IntPtr Read(IntPtr lpRes);
    internal virtual void Write(BinaryWriter w);
    public virtual string ToString();
}
public abstract class Vestris.ResourceLib.MenuTemplateBase : object {
    internal abstract virtual IntPtr Read(IntPtr lpRes);
    internal abstract virtual void Write(BinaryWriter w);
}
public abstract class Vestris.ResourceLib.MenuTemplateItem : object {
    protected MENUITEMTEMPLATE _header;
    protected string _menuString;
    public string MenuString { get; public set; }
    public string get_MenuString();
    public void set_MenuString(string value);
    internal virtual IntPtr Read(IntPtr lpRes);
    internal virtual void Write(BinaryWriter w);
    public abstract virtual string ToString(int indent);
    public virtual string ToString();
}
public class Vestris.ResourceLib.MenuTemplateItemCollection : List`1<MenuTemplateItem> {
    internal IntPtr Read(IntPtr lpRes);
    internal void Write(BinaryWriter w);
    public virtual string ToString();
    public string ToString(int indent);
}
public class Vestris.ResourceLib.MenuTemplateItemCommand : MenuTemplateItem {
    private ushort _menuId;
    public ushort MenuId { get; public set; }
    public bool IsSeparator { get; }
    public ushort get_MenuId();
    public void set_MenuId(ushort value);
    internal virtual IntPtr Read(IntPtr lpRes);
    internal virtual void Write(BinaryWriter w);
    public bool get_IsSeparator();
    public virtual string ToString(int indent);
}
public class Vestris.ResourceLib.MenuTemplateItemPopup : MenuTemplateItem {
    private MenuTemplateItemCollection _subMenuItems;
    public MenuTemplateItemCollection SubMenuItems { get; public set; }
    public MenuTemplateItemCollection get_SubMenuItems();
    public void set_SubMenuItems(MenuTemplateItemCollection value);
    internal virtual IntPtr Read(IntPtr lpRes);
    internal virtual void Write(BinaryWriter w);
    public virtual string ToString(int indent);
}
public abstract class Vestris.ResourceLib.Resource : object {
    protected ResourceId _type;
    protected ResourceId _name;
    protected ushort _language;
    protected IntPtr _hModule;
    protected IntPtr _hResource;
    protected int _size;
    public int Size { get; }
    public ushort Language { get; public set; }
    public ResourceId Type { get; }
    public string TypeName { get; }
    public ResourceId Name { get; public set; }
    internal Resource(IntPtr hModule, IntPtr hResource, ResourceId type, ResourceId name, ushort language, int size);
    public int get_Size();
    public ushort get_Language();
    public void set_Language(ushort value);
    public ResourceId get_Type();
    public string get_TypeName();
    public ResourceId get_Name();
    public void set_Name(ResourceId value);
    internal void LockAndReadResource(IntPtr hModule, IntPtr hResource);
    public virtual void LoadFrom(string filename);
    internal void LoadFrom(string filename, ResourceId type, ResourceId name, ushort lang);
    internal void LoadFrom(IntPtr hModule, ResourceId type, ResourceId name, ushort lang);
    internal abstract virtual IntPtr Read(IntPtr hModule, IntPtr lpRes);
    internal abstract virtual void Write(BinaryWriter w);
    public Byte[] WriteAndGetBytes();
    public virtual void SaveTo(string filename);
    internal void SaveTo(string filename, ResourceId type, ResourceId name, ushort langid);
    public virtual void DeleteFrom(string filename);
    internal static void Delete(string filename, ResourceId type, ResourceId name, ushort lang);
    internal static void SaveTo(string filename, ResourceId type, ResourceId name, ushort lang, Byte[] data);
}
public class Vestris.ResourceLib.ResourceId : object {
    private IntPtr _name;
    public IntPtr Id { get; public set; }
    public string TypeName { get; }
    public ResourceTypes ResourceType { get; public set; }
    public string Name { get; public set; }
    public ResourceId(IntPtr value);
    public ResourceId(UInt32 value);
    public ResourceId(ResourceTypes value);
    public ResourceId(string value);
    public IntPtr get_Id();
    public void set_Id(IntPtr value);
    public string get_TypeName();
    public ResourceTypes get_ResourceType();
    public void set_ResourceType(ResourceTypes value);
    public bool IsIntResource();
    internal static bool IsIntResource(IntPtr value);
    public string get_Name();
    public void set_Name(string value);
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
[DefaultMemberAttribute("Item")]
public class Vestris.ResourceLib.ResourceInfo : object {
    private Exception _innerException;
    private IntPtr _hModule;
    private Dictionary`2<ResourceId, List`1<Resource>> _resources;
    private List`1<ResourceId> _resourceTypes;
    public Dictionary`2<ResourceId, List`1<Resource>> Resources { get; }
    public List`1<ResourceId> ResourceTypes { get; }
    public List`1<Resource> Item { get; public set; }
    public List`1<Resource> Item { get; public set; }
    public Dictionary`2<ResourceId, List`1<Resource>> get_Resources();
    public List`1<ResourceId> get_ResourceTypes();
    public void Unload();
    public void Load(string filename);
    private bool EnumResourceTypesImpl(IntPtr hModule, IntPtr lpszType, IntPtr lParam);
    private bool EnumResourceNamesImpl(IntPtr hModule, IntPtr lpszType, IntPtr lpszName, IntPtr lParam);
    protected Resource CreateResource(IntPtr hModule, IntPtr hResourceGlobal, ResourceId type, ResourceId name, ushort wIDLanguage, int size);
    private bool EnumResourceLanguages(IntPtr hModule, IntPtr lpszType, IntPtr lpszName, ushort wIDLanguage, IntPtr lParam);
    public void Save(string filename);
    public sealed virtual void Dispose();
    public List`1<Resource> get_Item(ResourceTypes type);
    public void set_Item(ResourceTypes type, List`1<Resource> value);
    public List`1<Resource> get_Item(string type);
    public void set_Item(string type, List`1<Resource> value);
    public sealed virtual IEnumerator`1<Resource> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class Vestris.ResourceLib.ResourceTableHeader : object {
    protected RESOURCE_HEADER _header;
    protected string _key;
    public string Key { get; }
    public RESOURCE_HEADER Header { get; public set; }
    public ResourceTableHeader(string key);
    internal ResourceTableHeader(IntPtr lpRes);
    public string get_Key();
    public RESOURCE_HEADER get_Header();
    public void set_Header(RESOURCE_HEADER value);
    internal virtual IntPtr Read(IntPtr lpRes);
    internal virtual void Write(BinaryWriter w);
    public virtual string ToString();
    public virtual string ToString(int indent);
}
public abstract class Vestris.ResourceLib.ResourceUtil : object {
    public static ushort NEUTRALLANGID { get; }
    public static ushort USENGLISHLANGID { get; }
    internal static IntPtr Align(long p);
    internal static IntPtr Align(IntPtr p);
    internal static long PadToWORD(BinaryWriter w);
    internal static long PadToDWORD(BinaryWriter w);
    internal static ushort HiWord(UInt32 value);
    internal static ushort LoWord(UInt32 value);
    internal static void WriteAt(BinaryWriter w, long value, long address);
    internal static long Pad(BinaryWriter w, ushort len);
    public static ushort get_NEUTRALLANGID();
    public static ushort get_USENGLISHLANGID();
    public static ushort MAKELANGID(int primary, int sub);
    public static ushort PRIMARYLANGID(ushort lcid);
    public static ushort SUBLANGID(ushort lcid);
    internal static Byte[] GetBytes(T anything);
    internal static List`1<string> FlagsToList(UInt32 flagValue);
    internal static string FlagsToString(UInt32 flagValue);
}
[DefaultMemberAttribute("Item")]
public class Vestris.ResourceLib.StringFileInfo : ResourceTableHeader {
    private Dictionary`2<string, StringTable> _strings;
    public Dictionary`2<string, StringTable> Strings { get; }
    public StringTable Default { get; }
    public string Item { get; public set; }
    internal StringFileInfo(IntPtr lpRes);
    public Dictionary`2<string, StringTable> get_Strings();
    internal virtual IntPtr Read(IntPtr lpRes);
    internal virtual void Write(BinaryWriter w);
    public StringTable get_Default();
    public string get_Item(string key);
    public void set_Item(string key, string value);
    public virtual string ToString(int indent);
}
[DefaultMemberAttribute("Item")]
public class Vestris.ResourceLib.StringResource : Resource {
    private Dictionary`2<ushort, string> _strings;
    public Dictionary`2<ushort, string> Strings { get; public set; }
    public string Item { get; public set; }
    public ushort BlockId { get; public set; }
    public StringResource(ResourceId blockId);
    public StringResource(ushort blockId);
    public StringResource(IntPtr hModule, IntPtr hResource, ResourceId type, ResourceId name, ushort language, int size);
    public Dictionary`2<ushort, string> get_Strings();
    public void set_Strings(Dictionary`2<ushort, string> value);
    public string get_Item(ushort id);
    public void set_Item(ushort id, string value);
    public static ushort GetBlockId(int stringId);
    public ushort get_BlockId();
    public void set_BlockId(ushort value);
    internal virtual IntPtr Read(IntPtr hModule, IntPtr lpRes);
    internal virtual void Write(BinaryWriter w);
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
public class Vestris.ResourceLib.StringTable : ResourceTableHeader {
    private Dictionary`2<string, StringTableEntry> _strings;
    public Dictionary`2<string, StringTableEntry> Strings { get; }
    public ushort LanguageID { get; public set; }
    public ushort CodePage { get; public set; }
    public string Item { get; public set; }
    public StringTable(string key);
    internal StringTable(IntPtr lpRes);
    public Dictionary`2<string, StringTableEntry> get_Strings();
    internal virtual IntPtr Read(IntPtr lpRes);
    internal virtual void Write(BinaryWriter w);
    public ushort get_LanguageID();
    public void set_LanguageID(ushort value);
    public ushort get_CodePage();
    public void set_CodePage(ushort value);
    public string get_Item(string key);
    public void set_Item(string key, string value);
    public virtual string ToString(int indent);
}
public class Vestris.ResourceLib.StringTableEntry : object {
    private RESOURCE_HEADER _header;
    private string _key;
    private string _value;
    public RESOURCE_HEADER Header { get; }
    public string Key { get; }
    public string StringValue { get; }
    public string Value { get; public set; }
    public StringTableEntry(string key);
    internal StringTableEntry(IntPtr lpRes);
    public RESOURCE_HEADER get_Header();
    public string get_Key();
    public string get_StringValue();
    public string get_Value();
    public void set_Value(string value);
    internal void Read(IntPtr lpRes);
    internal void Write(BinaryWriter w);
}
public abstract class Vestris.ResourceLib.User32 : object {
    internal static IntPtr GetDC(IntPtr hWnd);
    internal static IntPtr ReleaseDC(IntPtr hWnd, IntPtr hDC);
    internal static int DestroyIcon(IntPtr hIcon);
    internal static IntPtr CreateIconIndirect(ICONINFO& piconInfo);
}
[DefaultMemberAttribute("Item")]
public class Vestris.ResourceLib.VarFileInfo : ResourceTableHeader {
    private Dictionary`2<string, VarTable> _vars;
    public Dictionary`2<string, VarTable> Vars { get; }
    public VarTable Default { get; }
    public ushort Item { get; public set; }
    internal VarFileInfo(IntPtr lpRes);
    public Dictionary`2<string, VarTable> get_Vars();
    internal virtual IntPtr Read(IntPtr lpRes);
    internal virtual void Write(BinaryWriter w);
    public VarTable get_Default();
    public ushort get_Item(ushort language);
    public void set_Item(ushort language, ushort value);
    public virtual string ToString(int indent);
}
[DefaultMemberAttribute("Item")]
public class Vestris.ResourceLib.VarTable : ResourceTableHeader {
    private Dictionary`2<ushort, ushort> _languages;
    public Dictionary`2<ushort, ushort> Languages { get; }
    public ushort Item { get; public set; }
    public VarTable(string key);
    internal VarTable(IntPtr lpRes);
    public Dictionary`2<ushort, ushort> get_Languages();
    internal virtual IntPtr Read(IntPtr lpRes);
    internal virtual void Write(BinaryWriter w);
    public ushort get_Item(ushort key);
    public void set_Item(ushort key, ushort value);
    public virtual string ToString(int indent);
}
[DefaultMemberAttribute("Item")]
public class Vestris.ResourceLib.VersionResource : Resource {
    private ResourceTableHeader _header;
    private FixedFileInfo _fixedfileinfo;
    private Dictionary`2<string, ResourceTableHeader> _resources;
    public ResourceTableHeader Header { get; }
    public Dictionary`2<string, ResourceTableHeader> Resources { get; }
    public string FileVersion { get; public set; }
    public UInt32 FileFlags { get; public set; }
    public string ProductVersion { get; public set; }
    public ResourceTableHeader Item { get; public set; }
    public VersionResource(IntPtr hModule, IntPtr hResource, ResourceId type, ResourceId name, ushort language, int size);
    public ResourceTableHeader get_Header();
    public Dictionary`2<string, ResourceTableHeader> get_Resources();
    internal virtual IntPtr Read(IntPtr hModule, IntPtr lpRes);
    public string get_FileVersion();
    public void set_FileVersion(string value);
    public UInt32 get_FileFlags();
    public void set_FileFlags(UInt32 value);
    public string get_ProductVersion();
    public void set_ProductVersion(string value);
    internal virtual void Write(BinaryWriter w);
    public ResourceTableHeader get_Item(string key);
    public void set_Item(string key, ResourceTableHeader value);
    public virtual string ToString();
}
public abstract class Vestris.ResourceLib.Winver : object {
    public static UInt32 VS_FFI_SIGNATURE;
    public static UInt32 VS_FFI_STRUCVERSION;
    public static UInt32 VS_FFI_FILEFLAGSMASK;
}
