internal class System.JetBrainsMockNotImplementedException : NotImplementedException {
    private Guid _guid;
    public string Message { get; }
    public JetBrainsMockNotImplementedException(Guid guid);
    public virtual string get_Message();
}
public class System.Windows.Automation.Peers.WindowsFormsHostAutomationPeer : FrameworkElementAutomationPeer {
    protected bool IsHwndHost { get; }
    public WindowsFormsHostAutomationPeer(WindowsFormsHost owner);
    protected virtual bool get_IsHwndHost();
    protected virtual string GetClassNameCore();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    [SecurityTreatAsSafeAttribute]
[SecurityCriticalAttribute]
protected virtual HostedWindowWrapper GetHostRawElementProviderCore();
}
public class System.Windows.Forms.Integration.ChildChangedEventArgs : EventArgs {
    public object PreviousChild { get; }
    public ChildChangedEventArgs(object previousChild);
    public object get_PreviousChild();
}
[DefaultEventAttribute("ChildChanged")]
[DesignerCategoryAttribute("code")]
[ContentPropertyAttribute("Child")]
[DesignerAttribute("WindowsFormsIntegration.Design.ElementHostDesigner, WindowsFormsIntegration.Design, Version=1.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[DesignerSerializerAttribute("WindowsFormsIntegration.Design.ElementHostCodeDomSerializer, WindowsFormsIntegration.Design, Version=1.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.ComponentModel.Design.Serialization.CodeDomSerializer, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.Windows.Forms.Integration.ElementHost : Control {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<ChildChangedEventArgs> ChildChanged;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler BindingContextChanged;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler Click;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler ClientSizeChanged;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ControlEventHandler ControlAdded;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ControlEventHandler ControlRemoved;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler CursorChanged;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler DoubleClick;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DragEventHandler DragDrop;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DragEventHandler DragEnter;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler DragLeave;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private DragEventHandler DragOver;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler Enter;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler FontChanged;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler ForeColorChanged;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private GiveFeedbackEventHandler GiveFeedback;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler GotFocus;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private InvalidateEventHandler Invalidated;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private KeyEventHandler KeyDown;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private KeyPressEventHandler KeyPress;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private KeyEventHandler KeyUp;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private LayoutEventHandler Layout;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler Leave;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler LostFocus;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler MouseCaptureChanged;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private MouseEventHandler MouseClick;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private MouseEventHandler MouseDoubleClick;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private MouseEventHandler MouseDown;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler MouseEnter;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler MouseHover;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler MouseLeave;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private MouseEventHandler MouseMove;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private MouseEventHandler MouseUp;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private MouseEventHandler MouseWheel;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler PaddingChanged;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private PaintEventHandler Paint;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private PreviewKeyDownEventHandler PreviewKeyDown;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private QueryContinueDragEventHandler QueryContinueDrag;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler Resize;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler RightToLeftChanged;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler SizeChanged;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler TextChanged;
    protected Size DefaultSize { get; }
    [BrowsableAttribute("True")]
[EditorBrowsableAttribute("0")]
public bool AutoSize { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public Panel HostContainer { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public UIElement Child { get; public set; }
    protected bool CanEnableIme { get; }
    public bool Focused { get; }
    [DefaultValueAttribute("False")]
public bool BackColorTransparent { get; public set; }
    [BrowsableAttribute("False")]
public PropertyMap PropertyMap { get; }
    protected virtual Size get_DefaultSize();
    public virtual bool get_AutoSize();
    public virtual void set_AutoSize(bool value);
    public Panel get_HostContainer();
    public UIElement get_Child();
    public void set_Child(UIElement value);
    protected virtual bool get_CanEnableIme();
    public virtual bool get_Focused();
    public bool get_BackColorTransparent();
    public void set_BackColorTransparent(bool value);
    public PropertyMap get_PropertyMap();
    [CompilerGeneratedAttribute]
public void add_ChildChanged(EventHandler`1<ChildChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ChildChanged(EventHandler`1<ChildChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_BindingContextChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_BindingContextChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_Click(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Click(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_ClientSizeChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ClientSizeChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_ControlAdded(ControlEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ControlAdded(ControlEventHandler value);
    [CompilerGeneratedAttribute]
public void add_ControlRemoved(ControlEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ControlRemoved(ControlEventHandler value);
    [CompilerGeneratedAttribute]
public void add_CursorChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_CursorChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_DoubleClick(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_DoubleClick(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_DragDrop(DragEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_DragDrop(DragEventHandler value);
    [CompilerGeneratedAttribute]
public void add_DragEnter(DragEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_DragEnter(DragEventHandler value);
    [CompilerGeneratedAttribute]
public void add_DragLeave(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_DragLeave(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_DragOver(DragEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_DragOver(DragEventHandler value);
    [CompilerGeneratedAttribute]
public void add_Enter(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Enter(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_FontChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_FontChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_ForeColorChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ForeColorChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_GiveFeedback(GiveFeedbackEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_GiveFeedback(GiveFeedbackEventHandler value);
    [CompilerGeneratedAttribute]
public void add_GotFocus(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_GotFocus(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_Invalidated(InvalidateEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Invalidated(InvalidateEventHandler value);
    [CompilerGeneratedAttribute]
public void add_KeyDown(KeyEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_KeyDown(KeyEventHandler value);
    [CompilerGeneratedAttribute]
public void add_KeyPress(KeyPressEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_KeyPress(KeyPressEventHandler value);
    [CompilerGeneratedAttribute]
public void add_KeyUp(KeyEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_KeyUp(KeyEventHandler value);
    [CompilerGeneratedAttribute]
public void add_Layout(LayoutEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Layout(LayoutEventHandler value);
    [CompilerGeneratedAttribute]
public void add_Leave(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Leave(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_LostFocus(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_LostFocus(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_MouseCaptureChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_MouseCaptureChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_MouseClick(MouseEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_MouseClick(MouseEventHandler value);
    [CompilerGeneratedAttribute]
public void add_MouseDoubleClick(MouseEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_MouseDoubleClick(MouseEventHandler value);
    [CompilerGeneratedAttribute]
public void add_MouseDown(MouseEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_MouseDown(MouseEventHandler value);
    [CompilerGeneratedAttribute]
public void add_MouseEnter(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_MouseEnter(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_MouseHover(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_MouseHover(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_MouseLeave(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_MouseLeave(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_MouseMove(MouseEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_MouseMove(MouseEventHandler value);
    [CompilerGeneratedAttribute]
public void add_MouseUp(MouseEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_MouseUp(MouseEventHandler value);
    [CompilerGeneratedAttribute]
public void add_MouseWheel(MouseEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_MouseWheel(MouseEventHandler value);
    [CompilerGeneratedAttribute]
public void add_PaddingChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_PaddingChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_Paint(PaintEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Paint(PaintEventHandler value);
    [CompilerGeneratedAttribute]
public void add_PreviewKeyDown(PreviewKeyDownEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_PreviewKeyDown(PreviewKeyDownEventHandler value);
    [CompilerGeneratedAttribute]
public void add_QueryContinueDrag(QueryContinueDragEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_QueryContinueDrag(QueryContinueDragEventHandler value);
    [CompilerGeneratedAttribute]
public void add_Resize(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Resize(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_RightToLeftChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_RightToLeftChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_SizeChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_SizeChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_TextChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_TextChanged(EventHandler value);
    public virtual Size GetPreferredSize(Size proposedSize);
    protected virtual void OnEnabledChanged(EventArgs e);
    protected virtual void OnLeave(EventArgs e);
    protected virtual void OnGotFocus(EventArgs e);
    protected virtual void OnVisibleChanged(EventArgs e);
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
protected virtual void OnPaint(PaintEventArgs e);
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
protected virtual void OnPaintBackground(PaintEventArgs pevent);
    protected virtual void OnPrint(PaintEventArgs e);
    protected virtual void Select(bool directed, bool forward);
    protected virtual bool ProcessCmdKey(Message& msg, Keys keyData);
    protected virtual bool ProcessMnemonic(char charCode);
    protected virtual bool IsInputChar(char charCode);
    public static void EnableModelessKeyboardInterop(Window window);
    protected virtual void OnHandleCreated(EventArgs e);
    protected virtual void WndProc(Message& m);
    protected virtual void ScaleCore(float dx, float dy);
    protected virtual void Dispose(bool disposing);
    public virtual void OnPropertyChanged(string propertyName, object value);
}
public class System.Windows.Forms.Integration.IntegrationExceptionEventArgs : EventArgs {
    public bool ThrowException { get; public set; }
    public Exception Exception { get; }
    public IntegrationExceptionEventArgs(bool throwException, Exception exception);
    public bool get_ThrowException();
    public void set_ThrowException(bool value);
    public Exception get_Exception();
}
public class System.Windows.Forms.Integration.LayoutExceptionEventArgs : IntegrationExceptionEventArgs {
    public LayoutExceptionEventArgs(Exception exception);
}
[DefaultMemberAttribute("Item")]
[SecurityCriticalAttribute]
public class System.Windows.Forms.Integration.PropertyMap : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<PropertyMappingExceptionEventArgs> PropertyMappingError;
    protected object SourceObject { get; }
    public PropertyTranslator Item { get; public set; }
    public ICollection Keys { get; }
    public ICollection Values { get; }
    protected Dictionary`2<string, PropertyTranslator> DefaultTranslators { get; }
    public PropertyMap(object source);
    protected object get_SourceObject();
    public PropertyTranslator get_Item(string propertyName);
    public void set_Item(string propertyName, PropertyTranslator value);
    public ICollection get_Keys();
    public ICollection get_Values();
    protected Dictionary`2<string, PropertyTranslator> get_DefaultTranslators();
    [CompilerGeneratedAttribute]
public void add_PropertyMappingError(EventHandler`1<PropertyMappingExceptionEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_PropertyMappingError(EventHandler`1<PropertyMappingExceptionEventArgs> value);
    public void Add(string propertyName, PropertyTranslator translator);
    public void Apply(string propertyName);
    public void ApplyAll();
    public void Clear();
    public bool Contains(string propertyName);
    public void Remove(string propertyName);
    public void Reset(string propertyName);
    public void ResetAll();
}
public class System.Windows.Forms.Integration.PropertyMappingExceptionEventArgs : IntegrationExceptionEventArgs {
    public string PropertyName { get; }
    public object PropertyValue { get; }
    public PropertyMappingExceptionEventArgs(Exception exception, string propertyName, object propertyValue);
    public string get_PropertyName();
    public object get_PropertyValue();
}
public class System.Windows.Forms.Integration.PropertyTranslator : MulticastDelegate {
    public PropertyTranslator(object object, IntPtr method);
    public virtual void Invoke(object host, string propertyName, object value);
    public virtual IAsyncResult BeginInvoke(object host, string propertyName, object value, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[DesignerCategoryAttribute("code")]
[ContentPropertyAttribute("Child")]
[DefaultEventAttribute("ChildChanged")]
public class System.Windows.Forms.Integration.WindowsFormsHost : HwndHost {
    public static DependencyProperty PaddingProperty;
    public static DependencyProperty TabIndexProperty;
    public static DependencyProperty FontFamilyProperty;
    public static DependencyProperty FontSizeProperty;
    public static DependencyProperty FontStyleProperty;
    public static DependencyProperty FontWeightProperty;
    public static DependencyProperty ForegroundProperty;
    public static DependencyProperty BackgroundProperty;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<LayoutExceptionEventArgs> LayoutError;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private EventHandler`1<ChildChangedEventArgs> ChildChanged;
    public Control Child { get; public set; }
    [CategoryAttribute("Behavior")]
[BindableAttribute("True")]
public Thickness Padding { get; public set; }
    [CategoryAttribute("Behavior")]
[BindableAttribute("True")]
public int TabIndex { get; public set; }
    public FontFamily FontFamily { get; public set; }
    public double FontSize { get; public set; }
    public FontStyle FontStyle { get; public set; }
    public FontWeight FontWeight { get; public set; }
    public Brush Foreground { get; public set; }
    public Brush Background { get; public set; }
    public PropertyMap PropertyMap { get; }
    public Control get_Child();
    public void set_Child(Control value);
    public Thickness get_Padding();
    public void set_Padding(Thickness value);
    public int get_TabIndex();
    public void set_TabIndex(int value);
    public FontFamily get_FontFamily();
    public void set_FontFamily(FontFamily value);
    public double get_FontSize();
    public void set_FontSize(double value);
    public FontStyle get_FontStyle();
    public void set_FontStyle(FontStyle value);
    public FontWeight get_FontWeight();
    public void set_FontWeight(FontWeight value);
    public Brush get_Foreground();
    public void set_Foreground(Brush value);
    public Brush get_Background();
    public void set_Background(Brush value);
    public PropertyMap get_PropertyMap();
    public virtual bool TabInto(TraversalRequest request);
    [CompilerGeneratedAttribute]
public void add_LayoutError(EventHandler`1<LayoutExceptionEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_LayoutError(EventHandler`1<LayoutExceptionEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_ChildChanged(EventHandler`1<ChildChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ChildChanged(EventHandler`1<ChildChangedEventArgs> value);
    protected virtual IntPtr WndProc(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam, Boolean& handled);
    protected virtual Vector ScaleChild(Vector newScale);
    protected virtual Size MeasureOverride(Size constraint);
    protected virtual Size ArrangeOverride(Size finalSize);
    public static void EnableWindowsFormsInterop();
    protected virtual HandleRef BuildWindowCore(HandleRef hwndParent);
    protected virtual void DestroyWindowCore(HandleRef hwnd);
    protected virtual void Dispose(bool disposing);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void OnPropertyChanged(DependencyPropertyChangedEventArgs e);
}
