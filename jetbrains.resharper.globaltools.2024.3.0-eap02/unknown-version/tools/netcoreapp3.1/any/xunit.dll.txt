public class Xunit.Assert : object {
    public static void Contains(T expected, IEnumerable`1<T> collection);
    public static void Contains(T expected, IEnumerable`1<T> collection, IEqualityComparer`1<T> comparer);
    public static void Contains(string expectedSubstring, string actualString);
    public static void Contains(string expectedSubstring, string actualString, StringComparison comparisonType);
    public static void DoesNotContain(T expected, IEnumerable`1<T> collection);
    public static void DoesNotContain(T expected, IEnumerable`1<T> collection, IEqualityComparer`1<T> comparer);
    public static void DoesNotContain(string expectedSubstring, string actualString);
    public static void DoesNotContain(string expectedSubstring, string actualString, StringComparison comparisonType);
    public static void DoesNotThrow(ThrowsDelegate testCode);
    public static void Empty(IEnumerable collection);
    public static void Equal(T expected, T actual);
    public static void Equal(T expected, T actual, IEqualityComparer`1<T> comparer);
    public static void Equal(double expected, double actual, int precision);
    public static void Equal(decimal expected, decimal actual, int precision);
    public static void Equal(IEnumerable`1<T> expected, IEnumerable`1<T> actual);
    public static void Equal(IEnumerable`1<T> expected, IEnumerable`1<T> actual, IEqualityComparer`1<T> comparer);
    [ObsoleteAttribute("This is an override of Object.Equals(). Call Assert.Equal() instead.", "True")]
public static bool Equals(object a, object b);
    public static void False(bool condition);
    public static void False(bool condition, string userMessage);
    private static IComparer`1<T> GetComparer();
    private static IEqualityComparer`1<T> GetEqualityComparer(bool skipTypeCheck, IEqualityComparer innerComparer);
    public static void InRange(T actual, T low, T high);
    public static void InRange(T actual, T low, T high, IComparer`1<T> comparer);
    public static T IsAssignableFrom(object object);
    public static void IsAssignableFrom(Type expectedType, object object);
    public static void IsNotType(object object);
    public static void IsNotType(Type expectedType, object object);
    public static T IsType(object object);
    public static void IsType(Type expectedType, object object);
    public static void NotEmpty(IEnumerable collection);
    public static void NotEqual(T expected, T actual);
    public static void NotEqual(T expected, T actual, IEqualityComparer`1<T> comparer);
    public static void NotEqual(IEnumerable`1<T> expected, IEnumerable`1<T> actual);
    public static void NotEqual(IEnumerable`1<T> expected, IEnumerable`1<T> actual, IEqualityComparer`1<T> comparer);
    public static void NotInRange(T actual, T low, T high);
    public static void NotInRange(T actual, T low, T high, IComparer`1<T> comparer);
    public static void NotNull(object object);
    public static void NotSame(object expected, object actual);
    public static void Null(object object);
    public static void PropertyChanged(INotifyPropertyChanged object, string propertyName, PropertyChangedDelegate testCode);
    public static void Same(object expected, object actual);
    public static object Single(IEnumerable collection);
    public static void Single(IEnumerable collection, object expected);
    public static T Single(IEnumerable`1<T> collection);
    public static T Single(IEnumerable`1<T> collection, Predicate`1<T> predicate);
    public static T Throws(ThrowsDelegate testCode);
    public static T Throws(ThrowsDelegateWithReturn testCode);
    public static Exception Throws(Type exceptionType, ThrowsDelegate testCode);
    public static Exception Throws(Type exceptionType, ThrowsDelegateWithReturn testCode);
    public static void True(bool condition);
    public static void True(bool condition, string userMessage);
    [CompilerGeneratedAttribute]
private static bool <Single>b__3(T item);
}
[AttributeUsageAttribute("64")]
public abstract class Xunit.BeforeAfterTestAttribute : Attribute {
    private object typeId;
    public object TypeId { get; }
    public virtual void After(MethodInfo methodUnderTest);
    public virtual void Before(MethodInfo methodUnderTest);
    public virtual object get_TypeId();
}
[AttributeUsageAttribute("64")]
public class Xunit.FactAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Skip>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Timeout>k__BackingField;
    public string DisplayName { get; public set; }
    [ObsoleteAttribute("Please use the DisplayName property instead")]
public string Name { get; public set; }
    public string Skip { get; public set; }
    public int Timeout { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_DisplayName();
    [CompilerGeneratedAttribute]
public virtual void set_DisplayName(string value);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Skip();
    [CompilerGeneratedAttribute]
public virtual void set_Skip(string value);
    [CompilerGeneratedAttribute]
public int get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(int value);
    public IEnumerable`1<ITestCommand> CreateTestCommands(IMethodInfo method);
    protected virtual IEnumerable`1<ITestCommand> EnumerateTestCommands(IMethodInfo method);
}
public interface Xunit.IUseFixture`1 {
    public abstract virtual void SetFixture(T data);
}
public class Xunit.Record : object {
    public static Exception Exception(ThrowsDelegate code);
    public static Exception Exception(ThrowsDelegateWithReturn code);
}
[AttributeUsageAttribute("4")]
public class Xunit.RunWithAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <TestClassCommand>k__BackingField;
    public Type TestClassCommand { get; private set; }
    public RunWithAttribute(Type testClassCommand);
    [CompilerGeneratedAttribute]
public Type get_TestClassCommand();
    [CompilerGeneratedAttribute]
private void set_TestClassCommand(Type value);
}
public class Xunit.Sdk.AfterTestException : Exception {
    private List`1<Exception> afterExceptions;
    public List`1<Exception> AfterExceptions { get; }
    public string Message { get; }
    public string StackTrace { get; }
    public AfterTestException(IEnumerable`1<Exception> exceptions);
    public AfterTestException(Exception[] exceptions);
    protected AfterTestException(SerializationInfo info, StreamingContext context);
    public List`1<Exception> get_AfterExceptions();
    public virtual string get_Message();
    public virtual string get_StackTrace();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class Xunit.Sdk.AssemblyResult : CompositeResult {
    private static string environment;
    private static string testFramework;
    [CompilerGeneratedAttribute]
private string <ConfigFilename>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FailCount>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Filename>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PassCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SkipCount>k__BackingField;
    public string ConfigFilename { get; private set; }
    public string Directory { get; }
    public int FailCount { get; private set; }
    public string Filename { get; private set; }
    public int PassCount { get; private set; }
    public int SkipCount { get; private set; }
    public AssemblyResult(string assemblyFilename);
    public AssemblyResult(string assemblyFilename, string configFilename);
    private static AssemblyResult();
    [CompilerGeneratedAttribute]
public string get_ConfigFilename();
    [CompilerGeneratedAttribute]
private void set_ConfigFilename(string value);
    public string get_Directory();
    [CompilerGeneratedAttribute]
public int get_FailCount();
    [CompilerGeneratedAttribute]
private void set_FailCount(int value);
    [CompilerGeneratedAttribute]
public string get_Filename();
    [CompilerGeneratedAttribute]
private void set_Filename(string value);
    [CompilerGeneratedAttribute]
public int get_PassCount();
    [CompilerGeneratedAttribute]
private void set_PassCount(int value);
    [CompilerGeneratedAttribute]
public int get_SkipCount();
    [CompilerGeneratedAttribute]
private void set_SkipCount(int value);
    public virtual XmlNode ToXml(XmlNode parentNode);
}
public class Xunit.Sdk.AssertActualExpectedException : AssertException {
    private string actual;
    private string differencePosition;
    private string expected;
    public string Actual { get; }
    public string Expected { get; }
    public string Message { get; }
    public AssertActualExpectedException(object expected, object actual, string userMessage);
    public AssertActualExpectedException(object expected, object actual, string userMessage, bool skipPositionCheck);
    protected AssertActualExpectedException(SerializationInfo info, StreamingContext context);
    public string get_Actual();
    public string get_Expected();
    public virtual string get_Message();
    private static string ConvertToSimpleTypeName(Type type);
    private static string ConvertToString(object value);
    private static string FormatMultiLine(string value);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class Xunit.Sdk.AssertException : Exception {
    private string stackTrace;
    [CompilerGeneratedAttribute]
private string <UserMessage>k__BackingField;
    public string StackTrace { get; }
    public string UserMessage { get; protected set; }
    public AssertException(string userMessage);
    protected AssertException(string userMessage, Exception innerException);
    protected AssertException(string userMessage, string stackTrace);
    protected AssertException(SerializationInfo info, StreamingContext context);
    public virtual string get_StackTrace();
    [CompilerGeneratedAttribute]
public string get_UserMessage();
    [CompilerGeneratedAttribute]
protected void set_UserMessage(string value);
    protected virtual bool ExcludeStackFrame(string stackFrame);
    protected string FilterStackTrace(string stack);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    private static IEnumerable`1<string> SplitLines(string input);
}
public class Xunit.Sdk.BeforeAfterCommand : DelegatingTestCommand {
    private MethodInfo testMethod;
    public BeforeAfterCommand(ITestCommand innerCommand, MethodInfo testMethod);
    public virtual MethodResult Execute(object testClass);
}
public class Xunit.Sdk.ClassResult : CompositeResult {
    private string exceptionType;
    private int failCount;
    private string message;
    private int passCount;
    private int skipCount;
    private string stackTrace;
    private string typeFullName;
    private string typeName;
    private string typeNamespace;
    public string ExceptionType { get; }
    public int FailCount { get; }
    public string FullyQualifiedName { get; }
    public string Message { get; }
    public string Name { get; }
    public string Namespace { get; }
    public int PassCount { get; }
    public int SkipCount { get; }
    public string StackTrace { get; }
    public ClassResult(Type type);
    public ClassResult(string typeName, string typeFullName, string typeNamespace);
    public string get_ExceptionType();
    public int get_FailCount();
    public string get_FullyQualifiedName();
    public string get_Message();
    public string get_Name();
    public string get_Namespace();
    public int get_PassCount();
    public int get_SkipCount();
    public string get_StackTrace();
    public void SetException(Exception ex);
    public virtual XmlNode ToXml(XmlNode parentNode);
}
public abstract class Xunit.Sdk.CompositeResult : TestResult {
    private List`1<ITestResult> results;
    public IList`1<ITestResult> Results { get; }
    public IList`1<ITestResult> get_Results();
    public virtual void Add(ITestResult testResult);
}
public class Xunit.Sdk.ContainsException : AssertException {
    public ContainsException(object expected);
    public ContainsException(object expected, object actual);
    protected ContainsException(SerializationInfo info, StreamingContext context);
}
public abstract class Xunit.Sdk.DelegatingTestCommand : object {
    private ITestCommand innerCommand;
    public ITestCommand InnerCommand { get; }
    public string DisplayName { get; }
    public bool ShouldCreateInstance { get; }
    public int Timeout { get; }
    protected DelegatingTestCommand(ITestCommand innerCommand);
    public ITestCommand get_InnerCommand();
    public sealed virtual string get_DisplayName();
    public sealed virtual bool get_ShouldCreateInstance();
    public virtual int get_Timeout();
    public abstract virtual MethodResult Execute(object testClass);
    public sealed virtual XmlNode ToStartXml();
}
public class Xunit.Sdk.DoesNotContainException : AssertException {
    public DoesNotContainException(object expected);
    protected DoesNotContainException(SerializationInfo info, StreamingContext context);
}
public class Xunit.Sdk.DoesNotThrowException : AssertActualExpectedException {
    private string stackTrace;
    public string StackTrace { get; }
    public DoesNotThrowException(Exception actual);
    protected DoesNotThrowException(string stackTrace);
    protected DoesNotThrowException(SerializationInfo info, StreamingContext context);
    public virtual string get_StackTrace();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class Xunit.Sdk.EmptyException : AssertException {
    protected EmptyException(SerializationInfo info, StreamingContext context);
}
public class Xunit.Sdk.EqualException : AssertActualExpectedException {
    public EqualException(object expected, object actual);
    public EqualException(object expected, object actual, bool skipPositionCheck);
    protected EqualException(SerializationInfo info, StreamingContext context);
}
public class Xunit.Sdk.ExceptionAndOutputCaptureCommand : DelegatingTestCommand {
    private IMethodInfo method;
    public ExceptionAndOutputCaptureCommand(ITestCommand innerCommand, IMethodInfo method);
    public virtual MethodResult Execute(object testClass);
}
public static class Xunit.Sdk.ExceptionUtility : object {
    private static string RETHROW_MARKER;
    public static string GetMessage(Exception ex);
    private static string GetMessage(Exception ex, int level);
    public static string GetStackTrace(Exception ex);
    public static void RethrowWithNoStackTraceLoss(Exception ex);
}
public class Xunit.Sdk.Executor : MarshalByRefObject {
    private Assembly assembly;
    private string assemblyFilename;
    public Executor(string assemblyFilename);
    public virtual object InitializeLifetimeService();
    private static bool OnTestStart(ITestCommand command, ExecutorCallback callback);
    private static bool OnTestResult(ITestResult result, ExecutorCallback callback);
    private void RunOnSTAThreadWithPreservedWorkingDirectory(ThreadStart threadStart);
    private void ThreadRunner(object threadStart);
}
public abstract class Xunit.Sdk.ExecutorCallback : object {
    private static Type typeICallbackEventHandler;
    private static ExecutorCallback();
    public static ExecutorCallback Wrap(object handler);
    public abstract virtual void Notify(string value);
    public abstract virtual bool ShouldContinue();
}
public class Xunit.Sdk.FactCommand : TestCommand {
    public FactCommand(IMethodInfo method);
    public virtual MethodResult Execute(object testClass);
}
public class Xunit.Sdk.FailedResult : MethodResult {
    [CompilerGeneratedAttribute]
private string <ExceptionType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StackTrace>k__BackingField;
    public string ExceptionType { get; private set; }
    public string Message { get; private set; }
    public string StackTrace { get; private set; }
    public FailedResult(IMethodInfo method, Exception exception, string displayName);
    public FailedResult(string methodName, string typeName, string displayName, MultiValueDictionary`2<string, string> traits, string exceptionType, string message, string stackTrace);
    [CompilerGeneratedAttribute]
public string get_ExceptionType();
    [CompilerGeneratedAttribute]
private void set_ExceptionType(string value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
private void set_Message(string value);
    [CompilerGeneratedAttribute]
public string get_StackTrace();
    [CompilerGeneratedAttribute]
private void set_StackTrace(string value);
    public virtual XmlNode ToXml(XmlNode parentNode);
}
public class Xunit.Sdk.FalseException : AssertException {
    public FalseException(string userMessage);
    protected FalseException(SerializationInfo info, StreamingContext context);
}
public class Xunit.Sdk.FixtureCommand : DelegatingTestCommand {
    private Dictionary`2<MethodInfo, object> fixtures;
    public FixtureCommand(ITestCommand innerCommand, Dictionary`2<MethodInfo, object> fixtures);
    public virtual MethodResult Execute(object testClass);
}
public static class Xunit.Sdk.Guard : object {
    public static void ArgumentNotNull(string argName, object argValue);
    public static void ArgumentNotNullOrEmpty(string argName, IEnumerable argValue);
    public static void ArgumentValid(string argName, string message, bool test);
}
public interface Xunit.Sdk.IAttributeInfo {
    public abstract virtual T GetInstance();
    public abstract virtual TValue GetPropertyValue(string propertyName);
}
public interface Xunit.Sdk.IMethodInfo {
    public ITypeInfo Class { get; }
    public bool IsAbstract { get; }
    public bool IsStatic { get; }
    public MethodInfo MethodInfo { get; }
    public string Name { get; }
    public string ReturnType { get; }
    public string TypeName { get; }
    public abstract virtual ITypeInfo get_Class();
    public abstract virtual bool get_IsAbstract();
    public abstract virtual bool get_IsStatic();
    public abstract virtual MethodInfo get_MethodInfo();
    public abstract virtual string get_Name();
    public abstract virtual string get_ReturnType();
    public abstract virtual string get_TypeName();
    public abstract virtual object CreateInstance();
    public abstract virtual IEnumerable`1<IAttributeInfo> GetCustomAttributes(Type attributeType);
    public abstract virtual bool HasAttribute(Type attributeType);
    public abstract virtual void Invoke(object testClass, Object[] parameters);
}
public class Xunit.Sdk.InRangeException : AssertException {
    private string actual;
    private string high;
    private string low;
    public string Actual { get; }
    public string High { get; }
    public string Low { get; }
    public string Message { get; }
    public InRangeException(object actual, object low, object high);
    protected InRangeException(SerializationInfo info, StreamingContext context);
    public string get_Actual();
    public string get_High();
    public string get_Low();
    public virtual string get_Message();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class Xunit.Sdk.IsAssignableFromException : AssertActualExpectedException {
    public IsAssignableFromException(Type expected, object actual);
    protected IsAssignableFromException(SerializationInfo info, StreamingContext context);
}
public class Xunit.Sdk.IsNotTypeException : AssertActualExpectedException {
    public IsNotTypeException(Type expected, object actual);
    protected IsNotTypeException(SerializationInfo info, StreamingContext context);
}
public class Xunit.Sdk.IsTypeException : AssertActualExpectedException {
    public IsTypeException(Type expected, object actual);
    protected IsTypeException(SerializationInfo info, StreamingContext context);
}
public interface Xunit.Sdk.ITestClassCommand {
    public object ObjectUnderTest { get; }
    public ITypeInfo TypeUnderTest { get; public set; }
    public abstract virtual object get_ObjectUnderTest();
    public abstract virtual ITypeInfo get_TypeUnderTest();
    public abstract virtual void set_TypeUnderTest(ITypeInfo value);
    public abstract virtual int ChooseNextTest(ICollection`1<IMethodInfo> testsLeftToRun);
    public abstract virtual Exception ClassFinish();
    public abstract virtual Exception ClassStart();
    public abstract virtual IEnumerable`1<ITestCommand> EnumerateTestCommands(IMethodInfo testMethod);
    public abstract virtual IEnumerable`1<IMethodInfo> EnumerateTestMethods();
    public abstract virtual bool IsTestMethod(IMethodInfo testMethod);
}
public interface Xunit.Sdk.ITestCommand {
    public string DisplayName { get; }
    public bool ShouldCreateInstance { get; }
    public int Timeout { get; }
    public abstract virtual string get_DisplayName();
    public abstract virtual bool get_ShouldCreateInstance();
    public abstract virtual int get_Timeout();
    public abstract virtual MethodResult Execute(object testClass);
    public abstract virtual XmlNode ToStartXml();
}
public interface Xunit.Sdk.ITestResult {
    public double ExecutionTime { get; }
    public abstract virtual double get_ExecutionTime();
    public abstract virtual XmlNode ToXml(XmlNode parentNode);
}
public interface Xunit.Sdk.ITypeInfo {
    public bool IsAbstract { get; }
    public bool IsSealed { get; }
    public Type Type { get; }
    public abstract virtual bool get_IsAbstract();
    public abstract virtual bool get_IsSealed();
    public abstract virtual Type get_Type();
    public abstract virtual IEnumerable`1<IAttributeInfo> GetCustomAttributes(Type attributeType);
    public abstract virtual IMethodInfo GetMethod(string methodName);
    public abstract virtual IEnumerable`1<IMethodInfo> GetMethods();
    public abstract virtual bool HasAttribute(Type attributeType);
    public abstract virtual bool HasInterface(Type interfaceType);
}
public class Xunit.Sdk.LifetimeCommand : DelegatingTestCommand {
    private IMethodInfo method;
    public LifetimeCommand(ITestCommand innerCommand, IMethodInfo method);
    public virtual MethodResult Execute(object testClass);
}
public abstract class Xunit.Sdk.MethodResult : TestResult {
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MethodName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Output>k__BackingField;
    [CompilerGeneratedAttribute]
private MultiValueDictionary`2<string, string> <Traits>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    public string DisplayName { get; private set; }
    public string MethodName { get; private set; }
    public string Output { get; public set; }
    public MultiValueDictionary`2<string, string> Traits { get; private set; }
    public string TypeName { get; private set; }
    protected MethodResult(IMethodInfo method, string displayName);
    protected MethodResult(string methodName, string typeName, string displayName, MultiValueDictionary`2<string, string> traits);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
private void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public string get_MethodName();
    [CompilerGeneratedAttribute]
private void set_MethodName(string value);
    [CompilerGeneratedAttribute]
public string get_Output();
    [CompilerGeneratedAttribute]
public void set_Output(string value);
    [CompilerGeneratedAttribute]
public MultiValueDictionary`2<string, string> get_Traits();
    [CompilerGeneratedAttribute]
private void set_Traits(MultiValueDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public string get_TypeName();
    [CompilerGeneratedAttribute]
private void set_TypeName(string value);
    private void AddTraits(XmlNode testNode);
    public virtual XmlNode ToXml(XmlNode parentNode);
}
public static class Xunit.Sdk.MethodUtility : object {
    public static string GetDisplayName(IMethodInfo method);
    public static string GetSkipReason(IMethodInfo method);
    public static IEnumerable`1<ITestCommand> GetTestCommands(IMethodInfo method);
    public static int GetTimeoutParameter(IMethodInfo method);
    public static MultiValueDictionary`2<string, string> GetTraits(IMethodInfo method);
    public static bool HasTimeout(IMethodInfo method);
    public static bool HasTraits(IMethodInfo method);
    public static bool IsSkip(IMethodInfo method);
    public static bool IsTest(IMethodInfo method);
}
[DefaultMemberAttribute("Item")]
public class Xunit.Sdk.MultiValueDictionary`2 : object {
    private Dictionary`2<TKey, List`1<TValue>> dictionary;
    public IEnumerable`1<TValue> Item { get; }
    public int Count { get; }
    public IEnumerable`1<TKey> Keys { get; }
    public IEnumerable`1<TValue> get_Item(TKey key);
    public int get_Count();
    public IEnumerable`1<TKey> get_Keys();
    public void AddValue(TKey key, TValue value);
    public void Clear();
    public bool Contains(TKey key, TValue value);
    public void ForEach(ForEachDelegate<TKey, TValue> code);
    public void Remove(TKey key);
    public void RemoveValue(TKey key, TValue value);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override IEnumerator`1<TKey> System.Collections.Generic.IEnumerable<TKey>.GetEnumerator();
}
public class Xunit.Sdk.NotEmptyException : AssertException {
    protected NotEmptyException(SerializationInfo info, StreamingContext context);
}
public class Xunit.Sdk.NotEqualException : AssertException {
    protected NotEqualException(SerializationInfo info, StreamingContext context);
}
public class Xunit.Sdk.NotInRangeException : AssertException {
    private string actual;
    private string high;
    private string low;
    public string Actual { get; }
    public string High { get; }
    public string Low { get; }
    public string Message { get; }
    public NotInRangeException(object actual, object low, object high);
    protected NotInRangeException(SerializationInfo info, StreamingContext context);
    public string get_Actual();
    public string get_High();
    public string get_Low();
    public virtual string get_Message();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class Xunit.Sdk.NotNullException : AssertException {
    protected NotNullException(SerializationInfo info, StreamingContext context);
}
public class Xunit.Sdk.NotSameException : AssertException {
    protected NotSameException(SerializationInfo info, StreamingContext context);
}
public class Xunit.Sdk.NullException : AssertActualExpectedException {
    public NullException(object actual);
    protected NullException(SerializationInfo info, StreamingContext context);
}
public class Xunit.Sdk.ParameterCountMismatchException : Exception {
    protected ParameterCountMismatchException(SerializationInfo info, StreamingContext context);
}
public class Xunit.Sdk.PassedResult : MethodResult {
    public PassedResult(IMethodInfo method, string displayName);
    public PassedResult(string methodName, string typeName, string displayName, MultiValueDictionary`2<string, string> traits);
    public virtual XmlNode ToXml(XmlNode parentNode);
}
public class Xunit.Sdk.PropertyChangedException : AssertException {
    public PropertyChangedException(string propertyName);
    protected PropertyChangedException(SerializationInfo info, StreamingContext context);
}
public static class Xunit.Sdk.Reflector : object {
    public static IAttributeInfo Wrap(Attribute attribute);
    public static IMethodInfo Wrap(MethodInfo method);
    public static ITypeInfo Wrap(Type type);
}
public class Xunit.Sdk.SameException : AssertActualExpectedException {
    public SameException(object expected, object actual);
    protected SameException(SerializationInfo info, StreamingContext context);
}
public class Xunit.Sdk.SingleException : AssertException {
    public SingleException(int count);
    public SingleException(int count, object expected);
    protected SingleException(SerializationInfo info, StreamingContext context);
}
public class Xunit.Sdk.SkipCommand : TestCommand {
    [CompilerGeneratedAttribute]
private string <Reason>k__BackingField;
    public string Reason { get; private set; }
    public bool ShouldCreateInstance { get; }
    public SkipCommand(IMethodInfo testMethod, string displayName, string reason);
    [CompilerGeneratedAttribute]
public string get_Reason();
    [CompilerGeneratedAttribute]
private void set_Reason(string value);
    public virtual bool get_ShouldCreateInstance();
    public virtual MethodResult Execute(object testClass);
    public virtual XmlNode ToStartXml();
}
public class Xunit.Sdk.SkipResult : MethodResult {
    [CompilerGeneratedAttribute]
private string <Reason>k__BackingField;
    public string Reason { get; private set; }
    public SkipResult(IMethodInfo method, string displayName, string reason);
    public SkipResult(string methodName, string typeName, string displayName, MultiValueDictionary`2<string, string> traits, string reason);
    [CompilerGeneratedAttribute]
public string get_Reason();
    [CompilerGeneratedAttribute]
private void set_Reason(string value);
    public virtual XmlNode ToXml(XmlNode parentNode);
}
public class Xunit.Sdk.TestClassCommand : object {
    private Dictionary`2<MethodInfo, object> fixtures;
    private Random randomizer;
    private ITypeInfo typeUnderTest;
    public object ObjectUnderTest { get; }
    public Random Randomizer { get; public set; }
    public ITypeInfo TypeUnderTest { get; public set; }
    public TestClassCommand(Type typeUnderTest);
    public TestClassCommand(ITypeInfo typeUnderTest);
    public sealed virtual object get_ObjectUnderTest();
    public Random get_Randomizer();
    public void set_Randomizer(Random value);
    public sealed virtual ITypeInfo get_TypeUnderTest();
    public sealed virtual void set_TypeUnderTest(ITypeInfo value);
    public sealed virtual int ChooseNextTest(ICollection`1<IMethodInfo> testsLeftToRun);
    public sealed virtual Exception ClassFinish();
    public sealed virtual Exception ClassStart();
    public virtual IEnumerable`1<ITestCommand> EnumerateTestCommands(IMethodInfo testMethod);
    public sealed virtual IEnumerable`1<IMethodInfo> EnumerateTestMethods();
    public sealed virtual bool IsTestMethod(IMethodInfo testMethod);
}
public static class Xunit.Sdk.TestClassCommandFactory : object {
    public static ITestClassCommand Make(Type type);
    public static ITestClassCommand Make(ITypeInfo typeInfo);
}
public static class Xunit.Sdk.TestClassCommandRunner : object {
    public static ClassResult Execute(ITestClassCommand testClassCommand, List`1<IMethodInfo> methods, Predicate`1<ITestCommand> startCallback, Predicate`1<ITestResult> resultCallback);
}
public abstract class Xunit.Sdk.TestCommand : object {
    private int timeout;
    protected IMethodInfo testMethod;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MethodName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    public string DisplayName { get; protected set; }
    public string MethodName { get; protected set; }
    public bool ShouldCreateInstance { get; }
    public int Timeout { get; }
    public string TypeName { get; protected set; }
    protected TestCommand(IMethodInfo method, string displayName, int timeout);
    [CompilerGeneratedAttribute]
public sealed virtual string get_DisplayName();
    [CompilerGeneratedAttribute]
protected void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public string get_MethodName();
    [CompilerGeneratedAttribute]
protected void set_MethodName(string value);
    public virtual bool get_ShouldCreateInstance();
    public virtual int get_Timeout();
    [CompilerGeneratedAttribute]
public string get_TypeName();
    [CompilerGeneratedAttribute]
protected void set_TypeName(string value);
    public abstract virtual MethodResult Execute(object testClass);
    public virtual XmlNode ToStartXml();
}
public static class Xunit.Sdk.TestCommandFactory : object {
    public static IEnumerable`1<ITestCommand> Make(ITestClassCommand classCommand, IMethodInfo method);
}
public abstract class Xunit.Sdk.TestResult : object {
    private double executionTime;
    public double ExecutionTime { get; public set; }
    public sealed virtual double get_ExecutionTime();
    public void set_ExecutionTime(double value);
    protected void AddTime(XmlNode testNode);
    public abstract virtual XmlNode ToXml(XmlNode parentNode);
}
public class Xunit.Sdk.TestTimer : object {
    private ITestTimer timer;
    public long ElapsedMilliseconds { get; }
    public long get_ElapsedMilliseconds();
    public void Start();
    public void Stop();
}
public class Xunit.Sdk.ThrowsException : AssertActualExpectedException {
    private string stackTrace;
    public string StackTrace { get; }
    public ThrowsException(Type expectedType);
    public ThrowsException(Type expectedType, Exception actual);
    protected ThrowsException(SerializationInfo info, StreamingContext context);
    protected ThrowsException(Type expected, string actual, string actualMessage, string stackTrace);
    public virtual string get_StackTrace();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class Xunit.Sdk.TimedCommand : DelegatingTestCommand {
    public TimedCommand(ITestCommand innerCommand);
    public virtual MethodResult Execute(object testClass);
}
public class Xunit.Sdk.TimeoutCommand : DelegatingTestCommand {
    private IMethodInfo testMethod;
    private int timeout;
    public int Timeout { get; }
    public TimeoutCommand(ITestCommand innerCommand, int timeout, IMethodInfo testMethod);
    public virtual int get_Timeout();
    public virtual MethodResult Execute(object testClass);
}
public class Xunit.Sdk.TimeoutException : AssertException {
    public TimeoutException(long timeout);
    protected TimeoutException(SerializationInfo info, StreamingContext context);
}
public class Xunit.Sdk.TraceAssertException : AssertException {
    private string assertDetailedMessage;
    private string assertMessage;
    public string AssertDetailedMessage { get; }
    public string AssertMessage { get; }
    public string Message { get; }
    public TraceAssertException(string assertMessage);
    public TraceAssertException(string assertMessage, string assertDetailedMessage);
    protected TraceAssertException(SerializationInfo info, StreamingContext context);
    public string get_AssertDetailedMessage();
    public string get_AssertMessage();
    public virtual string get_Message();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class Xunit.Sdk.TrueException : AssertException {
    public TrueException(string userMessage);
    protected TrueException(SerializationInfo info, StreamingContext context);
}
public static class Xunit.Sdk.TypeUtility : object {
    public static bool ContainsTestMethods(ITypeInfo type);
    public static ITypeInfo GetRunWith(ITypeInfo type);
    public static IEnumerable`1<IMethodInfo> GetTestMethods(ITypeInfo type);
    public static bool HasRunWith(ITypeInfo type);
    public static bool ImplementsITestClassCommand(ITypeInfo type);
    public static bool IsAbstract(ITypeInfo type);
    public static bool IsStatic(ITypeInfo type);
    public static bool IsTestClass(ITypeInfo type);
}
public static class Xunit.Sdk.XmlUtility : object {
    private static Regex escapeRegex;
    private static XmlUtility();
    public static void AddAttribute(XmlNode node, string name, object value);
    public static XmlNode AddElement(XmlNode parentNode, string name);
    private static string Escape(XmlDocument doc, string value);
    public static void SetInnerText(XmlNode element, string value);
}
[AttributeUsageAttribute("68")]
public class Xunit.TraitAttribute : Attribute {
    private string name;
    private string value;
    public string Name { get; }
    public object TypeId { get; }
    public string Value { get; }
    public TraitAttribute(string name, string value);
    public string get_Name();
    public virtual object get_TypeId();
    public string get_Value();
}
