[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Jint.AcornimaExtensions : object {
    [ExtensionAttribute]
public static Script ParseScriptGuarded(Parser parser, Realm realm, string code, string source, bool strict);
    [ExtensionAttribute]
public static Module ParseModuleGuarded(Parser parser, Engine engine, string code, string source);
    private static SourceLocation ToLocation(ParseErrorException ex, string source);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Agent : object {
    private List`1<JsValue> _keptAlive;
    public void AddToKeptObjects(JsValue target);
    public void ClearKeptObjects();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Jint.AstExtensions : object {
    internal static SourceLocation DefaultLocation;
    [ExtensionAttribute]
public static JsValue GetKey(T property, Engine engine);
    [ExtensionAttribute]
public static JsValue GetKey(Expression expression, Engine engine, bool resolveComputed);
    [ExtensionAttribute]
internal static JsValue TryGetKey(T property, Engine engine);
    [ExtensionAttribute]
internal static JsValue TryGetKey(T expression, Engine engine, bool resolveComputed);
    internal static JsValue TryGetComputedPropertyKey(T expression, Engine engine);
    [ExtensionAttribute]
internal static bool IsFunctionDefinition(T node);
    [ExtensionAttribute]
internal static bool IsStrict(IFunction function);
    [ExtensionAttribute]
internal static bool IsConstantDeclaration(Declaration d);
    [ExtensionAttribute]
internal static bool HasName(T node);
    [ExtensionAttribute]
internal static bool IsAnonymousFunctionDefinition(T node);
    [ExtensionAttribute]
internal static bool IsOptional(T node);
    internal static string LiteralKeyToString(Literal literal);
    [ExtensionAttribute]
internal static void GetBoundNames(VariableDeclaration variableDeclaration, List`1<Key> target);
    [ExtensionAttribute]
internal static void GetBoundNames(Node parameter, List`1<Key> target);
    [ExtensionAttribute]
internal static void PrivateBoundIdentifiers(Node parameter, HashSet`1<PrivateIdentifier> target);
    [ExtensionAttribute]
internal static void BindingInitialization(Node expression, EvaluationContext context, JsValue value, Environment env);
    [ExtensionAttribute]
internal static Record DefineMethod(T m, ObjectInstance obj, ObjectInstance functionPrototype);
    [ExtensionAttribute]
internal static void GetImportEntries(ImportDeclaration import, List`1<ImportEntry> importEntries, HashSet`1<ModuleRequest> requestedModules);
    private static ModuleImportAttribute[] GetAttributes(NodeList`1& importAttributes);
    [ExtensionAttribute]
internal static void GetExportEntries(ExportDeclaration export, List`1<ExportEntry> exportEntries, HashSet`1<ModuleRequest> requestedModules);
    private static void GetExportEntries(bool defaultExport, StatementOrExpression declaration, List`1<ExportEntry> exportEntries, Nullable`1<ModuleRequest> moduleRequest);
    private static List`1<Key> GetExportNames(StatementOrExpression declaration);
    [ExtensionAttribute]
private static string GetModuleKey(Expression expression);
    internal static Node CreateLocationNode(SourceLocation& location);
    [ExtensionAttribute]
internal static void AllPrivateIdentifiersValid(Script script, Realm realm, HashSet`1<PrivateIdentifier> privateIdentifiers);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Jint.AstPreparationExtensions : object {
    [ExtensionAttribute]
internal static HoistingScope GetHoistingScope(Program program);
    [ExtensionAttribute]
internal static List`1<Key> GetVarNames(Program program, HoistingScope hoistingScope);
    [ExtensionAttribute]
internal static List`1<CachedLexicalName> GetLexNames(Program program, HoistingScope hoistingScope);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.CachedHoistingScope : object {
    [CompilerGeneratedAttribute]
private HoistingScope <Scope>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Key> <VarNames>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<CachedLexicalName> <LexNames>k__BackingField;
    public HoistingScope Scope { get; }
    public List`1<Key> VarNames { get; }
    public List`1<CachedLexicalName> LexNames { get; }
    public CachedHoistingScope(Program program);
    internal static void GatherVarNames(HoistingScope scope, List`1<Key> boundNames);
    internal static void GatherLexNames(HoistingScope scope, List`1<CachedLexicalName> boundNames);
    [CompilerGeneratedAttribute]
public HoistingScope get_Scope();
    [CompilerGeneratedAttribute]
public List`1<Key> get_VarNames();
    [CompilerGeneratedAttribute]
public List`1<CachedLexicalName> get_LexNames();
}
[DefaultMemberAttribute("Item")]
[DebuggerDisplayAttribute("Count = {Count}")]
internal class Jint.Collections.DictionarySlim`2 : object {
    private static Entry[] InitialEntries;
    private int _count;
    private int _freeList;
    private Int32[] _buckets;
    private Entry[] _entries;
    public int Count { get; }
    public TValue& Item { get; }
    public DictionarySlim`2(int capacity);
    private static DictionarySlim`2();
    public sealed virtual int get_Count();
    public void Clear();
    public bool ContainsKey(TKey key);
    public bool TryGetValue(TKey key, TValue& value);
    public bool Remove(TKey key);
    public TValue& GetOrAddValueRef(TKey key);
    public TValue& get_Item(TKey key);
    private TValue& AddKey(TKey key, int bucketIndex);
    private Entry[] Resize();
    public Enumerator<TKey, TValue> GetEnumerator();
    private sealed virtual override IEnumerator`1<KeyValuePair`2<TKey, TValue>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[DefaultMemberAttribute("Item")]
internal class Jint.Collections.HybridDictionary`1 : object {
    private static int CutoverPoint;
    private static int InitialDictionarySize;
    private static int FixedSizeCutoverPoint;
    private bool _checkExistingKeys;
    private ListDictionary`1<TValue> _list;
    internal StringDictionarySlim`1<TValue> _dictionary;
    public TValue Item { get; public set; }
    public int Count { get; }
    unknown bool CheckExistingKeys {public set; }
    public HybridDictionary`1(int initialSize, bool checkExistingKeys);
    protected HybridDictionary`1(StringDictionarySlim`1<TValue> dictionary);
    public TValue get_Item(Key key);
    public void set_Item(Key key, TValue value);
    public bool TryGetValue(Key key, TValue& value);
    public void SetOrUpdateValue(Key key, Func`3<TValue, TState, TValue> updater, TState state);
    private bool SwitchToDictionary(Key key, TValue value, bool tryAdd);
    public int get_Count();
    public bool TryAdd(Key key, TValue value);
    public void Add(Key key, TValue value);
    public void Clear();
    public bool ContainsKey(Key key);
    private sealed virtual override IEnumerator`1<KeyValuePair`2<Key, TValue>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<Jint.Key,TValue>>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public bool Remove(Key key);
    public void set_CheckExistingKeys(bool value);
}
[DefaultMemberAttribute("Item")]
internal class Jint.Collections.ListDictionary`1 : object {
    private DictionaryNode<TValue> _head;
    private int _count;
    private bool _checkExistingKeys;
    public TValue Item { get; public set; }
    public int Count { get; }
    unknown bool CheckExistingKeys {internal set; }
    public ListDictionary`1(Key key, TValue value, bool checkExistingKeys);
    public TValue get_Item(Key key);
    public void set_Item(Key key, TValue value);
    public bool TryGetValue(Key key, TValue& value);
    public void SetOrUpdateValue(Key key, Func`3<TValue, TState, TValue> updater, TState state);
    public int get_Count();
    public bool Add(Key key, TValue value, bool tryAdd);
    private void AddNode(Key key, TValue value, DictionaryNode<TValue> last);
    public void Clear();
    public bool ContainsKey(Key key);
    internal void set_CheckExistingKeys(bool value);
    public NodeEnumerator<TValue> GetEnumerator();
    private sealed virtual override IEnumerator`1<KeyValuePair`2<Key, TValue>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<Jint.Key,TValue>>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public bool Remove(Key key);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Collections.ObjectTraverseStack : object {
    private Engine _engine;
    private Stack`1<object> _stack;
    public ObjectTraverseStack(Engine engine);
    public void Enter(JsValue value);
    public void Exit();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Jint.Collections.PropertyDictionary : HybridDictionary`1<PropertyDescriptor> {
    public PropertyDictionary(int capacity, bool checkExistingKeys);
    public PropertyDictionary(StringDictionarySlim`1<PropertyDescriptor> properties);
}
[DefaultMemberAttribute("Item")]
internal class Jint.Collections.RefStack`1 : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal T[] _array;
    internal int _size;
    private static int DefaultCapacity;
    public T Item { get; }
    public RefStack`1(int capacity);
    public T& modreq(System.Runtime.InteropServices.InAttribute) Peek();
    public T& modreq(System.Runtime.InteropServices.InAttribute) Peek(int fromTop);
    public T get_Item(int index);
    public bool TryPeek(T& item);
    public T& modreq(System.Runtime.InteropServices.InAttribute) Pop();
    public void Push(T& item);
    private void EnsureCapacity(int min);
    private void Resize(int value);
    public void Clear();
    public Enumerator<T> GetEnumerator();
    private sealed virtual override IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
    [NullableContextAttribute("1")]
private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[DefaultMemberAttribute("Item")]
[DebuggerTypeProxyAttribute("Jint.Collections.StringDictionarySlim`1/DictionarySlimDebugView`1")]
[DebuggerDisplayAttribute("Count = {Count}")]
internal class Jint.Collections.StringDictionarySlim`1 : object {
    private static Entry[] InitialEntries;
    private int _count;
    private int _freeList;
    private Int32[] _buckets;
    private Entry[] _entries;
    public int Count { get; }
    public TValue& Item { get; }
    public StringDictionarySlim`1(int capacity);
    private static StringDictionarySlim`1();
    public sealed virtual int get_Count();
    public void Clear();
    public bool ContainsKey(Key key);
    public bool TryGetValue(Key key, TValue& value);
    public bool Remove(Key key);
    public void SetOrUpdateValue(Key key, Func`3<TValue, TState, TValue> updater, TState state);
    public TValue& GetOrAddValueRef(Key key);
    public bool TryAdd(Key key, TValue value);
    public void AddDangerous(Key& key, TValue value);
    public TValue& get_Item(Key key);
    private TValue& AddKey(Key key, int bucketIndex);
    private Entry[] Resize();
    public Enumerator<TValue> GetEnumerator();
    private sealed virtual override IEnumerator`1<KeyValuePair`2<Key, TValue>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<Jint.Key,TValue>>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Jint.Collections.SymbolDictionary : DictionarySlim`2<JsSymbol, PropertyDescriptor> {
    public SymbolDictionary(int capacity);
}
public abstract class Jint.Constraint : object {
    public abstract virtual void Check();
    public abstract virtual void Reset();
}
public class Jint.Constraints.CancellationConstraint : Constraint {
    private CancellationToken _cancellationToken;
    internal CancellationConstraint(CancellationToken cancellationToken);
    public virtual void Check();
    public void Reset(CancellationToken cancellationToken);
    public virtual void Reset();
}
public class Jint.Constraints.MaxStatementsConstraint : Constraint {
    private int _statementsCount;
    [CompilerGeneratedAttribute]
private int <MaxStatements>k__BackingField;
    public int MaxStatements { get; public set; }
    internal MaxStatementsConstraint(int maxStatements);
    [CompilerGeneratedAttribute]
public int get_MaxStatements();
    [CompilerGeneratedAttribute]
public void set_MaxStatements(int value);
    public virtual void Check();
    public virtual void Reset();
}
public class Jint.Constraints.MemoryLimitConstraint : Constraint {
    [NullableAttribute("2")]
private static Func`1<long> GetAllocatedBytesForCurrentThread;
    private long _memoryLimit;
    private long _initialMemoryUsage;
    private static MemoryLimitConstraint();
    internal MemoryLimitConstraint(long memoryLimit);
    public virtual void Check();
    public virtual void Reset();
}
internal class Jint.Constraints.TimeConstraint : Constraint {
    private TimeSpan _timeout;
    [NullableAttribute("2")]
private CancellationTokenSource _cts;
    internal TimeConstraint(TimeSpan timeout);
    public virtual void Check();
    public virtual void Reset();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Jint.ConstraintsOptionsExtensions : object {
    [ExtensionAttribute]
public static Options MaxStatements(Options options, int maxStatements);
    [ExtensionAttribute]
public static Options LimitMemory(Options options, long memoryLimit);
    [ExtensionAttribute]
public static Options TimeoutInterval(Options options, TimeSpan timeoutInterval);
    [ExtensionAttribute]
public static Options CancellationToken(Options options, CancellationToken cancellationToken);
}
public enum Jint.DeclarationBindingType : Enum {
    public int value__;
    public static DeclarationBindingType GlobalCode;
    public static DeclarationBindingType FunctionCode;
    public static DeclarationBindingType EvalCode;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Jint.DefaultObjectConverter : object {
    private static Dictionary`2<Type, Func`3<Engine, object, JsValue>> _typeMappers;
    private static DefaultObjectConverter();
    public static bool TryConvert(Engine engine, object value, Type type, JsValue& result);
    private static bool TryConvertConvertible(Engine engine, IConvertible convertible, JsValue& result);
    private static JsArray ConvertArray(Engine e, object v);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerTypeProxyAttribute("Jint.Engine/EngineDebugView")]
public class Jint.Engine : object {
    [CompilerGeneratedAttribute]
private AdvancedOperations <Advanced>k__BackingField;
    [CompilerGeneratedAttribute]
private ConstraintOperations <Constraints>k__BackingField;
    private static Options _defaultEngineOptions;
    private Parser _defaultParser;
    [NullableAttribute("2")]
private ParserOptions _defaultModuleParserOptions;
    private ExecutionContextStack _executionContexts;
    private JsValue _completionValue;
    [NullableAttribute("2")]
internal EvaluationContext _activeEvaluationContext;
    [NullableAttribute("2")]
internal ErrorDispatchInfo _error;
    private EventLoop _eventLoop;
    private Agent _agent;
    [NullableAttribute("2")]
private DebugHandler _debugger;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal IObjectConverter[] _objectConverters;
    internal Constraint[] _constraints;
    internal bool _isDebugMode;
    internal bool _isStrict;
    private bool _customResolver;
    internal IReferenceResolver _referenceResolver;
    internal ReferencePool _referencePool;
    internal ArgumentsInstancePool _argumentsInstancePool;
    internal JsValueArrayPool _jsValueArrayPool;
    internal ExtensionMethodCache _extensionMethods;
    [CompilerGeneratedAttribute]
private ITypeConverter <TypeConverter>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Dictionary`2<string, Type> TypeCache;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Dictionary`2<Type, TypeReference> _typeReferences;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal ConditionalWeakTable`2<object, ObjectInstance> _objectWrapperCache;
    internal JintCallStack CallStack;
    internal StackGuard _stackGuard;
    internal Intrinsics _originalIntrinsics;
    internal Host _host;
    internal Dictionary`2<ClrPropertyDescriptorFactoriesKey, ReflectionAccessor> _reflectionAccessors;
    [NullableAttribute("2")]
internal Realm _realmInConstruction;
    [NullableAttribute("2")]
internal Node _lastSyntaxElement;
    [CompilerGeneratedAttribute]
private GlobalSymbolRegistry <GlobalSymbolRegistry>k__BackingField;
    [CompilerGeneratedAttribute]
private long <CurrentMemoryUsage>k__BackingField;
    [CompilerGeneratedAttribute]
private Options <Options>k__BackingField;
    internal static bool FoldConstantsOnPrepareByDefault;
    internal static ParserOptions BaseParserOptions;
    [CompilerGeneratedAttribute]
private ModuleOperations <Modules>k__BackingField;
    public AdvancedOperations Advanced { get; }
    public ConstraintOperations Constraints { get; }
    public ITypeConverter TypeConverter { get; internal set; }
    [IsReadOnlyAttribute]
internal ExecutionContext& modreq(System.Runtime.InteropServices.InAttribute) ExecutionContext { get; }
    internal Realm Realm { get; }
    public Intrinsics Intrinsics { get; }
    public ObjectInstance Global { get; }
    internal GlobalSymbolRegistry GlobalSymbolRegistry { get; }
    internal long CurrentMemoryUsage { get; private set; }
    internal Options Options { get; private set; }
    public DebugHandler Debugger { get; }
    internal ParserOptions DefaultModuleParserOptions { get; }
    public ModuleOperations Modules { get; internal set; }
    public Engine(Action`1<Options> options);
    public Engine(Options options);
    public Engine(Action`2<Engine, Options> options);
    [NullableContextAttribute("2")]
private Engine(Options options, Action`2<Engine, Options> configure);
    private static Engine();
    [CompilerGeneratedAttribute]
public AdvancedOperations get_Advanced();
    [NullableContextAttribute("2")]
public static Prepared`1<Script> PrepareScript(string code, string source, bool strict, ScriptPreparationOptions options);
    [NullableContextAttribute("2")]
public static Prepared`1<Module> PrepareModule(string code, string source, ModulePreparationOptions options);
    [CompilerGeneratedAttribute]
public ConstraintOperations get_Constraints();
    [CompilerGeneratedAttribute]
public ITypeConverter get_TypeConverter();
    [CompilerGeneratedAttribute]
internal void set_TypeConverter(ITypeConverter value);
    private void Reset();
    internal ExecutionContext& modreq(System.Runtime.InteropServices.InAttribute) get_ExecutionContext();
    internal Realm get_Realm();
    public Intrinsics get_Intrinsics();
    public ObjectInstance get_Global();
    [CompilerGeneratedAttribute]
internal GlobalSymbolRegistry get_GlobalSymbolRegistry();
    [CompilerGeneratedAttribute]
internal long get_CurrentMemoryUsage();
    [CompilerGeneratedAttribute]
private void set_CurrentMemoryUsage(long value);
    [CompilerGeneratedAttribute]
internal Options get_Options();
    [CompilerGeneratedAttribute]
private void set_Options(Options value);
    public DebugHandler get_Debugger();
    internal ParserOptions get_DefaultModuleParserOptions();
    internal ParserOptions GetActiveParserOptions();
    internal Parser GetParserFor(ScriptParsingOptions parsingOptions);
    internal Parser GetParserFor(ParserOptions parserOptions);
    internal void EnterExecutionContext(Environment lexicalEnvironment, Environment variableEnvironment, Realm realm, PrivateEnvironment privateEnvironment);
    internal void EnterExecutionContext(ExecutionContext& context);
    public Engine SetValue(string name, Delegate value);
    public Engine SetValue(string name, string value);
    public Engine SetValue(string name, double value);
    public Engine SetValue(string name, int value);
    public Engine SetValue(string name, bool value);
    public Engine SetValue(string name, JsValue value);
    public Engine SetValue(string name, object obj);
    public Engine SetValue(string name, Type type);
    public Engine SetValue(string name, T obj);
    internal void LeaveExecutionContext();
    internal void ResetConstraints();
    internal void ResetCallStack();
    public JsValue Evaluate(string code, string source);
    public JsValue Evaluate(string code, ScriptParsingOptions parsingOptions);
    public JsValue Evaluate(string code, string source, ScriptParsingOptions parsingOptions);
    public JsValue Evaluate(Prepared`1& preparedScript);
    public Engine Execute(string code, string source);
    public Engine Execute(string code, ScriptParsingOptions parsingOptions);
    public Engine Execute(string code, string source, ScriptParsingOptions parsingOptions);
    public Engine Execute(Prepared`1& preparedScript);
    private Engine ScriptEvaluation(ScriptRecord scriptRecord, ParserOptions parserOptions);
    internal ManualPromise RegisterPromise();
    internal void AddToEventLoop(Action continuation);
    internal void AddToKeptObjects(JsValue target);
    internal void RunAvailableContinuations();
    private static void DoProcessEventLoop(ConcurrentQueue`1<Action> queue);
    [NullableContextAttribute("2")]
internal void RunBeforeExecuteStatementChecks(StatementOrExpression statement);
    internal JsValue GetValue(object value);
    internal JsValue GetValue(object value, bool returnReferenceToPool);
    internal JsValue GetValue(Reference reference, bool returnReferenceToPool);
    private bool TryHandleStringValue(JsValue property, JsString s, ObjectInstance& o, JsValue& jsValue);
    internal void PutValue(Reference reference, JsValue value);
    public JsValue Invoke(string propertyName, Object[] arguments);
    public JsValue Invoke(string propertyName, object thisObj, Object[] arguments);
    public JsValue Invoke(JsValue value, Object[] arguments);
    public JsValue Invoke(JsValue value, object thisObj, Object[] arguments);
    internal T ExecuteWithConstraints(bool strict, Func`1<T> callback);
    internal JsValue Invoke(JsValue v, JsValue p, JsValue[] arguments);
    private JsValue GetV(JsValue v, JsValue p);
    public JsValue GetValue(string propertyName);
    internal Node GetLastSyntaxElement();
    public JsValue GetValue(JsValue scope, JsValue property);
    internal Reference ResolveBinding(string name, Environment env);
    private static Reference GetIdentifierReference(Environment env, string name, bool strict);
    internal JsValue GetNewTarget(Environment thisEnvironment);
    internal JsValue ResolveThisBinding();
    private void GlobalDeclarationInstantiation(Script script, GlobalEnvironment env);
    internal JsArguments FunctionDeclarationInstantiation(Function function, JsValue[] argumentsList);
    private JsArguments CreateMappedArgumentsObject(Function func, Key[] formals, JsValue[] argumentsList, DeclarativeEnvironment envRec, bool hasRestParameter);
    private JsArguments CreateUnmappedArgumentsObject(JsValue[] argumentsList);
    internal void EvalDeclarationInstantiation(Script script, Environment varEnv, Environment lexEnv, PrivateEnvironment privateEnv, bool strict);
    internal void UpdateLexicalEnvironment(Environment newEnv);
    internal void UpdateVariableEnvironment(Environment newEnv);
    [NullableContextAttribute("2")]
internal void UpdatePrivateEnvironment(PrivateEnvironment newEnv);
    internal ExecutionContext& modreq(System.Runtime.InteropServices.InAttribute) UpdateGenerator(GeneratorInstance generator);
    public JsValue Call(string callableName, JsValue[] arguments);
    public JsValue Call(JsValue callable, JsValue[] arguments);
    public JsValue Call(JsValue callable, JsValue thisObject, JsValue[] arguments);
    internal JsValue Call(ICallable callable, JsValue thisObject, JsValue[] arguments, JintExpression expression);
    public ObjectInstance Construct(string constructorName, JsValue[] arguments);
    public ObjectInstance Construct(JsValue constructor, JsValue[] arguments);
    internal ObjectInstance Construct(JsValue constructor, JsValue[] arguments, JsValue newTarget, JintExpression expression);
    internal JsValue Call(Function function, JsValue thisObject);
    internal JsValue Call(Function function, JsValue thisObject, JsValue[] arguments, JintExpression expression);
    private ObjectInstance Construct(Function function, JsValue[] arguments, JsValue newTarget, JintExpression expression);
    internal void SignalError(ErrorDispatchInfo error);
    internal void RegisterTypeReference(TypeReference reference);
    internal ExecutionContext& modreq(System.Runtime.InteropServices.InAttribute) GetExecutionContext(int fromTop);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
public ModuleOperations get_Modules();
    [CompilerGeneratedAttribute]
internal void set_Modules(ModuleOperations value);
    [NullableContextAttribute("2")]
internal IScriptOrModule GetActiveScriptOrModule();
    [CompilerGeneratedAttribute]
private Action`1<JsValue> <RegisterPromise>g__SettleWith|101_0(Function settle);
}
[FlagsAttribute]
public enum Jint.ExperimentalFeature : Enum {
    public int value__;
    public static ExperimentalFeature None;
    public static ExperimentalFeature Generators;
    public static ExperimentalFeature TaskInterop;
    public static ExperimentalFeature All;
}
[ExtensionAttribute]
internal static class Jint.Extensions.Character : object {
    [ExtensionAttribute]
private static bool IsInRange(char c, ushort min, ushort max);
    [ExtensionAttribute]
public static bool IsOctalDigit(char c);
    [ExtensionAttribute]
public static bool IsDecimalDigit(char c);
    [ExtensionAttribute]
public static bool IsHexDigit(char c);
}
internal static class Jint.Extensions.Hash : object {
    private static int FnvOffsetBias;
    private static int FnvPrime;
    internal static int GetFNVHashCode(ReadOnlySpan`1<char> data);
    [NullableContextAttribute("1")]
internal static int GetFNVHashCode(string text);
    [NullableContextAttribute("1")]
internal static int GetFNVHashCode(StringBuilder text);
    [NullableContextAttribute("1")]
private static int CombineFNVHash(int hashCode, string text);
    private static int CombineFNVHash(int hashCode, ReadOnlySpan`1<char> data);
}
[ExtensionAttribute]
internal static class Jint.Extensions.JavascriptExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
internal static string UpperToLowerCamelCase(string str);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Jint.Extensions.ReflectionExtensions : object {
    private static Type nullableType;
    private static ReflectionExtensions();
    [ExtensionAttribute]
internal static void SetValue(MemberInfo memberInfo, object forObject, object value);
    [ExtensionAttribute]
internal static Type GetDefinedType(MemberInfo memberInfo);
    [ExtensionAttribute]
internal static IEnumerable`1<MethodInfo> GetExtensionMethods(Type type);
    [ExtensionAttribute]
internal static IEnumerable`1<MethodInfo> GetOperatorOverloadMethods(Type type);
    [ExtensionAttribute]
private static bool IsExtensionMethod(MethodBase methodInfo);
    [ExtensionAttribute]
public static bool IsNullable(Type type);
    [ExtensionAttribute]
public static bool IsNumeric(Type type);
    [ExtensionAttribute]
public static bool IsClrNumericCoercible(Type type);
    [ExtensionAttribute]
public static object AsNumberOfType(double d, TypeCode type);
    [NullableContextAttribute("2")]
public static bool TryConvertViaTypeCoercion(Type memberType, ValueCoercionType valueCoercionType, JsValue value, Object& converted);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Jint.Extensions.WebEncoders : object {
    private static Byte[] EmptyBytes;
    private static WebEncoders();
    [NullableContextAttribute("0")]
public static Byte[] Base64UrlDecode(ReadOnlySpan`1<char> input);
    public static Byte[] Base64UrlDecode(ReadOnlySpan`1<char> input, Char[] buffer);
    private static int GetArraySizeRequiredToDecode(int count);
    public static string Base64UrlEncode(Byte[] input, bool omitPadding);
    public static string Base64UrlEncode(Byte[] input, int offset, int count, bool omitPadding);
    public static int Base64UrlEncode(Byte[] input, int offset, Char[] output, int outputOffset, int count, bool omitPadding);
    public static int GetArraySizeRequiredToEncode(int count);
    private static int GetNumBase64PaddingCharsInString(string str);
    private static int GetNumBase64PaddingCharsToAddForDecode(int inputLength);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.HoistingScope : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal List`1<FunctionDeclaration> _functionDeclarations;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal List`1<VariableDeclaration> _variablesDeclarations;
    [NullableAttribute("2")]
internal List`1<Key> _varNames;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal List`1<Declaration> _lexicalDeclarations;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal List`1<string> _lexicalNames;
    [NullableContextAttribute("2")]
private HoistingScope(List`1<FunctionDeclaration> functionDeclarations, List`1<Key> varNames, List`1<VariableDeclaration> variableDeclarations, List`1<Declaration> lexicalDeclarations, List`1<string> lexicalNames);
    public static HoistingScope GetProgramLevelDeclarations(Program script, bool collectVarNames, bool collectLexicalNames);
    public static HoistingScope GetFunctionLevelDeclarations(bool strict, IFunction node);
    public static HoistingScope GetModuleLevelDeclarations(Module module, bool collectVarNames, bool collectLexicalNames);
    public static List`1<Declaration> GetLexicalDeclarations(BlockStatement statement);
    public static List`1<Declaration> GetLexicalDeclarations(SwitchCase statement);
    public static void GetImportsAndExports(Module module, HashSet`1& requestedModules, List`1& importEntries, List`1& localExportEntries, List`1& indirectExportEntries, List`1& starExportEntries);
}
public interface Jint.IParsingOptions {
    public Nullable`1<bool> CompileRegex { get; public set; }
    public Nullable`1<TimeSpan> RegexTimeout { get; public set; }
    public bool Tolerant { get; public set; }
    public abstract virtual Nullable`1<bool> get_CompileRegex();
    public abstract virtual Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_CompileRegex(Nullable`1<bool> value);
    public abstract virtual Nullable`1<TimeSpan> get_RegexTimeout();
    public abstract virtual Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_RegexTimeout(Nullable`1<TimeSpan> value);
    public abstract virtual bool get_Tolerant();
    public abstract virtual Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Tolerant(bool value);
}
[NullableContextAttribute("1")]
public interface Jint.IPreparationOptions`1 {
    public TParsingOptions ParsingOptions { get; }
    public bool FoldConstants { get; public set; }
    public abstract virtual TParsingOptions get_ParsingOptions();
    public abstract virtual bool get_FoldConstants();
    public abstract virtual Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_FoldConstants(bool value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class Jint.JintException : Exception {
    internal JintException(string message);
    internal JintException(string message, Exception innerException);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Jint.JsValueExtensions : object {
    [ExtensionAttribute]
public static bool IsPrimitive(JsValue value);
    [ExtensionAttribute]
public static bool IsUndefined(JsValue value);
    [ExtensionAttribute]
public static bool IsArray(JsValue value);
    [ExtensionAttribute]
internal static bool IsNullOrUndefined(JsValue value);
    [ExtensionAttribute]
public static bool IsDate(JsValue value);
    [ExtensionAttribute]
public static bool IsPromise(JsValue value);
    [ExtensionAttribute]
public static bool IsPrivateName(JsValue value);
    [ExtensionAttribute]
public static bool IsRegExp(JsValue value);
    [ExtensionAttribute]
public static bool IsObject(JsValue value);
    [ExtensionAttribute]
public static bool IsString(JsValue value);
    [ExtensionAttribute]
public static bool IsNumber(JsValue value);
    [ExtensionAttribute]
public static bool IsBigInt(JsValue value);
    [ExtensionAttribute]
internal static bool IsInteger(JsValue value);
    [ExtensionAttribute]
public static bool IsBoolean(JsValue value);
    [ExtensionAttribute]
public static bool IsNull(JsValue value);
    [ExtensionAttribute]
public static bool IsSymbol(JsValue value);
    [ExtensionAttribute]
internal static bool CanBeHeldWeakly(JsValue value, GlobalSymbolRegistry symbolRegistry);
    [ExtensionAttribute]
public static JsDate AsDate(JsValue value);
    [ExtensionAttribute]
public static JsRegExp AsRegExp(JsValue value);
    [ExtensionAttribute]
public static ObjectInstance AsObject(JsValue value);
    [ExtensionAttribute]
public static TInstance AsInstance(JsValue value);
    [ExtensionAttribute]
public static JsArray AsArray(JsValue value);
    [ExtensionAttribute]
public static bool AsBoolean(JsValue value);
    [ExtensionAttribute]
public static double AsNumber(JsValue value);
    [ExtensionAttribute]
internal static int AsInteger(JsValue value);
    [ExtensionAttribute]
internal static BigInteger AsBigInt(JsValue value);
    [ExtensionAttribute]
public static string AsString(JsValue value);
    [ExtensionAttribute]
public static bool IsArrayBuffer(JsValue value);
    [ExtensionAttribute]
public static Byte[] AsArrayBuffer(JsValue value);
    [ExtensionAttribute]
public static bool IsDataView(JsValue value);
    [ExtensionAttribute]
public static Byte[] AsDataView(JsValue value);
    [ExtensionAttribute]
public static bool IsUint8Array(JsValue value);
    [ExtensionAttribute]
public static Byte[] AsUint8Array(JsValue value);
    [ExtensionAttribute]
public static bool IsUint8ClampedArray(JsValue value);
    [ExtensionAttribute]
public static Byte[] AsUint8ClampedArray(JsValue value);
    [ExtensionAttribute]
public static bool IsInt8Array(JsValue value);
    [ExtensionAttribute]
public static SByte[] AsInt8Array(JsValue value);
    [ExtensionAttribute]
public static bool IsInt16Array(JsValue value);
    [ExtensionAttribute]
public static Int16[] AsInt16Array(JsValue value);
    [ExtensionAttribute]
public static bool IsUint16Array(JsValue value);
    [ExtensionAttribute]
public static UInt16[] AsUint16Array(JsValue value);
    [ExtensionAttribute]
public static bool IsInt32Array(JsValue value);
    [ExtensionAttribute]
public static Int32[] AsInt32Array(JsValue value);
    [ExtensionAttribute]
public static bool IsUint32Array(JsValue value);
    [ExtensionAttribute]
public static UInt32[] AsUint32Array(JsValue value);
    [ExtensionAttribute]
public static bool IsBigInt64Array(JsValue value);
    [ExtensionAttribute]
public static Int64[] AsBigInt64Array(JsValue value);
    [ExtensionAttribute]
public static bool IsBigUint64Array(JsValue value);
    [ExtensionAttribute]
public static UInt64[] AsBigUint64Array(JsValue value);
    [ExtensionAttribute]
public static bool IsFloat16Array(JsValue value);
    [ExtensionAttribute]
public static bool IsFloat32Array(JsValue value);
    [ExtensionAttribute]
public static Single[] AsFloat32Array(JsValue value);
    [ExtensionAttribute]
public static bool IsFloat64Array(JsValue value);
    [ExtensionAttribute]
public static Double[] AsFloat64Array(JsValue value);
    [ExtensionAttribute]
public static T TryCast(JsValue value);
    [ExtensionAttribute]
public static T TryCast(JsValue value, Action`1<JsValue> fail);
    [ExtensionAttribute]
public static T As(JsValue value);
    [ExtensionAttribute]
public static Function AsFunctionInstance(JsValue value);
    [ExtensionAttribute]
public static JsValue Call(JsValue value);
    [ExtensionAttribute]
public static JsValue Call(JsValue value, JsValue arg1);
    [ExtensionAttribute]
public static JsValue Call(JsValue value, JsValue arg1, JsValue arg2);
    [ExtensionAttribute]
public static JsValue Call(JsValue value, JsValue arg1, JsValue arg2, JsValue arg3);
    [ExtensionAttribute]
public static JsValue Call(JsValue value, JsValue[] arguments);
    [ExtensionAttribute]
public static JsValue Call(JsValue value, JsValue thisObj, JsValue[] arguments);
    private static JsValue ThrowNotObject(JsValue value);
    [ExtensionAttribute]
public static JsValue UnwrapIfPromise(JsValue value);
    private static void ThrowWrongTypeException(JsValue value, string expectedType);
    [ExtensionAttribute]
internal static BigInteger ToBigInteger(JsValue value, Engine engine);
    [ExtensionAttribute]
internal static ICallable GetCallable(JsValue source, Realm realm);
    [ExtensionAttribute]
internal static Nullable`1<UInt32> GetArrayBufferMaxByteLengthOption(JsValue options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Name}")]
internal class Jint.Key : ValueType {
    internal string Name;
    internal int HashCode;
    private Key(string name);
    public static Key op_Implicit(string name);
    public static string op_Implicit(Key key);
    public static bool op_Equality(Key& a, Key& b);
    public static bool op_Inequality(Key& a, Key& b);
    public sealed virtual bool Equals(Key other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Jint.ModuleParsingOptions : object {
    private static ParserOptions _defaultParserOptions;
    public static ModuleParsingOptions Default;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <CompileRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <RegexTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Tolerant>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public Nullable`1<bool> CompileRegex { get; public set; }
    public Nullable`1<TimeSpan> RegexTimeout { get; public set; }
    public bool Tolerant { get; public set; }
    [CompilerGeneratedAttribute]
private ModuleParsingOptions(ModuleParsingOptions original);
    private static ModuleParsingOptions();
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<bool> get_CompileRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_CompileRegex(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<TimeSpan> get_RegexTimeout();
    [CompilerGeneratedAttribute]
public sealed virtual Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_RegexTimeout(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Tolerant();
    [CompilerGeneratedAttribute]
public sealed virtual Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Tolerant(bool value);
    internal ParserOptions ApplyTo(ParserOptions baseOptions, RegExpParseMode defaultRegExpParseMode, TimeSpan defaultRegexTimeout);
    internal ParserOptions GetParserOptions();
    internal ParserOptions GetParserOptions(Options engineOptions);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(ModuleParsingOptions left, ModuleParsingOptions right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(ModuleParsingOptions left, ModuleParsingOptions right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(ModuleParsingOptions other);
    [CompilerGeneratedAttribute]
public ModuleParsingOptions <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Jint.ModulePreparationOptions : object {
    private static ParserOptions _defaultParserOptions;
    public static ModulePreparationOptions Default;
    [CompilerGeneratedAttribute]
private ModuleParsingOptions <ParsingOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FoldConstants>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public ModuleParsingOptions ParsingOptions { get; public set; }
    public bool FoldConstants { get; public set; }
    [CompilerGeneratedAttribute]
private ModulePreparationOptions(ModulePreparationOptions original);
    private static ModulePreparationOptions();
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public sealed virtual ModuleParsingOptions get_ParsingOptions();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ParsingOptions(ModuleParsingOptions value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_FoldConstants();
    [CompilerGeneratedAttribute]
public sealed virtual Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_FoldConstants(bool value);
    internal ParserOptions GetParserOptions();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(ModulePreparationOptions left, ModulePreparationOptions right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(ModulePreparationOptions left, ModulePreparationOptions right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(ModulePreparationOptions other);
    [CompilerGeneratedAttribute]
public ModulePreparationOptions <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.AggregateError.AggregateErrorConstructor : Constructor {
    private static JsString _name;
    [CompilerGeneratedAttribute]
private AggregateErrorPrototype <PrototypeObject>k__BackingField;
    private AggregateErrorPrototype PrototypeObject { get; }
    internal AggregateErrorConstructor(Engine engine, Realm realm, ErrorConstructor errorConstructor);
    private static AggregateErrorConstructor();
    [CompilerGeneratedAttribute]
private AggregateErrorPrototype get_PrototypeObject();
    protected internal virtual JsValue Call(JsValue thisObject, JsValue[] arguments);
    public virtual ObjectInstance Construct(JsValue[] arguments, JsValue newTarget);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.AggregateError.AggregateErrorPrototype : Prototype {
    private AggregateErrorConstructor _constructor;
    internal AggregateErrorPrototype(Engine engine, Realm realm, AggregateErrorConstructor constructor, ObjectInstance prototype);
    protected virtual void Initialize();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Jint.Native.Array.ArrayConstructor : Constructor {
    private static JsString _functionName;
    [CompilerGeneratedAttribute]
private ArrayPrototype <PrototypeObject>k__BackingField;
    public ArrayPrototype PrototypeObject { get; }
    internal ArrayConstructor(Engine engine, Realm realm, FunctionPrototype functionPrototype, ObjectPrototype objectPrototype);
    private static ArrayConstructor();
    [CompilerGeneratedAttribute]
public ArrayPrototype get_PrototypeObject();
    protected virtual void Initialize();
    private JsValue From(JsValue thisObject, JsValue[] arguments);
    private ObjectInstance ConstructArrayFromArrayLike(JsValue thisObj, ArrayOperations source, ICallable callable, JsValue thisArg);
    private JsValue Of(JsValue thisObject, JsValue[] arguments);
    private static JsValue Species(JsValue thisObject, JsValue[] arguments);
    private static JsValue IsArray(JsValue thisObject, JsValue[] arguments);
    private static JsValue IsArray(JsValue o);
    protected internal virtual JsValue Call(JsValue thisObject, JsValue[] arguments);
    public JsArray Construct(JsValue[] arguments);
    public virtual ObjectInstance Construct(JsValue[] arguments, JsValue newTarget);
    public JsArray Construct(int capacity);
    public JsArray Construct(UInt32 capacity);
    public JsArray Construct(JsValue[] arguments, UInt32 capacity);
    private JsArray Construct(JsValue[] arguments, ulong capacity, ObjectInstance prototypeObject);
    internal JsArray ArrayCreate(ulong length, ObjectInstance proto);
    private JsArray ConstructArrayFromIEnumerable(IEnumerable enumerable);
    public JsArray ConstructFast(JsValue[] contents);
    internal JsArray ConstructFast(List`1<JsValue> contents);
    internal ObjectInstance ArraySpeciesCreate(ObjectInstance originalArray, ulong length);
    internal JsArray CreateArrayFromList(List`1<T> values);
    internal JsArray CreateArrayFromList(T[] values);
    private void ValidateLength(double length);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class Jint.Native.Array.ArrayInstance : ObjectInstance {
    [NullableAttribute("2")]
internal PropertyDescriptor _length;
    private static int MaxDenseArrayLength;
    [NullableAttribute("2")]
internal JsValue[] _dense;
    [NullableAttribute("2")]
private Dictionary`2<UInt32, PropertyDescriptor> _sparse;
    private ObjectChangeFlags _objectChangeFlags;
    [NullableAttribute("2")]
private ArrayConstructor _constructor;
    internal bool IsArrayLike { get; }
    internal bool HasOriginalIterator { get; }
    internal bool CanUseFastAccess { get; }
    internal bool IsIntegerIndexedArray { get; }
    public JsValue Item { get; public set; }
    public JsValue Item { get; public set; }
    private protected ArrayInstance(Engine engine, InternalTypes type);
    private protected ArrayInstance(Engine engine, UInt32 capacity, UInt32 length);
    private protected ArrayInstance(Engine engine, JsValue[] items);
    private void InitializePrototypeAndValidateCapacity(Engine engine, UInt32 capacity);
    internal sealed virtual bool get_IsArrayLike();
    internal sealed virtual bool IsArray();
    internal sealed virtual bool get_HasOriginalIterator();
    internal bool get_CanUseFastAccess();
    public sealed virtual bool DefineOwnProperty(JsValue property, PropertyDescriptor desc);
    private bool DefineLength(PropertyDescriptor desc);
    private bool DefineOwnProperty(UInt32 index, PropertyDescriptor desc);
    internal virtual UInt32 GetLength();
    private JsNumber GetJsNumberLength();
    protected sealed virtual bool TryGetProperty(JsValue property, PropertyDescriptor& descriptor);
    public sealed virtual List`1<JsValue> GetOwnPropertyKeys(Types types);
    [IteratorStateMachineAttribute("Jint.Native.Array.ArrayInstance/<GetEntries>d__24")]
public IEnumerable`1<KeyValuePair`2<string, JsValue>> GetEntries(bool includeLength);
    [IteratorStateMachineAttribute("Jint.Native.Array.ArrayInstance/<GetOwnProperties>d__25")]
public sealed virtual IEnumerable`1<KeyValuePair`2<JsValue, PropertyDescriptor>> GetOwnProperties();
    public sealed virtual PropertyDescriptor GetOwnProperty(JsValue property);
    internal JsValue Get(UInt32 index);
    public sealed virtual JsValue Get(JsValue property, JsValue receiver);
    public sealed virtual bool Set(JsValue property, JsValue value, JsValue receiver);
    private bool IsSafeSelfTarget(JsValue receiver);
    public sealed virtual bool HasProperty(JsValue property);
    internal bool HasProperty(ulong index);
    protected internal sealed virtual void SetOwnProperty(JsValue property, PropertyDescriptor desc);
    private void TrackChanges(JsValue property, PropertyDescriptor desc, bool isArrayIndex);
    public sealed virtual void RemoveOwnProperty(JsValue property);
    internal static bool IsArrayIndex(JsValue p, UInt32& index);
    internal static UInt32 ParseArrayIndex(string p);
    private static bool IsInRange(char c, char min, char max);
    [NullableContextAttribute("2")]
internal void SetIndexValue(UInt32 index, JsValue value, bool updateLength);
    private void EnsureCorrectLength(UInt32 index);
    internal void SetLength(ulong length);
    internal void SetLength(JsNumber length);
    internal UInt32 GetSmallestIndex();
    internal bool DeletePropertyOrThrow(UInt32 index);
    private bool Delete(UInt32 index);
    [NullableContextAttribute("2")]
private bool Delete(UInt32 index, bool unwrapFromNonDataDescriptor, JsValue& deletedValue);
    internal bool DeleteAt(UInt32 index);
    [NullableContextAttribute("2")]
private bool TryGetDescriptor(UInt32 index, bool createIfMissing, PropertyDescriptor& descriptor);
    internal bool TryGetValue(UInt32 index, JsValue& value);
    private bool TryGetValueUnlikely(UInt32 index, JsValue& value);
    [NullableContextAttribute("2")]
private JsValue GetValue(UInt32 index, bool unwrapFromNonDataDescriptor);
    [NullableContextAttribute("2")]
private JsValue GetValueUnlikely(UInt32 index, bool unwrapFromNonDataDescriptor);
    private void WriteArrayValue(UInt32 index, PropertyDescriptor descriptor);
    [NullableContextAttribute("2")]
private void WriteArrayValue(UInt32 index, JsValue value);
    [NullableContextAttribute("2")]
private void WriteArrayValueUnlikely(UInt32 index, JsValue value);
    [NullableContextAttribute("2")]
private void WriteArrayValueUnlikely(UInt32 index, PropertyDescriptor value);
    private void ConvertToSparse();
    internal void EnsureCapacity(UInt32 capacity, bool force);
    public JsValue[] ToArray();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [IteratorStateMachineAttribute("Jint.Native.Array.ArrayInstance/<GetEnumerator>d__61")]
public sealed virtual IEnumerator`1<JsValue> GetEnumerator();
    [IteratorStateMachineAttribute("Jint.Native.Array.ArrayInstance/<Enumerate>d__63")]
private IEnumerable`1<IndexedEntry> Enumerate();
    public void Push(JsValue value);
    public UInt32 Push(JsValue[] values);
    public JsValue Pop();
    private bool CanSetLength();
    private void WriteValueSlow(double n, JsValue value);
    internal JsArray Map(JsValue[] arguments);
    internal sealed virtual bool FindWithCallback(JsValue[] arguments, UInt64& index, JsValue& value, bool visitUnassigned, bool fromEnd);
    internal sealed virtual bool get_IsIntegerIndexedArray();
    public JsValue get_Item(UInt32 index);
    public void set_Item(UInt32 index, JsValue value);
    public JsValue get_Item(int index);
    public void set_Item(int index, JsValue value);
    internal void CopyValues(JsArray source, UInt32 sourceStartIndex, UInt32 targetStartIndex, UInt32 length);
    public sealed virtual string ToString();
    private static void ThrowMaximumArraySizeReachedException(Engine engine, UInt32 capacity);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<KeyValuePair`2<JsValue, PropertyDescriptor>> <>n__0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.Array.ArrayIteratorPrototype : IteratorPrototype {
    [NullableAttribute("2")]
private ClrFunction _originalNextFunction;
    internal bool HasOriginalNext { get; }
    internal ArrayIteratorPrototype(Engine engine, Realm realm, IteratorPrototype objectPrototype);
    protected virtual void Initialize();
    internal IteratorInstance Construct(ObjectInstance array, ArrayIteratorType kind);
    internal bool get_HasOriginalNext();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Jint.Native.Array.ArrayOperations : object {
    protected internal static ulong MaxArrayLength;
    protected internal static ulong MaxArrayLikeLength;
    public ObjectInstance Target { get; }
    public static ArrayOperations For(Realm realm, JsValue value, bool forWrite);
    public static ArrayOperations For(ObjectInstance instance, bool forWrite);
    public abstract virtual ObjectInstance get_Target();
    public abstract virtual ulong GetSmallestIndex(ulong length);
    public abstract virtual UInt32 GetLength();
    public abstract virtual ulong GetLongLength();
    public abstract virtual void SetLength(ulong length);
    public abstract virtual void EnsureCapacity(ulong capacity);
    public abstract virtual JsValue Get(ulong index);
    public virtual JsValue[] GetAll(Types elementTypes, bool skipHoles);
    public abstract virtual bool TryGetValue(ulong index, JsValue& value);
    public abstract virtual bool HasProperty(ulong index);
    public abstract virtual void CreateDataPropertyOrThrow(ulong index, JsValue value);
    public abstract virtual void Set(ulong index, JsValue value, bool updateLength, bool throwOnError);
    public abstract virtual void DeletePropertyOrThrow(ulong index);
    public ArrayLikeIterator GetEnumerator();
    private sealed virtual override IEnumerator`1<JsValue> System.Collections.Generic.IEnumerable<Jint.Native.JsValue>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Jint.Native.Array.ArrayOperations`1 : ArrayOperations {
    protected T _target;
    public ObjectInstance Target { get; }
    protected ArrayOperations`1(T target);
    public virtual ObjectInstance get_Target();
}
[ExtensionAttribute]
internal static class Jint.Native.Array.ArrayPropertyDescriptorExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
internal static bool IsDefaultArrayValueDescriptor(PropertyDescriptor propertyDescriptor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Jint.Native.Array.ArrayPrototype : ArrayInstance {
    private Realm _realm;
    private ArrayConstructor _constructor;
    [NullableAttribute("2")]
internal ClrFunction _originalIteratorFunction;
    internal ArrayPrototype(Engine engine, Realm realm, ArrayConstructor arrayConstructor, ObjectPrototype objectPrototype);
    protected virtual void Initialize();
    private ObjectInstance Keys(JsValue thisObject, JsValue[] arguments);
    internal ObjectInstance Values(JsValue thisObject, JsValue[] arguments);
    private ObjectInstance With(JsValue thisObject, JsValue[] arguments);
    private ObjectInstance Entries(JsValue thisObject, JsValue[] arguments);
    private JsValue Fill(JsValue thisObject, JsValue[] arguments);
    private JsValue CopyWithin(JsValue thisObject, JsValue[] arguments);
    private JsValue LastIndexOf(JsValue thisObject, JsValue[] arguments);
    private JsValue Reduce(JsValue thisObject, JsValue[] arguments);
    private JsValue Filter(JsValue thisObject, JsValue[] arguments);
    private JsValue Map(JsValue thisObject, JsValue[] arguments);
    private JsValue Flat(JsValue thisObject, JsValue[] arguments);
    private JsValue FlatMap(JsValue thisObject, JsValue[] arguments);
    private ulong FlattenIntoArray(ObjectInstance target, ArrayOperations source, UInt32 sourceLen, ulong start, double depth, ICallable mapperFunction, JsValue thisArg);
    private JsValue ForEach(JsValue thisObject, JsValue[] arguments);
    private JsValue Includes(JsValue thisObject, JsValue[] arguments);
    private JsValue Some(JsValue thisObject, JsValue[] arguments);
    private JsValue Every(JsValue thisObject, JsValue[] arguments);
    private JsValue IndexOf(JsValue thisObject, JsValue[] arguments);
    private JsValue Find(JsValue thisObject, JsValue[] arguments);
    private JsValue FindIndex(JsValue thisObject, JsValue[] arguments);
    private JsValue FindLast(JsValue thisObject, JsValue[] arguments);
    private JsValue FindLastIndex(JsValue thisObject, JsValue[] arguments);
    private JsValue At(JsValue thisObject, JsValue[] arguments);
    private JsValue Splice(JsValue thisObject, JsValue[] arguments);
    private JsValue Unshift(JsValue thisObject, JsValue[] arguments);
    private JsValue Sort(JsValue thisObject, JsValue[] arguments);
    private JsValue Slice(JsValue thisObject, JsValue[] arguments);
    private JsValue Shift(JsValue thisObject, JsValue[] arg2);
    private JsValue Reverse(JsValue thisObject, JsValue[] arguments);
    private JsValue Join(JsValue thisObject, JsValue[] arguments);
    private JsValue ToLocaleString(JsValue thisObject, JsValue[] arguments);
    private JsValue Concat(JsValue thisObject, JsValue[] arguments);
    internal JsValue ToString(JsValue thisObject, JsValue[] arguments);
    private JsValue ToReversed(JsValue thisObject, JsValue[] arguments);
    private JsValue ToSorted(JsValue thisObject, JsValue[] arguments);
    private JsValue ToSpliced(JsValue thisObject, JsValue[] arguments);
    private JsValue[] SortArray(IEnumerable`1<JsValue> array, ICallable compareFn);
    private ICallable GetCompareFunction(JsValue compareArg);
    private JsValue ReduceRight(JsValue thisObject, JsValue[] arguments);
    public JsValue Push(JsValue thisObject, JsValue[] arguments);
    public JsValue Pop(JsValue thisObject, JsValue[] arguments);
    private JsValue[] CreateBackingArray(ulong length);
    private void ValidateArrayLength(ulong length);
    [CompilerGeneratedAttribute]
internal static string <Join>g__StringFromJsValue|34_0(JsValue value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Jint.Native.ArrayBuffer.ArrayBufferConstructor : Constructor {
    private static JsString _functionName;
    [CompilerGeneratedAttribute]
private ArrayBufferPrototype <PrototypeObject>k__BackingField;
    internal ArrayBufferPrototype PrototypeObject { get; }
    internal ArrayBufferConstructor(Engine engine, Realm realm, FunctionPrototype functionPrototype, ObjectPrototype objectPrototype);
    private static ArrayBufferConstructor();
    [CompilerGeneratedAttribute]
internal ArrayBufferPrototype get_PrototypeObject();
    protected virtual void Initialize();
    public JsArrayBuffer Construct(Byte[] data);
    public JsArrayBuffer Construct(ulong byteLength, Nullable`1<UInt32> maxByteLength);
    public virtual ObjectInstance Construct(JsValue[] arguments, JsValue newTarget);
    private static JsValue Species(JsValue thisObject, JsValue[] arguments);
    private static JsValue IsView(JsValue thisObject, JsValue[] arguments);
    internal JsArrayBuffer AllocateArrayBuffer(JsValue constructor, ulong byteLength, Nullable`1<UInt32> maxByteLength);
    private JsArrayBuffer CreateJsArrayBuffer(JsValue constructor, Byte[] block, ulong byteLength, Nullable`1<UInt32> maxByteLength);
}
internal enum Jint.Native.ArrayBuffer.ArrayBufferOrder : Enum {
    public int value__;
    public static ArrayBufferOrder Init;
    public static ArrayBufferOrder SeqCst;
    public static ArrayBufferOrder Unordered;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.ArrayBuffer.ArrayBufferPrototype : Prototype {
    private ArrayBufferConstructor _constructor;
    internal ArrayBufferPrototype(Engine engine, ArrayBufferConstructor constructor, ObjectPrototype objectPrototype);
    protected virtual void Initialize();
    private JsValue Detached(JsValue thisObject, JsValue[] arguments);
    private JsValue MaxByteLength(JsValue thisObject, JsValue[] arguments);
    private JsValue Resizable(JsValue thisObject, JsValue[] arguments);
    private JsValue Resize(JsValue thisObject, JsValue[] arguments);
    private JsValue ByteLength(JsValue thisObject, JsValue[] arguments);
    private JsValue Slice(JsValue thisObject, JsValue[] arguments);
    private JsValue Transfer(JsValue thisObject, JsValue[] arguments);
    private JsValue TransferToFixedLength(JsValue thisObject, JsValue[] arguments);
    private JsValue ArrayBufferCopyAndDetach(JsValue o, JsValue newLength, PreserveResizability preserveResizability);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.AsyncFunction.AsyncFunctionConstructor : Constructor {
    private static JsString _functionName;
    [CompilerGeneratedAttribute]
private AsyncFunctionPrototype <PrototypeObject>k__BackingField;
    public AsyncFunctionPrototype PrototypeObject { get; }
    public AsyncFunctionConstructor(Engine engine, Realm realm, FunctionConstructor functionConstructor);
    private static AsyncFunctionConstructor();
    [CompilerGeneratedAttribute]
public AsyncFunctionPrototype get_PrototypeObject();
    protected internal virtual JsValue Call(JsValue thisObject, JsValue[] arguments);
    public virtual ObjectInstance Construct(JsValue[] arguments, JsValue newTarget);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.AsyncFunction.AsyncFunctionPrototype : Prototype {
    private AsyncFunctionConstructor _constructor;
    public AsyncFunctionPrototype(Engine engine, Realm realm, AsyncFunctionConstructor constructor, FunctionPrototype objectPrototype);
    protected virtual void Initialize();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.Atomics.AtomicsInstance : ObjectInstance {
    private Realm _realm;
    public AtomicsInstance(Engine engine, Realm realm, ObjectPrototype objectPrototype);
    protected virtual void Initialize();
    private JsValue Pause(JsValue thisObject, JsValue[] arguments);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.BigInt.BigIntConstructor : Constructor {
    private static JsString _functionName;
    [CompilerGeneratedAttribute]
private BigIntPrototype <PrototypeObject>k__BackingField;
    public BigIntPrototype PrototypeObject { get; }
    public BigIntConstructor(Engine engine, Realm realm, FunctionPrototype functionPrototype, ObjectPrototype objectPrototype);
    private static BigIntConstructor();
    protected virtual void Initialize();
    private JsValue AsIntN(JsValue thisObject, JsValue[] arguments);
    private JsValue AsUintN(JsValue thisObject, JsValue[] arguments);
    protected internal virtual JsValue Call(JsValue thisObject, JsValue[] arguments);
    private JsBigInt NumberToBigInt(JsNumber value);
    public virtual ObjectInstance Construct(JsValue[] arguments, JsValue newTarget);
    [CompilerGeneratedAttribute]
public BigIntPrototype get_PrototypeObject();
    public BigIntInstance Construct(JsBigInt value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.BigInt.BigIntInstance : ObjectInstance {
    [CompilerGeneratedAttribute]
private JsBigInt <BigIntData>k__BackingField;
    private Types Jint.Native.IJsPrimitive.Type { get; }
    private JsValue Jint.Native.IJsPrimitive.PrimitiveValue { get; }
    public JsBigInt BigIntData { get; }
    public BigIntInstance(Engine engine, JsBigInt value);
    private sealed virtual override Types Jint.Native.IJsPrimitive.get_Type();
    private sealed virtual override JsValue Jint.Native.IJsPrimitive.get_PrimitiveValue();
    [CompilerGeneratedAttribute]
public JsBigInt get_BigIntData();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.BigInt.BigIntPrototype : Prototype {
    private BigIntConstructor _constructor;
    internal BigIntPrototype(Engine engine, BigIntConstructor constructor, ObjectPrototype objectPrototype);
    protected virtual void Initialize();
    private JsValue ToLocaleString(JsValue thisObject, JsValue[] arguments);
    private JsValue ValueOf(JsValue thisObject, JsValue[] arguments);
    private JsValue ToBigIntString(JsValue thisObject, JsValue[] arguments);
    private JsBigInt ThisBigIntValue(JsValue value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.Boolean.BooleanConstructor : Constructor {
    private static JsString _functionName;
    [CompilerGeneratedAttribute]
private BooleanPrototype <PrototypeObject>k__BackingField;
    public BooleanPrototype PrototypeObject { get; }
    internal BooleanConstructor(Engine engine, Realm realm, FunctionPrototype functionPrototype, ObjectPrototype objectPrototype);
    private static BooleanConstructor();
    [CompilerGeneratedAttribute]
public BooleanPrototype get_PrototypeObject();
    protected internal virtual JsValue Call(JsValue thisObject, JsValue[] arguments);
    public virtual ObjectInstance Construct(JsValue[] arguments, JsValue newTarget);
    public BooleanInstance Construct(JsBoolean value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.Boolean.BooleanInstance : ObjectInstance {
    [CompilerGeneratedAttribute]
private JsBoolean <BooleanData>k__BackingField;
    private Types Jint.Native.IJsPrimitive.Type { get; }
    private JsValue Jint.Native.IJsPrimitive.PrimitiveValue { get; }
    public JsBoolean BooleanData { get; }
    public BooleanInstance(Engine engine, JsBoolean value);
    private sealed virtual override Types Jint.Native.IJsPrimitive.get_Type();
    private sealed virtual override JsValue Jint.Native.IJsPrimitive.get_PrimitiveValue();
    [CompilerGeneratedAttribute]
public JsBoolean get_BooleanData();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.Boolean.BooleanPrototype : BooleanInstance {
    private Realm _realm;
    private BooleanConstructor _constructor;
    internal BooleanPrototype(Engine engine, Realm realm, BooleanConstructor constructor, ObjectPrototype objectPrototype);
    protected virtual void Initialize();
    private JsValue ValueOf(JsValue thisObject, JsValue[] arguments);
    private JsString ToBooleanString(JsValue thisObject, JsValue[] arguments);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Jint.Native.Constructor : Function {
    protected Constructor(Engine engine, string name);
    internal Constructor(Engine engine, Realm realm, JsString name);
    protected internal virtual JsValue Call(JsValue thisObject, JsValue[] arguments);
    public abstract virtual ObjectInstance Construct(JsValue[] arguments, JsValue newTarget);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.DataView.DataViewConstructor : Constructor {
    private static JsString _functionName;
    [CompilerGeneratedAttribute]
private DataViewPrototype <PrototypeObject>k__BackingField;
    private DataViewPrototype PrototypeObject { get; }
    internal DataViewConstructor(Engine engine, Realm realm, FunctionPrototype functionPrototype, ObjectPrototype objectPrototype);
    private static DataViewConstructor();
    [CompilerGeneratedAttribute]
private DataViewPrototype get_PrototypeObject();
    public virtual ObjectInstance Construct(JsValue[] arguments, JsValue newTarget);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.DataView.DataViewPrototype : Prototype {
    private DataViewConstructor _constructor;
    internal DataViewPrototype(Engine engine, DataViewConstructor constructor, ObjectPrototype objectPrototype);
    protected virtual void Initialize();
    private JsValue Buffer(JsValue thisObject, JsValue[] arguments);
    private JsValue ByteLength(JsValue thisObject, JsValue[] arguments);
    private JsValue ByteOffset(JsValue thisObject, JsValue[] arguments);
    private JsValue GetBigInt64(JsValue thisObject, JsValue[] arguments);
    private JsValue GetBigUint64(JsValue thisObject, JsValue[] arguments);
    private JsValue GetFloat16(JsValue thisObject, JsValue[] arguments);
    private JsValue GetFloat32(JsValue thisObject, JsValue[] arguments);
    private JsValue GetFloat64(JsValue thisObject, JsValue[] arguments);
    private JsValue GetInt8(JsValue thisObject, JsValue[] arguments);
    private JsValue GetInt16(JsValue thisObject, JsValue[] arguments);
    private JsValue GetInt32(JsValue thisObject, JsValue[] arguments);
    private JsValue GetUint8(JsValue thisObject, JsValue[] arguments);
    private JsValue GetUint16(JsValue thisObject, JsValue[] arguments);
    private JsValue GetUint32(JsValue thisObject, JsValue[] arguments);
    private JsValue SetBigInt64(JsValue thisObject, JsValue[] arguments);
    private JsValue SetBigUint64(JsValue thisObject, JsValue[] arguments);
    private JsValue SetFloat16(JsValue thisObject, JsValue[] arguments);
    private JsValue SetFloat32(JsValue thisObject, JsValue[] arguments);
    private JsValue SetFloat64(JsValue thisObject, JsValue[] arguments);
    private JsValue SetInt8(JsValue thisObject, JsValue[] arguments);
    private JsValue SetInt16(JsValue thisObject, JsValue[] arguments);
    private JsValue SetInt32(JsValue thisObject, JsValue[] arguments);
    private JsValue SetUint8(JsValue thisObject, JsValue[] arguments);
    private JsValue SetUint16(JsValue thisObject, JsValue[] arguments);
    private JsValue SetUint32(JsValue thisObject, JsValue[] arguments);
    private JsValue GetViewValue(JsValue view, JsValue requestIndex, JsValue isLittleEndian, TypedArrayElementType type);
    private static DataViewWithBufferWitnessRecord MakeDataViewWithBufferWitnessRecord(JsDataView obj, ArrayBufferOrder order);
    private JsValue SetViewValue(JsValue view, JsValue requestIndex, JsValue isLittleEndian, TypedArrayElementType type, JsValue value);
}
[ExtensionAttribute]
internal static class Jint.Native.Date.ByteExtensions : object {
    private static string AtomSafeCharacters;
    private static string AttributeSpecials;
    private static string DomainSpecials;
    private static string EncodedWordSpecials;
    private static string EncodedPhraseSpecials;
    private static string Specials;
    private static string TokenSpecials;
    private static string Whitespace;
    private static CharType[] table;
    private static ByteExtensions();
    private static void RemoveFlags(string values, CharType bit);
    private static void SetFlags(string values, CharType bit, CharType bitcopy, bool remove);
    [ExtensionAttribute]
public static bool IsWhitespace(byte c);
}
[FlagsAttribute]
internal enum Jint.Native.Date.CharType : Enum {
    public ushort value__;
    public static CharType None;
    public static CharType IsAscii;
    public static CharType IsAtom;
    public static CharType IsAttrChar;
    public static CharType IsBlank;
    public static CharType IsControl;
    public static CharType IsDomainSafe;
    public static CharType IsEncodedPhraseSafe;
    public static CharType IsEncodedWordSafe;
    public static CharType IsQuotedPrintableSafe;
    public static CharType IsSpace;
    public static CharType IsSpecial;
    public static CharType IsTokenSpecial;
    public static CharType IsWhitespace;
    public static CharType IsXDigit;
    public static CharType IsPhraseAtom;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.Date.DateConstructor : Constructor {
    internal static DateTime Epoch;
    private static JsString _functionName;
    private ITimeSystem _timeSystem;
    [CompilerGeneratedAttribute]
private DatePrototype <PrototypeObject>k__BackingField;
    internal DatePrototype PrototypeObject { get; }
    internal DateConstructor(Engine engine, Realm realm, FunctionPrototype functionPrototype, ObjectPrototype objectPrototype);
    private static DateConstructor();
    [CompilerGeneratedAttribute]
internal DatePrototype get_PrototypeObject();
    protected virtual void Initialize();
    private JsValue Parse(JsValue thisObject, JsValue[] arguments);
    private DatePresentation ParseFromString(string date);
    private static JsValue Utc(JsValue thisObject, JsValue[] arguments);
    private JsValue Now(JsValue thisObject, JsValue[] arguments);
    protected internal virtual JsValue Call(JsValue thisObject, JsValue[] arguments);
    public virtual ObjectInstance Construct(JsValue[] arguments, JsValue newTarget);
    private JsDate ConstructUnlikely(JsValue[] arguments, JsValue newTarget);
    public JsDate Construct(DateTimeOffset value);
    public JsDate Construct(DateTime value);
    public JsDate Construct(long time);
    private JsDate Construct(DatePresentation time);
    internal DatePresentation FromDateTime(DateTime dt, bool negative);
}
[ExtensionAttribute]
internal static class Jint.Native.Date.DateExtensions : object {
    [ExtensionAttribute]
public static DateTime ToDateTime(double t);
    [ExtensionAttribute]
internal static DatePresentation TimeClip(double time);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.Date.DatePrototype : Prototype {
    private static double MinYear;
    private static double MaxYear;
    private static double MinMonth;
    private static double MaxMonth;
    private DateConstructor _constructor;
    private ITimeSystem _timeSystem;
    private static int HoursPerDay;
    private static int MinutesPerHour;
    private static int SecondsPerMinute;
    private static int MsPerSecond;
    private static int MsPerMinute;
    private static int MsPerHour;
    private static long MsPerDay;
    private static Int32[] _dayFromMonth;
    private static Int32[] _dayFromMonthLeapYear;
    private static Int32[] kDaysInMonths;
    private static String[] _dayNames;
    private static String[] _monthNames;
    internal DatePrototype(Engine engine, DateConstructor constructor, ObjectPrototype objectPrototype);
    private static DatePrototype();
    protected virtual void Initialize();
    private JsValue ToPrimitive(JsValue thisObject, JsValue[] arguments);
    private JsValue ValueOf(JsValue thisObject, JsValue[] arguments);
    private DatePresentation ThisTimeValue(JsValue thisObject);
    internal JsValue ToString(JsValue thisObject, JsValue[] arg2);
    private JsValue ToDateString(JsValue thisObject, JsValue[] arguments);
    private JsValue ToDateString(DatePresentation tv);
    private JsValue ToTimeString(JsValue thisObject, JsValue[] arguments);
    private JsValue ToLocaleString(JsValue thisObject, JsValue[] arguments);
    private JsValue ToLocaleDateString(JsValue thisObject, JsValue[] arguments);
    private JsValue ToLocaleTimeString(JsValue thisObject, JsValue[] arguments);
    private JsValue GetTime(JsValue thisObject, JsValue[] arguments);
    private JsValue GetFullYear(JsValue thisObject, JsValue[] arguments);
    private JsValue GetYear(JsValue thisObject, JsValue[] arguments);
    private JsValue GetUTCFullYear(JsValue thisObject, JsValue[] arguments);
    private JsValue GetMonth(JsValue thisObject, JsValue[] arguments);
    private JsValue GetUTCMonth(JsValue thisObject, JsValue[] arguments);
    private JsValue GetDate(JsValue thisObject, JsValue[] arguments);
    private JsValue GetUTCDate(JsValue thisObject, JsValue[] arguments);
    private JsValue GetDay(JsValue thisObject, JsValue[] arguments);
    private JsValue GetUTCDay(JsValue thisObject, JsValue[] arguments);
    private JsValue GetHours(JsValue thisObject, JsValue[] arguments);
    private JsValue GetUTCHours(JsValue thisObject, JsValue[] arguments);
    private JsValue GetMinutes(JsValue thisObject, JsValue[] arguments);
    private JsValue GetUTCMinutes(JsValue thisObject, JsValue[] arguments);
    private JsValue GetSeconds(JsValue thisObject, JsValue[] arguments);
    private JsValue GetUTCSeconds(JsValue thisObject, JsValue[] arguments);
    private JsValue GetMilliseconds(JsValue thisObject, JsValue[] arguments);
    private JsValue GetUTCMilliseconds(JsValue thisObject, JsValue[] arguments);
    private JsValue GetTimezoneOffset(JsValue thisObject, JsValue[] arguments);
    private JsValue SetTime(JsValue thisObject, JsValue[] arguments);
    private JsValue SetMilliseconds(JsValue thisObject, JsValue[] arguments);
    private JsValue SetUTCMilliseconds(JsValue thisObject, JsValue[] arguments);
    private JsValue SetSeconds(JsValue thisObject, JsValue[] arguments);
    private JsValue SetUTCSeconds(JsValue thisObject, JsValue[] arguments);
    private JsValue SetMinutes(JsValue thisObject, JsValue[] arguments);
    private JsValue SetUTCMinutes(JsValue thisObject, JsValue[] arguments);
    private JsValue SetHours(JsValue thisObject, JsValue[] arguments);
    private JsValue SetUTCHours(JsValue thisObject, JsValue[] arguments);
    private JsValue SetDate(JsValue thisObject, JsValue[] arguments);
    private JsValue SetUTCDate(JsValue thisObject, JsValue[] arguments);
    private JsValue SetMonth(JsValue thisObject, JsValue[] arguments);
    private JsValue SetUTCMonth(JsValue thisObject, JsValue[] arguments);
    private JsValue SetFullYear(JsValue thisObject, JsValue[] arguments);
    private JsValue SetYear(JsValue thisObject, JsValue[] arguments);
    private JsValue SetUTCFullYear(JsValue thisObject, JsValue[] arguments);
    private JsValue ToUtcString(JsValue thisObject, JsValue[] arguments);
    private JsValue ToISOString(JsValue thisObject, JsValue[] arguments);
    private JsValue ToJson(JsValue thisObject, JsValue[] arguments);
    private static int Day(DatePresentation t);
    private static long TimeWithinDay(DatePresentation t);
    private static int DaysInYear(double y);
    private static int DayFromYear(DatePresentation y);
    private static long TimeFromYear(DatePresentation y);
    private static int YearFromTime(DatePresentation t);
    private static int InLeapYear(DatePresentation t);
    private static int MonthFromTime(DatePresentation t);
    private static int DayWithinYear(DatePresentation t);
    private static int DateFromTime(DatePresentation t);
    private static int WeekDay(DatePresentation t);
    private DateTime ToLocalTime(DatePresentation t);
    private DatePresentation LocalTime(DatePresentation t);
    internal DatePresentation Utc(DatePresentation t);
    private static int HourFromTime(DatePresentation t);
    private static int MinFromTime(DatePresentation t);
    private static int SecFromTime(DatePresentation t);
    private static int MsFromTime(DatePresentation t);
    internal static double MakeTime(double hour, double min, double sec, double ms);
    internal static double MakeDay(double year, double month, double date);
    internal static DatePresentation MakeDate(double day, double time);
    private static bool IsFinite(double value);
    private static bool AreFinite(double value1, double value2);
    private static bool IsFinite(DatePresentation value);
    private static bool AreFinite(double value1, double value2, double value3);
    private static bool AreFinite(double value1, double value2, double value3, double value4);
    private static Date YearMonthDayFromTime(DatePresentation t);
    private static Date YearMonthDayFromDays(long days);
    private static string DateString(DatePresentation tv);
    private static string TimeString(DatePresentation t);
    private string TimeZoneString(DatePresentation tv);
    public virtual string ToString();
}
[IsReadOnlyAttribute]
internal class Jint.Native.Date.DateToken : ValueType {
    [CompilerGeneratedAttribute]
private DateTokenFlags <Flags>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    public DateTokenFlags Flags { get; }
    public int Start { get; }
    public int Length { get; }
    public bool IsNumeric { get; }
    public bool IsWeekday { get; }
    public bool IsMonth { get; }
    public bool IsTimeOfDay { get; }
    public bool IsNumericZone { get; }
    public bool IsAlphaZone { get; }
    public bool IsTimeZone { get; }
    public DateToken(DateTokenFlags flags, int start, int length);
    [CompilerGeneratedAttribute]
public DateTokenFlags get_Flags();
    [CompilerGeneratedAttribute]
public int get_Start();
    [CompilerGeneratedAttribute]
public int get_Length();
    public bool get_IsNumeric();
    public bool get_IsWeekday();
    public bool get_IsMonth();
    public bool get_IsTimeOfDay();
    public bool get_IsNumericZone();
    public bool get_IsAlphaZone();
    public bool get_IsTimeZone();
}
[FlagsAttribute]
internal enum Jint.Native.Date.DateTokenFlags : Enum {
    public byte value__;
    public static DateTokenFlags None;
    public static DateTokenFlags NonNumeric;
    public static DateTokenFlags NonWeekday;
    public static DateTokenFlags NonMonth;
    public static DateTokenFlags NonTime;
    public static DateTokenFlags NonAlphaZone;
    public static DateTokenFlags NonNumericZone;
    public static DateTokenFlags HasColon;
    public static DateTokenFlags HasSign;
}
internal static class Jint.Native.Date.DateUtils : object {
    private static string MonthCharacters;
    private static string WeekdayCharacters;
    private static string AlphaZoneCharacters;
    private static string NumericZoneCharacters;
    private static string NumericCharacters;
    private static string TimeCharacters;
    private static String[] Months;
    private static String[] WeekDays;
    private static Dictionary`2<string, int> timezones;
    private static DateTokenFlags[] datetok;
    private static DateUtils();
    private static bool TryGetWeekday(DateToken& token, Byte[] text, DayOfWeek& weekday);
    private static bool TryGetDayOfMonth(DateToken& token, Byte[] text, Int32& day);
    private static bool TryGetMonth(DateToken& token, Byte[] text, Int32& month);
    private static bool TryGetYear(DateToken& token, Byte[] text, Int32& year);
    private static bool TryGetTimeOfDay(DateToken& token, Byte[] text, Int32& hour, Int32& minute, Int32& second);
    private static bool TryGetTimeZone(DateToken& token, Byte[] text, Int32& tzone);
    private static bool IsTokenDelimeter(byte c);
    [IteratorStateMachineAttribute("Jint.Native.Date.DateUtils/<TokenizeDate>d__18")]
private static IEnumerable`1<DateToken> TokenizeDate(Byte[] text, int startIndex, int length);
    private static bool TryParseStandardDateFormat(List`1<DateToken> tokens, Byte[] text, DateTimeOffset& date);
    private static bool TryParseUnknownDateFormat(IList`1<DateToken> tokens, Byte[] text, DateTimeOffset& date);
    public static bool TryParse(Byte[] buffer, int startIndex, int length, DateTimeOffset& date);
    public static bool TryParse(string text, DateTimeOffset& date);
}
internal static class Jint.Native.Date.ParseUtils : object {
    public static bool TryParseInt32(Byte[] text, Int32& index, int endIndex, Int32& value);
    public static bool SkipWhiteSpace(Byte[] text, Int32& index, int endIndex);
    public static bool SkipComment(Byte[] text, Int32& index, int endIndex);
    public static bool SkipCommentsAndWhiteSpace(Byte[] text, Int32& index, int endIndex, bool throwOnError);
}
[FlagsAttribute]
internal enum Jint.Native.DateFlags : Enum {
    public byte value__;
    public static DateFlags None;
    public static DateFlags NaN;
    public static DateFlags Infinity;
    public static DateFlags DateTimeMinValue;
    public static DateFlags DateTimeMaxValue;
}
[IsReadOnlyAttribute]
internal class Jint.Native.DatePresentation : ValueType {
    [CompilerGeneratedAttribute]
private long <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private DateFlags <Flags>k__BackingField;
    public static DatePresentation NaN;
    public static DatePresentation MinValue;
    public static DatePresentation MaxValue;
    public long Value { get; public set; }
    public DateFlags Flags { get; public set; }
    public bool DateTimeRangeValid { get; }
    public bool IsNaN { get; }
    public bool IsInfinity { get; }
    public bool IsFinite { get; }
    public DatePresentation(long Value, DateFlags Flags);
    private static DatePresentation();
    [CompilerGeneratedAttribute]
public long get_Value();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Value(long value);
    [CompilerGeneratedAttribute]
public DateFlags get_Flags();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Flags(DateFlags value);
    public bool get_DateTimeRangeValid();
    public bool get_IsNaN();
    public bool get_IsInfinity();
    public bool get_IsFinite();
    public DateTime ToDateTime();
    public static DatePresentation op_Implicit(long value);
    public static DatePresentation op_Implicit(double value);
    public static DatePresentation op_Addition(DatePresentation a, DatePresentation b);
    public static DatePresentation op_Subtraction(DatePresentation a, DatePresentation b);
    public static DatePresentation op_UnaryPlus(DatePresentation a);
    public static DatePresentation op_UnaryNegation(DatePresentation a);
    internal DatePresentation TimeClip();
    [NullableContextAttribute("1")]
internal JsNumber ToJsValue();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(DatePresentation left, DatePresentation right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(DatePresentation left, DatePresentation right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(DatePresentation other);
    [CompilerGeneratedAttribute]
public void Deconstruct(Int64& Value, DateFlags& Flags);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Jint.Native.Error.ErrorConstructor : Constructor {
    private Func`2<Intrinsics, ObjectInstance> _intrinsicDefaultProto;
    [CompilerGeneratedAttribute]
private ErrorPrototype <PrototypeObject>k__BackingField;
    internal ErrorPrototype PrototypeObject { get; }
    internal ErrorConstructor(Engine engine, Realm realm, ObjectInstance functionPrototype, ObjectInstance objectPrototype, JsString name, Func`2<Intrinsics, ObjectInstance> intrinsicDefaultProto);
    [CompilerGeneratedAttribute]
internal ErrorPrototype get_PrototypeObject();
    protected internal virtual JsValue Call(JsValue thisObject, JsValue[] arguments);
    public ObjectInstance Construct(string message);
    public virtual ObjectInstance Construct(JsValue[] arguments, JsValue newTarget);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private JsValue <Construct>g__BuildStackString|7_1();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Jint.Native.Error.ErrorInstance : ObjectInstance {
    private protected ErrorInstance(Engine engine, ObjectClass objectClass);
    internal void InstallErrorCause(JsValue options);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.Error.ErrorPrototype : ErrorInstance {
    private JsString _name;
    private Realm _realm;
    private ErrorConstructor _constructor;
    internal ErrorPrototype(Engine engine, Realm realm, ErrorConstructor constructor, ObjectInstance prototype, JsString name);
    protected virtual void Initialize();
    public JsValue ToString(JsValue thisObject, JsValue[] arguments);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.FinalizationRegistry.Cell : object {
    [CompilerGeneratedAttribute]
private JsValue <WeakRefTarget>k__BackingField;
    [CompilerGeneratedAttribute]
private JsValue <HeldValue>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private JsValue <UnregisterToken>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public JsValue WeakRefTarget { get; public set; }
    public JsValue HeldValue { get; public set; }
    [NullableAttribute("2")]
public JsValue UnregisterToken { get; public set; }
    public Cell(JsValue WeakRefTarget, JsValue HeldValue, JsValue UnregisterToken);
    [CompilerGeneratedAttribute]
private Cell(Cell original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public JsValue get_WeakRefTarget();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_WeakRefTarget(JsValue value);
    [CompilerGeneratedAttribute]
public JsValue get_HeldValue();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_HeldValue(JsValue value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public JsValue get_UnregisterToken();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_UnregisterToken(JsValue value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(Cell left, Cell right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(Cell left, Cell right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(Cell other);
    [CompilerGeneratedAttribute]
public Cell <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(JsValue& WeakRefTarget, JsValue& HeldValue, JsValue& UnregisterToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.FinalizationRegistry.FinalizationRegistryConstructor : Constructor {
    private static JsString _functionName;
    [CompilerGeneratedAttribute]
private FinalizationRegistryPrototype <PrototypeObject>k__BackingField;
    public FinalizationRegistryPrototype PrototypeObject { get; }
    public FinalizationRegistryConstructor(Engine engine, Realm realm, FunctionConstructor functionConstructor, ObjectPrototype objectPrototype);
    private static FinalizationRegistryConstructor();
    [CompilerGeneratedAttribute]
public FinalizationRegistryPrototype get_PrototypeObject();
    protected internal virtual JsValue Call(JsValue thisObject, JsValue[] arguments);
    public virtual ObjectInstance Construct(JsValue[] arguments, JsValue newTarget);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.FinalizationRegistry.FinalizationRegistryInstance : ObjectInstance {
    private Realm _realm;
    private JobCallback _callable;
    private ConditionalWeakTable`2<JsValue, List`1<Observer>> _cells;
    private Dictionary`2<JsValue, List`1<Observer>> _byToken;
    public FinalizationRegistryInstance(Engine engine, Realm realm, ICallable cleanupCallback);
    [NullableContextAttribute("2")]
public static void CleanupFinalizationRegistry(ICallable callback);
    public void AddCell(Cell cell);
    public JsValue Remove(JsValue unregisterToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.FinalizationRegistry.FinalizationRegistryPrototype : Prototype {
    private FinalizationRegistryConstructor _constructor;
    public FinalizationRegistryPrototype(Engine engine, Realm realm, FinalizationRegistryConstructor constructor, ObjectPrototype objectPrototype);
    protected virtual void Initialize();
    private JsValue Register(JsValue thisObject, JsValue[] arguments);
    private JsValue Unregister(JsValue thisObject, JsValue[] arguments);
    private JsValue CleanupSome(JsValue thisObject, JsValue[] arguments);
    private FinalizationRegistryInstance AssertFinalizationRegistryInstance(JsValue thisObject);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Jint.Native.Function.BindFunction : ObjectInstance {
    private Realm _realm;
    [CompilerGeneratedAttribute]
private JsValue <BoundTargetFunction>k__BackingField;
    [CompilerGeneratedAttribute]
private JsValue <BoundThis>k__BackingField;
    [CompilerGeneratedAttribute]
private JsValue[] <BoundArguments>k__BackingField;
    public JsValue BoundTargetFunction { get; }
    public JsValue BoundThis { get; }
    public JsValue[] BoundArguments { get; }
    internal bool IsConstructor { get; }
    public BindFunction(Engine engine, Realm realm, ObjectInstance proto, ObjectInstance targetFunction, JsValue boundThis, JsValue[] boundArgs);
    [CompilerGeneratedAttribute]
public JsValue get_BoundTargetFunction();
    [CompilerGeneratedAttribute]
public JsValue get_BoundThis();
    [CompilerGeneratedAttribute]
public JsValue[] get_BoundArguments();
    private sealed virtual override JsValue Jint.Native.ICallable.Call(JsValue thisObject, JsValue[] arguments);
    private sealed virtual override ObjectInstance Jint.Native.IConstructor.Construct(JsValue[] arguments, JsValue newTarget);
    internal virtual bool OrdinaryHasInstance(JsValue v);
    private JsValue[] CreateArguments(JsValue[] arguments);
    internal virtual bool get_IsConstructor();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.Function.ClassDefinition : object {
    private static MethodDefinition _superConstructor;
    internal static CallExpression _defaultSuperCall;
    internal static MethodDefinition _emptyConstructor;
    [NullableAttribute("2")]
internal string _className;
    [NullableAttribute("2")]
private Expression _superClass;
    private ClassBody _body;
    private static ClassDefinition();
    [NullableContextAttribute("2")]
public ClassDefinition(string className, Expression superClass, ClassBody body);
    public JsValue BuildConstructor(EvaluationContext context, Environment env);
    private static object ClassElementEvaluation(Engine engine, ObjectInstance target, IClassElement e);
    private static ClassFieldDefinition ClassFieldDefinitionEvaluation(Engine engine, ObjectInstance homeObject, PropertyDefinition fieldDefinition);
    private static ClassStaticBlockDefinition ClassStaticBlockDefinitionEvaluation(Engine engine, ObjectInstance homeObject, StaticBlock o);
    internal static PrivateElement MethodDefinitionEvaluation(Engine engine, ObjectInstance obj, T method, bool enumerable);
    private static PrivateElement DefineMethodProperty(ObjectInstance homeObject, JsValue key, ScriptFunction closure, bool enumerable);
    [CompilerGeneratedAttribute]
internal static MethodDefinition <.cctor>g__CreateConstructorMethodDefinition|6_0(Parser parser, string source);
}
internal enum Jint.Native.Function.ConstructorKind : Enum {
    public int value__;
    public static ConstructorKind Base;
    public static ConstructorKind Derived;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Jint.Native.Function.EvalFunction : Function {
    private static JsString _functionName;
    internal EvalFunction(Engine engine, Realm realm, FunctionPrototype functionPrototype);
    private static EvalFunction();
    protected internal virtual JsValue Call(JsValue thisObject, JsValue[] arguments);
    internal JsValue PerformEval(JsValue x, Realm callerRealm, bool strictCaller, bool direct);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{ToString(),nq}")]
public abstract class Jint.Native.Function.Function : ObjectInstance {
    [NullableAttribute("2")]
protected PropertyDescriptor _prototypeDescriptor;
    [NullableAttribute("2")]
protected internal PropertyDescriptor _length;
    [NullableAttribute("2")]
internal PropertyDescriptor _nameDescriptor;
    [NullableAttribute("2")]
internal Environment _environment;
    [NullableAttribute("2")]
internal JintFunctionDefinition _functionDefinition;
    internal FunctionThisMode _thisMode;
    internal JsValue _homeObject;
    internal ConstructorKind _constructorKind;
    internal Realm _realm;
    [NullableAttribute("2")]
internal PrivateEnvironment _privateEnvironment;
    [NullableAttribute("2")]
private IScriptOrModule _scriptOrModule;
    private static Char[] _functionNameTrimStartChars;
    private static JsString _functionNameAnonymous;
    [NullableAttribute("2")]
public IFunction FunctionDeclaration { get; }
    internal bool IsCallable { get; }
    public bool Strict { get; }
    internal bool IsConstructor { get; }
    protected Function(Engine engine, Realm realm, JsString name);
    internal Function(Engine engine, Realm realm, JintFunctionDefinition function, Environment env, FunctionThisMode thisMode);
    internal Function(Engine engine, Realm realm, JsString name, FunctionThisMode thisMode, ObjectClass objectClass);
    private static Function();
    [NullableContextAttribute("2")]
public IFunction get_FunctionDeclaration();
    internal virtual bool get_IsCallable();
    private sealed virtual override JsValue Jint.Native.ICallable.Call(JsValue thisObject, JsValue[] arguments);
    protected internal abstract virtual JsValue Call(JsValue thisObject, JsValue[] arguments);
    public bool get_Strict();
    internal virtual bool get_IsConstructor();
    [IteratorStateMachineAttribute("Jint.Native.Function.Function/<GetOwnProperties>d__24")]
public virtual IEnumerable`1<KeyValuePair`2<JsValue, PropertyDescriptor>> GetOwnProperties();
    [IteratorStateMachineAttribute("Jint.Native.Function.Function/<GetInitialOwnStringPropertyKeys>d__25")]
internal sealed virtual IEnumerable`1<JsValue> GetInitialOwnStringPropertyKeys();
    public virtual PropertyDescriptor GetOwnProperty(JsValue property);
    protected internal virtual void SetOwnProperty(JsValue property, PropertyDescriptor desc);
    public virtual void RemoveOwnProperty(JsValue property);
    internal void SetFunctionName(JsValue name, string prefix, bool force);
    internal T OrdinaryCreateFromConstructor(JsValue constructor, Func`2<Intrinsics, ObjectInstance> intrinsicDefaultProto, Func`4<Engine, Realm, TState, T> objectCreator, TState state);
    internal ObjectInstance GetPrototypeFromConstructor(JsValue constructor, Func`2<Intrinsics, ObjectInstance> intrinsicDefaultProto);
    internal Realm GetFunctionRealm(JsValue obj);
    internal void MakeMethod(ObjectInstance homeObject);
    internal void OrdinaryCallBindThis(ExecutionContext& calleeContext, JsValue thisArgument);
    internal ExecutionContext& modreq(System.Runtime.InteropServices.InAttribute) PrepareForOrdinaryCall(JsValue newTarget);
    [NullableContextAttribute("2")]
internal void MakeConstructor(bool writableProperty, ObjectInstance prototype);
    internal void SetFunctionLength(JsNumber length);
    public virtual string ToString();
    internal Function CreateDynamicFunction(ObjectInstance constructor, JsValue newTarget, FunctionKind kind, JsValue[] arguments);
    internal ScriptFunction OrdinaryFunctionCreate(ObjectInstance functionPrototype, JintFunctionDefinition function, FunctionThisMode thisMode, Environment scope, PrivateEnvironment privateScope);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<KeyValuePair`2<JsValue, PropertyDescriptor>> <>n__0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Jint.Native.Function.FunctionConstructor : Constructor {
    private static JsString _functionName;
    [CompilerGeneratedAttribute]
private FunctionPrototype <PrototypeObject>k__BackingField;
    internal FunctionPrototype PrototypeObject { get; }
    internal FunctionConstructor(Engine engine, Realm realm, ObjectPrototype objectPrototype);
    private static FunctionConstructor();
    [CompilerGeneratedAttribute]
internal FunctionPrototype get_PrototypeObject();
    protected internal virtual JsValue Call(JsValue thisObject, JsValue[] arguments);
    public virtual ObjectInstance Construct(JsValue[] arguments, JsValue newTarget);
    internal Function InstantiateFunctionObject(JintFunctionDefinition functionDeclaration, Environment scope, PrivateEnvironment privateEnv);
    private ScriptFunction InstantiateAsyncFunctionObject(JintFunctionDefinition functionDeclaration, Environment env, PrivateEnvironment privateEnv);
    private ScriptFunction InstantiateOrdinaryFunctionObject(JintFunctionDefinition functionDeclaration, Environment env, PrivateEnvironment privateEnv);
    private ScriptFunction InstantiateGeneratorFunctionObject(JintFunctionDefinition functionDeclaration, Environment scope, PrivateEnvironment privateScope);
}
internal enum Jint.Native.Function.FunctionKind : Enum {
    public int value__;
    public static FunctionKind Normal;
    public static FunctionKind Async;
    public static FunctionKind Generator;
    public static FunctionKind AsyncGenerator;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.Function.FunctionPrototype : Function {
    internal FunctionPrototype(Engine engine, Realm realm, ObjectPrototype objectPrototype);
    protected virtual void Initialize();
    private static JsValue HasInstance(JsValue thisObject, JsValue[] arguments);
    private JsValue Bind(JsValue thisObject, JsValue[] arguments);
    private BindFunction BoundFunctionCreate(ObjectInstance targetFunction, JsValue boundThis, JsValue[] boundArgs);
    private JsValue ToString(JsValue thisObject, JsValue[] arguments);
    private JsValue Apply(JsValue thisObject, JsValue[] arguments);
    internal static JsValue[] CreateListFromArrayLike(Realm realm, JsValue argArray, Nullable`1<Types> elementTypes);
    private JsValue CallImpl(JsValue thisObject, JsValue[] arguments);
    protected internal virtual JsValue Call(JsValue thisObject, JsValue[] arguments);
}
internal enum Jint.Native.Function.FunctionThisMode : Enum {
    public int value__;
    public static FunctionThisMode Lexical;
    public static FunctionThisMode Strict;
    public static FunctionThisMode Global;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Jint.Native.Function.ScriptFunction : Function {
    internal bool _isClassConstructor;
    [NullableAttribute("2")]
internal JsValue _classFieldInitializerName;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal List`1<PrivateElement> _privateMethods;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal List`1<ClassFieldDefinition> _fields;
    internal bool IsConstructor { get; }
    public ScriptFunction(Engine engine, IFunction functionDeclaration, bool strict, ObjectInstance proto);
    internal ScriptFunction(Engine engine, JintFunctionDefinition function, Environment env, FunctionThisMode thisMode, ObjectInstance proto);
    protected internal virtual JsValue Call(JsValue thisObject, JsValue[] arguments);
    internal virtual bool get_IsConstructor();
    private sealed virtual override ObjectInstance Jint.Native.IConstructor.Construct(JsValue[] arguments, JsValue newTarget);
    internal void MakeClassConstructor();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.Function.ThrowTypeError : Function {
    public ThrowTypeError(Engine engine, Realm realm);
    protected internal virtual JsValue Call(JsValue thisObject, JsValue[] arguments);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.Generator.AsyncGeneratorFunctionConstructor : Constructor {
    private static JsString _functionName;
    [CompilerGeneratedAttribute]
private AsyncGeneratorFunctionPrototype <PrototypeObject>k__BackingField;
    public AsyncGeneratorFunctionPrototype PrototypeObject { get; }
    internal AsyncGeneratorFunctionConstructor(Engine engine, Realm realm, AsyncFunctionPrototype prototype, IteratorPrototype iteratorPrototype);
    private static AsyncGeneratorFunctionConstructor();
    [CompilerGeneratedAttribute]
public AsyncGeneratorFunctionPrototype get_PrototypeObject();
    protected internal virtual JsValue Call(JsValue thisObject, JsValue[] arguments);
    public virtual ObjectInstance Construct(JsValue[] arguments, JsValue newTarget);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.Generator.AsyncGeneratorFunctionPrototype : Prototype {
    [NullableAttribute("2")]
private AsyncGeneratorFunctionConstructor _constructor;
    [CompilerGeneratedAttribute]
private AsyncGeneratorPrototype <PrototypeObject>k__BackingField;
    public AsyncGeneratorPrototype PrototypeObject { get; }
    internal AsyncGeneratorFunctionPrototype(Engine engine, AsyncGeneratorFunctionConstructor constructor, AsyncFunctionPrototype prototype, IteratorPrototype iteratorPrototype);
    [CompilerGeneratedAttribute]
public AsyncGeneratorPrototype get_PrototypeObject();
    protected virtual void Initialize();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.Generator.AsyncGeneratorPrototype : ObjectInstance {
    private AsyncGeneratorFunctionPrototype _constructor;
    internal AsyncGeneratorPrototype(Engine engine, AsyncGeneratorFunctionPrototype constructor, IteratorPrototype iteratorPrototype);
    protected virtual void Initialize();
    private ObjectInstance Next(JsValue thisObject, JsValue[] arguments);
    private JsValue Return(JsValue thisObject, JsValue[] arguments);
    private JsValue Throw(JsValue thisObject, JsValue[] arguments);
    private GeneratorInstance AssertGeneratorInstance(JsValue thisObj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.Generator.GeneratorFunctionConstructor : Constructor {
    private static JsString _functionName;
    [CompilerGeneratedAttribute]
private GeneratorFunctionPrototype <PrototypeObject>k__BackingField;
    public GeneratorFunctionPrototype PrototypeObject { get; }
    internal GeneratorFunctionConstructor(Engine engine, Realm realm, FunctionPrototype prototype, IteratorPrototype iteratorPrototype);
    private static GeneratorFunctionConstructor();
    [CompilerGeneratedAttribute]
public GeneratorFunctionPrototype get_PrototypeObject();
    protected internal virtual JsValue Call(JsValue thisObject, JsValue[] arguments);
    public virtual ObjectInstance Construct(JsValue[] arguments, JsValue newTarget);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.Generator.GeneratorFunctionPrototype : Prototype {
    [NullableAttribute("2")]
private GeneratorFunctionConstructor _constructor;
    [CompilerGeneratedAttribute]
private GeneratorPrototype <PrototypeObject>k__BackingField;
    public GeneratorPrototype PrototypeObject { get; }
    internal GeneratorFunctionPrototype(Engine engine, GeneratorFunctionConstructor constructor, FunctionPrototype prototype, IteratorPrototype iteratorPrototype);
    [CompilerGeneratedAttribute]
public GeneratorPrototype get_PrototypeObject();
    protected virtual void Initialize();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.Generator.GeneratorInstance : ObjectInstance {
    internal GeneratorState _generatorState;
    private ExecutionContext _generatorContext;
    [NullableAttribute("2")]
private JsValue _generatorBrand;
    private JintStatementList _generatorBody;
    [NullableAttribute("2")]
public JsValue _nextValue;
    [NullableAttribute("2")]
public JsValue _error;
    public GeneratorInstance(Engine engine);
    public JsValue GeneratorStart(JintStatementList generatorBody);
    [NullableContextAttribute("2")]
public ObjectInstance GeneratorResume(JsValue value, JsValue generatorBrand);
    public JsValue GeneratorResumeAbrupt(Completion& abruptCompletion, JsValue generatorBrand);
    private ObjectInstance ResumeExecution(ExecutionContext& genContext, EvaluationContext context);
    [NullableContextAttribute("2")]
private GeneratorState GeneratorValidate(JsValue generatorBrand);
}
internal enum Jint.Native.Generator.GeneratorKind : Enum {
    public int value__;
    public static GeneratorKind NonGenerator;
    public static GeneratorKind Sync;
    public static GeneratorKind Async;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.Generator.GeneratorPrototype : ObjectInstance {
    private GeneratorFunctionPrototype _constructor;
    internal GeneratorPrototype(Engine engine, GeneratorFunctionPrototype constructor, IteratorPrototype iteratorPrototype);
    protected virtual void Initialize();
    private ObjectInstance Next(JsValue thisObject, JsValue[] arguments);
    private JsValue Return(JsValue thisObject, JsValue[] arguments);
    private JsValue Throw(JsValue thisObject, JsValue[] arguments);
    private GeneratorInstance AssertGeneratorInstance(JsValue thisObj);
}
internal enum Jint.Native.Generator.GeneratorState : Enum {
    public int value__;
    public static GeneratorState Undefined;
    public static GeneratorState SuspendedStart;
    public static GeneratorState SuspendedYield;
    public static GeneratorState Executing;
    public static GeneratorState Completed;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Jint.Native.Global.GlobalObject : ObjectInstance {
    private Realm _realm;
    private StringBuilder _stringBuilder;
    private static string UriReservedString;
    private static string UriUnescapedString;
    private static SearchValues`1<char> UriUnescaped;
    private static SearchValues`1<char> UnescapedUriSet;
    private static SearchValues`1<char> ReservedUriSet;
    private static SearchValues`1<char> EscapeAllowList;
    private static Key propertyAggregateError;
    private static Key propertyArray;
    private static Key propertyArrayBuffer;
    private static Key propertyAtomics;
    private static Key propertyBigInt;
    private static Key propertyBigInt64Array;
    private static Key propertyBigUint64Array;
    private static Key propertyBoolean;
    private static Key propertyDataView;
    private static Key propertyDate;
    private static Key propertyError;
    private static Key propertyEvalError;
    private static Key propertyFinalizationRegistry;
    private static Key propertyFloat16Array;
    private static Key propertyFloat32Array;
    private static Key propertyFloat64Array;
    private static Key propertyFunction;
    private static Key propertyGeneratorFunction;
    private static Key propertyInt16Array;
    private static Key propertyInt32Array;
    private static Key propertyInt8Array;
    private static Key propertyJSON;
    private static Key propertyMap;
    private static Key propertyMath;
    private static Key propertyNumber;
    private static Key propertyObject;
    private static Key propertyPromise;
    private static Key propertyProxy;
    private static Key propertyRangeError;
    private static Key propertyReferenceError;
    private static Key propertyReflect;
    private static Key propertyRegExp;
    private static Key propertySet;
    private static Key propertyShadowRealm;
    private static Key propertySharedArrayBuffer;
    private static Key propertyString;
    private static Key propertySymbol;
    private static Key propertySyntaxError;
    private static Key propertyTypeError;
    private static Key propertyTypedArray;
    private static Key propertyURIError;
    private static Key propertyUint16Array;
    private static Key propertyUint32Array;
    private static Key propertyUint8Array;
    private static Key propertyUint8ClampedArray;
    private static Key propertyWeakMap;
    private static Key propertyWeakRef;
    private static Key propertyWeakSet;
    private static Key propertyNaN;
    private static Key propertyInfinity;
    private static Key propertyUndefined;
    private static Key propertyParseInt;
    private static Key propertyParseFloat;
    private static Key propertyIsNaN;
    private static Key propertyIsFinite;
    private static Key propertyDecodeURI;
    private static Key propertyDecodeURIComponent;
    private static Key propertyEncodeURI;
    private static Key propertyEncodeURIComponent;
    private static Key propertyEscape;
    private static Key propertyUnescape;
    private static Key propertyGlobalThis;
    private static Key propertyEval;
    private static Key propertyToString;
    private static PropertyDescriptor _propertyDescriptorNan;
    private static PropertyDescriptor _propertyDescriptorPositiveInfinity;
    private static PropertyDescriptor _propertyDescriptorUndefined;
    internal GlobalObject(Engine engine, Realm realm);
    private static GlobalObject();
    private JsValue ToStringString(JsValue thisObject, JsValue[] arguments);
    internal static JsValue ParseInt(JsValue thisObject, JsValue[] arguments);
    internal static JsValue ParseFloat(JsValue thisObject, JsValue[] arguments);
    private static JsValue IsNaN(JsValue thisObject, JsValue[] arguments);
    private static JsValue IsFinite(JsValue thisObject, JsValue[] arguments);
    private static bool IsValidHexaChar(char c);
    private JsValue EncodeUri(JsValue thisObject, JsValue[] arguments);
    private JsValue EncodeUriComponent(JsValue thisObject, JsValue[] arguments);
    private JsValue Encode(string uriString, SearchValues`1<char> unescapedUriSet);
    private JsValue DecodeUri(JsValue thisObject, JsValue[] arguments);
    private JsValue DecodeUriComponent(JsValue thisObject, JsValue[] arguments);
    private JsValue Decode(string uriString, SearchValues`1<char> reservedSet);
    [NullableContextAttribute("0")]
private static byte StringToIntBase16(ReadOnlySpan`1<char> s);
    private static bool IsDigit(char c, int radix, Int32& result);
    private JsValue Escape(JsValue thisObject, JsValue[] arguments);
    private JsValue Unescape(JsValue thisObject, JsValue[] arguments);
    internal bool HasProperty(Key property);
    private bool DefineOwnProperty(Key property, PropertyDescriptor desc);
    internal PropertyDescriptor GetOwnProperty(Key property);
    internal bool SetFromMutableBinding(Key property, JsValue value, bool strict);
    protected virtual void Initialize();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Jint.Native.GroupByHelper : object {
    internal static Dictionary`2<JsValue, JsArray> GroupBy(Engine engine, Realm realm, JsValue items, JsValue callbackfn, bool mapMode);
}
[NullableContextAttribute("1")]
internal interface Jint.Native.ICallable {
    public abstract virtual JsValue Call(JsValue thisObject, JsValue[] arguments);
}
[NullableContextAttribute("1")]
internal interface Jint.Native.IConstructor {
    public abstract virtual ObjectInstance Construct(JsValue[] arguments, JsValue newTarget);
}
[NullableContextAttribute("1")]
public interface Jint.Native.IJsPrimitive {
    public Types Type { get; }
    public JsValue PrimitiveValue { get; }
    public abstract virtual Types get_Type();
    public abstract virtual JsValue get_PrimitiveValue();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.Intl.CollatorConstructor : Constructor {
    private static JsString _functionName;
    [CompilerGeneratedAttribute]
private CollatorPrototype <PrototypeObject>k__BackingField;
    public CollatorPrototype PrototypeObject { get; }
    public CollatorConstructor(Engine engine, Realm realm, FunctionPrototype functionPrototype, ObjectPrototype objectPrototype);
    private static CollatorConstructor();
    [CompilerGeneratedAttribute]
public CollatorPrototype get_PrototypeObject();
    public virtual ObjectInstance Construct(JsValue[] arguments, JsValue newTarget);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.Intl.CollatorPrototype : Prototype {
    private CollatorConstructor _constructor;
    public CollatorPrototype(Engine engine, Realm realm, CollatorConstructor constructor, ObjectPrototype objectPrototype);
    protected virtual void Initialize();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.Intl.DateTimeFormatConstructor : Constructor {
    private static JsString _functionName;
    [CompilerGeneratedAttribute]
private DateTimeFormatPrototype <PrototypeObject>k__BackingField;
    public DateTimeFormatPrototype PrototypeObject { get; }
    public DateTimeFormatConstructor(Engine engine, Realm realm, FunctionPrototype functionPrototype, ObjectPrototype objectPrototype);
    private static DateTimeFormatConstructor();
    [CompilerGeneratedAttribute]
public DateTimeFormatPrototype get_PrototypeObject();
    public virtual ObjectInstance Construct(JsValue[] arguments, JsValue newTarget);
    private static void InitializeDateTimeFormat(JsObject dateTimeFormat, JsValue locales, JsValue options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.Intl.DateTimeFormatPrototype : Prototype {
    private DateTimeFormatConstructor _constructor;
    public DateTimeFormatPrototype(Engine engine, Realm realm, DateTimeFormatConstructor constructor, ObjectPrototype objectPrototype);
    protected virtual void Initialize();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.Intl.DisplayNamesConstructor : Constructor {
    private static JsString _functionName;
    [CompilerGeneratedAttribute]
private DisplayNamesPrototype <PrototypeObject>k__BackingField;
    public DisplayNamesPrototype PrototypeObject { get; }
    public DisplayNamesConstructor(Engine engine, Realm realm, FunctionPrototype functionPrototype, ObjectPrototype objectPrototype);
    private static DisplayNamesConstructor();
    [CompilerGeneratedAttribute]
public DisplayNamesPrototype get_PrototypeObject();
    public virtual ObjectInstance Construct(JsValue[] arguments, JsValue newTarget);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.Intl.DisplayNamesPrototype : Prototype {
    private DisplayNamesConstructor _constructor;
    public DisplayNamesPrototype(Engine engine, Realm realm, DisplayNamesConstructor constructor, ObjectPrototype objectPrototype);
    protected virtual void Initialize();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.Intl.IntlInstance : ObjectInstance {
    private Realm _realm;
    internal IntlInstance(Engine engine, Realm realm, ObjectPrototype objectPrototype);
    protected virtual void Initialize();
    private JsValue GetCanonicalLocales(JsValue thisObject, JsValue[] arguments);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.Intl.ListFormatConstructor : Constructor {
    private static JsString _functionName;
    [CompilerGeneratedAttribute]
private ListFormatPrototype <PrototypeObject>k__BackingField;
    public ListFormatPrototype PrototypeObject { get; }
    public ListFormatConstructor(Engine engine, Realm realm, FunctionPrototype functionPrototype, ObjectPrototype objectPrototype);
    private static ListFormatConstructor();
    [CompilerGeneratedAttribute]
public ListFormatPrototype get_PrototypeObject();
    public virtual ObjectInstance Construct(JsValue[] arguments, JsValue newTarget);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.Intl.ListFormatPrototype : Prototype {
    private ListFormatConstructor _constructor;
    public ListFormatPrototype(Engine engine, Realm realm, ListFormatConstructor constructor, ObjectPrototype objectPrototype);
    protected virtual void Initialize();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.Intl.LocaleConstructor : Constructor {
    private static JsString _functionName;
    [CompilerGeneratedAttribute]
private LocalePrototype <PrototypeObject>k__BackingField;
    public LocalePrototype PrototypeObject { get; }
    public LocaleConstructor(Engine engine, Realm realm, FunctionPrototype functionPrototype, ObjectPrototype objectPrototype);
    private static LocaleConstructor();
    [CompilerGeneratedAttribute]
public LocalePrototype get_PrototypeObject();
    public virtual ObjectInstance Construct(JsValue[] arguments, JsValue newTarget);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.Intl.LocalePrototype : Prototype {
    private LocaleConstructor _constructor;
    public LocalePrototype(Engine engine, Realm realm, LocaleConstructor constructor, ObjectPrototype objectPrototype);
    protected virtual void Initialize();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.Intl.NumberFormatConstructor : Constructor {
    private static JsString _functionName;
    [CompilerGeneratedAttribute]
private NumberFormatPrototype <PrototypeObject>k__BackingField;
    [CompilerGeneratedAttribute]
private object <LocaleData>k__BackingField;
    [CompilerGeneratedAttribute]
private object <AvailableLocales>k__BackingField;
    [CompilerGeneratedAttribute]
private object <RelevantExtensionKeys>k__BackingField;
    private static HashSet`1<string> _sanctionedSingleUnitIdentifiers;
    public NumberFormatPrototype PrototypeObject { get; }
    public object LocaleData { get; private set; }
    public object AvailableLocales { get; private set; }
    public object RelevantExtensionKeys { get; private set; }
    public NumberFormatConstructor(Engine engine, Realm realm, FunctionPrototype functionPrototype, ObjectPrototype objectPrototype);
    private static NumberFormatConstructor();
    [CompilerGeneratedAttribute]
public NumberFormatPrototype get_PrototypeObject();
    [CompilerGeneratedAttribute]
public object get_LocaleData();
    [CompilerGeneratedAttribute]
private void set_LocaleData(object value);
    [CompilerGeneratedAttribute]
public object get_AvailableLocales();
    [CompilerGeneratedAttribute]
private void set_AvailableLocales(object value);
    [CompilerGeneratedAttribute]
public object get_RelevantExtensionKeys();
    [CompilerGeneratedAttribute]
private void set_RelevantExtensionKeys(object value);
    protected virtual void Initialize();
    public virtual ObjectInstance Construct(JsValue[] arguments, JsValue newTarget);
    private JsObject InitializeNumberFormat(JsObject numberFormat, JsValue locales, JsValue opts);
    private JsObject ResolveLocale(object availableLocales, JsArray requestedLocales, JsObject options, object relevantExtensionKeys, object localeData);
    private static void SetNumberFormatDigitOptions(JsObject numberFormat, ObjectInstance options, int mnfdDefault, int mxfdDefault, string notation);
    private static int CurrencyDigits(JsValue currency);
    private void SetNumberFormatUnitOptions(JsObject intlObj, JsValue options);
    private static bool IsWellFormedUnitIdentifier(JsValue unitIdentifier);
    private static bool IsSanctionedSingleUnitIdentifier(string unitIdentifier);
    private static bool IsWellFormedCurrencyCode(JsValue currency);
    private ObjectInstance CoerceOptionsToObject(JsValue options);
    private JsArray CanonicalizeLocaleList(JsValue locales);
    private JsValue GetOption(JsValue options, string property, OptionType type, T[] values, T defaultValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.Intl.NumberFormatPrototype : Prototype {
    private NumberFormatConstructor _constructor;
    public NumberFormatPrototype(Engine engine, Realm realm, NumberFormatConstructor constructor, ObjectPrototype objectPrototype);
    protected virtual void Initialize();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.Intl.PluralRulesConstructor : Constructor {
    private static JsString _functionName;
    [CompilerGeneratedAttribute]
private PluralRulesPrototype <PrototypeObject>k__BackingField;
    public PluralRulesPrototype PrototypeObject { get; }
    public PluralRulesConstructor(Engine engine, Realm realm, FunctionPrototype functionPrototype, ObjectPrototype objectPrototype);
    private static PluralRulesConstructor();
    [CompilerGeneratedAttribute]
public PluralRulesPrototype get_PrototypeObject();
    public virtual ObjectInstance Construct(JsValue[] arguments, JsValue newTarget);
    private static void InitializePluralRules(JsObject pluralRules, JsValue locales, JsValue options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.Intl.PluralRulesPrototype : Prototype {
    private PluralRulesConstructor _constructor;
    public PluralRulesPrototype(Engine engine, Realm realm, PluralRulesConstructor constructor, ObjectPrototype objectPrototype);
    protected virtual void Initialize();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.Intl.RelativeTimeFormatConstructor : Constructor {
    private static JsString _functionName;
    [CompilerGeneratedAttribute]
private RelativeTimeFormatPrototype <PrototypeObject>k__BackingField;
    public RelativeTimeFormatPrototype PrototypeObject { get; }
    public RelativeTimeFormatConstructor(Engine engine, Realm realm, FunctionPrototype functionPrototype, ObjectPrototype objectPrototype);
    private static RelativeTimeFormatConstructor();
    [CompilerGeneratedAttribute]
public RelativeTimeFormatPrototype get_PrototypeObject();
    public virtual ObjectInstance Construct(JsValue[] arguments, JsValue newTarget);
    private static void InitializeRelativeTimeFormat(JsObject relativeTimeFormat, JsValue locales, JsValue options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.Intl.RelativeTimeFormatPrototype : Prototype {
    private RelativeTimeFormatConstructor _constructor;
    public RelativeTimeFormatPrototype(Engine engine, Realm realm, RelativeTimeFormatConstructor constructor, ObjectPrototype objectPrototype);
    protected virtual void Initialize();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.Intl.SegmenterConstructor : Constructor {
    private static JsString _functionName;
    [CompilerGeneratedAttribute]
private SegmenterPrototype <PrototypeObject>k__BackingField;
    public SegmenterPrototype PrototypeObject { get; }
    public SegmenterConstructor(Engine engine, Realm realm, FunctionPrototype functionPrototype, ObjectPrototype objectPrototype);
    private static SegmenterConstructor();
    [CompilerGeneratedAttribute]
public SegmenterPrototype get_PrototypeObject();
    public virtual ObjectInstance Construct(JsValue[] arguments, JsValue newTarget);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.Intl.SegmenterPrototype : Prototype {
    private SegmenterConstructor _constructor;
    public SegmenterPrototype(Engine engine, Realm realm, SegmenterConstructor constructor, ObjectPrototype objectPrototype);
    protected virtual void Initialize();
}
internal enum Jint.Native.Iterator.ArrayIteratorType : Enum {
    public int value__;
    public static ArrayIteratorType Key;
    public static ArrayIteratorType Value;
    public static ArrayIteratorType KeyAndValue;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Jint.Native.Iterator.IteratorInstance : ObjectInstance {
    protected IteratorInstance(Engine engine);
    public virtual object ToObject();
    public abstract virtual bool TryIteratorStep(ObjectInstance& nextItem);
    public virtual void Close(CompletionType completion);
    private IteratorResult CreateIterResultObject(JsValue value, bool done);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Jint.Native.Iterator.IteratorProtocol : object {
    private Engine _engine;
    private IteratorInstance _iterator;
    private int _argCount;
    protected bool ShouldContinue { get; }
    protected IteratorProtocol(Engine engine, IteratorInstance iterator, int argCount);
    internal bool Execute();
    protected void IteratorClose(CompletionType completionType);
    protected virtual bool get_ShouldContinue();
    protected virtual void IterationEnd();
    protected abstract virtual void ProcessItem(JsValue[] arguments, JsValue currentValue);
    internal static void AddEntriesFromIterable(ObjectInstance target, IteratorInstance iterable, object adder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.Iterator.IteratorPrototype : Prototype {
    internal IteratorPrototype(Engine engine, Realm realm, Prototype objectPrototype);
    protected virtual void Initialize();
    private static JsValue ToIterator(JsValue thisObject, JsValue[] arguments);
    internal JsValue Next(JsValue thisObject, JsValue[] arguments);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.Iterator.IteratorResult : ObjectInstance {
    private JsValue _value;
    private JsBoolean _done;
    public IteratorResult(Engine engine, JsValue value, JsBoolean done);
    public static IteratorResult CreateValueIteratorPosition(Engine engine, JsValue value, JsBoolean done);
    public static IteratorResult CreateKeyValueIteratorPosition(Engine engine, JsValue key, JsValue value);
    public virtual JsValue Get(JsValue property, JsValue receiver);
    public virtual PropertyDescriptor GetOwnProperty(JsValue property);
    public virtual object ToObject();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Jint.Native.JsArguments : ObjectInstance {
    private static ThreadLocal`1<HashSet`1<Key>> _mappedNamed;
    private Function _func;
    private Key[] _names;
    private JsValue[] _args;
    private DeclarativeEnvironment _env;
    private bool _canReturnToPool;
    private bool _hasRestParameter;
    private bool _materialized;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ObjectInstance <ParameterMap>k__BackingField;
    [NullableAttribute("2")]
internal ObjectInstance ParameterMap { get; internal set; }
    internal bool IsArrayLike { get; }
    internal bool IsIntegerIndexedArray { get; }
    public UInt32 Length { get; }
    internal JsArguments(Engine engine);
    private static JsArguments();
    internal void Prepare(Function func, Key[] names, JsValue[] args, DeclarativeEnvironment env, bool hasRestParameter);
    protected virtual void Initialize();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal ObjectInstance get_ParameterMap();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_ParameterMap(ObjectInstance value);
    internal virtual bool get_IsArrayLike();
    internal virtual bool get_IsIntegerIndexedArray();
    public UInt32 get_Length();
    public virtual PropertyDescriptor GetOwnProperty(JsValue property);
    public virtual bool Set(JsValue property, JsValue value, JsValue receiver);
    public virtual bool DefineOwnProperty(JsValue property, PropertyDescriptor desc);
    public virtual bool Delete(JsValue property);
    internal void Materialize();
    internal void FunctionWasCalled();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerTypeProxyAttribute("Jint.Native.JsArray/JsArrayDebugView")]
[DebuggerDisplayAttribute("Count = {Length}")]
public class Jint.Native.JsArray : ArrayInstance {
    public UInt32 Length { get; }
    public JsArray(Engine engine, UInt32 capacity, UInt32 length);
    public JsArray(Engine engine, JsValue[] items);
    public UInt32 get_Length();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Jint.Native.JsArrayBuffer : ObjectInstance {
    private Byte[] _workBuffer;
    [NullableAttribute("2")]
internal Byte[] _arrayBufferData;
    internal Nullable`1<int> _arrayBufferMaxByteLength;
    internal JsValue _arrayBufferDetachKey;
    internal int ArrayBufferByteLength { get; }
    [NullableAttribute("2")]
internal Byte[] ArrayBufferData { get; }
    internal bool IsDetachedBuffer { get; }
    internal bool IsFixedLengthArrayBuffer { get; }
    internal bool IsSharedArrayBuffer { get; }
    internal JsArrayBuffer(Engine engine, Byte[] data, Nullable`1<UInt32> arrayBufferMaxByteLength);
    internal static Byte[] CreateByteDataBlock(Realm realm, ulong byteLength);
    internal virtual int get_ArrayBufferByteLength();
    [NullableContextAttribute("2")]
internal Byte[] get_ArrayBufferData();
    internal bool get_IsDetachedBuffer();
    internal bool get_IsFixedLengthArrayBuffer();
    internal virtual bool get_IsSharedArrayBuffer();
    [NullableContextAttribute("2")]
internal void DetachArrayBuffer(JsValue key);
    internal JsArrayBuffer CloneArrayBuffer(ArrayBufferConstructor constructor, int srcByteOffset, UInt32 srcLength);
    internal TypedArrayValue GetValueFromBuffer(int byteIndex, TypedArrayElementType type, bool isTypedArray, ArrayBufferOrder order, Nullable`1<bool> isLittleEndian);
    internal TypedArrayValue RawBytesToNumeric(TypedArrayElementType type, int byteIndex, bool isLittleEndian);
    internal void SetValueInBuffer(int byteIndex, TypedArrayElementType type, TypedArrayValue value, bool isTypedArray, ArrayBufferOrder order, Nullable`1<bool> isLittleEndian);
    private Byte[] NumericToRawBytes(TypedArrayElementType type, TypedArrayValue value, bool isLittleEndian);
    internal void Resize(UInt32 newByteLength);
    internal void AssertNotDetached();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Jint.Native.JsBigInt : JsValue {
    internal BigInteger _value;
    public static JsBigInt Zero;
    public static JsBigInt One;
    private static JsBigInt[] _bigIntegerToJsValue;
    private static JsBigInt();
    public JsBigInt(BigInteger value);
    internal static JsBigInt Create(BigInteger bigInt);
    internal static JsBigInt Create(JsValue value);
    public virtual object ToObject();
    internal virtual bool ToBoolean();
    public static bool op_Equality(JsBigInt a, double b);
    public static bool op_Inequality(JsBigInt a, double b);
    public virtual string ToString();
    protected internal virtual bool IsLooselyEqual(JsValue value);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
public virtual bool Equals(JsValue other);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(JsBigInt other);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Jint.Native.JsBoolean : JsValue {
    public static JsBoolean False;
    public static JsBoolean True;
    internal static object BoxedTrue;
    internal static object BoxedFalse;
    internal bool _value;
    private JsBoolean(bool value);
    private static JsBoolean();
    internal static JsBoolean Create(bool value);
    public virtual object ToObject();
    internal virtual bool ToBoolean();
    public virtual string ToString();
    protected internal virtual bool IsLooselyEqual(JsValue value);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
public virtual bool Equals(JsValue other);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(JsBoolean other);
    public virtual int GetHashCode();
}
internal class Jint.Native.JsDataView : ObjectInstance {
    [NullableAttribute("2")]
internal JsArrayBuffer _viewedArrayBuffer;
    internal UInt32 _byteLength;
    internal UInt32 _byteOffset;
    [NullableContextAttribute("1")]
internal JsDataView(Engine engine);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Jint.Native.JsDate : ObjectInstance {
    internal static long Max;
    internal static long Min;
    internal DatePresentation _dateValue;
    public double DateValue { get; }
    internal bool DateTimeRangeValid { get; }
    public JsDate(Engine engine, DateTimeOffset value);
    public JsDate(Engine engine, DateTime value);
    public JsDate(Engine engine, long dateValue);
    internal JsDate(Engine engine, DatePresentation dateValue);
    private static JsDate();
    public DateTime ToDateTime();
    public double get_DateValue();
    internal bool get_DateTimeRangeValid();
    public virtual string ToString();
}
internal class Jint.Native.JsEmpty : JsValue {
    [NullableAttribute("1")]
internal static JsValue Instance;
    private static JsEmpty();
    [NullableContextAttribute("2")]
public virtual object ToObject();
}
public class Jint.Native.JsError : ErrorInstance {
    [NullableContextAttribute("1")]
internal JsError(Engine engine);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.JsMap : ObjectInstance {
    private Realm _realm;
    internal OrderedDictionary`2<JsValue, JsValue> _map;
    public JsMap(Engine engine, Realm realm);
    public virtual PropertyDescriptor GetOwnProperty(JsValue property);
    protected virtual bool TryGetProperty(JsValue property, PropertyDescriptor& descriptor);
    internal void Clear();
    internal bool Has(JsValue key);
    internal bool MapDelete(JsValue key);
    internal void MapSet(JsValue key, JsValue value);
    internal void ForEach(ICallable callable, JsValue thisArg);
    internal JsValue MapGet(JsValue key);
    internal ObjectInstance Iterator();
    internal ObjectInstance Keys();
    internal ObjectInstance Values();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Jint.Native.JsNull : JsValue {
    public virtual object ToObject();
    [NullableContextAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("1")]
protected internal virtual bool IsLooselyEqual(JsValue value);
    public virtual bool Equals(object obj);
    public virtual bool Equals(JsValue other);
    public sealed virtual bool Equals(JsNull other);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{_value}")]
public class Jint.Native.JsNumber : JsValue {
    internal static double JavaScriptEpsilon;
    [DebuggerBrowsableAttribute("0")]
internal double _value;
    internal static double DoubleIsIntegerTolerance;
    internal static long NegativeZeroBits;
    private static int NumbersMax;
    private static JsNumber[] _intToJsValue;
    internal static JsNumber DoubleNaN;
    internal static JsNumber DoubleNegativeOne;
    internal static JsNumber DoublePositiveInfinity;
    internal static JsNumber DoubleNegativeInfinity;
    internal static JsNumber IntegerNegativeOne;
    internal static JsNumber NegativeZero;
    internal static JsNumber PositiveZero;
    internal static JsNumber PositiveOne;
    internal static JsNumber PositiveTwo;
    internal static JsNumber PositiveThree;
    internal static JsNumber PI;
    private static JsNumber();
    public JsNumber(double value);
    public JsNumber(int value);
    public JsNumber(UInt32 value);
    public JsNumber(ulong value);
    public JsNumber(long value);
    public virtual object ToObject();
    internal virtual bool ToBoolean();
    internal static JsNumber Create(object value);
    public static JsNumber Create(decimal value);
    public static JsNumber Create(double value);
    private static JsNumber CreateNumberUnlikely(double value);
    public static JsNumber Create(byte value);
    internal static JsNumber Create(sbyte value);
    public static JsNumber Create(int value);
    internal static JsNumber Create(UInt32 value);
    internal static JsNumber Create(ulong value);
    public static JsNumber Create(long value);
    public static JsNumber Create(JsValue jsValue);
    public virtual string ToString();
    internal bool IsNaN();
    internal bool IsZero();
    internal bool IsNegativeZero();
    internal bool IsPositiveZero();
    internal bool IsPositiveInfinity();
    internal bool IsNegativeInfinity();
    protected internal virtual bool IsLooselyEqual(JsValue value);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
public virtual bool Equals(JsValue other);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(JsNumber other);
    public virtual int GetHashCode();
}
public class Jint.Native.JsObject : ObjectInstance {
    [NullableContextAttribute("1")]
public JsObject(Engine engine);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.Json.JsonInstance : ObjectInstance {
    private Realm _realm;
    internal JsonInstance(Engine engine, Realm realm, ObjectPrototype objectPrototype);
    protected virtual void Initialize();
    private static JsValue InternalizeJSONProperty(JsValue holder, JsValue name, ICallable reviver);
    private JsValue Parse(JsValue thisObject, JsValue[] arguments);
    private JsValue Stringify(JsValue thisObject, JsValue[] arguments);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Jint.Native.Json.JsonParser : object {
    private Engine _engine;
    private int _maxDepth;
    private int _index;
    private int _length;
    private Token _lookahead;
    private string _source;
    private Token[] _tokenBuffer;
    private int _tokenBufferIndex;
    public JsonParser(Engine engine);
    public JsonParser(Engine engine, int maxDepth);
    private static bool IsDecimalDigit(char ch);
    private static bool IsLowerCaseHexAlpha(char ch);
    private static bool IsUpperCaseHexAlpha(char ch);
    private static bool IsHexDigit(char ch);
    private static bool IsWhiteSpace(char ch);
    private static bool IsLineTerminator(char ch);
    private char ScanHexEscape();
    private char ReadToNextSignificantCharacter();
    private Token CreateToken(Tokens type, string text, char firstCharacter, JsValue value, TextRange& range);
    private Token ScanPunctuator();
    private string ScanPunctuatorValue(int start, char code);
    private Token ScanNumericLiteral();
    private Token ScanBooleanLiteral();
    private bool ConsumeMatch(string text);
    private Token ScanNullLiteral();
    private Token ScanStringLiteral(State& state);
    private Token Advance(State& state);
    private Token Lex(State& state);
    private void Peek(State& state);
    [DoesNotReturnAttribute]
private void ThrowDepthLimitReached(Token token);
    [DoesNotReturnAttribute]
private void ThrowError(Token token, string messageFormat, Object[] arguments);
    [DoesNotReturnAttribute]
private void ThrowError(int position, string messageFormat, Object[] arguments);
    private void ThrowUnexpected(Token token);
    private void Expect(State& state, char value);
    public bool Match(char value);
    private JsArray ParseJsonArray(State& state);
    private JsObject ParseJsonObject(State& state);
    private static bool PropertyNameContainsInvalidCharacters(string propertyName);
    private JsValue ParseJsonValue(State& state);
    public JsValue Parse(string code);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Jint.Native.Json.JsonSerializer : object {
    private Engine _engine;
    private ObjectTraverseStack _stack;
    [NullableAttribute("2")]
private string _indent;
    private string _gap;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<JsValue> _propertyList;
    private JsValue _replacerFunction;
    private static JsString toJsonProperty;
    public JsonSerializer(Engine engine);
    private static JsonSerializer();
    public JsValue Serialize(JsValue value);
    public JsValue Serialize(JsValue value, JsValue replacer, JsValue space);
    private void SetupReplacer(JsValue replacer);
    private static string BuildSpacingGap(JsValue space);
    private SerializeResult SerializeJSONProperty(JsValue key, JsValue holder, ValueStringBuilder& json);
    private JsValue ReadUnwrappedValue(JsValue key, JsValue holder);
    private static bool CanSerializesAsArray(ObjectInstance value);
    private static void QuoteJSONString(string value, ValueStringBuilder& json);
    private static void AppendJsonStringCharacter(string value, Int32& index, ValueStringBuilder& json);
    private void SerializeJSONArray(ObjectInstance value, ValueStringBuilder& json);
    private void SerializeJSONObject(ObjectInstance value, ValueStringBuilder& json);
}
[ExtensionAttribute]
internal static class Jint.Native.Json.StringExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
internal static char CharCodeAt(string source, int index);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.JsPromise : ObjectInstance {
    [CompilerGeneratedAttribute]
private PromiseState <State>k__BackingField;
    [CompilerGeneratedAttribute]
private JsValue <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private ManualResetEventSlim <CompletedEvent>k__BackingField;
    internal List`1<PromiseReaction> PromiseRejectReactions;
    internal List`1<PromiseReaction> PromiseFulfillReactions;
    internal PromiseState State { get; private set; }
    internal JsValue Value { get; private set; }
    internal ManualResetEventSlim CompletedEvent { get; }
    internal JsPromise(Engine engine);
    [CompilerGeneratedAttribute]
internal PromiseState get_State();
    [CompilerGeneratedAttribute]
private void set_State(PromiseState value);
    [CompilerGeneratedAttribute]
internal JsValue get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(JsValue value);
    [CompilerGeneratedAttribute]
internal ManualResetEventSlim get_CompletedEvent();
    internal ResolvingFunctions CreateResolvingFunctions();
    private JsValue Resolve(JsValue thisObject, JsValue[] arguments);
    internal JsValue Resolve(JsValue result);
    private JsValue Reject(JsValue thisObject, JsValue[] arguments);
    private JsValue RejectPromise(JsValue reason);
    private JsValue FulfillPromise(JsValue result);
    private void Settle(PromiseState state, JsValue result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.JsProxy : ObjectInstance {
    internal ObjectInstance _target;
    [NullableAttribute("2")]
internal ObjectInstance _handler;
    private static JsString TrapApply;
    private static JsString TrapGet;
    private static JsString TrapSet;
    private static JsString TrapPreventExtensions;
    private static JsString TrapIsExtensible;
    private static JsString TrapDefineProperty;
    private static JsString TrapDeleteProperty;
    private static JsString TrapGetOwnPropertyDescriptor;
    private static JsString TrapHas;
    private static JsString TrapGetProtoTypeOf;
    private static JsString TrapSetProtoTypeOf;
    private static JsString TrapOwnKeys;
    private static JsString TrapConstruct;
    private static JsString KeyFunctionRevoke;
    private static JsString KeyIsArray;
    [CompilerGeneratedAttribute]
private bool <IsCallable>k__BackingField;
    internal bool IsConstructor { get; }
    public bool Extensible { get; }
    internal bool IsCallable { get; }
    public JsProxy(Engine engine, ObjectInstance target, ObjectInstance handler);
    private static JsProxy();
    private sealed virtual override JsValue Jint.Native.ICallable.Call(JsValue thisObject, JsValue[] arguments);
    private sealed virtual override ObjectInstance Jint.Native.IConstructor.Construct(JsValue[] arguments, JsValue newTarget);
    internal virtual bool IsArray();
    public virtual object ToObject();
    internal virtual bool get_IsConstructor();
    public virtual JsValue Get(JsValue property, JsValue receiver);
    public virtual List`1<JsValue> GetOwnPropertyKeys(Types types);
    public virtual PropertyDescriptor GetOwnProperty(JsValue property);
    private static void CompletePropertyDescriptor(PropertyDescriptor desc);
    public virtual bool Set(JsValue property, JsValue value, JsValue receiver);
    public virtual bool DefineOwnProperty(JsValue property, PropertyDescriptor desc);
    private static bool IsCompatiblePropertyDescriptor(bool extensible, PropertyDescriptor desc, PropertyDescriptor current);
    public virtual bool HasProperty(JsValue property);
    public virtual bool Delete(JsValue property);
    public virtual bool PreventExtensions();
    public virtual bool get_Extensible();
    [NullableContextAttribute("2")]
protected internal virtual ObjectInstance GetPrototypeOf();
    internal virtual bool SetPrototypeOf(JsValue value);
    [CompilerGeneratedAttribute]
internal virtual bool get_IsCallable();
    private bool TryCallHandler(JsValue propertyName, JsValue[] arguments, JsValue& result);
    private void AssertNotRevoked(JsValue key);
    private void AssertTargetNotRevoked(JsValue key);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Jint.Native.JsRegExp : ObjectInstance {
    internal static string regExpForMatchingAllCharacters;
    internal static JsString PropertyLastIndex;
    private string _flags;
    private PropertyDescriptor _prototypeDescriptor;
    [CompilerGeneratedAttribute]
private Regex <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private RegExpParseResult <ParseResult>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DotAll>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Global>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Indices>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreCase>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Multiline>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Sticky>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FullUnicode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UnicodeSets>k__BackingField;
    public Regex Value { get; public set; }
    public string Source { get; public set; }
    public string Flags { get; public set; }
    public RegExpParseResult ParseResult { get; public set; }
    public bool DotAll { get; private set; }
    public bool Global { get; private set; }
    public bool Indices { get; private set; }
    public bool IgnoreCase { get; private set; }
    public bool Multiline { get; private set; }
    public bool Sticky { get; private set; }
    public bool FullUnicode { get; private set; }
    public bool UnicodeSets { get; private set; }
    internal bool HasDefaultRegExpExec { get; }
    public JsRegExp(Engine engine);
    private static JsRegExp();
    [CompilerGeneratedAttribute]
public Regex get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(Regex value);
    [CompilerGeneratedAttribute]
public string get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(string value);
    public string get_Flags();
    public void set_Flags(string value);
    [CompilerGeneratedAttribute]
public RegExpParseResult get_ParseResult();
    [CompilerGeneratedAttribute]
public void set_ParseResult(RegExpParseResult value);
    [CompilerGeneratedAttribute]
public bool get_DotAll();
    [CompilerGeneratedAttribute]
private void set_DotAll(bool value);
    [CompilerGeneratedAttribute]
public bool get_Global();
    [CompilerGeneratedAttribute]
private void set_Global(bool value);
    [CompilerGeneratedAttribute]
public bool get_Indices();
    [CompilerGeneratedAttribute]
private void set_Indices(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreCase();
    [CompilerGeneratedAttribute]
private void set_IgnoreCase(bool value);
    [CompilerGeneratedAttribute]
public bool get_Multiline();
    [CompilerGeneratedAttribute]
private void set_Multiline(bool value);
    [CompilerGeneratedAttribute]
public bool get_Sticky();
    [CompilerGeneratedAttribute]
private void set_Sticky(bool value);
    [CompilerGeneratedAttribute]
public bool get_FullUnicode();
    [CompilerGeneratedAttribute]
private void set_FullUnicode(bool value);
    [CompilerGeneratedAttribute]
public bool get_UnicodeSets();
    [CompilerGeneratedAttribute]
private void set_UnicodeSets(bool value);
    internal bool get_HasDefaultRegExpExec();
    public virtual PropertyDescriptor GetOwnProperty(JsValue property);
    protected internal virtual void SetOwnProperty(JsValue property, PropertyDescriptor desc);
    [IteratorStateMachineAttribute("Jint.Native.JsRegExp/<GetOwnProperties>d__56")]
public virtual IEnumerable`1<KeyValuePair`2<JsValue, PropertyDescriptor>> GetOwnProperties();
    public virtual List`1<JsValue> GetOwnPropertyKeys(Types types);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<KeyValuePair`2<JsValue, PropertyDescriptor>> <>n__0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal class Jint.Native.JsSet : ObjectInstance {
    internal OrderedSet`1<JsValue> _set;
    public int Size { get; }
    [NullableAttribute("2")]
public JsValue Item { get; }
    public JsSet(Engine engine);
    public JsSet(Engine engine, OrderedSet`1<JsValue> set);
    public int get_Size();
    [NullableContextAttribute("2")]
public JsValue get_Item(int index);
    public virtual PropertyDescriptor GetOwnProperty(JsValue property);
    protected virtual bool TryGetProperty(JsValue property, PropertyDescriptor& descriptor);
    internal void Add(JsValue value);
    internal void Remove(JsValue value);
    internal void Clear();
    internal bool Has(JsValue key);
    internal bool SetDelete(JsValue key);
    internal void ForEach(ICallable callable, JsValue thisArg);
    internal ObjectInstance Entries();
    internal ObjectInstance Values();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.JsSharedArrayBuffer : JsArrayBuffer {
    private int _arrayBufferByteLengthData;
    internal int ArrayBufferByteLength { get; }
    internal bool IsSharedArrayBuffer { get; }
    internal JsSharedArrayBuffer(Engine engine, Byte[] data, Nullable`1<UInt32> arrayBufferMaxByteLength, UInt32 arrayBufferByteLengthData);
    internal virtual int get_ArrayBufferByteLength();
    internal static Byte[] CreateSharedByteDataBlock(Realm realm, ulong byteLength);
    internal virtual bool get_IsSharedArrayBuffer();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
[DebuggerDisplayAttribute("{ToString()}")]
public class Jint.Native.JsString : JsValue {
    private static int AsciiMax;
    private static JsString[] _charToJsValue;
    private static JsString[] _charToStringJsValue;
    private static JsString[] _intToStringJsValue;
    public static JsString Empty;
    internal static JsString NullString;
    internal static JsString UndefinedString;
    internal static JsString ObjectString;
    internal static JsString FunctionString;
    internal static JsString BooleanString;
    internal static JsString StringString;
    internal static JsString NumberString;
    internal static JsString BigIntString;
    internal static JsString SymbolString;
    internal static JsString DefaultString;
    internal static JsString NumberZeroString;
    internal static JsString NumberOneString;
    internal static JsString TrueString;
    internal static JsString FalseString;
    internal static JsString LengthString;
    internal static JsValue CommaString;
    [DebuggerBrowsableAttribute("0")]
internal string _value;
    private static ConcurrentDictionary`2<string, JsString> _stringCache;
    public char Item { get; }
    public int Length { get; }
    private static JsString();
    public JsString(string value);
    private JsString(string value, InternalTypes type);
    public JsString(char value);
    [NullableContextAttribute("2")]
public static bool op_Equality(JsString a, JsString b);
    [NullableContextAttribute("2")]
public static bool op_Equality(JsValue a, JsString b);
    [NullableContextAttribute("2")]
public static bool op_Equality(JsString a, JsValue b);
    public static bool op_Inequality(JsString a, JsValue b);
    [NullableContextAttribute("2")]
public static bool op_Equality(JsString a, string b);
    [NullableContextAttribute("2")]
public static bool op_Inequality(JsString a, string b);
    public static bool op_Inequality(JsValue a, JsString b);
    public static bool op_Inequality(JsString a, JsString b);
    internal static JsString Create(string value);
    internal static JsString CachedCreate(string value);
    internal static JsString Create(char value);
    internal static JsString Create(int value);
    internal static JsValue Create(UInt32 value);
    internal static JsValue Create(ulong value);
    public virtual char get_Item(int index);
    public virtual int get_Length();
    internal virtual JsString Append(JsValue jsValue);
    internal virtual JsString EnsureCapacity(int capacity);
    public sealed virtual object ToObject();
    internal sealed virtual bool ToBoolean();
    public virtual string ToString();
    internal bool Contains(char c);
    internal int IndexOf(string value, int startIndex);
    internal bool StartsWith(string value, int start);
    internal bool EndsWith(string value, int end);
    internal string Substring(int startIndex, int length);
    internal string Substring(int startIndex);
    [NullableContextAttribute("2")]
internal virtual bool TryGetIterator(Realm realm, IteratorInstance& iterator, GeneratorKind hint, ICallable method);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(JsValue other);
    [NullableContextAttribute("2")]
public virtual bool Equals(string other);
    [NullableContextAttribute("2")]
public virtual bool Equals(JsString other);
    protected internal virtual bool IsLooselyEqual(JsValue value);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Jint.Native.JsSymbol : JsValue {
    internal JsValue _value;
    internal JsSymbol(string value);
    internal JsSymbol(JsValue value);
    public virtual object ToObject();
    public virtual string ToString();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
public virtual bool Equals(JsValue other);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(JsSymbol other);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class Jint.Native.JsTypedArray : ObjectInstance {
    internal static UInt32 LengthAuto;
    internal TypedArrayContentType _contentType;
    internal TypedArrayElementType _arrayElementType;
    internal JsArrayBuffer _viewedArrayBuffer;
    internal UInt32 _byteLength;
    internal int _byteOffset;
    private Intrinsics _intrinsics;
    internal UInt32 _arrayLength;
    public JsValue Item { get; public set; }
    public JsValue Item { get; public set; }
    public UInt32 Length { get; }
    internal bool IsArrayLike { get; }
    internal bool IsIntegerIndexedArray { get; }
    internal JsTypedArray(Engine engine, Intrinsics intrinsics, TypedArrayElementType type, UInt32 length);
    public JsValue get_Item(int index);
    public void set_Item(int index, JsValue value);
    public JsValue get_Item(UInt32 index);
    public void set_Item(UInt32 index, JsValue value);
    public UInt32 get_Length();
    internal virtual UInt32 GetLength();
    internal virtual bool get_IsArrayLike();
    internal virtual bool get_IsIntegerIndexedArray();
    internal void AllocateTypedArrayBuffer(ulong len);
    internal bool HasProperty(long numericIndex);
    public virtual bool HasProperty(JsValue property);
    public virtual PropertyDescriptor GetOwnProperty(JsValue property);
    public virtual JsValue Get(JsValue property, JsValue receiver);
    public virtual bool Set(JsValue property, JsValue value, JsValue receiver);
    public virtual bool DefineOwnProperty(JsValue property, PropertyDescriptor desc);
    public virtual List`1<JsValue> GetOwnPropertyKeys(Types types);
    public virtual bool Delete(JsValue property);
    private JsValue IntegerIndexedElementGet(int index);
    private JsValue IntegerIndexedElementGet(double index);
    private JsValue DoIntegerIndexedElementGet(int index);
    internal void IntegerIndexedElementSet(int index, JsValue value);
    private void IntegerIndexedElementSet(double index, JsValue value);
    internal void DoIntegerIndexedElementSet(int index, TypedArrayValue numValue);
    internal bool IsValidIntegerIndex(double index);
    internal bool IsValidIntegerIndex(int index);
    internal T[] ToNativeArray();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Jint.Native.JsUndefined : JsValue {
    public virtual object ToObject();
    [NullableContextAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("1")]
protected internal virtual bool IsLooselyEqual(JsValue value);
    public virtual bool Equals(object obj);
    public virtual bool Equals(JsValue other);
    public sealed virtual bool Equals(JsUndefined other);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Jint.Native.JsValue : object {
    public static JsValue Undefined;
    public static JsValue Null;
    [DebuggerBrowsableAttribute("0")]
internal InternalTypes _type;
    [DebuggerBrowsableAttribute("0")]
internal bool IsIntegerIndexedArray { get; }
    [DebuggerBrowsableAttribute("0")]
internal bool IsConstructor { get; }
    internal bool IsEmpty { get; }
    [DebuggerBrowsableAttribute("0")]
public Types Type { get; }
    [DebuggerBrowsableAttribute("0")]
internal bool IsCallable { get; }
    protected JsValue(Types type);
    internal JsValue(InternalTypes type);
    private static JsValue();
    private sealed virtual override TypeCode System.IConvertible.GetTypeCode();
    [NullableContextAttribute("2")]
private sealed virtual override bool System.IConvertible.ToBoolean(IFormatProvider provider);
    [NullableContextAttribute("2")]
private sealed virtual override byte System.IConvertible.ToByte(IFormatProvider provider);
    [NullableContextAttribute("2")]
private sealed virtual override char System.IConvertible.ToChar(IFormatProvider provider);
    [NullableContextAttribute("2")]
private sealed virtual override DateTime System.IConvertible.ToDateTime(IFormatProvider provider);
    [NullableContextAttribute("2")]
private sealed virtual override decimal System.IConvertible.ToDecimal(IFormatProvider provider);
    [NullableContextAttribute("2")]
private sealed virtual override double System.IConvertible.ToDouble(IFormatProvider provider);
    [NullableContextAttribute("2")]
private sealed virtual override short System.IConvertible.ToInt16(IFormatProvider provider);
    [NullableContextAttribute("2")]
private sealed virtual override int System.IConvertible.ToInt32(IFormatProvider provider);
    [NullableContextAttribute("2")]
private sealed virtual override long System.IConvertible.ToInt64(IFormatProvider provider);
    [NullableContextAttribute("2")]
private sealed virtual override sbyte System.IConvertible.ToSByte(IFormatProvider provider);
    [NullableContextAttribute("2")]
private sealed virtual override float System.IConvertible.ToSingle(IFormatProvider provider);
    private sealed virtual override string System.IConvertible.ToString(IFormatProvider provider);
    private sealed virtual override object System.IConvertible.ToType(Type conversionType, IFormatProvider provider);
    [NullableContextAttribute("2")]
private sealed virtual override ushort System.IConvertible.ToUInt16(IFormatProvider provider);
    [NullableContextAttribute("2")]
private sealed virtual override UInt32 System.IConvertible.ToUInt32(IFormatProvider provider);
    [NullableContextAttribute("2")]
private sealed virtual override ulong System.IConvertible.ToUInt64(IFormatProvider provider);
    internal virtual bool IsArray();
    internal virtual bool get_IsIntegerIndexedArray();
    internal virtual bool get_IsConstructor();
    internal bool get_IsEmpty();
    internal IteratorInstance GetIterator(Realm realm, GeneratorKind hint, ICallable method);
    internal IteratorInstance GetIteratorFromMethod(Realm realm, ICallable method);
    [NullableContextAttribute("2")]
internal virtual bool TryGetIterator(Realm realm, IteratorInstance& iterator, GeneratorKind hint, ICallable method);
    internal static JsValue ConvertAwaitableToPromise(Engine engine, object obj);
    internal static JsValue ConvertTaskToPromise(Engine engine, Task task);
    public Types get_Type();
    public static JsValue FromObject(Engine engine, object value);
    public static JsValue FromObjectWithType(Engine engine, object value, Type type);
    [NullableContextAttribute("2")]
public abstract virtual object ToObject();
    internal virtual bool ToBoolean();
    internal JsValue GetV(Realm realm, JsValue property);
    public JsValue Get(JsValue property);
    public virtual JsValue Get(JsValue property, JsValue receiver);
    public virtual bool Set(JsValue property, JsValue value, JsValue receiver);
    internal bool InstanceofOperator(JsValue target);
    public virtual string ToString();
    [NullableContextAttribute("2")]
public static bool op_Equality(JsValue a, JsValue b);
    [NullableContextAttribute("2")]
public static bool op_Inequality(JsValue a, JsValue b);
    public static JsValue op_Implicit(char value);
    public static JsValue op_Implicit(int value);
    public static JsValue op_Implicit(UInt32 value);
    public static JsValue op_Implicit(double value);
    public static JsValue op_Implicit(long value);
    public static JsValue op_Implicit(ulong value);
    public static JsValue op_Implicit(BigInteger value);
    public static JsValue op_Implicit(bool value);
    [DebuggerStepThroughAttribute]
public static JsValue op_Implicit(string value);
    protected internal virtual bool IsLooselyEqual(JsValue value);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
public virtual bool Equals(JsValue other);
    public virtual int GetHashCode();
    internal JsValue Clone();
    internal virtual JsValue DoClone();
    internal virtual bool get_IsCallable();
    internal virtual bool OrdinaryHasInstance(JsValue v);
    internal static bool SameValue(JsValue x, JsValue y);
    internal static IConstructor AssertConstructor(Engine engine, JsValue c);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.JsWeakMap : ObjectInstance {
    private ConditionalWeakTable`2<JsValue, JsValue> _table;
    public JsWeakMap(Engine engine);
    internal bool WeakMapHas(JsValue key);
    internal bool WeakMapDelete(JsValue key);
    internal void WeakMapSet(JsValue key, JsValue value);
    internal JsValue WeakMapGet(JsValue key);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.JsWeakRef : ObjectInstance {
    private WeakReference`1<JsValue> _weakRefTarget;
    public JsWeakRef(Engine engine, JsValue target);
    public JsValue WeakRefDeref();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.JsWeakSet : ObjectInstance {
    private ConditionalWeakTable`2<JsValue, JsValue> _table;
    public JsWeakSet(Engine engine);
    internal bool WeakSetHas(JsValue value);
    internal bool WeakSetDelete(JsValue value);
    internal void WeakSetAdd(JsValue value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.Map.MapConstructor : Constructor {
    private static JsString _functionName;
    [CompilerGeneratedAttribute]
private MapPrototype <PrototypeObject>k__BackingField;
    private MapPrototype PrototypeObject { get; }
    internal MapConstructor(Engine engine, Realm realm, FunctionPrototype functionPrototype, ObjectPrototype objectPrototype);
    private static MapConstructor();
    [CompilerGeneratedAttribute]
private MapPrototype get_PrototypeObject();
    protected virtual void Initialize();
    private static JsValue Species(JsValue thisObject, JsValue[] arguments);
    public virtual ObjectInstance Construct(JsValue[] arguments, JsValue newTarget);
    private JsValue GroupBy(JsValue thisObject, JsValue[] arguments);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.Map.MapIteratorPrototype : IteratorPrototype {
    internal MapIteratorPrototype(Engine engine, Realm realm, IteratorPrototype iteratorPrototype);
    protected virtual void Initialize();
    internal IteratorInstance ConstructEntryIterator(JsMap map);
    internal IteratorInstance ConstructKeyIterator(JsMap map);
    internal IteratorInstance ConstructValueIterator(JsMap map);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.Map.MapPrototype : Prototype {
    private MapConstructor _mapConstructor;
    internal MapPrototype(Engine engine, Realm realm, MapConstructor mapConstructor, ObjectPrototype objectPrototype);
    protected virtual void Initialize();
    private JsValue Size(JsValue thisObject, JsValue[] arguments);
    private JsValue Get(JsValue thisObject, JsValue[] arguments);
    private JsValue Clear(JsValue thisObject, JsValue[] arguments);
    private JsValue Delete(JsValue thisObject, JsValue[] arguments);
    private JsValue Set(JsValue thisObject, JsValue[] arguments);
    private JsValue Has(JsValue thisObject, JsValue[] arguments);
    private JsValue ForEach(JsValue thisObject, JsValue[] arguments);
    private ObjectInstance Entries(JsValue thisObject, JsValue[] arguments);
    private ObjectInstance Keys(JsValue thisObject, JsValue[] arguments);
    private ObjectInstance Values(JsValue thisObject, JsValue[] arguments);
    private JsMap AssertMapInstance(JsValue thisObject);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.Math.MathInstance : ObjectInstance {
    [NullableAttribute("2")]
private Random _random;
    internal MathInstance(Engine engine, ObjectPrototype objectPrototype);
    protected virtual void Initialize();
    private static JsValue Abs(JsValue thisObject, JsValue[] arguments);
    private static JsValue Acos(JsValue thisObject, JsValue[] arguments);
    private static JsValue Acosh(JsValue thisObject, JsValue[] arguments);
    private static JsValue Asin(JsValue thisObject, JsValue[] arguments);
    private static JsValue Asinh(JsValue thisObject, JsValue[] arguments);
    private static JsValue Atan(JsValue thisObject, JsValue[] arguments);
    private static JsValue Atanh(JsValue thisObject, JsValue[] arguments);
    private static JsValue Atan2(JsValue thisObject, JsValue[] arguments);
    private static JsValue Ceil(JsValue thisObject, JsValue[] arguments);
    private static JsValue Cos(JsValue thisObject, JsValue[] arguments);
    private static JsValue Cosh(JsValue thisObject, JsValue[] arguments);
    private static JsValue Exp(JsValue thisObject, JsValue[] arguments);
    private static JsValue Expm1(JsValue thisObject, JsValue[] arguments);
    private static JsValue Floor(JsValue thisObject, JsValue[] arguments);
    private static JsValue Log(JsValue thisObject, JsValue[] arguments);
    private static JsValue Log1p(JsValue thisObject, JsValue[] arguments);
    private static JsValue Log2(JsValue thisObject, JsValue[] arguments);
    private static JsValue Log10(JsValue thisObject, JsValue[] arguments);
    private static JsValue Max(JsValue thisObject, JsValue[] arguments);
    private static JsValue Min(JsValue thisObject, JsValue[] arguments);
    private static JsValue Pow(JsValue thisObject, JsValue[] arguments);
    private static JsValue HandlePowUnlikely(double y, double x);
    private JsValue Random(JsValue thisObject, JsValue[] arguments);
    private static JsValue Round(JsValue thisObject, JsValue[] arguments);
    private static JsValue Fround(JsValue thisObject, JsValue[] arguments);
    private static JsValue F16Round(JsValue thisObject, JsValue[] arguments);
    private static JsValue Sin(JsValue thisObject, JsValue[] arguments);
    private static JsValue Sinh(JsValue thisObject, JsValue[] arguments);
    private static JsValue Sqrt(JsValue thisObject, JsValue[] arguments);
    private static JsValue Tan(JsValue thisObject, JsValue[] arguments);
    private static JsValue Tanh(JsValue thisObject, JsValue[] arguments);
    private static JsValue Truncate(JsValue thisObject, JsValue[] arguments);
    private static JsValue Sign(JsValue thisObject, JsValue[] arguments);
    private static JsValue Cbrt(JsValue thisObject, JsValue[] arguments);
    private static JsValue Hypot(JsValue thisObject, JsValue[] arguments);
    private JsValue SumPrecise(JsValue thisObject, JsValue[] arguments);
    private static Double[] Coerced(JsValue[] arguments);
    private static JsValue Imul(JsValue thisObject, JsValue[] arguments);
    private static JsValue Clz32(JsValue thisObject, JsValue[] arguments);
}
internal static class Jint.Native.Math.SumPrecise : object {
    private static double MaxDouble;
    private static double PenultimateDouble;
    private static double Two1023;
    private static double MaxUlp;
    private static TwoSumResult TwoSum(double x, double y);
    [NullableContextAttribute("1")]
internal static double Sum(List`1<double> array);
}
internal class Jint.Native.Number.Dtoa.Bignum : object {
    private static int kMaxSignificantBits;
    private static int kChunkSize;
    private static int kDoubleChunkSize;
    private static int kBigitSize;
    private static UInt32 kBigitMask;
    private static int kBigitCapacity;
    private UInt32[] bigits_;
    private int exponent_;
    private int used_digits_;
    private int BigitLength();
    public UInt32 DivideModuloIntBignum(Bignum other);
    private void Align(Bignum other);
    private static void ValidateCapacity(int size);
    private void Clamp();
    private bool IsClamped();
    private void Zero();
    internal void AssignUInt16(UInt32 value);
    internal void AssignUInt64(ulong value);
    internal void AssignBignum(Bignum other);
    private void SubtractTimes(Bignum other, UInt32 factor);
    private void SubtractBignum(Bignum other);
    internal static bool Equal(Bignum a, Bignum b);
    internal static bool LessEqual(Bignum a, Bignum b);
    internal static bool Less(Bignum a, Bignum b);
    private static bool PlusEqual(Bignum a, Bignum b, Bignum c);
    private static bool PlusLessEqual(Bignum a, Bignum b, Bignum c);
    private static bool PlusLess(Bignum a, Bignum b, Bignum c);
    private UInt32 BigitAt(int index);
    private static int Compare(Bignum a, Bignum b);
    internal static int PlusCompare(Bignum a, Bignum b, Bignum c);
    internal void Times10();
    internal void MultiplyByUInt32(UInt32 factor);
    internal void MultiplyByUInt64(ulong factor);
    internal void ShiftLeft(int shift_amount);
    private void BigitsShiftLeft(int shift_amount);
    internal void AssignPowerUInt16(UInt32 baseValue, int power_exponent);
    private void Square();
}
internal static class Jint.Native.Number.Dtoa.BignumDtoa : object {
    public static void NumberToString(double v, DtoaMode mode, int requested_digits, DtoaBuilder& builder, Int32& decimal_point);
    private static void GenerateShortestDigits(Bignum numerator, Bignum denominator, Bignum delta_minus, Bignum delta_plus, bool is_even, DtoaBuilder& buffer);
    private static void GenerateCountedDigits(int count, Int32& decimal_point, Bignum numerator, Bignum denominator, DtoaBuilder& buffer);
    private static void BignumToFixed(int requested_digits, Int32& decimal_point, Bignum numerator, Bignum denominator, DtoaBuilder& buffer);
    private static int EstimatePower(int exponent);
    private static void InitialScaledStartValuesPositiveExponent(double v, int estimated_power, bool need_boundary_deltas, Bignum numerator, Bignum denominator, Bignum delta_minus, Bignum delta_plus);
    private static void InitialScaledStartValuesNegativeExponentPositivePower(double v, int estimated_power, bool need_boundary_deltas, Bignum numerator, Bignum denominator, Bignum delta_minus, Bignum delta_plus);
    private static void InitialScaledStartValuesNegativeExponentNegativePower(double v, int estimated_power, bool need_boundary_deltas, Bignum numerator, Bignum denominator, Bignum delta_minus, Bignum delta_plus);
    private static void InitialScaledStartValues(double v, int estimated_power, bool need_boundary_deltas, Bignum numerator, Bignum denominator, Bignum delta_minus, Bignum delta_plus);
    private static void FixupMultiply10(int estimated_power, bool is_even, Int32& decimal_point, Bignum numerator, Bignum denominator, Bignum delta_minus, Bignum delta_plus);
}
internal static class Jint.Native.Number.Dtoa.CachedPowers : object {
    private static double Kd1Log210;
    private static CachedPower[] CACHED_POWERS;
    private static int kCachedPowersOffset;
    private static int kDecimalExponentDistance;
    private static int kMinDecimalExponent;
    private static int kMaxDecimalExponent;
    private static CachedPowers();
    internal static GetCachedPowerResult GetCachedPowerForBinaryExponentRange(int min_exponent, int max_exponent);
}
[IsReadOnlyAttribute]
internal class Jint.Native.Number.Dtoa.DiyFp : ValueType {
    internal static int KSignificandSize;
    private static ulong KUint64MSB;
    public ulong F;
    public int E;
    internal DiyFp(ulong f, int e);
    internal static DiyFp Minus(DiyFp& a, DiyFp& b);
    internal static DiyFp Times(DiyFp& a, DiyFp& b);
    internal static DiyFp Normalize(ulong f, int e);
    public virtual string ToString();
}
internal class Jint.Native.Number.Dtoa.DoubleHelper : object {
    internal static ulong KExponentMask;
    internal static ulong KSignificandMask;
    private static ulong KHiddenBit;
    private static int KSignificandSize;
    private static int KExponentBias;
    private static int KDenormalExponent;
    private static DiyFp AsDiyFp(ulong d64);
    internal static DiyFp AsNormalizedDiyFp(ulong d64);
    internal static int Exponent(ulong d64);
    internal static int NormalizedExponent(ulong significand, int exponent);
    internal static ulong Significand(ulong d64);
    private static bool IsDenormal(ulong d64);
    private static bool IsSpecial(ulong d64);
    internal static NormalizedBoundariesResult NormalizedBoundaries(ulong d64);
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
[CompilerFeatureRequiredAttribute("RefStructs")]
[DefaultMemberAttribute("Item")]
internal class Jint.Native.Number.Dtoa.DtoaBuilder : ValueType {
    internal Span`1<char> _chars;
    internal int Length;
    public char Item { get; public set; }
    public DtoaBuilder(Span`1<char> initialBuffer);
    internal void Append(char c);
    internal void DecreaseLast();
    public void Reset();
    public char get_Item(int i);
    public void set_Item(int i, char value);
    public ReadOnlySpan`1<char> Slice(int start, int length);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
internal enum Jint.Native.Number.Dtoa.DtoaMode : Enum {
    public int value__;
    public static DtoaMode Shortest;
    public static DtoaMode Precision;
    public static DtoaMode Fixed;
}
internal static class Jint.Native.Number.Dtoa.DtoaNumberFormatter : object {
    public static void DoubleToAscii(DtoaBuilder& buffer, double v, DtoaMode mode, int requested_digits, Boolean& negative, Int32& point);
}
internal class Jint.Native.Number.Dtoa.FastDtoa : object {
    public static int KFastDtoaMaximalLength;
    private static int MinimalTargetExponent;
    private static int MaximalTargetExponent;
    private static int KTen4;
    private static int KTen5;
    private static int KTen6;
    private static int KTen7;
    private static int KTen8;
    private static int KTen9;
    private static bool RoundWeed(DtoaBuilder& buffer, ulong distanceTooHighW, ulong unsafeInterval, ulong rest, ulong tenKappa, ulong unit);
    private static bool RoundWeedCounted(DtoaBuilder& buffer, ulong rest, ulong ten_kappa, ulong unit, Int32& kappa);
    private static void BiggestPowerTen(UInt32 number, int numberBits, UInt32& power, Int32& exponent);
    private static bool DigitGen(DiyFp& low, DiyFp& w, DiyFp& high, DtoaBuilder& buffer, int mk, Int32& kappa);
    private static bool DigitGenCounted(DiyFp& w, int requested_digits, DtoaBuilder& buffer, Int32& kappa);
    private static bool Grisu3(double v, DtoaBuilder& buffer, Int32& decimal_exponent);
    private static bool Grisu3Counted(double v, int requested_digits, DtoaBuilder& buffer, Int32& decimal_exponent);
    public static bool NumberToString(double v, DtoaMode mode, int requested_digits, Int32& decimal_point, DtoaBuilder& buffer);
}
[ExtensionAttribute]
internal static class Jint.Native.Number.Dtoa.NumberExtensions : object {
    [ExtensionAttribute]
internal static long UnsignedShift(long l, int shift);
    [ExtensionAttribute]
internal static ulong UnsignedShift(ulong l, int shift);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.Number.NumberConstructor : Constructor {
    private static JsString _functionName;
    private static long MinSafeInteger;
    internal static long MaxSafeInteger;
    [CompilerGeneratedAttribute]
private NumberPrototype <PrototypeObject>k__BackingField;
    public NumberPrototype PrototypeObject { get; }
    public NumberConstructor(Engine engine, Realm realm, FunctionPrototype functionPrototype, ObjectPrototype objectPrototype);
    private static NumberConstructor();
    protected virtual void Initialize();
    private static JsValue IsFinite(JsValue thisObject, JsValue[] arguments);
    private static JsValue IsInteger(JsValue thisObject, JsValue[] arguments);
    private static JsValue IsNaN(JsValue thisObject, JsValue[] arguments);
    private static JsValue IsSafeInteger(JsValue thisObject, JsValue[] arguments);
    protected internal virtual JsValue Call(JsValue thisObject, JsValue[] arguments);
    public virtual ObjectInstance Construct(JsValue[] arguments, JsValue newTarget);
    private static JsNumber ProcessFirstParameter(JsValue[] arguments);
    [CompilerGeneratedAttribute]
public NumberPrototype get_PrototypeObject();
    public NumberInstance Construct(JsNumber value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.Number.NumberInstance : ObjectInstance {
    private static long NegativeZeroBits;
    [CompilerGeneratedAttribute]
private JsNumber <NumberData>k__BackingField;
    private Types Jint.Native.IJsPrimitive.Type { get; }
    private JsValue Jint.Native.IJsPrimitive.PrimitiveValue { get; }
    public JsNumber NumberData { get; }
    private protected NumberInstance(Engine engine, InternalTypes type);
    public NumberInstance(Engine engine, JsNumber value);
    private static NumberInstance();
    private sealed virtual override Types Jint.Native.IJsPrimitive.get_Type();
    private sealed virtual override JsValue Jint.Native.IJsPrimitive.get_PrimitiveValue();
    [CompilerGeneratedAttribute]
public JsNumber get_NumberData();
    public static bool IsNegativeZero(double x);
    public static bool IsPositiveZero(double x);
}
internal class Jint.Native.Number.NumberIntlHelper : object {
    private static int JS_MAX_DECIMAL_DIGIT_COUNT;
    public static int GetDecimalDigitCount(double number);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.Number.NumberPrototype : NumberInstance {
    private static int SmallDtoaLength;
    private static int LargeDtoaLength;
    private Realm _realm;
    private NumberConstructor _constructor;
    private static double Ten21;
    internal NumberPrototype(Engine engine, Realm realm, NumberConstructor constructor, ObjectPrototype objectPrototype);
    protected virtual void Initialize();
    private JsValue ToLocaleString(JsValue thisObject, JsValue[] arguments);
    private JsValue ValueOf(JsValue thisObject, JsValue[] arguments);
    private JsValue ToFixed(JsValue thisObject, JsValue[] arguments);
    private JsValue ToExponential(JsValue thisObject, JsValue[] arguments);
    private JsValue ToPrecision(JsValue thisObject, JsValue[] arguments);
    private static string CreateExponentialRepresentation(DtoaBuilder& buffer, int exponent, bool negative, int significantDigits);
    private JsValue ToNumberString(JsValue thisObject, JsValue[] arguments);
    internal static string ToBase(long n, int radix);
    internal static string ToFractionBase(double n, int radix);
    internal static string ToNumberString(double m);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RequiredMemberAttribute]
internal class Jint.Native.Object.ClassFieldDefinition : object {
    [CompilerGeneratedAttribute]
private JsValue <Name>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ScriptFunction <Initializer>k__BackingField;
    [RequiredMemberAttribute]
public JsValue Name { get; public set; }
    [NullableAttribute("2")]
public ScriptFunction Initializer { get; public set; }
    [CompilerGeneratedAttribute]
public JsValue get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(JsValue value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public ScriptFunction get_Initializer();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Initializer(ScriptFunction value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RequiredMemberAttribute]
internal class Jint.Native.Object.ClassStaticBlockDefinition : object {
    [CompilerGeneratedAttribute]
private Function <BodyFunction>k__BackingField;
    [RequiredMemberAttribute]
public Function BodyFunction { get; public set; }
    [CompilerGeneratedAttribute]
public Function get_BodyFunction();
    [CompilerGeneratedAttribute]
public void set_BodyFunction(Function value);
}
[FlagsAttribute]
internal enum Jint.Native.Object.ObjectChangeFlags : Enum {
    public int value__;
    public static ObjectChangeFlags None;
    public static ObjectChangeFlags Property;
    public static ObjectChangeFlags Symbol;
    public static ObjectChangeFlags ArrayIndex;
    public static ObjectChangeFlags NonDefaultDataDescriptorUsage;
}
internal enum Jint.Native.Object.ObjectClass : Enum {
    public byte value__;
    public static ObjectClass Arguments;
    public static ObjectClass Boolean;
    public static ObjectClass Date;
    public static ObjectClass Error;
    public static ObjectClass Function;
    public static ObjectClass Number;
    public static ObjectClass Object;
    public static ObjectClass RegExp;
    public static ObjectClass String;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Jint.Native.Object.ObjectConstructor : Constructor {
    private static JsString _name;
    [CompilerGeneratedAttribute]
private ObjectPrototype <PrototypeObject>k__BackingField;
    public ObjectPrototype PrototypeObject { get; }
    internal ObjectConstructor(Engine engine, Realm realm);
    private static ObjectConstructor();
    [CompilerGeneratedAttribute]
public ObjectPrototype get_PrototypeObject();
    protected virtual void Initialize();
    private JsValue Assign(JsValue thisObject, JsValue[] arguments);
    private JsValue Entries(JsValue thisObject, JsValue[] arguments);
    private JsValue FromEntries(JsValue thisObject, JsValue[] arguments);
    private static JsValue Is(JsValue thisObject, JsValue[] arguments);
    protected internal virtual JsValue Call(JsValue thisObject, JsValue[] arguments);
    public ObjectInstance Construct(JsValue[] arguments);
    public virtual ObjectInstance Construct(JsValue[] arguments, JsValue newTarget);
    internal ObjectInstance Construct(int propertyCount);
    public JsValue GetPrototypeOf(JsValue thisObject, JsValue[] arguments);
    private JsValue SetPrototypeOf(JsValue thisObject, JsValue[] arguments);
    private JsValue HasOwn(JsValue thisObject, JsValue[] arguments);
    internal JsValue GetOwnPropertyDescriptor(JsValue thisObject, JsValue[] arguments);
    private JsValue GetOwnPropertyDescriptors(JsValue thisObject, JsValue[] arguments);
    private JsValue GetOwnPropertyNames(JsValue thisObject, JsValue[] arguments);
    private JsValue GetOwnPropertySymbols(JsValue thisObject, JsValue[] arguments);
    private JsValue Create(JsValue thisObject, JsValue[] arguments);
    private JsValue DefineProperty(JsValue thisObject, JsValue[] arguments);
    private JsValue DefineProperties(JsValue thisObject, JsValue[] arguments);
    private JsValue ObjectDefineProperties(ObjectInstance o, JsValue properties);
    private JsValue Seal(JsValue thisObject, JsValue[] arguments);
    private JsValue Freeze(JsValue thisObject, JsValue[] arguments);
    private JsValue PreventExtensions(JsValue thisObject, JsValue[] arguments);
    private static JsValue IsSealed(JsValue thisObject, JsValue[] arguments);
    private static JsValue IsFrozen(JsValue thisObject, JsValue[] arguments);
    private static JsValue TestIntegrityLevel(ObjectInstance o, IntegrityLevel level);
    private static JsValue IsExtensible(JsValue thisObject, JsValue[] arguments);
    private JsValue Keys(JsValue thisObject, JsValue[] arguments);
    private JsValue Values(JsValue thisObject, JsValue[] arguments);
    private JsValue GroupBy(JsValue thisObject, JsValue[] arguments);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
[DebuggerTypeProxyAttribute("Jint.Native.Object.ObjectInstance/ObjectInstanceDebugView")]
public class Jint.Native.Object.ObjectInstance : JsValue {
    private bool _initialized;
    private ObjectClass _class;
    [NullableAttribute("2")]
internal PropertyDictionary _properties;
    [NullableAttribute("2")]
internal SymbolDictionary _symbols;
    [NullableAttribute("2")]
internal ObjectInstance _prototype;
    protected Engine _engine;
    [CompilerGeneratedAttribute]
private bool <Extensible>k__BackingField;
    private static PropertyDescriptor _marker;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<PrivateName, PrivateElement> _privateElements;
    public Engine Engine { get; }
    [NullableAttribute("2")]
public ObjectInstance Prototype { get; public set; }
    public bool Extensible { get; private set; }
    [NullableAttribute("2")]
internal PropertyDictionary Properties { get; }
    internal ObjectClass Class { get; }
    public JsValue Item { get; public set; }
    [DebuggerBrowsableAttribute("0")]
internal bool IsConcatSpreadable { get; }
    [DebuggerBrowsableAttribute("0")]
internal bool IsArrayLike { get; }
    [DebuggerBrowsableAttribute("0")]
internal bool HasOriginalIterator { get; }
    internal bool IsIntegerIndexedArray { get; }
    protected ObjectInstance(Engine engine);
    internal ObjectInstance(Engine engine, ObjectClass objectClass, InternalTypes type);
    private static ObjectInstance();
    [DebuggerStepThroughAttribute]
public Engine get_Engine();
    [NullableContextAttribute("2")]
[DebuggerStepThroughAttribute]
public ObjectInstance get_Prototype();
    [NullableContextAttribute("2")]
public void set_Prototype(ObjectInstance value);
    [CompilerGeneratedAttribute]
public virtual bool get_Extensible();
    [CompilerGeneratedAttribute]
private void set_Extensible(bool value);
    [NullableContextAttribute("2")]
[DebuggerStepThroughAttribute]
internal PropertyDictionary get_Properties();
    [DebuggerStepThroughAttribute]
internal ObjectClass get_Class();
    public JsValue get_Item(JsValue property);
    public void set_Item(JsValue property, JsValue value);
    internal static ObjectInstance Construct(IConstructor f, JsValue[] argumentsList, IConstructor newTarget);
    internal static IConstructor SpeciesConstructor(ObjectInstance o, IConstructor defaultConstructor);
    internal void SetProperties(StringDictionarySlim`1<PropertyDescriptor> properties);
    [NullableContextAttribute("2")]
internal void SetProperties(PropertyDictionary properties);
    [NullableContextAttribute("2")]
internal void SetSymbols(SymbolDictionary symbols);
    internal void SetProperty(JsValue property, PropertyDescriptor value);
    internal void SetProperty(string property, PropertyDescriptor value);
    internal void SetProperty(Key property, PropertyDescriptor value);
    private void SetPropertyUnlikely(JsValue property, PropertyDescriptor value);
    internal void ClearProperties();
    [IteratorStateMachineAttribute("Jint.Native.Object.ObjectInstance/<GetOwnProperties>d__34")]
public virtual IEnumerable`1<KeyValuePair`2<JsValue, PropertyDescriptor>> GetOwnProperties();
    public virtual List`1<JsValue> GetOwnPropertyKeys(Types types);
    private List`1<JsValue> GetOwnPropertyKeysSorted(List`1<JsValue> initialOwnPropertyKeys, bool returningStringKeys, bool returningSymbols);
    internal virtual IEnumerable`1<JsValue> GetInitialOwnStringPropertyKeys();
    protected virtual bool TryGetProperty(JsValue property, PropertyDescriptor& descriptor);
    public bool HasOwnProperty(JsValue property);
    public virtual void RemoveOwnProperty(JsValue property);
    public virtual JsValue Get(JsValue property, JsValue receiver);
    internal JsValue UnwrapJsValue(PropertyDescriptor desc);
    internal static JsValue UnwrapJsValue(PropertyDescriptor desc, JsValue thisObject);
    private static JsValue UnwrapFromGetter(PropertyDescriptor desc, JsValue thisObject);
    public virtual PropertyDescriptor GetOwnProperty(JsValue property);
    protected internal virtual void SetOwnProperty(JsValue property, PropertyDescriptor desc);
    public bool TryGetValue(JsValue property, JsValue& value);
    public bool Set(JsValue p, JsValue v, bool throwOnError);
    public bool Set(JsValue property, JsValue value);
    public virtual bool Set(JsValue property, JsValue value, JsValue receiver);
    private bool SetUnlikely(JsValue property, JsValue value, JsValue receiver);
    internal bool CanPut(JsValue property);
    public virtual bool HasProperty(JsValue property);
    internal bool DeletePropertyOrThrow(JsValue property);
    public virtual bool Delete(JsValue property);
    internal bool DefinePropertyOrThrow(JsValue property, PropertyDescriptor desc);
    public virtual bool DefineOwnProperty(JsValue property, PropertyDescriptor desc);
    protected static bool ValidateAndApplyPropertyDescriptor(ObjectInstance o, JsValue property, bool extensible, PropertyDescriptor desc, PropertyDescriptor current);
    protected internal void EnsureInitialized();
    protected virtual void Initialize();
    public virtual object ToObject();
    private object ToObject(ObjectTraverseStack stack);
    internal virtual bool FindWithCallback(JsValue[] arguments, UInt64& index, JsValue& value, bool visitUnassigned, bool fromEnd);
    internal ICallable GetCallable(JsValue source);
    internal bool get_IsConcatSpreadable();
    internal virtual bool get_IsArrayLike();
    internal virtual bool get_HasOriginalIterator();
    internal virtual bool get_IsIntegerIndexedArray();
    internal virtual UInt32 GetLength();
    public virtual bool PreventExtensions();
    [NullableContextAttribute("2")]
protected internal virtual ObjectInstance GetPrototypeOf();
    internal virtual bool SetPrototypeOf(JsValue value);
    internal void SetFunctionName(JsValue name, string prefix);
    internal virtual bool CreateMethodProperty(JsValue p, JsValue v);
    public bool CreateDataProperty(JsValue p, JsValue v);
    internal bool CreateDataPropertyOrThrow(JsValue p, JsValue v);
    internal void CreateNonEnumerableDataPropertyOrThrow(JsValue p, JsValue v);
    internal static JsObject OrdinaryObjectCreate(Engine engine, ObjectInstance proto);
    internal ICallable GetMethod(JsValue property);
    internal static ICallable GetMethod(Realm realm, JsValue v, JsValue p);
    internal void CopyDataProperties(ObjectInstance target, HashSet`1<JsValue> excludedItems);
    internal JsArray EnumerableOwnProperties(EnumerableOwnPropertyNamesKind kind);
    internal ObjectInstance AssertThisIsObjectInstance(JsValue value, string methodName);
    private void ThrowIncompatibleReceiver(JsValue value, string methodName);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
public virtual bool Equals(JsValue other);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(ObjectInstance other);
    public virtual int GetHashCode();
    [IteratorStateMachineAttribute("Jint.Native.Object.ObjectInstance/<GetKeys>d__95")]
internal IEnumerable`1<JsValue> GetKeys();
    public virtual string ToString();
    internal virtual ulong GetSmallestIndex(ulong length);
    internal JsValue Invoke(JsValue v, JsValue p, JsValue[] arguments);
    internal bool SetIntegrityLevel(IntegrityLevel level);
    internal static void DefineField(ObjectInstance receiver, ClassFieldDefinition fieldRecord);
    public void FastSetProperty(string name, PropertyDescriptor value);
    public void FastSetProperty(JsValue property, PropertyDescriptor value);
    public void FastSetDataProperty(string name, JsValue value);
    internal void InitializeInstanceElements(ScriptFunction constructor);
    internal void PrivateMethodOrAccessorAdd(PrivateElement method);
    private void PrivateFieldAdd(PrivateName property, JsValue value);
    internal JsValue PrivateGet(PrivateName property);
    internal void PrivateSet(PrivateName property, JsValue value);
    internal PrivateElement PrivateElementFind(PrivateName property);
    [CompilerGeneratedAttribute]
private ulong <FindWithCallback>g__GetLength|64_0();
    [CompilerGeneratedAttribute]
private bool <FindWithCallback>g__TryGetValue|64_1(ulong idx, JsValue& jsValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Jint.Native.Object.ObjectPrototype : Prototype {
    private ObjectConstructor _constructor;
    internal ObjectChangeFlags _objectChangeFlags;
    internal ObjectPrototype(Engine engine, Realm realm, ObjectConstructor constructor);
    protected virtual void Initialize();
    public virtual bool DefineOwnProperty(JsValue property, PropertyDescriptor desc);
    protected internal virtual void SetOwnProperty(JsValue property, PropertyDescriptor desc);
    private void TrackChanges(JsValue property);
    private JsValue DefineGetter(JsValue thisObject, JsValue[] arguments);
    private JsValue DefineSetter(JsValue thisObject, JsValue[] arguments);
    private JsValue LookupGetter(JsValue thisObject, JsValue[] arguments);
    private JsValue LookupSetter(JsValue thisObject, JsValue[] arguments);
    private JsValue PropertyIsEnumerable(JsValue thisObject, JsValue[] arguments);
    private JsValue ValueOf(JsValue thisObject, JsValue[] arguments);
    private JsValue IsPrototypeOf(JsValue thisObject, JsValue[] arguments);
    private JsValue ToLocaleString(JsValue thisObject, JsValue[] arguments);
    internal JsValue ToObjectString(JsValue thisObject, JsValue[] arguments);
    private JsValue HasOwnProperty(JsValue thisObject, JsValue[] arguments);
    [CompilerGeneratedAttribute]
private JsValue <Initialize>b__3_4(JsValue thisObject, JsValue[] _);
    [CompilerGeneratedAttribute]
private JsValue <Initialize>b__3_5(JsValue thisObject, JsValue[] arguments);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[RequiredMemberAttribute]
internal class Jint.Native.Object.PrivateElement : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private PrivateName <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private PrivateElementKind <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private JsValue <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private JsValue <Get>k__BackingField;
    [CompilerGeneratedAttribute]
private JsValue <Set>k__BackingField;
    [NullableAttribute("1")]
[RequiredMemberAttribute]
public PrivateName Key { get; public set; }
    public PrivateElementKind Kind { get; public set; }
    public JsValue Value { get; public set; }
    public JsValue Get { get; public set; }
    public JsValue Set { get; public set; }
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public PrivateName get_Key();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_Key(PrivateName value);
    [CompilerGeneratedAttribute]
public PrivateElementKind get_Kind();
    [CompilerGeneratedAttribute]
public void set_Kind(PrivateElementKind value);
    [CompilerGeneratedAttribute]
public JsValue get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(JsValue value);
    [CompilerGeneratedAttribute]
public JsValue get_Get();
    [CompilerGeneratedAttribute]
public void set_Get(JsValue value);
    [CompilerGeneratedAttribute]
public JsValue get_Set();
    [CompilerGeneratedAttribute]
public void set_Set(JsValue value);
}
internal enum Jint.Native.Object.PrivateElementKind : Enum {
    public int value__;
    public static PrivateElementKind Field;
    public static PrivateElementKind Method;
    public static PrivateElementKind Accessor;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.PrivateIdentifierNameComparer : object {
    internal static PrivateIdentifierNameComparer _instance;
    private static PrivateIdentifierNameComparer();
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(PrivateIdentifier x, PrivateIdentifier y);
    public sealed virtual int GetHashCode(PrivateIdentifier obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.PrivateName : JsValue {
    private PrivateIdentifier _identifier;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    public string Description { get; }
    public PrivateName(PrivateIdentifier identifier);
    [CompilerGeneratedAttribute]
public string get_Description();
    public virtual string ToString();
    public virtual object ToObject();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
public virtual bool Equals(JsValue other);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(PrivateName other);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Jint.Native.Promise.ManualPromise : object {
    [CompilerGeneratedAttribute]
private JsValue <Promise>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<JsValue> <Resolve>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<JsValue> <Reject>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public JsValue Promise { get; public set; }
    public Action`1<JsValue> Resolve { get; public set; }
    public Action`1<JsValue> Reject { get; public set; }
    public ManualPromise(JsValue Promise, Action`1<JsValue> Resolve, Action`1<JsValue> Reject);
    [CompilerGeneratedAttribute]
private ManualPromise(ManualPromise original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public JsValue get_Promise();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Promise(JsValue value);
    [CompilerGeneratedAttribute]
public Action`1<JsValue> get_Resolve();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Resolve(Action`1<JsValue> value);
    [CompilerGeneratedAttribute]
public Action`1<JsValue> get_Reject();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Reject(Action`1<JsValue> value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(ManualPromise left, ManualPromise right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(ManualPromise left, ManualPromise right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(ManualPromise other);
    [CompilerGeneratedAttribute]
public ManualPromise <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(JsValue& Promise, Action`1& Resolve, Action`1& Reject);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.Promise.PromiseCapability : object {
    [CompilerGeneratedAttribute]
private JsValue <PromiseInstance>k__BackingField;
    [CompilerGeneratedAttribute]
private ICallable <Resolve>k__BackingField;
    [CompilerGeneratedAttribute]
private ICallable <Reject>k__BackingField;
    [CompilerGeneratedAttribute]
private JsValue <RejectObj>k__BackingField;
    [CompilerGeneratedAttribute]
private JsValue <ResolveObj>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public JsValue PromiseInstance { get; public set; }
    public ICallable Resolve { get; public set; }
    public ICallable Reject { get; public set; }
    public JsValue RejectObj { get; public set; }
    public JsValue ResolveObj { get; public set; }
    public PromiseCapability(JsValue PromiseInstance, ICallable Resolve, ICallable Reject, JsValue RejectObj, JsValue ResolveObj);
    [CompilerGeneratedAttribute]
private PromiseCapability(PromiseCapability original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public JsValue get_PromiseInstance();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_PromiseInstance(JsValue value);
    [CompilerGeneratedAttribute]
public ICallable get_Resolve();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Resolve(ICallable value);
    [CompilerGeneratedAttribute]
public ICallable get_Reject();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Reject(ICallable value);
    [CompilerGeneratedAttribute]
public JsValue get_RejectObj();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_RejectObj(JsValue value);
    [CompilerGeneratedAttribute]
public JsValue get_ResolveObj();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ResolveObj(JsValue value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(PromiseCapability left, PromiseCapability right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(PromiseCapability left, PromiseCapability right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(PromiseCapability other);
    [CompilerGeneratedAttribute]
public PromiseCapability <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(JsValue& PromiseInstance, ICallable& Resolve, ICallable& Reject, JsValue& RejectObj, JsValue& ResolveObj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.Promise.PromiseConstructor : Constructor {
    private static JsString _functionName;
    [CompilerGeneratedAttribute]
private PromisePrototype <PrototypeObject>k__BackingField;
    internal PromisePrototype PrototypeObject { get; }
    internal PromiseConstructor(Engine engine, Realm realm, FunctionPrototype functionPrototype, ObjectPrototype objectPrototype);
    private static PromiseConstructor();
    [CompilerGeneratedAttribute]
internal PromisePrototype get_PrototypeObject();
    protected virtual void Initialize();
    public virtual ObjectInstance Construct(JsValue[] arguments, JsValue newTarget);
    internal JsValue Resolve(JsValue thisObject, JsValue[] arguments);
    private JsObject WithResolvers(JsValue thisObject, JsValue[] arguments);
    private JsValue PromiseResolve(JsValue thisObject, JsValue x);
    private JsValue Reject(JsValue thisObject, JsValue[] arguments);
    private JsValue Try(JsValue thisObject, JsValue[] arguments);
    private bool TryGetPromiseCapabilityAndIterator(JsValue thisObject, JsValue[] arguments, string callerName, PromiseCapability& capability, ICallable& promiseResolve, IteratorInstance& iterator);
    private JsValue All(JsValue thisObject, JsValue[] arguments);
    private JsValue AllSettled(JsValue thisObject, JsValue[] arguments);
    private JsValue Any(JsValue thisObject, JsValue[] arguments);
    private JsValue Race(JsValue thisObject, JsValue[] arguments);
    private ICallable GetPromiseResolve(JsValue promiseConstructor);
    internal static PromiseCapability NewPromiseCapability(Engine engine, JsValue c);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Jint.Native.Promise.PromiseOperations : object {
    private static Action NewPromiseReactionJob(PromiseReaction reaction, JsValue value);
    internal static Action NewPromiseResolveThenableJob(JsPromise promise, ObjectInstance thenable, ICallable thenMethod);
    internal static JsValue TriggerPromiseReactions(Engine engine, List`1<PromiseReaction> reactions, JsValue result);
    internal static JsValue PerformPromiseThen(Engine engine, JsPromise promise, JsValue onFulfilled, JsValue onRejected, PromiseCapability resultCapability);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.Promise.PromisePrototype : Prototype {
    private PromiseConstructor _constructor;
    internal PromisePrototype(Engine engine, Realm realm, PromiseConstructor constructor, ObjectPrototype objectPrototype);
    protected virtual void Initialize();
    private JsValue Then(JsValue thisValue, JsValue[] arguments);
    private JsValue Catch(JsValue thisValue, JsValue[] arguments);
    private JsValue Finally(JsValue thisValue, JsValue[] arguments);
    private ClrFunction ThenFinallyFunctions(ICallable onFinally, IConstructor ctor);
    private ClrFunction CatchFinallyFunctions(ICallable onFinally, IConstructor ctor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.Promise.PromiseReaction : object {
    [CompilerGeneratedAttribute]
private ReactionType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private PromiseCapability <Capability>k__BackingField;
    [CompilerGeneratedAttribute]
private JsValue <Handler>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public ReactionType Type { get; public set; }
    public PromiseCapability Capability { get; public set; }
    public JsValue Handler { get; public set; }
    public PromiseReaction(ReactionType Type, PromiseCapability Capability, JsValue Handler);
    [CompilerGeneratedAttribute]
private PromiseReaction(PromiseReaction original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public ReactionType get_Type();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Type(ReactionType value);
    [CompilerGeneratedAttribute]
public PromiseCapability get_Capability();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Capability(PromiseCapability value);
    [CompilerGeneratedAttribute]
public JsValue get_Handler();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Handler(JsValue value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(PromiseReaction left, PromiseReaction right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(PromiseReaction left, PromiseReaction right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(PromiseReaction other);
    [CompilerGeneratedAttribute]
public PromiseReaction <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(ReactionType& Type, PromiseCapability& Capability, JsValue& Handler);
}
internal enum Jint.Native.Promise.PromiseState : Enum {
    public int value__;
    public static PromiseState Pending;
    public static PromiseState Fulfilled;
    public static PromiseState Rejected;
}
internal enum Jint.Native.Promise.ReactionType : Enum {
    public int value__;
    public static ReactionType Fulfill;
    public static ReactionType Reject;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.Promise.ResolvingFunctions : object {
    [CompilerGeneratedAttribute]
private Function <Resolve>k__BackingField;
    [CompilerGeneratedAttribute]
private Function <Reject>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public Function Resolve { get; public set; }
    public Function Reject { get; public set; }
    public ResolvingFunctions(Function Resolve, Function Reject);
    [CompilerGeneratedAttribute]
private ResolvingFunctions(ResolvingFunctions original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public Function get_Resolve();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Resolve(Function value);
    [CompilerGeneratedAttribute]
public Function get_Reject();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Reject(Function value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(ResolvingFunctions left, ResolvingFunctions right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(ResolvingFunctions left, ResolvingFunctions right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(ResolvingFunctions other);
    [CompilerGeneratedAttribute]
public ResolvingFunctions <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(Function& Resolve, Function& Reject);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Jint.Native.Prototype : ObjectInstance {
    internal Realm _realm;
    private protected Prototype(Engine engine, Realm realm);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.Proxy.ProxyConstructor : Constructor {
    private static JsString _name;
    private static JsString PropertyProxy;
    private static JsString PropertyRevoke;
    internal ProxyConstructor(Engine engine, Realm realm);
    private static ProxyConstructor();
    protected virtual void Initialize();
    public virtual ObjectInstance Construct(JsValue[] arguments, JsValue newTarget);
    [NullableContextAttribute("2")]
protected internal virtual ObjectInstance GetPrototypeOf();
    public JsProxy Construct(JsValue target, JsValue handler);
    private JsValue Revocable(JsValue thisObject, JsValue[] arguments);
    private JsProxy ProxyCreate(JsValue target, JsValue handler);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.Reflect.ReflectInstance : ObjectInstance {
    private Realm _realm;
    internal ReflectInstance(Engine engine, Realm realm, ObjectPrototype objectPrototype);
    protected virtual void Initialize();
    private JsValue Apply(JsValue thisObject, JsValue[] arguments);
    private JsValue Construct(JsValue thisObject, JsValue[] arguments);
    private JsValue DefineProperty(JsValue thisObject, JsValue[] arguments);
    private JsValue DeleteProperty(JsValue thisObject, JsValue[] arguments);
    private JsValue Has(JsValue thisObject, JsValue[] arguments);
    private JsValue Set(JsValue thisObject, JsValue[] arguments);
    private JsValue Get(JsValue thisObject, JsValue[] arguments);
    private JsValue GetOwnPropertyDescriptor(JsValue thisObject, JsValue[] arguments);
    private JsValue OwnKeys(JsValue thisObject, JsValue[] arguments);
    private JsValue IsExtensible(JsValue thisObject, JsValue[] arguments);
    private JsValue PreventExtensions(JsValue thisObject, JsValue[] arguments);
    private JsValue GetPrototypeOf(JsValue thisObject, JsValue[] arguments);
    private JsValue SetPrototypeOf(JsValue thisObject, JsValue[] arguments);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Jint.Native.RegExp.RegExpConstructor : Constructor {
    private static JsString _functionName;
    [CompilerGeneratedAttribute]
private RegExpPrototype <PrototypeObject>k__BackingField;
    internal RegExpPrototype PrototypeObject { get; }
    internal RegExpConstructor(Engine engine, Realm realm, FunctionPrototype functionPrototype, ObjectPrototype objectPrototype);
    private static RegExpConstructor();
    [CompilerGeneratedAttribute]
internal RegExpPrototype get_PrototypeObject();
    protected virtual void Initialize();
    protected internal virtual JsValue Call(JsValue thisObject, JsValue[] arguments);
    public ObjectInstance Construct(JsValue[] arguments);
    public virtual ObjectInstance Construct(JsValue[] arguments, JsValue newTarget);
    private JsRegExp RegExpInitialize(JsRegExp r, JsValue pattern, JsValue flags);
    private JsRegExp RegExpAlloc(JsValue newTarget);
    public JsRegExp Construct(Regex regExp, string source, string flags, RegExpParseResult regExpParseResult);
    private static void RegExpInitialize(JsRegExp r);
}
internal static class Jint.Native.RegExp.RegExpExtensions : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.RegExp.RegExpPrototype : Prototype {
    private static JsString PropertyExec;
    private static JsString PropertyIndex;
    private static JsString PropertyInput;
    private static JsString PropertySticky;
    private static JsString PropertyGlobal;
    internal static JsString PropertySource;
    private static JsString DefaultSource;
    internal static JsString PropertyFlags;
    private static JsString PropertyGroups;
    private static JsString PropertyIgnoreCase;
    private static JsString PropertyMultiline;
    private static JsString PropertyDotAll;
    private static JsString PropertyUnicode;
    private static JsString PropertyUnicodeSets;
    private RegExpConstructor _constructor;
    private Func`3<JsValue, JsValue[], JsValue> _defaultExec;
    internal bool HasDefaultExec { get; }
    internal RegExpPrototype(Engine engine, Realm realm, RegExpConstructor constructor, ObjectPrototype objectPrototype);
    private static RegExpPrototype();
    protected virtual void Initialize();
    private JsValue Source(JsValue thisObject, JsValue[] arguments);
    private JsValue Replace(JsValue thisObject, JsValue[] arguments);
    private static string CallFunctionalReplace(JsValue replacer, List`1<JsValue> replacerArgs);
    internal static string GetSubstitution(string matched, string str, int position, String[] captures, JsValue namedCaptures, string replacement);
    private JsValue Split(JsValue thisObject, JsValue[] arguments);
    private JsArray SplitSlow(string s, ObjectInstance splitter, bool unicodeMatching, UInt32 lengthA, long lim);
    private JsValue Flags(JsValue thisObject, JsValue[] arguments);
    private JsValue ToRegExpString(JsValue thisObject, JsValue[] arguments);
    private JsValue Test(JsValue thisObject, JsValue[] arguments);
    private JsValue Search(JsValue thisObject, JsValue[] arguments);
    private JsValue Match(JsValue thisObject, JsValue[] arguments);
    private JsValue MatchSlow(ObjectInstance rx, string s, bool fullUnicode);
    private JsValue MatchAll(JsValue thisObject, JsValue[] arguments);
    private static ulong AdvanceStringIndex(string s, ulong index, bool unicode);
    internal static JsValue RegExpExec(ObjectInstance r, string s);
    internal bool get_HasDefaultExec();
    private static JsValue RegExpBuiltinExec(JsRegExp R, string s);
    private static JsArray CreateReturnValueArray(JsRegExp rei, Match match, string s, bool fullUnicode, bool hasIndices);
    private static JsArray MakeMatchIndicesIndexPairArray(Engine engine, string s, List`1<JsNumber[]> indices, List`1<string> groupNames, bool hasGroups);
    private static JsValue GetMatchIndexPair(Engine engine, string s, JsNumber[] match);
    private static int GetActualRegexGroupCount(JsRegExp rei, Match match);
    private static string GetRegexGroupName(JsRegExp rei, int index);
    private JsValue Exec(JsValue thisObject, JsValue[] arguments);
    [CompilerGeneratedAttribute]
private GetSetPropertyDescriptor <Initialize>g__CreateGetAccessorDescriptor|17_0(string name, Func`2<JsRegExp, JsValue> valueExtractor, JsValue protoValue);
    [CompilerGeneratedAttribute]
internal static string <Flags>g__AddFlagIfPresent|24_0(JsValue o, JsValue p, char flag, string s);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.RegExp.RegExpStringIteratorPrototype : IteratorPrototype {
    internal RegExpStringIteratorPrototype(Engine engine, Realm realm, IteratorPrototype iteratorPrototype);
    protected virtual void Initialize();
    internal IteratorInstance Construct(ObjectInstance iteratingRegExp, string iteratedString, bool global, bool unicode);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.SameValueZeroComparer : object {
    public static SameValueZeroComparer Instance;
    private static SameValueZeroComparer();
    [NullableContextAttribute("2")]
private sealed virtual override bool System.Collections.Generic.IEqualityComparer<Jint.Native.JsValue>.Equals(JsValue x, JsValue y);
    public sealed virtual int GetHashCode(JsValue obj);
    [NullableContextAttribute("2")]
internal static bool Equals(JsValue x, JsValue y);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.Set.SetConstructor : Constructor {
    private static JsString _functionName;
    [CompilerGeneratedAttribute]
private SetPrototype <PrototypeObject>k__BackingField;
    internal SetPrototype PrototypeObject { get; }
    internal SetConstructor(Engine engine, Realm realm, FunctionPrototype functionPrototype, ObjectPrototype objectPrototype);
    private static SetConstructor();
    [CompilerGeneratedAttribute]
internal SetPrototype get_PrototypeObject();
    protected virtual void Initialize();
    private static JsValue Species(JsValue thisObject, JsValue[] arguments);
    public virtual ObjectInstance Construct(JsValue[] arguments, JsValue newTarget);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.Set.SetIteratorPrototype : IteratorPrototype {
    internal SetIteratorPrototype(Engine engine, Realm realm, IteratorPrototype iteratorPrototype);
    protected virtual void Initialize();
    internal IteratorInstance ConstructEntryIterator(JsSet set);
    internal IteratorInstance ConstructValueIterator(JsSet set);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.Set.SetPrototype : Prototype {
    private SetConstructor _constructor;
    internal SetPrototype(Engine engine, Realm realm, SetConstructor setConstructor, ObjectPrototype objectPrototype);
    protected virtual void Initialize();
    private JsNumber Size(JsValue thisObject, JsValue[] arguments);
    private JsValue Add(JsValue thisObject, JsValue[] arguments);
    private JsValue Clear(JsValue thisObject, JsValue[] arguments);
    private JsBoolean Delete(JsValue thisObject, JsValue[] arguments);
    private JsSet Difference(JsValue thisObject, JsValue[] arguments);
    private JsBoolean IsDisjointFrom(JsValue thisObject, JsValue[] arguments);
    private JsSet Intersection(JsValue thisObject, JsValue[] arguments);
    private JsSet SymmetricDifference(JsValue thisObject, JsValue[] arguments);
    private JsBoolean IsSubsetOf(JsValue thisObject, JsValue[] arguments);
    private JsBoolean IsSupersetOf(JsValue thisObject, JsValue[] arguments);
    private JsBoolean Has(JsValue thisObject, JsValue[] arguments);
    private ObjectInstance Entries(JsValue thisObject, JsValue[] arguments);
    private JsValue ForEach(JsValue thisObject, JsValue[] arguments);
    private JsSet Union(JsValue thisObject, JsValue[] arguments);
    private SetRecord GetSetRecord(JsValue obj);
    private ObjectInstance Values(JsValue thisObject, JsValue[] arguments);
    private JsSet AssertSetInstance(JsValue thisObject);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Jint.Native.ShadowRealm.ShadowRealm : ObjectInstance {
    internal Realm _shadowRealm;
    private ExecutionContext _executionContext;
    internal ShadowRealm(Engine engine, ExecutionContext& executionContext, Realm shadowRealm);
    public JsValue Evaluate(string sourceText, ScriptParsingOptions parsingOptions);
    public JsValue Evaluate(Prepared`1& preparedScript);
    public JsValue ImportValue(string specifier, string exportName);
    public ShadowRealm SetValue(string name, Delegate value);
    public ShadowRealm SetValue(string name, string value);
    public ShadowRealm SetValue(string name, double value);
    public ShadowRealm SetValue(string name, int value);
    public ShadowRealm SetValue(string name, bool value);
    public ShadowRealm SetValue(string name, JsValue value);
    public ShadowRealm SetValue(string name, object obj);
    internal JsValue PerformShadowRealmEval(string sourceText, ParserOptions parserOptions, Parser parser, Realm callerRealm);
    internal JsValue PerformShadowRealmEval(Prepared`1& preparedScript, Realm callerRealm);
    internal JsValue PerformShadowRealmEvalInternal(Prepared`1& preparedScript, Realm callerRealm);
    private static JsValue GetWrappedValue(Realm throwerRealm, Realm callerRealm, JsValue value);
    private static WrappedFunction WrappedFunctionCreate(Realm throwerRealm, Realm callerRealm, ObjectInstance target);
    private static void CopyNameAndLength(WrappedFunction f, ObjectInstance target, string prefix, int argCount);
    internal JsValue ShadowRealmImportValue(string specifierString, string exportNameString, Realm callerRealm);
    private static ShadowRealm ValidateShadowRealmObject(Realm callerRealm, JsValue thisObj);
    private static void ThrowCrossRealmError(Realm callerRealm, string message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Jint.Native.ShadowRealm.ShadowRealmConstructor : Constructor {
    private static JsString _functionName;
    [CompilerGeneratedAttribute]
private ShadowRealmPrototype <PrototypeObject>k__BackingField;
    private ShadowRealmPrototype PrototypeObject { get; }
    internal ShadowRealmConstructor(Engine engine, Realm realm, FunctionPrototype functionPrototype, ObjectPrototype objectPrototype);
    private static ShadowRealmConstructor();
    [CompilerGeneratedAttribute]
private ShadowRealmPrototype get_PrototypeObject();
    public ShadowRealm Construct();
    private ShadowRealm Construct(JsValue newTarget);
    public virtual ObjectInstance Construct(JsValue[] arguments, JsValue newTarget);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.ShadowRealm.ShadowRealmPrototype : Prototype {
    private ShadowRealmConstructor _constructor;
    internal ShadowRealmPrototype(Engine engine, Realm realm, ShadowRealmConstructor constructor, ObjectPrototype prototype);
    protected virtual void Initialize();
    private JsValue Evaluate(JsValue thisObject, JsValue[] arguments);
    private JsValue ImportValue(JsValue thisObject, JsValue[] arguments);
    private ShadowRealm ValidateShadowRealmObject(JsValue thisObject);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.SharedArrayBuffer.SharedArrayBufferConstructor : Constructor {
    private static JsString _functionName;
    [CompilerGeneratedAttribute]
private SharedArrayBufferPrototype <PrototypeObject>k__BackingField;
    private SharedArrayBufferPrototype PrototypeObject { get; }
    internal SharedArrayBufferConstructor(Engine engine, Realm realm, FunctionPrototype functionPrototype, ObjectPrototype objectPrototype);
    private static SharedArrayBufferConstructor();
    [CompilerGeneratedAttribute]
private SharedArrayBufferPrototype get_PrototypeObject();
    protected virtual void Initialize();
    private static JsValue IsView(JsValue thisObject, JsValue[] arguments);
    private static JsValue Species(JsValue thisObject, JsValue[] arguments);
    protected internal virtual JsValue Call(JsValue thisObject, JsValue[] arguments);
    public virtual ObjectInstance Construct(JsValue[] arguments, JsValue newTarget);
    private JsSharedArrayBuffer AllocateSharedArrayBuffer(JsValue constructor, UInt32 byteLength, Nullable`1<UInt32> maxByteLength);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.SharedArrayBuffer.SharedArrayBufferPrototype : Prototype {
    private SharedArrayBufferConstructor _constructor;
    internal SharedArrayBufferPrototype(Engine engine, SharedArrayBufferConstructor constructor, ObjectPrototype objectPrototype);
    protected virtual void Initialize();
    private JsNumber ByteLength(JsValue thisObj, JsValue[] arguments);
    private JsSharedArrayBuffer Slice(JsValue thisObj, JsValue[] arguments);
    private JsValue Growable(JsValue thisObject, JsValue[] arguments);
    private JsValue Grow(JsValue thisObject, JsValue[] arguments);
    private JsValue MaxByteLength(JsValue thisObject, JsValue[] arguments);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.String.StringConstructor : Constructor {
    private static JsString _functionName;
    [CompilerGeneratedAttribute]
private StringPrototype <PrototypeObject>k__BackingField;
    public StringPrototype PrototypeObject { get; }
    public StringConstructor(Engine engine, Realm realm, FunctionPrototype functionPrototype, ObjectPrototype objectPrototype);
    private static StringConstructor();
    [CompilerGeneratedAttribute]
public StringPrototype get_PrototypeObject();
    protected virtual void Initialize();
    private static JsValue FromCharCode(JsValue thisObj, JsValue[] arguments);
    private JsValue FromCodePoint(JsValue thisObject, JsValue[] arguments);
    private JsValue Raw(JsValue thisObject, JsValue[] arguments);
    protected internal virtual JsValue Call(JsValue thisObject, JsValue[] arguments);
    public virtual ObjectInstance Construct(JsValue[] arguments, JsValue newTarget);
    public StringInstance Construct(JsString value);
    private StringInstance StringCreate(JsString value, ObjectInstance prototype);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.String.StringExecutionContext : object {
    private static ThreadLocal`1<StringExecutionContext> _executionContext;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<string> _splitSegmentList;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private String[] _splitArray1;
    public List`1<string> SplitSegmentList { get; }
    public String[] SplitArray1 { get; }
    public static StringExecutionContext Current { get; }
    private static StringExecutionContext();
    public List`1<string> get_SplitSegmentList();
    public String[] get_SplitArray1();
    public static StringExecutionContext get_Current();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.String.StringInlHelper : object {
    private static List`1<int> GetLithuaninanReplaceableCharIdx(string input);
    public static string LithuanianStringProcessor(string input);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.String.StringInstance : ObjectInstance {
    [NullableAttribute("2")]
internal PropertyDescriptor _length;
    [CompilerGeneratedAttribute]
private JsString <StringData>k__BackingField;
    private Types Jint.Native.IJsPrimitive.Type { get; }
    private JsValue Jint.Native.IJsPrimitive.PrimitiveValue { get; }
    public JsString StringData { get; }
    public StringInstance(Engine engine, JsString value);
    private sealed virtual override Types Jint.Native.IJsPrimitive.get_Type();
    private sealed virtual override JsValue Jint.Native.IJsPrimitive.get_PrimitiveValue();
    [CompilerGeneratedAttribute]
public JsString get_StringData();
    private static bool IsInt32(double d, Int32& intValue);
    public sealed virtual PropertyDescriptor GetOwnProperty(JsValue property);
    [IteratorStateMachineAttribute("Jint.Native.String.StringInstance/<GetOwnProperties>d__11")]
public sealed virtual IEnumerable`1<KeyValuePair`2<JsValue, PropertyDescriptor>> GetOwnProperties();
    [IteratorStateMachineAttribute("Jint.Native.String.StringInstance/<GetInitialOwnStringPropertyKeys>d__12")]
internal sealed virtual IEnumerable`1<JsValue> GetInitialOwnStringPropertyKeys();
    public sealed virtual List`1<JsValue> GetOwnPropertyKeys(Types types);
    protected internal sealed virtual void SetOwnProperty(JsValue property, PropertyDescriptor desc);
    public sealed virtual void RemoveOwnProperty(JsValue property);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<KeyValuePair`2<JsValue, PropertyDescriptor>> <>n__0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.String.StringIteratorPrototype : IteratorPrototype {
    internal StringIteratorPrototype(Engine engine, Realm realm, IteratorPrototype iteratorPrototype);
    protected virtual void Initialize();
    public ObjectInstance Construct(string str);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.String.StringPrototype : StringInstance {
    private Realm _realm;
    private StringConstructor _constructor;
    [NullableAttribute("2")]
internal ClrFunction _originalIteratorFunction;
    private static char BOM_CHAR;
    internal bool HasOriginalIterator { get; }
    internal StringPrototype(Engine engine, Realm realm, StringConstructor constructor, ObjectPrototype objectPrototype);
    protected virtual void Initialize();
    internal virtual bool get_HasOriginalIterator();
    private ObjectInstance Iterator(JsValue thisObject, JsValue[] arguments);
    private JsValue ToStringString(JsValue thisObject, JsValue[] arguments);
    private static bool IsWhiteSpaceEx(char c);
    private static string TrimEndEx(string s);
    private static string TrimEnd(string s);
    internal static string TrimStartEx(string s);
    private static string TrimStart(string s);
    internal static string TrimEx(string s);
    private JsValue Trim(JsValue thisObject, JsValue[] arguments);
    private JsValue TrimStart(JsValue thisObject, JsValue[] arguments);
    private JsValue TrimEnd(JsValue thisObject, JsValue[] arguments);
    private JsValue ToLocaleUpperCase(JsValue thisObject, JsValue[] arguments);
    private JsValue ToUpperCase(JsValue thisObject, JsValue[] arguments);
    private JsValue ToLocaleLowerCase(JsValue thisObject, JsValue[] arguments);
    private JsValue ToLowerCase(JsValue thisObject, JsValue[] arguments);
    private static int ToIntegerSupportInfinity(JsValue numberVal);
    private static int ToIntegerSupportInfinityUnlikely(JsValue numberVal);
    private JsValue Substring(JsValue thisObject, JsValue[] arguments);
    private static JsValue Substr(JsValue thisObject, JsValue[] arguments);
    private JsValue Split(JsValue thisObject, JsValue[] arguments);
    internal static JsValue SplitWithStringSeparator(Realm realm, JsValue separator, string s, UInt32 lim);
    private JsValue At(JsValue thisObject, JsValue[] arguments);
    private JsValue Slice(JsValue thisObject, JsValue[] arguments);
    private JsValue Search(JsValue thisObject, JsValue[] arguments);
    private JsValue Replace(JsValue thisObject, JsValue[] arguments);
    private JsValue ReplaceAll(JsValue thisObject, JsValue[] arguments);
    private JsValue Match(JsValue thisObject, JsValue[] arguments);
    private JsValue MatchAll(JsValue thisObject, JsValue[] arguments);
    private JsValue LocaleCompare(JsValue thisObject, JsValue[] arguments);
    private JsValue LastIndexOf(JsValue thisObject, JsValue[] arguments);
    private JsValue IndexOf(JsValue thisObject, JsValue[] arguments);
    private JsValue Concat(JsValue thisObject, JsValue[] arguments);
    private JsValue CharCodeAt(JsValue thisObject, JsValue[] arguments);
    private JsValue CodePointAt(JsValue thisObject, JsValue[] arguments);
    private static CodePointResult CodePointAt(string s, int position);
    private JsValue CharAt(JsValue thisObject, JsValue[] arguments);
    private JsValue ValueOf(JsValue thisObject, JsValue[] arguments);
    private JsValue PadStart(JsValue thisObject, JsValue[] arguments);
    private JsValue PadEnd(JsValue thisObject, JsValue[] arguments);
    private JsValue StringPad(JsValue thisObject, JsValue[] arguments, bool padStart);
    private JsValue StartsWith(JsValue thisObject, JsValue[] arguments);
    private JsValue EndsWith(JsValue thisObject, JsValue[] arguments);
    private JsValue Includes(JsValue thisObject, JsValue[] arguments);
    private JsValue Normalize(JsValue thisObject, JsValue[] arguments);
    private JsValue Repeat(JsValue thisObject, JsValue[] arguments);
    private JsValue IsWellFormed(JsValue thisObject, JsValue[] arguments);
    private JsValue ToWellFormed(JsValue thisObject, JsValue[] arguments);
    private static bool IsStringWellFormedUnicode(string s);
    [CompilerGeneratedAttribute]
internal static int <ReplaceAll>g__StringIndexOf|33_0(string s, string search, int fromIndex);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Jint.Native.Symbol.GlobalSymbolRegistry : object {
    public static JsSymbol AsyncIterator;
    public static JsSymbol HasInstance;
    public static JsSymbol IsConcatSpreadable;
    public static JsSymbol Iterator;
    public static JsSymbol Match;
    public static JsSymbol MatchAll;
    public static JsSymbol Replace;
    public static JsSymbol Search;
    public static JsSymbol Species;
    public static JsSymbol Split;
    public static JsSymbol ToPrimitive;
    public static JsSymbol ToStringTag;
    public static JsSymbol Unscopables;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<JsValue, JsSymbol> _customSymbolLookup;
    private static GlobalSymbolRegistry();
    internal bool TryGetSymbol(JsValue key, JsSymbol& symbol);
    internal void Add(JsSymbol symbol);
    internal static JsSymbol CreateSymbol(JsValue description);
    internal bool ContainsCustom(JsValue value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.Symbol.SymbolConstructor : Constructor {
    private static JsString _functionName;
    [CompilerGeneratedAttribute]
private SymbolPrototype <PrototypeObject>k__BackingField;
    public SymbolPrototype PrototypeObject { get; }
    internal SymbolConstructor(Engine engine, Realm realm, FunctionPrototype functionPrototype, ObjectPrototype objectPrototype);
    private static SymbolConstructor();
    [CompilerGeneratedAttribute]
public SymbolPrototype get_PrototypeObject();
    protected virtual void Initialize();
    protected internal virtual JsValue Call(JsValue thisObject, JsValue[] arguments);
    private JsValue For(JsValue thisObject, JsValue[] arguments);
    private JsValue KeyFor(JsValue thisObject, JsValue[] arguments);
    public virtual ObjectInstance Construct(JsValue[] arguments, JsValue newTarget);
    public SymbolInstance Construct(JsSymbol symbol);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.Symbol.SymbolInstance : ObjectInstance {
    [CompilerGeneratedAttribute]
private JsSymbol <SymbolData>k__BackingField;
    private Types Jint.Native.IJsPrimitive.Type { get; }
    private JsValue Jint.Native.IJsPrimitive.PrimitiveValue { get; }
    public JsSymbol SymbolData { get; }
    internal SymbolInstance(Engine engine, SymbolPrototype prototype, JsSymbol symbol);
    private sealed virtual override Types Jint.Native.IJsPrimitive.get_Type();
    private sealed virtual override JsValue Jint.Native.IJsPrimitive.get_PrimitiveValue();
    [CompilerGeneratedAttribute]
public JsSymbol get_SymbolData();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.Symbol.SymbolPrototype : Prototype {
    private SymbolConstructor _constructor;
    internal SymbolPrototype(Engine engine, Realm realm, SymbolConstructor symbolConstructor, ObjectPrototype objectPrototype);
    protected virtual void Initialize();
    private JsValue Description(JsValue thisObject, JsValue[] arguments);
    private JsValue ToSymbolString(JsValue thisObject, JsValue[] arguments);
    private JsValue ValueOf(JsValue thisObject, JsValue[] arguments);
    private JsValue ToPrimitive(JsValue thisObject, JsValue[] arguments);
    private JsSymbol ThisSymbolValue(JsValue thisObject);
}
public class Jint.Native.TypedArray.BigInt64ArrayConstructor : TypedArrayConstructor {
    [NullableContextAttribute("1")]
internal BigInt64ArrayConstructor(Engine engine, Realm realm, IntrinsicTypedArrayConstructor functionPrototype, IntrinsicTypedArrayPrototype objectPrototype);
    public JsTypedArray Construct(ReadOnlySpan`1<long> values);
}
public class Jint.Native.TypedArray.BigUint64ArrayConstructor : TypedArrayConstructor {
    [NullableContextAttribute("1")]
internal BigUint64ArrayConstructor(Engine engine, Realm realm, IntrinsicTypedArrayConstructor functionPrototype, IntrinsicTypedArrayPrototype objectPrototype);
    public JsTypedArray Construct(ReadOnlySpan`1<ulong> values);
}
public class Jint.Native.TypedArray.Float16ArrayConstructor : TypedArrayConstructor {
    [NullableContextAttribute("1")]
internal Float16ArrayConstructor(Engine engine, Realm realm, IntrinsicTypedArrayConstructor functionPrototype, IntrinsicTypedArrayPrototype objectPrototype);
}
public class Jint.Native.TypedArray.Float32ArrayConstructor : TypedArrayConstructor {
    [NullableContextAttribute("1")]
internal Float32ArrayConstructor(Engine engine, Realm realm, IntrinsicTypedArrayConstructor functionPrototype, IntrinsicTypedArrayPrototype objectPrototype);
    public JsTypedArray Construct(ReadOnlySpan`1<float> values);
}
public class Jint.Native.TypedArray.Float64ArrayConstructor : TypedArrayConstructor {
    [NullableContextAttribute("1")]
internal Float64ArrayConstructor(Engine engine, Realm realm, IntrinsicTypedArrayConstructor functionPrototype, IntrinsicTypedArrayPrototype objectPrototype);
    public JsTypedArray Construct(ReadOnlySpan`1<double> values);
}
public class Jint.Native.TypedArray.Int16ArrayConstructor : TypedArrayConstructor {
    [NullableContextAttribute("1")]
internal Int16ArrayConstructor(Engine engine, Realm realm, IntrinsicTypedArrayConstructor functionPrototype, IntrinsicTypedArrayPrototype objectPrototype);
    public JsTypedArray Construct(ReadOnlySpan`1<short> values);
}
public class Jint.Native.TypedArray.Int32ArrayConstructor : TypedArrayConstructor {
    [NullableContextAttribute("1")]
internal Int32ArrayConstructor(Engine engine, Realm realm, IntrinsicTypedArrayConstructor functionPrototype, IntrinsicTypedArrayPrototype objectPrototype);
    public JsTypedArray Construct(ReadOnlySpan`1<int> values);
}
public class Jint.Native.TypedArray.Int8ArrayConstructor : TypedArrayConstructor {
    [NullableContextAttribute("1")]
internal Int8ArrayConstructor(Engine engine, Realm realm, IntrinsicTypedArrayConstructor functionPrototype, IntrinsicTypedArrayPrototype objectPrototype);
    public JsTypedArray Construct(ReadOnlySpan`1<sbyte> values);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.TypedArray.IntrinsicTypedArrayConstructor : Constructor {
    [CompilerGeneratedAttribute]
private IntrinsicTypedArrayPrototype <PrototypeObject>k__BackingField;
    public IntrinsicTypedArrayPrototype PrototypeObject { get; }
    internal IntrinsicTypedArrayConstructor(Engine engine, Realm realm, ObjectInstance functionPrototype, ObjectInstance objectPrototype, string functionName);
    [CompilerGeneratedAttribute]
public IntrinsicTypedArrayPrototype get_PrototypeObject();
    protected virtual void Initialize();
    private JsValue From(JsValue thisObject, JsValue[] arguments);
    private JsValue Of(JsValue thisObject, JsValue[] items);
    internal JsTypedArray TypedArraySpeciesCreate(JsTypedArray exemplar, JsValue[] argumentList);
    internal static JsTypedArray TypedArrayCreate(Realm realm, IConstructor constructor, JsValue[] argumentList);
    private static JsValue Species(JsValue thisObject, JsValue[] arguments);
    protected internal virtual JsValue Call(JsValue thisObject, JsValue[] arguments);
    public virtual ObjectInstance Construct(JsValue[] arguments, JsValue newTarget);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.TypedArray.IntrinsicTypedArrayPrototype : Prototype {
    private IntrinsicTypedArrayConstructor _constructor;
    [NullableAttribute("2")]
private ClrFunction _originalIteratorFunction;
    internal IntrinsicTypedArrayPrototype(Engine engine, ObjectInstance objectPrototype, IntrinsicTypedArrayConstructor constructor);
    protected virtual void Initialize();
    private JsValue Buffer(JsValue thisObject, JsValue[] arguments);
    private JsValue ByteLength(JsValue thisObject, JsValue[] arguments);
    private JsValue ByteOffset(JsValue thisObject, JsValue[] arguments);
    private JsValue GetLength(JsValue thisObject, JsValue[] arguments);
    internal static TypedArrayWithBufferWitnessRecord MakeTypedArrayWithBufferWitnessRecord(JsTypedArray obj, ArrayBufferOrder order);
    internal static int ArrayBufferByteLength(JsArrayBuffer arrayBuffer, ArrayBufferOrder order);
    private JsValue CopyWithin(JsValue thisObject, JsValue[] arguments);
    private JsValue Entries(JsValue thisObject, JsValue[] arguments);
    private JsValue Every(JsValue thisObject, JsValue[] arguments);
    private JsValue Fill(JsValue thisObject, JsValue[] arguments);
    private JsValue Filter(JsValue thisObject, JsValue[] arguments);
    private JsValue Find(JsValue thisObject, JsValue[] arguments);
    private JsValue FindIndex(JsValue thisObject, JsValue[] arguments);
    private JsValue FindLast(JsValue thisObject, JsValue[] arguments);
    private JsValue FindLastIndex(JsValue thisObject, JsValue[] arguments);
    private KeyValuePair`2<JsValue, JsValue> DoFind(JsValue thisObject, JsValue[] arguments, bool fromEnd);
    private JsValue ForEach(JsValue thisObject, JsValue[] arguments);
    private JsValue Includes(JsValue thisObject, JsValue[] arguments);
    private JsValue IndexOf(JsValue thisObject, JsValue[] arguments);
    private JsValue Join(JsValue thisObject, JsValue[] arguments);
    private JsValue Keys(JsValue thisObject, JsValue[] arguments);
    private JsValue LastIndexOf(JsValue thisObject, JsValue[] arguments);
    private ObjectInstance Map(JsValue thisObject, JsValue[] arguments);
    private JsValue Reduce(JsValue thisObject, JsValue[] arguments);
    private JsValue ReduceRight(JsValue thisObject, JsValue[] arguments);
    private ObjectInstance Reverse(JsValue thisObject, JsValue[] arguments);
    private JsValue Set(JsValue thisObject, JsValue[] arguments);
    private void SetTypedArrayFromTypedArray(JsTypedArray target, double targetOffset, JsTypedArray source);
    private void SetTypedArrayFromArrayLike(JsTypedArray target, int targetOffset, JsValue source);
    private JsValue At(JsValue thisObject, JsValue[] arguments);
    private JsValue Slice(JsValue thisObject, JsValue[] arguments);
    private JsValue Some(JsValue thisObject, JsValue[] arguments);
    private JsValue Sort(JsValue thisObject, JsValue[] arguments);
    private JsValue Subarray(JsValue thisObject, JsValue[] arguments);
    private JsValue ToLocaleString(JsValue thisObject, JsValue[] arguments);
    private JsValue Values(JsValue thisObject, JsValue[] arguments);
    private static JsValue ToStringTag(JsValue thisObject, JsValue[] arguments);
    private JsValue ToReversed(JsValue thisObject, JsValue[] arguments);
    private JsValue ToSorted(JsValue thisObject, JsValue[] arguments);
    private ObjectInstance With(JsValue thisObject, JsValue[] arguments);
    private JsTypedArray TypedArrayCreateSameType(JsTypedArray exemplar, JsValue[] argumentList);
    private ICallable GetCompareFunction(JsValue compareArg);
    private static JsValue[] SortArray(JsArrayBuffer buffer, ICallable compareFn, JsTypedArray obj);
    [CompilerGeneratedAttribute]
internal static string <Join>g__StringFromJsValue|24_0(JsValue value);
}
[ExtensionAttribute]
internal static class Jint.Native.TypedArray.TypeArrayHelper : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
internal static TypedArrayWithBufferWitnessRecord ValidateTypedArray(JsValue o, Realm realm, ArrayBufferOrder order);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Jint.Native.TypedArray.TypedArrayConstructor : Constructor {
    private TypedArrayElementType _arrayElementType;
    [CompilerGeneratedAttribute]
private Prototype <PrototypeObject>k__BackingField;
    private Prototype PrototypeObject { get; }
    internal TypedArrayConstructor(Engine engine, Realm realm, IntrinsicTypedArrayConstructor functionPrototype, IntrinsicTypedArrayPrototype objectPrototype, TypedArrayElementType type);
    [CompilerGeneratedAttribute]
private Prototype get_PrototypeObject();
    protected virtual void Initialize();
    public JsTypedArray Construct(JsArrayBuffer buffer, Nullable`1<int> byteOffset, Nullable`1<int> length);
    public virtual ObjectInstance Construct(JsValue[] arguments, JsValue newTarget);
    internal static List`1<JsValue> IterableToList(Realm realm, JsValue items, ICallable method);
    private void InitializeTypedArrayFromTypedArray(JsTypedArray o, JsTypedArray srcArray);
    private void InitializeTypedArrayFromArrayBuffer(JsTypedArray o, JsArrayBuffer buffer, Nullable`1<int> byteOffset, Nullable`1<int> length);
    private static void InitializeTypedArrayFromList(JsTypedArray o, List`1<JsValue> values);
    private static void InitializeTypedArrayFromArrayLike(JsTypedArray o, ObjectInstance arrayLike);
    internal JsTypedArray AllocateTypedArray(JsValue newTarget, UInt32 length);
    internal static void FillTypedArrayInstance(JsTypedArray target, ReadOnlySpan`1<T> values);
    [NullableContextAttribute("0")]
internal static void FillTypedArrayInstance(JsTypedArray target, ReadOnlySpan`1<ulong> values);
    [NullableContextAttribute("0")]
internal static void FillTypedArrayInstance(JsTypedArray target, ReadOnlySpan`1<long> values);
}
internal enum Jint.Native.TypedArray.TypedArrayContentType : Enum {
    public byte value__;
    public static TypedArrayContentType Number;
    public static TypedArrayContentType BigInt;
}
internal enum Jint.Native.TypedArray.TypedArrayElementType : Enum {
    public byte value__;
    public static TypedArrayElementType Int8;
    public static TypedArrayElementType Int16;
    public static TypedArrayElementType Int32;
    public static TypedArrayElementType BigInt64;
    public static TypedArrayElementType Float16;
    public static TypedArrayElementType Float32;
    public static TypedArrayElementType Float64;
    public static TypedArrayElementType Uint8;
    public static TypedArrayElementType Uint8C;
    public static TypedArrayElementType Uint16;
    public static TypedArrayElementType Uint32;
    public static TypedArrayElementType BigUint64;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Jint.Native.TypedArray.TypedArrayExtensions : object {
    [ExtensionAttribute]
internal static byte GetElementSize(TypedArrayElementType type);
    [ExtensionAttribute]
internal static string GetTypedArrayName(TypedArrayElementType type);
    [ExtensionAttribute]
internal static IConstructor GetConstructor(TypedArrayElementType type, Intrinsics intrinsics);
    [ExtensionAttribute]
internal static bool IsUnsignedElementType(TypedArrayElementType type);
    [ExtensionAttribute]
internal static bool FitsInt32(TypedArrayElementType type);
    [ExtensionAttribute]
internal static bool IsBigIntElementType(TypedArrayElementType type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.TypedArray.TypedArrayPrototype : Prototype {
    private TypedArrayConstructor _constructor;
    private TypedArrayElementType _arrayElementType;
    internal TypedArrayPrototype(Engine engine, IntrinsicTypedArrayPrototype objectPrototype, TypedArrayConstructor constructor, TypedArrayElementType type);
    protected virtual void Initialize();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class Jint.Native.TypedArray.TypedArrayValue : ValueType {
    [CompilerGeneratedAttribute]
private Types <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private double <DoubleValue>k__BackingField;
    [CompilerGeneratedAttribute]
private BigInteger <BigInteger>k__BackingField;
    public Types Type { get; public set; }
    public double DoubleValue { get; public set; }
    public BigInteger BigInteger { get; public set; }
    public TypedArrayValue(Types Type, double DoubleValue, BigInteger BigInteger);
    [CompilerGeneratedAttribute]
public Types get_Type();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Type(Types value);
    [CompilerGeneratedAttribute]
public double get_DoubleValue();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_DoubleValue(double value);
    [CompilerGeneratedAttribute]
public BigInteger get_BigInteger();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_BigInteger(BigInteger value);
    public static TypedArrayValue op_Implicit(double value);
    public static TypedArrayValue op_Implicit(byte value);
    public static TypedArrayValue op_Implicit(int value);
    public static TypedArrayValue op_Implicit(ushort value);
    public static TypedArrayValue op_Implicit(short value);
    public static TypedArrayValue op_Implicit(UInt32 value);
    public static TypedArrayValue op_Implicit(BigInteger value);
    public static TypedArrayValue op_Implicit(ulong value);
    public static TypedArrayValue op_Implicit(long value);
    [NullableContextAttribute("1")]
public JsValue ToJsValue();
    public sealed virtual TypeCode GetTypeCode();
    public sealed virtual bool ToBoolean(IFormatProvider provider);
    public sealed virtual char ToChar(IFormatProvider provider);
    public sealed virtual sbyte ToSByte(IFormatProvider provider);
    public sealed virtual byte ToByte(IFormatProvider provider);
    public sealed virtual short ToInt16(IFormatProvider provider);
    public sealed virtual ushort ToUInt16(IFormatProvider provider);
    public sealed virtual int ToInt32(IFormatProvider provider);
    public sealed virtual UInt32 ToUInt32(IFormatProvider provider);
    public sealed virtual long ToInt64(IFormatProvider provider);
    public sealed virtual ulong ToUInt64(IFormatProvider provider);
    public sealed virtual float ToSingle(IFormatProvider provider);
    public sealed virtual double ToDouble(IFormatProvider provider);
    public sealed virtual decimal ToDecimal(IFormatProvider provider);
    public sealed virtual DateTime ToDateTime(IFormatProvider provider);
    [NullableContextAttribute("1")]
public sealed virtual string ToString(IFormatProvider provider);
    [NullableContextAttribute("1")]
public sealed virtual object ToType(Type conversionType, IFormatProvider provider);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(TypedArrayValue left, TypedArrayValue right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(TypedArrayValue left, TypedArrayValue right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(TypedArrayValue other);
    [CompilerGeneratedAttribute]
public void Deconstruct(Types& Type, Double& DoubleValue, BigInteger& BigInteger);
}
public class Jint.Native.TypedArray.Uint16ArrayConstructor : TypedArrayConstructor {
    [NullableContextAttribute("1")]
internal Uint16ArrayConstructor(Engine engine, Realm realm, IntrinsicTypedArrayConstructor functionPrototype, IntrinsicTypedArrayPrototype objectPrototype);
    public JsTypedArray Construct(ReadOnlySpan`1<ushort> values);
}
public class Jint.Native.TypedArray.Uint32ArrayConstructor : TypedArrayConstructor {
    [NullableContextAttribute("1")]
internal Uint32ArrayConstructor(Engine engine, Realm realm, IntrinsicTypedArrayConstructor functionPrototype, IntrinsicTypedArrayPrototype objectPrototype);
    public JsTypedArray Construct(ReadOnlySpan`1<UInt32> values);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Jint.Native.TypedArray.Uint8ArrayConstructor : TypedArrayConstructor {
    private static SearchValues`1<char> Base64Alphabet;
    private static SearchValues`1<char> HexAlphabet;
    internal Uint8ArrayConstructor(Engine engine, Realm realm, IntrinsicTypedArrayConstructor functionPrototype, IntrinsicTypedArrayPrototype objectPrototype);
    private static Uint8ArrayConstructor();
    protected virtual void Initialize();
    [NullableContextAttribute("0")]
public JsTypedArray Construct(ReadOnlySpan`1<byte> values);
    private JsTypedArray FromBase64(JsValue thisObject, JsValue[] arguments);
    internal static JsString GetAndValidateLastChunkHandling(Engine engine, ObjectInstance opts);
    internal static JsString GetAndValidateAlphabetOption(Engine engine, ObjectInstance opts);
    internal static FromEncodingResult FromBase64(Engine engine, string input, string alphabet, string lastChunkHandling, UInt32 maxLength);
    private static int SkipAsciiWhitespace(string input, int index);
    private static void DecodeBase64Chunk(Engine engine, List`1<byte> into, Char[] chunk, int chunkLength, bool throwOnExtraBits);
    private JsTypedArray FromHex(JsValue thisObject, JsValue[] arguments);
    internal static FromEncodingResult FromHex(Engine engine, string s, UInt32 maxLength);
    internal static ObjectInstance GetOptionsObject(Engine engine, JsValue options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.TypedArray.Uint8ArrayPrototype : Prototype {
    private TypedArrayConstructor _constructor;
    public Uint8ArrayPrototype(Engine engine, IntrinsicTypedArrayPrototype objectPrototype, TypedArrayConstructor constructor);
    protected virtual void Initialize();
    private JsObject SetFromBase64(JsValue thisObject, JsValue[] arguments);
    private static void SetUint8ArrayBytes(JsTypedArray into, Byte[] bytes);
    private JsObject SetFromHex(JsValue thisObject, JsValue[] arguments);
    private JsValue ToBase64(JsValue thisObject, JsValue[] arguments);
    private JsValue ToHex(JsValue thisObject, JsValue[] arguments);
    [NullableContextAttribute("0")]
private ReadOnlySpan`1<byte> GetUint8ArrayBytes(JsTypedArray ta);
    private JsTypedArray ValidateUint8Array(JsValue ta);
}
public class Jint.Native.TypedArray.Uint8ClampedArrayConstructor : TypedArrayConstructor {
    [NullableContextAttribute("1")]
internal Uint8ClampedArrayConstructor(Engine engine, Realm realm, IntrinsicTypedArrayConstructor functionPrototype, IntrinsicTypedArrayPrototype objectPrototype);
    public JsTypedArray Construct(ReadOnlySpan`1<byte> values);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.WeakMap.WeakMapConstructor : Constructor {
    private static JsString _functionName;
    [CompilerGeneratedAttribute]
private WeakMapPrototype <PrototypeObject>k__BackingField;
    public WeakMapPrototype PrototypeObject { get; }
    internal WeakMapConstructor(Engine engine, Realm realm, FunctionPrototype prototype, ObjectPrototype objectPrototype);
    private static WeakMapConstructor();
    [CompilerGeneratedAttribute]
public WeakMapPrototype get_PrototypeObject();
    public virtual ObjectInstance Construct(JsValue[] arguments, JsValue newTarget);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.WeakMap.WeakMapPrototype : Prototype {
    private WeakMapConstructor _constructor;
    internal WeakMapPrototype(Engine engine, Realm realm, WeakMapConstructor constructor, ObjectPrototype prototype);
    protected virtual void Initialize();
    private JsValue Get(JsValue thisObject, JsValue[] arguments);
    private JsValue Delete(JsValue thisObject, JsValue[] arguments);
    private JsValue Set(JsValue thisObject, JsValue[] arguments);
    private JsValue Has(JsValue thisObject, JsValue[] arguments);
    private JsWeakMap AssertWeakMapInstance(JsValue thisObject);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.WeakRef.WeakRefConstructor : Constructor {
    private static JsString _functionName;
    [CompilerGeneratedAttribute]
private WeakRefPrototype <PrototypeObject>k__BackingField;
    private WeakRefPrototype PrototypeObject { get; }
    internal WeakRefConstructor(Engine engine, Realm realm, FunctionPrototype functionPrototype, ObjectPrototype objectPrototype);
    private static WeakRefConstructor();
    [CompilerGeneratedAttribute]
private WeakRefPrototype get_PrototypeObject();
    public virtual ObjectInstance Construct(JsValue[] arguments, JsValue newTarget);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.WeakRef.WeakRefPrototype : Prototype {
    private WeakRefConstructor _constructor;
    internal WeakRefPrototype(Engine engine, Realm realm, WeakRefConstructor constructor, ObjectPrototype prototype);
    protected virtual void Initialize();
    private JsValue Deref(JsValue thisObject, JsValue[] arguments);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.WeakSet.WeakSetConstructor : Constructor {
    private static JsString _functionName;
    [CompilerGeneratedAttribute]
private WeakSetPrototype <PrototypeObject>k__BackingField;
    private WeakSetPrototype PrototypeObject { get; }
    internal WeakSetConstructor(Engine engine, Realm realm, FunctionPrototype functionPrototype, ObjectPrototype objectPrototype);
    private static WeakSetConstructor();
    [CompilerGeneratedAttribute]
private WeakSetPrototype get_PrototypeObject();
    public virtual ObjectInstance Construct(JsValue[] arguments, JsValue newTarget);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Native.WeakSet.WeakSetPrototype : Prototype {
    private WeakSetConstructor _constructor;
    internal ClrFunction _originalAddFunction;
    internal WeakSetPrototype(Engine engine, Realm realm, WeakSetConstructor constructor, ObjectPrototype prototype);
    protected virtual void Initialize();
    private JsValue Add(JsValue thisObject, JsValue[] arguments);
    private JsValue Delete(JsValue thisObject, JsValue[] arguments);
    private JsValue Has(JsValue thisObject, JsValue[] arguments);
    private JsWeakSet AssertWeakSetInstance(JsValue thisObject);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Jint.Options : object {
    private static CultureInfo _defaultCulture;
    private static TimeZoneInfo _defaultTimeZone;
    [NullableAttribute("2")]
private ITimeSystem _timeSystem;
    [CompilerGeneratedAttribute]
private List`1<Action`1<Engine>> <_configurations>k__BackingField;
    [CompilerGeneratedAttribute]
private ConstraintOptions <Constraints>k__BackingField;
    [CompilerGeneratedAttribute]
private InteropOptions <Interop>k__BackingField;
    [CompilerGeneratedAttribute]
private DebuggerOptions <Debugger>k__BackingField;
    [CompilerGeneratedAttribute]
private HostOptions <Host>k__BackingField;
    [CompilerGeneratedAttribute]
private ModuleOptions <Modules>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Strict>k__BackingField;
    [CompilerGeneratedAttribute]
private CultureInfo <Culture>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeZoneInfo <TimeZone>k__BackingField;
    [CompilerGeneratedAttribute]
private IReferenceResolver <ReferenceResolver>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StringCompilationAllowed>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonOptions <Json>k__BackingField;
    [CompilerGeneratedAttribute]
private ExperimentalFeature <ExperimentalFeatures>k__BackingField;
    internal List`1<Action`1<Engine>> _configurations { get; }
    public ConstraintOptions Constraints { get; }
    public InteropOptions Interop { get; }
    public DebuggerOptions Debugger { get; }
    internal HostOptions Host { get; }
    public ModuleOptions Modules { get; }
    public bool Strict { get; public set; }
    public CultureInfo Culture { get; public set; }
    public ITimeSystem TimeSystem { get; public set; }
    public TimeZoneInfo TimeZone { get; public set; }
    public IReferenceResolver ReferenceResolver { get; public set; }
    public bool StringCompilationAllowed { get; public set; }
    public JsonOptions Json { get; public set; }
    public ExperimentalFeature ExperimentalFeatures { get; public set; }
    private static Options();
    [CompilerGeneratedAttribute]
internal List`1<Action`1<Engine>> get__configurations();
    [CompilerGeneratedAttribute]
public ConstraintOptions get_Constraints();
    [CompilerGeneratedAttribute]
public InteropOptions get_Interop();
    [CompilerGeneratedAttribute]
public DebuggerOptions get_Debugger();
    [CompilerGeneratedAttribute]
internal HostOptions get_Host();
    [CompilerGeneratedAttribute]
public ModuleOptions get_Modules();
    [CompilerGeneratedAttribute]
public bool get_Strict();
    [CompilerGeneratedAttribute]
public void set_Strict(bool value);
    [CompilerGeneratedAttribute]
public CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
public void set_Culture(CultureInfo value);
    public ITimeSystem get_TimeSystem();
    public void set_TimeSystem(ITimeSystem value);
    [CompilerGeneratedAttribute]
public TimeZoneInfo get_TimeZone();
    [CompilerGeneratedAttribute]
public void set_TimeZone(TimeZoneInfo value);
    [CompilerGeneratedAttribute]
public IReferenceResolver get_ReferenceResolver();
    [CompilerGeneratedAttribute]
public void set_ReferenceResolver(IReferenceResolver value);
    [CompilerGeneratedAttribute]
public bool get_StringCompilationAllowed();
    [CompilerGeneratedAttribute]
public void set_StringCompilationAllowed(bool value);
    [CompilerGeneratedAttribute]
public JsonOptions get_Json();
    [CompilerGeneratedAttribute]
public void set_Json(JsonOptions value);
    [CompilerGeneratedAttribute]
public ExperimentalFeature get_ExperimentalFeatures();
    [CompilerGeneratedAttribute]
public void set_ExperimentalFeatures(ExperimentalFeature value);
    internal void Apply(Engine engine);
    private static void AttachExtensionMethodsToPrototypes(Engine engine);
    private static void AttachExtensionMethodsToPrototype(Engine engine, ObjectInstance prototype, Type objectType);
    [CompilerGeneratedAttribute]
internal static PropertyDescriptor <AttachExtensionMethodsToPrototype>g__CreateMethodInstancePropertyDescriptor|57_1(ClrFunction function, <>c__DisplayClass57_0& , <>c__DisplayClass57_1& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Jint.OptionsExtensions : object {
    [ExtensionAttribute]
public static Options Strict(Options options, bool strict);
    [ExtensionAttribute]
public static Options DebuggerStatementHandling(Options options, DebuggerStatementHandling debuggerStatementHandling);
    [ExtensionAttribute]
public static Options DebugMode(Options options, bool debugMode);
    [ExtensionAttribute]
public static Options InitialStepMode(Options options, StepMode initialStepMode);
    [ExtensionAttribute]
public static Options AddObjectConverter(Options options);
    [ExtensionAttribute]
public static Options AddObjectConverter(Options options, IObjectConverter objectConverter);
    [ExtensionAttribute]
public static Options LimitRecursion(Options options, int maxRecursionDepth);
    [ExtensionAttribute]
public static Options Culture(Options options, CultureInfo cultureInfo);
    [ExtensionAttribute]
public static Options LocalTimeZone(Options options, TimeZoneInfo timeZoneInfo);
    [ExtensionAttribute]
public static Options DisableStringCompilation(Options options, bool disable);
    [ExtensionAttribute]
public static Options AddExtensionMethods(Options options, Type[] types);
    [ExtensionAttribute]
public static Options SetWrapObjectHandler(Options options, WrapObjectDelegate wrapObjectHandler);
    [ExtensionAttribute]
public static Options SetTypeConverter(Options options, Func`2<Engine, ITypeConverter> typeConverterFactory);
    [ExtensionAttribute]
public static Options SetMemberAccessor(Options options, MemberAccessorDelegate accessor);
    [ExtensionAttribute]
public static Options AllowClr(Options options, Assembly[] assemblies);
    [ExtensionAttribute]
public static Options AllowClrWrite(Options options, bool allow);
    [ExtensionAttribute]
public static Options AllowOperatorOverloading(Options options, bool allow);
    [ExtensionAttribute]
public static Options CatchClrExceptions(Options options);
    [ExtensionAttribute]
public static Options CatchClrExceptions(Options options, ExceptionHandlerDelegate handler);
    [ExtensionAttribute]
public static Options Constraint(Options options, Constraint constraint);
    [ExtensionAttribute]
public static Options WithoutConstraint(Options options, Predicate`1<Constraint> predicate);
    [ExtensionAttribute]
public static Options RegexTimeoutInterval(Options options, TimeSpan regexTimeoutInterval);
    [ExtensionAttribute]
public static Options MaxArraySize(Options options, UInt32 maxSize);
    [ExtensionAttribute]
public static Options MaxJsonParseDepth(Options options, int maxDepth);
    [ExtensionAttribute]
public static Options SetReferencesResolver(Options options, IReferenceResolver resolver);
    [ExtensionAttribute]
public static Options SetTypeResolver(Options options, TypeResolver resolver);
    [ExtensionAttribute]
public static Options Configure(Options options, Action`1<Engine> configuration);
    [ExtensionAttribute]
public static Options UseHostFactory(Options options, Func`2<Engine, T> factory);
    [ExtensionAttribute]
public static Options EnableModules(Options options, string basePath, bool restrictToBasePath);
    [ExtensionAttribute]
public static Options EnableModules(Options options, IModuleLoader moduleLoader);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Jint.Polyfills : object {
    [ExtensionAttribute]
internal static bool Contains(string source, char c);
    [ExtensionAttribute]
internal static bool StartsWith(string source, char c);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Pooling.ArgumentsInstancePool : object {
    private static int PoolSize;
    private Engine _engine;
    private ObjectPool`1<JsArguments> _pool;
    public ArgumentsInstancePool(Engine engine);
    private JsArguments Factory();
    public JsArguments Rent(JsValue[] argumentsList);
    [NullableContextAttribute("2")]
public JsArguments Rent(Function func, Key[] formals, JsValue[] argumentsList, DeclarativeEnvironment env, bool hasRestParameter);
    public void Return(JsArguments instance);
}
internal class Jint.Pooling.ConcurrentObjectPool`1 : object {
    private T _firstItem;
    private Element[] _items;
    private Factory<T> _factory;
    internal ConcurrentObjectPool`1(Factory<T> factory);
    internal ConcurrentObjectPool`1(Factory<T> factory, int size);
    private T CreateInstance();
    internal T Allocate();
    private T AllocateSlow();
    internal void Free(T obj);
    private void FreeSlow(T obj);
    [ConditionalAttribute("DEBUG")]
internal void ForgetTrackedObject(T old, T replacement);
    [ConditionalAttribute("DEBUG")]
private void Validate(object obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Pooling.JsValueArrayPool : object {
    private static int PoolSize;
    private ObjectPool`1<JsValue[]> _poolArray1;
    private ObjectPool`1<JsValue[]> _poolArray2;
    private ObjectPool`1<JsValue[]> _poolArray3;
    private static JsValue[] Factory1();
    private static JsValue[] Factory2();
    private static JsValue[] Factory3();
    public JsValue[] RentArray(int size);
    public void ReturnArray(JsValue[] array);
}
internal class Jint.Pooling.ObjectPool`1 : object {
    private T _firstItem;
    private Element[] _items;
    private Factory<T> _factory;
    internal ObjectPool`1(Factory<T> factory);
    internal ObjectPool`1(Factory<T> factory, int size);
    private T CreateInstance();
    internal T Allocate();
    private T AllocateSlow();
    internal void Free(T obj);
    private void FreeSlow(T obj);
    [ConditionalAttribute("DEBUG")]
internal void ForgetTrackedObject(T old, T replacement);
    [ConditionalAttribute("DEBUG")]
private void Validate(object obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Pooling.ReferencePool : object {
    private static int PoolSize;
    private ObjectPool`1<Reference> _pool;
    private static Reference Factory();
    public Reference Rent(JsValue baseValue, JsValue name, bool strict, JsValue thisValue);
    [NullableContextAttribute("2")]
public void Return(Reference reference);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Jint.Prepared`1 : ValueType {
    [CompilerGeneratedAttribute]
private TProgram <Program>k__BackingField;
    [CompilerGeneratedAttribute]
private ParserOptions <ParserOptions>k__BackingField;
    public TProgram Program { get; }
    public ParserOptions ParserOptions { get; }
    [MemberNotNullWhenAttribute("True", "Program")]
[MemberNotNullWhenAttribute("True", "ParserOptions")]
public bool IsValid { get; }
    [NullableContextAttribute("1")]
internal Prepared`1(TProgram program, ParserOptions parserOptions);
    [CompilerGeneratedAttribute]
public TProgram get_Program();
    [CompilerGeneratedAttribute]
public ParserOptions get_ParserOptions();
    [MemberNotNullWhenAttribute("True", "Program")]
[MemberNotNullWhenAttribute("True", "ParserOptions")]
public bool get_IsValid();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Jint.Runtime.Arguments : object {
    public static JsValue[] Empty;
    private static Arguments();
    public static JsValue[] From(JsValue[] o);
    [ExtensionAttribute]
public static JsValue At(JsValue[] args, int index, JsValue undefinedValue);
    [ExtensionAttribute]
public static JsValue At(JsValue[] args, int index);
    [ExtensionAttribute]
public static JsValue[] Skip(JsValue[] args, int count);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class Jint.Runtime.CallStack.CallStackElement : ValueType {
    public Function Function;
    [NullableAttribute("2")]
public JintExpression Expression;
    public CallStackExecutionContext CallingExecutionContext;
    [IsReadOnlyAttribute]
public SourceLocation& modreq(System.Runtime.InteropServices.InAttribute) Location { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Nullable`1<NodeList`1<Node>> Arguments { get; }
    public CallStackElement(Function function, JintExpression expression, CallStackExecutionContext& callingExecutionContext);
    public SourceLocation& modreq(System.Runtime.InteropServices.InAttribute) get_Location();
    public Nullable`1<NodeList`1<Node>> get_Arguments();
    public virtual string ToString();
    public sealed virtual bool Equals(CallStackElement other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class Jint.Runtime.CallStack.CallStackElementComparer : object {
    [NullableAttribute("1")]
public static CallStackElementComparer Instance;
    private static CallStackElementComparer();
    public sealed virtual bool Equals(CallStackElement x, CallStackElement y);
    public sealed virtual int GetHashCode(CallStackElement obj);
}
[IsReadOnlyAttribute]
internal class Jint.Runtime.CallStack.CallStackExecutionContext : ValueType {
    [NullableAttribute("1")]
internal Environment LexicalEnvironment;
    public CallStackExecutionContext(ExecutionContext& context);
    [NullableContextAttribute("1")]
internal Environment GetThisEnvironment();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(CallStackExecutionContext left, CallStackExecutionContext right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(CallStackExecutionContext left, CallStackExecutionContext right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(CallStackExecutionContext other);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Runtime.CallStack.JintCallStack : object {
    private RefStack`1<CallStackElement> _stack;
    [NullableAttribute("2")]
private Dictionary`2<CallStackElement, int> _statistics;
    internal RefStack`1<CallStackElement> Stack { get; }
    public int Count { get; }
    public JintCallStack(bool trackRecursionDepth);
    internal RefStack`1<CallStackElement> get_Stack();
    public int Push(Function function, JintExpression expression, ExecutionContext& executionContext);
    public CallStackElement Pop();
    public bool TryPeek(CallStackElement& item);
    public int get_Count();
    public void Clear();
    public virtual string ToString();
    internal string BuildCallStackString(SourceLocation location, int excludeTop);
    private static string GetPropertyKey(Node expression);
    [CompilerGeneratedAttribute]
internal static void <BuildCallStackString>g__AppendLocation|12_0(ValueStringBuilder& sb, string shortDescription, SourceLocation& loc, Nullable`1& element);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Runtime.CallStack.StackGuard : object {
    public static int Disabled;
    private Engine _engine;
    public StackGuard(Engine engine);
    public bool TryEnterOnCurrentStack();
    public static TR RunOnEmptyStack(Func`2<T1, TR> action, T1 arg1);
    private static R RunOnEmptyStackCore(Func`2<object, R> action, object state);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Jint.Runtime.CommonProperties : object {
    internal static JsString Arguments;
    internal static JsString Callee;
    internal static JsString Caller;
    internal static JsString Configurable;
    internal static JsString Constructor;
    internal static JsString Done;
    internal static JsString Enumerable;
    internal static JsString Eval;
    internal static JsString Get;
    internal static JsString Has;
    internal static JsString Infinity;
    internal static JsString Keys;
    internal static JsString Length;
    internal static JsString Message;
    internal static JsString Name;
    internal static JsString Next;
    internal static JsString Prototype;
    internal static JsString Return;
    internal static JsString Set;
    internal static JsString Size;
    internal static JsString Stack;
    internal static JsString Value;
    internal static JsString Writable;
    private static CommonProperties();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Jint.Runtime.Completion : ValueType {
    private static Node _emptyNode;
    private static Completion _emptyCompletion;
    internal Node _source;
    public CompletionType Type;
    public JsValue Value;
    [IsReadOnlyAttribute]
public SourceLocation& modreq(System.Runtime.InteropServices.InAttribute) Location { get; }
    public Completion(CompletionType type, JsValue value, Node source);
    private static Completion();
    public SourceLocation& modreq(System.Runtime.InteropServices.InAttribute) get_Location();
    public static Completion& modreq(System.Runtime.InteropServices.InAttribute) Empty();
    public JsValue GetValueOrDefault();
    public bool IsAbrupt();
    internal Completion UpdateEmpty(JsValue value);
}
public enum Jint.Runtime.CompletionType : Enum {
    public byte value__;
    public static CompletionType Normal;
    public static CompletionType Return;
    public static CompletionType Throw;
    public static CompletionType Break;
    public static CompletionType Continue;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Jint.Runtime.Debugger.BreakLocation : object {
    [CompilerGeneratedAttribute]
private string <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Line>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Column>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public string Source { get; }
    public int Line { get; }
    public int Column { get; }
    public BreakLocation(string source, int line, int column);
    public BreakLocation(int line, int column);
    public BreakLocation(string source, Position position);
    [CompilerGeneratedAttribute]
private BreakLocation(BreakLocation original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public string get_Source();
    [CompilerGeneratedAttribute]
public int get_Line();
    [CompilerGeneratedAttribute]
public int get_Column();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(BreakLocation left, BreakLocation right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(BreakLocation left, BreakLocation right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(BreakLocation other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public BreakLocation <Clone>$();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Jint.Runtime.Debugger.BreakPoint : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private BreakLocation <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Condition>k__BackingField;
    [NullableAttribute("1")]
public BreakLocation Location { get; }
    public string Condition { get; }
    public BreakPoint(string source, int line, int column, string condition);
    public BreakPoint(int line, int column, string condition);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public BreakLocation get_Location();
    [CompilerGeneratedAttribute]
public string get_Condition();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Jint.Runtime.Debugger.BreakPointCollection : object {
    private Dictionary`2<BreakLocation, BreakPoint> _breakPoints;
    [CompilerGeneratedAttribute]
private bool <Active>k__BackingField;
    public bool Active { get; public set; }
    public int Count { get; }
    [CompilerGeneratedAttribute]
public bool get_Active();
    [CompilerGeneratedAttribute]
public void set_Active(bool value);
    public int get_Count();
    public void Set(BreakPoint breakPoint);
    public bool RemoveAt(BreakLocation location);
    public bool Contains(BreakLocation location);
    public void Clear();
    internal BreakPoint FindMatch(DebugHandler debugger, BreakLocation location);
    public sealed virtual IEnumerator`1<BreakPoint> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Jint.Runtime.Debugger.CallFrame : object {
    private CallStackExecutionContext _context;
    private SourceLocation _location;
    private Nullable`1<CallStackElement> _element;
    private Lazy`1<DebugScopes> _scopeChain;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private JsValue <ReturnValue>k__BackingField;
    private Environment Environment { get; }
    public string FunctionName { get; }
    public Nullable`1<SourceLocation> FunctionLocation { get; }
    public SourceLocation& Location { get; }
    public DebugScopes ScopeChain { get; }
    public JsValue This { get; }
    [NullableAttribute("2")]
public JsValue ReturnValue { get; }
    [NullableContextAttribute("2")]
internal CallFrame(Nullable`1<CallStackElement> element, CallStackExecutionContext& context, SourceLocation& location, JsValue returnValue);
    private Environment get_Environment();
    public string get_FunctionName();
    public Nullable`1<SourceLocation> get_FunctionLocation();
    public SourceLocation& get_Location();
    public DebugScopes get_ScopeChain();
    public JsValue get_This();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public JsValue get_ReturnValue();
    [CompilerGeneratedAttribute]
private DebugScopes <.ctor>b__4_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class Jint.Runtime.Debugger.DebugCallStack : object {
    private List`1<CallFrame> _stack;
    public CallFrame Item { get; }
    public int Count { get; }
    internal DebugCallStack(Engine engine, SourceLocation location, JintCallStack callStack, JsValue returnValue);
    public sealed virtual CallFrame get_Item(int index);
    public sealed virtual int get_Count();
    public sealed virtual IEnumerator`1<CallFrame> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Jint.Runtime.Debugger.DebugEvaluationException : JintException {
    public DebugEvaluationException(string message);
    public DebugEvaluationException(string message, Exception innerException);
}
public enum Jint.Runtime.Debugger.DebuggerStatementHandling : Enum {
    public int value__;
    public static DebuggerStatementHandling Ignore;
    public static DebuggerStatementHandling Clr;
    public static DebuggerStatementHandling Script;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Jint.Runtime.Debugger.DebugHandler : object {
    [NullableAttribute("1")]
private Engine _engine;
    private bool _paused;
    private int _steppingDepth;
    [CompilerGeneratedAttribute]
private BeforeEvaluateEventHandler BeforeEvaluate;
    [CompilerGeneratedAttribute]
private DebugEventHandler Step;
    [CompilerGeneratedAttribute]
private DebugEventHandler Break;
    [CompilerGeneratedAttribute]
private DebugEventHandler Skip;
    [CompilerGeneratedAttribute]
private Nullable`1<SourceLocation> <CurrentLocation>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private BreakPointCollection <BreakPoints>k__BackingField;
    private bool IsStepping { get; }
    public Nullable`1<SourceLocation> CurrentLocation { get; private set; }
    [NullableAttribute("1")]
public BreakPointCollection BreakPoints { get; }
    [NullableContextAttribute("1")]
internal DebugHandler(Engine engine, StepMode initialStepMode);
    [CompilerGeneratedAttribute]
public void add_BeforeEvaluate(BeforeEvaluateEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_BeforeEvaluate(BeforeEvaluateEventHandler value);
    [CompilerGeneratedAttribute]
public void add_Step(DebugEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Step(DebugEventHandler value);
    [CompilerGeneratedAttribute]
public void add_Break(DebugEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Break(DebugEventHandler value);
    [CompilerGeneratedAttribute]
public void add_Skip(DebugEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Skip(DebugEventHandler value);
    private bool get_IsStepping();
    [CompilerGeneratedAttribute]
public Nullable`1<SourceLocation> get_CurrentLocation();
    [CompilerGeneratedAttribute]
private void set_CurrentLocation(Nullable`1<SourceLocation> value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public BreakPointCollection get_BreakPoints();
    [NullableContextAttribute("1")]
public JsValue Evaluate(Prepared`1& preparedScript);
    [NullableContextAttribute("1")]
public JsValue Evaluate(string sourceText, ScriptParsingOptions parsingOptions);
    [NullableContextAttribute("1")]
internal void OnBeforeEvaluate(Program ast);
    [NullableContextAttribute("1")]
internal void OnStep(Node node);
    [NullableContextAttribute("1")]
internal void OnReturnPoint(Node functionBody, JsValue returnValue);
    private void CheckBreakPointAndPause(Node node, SourceLocation& location, JsValue returnValue);
    private void Pause(PauseType type, Node node, SourceLocation& location, JsValue returnValue, BreakPoint breakPoint);
    private void HandleNewStepMode(Nullable`1<StepMode> newStepMode);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Jint.Runtime.Debugger.DebugInformation : EventArgs {
    [NullableAttribute("1")]
private Engine _engine;
    private SourceLocation _currentLocation;
    private JsValue _returnValue;
    private DebugCallStack _callStack;
    [CompilerGeneratedAttribute]
private PauseType <PauseType>k__BackingField;
    [CompilerGeneratedAttribute]
private BreakPoint <BreakPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private Node <CurrentNode>k__BackingField;
    [CompilerGeneratedAttribute]
private long <CurrentMemoryUsage>k__BackingField;
    public PauseType PauseType { get; }
    public BreakPoint BreakPoint { get; }
    [NullableAttribute("1")]
public DebugCallStack CallStack { get; }
    public Node CurrentNode { get; }
    [IsReadOnlyAttribute]
public SourceLocation& modreq(System.Runtime.InteropServices.InAttribute) Location { get; }
    public long CurrentMemoryUsage { get; }
    [NullableAttribute("1")]
public CallFrame CurrentCallFrame { get; }
    [NullableAttribute("1")]
public DebugScopes CurrentScopeChain { get; }
    public JsValue ReturnValue { get; }
    internal DebugInformation(Engine engine, Node currentNode, SourceLocation& currentLocation, JsValue returnValue, long currentMemoryUsage, PauseType pauseType, BreakPoint breakPoint);
    [CompilerGeneratedAttribute]
public PauseType get_PauseType();
    [CompilerGeneratedAttribute]
public BreakPoint get_BreakPoint();
    [NullableContextAttribute("1")]
public DebugCallStack get_CallStack();
    [CompilerGeneratedAttribute]
public Node get_CurrentNode();
    public SourceLocation& modreq(System.Runtime.InteropServices.InAttribute) get_Location();
    [CompilerGeneratedAttribute]
public long get_CurrentMemoryUsage();
    [NullableContextAttribute("1")]
public CallFrame get_CurrentCallFrame();
    [NullableContextAttribute("1")]
public DebugScopes get_CurrentScopeChain();
    public JsValue get_ReturnValue();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Jint.Runtime.Debugger.DebugScope : object {
    private Environment _record;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private String[] _bindingNames;
    [CompilerGeneratedAttribute]
private DebugScopeType <ScopeType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsTopLevel>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ObjectInstance <BindingObject>k__BackingField;
    public DebugScopeType ScopeType { get; }
    public bool IsTopLevel { get; }
    public IReadOnlyList`1<string> BindingNames { get; }
    [NullableAttribute("2")]
public ObjectInstance BindingObject { get; }
    internal DebugScope(DebugScopeType type, Environment record, bool isTopLevel);
    [CompilerGeneratedAttribute]
public DebugScopeType get_ScopeType();
    [CompilerGeneratedAttribute]
public bool get_IsTopLevel();
    public IReadOnlyList`1<string> get_BindingNames();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public ObjectInstance get_BindingObject();
    public JsValue GetBindingValue(string name);
    public void SetBindingValue(string name, JsValue value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class Jint.Runtime.Debugger.DebugScopes : object {
    private List`1<DebugScope> _scopes;
    public DebugScope Item { get; }
    public int Count { get; }
    internal DebugScopes(Environment environment);
    public sealed virtual DebugScope get_Item(int index);
    public sealed virtual int get_Count();
    [NullableContextAttribute("2")]
private void Populate(Environment environment);
    private void AddScope(DebugScopeType type, Environment record, bool isTopLevel);
    public sealed virtual IEnumerator`1<DebugScope> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public enum Jint.Runtime.Debugger.DebugScopeType : Enum {
    public int value__;
    public static DebugScopeType Global;
    public static DebugScopeType Script;
    public static DebugScopeType Local;
    public static DebugScopeType Block;
    public static DebugScopeType Catch;
    public static DebugScopeType Closure;
    public static DebugScopeType With;
    public static DebugScopeType Eval;
    public static DebugScopeType Module;
    public static DebugScopeType WasmExpressionStack;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Jint.Runtime.Debugger.OptionalSourceBreakLocationEqualityComparer : object {
    public sealed virtual bool Equals(BreakLocation x, BreakLocation y);
    public sealed virtual int GetHashCode(BreakLocation obj);
}
public enum Jint.Runtime.Debugger.PauseType : Enum {
    public int value__;
    public static PauseType Skip;
    public static PauseType Step;
    public static PauseType Break;
    public static PauseType DebuggerStatement;
}
public enum Jint.Runtime.Debugger.StepMode : Enum {
    public int value__;
    public static StepMode None;
    public static StepMode Over;
    public static StepMode Into;
    public static StepMode Out;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Runtime.DefaultReferenceResolver : object {
    public static DefaultReferenceResolver Instance;
    private static DefaultReferenceResolver();
    public sealed virtual bool TryUnresolvableReference(Engine engine, Reference reference, JsValue& value);
    public sealed virtual bool TryPropertyReference(Engine engine, Reference reference, JsValue& value);
    public sealed virtual bool TryGetCallable(Engine engine, object callee, JsValue& value);
    public sealed virtual bool CheckCoercible(JsValue value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Jint.Runtime.DefaultTimeSystem : object {
    private static String[] _defaultFormats;
    private static String[] _secondaryFormats;
    private CultureInfo _parsingCulture;
    [CompilerGeneratedAttribute]
private TimeZoneInfo <DefaultTimeZone>k__BackingField;
    public TimeZoneInfo DefaultTimeZone { get; }
    public DefaultTimeSystem(TimeZoneInfo timeZoneInfo, CultureInfo parsingCulture);
    private static DefaultTimeSystem();
    public virtual DateTimeOffset GetUtcNow();
    [CompilerGeneratedAttribute]
public sealed virtual TimeZoneInfo get_DefaultTimeZone();
    public virtual bool TryParse(string date, Int64& epochMilliseconds);
    private static bool TryParseLargeYear(string date, Int64& epochMilliseconds);
    public virtual TimeSpan GetUtcOffset(long epochMilliseconds);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Jint.Runtime.Descriptors.GetSetPropertyDescriptor : PropertyDescriptor {
    private JsValue _get;
    private JsValue _set;
    public JsValue Get { get; }
    public JsValue Set { get; }
    public GetSetPropertyDescriptor(JsValue get, JsValue set, Nullable`1<bool> enumerable, Nullable`1<bool> configurable);
    internal GetSetPropertyDescriptor(JsValue get, JsValue set, PropertyFlag flags);
    [NullableContextAttribute("1")]
public GetSetPropertyDescriptor(PropertyDescriptor descriptor);
    public virtual JsValue get_Get();
    public virtual JsValue get_Set();
    [NullableContextAttribute("1")]
internal void SetGet(JsValue getter);
    [NullableContextAttribute("1")]
internal void SetSet(JsValue setter);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("Value: {Value}, Flags: {Flags}")]
public class Jint.Runtime.Descriptors.PropertyDescriptor : object {
    [NullableAttribute("1")]
public static PropertyDescriptor Undefined;
    internal PropertyFlag _flags;
    internal JsValue _value;
    public JsValue Get { get; }
    public JsValue Set { get; }
    public bool Enumerable { get; public set; }
    public bool EnumerableSet { get; private set; }
    public bool Writable { get; public set; }
    public bool WritableSet { get; private set; }
    public bool Configurable { get; public set; }
    public bool ConfigurableSet { get; private set; }
    [NullableAttribute("1")]
public JsValue Value { get; public set; }
    protected internal JsValue CustomValue { get; protected internal set; }
    internal PropertyFlag Flags { get; }
    protected PropertyDescriptor(PropertyFlag flags);
    protected internal PropertyDescriptor(JsValue value, PropertyFlag flags);
    public PropertyDescriptor(JsValue value, Nullable`1<bool> writable, Nullable`1<bool> enumerable, Nullable`1<bool> configurable);
    [NullableContextAttribute("1")]
public PropertyDescriptor(PropertyDescriptor descriptor);
    private static PropertyDescriptor();
    public virtual JsValue get_Get();
    public virtual JsValue get_Set();
    public bool get_Enumerable();
    public void set_Enumerable(bool value);
    public bool get_EnumerableSet();
    private void set_EnumerableSet(bool value);
    public bool get_Writable();
    public void set_Writable(bool value);
    public bool get_WritableSet();
    private void set_WritableSet(bool value);
    public bool get_Configurable();
    public void set_Configurable(bool value);
    public bool get_ConfigurableSet();
    private void set_ConfigurableSet(bool value);
    [NullableContextAttribute("1")]
public JsValue get_Value();
    [NullableContextAttribute("1")]
public void set_Value(JsValue value);
    protected internal virtual JsValue get_CustomValue();
    protected internal virtual void set_CustomValue(JsValue value);
    internal PropertyFlag get_Flags();
    [NullableContextAttribute("1")]
public static PropertyDescriptor ToPropertyDescriptor(Realm realm, JsValue o);
    [NullableContextAttribute("1")]
public static JsValue FromPropertyDescriptor(Engine engine, PropertyDescriptor desc, bool strictUndefined);
    public bool IsAccessorDescriptor();
    public bool IsDataDescriptor();
    public bool IsGenericDescriptor();
}
[FlagsAttribute]
public enum Jint.Runtime.Descriptors.PropertyFlag : Enum {
    public int value__;
    public static PropertyFlag None;
    public static PropertyFlag Enumerable;
    public static PropertyFlag EnumerableSet;
    public static PropertyFlag Writable;
    public static PropertyFlag WritableSet;
    public static PropertyFlag Configurable;
    public static PropertyFlag ConfigurableSet;
    public static PropertyFlag CustomJsValue;
    public static PropertyFlag MutableBinding;
    public static PropertyFlag NonData;
    public static PropertyFlag AllForbidden;
    public static PropertyFlag ConfigurableEnumerableWritable;
    public static PropertyFlag NonConfigurable;
    public static PropertyFlag OnlyEnumerable;
    public static PropertyFlag NonEnumerable;
    public static PropertyFlag OnlyWritable;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Runtime.Descriptors.Specialized.ClrAccessDescriptor : PropertyDescriptor {
    private DeclarativeEnvironment _env;
    private Engine _engine;
    private BindingName _name;
    [NullableAttribute("2")]
private GetterFunction _get;
    [NullableAttribute("2")]
private SetterFunction _set;
    public JsValue Get { get; }
    public JsValue Set { get; }
    public ClrAccessDescriptor(DeclarativeEnvironment env, Engine engine, string name);
    public virtual JsValue get_Get();
    public virtual JsValue get_Set();
    private JsValue DoGet(JsValue n);
    private void DoSet(JsValue n, JsValue o);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Jint.Runtime.Descriptors.Specialized.LazyPropertyDescriptor`1 : PropertyDescriptor {
    [NullableAttribute("1")]
private T _state;
    [NullableAttribute("1")]
private Func`2<T, JsValue> _resolver;
    protected internal JsValue CustomValue { get; protected internal set; }
    [NullableContextAttribute("1")]
internal LazyPropertyDescriptor`1(T state, Func`2<T, JsValue> resolver, PropertyFlag flags);
    protected internal virtual JsValue get_CustomValue();
    protected internal virtual void set_CustomValue(JsValue value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Jint.Runtime.Descriptors.Specialized.ReflectionDescriptor : PropertyDescriptor {
    [NullableAttribute("1")]
private Engine _engine;
    [NullableAttribute("1")]
private ReflectionAccessor _reflectionAccessor;
    [NullableAttribute("1")]
private object _target;
    [NullableAttribute("1")]
private string _propertyName;
    private JsValue _get;
    private JsValue _set;
    public JsValue Get { get; }
    public JsValue Set { get; }
    protected internal JsValue CustomValue { get; protected internal set; }
    [NullableContextAttribute("1")]
public ReflectionDescriptor(Engine engine, ReflectionAccessor reflectionAccessor, object target, string propertyName, bool enumerable);
    public virtual JsValue get_Get();
    public virtual JsValue get_Set();
    protected internal virtual JsValue get_CustomValue();
    protected internal virtual void set_CustomValue(JsValue value);
    [NullableContextAttribute("1")]
private JsValue DoGet(JsValue thisObj);
    private void DoSet(JsValue thisObj, JsValue v);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("Mutable: {Mutable}, Strict: {Strict}, CanBeDeleted: {CanBeDeleted}, Value: {Value}")]
internal class Jint.Runtime.Environments.Binding : ValueType {
    public JsValue Value;
    public bool CanBeDeleted;
    public bool Mutable;
    public bool Strict;
    public Binding(JsValue value, bool canBeDeleted, bool mutable, bool strict);
    public Binding ChangeValue(JsValue argument);
    public bool IsInitialized();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Runtime.Environments.DeclarativeEnvironment : Environment {
    [NullableAttribute("2")]
internal HybridDictionary`1<Binding> _dictionary;
    internal bool _catchEnvironment;
    public DeclarativeEnvironment(Engine engine, bool catchEnvironment);
    internal sealed virtual bool HasBinding(BindingName name);
    internal sealed virtual bool HasBinding(Key name);
    internal virtual bool TryGetBinding(BindingName name, bool strict, JsValue& value);
    internal void CreateMutableBindingAndInitialize(Key name, bool canBeDeleted, JsValue value);
    internal void CreateImmutableBindingAndInitialize(Key name, bool strict, JsValue value);
    internal sealed virtual void CreateMutableBinding(Key name, bool canBeDeleted);
    internal sealed virtual void CreateImmutableBinding(Key name, bool strict);
    internal sealed virtual void InitializeBinding(Key name, JsValue value);
    internal sealed virtual void SetMutableBinding(BindingName name, JsValue value, bool strict);
    internal sealed virtual void SetMutableBinding(Key name, JsValue value, bool strict);
    internal virtual JsValue GetBindingValue(Key name, bool strict);
    private void ThrowUninitializedBindingError(string name);
    internal sealed virtual bool DeleteBinding(Key name);
    internal virtual bool HasThisBinding();
    internal virtual bool HasSuperBinding();
    internal sealed virtual JsValue WithBaseObject();
    internal sealed virtual bool HasBindings();
    internal sealed virtual String[] GetAllBindingNames();
    internal virtual JsValue GetThisBinding();
    public void Clear();
    internal void TransferTo(List`1<Key> names, DeclarativeEnvironment env);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerTypeProxyAttribute("Jint.Runtime.Environments.Environment/EnvironmentDebugView")]
internal abstract class Jint.Runtime.Environments.Environment : JsValue {
    protected internal Engine _engine;
    [NullableAttribute("2")]
protected internal Environment _outerEnv;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private JsValue <NewTarget>k__BackingField;
    [NullableAttribute("2")]
internal JsValue NewTarget { get; internal set; }
    protected Environment(Engine engine);
    internal abstract virtual bool HasBinding(Key name);
    internal abstract virtual bool HasBinding(BindingName name);
    internal abstract virtual bool TryGetBinding(BindingName name, bool strict, JsValue& value);
    internal abstract virtual void CreateMutableBinding(Key name, bool canBeDeleted);
    internal abstract virtual void CreateImmutableBinding(Key name, bool strict);
    internal abstract virtual void InitializeBinding(Key name, JsValue value);
    internal abstract virtual void SetMutableBinding(Key name, JsValue value, bool strict);
    internal abstract virtual void SetMutableBinding(BindingName name, JsValue value, bool strict);
    internal abstract virtual JsValue GetBindingValue(Key name, bool strict);
    internal abstract virtual bool DeleteBinding(Key name);
    internal abstract virtual bool HasThisBinding();
    internal abstract virtual bool HasSuperBinding();
    internal abstract virtual JsValue WithBaseObject();
    internal abstract virtual bool HasBindings();
    internal abstract virtual String[] GetAllBindingNames();
    public virtual object ToObject();
    [NullableContextAttribute("2")]
public virtual bool Equals(JsValue other);
    internal abstract virtual JsValue GetThisBinding();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal JsValue get_NewTarget();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_NewTarget(JsValue value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class Jint.Runtime.Environments.ExecutionContext : ValueType {
    [NullableAttribute("2")]
public IScriptOrModule ScriptOrModule;
    public Environment LexicalEnvironment;
    public Environment VariableEnvironment;
    [NullableAttribute("2")]
public PrivateEnvironment PrivateEnvironment;
    public Realm Realm;
    [NullableAttribute("2")]
public Function Function;
    [NullableAttribute("2")]
public GeneratorInstance Generator;
    [NullableAttribute("2")]
public ParserOptions ParserOptions;
    public bool Suspended { get; }
    [NullableContextAttribute("2")]
internal ExecutionContext(IScriptOrModule scriptOrModule, Environment lexicalEnvironment, Environment variableEnvironment, PrivateEnvironment privateEnvironment, Realm realm, GeneratorInstance generator, Function function, ParserOptions parserOptions);
    public bool get_Suspended();
    public ExecutionContext UpdateLexicalEnvironment(Environment lexicalEnvironment);
    public ExecutionContext UpdateVariableEnvironment(Environment variableEnvironment);
    [NullableContextAttribute("2")]
public ExecutionContext UpdatePrivateEnvironment(PrivateEnvironment privateEnvironment);
    public ExecutionContext UpdateGenerator(GeneratorInstance generator);
    internal Environment GetThisEnvironment();
    internal GeneratorKind GetGeneratorKind();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Runtime.Environments.FunctionEnvironment : DeclarativeEnvironment {
    [NullableAttribute("2")]
private JsValue _thisValue;
    private ThisBindingStatus _thisBindingStatus;
    internal Function _functionObject;
    public FunctionEnvironment(Engine engine, Function functionObject, JsValue newTarget);
    internal virtual bool HasThisBinding();
    internal virtual bool HasSuperBinding();
    public JsValue BindThisValue(JsValue value);
    internal virtual JsValue GetThisBinding();
    private void ThrowUninitializedThis();
    public JsValue GetSuperBase();
    internal void InitializeParameters(Key[] parameterNames, bool hasDuplicates, JsValue[] arguments);
    internal void AddFunctionParameters(EvaluationContext context, IFunction functionDeclaration, JsValue[] arguments);
    private void SetFunctionParameter(EvaluationContext context, Node parameter, JsValue[] arguments, int index, bool initiallyEmpty);
    private void SetFunctionParameterUnlikely(EvaluationContext context, Node parameter, JsValue[] arguments, int index, bool initiallyEmpty);
    private void HandleObjectPattern(EvaluationContext context, bool initiallyEmpty, JsValue argument, ObjectPattern objectPattern);
    private void HandleArrayPattern(EvaluationContext context, bool initiallyEmpty, JsValue argument, ArrayPattern arrayPattern);
    private void HandleRestElementArray(EvaluationContext context, RestElement restElement, JsValue[] arguments, int index, bool initiallyEmpty);
    private void HandleAssignmentPatternOrExpression(EvaluationContext context, Node left, Node right, JsValue argument, bool initiallyEmpty);
    private void SetItemSafely(Key name, JsValue argument, bool initiallyEmpty);
    private void SetItemCheckExisting(Key name, JsValue argument);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Runtime.Environments.GlobalEnvironment : Environment {
    internal ObjectInstance _global;
    [NullableAttribute("2")]
private GlobalObject _globalObject;
    internal GlobalDeclarativeEnvironment _declarativeRecord;
    public ObjectInstance GlobalThisValue { get; }
    public GlobalEnvironment(Engine engine, ObjectInstance global);
    public ObjectInstance get_GlobalThisValue();
    internal virtual bool HasBinding(Key name);
    internal virtual bool HasBinding(BindingName name);
    internal virtual bool TryGetBinding(BindingName name, bool strict, JsValue& value);
    private bool TryGetBindingForGlobalParent(BindingName name, JsValue& value);
    internal virtual void CreateMutableBinding(Key name, bool canBeDeleted);
    internal virtual void CreateImmutableBinding(Key name, bool strict);
    private void ThrowAlreadyDeclaredException(Key name);
    internal virtual void InitializeBinding(Key name, JsValue value);
    internal virtual void SetMutableBinding(Key name, JsValue value, bool strict);
    internal virtual void SetMutableBinding(BindingName name, JsValue value, bool strict);
    private void SetMutableBindingUnlikely(Key name, JsValue value, bool strict);
    internal virtual JsValue GetBindingValue(Key name, bool strict);
    internal virtual bool DeleteBinding(Key name);
    internal virtual bool HasThisBinding();
    internal virtual bool HasSuperBinding();
    internal virtual JsValue WithBaseObject();
    internal virtual JsValue GetThisBinding();
    internal bool HasLexicalDeclaration(Key name);
    internal bool HasRestrictedGlobalProperty(Key name);
    public bool CanDeclareGlobalVar(Key name);
    public bool CanDeclareGlobalFunction(Key name);
    public void CreateGlobalVarBinding(Key name, bool canBeDeleted);
    internal void CreateGlobalVarBindings(List`1<Key> names, bool canBeDeleted);
    public void CreateGlobalFunctionBinding(Key name, JsValue value, bool canBeDeleted);
    internal virtual bool HasBindings();
    internal virtual String[] GetAllBindingNames();
    [NullableContextAttribute("2")]
public virtual bool Equals(JsValue other);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Jint.Runtime.Environments.JintEnvironment : object {
    internal static bool TryGetIdentifierEnvironmentWithBinding(Environment env, BindingName name, Environment& record);
    internal static bool TryGetIdentifierEnvironmentWithBindingValue(Environment env, BindingName name, bool strict, Environment& record, JsValue& value);
    internal static DeclarativeEnvironment NewDeclarativeEnvironment(Engine engine, Environment outer, bool catchEnvironment);
    internal static FunctionEnvironment NewFunctionEnvironment(Engine engine, Function f, JsValue newTarget);
    internal static GlobalEnvironment NewGlobalEnvironment(Engine engine, ObjectInstance objectInstance, JsValue thisValue);
    internal static ObjectEnvironment NewObjectEnvironment(Engine engine, ObjectInstance objectInstance, Environment outer, bool provideThis, bool withEnvironment);
    internal static PrivateEnvironment NewPrivateEnvironment(Engine engine, PrivateEnvironment outerPriv);
    internal static ModuleEnvironment NewModuleEnvironment(Engine engine, Environment outer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Runtime.Environments.ModuleEnvironment : DeclarativeEnvironment {
    private HybridDictionary`1<IndirectBinding> _importBindings;
    internal ModuleEnvironment(Engine engine);
    internal virtual JsValue GetThisBinding();
    public void CreateImportBinding(string importName, Module module, string name);
    internal virtual JsValue GetBindingValue(Key name, bool strict);
    internal virtual bool TryGetBinding(BindingName name, bool strict, JsValue& value);
    internal virtual bool HasThisBinding();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Runtime.Environments.ObjectEnvironment : Environment {
    internal ObjectInstance _bindingObject;
    private bool _provideThis;
    private bool _withEnvironment;
    public ObjectEnvironment(Engine engine, ObjectInstance bindingObject, bool provideThis, bool withEnvironment);
    internal virtual bool HasBinding(Key name);
    internal virtual bool HasBinding(BindingName name);
    internal virtual bool TryGetBinding(BindingName name, bool strict, JsValue& value);
    private bool IsBlocked(JsValue property);
    internal virtual void CreateMutableBinding(Key name, bool canBeDeleted);
    internal virtual void CreateImmutableBinding(Key name, bool strict);
    internal virtual void InitializeBinding(Key name, JsValue value);
    internal virtual void SetMutableBinding(Key name, JsValue value, bool strict);
    internal virtual void SetMutableBinding(BindingName name, JsValue value, bool strict);
    internal virtual JsValue GetBindingValue(Key name, bool strict);
    internal virtual bool DeleteBinding(Key name);
    internal virtual bool HasThisBinding();
    internal virtual bool HasSuperBinding();
    internal virtual JsValue WithBaseObject();
    internal virtual bool HasBindings();
    internal virtual String[] GetAllBindingNames();
    [NullableContextAttribute("2")]
public virtual bool Equals(JsValue other);
    internal virtual JsValue GetThisBinding();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Runtime.Environments.PrivateEnvironment : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private PrivateEnvironment <OuterPrivateEnvironment>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<PrivateIdentifier, PrivateName> <Names>k__BackingField;
    [NullableAttribute("2")]
public PrivateEnvironment OuterPrivateEnvironment { get; }
    public Dictionary`2<PrivateIdentifier, PrivateName> Names { get; }
    [NullableContextAttribute("2")]
public PrivateEnvironment(PrivateEnvironment outerPrivEnv);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public PrivateEnvironment get_OuterPrivateEnvironment();
    [CompilerGeneratedAttribute]
public Dictionary`2<PrivateIdentifier, PrivateName> get_Names();
    public PrivateName ResolvePrivateIdentifier(string identifier);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Runtime.ErrorDispatchInfo : object {
    [CompilerGeneratedAttribute]
private ErrorConstructor <ErrorConstructor>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public ErrorConstructor ErrorConstructor { get; public set; }
    [NullableAttribute("2")]
public string Message { get; public set; }
    public ErrorDispatchInfo(ErrorConstructor ErrorConstructor, string Message);
    [CompilerGeneratedAttribute]
private ErrorDispatchInfo(ErrorDispatchInfo original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public ErrorConstructor get_ErrorConstructor();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ErrorConstructor(ErrorConstructor value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Message();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Message(string value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(ErrorDispatchInfo left, ErrorDispatchInfo right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(ErrorDispatchInfo left, ErrorDispatchInfo right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(ErrorDispatchInfo other);
    [CompilerGeneratedAttribute]
public ErrorDispatchInfo <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(ErrorConstructor& ErrorConstructor, String& Message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Runtime.EventLoop : object {
    internal ConcurrentQueue`1<Action> Events;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    [CompilerGeneratedAttribute]
private EventLoop(EventLoop original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(EventLoop left, EventLoop right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(EventLoop left, EventLoop right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(EventLoop other);
    [CompilerGeneratedAttribute]
public EventLoop <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Jint.Runtime.ExceptionHelper : object {
    [DoesNotReturnAttribute]
public static void ThrowSyntaxError(Realm realm, string message);
    [DoesNotReturnAttribute]
public static void ThrowSyntaxError(Realm realm, string message, SourceLocation& location);
    public static JavaScriptException CreateSyntaxError(Realm realm, string message);
    [NullableContextAttribute("2")]
[DoesNotReturnAttribute]
public static void ThrowArgumentException(string message);
    [NullableContextAttribute("2")]
[DoesNotReturnAttribute]
public static void ThrowArgumentException(string message, string paramName);
    [DoesNotReturnAttribute]
public static void ThrowReferenceError(Realm realm, Reference reference);
    [DoesNotReturnAttribute]
public static void ThrowReferenceNameError(Realm realm, string name);
    [DoesNotReturnAttribute]
public static void ThrowReferenceError(Realm realm, string message);
    [NullableContextAttribute("2")]
[DoesNotReturnAttribute]
public static void ThrowTypeErrorNoEngine(string message, Node source);
    [DoesNotReturnAttribute]
public static void ThrowTypeError(Realm realm, string message);
    [DoesNotReturnAttribute]
public static void ThrowRangeError(Realm realm, string message);
    public static ErrorDispatchInfo CreateUriError(Realm realm, string message);
    public static ErrorDispatchInfo CreateRangeError(Realm realm, string message);
    [NullableContextAttribute("2")]
[DoesNotReturnAttribute]
public static void ThrowNotImplementedException(string message);
    [DoesNotReturnAttribute]
public static void ThrowArgumentOutOfRangeException(string paramName, string message);
    [DoesNotReturnAttribute]
public static void ThrowTimeoutException();
    [DoesNotReturnAttribute]
public static void ThrowStatementsCountOverflowException();
    [DoesNotReturnAttribute]
public static void ThrowArgumentOutOfRangeException();
    [NullableContextAttribute("2")]
[DoesNotReturnAttribute]
public static void ThrowNotSupportedException(string message);
    [NullableContextAttribute("2")]
[DoesNotReturnAttribute]
public static void ThrowInvalidOperationException(string message, Exception exception);
    [DoesNotReturnAttribute]
public static void ThrowPromiseRejectedException(JsValue error);
    [DoesNotReturnAttribute]
public static void ThrowJavaScriptException(Engine engine, JsValue value, Completion& result);
    [DoesNotReturnAttribute]
public static void ThrowJavaScriptException(Engine engine, JsValue value, SourceLocation& location);
    [DoesNotReturnAttribute]
public static void ThrowJavaScriptException(ErrorConstructor errorConstructor, string message);
    [DoesNotReturnAttribute]
public static void ThrowRecursionDepthOverflowException(JintCallStack currentStack);
    [DoesNotReturnAttribute]
public static void ThrowArgumentNullException(string paramName);
    [DoesNotReturnAttribute]
public static void ThrowMeaningfulException(Engine engine, TargetInvocationException exception);
    [DoesNotReturnAttribute]
internal static void ThrowError(Engine engine, string message);
    [DoesNotReturnAttribute]
public static void ThrowPlatformNotSupportedException(string message);
    [DoesNotReturnAttribute]
public static void ThrowMemoryLimitExceededException(string message);
    [DoesNotReturnAttribute]
public static void ThrowExecutionCanceledException();
    [DoesNotReturnAttribute]
public static void ThrowModuleResolutionException(string message, string specifier, string parent, string filePath);
    [DoesNotReturnAttribute]
public static void ThrowInvalidPreparedScriptArgumentException(string paramName);
    [DoesNotReturnAttribute]
public static void ThrowInvalidPreparedModuleArgumentException(string paramName);
}
public class Jint.Runtime.ExecutionCanceledException : JintException {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Runtime.ExecutionContextStack : object {
    private RefStack`1<ExecutionContext> _stack;
    public ExecutionContextStack(int capacity);
    public void ReplaceTopLexicalEnvironment(Environment newEnv);
    public void ReplaceTopVariableEnvironment(Environment newEnv);
    [NullableContextAttribute("2")]
public void ReplaceTopPrivateEnvironment(PrivateEnvironment newEnv);
    public ExecutionContext& modreq(System.Runtime.InteropServices.InAttribute) ReplaceTopGenerator(GeneratorInstance newEnv);
    public ExecutionContext& modreq(System.Runtime.InteropServices.InAttribute) Peek();
    public ExecutionContext& modreq(System.Runtime.InteropServices.InAttribute) Peek(int fromTop);
    public void Push(ExecutionContext& context);
    public ExecutionContext& modreq(System.Runtime.InteropServices.InAttribute) Pop();
    [NullableContextAttribute("2")]
public IScriptOrModule GetActiveScriptOrModule();
    [NullableContextAttribute("2")]
public ParserOptions GetActiveParserOptions();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Jint.Runtime.Host : object {
    [NullableAttribute("2")]
private Engine _engine;
    private List`1<string> _supportedImportAttributes;
    protected Engine Engine { get; private set; }
    protected Engine get_Engine();
    private void set_Engine(Engine value);
    public void Initialize(Engine engine);
    protected virtual void PostInitialize();
    protected virtual void InitializeHostDefinedRealm();
    internal virtual GlobalEnvironment CreateGlobalEnvironment(ObjectInstance globalObject);
    protected virtual ObjectInstance CreateGlobalObject(Realm realm);
    protected internal virtual Realm CreateRealm();
    protected virtual void CreateIntrinsics(Realm realmRec);
    public virtual void EnsureCanCompileStrings(Realm callerRealm, Realm evalRealm);
    internal virtual Module GetImportedModule(IScriptOrModule referrer, ModuleRequest request);
    internal virtual void LoadImportedModule(IScriptOrModule referrer, ModuleRequest moduleRequest, PromiseCapability payload);
    internal virtual void FinishLoadingImportedModule(IScriptOrModule referrer, ModuleRequest moduleRequest, PromiseCapability payload, JsPromise result);
    public virtual List`1<KeyValuePair`2<JsValue, JsValue>> GetImportMetaProperties(Module moduleRecord);
    public virtual void FinalizeImportMeta(ObjectInstance importMeta, Module moduleRecord);
    public virtual void InitializeShadowRealm(Realm realm);
    internal virtual JobCallback MakeJobCallBack(ICallable cleanupCallback);
    internal void HostEnqueuePromiseJob(Action job, Realm realm);
    internal virtual List`1<string> GetSupportedImportAttributes();
}
[FlagsAttribute]
internal enum Jint.Runtime.InternalTypes : Enum {
    public int value__;
    public static InternalTypes Empty;
    public static InternalTypes Undefined;
    public static InternalTypes Null;
    public static InternalTypes Boolean;
    public static InternalTypes String;
    public static InternalTypes Number;
    public static InternalTypes Integer;
    public static InternalTypes Symbol;
    public static InternalTypes BigInt;
    public static InternalTypes Object;
    public static InternalTypes PrivateName;
    public static InternalTypes ObjectEnvironmentRecord;
    public static InternalTypes RequiresCloning;
    public static InternalTypes Module;
    public static InternalTypes PlainObject;
    public static InternalTypes Array;
    public static InternalTypes Primitive;
    public static InternalTypes InternalFlags;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Jint.Runtime.Interop.ArrayLikeWrapper : ObjectWrapper {
    [CompilerGeneratedAttribute]
private Type <ItemType>k__BackingField;
    private Type ItemType { get; }
    public int Length { get; }
    protected ArrayLikeWrapper(Engine engine, object obj, Type itemType, Type type);
    [CompilerGeneratedAttribute]
private Type get_ItemType();
    public abstract virtual int get_Length();
    public virtual JsValue Get(JsValue property, JsValue receiver);
    public virtual bool HasProperty(JsValue property);
    public virtual bool Delete(JsValue property);
    [NullableContextAttribute("2")]
public abstract virtual object GetAt(int index);
    public void SetAt(int index, JsValue value);
    [NullableContextAttribute("2")]
protected abstract virtual void DoSetAt(int index, object value);
    public abstract virtual void AddDefault();
    public abstract virtual void Add(JsValue value);
    public abstract virtual void RemoveAt(int index);
    public virtual void EnsureCapacity(int capacity);
    protected object ConvertToItemType(JsValue value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Jint.Runtime.Interop.ClrFunction : Function {
    internal Func`3<JsValue, JsValue[], JsValue> _func;
    private bool _bubbleExceptions;
    public ClrFunction(Engine engine, string name, Func`3<JsValue, JsValue[], JsValue> func, int length, PropertyFlag lengthFlags);
    protected internal virtual JsValue Call(JsValue thisObject, JsValue[] arguments);
    private JsValue CallSlow(JsValue thisObject, JsValue[] arguments);
    [NullableContextAttribute("2")]
public virtual bool Equals(JsValue other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(ClrFunction other);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Runtime.Interop.ClrHelper : object {
    private InteropOptions _interopOptions;
    internal ClrHelper(InteropOptions interopOptions);
    public JsValue ToString(JsValue value);
    public JsValue Unwrap(ObjectWrapper obj);
    public JsValue Wrap(ObjectWrapper obj, TypeReference type);
    public JsValue TypeOf(ObjectWrapper obj);
    public JsValue TypeToObject(TypeReference type);
    public JsValue ObjectToType(ObjectWrapper obj);
    private void MustAllowGetType();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Jint.Runtime.Interop.DefaultTypeConverter : object {
    private Engine _engine;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ConcurrentDictionary`2<TypeConversionKey, MethodInfo> _knownCastOperators;
    private static Type intType;
    private static Type iCallableType;
    private static Type jsValueType;
    private static Type objectType;
    private static Type engineType;
    private static Type typeType;
    private static MethodInfo convertChangeType;
    private static MethodInfo jsValueFromObject;
    private static MethodInfo jsValueToObject;
    public DefaultTypeConverter(Engine engine);
    private static DefaultTypeConverter();
    public virtual object Convert(object value, Type type, IFormatProvider formatProvider);
    public virtual bool TryConvert(object value, Type type, IFormatProvider formatProvider, Object& converted);
    [NullableContextAttribute("2")]
private bool TryConvert(object value, Type type, IFormatProvider formatProvider, bool propagateException, Object& converted, String& problemMessage);
    private Delegate BuildDelegate(Type type, Func`3<JsValue, JsValue[], JsValue> function);
    private static bool TryCastWithOperators(object value, Type type, Type valueType, Object& converted);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal static MethodInfo <TryCastWithOperators>g__CreateValueFactory|17_0(TypeConversionKey k);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Runtime.Interop.DelegateWrapper : Function {
    private static JsString _name;
    private Delegate _d;
    private bool _delegateContainsParamsArgument;
    public DelegateWrapper(Engine engine, Delegate d);
    private static DelegateWrapper();
    protected internal virtual JsValue Call(JsValue thisObject, JsValue[] arguments);
    [NullableContextAttribute("2")]
private static bool IsAwaitable(object obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Runtime.Interop.GenericListWrapper`1 : ArrayLikeWrapper {
    private IList`1<T> _list;
    public int Length { get; }
    public GenericListWrapper`1(Engine engine, IList`1<T> target, Type type);
    public virtual int get_Length();
    [NullableContextAttribute("2")]
public virtual object GetAt(int index);
    [NullableContextAttribute("2")]
protected virtual void DoSetAt(int index, object value);
    public virtual void AddDefault();
    public virtual void Add(JsValue value);
    public virtual void RemoveAt(int index);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Runtime.Interop.GetterFunction : Function {
    private static JsString _name;
    private Func`2<JsValue, JsValue> _getter;
    public GetterFunction(Engine engine, Func`2<JsValue, JsValue> getter);
    private static GetterFunction();
    protected internal virtual JsValue Call(JsValue thisObject, JsValue[] arguments);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Runtime.Interop.InteropHelper : object {
    internal static DynamicallyAccessedMemberTypes DefaultDynamicallyAccessedMemberTypes;
    internal static AssignableResult IsAssignableToGenericType(Type givenType, Type genericType);
    private static int CalculateMethodParameterScore(Engine engine, ParameterInfo parameter, JsValue parameterValue);
    private static int CalculateMethodScore(Engine engine, MethodDescriptor method, JsValue[] arguments);
    private static bool CanChangeType(object value, Type targetType);
    internal static bool TypeIsNullable(Type type);
    [IteratorStateMachineAttribute("Jint.Runtime.Interop.InteropHelper/<FindBestMatch>d__8")]
internal static IEnumerable`1<MethodMatch> FindBestMatch(Engine engine, MethodDescriptor[] methods, Func`2<MethodDescriptor, JsValue[]> argumentProvider);
}
[NullableContextAttribute("1")]
public interface Jint.Runtime.Interop.IObjectConverter {
    public abstract virtual bool TryConvert(Engine engine, object value, JsValue& result);
}
[NullableContextAttribute("1")]
public interface Jint.Runtime.Interop.IObjectWrapper {
    public object Target { get; }
    public abstract virtual object get_Target();
}
[NullableContextAttribute("1")]
public interface Jint.Runtime.Interop.IReferenceResolver {
    public abstract virtual bool TryUnresolvableReference(Engine engine, Reference reference, JsValue& value);
    public abstract virtual bool TryPropertyReference(Engine engine, Reference reference, JsValue& value);
    public abstract virtual bool TryGetCallable(Engine engine, object callee, JsValue& value);
    public abstract virtual bool CheckCoercible(JsValue value);
}
[NullableContextAttribute("1")]
public interface Jint.Runtime.Interop.ITypeConverter {
    public abstract virtual object Convert(object value, Type type, IFormatProvider formatProvider);
    public abstract virtual bool TryConvert(object value, Type type, IFormatProvider formatProvider, Object& converted);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Jint.Runtime.Interop.ListWrapper : ArrayLikeWrapper {
    private IList _list;
    public int Length { get; }
    [NullableContextAttribute("1")]
internal ListWrapper(Engine engine, IList target, Type type);
    public virtual int get_Length();
    public virtual object GetAt(int index);
    protected virtual void DoSetAt(int index, object value);
    public virtual void AddDefault();
    [NullableContextAttribute("1")]
public virtual void Add(JsValue value);
    public virtual void RemoveAt(int index);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Runtime.Interop.MethodDescriptor : object {
    [CompilerGeneratedAttribute]
private MethodBase <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private ParameterInfo[] <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasParams>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ParameterDefaultValuesCount>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsExtensionMethod>k__BackingField;
    public MethodBase Method { get; }
    public ParameterInfo[] Parameters { get; }
    public bool HasParams { get; }
    public int ParameterDefaultValuesCount { get; }
    public bool IsExtensionMethod { get; }
    internal MethodDescriptor(MethodBase method);
    [CompilerGeneratedAttribute]
public MethodBase get_Method();
    [CompilerGeneratedAttribute]
public ParameterInfo[] get_Parameters();
    [CompilerGeneratedAttribute]
public bool get_HasParams();
    [CompilerGeneratedAttribute]
public int get_ParameterDefaultValuesCount();
    [CompilerGeneratedAttribute]
public bool get_IsExtensionMethod();
    public static MethodDescriptor[] Build(List`1<T> source);
    public static MethodDescriptor[] Build(T[] source);
    private static MethodDescriptor[] Prioritize(MethodDescriptor[] descriptors);
    public JsValue Call(Engine engine, object instance, JsValue[] arguments);
    [CompilerGeneratedAttribute]
internal static int <Prioritize>g__CreateComparison|18_0(MethodDescriptor d1, MethodDescriptor d2);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Runtime.Interop.MethodInfoFunction : Function {
    private Type _targetType;
    [NullableAttribute("2")]
private object _target;
    private string _name;
    private MethodDescriptor[] _methods;
    [NullableAttribute("2")]
private ClrFunction _fallbackClrFunctionInstance;
    public MethodInfoFunction(Engine engine, Type targetType, object target, string name, MethodDescriptor[] methods, ClrFunction fallbackClrFunctionInstance);
    private static bool IsGenericParameter(object argObj, Type parameterType);
    private static void HandleGenericParameter(object argObj, Type parameterType, Type[] genericArgTypes);
    private static MethodBase ResolveMethod(MethodBase method, ParameterInfo[] methodParameters, JsValue[] arguments);
    protected internal virtual JsValue Call(JsValue thisObject, JsValue[] jsArguments);
    private JsValue[] ProcessParamsArrays(JsValue[] jsArguments, MethodDescriptor methodInfo);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Jint.Runtime.Interop.NamespaceReference : ObjectInstance {
    [NullableAttribute("2")]
private string _path;
    public NamespaceReference(Engine engine, string path);
    public virtual bool DefineOwnProperty(JsValue property, PropertyDescriptor desc);
    public virtual bool Delete(JsValue property);
    private sealed virtual override JsValue Jint.Native.ICallable.Call(JsValue thisObject, JsValue[] arguments);
    public virtual JsValue Get(JsValue property, JsValue receiver);
    public JsValue GetPath(string path);
    private static Type GetType(Assembly assembly, string typeName);
    private static Type[] GetAllNestedTypes(Type type);
    private static void AddNestedTypesRecursively(List`1<Type> types, Type type);
    public virtual PropertyDescriptor GetOwnProperty(JsValue property);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Jint.Runtime.Interop.ObjectExtensions : object {
    [ExtensionAttribute]
public static object GetHiddenClrObjectProperty(ObjectInstance obj, string name);
    [ExtensionAttribute]
public static void SetHiddenClrObjectProperty(ObjectInstance obj, string name, object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Jint.Runtime.Interop.ObjectWrapper : ObjectInstance {
    internal TypeDescriptor _typeDescriptor;
    [CompilerGeneratedAttribute]
private object <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ClrType>k__BackingField;
    public object Target { get; }
    public Type ClrType { get; }
    internal bool IsArrayLike { get; }
    internal bool HasOriginalIterator { get; }
    internal bool IsIntegerIndexedArray { get; }
    internal ObjectWrapper(Engine engine, object obj, Type type);
    public static ObjectInstance Create(Engine engine, object target, Type type);
    private static bool TryBuildArrayLikeWrapper(Engine engine, object target, Type type, ArrayLikeWrapper& result);
    [CompilerGeneratedAttribute]
public sealed virtual object get_Target();
    [CompilerGeneratedAttribute]
public Type get_ClrType();
    internal virtual bool get_IsArrayLike();
    internal virtual bool get_HasOriginalIterator();
    internal virtual bool get_IsIntegerIndexedArray();
    public virtual bool Set(JsValue property, JsValue value, JsValue receiver);
    private bool SetSlow(JsValue property, JsValue value);
    public virtual object ToObject();
    public virtual void RemoveOwnProperty(JsValue property);
    public virtual JsValue Get(JsValue property, JsValue receiver);
    public virtual List`1<JsValue> GetOwnPropertyKeys(Types types);
    [IteratorStateMachineAttribute("Jint.Runtime.Interop.ObjectWrapper/<GetOwnProperties>d__22")]
public virtual IEnumerable`1<KeyValuePair`2<JsValue, PropertyDescriptor>> GetOwnProperties();
    [IteratorStateMachineAttribute("Jint.Runtime.Interop.ObjectWrapper/<EnumerateOwnPropertyKeys>d__23")]
private IEnumerable`1<JsValue> EnumerateOwnPropertyKeys(Types types);
    public virtual PropertyDescriptor GetOwnProperty(JsValue property);
    private PropertyDescriptor GetOwnProperty(JsValue property, bool mustBeReadable, bool mustBeWritable);
    public static PropertyDescriptor GetPropertyDescriptor(Engine engine, object target, MemberInfo member);
    internal static Type GetClrType(object obj, Type type);
    private static JsValue Iterator(JsValue thisObject, JsValue[] arguments);
    private static JsNumber GetLength(JsValue thisObject, JsValue[] arguments);
    internal virtual ulong GetSmallestIndex(ulong length);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
public virtual bool Equals(JsValue other);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(ObjectWrapper other);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Runtime.Interop.ReadOnlyListWrapper`1 : ArrayLikeWrapper {
    private IReadOnlyList`1<T> _list;
    public int Length { get; }
    public ReadOnlyListWrapper`1(Engine engine, IReadOnlyList`1<T> target, Type type);
    public virtual int get_Length();
    [NullableContextAttribute("2")]
public virtual object GetAt(int index);
    public virtual void AddDefault();
    [NullableContextAttribute("2")]
protected virtual void DoSetAt(int index, object value);
    public virtual void Add(JsValue value);
    public virtual void RemoveAt(int index);
    public virtual void EnsureCapacity(int capacity);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Runtime.Interop.Reflection.ConstantValueAccessor : ReflectionAccessor {
    public static ConstantValueAccessor NullAccessor;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private JsValue <ConstantValue>k__BackingField;
    public bool Writable { get; }
    [NullableAttribute("2")]
protected JsValue ConstantValue { get; }
    [NullableContextAttribute("2")]
public ConstantValueAccessor(JsValue value);
    private static ConstantValueAccessor();
    public virtual bool get_Writable();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected virtual JsValue get_ConstantValue();
    protected virtual object DoGetValue(object target, string memberName);
    protected virtual void DoSetValue(object target, string memberName, object value);
    public virtual PropertyDescriptor CreatePropertyDescriptor(Engine engine, object target, string memberName, bool enumerable);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Runtime.Interop.Reflection.DynamicObjectAccessor : ReflectionAccessor {
    [NullableAttribute("2")]
private JintSetMemberBinder _setter;
    [NullableAttribute("2")]
private JintGetMemberBinder _getter;
    public bool Writable { get; }
    public virtual bool get_Writable();
    protected virtual object DoGetValue(object target, string memberName);
    protected virtual void DoSetValue(object target, string memberName, object value);
    protected virtual object ConvertValueToSet(Engine engine, object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Runtime.Interop.Reflection.ExtensionMethodCache : object {
    internal static ExtensionMethodCache Empty;
    private Dictionary`2<Type, MethodInfo[]> _allExtensionMethods;
    private Dictionary`2<Type, MethodInfo[]> _extensionMethods;
    public bool HasMethods { get; }
    private ExtensionMethodCache(Dictionary`2<Type, MethodInfo[]> extensionMethods);
    private static ExtensionMethodCache();
    internal static ExtensionMethodCache Build(List`1<Type> extensionMethodContainerTypes);
    public bool get_HasMethods();
    public bool TryGetExtensionMethods(Type objectType, MethodInfo[]& methods);
    [IteratorStateMachineAttribute("Jint.Runtime.Interop.Reflection.ExtensionMethodCache/<GetParentTypes>d__8")]
private static IEnumerable`1<Type> GetParentTypes(Type type);
    [CompilerGeneratedAttribute]
internal static Type <Build>g__GetTypeDefinition|4_0(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Runtime.Interop.Reflection.FieldAccessor : ReflectionAccessor {
    private FieldInfo _fieldInfo;
    public bool Writable { get; }
    public FieldAccessor(FieldInfo fieldInfo, PropertyInfo indexer);
    public virtual bool get_Writable();
    protected virtual object DoGetValue(object target, string memberName);
    protected virtual void DoSetValue(object target, string memberName, object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Runtime.Interop.Reflection.IndexerAccessor : ReflectionAccessor {
    private object _key;
    [NullableAttribute("2")]
private MethodInfo _getter;
    [NullableAttribute("2")]
private MethodInfo _setter;
    [NullableAttribute("2")]
private MethodInfo _containsKey;
    [CompilerGeneratedAttribute]
private PropertyInfo <Indexer>k__BackingField;
    [CompilerGeneratedAttribute]
private ParameterInfo <FirstIndexParameter>k__BackingField;
    internal PropertyInfo Indexer { get; }
    internal ParameterInfo FirstIndexParameter { get; }
    public bool Readable { get; }
    public bool Writable { get; }
    private IndexerAccessor(PropertyInfo indexer, MethodInfo containsKey, object key);
    [CompilerGeneratedAttribute]
internal PropertyInfo get_Indexer();
    [CompilerGeneratedAttribute]
internal ParameterInfo get_FirstIndexParameter();
    internal static bool TryFindIndexer(Engine engine, Type targetType, string propertyName, IndexerAccessor& indexerAccessor, PropertyInfo& indexer);
    private static IndexerAccessor ComposeIndexerFactory(Engine engine, Type targetType, PropertyInfo candidate, Type paramType, string propertyName, Nullable`1<int> integerKey, Type[] paramTypeArray);
    public virtual bool get_Readable();
    public virtual bool get_Writable();
    protected virtual object DoGetValue(object target, string memberName);
    protected virtual void DoSetValue(object target, string memberName, object value);
    public virtual PropertyDescriptor CreatePropertyDescriptor(Engine engine, object target, string memberName, bool enumerable);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Runtime.Interop.Reflection.MethodAccessor : ReflectionAccessor {
    private Type _targetType;
    private MethodDescriptor[] _methods;
    public bool Writable { get; }
    public MethodAccessor(Type targetType, MethodDescriptor[] methods);
    public virtual bool get_Writable();
    protected virtual object DoGetValue(object target, string memberName);
    protected virtual void DoSetValue(object target, string memberName, object value);
    public virtual PropertyDescriptor CreatePropertyDescriptor(Engine engine, object target, string memberName, bool enumerable);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Runtime.Interop.Reflection.NestedTypeAccessor : ReflectionAccessor {
    private TypeReference _typeReference;
    public bool Writable { get; }
    public NestedTypeAccessor(TypeReference typeReference);
    public virtual bool get_Writable();
    protected virtual object DoGetValue(object target, string memberName);
    protected virtual void DoSetValue(object target, string memberName, object value);
    public virtual PropertyDescriptor CreatePropertyDescriptor(Engine engine, object target, string memberName, bool enumerable);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Runtime.Interop.Reflection.PropertyAccessor : ReflectionAccessor {
    private PropertyInfo _propertyInfo;
    public bool Readable { get; }
    public bool Writable { get; }
    public PropertyAccessor(PropertyInfo propertyInfo, PropertyInfo indexerToTry);
    public virtual bool get_Readable();
    public virtual bool get_Writable();
    protected virtual object DoGetValue(object target, string memberName);
    protected virtual void DoSetValue(object target, string memberName, object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Jint.Runtime.Interop.Reflection.ReflectionAccessor : object {
    [NullableAttribute("2")]
private Type _memberType;
    [NullableAttribute("2")]
private PropertyInfo _indexer;
    [NullableAttribute("2")]
public Type MemberType { get; }
    public bool Readable { get; }
    public bool Writable { get; }
    [NullableAttribute("2")]
protected JsValue ConstantValue { get; }
    [NullableContextAttribute("2")]
protected ReflectionAccessor(Type memberType, PropertyInfo indexer);
    [NullableContextAttribute("2")]
public Type get_MemberType();
    public virtual bool get_Readable();
    public abstract virtual bool get_Writable();
    protected abstract virtual object DoGetValue(object target, string memberName);
    protected abstract virtual void DoSetValue(object target, string memberName, object value);
    public object GetValue(Engine engine, object target, string memberName);
    [NullableContextAttribute("2")]
protected virtual JsValue get_ConstantValue();
    private object TryReadFromIndexer(object target, string memberName);
    public void SetValue(Engine engine, object target, string memberName, JsValue value);
    protected virtual object ConvertValueToSet(Engine engine, object value);
    public virtual PropertyDescriptor CreatePropertyDescriptor(Engine engine, object target, string memberName, bool enumerable);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Runtime.Interop.SetterFunction : Function {
    private static JsString _name;
    private Action`2<JsValue, JsValue> _setter;
    public SetterFunction(Engine engine, Action`2<JsValue, JsValue> setter);
    private static SetterFunction();
    protected internal virtual JsValue Call(JsValue thisObject, JsValue[] arguments);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Jint.Runtime.Interop.TypeDescriptor : object {
    [NullableAttribute("1")]
private static ConcurrentDictionary`2<Type, TypeDescriptor> _cache;
    [NullableAttribute("1")]
private static Type _listType;
    [NullableAttribute("1")]
private static PropertyInfo _listIndexer;
    [NullableAttribute("1")]
private static Type _genericDictionaryType;
    [NullableAttribute("1")]
private static Type _stringType;
    private MethodInfo _tryGetValueMethod;
    private MethodInfo _removeMethod;
    private PropertyInfo _keysAccessor;
    private Type _valueType;
    [CompilerGeneratedAttribute]
private bool <IsArrayLike>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyInfo <IntegerIndexerProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDictionary>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEnumerable>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyInfo <LengthProperty>k__BackingField;
    public bool IsArrayLike { get; }
    public bool IsIntegerIndexed { get; }
    public PropertyInfo IntegerIndexerProperty { get; }
    public bool IsDictionary { get; }
    public bool IsStringKeyedGenericDictionary { get; }
    public bool IsEnumerable { get; }
    public PropertyInfo LengthProperty { get; }
    public bool Iterable { get; }
    public MethodInfo RemoveMethod { get; }
    public PropertyInfo KeysAccessor { get; }
    [NullableContextAttribute("1")]
private TypeDescriptor(Type type);
    private static TypeDescriptor();
    [CompilerGeneratedAttribute]
public bool get_IsArrayLike();
    public bool get_IsIntegerIndexed();
    [CompilerGeneratedAttribute]
public PropertyInfo get_IntegerIndexerProperty();
    [CompilerGeneratedAttribute]
public bool get_IsDictionary();
    public bool get_IsStringKeyedGenericDictionary();
    [CompilerGeneratedAttribute]
public bool get_IsEnumerable();
    [CompilerGeneratedAttribute]
public PropertyInfo get_LengthProperty();
    public bool get_Iterable();
    public MethodInfo get_RemoveMethod();
    public PropertyInfo get_KeysAccessor();
    [NullableContextAttribute("1")]
public static TypeDescriptor Get(Type type);
    private static void Analyze(Type type, Boolean& isCollection, Boolean& isEnumerable, Boolean& isDictionary, MethodInfo& tryGetValueMethod, MethodInfo& removeMethod, PropertyInfo& keysAccessor, Type& valueType, PropertyInfo& lengthProperty, PropertyInfo& integerIndexer);
    private static void AnalyzeType(Type type, Boolean& isCollection, Boolean& isEnumerable, Boolean& isDictionary, MethodInfo& tryGetValueMethod, MethodInfo& removeMethod, PropertyInfo& keysAccessor, Type& valueType, PropertyInfo& lengthProperty, PropertyInfo& integerIndexer);
    [NullableContextAttribute("1")]
public bool TryGetValue(object target, string member, Object& o);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Jint.Runtime.Interop.TypeReference : Constructor {
    private static JsString _name;
    private static ConcurrentDictionary`2<Type, MethodDescriptor[]> _constructorCache;
    private static ConcurrentDictionary`2<MemberAccessorKey, ReflectionAccessor> _memberAccessors;
    [CompilerGeneratedAttribute]
private Type <ReferenceType>k__BackingField;
    public Type ReferenceType { get; }
    public object Target { get; }
    private TypeReference(Engine engine, Type type);
    private static TypeReference();
    [CompilerGeneratedAttribute]
public Type get_ReferenceType();
    public static TypeReference CreateTypeReference(Engine engine);
    public static TypeReference CreateTypeReference(Engine engine, Type type);
    protected internal virtual JsValue Call(JsValue thisObject, JsValue[] arguments);
    public virtual ObjectInstance Construct(JsValue[] arguments, JsValue newTarget);
    [NullableContextAttribute("2")]
public virtual bool Equals(JsValue other);
    internal virtual bool OrdinaryHasInstance(JsValue v);
    public virtual bool DefineOwnProperty(JsValue property, PropertyDescriptor desc);
    public virtual bool Delete(JsValue property);
    public virtual bool Set(JsValue property, JsValue value, JsValue receiver);
    public virtual PropertyDescriptor GetOwnProperty(JsValue property);
    private PropertyDescriptor CreatePropertyDescriptor(string name);
    private static ReflectionAccessor ResolveMemberAccessor(Engine engine, Type type, string name);
    public sealed virtual object get_Target();
    private static JsBoolean HasInstance(JsValue thisObject, JsValue[] arguments);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
internal static ObjectInstance <Construct>g__ObjectCreator|11_0(Engine engine, Realm realm, ObjectCreateState state);
    [CompilerGeneratedAttribute]
private ReflectionAccessor <CreatePropertyDescriptor>b__19_0(MemberAccessorKey x);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Runtime.Interop.TypeReferencePrototype : ObjectInstance {
    [CompilerGeneratedAttribute]
private TypeReference <TypeReference>k__BackingField;
    public TypeReference TypeReference { get; }
    public TypeReferencePrototype(Engine engine, TypeReference typeReference);
    [CompilerGeneratedAttribute]
public TypeReference get_TypeReference();
    public virtual PropertyDescriptor GetOwnProperty(JsValue property);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Jint.Runtime.Interop.TypeResolver : object {
    public static TypeResolver Default;
    [CompilerGeneratedAttribute]
private Predicate`1<MemberInfo> <MemberFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<MemberInfo, IEnumerable`1<string>> <MemberNameCreator>k__BackingField;
    [CompilerGeneratedAttribute]
private StringComparer <MemberNameComparer>k__BackingField;
    public Predicate`1<MemberInfo> MemberFilter { get; public set; }
    public Func`2<MemberInfo, IEnumerable`1<string>> MemberNameCreator { get; public set; }
    public StringComparer MemberNameComparer { get; public set; }
    private static TypeResolver();
    [CompilerGeneratedAttribute]
public Predicate`1<MemberInfo> get_MemberFilter();
    [CompilerGeneratedAttribute]
public void set_MemberFilter(Predicate`1<MemberInfo> value);
    internal bool Filter(Engine engine, Type targetType, MemberInfo m);
    [CompilerGeneratedAttribute]
public Func`2<MemberInfo, IEnumerable`1<string>> get_MemberNameCreator();
    [CompilerGeneratedAttribute]
public void set_MemberNameCreator(Func`2<MemberInfo, IEnumerable`1<string>> value);
    [IteratorStateMachineAttribute("Jint.Runtime.Interop.TypeResolver/<NameCreator>d__10")]
private static IEnumerable`1<string> NameCreator(MemberInfo info);
    [CompilerGeneratedAttribute]
public StringComparer get_MemberNameComparer();
    [CompilerGeneratedAttribute]
public void set_MemberNameComparer(StringComparer value);
    internal ReflectionAccessor GetAccessor(Engine engine, Type type, string member, bool mustBeReadable, bool mustBeWritable, Func`1<ReflectionAccessor> accessorFactory);
    private ReflectionAccessor ResolvePropertyDescriptorFactory(Engine engine, Type type, string memberName, bool mustBeReadable, bool mustBeWritable);
    private static int CalculateIndexerScore(ParameterInfo parameter, bool isInteger);
    internal bool TryFindMemberAccessor(Engine engine, Type type, string memberName, BindingFlags bindingFlags, PropertyInfo indexerToTry, ReflectionAccessor& accessor);
    [CompilerGeneratedAttribute]
private PropertyInfo <TryFindMemberAccessor>g__GetProperty|18_0(Type t, <>c__DisplayClass18_0& );
    [CompilerGeneratedAttribute]
private void <TryFindMemberAccessor>g__AddMethod|18_1(MethodInfo m, <>c__DisplayClass18_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Runtime.Interpreter.EvaluationContext : object {
    private bool _shouldRunBeforeExecuteStatementChecks;
    public Engine Engine;
    public bool OperatorOverloadingAllowed;
    [NullableAttribute("2")]
public string Target;
    public CompletionType Completion;
    public bool DebugMode { get; }
    public Node LastSyntaxElement { get; public set; }
    public EvaluationContext(Engine engine);
    public bool get_DebugMode();
    public Node get_LastSyntaxElement();
    public void set_LastSyntaxElement(Node value);
    public void RunBeforeExecuteStatementChecks(StatementOrExpression statement);
    public void PrepareFor(Node node);
    public bool IsAbrupt();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Runtime.Interpreter.Expressions.DestructuringPatternAssignmentExpression : JintExpression {
    private DestructuringPattern _pattern;
    private JintExpression _right;
    private bool _initialized;
    public DestructuringPatternAssignmentExpression(AssignmentExpression expression);
    protected virtual object EvaluateInternal(EvaluationContext context);
    internal static JsValue ProcessPatterns(EvaluationContext context, DestructuringPattern pattern, JsValue argument, Environment environment, bool checkPatternPropertyReference);
    private static bool ConsumeFromIterator(IteratorInstance it, JsValue& value, Boolean& done);
    private static JsValue HandleArrayPattern(EvaluationContext context, ArrayPattern pattern, JsValue argument, Environment environment, bool checkReference);
    private static JsValue HandleObjectPattern(EvaluationContext context, ObjectPattern pattern, JsValue argument, Environment environment, bool checkReference);
    private static void AssignToReference(Engine engine, Reference lhs, JsValue v, Environment environment);
    private static Reference GetReferenceFromMember(EvaluationContext context, MemberExpression memberExpression);
    private static void AssignToIdentifier(Engine engine, string name, JsValue rval, Environment environment, bool checkReference);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Runtime.Interpreter.Expressions.JintArrayExpression : JintExpression {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private JintExpression[] _expressions;
    private bool _hasSpreads;
    private bool _initialized;
    private JintArrayExpression(ArrayExpression expression);
    public static JintExpression Build(ArrayExpression expression);
    private void Initialize();
    protected virtual object EvaluateInternal(EvaluationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Runtime.Interpreter.Expressions.JintArrowFunctionExpression : JintExpression {
    private JintFunctionDefinition _function;
    public JintArrowFunctionExpression(ArrowFunctionExpression function);
    protected virtual object EvaluateInternal(EvaluationContext context);
    private static ScriptFunction Build(Engine engine, JintFunctionDefinition function);
    private static ScriptFunction InstantiateArrowFunctionExpression(Engine engine, JintFunctionDefinition function, string name);
    private static ScriptFunction InstantiateAsyncArrowFunctionExpression(Engine engine, JintFunctionDefinition function, string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Runtime.Interpreter.Expressions.JintAssignmentExpression : JintExpression {
    private JintExpression _left;
    [NullableAttribute("2")]
private JintIdentifierExpression _leftIdentifier;
    private JintExpression _right;
    private Operator _operator;
    private JintAssignmentExpression(AssignmentExpression expression);
    internal static JintExpression Build(AssignmentExpression expression);
    protected virtual object EvaluateInternal(EvaluationContext context);
    private JsValue EvaluateOperatorOverloading(EvaluationContext context, JsValue originalLeftValue, JsValue newLeftValue, Boolean& handledByOverload);
    private JsValue NamedEvaluation(EvaluationContext context, JintExpression expression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Runtime.Interpreter.Expressions.JintAwaitExpression : JintExpression {
    private JintExpression _awaitExpression;
    private bool _initialized;
    public JintAwaitExpression(AwaitExpression expression);
    protected virtual object EvaluateInternal(EvaluationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Jint.Runtime.Interpreter.Expressions.JintBinaryExpression : JintExpression {
    private static ConcurrentDictionary`2<OperatorKey, MethodDescriptor> _knownOperators;
    private JintExpression _left;
    private JintExpression _right;
    private bool _initialized;
    private JintBinaryExpression(NonLogicalBinaryExpression expression);
    private static JintBinaryExpression();
    private void EnsureInitialized();
    internal static bool TryOperatorOverloading(EvaluationContext context, JsValue leftValue, JsValue rightValue, string clrName, Object& result);
    internal static JintExpression Build(NonLogicalBinaryExpression expression);
    internal static bool AreNonBigIntOperands(JsValue left, JsValue right);
    internal static void AssertValidBigIntArithmeticOperands(JsValue left, JsValue right);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Runtime.Interpreter.Expressions.JintCallExpression : JintExpression {
    private CachedArgumentsHolder _cachedArguments;
    private bool _cached;
    private JintExpression _calleeExpression;
    private bool _hasSpreads;
    private bool _initialized;
    public JintCallExpression(CallExpression expression);
    private void Initialize(EvaluationContext context);
    protected virtual object EvaluateInternal(EvaluationContext context);
    [DoesNotReturnAttribute]
private static void ThrowReferenceNotFunction(Reference referenceRecord1, object reference, Engine engine);
    [DoesNotReturnAttribute]
private static void ThrowMemberIsNotFunction(Reference referenceRecord1, object reference, Engine engine);
    private JsValue HandleEval(EvaluationContext context, JsValue func, Engine engine, Reference referenceRecord);
    private ObjectInstance SuperCall(EvaluationContext context);
    private static ObjectInstance GetSuperConstructor(FunctionEnvironment thisEnvironment);
    private static bool IsInTailPosition(CallExpression call);
    private JsValue[] ArgumentListEvaluation(EvaluationContext context);
    private JsValue[] DefaultSuperCallArgumentListEvaluation(EvaluationContext context);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal static bool <Initialize>g__CanSpread|6_0(Node e);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Runtime.Interpreter.Expressions.JintClassExpression : JintExpression {
    private ClassDefinition _classDefinition;
    public JintClassExpression(ClassExpression expression);
    protected virtual object EvaluateInternal(EvaluationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Runtime.Interpreter.Expressions.JintConditionalExpression : JintExpression {
    private JintExpression _test;
    private JintExpression _consequent;
    private JintExpression _alternate;
    public JintConditionalExpression(ConditionalExpression expression);
    protected virtual object EvaluateInternal(EvaluationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Runtime.Interpreter.Expressions.JintConstantExpression : JintExpression {
    private JsValue _value;
    public JsValue Value { get; }
    public JintConstantExpression(Expression expression, JsValue value);
    public JsValue get_Value();
    public virtual JsValue GetValue(EvaluationContext context);
    protected virtual object EvaluateInternal(EvaluationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Jint.Runtime.Interpreter.Expressions.JintExpression : object {
    protected internal Expression _expression;
    internal string SourceText { get; }
    protected JintExpression(Expression expression);
    public virtual JsValue GetValue(EvaluationContext context);
    public object Evaluate(EvaluationContext context);
    internal object EvaluateWithoutNodeTracking(EvaluationContext context);
    protected abstract virtual object EvaluateInternal(EvaluationContext context);
    internal string get_SourceText();
    internal static string ToString(Expression expression);
    protected internal static JintExpression Build(Expression expression);
    protected static JsValue Divide(EvaluationContext context, JsValue left, JsValue right);
    private static JsValue DivideInteger(JsValue lval, JsValue rval);
    private static JsValue DivideComplex(JsValue lval, JsValue rval);
    protected static JsValue Compare(JsValue x, JsValue y, bool leftFirst);
    private static JsValue CompareNumber(JsValue x, JsValue y, bool leftFirst);
    private static JsValue CompareComplex(JsValue x, JsValue y, bool leftFirst);
    protected static void BuildArguments(EvaluationContext context, JintExpression[] jintExpressions, JsValue[] targetArray);
    protected static JsValue[] BuildArgumentsWithSpreads(EvaluationContext context, JintExpression[] jintExpressions);
    protected static bool AreIntegerOperands(JsValue left, JsValue right);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Runtime.Interpreter.Expressions.JintFunctionExpression : JintExpression {
    private JintFunctionDefinition _function;
    public JintFunctionExpression(FunctionExpression function);
    protected virtual object EvaluateInternal(EvaluationContext context);
    public virtual JsValue GetValue(EvaluationContext context);
    private static ScriptFunction Build(Engine engine, JintFunctionDefinition function);
    private static ScriptFunction InstantiateOrdinaryFunctionExpression(Engine engine, JintFunctionDefinition function, string name);
    private static ScriptFunction InstantiateAsyncFunctionExpression(Engine engine, JintFunctionDefinition function, string name);
    private static ScriptFunction InstantiateGeneratorFunctionExpression(Engine engine, JintFunctionDefinition function, string name);
    private static ScriptFunction InstantiateAsyncGeneratorFunctionExpression(Engine engine, JintFunctionDefinition function, string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Runtime.Interpreter.Expressions.JintIdentifierExpression : JintExpression {
    private BindingName _identifier;
    public BindingName Identifier { get; }
    public bool HasEvalOrArguments { get; }
    public JintIdentifierExpression(Identifier expression);
    public JintIdentifierExpression(Identifier identifier, BindingName bindingName);
    public BindingName get_Identifier();
    public bool get_HasEvalOrArguments();
    protected virtual object EvaluateInternal(EvaluationContext context);
    public virtual JsValue GetValue(EvaluationContext context);
    [DoesNotReturnAttribute]
private void ThrowNotInitialized(Engine engine);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Runtime.Interpreter.Expressions.JintImportExpression : JintExpression {
    private JintExpression _specifierExpression;
    private bool _initialized;
    [NullableAttribute("2")]
private JintExpression _optionsExpression;
    public JintImportExpression(ImportExpression expression);
    protected virtual object EvaluateInternal(EvaluationContext context);
    private static bool AllImportAttributesSupported(Host host, List`1<ModuleImportAttribute> attributes);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Runtime.Interpreter.Expressions.JintLiteralExpression : JintExpression {
    private static object _nullMarker;
    private JintLiteralExpression(Literal expression);
    private static JintLiteralExpression();
    internal static JintExpression Build(Literal expression);
    internal static JsValue ConvertToJsValue(Literal literal);
    public virtual JsValue GetValue(EvaluationContext context);
    protected virtual object EvaluateInternal(EvaluationContext context);
    private JsValue ResolveValue(EvaluationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Runtime.Interpreter.Expressions.JintLogicalAndExpression : JintExpression {
    private JintExpression _left;
    private JintExpression _right;
    private bool _initialized;
    public JintLogicalAndExpression(LogicalExpression expression);
    private void Initialize();
    protected virtual object EvaluateInternal(EvaluationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Runtime.Interpreter.Expressions.JintLogicalOrExpression : JintExpression {
    private JintExpression _left;
    private JintExpression _right;
    public JintLogicalOrExpression(LogicalExpression expression);
    protected virtual object EvaluateInternal(EvaluationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Runtime.Interpreter.Expressions.JintMemberExpression : JintExpression {
    private MemberExpression _memberExpression;
    private JintExpression _objectExpression;
    [NullableAttribute("2")]
private JintExpression _propertyExpression;
    [NullableAttribute("2")]
private JsValue _determinedProperty;
    private bool _initialized;
    private static JsValue _nullMarker;
    public JintMemberExpression(MemberExpression expression);
    private static JintMemberExpression();
    internal static JsValue InitializeDeterminedProperty(MemberExpression expression, bool cache);
    protected virtual object EvaluateInternal(EvaluationContext context);
    private static Reference MakePrivateReference(Engine engine, JsValue baseValue, JsValue privateIdentifier);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Runtime.Interpreter.Expressions.JintMetaPropertyExpression : JintExpression {
    public JintMetaPropertyExpression(MetaProperty expression);
    protected virtual object EvaluateInternal(EvaluationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Runtime.Interpreter.Expressions.JintNewExpression : JintExpression {
    private JintExpression _calleeExpression;
    private JintExpression[] _jintArguments;
    private bool _hasSpreads;
    private bool _initialized;
    public JintNewExpression(NewExpression expression);
    private void Initialize();
    protected virtual object EvaluateInternal(EvaluationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Runtime.Interpreter.Expressions.JintObjectExpression : JintExpression {
    private JintExpression[] _valueExpressions;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ObjectProperty[] _properties;
    private bool _canBuildFast;
    private bool _initialized;
    private JintObjectExpression(ObjectExpression expression);
    public static JintExpression Build(ObjectExpression expression);
    private void Initialize();
    protected virtual object EvaluateInternal(EvaluationContext context);
    private JsObject BuildObjectFast(EvaluationContext context);
    private object BuildObjectNormal(EvaluationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Runtime.Interpreter.Expressions.JintPrivateIdentifierExpression : JintExpression {
    private string _privateIdentifierString;
    public JintPrivateIdentifierExpression(PrivateIdentifier expression);
    protected virtual object EvaluateInternal(EvaluationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Runtime.Interpreter.Expressions.JintSequenceExpression : JintExpression {
    private JintExpression[] _expressions;
    private bool _initialized;
    public JintSequenceExpression(SequenceExpression expression);
    private void Initialize();
    protected virtual object EvaluateInternal(EvaluationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Runtime.Interpreter.Expressions.JintSpreadExpression : JintExpression {
    internal JintExpression _argument;
    [NullableAttribute("2")]
private string _argumentName;
    public JintSpreadExpression(SpreadElement expression);
    protected virtual object EvaluateInternal(EvaluationContext context);
    public virtual JsValue GetValue(EvaluationContext context);
    internal void GetValueAndCheckIterator(EvaluationContext context, JsValue& instance, IteratorInstance& iterator);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Runtime.Interpreter.Expressions.JintSuperExpression : JintExpression {
    public JintSuperExpression(Super expression);
    protected virtual object EvaluateInternal(EvaluationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Runtime.Interpreter.Expressions.JintTaggedTemplateExpression : JintExpression {
    internal static JsString PropertyRaw;
    private JintExpression _tagIdentifier;
    private JintTemplateLiteralExpression _quasi;
    private bool _initialized;
    public JintTaggedTemplateExpression(TaggedTemplateExpression expression);
    private static JintTaggedTemplateExpression();
    private void Initialize();
    protected virtual object EvaluateInternal(EvaluationContext context);
    private JsArray GetTemplateObject(EvaluationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Runtime.Interpreter.Expressions.JintTemplateLiteralExpression : JintExpression {
    internal TemplateLiteral _templateLiteralExpression;
    internal JintExpression[] _expressions;
    private bool _initialized;
    public JintTemplateLiteralExpression(TemplateLiteral expression);
    private void Initialize();
    internal void DoInitialize();
    protected virtual object EvaluateInternal(EvaluationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Runtime.Interpreter.Expressions.JintThisExpression : JintExpression {
    public JintThisExpression(ThisExpression expression);
    protected virtual object EvaluateInternal(EvaluationContext context);
    public virtual JsValue GetValue(EvaluationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Runtime.Interpreter.Expressions.JintUnaryExpression : JintExpression {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ConcurrentDictionary`2<OperatorKey, MethodDescriptor> _knownOperators;
    private JintExpression _argument;
    private Operator _operator;
    private JintUnaryExpression(NonUpdateUnaryExpression expression);
    private static JintUnaryExpression();
    internal static JintExpression Build(NonUpdateUnaryExpression expression);
    internal static JintExpression BuildConstantExpression(NonUpdateUnaryExpression expression);
    public virtual JsValue GetValue(EvaluationContext context);
    protected virtual object EvaluateInternal(EvaluationContext context);
    private JsValue EvaluateJsValue(EvaluationContext context);
    internal static JsValue EvaluateMinus(JsValue value);
    internal static bool TryOperatorOverloading(EvaluationContext context, JsValue value, string clrName, JsValue& result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Runtime.Interpreter.Expressions.JintUpdateExpression : JintExpression {
    private JintExpression _argument;
    private int _change;
    private bool _prefix;
    [NullableAttribute("2")]
private JintIdentifierExpression _leftIdentifier;
    private bool _evalOrArguments;
    private bool _initialized;
    public JintUpdateExpression(UpdateExpression expression);
    private void Initialize();
    protected virtual object EvaluateInternal(EvaluationContext context);
    private JsValue UpdateNonIdentifier(EvaluationContext context);
    private JsValue UpdateIdentifier(EvaluationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Runtime.Interpreter.Expressions.JintYieldExpression : JintExpression {
    public JintYieldExpression(YieldExpression expression);
    protected virtual object EvaluateInternal(EvaluationContext context);
    private JsValue YieldDelegate(EvaluationContext context, JsValue value);
    private Completion GeneratorYield(JsValue innerResult);
    private static bool IteratorComplete(JsValue iterResult);
    private static JsValue IteratorValue(JsValue iterResult);
    private static void AsyncIteratorClose(object iteratorRecord, CompletionType closeCompletion);
    private static Completion AsyncGeneratorYield(object iteratorValue);
    private static ObjectInstance Await(JsValue innerResult);
    private static JsValue Yield(EvaluationContext context, JsValue iterNextObj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Runtime.Interpreter.Expressions.NullishCoalescingExpression : JintExpression {
    private JintExpression _left;
    [NullableAttribute("2")]
private JintExpression _right;
    [NullableAttribute("2")]
private JsValue _constant;
    public NullishCoalescingExpression(LogicalExpression expression);
    public virtual JsValue GetValue(EvaluationContext context);
    protected virtual object EvaluateInternal(EvaluationContext context);
    private JsValue EvaluateConstantOrExpression(EvaluationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Runtime.Interpreter.JintFunctionDefinition : object {
    [NullableAttribute("2")]
private JintExpression _bodyExpression;
    [NullableAttribute("2")]
private JintStatementList _bodyStatementList;
    [NullableAttribute("2")]
public string Name;
    public IFunction Function;
    public bool Strict { get; }
    public FunctionThisMode ThisMode { get; }
    public JintFunctionDefinition(IFunction function);
    public bool get_Strict();
    public FunctionThisMode get_ThisMode();
    internal Completion EvaluateBody(EvaluationContext context, Function functionObject, JsValue[] argumentsList);
    private static void AsyncFunctionStart(EvaluationContext context, PromiseCapability promiseCapability, Func`2<EvaluationContext, Completion> asyncFunctionBody);
    private static void AsyncBlockStart(EvaluationContext context, PromiseCapability promiseCapability, Func`2<EvaluationContext, Completion> asyncBody, ExecutionContext& asyncContext);
    private Completion EvaluateGeneratorBody(EvaluationContext context, Function functionObject, JsValue[] argumentsList);
    internal State Initialize();
    internal static State BuildState(IFunction function);
    private static void GetBoundNames(Node parameter, List`1<Key> target, bool checkDuplicates, Boolean& _hasRestParameter, Boolean& _hasParameterExpressions, Boolean& _hasDuplicates, Boolean& hasArguments);
    private static void ProcessParameters(IFunction function, State state, Boolean& hasArguments);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Runtime.Interpreter.JintStatementList : object {
    [NullableAttribute("2")]
private Statement _statement;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private NodeList`1<Statement> _statements;
    [NullableAttribute("2")]
private Pair[] _jintStatements;
    private bool _initialized;
    private UInt32 _index;
    private bool _generator;
    public bool Completed { get; }
    public JintStatementList(IFunction function);
    public JintStatementList(BlockStatement blockStatement);
    public JintStatementList(Program program);
    [NullableContextAttribute("2")]
public JintStatementList(Statement statement, NodeList`1& statements);
    private void Initialize(EvaluationContext context);
    public Completion Execute(EvaluationContext context);
    internal static Completion HandleException(EvaluationContext context, Exception exception, JintStatement s);
    internal static Completion HandleError(Engine engine, JintStatement s);
    private static Completion CreateThrowCompletion(ErrorConstructor errorConstructor, string message, Node s);
    private static Completion CreateThrowCompletion(ErrorConstructor errorConstructor, Exception e, Node s);
    private static Completion CreateThrowCompletion(JintStatement s, JavaScriptException v);
    internal static void BlockDeclarationInstantiation(Environment env, List`1<Declaration> declarations);
    public bool get_Completed();
    public void Reset();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Runtime.Interpreter.Statements.ConstantStatement : JintStatement {
    private JsValue _value;
    private CompletionType _completionType;
    public ConstantStatement(Statement statement, CompletionType completionType, JsValue value);
    protected virtual Completion ExecuteInternal(EvaluationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Jint.Runtime.Interpreter.Statements.JintBlockStatement : JintStatement`1<NestedBlockStatement> {
    [NullableAttribute("2")]
private JintStatementList _statementList;
    [NullableAttribute("2")]
private JintStatement _singleStatement;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<Declaration> _lexicalDeclarations;
    public JintBlockStatement(NestedBlockStatement blockStatement);
    protected virtual void Initialize(EvaluationContext context);
    public Completion ExecuteBlock(EvaluationContext context);
    private Completion ExecuteSingle(EvaluationContext context);
    protected virtual Completion ExecuteInternal(EvaluationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Jint.Runtime.Interpreter.Statements.JintBreakStatement : JintStatement`1<BreakStatement> {
    public JintBreakStatement(BreakStatement statement);
    protected virtual Completion ExecuteInternal(EvaluationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Jint.Runtime.Interpreter.Statements.JintClassDeclarationStatement : JintStatement`1<ClassDeclaration> {
    private ClassDefinition _classDefinition;
    public JintClassDeclarationStatement(ClassDeclaration classDeclaration);
    protected virtual Completion ExecuteInternal(EvaluationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Jint.Runtime.Interpreter.Statements.JintContinueStatement : JintStatement`1<ContinueStatement> {
    public JintContinueStatement(ContinueStatement statement);
    protected virtual Completion ExecuteInternal(EvaluationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Jint.Runtime.Interpreter.Statements.JintDebuggerStatement : JintStatement`1<DebuggerStatement> {
    public JintDebuggerStatement(DebuggerStatement statement);
    protected virtual Completion ExecuteInternal(EvaluationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Jint.Runtime.Interpreter.Statements.JintDoWhileStatement : JintStatement`1<DoWhileStatement> {
    private ProbablyBlockStatement _body;
    [NullableAttribute("2")]
private string _labelSetName;
    private JintExpression _test;
    public JintDoWhileStatement(DoWhileStatement statement);
    protected virtual void Initialize(EvaluationContext context);
    protected virtual Completion ExecuteInternal(EvaluationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Jint.Runtime.Interpreter.Statements.JintEmptyStatement : JintStatement`1<EmptyStatement> {
    public JintEmptyStatement(EmptyStatement statement);
    protected virtual Completion ExecuteInternal(EvaluationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Jint.Runtime.Interpreter.Statements.JintExportAllDeclaration : JintStatement`1<ExportAllDeclaration> {
    public JintExportAllDeclaration(ExportAllDeclaration statement);
    protected virtual void Initialize(EvaluationContext context);
    protected virtual Completion ExecuteInternal(EvaluationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Jint.Runtime.Interpreter.Statements.JintExportDefaultDeclaration : JintStatement`1<ExportDefaultDeclaration> {
    [NullableAttribute("2")]
private ClassDefinition _classDefinition;
    [NullableAttribute("2")]
private JintFunctionDeclarationStatement _functionDeclaration;
    [NullableAttribute("2")]
private JintExpression _assignmentExpression;
    [NullableAttribute("2")]
private JintExpression _simpleExpression;
    public JintExportDefaultDeclaration(ExportDefaultDeclaration statement);
    protected virtual void Initialize(EvaluationContext context);
    protected virtual Completion ExecuteInternal(EvaluationContext context);
    private static void InitializeBoundName(string name, JsValue value, Environment environment);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Jint.Runtime.Interpreter.Statements.JintExportNamedDeclaration : JintStatement`1<ExportNamedDeclaration> {
    [NullableAttribute("2")]
private JintStatement _declarationStatement;
    public JintExportNamedDeclaration(ExportNamedDeclaration statement);
    protected virtual void Initialize(EvaluationContext context);
    protected virtual Completion ExecuteInternal(EvaluationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Jint.Runtime.Interpreter.Statements.JintExpressionStatement : JintStatement`1<ExpressionStatement> {
    private JintExpression _expression;
    [NullableAttribute("2")]
private JintIdentifierExpression _identifierExpression;
    public JintExpressionStatement(ExpressionStatement statement);
    protected virtual void Initialize(EvaluationContext context);
    protected virtual Completion ExecuteInternal(EvaluationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Jint.Runtime.Interpreter.Statements.JintForInForOfStatement : JintStatement`1<Statement> {
    private Node _leftNode;
    private Statement _forBody;
    private Expression _rightExpression;
    private IterationKind _iterationKind;
    private ProbablyBlockStatement _body;
    [NullableAttribute("2")]
private JintExpression _expr;
    [NullableAttribute("2")]
private DestructuringPattern _assignmentPattern;
    private JintExpression _right;
    [NullableAttribute("2")]
private List`1<Key> _tdzNames;
    private bool _destructuring;
    private LhsKind _lhsKind;
    public JintForInForOfStatement(ForInStatement statement);
    public JintForInForOfStatement(ForOfStatement statement);
    protected virtual void Initialize(EvaluationContext context);
    protected virtual Completion ExecuteInternal(EvaluationContext context);
    private bool HeadEvaluation(EvaluationContext context, IteratorInstance& result);
    private Completion BodyEvaluation(EvaluationContext context, JintExpression lhs, ProbablyBlockStatement& stmt, IteratorInstance iteratorRecord, IterationKind iterationKind, LhsKind lhsKind, IteratorKind iteratorKind);
    private void BindingInstantiation(Environment environment);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Jint.Runtime.Interpreter.Statements.JintForStatement : JintStatement`1<ForStatement> {
    [NullableAttribute("2")]
private JintVariableDeclaration _initStatement;
    [NullableAttribute("2")]
private JintExpression _initExpression;
    [NullableAttribute("2")]
private JintExpression _test;
    [NullableAttribute("2")]
private JintExpression _increment;
    private ProbablyBlockStatement _body;
    [NullableAttribute("2")]
private List`1<Key> _boundNames;
    private bool _shouldCreatePerIterationEnvironment;
    public JintForStatement(ForStatement statement);
    protected virtual void Initialize(EvaluationContext context);
    protected virtual Completion ExecuteInternal(EvaluationContext context);
    private Completion ForBodyEvaluation(EvaluationContext context);
    private void CreatePerIterationEnvironment(EvaluationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Jint.Runtime.Interpreter.Statements.JintFunctionDeclarationStatement : JintStatement`1<FunctionDeclaration> {
    public JintFunctionDeclarationStatement(FunctionDeclaration statement);
    protected virtual Completion ExecuteInternal(EvaluationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Jint.Runtime.Interpreter.Statements.JintIfStatement : JintStatement`1<IfStatement> {
    private ProbablyBlockStatement _statementConsequent;
    private JintExpression _test;
    private Nullable`1<ProbablyBlockStatement> _alternate;
    public JintIfStatement(IfStatement statement);
    protected virtual void Initialize(EvaluationContext context);
    protected virtual Completion ExecuteInternal(EvaluationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Jint.Runtime.Interpreter.Statements.JintImportDeclaration : JintStatement`1<ImportDeclaration> {
    public JintImportDeclaration(ImportDeclaration statement);
    protected virtual void Initialize(EvaluationContext context);
    protected virtual Completion ExecuteInternal(EvaluationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Jint.Runtime.Interpreter.Statements.JintLabeledStatement : JintStatement`1<LabeledStatement> {
    private JintStatement _body;
    [NullableAttribute("2")]
private string _labelName;
    public JintLabeledStatement(LabeledStatement statement);
    protected virtual void Initialize(EvaluationContext context);
    protected virtual Completion ExecuteInternal(EvaluationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Jint.Runtime.Interpreter.Statements.JintReturnStatement : JintStatement`1<ReturnStatement> {
    [NullableAttribute("2")]
private JintExpression _argument;
    public JintReturnStatement(ReturnStatement statement);
    protected virtual void Initialize(EvaluationContext context);
    protected virtual Completion ExecuteInternal(EvaluationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Runtime.Interpreter.Statements.JintScript : object {
    private JintStatementList _list;
    public JintScript(Script script);
    public Completion Execute(EvaluationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Jint.Runtime.Interpreter.Statements.JintStatement : object {
    internal Statement _statement;
    private bool _initialized;
    [IsReadOnlyAttribute]
public SourceLocation& modreq(System.Runtime.InteropServices.InAttribute) Location { get; }
    protected JintStatement(Statement statement);
    public Completion Execute(EvaluationContext context);
    protected abstract virtual Completion ExecuteInternal(EvaluationContext context);
    public SourceLocation& modreq(System.Runtime.InteropServices.InAttribute) get_Location();
    protected virtual void Initialize(EvaluationContext context);
    protected internal static JintStatement Build(Statement statement);
    internal static JsValue FastResolve(StatementOrExpression statement);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Jint.Runtime.Interpreter.Statements.JintStatement`1 : JintStatement {
    internal T _statement;
    protected JintStatement`1(T statement);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Runtime.Interpreter.Statements.JintSwitchBlock : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private NodeList`1<SwitchCase> _switchBlock;
    private JintSwitchCase[] _jintSwitchBlock;
    private bool _initialized;
    public JintSwitchBlock(NodeList`1<SwitchCase> switchBlock);
    private void Initialize();
    public Completion Execute(EvaluationContext context, JsValue input);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Jint.Runtime.Interpreter.Statements.JintSwitchStatement : JintStatement`1<SwitchStatement> {
    private JintSwitchBlock _switchBlock;
    private JintExpression _discriminant;
    public JintSwitchStatement(SwitchStatement statement);
    protected virtual void Initialize(EvaluationContext context);
    protected virtual Completion ExecuteInternal(EvaluationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Jint.Runtime.Interpreter.Statements.JintThrowStatement : JintStatement`1<ThrowStatement> {
    private JintExpression _argument;
    public JintThrowStatement(ThrowStatement statement);
    protected virtual void Initialize(EvaluationContext context);
    protected virtual Completion ExecuteInternal(EvaluationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Jint.Runtime.Interpreter.Statements.JintTryStatement : JintStatement`1<TryStatement> {
    private JintBlockStatement _block;
    [NullableAttribute("2")]
private JintBlockStatement _catch;
    [NullableAttribute("2")]
private JintBlockStatement _finalizer;
    public JintTryStatement(TryStatement statement);
    protected virtual void Initialize(EvaluationContext context);
    protected virtual Completion ExecuteInternal(EvaluationContext context);
    private Completion ExecuteCatch(EvaluationContext context, Completion b, Engine engine);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Jint.Runtime.Interpreter.Statements.JintVariableDeclaration : JintStatement`1<VariableDeclaration> {
    private ResolvedDeclaration[] _declarations;
    public JintVariableDeclaration(VariableDeclaration statement);
    protected virtual void Initialize(EvaluationContext context);
    protected virtual Completion ExecuteInternal(EvaluationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Jint.Runtime.Interpreter.Statements.JintWhileStatement : JintStatement`1<WhileStatement> {
    [NullableAttribute("2")]
private string _labelSetName;
    private ProbablyBlockStatement _body;
    private JintExpression _test;
    public JintWhileStatement(WhileStatement statement);
    protected virtual void Initialize(EvaluationContext context);
    protected virtual Completion ExecuteInternal(EvaluationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Jint.Runtime.Interpreter.Statements.JintWithStatement : JintStatement`1<WithStatement> {
    private ProbablyBlockStatement _body;
    private JintExpression _object;
    public JintWithStatement(WithStatement statement);
    protected virtual void Initialize(EvaluationContext context);
    protected virtual Completion ExecuteInternal(EvaluationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class Jint.Runtime.Interpreter.Statements.ProbablyBlockStatement : ValueType {
    [NullableAttribute("2")]
private JintStatement _statement;
    [NullableAttribute("2")]
private JintBlockStatement _blockStatement;
    public ProbablyBlockStatement(Statement statement);
    public Completion Execute(EvaluationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Jint.Runtime.Intrinsics : object {
    private static JsString _errorFunctionName;
    private static JsString _evalErrorFunctionName;
    private static JsString _rangeErrorFunctionName;
    private static JsString _referenceErrorFunctionName;
    private static JsString _syntaxErrorFunctionName;
    private static JsString _typeErrorFunctionName;
    private static JsString _uriErrorFunctionName;
    private Engine _engine;
    private Realm _realm;
    [NullableAttribute("2")]
private ThrowTypeError _throwTypeError;
    [NullableAttribute("2")]
private AggregateErrorConstructor _aggregateError;
    [NullableAttribute("2")]
private ErrorConstructor _error;
    [NullableAttribute("2")]
private ErrorConstructor _evalError;
    [NullableAttribute("2")]
private ErrorConstructor _rangeError;
    [NullableAttribute("2")]
private ErrorConstructor _referenceError;
    [NullableAttribute("2")]
private ErrorConstructor _syntaxError;
    [NullableAttribute("2")]
private ErrorConstructor _typeError;
    [NullableAttribute("2")]
private ErrorConstructor _uriError;
    [NullableAttribute("2")]
private WeakMapConstructor _weakMap;
    [NullableAttribute("2")]
private WeakSetConstructor _weakSet;
    [NullableAttribute("2")]
private WeakRefConstructor _weakRef;
    [NullableAttribute("2")]
private PromiseConstructor _promise;
    [NullableAttribute("2")]
private ProxyConstructor _proxy;
    [NullableAttribute("2")]
private ReflectInstance _reflect;
    [NullableAttribute("2")]
private EvalFunction _eval;
    [NullableAttribute("2")]
private DateConstructor _date;
    [NullableAttribute("2")]
private IteratorPrototype _iteratorPrototype;
    [NullableAttribute("2")]
private MathInstance _math;
    [NullableAttribute("2")]
private JsonInstance _json;
    [NullableAttribute("2")]
private SymbolConstructor _symbol;
    [NullableAttribute("2")]
private AsyncGeneratorFunctionConstructor _asyncGeneratorFunction;
    [NullableAttribute("2")]
private GeneratorFunctionConstructor _generatorFunction;
    [NullableAttribute("2")]
private RegExpConstructor _regExp;
    [NullableAttribute("2")]
private RegExpStringIteratorPrototype _regExpStringIteratorPrototype;
    [NullableAttribute("2")]
private NumberConstructor _number;
    [NullableAttribute("2")]
private BigIntConstructor _bigInt;
    [NullableAttribute("2")]
private StringConstructor _string;
    [NullableAttribute("2")]
private StringIteratorPrototype _stringIteratorPrototype;
    [NullableAttribute("2")]
private MapConstructor _map;
    [NullableAttribute("2")]
private MapIteratorPrototype _mapIteratorPrototype;
    [NullableAttribute("2")]
private SetConstructor _set;
    [NullableAttribute("2")]
private SetIteratorPrototype _setIteratorPrototype;
    [NullableAttribute("2")]
private ArrayConstructor _array;
    [NullableAttribute("2")]
private ArrayIteratorPrototype _arrayIteratorPrototype;
    [NullableAttribute("2")]
private AtomicsInstance _atomics;
    [NullableAttribute("2")]
private BooleanConstructor _boolean;
    [NullableAttribute("2")]
private ArrayBufferConstructor _arrayBufferConstructor;
    [NullableAttribute("2")]
private SharedArrayBufferConstructor _sharedArrayBufferConstructor;
    [NullableAttribute("2")]
private DataViewConstructor _dataView;
    [NullableAttribute("2")]
private AsyncFunctionConstructor _asyncFunction;
    [NullableAttribute("2")]
private FinalizationRegistryConstructor _finalizationRegistry;
    [NullableAttribute("2")]
private IntrinsicTypedArrayConstructor _typedArray;
    [NullableAttribute("2")]
private Int8ArrayConstructor _int8Array;
    [NullableAttribute("2")]
private Uint8ArrayConstructor _uint8Array;
    [NullableAttribute("2")]
private Uint8ClampedArrayConstructor _uint8ClampedArray;
    [NullableAttribute("2")]
private Int16ArrayConstructor _int16Array;
    [NullableAttribute("2")]
private Uint16ArrayConstructor _uint16Array;
    [NullableAttribute("2")]
private Int32ArrayConstructor _int32Array;
    [NullableAttribute("2")]
private Uint32ArrayConstructor _uint32Array;
    [NullableAttribute("2")]
private BigInt64ArrayConstructor _bigInt64Array;
    [NullableAttribute("2")]
private BigUint64ArrayConstructor _bigUint64Array;
    [NullableAttribute("2")]
private Float16ArrayConstructor _float16Array;
    [NullableAttribute("2")]
private Float32ArrayConstructor _float32Array;
    [NullableAttribute("2")]
private Float64ArrayConstructor _float64Array;
    [NullableAttribute("2")]
private ShadowRealmConstructor _shadowRealm;
    [CompilerGeneratedAttribute]
private ObjectConstructor <Object>k__BackingField;
    [CompilerGeneratedAttribute]
private FunctionConstructor <Function>k__BackingField;
    [NullableAttribute("2")]
private IntlInstance _intl;
    [NullableAttribute("2")]
private CollatorConstructor _collator;
    [NullableAttribute("2")]
private DateTimeFormatConstructor _dateTimeFormat;
    [NullableAttribute("2")]
private DisplayNamesConstructor _displayNames;
    [NullableAttribute("2")]
private ListFormatConstructor _listFormat;
    [NullableAttribute("2")]
private LocaleConstructor _locale;
    [NullableAttribute("2")]
private NumberFormatConstructor _numberFormat;
    [NullableAttribute("2")]
private PluralRulesConstructor _pluralRules;
    [NullableAttribute("2")]
private RelativeTimeFormatConstructor _relativeTimeFormat;
    [NullableAttribute("2")]
private SegmenterConstructor _segmenter;
    public ObjectConstructor Object { get; }
    public FunctionConstructor Function { get; }
    internal FinalizationRegistryConstructor FinalizationRegistry { get; }
    internal AsyncFunctionConstructor AsyncFunction { get; }
    public ArrayConstructor Array { get; }
    internal AtomicsInstance Atomics { get; }
    internal AggregateErrorConstructor AggregateError { get; }
    internal ArrayIteratorPrototype ArrayIteratorPrototype { get; }
    internal DataViewConstructor DataView { get; }
    public ArrayBufferConstructor ArrayBuffer { get; }
    internal SharedArrayBufferConstructor SharedArrayBuffer { get; }
    internal IntrinsicTypedArrayConstructor TypedArray { get; }
    public Int8ArrayConstructor Int8Array { get; }
    public Uint8ArrayConstructor Uint8Array { get; }
    public Uint8ClampedArrayConstructor Uint8ClampedArray { get; }
    public Int16ArrayConstructor Int16Array { get; }
    public Uint16ArrayConstructor Uint16Array { get; }
    public Int32ArrayConstructor Int32Array { get; }
    public Uint32ArrayConstructor Uint32Array { get; }
    public BigInt64ArrayConstructor BigInt64Array { get; }
    public BigUint64ArrayConstructor BigUint64Array { get; }
    public Float16ArrayConstructor Float16Array { get; }
    public Float32ArrayConstructor Float32Array { get; }
    public Float64ArrayConstructor Float64Array { get; }
    internal MapConstructor Map { get; }
    internal MapIteratorPrototype MapIteratorPrototype { get; }
    internal SetConstructor Set { get; }
    internal SetIteratorPrototype SetIteratorPrototype { get; }
    internal WeakMapConstructor WeakMap { get; }
    internal WeakSetConstructor WeakSet { get; }
    internal WeakRefConstructor WeakRef { get; }
    internal PromiseConstructor Promise { get; }
    internal IteratorPrototype IteratorPrototype { get; }
    internal StringConstructor String { get; }
    internal StringIteratorPrototype StringIteratorPrototype { get; }
    public RegExpConstructor RegExp { get; }
    internal RegExpStringIteratorPrototype RegExpStringIteratorPrototype { get; }
    internal BooleanConstructor Boolean { get; }
    internal NumberConstructor Number { get; }
    internal BigIntConstructor BigInt { get; }
    internal DateConstructor Date { get; }
    internal MathInstance Math { get; }
    internal JsonInstance Json { get; }
    internal ProxyConstructor Proxy { get; }
    internal ReflectInstance Reflect { get; }
    internal SymbolConstructor Symbol { get; }
    public ShadowRealmConstructor ShadowRealm { get; }
    internal GeneratorFunctionConstructor GeneratorFunction { get; }
    internal AsyncGeneratorFunctionConstructor AsyncGeneratorFunction { get; }
    public EvalFunction Eval { get; }
    public ErrorConstructor Error { get; }
    internal ErrorConstructor EvalError { get; }
    internal ErrorConstructor SyntaxError { get; }
    public ErrorConstructor TypeError { get; }
    internal ErrorConstructor RangeError { get; }
    internal ErrorConstructor ReferenceError { get; }
    internal ErrorConstructor UriError { get; }
    internal ThrowTypeError ThrowTypeError { get; }
    internal IntlInstance Intl { get; }
    internal CollatorConstructor Collator { get; }
    internal DateTimeFormatConstructor DateTimeFormat { get; }
    internal DisplayNamesConstructor DisplayNames { get; }
    internal ListFormatConstructor ListFormat { get; }
    internal LocaleConstructor Locale { get; }
    internal NumberFormatConstructor NumberFormat { get; }
    internal PluralRulesConstructor PluralRules { get; }
    internal RelativeTimeFormatConstructor RelativeTimeFormat { get; }
    internal SegmenterConstructor Segmenter { get; }
    internal Intrinsics(Engine engine, Realm realm);
    private static Intrinsics();
    [CompilerGeneratedAttribute]
public ObjectConstructor get_Object();
    [CompilerGeneratedAttribute]
public FunctionConstructor get_Function();
    internal FinalizationRegistryConstructor get_FinalizationRegistry();
    internal AsyncFunctionConstructor get_AsyncFunction();
    public ArrayConstructor get_Array();
    internal AtomicsInstance get_Atomics();
    internal AggregateErrorConstructor get_AggregateError();
    internal ArrayIteratorPrototype get_ArrayIteratorPrototype();
    internal DataViewConstructor get_DataView();
    public ArrayBufferConstructor get_ArrayBuffer();
    internal SharedArrayBufferConstructor get_SharedArrayBuffer();
    internal IntrinsicTypedArrayConstructor get_TypedArray();
    public Int8ArrayConstructor get_Int8Array();
    public Uint8ArrayConstructor get_Uint8Array();
    public Uint8ClampedArrayConstructor get_Uint8ClampedArray();
    public Int16ArrayConstructor get_Int16Array();
    public Uint16ArrayConstructor get_Uint16Array();
    public Int32ArrayConstructor get_Int32Array();
    public Uint32ArrayConstructor get_Uint32Array();
    public BigInt64ArrayConstructor get_BigInt64Array();
    public BigUint64ArrayConstructor get_BigUint64Array();
    public Float16ArrayConstructor get_Float16Array();
    public Float32ArrayConstructor get_Float32Array();
    public Float64ArrayConstructor get_Float64Array();
    internal MapConstructor get_Map();
    internal MapIteratorPrototype get_MapIteratorPrototype();
    internal SetConstructor get_Set();
    internal SetIteratorPrototype get_SetIteratorPrototype();
    internal WeakMapConstructor get_WeakMap();
    internal WeakSetConstructor get_WeakSet();
    internal WeakRefConstructor get_WeakRef();
    internal PromiseConstructor get_Promise();
    internal IteratorPrototype get_IteratorPrototype();
    internal StringConstructor get_String();
    internal StringIteratorPrototype get_StringIteratorPrototype();
    public RegExpConstructor get_RegExp();
    internal RegExpStringIteratorPrototype get_RegExpStringIteratorPrototype();
    internal BooleanConstructor get_Boolean();
    internal NumberConstructor get_Number();
    internal BigIntConstructor get_BigInt();
    internal DateConstructor get_Date();
    internal MathInstance get_Math();
    internal JsonInstance get_Json();
    internal ProxyConstructor get_Proxy();
    internal ReflectInstance get_Reflect();
    internal SymbolConstructor get_Symbol();
    public ShadowRealmConstructor get_ShadowRealm();
    internal GeneratorFunctionConstructor get_GeneratorFunction();
    internal AsyncGeneratorFunctionConstructor get_AsyncGeneratorFunction();
    public EvalFunction get_Eval();
    public ErrorConstructor get_Error();
    internal ErrorConstructor get_EvalError();
    internal ErrorConstructor get_SyntaxError();
    public ErrorConstructor get_TypeError();
    internal ErrorConstructor get_RangeError();
    internal ErrorConstructor get_ReferenceError();
    internal ErrorConstructor get_UriError();
    internal ThrowTypeError get_ThrowTypeError();
    internal IntlInstance get_Intl();
    internal CollatorConstructor get_Collator();
    internal DateTimeFormatConstructor get_DateTimeFormat();
    internal DisplayNamesConstructor get_DisplayNames();
    internal ListFormatConstructor get_ListFormat();
    internal LocaleConstructor get_Locale();
    internal NumberFormatConstructor get_NumberFormat();
    internal PluralRulesConstructor get_PluralRules();
    internal RelativeTimeFormatConstructor get_RelativeTimeFormat();
    internal SegmenterConstructor get_Segmenter();
}
[NullableContextAttribute("2")]
internal interface Jint.Runtime.IScriptOrModule {
    public string Location { get; }
    public abstract virtual string get_Location();
}
[NullableContextAttribute("1")]
public interface Jint.Runtime.ITimeSystem {
    public TimeZoneInfo DefaultTimeZone { get; }
    public abstract virtual DateTimeOffset GetUtcNow();
    public abstract virtual TimeZoneInfo get_DefaultTimeZone();
    public abstract virtual bool TryParse(string date, Int64& epochMilliseconds);
    public abstract virtual TimeSpan GetUtcOffset(long epochMilliseconds);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Jint.Runtime.JavaScriptException : JintException {
    private JavaScriptErrorWrapperException _jsErrorException;
    [NullableAttribute("2")]
public string JavaScriptStackTrace { get; }
    [IsReadOnlyAttribute]
public SourceLocation& modreq(System.Runtime.InteropServices.InAttribute) Location { get; }
    public JsValue Error { get; }
    internal JavaScriptException(ErrorConstructor errorConstructor);
    public JavaScriptException(ErrorConstructor errorConstructor, string message);
    public JavaScriptException(JsValue error);
    [NullableContextAttribute("2")]
private static string GetMessage(JsValue error);
    [NullableContextAttribute("2")]
public string get_JavaScriptStackTrace();
    public SourceLocation& modreq(System.Runtime.InteropServices.InAttribute) get_Location();
    public JsValue get_Error();
    public string GetJavaScriptErrorString();
    public JavaScriptException SetJavaScriptCallstack(Engine engine, SourceLocation& location, bool overwriteExisting);
    public JavaScriptException SetJavaScriptLocation(SourceLocation& location);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Runtime.JobCallback : object {
    [CompilerGeneratedAttribute]
private ICallable <Callback>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private object <HostDefined>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public ICallable Callback { get; public set; }
    [NullableAttribute("2")]
public object HostDefined { get; public set; }
    public JobCallback(ICallable Callback, object HostDefined);
    [CompilerGeneratedAttribute]
private JobCallback(JobCallback original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public ICallable get_Callback();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Callback(ICallable value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public object get_HostDefined();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_HostDefined(object value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(JobCallback left, JobCallback right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(JobCallback left, JobCallback right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(JobCallback other);
    [CompilerGeneratedAttribute]
public JobCallback <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(ICallable& Callback, Object& HostDefined);
}
internal static class Jint.Runtime.KnownKeys : object {
    internal static Key Arguments;
    internal static Key Caller;
    internal static Key Constructor;
    internal static Key Default;
    internal static Key Done;
    internal static Key Eval;
    internal static Key Length;
    internal static Key Next;
    internal static Key Prototype;
    internal static Key Undefined;
    internal static Key Value;
    private static KnownKeys();
}
public class Jint.Runtime.MemoryLimitExceededException : JintException {
    [NullableContextAttribute("1")]
public MemoryLimitExceededException(string message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Runtime.Modules.BuilderModule : SourceTextModule {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<KeyValuePair`2<string, JsValue>> _exportBuilderDeclarations;
    internal BuilderModule(Engine engine, Realm realm, Prepared`1& source, string location, bool async);
    internal void BindExportedValue(string name, JsValue value);
    protected virtual void InitializeEnvironment();
}
public abstract class Jint.Runtime.Modules.CyclicModule : Module {
    private Nullable`1<Completion> _evalError;
    private int _dfsIndex;
    private int _dfsAncestorIndex;
    internal HashSet`1<ModuleRequest> _requestedModules;
    private CyclicModule _cycleRoot;
    protected bool _hasTLA;
    private bool _asyncEvaluation;
    private PromiseCapability _topLevelCapability;
    private List`1<CyclicModule> _asyncParentModules;
    private int _asyncEvalOrder;
    private int _pendingAsyncDependencies;
    internal JsValue _evalResult;
    private SourceLocation _abnormalCompletionLocation;
    [CompilerGeneratedAttribute]
private ModuleStatus <Status>k__BackingField;
    internal ModuleStatus Status { get; private set; }
    [IsReadOnlyAttribute]
internal SourceLocation& modreq(System.Runtime.InteropServices.InAttribute) AbnormalCompletionLocation { get; }
    internal CyclicModule(Engine engine, Realm realm, string location, bool async);
    [CompilerGeneratedAttribute]
internal ModuleStatus get_Status();
    [CompilerGeneratedAttribute]
private void set_Status(ModuleStatus value);
    internal SourceLocation& modreq(System.Runtime.InteropServices.InAttribute) get_AbnormalCompletionLocation();
    public virtual void Link();
    public virtual JsValue Evaluate();
    protected internal virtual int InnerModuleLinking(Stack`1<CyclicModule> stack, int index);
    protected internal virtual Completion InnerModuleEvaluation(Stack`1<CyclicModule> stack, int index, Int32& asyncEvalOrder);
    private int StackReferenceCount(Stack`1<CyclicModule> stack);
    private Completion ExecuteAsyncModule();
    private static JsValue AsyncModuleExecutionFulfilled(JsValue thisObject, JsValue[] arguments);
    private static JsValue AsyncModuleExecutionRejected(JsValue thisObject, JsValue[] arguments);
    private void GatherAvailableAncestors(List`1<CyclicModule> execList);
    protected abstract virtual void InitializeEnvironment();
    internal abstract virtual Completion ExecuteModule(PromiseCapability capability);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Jint.Runtime.Modules.DefaultModuleLoader : ModuleLoader {
    private Uri _basePath;
    private bool _restrictToBasePath;
    public DefaultModuleLoader(string basePath, bool restrictToBasePath);
    public virtual ResolvedSpecifier Resolve(string referencingModuleLocation, ModuleRequest moduleRequest);
    private Uri BuildBaseUri(string referencingModuleLocation);
    protected virtual string LoadModuleContents(Engine engine, ResolvedSpecifier resolved);
    private static bool IsRelative(string specifier);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Jint.Runtime.Modules.ExportEntry : object {
    [CompilerGeneratedAttribute]
private string <ExportName>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ModuleRequest> <ModuleRequest>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ImportName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LocalName>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public string ExportName { get; public set; }
    public Nullable`1<ModuleRequest> ModuleRequest { get; public set; }
    public string ImportName { get; public set; }
    public string LocalName { get; public set; }
    public ExportEntry(string ExportName, Nullable`1<ModuleRequest> ModuleRequest, string ImportName, string LocalName);
    [CompilerGeneratedAttribute]
private ExportEntry(ExportEntry original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public string get_ExportName();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ExportName(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<ModuleRequest> get_ModuleRequest();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ModuleRequest(Nullable`1<ModuleRequest> value);
    [CompilerGeneratedAttribute]
public string get_ImportName();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ImportName(string value);
    [CompilerGeneratedAttribute]
public string get_LocalName();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_LocalName(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(ExportEntry left, ExportEntry right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(ExportEntry left, ExportEntry right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(ExportEntry other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public ExportEntry <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(String& ExportName, Nullable`1& ModuleRequest, String& ImportName, String& LocalName);
}
internal class Jint.Runtime.Modules.ExportResolveSetItem : object {
    [CompilerGeneratedAttribute]
private CyclicModule <Module>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExportName>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public CyclicModule Module { get; public set; }
    public string ExportName { get; public set; }
    public ExportResolveSetItem(CyclicModule Module, string ExportName);
    [CompilerGeneratedAttribute]
private ExportResolveSetItem(ExportResolveSetItem original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public CyclicModule get_Module();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Module(CyclicModule value);
    [CompilerGeneratedAttribute]
public string get_ExportName();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ExportName(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(ExportResolveSetItem left, ExportResolveSetItem right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(ExportResolveSetItem left, ExportResolveSetItem right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(ExportResolveSetItem other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public ExportResolveSetItem <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(CyclicModule& Module, String& ExportName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Runtime.Modules.FailFastModuleLoader : object {
    public static IModuleLoader Instance;
    public Uri BasePath { get; }
    private static FailFastModuleLoader();
    public Uri get_BasePath();
    public sealed virtual ResolvedSpecifier Resolve(string referencingModuleLocation, ModuleRequest moduleRequest);
    public sealed virtual Module LoadModule(Engine engine, ResolvedSpecifier resolved);
    private static void ThrowDisabledException();
}
[NullableContextAttribute("1")]
public interface Jint.Runtime.Modules.IModuleLoader {
    public abstract virtual ResolvedSpecifier Resolve(string referencingModuleLocation, ModuleRequest moduleRequest);
    public abstract virtual Module LoadModule(Engine engine, ResolvedSpecifier resolved);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Runtime.Modules.ImportEntry : object {
    [CompilerGeneratedAttribute]
private ModuleRequest <ModuleRequest>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <ImportName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LocalName>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public ModuleRequest ModuleRequest { get; public set; }
    [NullableAttribute("2")]
public string ImportName { get; public set; }
    public string LocalName { get; public set; }
    public ImportEntry(ModuleRequest ModuleRequest, string ImportName, string LocalName);
    [CompilerGeneratedAttribute]
private ImportEntry(ImportEntry original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public ModuleRequest get_ModuleRequest();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ModuleRequest(ModuleRequest value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_ImportName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ImportName(string value);
    [CompilerGeneratedAttribute]
public string get_LocalName();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_LocalName(string value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(ImportEntry left, ImportEntry right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(ImportEntry left, ImportEntry right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(ImportEntry other);
    [CompilerGeneratedAttribute]
public ImportEntry <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(ModuleRequest& ModuleRequest, String& ImportName, String& LocalName);
}
public abstract class Jint.Runtime.Modules.Module : JsValue {
    private ObjectInstance _namespace;
    protected Engine _engine;
    protected Realm _realm;
    internal ModuleEnvironment _environment;
    [CompilerGeneratedAttribute]
private string <Location>k__BackingField;
    public string Location { get; }
    internal Module(Engine engine, Realm realm, string location);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Location();
    public abstract virtual List`1<string> GetExportedNames(List`1<CyclicModule> exportStarSet);
    internal abstract virtual ResolvedBinding ResolveExport(string exportName, List`1<ExportResolveSetItem> resolveSet);
    public abstract virtual void Link();
    public abstract virtual JsValue Evaluate();
    protected internal abstract virtual int InnerModuleLinking(Stack`1<CyclicModule> stack, int index);
    protected internal abstract virtual Completion InnerModuleEvaluation(Stack`1<CyclicModule> stack, int index, Int32& asyncEvalOrder);
    public static ObjectInstance GetModuleNamespace(Module module);
    private static ModuleNamespace CreateModuleNamespace(Module module, List`1<string> unambiguousNames);
    public virtual object ToObject();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Jint.Runtime.Modules.ModuleBuilder : object {
    private Engine _engine;
    private string _specifier;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Nullable`1<Prepared`1<Module>> _module;
    private List`1<string> _sourceRaw;
    private Dictionary`2<string, JsValue> _exports;
    private ParserOptions _defaultParserOptions;
    private ModuleParsingOptions _parsingOptions;
    internal ModuleBuilder(Engine engine, string specifier);
    public ModuleBuilder AddSource(string code);
    public ModuleBuilder AddModule(Prepared`1& preparedModule);
    public ModuleBuilder ExportValue(string name, JsValue value);
    public ModuleBuilder ExportObject(string name, object value);
    public ModuleBuilder ExportType();
    public ModuleBuilder ExportType(string name);
    public ModuleBuilder ExportType(Type type);
    public ModuleBuilder ExportType(string name, Type type);
    public ModuleBuilder ExportFunction(string name, Func`2<JsValue[], JsValue> fn);
    public ModuleBuilder ExportFunction(string name, Func`1<JsValue> fn);
    public ModuleBuilder ExportFunction(string name, Action`1<JsValue[]> fn);
    public ModuleBuilder ExportFunction(string name, Action fn);
    public ModuleBuilder WithOptions(Func`2<ModuleParsingOptions, ModuleParsingOptions> configure);
    internal Prepared`1<Module> Parse();
    internal void BindExportedValues(BuilderModule module);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Jint.Runtime.Modules.ModuleFactory : object {
    public static Module BuildSourceTextModule(Engine engine, ResolvedSpecifier resolved, string code, ModuleParsingOptions parsingOptions);
    public static Module BuildSourceTextModule(Engine engine, Prepared`1& preparedModule);
    public static Module BuildJsonModule(Engine engine, ResolvedSpecifier resolved, string jsonString);
    public static Module BuildJsonModule(Engine engine, JsValue parsedJson, string location);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Jint.Runtime.Modules.ModuleImportAttribute : ValueType {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Key { get; public set; }
    public string Value { get; public set; }
    public ModuleImportAttribute(string Key, string Value);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Key(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Value(string value);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(ModuleImportAttribute left, ModuleImportAttribute right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(ModuleImportAttribute left, ModuleImportAttribute right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(ModuleImportAttribute other);
    [CompilerGeneratedAttribute]
public void Deconstruct(String& Key, String& Value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Jint.Runtime.Modules.ModuleLoader : object {
    public abstract virtual ResolvedSpecifier Resolve(string referencingModuleLocation, ModuleRequest moduleRequest);
    public sealed virtual Module LoadModule(Engine engine, ResolvedSpecifier resolved);
    protected abstract virtual string LoadModuleContents(Engine engine, ResolvedSpecifier resolved);
}
internal class Jint.Runtime.Modules.ModuleNamespace : ObjectInstance {
    private Module _module;
    private HashSet`1<string> _exports;
    public bool Extensible { get; }
    public ModuleNamespace(Engine engine, Module module, List`1<string> exports);
    protected virtual void Initialize();
    protected internal virtual ObjectInstance GetPrototypeOf();
    internal virtual bool SetPrototypeOf(JsValue value);
    private bool SetImmutablePrototype(JsValue value);
    public virtual bool get_Extensible();
    public virtual bool PreventExtensions();
    public virtual PropertyDescriptor GetOwnProperty(JsValue property);
    public virtual bool DefineOwnProperty(JsValue property, PropertyDescriptor desc);
    public virtual bool HasProperty(JsValue property);
    public virtual JsValue Get(JsValue property, JsValue receiver);
    public virtual bool Set(JsValue property, JsValue value, JsValue receiver);
    public virtual bool Delete(JsValue property);
    public virtual List`1<JsValue> GetOwnPropertyKeys(Types types);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Jint.Runtime.Modules.ModuleRequest : ValueType {
    [CompilerGeneratedAttribute]
private string <Specifier>k__BackingField;
    [CompilerGeneratedAttribute]
private ModuleImportAttribute[] <Attributes>k__BackingField;
    public string Specifier { get; public set; }
    public ModuleImportAttribute[] Attributes { get; public set; }
    public ModuleRequest(string Specifier, ModuleImportAttribute[] Attributes);
    [CompilerGeneratedAttribute]
public string get_Specifier();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Specifier(string value);
    [CompilerGeneratedAttribute]
public ModuleImportAttribute[] get_Attributes();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Attributes(ModuleImportAttribute[] value);
    public sealed virtual bool Equals(ModuleRequest other);
    public virtual int GetHashCode();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(ModuleRequest left, ModuleRequest right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(ModuleRequest left, ModuleRequest right);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public void Deconstruct(String& Specifier, ModuleImportAttribute[]& Attributes);
}
[ExtensionAttribute]
public static class Jint.Runtime.Modules.ModuleRequestExtensions : object {
    [ExtensionAttribute]
public static bool IsJsonModule(ModuleRequest request);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Jint.Runtime.Modules.ModuleResolutionException : JintException {
    [CompilerGeneratedAttribute]
private string <ResolverAlgorithmError>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Specifier>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <FilePath>k__BackingField;
    public string ResolverAlgorithmError { get; }
    public string Specifier { get; }
    [NullableAttribute("2")]
public string FilePath { get; }
    public ModuleResolutionException(string resolverAlgorithmError, string specifier, string parent, string filePath);
    [CompilerGeneratedAttribute]
public string get_ResolverAlgorithmError();
    [CompilerGeneratedAttribute]
public string get_Specifier();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_FilePath();
}
internal enum Jint.Runtime.Modules.ModuleStatus : Enum {
    public int value__;
    public static ModuleStatus Unlinked;
    public static ModuleStatus Linking;
    public static ModuleStatus Linked;
    public static ModuleStatus Evaluating;
    public static ModuleStatus EvaluatingAsync;
    public static ModuleStatus Evaluated;
}
internal class Jint.Runtime.Modules.ResolvedBinding : object {
    [CompilerGeneratedAttribute]
private Module <Module>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BindingName>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public Module Module { get; public set; }
    public string BindingName { get; public set; }
    internal static ResolvedBinding Ambiguous { get; }
    public ResolvedBinding(Module Module, string BindingName);
    [CompilerGeneratedAttribute]
private ResolvedBinding(ResolvedBinding original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public Module get_Module();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Module(Module value);
    [CompilerGeneratedAttribute]
public string get_BindingName();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_BindingName(string value);
    internal static ResolvedBinding get_Ambiguous();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(ResolvedBinding left, ResolvedBinding right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(ResolvedBinding left, ResolvedBinding right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(ResolvedBinding other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public ResolvedBinding <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(Module& Module, String& BindingName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Jint.Runtime.Modules.ResolvedSpecifier : object {
    [CompilerGeneratedAttribute]
private ModuleRequest <ModuleRequest>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Uri <Uri>k__BackingField;
    [CompilerGeneratedAttribute]
private SpecifierType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public ModuleRequest ModuleRequest { get; public set; }
    public string Key { get; public set; }
    [NullableAttribute("2")]
public Uri Uri { get; public set; }
    public SpecifierType Type { get; public set; }
    public ResolvedSpecifier(ModuleRequest ModuleRequest, string Key, Uri Uri, SpecifierType Type);
    [CompilerGeneratedAttribute]
protected ResolvedSpecifier(ResolvedSpecifier original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public ModuleRequest get_ModuleRequest();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ModuleRequest(ModuleRequest value);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Key(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Uri get_Uri();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Uri(Uri value);
    [CompilerGeneratedAttribute]
public SpecifierType get_Type();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Type(SpecifierType value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(ResolvedSpecifier left, ResolvedSpecifier right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(ResolvedSpecifier left, ResolvedSpecifier right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(ResolvedSpecifier other);
    [CompilerGeneratedAttribute]
public virtual ResolvedSpecifier <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(ModuleRequest& ModuleRequest, String& Key, Uri& Uri, SpecifierType& Type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Runtime.Modules.SourceTextModule : CyclicModule {
    internal Module _source;
    private ParserOptions _parserOptions;
    private ExecutionContext _context;
    [NullableAttribute("2")]
private ObjectInstance _importMeta;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<ImportEntry> _importEntries;
    internal List`1<ExportEntry> _localExportEntries;
    private List`1<ExportEntry> _indirectExportEntries;
    private List`1<ExportEntry> _starExportEntries;
    internal ObjectInstance ImportMeta { get; internal set; }
    internal SourceTextModule(Engine engine, Realm realm, Prepared`1& source, string location, bool async);
    internal ObjectInstance get_ImportMeta();
    internal void set_ImportMeta(ObjectInstance value);
    public virtual List`1<string> GetExportedNames(List`1<CyclicModule> exportStarSet);
    [NullableContextAttribute("2")]
internal virtual ResolvedBinding ResolveExport(string exportName, List`1<ExportResolveSetItem> resolveSet);
    protected virtual void InitializeEnvironment();
    [NullableContextAttribute("2")]
internal virtual Completion ExecuteModule(PromiseCapability capability);
}
public enum Jint.Runtime.Modules.SpecifierType : Enum {
    public int value__;
    public static SpecifierType Error;
    public static SpecifierType RelativeOrAbsolute;
    public static SpecifierType Bare;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Runtime.Modules.SyntheticModule : Module {
    private JsValue _obj;
    [NullableAttribute("2")]
private ParserOptions _parserOptions;
    private List`1<string> _exportNames;
    internal SyntheticModule(Engine engine, Realm realm, JsValue obj, string location, ParserOptions parserOptions);
    public virtual List`1<string> GetExportedNames(List`1<CyclicModule> exportStarSet);
    internal virtual ResolvedBinding ResolveExport(string exportName, List`1<ExportResolveSetItem> resolveSet);
    public virtual void Link();
    public virtual JsValue Evaluate();
    protected internal virtual int InnerModuleLinking(Stack`1<CyclicModule> stack, int index);
    protected internal virtual Completion InnerModuleEvaluation(Stack`1<CyclicModule> stack, int index, Int32& asyncEvalOrder);
}
[DefaultMemberAttribute("Item")]
[DebuggerDisplayAttribute("Count = {Count}")]
internal class Jint.Runtime.OrderedDictionary`2 : object {
    private Dictionary`2<TKey, TValue> dictionary;
    private List`1<TKey> keys;
    private static string ArrayTooSmall;
    private static string EditReadOnlyList;
    private static string IndexOutOfRange;
    private static string TooSmall;
    public KeyCollection<TKey, TValue> Keys { get; }
    public ValueCollection<TKey, TValue> Values { get; }
    public TValue Item { get; public set; }
    public TValue Item { get; public set; }
    public int Count { get; }
    private KeyValuePair`2<TKey, TValue> System.Collections.Generic.IList<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Item { get; private set; }
    private ICollection`1<TKey> System.Collections.Generic.IDictionary<TKey,TValue>.Keys { get; }
    private ICollection`1<TValue> System.Collections.Generic.IDictionary<TKey,TValue>.Values { get; }
    private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly { get; }
    public OrderedDictionary`2(int capacity);
    public OrderedDictionary`2(IEqualityComparer`1<TKey> comparer);
    public OrderedDictionary`2(int capacity, IEqualityComparer`1<TKey> comparer);
    public sealed virtual void Add(TKey key, TValue value);
    public void Insert(int index, TKey key, TValue value);
    public sealed virtual bool ContainsKey(TKey key);
    public TKey GetKey(int index);
    public int IndexOf(TKey key);
    public KeyCollection<TKey, TValue> get_Keys();
    public sealed virtual bool Remove(TKey key);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual bool TryGetValue(TKey key, TValue& value);
    public ValueCollection<TKey, TValue> get_Values();
    public TValue get_Item(int index);
    public void set_Item(int index, TValue value);
    public sealed virtual TValue get_Item(TKey key);
    public sealed virtual void set_Item(TKey key, TValue value);
    public sealed virtual void Clear();
    public sealed virtual int get_Count();
    [IteratorStateMachineAttribute("Jint.Runtime.OrderedDictionary`2/<GetEnumerator>d__31")]
public sealed virtual IEnumerator`1<KeyValuePair`2<TKey, TValue>> GetEnumerator();
    private sealed virtual override int System.Collections.Generic.IList<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IndexOf(KeyValuePair`2<TKey, TValue> item);
    private sealed virtual override void System.Collections.Generic.IList<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Insert(int index, KeyValuePair`2<TKey, TValue> item);
    private sealed virtual override KeyValuePair`2<TKey, TValue> System.Collections.Generic.IList<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_Item(int index);
    private sealed virtual override void System.Collections.Generic.IList<System.Collections.Generic.KeyValuePair<TKey,TValue>>.set_Item(int index, KeyValuePair`2<TKey, TValue> value);
    private sealed virtual override ICollection`1<TKey> System.Collections.Generic.IDictionary<TKey,TValue>.get_Keys();
    private sealed virtual override ICollection`1<TValue> System.Collections.Generic.IDictionary<TKey,TValue>.get_Values();
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(KeyValuePair`2<TKey, TValue> item);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(KeyValuePair`2<TKey, TValue> item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(KeyValuePair`2[] array, int arrayIndex);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_IsReadOnly();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(KeyValuePair`2<TKey, TValue> item);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal class Jint.Runtime.OrderedSet`1 : object {
    internal List`1<T> _list;
    internal HashSet`1<T> _set;
    public T Item { get; public set; }
    public int Count { get; }
    public OrderedSet`1(HashSet`1<T> values);
    public OrderedSet`1(IEqualityComparer`1<T> comparer);
    public T get_Item(int index);
    public void set_Item(int index, T value);
    public OrderedSet`1<T> Clone();
    public void Add(T item);
    public void Clear();
    public bool Contains(T item);
    public int get_Count();
    public bool Remove(T item);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Jint.Runtime.PromiseRejectedException : JintException {
    [CompilerGeneratedAttribute]
private JsValue <RejectedValue>k__BackingField;
    public JsValue RejectedValue { get; }
    public PromiseRejectedException(JsValue value);
    [CompilerGeneratedAttribute]
public JsValue get_RejectedValue();
}
internal class Jint.Runtime.RangeErrorException : JintException {
    [NullableContextAttribute("1")]
public RangeErrorException(string message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Jint.Runtime.Realm : object {
    internal Dictionary`2<Node, JsArray> _templateMap;
    [CompilerGeneratedAttribute]
private Intrinsics <Intrinsics>k__BackingField;
    [CompilerGeneratedAttribute]
private ObjectInstance <GlobalObject>k__BackingField;
    [CompilerGeneratedAttribute]
private GlobalEnvironment <GlobalEnv>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private object <HostDefined>k__BackingField;
    public Intrinsics Intrinsics { get; internal set; }
    public ObjectInstance GlobalObject { get; internal set; }
    internal GlobalEnvironment GlobalEnv { get; internal set; }
    [NullableAttribute("2")]
public object HostDefined { get; public set; }
    [CompilerGeneratedAttribute]
public Intrinsics get_Intrinsics();
    [CompilerGeneratedAttribute]
internal void set_Intrinsics(Intrinsics value);
    [CompilerGeneratedAttribute]
public ObjectInstance get_GlobalObject();
    [CompilerGeneratedAttribute]
internal void set_GlobalObject(ObjectInstance value);
    [CompilerGeneratedAttribute]
internal GlobalEnvironment get_GlobalEnv();
    [CompilerGeneratedAttribute]
internal void set_GlobalEnv(GlobalEnvironment value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public object get_HostDefined();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_HostDefined(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Jint.Runtime.RecursionDepthOverflowException : JintException {
    [CompilerGeneratedAttribute]
private string <CallChain>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CallExpressionReference>k__BackingField;
    public string CallChain { get; }
    public string CallExpressionReference { get; }
    internal RecursionDepthOverflowException(JintCallStack currentStack, string currentExpressionReference);
    [CompilerGeneratedAttribute]
public string get_CallChain();
    [CompilerGeneratedAttribute]
public string get_CallExpressionReference();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Jint.Runtime.Reference : object {
    private JsValue _base;
    private JsValue _referencedName;
    internal bool _strict;
    [NullableAttribute("2")]
private JsValue _thisValue;
    public JsValue Base { get; }
    public JsValue ReferencedName { get; }
    public bool Strict { get; }
    public bool HasPrimitiveBase { get; }
    public bool IsUnresolvableReference { get; }
    public bool IsSuperReference { get; }
    public bool IsPropertyReference { get; }
    public JsValue ThisValue { get; }
    public bool IsPrivateReference { get; }
    internal Reference(JsValue baseValue, JsValue referencedName, bool strict, JsValue thisValue);
    public JsValue get_Base();
    public JsValue get_ReferencedName();
    public bool get_Strict();
    public bool get_HasPrimitiveBase();
    public bool get_IsUnresolvableReference();
    public bool get_IsSuperReference();
    public bool get_IsPropertyReference();
    public JsValue get_ThisValue();
    public bool get_IsPrivateReference();
    internal Reference Reassign(JsValue baseValue, JsValue name, bool strict, JsValue thisValue);
    internal void AssertValid(Realm realm);
    internal void InitializeReferencedBinding(JsValue value);
    internal void EvaluateAndCachePropertyKey();
}
[ExtensionAttribute]
internal static class Jint.Runtime.ScriptOrModuleExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static Module AsModule(IScriptOrModule scriptOrModule, Engine engine, SourceLocation& location);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Jint.Runtime.ScriptRecord : object {
    [CompilerGeneratedAttribute]
private Realm <Realm>k__BackingField;
    [CompilerGeneratedAttribute]
private Script <EcmaScriptCode>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public Realm Realm { get; public set; }
    public Script EcmaScriptCode { get; public set; }
    [NullableAttribute("2")]
public string Location { get; public set; }
    public ScriptRecord(Realm Realm, Script EcmaScriptCode, string Location);
    [CompilerGeneratedAttribute]
private ScriptRecord(ScriptRecord original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public Realm get_Realm();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Realm(Realm value);
    [CompilerGeneratedAttribute]
public Script get_EcmaScriptCode();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_EcmaScriptCode(Script value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual string get_Location();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Location(string value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(ScriptRecord left, ScriptRecord right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(ScriptRecord left, ScriptRecord right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(ScriptRecord other);
    [CompilerGeneratedAttribute]
public ScriptRecord <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(Realm& Realm, Script& EcmaScriptCode, String& Location);
}
public class Jint.Runtime.StatementsCountOverflowException : JintException {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Jint.Runtime.TypeConverter : object {
    private static double DoubleIsIntegerTolerance;
    private static String[] intToString;
    private static String[] charToString;
    private static TypeConverter();
    public static JsValue ToPrimitive(JsValue input, Types preferredType);
    private static JsValue ToPrimitiveObjectInstance(ObjectInstance oi, Types preferredType);
    internal static JsValue OrdinaryToPrimitive(ObjectInstance input, Types hint);
    public static bool ToBoolean(JsValue o);
    public static JsValue ToNumeric(JsValue value);
    public static double ToNumber(JsValue o);
    private static double ToNumberUnlikely(JsValue o);
    public static JsNumber ToJsNumber(JsValue o);
    private static JsNumber ToJsNumberUnlikely(JsValue o);
    private static double ToNumber(string input);
    public static ulong ToLength(JsValue o);
    public static double ToIntegerOrInfinity(JsValue argument);
    public static double ToInteger(JsValue o);
    internal static double ToInteger(double number);
    internal static int DoubleToInt32Slow(double o);
    public static int ToInt32(JsValue o);
    public static UInt32 ToUint32(JsValue o);
    public static ushort ToUint16(JsValue o);
    internal static double ToInt16(JsValue o);
    internal static double ToInt8(JsValue o);
    internal static double ToUint8(JsValue o);
    internal static byte ToUint8Clamp(JsValue o);
    private static byte ToUint8ClampUnlikely(JsValue o);
    public static BigInteger ToBigInt(JsValue value);
    private static BigInteger ToBigIntUnlikely(JsValue value);
    public static JsBigInt ToJsBigInt(JsValue value);
    private static JsBigInt ToJsBigIntUnlikely(JsValue value);
    internal static BigInteger StringToBigInt(string str);
    internal static bool TryStringToBigInt(string str, BigInteger& result);
    internal static long ToBigInt64(BigInteger value);
    internal static ulong ToBigUint64(BigInteger value);
    internal static BigInteger BigIntegerModulo(BigInteger a, BigInteger n);
    internal static Nullable`1<double> CanonicalNumericIndexString(JsValue value);
    public static UInt32 ToIndex(Realm realm, JsValue value);
    internal static string ToString(long i);
    internal static string ToString(int i);
    internal static string ToString(UInt32 i);
    internal static string ToString(char c);
    internal static string ToString(ulong i);
    internal static string ToString(double d);
    internal static bool CanBeStringifiedAsLong(double d);
    internal static string ToString(BigInteger bigInteger);
    public static JsValue ToPropertyKey(JsValue o);
    private static JsValue ToPropertyKeyNonString(JsValue o);
    public static string ToString(JsValue o);
    internal static JsString ToJsString(JsValue o);
    private static string ToStringNonString(JsValue o);
    public static ObjectInstance ToObject(Realm realm, JsValue value);
    internal static bool IsIntegralNumber(double value);
    private static ObjectInstance ToObjectNonObject(Realm realm, JsValue value);
    internal static void CheckObjectCoercible(Engine engine, JsValue o, Node sourceNode, string referenceName);
    private static void ThrowMemberNullOrUndefinedError(Engine engine, JsValue o, Node sourceNode, string referencedName);
    public static void CheckObjectCoercible(Engine engine, JsValue o);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Jint.Runtime.TypeErrorException : JintException {
    [CompilerGeneratedAttribute]
private Node <Node>k__BackingField;
    public Node Node { get; }
    public TypeErrorException(string message, Node node);
    [CompilerGeneratedAttribute]
public Node get_Node();
}
[FlagsAttribute]
public enum Jint.Runtime.Types : Enum {
    public int value__;
    public static Types Empty;
    public static Types Undefined;
    public static Types Null;
    public static Types Boolean;
    public static Types String;
    public static Types Number;
    public static Types Symbol;
    public static Types BigInt;
    public static Types Object;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Jint.ScriptParsingOptions : object {
    private static ParserOptions _defaultParserOptions;
    public static ScriptParsingOptions Default;
    [CompilerGeneratedAttribute]
private bool <AllowReturnOutsideFunction>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <CompileRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <RegexTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Tolerant>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public bool AllowReturnOutsideFunction { get; public set; }
    public Nullable`1<bool> CompileRegex { get; public set; }
    public Nullable`1<TimeSpan> RegexTimeout { get; public set; }
    public bool Tolerant { get; public set; }
    [CompilerGeneratedAttribute]
private ScriptParsingOptions(ScriptParsingOptions original);
    private static ScriptParsingOptions();
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public bool get_AllowReturnOutsideFunction();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_AllowReturnOutsideFunction(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<bool> get_CompileRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_CompileRegex(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<TimeSpan> get_RegexTimeout();
    [CompilerGeneratedAttribute]
public sealed virtual Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_RegexTimeout(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Tolerant();
    [CompilerGeneratedAttribute]
public sealed virtual Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Tolerant(bool value);
    internal ParserOptions ApplyTo(ParserOptions parserOptions, RegExpParseMode defaultRegExpParseMode, TimeSpan defaultRegexTimeout);
    internal ParserOptions GetParserOptions();
    internal ParserOptions GetParserOptions(Options engineOptions);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(ScriptParsingOptions left, ScriptParsingOptions right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(ScriptParsingOptions left, ScriptParsingOptions right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(ScriptParsingOptions other);
    [CompilerGeneratedAttribute]
public ScriptParsingOptions <Clone>$();
}
public class Jint.ScriptPreparationException : JintException {
    [NullableContextAttribute("2")]
public ScriptPreparationException(string message, Exception innerException);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Jint.ScriptPreparationOptions : object {
    private static ParserOptions _defaultParserOptions;
    public static ScriptPreparationOptions Default;
    [CompilerGeneratedAttribute]
private ScriptParsingOptions <ParsingOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FoldConstants>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public ScriptParsingOptions ParsingOptions { get; public set; }
    public bool FoldConstants { get; public set; }
    [CompilerGeneratedAttribute]
private ScriptPreparationOptions(ScriptPreparationOptions original);
    private static ScriptPreparationOptions();
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public sealed virtual ScriptParsingOptions get_ParsingOptions();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ParsingOptions(ScriptParsingOptions value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_FoldConstants();
    [CompilerGeneratedAttribute]
public sealed virtual Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_FoldConstants(bool value);
    internal ParserOptions GetParserOptions();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(ScriptPreparationOptions left, ScriptPreparationOptions right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(ScriptPreparationOptions left, ScriptPreparationOptions right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(ScriptPreparationOptions other);
    [CompilerGeneratedAttribute]
public ScriptPreparationOptions <Clone>$();
}
[IsReadOnlyAttribute]
internal class Jint.StrictModeScope : ValueType {
    private bool _strict;
    private bool _force;
    private ushort _forcedRefCount;
    [ThreadStaticAttribute]
private static ushort _refCount;
    public static bool IsStrictModeCode { get; }
    public StrictModeScope(bool strict, bool force);
    public sealed virtual void Dispose();
    public static bool get_IsStrictModeCode();
}
[FlagsAttribute]
public enum Jint.ValueCoercionType : Enum {
    public int value__;
    public static ValueCoercionType None;
    public static ValueCoercionType Boolean;
    public static ValueCoercionType Number;
    public static ValueCoercionType String;
    public static ValueCoercionType All;
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal static class System.Buffers.SearchValues : object {
    [NullableContextAttribute("1")]
internal static SearchValues`1<char> Create(string input);
    internal static SearchValues`1<char> Create(ReadOnlySpan`1<char> input);
}
internal class System.Buffers.SearchValues`1 : object {
    [NullableAttribute("1")]
private Boolean[] _data;
    private char _min;
    private char _max;
    internal SearchValues`1(ReadOnlySpan`1<char> input);
    public bool Contains(char c);
}
[AttributeUsageAttribute("2432")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.AllowNullAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.DisallowNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ParameterValue>k__BackingField;
    public bool ParameterValue { get; }
    public DoesNotReturnIfAttribute(bool parameterValue);
    [CompilerGeneratedAttribute]
public bool get_ParameterValue();
}
[AttributeUsageAttribute("28108")]
[ExcludeFromCodeCoverageAttribute]
[ConditionalAttribute("MULTI_TARGETING_SUPPORT_ATTRIBUTES")]
internal class System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute : Attribute {
    [CompilerGeneratedAttribute]
private DynamicallyAccessedMemberTypes <MemberTypes>k__BackingField;
    public DynamicallyAccessedMemberTypes MemberTypes { get; }
    public DynamicallyAccessedMembersAttribute(DynamicallyAccessedMemberTypes memberTypes);
    [CompilerGeneratedAttribute]
public DynamicallyAccessedMemberTypes get_MemberTypes();
}
[FlagsAttribute]
internal enum System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes : Enum {
    public int value__;
    public static DynamicallyAccessedMemberTypes None;
    public static DynamicallyAccessedMemberTypes PublicParameterlessConstructor;
    public static DynamicallyAccessedMemberTypes PublicConstructors;
    public static DynamicallyAccessedMemberTypes NonPublicConstructors;
    public static DynamicallyAccessedMemberTypes PublicMethods;
    public static DynamicallyAccessedMemberTypes NonPublicMethods;
    public static DynamicallyAccessedMemberTypes PublicFields;
    public static DynamicallyAccessedMemberTypes NonPublicFields;
    public static DynamicallyAccessedMemberTypes PublicNestedTypes;
    public static DynamicallyAccessedMemberTypes NonPublicNestedTypes;
    public static DynamicallyAccessedMemberTypes PublicProperties;
    public static DynamicallyAccessedMemberTypes NonPublicProperties;
    public static DynamicallyAccessedMemberTypes PublicEvents;
    public static DynamicallyAccessedMemberTypes NonPublicEvents;
    public static DynamicallyAccessedMemberTypes Interfaces;
    public static DynamicallyAccessedMemberTypes All;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("352")]
[ExcludeFromCodeCoverageAttribute]
[ConditionalAttribute("MULTI_TARGETING_SUPPORT_ATTRIBUTES")]
internal class System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <MemberSignature>k__BackingField;
    [CompilerGeneratedAttribute]
private DynamicallyAccessedMemberTypes <MemberTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Condition>k__BackingField;
    public string MemberSignature { get; }
    public DynamicallyAccessedMemberTypes MemberTypes { get; }
    public Type Type { get; }
    public string TypeName { get; }
    public string AssemblyName { get; }
    public string Condition { get; public set; }
    [NullableContextAttribute("1")]
public DynamicDependencyAttribute(string memberSignature);
    [NullableContextAttribute("1")]
public DynamicDependencyAttribute(string memberSignature, Type type);
    [NullableContextAttribute("1")]
public DynamicDependencyAttribute(string memberSignature, string typeName, string assemblyName);
    [NullableContextAttribute("1")]
public DynamicDependencyAttribute(DynamicallyAccessedMemberTypes memberTypes, Type type);
    [NullableContextAttribute("1")]
public DynamicDependencyAttribute(DynamicallyAccessedMemberTypes memberTypes, string typeName, string assemblyName);
    [CompilerGeneratedAttribute]
public string get_MemberSignature();
    [CompilerGeneratedAttribute]
public DynamicallyAccessedMemberTypes get_MemberTypes();
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public string get_TypeName();
    [CompilerGeneratedAttribute]
public string get_AssemblyName();
    [CompilerGeneratedAttribute]
public string get_Condition();
    [CompilerGeneratedAttribute]
public void set_Condition(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("6143")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.ExperimentalAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <DiagnosticId>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <UrlFormat>k__BackingField;
    public string DiagnosticId { get; }
    [NullableAttribute("2")]
public string UrlFormat { get; public set; }
    public ExperimentalAttribute(string diagnosticId);
    [CompilerGeneratedAttribute]
public string get_DiagnosticId();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_UrlFormat();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_UrlFormat(string value);
}
[AttributeUsageAttribute("10624")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public MaybeNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("192")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public String[] Members { get; }
    public MemberNotNullAttribute(string member);
    public MemberNotNullAttribute(String[] members);
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("192")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public bool ReturnValue { get; }
    public String[] Members { get; }
    public MemberNotNullWhenAttribute(bool returnValue, string member);
    public MemberNotNullWhenAttribute(bool returnValue, String[] members);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("10624")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("10368")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public NotNullIfNotNullAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[AttributeUsageAttribute("2048")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("736")]
[ExcludeFromCodeCoverageAttribute]
[ConditionalAttribute("MULTI_TARGETING_SUPPORT_ATTRIBUTES")]
internal class System.Diagnostics.CodeAnalysis.RequiresAssemblyFilesAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public string Message { get; }
    public string Url { get; public set; }
    [NullableContextAttribute("1")]
public RequiresAssemblyFilesAttribute(string message);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("100")]
[ExcludeFromCodeCoverageAttribute]
[ConditionalAttribute("MULTI_TARGETING_SUPPORT_ATTRIBUTES")]
internal class System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public string Message { get; }
    [NullableAttribute("2")]
public string Url { get; public set; }
    public RequiresDynamicCodeAttribute(string message);
    [CompilerGeneratedAttribute]
public string get_Message();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Url();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Url(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("100")]
[ExcludeFromCodeCoverageAttribute]
[ConditionalAttribute("MULTI_TARGETING_SUPPORT_ATTRIBUTES")]
internal class System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public string Message { get; }
    [NullableAttribute("2")]
public string Url { get; public set; }
    public RequiresUnreferencedCodeAttribute(string message);
    [CompilerGeneratedAttribute]
public string get_Message();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Url();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Url(string value);
}
[AttributeUsageAttribute("32")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.SetsRequiredMembersAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2432")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.StringSyntaxAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Syntax>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Object[] <Arguments>k__BackingField;
    public static string CompositeFormat;
    public static string DateOnlyFormat;
    public static string DateTimeFormat;
    public static string EnumFormat;
    public static string GuidFormat;
    public static string Json;
    public static string NumericFormat;
    public static string Regex;
    public static string TimeOnlyFormat;
    public static string TimeSpanFormat;
    public static string Uri;
    public static string Xml;
    public string Syntax { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Object[] Arguments { get; }
    public StringSyntaxAttribute(string syntax);
    public StringSyntaxAttribute(string syntax, Object[] arguments);
    [CompilerGeneratedAttribute]
public string get_Syntax();
    [CompilerGeneratedAttribute]
public Object[] get_Arguments();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("32767")]
[ExcludeFromCodeCoverageAttribute]
[ConditionalAttribute("MULTI_TARGETING_SUPPORT_ATTRIBUTES")]
internal class System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute : Attribute {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <Category>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <CheckId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Scope>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MessageId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Justification>k__BackingField;
    [NullableAttribute("1")]
public string Category { get; }
    [NullableAttribute("1")]
public string CheckId { get; }
    public string Scope { get; public set; }
    public string Target { get; public set; }
    public string MessageId { get; public set; }
    public string Justification { get; public set; }
    [NullableContextAttribute("1")]
public UnconditionalSuppressMessageAttribute(string category, string checkId);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_Category();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_CheckId();
    [CompilerGeneratedAttribute]
public string get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(string value);
    [CompilerGeneratedAttribute]
public string get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(string value);
    [CompilerGeneratedAttribute]
public string get_MessageId();
    [CompilerGeneratedAttribute]
public void set_MessageId(string value);
    [CompilerGeneratedAttribute]
public string get_Justification();
    [CompilerGeneratedAttribute]
public void set_Justification(string value);
}
[AttributeUsageAttribute("2240")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.UnscopedRefAttribute : Attribute {
}
[AttributeUsageAttribute("108")]
[ExcludeFromCodeCoverageAttribute]
[ConditionalAttribute("MULTI_TARGETING_SUPPORT_ATTRIBUTES")]
internal class System.Diagnostics.StackTraceHiddenAttribute : Attribute {
}
[IsReadOnlyAttribute]
[ExcludeFromCodeCoverageAttribute]
internal class System.Index : ValueType {
    private int _value;
    public static Index Start { get; }
    public static Index End { get; }
    public int Value { get; }
    public bool IsFromEnd { get; }
    public Index(int value, bool fromEnd);
    private Index(int value);
    public static Index get_Start();
    public static Index get_End();
    public static Index FromStart(int value);
    public static Index FromEnd(int value);
    public int get_Value();
    public bool get_IsFromEnd();
    public int GetOffset(int length);
    [NullableContextAttribute("2")]
public virtual bool Equals(object value);
    public sealed virtual bool Equals(Index other);
    public virtual int GetHashCode();
    public static Index op_Implicit(int value);
    [NullableContextAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("1")]
private string ToStringFromEnd();
}
[IsReadOnlyAttribute]
[ExcludeFromCodeCoverageAttribute]
internal class System.Range : ValueType {
    [CompilerGeneratedAttribute]
private Index <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private Index <End>k__BackingField;
    public Index Start { get; }
    public Index End { get; }
    public static Range All { get; }
    public Range(Index start, Index end);
    [CompilerGeneratedAttribute]
public Index get_Start();
    [CompilerGeneratedAttribute]
public Index get_End();
    [NullableContextAttribute("2")]
public virtual bool Equals(object value);
    public sealed virtual bool Equals(Range other);
    public virtual int GetHashCode();
    [NullableContextAttribute("1")]
public virtual string ToString();
    public static Range StartAt(Index start);
    public static Range EndAt(Index end);
    public static Range get_All();
    public ValueTuple`2<int, int> GetOffsetAndLength(int length);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("5212")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Runtime.CompilerServices.AsyncMethodBuilderAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <BuilderType>k__BackingField;
    public Type BuilderType { get; }
    public AsyncMethodBuilderAttribute(Type builderType);
    [CompilerGeneratedAttribute]
public Type get_BuilderType();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2048")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Runtime.CompilerServices.CallerArgumentExpressionAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public CallerArgumentExpressionAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("1036")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Runtime.CompilerServices.CollectionBuilderAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <BuilderType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MethodName>k__BackingField;
    public Type BuilderType { get; }
    public string MethodName { get; }
    public CollectionBuilderAttribute(Type builderType, string methodName);
    [CompilerGeneratedAttribute]
public Type get_BuilderType();
    [CompilerGeneratedAttribute]
public string get_MethodName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("32767")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <FeatureName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsOptional>k__BackingField;
    public static string RefStructs;
    public static string RequiredMembers;
    public string FeatureName { get; }
    public bool IsOptional { get; public set; }
    public CompilerFeatureRequiredAttribute(string featureName);
    [CompilerGeneratedAttribute]
public string get_FeatureName();
    [CompilerGeneratedAttribute]
public bool get_IsOptional();
    [CompilerGeneratedAttribute]
public void set_IsOptional(bool value);
}
[AttributeUsageAttribute("1")]
[ExcludeFromCodeCoverageAttribute]
[ConditionalAttribute("MULTI_TARGETING_SUPPORT_ATTRIBUTES")]
internal class System.Runtime.CompilerServices.DisableRuntimeMarshallingAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2048")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Arguments>k__BackingField;
    public String[] Arguments { get; }
    public InterpolatedStringHandlerArgumentAttribute(string argument);
    public InterpolatedStringHandlerArgumentAttribute(String[] arguments);
    [CompilerGeneratedAttribute]
public String[] get_Arguments();
}
[AttributeUsageAttribute("12")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Runtime.CompilerServices.InterpolatedStringHandlerAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsByRefLikeAttribute : Attribute {
}
[EditorBrowsableAttribute("1")]
[ExcludeFromCodeCoverageAttribute]
internal static class System.Runtime.CompilerServices.IsExternalInit : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Runtime.CompilerServices.ModuleInitializerAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[AttributeUsageAttribute("396")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Runtime.CompilerServices.RequiredMemberAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2048")]
internal class System.Runtime.CompilerServices.ScopedRefAttribute : Attribute {
}
[AttributeUsageAttribute("1774")]
internal class System.Runtime.CompilerServices.SkipLocalsInitAttribute : Attribute {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("64")]
[ExcludeFromCodeCoverageAttribute]
[ConditionalAttribute("MULTI_TARGETING_SUPPORT_ATTRIBUTES")]
internal class System.Runtime.CompilerServices.UnsafeAccessorAttribute : Attribute {
    [CompilerGeneratedAttribute]
private UnsafeAccessorKind <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public UnsafeAccessorKind Kind { get; }
    public string Name { get; public set; }
    public UnsafeAccessorAttribute(UnsafeAccessorKind kind);
    [CompilerGeneratedAttribute]
public UnsafeAccessorKind get_Kind();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
internal enum System.Runtime.CompilerServices.UnsafeAccessorKind : Enum {
    public int value__;
    public static UnsafeAccessorKind Constructor;
    public static UnsafeAccessorKind Method;
    public static UnsafeAccessorKind StaticMethod;
    public static UnsafeAccessorKind Field;
    public static UnsafeAccessorKind StaticField;
}
[AttributeUsageAttribute("8")]
[ExcludeFromCodeCoverageAttribute]
[ConditionalAttribute("MULTI_TARGETING_SUPPORT_ATTRIBUTES")]
internal class System.Runtime.CompilerServices2.InlineArrayAttribute : Attribute {
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    public int Length { get; }
    public InlineArrayAttribute(int length);
    [CompilerGeneratedAttribute]
public int get_Length();
}
[AttributeUsageAttribute("64")]
[ExcludeFromCodeCoverageAttribute]
[ConditionalAttribute("MULTI_TARGETING_SUPPORT_ATTRIBUTES")]
internal class System.Runtime.InteropServices.SuppressGCTransitionAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
[ExcludeFromCodeCoverageAttribute]
[ConditionalAttribute("MULTI_TARGETING_SUPPORT_ATTRIBUTES")]
internal class System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute : Attribute {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Type[] CallConvs;
    [NullableAttribute("2")]
public string EntryPoint;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2047")]
[ExcludeFromCodeCoverageAttribute]
[ConditionalAttribute("MULTI_TARGETING_SUPPORT_ATTRIBUTES")]
internal class System.Runtime.Versioning.ObsoletedOSPlatformAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public string Message { get; }
    public string Url { get; public set; }
    [NullableContextAttribute("1")]
public ObsoletedOSPlatformAttribute(string platformName);
    [NullableContextAttribute("1")]
public ObsoletedOSPlatformAttribute(string platformName, string message);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("6143")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Runtime.Versioning.RequiresPreviewFeaturesAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public string Message { get; }
    public string Url { get; public set; }
    public RequiresPreviewFeaturesAttribute(string message);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
}
[AttributeUsageAttribute("2047")]
[ExcludeFromCodeCoverageAttribute]
[ConditionalAttribute("MULTI_TARGETING_SUPPORT_ATTRIBUTES")]
internal class System.Runtime.Versioning.SupportedOSPlatformAttribute : Attribute {
    [NullableContextAttribute("1")]
public SupportedOSPlatformAttribute(string platformName);
}
[AttributeUsageAttribute("448")]
[ExcludeFromCodeCoverageAttribute]
[ConditionalAttribute("MULTI_TARGETING_SUPPORT_ATTRIBUTES")]
internal class System.Runtime.Versioning.SupportedOSPlatformGuardAttribute : Attribute {
    [NullableContextAttribute("1")]
public SupportedOSPlatformGuardAttribute(string platformName);
}
[AttributeUsageAttribute("1")]
[ExcludeFromCodeCoverageAttribute]
[ConditionalAttribute("MULTI_TARGETING_SUPPORT_ATTRIBUTES")]
internal class System.Runtime.Versioning.TargetPlatformAttribute : Attribute {
    [NullableContextAttribute("1")]
public TargetPlatformAttribute(string platformName);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2047")]
[ExcludeFromCodeCoverageAttribute]
[ConditionalAttribute("MULTI_TARGETING_SUPPORT_ATTRIBUTES")]
internal class System.Runtime.Versioning.UnsupportedOSPlatformAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    public string Message { get; }
    [NullableContextAttribute("1")]
public UnsupportedOSPlatformAttribute(string platformName);
    [NullableContextAttribute("1")]
public UnsupportedOSPlatformAttribute(string platformName, string message);
    [CompilerGeneratedAttribute]
public string get_Message();
}
[AttributeUsageAttribute("448")]
[ExcludeFromCodeCoverageAttribute]
[ConditionalAttribute("MULTI_TARGETING_SUPPORT_ATTRIBUTES")]
internal class System.Runtime.Versioning.UnsupportedOSPlatformGuardAttribute : Attribute {
    [NullableContextAttribute("1")]
public UnsupportedOSPlatformGuardAttribute(string platformName);
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
[CompilerFeatureRequiredAttribute("RefStructs")]
[DefaultMemberAttribute("Item")]
internal class System.Text.ValueStringBuilder : ValueType {
    [NullableAttribute("2")]
private Char[] _arrayToReturnToPool;
    private Span`1<char> _chars;
    private int _pos;
    public int Length { get; public set; }
    public int Capacity { get; }
    public Char& Item { get; }
    public Span`1<char> RawChars { get; }
    public ValueStringBuilder(Span`1<char> initialBuffer);
    public ValueStringBuilder(int initialCapacity);
    public int get_Length();
    public void set_Length(int value);
    public int get_Capacity();
    public void EnsureCapacity(int capacity);
    public Char& GetPinnableReference();
    public Char& GetPinnableReference(bool terminate);
    public Char& get_Item(int index);
    [NullableContextAttribute("1")]
public virtual string ToString();
    public Span`1<char> get_RawChars();
    public ReadOnlySpan`1<char> AsSpan(bool terminate);
    public ReadOnlySpan`1<char> AsSpan();
    public ReadOnlySpan`1<char> AsSpan(int start);
    public ReadOnlySpan`1<char> AsSpan(int start, int length);
    public void Reverse();
    public bool TryCopyTo(Span`1<char> destination, Int32& charsWritten);
    public void Insert(int index, char value, int count);
    [NullableContextAttribute("2")]
public void Insert(int index, string s);
    public void Append(char c);
    [NullableContextAttribute("2")]
public void Append(string s);
    [NullableContextAttribute("1")]
private void AppendSlow(string s);
    public void Append(char c, int count);
    public void Append(Char* value, int length);
    public void Append(ReadOnlySpan`1<char> value);
    public Span`1<char> AppendSpan(int length);
    private void GrowAndAppend(char c);
    private void Grow(int additionalCapacityBeyondPos);
    public void Dispose();
}
