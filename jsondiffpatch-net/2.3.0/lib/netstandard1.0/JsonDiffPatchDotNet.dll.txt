[ExtensionAttribute]
internal static class DiffMatchPatch.CompatibilityExtensions : object {
    [ExtensionAttribute]
public static List`1<T> Splice(List`1<T> input, int start, int count, T[] objects);
    [ExtensionAttribute]
public static string JavaSubstring(string s, int begin, int end);
}
public class DiffMatchPatch.Diff : object {
    public Operation operation;
    public string text;
    public Diff(Operation operation, string text);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public bool Equals(Diff obj);
    public virtual int GetHashCode();
}
public class DiffMatchPatch.diff_match_patch : object {
    public float Diff_Timeout;
    public short Diff_EditCost;
    public float Match_Threshold;
    public int Match_Distance;
    public float Patch_DeleteThreshold;
    public short Patch_Margin;
    private short Match_MaxBits;
    private Regex BLANKLINEEND;
    private Regex BLANKLINESTART;
    public List`1<Diff> diff_main(string text1, string text2);
    public List`1<Diff> diff_main(string text1, string text2, bool checklines);
    private List`1<Diff> diff_main(string text1, string text2, bool checklines, DateTime deadline);
    private List`1<Diff> diff_compute(string text1, string text2, bool checklines, DateTime deadline);
    private List`1<Diff> diff_lineMode(string text1, string text2, DateTime deadline);
    protected List`1<Diff> diff_bisect(string text1, string text2, DateTime deadline);
    private List`1<Diff> diff_bisectSplit(string text1, string text2, int x, int y, DateTime deadline);
    protected Object[] diff_linesToChars(string text1, string text2);
    private string diff_linesToCharsMunge(string text, List`1<string> lineArray, Dictionary`2<string, int> lineHash);
    protected void diff_charsToLines(ICollection`1<Diff> diffs, List`1<string> lineArray);
    public int diff_commonPrefix(string text1, string text2);
    public int diff_commonSuffix(string text1, string text2);
    protected int diff_commonOverlap(string text1, string text2);
    protected String[] diff_halfMatch(string text1, string text2);
    private String[] diff_halfMatchI(string longtext, string shorttext, int i);
    public void diff_cleanupSemantic(List`1<Diff> diffs);
    public void diff_cleanupSemanticLossless(List`1<Diff> diffs);
    private int diff_cleanupSemanticScore(string one, string two);
    public void diff_cleanupEfficiency(List`1<Diff> diffs);
    public void diff_cleanupMerge(List`1<Diff> diffs);
    public int diff_xIndex(List`1<Diff> diffs, int loc);
    public string diff_prettyHtml(List`1<Diff> diffs);
    public string diff_text1(List`1<Diff> diffs);
    public string diff_text2(List`1<Diff> diffs);
    public int diff_levenshtein(List`1<Diff> diffs);
    public string diff_toDelta(List`1<Diff> diffs);
    public List`1<Diff> diff_fromDelta(string text1, string delta);
    public int match_main(string text, string pattern, int loc);
    protected int match_bitap(string text, string pattern, int loc);
    private double match_bitapScore(int e, int x, int loc, string pattern);
    protected Dictionary`2<char, int> match_alphabet(string pattern);
    protected void patch_addContext(Patch patch, string text);
    public List`1<Patch> patch_make(string text1, string text2);
    public List`1<Patch> patch_make(List`1<Diff> diffs);
    public List`1<Patch> patch_make(string text1, string text2, List`1<Diff> diffs);
    public List`1<Patch> patch_make(string text1, List`1<Diff> diffs);
    public List`1<Patch> patch_deepCopy(List`1<Patch> patches);
    public Object[] patch_apply(List`1<Patch> patches, string text);
    public string patch_addPadding(List`1<Patch> patches);
    public void patch_splitMax(List`1<Patch> patches);
    public string patch_toText(List`1<Patch> patches);
    public List`1<Patch> patch_fromText(string textline);
    public static string unescapeForEncodeUriCompatability(string str);
    internal static string UrlEncode(string str);
    internal static string UrlDecode(string str);
}
public enum DiffMatchPatch.Operation : Enum {
    public int value__;
    public static Operation DELETE;
    public static Operation INSERT;
    public static Operation EQUAL;
}
public class DiffMatchPatch.Patch : object {
    public List`1<Diff> diffs;
    public int start1;
    public int start2;
    public int length1;
    public int length2;
    public virtual string ToString();
}
public enum JsonDiffPatchDotNet.ArrayDiffMode : Enum {
    public int value__;
    public static ArrayDiffMode Efficient;
    public static ArrayDiffMode Simple;
}
[FlagsAttribute]
public enum JsonDiffPatchDotNet.DiffBehavior : Enum {
    public int value__;
    public static DiffBehavior None;
    public static DiffBehavior IgnoreMissingProperties;
    public static DiffBehavior IgnoreNewProperties;
}
internal enum JsonDiffPatchDotNet.DiffOperation : Enum {
    public int value__;
    public static DiffOperation Deleted;
    public static DiffOperation TextDiff;
    public static DiffOperation ArrayMove;
}
internal class JsonDiffPatchDotNet.Formatters.ArrayKeyComparer : object {
    public sealed virtual int Compare(string x, string y);
    private static int ArrayKeyToSortNumber(string key);
}
public abstract class JsonDiffPatchDotNet.Formatters.BaseDeltaFormatter`2 : object {
    private static IComparer`1<string> s_arrayKeyComparer;
    protected bool IncludeMoveDestinations { get; }
    private static BaseDeltaFormatter`2();
    public virtual TResult Format(JToken delta);
    protected abstract virtual bool get_IncludeMoveDestinations();
    protected abstract virtual void NodeBegin(TContext context, string key, string leftKey, DeltaType type, NodeType nodeType, bool isLast);
    protected abstract virtual void NodeEnd(TContext context, string key, string leftKey, DeltaType type, NodeType nodeType, bool isLast);
    protected abstract virtual void RootBegin(TContext context, DeltaType type, NodeType nodeType);
    protected abstract virtual void RootEnd(TContext context, DeltaType type, NodeType nodeType);
    protected abstract virtual void Format(DeltaType type, TContext context, JToken delta, JToken leftValue, string key, string leftKey, MoveDestination movedFrom);
    protected void Recurse(TContext context, JToken delta, JToken left, string key, string leftKey, MoveDestination movedFrom, bool isLast);
    protected void FormatDeltaChildren(TContext context, JToken delta, JToken left);
    protected void ForEachDeltaKey(JToken delta, JToken left, DeltaKeyIterator<TContext, TResult> iterator);
    protected static DeltaType GetDeltaType(JToken delta, MoveDestination movedFrom);
}
public enum JsonDiffPatchDotNet.Formatters.DeltaType : Enum {
    public int value__;
    public static DeltaType Unknown;
    public static DeltaType Unchanged;
    public static DeltaType Added;
    public static DeltaType Moved;
    public static DeltaType Deleted;
    public static DeltaType MoveDestination;
    public static DeltaType Modified;
    public static DeltaType Node;
    public static DeltaType TextDiff;
}
public interface JsonDiffPatchDotNet.Formatters.IFormatContext`1 {
    public abstract virtual TResult Result();
}
public class JsonDiffPatchDotNet.Formatters.JsonPatch.JsonDeltaFormatter : BaseDeltaFormatter`2<JsonFormatContext, IList`1<Operation>> {
    protected bool IncludeMoveDestinations { get; }
    protected virtual bool get_IncludeMoveDestinations();
    public virtual IList`1<Operation> Format(JToken delta);
    protected virtual void Format(DeltaType type, JsonFormatContext context, JToken delta, JToken leftValue, string key, string leftKey, MoveDestination movedFrom);
    protected virtual void NodeBegin(JsonFormatContext context, string key, string leftKey, DeltaType type, NodeType nodeType, bool isLast);
    protected virtual void NodeEnd(JsonFormatContext context, string key, string leftKey, DeltaType type, NodeType nodeType, bool isLast);
    protected virtual void RootBegin(JsonFormatContext context, DeltaType type, NodeType nodeType);
    protected virtual void RootEnd(JsonFormatContext context, DeltaType type, NodeType nodeType);
    private void FormatNode(JsonFormatContext context, JToken delta, JToken left);
    private void FormatAdded(JsonFormatContext context, JToken delta);
    private void FormatModified(JsonFormatContext context, JToken delta);
    private void FormatDeleted(JsonFormatContext context);
    private void FormatMoved(JsonFormatContext context, JToken delta);
    private IList`1<Operation> ReorderOps(IList`1<Operation> result);
    private IList`1<Operation[]> PartitionRemoveOps(IList`1<Operation> result);
}
public class JsonDiffPatchDotNet.Formatters.JsonPatch.JsonFormatContext : object {
    [CompilerGeneratedAttribute]
private IList`1<Operation> <Operations>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <Path>k__BackingField;
    public IList`1<Operation> Operations { get; }
    public IList`1<string> Path { get; }
    [CompilerGeneratedAttribute]
public IList`1<Operation> get_Operations();
    [CompilerGeneratedAttribute]
public IList`1<string> get_Path();
    public sealed virtual IList`1<Operation> Result();
    public void PushCurrentOp(string op);
    public void PushCurrentOp(string op, object value);
    public void PushMoveOp(string to);
    private string CurrentPath();
    private string ToPath(string toPath);
}
public class JsonDiffPatchDotNet.Formatters.JsonPatch.Operation : object {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Op>k__BackingField;
    [CompilerGeneratedAttribute]
private string <From>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [JsonPropertyAttribute("path")]
public string Path { get; public set; }
    [JsonPropertyAttribute("op")]
public string Op { get; public set; }
    [JsonPropertyAttribute("from")]
public string From { get; public set; }
    [JsonPropertyAttribute("value")]
public object Value { get; public set; }
    public Operation(string op, string path, string from);
    public Operation(string op, string path, string from, object value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_Op();
    [CompilerGeneratedAttribute]
public void set_Op(string value);
    [CompilerGeneratedAttribute]
public string get_From();
    [CompilerGeneratedAttribute]
public void set_From(string value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
}
public static class JsonDiffPatchDotNet.Formatters.JsonPatch.OperationTypes : object {
    public static string Add;
    public static string Replace;
    public static string Move;
    public static string Remove;
}
public class JsonDiffPatchDotNet.Formatters.MoveDestination : object {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private JToken <Value>k__BackingField;
    public string Key { get; }
    public JToken Value { get; }
    public MoveDestination(string key, JToken value);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public JToken get_Value();
}
public enum JsonDiffPatchDotNet.Formatters.NodeType : Enum {
    public int value__;
    public static NodeType Unknown;
    public static NodeType Object;
    public static NodeType Array;
}
public class JsonDiffPatchDotNet.JsonDiffPatch : object {
    private Options _options;
    public JsonDiffPatch(Options options);
    public JToken Diff(JToken left, JToken right);
    public JToken Patch(JToken left, JToken patch);
    public JToken Unpatch(JToken right, JToken patch);
    public string Diff(string left, string right);
    public string Patch(string left, string patch);
    public string Unpatch(string right, string patch);
    private JObject ObjectDiff(JObject left, JObject right);
    private JObject ArrayDiff(JArray left, JArray right);
    private JObject ObjectPatch(JObject obj, JObject patch);
    private JArray ArrayPatch(JArray left, JObject patch);
    private JObject ObjectUnpatch(JObject obj, JObject patch);
    private JArray ArrayUnpatch(JArray right, JObject patch);
}
internal class JsonDiffPatchDotNet.Lcs : object {
    [CompilerGeneratedAttribute]
private List`1<JToken> <Sequence>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<int> <Indices1>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<int> <Indices2>k__BackingField;
    internal List`1<JToken> Sequence { get; internal set; }
    internal List`1<int> Indices1 { get; internal set; }
    internal List`1<int> Indices2 { get; internal set; }
    [CompilerGeneratedAttribute]
internal List`1<JToken> get_Sequence();
    [CompilerGeneratedAttribute]
internal void set_Sequence(List`1<JToken> value);
    [CompilerGeneratedAttribute]
internal List`1<int> get_Indices1();
    [CompilerGeneratedAttribute]
internal void set_Indices1(List`1<int> value);
    [CompilerGeneratedAttribute]
internal List`1<int> get_Indices2();
    [CompilerGeneratedAttribute]
internal void set_Indices2(List`1<int> value);
    internal static Lcs Get(List`1<JToken> left, List`1<JToken> right);
    private static Int32[0...,0...] LcsInternal(List`1<JToken> left, List`1<JToken> right);
    private static Lcs Backtrack(Int32[0...,0...] matrix, List`1<JToken> left, List`1<JToken> right, int li, int ri);
}
public class JsonDiffPatchDotNet.Options : object {
    [CompilerGeneratedAttribute]
private ArrayDiffMode <ArrayDiff>k__BackingField;
    [CompilerGeneratedAttribute]
private TextDiffMode <TextDiff>k__BackingField;
    [CompilerGeneratedAttribute]
private long <MinEfficientTextDiffLength>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <ExcludePaths>k__BackingField;
    [CompilerGeneratedAttribute]
private DiffBehavior <DiffBehaviors>k__BackingField;
    public ArrayDiffMode ArrayDiff { get; public set; }
    public TextDiffMode TextDiff { get; public set; }
    public long MinEfficientTextDiffLength { get; public set; }
    public List`1<string> ExcludePaths { get; public set; }
    public DiffBehavior DiffBehaviors { get; public set; }
    [CompilerGeneratedAttribute]
public ArrayDiffMode get_ArrayDiff();
    [CompilerGeneratedAttribute]
public void set_ArrayDiff(ArrayDiffMode value);
    [CompilerGeneratedAttribute]
public TextDiffMode get_TextDiff();
    [CompilerGeneratedAttribute]
public void set_TextDiff(TextDiffMode value);
    [CompilerGeneratedAttribute]
public long get_MinEfficientTextDiffLength();
    [CompilerGeneratedAttribute]
public void set_MinEfficientTextDiffLength(long value);
    [CompilerGeneratedAttribute]
public List`1<string> get_ExcludePaths();
    [CompilerGeneratedAttribute]
public void set_ExcludePaths(List`1<string> value);
    [CompilerGeneratedAttribute]
public DiffBehavior get_DiffBehaviors();
    [CompilerGeneratedAttribute]
public void set_DiffBehaviors(DiffBehavior value);
}
public enum JsonDiffPatchDotNet.TextDiffMode : Enum {
    public int value__;
    public static TextDiffMode Efficient;
    public static TextDiffMode Simple;
}
