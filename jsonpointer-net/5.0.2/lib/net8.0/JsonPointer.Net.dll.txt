[ExtensionAttribute]
public static class Json.Pointer.EnumerableExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static int GetCollectionHashCode(IEnumerable`1<T> collection);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
[JsonConverterAttribute("Json.Pointer.JsonPointerJsonConverter")]
[TypeConverterAttribute("Json.Pointer.JsonPointerTypeConverter")]
public class Json.Pointer.JsonPointer : object {
    public static JsonPointer Empty;
    private String[] _decodedSegments;
    [NullableAttribute("2")]
private string _plain;
    private Nullable`1<int> _hashCode;
    public int Count { get; }
    public string Item { get; }
    public JsonPointer Item { get; }
    [NullableContextAttribute("2")]
private JsonPointer(ReadOnlySpan`1<string> segments, string plain);
    private JsonPointer(String[] segments, string plain);
    private static JsonPointer();
    public sealed virtual int get_Count();
    public sealed virtual string get_Item(int i);
    public JsonPointer get_Item(Range r);
    public sealed virtual IEnumerator`1<string> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public static JsonPointer Parse(string source);
    public static bool TryParse(string source, JsonPointer& pointer);
    public static JsonPointer Create(PointerSegment[] segments);
    public static JsonPointer Create(Expression`1<Func`2<T, object>> expression, PointerCreationOptions options);
    public JsonPointer Combine(JsonPointer other);
    public JsonPointer Combine(PointerSegment[] additionalSegments);
    public JsonPointer GetAncestor(int levels);
    public JsonPointer GetLocal(int levels);
    public JsonPointer GetSubPointer(Range range);
    public Nullable`1<JsonElement> Evaluate(JsonElement root);
    [NullableContextAttribute("2")]
public bool TryEvaluate(JsonNode root, JsonNode& result);
    public virtual string ToString();
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(JsonPointer other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [NullableContextAttribute("2")]
public static bool op_Equality(JsonPointer left, JsonPointer right);
    [NullableContextAttribute("2")]
public static bool op_Inequality(JsonPointer left, JsonPointer right);
    [CompilerGeneratedAttribute]
internal static string <Create>g__GetSegment|18_0(MemberInfo member, <>c__DisplayClass18_0`1& );
    [CompilerGeneratedAttribute]
internal static object <Create>g__GetValue|18_1(Expression member);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Json.Pointer.JsonPointerJsonConverter : WeaklyTypedJsonConverter`1<JsonPointer> {
    public virtual JsonPointer Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    public virtual void Write(Utf8JsonWriter writer, JsonPointer value, JsonSerializerOptions options);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Json.Pointer.JsonPointerTypeConverter : TypeConverter {
    private static StandardValuesCollection _standardValues;
    [NullableContextAttribute("1")]
public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    [NullableContextAttribute("1")]
public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool IsValid(ITypeDescriptorContext context, object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Json.Pointer.PointerCreationOptions : object {
    [NullableAttribute("2")]
private PropertyNameResolver _propertyNameResolver;
    public static PointerCreationOptions Default;
    public PropertyNameResolver PropertyNameResolver { get; public set; }
    private static PointerCreationOptions();
    public PropertyNameResolver get_PropertyNameResolver();
    public void set_PropertyNameResolver(PropertyNameResolver value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Json.Pointer.PointerParseException : Exception {
    public PointerParseException(string message);
    public PointerParseException(string message, Exception inner);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Json.Pointer.PointerSegment : ValueType {
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    internal string Value { get; }
    private PointerSegment(string value);
    [CompilerGeneratedAttribute]
internal string get_Value();
    public static PointerSegment op_Implicit(int value);
    public static PointerSegment op_Implicit(string value);
    public virtual string ToString();
}
public class Json.Pointer.PropertyNameResolver : MulticastDelegate {
    public PropertyNameResolver(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual string Invoke(MemberInfo input);
    public virtual IAsyncResult BeginInvoke(MemberInfo input, AsyncCallback callback, object object);
    public virtual string EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Json.Pointer.PropertyNameResolvers : object {
    public static PropertyNameResolver AsDeclared;
    public static PropertyNameResolver CamelCase;
    public static PropertyNameResolver PascalCase;
    public static PropertyNameResolver SnakeCase;
    public static PropertyNameResolver UpperSnakeCase;
    public static PropertyNameResolver KebabCase;
    public static PropertyNameResolver UpperKebabCase;
    private static PropertyNameResolvers();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[JsonConverterAttribute("Json.Pointer.RelativeJsonPointerJsonConverter")]
public class Json.Pointer.RelativeJsonPointer : object {
    public static RelativeJsonPointer Null;
    [CompilerGeneratedAttribute]
private bool <IsIndexQuery>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <ParentSteps>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ArrayIndexManipulator>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonPointer <Pointer>k__BackingField;
    public bool IsIndexQuery { get; }
    public UInt32 ParentSteps { get; }
    public int ArrayIndexManipulator { get; }
    public JsonPointer Pointer { get; }
    private RelativeJsonPointer(UInt32 parentSteps);
    private RelativeJsonPointer(UInt32 parentSteps, int arrayIndexManipulator);
    private RelativeJsonPointer(UInt32 parentSteps, JsonPointer pointer);
    private RelativeJsonPointer(UInt32 parentSteps, int arrayIndexManipulator, JsonPointer pointer);
    private static RelativeJsonPointer();
    [CompilerGeneratedAttribute]
public bool get_IsIndexQuery();
    [CompilerGeneratedAttribute]
public UInt32 get_ParentSteps();
    [CompilerGeneratedAttribute]
public int get_ArrayIndexManipulator();
    [CompilerGeneratedAttribute]
public JsonPointer get_Pointer();
    public static RelativeJsonPointer IndexQuery(UInt32 parentSteps);
    public static RelativeJsonPointer IndexQuery(UInt32 parentSteps, int arrayIndexManipulator);
    public static RelativeJsonPointer FromPointer(UInt32 parentSteps, JsonPointer pointer);
    public static RelativeJsonPointer FromPointer(UInt32 parentSteps, int arrayIndexManipulator, JsonPointer pointer);
    public static RelativeJsonPointer Parse(string source);
    public static bool TryParse(string source, RelativeJsonPointer& relativePointer);
    public bool TryEvaluate(JsonNode node, JsonNode& result);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Json.Pointer.RelativeJsonPointerJsonConverter : JsonConverter`1<RelativeJsonPointer> {
    public virtual RelativeJsonPointer Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    public virtual void Write(Utf8JsonWriter writer, RelativeJsonPointer value, JsonSerializerOptions options);
}
[ExtensionAttribute]
internal static class Json.Pointer.SpanExtensions : object {
    [ExtensionAttribute]
internal static char Decode(ReadOnlySpan`1<char> value, Int32& index);
    [ExtensionAttribute]
internal static bool TryDecode(ReadOnlySpan`1<char> value, Int32& index, Char& ch);
    [ExtensionAttribute]
internal static int Encode(ReadOnlySpan`1<char> key, Span`1<char> encoded);
}
