public class K4os.Hash.xxHash.HashAlgorithmAdapter : HashAlgorithm {
    private Action _reset;
    private Action`3<Byte[], int, int> _update;
    private Func`1<Byte[]> _digest;
    [CompilerGeneratedAttribute]
private int <HashSize>k__BackingField;
    public int HashSize { get; }
    public Byte[] Hash { get; }
    public HashAlgorithmAdapter(int hashSize, Action reset, Action`3<Byte[], int, int> update, Func`1<Byte[]> digest);
    [CompilerGeneratedAttribute]
public virtual int get_HashSize();
    public virtual Byte[] get_Hash();
    protected virtual void HashCore(Byte[] array, int ibStart, int cbSize);
    protected virtual Byte[] HashFinal();
    public virtual void Initialize();
}
public class K4os.Hash.xxHash.XXH : object {
    internal static UInt32 XXH_read32(Void* p);
    internal static ulong XXH_read64(Void* p);
    internal static void XXH_zero(Void* target, int length);
    internal static void XXH_copy(Void* target, Void* source, int length);
    internal static void Validate(Byte[] bytes, int offset, int length);
}
public class K4os.Hash.xxHash.XXH32 : XXH {
    private static UInt32 PRIME32_1;
    private static UInt32 PRIME32_2;
    private static UInt32 PRIME32_3;
    private static UInt32 PRIME32_4;
    private static UInt32 PRIME32_5;
    public static UInt32 EmptyHash;
    private State _state;
    public XXH32(UInt32 seed);
    private static UInt32 XXH32_rotl(UInt32 x, int r);
    private static UInt32 XXH32_round(UInt32 seed, UInt32 input);
    private static UInt32 XXH32_hash(Void* input, int len, UInt32 seed);
    private static void XXH32_reset(State* state, UInt32 seed);
    private static void XXH32_update(State* state, Void* input, int len);
    private static UInt32 XXH32_digest(State* state);
    public static UInt32 DigestOf(Void* bytes, int length);
    public static UInt32 DigestOf(Void* bytes, int length, UInt32 seed);
    public static UInt32 DigestOf(ReadOnlySpan`1<byte> bytes);
    public static UInt32 DigestOf(Byte[] bytes, int offset, int length);
    public void Reset();
    public void Reset(UInt32 seed);
    public void Update(Void* bytes, int length);
    [ObsoleteAttribute("Use void* overload")]
public void Update(Byte* bytes, int length);
    public void Update(ReadOnlySpan`1<byte> bytes);
    public void Update(Byte[] bytes, int offset, int length);
    public UInt32 Digest();
    public Byte[] DigestBytes();
    public HashAlgorithm AsHashAlgorithm();
    public static void Reset(State& state, UInt32 seed);
    public static void Update(State& state, Void* bytes, int length);
    public static void Update(State& state, ReadOnlySpan`1<byte> bytes);
    public static UInt32 Digest(State& state);
}
public class K4os.Hash.xxHash.XXH64 : XXH {
    private static ulong PRIME64_1;
    private static ulong PRIME64_2;
    private static ulong PRIME64_3;
    private static ulong PRIME64_4;
    private static ulong PRIME64_5;
    public static ulong EmptyHash;
    private State _state;
    public XXH64(ulong seed);
    private static ulong XXH_rotl64(ulong x, int r);
    private static ulong XXH64_round(ulong acc, ulong input);
    private static ulong XXH64_mergeRound(ulong acc, ulong val);
    private static ulong XXH64_hash(Void* input, int len, ulong seed);
    private static void XXH64_reset(State* state, ulong seed);
    private static void XXH64_update(State* state, Void* input, int len);
    private static ulong XXH64_digest(State* state);
    public static ulong DigestOf(Void* bytes, int length);
    public static ulong DigestOf(Void* bytes, int length, ulong seed);
    public static ulong DigestOf(ReadOnlySpan`1<byte> bytes);
    public static ulong DigestOf(Byte[] bytes, int offset, int length);
    public void Reset();
    public void Reset(ulong seed);
    public void Update(Void* bytes, int length);
    [ObsoleteAttribute("Use void* overload, this one will be removed in next version.")]
public void Update(Byte* bytes, int length);
    public void Update(ReadOnlySpan`1<byte> bytes);
    public void Update(Byte[] bytes, int offset, int length);
    public ulong Digest();
    public Byte[] DigestBytes();
    public HashAlgorithm AsHashAlgorithm();
    public static void Reset(State& state, ulong seed);
    public static void Update(State& state, Void* bytes, int length);
    public static void Update(State& state, ReadOnlySpan`1<byte> bytes);
    public static ulong Digest(State& state);
}
