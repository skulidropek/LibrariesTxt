public class Lambda2Js.AttributeJavascriptMetadataProvider : JavascriptMetadataProvider {
    private object locker;
    private Dictionary`2<MemberInfo, IJavascriptMemberMetadata> cache;
    [CompilerGeneratedAttribute]
private bool <UseCache>k__BackingField;
    private Dictionary`2<Type, Accessors> accessors;
    public bool UseCache { get; public set; }
    private IJavascriptMemberMetadata GetMemberMetadataNoCache(MemberInfo memberInfo);
    private IJavascriptMemberMetadata GetMemberMetadataWithCache(MemberInfo memberInfo);
    public virtual IJavascriptMemberMetadata GetMemberMetadata(MemberInfo memberInfo);
    [CompilerGeneratedAttribute]
public bool get_UseCache();
    [CompilerGeneratedAttribute]
public void set_UseCache(bool value);
    public IJavascriptMemberMetadata GetMemberMetadata(MemberInfo memberInfo, bool useCache);
    private IJavascriptMemberMetadata ConvertJsonAttribute(object attr);
    private Accessors GetAccessors(Type type);
}
internal class Lambda2Js.Consts : object {
    internal static int FlagFld;
    internal static int EcmaFld;
    internal static int EcmaLim;
    internal static int SVerFld;
    internal static int SVerLim;
    internal static int SpecFld;
}
public class Lambda2Js.EnumConversionExtension : JavascriptConversionExtension {
    private EnumOptions opts;
    public EnumConversionExtension(EnumOptions options);
    public virtual void ConvertToJavascript(JavascriptConversionContext context);
    private bool WriteSingleEnumItem(JavascriptConversionContext context, JavascriptWriter writer, long numValue, object enumValue, bool inStringAlready);
}
[FlagsAttribute]
public enum Lambda2Js.EnumOptions : Enum {
    public int value__;
    public static EnumOptions FlagsAsResultingSum;
    public static EnumOptions FlagsAsNumericOrs;
    public static EnumOptions FlagsAsStringWithSeparator;
    public static EnumOptions FlagsAsArray;
    public static EnumOptions UseStrings;
    public static EnumOptions UseStaticFields;
    public static EnumOptions UseNumbers;
}
public interface Lambda2Js.IJavascriptMemberMetadata {
    public string MemberName { get; }
    public abstract virtual string get_MemberName();
}
public enum Lambda2Js.JavascriptApiFeature : Enum {
    public int value__;
    public static JavascriptApiFeature Array;
    public static JavascriptApiFeature ArrayBuffer;
    public static JavascriptApiFeature AsyncFunction;
    public static JavascriptApiFeature Atomics;
    public static JavascriptApiFeature Boolean;
    public static JavascriptApiFeature DataView;
    public static JavascriptApiFeature Date;
    public static JavascriptApiFeature Error;
    public static JavascriptApiFeature EvalError;
    public static JavascriptApiFeature Float32Array;
    public static JavascriptApiFeature Float64Array;
    public static JavascriptApiFeature Function;
    public static JavascriptApiFeature Generator;
    public static JavascriptApiFeature GeneratorFunction;
    public static JavascriptApiFeature Infinity;
    public static JavascriptApiFeature Int16Array;
    public static JavascriptApiFeature Int32Array;
    public static JavascriptApiFeature Int8Array;
    public static JavascriptApiFeature InternalError;
    public static JavascriptApiFeature Intl;
    public static JavascriptApiFeature Intl_Collator;
    public static JavascriptApiFeature Intl_DateTimeFormat;
    public static JavascriptApiFeature Intl_NumberFormat;
    public static JavascriptApiFeature Iterator;
    public static JavascriptApiFeature JSON;
    public static JavascriptApiFeature Map;
    public static JavascriptApiFeature Math;
    public static JavascriptApiFeature NaN;
    public static JavascriptApiFeature Number;
    public static JavascriptApiFeature Object;
    public static JavascriptApiFeature ParallelArray;
    public static JavascriptApiFeature Promise;
    public static JavascriptApiFeature Proxy;
    public static JavascriptApiFeature RangeError;
    public static JavascriptApiFeature ReferenceError;
    public static JavascriptApiFeature Reflect;
    public static JavascriptApiFeature RegExp;
    public static JavascriptApiFeature SIMD;
    public static JavascriptApiFeature SIMD_Bool16x8;
    public static JavascriptApiFeature SIMD_Bool32x4;
    public static JavascriptApiFeature SIMD_Bool64x2;
    public static JavascriptApiFeature SIMD_Bool8x16;
    public static JavascriptApiFeature SIMD_Float32x4;
    public static JavascriptApiFeature SIMD_Float64x2;
    public static JavascriptApiFeature SIMD_Int16x8;
    public static JavascriptApiFeature SIMD_Int32x4;
    public static JavascriptApiFeature SIMD_Int8x16;
    public static JavascriptApiFeature SIMD_Uint16x8;
    public static JavascriptApiFeature SIMD_Uint32x4;
    public static JavascriptApiFeature SIMD_Uint8x16;
    public static JavascriptApiFeature Set;
    public static JavascriptApiFeature SharedArrayBuffer;
    public static JavascriptApiFeature StopIteration;
    public static JavascriptApiFeature String;
    public static JavascriptApiFeature Symbol;
    public static JavascriptApiFeature SyntaxError;
    public static JavascriptApiFeature TypeError;
    public static JavascriptApiFeature TypedArray;
    public static JavascriptApiFeature URIError;
    public static JavascriptApiFeature Uint16Array;
    public static JavascriptApiFeature Uint32Array;
    public static JavascriptApiFeature Uint8Array;
    public static JavascriptApiFeature Uint8ClampedArray;
    public static JavascriptApiFeature WeakMap;
    public static JavascriptApiFeature WeakSet;
    public static JavascriptApiFeature WebAssembly;
    public static JavascriptApiFeature decodeURI;
    public static JavascriptApiFeature decodeURIComponent;
    public static JavascriptApiFeature encodeURI;
    public static JavascriptApiFeature encodeURIComponent;
    public static JavascriptApiFeature escape;
    public static JavascriptApiFeature eval;
    public static JavascriptApiFeature isFinite;
    public static JavascriptApiFeature isNaN;
    public static JavascriptApiFeature null;
    public static JavascriptApiFeature parseFloat;
    public static JavascriptApiFeature parseInt;
    public static JavascriptApiFeature undefined;
    public static JavascriptApiFeature unescape;
    public static JavascriptApiFeature uneval;
    public static JavascriptApiFeature String_fromCharCode;
    public static JavascriptApiFeature String_fromCodePoint;
    public static JavascriptApiFeature String_prototype_anchor;
    public static JavascriptApiFeature String_prototype_big;
    public static JavascriptApiFeature String_prototype_blink;
    public static JavascriptApiFeature String_prototype_bold;
    public static JavascriptApiFeature String_prototype_charAt;
    public static JavascriptApiFeature String_prototype_charCodeAt;
    public static JavascriptApiFeature String_prototype_codePointAt;
    public static JavascriptApiFeature String_prototype_concat;
    public static JavascriptApiFeature String_prototype_endsWith;
    public static JavascriptApiFeature String_prototype_fixed;
    public static JavascriptApiFeature String_prototype_fontcolor;
    public static JavascriptApiFeature String_prototype_fontsize;
    public static JavascriptApiFeature String_prototype_includes;
    public static JavascriptApiFeature String_prototype_indexOf;
    public static JavascriptApiFeature String_prototype_italics;
    public static JavascriptApiFeature String_prototype_lastIndexOf;
    public static JavascriptApiFeature String_prototype_link;
    public static JavascriptApiFeature String_prototype_localeCompare;
    public static JavascriptApiFeature String_prototype_match;
    public static JavascriptApiFeature String_prototype_normalize;
    public static JavascriptApiFeature String_prototype_padEnd;
    public static JavascriptApiFeature String_prototype_padStart;
    public static JavascriptApiFeature String_prototype_quote;
    public static JavascriptApiFeature String_prototype_repeat;
    public static JavascriptApiFeature String_prototype_replace;
    public static JavascriptApiFeature String_prototype_search;
    public static JavascriptApiFeature String_prototype_slice;
    public static JavascriptApiFeature String_prototype_small;
    public static JavascriptApiFeature String_prototype_split;
    public static JavascriptApiFeature String_prototype_startsWith;
    public static JavascriptApiFeature String_prototype_strike;
    public static JavascriptApiFeature String_prototype_sub;
    public static JavascriptApiFeature String_prototype_substr;
    public static JavascriptApiFeature String_prototype_substring;
    public static JavascriptApiFeature String_prototype_sup;
    public static JavascriptApiFeature String_prototype_toLocaleLowerCase;
    public static JavascriptApiFeature String_prototype_toLocaleUpperCase;
    public static JavascriptApiFeature String_prototype_toLowerCase;
    public static JavascriptApiFeature String_prototype_toSource;
    public static JavascriptApiFeature String_prototype_toString;
    public static JavascriptApiFeature String_prototype_toUpperCase;
    public static JavascriptApiFeature String_prototype_trim;
    public static JavascriptApiFeature String_prototype_trimLeft;
    public static JavascriptApiFeature String_prototype_trimRight;
    public static JavascriptApiFeature String_prototype_valueOf;
    public static JavascriptApiFeature String_prototype_iterator;
    public static JavascriptApiFeature String_raw;
}
public class Lambda2Js.JavascriptCompilationOptions : object {
    public static JavascriptCompilationOptions DefaultOptions;
    [CompilerGeneratedAttribute]
private bool <BodyOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ScopeParameter>k__BackingField;
    [CompilerGeneratedAttribute]
private ScriptVersion <ScriptVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<JavascriptConversionExtension> <Extensions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UndefinedLiteral>k__BackingField;
    [CompilerGeneratedAttribute]
private JavascriptMetadataProvider <CustomMetadataProvider>k__BackingField;
    public bool BodyOnly { get; private set; }
    public bool ScopeParameter { get; private set; }
    public ScriptVersion ScriptVersion { get; private set; }
    public IEnumerable`1<JavascriptConversionExtension> Extensions { get; private set; }
    public string UndefinedLiteral { get; public set; }
    public JavascriptMetadataProvider CustomMetadataProvider { get; public set; }
    public JavascriptCompilationOptions(JsCompilationFlags flags, JavascriptConversionExtension[] extensions);
    public JavascriptCompilationOptions(JavascriptConversionExtension[] extensions);
    public JavascriptCompilationOptions(JsCompilationFlags flags, ScriptVersion scriptVersion, JavascriptConversionExtension[] extensions);
    public JavascriptCompilationOptions(ScriptVersion scriptVersion, JavascriptConversionExtension[] extensions);
    public JavascriptCompilationOptions(JsCompilationFlags flags, IEnumerable`1<JavascriptConversionExtension> extensions, ScriptVersion scriptVersion);
    private static JavascriptCompilationOptions();
    [CompilerGeneratedAttribute]
public bool get_BodyOnly();
    [CompilerGeneratedAttribute]
private void set_BodyOnly(bool value);
    [CompilerGeneratedAttribute]
public bool get_ScopeParameter();
    [CompilerGeneratedAttribute]
private void set_ScopeParameter(bool value);
    [CompilerGeneratedAttribute]
public ScriptVersion get_ScriptVersion();
    [CompilerGeneratedAttribute]
private void set_ScriptVersion(ScriptVersion value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<JavascriptConversionExtension> get_Extensions();
    [CompilerGeneratedAttribute]
private void set_Extensions(IEnumerable`1<JavascriptConversionExtension> value);
    [CompilerGeneratedAttribute]
public string get_UndefinedLiteral();
    [CompilerGeneratedAttribute]
public void set_UndefinedLiteral(string value);
    [CompilerGeneratedAttribute]
public JavascriptMetadataProvider get_CustomMetadataProvider();
    [CompilerGeneratedAttribute]
public void set_CustomMetadataProvider(JavascriptMetadataProvider value);
    public JavascriptMetadataProvider GetMetadataProvider();
}
internal class Lambda2Js.JavascriptCompilerExpressionVisitor : ExpressionVisitor {
    private ParameterExpression contextParameter;
    private IEnumerable`1<JavascriptConversionExtension> extensions;
    private JavascriptWriter resultWriter;
    private List`1<string> usedScopeMembers;
    [CompilerGeneratedAttribute]
private JavascriptCompilationOptions <Options>k__BackingField;
    public JavascriptCompilationOptions Options { get; private set; }
    public string Result { get; }
    public String[] UsedScopeMembers { get; }
    public JavascriptCompilerExpressionVisitor(ParameterExpression contextParameter, IEnumerable`1<JavascriptConversionExtension> extensions, JavascriptCompilationOptions options);
    [CompilerGeneratedAttribute]
public JavascriptCompilationOptions get_Options();
    [CompilerGeneratedAttribute]
private void set_Options(JavascriptCompilationOptions value);
    public string get_Result();
    public String[] get_UsedScopeMembers();
    public virtual Expression Visit(Expression node);
    private Expression PreprocessNode(Expression node);
    protected virtual Expression VisitBinary(BinaryExpression node);
    protected virtual Expression VisitBlock(BlockExpression node);
    protected virtual CatchBlock VisitCatchBlock(CatchBlock node);
    protected virtual Expression VisitConditional(ConditionalExpression node);
    protected virtual Expression VisitConstant(ConstantExpression node);
    private void WriteStringLiteral(string str);
    protected virtual Expression VisitDebugInfo(DebugInfoExpression node);
    protected virtual Expression VisitDefault(DefaultExpression node);
    protected virtual ElementInit VisitElementInit(ElementInit node);
    protected virtual Expression VisitExtension(Expression node);
    protected virtual Expression VisitGoto(GotoExpression node);
    protected virtual Expression VisitIndex(IndexExpression node);
    protected virtual Expression VisitInvocation(InvocationExpression node);
    protected virtual Expression VisitLabel(LabelExpression node);
    protected virtual LabelTarget VisitLabelTarget(LabelTarget node);
    protected virtual Expression VisitLambda(Expression`1<T> node);
    protected virtual Expression VisitListInit(ListInitExpression node);
    protected virtual Expression VisitLoop(LoopExpression node);
    protected virtual Expression VisitMember(MemberExpression node);
    protected virtual MemberAssignment VisitMemberAssignment(MemberAssignment node);
    protected virtual Expression VisitUnary(UnaryExpression node);
    protected virtual Expression VisitTypeBinary(TypeBinaryExpression node);
    protected virtual Expression VisitTry(TryExpression node);
    protected virtual SwitchCase VisitSwitchCase(SwitchCase node);
    protected virtual Expression VisitSwitch(SwitchExpression node);
    protected virtual Expression VisitRuntimeVariables(RuntimeVariablesExpression node);
    protected virtual Expression VisitParameter(ParameterExpression node);
    protected virtual Expression VisitNewArray(NewArrayExpression node);
    protected virtual Expression VisitNew(NewExpression node);
    protected virtual Expression VisitMethodCall(MethodCallExpression node);
    protected virtual MemberMemberBinding VisitMemberMemberBinding(MemberMemberBinding node);
    protected virtual MemberListBinding VisitMemberListBinding(MemberListBinding node);
    protected virtual Expression VisitMemberInit(MemberInitExpression node);
    protected virtual MemberBinding VisitMemberBinding(MemberBinding node);
}
public class Lambda2Js.JavascriptConversionContext : object {
    private JavascriptWriter result;
    private Expression node;
    internal bool preventDefault;
    [CompilerGeneratedAttribute]
private ExpressionVisitor <Visitor>k__BackingField;
    [CompilerGeneratedAttribute]
private JavascriptCompilationOptions <Options>k__BackingField;
    public Expression Node { get; }
    public ExpressionVisitor Visitor { get; private set; }
    public JavascriptCompilationOptions Options { get; private set; }
    public JavascriptConversionContext(Expression node, ExpressionVisitor visitor, JavascriptWriter result, JavascriptCompilationOptions options);
    public Expression get_Node();
    public void PreventDefault();
    [CompilerGeneratedAttribute]
public ExpressionVisitor get_Visitor();
    [CompilerGeneratedAttribute]
private void set_Visitor(ExpressionVisitor value);
    [CompilerGeneratedAttribute]
public JavascriptCompilationOptions get_Options();
    [CompilerGeneratedAttribute]
private void set_Options(JavascriptCompilationOptions value);
    public JavascriptWriter GetWriter();
    public void WriteNode(Expression node);
    public void WriteLambda(Expression`1<T> expression);
    public void WriteExpression(Expression`1<T> expression);
}
public abstract class Lambda2Js.JavascriptConversionExtension : object {
    public abstract virtual void ConvertToJavascript(JavascriptConversionContext context);
    protected static Type GetTypeOfExpression(Expression expression);
}
[ExtensionAttribute]
public static class Lambda2Js.JavascriptConversionHelpers : object {
    [ExtensionAttribute]
public static JavascriptConversionContext Write(JavascriptConversionContext context, Expression node);
    [ExtensionAttribute]
public static JavascriptConversionContext Write(JavascriptConversionContext context, char ch);
    [ExtensionAttribute]
public static JavascriptConversionContext WriteMany(JavascriptConversionContext context, char separator, IEnumerable`1<Expression> nodes);
    [ExtensionAttribute]
public static JavascriptConversionContext WriteMany(JavascriptConversionContext context, char separator, Expression[] nodes);
    [ExtensionAttribute]
public static JavascriptConversionContext WriteManyIsolated(JavascriptConversionContext context, char opening, char closing, char separator, IEnumerable`1<Expression> nodes);
    [ExtensionAttribute]
public static JavascriptConversionContext WriteManyIsolated(JavascriptConversionContext context, char opening, char closing, char separator, Expression[] nodes);
    [ExtensionAttribute]
public static IDisposable Operation(JavascriptConversionContext context, JavascriptOperationTypes op);
    [ExtensionAttribute]
public static JavascriptConversionContext Write(JavascriptConversionContext context, string str);
    [ExtensionAttribute]
public static JavascriptConversionContext WriteFormat(JavascriptConversionContext context, string format, Object[] values);
    [ExtensionAttribute]
public static JavascriptConversionContext WriteAccessor(JavascriptConversionContext context, string propertyName);
}
[AttributeUsageAttribute("2496")]
public class Lambda2Js.JavascriptMemberAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <MemberName>k__BackingField;
    public string MemberName { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_MemberName();
    [CompilerGeneratedAttribute]
public void set_MemberName(string value);
}
public abstract class Lambda2Js.JavascriptMetadataProvider : object {
    private static JavascriptMetadataProvider default;
    public static JavascriptMetadataProvider Default { get; public set; }
    private static JavascriptMetadataProvider();
    public static JavascriptMetadataProvider get_Default();
    public static void set_Default(JavascriptMetadataProvider value);
    public abstract virtual IJavascriptMemberMetadata GetMemberMetadata(MemberInfo memberInfo);
}
public enum Lambda2Js.JavascriptOperationTypes : Enum {
    public int value__;
    public static JavascriptOperationTypes NoOp;
    public static JavascriptOperationTypes ParamIsolatedLhs;
    public static JavascriptOperationTypes AssignRhs;
    public static JavascriptOperationTypes TernaryTest;
    public static JavascriptOperationTypes TernaryFalseValue;
    public static JavascriptOperationTypes TernaryOp;
    public static JavascriptOperationTypes TernaryTrueValue;
    public static JavascriptOperationTypes Or;
    public static JavascriptOperationTypes AndXor;
    public static JavascriptOperationTypes Comparison;
    public static JavascriptOperationTypes AddSubtract;
    public static JavascriptOperationTypes Concat;
    public static JavascriptOperationTypes MulDivMod;
    public static JavascriptOperationTypes Shift;
    public static JavascriptOperationTypes NegComplPlus;
    public static JavascriptOperationTypes InlineFunc;
    public static JavascriptOperationTypes Call;
    public static JavascriptOperationTypes New;
    public static JavascriptOperationTypes Literal;
    public static JavascriptOperationTypes IndexerProperty;
}
public enum Lambda2Js.JavascriptSyntaxFeature : Enum {
    public int value__;
    public static JavascriptSyntaxFeature ArrowFunction;
    public static JavascriptSyntaxFeature ArraySpread;
}
public class Lambda2Js.JavascriptWriter : object {
    private StringBuilder result;
    private List`1<JavascriptOperationTypes> operandTypes;
    public int Length { get; }
    public virtual string ToString();
    public int get_Length();
    public PrecedenceController Operation(JavascriptOperationTypes op);
    public IDisposable Operation(Expression node);
    public JavascriptWriter Write(char ch);
    public JavascriptWriter WriteLiteral(object value);
    public void WriteLiteralStringContent(object value);
    public JavascriptWriter WriteOperator(ExpressionType expressionType, Type type);
    public JavascriptWriter Write(string str);
    public JavascriptWriter Write(object value);
    public JavascriptWriter WriteFormat(string format, Object[] values);
}
[FlagsAttribute]
public enum Lambda2Js.JsCompilationFlags : Enum {
    public int value__;
    public static JsCompilationFlags BodyOnly;
    public static JsCompilationFlags ScopeParameter;
}
public static class Lambda2Js.JsOperationHelper : object {
    private static ExpressionType[] post;
    private static JsOperationHelper();
    public static bool IsPostfixOperator(ExpressionType op);
    public static bool CurrentHasPrecedence(JavascriptOperationTypes current, JavascriptOperationTypes parent);
    public static JavascriptOperationTypes GetJsOperator(ExpressionType nodeType, Type type);
    public static void WriteOperator(StringBuilder result, ExpressionType nodeType, Type type);
}
[ExtensionAttribute]
public static class Lambda2Js.LambdaExpressionExtensions : object {
    [ExtensionAttribute]
public static string CompileToJavascript(LambdaExpression expr, ScriptVersion scriptVersion, JavascriptConversionExtension[] extensions);
    [ExtensionAttribute]
public static string CompileToJavascript(LambdaExpression expr, JavascriptCompilationOptions options);
    [ExtensionAttribute]
public static string CompileToJavascript(Expression expr, JavascriptCompilationOptions options);
}
public class Lambda2Js.LinqMethods : JavascriptConversionExtension {
    public virtual void ConvertToJavascript(JavascriptConversionContext context);
}
public class Lambda2Js.MemberInitAsJson : JavascriptConversionExtension {
    [CompilerGeneratedAttribute]
private Predicate`1<Type> <TypePredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private Type[] <NewObjectTypes>k__BackingField;
    public static MemberInitAsJson ForAllTypes;
    public Predicate`1<Type> TypePredicate { get; }
    public Type[] NewObjectTypes { get; }
    public MemberInitAsJson(Type[] newObjectTypes);
    public MemberInitAsJson(Predicate`1<Type> typePredicate);
    private static MemberInitAsJson();
    [CompilerGeneratedAttribute]
public Predicate`1<Type> get_TypePredicate();
    [CompilerGeneratedAttribute]
public Type[] get_NewObjectTypes();
    public virtual void ConvertToJavascript(JavascriptConversionContext context);
}
public class Lambda2Js.PrecedenceController : object {
    private StringBuilder result;
    private List`1<JavascriptOperationTypes> operandTypes;
    private JavascriptOperationTypes op;
    public PrecedenceController(StringBuilder result, List`1<JavascriptOperationTypes> operandTypes, JavascriptOperationTypes op);
    public sealed virtual void Dispose();
    private void WritePrecedenceCharIfNeeded(char ch);
    private bool CurrentHasPrecedence();
}
[ExtensionAttribute]
internal static class Lambda2Js.PropertyInfoExtensions : object {
    [ExtensionAttribute]
public static Func`2<object, TProperty> MakeGetterDelegate(PropertyInfo property);
}
public enum Lambda2Js.ScriptVersion : Enum {
    public int value__;
    public static ScriptVersion Es30;
    public static ScriptVersion Js15;
    public static ScriptVersion MsJ55;
    public static ScriptVersion Es50;
    public static ScriptVersion Js181;
    public static ScriptVersion MsJ90;
    public static ScriptVersion Es51;
    public static ScriptVersion Es60;
    public static ScriptVersion ECMAScript2015;
    public static ScriptVersion Es70;
    public static ScriptVersion ECMAScript2016;
    public static ScriptVersion Es80;
    public static ScriptVersion ECMAScript2017;
    public static ScriptVersion EsLatestStable;
    public static ScriptVersion EsNext;
    public static ScriptVersion Proposals;
    public static ScriptVersion Deprecated;
    public static ScriptVersion NonStandard;
    public static ScriptVersion Js;
    public static ScriptVersion MsJ;
}
[ExtensionAttribute]
public static class Lambda2Js.ScriptVersionHelper : object {
    [ExtensionAttribute]
public static bool Supports(ScriptVersion scriptVersion, JavascriptSyntaxFeature syntax);
    [ExtensionAttribute]
public static bool Supports(ScriptVersion scriptVersion, JavascriptApiFeature api);
    public static ScriptVersion Create(ScriptVersion spec, int specVersion, int ecmaVersion, bool allowDeprecated, bool allowProposals);
    [ExtensionAttribute]
public static ScriptVersion Deprecated(ScriptVersion scriptVersion);
    [ExtensionAttribute]
public static ScriptVersion Deprecated(ScriptVersion scriptVersion, bool value);
    [ExtensionAttribute]
public static ScriptVersion Proposals(ScriptVersion scriptVersion);
    [ExtensionAttribute]
public static ScriptVersion Proposals(ScriptVersion scriptVersion, bool value);
    [ExtensionAttribute]
public static ScriptVersion ToStandard(ScriptVersion scriptVersion);
    [ExtensionAttribute]
public static ScriptVersion NonStandard(ScriptVersion scriptVersion);
    [ExtensionAttribute]
public static ScriptVersion MicrosoftJScript(ScriptVersion scriptVersion, int specVersion);
    [ExtensionAttribute]
public static ScriptVersion Javascript(ScriptVersion scriptVersion, int specVersion);
    [ExtensionAttribute]
public static bool IsSupersetOf(ScriptVersion scriptVersion, ScriptVersion baseScriptVersion);
    [ExtensionAttribute]
public static int GetSpecificationVersion(ScriptVersion scriptVersion);
    [ExtensionAttribute]
public static int GetStandardVersion(ScriptVersion scriptVersion);
    [ExtensionAttribute]
public static ScriptVersion GetSpecification(ScriptVersion scriptVersion);
    [ExtensionAttribute]
public static bool IsProposals(ScriptVersion scriptVersion);
    [ExtensionAttribute]
public static bool IsDeprecated(ScriptVersion scriptVersion);
}
public class Lambda2Js.StaticMathMethods : JavascriptConversionExtension {
    private static Dictionary`2<string, NameLength> membersMap;
    private bool round2;
    public StaticMathMethods(bool round2, bool catchEandPI);
    private static StaticMathMethods();
    public virtual void ConvertToJavascript(JavascriptConversionContext context);
}
public class Lambda2Js.StaticStringMethods : JavascriptConversionExtension {
    public virtual void ConvertToJavascript(JavascriptConversionContext context);
}
[ExtensionAttribute]
internal static class Lambda2Js.TypeHelpers : object {
    private static Type[] numTypes;
    private static Type[] intTypes;
    private static TypeHelpers();
    public static bool IsNumericType(Type type);
    public static bool IsIntegerType(Type type);
    public static bool IsDictionaryType(Type type);
    public static bool IsListType(Type type);
    public static bool IsEnumerableType(Type type);
    [ExtensionAttribute]
public static bool TestAttribute(Type type, Func`2<T, bool> predicate);
    [ExtensionAttribute]
public static bool IsClosureRootType(Type type);
}
[ExtensionAttribute]
internal static class System.Reflection.ReflectionExtensions : object {
    [ExtensionAttribute]
public static MethodInfo GetGetMethod(PropertyInfo pi, bool nonPublic);
}
