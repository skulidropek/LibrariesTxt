public class LaunchDarkly.Cache.CacheBuilder`2 : CacheBuilderBase`1<CacheBuilder`2<K, V>> {
    [CompilerGeneratedAttribute]
private Func`2<K, V> <LoaderFn>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <InitialCapacity>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaximumEntries>k__BackingField;
    internal Func`2<K, V> LoaderFn { get; private set; }
    internal Nullable`1<int> InitialCapacity { get; private set; }
    internal Nullable`1<int> MaximumEntries { get; private set; }
    [CompilerGeneratedAttribute]
internal Func`2<K, V> get_LoaderFn();
    [CompilerGeneratedAttribute]
private void set_LoaderFn(Func`2<K, V> value);
    [CompilerGeneratedAttribute]
internal Nullable`1<int> get_InitialCapacity();
    [CompilerGeneratedAttribute]
private void set_InitialCapacity(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
internal Nullable`1<int> get_MaximumEntries();
    [CompilerGeneratedAttribute]
private void set_MaximumEntries(Nullable`1<int> value);
    public CacheBuilder`2<K, V> WithLoader(Func`2<K, V> loaderFn);
    public CacheBuilder`2<K, V> WithInitialCapacity(Nullable`1<int> initialCapacity);
    public CacheBuilder`2<K, V> WithMaximumEntries(Nullable`1<int> maximumEntries);
    public ICache`2<K, V> Build();
}
public class LaunchDarkly.Cache.CacheBuilderBase`1 : object {
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <Expiration>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <PurgeInterval>k__BackingField;
    internal Nullable`1<TimeSpan> Expiration { get; private set; }
    internal Nullable`1<TimeSpan> PurgeInterval { get; private set; }
    [CompilerGeneratedAttribute]
internal Nullable`1<TimeSpan> get_Expiration();
    [CompilerGeneratedAttribute]
private void set_Expiration(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
internal Nullable`1<TimeSpan> get_PurgeInterval();
    [CompilerGeneratedAttribute]
private void set_PurgeInterval(Nullable`1<TimeSpan> value);
    public B WithExpiration(Nullable`1<TimeSpan> expiration);
    public B WithBackgroundPurge(Nullable`1<TimeSpan> purgeInterval);
}
internal class LaunchDarkly.Cache.CacheEntry`2 : object {
    public Nullable`1<DateTime> expirationTime;
    public object entryLock;
    public LinkedListNode`1<K> node;
    public CacheValue`1 modreq(System.Runtime.CompilerServices.IsVolatile) value;
    public CacheEntry`2(Nullable`1<DateTime> expirationTime, LinkedListNode`1<K> node);
    public bool IsExpired();
}
internal class LaunchDarkly.Cache.CacheImpl`2 : object {
    internal static TimeSpan DefaultPurgeInterval;
    private Func`2<K, V> _loaderFn;
    private Nullable`1<TimeSpan> _expiration;
    private Nullable`1<TimeSpan> _purgeInterval;
    private Nullable`1<int> _maxEntries;
    private IDictionary`2<K, CacheEntry`2<K, V>> _entries;
    private LinkedList`1<K> _keysInCreationOrder;
    private ReaderWriterLockSlim _wholeCacheLock;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _disposed;
    public CacheImpl`2(CacheBuilder`2<K, V> builder);
    private static CacheImpl`2();
    public sealed virtual bool ContainsKey(K key);
    public sealed virtual bool TryGetValue(K key, V& value);
    public sealed virtual V Get(K key);
    private V MaybeComputeValue(K key, CacheEntry`2<K, V> entry);
    public sealed virtual void Set(K key, V value);
    public sealed virtual void Remove(K key);
    public sealed virtual void Clear();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    private void PurgeExcessEntries();
    private void PurgeExpiredEntries();
    [AsyncStateMachineAttribute("LaunchDarkly.Cache.CacheImpl`2/<PurgeExpiredEntriesAsync>d__21")]
private Task PurgeExpiredEntriesAsync(TimeSpan interval);
}
public abstract class LaunchDarkly.Cache.Caches : object {
    public static CacheBuilder`2<K, V> KeyValue();
    public static SingleValueCacheBuilder`1<V> SingleValue();
}
internal class LaunchDarkly.Cache.CacheValue`1 : object {
    public V Value;
    public CacheValue`1(V value);
}
public interface LaunchDarkly.Cache.ICache`2 {
    public abstract virtual bool ContainsKey(K key);
    public abstract virtual V Get(K key);
    public abstract virtual bool TryGetValue(K key, V& value);
    public abstract virtual void Set(K key, V value);
    public abstract virtual void Remove(K key);
    public abstract virtual void Clear();
}
public interface LaunchDarkly.Cache.ISingleValueCache`1 {
    public bool HasValue { get; }
    public abstract virtual bool get_HasValue();
    public abstract virtual V Get();
    public abstract virtual bool TryGetValue(V& value);
    public abstract virtual void Set(V value);
    public abstract virtual void Clear();
}
public class LaunchDarkly.Cache.SingleValueCacheBuilder`1 : CacheBuilderBase`1<SingleValueCacheBuilder`1<V>> {
    [CompilerGeneratedAttribute]
private Func`1<V> <LoaderFn>k__BackingField;
    internal Func`1<V> LoaderFn { get; private set; }
    [CompilerGeneratedAttribute]
internal Func`1<V> get_LoaderFn();
    [CompilerGeneratedAttribute]
private void set_LoaderFn(Func`1<V> value);
    public SingleValueCacheBuilder`1<V> WithLoader(Func`1<V> loaderFn);
    public ISingleValueCache`1<V> Build();
}
internal class LaunchDarkly.Cache.SingleValueCacheImpl`1 : object {
    private ICache`2<object, V> _cache;
    public bool HasValue { get; }
    public SingleValueCacheImpl`1(SingleValueCacheBuilder`1<V> builder);
    public sealed virtual bool get_HasValue();
    public sealed virtual V Get();
    public sealed virtual bool TryGetValue(V& value);
    public sealed virtual void Set(V value);
    public sealed virtual void Clear();
    public sealed virtual void Dispose();
}
