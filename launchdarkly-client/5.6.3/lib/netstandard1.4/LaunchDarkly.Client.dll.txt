internal class LaunchDarkly.Client.AllData : object {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, FeatureFlag> <Flags>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, Segment> <Segments>k__BackingField;
    internal IDictionary`2<string, FeatureFlag> Flags { get; private set; }
    internal IDictionary`2<string, Segment> Segments { get; private set; }
    [JsonConstructorAttribute]
internal AllData(IDictionary`2<string, FeatureFlag> flags, IDictionary`2<string, Segment> segments);
    [CompilerGeneratedAttribute]
internal IDictionary`2<string, FeatureFlag> get_Flags();
    [CompilerGeneratedAttribute]
private void set_Flags(IDictionary`2<string, FeatureFlag> value);
    [CompilerGeneratedAttribute]
internal IDictionary`2<string, Segment> get_Segments();
    [CompilerGeneratedAttribute]
private void set_Segments(IDictionary`2<string, Segment> value);
    internal IDictionary`2<IVersionedDataKind, IDictionary`2<string, IVersionedData>> ToGenericDictionary();
}
internal class LaunchDarkly.Client.Clause : object {
    private static ILog Log;
    [CompilerGeneratedAttribute]
private string <Attribute>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Op>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<JValue> <Values>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Negate>k__BackingField;
    [JsonPropertyAttribute]
internal string Attribute { get; private set; }
    [JsonPropertyAttribute]
internal string Op { get; private set; }
    [JsonPropertyAttribute]
internal List`1<JValue> Values { get; private set; }
    [JsonPropertyAttribute]
internal bool Negate { get; private set; }
    [JsonConstructorAttribute]
internal Clause(string attribute, string op, List`1<JValue> values, bool negate);
    private static Clause();
    [CompilerGeneratedAttribute]
internal string get_Attribute();
    [CompilerGeneratedAttribute]
private void set_Attribute(string value);
    [CompilerGeneratedAttribute]
internal string get_Op();
    [CompilerGeneratedAttribute]
private void set_Op(string value);
    [CompilerGeneratedAttribute]
internal List`1<JValue> get_Values();
    [CompilerGeneratedAttribute]
private void set_Values(List`1<JValue> value);
    [CompilerGeneratedAttribute]
internal bool get_Negate();
    [CompilerGeneratedAttribute]
private void set_Negate(bool value);
    internal bool MatchesUser(User user, IFeatureStore store);
    internal bool MatchesUserNoSegments(User user);
    private bool MatchAny(JValue userValue);
    private bool MaybeNegate(bool b);
}
public static class LaunchDarkly.Client.Components : object {
    private static IFeatureStoreFactory _inMemoryFeatureStoreFactory;
    private static IEventProcessorFactory _eventProcessorFactory;
    private static IEventProcessorFactory _nullEventProcessorFactory;
    private static IUpdateProcessorFactory _updateProcessorFactory;
    private static IUpdateProcessorFactory _nullUpdateProcessorFactory;
    public static IFeatureStoreFactory InMemoryFeatureStore { get; }
    public static IEventProcessorFactory DefaultEventProcessor { get; }
    public static IEventProcessorFactory NullEventProcessor { get; }
    public static IUpdateProcessorFactory DefaultUpdateProcessor { get; }
    public static IUpdateProcessorFactory NullUpdateProcessor { get; }
    private static Components();
    public static IFeatureStoreFactory get_InMemoryFeatureStore();
    public static IEventProcessorFactory get_DefaultEventProcessor();
    public static IEventProcessorFactory get_NullEventProcessor();
    public static IUpdateProcessorFactory get_DefaultUpdateProcessor();
    public static IUpdateProcessorFactory get_NullUpdateProcessor();
}
public class LaunchDarkly.Client.Configuration : object {
    [CompilerGeneratedAttribute]
private Uri <BaseUri>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <StreamUri>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <EventsUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SdkKey>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsStreamingEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EventQueueCapacity>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <EventQueueFrequency>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EventSamplingInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <PollingInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <StartWaitTime>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <ReadTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <ReconnectTime>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <HttpClientTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpClientHandler <HttpClientHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Offline>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllAttributesPrivate>k__BackingField;
    [CompilerGeneratedAttribute]
private ISet`1<string> <PrivateAttributeNames>k__BackingField;
    [CompilerGeneratedAttribute]
private int <UserKeysCapacity>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <UserKeysFlushInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InlineUsersInEvents>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseLdd>k__BackingField;
    [CompilerGeneratedAttribute]
private IFeatureStore <FeatureStore>k__BackingField;
    [CompilerGeneratedAttribute]
private IFeatureStoreFactory <FeatureStoreFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IEventProcessorFactory <EventProcessorFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IUpdateProcessorFactory <UpdateProcessorFactory>k__BackingField;
    public static TimeSpan DefaultPollingInterval;
    internal static Uri DefaultUri;
    private static Uri DefaultStreamUri;
    private static Uri DefaultEventsUri;
    private static int DefaultEventQueueCapacity;
    private static TimeSpan DefaultEventQueueFrequency;
    private static TimeSpan DefaultStartWaitTime;
    private static TimeSpan DefaultReadTimeout;
    private static TimeSpan DefaultReconnectTime;
    private static TimeSpan DefaultHttpClientTimeout;
    private static int DefaultUserKeysCapacity;
    private static TimeSpan DefaultUserKeysFlushInterval;
    public Uri BaseUri { get; internal set; }
    public Uri StreamUri { get; internal set; }
    public Uri EventsUri { get; internal set; }
    public string SdkKey { get; internal set; }
    public bool IsStreamingEnabled { get; internal set; }
    public int EventQueueCapacity { get; internal set; }
    public TimeSpan EventQueueFrequency { get; internal set; }
    public int EventSamplingInterval { get; internal set; }
    public TimeSpan PollingInterval { get; internal set; }
    public TimeSpan StartWaitTime { get; internal set; }
    public TimeSpan ReadTimeout { get; internal set; }
    public TimeSpan ReconnectTime { get; internal set; }
    public TimeSpan HttpClientTimeout { get; internal set; }
    public HttpClientHandler HttpClientHandler { get; internal set; }
    public bool Offline { get; internal set; }
    public bool AllAttributesPrivate { get; internal set; }
    public ISet`1<string> PrivateAttributeNames { get; internal set; }
    public int UserKeysCapacity { get; internal set; }
    public TimeSpan UserKeysFlushInterval { get; internal set; }
    public bool InlineUsersInEvents { get; internal set; }
    public bool UseLdd { get; internal set; }
    internal IFeatureStore FeatureStore { get; internal set; }
    public IFeatureStoreFactory FeatureStoreFactory { get; internal set; }
    public IEventProcessorFactory EventProcessorFactory { get; internal set; }
    public IUpdateProcessorFactory UpdateProcessorFactory { get; internal set; }
    public string UserAgentType { get; }
    private static Configuration();
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_BaseUri();
    [CompilerGeneratedAttribute]
internal void set_BaseUri(Uri value);
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_StreamUri();
    [CompilerGeneratedAttribute]
internal void set_StreamUri(Uri value);
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_EventsUri();
    [CompilerGeneratedAttribute]
internal void set_EventsUri(Uri value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_SdkKey();
    [CompilerGeneratedAttribute]
internal void set_SdkKey(string value);
    [CompilerGeneratedAttribute]
public bool get_IsStreamingEnabled();
    [CompilerGeneratedAttribute]
internal void set_IsStreamingEnabled(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_EventQueueCapacity();
    [CompilerGeneratedAttribute]
internal void set_EventQueueCapacity(int value);
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_EventQueueFrequency();
    [CompilerGeneratedAttribute]
internal void set_EventQueueFrequency(TimeSpan value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_EventSamplingInterval();
    [CompilerGeneratedAttribute]
internal void set_EventSamplingInterval(int value);
    [CompilerGeneratedAttribute]
public TimeSpan get_PollingInterval();
    [CompilerGeneratedAttribute]
internal void set_PollingInterval(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_StartWaitTime();
    [CompilerGeneratedAttribute]
internal void set_StartWaitTime(TimeSpan value);
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_ReadTimeout();
    [CompilerGeneratedAttribute]
internal void set_ReadTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_ReconnectTime();
    [CompilerGeneratedAttribute]
internal void set_ReconnectTime(TimeSpan value);
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_HttpClientTimeout();
    [CompilerGeneratedAttribute]
internal void set_HttpClientTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public sealed virtual HttpClientHandler get_HttpClientHandler();
    [CompilerGeneratedAttribute]
internal void set_HttpClientHandler(HttpClientHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Offline();
    [CompilerGeneratedAttribute]
internal void set_Offline(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AllAttributesPrivate();
    [CompilerGeneratedAttribute]
internal void set_AllAttributesPrivate(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual ISet`1<string> get_PrivateAttributeNames();
    [CompilerGeneratedAttribute]
internal void set_PrivateAttributeNames(ISet`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_UserKeysCapacity();
    [CompilerGeneratedAttribute]
internal void set_UserKeysCapacity(int value);
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_UserKeysFlushInterval();
    [CompilerGeneratedAttribute]
internal void set_UserKeysFlushInterval(TimeSpan value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_InlineUsersInEvents();
    [CompilerGeneratedAttribute]
internal void set_InlineUsersInEvents(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseLdd();
    [CompilerGeneratedAttribute]
internal void set_UseLdd(bool value);
    [CompilerGeneratedAttribute]
internal IFeatureStore get_FeatureStore();
    [CompilerGeneratedAttribute]
internal void set_FeatureStore(IFeatureStore value);
    [CompilerGeneratedAttribute]
public IFeatureStoreFactory get_FeatureStoreFactory();
    [CompilerGeneratedAttribute]
internal void set_FeatureStoreFactory(IFeatureStoreFactory value);
    [CompilerGeneratedAttribute]
public IEventProcessorFactory get_EventProcessorFactory();
    [CompilerGeneratedAttribute]
internal void set_EventProcessorFactory(IEventProcessorFactory value);
    [CompilerGeneratedAttribute]
public IUpdateProcessorFactory get_UpdateProcessorFactory();
    [CompilerGeneratedAttribute]
internal void set_UpdateProcessorFactory(IUpdateProcessorFactory value);
    public string get_UserAgentType();
    public static Configuration Default(string sdkKey);
}
[ExtensionAttribute]
public static class LaunchDarkly.Client.ConfigurationExtensions : object {
    private static ILog Log;
    private static ConfigurationExtensions();
    [ExtensionAttribute]
public static Configuration WithUri(Configuration configuration, string uri);
    [ExtensionAttribute]
public static Configuration WithUri(Configuration configuration, Uri uri);
    [ExtensionAttribute]
public static Configuration WithStreamUri(Configuration configuration, string uri);
    [ExtensionAttribute]
public static Configuration WithStreamUri(Configuration configuration, Uri uri);
    [ExtensionAttribute]
public static Configuration WithEventsUri(Configuration configuration, string uri);
    [ExtensionAttribute]
public static Configuration WithEventsUri(Configuration configuration, Uri uri);
    [ExtensionAttribute]
public static Configuration WithEventQueueCapacity(Configuration configuration, int eventQueueCapacity);
    [ExtensionAttribute]
public static Configuration WithEventQueueFrequency(Configuration configuration, TimeSpan frequency);
    [ExtensionAttribute]
public static Configuration WithEventSamplingInterval(Configuration configuration, int interval);
    [ExtensionAttribute]
public static Configuration WithPollingInterval(Configuration configuration, TimeSpan pollingInterval);
    [ExtensionAttribute]
public static Configuration WithStartWaitTime(Configuration configuration, TimeSpan startWaitTime);
    [ExtensionAttribute]
public static Configuration WithOffline(Configuration configuration, bool offline);
    [ExtensionAttribute]
public static Configuration WithHttpClientTimeout(Configuration configuration, TimeSpan timeSpan);
    [ExtensionAttribute]
public static Configuration WithReadTimeout(Configuration configuration, TimeSpan timeSpan);
    [ExtensionAttribute]
public static Configuration WithReconnectTime(Configuration configuration, TimeSpan timeSpan);
    [ExtensionAttribute]
public static Configuration WithUseLdd(Configuration configuration, bool useLdd);
    [ExtensionAttribute]
[ObsoleteAttribute("Deprecated, please use WithFeatureStoreFactory instead.")]
public static Configuration WithFeatureStore(Configuration configuration, IFeatureStore featureStore);
    [ExtensionAttribute]
public static Configuration WithFeatureStoreFactory(Configuration configuration, IFeatureStoreFactory factory);
    [ExtensionAttribute]
public static Configuration WithEventProcessorFactory(Configuration configuration, IEventProcessorFactory factory);
    [ExtensionAttribute]
public static Configuration WithUpdateProcessorFactory(Configuration configuration, IUpdateProcessorFactory factory);
    [ExtensionAttribute]
public static Configuration WithHttpClientHandler(Configuration configuration, HttpClientHandler httpClientHandler);
    [ExtensionAttribute]
public static Configuration WithIsStreamingEnabled(Configuration configuration, bool enableStream);
    [ExtensionAttribute]
public static Configuration WithAllAttributesPrivate(Configuration configuration, bool allAttributesPrivate);
    [ExtensionAttribute]
public static Configuration WithPrivateAttributeName(Configuration configuration, string attributeName);
    [ExtensionAttribute]
public static Configuration WithUserKeysCapacity(Configuration configuration, int capacity);
    [ExtensionAttribute]
public static Configuration WithUserKeysFlushInterval(Configuration configuration, TimeSpan flushInterval);
    [ExtensionAttribute]
public static Configuration WithInlineUsersInEvents(Configuration configuration, bool inlineUsers);
}
internal class LaunchDarkly.Client.DefaultEventProcessorFactory : object {
    private static string EventsUriPath;
    private sealed virtual override IEventProcessor LaunchDarkly.Client.IEventProcessorFactory.CreateEventProcessor(Configuration config);
}
internal class LaunchDarkly.Client.DefaultUpdateProcessorFactory : object {
    private static ILog Log;
    private static DefaultUpdateProcessorFactory();
    private sealed virtual override IUpdateProcessor LaunchDarkly.Client.IUpdateProcessorFactory.CreateUpdateProcessor(Configuration config, IFeatureStore featureStore);
}
internal class LaunchDarkly.Client.DefaultUserDeduplicator : object {
    private LRUCacheSet`1<string> _userKeys;
    private TimeSpan _flushInterval;
    private Nullable`1<TimeSpan> LaunchDarkly.Common.IUserDeduplicator.FlushInterval { get; }
    internal DefaultUserDeduplicator(Configuration config);
    private sealed virtual override Nullable`1<TimeSpan> LaunchDarkly.Common.IUserDeduplicator.get_FlushInterval();
    private sealed virtual override bool LaunchDarkly.Common.IUserDeduplicator.ProcessUser(User user);
    private sealed virtual override void LaunchDarkly.Common.IUserDeduplicator.Flush();
}
internal class LaunchDarkly.Client.EvaluationException : Exception {
    public EvaluationException(string message);
}
internal class LaunchDarkly.Client.FeatureFlag : object {
    private static ILog Log;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <On>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Prerequisite> <Prerequisites>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Salt>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Target> <Targets>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Rule> <Rules>k__BackingField;
    [CompilerGeneratedAttribute]
private VariationOrRollout <Fallthrough>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <OffVariation>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<JToken> <Variations>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TrackEvents>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <DebugEventsUntilDate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Deleted>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ClientSide>k__BackingField;
    [JsonPropertyAttribute]
public string Key { get; private set; }
    [JsonPropertyAttribute]
public int Version { get; public set; }
    [JsonPropertyAttribute]
internal bool On { get; private set; }
    [JsonPropertyAttribute]
internal List`1<Prerequisite> Prerequisites { get; private set; }
    [JsonPropertyAttribute]
internal string Salt { get; private set; }
    [JsonPropertyAttribute]
internal List`1<Target> Targets { get; private set; }
    [JsonPropertyAttribute]
internal List`1<Rule> Rules { get; private set; }
    [JsonPropertyAttribute]
internal VariationOrRollout Fallthrough { get; private set; }
    [JsonPropertyAttribute]
internal Nullable`1<int> OffVariation { get; private set; }
    [JsonPropertyAttribute]
internal List`1<JToken> Variations { get; private set; }
    [JsonPropertyAttribute]
public bool TrackEvents { get; private set; }
    [JsonPropertyAttribute]
public Nullable`1<long> DebugEventsUntilDate { get; private set; }
    [JsonPropertyAttribute]
public bool Deleted { get; public set; }
    [JsonPropertyAttribute]
public bool ClientSide { get; public set; }
    private int LaunchDarkly.Common.IFlagEventProperties.EventVersion { get; }
    [JsonConstructorAttribute]
internal FeatureFlag(string key, int version, bool on, List`1<Prerequisite> prerequisites, string salt, List`1<Target> targets, List`1<Rule> rules, VariationOrRollout fallthrough, Nullable`1<int> offVariation, List`1<JToken> variations, bool trackEvents, Nullable`1<long> debugEventsUntilDate, bool deleted, bool clientSide);
    private static FeatureFlag();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Key();
    [CompilerGeneratedAttribute]
private void set_Key(string value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Version();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Version(int value);
    [CompilerGeneratedAttribute]
internal bool get_On();
    [CompilerGeneratedAttribute]
private void set_On(bool value);
    [CompilerGeneratedAttribute]
internal List`1<Prerequisite> get_Prerequisites();
    [CompilerGeneratedAttribute]
private void set_Prerequisites(List`1<Prerequisite> value);
    [CompilerGeneratedAttribute]
internal string get_Salt();
    [CompilerGeneratedAttribute]
private void set_Salt(string value);
    [CompilerGeneratedAttribute]
internal List`1<Target> get_Targets();
    [CompilerGeneratedAttribute]
private void set_Targets(List`1<Target> value);
    [CompilerGeneratedAttribute]
internal List`1<Rule> get_Rules();
    [CompilerGeneratedAttribute]
private void set_Rules(List`1<Rule> value);
    [CompilerGeneratedAttribute]
internal VariationOrRollout get_Fallthrough();
    [CompilerGeneratedAttribute]
private void set_Fallthrough(VariationOrRollout value);
    [CompilerGeneratedAttribute]
internal Nullable`1<int> get_OffVariation();
    [CompilerGeneratedAttribute]
private void set_OffVariation(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
internal List`1<JToken> get_Variations();
    [CompilerGeneratedAttribute]
private void set_Variations(List`1<JToken> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_TrackEvents();
    [CompilerGeneratedAttribute]
private void set_TrackEvents(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<long> get_DebugEventsUntilDate();
    [CompilerGeneratedAttribute]
private void set_DebugEventsUntilDate(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Deleted();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Deleted(bool value);
    [CompilerGeneratedAttribute]
public bool get_ClientSide();
    [CompilerGeneratedAttribute]
public void set_ClientSide(bool value);
    private sealed virtual override int LaunchDarkly.Common.IFlagEventProperties.get_EventVersion();
    private sealed virtual override bool LaunchDarkly.Common.IFlagEventProperties.IsExperiment(EvaluationReason reason);
    internal EvalResult Evaluate(User user, IFeatureStore featureStore, EventFactory eventFactory);
    private EvaluationDetail`1<JToken> Evaluate(User user, IFeatureStore featureStore, IList`1<FeatureRequestEvent> events, EventFactory eventFactory);
    private EvaluationReason CheckPrerequisites(User user, IFeatureStore featureStore, IList`1<FeatureRequestEvent> events, EventFactory eventFactory);
    internal EvaluationDetail`1<JToken> ErrorResult(EvaluationErrorKind kind);
    internal EvaluationDetail`1<JToken> GetVariation(int variation, EvaluationReason reason);
    internal EvaluationDetail`1<JToken> GetOffValue(EvaluationReason reason);
    internal EvaluationDetail`1<JToken> GetValueForVariationOrRollout(VariationOrRollout vr, User user, EvaluationReason reason);
}
[JsonConverterAttribute("LaunchDarkly.Client.FeatureFlagsStateConverter")]
public class LaunchDarkly.Client.FeatureFlagsState : object {
    internal bool _valid;
    internal IDictionary`2<string, JToken> _flagValues;
    internal IDictionary`2<string, FlagMetadata> _flagMetadata;
    public bool Valid { get; }
    internal FeatureFlagsState(bool valid);
    internal FeatureFlagsState(bool valid, IDictionary`2<string, JToken> values, IDictionary`2<string, FlagMetadata> metadata);
    public bool get_Valid();
    internal void AddFlag(FeatureFlag flag, JToken value, Nullable`1<int> variation, EvaluationReason reason, bool detailsOnlyIfTracked);
    public JToken GetFlagValue(string key);
    public EvaluationReason GetFlagReason(string key);
    public IDictionary`2<string, JToken> ToValuesMap();
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
}
internal class LaunchDarkly.Client.FeatureFlagsStateConverter : JsonConverter {
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
}
internal class LaunchDarkly.Client.FeatureRequestor : object {
    private static ILog Log;
    private Uri _allUri;
    private Uri _flagsUri;
    private Uri _segmentsUri;
    private HttpClient _httpClient;
    private Configuration _config;
    private Dictionary`2<Uri, EntityTagHeaderValue> _etags;
    internal FeatureRequestor(Configuration config);
    private static FeatureRequestor();
    private sealed virtual override void System.IDisposable.Dispose();
    private void Dispose(bool disposing);
    [AsyncStateMachineAttribute("LaunchDarkly.Client.FeatureRequestor/<LaunchDarkly-Client-IFeatureRequestor-GetAllDataAsync>d__10")]
private sealed virtual override Task`1<AllData> LaunchDarkly.Client.IFeatureRequestor.GetAllDataAsync();
    [AsyncStateMachineAttribute("LaunchDarkly.Client.FeatureRequestor/<LaunchDarkly-Client-IFeatureRequestor-GetFlagAsync>d__11")]
private sealed virtual override Task`1<FeatureFlag> LaunchDarkly.Client.IFeatureRequestor.GetFlagAsync(string featureKey);
    [AsyncStateMachineAttribute("LaunchDarkly.Client.FeatureRequestor/<LaunchDarkly-Client-IFeatureRequestor-GetSegmentAsync>d__12")]
private sealed virtual override Task`1<Segment> LaunchDarkly.Client.IFeatureRequestor.GetSegmentAsync(string segmentKey);
    [AsyncStateMachineAttribute("LaunchDarkly.Client.FeatureRequestor/<GetAsync>d__13`1")]
private Task`1<T> GetAsync(Uri path);
}
public class LaunchDarkly.Client.FeatureStoreCacheConfig : object {
    public static TimeSpan DefaultTtl;
    [CompilerGeneratedAttribute]
private TimeSpan <Ttl>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaximumEntries>k__BackingField;
    public static FeatureStoreCacheConfig Disabled;
    public static FeatureStoreCacheConfig Enabled;
    public TimeSpan Ttl { get; private set; }
    public bool IsEnabled { get; }
    public Nullable`1<int> MaximumEntries { get; private set; }
    internal FeatureStoreCacheConfig(TimeSpan ttl, Nullable`1<int> maximumEntries);
    private static FeatureStoreCacheConfig();
    [CompilerGeneratedAttribute]
public TimeSpan get_Ttl();
    [CompilerGeneratedAttribute]
private void set_Ttl(TimeSpan value);
    public bool get_IsEnabled();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaximumEntries();
    [CompilerGeneratedAttribute]
private void set_MaximumEntries(Nullable`1<int> value);
    public FeatureStoreCacheConfig WithTtl(TimeSpan ttl);
    public FeatureStoreCacheConfig WithTtlMillis(double millis);
    public FeatureStoreCacheConfig WithTtlSeconds(double seconds);
    public FeatureStoreCacheConfig WithMaximumEntries(Nullable`1<int> maximumEntries);
}
internal class LaunchDarkly.Client.FeatureStoreClientWrapper : object {
    private IFeatureStore _store;
    internal FeatureStoreClientWrapper(IFeatureStore store);
    public sealed virtual void Init(IDictionary`2<IVersionedDataKind, IDictionary`2<string, IVersionedData>> allData);
    public sealed virtual T Get(VersionedDataKind`1<T> kind, string key);
    public sealed virtual IDictionary`2<string, T> All(VersionedDataKind`1<T> kind);
    public sealed virtual void Upsert(VersionedDataKind`1<T> kind, T item);
    public sealed virtual void Delete(VersionedDataKind`1<T> kind, string key, int version);
    public sealed virtual bool Initialized();
    public sealed virtual void Dispose();
}
internal abstract class LaunchDarkly.Client.FeatureStoreDataSetSorter : object {
    public static IDictionary`2<IVersionedDataKind, IDictionary`2<string, IVersionedData>> SortAllCollections(IDictionary`2<IVersionedDataKind, IDictionary`2<string, IVersionedData>> allData);
    private static IDictionary`2<string, IVersionedData> SortCollection(IVersionedDataKind kind, IDictionary`2<string, IVersionedData> input);
    private static void AddWithDependenciesFirst(IVersionedData item, IDictionary`2<string, IVersionedData> remainingItems, IVersionedDataOrdering ordering, OutputOrdering output);
}
internal class LaunchDarkly.Client.FeaturesVersionedDataKind : Impl`1<FeatureFlag> {
    public virtual FeatureFlag MakeDeletedItem(string key, int version);
    public virtual IEnumerable`1<string> GetDependencyKeys(IVersionedData item);
}
public static class LaunchDarkly.Client.Files.FileComponents : object {
    public static FileDataSourceFactory FileDataSource();
}
internal class LaunchDarkly.Client.Files.FileDataSource : object {
    private static ILog Log;
    private IFeatureStore _featureStore;
    private List`1<string> _paths;
    private IDisposable _reloader;
    private FlagFileParser _parser;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _started;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _loadedValidData;
    public FileDataSource(IFeatureStore featureStore, List`1<string> paths, bool autoUpdate, TimeSpan pollInterval, Func`2<string, object> alternateParser);
    private static FileDataSource();
    public sealed virtual Task`1<bool> Start();
    public sealed virtual bool Initialized();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    private void LoadAll();
    private void TriggerReload();
}
public class LaunchDarkly.Client.Files.FileDataSourceFactory : object {
    public static TimeSpan DefaultPollInterval;
    private List`1<string> _paths;
    private bool _autoUpdate;
    private TimeSpan _pollInterval;
    private Func`2<string, object> _parser;
    private static FileDataSourceFactory();
    public FileDataSourceFactory WithFilePaths(String[] paths);
    public FileDataSourceFactory WithParser(Func`2<string, object> parseFn);
    public FileDataSourceFactory WithAutoUpdate(bool autoUpdate);
    public FileDataSourceFactory WithPollInterval(TimeSpan pollInterval);
    public sealed virtual IUpdateProcessor CreateUpdateProcessor(Configuration config, IFeatureStore featureStore);
}
internal class LaunchDarkly.Client.Files.FilePollingReloader : object {
    private static ILog Log;
    private List`1<string> _paths;
    private IDictionary`2<string, Nullable`1<DateTime>> _fileTimes;
    private Action _reload;
    private TimeSpan _pollInterval;
    private CancellationTokenSource _canceller;
    public FilePollingReloader(List`1<string> paths, Action reload, TimeSpan pollInterval);
    private static FilePollingReloader();
    [AsyncStateMachineAttribute("LaunchDarkly.Client.Files.FilePollingReloader/<PollAsync>d__7")]
private Task PollAsync(CancellationToken stopToken);
    private void CheckFileTimes();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    [CompilerGeneratedAttribute]
private Task <.ctor>b__6_0();
}
internal static class LaunchDarkly.Client.Files.FlagFactory : object {
    public static IVersionedData FlagFromJson(JToken json);
    public static IVersionedData FlagWithValue(string key, JToken value);
    public static IVersionedData SegmentFromJson(JToken json);
}
internal class LaunchDarkly.Client.Files.FlagFileData : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, JToken> <Flags>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, JToken> <FlagValues>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, JToken> <Segments>k__BackingField;
    [JsonPropertyAttribute]
public Dictionary`2<string, JToken> Flags { get; public set; }
    [JsonPropertyAttribute]
public Dictionary`2<string, JToken> FlagValues { get; public set; }
    [JsonPropertyAttribute]
public Dictionary`2<string, JToken> Segments { get; public set; }
    [CompilerGeneratedAttribute]
public Dictionary`2<string, JToken> get_Flags();
    [CompilerGeneratedAttribute]
public void set_Flags(Dictionary`2<string, JToken> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, JToken> get_FlagValues();
    [CompilerGeneratedAttribute]
public void set_FlagValues(Dictionary`2<string, JToken> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, JToken> get_Segments();
    [CompilerGeneratedAttribute]
public void set_Segments(Dictionary`2<string, JToken> value);
    public void AddToData(IDictionary`2<IVersionedDataKind, IDictionary`2<string, IVersionedData>> allData);
    private void AddItem(IDictionary`2<IVersionedDataKind, IDictionary`2<string, IVersionedData>> allData, IVersionedDataKind kind, IVersionedData item);
}
internal class LaunchDarkly.Client.Files.FlagFileParser : object {
    private Func`2<string, object> _alternateParser;
    public FlagFileParser(Func`2<string, object> alternateParser);
    public FlagFileData Parse(string content);
}
internal class LaunchDarkly.Client.FlagMetadata : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Variation>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <TrackEvents>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <DebugEventsUntilDate>k__BackingField;
    [CompilerGeneratedAttribute]
private EvaluationReason <Reason>k__BackingField;
    [JsonPropertyAttribute]
internal Nullable`1<int> Variation { get; internal set; }
    [JsonPropertyAttribute]
internal Nullable`1<int> Version { get; internal set; }
    [JsonPropertyAttribute]
internal Nullable`1<bool> TrackEvents { get; internal set; }
    [JsonPropertyAttribute]
internal Nullable`1<long> DebugEventsUntilDate { get; internal set; }
    [JsonPropertyAttribute]
internal EvaluationReason Reason { get; internal set; }
    [CompilerGeneratedAttribute]
internal Nullable`1<int> get_Variation();
    [CompilerGeneratedAttribute]
internal void set_Variation(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
internal Nullable`1<int> get_Version();
    [CompilerGeneratedAttribute]
internal void set_Version(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
internal Nullable`1<bool> get_TrackEvents();
    [CompilerGeneratedAttribute]
internal void set_TrackEvents(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal Nullable`1<long> get_DebugEventsUntilDate();
    [CompilerGeneratedAttribute]
internal void set_DebugEventsUntilDate(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
internal EvaluationReason get_Reason();
    [CompilerGeneratedAttribute]
internal void set_Reason(EvaluationReason value);
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
}
public class LaunchDarkly.Client.FlagsStateOption : object {
    private string _description;
    public static FlagsStateOption ClientSideOnly;
    public static FlagsStateOption WithReasons;
    public static FlagsStateOption DetailsOnlyForTrackedFlags;
    private FlagsStateOption(string description);
    private static FlagsStateOption();
    public virtual string ToString();
    internal static bool HasOption(FlagsStateOption[] options, FlagsStateOption option);
}
public interface LaunchDarkly.Client.IEventProcessorFactory {
    public abstract virtual IEventProcessor CreateEventProcessor(Configuration config);
}
internal interface LaunchDarkly.Client.IFeatureRequestor {
    public abstract virtual Task`1<AllData> GetAllDataAsync();
    public abstract virtual Task`1<FeatureFlag> GetFlagAsync(string featureKey);
    public abstract virtual Task`1<Segment> GetSegmentAsync(string segmentKey);
}
public interface LaunchDarkly.Client.IFeatureStore {
    public abstract virtual T Get(VersionedDataKind`1<T> kind, string key);
    public abstract virtual IDictionary`2<string, T> All(VersionedDataKind`1<T> kind);
    public abstract virtual void Init(IDictionary`2<IVersionedDataKind, IDictionary`2<string, IVersionedData>> allData);
    public abstract virtual void Delete(VersionedDataKind`1<T> kind, string key, int version);
    public abstract virtual void Upsert(VersionedDataKind`1<T> kind, T item);
    public abstract virtual bool Initialized();
}
public interface LaunchDarkly.Client.IFeatureStoreFactory {
    public abstract virtual IFeatureStore CreateFeatureStore();
}
public interface LaunchDarkly.Client.ILdClient {
    public abstract virtual bool Initialized();
    public abstract virtual int IntVariation(string key, User user, int defaultValue);
    public abstract virtual EvaluationDetail`1<int> IntVariationDetail(string key, User user, int defaultValue);
    public abstract virtual float FloatVariation(string key, User user, float defaultValue);
    public abstract virtual EvaluationDetail`1<float> FloatVariationDetail(string key, User user, float defaultValue);
    public abstract virtual JToken JsonVariation(string key, User user, JToken defaultValue);
    public abstract virtual EvaluationDetail`1<JToken> JsonVariationDetail(string key, User user, JToken defaultValue);
    public abstract virtual string StringVariation(string key, User user, string defaultValue);
    public abstract virtual EvaluationDetail`1<string> StringVariationDetail(string key, User user, string defaultValue);
    public abstract virtual bool BoolVariation(string key, User user, bool defaultValue);
    public abstract virtual EvaluationDetail`1<bool> BoolVariationDetail(string key, User user, bool defaultValue);
    public abstract virtual void Identify(User user);
    public abstract virtual void Track(string name, User user);
    public abstract virtual void Track(string name, User user, string data);
    public abstract virtual void Track(string name, JToken data, User user);
    [ObsoleteAttribute("Use AllFlagsState instead. Current versions of the client-side SDK will not generate analytics events correctly if you pass the result of AllFlags.")]
public abstract virtual IDictionary`2<string, JToken> AllFlags(User user);
    public abstract virtual FeatureFlagsState AllFlagsState(User user, FlagsStateOption[] options);
    public abstract virtual string SecureModeHash(User user);
}
internal abstract class LaunchDarkly.Client.Impl`1 : VersionedDataKind`1<T> {
    private string _namespace;
    private Type _itemType;
    private string _streamApiPath;
    private int _priority;
    public int Priority { get; }
    internal Impl`1(string ns, Type itemType, string streamApiPath, int priority);
    public virtual string GetNamespace();
    public virtual Type GetItemType();
    public virtual string GetStreamApiPath();
    public sealed virtual int get_Priority();
    public virtual IEnumerable`1<string> GetDependencyKeys(IVersionedData item);
}
public class LaunchDarkly.Client.InMemoryFeatureStore : object {
    private static ILog Log;
    private static int RwLockMaxWaitMillis;
    private ReaderWriterLockSlim RwLock;
    private IDictionary`2<IVersionedDataKind, IDictionary`2<string, IVersionedData>> Items;
    private bool _initialized;
    private static InMemoryFeatureStore();
    public sealed virtual T Get(VersionedDataKind`1<T> kind, string key);
    public sealed virtual IDictionary`2<string, T> All(VersionedDataKind`1<T> kind);
    public sealed virtual void Init(IDictionary`2<IVersionedDataKind, IDictionary`2<string, IVersionedData>> items);
    public sealed virtual void Delete(VersionedDataKind`1<T> kind, string key, int version);
    public sealed virtual void Upsert(VersionedDataKind`1<T> kind, T item);
    public sealed virtual bool Initialized();
    public sealed virtual void Dispose();
}
internal class LaunchDarkly.Client.InMemoryFeatureStoreFactory : object {
    private sealed virtual override IFeatureStore LaunchDarkly.Client.IFeatureStoreFactory.CreateFeatureStore();
}
public interface LaunchDarkly.Client.IUpdateProcessor {
    public abstract virtual Task`1<bool> Start();
    public abstract virtual bool Initialized();
}
public interface LaunchDarkly.Client.IUpdateProcessorFactory {
    public abstract virtual IUpdateProcessor CreateUpdateProcessor(Configuration config, IFeatureStore featureStore);
}
public interface LaunchDarkly.Client.IVersionedData {
    public string Key { get; }
    public int Version { get; public set; }
    public bool Deleted { get; public set; }
    public abstract virtual string get_Key();
    public abstract virtual int get_Version();
    public abstract virtual void set_Version(int value);
    public abstract virtual bool get_Deleted();
    public abstract virtual void set_Deleted(bool value);
}
public interface LaunchDarkly.Client.IVersionedDataKind {
    public abstract virtual string GetNamespace();
    public abstract virtual Type GetItemType();
    public abstract virtual string GetStreamApiPath();
}
public interface LaunchDarkly.Client.IVersionedDataOrdering {
    public int Priority { get; }
    public abstract virtual int get_Priority();
    public abstract virtual IEnumerable`1<string> GetDependencyKeys(IVersionedData item);
}
public class LaunchDarkly.Client.LdClient : object {
    private static ILog Log;
    private Configuration _configuration;
    internal IEventProcessor _eventProcessor;
    private IFeatureStore _featureStore;
    internal IUpdateProcessor _updateProcessor;
    private bool _shouldDisposeEventProcessor;
    private bool _shouldDisposeFeatureStore;
    public Version Version { get; }
    [ObsoleteAttribute("Deprecated, please use Configuration.WithEventProcessorFactory")]
public LdClient(Configuration config, IEventProcessor eventProcessor);
    public LdClient(Configuration config);
    public LdClient(string sdkKey);
    private static LdClient();
    public sealed virtual bool Initialized();
    public sealed virtual bool IsOffline();
    public sealed virtual bool BoolVariation(string key, User user, bool defaultValue);
    public sealed virtual int IntVariation(string key, User user, int defaultValue);
    public sealed virtual float FloatVariation(string key, User user, float defaultValue);
    public sealed virtual string StringVariation(string key, User user, string defaultValue);
    public sealed virtual JToken JsonVariation(string key, User user, JToken defaultValue);
    public sealed virtual EvaluationDetail`1<bool> BoolVariationDetail(string key, User user, bool defaultValue);
    public sealed virtual EvaluationDetail`1<int> IntVariationDetail(string key, User user, int defaultValue);
    public sealed virtual EvaluationDetail`1<float> FloatVariationDetail(string key, User user, float defaultValue);
    public sealed virtual EvaluationDetail`1<string> StringVariationDetail(string key, User user, string defaultValue);
    public sealed virtual EvaluationDetail`1<JToken> JsonVariationDetail(string key, User user, JToken defaultValue);
    public sealed virtual IDictionary`2<string, JToken> AllFlags(User user);
    public sealed virtual FeatureFlagsState AllFlagsState(User user, FlagsStateOption[] options);
    private EvaluationDetail`1<JToken> Evaluate(string featureKey, User user, JToken defaultValue, Nullable`1<JTokenType> expectedType, EventFactory eventFactory);
    private bool CheckResultType(Nullable`1<JTokenType> expectedType, JToken result);
    public sealed virtual string SecureModeHash(User user);
    public sealed virtual void Track(string name, User user);
    public sealed virtual void Track(string name, User user, string data);
    public sealed virtual void Track(string name, JToken data, User user);
    public sealed virtual void Identify(User user);
    public sealed virtual Version get_Version();
    private void Dispose(bool disposing);
    public sealed virtual void Dispose();
    public sealed virtual void Flush();
}
internal class LaunchDarkly.Client.LRUCacheSet`1 : object {
    private int _capacity;
    private Dictionary`2<A, LinkedListNode`1<A>> _map;
    private LinkedList`1<A> _lruList;
    public LRUCacheSet`1(int capacity);
    public bool Add(A value);
    public void Clear();
}
internal class LaunchDarkly.Client.NullEventProcessorFactory : object {
    private sealed virtual override IEventProcessor LaunchDarkly.Client.IEventProcessorFactory.CreateEventProcessor(Configuration config);
}
internal class LaunchDarkly.Client.NullUpdateProcessor : object {
    private sealed virtual override Task`1<bool> LaunchDarkly.Client.IUpdateProcessor.Start();
    private sealed virtual override bool LaunchDarkly.Client.IUpdateProcessor.Initialized();
    private sealed virtual override void System.IDisposable.Dispose();
}
internal class LaunchDarkly.Client.NullUpdateProcessorFactory : object {
    private sealed virtual override IUpdateProcessor LaunchDarkly.Client.IUpdateProcessorFactory.CreateUpdateProcessor(Configuration config, IFeatureStore featureStore);
}
internal static class LaunchDarkly.Client.Operator : object {
    private static ILog Log;
    private static Operator();
    public static bool Apply(string op, JValue uValue, JValue cValue);
    private static bool TryCompareNumericValues(JValue x, JValue y, Int32& result);
    private static bool IsNumericValue(JValue jValue);
    private static bool StringOperator(JValue uValue, JValue cValue, Func`3<string, string, bool> fn);
    private static Nullable`1<double> ParseDoubleFromJValue(JValue jValue);
    private static bool DateOperator(JValue uValue, JValue cValue, Func`3<DateTime, DateTime, bool> fn);
    private static bool SemVerOperator(JValue uValue, JValue cValue, Func`3<SemanticVersion, SemanticVersion, bool> fn);
    public static Nullable`1<DateTime> JValueToDateTime(JValue jValue);
    internal static SemanticVersion JValueToSemVer(JValue jValue);
}
internal class LaunchDarkly.Client.PollingProcessor : object {
    private static ILog Log;
    private static int UNINITIALIZED;
    private static int INITIALIZED;
    private Configuration _config;
    private IFeatureRequestor _featureRequestor;
    private IFeatureStore _featureStore;
    private int _initialized;
    private TaskCompletionSource`1<bool> _initTask;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _disposed;
    internal PollingProcessor(Configuration config, IFeatureRequestor featureRequestor, IFeatureStore featureStore);
    private static PollingProcessor();
    private sealed virtual override bool LaunchDarkly.Client.IUpdateProcessor.Initialized();
    private sealed virtual override Task`1<bool> LaunchDarkly.Client.IUpdateProcessor.Start();
    [AsyncStateMachineAttribute("LaunchDarkly.Client.PollingProcessor/<UpdateTaskLoopAsync>d__12")]
private Task UpdateTaskLoopAsync();
    [AsyncStateMachineAttribute("LaunchDarkly.Client.PollingProcessor/<UpdateTaskAsync>d__13")]
private Task UpdateTaskAsync();
    private sealed virtual override void System.IDisposable.Dispose();
    private void Dispose(bool disposing);
    [CompilerGeneratedAttribute]
private Task <LaunchDarkly.Client.IUpdateProcessor.Start>b__11_0();
}
internal class LaunchDarkly.Client.Prerequisite : object {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Variation>k__BackingField;
    [JsonPropertyAttribute]
internal string Key { get; private set; }
    [JsonPropertyAttribute]
internal int Variation { get; private set; }
    [JsonConstructorAttribute]
internal Prerequisite(string key, int variation);
    [CompilerGeneratedAttribute]
internal string get_Key();
    [CompilerGeneratedAttribute]
private void set_Key(string value);
    [CompilerGeneratedAttribute]
internal int get_Variation();
    [CompilerGeneratedAttribute]
private void set_Variation(int value);
}
internal class LaunchDarkly.Client.Rollout : object {
    [CompilerGeneratedAttribute]
private List`1<WeightedVariation> <Variations>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BucketBy>k__BackingField;
    [JsonPropertyAttribute]
internal List`1<WeightedVariation> Variations { get; private set; }
    [JsonPropertyAttribute]
internal string BucketBy { get; private set; }
    [JsonConstructorAttribute]
internal Rollout(List`1<WeightedVariation> variations, string bucketBy);
    [CompilerGeneratedAttribute]
internal List`1<WeightedVariation> get_Variations();
    [CompilerGeneratedAttribute]
private void set_Variations(List`1<WeightedVariation> value);
    [CompilerGeneratedAttribute]
internal string get_BucketBy();
    [CompilerGeneratedAttribute]
private void set_BucketBy(string value);
}
internal class LaunchDarkly.Client.Rule : VariationOrRollout {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Clause> <Clauses>k__BackingField;
    [JsonPropertyAttribute]
internal string Id { get; private set; }
    [JsonPropertyAttribute]
internal List`1<Clause> Clauses { get; private set; }
    [JsonConstructorAttribute]
internal Rule(string id, Nullable`1<int> variation, Rollout rollout, List`1<Clause> clauses);
    [CompilerGeneratedAttribute]
internal string get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(string value);
    [CompilerGeneratedAttribute]
internal List`1<Clause> get_Clauses();
    [CompilerGeneratedAttribute]
private void set_Clauses(List`1<Clause> value);
    internal bool MatchesUser(User user, IFeatureStore store);
}
internal class LaunchDarkly.Client.Segment : object {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Included>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Excluded>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Salt>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<SegmentRule> <Rules>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Deleted>k__BackingField;
    [JsonPropertyAttribute]
public string Key { get; private set; }
    [JsonPropertyAttribute]
public int Version { get; public set; }
    [JsonPropertyAttribute]
internal List`1<string> Included { get; private set; }
    [JsonPropertyAttribute]
internal List`1<string> Excluded { get; private set; }
    [JsonPropertyAttribute]
internal string Salt { get; private set; }
    [JsonPropertyAttribute]
internal List`1<SegmentRule> Rules { get; private set; }
    [JsonPropertyAttribute]
public bool Deleted { get; public set; }
    [JsonConstructorAttribute]
internal Segment(string key, int version, List`1<string> included, List`1<string> excluded, string salt, List`1<SegmentRule> rules, bool deleted);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Key();
    [CompilerGeneratedAttribute]
private void set_Key(string value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Version();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Version(int value);
    [CompilerGeneratedAttribute]
internal List`1<string> get_Included();
    [CompilerGeneratedAttribute]
private void set_Included(List`1<string> value);
    [CompilerGeneratedAttribute]
internal List`1<string> get_Excluded();
    [CompilerGeneratedAttribute]
private void set_Excluded(List`1<string> value);
    [CompilerGeneratedAttribute]
internal string get_Salt();
    [CompilerGeneratedAttribute]
private void set_Salt(string value);
    [CompilerGeneratedAttribute]
internal List`1<SegmentRule> get_Rules();
    [CompilerGeneratedAttribute]
private void set_Rules(List`1<SegmentRule> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Deleted();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Deleted(bool value);
    public bool MatchesUser(User user);
}
internal class LaunchDarkly.Client.SegmentRule : object {
    [CompilerGeneratedAttribute]
private List`1<Clause> <Clauses>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Weight>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BucketBy>k__BackingField;
    [JsonPropertyAttribute]
internal List`1<Clause> Clauses { get; private set; }
    [JsonPropertyAttribute]
internal Nullable`1<int> Weight { get; private set; }
    [JsonPropertyAttribute]
internal string BucketBy { get; private set; }
    [JsonConstructorAttribute]
internal SegmentRule(List`1<Clause> clauses, Nullable`1<int> weight, string bucketBy);
    [CompilerGeneratedAttribute]
internal List`1<Clause> get_Clauses();
    [CompilerGeneratedAttribute]
private void set_Clauses(List`1<Clause> value);
    [CompilerGeneratedAttribute]
internal Nullable`1<int> get_Weight();
    [CompilerGeneratedAttribute]
private void set_Weight(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
internal string get_BucketBy();
    [CompilerGeneratedAttribute]
private void set_BucketBy(string value);
    public bool MatchesUser(User user, string segmentKey, string salt);
}
internal class LaunchDarkly.Client.SegmentsVersionedDataKind : Impl`1<Segment> {
    public virtual Segment MakeDeletedItem(string key, int version);
}
internal class LaunchDarkly.Client.SemanticVersion : object {
    private static Regex VERSION_REGEX;
    [CompilerGeneratedAttribute]
private int <Major>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Minor>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Patch>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Prerelease>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Build>k__BackingField;
    public int Major { get; private set; }
    public int Minor { get; private set; }
    public int Patch { get; private set; }
    public string Prerelease { get; private set; }
    public string Build { get; private set; }
    public SemanticVersion(int major, int minor, int patch, string prerelease, string build);
    private static SemanticVersion();
    [CompilerGeneratedAttribute]
public int get_Major();
    [CompilerGeneratedAttribute]
private void set_Major(int value);
    [CompilerGeneratedAttribute]
public int get_Minor();
    [CompilerGeneratedAttribute]
private void set_Minor(int value);
    [CompilerGeneratedAttribute]
public int get_Patch();
    [CompilerGeneratedAttribute]
private void set_Patch(int value);
    [CompilerGeneratedAttribute]
public string get_Prerelease();
    [CompilerGeneratedAttribute]
private void set_Prerelease(string value);
    [CompilerGeneratedAttribute]
public string get_Build();
    [CompilerGeneratedAttribute]
private void set_Build(string value);
    public static SemanticVersion Parse(string s, bool allowMissingMinorAndPatch);
    public int ComparePrecedence(SemanticVersion other);
    private int CompareIdentifiers(String[] ids1, String[] ids2);
}
internal class LaunchDarkly.Client.ServerSideClientEnvironment : ClientEnvironment {
    internal static ServerSideClientEnvironment Instance;
    public string UserAgentType { get; }
    private static ServerSideClientEnvironment();
    public virtual string get_UserAgentType();
}
internal class LaunchDarkly.Client.StreamProcessor : object {
    private static string PUT;
    private static string PATCH;
    private static string DELETE;
    private static string INDIRECT_PATCH;
    private static ILog Log;
    private Configuration _config;
    private StreamManager _streamManager;
    private IFeatureRequestor _featureRequestor;
    private IFeatureStore _featureStore;
    internal StreamProcessor(Configuration config, IFeatureRequestor featureRequestor, IFeatureStore featureStore, EventSourceCreator eventSourceCreator);
    private static StreamProcessor();
    private StreamProperties MakeStreamProperties(Configuration config);
    private sealed virtual override bool LaunchDarkly.Client.IUpdateProcessor.Initialized();
    private sealed virtual override Task`1<bool> LaunchDarkly.Client.IUpdateProcessor.Start();
    [AsyncStateMachineAttribute("LaunchDarkly.Client.StreamProcessor/<HandleMessage>d__13")]
public sealed virtual Task HandleMessage(StreamManager streamManager, string messageType, string messageData);
    private sealed virtual override void System.IDisposable.Dispose();
    private void Dispose(bool disposing);
    [AsyncStateMachineAttribute("LaunchDarkly.Client.StreamProcessor/<UpdateTaskAsync>d__16")]
private Task UpdateTaskAsync(string objectPath);
    private bool GetKeyFromPath(string path, IVersionedDataKind kind, String& key);
}
internal class LaunchDarkly.Client.Target : object {
    [CompilerGeneratedAttribute]
private List`1<string> <Values>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Variation>k__BackingField;
    [JsonPropertyAttribute]
internal List`1<string> Values { get; private set; }
    [JsonPropertyAttribute]
internal int Variation { get; private set; }
    [JsonConstructorAttribute]
internal Target(List`1<string> values, int variation);
    [CompilerGeneratedAttribute]
internal List`1<string> get_Values();
    [CompilerGeneratedAttribute]
private void set_Values(List`1<string> value);
    [CompilerGeneratedAttribute]
internal int get_Variation();
    [CompilerGeneratedAttribute]
private void set_Variation(int value);
}
internal class LaunchDarkly.Client.Utils.CacheKey : ValueType {
    public IVersionedDataKind Kind;
    public string Key;
    public CacheKey(IVersionedDataKind kind, string key);
    public sealed virtual bool Equals(CacheKey other);
    public virtual int GetHashCode();
}
public class LaunchDarkly.Client.Utils.CachingStoreWrapper : object {
    private IFeatureStoreCore _core;
    private FeatureStoreCacheConfig _caching;
    private ICache`2<CacheKey, IVersionedData> _itemCache;
    private ICache`2<IVersionedDataKind, IDictionary`2<string, IVersionedData>> _allCache;
    private ISingleValueCache`1<bool> _initCache;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _inited;
    internal CachingStoreWrapper(IFeatureStoreCore core, FeatureStoreCacheConfig caching);
    public static CachingStoreWrapperBuilder Builder(IFeatureStoreCore core);
    public static CachingStoreWrapperBuilder Builder(IFeatureStoreCoreAsync coreAsync);
    public sealed virtual bool Initialized();
    public sealed virtual void Init(IDictionary`2<IVersionedDataKind, IDictionary`2<string, IVersionedData>> items);
    public sealed virtual T Get(VersionedDataKind`1<T> kind, string key);
    public sealed virtual IDictionary`2<string, T> All(VersionedDataKind`1<T> kind);
    public sealed virtual void Upsert(VersionedDataKind`1<T> kind, T item);
    public sealed virtual void Delete(VersionedDataKind`1<T> kind, string key, int version);
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    private IVersionedData GetInternalForCache(CacheKey key);
    private IDictionary`2<string, IVersionedData> GetAllForCache(IVersionedDataKind kind);
    private IDictionary`2<string, T> FilterItems(IDictionary`2<string, IVersionedData> items);
}
public class LaunchDarkly.Client.Utils.CachingStoreWrapperBuilder : object {
    private IFeatureStoreCore _core;
    private FeatureStoreCacheConfig _caching;
    internal CachingStoreWrapperBuilder(IFeatureStoreCore core);
    public CachingStoreWrapper Build();
    public CachingStoreWrapperBuilder WithCaching(FeatureStoreCacheConfig caching);
}
internal class LaunchDarkly.Client.Utils.FeatureStoreCoreAsyncAdapter : object {
    private IFeatureStoreCoreAsync _coreAsync;
    private static TaskFactory _taskFactory;
    internal FeatureStoreCoreAsyncAdapter(IFeatureStoreCoreAsync coreAsync);
    private static FeatureStoreCoreAsyncAdapter();
    public sealed virtual void InitInternal(IDictionary`2<IVersionedDataKind, IDictionary`2<string, IVersionedData>> allData);
    public sealed virtual IVersionedData GetInternal(IVersionedDataKind kind, string key);
    public sealed virtual IDictionary`2<string, IVersionedData> GetAllInternal(IVersionedDataKind kind);
    public sealed virtual IVersionedData UpsertInternal(IVersionedDataKind kind, IVersionedData item);
    public sealed virtual bool InitializedInternal();
    public sealed virtual void Dispose();
    private void WaitSafely(Func`1<Task> taskFn);
    private T WaitSafely(Func`1<Task`1<T>> taskFn);
    [CompilerGeneratedAttribute]
private Task`1<bool> <InitializedInternal>b__7_0();
}
public abstract class LaunchDarkly.Client.Utils.FeatureStoreHelpers : object {
    public static T UnmarshalJson(VersionedDataKind`1<T> kind, string data);
    public static IVersionedData UnmarshalJson(IVersionedDataKind kind, string data);
    public static string MarshalJson(IVersionedData item);
}
public interface LaunchDarkly.Client.Utils.IFeatureStoreCore {
    public abstract virtual void InitInternal(IDictionary`2<IVersionedDataKind, IDictionary`2<string, IVersionedData>> allData);
    public abstract virtual IVersionedData GetInternal(IVersionedDataKind kind, string key);
    public abstract virtual IDictionary`2<string, IVersionedData> GetAllInternal(IVersionedDataKind kind);
    public abstract virtual IVersionedData UpsertInternal(IVersionedDataKind kind, IVersionedData item);
    public abstract virtual bool InitializedInternal();
}
public interface LaunchDarkly.Client.Utils.IFeatureStoreCoreAsync {
    public abstract virtual Task InitInternalAsync(IDictionary`2<IVersionedDataKind, IDictionary`2<string, IVersionedData>> allData);
    public abstract virtual Task`1<IVersionedData> GetInternalAsync(IVersionedDataKind kind, string key);
    public abstract virtual Task`1<IDictionary`2<string, IVersionedData>> GetAllInternalAsync(IVersionedDataKind kind);
    public abstract virtual Task`1<IVersionedData> UpsertInternalAsync(IVersionedDataKind kind, IVersionedData item);
    public abstract virtual Task`1<bool> InitializedInternalAsync();
}
public class LaunchDarkly.Client.Utils.UnmarshalException : Exception {
    public UnmarshalException(string message, Exception cause);
}
internal class LaunchDarkly.Client.VariationOrRollout : object {
    private static float longScale;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Variation>k__BackingField;
    [CompilerGeneratedAttribute]
private Rollout <Rollout>k__BackingField;
    [JsonPropertyAttribute]
internal Nullable`1<int> Variation { get; private set; }
    [JsonPropertyAttribute]
internal Rollout Rollout { get; private set; }
    [JsonConstructorAttribute]
internal VariationOrRollout(Nullable`1<int> variation, Rollout rollout);
    private static VariationOrRollout();
    [CompilerGeneratedAttribute]
internal Nullable`1<int> get_Variation();
    [CompilerGeneratedAttribute]
private void set_Variation(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
internal Rollout get_Rollout();
    [CompilerGeneratedAttribute]
private void set_Rollout(Rollout value);
    internal Nullable`1<int> VariationIndexForUser(User user, string key, string salt);
    internal static float BucketUser(User user, string featureKey, string attr, string salt);
    private static string BucketableStringValue(JToken value);
    private static string Hash(string s);
}
internal abstract class LaunchDarkly.Client.VersionedDataKind : object {
    internal static VersionedDataKind`1<FeatureFlag> Features;
    internal static VersionedDataKind`1<Segment> Segments;
    private static VersionedDataKind();
}
public abstract class LaunchDarkly.Client.VersionedDataKind`1 : object {
    public abstract virtual string GetNamespace();
    public abstract virtual Type GetItemType();
    public abstract virtual string GetStreamApiPath();
    public abstract virtual T MakeDeletedItem(string key, int version);
}
internal class LaunchDarkly.Client.WeightedVariation : object {
    [CompilerGeneratedAttribute]
private int <Variation>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Weight>k__BackingField;
    [JsonPropertyAttribute]
internal int Variation { get; private set; }
    [JsonPropertyAttribute]
internal int Weight { get; private set; }
    [JsonConstructorAttribute]
internal WeightedVariation(int variation, int weight);
    [CompilerGeneratedAttribute]
internal int get_Variation();
    [CompilerGeneratedAttribute]
private void set_Variation(int value);
    [CompilerGeneratedAttribute]
internal int get_Weight();
    [CompilerGeneratedAttribute]
private void set_Weight(int value);
}
