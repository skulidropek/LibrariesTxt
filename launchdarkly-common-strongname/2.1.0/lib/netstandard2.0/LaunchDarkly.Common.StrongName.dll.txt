public class LaunchDarkly.Client.CustomEvent : Event {
    [CompilerGeneratedAttribute]
private JToken <JsonData>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <MetricValue>k__BackingField;
    [ObsoleteAttribute("Use JsonData.")]
public string Data { get; }
    public JToken JsonData { get; private set; }
    public Nullable`1<double> MetricValue { get; private set; }
    internal CustomEvent(long creationDate, string key, User user, JToken data, Nullable`1<double> metricValue);
    public string get_Data();
    [CompilerGeneratedAttribute]
public JToken get_JsonData();
    [CompilerGeneratedAttribute]
private void set_JsonData(JToken value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_MetricValue();
    [CompilerGeneratedAttribute]
private void set_MetricValue(Nullable`1<double> value);
}
public class LaunchDarkly.Client.EvaluationDetail`1 : object {
    private T _value;
    private Nullable`1<int> _variationIndex;
    private EvaluationReason _reason;
    public T Value { get; }
    public Nullable`1<int> VariationIndex { get; }
    public EvaluationReason Reason { get; }
    public bool IsDefaultValue { get; }
    public EvaluationDetail`1(T value, Nullable`1<int> variationIndex, EvaluationReason reason);
    public T get_Value();
    public Nullable`1<int> get_VariationIndex();
    public EvaluationReason get_Reason();
    public bool get_IsDefaultValue();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter")]
public enum LaunchDarkly.Client.EvaluationErrorKind : Enum {
    public int value__;
    public static EvaluationErrorKind CLIENT_NOT_READY;
    public static EvaluationErrorKind FLAG_NOT_FOUND;
    public static EvaluationErrorKind USER_NOT_SPECIFIED;
    public static EvaluationErrorKind MALFORMED_FLAG;
    public static EvaluationErrorKind WRONG_TYPE;
    public static EvaluationErrorKind EXCEPTION;
}
[JsonConverterAttribute("LaunchDarkly.Client.EvaluationReasonConverter")]
public abstract class LaunchDarkly.Client.EvaluationReason : object {
    private EvaluationReasonKind _kind;
    [JsonPropertyAttribute]
public EvaluationReasonKind Kind { get; }
    internal EvaluationReason(EvaluationReasonKind kind);
    public EvaluationReasonKind get_Kind();
    public virtual string ToString();
}
internal class LaunchDarkly.Client.EvaluationReasonConverter : JsonConverter {
    public bool CanWrite { get; }
    public virtual bool get_CanWrite();
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
}
[JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter")]
public enum LaunchDarkly.Client.EvaluationReasonKind : Enum {
    public int value__;
    public static EvaluationReasonKind OFF;
    public static EvaluationReasonKind FALLTHROUGH;
    public static EvaluationReasonKind TARGET_MATCH;
    public static EvaluationReasonKind RULE_MATCH;
    public static EvaluationReasonKind PREREQUISITE_FAILED;
    public static EvaluationReasonKind ERROR;
}
public abstract class LaunchDarkly.Client.Event : object {
    [CompilerGeneratedAttribute]
private User <User>k__BackingField;
    [CompilerGeneratedAttribute]
private long <CreationDate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    public User User { get; private set; }
    public long CreationDate { get; private set; }
    public string Key { get; private set; }
    internal Event(long creationDate, string key, User user);
    [CompilerGeneratedAttribute]
public User get_User();
    [CompilerGeneratedAttribute]
private void set_User(User value);
    [CompilerGeneratedAttribute]
public long get_CreationDate();
    [CompilerGeneratedAttribute]
private void set_CreationDate(long value);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
private void set_Key(string value);
}
public class LaunchDarkly.Client.FeatureRequestEvent : Event {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Variation>k__BackingField;
    [CompilerGeneratedAttribute]
private JToken <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private JToken <Default>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PrereqOf>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TrackEvents>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <DebugEventsUntilDate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Debug>k__BackingField;
    [CompilerGeneratedAttribute]
private EvaluationReason <Reason>k__BackingField;
    public Nullable`1<int> Variation { get; private set; }
    public JToken Value { get; private set; }
    public JToken Default { get; private set; }
    public Nullable`1<int> Version { get; private set; }
    public string PrereqOf { get; private set; }
    public bool TrackEvents { get; private set; }
    public Nullable`1<long> DebugEventsUntilDate { get; private set; }
    public bool Debug { get; private set; }
    public EvaluationReason Reason { get; private set; }
    internal FeatureRequestEvent(long creationDate, string key, User user, Nullable`1<int> variation, JToken value, JToken defaultValue, Nullable`1<int> version, string prereqOf, bool trackEvents, Nullable`1<long> debugEventsUntilDate, bool debug, EvaluationReason reason);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Variation();
    [CompilerGeneratedAttribute]
private void set_Variation(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public JToken get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(JToken value);
    [CompilerGeneratedAttribute]
public JToken get_Default();
    [CompilerGeneratedAttribute]
private void set_Default(JToken value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Version();
    [CompilerGeneratedAttribute]
private void set_Version(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_PrereqOf();
    [CompilerGeneratedAttribute]
private void set_PrereqOf(string value);
    [CompilerGeneratedAttribute]
public bool get_TrackEvents();
    [CompilerGeneratedAttribute]
private void set_TrackEvents(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_DebugEventsUntilDate();
    [CompilerGeneratedAttribute]
private void set_DebugEventsUntilDate(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public bool get_Debug();
    [CompilerGeneratedAttribute]
private void set_Debug(bool value);
    [CompilerGeneratedAttribute]
public EvaluationReason get_Reason();
    [CompilerGeneratedAttribute]
private void set_Reason(EvaluationReason value);
}
public class LaunchDarkly.Client.IdentifyEvent : Event {
    internal IdentifyEvent(long creationDate, User user);
}
public interface LaunchDarkly.Client.IEventProcessor {
    public abstract virtual void SendEvent(Event evt);
    public abstract virtual void Flush();
}
internal class LaunchDarkly.Client.IndexEvent : Event {
    internal IndexEvent(long creationDate, User user);
}
internal class LaunchDarkly.Client.NullEventProcessor : object {
    private sealed virtual override void LaunchDarkly.Client.IEventProcessor.SendEvent(Event eventToLog);
    private sealed virtual override void LaunchDarkly.Client.IEventProcessor.Flush();
    private sealed virtual override void System.IDisposable.Dispose();
}
internal class LaunchDarkly.Client.UnsuccessfulResponseException : Exception {
    [CompilerGeneratedAttribute]
private int <StatusCode>k__BackingField;
    public int StatusCode { get; private set; }
    internal UnsuccessfulResponseException(int statusCode);
    [CompilerGeneratedAttribute]
public int get_StatusCode();
    [CompilerGeneratedAttribute]
private void set_StatusCode(int value);
}
public class LaunchDarkly.Client.User : object {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SecondaryKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IpAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Country>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FirstName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LastName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Avatar>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Email>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Anonymous>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, JToken> <Custom>k__BackingField;
    [CompilerGeneratedAttribute]
private ISet`1<string> <PrivateAttributeNames>k__BackingField;
    [JsonPropertyAttribute]
public string Key { get; public set; }
    [JsonPropertyAttribute]
public string SecondaryKey { get; public set; }
    [JsonPropertyAttribute]
public string IpAddress { get; public set; }
    [JsonPropertyAttribute]
public string Country { get; public set; }
    [JsonPropertyAttribute]
public string FirstName { get; public set; }
    [JsonPropertyAttribute]
public string LastName { get; public set; }
    [JsonPropertyAttribute]
public string Name { get; public set; }
    [JsonPropertyAttribute]
public string Avatar { get; public set; }
    [JsonPropertyAttribute]
public string Email { get; public set; }
    [JsonPropertyAttribute]
public Nullable`1<bool> Anonymous { get; public set; }
    [JsonPropertyAttribute]
public Dictionary`2<string, JToken> Custom { get; public set; }
    [JsonIgnoreAttribute]
public ISet`1<string> PrivateAttributeNames { get; public set; }
    public User(string key);
    public User(User from);
    [JsonConstructorAttribute]
public User(string key, string secondaryKey, string ip, string country, string firstName, string lastName, string name, string avatar, string email, Nullable`1<bool> anonymous, IDictionary`2<string, JToken> custom, ISet`1<string> privateAttributeNames);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(string value);
    [CompilerGeneratedAttribute]
public string get_SecondaryKey();
    [CompilerGeneratedAttribute]
public void set_SecondaryKey(string value);
    [CompilerGeneratedAttribute]
public string get_IpAddress();
    [CompilerGeneratedAttribute]
public void set_IpAddress(string value);
    [CompilerGeneratedAttribute]
public string get_Country();
    [CompilerGeneratedAttribute]
public void set_Country(string value);
    [CompilerGeneratedAttribute]
public string get_FirstName();
    [CompilerGeneratedAttribute]
public void set_FirstName(string value);
    [CompilerGeneratedAttribute]
public string get_LastName();
    [CompilerGeneratedAttribute]
public void set_LastName(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Avatar();
    [CompilerGeneratedAttribute]
public void set_Avatar(string value);
    [CompilerGeneratedAttribute]
public string get_Email();
    [CompilerGeneratedAttribute]
public void set_Email(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Anonymous();
    [CompilerGeneratedAttribute]
public void set_Anonymous(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, JToken> get_Custom();
    [CompilerGeneratedAttribute]
public void set_Custom(Dictionary`2<string, JToken> value);
    [CompilerGeneratedAttribute]
public ISet`1<string> get_PrivateAttributeNames();
    [CompilerGeneratedAttribute]
public void set_PrivateAttributeNames(ISet`1<string> value);
    internal JToken GetValueForEvaluation(string attribute);
    public static User WithKey(string key);
    internal User AddCustom(string attribute, JToken value);
    internal User AddPrivate(string name);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(User u);
    public virtual int GetHashCode();
}
[ExtensionAttribute]
public static class LaunchDarkly.Client.UserExtensions : object {
    [ExtensionAttribute]
public static User AndSecondaryKey(User user, string secondaryKey);
    [ExtensionAttribute]
public static User AndIpAddress(User user, string ipAddress);
    [ExtensionAttribute]
public static User AndPrivateIpAddress(User user, string ipAddress);
    [ExtensionAttribute]
public static User AndCountry(User user, string country);
    [ExtensionAttribute]
public static User AndPrivateCountry(User user, string country);
    [ExtensionAttribute]
public static User AndFirstName(User user, string firstName);
    [ExtensionAttribute]
public static User AndPrivateFirstName(User user, string firstName);
    [ExtensionAttribute]
public static User AndLastName(User user, string lastName);
    [ExtensionAttribute]
public static User AndPrivateLastName(User user, string lastName);
    [ExtensionAttribute]
public static User AndName(User user, string name);
    [ExtensionAttribute]
public static User AndPrivateName(User user, string name);
    [ExtensionAttribute]
public static User AndEmail(User user, string email);
    [ExtensionAttribute]
public static User AndPrivateEmail(User user, string email);
    [ExtensionAttribute]
public static User AndAnonymous(User user, bool anonymous);
    [ExtensionAttribute]
public static User AndAvatar(User user, string avatar);
    [ExtensionAttribute]
public static User AndPrivateAvatar(User user, string avatar);
    [ExtensionAttribute]
public static User AndCustomAttribute(User user, string attribute, string value);
    [ExtensionAttribute]
public static User AndCustomAttribute(User user, string attribute, bool value);
    [ExtensionAttribute]
public static User AndCustomAttribute(User user, string attribute, int value);
    [ExtensionAttribute]
public static User AndCustomAttribute(User user, string attribute, float value);
    [ExtensionAttribute]
public static User AndCustomAttribute(User user, string attribute, long value);
    [ExtensionAttribute]
public static User AndCustomAttribute(User user, string attribute, List`1<string> value);
    [ExtensionAttribute]
public static User AndCustomAttribute(User user, string attribute, List`1<int> value);
    [ExtensionAttribute]
public static User AndCustomAttribute(User user, string attribute, JToken value);
    [ExtensionAttribute]
public static User AndPrivateCustomAttribute(User user, string attribute, string value);
    [ExtensionAttribute]
public static User AndPrivateCustomAttribute(User user, string attribute, bool value);
    [ExtensionAttribute]
public static User AndPrivateCustomAttribute(User user, string attribute, int value);
    [ExtensionAttribute]
public static User AndPrivateCustomAttribute(User user, string attribute, float value);
    [ExtensionAttribute]
public static User AndPrivateCustomAttribute(User user, string attribute, long value);
    [ExtensionAttribute]
public static User AndPrivateCustomAttribute(User user, string attribute, List`1<string> value);
    [ExtensionAttribute]
public static User AndPrivateCustomAttribute(User user, string attribute, List`1<int> value);
    [ExtensionAttribute]
public static User AndPrivateCustomAttribute(User user, string attribute, JToken value);
}
internal class LaunchDarkly.Common.AtomicBoolean : object {
    internal int _value;
    internal AtomicBoolean(bool value);
    internal bool GetAndSet(bool newValue);
}
internal abstract class LaunchDarkly.Common.ClientEnvironment : object {
    public string VersionString { get; }
    public Version Version { get; }
    public string UserAgentType { get; }
    public string get_VersionString();
    public Version get_Version();
    public abstract virtual string get_UserAgentType();
}
internal class LaunchDarkly.Common.CustomEventOutput : EventOutput {
    [CompilerGeneratedAttribute]
private long <CreationDate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private EventUser <User>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserKey>k__BackingField;
    [CompilerGeneratedAttribute]
private JToken <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <MetricValue>k__BackingField;
    [JsonPropertyAttribute]
internal long CreationDate { get; internal set; }
    [JsonPropertyAttribute]
internal string Key { get; internal set; }
    [JsonPropertyAttribute]
internal EventUser User { get; internal set; }
    [JsonPropertyAttribute]
internal string UserKey { get; internal set; }
    [JsonPropertyAttribute]
internal JToken Data { get; internal set; }
    [JsonPropertyAttribute]
internal Nullable`1<double> MetricValue { get; internal set; }
    [CompilerGeneratedAttribute]
internal long get_CreationDate();
    [CompilerGeneratedAttribute]
internal void set_CreationDate(long value);
    [CompilerGeneratedAttribute]
internal string get_Key();
    [CompilerGeneratedAttribute]
internal void set_Key(string value);
    [CompilerGeneratedAttribute]
internal EventUser get_User();
    [CompilerGeneratedAttribute]
internal void set_User(EventUser value);
    [CompilerGeneratedAttribute]
internal string get_UserKey();
    [CompilerGeneratedAttribute]
internal void set_UserKey(string value);
    [CompilerGeneratedAttribute]
internal JToken get_Data();
    [CompilerGeneratedAttribute]
internal void set_Data(JToken value);
    [CompilerGeneratedAttribute]
internal Nullable`1<double> get_MetricValue();
    [CompilerGeneratedAttribute]
internal void set_MetricValue(Nullable`1<double> value);
}
internal class LaunchDarkly.Common.DefaultEventFactory : EventFactory {
    internal bool IncludeReasons { get; }
    internal virtual long GetTimestamp();
    internal virtual bool get_IncludeReasons();
}
internal class LaunchDarkly.Common.DefaultEventFactoryWithReasons : DefaultEventFactory {
    internal bool IncludeReasons { get; }
    internal virtual bool get_IncludeReasons();
}
internal class LaunchDarkly.Common.DefaultEventProcessor : object {
    internal static ILog Log;
    internal static string CurrentSchemaVersion;
    private BlockingCollection`1<IEventMessage> _messageQueue;
    private EventDispatcher _dispatcher;
    private Timer _flushTimer;
    private Timer _flushUsersTimer;
    private AtomicBoolean _stopped;
    private AtomicBoolean _inputCapacityExceeded;
    internal DefaultEventProcessor(IBaseConfiguration config, IUserDeduplicator userDeduplicator, HttpClient httpClient, string eventsUriPath);
    private static DefaultEventProcessor();
    private sealed virtual override void LaunchDarkly.Client.IEventProcessor.SendEvent(Event eventToLog);
    private sealed virtual override void LaunchDarkly.Client.IEventProcessor.Flush();
    private sealed virtual override void System.IDisposable.Dispose();
    private void Dispose(bool disposing);
    private bool SubmitMessage(IEventMessage message);
    internal void WaitUntilInactive();
    private void DoBackgroundFlush(object StateInfo);
    private void DoUserKeysFlush(object StateInfo);
}
internal class LaunchDarkly.Common.EventBuffer : object {
    private List`1<Event> _events;
    private EventSummarizer _summarizer;
    private int _capacity;
    private bool _exceededCapacity;
    internal EventBuffer(int capacity);
    internal void AddEvent(Event e);
    internal void AddToSummary(Event e);
    internal FlushPayload GetPayload();
    internal void Clear();
}
internal class LaunchDarkly.Common.EventDispatcher : object {
    private static int MaxFlushWorkers;
    private IBaseConfiguration _config;
    private IUserDeduplicator _userDeduplicator;
    private CountdownEvent _flushWorkersCounter;
    private HttpClient _httpClient;
    private Uri _uri;
    private Random _random;
    private long _lastKnownPastTime;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _disabled;
    internal EventDispatcher(IBaseConfiguration config, BlockingCollection`1<IEventMessage> messageQueue, IUserDeduplicator userDeduplicator, HttpClient httpClient, string eventsUriPath);
    private static EventDispatcher();
    private sealed virtual override void System.IDisposable.Dispose();
    private void Dispose(bool disposing);
    private void RunMainLoop(BlockingCollection`1<IEventMessage> messageQueue, EventBuffer buffer);
    private void WaitForFlushes();
    private void ProcessEvent(Event e, EventBuffer buffer);
    private bool ShouldDebugEvent(FeatureRequestEvent fe);
    private bool ShouldSampleEvent();
    private bool ShouldTrackFullEvent(Event e);
    private void StartFlush(EventBuffer buffer);
    [AsyncStateMachineAttribute("LaunchDarkly.Common.EventDispatcher/<FlushEventsAsync>d__19")]
private Task FlushEventsAsync(FlushPayload payload);
    [AsyncStateMachineAttribute("LaunchDarkly.Common.EventDispatcher/<SendEventsAsync>d__20")]
private Task SendEventsAsync(string jsonEvents, int count, CancellationToken token);
}
internal abstract class LaunchDarkly.Common.EventFactory : object {
    [CompilerGeneratedAttribute]
private static EventFactory <Default>k__BackingField;
    [CompilerGeneratedAttribute]
private static EventFactory <DefaultWithReasons>k__BackingField;
    internal static EventFactory Default { get; }
    internal static EventFactory DefaultWithReasons { get; }
    internal bool IncludeReasons { get; }
    private static EventFactory();
    [CompilerGeneratedAttribute]
internal static EventFactory get_Default();
    [CompilerGeneratedAttribute]
internal static EventFactory get_DefaultWithReasons();
    internal abstract virtual long GetTimestamp();
    internal abstract virtual bool get_IncludeReasons();
    internal FeatureRequestEvent NewFeatureRequestEvent(IFlagEventProperties flag, User user, EvaluationDetail`1<JToken> result, JToken defaultVal);
    internal FeatureRequestEvent NewDefaultFeatureRequestEvent(IFlagEventProperties flag, User user, JToken defaultVal, EvaluationErrorKind errorKind);
    internal FeatureRequestEvent NewUnknownFeatureRequestEvent(string key, User user, JToken defaultVal, EvaluationErrorKind errorKind);
    internal FeatureRequestEvent NewPrerequisiteFeatureRequestEvent(IFlagEventProperties prereqFlag, User user, EvaluationDetail`1<JToken> result, IFlagEventProperties prereqOf);
    internal FeatureRequestEvent NewDebugEvent(FeatureRequestEvent from);
    internal CustomEvent NewCustomEvent(string key, User user, JToken data, Nullable`1<double> metricValue);
    internal IdentifyEvent NewIdentifyEvent(User user);
}
internal class LaunchDarkly.Common.EventMessage : object {
    [CompilerGeneratedAttribute]
private Event <Event>k__BackingField;
    internal Event Event { get; private set; }
    internal EventMessage(Event e);
    [CompilerGeneratedAttribute]
internal Event get_Event();
    [CompilerGeneratedAttribute]
private void set_Event(Event value);
}
internal abstract class LaunchDarkly.Common.EventOutput : object {
    [CompilerGeneratedAttribute]
private string <Kind>k__BackingField;
    [JsonPropertyAttribute]
internal string Kind { get; internal set; }
    [CompilerGeneratedAttribute]
internal string get_Kind();
    [CompilerGeneratedAttribute]
internal void set_Kind(string value);
}
internal class LaunchDarkly.Common.EventOutputFormatter : object {
    private IBaseConfiguration _config;
    internal EventOutputFormatter(IBaseConfiguration config);
    internal List`1<EventOutput> MakeOutputEvents(Event[] events, EventSummary summary);
    private EventUser MaybeInlineUser(User user, bool inline);
    private string MaybeUserKey(User user, bool inline);
    private EventOutput MakeOutputEvent(Event e);
    private SummaryEventOutput MakeSummaryEvent(EventSummary summary);
}
internal class LaunchDarkly.Common.EventsCounterKey : object {
    internal string Key;
    internal Nullable`1<int> Version;
    internal Nullable`1<int> Variation;
    internal EventsCounterKey(string key, Nullable`1<int> version, Nullable`1<int> variation);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class LaunchDarkly.Common.EventsCounterValue : object {
    internal int Count;
    internal JToken FlagValue;
    internal JToken Default;
    internal EventsCounterValue(int count, JToken flagValue, JToken defaultVal);
    internal void Increment();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
internal class LaunchDarkly.Common.EventSummarizer : object {
    private EventSummary _eventsState;
    internal void SummarizeEvent(Event e);
    internal EventSummary Snapshot();
    internal void Clear();
}
internal class LaunchDarkly.Common.EventSummary : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<EventsCounterKey, EventsCounterValue> <Counters>k__BackingField;
    [CompilerGeneratedAttribute]
private long <StartDate>k__BackingField;
    [CompilerGeneratedAttribute]
private long <EndDate>k__BackingField;
    internal Dictionary`2<EventsCounterKey, EventsCounterValue> Counters { get; }
    internal long StartDate { get; private set; }
    internal long EndDate { get; private set; }
    internal bool Empty { get; }
    [CompilerGeneratedAttribute]
internal Dictionary`2<EventsCounterKey, EventsCounterValue> get_Counters();
    [CompilerGeneratedAttribute]
internal long get_StartDate();
    [CompilerGeneratedAttribute]
private void set_StartDate(long value);
    [CompilerGeneratedAttribute]
internal long get_EndDate();
    [CompilerGeneratedAttribute]
private void set_EndDate(long value);
    internal bool get_Empty();
    internal void IncrementCounter(string key, Nullable`1<int> variation, Nullable`1<int> version, JToken flagValue, JToken defaultVal);
    internal void NoteTimestamp(long timestamp);
}
internal class LaunchDarkly.Common.EventSummaryCounter : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Variation>k__BackingField;
    [CompilerGeneratedAttribute]
private JToken <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Unknown>k__BackingField;
    [JsonPropertyAttribute]
internal Nullable`1<int> Variation { get; internal set; }
    [JsonPropertyAttribute]
internal JToken Value { get; private set; }
    [JsonPropertyAttribute]
internal Nullable`1<int> Version { get; private set; }
    [JsonPropertyAttribute]
internal int Count { get; private set; }
    [JsonPropertyAttribute]
internal Nullable`1<bool> Unknown { get; private set; }
    internal EventSummaryCounter(Nullable`1<int> variation, JToken value, Nullable`1<int> version, int count);
    [CompilerGeneratedAttribute]
internal Nullable`1<int> get_Variation();
    [CompilerGeneratedAttribute]
internal void set_Variation(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
internal JToken get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(JToken value);
    [CompilerGeneratedAttribute]
internal Nullable`1<int> get_Version();
    [CompilerGeneratedAttribute]
private void set_Version(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
internal int get_Count();
    [CompilerGeneratedAttribute]
private void set_Count(int value);
    [CompilerGeneratedAttribute]
internal Nullable`1<bool> get_Unknown();
    [CompilerGeneratedAttribute]
private void set_Unknown(Nullable`1<bool> value);
}
internal class LaunchDarkly.Common.EventSummaryFlag : object {
    [CompilerGeneratedAttribute]
private JToken <Default>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<EventSummaryCounter> <Counters>k__BackingField;
    [JsonPropertyAttribute]
internal JToken Default { get; internal set; }
    [JsonPropertyAttribute]
internal List`1<EventSummaryCounter> Counters { get; internal set; }
    [CompilerGeneratedAttribute]
internal JToken get_Default();
    [CompilerGeneratedAttribute]
internal void set_Default(JToken value);
    [CompilerGeneratedAttribute]
internal List`1<EventSummaryCounter> get_Counters();
    [CompilerGeneratedAttribute]
internal void set_Counters(List`1<EventSummaryCounter> value);
}
internal class LaunchDarkly.Common.EventUser : object {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SecondaryKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IpAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Country>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FirstName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LastName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Avatar>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Email>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Anonymous>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, JToken> <Custom>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <PrivateAttrs>k__BackingField;
    [JsonPropertyAttribute]
public string Key { get; internal set; }
    [JsonPropertyAttribute]
public string SecondaryKey { get; internal set; }
    [JsonPropertyAttribute]
public string IpAddress { get; internal set; }
    [JsonPropertyAttribute]
public string Country { get; internal set; }
    [JsonPropertyAttribute]
public string FirstName { get; internal set; }
    [JsonPropertyAttribute]
public string LastName { get; internal set; }
    [JsonPropertyAttribute]
public string Name { get; internal set; }
    [JsonPropertyAttribute]
public string Avatar { get; internal set; }
    [JsonPropertyAttribute]
public string Email { get; internal set; }
    [JsonPropertyAttribute]
public Nullable`1<bool> Anonymous { get; internal set; }
    [JsonPropertyAttribute]
public Dictionary`2<string, JToken> Custom { get; internal set; }
    [JsonPropertyAttribute]
public List`1<string> PrivateAttrs { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
internal void set_Key(string value);
    [CompilerGeneratedAttribute]
public string get_SecondaryKey();
    [CompilerGeneratedAttribute]
internal void set_SecondaryKey(string value);
    [CompilerGeneratedAttribute]
public string get_IpAddress();
    [CompilerGeneratedAttribute]
internal void set_IpAddress(string value);
    [CompilerGeneratedAttribute]
public string get_Country();
    [CompilerGeneratedAttribute]
internal void set_Country(string value);
    [CompilerGeneratedAttribute]
public string get_FirstName();
    [CompilerGeneratedAttribute]
internal void set_FirstName(string value);
    [CompilerGeneratedAttribute]
public string get_LastName();
    [CompilerGeneratedAttribute]
internal void set_LastName(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
internal void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Avatar();
    [CompilerGeneratedAttribute]
internal void set_Avatar(string value);
    [CompilerGeneratedAttribute]
public string get_Email();
    [CompilerGeneratedAttribute]
internal void set_Email(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Anonymous();
    [CompilerGeneratedAttribute]
internal void set_Anonymous(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, JToken> get_Custom();
    [CompilerGeneratedAttribute]
internal void set_Custom(Dictionary`2<string, JToken> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_PrivateAttrs();
    [CompilerGeneratedAttribute]
public void set_PrivateAttrs(List`1<string> value);
    internal static EventUser FromUser(User user, IBaseConfiguration config);
}
internal class LaunchDarkly.Common.EventUserBuilder : object {
    private IBaseConfiguration _config;
    private User _user;
    private EventUser _result;
    internal EventUserBuilder(User user, IBaseConfiguration config);
    internal EventUser Build();
    private T CheckPrivateAttr(string name, T value);
}
internal class LaunchDarkly.Common.FeatureRequestEventOutput : EventOutput {
    [CompilerGeneratedAttribute]
private long <CreationDate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private EventUser <User>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserKey>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Variation>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private JToken <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private JToken <Default>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PrereqOf>k__BackingField;
    [CompilerGeneratedAttribute]
private EvaluationReason <Reason>k__BackingField;
    [JsonPropertyAttribute]
internal long CreationDate { get; internal set; }
    [JsonPropertyAttribute]
internal string Key { get; internal set; }
    [JsonPropertyAttribute]
internal EventUser User { get; internal set; }
    [JsonPropertyAttribute]
internal string UserKey { get; internal set; }
    [JsonPropertyAttribute]
internal Nullable`1<int> Variation { get; internal set; }
    [JsonPropertyAttribute]
internal Nullable`1<int> Version { get; internal set; }
    [JsonPropertyAttribute]
internal JToken Value { get; internal set; }
    [JsonPropertyAttribute]
internal JToken Default { get; internal set; }
    [JsonPropertyAttribute]
internal string PrereqOf { get; internal set; }
    [JsonPropertyAttribute]
internal EvaluationReason Reason { get; internal set; }
    [CompilerGeneratedAttribute]
internal long get_CreationDate();
    [CompilerGeneratedAttribute]
internal void set_CreationDate(long value);
    [CompilerGeneratedAttribute]
internal string get_Key();
    [CompilerGeneratedAttribute]
internal void set_Key(string value);
    [CompilerGeneratedAttribute]
internal EventUser get_User();
    [CompilerGeneratedAttribute]
internal void set_User(EventUser value);
    [CompilerGeneratedAttribute]
internal string get_UserKey();
    [CompilerGeneratedAttribute]
internal void set_UserKey(string value);
    [CompilerGeneratedAttribute]
internal Nullable`1<int> get_Variation();
    [CompilerGeneratedAttribute]
internal void set_Variation(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
internal Nullable`1<int> get_Version();
    [CompilerGeneratedAttribute]
internal void set_Version(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
internal JToken get_Value();
    [CompilerGeneratedAttribute]
internal void set_Value(JToken value);
    [CompilerGeneratedAttribute]
internal JToken get_Default();
    [CompilerGeneratedAttribute]
internal void set_Default(JToken value);
    [CompilerGeneratedAttribute]
internal string get_PrereqOf();
    [CompilerGeneratedAttribute]
internal void set_PrereqOf(string value);
    [CompilerGeneratedAttribute]
internal EvaluationReason get_Reason();
    [CompilerGeneratedAttribute]
internal void set_Reason(EvaluationReason value);
}
internal class LaunchDarkly.Common.FlushMessage : object {
}
internal class LaunchDarkly.Common.FlushPayload : object {
    [CompilerGeneratedAttribute]
private Event[] <Events>k__BackingField;
    [CompilerGeneratedAttribute]
private EventSummary <Summary>k__BackingField;
    internal Event[] Events { get; internal set; }
    internal EventSummary Summary { get; internal set; }
    [CompilerGeneratedAttribute]
internal Event[] get_Events();
    [CompilerGeneratedAttribute]
internal void set_Events(Event[] value);
    [CompilerGeneratedAttribute]
internal EventSummary get_Summary();
    [CompilerGeneratedAttribute]
internal void set_Summary(EventSummary value);
}
internal class LaunchDarkly.Common.FlushUsersMessage : object {
}
internal class LaunchDarkly.Common.HashCodeBuilder : object {
    private int value;
    public int Value { get; }
    public int get_Value();
    public HashCodeBuilder With(object o);
}
public interface LaunchDarkly.Common.IBaseConfiguration {
    public string SdkKey { get; }
    public Uri BaseUri { get; }
    public Uri EventsUri { get; }
    public Uri StreamUri { get; }
    public bool Offline { get; }
    public TimeSpan ReadTimeout { get; }
    public TimeSpan ReconnectTime { get; }
    public int EventQueueCapacity { get; }
    public TimeSpan EventQueueFrequency { get; }
    public int EventSamplingInterval { get; }
    public bool AllAttributesPrivate { get; }
    public ISet`1<string> PrivateAttributeNames { get; }
    public int UserKeysCapacity { get; }
    public TimeSpan UserKeysFlushInterval { get; }
    public bool InlineUsersInEvents { get; }
    public TimeSpan HttpClientTimeout { get; }
    public HttpClientHandler HttpClientHandler { get; }
    public abstract virtual string get_SdkKey();
    public abstract virtual Uri get_BaseUri();
    public abstract virtual Uri get_EventsUri();
    public abstract virtual Uri get_StreamUri();
    public abstract virtual bool get_Offline();
    public abstract virtual TimeSpan get_ReadTimeout();
    public abstract virtual TimeSpan get_ReconnectTime();
    public abstract virtual int get_EventQueueCapacity();
    public abstract virtual TimeSpan get_EventQueueFrequency();
    public abstract virtual int get_EventSamplingInterval();
    public abstract virtual bool get_AllAttributesPrivate();
    public abstract virtual ISet`1<string> get_PrivateAttributeNames();
    public abstract virtual int get_UserKeysCapacity();
    public abstract virtual TimeSpan get_UserKeysFlushInterval();
    public abstract virtual bool get_InlineUsersInEvents();
    public abstract virtual TimeSpan get_HttpClientTimeout();
    public abstract virtual HttpClientHandler get_HttpClientHandler();
}
internal class LaunchDarkly.Common.IdentifyEventOutput : EventOutput {
    [CompilerGeneratedAttribute]
private long <CreationDate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private EventUser <User>k__BackingField;
    [JsonPropertyAttribute]
internal long CreationDate { get; internal set; }
    [JsonPropertyAttribute]
internal string Key { get; internal set; }
    [JsonPropertyAttribute]
internal EventUser User { get; internal set; }
    [CompilerGeneratedAttribute]
internal long get_CreationDate();
    [CompilerGeneratedAttribute]
internal void set_CreationDate(long value);
    [CompilerGeneratedAttribute]
internal string get_Key();
    [CompilerGeneratedAttribute]
internal void set_Key(string value);
    [CompilerGeneratedAttribute]
internal EventUser get_User();
    [CompilerGeneratedAttribute]
internal void set_User(EventUser value);
}
internal interface LaunchDarkly.Common.IEventMessage {
}
internal interface LaunchDarkly.Common.IFlagEventProperties {
    public string Key { get; }
    public int EventVersion { get; }
    public bool TrackEvents { get; }
    public Nullable`1<long> DebugEventsUntilDate { get; }
    public abstract virtual string get_Key();
    public abstract virtual int get_EventVersion();
    public abstract virtual bool get_TrackEvents();
    public abstract virtual Nullable`1<long> get_DebugEventsUntilDate();
    public abstract virtual bool IsExperiment(EvaluationReason reason);
}
public interface LaunchDarkly.Common.ILdCommonClient {
    public Version Version { get; }
    public abstract virtual bool IsOffline();
    public abstract virtual void Flush();
    public abstract virtual Version get_Version();
}
internal class LaunchDarkly.Common.IndexEventOutput : EventOutput {
    [CompilerGeneratedAttribute]
private long <CreationDate>k__BackingField;
    [CompilerGeneratedAttribute]
private EventUser <User>k__BackingField;
    [JsonPropertyAttribute]
internal long CreationDate { get; internal set; }
    [JsonPropertyAttribute]
internal EventUser User { get; internal set; }
    [CompilerGeneratedAttribute]
internal long get_CreationDate();
    [CompilerGeneratedAttribute]
internal void set_CreationDate(long value);
    [CompilerGeneratedAttribute]
internal EventUser get_User();
    [CompilerGeneratedAttribute]
internal void set_User(EventUser value);
}
internal interface LaunchDarkly.Common.IStreamProcessor {
    public abstract virtual Task HandleMessage(StreamManager streamManager, string messageType, string messageData);
}
internal interface LaunchDarkly.Common.IUserDeduplicator {
    public Nullable`1<TimeSpan> FlushInterval { get; }
    public abstract virtual Nullable`1<TimeSpan> get_FlushInterval();
    public abstract virtual bool ProcessUser(User user);
    public abstract virtual void Flush();
}
internal class LaunchDarkly.Common.ShutdownMessage : SynchronousMessage {
}
internal class LaunchDarkly.Common.StreamManager : object {
    private static ILog Log;
    private static int UNINITIALIZED;
    private static int INITIALIZED;
    private IStreamProcessor _streamProcessor;
    private StreamProperties _streamProperties;
    private IBaseConfiguration _config;
    private ClientEnvironment _clientEnvironment;
    private TaskCompletionSource`1<bool> _initTask;
    private EventSourceCreator _esCreator;
    private ExponentialBackoffWithDecorrelation _backOff;
    private IEventSource _es;
    private int _initialized;
    public bool Initialized { get; public set; }
    public StreamManager(IStreamProcessor streamProcessor, StreamProperties streamProperties, IBaseConfiguration config, ClientEnvironment clientEnvironment, EventSourceCreator eventSourceCreator);
    private static StreamManager();
    public bool get_Initialized();
    public void set_Initialized(bool value);
    public Task`1<bool> Start();
    [AsyncStateMachineAttribute("LaunchDarkly.Common.StreamManager/<Restart>d__18")]
public void Restart();
    private IEventSource DefaultEventSourceCreator(StreamProperties streamProperties, IDictionary`2<string, string> headers);
    [AsyncStateMachineAttribute("LaunchDarkly.Common.StreamManager/<OnMessage>d__20")]
private void OnMessage(object sender, MessageReceivedEventArgs e);
    private void OnOpen(object sender, StateChangedEventArgs e);
    private void OnClose(object sender, StateChangedEventArgs e);
    private void OnComment(object sender, CommentReceivedEventArgs e);
    private void OnError(object sender, ExceptionEventArgs e);
    private sealed virtual override void System.IDisposable.Dispose();
    private void Dispose(bool disposing);
    [CompilerGeneratedAttribute]
private Task <Start>b__17_0();
}
internal class LaunchDarkly.Common.StreamProperties : object {
    [CompilerGeneratedAttribute]
private Uri <StreamUri>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpMethod <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpContent <RequestBody>k__BackingField;
    public Uri StreamUri { get; private set; }
    public HttpMethod Method { get; private set; }
    public HttpContent RequestBody { get; private set; }
    public StreamProperties(Uri uri, HttpMethod method, HttpContent body);
    [CompilerGeneratedAttribute]
public Uri get_StreamUri();
    [CompilerGeneratedAttribute]
private void set_StreamUri(Uri value);
    [CompilerGeneratedAttribute]
public HttpMethod get_Method();
    [CompilerGeneratedAttribute]
private void set_Method(HttpMethod value);
    [CompilerGeneratedAttribute]
public HttpContent get_RequestBody();
    [CompilerGeneratedAttribute]
private void set_RequestBody(HttpContent value);
}
internal class LaunchDarkly.Common.SummaryEventOutput : EventOutput {
    [CompilerGeneratedAttribute]
private long <StartDate>k__BackingField;
    [CompilerGeneratedAttribute]
private long <EndDate>k__BackingField;
    [JsonPropertyAttribute]
internal Dictionary`2<string, EventSummaryFlag> Features;
    [JsonPropertyAttribute]
internal long StartDate { get; internal set; }
    [JsonPropertyAttribute]
internal long EndDate { get; internal set; }
    [CompilerGeneratedAttribute]
internal long get_StartDate();
    [CompilerGeneratedAttribute]
internal void set_StartDate(long value);
    [CompilerGeneratedAttribute]
internal long get_EndDate();
    [CompilerGeneratedAttribute]
internal void set_EndDate(long value);
}
internal class LaunchDarkly.Common.SynchronousMessage : object {
    internal Semaphore _reply;
    internal void WaitForCompletion();
    internal void Completed();
}
internal class LaunchDarkly.Common.TestSyncMessage : SynchronousMessage {
}
internal static class LaunchDarkly.Common.Util : object {
    internal static DateTime UnixEpoch;
    private static Util();
    internal static Dictionary`2<string, string> GetRequestHeaders(IBaseConfiguration config, ClientEnvironment env);
    internal static HttpClient MakeHttpClient(IBaseConfiguration config, ClientEnvironment env);
    internal static long GetUnixTimestampMillis(DateTime dateTime);
    internal static string ExceptionMessage(Exception e);
    internal static bool IsHttpErrorRecoverable(int status);
    internal static string HttpErrorMessage(int status, string context, string recoverableMessage);
    internal static HashCodeBuilder Hash();
}
