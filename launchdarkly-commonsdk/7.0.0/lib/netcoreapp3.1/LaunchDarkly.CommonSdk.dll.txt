[IsReadOnlyAttribute]
public class LaunchDarkly.Sdk.ApplicationInfo : ValueType {
    [CompilerGeneratedAttribute]
private string <ApplicationId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApplicationName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApplicationVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApplicationVersionName>k__BackingField;
    public string ApplicationId { get; }
    public string ApplicationName { get; }
    public string ApplicationVersion { get; }
    public string ApplicationVersionName { get; }
    public ApplicationInfo(string id, string name, string version, string versionName);
    [CompilerGeneratedAttribute]
public string get_ApplicationId();
    [CompilerGeneratedAttribute]
public string get_ApplicationName();
    [CompilerGeneratedAttribute]
public string get_ApplicationVersion();
    [CompilerGeneratedAttribute]
public string get_ApplicationVersionName();
}
public class LaunchDarkly.Sdk.ApplicationInfoBuilder : object {
    private string _applicationId;
    private string _applicationName;
    private string _applicationVersion;
    private string _applicationVersionName;
    private Logger _logger;
    public ApplicationInfo Build();
    public ApplicationInfoBuilder ApplicationId(string applicationId);
    public ApplicationInfoBuilder ApplicationName(string applicationName);
    public ApplicationInfoBuilder ApplicationVersion(string applicationVersion);
    public ApplicationInfoBuilder ApplicationVersionName(string applicationVersionName);
    private static void ValidatedThenSet(string propertyName, Action`1<string> propertySetter, string input, Logger logger);
    [CompilerGeneratedAttribute]
private void <ApplicationId>b__6_0(string s);
    [CompilerGeneratedAttribute]
private void <ApplicationName>b__7_0(string s);
    [CompilerGeneratedAttribute]
private void <ApplicationVersion>b__8_0(string s);
    [CompilerGeneratedAttribute]
private void <ApplicationVersionName>b__9_0(string s);
}
[IsReadOnlyAttribute]
[JsonConverterAttribute("LaunchDarkly.Sdk.Json.LdJsonConverters/AttributeRefConverter")]
public class LaunchDarkly.Sdk.AttributeRef : ValueType {
    private string _error;
    private string _rawPath;
    private string _singlePathComponent;
    private String[] _components;
    public bool Defined { get; }
    public bool Valid { get; }
    public string Error { get; }
    public int Depth { get; }
    private AttributeRef(string error, string rawPath);
    private AttributeRef(string rawPath, string singlePathComponent, String[] components);
    public bool get_Defined();
    public bool get_Valid();
    public string get_Error();
    public int get_Depth();
    public static AttributeRef FromPath(string refPath);
    public static AttributeRef FromLiteral(string attributeName);
    public string GetComponent(int index);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(AttributeRef other);
    public virtual int GetHashCode();
    public virtual string ToString();
    private static string UnescapePath(string path);
}
[JsonConverterAttribute("LaunchDarkly.Sdk.Json.LdJsonConverters/BigSegmentsStatusConverter")]
public enum LaunchDarkly.Sdk.BigSegmentsStatus : Enum {
    public int value__;
    public static BigSegmentsStatus Healthy;
    public static BigSegmentsStatus Stale;
    public static BigSegmentsStatus NotConfigured;
    public static BigSegmentsStatus StoreError;
}
[IsReadOnlyAttribute]
[JsonConverterAttribute("LaunchDarkly.Sdk.Json.LdJsonConverters/ContextConverter")]
public class LaunchDarkly.Sdk.Context : ValueType {
    private string _error;
    internal ImmutableList`1<Context> _multiContexts;
    internal ImmutableDictionary`2<string, LdValue> _attributes;
    internal ImmutableList`1<AttributeRef> _privateAttributes;
    [CompilerGeneratedAttribute]
private bool <Defined>k__BackingField;
    [CompilerGeneratedAttribute]
private ContextKind <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Anonymous>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullyQualifiedKey>k__BackingField;
    public bool Defined { get; }
    public bool Valid { get; }
    public string Error { get; }
    public ContextKind Kind { get; }
    public string Key { get; }
    public string Name { get; }
    public bool Anonymous { get; }
    public string FullyQualifiedKey { get; }
    public bool Multiple { get; }
    public IEnumerable`1<string> OptionalAttributeNames { get; }
    public ImmutableList`1<AttributeRef> PrivateAttributes { get; }
    public ImmutableList`1<Context> MultiKindContexts { get; }
    internal Context(ContextKind kind, string key, string name, bool anonymous, ImmutableDictionary`2<string, LdValue> attributes, ImmutableList`1<AttributeRef> privateAttributes, bool allowEmptyKey);
    internal Context(ImmutableList`1<Context> contexts);
    internal Context(string error);
    [CompilerGeneratedAttribute]
public bool get_Defined();
    public bool get_Valid();
    public string get_Error();
    [CompilerGeneratedAttribute]
public ContextKind get_Kind();
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public bool get_Anonymous();
    [CompilerGeneratedAttribute]
public string get_FullyQualifiedKey();
    public bool get_Multiple();
    [IteratorStateMachineAttribute("LaunchDarkly.Sdk.Context/<get_OptionalAttributeNames>d__29")]
public IEnumerable`1<string> get_OptionalAttributeNames();
    public ImmutableList`1<AttributeRef> get_PrivateAttributes();
    public ImmutableList`1<Context> get_MultiKindContexts();
    public static Context New(string key);
    public static Context New(ContextKind kind, string key);
    public static Context NewMulti(Context[] contexts);
    public static Context FromUser(User user);
    public static ContextBuilder Builder(string key);
    public static ContextBuilder Builder(ContextKind kind, string key);
    public static ContextBuilder BuilderFromContext(Context context);
    public static ContextMultiBuilder MultiBuilder();
    public LdValue GetValue(string attributeName);
    public LdValue GetValue(AttributeRef& attributeRef);
    public bool TryGetContextByKind(ContextKind kind, Context& context);
    public virtual bool Equals(object other);
    public sealed virtual bool Equals(Context other);
    public virtual int GetHashCode();
    public virtual string ToString();
    private LdValue GetTopLevelAddressableAttributeSingleKind(string name);
    private static string EscapeKeyForFullyQualifiedKey(string key);
}
public class LaunchDarkly.Sdk.ContextBuilder : object {
    private ContextKind _kind;
    private string _key;
    private string _name;
    private bool _anonymous;
    private Builder<string, LdValue> _attributes;
    private Builder<AttributeRef> _privateAttributes;
    private bool _allowEmptyKey;
    public Context Build();
    public ContextBuilder Kind(ContextKind kind);
    public ContextBuilder Kind(string kindString);
    public ContextBuilder Key(string key);
    internal ContextBuilder AllowEmptyKey(bool value);
    public ContextBuilder Name(string name);
    public ContextBuilder Anonymous(bool anonymous);
    public ContextBuilder Set(string attributeName, LdValue value);
    public bool TrySet(string attributeName, LdValue value);
    public ContextBuilder Set(string attributeName, bool value);
    public ContextBuilder Set(string attributeName, int value);
    public ContextBuilder Set(string attributeName, double value);
    public ContextBuilder Set(string attributeName, long value);
    public ContextBuilder Set(string attributeName, string value);
    public ContextBuilder Remove(string attributeName);
    public ContextBuilder Private(String[] attributeRefs);
    public ContextBuilder Private(AttributeRef[] attributeRefs);
    internal ContextBuilder CopyFrom(Context c);
}
[IsReadOnlyAttribute]
public class LaunchDarkly.Sdk.ContextKind : ValueType {
    private static string userKind;
    public static ContextKind Default;
    public static ContextKind Multi;
    private string _value;
    public string Value { get; }
    public bool IsDefault { get; }
    public ContextKind(string stringValue);
    private static ContextKind();
    public string get_Value();
    public static ContextKind Of(string stringValue);
    public bool get_IsDefault();
    internal string Validate();
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(ContextKind other);
    public static bool op_Equality(ContextKind a, ContextKind b);
    public static bool op_Inequality(ContextKind a, ContextKind b);
}
public class LaunchDarkly.Sdk.ContextMultiBuilder : object {
    private Builder<Context> _contexts;
    public Context Build();
    public ContextMultiBuilder Add(Context context);
}
public class LaunchDarkly.Sdk.EnvReporting.ConfigLayerBuilder : object {
    private ApplicationInfo _info;
    public ConfigLayerBuilder SetAppInfo(ApplicationInfo info);
    public Layer Build();
    private static bool Validate(ApplicationInfo info);
}
public class LaunchDarkly.Sdk.EnvReporting.EnvironmentReporterBuilder : object {
    private Layer _configLayer;
    private Layer _platformLayer;
    private Layer _sdkLayer;
    private static string Unknown;
    public EnvironmentReporterBuilder SetConfigLayer(Layer config);
    public EnvironmentReporterBuilder SetPlatformLayer(Layer platform);
    public EnvironmentReporterBuilder SetSdkLayer(Layer sdkLayer);
    public IEnvironmentReporter Build();
}
public interface LaunchDarkly.Sdk.EnvReporting.IEnvironmentReporter {
    public Nullable`1<ApplicationInfo> ApplicationInfo { get; }
    public Nullable`1<OsInfo> OsInfo { get; }
    public Nullable`1<DeviceInfo> DeviceInfo { get; }
    public string Locale { get; }
    public abstract virtual Nullable`1<ApplicationInfo> get_ApplicationInfo();
    public abstract virtual Nullable`1<OsInfo> get_OsInfo();
    public abstract virtual Nullable`1<DeviceInfo> get_DeviceInfo();
    public abstract virtual string get_Locale();
}
[IsReadOnlyAttribute]
public class LaunchDarkly.Sdk.EnvReporting.Layer : ValueType {
    [CompilerGeneratedAttribute]
private Nullable`1<ApplicationInfo> <ApplicationInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<OsInfo> <OsInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DeviceInfo> <DeviceInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Locale>k__BackingField;
    public Nullable`1<ApplicationInfo> ApplicationInfo { get; }
    public Nullable`1<OsInfo> OsInfo { get; }
    public Nullable`1<DeviceInfo> DeviceInfo { get; }
    public string Locale { get; }
    public Layer(Nullable`1<ApplicationInfo> appInfo, Nullable`1<OsInfo> osInfo, Nullable`1<DeviceInfo> deviceInfo, string locale);
    [CompilerGeneratedAttribute]
public Nullable`1<ApplicationInfo> get_ApplicationInfo();
    [CompilerGeneratedAttribute]
public Nullable`1<OsInfo> get_OsInfo();
    [CompilerGeneratedAttribute]
public Nullable`1<DeviceInfo> get_DeviceInfo();
    [CompilerGeneratedAttribute]
public string get_Locale();
}
[IsReadOnlyAttribute]
public class LaunchDarkly.Sdk.EnvReporting.LayerModels.DeviceInfo : ValueType {
    [CompilerGeneratedAttribute]
private string <Model>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Manufacturer>k__BackingField;
    public string Model { get; }
    public string Manufacturer { get; }
    public DeviceInfo(string manufacturer, string model);
    [CompilerGeneratedAttribute]
public string get_Model();
    [CompilerGeneratedAttribute]
public string get_Manufacturer();
}
[IsReadOnlyAttribute]
public class LaunchDarkly.Sdk.EnvReporting.LayerModels.OsInfo : ValueType {
    [CompilerGeneratedAttribute]
private string <Family>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    public string Family { get; }
    public string Name { get; }
    public string Version { get; }
    public OsInfo(string family, string name, string version);
    [CompilerGeneratedAttribute]
public string get_Family();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_Version();
}
internal class LaunchDarkly.Sdk.EnvReporting.PrioritizedReporter : object {
    [CompilerGeneratedAttribute]
private Nullable`1<OsInfo> <OsInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DeviceInfo> <DeviceInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ApplicationInfo> <ApplicationInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Locale>k__BackingField;
    public Nullable`1<OsInfo> OsInfo { get; internal set; }
    public Nullable`1<DeviceInfo> DeviceInfo { get; internal set; }
    public Nullable`1<ApplicationInfo> ApplicationInfo { get; internal set; }
    public string Locale { get; internal set; }
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<OsInfo> get_OsInfo();
    [CompilerGeneratedAttribute]
internal void set_OsInfo(Nullable`1<OsInfo> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<DeviceInfo> get_DeviceInfo();
    [CompilerGeneratedAttribute]
internal void set_DeviceInfo(Nullable`1<DeviceInfo> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<ApplicationInfo> get_ApplicationInfo();
    [CompilerGeneratedAttribute]
internal void set_ApplicationInfo(Nullable`1<ApplicationInfo> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Locale();
    [CompilerGeneratedAttribute]
internal void set_Locale(string value);
}
internal static class LaunchDarkly.Sdk.Errors : object {
    internal static string AttrEmpty;
    internal static string AttrExtraSlash;
    internal static string AttrInvalidEscape;
    internal static string ContextUninitialized;
    internal static string ContextFromNullUser;
    internal static string ContextNoKey;
    internal static string ContextKindCannotBeKind;
    internal static string ContextKindInvalidChars;
    internal static string ContextKindMultiForSingle;
    internal static string ContextKindMultiWithNoKinds;
    internal static string ContextKindMultiDuplicates;
    internal static string JsonContextEmptyKind;
    internal static string JsonMissingProperty(string name);
    internal static string JsonWrongType(string name, LdValueType badType);
    internal static string JsonSerializeInvalidContext(string error);
}
public class LaunchDarkly.Sdk.EvaluationDetail`1 : ValueType {
    private T _value;
    private Nullable`1<int> _variationIndex;
    private EvaluationReason _reason;
    public T Value { get; }
    public Nullable`1<int> VariationIndex { get; }
    public EvaluationReason Reason { get; }
    public bool IsDefaultValue { get; }
    public EvaluationDetail`1(T value, Nullable`1<int> variationIndex, EvaluationReason reason);
    public T get_Value();
    public Nullable`1<int> get_VariationIndex();
    public EvaluationReason get_Reason();
    public bool get_IsDefaultValue();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[JsonConverterAttribute("LaunchDarkly.Sdk.Json.LdJsonConverters/EvaluationErrorKindConverter")]
public enum LaunchDarkly.Sdk.EvaluationErrorKind : Enum {
    public int value__;
    public static EvaluationErrorKind ClientNotReady;
    public static EvaluationErrorKind FlagNotFound;
    public static EvaluationErrorKind UserNotSpecified;
    public static EvaluationErrorKind MalformedFlag;
    public static EvaluationErrorKind WrongType;
    public static EvaluationErrorKind Exception;
}
[JsonConverterAttribute("LaunchDarkly.Sdk.Json.LdJsonConverters/EvaluationReasonConverter")]
public class LaunchDarkly.Sdk.EvaluationReason : ValueType {
    private static EvaluationReason _offInstance;
    private static EvaluationReason _fallthroughInstance;
    private static EvaluationReason _targetMatchInstance;
    private EvaluationReasonKind _kind;
    private Nullable`1<int> _ruleIndex;
    private string _ruleId;
    private string _prerequisiteKey;
    private Nullable`1<EvaluationErrorKind> _errorKind;
    private bool _inExperiment;
    private Nullable`1<BigSegmentsStatus> _bigSegmentsStatus;
    public EvaluationReasonKind Kind { get; }
    public Nullable`1<int> RuleIndex { get; }
    public string RuleId { get; }
    public string PrerequisiteKey { get; }
    public Nullable`1<EvaluationErrorKind> ErrorKind { get; }
    public bool InExperiment { get; }
    public Nullable`1<BigSegmentsStatus> BigSegmentsStatus { get; }
    public static EvaluationReason OffReason { get; }
    public static EvaluationReason FallthroughReason { get; }
    public static EvaluationReason TargetMatchReason { get; }
    internal EvaluationReason(EvaluationReasonKind kind, Nullable`1<int> ruleIndex, string ruleId, string prereqKey, Nullable`1<EvaluationErrorKind> errorKind, bool inExperiment, Nullable`1<BigSegmentsStatus> bigSegmentsStatus);
    private static EvaluationReason();
    public EvaluationReasonKind get_Kind();
    public Nullable`1<int> get_RuleIndex();
    public string get_RuleId();
    public string get_PrerequisiteKey();
    public Nullable`1<EvaluationErrorKind> get_ErrorKind();
    public bool get_InExperiment();
    public Nullable`1<BigSegmentsStatus> get_BigSegmentsStatus();
    public static EvaluationReason get_OffReason();
    public static EvaluationReason get_FallthroughReason();
    public static EvaluationReason get_TargetMatchReason();
    public static EvaluationReason RuleMatchReason(int ruleIndex, string ruleId);
    public static EvaluationReason PrerequisiteFailedReason(string key);
    public static EvaluationReason ErrorReason(EvaluationErrorKind errorKind);
    public EvaluationReason WithBigSegmentsStatus(Nullable`1<BigSegmentsStatus> bigSegmentsStatus);
    public EvaluationReason WithInExperiment(bool inExperiment);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[JsonConverterAttribute("LaunchDarkly.Sdk.Json.LdJsonConverters/EvaluationReasonKindConverter")]
public enum LaunchDarkly.Sdk.EvaluationReasonKind : Enum {
    public int value__;
    public static EvaluationReasonKind Off;
    public static EvaluationReasonKind Fallthrough;
    public static EvaluationReasonKind TargetMatch;
    public static EvaluationReasonKind RuleMatch;
    public static EvaluationReasonKind PrerequisiteFailed;
    public static EvaluationReasonKind Error;
}
internal class LaunchDarkly.Sdk.HashCodeBuilder : ValueType {
    private int _value;
    public int Value { get; }
    internal HashCodeBuilder(int value);
    public int get_Value();
    public HashCodeBuilder With(object o);
}
public static class LaunchDarkly.Sdk.Helpers.ValidationUtils : object {
    private static Regex ValidCharsRegex;
    private static ValidationUtils();
    public static string ValidateStringValue(string s);
    public static string SanitizeSpaces(string s);
}
[DefaultMemberAttribute("Item")]
internal class LaunchDarkly.Sdk.Internal.Helpers.LdValueDictionaryConverter`2 : ValueType {
    private IDictionary`2<string, T> _source;
    private Func`2<T, U> _converter;
    public U Item { get; }
    public IEnumerable`1<string> Keys { get; }
    public IEnumerable`1<U> Values { get; }
    public int Count { get; }
    internal LdValueDictionaryConverter`2(IDictionary`2<string, T> source, Func`2<T, U> converter);
    public sealed virtual U get_Item(string key);
    public sealed virtual IEnumerable`1<string> get_Keys();
    public sealed virtual IEnumerable`1<U> get_Values();
    public sealed virtual int get_Count();
    public sealed virtual bool ContainsKey(string key);
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, U>> GetEnumerator();
    public sealed virtual bool TryGetValue(string key, U& value);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
internal class LaunchDarkly.Sdk.Internal.Helpers.LdValueListConverter`2 : ValueType {
    private IList`1<T> _source;
    private Func`2<T, U> _converter;
    public U Item { get; }
    public int Count { get; }
    internal LdValueListConverter`2(IList`1<T> source, Func`2<T, U> converter);
    public sealed virtual U get_Item(int index);
    public sealed virtual int get_Count();
    public sealed virtual IEnumerator`1<U> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual string ToString();
}
public interface LaunchDarkly.Sdk.IUserBuilder {
    public abstract virtual User Build();
    public abstract virtual IUserBuilder Key(string key);
    public abstract virtual IUserBuilderCanMakeAttributePrivate IPAddress(string ipAddress);
    public abstract virtual IUserBuilderCanMakeAttributePrivate Country(string country);
    public abstract virtual IUserBuilderCanMakeAttributePrivate FirstName(string firstName);
    public abstract virtual IUserBuilderCanMakeAttributePrivate LastName(string lastName);
    public abstract virtual IUserBuilderCanMakeAttributePrivate Name(string name);
    public abstract virtual IUserBuilderCanMakeAttributePrivate Avatar(string avatar);
    public abstract virtual IUserBuilderCanMakeAttributePrivate Email(string email);
    public abstract virtual IUserBuilder Anonymous(bool anonymous);
    public abstract virtual IUserBuilderCanMakeAttributePrivate Custom(string name, LdValue value);
    public abstract virtual IUserBuilderCanMakeAttributePrivate Custom(string name, bool value);
    public abstract virtual IUserBuilderCanMakeAttributePrivate Custom(string name, string value);
    public abstract virtual IUserBuilderCanMakeAttributePrivate Custom(string name, int value);
    public abstract virtual IUserBuilderCanMakeAttributePrivate Custom(string name, long value);
    public abstract virtual IUserBuilderCanMakeAttributePrivate Custom(string name, float value);
    public abstract virtual IUserBuilderCanMakeAttributePrivate Custom(string name, double value);
}
public interface LaunchDarkly.Sdk.IUserBuilderCanMakeAttributePrivate {
    public abstract virtual IUserBuilder AsPrivateAttribute();
}
public interface LaunchDarkly.Sdk.Json.IJsonSerializable {
}
public static class LaunchDarkly.Sdk.Json.LdJsonConverters : object {
    private static void RequireToken(Utf8JsonReader& reader, JsonTokenType expectedType, string propName);
    private static bool ConsumeNull(Utf8JsonReader& reader);
    private static bool NextProperty(Utf8JsonReader& reader, String& name);
}
public static class LaunchDarkly.Sdk.Json.LdJsonSerialization : object {
    public static string SerializeObject(T instance);
    public static Byte[] SerializeObjectToUtf8Bytes(T instance);
    public static T DeserializeObject(string json);
}
[JsonConverterAttribute("LaunchDarkly.Sdk.Json.LdJsonConverters/LdValueConverter")]
public class LaunchDarkly.Sdk.LdValue : ValueType {
    private static LdValue _nullInstance;
    private LdValueType _type;
    private bool _boolValue;
    private double _doubleValue;
    private string _stringValue;
    private ImmutableList`1<LdValue> _arrayValue;
    private ImmutableDictionary`2<string, LdValue> _objectValue;
    public static LdValue Null { get; }
    public LdValueType Type { get; }
    public bool IsNull { get; }
    public bool IsNumber { get; }
    public bool IsInt { get; }
    public bool IsString { get; }
    public bool AsBool { get; }
    public string AsString { get; }
    public int AsInt { get; }
    public long AsLong { get; }
    public float AsFloat { get; }
    public double AsDouble { get; }
    public ImmutableList`1<LdValue> List { get; }
    public ImmutableDictionary`2<string, LdValue> Dictionary { get; }
    public int Count { get; }
    private LdValue(LdValueType type, bool boolValue, double doubleValue, string stringValue);
    private LdValue(ImmutableList`1<LdValue> list);
    private LdValue(ImmutableDictionary`2<string, LdValue> dict);
    private static LdValue();
    public static LdValue get_Null();
    public static LdValue Of(bool value);
    public static LdValue Of(int value);
    public static LdValue Of(long value);
    public static LdValue Of(float value);
    public static LdValue Of(double value);
    public static LdValue Of(string value);
    public static LdValue ArrayFrom(IEnumerable`1<LdValue> values);
    public static LdValue ArrayOf(LdValue[] values);
    public static ArrayBuilder BuildArray();
    public static LdValue ObjectFrom(IReadOnlyDictionary`2<string, LdValue> dictionary);
    public static ObjectBuilder BuildObject();
    public static LdValue Parse(string jsonString);
    public LdValueType get_Type();
    public bool get_IsNull();
    public bool get_IsNumber();
    public bool get_IsInt();
    public bool get_IsString();
    public bool get_AsBool();
    public string get_AsString();
    public int get_AsInt();
    public long get_AsLong();
    public float get_AsFloat();
    public double get_AsDouble();
    public ImmutableList`1<LdValue> get_List();
    public ImmutableDictionary`2<string, LdValue> get_Dictionary();
    public int get_Count();
    public LdValue Get(int index);
    public LdValue Get(string key);
    public IReadOnlyList`1<T> AsList(Converter`1<T> desiredType);
    public IReadOnlyDictionary`2<string, T> AsDictionary(Converter`1<T> desiredType);
    public string ToJsonString();
    public virtual bool Equals(object o);
    public sealed virtual bool Equals(LdValue o);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static bool op_Equality(LdValue a, LdValue b);
    public static bool op_Inequality(LdValue a, LdValue b);
}
public enum LaunchDarkly.Sdk.LdValueType : Enum {
    public int value__;
    public static LdValueType Null;
    public static LdValueType Bool;
    public static LdValueType Number;
    public static LdValueType String;
    public static LdValueType Array;
    public static LdValueType Object;
}
[JsonConverterAttribute("LaunchDarkly.Sdk.Json.LdJsonConverters/UnixMillisecondTimeConverter")]
public class LaunchDarkly.Sdk.UnixMillisecondTime : ValueType {
    public static DateTime Epoch;
    [CompilerGeneratedAttribute]
private long <Value>k__BackingField;
    public long Value { get; }
    public DateTime AsDateTime { get; }
    public static UnixMillisecondTime Now { get; }
    private UnixMillisecondTime(long value);
    private static UnixMillisecondTime();
    [CompilerGeneratedAttribute]
public long get_Value();
    public DateTime get_AsDateTime();
    public static UnixMillisecondTime get_Now();
    public static UnixMillisecondTime OfMillis(long millis);
    public static UnixMillisecondTime FromDateTime(DateTime dateTime);
    public UnixMillisecondTime PlusMillis(long millis);
    public sealed virtual bool Equals(UnixMillisecondTime other);
    public sealed virtual int CompareTo(UnixMillisecondTime other);
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
    public static bool op_Equality(UnixMillisecondTime a, UnixMillisecondTime b);
    public static bool op_Inequality(UnixMillisecondTime a, UnixMillisecondTime b);
    public static bool op_LessThan(UnixMillisecondTime a, UnixMillisecondTime b);
    public static bool op_LessThanOrEqual(UnixMillisecondTime a, UnixMillisecondTime b);
    public static bool op_GreaterThan(UnixMillisecondTime a, UnixMillisecondTime b);
    public static bool op_GreaterThanOrEqual(UnixMillisecondTime a, UnixMillisecondTime b);
}
[JsonConverterAttribute("LaunchDarkly.Sdk.Json.LdJsonConverters/UserConverter")]
public class LaunchDarkly.Sdk.User : object {
    private string _key;
    private string _ip;
    private string _country;
    private string _firstName;
    private string _lastName;
    private string _name;
    private string _avatar;
    private string _email;
    private bool _anonymous;
    internal ImmutableDictionary`2<string, LdValue> _custom;
    internal ImmutableHashSet`1<string> _privateAttributeNames;
    public string Key { get; }
    public string IPAddress { get; }
    public string Country { get; }
    public string FirstName { get; }
    public string LastName { get; }
    public string Name { get; }
    public string Avatar { get; }
    public string Email { get; }
    public bool Anonymous { get; }
    public IImmutableDictionary`2<string, LdValue> Custom { get; }
    public IImmutableSet`1<string> PrivateAttributeNames { get; }
    private User(string key);
    public User(string key, string secondary, string ip, string country, string firstName, string lastName, string name, string avatar, string email, Nullable`1<bool> anonymous, ImmutableDictionary`2<string, LdValue> custom, ImmutableHashSet`1<string> privateAttributeNames);
    public string get_Key();
    public string get_IPAddress();
    public string get_Country();
    public string get_FirstName();
    public string get_LastName();
    public string get_Name();
    public string get_Avatar();
    public string get_Email();
    public bool get_Anonymous();
    public IImmutableDictionary`2<string, LdValue> get_Custom();
    public IImmutableSet`1<string> get_PrivateAttributeNames();
    public static IUserBuilder Builder(string key);
    public static IUserBuilder Builder(User fromUser);
    public static User WithKey(string key);
    public LdValue GetAttribute(UserAttribute attribute);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(User u);
    public virtual int GetHashCode();
}
public class LaunchDarkly.Sdk.UserAttribute : ValueType {
    [CompilerGeneratedAttribute]
private string <AttributeName>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<User, LdValue> <BuiltInGetter>k__BackingField;
    public static UserAttribute Key;
    public static UserAttribute IPAddress;
    public static UserAttribute Email;
    public static UserAttribute Name;
    public static UserAttribute Avatar;
    public static UserAttribute FirstName;
    public static UserAttribute LastName;
    public static UserAttribute Country;
    public static UserAttribute Anonymous;
    private static Dictionary`2<string, UserAttribute> _builtins;
    internal static UserAttribute[] OptionalStringAttrs;
    public string AttributeName { get; }
    internal Func`2<User, LdValue> BuiltInGetter { get; }
    public bool BuiltIn { get; }
    private UserAttribute(string name, Func`2<User, LdValue> builtInGetter);
    private static UserAttribute();
    [CompilerGeneratedAttribute]
public string get_AttributeName();
    [CompilerGeneratedAttribute]
internal Func`2<User, LdValue> get_BuiltInGetter();
    public bool get_BuiltIn();
    public static UserAttribute ForName(string name);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(UserAttribute a);
    public static bool op_Equality(UserAttribute a, UserAttribute b);
    public static bool op_Inequality(UserAttribute a, UserAttribute b);
    public virtual int GetHashCode();
    public virtual string ToString();
}
internal class LaunchDarkly.Sdk.UserBuilder : object {
    private string _key;
    private string _ipAddress;
    private string _country;
    private string _firstName;
    private string _lastName;
    private string _name;
    private string _avatar;
    private string _email;
    private bool _anonymous;
    private Builder<string, LdValue> _custom;
    private Builder<string> _privateAttributeNames;
    internal UserBuilder(string key);
    internal UserBuilder(User fromUser);
    public sealed virtual User Build();
    public sealed virtual IUserBuilder Key(string key);
    public sealed virtual IUserBuilderCanMakeAttributePrivate IPAddress(string ipAddress);
    public sealed virtual IUserBuilderCanMakeAttributePrivate Country(string country);
    public sealed virtual IUserBuilderCanMakeAttributePrivate FirstName(string firstName);
    public sealed virtual IUserBuilderCanMakeAttributePrivate LastName(string lastName);
    public sealed virtual IUserBuilderCanMakeAttributePrivate Name(string name);
    public sealed virtual IUserBuilderCanMakeAttributePrivate Avatar(string avatar);
    public sealed virtual IUserBuilderCanMakeAttributePrivate Email(string email);
    public sealed virtual IUserBuilder Anonymous(bool anonymous);
    public sealed virtual IUserBuilderCanMakeAttributePrivate Custom(string name, LdValue value);
    public sealed virtual IUserBuilderCanMakeAttributePrivate Custom(string name, bool value);
    public sealed virtual IUserBuilderCanMakeAttributePrivate Custom(string name, string value);
    public sealed virtual IUserBuilderCanMakeAttributePrivate Custom(string name, int value);
    public sealed virtual IUserBuilderCanMakeAttributePrivate Custom(string name, long value);
    public sealed virtual IUserBuilderCanMakeAttributePrivate Custom(string name, float value);
    public sealed virtual IUserBuilderCanMakeAttributePrivate Custom(string name, double value);
    private IUserBuilderCanMakeAttributePrivate CanMakeAttributePrivate(string attrName);
    internal IUserBuilder AddPrivateAttribute(string attrName);
}
internal class LaunchDarkly.Sdk.UserBuilderCanMakeAttributePrivate : object {
    private UserBuilder _builder;
    private string _attrName;
    internal UserBuilderCanMakeAttributePrivate(UserBuilder builder, string attrName);
    public sealed virtual User Build();
    public sealed virtual IUserBuilder Key(string key);
    public sealed virtual IUserBuilderCanMakeAttributePrivate IPAddress(string ipAddress);
    public sealed virtual IUserBuilderCanMakeAttributePrivate Country(string country);
    public sealed virtual IUserBuilderCanMakeAttributePrivate FirstName(string firstName);
    public sealed virtual IUserBuilderCanMakeAttributePrivate LastName(string lastName);
    public sealed virtual IUserBuilderCanMakeAttributePrivate Name(string name);
    public sealed virtual IUserBuilderCanMakeAttributePrivate Avatar(string avatar);
    public sealed virtual IUserBuilderCanMakeAttributePrivate Email(string email);
    public sealed virtual IUserBuilder Anonymous(bool anonymous);
    public sealed virtual IUserBuilderCanMakeAttributePrivate Custom(string name, LdValue value);
    public sealed virtual IUserBuilderCanMakeAttributePrivate Custom(string name, bool value);
    public sealed virtual IUserBuilderCanMakeAttributePrivate Custom(string name, string value);
    public sealed virtual IUserBuilderCanMakeAttributePrivate Custom(string name, int value);
    public sealed virtual IUserBuilderCanMakeAttributePrivate Custom(string name, long value);
    public sealed virtual IUserBuilderCanMakeAttributePrivate Custom(string name, float value);
    public sealed virtual IUserBuilderCanMakeAttributePrivate Custom(string name, double value);
    public sealed virtual IUserBuilder AsPrivateAttribute();
}
