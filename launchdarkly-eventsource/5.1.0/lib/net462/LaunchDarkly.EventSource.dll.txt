internal static class LaunchDarkly.EventSource.AsyncHelpers : object {
    [AsyncStateMachineAttribute("LaunchDarkly.EventSource.AsyncHelpers/<DoWithTimeout>d__0`1")]
internal static Task`1<T> DoWithTimeout(TimeSpan timeout, CancellationToken cancellationToken, Func`2<CancellationToken, Task`1<T>> taskFn);
    internal static Task`1<T> AllowCancellation(Task`1<T> originalTask, CancellationToken cancellationToken);
    internal static void SuppressExceptions(Task task);
}
internal class LaunchDarkly.EventSource.ByteArrayLineScanner : ValueType {
    private Byte[] _buffer;
    private int _capacity;
    private int _count;
    private int _startPos;
    private MemoryStream _partialLine;
    public Byte[] Buffer { get; }
    public int Capacity { get; }
    public int Count { get; }
    public int Available { get; }
    public ByteArrayLineScanner(int capacity);
    public Byte[] get_Buffer();
    public int get_Capacity();
    public int get_Count();
    public int get_Available();
    public void AddedBytes(int count);
    public bool ScanToEndOfLine(Utf8ByteSpan& lineOut);
}
public class LaunchDarkly.EventSource.CommentReceivedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <Comment>k__BackingField;
    public string Comment { get; }
    public CommentReceivedEventArgs(string comment);
    [CompilerGeneratedAttribute]
public string get_Comment();
}
public class LaunchDarkly.EventSource.Configuration : object {
    public static TimeSpan DefaultInitialRetryDelay;
    public static TimeSpan DefaultMaxRetryDelay;
    public static TimeSpan DefaultResponseStartTimeout;
    [ObsoleteAttribute("Use DefaultResponseStartTimeout")]
public static TimeSpan DefaultConnectionTimeout;
    public static TimeSpan DefaultReadTimeout;
    public static TimeSpan DefaultBackoffResetThreshold;
    public static string DefaultLoggerName;
    [CompilerGeneratedAttribute]
private TimeSpan <BackoffResetThreshold>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpClient <HttpClient>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpMessageHandler <HttpMessageHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<HttpRequestMessage> <HttpRequestModifier>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <InitialRetryDelay>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LastEventId>k__BackingField;
    [CompilerGeneratedAttribute]
private Logger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <MaxRetryDelay>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpMethod <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreferDataAsUtf8Bytes>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <ReadTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<HttpContent> <RequestBodyFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <RequestHeaders>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <ResponseStartTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <Uri>k__BackingField;
    public TimeSpan BackoffResetThreshold { get; }
    [ObsoleteAttribute("Use ResponseStartTimeout")]
public TimeSpan ConnectionTimeout { get; }
    public HttpClient HttpClient { get; }
    public HttpMessageHandler HttpMessageHandler { get; }
    public Action`1<HttpRequestMessage> HttpRequestModifier { get; }
    public TimeSpan InitialRetryDelay { get; }
    public string LastEventId { get; }
    public Logger Logger { get; }
    public TimeSpan MaxRetryDelay { get; }
    public HttpMethod Method { get; }
    public bool PreferDataAsUtf8Bytes { get; }
    public TimeSpan ReadTimeout { get; }
    public Func`1<HttpContent> RequestBodyFactory { get; }
    public IDictionary`2<string, string> RequestHeaders { get; }
    public TimeSpan ResponseStartTimeout { get; }
    public Uri Uri { get; }
    internal Configuration(ConfigurationBuilder builder);
    private static Configuration();
    [CompilerGeneratedAttribute]
public TimeSpan get_BackoffResetThreshold();
    public TimeSpan get_ConnectionTimeout();
    [CompilerGeneratedAttribute]
public HttpClient get_HttpClient();
    [CompilerGeneratedAttribute]
public HttpMessageHandler get_HttpMessageHandler();
    [CompilerGeneratedAttribute]
public Action`1<HttpRequestMessage> get_HttpRequestModifier();
    [CompilerGeneratedAttribute]
public TimeSpan get_InitialRetryDelay();
    [CompilerGeneratedAttribute]
public string get_LastEventId();
    [CompilerGeneratedAttribute]
public Logger get_Logger();
    [CompilerGeneratedAttribute]
public TimeSpan get_MaxRetryDelay();
    [CompilerGeneratedAttribute]
public HttpMethod get_Method();
    [CompilerGeneratedAttribute]
public bool get_PreferDataAsUtf8Bytes();
    [CompilerGeneratedAttribute]
public TimeSpan get_ReadTimeout();
    [CompilerGeneratedAttribute]
public Func`1<HttpContent> get_RequestBodyFactory();
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_RequestHeaders();
    [CompilerGeneratedAttribute]
public TimeSpan get_ResponseStartTimeout();
    [CompilerGeneratedAttribute]
public Uri get_Uri();
    public static ConfigurationBuilder Builder(Uri uri);
}
public class LaunchDarkly.EventSource.ConfigurationBuilder : object {
    internal Uri _uri;
    internal TimeSpan _initialRetryDelay;
    internal TimeSpan _backoffResetThreshold;
    internal string _lastEventId;
    internal ILogAdapter _logAdapter;
    internal Logger _logger;
    internal IDictionary`2<string, string> _requestHeaders;
    internal HttpMessageHandler _httpMessageHandler;
    internal HttpClient _httpClient;
    internal TimeSpan _maxRetryDelay;
    internal HttpMethod _method;
    internal bool _preferDataAsUtf8Bytes;
    internal TimeSpan _readTimeout;
    internal Func`1<HttpContent> _requestBodyFactory;
    internal TimeSpan _responseStartTimeout;
    internal Action`1<HttpRequestMessage> _httpRequestModifier;
    internal ConfigurationBuilder(Uri uri);
    public Configuration Build();
    [ObsoleteAttribute("Use ResponseStartTimeout")]
public ConfigurationBuilder ConnectionTimeout(TimeSpan responseStartTimeout);
    public ConfigurationBuilder HttpRequestModifier(Action`1<HttpRequestMessage> httpRequestModifier);
    public ConfigurationBuilder InitialRetryDelay(TimeSpan initialRetryDelay);
    public ConfigurationBuilder MaxRetryDelay(TimeSpan maxRetryDelay);
    public ConfigurationBuilder BackoffResetThreshold(TimeSpan backoffResetThreshold);
    public ConfigurationBuilder ResponseStartTimeout(TimeSpan responseStartTimeout);
    public ConfigurationBuilder ReadTimeout(TimeSpan readTimeout);
    public ConfigurationBuilder LastEventId(string lastEventId);
    public ConfigurationBuilder LogAdapter(ILogAdapter logAdapter);
    public ConfigurationBuilder Logger(Logger logger);
    public ConfigurationBuilder PreferDataAsUtf8Bytes(bool preferDataAsUtf8Bytes);
    public ConfigurationBuilder RequestHeaders(IDictionary`2<string, string> headers);
    public ConfigurationBuilder RequestHeader(string name, string value);
    public ConfigurationBuilder HttpMessageHandler(HttpMessageHandler handler);
    public ConfigurationBuilder HttpClient(HttpClient client);
    public ConfigurationBuilder Method(HttpMethod method);
    public ConfigurationBuilder RequestBodyFactory(Func`1<HttpContent> factory);
    public ConfigurationBuilder RequestBody(string bodyString, string contentType);
    private static TimeSpan TimeSpanCanBeInfinite(TimeSpan t);
    private static TimeSpan FiniteTimeSpan(TimeSpan t);
}
internal static class LaunchDarkly.EventSource.Constants : object {
    internal static string AcceptHttpHeader;
    internal static string LastEventIdHttpHeader;
    internal static string EventStreamContentType;
    internal static string RetryField;
    internal static string IdField;
    internal static string EventField;
    internal static string DataField;
    internal static string MessageField;
    private static Constants();
}
internal static class LaunchDarkly.EventSource.EventParser : object {
    internal static Result ParseLineString(string line);
    public static Result ParseLineUtf8Bytes(Utf8ByteSpan line);
}
public class LaunchDarkly.EventSource.EventSource : object {
    private Configuration _configuration;
    private HttpClient _httpClient;
    private Logger _logger;
    private List`1<string> _eventDataStringBuffer;
    private MemoryStream _eventDataUtf8ByteBuffer;
    private string _eventName;
    private string _lastEventId;
    private TimeSpan _retryDelay;
    private ExponentialBackoffWithDecorrelation _backOff;
    private CancellationTokenSource _currentRequestToken;
    private Nullable`1<DateTime> _lastSuccessfulConnectionTime;
    private ReadyState _readyState;
    [CompilerGeneratedAttribute]
private EventHandler`1<StateChangedEventArgs> Opened;
    [CompilerGeneratedAttribute]
private EventHandler`1<StateChangedEventArgs> Closed;
    [CompilerGeneratedAttribute]
private EventHandler`1<MessageReceivedEventArgs> MessageReceived;
    [CompilerGeneratedAttribute]
private EventHandler`1<CommentReceivedEventArgs> CommentReceived;
    [CompilerGeneratedAttribute]
private EventHandler`1<ExceptionEventArgs> Error;
    [CompilerGeneratedAttribute]
private TimeSpan <BackOffDelay>k__BackingField;
    public ReadyState ReadyState { get; private set; }
    internal TimeSpan BackOffDelay { get; private set; }
    public EventSource(Configuration configuration);
    public EventSource(Uri uri);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Opened(EventHandler`1<StateChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Opened(EventHandler`1<StateChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Closed(EventHandler`1<StateChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Closed(EventHandler`1<StateChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_MessageReceived(EventHandler`1<MessageReceivedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_MessageReceived(EventHandler`1<MessageReceivedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_CommentReceived(EventHandler`1<CommentReceivedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CommentReceived(EventHandler`1<CommentReceivedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Error(EventHandler`1<ExceptionEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Error(EventHandler`1<ExceptionEventArgs> value);
    public sealed virtual ReadyState get_ReadyState();
    private void set_ReadyState(ReadyState value);
    [CompilerGeneratedAttribute]
internal TimeSpan get_BackOffDelay();
    [CompilerGeneratedAttribute]
private void set_BackOffDelay(TimeSpan value);
    [AsyncStateMachineAttribute("LaunchDarkly.EventSource.EventSource/<StartAsync>d__36")]
public sealed virtual Task StartAsync();
    [AsyncStateMachineAttribute("LaunchDarkly.EventSource.EventSource/<MaybeWaitWithBackOff>d__37")]
private Task MaybeWaitWithBackOff();
    public sealed virtual void Restart(bool resetBackoffDelay);
    public sealed virtual void Close();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    private HttpClient CreateHttpClient();
    private void CancelCurrentRequest();
    internal virtual EventSourceService GetEventSourceService(Configuration configuration);
    [AsyncStateMachineAttribute("LaunchDarkly.EventSource.EventSource/<ConnectToEventSourceAsync>d__45")]
private Task ConnectToEventSourceAsync(CancellationToken cancellationToken);
    private void Close(ReadyState state);
    private void ProcessResponseLineString(string content);
    private void ProcessResponseLineUtf8(Utf8ByteSpan content);
    private void SetReadyState(ReadyState state, Action`1<StateChangedEventArgs> action);
    private void HandleParsedLine(Result result);
    private void DispatchEvent();
    private void OnOpened(StateChangedEventArgs e);
    private void OnClosed(StateChangedEventArgs e);
    private void OnMessageReceived(MessageReceivedEventArgs e);
    private void OnCommentReceived(CommentReceivedEventArgs e);
    private void OnError(ExceptionEventArgs e);
    [CompilerGeneratedAttribute]
private void <ConnectToEventSourceAsync>b__45_0(object o, EventArgs e);
    [CompilerGeneratedAttribute]
private void <ConnectToEventSourceAsync>b__45_1(object o, EventArgs e);
}
internal class LaunchDarkly.EventSource.EventSourceService : object {
    private static int Utf8ReadBufferSize;
    private Configuration _configuration;
    private HttpClient _httpClient;
    private Logger _logger;
    private static string UserAgentProduct;
    internal static string UserAgentVersion;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs> ConnectionOpened;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs> ConnectionClosed;
    internal EventSourceService(Configuration configuration, HttpClient httpClient, Logger logger);
    private static EventSourceService();
    [CompilerGeneratedAttribute]
public void add_ConnectionOpened(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ConnectionOpened(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public void add_ConnectionClosed(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ConnectionClosed(EventHandler`1<EventArgs> value);
    [AsyncStateMachineAttribute("LaunchDarkly.EventSource.EventSourceService/<GetDataAsync>d__13")]
public Task GetDataAsync(Action`1<string> processResponseLineString, Action`1<Utf8ByteSpan> processResponseLineUTF8, string lastEventId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("LaunchDarkly.EventSource.EventSourceService/<ConnectToEventSourceApi>d__14")]
private Task ConnectToEventSourceApi(Action`1<string> processResponseLineString, Action`1<Utf8ByteSpan> processResponseLineUTF8, string lastEventId, CancellationToken cancellationToken);
    private Encoding DetectEncoding(HttpResponseMessage response);
    [AsyncStateMachineAttribute("LaunchDarkly.EventSource.EventSourceService/<ProcessResponseFromReaderAsync>d__16")]
protected virtual Task ProcessResponseFromReaderAsync(Action`1<string> processResponse, StreamReader reader, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("LaunchDarkly.EventSource.EventSourceService/<ProcessResponseFromUtf8StreamAsync>d__17")]
protected Task ProcessResponseFromUtf8StreamAsync(Action`1<Utf8ByteSpan> processResponseLine, Stream stream, CancellationToken cancellationToken);
    private HttpRequestMessage CreateHttpRequestMessage(Uri uri, string lastEventId);
    private void ValidateResponse(HttpResponseMessage response);
    private void OnConnectionOpened();
    private void OnConnectionClosed();
}
public class LaunchDarkly.EventSource.EventSourceServiceCancelledException : Exception {
    public EventSourceServiceCancelledException(string message);
    public EventSourceServiceCancelledException(string message, Exception innerException);
}
public class LaunchDarkly.EventSource.EventSourceServiceUnsuccessfulResponseException : EventSourceServiceCancelledException {
    [CompilerGeneratedAttribute]
private int <StatusCode>k__BackingField;
    public int StatusCode { get; }
    public EventSourceServiceUnsuccessfulResponseException(int statusCode);
    [CompilerGeneratedAttribute]
public int get_StatusCode();
}
public class LaunchDarkly.EventSource.ExceptionEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    public Exception Exception { get; }
    public ExceptionEventArgs(Exception ex);
    [CompilerGeneratedAttribute]
public Exception get_Exception();
}
internal class LaunchDarkly.EventSource.ExponentialBackoffWithDecorrelation : object {
    private TimeSpan _minimumDelay;
    private TimeSpan _maximumDelay;
    private Random _jitterer;
    private int _reconnectAttempts;
    public ExponentialBackoffWithDecorrelation(TimeSpan minimumDelay, TimeSpan maximumDelay);
    public TimeSpan GetNextBackOff();
    internal int GetMaximumMillisecondsForAttempt(int attempt);
    public int GetReconnectAttemptCount();
    public void ResetReconnectAttemptCount();
    [ObsoleteAttribute("IncrementReconnectAttemptCount is deprecated, use GetNextBackOff instead.")]
public void IncrementReconnectAttemptCount();
}
public interface LaunchDarkly.EventSource.IEventSource {
    public ReadyState ReadyState { get; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_Opened(EventHandler`1<StateChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Opened(EventHandler`1<StateChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Closed(EventHandler`1<StateChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Closed(EventHandler`1<StateChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_MessageReceived(EventHandler`1<MessageReceivedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_MessageReceived(EventHandler`1<MessageReceivedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_CommentReceived(EventHandler`1<CommentReceivedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_CommentReceived(EventHandler`1<CommentReceivedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Error(EventHandler`1<ExceptionEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Error(EventHandler`1<ExceptionEventArgs> value);
    public abstract virtual ReadyState get_ReadyState();
    public abstract virtual Task StartAsync();
    public abstract virtual void Restart(bool resetBackoffDelay);
    public abstract virtual void Close();
}
public class LaunchDarkly.EventSource.MessageEvent : ValueType {
    public static string DefaultName;
    private string _name;
    private string _dataString;
    private Utf8ByteSpan _dataUtf8Bytes;
    private string _lastEventId;
    private Uri _origin;
    public string Name { get; }
    public string Data { get; }
    public Utf8ByteSpan DataUtf8Bytes { get; }
    public string LastEventId { get; }
    public Uri Origin { get; }
    public bool IsDataUtf8Bytes { get; }
    public MessageEvent(string name, string data, string lastEventId, Uri origin);
    public MessageEvent(string name, Utf8ByteSpan dataUtf8Bytes, string lastEventId, Uri origin);
    public MessageEvent(string name, string data, Uri origin);
    public string get_Name();
    public string get_Data();
    public Utf8ByteSpan get_DataUtf8Bytes();
    public string get_LastEventId();
    public Uri get_Origin();
    public bool get_IsDataUtf8Bytes();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class LaunchDarkly.EventSource.MessageReceivedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private MessageEvent <Message>k__BackingField;
    public MessageEvent Message { get; }
    public string EventName { get; }
    public MessageReceivedEventArgs(MessageEvent message);
    [CompilerGeneratedAttribute]
public MessageEvent get_Message();
    public string get_EventName();
}
public class LaunchDarkly.EventSource.ReadTimeoutException : Exception {
    public string Message { get; }
    public virtual string get_Message();
}
public enum LaunchDarkly.EventSource.ReadyState : Enum {
    public int value__;
    public static ReadyState Raw;
    public static ReadyState Connecting;
    public static ReadyState Open;
    public static ReadyState Closed;
    public static ReadyState Shutdown;
}
[GeneratedCodeAttribute("Microsoft.Build.Tasks.StronglyTypedResourceBuilder", "15.1.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class LaunchDarkly.EventSource.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ErrorAlreadyStarted { get; }
    internal static string ErrorEmptyResponse { get; }
    internal static string ErrorHttpStatus { get; }
    internal static string ErrorReadTimeout { get; }
    internal static string ErrorWrongContentType { get; }
    internal static string ErrorWrongEncoding { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ErrorAlreadyStarted();
    internal static string get_ErrorEmptyResponse();
    internal static string get_ErrorHttpStatus();
    internal static string get_ErrorReadTimeout();
    internal static string get_ErrorWrongContentType();
    internal static string get_ErrorWrongEncoding();
}
public class LaunchDarkly.EventSource.StateChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private ReadyState <ReadyState>k__BackingField;
    public ReadyState ReadyState { get; }
    public StateChangedEventArgs(ReadyState readyState);
    [CompilerGeneratedAttribute]
public ReadyState get_ReadyState();
}
public class LaunchDarkly.EventSource.Utf8ByteSpan : ValueType {
    [CompilerGeneratedAttribute]
private Byte[] <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Offset>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    public Byte[] Data { get; }
    public int Offset { get; }
    public int Length { get; }
    public Utf8ByteSpan(Byte[] data, int offset, int length);
    public Utf8ByteSpan(string s);
    [CompilerGeneratedAttribute]
public Byte[] get_Data();
    [CompilerGeneratedAttribute]
public int get_Offset();
    [CompilerGeneratedAttribute]
public int get_Length();
    public string GetString();
    public bool Equals(Utf8ByteSpan other);
    public bool Equals(string s);
}
