[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
public class LaunchDarkly.JsonStream.AnyValue : ValueType {
    [CompilerGeneratedAttribute]
private ValueType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <BoolValue>k__BackingField;
    [CompilerGeneratedAttribute]
private double <NumberValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StringValue>k__BackingField;
    [CompilerGeneratedAttribute]
private ArrayReader <ArrayValue>k__BackingField;
    [CompilerGeneratedAttribute]
private ObjectReader <ObjectValue>k__BackingField;
    public ValueType Type { get; }
    public bool BoolValue { get; }
    public double NumberValue { get; }
    public string StringValue { get; }
    public ArrayReader ArrayValue { get; }
    public ObjectReader ObjectValue { get; }
    private AnyValue(ValueType valueType, bool boolVal, double numberVal, string stringVal, ArrayReader arrayVal, ObjectReader objectVal);
    [CompilerGeneratedAttribute]
public ValueType get_Type();
    [CompilerGeneratedAttribute]
public bool get_BoolValue();
    [CompilerGeneratedAttribute]
public double get_NumberValue();
    [CompilerGeneratedAttribute]
public string get_StringValue();
    [CompilerGeneratedAttribute]
public ArrayReader get_ArrayValue();
    [CompilerGeneratedAttribute]
public ObjectReader get_ObjectValue();
    public static AnyValue Null();
    public static AnyValue Bool(bool value);
    public static AnyValue Number(double value);
    public static AnyValue String(string value);
    public static AnyValue Array(ArrayReader value);
    public static AnyValue Object(ObjectReader value);
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
public class LaunchDarkly.JsonStream.ArrayReader : ValueType {
    private bool _defined;
    private bool _afterFirst;
    public bool IsDefined { get; }
    internal ArrayReader(bool defined);
    public bool get_IsDefined();
    public bool Next(JReader& reader);
}
public class LaunchDarkly.JsonStream.ArrayWriter : ValueType {
    private JWriter _writer;
    private WriterState _previousState;
    private bool _done;
    internal ArrayWriter(JWriter writer, WriterState previousState);
    public sealed virtual void Null();
    public sealed virtual void Bool(bool value);
    public sealed virtual void BoolOrNull(Nullable`1<bool> value);
    public sealed virtual void Int(int value);
    public sealed virtual void IntOrNull(Nullable`1<int> value);
    public sealed virtual void Long(long value);
    public sealed virtual void LongOrNull(Nullable`1<long> value);
    public sealed virtual void Double(double value);
    public sealed virtual void DoubleOrNull(Nullable`1<double> value);
    public sealed virtual void String(string value);
    public sealed virtual ArrayWriter Array();
    public sealed virtual ObjectWriter Object();
    public void End();
    public sealed virtual void Dispose();
}
public interface LaunchDarkly.JsonStream.IJsonStreamConverter {
    public abstract virtual void WriteJson(object instance, IValueWriter writer);
    public abstract virtual object ReadJson(JReader& reader);
}
public static class LaunchDarkly.JsonStream.Implementation.Properties : object {
    public static bool IsSystemTextJsonImplementation { get; }
    public static bool get_IsSystemTextJsonImplementation();
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
internal class LaunchDarkly.JsonStream.Implementation.StringToken : ValueType {
    private string _str;
    private Char[] _array;
    private int _offset;
    private int _length;
    public int Length { get; }
    private StringToken(string str, Char[] array, int offset, int length);
    public static StringToken FromString(string s);
    public static StringToken FromChars(Char[] array, int offset, int length);
    public int get_Length();
    public bool Equals(StringToken other);
    public bool Equals(string value);
    public virtual string ToString();
    public virtual int GetHashCode();
    public long ParseLong();
    public double ParseDouble();
}
internal class LaunchDarkly.JsonStream.Implementation.Token : ValueType {
    [CompilerGeneratedAttribute]
private ValueType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <BoolValue>k__BackingField;
    [CompilerGeneratedAttribute]
private double <NumberValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StringValue>k__BackingField;
    public ValueType Type { get; }
    public bool BoolValue { get; }
    public double NumberValue { get; }
    public string StringValue { get; }
    private Token(ValueType valueType, bool boolVal, double numberVal, string stringVal);
    [CompilerGeneratedAttribute]
public ValueType get_Type();
    [CompilerGeneratedAttribute]
public bool get_BoolValue();
    [CompilerGeneratedAttribute]
public double get_NumberValue();
    [CompilerGeneratedAttribute]
public string get_StringValue();
    public static Token Null();
    public static Token Bool(bool value);
    public static Token Number(double value);
    public static Token String(string value);
    public static Token Array();
    public static Token Object();
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
internal class LaunchDarkly.JsonStream.Implementation.TokenReader : ValueType {
    private Nullable`1<Token> _unreadToken;
    private Char[] _buf;
    private int _length;
    private int _pos;
    private int _lastPos;
    public bool EOF { get; }
    public int LastPos { get; }
    public static bool IsSystemTextJsonImplementation { get; }
    private int LastPosInternal { get; }
    public TokenReader(string input);
    public TokenReader(Byte[] input);
    private TokenReader(Char[] input);
    public bool get_EOF();
    public int get_LastPos();
    public bool Null();
    public bool Bool();
    public double Number();
    public string String();
    public void StartArray();
    public bool ArrayNext(bool first);
    public void StartObject();
    public PropertyNameToken ObjectNext(bool first);
    public Token Any();
    private Token Next();
    private Token Consume(ValueType expectedType);
    private void PutBack(Token t);
    private SyntaxException MakeSyntaxException(string message);
    public static bool get_IsSystemTextJsonImplementation();
    public Exception TranslateException(Exception e);
    private int get_LastPosInternal();
    private Nullable`1<Token> ParseTokenInternal();
    private bool ArrayNextInternal(bool first);
    private PropertyNameToken ObjectNextInternal(bool first);
    private Nullable`1<char> SkipWhitespaceAndMaybeReadChar();
    private char SkipWhitespaceAndRequireChar();
    private void UnreadChar();
    private double ReadNumber(char firstCh);
    private StringToken ReadString();
    private char ReadHexChar();
}
internal class LaunchDarkly.JsonStream.Implementation.TokenWriter : object {
    private static Byte[] _nullBytes;
    private static Byte[] _trueBytes;
    private static Byte[] _falseBytes;
    private static Byte[] _emptyStringBytes;
    private MemoryStream _buf;
    private Byte[] _tempBytes;
    private Char[] _tempChars;
    public TokenWriter(int initialCapacity);
    private static TokenWriter();
    public string GetString();
    public Byte[] GetUtf8Bytes();
    public Stream GetUtf8Stream();
    public void Null();
    public void Bool(bool value);
    public void Long(long value);
    public void Double(double value);
    public void String(string value);
    private void WriteEscapedChar(char ch);
    private static byte HexChar(int n);
    public void StartArray();
    public void NextArrayItem();
    public void EndArray();
    public void StartObject();
    public void NextObjectItem(string name, bool first);
    public void EndObject();
}
internal class LaunchDarkly.JsonStream.Implementation.TokenWriterBase : object {
}
public interface LaunchDarkly.JsonStream.IReaderAdapter {
    public bool EOF { get; }
    public abstract virtual bool get_EOF();
    public abstract virtual AnyValue NextValue(Nullable`1<ValueType> desiredType, bool allowNull);
    public abstract virtual bool ArrayNext(bool first);
    public abstract virtual PropertyNameToken ObjectNext(bool first);
}
public interface LaunchDarkly.JsonStream.IValueWriter {
    public abstract virtual void Null();
    public abstract virtual void Bool(bool value);
    public abstract virtual void BoolOrNull(Nullable`1<bool> value);
    public abstract virtual void Int(int value);
    public abstract virtual void IntOrNull(Nullable`1<int> value);
    public abstract virtual void Long(long value);
    public abstract virtual void LongOrNull(Nullable`1<long> value);
    public abstract virtual void Double(double value);
    public abstract virtual void DoubleOrNull(Nullable`1<double> value);
    public abstract virtual void String(string value);
    public abstract virtual ArrayWriter Array();
    public abstract virtual ObjectWriter Object();
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
public class LaunchDarkly.JsonStream.JReader : ValueType {
    private IReaderAdapter _delegate;
    private TokenReader _tr;
    private bool _awaitingReadValue;
    internal int LastPos { get; }
    public bool EOF { get; }
    private JReader(TokenReader tokenReader);
    private JReader(IReaderAdapter d);
    public static JReader FromString(string input);
    public static JReader FromUtf8Bytes(Byte[] input);
    public static JReader FromAdapter(IReaderAdapter dataAdapter);
    internal int get_LastPos();
    public bool get_EOF();
    public void Null();
    public bool Bool();
    public Nullable`1<bool> BoolOrNull();
    public int Int();
    public Nullable`1<int> IntOrNull();
    public long Long();
    public Nullable`1<long> LongOrNull();
    public double Double();
    public Nullable`1<double> DoubleOrNull();
    public string String();
    public string StringOrNull();
    public ArrayReader Array();
    public ArrayReader ArrayOrNull();
    public ObjectReader Object();
    public ObjectReader ObjectOrNull();
    public AnyValue Any();
    public void SkipValue();
    public Exception TranslateException(Exception e);
    internal bool ArrayNext(bool first);
    internal PropertyNameToken ObjectNext(bool first);
}
public class LaunchDarkly.JsonStream.JsonReadException : Exception {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Offset>k__BackingField;
    public Nullable`1<int> Offset { get; }
    protected JsonReadException(Nullable`1<int> offset);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Offset();
}
public static class LaunchDarkly.JsonStream.JsonStreamConvert : object {
    public static IJsonStreamConverter ConvertSimpleTypes { get; }
    public static string SerializeObject(object instance);
    public static string SerializeObject(object instance, IJsonStreamConverter converter);
    public static Byte[] SerializeObjectToUtf8Bytes(object instance);
    private static void SerializeObjectToJWriter(object instance, IValueWriter writer, IJsonStreamConverter converter);
    public static T DeserializeObject(string json);
    public static object DeserializeObject(string json, Type type);
    public static object DeserializeObject(string json, IJsonStreamConverter converter);
    public static IJsonStreamConverter get_ConvertSimpleTypes();
}
[AttributeUsageAttribute("28")]
public class LaunchDarkly.JsonStream.JsonStreamConverterAttribute : Attribute {
    [CompilerGeneratedAttribute]
private IJsonStreamConverter <Converter>k__BackingField;
    internal IJsonStreamConverter Converter { get; }
    public JsonStreamConverterAttribute(Type converterType);
    [CompilerGeneratedAttribute]
internal IJsonStreamConverter get_Converter();
    internal static JsonStreamConverterAttribute ForTargetType(Type targetType);
}
public class LaunchDarkly.JsonStream.JWriter : object {
    internal TokenWriter _tw;
    internal WriterState _state;
    private JWriter(TokenWriter tokenWriter);
    public static JWriter New();
    public static JWriter NewWithInitialCapacity(int initialCapacity);
    public string GetString();
    public Byte[] GetUtf8Bytes();
    public Stream GetUtf8Stream();
    public sealed virtual void Null();
    public sealed virtual void Bool(bool value);
    public sealed virtual void BoolOrNull(Nullable`1<bool> value);
    public sealed virtual void Int(int value);
    public sealed virtual void IntOrNull(Nullable`1<int> value);
    public sealed virtual void Long(long value);
    public sealed virtual void LongOrNull(Nullable`1<long> value);
    public sealed virtual void Double(double value);
    public sealed virtual void DoubleOrNull(Nullable`1<double> value);
    public sealed virtual void String(string value);
    public sealed virtual ArrayWriter Array();
    public sealed virtual ObjectWriter Object();
    private void BeforeValue();
}
internal class LaunchDarkly.JsonStream.NoOpWriter : object {
    internal static NoOpWriter Instance;
    private static NoOpWriter();
    public sealed virtual ArrayWriter Array();
    public sealed virtual void Bool(bool value);
    public sealed virtual void BoolOrNull(Nullable`1<bool> value);
    public sealed virtual void Double(double value);
    public sealed virtual void DoubleOrNull(Nullable`1<double> value);
    public sealed virtual void Int(int value);
    public sealed virtual void IntOrNull(Nullable`1<int> value);
    public sealed virtual void Long(long value);
    public sealed virtual void LongOrNull(Nullable`1<long> value);
    public sealed virtual void Null();
    public sealed virtual ObjectWriter Object();
    public sealed virtual void String(string value);
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
public class LaunchDarkly.JsonStream.ObjectReader : ValueType {
    private bool _defined;
    private String[] _requiredProperties;
    private Boolean[] _foundProperties;
    private bool _afterFirst;
    private PropertyNameToken _name;
    public bool IsDefined { get; }
    public PropertyNameToken Name { get; }
    internal ObjectReader(bool defined, String[] requiredProperties);
    public bool get_IsDefined();
    public PropertyNameToken get_Name();
    public ObjectReader WithRequiredProperties(String[] propertyNames);
    public bool Next(JReader& reader);
}
public class LaunchDarkly.JsonStream.ObjectWriter : ValueType {
    private JWriter _writer;
    private WriterState _previousState;
    private bool _hasItems;
    private bool _done;
    internal ObjectWriter(JWriter writer, WriterState previousState);
    public IValueWriter Name(string name);
    public IValueWriter MaybeName(string name, bool present);
    public void End();
    public sealed virtual void Dispose();
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
public class LaunchDarkly.JsonStream.PropertyNameToken : ValueType {
    private bool _defined;
    private StringToken _stringToken;
    public static PropertyNameToken None { get; }
    public bool Empty { get; }
    internal PropertyNameToken(string fromString);
    internal PropertyNameToken(StringToken fromStringToken);
    public static PropertyNameToken get_None();
    public bool get_Empty();
    public virtual string ToString();
    public bool Equals(PropertyNameToken other);
    public bool Equals(string value);
    public virtual int GetHashCode();
    public virtual bool Equals(object o);
    public static bool op_Equality(PropertyNameToken p1, PropertyNameToken p2);
    public static bool op_Inequality(PropertyNameToken p1, PropertyNameToken p2);
    public static bool op_Equality(PropertyNameToken p, string value);
    public static bool op_Inequality(PropertyNameToken p, string value);
}
public static class LaunchDarkly.JsonStream.ReaderAdapters : object {
    public static IReaderAdapter FromSimpleTypes(object value, bool allowTypeCoercion);
}
public class LaunchDarkly.JsonStream.RequiredPropertyException : JsonReadException {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    public string Message { get; }
    public RequiredPropertyException(string name, int offset);
    [CompilerGeneratedAttribute]
public string get_Name();
    public virtual string get_Message();
}
public class LaunchDarkly.JsonStream.SyntaxException : JsonReadException {
    [CompilerGeneratedAttribute]
private string <BaseMessage>k__BackingField;
    public string BaseMessage { get; }
    public string Message { get; }
    public SyntaxException(string baseMessage, Nullable`1<int> offset);
    [CompilerGeneratedAttribute]
public string get_BaseMessage();
    public virtual string get_Message();
}
public class LaunchDarkly.JsonStream.TypeException : JsonReadException {
    [CompilerGeneratedAttribute]
private ValueType <ExpectedType>k__BackingField;
    [CompilerGeneratedAttribute]
private ValueType <ActualType>k__BackingField;
    public ValueType ExpectedType { get; }
    public ValueType ActualType { get; }
    public string Message { get; }
    public TypeException(ValueType expectedType, ValueType actualType, Nullable`1<int> offset);
    [CompilerGeneratedAttribute]
public ValueType get_ExpectedType();
    [CompilerGeneratedAttribute]
public ValueType get_ActualType();
    public virtual string get_Message();
}
public enum LaunchDarkly.JsonStream.ValueType : Enum {
    public int value__;
    public static ValueType Null;
    public static ValueType Bool;
    public static ValueType Number;
    public static ValueType String;
    public static ValueType Array;
    public static ValueType Object;
}
internal class LaunchDarkly.JsonStream.WriterState : ValueType {
    internal bool InArray;
    internal bool ArrayHasItems;
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsByRefLikeAttribute : Attribute {
}
