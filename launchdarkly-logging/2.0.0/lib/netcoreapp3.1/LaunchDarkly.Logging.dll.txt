[ExtensionAttribute]
public static class LaunchDarkly.Logging.Extensions : object {
    [ExtensionAttribute]
public static string Uppercase(LogLevel level);
}
public interface LaunchDarkly.Logging.IChannel {
    public abstract virtual bool IsEnabled(LogLevel level);
    public abstract virtual void Log(LogLevel level, object message);
    public abstract virtual void Log(LogLevel level, string format, object param);
    public abstract virtual void Log(LogLevel level, string format, object param1, object param2);
    public abstract virtual void Log(LogLevel level, string format, Object[] allParams);
}
public interface LaunchDarkly.Logging.ILogAdapter {
    public abstract virtual IChannel NewChannel(string name);
}
[ExtensionAttribute]
public static class LaunchDarkly.Logging.ILogAdapterExtensions : object {
    [ExtensionAttribute]
public static ILogAdapter Level(ILogAdapter adapter, LogLevel minimumLevel);
    [ExtensionAttribute]
public static Logger Logger(ILogAdapter adapter, string name);
}
internal class LaunchDarkly.Logging.LevelFilter : object {
    private ILogAdapter _wrappedAdapter;
    private LogLevel _enableLevel;
    internal LevelFilter(ILogAdapter wrappedAdapter, LogLevel enableLevel);
    public sealed virtual IChannel NewChannel(string name);
}
public class LaunchDarkly.Logging.LogCapture : object {
    private List`1<Message> _messages;
    public sealed virtual IChannel NewChannel(string name);
    public List`1<Message> GetMessages();
    public List`1<string> GetMessageStrings();
    public bool HasMessageWithText(LogLevel level, string text);
    public bool HasMessageWithRegex(LogLevel level, string pattern);
    public virtual string ToString();
}
public class LaunchDarkly.Logging.Logger : object {
    private string _name;
    private ILogAdapter _adapter;
    private IChannel _channel;
    internal Logger(string name, ILogAdapter adapter, IChannel channel);
    public static Logger WithAdapter(ILogAdapter adapter, string name);
    public Logger SubLogger(string nameSuffix);
    public bool IsEnabled(LogLevel level);
    public void Debug(object message);
    public void Debug(string format, object param);
    public void Debug(string format, object param1, object param2);
    public void Debug(string format, Object[] allParams);
    public void Info(object message);
    public void Info(string format, object param);
    public void Info(string format, object param1, object param2);
    public void Info(string format, Object[] allParams);
    public void Warn(object message);
    public void Warn(string format, object param);
    public void Warn(string format, object param1, object param2);
    public void Warn(string format, Object[] allParams);
    public void Error(object message);
    public void error(string format, object param);
    public void Error(string format, object param1, object param2);
    public void Error(string format, Object[] allParams);
}
public enum LaunchDarkly.Logging.LogLevel : Enum {
    public int value__;
    public static LogLevel Debug;
    public static LogLevel Info;
    public static LogLevel Warn;
    public static LogLevel Error;
    public static LogLevel None;
}
public static class LaunchDarkly.Logging.Logs : object {
    public static ILogAdapter None { get; }
    public static ILogAdapter Default { get; }
    public static SimpleLogging ToConsole { get; }
    public static ILogAdapter get_None();
    public static ILogAdapter get_Default();
    public static SimpleLogging get_ToConsole();
    public static SimpleLogging ToWriter(TextWriter stream);
    public static SimpleLogging ToMethod(Action`1<string> writeLineMethod);
    public static ILogAdapter CoreLogging(ILoggerFactory loggerFactory);
    public static ILogAdapter ToMultiple(ILogAdapter[] logAdapters);
    public static LogCapture Capture();
}
public static class LaunchDarkly.Logging.LogValues : object {
    public static object Defer(Func`1<string> stringProvider);
    public static object ExceptionSummary(Exception e);
    private static string DescribeException(Exception e);
    public static object ExceptionTrace(Exception e);
}
internal class LaunchDarkly.Logging.MultiLogging : object {
    private ILogAdapter[] _destinations;
    internal MultiLogging(ILogAdapter[] destinations);
    public sealed virtual IChannel NewChannel(string name);
}
internal class LaunchDarkly.Logging.NetCoreLogging : object {
    private ILoggerFactory _factory;
    internal NetCoreLogging(ILoggerFactory factory);
    public sealed virtual IChannel NewChannel(string name);
}
internal class LaunchDarkly.Logging.NullLogging : object {
    public static NullLogging Instance;
    private static NullLogging();
    public sealed virtual IChannel NewChannel(string name);
}
public class LaunchDarkly.Logging.SimpleLogging : object {
    private Action`1<string> _writeLine;
    private string _dateFormat;
    public static string DefaultDateFormat;
    internal SimpleLogging(Action`1<string> writeLine);
    internal SimpleLogging(Action`1<string> writeLine, string dateFormat);
    public SimpleLogging DateFormat(string dateFormat);
    public sealed virtual IChannel NewChannel(string name);
}
