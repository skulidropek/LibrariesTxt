public static class LaunchDarkly.Sdk.Server.Components : object {
    public static IComponentConfigurer`1<IDataSource> ExternalUpdatesOnly { get; }
    public static IComponentConfigurer`1<IDataStore> InMemoryDataStore { get; }
    public static IComponentConfigurer`1<IEventProcessor> NoEvents { get; }
    public static IComponentConfigurer`1<LoggingConfiguration> NoLogging { get; }
    public static BigSegmentsConfigurationBuilder BigSegments(IComponentConfigurer`1<IBigSegmentStore> storeConfig);
    public static IComponentConfigurer`1<IDataSource> get_ExternalUpdatesOnly();
    public static HttpConfigurationBuilder HttpConfiguration();
    public static IComponentConfigurer`1<IDataStore> get_InMemoryDataStore();
    public static LoggingConfigurationBuilder Logging();
    public static LoggingConfigurationBuilder Logging(ILogAdapter adapter);
    public static HookConfigurationBuilder Hooks();
    public static HookConfigurationBuilder Hooks(IEnumerable`1<Hook> hooks);
    public static IComponentConfigurer`1<IEventProcessor> get_NoEvents();
    public static IComponentConfigurer`1<LoggingConfiguration> get_NoLogging();
    public static PersistentDataStoreBuilder PersistentDataStore(IComponentConfigurer`1<IPersistentDataStore> storeConfig);
    public static PersistentDataStoreBuilder PersistentDataStore(IComponentConfigurer`1<IPersistentDataStoreAsync> storeConfig);
    public static PollingDataSourceBuilder PollingDataSource();
    public static ServiceEndpointsBuilder ServiceEndpoints();
    public static StreamingDataSourceBuilder StreamingDataSource();
    public static EventProcessorBuilder SendEvents();
    public static ApplicationInfoBuilder ApplicationInfo();
    public static WrapperInfoBuilder WrapperInfo();
}
public class LaunchDarkly.Sdk.Server.Configuration : object {
    [CompilerGeneratedAttribute]
private IComponentConfigurer`1<BigSegmentsConfiguration> <BigSegments>k__BackingField;
    [CompilerGeneratedAttribute]
private IComponentConfigurer`1<IDataSource> <DataSource>k__BackingField;
    [CompilerGeneratedAttribute]
private IComponentConfigurer`1<IDataStore> <DataStore>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DiagnosticOptOut>k__BackingField;
    [CompilerGeneratedAttribute]
private IComponentConfigurer`1<IEventProcessor> <Events>k__BackingField;
    [CompilerGeneratedAttribute]
private IComponentConfigurer`1<HttpConfiguration> <Http>k__BackingField;
    [CompilerGeneratedAttribute]
private IComponentConfigurer`1<LoggingConfiguration> <Logging>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Offline>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SdkKey>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceEndpoints <ServiceEndpoints>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <StartWaitTime>k__BackingField;
    [CompilerGeneratedAttribute]
private ApplicationInfoBuilder <ApplicationInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private WrapperInfoBuilder <WrapperInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private HookConfigurationBuilder <Hooks>k__BackingField;
    public IComponentConfigurer`1<BigSegmentsConfiguration> BigSegments { get; }
    public IComponentConfigurer`1<IDataSource> DataSource { get; }
    public IComponentConfigurer`1<IDataStore> DataStore { get; }
    public bool DiagnosticOptOut { get; }
    public IComponentConfigurer`1<IEventProcessor> Events { get; }
    public IComponentConfigurer`1<HttpConfiguration> Http { get; }
    public IComponentConfigurer`1<LoggingConfiguration> Logging { get; }
    public bool Offline { get; }
    public string SdkKey { get; }
    public ServiceEndpoints ServiceEndpoints { get; }
    public TimeSpan StartWaitTime { get; }
    public ApplicationInfoBuilder ApplicationInfo { get; }
    public WrapperInfoBuilder WrapperInfo { get; }
    public HookConfigurationBuilder Hooks { get; }
    internal Configuration(ConfigurationBuilder builder);
    [CompilerGeneratedAttribute]
public IComponentConfigurer`1<BigSegmentsConfiguration> get_BigSegments();
    [CompilerGeneratedAttribute]
public IComponentConfigurer`1<IDataSource> get_DataSource();
    [CompilerGeneratedAttribute]
public IComponentConfigurer`1<IDataStore> get_DataStore();
    [CompilerGeneratedAttribute]
public bool get_DiagnosticOptOut();
    [CompilerGeneratedAttribute]
public IComponentConfigurer`1<IEventProcessor> get_Events();
    [CompilerGeneratedAttribute]
public IComponentConfigurer`1<HttpConfiguration> get_Http();
    [CompilerGeneratedAttribute]
public IComponentConfigurer`1<LoggingConfiguration> get_Logging();
    [CompilerGeneratedAttribute]
public bool get_Offline();
    [CompilerGeneratedAttribute]
public string get_SdkKey();
    [CompilerGeneratedAttribute]
public ServiceEndpoints get_ServiceEndpoints();
    [CompilerGeneratedAttribute]
public TimeSpan get_StartWaitTime();
    [CompilerGeneratedAttribute]
public ApplicationInfoBuilder get_ApplicationInfo();
    [CompilerGeneratedAttribute]
public WrapperInfoBuilder get_WrapperInfo();
    [CompilerGeneratedAttribute]
public HookConfigurationBuilder get_Hooks();
    public static Configuration Default(string sdkKey);
    public static ConfigurationBuilder Builder(string sdkKey);
    public static ConfigurationBuilder Builder(Configuration fromConfiguration);
}
public class LaunchDarkly.Sdk.Server.ConfigurationBuilder : object {
    internal static TimeSpan DefaultStartWaitTime;
    internal IComponentConfigurer`1<BigSegmentsConfiguration> _bigSegments;
    internal IComponentConfigurer`1<IDataSource> _dataSource;
    internal IComponentConfigurer`1<IDataStore> _dataStore;
    internal bool _diagnosticOptOut;
    internal IComponentConfigurer`1<IEventProcessor> _events;
    internal HookConfigurationBuilder _hooks;
    internal IComponentConfigurer`1<HttpConfiguration> _http;
    internal IComponentConfigurer`1<LoggingConfiguration> _logging;
    internal bool _offline;
    internal string _sdkKey;
    internal ServiceEndpointsBuilder _serviceEndpointsBuilder;
    internal TimeSpan _startWaitTime;
    internal ApplicationInfoBuilder _applicationInfo;
    internal WrapperInfoBuilder _wrapperInfo;
    internal ConfigurationBuilder(string sdkKey);
    internal ConfigurationBuilder(Configuration copyFrom);
    private static ConfigurationBuilder();
    public Configuration Build();
    public ConfigurationBuilder BigSegments(IComponentConfigurer`1<BigSegmentsConfiguration> bigSegmentsConfig);
    public ConfigurationBuilder DataSource(IComponentConfigurer`1<IDataSource> dataSourceConfig);
    public ConfigurationBuilder DataStore(IComponentConfigurer`1<IDataStore> dataStoreConfig);
    public ConfigurationBuilder DiagnosticOptOut(bool diagnosticOptOut);
    public ConfigurationBuilder Events(IComponentConfigurer`1<IEventProcessor> eventsConfig);
    public ConfigurationBuilder Http(IComponentConfigurer`1<HttpConfiguration> httpConfig);
    public ConfigurationBuilder Logging(IComponentConfigurer`1<LoggingConfiguration> loggingConfig);
    public ConfigurationBuilder Logging(ILogAdapter logAdapter);
    public ConfigurationBuilder Hooks(HookConfigurationBuilder hooksConfig);
    public ConfigurationBuilder Offline(bool offline);
    public ConfigurationBuilder SdkKey(string sdkKey);
    public ConfigurationBuilder ServiceEndpoints(ServiceEndpointsBuilder serviceEndpointsBuilder);
    public ConfigurationBuilder StartWaitTime(TimeSpan startWaitTime);
    public ConfigurationBuilder ApplicationInfo(ApplicationInfoBuilder applicationInfo);
    public ConfigurationBuilder WrapperInfo(WrapperInfoBuilder wrapperInfo);
}
public static class LaunchDarkly.Sdk.Server.DataModel : object {
    public static DataKind Features;
    public static DataKind Segments;
    public static IEnumerable`1<DataKind> AllDataKinds { get; }
    private static DataModel();
    [IteratorStateMachineAttribute("LaunchDarkly.Sdk.Server.DataModel/<get_AllDataKinds>d__3")]
public static IEnumerable`1<DataKind> get_AllDataKinds();
    private static void SerializeFlag(object o, Utf8JsonWriter w);
    private static ItemDescriptor DeserializeFlag(Utf8JsonReader& r);
    private static void SerializeSegment(object o, Utf8JsonWriter w);
    private static ItemDescriptor DeserializeSegment(Utf8JsonReader& r);
}
[JsonConverterAttribute("LaunchDarkly.Sdk.Server.FeatureFlagsStateConverter")]
public class LaunchDarkly.Sdk.Server.FeatureFlagsState : object {
    internal bool _valid;
    internal IDictionary`2<string, FlagState> _flags;
    private ImmutableDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _immutableValuesMap;
    public bool Valid { get; }
    internal FeatureFlagsState(bool valid);
    internal FeatureFlagsState(bool valid, IDictionary`2<string, FlagState> flags);
    public bool get_Valid();
    public static FeatureFlagsStateBuilder Builder(FlagsStateOption[] options);
    public LdValue GetFlagValueJson(string key);
    public Nullable`1<EvaluationReason> GetFlagReason(string key);
    public IReadOnlyDictionary`2<string, LdValue> ToValuesJsonMap();
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
    private static bool DictionariesEqual(IDictionary`2<T, U> d0, IDictionary`2<T, U> d1);
}
public class LaunchDarkly.Sdk.Server.FeatureFlagsStateBuilder : object {
    private bool _detailsOnlyIfTracked;
    private bool _withReasons;
    private bool _valid;
    private Dictionary`2<string, FlagState> _flags;
    internal FeatureFlagsStateBuilder(FlagsStateOption[] options);
    public FeatureFlagsState Build();
    public FeatureFlagsStateBuilder Valid(bool valid);
    public FeatureFlagsStateBuilder AddFlag(string flagKey, EvaluationDetail`1<LdValue> result);
    internal FeatureFlagsStateBuilder AddFlag(string flagKey, LdValue value, Nullable`1<int> variationIndex, EvaluationReason reason, int flagVersion, bool flagTrackEvents, bool trackReason, Nullable`1<UnixMillisecondTime> flagDebugEventsUntilDate);
}
internal class LaunchDarkly.Sdk.Server.FeatureFlagsStateConverter : JsonConverter`1<FeatureFlagsState> {
    public virtual void Write(Utf8JsonWriter w, FeatureFlagsState state, JsonSerializerOptions options);
    public virtual FeatureFlagsState Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
}
public class LaunchDarkly.Sdk.Server.FlagsStateOption : object {
    private string _description;
    public static FlagsStateOption ClientSideOnly;
    public static FlagsStateOption WithReasons;
    public static FlagsStateOption DetailsOnlyForTrackedFlags;
    private FlagsStateOption(string description);
    private static FlagsStateOption();
    public virtual string ToString();
    internal static bool HasOption(FlagsStateOption[] options, FlagsStateOption option);
}
internal class LaunchDarkly.Sdk.Server.FlagState : ValueType {
    [CompilerGeneratedAttribute]
private LdValue <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Variation>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TrackEvents>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TrackReason>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UnixMillisecondTime> <DebugEventsUntilDate>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<EvaluationReason> <Reason>k__BackingField;
    internal LdValue Value { get; internal set; }
    internal Nullable`1<int> Variation { get; internal set; }
    internal Nullable`1<int> Version { get; internal set; }
    internal bool TrackEvents { get; internal set; }
    internal bool TrackReason { get; internal set; }
    internal Nullable`1<UnixMillisecondTime> DebugEventsUntilDate { get; internal set; }
    internal Nullable`1<EvaluationReason> Reason { get; internal set; }
    [CompilerGeneratedAttribute]
internal LdValue get_Value();
    [CompilerGeneratedAttribute]
internal void set_Value(LdValue value);
    [CompilerGeneratedAttribute]
internal Nullable`1<int> get_Variation();
    [CompilerGeneratedAttribute]
internal void set_Variation(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
internal Nullable`1<int> get_Version();
    [CompilerGeneratedAttribute]
internal void set_Version(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
internal bool get_TrackEvents();
    [CompilerGeneratedAttribute]
internal void set_TrackEvents(bool value);
    [CompilerGeneratedAttribute]
internal bool get_TrackReason();
    [CompilerGeneratedAttribute]
internal void set_TrackReason(bool value);
    [CompilerGeneratedAttribute]
internal Nullable`1<UnixMillisecondTime> get_DebugEventsUntilDate();
    [CompilerGeneratedAttribute]
internal void set_DebugEventsUntilDate(Nullable`1<UnixMillisecondTime> value);
    [CompilerGeneratedAttribute]
internal Nullable`1<EvaluationReason> get_Reason();
    [CompilerGeneratedAttribute]
internal void set_Reason(Nullable`1<EvaluationReason> value);
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
}
public class LaunchDarkly.Sdk.Server.Hooks.EvaluationSeriesContext : object {
    [CompilerGeneratedAttribute]
private string <FlagKey>k__BackingField;
    [CompilerGeneratedAttribute]
private Context <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private LdValue <DefaultValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Method>k__BackingField;
    public string FlagKey { get; }
    public Context Context { get; }
    public LdValue DefaultValue { get; }
    public string Method { get; }
    public EvaluationSeriesContext(string flagKey, Context context, LdValue defaultValue, string method);
    [CompilerGeneratedAttribute]
public string get_FlagKey();
    [CompilerGeneratedAttribute]
public Context get_Context();
    [CompilerGeneratedAttribute]
public LdValue get_DefaultValue();
    [CompilerGeneratedAttribute]
public string get_Method();
}
public class LaunchDarkly.Sdk.Server.Hooks.Hook : object {
    [CompilerGeneratedAttribute]
private HookMetadata <Metadata>k__BackingField;
    public HookMetadata Metadata { get; private set; }
    public Hook(string name);
    [CompilerGeneratedAttribute]
public HookMetadata get_Metadata();
    [CompilerGeneratedAttribute]
private void set_Metadata(HookMetadata value);
    public virtual ImmutableDictionary`2<string, object> BeforeEvaluation(EvaluationSeriesContext context, ImmutableDictionary`2<string, object> data);
    public virtual ImmutableDictionary`2<string, object> AfterEvaluation(EvaluationSeriesContext context, ImmutableDictionary`2<string, object> data, EvaluationDetail`1<LdValue> detail);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
public class LaunchDarkly.Sdk.Server.Hooks.HookMetadata : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    public HookMetadata(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
}
public static class LaunchDarkly.Sdk.Server.Hooks.Method : object {
    public static string BoolVariation;
    public static string BoolVariationDetail;
    public static string IntVariation;
    public static string IntVariationDetail;
    public static string FloatVariation;
    public static string FloatVariationDetail;
    public static string DoubleVariation;
    public static string DoubleVariationDetail;
    public static string StringVariation;
    public static string StringVariationDetail;
    public static string JsonVariation;
    public static string JsonVariationDetail;
    public static string MigrationVariation;
}
public class LaunchDarkly.Sdk.Server.Hooks.SeriesDataBuilder : object {
    private Builder<string, object> _builder;
    public SeriesDataBuilder(ImmutableDictionary`2<string, object> dictionary);
    public SeriesDataBuilder Set(string key, object value);
    public ImmutableDictionary`2<string, object> Build();
}
[ExtensionAttribute]
public static class LaunchDarkly.Sdk.Server.ILdClientExtensions : object {
    [ExtensionAttribute]
public static T EnumVariation(ILdClient client, string key, Context context, T defaultValue);
    [ExtensionAttribute]
public static EvaluationDetail`1<T> EnumVariationDetail(ILdClient client, string key, Context context, T defaultValue);
}
public class LaunchDarkly.Sdk.Server.Integrations.BigSegmentsConfigurationBuilder : object {
    public static int DefaultContextCacheSize;
    public static TimeSpan DefaultContextCacheTime;
    public static TimeSpan DefaultStatusPollInterval;
    public static TimeSpan DefaultStaleAfter;
    private IComponentConfigurer`1<IBigSegmentStore> _storeFactory;
    private int _contextCacheSize;
    private TimeSpan _contextCacheTime;
    private TimeSpan _statusPollInterval;
    private TimeSpan _staleAfter;
    internal BigSegmentsConfigurationBuilder(IComponentConfigurer`1<IBigSegmentStore> storeFactory);
    private static BigSegmentsConfigurationBuilder();
    public BigSegmentsConfigurationBuilder ContextCacheSize(int contextCacheSize);
    public BigSegmentsConfigurationBuilder ContextCacheTime(TimeSpan contextCacheTime);
    public BigSegmentsConfigurationBuilder StatusPollInterval(TimeSpan statusPollInterval);
    public BigSegmentsConfigurationBuilder StaleAfter(TimeSpan staleAfter);
    public sealed virtual BigSegmentsConfiguration Build(LdClientContext context);
}
public class LaunchDarkly.Sdk.Server.Integrations.EventProcessorBuilder : object {
    public static int DefaultCapacity;
    public static TimeSpan DefaultDiagnosticRecordingInterval;
    public static TimeSpan DefaultFlushInterval;
    public static int DefaultContextKeysCapacity;
    public static TimeSpan DefaultContextKeysFlushInterval;
    public static TimeSpan MinimumDiagnosticRecordingInterval;
    internal bool _allAttributesPrivate;
    internal int _capacity;
    internal TimeSpan _diagnosticRecordingInterval;
    internal TimeSpan _flushInterval;
    internal HashSet`1<AttributeRef> _privateAttributes;
    internal int _contextKeysCapacity;
    internal TimeSpan _contextKeysFlushInterval;
    internal IEventSender _eventSender;
    private static EventProcessorBuilder();
    public EventProcessorBuilder AllAttributesPrivate(bool allAttributesPrivate);
    public EventProcessorBuilder Capacity(int capacity);
    public EventProcessorBuilder DiagnosticRecordingInterval(TimeSpan diagnosticRecordingInterval);
    internal EventProcessorBuilder DiagnosticRecordingIntervalNoMinimum(TimeSpan diagnosticRecordingInterval);
    internal EventProcessorBuilder EventSender(IEventSender eventSender);
    public EventProcessorBuilder FlushInterval(TimeSpan flushInterval);
    public EventProcessorBuilder PrivateAttributes(String[] attributes);
    public EventProcessorBuilder ContextKeysCapacity(int contextKeysCapacity);
    public EventProcessorBuilder ContextKeysFlushInterval(TimeSpan contextKeysFlushInterval);
    public sealed virtual IEventProcessor Build(LdClientContext context);
    private EventsConfiguration MakeEventsConfiguration(LdClientContext context, bool logConfigErrors);
    public sealed virtual LdValue DescribeConfiguration(LdClientContext context);
}
public static class LaunchDarkly.Sdk.Server.Integrations.FileData : object {
    public static FileDataSourceBuilder DataSource();
}
public class LaunchDarkly.Sdk.Server.Integrations.FileDataSourceBuilder : object {
    internal List`1<string> _paths;
    internal bool _autoUpdate;
    internal IFileReader _fileReader;
    internal Func`2<string, object> _parser;
    internal bool _skipMissingPaths;
    internal DuplicateKeysHandling _duplicateKeysHandling;
    public FileDataSourceBuilder FilePaths(String[] paths);
    public FileDataSourceBuilder Parser(Func`2<string, object> parseFn);
    public FileDataSourceBuilder FileReader(IFileReader fileReader);
    public FileDataSourceBuilder AutoUpdate(bool autoUpdate);
    public FileDataSourceBuilder DuplicateKeysHandling(DuplicateKeysHandling duplicateKeysHandling);
    public FileDataSourceBuilder SkipMissingPaths(bool skipMissingPaths);
    public sealed virtual IDataSource Build(LdClientContext context);
}
public static class LaunchDarkly.Sdk.Server.Integrations.FileDataTypes : object {
}
public class LaunchDarkly.Sdk.Server.Integrations.HookConfigurationBuilder : object {
    private List`1<Hook> _hooks;
    public HookConfigurationBuilder(IEnumerable`1<Hook> hooks);
    public HookConfigurationBuilder Add(Hook hook);
    public HookConfiguration Build();
}
public class LaunchDarkly.Sdk.Server.Integrations.HttpConfigurationBuilder : object {
    public static TimeSpan DefaultConnectTimeout;
    public static TimeSpan DefaultReadTimeout;
    public static TimeSpan DefaultResponseStartTimeout;
    internal TimeSpan _connectTimeout;
    internal List`1<KeyValuePair`2<string, string>> _customHeaders;
    internal HttpMessageHandler _messageHandler;
    internal IWebProxy _proxy;
    internal TimeSpan _readTimeout;
    internal TimeSpan _responseStartTimeout;
    internal string _wrapperName;
    internal string _wrapperVersion;
    private static HttpConfigurationBuilder();
    public HttpConfigurationBuilder ConnectTimeout(TimeSpan connectTimeout);
    public HttpConfigurationBuilder CustomHeader(string name, string value);
    public HttpConfigurationBuilder MessageHandler(HttpMessageHandler messageHandler);
    public HttpConfigurationBuilder Proxy(IWebProxy proxy);
    public HttpConfigurationBuilder ReadTimeout(TimeSpan readTimeout);
    public HttpConfigurationBuilder ResponseStartTimeout(TimeSpan responseStartTimeout);
    public HttpConfigurationBuilder Wrapper(string wrapperName, string wrapperVersion);
    public sealed virtual HttpConfiguration Build(LdClientContext context);
    private HttpProperties MakeHttpProperties(LdClientContext context);
    public sealed virtual LdValue DescribeConfiguration(LdClientContext context);
    [CompilerGeneratedAttribute]
private HttpMessageHandler <MakeHttpProperties>b__19_0(HttpProperties _);
}
public class LaunchDarkly.Sdk.Server.Integrations.LoggingConfigurationBuilder : object {
    private string _baseLoggerName;
    private ILogAdapter _logAdapter;
    private Nullable`1<LogLevel> _minimumLevel;
    private Nullable`1<TimeSpan> _logDataSourceOutageAsErrorAfter;
    public static TimeSpan DefaultLogDataSourceAsErrorAfter;
    private static LoggingConfigurationBuilder();
    public LoggingConfigurationBuilder BaseLoggerName(string baseLoggerName);
    public LoggingConfigurationBuilder Adapter(ILogAdapter adapter);
    public LoggingConfigurationBuilder Level(LogLevel minimumLevel);
    public LoggingConfigurationBuilder LogDataSourceOutageAsErrorAfter(Nullable`1<TimeSpan> interval);
    public sealed virtual LoggingConfiguration Build(LdClientContext context);
}
public class LaunchDarkly.Sdk.Server.Integrations.PersistentDataStoreBuilder : object {
    private IComponentConfigurer`1<IPersistentDataStore> _coreFactory;
    private IComponentConfigurer`1<IPersistentDataStoreAsync> _coreAsyncFactory;
    private DataStoreCacheConfig _cacheConfig;
    public static TimeSpan DefaultTtl;
    internal PersistentDataStoreBuilder(IComponentConfigurer`1<IPersistentDataStore> coreFactory);
    internal PersistentDataStoreBuilder(IComponentConfigurer`1<IPersistentDataStoreAsync> coreAsyncFactory);
    private static PersistentDataStoreBuilder();
    public PersistentDataStoreBuilder NoCaching();
    public PersistentDataStoreBuilder CacheTime(TimeSpan cacheTime);
    public PersistentDataStoreBuilder CacheMillis(int millis);
    public PersistentDataStoreBuilder CacheSeconds(int seconds);
    public PersistentDataStoreBuilder CacheMaximumEntries(Nullable`1<int> maximumEntries);
    public PersistentDataStoreBuilder CacheForever();
    public sealed virtual IDataStore Build(LdClientContext context);
    public sealed virtual LdValue DescribeConfiguration(LdClientContext context);
}
public class LaunchDarkly.Sdk.Server.Integrations.PollingDataSourceBuilder : object {
    public static TimeSpan DefaultPollInterval;
    internal TimeSpan _pollInterval;
    private static PollingDataSourceBuilder();
    public PollingDataSourceBuilder PollInterval(TimeSpan pollInterval);
    internal PollingDataSourceBuilder PollIntervalNoMinimum(TimeSpan pollInterval);
    public sealed virtual IDataSource Build(LdClientContext context);
    public sealed virtual LdValue DescribeConfiguration(LdClientContext context);
}
public class LaunchDarkly.Sdk.Server.Integrations.ServiceEndpointsBuilder : object {
    private Uri _streamingBaseUri;
    private Uri _pollingBaseUri;
    private Uri _eventsBaseUri;
    internal ServiceEndpointsBuilder(ServiceEndpoints copyFrom);
    public ServiceEndpointsBuilder Events(Uri eventsBaseUri);
    public ServiceEndpointsBuilder Events(string eventsBaseUri);
    public ServiceEndpointsBuilder Polling(Uri pollingBaseUri);
    public ServiceEndpointsBuilder Polling(string pollingBaseUri);
    public ServiceEndpointsBuilder RelayProxy(Uri relayProxyBaseUri);
    public ServiceEndpointsBuilder RelayProxy(string relayProxyBaseUri);
    public ServiceEndpointsBuilder Streaming(Uri streamingBaseUri);
    public ServiceEndpointsBuilder Streaming(string streamingBaseUri);
    public ServiceEndpoints Build();
}
public class LaunchDarkly.Sdk.Server.Integrations.StreamingDataSourceBuilder : object {
    public static TimeSpan DefaultInitialReconnectDelay;
    internal TimeSpan _initialReconnectDelay;
    private static StreamingDataSourceBuilder();
    public StreamingDataSourceBuilder InitialReconnectDelay(TimeSpan initialReconnectDelay);
    public sealed virtual IDataSource Build(LdClientContext context);
    public sealed virtual LdValue DescribeConfiguration(LdClientContext context);
}
public class LaunchDarkly.Sdk.Server.Integrations.TestData : object {
    private object _lock;
    private Dictionary`2<string, ItemDescriptor> _currentFlags;
    private Dictionary`2<string, ItemDescriptor> _currentSegments;
    private Dictionary`2<string, FlagBuilder> _currentBuilders;
    private List`1<DataSourceImpl> _instances;
    public static TestData DataSource();
    public FlagBuilder Flag(string key);
    public TestData Update(FlagBuilder flagBuilder);
    private void UpdateInternal(string key, Func`2<int, ItemDescriptor> makeFlag, FlagBuilder builder);
    internal TestData UsePreconfiguredFlag(FeatureFlag flag);
    internal TestData UsePreconfiguredSegment(Segment segment);
    public TestData UpdateStatus(DataSourceState newState, Nullable`1<ErrorInfo> newError);
    public sealed virtual IDataSource Build(LdClientContext context);
    internal FullDataSet`1<ItemDescriptor> MakeInitData();
    internal void ClosedInstance(DataSourceImpl instance);
}
public class LaunchDarkly.Sdk.Server.Integrations.WrapperInfoBuilder : object {
    private string _name;
    private string _version;
    public WrapperInfoBuilder Name(string value);
    public WrapperInfoBuilder Version(string value);
    public WrapperInfo Build();
}
public class LaunchDarkly.Sdk.Server.Interfaces.BigSegmentStoreStatus : ValueType {
    [CompilerGeneratedAttribute]
private bool <Available>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Stale>k__BackingField;
    public bool Available { get; public set; }
    public bool Stale { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Available();
    [CompilerGeneratedAttribute]
public void set_Available(bool value);
    [CompilerGeneratedAttribute]
public bool get_Stale();
    [CompilerGeneratedAttribute]
public void set_Stale(bool value);
    public virtual string ToString();
}
public enum LaunchDarkly.Sdk.Server.Interfaces.DataSourceState : Enum {
    public int value__;
    public static DataSourceState Initializing;
    public static DataSourceState Valid;
    public static DataSourceState Interrupted;
    public static DataSourceState Off;
}
public class LaunchDarkly.Sdk.Server.Interfaces.DataSourceStatus : ValueType {
    [CompilerGeneratedAttribute]
private DataSourceState <State>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <StateSince>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ErrorInfo> <LastError>k__BackingField;
    public DataSourceState State { get; public set; }
    public DateTime StateSince { get; public set; }
    public Nullable`1<ErrorInfo> LastError { get; public set; }
    [CompilerGeneratedAttribute]
public DataSourceState get_State();
    [CompilerGeneratedAttribute]
public void set_State(DataSourceState value);
    [CompilerGeneratedAttribute]
public DateTime get_StateSince();
    [CompilerGeneratedAttribute]
public void set_StateSince(DateTime value);
    [CompilerGeneratedAttribute]
public Nullable`1<ErrorInfo> get_LastError();
    [CompilerGeneratedAttribute]
public void set_LastError(Nullable`1<ErrorInfo> value);
    public virtual string ToString();
}
[ExtensionAttribute]
public static class LaunchDarkly.Sdk.Server.Interfaces.DataSourceStatusExtensions : object {
    [ExtensionAttribute]
public static string Identifier(DataSourceState state);
    [ExtensionAttribute]
public static string Identifier(ErrorKind errorKind);
}
public class LaunchDarkly.Sdk.Server.Interfaces.DataStoreStatus : ValueType {
    [CompilerGeneratedAttribute]
private bool <Available>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RefreshNeeded>k__BackingField;
    public bool Available { get; public set; }
    public bool RefreshNeeded { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Available();
    [CompilerGeneratedAttribute]
public void set_Available(bool value);
    [CompilerGeneratedAttribute]
public bool get_RefreshNeeded();
    [CompilerGeneratedAttribute]
public void set_RefreshNeeded(bool value);
    public virtual string ToString();
}
public class LaunchDarkly.Sdk.Server.Interfaces.FlagChangeEvent : ValueType {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    public string Key { get; }
    public FlagChangeEvent(string key);
    [CompilerGeneratedAttribute]
public string get_Key();
}
public class LaunchDarkly.Sdk.Server.Interfaces.FlagValueChangeEvent : ValueType {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private LdValue <OldValue>k__BackingField;
    [CompilerGeneratedAttribute]
private LdValue <NewValue>k__BackingField;
    public string Key { get; }
    public LdValue OldValue { get; }
    public LdValue NewValue { get; }
    public FlagValueChangeEvent(string key, LdValue oldValue, LdValue newValue);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public LdValue get_OldValue();
    [CompilerGeneratedAttribute]
public LdValue get_NewValue();
}
public interface LaunchDarkly.Sdk.Server.Interfaces.IBigSegmentStoreStatusProvider {
    public BigSegmentStoreStatus Status { get; }
    public abstract virtual BigSegmentStoreStatus get_Status();
    [CompilerGeneratedAttribute]
public abstract virtual void add_StatusChanged(EventHandler`1<BigSegmentStoreStatus> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_StatusChanged(EventHandler`1<BigSegmentStoreStatus> value);
}
public interface LaunchDarkly.Sdk.Server.Interfaces.IDataSourceStatusProvider {
    public DataSourceStatus Status { get; }
    public abstract virtual DataSourceStatus get_Status();
    [CompilerGeneratedAttribute]
public abstract virtual void add_StatusChanged(EventHandler`1<DataSourceStatus> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_StatusChanged(EventHandler`1<DataSourceStatus> value);
    public abstract virtual bool WaitFor(DataSourceState desiredState, TimeSpan timeout);
    public abstract virtual Task`1<bool> WaitForAsync(DataSourceState desiredState, TimeSpan timeout);
}
public interface LaunchDarkly.Sdk.Server.Interfaces.IDataStoreStatusProvider {
    public DataStoreStatus Status { get; }
    public bool StatusMonitoringEnabled { get; }
    public abstract virtual DataStoreStatus get_Status();
    public abstract virtual bool get_StatusMonitoringEnabled();
    [CompilerGeneratedAttribute]
public abstract virtual void add_StatusChanged(EventHandler`1<DataStoreStatus> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_StatusChanged(EventHandler`1<DataStoreStatus> value);
}
public interface LaunchDarkly.Sdk.Server.Interfaces.IFlagTracker {
    [CompilerGeneratedAttribute]
public abstract virtual void add_FlagChanged(EventHandler`1<FlagChangeEvent> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_FlagChanged(EventHandler`1<FlagChangeEvent> value);
    public abstract virtual EventHandler`1<FlagChangeEvent> FlagValueChangeHandler(string flagKey, Context context, EventHandler`1<FlagValueChangeEvent> handler);
}
public interface LaunchDarkly.Sdk.Server.Interfaces.ILdClient {
    public IBigSegmentStoreStatusProvider BigSegmentStoreStatusProvider { get; }
    public IDataSourceStatusProvider DataSourceStatusProvider { get; }
    public IDataStoreStatusProvider DataStoreStatusProvider { get; }
    public IFlagTracker FlagTracker { get; }
    public bool Initialized { get; }
    public abstract virtual IBigSegmentStoreStatusProvider get_BigSegmentStoreStatusProvider();
    public abstract virtual IDataSourceStatusProvider get_DataSourceStatusProvider();
    public abstract virtual IDataStoreStatusProvider get_DataStoreStatusProvider();
    public abstract virtual IFlagTracker get_FlagTracker();
    public abstract virtual bool get_Initialized();
    public abstract virtual bool BoolVariation(string key, Context context, bool defaultValue);
    public abstract virtual EvaluationDetail`1<bool> BoolVariationDetail(string key, Context context, bool defaultValue);
    public abstract virtual int IntVariation(string key, Context context, int defaultValue);
    public abstract virtual EvaluationDetail`1<int> IntVariationDetail(string key, Context context, int defaultValue);
    public abstract virtual float FloatVariation(string key, Context context, float defaultValue);
    public abstract virtual EvaluationDetail`1<float> FloatVariationDetail(string key, Context context, float defaultValue);
    public abstract virtual double DoubleVariation(string key, Context context, double defaultValue);
    public abstract virtual EvaluationDetail`1<double> DoubleVariationDetail(string key, Context context, double defaultValue);
    public abstract virtual string StringVariation(string key, Context context, string defaultValue);
    public abstract virtual EvaluationDetail`1<string> StringVariationDetail(string key, Context context, string defaultValue);
    public abstract virtual LdValue JsonVariation(string key, Context context, LdValue defaultValue);
    public abstract virtual EvaluationDetail`1<LdValue> JsonVariationDetail(string key, Context context, LdValue defaultValue);
    public abstract virtual MigrationVariation MigrationVariation(string key, Context context, MigrationStage defaultStage);
    public abstract virtual void Identify(Context context);
    public abstract virtual void Track(string name, Context context);
    public abstract virtual void Track(string name, Context context, LdValue data);
    public abstract virtual void Track(string name, Context context, LdValue data, double metricValue);
    public abstract virtual void TrackMigration(MigrationOpTracker tracker);
    public abstract virtual FeatureFlagsState AllFlagsState(Context context, FlagsStateOption[] options);
    public abstract virtual string SecureModeHash(Context context);
    public abstract virtual void Flush();
    public abstract virtual bool FlushAndWait(TimeSpan timeout);
    public abstract virtual Logger GetLogger();
    public abstract virtual bool IsOffline();
}
public class LaunchDarkly.Sdk.Server.Interfaces.ServiceEndpoints : object {
    [CompilerGeneratedAttribute]
private Uri <StreamingBaseUri>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <PollingBaseUri>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <EventsBaseUri>k__BackingField;
    internal Uri StreamingBaseUri { get; }
    internal Uri PollingBaseUri { get; }
    internal Uri EventsBaseUri { get; }
    internal ServiceEndpoints(Uri streamingBaseUri, Uri pollingBaseUri, Uri eventsBaseUri);
    [CompilerGeneratedAttribute]
internal Uri get_StreamingBaseUri();
    [CompilerGeneratedAttribute]
internal Uri get_PollingBaseUri();
    [CompilerGeneratedAttribute]
internal Uri get_EventsBaseUri();
}
public class LaunchDarkly.Sdk.Server.Interfaces.WrapperInfo : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    internal string Name { get; }
    internal string Version { get; }
    internal WrapperInfo(string name, string version);
    [CompilerGeneratedAttribute]
internal string get_Name();
    [CompilerGeneratedAttribute]
internal string get_Version();
}
internal static class LaunchDarkly.Sdk.Server.Internal.BigSegments.BigSegmentsInternalTypes : object {
    private static SHA256 _hasher;
    private static BigSegmentsInternalTypes();
    internal static string BigSegmentContextKeyHash(string userKey);
    internal static string MakeBigSegmentRef(Segment s);
}
internal class LaunchDarkly.Sdk.Server.Internal.BigSegments.BigSegmentStoreStatusProviderImpl : object {
    private BigSegmentStoreWrapper _storeWrapper;
    public BigSegmentStoreStatus Status { get; }
    internal BigSegmentStoreStatusProviderImpl(BigSegmentStoreWrapper storeWrapper);
    public sealed virtual BigSegmentStoreStatus get_Status();
    public sealed virtual void add_StatusChanged(EventHandler`1<BigSegmentStoreStatus> value);
    public sealed virtual void remove_StatusChanged(EventHandler`1<BigSegmentStoreStatus> value);
}
internal class LaunchDarkly.Sdk.Server.Internal.BigSegments.BigSegmentStoreWrapper : object {
    private IBigSegmentStore _store;
    private TimeSpan _staleTime;
    private ICache`2<string, IMembership> _cache;
    private TaskExecutor _taskExecutor;
    private CancellationTokenSource _pollCanceller;
    private ReaderWriterLockSlim _lock;
    private Logger _logger;
    private Task`1<BigSegmentStoreStatus> _initialPoll;
    private Nullable`1<BigSegmentStoreStatus> _lastStatus;
    [CompilerGeneratedAttribute]
private EventHandler`1<BigSegmentStoreStatus> StatusChanged;
    internal BigSegmentStoreWrapper(BigSegmentsConfiguration config, TaskExecutor taskExecutor, Logger logger);
    [CompilerGeneratedAttribute]
internal void add_StatusChanged(EventHandler`1<BigSegmentStoreStatus> value);
    [CompilerGeneratedAttribute]
internal void remove_StatusChanged(EventHandler`1<BigSegmentStoreStatus> value);
    public sealed virtual void Dispose();
    internal BigSegmentsQueryResult GetMembership(string contextKey);
    private IMembership QueryMembership(string contextKey);
    internal BigSegmentStoreStatus GetStatus();
    [AsyncStateMachineAttribute("LaunchDarkly.Sdk.Server.Internal.BigSegments.BigSegmentStoreWrapper/<PollStoreAndUpdateStatusAsync>d__17")]
private Task`1<BigSegmentStoreStatus> PollStoreAndUpdateStatusAsync();
    private bool IsStale(UnixMillisecondTime updateTime);
}
internal class LaunchDarkly.Sdk.Server.Internal.BigSegments.MembershipBuilder : ValueType {
    private bool _nonEmpty;
    private string _firstValue;
    private bool _firstValueIncluded;
    private SortedDictionary`2<string, bool> _dict;
    internal void AddRefs(IEnumerable`1<string> segmentRefs, bool included);
    internal IMembership Build();
}
internal static class LaunchDarkly.Sdk.Server.Internal.ComponentsImpl : object {
}
internal class LaunchDarkly.Sdk.Server.Internal.DataSources.DataSourceOutageTracker : object {
    private Logger _log;
    private TimeSpan _loggingTimeout;
    private object _trackerLock;
    private Dictionary`2<ErrorInfo, int> _errorCounts;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _inOutage;
    private TaskCompletionSource`1 modreq(System.Runtime.CompilerServices.IsVolatile) _outageEndedSignal;
    internal DataSourceOutageTracker(Logger log, TimeSpan loggingTimeout);
    internal void TrackDataSourceState(DataSourceState newState, Nullable`1<ErrorInfo> newError);
    private void RecordError(Nullable`1<ErrorInfo> newError);
    [AsyncStateMachineAttribute("LaunchDarkly.Sdk.Server.Internal.DataSources.DataSourceOutageTracker/<WaitForTimeout>d__9")]
private Task WaitForTimeout(Task outageEnded);
    private string DescribeErrorCount(ErrorInfo errorInfo, int count);
    [CompilerGeneratedAttribute]
private Task <TrackDataSourceState>b__7_0();
    [CompilerGeneratedAttribute]
private string <WaitForTimeout>b__9_0(KeyValuePair`2<ErrorInfo, int> kv);
}
internal class LaunchDarkly.Sdk.Server.Internal.DataSources.DataSourceStatusProviderImpl : object {
    private DataSourceUpdatesImpl _dataSourceUpdates;
    public DataSourceStatus Status { get; }
    internal DataSourceStatusProviderImpl(DataSourceUpdatesImpl dataSourceUpdates);
    public sealed virtual DataSourceStatus get_Status();
    public sealed virtual void add_StatusChanged(EventHandler`1<DataSourceStatus> value);
    public sealed virtual void remove_StatusChanged(EventHandler`1<DataSourceStatus> value);
    public sealed virtual bool WaitFor(DataSourceState desiredState, TimeSpan timeout);
    public sealed virtual Task`1<bool> WaitForAsync(DataSourceState desiredState, TimeSpan timeout);
}
internal class LaunchDarkly.Sdk.Server.Internal.DataSources.DataSourceUpdatesImpl : object {
    private IDataStore _store;
    private IDataStoreStatusProvider _dataStoreStatusProvider;
    private TaskExecutor _taskExecutor;
    private StateMonitor`2<DataSourceStatus, StateAndError> _status;
    private Logger _log;
    private DependencyTracker _dependencyTracker;
    private DataSourceOutageTracker _outageTracker;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _lastStoreUpdateFailed;
    [CompilerGeneratedAttribute]
private EventHandler`1<DataSourceStatus> StatusChanged;
    [CompilerGeneratedAttribute]
private EventHandler`1<FlagChangeEvent> FlagChanged;
    public IDataStoreStatusProvider DataStoreStatusProvider { get; }
    internal DataSourceStatus LastStatus { get; }
    internal DataSourceUpdatesImpl(IDataStore store, IDataStoreStatusProvider dataStoreStatusProvider, TaskExecutor taskExecutor, Logger baseLogger, Nullable`1<TimeSpan> outageLoggingTimeout);
    public sealed virtual IDataStoreStatusProvider get_DataStoreStatusProvider();
    internal DataSourceStatus get_LastStatus();
    [CompilerGeneratedAttribute]
internal void add_StatusChanged(EventHandler`1<DataSourceStatus> value);
    [CompilerGeneratedAttribute]
internal void remove_StatusChanged(EventHandler`1<DataSourceStatus> value);
    [CompilerGeneratedAttribute]
internal void add_FlagChanged(EventHandler`1<FlagChangeEvent> value);
    [CompilerGeneratedAttribute]
internal void remove_FlagChanged(EventHandler`1<FlagChangeEvent> value);
    public sealed virtual bool Init(FullDataSet`1<ItemDescriptor> allData);
    public sealed virtual bool Upsert(DataKind kind, string key, ItemDescriptor item);
    private static Nullable`1<DataSourceStatus> MaybeUpdateStatus(DataSourceStatus oldStatus, StateAndError update);
    public sealed virtual void UpdateStatus(DataSourceState newState, Nullable`1<ErrorInfo> newError);
    public void Dispose();
    [AsyncStateMachineAttribute("LaunchDarkly.Sdk.Server.Internal.DataSources.DataSourceUpdatesImpl/<WaitForAsync>d__25")]
internal Task`1<bool> WaitForAsync(DataSourceState desiredState, TimeSpan timeout);
    private bool HasFlagChangeListeners();
    private void SendChangeEvents(IEnumerable`1<KindAndKey> affectedItems);
    private void UpdateDependencyTrackerFromFullDataSet(FullDataSet`1<ItemDescriptor> allData);
    private ImmutableDictionary`2<DataKind, ImmutableDictionary`2<string, ItemDescriptor>> FullDataSetToMap(FullDataSet`1<ItemDescriptor> allData);
    private ISet`1<KindAndKey> ComputeChangedItemsForFullDataSet(ImmutableDictionary`2<DataKind, ImmutableDictionary`2<string, ItemDescriptor>> oldDataMap, ImmutableDictionary`2<DataKind, ImmutableDictionary`2<string, ItemDescriptor>> newDataMap);
    private void ReportStoreFailure(Exception e);
}
internal class LaunchDarkly.Sdk.Server.Internal.DataSources.DependencyTracker : object {
    private Dictionary`2<KindAndKey, ISet`1<KindAndKey>> _dependenciesFrom;
    private Dictionary`2<KindAndKey, ISet`1<KindAndKey>> _dependenciesTo;
    internal void Clear();
    internal void UpdateDependenciesFrom(DataKind kind, string fromKey, ItemDescriptor fromItem);
    internal void AddAffectedItems(ISet`1<KindAndKey> itemsOut, KindAndKey initialModifiedItem);
    internal static ISet`1<KindAndKey> ComputeDependenciesFrom(DataKind fromKind, ItemDescriptor fromItem);
    private static IEnumerable`1<string> SegmentKeysFromClauses(IEnumerable`1<Clause> clauses);
    private static IEnumerable`1<KindAndKey> KindAndKeys(DataKind kind, IEnumerable`1<string> keys);
}
internal class LaunchDarkly.Sdk.Server.Internal.DataSources.FeatureRequestor : object {
    private Uri _allUri;
    private HttpClient _httpClient;
    private HttpProperties _httpProperties;
    private TimeSpan _connectTimeout;
    private Dictionary`2<Uri, EntityTagHeaderValue> _etags;
    private Logger _log;
    internal FeatureRequestor(LdClientContext context, Uri baseUri);
    private sealed virtual override void System.IDisposable.Dispose();
    private void Dispose(bool disposing);
    [AsyncStateMachineAttribute("LaunchDarkly.Sdk.Server.Internal.DataSources.FeatureRequestor/<GetAllDataAsync>d__9")]
public sealed virtual Task`1<Nullable`1<FullDataSet`1<ItemDescriptor>>> GetAllDataAsync();
    private FullDataSet`1<ItemDescriptor> ParseAllData(Byte[] json);
    [AsyncStateMachineAttribute("LaunchDarkly.Sdk.Server.Internal.DataSources.FeatureRequestor/<GetAsync>d__11")]
private Task`1<Byte[]> GetAsync(Uri path);
}
internal class LaunchDarkly.Sdk.Server.Internal.DataSources.FileDataSource : object {
    private IDataSourceUpdates _dataSourceUpdates;
    private List`1<string> _paths;
    private IDisposable _reloader;
    private FlagFileParser _parser;
    private FlagFileDataMerger _dataMerger;
    private IFileReader _fileReader;
    private bool _skipMissingPaths;
    private Logger _logger;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _started;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _loadedValidData;
    private Int32 modreq(System.Runtime.CompilerServices.IsVolatile) _lastVersion;
    public bool Initialized { get; }
    public FileDataSource(IDataSourceUpdates dataSourceUpdates, IFileReader fileReader, List`1<string> paths, bool autoUpdate, Func`2<string, object> alternateParser, bool skipMissingPaths, DuplicateKeysHandling duplicateKeysHandling, Logger logger);
    public sealed virtual Task`1<bool> Start();
    public sealed virtual bool get_Initialized();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    private void LoadAll();
    private void TriggerReload();
}
internal class LaunchDarkly.Sdk.Server.Internal.DataSources.FileWatchingReloader : object {
    private ISet`1<string> _filePaths;
    private Action _reload;
    private List`1<FileSystemWatcher> _watchers;
    public FileWatchingReloader(List`1<string> paths, Action reload);
    private void ChangedPath(string path);
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_0(object s, FileSystemEventArgs args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_1(object s, FileSystemEventArgs args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_2(object s, RenamedEventArgs args);
}
internal class LaunchDarkly.Sdk.Server.Internal.DataSources.FlagFileDataMerger : object {
    private DuplicateKeysHandling _duplicateKeysHandling;
    public FlagFileDataMerger(DuplicateKeysHandling duplicateKeysHandling);
    public void AddToData(FullDataSet`1<ItemDescriptor> data, IDictionary`2<string, ItemDescriptor> flagsOut, IDictionary`2<string, ItemDescriptor> segmentsOut);
}
internal class LaunchDarkly.Sdk.Server.Internal.DataSources.FlagFileParser : object {
    private Func`2<string, object> _alternateParser;
    public FlagFileParser(Func`2<string, object> alternateParser);
    public FullDataSet`1<ItemDescriptor> Parse(string content, int version);
    private static FullDataSet`1<ItemDescriptor> ParseJson(string data, int version);
    private static FullDataSet`1<ItemDescriptor> ParseJson(Utf8JsonReader& r, int version);
    internal static FeatureFlag FlagWithVersion(FeatureFlag flag, int version);
    internal static object FlagWithValue(string key, LdValue value, int version);
    internal static Segment SegmentWithVersion(Segment segment, int version);
}
internal class LaunchDarkly.Sdk.Server.Internal.DataSources.FlagFileReader : object {
    private static int ReadFileRetryDelay;
    private static int ReadFileRetryAttempts;
    public static IFileReader Instance;
    private static FlagFileReader();
    public sealed virtual string ReadAllText(string path);
    private static bool IsFileLocked(IOException exception);
}
internal interface LaunchDarkly.Sdk.Server.Internal.DataSources.IFeatureRequestor {
    public abstract virtual Task`1<Nullable`1<FullDataSet`1<ItemDescriptor>>> GetAllDataAsync();
}
[IsReadOnlyAttribute]
internal class LaunchDarkly.Sdk.Server.Internal.DataSources.KindAndKey : ValueType {
    [CompilerGeneratedAttribute]
private DataKind <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    public DataKind Kind { get; }
    public string Key { get; }
    internal KindAndKey(DataKind kind, string key);
    [CompilerGeneratedAttribute]
public DataKind get_Kind();
    [CompilerGeneratedAttribute]
public string get_Key();
    public sealed virtual bool Equals(KindAndKey other);
    public virtual int GetHashCode();
}
internal class LaunchDarkly.Sdk.Server.Internal.DataSources.PollingDataSource : object {
    private IFeatureRequestor _featureRequestor;
    private IDataSourceUpdates _dataSourceUpdates;
    private TaskExecutor _taskExecutor;
    private TimeSpan _pollInterval;
    private AtomicBoolean _initialized;
    private TaskCompletionSource`1<bool> _initTask;
    private Logger _log;
    private CancellationTokenSource _canceller;
    public bool Initialized { get; }
    internal PollingDataSource(LdClientContext context, IFeatureRequestor featureRequestor, IDataSourceUpdates dataSourceUpdates, TimeSpan pollInterval);
    public sealed virtual bool get_Initialized();
    public sealed virtual Task`1<bool> Start();
    [AsyncStateMachineAttribute("LaunchDarkly.Sdk.Server.Internal.DataSources.PollingDataSource/<UpdateTaskAsync>d__12")]
private Task UpdateTaskAsync();
    private sealed virtual override void System.IDisposable.Dispose();
    private void Dispose(bool disposing);
    [CompilerGeneratedAttribute]
private Task <Start>b__11_0();
}
internal class LaunchDarkly.Sdk.Server.Internal.DataSources.StreamingDataSource : object {
    private static TimeSpan LaunchDarklyStreamReadTimeout;
    private static string PUT;
    private static string PATCH;
    private static string DELETE;
    private IDataSourceUpdates _dataSourceUpdates;
    private HttpConfiguration _httpConfig;
    private TimeSpan _initialReconnectDelay;
    private TaskCompletionSource`1<bool> _initTask;
    private IDiagnosticStore _diagnosticStore;
    private AtomicBoolean _initialized;
    private Uri _streamUri;
    private bool _storeStatusMonitoringEnabled;
    private Logger _log;
    private IEventSource _es;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _lastStoreUpdateFailed;
    internal DateTime _esStarted;
    public bool Initialized { get; }
    internal StreamingDataSource(LdClientContext context, IDataSourceUpdates dataSourceUpdates, Uri baseUri, TimeSpan initialReconnectDelay);
    private static StreamingDataSource();
    public sealed virtual bool get_Initialized();
    public sealed virtual Task`1<bool> Start();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    private IEventSource CreateEventSource(Uri uri, HttpConfiguration httpConfig);
    private void RecordStreamInit(bool failed);
    private void OnOpen(object sender, StateChangedEventArgs e);
    private void OnMessage(object sender, MessageReceivedEventArgs e);
    private void OnError(object sender, ExceptionEventArgs e);
    private void HandleMessage(string messageType, Byte[] messageData);
    private void OnDataStoreStatusChanged(object sender, DataStoreStatus newStatus);
    [CompilerGeneratedAttribute]
private Task <Start>b__20_0();
}
internal static class LaunchDarkly.Sdk.Server.Internal.DataSources.StreamProcessorEvents : object {
    private static String[] _putRequiredProperties;
    private static String[] _patchRequiredProperties;
    private static String[] _deleteRequiredProperties;
    private static StreamProcessorEvents();
    internal static PutData ParsePutData(Byte[] json);
    internal static FullDataSet`1<ItemDescriptor> ParseFullDataset(Utf8JsonReader& r);
    internal static PatchData ParsePatchData(Byte[] json);
    internal static DeleteData ParseDeleteData(Byte[] json);
    internal static string PathNameForKind(DataKind kind);
    internal static bool TryParsePath(string path, DataKind& kindOut, String& keyOut);
}
internal class LaunchDarkly.Sdk.Server.Internal.DataStores.CacheKey : ValueType {
    public DataKind Kind;
    public string Key;
    public CacheKey(DataKind kind, string key);
    public sealed virtual bool Equals(CacheKey other);
    public virtual int GetHashCode();
}
internal class LaunchDarkly.Sdk.Server.Internal.DataStores.DataStoreCacheConfig : object {
    public static TimeSpan DefaultTtl;
    [CompilerGeneratedAttribute]
private TimeSpan <Ttl>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaximumEntries>k__BackingField;
    public static DataStoreCacheConfig Disabled;
    public static DataStoreCacheConfig Enabled;
    public TimeSpan Ttl { get; private set; }
    public bool IsEnabled { get; }
    public bool IsInfiniteTtl { get; }
    public Nullable`1<int> MaximumEntries { get; }
    internal DataStoreCacheConfig(TimeSpan ttl, Nullable`1<int> maximumEntries);
    private static DataStoreCacheConfig();
    [CompilerGeneratedAttribute]
public TimeSpan get_Ttl();
    [CompilerGeneratedAttribute]
private void set_Ttl(TimeSpan value);
    public bool get_IsEnabled();
    public bool get_IsInfiniteTtl();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaximumEntries();
    public DataStoreCacheConfig WithTtl(TimeSpan ttl);
    public DataStoreCacheConfig WithTtlMillis(double millis);
    public DataStoreCacheConfig WithTtlSeconds(double seconds);
    public DataStoreCacheConfig WithMaximumEntries(Nullable`1<int> maximumEntries);
}
internal abstract class LaunchDarkly.Sdk.Server.Internal.DataStores.DataStoreSorter : object {
    public static FullDataSet`1<ItemDescriptor> SortAllCollections(FullDataSet`1<ItemDescriptor> allData);
    private static IEnumerable`1<KeyValuePair`2<string, ItemDescriptor>> SortCollection(DataKind kind, IEnumerable`1<KeyValuePair`2<string, ItemDescriptor>> input);
    private static int GetDataKindOrdering(DataKind kind);
    private static Func`2<object, IEnumerable`1<string>> GetDependenciesFunction(DataKind kind);
    private static void AddWithDependenciesFirst(string key, ItemDescriptor item, IDictionary`2<string, ItemDescriptor> remainingItems, Func`2<object, IEnumerable`1<string>> dependencyKeysFn, OutputOrdering output);
}
internal class LaunchDarkly.Sdk.Server.Internal.DataStores.DataStoreStatusProviderImpl : object {
    private IDataStore _dataStore;
    private DataStoreUpdatesImpl _dataStoreUpdates;
    public DataStoreStatus Status { get; }
    public bool StatusMonitoringEnabled { get; }
    internal DataStoreStatusProviderImpl(IDataStore dataStore, DataStoreUpdatesImpl dataStoreUpdates);
    public sealed virtual DataStoreStatus get_Status();
    public sealed virtual bool get_StatusMonitoringEnabled();
    public sealed virtual void add_StatusChanged(EventHandler`1<DataStoreStatus> value);
    public sealed virtual void remove_StatusChanged(EventHandler`1<DataStoreStatus> value);
}
internal class LaunchDarkly.Sdk.Server.Internal.DataStores.DataStoreUpdatesImpl : object {
    private TaskExecutor _taskExecutor;
    private StateMonitor`2<DataStoreStatus, DataStoreStatus> _status;
    [CompilerGeneratedAttribute]
private EventHandler`1<DataStoreStatus> StatusChanged;
    internal DataStoreStatus Status { get; }
    internal DataStoreUpdatesImpl(TaskExecutor taskExecutor, Logger log);
    internal DataStoreStatus get_Status();
    [CompilerGeneratedAttribute]
internal void add_StatusChanged(EventHandler`1<DataStoreStatus> value);
    [CompilerGeneratedAttribute]
internal void remove_StatusChanged(EventHandler`1<DataStoreStatus> value);
    private Nullable`1<DataStoreStatus> MaybeUpdate(DataStoreStatus lastValue, DataStoreStatus newValue);
    public sealed virtual void UpdateStatus(DataStoreStatus newStatus);
}
internal class LaunchDarkly.Sdk.Server.Internal.DataStores.InMemoryDataStore : object {
    private object WriterLock;
    private ImmutableDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) Items;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _initialized;
    public bool StatusMonitoringEnabled { get; }
    public sealed virtual bool get_StatusMonitoringEnabled();
    public sealed virtual void Init(FullDataSet`1<ItemDescriptor> data);
    public sealed virtual Nullable`1<ItemDescriptor> Get(DataKind kind, string key);
    public sealed virtual KeyedItems`1<ItemDescriptor> GetAll(DataKind kind);
    public sealed virtual bool Upsert(DataKind kind, string key, ItemDescriptor item);
    public sealed virtual bool Initialized();
    public sealed virtual void Dispose();
}
internal class LaunchDarkly.Sdk.Server.Internal.DataStores.PersistentDataStoreStatusManager : object {
    internal static TimeSpan PollInterval;
    private bool _refreshOnRecovery;
    private Func`1<bool> _statusPollFn;
    private Action`1<DataStoreStatus> _statusUpdater;
    private TaskExecutor _taskExecutor;
    private Logger _log;
    private AtomicBoolean _lastAvailable;
    private object _pollerLock;
    private CancellationTokenSource _pollCanceller;
    internal PersistentDataStoreStatusManager(bool refreshOnRecovery, bool availableNow, Func`1<bool> statusPollFn, Action`1<DataStoreStatus> statusUpdater, TaskExecutor taskExecutor, Logger log);
    private static PersistentDataStoreStatusManager();
    internal void UpdateAvailability(bool available);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private Task <UpdateAvailability>b__10_0();
}
internal class LaunchDarkly.Sdk.Server.Internal.DataStores.PersistentStoreAsyncAdapter : object {
    private IPersistentDataStoreAsync _coreAsync;
    private static TaskFactory _taskFactory;
    internal PersistentStoreAsyncAdapter(IPersistentDataStoreAsync coreAsync);
    private static PersistentStoreAsyncAdapter();
    public sealed virtual void Init(FullDataSet`1<SerializedItemDescriptor> allData);
    public sealed virtual Nullable`1<SerializedItemDescriptor> Get(DataKind kind, string key);
    public sealed virtual KeyedItems`1<SerializedItemDescriptor> GetAll(DataKind kind);
    public sealed virtual bool Upsert(DataKind kind, string key, SerializedItemDescriptor item);
    public sealed virtual bool Initialized();
    public sealed virtual bool IsStoreAvailable();
    public sealed virtual void Dispose();
    private void WaitSafely(Func`1<Task> taskFn);
    private T WaitSafely(Func`1<Task`1<T>> taskFn);
    [CompilerGeneratedAttribute]
private Task`1<bool> <Initialized>b__7_0();
    [CompilerGeneratedAttribute]
private Task`1<bool> <IsStoreAvailable>b__8_0();
}
internal class LaunchDarkly.Sdk.Server.Internal.DataStores.PersistentStoreWrapper : object {
    private IPersistentDataStore _core;
    private DataStoreCacheConfig _caching;
    private IDataStoreUpdates _dataStoreUpdates;
    private Logger _log;
    private ICache`2<CacheKey, Nullable`1<ItemDescriptor>> _itemCache;
    private ICache`2<DataKind, ImmutableDictionary`2<string, ItemDescriptor>> _allCache;
    private ISingleValueCache`1<bool> _initCache;
    private bool _cacheIndefinitely;
    private List`1<DataKind> _cachedDataKinds;
    private PersistentDataStoreStatusManager _statusManager;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _inited;
    public bool StatusMonitoringEnabled { get; }
    internal PersistentStoreWrapper(IPersistentDataStoreAsync coreAsync, DataStoreCacheConfig caching, IDataStoreUpdates dataStoreUpdates, TaskExecutor taskExecutor, Logger log);
    internal PersistentStoreWrapper(IPersistentDataStore core, DataStoreCacheConfig caching, IDataStoreUpdates dataStoreUpdates, TaskExecutor taskExecutor, Logger log);
    public sealed virtual bool get_StatusMonitoringEnabled();
    public sealed virtual bool Initialized();
    public sealed virtual void Init(FullDataSet`1<ItemDescriptor> items);
    public sealed virtual Nullable`1<ItemDescriptor> Get(DataKind kind, string key);
    public sealed virtual KeyedItems`1<ItemDescriptor> GetAll(DataKind kind);
    public sealed virtual bool Upsert(DataKind kind, string key, ItemDescriptor item);
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    private Nullable`1<ItemDescriptor> GetInternalForCache(CacheKey key);
    private Nullable`1<ItemDescriptor> GetAndDeserializeItem(DataKind kind, string key);
    private ImmutableDictionary`2<string, ItemDescriptor> GetAllAndDeserialize(DataKind kind);
    private SerializedItemDescriptor Serialize(DataKind kind, ItemDescriptor itemDesc);
    private KeyedItems`1<SerializedItemDescriptor> SerializeAll(DataKind kind, IEnumerable`1<KeyValuePair`2<string, ItemDescriptor>> items);
    private ItemDescriptor Deserialize(DataKind kind, SerializedItemDescriptor serializedItemDesc);
    private Exception InitCore(FullDataSet`1<SerializedItemDescriptor> allData);
    private void ProcessError(Exception e);
    private bool PollAvailabilityAfterOutage();
    [CompilerGeneratedAttribute]
private KeyedItems`1<SerializedItemDescriptor> <Init>b__16_1(KeyValuePair`2<DataKind, KeyedItems`1<ItemDescriptor>> kindAndItems);
}
internal static class LaunchDarkly.Sdk.Server.Internal.Evaluation.Bucketing : object {
    private static float longScale;
    private static Bucketing();
    internal static Nullable`1<float> ComputeBucketValue(bool isExperiment, Nullable`1<int> seed, Context& context, Nullable`1& contextKind, string key, Nullable`1& attr, string salt);
    private static string Hash(string s);
}
internal class LaunchDarkly.Sdk.Server.Internal.Evaluation.Evaluator : object {
    internal static string FlagKeyToTriggerErrorForTesting;
    internal static string ErrorMessageForTesting;
    internal Func`2<string, FeatureFlag> FeatureFlagGetter;
    internal Func`2<string, Segment> SegmentGetter;
    internal Func`2<string, BigSegmentsQueryResult> BigSegmentsGetter;
    internal Logger Logger;
    internal Evaluator(Func`2<string, FeatureFlag> featureFlagGetter, Func`2<string, Segment> segmentGetter, Func`2<string, BigSegmentsQueryResult> bigSegmentsGetter, Logger logger);
    public EvalResult Evaluate(FeatureFlag& flag, Context& context);
    private EvaluationDetail`1<LdValue> EvaluateInternal(EvalState& state, FeatureFlag flag);
    private static EvaluationDetail`1<LdValue> ErrorResult(EvaluationErrorKind kind);
    private EvaluationDetail`1<LdValue> GetVariation(FeatureFlag flag, int variation, EvaluationReason& reason);
    private EvaluationDetail`1<LdValue> GetOffValue(FeatureFlag flag, EvaluationReason& reason);
    private Nullable`1<EvaluationReason> CheckPrerequisites(EvalState& state, FeatureFlag flag);
    private EvaluationDetail`1<LdValue> GetValueForVariationOrRollout(EvalState& state, FeatureFlag flag, Nullable`1<int> variation, Nullable`1& rollout, EvaluationReason& reason);
    private bool MatchRule(EvalState& state, FlagRule& rule);
    private bool MatchClause(EvalState& state, Clause& clause);
    private bool MatchClauseNoSegments(EvalState& state, Clause& clause);
    private bool MatchClauseByKind(EvalState& state, Clause& clause);
    private static bool MaybeNegate(Clause& clause, bool b);
    internal static bool ClauseMatchAny(Clause& clause, LdValue& contextValue);
    private bool MatchSegment(EvalState& state, Segment& segment);
    private Nullable`1<bool> MatchUnboundedSegment(EvalState& state, Segment& segment);
    private bool MatchSegmentRule(EvalState& state, Segment& segment, SegmentRule& segmentRule);
    private Nullable`1<int> MatchTargets(EvalState& state, FeatureFlag flag);
    private static bool TargetHasKey(Target& t, string key);
}
internal static class LaunchDarkly.Sdk.Server.Internal.Evaluation.EvaluatorTypes : object {
}
internal class LaunchDarkly.Sdk.Server.Internal.Events.DefaultContextDeduplicator : object {
    private LRUCacheSet`1<string> _contextKeys;
    private TimeSpan _flushInterval;
    public Nullable`1<TimeSpan> FlushInterval { get; }
    internal DefaultContextDeduplicator(int contextKeysCapacity, TimeSpan contextKeysFlushInterval);
    public sealed virtual Nullable`1<TimeSpan> get_FlushInterval();
    public bool ProcessContext(Context& context);
    public sealed virtual void Flush();
    private sealed virtual override bool LaunchDarkly.Sdk.Internal.Events.IContextDeduplicator.ProcessContext(Context& modreq(System.Runtime.InteropServices.InAttribute) context);
}
internal class LaunchDarkly.Sdk.Server.Internal.Events.DefaultEventProcessorWrapper : object {
    private EventProcessor _impl;
    internal DefaultEventProcessorWrapper(EventProcessor impl);
    public sealed virtual void RecordEvaluationEvent(EvaluationEvent e);
    public sealed virtual void RecordIdentifyEvent(IdentifyEvent e);
    public sealed virtual void RecordCustomEvent(CustomEvent e);
    private static MigrationOpEvent ConvertMigrationOpEvent(MigrationOpEvent inEvent);
    public sealed virtual void RecordMigrationEvent(MigrationOpEvent e);
    public sealed virtual void Flush();
    public sealed virtual bool FlushAndWait(TimeSpan timeout);
    public sealed virtual void Dispose();
}
internal class LaunchDarkly.Sdk.Server.Internal.Events.EventFactory : object {
    private bool _withReasons;
    internal static EventFactory Default;
    internal static EventFactory DefaultWithReasons;
    internal EventFactory(bool withReasons);
    private static EventFactory();
    internal EvaluationEvent NewEvaluationEvent(FeatureFlag flag, Context context, EvaluationDetail`1<LdValue> result, LdValue defaultValue);
    internal EvaluationEvent NewDefaultValueEvaluationEvent(FeatureFlag flag, Context context, LdValue defaultValue, EvaluationErrorKind errorKind);
    internal EvaluationEvent NewUnknownFlagEvaluationEvent(string flagKey, Context context, LdValue defaultValue, EvaluationErrorKind errorKind);
    internal EvaluationEvent NewPrerequisiteEvaluationEvent(FeatureFlag prereqFlagBeingEvaluated, Context context, EvaluationDetail`1<LdValue> result, string flagKeyThatReferencesPrerequisite);
    internal static bool IsExperiment(FeatureFlag flag, Nullable`1<EvaluationReason> reason);
}
internal class LaunchDarkly.Sdk.Server.Internal.Events.ServerDiagnosticStore : DiagnosticStoreBase {
    private Configuration _config;
    private LdClientContext _context;
    protected string SdkKeyOrMobileKey { get; }
    protected string SdkName { get; }
    protected IEnumerable`1<LdValue> ConfigProperties { get; }
    protected string DotNetTargetFramework { get; }
    protected HttpProperties HttpProperties { get; }
    protected Type TypeOfLdClient { get; }
    internal ServerDiagnosticStore(Configuration config, LdClientContext context);
    protected virtual string get_SdkKeyOrMobileKey();
    protected virtual string get_SdkName();
    protected virtual IEnumerable`1<LdValue> get_ConfigProperties();
    protected virtual string get_DotNetTargetFramework();
    protected virtual HttpProperties get_HttpProperties();
    protected virtual Type get_TypeOfLdClient();
    [IteratorStateMachineAttribute("LaunchDarkly.Sdk.Server.Internal.Events.ServerDiagnosticStore/<GetConfigProperties>d__15")]
private IEnumerable`1<LdValue> GetConfigProperties();
    private LdValue GetComponentDescription(object component, string componentName);
    internal static string GetDotNetTargetFramework();
}
internal class LaunchDarkly.Sdk.Server.Internal.FlagTrackerImpl : object {
    private DataSourceUpdatesImpl _dataSourceUpdates;
    private Func`3<string, Context, LdValue> _evaluateFn;
    internal FlagTrackerImpl(DataSourceUpdatesImpl dataSourceUpdates, Func`3<string, Context, LdValue> evaluateFn);
    public sealed virtual void add_FlagChanged(EventHandler`1<FlagChangeEvent> value);
    public sealed virtual void remove_FlagChanged(EventHandler`1<FlagChangeEvent> value);
    public sealed virtual EventHandler`1<FlagChangeEvent> FlagValueChangeHandler(string flagKey, Context context, EventHandler`1<FlagValueChangeEvent> handler);
}
internal class LaunchDarkly.Sdk.Server.Internal.Hooks.Executor.Executor : object {
    private List`1<Hook> _hooks;
    private IStageExecutor`1<EvaluationSeriesContext> _beforeEvaluation;
    private IStageExecutor`2<EvaluationSeriesContext, EvaluationDetail`1<LdValue>> _afterEvaluation;
    public Executor(Logger logger, IEnumerable`1<Hook> hooks);
    public sealed virtual ValueTuple`2<EvaluationDetail`1<T>, FeatureFlag> EvaluationSeries(EvaluationSeriesContext context, Converter`1<T> converter, Func`1<ValueTuple`2<EvaluationDetail`1<T>, FeatureFlag>> evaluate);
    public sealed virtual void Dispose();
}
internal class LaunchDarkly.Sdk.Server.Internal.Hooks.Executor.NoopExecutor : object {
    public sealed virtual ValueTuple`2<EvaluationDetail`1<T>, FeatureFlag> EvaluationSeries(EvaluationSeriesContext context, Converter`1<T> converter, Func`1<ValueTuple`2<EvaluationDetail`1<T>, FeatureFlag>> evaluate);
    public sealed virtual void Dispose();
}
internal interface LaunchDarkly.Sdk.Server.Internal.Hooks.Interfaces.IHookExecutor {
    public abstract virtual ValueTuple`2<EvaluationDetail`1<T>, FeatureFlag> EvaluationSeries(EvaluationSeriesContext context, Converter`1<T> converter, Func`1<ValueTuple`2<EvaluationDetail`1<T>, FeatureFlag>> evaluate);
}
internal interface LaunchDarkly.Sdk.Server.Internal.Hooks.Interfaces.IStageExecutor`1 {
    public abstract virtual IEnumerable`1<ImmutableDictionary`2<string, object>> Execute(TContext context, IEnumerable`1<ImmutableDictionary`2<string, object>> data);
}
internal interface LaunchDarkly.Sdk.Server.Internal.Hooks.Interfaces.IStageExecutor`2 {
    public abstract virtual IEnumerable`1<ImmutableDictionary`2<string, object>> Execute(TContext context, TExtra extra, IEnumerable`1<ImmutableDictionary`2<string, object>> data);
}
internal class LaunchDarkly.Sdk.Server.Internal.Hooks.Series.AfterEvaluation : EvaluationStage {
    private IEnumerable`1<Hook> _hooks;
    public AfterEvaluation(Logger logger, IEnumerable`1<Hook> hooks, Order order);
    public sealed virtual IEnumerable`1<ImmutableDictionary`2<string, object>> Execute(EvaluationSeriesContext context, EvaluationDetail`1<LdValue> detail, IEnumerable`1<ImmutableDictionary`2<string, object>> seriesData);
}
internal class LaunchDarkly.Sdk.Server.Internal.Hooks.Series.BeforeEvaluation : EvaluationStage {
    private IEnumerable`1<Hook> _hooks;
    public BeforeEvaluation(Logger logger, IEnumerable`1<Hook> hooks, Order order);
    public sealed virtual IEnumerable`1<ImmutableDictionary`2<string, object>> Execute(EvaluationSeriesContext context, IEnumerable`1<ImmutableDictionary`2<string, object>> _);
}
internal class LaunchDarkly.Sdk.Server.Internal.Hooks.Series.EvaluationStage : object {
    protected Order _order;
    private Logger _logger;
    protected EvaluationStage(Logger logger, Order order);
    protected void LogFailure(EvaluationSeriesContext context, Hook h, Stage stage, Exception e);
}
internal static class LaunchDarkly.Sdk.Server.Internal.LogNames : object {
    internal static string DefaultBase;
    internal static string BigSegmentsSubLog;
    internal static string DataSourceSubLog;
    internal static string DataStoreSubLog;
    internal static string EvaluationSubLog;
    internal static string EventsSubLog;
    internal static string HooksSubLog;
}
internal class LaunchDarkly.Sdk.Server.Internal.LRUCacheSet`1 : object {
    private int _capacity;
    private Dictionary`2<A, LinkedListNode`1<A>> _map;
    private LinkedList`1<A> _lruList;
    public LRUCacheSet`1(int capacity);
    public bool Add(A value);
    public void Clear();
}
internal class LaunchDarkly.Sdk.Server.Internal.Model.Clause : ValueType {
    [CompilerGeneratedAttribute]
private Nullable`1<ContextKind> <ContextKind>k__BackingField;
    [CompilerGeneratedAttribute]
private AttributeRef <Attribute>k__BackingField;
    [CompilerGeneratedAttribute]
private Operator <Op>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<LdValue> <Values>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Negate>k__BackingField;
    [CompilerGeneratedAttribute]
private PreprocessedData <Preprocessed>k__BackingField;
    internal Nullable`1<ContextKind> ContextKind { get; }
    internal AttributeRef Attribute { get; }
    internal Operator Op { get; }
    internal IEnumerable`1<LdValue> Values { get; }
    internal bool Negate { get; }
    internal PreprocessedData Preprocessed { get; }
    internal Clause(Nullable`1<ContextKind> contextKind, AttributeRef attribute, Operator op, IEnumerable`1<LdValue> values, bool negate);
    [CompilerGeneratedAttribute]
internal Nullable`1<ContextKind> get_ContextKind();
    [CompilerGeneratedAttribute]
internal AttributeRef get_Attribute();
    [CompilerGeneratedAttribute]
internal Operator get_Op();
    [CompilerGeneratedAttribute]
internal IEnumerable`1<LdValue> get_Values();
    [CompilerGeneratedAttribute]
internal bool get_Negate();
    [CompilerGeneratedAttribute]
internal PreprocessedData get_Preprocessed();
    private static PreprocessedData Preprocess(Operator op, IEnumerable`1<LdValue> values);
    private static PreprocessedData PreprocessValues(IEnumerable`1<LdValue> values, Func`2<LdValue, PreprocessedValue> fn);
}
internal class LaunchDarkly.Sdk.Server.Internal.Model.EvaluationException : Exception {
    public EvaluationException(string message);
}
[JsonConverterAttribute("LaunchDarkly.Sdk.Server.Internal.Model.FeatureFlagSerialization")]
internal class LaunchDarkly.Sdk.Server.Internal.Model.FeatureFlag : object {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Deleted>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <On>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableList`1<Prerequisite> <Prerequisites>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableList`1<Target> <Targets>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableList`1<Target> <ContextTargets>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableList`1<FlagRule> <Rules>k__BackingField;
    [CompilerGeneratedAttribute]
private VariationOrRollout <Fallthrough>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <OffVariation>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<LdValue> <Variations>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Salt>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TrackEvents>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TrackEventsFallthrough>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UnixMillisecondTime> <DebugEventsUntilDate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ClientSide>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <SamplingRatio>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExcludeFromSummaries>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Migration> <Migration>k__BackingField;
    internal string Key { get; }
    internal int Version { get; }
    internal bool Deleted { get; }
    internal bool On { get; }
    internal ImmutableList`1<Prerequisite> Prerequisites { get; }
    internal ImmutableList`1<Target> Targets { get; }
    internal ImmutableList`1<Target> ContextTargets { get; }
    internal ImmutableList`1<FlagRule> Rules { get; }
    internal VariationOrRollout Fallthrough { get; }
    internal Nullable`1<int> OffVariation { get; }
    internal IEnumerable`1<LdValue> Variations { get; }
    internal string Salt { get; }
    public bool TrackEvents { get; }
    public bool TrackEventsFallthrough { get; }
    public Nullable`1<UnixMillisecondTime> DebugEventsUntilDate { get; private set; }
    public bool ClientSide { get; public set; }
    public Nullable`1<long> SamplingRatio { get; }
    public bool ExcludeFromSummaries { get; }
    public Nullable`1<Migration> Migration { get; }
    internal FeatureFlag(string key, int version, bool deleted, bool on, IEnumerable`1<Prerequisite> prerequisites, ImmutableList`1<Target> targets, ImmutableList`1<Target> contextTargets, IEnumerable`1<FlagRule> rules, VariationOrRollout fallthrough, Nullable`1<int> offVariation, IEnumerable`1<LdValue> variations, string salt, bool trackEvents, bool trackEventsFallthrough, Nullable`1<UnixMillisecondTime> debugEventsUntilDate, bool clientSide, Nullable`1<long> samplingRatio, bool excludeFromSummaries, Nullable`1<Migration> migration);
    [CompilerGeneratedAttribute]
internal string get_Key();
    [CompilerGeneratedAttribute]
internal int get_Version();
    [CompilerGeneratedAttribute]
internal bool get_Deleted();
    [CompilerGeneratedAttribute]
internal bool get_On();
    [CompilerGeneratedAttribute]
internal ImmutableList`1<Prerequisite> get_Prerequisites();
    [CompilerGeneratedAttribute]
internal ImmutableList`1<Target> get_Targets();
    [CompilerGeneratedAttribute]
internal ImmutableList`1<Target> get_ContextTargets();
    [CompilerGeneratedAttribute]
internal ImmutableList`1<FlagRule> get_Rules();
    [CompilerGeneratedAttribute]
internal VariationOrRollout get_Fallthrough();
    [CompilerGeneratedAttribute]
internal Nullable`1<int> get_OffVariation();
    [CompilerGeneratedAttribute]
internal IEnumerable`1<LdValue> get_Variations();
    [CompilerGeneratedAttribute]
internal string get_Salt();
    [CompilerGeneratedAttribute]
public bool get_TrackEvents();
    [CompilerGeneratedAttribute]
public bool get_TrackEventsFallthrough();
    [CompilerGeneratedAttribute]
public Nullable`1<UnixMillisecondTime> get_DebugEventsUntilDate();
    [CompilerGeneratedAttribute]
private void set_DebugEventsUntilDate(Nullable`1<UnixMillisecondTime> value);
    [CompilerGeneratedAttribute]
public bool get_ClientSide();
    [CompilerGeneratedAttribute]
public void set_ClientSide(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_SamplingRatio();
    [CompilerGeneratedAttribute]
public bool get_ExcludeFromSummaries();
    [CompilerGeneratedAttribute]
public Nullable`1<Migration> get_Migration();
}
internal class LaunchDarkly.Sdk.Server.Internal.Model.FeatureFlagSerialization : JsonConverter`1<FeatureFlag> {
    internal static FeatureFlagSerialization Instance;
    internal static String[] _requiredProperties;
    private static FeatureFlagSerialization();
    public virtual void Write(Utf8JsonWriter w, FeatureFlag flag, JsonSerializerOptions options);
    public virtual FeatureFlag Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    internal static Prerequisite ReadPrerequisite(Utf8JsonReader& r);
    internal static Target ReadTarget(Utf8JsonReader& r);
    internal static void WriteTargets(Utf8JsonWriter w, string propName, IEnumerable`1<Target> targets);
    internal static FlagRule ReadFlagRule(Utf8JsonReader& r);
    internal static VariationOrRollout ReadVariationOrRollout(Utf8JsonReader& r);
    internal static Nullable`1<Rollout> ReadRollout(Utf8JsonReader& r);
    private Migration ReadMigration(Utf8JsonReader& r);
    private void WriteMigration(Utf8JsonWriter& w, Nullable`1<Migration> migration);
}
internal class LaunchDarkly.Sdk.Server.Internal.Model.FlagRule : ValueType {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Variation>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Rollout> <Rollout>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Clause> <Clauses>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TrackEvents>k__BackingField;
    internal Nullable`1<int> Variation { get; }
    internal Nullable`1<Rollout> Rollout { get; }
    internal string Id { get; }
    internal IEnumerable`1<Clause> Clauses { get; }
    internal bool TrackEvents { get; }
    internal FlagRule(Nullable`1<int> variation, Nullable`1<Rollout> rollout, string id, IEnumerable`1<Clause> clauses, bool trackEvents);
    [CompilerGeneratedAttribute]
internal Nullable`1<int> get_Variation();
    [CompilerGeneratedAttribute]
internal Nullable`1<Rollout> get_Rollout();
    [CompilerGeneratedAttribute]
internal string get_Id();
    [CompilerGeneratedAttribute]
internal IEnumerable`1<Clause> get_Clauses();
    [CompilerGeneratedAttribute]
internal bool get_TrackEvents();
}
internal class LaunchDarkly.Sdk.Server.Internal.Model.Migration : ValueType {
    [CompilerGeneratedAttribute]
private Nullable`1<long> <CheckRatio>k__BackingField;
    public Nullable`1<long> CheckRatio { get; }
    public Migration(Nullable`1<long> checkRatio);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_CheckRatio();
}
internal class LaunchDarkly.Sdk.Server.Internal.Model.Operator : object {
    private string _name;
    private Func`4<LdValue, LdValue, Nullable`1<PreprocessedValue>, bool> _fn;
    public static Operator In;
    public static Operator StartsWith;
    public static Operator EndsWith;
    public static Operator Matches;
    public static Operator Contains;
    public static Operator LessThan;
    public static Operator LessThanOrEqual;
    public static Operator GreaterThan;
    public static Operator GreaterThanOrEqual;
    public static Operator Before;
    public static Operator After;
    public static Operator SemVerEqual;
    public static Operator SemVerLessThan;
    public static Operator SemVerGreaterThan;
    public static Operator SegmentMatch;
    private static String[] Rfc3339FormatsWithOptionalFractionalSeconds;
    public static IEnumerable`1<Operator> All;
    private static IDictionary`2<string, Operator> _allOperators;
    public string Name { get; }
    private Operator(string name, Func`4<LdValue, LdValue, Nullable`1<PreprocessedValue>, bool> fn);
    private static Operator();
    public static Operator ForName(string name);
    public string get_Name();
    public bool Apply(LdValue userValue, LdValue clauseValue, Nullable`1<PreprocessedValue> preprocessed);
    private static bool ApplyIn(LdValue uValue, LdValue cValue, Nullable`1<PreprocessedValue> pre);
    private static bool ApplyMatches(LdValue userValue, LdValue clauseValue, Nullable`1<PreprocessedValue> preprocessed);
    private static bool ApplySegmentMatch(LdValue uValue, LdValue cValue, Nullable`1<PreprocessedValue> pre);
    private static bool ApplyUnknownOp(LdValue uValue, LdValue cValue, Nullable`1<PreprocessedValue> pre);
    private static Func`4<LdValue, LdValue, Nullable`1<PreprocessedValue>, bool> StringOperator(Func`3<string, string, bool> stringFn);
    private static Func`4<LdValue, LdValue, Nullable`1<PreprocessedValue>, bool> NumericOperator(int desiredComparisonResult, int otherDesiredComparisonResult);
    private static Func`4<LdValue, LdValue, Nullable`1<PreprocessedValue>, bool> DateTimeOperator(int desiredComparisonResult);
    private static Func`4<LdValue, LdValue, Nullable`1<PreprocessedValue>, bool> SemVerOperator(int desiredComparisonResult);
    internal static Nullable`1<DateTime> ValueToDate(LdValue value);
    internal static Nullable`1<SemanticVersion> ValueToSemVer(LdValue value);
}
internal class LaunchDarkly.Sdk.Server.Internal.Model.Prerequisite : ValueType {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Variation>k__BackingField;
    internal string Key { get; }
    internal int Variation { get; }
    internal Prerequisite(string key, int variation);
    [CompilerGeneratedAttribute]
internal string get_Key();
    [CompilerGeneratedAttribute]
internal int get_Variation();
}
internal class LaunchDarkly.Sdk.Server.Internal.Model.Rollout : ValueType {
    [CompilerGeneratedAttribute]
private RolloutKind <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ContextKind> <ContextKind>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Seed>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<WeightedVariation> <Variations>k__BackingField;
    [CompilerGeneratedAttribute]
private AttributeRef <BucketBy>k__BackingField;
    internal RolloutKind Kind { get; }
    internal Nullable`1<ContextKind> ContextKind { get; }
    internal Nullable`1<int> Seed { get; }
    internal IEnumerable`1<WeightedVariation> Variations { get; }
    internal AttributeRef BucketBy { get; }
    internal Rollout(RolloutKind kind, Nullable`1<ContextKind> contextKind, Nullable`1<int> seed, IEnumerable`1<WeightedVariation> variations, AttributeRef bucketBy);
    [CompilerGeneratedAttribute]
internal RolloutKind get_Kind();
    [CompilerGeneratedAttribute]
internal Nullable`1<ContextKind> get_ContextKind();
    [CompilerGeneratedAttribute]
internal Nullable`1<int> get_Seed();
    [CompilerGeneratedAttribute]
internal IEnumerable`1<WeightedVariation> get_Variations();
    [CompilerGeneratedAttribute]
internal AttributeRef get_BucketBy();
}
internal enum LaunchDarkly.Sdk.Server.Internal.Model.RolloutKind : Enum {
    public int value__;
    public static RolloutKind Rollout;
    public static RolloutKind Experiment;
}
[JsonConverterAttribute("LaunchDarkly.Sdk.Server.Internal.Model.SegmentSerialization")]
internal class LaunchDarkly.Sdk.Server.Internal.Model.Segment : object {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Deleted>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableList`1<string> <Included>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableList`1<string> <Excluded>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableList`1<SegmentTarget> <IncludedContexts>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableList`1<SegmentTarget> <ExcludedContexts>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<SegmentRule> <Rules>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Salt>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Unbounded>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ContextKind> <UnboundedContextKind>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Generation>k__BackingField;
    [CompilerGeneratedAttribute]
private PreprocessedData <Preprocessed>k__BackingField;
    public string Key { get; }
    public int Version { get; }
    public bool Deleted { get; }
    internal ImmutableList`1<string> Included { get; }
    internal ImmutableList`1<string> Excluded { get; }
    internal ImmutableList`1<SegmentTarget> IncludedContexts { get; }
    internal ImmutableList`1<SegmentTarget> ExcludedContexts { get; }
    internal IEnumerable`1<SegmentRule> Rules { get; }
    internal string Salt { get; }
    internal bool Unbounded { get; }
    internal Nullable`1<ContextKind> UnboundedContextKind { get; }
    internal Nullable`1<int> Generation { get; }
    internal PreprocessedData Preprocessed { get; }
    internal Segment(string key, int version, bool deleted, IEnumerable`1<string> included, IEnumerable`1<string> excluded, IEnumerable`1<SegmentTarget> includedContexts, IEnumerable`1<SegmentTarget> excludedContexts, IEnumerable`1<SegmentRule> rules, string salt, bool unbounded, Nullable`1<ContextKind> unboundedContextKind, Nullable`1<int> generation);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public int get_Version();
    [CompilerGeneratedAttribute]
public bool get_Deleted();
    [CompilerGeneratedAttribute]
internal ImmutableList`1<string> get_Included();
    [CompilerGeneratedAttribute]
internal ImmutableList`1<string> get_Excluded();
    [CompilerGeneratedAttribute]
internal ImmutableList`1<SegmentTarget> get_IncludedContexts();
    [CompilerGeneratedAttribute]
internal ImmutableList`1<SegmentTarget> get_ExcludedContexts();
    [CompilerGeneratedAttribute]
internal IEnumerable`1<SegmentRule> get_Rules();
    [CompilerGeneratedAttribute]
internal string get_Salt();
    [CompilerGeneratedAttribute]
internal bool get_Unbounded();
    [CompilerGeneratedAttribute]
internal Nullable`1<ContextKind> get_UnboundedContextKind();
    [CompilerGeneratedAttribute]
internal Nullable`1<int> get_Generation();
    [CompilerGeneratedAttribute]
internal PreprocessedData get_Preprocessed();
    private static PreprocessedData Preprocess(IEnumerable`1<string> included, IEnumerable`1<string> excluded);
}
internal class LaunchDarkly.Sdk.Server.Internal.Model.SegmentRule : ValueType {
    [CompilerGeneratedAttribute]
private IEnumerable`1<Clause> <Clauses>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Weight>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ContextKind> <RolloutContextKind>k__BackingField;
    [CompilerGeneratedAttribute]
private AttributeRef <BucketBy>k__BackingField;
    internal IEnumerable`1<Clause> Clauses { get; }
    internal Nullable`1<int> Weight { get; }
    internal Nullable`1<ContextKind> RolloutContextKind { get; }
    internal AttributeRef BucketBy { get; }
    internal SegmentRule(IEnumerable`1<Clause> clauses, Nullable`1<int> weight, Nullable`1<ContextKind> rolloutContextKind, AttributeRef bucketBy);
    [CompilerGeneratedAttribute]
internal IEnumerable`1<Clause> get_Clauses();
    [CompilerGeneratedAttribute]
internal Nullable`1<int> get_Weight();
    [CompilerGeneratedAttribute]
internal Nullable`1<ContextKind> get_RolloutContextKind();
    [CompilerGeneratedAttribute]
internal AttributeRef get_BucketBy();
}
internal class LaunchDarkly.Sdk.Server.Internal.Model.SegmentSerialization : JsonConverter`1<Segment> {
    internal static SegmentSerialization Instance;
    internal static String[] _requiredProperties;
    private static SegmentSerialization();
    public virtual void Write(Utf8JsonWriter w, Segment segment, JsonSerializerOptions options);
    public virtual Segment Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    internal static ImmutableList`1<SegmentTarget> ReadSegmentTargets(Utf8JsonReader& r);
    internal static void WriteSegmentTargets(Utf8JsonWriter w, string propName, IEnumerable`1<SegmentTarget> targets);
    internal static SegmentRule ReadSegmentRule(Utf8JsonReader& r);
}
[IsReadOnlyAttribute]
internal class LaunchDarkly.Sdk.Server.Internal.Model.SegmentTarget : ValueType {
    internal Nullable`1<ContextKind> ContextKind;
    internal IEnumerable`1<string> Values;
    internal ImmutableHashSet`1<string> PreprocessedValues;
    public SegmentTarget(Nullable`1<ContextKind> contextKind, IEnumerable`1<string> values);
}
internal class LaunchDarkly.Sdk.Server.Internal.Model.SemanticVersion : ValueType {
    private static Regex VERSION_REGEX;
    [CompilerGeneratedAttribute]
private int <Major>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Minor>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Patch>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Prerelease>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Build>k__BackingField;
    public int Major { get; private set; }
    public int Minor { get; private set; }
    public int Patch { get; private set; }
    public string Prerelease { get; private set; }
    public string Build { get; private set; }
    public SemanticVersion(int major, int minor, int patch, string prerelease, string build);
    private static SemanticVersion();
    [CompilerGeneratedAttribute]
public int get_Major();
    [CompilerGeneratedAttribute]
private void set_Major(int value);
    [CompilerGeneratedAttribute]
public int get_Minor();
    [CompilerGeneratedAttribute]
private void set_Minor(int value);
    [CompilerGeneratedAttribute]
public int get_Patch();
    [CompilerGeneratedAttribute]
private void set_Patch(int value);
    [CompilerGeneratedAttribute]
public string get_Prerelease();
    [CompilerGeneratedAttribute]
private void set_Prerelease(string value);
    [CompilerGeneratedAttribute]
public string get_Build();
    [CompilerGeneratedAttribute]
private void set_Build(string value);
    public static SemanticVersion Parse(string s, bool allowMissingMinorAndPatch);
    public int ComparePrecedence(SemanticVersion other);
    private int CompareIdentifiers(String[] ids1, String[] ids2);
}
internal static class LaunchDarkly.Sdk.Server.Internal.Model.SerializationHelpers : object {
    internal static void WriteVariationOrRollout(Utf8JsonWriter w, Nullable`1<int> variation, Nullable`1<Rollout> rollout);
    internal static void WriteClauses(Utf8JsonWriter w, string propName, IEnumerable`1<Clause> clauses);
    internal static void WriteStrings(Utf8JsonWriter w, string propName, IEnumerable`1<string> values);
    internal static void WriteValues(Utf8JsonWriter w, string propName, IEnumerable`1<LdValue> values);
    internal static ImmutableList`1<Clause> ReadClauses(Utf8JsonReader& r);
    internal static Nullable`1<ContextKind> MaybeContextKind(string s);
    internal static void MaybeWriteContextKind(Utf8JsonWriter w, string propName, Nullable`1<ContextKind> kind);
    internal static ImmutableList`1<string> ReadStrings(Utf8JsonReader& r);
    internal static ImmutableList`1<LdValue> ReadValues(Utf8JsonReader& r);
    internal static AttributeRef AttrRefOrName(Nullable`1<ContextKind> contextKind, string attrString);
}
internal class LaunchDarkly.Sdk.Server.Internal.Model.Target : ValueType {
    [CompilerGeneratedAttribute]
private Nullable`1<ContextKind> <ContextKind>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Values>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Variation>k__BackingField;
    [CompilerGeneratedAttribute]
private PreprocessedData <Preprocessed>k__BackingField;
    internal Nullable`1<ContextKind> ContextKind { get; }
    internal IEnumerable`1<string> Values { get; }
    internal int Variation { get; }
    internal PreprocessedData Preprocessed { get; }
    internal Target(Nullable`1<ContextKind> contextKind, IEnumerable`1<string> values, int variation);
    [CompilerGeneratedAttribute]
internal Nullable`1<ContextKind> get_ContextKind();
    [CompilerGeneratedAttribute]
internal IEnumerable`1<string> get_Values();
    [CompilerGeneratedAttribute]
internal int get_Variation();
    [CompilerGeneratedAttribute]
internal PreprocessedData get_Preprocessed();
    private static PreprocessedData Preprocess(IEnumerable`1<string> values);
}
internal class LaunchDarkly.Sdk.Server.Internal.Model.VariationOrRollout : ValueType {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Variation>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Rollout> <Rollout>k__BackingField;
    internal Nullable`1<int> Variation { get; }
    internal Nullable`1<Rollout> Rollout { get; }
    internal VariationOrRollout(Nullable`1<int> variation, Nullable`1<Rollout> rollout);
    [CompilerGeneratedAttribute]
internal Nullable`1<int> get_Variation();
    [CompilerGeneratedAttribute]
internal Nullable`1<Rollout> get_Rollout();
}
internal class LaunchDarkly.Sdk.Server.Internal.Model.WeightedVariation : ValueType {
    [CompilerGeneratedAttribute]
private int <Variation>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Weight>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Untracked>k__BackingField;
    internal int Variation { get; }
    internal int Weight { get; }
    internal bool Untracked { get; }
    internal WeightedVariation(int variation, int weight, bool untracked);
    [CompilerGeneratedAttribute]
internal int get_Variation();
    [CompilerGeneratedAttribute]
internal int get_Weight();
    [CompilerGeneratedAttribute]
internal bool get_Untracked();
}
internal static class LaunchDarkly.Sdk.Server.Internal.StandardEndpoints : object {
    internal static ServiceEndpoints BaseUris;
    internal static Uri DefaultStreamingBaseUri;
    internal static Uri DefaultPollingBaseUri;
    internal static Uri DefaultEventsBaseUri;
    internal static string StreamingRequestPath;
    internal static string PollingRequestPath;
    internal static string AnalyticsEventsPostRequestPath;
    internal static string DiagnosticEventsPostRequestPath;
    private static StandardEndpoints();
    internal static Uri SelectBaseUri(ServiceEndpoints configuredEndpoints, Func`2<ServiceEndpoints, Uri> uriGetter, string description, Logger errorLogger);
    internal static bool IsCustomUri(ServiceEndpoints configuredEndpoints, Func`2<ServiceEndpoints, Uri> uriGetter);
}
public class LaunchDarkly.Sdk.Server.LdClient : object {
    private IBigSegmentStoreStatusProvider _bigSegmentStoreStatusProvider;
    private BigSegmentStoreWrapper _bigSegmentStoreWrapper;
    private Configuration _configuration;
    internal IEventProcessor _eventProcessor;
    private IDataStore _dataStore;
    internal IDataSource _dataSource;
    private DataSourceStatusProviderImpl _dataSourceStatusProvider;
    private DataStoreStatusProviderImpl _dataStoreStatusProvider;
    private IFlagTracker _flagTracker;
    internal Evaluator _evaluator;
    private Logger _log;
    private Logger _evalLog;
    private IHookExecutor _hookExecutor;
    private TimeSpan ExcessiveInitWaitTime;
    private static string InitWaitTimeInfo;
    private static string ExcessiveInitWaitTimeWarning;
    private static string DidNotInitializeTimelyWarning;
    public IBigSegmentStoreStatusProvider BigSegmentStoreStatusProvider { get; }
    public IDataSourceStatusProvider DataSourceStatusProvider { get; }
    public IDataStoreStatusProvider DataStoreStatusProvider { get; }
    public IFlagTracker FlagTracker { get; }
    public bool Initialized { get; }
    public Version Version { get; }
    public LdClient(Configuration config);
    public LdClient(string sdkKey);
    public sealed virtual IBigSegmentStoreStatusProvider get_BigSegmentStoreStatusProvider();
    public sealed virtual IDataSourceStatusProvider get_DataSourceStatusProvider();
    public sealed virtual IDataStoreStatusProvider get_DataStoreStatusProvider();
    public sealed virtual IFlagTracker get_FlagTracker();
    public sealed virtual bool get_Initialized();
    public Version get_Version();
    public sealed virtual bool IsOffline();
    public sealed virtual bool BoolVariation(string key, Context context, bool defaultValue);
    public sealed virtual int IntVariation(string key, Context context, int defaultValue);
    public sealed virtual float FloatVariation(string key, Context context, float defaultValue);
    public sealed virtual double DoubleVariation(string key, Context context, double defaultValue);
    public sealed virtual string StringVariation(string key, Context context, string defaultValue);
    public sealed virtual LdValue JsonVariation(string key, Context context, LdValue defaultValue);
    public sealed virtual EvaluationDetail`1<bool> BoolVariationDetail(string key, Context context, bool defaultValue);
    public sealed virtual EvaluationDetail`1<int> IntVariationDetail(string key, Context context, int defaultValue);
    public sealed virtual EvaluationDetail`1<float> FloatVariationDetail(string key, Context context, float defaultValue);
    public sealed virtual EvaluationDetail`1<double> DoubleVariationDetail(string key, Context context, double defaultValue);
    public sealed virtual EvaluationDetail`1<string> StringVariationDetail(string key, Context context, string defaultValue);
    public sealed virtual EvaluationDetail`1<LdValue> JsonVariationDetail(string key, Context context, LdValue defaultValue);
    public sealed virtual MigrationVariation MigrationVariation(string key, Context context, MigrationStage defaultStage);
    public sealed virtual FeatureFlagsState AllFlagsState(Context context, FlagsStateOption[] options);
    private ValueTuple`2<EvaluationDetail`1<T>, FeatureFlag> EvaluateWithHooks(string method, string key, Context context, LdValue defaultValue, Converter`1<T> converter, bool checkType, EventFactory eventFactory);
    private ValueTuple`2<EvaluationDetail`1<T>, FeatureFlag> EvaluationAndFlag(string featureKey, Context context, LdValue defaultValue, Converter`1<T> converter, bool checkType, EventFactory eventFactory);
    private EvaluationDetail`1<T> Evaluate(string method, string featureKey, Context context, LdValue defaultValue, Converter`1<T> converter, bool checkType, EventFactory eventFactory);
    public sealed virtual string SecureModeHash(Context context);
    public sealed virtual void Track(string name, Context context);
    public sealed virtual void Track(string name, Context context, LdValue data);
    public sealed virtual void Track(string name, Context context, LdValue data, double metricValue);
    public sealed virtual void TrackMigration(MigrationOpTracker tracker);
    private void TrackInternal(string key, Context context, LdValue data, Nullable`1<double> metricValue);
    public sealed virtual void Identify(Context context);
    public sealed virtual void Dispose();
    public sealed virtual void Flush();
    public sealed virtual bool FlushAndWait(TimeSpan timeout);
    public sealed virtual Logger GetLogger();
    private FeatureFlag GetFlag(string key);
    private Segment GetSegment(string key);
    private void Dispose(bool disposing);
    [CompilerGeneratedAttribute]
private LdValue <.ctor>b__29_0(string key, Context context);
}
public interface LaunchDarkly.Sdk.Server.Migrations.IMigration`4 {
    public abstract virtual MigrationResult`1<TReadResult> Read(string flagKey, Context context, MigrationStage defaultStage, TReadInput payload);
    public abstract virtual MigrationWriteResult`1<TWriteResult> Write(string flagKey, Context context, MigrationStage defaultStage, TWriteInput payload);
    public abstract virtual MigrationResult`1<TReadResult> Read(string flagKey, Context context, MigrationStage defaultStage);
    public abstract virtual MigrationWriteResult`1<TWriteResult> Write(string flagKey, Context context, MigrationStage defaultStage);
}
internal class LaunchDarkly.Sdk.Server.Migrations.Migration`4 : object {
    private ILdClient _client;
    private bool _trackLatency;
    private bool _trackErrors;
    private MigrationExecution _execution;
    private Func`2<TReadInput, Result`1<TReadResult>> _readOld;
    private Func`2<TReadInput, Result`1<TReadResult>> _readNew;
    private Func`2<TWriteInput, Result`1<TWriteResult>> _writeOld;
    private Func`2<TWriteInput, Result`1<TWriteResult>> _writeNew;
    private Func`3<TReadResult, TReadResult, bool> _check;
    public Migration`4(ILdClient client, bool trackLatency, bool trackErrors, MigrationExecution execution, Func`2<TReadInput, Result`1<TReadResult>> readOld, Func`2<TReadInput, Result`1<TReadResult>> readNew, Func`2<TWriteInput, Result`1<TWriteResult>> writeOld, Func`2<TWriteInput, Result`1<TWriteResult>> writeNew, Func`3<TReadResult, TReadResult, bool> check);
    private static MigrationResult`1<TOpResult> SafeCall(TOpPayload payload, MigrationOrigin origin, Func`2<TOpPayload, Result`1<TOpResult>> method);
    private MigrationResult`1<TOpResult> TrackLatency(TOpPayload payload, MigrationOpTracker tracker, MigrationOrigin origin, Func`2<TOpPayload, Result`1<TOpResult>> method);
    private MigrationResult`1<TOpResult> DoSingleOp(TOpPayload payload, MigrationOpTracker tracker, MigrationOrigin origin, Func`2<TOpPayload, Result`1<TOpResult>> method);
    private MultiReadResult<TReadResult, TWriteResult, TReadInput, TWriteInput> DoSerialRead(TReadInput payload, MigrationOpTracker tracker);
    private MultiReadResult<TReadResult, TWriteResult, TReadInput, TWriteInput> DoParallelRead(TReadInput payload, MigrationOpTracker tracker);
    private MultiReadResult<TReadResult, TWriteResult, TReadInput, TWriteInput> DoMultiRead(TReadInput payload, MigrationOpTracker tracker);
    private MigrationResult`1<TReadResult> HandleRead(MigrationStage stage, MigrationOpTracker tracker, TReadInput payload);
    private MigrationWriteResult`1<TWriteResult> HandleWrite(MigrationStage stage, MigrationOpTracker tracker, TWriteInput payload);
    public sealed virtual MigrationResult`1<TReadResult> Read(string flagKey, Context context, MigrationStage defaultStage, TReadInput payload);
    public sealed virtual MigrationWriteResult`1<TWriteResult> Write(string flagKey, Context context, MigrationStage defaultStage, TWriteInput payload);
    public sealed virtual MigrationResult`1<TReadResult> Read(string flagKey, Context context, MigrationStage defaultStage);
    public sealed virtual MigrationWriteResult`1<TWriteResult> Write(string flagKey, Context context, MigrationStage defaultStage);
}
public class LaunchDarkly.Sdk.Server.Migrations.MigrationBuilder`4 : object {
    private ILdClient _client;
    private bool _trackLatency;
    private bool _trackErrors;
    private MigrationExecution _execution;
    private Func`2<TReadInput, Result`1<TReadResult>> _readOld;
    private Func`2<TReadInput, Result`1<TReadResult>> _readNew;
    private Func`2<TWriteInput, Result`1<TWriteResult>> _writeOld;
    private Func`2<TWriteInput, Result`1<TWriteResult>> _writeNew;
    private Func`3<TReadResult, TReadResult, bool> _check;
    public MigrationBuilder`4(ILdClient client);
    public MigrationBuilder`4<TReadResult, TWriteResult, TReadInput, TWriteInput> TrackLatency(bool trackLatency);
    public MigrationBuilder`4<TReadResult, TWriteResult, TReadInput, TWriteInput> TrackErrors(bool trackErrors);
    public MigrationBuilder`4<TReadResult, TWriteResult, TReadInput, TWriteInput> ReadExecution(MigrationExecution execution);
    public MigrationBuilder`4<TReadResult, TWriteResult, TReadInput, TWriteInput> Read(Func`2<TReadInput, Result`1<TReadResult>> readOld, Func`2<TReadInput, Result`1<TReadResult>> readNew, Func`3<TReadResult, TReadResult, bool> check);
    public MigrationBuilder`4<TReadResult, TWriteResult, TReadInput, TWriteInput> Read(Func`2<TReadInput, Result`1<TReadResult>> readOld, Func`2<TReadInput, Result`1<TReadResult>> readNew);
    public MigrationBuilder`4<TReadResult, TWriteResult, TReadInput, TWriteInput> Write(Func`2<TWriteInput, Result`1<TWriteResult>> writeOld, Func`2<TWriteInput, Result`1<TWriteResult>> writeNew);
    public IMigration`4<TReadResult, TWriteResult, TReadInput, TWriteInput> Build();
}
[IsReadOnlyAttribute]
public class LaunchDarkly.Sdk.Server.Migrations.MigrationExecution : ValueType {
    [CompilerGeneratedAttribute]
private MigrationExecutionMode <Mode>k__BackingField;
    [CompilerGeneratedAttribute]
private MigrationSerialOrder <Order>k__BackingField;
    public MigrationExecutionMode Mode { get; }
    public MigrationSerialOrder Order { get; }
    private MigrationExecution(MigrationExecutionMode mode, MigrationSerialOrder order);
    [CompilerGeneratedAttribute]
public MigrationExecutionMode get_Mode();
    [CompilerGeneratedAttribute]
public MigrationSerialOrder get_Order();
    public static MigrationExecution Serial(MigrationSerialOrder order);
    public static MigrationExecution Parallel();
    public virtual string ToString();
}
public enum LaunchDarkly.Sdk.Server.Migrations.MigrationExecutionMode : Enum {
    public int value__;
    public static MigrationExecutionMode Serial;
    public static MigrationExecutionMode Parallel;
}
public static class LaunchDarkly.Sdk.Server.Migrations.MigrationMethod : object {
    public static Result`1<TResult> Success(TResult result);
    public static Result`1<TResult> Failure();
    public static Result`1<TResult> Failure(Exception exception);
}
public enum LaunchDarkly.Sdk.Server.Migrations.MigrationOperation : Enum {
    public int value__;
    public static MigrationOperation Read;
    public static MigrationOperation Write;
}
[ExtensionAttribute]
public static class LaunchDarkly.Sdk.Server.Migrations.MigrationOperationExtensions : object {
    private static string ReadStr;
    private static string WriteStr;
    public static Nullable`1<MigrationOperation> FromDataModelString(string stringOperation);
    [ExtensionAttribute]
public static string ToDataModelString(MigrationOperation operation);
}
public class LaunchDarkly.Sdk.Server.Migrations.MigrationOpTracker : object {
    private MigrationStage _stage;
    private MigrationStage _defaultStage;
    private string _flagKey;
    private FeatureFlag _flag;
    private Context _context;
    private long _checkRatio;
    private Logger _logger;
    private EvaluationDetail`1<string> _detail;
    private object _lock;
    private Nullable`1<MigrationOperation> _operation;
    private bool _oldError;
    private bool _newError;
    private bool _oldInvoked;
    private bool _newInvoked;
    private Nullable`1<bool> _consistent;
    private Nullable`1<TimeSpan> _oldLatency;
    private Nullable`1<TimeSpan> _newLatency;
    internal MigrationOpTracker(MigrationStage stage, MigrationStage defaultStage, string flagKey, FeatureFlag flag, Context context, long checkRatio, Logger logger, EvaluationDetail`1<string> detail);
    public void Op(MigrationOperation operation);
    public void Error(MigrationOrigin origin);
    public void Consistency(Func`1<bool> checker);
    public void Latency(MigrationOrigin origin, TimeSpan duration);
    public void Invoked(MigrationOrigin origin);
    private bool CheckOriginEventConsistency(MigrationOrigin origin);
    private bool CheckEventConsistency();
    internal Nullable`1<MigrationOpEvent> CreateEvent();
}
public enum LaunchDarkly.Sdk.Server.Migrations.MigrationOrigin : Enum {
    public int value__;
    public static MigrationOrigin Old;
    public static MigrationOrigin New;
}
[ExtensionAttribute]
public static class LaunchDarkly.Sdk.Server.Migrations.MigrationOriginExtensions : object {
    private static string OldStr;
    private static string NewStr;
    public static Nullable`1<MigrationOrigin> FromDataModelString(string stringOrigin);
    [ExtensionAttribute]
public static string ToDataModelString(MigrationOrigin origin);
}
public class LaunchDarkly.Sdk.Server.Migrations.MigrationResult`1 : ValueType {
    [CompilerGeneratedAttribute]
private TResult <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSuccessful>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
private MigrationOrigin <Origin>k__BackingField;
    public TResult Value { get; }
    public bool IsSuccessful { get; }
    public Exception Exception { get; }
    public MigrationOrigin Origin { get; }
    internal MigrationResult`1(MigrationOrigin origin, bool isSuccessful, TResult result, Exception exception);
    [CompilerGeneratedAttribute]
public TResult get_Value();
    [CompilerGeneratedAttribute]
public bool get_IsSuccessful();
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
public MigrationOrigin get_Origin();
}
public enum LaunchDarkly.Sdk.Server.Migrations.MigrationSerialOrder : Enum {
    public int value__;
    public static MigrationSerialOrder Random;
    public static MigrationSerialOrder Fixed;
}
public enum LaunchDarkly.Sdk.Server.Migrations.MigrationStage : Enum {
    public int value__;
    public static MigrationStage Off;
    public static MigrationStage DualWrite;
    public static MigrationStage Shadow;
    public static MigrationStage Live;
    public static MigrationStage RampDown;
    public static MigrationStage Complete;
}
[ExtensionAttribute]
public static class LaunchDarkly.Sdk.Server.Migrations.MigrationStageExtensions : object {
    private static string OffStr;
    private static string DualWriteStr;
    private static string ShadowStr;
    private static string LiveStr;
    private static string RampDownStr;
    private static string CompleteStr;
    public static Nullable`1<MigrationStage> FromDataModelString(string stringStage);
    [ExtensionAttribute]
public static string ToDataModelString(MigrationStage stage);
}
[IsReadOnlyAttribute]
public class LaunchDarkly.Sdk.Server.Migrations.MigrationVariation : ValueType {
    [CompilerGeneratedAttribute]
private MigrationStage <Stage>k__BackingField;
    [CompilerGeneratedAttribute]
private MigrationOpTracker <Tracker>k__BackingField;
    public MigrationStage Stage { get; }
    public MigrationOpTracker Tracker { get; }
    internal MigrationVariation(MigrationStage stage, MigrationOpTracker tracker);
    [CompilerGeneratedAttribute]
public MigrationStage get_Stage();
    [CompilerGeneratedAttribute]
public MigrationOpTracker get_Tracker();
    public void Deconstruct(MigrationStage& stage, MigrationOpTracker& tracker);
}
public class LaunchDarkly.Sdk.Server.Migrations.MigrationWriteResult`1 : object {
    [CompilerGeneratedAttribute]
private MigrationResult`1<TResult> <Authoritative>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<MigrationResult`1<TResult>> <NonAuthoritative>k__BackingField;
    public MigrationResult`1<TResult> Authoritative { get; }
    public Nullable`1<MigrationResult`1<TResult>> NonAuthoritative { get; }
    internal MigrationWriteResult`1(MigrationResult`1<TResult> authoritative, Nullable`1<MigrationResult`1<TResult>> nonAuthoritative);
    [CompilerGeneratedAttribute]
public MigrationResult`1<TResult> get_Authoritative();
    [CompilerGeneratedAttribute]
public Nullable`1<MigrationResult`1<TResult>> get_NonAuthoritative();
}
public class LaunchDarkly.Sdk.Server.Subsystems.BigSegmentsConfiguration : object {
    [CompilerGeneratedAttribute]
private IBigSegmentStore <Store>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ContextCacheSize>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <ContextCacheTime>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <StatusPollInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <StaleAfter>k__BackingField;
    public IBigSegmentStore Store { get; }
    public int ContextCacheSize { get; }
    public TimeSpan ContextCacheTime { get; }
    public TimeSpan StatusPollInterval { get; }
    public TimeSpan StaleAfter { get; }
    public BigSegmentsConfiguration(IBigSegmentStore store, int contextCacheSize, TimeSpan contextCacheTime, TimeSpan statusPollInterval, TimeSpan staleAfter);
    [CompilerGeneratedAttribute]
public IBigSegmentStore get_Store();
    [CompilerGeneratedAttribute]
public int get_ContextCacheSize();
    [CompilerGeneratedAttribute]
public TimeSpan get_ContextCacheTime();
    [CompilerGeneratedAttribute]
public TimeSpan get_StatusPollInterval();
    [CompilerGeneratedAttribute]
public TimeSpan get_StaleAfter();
}
public static class LaunchDarkly.Sdk.Server.Subsystems.BigSegmentStoreTypes : object {
    public static IMembership NewMembershipFromSegmentRefs(IEnumerable`1<string> includedSegmentRefs, IEnumerable`1<string> excludedSegmentRefs);
}
public static class LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes : object {
}
public static class LaunchDarkly.Sdk.Server.Subsystems.EventProcessorTypes : object {
}
public class LaunchDarkly.Sdk.Server.Subsystems.HookConfiguration : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<Hook> <Hooks>k__BackingField;
    public IEnumerable`1<Hook> Hooks { get; }
    public HookConfiguration(IEnumerable`1<Hook> hooks);
    [CompilerGeneratedAttribute]
public IEnumerable`1<Hook> get_Hooks();
}
public class LaunchDarkly.Sdk.Server.Subsystems.HttpConfiguration : object {
    [CompilerGeneratedAttribute]
private TimeSpan <ConnectTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<KeyValuePair`2<string, string>> <DefaultHeaders>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpMessageHandler <MessageHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private IWebProxy <Proxy>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <ReadTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <ResponseStartTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpProperties <HttpProperties>k__BackingField;
    public TimeSpan ConnectTimeout { get; }
    public IEnumerable`1<KeyValuePair`2<string, string>> DefaultHeaders { get; }
    public HttpMessageHandler MessageHandler { get; }
    public IWebProxy Proxy { get; }
    public TimeSpan ReadTimeout { get; }
    public TimeSpan ResponseStartTimeout { get; }
    internal HttpProperties HttpProperties { get; }
    public HttpConfiguration(TimeSpan connectTimeout, IEnumerable`1<KeyValuePair`2<string, string>> defaultHeaders, HttpMessageHandler messageHandler, IWebProxy proxy, TimeSpan readTimeout);
    public HttpConfiguration(TimeSpan connectTimeout, IEnumerable`1<KeyValuePair`2<string, string>> defaultHeaders, HttpMessageHandler messageHandler, IWebProxy proxy, TimeSpan readTimeout, TimeSpan responseStartTimeout);
    internal HttpConfiguration(HttpProperties httpProperties, HttpMessageHandler messageHandler, TimeSpan responseStartTimeout);
    [CompilerGeneratedAttribute]
public TimeSpan get_ConnectTimeout();
    [CompilerGeneratedAttribute]
public IEnumerable`1<KeyValuePair`2<string, string>> get_DefaultHeaders();
    [CompilerGeneratedAttribute]
public HttpMessageHandler get_MessageHandler();
    [CompilerGeneratedAttribute]
public IWebProxy get_Proxy();
    [CompilerGeneratedAttribute]
public TimeSpan get_ReadTimeout();
    [CompilerGeneratedAttribute]
public TimeSpan get_ResponseStartTimeout();
    [CompilerGeneratedAttribute]
internal HttpProperties get_HttpProperties();
    public HttpClient NewHttpClient();
    internal static HttpProperties MakeHttpProperties(TimeSpan connectTimeout, IEnumerable`1<KeyValuePair`2<string, string>> defaultHeaders, HttpMessageHandler messageHandler, TimeSpan readTimeout);
}
public interface LaunchDarkly.Sdk.Server.Subsystems.IBigSegmentStore {
    public abstract virtual Task`1<IMembership> GetMembershipAsync(string userHash);
    public abstract virtual Task`1<Nullable`1<StoreMetadata>> GetMetadataAsync();
}
public interface LaunchDarkly.Sdk.Server.Subsystems.IComponentConfigurer`1 {
    public abstract virtual T Build(LdClientContext context);
}
public interface LaunchDarkly.Sdk.Server.Subsystems.IDataSource {
    public bool Initialized { get; }
    public abstract virtual Task`1<bool> Start();
    public abstract virtual bool get_Initialized();
}
public interface LaunchDarkly.Sdk.Server.Subsystems.IDataSourceUpdates {
    public IDataStoreStatusProvider DataStoreStatusProvider { get; }
    public abstract virtual IDataStoreStatusProvider get_DataStoreStatusProvider();
    public abstract virtual bool Init(FullDataSet`1<ItemDescriptor> allData);
    public abstract virtual bool Upsert(DataKind kind, string key, ItemDescriptor item);
    public abstract virtual void UpdateStatus(DataSourceState newState, Nullable`1<ErrorInfo> newError);
}
public interface LaunchDarkly.Sdk.Server.Subsystems.IDataStore {
    public bool StatusMonitoringEnabled { get; }
    public abstract virtual bool get_StatusMonitoringEnabled();
    public abstract virtual void Init(FullDataSet`1<ItemDescriptor> allData);
    public abstract virtual Nullable`1<ItemDescriptor> Get(DataKind kind, string key);
    public abstract virtual KeyedItems`1<ItemDescriptor> GetAll(DataKind kind);
    public abstract virtual bool Upsert(DataKind kind, string key, ItemDescriptor item);
    public abstract virtual bool Initialized();
}
public interface LaunchDarkly.Sdk.Server.Subsystems.IDataStoreUpdates {
    public abstract virtual void UpdateStatus(DataStoreStatus newStatus);
}
public interface LaunchDarkly.Sdk.Server.Subsystems.IDiagnosticDescription {
    public abstract virtual LdValue DescribeConfiguration(LdClientContext context);
}
public interface LaunchDarkly.Sdk.Server.Subsystems.IEventProcessor {
    public abstract virtual void RecordEvaluationEvent(EvaluationEvent e);
    public abstract virtual void RecordIdentifyEvent(IdentifyEvent e);
    public abstract virtual void RecordCustomEvent(CustomEvent e);
    public abstract virtual void RecordMigrationEvent(MigrationOpEvent e);
    public abstract virtual void Flush();
    public abstract virtual bool FlushAndWait(TimeSpan timeout);
}
public interface LaunchDarkly.Sdk.Server.Subsystems.IPersistentDataStore {
    public abstract virtual void Init(FullDataSet`1<SerializedItemDescriptor> allData);
    public abstract virtual Nullable`1<SerializedItemDescriptor> Get(DataKind kind, string key);
    public abstract virtual KeyedItems`1<SerializedItemDescriptor> GetAll(DataKind kind);
    public abstract virtual bool Upsert(DataKind kind, string key, SerializedItemDescriptor item);
    public abstract virtual bool Initialized();
    public abstract virtual bool IsStoreAvailable();
}
public interface LaunchDarkly.Sdk.Server.Subsystems.IPersistentDataStoreAsync {
    public abstract virtual Task InitAsync(FullDataSet`1<SerializedItemDescriptor> allData);
    public abstract virtual Task`1<Nullable`1<SerializedItemDescriptor>> GetAsync(DataKind kind, string key);
    public abstract virtual Task`1<KeyedItems`1<SerializedItemDescriptor>> GetAllAsync(DataKind kind);
    public abstract virtual Task`1<bool> UpsertAsync(DataKind kind, string key, SerializedItemDescriptor item);
    public abstract virtual Task`1<bool> InitializedAsync();
    public abstract virtual Task`1<bool> IsStoreAvailableAsync();
}
public class LaunchDarkly.Sdk.Server.Subsystems.LdClientContext : object {
    [CompilerGeneratedAttribute]
private IDataSourceUpdates <DataSourceUpdates>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataStoreUpdates <DataStoreUpdates>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpConfiguration <Http>k__BackingField;
    [CompilerGeneratedAttribute]
private Logger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Offline>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SdkKey>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceEndpoints <ServiceEndpoints>k__BackingField;
    [CompilerGeneratedAttribute]
private IDiagnosticStore <DiagnosticStore>k__BackingField;
    [CompilerGeneratedAttribute]
private TaskExecutor <TaskExecutor>k__BackingField;
    [CompilerGeneratedAttribute]
private ApplicationInfo <ApplicationInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private WrapperInfo <WrapperInfo>k__BackingField;
    public IDataSourceUpdates DataSourceUpdates { get; }
    public IDataStoreUpdates DataStoreUpdates { get; }
    public HttpConfiguration Http { get; }
    public Logger Logger { get; }
    public bool Offline { get; }
    public string SdkKey { get; }
    public ServiceEndpoints ServiceEndpoints { get; }
    internal IDiagnosticStore DiagnosticStore { get; }
    internal TaskExecutor TaskExecutor { get; }
    internal ApplicationInfo ApplicationInfo { get; }
    internal WrapperInfo WrapperInfo { get; }
    public LdClientContext(string sdkKey, IDataSourceUpdates dataSourceUpdates, IDataStoreUpdates dataStoreUpdates, HttpConfiguration http, Logger logger, bool offline, ServiceEndpoints serviceEndpoints);
    public LdClientContext(string sdkKey);
    internal LdClientContext(string sdkKey, IDataSourceUpdates dataSourceUpdates, IDataStoreUpdates dataStoreUpdates, HttpConfiguration http, Logger logger, bool offline, ServiceEndpoints serviceEndpoints, IDiagnosticStore diagnosticStore, TaskExecutor taskExecutor, ApplicationInfo applicationInfo, WrapperInfo wrapperInfo);
    [CompilerGeneratedAttribute]
public IDataSourceUpdates get_DataSourceUpdates();
    [CompilerGeneratedAttribute]
public IDataStoreUpdates get_DataStoreUpdates();
    [CompilerGeneratedAttribute]
public HttpConfiguration get_Http();
    [CompilerGeneratedAttribute]
public Logger get_Logger();
    [CompilerGeneratedAttribute]
public bool get_Offline();
    [CompilerGeneratedAttribute]
public string get_SdkKey();
    [CompilerGeneratedAttribute]
public ServiceEndpoints get_ServiceEndpoints();
    [CompilerGeneratedAttribute]
internal IDiagnosticStore get_DiagnosticStore();
    [CompilerGeneratedAttribute]
internal TaskExecutor get_TaskExecutor();
    [CompilerGeneratedAttribute]
internal ApplicationInfo get_ApplicationInfo();
    [CompilerGeneratedAttribute]
internal WrapperInfo get_WrapperInfo();
    internal LdClientContext WithDataSourceUpdates(IDataSourceUpdates newDataSourceUpdates);
    internal LdClientContext WithDataStoreUpdates(IDataStoreUpdates newDataStoreUpdates);
    internal LdClientContext WithDiagnosticStore(IDiagnosticStore newDiagnosticStore);
    internal LdClientContext WithHttp(HttpConfiguration newHttp);
    internal LdClientContext WithLogger(Logger newLogger);
    internal LdClientContext WithTaskExecutor(TaskExecutor newTaskExecutor);
    internal LdClientContext WithApplicationInfo(ApplicationInfo applicationInfo);
    internal LdClientContext WithWrapperInfo(WrapperInfo wrapperInfo);
    private static HttpConfiguration DefaultHttpConfiguration();
}
public class LaunchDarkly.Sdk.Server.Subsystems.LoggingConfiguration : object {
    [CompilerGeneratedAttribute]
private string <BaseLoggerName>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogAdapter <LogAdapter>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <LogDataSourceOutageAsErrorAfter>k__BackingField;
    public string BaseLoggerName { get; }
    public ILogAdapter LogAdapter { get; }
    public Nullable`1<TimeSpan> LogDataSourceOutageAsErrorAfter { get; }
    public LoggingConfiguration(string baseLoggerName, ILogAdapter logAdapter, Nullable`1<TimeSpan> logDataSourceOutageAsErrorAfter);
    [CompilerGeneratedAttribute]
public string get_BaseLoggerName();
    [CompilerGeneratedAttribute]
public ILogAdapter get_LogAdapter();
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_LogDataSourceOutageAsErrorAfter();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
