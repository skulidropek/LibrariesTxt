public class LaunchDarkly.Sdk.EvaluationDetail`1 : ValueType {
    private T _value;
    private Nullable`1<int> _variationIndex;
    private EvaluationReason _reason;
    public T Value { get; }
    public Nullable`1<int> VariationIndex { get; }
    public EvaluationReason Reason { get; }
    public bool IsDefaultValue { get; }
    public EvaluationDetail`1(T value, Nullable`1<int> variationIndex, EvaluationReason reason);
    public T get_Value();
    public Nullable`1<int> get_VariationIndex();
    public EvaluationReason get_Reason();
    public bool get_IsDefaultValue();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter")]
public enum LaunchDarkly.Sdk.EvaluationErrorKind : Enum {
    public int value__;
    public static EvaluationErrorKind NONE;
    public static EvaluationErrorKind CLIENT_NOT_READY;
    public static EvaluationErrorKind FLAG_NOT_FOUND;
    public static EvaluationErrorKind USER_NOT_SPECIFIED;
    public static EvaluationErrorKind MALFORMED_FLAG;
    public static EvaluationErrorKind WRONG_TYPE;
    public static EvaluationErrorKind EXCEPTION;
}
[JsonConverterAttribute("LaunchDarkly.Sdk.EvaluationReasonConverter")]
public class LaunchDarkly.Sdk.EvaluationReason : ValueType {
    private static EvaluationReason _offInstance;
    private static EvaluationReason _fallthroughInstance;
    private static EvaluationReason _targetMatchInstance;
    private EvaluationReasonKind _kind;
    private int _ruleIndex;
    private string _ruleId;
    private string _prerequisiteKey;
    private EvaluationErrorKind _errorKind;
    public EvaluationReasonKind Kind { get; }
    public int RuleIndex { get; }
    public string RuleId { get; }
    public string PrerequisiteKey { get; }
    public EvaluationErrorKind ErrorKind { get; }
    public static EvaluationReason OffReason { get; }
    public static EvaluationReason FallthroughReason { get; }
    public static EvaluationReason TargetMatchReason { get; }
    internal EvaluationReason(EvaluationReasonKind kind, int ruleIndex, string ruleId, string prereqKey, EvaluationErrorKind errorKind);
    private static EvaluationReason();
    public EvaluationReasonKind get_Kind();
    public int get_RuleIndex();
    public string get_RuleId();
    public string get_PrerequisiteKey();
    public EvaluationErrorKind get_ErrorKind();
    public static EvaluationReason get_OffReason();
    public static EvaluationReason get_FallthroughReason();
    public static EvaluationReason get_TargetMatchReason();
    public static EvaluationReason RuleMatchReason(int ruleIndex, string ruleId);
    public static EvaluationReason PrerequisiteFailedReason(string key);
    public static EvaluationReason ErrorReason(EvaluationErrorKind errorKind);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
internal class LaunchDarkly.Sdk.EvaluationReasonConverter : JsonConverter {
    internal static EvaluationReasonConverter Instance;
    private static EvaluationReasonConverter();
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
}
[JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter")]
public enum LaunchDarkly.Sdk.EvaluationReasonKind : Enum {
    public int value__;
    public static EvaluationReasonKind OFF;
    public static EvaluationReasonKind FALLTHROUGH;
    public static EvaluationReasonKind TARGET_MATCH;
    public static EvaluationReasonKind RULE_MATCH;
    public static EvaluationReasonKind PREREQUISITE_FAILED;
    public static EvaluationReasonKind ERROR;
}
public class LaunchDarkly.Sdk.Interfaces.CustomEvent : Event {
    [CompilerGeneratedAttribute]
private LdValue <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <MetricValue>k__BackingField;
    public LdValue Data { get; private set; }
    public Nullable`1<double> MetricValue { get; private set; }
    internal CustomEvent(long creationDate, string key, User user, LdValue data, Nullable`1<double> metricValue);
    [CompilerGeneratedAttribute]
public LdValue get_Data();
    [CompilerGeneratedAttribute]
private void set_Data(LdValue value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_MetricValue();
    [CompilerGeneratedAttribute]
private void set_MetricValue(Nullable`1<double> value);
}
public abstract class LaunchDarkly.Sdk.Interfaces.Event : object {
    [CompilerGeneratedAttribute]
private User <User>k__BackingField;
    [CompilerGeneratedAttribute]
private long <CreationDate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    public User User { get; private set; }
    public long CreationDate { get; private set; }
    public string Key { get; private set; }
    internal Event(long creationDate, string key, User user);
    [CompilerGeneratedAttribute]
public User get_User();
    [CompilerGeneratedAttribute]
private void set_User(User value);
    [CompilerGeneratedAttribute]
public long get_CreationDate();
    [CompilerGeneratedAttribute]
private void set_CreationDate(long value);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
private void set_Key(string value);
}
public class LaunchDarkly.Sdk.Interfaces.FeatureRequestEvent : Event {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Variation>k__BackingField;
    [CompilerGeneratedAttribute]
private LdValue <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private LdValue <Default>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PrereqOf>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TrackEvents>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <DebugEventsUntilDate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Debug>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<EvaluationReason> <Reason>k__BackingField;
    public Nullable`1<int> Variation { get; private set; }
    public LdValue Value { get; private set; }
    public LdValue Default { get; private set; }
    public Nullable`1<int> Version { get; private set; }
    public string PrereqOf { get; private set; }
    public bool TrackEvents { get; private set; }
    public Nullable`1<long> DebugEventsUntilDate { get; private set; }
    public bool Debug { get; private set; }
    public Nullable`1<EvaluationReason> Reason { get; private set; }
    internal FeatureRequestEvent(long creationDate, string key, User user, Nullable`1<int> variation, LdValue value, LdValue defaultValue, Nullable`1<int> version, string prereqOf, bool trackEvents, Nullable`1<long> debugEventsUntilDate, bool debug, Nullable`1<EvaluationReason> reason);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Variation();
    [CompilerGeneratedAttribute]
private void set_Variation(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public LdValue get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(LdValue value);
    [CompilerGeneratedAttribute]
public LdValue get_Default();
    [CompilerGeneratedAttribute]
private void set_Default(LdValue value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Version();
    [CompilerGeneratedAttribute]
private void set_Version(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_PrereqOf();
    [CompilerGeneratedAttribute]
private void set_PrereqOf(string value);
    [CompilerGeneratedAttribute]
public bool get_TrackEvents();
    [CompilerGeneratedAttribute]
private void set_TrackEvents(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_DebugEventsUntilDate();
    [CompilerGeneratedAttribute]
private void set_DebugEventsUntilDate(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public bool get_Debug();
    [CompilerGeneratedAttribute]
private void set_Debug(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<EvaluationReason> get_Reason();
    [CompilerGeneratedAttribute]
private void set_Reason(Nullable`1<EvaluationReason> value);
}
public class LaunchDarkly.Sdk.Interfaces.IdentifyEvent : Event {
    internal IdentifyEvent(long creationDate, User user);
}
public interface LaunchDarkly.Sdk.Interfaces.IEventProcessor {
    public abstract virtual void SetOffline(bool offline);
    public abstract virtual void SendEvent(Event evt);
    public abstract virtual void Flush();
}
internal class LaunchDarkly.Sdk.Interfaces.IndexEvent : Event {
    internal IndexEvent(long creationDate, User user);
}
[CompilerGeneratedAttribute]
internal class LaunchDarkly.Sdk.Interfaces.NamespaceDoc : object {
}
internal class LaunchDarkly.Sdk.Interfaces.NullEventProcessor : object {
    private sealed virtual override void LaunchDarkly.Sdk.Interfaces.IEventProcessor.SetOffline(bool offline);
    private sealed virtual override void LaunchDarkly.Sdk.Interfaces.IEventProcessor.SendEvent(Event eventToLog);
    private sealed virtual override void LaunchDarkly.Sdk.Interfaces.IEventProcessor.Flush();
    private sealed virtual override void System.IDisposable.Dispose();
}
internal abstract class LaunchDarkly.Sdk.Internal.ClientEnvironment : object {
    public string VersionString { get; }
    public Version Version { get; }
    public string UserAgentType { get; }
    public string get_VersionString();
    public Version get_Version();
    public abstract virtual string get_UserAgentType();
}
internal class LaunchDarkly.Sdk.Internal.Events.AtomicBoolean : object {
    internal Int32 modreq(System.Runtime.CompilerServices.IsVolatile) _value;
    internal AtomicBoolean(bool value);
    internal bool Get();
    internal bool GetAndSet(bool newValue);
}
internal class LaunchDarkly.Sdk.Internal.Events.DefaultEventProcessor : object {
    internal static ILog Log;
    internal static string CurrentSchemaVersion;
    private BlockingCollection`1<IEventMessage> _messageQueue;
    private EventDispatcher _dispatcher;
    private IDiagnosticStore _diagnosticStore;
    private Timer _flushTimer;
    private Timer _flushUsersTimer;
    private TimeSpan _diagnosticRecordingInterval;
    private object _diagnosticTimerLock;
    private Timer _diagnosticTimer;
    private AtomicBoolean _stopped;
    private AtomicBoolean _offline;
    private AtomicBoolean _sentInitialDiagnostics;
    private AtomicBoolean _inputCapacityExceeded;
    internal DefaultEventProcessor(IEventProcessorConfiguration config, IUserDeduplicator userDeduplicator, HttpClient httpClient, IDiagnosticStore diagnosticStore, IDiagnosticDisabler diagnosticDisabler, Action testActionOnDiagnosticSend);
    private static DefaultEventProcessor();
    private void SetupDiagnosticInit(bool enabled);
    public sealed virtual void SetOffline(bool offline);
    public sealed virtual void SendEvent(Event eventToLog);
    public sealed virtual void Flush();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    private bool SubmitMessage(IEventMessage message);
    internal void WaitUntilInactive();
    private void DoBackgroundFlush(object stateInfo);
    private void DoUserKeysFlush(object stateInfo);
    internal void DoDiagnosticSend(object stateInfo);
    [CompilerGeneratedAttribute]
private void <.ctor>b__14_0(object sender, DisabledChangedArgs args);
}
internal class LaunchDarkly.Sdk.Internal.Events.DiagnosticEvent : ValueType {
    private LdValue _jsonValue;
    public LdValue JsonValue { get; }
    public DiagnosticEvent(LdValue jsonValue);
    public LdValue get_JsonValue();
}
internal class LaunchDarkly.Sdk.Internal.Events.DiagnosticId : object {
    [JsonPropertyAttribute]
internal Guid _diagnosticId;
    [JsonPropertyAttribute]
internal string _sdkKeySuffix;
    internal DiagnosticId(string sdkKey, Guid diagnosticId);
}
internal class LaunchDarkly.Sdk.Internal.Events.DiagnosticMessage : object {
}
internal class LaunchDarkly.Sdk.Internal.Events.DisabledChangedArgs : EventArgs {
    [CompilerGeneratedAttribute]
private bool <Disabled>k__BackingField;
    internal bool Disabled { get; }
    private DisabledChangedArgs(bool disabled);
    [CompilerGeneratedAttribute]
internal bool get_Disabled();
}
internal class LaunchDarkly.Sdk.Internal.Events.EventBuffer : object {
    private List`1<Event> _events;
    private EventSummarizer _summarizer;
    private IDiagnosticStore _diagnosticStore;
    private int _capacity;
    private bool _exceededCapacity;
    internal EventBuffer(int capacity, IDiagnosticStore diagnosticStore);
    internal void AddEvent(Event e);
    internal void AddToSummary(Event e);
    internal FlushPayload GetPayload();
    internal void Clear();
}
internal class LaunchDarkly.Sdk.Internal.Events.EventDispatcher : object {
    private static int MaxFlushWorkers;
    private IEventProcessorConfiguration _config;
    private IDiagnosticStore _diagnosticStore;
    private IUserDeduplicator _userDeduplicator;
    private CountdownEvent _flushWorkersCounter;
    private Action _testActionOnDiagnosticSend;
    private HttpClient _httpClient;
    private Random _random;
    private long _lastKnownPastTime;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _disabled;
    internal EventDispatcher(IEventProcessorConfiguration config, BlockingCollection`1<IEventMessage> messageQueue, IUserDeduplicator userDeduplicator, HttpClient httpClient, IDiagnosticStore diagnosticStore, Action testActionOnDiagnosticSend);
    private static EventDispatcher();
    private sealed virtual override void System.IDisposable.Dispose();
    private void Dispose(bool disposing);
    private void RunMainLoop(BlockingCollection`1<IEventMessage> messageQueue, EventBuffer buffer);
    private void SendAndResetDiagnostics(EventBuffer buffer);
    private void WaitForFlushes();
    private void ProcessEvent(Event e, EventBuffer buffer);
    private bool ShouldDebugEvent(FeatureRequestEvent fe);
    private bool ShouldTrackFullEvent(Event e);
    private void StartFlush(EventBuffer buffer);
    [AsyncStateMachineAttribute("LaunchDarkly.Sdk.Internal.Events.EventDispatcher/<FlushEventsAsync>d__20")]
private Task FlushEventsAsync(FlushPayload payload);
    [AsyncStateMachineAttribute("LaunchDarkly.Sdk.Internal.Events.EventDispatcher/<SendWithRetry>d__21")]
private Task SendWithRetry(Uri uri, string content, bool includeSchemaVersionHeader, Action`2<HttpResponseMessage, long> onComplete);
    [AsyncStateMachineAttribute("LaunchDarkly.Sdk.Internal.Events.EventDispatcher/<SendDiagnosticEventAsync>d__22")]
internal Task SendDiagnosticEventAsync(DiagnosticEvent diagnostic);
    [CompilerGeneratedAttribute]
private Task <SendAndResetDiagnostics>b__14_0();
    [CompilerGeneratedAttribute]
private void <FlushEventsAsync>b__20_0(HttpResponseMessage response, long duration);
    [CompilerGeneratedAttribute]
private void <SendDiagnosticEventAsync>b__22_0(HttpResponseMessage response, long duration);
}
internal class LaunchDarkly.Sdk.Internal.Events.EventFactory : ValueType {
    [CompilerGeneratedAttribute]
private static EventFactory <Default>k__BackingField;
    [CompilerGeneratedAttribute]
private static EventFactory <DefaultWithReasons>k__BackingField;
    internal Func`1<long> GetTimestamp;
    [CompilerGeneratedAttribute]
private bool <IncludeReasons>k__BackingField;
    internal static EventFactory Default { get; }
    internal static EventFactory DefaultWithReasons { get; }
    internal bool IncludeReasons { get; }
    internal EventFactory(Func`1<long> getTimestamp, bool includeReasons);
    private static EventFactory();
    [CompilerGeneratedAttribute]
internal static EventFactory get_Default();
    [CompilerGeneratedAttribute]
internal static EventFactory get_DefaultWithReasons();
    [CompilerGeneratedAttribute]
internal bool get_IncludeReasons();
    private static long CurrentTime();
    internal FeatureRequestEvent NewFeatureRequestEvent(IFlagEventProperties flag, User user, EvaluationDetail`1<LdValue> result, LdValue defaultVal);
    internal FeatureRequestEvent NewDefaultFeatureRequestEvent(IFlagEventProperties flag, User user, LdValue defaultVal, EvaluationErrorKind errorKind);
    internal FeatureRequestEvent NewUnknownFeatureRequestEvent(string key, User user, LdValue defaultVal, EvaluationErrorKind errorKind);
    internal FeatureRequestEvent NewPrerequisiteFeatureRequestEvent(IFlagEventProperties prereqFlag, User user, EvaluationDetail`1<LdValue> result, IFlagEventProperties prereqOf);
    internal FeatureRequestEvent NewDebugEvent(FeatureRequestEvent from);
    internal CustomEvent NewCustomEvent(string key, User user, LdValue data, Nullable`1<double> metricValue);
    internal IdentifyEvent NewIdentifyEvent(User user);
}
internal class LaunchDarkly.Sdk.Internal.Events.EventMessage : object {
    [CompilerGeneratedAttribute]
private Event <Event>k__BackingField;
    internal Event Event { get; private set; }
    internal EventMessage(Event e);
    [CompilerGeneratedAttribute]
internal Event get_Event();
    [CompilerGeneratedAttribute]
private void set_Event(Event value);
}
internal class LaunchDarkly.Sdk.Internal.Events.EventOutputFormatter : object {
    private IEventProcessorConfiguration _config;
    internal EventOutputFormatter(IEventProcessorConfiguration config);
    internal string SerializeOutputEvents(Event[] events, EventSummary summary, Int32& eventCountOut);
}
internal class LaunchDarkly.Sdk.Internal.Events.EventOutputFormatterScope : ValueType {
    private IEventProcessorConfiguration _config;
    private JsonWriter _jsonWriter;
    private JsonSerializer _jsonSerializer;
    internal EventOutputFormatterScope(IEventProcessorConfiguration config, TextWriter tw, bool inlineUsers);
    internal int WriteOutputEvents(Event[] events, EventSummary summary);
    private bool WriteOutputEvent(Event e);
    private void WriteSummaryEvent(EventSummary summary);
    private void MaybeWriteString(string name, string value);
    private void WithBaseObject(string kind, long creationDate, string key, Action`1<EventOutputFormatterScope> moreActions);
    private void WriteUserOrKey(User user, bool forceInline);
    private void WriteUser(User user);
    private void WriteReason(Nullable`1<EvaluationReason> reason);
}
internal class LaunchDarkly.Sdk.Internal.Events.EventsCounterKey : object {
    internal string Key;
    internal Nullable`1<int> Version;
    internal Nullable`1<int> Variation;
    internal EventsCounterKey(string key, Nullable`1<int> version, Nullable`1<int> variation);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class LaunchDarkly.Sdk.Internal.Events.EventsCounterValue : object {
    internal int Count;
    internal LdValue FlagValue;
    internal LdValue Default;
    internal EventsCounterValue(int count, LdValue flagValue, LdValue defaultVal);
    internal void Increment();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
internal class LaunchDarkly.Sdk.Internal.Events.EventSummarizer : object {
    private EventSummary _eventsState;
    internal void SummarizeEvent(Event e);
    internal EventSummary Snapshot();
    internal void Clear();
}
internal class LaunchDarkly.Sdk.Internal.Events.EventSummary : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<EventsCounterKey, EventsCounterValue> <Counters>k__BackingField;
    [CompilerGeneratedAttribute]
private long <StartDate>k__BackingField;
    [CompilerGeneratedAttribute]
private long <EndDate>k__BackingField;
    internal Dictionary`2<EventsCounterKey, EventsCounterValue> Counters { get; }
    internal long StartDate { get; private set; }
    internal long EndDate { get; private set; }
    internal bool Empty { get; }
    [CompilerGeneratedAttribute]
internal Dictionary`2<EventsCounterKey, EventsCounterValue> get_Counters();
    [CompilerGeneratedAttribute]
internal long get_StartDate();
    [CompilerGeneratedAttribute]
private void set_StartDate(long value);
    [CompilerGeneratedAttribute]
internal long get_EndDate();
    [CompilerGeneratedAttribute]
private void set_EndDate(long value);
    internal bool get_Empty();
    internal void IncrementCounter(string key, Nullable`1<int> variation, Nullable`1<int> version, LdValue flagValue, LdValue defaultVal);
    internal void NoteTimestamp(long timestamp);
}
internal class LaunchDarkly.Sdk.Internal.Events.EventUser : ValueType {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Secondary>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IPAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Country>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FirstName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LastName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Avatar>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Email>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Anonymous>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, LdValue> <Custom>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableSortedSet`1<string> <PrivateAttrs>k__BackingField;
    public string Key { get; internal set; }
    public string Secondary { get; internal set; }
    public string IPAddress { get; internal set; }
    public string Country { get; internal set; }
    public string FirstName { get; internal set; }
    public string LastName { get; internal set; }
    public string Name { get; internal set; }
    public string Avatar { get; internal set; }
    public string Email { get; internal set; }
    public Nullable`1<bool> Anonymous { get; internal set; }
    public IImmutableDictionary`2<string, LdValue> Custom { get; internal set; }
    public ImmutableSortedSet`1<string> PrivateAttrs { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
internal void set_Key(string value);
    [CompilerGeneratedAttribute]
public string get_Secondary();
    [CompilerGeneratedAttribute]
internal void set_Secondary(string value);
    [CompilerGeneratedAttribute]
public string get_IPAddress();
    [CompilerGeneratedAttribute]
internal void set_IPAddress(string value);
    [CompilerGeneratedAttribute]
public string get_Country();
    [CompilerGeneratedAttribute]
internal void set_Country(string value);
    [CompilerGeneratedAttribute]
public string get_FirstName();
    [CompilerGeneratedAttribute]
internal void set_FirstName(string value);
    [CompilerGeneratedAttribute]
public string get_LastName();
    [CompilerGeneratedAttribute]
internal void set_LastName(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
internal void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Avatar();
    [CompilerGeneratedAttribute]
internal void set_Avatar(string value);
    [CompilerGeneratedAttribute]
public string get_Email();
    [CompilerGeneratedAttribute]
internal void set_Email(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Anonymous();
    [CompilerGeneratedAttribute]
internal void set_Anonymous(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public IImmutableDictionary`2<string, LdValue> get_Custom();
    [CompilerGeneratedAttribute]
internal void set_Custom(IImmutableDictionary`2<string, LdValue> value);
    [CompilerGeneratedAttribute]
public ImmutableSortedSet`1<string> get_PrivateAttrs();
    [CompilerGeneratedAttribute]
public void set_PrivateAttrs(ImmutableSortedSet`1<string> value);
    internal static EventUser FromUser(User user, IEventProcessorConfiguration config);
}
internal class LaunchDarkly.Sdk.Internal.Events.EventUserBuilder : ValueType {
    private IEventProcessorConfiguration _config;
    private User _user;
    private EventUser _result;
    private Builder<string> _privateAttrs;
    internal EventUserBuilder(User user, IEventProcessorConfiguration config);
    internal EventUser Build();
    private bool CheckPrivateAttr(string name, T value);
    private string StringAttrIfNotPrivate(string name, string value);
}
internal class LaunchDarkly.Sdk.Internal.Events.FlushMessage : object {
}
internal class LaunchDarkly.Sdk.Internal.Events.FlushPayload : object {
    [CompilerGeneratedAttribute]
private Event[] <Events>k__BackingField;
    [CompilerGeneratedAttribute]
private EventSummary <Summary>k__BackingField;
    internal Event[] Events { get; internal set; }
    internal EventSummary Summary { get; internal set; }
    [CompilerGeneratedAttribute]
internal Event[] get_Events();
    [CompilerGeneratedAttribute]
internal void set_Events(Event[] value);
    [CompilerGeneratedAttribute]
internal EventSummary get_Summary();
    [CompilerGeneratedAttribute]
internal void set_Summary(EventSummary value);
}
internal class LaunchDarkly.Sdk.Internal.Events.FlushUsersMessage : object {
}
internal interface LaunchDarkly.Sdk.Internal.Events.IDiagnosticDisabler {
    public bool Disabled { get; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_DisabledChanged(EventHandler`1<DisabledChangedArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DisabledChanged(EventHandler`1<DisabledChangedArgs> value);
    public abstract virtual bool get_Disabled();
}
internal interface LaunchDarkly.Sdk.Internal.Events.IDiagnosticStore {
    public DateTime DataSince { get; }
    public Nullable`1<DiagnosticEvent> InitEvent { get; }
    public Nullable`1<DiagnosticEvent> PersistedUnsentEvent { get; }
    public abstract virtual DateTime get_DataSince();
    public abstract virtual Nullable`1<DiagnosticEvent> get_InitEvent();
    public abstract virtual Nullable`1<DiagnosticEvent> get_PersistedUnsentEvent();
    public abstract virtual void IncrementDeduplicatedUsers();
    public abstract virtual void IncrementDroppedEvents();
    public abstract virtual void AddStreamInit(DateTime timestamp, TimeSpan duration, bool failed);
    public abstract virtual void RecordEventsInBatch(long eventsInBatch);
    public abstract virtual DiagnosticEvent CreateEventAndReset();
}
internal interface LaunchDarkly.Sdk.Internal.Events.IEventMessage {
}
internal interface LaunchDarkly.Sdk.Internal.Events.IEventProcessorConfiguration {
    public bool AllAttributesPrivate { get; }
    public TimeSpan DiagnosticRecordingInterval { get; }
    public Uri DiagnosticUri { get; }
    public int EventCapacity { get; }
    public TimeSpan EventFlushInterval { get; }
    public Uri EventsUri { get; }
    public TimeSpan HttpClientTimeout { get; }
    public bool InlineUsersInEvents { get; }
    public IImmutableSet`1<string> PrivateAttributeNames { get; }
    public TimeSpan ReadTimeout { get; }
    public TimeSpan ReconnectTime { get; }
    public int UserKeysCapacity { get; }
    public TimeSpan UserKeysFlushInterval { get; }
    public abstract virtual bool get_AllAttributesPrivate();
    public abstract virtual TimeSpan get_DiagnosticRecordingInterval();
    public abstract virtual Uri get_DiagnosticUri();
    public abstract virtual int get_EventCapacity();
    public abstract virtual TimeSpan get_EventFlushInterval();
    public abstract virtual Uri get_EventsUri();
    public abstract virtual TimeSpan get_HttpClientTimeout();
    public abstract virtual bool get_InlineUsersInEvents();
    public abstract virtual IImmutableSet`1<string> get_PrivateAttributeNames();
    public abstract virtual TimeSpan get_ReadTimeout();
    public abstract virtual TimeSpan get_ReconnectTime();
    public abstract virtual int get_UserKeysCapacity();
    public abstract virtual TimeSpan get_UserKeysFlushInterval();
}
internal interface LaunchDarkly.Sdk.Internal.Events.IFlagEventProperties {
    public string Key { get; }
    public int EventVersion { get; }
    public bool TrackEvents { get; }
    public Nullable`1<long> DebugEventsUntilDate { get; }
    public abstract virtual string get_Key();
    public abstract virtual int get_EventVersion();
    public abstract virtual bool get_TrackEvents();
    public abstract virtual Nullable`1<long> get_DebugEventsUntilDate();
    public abstract virtual bool IsExperiment(Nullable`1<EvaluationReason> reason);
}
internal interface LaunchDarkly.Sdk.Internal.Events.IUserDeduplicator {
    public Nullable`1<TimeSpan> FlushInterval { get; }
    public abstract virtual Nullable`1<TimeSpan> get_FlushInterval();
    public abstract virtual bool ProcessUser(User user);
    public abstract virtual void Flush();
}
internal class LaunchDarkly.Sdk.Internal.Events.ShutdownMessage : SynchronousMessage {
}
internal class LaunchDarkly.Sdk.Internal.Events.SynchronousMessage : object {
    internal Semaphore _reply;
    internal void WaitForCompletion();
    internal void Completed();
}
internal class LaunchDarkly.Sdk.Internal.Events.TestSyncMessage : SynchronousMessage {
}
internal class LaunchDarkly.Sdk.Internal.Helpers.HashCodeBuilder : ValueType {
    private int _value;
    public int Value { get; }
    internal HashCodeBuilder(int value);
    public int get_Value();
    public HashCodeBuilder With(object o);
}
[DefaultMemberAttribute("Item")]
internal class LaunchDarkly.Sdk.Internal.Helpers.LdValueDictionaryConverter`2 : ValueType {
    private IDictionary`2<string, T> _source;
    private Func`2<T, U> _converter;
    public U Item { get; }
    public IEnumerable`1<string> Keys { get; }
    public IEnumerable`1<U> Values { get; }
    public int Count { get; }
    internal LdValueDictionaryConverter`2(IDictionary`2<string, T> source, Func`2<T, U> converter);
    public sealed virtual U get_Item(string key);
    public sealed virtual IEnumerable`1<string> get_Keys();
    public sealed virtual IEnumerable`1<U> get_Values();
    public sealed virtual int get_Count();
    public sealed virtual bool ContainsKey(string key);
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, U>> GetEnumerator();
    public sealed virtual bool TryGetValue(string key, U& value);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
internal class LaunchDarkly.Sdk.Internal.Helpers.LdValueListConverter`2 : ValueType {
    private IList`1<T> _source;
    private Func`2<T, U> _converter;
    public U Item { get; }
    public int Count { get; }
    internal LdValueListConverter`2(IList`1<T> source, Func`2<T, U> converter);
    public sealed virtual U get_Item(int index);
    public sealed virtual int get_Count();
    public sealed virtual IEnumerator`1<U> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual string ToString();
}
internal class LaunchDarkly.Sdk.Internal.Helpers.LdValueSerializer : JsonConverter {
    internal static LdValueSerializer Instance;
    private static LdValueSerializer();
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    private LdValue ReadValue(JsonReader reader, JsonToken token);
    public virtual bool CanConvert(Type objectType);
}
internal class LaunchDarkly.Sdk.Internal.Helpers.UserJsonSerializer : JsonConverter {
    internal static UserJsonSerializer Instance;
    public bool CanRead { get; }
    public bool CanWrite { get; }
    private static UserJsonSerializer();
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    private static void MaybeWriteString(JsonWriter writer, string propertyName, string value);
}
internal static class LaunchDarkly.Sdk.Internal.Helpers.Util : object {
    internal static DateTime UnixEpoch;
    private static Util();
    internal static Dictionary`2<string, string> GetRequestHeaders(IHttpRequestConfiguration config, ClientEnvironment env);
    internal static HttpClient MakeHttpClient(IHttpRequestConfiguration config, ClientEnvironment env);
    internal static long GetUnixTimestampMillis(DateTime dateTime);
    internal static T Clamp(T value, T min, T max);
    internal static string ExceptionMessage(Exception e);
    internal static bool IsHttpErrorRecoverable(int status);
    internal static string HttpErrorMessage(int status, string context, string recoverableMessage);
    internal static HashCodeBuilder Hash();
}
internal interface LaunchDarkly.Sdk.Internal.IHttpRequestConfiguration {
    public string HttpAuthorizationKey { get; }
    public HttpMessageHandler HttpMessageHandler { get; }
    public string WrapperName { get; }
    public string WrapperVersion { get; }
    public abstract virtual string get_HttpAuthorizationKey();
    public abstract virtual HttpMessageHandler get_HttpMessageHandler();
    public abstract virtual string get_WrapperName();
    public abstract virtual string get_WrapperVersion();
}
internal interface LaunchDarkly.Sdk.Internal.Stream.IStreamManagerConfiguration {
    public TimeSpan ReadTimeout { get; }
    public TimeSpan ReconnectTime { get; }
    public TimeSpan HttpClientTimeout { get; }
    public abstract virtual TimeSpan get_ReadTimeout();
    public abstract virtual TimeSpan get_ReconnectTime();
    public abstract virtual TimeSpan get_HttpClientTimeout();
    public abstract virtual Exception TranslateHttpException(Exception e);
}
internal interface LaunchDarkly.Sdk.Internal.Stream.IStreamProcessor {
    public abstract virtual Task HandleMessage(StreamManager streamManager, string messageType, string messageData);
}
internal class LaunchDarkly.Sdk.Internal.Stream.StreamManager : object {
    private static ILog Log;
    private static int UNINITIALIZED;
    private static int INITIALIZED;
    private IStreamProcessor _streamProcessor;
    private StreamProperties _streamProperties;
    private IStreamManagerConfiguration _config;
    private ClientEnvironment _clientEnvironment;
    private TaskCompletionSource`1<bool> _initTask;
    private EventSourceCreator _esCreator;
    private ExponentialBackoffWithDecorrelation _backOff;
    private IDiagnosticStore _diagnosticStore;
    private IEventSource _es;
    private int _initialized;
    internal DateTime _esStarted;
    public bool Initialized { get; public set; }
    public StreamManager(IStreamProcessor streamProcessor, StreamProperties streamProperties, IStreamManagerConfiguration config, ClientEnvironment clientEnvironment, EventSourceCreator eventSourceCreator, IDiagnosticStore diagnosticStore);
    private static StreamManager();
    public bool get_Initialized();
    public void set_Initialized(bool value);
    public Task`1<bool> Start();
    [AsyncStateMachineAttribute("LaunchDarkly.Sdk.Internal.Stream.StreamManager/<Restart>d__20")]
public void Restart();
    private IEventSource DefaultEventSourceCreator(StreamProperties streamProperties, IDictionary`2<string, string> headers);
    [AsyncStateMachineAttribute("LaunchDarkly.Sdk.Internal.Stream.StreamManager/<OnMessage>d__22")]
private void OnMessage(object sender, MessageReceivedEventArgs e);
    private void RecordStreamInit(bool failed);
    private void OnOpen(object sender, StateChangedEventArgs e);
    private void OnClose(object sender, StateChangedEventArgs e);
    private void OnComment(object sender, CommentReceivedEventArgs e);
    private void OnError(object sender, ExceptionEventArgs e);
    private sealed virtual override void System.IDisposable.Dispose();
    private void Dispose(bool disposing);
    [CompilerGeneratedAttribute]
private Task <Start>b__19_0();
}
internal class LaunchDarkly.Sdk.Internal.Stream.StreamProperties : ValueType {
    [CompilerGeneratedAttribute]
private Uri <StreamUri>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpMethod <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpContent <RequestBody>k__BackingField;
    public Uri StreamUri { get; }
    public HttpMethod Method { get; }
    public HttpContent RequestBody { get; }
    public StreamProperties(Uri uri, HttpMethod method, HttpContent body);
    [CompilerGeneratedAttribute]
public Uri get_StreamUri();
    [CompilerGeneratedAttribute]
public HttpMethod get_Method();
    [CompilerGeneratedAttribute]
public HttpContent get_RequestBody();
}
internal class LaunchDarkly.Sdk.Internal.UnsuccessfulResponseException : Exception {
    [CompilerGeneratedAttribute]
private int <StatusCode>k__BackingField;
    public int StatusCode { get; private set; }
    internal UnsuccessfulResponseException(int statusCode);
    [CompilerGeneratedAttribute]
public int get_StatusCode();
    [CompilerGeneratedAttribute]
private void set_StatusCode(int value);
}
public interface LaunchDarkly.Sdk.IUserBuilder {
    public abstract virtual User Build();
    public abstract virtual IUserBuilder Key(string key);
    public abstract virtual IUserBuilderCanMakeAttributePrivate Secondary(string secondaryKey);
    [ObsoleteAttribute("Use Secondary instead")]
public abstract virtual IUserBuilder SecondaryKey(string secondaryKey);
    public abstract virtual IUserBuilderCanMakeAttributePrivate IPAddress(string ipAddress);
    public abstract virtual IUserBuilderCanMakeAttributePrivate Country(string country);
    public abstract virtual IUserBuilderCanMakeAttributePrivate FirstName(string firstName);
    public abstract virtual IUserBuilderCanMakeAttributePrivate LastName(string lastName);
    public abstract virtual IUserBuilderCanMakeAttributePrivate Name(string name);
    public abstract virtual IUserBuilderCanMakeAttributePrivate Avatar(string avatar);
    public abstract virtual IUserBuilderCanMakeAttributePrivate Email(string email);
    public abstract virtual IUserBuilder Anonymous(bool anonymous);
    public abstract virtual IUserBuilder AnonymousOptional(Nullable`1<bool> anonymous);
    public abstract virtual IUserBuilderCanMakeAttributePrivate Custom(string name, LdValue value);
    public abstract virtual IUserBuilderCanMakeAttributePrivate Custom(string name, bool value);
    public abstract virtual IUserBuilderCanMakeAttributePrivate Custom(string name, string value);
    public abstract virtual IUserBuilderCanMakeAttributePrivate Custom(string name, int value);
    public abstract virtual IUserBuilderCanMakeAttributePrivate Custom(string name, float value);
}
public interface LaunchDarkly.Sdk.IUserBuilderCanMakeAttributePrivate {
    public abstract virtual IUserBuilder AsPrivateAttribute();
}
[JsonConverterAttribute("LaunchDarkly.Sdk.Internal.Helpers.LdValueSerializer")]
public class LaunchDarkly.Sdk.LdValue : ValueType {
    private static LdValue _nullInstance;
    private static JsonSerializerSettings _serializerSettings;
    private LdValueType _type;
    private bool _boolValue;
    private double _doubleValue;
    private string _stringValue;
    private ImmutableList`1<LdValue> _arrayValue;
    private ImmutableDictionary`2<string, LdValue> _objectValue;
    public static LdValue Null { get; }
    internal ImmutableList`1<LdValue> List { get; }
    internal ImmutableDictionary`2<string, LdValue> Dictionary { get; }
    public LdValueType Type { get; }
    public bool IsNull { get; }
    public bool IsNumber { get; }
    public bool IsInt { get; }
    public bool IsString { get; }
    public bool AsBool { get; }
    public string AsString { get; }
    public int AsInt { get; }
    public long AsLong { get; }
    public float AsFloat { get; }
    public double AsDouble { get; }
    public int Count { get; }
    private LdValue(LdValueType type, bool boolValue, double doubleValue, string stringValue);
    private LdValue(ImmutableList`1<LdValue> list);
    private LdValue(ImmutableDictionary`2<string, LdValue> dict);
    private static LdValue();
    public static LdValue get_Null();
    internal ImmutableList`1<LdValue> get_List();
    internal ImmutableDictionary`2<string, LdValue> get_Dictionary();
    public static LdValue Of(bool value);
    public static LdValue Of(int value);
    public static LdValue Of(long value);
    public static LdValue Of(float value);
    public static LdValue Of(double value);
    public static LdValue Of(string value);
    public static LdValue ArrayFrom(IEnumerable`1<LdValue> values);
    public static LdValue ArrayOf(LdValue[] values);
    public static ArrayBuilder BuildArray();
    public static LdValue ObjectFrom(IReadOnlyDictionary`2<string, LdValue> dictionary);
    public static ObjectBuilder BuildObject();
    public static LdValue Parse(string jsonString);
    public LdValueType get_Type();
    public bool get_IsNull();
    public bool get_IsNumber();
    public bool get_IsInt();
    public bool get_IsString();
    public bool get_AsBool();
    public string get_AsString();
    public int get_AsInt();
    public long get_AsLong();
    public float get_AsFloat();
    public double get_AsDouble();
    public int get_Count();
    public LdValue Get(int index);
    public LdValue Get(string key);
    public IReadOnlyList`1<T> AsList(Converter`1<T> desiredType);
    public IReadOnlyDictionary`2<string, T> AsDictionary(Converter`1<T> desiredType);
    public string ToJsonString();
    public virtual bool Equals(object o);
    public sealed virtual bool Equals(LdValue o);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public enum LaunchDarkly.Sdk.LdValueType : Enum {
    public int value__;
    public static LdValueType Null;
    public static LdValueType Bool;
    public static LdValueType Number;
    public static LdValueType String;
    public static LdValueType Array;
    public static LdValueType Object;
}
public class LaunchDarkly.Sdk.Logging.ConsoleAdapter : AbstractSimpleLoggerFactoryAdapter {
    private bool _useStandardError;
    public ConsoleAdapter(NameValueCollection properties);
    public ConsoleAdapter(LogLevel level);
    public ConsoleAdapter(LogLevel level, bool showDateTime, bool showLogName, bool showLevel, string dateTimeFormat);
    public ConsoleAdapter(LogLevel level, bool showDateTime, bool showLogName, bool showLevel, string dateTimeFormat, bool useStandardError);
    protected virtual ILog CreateLogger(string name, LogLevel level, bool showLevel, bool showDateTime, bool showLogName, string dateTimeFormat);
}
internal class LaunchDarkly.Sdk.Logging.ConsoleLogger : AbstractSimpleLogger {
    private bool _useStandardError;
    public ConsoleLogger(string logName, LogLevel logLevel, bool showLevel, bool showDateTime, bool showLogName, string dateTimeFormat, bool useStandardError);
    protected virtual void WriteInternal(LogLevel level, object message, Exception e);
}
[CompilerGeneratedAttribute]
internal class LaunchDarkly.Sdk.Logging.NamespaceDoc : object {
}
[CompilerGeneratedAttribute]
internal class LaunchDarkly.Sdk.NamespaceDoc : object {
}
[JsonConverterAttribute("LaunchDarkly.Sdk.Internal.Helpers.UserJsonSerializer")]
public class LaunchDarkly.Sdk.User : object {
    private string _key;
    private string _secondary;
    private string _ip;
    private string _country;
    private string _firstName;
    private string _lastName;
    private string _name;
    private string _avatar;
    private string _email;
    private Nullable`1<bool> _anonymous;
    internal ImmutableDictionary`2<string, LdValue> _custom;
    internal ImmutableHashSet`1<string> _privateAttributeNames;
    [JsonPropertyAttribute]
public string Key { get; }
    [JsonPropertyAttribute]
public string Secondary { get; }
    [ObsoleteAttribute("use Secondary")]
[JsonIgnoreAttribute]
public string SecondaryKey { get; }
    [JsonPropertyAttribute]
public string IPAddress { get; }
    [JsonPropertyAttribute]
public string Country { get; }
    [JsonPropertyAttribute]
public string FirstName { get; }
    [JsonPropertyAttribute]
public string LastName { get; }
    [JsonPropertyAttribute]
public string Name { get; }
    [JsonPropertyAttribute]
public string Avatar { get; }
    [JsonPropertyAttribute]
public string Email { get; }
    [JsonIgnoreAttribute]
public bool Anonymous { get; }
    [JsonPropertyAttribute]
public Nullable`1<bool> AnonymousOptional { get; }
    [JsonPropertyAttribute]
public IImmutableDictionary`2<string, LdValue> Custom { get; }
    [JsonIgnoreAttribute]
public IImmutableSet`1<string> PrivateAttributeNames { get; }
    private User(string key);
    [JsonConstructorAttribute]
public User(string key, string secondary, string ip, string country, string firstName, string lastName, string name, string avatar, string email, Nullable`1<bool> anonymous, ImmutableDictionary`2<string, LdValue> custom, ImmutableHashSet`1<string> privateAttributeNames);
    public string get_Key();
    public string get_Secondary();
    public string get_SecondaryKey();
    public string get_IPAddress();
    public string get_Country();
    public string get_FirstName();
    public string get_LastName();
    public string get_Name();
    public string get_Avatar();
    public string get_Email();
    public bool get_Anonymous();
    public Nullable`1<bool> get_AnonymousOptional();
    public IImmutableDictionary`2<string, LdValue> get_Custom();
    public IImmutableSet`1<string> get_PrivateAttributeNames();
    public static IUserBuilder Builder(string key);
    public static IUserBuilder Builder(User fromUser);
    public static User WithKey(string key);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(User u);
    public virtual int GetHashCode();
}
internal class LaunchDarkly.Sdk.UserBuilder : object {
    private string _key;
    private string _secondary;
    private string _ipAddress;
    private string _country;
    private string _firstName;
    private string _lastName;
    private string _name;
    private string _avatar;
    private string _email;
    private Nullable`1<bool> _anonymous;
    private Builder<string, LdValue> _custom;
    private Builder<string> _privateAttributeNames;
    internal UserBuilder(string key);
    internal UserBuilder(User fromUser);
    public sealed virtual User Build();
    public sealed virtual IUserBuilder Key(string key);
    public sealed virtual IUserBuilderCanMakeAttributePrivate Secondary(string secondary);
    public sealed virtual IUserBuilder SecondaryKey(string secondaryKey);
    public sealed virtual IUserBuilderCanMakeAttributePrivate IPAddress(string ipAddress);
    public sealed virtual IUserBuilderCanMakeAttributePrivate Country(string country);
    public sealed virtual IUserBuilderCanMakeAttributePrivate FirstName(string firstName);
    public sealed virtual IUserBuilderCanMakeAttributePrivate LastName(string lastName);
    public sealed virtual IUserBuilderCanMakeAttributePrivate Name(string name);
    public sealed virtual IUserBuilderCanMakeAttributePrivate Avatar(string avatar);
    public sealed virtual IUserBuilderCanMakeAttributePrivate Email(string email);
    public sealed virtual IUserBuilder Anonymous(bool anonymous);
    public sealed virtual IUserBuilder AnonymousOptional(Nullable`1<bool> anonymous);
    public sealed virtual IUserBuilderCanMakeAttributePrivate Custom(string name, LdValue value);
    public sealed virtual IUserBuilderCanMakeAttributePrivate Custom(string name, bool value);
    public sealed virtual IUserBuilderCanMakeAttributePrivate Custom(string name, string value);
    public sealed virtual IUserBuilderCanMakeAttributePrivate Custom(string name, int value);
    public sealed virtual IUserBuilderCanMakeAttributePrivate Custom(string name, float value);
    private IUserBuilderCanMakeAttributePrivate CanMakeAttributePrivate(string attrName);
    internal IUserBuilder AddPrivateAttribute(string attrName);
}
internal class LaunchDarkly.Sdk.UserBuilderCanMakeAttributePrivate : object {
    private UserBuilder _builder;
    private string _attrName;
    internal UserBuilderCanMakeAttributePrivate(UserBuilder builder, string attrName);
    public sealed virtual User Build();
    public sealed virtual IUserBuilder Key(string key);
    public sealed virtual IUserBuilderCanMakeAttributePrivate Secondary(string secondary);
    public sealed virtual IUserBuilder SecondaryKey(string secondaryKey);
    public sealed virtual IUserBuilderCanMakeAttributePrivate IPAddress(string ipAddress);
    public sealed virtual IUserBuilderCanMakeAttributePrivate Country(string country);
    public sealed virtual IUserBuilderCanMakeAttributePrivate FirstName(string firstName);
    public sealed virtual IUserBuilderCanMakeAttributePrivate LastName(string lastName);
    public sealed virtual IUserBuilderCanMakeAttributePrivate Name(string name);
    public sealed virtual IUserBuilderCanMakeAttributePrivate Avatar(string avatar);
    public sealed virtual IUserBuilderCanMakeAttributePrivate Email(string email);
    public sealed virtual IUserBuilder Anonymous(bool anonymous);
    public sealed virtual IUserBuilder AnonymousOptional(Nullable`1<bool> anonymous);
    public sealed virtual IUserBuilderCanMakeAttributePrivate Custom(string name, LdValue value);
    public sealed virtual IUserBuilderCanMakeAttributePrivate Custom(string name, bool value);
    public sealed virtual IUserBuilderCanMakeAttributePrivate Custom(string name, string value);
    public sealed virtual IUserBuilderCanMakeAttributePrivate Custom(string name, int value);
    public sealed virtual IUserBuilderCanMakeAttributePrivate Custom(string name, float value);
    public sealed virtual IUserBuilder AsPrivateAttribute();
}
