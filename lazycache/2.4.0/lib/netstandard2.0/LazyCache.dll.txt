[ExtensionAttribute]
public static class LazyCache.AppCacheExtensions : object {
    [ExtensionAttribute]
public static void Add(IAppCache cache, string key, T item);
    [ExtensionAttribute]
public static void Add(IAppCache cache, string key, T item, DateTimeOffset expires);
    [ExtensionAttribute]
public static void Add(IAppCache cache, string key, T item, TimeSpan slidingExpiration);
    [ExtensionAttribute]
public static T GetOrAdd(IAppCache cache, string key, Func`1<T> addItemFactory);
    [ExtensionAttribute]
public static T GetOrAdd(IAppCache cache, string key, Func`1<T> addItemFactory, DateTimeOffset expires);
    [ExtensionAttribute]
public static T GetOrAdd(IAppCache cache, string key, Func`1<T> addItemFactory, DateTimeOffset expires, ExpirationMode mode);
    [ExtensionAttribute]
public static T GetOrAdd(IAppCache cache, string key, Func`1<T> addItemFactory, TimeSpan slidingExpiration);
    [ExtensionAttribute]
public static T GetOrAdd(IAppCache cache, string key, Func`1<T> addItemFactory, MemoryCacheEntryOptions policy);
    [ExtensionAttribute]
public static Task`1<T> GetOrAddAsync(IAppCache cache, string key, Func`1<Task`1<T>> addItemFactory);
    [ExtensionAttribute]
public static Task`1<T> GetOrAddAsync(IAppCache cache, string key, Func`1<Task`1<T>> addItemFactory, DateTimeOffset expires);
    [ExtensionAttribute]
public static Task`1<T> GetOrAddAsync(IAppCache cache, string key, Func`1<Task`1<T>> addItemFactory, DateTimeOffset expires, ExpirationMode mode);
    [ExtensionAttribute]
public static Task`1<T> GetOrAddAsync(IAppCache cache, string key, Func`1<Task`1<T>> addItemFactory, TimeSpan slidingExpiration);
    [ExtensionAttribute]
public static Task`1<T> GetOrAddAsync(IAppCache cache, string key, Func`1<Task`1<T>> addItemFactory, MemoryCacheEntryOptions policy);
}
public class LazyCache.AsyncLazy`1 : Lazy`1<Task`1<T>> {
    public AsyncLazy`1(Func`1<T> valueFactory);
    public AsyncLazy`1(Func`1<Task`1<T>> taskFactory);
    public TaskAwaiter`1<T> GetAwaiter();
}
public class LazyCache.CacheDefaults : object {
    [CompilerGeneratedAttribute]
private int <DefaultCacheDurationSeconds>k__BackingField;
    public int DefaultCacheDurationSeconds { get; public set; }
    [CompilerGeneratedAttribute]
public virtual int get_DefaultCacheDurationSeconds();
    [CompilerGeneratedAttribute]
public virtual void set_DefaultCacheDurationSeconds(int value);
    internal MemoryCacheEntryOptions BuildOptions();
}
[ObsoleteAttribute("CacheItemPolicy was part of System.Runtime.Caching which is no longer used by LazyCache. This class is a fake used to maintain backward compatibility and will be removed in a later version.Change to MemoryCacheEntryOptions instead")]
public class LazyCache.CacheItemPolicy : MemoryCacheEntryOptions {
    public PostEvictionCallbackRegistration RemovedCallback { get; }
    public PostEvictionCallbackRegistration get_RemovedCallback();
}
public class LazyCache.CachingService : object {
    private Lazy`1<ICacheProvider> cacheProvider;
    private Int32[] keyLocks;
    [CompilerGeneratedAttribute]
private static Lazy`1<ICacheProvider> <DefaultCacheProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private CacheDefaults <DefaultCachePolicy>k__BackingField;
    public static Lazy`1<ICacheProvider> DefaultCacheProvider { get; public set; }
    [ObsoleteAttribute("DefaultCacheDuration has been replaced with DefaultCacheDurationSeconds")]
public int DefaultCacheDuration { get; public set; }
    public CacheDefaults DefaultCachePolicy { get; public set; }
    public ICacheProvider CacheProvider { get; }
    public CachingService(Lazy`1<ICacheProvider> cacheProvider);
    public CachingService(Func`1<ICacheProvider> cacheProviderFactory);
    public CachingService(ICacheProvider cache);
    private static CachingService();
    [CompilerGeneratedAttribute]
public static Lazy`1<ICacheProvider> get_DefaultCacheProvider();
    [CompilerGeneratedAttribute]
public static void set_DefaultCacheProvider(Lazy`1<ICacheProvider> value);
    public virtual int get_DefaultCacheDuration();
    public virtual void set_DefaultCacheDuration(int value);
    [CompilerGeneratedAttribute]
public virtual CacheDefaults get_DefaultCachePolicy();
    [CompilerGeneratedAttribute]
public virtual void set_DefaultCachePolicy(CacheDefaults value);
    public virtual void Add(string key, T item, MemoryCacheEntryOptions policy);
    public virtual T Get(string key);
    public virtual Task`1<T> GetAsync(string key);
    public virtual bool TryGetValue(string key, T& value);
    public virtual T GetOrAdd(string key, Func`2<ICacheEntry, T> addItemFactory);
    public virtual T GetOrAdd(string key, Func`2<ICacheEntry, T> addItemFactory, MemoryCacheEntryOptions policy);
    private static void SetAbsoluteExpirationFromRelative(ICacheEntry entry);
    public virtual void Remove(string key);
    public virtual ICacheProvider get_CacheProvider();
    public virtual Task`1<T> GetOrAddAsync(string key, Func`2<ICacheEntry, Task`1<T>> addItemFactory);
    [AsyncStateMachineAttribute("LazyCache.CachingService/<GetOrAddAsync>d__28`1")]
public virtual Task`1<T> GetOrAddAsync(string key, Func`2<ICacheEntry, Task`1<T>> addItemFactory, MemoryCacheEntryOptions policy);
    protected virtual T GetValueFromLazy(object item, Boolean& valueHasChangedType);
    protected virtual Task`1<T> GetValueFromAsyncLazy(object item, Boolean& valueHasChangedType);
    protected virtual void EnsureEvictionCallbackDoesNotReturnTheAsyncOrLazy(IList`1<PostEvictionCallbackRegistration> callbackRegistrations);
    protected virtual void ValidateKey(string key);
}
public enum LazyCache.ExpirationMode : Enum {
    public int value__;
    public static ExpirationMode LazyExpiration;
    [ObsoleteAttribute("Use ExpirationMode.ImmediateEviction instead - this name is miss-leading")]
public static ExpirationMode ImmediateExpiration;
    public static ExpirationMode ImmediateEviction;
}
public interface LazyCache.IAppCache {
    public ICacheProvider CacheProvider { get; }
    public CacheDefaults DefaultCachePolicy { get; }
    public abstract virtual ICacheProvider get_CacheProvider();
    public abstract virtual CacheDefaults get_DefaultCachePolicy();
    public abstract virtual void Add(string key, T item, MemoryCacheEntryOptions policy);
    public abstract virtual T Get(string key);
    public abstract virtual Task`1<T> GetAsync(string key);
    public abstract virtual bool TryGetValue(string key, T& value);
    public abstract virtual T GetOrAdd(string key, Func`2<ICacheEntry, T> addItemFactory);
    public abstract virtual T GetOrAdd(string key, Func`2<ICacheEntry, T> addItemFactory, MemoryCacheEntryOptions policy);
    public abstract virtual Task`1<T> GetOrAddAsync(string key, Func`2<ICacheEntry, Task`1<T>> addItemFactory);
    public abstract virtual Task`1<T> GetOrAddAsync(string key, Func`2<ICacheEntry, Task`1<T>> addItemFactory, MemoryCacheEntryOptions policy);
    public abstract virtual void Remove(string key);
}
public interface LazyCache.ICacheProvider {
    public abstract virtual void Set(string key, object item, MemoryCacheEntryOptions policy);
    public abstract virtual object Get(string key);
    public abstract virtual object GetOrCreate(string key, Func`2<ICacheEntry, T> func);
    public abstract virtual object GetOrCreate(string key, MemoryCacheEntryOptions policy, Func`2<ICacheEntry, T> func);
    public abstract virtual void Remove(string key);
    public abstract virtual Task`1<T> GetOrCreateAsync(string key, Func`2<ICacheEntry, Task`1<T>> func);
    public abstract virtual bool TryGetValue(object key, T& value);
}
public class LazyCache.LazyCacheEntryOptions : MemoryCacheEntryOptions {
    [CompilerGeneratedAttribute]
private ExpirationMode <ExpirationMode>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <ImmediateAbsoluteExpirationRelativeToNow>k__BackingField;
    public ExpirationMode ExpirationMode { get; public set; }
    public TimeSpan ImmediateAbsoluteExpirationRelativeToNow { get; public set; }
    [CompilerGeneratedAttribute]
public ExpirationMode get_ExpirationMode();
    [CompilerGeneratedAttribute]
public void set_ExpirationMode(ExpirationMode value);
    [CompilerGeneratedAttribute]
public TimeSpan get_ImmediateAbsoluteExpirationRelativeToNow();
    [CompilerGeneratedAttribute]
public void set_ImmediateAbsoluteExpirationRelativeToNow(TimeSpan value);
    public static LazyCacheEntryOptions WithImmediateAbsoluteExpiration(DateTimeOffset absoluteExpiration);
    public static LazyCacheEntryOptions WithImmediateAbsoluteExpiration(TimeSpan absoluteExpiration);
}
[ExtensionAttribute]
public static class LazyCache.LazyCacheEntryOptionsExtension : object {
    [ExtensionAttribute]
public static LazyCacheEntryOptions SetAbsoluteExpiration(LazyCacheEntryOptions option, DateTimeOffset absoluteExpiration, ExpirationMode mode);
    [ExtensionAttribute]
public static LazyCacheEntryOptions SetAbsoluteExpiration(LazyCacheEntryOptions option, TimeSpan absoluteExpiration, ExpirationMode mode);
}
public class LazyCache.Mocks.MockCacheEntry : object {
    [CompilerGeneratedAttribute]
private object <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <AbsoluteExpiration>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <AbsoluteExpirationRelativeToNow>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <SlidingExpiration>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IChangeToken> <ExpirationTokens>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<PostEvictionCallbackRegistration> <PostEvictionCallbacks>k__BackingField;
    [CompilerGeneratedAttribute]
private CacheItemPriority <Priority>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <Size>k__BackingField;
    public object Key { get; }
    public object Value { get; public set; }
    public Nullable`1<DateTimeOffset> AbsoluteExpiration { get; public set; }
    public Nullable`1<TimeSpan> AbsoluteExpirationRelativeToNow { get; public set; }
    public Nullable`1<TimeSpan> SlidingExpiration { get; public set; }
    public IList`1<IChangeToken> ExpirationTokens { get; }
    public IList`1<PostEvictionCallbackRegistration> PostEvictionCallbacks { get; }
    public CacheItemPriority Priority { get; public set; }
    public Nullable`1<long> Size { get; public set; }
    public MockCacheEntry(string key);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
public sealed virtual object get_Key();
    [CompilerGeneratedAttribute]
public sealed virtual object get_Value();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Value(object value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<DateTimeOffset> get_AbsoluteExpiration();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AbsoluteExpiration(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<TimeSpan> get_AbsoluteExpirationRelativeToNow();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AbsoluteExpirationRelativeToNow(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<TimeSpan> get_SlidingExpiration();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SlidingExpiration(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<IChangeToken> get_ExpirationTokens();
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<PostEvictionCallbackRegistration> get_PostEvictionCallbacks();
    [CompilerGeneratedAttribute]
public sealed virtual CacheItemPriority get_Priority();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Priority(CacheItemPriority value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<long> get_Size();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Size(Nullable`1<long> value);
}
public class LazyCache.Mocks.MockCacheProvider : object {
    public sealed virtual void Set(string key, object item, MemoryCacheEntryOptions policy);
    public sealed virtual object Get(string key);
    public sealed virtual object GetOrCreate(string key, Func`2<ICacheEntry, T> func);
    public sealed virtual object GetOrCreate(string key, MemoryCacheEntryOptions policy, Func`2<ICacheEntry, T> func);
    public sealed virtual void Remove(string key);
    public sealed virtual Task`1<T> GetOrCreateAsync(string key, Func`2<ICacheEntry, Task`1<T>> func);
    public sealed virtual bool TryGetValue(object key, T& value);
    public sealed virtual void Dispose();
}
public class LazyCache.Mocks.MockCachingService : object {
    [CompilerGeneratedAttribute]
private ICacheProvider <CacheProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private CacheDefaults <DefaultCachePolicy>k__BackingField;
    public ICacheProvider CacheProvider { get; }
    public CacheDefaults DefaultCachePolicy { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual ICacheProvider get_CacheProvider();
    [CompilerGeneratedAttribute]
public sealed virtual CacheDefaults get_DefaultCachePolicy();
    [CompilerGeneratedAttribute]
public void set_DefaultCachePolicy(CacheDefaults value);
    public sealed virtual T Get(string key);
    public sealed virtual T GetOrAdd(string key, Func`2<ICacheEntry, T> addItemFactory);
    public sealed virtual T GetOrAdd(string key, Func`2<ICacheEntry, T> addItemFactory, MemoryCacheEntryOptions policy);
    public sealed virtual Task`1<T> GetOrAddAsync(string key, Func`2<ICacheEntry, Task`1<T>> addItemFactory, MemoryCacheEntryOptions policy);
    public sealed virtual void Remove(string key);
    public sealed virtual Task`1<T> GetOrAddAsync(string key, Func`2<ICacheEntry, Task`1<T>> addItemFactory);
    public sealed virtual Task`1<T> GetAsync(string key);
    public sealed virtual void Add(string key, T item, MemoryCacheEntryOptions policy);
    public sealed virtual bool TryGetValue(string key, T& value);
}
public class LazyCache.Providers.MemoryCacheProvider : object {
    internal IMemoryCache cache;
    public MemoryCacheProvider(IMemoryCache cache);
    public sealed virtual void Set(string key, object item, MemoryCacheEntryOptions policy);
    public sealed virtual object Get(string key);
    public sealed virtual object GetOrCreate(string key, Func`2<ICacheEntry, T> factory);
    public sealed virtual object GetOrCreate(string key, MemoryCacheEntryOptions policy, Func`2<ICacheEntry, T> factory);
    public sealed virtual void Remove(string key);
    public sealed virtual Task`1<T> GetOrCreateAsync(string key, Func`2<ICacheEntry, Task`1<T>> factory);
    public sealed virtual bool TryGetValue(object key, T& value);
    public sealed virtual void Dispose();
}
