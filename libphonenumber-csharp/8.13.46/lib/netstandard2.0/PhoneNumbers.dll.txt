[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class PhoneNumbers.AreaCodeMap : object {
    private PhoneNumberUtil phoneUtil;
    private AreaCodeMapStorageStrategy areaCodeMapStorage;
    public AreaCodeMapStorageStrategy GetAreaCodeMapStorage();
    private static int GetSizeOfAreaCodeMapStorage(AreaCodeMapStorageStrategy mapStorage, SortedDictionary`2<int, string> areaCodeMap);
    private static AreaCodeMapStorageStrategy CreateDefaultMapStorage();
    private static AreaCodeMapStorageStrategy CreateFlyweightMapStorage();
    public AreaCodeMapStorageStrategy GetSmallerMapStorage(SortedDictionary`2<int, string> areaCodeMap);
    public void ReadAreaCodeMap(SortedDictionary`2<int, string> sortedAreaCodeMap);
    public string Lookup(PhoneNumber number);
    private int BinarySearch(int start, int end, long value);
    public virtual string ToString();
}
public abstract class PhoneNumbers.AreaCodeMapStorageStrategy : object {
    protected int NumOfEntries;
    protected List`1<int> PossibleLengths;
    public abstract virtual int GetPrefix(int index);
    public abstract virtual int GetStorageSize();
    public abstract virtual string GetDescription(int index);
    public abstract virtual void ReadFromSortedMap(SortedDictionary`2<int, string> sortedAreaCodeMap);
    public int GetNumOfEntries();
    public List`1<int> GetPossibleLengths();
    public virtual string ToString();
}
internal class PhoneNumbers.AreaCodeParser : object {
    public static AreaCodeMap ParseAreaCodeMap(Stream stream);
}
public class PhoneNumbers.AsYouTypeFormatter : object {
    private string currentOutput;
    private StringBuilder formattingTemplate;
    private string currentFormattingPattern;
    private StringBuilder accruedInput;
    private StringBuilder accruedInputWithoutFormatting;
    private bool ableToFormat;
    private bool inputHasFormatting;
    private bool isCompleteNumber;
    private bool isExpectingCountryCallingCode;
    private bool shouldAddSpaceAfterNationalPrefix;
    private PhoneNumberUtil phoneUtil;
    private string defaultCountry;
    private static char SeparatorBeforeNationalNumber;
    private static PhoneMetadata EmptyMetadata;
    private PhoneMetadata defaultMetaData;
    private PhoneMetadata currentMetadata;
    private static Regex _eligibleFormatPattern;
    private static Char[] NationalPrefixSeparators;
    private static int MinLeadingDigitsLength;
    private static char DIGIT_PLACEHOLDER;
    private int lastMatchPosition;
    private int originalPosition;
    private int positionToRemember;
    private StringBuilder prefixBeforeNationalNumber;
    private string extractedNationalPrefix;
    private StringBuilder nationalNumber;
    private List`1<NumberFormat> possibleFormats;
    public AsYouTypeFormatter(string regionCode, PhoneNumberUtil phoneUtil);
    private static AsYouTypeFormatter();
    private static Regex EligibleFormatPattern();
    private PhoneMetadata GetMetadataForRegion(string regionCode);
    private bool MaybeCreateNewTemplate();
    private static bool FormattingRuleHasFirstGroupOnly(string rule);
    private void GetAvailableFormats(string leadingDigits);
    private void NarrowDownPossibleFormats(string leadingDigits);
    private bool CreateFormattingTemplate(NumberFormat format);
    private string GetFormattingTemplate(string numberPattern, string numberFormat);
    public void Clear();
    public string InputDigit(char nextChar);
    public string InputDigitAndRememberPosition(char nextChar);
    private string InputDigitWithOptionToRememberPosition(char nextChar, bool rememberPosition);
    private string AttemptToChoosePatternWithPrefixExtracted();
    private bool AbleToExtractLongerNdd();
    private bool IsDigitOrLeadingPlusSign(char nextChar);
    private string AttemptToFormatAccruedDigits();
    public int GetRememberedPosition();
    private string AppendNationalNumber(string nationalNumberStr);
    private string AttemptToChooseFormattingPattern();
    private string InputAccruedNationalNumber();
    private bool IsNanpaNumberWithNationalPrefix();
    private string RemoveNationalPrefixFromNationalNumber();
    private bool AttemptToExtractIdd();
    private bool AttemptToExtractCountryCallingCode();
    private char NormalizeAndAccrueDigitsAndPlusSign(char nextChar, bool rememberPosition);
    private string InputDigitHelper(char nextChar);
}
public class PhoneNumbers.BuildMetadataFromXml : object {
    private static string CARRIER_CODE_FORMATTING_RULE;
    private static string CARRIER_SPECIFIC;
    private static string COUNTRY_CODE;
    private static string EMERGENCY;
    private static string EXAMPLE_NUMBER;
    private static string FIXED_LINE;
    private static string FORMAT;
    private static string GENERAL_DESC;
    private static string INTERNATIONAL_PREFIX;
    private static string INTL_FORMAT;
    private static string LEADING_DIGITS;
    private static string MAIN_COUNTRY_FOR_CODE;
    private static string MOBILE;
    private static string MOBILE_NUMBER_PORTABLE_REGION;
    private static string NATIONAL_NUMBER_PATTERN;
    private static string NATIONAL_PREFIX;
    private static string NATIONAL_PREFIX_FORMATTING_RULE;
    private static string NATIONAL_PREFIX_OPTIONAL_WHEN_FORMATTING;
    private static string NATIONAL_PREFIX_FOR_PARSING;
    private static string NATIONAL_PREFIX_TRANSFORM_RULE;
    private static string NO_INTERNATIONAL_DIALLING;
    private static string NUMBER_FORMAT;
    private static string PAGER;
    private static string PATTERN;
    private static string PERSONAL_NUMBER;
    private static string POSSIBLE_LENGTHS;
    private static string NATIONAL;
    private static string LOCAL_ONLY;
    private static string PREFERRED_EXTN_PREFIX;
    private static string PREFERRED_INTERNATIONAL_PREFIX;
    private static string PREMIUM_RATE;
    private static string SHARED_COST;
    private static string SHORT_CODE;
    private static string SMS_SERVICES;
    private static string STANDARD_RATE;
    private static string TOLL_FREE;
    private static string UAN;
    private static string VOICEMAIL;
    private static string VOIP;
    internal static HashSet`1<string> ValidPatterns;
    public static PhoneMetadataCollection BuildPhoneMetadataCollection(string name, bool liteBuild, bool specialBuild, bool isShortNumberMetadata, bool isAlternateFormatsMetadata);
    internal static List`1<PhoneMetadata> BuildPhoneMetadata(string name, Assembly asm, bool liteBuild, bool specialBuild, bool isShortNumberMetadata, bool isAlternateFormatsMetadata, bool nameSuffix);
    internal static Stream GetStream(string name, Assembly asm, bool nameSuffix);
    internal static List`1<PhoneMetadata> BuildPhoneMetadataFromStream(Stream metadataStream, bool liteBuild, bool specialBuild, bool isShortNumberMetadata, bool isAlternateFormatsMetadata);
    public static Dictionary`2<int, List`1<string>> BuildCountryCodeToRegionCodeMap(PhoneMetadataCollection metadataCollection);
    internal static Dictionary`2<int, List`1<string>> BuildCountryCodeToRegionCodeMap(List`1<PhoneMetadata> metadataCollection);
    public static string ValidateRE(string regex);
    public static string ValidateRE(string regex, bool removeWhitespace);
    public static string GetNationalPrefix(XElement element);
    public static Builder LoadTerritoryTagMetadata(string regionCode, XElement element, string nationalPrefix);
    internal static PhoneMetadata LoadTerritoryTag(string regionCode, XElement element, string nationalPrefix);
    public static bool LoadInternationalFormat(Builder metadata, XElement numberFormatElement, string nationalFormat);
    internal static bool LoadInternationalFormat(PhoneMetadata metadata, XElement numberFormatElement, string nationalFormat);
    public static string LoadNationalFormat(Builder metadata, XElement numberFormatElement, Builder format);
    internal static string LoadNationalFormat(PhoneMetadata metadata, XElement numberFormatElement, NumberFormat format);
    public static void LoadAvailableFormats(Builder metadata, XElement element, string nationalPrefix, string nationalPrefixFormattingRule, bool nationalPrefixOptionalWhenFormatting);
    internal static void LoadAvailableFormats(PhoneMetadata metadata, XElement element, string nationalPrefix, string nationalPrefixFormattingRule, bool nationalPrefixOptionalWhenFormatting);
    public static void SetLeadingDigitsPatterns(XElement numberFormatElement, Builder format);
    internal static void SetLeadingDigitsPatterns(XElement numberFormatElement, NumberFormat format);
    public static string GetNationalPrefixFormattingRuleFromElement(XElement element, string nationalPrefix);
    private static string GetNationalPrefixFormattingRuleFromElement(string rule, string nationalPrefix);
    public static string GetDomesticCarrierCodeFormattingRuleFromElement(XElement element, string nationalPrefix);
    private static string GetDomesticCarrierCodeFormattingRuleFromElement(string rule, string nationalPrefix);
    private static bool ArePossibleLengthsEqual(SortedSet`1<int> possibleLengths, PhoneNumberDesc desc);
    public static Builder ProcessPhoneNumberDescElement(PhoneNumberDesc parentDesc, XElement countryElement, string numberType);
    internal static PhoneNumberDesc ProcessPhoneNumberDesc(PhoneNumberDesc parentDesc, XElement countryElement, string numberType);
    private static void SetRelevantDescPatterns(PhoneMetadata metadata, XElement element, bool isShortNumberMetadata);
    private static SortedSet`1<int> ParsePossibleLengthStringToSet(string possibleLengthString);
    private static void PopulatePossibleLengthSets(IEnumerable`1<XElement> possibleLengths, SortedSet`1<int> lengths, SortedSet`1<int> localOnlyLengths);
    private static void SetPossibleLengthsGeneralDesc(PhoneNumberDesc generalDesc, string metadataId, XElement data, bool isShortNumberMetadata);
    private static void SetPossibleLengths(SortedSet`1<int> lengths, SortedSet`1<int> localOnlyLengths, PhoneNumberDesc parentDesc, PhoneNumberDesc desc);
    private static string ReplaceFirst(string input, string value, string replacement);
    public static void LoadGeneralDesc(Builder metadata, XElement element);
    internal static void LoadGeneralDesc(PhoneMetadata metadata, XElement element);
    public static Builder LoadCountryMetadata(string regionCode, XElement element, bool isShortNumberMetadata, bool isAlternateFormatsMetadata);
    internal static PhoneMetadata LoadCountry(string regionCode, XElement element, bool isShortNumberMetadata, bool isAlternateFormatsMetadata);
    public static Dictionary`2<int, List`1<string>> GetCountryCodeToRegionCodeMap(string filePrefix);
    internal static MetadataFilter GetMetadataFilter(bool liteBuild, bool specialBuild);
}
public static class PhoneNumbers.CountryCodeToRegionCodeMap : object {
    internal static Dictionary`2<int, List`1<string>> GetCountryCodeToRegionCodeMap();
}
public class PhoneNumbers.DefaultMapStorage : AreaCodeMapStorageStrategy {
    private Int32[] phoneNumberPrefixes;
    private String[] descriptions;
    public virtual int GetPrefix(int index);
    public virtual int GetStorageSize();
    public virtual string GetDescription(int index);
    public virtual void ReadFromSortedMap(SortedDictionary`2<int, string> sortedAreaCodeMap);
}
internal class PhoneNumbers.EnumerableFromConstructor`1 : object {
    private Func`1<IEnumerator`1<T>> fn;
    public EnumerableFromConstructor`1(Func`1<IEnumerator`1<T>> fn);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public enum PhoneNumbers.ErrorType : Enum {
    public int value__;
    public static ErrorType INVALID_COUNTRY_CODE;
    public static ErrorType NOT_A_NUMBER;
    public static ErrorType TOO_SHORT_AFTER_IDD;
    public static ErrorType TOO_SHORT_NSN;
    public static ErrorType TOO_LONG;
}
public class PhoneNumbers.FlyweightMapStorage : AreaCodeMapStorageStrategy {
    private static int ShortNumBytes;
    private static int IntNumBytes;
    private int descIndexSizeInBytes;
    private ByteBuffer descriptionIndexes;
    private String[] descriptionPool;
    private ByteBuffer phoneNumberPrefixes;
    private int prefixSizeInBytes;
    private static FlyweightMapStorage();
    public virtual int GetPrefix(int index);
    public virtual int GetStorageSize();
    public virtual string GetDescription(int index);
    public virtual void ReadFromSortedMap(SortedDictionary`2<int, string> areaCodeMap);
    private void CreateDescriptionPool(HashSet`1<string> descriptionsSet, SortedDictionary`2<int, string> areaCodeMap);
    private static int GetOptimalNumberOfBytesForValue(int value);
    private static void StoreWordInBuffer(ByteBuffer buffer, int wordSize, int index, int value);
    private static int ReadWordFromBuffer(ByteBuffer buffer, int wordSize, int index);
}
internal static class PhoneNumbers.InternalRegexOptions : object {
    public static RegexOptions Default;
}
[ExtensionAttribute]
public static class PhoneNumbers.LeniencyExtensions : object {
    [ExtensionAttribute]
public static bool Verify(Leniency leniency, PhoneNumber number, string candidate, PhoneNumberUtil util, PhoneNumberMatcher matcher);
}
public class PhoneNumbers.Locale : object {
    public static Locale English;
    public static Locale French;
    public static Locale German;
    public static Locale Italian;
    public static Locale Korean;
    public static Locale SimplifiedChinese;
    public string Language;
    public string Country;
    public Locale(string language, string countryCode);
    private static Locale();
    public string GetDisplayCountry(string language);
    private static string GetCountryName(string country, string language);
}
public class PhoneNumbers.LocaleData : object {
    public static ImmutableDictionary`2<string, ImmutableDictionary`2<string, string>> Data;
    private static LocaleData();
}
public class PhoneNumbers.MappingFileProvider : object {
    private static Dictionary`2<string, string> LocaleNormalizationMap;
    private List`1<HashSet`1<string>> availableLanguages;
    private Int32[] countryCallingCodes;
    private int numOfEntries;
    private static MappingFileProvider();
    public void ReadFileConfigs(SortedDictionary`2<int, HashSet`1<string>> availableDataFiles);
    public virtual string ToString();
    public string GetFileName(int countryCallingCode, string language, string script, string region);
    private string FindBestMatchingLanguageCode(ICollection`1<string> setOfLangs, string language, string script, string region);
    private static bool OnlyOneOfScriptOrRegionIsEmpty(string script, string region);
    private StringBuilder ConstructFullLocale(string language, string script, string region);
    private static void AppendSubsequentLocalePart(string subsequentLocalePart, StringBuilder fullLocale);
}
public class PhoneNumbers.MetadataFilter : object {
    internal static SortedSet`1<string> ExcludableParentFields;
    internal static SortedSet`1<string> ExcludableChildFields;
    internal static SortedSet`1<string> ExcludableChildlessFields;
    private Dictionary`2<string, SortedSet`1<string>> blacklist;
    internal MetadataFilter(Dictionary`2<string, SortedSet`1<string>> blacklist);
    private static MetadataFilter();
    internal static MetadataFilter ForLiteBuild();
    internal static MetadataFilter ForSpecialBuild();
    internal static MetadataFilter EmptyFilter();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    internal void FilterMetadata(PhoneMetadata metadata);
    internal static Dictionary`2<string, SortedSet`1<string>> ParseFieldMapFromString(string str);
    internal static Dictionary`2<string, SortedSet`1<string>> ComputeComplement(Dictionary`2<string, SortedSet`1<string>> fieldMap);
    internal bool ShouldDrop(string parent, string child);
    internal bool ShouldDrop(string childlessField);
    private PhoneNumberDesc GetFiltered(string type, PhoneNumberDesc desc);
}
public static class PhoneNumbers.MetadataManager : object {
    public static PhoneMetadata GetAlternateFormatsForCountry(int countryCallingCode);
    internal static PhoneMetadata GetShortNumberMetadataForRegion(string regionCode);
}
public class PhoneNumbers.NumberFormat : object {
    public static int PatternFieldNumber;
    public static int FormatFieldNumber;
    public static int LeadingDigitsPatternFieldNumber;
    public static int NationalPrefixFormattingRuleFieldNumber;
    public static int NationalPrefixOptionalWhenFormattingFieldNumber;
    public static int DomesticCarrierCodeFormattingRuleFieldNumber;
    internal List`1<string> leadingDigitsPattern_;
    [CompilerGeneratedAttribute]
private static NumberFormat <DefaultInstance>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Pattern>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Format>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NationalPrefixFormattingRule>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NationalPrefixOptionalWhenFormatting>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DomesticCarrierCodeFormattingRule>k__BackingField;
    public static NumberFormat DefaultInstance { get; }
    public NumberFormat DefaultInstanceForType { get; }
    public bool HasPattern { get; }
    public string Pattern { get; internal set; }
    public bool HasFormat { get; }
    public string Format { get; internal set; }
    public IList`1<string> LeadingDigitsPatternList { get; }
    public int LeadingDigitsPatternCount { get; }
    public bool HasNationalPrefixFormattingRule { get; }
    public string NationalPrefixFormattingRule { get; internal set; }
    public bool HasNationalPrefixOptionalWhenFormatting { get; }
    public bool NationalPrefixOptionalWhenFormatting { get; internal set; }
    public bool HasDomesticCarrierCodeFormattingRule { get; }
    public string DomesticCarrierCodeFormattingRule { get; internal set; }
    public bool IsInitialized { get; }
    private static NumberFormat();
    internal NumberFormat Clone();
    [CompilerGeneratedAttribute]
public static NumberFormat get_DefaultInstance();
    public NumberFormat get_DefaultInstanceForType();
    public bool get_HasPattern();
    [CompilerGeneratedAttribute]
public string get_Pattern();
    [CompilerGeneratedAttribute]
internal void set_Pattern(string value);
    public bool get_HasFormat();
    [CompilerGeneratedAttribute]
public string get_Format();
    [CompilerGeneratedAttribute]
internal void set_Format(string value);
    public IList`1<string> get_LeadingDigitsPatternList();
    public int get_LeadingDigitsPatternCount();
    public bool get_HasNationalPrefixFormattingRule();
    [CompilerGeneratedAttribute]
public string get_NationalPrefixFormattingRule();
    [CompilerGeneratedAttribute]
internal void set_NationalPrefixFormattingRule(string value);
    public bool get_HasNationalPrefixOptionalWhenFormatting();
    [CompilerGeneratedAttribute]
public bool get_NationalPrefixOptionalWhenFormatting();
    [CompilerGeneratedAttribute]
internal void set_NationalPrefixOptionalWhenFormatting(bool value);
    public bool get_HasDomesticCarrierCodeFormattingRule();
    [CompilerGeneratedAttribute]
public string get_DomesticCarrierCodeFormattingRule();
    [CompilerGeneratedAttribute]
internal void set_DomesticCarrierCodeFormattingRule(string value);
    public bool get_IsInitialized();
    public string GetLeadingDigitsPattern(int index);
    public static Builder CreateBuilder();
    public Builder ToBuilder();
    public Builder CreateBuilderForType();
    public static Builder CreateBuilder(NumberFormat prototype);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
public class PhoneNumbers.NumberParseException : Exception {
    public ErrorType ErrorType;
    public NumberParseException(ErrorType errorType, string message);
}
public class PhoneNumbers.PhoneMetadata : object {
    public static int GeneralDescFieldNumber;
    public static int FixedLineFieldNumber;
    public static int MobileFieldNumber;
    public static int TollFreeFieldNumber;
    public static int PremiumRateFieldNumber;
    public static int SharedCostFieldNumber;
    public static int PersonalNumberFieldNumber;
    public static int VoipFieldNumber;
    public static int PagerFieldNumber;
    public static int UanFieldNumber;
    public static int EmergencyFieldNumber;
    public static int VoicemailFieldNumber;
    public static int ShortCodeFieldNumber;
    public static int StandardRateFieldNumber;
    public static int CarrierSpecificFieldNumber;
    public static int SmsServicesFieldNumber;
    public static int NoInternationalDiallingFieldNumber;
    public static int IdFieldNumber;
    public static int CountryCodeFieldNumber;
    public static int InternationalPrefixFieldNumber;
    public static int PreferredInternationalPrefixFieldNumber;
    public static int NationalPrefixFieldNumber;
    public static int PreferredExtnPrefixFieldNumber;
    public static int NationalPrefixForParsingFieldNumber;
    public static int NationalPrefixTransformRuleFieldNumber;
    public static int SameMobileAndFixedLinePatternFieldNumber;
    public static int NumberFormatFieldNumber;
    public static int IntlNumberFormatFieldNumber;
    public static int MainCountryForCodeFieldNumber;
    public static int LeadingDigitsFieldNumber;
    public static int LeadingZeroPossibleFieldNumber;
    public static int MobileNumberPortableRegionFieldNumber;
    internal List`1<NumberFormat> intlNumberFormat_;
    internal List`1<NumberFormat> numberFormat_;
    [CompilerGeneratedAttribute]
private static PhoneMetadata <DefaultInstance>k__BackingField;
    [CompilerGeneratedAttribute]
private PhoneNumberDesc <GeneralDesc>k__BackingField;
    [CompilerGeneratedAttribute]
private PhoneNumberDesc <FixedLine>k__BackingField;
    [CompilerGeneratedAttribute]
private PhoneNumberDesc <Mobile>k__BackingField;
    [CompilerGeneratedAttribute]
private PhoneNumberDesc <TollFree>k__BackingField;
    [CompilerGeneratedAttribute]
private PhoneNumberDesc <PremiumRate>k__BackingField;
    [CompilerGeneratedAttribute]
private PhoneNumberDesc <SharedCost>k__BackingField;
    [CompilerGeneratedAttribute]
private PhoneNumberDesc <PersonalNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private PhoneNumberDesc <Voip>k__BackingField;
    [CompilerGeneratedAttribute]
private PhoneNumberDesc <Pager>k__BackingField;
    [CompilerGeneratedAttribute]
private PhoneNumberDesc <Uan>k__BackingField;
    [CompilerGeneratedAttribute]
private PhoneNumberDesc <Emergency>k__BackingField;
    [CompilerGeneratedAttribute]
private PhoneNumberDesc <Voicemail>k__BackingField;
    [CompilerGeneratedAttribute]
private PhoneNumberDesc <ShortCode>k__BackingField;
    [CompilerGeneratedAttribute]
private PhoneNumberDesc <StandardRate>k__BackingField;
    [CompilerGeneratedAttribute]
private PhoneNumberDesc <CarrierSpecific>k__BackingField;
    [CompilerGeneratedAttribute]
private PhoneNumberDesc <SmsServices>k__BackingField;
    [CompilerGeneratedAttribute]
private PhoneNumberDesc <NoInternationalDialling>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CountryCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InternationalPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PreferredInternationalPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NationalPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PreferredExtnPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NationalPrefixForParsing>k__BackingField;
    private sbyte _nationalPrefixForParsingLiteral;
    [CompilerGeneratedAttribute]
private string <NationalPrefixTransformRule>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SameMobileAndFixedLinePattern>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MainCountryForCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LeadingDigits>k__BackingField;
    private sbyte _leadingDigitsLiteral;
    [CompilerGeneratedAttribute]
private bool <MobileNumberPortableRegion>k__BackingField;
    public static PhoneMetadata DefaultInstance { get; }
    public PhoneMetadata DefaultInstanceForType { get; }
    public bool HasGeneralDesc { get; }
    public PhoneNumberDesc GeneralDesc { get; internal set; }
    public bool HasFixedLine { get; }
    public PhoneNumberDesc FixedLine { get; internal set; }
    public bool HasMobile { get; }
    public PhoneNumberDesc Mobile { get; internal set; }
    public bool HasTollFree { get; }
    public PhoneNumberDesc TollFree { get; internal set; }
    public bool HasPremiumRate { get; }
    public PhoneNumberDesc PremiumRate { get; internal set; }
    public bool HasSharedCost { get; }
    public PhoneNumberDesc SharedCost { get; internal set; }
    public bool HasPersonalNumber { get; }
    public PhoneNumberDesc PersonalNumber { get; internal set; }
    public bool HasVoip { get; }
    public PhoneNumberDesc Voip { get; internal set; }
    public bool HasPager { get; }
    public PhoneNumberDesc Pager { get; internal set; }
    public bool HasUan { get; }
    public PhoneNumberDesc Uan { get; internal set; }
    public bool HasEmergency { get; }
    public PhoneNumberDesc Emergency { get; internal set; }
    public bool HasVoicemail { get; }
    public PhoneNumberDesc Voicemail { get; internal set; }
    public bool HasShortCode { get; }
    public PhoneNumberDesc ShortCode { get; internal set; }
    public bool HasStandardRate { get; }
    public PhoneNumberDesc StandardRate { get; internal set; }
    public bool HasCarrierSpecific { get; }
    public PhoneNumberDesc CarrierSpecific { get; internal set; }
    public bool HasSmsServices { get; }
    public PhoneNumberDesc SmsServices { get; internal set; }
    public bool HasNoInternationalDialling { get; }
    public PhoneNumberDesc NoInternationalDialling { get; internal set; }
    public bool HasId { get; }
    public string Id { get; internal set; }
    public bool HasCountryCode { get; }
    public int CountryCode { get; internal set; }
    public bool HasInternationalPrefix { get; }
    public string InternationalPrefix { get; internal set; }
    public bool HasPreferredInternationalPrefix { get; }
    public string PreferredInternationalPrefix { get; internal set; }
    public bool HasNationalPrefix { get; }
    public string NationalPrefix { get; internal set; }
    public bool HasPreferredExtnPrefix { get; }
    public string PreferredExtnPrefix { get; internal set; }
    public bool HasNationalPrefixForParsing { get; }
    public string NationalPrefixForParsing { get; internal set; }
    public bool HasNationalPrefixTransformRule { get; }
    public string NationalPrefixTransformRule { get; internal set; }
    public bool HasSameMobileAndFixedLinePattern { get; }
    public bool SameMobileAndFixedLinePattern { get; internal set; }
    public IList`1<NumberFormat> NumberFormatList { get; }
    public int NumberFormatCount { get; }
    public IList`1<NumberFormat> IntlNumberFormatList { get; }
    public int IntlNumberFormatCount { get; }
    public bool HasMainCountryForCode { get; }
    public bool MainCountryForCode { get; internal set; }
    public bool HasLeadingDigits { get; }
    public string LeadingDigits { get; internal set; }
    public bool HasMobileNumberPortableRegion { get; }
    public bool MobileNumberPortableRegion { get; internal set; }
    public bool IsInitialized { get; }
    private static PhoneMetadata();
    [CompilerGeneratedAttribute]
public static PhoneMetadata get_DefaultInstance();
    public PhoneMetadata get_DefaultInstanceForType();
    public bool get_HasGeneralDesc();
    [CompilerGeneratedAttribute]
public PhoneNumberDesc get_GeneralDesc();
    [CompilerGeneratedAttribute]
internal void set_GeneralDesc(PhoneNumberDesc value);
    public bool get_HasFixedLine();
    [CompilerGeneratedAttribute]
public PhoneNumberDesc get_FixedLine();
    [CompilerGeneratedAttribute]
internal void set_FixedLine(PhoneNumberDesc value);
    public bool get_HasMobile();
    [CompilerGeneratedAttribute]
public PhoneNumberDesc get_Mobile();
    [CompilerGeneratedAttribute]
internal void set_Mobile(PhoneNumberDesc value);
    public bool get_HasTollFree();
    [CompilerGeneratedAttribute]
public PhoneNumberDesc get_TollFree();
    [CompilerGeneratedAttribute]
internal void set_TollFree(PhoneNumberDesc value);
    public bool get_HasPremiumRate();
    [CompilerGeneratedAttribute]
public PhoneNumberDesc get_PremiumRate();
    [CompilerGeneratedAttribute]
internal void set_PremiumRate(PhoneNumberDesc value);
    public bool get_HasSharedCost();
    [CompilerGeneratedAttribute]
public PhoneNumberDesc get_SharedCost();
    [CompilerGeneratedAttribute]
internal void set_SharedCost(PhoneNumberDesc value);
    public bool get_HasPersonalNumber();
    [CompilerGeneratedAttribute]
public PhoneNumberDesc get_PersonalNumber();
    [CompilerGeneratedAttribute]
internal void set_PersonalNumber(PhoneNumberDesc value);
    public bool get_HasVoip();
    [CompilerGeneratedAttribute]
public PhoneNumberDesc get_Voip();
    [CompilerGeneratedAttribute]
internal void set_Voip(PhoneNumberDesc value);
    public bool get_HasPager();
    [CompilerGeneratedAttribute]
public PhoneNumberDesc get_Pager();
    [CompilerGeneratedAttribute]
internal void set_Pager(PhoneNumberDesc value);
    public bool get_HasUan();
    [CompilerGeneratedAttribute]
public PhoneNumberDesc get_Uan();
    [CompilerGeneratedAttribute]
internal void set_Uan(PhoneNumberDesc value);
    public bool get_HasEmergency();
    [CompilerGeneratedAttribute]
public PhoneNumberDesc get_Emergency();
    [CompilerGeneratedAttribute]
internal void set_Emergency(PhoneNumberDesc value);
    public bool get_HasVoicemail();
    [CompilerGeneratedAttribute]
public PhoneNumberDesc get_Voicemail();
    [CompilerGeneratedAttribute]
internal void set_Voicemail(PhoneNumberDesc value);
    public bool get_HasShortCode();
    [CompilerGeneratedAttribute]
public PhoneNumberDesc get_ShortCode();
    [CompilerGeneratedAttribute]
internal void set_ShortCode(PhoneNumberDesc value);
    public bool get_HasStandardRate();
    [CompilerGeneratedAttribute]
public PhoneNumberDesc get_StandardRate();
    [CompilerGeneratedAttribute]
internal void set_StandardRate(PhoneNumberDesc value);
    public bool get_HasCarrierSpecific();
    [CompilerGeneratedAttribute]
public PhoneNumberDesc get_CarrierSpecific();
    [CompilerGeneratedAttribute]
internal void set_CarrierSpecific(PhoneNumberDesc value);
    public bool get_HasSmsServices();
    [CompilerGeneratedAttribute]
public PhoneNumberDesc get_SmsServices();
    [CompilerGeneratedAttribute]
internal void set_SmsServices(PhoneNumberDesc value);
    public bool get_HasNoInternationalDialling();
    [CompilerGeneratedAttribute]
public PhoneNumberDesc get_NoInternationalDialling();
    [CompilerGeneratedAttribute]
internal void set_NoInternationalDialling(PhoneNumberDesc value);
    public bool get_HasId();
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
internal void set_Id(string value);
    public bool get_HasCountryCode();
    [CompilerGeneratedAttribute]
public int get_CountryCode();
    [CompilerGeneratedAttribute]
internal void set_CountryCode(int value);
    public bool get_HasInternationalPrefix();
    [CompilerGeneratedAttribute]
public string get_InternationalPrefix();
    [CompilerGeneratedAttribute]
internal void set_InternationalPrefix(string value);
    public bool get_HasPreferredInternationalPrefix();
    [CompilerGeneratedAttribute]
public string get_PreferredInternationalPrefix();
    [CompilerGeneratedAttribute]
internal void set_PreferredInternationalPrefix(string value);
    public bool get_HasNationalPrefix();
    [CompilerGeneratedAttribute]
public string get_NationalPrefix();
    [CompilerGeneratedAttribute]
internal void set_NationalPrefix(string value);
    public bool get_HasPreferredExtnPrefix();
    [CompilerGeneratedAttribute]
public string get_PreferredExtnPrefix();
    [CompilerGeneratedAttribute]
internal void set_PreferredExtnPrefix(string value);
    public bool get_HasNationalPrefixForParsing();
    [CompilerGeneratedAttribute]
public string get_NationalPrefixForParsing();
    [CompilerGeneratedAttribute]
internal void set_NationalPrefixForParsing(string value);
    internal Match MatchNationalPrefixForParsing(string value);
    public bool get_HasNationalPrefixTransformRule();
    [CompilerGeneratedAttribute]
public string get_NationalPrefixTransformRule();
    [CompilerGeneratedAttribute]
internal void set_NationalPrefixTransformRule(string value);
    public bool get_HasSameMobileAndFixedLinePattern();
    [CompilerGeneratedAttribute]
public bool get_SameMobileAndFixedLinePattern();
    [CompilerGeneratedAttribute]
internal void set_SameMobileAndFixedLinePattern(bool value);
    public IList`1<NumberFormat> get_NumberFormatList();
    public int get_NumberFormatCount();
    public IList`1<NumberFormat> get_IntlNumberFormatList();
    public int get_IntlNumberFormatCount();
    public bool get_HasMainCountryForCode();
    [CompilerGeneratedAttribute]
public bool get_MainCountryForCode();
    [CompilerGeneratedAttribute]
internal void set_MainCountryForCode(bool value);
    public bool get_HasLeadingDigits();
    [CompilerGeneratedAttribute]
public string get_LeadingDigits();
    [CompilerGeneratedAttribute]
internal void set_LeadingDigits(string value);
    internal bool IsMatchLeadingDigits(string value);
    public bool get_HasMobileNumberPortableRegion();
    [CompilerGeneratedAttribute]
public bool get_MobileNumberPortableRegion();
    [CompilerGeneratedAttribute]
internal void set_MobileNumberPortableRegion(bool value);
    public bool get_IsInitialized();
    public NumberFormat GetNumberFormat(int index);
    public NumberFormat GetIntlNumberFormat(int index);
    public static Builder CreateBuilder();
    public Builder ToBuilder();
    public Builder CreateBuilderForType();
    public static Builder CreateBuilder(PhoneMetadata prototype);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
[GeneratedCodeAttribute("ProtoGen", "2.3.0.277")]
public class PhoneNumbers.PhoneMetadataCollection : object {
    public static int MetadataFieldNumber;
    internal List`1<PhoneMetadata> metadata;
    [CompilerGeneratedAttribute]
private static PhoneMetadataCollection <DefaultInstance>k__BackingField;
    public static PhoneMetadataCollection DefaultInstance { get; }
    public PhoneMetadataCollection DefaultInstanceForType { get; }
    public IList`1<PhoneMetadata> MetadataList { get; }
    public int MetadataCount { get; }
    public bool IsInitialized { get; }
    internal PhoneMetadataCollection(List`1<PhoneMetadata> metadata);
    private static PhoneMetadataCollection();
    [CompilerGeneratedAttribute]
public static PhoneMetadataCollection get_DefaultInstance();
    public PhoneMetadataCollection get_DefaultInstanceForType();
    public IList`1<PhoneMetadata> get_MetadataList();
    public int get_MetadataCount();
    public bool get_IsInitialized();
    public PhoneMetadata GetMetadata(int index);
    public static Builder CreateBuilder();
    public Builder ToBuilder();
    public Builder CreateBuilderForType();
    public static Builder CreateBuilder(PhoneMetadataCollection prototype);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
public class PhoneNumbers.PhoneNumber : object {
    public static int CountryCodeFieldNumber;
    public static int NationalNumberFieldNumber;
    public static int ExtensionFieldNumber;
    public static int ItalianLeadingZeroFieldNumber;
    public static int NumberOfLeadingZerosFieldNumber;
    public static int RawInputFieldNumber;
    public static int CountryCodeSourceFieldNumber;
    public static int PreferredDomesticCarrierCodeFieldNumber;
    [CompilerGeneratedAttribute]
private static PhoneNumber <DefaultInstance>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CountryCode>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <NationalNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Extension>k__BackingField;
    internal byte _numberOfLeadingZeros;
    [CompilerGeneratedAttribute]
private string <RawInput>k__BackingField;
    private byte _countryCodeSource;
    private string _preferredDomesticCarrierCode;
    public static PhoneNumber DefaultInstance { get; }
    public PhoneNumber DefaultInstanceForType { get; }
    public bool HasCountryCode { get; }
    public int CountryCode { get; internal set; }
    public bool HasNationalNumber { get; }
    public ulong NationalNumber { get; internal set; }
    public bool HasExtension { get; }
    public string Extension { get; internal set; }
    [ObsoleteAttribute("Use HasNumberOfLeadingZeros")]
[EditorBrowsableAttribute("1")]
public bool HasItalianLeadingZero { get; }
    [ObsoleteAttribute("Use HasNumberOfLeadingZeros")]
[EditorBrowsableAttribute("1")]
public bool ItalianLeadingZero { get; }
    public bool HasNumberOfLeadingZeros { get; }
    public int NumberOfLeadingZeros { get; internal set; }
    public bool HasRawInput { get; }
    public string RawInput { get; internal set; }
    public bool HasCountryCodeSource { get; }
    public CountryCodeSource CountryCodeSource { get; internal set; }
    public bool HasPreferredDomesticCarrierCode { get; }
    public string PreferredDomesticCarrierCode { get; internal set; }
    public bool IsInitialized { get; }
    private static PhoneNumber();
    internal PhoneNumber Clone();
    [CompilerGeneratedAttribute]
public static PhoneNumber get_DefaultInstance();
    public PhoneNumber get_DefaultInstanceForType();
    public bool get_HasCountryCode();
    [CompilerGeneratedAttribute]
public int get_CountryCode();
    [CompilerGeneratedAttribute]
internal void set_CountryCode(int value);
    public bool get_HasNationalNumber();
    [CompilerGeneratedAttribute]
public ulong get_NationalNumber();
    [CompilerGeneratedAttribute]
internal void set_NationalNumber(ulong value);
    public bool get_HasExtension();
    [CompilerGeneratedAttribute]
public string get_Extension();
    [CompilerGeneratedAttribute]
internal void set_Extension(string value);
    public bool get_HasItalianLeadingZero();
    public bool get_ItalianLeadingZero();
    public bool get_HasNumberOfLeadingZeros();
    public int get_NumberOfLeadingZeros();
    internal void set_NumberOfLeadingZeros(int value);
    public bool get_HasRawInput();
    [CompilerGeneratedAttribute]
public string get_RawInput();
    [CompilerGeneratedAttribute]
internal void set_RawInput(string value);
    public bool get_HasCountryCodeSource();
    public CountryCodeSource get_CountryCodeSource();
    internal void set_CountryCodeSource(CountryCodeSource value);
    public bool get_HasPreferredDomesticCarrierCode();
    public string get_PreferredDomesticCarrierCode();
    internal void set_PreferredDomesticCarrierCode(string value);
    public bool get_IsInitialized();
    public static Builder CreateBuilder();
    public Builder ToBuilder();
    public Builder CreateBuilderForType();
    public static Builder CreateBuilder(PhoneNumber prototype);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(PhoneNumber other);
}
public class PhoneNumbers.PhoneNumberDesc : object {
    public static int NationalNumberPatternFieldNumber;
    public static int PossibleLengthFieldNumber;
    public static int PossibleLengthLocalOnlyFieldNumber;
    public static int ExampleNumberFieldNumber;
    internal List`1<int> possibleLength_;
    internal List`1<int> possibleLengthLocalOnly_;
    [CompilerGeneratedAttribute]
private static PhoneNumberDesc <DefaultInstance>k__BackingField;
    private string _nationalNumberPattern;
    private PhoneRegex _nationalNumberPatternRegex;
    [CompilerGeneratedAttribute]
private string <ExampleNumber>k__BackingField;
    public static PhoneNumberDesc DefaultInstance { get; }
    public PhoneNumberDesc DefaultInstanceForType { get; }
    public bool HasNationalNumberPattern { get; }
    public string NationalNumberPattern { get; internal set; }
    public IList`1<int> PossibleLengthList { get; }
    public int PossibleLengthCount { get; }
    public IList`1<int> PossibleLengthLocalOnlyList { get; }
    public int PossibleLengthLocalOnlyCount { get; }
    public bool HasExampleNumber { get; }
    public string ExampleNumber { get; internal set; }
    public bool IsInitialized { get; }
    private static PhoneNumberDesc();
    internal PhoneNumberDesc Clone();
    [CompilerGeneratedAttribute]
public static PhoneNumberDesc get_DefaultInstance();
    public PhoneNumberDesc get_DefaultInstanceForType();
    public bool get_HasNationalNumberPattern();
    public string get_NationalNumberPattern();
    internal void set_NationalNumberPattern(string value);
    internal PhoneRegex GetNationalNumberPattern();
    public IList`1<int> get_PossibleLengthList();
    public int get_PossibleLengthCount();
    public IList`1<int> get_PossibleLengthLocalOnlyList();
    public int get_PossibleLengthLocalOnlyCount();
    public bool get_HasExampleNumber();
    [CompilerGeneratedAttribute]
public string get_ExampleNumber();
    [CompilerGeneratedAttribute]
internal void set_ExampleNumber(string value);
    public bool get_IsInitialized();
    public int GetPossibleLength(int index);
    public int GetPossibleLengthLocalOnly(int index);
    public static Builder CreateBuilder();
    public Builder ToBuilder();
    public Builder CreateBuilderForType();
    public static Builder CreateBuilder(PhoneNumberDesc prototype);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
public enum PhoneNumbers.PhoneNumberFormat : Enum {
    public int value__;
    public static PhoneNumberFormat E164;
    public static PhoneNumberFormat INTERNATIONAL;
    public static PhoneNumberFormat NATIONAL;
    public static PhoneNumberFormat RFC3966;
}
public class PhoneNumbers.PhoneNumberMatch : object {
    [CompilerGeneratedAttribute]
private int <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RawString>k__BackingField;
    [CompilerGeneratedAttribute]
private PhoneNumber <Number>k__BackingField;
    public int Start { get; }
    public int Length { get; }
    public string RawString { get; }
    public PhoneNumber Number { get; }
    public PhoneNumberMatch(int start, string rawString, PhoneNumber number);
    [CompilerGeneratedAttribute]
public int get_Start();
    public int get_Length();
    [CompilerGeneratedAttribute]
public string get_RawString();
    [CompilerGeneratedAttribute]
public PhoneNumber get_Number();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class PhoneNumbers.PhoneNumberMatcher : object {
    private static Regex _pubPages;
    private static Regex _slashSeparatedDates;
    private static Regex _timeStamps;
    private static string openingParens;
    private static string closingParens;
    private static string nonParens;
    private static Regex _matchingBrackets;
    private static Regex _groupSeparator;
    private static Regex _pattern;
    private PhoneNumberUtil phoneUtil;
    private string text;
    private string preferredRegion;
    private Leniency leniency;
    private long maxTries;
    private PhoneNumberMatch lastMatch;
    private int searchIndex;
    private static Char[] SecondNumberStartChars;
    public PhoneNumberMatch Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    public PhoneNumberMatcher(PhoneNumberUtil util, string text, string country, Leniency leniency, long maxTries);
    private static PhoneNumberMatcher();
    private static Regex PubPages();
    private static Regex SlashSeparatedDates();
    private static Regex TimeStamps();
    private static Regex MatchingBrackets();
    private static bool IsLeadClass(char c);
    private static Regex GroupSeparator();
    private static Regex Pattern();
    private PhoneNumberMatch Find(int index);
    public static bool IsLatinLetter(char letter);
    private static bool IsInvalidPunctuationSymbol(char character);
    public static string TrimAfterUnwantedChars(string str);
    internal static string TrimAfterSecondNumberStart(string number);
    private PhoneNumberMatch ExtractMatch(string candidate, int offset);
    private PhoneNumberMatch ExtractInnerMatch(string candidate, int offset);
    private PhoneNumberMatch ParseAndVerify(string candidate, int offset);
    public static bool AllNumberGroupsRemainGrouped(PhoneNumberUtil util, PhoneNumber number, StringBuilder normalizedCandidate, IList`1<string> formattedNumberGroups);
    public static bool AllNumberGroupsAreExactlyPresent(PhoneNumberUtil util, PhoneNumber number, StringBuilder normalizedCandidate, IList`1<string> formattedNumberGroups);
    private static IList`1<string> GetNationalNumberGroups(PhoneNumberUtil util, PhoneNumber number);
    private static IList`1<string> GetNationalNumberGroups(PhoneNumberUtil util, PhoneNumber number, NumberFormat formattingPattern);
    public bool CheckNumberGroupingIsValid(PhoneNumber number, string candidate, PhoneNumberUtil util, CheckGroups checker);
    public static bool ContainsMoreThanOneSlash(string candidate);
    public static bool ContainsOnlyValidXChars(PhoneNumber number, string candidate, PhoneNumberUtil util);
    public static bool IsNationalPrefixPresentIfRequired(PhoneNumber number, PhoneNumberUtil util);
    public sealed virtual PhoneNumberMatch get_Current();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
    private sealed virtual override void System.IDisposable.Dispose();
}
public class PhoneNumbers.PhoneNumberOfflineGeocoder : object {
    private static PhoneNumberOfflineGeocoder instance;
    private static string MAPPING_DATA_DIRECTORY;
    private static object ThisLock;
    private PhoneNumberUtil phoneUtil;
    private string phonePrefixDataDirectory;
    private string phoneDataZipFile;
    private Assembly assembly;
    private MappingFileProvider mappingFileProvider;
    private Dictionary`2<string, AreaCodeMap> availablePhonePrefixMaps;
    internal PhoneNumberOfflineGeocoder(string phonePrefixDataDirectory, Assembly asm);
    private static PhoneNumberOfflineGeocoder();
    private static SortedDictionary`2<int, HashSet`1<string>> LoadFileNamesFromZip(Stream zipStream);
    private static SortedDictionary`2<int, HashSet`1<string>> LoadFileNamesFromManifestResources(Assembly asm, string prefix);
    private AreaCodeMap GetPhonePrefixDescriptions(int prefixMapKey, string language, string script, string region);
    private AreaCodeMap LoadAreaCodeMapFromFile(string fileName);
    private static Stream GetManifestFileStream(Assembly asm, string phonePrefixDataDirectory, string fileName);
    private static Stream GetManifestZipFileStream(Assembly asm, string phoneDataZipFile, string fileName);
    public static PhoneNumberOfflineGeocoder GetInstance();
    public void LoadDataFile(Locale locale, int countryCallingCode);
    private string GetCountryNameForNumber(PhoneNumber number, Locale language);
    private static string GetRegionDisplayName(string regionCode, Locale language);
    public string GetDescriptionForValidNumber(PhoneNumber number, Locale languageCode);
    public string GetDescriptionForValidNumber(PhoneNumber number, Locale languageCode, string userRegion);
    public string GetDescriptionForNumber(PhoneNumber number, Locale languageCode);
    public string GetDescriptionForNumber(PhoneNumber number, Locale languageCode, string userRegion);
    private string GetAreaDescriptionForNumber(PhoneNumber number, string lang, string script, string region);
    private static bool MayFallBackToEnglish(string lang);
}
public class PhoneNumbers.PhoneNumberToTimeZonesMapper : object {
    private static String[] UNKNOWN_TIMEZONE;
    private ImmutableDictionary`2<long, String[]> map;
    private PhoneNumberUtil phoneUtil;
    private static string TZMAP_DATA_DIRECTORY;
    private static string TZMAP_Filename;
    private static object lockObj;
    private static PhoneNumberToTimeZonesMapper instance;
    internal PhoneNumberToTimeZonesMapper(IDictionary`2<long, String[]> source);
    private static PhoneNumberToTimeZonesMapper();
    private List`1<string> LookUpPrefix(long phonePrefix);
    public List`1<string> GetTimeZonesForGeographicalNumber(PhoneNumber number);
    public List`1<string> GetTimeZonesForNumber(PhoneNumber number);
    public string GetUnknownTimeZone();
    private static PhoneNumberToTimeZonesMapper Create(string timezoneDataDirectory);
    public static PhoneNumberToTimeZonesMapper GetInstance();
}
public enum PhoneNumbers.PhoneNumberType : Enum {
    public int value__;
    public static PhoneNumberType FIXED_LINE;
    public static PhoneNumberType MOBILE;
    public static PhoneNumberType FIXED_LINE_OR_MOBILE;
    public static PhoneNumberType TOLL_FREE;
    public static PhoneNumberType PREMIUM_RATE;
    public static PhoneNumberType SHARED_COST;
    public static PhoneNumberType VOIP;
    public static PhoneNumberType PERSONAL_NUMBER;
    public static PhoneNumberType PAGER;
    public static PhoneNumberType UAN;
    public static PhoneNumberType VOICEMAIL;
    public static PhoneNumberType UNKNOWN;
}
public class PhoneNumbers.PhoneNumberUtil : object {
    private static int MIN_LENGTH_FOR_NSN;
    internal static int MAX_LENGTH_FOR_NSN;
    private static string UNKNOWN_REGION;
    private static int NANPA_COUNTRY_CODE;
    private Dictionary`2<int, List`1<string>> countryCallingCodeToRegionCodeMap;
    private HashSet`1<string> supportedRegions;
    private HashSet`1<string> nanpaRegions;
    internal static char PLUS_SIGN;
    private static string STAR_SIGN;
    private static string RFC3966_EXTN_PREFIX;
    private static string RFC3966_PREFIX;
    private static string RFC3966_PHONE_CONTEXT;
    private static string RFC3966_ISDN_SUBADDRESS;
    private static object ThisLock;
    private static Regex _uniqueInternationalPrefix;
    internal static string VALID_PUNCTUATION;
    private static string VALID_ALPHA;
    internal static string PLUS_CHARS;
    private static Regex _separatorPattern;
    [ObsoleteAttribute("This is an internal implementation detail not meant for public use", "True")]
[EditorBrowsableAttribute("1")]
public static Regex ValidStartCharPattern;
    private static string DEFAULT_EXTN_PREFIX;
    private static string ALPHANUM;
    private static string RFC3966_DOMAINLABEL;
    private static string RFC3966_TOPLABEL;
    private static Regex _RFC3966_GLOBAL_NUMBER_DIGITS_OR_DOMAINNAME;
    private static string extLimitAfterExplicitLabelString;
    private static string extLimitAfterLikelyLabelString;
    private static string extLimitAfterAmbiguousCharString;
    private static string extLimitWhenNotSureString;
    private static string possibleSeparatorsBetweenNumberAndExtLabel;
    private static string possibleCharsAfterExtLabel;
    private static string explicitExtLabels;
    private static string ambiguousExtLabels;
    private static string ambiguousSeparator;
    private static string rfcExtn;
    private static string explicitExtn;
    private static string ambiguousExtn;
    private static string americanStyleExtnWithSuffix;
    internal static string ExtnPatternsForMatching;
    private static string autoDiallingExtn;
    private static string onlyCommasExtn;
    private static string ExtnPatternsForParsing;
    private static Regex _extnPattern;
    private static Regex _nonDigitsPattern;
    private static Regex _firstGroupPattern;
    private static string NpPattern;
    private static string FgPattern;
    private static string CcPattern;
    private static string ValidPhoneNumberPattern;
    private static Regex _validPhoneNumber;
    private static PhoneNumberUtil instance;
    private Dictionary`2<string, PhoneMetadata> regionToMetadataMap;
    private Dictionary`2<int, PhoneMetadata> countryCodeToNonGeographicalMetadataMap;
    public static string REGION_CODE_FOR_NON_GEO_ENTITY;
    internal PhoneNumberUtil(string baseFileLocation, Assembly asm, Dictionary`2<int, List`1<string>> countryCallingCodeToRegionCodeMap);
    internal PhoneNumberUtil(Stream metaDataStream, Dictionary`2<int, List`1<string>> countryCallingCodeToRegionCodeMap);
    private static PhoneNumberUtil();
    private static bool IsGeoMobileCountryWithoutMobileAreaCode(int countryCallingCode);
    private static bool IsCountryWithoutNationalPrefixWithAreaCodes(int countryCallingCode);
    private static bool IsGeoMobileCountry(int countryCallingCode);
    private static char MapDiallableChar(char c);
    private static char MapAlphaPhone(char c);
    private static char MapAllPlusNumberGroupingSymbols(char c);
    private static Regex UniqueInternationalPrefix();
    internal static bool IsPlusChar(char c);
    private static Regex SeparatorPattern();
    private static bool IsValidAlphaPhone(StringBuilder number);
    private static Regex RFC3966_GLOBAL_NUMBER_DIGITS_OR_DOMAINNAME();
    internal static Regex ExtnPattern();
    internal static Regex NonDigitsPattern();
    internal static Regex FirstGroupPattern();
    internal static Regex ValidPhoneNumber();
    public bool Verify(Leniency leniency, PhoneNumber number, string candidate, PhoneNumberUtil util, PhoneNumberMatcher matcher);
    public static string ExtractPossibleNumber(string number);
    public static bool IsViablePhoneNumber(string number);
    private static void Normalize(StringBuilder number);
    internal static StringBuilder NormalizeDigits(StringBuilder number, bool keepNonDigits);
    public int GetLengthOfGeographicalAreaCode(PhoneNumber number);
    public int GetLengthOfNationalDestinationCode(PhoneNumber number);
    public static string GetCountryMobileToken(int countryCallingCode);
    private static string NormalizeHelper(string number, Func`2<char, char> normalizationReplacements, bool removeNonMatches);
    private static StringBuilder NormalizeHelper(StringBuilder number, Func`2<char, char> normalizationReplacements, bool removeNonMatches);
    public static PhoneNumberUtil GetInstance(string baseFileLocation, Dictionary`2<int, List`1<string>> countryCallingCodeToRegionCodeMap);
    public static PhoneNumberUtil CreateInstance(Stream metadataStream);
    public HashSet`1<string> GetSupportedRegions();
    public KeyCollection<int, PhoneMetadata> GetSupportedGlobalNetworkCallingCodes();
    public HashSet`1<int> GetSupportedCallingCodes();
    private static bool DescHasPossibleNumberData(PhoneNumberDesc desc);
    private static bool DescHasData(PhoneNumberDesc desc);
    private HashSet`1<PhoneNumberType> GetSupportedTypesForMetadata(PhoneMetadata metadata);
    public HashSet`1<PhoneNumberType> GetSupportedTypesForRegion(string regionCode);
    public HashSet`1<PhoneNumberType> GetSupportedTypesForNonGeoEntity(int countryCallingCode);
    public static PhoneNumberUtil GetInstance();
    public bool IsNumberGeographical(PhoneNumber phoneNumber);
    public bool IsNumberGeographical(PhoneNumberType phoneNumberType, int countryCallingCode);
    private bool IsValidRegionCode(string regionCode);
    private bool HasValidCountryCallingCode(int countryCallingCode);
    public void Format(PhoneNumber number, PhoneNumberFormat numberFormat, StringBuilder formattedNumber);
    private PhoneMetadata GetMetadataForRegionOrCallingCode(int countryCallingCode, string regionCode);
    public string FormatNationalNumberWithPreferredCarrierCode(PhoneNumber number, string fallbackCarrierCode);
    public string FormatNumberForMobileDialing(PhoneNumber number, string regionCallingFrom, bool withFormatting);
    public string FormatInOriginalFormat(PhoneNumber number, string regionCallingFrom);
    private bool RawInputContainsNationalPrefix(string rawInput, string nationalPrefix, string regionCode);
    private bool HasFormattingPatternForNumber(PhoneNumber number);
    public string GetNationalSignificantNumber(PhoneNumber number);
    internal static int GetNationalSignificantNumberLength(PhoneNumber number);
    private void PrefixNumberWithCountryCallingCode(int countryCallingCode, PhoneNumberFormat numberFormat, StringBuilder formattedNumber);
    private string FormatNsn(string number, PhoneMetadata metadata, PhoneNumberFormat numberFormat, string carrierCode);
    internal NumberFormat ChooseFormattingPatternForNumber(List`1<NumberFormat> availableFormats, string nationalNumber);
    internal string FormatNsnUsingPattern(string nationalNumber, NumberFormat formattingPattern, PhoneNumberFormat numberFormat);
    private string FormatNsnUsingPattern(string nationalNumber, NumberFormat formattingPattern, PhoneNumberFormat numberFormat, string carrierCode);
    public PhoneNumber GetExampleNumber(string regionCode);
    public PhoneNumber GetExampleNumberForType(string regionCode, PhoneNumberType type);
    public PhoneNumber GetExampleNumberForNonGeoEntity(int countryCallingCode);
    private static void MaybeAppendFormattedExtension(PhoneNumber number, PhoneMetadata metadata, PhoneNumberFormat numberFormat, StringBuilder formattedNumber);
    private static PhoneNumberDesc GetNumberDescByType(PhoneMetadata metadata, PhoneNumberType type);
    public PhoneNumberType GetNumberType(PhoneNumber number);
    private PhoneNumberType GetNumberTypeHelper(string nationalNumber, PhoneMetadata metadata);
    public PhoneMetadata GetMetadataForRegion(string regionCode);
    public PhoneMetadata GetMetadataForNonGeographicalRegion(int countryCallingCode);
    private bool IsNumberMatchingDesc(string nationalNumber, PhoneNumberDesc numberDesc);
    public bool IsValidNumber(PhoneNumber number);
    public bool IsValidNumberForRegion(PhoneNumber number, string regionCode);
    public string GetRegionCodeForNumber(PhoneNumber number);
    private string GetRegionCodeForNumberFromRegionList(PhoneNumber number, List`1<string> regionCodes);
    public string GetRegionCodeForCountryCode(int countryCallingCode);
    public int GetCountryCodeForRegion(string regionCode);
    private int GetCountryCodeForValidRegion(string regionCode);
    public string GetNddPrefixForRegion(string regionCode, bool stripNonDigits);
    public bool IsNANPACountry(string regionCode);
    public bool IsAlphaNumber(string number);
    public bool IsPossibleNumber(PhoneNumber number);
    public bool IsPossibleNumberForType(PhoneNumber number, PhoneNumberType type);
    private static ValidationResult TestNumberLength(int actualLength, PhoneMetadata metadata, PhoneNumberType type);
    public ValidationResult IsPossibleNumberWithReason(PhoneNumber number);
    public ValidationResult IsPossibleNumberForTypeWithReason(PhoneNumber number, PhoneNumberType type);
    public bool IsPossibleNumber(string number, string regionDialingFrom);
    public bool TruncateTooLongNumber(Builder number);
    public AsYouTypeFormatter GetAsYouTypeFormatter(string regionCode);
    internal int ExtractCountryCode(StringBuilder fullNumber, StringBuilder nationalNumber);
    public int MaybeExtractCountryCode(string number, PhoneMetadata defaultRegionMetadata, StringBuilder nationalNumber, bool keepRawInput, Builder phoneNumber);
    private int MaybeExtractCountryCode(string number, PhoneMetadata defaultRegionMetadata, StringBuilder nationalNumber, bool keepRawInput, PhoneNumber phoneNumber);
    private static bool ParsePrefixAsIdd(PhoneRegex iddPattern, StringBuilder number);
    public CountryCodeSource MaybeStripInternationalPrefixAndNormalize(StringBuilder number, string possibleIddPrefix);
    public bool MaybeStripNationalPrefixAndCarrierCode(StringBuilder number, PhoneMetadata metadata, StringBuilder carrierCode);
    internal bool MaybeStripNationalPrefixAndCarrierCode(StringBuilder number, string numberString, PhoneMetadata metadata, bool getCarrier, String& carrierCode);
    private static string MaybeStripExtension(StringBuilder number, string numberString);
    private bool CheckRegionForParsing(StringBuilder numberToParse, string defaultRegion);
    public PhoneNumber Parse(string numberToParse, string defaultRegion);
    public void Parse(string numberToParse, string defaultRegion, Builder phoneNumber);
    public PhoneNumber ParseAndKeepRawInput(string numberToParse, string defaultRegion);
    public void ParseAndKeepRawInput(string numberToParse, string defaultRegion, Builder phoneNumber);
    public IEnumerable`1<PhoneNumberMatch> FindNumbers(string text, string defaultRegion);
    public IEnumerable`1<PhoneNumberMatch> FindNumbers(string text, string defaultRegion, Leniency leniency, long maxTries);
    private static void SetItalianLeadingZerosForPhoneNumber(string nationalNumber, PhoneNumber phoneNumber);
    private void ParseHelper(string numberToParse, string defaultRegion, bool keepRawInput, bool checkRegion, PhoneNumber phoneNumber);
    private static string ExtractPhoneContext(string numberToExtractFrom, int indexOfPhoneContext);
    private static bool IsPhoneContextValid(string phoneContext);
    private static void BuildNationalNumberForParsing(string numberToParse, StringBuilder nationalNumber);
    public MatchType IsNumberMatch(PhoneNumber firstNumberIn, PhoneNumber secondNumberIn);
    private static bool IsNationalNumberSuffixOfTheOther(PhoneNumber firstNumber, PhoneNumber secondNumber);
    public MatchType IsNumberMatch(string firstNumber, string secondNumber);
    public MatchType IsNumberMatch(PhoneNumber firstNumber, string secondNumber);
    public bool CanBeInternationallyDialled(PhoneNumber number);
    public static string Normalize(string number);
    public static string NormalizeDigitsOnly(string number);
    public static string NormalizeDiallableCharsOnly(string number);
    public static string ConvertAlphaCharactersInNumber(string number);
    public string Format(PhoneNumber number, PhoneNumberFormat numberFormat);
    internal static string GetNationalSignificantNumberImpl(PhoneNumber number);
    public string FormatByPattern(PhoneNumber number, PhoneNumberFormat numberFormat, List`1<NumberFormat> userDefinedFormats);
    public string FormatNationalNumberWithCarrierCode(PhoneNumber number, string carrierCode);
    public string FormatOutOfCountryCallingNumber(PhoneNumber number, string regionCallingFrom);
    public string FormatOutOfCountryKeepingAlphaChars(PhoneNumber number, string regionCallingFrom);
}
[EditorBrowsableAttribute("1")]
public class PhoneNumbers.PhoneRegex : object {
    private string pattern;
    private Lazy`1<Regex> regex;
    private Lazy`1<Regex> allRegex;
    private Lazy`1<Regex> beginRegex;
    private static ConcurrentDictionary`2<string, PhoneRegex> cache;
    public PhoneRegex(string pattern);
    [ObsoleteAttribute("This is an internal implementation detail not meant for public use")]
public PhoneRegex(string pattern, RegexOptions options);
    private static PhoneRegex();
    internal static PhoneRegex Get(string regex);
    public bool IsMatch(string value);
    public Match Match(string value);
    public string Replace(string value, string replacement);
    public bool IsMatchAll(string value);
    public Match MatchAll(string value);
    public bool IsMatchBeginning(string value);
    public Match MatchBeginning(string value);
    [CompilerGeneratedAttribute]
private Regex <.ctor>b__6_0();
    [CompilerGeneratedAttribute]
private Regex <.ctor>b__6_1();
    [CompilerGeneratedAttribute]
private Regex <.ctor>b__6_2();
}
[ObsoleteAttribute("This is an internal implementation detail not meant for public use")]
[EditorBrowsableAttribute("1")]
public class PhoneNumbers.RegexCache : object {
    public RegexCache(int size);
    public PhoneRegex GetPatternForRegex(string regex);
    public bool ContainsRegex(string regex);
}
public class PhoneNumbers.ShortNumberInfo : object {
    private static ShortNumberInfo Instance;
    private static HashSet`1<string> RegionsWhereEmergencyNumbersMustBeExact;
    private Dictionary`2<int, List`1<string>> countryCallingCodeToRegionCodeMap;
    private static ShortNumberInfo();
    public static ShortNumberInfo GetInstance();
    private List`1<string> GetRegionCodesForCountryCode(int countryCallingCode);
    private bool RegionDialingFromMatchesNumber(PhoneNumber number, string regionDialingFrom);
    public bool IsPossibleShortNumberForRegion(PhoneNumber number, string regionDialingFrom);
    public bool IsPossibleShortNumber(PhoneNumber number);
    public bool IsValidShortNumberForRegion(PhoneNumber number, string regionDialingFrom);
    public bool IsValidShortNumber(PhoneNumber number);
    public ShortNumberCost GetExpectedCostForRegion(PhoneNumber number, string regionDialingFrom);
    public ShortNumberCost GetExpectedCost(PhoneNumber number);
    private static string GetRegionCodeForShortNumberFromRegionList(PhoneNumber number, List`1<string> regionCodes);
    internal string GetExampleShortNumber(string regionCode);
    internal string GetExampleShortNumberForCost(string regionCode, ShortNumberCost cost);
    public bool ConnectsToEmergencyNumber(string number, string regionCode);
    public bool IsEmergencyNumber(string number, string regionCode);
    private static bool MatchesEmergencyNumberHelper(string number, string regionCode, bool allowPrefixMatch);
    public bool IsCarrierSpecific(PhoneNumber number);
    public bool IsCarrierSpecificForRegion(PhoneNumber number, string regionDialingFrom);
    public bool IsSmsServiceForRegion(PhoneNumber number, string regionDialingFrom);
    private static bool MatchesPossibleNumberAndNationalNumber(string number, PhoneNumberDesc numberDesc);
    private static bool MatchNationalNumber(string number, PhoneNumberDesc numberDesc, bool allowPrefixMatch);
}
internal class PhoneNumbers.ShortNumbersRegionCodeSet : object {
    internal static ImmutableHashSet`1<string> RegionCodeSet;
    private static ShortNumbersRegionCodeSet();
}
internal static class PhoneNumbers.TimezoneMapDataReader : object {
    private static List`1<string> LineReader(StreamReader reader, char fieldDelimiter);
    internal static IDictionary`2<long, String[]> GetPrefixMap(Stream fp, Char[] splitters);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
