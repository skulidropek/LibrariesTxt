public class LibSassHost.CompilationOptions : object {
    [CompilerGeneratedAttribute]
private IList`1<string> <IncludePaths>k__BackingField;
    [CompilerGeneratedAttribute]
private IndentType <IndentType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <IndentWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InlineSourceMap>k__BackingField;
    [CompilerGeneratedAttribute]
private LineFeedType <LineFeedType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OmitSourceMapUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private OutputStyle <OutputStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Precision>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SourceComments>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SourceMap>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SourceMapFileUrls>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SourceMapIncludeContents>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceMapRootPath>k__BackingField;
    public IList`1<string> IncludePaths { get; public set; }
    public IndentType IndentType { get; public set; }
    public int IndentWidth { get; public set; }
    public bool InlineSourceMap { get; public set; }
    public LineFeedType LineFeedType { get; public set; }
    public bool OmitSourceMapUrl { get; public set; }
    public OutputStyle OutputStyle { get; public set; }
    public int Precision { get; public set; }
    public bool SourceComments { get; public set; }
    public bool SourceMap { get; public set; }
    public bool SourceMapFileUrls { get; public set; }
    public bool SourceMapIncludeContents { get; public set; }
    public string SourceMapRootPath { get; public set; }
    [CompilerGeneratedAttribute]
public IList`1<string> get_IncludePaths();
    [CompilerGeneratedAttribute]
public void set_IncludePaths(IList`1<string> value);
    [CompilerGeneratedAttribute]
public IndentType get_IndentType();
    [CompilerGeneratedAttribute]
public void set_IndentType(IndentType value);
    [CompilerGeneratedAttribute]
public int get_IndentWidth();
    [CompilerGeneratedAttribute]
public void set_IndentWidth(int value);
    [CompilerGeneratedAttribute]
public bool get_InlineSourceMap();
    [CompilerGeneratedAttribute]
public void set_InlineSourceMap(bool value);
    [CompilerGeneratedAttribute]
public LineFeedType get_LineFeedType();
    [CompilerGeneratedAttribute]
public void set_LineFeedType(LineFeedType value);
    [CompilerGeneratedAttribute]
public bool get_OmitSourceMapUrl();
    [CompilerGeneratedAttribute]
public void set_OmitSourceMapUrl(bool value);
    [CompilerGeneratedAttribute]
public OutputStyle get_OutputStyle();
    [CompilerGeneratedAttribute]
public void set_OutputStyle(OutputStyle value);
    [CompilerGeneratedAttribute]
public int get_Precision();
    [CompilerGeneratedAttribute]
public void set_Precision(int value);
    [CompilerGeneratedAttribute]
public bool get_SourceComments();
    [CompilerGeneratedAttribute]
public void set_SourceComments(bool value);
    [CompilerGeneratedAttribute]
public bool get_SourceMap();
    [CompilerGeneratedAttribute]
public void set_SourceMap(bool value);
    [CompilerGeneratedAttribute]
public bool get_SourceMapFileUrls();
    [CompilerGeneratedAttribute]
public void set_SourceMapFileUrls(bool value);
    [CompilerGeneratedAttribute]
public bool get_SourceMapIncludeContents();
    [CompilerGeneratedAttribute]
public void set_SourceMapIncludeContents(bool value);
    [CompilerGeneratedAttribute]
public string get_SourceMapRootPath();
    [CompilerGeneratedAttribute]
public void set_SourceMapRootPath(string value);
}
public class LibSassHost.CompilationResult : object {
    [CompilerGeneratedAttribute]
private string <CompiledContent>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <IncludedFilePaths>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceMap>k__BackingField;
    public string CompiledContent { get; public set; }
    public IList`1<string> IncludedFilePaths { get; public set; }
    public string SourceMap { get; public set; }
    [CompilerGeneratedAttribute]
public string get_CompiledContent();
    [CompilerGeneratedAttribute]
public void set_CompiledContent(string value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_IncludedFilePaths();
    [CompilerGeneratedAttribute]
public void set_IncludedFilePaths(IList`1<string> value);
    [CompilerGeneratedAttribute]
public string get_SourceMap();
    [CompilerGeneratedAttribute]
public void set_SourceMap(string value);
}
internal static class LibSassHost.Constants.DllName : object {
    public static string Universal;
    public static string ForWindows;
    public static string ForLinux;
    public static string ForOsx;
}
public class LibSassHost.FileManager : object {
    private static Lazy`1<FileManager> _instance;
    private string _currentDirectoryName;
    public static IFileManager Instance { get; }
    public bool SupportsConversionToAbsolutePath { get; }
    private static FileManager();
    public static IFileManager get_Instance();
    private static string GetDefaultDirectory();
    private static bool PathStartsWithDriveLetter(string path);
    public sealed virtual bool get_SupportsConversionToAbsolutePath();
    public sealed virtual string GetCurrentDirectory();
    public sealed virtual bool FileExists(string path);
    public sealed virtual bool IsAbsolutePath(string path);
    public sealed virtual string ToAbsolutePath(string path);
    public sealed virtual string ReadFile(string path);
}
internal static class LibSassHost.Helpers.MarshallingHelpers : object {
    public static IntPtr StringToPtr(string value);
    private static IntPtr CharsToPtr(Encoding encoding, Char* chars, int count);
    public static string PtrToString(IntPtr ptr);
    public static String[] PtrToStringArray(IntPtr ptr, int len);
}
public static class LibSassHost.Helpers.PathHelpers : object {
    public static string ProcessBackSlashes(string path);
}
public static class LibSassHost.Helpers.SassErrorHelpers : object {
    internal static string GenerateCompilerLoadErrorMessage(string description, bool quoteDescription);
    public static string GenerateErrorDetails(SassException sassException, bool omitMessage);
    public static string GenerateErrorDetails(SassCompilationException sassСompilationException, bool omitMessage);
    private static void WriteCommonErrorDetails(StringBuilder buffer, SassException sassException, bool omitMessage);
    private static void WriteCompilationErrorDetails(StringBuilder buffer, SassCompilationException sassСompilationException);
    internal static SassCompilerLoadException WrapCompilerLoadException(Exception exception, bool quoteDescription);
    [ObsoleteAttribute("Use a `GenerateErrorDetails` method")]
public static string Format(SassException sassException);
    [ObsoleteAttribute("Use a `GenerateErrorDetails` method")]
public static string Format(SassCompilationException sassСompilationException);
}
public interface LibSassHost.IFileManager {
    public bool SupportsConversionToAbsolutePath { get; }
    public abstract virtual bool get_SupportsConversionToAbsolutePath();
    public abstract virtual string GetCurrentDirectory();
    public abstract virtual bool FileExists(string path);
    public abstract virtual bool IsAbsolutePath(string path);
    public abstract virtual string ToAbsolutePath(string path);
    public abstract virtual string ReadFile(string path);
}
public enum LibSassHost.IndentType : Enum {
    public int value__;
    public static IndentType Space;
    public static IndentType Tab;
}
internal static class LibSassHost.Internal.FileManagerMarshaler : object {
    private static Func_StringAnsi _getCurrentDirectoryDelegateUtf8;
    private static Func_StringAnsi_Boolean _fileExistsDelegateUtf8;
    private static Func_StringAnsi_Boolean _isAbsolutePathDelegateUtf8;
    private static Func_StringAnsi_StringAnsi _toAbsolutePathDelegateUtf8;
    private static Func_StringAnsi_StringAnsi _readFileDelegateUtf8;
    private static Func_StringUni _getCurrentDirectoryDelegateUtf16;
    private static Func_StringUni_Boolean _fileExistsDelegateUtf16;
    private static Func_StringUni_Boolean _isAbsolutePathDelegateUtf16;
    private static Func_StringUni_StringUni _toAbsolutePathDelegateUtf16;
    private static Func_StringUni_StringUni _readFileDelegateUtf16;
    public static void SetFileManager(IFileManager fileManager);
    public static void UnsetFileManager();
}
[UnmanagedFunctionPointerAttribute("3")]
public class LibSassHost.Internal.Native.Func_StringAnsi : MulticastDelegate {
    public Func_StringAnsi(object object, IntPtr method);
    public virtual string Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual string EndInvoke(IAsyncResult result);
}
[UnmanagedFunctionPointerAttribute("3")]
internal class LibSassHost.Internal.Native.Func_StringAnsi_Boolean : MulticastDelegate {
    public Func_StringAnsi_Boolean(object object, IntPtr method);
    public virtual bool Invoke(string p);
    public virtual IAsyncResult BeginInvoke(string p, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
[UnmanagedFunctionPointerAttribute("3")]
public class LibSassHost.Internal.Native.Func_StringAnsi_StringAnsi : MulticastDelegate {
    public Func_StringAnsi_StringAnsi(object object, IntPtr method);
    public virtual string Invoke(string p);
    public virtual IAsyncResult BeginInvoke(string p, AsyncCallback callback, object object);
    public virtual string EndInvoke(IAsyncResult result);
}
[UnmanagedFunctionPointerAttribute("3")]
public class LibSassHost.Internal.Native.Func_StringUni : MulticastDelegate {
    public Func_StringUni(object object, IntPtr method);
    public virtual string Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual string EndInvoke(IAsyncResult result);
}
[UnmanagedFunctionPointerAttribute("3")]
internal class LibSassHost.Internal.Native.Func_StringUni_Boolean : MulticastDelegate {
    public Func_StringUni_Boolean(object object, IntPtr method);
    public virtual bool Invoke(string p);
    public virtual IAsyncResult BeginInvoke(string p, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
[UnmanagedFunctionPointerAttribute("3")]
public class LibSassHost.Internal.Native.Func_StringUni_StringUni : MulticastDelegate {
    public Func_StringUni_StringUni(object object, IntPtr method);
    public virtual string Invoke(string p);
    public virtual IAsyncResult BeginInvoke(string p, AsyncCallback callback, object object);
    public virtual string EndInvoke(IAsyncResult result);
}
internal static class LibSassHost.Internal.Native.Sass_Api : object {
    internal static IntPtr sass_alloc_memory(size_t size);
    internal static Utf8_String libsass_version();
    internal static Utf8_String libsass_language_version();
    internal static Sass_File_Context sass_make_file_context(Utf8_String input_path);
    internal static Sass_Data_Context sass_make_data_context(Utf8_String source_string);
    internal static int sass_compile_file_context(Sass_File_Context ctx);
    internal static int sass_compile_data_context(Sass_Data_Context ctx);
    internal static void sass_delete_file_context(Sass_File_Context ctx);
    internal static void sass_delete_data_context(Sass_Data_Context ctx);
    internal static Sass_Context sass_file_context_get_context(Sass_File_Context file_ctx);
    internal static Sass_Context sass_data_context_get_context(Sass_Data_Context data_ctx);
    internal static Sass_Options sass_file_context_get_options(Sass_File_Context file_ctx);
    internal static Sass_Options sass_data_context_get_options(Sass_Data_Context data_ctx);
    internal static void sass_option_set_precision(Sass_Options options, int precision);
    internal static void sass_option_set_output_style(Sass_Options options, Sass_Output_Style output_style);
    internal static void sass_option_set_source_comments(Sass_Options options, bool source_comments);
    internal static void sass_option_set_source_map_embed(Sass_Options options, bool source_map_embed);
    internal static void sass_option_set_source_map_contents(Sass_Options options, bool source_map_contents);
    internal static void sass_option_set_source_map_file_urls(Sass_Options options, bool source_map_file_urls);
    internal static void sass_option_set_omit_source_map_url(Sass_Options options, bool omit_source_map_url);
    internal static void sass_option_set_is_indented_syntax_src(Sass_Options options, bool is_indented_syntax_src);
    internal static void sass_option_set_indent(Sass_Options options, Utf8_String indent);
    internal static void sass_option_set_linefeed(Sass_Options options, Utf8_String linefeed);
    internal static void sass_option_set_input_path(Sass_Options options, Utf8_String input_path);
    internal static void sass_option_set_output_path(Sass_Options options, Utf8_String output_path);
    internal static void sass_option_set_include_path(Sass_Options options, Utf8_String include_path);
    internal static void sass_option_set_source_map_file(Sass_Options options, Utf8_String source_map_file);
    internal static void sass_option_set_source_map_root(Sass_Options options, Utf8_String source_map_root);
    internal static Utf8_String sass_context_get_output_string(Sass_Context ctx);
    internal static int sass_context_get_error_status(Sass_Context ctx);
    internal static Utf8_String sass_context_get_error_text(Sass_Context ctx);
    internal static Utf8_String sass_context_get_error_message(Sass_Context ctx);
    internal static Utf8_String sass_context_get_error_file(Sass_Context ctx);
    internal static Utf8_String sass_context_get_error_src(Sass_Context ctx);
    internal static size_t sass_context_get_error_line(Sass_Context ctx);
    internal static size_t sass_context_get_error_column(Sass_Context ctx);
    internal static Utf8_String sass_context_get_source_map_string(Sass_Context ctx);
    internal static IntPtr sass_context_get_included_files(Sass_Context ctx);
    internal static size_t sass_context_get_included_files_size(Sass_Context ctx);
    internal static bool sass_file_manager_get_is_initialized();
    internal static bool sass_file_manager_get_supports_conversion_to_absolute_path();
    internal static void sass_file_manager_set_is_initialized(bool is_initialized);
    internal static void sass_file_manager_set_supports_conversion_to_absolute_path(bool supports_conversion_to_absolute_path);
    internal static void sass_file_manager_set_get_current_directory_delegate_utf8(Func_StringAnsi del);
    internal static void sass_file_manager_set_file_exists_delegate_utf8(Func_StringAnsi_Boolean del);
    internal static void sass_file_manager_set_is_absolute_path_delegate_utf8(Func_StringAnsi_Boolean del);
    internal static void sass_file_manager_set_to_absolute_path_delegate_utf8(Func_StringAnsi_StringAnsi del);
    internal static void sass_file_manager_set_read_file_delegate_utf8(Func_StringAnsi_StringAnsi del);
    internal static void sass_file_manager_set_get_current_directory_delegate_utf16(Func_StringUni del);
    internal static void sass_file_manager_set_file_exists_delegate_utf16(Func_StringUni_Boolean del);
    internal static void sass_file_manager_set_is_absolute_path_delegate_utf16(Func_StringUni_Boolean del);
    internal static void sass_file_manager_set_to_absolute_path_delegate_utf16(Func_StringUni_StringUni del);
    internal static void sass_file_manager_set_read_file_delegate_utf16(Func_StringUni_StringUni del);
    internal static void sass_file_manager_unset_get_current_directory_delegate();
    internal static void sass_file_manager_unset_file_exists_delegate();
    internal static void sass_file_manager_unset_is_absolute_path_delegate();
    internal static void sass_file_manager_unset_to_absolute_path_delegate();
    internal static void sass_file_manager_unset_read_file_delegate();
}
internal class LibSassHost.Internal.Native.Sass_Context : ValueType {
    public IntPtr Reference;
    public Sass_Context(IntPtr reference);
}
internal class LibSassHost.Internal.Native.Sass_Data_Context : ValueType {
    public IntPtr Reference;
    public Sass_Data_Context(IntPtr reference);
}
internal class LibSassHost.Internal.Native.Sass_File_Context : ValueType {
    public IntPtr Reference;
    public Sass_File_Context(IntPtr reference);
}
internal class LibSassHost.Internal.Native.Sass_Options : ValueType {
    public IntPtr Reference;
    public Sass_Options(IntPtr reference);
}
internal enum LibSassHost.Internal.Native.Sass_Output_Style : Enum {
    public int value__;
    public static Sass_Output_Style SASS_STYLE_NESTED;
    public static Sass_Output_Style SASS_STYLE_EXPANDED;
    public static Sass_Output_Style SASS_STYLE_COMPACT;
    public static Sass_Output_Style SASS_STYLE_COMPRESSED;
}
internal class LibSassHost.Internal.Native.size_t : ValueType {
    public IntPtr Reference;
    public size_t(IntPtr reference);
    public size_t(int intValue);
    public size_t(long longValue);
    public static int op_Implicit(size_t value);
    public static long op_Implicit(size_t value);
    public static size_t op_Implicit(int intValue);
    public static size_t op_Implicit(long longValue);
}
internal class LibSassHost.Internal.Native.Utf8_String : ValueType {
    public IntPtr Reference;
    public Utf8_String(IntPtr reference);
    public static string op_Implicit(Utf8_String value);
    public static Utf8_String op_Implicit(string value);
}
internal static class LibSassHost.Internal.SassCompilerProxy : object {
    public static string GetVersion();
    public static string GetLanguageVersion();
    public static void Compile(SassDataContext dataContext);
    public static void CompileFile(SassFileContext fileContext);
    private static void FillUnmanagedContextOptions(Sass_Options& ctx_options, SassContextBase context);
    private static void FillManagedContextOutput(SassContextBase context, Sass_Context& ctx);
    private static void FillManagedContextError(SassContextBase context, Sass_Context& ctx);
}
internal abstract class LibSassHost.Internal.SassContextBase : object {
    [CompilerGeneratedAttribute]
private SassErrorInfo <Error>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <IncludedFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InputPath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsIndentedSyntaxSource>k__BackingField;
    [CompilerGeneratedAttribute]
private SassOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputString>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceMapFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceMapString>k__BackingField;
    public SassErrorInfo Error { get; public set; }
    public String[] IncludedFiles { get; public set; }
    public string InputPath { get; public set; }
    public bool IsIndentedSyntaxSource { get; public set; }
    public SassOptions Options { get; public set; }
    public string OutputPath { get; public set; }
    public string OutputString { get; public set; }
    public string SourceMapFile { get; public set; }
    public string SourceMapString { get; public set; }
    [CompilerGeneratedAttribute]
public SassErrorInfo get_Error();
    [CompilerGeneratedAttribute]
public void set_Error(SassErrorInfo value);
    [CompilerGeneratedAttribute]
public String[] get_IncludedFiles();
    [CompilerGeneratedAttribute]
public void set_IncludedFiles(String[] value);
    [CompilerGeneratedAttribute]
public string get_InputPath();
    [CompilerGeneratedAttribute]
public void set_InputPath(string value);
    [CompilerGeneratedAttribute]
public bool get_IsIndentedSyntaxSource();
    [CompilerGeneratedAttribute]
public void set_IsIndentedSyntaxSource(bool value);
    [CompilerGeneratedAttribute]
public SassOptions get_Options();
    [CompilerGeneratedAttribute]
public void set_Options(SassOptions value);
    [CompilerGeneratedAttribute]
public string get_OutputPath();
    [CompilerGeneratedAttribute]
public void set_OutputPath(string value);
    [CompilerGeneratedAttribute]
public string get_OutputString();
    [CompilerGeneratedAttribute]
public void set_OutputString(string value);
    [CompilerGeneratedAttribute]
public string get_SourceMapFile();
    [CompilerGeneratedAttribute]
public void set_SourceMapFile(string value);
    [CompilerGeneratedAttribute]
public string get_SourceMapString();
    [CompilerGeneratedAttribute]
public void set_SourceMapString(string value);
}
internal class LibSassHost.Internal.SassDataContext : SassContextBase {
    [CompilerGeneratedAttribute]
private string <SourceString>k__BackingField;
    public string SourceString { get; public set; }
    [CompilerGeneratedAttribute]
public string get_SourceString();
    [CompilerGeneratedAttribute]
public void set_SourceString(string value);
}
internal class LibSassHost.Internal.SassErrorInfo : object {
    [CompilerGeneratedAttribute]
private int <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <File>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Line>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Column>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Source>k__BackingField;
    public int Status { get; public set; }
    public string Text { get; public set; }
    public string Message { get; public set; }
    public string File { get; public set; }
    public int Line { get; public set; }
    public int Column { get; public set; }
    public string Source { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(int value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public string get_File();
    [CompilerGeneratedAttribute]
public void set_File(string value);
    [CompilerGeneratedAttribute]
public int get_Line();
    [CompilerGeneratedAttribute]
public void set_Line(int value);
    [CompilerGeneratedAttribute]
public int get_Column();
    [CompilerGeneratedAttribute]
public void set_Column(int value);
    [CompilerGeneratedAttribute]
public string get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(string value);
}
internal class LibSassHost.Internal.SassFileContext : SassContextBase {
}
internal class LibSassHost.Internal.SassOptions : object {
    [CompilerGeneratedAttribute]
private string <IncludePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Indent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LineFeed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OmitSourceMapUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private OutputStyle <OutputStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Precision>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SourceComments>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SourceMapContents>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SourceMapEmbed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SourceMapFileUrls>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceMapRoot>k__BackingField;
    public string IncludePath { get; public set; }
    public string Indent { get; public set; }
    public string LineFeed { get; public set; }
    public bool OmitSourceMapUrl { get; public set; }
    public OutputStyle OutputStyle { get; public set; }
    public int Precision { get; public set; }
    public bool SourceComments { get; public set; }
    public bool SourceMapContents { get; public set; }
    public bool SourceMapEmbed { get; public set; }
    public bool SourceMapFileUrls { get; public set; }
    public string SourceMapRoot { get; public set; }
    [CompilerGeneratedAttribute]
public string get_IncludePath();
    [CompilerGeneratedAttribute]
public void set_IncludePath(string value);
    [CompilerGeneratedAttribute]
public string get_Indent();
    [CompilerGeneratedAttribute]
public void set_Indent(string value);
    [CompilerGeneratedAttribute]
public string get_LineFeed();
    [CompilerGeneratedAttribute]
public void set_LineFeed(string value);
    [CompilerGeneratedAttribute]
public bool get_OmitSourceMapUrl();
    [CompilerGeneratedAttribute]
public void set_OmitSourceMapUrl(bool value);
    [CompilerGeneratedAttribute]
public OutputStyle get_OutputStyle();
    [CompilerGeneratedAttribute]
public void set_OutputStyle(OutputStyle value);
    [CompilerGeneratedAttribute]
public int get_Precision();
    [CompilerGeneratedAttribute]
public void set_Precision(int value);
    [CompilerGeneratedAttribute]
public bool get_SourceComments();
    [CompilerGeneratedAttribute]
public void set_SourceComments(bool value);
    [CompilerGeneratedAttribute]
public bool get_SourceMapContents();
    [CompilerGeneratedAttribute]
public void set_SourceMapContents(bool value);
    [CompilerGeneratedAttribute]
public bool get_SourceMapEmbed();
    [CompilerGeneratedAttribute]
public void set_SourceMapEmbed(bool value);
    [CompilerGeneratedAttribute]
public bool get_SourceMapFileUrls();
    [CompilerGeneratedAttribute]
public void set_SourceMapFileUrls(bool value);
    [CompilerGeneratedAttribute]
public string get_SourceMapRoot();
    [CompilerGeneratedAttribute]
public void set_SourceMapRoot(string value);
}
public enum LibSassHost.LineFeedType : Enum {
    public int value__;
    public static LineFeedType Cr;
    public static LineFeedType CrLf;
    public static LineFeedType Lf;
    public static LineFeedType LfCr;
}
public enum LibSassHost.OutputStyle : Enum {
    public int value__;
    public static OutputStyle Nested;
    public static OutputStyle Expanded;
    public static OutputStyle Compact;
    public static OutputStyle Compressed;
}
internal class LibSassHost.Resources.Strings : object {
    private static Lazy`1<ResourceManager> _resourceManager;
    private static CultureInfo _resourceCulture;
    internal static ResourceManager ResourceManager { get; }
    internal static CultureInfo Culture { get; internal set; }
    internal static string Common_ArgumentIsEmpty { get; }
    internal static string Common_ArgumentIsNull { get; }
    internal static string Common_FileNotExist { get; }
    internal static string Common_SeeOriginalErrorMessage { get; }
    internal static string Compiler_AddingDirectoryToDllSearchPathFailed { get; }
    internal static string Compiler_AssemblyNotFound { get; }
    internal static string Compiler_BuildNativeAssemblyForCurrentProcessorArchitecture { get; }
    internal static string Compiler_ManualInstallationUnderMonoRequired { get; }
    internal static string Compiler_NoNuGetPackageForProcessorArchitecture { get; }
    internal static string Compiler_NuGetPackageInstallationRequired { get; }
    internal static string Compiler_OperatingSystemNotSupported { get; }
    internal static string Compiler_SassCompilerNotLoaded { get; }
    internal static string ErrorDetails_ColumnNumber { get; }
    internal static string ErrorDetails_Description { get; }
    internal static string ErrorDetails_ErrorCode { get; }
    internal static string ErrorDetails_File { get; }
    internal static string ErrorDetails_LineNumber { get; }
    internal static string ErrorDetails_Message { get; }
    internal static string ErrorDetails_SourceFragment { get; }
    private static Strings();
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_Common_ArgumentIsEmpty();
    internal static string get_Common_ArgumentIsNull();
    internal static string get_Common_FileNotExist();
    internal static string get_Common_SeeOriginalErrorMessage();
    internal static string get_Compiler_AddingDirectoryToDllSearchPathFailed();
    internal static string get_Compiler_AssemblyNotFound();
    internal static string get_Compiler_BuildNativeAssemblyForCurrentProcessorArchitecture();
    internal static string get_Compiler_ManualInstallationUnderMonoRequired();
    internal static string get_Compiler_NoNuGetPackageForProcessorArchitecture();
    internal static string get_Compiler_NuGetPackageInstallationRequired();
    internal static string get_Compiler_OperatingSystemNotSupported();
    internal static string get_Compiler_SassCompilerNotLoaded();
    internal static string get_ErrorDetails_ColumnNumber();
    internal static string get_ErrorDetails_Description();
    internal static string get_ErrorDetails_ErrorCode();
    internal static string get_ErrorDetails_File();
    internal static string get_ErrorDetails_LineNumber();
    internal static string get_ErrorDetails_Message();
    internal static string get_ErrorDetails_SourceFragment();
    private static string GetString(string name);
}
[ObsoleteAttribute("The name of this class contains a Cyrillic character, so you should use a `SassCompilationException` class instead.")]
public class LibSassHost.SassСompilationException : SassException {
    private int _errorCode;
    private string _file;
    private int _lineNumber;
    private int _columnNumber;
    private string _sourceFragment;
    public int ErrorCode { get; public set; }
    [ObsoleteAttribute("Use a `ErrorCode` property")]
public int Status { get; public set; }
    [ObsoleteAttribute("Use a `Description` property")]
public string Text { get; public set; }
    public string File { get; public set; }
    public int LineNumber { get; public set; }
    public int ColumnNumber { get; public set; }
    public string SourceFragment { get; public set; }
    public SassСompilationException(string message);
    public SassСompilationException(string message, Exception innerException);
    public int get_ErrorCode();
    public void set_ErrorCode(int value);
    public int get_Status();
    public void set_Status(int value);
    public string get_Text();
    public void set_Text(string value);
    public string get_File();
    public void set_File(string value);
    public int get_LineNumber();
    public void set_LineNumber(int value);
    public int get_ColumnNumber();
    public void set_ColumnNumber(int value);
    public string get_SourceFragment();
    public void set_SourceFragment(string value);
}
public class LibSassHost.SassCompilationException : SassException {
    private int _errorCode;
    private string _file;
    private int _lineNumber;
    private int _columnNumber;
    private string _sourceFragment;
    public int ErrorCode { get; public set; }
    [ObsoleteAttribute("Use a `ErrorCode` property")]
public int Status { get; public set; }
    [ObsoleteAttribute("Use a `Description` property")]
public string Text { get; public set; }
    public string File { get; public set; }
    public int LineNumber { get; public set; }
    public int ColumnNumber { get; public set; }
    public string SourceFragment { get; public set; }
    public SassCompilationException(string message);
    public SassCompilationException(string message, Exception innerException);
    public int get_ErrorCode();
    public void set_ErrorCode(int value);
    public int get_Status();
    public void set_Status(int value);
    public string get_Text();
    public void set_Text(string value);
    public string get_File();
    public void set_File(string value);
    public int get_LineNumber();
    public void set_LineNumber(int value);
    public int get_ColumnNumber();
    public void set_ColumnNumber(int value);
    public string get_SourceFragment();
    public void set_SourceFragment(string value);
}
public static class LibSassHost.SassCompiler : object {
    private static string _version;
    private static string _languageVersion;
    private static CompilationOptions _defaultOptions;
    private static IFileManager _fileManager;
    private static object _initializationSynchronizer;
    private static bool _initialized;
    private static Mutex _mutex;
    public static string Version { get; }
    public static string LanguageVersion { get; }
    public static IFileManager FileManager { get; public set; }
    private static SassCompiler();
    public static string get_Version();
    public static string get_LanguageVersion();
    public static IFileManager get_FileManager();
    public static void set_FileManager(IFileManager value);
    private static void Initialize();
    public static CompilationResult Compile(string content, CompilationOptions options);
    public static CompilationResult Compile(string content, bool indentedSyntax, CompilationOptions options);
    public static CompilationResult Compile(string content, string inputPath, string outputPath, string sourceMapPath, CompilationOptions options);
    private static CompilationResult InnerCompile(string content, bool indentedSyntax, string inputPath, string outputPath, string sourceMapPath, CompilationOptions options);
    public static CompilationResult CompileFile(string inputPath, string outputPath, string sourceMapPath, CompilationOptions options);
    private static void BeginCompile(SassContextBase context, bool indentedSyntax, string inputPath, string outputPath, string sourceMapPath, CompilationOptions options);
    private static CompilationResult EndCompile(SassContextBase context);
    private static bool GetIndentedSyntax(string path);
    private static string GetIndentString(IndentType type, int width);
    private static string GetLineFeedString(LineFeedType type);
    private static SassCompilerLoadException WrapDllNotFoundException(DllNotFoundException originalDllNotFoundException);
}
public class LibSassHost.SassCompilerLoadException : SassException {
    public SassCompilerLoadException(string message);
    public SassCompilerLoadException(string message, Exception innerException);
}
public class LibSassHost.SassException : Exception {
    private string _description;
    public string Description { get; public set; }
    public SassException(string message);
    public SassException(string message, Exception innerException);
    public string get_Description();
    public void set_Description(string value);
}
[ExtensionAttribute]
internal static class LibSassHost.Utilities.CharExtensions : object {
    [ExtensionAttribute]
public static bool IsNumeric(char source);
    [ExtensionAttribute]
public static bool IsAlphaLower(char source);
    [ExtensionAttribute]
public static bool IsAlphaUpper(char source);
    [ExtensionAttribute]
public static bool IsAlpha(char source);
    [ExtensionAttribute]
public static bool IsAlphaNumeric(char source);
}
internal static class LibSassHost.Utilities.SourceCodeNavigator : object {
    private static byte DEFAULT_TAB_SIZE;
    private static int DEFAULT_MAX_FRAGMENT_LENGTH;
    private static Char[] _nextLineBreakChars;
    private static Char[] _previousLineBreakChars;
    private static SourceCodeNavigator();
    private static void FindNextLineBreak(string sourceCode, int startPosition, Int32& lineBreakPosition, Int32& lineBreakLength);
    private static void FindNextLineBreak(string sourceCode, int startPosition, int length, Int32& lineBreakPosition, Int32& lineBreakLength);
    private static void FindPreviousLineBreak(string sourceCode, int startPosition, Int32& lineBreakPosition, Int32& lineBreakLength);
    public static void CalculateLineBreakCount(string sourceCode, Int32& lineBreakCount, Int32& charRemainderCount);
    public static void CalculateLineBreakCount(string sourceCode, int fragmentStartPosition, Int32& lineBreakCount, Int32& charRemainderCount);
    public static void CalculateLineBreakCount(string sourceCode, int fragmentStartPosition, int fragmentLength, Int32& lineBreakCount, Int32& charRemainderCount);
    public static SourceCodeNodeCoordinates CalculateNodeCoordinates(string sourceCode, int nodePosition);
    public static string GetSourceFragment(string sourceCode, int nodePosition, byte tabSize, int maxFragmentLength);
    public static string GetSourceFragment(string sourceCode, SourceCodeNodeCoordinates nodeCoordinates, byte tabSize, int maxFragmentLength);
    private static void CalculateCutPositions(string line, int columnNumber, int maxFragmentLength, Int32& fragmentStartPosition, Int32& fragmentLength);
    private static string FormatSourceCodeLine(string line, SourceCodeNodeCoordinates nodeCoordinates, int lineNumberSize, int fragmentStartPosition, int fragmentLength, byte tabSize);
    public static SourceCodeNodeCoordinates CalculateAbsoluteNodeCoordinates(SourceCodeNodeCoordinates baseNodeCoordinates, SourceCodeNodeCoordinates relativeNodeCoordinates);
    public static SourceCodeNodeCoordinates CalculateAbsoluteNodeCoordinates(SourceCodeNodeCoordinates baseNodeCoordinates, string additionalContent);
    public static SourceCodeNodeCoordinates CalculateAbsoluteNodeCoordinates(SourceCodeNodeCoordinates baseNodeCoordinates, int lineBreakCount, int charRemainderCount);
    public static string GetCurrentLine(string sourceCode, int currentPosition, Int32& startLinePosition, Int32& endLinePosition);
}
internal class LibSassHost.Utilities.SourceCodeNodeCoordinates : ValueType {
    private int _lineNumber;
    private int _columnNumber;
    public static SourceCodeNodeCoordinates Empty;
    public int LineNumber { get; public set; }
    public int ColumnNumber { get; public set; }
    public bool IsEmpty { get; }
    public SourceCodeNodeCoordinates(int lineNumber, int columnNumber);
    private static SourceCodeNodeCoordinates();
    public int get_LineNumber();
    public void set_LineNumber(int value);
    public int get_ColumnNumber();
    public void set_ColumnNumber(int value);
    public bool get_IsEmpty();
}
[ExtensionAttribute]
internal static class LibSassHost.Utilities.StringExtensions : object {
    [ExtensionAttribute]
public static bool ContainsQuotedValue(string source, string value);
    [ExtensionAttribute]
public static string TabsToSpaces(string source, int tabSize);
    [ExtensionAttribute]
public static bool TryGetChar(string source, int index, Char& result);
}
internal static class LibSassHost.Utilities.Utils : object {
    private static bool _isMonoRuntime;
    private static Utils();
    public static bool IsMonoRuntime();
    public static bool Is64BitProcess();
}
