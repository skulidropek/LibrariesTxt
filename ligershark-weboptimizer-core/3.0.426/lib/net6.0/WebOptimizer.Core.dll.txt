[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.ApplicationBuilderExtensions : object {
    [ExtensionAttribute]
public static IApplicationBuilder UseWebOptimizer(IApplicationBuilder app, IWebHostEnvironment env, FileProviderOptions[] fileProviderOptions);
    [ExtensionAttribute]
public static IApplicationBuilder UseWebOptimizer(IApplicationBuilder app);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.AssetPipelineExtensions : object {
    [ExtensionAttribute]
public static IAsset Concatenate(IAsset asset);
    [ExtensionAttribute]
public static IEnumerable`1<IAsset> Concatenate(IEnumerable`1<IAsset> assets);
    [ExtensionAttribute]
public static IAsset FingerprintUrls(IAsset bundle);
    [ExtensionAttribute]
public static IEnumerable`1<IAsset> FingerprintUrls(IEnumerable`1<IAsset> assets);
    [ExtensionAttribute]
public static IAsset InlineImages(IAsset bundle, int maxFileSize);
    [ExtensionAttribute]
public static IEnumerable`1<IAsset> InlineImages(IEnumerable`1<IAsset> assets, int maxFileSize);
    [ExtensionAttribute]
public static IEnumerable`1<IAsset> MinifyCssFiles(IAssetPipeline pipeline);
    [ExtensionAttribute]
public static IEnumerable`1<IAsset> MinifyCssFiles(IAssetPipeline pipeline, CssSettings settings);
    [ExtensionAttribute]
public static IEnumerable`1<IAsset> MinifyCssFiles(IAssetPipeline pipeline, String[] sourceFiles);
    [ExtensionAttribute]
public static IEnumerable`1<IAsset> MinifyCssFiles(IAssetPipeline pipeline, CssSettings settings, String[] sourceFiles);
    [ExtensionAttribute]
public static IAsset AddCssBundle(IAssetPipeline pipeline, string route, String[] sourceFiles);
    [ExtensionAttribute]
public static IAsset AddCssBundle(IAssetPipeline pipeline, string route, CssSettings settings, String[] sourceFiles);
    [ExtensionAttribute]
public static IAsset MinifyCss(IAsset asset);
    [ExtensionAttribute]
public static IAsset MinifyCss(IAsset asset, CssSettings settings);
    [ExtensionAttribute]
public static IEnumerable`1<IAsset> MinifyCss(IEnumerable`1<IAsset> assets);
    [ExtensionAttribute]
public static IEnumerable`1<IAsset> MinifyCss(IEnumerable`1<IAsset> assets, CssSettings settings);
    [ExtensionAttribute]
public static IAsset EnforceFileExtensions(IAsset asset, String[] extensions);
    [ExtensionAttribute]
public static IEnumerable`1<IAsset> EnforceFileExtensions(IEnumerable`1<IAsset> assets, String[] extensions);
    [ExtensionAttribute]
public static IEnumerable`1<IAsset> MinifyHtmlFiles(IAssetPipeline pipeline);
    [ExtensionAttribute]
public static IEnumerable`1<IAsset> MinifyHtmlFiles(IAssetPipeline pipeline, HtmlSettings settings);
    [ExtensionAttribute]
public static IEnumerable`1<IAsset> MinifyHtmlFiles(IAssetPipeline pipeline, String[] sourceFiles);
    [ExtensionAttribute]
public static IEnumerable`1<IAsset> MinifyHtmlFiles(IAssetPipeline pipeline, HtmlSettings settings, String[] sourceFiles);
    [ExtensionAttribute]
public static IAsset AddHtmlBundle(IAssetPipeline pipeline, string route, String[] sourceFiles);
    [ExtensionAttribute]
public static IAsset AddHtmlBundle(IAssetPipeline pipeline, string route, HtmlSettings settings, String[] sourceFiles);
    [ExtensionAttribute]
public static IAsset MinifyHtml(IAsset bundle);
    [ExtensionAttribute]
public static IAsset MinifyHtml(IAsset bundle, HtmlSettings settings);
    [ExtensionAttribute]
public static IEnumerable`1<IAsset> MinifyHtml(IEnumerable`1<IAsset> assets);
    [ExtensionAttribute]
public static IEnumerable`1<IAsset> MinifyHtml(IEnumerable`1<IAsset> assets, HtmlSettings settings);
    [ExtensionAttribute]
public static IAsset UseItemContent(IAsset asset);
    [ExtensionAttribute]
public static IEnumerable`1<IAsset> UseItemContent(IEnumerable`1<IAsset> assets);
    [ExtensionAttribute]
public static IEnumerable`1<IAsset> MinifyJsFiles(IAssetPipeline pipeline);
    [ExtensionAttribute]
public static IEnumerable`1<IAsset> MinifyJsFiles(IAssetPipeline pipeline, CodeSettings settings);
    [ExtensionAttribute]
public static IEnumerable`1<IAsset> MinifyJsFiles(IAssetPipeline pipeline, String[] sourceFiles);
    [ExtensionAttribute]
public static IEnumerable`1<IAsset> MinifyJsFiles(IAssetPipeline pipeline, JsSettings settings, String[] sourceFiles);
    [ExtensionAttribute]
public static IAsset AddJavaScriptBundle(IAssetPipeline pipeline, string route, String[] sourceFiles);
    [ExtensionAttribute]
public static IAsset AddJavaScriptBundle(IAssetPipeline pipeline, string route, JsSettings settings, String[] sourceFiles);
    [ExtensionAttribute]
public static IAsset MinifyJavaScript(IAsset asset);
    [ExtensionAttribute]
public static IAsset MinifyJavaScript(IAsset asset, JsSettings settings);
    [ExtensionAttribute]
public static IEnumerable`1<IAsset> MinifyJavaScript(IEnumerable`1<IAsset> assets);
    [ExtensionAttribute]
public static IEnumerable`1<IAsset> MinifyJavaScript(IEnumerable`1<IAsset> assets, JsSettings settings);
    [ExtensionAttribute]
public static IAsset AdjustRelativePaths(IAsset bundle);
    [ExtensionAttribute]
public static IEnumerable`1<IAsset> AdjustRelativePaths(IEnumerable`1<IAsset> assets);
    [ExtensionAttribute]
public static IAsset AddResponseHeader(IAsset bundle, string name, string value);
    [ExtensionAttribute]
public static IEnumerable`1<IAsset> AddResponseHeader(IEnumerable`1<IAsset> assets, string name, string value);
    [ExtensionAttribute]
public static IAsset UseContentRoot(IAsset asset);
    [ExtensionAttribute]
public static IAsset UseFileProvider(IAsset asset, IFileProvider fileProvider);
    [ExtensionAttribute]
internal static IFileProvider GetCustomFileProvider(IAsset asset, IWebHostEnvironment env);
}
public class Microsoft.Extensions.DependencyInjection.CodeBundlingSettings : object {
    [CompilerGeneratedAttribute]
private CodeSettings <CodeSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Minify>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <EnforceFileExtensions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AdjustRelativePaths>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Concatenate>k__BackingField;
    public CodeSettings CodeSettings { get; }
    public bool Minify { get; public set; }
    public String[] EnforceFileExtensions { get; public set; }
    public bool AdjustRelativePaths { get; public set; }
    public bool Concatenate { get; public set; }
    [CompilerGeneratedAttribute]
public CodeSettings get_CodeSettings();
    [CompilerGeneratedAttribute]
public bool get_Minify();
    [CompilerGeneratedAttribute]
public void set_Minify(bool value);
    [CompilerGeneratedAttribute]
public String[] get_EnforceFileExtensions();
    [CompilerGeneratedAttribute]
public void set_EnforceFileExtensions(String[] value);
    [CompilerGeneratedAttribute]
public bool get_AdjustRelativePaths();
    [CompilerGeneratedAttribute]
public void set_AdjustRelativePaths(bool value);
    [CompilerGeneratedAttribute]
public bool get_Concatenate();
    [CompilerGeneratedAttribute]
public void set_Concatenate(bool value);
}
public class Microsoft.Extensions.DependencyInjection.CssBundlingSettings : object {
    [CompilerGeneratedAttribute]
private CssSettings <CssSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Minify>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <EnforceFileExtensions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AdjustRelativePaths>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Concatenate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FingerprintUrls>k__BackingField;
    public CssSettings CssSettings { get; }
    public bool Minify { get; public set; }
    public String[] EnforceFileExtensions { get; public set; }
    public bool AdjustRelativePaths { get; public set; }
    public bool Concatenate { get; public set; }
    public bool FingerprintUrls { get; public set; }
    [CompilerGeneratedAttribute]
public CssSettings get_CssSettings();
    [CompilerGeneratedAttribute]
public bool get_Minify();
    [CompilerGeneratedAttribute]
public void set_Minify(bool value);
    [CompilerGeneratedAttribute]
public String[] get_EnforceFileExtensions();
    [CompilerGeneratedAttribute]
public void set_EnforceFileExtensions(String[] value);
    [CompilerGeneratedAttribute]
public bool get_AdjustRelativePaths();
    [CompilerGeneratedAttribute]
public void set_AdjustRelativePaths(bool value);
    [CompilerGeneratedAttribute]
public bool get_Concatenate();
    [CompilerGeneratedAttribute]
public void set_Concatenate(bool value);
    [CompilerGeneratedAttribute]
public bool get_FingerprintUrls();
    [CompilerGeneratedAttribute]
public void set_FingerprintUrls(bool value);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.ServiceExtensions : object {
    internal static CssBundlingSettings CssBundlingSettings;
    internal static CodeBundlingSettings CodeBundlingSettings;
    private static ServiceExtensions();
    [ExtensionAttribute]
public static IServiceCollection AddWebOptimizer(IServiceCollection services, IWebHostEnvironment env, CssBundlingSettings cssBundlingSettings, CodeBundlingSettings codeBundlingSettings, Action`1<IAssetPipeline> assetPipeline);
    [ExtensionAttribute]
public static IServiceCollection AddWebOptimizer(IServiceCollection services, IWebHostEnvironment env, CssBundlingSettings cssBundlingSettings, CodeBundlingSettings codeBundlingSettings, Action`1<WebOptimizerOptions> configureWebOptimizer, Action`1<IAssetPipeline> assetPipeline);
    [ExtensionAttribute]
public static IServiceCollection AddWebOptimizer(IServiceCollection services, bool minifyJavaScript, bool minifyCss);
    [ExtensionAttribute]
public static IServiceCollection AddWebOptimizer(IServiceCollection services, Action`1<WebOptimizerOptions> configureWebOptimizer, bool minifyJavaScript, bool minifyCss);
    [ExtensionAttribute]
public static IServiceCollection AddWebOptimizer(IServiceCollection services, Action`1<IAssetPipeline> assetPipeline, Action`1<WebOptimizerOptions> configureWebOptimizer);
    [ExtensionAttribute]
public static IServiceCollection AddWebOptimizer(IServiceCollection services, Action`1<IAssetPipeline> assetPipeline);
    [ExtensionAttribute]
private static IServiceCollection RegisterComponents(IServiceCollection services, Action`1<IAssetPipeline> assetPipeline, ServiceDescriptor configureOptions);
    private static void ConfigurePipeline(IAssetPipeline pipeline, bool minifyJavaScript, bool minifyCss);
    private static void UpdateCssAndCodeBundlingSettings(IServiceCollection services, CssBundlingSettings cssBundlingSettings, CodeBundlingSettings codeBundlingSettings);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
internal class WebOptimizer.Asset : object {
    internal static string PhysicalFilesKey;
    private object _sync;
    [CompilerGeneratedAttribute]
private string <Route>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <ExcludeFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <SourceFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IProcessor> <Processors>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Items>k__BackingField;
    public string Route { get; private set; }
    public IList`1<string> ExcludeFiles { get; }
    public HashSet`1<string> SourceFiles { get; }
    public string ContentType { get; private set; }
    public IList`1<IProcessor> Processors { get; }
    public IDictionary`2<string, object> Items { get; }
    public Asset(string route, string contentType, IAssetPipeline pipeline, IEnumerable`1<string> sourceFiles);
    public Asset(string route, string contentType, IEnumerable`1<string> sourceFiles);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Route();
    [CompilerGeneratedAttribute]
private void set_Route(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<string> get_ExcludeFiles();
    [CompilerGeneratedAttribute]
public sealed virtual HashSet`1<string> get_SourceFiles();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ContentType();
    [CompilerGeneratedAttribute]
private void set_ContentType(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<IProcessor> get_Processors();
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, object> get_Items();
    [AsyncStateMachineAttribute("WebOptimizer.Asset/<ExecuteAsync>d__24")]
public sealed virtual Task`1<Byte[]> ExecuteAsync(HttpContext context, IWebOptimizerOptions options);
    public static IEnumerable`1<string> ExpandGlobs(IAsset asset, IWebHostEnvironment env);
    [AsyncStateMachineAttribute("WebOptimizer.Asset/<LoadFileContentAsync>d__26")]
private static Task`1<DateTime> LoadFileContentAsync(IFileProvider fileProvider, AssetContext config, string sourceFile);
    public sealed virtual string GenerateCacheKey(HttpContext context, IWebOptimizerOptions options);
    public virtual string ToString();
    public sealed virtual void TryAddSourceFile(string route);
}
internal class WebOptimizer.AssetBuilder : object {
    private IMemoryCache _cache;
    private ILogger`1<AssetBuilder> _logger;
    private IWebHostEnvironment _env;
    private IAssetResponseStore _assetResponseCache;
    public AssetBuilder(IMemoryCache cache, IAssetResponseStore assetResponseCache, ILogger`1<AssetBuilder> logger, IWebHostEnvironment env);
    [AsyncStateMachineAttribute("WebOptimizer.AssetBuilder/<BuildAsync>d__5")]
public sealed virtual Task`1<IAssetResponse> BuildAsync(IAsset asset, HttpContext context, IWebOptimizerOptions options);
    private void AddToCache(string cacheKey, AssetResponse value, IAsset asset, IWebOptimizerOptions options);
}
internal class WebOptimizer.AssetContext : object {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, Byte[]> <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpContext <HttpContext>k__BackingField;
    [CompilerGeneratedAttribute]
private IAsset <Asset>k__BackingField;
    [CompilerGeneratedAttribute]
private IWebOptimizerOptions <Options>k__BackingField;
    public IDictionary`2<string, Byte[]> Content { get; public set; }
    public HttpContext HttpContext { get; }
    public IAsset Asset { get; }
    public IWebOptimizerOptions Options { get; }
    public AssetContext(HttpContext httpContext, IAsset asset, IWebOptimizerOptions options);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, Byte[]> get_Content();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Content(IDictionary`2<string, Byte[]> value);
    [CompilerGeneratedAttribute]
public sealed virtual HttpContext get_HttpContext();
    [CompilerGeneratedAttribute]
public sealed virtual IAsset get_Asset();
    [CompilerGeneratedAttribute]
public sealed virtual IWebOptimizerOptions get_Options();
}
[ExtensionAttribute]
public static class WebOptimizer.AssetExtensions : object {
    [ExtensionAttribute]
internal static IEnumerable`1<IAsset> AddProcessor(IEnumerable`1<IAsset> assets, Func`2<IAsset, IAsset> processor);
    [ExtensionAttribute]
public static IFileProvider GetFileProvider(IAsset asset, IWebHostEnvironment env);
    [ExtensionAttribute]
public static IFileProvider GetAssetFileProvider(IAsset asset, IWebHostEnvironment env);
    [ExtensionAttribute]
public static IAsset ExcludeFiles(IAsset asset, String[] filesToExclude);
    [ExtensionAttribute]
internal static IFileProvider GetFileProvider(IAsset asset, IWebHostEnvironment env, string path, String& outpath);
    [ExtensionAttribute]
internal static IReadOnlyList`1<string> GetAllFiles(IFileProvider provider, string start);
}
internal class WebOptimizer.AssetMiddleware : object {
    private RequestDelegate _next;
    private IAssetPipeline _pipeline;
    private ILogger _logger;
    private IAssetBuilder _assetBuilder;
    public AssetMiddleware(RequestDelegate next, IAssetPipeline pipeline, ILogger`1<AssetMiddleware> logger, IAssetBuilder assetBuilder);
    public Task InvokeAsync(HttpContext context, IOptionsSnapshot`1<WebOptimizerOptions> options);
    [AsyncStateMachineAttribute("WebOptimizer.AssetMiddleware/<HandleAssetAsync>d__6")]
private Task HandleAssetAsync(HttpContext context, IAsset asset, WebOptimizerOptions options);
    private bool IsConditionalGet(HttpContext context, string cacheKey);
    [AsyncStateMachineAttribute("WebOptimizer.AssetMiddleware/<WriteOutputAsync>d__8")]
private Task WriteOutputAsync(HttpContext context, IAsset asset, IAssetResponse cachedResponse, string cacheKey, WebOptimizerOptions options);
    private static void SetCompressionMode(HttpContext context, IWebOptimizerOptions options);
}
internal class WebOptimizer.AssetPipeline : object {
    internal ConcurrentDictionary`2<string, IAsset> _assets;
    public IReadOnlyList`1<IAsset> Assets { get; }
    public sealed virtual IReadOnlyList`1<IAsset> get_Assets();
    public sealed virtual bool TryGetAssetFromRoute(string route, IAsset& asset);
    public sealed virtual IAsset AddBundle(IAsset asset);
    public sealed virtual IEnumerable`1<IAsset> AddBundle(IEnumerable`1<IAsset> assets);
    public sealed virtual IAsset AddBundle(string route, string contentType, String[] sourceFiles);
    public sealed virtual IAsset AddAsset(string route, string contentType);
    public sealed virtual IEnumerable`1<IAsset> AddFiles(string contentType, String[] sourceFiles);
    public static string NormalizeRoute(string route);
}
internal class WebOptimizer.AssetResponse : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CacheKey>k__BackingField;
    public Dictionary`2<string, string> Headers { get; }
    public Byte[] Body { get; public set; }
    public string CacheKey { get; }
    public AssetResponse(Byte[] body, string cacheKey);
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, string> get_Headers();
    [CompilerGeneratedAttribute]
public sealed virtual Byte[] get_Body();
    [CompilerGeneratedAttribute]
public void set_Body(Byte[] value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_CacheKey();
}
internal class WebOptimizer.AssetResponseStore : object {
    private ILogger`1<AssetResponseStore> _logger;
    private IWebHostEnvironment _env;
    private WebOptimizerOptions _options;
    public AssetResponseStore(ILogger`1<AssetResponseStore> logger, IWebHostEnvironment env, IConfigureOptions`1<WebOptimizerOptions> options);
    [AsyncStateMachineAttribute("WebOptimizer.AssetResponseStore/<AddAsync>d__4")]
public sealed virtual Task AddAsync(string bucket, string cachekey, AssetResponse assetResponse);
    [AsyncStateMachineAttribute("WebOptimizer.AssetResponseStore/<RemoveAsync>d__5")]
public sealed virtual Task RemoveAsync(string bucket, string cachekey);
    public sealed virtual bool TryGet(string bucket, string cachekey, AssetResponse& assetResponse);
    internal AssetResponse ParseJson(string json);
    private string CleanName(string route);
    private string GetPath(string bucket, string cachekey);
    [AsyncStateMachineAttribute("WebOptimizer.AssetResponseStore/<DeleteFileAsync>d__10")]
private Task DeleteFileAsync(string filePath, int attempts);
    [AsyncStateMachineAttribute("WebOptimizer.AssetResponseStore/<WriteFileAsync>d__11")]
private Task WriteFileAsync(string filePath, string content, int attempts);
    [AsyncStateMachineAttribute("WebOptimizer.AssetResponseStore/<TryAsync>d__12")]
private Task TryAsync(int attempts, Func`1<Task> callback);
}
[ExtensionAttribute]
public static class WebOptimizer.ByteExtensions : object {
    [ExtensionAttribute]
public static string AsString(Byte[] bytes);
    [ExtensionAttribute]
public static Byte[] AsByteArray(string text);
    [AsyncStateMachineAttribute("WebOptimizer.ByteExtensions/<AsBytesAsync>d__2")]
[ExtensionAttribute]
public static Task`1<Byte[]> AsBytesAsync(Stream stream);
}
internal class WebOptimizer.CompositeFileProviderExtended : object {
    private IFileProvider _webRootFileProvider;
    private FileProviderOptions[] _fileProviderOptions;
    public CompositeFileProviderExtended(IFileProvider webRootFileProvider, FileProviderOptions[] fileProviderOptions);
    public sealed virtual IDirectoryContents GetDirectoryContents(string subPath);
    public sealed virtual IFileInfo GetFileInfo(string subPath);
    public sealed virtual IChangeToken Watch(string filter);
    internal IFileProvider GetFileProvider(string path, String& outPath);
}
internal class WebOptimizer.Concatenator : Processor {
    public virtual Task ExecuteAsync(IAssetContext context);
}
internal class WebOptimizer.CssFingerprinter : Processor {
    private static Regex _rxUrl;
    private static CssFingerprinter();
    public virtual Task ExecuteAsync(IAssetContext config);
    private static Byte[] Adjust(IAssetContext config, string key, IFileProvider fileProvider);
    private static string GenerateHash(string content);
}
internal class WebOptimizer.CssImageInliner : Processor {
    private static Regex _rxUrl;
    private static int _maxFileSize;
    public CssImageInliner(int maxFileSize);
    private static CssImageInliner();
    [AsyncStateMachineAttribute("WebOptimizer.CssImageInliner/<ExecuteAsync>d__3")]
public virtual Task ExecuteAsync(IAssetContext config);
    [AsyncStateMachineAttribute("WebOptimizer.CssImageInliner/<InlineAsync>d__4")]
private static Task`1<Byte[]> InlineAsync(IAssetContext config, string key, IFileProvider fileProvider);
    [AsyncStateMachineAttribute("WebOptimizer.CssImageInliner/<ReplaceMatch>d__5")]
private static Task`1<string> ReplaceMatch(IAssetContext config, string key, IFileProvider fileProvider, Match match);
    private static string GetMimeTypeFromFileExtension(string file);
}
internal class WebOptimizer.CssMinifier : Processor {
    [CompilerGeneratedAttribute]
private CssSettings <Settings>k__BackingField;
    public CssSettings Settings { get; public set; }
    public CssMinifier(CssSettings settings);
    [CompilerGeneratedAttribute]
public CssSettings get_Settings();
    [CompilerGeneratedAttribute]
public void set_Settings(CssSettings value);
    public virtual Task ExecuteAsync(IAssetContext config);
}
internal class WebOptimizer.EnforceFileExtensions : Processor {
    private IEnumerable`1<string> _extensions;
    public EnforceFileExtensions(IEnumerable`1<string> extensions);
    public virtual Task ExecuteAsync(IAssetContext context);
}
[ExtensionAttribute]
public static class WebOptimizer.Extensions.TagHelperExtensions : object {
    [ExtensionAttribute]
public static bool HandleJsBundle(TagHelperOutput output, IAssetPipeline pipeline, ActionContext actionContext, WebOptimizerOptions options, string src, string bundleKey, string destBundleKey);
    [ExtensionAttribute]
public static bool HandleCssBundle(TagHelperOutput output, IAssetPipeline pipeline, ActionContext actionContext, WebOptimizerOptions options, string href, string bundleKey, string destBundleKey);
}
public class WebOptimizer.FileProviderOptions : object {
    [CompilerGeneratedAttribute]
private PathString <RequestPath>k__BackingField;
    [CompilerGeneratedAttribute]
private IFileProvider <FileProvider>k__BackingField;
    public PathString RequestPath { get; public set; }
    public IFileProvider FileProvider { get; public set; }
    [CompilerGeneratedAttribute]
public PathString get_RequestPath();
    [CompilerGeneratedAttribute]
public void set_RequestPath(PathString value);
    [CompilerGeneratedAttribute]
public IFileProvider get_FileProvider();
    [CompilerGeneratedAttribute]
public void set_FileProvider(IFileProvider value);
}
public class WebOptimizer.FileVersionProvider : object {
    private static string VersionKey;
    private static Char[] QueryStringAndFragmentTokens;
    private IFileProvider _fileProvider;
    private IMemoryCache _cache;
    private PathString _requestPathBase;
    public FileVersionProvider(IFileProvider fileProvider, IMemoryCache cache, PathString requestPathBase);
    private static FileVersionProvider();
    public string AddFileVersionToPath(string path);
    private static string GetHashForFile(IFileInfo fileInfo);
}
internal class WebOptimizer.HtmlMinifier : Processor {
    [CompilerGeneratedAttribute]
private HtmlSettings <Settings>k__BackingField;
    public HtmlSettings Settings { get; public set; }
    public HtmlMinifier(HtmlSettings settings);
    [CompilerGeneratedAttribute]
public HtmlSettings get_Settings();
    [CompilerGeneratedAttribute]
public void set_Settings(HtmlSettings value);
    public virtual Task ExecuteAsync(IAssetContext config);
}
public interface WebOptimizer.IAsset {
    public string ContentType { get; }
    public IList`1<IProcessor> Processors { get; }
    public IDictionary`2<string, object> Items { get; }
    public string Route { get; }
    public IList`1<string> ExcludeFiles { get; }
    public HashSet`1<string> SourceFiles { get; }
    public abstract virtual string get_ContentType();
    public abstract virtual IList`1<IProcessor> get_Processors();
    public abstract virtual IDictionary`2<string, object> get_Items();
    public abstract virtual string get_Route();
    public abstract virtual IList`1<string> get_ExcludeFiles();
    public abstract virtual HashSet`1<string> get_SourceFiles();
    public abstract virtual Task`1<Byte[]> ExecuteAsync(HttpContext context, IWebOptimizerOptions options);
    public abstract virtual string GenerateCacheKey(HttpContext context, IWebOptimizerOptions options);
    public abstract virtual void TryAddSourceFile(string route);
}
public interface WebOptimizer.IAssetBuilder {
    public abstract virtual Task`1<IAssetResponse> BuildAsync(IAsset asset, HttpContext context, IWebOptimizerOptions options);
}
public interface WebOptimizer.IAssetContext {
    public IAsset Asset { get; }
    public IDictionary`2<string, Byte[]> Content { get; public set; }
    public HttpContext HttpContext { get; }
    public IWebOptimizerOptions Options { get; }
    public abstract virtual IAsset get_Asset();
    public abstract virtual IDictionary`2<string, Byte[]> get_Content();
    public abstract virtual void set_Content(IDictionary`2<string, Byte[]> value);
    public abstract virtual HttpContext get_HttpContext();
    public abstract virtual IWebOptimizerOptions get_Options();
}
public interface WebOptimizer.IAssetPipeline {
    public IReadOnlyList`1<IAsset> Assets { get; }
    public abstract virtual IReadOnlyList`1<IAsset> get_Assets();
    public abstract virtual IAsset AddBundle(IAsset asset);
    public abstract virtual IEnumerable`1<IAsset> AddBundle(IEnumerable`1<IAsset> asset);
    public abstract virtual IAsset AddBundle(string route, string contentType, String[] sourceFiles);
    public abstract virtual IAsset AddAsset(string route, string contentType);
    public abstract virtual IEnumerable`1<IAsset> AddFiles(string contentType, String[] sourceFiles);
    public abstract virtual bool TryGetAssetFromRoute(string route, IAsset& asset);
}
public interface WebOptimizer.IAssetResponse {
    public string CacheKey { get; }
    public Byte[] Body { get; }
    public Dictionary`2<string, string> Headers { get; }
    public abstract virtual string get_CacheKey();
    public abstract virtual Byte[] get_Body();
    public abstract virtual Dictionary`2<string, string> get_Headers();
}
internal interface WebOptimizer.IAssetResponseStore {
    public abstract virtual Task AddAsync(string bucket, string cachekey, AssetResponse assetResponse);
    public abstract virtual Task RemoveAsync(string bucket, string cachekey);
    public abstract virtual bool TryGet(string bucket, string cachekey, AssetResponse& assetResponse);
}
internal class WebOptimizer.InCodeWebOptimizerConfig : object {
    private Action`1<WebOptimizerOptions> _configure;
    public InCodeWebOptimizerConfig(Action`1<WebOptimizerOptions> configure);
    public sealed virtual void Configure(WebOptimizerOptions options);
}
public interface WebOptimizer.IProcessor {
    public abstract virtual Task ExecuteAsync(IAssetContext context);
    public abstract virtual string CacheKey(HttpContext context, IAssetContext config);
}
public interface WebOptimizer.IWebOptimizerOptions {
    public Nullable`1<bool> EnableCaching { get; public set; }
    public Nullable`1<bool> EnableMemoryCache { get; public set; }
    public Nullable`1<bool> EnableDiskCache { get; public set; }
    public string CacheDirectory { get; public set; }
    public Nullable`1<bool> EnableTagHelperBundling { get; public set; }
    public string CdnUrl { get; }
    public Nullable`1<bool> AllowEmptyBundle { get; public set; }
    public HttpsCompressionMode HttpsCompression { get; public set; }
    public abstract virtual Nullable`1<bool> get_EnableCaching();
    public abstract virtual void set_EnableCaching(Nullable`1<bool> value);
    public abstract virtual Nullable`1<bool> get_EnableMemoryCache();
    public abstract virtual void set_EnableMemoryCache(Nullable`1<bool> value);
    public abstract virtual Nullable`1<bool> get_EnableDiskCache();
    public abstract virtual void set_EnableDiskCache(Nullable`1<bool> value);
    public abstract virtual string get_CacheDirectory();
    public abstract virtual void set_CacheDirectory(string value);
    public abstract virtual Nullable`1<bool> get_EnableTagHelperBundling();
    public abstract virtual void set_EnableTagHelperBundling(Nullable`1<bool> value);
    public abstract virtual string get_CdnUrl();
    public abstract virtual Nullable`1<bool> get_AllowEmptyBundle();
    public abstract virtual void set_AllowEmptyBundle(Nullable`1<bool> value);
    public abstract virtual HttpsCompressionMode get_HttpsCompression();
    public abstract virtual void set_HttpsCompression(HttpsCompressionMode value);
}
internal class WebOptimizer.JavaScriptMinifier : Processor {
    [CompilerGeneratedAttribute]
private JsSettings <Settings>k__BackingField;
    public JsSettings Settings { get; public set; }
    public JavaScriptMinifier(JsSettings settings);
    [CompilerGeneratedAttribute]
public JsSettings get_Settings();
    [CompilerGeneratedAttribute]
public void set_Settings(JsSettings value);
    public virtual Task ExecuteAsync(IAssetContext config);
}
[ExtensionAttribute]
internal static class WebOptimizer.LoggerExtensions : object {
    private static Action`3<ILogger, string, Exception> _logRequestForAssetStarted;
    private static Action`3<ILogger, string, Exception> _logServedFromMemoryCache;
    private static Action`3<ILogger, string, Exception> _logServedFromDiskCache;
    private static Action`3<ILogger, string, Exception> _logGeneratedOutput;
    private static Action`3<ILogger, string, Exception> _logZeroByteResponse;
    private static Action`3<ILogger, string, Exception> _logFileNotFound;
    private static LoggerExtensions();
    [ExtensionAttribute]
public static void LogRequestForAssetStarted(ILogger logger, string path);
    [ExtensionAttribute]
public static void LogServedFromMemoryCache(ILogger logger, string path);
    [ExtensionAttribute]
public static void LogServedFromDiskCache(ILogger logger, string path);
    [ExtensionAttribute]
public static void LogGeneratedOutput(ILogger logger, string path);
    [ExtensionAttribute]
public static void LogZeroByteResponse(ILogger logger, string path);
    [ExtensionAttribute]
public static void LogFileNotFound(ILogger logger, string path);
}
public abstract class WebOptimizer.Processor : object {
    public virtual string CacheKey(HttpContext context, IAssetContext config);
    public abstract virtual Task ExecuteAsync(IAssetContext context);
}
internal class WebOptimizer.Processors.ItemContentEmitter : Processor {
    public virtual Task ExecuteAsync(IAssetContext context);
}
public class WebOptimizer.Processors.JsSettings : object {
    [CompilerGeneratedAttribute]
private bool <GenerateSourceMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IAsset <PipelineSourceMap>k__BackingField;
    [CompilerGeneratedAttribute]
private CodeSettings <CodeSettings>k__BackingField;
    public bool GenerateSourceMap { get; public set; }
    public IAsset PipelineSourceMap { get; public set; }
    public CodeSettings CodeSettings { get; public set; }
    public JsSettings(CodeSettings nuglifyCodeSettings);
    [CompilerGeneratedAttribute]
public bool get_GenerateSourceMap();
    [CompilerGeneratedAttribute]
public void set_GenerateSourceMap(bool value);
    [CompilerGeneratedAttribute]
public IAsset get_PipelineSourceMap();
    [CompilerGeneratedAttribute]
public void set_PipelineSourceMap(IAsset value);
    [CompilerGeneratedAttribute]
public CodeSettings get_CodeSettings();
    [CompilerGeneratedAttribute]
public void set_CodeSettings(CodeSettings value);
}
internal class WebOptimizer.RelativePathAdjuster : Processor {
    private static Regex _rxUrl;
    private static string _protocol;
    private static RelativePathAdjuster();
    public virtual Task ExecuteAsync(IAssetContext config);
    private static Byte[] Adjust(IAssetContext config, string key);
    private static string MakeRelative(string baseFile, string file);
}
internal class WebOptimizer.ResponseHeader : Processor {
    private string _name;
    private string _value;
    public ResponseHeader(string name, string value);
    public virtual Task ExecuteAsync(IAssetContext config);
}
public abstract class WebOptimizer.Taghelpers.BaseTagHelper : TagHelper {
    private FileVersionProvider _fileProvider;
    [CompilerGeneratedAttribute]
private IWebHostEnvironment <HostingEnvironment>k__BackingField;
    [CompilerGeneratedAttribute]
private IMemoryCache <Cache>k__BackingField;
    [CompilerGeneratedAttribute]
private IAssetPipeline <Pipeline>k__BackingField;
    [CompilerGeneratedAttribute]
private IWebOptimizerOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private ViewContext <ViewContext>k__BackingField;
    protected IWebHostEnvironment HostingEnvironment { get; }
    protected IMemoryCache Cache { get; }
    protected IAssetPipeline Pipeline { get; }
    protected IWebOptimizerOptions Options { get; }
    public int Order { get; }
    [ViewContextAttribute]
[HtmlAttributeNotBoundAttribute]
public ViewContext ViewContext { get; public set; }
    public BaseTagHelper(IWebHostEnvironment env, IMemoryCache cache, IAssetPipeline pipeline, IOptionsMonitor`1<WebOptimizerOptions> options);
    [CompilerGeneratedAttribute]
protected IWebHostEnvironment get_HostingEnvironment();
    [CompilerGeneratedAttribute]
protected IMemoryCache get_Cache();
    [CompilerGeneratedAttribute]
protected IAssetPipeline get_Pipeline();
    [CompilerGeneratedAttribute]
protected IWebOptimizerOptions get_Options();
    public virtual int get_Order();
    [CompilerGeneratedAttribute]
public ViewContext get_ViewContext();
    [CompilerGeneratedAttribute]
public void set_ViewContext(ViewContext value);
    protected static string GetQuote(HtmlAttributeValueStyle style);
    protected string AddFileVersionToPath(string fileName, IAsset asset);
    protected string AddPathBase(string url);
    protected string GenerateHash(IAsset asset);
    protected void AddToCache(string cacheKey, string value, IFileProvider fileProvider, String[] files);
    protected string AddCdn(string url);
}
[HtmlTargetElementAttribute("link")]
public class WebOptimizer.Taghelpers.LinkInlineHrefTagHelper : BaseTagHelper {
    private IAssetBuilder _builder;
    [CompilerGeneratedAttribute]
private string <Href>k__BackingField;
    public int Order { get; }
    public string Href { get; public set; }
    public LinkInlineHrefTagHelper(IWebHostEnvironment env, IMemoryCache cache, IAssetPipeline pipeline, IOptionsMonitor`1<WebOptimizerOptions> options, IAssetBuilder builder);
    public virtual int get_Order();
    [CompilerGeneratedAttribute]
public string get_Href();
    [CompilerGeneratedAttribute]
public void set_Href(string value);
    [AsyncStateMachineAttribute("WebOptimizer.Taghelpers.LinkInlineHrefTagHelper/<ProcessAsync>d__8")]
public virtual Task ProcessAsync(TagHelperContext context, TagHelperOutput output);
    private TagHelperAttribute GetScoped(TagHelperOutput output);
    [AsyncStateMachineAttribute("WebOptimizer.Taghelpers.LinkInlineHrefTagHelper/<GetFileContentAsync>d__10")]
private Task`1<string> GetFileContentAsync(string route);
}
[HtmlTargetElementAttribute("link")]
[HtmlTargetElementAttribute("link")]
[HtmlTargetElementAttribute("link")]
public class WebOptimizer.Taghelpers.LinkTagHelper : BaseTagHelper {
    [CompilerGeneratedAttribute]
private ViewContext <CurrentViewContext>k__BackingField;
    [HtmlAttributeNotBoundAttribute]
[ViewContextAttribute]
public ViewContext CurrentViewContext { get; public set; }
    public LinkTagHelper(IWebHostEnvironment env, IMemoryCache cache, IAssetPipeline pipeline, IOptionsMonitor`1<WebOptimizerOptions> options);
    [CompilerGeneratedAttribute]
public ViewContext get_CurrentViewContext();
    [CompilerGeneratedAttribute]
public void set_CurrentViewContext(ViewContext value);
    public virtual void Process(TagHelperContext context, TagHelperOutput output);
    private void WriteIndividualTags(TagHelperOutput output, IAsset asset);
    internal static string GetValue(string attrName, TagHelperOutput output);
}
[HtmlTargetElementAttribute("script")]
public class WebOptimizer.Taghelpers.ScriptInlineSrcTagHelper : BaseTagHelper {
    private IAssetBuilder _builder;
    [CompilerGeneratedAttribute]
private string <Src>k__BackingField;
    public int Order { get; }
    public string Src { get; public set; }
    public ScriptInlineSrcTagHelper(IWebHostEnvironment env, IMemoryCache cache, IAssetPipeline pipeline, IOptionsMonitor`1<WebOptimizerOptions> options, IAssetBuilder builder);
    public virtual int get_Order();
    [CompilerGeneratedAttribute]
public string get_Src();
    [CompilerGeneratedAttribute]
public void set_Src(string value);
    [AsyncStateMachineAttribute("WebOptimizer.Taghelpers.ScriptInlineSrcTagHelper/<ProcessAsync>d__8")]
public virtual Task ProcessAsync(TagHelperContext context, TagHelperOutput output);
    [AsyncStateMachineAttribute("WebOptimizer.Taghelpers.ScriptInlineSrcTagHelper/<GetFileContentAsync>d__9")]
protected Task`1<string> GetFileContentAsync(string route);
}
[HtmlTargetElementAttribute("script")]
public class WebOptimizer.Taghelpers.ScriptTagHelper : BaseTagHelper {
    [CompilerGeneratedAttribute]
private ViewContext <CurrentViewContext>k__BackingField;
    [HtmlAttributeNotBoundAttribute]
[ViewContextAttribute]
public ViewContext CurrentViewContext { get; public set; }
    public ScriptTagHelper(IWebHostEnvironment env, IMemoryCache cache, IAssetPipeline pipeline, IOptionsMonitor`1<WebOptimizerOptions> options);
    [CompilerGeneratedAttribute]
public ViewContext get_CurrentViewContext();
    [CompilerGeneratedAttribute]
public void set_CurrentViewContext(ViewContext value);
    public virtual void Process(TagHelperContext context, TagHelperOutput output);
    private void WriteIndividualTags(TagHelperOutput output, IAsset asset);
}
internal static class WebOptimizer.TagHelpersDynamic.Helpers : object {
    private static ConcurrentDictionary`2<string, IAsset> _assetCache;
    private static Concatenator Concatenator;
    private static String[] EmptySourceFiles;
    private static Helpers();
    private static string GetKey(ActionContext actionContext, string key);
    internal static IAsset CreateCssAsset(IAssetPipeline pipeline, string key);
    internal static IAsset CreateJsAsset(IAssetPipeline pipeline, string key);
    private static IAsset AddBundleByKey(IAssetPipeline pipeline, string route, string contentType);
    private static string GenerateHash(IAsset asset, HttpContext httpContext, IWebOptimizerOptions options);
    internal static bool HandleBundle(Func`3<IAssetPipeline, string, IAsset> createAsset, IAssetPipeline pipeline, TagHelperOutput output, ActionContext actionContext, WebOptimizerOptions options, string attrName, string attrValue, string bundleKey, string destBundleKey);
}
[HtmlTargetElementAttribute]
[HtmlTargetElementAttribute]
[HtmlTargetElementAttribute]
[HtmlTargetElementAttribute]
[HtmlTargetElementAttribute]
[HtmlTargetElementAttribute]
[HtmlTargetElementAttribute]
[HtmlTargetElementAttribute]
[HtmlTargetElementAttribute]
[HtmlTargetElementAttribute("link")]
[HtmlTargetElementAttribute("link")]
public class WebOptimizer.TagHelpersDynamic.LinkTagHelper : LinkTagHelper {
    private static string TagName;
    private static string HrefIncludeAttributeName;
    private static string HrefExcludeAttributeName;
    private static string FallbackHrefAttributeName;
    private static string FallbackHrefIncludeAttributeName;
    private static string FallbackHrefExcludeAttributeName;
    private static string FallbackTestClassAttributeName;
    private static string FallbackTestPropertyAttributeName;
    private static string FallbackTestValueAttributeName;
    private static string AppendVersionAttributeName;
    private static string BundleDestinationKeyName;
    private static string BundleKeyName;
    private WebOptimizerOptions _webOptimizerOptions;
    private IAssetPipeline _pipeline;
    [CompilerGeneratedAttribute]
private string <BundleKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BundleDestinationKey>k__BackingField;
    [HtmlAttributeNameAttribute("asp-bundle-key")]
public string BundleKey { get; public set; }
    [HtmlAttributeNameAttribute("asp-bundle-dest-key")]
public string BundleDestinationKey { get; public set; }
    public LinkTagHelper(IAssetPipeline pipeline, IWebHostEnvironment hostingEnvironment, TagHelperMemoryCacheProvider cache, IFileVersionProvider fileVersionProvider, HtmlEncoder htmlEncoder, JavaScriptEncoder javaScriptEncoder, IUrlHelperFactory urlHelperFactory, IOptionsSnapshot`1<WebOptimizerOptions> webOptimizerOptions);
    [CompilerGeneratedAttribute]
public string get_BundleKey();
    [CompilerGeneratedAttribute]
public void set_BundleKey(string value);
    [CompilerGeneratedAttribute]
public string get_BundleDestinationKey();
    [CompilerGeneratedAttribute]
public void set_BundleDestinationKey(string value);
    public virtual void Process(TagHelperContext context, TagHelperOutput output);
}
[HtmlTargetElementAttribute("style")]
[HtmlTargetElementAttribute("script")]
public class WebOptimizer.TagHelpersDynamic.MinifyOnDemandTagHelper : BaseTagHelper {
    public MinifyOnDemandTagHelper(IWebHostEnvironment env, IMemoryCache cache, IAssetPipeline pipeline, IOptionsMonitor`1<WebOptimizerOptions> options);
    [AsyncStateMachineAttribute("WebOptimizer.TagHelpersDynamic.MinifyOnDemandTagHelper/<ProcessAsync>d__1")]
public virtual Task ProcessAsync(TagHelperContext context, TagHelperOutput output);
}
[HtmlTargetElementAttribute("script")]
[HtmlTargetElementAttribute("script")]
[HtmlTargetElementAttribute("script")]
[HtmlTargetElementAttribute("script")]
[HtmlTargetElementAttribute("script")]
[HtmlTargetElementAttribute("script")]
[HtmlTargetElementAttribute("script")]
[HtmlTargetElementAttribute("script")]
[HtmlTargetElementAttribute("script")]
public class WebOptimizer.TagHelpersDynamic.ScriptTagHelper : ScriptTagHelper {
    private static string TagName;
    private static string SrcIncludeAttributeName;
    private static string SrcExcludeAttributeName;
    private static string FallbackSrcAttributeName;
    private static string FallbackSrcIncludeAttributeName;
    private static string FallbackSrcExcludeAttributeName;
    private static string FallbackTestExpressionAttributeName;
    private static string AppendVersionAttributeName;
    private static string BundleDestinationKeyName;
    private static string BundleKeyName;
    private WebOptimizerOptions _webOptimizerOptions;
    private IAssetPipeline _pipeline;
    [CompilerGeneratedAttribute]
private string <BundleKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BundleDestinationKey>k__BackingField;
    [HtmlAttributeNameAttribute("asp-bundle-key")]
public string BundleKey { get; public set; }
    [HtmlAttributeNameAttribute("asp-bundle-dest-key")]
public string BundleDestinationKey { get; public set; }
    public ScriptTagHelper(IAssetPipeline pipeline, IWebHostEnvironment hostingEnvironment, TagHelperMemoryCacheProvider cache, IFileVersionProvider fileVersionProvider, HtmlEncoder htmlEncoder, JavaScriptEncoder javaScriptEncoder, IUrlHelperFactory urlHelperFactory, IOptionsSnapshot`1<WebOptimizerOptions> webOptimizerOptions);
    [CompilerGeneratedAttribute]
public string get_BundleKey();
    [CompilerGeneratedAttribute]
public void set_BundleKey(string value);
    [CompilerGeneratedAttribute]
public string get_BundleDestinationKey();
    [CompilerGeneratedAttribute]
public void set_BundleDestinationKey(string value);
    public virtual void Process(TagHelperContext context, TagHelperOutput output);
}
internal class WebOptimizer.UseContentRoot : Processor {
    public virtual Task ExecuteAsync(IAssetContext context);
}
public static class WebOptimizer.Utils.UrlPathUtils : object {
    public static bool IsAbsolutePath(string path);
    public static string Normalize(string path);
    public static bool TryNormalize(string path, String& normalizedPath);
    public static string MakeAbsolute(string basePath, string path);
    public static bool TryMakeAbsolute(string basePath, string path, String& absolutePath);
    public static string MakeAbsolutePathFromInclude(string appPath, string contentPath, string includePath);
    public static bool TryMakeAbsolutePathFromInclude(string appPath, string contentPath, string includePath, String& absolutePath);
    public static string GetDirectory(string path);
    public static string GetFileName(string path);
}
internal class WebOptimizer.WebOptimizerConfig : object {
    private IConfiguration _config;
    private IOptionsMonitorCache`1<WebOptimizerOptions> _options;
    private IWebHostEnvironment _hostingEnvironment;
    private IDisposable _callback;
    private bool _disposedValue;
    public WebOptimizerConfig(IConfiguration config, IOptionsMonitorCache`1<WebOptimizerOptions> options, IWebHostEnvironment hostingEnvironment);
    public sealed virtual void Configure(WebOptimizerOptions options);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private void <Configure>b__6_0(object _);
}
public class WebOptimizer.WebOptimizerOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <EnableCaching>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <EnableMemoryCache>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <EnableDiskCache>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <EnableTagHelperBundling>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CdnUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CacheDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AllowEmptyBundle>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpsCompressionMode <HttpsCompression>k__BackingField;
    public Nullable`1<bool> EnableCaching { get; public set; }
    public Nullable`1<bool> EnableMemoryCache { get; public set; }
    public Nullable`1<bool> EnableDiskCache { get; public set; }
    public Nullable`1<bool> EnableTagHelperBundling { get; public set; }
    public string CdnUrl { get; public set; }
    public string CacheDirectory { get; public set; }
    public Nullable`1<bool> AllowEmptyBundle { get; public set; }
    public HttpsCompressionMode HttpsCompression { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<bool> get_EnableCaching();
    [CompilerGeneratedAttribute]
public sealed virtual void set_EnableCaching(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<bool> get_EnableMemoryCache();
    [CompilerGeneratedAttribute]
public sealed virtual void set_EnableMemoryCache(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<bool> get_EnableDiskCache();
    [CompilerGeneratedAttribute]
public sealed virtual void set_EnableDiskCache(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<bool> get_EnableTagHelperBundling();
    [CompilerGeneratedAttribute]
public sealed virtual void set_EnableTagHelperBundling(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_CdnUrl();
    [CompilerGeneratedAttribute]
public void set_CdnUrl(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_CacheDirectory();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CacheDirectory(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<bool> get_AllowEmptyBundle();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AllowEmptyBundle(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual HttpsCompressionMode get_HttpsCompression();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HttpsCompression(HttpsCompressionMode value);
}
