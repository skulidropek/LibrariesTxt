public interface IExecutionScope {
}
[FlagsAttribute]
internal enum JetBrains.Annotations.ImplicitUseKindFlags : Enum {
    public int value__;
    public static ImplicitUseKindFlags Default;
    public static ImplicitUseKindFlags Access;
    public static ImplicitUseKindFlags Assign;
    public static ImplicitUseKindFlags InstantiatedWithFixedConstructorSignature;
    public static ImplicitUseKindFlags InstantiatedNoFixedConstructorSignature;
}
[FlagsAttribute]
internal enum JetBrains.Annotations.ImplicitUseTargetFlags : Enum {
    public int value__;
    public static ImplicitUseTargetFlags Default;
    public static ImplicitUseTargetFlags Itself;
    public static ImplicitUseTargetFlags Members;
    public static ImplicitUseTargetFlags WithMembers;
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.InstantHandleAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <RequireAwait>k__BackingField;
    public bool RequireAwait { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_RequireAwait();
    [CompilerGeneratedAttribute]
public void set_RequireAwait(bool value);
}
[AttributeUsageAttribute("64")]
internal class JetBrains.Annotations.LinqTunnelAttribute : Attribute {
}
[AttributeUsageAttribute("18436")]
internal class JetBrains.Annotations.MeansImplicitUseAttribute : Attribute {
    [CompilerGeneratedAttribute]
private ImplicitUseKindFlags <UseKindFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private ImplicitUseTargetFlags <TargetFlags>k__BackingField;
    [UsedImplicitlyAttribute]
public ImplicitUseKindFlags UseKindFlags { get; private set; }
    [UsedImplicitlyAttribute]
public ImplicitUseTargetFlags TargetFlags { get; private set; }
    public MeansImplicitUseAttribute(ImplicitUseKindFlags useKindFlags);
    public MeansImplicitUseAttribute(ImplicitUseTargetFlags targetFlags);
    public MeansImplicitUseAttribute(ImplicitUseKindFlags useKindFlags, ImplicitUseTargetFlags targetFlags);
    [CompilerGeneratedAttribute]
public ImplicitUseKindFlags get_UseKindFlags();
    [CompilerGeneratedAttribute]
private void set_UseKindFlags(ImplicitUseKindFlags value);
    [CompilerGeneratedAttribute]
public ImplicitUseTargetFlags get_TargetFlags();
    [CompilerGeneratedAttribute]
private void set_TargetFlags(ImplicitUseTargetFlags value);
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.NoEnumerationAttribute : Attribute {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[MeansImplicitUseAttribute("3")]
[AttributeUsageAttribute("32767")]
internal class JetBrains.Annotations.PublicAPIAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Comment>k__BackingField;
    public string Comment { get; private set; }
    [NullableContextAttribute("1")]
public PublicAPIAttribute(string comment);
    [CompilerGeneratedAttribute]
public string get_Comment();
    [CompilerGeneratedAttribute]
private void set_Comment(string value);
}
[AttributeUsageAttribute("64")]
internal class JetBrains.Annotations.PureAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4320")]
internal class JetBrains.Annotations.StringFormatMethodAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <FormatParameterName>k__BackingField;
    public string FormatParameterName { get; private set; }
    public StringFormatMethodAttribute(string formatParameterName);
    [CompilerGeneratedAttribute]
public string get_FormatParameterName();
    [CompilerGeneratedAttribute]
private void set_FormatParameterName(string value);
}
[AttributeUsageAttribute("32767")]
internal class JetBrains.Annotations.UsedImplicitlyAttribute : Attribute {
    [CompilerGeneratedAttribute]
private ImplicitUseKindFlags <UseKindFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private ImplicitUseTargetFlags <TargetFlags>k__BackingField;
    public ImplicitUseKindFlags UseKindFlags { get; private set; }
    public ImplicitUseTargetFlags TargetFlags { get; private set; }
    public UsedImplicitlyAttribute(ImplicitUseKindFlags useKindFlags);
    public UsedImplicitlyAttribute(ImplicitUseTargetFlags targetFlags);
    public UsedImplicitlyAttribute(ImplicitUseKindFlags useKindFlags, ImplicitUseTargetFlags targetFlags);
    [CompilerGeneratedAttribute]
public ImplicitUseKindFlags get_UseKindFlags();
    [CompilerGeneratedAttribute]
private void set_UseKindFlags(ImplicitUseKindFlags value);
    [CompilerGeneratedAttribute]
public ImplicitUseTargetFlags get_TargetFlags();
    [CompilerGeneratedAttribute]
private void set_TargetFlags(ImplicitUseTargetFlags value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[PublicAPIAttribute]
public static class LinqToDB.AnalyticFunctions : object {
    public static string FunctionToken;
    private static string GetNullsStr(Nulls nulls);
    private static string GetFromStr(From from);
    [ExtensionAttribute]
[ExtensionAttribute("{function} FILTER (WHERE {filter})")]
public static IAnalyticFunctionWithoutWindow`1<T> Filter(IAnalyticFunctionWithoutWindow`1<T> func, bool filter);
    [ExtensionAttribute]
[ExtensionAttribute("AVG({modifier?}{_}{expr})")]
public static double Average(IEnumerable`1<TEntity> source, Func`2<TEntity, TV> expr, AggregateModifier modifier);
    [ExtensionAttribute]
[ExtensionAttribute("AVG({modifier?}{_}{expr})")]
public static double Average(IQueryable`1<TEntity> source, Expression`1<Func`2<TEntity, TV>> expr, AggregateModifier modifier);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[ExtensionAttribute("AVG({expr})")]
public static IAggregateFunctionSelfContained`1<T> Average(ISqlExtension ext, object expr);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[ExtensionAttribute("AVG({modifier?}{_}{expr})")]
public static IAggregateFunctionSelfContained`1<T> Average(ISqlExtension ext, object expr, AggregateModifier modifier);
    [ExtensionAttribute]
[ExtensionAttribute("CORR({expr1}, {expr2})")]
public static decimal Corr(IEnumerable`1<T> source, Expression`1<Func`2<T, object>> expr1, Expression`1<Func`2<T, object>> expr2);
    [ExtensionAttribute]
[ExtensionAttribute("CORR({expr1}, {expr2})")]
public static decimal Corr(IQueryable`1<TEntity> source, Expression`1<Func`2<TEntity, object>> expr1, Expression`1<Func`2<TEntity, object>> expr2);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[ExtensionAttribute("CORR({expr1}, {expr2})")]
public static IAggregateFunctionSelfContained`1<T> Corr(ISqlExtension ext, object expr1, object expr2);
    [ExtensionAttribute]
[ExtensionAttribute("COUNT({expr})")]
public static int CountExt(IEnumerable`1<TEntity> source, Func`2<TEntity, object> expr);
    [ExtensionAttribute]
[ExtensionAttribute("COUNT({modifier?}{_}{expr})")]
public static int CountExt(IEnumerable`1<TEntity> source, Func`2<TEntity, TV> expr, AggregateModifier modifier);
    [ExtensionAttribute]
[ExtensionAttribute("COUNT({modifier?}{_}{expr})")]
public static int CountExt(IQueryable`1<TEntity> source, Expression`1<Func`2<TEntity, TV>> expr);
    [ExtensionAttribute]
[ExtensionAttribute("COUNT({modifier?}{_}{expr})")]
public static int CountExt(IQueryable`1<TEntity> source, Expression`1<Func`2<TEntity, TV>> expr, AggregateModifier modifier);
    [ExtensionAttribute]
[ExtensionAttribute("COUNT(*)")]
public static IAggregateFunctionSelfContained`1<int> Count(ISqlExtension ext);
    [ExtensionAttribute]
[ExtensionAttribute("COUNT({expr})")]
public static IAggregateFunctionSelfContained`1<int> Count(ISqlExtension ext, T expr);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[ExtensionAttribute("COUNT({modifier?}{_}{expr})")]
public static IAggregateFunctionSelfContained`1<int> Count(ISqlExtension ext, object expr, AggregateModifier modifier);
    [ExtensionAttribute]
[ExtensionAttribute("COUNT({expr})")]
public static long LongCountExt(IEnumerable`1<TEntity> source, Func`2<TEntity, object> expr);
    [ExtensionAttribute]
[ExtensionAttribute("COUNT({modifier?}{_}{expr})")]
public static long LongCountExt(IEnumerable`1<TEntity> source, Func`2<TEntity, TV> expr, AggregateModifier modifier);
    [ExtensionAttribute]
[ExtensionAttribute("COUNT({modifier?}{_}{expr})")]
public static long LongCountExt(IQueryable`1<TEntity> source, Expression`1<Func`2<TEntity, TV>> expr, AggregateModifier modifier);
    [ExtensionAttribute]
[ExtensionAttribute("COUNT(*)")]
public static IAggregateFunctionSelfContained`1<long> LongCount(ISqlExtension ext);
    [ExtensionAttribute]
[ExtensionAttribute("COUNT({expr})")]
public static IAggregateFunctionSelfContained`1<long> LongCount(ISqlExtension ext, T expr);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[ExtensionAttribute("COUNT({modifier?}{_}{expr})")]
public static IAggregateFunctionSelfContained`1<long> LongCount(ISqlExtension ext, object expr, AggregateModifier modifier);
    [ExtensionAttribute]
[ExtensionAttribute("COVAR_POP({expr1}, {expr2})")]
public static decimal CovarPop(IEnumerable`1<T> source, Expression`1<Func`2<T, object>> expr1, Expression`1<Func`2<T, object>> expr2);
    [ExtensionAttribute]
[ExtensionAttribute("COVAR_POP({expr1}, {expr2})")]
public static decimal CovarPop(IQueryable`1<TEntity> source, Expression`1<Func`2<TEntity, object>> expr1, Expression`1<Func`2<TEntity, object>> expr2);
    [ExtensionAttribute]
[ExtensionAttribute("COVAR_POP({expr1}, {expr2})")]
public static IAggregateFunctionSelfContained`1<T> CovarPop(ISqlExtension ext, T expr1, T expr2);
    [ExtensionAttribute]
[ExtensionAttribute("COVAR_SAMP({expr1}, {expr2})")]
public static decimal CovarSamp(IEnumerable`1<T> source, Expression`1<Func`2<T, object>> expr1, Expression`1<Func`2<T, object>> expr2);
    [ExtensionAttribute]
[ExtensionAttribute("COVAR_SAMP({expr1}, {expr2})")]
public static decimal CovarSamp(IQueryable`1<TEntity> source, Expression`1<Func`2<TEntity, object>> expr1, Expression`1<Func`2<TEntity, object>> expr2);
    [ExtensionAttribute]
[ExtensionAttribute("COVAR_SAMP({expr1}, {expr2})")]
public static IAggregateFunctionSelfContained`1<T> CovarSamp(ISqlExtension ext, T expr1, T expr2);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[ExtensionAttribute("CUME_DIST({expr, ', '}) {within_group}")]
public static INeedsWithinGroupWithOrderOnly`1<TR> CumeDist(ISqlExtension ext, Object[] expr);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[ExtensionAttribute("CUME_DIST()")]
public static IAnalyticFunctionWithoutWindow`1<TR> CumeDist(ISqlExtension ext);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[ExtensionAttribute("DENSE_RANK({expr1}, {expr2}) {within_group}")]
public static INeedsWithinGroupWithOrderOnly`1<long> DenseRank(ISqlExtension ext, object expr1, object expr2);
    [ExtensionAttribute]
[ExtensionAttribute("DENSE_RANK()")]
public static IAnalyticFunctionWithoutWindow`1<long> DenseRank(ISqlExtension ext);
    [ExtensionAttribute]
[ExtensionAttribute("FIRST_VALUE({expr}){_}{modifier?}")]
[ExtensionAttribute("FIRST_VALUE({expr}{_}{modifier?})")]
public static IAggregateFunctionSelfContained`1<T> FirstValue(ISqlExtension ext, T expr, Nulls nulls);
    [ExtensionAttribute]
[ExtensionAttribute("LAG({expr}{_}{modifier?})")]
public static IAnalyticFunctionWithoutWindow`1<T> Lag(ISqlExtension ext, T expr, Nulls nulls);
    [ExtensionAttribute]
[ExtensionAttribute("LAG({expr})")]
public static IAnalyticFunctionWithoutWindow`1<T> Lag(ISqlExtension ext, T expr);
    [ExtensionAttribute]
[ExtensionAttribute("LAG({expr}, {offset})")]
public static IAnalyticFunctionWithoutWindow`1<T> Lag(ISqlExtension ext, T expr, int offset);
    [ExtensionAttribute]
[ExtensionAttribute("LAG({expr}, {offset}, {default})")]
public static IAnalyticFunctionWithoutWindow`1<T> Lag(ISqlExtension ext, T expr, int offset, T default);
    [ExtensionAttribute]
[ExtensionAttribute("LAG({expr}{_}{modifier?}, {offset}, {default})")]
public static IAnalyticFunctionWithoutWindow`1<T> Lag(ISqlExtension ext, T expr, Nulls nulls, int offset, T default);
    [ExtensionAttribute]
[ExtensionAttribute("LAST_VALUE({expr}){_}{modifier?}")]
[ExtensionAttribute("LAST_VALUE({expr}{_}{modifier?})")]
public static IAggregateFunctionSelfContained`1<T> LastValue(ISqlExtension ext, T expr, Nulls nulls);
    [ExtensionAttribute]
[ExtensionAttribute("LEAD({expr}{_}{modifier?})")]
public static IAnalyticFunctionWithoutWindow`1<T> Lead(ISqlExtension ext, T expr, Nulls nulls);
    [ExtensionAttribute]
[ExtensionAttribute("LEAD({expr})")]
public static IAnalyticFunctionWithoutWindow`1<T> Lead(ISqlExtension ext, T expr);
    [ExtensionAttribute]
[ExtensionAttribute("LEAD({expr}, {offset})")]
public static IAnalyticFunctionWithoutWindow`1<T> Lead(ISqlExtension ext, T expr, int offset);
    [ExtensionAttribute]
[ExtensionAttribute("LEAD({expr}, {offset}, {default})")]
public static IAnalyticFunctionWithoutWindow`1<T> Lead(ISqlExtension ext, T expr, int offset, T default);
    [ExtensionAttribute]
[ExtensionAttribute("LEAD({expr}{_}{modifier?}, {offset}, {default})")]
public static IAnalyticFunctionWithoutWindow`1<T> Lead(ISqlExtension ext, T expr, Nulls nulls, int offset, T default);
    [ExtensionAttribute]
[ExtensionAttribute("LISTAGG({expr}) {within_group}")]
public static INeedsWithinGroupWithOrderAndMaybePartition`1<string> ListAgg(ISqlExtension ext, T expr);
    [ExtensionAttribute]
[ExtensionAttribute("LISTAGG({expr}, {delimiter}) {within_group}")]
public static INeedsWithinGroupWithOrderAndMaybePartition`1<string> ListAgg(ISqlExtension ext, T expr, string delimiter);
    [ExtensionAttribute]
[ExtensionAttribute("MAX({modifier?}{_}{expr})")]
public static TV Max(IEnumerable`1<TEntity> source, Func`2<TEntity, TV> expr, AggregateModifier modifier);
    [ExtensionAttribute]
[ExtensionAttribute("MAX({modifier?}{_}{expr})")]
public static TV Max(IQueryable`1<TEntity> source, Expression`1<Func`2<TEntity, TV>> expr, AggregateModifier modifier);
    [ExtensionAttribute]
[ExtensionAttribute("MAX({expr})")]
public static IAggregateFunctionSelfContained`1<T> Max(ISqlExtension ext, T expr);
    [ExtensionAttribute]
[ExtensionAttribute("MAX({modifier?}{_}{expr})")]
public static IAggregateFunctionSelfContained`1<T> Max(ISqlExtension ext, T expr, AggregateModifier modifier);
    [ExtensionAttribute]
[ExtensionAttribute("MEDIAN({expr})")]
public static long Median(IEnumerable`1<TEntity> source, Func`2<TEntity, T> expr);
    [ExtensionAttribute]
[ExtensionAttribute("MEDIAN({expr})")]
public static long Median(IQueryable`1<TEntity> source, Expression`1<Func`2<TEntity, TV>> expr);
    [ExtensionAttribute]
[ExtensionAttribute("MEDIAN({expr}) {over}")]
public static IReadyToFunctionOrOverWithPartition`1<T> Median(ISqlExtension ext, T expr);
    [ExtensionAttribute]
[ExtensionAttribute("MIN({modifier?}{_}{expr})")]
public static TV Min(IEnumerable`1<TEntity> source, Func`2<TEntity, TV> expr, AggregateModifier modifier);
    [ExtensionAttribute]
[ExtensionAttribute("MIN({modifier?}{_}{expr})")]
public static TV Min(IQueryable`1<TEntity> source, Expression`1<Func`2<TEntity, TV>> expr, AggregateModifier modifier);
    [ExtensionAttribute]
[ExtensionAttribute("MIN({expr})")]
public static IAggregateFunctionSelfContained`1<T> Min(ISqlExtension ext, T expr);
    [ExtensionAttribute]
[ExtensionAttribute("MIN({modifier?}{_}{expr})")]
public static IAggregateFunctionSelfContained`1<T> Min(ISqlExtension ext, T expr, AggregateModifier modifier);
    [ExtensionAttribute]
[ExtensionAttribute("NTH_VALUE({expr}, {n})")]
public static IAggregateFunctionSelfContained`1<T> NthValue(ISqlExtension ext, T expr, long n);
    [ExtensionAttribute]
[ExtensionAttribute("NTH_VALUE({expr}, {n}){_}{from?}{_}{nulls?}")]
public static IAggregateFunctionSelfContained`1<T> NthValue(ISqlExtension ext, T expr, long n, From from, Nulls nulls);
    [ExtensionAttribute]
[ExtensionAttribute("NTILE({expr})")]
public static IAnalyticFunctionWithoutWindow`1<T> NTile(ISqlExtension ext, T expr);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[ExtensionAttribute("PERCENT_RANK({expr, ', '}) {within_group}")]
public static INeedsWithinGroupWithOrderOnly`1<T> PercentRank(ISqlExtension ext, Object[] expr);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[ExtensionAttribute("PERCENT_RANK()")]
public static IAnalyticFunctionWithoutWindow`1<T> PercentRank(ISqlExtension ext);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[ExtensionAttribute("PERCENTILE_CONT({expr}) {within_group}")]
public static INeedsWithinGroupWithSingleOrderAndMaybePartition`1<T> PercentileCont(ISqlExtension ext, object expr);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[ExtensionAttribute("PERCENTILE_DISC({expr}) {within_group}")]
public static INeedsWithinGroupWithSingleOrderAndMaybePartition`1<T> PercentileDisc(ISqlExtension ext, object expr);
    [ExtensionAttribute]
[ExtensionAttribute("RANK({expr, ', '}) {within_group}")]
public static INeedsWithinGroupWithOrderOnly`1<long> Rank(ISqlExtension ext, Object[] expr);
    [ExtensionAttribute]
[ExtensionAttribute("RANK()")]
public static IAnalyticFunctionWithoutWindow`1<long> Rank(ISqlExtension ext);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[ExtensionAttribute("RATIO_TO_REPORT({expr}) {over}")]
public static IOverWithPartitionNeeded`1<TR> RatioToReport(ISqlExtension ext, object expr);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[ExtensionAttribute("REGR_SLOPE({expr1}, {expr2})")]
public static IAggregateFunctionSelfContained`1<T> RegrSlope(ISqlExtension ext, object expr1, object expr2);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[ExtensionAttribute("REGR_INTERCEPT({expr1}, {expr2})")]
public static IAggregateFunctionSelfContained`1<T> RegrIntercept(ISqlExtension ext, object expr1, object expr2);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[ExtensionAttribute("REGR_COUNT({expr1}, {expr2})")]
public static IAggregateFunctionSelfContained`1<long> RegrCount(ISqlExtension ext, object expr1, object expr2);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[ExtensionAttribute("REGR_R2({expr1}, {expr2})")]
public static IAggregateFunctionSelfContained`1<T> RegrR2(ISqlExtension ext, object expr1, object expr2);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[ExtensionAttribute("REGR_AVGX({expr1}, {expr2})")]
public static IAggregateFunctionSelfContained`1<T> RegrAvgX(ISqlExtension ext, object expr1, object expr2);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[ExtensionAttribute("REGR_AVGY({expr1}, {expr2})")]
public static IAggregateFunctionSelfContained`1<T> RegrAvgY(ISqlExtension ext, object expr1, object expr2);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[ExtensionAttribute("REGR_SXX({expr1}, {expr2})")]
public static IAggregateFunctionSelfContained`1<T> RegrSXX(ISqlExtension ext, object expr1, object expr2);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[ExtensionAttribute("REGR_SYY({expr1}, {expr2})")]
public static IAggregateFunctionSelfContained`1<T> RegrSYY(ISqlExtension ext, object expr1, object expr2);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[ExtensionAttribute("REGR_SXY({expr1}, {expr2})")]
public static IAggregateFunctionSelfContained`1<T> RegrSXY(ISqlExtension ext, object expr1, object expr2);
    [ExtensionAttribute]
[ExtensionAttribute("ROW_NUMBER()")]
public static IAnalyticFunctionWithoutWindow`1<long> RowNumber(ISqlExtension ext);
    [ExtensionAttribute]
[ExtensionAttribute("STDEV({expr})")]
[ExtensionAttribute("Oracle", "STDDEV({expr})")]
public static double StdDev(IEnumerable`1<TEntity> source, Func`2<TEntity, TV> expr);
    [ExtensionAttribute]
[ExtensionAttribute("STDEV({modifier?}{_}{expr})")]
[ExtensionAttribute("Oracle", "STDDEV({modifier?}{_}{expr})")]
public static double StdDev(IEnumerable`1<TEntity> source, Func`2<TEntity, TV> expr, AggregateModifier modifier);
    [ExtensionAttribute]
[ExtensionAttribute("STDEV({modifier?}{_}{expr})")]
[ExtensionAttribute("Oracle", "STDDEV({modifier?}{_}{expr})")]
public static double StdDev(IQueryable`1<TEntity> source, Expression`1<Func`2<TEntity, TV>> expr, AggregateModifier modifier);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[ExtensionAttribute("STDEV({expr})")]
[ExtensionAttribute("Oracle", "STDDEV({expr})")]
public static IAggregateFunctionSelfContained`1<T> StdDev(ISqlExtension ext, object expr);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[ExtensionAttribute("STDEV({modifier?}{_}{expr})")]
[ExtensionAttribute("Oracle", "STDDEV({modifier?}{_}{expr})")]
public static IAggregateFunctionSelfContained`1<T> StdDev(ISqlExtension ext, object expr, AggregateModifier modifier);
    [ExtensionAttribute]
[ExtensionAttribute("STDDEV_POP({expr})")]
public static decimal StdDevPop(IEnumerable`1<TEntity> source, Func`2<TEntity, TV> expr);
    [ExtensionAttribute]
[ExtensionAttribute("STDDEV_POP({expr})")]
public static decimal StdDevPop(IQueryable`1<TEntity> source, Expression`1<Func`2<TEntity, TV>> expr);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[ExtensionAttribute("STDDEV_POP({expr})")]
public static IAggregateFunctionSelfContained`1<T> StdDevPop(ISqlExtension ext, object expr);
    [ExtensionAttribute]
[ExtensionAttribute("STDDEV_SAMP({expr})")]
public static decimal StdDevSamp(IEnumerable`1<TEntity> source, Func`2<TEntity, TV> expr);
    [ExtensionAttribute]
[ExtensionAttribute("STDDEV_SAMP({expr})")]
public static decimal StdDevSamp(IQueryable`1<TEntity> source, Expression`1<Func`2<TEntity, TV>> expr);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[ExtensionAttribute("STDDEV_SAMP({expr})")]
public static IAggregateFunctionSelfContained`1<T> StdDevSamp(ISqlExtension ext, object expr);
    [ExtensionAttribute]
[ExtensionAttribute("SUM({expr})")]
public static IAggregateFunctionSelfContained`1<T> Sum(ISqlExtension ext, T expr);
    [ExtensionAttribute]
[ExtensionAttribute("SUM({modifier?}{_}{expr})")]
public static IAggregateFunctionSelfContained`1<T> Sum(ISqlExtension ext, T expr, AggregateModifier modifier);
    [ExtensionAttribute]
[ExtensionAttribute("VAR_POP({expr})")]
public static decimal VarPop(IEnumerable`1<TEntity> source, Func`2<TEntity, TV> expr);
    [ExtensionAttribute]
[ExtensionAttribute("VAR_POP({expr})")]
public static decimal VarPop(IQueryable`1<TEntity> source, Expression`1<Func`2<TEntity, TV>> expr);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[ExtensionAttribute("VAR_POP({expr})")]
public static IAggregateFunctionSelfContained`1<T> VarPop(ISqlExtension ext, object expr);
    [ExtensionAttribute]
[ExtensionAttribute("VAR_SAMP({expr})")]
public static decimal VarSamp(IEnumerable`1<TEntity> source, Func`2<TEntity, TV> expr);
    [ExtensionAttribute]
[ExtensionAttribute("VAR_SAMP({expr})")]
public static decimal VarSamp(IQueryable`1<TEntity> source, Expression`1<Func`2<TEntity, TV>> expr);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[ExtensionAttribute("VAR_SAMP({expr})")]
public static IAggregateFunctionSelfContained`1<T> VarSamp(ISqlExtension ext, object expr);
    [ExtensionAttribute]
[ExtensionAttribute("VARIANCE({expr})")]
public static TV Variance(IEnumerable`1<TEntity> source, Func`2<TEntity, TV> expr);
    [ExtensionAttribute]
[ExtensionAttribute("VARIANCE({modifier?}{_}{expr})")]
public static TV Variance(IEnumerable`1<TEntity> source, Func`2<TEntity, TV> expr, AggregateModifier modifier);
    [ExtensionAttribute]
[ExtensionAttribute("VARIANCE({modifier?}{_}{expr})")]
public static TV Variance(IQueryable`1<TEntity> source, Expression`1<Func`2<TEntity, TV>> expr, AggregateModifier modifier);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[ExtensionAttribute("VARIANCE({expr})")]
public static IAggregateFunctionSelfContained`1<T> Variance(ISqlExtension ext, object expr);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[ExtensionAttribute("VARIANCE({modifier?}{_}{expr})")]
public static IAggregateFunctionSelfContained`1<T> Variance(ISqlExtension ext, object expr, AggregateModifier modifier);
    [ExtensionAttribute]
[ExtensionAttribute("{function} KEEP (DENSE_RANK FIRST {order_by_clause}){_}{over?}")]
public static INeedOrderByAndMaybeOverWithPartition`1<TR> KeepFirst(IAggregateFunction`1<TR> ext);
    [ExtensionAttribute]
[ExtensionAttribute("{function} KEEP (DENSE_RANK LAST {order_by_clause}){_}{over?}")]
public static INeedOrderByAndMaybeOverWithPartition`1<TR> KeepLast(IAggregateFunction`1<TR> ext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PublicAPIAttribute]
public class LinqToDB.Async.AsyncDbConnection : object {
    [CompilerGeneratedAttribute]
private DbConnection <Connection>k__BackingField;
    public DbConnection Connection { get; }
    public string ConnectionString { get; public set; }
    public ConnectionState State { get; }
    protected internal AsyncDbConnection(DbConnection connection);
    [CompilerGeneratedAttribute]
public virtual DbConnection get_Connection();
    [NullableContextAttribute("2")]
public virtual DbConnection TryClone();
    public virtual string get_ConnectionString();
    public virtual void set_ConnectionString(string value);
    public virtual ConnectionState get_State();
    public virtual DbCommand CreateCommand();
    public virtual void Open();
    public virtual Task OpenAsync(CancellationToken cancellationToken);
    public virtual void Close();
    public virtual Task CloseAsync();
    public virtual IAsyncDbTransaction BeginTransaction();
    public virtual IAsyncDbTransaction BeginTransaction(IsolationLevel isolationLevel);
    [AsyncStateMachineAttribute("LinqToDB.Async.AsyncDbConnection/<BeginTransactionAsync>d__17")]
public virtual ValueTask`1<IAsyncDbTransaction> BeginTransactionAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("LinqToDB.Async.AsyncDbConnection/<BeginTransactionAsync>d__18")]
public virtual ValueTask`1<IAsyncDbTransaction> BeginTransactionAsync(IsolationLevel isolationLevel, CancellationToken cancellationToken);
    public virtual void Dispose();
    public virtual ValueTask DisposeAsync();
    [AsyncStateMachineAttribute("LinqToDB.Async.AsyncDbConnection/<<OpenAsync>g__CallAwaitUsing|12_0>d")]
[CompilerGeneratedAttribute]
internal static Task <OpenAsync>g__CallAwaitUsing|12_0(AsyncDisposableWrapper activity, DbConnection connection, CancellationToken token);
    [AsyncStateMachineAttribute("LinqToDB.Async.AsyncDbConnection/<<CloseAsync>g__CallAwaitUsing|14_0>d")]
[CompilerGeneratedAttribute]
internal static Task <CloseAsync>g__CallAwaitUsing|14_0(AsyncDisposableWrapper activity, DbConnection connection);
    [AsyncStateMachineAttribute("LinqToDB.Async.AsyncDbConnection/<<DisposeAsync>g__CallAwaitUsing|20_0>d")]
[CompilerGeneratedAttribute]
internal static ValueTask <DisposeAsync>g__CallAwaitUsing|20_0(AsyncDisposableWrapper activity, IAsyncDisposable disposable);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PublicAPIAttribute]
public class LinqToDB.Async.AsyncDbTransaction : object {
    [CompilerGeneratedAttribute]
private DbTransaction <Transaction>k__BackingField;
    public DbTransaction Transaction { get; }
    protected internal AsyncDbTransaction(DbTransaction transaction);
    [CompilerGeneratedAttribute]
public sealed virtual DbTransaction get_Transaction();
    public virtual void Commit();
    public virtual void Rollback();
    public virtual Task CommitAsync(CancellationToken cancellationToken);
    public virtual Task RollbackAsync(CancellationToken cancellationToken);
    public virtual void Dispose();
    public virtual ValueTask DisposeAsync();
    [AsyncStateMachineAttribute("LinqToDB.Async.AsyncDbTransaction/<<CommitAsync>g__CallAwaitUsing|6_0>d")]
[CompilerGeneratedAttribute]
internal static Task <CommitAsync>g__CallAwaitUsing|6_0(AsyncDisposableWrapper activity, DbTransaction transaction, CancellationToken token);
    [AsyncStateMachineAttribute("LinqToDB.Async.AsyncDbTransaction/<<RollbackAsync>g__CallAwaitUsing|7_0>d")]
[CompilerGeneratedAttribute]
internal static Task <RollbackAsync>g__CallAwaitUsing|7_0(AsyncDisposableWrapper activity, DbTransaction transaction, CancellationToken token);
    [AsyncStateMachineAttribute("LinqToDB.Async.AsyncDbTransaction/<<DisposeAsync>g__CallAwaitUsing|9_0>d")]
[CompilerGeneratedAttribute]
internal static ValueTask <DisposeAsync>g__CallAwaitUsing|9_0(AsyncDisposableWrapper activity, IAsyncDisposable disposable);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class LinqToDB.Async.AsyncEnumerableExtensions : object {
    [AsyncStateMachineAttribute("LinqToDB.Async.AsyncEnumerableExtensions/<ToListAsync>d__0`1")]
[ExtensionAttribute]
public static Task`1<List`1<T>> ToListAsync(IAsyncEnumerable`1<T> source, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("LinqToDB.Async.AsyncEnumerableExtensions/<ToArrayAsync>d__1`1")]
[ExtensionAttribute]
public static Task`1<T[]> ToArrayAsync(IAsyncEnumerable`1<T> source, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("LinqToDB.Async.AsyncEnumerableExtensions/<FirstOrDefaultAsync>d__2`1")]
[ExtensionAttribute]
public static Task`1<T> FirstOrDefaultAsync(IAsyncEnumerable`1<T> source, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("LinqToDB.Async.AsyncEnumerableExtensions/<FirstAsync>d__3`1")]
[ExtensionAttribute]
public static Task`1<TSource> FirstAsync(IAsyncEnumerable`1<TSource> source, CancellationToken token);
}
internal class LinqToDB.Async.AsyncEnumeratorAsyncWrapper`1 : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IAsyncEnumerator`1<T> _enumerator;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`1<Task`1<Tuple`2<IAsyncEnumerator`1<T>, IAsyncDisposable>>> _init;
    [NullableAttribute("2")]
private IAsyncDisposable _disposable;
    [NullableAttribute("1")]
private T System.Collections.Generic.IAsyncEnumerator<T>.Current { get; }
    public AsyncEnumeratorAsyncWrapper`1(Func`1<Task`1<Tuple`2<IAsyncEnumerator`1<T>, IAsyncDisposable>>> init);
    [NullableContextAttribute("1")]
private sealed virtual override T System.Collections.Generic.IAsyncEnumerator<T>.get_Current();
    [AsyncStateMachineAttribute("LinqToDB.Async.AsyncEnumeratorAsyncWrapper`1/<System-IAsyncDisposable-DisposeAsync>d__6")]
private sealed virtual override ValueTask System.IAsyncDisposable.DisposeAsync();
    [AsyncStateMachineAttribute("LinqToDB.Async.AsyncEnumeratorAsyncWrapper`1/<System-Collections-Generic-IAsyncEnumerator<T>-MoveNextAsync>d__7")]
private sealed virtual override ValueTask`1<bool> System.Collections.Generic.IAsyncEnumerator<T>.MoveNextAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PublicAPIAttribute]
public static class LinqToDB.Async.AsyncFactory : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Type[] _noTokenParams;
    private static Type[] _tokenParams;
    private static Type[] _beginTransactionParams;
    private static ConcurrentDictionary`2<Type, Func`2<DbConnection, IAsyncDbConnection>> _connectionFactories;
    private static ConcurrentDictionary`2<Type, Func`2<DbTransaction, IAsyncDbTransaction>> _transactionFactories;
    private static MethodInfo _transactionValueWrap;
    private static AsyncFactory();
    public static void RegisterConnectionFactory(Func`2<DbConnection, IAsyncDbConnection> factory);
    public static void RegisterTransactionFactory(Func`2<DbTransaction, IAsyncDbTransaction> factory);
    public static IAsyncDbConnection Create(DbConnection connection);
    public static IAsyncDbTransaction Create(DbTransaction transaction);
    [AsyncStateMachineAttribute("LinqToDB.Async.AsyncFactory/<Wrap>d__10`1")]
private static Task`1<IAsyncDbTransaction> Wrap(Task`1<TTransaction> transaction);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("LinqToDB.Async.AsyncFactory/<WrapValue>d__11`1")]
private static ValueTask`1<IAsyncDbTransaction> WrapValue(ValueTask`1<TTransaction> transaction);
    private static Func`2<DbTransaction, IAsyncDbTransaction> TransactionFactory(Type type);
    private static Func`2<DbConnection, IAsyncDbConnection> ConnectionFactory(Type type);
    private static TDelegate CreateDelegate(Type instanceType, string methodName, Type[] delegateParameterTypes, Type[] methodParameterTypes, Type[] mappedParameterTypes, bool returnsValueTask, bool returnValueTask);
    private static MethodCallExpression ToTask(Expression body);
    private static NewExpression ToValueTask(Expression body);
    private static NewExpression ToValueTTask(Expression body);
    private static TDelegate CreateTaskTDelegate(Type instanceType, string methodName, Type[] parametersTypes, MethodInfo taskConverter, bool returnsValueTask, bool returnValueTask);
}
[NullableContextAttribute("1")]
[PublicAPIAttribute]
public interface LinqToDB.Async.IAsyncDbConnection {
    public DbConnection Connection { get; }
    public string ConnectionString { get; public set; }
    public ConnectionState State { get; }
    public abstract virtual DbConnection get_Connection();
    [NullableContextAttribute("2")]
public abstract virtual DbConnection TryClone();
    public abstract virtual string get_ConnectionString();
    public abstract virtual void set_ConnectionString(string value);
    public abstract virtual ConnectionState get_State();
    public abstract virtual DbCommand CreateCommand();
    public abstract virtual void Open();
    public abstract virtual Task OpenAsync(CancellationToken cancellationToken);
    public abstract virtual void Close();
    public abstract virtual Task CloseAsync();
    public abstract virtual IAsyncDbTransaction BeginTransaction();
    public abstract virtual IAsyncDbTransaction BeginTransaction(IsolationLevel isolationLevel);
    public abstract virtual ValueTask`1<IAsyncDbTransaction> BeginTransactionAsync(CancellationToken cancellationToken);
    public abstract virtual ValueTask`1<IAsyncDbTransaction> BeginTransactionAsync(IsolationLevel isolationLevel, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[PublicAPIAttribute]
public interface LinqToDB.Async.IAsyncDbTransaction {
    public DbTransaction Transaction { get; }
    public abstract virtual DbTransaction get_Transaction();
    public abstract virtual void Commit();
    public abstract virtual void Rollback();
    public abstract virtual Task CommitAsync(CancellationToken cancellationToken);
    public abstract virtual Task RollbackAsync(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface LinqToDB.Async.IQueryProviderAsync {
    public abstract virtual Task`1<IAsyncEnumerable`1<TResult>> ExecuteAsyncEnumerable(Expression expression, CancellationToken cancellationToken);
    public abstract virtual Task`1<TResult> ExecuteAsync(Expression expression, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Async.ReflectedAsyncDbConnection : AsyncDbConnection {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`3<DbConnection, CancellationToken, Task> _openAsync;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<DbConnection, Task> _closeAsync;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`3<DbConnection, CancellationToken, ValueTask`1<IAsyncDbTransaction>> _beginTransactionAsync;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`4<DbConnection, IsolationLevel, CancellationToken, ValueTask`1<IAsyncDbTransaction>> _beginTransactionIlAsync;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<DbConnection, ValueTask> _disposeAsync;
    public ReflectedAsyncDbConnection(DbConnection connection, Func`3<DbConnection, CancellationToken, ValueTask`1<IAsyncDbTransaction>> beginTransactionAsync, Func`4<DbConnection, IsolationLevel, CancellationToken, ValueTask`1<IAsyncDbTransaction>> beginTransactionIlAsync, Func`3<DbConnection, CancellationToken, Task> openAsync, Func`2<DbConnection, Task> closeAsync, Func`2<DbConnection, ValueTask> disposeAsync);
    public virtual ValueTask`1<IAsyncDbTransaction> BeginTransactionAsync(CancellationToken cancellationToken);
    public virtual ValueTask`1<IAsyncDbTransaction> BeginTransactionAsync(IsolationLevel isolationLevel, CancellationToken cancellationToken);
    public virtual Task OpenAsync(CancellationToken cancellationToken);
    public virtual Task CloseAsync();
    public virtual ValueTask DisposeAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Async.ReflectedAsyncDbTransaction : AsyncDbTransaction {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`3<DbTransaction, CancellationToken, Task> _commitAsync;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`3<DbTransaction, CancellationToken, Task> _rollbackAsync;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<DbTransaction, ValueTask> _disposeAsync;
    public ReflectedAsyncDbTransaction(DbTransaction transaction, Func`3<DbTransaction, CancellationToken, Task> commitAsync, Func`3<DbTransaction, CancellationToken, Task> rollbackAsync, Func`2<DbTransaction, ValueTask> disposeAsync);
    public virtual Task CommitAsync(CancellationToken cancellationToken);
    public virtual Task RollbackAsync(CancellationToken cancellationToken);
    public virtual ValueTask DisposeAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class LinqToDB.Async.SafeAwaiter : object {
    public static T Run(Func`1<ValueTask`1<T>> task);
    public static T Run(Func`1<Task`1<T>> task);
    public static void Run(Func`1<ValueTask> task);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[PublicAPIAttribute]
public static class LinqToDB.AsyncExtensions : object {
    internal static Task GetActionTask(Action action, CancellationToken token);
    internal static Task`1<T> GetTask(Func`1<T> func);
    private static Task`1<T> GetTask(Func`1<T> func, CancellationToken token);
    [ExtensionAttribute]
public static IAsyncEnumerable`1<TSource> AsAsyncEnumerable(IQueryable`1<TSource> source);
    [ExtensionAttribute]
public static Task ForEachAsync(IQueryable`1<TSource> source, Action`1<TSource> action, CancellationToken token);
    [ExtensionAttribute]
public static Task ForEachUntilAsync(IQueryable`1<TSource> source, Func`2<TSource, bool> func, CancellationToken token);
    [AsyncStateMachineAttribute("LinqToDB.AsyncExtensions/<ToListAsync>d__8`1")]
[ExtensionAttribute]
public static Task`1<List`1<TSource>> ToListAsync(IQueryable`1<TSource> source, CancellationToken token);
    [AsyncStateMachineAttribute("LinqToDB.AsyncExtensions/<ToArrayAsync>d__9`1")]
[ExtensionAttribute]
public static Task`1<TSource[]> ToArrayAsync(IQueryable`1<TSource> source, CancellationToken token);
    [AsyncStateMachineAttribute("LinqToDB.AsyncExtensions/<ToDictionaryAsync>d__10`2")]
[ExtensionAttribute]
public static Task`1<Dictionary`2<TKey, TSource>> ToDictionaryAsync(IQueryable`1<TSource> source, Func`2<TSource, TKey> keySelector, CancellationToken token);
    [AsyncStateMachineAttribute("LinqToDB.AsyncExtensions/<ToDictionaryAsync>d__11`2")]
[ExtensionAttribute]
public static Task`1<Dictionary`2<TKey, TSource>> ToDictionaryAsync(IQueryable`1<TSource> source, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> comparer, CancellationToken token);
    [AsyncStateMachineAttribute("LinqToDB.AsyncExtensions/<ToDictionaryAsync>d__12`3")]
[ExtensionAttribute]
public static Task`1<Dictionary`2<TKey, TElement>> ToDictionaryAsync(IQueryable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, CancellationToken token);
    [AsyncStateMachineAttribute("LinqToDB.AsyncExtensions/<ToDictionaryAsync>d__13`3")]
[ExtensionAttribute]
public static Task`1<Dictionary`2<TKey, TElement>> ToDictionaryAsync(IQueryable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, IEqualityComparer`1<TKey> comparer, CancellationToken token);
    [ExtensionAttribute]
internal static ConfiguredAsyncDisposable ConfigureForUsing(IAsyncDisposable asyncDisposable);
    [ExtensionAttribute]
[ElementAsyncAttribute]
public static Task`1<TSource> FirstAsync(IQueryable`1<TSource> source, CancellationToken token);
    [ExtensionAttribute]
[ElementAsyncAttribute]
public static Task`1<TSource> FirstAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate, CancellationToken token);
    [ExtensionAttribute]
[ElementAsyncAttribute]
public static Task`1<TSource> FirstOrDefaultAsync(IQueryable`1<TSource> source, CancellationToken token);
    [ExtensionAttribute]
[ElementAsyncAttribute]
public static Task`1<TSource> FirstOrDefaultAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate, CancellationToken token);
    [ExtensionAttribute]
[ElementAsyncAttribute]
public static Task`1<TSource> SingleAsync(IQueryable`1<TSource> source, CancellationToken token);
    [ExtensionAttribute]
[ElementAsyncAttribute]
public static Task`1<TSource> SingleAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate, CancellationToken token);
    [ExtensionAttribute]
[ElementAsyncAttribute]
public static Task`1<TSource> SingleOrDefaultAsync(IQueryable`1<TSource> source, CancellationToken token);
    [ExtensionAttribute]
[ElementAsyncAttribute]
public static Task`1<TSource> SingleOrDefaultAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate, CancellationToken token);
    [ExtensionAttribute]
[ElementAsyncAttribute]
public static Task`1<bool> ContainsAsync(IQueryable`1<TSource> source, TSource item, CancellationToken token);
    [ExtensionAttribute]
[ElementAsyncAttribute]
public static Task`1<bool> AnyAsync(IQueryable`1<TSource> source, CancellationToken token);
    [ExtensionAttribute]
[ElementAsyncAttribute]
public static Task`1<bool> AnyAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate, CancellationToken token);
    [ExtensionAttribute]
[ElementAsyncAttribute]
public static Task`1<bool> AllAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate, CancellationToken token);
    [ExtensionAttribute]
[ElementAsyncAttribute]
public static Task`1<int> CountAsync(IQueryable`1<TSource> source, CancellationToken token);
    [ExtensionAttribute]
[ElementAsyncAttribute]
public static Task`1<int> CountAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate, CancellationToken token);
    [ExtensionAttribute]
[ElementAsyncAttribute]
public static Task`1<long> LongCountAsync(IQueryable`1<TSource> source, CancellationToken token);
    [ExtensionAttribute]
[ElementAsyncAttribute]
public static Task`1<long> LongCountAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate, CancellationToken token);
    [ExtensionAttribute]
[ElementAsyncAttribute]
public static Task`1<TSource> MinAsync(IQueryable`1<TSource> source, CancellationToken token);
    [ExtensionAttribute]
[ElementAsyncAttribute]
public static Task`1<TResult> MinAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TResult>> selector, CancellationToken token);
    [ExtensionAttribute]
[ElementAsyncAttribute]
public static Task`1<TSource> MaxAsync(IQueryable`1<TSource> source, CancellationToken token);
    [ExtensionAttribute]
[ElementAsyncAttribute]
public static Task`1<TResult> MaxAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TResult>> selector, CancellationToken token);
    [ExtensionAttribute]
[ElementAsyncAttribute]
public static Task`1<int> SumAsync(IQueryable`1<int> source, CancellationToken token);
    [ExtensionAttribute]
[ElementAsyncAttribute]
public static Task`1<Nullable`1<int>> SumAsync(IQueryable`1<Nullable`1<int>> source, CancellationToken token);
    [ExtensionAttribute]
[ElementAsyncAttribute]
public static Task`1<long> SumAsync(IQueryable`1<long> source, CancellationToken token);
    [ExtensionAttribute]
[ElementAsyncAttribute]
public static Task`1<Nullable`1<long>> SumAsync(IQueryable`1<Nullable`1<long>> source, CancellationToken token);
    [ExtensionAttribute]
[ElementAsyncAttribute]
public static Task`1<float> SumAsync(IQueryable`1<float> source, CancellationToken token);
    [ExtensionAttribute]
[ElementAsyncAttribute]
public static Task`1<Nullable`1<float>> SumAsync(IQueryable`1<Nullable`1<float>> source, CancellationToken token);
    [ExtensionAttribute]
[ElementAsyncAttribute]
public static Task`1<double> SumAsync(IQueryable`1<double> source, CancellationToken token);
    [ExtensionAttribute]
[ElementAsyncAttribute]
public static Task`1<Nullable`1<double>> SumAsync(IQueryable`1<Nullable`1<double>> source, CancellationToken token);
    [ExtensionAttribute]
[ElementAsyncAttribute]
public static Task`1<decimal> SumAsync(IQueryable`1<decimal> source, CancellationToken token);
    [ExtensionAttribute]
[ElementAsyncAttribute]
public static Task`1<Nullable`1<decimal>> SumAsync(IQueryable`1<Nullable`1<decimal>> source, CancellationToken token);
    [ExtensionAttribute]
[ElementAsyncAttribute]
public static Task`1<int> SumAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, int>> selector, CancellationToken token);
    [ExtensionAttribute]
[ElementAsyncAttribute]
public static Task`1<Nullable`1<int>> SumAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<int>>> selector, CancellationToken token);
    [ExtensionAttribute]
[ElementAsyncAttribute]
public static Task`1<long> SumAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, long>> selector, CancellationToken token);
    [ExtensionAttribute]
[ElementAsyncAttribute]
public static Task`1<Nullable`1<long>> SumAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<long>>> selector, CancellationToken token);
    [ExtensionAttribute]
[ElementAsyncAttribute]
public static Task`1<float> SumAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, float>> selector, CancellationToken token);
    [ExtensionAttribute]
[ElementAsyncAttribute]
public static Task`1<Nullable`1<float>> SumAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<float>>> selector, CancellationToken token);
    [ExtensionAttribute]
[ElementAsyncAttribute]
public static Task`1<double> SumAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, double>> selector, CancellationToken token);
    [ExtensionAttribute]
[ElementAsyncAttribute]
public static Task`1<Nullable`1<double>> SumAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<double>>> selector, CancellationToken token);
    [ExtensionAttribute]
[ElementAsyncAttribute]
public static Task`1<decimal> SumAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, decimal>> selector, CancellationToken token);
    [ExtensionAttribute]
[ElementAsyncAttribute]
public static Task`1<Nullable`1<decimal>> SumAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<decimal>>> selector, CancellationToken token);
    [ExtensionAttribute]
[ElementAsyncAttribute]
public static Task`1<double> AverageAsync(IQueryable`1<int> source, CancellationToken token);
    [ExtensionAttribute]
[ElementAsyncAttribute]
public static Task`1<Nullable`1<double>> AverageAsync(IQueryable`1<Nullable`1<int>> source, CancellationToken token);
    [ExtensionAttribute]
[ElementAsyncAttribute]
public static Task`1<double> AverageAsync(IQueryable`1<long> source, CancellationToken token);
    [ExtensionAttribute]
[ElementAsyncAttribute]
public static Task`1<Nullable`1<double>> AverageAsync(IQueryable`1<Nullable`1<long>> source, CancellationToken token);
    [ExtensionAttribute]
[ElementAsyncAttribute]
public static Task`1<float> AverageAsync(IQueryable`1<float> source, CancellationToken token);
    [ExtensionAttribute]
[ElementAsyncAttribute]
public static Task`1<Nullable`1<float>> AverageAsync(IQueryable`1<Nullable`1<float>> source, CancellationToken token);
    [ExtensionAttribute]
[ElementAsyncAttribute]
public static Task`1<double> AverageAsync(IQueryable`1<double> source, CancellationToken token);
    [ExtensionAttribute]
[ElementAsyncAttribute]
public static Task`1<Nullable`1<double>> AverageAsync(IQueryable`1<Nullable`1<double>> source, CancellationToken token);
    [ExtensionAttribute]
[ElementAsyncAttribute]
public static Task`1<decimal> AverageAsync(IQueryable`1<decimal> source, CancellationToken token);
    [ExtensionAttribute]
[ElementAsyncAttribute]
public static Task`1<Nullable`1<decimal>> AverageAsync(IQueryable`1<Nullable`1<decimal>> source, CancellationToken token);
    [ExtensionAttribute]
[ElementAsyncAttribute]
public static Task`1<double> AverageAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, int>> selector, CancellationToken token);
    [ExtensionAttribute]
[ElementAsyncAttribute]
public static Task`1<Nullable`1<double>> AverageAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<int>>> selector, CancellationToken token);
    [ExtensionAttribute]
[ElementAsyncAttribute]
public static Task`1<double> AverageAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, long>> selector, CancellationToken token);
    [ExtensionAttribute]
[ElementAsyncAttribute]
public static Task`1<Nullable`1<double>> AverageAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<long>>> selector, CancellationToken token);
    [ExtensionAttribute]
[ElementAsyncAttribute]
public static Task`1<float> AverageAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, float>> selector, CancellationToken token);
    [ExtensionAttribute]
[ElementAsyncAttribute]
public static Task`1<Nullable`1<float>> AverageAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<float>>> selector, CancellationToken token);
    [ExtensionAttribute]
[ElementAsyncAttribute]
public static Task`1<double> AverageAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, double>> selector, CancellationToken token);
    [ExtensionAttribute]
[ElementAsyncAttribute]
public static Task`1<Nullable`1<double>> AverageAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<double>>> selector, CancellationToken token);
    [ExtensionAttribute]
[ElementAsyncAttribute]
public static Task`1<decimal> AverageAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, decimal>> selector, CancellationToken token);
    [ExtensionAttribute]
[ElementAsyncAttribute]
public static Task`1<Nullable`1<decimal>> AverageAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<decimal>>> selector, CancellationToken token);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PublicAPIAttribute]
public static class LinqToDB.Common.Array`1 : object {
    public static T[] Empty;
    private static Array`1();
    internal static T[] Append(T[] array, T newElement);
    internal static T[] Append(T[] array, T[] otherArray);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class LinqToDB.Common.Compilation : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Func`2<LambdaExpression, Delegate> _compiler;
    public static void SetExpressionCompiler(Func`2<LambdaExpression, Delegate> compiler);
    [ExtensionAttribute]
public static TDelegate CompileExpression(Expression`1<TDelegate> expression);
    [ExtensionAttribute]
public static Delegate CompileExpression(LambdaExpression expression);
}
[PublicAPIAttribute]
public static class LinqToDB.Common.Configuration : object {
    public static bool IsStructIsScalarType;
    public static bool UseEnumValueNameForStringColumns;
    public static bool ContinueOnCapturedContext;
    public static bool OptimizeForSequentialAccess;
    [CompilerGeneratedAttribute]
private static int <MaxBinaryParameterLengthLogging>k__BackingField;
    [CompilerGeneratedAttribute]
private static int <MaxStringParameterLengthLogging>k__BackingField;
    [CompilerGeneratedAttribute]
private static int <MaxArrayParameterLengthLogging>k__BackingField;
    private static bool _useNullableTypesMetadata;
    [CompilerGeneratedAttribute]
private static bool <TraceMaterializationActivity>k__BackingField;
    public static int MaxBinaryParameterLengthLogging { get; public set; }
    public static int MaxStringParameterLengthLogging { get; public set; }
    public static int MaxArrayParameterLengthLogging { get; public set; }
    public static bool UseNullableTypesMetadata { get; public set; }
    public static bool TraceMaterializationActivity { get; public set; }
    private static Configuration();
    [CompilerGeneratedAttribute]
public static int get_MaxBinaryParameterLengthLogging();
    [CompilerGeneratedAttribute]
public static void set_MaxBinaryParameterLengthLogging(int value);
    [CompilerGeneratedAttribute]
public static int get_MaxStringParameterLengthLogging();
    [CompilerGeneratedAttribute]
public static void set_MaxStringParameterLengthLogging(int value);
    [CompilerGeneratedAttribute]
public static int get_MaxArrayParameterLengthLogging();
    [CompilerGeneratedAttribute]
public static void set_MaxArrayParameterLengthLogging(int value);
    public static bool get_UseNullableTypesMetadata();
    public static void set_UseNullableTypesMetadata(bool value);
    [CompilerGeneratedAttribute]
public static bool get_TraceMaterializationActivity();
    [CompilerGeneratedAttribute]
public static void set_TraceMaterializationActivity(bool value);
}
public enum LinqToDB.Common.ConversionType : Enum {
    public int value__;
    public static ConversionType Common;
    public static ConversionType ToDatabase;
    public static ConversionType FromDatabase;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PublicAPIAttribute]
public static class LinqToDB.Common.Convert`2 : object {
    private static Expression`1<Func`2<TFrom, TTo>> _expression;
    private static Func`2<TFrom, TTo> _lambda;
    public static Expression`1<Func`2<TFrom, TTo>> Expression { get; public set; }
    public static Func`2<TFrom, TTo> Lambda { get; public set; }
    public static Func`2<TFrom, TTo> From { get; }
    private static Convert`2();
    [MemberNotNullAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static void Init();
    public static Expression`1<Func`2<TFrom, TTo>> get_Expression();
    public static void set_Expression(Expression`1<Func`2<TFrom, TTo>> value);
    public static Func`2<TFrom, TTo> get_Lambda();
    public static void set_Lambda(Func`2<TFrom, TTo> value);
    public static Func`2<TFrom, TTo> get_From();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class LinqToDB.Common.ConvertBuilder : object {
    internal static MethodInfo DefaultConverter;
    private static Type[] ParseParameters;
    private static Type[] ToStringInvariantArgTypes;
    private static FieldAttributes EnumField;
    private static MethodInfo _throwLinqToDBConvertException;
    private static ConvertBuilder();
    private static object ConvertDefault(object value, Type conversionType);
    private static Expression GetCtor(Type from, Type to, Expression p);
    private static Expression GetValueOrDefault(Type from, Type to, Expression p);
    private static Expression GetValue(Type from, Type to, Expression p);
    private static Expression GetOperator(Type from, Type to, Expression p);
    private static bool IsConvertible(Type type);
    private static Expression GetConversion(Type from, Type to, Expression p);
    private static Expression GetParse(Type from, Type to, Expression p);
    private static Expression GetToStringInvariant(Type from, Type to, Expression p);
    private static Expression GetToString(Type from, Type to, Expression p);
    private static Expression GetParseEnum(Type from, Type to, Expression p);
    private static object ThrowLinqToDBException(string text);
    private static Expression GetToEnum(Type from, Type to, Expression expression, MappingSchema mappingSchema);
    private static Expression GetFromEnum(Type from, Type to, Expression expression, MappingSchema mappingSchema);
    private static Tuple`2<Expression, bool> GetConverter(MappingSchema mappingSchema, Expression expr, Type from, Type to);
    private static Tuple`2<Expression, bool> ConvertUnderlying(MappingSchema mappingSchema, Expression expr, Type from, Type ufrom, Type to, Type uto);
    public static Tuple`3<LambdaExpression, LambdaExpression, bool> GetConverter(MappingSchema mappingSchema, Type from, Type to);
    public static Type GetDefaultMappingFromEnumType(MappingSchema mappingSchema, Type enumType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PublicAPIAttribute]
public static class LinqToDB.Common.Converter : object {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ConcurrentDictionary`2<ValueTuple`2<Type, Type>, LambdaExpression> _expressions;
    private static ConcurrentDictionary`2<object, Func`2<object, object>> _converters;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static FindVisitor`1<object> IsDefaultValuePlaceHolderVisitor;
    private static Converter();
    private static XmlDocument CreateXmlDocument(string str);
    private static bool ToBoolean(char ch);
    [NullableContextAttribute("2")]
public static void SetConverter(Expression`1<Func`2<TFrom, TTo>> expr);
    internal static LambdaExpression GetConverter(Type from, Type to);
    [NullableContextAttribute("2")]
public static object ChangeType(object value, Type toConvertType, MappingSchema mappingSchema, ConversionType conversionType);
    [NullableContextAttribute("2")]
public static T ChangeTypeTo(object value, MappingSchema mappingSchema, ConversionType conversionType);
    internal static bool IsDefaultValuePlaceHolder(Expression expr);
    public static Type GetDefaultMappingFromEnumType(MappingSchema mappingSchema, Type enumType);
    [NullableContextAttribute("2")]
internal static bool TryConvertToString(object value, String& str);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Common.ConvertInfo : object {
    public static ConvertInfo Default;
    private ConcurrentDictionary`2<DbDataType, ConcurrentDictionary`2<DbDataType, LambdaInfo>> _expressions;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ConcurrentDictionary`2<DbDataType, ConcurrentDictionary`2<DbDataType, LambdaInfo>> _toDatabaseExpressions;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ConcurrentDictionary`2<DbDataType, ConcurrentDictionary`2<DbDataType, LambdaInfo>> _fromDatabaseExpressions;
    private object _sync;
    private static ConvertInfo();
    private ConcurrentDictionary`2<DbDataType, ConcurrentDictionary`2<DbDataType, LambdaInfo>> GetForSetExpressions(ConversionType conversionType);
    public void Set(Type from, Type to, ConversionType conversionType, LambdaInfo expr);
    public void Set(DbDataType from, DbDataType to, ConversionType conversionType, LambdaInfo expr);
    private static void Set(ConcurrentDictionary`2<DbDataType, ConcurrentDictionary`2<DbDataType, LambdaInfo>> expressions, DbDataType from, DbDataType to, LambdaInfo expr);
    [NullableContextAttribute("2")]
public LambdaInfo Get(DbDataType from, DbDataType to, ConversionType conversionType);
    public LambdaInfo Get(Type from, Type to, ConversionType conversionType);
    public LambdaInfo Create(MappingSchema mappingSchema, Type from, Type to, ConversionType conversionType);
    public LambdaInfo Create(MappingSchema mappingSchema, DbDataType from, DbDataType to, ConversionType conversionType);
    public int GetConfigurationID();
    [CompilerGeneratedAttribute]
internal static void <GetConfigurationID>g__IdentifyExpressions|14_0(IdentifierBuilder identifierBuilder, ConcurrentDictionary`2<DbDataType, ConcurrentDictionary`2<DbDataType, LambdaInfo>> expressions);
}
internal class LinqToDB.Common.ConvertReducer : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static TransformVisitor`1<object> ReducerVisitor;
    private static ConvertReducer();
    [NullableContextAttribute("1")]
private static Expression Reducer(Expression e);
}
[PublicAPIAttribute]
public static class LinqToDB.Common.ConvertTo`1 : object {
    [NullableContextAttribute("1")]
public static TTo From(TFrom o);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class LinqToDB.Common.ConvertUtils : object {
    private static IDictionary`2<Type, ISet`1<Type>> _alwaysConvert;
    private static IDictionary`2<Type, IDictionary`2<Type, Tuple`2<IComparable, IComparable>>> _rangedConvert;
    private static ConvertUtils();
    [NullableContextAttribute("2")]
public static bool TryConvert(object value, Type toType, Object& convertedValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.Common.DbDataType : ValueType {
    [CompilerGeneratedAttribute]
private Type <SystemType>k__BackingField;
    [CompilerGeneratedAttribute]
private DataType <DataType>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <DbType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Length>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Precision>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Scale>k__BackingField;
    internal static MethodInfo WithSetValuesMethodInfo;
    private Nullable`1<int> _hashCode;
    public Type SystemType { get; }
    public DataType DataType { get; }
    [NullableAttribute("2")]
public string DbType { get; }
    public Nullable`1<int> Length { get; }
    public Nullable`1<int> Precision { get; }
    public Nullable`1<int> Scale { get; }
    [DebuggerStepThroughAttribute]
public DbDataType(Type systemType);
    [DebuggerStepThroughAttribute]
public DbDataType(Type systemType, DataType dataType);
    [DebuggerStepThroughAttribute]
public DbDataType(Type systemType, DataType dataType, string dbType);
    [DebuggerStepThroughAttribute]
public DbDataType(Type systemType, DataType dataType, string dbType, Nullable`1<int> length);
    [DebuggerStepThroughAttribute]
public DbDataType(Type systemType, DataType dataType, string dbType, Nullable`1<int> length, Nullable`1<int> precision, Nullable`1<int> scale);
    [DebuggerStepThroughAttribute]
public DbDataType(Type systemType, string dbType);
    private static DbDataType();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Type get_SystemType();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public DataType get_DataType();
    [IsReadOnlyAttribute]
[NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_DbType();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Nullable`1<int> get_Length();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Nullable`1<int> get_Precision();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Nullable`1<int> get_Scale();
    [IsReadOnlyAttribute]
public DbDataType WithSetValues(DbDataType from);
    [IsReadOnlyAttribute]
public DbDataType WithoutSystemType(DbDataType from);
    [IsReadOnlyAttribute]
public DbDataType WithoutSystemType(ColumnDescriptor from);
    [IsReadOnlyAttribute]
public DbDataType WithSystemType(Type systemType);
    [IsReadOnlyAttribute]
public DbDataType WithDataType(DataType dataType);
    [IsReadOnlyAttribute]
[NullableContextAttribute("2")]
public DbDataType WithDbType(string dbName);
    [IsReadOnlyAttribute]
public DbDataType WithLength(Nullable`1<int> length);
    [IsReadOnlyAttribute]
public DbDataType WithPrecision(Nullable`1<int> precision);
    [IsReadOnlyAttribute]
public DbDataType WithScale(Nullable`1<int> scale);
    [IsReadOnlyAttribute]
public virtual string ToString();
    [IsReadOnlyAttribute]
public sealed virtual bool Equals(DbDataType other);
    [IsReadOnlyAttribute]
public bool EqualsDbOnly(DbDataType other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(DbDataType t1, DbDataType t2);
    public static bool op_Inequality(DbDataType t1, DbDataType t2);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PublicAPIAttribute]
public static class LinqToDB.Common.DefaultValue : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ConcurrentDictionary`2<Type, object> _values;
    private static DefaultValue();
    [NullableContextAttribute("2")]
public static object GetValue(Type type, MappingSchema mappingSchema);
    public static T GetValue();
    public static void SetValue(T value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PublicAPIAttribute]
public static class LinqToDB.Common.DefaultValue`1 : object {
    private static T _value;
    public static T Value { get; public set; }
    private static DefaultValue`1();
    public static T get_Value();
    public static void set_Value(T value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class LinqToDB.Common.EnumerableHelper : object {
    [IteratorStateMachineAttribute("LinqToDB.Common.EnumerableHelper/<AsyncToSyncEnumerable>d__0`1")]
internal static IEnumerable`1<T> AsyncToSyncEnumerable(IAsyncEnumerator`1<T> enumerator);
    [AsyncIteratorStateMachineAttribute("LinqToDB.Common.EnumerableHelper/<SyncToAsyncEnumerable>d__1`1")]
internal static IAsyncEnumerable`1<T> SyncToAsyncEnumerable(IEnumerable`1<T> enumerable);
    [IteratorStateMachineAttribute("LinqToDB.Common.EnumerableHelper/<Batch>d__2`1")]
public static IEnumerable`1<IEnumerable`1<T>> Batch(IEnumerable`1<T> source, int batchSize);
    public static IAsyncEnumerable`1<IAsyncEnumerable`1<T>> Batch(IAsyncEnumerable`1<T> source, int batchSize);
    [AsyncIteratorStateMachineAttribute("LinqToDB.Common.EnumerableHelper/<BatchSingle>d__5`1")]
private static IAsyncEnumerable`1<IAsyncEnumerable`1<T>> BatchSingle(IAsyncEnumerable`1<T> source);
}
[NullableContextAttribute("1")]
internal interface LinqToDB.Common.IApplicable`1 {
    public abstract virtual void Apply(T obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Common.Internal.Cache.CacheEntry`2 : object {
    private bool _disposed;
    private static Action`1<object> ExpirationCallback;
    private Action`1<CacheEntry`2<TKey, TEntry>> _notifyCacheOfExpiration;
    private Action`1<CacheEntry`2<TKey, TEntry>> _notifyCacheEntryCommit;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IList`1<IDisposable> _expirationTokenRegistrations;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IList`1<PostEvictionCallbackRegistration`1<TKey>> _postEvictionCallbacks;
    private bool _isExpired;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal IList`1<IChangeToken> _expirationTokens;
    internal Nullable`1<DateTimeOffset> _absoluteExpiration;
    internal Nullable`1<TimeSpan> _absoluteExpirationRelativeToNow;
    private Nullable`1<TimeSpan> _slidingExpiration;
    private Nullable`1<long> _size;
    [NullableAttribute("2")]
private IDisposable _scope;
    [NullableAttribute("2")]
private TEntry _value;
    private bool _valueHasBeenSet;
    internal object _lock;
    [CompilerGeneratedAttribute]
private CacheItemPriority <Priority>k__BackingField;
    [CompilerGeneratedAttribute]
private TKey <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <LastAccessed>k__BackingField;
    [CompilerGeneratedAttribute]
private EvictionReason <EvictionReason>k__BackingField;
    public Nullable`1<DateTimeOffset> AbsoluteExpiration { get; public set; }
    public Nullable`1<TimeSpan> AbsoluteExpirationRelativeToNow { get; public set; }
    public Nullable`1<TimeSpan> SlidingExpiration { get; public set; }
    public IList`1<IChangeToken> ExpirationTokens { get; }
    public IList`1<PostEvictionCallbackRegistration`1<TKey>> PostEvictionCallbacks { get; }
    public CacheItemPriority Priority { get; public set; }
    public Nullable`1<long> Size { get; public set; }
    public TKey Key { get; private set; }
    [NullableAttribute("2")]
public TEntry Value { get; public set; }
    internal DateTimeOffset LastAccessed { get; internal set; }
    internal EvictionReason EvictionReason { get; private set; }
    internal CacheEntry`2(TKey key, Action`1<CacheEntry`2<TKey, TEntry>> notifyCacheEntryCommit, Action`1<CacheEntry`2<TKey, TEntry>> notifyCacheOfExpiration);
    private static CacheEntry`2();
    public sealed virtual Nullable`1<DateTimeOffset> get_AbsoluteExpiration();
    public sealed virtual void set_AbsoluteExpiration(Nullable`1<DateTimeOffset> value);
    public sealed virtual Nullable`1<TimeSpan> get_AbsoluteExpirationRelativeToNow();
    public sealed virtual void set_AbsoluteExpirationRelativeToNow(Nullable`1<TimeSpan> value);
    public sealed virtual Nullable`1<TimeSpan> get_SlidingExpiration();
    public sealed virtual void set_SlidingExpiration(Nullable`1<TimeSpan> value);
    public sealed virtual IList`1<IChangeToken> get_ExpirationTokens();
    public sealed virtual IList`1<PostEvictionCallbackRegistration`1<TKey>> get_PostEvictionCallbacks();
    [CompilerGeneratedAttribute]
public sealed virtual CacheItemPriority get_Priority();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Priority(CacheItemPriority value);
    public sealed virtual Nullable`1<long> get_Size();
    public sealed virtual void set_Size(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public sealed virtual TKey get_Key();
    [CompilerGeneratedAttribute]
private void set_Key(TKey value);
    [NullableContextAttribute("2")]
public sealed virtual TEntry get_Value();
    [NullableContextAttribute("2")]
public sealed virtual void set_Value(TEntry value);
    [CompilerGeneratedAttribute]
internal DateTimeOffset get_LastAccessed();
    [CompilerGeneratedAttribute]
internal void set_LastAccessed(DateTimeOffset value);
    [CompilerGeneratedAttribute]
internal EvictionReason get_EvictionReason();
    [CompilerGeneratedAttribute]
private void set_EvictionReason(EvictionReason value);
    public sealed virtual void Dispose();
    internal bool CheckExpired(DateTimeOffset now);
    internal void SetExpired(EvictionReason reason);
    private bool CheckForExpiredTime(DateTimeOffset now);
    internal bool CheckForExpiredTokens();
    internal void AttachTokens();
    private static void ExpirationTokensExpired(object obj);
    private void DetachTokens();
    internal void InvokeEvictionCallbacks();
    private static void InvokeCallbacks(CacheEntry`2<TKey, TEntry> entry);
    internal void PropagateOptions(CacheEntry`2<TKey, TEntry> parent);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class LinqToDB.Common.Internal.Cache.CacheEntryExtensions : object {
    [ExtensionAttribute]
public static ICacheEntry`2<TKey, TEntry> SetPriority(ICacheEntry`2<TKey, TEntry> entry, CacheItemPriority priority);
    [ExtensionAttribute]
public static ICacheEntry`2<TKey, TEntry> AddExpirationToken(ICacheEntry`2<TKey, TEntry> entry, IChangeToken expirationToken);
    [ExtensionAttribute]
public static ICacheEntry`2<TKey, TEntry> SetAbsoluteExpiration(ICacheEntry`2<TKey, TEntry> entry, TimeSpan relative);
    [ExtensionAttribute]
public static ICacheEntry`2<TKey, TEntry> SetAbsoluteExpiration(ICacheEntry`2<TKey, TEntry> entry, DateTimeOffset absolute);
    [ExtensionAttribute]
public static ICacheEntry`2<TKey, TEntry> SetSlidingExpiration(ICacheEntry`2<TKey, TEntry> entry, TimeSpan offset);
    [ExtensionAttribute]
public static ICacheEntry`2<TKey, TEntry> RegisterPostEvictionCallback(ICacheEntry`2<TKey, TEntry> entry, PostEvictionDelegate`1<TKey> callback);
    [ExtensionAttribute]
public static ICacheEntry`2<TKey, TEntry> RegisterPostEvictionCallback(ICacheEntry`2<TKey, TEntry> entry, PostEvictionDelegate`1<TKey> callback, object state);
    [ExtensionAttribute]
public static ICacheEntry`2<TKey, TEntry> SetValue(ICacheEntry`2<TKey, TEntry> entry, TEntry value);
    [ExtensionAttribute]
public static ICacheEntry`2<TKey, TEntry> SetSize(ICacheEntry`2<TKey, TEntry> entry, long size);
    [ExtensionAttribute]
public static ICacheEntry`2<TKey, TEntry> SetOptions(ICacheEntry`2<TKey, TEntry> entry, MemoryCacheEntryOptions`1<TKey> options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Common.Internal.Cache.CacheEntryHelper`2 : object {
    private static AsyncLocal`1<CacheEntryStack`2<TKey, TEntry>> _scopes;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static CacheEntryStack`2<TKey, TEntry> Scopes { get; internal set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static CacheEntry`2<TKey, TEntry> Current { get; }
    private static CacheEntryHelper`2();
    internal static CacheEntryStack`2<TKey, TEntry> get_Scopes();
    internal static void set_Scopes(CacheEntryStack`2<TKey, TEntry> value);
    internal static CacheEntry`2<TKey, TEntry> get_Current();
    internal static IDisposable EnterScope(CacheEntry`2<TKey, TEntry> entry);
    private static CacheEntryStack`2<TKey, TEntry> GetOrCreateScopes();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Common.Internal.Cache.CacheEntryStack`2 : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private CacheEntryStack`2<TKey, TEntry> _previous;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private CacheEntry`2<TKey, TEntry> _entry;
    [CompilerGeneratedAttribute]
private static CacheEntryStack`2<TKey, TEntry> <Empty>k__BackingField;
    public static CacheEntryStack`2<TKey, TEntry> Empty { get; }
    private CacheEntryStack`2(CacheEntryStack`2<TKey, TEntry> previous, CacheEntry`2<TKey, TEntry> entry);
    private static CacheEntryStack`2();
    [CompilerGeneratedAttribute]
public static CacheEntryStack`2<TKey, TEntry> get_Empty();
    public CacheEntryStack`2<TKey, TEntry> Push(CacheEntry`2<TKey, TEntry> c);
    public CacheEntry`2<TKey, TEntry> Peek();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class LinqToDB.Common.Internal.Cache.CacheExtensions : object {
    [ExtensionAttribute]
public static TItem Get(IMemoryCache`2<TKey, TItem> cache, TKey key);
    [ExtensionAttribute]
public static TItem Set(IMemoryCache`2<TKey, TItem> cache, TKey key, TItem value);
    [ExtensionAttribute]
public static TItem Set(IMemoryCache`2<TKey, TItem> cache, TKey key, TItem value, DateTimeOffset absoluteExpiration);
    [ExtensionAttribute]
public static TItem Set(IMemoryCache`2<TKey, TItem> cache, TKey key, TItem value, TimeSpan absoluteExpirationRelativeToNow);
    [ExtensionAttribute]
public static TItem Set(IMemoryCache`2<TKey, TItem> cache, TKey key, TItem value, IChangeToken expirationToken);
    [ExtensionAttribute]
public static TItem Set(IMemoryCache`2<TKey, TItem> cache, TKey key, TItem value, MemoryCacheEntryOptions`1<TKey> options);
    [ExtensionAttribute]
public static TItem GetOrCreate(IMemoryCache`2<TKey, TItem> cache, TKey key, Func`2<ICacheEntry`2<TKey, TItem>, TItem> factory);
    [ExtensionAttribute]
public static TItem GetOrCreate(IMemoryCache`2<TKey, TItem> cache, TKey key, TContext context, Func`3<ICacheEntry`2<TKey, TItem>, TContext, TItem> factory);
    [ExtensionAttribute]
public static TItem GetOrCreate(IMemoryCache`2<TKey, TItem> cache, TDerivedKey key, TContext context, Func`4<ICacheEntry`2<TKey, TItem>, TDerivedKey, TContext, TItem> factory);
    [AsyncStateMachineAttribute("LinqToDB.Common.Internal.Cache.CacheExtensions/<GetOrCreateAsync>d__9`2")]
[ExtensionAttribute]
public static Task`1<TItem> GetOrCreateAsync(IMemoryCache`2<TKey, TItem> cache, TKey key, Func`2<ICacheEntry`2<TKey, TItem>, Task`1<TItem>> factory);
}
public enum LinqToDB.Common.Internal.Cache.CacheItemPriority : Enum {
    public int value__;
    public static CacheItemPriority Low;
    public static CacheItemPriority Normal;
    public static CacheItemPriority High;
    public static CacheItemPriority NeverRemove;
}
public enum LinqToDB.Common.Internal.Cache.EvictionReason : Enum {
    public int value__;
    public static EvictionReason None;
    public static EvictionReason Removed;
    public static EvictionReason Replaced;
    public static EvictionReason Expired;
    public static EvictionReason TokenExpired;
    public static EvictionReason Capacity;
}
[NullableContextAttribute("1")]
public interface LinqToDB.Common.Internal.Cache.ICacheEntry`2 {
    public TKey Key { get; }
    [NullableAttribute("2")]
public TEntity Value { get; public set; }
    public Nullable`1<DateTimeOffset> AbsoluteExpiration { get; public set; }
    public Nullable`1<TimeSpan> AbsoluteExpirationRelativeToNow { get; public set; }
    public Nullable`1<TimeSpan> SlidingExpiration { get; public set; }
    public IList`1<IChangeToken> ExpirationTokens { get; }
    public IList`1<PostEvictionCallbackRegistration`1<TKey>> PostEvictionCallbacks { get; }
    public CacheItemPriority Priority { get; public set; }
    public Nullable`1<long> Size { get; public set; }
    public abstract virtual TKey get_Key();
    [NullableContextAttribute("2")]
public abstract virtual TEntity get_Value();
    [NullableContextAttribute("2")]
public abstract virtual void set_Value(TEntity value);
    public abstract virtual Nullable`1<DateTimeOffset> get_AbsoluteExpiration();
    public abstract virtual void set_AbsoluteExpiration(Nullable`1<DateTimeOffset> value);
    public abstract virtual Nullable`1<TimeSpan> get_AbsoluteExpirationRelativeToNow();
    public abstract virtual void set_AbsoluteExpirationRelativeToNow(Nullable`1<TimeSpan> value);
    public abstract virtual Nullable`1<TimeSpan> get_SlidingExpiration();
    public abstract virtual void set_SlidingExpiration(Nullable`1<TimeSpan> value);
    public abstract virtual IList`1<IChangeToken> get_ExpirationTokens();
    public abstract virtual IList`1<PostEvictionCallbackRegistration`1<TKey>> get_PostEvictionCallbacks();
    public abstract virtual CacheItemPriority get_Priority();
    public abstract virtual void set_Priority(CacheItemPriority value);
    public abstract virtual Nullable`1<long> get_Size();
    public abstract virtual void set_Size(Nullable`1<long> value);
}
[NullableContextAttribute("1")]
public interface LinqToDB.Common.Internal.Cache.IChangeToken {
    public bool HasChanged { get; }
    public bool ActiveChangeCallbacks { get; }
    public abstract virtual bool get_HasChanged();
    public abstract virtual bool get_ActiveChangeCallbacks();
    public abstract virtual IDisposable RegisterChangeCallback(Action`1<object> callback, object state);
}
[NullableContextAttribute("1")]
public interface LinqToDB.Common.Internal.Cache.IMemoryCache`2 {
    public abstract virtual bool TryGetValue(TKey key, TEntry& value);
    public abstract virtual ICacheEntry`2<TKey, TEntry> CreateEntry(TKey key);
    public abstract virtual void Remove(TKey key);
}
public interface LinqToDB.Common.Internal.Cache.ISystemClock {
    public DateTimeOffset UtcNow { get; }
    public abstract virtual DateTimeOffset get_UtcNow();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.Common.Internal.Cache.MemoryCache`2 : object {
    private ConcurrentDictionary`2<TKey, CacheEntry`2<TKey, TEntry>> _entries;
    private long _cacheSize;
    private bool _disposed;
    private Action`1<CacheEntry`2<TKey, TEntry>> _setEntry;
    private Action`1<CacheEntry`2<TKey, TEntry>> _entryExpirationNotification;
    private MemoryCacheOptions _options;
    private DateTimeOffset _lastExpirationScan;
    public int Count { get; }
    internal long Size { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ICollection`1<KeyValuePair`2<TKey, CacheEntry`2<TKey, TEntry>>> EntriesCollection { get; }
    public MemoryCache`2(MemoryCacheOptions optionsAccessor);
    protected virtual override void Finalize();
    public int get_Count();
    internal long get_Size();
    private ICollection`1<KeyValuePair`2<TKey, CacheEntry`2<TKey, TEntry>>> get_EntriesCollection();
    public sealed virtual ICacheEntry`2<TKey, TEntry> CreateEntry(TKey key);
    private void SetEntry(CacheEntry`2<TKey, TEntry> entry);
    public sealed virtual bool TryGetValue(TKey key, TEntry& value);
    public sealed virtual void Remove(TKey key);
    private void RemoveEntry(CacheEntry`2<TKey, TEntry> entry);
    private void EntryExpired(CacheEntry`2<TKey, TEntry> entry);
    private void StartScanForExpiredItems(Nullable`1<DateTimeOffset> utcNow);
    private static void ScanForExpiredItems(MemoryCache`2<TKey, TEntry> cache);
    private bool UpdateCacheSizeExceedsCapacity(CacheEntry`2<TKey, TEntry> entry);
    private void TriggerOvercapacityCompaction();
    private static void OvercapacityCompaction(MemoryCache`2<TKey, TEntry> cache);
    public void Compact(double percentage);
    public void Clear();
    private void Compact(long removalSizeTarget, Func`2<CacheEntry`2<TKey, TEntry>, long> computeEntrySize);
    private static void ExpirePriorityBucket(Int64& removedSize, long removalSizeTarget, Func`2<CacheEntry`2<TKey, TEntry>, long> computeEntrySize, List`1<CacheEntry`2<TKey, TEntry>> entriesToRemove, List`1<CacheEntry`2<TKey, TEntry>> priorityEntries);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    private void CheckDisposed();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class LinqToDB.Common.Internal.Cache.MemoryCacheEntryExtensions : object {
    [ExtensionAttribute]
public static MemoryCacheEntryOptions`1<TKey> SetPriority(MemoryCacheEntryOptions`1<TKey> options, CacheItemPriority priority);
    [ExtensionAttribute]
public static MemoryCacheEntryOptions`1<TKey> SetSize(MemoryCacheEntryOptions`1<TKey> options, long size);
    [ExtensionAttribute]
public static MemoryCacheEntryOptions`1<TKey> AddExpirationToken(MemoryCacheEntryOptions`1<TKey> options, IChangeToken expirationToken);
    [ExtensionAttribute]
public static MemoryCacheEntryOptions`1<TKey> SetAbsoluteExpiration(MemoryCacheEntryOptions`1<TKey> options, TimeSpan relative);
    [ExtensionAttribute]
public static MemoryCacheEntryOptions`1<TKey> SetAbsoluteExpiration(MemoryCacheEntryOptions`1<TKey> options, DateTimeOffset absolute);
    [ExtensionAttribute]
public static MemoryCacheEntryOptions`1<TKey> SetSlidingExpiration(MemoryCacheEntryOptions`1<TKey> options, TimeSpan offset);
    [ExtensionAttribute]
public static MemoryCacheEntryOptions`1<TKey> RegisterPostEvictionCallback(MemoryCacheEntryOptions`1<TKey> options, PostEvictionDelegate`1<TKey> callback);
    [ExtensionAttribute]
public static MemoryCacheEntryOptions`1<TKey> RegisterPostEvictionCallback(MemoryCacheEntryOptions`1<TKey> options, PostEvictionDelegate`1<TKey> callback, object state);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.Common.Internal.Cache.MemoryCacheEntryOptions`1 : object {
    private Nullable`1<DateTimeOffset> _absoluteExpiration;
    private Nullable`1<TimeSpan> _absoluteExpirationRelativeToNow;
    private Nullable`1<TimeSpan> _slidingExpiration;
    private Nullable`1<long> _size;
    [CompilerGeneratedAttribute]
private IList`1<IChangeToken> <ExpirationTokens>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<PostEvictionCallbackRegistration`1<TKey>> <PostEvictionCallbacks>k__BackingField;
    [CompilerGeneratedAttribute]
private CacheItemPriority <Priority>k__BackingField;
    public Nullable`1<DateTimeOffset> AbsoluteExpiration { get; public set; }
    public Nullable`1<TimeSpan> AbsoluteExpirationRelativeToNow { get; public set; }
    public Nullable`1<TimeSpan> SlidingExpiration { get; public set; }
    public IList`1<IChangeToken> ExpirationTokens { get; }
    public IList`1<PostEvictionCallbackRegistration`1<TKey>> PostEvictionCallbacks { get; }
    public CacheItemPriority Priority { get; public set; }
    public Nullable`1<long> Size { get; public set; }
    public Nullable`1<DateTimeOffset> get_AbsoluteExpiration();
    public void set_AbsoluteExpiration(Nullable`1<DateTimeOffset> value);
    public Nullable`1<TimeSpan> get_AbsoluteExpirationRelativeToNow();
    public void set_AbsoluteExpirationRelativeToNow(Nullable`1<TimeSpan> value);
    public Nullable`1<TimeSpan> get_SlidingExpiration();
    public void set_SlidingExpiration(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public IList`1<IChangeToken> get_ExpirationTokens();
    [CompilerGeneratedAttribute]
public IList`1<PostEvictionCallbackRegistration`1<TKey>> get_PostEvictionCallbacks();
    [CompilerGeneratedAttribute]
public CacheItemPriority get_Priority();
    [CompilerGeneratedAttribute]
public void set_Priority(CacheItemPriority value);
    public Nullable`1<long> get_Size();
    public void set_Size(Nullable`1<long> value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class LinqToDB.Common.Internal.Cache.MemoryCacheOptions : object {
    private Nullable`1<long> _sizeLimit;
    private double _compactionPercentage;
    [CompilerGeneratedAttribute]
private ISystemClock <Clock>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <ExpirationScanFrequency>k__BackingField;
    public ISystemClock Clock { get; public set; }
    public TimeSpan ExpirationScanFrequency { get; public set; }
    public Nullable`1<long> SizeLimit { get; public set; }
    public double CompactionPercentage { get; public set; }
    [CompilerGeneratedAttribute]
public ISystemClock get_Clock();
    [CompilerGeneratedAttribute]
public void set_Clock(ISystemClock value);
    [CompilerGeneratedAttribute]
public TimeSpan get_ExpirationScanFrequency();
    [CompilerGeneratedAttribute]
public void set_ExpirationScanFrequency(TimeSpan value);
    public Nullable`1<long> get_SizeLimit();
    public void set_SizeLimit(Nullable`1<long> value);
    public double get_CompactionPercentage();
    public void set_CompactionPercentage(double value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.Common.Internal.Cache.PostEvictionCallbackRegistration`1 : object {
    [CompilerGeneratedAttribute]
private PostEvictionDelegate`1<TKey> <EvictionCallback>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private object <State>k__BackingField;
    public PostEvictionDelegate`1<TKey> EvictionCallback { get; public set; }
    [NullableAttribute("2")]
public object State { get; public set; }
    [CompilerGeneratedAttribute]
public PostEvictionDelegate`1<TKey> get_EvictionCallback();
    [CompilerGeneratedAttribute]
public void set_EvictionCallback(PostEvictionDelegate`1<TKey> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public object get_State();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_State(object value);
}
public class LinqToDB.Common.Internal.Cache.PostEvictionDelegate`1 : MulticastDelegate {
    public PostEvictionDelegate`1(object object, IntPtr method);
    [NullableContextAttribute("2")]
public virtual void Invoke(TKey key, object value, EvictionReason reason, object state);
    public virtual IAsyncResult BeginInvoke(TKey key, object value, EvictionReason reason, object state, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class LinqToDB.Common.Internal.Cache.SystemClock : object {
    public DateTimeOffset UtcNow { get; }
    public sealed virtual DateTimeOffset get_UtcNow();
}
public interface LinqToDB.Common.Internal.IConfigurationID {
    public int ConfigurationID { get; }
    public abstract virtual int get_ConfigurationID();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class LinqToDB.Common.Internal.IdentifierBuilder : ValueType {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private RentedElement<StringBuilder> _sb;
    private static int _identifierCounter;
    private static ConcurrentDictionary`2<string, int> _identifiers;
    private static int _typeCounter;
    private static ConcurrentDictionary`2<Type, string> _types;
    private static int _expressionCounter;
    private static ConcurrentDictionary`2<string, int> _expressions;
    private static int _methodCounter;
    private static ConcurrentDictionary`2<MethodInfo, int> _methods;
    private static int _objectCounter;
    private static ConcurrentDictionary`2<object, string> _objects;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static List`1<ValueTuple`2<object, object>> _buggyObjects;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static String[] _intToString;
    [NullableContextAttribute("2")]
public IdentifierBuilder(object data);
    private static IdentifierBuilder();
    private static void ClearCache();
    [NullableContextAttribute("2")]
public IdentifierBuilder Add(IConfigurationID data);
    [NullableContextAttribute("2")]
public IdentifierBuilder Add(string data);
    public IdentifierBuilder Add(bool data);
    [NullableContextAttribute("2")]
public IdentifierBuilder Add(object data);
    [NullableContextAttribute("2")]
public IdentifierBuilder Add(Delegate data);
    public IdentifierBuilder Add(Nullable`1<int> data);
    public IdentifierBuilder Add(string format, object data);
    public IdentifierBuilder AddRange(IEnumerable items);
    [NullableContextAttribute("2")]
public IdentifierBuilder AddTypes(IEnumerable items);
    public int CreateID();
    public static int CreateNextID();
    public static string GetObjectID(Type obj);
    [NullableContextAttribute("2")]
public static int GetObjectID(Expression ex);
    public static string GetObjectID(MethodInfo m);
    public static string GetObjectID(object obj);
    private static string GetIntID(int id);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
internal static string <GetObjectID>g__GetOrAddObject|29_0(object o);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class LinqToDB.Common.Internal.MemberCache : object {
    private static ConcurrentDictionary`2<MemberInfo, Info> _cache;
    private static Info _defaultInfo;
    private static Info _isQueryableInfo;
    private static MemberCache();
    public static void ClearCache();
    public static Info GetMemberInfo(MemberInfo member);
}
internal class LinqToDB.Common.Internal.MTuple`1 : object {
    [CompilerGeneratedAttribute]
private T1 <Item1>k__BackingField;
    private static IEqualityComparer`1<T1> _item1ValueComparer;
    public T1 Item1 { get; public set; }
    private static MTuple`1();
    [CompilerGeneratedAttribute]
public T1 get_Item1();
    [CompilerGeneratedAttribute]
public void set_Item1(T1 value);
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
}
internal class LinqToDB.Common.Internal.MTuple`10 : object {
    [CompilerGeneratedAttribute]
private T1 <Item1>k__BackingField;
    [CompilerGeneratedAttribute]
private T2 <Item2>k__BackingField;
    [CompilerGeneratedAttribute]
private T3 <Item3>k__BackingField;
    [CompilerGeneratedAttribute]
private T4 <Item4>k__BackingField;
    [CompilerGeneratedAttribute]
private T5 <Item5>k__BackingField;
    [CompilerGeneratedAttribute]
private T6 <Item6>k__BackingField;
    [CompilerGeneratedAttribute]
private T7 <Item7>k__BackingField;
    [CompilerGeneratedAttribute]
private T8 <Item8>k__BackingField;
    [CompilerGeneratedAttribute]
private T9 <Item9>k__BackingField;
    [CompilerGeneratedAttribute]
private T10 <Item10>k__BackingField;
    private static IEqualityComparer`1<T1> _item1ValueComparer;
    private static IEqualityComparer`1<T2> _item2ValueComparer;
    private static IEqualityComparer`1<T3> _item3ValueComparer;
    private static IEqualityComparer`1<T4> _item4ValueComparer;
    private static IEqualityComparer`1<T5> _item5ValueComparer;
    private static IEqualityComparer`1<T6> _item6ValueComparer;
    private static IEqualityComparer`1<T7> _item7ValueComparer;
    private static IEqualityComparer`1<T8> _item8ValueComparer;
    private static IEqualityComparer`1<T9> _item9ValueComparer;
    private static IEqualityComparer`1<T10> _item10ValueComparer;
    public T1 Item1 { get; public set; }
    public T2 Item2 { get; public set; }
    public T3 Item3 { get; public set; }
    public T4 Item4 { get; public set; }
    public T5 Item5 { get; public set; }
    public T6 Item6 { get; public set; }
    public T7 Item7 { get; public set; }
    public T8 Item8 { get; public set; }
    public T9 Item9 { get; public set; }
    public T10 Item10 { get; public set; }
    private static MTuple`10();
    [CompilerGeneratedAttribute]
public T1 get_Item1();
    [CompilerGeneratedAttribute]
public void set_Item1(T1 value);
    [CompilerGeneratedAttribute]
public T2 get_Item2();
    [CompilerGeneratedAttribute]
public void set_Item2(T2 value);
    [CompilerGeneratedAttribute]
public T3 get_Item3();
    [CompilerGeneratedAttribute]
public void set_Item3(T3 value);
    [CompilerGeneratedAttribute]
public T4 get_Item4();
    [CompilerGeneratedAttribute]
public void set_Item4(T4 value);
    [CompilerGeneratedAttribute]
public T5 get_Item5();
    [CompilerGeneratedAttribute]
public void set_Item5(T5 value);
    [CompilerGeneratedAttribute]
public T6 get_Item6();
    [CompilerGeneratedAttribute]
public void set_Item6(T6 value);
    [CompilerGeneratedAttribute]
public T7 get_Item7();
    [CompilerGeneratedAttribute]
public void set_Item7(T7 value);
    [CompilerGeneratedAttribute]
public T8 get_Item8();
    [CompilerGeneratedAttribute]
public void set_Item8(T8 value);
    [CompilerGeneratedAttribute]
public T9 get_Item9();
    [CompilerGeneratedAttribute]
public void set_Item9(T9 value);
    [CompilerGeneratedAttribute]
public T10 get_Item10();
    [CompilerGeneratedAttribute]
public void set_Item10(T10 value);
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
}
internal class LinqToDB.Common.Internal.MTuple`2 : object {
    [CompilerGeneratedAttribute]
private T1 <Item1>k__BackingField;
    [CompilerGeneratedAttribute]
private T2 <Item2>k__BackingField;
    private static IEqualityComparer`1<T1> _item1ValueComparer;
    private static IEqualityComparer`1<T2> _item2ValueComparer;
    public T1 Item1 { get; public set; }
    public T2 Item2 { get; public set; }
    private static MTuple`2();
    [CompilerGeneratedAttribute]
public T1 get_Item1();
    [CompilerGeneratedAttribute]
public void set_Item1(T1 value);
    [CompilerGeneratedAttribute]
public T2 get_Item2();
    [CompilerGeneratedAttribute]
public void set_Item2(T2 value);
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
}
internal class LinqToDB.Common.Internal.MTuple`3 : object {
    [CompilerGeneratedAttribute]
private T1 <Item1>k__BackingField;
    [CompilerGeneratedAttribute]
private T2 <Item2>k__BackingField;
    [CompilerGeneratedAttribute]
private T3 <Item3>k__BackingField;
    private static IEqualityComparer`1<T1> _item1ValueComparer;
    private static IEqualityComparer`1<T2> _item2ValueComparer;
    private static IEqualityComparer`1<T3> _item3ValueComparer;
    public T1 Item1 { get; public set; }
    public T2 Item2 { get; public set; }
    public T3 Item3 { get; public set; }
    private static MTuple`3();
    [CompilerGeneratedAttribute]
public T1 get_Item1();
    [CompilerGeneratedAttribute]
public void set_Item1(T1 value);
    [CompilerGeneratedAttribute]
public T2 get_Item2();
    [CompilerGeneratedAttribute]
public void set_Item2(T2 value);
    [CompilerGeneratedAttribute]
public T3 get_Item3();
    [CompilerGeneratedAttribute]
public void set_Item3(T3 value);
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
}
internal class LinqToDB.Common.Internal.MTuple`4 : object {
    [CompilerGeneratedAttribute]
private T1 <Item1>k__BackingField;
    [CompilerGeneratedAttribute]
private T2 <Item2>k__BackingField;
    [CompilerGeneratedAttribute]
private T3 <Item3>k__BackingField;
    [CompilerGeneratedAttribute]
private T4 <Item4>k__BackingField;
    private static IEqualityComparer`1<T1> _item1ValueComparer;
    private static IEqualityComparer`1<T2> _item2ValueComparer;
    private static IEqualityComparer`1<T3> _item3ValueComparer;
    private static IEqualityComparer`1<T4> _item4ValueComparer;
    public T1 Item1 { get; public set; }
    public T2 Item2 { get; public set; }
    public T3 Item3 { get; public set; }
    public T4 Item4 { get; public set; }
    private static MTuple`4();
    [CompilerGeneratedAttribute]
public T1 get_Item1();
    [CompilerGeneratedAttribute]
public void set_Item1(T1 value);
    [CompilerGeneratedAttribute]
public T2 get_Item2();
    [CompilerGeneratedAttribute]
public void set_Item2(T2 value);
    [CompilerGeneratedAttribute]
public T3 get_Item3();
    [CompilerGeneratedAttribute]
public void set_Item3(T3 value);
    [CompilerGeneratedAttribute]
public T4 get_Item4();
    [CompilerGeneratedAttribute]
public void set_Item4(T4 value);
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
}
internal class LinqToDB.Common.Internal.MTuple`5 : object {
    [CompilerGeneratedAttribute]
private T1 <Item1>k__BackingField;
    [CompilerGeneratedAttribute]
private T2 <Item2>k__BackingField;
    [CompilerGeneratedAttribute]
private T3 <Item3>k__BackingField;
    [CompilerGeneratedAttribute]
private T4 <Item4>k__BackingField;
    [CompilerGeneratedAttribute]
private T5 <Item5>k__BackingField;
    private static IEqualityComparer`1<T1> _item1ValueComparer;
    private static IEqualityComparer`1<T2> _item2ValueComparer;
    private static IEqualityComparer`1<T3> _item3ValueComparer;
    private static IEqualityComparer`1<T4> _item4ValueComparer;
    private static IEqualityComparer`1<T5> _item5ValueComparer;
    public T1 Item1 { get; public set; }
    public T2 Item2 { get; public set; }
    public T3 Item3 { get; public set; }
    public T4 Item4 { get; public set; }
    public T5 Item5 { get; public set; }
    private static MTuple`5();
    [CompilerGeneratedAttribute]
public T1 get_Item1();
    [CompilerGeneratedAttribute]
public void set_Item1(T1 value);
    [CompilerGeneratedAttribute]
public T2 get_Item2();
    [CompilerGeneratedAttribute]
public void set_Item2(T2 value);
    [CompilerGeneratedAttribute]
public T3 get_Item3();
    [CompilerGeneratedAttribute]
public void set_Item3(T3 value);
    [CompilerGeneratedAttribute]
public T4 get_Item4();
    [CompilerGeneratedAttribute]
public void set_Item4(T4 value);
    [CompilerGeneratedAttribute]
public T5 get_Item5();
    [CompilerGeneratedAttribute]
public void set_Item5(T5 value);
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
}
internal class LinqToDB.Common.Internal.MTuple`6 : object {
    [CompilerGeneratedAttribute]
private T1 <Item1>k__BackingField;
    [CompilerGeneratedAttribute]
private T2 <Item2>k__BackingField;
    [CompilerGeneratedAttribute]
private T3 <Item3>k__BackingField;
    [CompilerGeneratedAttribute]
private T4 <Item4>k__BackingField;
    [CompilerGeneratedAttribute]
private T5 <Item5>k__BackingField;
    [CompilerGeneratedAttribute]
private T6 <Item6>k__BackingField;
    private static IEqualityComparer`1<T1> _item1ValueComparer;
    private static IEqualityComparer`1<T2> _item2ValueComparer;
    private static IEqualityComparer`1<T3> _item3ValueComparer;
    private static IEqualityComparer`1<T4> _item4ValueComparer;
    private static IEqualityComparer`1<T5> _item5ValueComparer;
    private static IEqualityComparer`1<T6> _item6ValueComparer;
    public T1 Item1 { get; public set; }
    public T2 Item2 { get; public set; }
    public T3 Item3 { get; public set; }
    public T4 Item4 { get; public set; }
    public T5 Item5 { get; public set; }
    public T6 Item6 { get; public set; }
    private static MTuple`6();
    [CompilerGeneratedAttribute]
public T1 get_Item1();
    [CompilerGeneratedAttribute]
public void set_Item1(T1 value);
    [CompilerGeneratedAttribute]
public T2 get_Item2();
    [CompilerGeneratedAttribute]
public void set_Item2(T2 value);
    [CompilerGeneratedAttribute]
public T3 get_Item3();
    [CompilerGeneratedAttribute]
public void set_Item3(T3 value);
    [CompilerGeneratedAttribute]
public T4 get_Item4();
    [CompilerGeneratedAttribute]
public void set_Item4(T4 value);
    [CompilerGeneratedAttribute]
public T5 get_Item5();
    [CompilerGeneratedAttribute]
public void set_Item5(T5 value);
    [CompilerGeneratedAttribute]
public T6 get_Item6();
    [CompilerGeneratedAttribute]
public void set_Item6(T6 value);
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
}
internal class LinqToDB.Common.Internal.MTuple`7 : object {
    [CompilerGeneratedAttribute]
private T1 <Item1>k__BackingField;
    [CompilerGeneratedAttribute]
private T2 <Item2>k__BackingField;
    [CompilerGeneratedAttribute]
private T3 <Item3>k__BackingField;
    [CompilerGeneratedAttribute]
private T4 <Item4>k__BackingField;
    [CompilerGeneratedAttribute]
private T5 <Item5>k__BackingField;
    [CompilerGeneratedAttribute]
private T6 <Item6>k__BackingField;
    [CompilerGeneratedAttribute]
private T7 <Item7>k__BackingField;
    private static IEqualityComparer`1<T1> _item1ValueComparer;
    private static IEqualityComparer`1<T2> _item2ValueComparer;
    private static IEqualityComparer`1<T3> _item3ValueComparer;
    private static IEqualityComparer`1<T4> _item4ValueComparer;
    private static IEqualityComparer`1<T5> _item5ValueComparer;
    private static IEqualityComparer`1<T6> _item6ValueComparer;
    private static IEqualityComparer`1<T7> _item7ValueComparer;
    public T1 Item1 { get; public set; }
    public T2 Item2 { get; public set; }
    public T3 Item3 { get; public set; }
    public T4 Item4 { get; public set; }
    public T5 Item5 { get; public set; }
    public T6 Item6 { get; public set; }
    public T7 Item7 { get; public set; }
    private static MTuple`7();
    [CompilerGeneratedAttribute]
public T1 get_Item1();
    [CompilerGeneratedAttribute]
public void set_Item1(T1 value);
    [CompilerGeneratedAttribute]
public T2 get_Item2();
    [CompilerGeneratedAttribute]
public void set_Item2(T2 value);
    [CompilerGeneratedAttribute]
public T3 get_Item3();
    [CompilerGeneratedAttribute]
public void set_Item3(T3 value);
    [CompilerGeneratedAttribute]
public T4 get_Item4();
    [CompilerGeneratedAttribute]
public void set_Item4(T4 value);
    [CompilerGeneratedAttribute]
public T5 get_Item5();
    [CompilerGeneratedAttribute]
public void set_Item5(T5 value);
    [CompilerGeneratedAttribute]
public T6 get_Item6();
    [CompilerGeneratedAttribute]
public void set_Item6(T6 value);
    [CompilerGeneratedAttribute]
public T7 get_Item7();
    [CompilerGeneratedAttribute]
public void set_Item7(T7 value);
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
}
internal class LinqToDB.Common.Internal.MTuple`8 : object {
    [CompilerGeneratedAttribute]
private T1 <Item1>k__BackingField;
    [CompilerGeneratedAttribute]
private T2 <Item2>k__BackingField;
    [CompilerGeneratedAttribute]
private T3 <Item3>k__BackingField;
    [CompilerGeneratedAttribute]
private T4 <Item4>k__BackingField;
    [CompilerGeneratedAttribute]
private T5 <Item5>k__BackingField;
    [CompilerGeneratedAttribute]
private T6 <Item6>k__BackingField;
    [CompilerGeneratedAttribute]
private T7 <Item7>k__BackingField;
    [CompilerGeneratedAttribute]
private T8 <Item8>k__BackingField;
    private static IEqualityComparer`1<T1> _item1ValueComparer;
    private static IEqualityComparer`1<T2> _item2ValueComparer;
    private static IEqualityComparer`1<T3> _item3ValueComparer;
    private static IEqualityComparer`1<T4> _item4ValueComparer;
    private static IEqualityComparer`1<T5> _item5ValueComparer;
    private static IEqualityComparer`1<T6> _item6ValueComparer;
    private static IEqualityComparer`1<T7> _item7ValueComparer;
    private static IEqualityComparer`1<T8> _item8ValueComparer;
    public T1 Item1 { get; public set; }
    public T2 Item2 { get; public set; }
    public T3 Item3 { get; public set; }
    public T4 Item4 { get; public set; }
    public T5 Item5 { get; public set; }
    public T6 Item6 { get; public set; }
    public T7 Item7 { get; public set; }
    public T8 Item8 { get; public set; }
    private static MTuple`8();
    [CompilerGeneratedAttribute]
public T1 get_Item1();
    [CompilerGeneratedAttribute]
public void set_Item1(T1 value);
    [CompilerGeneratedAttribute]
public T2 get_Item2();
    [CompilerGeneratedAttribute]
public void set_Item2(T2 value);
    [CompilerGeneratedAttribute]
public T3 get_Item3();
    [CompilerGeneratedAttribute]
public void set_Item3(T3 value);
    [CompilerGeneratedAttribute]
public T4 get_Item4();
    [CompilerGeneratedAttribute]
public void set_Item4(T4 value);
    [CompilerGeneratedAttribute]
public T5 get_Item5();
    [CompilerGeneratedAttribute]
public void set_Item5(T5 value);
    [CompilerGeneratedAttribute]
public T6 get_Item6();
    [CompilerGeneratedAttribute]
public void set_Item6(T6 value);
    [CompilerGeneratedAttribute]
public T7 get_Item7();
    [CompilerGeneratedAttribute]
public void set_Item7(T7 value);
    [CompilerGeneratedAttribute]
public T8 get_Item8();
    [CompilerGeneratedAttribute]
public void set_Item8(T8 value);
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
}
internal class LinqToDB.Common.Internal.MTuple`9 : object {
    [CompilerGeneratedAttribute]
private T1 <Item1>k__BackingField;
    [CompilerGeneratedAttribute]
private T2 <Item2>k__BackingField;
    [CompilerGeneratedAttribute]
private T3 <Item3>k__BackingField;
    [CompilerGeneratedAttribute]
private T4 <Item4>k__BackingField;
    [CompilerGeneratedAttribute]
private T5 <Item5>k__BackingField;
    [CompilerGeneratedAttribute]
private T6 <Item6>k__BackingField;
    [CompilerGeneratedAttribute]
private T7 <Item7>k__BackingField;
    [CompilerGeneratedAttribute]
private T8 <Item8>k__BackingField;
    [CompilerGeneratedAttribute]
private T9 <Item9>k__BackingField;
    private static IEqualityComparer`1<T1> _item1ValueComparer;
    private static IEqualityComparer`1<T2> _item2ValueComparer;
    private static IEqualityComparer`1<T3> _item3ValueComparer;
    private static IEqualityComparer`1<T4> _item4ValueComparer;
    private static IEqualityComparer`1<T5> _item5ValueComparer;
    private static IEqualityComparer`1<T6> _item6ValueComparer;
    private static IEqualityComparer`1<T7> _item7ValueComparer;
    private static IEqualityComparer`1<T8> _item8ValueComparer;
    private static IEqualityComparer`1<T9> _item9ValueComparer;
    public T1 Item1 { get; public set; }
    public T2 Item2 { get; public set; }
    public T3 Item3 { get; public set; }
    public T4 Item4 { get; public set; }
    public T5 Item5 { get; public set; }
    public T6 Item6 { get; public set; }
    public T7 Item7 { get; public set; }
    public T8 Item8 { get; public set; }
    public T9 Item9 { get; public set; }
    private static MTuple`9();
    [CompilerGeneratedAttribute]
public T1 get_Item1();
    [CompilerGeneratedAttribute]
public void set_Item1(T1 value);
    [CompilerGeneratedAttribute]
public T2 get_Item2();
    [CompilerGeneratedAttribute]
public void set_Item2(T2 value);
    [CompilerGeneratedAttribute]
public T3 get_Item3();
    [CompilerGeneratedAttribute]
public void set_Item3(T3 value);
    [CompilerGeneratedAttribute]
public T4 get_Item4();
    [CompilerGeneratedAttribute]
public void set_Item4(T4 value);
    [CompilerGeneratedAttribute]
public T5 get_Item5();
    [CompilerGeneratedAttribute]
public void set_Item5(T5 value);
    [CompilerGeneratedAttribute]
public T6 get_Item6();
    [CompilerGeneratedAttribute]
public void set_Item6(T6 value);
    [CompilerGeneratedAttribute]
public T7 get_Item7();
    [CompilerGeneratedAttribute]
public void set_Item7(T7 value);
    [CompilerGeneratedAttribute]
public T8 get_Item8();
    [CompilerGeneratedAttribute]
public void set_Item8(T8 value);
    [CompilerGeneratedAttribute]
public T9 get_Item9();
    [CompilerGeneratedAttribute]
public void set_Item9(T9 value);
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
}
internal static class LinqToDB.Common.Internal.MutableTuple : object {
    public static int MaxMemberCount;
    public static Type[] MTypes;
    private static MutableTuple();
    internal static int CombineHashCodes(int h1, int h2);
    internal static int CombineHashCodes(int h1, int h2, int h3);
    internal static int CombineHashCodes(int h1, int h2, int h3, int h4);
    internal static int CombineHashCodes(int h1, int h2, int h3, int h4, int h5);
    internal static int CombineHashCodes(int h1, int h2, int h3, int h4, int h5, int h6);
    internal static int CombineHashCodes(int h1, int h2, int h3, int h4, int h5, int h6, int h7);
    internal static int CombineHashCodes(int h1, int h2, int h3, int h4, int h5, int h6, int h7, int h8);
    internal static int CombineHashCodes(int h1, int h2, int h3, int h4, int h5, int h6, int h7, int h8, int h9);
    internal static int CombineHashCodes(int h1, int h2, int h3, int h4, int h5, int h6, int h7, int h8, int h9, int h10);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class LinqToDB.Common.Internal.NonCapturingLazyInitializer : object {
    public static TValue EnsureInitialized(TValue& target, TParam param, Func`2<TParam, TValue> valueFactory);
    public static TValue EnsureInitialized(TValue& target, TParam1 param1, TParam2 param2, Func`3<TParam1, TParam2, TValue> valueFactory);
    public static TValue EnsureInitialized(TValue& target, TValue value);
    public static TValue EnsureInitialized(TValue& target, TParam param, Action`1<TParam> valueFactory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Common.Internal.ObjectPool`1 : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Element[] _items;
    private Func`1<T> _factory;
    private Action`1<T> _cleanup;
    internal ObjectPool`1(Func`1<T> factory, Action`1<T> cleanup, int size);
    private T CreateInstance();
    [NullableContextAttribute("0")]
internal RentedElement<T> Allocate();
    internal void Free(T obj);
}
internal static class LinqToDB.Common.Internal.Pools : object {
    [NullableAttribute("1")]
public static ObjectPool`1<StringBuilder> StringBuilder;
    private static Pools();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class LinqToDB.Common.Internal.TaskCache : object {
    public static Task`1<bool> True;
    public static Task`1<bool> False;
    public static Task`1<int> Zero;
    public static Task`1<int> MinusOne;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static Task`1<DataConnectionTransaction> CompletedTransaction;
    private static TaskCache();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class LinqToDB.Common.Internal.TypeExtensions : object {
    [ExtensionAttribute]
internal static Type UnwrapNullableType(Type type);
    [ExtensionAttribute]
internal static bool IsNullableType(Type type);
    [ExtensionAttribute]
public static bool IsInteger(Type type);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
internal static bool IsNumericType(Type type);
    [ExtensionAttribute]
internal static bool IsSignedInteger(Type type);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
internal static bool IsSignedType(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class LinqToDB.Common.Internal.ValueComparer : object {
    private protected static MethodInfo _doubleEqualsMethodInfo;
    private protected static MethodInfo _floatEqualsMethodInfo;
    internal static MethodInfo EqualityComparerHashCodeMethod;
    internal static MethodInfo EqualityComparerEqualsMethod;
    internal static MethodInfo ObjectEqualsMethod;
    internal static MethodInfo ObjectGetHashCodeMethod;
    [CompilerGeneratedAttribute]
private LambdaExpression <EqualsExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private LambdaExpression <HashCodeExpression>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ConcurrentDictionary`2<ValueTuple`2<Type, bool>, ValueComparer> _defaultValueComparers;
    public Type Type { get; }
    public LambdaExpression EqualsExpression { get; }
    public LambdaExpression HashCodeExpression { get; }
    protected ValueComparer(LambdaExpression equalsExpression, LambdaExpression hashCodeExpression);
    private static ValueComparer();
    public abstract virtual Type get_Type();
    [NullableContextAttribute("2")]
public abstract virtual bool Equals(object x, object y);
    [NullableContextAttribute("2")]
public abstract virtual int GetHashCode(object obj);
    [CompilerGeneratedAttribute]
public virtual LambdaExpression get_EqualsExpression();
    [CompilerGeneratedAttribute]
public virtual LambdaExpression get_HashCodeExpression();
    public virtual Expression ExtractEqualsBody(Expression leftExpression, Expression rightExpression);
    public static ValueComparer CreateDefault(Type type, bool favorStructuralComparisons);
    public static ValueComparer GetDefaultValueComparer(Type type, bool favorStructuralComparisons);
    public static ValueComparer`1<T> GetDefaultValueComparer(bool favorStructuralComparisons);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class LinqToDB.Common.Internal.ValueComparer`1 : ValueComparer {
    private Func`3<T, T, bool> _equals;
    private Func`2<T, int> _hashCode;
    [NullableAttribute("1")]
public Type Type { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Expression`1<Func`3<T, T, bool>> EqualsExpression { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Expression`1<Func`2<T, int>> HashCodeExpression { get; }
    public ValueComparer`1(bool favorStructuralComparisons);
    [NullableContextAttribute("1")]
public ValueComparer`1(Expression`1<Func`3<T, T, bool>> equalsExpression, Expression`1<Func`2<T, int>> hashCodeExpression);
    [NullableContextAttribute("1")]
protected static Expression`1<Func`3<T, T, bool>> CreateDefaultEqualsExpression();
    [NullableContextAttribute("1")]
protected static Expression`1<Func`2<T, int>> CreateDefaultHashCodeExpression(bool favorStructuralComparisons);
    public virtual bool Equals(object x, object y);
    public virtual int GetHashCode(object obj);
    public virtual bool Equals(T x, T y);
    public virtual int GetHashCode(T obj);
    [NullableContextAttribute("1")]
public virtual Type get_Type();
    public virtual Expression`1<Func`3<T, T, bool>> get_EqualsExpression();
    public virtual Expression`1<Func`2<T, int>> get_HashCodeExpression();
}
[NullableContextAttribute("1")]
internal interface LinqToDB.Common.IOptionsContainer {
    public IEnumerable`1<IOptionSet> OptionSets { get; }
    public abstract virtual IEnumerable`1<IOptionSet> get_OptionSets();
    public abstract virtual TSet Find();
}
public interface LinqToDB.Common.IOptionSet {
}
[NullableContextAttribute("1")]
public interface LinqToDB.Common.IValueConverter {
    public bool HandlesNulls { get; }
    public LambdaExpression FromProviderExpression { get; }
    public LambdaExpression ToProviderExpression { get; }
    public abstract virtual bool get_HandlesNulls();
    public abstract virtual LambdaExpression get_FromProviderExpression();
    public abstract virtual LambdaExpression get_ToProviderExpression();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.Common.LinqToDBConvertException : LinqToDBException {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <ColumnName>k__BackingField;
    [NullableAttribute("2")]
public string ColumnName { get; internal set; }
    public LinqToDBConvertException(string message);
    public LinqToDBConvertException(string message, Exception innerException);
    public LinqToDBConvertException(Exception innerException);
    protected LinqToDBConvertException(SerializationInfo info, StreamingContext context);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_ColumnName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_ColumnName(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class LinqToDB.Common.Logging.LoggingExtensions : object {
    [ExtensionAttribute]
public static void WriteTraceLine(IDataContext context, string message, string category, TraceLevel level);
    [ExtensionAttribute]
public static TraceSwitch GetTraceSwitch(IDataContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.Common.MemberInfoEqualityComparer : object {
    public static MemberInfoEqualityComparer Default;
    private static MemberInfoEqualityComparer();
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(MemberInfo x, MemberInfo y);
    public sealed virtual int GetHashCode(MemberInfo obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class LinqToDB.Common.Option`1 : ValueType {
    private bool _hasValue;
    private T _value;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static Option`1<T> None;
    public bool HasValue { get; }
    public T Value { get; }
    private Option`1(T value);
    public bool get_HasValue();
    public T get_Value();
    public static Option`1<T> Some(T value);
    public static Option`1<T> op_Implicit(T value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class LinqToDB.Common.OptionsContainer`1 : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _sets;
    private object _sync;
    public IEnumerable`1<IOptionSet> OptionSets { get; }
    protected OptionsContainer`1(OptionsContainer`1<T> options);
    protected abstract virtual T Clone();
    [PureAttribute]
public virtual T WithOptions(IOptionSet options);
    [PureAttribute]
public T WithOptions(Func`2<TSet, TSet> optionSetter);
    [IteratorStateMachineAttribute("LinqToDB.Common.OptionsContainer`1/<get_OptionSets>d__7")]
[PureAttribute]
public virtual IEnumerable`1<IOptionSet> get_OptionSets();
    [PureAttribute]
public virtual TSet Find();
    [PureAttribute]
public TSet FindOrDefault(TSet defaultOptions);
    [PureAttribute]
public virtual TSet Get();
    protected void Apply(TA obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class LinqToDB.Common.RawSqlString : ValueType {
    [CompilerGeneratedAttribute]
private string <Format>k__BackingField;
    public string Format { get; }
    public RawSqlString(string s);
    public static RawSqlString op_Implicit(string s);
    public static RawSqlString op_Implicit(FormattableString fs);
    [CompilerGeneratedAttribute]
public string get_Format();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class LinqToDB.Common.StringBuilderExtensions : object {
    private static UInt32[] _lookup32;
    private static StringBuilderExtensions();
    private static UInt32[] CreateLookup32();
    [ExtensionAttribute]
public static StringBuilder AppendByteArrayAsHexViaLookup32(StringBuilder sb, Byte[] bytes);
    [ExtensionAttribute]
public static StringBuilder AppendByteAsHexViaLookup32(StringBuilder sb, byte byte);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class LinqToDB.Common.Tools : object {
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool IsNullOrEmpty(ICollection array);
    [ExtensionAttribute]
internal static string GetPath(Assembly assembly);
    [ExtensionAttribute]
internal static string GetFileName(Assembly assembly);
    public static string ToDebugDisplay(string str);
    [ExtensionAttribute]
internal static HashSet`1<T> AddRange(HashSet`1<T> hashSet, IEnumerable`1<T> items);
    public static IQueryable`1<T> CreateEmptyQuery();
    public static IQueryable CreateEmptyQuery(Type elementType);
    [NullableContextAttribute("2")]
public static Assembly TryLoadAssembly(string assemblyName, string providerFactory);
    public static void ClearAllCaches();
    [CompilerGeneratedAttribute]
internal static string <ToDebugDisplay>g__RemoveDuplicates|3_0(string pattern, string input);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class LinqToDB.Common.TopoSorting : object {
    [PureAttribute]
public static IEnumerable`1<T> TopoSort(IEnumerable`1<T> source, TContext context, Func`3<TContext, T, IEnumerable`1<T>> dependsOnGetter);
    [PureAttribute]
public static IEnumerable`1<T> TopoSort(ICollection`1<T> source, TContext context, Func`3<TContext, T, IEnumerable`1<T>> dependsOnGetter);
    [ExtensionAttribute]
[PureAttribute]
public static IEnumerable`1<T> TopoSort(IEnumerable`1<T> source, TContext context, Func`3<TContext, T, IEnumerable`1<T>> dependsOnGetter, IEqualityComparer`1<T> equalityComparer);
    [ExtensionAttribute]
[PureAttribute]
public static IEnumerable`1<T> TopoSort(ICollection`1<T> source, TContext context, Func`3<TContext, T, IEnumerable`1<T>> dependsOnGetter, IEqualityComparer`1<T> equalityComparer);
    [ExtensionAttribute]
[PureAttribute]
public static IEnumerable`1<T[]> GroupTopoSort(IEnumerable`1<T> source, TContext context, Func`3<TContext, T, IEnumerable`1<T>> dependsOnGetter);
    [ExtensionAttribute]
[PureAttribute]
public static IEnumerable`1<T[]> GroupTopoSort(ICollection`1<T> source, TContext context, Func`3<TContext, T, IEnumerable`1<T>> dependsOnGetter);
    [ExtensionAttribute]
[PureAttribute]
public static IEnumerable`1<T[]> GroupTopoSort(IEnumerable`1<T> source, TContext context, Func`3<TContext, T, IEnumerable`1<T>> dependsOnGetter, IEqualityComparer`1<T> equalityComparer);
    [IteratorStateMachineAttribute("LinqToDB.Common.TopoSorting/<GroupTopoSort>d__7`2")]
[ExtensionAttribute]
[PureAttribute]
public static IEnumerable`1<T[]> GroupTopoSort(ICollection`1<T> source, TContext context, Func`3<TContext, T, IEnumerable`1<T>> dependsOnGetter, IEqualityComparer`1<T> equalityComparer);
    private static ArgumentException CycleException(string argName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class LinqToDB.Common.TypeHelper : object {
    public static void RegisterTypeRemapping(Type templateType, Type replaced, Type[] templateArguments, Dictionary`2<Type, Type> typeMappings);
    [IteratorStateMachineAttribute("LinqToDB.Common.TypeHelper/<EnumTypeRemapping>d__1")]
public static IEnumerable`1<Tuple`2<Type, Type>> EnumTypeRemapping(Type templateType, Type replaced, Type[] templateArguments);
    public static MethodCallExpression MakeMethodCall(MethodInfo methodInfo, Expression[] arguments);
    public static MethodInfo MakeGenericMethod(MethodInfo methodInfo, Expression[] arguments);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class LinqToDB.Common.Utils : object {
    public static void MakeUniqueNames(IEnumerable`1<T> items, IEnumerable`1<string> staticNames, Func`2<T, string> nameFunc, Action`3<T, string, ISet`1<string>> nameSetter, string defaultName, StringComparer comparer);
    [NullableContextAttribute("2")]
public static void MakeUniqueNames(IEnumerable`1<T> items, IEnumerable`1<string> staticNames, Func`2<T, string> nameFunc, Action`3<T, string, ISet`1<string>> nameSetter, Func`2<T, string> defaultName, StringComparer comparer);
    [NullableContextAttribute("2")]
public static void MakeUniqueNames(IEnumerable`1<T> items, ISet`1<string> namesParameter, Func`3<string, ISet`1<string>, bool> validatorFunc, Func`2<T, string> nameFunc, Action`3<T, string, ISet`1<string>> nameSetter, Func`2<T, string> defaultName, StringComparer comparer);
    [ExtensionAttribute]
public static void RemoveDuplicates(IList`1<T> list, IEqualityComparer`1<T> comparer);
    [ExtensionAttribute]
public static void RemoveDuplicatesFromTail(IList`1<T> list, Func`3<T, T, bool> compareFunc);
    [ExtensionAttribute]
public static void RemoveDuplicates(IList`1<T> list, Func`2<T, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.Common.ValueConverter`2 : object {
    [CompilerGeneratedAttribute]
private bool <HandlesNulls>k__BackingField;
    [CompilerGeneratedAttribute]
private LambdaExpression <FromProviderExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private LambdaExpression <ToProviderExpression>k__BackingField;
    public bool HandlesNulls { get; }
    public LambdaExpression FromProviderExpression { get; }
    public LambdaExpression ToProviderExpression { get; }
    public ValueConverter`2(Expression`1<Func`2<TModel, TProvider>> convertToProviderExpression, Expression`1<Func`2<TProvider, TModel>> convertFromProviderExpression, bool handlesNulls);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HandlesNulls();
    [CompilerGeneratedAttribute]
public sealed virtual LambdaExpression get_FromProviderExpression();
    [CompilerGeneratedAttribute]
public sealed virtual LambdaExpression get_ToProviderExpression();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.Common.ValueConverterFunc`2 : object {
    [CompilerGeneratedAttribute]
private bool <HandlesNulls>k__BackingField;
    [CompilerGeneratedAttribute]
private LambdaExpression <FromProviderExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private LambdaExpression <ToProviderExpression>k__BackingField;
    public bool HandlesNulls { get; }
    public LambdaExpression FromProviderExpression { get; }
    public LambdaExpression ToProviderExpression { get; }
    public ValueConverterFunc`2(Func`2<TModel, TProvider> convertToProviderFunc, Func`2<TProvider, TModel> convertFromProviderFunc, bool handlesNulls);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HandlesNulls();
    [CompilerGeneratedAttribute]
public sealed virtual LambdaExpression get_FromProviderExpression();
    [CompilerGeneratedAttribute]
public sealed virtual LambdaExpression get_ToProviderExpression();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PublicAPIAttribute]
public class LinqToDB.CompiledQuery : object {
    private object _sync;
    private LambdaExpression _query;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`3 modreq(System.Runtime.CompilerServices.IsVolatile) _compiledQuery;
    protected CompiledQuery(LambdaExpression query);
    private TResult ExecuteQuery(Object[] args);
    private static Func`3<Object[], Object[], object> CompileQuery(LambdaExpression query);
    public TResult Invoke(TDC dataContext);
    public TResult Invoke(TDC dataContext, T1 arg1);
    public TResult Invoke(TDC dataContext, T1 arg1, T2 arg2);
    public TResult Invoke(TDC dataContext, T1 arg1, T2 arg2, T3 arg3);
    public TResult Invoke(TDC dataContext, T1 arg1, T2 arg2, T3 arg3, T4 arg4);
    public TResult Invoke(TDC dataContext, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5);
    public static Func`2<TDC, TResult> Compile(Expression`1<Func`2<TDC, TResult>> query);
    public static Func`3<TDC, TArg1, TResult> Compile(Expression`1<Func`3<TDC, TArg1, TResult>> query);
    public static Func`4<TDC, TArg1, TArg2, TResult> Compile(Expression`1<Func`4<TDC, TArg1, TArg2, TResult>> query);
    [NullableContextAttribute("2")]
public static Func`5<TDC, TArg1, TArg2, TArg3, TResult> Compile(Expression`1<Func`5<TDC, TArg1, TArg2, TArg3, TResult>> query);
    [NullableContextAttribute("2")]
public static Func`6<TDC, TArg1, TArg2, TArg3, TArg4, TResult> Compile(Expression`1<Func`6<TDC, TArg1, TArg2, TArg3, TArg4, TResult>> query);
    [NullableContextAttribute("2")]
public static Func`7<TDC, TArg1, TArg2, TArg3, TArg4, TArg5, TResult> Compile(Expression`1<Func`7<TDC, TArg1, TArg2, TArg3, TArg4, TArg5, TResult>> query);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.ComWrapper : DynamicObject {
    private object _instance;
    private ComWrapper(object instance);
    [SecurityCriticalAttribute]
public static object Create(string progID);
    public static object Wrap(object instance);
    public virtual bool TryGetMember(GetMemberBinder binder, Object& result);
    public virtual bool TrySetMember(SetMemberBinder binder, object value);
    [NullableContextAttribute("2")]
public virtual bool TryInvokeMember(InvokeMemberBinder binder, Object[] args, Object& result);
    [SecuritySafeCriticalAttribute]
private sealed virtual override void System.IDisposable.Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class LinqToDB.Concurrency.ConcurrencyExtensions : object {
    private static IQueryable`1<T> FilterByColumns(IQueryable`1<T> query, T obj, ColumnDescriptor[] columns);
    [ExtensionAttribute]
private static IQueryable`1<T> FilterByPrimaryKey(IQueryable`1<T> source, T obj, EntityDescriptor ed);
    private static IQueryable`1<T> MakeConcurrentFilter(IQueryable`1<T> source, T obj, Type objType, EntityDescriptor ed);
    private static IUpdatable`1<T> MakeUpdateOptimistic(IQueryable`1<T> query, IDataContext dc, T obj);
    private static IQueryable`1<T> MakeDeleteConcurrent(IQueryable`1<T> source, IDataContext dc, T obj);
    [ExtensionAttribute]
public static int UpdateOptimistic(IDataContext dc, T obj);
    [ExtensionAttribute]
public static Task`1<int> UpdateOptimisticAsync(IDataContext dc, T obj, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static int UpdateOptimistic(IQueryable`1<T> source, T obj);
    [ExtensionAttribute]
public static Task`1<int> UpdateOptimisticAsync(IQueryable`1<T> source, T obj, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static int DeleteOptimistic(IDataContext dc, T obj);
    [ExtensionAttribute]
public static Task`1<int> DeleteOptimisticAsync(IDataContext dc, T obj, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static int DeleteOptimistic(IQueryable`1<T> source, T obj);
    [ExtensionAttribute]
public static Task`1<int> DeleteOptimisticAsync(IQueryable`1<T> source, T obj, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IQueryable`1<T> WhereKeyOptimistic(IQueryable`1<T> source, T obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("384")]
public class LinqToDB.Concurrency.OptimisticLockPropertyAttribute : OptimisticLockPropertyBaseAttribute {
    private static Expression _newGuidCall;
    private static Expression _newGuidStringCall;
    private static Expression _newGuidArrayCall;
    [CompilerGeneratedAttribute]
private VersionBehavior <Behavior>k__BackingField;
    public VersionBehavior Behavior { get; }
    public OptimisticLockPropertyAttribute(VersionBehavior behavior);
    private static OptimisticLockPropertyAttribute();
    [CompilerGeneratedAttribute]
public VersionBehavior get_Behavior();
    public virtual LambdaExpression GetNextValue(ColumnDescriptor column, ParameterExpression record);
    public virtual string GetObjectID();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("384")]
public abstract class LinqToDB.Concurrency.OptimisticLockPropertyBaseAttribute : MappingAttribute {
    public abstract virtual LambdaExpression GetNextValue(ColumnDescriptor column, ParameterExpression record);
    public virtual string GetObjectID();
}
public enum LinqToDB.Concurrency.VersionBehavior : Enum {
    public int value__;
    public static VersionBehavior Auto;
    public static VersionBehavior AutoIncrement;
    public static VersionBehavior Guid;
}
internal enum LinqToDB.Configuration.ConnectionSetupType : Enum {
    public int value__;
    public static ConnectionSetupType DefaultConfiguration;
    public static ConnectionSetupType ConnectionString;
    public static ConnectionSetupType ConfigurationString;
    public static ConnectionSetupType Connection;
    public static ConnectionSetupType ConnectionFactory;
    public static ConnectionSetupType Transaction;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.Configuration.ConnectionStringSettings : object {
    [CompilerGeneratedAttribute]
private string <ConnectionString>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProviderName>k__BackingField;
    public string ConnectionString { get; }
    public string Name { get; }
    public string ProviderName { get; }
    public bool IsGlobal { get; }
    public ConnectionStringSettings(string name, string connectionString, string providerName);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ConnectionString();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ProviderName();
    public sealed virtual bool get_IsGlobal();
}
[NullableContextAttribute("1")]
public interface LinqToDB.Configuration.IConnectionStringSettings {
    public string ConnectionString { get; }
    public string Name { get; }
    [NullableAttribute("2")]
public string ProviderName { get; }
    public bool IsGlobal { get; }
    public abstract virtual string get_ConnectionString();
    public abstract virtual string get_Name();
    [NullableContextAttribute("2")]
public abstract virtual string get_ProviderName();
    public abstract virtual bool get_IsGlobal();
}
[NullableContextAttribute("1")]
public interface LinqToDB.Configuration.IDataProviderSettings {
    public string TypeName { get; }
    [NullableAttribute("2")]
public string Name { get; }
    public bool Default { get; }
    public IEnumerable`1<NamedValue> Attributes { get; }
    public abstract virtual string get_TypeName();
    [NullableContextAttribute("2")]
public abstract virtual string get_Name();
    public abstract virtual bool get_Default();
    public abstract virtual IEnumerable`1<NamedValue> get_Attributes();
}
[NullableContextAttribute("1")]
public interface LinqToDB.Configuration.ILinqToDBSettings {
    public IEnumerable`1<IDataProviderSettings> DataProviders { get; }
    [NullableAttribute("2")]
public string DefaultConfiguration { get; }
    [NullableAttribute("2")]
public string DefaultDataProvider { get; }
    public IEnumerable`1<IConnectionStringSettings> ConnectionStrings { get; }
    public abstract virtual IEnumerable`1<IDataProviderSettings> get_DataProviders();
    [NullableContextAttribute("2")]
public abstract virtual string get_DefaultConfiguration();
    [NullableContextAttribute("2")]
public abstract virtual string get_DefaultDataProvider();
    public abstract virtual IEnumerable`1<IConnectionStringSettings> get_ConnectionStrings();
}
[NullableContextAttribute("1")]
internal interface LinqToDB.Configuration.IProxy`1 {
    public T UnderlyingObject { get; }
    public abstract virtual T get_UnderlyingObject();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.Configuration.LinqToDBSettings : object {
    private IConnectionStringSettings _connectionStringSettings;
    public IEnumerable`1<IDataProviderSettings> DataProviders { get; }
    public string DefaultConfiguration { get; }
    public string DefaultDataProvider { get; }
    public IEnumerable`1<IConnectionStringSettings> ConnectionStrings { get; }
    public LinqToDBSettings(string connectionName, string providerName, string connectionString);
    public sealed virtual IEnumerable`1<IDataProviderSettings> get_DataProviders();
    public sealed virtual string get_DefaultConfiguration();
    public sealed virtual string get_DefaultDataProvider();
    [IteratorStateMachineAttribute("LinqToDB.Configuration.LinqToDBSettings/<get_ConnectionStrings>d__9")]
public sealed virtual IEnumerable`1<IConnectionStringSettings> get_ConnectionStrings();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.Configuration.NamedValue : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Name { get; public set; }
    public string Value { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
}
internal static class LinqToDB.Configuration.Proxy : object {
    [NullableContextAttribute("1")]
internal static T GetUnderlyingObject(T obj);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class LinqToDB.Data.BulkCopyOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxBatchSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <BulkCopyTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private BulkCopyType <BulkCopyType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <CheckConstraints>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <KeepIdentity>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <TableLock>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <KeepNulls>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <FireTriggers>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <UseInternalTransaction>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServerName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DatabaseName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SchemaName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
private TableOptions <TableOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NotifyAfter>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`1<BulkCopyRowsCopied> <RowsCopiedCallback>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxParametersForBatch>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxDegreeOfParallelism>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WithoutSession>k__BackingField;
    [NullableAttribute("1")]
public static BulkCopyOptions Empty;
    private Nullable`1<int> _configurationID;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public Nullable`1<int> MaxBatchSize { get; public set; }
    public Nullable`1<int> BulkCopyTimeout { get; public set; }
    public BulkCopyType BulkCopyType { get; public set; }
    public Nullable`1<bool> CheckConstraints { get; public set; }
    public Nullable`1<bool> KeepIdentity { get; public set; }
    public Nullable`1<bool> TableLock { get; public set; }
    public Nullable`1<bool> KeepNulls { get; public set; }
    public Nullable`1<bool> FireTriggers { get; public set; }
    public Nullable`1<bool> UseInternalTransaction { get; public set; }
    public string ServerName { get; public set; }
    public string DatabaseName { get; public set; }
    public string SchemaName { get; public set; }
    public string TableName { get; public set; }
    public TableOptions TableOptions { get; public set; }
    public int NotifyAfter { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`1<BulkCopyRowsCopied> RowsCopiedCallback { get; public set; }
    public bool UseParameters { get; public set; }
    public Nullable`1<int> MaxParametersForBatch { get; public set; }
    public Nullable`1<int> MaxDegreeOfParallelism { get; public set; }
    public bool WithoutSession { get; public set; }
    private int LinqToDB.Common.Internal.IConfigurationID.ConfigurationID { get; }
    public BulkCopyOptions(Nullable`1<int> MaxBatchSize, Nullable`1<int> BulkCopyTimeout, BulkCopyType BulkCopyType, Nullable`1<bool> CheckConstraints, Nullable`1<bool> KeepIdentity, Nullable`1<bool> TableLock, Nullable`1<bool> KeepNulls, Nullable`1<bool> FireTriggers, Nullable`1<bool> UseInternalTransaction, string ServerName, string DatabaseName, string SchemaName, string TableName, TableOptions TableOptions, int NotifyAfter, Action`1<BulkCopyRowsCopied> RowsCopiedCallback, bool UseParameters, Nullable`1<int> MaxParametersForBatch, Nullable`1<int> MaxDegreeOfParallelism, bool WithoutSession);
    [NullableContextAttribute("1")]
private BulkCopyOptions(BulkCopyOptions original);
    private static BulkCopyOptions();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxBatchSize();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_MaxBatchSize(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_BulkCopyTimeout();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_BulkCopyTimeout(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public BulkCopyType get_BulkCopyType();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_BulkCopyType(BulkCopyType value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_CheckConstraints();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_CheckConstraints(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_KeepIdentity();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_KeepIdentity(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_TableLock();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_TableLock(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_KeepNulls();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_KeepNulls(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_FireTriggers();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_FireTriggers(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_UseInternalTransaction();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_UseInternalTransaction(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_ServerName();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ServerName(string value);
    [CompilerGeneratedAttribute]
public string get_DatabaseName();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_DatabaseName(string value);
    [CompilerGeneratedAttribute]
public string get_SchemaName();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_SchemaName(string value);
    [CompilerGeneratedAttribute]
public string get_TableName();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_TableName(string value);
    [CompilerGeneratedAttribute]
public TableOptions get_TableOptions();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_TableOptions(TableOptions value);
    [CompilerGeneratedAttribute]
public int get_NotifyAfter();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_NotifyAfter(int value);
    [CompilerGeneratedAttribute]
public Action`1<BulkCopyRowsCopied> get_RowsCopiedCallback();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_RowsCopiedCallback(Action`1<BulkCopyRowsCopied> value);
    [CompilerGeneratedAttribute]
public bool get_UseParameters();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_UseParameters(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxParametersForBatch();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_MaxParametersForBatch(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxDegreeOfParallelism();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_MaxDegreeOfParallelism(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public bool get_WithoutSession();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_WithoutSession(bool value);
    private sealed virtual override int LinqToDB.Common.Internal.IConfigurationID.get_ConfigurationID();
    public sealed virtual bool Equals(BulkCopyOptions other);
    public virtual int GetHashCode();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(BulkCopyOptions left, BulkCopyOptions right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(BulkCopyOptions left, BulkCopyOptions right);
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public BulkCopyOptions <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(Nullable`1& MaxBatchSize, Nullable`1& BulkCopyTimeout, BulkCopyType& BulkCopyType, Nullable`1& CheckConstraints, Nullable`1& KeepIdentity, Nullable`1& TableLock, Nullable`1& KeepNulls, Nullable`1& FireTriggers, Nullable`1& UseInternalTransaction, String& ServerName, String& DatabaseName, String& SchemaName, String& TableName, TableOptions& TableOptions, Int32& NotifyAfter, Action`1& RowsCopiedCallback, Boolean& UseParameters, Nullable`1& MaxParametersForBatch, Nullable`1& MaxDegreeOfParallelism, Boolean& WithoutSession);
}
public class LinqToDB.Data.BulkCopyRowsCopied : object {
    [CompilerGeneratedAttribute]
private bool <Abort>k__BackingField;
    [CompilerGeneratedAttribute]
private long <RowsCopied>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <StartTime>k__BackingField;
    public bool Abort { get; public set; }
    public long RowsCopied { get; public set; }
    public DateTime StartTime { get; }
    [CompilerGeneratedAttribute]
public bool get_Abort();
    [CompilerGeneratedAttribute]
public void set_Abort(bool value);
    [CompilerGeneratedAttribute]
public long get_RowsCopied();
    [CompilerGeneratedAttribute]
public void set_RowsCopied(long value);
    [CompilerGeneratedAttribute]
public DateTime get_StartTime();
}
public enum LinqToDB.Data.BulkCopyType : Enum {
    public int value__;
    public static BulkCopyType Default;
    public static BulkCopyType RowByRow;
    public static BulkCopyType MultipleRows;
    public static BulkCopyType ProviderSpecific;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PublicAPIAttribute]
public class LinqToDB.Data.CommandInfo : object {
    public DataConnection DataConnection;
    public string CommandText;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public DataParameter[] Parameters;
    public CommandType CommandType;
    public CommandBehavior CommandBehavior;
    private static MethodInfo _readAsArrayMethodInfo;
    private static MethodInfo _readAsListMethodInfo;
    private static MethodInfo _readSingletMethodInfo;
    private static MethodInfo _readAsArrayAsyncMethodInfo;
    private static MethodInfo _readAsListAsyncMethodInfo;
    private static MethodInfo _readSingletAsyncMethodInfo;
    private static MethodInfo _convertParameterValueMethodInfo;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static MemoryCache`2<ValueTuple`2<Type, int>, Func`2<object, DataParameter[]>> _parameterReaders;
    private static PropertyInfo _dataParameterName;
    private static PropertyInfo _dataParameterDbDataType;
    private static PropertyInfo _dataParameterValue;
    private static MemoryCache`2<QueryKey, Delegate> _objectReaders;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static MemoryCache`2<ValueTuple`2<Type, Type>, LambdaExpression> _dataReaderConverter;
    private static ConstructorInfo _expandoObjectConstructor;
    private static MethodInfo _expandoAddMethodInfo;
    public CommandInfo(DataConnection dataConnection, string commandText);
    public CommandInfo(DataConnection dataConnection, string commandText, DataParameter[] parameters);
    public CommandInfo(DataConnection dataConnection, string commandText, DataParameter parameter);
    public CommandInfo(DataConnection dataConnection, string commandText, object parameters);
    private static CommandInfo();
    private CommandBehavior GetCommandBehavior();
    public IEnumerable`1<T> QueryProc(Func`2<DbDataReader, T> objectReader);
    public Task`1<IEnumerable`1<T>> QueryProcAsync(Func`2<DbDataReader, T> objectReader, CancellationToken cancellationToken);
    public IEnumerable`1<T> Query(Func`2<DbDataReader, T> objectReader);
    [AsyncStateMachineAttribute("LinqToDB.Data.CommandInfo/<QueryAsync>d__13`1")]
public Task`1<IEnumerable`1<T>> QueryAsync(Func`2<DbDataReader, T> objectReader, CancellationToken cancellationToken);
    [IteratorStateMachineAttribute("LinqToDB.Data.CommandInfo/<ReadEnumerator>d__14`1")]
private IEnumerable`1<T> ReadEnumerator(DataReaderWrapper rd, Func`2<DbDataReader, T> objectReader, IExecutionScope scope);
    [AsyncStateMachineAttribute("LinqToDB.Data.CommandInfo/<QueryToListAsync>d__15`1")]
public Task`1<List`1<T>> QueryToListAsync(Func`2<DbDataReader, T> objectReader, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("LinqToDB.Data.CommandInfo/<QueryToArrayAsync>d__16`1")]
public Task`1<T[]> QueryToArrayAsync(Func`2<DbDataReader, T> objectReader, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("LinqToDB.Data.CommandInfo/<QueryForEachAsync>d__17`1")]
public Task QueryForEachAsync(Func`2<DbDataReader, T> objectReader, Action`1<T> action, CancellationToken cancellationToken);
    public IEnumerable`1<T> QueryProc();
    public Task`1<IEnumerable`1<T>> QueryProcAsync(CancellationToken cancellationToken);
    public IEnumerable`1<T> Query();
    [AsyncStateMachineAttribute("LinqToDB.Data.CommandInfo/<QueryAsync>d__21`1")]
public Task`1<IEnumerable`1<T>> QueryAsync(CancellationToken cancellationToken);
    private static bool IsDynamicType(Type type);
    [IteratorStateMachineAttribute("LinqToDB.Data.CommandInfo/<ReadEnumerator>d__23`1")]
private IEnumerable`1<T> ReadEnumerator(DataReaderWrapper rd, IExecutionScope scope, bool disposeReader);
    [AsyncStateMachineAttribute("LinqToDB.Data.CommandInfo/<QueryToListAsync>d__24`1")]
public Task`1<List`1<T>> QueryToListAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("LinqToDB.Data.CommandInfo/<QueryToArrayAsync>d__25`1")]
public Task`1<T[]> QueryToArrayAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("LinqToDB.Data.CommandInfo/<QueryForEachAsync>d__26`1")]
public Task QueryForEachAsync(Action`1<T> action, CancellationToken cancellationToken);
    public IEnumerable`1<T> Query(T template);
    public IEnumerable`1<T> QueryProc(T template);
    public Task`1<IEnumerable`1<T>> QueryProcAsync(T template, CancellationToken cancellationToken);
    public T QueryProcMultiple();
    public Task`1<T> QueryProcMultipleAsync(CancellationToken cancellationToken);
    public T QueryMultiple();
    [AsyncStateMachineAttribute("LinqToDB.Data.CommandInfo/<QueryMultipleAsync>d__33`1")]
public Task`1<T> QueryMultipleAsync(CancellationToken cancellationToken);
    private static Dictionary`2<int, MemberAccessor> GetMultipleQueryIndexMap(TypeAccessor`1<T> typeAccessor);
    private T[] ReadAsArray(DataReaderWrapper rd);
    private List`1<T> ReadAsList(DataReaderWrapper rd);
    [NullableContextAttribute("2")]
private T ReadSingle(DataReaderWrapper rd);
    private T ReadMultipleResultSets(DataReaderWrapper rd);
    private Task`1<T[]> ReadAsArrayAsync(DbDataReader rd, CancellationToken cancellationToken);
    private Task`1<List`1<T>> ReadAsListAsync(DbDataReader rd, CancellationToken cancellationToken);
    private Task`1<T> ReadSingleAsync(DbDataReader rd, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("LinqToDB.Data.CommandInfo/<ReadMultipleResultSetsAsync>d__50`1")]
private Task`1<T> ReadMultipleResultSetsAsync(DbDataReader rd, CancellationToken cancellationToken);
    public int ExecuteProc();
    public int Execute();
    internal int ExecuteCustom(Func`2<DbCommand, int> customExecute);
    public Task`1<int> ExecuteProcAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("LinqToDB.Data.CommandInfo/<ExecuteAsync>d__55")]
public Task`1<int> ExecuteAsync(CancellationToken cancellationToken);
    public T ExecuteProc();
    public T Execute();
    public Task`1<T> ExecuteProcAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("LinqToDB.Data.CommandInfo/<ExecuteAsync>d__59`1")]
public Task`1<T> ExecuteAsync(CancellationToken cancellationToken);
    public DataReader ExecuteReaderProc();
    public Task`1<DataReaderAsync> ExecuteReaderProcAsync(CancellationToken cancellationToken);
    public DataReader ExecuteReader();
    [IteratorStateMachineAttribute("LinqToDB.Data.CommandInfo/<ExecuteQuery>d__63`1")]
internal IEnumerable`1<T> ExecuteQuery(DbDataReader rd, string sql);
    internal T ExecuteScalar(DbDataReader rd, string sql);
    [AsyncStateMachineAttribute("LinqToDB.Data.CommandInfo/<ExecuteReaderAsync>d__65")]
public Task`1<DataReaderAsync> ExecuteReaderAsync(CancellationToken cancellationToken);
    private bool InitCommand();
    [AsyncStateMachineAttribute("LinqToDB.Data.CommandInfo/<ExecuteQueryAsync>d__67`1")]
internal Task ExecuteQueryAsync(DbDataReader rd, string sql, Action`1<T> action, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("LinqToDB.Data.CommandInfo/<ExecuteScalarAsync>d__68`1")]
internal Task`1<T> ExecuteScalarAsync(DbDataReader rd, string sql, CancellationToken cancellationToken);
    private static void SetParameters(DataConnection dataConnection, DataParameter[] parameters);
    private static object ConvertParameterValue(TFrom value, MappingSchema mappingSchema);
    [NullableContextAttribute("2")]
private static object ConvertParameterValue(object value, MappingSchema mappingSchema);
    private void SetRebindParameters(DataReaderWrapper rd);
    private void RebindParameters(DbCommand command);
    private static DataParameter[] GetDataParameters(DataConnection dataConnection, object parameters);
    private static DataParameter PrepareDataParameter(DataParameter dataParameter, string name);
    public static void ClearObjectReaderCache();
    private string GetCommandAdditionalKey(DbDataReader rd, Type resultType);
    private static string GetFieldsKey(DbDataReader dataReader);
    private static Func`2<DbDataReader, T> GetObjectReader(DataConnection dataConnection, DbDataReader dataReader, string sql, string additionalKey);
    private static Func`2<DbDataReader, T> GetObjectReader2(DataConnection dataConnection, DbDataReader dataReader, string sql, string additionalKey);
    private static Func`2<DbDataReader, T> CreateObjectReader(DataConnection dataConnection, DbDataReader dataReader, Func`7<DataConnection, DbDataReader, Type, int, Expression, IValueConverter, Expression> getMemberExpression);
    private static Func`2<DbDataReader, T> CreateDynamicObjectReader(DataConnection dataConnection, DbDataReader dataReader, Func`6<DataConnection, DbDataReader, Type, int, Expression, Expression> getMemberExpression);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class LinqToDB.Data.ConnectionOptions : object {
    [CompilerGeneratedAttribute]
private string <ConfigurationString>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConnectionString>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider <DataProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProviderName>k__BackingField;
    [CompilerGeneratedAttribute]
private MappingSchema <MappingSchema>k__BackingField;
    [CompilerGeneratedAttribute]
private DbConnection <DbConnection>k__BackingField;
    [CompilerGeneratedAttribute]
private DbTransaction <DbTransaction>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisposeConnection>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<DataOptions, DbConnection> <ConnectionFactory>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<ConnectionOptions, IDataProvider> <DataProviderFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private ConnectionOptionsConnectionInterceptor <ConnectionInterceptor>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`2<MappingSchema, IEntityChangeDescriptor> <OnEntityDescriptorCreated>k__BackingField;
    private Nullable`1<int> _configurationID;
    internal IDataProvider SavedDataProvider;
    internal MappingSchema SavedMappingSchema;
    internal string SavedConnectionString;
    internal string SavedConfigurationString;
    internal bool SavedEnableContextSchemaEdit;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public string ConfigurationString { get; public set; }
    public string ConnectionString { get; public set; }
    public IDataProvider DataProvider { get; public set; }
    public string ProviderName { get; public set; }
    public MappingSchema MappingSchema { get; public set; }
    public DbConnection DbConnection { get; public set; }
    public DbTransaction DbTransaction { get; public set; }
    public bool DisposeConnection { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<DataOptions, DbConnection> ConnectionFactory { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<ConnectionOptions, IDataProvider> DataProviderFactory { get; public set; }
    public ConnectionOptionsConnectionInterceptor ConnectionInterceptor { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`2<MappingSchema, IEntityChangeDescriptor> OnEntityDescriptorCreated { get; public set; }
    private int LinqToDB.Common.Internal.IConfigurationID.ConfigurationID { get; }
    public ConnectionOptions(string ConfigurationString, string ConnectionString, IDataProvider DataProvider, string ProviderName, MappingSchema MappingSchema, DbConnection DbConnection, DbTransaction DbTransaction, bool DisposeConnection, Func`2<DataOptions, DbConnection> ConnectionFactory, Func`2<ConnectionOptions, IDataProvider> DataProviderFactory, ConnectionOptionsConnectionInterceptor ConnectionInterceptor, Action`2<MappingSchema, IEntityChangeDescriptor> OnEntityDescriptorCreated);
    [NullableContextAttribute("1")]
private ConnectionOptions(ConnectionOptions original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public string get_ConfigurationString();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ConfigurationString(string value);
    [CompilerGeneratedAttribute]
public string get_ConnectionString();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ConnectionString(string value);
    [CompilerGeneratedAttribute]
public IDataProvider get_DataProvider();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_DataProvider(IDataProvider value);
    [CompilerGeneratedAttribute]
public string get_ProviderName();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ProviderName(string value);
    [CompilerGeneratedAttribute]
public MappingSchema get_MappingSchema();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_MappingSchema(MappingSchema value);
    [CompilerGeneratedAttribute]
public DbConnection get_DbConnection();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_DbConnection(DbConnection value);
    [CompilerGeneratedAttribute]
public DbTransaction get_DbTransaction();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_DbTransaction(DbTransaction value);
    [CompilerGeneratedAttribute]
public bool get_DisposeConnection();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_DisposeConnection(bool value);
    [CompilerGeneratedAttribute]
public Func`2<DataOptions, DbConnection> get_ConnectionFactory();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ConnectionFactory(Func`2<DataOptions, DbConnection> value);
    [CompilerGeneratedAttribute]
public Func`2<ConnectionOptions, IDataProvider> get_DataProviderFactory();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_DataProviderFactory(Func`2<ConnectionOptions, IDataProvider> value);
    [CompilerGeneratedAttribute]
public ConnectionOptionsConnectionInterceptor get_ConnectionInterceptor();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ConnectionInterceptor(ConnectionOptionsConnectionInterceptor value);
    [CompilerGeneratedAttribute]
public Action`2<MappingSchema, IEntityChangeDescriptor> get_OnEntityDescriptorCreated();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_OnEntityDescriptorCreated(Action`2<MappingSchema, IEntityChangeDescriptor> value);
    private sealed virtual override int LinqToDB.Common.Internal.IConfigurationID.get_ConfigurationID();
    [NullableContextAttribute("1")]
private sealed virtual override void LinqToDB.Common.IApplicable<LinqToDB.Data.DataConnection>.Apply(DataConnection obj);
    [NullableContextAttribute("1")]
private sealed virtual override void LinqToDB.Common.IApplicable<LinqToDB.DataContext>.Apply(DataContext obj);
    public sealed virtual bool Equals(ConnectionOptions other);
    public virtual int GetHashCode();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(ConnectionOptions left, ConnectionOptions right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(ConnectionOptions left, ConnectionOptions right);
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public ConnectionOptions <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(String& ConfigurationString, String& ConnectionString, IDataProvider& DataProvider, String& ProviderName, MappingSchema& MappingSchema, DbConnection& DbConnection, DbTransaction& DbTransaction, Boolean& DisposeConnection, Func`2& ConnectionFactory, Func`2& DataProviderFactory, ConnectionOptionsConnectionInterceptor& ConnectionInterceptor, Action`2& OnEntityDescriptorCreated);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PublicAPIAttribute]
public class LinqToDB.Data.DataConnection : object {
    [NullableAttribute("2")]
private static ILinqToDBSettings _defaultSettings;
    [NullableAttribute("2")]
private static DataOptions _defaultDataOptions;
    internal static ConcurrentDictionary`2<string, DataOptions> ConnectionOptionsByConfigurationString;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static List`1<Func`2<ConnectionOptions, IDataProvider>> _providerDetectors;
    private static ConcurrentDictionary`2<string, IDataProvider> _dataProviders;
    [NullableAttribute("2")]
private static string _defaultConfiguration;
    [NullableAttribute("2")]
private static string _defaultDataProvider;
    private int _msID;
    private Nullable`1<int> _configurationID;
    [CompilerGeneratedAttribute]
private DataOptions <Options>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <ConfigurationString>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider <DataProvider>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <ConnectionString>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IRetryPolicy <RetryPolicy>k__BackingField;
    private Nullable`1<bool> _isMarsEnabled;
    [CompilerGeneratedAttribute]
private static Action`1<TraceInfo> <DefaultOnTraceConnection>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<TraceInfo> <OnTraceConnection>k__BackingField;
    private static TraceSwitch _traceSwitch;
    [NullableAttribute("2")]
private TraceSwitch _traceSwitchConnection;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static Action`3<string, string, TraceLevel> WriteTraceLine;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`3<string, string, TraceLevel> <WriteTraceLineConnection>k__BackingField;
    private bool _closeConnection;
    private bool _disposeConnection;
    private bool _closeTransaction;
    [NullableAttribute("2")]
private IAsyncDbConnection _connection;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<DataOptions, DbConnection> _connectionFactory;
    [NullableAttribute("2")]
private DbCommand _command;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <LastQuery>k__BackingField;
    private Nullable`1<int> _commandTimeout;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IAsyncDbTransaction <TransactionAsync>k__BackingField;
    [CompilerGeneratedAttribute]
private MappingSchema <MappingSchema>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InlineParameters>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<string> _queryHints;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<string> _nextQueryHints;
    [CompilerGeneratedAttribute]
private bool <Disposed>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ThrowOnDisposed>k__BackingField;
    [NullableAttribute("2")]
private ICommandInterceptor _commandInterceptor;
    [NullableAttribute("2")]
private IConnectionInterceptor _connectionInterceptor;
    [NullableAttribute("2")]
private IDataContextInterceptor _dataContextInterceptor;
    [NullableAttribute("2")]
private IEntityServiceInterceptor _entityServiceInterceptor;
    [NullableAttribute("2")]
private IUnwrapDataObjectInterceptor _unwrapDataObjectInterceptor;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`1<IInterceptor> <OnRemoveInterceptor>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LinqToDB.IDataContext.CloseAfterUse>k__BackingField;
    [NullableAttribute("2")]
public static ILinqToDBSettings DefaultSettings { get; public set; }
    internal static DataOptions DefaultDataOptions { get; }
    [NullableAttribute("2")]
public static string DefaultConfiguration { get; public set; }
    [NullableAttribute("2")]
public static string DefaultDataProvider { get; public set; }
    private int LinqToDB.Common.Internal.IConfigurationID.ConfigurationID { get; }
    public DataOptions Options { get; private set; }
    [NullableAttribute("2")]
public string ConfigurationString { get; private set; }
    public IDataProvider DataProvider { get; internal set; }
    [NullableAttribute("2")]
public string ConnectionString { get; private set; }
    [NullableAttribute("2")]
public IRetryPolicy RetryPolicy { get; public set; }
    public bool IsMarsEnabled { get; public set; }
    public static Action`1<TraceInfo> DefaultOnTraceConnection { get; public set; }
    public Action`1<TraceInfo> OnTraceConnection { get; public set; }
    public static TraceSwitch TraceSwitch { get; public set; }
    public TraceSwitch TraceSwitchConnection { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`3<string, string, TraceLevel> WriteTraceLineConnection { get; protected set; }
    public DbConnection Connection { get; }
    [NullableAttribute("2")]
internal DbCommand CurrentCommand { get; }
    [NullableAttribute("2")]
public string LastQuery { get; private set; }
    public int CommandTimeout { get; public set; }
    [NullableAttribute("2")]
public DbTransaction Transaction { get; }
    [NullableAttribute("2")]
internal IAsyncDbTransaction TransactionAsync { get; private set; }
    public MappingSchema MappingSchema { get; private set; }
    public bool InlineParameters { get; public set; }
    public List`1<string> QueryHints { get; }
    public List`1<string> NextQueryHints { get; }
    protected bool Disposed { get; private set; }
    public Nullable`1<bool> ThrowOnDisposed { get; public set; }
    [NullableAttribute("2")]
private ICommandInterceptor LinqToDB.Interceptors.IInterceptable<LinqToDB.Interceptors.ICommandInterceptor>.Interceptor { get; private set; }
    [NullableAttribute("2")]
private IConnectionInterceptor LinqToDB.Interceptors.IInterceptable<LinqToDB.Interceptors.IConnectionInterceptor>.Interceptor { get; private set; }
    [NullableAttribute("2")]
private IDataContextInterceptor LinqToDB.Interceptors.IInterceptable<LinqToDB.Interceptors.IDataContextInterceptor>.Interceptor { get; private set; }
    [NullableAttribute("2")]
private IEntityServiceInterceptor LinqToDB.Interceptors.IInterceptable<LinqToDB.Interceptors.IEntityServiceInterceptor>.Interceptor { get; private set; }
    [NullableAttribute("2")]
private IUnwrapDataObjectInterceptor LinqToDB.IDataContext.UnwrapDataObjectInterceptor { get; }
    [NullableAttribute("2")]
private IUnwrapDataObjectInterceptor LinqToDB.Interceptors.IInterceptable<LinqToDB.Interceptors.IUnwrapDataObjectInterceptor>.Interceptor { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`1<IInterceptor> OnRemoveInterceptor { get; public set; }
    private SqlProviderFlags LinqToDB.IDataContext.SqlProviderFlags { get; }
    private TableOptions LinqToDB.IDataContext.SupportedTableOptions { get; }
    private Type LinqToDB.IDataContext.DataReaderType { get; }
    private bool LinqToDB.IDataContext.CloseAfterUse { get; private set; }
    private string LinqToDB.IDataContext.ContextName { get; }
    private Func`1<ISqlBuilder> LinqToDB.IDataContext.CreateSqlProvider { get; }
    private Func`2<DataOptions, ISqlOptimizer> LinqToDB.IDataContext.GetSqlOptimizer { get; }
    private static DataConnection();
    public DataConnection(Func`2<DataOptions, DataOptions> optionsSetter);
    [NullableContextAttribute("2")]
public DataConnection(string configurationString);
    public DataConnection(string configurationString, Func`2<DataOptions, DataOptions> optionsSetter);
    public DataConnection(MappingSchema mappingSchema);
    public DataConnection(MappingSchema mappingSchema, Func`2<DataOptions, DataOptions> optionsSetter);
    public DataConnection(string configurationString, MappingSchema mappingSchema);
    public DataConnection(string configurationString, MappingSchema mappingSchema, Func`2<DataOptions, DataOptions> optionsSetter);
    public DataConnection(string providerName, string connectionString, MappingSchema mappingSchema);
    public DataConnection(string providerName, string connectionString, MappingSchema mappingSchema, Func`2<DataOptions, DataOptions> optionsSetter);
    public DataConnection(string providerName, string connectionString);
    public DataConnection(string providerName, string connectionString, Func`2<DataOptions, DataOptions> optionsSetter);
    public DataConnection(IDataProvider dataProvider, string connectionString, MappingSchema mappingSchema);
    public DataConnection(IDataProvider dataProvider, string connectionString, MappingSchema mappingSchema, Func`2<DataOptions, DataOptions> optionsSetter);
    public DataConnection(IDataProvider dataProvider, string connectionString);
    public DataConnection(IDataProvider dataProvider, string connectionString, Func`2<DataOptions, DataOptions> optionsSetter);
    public DataConnection(IDataProvider dataProvider, Func`2<DataOptions, DbConnection> connectionFactory, MappingSchema mappingSchema);
    public DataConnection(IDataProvider dataProvider, Func`2<DataOptions, DbConnection> connectionFactory, MappingSchema mappingSchema, Func`2<DataOptions, DataOptions> optionsSetter);
    public DataConnection(IDataProvider dataProvider, Func`2<DataOptions, DbConnection> connectionFactory);
    public DataConnection(IDataProvider dataProvider, Func`2<DataOptions, DbConnection> connectionFactory, Func`2<DataOptions, DataOptions> optionsSetter);
    public DataConnection(IDataProvider dataProvider, DbConnection connection, MappingSchema mappingSchema);
    public DataConnection(IDataProvider dataProvider, DbConnection connection, MappingSchema mappingSchema, Func`2<DataOptions, DataOptions> optionsSetter);
    public DataConnection(IDataProvider dataProvider, DbConnection connection);
    public DataConnection(IDataProvider dataProvider, DbConnection connection, Func`2<DataOptions, DataOptions> optionsSetter);
    public DataConnection(IDataProvider dataProvider, DbConnection connection, bool disposeConnection);
    public DataConnection(IDataProvider dataProvider, DbConnection connection, bool disposeConnection, Func`2<DataOptions, DataOptions> optionsSetter);
    public DataConnection(IDataProvider dataProvider, DbTransaction transaction, MappingSchema mappingSchema);
    public DataConnection(IDataProvider dataProvider, DbTransaction transaction, MappingSchema mappingSchema, Func`2<DataOptions, DataOptions> optionsSetter);
    public DataConnection(IDataProvider dataProvider, DbTransaction transaction);
    public DataConnection(IDataProvider dataProvider, DbTransaction transaction, Func`2<DataOptions, DataOptions> optionsSetter);
    public DataConnection(DataOptions options);
    private DataConnection(string configurationString, IDataProvider dataProvider, string connectionString, DbConnection connection, MappingSchema mappingSchema, DataOptions options);
    [AsyncStateMachineAttribute("LinqToDB.Data.DataConnection/<DisposeCommandAsync>d__0")]
public ValueTask DisposeCommandAsync();
    [AsyncStateMachineAttribute("LinqToDB.Data.DataConnection/<BeginTransactionAsync>d__1")]
public virtual Task`1<DataConnectionTransaction> BeginTransactionAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("LinqToDB.Data.DataConnection/<BeginTransactionAsync>d__2")]
public virtual Task`1<DataConnectionTransaction> BeginTransactionAsync(IsolationLevel isolationLevel, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("LinqToDB.Data.DataConnection/<EnsureConnectionAsync>d__3")]
public Task EnsureConnectionAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("LinqToDB.Data.DataConnection/<CommitTransactionAsync>d__4")]
public virtual Task CommitTransactionAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("LinqToDB.Data.DataConnection/<RollbackTransactionAsync>d__5")]
public virtual Task RollbackTransactionAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("LinqToDB.Data.DataConnection/<DisposeTransactionAsync>d__6")]
public virtual Task DisposeTransactionAsync();
    [AsyncStateMachineAttribute("LinqToDB.Data.DataConnection/<CloseAsync>d__7")]
public virtual Task CloseAsync();
    [AsyncStateMachineAttribute("LinqToDB.Data.DataConnection/<DisposeAsync>d__8")]
public sealed virtual ValueTask DisposeAsync();
    [AsyncStateMachineAttribute("LinqToDB.Data.DataConnection/<TraceActionAsync>d__9`2")]
protected static Task`1<TResult> TraceActionAsync(DataConnection dataConnection, TraceOperation traceOperation, Func`2<TContext, string> commandText, TContext context, Func`4<DataConnection, TContext, CancellationToken, Task`1<TResult>> action, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("LinqToDB.Data.DataConnection/<ExecuteNonQueryAsync>d__10")]
protected virtual Task`1<int> ExecuteNonQueryAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("LinqToDB.Data.DataConnection/<ExecuteNonQueryDataAsync>d__11")]
internal Task`1<int> ExecuteNonQueryDataAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("LinqToDB.Data.DataConnection/<ExecuteScalarAsync>d__12")]
protected virtual Task`1<object> ExecuteScalarAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("LinqToDB.Data.DataConnection/<ExecuteScalarDataAsync>d__13")]
internal Task`1<object> ExecuteScalarDataAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("LinqToDB.Data.DataConnection/<ExecuteReaderAsync>d__14")]
protected virtual Task`1<DataReaderWrapper> ExecuteReaderAsync(CommandBehavior commandBehavior, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("LinqToDB.Data.DataConnection/<ExecuteDataReaderAsync>d__15")]
internal Task`1<DataReaderWrapper> ExecuteDataReaderAsync(CommandBehavior commandBehavior, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
public static ILinqToDBSettings get_DefaultSettings();
    [NullableContextAttribute("2")]
public static void set_DefaultSettings(ILinqToDBSettings value);
    public static void SetConnectionStrings(IEnumerable`1<IConnectionStringSettings> connectionStrings);
    internal static DataOptions get_DefaultDataOptions();
    internal static void ResetDefaultOptions();
    [NullableContextAttribute("2")]
private static IDataProvider FindProvider(string configuration, ICollection`1<KeyValuePair`2<string, IDataProvider>> providers, IDataProvider defp);
    public static void AddProviderDetector(Func`2<ConnectionOptions, IDataProvider> providerDetector);
    public static void InsertProviderDetector(Func`2<ConnectionOptions, IDataProvider> providerDetector);
    internal static IDataProvider GetDataProviderEx(string providerName, string connectionString);
    public static void AddDataProvider(string providerName, IDataProvider dataProvider);
    public static void AddDataProvider(IDataProvider dataProvider);
    public static IDataProvider GetDataProvider(string configurationString);
    public static IDataProvider GetDataProvider(string providerName, string configurationString, string connectionString);
    public static IDataProvider GetDataProvider(string providerName, string connectionString);
    public static IReadOnlyDictionary`2<string, IDataProvider> GetRegisteredProviders();
    internal static ConfigurationInfo GetConfigurationInfo(string configurationString);
    public static void AddConfiguration(string configuration, string connectionString, IDataProvider dataProvider);
    internal static Lazy`1<IDataProvider> CreateDataProvider();
    public static void AddOrSetConfiguration(string configuration, string connectionString, string dataProvider);
    public static void SetConnectionString(string configuration, string connectionString);
    public static string GetConnectionString(string configurationString);
    [NullableContextAttribute("2")]
public static string TryGetConnectionString(string configurationString);
    [NullableContextAttribute("2")]
public static string get_DefaultConfiguration();
    [NullableContextAttribute("2")]
public static void set_DefaultConfiguration(string value);
    [NullableContextAttribute("2")]
public static string get_DefaultDataProvider();
    [NullableContextAttribute("2")]
public static void set_DefaultDataProvider(string value);
    private sealed virtual override int LinqToDB.Common.Internal.IConfigurationID.get_ConfigurationID();
    [CompilerGeneratedAttribute]
public sealed virtual DataOptions get_Options();
    [CompilerGeneratedAttribute]
private void set_Options(DataOptions value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual string get_ConfigurationString();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_ConfigurationString(string value);
    [CompilerGeneratedAttribute]
public IDataProvider get_DataProvider();
    [CompilerGeneratedAttribute]
internal void set_DataProvider(IDataProvider value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_ConnectionString();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_ConnectionString(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IRetryPolicy get_RetryPolicy();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_RetryPolicy(IRetryPolicy value);
    public bool get_IsMarsEnabled();
    public void set_IsMarsEnabled(bool value);
    [CompilerGeneratedAttribute]
public static Action`1<TraceInfo> get_DefaultOnTraceConnection();
    [CompilerGeneratedAttribute]
public static void set_DefaultOnTraceConnection(Action`1<TraceInfo> value);
    [CompilerGeneratedAttribute]
public Action`1<TraceInfo> get_OnTraceConnection();
    [CompilerGeneratedAttribute]
public void set_OnTraceConnection(Action`1<TraceInfo> value);
    private static void OnTraceInternal(TraceInfo info);
    public static TraceSwitch get_TraceSwitch();
    public static void set_TraceSwitch(TraceSwitch value);
    public static void TurnTraceSwitchOn(TraceLevel traceLevel);
    public TraceSwitch get_TraceSwitchConnection();
    public void set_TraceSwitchConnection(TraceSwitch value);
    [CompilerGeneratedAttribute]
public Action`3<string, string, TraceLevel> get_WriteTraceLineConnection();
    [CompilerGeneratedAttribute]
protected void set_WriteTraceLineConnection(Action`3<string, string, TraceLevel> value);
    public DbConnection get_Connection();
    internal IAsyncDbConnection EnsureConnection(bool connect);
    public virtual void Close();
    [NullableContextAttribute("2")]
internal DbCommand get_CurrentCommand();
    internal DbCommand GetOrCreateCommand();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_LastQuery();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_LastQuery(string value);
    internal void InitCommand(CommandType commandType, string sql, DataParameter[] parameters, IReadOnlyCollection`1<string> queryHints, bool withParameters);
    internal void CommitCommandInit();
    public int get_CommandTimeout();
    public void set_CommandTimeout(int value);
    public DbCommand CreateCommand();
    public void DisposeCommand();
    protected virtual int ExecuteNonQuery(DbCommand command);
    internal int ExecuteNonQuery();
    internal int ExecuteNonQueryCustom(DbCommand command, Func`2<DbCommand, int> customExecute);
    internal int ExecuteNonQueryCustom(Func`2<DbCommand, int> customExecute);
    protected virtual object ExecuteScalar(DbCommand command);
    [NullableContextAttribute("2")]
private object ExecuteScalar();
    protected virtual DataReaderWrapper ExecuteReader(CommandBehavior commandBehavior);
    private DataReaderWrapper ExecuteReader();
    internal DataReaderWrapper ExecuteDataReader(CommandBehavior commandBehavior);
    public static void ClearObjectReaderCache();
    [NullableContextAttribute("2")]
public DbTransaction get_Transaction();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal IAsyncDbTransaction get_TransactionAsync();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_TransactionAsync(IAsyncDbTransaction value);
    public virtual DataConnectionTransaction BeginTransaction();
    public virtual DataConnectionTransaction BeginTransaction(IsolationLevel isolationLevel);
    public virtual void CommitTransaction();
    public virtual void RollbackTransaction();
    public virtual void DisposeTransaction();
    protected static TResult TraceAction(DataConnection dataConnection, TraceOperation traceOperation, Func`2<TContext, string> commandText, TContext context, Func`3<DataConnection, TContext, TResult> action);
    [CompilerGeneratedAttribute]
public sealed virtual MappingSchema get_MappingSchema();
    [CompilerGeneratedAttribute]
private void set_MappingSchema(MappingSchema value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_InlineParameters();
    [CompilerGeneratedAttribute]
public sealed virtual void set_InlineParameters(bool value);
    public sealed virtual List`1<string> get_QueryHints();
    public sealed virtual List`1<string> get_NextQueryHints();
    public DataConnection AddMappingSchema(MappingSchema mappingSchema);
    public sealed virtual object Clone();
    [CompilerGeneratedAttribute]
protected bool get_Disposed();
    [CompilerGeneratedAttribute]
private void set_Disposed(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ThrowOnDisposed();
    [CompilerGeneratedAttribute]
public void set_ThrowOnDisposed(Nullable`1<bool> value);
    protected void CheckAndThrowOnDisposed();
    public sealed virtual void Dispose();
    internal CommandBehavior GetCommandBehavior(CommandBehavior commandBehavior);
    [NullableContextAttribute("2")]
private sealed virtual override ICommandInterceptor LinqToDB.Interceptors.IInterceptable<LinqToDB.Interceptors.ICommandInterceptor>.get_Interceptor();
    [NullableContextAttribute("2")]
private sealed virtual override void LinqToDB.Interceptors.IInterceptable<LinqToDB.Interceptors.ICommandInterceptor>.set_Interceptor(ICommandInterceptor value);
    [NullableContextAttribute("2")]
private sealed virtual override IConnectionInterceptor LinqToDB.Interceptors.IInterceptable<LinqToDB.Interceptors.IConnectionInterceptor>.get_Interceptor();
    [NullableContextAttribute("2")]
private sealed virtual override void LinqToDB.Interceptors.IInterceptable<LinqToDB.Interceptors.IConnectionInterceptor>.set_Interceptor(IConnectionInterceptor value);
    [NullableContextAttribute("2")]
private sealed virtual override IDataContextInterceptor LinqToDB.Interceptors.IInterceptable<LinqToDB.Interceptors.IDataContextInterceptor>.get_Interceptor();
    [NullableContextAttribute("2")]
private sealed virtual override void LinqToDB.Interceptors.IInterceptable<LinqToDB.Interceptors.IDataContextInterceptor>.set_Interceptor(IDataContextInterceptor value);
    [NullableContextAttribute("2")]
private sealed virtual override IEntityServiceInterceptor LinqToDB.Interceptors.IInterceptable<LinqToDB.Interceptors.IEntityServiceInterceptor>.get_Interceptor();
    [NullableContextAttribute("2")]
private sealed virtual override void LinqToDB.Interceptors.IInterceptable<LinqToDB.Interceptors.IEntityServiceInterceptor>.set_Interceptor(IEntityServiceInterceptor value);
    [NullableContextAttribute("2")]
private sealed virtual override IUnwrapDataObjectInterceptor LinqToDB.IDataContext.get_UnwrapDataObjectInterceptor();
    [NullableContextAttribute("2")]
private sealed virtual override IUnwrapDataObjectInterceptor LinqToDB.Interceptors.IInterceptable<LinqToDB.Interceptors.IUnwrapDataObjectInterceptor>.get_Interceptor();
    [NullableContextAttribute("2")]
private sealed virtual override void LinqToDB.Interceptors.IInterceptable<LinqToDB.Interceptors.IUnwrapDataObjectInterceptor>.set_Interceptor(IUnwrapDataObjectInterceptor value);
    public sealed virtual void AddInterceptor(IInterceptor interceptor);
    [CompilerGeneratedAttribute]
public Action`1<IInterceptor> get_OnRemoveInterceptor();
    [CompilerGeneratedAttribute]
public void set_OnRemoveInterceptor(Action`1<IInterceptor> value);
    public sealed virtual void RemoveInterceptor(IInterceptor interceptor);
    protected virtual SqlStatement ProcessQuery(SqlStatement statement, EvaluationContext context);
    private sealed virtual override SqlProviderFlags LinqToDB.IDataContext.get_SqlProviderFlags();
    private sealed virtual override TableOptions LinqToDB.IDataContext.get_SupportedTableOptions();
    private sealed virtual override Type LinqToDB.IDataContext.get_DataReaderType();
    [CompilerGeneratedAttribute]
private sealed virtual override bool LinqToDB.IDataContext.get_CloseAfterUse();
    [CompilerGeneratedAttribute]
private sealed virtual override void LinqToDB.IDataContext.set_CloseAfterUse(bool value);
    private sealed virtual override Expression LinqToDB.IDataContext.GetReaderExpression(DbDataReader reader, int idx, Expression readerExpression, Type toType);
    private sealed virtual override Nullable`1<bool> LinqToDB.IDataContext.IsDBNullAllowed(DbDataReader reader, int idx);
    private sealed virtual override IDataContext LinqToDB.IDataContext.Clone(bool forNestedQuery);
    private sealed virtual override string LinqToDB.IDataContext.get_ContextName();
    private sealed virtual override Func`1<ISqlBuilder> LinqToDB.IDataContext.get_CreateSqlProvider();
    private static Func`2<DataOptions, ISqlOptimizer> GetGetSqlOptimizer(IDataProvider dp);
    private sealed virtual override Func`2<DataOptions, ISqlOptimizer> LinqToDB.IDataContext.get_GetSqlOptimizer();
    private sealed virtual override IQueryRunner LinqToDB.IDataContext.GetQueryRunner(Query query, int queryNumber, Expression expression, Object[] parameters, Object[] preambles);
    [CompilerGeneratedAttribute]
private ISqlBuilder <LinqToDB.IDataContext.get_CreateSqlProvider>b__259_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[PublicAPIAttribute]
public static class LinqToDB.Data.DataConnectionExtensions : object {
    [ExtensionAttribute]
public static CommandInfo SetCommand(DataConnection dataConnection, string commandText);
    [ExtensionAttribute]
public static CommandInfo SetCommand(DataConnection dataConnection, string commandText, DataParameter[] parameters);
    [ExtensionAttribute]
public static CommandInfo SetCommand(DataConnection dataConnection, string commandText, DataParameter parameter);
    [ExtensionAttribute]
public static CommandInfo SetCommand(DataConnection dataConnection, string commandText, object parameters);
    [ExtensionAttribute]
public static IEnumerable`1<T> Query(DataConnection connection, Func`2<DbDataReader, T> objectReader, string sql);
    [ExtensionAttribute]
public static IEnumerable`1<T> QueryProc(DataConnection connection, Func`2<DbDataReader, T> objectReader, string sql, DataParameter[] parameters);
    [ExtensionAttribute]
public static Task`1<IEnumerable`1<T>> QueryProcAsync(DataConnection connection, Func`2<DbDataReader, T> objectReader, string sql, DataParameter[] parameters);
    [ExtensionAttribute]
public static Task`1<IEnumerable`1<T>> QueryProcAsync(DataConnection connection, Func`2<DbDataReader, T> objectReader, string sql, CancellationToken cancellationToken, DataParameter[] parameters);
    [ExtensionAttribute]
public static IEnumerable`1<T> QueryProc(DataConnection connection, Func`2<DbDataReader, T> objectReader, string sql, object parameters);
    [ExtensionAttribute]
public static Task`1<IEnumerable`1<T>> QueryProcAsync(DataConnection connection, Func`2<DbDataReader, T> objectReader, string sql, object parameters, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IEnumerable`1<T> Query(DataConnection connection, Func`2<DbDataReader, T> objectReader, string sql, DataParameter[] parameters);
    [ExtensionAttribute]
public static IEnumerable`1<T> Query(DataConnection connection, Func`2<DbDataReader, T> objectReader, string sql, object parameters);
    [ExtensionAttribute]
public static Task`1<List`1<T>> QueryToListAsync(DataConnection connection, Func`2<DbDataReader, T> objectReader, string sql);
    [ExtensionAttribute]
public static Task`1<List`1<T>> QueryToListAsync(DataConnection connection, Func`2<DbDataReader, T> objectReader, string sql, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T[]> QueryToArrayAsync(DataConnection connection, Func`2<DbDataReader, T> objectReader, string sql);
    [ExtensionAttribute]
public static Task`1<T[]> QueryToArrayAsync(DataConnection connection, Func`2<DbDataReader, T> objectReader, string sql, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<List`1<T>> QueryToListAsync(DataConnection connection, Func`2<DbDataReader, T> objectReader, string sql, DataParameter[] parameters);
    [ExtensionAttribute]
public static Task`1<List`1<T>> QueryToListAsync(DataConnection connection, Func`2<DbDataReader, T> objectReader, string sql, CancellationToken cancellationToken, DataParameter[] parameters);
    [ExtensionAttribute]
public static Task`1<T[]> QueryToArrayAsync(DataConnection connection, Func`2<DbDataReader, T> objectReader, string sql, DataParameter[] parameters);
    [ExtensionAttribute]
public static Task`1<T[]> QueryToArrayAsync(DataConnection connection, Func`2<DbDataReader, T> objectReader, string sql, CancellationToken cancellationToken, DataParameter[] parameters);
    [ExtensionAttribute]
public static Task`1<List`1<T>> QueryToListAsync(DataConnection connection, Func`2<DbDataReader, T> objectReader, string sql, object parameters);
    [ExtensionAttribute]
public static Task`1<List`1<T>> QueryToListAsync(DataConnection connection, Func`2<DbDataReader, T> objectReader, string sql, object parameters, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T[]> QueryToArrayAsync(DataConnection connection, Func`2<DbDataReader, T> objectReader, string sql, object parameters);
    [ExtensionAttribute]
public static Task`1<T[]> QueryToArrayAsync(DataConnection connection, Func`2<DbDataReader, T> objectReader, string sql, CancellationToken cancellationToken, object parameters);
    [ExtensionAttribute]
public static IEnumerable`1<T> Query(DataConnection connection, string sql);
    [ExtensionAttribute]
public static IEnumerable`1<T> Query(DataConnection connection, string sql, DataParameter[] parameters);
    [ExtensionAttribute]
public static T QueryMultiple(DataConnection connection, string sql, DataParameter[] parameters);
    [ExtensionAttribute]
public static Task`1<T> QueryMultipleAsync(DataConnection connection, string sql, DataParameter[] parameters);
    [ExtensionAttribute]
public static Task`1<T> QueryMultipleAsync(DataConnection connection, string sql, CancellationToken cancellationToken, DataParameter[] parameters);
    [ExtensionAttribute]
public static IEnumerable`1<T> QueryProc(DataConnection connection, string sql, DataParameter[] parameters);
    [ExtensionAttribute]
public static Task`1<IEnumerable`1<T>> QueryProcAsync(DataConnection connection, string sql, DataParameter[] parameters);
    [ExtensionAttribute]
public static Task`1<IEnumerable`1<T>> QueryProcAsync(DataConnection connection, string sql, CancellationToken cancellationToken, DataParameter[] parameters);
    [ExtensionAttribute]
public static IEnumerable`1<T> QueryProc(DataConnection connection, string sql, object parameters);
    [ExtensionAttribute]
public static Task`1<IEnumerable`1<T>> QueryProcAsync(DataConnection connection, string sql, object parameters, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> QueryProcMultipleAsync(DataConnection connection, string sql, CancellationToken cancellationToken, DataParameter[] parameters);
    [ExtensionAttribute]
public static Task`1<T> QueryProcMultipleAsync(DataConnection connection, string sql, CancellationToken cancellationToken, object parameters);
    [ExtensionAttribute]
public static Task`1<T> QueryProcMultipleAsync(DataConnection connection, string sql, DataParameter[] parameters);
    [ExtensionAttribute]
public static Task`1<T> QueryProcMultipleAsync(DataConnection connection, string sql, object parameters);
    [ExtensionAttribute]
public static T QueryProcMultiple(DataConnection connection, string sql, DataParameter[] parameters);
    [ExtensionAttribute]
public static T QueryProcMultiple(DataConnection connection, string sql, object parameters);
    [ExtensionAttribute]
public static IEnumerable`1<T> Query(DataConnection connection, string sql, DataParameter parameter);
    [ExtensionAttribute]
public static IEnumerable`1<T> Query(DataConnection connection, string sql, object parameters);
    [ExtensionAttribute]
public static Task`1<List`1<T>> QueryToListAsync(DataConnection connection, string sql);
    [ExtensionAttribute]
public static Task`1<List`1<T>> QueryToListAsync(DataConnection connection, string sql, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T[]> QueryToArrayAsync(DataConnection connection, string sql);
    [ExtensionAttribute]
public static Task`1<T[]> QueryToArrayAsync(DataConnection connection, string sql, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<List`1<T>> QueryToListAsync(DataConnection connection, string sql, DataParameter[] parameters);
    [ExtensionAttribute]
public static Task`1<List`1<T>> QueryToListAsync(DataConnection connection, string sql, CancellationToken cancellationToken, DataParameter[] parameters);
    [ExtensionAttribute]
public static Task`1<T[]> QueryToArrayAsync(DataConnection connection, string sql, DataParameter[] parameters);
    [ExtensionAttribute]
public static Task`1<T[]> QueryToArrayAsync(DataConnection connection, string sql, CancellationToken cancellationToken, DataParameter[] parameters);
    [ExtensionAttribute]
public static Task`1<List`1<T>> QueryToListAsync(DataConnection connection, string sql, DataParameter parameter);
    [ExtensionAttribute]
public static Task`1<List`1<T>> QueryToListAsync(DataConnection connection, string sql, DataParameter parameter, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T[]> QueryToArrayAsync(DataConnection connection, string sql, DataParameter parameter);
    [ExtensionAttribute]
public static Task`1<T[]> QueryToArrayAsync(DataConnection connection, string sql, DataParameter parameter, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<List`1<T>> QueryToListAsync(DataConnection connection, string sql, object parameters);
    [ExtensionAttribute]
public static Task`1<List`1<T>> QueryToListAsync(DataConnection connection, string sql, CancellationToken cancellationToken, object parameters);
    [ExtensionAttribute]
public static Task`1<T[]> QueryToArrayAsync(DataConnection connection, string sql, object parameters);
    [ExtensionAttribute]
public static Task`1<T[]> QueryToArrayAsync(DataConnection connection, string sql, CancellationToken cancellationToken, object parameters);
    [ExtensionAttribute]
public static IEnumerable`1<T> Query(DataConnection connection, T template, string sql, DataParameter[] parameters);
    [ExtensionAttribute]
public static IEnumerable`1<T> Query(DataConnection connection, T template, string sql, object parameters);
    [ExtensionAttribute]
public static IEnumerable`1<T> QueryProc(DataConnection connection, T template, string sql, DataParameter[] parameters);
    [ExtensionAttribute]
public static Task`1<IEnumerable`1<T>> QueryProcAsync(DataConnection connection, T template, string sql, DataParameter[] parameters);
    [ExtensionAttribute]
public static Task`1<IEnumerable`1<T>> QueryProcAsync(DataConnection connection, T template, string sql, CancellationToken cancellationToken, DataParameter[] parameters);
    [ExtensionAttribute]
public static IEnumerable`1<T> QueryProc(DataConnection connection, T template, string sql, object parameters);
    [ExtensionAttribute]
public static Task`1<IEnumerable`1<T>> QueryProcAsync(DataConnection connection, T template, string sql, object parameters, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<List`1<T>> QueryToListAsync(DataConnection connection, T template, string sql, DataParameter[] parameters);
    [ExtensionAttribute]
public static Task`1<List`1<T>> QueryToListAsync(DataConnection connection, T template, string sql, CancellationToken cancellationToken, DataParameter[] parameters);
    [ExtensionAttribute]
public static Task`1<T[]> QueryToArrayAsync(DataConnection connection, T template, string sql, DataParameter[] parameters);
    [ExtensionAttribute]
public static Task`1<T[]> QueryToArrayAsync(DataConnection connection, T template, string sql, CancellationToken cancellationToken, DataParameter[] parameters);
    [ExtensionAttribute]
public static Task`1<List`1<T>> QueryToListAsync(DataConnection connection, T template, string sql, object parameters);
    [ExtensionAttribute]
public static Task`1<List`1<T>> QueryToListAsync(DataConnection connection, T template, string sql, CancellationToken cancellationToken, object parameters);
    [ExtensionAttribute]
public static Task`1<T[]> QueryToArrayAsync(DataConnection connection, T template, string sql, object parameters);
    [ExtensionAttribute]
public static Task`1<T[]> QueryToArrayAsync(DataConnection connection, T template, string sql, CancellationToken cancellationToken, object parameters);
    [ExtensionAttribute]
public static int Execute(DataConnection connection, string sql);
    [ExtensionAttribute]
public static int Execute(DataConnection connection, string sql, DataParameter[] parameters);
    [ExtensionAttribute]
public static int ExecuteProc(DataConnection connection, string sql, DataParameter[] parameters);
    [ExtensionAttribute]
public static int ExecuteProc(DataConnection connection, string sql, object parameters);
    [ExtensionAttribute]
public static int Execute(DataConnection connection, string sql, object parameters);
    [ExtensionAttribute]
public static Task`1<int> ExecuteAsync(DataConnection connection, string sql);
    [ExtensionAttribute]
public static Task`1<int> ExecuteAsync(DataConnection connection, string sql, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<int> ExecuteAsync(DataConnection connection, string sql, DataParameter[] parameters);
    [ExtensionAttribute]
public static Task`1<int> ExecuteAsync(DataConnection connection, string sql, CancellationToken cancellationToken, DataParameter[] parameters);
    [ExtensionAttribute]
public static Task`1<int> ExecuteAsync(DataConnection connection, string sql, object parameters);
    [ExtensionAttribute]
public static Task`1<int> ExecuteAsync(DataConnection connection, string sql, CancellationToken cancellationToken, object parameters);
    [ExtensionAttribute]
public static Task`1<int> ExecuteProcAsync(DataConnection connection, string sql, DataParameter[] parameters);
    [ExtensionAttribute]
public static Task`1<int> ExecuteProcAsync(DataConnection connection, string sql, object parameters);
    [ExtensionAttribute]
public static Task`1<int> ExecuteProcAsync(DataConnection connection, string sql, CancellationToken cancellationToken, DataParameter[] parameters);
    [ExtensionAttribute]
public static Task`1<int> ExecuteProcAsync(DataConnection connection, string sql, CancellationToken cancellationToken, object parameters);
    [ExtensionAttribute]
public static T Execute(DataConnection connection, string sql);
    [ExtensionAttribute]
public static T Execute(DataConnection connection, string sql, DataParameter[] parameters);
    [ExtensionAttribute]
public static T Execute(DataConnection connection, string sql, DataParameter parameter);
    [ExtensionAttribute]
public static T Execute(DataConnection connection, string sql, object parameters);
    [ExtensionAttribute]
public static T ExecuteProc(DataConnection connection, string sql, DataParameter[] parameters);
    [ExtensionAttribute]
public static T ExecuteProc(DataConnection connection, string sql, object parameters);
    [ExtensionAttribute]
public static Task`1<T> ExecuteAsync(DataConnection connection, string sql);
    [ExtensionAttribute]
public static Task`1<T> ExecuteAsync(DataConnection connection, string sql, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> ExecuteAsync(DataConnection connection, string sql, DataParameter[] parameters);
    [ExtensionAttribute]
public static Task`1<T> ExecuteAsync(DataConnection connection, string sql, CancellationToken cancellationToken, DataParameter[] parameters);
    [ExtensionAttribute]
public static Task`1<T> ExecuteAsync(DataConnection connection, string sql, DataParameter parameter);
    [ExtensionAttribute]
public static Task`1<T> ExecuteAsync(DataConnection connection, string sql, DataParameter parameter, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> ExecuteAsync(DataConnection connection, string sql, object parameters);
    [ExtensionAttribute]
public static Task`1<T> ExecuteAsync(DataConnection connection, string sql, CancellationToken cancellationToken, object parameters);
    [ExtensionAttribute]
public static Task`1<T> ExecuteProcAsync(DataConnection connection, string sql, DataParameter[] parameters);
    [ExtensionAttribute]
public static Task`1<T> ExecuteProcAsync(DataConnection connection, string sql, object parameters);
    [ExtensionAttribute]
public static Task`1<T> ExecuteProcAsync(DataConnection connection, string sql, CancellationToken cancellationToken, DataParameter[] parameters);
    [ExtensionAttribute]
public static Task`1<T> ExecuteProcAsync(DataConnection connection, string sql, CancellationToken cancellationToken, object parameters);
    [ExtensionAttribute]
public static DataReader ExecuteReader(DataConnection connection, string sql);
    [ExtensionAttribute]
public static DataReader ExecuteReader(DataConnection connection, string sql, DataParameter[] parameters);
    [ExtensionAttribute]
public static DataReader ExecuteReader(DataConnection connection, string sql, DataParameter parameter);
    [ExtensionAttribute]
public static DataReader ExecuteReader(DataConnection connection, string sql, object parameters);
    [ExtensionAttribute]
public static DataReader ExecuteReader(DataConnection connection, string sql, CommandType commandType, CommandBehavior commandBehavior, DataParameter[] parameters);
    [ExtensionAttribute]
public static BulkCopyRowsCopied BulkCopy(DataConnection dataConnection, BulkCopyOptions options, IEnumerable`1<T> source);
    [ExtensionAttribute]
public static BulkCopyRowsCopied BulkCopy(DataConnection dataConnection, int maxBatchSize, IEnumerable`1<T> source);
    [ExtensionAttribute]
public static BulkCopyRowsCopied BulkCopy(DataConnection dataConnection, IEnumerable`1<T> source);
    [ExtensionAttribute]
public static BulkCopyRowsCopied BulkCopy(ITable`1<T> table, BulkCopyOptions options, IEnumerable`1<T> source);
    [ExtensionAttribute]
public static BulkCopyRowsCopied BulkCopy(ITable`1<T> table, int maxBatchSize, IEnumerable`1<T> source);
    [ExtensionAttribute]
public static BulkCopyRowsCopied BulkCopy(ITable`1<T> table, IEnumerable`1<T> source);
    private static Task`1<BulkCopyRowsCopied> CallMetrics(Func`1<Task`1<BulkCopyRowsCopied>> call);
    [ExtensionAttribute]
public static Task`1<BulkCopyRowsCopied> BulkCopyAsync(DataConnection dataConnection, BulkCopyOptions options, IEnumerable`1<T> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<BulkCopyRowsCopied> BulkCopyAsync(DataConnection dataConnection, int maxBatchSize, IEnumerable`1<T> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<BulkCopyRowsCopied> BulkCopyAsync(DataConnection dataConnection, IEnumerable`1<T> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<BulkCopyRowsCopied> BulkCopyAsync(ITable`1<T> table, BulkCopyOptions options, IEnumerable`1<T> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<BulkCopyRowsCopied> BulkCopyAsync(ITable`1<T> table, int maxBatchSize, IEnumerable`1<T> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<BulkCopyRowsCopied> BulkCopyAsync(ITable`1<T> table, IEnumerable`1<T> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<BulkCopyRowsCopied> BulkCopyAsync(DataConnection dataConnection, BulkCopyOptions options, IAsyncEnumerable`1<T> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<BulkCopyRowsCopied> BulkCopyAsync(DataConnection dataConnection, int maxBatchSize, IAsyncEnumerable`1<T> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<BulkCopyRowsCopied> BulkCopyAsync(DataConnection dataConnection, IAsyncEnumerable`1<T> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<BulkCopyRowsCopied> BulkCopyAsync(ITable`1<T> table, BulkCopyOptions options, IAsyncEnumerable`1<T> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<BulkCopyRowsCopied> BulkCopyAsync(ITable`1<T> table, int maxBatchSize, IAsyncEnumerable`1<T> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<BulkCopyRowsCopied> BulkCopyAsync(ITable`1<T> table, IAsyncEnumerable`1<T> source, CancellationToken cancellationToken);
    private static bool MergeWithUpdate(ITable`1<T> table);
    [ExtensionAttribute]
[ObsoleteAttribute("Legacy Merge API obsoleted and will be removed in future versions. See migration guide https://linq2db.github.io/articles/sql/merge/Merge-API-Migration.html or direct translation of old API to new one in code of this method https://github.com/linq2db/linq2db/blob/master/Source/LinqToDB/Data/DataConnectionExtensions.LegacyMerge.cs.")]
public static int Merge(DataConnection dataConnection, IQueryable`1<T> source, Expression`1<Func`2<T, bool>> predicate, string tableName, string databaseName, string schemaName, string serverName, TableOptions tableOptions);
    [ExtensionAttribute]
[ObsoleteAttribute("Legacy Merge API obsoleted and will be removed in future versions. See migration guide https://linq2db.github.io/articles/sql/merge/Merge-API-Migration.html or direct translation of old API to new one in code of this method https://github.com/linq2db/linq2db/blob/master/Source/LinqToDB/Data/DataConnectionExtensions.LegacyMerge.cs.")]
public static int Merge(DataConnection dataConnection, Expression`1<Func`2<T, bool>> predicate, IEnumerable`1<T> source, string tableName, string databaseName, string schemaName, string serverName, TableOptions tableOptions);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[ObsoleteAttribute("Legacy Merge API obsoleted and will be removed in future versions. See migration guide https://linq2db.github.io/articles/sql/merge/Merge-API-Migration.html or direct translation of old API to new one in code of this method https://github.com/linq2db/linq2db/blob/master/Source/LinqToDB/Data/DataConnectionExtensions.LegacyMerge.cs.")]
public static int Merge(DataConnection dataConnection, bool delete, IEnumerable`1<T> source, string tableName, string databaseName, string schemaName, string serverName, TableOptions tableOptions);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[ObsoleteAttribute("Legacy Merge API obsoleted and will be removed in future versions. See migration guide https://linq2db.github.io/articles/sql/merge/Merge-API-Migration.html or direct translation of old API to new one in code of this method https://github.com/linq2db/linq2db/blob/master/Source/LinqToDB/Data/DataConnectionExtensions.LegacyMerge.cs.")]
public static int Merge(DataConnection dataConnection, IEnumerable`1<T> source, string tableName, string databaseName, string schemaName, string serverName, TableOptions tableOptions);
    [ExtensionAttribute]
[ObsoleteAttribute("Legacy Merge API obsoleted and will be removed in future versions. See migration guide https://linq2db.github.io/articles/sql/merge/Merge-API-Migration.html or direct translation of old API to new one in code of this method https://github.com/linq2db/linq2db/blob/master/Source/LinqToDB/Data/DataConnectionExtensions.LegacyMerge.cs.")]
public static int Merge(ITable`1<T> table, IQueryable`1<T> source, Expression`1<Func`2<T, bool>> predicate, string tableName, string databaseName, string schemaName, string serverName, TableOptions tableOptions);
    [ExtensionAttribute]
[ObsoleteAttribute("Legacy Merge API obsoleted and will be removed in future versions. See migration guide https://linq2db.github.io/articles/sql/merge/Merge-API-Migration.html or direct translation of old API to new one in code of this method https://github.com/linq2db/linq2db/blob/master/Source/LinqToDB/Data/DataConnectionExtensions.LegacyMerge.cs.")]
public static int Merge(ITable`1<T> table, Expression`1<Func`2<T, bool>> predicate, IEnumerable`1<T> source, string tableName, string databaseName, string schemaName, string serverName, TableOptions tableOptions);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[ObsoleteAttribute("Legacy Merge API obsoleted and will be removed in future versions. See migration guide https://linq2db.github.io/articles/sql/merge/Merge-API-Migration.html or direct translation of old API to new one in code of this method https://github.com/linq2db/linq2db/blob/master/Source/LinqToDB/Data/DataConnectionExtensions.LegacyMerge.cs.")]
public static int Merge(ITable`1<T> table, bool delete, IEnumerable`1<T> source, string tableName, string databaseName, string schemaName, string serverName, TableOptions tableOptions);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[ObsoleteAttribute("Legacy Merge API obsoleted and will be removed in future versions. See migration guide https://linq2db.github.io/articles/sql/merge/Merge-API-Migration.html or direct translation of old API to new one in code of this method https://github.com/linq2db/linq2db/blob/master/Source/LinqToDB/Data/DataConnectionExtensions.LegacyMerge.cs.")]
public static int Merge(ITable`1<T> table, IEnumerable`1<T> source, string tableName, string databaseName, string schemaName, string serverName, TableOptions tableOptions);
    [ExtensionAttribute]
[ObsoleteAttribute("Legacy Merge API obsoleted and will be removed in future versions. See migration guide https://linq2db.github.io/articles/sql/merge/Merge-API-Migration.html or direct translation of old API to new one in code of this method https://github.com/linq2db/linq2db/blob/master/Source/LinqToDB/Data/DataConnectionExtensions.LegacyMerge.cs.")]
public static Task`1<int> MergeAsync(DataConnection dataConnection, IQueryable`1<T> source, Expression`1<Func`2<T, bool>> predicate, string tableName, string databaseName, string schemaName, string serverName, TableOptions tableOptions, CancellationToken cancellationToken);
    [ExtensionAttribute]
[ObsoleteAttribute("Legacy Merge API obsoleted and will be removed in future versions. See migration guide https://linq2db.github.io/articles/sql/merge/Merge-API-Migration.html or direct translation of old API to new one in code of this method https://github.com/linq2db/linq2db/blob/master/Source/LinqToDB/Data/DataConnectionExtensions.LegacyMerge.cs.")]
public static Task`1<int> MergeAsync(DataConnection dataConnection, Expression`1<Func`2<T, bool>> predicate, IEnumerable`1<T> source, string tableName, string databaseName, string schemaName, string serverName, TableOptions tableOptions, CancellationToken cancellationToken);
    [ExtensionAttribute]
[ObsoleteAttribute("Legacy Merge API obsoleted and will be removed in future versions. See migration guide https://linq2db.github.io/articles/sql/merge/Merge-API-Migration.html or direct translation of old API to new one in code of this method https://github.com/linq2db/linq2db/blob/master/Source/LinqToDB/Data/DataConnectionExtensions.LegacyMerge.cs.")]
public static Task`1<int> MergeAsync(DataConnection dataConnection, bool delete, IEnumerable`1<T> source, string tableName, string databaseName, string schemaName, string serverName, TableOptions tableOptions, CancellationToken cancellationToken);
    [ExtensionAttribute]
[ObsoleteAttribute("Legacy Merge API obsoleted and will be removed in future versions. See migration guide https://linq2db.github.io/articles/sql/merge/Merge-API-Migration.html or direct translation of old API to new one in code of this method https://github.com/linq2db/linq2db/blob/master/Source/LinqToDB/Data/DataConnectionExtensions.LegacyMerge.cs.")]
public static Task`1<int> MergeAsync(DataConnection dataConnection, IEnumerable`1<T> source, string tableName, string databaseName, string schemaName, string serverName, TableOptions tableOptions, CancellationToken cancellationToken);
    [ExtensionAttribute]
[ObsoleteAttribute("Legacy Merge API obsoleted and will be removed in future versions. See migration guide https://linq2db.github.io/articles/sql/merge/Merge-API-Migration.html or direct translation of old API to new one in code of this method https://github.com/linq2db/linq2db/blob/master/Source/LinqToDB/Data/DataConnectionExtensions.LegacyMerge.cs.")]
public static Task`1<int> MergeAsync(ITable`1<T> table, IQueryable`1<T> source, Expression`1<Func`2<T, bool>> predicate, string tableName, string databaseName, string schemaName, string serverName, TableOptions tableOptions, CancellationToken cancellationToken);
    [ExtensionAttribute]
[ObsoleteAttribute("Legacy Merge API obsoleted and will be removed in future versions. See migration guide https://linq2db.github.io/articles/sql/merge/Merge-API-Migration.html or direct translation of old API to new one in code of this method https://github.com/linq2db/linq2db/blob/master/Source/LinqToDB/Data/DataConnectionExtensions.LegacyMerge.cs.")]
public static Task`1<int> MergeAsync(ITable`1<T> table, Expression`1<Func`2<T, bool>> predicate, IEnumerable`1<T> source, string tableName, string databaseName, string schemaName, string serverName, TableOptions tableOptions, CancellationToken cancellationToken);
    [ExtensionAttribute]
[ObsoleteAttribute("Legacy Merge API obsoleted and will be removed in future versions. See migration guide https://linq2db.github.io/articles/sql/merge/Merge-API-Migration.html or direct translation of old API to new one in code of this method https://github.com/linq2db/linq2db/blob/master/Source/LinqToDB/Data/DataConnectionExtensions.LegacyMerge.cs.")]
public static Task`1<int> MergeAsync(ITable`1<T> table, bool delete, IEnumerable`1<T> source, string tableName, string databaseName, string schemaName, string serverName, TableOptions tableOptions, CancellationToken cancellationToken);
    [ExtensionAttribute]
[ObsoleteAttribute("Legacy Merge API obsoleted and will be removed in future versions. See migration guide https://linq2db.github.io/articles/sql/merge/Merge-API-Migration.html or direct translation of old API to new one in code of this method https://github.com/linq2db/linq2db/blob/master/Source/LinqToDB/Data/DataConnectionExtensions.LegacyMerge.cs.")]
public static Task`1<int> MergeAsync(ITable`1<T> table, IEnumerable`1<T> source, string tableName, string databaseName, string schemaName, string serverName, TableOptions tableOptions, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.Data.DataConnectionTransaction : object {
    [CompilerGeneratedAttribute]
private DataConnection <DataConnection>k__BackingField;
    private bool _disposeTransaction;
    public DataConnection DataConnection { get; }
    public DataConnectionTransaction(DataConnection dataConnection);
    [CompilerGeneratedAttribute]
public DataConnection get_DataConnection();
    public void Commit();
    public void Rollback();
    [AsyncStateMachineAttribute("LinqToDB.Data.DataConnectionTransaction/<CommitAsync>d__7")]
public Task CommitAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("LinqToDB.Data.DataConnectionTransaction/<RollbackAsync>d__8")]
public Task RollbackAsync(CancellationToken cancellationToken);
    public sealed virtual void Dispose();
    public sealed virtual ValueTask DisposeAsync();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ScalarTypeAttribute]
public class LinqToDB.Data.DataParameter : object {
    [CompilerGeneratedAttribute]
private DataType <DataType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DbType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ParameterDirection> <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsArray>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Precision>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Scale>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private DbParameter <Output>k__BackingField;
    public DataType DataType { get; public set; }
    public string DbType { get; public set; }
    public Nullable`1<ParameterDirection> Direction { get; public set; }
    public string Name { get; public set; }
    public bool IsArray { get; public set; }
    public Nullable`1<int> Precision { get; public set; }
    public Nullable`1<int> Scale { get; public set; }
    public Nullable`1<int> Size { get; public set; }
    public object Value { get; public set; }
    public DbParameter Output { get; internal set; }
    internal DbDataType DbDataType { get; internal set; }
    public DataParameter(string name, object value);
    public DataParameter(string name, object value, DataType dataType);
    public DataParameter(string name, object value, DataType dataType, string dbType);
    public DataParameter(string name, object value, string dbType);
    [CompilerGeneratedAttribute]
public DataType get_DataType();
    [CompilerGeneratedAttribute]
public void set_DataType(DataType value);
    [CompilerGeneratedAttribute]
public string get_DbType();
    [CompilerGeneratedAttribute]
public void set_DbType(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<ParameterDirection> get_Direction();
    [CompilerGeneratedAttribute]
public void set_Direction(Nullable`1<ParameterDirection> value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public bool get_IsArray();
    [CompilerGeneratedAttribute]
public void set_IsArray(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Precision();
    [CompilerGeneratedAttribute]
public void set_Precision(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Scale();
    [CompilerGeneratedAttribute]
public void set_Scale(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
    [CompilerGeneratedAttribute]
public DbParameter get_Output();
    [CompilerGeneratedAttribute]
internal void set_Output(DbParameter value);
    internal DbDataType get_DbDataType();
    internal void set_DbDataType(DbDataType value);
    [NullableContextAttribute("1")]
public static DataParameter Char(string name, char value);
    public static DataParameter Char(string name, string value);
    [NullableContextAttribute("1")]
public static DataParameter VarChar(string name, char value);
    public static DataParameter VarChar(string name, string value);
    public static DataParameter Text(string name, string value);
    [NullableContextAttribute("1")]
public static DataParameter NChar(string name, char value);
    public static DataParameter NChar(string name, string value);
    [NullableContextAttribute("1")]
public static DataParameter NVarChar(string name, char value);
    public static DataParameter NVarChar(string name, string value);
    public static DataParameter NText(string name, string value);
    public static DataParameter Binary(string name, Byte[] value);
    public static DataParameter Binary(string name, Binary value);
    public static DataParameter Blob(string name, Byte[] value);
    public static DataParameter VarBinary(string name, Byte[] value);
    public static DataParameter VarBinary(string name, Binary value);
    public static DataParameter Image(string name, Byte[] value);
    [NullableContextAttribute("1")]
public static DataParameter Boolean(string name, bool value);
    [NullableContextAttribute("1")]
[CLSCompliantAttribute("False")]
public static DataParameter SByte(string name, sbyte value);
    [NullableContextAttribute("1")]
public static DataParameter Int16(string name, short value);
    [NullableContextAttribute("1")]
public static DataParameter Int32(string name, int value);
    [NullableContextAttribute("1")]
public static DataParameter Int64(string name, long value);
    [NullableContextAttribute("1")]
public static DataParameter Byte(string name, byte value);
    [NullableContextAttribute("1")]
[CLSCompliantAttribute("False")]
public static DataParameter UInt16(string name, ushort value);
    [NullableContextAttribute("1")]
[CLSCompliantAttribute("False")]
public static DataParameter UInt32(string name, UInt32 value);
    [NullableContextAttribute("1")]
[CLSCompliantAttribute("False")]
public static DataParameter UInt64(string name, ulong value);
    [NullableContextAttribute("1")]
public static DataParameter Single(string name, float value);
    [NullableContextAttribute("1")]
public static DataParameter Double(string name, double value);
    [NullableContextAttribute("1")]
public static DataParameter Decimal(string name, decimal value);
    [NullableContextAttribute("1")]
public static DataParameter Money(string name, decimal value);
    [NullableContextAttribute("1")]
public static DataParameter SmallMoney(string name, decimal value);
    [NullableContextAttribute("1")]
public static DataParameter Guid(string name, Guid value);
    [NullableContextAttribute("1")]
public static DataParameter Date(string name, DateTime value);
    [NullableContextAttribute("1")]
public static DataParameter Time(string name, TimeSpan value);
    [NullableContextAttribute("1")]
public static DataParameter DateTime(string name, DateTime value);
    [NullableContextAttribute("1")]
public static DataParameter DateTime2(string name, DateTime value);
    [NullableContextAttribute("1")]
public static DataParameter SmallDateTime(string name, DateTime value);
    [NullableContextAttribute("1")]
public static DataParameter DateTimeOffset(string name, DateTimeOffset value);
    public static DataParameter Timestamp(string name, Byte[] value);
    public static DataParameter Xml(string name, string value);
    public static DataParameter Xml(string name, XDocument value);
    public static DataParameter Xml(string name, XmlDocument value);
    public static DataParameter BitArray(string name, BitArray value);
    public static DataParameter Variant(string name, object value);
    [NullableContextAttribute("1")]
public static DataParameter VarNumeric(string name, decimal value);
    public static DataParameter Udt(string name, object value);
    public static DataParameter Dictionary(string name, IDictionary value);
    [NullableContextAttribute("1")]
public static DataParameter Create(string name, char value);
    public static DataParameter Create(string name, string value);
    public static DataParameter Create(string name, Byte[] value);
    public static DataParameter Create(string name, Binary value);
    [NullableContextAttribute("1")]
public static DataParameter Create(string name, bool value);
    [NullableContextAttribute("1")]
[CLSCompliantAttribute("False")]
public static DataParameter Create(string name, sbyte value);
    [NullableContextAttribute("1")]
public static DataParameter Create(string name, short value);
    [NullableContextAttribute("1")]
public static DataParameter Create(string name, int value);
    [NullableContextAttribute("1")]
public static DataParameter Create(string name, long value);
    [NullableContextAttribute("1")]
public static DataParameter Create(string name, byte value);
    [NullableContextAttribute("1")]
[CLSCompliantAttribute("False")]
public static DataParameter Create(string name, ushort value);
    [NullableContextAttribute("1")]
[CLSCompliantAttribute("False")]
public static DataParameter Create(string name, UInt32 value);
    [NullableContextAttribute("1")]
[CLSCompliantAttribute("False")]
public static DataParameter Create(string name, ulong value);
    [NullableContextAttribute("1")]
public static DataParameter Create(string name, float value);
    [NullableContextAttribute("1")]
public static DataParameter Create(string name, double value);
    [NullableContextAttribute("1")]
public static DataParameter Create(string name, decimal value);
    [NullableContextAttribute("1")]
public static DataParameter Create(string name, Guid value);
    [NullableContextAttribute("1")]
public static DataParameter Create(string name, TimeSpan value);
    [NullableContextAttribute("1")]
public static DataParameter Create(string name, DateTime value);
    [NullableContextAttribute("1")]
public static DataParameter Create(string name, DateTimeOffset value);
    public static DataParameter Create(string name, XDocument value);
    public static DataParameter Create(string name, XmlDocument value);
    public static DataParameter Create(string name, BitArray value);
    [NullableContextAttribute("1")]
public static DataParameter Create(string name, Dictionary`2<string, string> value);
    public static DataParameter Json(string name, string value);
    public static DataParameter BinaryJson(string name, string value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class LinqToDB.Data.DataReader : object {
    [CompilerGeneratedAttribute]
private DataReaderWrapper <ReaderWrapper>k__BackingField;
    [CompilerGeneratedAttribute]
private CommandInfo <CommandInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ReadNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <StartedOn>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Stopwatch <Stopwatch>k__BackingField;
    internal DataReaderWrapper ReaderWrapper { get; private set; }
    public DbDataReader Reader { get; }
    public CommandInfo CommandInfo { get; }
    internal int ReadNumber { get; internal set; }
    private DateTime StartedOn { get; }
    [NullableAttribute("1")]
private Stopwatch Stopwatch { get; }
    [NullableContextAttribute("1")]
public DataReader(CommandInfo commandInfo, DataReaderWrapper dataReader);
    [CompilerGeneratedAttribute]
internal DataReaderWrapper get_ReaderWrapper();
    [CompilerGeneratedAttribute]
private void set_ReaderWrapper(DataReaderWrapper value);
    public DbDataReader get_Reader();
    [CompilerGeneratedAttribute]
public CommandInfo get_CommandInfo();
    [CompilerGeneratedAttribute]
internal int get_ReadNumber();
    [CompilerGeneratedAttribute]
internal void set_ReadNumber(int value);
    [CompilerGeneratedAttribute]
private DateTime get_StartedOn();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private Stopwatch get_Stopwatch();
    public sealed virtual void Dispose();
    [NullableContextAttribute("1")]
[IteratorStateMachineAttribute("LinqToDB.Data.DataReader/<Query>d__21`1")]
public IEnumerable`1<T> Query(Func`2<DbDataReader, T> objectReader);
    [NullableContextAttribute("1")]
public IEnumerable`1<T> Query();
    [NullableContextAttribute("1")]
public IEnumerable`1<T> Query(T template);
    [NullableContextAttribute("1")]
public T Execute();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.Data.DataReaderAsync : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private DataReaderWrapper <ReaderWrapper>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private CommandInfo <CommandInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ReadNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private CancellationToken <CancellationToken>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <StartedOn>k__BackingField;
    [CompilerGeneratedAttribute]
private Stopwatch <Stopwatch>k__BackingField;
    [NullableAttribute("2")]
internal DataReaderWrapper ReaderWrapper { get; private set; }
    [NullableAttribute("2")]
public DbDataReader Reader { get; }
    [NullableAttribute("2")]
public CommandInfo CommandInfo { get; }
    internal int ReadNumber { get; internal set; }
    internal CancellationToken CancellationToken { get; internal set; }
    private DateTime StartedOn { get; }
    private Stopwatch Stopwatch { get; }
    public DataReaderAsync(CommandInfo commandInfo, DataReaderWrapper dataReader);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal DataReaderWrapper get_ReaderWrapper();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_ReaderWrapper(DataReaderWrapper value);
    [NullableContextAttribute("2")]
public DbDataReader get_Reader();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public CommandInfo get_CommandInfo();
    [CompilerGeneratedAttribute]
internal int get_ReadNumber();
    [CompilerGeneratedAttribute]
internal void set_ReadNumber(int value);
    [CompilerGeneratedAttribute]
internal CancellationToken get_CancellationToken();
    [CompilerGeneratedAttribute]
internal void set_CancellationToken(CancellationToken value);
    [CompilerGeneratedAttribute]
private DateTime get_StartedOn();
    [CompilerGeneratedAttribute]
private Stopwatch get_Stopwatch();
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("LinqToDB.Data.DataReaderAsync/<DisposeAsync>d__25")]
public sealed virtual ValueTask DisposeAsync();
    public Task`1<List`1<T>> QueryToListAsync(Func`2<DbDataReader, T> objectReader);
    [AsyncStateMachineAttribute("LinqToDB.Data.DataReaderAsync/<QueryToListAsync>d__27`1")]
public Task`1<List`1<T>> QueryToListAsync(Func`2<DbDataReader, T> objectReader, CancellationToken cancellationToken);
    public Task`1<T[]> QueryToArrayAsync(Func`2<DbDataReader, T> objectReader);
    [AsyncStateMachineAttribute("LinqToDB.Data.DataReaderAsync/<QueryToArrayAsync>d__29`1")]
public Task`1<T[]> QueryToArrayAsync(Func`2<DbDataReader, T> objectReader, CancellationToken cancellationToken);
    public Task QueryForEachAsync(Func`2<DbDataReader, T> objectReader, Action`1<T> action);
    [AsyncStateMachineAttribute("LinqToDB.Data.DataReaderAsync/<QueryForEachAsync>d__31`1")]
public Task QueryForEachAsync(Func`2<DbDataReader, T> objectReader, Action`1<T> action, CancellationToken cancellationToken);
    public Task`1<List`1<T>> QueryToListAsync();
    [AsyncStateMachineAttribute("LinqToDB.Data.DataReaderAsync/<QueryToListAsync>d__33`1")]
public Task`1<List`1<T>> QueryToListAsync(CancellationToken cancellationToken);
    public Task`1<T[]> QueryToArrayAsync();
    [AsyncStateMachineAttribute("LinqToDB.Data.DataReaderAsync/<QueryToArrayAsync>d__35`1")]
public Task`1<T[]> QueryToArrayAsync(CancellationToken cancellationToken);
    public Task QueryForEachAsync(Action`1<T> action);
    [AsyncStateMachineAttribute("LinqToDB.Data.DataReaderAsync/<QueryForEachAsync>d__37`1")]
public Task QueryForEachAsync(Action`1<T> action, CancellationToken cancellationToken);
    public Task`1<List`1<T>> QueryToListAsync(T template);
    [AsyncStateMachineAttribute("LinqToDB.Data.DataReaderAsync/<QueryToListAsync>d__39`1")]
public Task`1<List`1<T>> QueryToListAsync(T template, CancellationToken cancellationToken);
    public Task`1<T[]> QueryToArrayAsync(T template);
    [AsyncStateMachineAttribute("LinqToDB.Data.DataReaderAsync/<QueryToArrayAsync>d__41`1")]
public Task`1<T[]> QueryToArrayAsync(T template, CancellationToken cancellationToken);
    public Task QueryForEachAsync(T template, Action`1<T> action);
    public Task QueryForEachAsync(T template, Action`1<T> action, CancellationToken cancellationToken);
    public Task`1<T> ExecuteForEachAsync();
    [AsyncStateMachineAttribute("LinqToDB.Data.DataReaderAsync/<ExecuteForEachAsync>d__45`1")]
public Task`1<T> ExecuteForEachAsync(CancellationToken cancellationToken);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class LinqToDB.Data.DataReaderWrapper : object {
    private bool _disposed;
    private DataConnection _dataConnection;
    [CompilerGeneratedAttribute]
private DbDataReader <DataReader>k__BackingField;
    [CompilerGeneratedAttribute]
private DbCommand <Command>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`1<DbCommand> <OnBeforeCommandDispose>k__BackingField;
    public DbDataReader DataReader { get; private set; }
    internal DbCommand Command { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Action`1<DbCommand> OnBeforeCommandDispose { get; internal set; }
    [NullableContextAttribute("1")]
public DataReaderWrapper(DbDataReader dataReader);
    [NullableContextAttribute("1")]
internal DataReaderWrapper(DataConnection dataConnection, DbDataReader dataReader, DbCommand command);
    [CompilerGeneratedAttribute]
public DbDataReader get_DataReader();
    [CompilerGeneratedAttribute]
private void set_DataReader(DbDataReader value);
    [CompilerGeneratedAttribute]
internal DbCommand get_Command();
    [CompilerGeneratedAttribute]
internal Action`1<DbCommand> get_OnBeforeCommandDispose();
    [CompilerGeneratedAttribute]
internal void set_OnBeforeCommandDispose(Action`1<DbCommand> value);
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("LinqToDB.Data.DataReaderWrapper/<DisposeAsync>d__16")]
public sealed virtual ValueTask DisposeAsync();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class LinqToDB.Data.QueryTraceOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<TraceLevel> <TraceLevel>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`1<TraceInfo> <OnTrace>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`3<string, string, TraceLevel> <WriteTrace>k__BackingField;
    private Nullable`1<int> _configurationID;
    [NullableAttribute("1")]
public static QueryTraceOptions Empty;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public Nullable`1<TraceLevel> TraceLevel { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`1<TraceInfo> OnTrace { get; public set; }
    public Action`3<string, string, TraceLevel> WriteTrace { get; public set; }
    private int LinqToDB.Common.Internal.IConfigurationID.ConfigurationID { get; }
    public QueryTraceOptions(Nullable`1<TraceLevel> TraceLevel, Action`1<TraceInfo> OnTrace, Action`3<string, string, TraceLevel> WriteTrace);
    [NullableContextAttribute("1")]
private QueryTraceOptions(QueryTraceOptions original);
    private static QueryTraceOptions();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public Nullable`1<TraceLevel> get_TraceLevel();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_TraceLevel(Nullable`1<TraceLevel> value);
    [CompilerGeneratedAttribute]
public Action`1<TraceInfo> get_OnTrace();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_OnTrace(Action`1<TraceInfo> value);
    [CompilerGeneratedAttribute]
public Action`3<string, string, TraceLevel> get_WriteTrace();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_WriteTrace(Action`3<string, string, TraceLevel> value);
    private sealed virtual override int LinqToDB.Common.Internal.IConfigurationID.get_ConfigurationID();
    [NullableContextAttribute("1")]
private sealed virtual override void LinqToDB.Common.IApplicable<LinqToDB.Data.DataConnection>.Apply(DataConnection obj);
    public sealed virtual bool Equals(QueryTraceOptions other);
    public virtual int GetHashCode();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(QueryTraceOptions left, QueryTraceOptions right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(QueryTraceOptions left, QueryTraceOptions right);
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public QueryTraceOptions <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(Nullable`1& TraceLevel, Action`1& OnTrace, Action`3& WriteTrace);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Data.RecordReaderBuilder : object {
    public static ParameterExpression DataReaderParam;
    public ParameterExpression DataReaderLocal;
    public List`1<ParameterExpression> BlockVariables;
    public List`1<Expression> BlockExpressions;
    [CompilerGeneratedAttribute]
private IDataContext <DataContext>k__BackingField;
    [CompilerGeneratedAttribute]
private MappingSchema <MappingSchema>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ObjectType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <OriginalType>k__BackingField;
    [CompilerGeneratedAttribute]
private DbDataReader <Reader>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, int> <ReaderIndexes>k__BackingField;
    private int _varIndex;
    [NullableAttribute("2")]
private ParameterExpression _variable;
    public IDataContext DataContext { get; }
    public MappingSchema MappingSchema { get; }
    public Type ObjectType { get; }
    public Type OriginalType { get; }
    public DbDataReader Reader { get; }
    public Dictionary`2<string, int> ReaderIndexes { get; }
    public RecordReaderBuilder(IDataContext dataContext, Type objectType, DbDataReader reader, LambdaExpression converterExpr);
    private static RecordReaderBuilder();
    [CompilerGeneratedAttribute]
public IDataContext get_DataContext();
    [CompilerGeneratedAttribute]
public MappingSchema get_MappingSchema();
    [CompilerGeneratedAttribute]
public Type get_ObjectType();
    [CompilerGeneratedAttribute]
public Type get_OriginalType();
    [CompilerGeneratedAttribute]
public DbDataReader get_Reader();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, int> get_ReaderIndexes();
    private Expression BuildReadExpression(bool buildBlock, Type objectType);
    private ParameterExpression BuildVariable(Expression expr, string name);
    private int GetReaderIndex(string columnName);
    private int GetReaderIndex(EntityDescriptor entityDescriptor, Type objectType, string name);
    [IteratorStateMachineAttribute("LinqToDB.Data.RecordReaderBuilder/<GetReadIndexes>d__29")]
private IEnumerable`1<ReadColumnInfo> GetReadIndexes(EntityDescriptor entityDescriptor);
    private Expression BuildDefaultConstructor(EntityDescriptor entityDescriptor, Type objectType);
    [IteratorStateMachineAttribute("LinqToDB.Data.RecordReaderBuilder/<GetExpressions>d__32")]
private IEnumerable`1<Expression> GetExpressions(TypeAccessor typeAccessor, RecordType recordType, List`1<ColumnInfo> columns);
    private Expression BuildRecordConstructor(EntityDescriptor entityDescriptor, Type objectType, RecordType recordType);
    public Func`2<DbDataReader, T> BuildReaderFunction();
    private Expression BuildReaderExpression();
    private Expression BuildBlock(Expression expression);
}
internal static class LinqToDB.Data.RetryPolicy.DefaultRetryPolicyFactory : object {
    [NullableContextAttribute("1")]
public static IRetryPolicy GetRetryPolicy(DataConnection dataContext);
}
[NullableContextAttribute("1")]
public interface LinqToDB.Data.RetryPolicy.IRetryPolicy {
    public abstract virtual TResult Execute(Func`1<TResult> operation);
    public abstract virtual void Execute(Action operation);
    public abstract virtual Task`1<TResult> ExecuteAsync(Func`2<CancellationToken, Task`1<TResult>> operation, CancellationToken cancellationToken);
    public abstract virtual Task ExecuteAsync(Func`2<CancellationToken, Task> operation, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Data.RetryPolicy.RetryingDbCommand : DbCommand {
    private DbCommand _command;
    private IRetryPolicy _policy;
    public string CommandText { get; public set; }
    public int CommandTimeout { get; public set; }
    public CommandType CommandType { get; public set; }
    public UpdateRowSource UpdatedRowSource { get; public set; }
    [NullableAttribute("2")]
protected DbConnection DbConnection { get; protected set; }
    protected DbParameterCollection DbParameterCollection { get; }
    [NullableAttribute("2")]
protected DbTransaction DbTransaction { get; protected set; }
    public bool DesignTimeVisible { get; public set; }
    public DbCommand UnderlyingObject { get; }
    public RetryingDbCommand(DbCommand command, IRetryPolicy policy);
    public virtual void Prepare();
    public virtual string get_CommandText();
    public virtual void set_CommandText(string value);
    public virtual int get_CommandTimeout();
    public virtual void set_CommandTimeout(int value);
    public virtual CommandType get_CommandType();
    public virtual void set_CommandType(CommandType value);
    public virtual UpdateRowSource get_UpdatedRowSource();
    public virtual void set_UpdatedRowSource(UpdateRowSource value);
    [NullableContextAttribute("2")]
protected virtual DbConnection get_DbConnection();
    [NullableContextAttribute("2")]
protected virtual void set_DbConnection(DbConnection value);
    protected virtual DbParameterCollection get_DbParameterCollection();
    [NullableContextAttribute("2")]
protected virtual DbTransaction get_DbTransaction();
    [NullableContextAttribute("2")]
protected virtual void set_DbTransaction(DbTransaction value);
    public virtual bool get_DesignTimeVisible();
    public virtual void set_DesignTimeVisible(bool value);
    public virtual void Cancel();
    protected virtual DbParameter CreateDbParameter();
    protected virtual DbDataReader ExecuteDbDataReader(CommandBehavior behavior);
    public virtual int ExecuteNonQuery();
    [NullableContextAttribute("2")]
public virtual object ExecuteScalar();
    protected virtual Task`1<DbDataReader> ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken);
    public virtual Task`1<int> ExecuteNonQueryAsync(CancellationToken cancellationToken);
    public virtual Task`1<object> ExecuteScalarAsync(CancellationToken cancellationToken);
    public sealed virtual DbCommand get_UnderlyingObject();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Data.RetryPolicy.RetryingDbConnection : object {
    private DataConnection _dataConnection;
    private IAsyncDbConnection _connection;
    private IRetryPolicy _policy;
    private DbConnection LinqToDB.Configuration.IProxy<System.Data.Common.DbConnection>.UnderlyingObject { get; }
    private DbConnection LinqToDB.Async.IAsyncDbConnection.Connection { get; }
    private string LinqToDB.Async.IAsyncDbConnection.ConnectionString { get; private set; }
    private ConnectionState LinqToDB.Async.IAsyncDbConnection.State { get; }
    public RetryingDbConnection(DataConnection dataConnection, IAsyncDbConnection connection, IRetryPolicy policy);
    private sealed virtual override DbConnection LinqToDB.Configuration.IProxy<System.Data.Common.DbConnection>.get_UnderlyingObject();
    private sealed virtual override void System.IDisposable.Dispose();
    private sealed virtual override ValueTask System.IAsyncDisposable.DisposeAsync();
    private sealed virtual override DbConnection LinqToDB.Async.IAsyncDbConnection.get_Connection();
    private sealed virtual override string LinqToDB.Async.IAsyncDbConnection.get_ConnectionString();
    private sealed virtual override void LinqToDB.Async.IAsyncDbConnection.set_ConnectionString(string value);
    private sealed virtual override ConnectionState LinqToDB.Async.IAsyncDbConnection.get_State();
    private sealed virtual override IAsyncDbTransaction LinqToDB.Async.IAsyncDbConnection.BeginTransaction();
    private sealed virtual override IAsyncDbTransaction LinqToDB.Async.IAsyncDbConnection.BeginTransaction(IsolationLevel isolationLevel);
    private sealed virtual override ValueTask`1<IAsyncDbTransaction> LinqToDB.Async.IAsyncDbConnection.BeginTransactionAsync(CancellationToken cancellationToken);
    private sealed virtual override ValueTask`1<IAsyncDbTransaction> LinqToDB.Async.IAsyncDbConnection.BeginTransactionAsync(IsolationLevel isolationLevel, CancellationToken cancellationToken);
    private sealed virtual override DbCommand LinqToDB.Async.IAsyncDbConnection.CreateCommand();
    private sealed virtual override void LinqToDB.Async.IAsyncDbConnection.Close();
    private sealed virtual override Task LinqToDB.Async.IAsyncDbConnection.CloseAsync();
    private sealed virtual override void LinqToDB.Async.IAsyncDbConnection.Open();
    private sealed virtual override Task LinqToDB.Async.IAsyncDbConnection.OpenAsync(CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
private sealed virtual override DbConnection LinqToDB.Async.IAsyncDbConnection.TryClone();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.Data.RetryPolicy.RetryLimitExceededException : LinqToDBException {
    private static string RetryLimitExceededMessage;
    public RetryLimitExceededException(Exception innerException);
    protected RetryLimitExceededException(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class LinqToDB.Data.RetryPolicy.RetryPolicyBase : object {
    [CompilerGeneratedAttribute]
private double <RandomFactor>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ExponentialBase>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Coefficient>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Exception> <ExceptionsEncountered>k__BackingField;
    [CompilerGeneratedAttribute]
private Random <Random>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxRetryCount>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <MaxRetryDelay>k__BackingField;
    private static AsyncLocal`1<bool> _suspended;
    public double RandomFactor { get; }
    public double ExponentialBase { get; }
    public TimeSpan Coefficient { get; }
    protected List`1<Exception> ExceptionsEncountered { get; }
    protected Random Random { get; }
    protected int MaxRetryCount { get; }
    protected TimeSpan MaxRetryDelay { get; }
    protected static bool Suspended { get; protected set; }
    protected RetryPolicyBase(int maxRetryCount, TimeSpan maxRetryDelay, double randomFactor, double exponentialBase, TimeSpan coefficient);
    private static RetryPolicyBase();
    [CompilerGeneratedAttribute]
public double get_RandomFactor();
    [CompilerGeneratedAttribute]
public double get_ExponentialBase();
    [CompilerGeneratedAttribute]
public TimeSpan get_Coefficient();
    [CompilerGeneratedAttribute]
protected virtual List`1<Exception> get_ExceptionsEncountered();
    [CompilerGeneratedAttribute]
protected virtual Random get_Random();
    [CompilerGeneratedAttribute]
protected virtual int get_MaxRetryCount();
    [CompilerGeneratedAttribute]
protected virtual TimeSpan get_MaxRetryDelay();
    protected static bool get_Suspended();
    protected static void set_Suspended(bool value);
    public virtual TResult Execute(Func`1<TResult> operation);
    public virtual void Execute(Action operation);
    private TResult ExecuteImplementation(Func`1<TResult> operation);
    public virtual Task`1<TResult> ExecuteAsync(Func`2<CancellationToken, Task`1<TResult>> operation, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("LinqToDB.Data.RetryPolicy.RetryPolicyBase/<ExecuteAsync>d__30")]
public sealed virtual Task ExecuteAsync(Func`2<CancellationToken, Task> operation, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("LinqToDB.Data.RetryPolicy.RetryPolicyBase/<ExecuteImplementationAsync>d__31`1")]
private Task`1<TResult> ExecuteImplementationAsync(Func`2<CancellationToken, Task`1<TResult>> operation, CancellationToken cancellationToken);
    protected virtual void OnFirstExecution();
    protected virtual void OnRetry();
    protected virtual Nullable`1<TimeSpan> GetNextDelay(Exception lastException);
    protected abstract virtual bool ShouldRetryOn(Exception exception);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class LinqToDB.Data.RetryPolicy.RetryPolicyOptions : object {
    [CompilerGeneratedAttribute]
private IRetryPolicy <RetryPolicy>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<DataConnection, IRetryPolicy> <Factory>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxRetryCount>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <MaxDelay>k__BackingField;
    [CompilerGeneratedAttribute]
private double <RandomFactor>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ExponentialBase>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Coefficient>k__BackingField;
    private Nullable`1<int> _configurationID;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public IRetryPolicy RetryPolicy { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<DataConnection, IRetryPolicy> Factory { get; public set; }
    public int MaxRetryCount { get; public set; }
    public TimeSpan MaxDelay { get; public set; }
    public double RandomFactor { get; public set; }
    public double ExponentialBase { get; public set; }
    public TimeSpan Coefficient { get; public set; }
    private int LinqToDB.Common.Internal.IConfigurationID.ConfigurationID { get; }
    public RetryPolicyOptions(IRetryPolicy RetryPolicy, Func`2<DataConnection, IRetryPolicy> Factory, int MaxRetryCount, TimeSpan MaxDelay, double RandomFactor, double ExponentialBase, TimeSpan Coefficient);
    [NullableContextAttribute("1")]
private RetryPolicyOptions(RetryPolicyOptions original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public IRetryPolicy get_RetryPolicy();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_RetryPolicy(IRetryPolicy value);
    [CompilerGeneratedAttribute]
public Func`2<DataConnection, IRetryPolicy> get_Factory();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Factory(Func`2<DataConnection, IRetryPolicy> value);
    [CompilerGeneratedAttribute]
public int get_MaxRetryCount();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_MaxRetryCount(int value);
    [CompilerGeneratedAttribute]
public TimeSpan get_MaxDelay();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_MaxDelay(TimeSpan value);
    [CompilerGeneratedAttribute]
public double get_RandomFactor();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_RandomFactor(double value);
    [CompilerGeneratedAttribute]
public double get_ExponentialBase();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ExponentialBase(double value);
    [CompilerGeneratedAttribute]
public TimeSpan get_Coefficient();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Coefficient(TimeSpan value);
    private sealed virtual override int LinqToDB.Common.Internal.IConfigurationID.get_ConfigurationID();
    [NullableContextAttribute("1")]
private sealed virtual override void LinqToDB.Common.IApplicable<LinqToDB.Data.DataConnection>.Apply(DataConnection obj);
    public sealed virtual bool Equals(RetryPolicyOptions other);
    public virtual int GetHashCode();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(RetryPolicyOptions left, RetryPolicyOptions right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(RetryPolicyOptions left, RetryPolicyOptions right);
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public RetryPolicyOptions <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(IRetryPolicy& RetryPolicy, Func`2& Factory, Int32& MaxRetryCount, TimeSpan& MaxDelay, Double& RandomFactor, Double& ExponentialBase, TimeSpan& Coefficient);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class LinqToDB.Data.TraceInfo : object {
    [CompilerGeneratedAttribute]
private TraceInfoStep <TraceInfoStep>k__BackingField;
    [CompilerGeneratedAttribute]
private TraceOperation <Operation>k__BackingField;
    [CompilerGeneratedAttribute]
private TraceLevel <TraceLevel>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private DataConnection <DataConnection>k__BackingField;
    [CompilerGeneratedAttribute]
private DbCommand <Command>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <StartTime>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <ExecutionTime>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <RecordsAffected>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommandText>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <MapperExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAsync>k__BackingField;
    private string _sqlText;
    public TraceInfoStep TraceInfoStep { get; }
    public TraceOperation Operation { get; }
    public TraceLevel TraceLevel { get; public set; }
    [NullableAttribute("1")]
public DataConnection DataConnection { get; }
    public DbCommand Command { get; public set; }
    public Nullable`1<DateTime> StartTime { get; public set; }
    public Nullable`1<TimeSpan> ExecutionTime { get; public set; }
    public Nullable`1<int> RecordsAffected { get; public set; }
    public Exception Exception { get; public set; }
    public string CommandText { get; public set; }
    public Expression MapperExpression { get; public set; }
    public bool IsAsync { get; }
    [NullableAttribute("1")]
public string SqlText { get; }
    [NullableContextAttribute("1")]
public TraceInfo(DataConnection dataConnection, TraceInfoStep traceInfoStep, TraceOperation operation, bool isAsync);
    [CompilerGeneratedAttribute]
public TraceInfoStep get_TraceInfoStep();
    [CompilerGeneratedAttribute]
public TraceOperation get_Operation();
    [CompilerGeneratedAttribute]
public TraceLevel get_TraceLevel();
    [CompilerGeneratedAttribute]
public void set_TraceLevel(TraceLevel value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public DataConnection get_DataConnection();
    [CompilerGeneratedAttribute]
public DbCommand get_Command();
    [CompilerGeneratedAttribute]
public void set_Command(DbCommand value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_StartTime();
    [CompilerGeneratedAttribute]
public void set_StartTime(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_ExecutionTime();
    [CompilerGeneratedAttribute]
public void set_ExecutionTime(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_RecordsAffected();
    [CompilerGeneratedAttribute]
public void set_RecordsAffected(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
public void set_Exception(Exception value);
    [CompilerGeneratedAttribute]
public string get_CommandText();
    [CompilerGeneratedAttribute]
public void set_CommandText(string value);
    [CompilerGeneratedAttribute]
public Expression get_MapperExpression();
    [CompilerGeneratedAttribute]
public void set_MapperExpression(Expression value);
    [CompilerGeneratedAttribute]
public bool get_IsAsync();
    [NullableContextAttribute("1")]
public string get_SqlText();
}
public enum LinqToDB.Data.TraceInfoStep : Enum {
    public int value__;
    public static TraceInfoStep BeforeExecute;
    public static TraceInfoStep AfterExecute;
    public static TraceInfoStep Error;
    public static TraceInfoStep MapperCreated;
    public static TraceInfoStep Completed;
}
public enum LinqToDB.Data.TraceOperation : Enum {
    public int value__;
    public static TraceOperation ExecuteNonQuery;
    public static TraceOperation ExecuteReader;
    public static TraceOperation ExecuteScalar;
    public static TraceOperation BulkCopy;
    public static TraceOperation Open;
    public static TraceOperation BuildMapping;
    public static TraceOperation DisposeQuery;
    public static TraceOperation BeginTransaction;
    public static TraceOperation CommitTransaction;
    public static TraceOperation RollbackTransaction;
    public static TraceOperation DisposeTransaction;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class LinqToDB.Data.TransactionScopeHelper : object {
    private static Func`1<bool> _getInScopeFunc;
    public static bool IsInsideTransactionScope { get; }
    private static TransactionScopeHelper();
    public static bool get_IsInsideTransactionScope();
    private static Func`1<bool> GetTransactionScopeFunc();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PublicAPIAttribute]
public class LinqToDB.DataContext : object {
    private bool _disposed;
    [CompilerGeneratedAttribute]
private DataOptions <Options>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <ConfigurationString>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <ConnectionString>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataProvider <DataProvider>k__BackingField;
    private int _msID;
    private Nullable`1<int> _configurationID;
    [CompilerGeneratedAttribute]
private MappingSchema <MappingSchema>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InlineParameters>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <LastQuery>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`1<TraceInfo> <OnTraceConnection>k__BackingField;
    private bool _keepConnectionAlive;
    private Nullable`1<bool> _isMarsEnabled;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<string> _queryHints;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<string> _nextQueryHints;
    [CompilerGeneratedAttribute]
private bool <CloseAfterUse>k__BackingField;
    internal int LockDbManagerCounter;
    private Nullable`1<int> _commandTimeout;
    [NullableAttribute("2")]
private DataConnection _dataConnection;
    [NullableAttribute("2")]
private AggregatedCommandInterceptor _commandInterceptor;
    [NullableAttribute("2")]
private AggregatedConnectionInterceptor _connectionInterceptor;
    [NullableAttribute("2")]
private AggregatedDataContextInterceptor _dataContextInterceptor;
    [NullableAttribute("2")]
private AggregatedEntityServiceInterceptor _entityServiceInterceptor;
    [NullableAttribute("2")]
private AggregatedUnwrapDataObjectInterceptor _unwrapDataObjectInterceptor;
    public DataOptions Options { get; private set; }
    [NullableAttribute("2")]
public string ConfigurationString { get; private set; }
    [NullableAttribute("2")]
public string ConnectionString { get; private set; }
    public IDataProvider DataProvider { get; private set; }
    public string ContextName { get; }
    public int ConfigurationID { get; }
    public MappingSchema MappingSchema { get; private set; }
    public bool InlineParameters { get; public set; }
    [NullableAttribute("2")]
public string LastQuery { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`1<TraceInfo> OnTraceConnection { get; public set; }
    public bool KeepConnectionAlive { get; public set; }
    public bool IsMarsEnabled { get; public set; }
    public List`1<string> QueryHints { get; }
    public List`1<string> NextQueryHints { get; }
    public bool CloseAfterUse { get; public set; }
    public int CommandTimeout { get; public set; }
    private Func`1<ISqlBuilder> LinqToDB.IDataContext.CreateSqlProvider { get; }
    private Func`2<DataOptions, ISqlOptimizer> LinqToDB.IDataContext.GetSqlOptimizer { get; }
    private Type LinqToDB.IDataContext.DataReaderType { get; }
    private SqlProviderFlags LinqToDB.IDataContext.SqlProviderFlags { get; }
    private TableOptions LinqToDB.IDataContext.SupportedTableOptions { get; }
    [NullableAttribute("2")]
private ICommandInterceptor LinqToDB.Interceptors.IInterceptable<LinqToDB.Interceptors.ICommandInterceptor>.Interceptor { get; private set; }
    [NullableAttribute("2")]
private IConnectionInterceptor LinqToDB.Interceptors.IInterceptable<LinqToDB.Interceptors.IConnectionInterceptor>.Interceptor { get; private set; }
    [NullableAttribute("2")]
private IDataContextInterceptor LinqToDB.Interceptors.IInterceptable<LinqToDB.Interceptors.IDataContextInterceptor>.Interceptor { get; private set; }
    [NullableAttribute("2")]
private IEntityServiceInterceptor LinqToDB.Interceptors.IInterceptable<LinqToDB.Interceptors.IEntityServiceInterceptor>.Interceptor { get; private set; }
    [NullableAttribute("2")]
private IUnwrapDataObjectInterceptor LinqToDB.IDataContext.UnwrapDataObjectInterceptor { get; }
    [NullableAttribute("2")]
private IUnwrapDataObjectInterceptor LinqToDB.Interceptors.IInterceptable<LinqToDB.Interceptors.IUnwrapDataObjectInterceptor>.Interceptor { get; private set; }
    [NullableContextAttribute("2")]
public DataContext(string configurationString);
    public DataContext(IDataProvider dataProvider, string connectionString);
    public DataContext(string providerName, string connectionString);
    public DataContext(DataOptions options);
    [CompilerGeneratedAttribute]
public sealed virtual DataOptions get_Options();
    [CompilerGeneratedAttribute]
private void set_Options(DataOptions value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual string get_ConfigurationString();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_ConfigurationString(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_ConnectionString();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_ConnectionString(string value);
    [CompilerGeneratedAttribute]
public IDataProvider get_DataProvider();
    [CompilerGeneratedAttribute]
private void set_DataProvider(IDataProvider value);
    public sealed virtual string get_ContextName();
    public sealed virtual int get_ConfigurationID();
    [CompilerGeneratedAttribute]
public sealed virtual MappingSchema get_MappingSchema();
    [CompilerGeneratedAttribute]
private void set_MappingSchema(MappingSchema value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_InlineParameters();
    [CompilerGeneratedAttribute]
public sealed virtual void set_InlineParameters(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_LastQuery();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_LastQuery(string value);
    [CompilerGeneratedAttribute]
public Action`1<TraceInfo> get_OnTraceConnection();
    [CompilerGeneratedAttribute]
public void set_OnTraceConnection(Action`1<TraceInfo> value);
    public bool get_KeepConnectionAlive();
    public void set_KeepConnectionAlive(bool value);
    public bool get_IsMarsEnabled();
    public void set_IsMarsEnabled(bool value);
    public sealed virtual List`1<string> get_QueryHints();
    public sealed virtual List`1<string> get_NextQueryHints();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_CloseAfterUse();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CloseAfterUse(bool value);
    public int get_CommandTimeout();
    public void set_CommandTimeout(int value);
    protected virtual DataConnection CreateDataConnection(DataOptions options);
    internal DataConnection GetDataConnection();
    private void AssertDisposed();
    internal void ReleaseQuery();
    [AsyncStateMachineAttribute("LinqToDB.DataContext/<ReleaseQueryAsync>d__72")]
internal Task ReleaseQueryAsync();
    private sealed virtual override Func`1<ISqlBuilder> LinqToDB.IDataContext.get_CreateSqlProvider();
    private sealed virtual override Func`2<DataOptions, ISqlOptimizer> LinqToDB.IDataContext.get_GetSqlOptimizer();
    private sealed virtual override Type LinqToDB.IDataContext.get_DataReaderType();
    private sealed virtual override SqlProviderFlags LinqToDB.IDataContext.get_SqlProviderFlags();
    private sealed virtual override TableOptions LinqToDB.IDataContext.get_SupportedTableOptions();
    private sealed virtual override Expression LinqToDB.IDataContext.GetReaderExpression(DbDataReader reader, int idx, Expression readerExpression, Type toType);
    private sealed virtual override Nullable`1<bool> LinqToDB.IDataContext.IsDBNullAllowed(DbDataReader reader, int idx);
    protected virtual DataConnection CloneDataConnection(DataConnection currentConnection, DataOptions options);
    private sealed virtual override IDataContext LinqToDB.IDataContext.Clone(bool forNestedQuery);
    private sealed virtual override void System.IDisposable.Dispose();
    protected virtual void Dispose(bool disposing);
    [AsyncStateMachineAttribute("LinqToDB.DataContext/<System-IAsyncDisposable-DisposeAsync>d__89")]
private sealed virtual override ValueTask System.IAsyncDisposable.DisposeAsync();
    protected virtual ValueTask DisposeAsync(bool disposing);
    private sealed virtual override void LinqToDB.IDataContext.Close();
    [AsyncStateMachineAttribute("LinqToDB.DataContext/<LinqToDB-IDataContext-CloseAsync>d__92")]
private sealed virtual override Task LinqToDB.IDataContext.CloseAsync();
    public virtual DataContextTransaction BeginTransaction(IsolationLevel level);
    public virtual DataContextTransaction BeginTransaction();
    [AsyncStateMachineAttribute("LinqToDB.DataContext/<BeginTransactionAsync>d__95")]
public virtual Task`1<DataContextTransaction> BeginTransactionAsync(IsolationLevel level, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("LinqToDB.DataContext/<BeginTransactionAsync>d__96")]
public virtual Task`1<DataContextTransaction> BeginTransactionAsync(CancellationToken cancellationToken);
    private sealed virtual override IQueryRunner LinqToDB.IDataContext.GetQueryRunner(Query query, int queryNumber, Expression expression, Object[] parameters, Object[] preambles);
    [NullableContextAttribute("2")]
private sealed virtual override ICommandInterceptor LinqToDB.Interceptors.IInterceptable<LinqToDB.Interceptors.ICommandInterceptor>.get_Interceptor();
    [NullableContextAttribute("2")]
private sealed virtual override void LinqToDB.Interceptors.IInterceptable<LinqToDB.Interceptors.ICommandInterceptor>.set_Interceptor(ICommandInterceptor value);
    [NullableContextAttribute("2")]
private sealed virtual override IConnectionInterceptor LinqToDB.Interceptors.IInterceptable<LinqToDB.Interceptors.IConnectionInterceptor>.get_Interceptor();
    [NullableContextAttribute("2")]
private sealed virtual override void LinqToDB.Interceptors.IInterceptable<LinqToDB.Interceptors.IConnectionInterceptor>.set_Interceptor(IConnectionInterceptor value);
    [NullableContextAttribute("2")]
private sealed virtual override IDataContextInterceptor LinqToDB.Interceptors.IInterceptable<LinqToDB.Interceptors.IDataContextInterceptor>.get_Interceptor();
    [NullableContextAttribute("2")]
private sealed virtual override void LinqToDB.Interceptors.IInterceptable<LinqToDB.Interceptors.IDataContextInterceptor>.set_Interceptor(IDataContextInterceptor value);
    [NullableContextAttribute("2")]
private sealed virtual override IEntityServiceInterceptor LinqToDB.Interceptors.IInterceptable<LinqToDB.Interceptors.IEntityServiceInterceptor>.get_Interceptor();
    [NullableContextAttribute("2")]
private sealed virtual override void LinqToDB.Interceptors.IInterceptable<LinqToDB.Interceptors.IEntityServiceInterceptor>.set_Interceptor(IEntityServiceInterceptor value);
    [NullableContextAttribute("2")]
private sealed virtual override IUnwrapDataObjectInterceptor LinqToDB.IDataContext.get_UnwrapDataObjectInterceptor();
    [NullableContextAttribute("2")]
private sealed virtual override IUnwrapDataObjectInterceptor LinqToDB.Interceptors.IInterceptable<LinqToDB.Interceptors.IUnwrapDataObjectInterceptor>.get_Interceptor();
    [NullableContextAttribute("2")]
private sealed virtual override void LinqToDB.Interceptors.IInterceptable<LinqToDB.Interceptors.IUnwrapDataObjectInterceptor>.set_Interceptor(IUnwrapDataObjectInterceptor value);
    public sealed virtual void AddInterceptor(IInterceptor interceptor);
    private void AddInterceptor(IInterceptor interceptor, bool addToOptions);
    public sealed virtual void RemoveInterceptor(IInterceptor interceptor);
    [CompilerGeneratedAttribute]
private ISqlBuilder <LinqToDB.IDataContext.get_CreateSqlProvider>b__74_0();
    [CompilerGeneratedAttribute]
private ConnectionOptions <LinqToDB.IDataContext.Clone>b__86_0(ConnectionOptions o);
    [CompilerGeneratedAttribute]
private ConnectionOptions <LinqToDB.IDataContext.Clone>b__86_1(ConnectionOptions o);
    [CompilerGeneratedAttribute]
private void <AddInterceptor>g__Add|123_0(TA& aggregator, TI intercept);
}
[ExtensionAttribute]
internal static class LinqToDB.DataContextExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IReadOnlyCollection`1<string> GetNextCommandHints(IDataContext context, bool clearNextHints);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.DataContextOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <CommandTimeout>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IReadOnlyList`1<IInterceptor> <Interceptors>k__BackingField;
    private Nullable`1<int> _configurationID;
    public static DataContextOptions Empty;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public Nullable`1<int> CommandTimeout { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyList`1<IInterceptor> Interceptors { get; public set; }
    private int LinqToDB.Common.Internal.IConfigurationID.ConfigurationID { get; }
    public DataContextOptions(Nullable`1<int> CommandTimeout, IReadOnlyList`1<IInterceptor> Interceptors);
    private DataContextOptions(DataContextOptions original);
    private static DataContextOptions();
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_CommandTimeout();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_CommandTimeout(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<IInterceptor> get_Interceptors();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Interceptors(IReadOnlyList`1<IInterceptor> value);
    private sealed virtual override int LinqToDB.Common.Internal.IConfigurationID.get_ConfigurationID();
    private sealed virtual override void LinqToDB.Common.IApplicable<LinqToDB.Data.DataConnection>.Apply(DataConnection obj);
    private sealed virtual override void LinqToDB.Common.IApplicable<LinqToDB.DataContext>.Apply(DataContext obj);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(DataContextOptions other);
    public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(DataContextOptions left, DataContextOptions right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(DataContextOptions left, DataContextOptions right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public DataContextOptions <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(Nullable`1& CommandTimeout, IReadOnlyList`1& Interceptors);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PublicAPIAttribute]
public class LinqToDB.DataContextTransaction : object {
    [CompilerGeneratedAttribute]
private DataContext <DataContext>k__BackingField;
    private int _transactionCounter;
    public DataContext DataContext { get; public set; }
    public DataContextTransaction(DataContext dataContext);
    [CompilerGeneratedAttribute]
public DataContext get_DataContext();
    [CompilerGeneratedAttribute]
public void set_DataContext(DataContext value);
    public void BeginTransaction();
    public void BeginTransaction(IsolationLevel level);
    [AsyncStateMachineAttribute("LinqToDB.DataContextTransaction/<BeginTransactionAsync>d__8")]
public Task BeginTransactionAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("LinqToDB.DataContextTransaction/<BeginTransactionAsync>d__9")]
public Task BeginTransactionAsync(IsolationLevel level, CancellationToken cancellationToken);
    public void CommitTransaction();
    public void RollbackTransaction();
    [AsyncStateMachineAttribute("LinqToDB.DataContextTransaction/<CommitTransactionAsync>d__12")]
public Task CommitTransactionAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("LinqToDB.DataContextTransaction/<RollbackTransactionAsync>d__13")]
public Task RollbackTransactionAsync(CancellationToken cancellationToken);
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("LinqToDB.DataContextTransaction/<System-IAsyncDisposable-DisposeAsync>d__15")]
private sealed virtual override ValueTask System.IAsyncDisposable.DisposeAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[PublicAPIAttribute]
public static class LinqToDB.DataExtensions : object {
    public static MethodInfo SelectQueryMethodInfo;
    private static DataExtensions();
    [ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
public static ITable`1<T> GetTable(IDataContext dataContext);
    [ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
public static ITable`1<T> GetTable(IDataContext dataContext, object instance, MethodInfo methodInfo, Object[] parameters);
    [ExtensionAttribute]
public static Func`2<TDc, TResult> Compile(IDataContext dataContext, Expression`1<Func`2<TDc, TResult>> query);
    [ExtensionAttribute]
public static Func`3<TDc, TArg1, TResult> Compile(IDataContext dataContext, Expression`1<Func`3<TDc, TArg1, TResult>> query);
    [ExtensionAttribute]
public static Func`4<TDc, TArg1, TArg2, TResult> Compile(IDataContext dataContext, Expression`1<Func`4<TDc, TArg1, TArg2, TResult>> query);
    [ExtensionAttribute]
public static Func`5<TDc, TArg1, TArg2, TArg3, TResult> Compile(IDataContext dataContext, Expression`1<Func`5<TDc, TArg1, TArg2, TArg3, TResult>> query);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static int Insert(IDataContext dataContext, T obj, string tableName, string databaseName, string schemaName, string serverName, TableOptions tableOptions);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static int Insert(IDataContext dataContext, T obj, InsertColumnFilter`1<T> columnFilter, string tableName, string databaseName, string schemaName, string serverName, TableOptions tableOptions);
    [ExtensionAttribute]
public static Task`1<int> InsertAsync(IDataContext dataContext, T obj, string tableName, string databaseName, string schemaName, string serverName, TableOptions tableOptions, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<int> InsertAsync(IDataContext dataContext, T obj, InsertColumnFilter`1<T> columnFilter, string tableName, string databaseName, string schemaName, string serverName, TableOptions tableOptions, CancellationToken token);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static int InsertOrReplace(IDataContext dataContext, T obj, string tableName, string databaseName, string schemaName, string serverName, TableOptions tableOptions);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static int InsertOrReplace(IDataContext dataContext, T obj, InsertOrUpdateColumnFilter`1<T> columnFilter, string tableName, string databaseName, string schemaName, string serverName, TableOptions tableOptions);
    [ExtensionAttribute]
public static Task`1<int> InsertOrReplaceAsync(IDataContext dataContext, T obj, string tableName, string databaseName, string schemaName, string serverName, TableOptions tableOptions, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<int> InsertOrReplaceAsync(IDataContext dataContext, T obj, InsertOrUpdateColumnFilter`1<T> columnFilter, string tableName, string databaseName, string schemaName, string serverName, TableOptions tableOptions, CancellationToken token);
    [ExtensionAttribute]
public static object InsertWithIdentity(IDataContext dataContext, T obj, string tableName, string databaseName, string schemaName, string serverName, TableOptions tableOptions);
    [ExtensionAttribute]
public static object InsertWithIdentity(IDataContext dataContext, T obj, InsertColumnFilter`1<T> columnFilter, string tableName, string databaseName, string schemaName, string serverName, TableOptions tableOptions);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static int InsertWithInt32Identity(IDataContext dataContext, T obj, string tableName, string databaseName, string schemaName, string serverName, TableOptions tableOptions);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static int InsertWithInt32Identity(IDataContext dataContext, T obj, InsertColumnFilter`1<T> columnFilter, string tableName, string databaseName, string schemaName, string serverName, TableOptions tableOptions);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static long InsertWithInt64Identity(IDataContext dataContext, T obj, string tableName, string databaseName, string schemaName, string serverName, TableOptions tableOptions);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static long InsertWithInt64Identity(IDataContext dataContext, T obj, InsertColumnFilter`1<T> columnFilter, string tableName, string databaseName, string schemaName, string serverName, TableOptions tableOptions);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static decimal InsertWithDecimalIdentity(IDataContext dataContext, T obj, string tableName, string databaseName, string schemaName, string serverName, TableOptions tableOptions);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static decimal InsertWithDecimalIdentity(IDataContext dataContext, T obj, InsertColumnFilter`1<T> columnFilter, string tableName, string databaseName, string schemaName, string serverName, TableOptions tableOptions);
    [ExtensionAttribute]
public static Task`1<object> InsertWithIdentityAsync(IDataContext dataContext, T obj, string tableName, string databaseName, string schemaName, string serverName, TableOptions tableOptions, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<object> InsertWithIdentityAsync(IDataContext dataContext, T obj, InsertColumnFilter`1<T> columnFilter, string tableName, string databaseName, string schemaName, string serverName, TableOptions tableOptions, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<int> InsertWithInt32IdentityAsync(IDataContext dataContext, T obj, string tableName, string databaseName, string schemaName, string serverName, TableOptions tableOptions, CancellationToken token);
    [AsyncStateMachineAttribute("LinqToDB.DataExtensions/<InsertWithInt32IdentityAsync>d__25`1")]
[ExtensionAttribute]
public static Task`1<int> InsertWithInt32IdentityAsync(IDataContext dataContext, T obj, InsertColumnFilter`1<T> columnFilter, string tableName, string databaseName, string schemaName, string serverName, TableOptions tableOptions, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<long> InsertWithInt64IdentityAsync(IDataContext dataContext, T obj, string tableName, string databaseName, string schemaName, string serverName, TableOptions tableOptions, CancellationToken token);
    [AsyncStateMachineAttribute("LinqToDB.DataExtensions/<InsertWithInt64IdentityAsync>d__27`1")]
[ExtensionAttribute]
public static Task`1<long> InsertWithInt64IdentityAsync(IDataContext dataContext, T obj, InsertColumnFilter`1<T> columnFilter, string tableName, string databaseName, string schemaName, string serverName, TableOptions tableOptions, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<decimal> InsertWithDecimalIdentityAsync(IDataContext dataContext, T obj, string tableName, string databaseName, string schemaName, string serverName, TableOptions tableOptions, CancellationToken token);
    [AsyncStateMachineAttribute("LinqToDB.DataExtensions/<InsertWithDecimalIdentityAsync>d__29`1")]
[ExtensionAttribute]
public static Task`1<decimal> InsertWithDecimalIdentityAsync(IDataContext dataContext, T obj, InsertColumnFilter`1<T> columnFilter, string tableName, string databaseName, string schemaName, string serverName, TableOptions tableOptions, CancellationToken token);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static int Update(IDataContext dataContext, T obj, string tableName, string databaseName, string schemaName, string serverName, TableOptions tableOptions);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static int Update(IDataContext dataContext, T obj, UpdateColumnFilter`1<T> columnFilter, string tableName, string databaseName, string schemaName, string serverName, TableOptions tableOptions);
    [ExtensionAttribute]
public static Task`1<int> UpdateAsync(IDataContext dataContext, T obj, string tableName, string databaseName, string schemaName, string serverName, TableOptions tableOptions, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<int> UpdateAsync(IDataContext dataContext, T obj, UpdateColumnFilter`1<T> columnFilter, string tableName, string databaseName, string schemaName, string serverName, TableOptions tableOptions, CancellationToken token);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static int Delete(IDataContext dataContext, T obj, string tableName, string databaseName, string schemaName, string serverName, TableOptions tableOptions);
    [ExtensionAttribute]
public static Task`1<int> DeleteAsync(IDataContext dataContext, T obj, string tableName, string databaseName, string schemaName, string serverName, TableOptions tableOptions, CancellationToken token);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static ITable`1<T> CreateTable(IDataContext dataContext, string tableName, string databaseName, string schemaName, string statementHeader, string statementFooter, DefaultNullable defaultNullable, string serverName, TableOptions tableOptions);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
internal static ITable`1<T> CreateTable(IDataContext dataContext, EntityDescriptor tableDescriptor, string tableName, string databaseName, string schemaName, string statementHeader, string statementFooter, DefaultNullable defaultNullable, string serverName, TableOptions tableOptions);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Task`1<ITable`1<T>> CreateTableAsync(IDataContext dataContext, string tableName, string databaseName, string schemaName, string statementHeader, string statementFooter, DefaultNullable defaultNullable, string serverName, TableOptions tableOptions, CancellationToken token);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
internal static Task`1<ITable`1<T>> CreateTableAsync(IDataContext dataContext, EntityDescriptor tableDescriptor, string tableName, string databaseName, string schemaName, string statementHeader, string statementFooter, DefaultNullable defaultNullable, string serverName, TableOptions tableOptions, CancellationToken token);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static void DropTable(IDataContext dataContext, string tableName, string databaseName, string schemaName, Nullable`1<bool> throwExceptionIfNotExists, string serverName, TableOptions tableOptions);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static void DropTable(ITable`1<T> table, string tableName, string databaseName, string schemaName, Nullable`1<bool> throwExceptionIfNotExists, string serverName, TableOptions tableOptions);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("LinqToDB.DataExtensions/<DropTableAsync>d__42`1")]
[ExtensionAttribute]
public static Task DropTableAsync(IDataContext dataContext, string tableName, string databaseName, string schemaName, Nullable`1<bool> throwExceptionIfNotExists, string serverName, TableOptions tableOptions, CancellationToken token);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("LinqToDB.DataExtensions/<DropTableAsync>d__43`1")]
[ExtensionAttribute]
public static Task DropTableAsync(ITable`1<T> table, string tableName, string databaseName, string schemaName, Nullable`1<bool> throwExceptionIfNotExists, string serverName, TableOptions tableOptions, CancellationToken token);
    [ExtensionAttribute]
public static IQueryable`1<T> GetCte(IDataContext dataContext, Func`2<IQueryable`1<T>, IQueryable`1<T>> cteBody, string cteTableName);
    [ExtensionAttribute]
public static IQueryable`1<T> GetCte(IDataContext dataContext, string cteTableName, Func`2<IQueryable`1<T>, IQueryable`1<T>> cteBody);
    [ExtensionAttribute]
[StringFormatMethodAttribute("sql")]
public static IQueryable`1<TEntity> FromSql(IDataContext dataContext, FormattableString sql);
    [ExtensionAttribute]
[StringFormatMethodAttribute("sql")]
public static IQueryable`1<TEntity> FromSqlScalar(IDataContext dataContext, FormattableString sql);
    [ExtensionAttribute]
[StringFormatMethodAttribute("sql")]
public static IQueryable`1<TEntity> FromSql(IDataContext dataContext, RawSqlString sql, Object[] parameters);
    [ExtensionAttribute]
[PureAttribute]
public static IQueryable`1<TEntity> SelectQuery(IDataContext dataContext, Expression`1<Func`1<TEntity>> selector);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static TempTable`1<T> CreateTempTable(IDataContext db, string tableName, string databaseName, string schemaName, string serverName, TableOptions tableOptions);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static TempTable`1<T> CreateTempTable(IDataContext db, IEnumerable`1<T> items, BulkCopyOptions options, string tableName, string databaseName, string schemaName, string serverName, TableOptions tableOptions);
    [ExtensionAttribute]
public static TempTable`1<T> CreateTempTable(IDataContext db, IEnumerable`1<T> items, Action`1<EntityMappingBuilder`1<T>> setTable, BulkCopyOptions options, string tableName, string databaseName, string schemaName, string serverName, TableOptions tableOptions);
    [ExtensionAttribute]
public static TempTable`1<T> CreateTempTable(IDataContext db, string tableName, IEnumerable`1<T> items, BulkCopyOptions options, string databaseName, string schemaName, string serverName, TableOptions tableOptions);
    [ExtensionAttribute]
public static TempTable`1<T> CreateTempTable(IDataContext db, string tableName, IEnumerable`1<T> items, Action`1<EntityMappingBuilder`1<T>> setTable, BulkCopyOptions options, string databaseName, string schemaName, string serverName, TableOptions tableOptions);
    [ExtensionAttribute]
public static TempTable`1<T> CreateTempTable(IDataContext db, IQueryable`1<T> items, string tableName, string databaseName, string schemaName, Action`1<ITable`1<T>> action, string serverName, TableOptions tableOptions);
    [ExtensionAttribute]
public static TempTable`1<T> CreateTempTable(IDataContext db, IQueryable`1<T> items, Action`1<EntityMappingBuilder`1<T>> setTable, string tableName, string databaseName, string schemaName, Action`1<ITable`1<T>> action, string serverName, TableOptions tableOptions);
    [ExtensionAttribute]
public static TempTable`1<T> CreateTempTable(IDataContext db, string tableName, IQueryable`1<T> items, string databaseName, string schemaName, Action`1<ITable`1<T>> action, string serverName, TableOptions tableOptions);
    [ExtensionAttribute]
public static TempTable`1<T> CreateTempTable(IDataContext db, string tableName, IQueryable`1<T> items, Action`1<EntityMappingBuilder`1<T>> setTable, string databaseName, string schemaName, Action`1<ITable`1<T>> action, string serverName, TableOptions tableOptions);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Task`1<TempTable`1<T>> CreateTempTableAsync(IDataContext db, string tableName, string databaseName, string schemaName, string serverName, TableOptions tableOptions, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Task`1<TempTable`1<T>> CreateTempTableAsync(IDataContext db, IEnumerable`1<T> items, BulkCopyOptions options, string tableName, string databaseName, string schemaName, string serverName, TableOptions tableOptions, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TempTable`1<T>> CreateTempTableAsync(IDataContext db, IEnumerable`1<T> items, Action`1<EntityMappingBuilder`1<T>> setTable, BulkCopyOptions options, string tableName, string databaseName, string schemaName, string serverName, TableOptions tableOptions, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TempTable`1<T>> CreateTempTableAsync(IDataContext db, string tableName, IEnumerable`1<T> items, BulkCopyOptions options, string databaseName, string schemaName, string serverName, TableOptions tableOptions, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TempTable`1<T>> CreateTempTableAsync(IDataContext db, string tableName, IEnumerable`1<T> items, Action`1<EntityMappingBuilder`1<T>> setTable, BulkCopyOptions options, string databaseName, string schemaName, string serverName, TableOptions tableOptions, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TempTable`1<T>> CreateTempTableAsync(IDataContext db, IQueryable`1<T> items, string tableName, string databaseName, string schemaName, Func`2<ITable`1<T>, Task> action, string serverName, TableOptions tableOptions, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TempTable`1<T>> CreateTempTableAsync(IDataContext db, IQueryable`1<T> items, Action`1<EntityMappingBuilder`1<T>> setTable, string tableName, string databaseName, string schemaName, Func`2<ITable`1<T>, Task> action, string serverName, TableOptions tableOptions, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TempTable`1<T>> CreateTempTableAsync(IDataContext db, string tableName, IQueryable`1<T> items, string databaseName, string schemaName, Func`2<ITable`1<T>, Task> action, string serverName, TableOptions tableOptions, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TempTable`1<T>> CreateTempTableAsync(IDataContext db, string tableName, IQueryable`1<T> items, Action`1<EntityMappingBuilder`1<T>> setTable, string databaseName, string schemaName, Func`2<ITable`1<T>, Task> action, string serverName, TableOptions tableOptions, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static TempTable`1<T> IntoTempTable(IEnumerable`1<T> items, IDataContext db, string tableName, string databaseName, string schemaName, string serverName, TableOptions tableOptions, BulkCopyOptions options);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static TempTable`1<T> IntoTempTable(IQueryable`1<T> items, string tableName, string databaseName, string schemaName, string serverName, TableOptions tableOptions, Action`1<ITable`1<T>> action, Action`1<EntityMappingBuilder`1<T>> setTable);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Task`1<TempTable`1<T>> IntoTempTableAsync(IEnumerable`1<T> items, IDataContext db, string tableName, string databaseName, string schemaName, string serverName, TableOptions tableOptions, BulkCopyOptions options, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Task`1<TempTable`1<T>> IntoTempTableAsync(IQueryable`1<T> items, string tableName, string databaseName, string schemaName, string serverName, TableOptions tableOptions, Func`2<ITable`1<T>, Task> action, Action`1<EntityMappingBuilder`1<T>> setTable, CancellationToken cancellationToken);
    private static EntityDescriptor GetTempTableDescriptor(MappingSchema contextSchema, DataOptions options, Action`1<EntityMappingBuilder`1<T>> setTable);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class LinqToDB.DataOptions : OptionsContainer`1<DataOptions> {
    [NullableAttribute("2")]
private LinqOptions _linqOptions;
    [NullableAttribute("2")]
private RetryPolicyOptions _retryPolicyOptions;
    [NullableAttribute("2")]
private ConnectionOptions _connectionOptions;
    [NullableAttribute("2")]
private DataContextOptions _dataContextOptions;
    [NullableAttribute("2")]
private BulkCopyOptions _bulkCopyOptions;
    [NullableAttribute("2")]
private SqlOptions _sqlOptions;
    private Nullable`1<int> _configurationID;
    public LinqOptions LinqOptions { get; }
    public RetryPolicyOptions RetryPolicyOptions { get; }
    public ConnectionOptions ConnectionOptions { get; }
    public DataContextOptions DataContextOptions { get; }
    public BulkCopyOptions BulkCopyOptions { get; }
    public SqlOptions SqlOptions { get; }
    public IEnumerable`1<IOptionSet> OptionSets { get; }
    private int LinqToDB.Common.Internal.IConfigurationID.ConfigurationID { get; }
    public DataOptions(ConnectionOptions connectionOptions);
    private DataOptions(DataOptions options);
    protected virtual DataOptions Clone();
    private sealed virtual override object System.ICloneable.Clone();
    [PureAttribute]
public virtual DataOptions WithOptions(IOptionSet options);
    public LinqOptions get_LinqOptions();
    public RetryPolicyOptions get_RetryPolicyOptions();
    public ConnectionOptions get_ConnectionOptions();
    public DataContextOptions get_DataContextOptions();
    public BulkCopyOptions get_BulkCopyOptions();
    public SqlOptions get_SqlOptions();
    [IteratorStateMachineAttribute("LinqToDB.DataOptions/<get_OptionSets>d__25")]
public virtual IEnumerable`1<IOptionSet> get_OptionSets();
    [PureAttribute]
public virtual TSet Find();
    public void Apply(DataConnection dataConnection);
    public void Apply(DataContext dataContext);
    private sealed virtual override int LinqToDB.Common.Internal.IConfigurationID.get_ConfigurationID();
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(DataOptions other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [NullableContextAttribute("2")]
public static bool op_Equality(DataOptions t1, DataOptions t2);
    [NullableContextAttribute("2")]
public static bool op_Inequality(DataOptions t1, DataOptions t2);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<IOptionSet> <>n__0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.DataOptions`1 : object {
    [CompilerGeneratedAttribute]
private DataOptions <Options>k__BackingField;
    public DataOptions Options { get; }
    public DataOptions`1(DataOptions options);
    [CompilerGeneratedAttribute]
public DataOptions get_Options();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[PublicAPIAttribute]
public static class LinqToDB.DataOptionsExtensions : object {
    [ExtensionAttribute]
[PureAttribute]
public static LinqOptions WithPreloadGroups(LinqOptions options, bool preloadGroups);
    [PureAttribute]
public static LinqOptions WithIgnoreEmptyUpdate(LinqOptions options, bool ignoreEmptyUpdate);
    [ExtensionAttribute]
[PureAttribute]
public static LinqOptions WithGenerateExpressionTest(LinqOptions options, bool generateExpressionTest);
    [ExtensionAttribute]
[PureAttribute]
public static LinqOptions WithTraceMapperExpression(LinqOptions options, bool traceMapperExpression);
    [ExtensionAttribute]
[PureAttribute]
public static LinqOptions WithDoNotClearOrderBys(LinqOptions options, bool doNotClearOrderBys);
    [ExtensionAttribute]
[PureAttribute]
public static LinqOptions WithOptimizeJoins(LinqOptions options, bool optimizeJoins);
    [ExtensionAttribute]
[PureAttribute]
public static LinqOptions WithCompareNullsAsValues(LinqOptions options, bool compareNullsAsValues);
    [ExtensionAttribute]
[PureAttribute]
public static LinqOptions WithGuardGrouping(LinqOptions options, bool guardGrouping);
    [ExtensionAttribute]
[PureAttribute]
public static LinqOptions WithDisableQueryCache(LinqOptions options, bool disableQueryCache);
    [ExtensionAttribute]
[PureAttribute]
public static LinqOptions WithCacheSlidingExpiration(LinqOptions options, Nullable`1<TimeSpan> cacheSlidingExpiration);
    [ExtensionAttribute]
[PureAttribute]
public static LinqOptions WithPreferApply(LinqOptions options, bool preferApply);
    [ExtensionAttribute]
[PureAttribute]
public static LinqOptions WithKeepDistinctOrdered(LinqOptions options, bool keepDistinctOrdered);
    [ExtensionAttribute]
[PureAttribute]
public static LinqOptions WithParameterizeTakeSkip(LinqOptions options, bool parameterizeTakeSkip);
    [ExtensionAttribute]
[PureAttribute]
public static LinqOptions WithEnableContextSchemaEdit(LinqOptions options, bool enableContextSchemaEdit);
    [ExtensionAttribute]
[PureAttribute]
public static LinqOptions WithPreferExistsForScalar(LinqOptions options, bool preferExistsForScalar);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UsePreloadGroups(DataOptions options, bool preloadGroups);
    [PureAttribute]
public static DataOptions UseIgnoreEmptyUpdate(DataOptions options, bool ignoreEmptyUpdate);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseGenerateExpressionTest(DataOptions options, bool generateExpressionTest);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseTraceMapperExpression(DataOptions options, bool traceMapperExpression);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseDoNotClearOrderBys(DataOptions options, bool doNotClearOrderBys);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseOptimizeJoins(DataOptions options, bool optimizeJoins);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseCompareNullsAsValues(DataOptions options, bool compareNullsAsValues);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseGuardGrouping(DataOptions options, bool guardGrouping);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseDisableQueryCache(DataOptions options, bool disableQueryCache);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseCacheSlidingExpiration(DataOptions options, Nullable`1<TimeSpan> cacheSlidingExpiration);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UsePreferApply(DataOptions options, bool preferApply);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseKeepDistinctOrdered(DataOptions options, bool keepDistinctOrdered);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseParameterizeTakeSkip(DataOptions options, bool parameterizeTakeSkip);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseEnableContextSchemaEdit(DataOptions options, bool enableContextSchemaEdit);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UsePreferExistsForScalar(DataOptions options, bool preferExistsForScalar);
    [ExtensionAttribute]
[PureAttribute]
public static ConnectionOptions WithConfigurationString(ConnectionOptions options, string configurationString);
    [ExtensionAttribute]
[PureAttribute]
public static ConnectionOptions WithConnectionString(ConnectionOptions options, string connectionString);
    [ExtensionAttribute]
[PureAttribute]
public static ConnectionOptions WithDataProvider(ConnectionOptions options, IDataProvider dataProvider);
    [ExtensionAttribute]
[PureAttribute]
public static ConnectionOptions WithProviderName(ConnectionOptions options, string providerName);
    [ExtensionAttribute]
[PureAttribute]
public static ConnectionOptions WithMappingSchema(ConnectionOptions options, MappingSchema mappingSchema);
    [ExtensionAttribute]
[PureAttribute]
public static ConnectionOptions WithDbConnection(ConnectionOptions options, DbConnection connection);
    [ExtensionAttribute]
[PureAttribute]
public static ConnectionOptions WithDbTransaction(ConnectionOptions options, DbTransaction transaction);
    [ExtensionAttribute]
[PureAttribute]
public static ConnectionOptions WithDisposeConnection(ConnectionOptions options, bool disposeConnection);
    [ExtensionAttribute]
[PureAttribute]
public static ConnectionOptions WithConnectionFactory(ConnectionOptions options, Func`2<DataOptions, DbConnection> connectionFactory);
    [ExtensionAttribute]
[PureAttribute]
public static ConnectionOptions WithOnEntityDescriptorCreated(ConnectionOptions options, Action`2<MappingSchema, IEntityChangeDescriptor> onEntityDescriptorCreated);
    [ExtensionAttribute]
[PureAttribute]
public static ConnectionOptions WithDataProviderFactory(ConnectionOptions options, Func`2<ConnectionOptions, IDataProvider> dataProviderFactory);
    [ExtensionAttribute]
[PureAttribute]
public static ConnectionOptions WithBeforeConnectionOpened(ConnectionOptions options, Action`1<DbConnection> afterConnectionOpening, Func`3<DbConnection, CancellationToken, Task> afterConnectionOpeningAsync);
    [ExtensionAttribute]
[PureAttribute]
public static ConnectionOptions WithAfterConnectionOpened(ConnectionOptions options, Action`1<DbConnection> afterConnectionOpened, Func`3<DbConnection, CancellationToken, Task> afterConnectionOpenedAsync);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseConnectionString(DataOptions options, string providerName, string connectionString);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseConnectionString(DataOptions options, IDataProvider dataProvider, string connectionString);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseConnectionString(DataOptions options, string connectionString);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseConfigurationString(DataOptions options, string configurationString);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseConfigurationString(DataOptions options, string configurationString, MappingSchema mappingSchema);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseConfiguration(DataOptions options, string configurationString);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseConfiguration(DataOptions options, string configurationString, MappingSchema mappingSchema);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseConnection(DataOptions options, DbConnection connection);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseConnection(DataOptions options, IDataProvider dataProvider, DbConnection connection);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseConnection(DataOptions options, IDataProvider dataProvider, DbConnection connection, bool disposeConnection);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseProvider(DataOptions options, string providerName);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseDataProvider(DataOptions options, IDataProvider dataProvider);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseMappingSchema(DataOptions options, MappingSchema mappingSchema);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseConnectionFactory(DataOptions options, Func`2<DataOptions, DbConnection> connectionFactory);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseOnEntityDescriptorCreated(DataOptions options, Action`2<MappingSchema, IEntityChangeDescriptor> onEntityDescriptorCreated);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseConnectionFactory(DataOptions options, IDataProvider dataProvider, Func`2<DataOptions, DbConnection> connectionFactory);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseDataProviderFactory(DataOptions options, Func`2<ConnectionOptions, IDataProvider> dataProviderFactory);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseBeforeConnectionOpened(DataOptions options, Action`1<DbConnection> afterConnectionOpening, Func`3<DbConnection, CancellationToken, Task> afterConnectionOpeningAsync);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseAfterConnectionOpened(DataOptions options, Action`1<DbConnection> afterConnectionOpened, Func`3<DbConnection, CancellationToken, Task> afterConnectionOpenedAsync);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseTransaction(DataOptions options, IDataProvider dataProvider, DbTransaction transaction);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseInterceptors(DataOptions options, IEnumerable`1<IInterceptor> interceptors);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseInterceptors(DataOptions options, IInterceptor[] interceptors);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseInterceptor(DataOptions options, IInterceptor interceptor);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions RemoveInterceptor(DataOptions options, IInterceptor interceptor);
    [ExtensionAttribute]
[PureAttribute]
public static QueryTraceOptions WithTraceLevel(QueryTraceOptions options, TraceLevel traceLevel);
    [ExtensionAttribute]
[PureAttribute]
public static QueryTraceOptions WithOnTrace(QueryTraceOptions options, Action`1<TraceInfo> onTrace);
    [ExtensionAttribute]
[PureAttribute]
public static QueryTraceOptions WithWriteTrace(QueryTraceOptions options, Action`3<string, string, TraceLevel> write);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseTraceLevel(DataOptions options, TraceLevel traceLevel);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseTracing(DataOptions options, Action`1<TraceInfo> onTrace);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseTracing(DataOptions options, TraceLevel traceLevel, Action`1<TraceInfo> onTrace);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseTraceWith(DataOptions options, Action`3<string, string, TraceLevel> write);
    [ExtensionAttribute]
[PureAttribute]
public static RetryPolicyOptions WithRetryPolicy(RetryPolicyOptions options, IRetryPolicy retryPolicy);
    [ExtensionAttribute]
[PureAttribute]
public static RetryPolicyOptions WithFactory(RetryPolicyOptions options, Func`2<DataConnection, IRetryPolicy> factory);
    [ExtensionAttribute]
[PureAttribute]
public static RetryPolicyOptions WithMaxRetryCount(RetryPolicyOptions options, int maxRetryCount);
    [ExtensionAttribute]
[PureAttribute]
public static RetryPolicyOptions WithMaxDelay(RetryPolicyOptions options, TimeSpan maxDelay);
    [ExtensionAttribute]
[PureAttribute]
public static RetryPolicyOptions WithRandomFactor(RetryPolicyOptions options, double randomFactor);
    [ExtensionAttribute]
[PureAttribute]
public static RetryPolicyOptions WithExponentialBase(RetryPolicyOptions options, double exponentialBase);
    [ExtensionAttribute]
[PureAttribute]
public static RetryPolicyOptions WithCoefficient(RetryPolicyOptions options, TimeSpan coefficient);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseRetryPolicy(DataOptions options, IRetryPolicy retryPolicy);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseDefaultRetryPolicyFactory(DataOptions options);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseFactory(DataOptions options, Func`2<DataConnection, IRetryPolicy> factory);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseMaxRetryCount(DataOptions options, int maxRetryCount);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseMaxDelay(DataOptions options, TimeSpan defaultMaxDelay);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseRandomFactor(DataOptions options, double randomFactor);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseExponentialBase(DataOptions options, double exponentialBase);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseCoefficient(DataOptions options, TimeSpan coefficient);
    [ExtensionAttribute]
[PureAttribute]
public static BulkCopyOptions WithMaxBatchSize(BulkCopyOptions options, Nullable`1<int> maxBatchSize);
    [ExtensionAttribute]
[PureAttribute]
public static BulkCopyOptions WithBulkCopyTimeout(BulkCopyOptions options, Nullable`1<int> bulkCopyTimeout);
    [ExtensionAttribute]
[PureAttribute]
public static BulkCopyOptions WithBulkCopyType(BulkCopyOptions options, BulkCopyType bulkCopyType);
    [ExtensionAttribute]
[PureAttribute]
public static BulkCopyOptions WithCheckConstraints(BulkCopyOptions options, Nullable`1<bool> checkConstraints);
    [ExtensionAttribute]
[PureAttribute]
public static BulkCopyOptions WithKeepIdentity(BulkCopyOptions options, Nullable`1<bool> keepIdentity);
    [ExtensionAttribute]
[PureAttribute]
public static BulkCopyOptions WithTableLock(BulkCopyOptions options, Nullable`1<bool> tableLock);
    [ExtensionAttribute]
[PureAttribute]
public static BulkCopyOptions WithKeepNulls(BulkCopyOptions options, Nullable`1<bool> keepNulls);
    [ExtensionAttribute]
[PureAttribute]
public static BulkCopyOptions WithFireTriggers(BulkCopyOptions options, Nullable`1<bool> fireTriggers);
    [ExtensionAttribute]
[PureAttribute]
public static BulkCopyOptions WithUseInternalTransaction(BulkCopyOptions options, Nullable`1<bool> useInternalTransaction);
    [ExtensionAttribute]
[PureAttribute]
public static BulkCopyOptions WithServerName(BulkCopyOptions options, string serverName);
    [ExtensionAttribute]
[PureAttribute]
public static BulkCopyOptions WithDatabaseName(BulkCopyOptions options, string databaseName);
    [ExtensionAttribute]
[PureAttribute]
public static BulkCopyOptions WithSchemaName(BulkCopyOptions options, string schemaName);
    [ExtensionAttribute]
[PureAttribute]
public static BulkCopyOptions WithTableName(BulkCopyOptions options, string tableName);
    [ExtensionAttribute]
[PureAttribute]
public static BulkCopyOptions WithTableOptions(BulkCopyOptions options, TableOptions tableOptions);
    [ExtensionAttribute]
[PureAttribute]
public static BulkCopyOptions WithNotifyAfter(BulkCopyOptions options, int notifyAfter);
    [ExtensionAttribute]
[PureAttribute]
public static BulkCopyOptions WithRowsCopiedCallback(BulkCopyOptions options, Action`1<BulkCopyRowsCopied> rowsCopiedCallback);
    [ExtensionAttribute]
[PureAttribute]
public static BulkCopyOptions WithUseParameters(BulkCopyOptions options, bool useParameters);
    [ExtensionAttribute]
[PureAttribute]
public static BulkCopyOptions WithMaxParametersForBatch(BulkCopyOptions options, Nullable`1<int> maxParametersForBatch);
    [ExtensionAttribute]
[PureAttribute]
public static BulkCopyOptions WithMaxDegreeOfParallelism(BulkCopyOptions options, Nullable`1<int> maxDegreeOfParallelism);
    [ExtensionAttribute]
[PureAttribute]
public static BulkCopyOptions WithWithoutSession(BulkCopyOptions options, bool withoutSession);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseBulkCopyMaxBatchSize(DataOptions options, Nullable`1<int> maxBatchSize);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseBulkCopyTimeout(DataOptions options, Nullable`1<int> bulkCopyTimeout);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseBulkCopyType(DataOptions options, BulkCopyType bulkCopyType);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseBulkCopyCheckConstraints(DataOptions options, Nullable`1<bool> checkConstraints);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseBulkCopyKeepIdentity(DataOptions options, Nullable`1<bool> keepIdentity);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseBulkCopyTableLock(DataOptions options, Nullable`1<bool> tableLock);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseBulkCopyKeepNulls(DataOptions options, Nullable`1<bool> keepNulls);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseBulkCopyFireTriggers(DataOptions options, Nullable`1<bool> fireTriggers);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseBulkCopyUseInternalTransaction(DataOptions options, Nullable`1<bool> useInternalTransaction);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseBulkCopyServerName(DataOptions options, string serverName);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseBulkCopyDatabaseName(DataOptions options, string databaseName);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseBulkCopySchemaName(DataOptions options, string schemaName);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseBulkCopyTableName(DataOptions options, string tableName);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseBulkCopyTableOptions(DataOptions options, TableOptions tableOptions);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseBulkCopyNotifyAfter(DataOptions options, int notifyAfter);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseBulkCopyRowsCopiedCallback(DataOptions options, Action`1<BulkCopyRowsCopied> rowsCopiedCallback);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseBulkCopyUseParameters(DataOptions options, bool useParameters);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseBulkCopyMaxParametersForBatch(DataOptions options, Nullable`1<int> maxParametersForBatch);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseBulkCopyMaxDegreeOfParallelism(DataOptions options, Nullable`1<int> maxDegreeOfParallelism);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseBulkCopyWithoutSession(DataOptions options, bool withoutSession);
    [ExtensionAttribute]
public static SqlOptions WithEnableConstantExpressionInOrderBy(SqlOptions options, bool enableConstantExpressionInOrderBy);
    [ExtensionAttribute]
public static SqlOptions WithGenerateFinalAliases(SqlOptions options, bool generateFinalAliases);
    [ExtensionAttribute]
public static DataOptions UseEnableConstantExpressionInOrderBy(DataOptions options, bool enableConstantExpressionInOrderBy);
    [ExtensionAttribute]
public static DataOptions UseGenerateFinalAliases(DataOptions options, bool generateFinalAliases);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseSqlServer(DataOptions options, SqlServerVersion dialect, SqlServerProvider provider, Func`2<SqlServerOptions, SqlServerOptions> optionSetter);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseSqlServer(DataOptions options, string connectionString, SqlServerVersion dialect, SqlServerProvider provider, Func`2<SqlServerOptions, SqlServerOptions> optionSetter);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseOracle(DataOptions options, string connectionString, Func`2<OracleOptions, OracleOptions> optionSetter);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseOracle(DataOptions options, OracleVersion dialect, OracleProvider provider, Func`2<OracleOptions, OracleOptions> optionSetter);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseOracle(DataOptions options, string connectionString, OracleVersion dialect, OracleProvider provider, Func`2<OracleOptions, OracleOptions> optionSetter);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseOracle(DataOptions options, string connectionString, OracleProvider provider, Func`2<OracleOptions, OracleOptions> optionSetter);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UsePostgreSQL(DataOptions options, string connectionString, Func`2<PostgreSQLOptions, PostgreSQLOptions> optionSetter);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UsePostgreSQL(DataOptions options, PostgreSQLVersion dialect, Func`2<PostgreSQLOptions, PostgreSQLOptions> optionSetter);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UsePostgreSQL(DataOptions options, string connectionString, PostgreSQLVersion dialect, Func`2<PostgreSQLOptions, PostgreSQLOptions> optionSetter);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseMySql(DataOptions options, Func`2<MySqlOptions, MySqlOptions> optionSetter);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseMySql(DataOptions options, string connectionString, Func`2<MySqlOptions, MySqlOptions> optionSetter);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseMySqlData(DataOptions options, Func`2<MySqlOptions, MySqlOptions> optionSetter);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseMySqlData(DataOptions options, string connectionString, Func`2<MySqlOptions, MySqlOptions> optionSetter);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseMySqlConnector(DataOptions options, Func`2<MySqlOptions, MySqlOptions> optionSetter);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseMySqlConnector(DataOptions options, string connectionString, Func`2<MySqlOptions, MySqlOptions> optionSetter);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseSQLite(DataOptions options, Func`2<SQLiteOptions, SQLiteOptions> optionSetter);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseSQLite(DataOptions options, string connectionString, Func`2<SQLiteOptions, SQLiteOptions> optionSetter);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseSQLiteOfficial(DataOptions options, Func`2<SQLiteOptions, SQLiteOptions> optionSetter);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseSQLiteOfficial(DataOptions options, string connectionString, Func`2<SQLiteOptions, SQLiteOptions> optionSetter);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseSQLiteMicrosoft(DataOptions options, Func`2<SQLiteOptions, SQLiteOptions> optionSetter);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseSQLiteMicrosoft(DataOptions options, string connectionString, Func`2<SQLiteOptions, SQLiteOptions> optionSetter);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseAccess(DataOptions options, string connectionString, Func`2<AccessOptions, AccessOptions> optionSetter);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseAccessOleDb(DataOptions options, Func`2<AccessOptions, AccessOptions> optionSetter);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseAccessOleDb(DataOptions options, string connectionString, Func`2<AccessOptions, AccessOptions> optionSetter);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseAccessOdbc(DataOptions options, Func`2<AccessOptions, AccessOptions> optionSetter);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseAccessOdbc(DataOptions options, string connectionString, Func`2<AccessOptions, AccessOptions> optionSetter);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseDB2(DataOptions options, string connectionString, Func`2<DB2Options, DB2Options> optionSetter);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseDB2(DataOptions options, DB2Version version, Func`2<DB2Options, DB2Options> optionSetter);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseDB2(DataOptions options, string connectionString, DB2Version version, Func`2<DB2Options, DB2Options> optionSetter);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseFirebird(DataOptions options, Func`2<FirebirdOptions, FirebirdOptions> optionSetter);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseFirebird(DataOptions options, string connectionString, Func`2<FirebirdOptions, FirebirdOptions> optionSetter);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseInformix(DataOptions options, Func`2<InformixOptions, InformixOptions> optionSetter);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseInformix(DataOptions options, string connectionString, Func`2<InformixOptions, InformixOptions> optionSetter);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseSapHana(DataOptions options, Func`2<SapHanaOptions, SapHanaOptions> optionSetter);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseSapHana(DataOptions options, string connectionString, Func`2<SapHanaOptions, SapHanaOptions> optionSetter);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseSapHanaNative(DataOptions options, Func`2<SapHanaOptions, SapHanaOptions> optionSetter);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseSapHanaNative(DataOptions options, string connectionString, Func`2<SapHanaOptions, SapHanaOptions> optionSetter);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseSapHanaODBC(DataOptions options, Func`2<SapHanaOptions, SapHanaOptions> optionSetter);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseSapHanaODBC(DataOptions options, string connectionString, Func`2<SapHanaOptions, SapHanaOptions> optionSetter);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseSqlCe(DataOptions options, Func`2<SqlCeOptions, SqlCeOptions> optionSetter);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseSqlCe(DataOptions options, string connectionString, Func`2<SqlCeOptions, SqlCeOptions> optionSetter);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseAse(DataOptions options, Func`2<SybaseOptions, SybaseOptions> optionSetter);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseAse(DataOptions options, string connectionString, Func`2<SybaseOptions, SybaseOptions> optionSetter);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseClickHouse(DataOptions options, ClickHouseProvider provider, Func`2<ClickHouseOptions, ClickHouseOptions> optionSetter);
    [ExtensionAttribute]
[PureAttribute]
public static DataOptions UseClickHouse(DataOptions options, ClickHouseProvider provider, string connectionString, Func`2<ClickHouseOptions, ClickHouseOptions> optionSetter);
}
internal class LinqToDB.DataProvider.Access.AccessBulkCopy : BasicBulkCopy {
    protected int MaxParameters { get; }
    protected int MaxSqlLength { get; }
    protected virtual int get_MaxParameters();
    protected virtual int get_MaxSqlLength();
}
[UsedImplicitlyAttribute]
internal class LinqToDB.DataProvider.Access.AccessFactory : object {
    [NullableContextAttribute("1")]
private sealed virtual override IDataProvider LinqToDB.DataProvider.IDataProviderFactory.GetDataProvider(IEnumerable`1<NamedValue> attributes);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class LinqToDB.DataProvider.Access.AccessHints : object {
    [ExtensionAttribute]
[ExpressionMethodAttribute("WithOwnerAccessOptionImpl")]
public static IAccessSpecificQueryable`1<TSource> WithOwnerAccessOption(IAccessSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IAccessSpecificQueryable`1<TSource>, IAccessSpecificQueryable`1<TSource>>> WithOwnerAccessOptionImpl();
    [ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("Access", "5", "LinqToDB.SqlProvider.HintExtensionBuilder")]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
public static IAccessSpecificQueryable`1<TSource> SubQueryHint(IAccessSpecificQueryable`1<TSource> source, string hint);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.DataProvider.Access.AccessMappingSchema : LockedMappingSchema {
    private static string DATE_FORMAT;
    private static string DATETIME_FORMAT;
    private static Action`2<StringBuilder, int> _appendConversionAction;
    internal static AccessMappingSchema Instance;
    private static AccessMappingSchema();
    private static void ConvertBinaryToSql(StringBuilder stringBuilder, Byte[] value);
    private static void AppendConversion(StringBuilder stringBuilder, int value);
    private static void ConvertStringToSql(StringBuilder stringBuilder, string value);
    private static void ConvertCharToSql(StringBuilder stringBuilder, char value);
    private static void ConvertDateTimeToSql(StringBuilder stringBuilder, DateTime value);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class LinqToDB.DataProvider.Access.AccessODBCDataProvider : DynamicDataProviderBase`1<OdbcProviderAdapter> {
    private ISqlOptimizer _sqlOptimizer;
    private static MappingSchema _mappingSchemaInstance;
    public TableOptions SupportedTableOptions { get; }
    private static AccessODBCDataProvider();
    public virtual TableOptions get_SupportedTableOptions();
    public virtual ISqlBuilder CreateSqlBuilder(MappingSchema mappingSchema, DataOptions dataOptions);
    public virtual ISqlOptimizer GetSqlOptimizer(DataOptions dataOptions);
    public virtual ISchemaProvider GetSchemaProvider();
    public virtual IQueryParametersNormalizer GetQueryParameterNormalizer();
    public virtual void SetParameter(DataConnection dataConnection, DbParameter parameter, string name, DbDataType dataType, object value);
    protected virtual void SetParameterType(DataConnection dataConnection, DbParameter parameter, DbDataType dataType);
    public virtual BulkCopyRowsCopied BulkCopy(DataOptions options, ITable`1<T> table, IEnumerable`1<T> source);
    public virtual Task`1<BulkCopyRowsCopied> BulkCopyAsync(DataOptions options, ITable`1<T> table, IEnumerable`1<T> source, CancellationToken cancellationToken);
    public virtual Task`1<BulkCopyRowsCopied> BulkCopyAsync(DataOptions options, ITable`1<T> table, IAsyncEnumerable`1<T> source, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.DataProvider.Access.AccessODBCSchemaProvider : AccessSchemaProviderBase {
    protected virtual IReadOnlyCollection`1<ForeignKeyInfo> GetForeignKeys(DataConnection dataConnection, IEnumerable`1<TableSchema> tables, GetSchemaOptions options);
    protected virtual List`1<TableInfo> GetTables(DataConnection dataConnection, GetSchemaOptions options);
    protected virtual IReadOnlyCollection`1<PrimaryKeyInfo> GetPrimaryKeys(DataConnection dataConnection, IEnumerable`1<TableSchema> tables, GetSchemaOptions options);
    protected virtual List`1<ColumnInfo> GetColumns(DataConnection dataConnection, GetSchemaOptions options);
    protected virtual List`1<ProcedureInfo> GetProcedures(DataConnection dataConnection, GetSchemaOptions options);
    protected virtual List`1<ProcedureParameterInfo> GetProcedureParameters(DataConnection dataConnection, IEnumerable`1<ProcedureInfo> procedures, GetSchemaOptions options);
    protected virtual DataTable GetProcedureSchema(DataConnection dataConnection, string commandText, CommandType commandType, DataParameter[] parameters, GetSchemaOptions options);
    [NullableContextAttribute("2")]
protected virtual string GetDbType(GetSchemaOptions options, string columnType, DataTypeInfo dataType, Nullable`1<int> length, Nullable`1<int> precision, Nullable`1<int> scale, string udtCatalog, string udtSchema, string udtName);
    protected virtual List`1<DataTypeInfo> GetDataTypes(DataConnection dataConnection);
    protected virtual List`1<ColumnSchema> GetProcedureResultColumns(DataTable resultTable, GetSchemaOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.DataProvider.Access.AccessODBCSqlBuilder : AccessSqlBuilderBase {
    public AccessODBCSqlBuilder(IDataProvider provider, MappingSchema mappingSchema, DataOptions dataOptions, ISqlOptimizer sqlOptimizer, SqlProviderFlags sqlProviderFlags);
    private AccessODBCSqlBuilder(BasicSqlBuilder parentBuilder);
    protected virtual ISqlBuilder CreateSqlBuilder();
    public virtual StringBuilder Convert(StringBuilder sb, string value, ConvertType convertType);
    protected virtual string GetProviderTypeName(IDataContext dataContext, DbParameter parameter);
    [NullableContextAttribute("2")]
protected virtual void BuildColumnExpression(SelectQuery selectQuery, ISqlExpression expr, string alias, Boolean& addAlias);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.DataProvider.Access.AccessODBCSqlOptimizer : AccessSqlOptimizer {
    public AccessODBCSqlOptimizer(SqlProviderFlags sqlProviderFlags);
    public virtual SqlStatement Finalize(MappingSchema mappingSchema, SqlStatement statement, DataOptions dataOptions);
    private static SqlStatement WrapParameters(SqlStatement statement);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class LinqToDB.DataProvider.Access.AccessOleDbDataProvider : DynamicDataProviderBase`1<OleDbProviderAdapter> {
    private ISqlOptimizer _sqlOptimizer;
    private static MappingSchema MappingSchemaInstance;
    public TableOptions SupportedTableOptions { get; }
    private static AccessOleDbDataProvider();
    public virtual TableOptions get_SupportedTableOptions();
    public virtual ISqlBuilder CreateSqlBuilder(MappingSchema mappingSchema, DataOptions dataOptions);
    public virtual ISqlOptimizer GetSqlOptimizer(DataOptions dataOptions);
    public virtual ISchemaProvider GetSchemaProvider();
    protected virtual void SetParameterType(DataConnection dataConnection, DbParameter parameter, DbDataType dataType);
    public virtual BulkCopyRowsCopied BulkCopy(DataOptions options, ITable`1<T> table, IEnumerable`1<T> source);
    public virtual Task`1<BulkCopyRowsCopied> BulkCopyAsync(DataOptions options, ITable`1<T> table, IEnumerable`1<T> source, CancellationToken cancellationToken);
    public virtual Task`1<BulkCopyRowsCopied> BulkCopyAsync(DataOptions options, ITable`1<T> table, IAsyncEnumerable`1<T> source, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.DataProvider.Access.AccessOleDbSchemaProvider : AccessSchemaProviderBase {
    private AccessOleDbDataProvider _provider;
    private static Regex _paramsExp;
    protected bool GetProcedureSchemaExecutesProcedure { get; }
    public AccessOleDbSchemaProvider(AccessOleDbDataProvider provider);
    private static AccessOleDbSchemaProvider();
    protected virtual bool get_GetProcedureSchemaExecutesProcedure();
    private static TResult ExecuteOnNewConnection(DataConnection dataConnection, Func`2<DataConnection, TResult> action);
    protected virtual IReadOnlyCollection`1<ForeignKeyInfo> GetForeignKeys(DataConnection dataConnection, IEnumerable`1<TableSchema> tables, GetSchemaOptions options);
    protected virtual List`1<TableInfo> GetTables(DataConnection dataConnection, GetSchemaOptions options);
    protected virtual IReadOnlyCollection`1<PrimaryKeyInfo> GetPrimaryKeys(DataConnection dataConnection, IEnumerable`1<TableSchema> tables, GetSchemaOptions options);
    protected virtual List`1<ColumnInfo> GetColumns(DataConnection dataConnection, GetSchemaOptions options);
    private static int CorrectDataTypeFromFlags(int providerDbType, ColumnFlags flags);
    protected virtual List`1<ProcedureInfo> GetProcedures(DataConnection dataConnection, GetSchemaOptions options);
    protected virtual List`1<ProcedureParameterInfo> GetProcedureParameters(DataConnection dataConnection, IEnumerable`1<ProcedureInfo> procedures, GetSchemaOptions options);
    protected virtual List`1<DataTypeInfo> GetDataTypes(DataConnection dataConnection);
    [NullableContextAttribute("2")]
protected virtual string GetDbType(GetSchemaOptions options, string columnType, DataTypeInfo dataType, Nullable`1<int> length, Nullable`1<int> precision, Nullable`1<int> scale, string udtCatalog, string udtSchema, string udtName);
    protected virtual DataTable GetProcedureSchema(DataConnection dataConnection, string commandText, CommandType commandType, DataParameter[] parameters, GetSchemaOptions options);
    protected virtual List`1<ColumnSchema> GetProcedureResultColumns(DataTable resultTable, GetSchemaOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.DataProvider.Access.AccessOleDbSqlBuilder : AccessSqlBuilderBase {
    public AccessOleDbSqlBuilder(IDataProvider provider, MappingSchema mappingSchema, DataOptions dataOptions, ISqlOptimizer sqlOptimizer, SqlProviderFlags sqlProviderFlags);
    private AccessOleDbSqlBuilder(BasicSqlBuilder parentBuilder);
    protected virtual ISqlBuilder CreateSqlBuilder();
    protected virtual string GetProviderTypeName(IDataContext dataContext, DbParameter parameter);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class LinqToDB.DataProvider.Access.AccessOptions : DataProviderOptions`1<AccessOptions> {
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public AccessOptions(BulkCopyType BulkCopyType);
    private AccessOptions(AccessOptions original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    protected virtual IdentifierBuilder CreateID(IdentifierBuilder builder);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(AccessOptions other);
    public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(AccessOptions left, AccessOptions right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(AccessOptions left, AccessOptions right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(DataProviderOptions`1<AccessOptions> other);
    [CompilerGeneratedAttribute]
public virtual DataProviderOptions`1<AccessOptions> <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(BulkCopyType& BulkCopyType);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal abstract class LinqToDB.DataProvider.Access.AccessSchemaProviderBase : SchemaProviderBase {
    [NullableContextAttribute("1")]
protected virtual string GetDatabaseName(DataConnection dbConnection);
    protected virtual string GetProviderSpecificTypeNamespace();
    protected virtual Type GetSystemType(string dataType, string columnType, DataTypeInfo dataTypeInfo, Nullable`1<int> length, Nullable`1<int> precision, Nullable`1<int> scale, GetSchemaOptions options);
    protected virtual DataType GetDataType(string dataType, string columnType, Nullable`1<int> length, Nullable`1<int> precision, Nullable`1<int> scale);
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class LinqToDB.DataProvider.Access.AccessSpecificQueryable`1 : DatabaseSpecificQueryable`1<TSource> {
    [NullableContextAttribute("1")]
public AccessSpecificQueryable`1(IQueryable`1<TSource> queryable);
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class LinqToDB.DataProvider.Access.AccessSpecificTable`1 : DatabaseSpecificTable`1<TSource> {
    [NullableContextAttribute("1")]
public AccessSpecificTable`1(ITable`1<TSource> table);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class LinqToDB.DataProvider.Access.AccessSqlBuilderBase : BasicSqlBuilder {
    [NullableAttribute("2")]
private SqlColumn _selectColumn;
    public bool IsNestedJoinSupported { get; }
    public bool WrapJoinCondition { get; }
    protected bool IsValuesSyntaxSupported { get; }
    protected AccessSqlBuilderBase(IDataProvider provider, MappingSchema mappingSchema, DataOptions dataOptions, ISqlOptimizer sqlOptimizer, SqlProviderFlags sqlProviderFlags);
    protected AccessSqlBuilderBase(BasicSqlBuilder parentBuilder);
    public virtual int CommandCount(SqlStatement statement);
    protected virtual void BuildCommand(SqlStatement statement, int commandNumber);
    public virtual bool get_IsNestedJoinSupported();
    public virtual bool get_WrapJoinCondition();
    protected virtual bool get_IsValuesSyntaxSupported();
    protected virtual string FirstFormat(SelectQuery selectQuery);
    protected virtual void BuildSql();
    private void BuildAnyAsCount(SelectQuery selectQuery);
    private void BuildInAsCount(SelectQuery selectQuery);
    protected virtual IEnumerable`1<SqlColumn> GetSelectedColumns(SelectQuery selectQuery);
    protected virtual bool ParenthesizeJoin(List`1<SqlJoinedTable> joins);
    protected virtual void BuildBinaryExpression(SqlBinaryExpression expr);
    protected virtual void BuildIsDistinctPredicate(IsDistinct expr);
    protected virtual void BuildFunction(SqlFunction func);
    private SqlFunction ConvertCase(Type systemType, ISqlExpression[] parameters, int start);
    protected virtual void BuildUpdateClause(SqlStatement statement, SelectQuery selectQuery, SqlUpdateClause updateClause);
    protected virtual void BuildDataTypeFromDataType(SqlDataType type, bool forCreateTable, bool canBeNull);
    public virtual StringBuilder Convert(StringBuilder sb, string value, ConvertType convertType);
    protected virtual void BuildCreateTableIdentityAttribute2(SqlField field);
    protected virtual void BuildCreateTablePrimaryKey(SqlCreateTableStatement createTable, string pkName, IEnumerable`1<string> fieldNames);
    public virtual StringBuilder BuildObjectName(StringBuilder sb, SqlObjectName name, ConvertType objectType, bool escape, TableOptions tableOptions, bool withoutSuffix);
    protected virtual void BuildMergeStatement(SqlMergeStatement merge);
    protected virtual StringBuilder BuildSqlComment(StringBuilder sb, SqlComment comment);
    protected virtual void BuildSubQueryExtensions(SqlStatement statement);
    protected virtual void BuildQueryExtensions(SqlStatement statement);
    [NullableContextAttribute("2")]
protected virtual void StartStatementQueryExtensions(SelectQuery selectQuery);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.DataProvider.Access.AccessSqlOptimizer : BasicSqlOptimizer {
    protected static String[] AccessLikeCharactersToEscape;
    public bool CanCompareSearchConditions { get; }
    public bool LikeIsEscapeSupported { get; }
    public String[] LikeCharactersToEscape { get; }
    public AccessSqlOptimizer(SqlProviderFlags sqlProviderFlags);
    private static AccessSqlOptimizer();
    public virtual bool get_CanCompareSearchConditions();
    public virtual bool get_LikeIsEscapeSupported();
    public virtual String[] get_LikeCharactersToEscape();
    public virtual ISqlPredicate ConvertLikePredicate(MappingSchema mappingSchema, Like predicate, EvaluationContext context);
    protected virtual string EscapeLikePattern(string str);
    public virtual ISqlExpression EscapeLikeCharacters(ISqlExpression expression, ISqlExpression& escape);
    public virtual SqlStatement TransformStatement(SqlStatement statement, DataOptions dataOptions);
    private SqlUpdateStatement CorrectAccessUpdate(SqlUpdateStatement statement);
    public virtual bool ConvertCountSubQuery(SelectQuery subQuery);
    public virtual ISqlPredicate ConvertSearchStringPredicate(SearchString predicate, ConvertVisitor`1<RunOptimizationContext> visitor);
    protected virtual ISqlExpression ConvertFunction(SqlFunction func);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class LinqToDB.DataProvider.Access.AccessTools : object {
    private static Lazy`1<IDataProvider> _accessOleDbDataProvider;
    private static Lazy`1<IDataProvider> _accessODBCDataProvider;
    [ObsoleteAttribute("Use AccessOptions.Default.BulkCopyType instead.")]
public static BulkCopyType DefaultBulkCopyType { get; public set; }
    private static AccessTools();
    [ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
public static IAccessSpecificTable`1<TSource> AsAccess(ITable`1<TSource> table);
    [ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
public static IAccessSpecificQueryable`1<TSource> AsAccess(IQueryable`1<TSource> source);
    internal static IDataProvider ProviderDetector(ConnectionOptions options);
    public static IDataProvider GetDataProvider(string providerName);
    public static DataConnection CreateDataConnection(string connectionString, string providerName);
    public static DataConnection CreateDataConnection(DbConnection connection, string providerName);
    public static DataConnection CreateDataConnection(DbTransaction transaction, string providerName);
    public static void CreateDatabase(string databaseName, bool deleteIfExists, string provider);
    [SecuritySafeCriticalAttribute]
private static void CreateAccessDB(string connectionString);
    public static void DropDatabase(string databaseName);
    public static BulkCopyType get_DefaultBulkCopyType();
    public static void set_DefaultBulkCopyType(BulkCopyType value);
}
public interface LinqToDB.DataProvider.Access.IAccessSpecificQueryable`1 {
}
public interface LinqToDB.DataProvider.Access.IAccessSpecificTable`1 {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.DataProvider.AssemblyResolver : object {
    [NullableAttribute("2")]
private string _path;
    private string _resolveName;
    [NullableAttribute("2")]
private Assembly _assembly;
    public AssemblyResolver(string path, string resolveName);
    public AssemblyResolver(Assembly assembly, string resolveName);
    private void SetResolver();
    [NullableContextAttribute("2")]
public Assembly Resolver(object sender, ResolveEventArgs args);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.DataProvider.BasicBulkCopy : object {
    protected int MaxParameters { get; }
    protected int MaxSqlLength { get; }
    protected bool CastFirstRowLiteralOnUnionAll { get; }
    protected bool CastFirstRowParametersOnUnionAll { get; }
    protected bool CastAllRowsParametersOnUnionAll { get; }
    protected virtual int get_MaxParameters();
    protected virtual int get_MaxSqlLength();
    protected virtual bool get_CastFirstRowLiteralOnUnionAll();
    protected virtual bool get_CastFirstRowParametersOnUnionAll();
    protected virtual bool get_CastAllRowsParametersOnUnionAll();
    protected virtual bool CastLiteral(ColumnDescriptor column);
    public virtual BulkCopyRowsCopied BulkCopy(BulkCopyType bulkCopyType, ITable`1<T> table, DataOptions options, IEnumerable`1<T> source);
    public virtual Task`1<BulkCopyRowsCopied> BulkCopyAsync(BulkCopyType bulkCopyType, ITable`1<T> table, DataOptions options, IEnumerable`1<T> source, CancellationToken cancellationToken);
    public virtual Task`1<BulkCopyRowsCopied> BulkCopyAsync(BulkCopyType bulkCopyType, ITable`1<T> table, DataOptions options, IAsyncEnumerable`1<T> source, CancellationToken cancellationToken);
    protected virtual BulkCopyRowsCopied ProviderSpecificCopy(ITable`1<T> table, DataOptions options, IEnumerable`1<T> source);
    protected virtual Task`1<BulkCopyRowsCopied> ProviderSpecificCopyAsync(ITable`1<T> table, DataOptions options, IEnumerable`1<T> source, CancellationToken cancellationToken);
    protected virtual Task`1<BulkCopyRowsCopied> ProviderSpecificCopyAsync(ITable`1<T> table, DataOptions options, IAsyncEnumerable`1<T> source, CancellationToken cancellationToken);
    protected virtual BulkCopyRowsCopied MultipleRowsCopy(ITable`1<T> table, DataOptions options, IEnumerable`1<T> source);
    protected virtual Task`1<BulkCopyRowsCopied> MultipleRowsCopyAsync(ITable`1<T> table, DataOptions options, IEnumerable`1<T> source, CancellationToken cancellationToken);
    protected virtual Task`1<BulkCopyRowsCopied> MultipleRowsCopyAsync(ITable`1<T> table, DataOptions options, IAsyncEnumerable`1<T> source, CancellationToken cancellationToken);
    protected virtual BulkCopyRowsCopied RowByRowCopy(ITable`1<T> table, DataOptions dataOptions, IEnumerable`1<T> source);
    [AsyncStateMachineAttribute("LinqToDB.DataProvider.BasicBulkCopy/<RowByRowCopyAsync>d__21`1")]
protected virtual Task`1<BulkCopyRowsCopied> RowByRowCopyAsync(ITable`1<T> table, DataOptions dataOptions, IEnumerable`1<T> source, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("LinqToDB.DataProvider.BasicBulkCopy/<RowByRowCopyAsync>d__22`1")]
protected virtual Task`1<BulkCopyRowsCopied> RowByRowCopyAsync(ITable`1<T> table, DataOptions dataOptions, IAsyncEnumerable`1<T> source, CancellationToken cancellationToken);
    protected internal static string GetTableName(ISqlBuilder sqlBuilder, BulkCopyOptions options, ITable`1<T> table, bool escaped);
    protected void TraceAction(DataConnection dataConnection, Func`1<string> commandText, Func`1<int> action);
    [AsyncStateMachineAttribute("LinqToDB.DataProvider.BasicBulkCopy/<TraceActionAsync>d__26")]
protected Task TraceActionAsync(DataConnection dataConnection, Func`1<string> commandText, Func`1<Task`1<int>> action);
    protected static BulkCopyRowsCopied MultipleRowsCopyHelper(MultipleRowsHelper helper, IEnumerable source, string from, Action`1<MultipleRowsHelper> prepFunction, Action`3<MultipleRowsHelper, object, string> addFunction, Action`1<MultipleRowsHelper> finishFunction, int maxParameters, int maxSqlLength);
    [AsyncStateMachineAttribute("LinqToDB.DataProvider.BasicBulkCopy/<MultipleRowsCopyHelperAsync>d__28")]
protected static Task`1<BulkCopyRowsCopied> MultipleRowsCopyHelperAsync(MultipleRowsHelper helper, IEnumerable source, string from, Action`1<MultipleRowsHelper> prepFunction, Action`3<MultipleRowsHelper, object, string> addFunction, Action`1<MultipleRowsHelper> finishFunction, CancellationToken cancellationToken, int maxParameters, int maxSqlLength);
    [AsyncStateMachineAttribute("LinqToDB.DataProvider.BasicBulkCopy/<MultipleRowsCopyHelperAsync>d__29`1")]
protected static Task`1<BulkCopyRowsCopied> MultipleRowsCopyHelperAsync(MultipleRowsHelper helper, IAsyncEnumerable`1<T> source, string from, Action`1<MultipleRowsHelper> prepFunction, Action`3<MultipleRowsHelper, object, string> addFunction, Action`1<MultipleRowsHelper> finishFunction, CancellationToken cancellationToken, int maxParameters, int maxSqlLength);
    protected BulkCopyRowsCopied MultipleRowsCopy1(ITable`1<T> table, DataOptions options, IEnumerable`1<T> source);
    protected BulkCopyRowsCopied MultipleRowsCopy1(MultipleRowsHelper helper, IEnumerable source);
    protected Task`1<BulkCopyRowsCopied> MultipleRowsCopy1Async(ITable`1<T> table, DataOptions options, IEnumerable`1<T> source, CancellationToken cancellationToken);
    protected Task`1<BulkCopyRowsCopied> MultipleRowsCopy1Async(MultipleRowsHelper helper, IEnumerable source, CancellationToken cancellationToken);
    protected Task`1<BulkCopyRowsCopied> MultipleRowsCopy1Async(ITable`1<T> table, DataOptions options, IAsyncEnumerable`1<T> source, CancellationToken cancellationToken);
    protected Task`1<BulkCopyRowsCopied> MultipleRowsCopy1Async(MultipleRowsHelper helper, IAsyncEnumerable`1<T> source, CancellationToken cancellationToken);
    private void MultipleRowsCopy1Prep(MultipleRowsHelper helper);
    private void MultipleRowsCopy1Add(MultipleRowsHelper helper, object item, string from);
    private void MultipleRowsCopy1Finish(MultipleRowsHelper helper);
    protected BulkCopyRowsCopied MultipleRowsCopy2(ITable`1<T> table, DataOptions options, IEnumerable`1<T> source, string from);
    protected BulkCopyRowsCopied MultipleRowsCopy2(MultipleRowsHelper helper, IEnumerable source, string from);
    protected Task`1<BulkCopyRowsCopied> MultipleRowsCopy2Async(ITable`1<T> table, DataOptions options, IEnumerable`1<T> source, string from, CancellationToken cancellationToken);
    protected Task`1<BulkCopyRowsCopied> MultipleRowsCopy2Async(MultipleRowsHelper helper, IEnumerable source, string from, CancellationToken cancellationToken);
    protected Task`1<BulkCopyRowsCopied> MultipleRowsCopy2Async(ITable`1<T> table, DataOptions options, IAsyncEnumerable`1<T> source, string from, CancellationToken cancellationToken);
    protected Task`1<BulkCopyRowsCopied> MultipleRowsCopy2Async(MultipleRowsHelper helper, IAsyncEnumerable`1<T> source, string from, CancellationToken cancellationToken);
    private void MultipleRowsCopy2Prep(MultipleRowsHelper helper);
    private void MultipleRowsCopy2Add(MultipleRowsHelper helper, object item, string from);
    private void MultipleRowsCopy2Finish(MultipleRowsHelper helper);
    protected BulkCopyRowsCopied MultipleRowsCopy3(MultipleRowsHelper helper, BulkCopyOptions options, IEnumerable source, string from);
    protected Task`1<BulkCopyRowsCopied> MultipleRowsCopy3Async(MultipleRowsHelper helper, BulkCopyOptions options, IEnumerable source, string from, CancellationToken cancellationToken);
    protected Task`1<BulkCopyRowsCopied> MultipleRowsCopy3Async(MultipleRowsHelper helper, BulkCopyOptions options, IAsyncEnumerable`1<T> source, string from, CancellationToken cancellationToken);
    private void MultipleRowsCopy3Prep(MultipleRowsHelper helper);
    private void MultipleRowsCopy3Add(MultipleRowsHelper helper, object item, string from);
    private void MultipleRowsCopy3Finish(MultipleRowsHelper helper);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public abstract class LinqToDB.DataProvider.BulkCopyReader : DbDataReader {
    public int Count;
    private DataConnection _dataConnection;
    private DbDataType[] _columnTypes;
    private List`1<ColumnDescriptor> _columns;
    private Parameter _valueConverter;
    private IReadOnlyDictionary`2<string, int> _ordinals;
    protected object Current { get; }
    public int FieldCount { get; }
    public object Item { get; }
    public object Item { get; }
    public int Depth { get; }
    public bool IsClosed { get; }
    public int RecordsAffected { get; }
    public bool HasRows { get; }
    protected BulkCopyReader(DataConnection dataConnection, List`1<ColumnDescriptor> columns);
    protected abstract virtual bool MoveNext();
    [NullableContextAttribute("0")]
protected abstract virtual ValueTask`1<bool> MoveNextAsync();
    protected abstract virtual object get_Current();
    public virtual string GetName(int ordinal);
    public virtual Type GetFieldType(int ordinal);
    public virtual object GetValue(int ordinal);
    [NullableContextAttribute("2")]
private object GetValueInternal(int ordinal);
    public virtual int GetValues(Object[] values);
    public virtual int get_FieldCount();
    [NullableContextAttribute("2")]
public virtual long GetBytes(int ordinal, long dataOffset, Byte[] buffer, int bufferOffset, int length);
    [NullableContextAttribute("2")]
public virtual long GetChars(int ordinal, long dataOffset, Char[] buffer, int bufferOffset, int length);
    public virtual string GetDataTypeName(int ordinal);
    public virtual int GetOrdinal(string name);
    public virtual bool GetBoolean(int ordinal);
    public virtual byte GetByte(int ordinal);
    public virtual char GetChar(int ordinal);
    public virtual Guid GetGuid(int ordinal);
    public virtual short GetInt16(int ordinal);
    public virtual int GetInt32(int ordinal);
    public virtual long GetInt64(int ordinal);
    public virtual float GetFloat(int ordinal);
    public virtual double GetDouble(int ordinal);
    public virtual string GetString(int ordinal);
    public virtual decimal GetDecimal(int ordinal);
    public virtual DateTime GetDateTime(int ordinal);
    public virtual bool IsDBNull(int ordinal);
    public virtual object get_Item(int i);
    public virtual object get_Item(string name);
    public virtual void Close();
    public virtual DataTable GetSchemaTable();
    public virtual bool NextResult();
    public virtual bool Read();
    [AsyncStateMachineAttribute("LinqToDB.DataProvider.BulkCopyReader/<ReadAsync>d__44")]
public virtual Task`1<bool> ReadAsync(CancellationToken cancellationToken);
    public virtual int get_Depth();
    public virtual bool get_IsClosed();
    public virtual int get_RecordsAffected();
    public virtual IEnumerator GetEnumerator();
    public virtual bool get_HasRows();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.DataProvider.BulkCopyReader`1 : BulkCopyReader {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IEnumerator`1<T> _enumerator;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IAsyncEnumerator`1<T> _asyncEnumerator;
    protected object Current { get; }
    public BulkCopyReader`1(DataConnection dataConnection, List`1<ColumnDescriptor> columns, IEnumerable`1<T> collection);
    public BulkCopyReader`1(DataConnection dataConnection, List`1<ColumnDescriptor> columns, IAsyncEnumerable`1<T> collection, CancellationToken cancellationToken);
    protected virtual bool MoveNext();
    protected virtual object get_Current();
    [NullableContextAttribute("0")]
protected virtual ValueTask`1<bool> MoveNextAsync();
    protected virtual void Dispose(bool disposing);
    public virtual ValueTask DisposeAsync();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private ValueTask`1<bool> <MoveNext>b__4_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.DataProvider.ClickHouse.ClickHouseBulkCopy : BasicBulkCopy {
    private ClickHouseDataProvider _provider;
    public ClickHouseBulkCopy(ClickHouseDataProvider provider);
    protected virtual BulkCopyRowsCopied MultipleRowsCopy(ITable`1<T> table, DataOptions options, IEnumerable`1<T> source);
    protected virtual Task`1<BulkCopyRowsCopied> MultipleRowsCopyAsync(ITable`1<T> table, DataOptions options, IEnumerable`1<T> source, CancellationToken cancellationToken);
    protected virtual Task`1<BulkCopyRowsCopied> MultipleRowsCopyAsync(ITable`1<T> table, DataOptions options, IAsyncEnumerable`1<T> source, CancellationToken cancellationToken);
    protected virtual BulkCopyRowsCopied ProviderSpecificCopy(ITable`1<T> table, DataOptions options, IEnumerable`1<T> source);
    protected virtual Task`1<BulkCopyRowsCopied> ProviderSpecificCopyAsync(ITable`1<T> table, DataOptions options, IEnumerable`1<T> source, CancellationToken cancellationToken);
    protected virtual Task`1<BulkCopyRowsCopied> ProviderSpecificCopyAsync(ITable`1<T> table, DataOptions options, IAsyncEnumerable`1<T> source, CancellationToken cancellationToken);
    private Nullable`1<ProviderConnections> TryGetProviderConnections(ITable`1<T> table);
    private BulkCopyRowsCopied ProviderSpecificOctonicaBulkCopy(ProviderConnections providerConnections, ITable`1<T> table, BulkCopyOptions options, IEnumerable`1<T> source);
    [AsyncStateMachineAttribute("LinqToDB.DataProvider.ClickHouse.ClickHouseBulkCopy/<ProviderSpecificOctonicaBulkCopyAsync>d__10`1")]
private Task`1<BulkCopyRowsCopied> ProviderSpecificOctonicaBulkCopyAsync(ProviderConnections providerConnections, ITable`1<T> table, BulkCopyOptions options, IEnumerable`1<T> source, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("LinqToDB.DataProvider.ClickHouse.ClickHouseBulkCopy/<ProviderSpecificOctonicaBulkCopyAsync>d__11`1")]
private Task`1<BulkCopyRowsCopied> ProviderSpecificOctonicaBulkCopyAsync(ProviderConnections providerConnections, ITable`1<T> table, BulkCopyOptions options, IAsyncEnumerable`1<T> source, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("LinqToDB.DataProvider.ClickHouse.ClickHouseBulkCopy/<ProviderSpecificClientBulkCopyAsync>d__12`1")]
private Task`1<BulkCopyRowsCopied> ProviderSpecificClientBulkCopyAsync(ProviderConnections providerConnections, ITable`1<T> table, DataOptions options, Func`2<List`1<ColumnDescriptor>, BulkCopyReader`1<T>> createDataReader, CancellationToken cancellationToken);
}
internal class LinqToDB.DataProvider.ClickHouse.ClickHouseClientDataProvider : ClickHouseDataProvider {
}
public static class LinqToDB.DataProvider.ClickHouse.ClickHouseConfiguration : object {
    [ObsoleteAttribute("Use ClickHouseOptions.Default.UseStandardCompatibleAggregates instead.")]
public static bool UseStandardCompatibleAggregates { get; public set; }
    public static bool get_UseStandardCompatibleAggregates();
    public static void set_UseStandardCompatibleAggregates(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class LinqToDB.DataProvider.ClickHouse.ClickHouseDataProvider : DynamicDataProviderBase`1<ClickHouseProviderAdapter> {
    [CompilerGeneratedAttribute]
private ClickHouseProvider <Provider>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<string, DbConnection> _createOctonicaConnection;
    public ClickHouseProvider Provider { get; }
    public TableOptions SupportedTableOptions { get; }
    protected ClickHouseDataProvider(string name, ClickHouseProvider provider);
    [CompilerGeneratedAttribute]
public ClickHouseProvider get_Provider();
    protected virtual DbConnection CreateConnectionInternal(string connectionString);
    private static Expression`1<Func`2<string, DbConnection>> CreateOctonicaConnectionExpression(Type connectionType);
    public virtual TableOptions get_SupportedTableOptions();
    public virtual ISqlBuilder CreateSqlBuilder(MappingSchema mappingSchema, DataOptions dataOptions);
    public virtual ISqlOptimizer GetSqlOptimizer(DataOptions dataOptions);
    public virtual ISchemaProvider GetSchemaProvider();
    public virtual Nullable`1<bool> IsDBNullAllowed(DataOptions options, DbDataReader reader, int idx);
    public virtual IQueryParametersNormalizer GetQueryParameterNormalizer();
    public virtual void SetParameter(DataConnection dataConnection, DbParameter parameter, string name, DbDataType dataType, object value);
    public virtual BulkCopyRowsCopied BulkCopy(DataOptions options, ITable`1<T> table, IEnumerable`1<T> source);
    public virtual Task`1<BulkCopyRowsCopied> BulkCopyAsync(DataOptions options, ITable`1<T> table, IEnumerable`1<T> source, CancellationToken cancellationToken);
    public virtual Task`1<BulkCopyRowsCopied> BulkCopyAsync(DataOptions options, ITable`1<T> table, IAsyncEnumerable`1<T> source, CancellationToken cancellationToken);
    private static MappingSchema GetMappingSchema(ClickHouseProvider provider);
}
[UsedImplicitlyAttribute]
internal class LinqToDB.DataProvider.ClickHouse.ClickHouseFactory : object {
    [NullableContextAttribute("1")]
private sealed virtual override IDataProvider LinqToDB.DataProvider.IDataProviderFactory.GetDataProvider(IEnumerable`1<NamedValue> attributes);
}
[ExtensionAttribute]
public static class LinqToDB.DataProvider.ClickHouse.ClickHouseHints : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("ClickHouse", "1", "LinqToDB.DataProvider.ClickHouse.ClickHouseHints/TableHintExtensionBuilder")]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
internal static IClickHouseSpecificTable`1<TSource> TableHint(IClickHouseSpecificTable`1<TSource> table, string hint);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("ClickHouse", "2", "LinqToDB.DataProvider.ClickHouse.ClickHouseHints/TableHintExtensionBuilder")]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
internal static IClickHouseSpecificQueryable`1<TSource> TablesInScopeHint(IClickHouseSpecificQueryable`1<TSource> source, string hint);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("ClickHouse", "4", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
internal static IClickHouseSpecificTable`1<TSource> JoinHint(IClickHouseSpecificTable`1<TSource> table, string hint);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("ClickHouse", "4", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
internal static IClickHouseSpecificQueryable`1<TSource> JoinHint(IClickHouseSpecificQueryable`1<TSource> source, string hint);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("ClickHouse", "5", "LinqToDB.SqlProvider.HintExtensionBuilder")]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
internal static IClickHouseSpecificQueryable`1<TSource> SubQueryHint(IClickHouseSpecificQueryable`1<TSource> source, string hint);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("ClickHouse", "6", "LinqToDB.SqlProvider.HintWithFormatParametersExtensionBuilder", " ")]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
internal static IClickHouseSpecificQueryable`1<TSource> QueryHint(IClickHouseSpecificQueryable`1<TSource> source, string hint, string hintFormat, Object[] hintParameters);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[ExpressionMethodAttribute("ClickHouse", "FinalHintImpl")]
public static IClickHouseSpecificTable`1<TSource> FinalHint(IClickHouseSpecificTable`1<TSource> table);
    [NullableContextAttribute("1")]
private static Expression`1<Func`2<IClickHouseSpecificTable`1<TSource>, IClickHouseSpecificTable`1<TSource>>> FinalHintImpl();
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[ExpressionMethodAttribute("ClickHouse", "FinalInScopeHintImpl2")]
public static IClickHouseSpecificTable`1<TSource> FinalInScopeHint(IClickHouseSpecificTable`1<TSource> table);
    [NullableContextAttribute("1")]
private static Expression`1<Func`2<IClickHouseSpecificTable`1<TSource>, IClickHouseSpecificTable`1<TSource>>> FinalInScopeHintImpl2();
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[ExpressionMethodAttribute("ClickHouse", "FinalInScopeHintImpl")]
public static IClickHouseSpecificQueryable`1<TSource> FinalInScopeHint(IClickHouseSpecificQueryable`1<TSource> table);
    [NullableContextAttribute("1")]
private static Expression`1<Func`2<IClickHouseSpecificQueryable`1<TSource>, IClickHouseSpecificQueryable`1<TSource>>> FinalInScopeHintImpl();
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[ExpressionMethodAttribute("ClickHouse", "FinalQueryHintImpl")]
public static IClickHouseSpecificQueryable`1<TSource> FinalHint(IClickHouseSpecificQueryable`1<TSource> table);
    [NullableContextAttribute("1")]
private static Expression`1<Func`2<IClickHouseSpecificQueryable`1<TSource>, IClickHouseSpecificQueryable`1<TSource>>> FinalQueryHintImpl();
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[ExpressionMethodAttribute("ClickHouse", "SettingsHintImpl")]
public static IClickHouseSpecificQueryable`1<TSource> SettingsHint(IClickHouseSpecificQueryable`1<TSource> query, string hintFormat, Object[] hintParameters);
    [NullableContextAttribute("1")]
private static Expression`1<Func`4<IClickHouseSpecificQueryable`1<TSource>, string, Object[], IClickHouseSpecificQueryable`1<TSource>>> SettingsHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("JoinOuterHintImpl")]
internal static IClickHouseSpecificQueryable`1<TSource> JoinOuterHint(IClickHouseSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IClickHouseSpecificQueryable`1<TSource>, IClickHouseSpecificQueryable`1<TSource>>> JoinOuterHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("JoinOuterTableHintImpl")]
internal static IClickHouseSpecificTable`1<TSource> JoinOuterHint(IClickHouseSpecificTable`1<TSource> table);
    private static Expression`1<Func`2<IClickHouseSpecificTable`1<TSource>, IClickHouseSpecificTable`1<TSource>>> JoinOuterTableHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("JoinSemiHintImpl")]
internal static IClickHouseSpecificQueryable`1<TSource> JoinSemiHint(IClickHouseSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IClickHouseSpecificQueryable`1<TSource>, IClickHouseSpecificQueryable`1<TSource>>> JoinSemiHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("JoinSemiTableHintImpl")]
internal static IClickHouseSpecificTable`1<TSource> JoinSemiHint(IClickHouseSpecificTable`1<TSource> table);
    private static Expression`1<Func`2<IClickHouseSpecificTable`1<TSource>, IClickHouseSpecificTable`1<TSource>>> JoinSemiTableHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("JoinAntiHintImpl")]
internal static IClickHouseSpecificQueryable`1<TSource> JoinAntiHint(IClickHouseSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IClickHouseSpecificQueryable`1<TSource>, IClickHouseSpecificQueryable`1<TSource>>> JoinAntiHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("JoinAntiTableHintImpl")]
internal static IClickHouseSpecificTable`1<TSource> JoinAntiHint(IClickHouseSpecificTable`1<TSource> table);
    private static Expression`1<Func`2<IClickHouseSpecificTable`1<TSource>, IClickHouseSpecificTable`1<TSource>>> JoinAntiTableHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("JoinAnyHintImpl")]
internal static IClickHouseSpecificQueryable`1<TSource> JoinAnyHint(IClickHouseSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IClickHouseSpecificQueryable`1<TSource>, IClickHouseSpecificQueryable`1<TSource>>> JoinAnyHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("JoinAnyTableHintImpl")]
internal static IClickHouseSpecificTable`1<TSource> JoinAnyHint(IClickHouseSpecificTable`1<TSource> table);
    private static Expression`1<Func`2<IClickHouseSpecificTable`1<TSource>, IClickHouseSpecificTable`1<TSource>>> JoinAnyTableHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("JoinAsOfHintImpl")]
internal static IClickHouseSpecificQueryable`1<TSource> JoinAsOfHint(IClickHouseSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IClickHouseSpecificQueryable`1<TSource>, IClickHouseSpecificQueryable`1<TSource>>> JoinAsOfHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("JoinAsOfTableHintImpl")]
internal static IClickHouseSpecificTable`1<TSource> JoinAsOfHint(IClickHouseSpecificTable`1<TSource> table);
    private static Expression`1<Func`2<IClickHouseSpecificTable`1<TSource>, IClickHouseSpecificTable`1<TSource>>> JoinAsOfTableHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("JoinGlobalHintImpl")]
internal static IClickHouseSpecificQueryable`1<TSource> JoinGlobalHint(IClickHouseSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IClickHouseSpecificQueryable`1<TSource>, IClickHouseSpecificQueryable`1<TSource>>> JoinGlobalHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("JoinGlobalTableHintImpl")]
internal static IClickHouseSpecificTable`1<TSource> JoinGlobalHint(IClickHouseSpecificTable`1<TSource> table);
    private static Expression`1<Func`2<IClickHouseSpecificTable`1<TSource>, IClickHouseSpecificTable`1<TSource>>> JoinGlobalTableHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("JoinGlobalOuterHintImpl")]
internal static IClickHouseSpecificQueryable`1<TSource> JoinGlobalOuterHint(IClickHouseSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IClickHouseSpecificQueryable`1<TSource>, IClickHouseSpecificQueryable`1<TSource>>> JoinGlobalOuterHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("JoinGlobalOuterTableHintImpl")]
internal static IClickHouseSpecificTable`1<TSource> JoinGlobalOuterHint(IClickHouseSpecificTable`1<TSource> table);
    private static Expression`1<Func`2<IClickHouseSpecificTable`1<TSource>, IClickHouseSpecificTable`1<TSource>>> JoinGlobalOuterTableHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("JoinGlobalSemiHintImpl")]
internal static IClickHouseSpecificQueryable`1<TSource> JoinGlobalSemiHint(IClickHouseSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IClickHouseSpecificQueryable`1<TSource>, IClickHouseSpecificQueryable`1<TSource>>> JoinGlobalSemiHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("JoinGlobalSemiTableHintImpl")]
internal static IClickHouseSpecificTable`1<TSource> JoinGlobalSemiHint(IClickHouseSpecificTable`1<TSource> table);
    private static Expression`1<Func`2<IClickHouseSpecificTable`1<TSource>, IClickHouseSpecificTable`1<TSource>>> JoinGlobalSemiTableHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("JoinGlobalAntiHintImpl")]
internal static IClickHouseSpecificQueryable`1<TSource> JoinGlobalAntiHint(IClickHouseSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IClickHouseSpecificQueryable`1<TSource>, IClickHouseSpecificQueryable`1<TSource>>> JoinGlobalAntiHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("JoinGlobalAntiTableHintImpl")]
internal static IClickHouseSpecificTable`1<TSource> JoinGlobalAntiHint(IClickHouseSpecificTable`1<TSource> table);
    private static Expression`1<Func`2<IClickHouseSpecificTable`1<TSource>, IClickHouseSpecificTable`1<TSource>>> JoinGlobalAntiTableHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("JoinGlobalAnyHintImpl")]
internal static IClickHouseSpecificQueryable`1<TSource> JoinGlobalAnyHint(IClickHouseSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IClickHouseSpecificQueryable`1<TSource>, IClickHouseSpecificQueryable`1<TSource>>> JoinGlobalAnyHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("JoinGlobalAnyTableHintImpl")]
internal static IClickHouseSpecificTable`1<TSource> JoinGlobalAnyHint(IClickHouseSpecificTable`1<TSource> table);
    private static Expression`1<Func`2<IClickHouseSpecificTable`1<TSource>, IClickHouseSpecificTable`1<TSource>>> JoinGlobalAnyTableHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("JoinGlobalAsOfHintImpl")]
internal static IClickHouseSpecificQueryable`1<TSource> JoinGlobalAsOfHint(IClickHouseSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IClickHouseSpecificQueryable`1<TSource>, IClickHouseSpecificQueryable`1<TSource>>> JoinGlobalAsOfHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("JoinGlobalAsOfTableHintImpl")]
internal static IClickHouseSpecificTable`1<TSource> JoinGlobalAsOfHint(IClickHouseSpecificTable`1<TSource> table);
    private static Expression`1<Func`2<IClickHouseSpecificTable`1<TSource>, IClickHouseSpecificTable`1<TSource>>> JoinGlobalAsOfTableHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("JoinAllHintImpl")]
internal static IClickHouseSpecificQueryable`1<TSource> JoinAllHint(IClickHouseSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IClickHouseSpecificQueryable`1<TSource>, IClickHouseSpecificQueryable`1<TSource>>> JoinAllHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("JoinAllTableHintImpl")]
internal static IClickHouseSpecificTable`1<TSource> JoinAllHint(IClickHouseSpecificTable`1<TSource> table);
    private static Expression`1<Func`2<IClickHouseSpecificTable`1<TSource>, IClickHouseSpecificTable`1<TSource>>> JoinAllTableHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("JoinAllOuterHintImpl")]
internal static IClickHouseSpecificQueryable`1<TSource> JoinAllOuterHint(IClickHouseSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IClickHouseSpecificQueryable`1<TSource>, IClickHouseSpecificQueryable`1<TSource>>> JoinAllOuterHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("JoinAllOuterTableHintImpl")]
internal static IClickHouseSpecificTable`1<TSource> JoinAllOuterHint(IClickHouseSpecificTable`1<TSource> table);
    private static Expression`1<Func`2<IClickHouseSpecificTable`1<TSource>, IClickHouseSpecificTable`1<TSource>>> JoinAllOuterTableHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("JoinAllSemiHintImpl")]
internal static IClickHouseSpecificQueryable`1<TSource> JoinAllSemiHint(IClickHouseSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IClickHouseSpecificQueryable`1<TSource>, IClickHouseSpecificQueryable`1<TSource>>> JoinAllSemiHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("JoinAllSemiTableHintImpl")]
internal static IClickHouseSpecificTable`1<TSource> JoinAllSemiHint(IClickHouseSpecificTable`1<TSource> table);
    private static Expression`1<Func`2<IClickHouseSpecificTable`1<TSource>, IClickHouseSpecificTable`1<TSource>>> JoinAllSemiTableHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("JoinAllAntiHintImpl")]
internal static IClickHouseSpecificQueryable`1<TSource> JoinAllAntiHint(IClickHouseSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IClickHouseSpecificQueryable`1<TSource>, IClickHouseSpecificQueryable`1<TSource>>> JoinAllAntiHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("JoinAllAntiTableHintImpl")]
internal static IClickHouseSpecificTable`1<TSource> JoinAllAntiHint(IClickHouseSpecificTable`1<TSource> table);
    private static Expression`1<Func`2<IClickHouseSpecificTable`1<TSource>, IClickHouseSpecificTable`1<TSource>>> JoinAllAntiTableHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("JoinAllAnyHintImpl")]
internal static IClickHouseSpecificQueryable`1<TSource> JoinAllAnyHint(IClickHouseSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IClickHouseSpecificQueryable`1<TSource>, IClickHouseSpecificQueryable`1<TSource>>> JoinAllAnyHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("JoinAllAnyTableHintImpl")]
internal static IClickHouseSpecificTable`1<TSource> JoinAllAnyHint(IClickHouseSpecificTable`1<TSource> table);
    private static Expression`1<Func`2<IClickHouseSpecificTable`1<TSource>, IClickHouseSpecificTable`1<TSource>>> JoinAllAnyTableHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("JoinAllAsOfHintImpl")]
internal static IClickHouseSpecificQueryable`1<TSource> JoinAllAsOfHint(IClickHouseSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IClickHouseSpecificQueryable`1<TSource>, IClickHouseSpecificQueryable`1<TSource>>> JoinAllAsOfHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("JoinAllAsOfTableHintImpl")]
internal static IClickHouseSpecificTable`1<TSource> JoinAllAsOfHint(IClickHouseSpecificTable`1<TSource> table);
    private static Expression`1<Func`2<IClickHouseSpecificTable`1<TSource>, IClickHouseSpecificTable`1<TSource>>> JoinAllAsOfTableHintImpl();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.DataProvider.ClickHouse.ClickHouseMappingSchema : LockedMappingSchema {
    internal static int DEFAULT_FIXED_STRING_LENGTH;
    internal static int DEFAULT_DECIMAL_PRECISION;
    internal static int DEFAULT_DECIMAL_SCALE;
    internal static byte DEFAULT_DATETIME64_PRECISION;
    private static String[] DATETIME64_FORMATS;
    internal static ClickHouseMappingSchema Instance;
    private static ClickHouseMappingSchema();
    private static UInt32 IPAddressToUInt(IPAddress address);
    private static void ConvertString(StringBuilder stringBuilder, SqlDataType dt, string value);
    private static void ConvertByteArray(StringBuilder stringBuilder, SqlDataType dt, Byte[] value);
    private static void ConvertIPAddress(StringBuilder sb, SqlDataType dt, IPAddress address);
    private static void ConvertGuid(StringBuilder sb, SqlDataType dt, Guid value);
    private static void ConvertTimeSpan(StringBuilder sb, SqlDataType dt, TimeSpan value);
    private static void ConvertDateTime(StringBuilder sb, SqlDataType dt, DateTime value);
    private static void ConvertByte(StringBuilder sb, SqlDataType dt, byte value);
    private static void ConvertSByte(StringBuilder sb, SqlDataType dt, sbyte value);
    private static void ConvertInt16(StringBuilder sb, SqlDataType dt, short value);
    private static void ConvertUInt16(StringBuilder sb, SqlDataType dt, ushort value);
    private static void ConvertInt32(StringBuilder sb, SqlDataType dt, int value);
    private static void ConvertUInt32(StringBuilder sb, SqlDataType dt, UInt32 value);
    private static void ConvertInt64(StringBuilder sb, SqlDataType dt, long value);
    private static void ConvertUInt64(StringBuilder sb, SqlDataType dt, ulong value);
    private static void ConvertBigInteger(StringBuilder sb, SqlDataType dt, BigInteger value);
    private static void ConvertDateTimeOffset(StringBuilder sb, SqlDataType dt, DateTimeOffset value);
    private static void ConvertFloat(StringBuilder sb, SqlDataType dt, float value);
    private static void ConvertDouble(StringBuilder sb, SqlDataType dt, double value);
    private static void ConvertDecimal(StringBuilder sb, SqlDataType dt, decimal value);
    private static void ConvertBool(StringBuilder sb, SqlDataType dt, bool value);
    private static void BuildStringLiteral(StringBuilder stringBuilder, string value);
    private static void BuildCharLiteral(StringBuilder stringBuilder, char value);
    private static void BuildBinaryLiteral(StringBuilder stringBuilder, Byte[] value);
    private static void BuildUUIDLiteral(StringBuilder sb, Guid value);
    private static void BuildDateLiteral(StringBuilder sb, DateTime value);
    private static void BuildDate32Literal(StringBuilder sb, DateTime value);
    private static void BuildDateTimeLiteral(StringBuilder sb, DateTime value);
    private static void BuildDateTime64Literal(StringBuilder sb, DateTime value, int precision);
    private static void BuildByteLiteral(StringBuilder sb, byte value);
    private static void BuildSByteLiteral(StringBuilder sb, sbyte value);
    private static void BuildInt16Literal(StringBuilder sb, short value);
    private static void BuildUInt16Literal(StringBuilder sb, ushort value);
    private static void BuildInt32Literal(StringBuilder sb, int value);
    private static void BuildUInt32Literal(StringBuilder sb, UInt32 value);
    private static void BuildInt64Literal(StringBuilder sb, long value);
    private static void BuildUInt64Literal(StringBuilder sb, ulong value);
    private static void BuildInt128Literal(StringBuilder sb, BigInteger value);
    private static void BuildUInt128Literal(StringBuilder sb, BigInteger value);
    private static void BuildInt256Literal(StringBuilder sb, BigInteger value);
    private static void BuildUInt256Literal(StringBuilder sb, BigInteger value);
    [NullableContextAttribute("2")]
private static string GetIntervalLiteralFormat(DataType dataType);
    private static void BuildFloatLiteral(StringBuilder sb, float value);
    private static void BuildDoubleLiteral(StringBuilder sb, double value);
    private static void BuildDecimal32Literal(StringBuilder sb, decimal value, int scale);
    private static void BuildDecimal64Literal(StringBuilder sb, decimal value, int scale);
    private static void BuildDecimal128Literal(StringBuilder sb, decimal value, int scale);
    private static void BuildDecimal256Literal(StringBuilder sb, decimal value, int scale);
    private static void BuildBooleanLiteral(StringBuilder sb, bool value);
    private static void BuildIPv4Literal(StringBuilder sb, UInt32 value);
}
internal class LinqToDB.DataProvider.ClickHouse.ClickHouseMySqlDataProvider : ClickHouseDataProvider {
}
internal class LinqToDB.DataProvider.ClickHouse.ClickHouseOctonicaDataProvider : ClickHouseDataProvider {
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class LinqToDB.DataProvider.ClickHouse.ClickHouseOptions : DataProviderOptions`1<ClickHouseOptions> {
    [CompilerGeneratedAttribute]
private bool <UseStandardCompatibleAggregates>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public bool UseStandardCompatibleAggregates { get; public set; }
    public ClickHouseOptions(BulkCopyType BulkCopyType, bool UseStandardCompatibleAggregates);
    private ClickHouseOptions(ClickHouseOptions original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public bool get_UseStandardCompatibleAggregates();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_UseStandardCompatibleAggregates(bool value);
    protected virtual IdentifierBuilder CreateID(IdentifierBuilder builder);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(ClickHouseOptions other);
    public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(ClickHouseOptions left, ClickHouseOptions right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(ClickHouseOptions left, ClickHouseOptions right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(DataProviderOptions`1<ClickHouseOptions> other);
    [CompilerGeneratedAttribute]
public virtual DataProviderOptions`1<ClickHouseOptions> <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(BulkCopyType& BulkCopyType, Boolean& UseStandardCompatibleAggregates);
}
public enum LinqToDB.DataProvider.ClickHouse.ClickHouseProvider : Enum {
    public int value__;
    public static ClickHouseProvider Octonica;
    public static ClickHouseProvider ClickHouseClient;
    public static ClickHouseProvider MySqlConnector;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class LinqToDB.DataProvider.ClickHouse.ClickHouseProviderAdapter : object {
    [NullableAttribute("1")]
private static object _octonicaSyncRoot;
    [NullableAttribute("1")]
private static object _clientSyncRoot;
    [NullableAttribute("1")]
private static object _mysqlSyncRoot;
    private static ClickHouseProviderAdapter _octonicaAdapter;
    private static ClickHouseProviderAdapter _clientAdapter;
    private static ClickHouseProviderAdapter _mysqlAdapter;
    [NullableAttribute("1")]
public static string OctonicaAssemblyName;
    [NullableAttribute("1")]
public static string OctonicaClientNamespace;
    [NullableAttribute("1")]
public static string OctonicaProviderFactoryName;
    [NullableAttribute("1")]
public static string ClientAssemblyName;
    [NullableAttribute("1")]
public static string ClientClientNamespace;
    [NullableAttribute("1")]
public static string ClientProviderFactoryName;
    [NullableAttribute("1")]
public static string ClientProviderTypesNamespace;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Type <ConnectionType>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Type <DataReaderType>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Type <ParameterType>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Type <CommandType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ClientDecimalType>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<object, string> <ClientDecimalToStringConverter>k__BackingField;
    [CompilerGeneratedAttribute]
private MappingSchema <MappingSchema>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<DbConnection, ClickHouseBulkCopy> <ClientBulkCopyCreator>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`3<DbConnection, string, ClickHouseColumnWriter> <OctonicaCreateWriter>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`4<DbConnection, string, CancellationToken, Task`1<ClickHouseColumnWriter>> <OctonicaCreateWriterAsync>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<Type, ClickHouseColumnSettings> <OctonicaColumnSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GetDateTimeOffsetReaderMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GetIPAddressReaderMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GetUInt16ReaderMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GetUInt32ReaderMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GetUInt64ReaderMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GetSByteReaderMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GetBigIntegerReaderMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GetDateOnlyReaderMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GetMySqlDecimalReaderMethod>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<string, ClickHouseConnectionStringBuilder> <CreateClientConnectionStringBuilder>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<string, DbConnection> <CreateConnection>k__BackingField;
    [NullableAttribute("1")]
public Type ConnectionType { get; }
    [NullableAttribute("1")]
public Type DataReaderType { get; }
    [NullableAttribute("1")]
public Type ParameterType { get; }
    [NullableAttribute("1")]
public Type CommandType { get; }
    public Type TransactionType { get; }
    public Type ClientDecimalType { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<object, string> ClientDecimalToStringConverter { get; }
    public MappingSchema MappingSchema { get; }
    internal bool SupportsBulkCopy { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Func`2<DbConnection, ClickHouseBulkCopy> ClientBulkCopyCreator { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Func`3<DbConnection, string, ClickHouseColumnWriter> OctonicaCreateWriter { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Func`4<DbConnection, string, CancellationToken, Task`1<ClickHouseColumnWriter>> OctonicaCreateWriterAsync { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Func`2<Type, ClickHouseColumnSettings> OctonicaColumnSettings { get; }
    internal string GetDateTimeOffsetReaderMethod { get; }
    internal string GetIPAddressReaderMethod { get; }
    internal string GetUInt16ReaderMethod { get; }
    internal string GetUInt32ReaderMethod { get; }
    internal string GetUInt64ReaderMethod { get; }
    internal string GetSByteReaderMethod { get; }
    internal string GetBigIntegerReaderMethod { get; }
    internal string GetDateOnlyReaderMethod { get; }
    internal string GetMySqlDecimalReaderMethod { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Func`2<string, ClickHouseConnectionStringBuilder> CreateClientConnectionStringBuilder { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Func`2<string, DbConnection> CreateConnection { get; }
    [NullableContextAttribute("1")]
private ClickHouseProviderAdapter(Type connectionType, Type dataReaderType, Type parameterType, Type commandType, Type clientDecimalType, Func`2<object, string> clientDecimalToStringConverter, string getDateTimeOffsetReaderMethod, string getIPAddressReaderMethod, string getSByteReaderMethod, string getUInt16ReaderMethod, string getUInt32ReaderMethod, string getUInt64ReaderMethod, string getBigIntegerReaderMethod, string getDateOnlyReaderMethod, Func`2<DbConnection, ClickHouseBulkCopy> clientBulkCopyCreator, Func`3<DbConnection, string, ClickHouseColumnWriter> octonicaCreateWriter, Func`4<DbConnection, string, CancellationToken, Task`1<ClickHouseColumnWriter>> octonicaCreateWriterAsync, Func`2<Type, ClickHouseColumnSettings> octonicaColumnSettings, Func`2<string, ClickHouseConnectionStringBuilder> clientConnectionStringBuilder, Func`2<string, DbConnection> connectionCreator, MappingSchema mappingSchema);
    [NullableContextAttribute("1")]
private ClickHouseProviderAdapter(MySqlProviderAdapter mySqlProviderAdapter);
    private static ClickHouseProviderAdapter();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual Type get_ConnectionType();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual Type get_DataReaderType();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual Type get_ParameterType();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual Type get_CommandType();
    public sealed virtual Type get_TransactionType();
    [CompilerGeneratedAttribute]
public Type get_ClientDecimalType();
    [CompilerGeneratedAttribute]
public Func`2<object, string> get_ClientDecimalToStringConverter();
    [CompilerGeneratedAttribute]
public MappingSchema get_MappingSchema();
    internal bool get_SupportsBulkCopy();
    [CompilerGeneratedAttribute]
internal Func`2<DbConnection, ClickHouseBulkCopy> get_ClientBulkCopyCreator();
    [CompilerGeneratedAttribute]
internal Func`3<DbConnection, string, ClickHouseColumnWriter> get_OctonicaCreateWriter();
    [CompilerGeneratedAttribute]
internal Func`4<DbConnection, string, CancellationToken, Task`1<ClickHouseColumnWriter>> get_OctonicaCreateWriterAsync();
    [CompilerGeneratedAttribute]
internal Func`2<Type, ClickHouseColumnSettings> get_OctonicaColumnSettings();
    [CompilerGeneratedAttribute]
internal string get_GetDateTimeOffsetReaderMethod();
    [CompilerGeneratedAttribute]
internal string get_GetIPAddressReaderMethod();
    [CompilerGeneratedAttribute]
internal string get_GetUInt16ReaderMethod();
    [CompilerGeneratedAttribute]
internal string get_GetUInt32ReaderMethod();
    [CompilerGeneratedAttribute]
internal string get_GetUInt64ReaderMethod();
    [CompilerGeneratedAttribute]
internal string get_GetSByteReaderMethod();
    [CompilerGeneratedAttribute]
internal string get_GetBigIntegerReaderMethod();
    [CompilerGeneratedAttribute]
internal string get_GetDateOnlyReaderMethod();
    [CompilerGeneratedAttribute]
internal string get_GetMySqlDecimalReaderMethod();
    [CompilerGeneratedAttribute]
internal Func`2<string, ClickHouseConnectionStringBuilder> get_CreateClientConnectionStringBuilder();
    [CompilerGeneratedAttribute]
internal Func`2<string, DbConnection> get_CreateConnection();
    [NullableContextAttribute("1")]
public static ClickHouseProviderAdapter GetInstance(ClickHouseProvider provider);
    [NullableContextAttribute("1")]
private static ClickHouseProviderAdapter CreateClientAdapter();
    [NullableContextAttribute("1")]
private static ClickHouseProviderAdapter CreateOctonicaAdapter();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.DataProvider.ClickHouse.ClickHouseRetryPolicy : RetryPolicyBase {
    [NullableAttribute("2")]
private ICollection`1<int> _additionalErrorNumbers;
    public ClickHouseRetryPolicy(int maxRetryCount);
    [NullableContextAttribute("2")]
public ClickHouseRetryPolicy(int maxRetryCount, TimeSpan maxRetryDelay, double randomFactor, double exponentialBase, TimeSpan coefficient, ICollection`1<int> errorNumbersToAdd);
    protected virtual bool ShouldRetryOn(Exception exception);
    protected virtual Nullable`1<TimeSpan> GetNextDelay(Exception lastException);
    private static bool IsMemoryOptimizedError(Exception exception);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.DataProvider.ClickHouse.ClickHouseSchemaProvider : SchemaProviderBase {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static IReadOnlyDictionary`2<string, ValueTuple`2<DataType, Type>> _typeMap;
    private static ClickHouseSchemaProvider();
    protected virtual List`1<ColumnInfo> GetColumns(DataConnection dataConnection, GetSchemaOptions options);
    protected virtual IReadOnlyCollection`1<ForeignKeyInfo> GetForeignKeys(DataConnection dataConnection, IEnumerable`1<TableSchema> tables, GetSchemaOptions options);
    protected virtual IReadOnlyCollection`1<PrimaryKeyInfo> GetPrimaryKeys(DataConnection dataConnection, IEnumerable`1<TableSchema> tables, GetSchemaOptions options);
    protected virtual List`1<TableInfo> GetTables(DataConnection dataConnection, GetSchemaOptions options);
    protected virtual string GetDatabaseName(DataConnection dbConnection);
    protected virtual string GetDataSourceName(DataConnection dbConnection);
    [NullableContextAttribute("2")]
protected virtual string GetProviderSpecificTypeNamespace();
    protected virtual List`1<DataTypeInfo> GetDataTypes(DataConnection dataConnection);
    [NullableContextAttribute("2")]
protected virtual string GetDbType(GetSchemaOptions options, string columnType, DataTypeInfo dataType, Nullable`1<int> length, Nullable`1<int> precision, Nullable`1<int> scale, string udtCatalog, string udtSchema, string udtName);
    [NullableContextAttribute("2")]
protected virtual DataTypeInfo GetDataType(string typeName, Nullable`1<DataType> dataType, GetSchemaOptions options);
    [NullableContextAttribute("2")]
protected virtual DataType GetDataType(string dataType, string columnType, Nullable`1<int> length, Nullable`1<int> precision, Nullable`1<int> scale);
    [NullableContextAttribute("2")]
protected virtual Type GetSystemType(string dataType, string columnType, DataTypeInfo dataTypeInfo, Nullable`1<int> length, Nullable`1<int> precision, Nullable`1<int> scale, GetSchemaOptions options);
    private static ValueTuple`3<string, bool, bool> PreParseTypeName(string type);
    [NullableContextAttribute("2")]
private static ValueTuple`2<DataType, Type> GetTypeMapping(string dataType, Nullable`1<int> precision);
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class LinqToDB.DataProvider.ClickHouse.ClickHouseSpecificQueryable`1 : DatabaseSpecificQueryable`1<TSource> {
    [NullableContextAttribute("1")]
public ClickHouseSpecificQueryable`1(IQueryable`1<TSource> queryable);
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class LinqToDB.DataProvider.ClickHouse.ClickHouseSpecificTable`1 : DatabaseSpecificTable`1<TSource> {
    [NullableContextAttribute("1")]
public ClickHouseSpecificTable`1(ITable`1<TSource> table);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.DataProvider.ClickHouse.ClickHouseSqlBuilder : BasicSqlBuilder {
    private static char IDENTIFIER_QUOTE;
    private bool _disableTableAliases;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private HashSet`1<SqlQueryExtension> _finalHints;
    protected string UpdateKeyword { get; }
    protected string UpdateSetKeyword { get; }
    protected bool IsCteColumnListSupported { get; }
    protected bool IsValuesSyntaxSupported { get; }
    public ClickHouseSqlBuilder(IDataProvider provider, MappingSchema mappingSchema, DataOptions dataOptions, ISqlOptimizer sqlOptimizer, SqlProviderFlags sqlProviderFlags);
    private ClickHouseSqlBuilder(ClickHouseSqlBuilder parentBuilder);
    protected virtual ISqlBuilder CreateSqlBuilder();
    protected virtual void BuildMergeStatement(SqlMergeStatement merge);
    protected virtual void BuildParameter(SqlParameter parameter);
    public virtual StringBuilder BuildObjectName(StringBuilder sb, SqlObjectName name, ConvertType objectType, bool escape, TableOptions tableOptions, bool withoutSuffix);
    public virtual StringBuilder Convert(StringBuilder sb, string value, ConvertType convertType);
    private static bool IsValidIdentifier(string identifier);
    private static void EscapeIdentifier(StringBuilder sb, string value);
    protected virtual void BuildDataTypeFromDataType(SqlDataType type, bool forCreateTable, bool canBeNull);
    protected virtual void BuildCreateTableNullAttribute(SqlField field, DefaultNullable defaultNullable);
    private static void BuildTypeName(StringBuilder sb, DbDataType type, bool nullable);
    protected virtual void BuildEndCreateTableStatement(SqlCreateTableStatement createTable);
    protected virtual void BuildCreateTablePrimaryKey(SqlCreateTableStatement createTable, string pkName, IEnumerable`1<string> fieldNames);
    protected virtual void BuildCreateTableCommand(SqlTable table);
    protected virtual void BuildDropTableStatement(SqlDropTableStatement dropTable);
    protected virtual void BuildTruncateTable(SqlTruncateTableStatement truncateTable);
    protected virtual void BuildDeleteQuery(SqlDeleteStatement deleteStatement);
    protected virtual void BuildDeleteFromClause(SqlDeleteStatement deleteStatement);
    protected virtual void BuildDeleteClause(SqlDeleteStatement deleteStatement);
    protected virtual void BuildAlterDeleteClause(SqlDeleteStatement deleteStatement);
    protected virtual string get_UpdateKeyword();
    protected virtual string get_UpdateSetKeyword();
    protected virtual void BuildUpdateQuery(SqlStatement statement, SelectQuery selectQuery, SqlUpdateClause updateClause);
    protected virtual void BuildUpdateWhereClause(SelectQuery selectQuery);
    protected virtual void BuildUpdateTableName(SelectQuery selectQuery, SqlUpdateClause updateClause);
    protected virtual bool BuildFieldTableAlias(SqlField field);
    protected virtual void BuildOffsetLimit(SelectQuery selectQuery);
    protected virtual bool get_IsCteColumnListSupported();
    protected virtual void BuildCteBody(SelectQuery selectQuery);
    protected virtual void BuildInsertQuery(SqlStatement statement, SqlInsertClause insertClause, bool addAlias);
    protected virtual void BuildIsDistinctPredicate(IsDistinct expr);
    protected virtual bool get_IsValuesSyntaxSupported();
    protected virtual void BuildSetOperation(SetOperation operation, StringBuilder sb);
    [NullableContextAttribute("2")]
protected virtual void BuildColumnExpression(SelectQuery selectQuery, ISqlExpression expr, string alias, Boolean& addAlias);
    protected virtual void BuildTableExtensions(SqlTable table, string alias);
    protected virtual bool BuildJoinType(SqlJoinedTable join, SqlSearchCondition condition);
    protected virtual void BuildQueryExtensions(SqlStatement statement);
    protected virtual void BuildFromExtensions(SelectQuery selectQuery);
    protected virtual void BuildExpressionForOrderBy(ISqlExpression expr);
    protected virtual void MergeSqlBuilderData(BasicSqlBuilder sqlBuilder);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <BuildFromExtensions>b__45_0(SqlTableSource t);
    [CompilerGeneratedAttribute]
private bool <BuildFromExtensions>g__HasFinal|45_1(SqlQueryExtension ext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.DataProvider.ClickHouse.ClickHouseSqlOptimizer : BasicSqlOptimizer {
    private DataOptions _dataOptions;
    [NullableAttribute("2")]
private ClickHouseOptions _providerOptions;
    private static String[] ClickHouseLikeCharactersToEscape;
    private static IReadOnlyDictionary`2<DataType, string> ClickHouseConvertFunctions;
    public ClickHouseOptions ProviderOptions { get; }
    public bool LikeIsEscapeSupported { get; }
    public string LikeEscapeCharacter { get; }
    public String[] LikeCharactersToEscape { get; }
    public ClickHouseSqlOptimizer(SqlProviderFlags sqlProviderFlags, DataOptions dataOptions);
    private static ClickHouseSqlOptimizer();
    public ClickHouseOptions get_ProviderOptions();
    public virtual SqlStatement FinalizeStatement(SqlStatement statement, EvaluationContext context, DataOptions dataOptions);
    private static SqlStatement DisableParameters(SqlStatement statement);
    private static SqlStatement FixCteAliases(SqlStatement statement);
    public virtual bool get_LikeIsEscapeSupported();
    public virtual string get_LikeEscapeCharacter();
    public virtual String[] get_LikeCharactersToEscape();
    public virtual ISqlPredicate ConvertLikePredicate(MappingSchema mappingSchema, Like predicate, EvaluationContext context);
    public virtual ISqlPredicate ConvertSearchStringPredicate(SearchString predicate, ConvertVisitor`1<RunOptimizationContext> visitor);
    public virtual ISqlExpression ConvertExpressionImpl(ISqlExpression expression, ConvertVisitor`1<RunOptimizationContext> visitor);
    protected virtual ISqlExpression ConvertFunction(SqlFunction func);
    [CompilerGeneratedAttribute]
internal static SqlFunction <ConvertExpressionImpl>g__ConvertFunc|17_0(SqlFunction func);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class LinqToDB.DataProvider.ClickHouse.ClickHouseTools : object {
    private static Lazy`1<IDataProvider> _octonicaDataProvider;
    private static Lazy`1<IDataProvider> _clientDataProvider;
    private static Lazy`1<IDataProvider> _mysqlDataProvider;
    [ObsoleteAttribute("Use ClickHouseOptions.Default.BulkCopyType instead.")]
public static BulkCopyType DefaultBulkCopyType { get; public set; }
    private static ClickHouseTools();
    [ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
public static IClickHouseSpecificTable`1<TSource> AsClickHouse(ITable`1<TSource> table);
    [ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
public static IClickHouseSpecificQueryable`1<TSource> AsClickHouse(IQueryable`1<TSource> source);
    internal static IDataProvider ProviderDetector(ConnectionOptions options);
    public static IDataProvider GetDataProvider(ClickHouseProvider provider);
    public static DataConnection CreateDataConnection(string connectionString, ClickHouseProvider provider);
    public static DataConnection CreateDataConnection(DbConnection connection, ClickHouseProvider provider);
    public static DataConnection CreateDataConnection(DbTransaction transaction, ClickHouseProvider provider);
    public static BulkCopyType get_DefaultBulkCopyType();
    public static void set_DefaultBulkCopyType(BulkCopyType value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class LinqToDB.DataProvider.ClickHouse.ClickHouseTransientExceptionDetector : object {
    private static ConcurrentDictionary`2<Type, Func`2<Exception, IEnumerable`1<int>>> _exceptionTypes;
    private static ClickHouseTransientExceptionDetector();
    internal static void RegisterExceptionType(Type type, Func`2<Exception, IEnumerable`1<int>> errrorNumbersGetter);
    public static bool IsHandled(Exception ex, IEnumerable`1& errorNumbers);
    public static bool ShouldRetryOn(Exception ex);
}
public interface LinqToDB.DataProvider.ClickHouse.IClickHouseSpecificQueryable`1 {
}
public interface LinqToDB.DataProvider.ClickHouse.IClickHouseSpecificTable`1 {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class LinqToDB.DataProvider.DatabaseSpecificQueryable`1 : object {
    private IQueryable`1<TSource> _queryable;
    public Expression Expression { get; }
    public Type ElementType { get; }
    public IQueryProvider Provider { get; }
    protected DatabaseSpecificQueryable`1(IQueryable`1<TSource> queryable);
    public sealed virtual IEnumerator`1<TSource> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual Expression get_Expression();
    public sealed virtual Type get_ElementType();
    public sealed virtual IQueryProvider get_Provider();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class LinqToDB.DataProvider.DatabaseSpecificTable`1 : object {
    private ITable`1<TSource> _table;
    public Expression Expression { get; }
    public string SqlText { get; }
    public IDataContext DataContext { get; }
    public Type ElementType { get; }
    public IQueryProvider Provider { get; }
    [NullableAttribute("2")]
public string ServerName { get; }
    [NullableAttribute("2")]
public string DatabaseName { get; }
    [NullableAttribute("2")]
public string SchemaName { get; }
    public string TableName { get; }
    public TableOptions TableOptions { get; }
    [NullableAttribute("2")]
public string TableID { get; }
    protected DatabaseSpecificTable`1(ITable`1<TSource> table);
    public sealed virtual IEnumerator`1<TSource> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual Expression get_Expression();
    public sealed virtual string get_SqlText();
    public sealed virtual IDataContext get_DataContext();
    public sealed virtual Type get_ElementType();
    public sealed virtual IQueryProvider get_Provider();
    public sealed virtual IQueryable CreateQuery(Expression expression);
    public sealed virtual IQueryable`1<TElement> CreateQuery(Expression expression);
    public sealed virtual object Execute(Expression expression);
    public sealed virtual TResult Execute(Expression expression);
    public sealed virtual Task`1<IAsyncEnumerable`1<TResult>> ExecuteAsyncEnumerable(Expression expression, CancellationToken cancellationToken);
    public sealed virtual Task`1<TResult> ExecuteAsync(Expression expression, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
public sealed virtual string get_ServerName();
    [NullableContextAttribute("2")]
public sealed virtual string get_DatabaseName();
    [NullableContextAttribute("2")]
public sealed virtual string get_SchemaName();
    public sealed virtual string get_TableName();
    public sealed virtual TableOptions get_TableOptions();
    [NullableContextAttribute("2")]
public sealed virtual string get_TableID();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class LinqToDB.DataProvider.DataProviderBase : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private MappingSchema <MappingSchema>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlProviderFlags <SqlProviderFlags>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private static Func`3<IDataProvider, DbConnection, DbConnection> <OnConnectionCreated>k__BackingField;
    private Nullable`1<int> _id;
    public ConcurrentDictionary`2<ReaderInfo, Expression> ReaderExpressions;
    public string Name { get; }
    [NullableAttribute("2")]
public string ConnectionNamespace { get; }
    public Type DataReaderType { get; }
    public MappingSchema MappingSchema { get; }
    public SqlProviderFlags SqlProviderFlags { get; }
    public TableOptions SupportedTableOptions { get; }
    public bool TransactionsSupported { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static Func`3<IDataProvider, DbConnection, DbConnection> OnConnectionCreated { get; public set; }
    public int ID { get; }
    protected DataProviderBase(string name, MappingSchema mappingSchema);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [NullableContextAttribute("2")]
public abstract virtual string get_ConnectionNamespace();
    public abstract virtual Type get_DataReaderType();
    [CompilerGeneratedAttribute]
public virtual MappingSchema get_MappingSchema();
    [CompilerGeneratedAttribute]
public sealed virtual SqlProviderFlags get_SqlProviderFlags();
    public abstract virtual TableOptions get_SupportedTableOptions();
    public virtual bool get_TransactionsSupported();
    [CompilerGeneratedAttribute]
public static Func`3<IDataProvider, DbConnection, DbConnection> get_OnConnectionCreated();
    [CompilerGeneratedAttribute]
public static void set_OnConnectionCreated(Func`3<IDataProvider, DbConnection, DbConnection> value);
    public virtual void InitContext(IDataContext dataContext);
    public sealed virtual int get_ID();
    public sealed virtual DbConnection CreateConnection(string connectionString);
    protected abstract virtual DbConnection CreateConnectionInternal(string connectionString);
    public abstract virtual ISqlBuilder CreateSqlBuilder(MappingSchema mappingSchema, DataOptions dataOptions);
    public abstract virtual ISqlOptimizer GetSqlOptimizer(DataOptions dataOptions);
    public virtual DbCommand InitCommand(DataConnection dataConnection, DbCommand command, CommandType commandType, string commandText, DataParameter[] parameters, bool withParameters);
    public virtual void ClearCommandParameters(DbCommand command);
    public virtual void DisposeCommand(DbCommand command);
    public virtual ValueTask DisposeCommandAsync(DbCommand command);
    public virtual object GetConnectionInfo(DataConnection dataConnection, string parameterName);
    public virtual CommandBehavior GetCommandBehavior(CommandBehavior commandBehavior);
    public virtual IExecutionScope ExecuteScope(DataConnection dataConnection);
    protected void SetCharField(string dataTypeName, Expression`1<Func`3<DbDataReader, int, string>> expr);
    protected void SetCharFieldToType(string dataTypeName, Expression`1<Func`3<DbDataReader, int, string>> expr);
    [NullableContextAttribute("2")]
protected void SetField(Expression`1<Func`3<TP, int, T>> expr);
    protected void SetField(string dataTypeName, Expression`1<Func`3<TP, int, T>> expr);
    protected void SetField(string dataTypeName, Type fieldType, Expression`1<Func`3<TP, int, T>> expr);
    [NullableContextAttribute("2")]
protected void SetProviderField(Expression`1<Func`3<TP, int, T>> expr);
    [NullableContextAttribute("2")]
protected void SetProviderField(Expression`1<Func`3<TP, int, T>> expr);
    [NullableContextAttribute("2")]
protected void SetToType(Expression`1<Func`3<TP, int, T>> expr);
    [NullableContextAttribute("2")]
protected void SetToType(string dataTypeName, Expression`1<Func`3<TP, int, T>> expr);
    [NullableContextAttribute("2")]
protected virtual string NormalizeTypeName(string typeName);
    public virtual Expression GetReaderExpression(DbDataReader reader, int idx, Expression readerExpression, Type toType);
    [NullableContextAttribute("2")]
protected bool FindExpression(ReaderInfo info, Expression& expr);
    public virtual Nullable`1<bool> IsDBNullAllowed(DataOptions options, DbDataReader reader, int idx);
    public virtual void SetParameter(DataConnection dataConnection, DbParameter parameter, string name, DbDataType dataType, object value);
    public virtual Type ConvertParameterType(Type type, DbDataType dataType);
    public abstract virtual ISchemaProvider GetSchemaProvider();
    protected virtual void SetParameterType(DataConnection dataConnection, DbParameter parameter, DbDataType dataType);
    public virtual BulkCopyRowsCopied BulkCopy(DataOptions options, ITable`1<T> table, IEnumerable`1<T> source);
    public virtual Task`1<BulkCopyRowsCopied> BulkCopyAsync(DataOptions options, ITable`1<T> table, IEnumerable`1<T> source, CancellationToken cancellationToken);
    public virtual Task`1<BulkCopyRowsCopied> BulkCopyAsync(DataOptions options, ITable`1<T> table, IAsyncEnumerable`1<T> source, CancellationToken cancellationToken);
    public virtual IQueryParametersNormalizer GetQueryParameterNormalizer();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class LinqToDB.DataProvider.DataProviderOptions`1 : object {
    [CompilerGeneratedAttribute]
private BulkCopyType <BulkCopyType>k__BackingField;
    private Nullable`1<int> _configurationID;
    [CompilerGeneratedAttribute]
private static T <Default>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public BulkCopyType BulkCopyType { get; public set; }
    private int LinqToDB.Common.Internal.IConfigurationID.ConfigurationID { get; }
    public static T Default { get; public set; }
    protected DataProviderOptions`1(BulkCopyType BulkCopyType);
    protected DataProviderOptions`1(DataProviderOptions`1<T> original);
    private static DataProviderOptions`1();
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public BulkCopyType get_BulkCopyType();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_BulkCopyType(BulkCopyType value);
    private sealed virtual override int LinqToDB.Common.Internal.IConfigurationID.get_ConfigurationID();
    protected abstract virtual IdentifierBuilder CreateID(IdentifierBuilder builder);
    [CompilerGeneratedAttribute]
public static T get_Default();
    [CompilerGeneratedAttribute]
public static void set_Default(T value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(DataProviderOptions`1<T> left, DataProviderOptions`1<T> right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(DataProviderOptions`1<T> left, DataProviderOptions`1<T> right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public virtual bool Equals(DataProviderOptions`1<T> other);
    [CompilerGeneratedAttribute]
public abstract virtual DataProviderOptions`1<T> <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(BulkCopyType& BulkCopyType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class LinqToDB.DataProvider.DataTools : object {
    private static Char[] _escapes;
    public static Expression`1<Func`3<DbDataReader, int, string>> GetCharExpression;
    private static DataTools();
    [NullableContextAttribute("2")]
public static string EscapeUnterminatedBracket(string str);
    public static void ConvertStringToSql(StringBuilder stringBuilder, string plusOperator, string startPrefix, Action`2<StringBuilder, int> appendConversion, string value, Char[] extraEscapes);
    public static void ConvertCharToSql(StringBuilder stringBuilder, string startString, Action`2<StringBuilder, int> appendConversion, char value);
    private static string GetCharFromString(string str);
    internal static void CreateFileDatabase(string databaseName, bool deleteIfExists, string extension, Action`1<string> createDatabase);
    internal static void DropFileDatabase(string databaseName, string extension);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.DataProvider.DB2.DB2BulkCopy : BasicBulkCopy {
    private DB2DataProvider _provider;
    protected int MaxParameters { get; }
    protected int MaxSqlLength { get; }
    public DB2BulkCopy(DB2DataProvider provider);
    protected virtual int get_MaxParameters();
    protected virtual int get_MaxSqlLength();
    protected virtual BulkCopyRowsCopied ProviderSpecificCopy(ITable`1<T> table, DataOptions options, IEnumerable`1<T> source);
    protected virtual Task`1<BulkCopyRowsCopied> ProviderSpecificCopyAsync(ITable`1<T> table, DataOptions options, IEnumerable`1<T> source, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("LinqToDB.DataProvider.DB2.DB2BulkCopy/<ProviderSpecificCopyAsync>d__8`1")]
protected virtual Task`1<BulkCopyRowsCopied> ProviderSpecificCopyAsync(ITable`1<T> table, DataOptions options, IAsyncEnumerable`1<T> source, CancellationToken cancellationToken);
    protected virtual BulkCopyRowsCopied MultipleRowsCopy(ITable`1<T> table, DataOptions options, IEnumerable`1<T> source);
    protected virtual Task`1<BulkCopyRowsCopied> MultipleRowsCopyAsync(ITable`1<T> table, DataOptions options, IEnumerable`1<T> source, CancellationToken cancellationToken);
    protected virtual Task`1<BulkCopyRowsCopied> MultipleRowsCopyAsync(ITable`1<T> table, DataOptions options, IAsyncEnumerable`1<T> source, CancellationToken cancellationToken);
}
public static class LinqToDB.DataProvider.DB2.DB2BulkCopyShared : object {
    [NullableContextAttribute("1")]
public static BulkCopyRowsCopied ProviderSpecificCopyImpl(ITable`1<T> table, BulkCopyOptions options, IEnumerable`1<T> source, DataConnection dataConnection, DbConnection connection, BulkCopyAdapter bulkCopy, Action`3<DataConnection, Func`1<string>, Func`1<int>> traceAction);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class LinqToDB.DataProvider.DB2.DB2DataProvider : DynamicDataProviderBase`1<DB2ProviderAdapter> {
    [CompilerGeneratedAttribute]
private DB2Version <Version>k__BackingField;
    private DB2SqlOptimizer _sqlOptimizer;
    [NullableAttribute("2")]
private DB2BulkCopy _bulkCopy;
    public DB2Version Version { get; }
    public TableOptions SupportedTableOptions { get; }
    protected DB2DataProvider(string name, DB2Version version);
    [CompilerGeneratedAttribute]
public DB2Version get_Version();
    private static MappingSchema GetMappingSchema(DB2Version version);
    public virtual ISchemaProvider GetSchemaProvider();
    public virtual TableOptions get_SupportedTableOptions();
    public virtual ISqlBuilder CreateSqlBuilder(MappingSchema mappingSchema, DataOptions dataOptions);
    public virtual ISqlOptimizer GetSqlOptimizer(DataOptions dataOptions);
    public virtual void SetParameter(DataConnection dataConnection, DbParameter parameter, string name, DbDataType dataType, object value);
    protected virtual void SetParameterType(DataConnection dataConnection, DbParameter parameter, DbDataType dataType);
    public virtual BulkCopyRowsCopied BulkCopy(DataOptions options, ITable`1<T> table, IEnumerable`1<T> source);
    public virtual Task`1<BulkCopyRowsCopied> BulkCopyAsync(DataOptions options, ITable`1<T> table, IEnumerable`1<T> source, CancellationToken cancellationToken);
    public virtual Task`1<BulkCopyRowsCopied> BulkCopyAsync(DataOptions options, ITable`1<T> table, IAsyncEnumerable`1<T> source, CancellationToken cancellationToken);
}
[ExtensionAttribute]
internal static class LinqToDB.DataProvider.DB2.DB2Extensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static string ToString(DbDataReader reader, int i);
}
[UsedImplicitlyAttribute]
internal class LinqToDB.DataProvider.DB2.DB2Factory : object {
    [NullableContextAttribute("1")]
private sealed virtual override IDataProvider LinqToDB.DataProvider.IDataProviderFactory.GetDataProvider(IEnumerable`1<NamedValue> attributes);
}
public enum LinqToDB.DataProvider.DB2.DB2IdentifierQuoteMode : Enum {
    public int value__;
    public static DB2IdentifierQuoteMode None;
    public static DB2IdentifierQuoteMode Quote;
    public static DB2IdentifierQuoteMode Auto;
}
internal class LinqToDB.DataProvider.DB2.DB2LUWDataProvider : DB2DataProvider {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.DataProvider.DB2.DB2LUWSchemaProvider : SchemaProviderBase {
    private static IReadOnlyList`1<string> _tableTypes;
    private DB2DataProvider _provider;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private HashSet`1<string> _systemSchemas;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <CurrentSchema>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<ColumnInfo> _columns;
    [NullableAttribute("2")]
protected string CurrentSchema { get; private set; }
    public DB2LUWSchemaProvider(DB2DataProvider provider);
    private static DB2LUWSchemaProvider();
    protected virtual List`1<DataTypeInfo> GetDataTypes(DataConnection dataConnection);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected string get_CurrentSchema();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_CurrentSchema(string value);
    protected virtual List`1<TableInfo> GetTables(DataConnection dataConnection, GetSchemaOptions options);
    protected void LoadCurrentSchema(DataConnection dataConnection);
    protected virtual IReadOnlyCollection`1<PrimaryKeyInfo> GetPrimaryKeys(DataConnection dataConnection, IEnumerable`1<TableSchema> tables, GetSchemaOptions options);
    protected virtual List`1<ColumnInfo> GetColumns(DataConnection dataConnection, GetSchemaOptions options);
    private static void SetColumnParameters(ColumnInfo ci, Nullable`1<int> size, Nullable`1<int> scale);
    protected virtual IReadOnlyCollection`1<ForeignKeyInfo> GetForeignKeys(DataConnection dataConnection, IEnumerable`1<TableSchema> tables, GetSchemaOptions options);
    [NullableContextAttribute("2")]
protected virtual string GetDbType(GetSchemaOptions options, string columnType, DataTypeInfo dataType, Nullable`1<int> length, Nullable`1<int> precision, Nullable`1<int> scale, string udtCatalog, string udtSchema, string udtName);
    [NullableContextAttribute("2")]
protected virtual DataType GetDataType(string dataType, string columnType, Nullable`1<int> length, Nullable`1<int> precision, Nullable`1<int> scale);
    protected virtual string GetProviderSpecificTypeNamespace();
    [NullableContextAttribute("2")]
protected virtual string GetProviderSpecificType(string dataType);
    protected virtual string GetDataSourceName(DataConnection dbConnection);
    protected virtual List`1<ProcedureInfo> GetProcedures(DataConnection dataConnection, GetSchemaOptions options);
    protected virtual List`1<ProcedureParameterInfo> GetProcedureParameters(DataConnection dataConnection, IEnumerable`1<ProcedureInfo> procedures, GetSchemaOptions options);
    protected string GetSchemaFilter(string schemaNameField);
    protected virtual string BuildTableFunctionLoadTableSchemaCommand(ProcedureSchema procedure, string commandText);
    protected virtual List`1<ColumnSchema> GetProcedureResultColumns(DataTable resultTable, GetSchemaOptions options);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <GetProcedures>b__21_1(ProcedureInfo p);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.DataProvider.DB2.DB2LUWSqlBuilder : DB2SqlBuilderBase {
    protected DB2Version Version { get; }
    public DB2LUWSqlBuilder(IDataProvider provider, MappingSchema mappingSchema, DataOptions dataOptions, ISqlOptimizer sqlOptimizer, SqlProviderFlags sqlProviderFlags);
    private DB2LUWSqlBuilder(BasicSqlBuilder parentBuilder);
    protected virtual ISqlBuilder CreateSqlBuilder();
    protected virtual DB2Version get_Version();
    protected virtual string GetPhysicalTableName(ISqlTableSource table, string alias, bool ignoreTableExpression, string defaultDatabaseName, bool withoutSuffix);
    public virtual StringBuilder BuildObjectName(StringBuilder sb, SqlObjectName name, ConvertType objectType, bool escape, TableOptions tableOptions, bool withoutSuffix);
    protected virtual void BuildDataTypeFromDataType(SqlDataType type, bool forCreateTable, bool canBeNull);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.DataProvider.DB2.DB2MappingSchema : LockedMappingSchema {
    private static string DATETIME_FORMAT;
    private static string TIMESTAMP0_FORMAT;
    private static string TIMESTAMP1_FORMAT;
    private static string TIMESTAMP2_FORMAT;
    private static string TIMESTAMP3_FORMAT;
    private static string TIMESTAMP4_FORMAT;
    private static string TIMESTAMP5_FORMAT;
    private static string TIMESTAMP6_FORMAT;
    private static string TIMESTAMP7_FORMAT;
    private static String[] DateParseFormats;
    private static Action`2<StringBuilder, int> _appendConversionAction;
    internal static DB2MappingSchema Instance;
    private static DB2MappingSchema();
    private static DateTime ParseDateTime(string value);
    private static void ConvertTimeToSql(StringBuilder stringBuilder, TimeSpan time);
    private static string GetTimestampFormat(SqlDataType type);
    private static void ConvertDateTimeToSql(StringBuilder stringBuilder, SqlDataType type, DateTime value);
    private static void ConvertBinaryToSql(StringBuilder stringBuilder, Byte[] value);
    private static void AppendConversion(StringBuilder stringBuilder, int value);
    private static void ConvertStringToSql(StringBuilder stringBuilder, string value);
    private static void ConvertCharToSql(StringBuilder stringBuilder, char value);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class LinqToDB.DataProvider.DB2.DB2Options : DataProviderOptions`1<DB2Options> {
    [CompilerGeneratedAttribute]
private DB2IdentifierQuoteMode <IdentifierQuoteMode>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public DB2IdentifierQuoteMode IdentifierQuoteMode { get; public set; }
    public DB2Options(BulkCopyType BulkCopyType, DB2IdentifierQuoteMode IdentifierQuoteMode);
    private DB2Options(DB2Options original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public DB2IdentifierQuoteMode get_IdentifierQuoteMode();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IdentifierQuoteMode(DB2IdentifierQuoteMode value);
    protected virtual IdentifierBuilder CreateID(IdentifierBuilder builder);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(DB2Options other);
    public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(DB2Options left, DB2Options right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(DB2Options left, DB2Options right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(DataProviderOptions`1<DB2Options> other);
    [CompilerGeneratedAttribute]
public virtual DataProviderOptions`1<DB2Options> <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(BulkCopyType& BulkCopyType, DB2IdentifierQuoteMode& IdentifierQuoteMode);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.DataProvider.DB2.DB2ProviderAdapter : object {
    public static string ProviderFactoryName;
    public static string TypesNamespace;
    public static string NetFxClientNamespace;
    public static string CoreClientNamespace;
    public static string AssemblyName;
    public static string ClientNamespace;
    public static string AssemblyNameOld;
    public static string ClientNamespaceOld;
    private static Lazy`1<DB2ProviderAdapter> _lazy;
    [CompilerGeneratedAttribute]
private Type <ConnectionType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <DataReaderType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ParameterType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <CommandType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <TransactionType>k__BackingField;
    [CompilerGeneratedAttribute]
private MappingSchema <MappingSchema>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Type <DB2DateTimeType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <DB2BinaryType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <DB2BlobType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <DB2ClobType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <DB2DateType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <DB2DecimalType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <DB2DecimalFloatType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <DB2DoubleType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <DB2Int16Type>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <DB2Int32Type>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <DB2Int64Type>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <DB2RealType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <DB2Real370Type>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <DB2RowIdType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <DB2StringType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <DB2TimeType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <DB2TimeStampType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <DB2XmlType>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Type <DB2TimeSpanType>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`2<DbParameter, DB2Type> <SetDbType>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<DbParameter, DB2Type> <GetDbType>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<string, DB2Connection> <CreateConnection>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<object, bool> <IsDB2BinaryNull>k__BackingField;
    [CompilerGeneratedAttribute]
private BulkCopyAdapter <BulkCopy>k__BackingField;
    public static DB2ProviderAdapter Instance { get; }
    public Type ConnectionType { get; }
    public Type DataReaderType { get; }
    public Type ParameterType { get; }
    public Type CommandType { get; }
    public Type TransactionType { get; }
    public MappingSchema MappingSchema { get; }
    [NullableAttribute("2")]
public Type DB2DateTimeType { get; }
    public Type DB2BinaryType { get; }
    public Type DB2BlobType { get; }
    public Type DB2ClobType { get; }
    public Type DB2DateType { get; }
    public Type DB2DecimalType { get; }
    public Type DB2DecimalFloatType { get; }
    public Type DB2DoubleType { get; }
    public Type DB2Int16Type { get; }
    public Type DB2Int32Type { get; }
    public Type DB2Int64Type { get; }
    public Type DB2RealType { get; }
    public Type DB2Real370Type { get; }
    public Type DB2RowIdType { get; }
    public Type DB2StringType { get; }
    public Type DB2TimeType { get; }
    public Type DB2TimeStampType { get; }
    public Type DB2XmlType { get; }
    [NullableAttribute("2")]
public Type DB2TimeSpanType { get; }
    public string GetDB2Int64ReaderMethod { get; }
    public string GetDB2Int32ReaderMethod { get; }
    public string GetDB2Int16ReaderMethod { get; }
    public string GetDB2DecimalReaderMethod { get; }
    public string GetDB2DecimalFloatReaderMethod { get; }
    public string GetDB2RealReaderMethod { get; }
    public string GetDB2Real370ReaderMethod { get; }
    public string GetDB2DoubleReaderMethod { get; }
    public string GetDB2StringReaderMethod { get; }
    public string GetDB2ClobReaderMethod { get; }
    public string GetDB2BinaryReaderMethod { get; }
    public string GetDB2BlobReaderMethod { get; }
    public string GetDB2DateReaderMethod { get; }
    public string GetDB2TimeReaderMethod { get; }
    public string GetDB2TimeStampReaderMethod { get; }
    public string GetDB2XmlReaderMethod { get; }
    public string GetDB2RowIdReaderMethod { get; }
    [NullableAttribute("2")]
public string GetDB2DateTimeReaderMethod { get; }
    public string ProviderTypesNamespace { get; }
    public Action`2<DbParameter, DB2Type> SetDbType { get; }
    public Func`2<DbParameter, DB2Type> GetDbType { get; }
    public Func`2<string, DB2Connection> CreateConnection { get; }
    public Func`2<object, bool> IsDB2BinaryNull { get; }
    public BulkCopyAdapter BulkCopy { get; }
    private static DB2ProviderAdapter();
    public static DB2ProviderAdapter get_Instance();
    [CompilerGeneratedAttribute]
public sealed virtual Type get_ConnectionType();
    [CompilerGeneratedAttribute]
public sealed virtual Type get_DataReaderType();
    [CompilerGeneratedAttribute]
public sealed virtual Type get_ParameterType();
    [CompilerGeneratedAttribute]
public sealed virtual Type get_CommandType();
    [CompilerGeneratedAttribute]
public sealed virtual Type get_TransactionType();
    [CompilerGeneratedAttribute]
public MappingSchema get_MappingSchema();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Type get_DB2DateTimeType();
    [CompilerGeneratedAttribute]
public Type get_DB2BinaryType();
    [CompilerGeneratedAttribute]
public Type get_DB2BlobType();
    [CompilerGeneratedAttribute]
public Type get_DB2ClobType();
    [CompilerGeneratedAttribute]
public Type get_DB2DateType();
    [CompilerGeneratedAttribute]
public Type get_DB2DecimalType();
    [CompilerGeneratedAttribute]
public Type get_DB2DecimalFloatType();
    [CompilerGeneratedAttribute]
public Type get_DB2DoubleType();
    [CompilerGeneratedAttribute]
public Type get_DB2Int16Type();
    [CompilerGeneratedAttribute]
public Type get_DB2Int32Type();
    [CompilerGeneratedAttribute]
public Type get_DB2Int64Type();
    [CompilerGeneratedAttribute]
public Type get_DB2RealType();
    [CompilerGeneratedAttribute]
public Type get_DB2Real370Type();
    [CompilerGeneratedAttribute]
public Type get_DB2RowIdType();
    [CompilerGeneratedAttribute]
public Type get_DB2StringType();
    [CompilerGeneratedAttribute]
public Type get_DB2TimeType();
    [CompilerGeneratedAttribute]
public Type get_DB2TimeStampType();
    [CompilerGeneratedAttribute]
public Type get_DB2XmlType();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Type get_DB2TimeSpanType();
    public string get_GetDB2Int64ReaderMethod();
    public string get_GetDB2Int32ReaderMethod();
    public string get_GetDB2Int16ReaderMethod();
    public string get_GetDB2DecimalReaderMethod();
    public string get_GetDB2DecimalFloatReaderMethod();
    public string get_GetDB2RealReaderMethod();
    public string get_GetDB2Real370ReaderMethod();
    public string get_GetDB2DoubleReaderMethod();
    public string get_GetDB2StringReaderMethod();
    public string get_GetDB2ClobReaderMethod();
    public string get_GetDB2BinaryReaderMethod();
    public string get_GetDB2BlobReaderMethod();
    public string get_GetDB2DateReaderMethod();
    public string get_GetDB2TimeReaderMethod();
    public string get_GetDB2TimeStampReaderMethod();
    public string get_GetDB2XmlReaderMethod();
    public string get_GetDB2RowIdReaderMethod();
    [NullableContextAttribute("2")]
public string get_GetDB2DateTimeReaderMethod();
    public string get_ProviderTypesNamespace();
    [CompilerGeneratedAttribute]
public Action`2<DbParameter, DB2Type> get_SetDbType();
    [CompilerGeneratedAttribute]
public Func`2<DbParameter, DB2Type> get_GetDbType();
    [CompilerGeneratedAttribute]
public Func`2<string, DB2Connection> get_CreateConnection();
    [CompilerGeneratedAttribute]
public Func`2<object, bool> get_IsDB2BinaryNull();
    [CompilerGeneratedAttribute]
public BulkCopyAdapter get_BulkCopy();
    [CompilerGeneratedAttribute]
private Type <.ctor>g__LoadType|8_5(string typeName, DataType dataType, bool optional, bool obsolete, bool register, <>c__DisplayClass8_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal abstract class LinqToDB.DataProvider.DB2.DB2SqlBuilderBase : BasicSqlBuilder`1<DB2Options> {
    [NullableAttribute("2")]
private SqlField _identityField;
    public bool CteFirst { get; }
    protected DB2Version Version { get; }
    protected bool SupportsNullInColumn { get; }
    [ObsoleteAttribute("Use DB2Options.Default.IdentifierQuoteMode instead.")]
public static DB2IdentifierQuoteMode IdentifierQuoteMode { get; public set; }
    protected DB2SqlBuilderBase(IDataProvider provider, MappingSchema mappingSchema, DataOptions dataOptions, ISqlOptimizer sqlOptimizer, SqlProviderFlags sqlProviderFlags);
    protected DB2SqlBuilderBase(BasicSqlBuilder parentBuilder);
    public virtual bool get_CteFirst();
    protected abstract virtual DB2Version get_Version();
    protected virtual bool get_SupportsNullInColumn();
    public virtual int CommandCount(SqlStatement statement);
    protected virtual void BuildCommand(SqlStatement statement, int commandNumber);
    protected virtual void BuildTruncateTableStatement(SqlTruncateTableStatement truncateTable);
    protected virtual void BuildSql(int commandNumber, SqlStatement statement, StringBuilder sb, OptimizationContext optimizationContext, int indent, bool skipAlias);
    protected virtual void BuildGetIdentity(SqlInsertClause insertClause);
    protected virtual void BuildSelectClause(SelectQuery selectQuery);
    protected virtual string LimitFormat(SelectQuery selectQuery);
    protected virtual void BuildDataTypeFromDataType(SqlDataType type, bool forCreateTable, bool canBeNull);
    protected virtual void BuildCreateTableNullAttribute(SqlField field, DefaultNullable defaultNullable);
    public static DB2IdentifierQuoteMode get_IdentifierQuoteMode();
    public static void set_IdentifierQuoteMode(DB2IdentifierQuoteMode value);
    public virtual StringBuilder Convert(StringBuilder sb, string value, ConvertType convertType);
    protected virtual void BuildInsertOrUpdateQuery(SqlInsertOrUpdateStatement insertOrUpdate);
    protected virtual void BuildEmptyInsert(SqlInsertClause insertClause);
    protected virtual void BuildCreateTableIdentityAttribute1(SqlField field);
    public virtual StringBuilder BuildObjectName(StringBuilder sb, SqlObjectName name, ConvertType objectType, bool escape, TableOptions tableOptions, bool withoutSuffix);
    protected virtual string GetProviderTypeName(IDataContext dataContext, DbParameter parameter);
    protected virtual void BuildDropTableStatement(SqlDropTableStatement dropTable);
    protected virtual void BuildCreateTableCommand(SqlTable table);
    protected virtual void BuildStartCreateTableStatement(SqlCreateTableStatement createTable);
    protected virtual void BuildEndCreateTableStatement(SqlCreateTableStatement createTable);
    protected virtual void BuildCreateTablePrimaryKey(SqlCreateTableStatement createTable, string pkName, IEnumerable`1<string> fieldNames);
    protected virtual bool IsSqlValuesTableValueTypeRequired(SqlValuesTable source, IReadOnlyList`1<ISqlExpression[]> rows, int row, int column);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.DataProvider.DB2.DB2SqlOptimizer : BasicSqlOptimizer {
    private static String[] DB2LikeCharactersToEscape;
    public bool CanCompareSearchConditions { get; }
    public String[] LikeCharactersToEscape { get; }
    public DB2SqlOptimizer(SqlProviderFlags sqlProviderFlags);
    private static DB2SqlOptimizer();
    public virtual SqlStatement TransformStatement(SqlStatement statement, DataOptions dataOptions);
    public virtual bool get_CanCompareSearchConditions();
    public virtual String[] get_LikeCharactersToEscape();
    public virtual ISqlExpression ConvertExpressionImpl(ISqlExpression expression, ConvertVisitor`1<RunOptimizationContext> visitor);
    protected virtual ISqlExpression ConvertFunction(SqlFunction func);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PublicAPIAttribute]
public static class LinqToDB.DataProvider.DB2.DB2Tools : object {
    private static Lazy`1<IDataProvider> _db2DataProviderzOS;
    private static Lazy`1<IDataProvider> _db2DataProviderLUW;
    [CompilerGeneratedAttribute]
private static bool <AutoDetectProvider>k__BackingField;
    public static bool AutoDetectProvider { get; public set; }
    [ObsoleteAttribute("Use DB2Options.Default.BulkCopyType instead.")]
public static BulkCopyType DefaultBulkCopyType { get; public set; }
    private static DB2Tools();
    [CompilerGeneratedAttribute]
public static bool get_AutoDetectProvider();
    [CompilerGeneratedAttribute]
public static void set_AutoDetectProvider(bool value);
    internal static IDataProvider ProviderDetector(ConnectionOptions options);
    public static IDataProvider GetDataProvider(DB2Version version);
    public static void ResolveDB2(string path);
    public static void ResolveDB2(Assembly assembly);
    public static DataConnection CreateDataConnection(string connectionString, DB2Version version);
    public static DataConnection CreateDataConnection(DbConnection connection, DB2Version version);
    public static DataConnection CreateDataConnection(DbTransaction transaction, DB2Version version);
    public static BulkCopyType get_DefaultBulkCopyType();
    public static void set_DefaultBulkCopyType(BulkCopyType value);
}
public enum LinqToDB.DataProvider.DB2.DB2Version : Enum {
    public int value__;
    public static DB2Version LUW;
    public static DB2Version zOS;
}
internal class LinqToDB.DataProvider.DB2.DB2zOSDataProvider : DB2DataProvider {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.DataProvider.DB2.DB2zOSSchemaProvider : DB2LUWSchemaProvider {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<PrimaryKeyInfo> _primaryKeys;
    public DB2zOSSchemaProvider(DB2DataProvider provider);
    protected virtual List`1<DataTypeInfo> GetDataTypes(DataConnection dataConnection);
    protected virtual IReadOnlyCollection`1<PrimaryKeyInfo> GetPrimaryKeys(DataConnection dataConnection, IEnumerable`1<TableSchema> tables, GetSchemaOptions options);
    protected virtual List`1<ColumnInfo> GetColumns(DataConnection dataConnection, GetSchemaOptions options);
    private static void SetColumnParameters(ColumnInfo ci, Nullable`1<int> size, Nullable`1<int> scale);
    protected virtual IReadOnlyCollection`1<ForeignKeyInfo> GetForeignKeys(DataConnection dataConnection, IEnumerable`1<TableSchema> tables, GetSchemaOptions options);
    protected virtual List`1<ProcedureInfo> GetProcedures(DataConnection dataConnection, GetSchemaOptions options);
    protected virtual List`1<ProcedureParameterInfo> GetProcedureParameters(DataConnection dataConnection, IEnumerable`1<ProcedureInfo> procedures, GetSchemaOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.DataProvider.DB2.DB2zOSSqlBuilder : DB2SqlBuilderBase {
    protected DB2Version Version { get; }
    public DB2zOSSqlBuilder(IDataProvider provider, MappingSchema mappingSchema, DataOptions dataOptions, ISqlOptimizer sqlOptimizer, SqlProviderFlags sqlProviderFlags);
    private DB2zOSSqlBuilder(BasicSqlBuilder parentBuilder);
    protected virtual ISqlBuilder CreateSqlBuilder();
    protected virtual DB2Version get_Version();
    protected virtual void BuildDataTypeFromDataType(SqlDataType type, bool forCreateTable, bool canBeNull);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class LinqToDB.DataProvider.DynamicDataProviderBase`1 : DataProviderBase {
    protected static string GetProviderSpecificValueReaderMethod;
    [CompilerGeneratedAttribute]
private TProviderMappings <Adapter>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<string, DbConnection> _createConnection;
    public TProviderMappings Adapter { get; }
    [NullableAttribute("2")]
public string ConnectionNamespace { get; }
    public Type DataReaderType { get; }
    public bool TransactionsSupported { get; }
    protected DynamicDataProviderBase`1(string name, MappingSchema mappingSchema, TProviderMappings providerMappings);
    [CompilerGeneratedAttribute]
public TProviderMappings get_Adapter();
    [NullableContextAttribute("2")]
public virtual string get_ConnectionNamespace();
    public virtual Type get_DataReaderType();
    public virtual bool get_TransactionsSupported();
    protected virtual DbConnection CreateConnectionInternal(string connectionString);
    private static Expression`1<Func`2<string, DbConnection>> CreateConnectionExpression(Type connectionType);
    protected bool SetField(Type fieldType, string dataTypeName, string methodName, bool throwException, Type dataReaderType);
    [NullableContextAttribute("2")]
protected void SetProviderField(string methodName, Type dataReaderType);
    protected void SetProviderField(Type fieldType, string methodName, Type dataReaderType);
    protected void SetToTypeField(Type toType, string methodName, Type dataReaderType);
    [NullableContextAttribute("2")]
protected bool SetProviderField(string methodName, bool throwException, Type dataReaderType);
    protected bool SetProviderField(Type toType, Type fieldType, string methodName, bool throwException, Type dataReaderType, string typeName);
    public virtual DbParameter TryGetProviderParameter(IDataContext dataContext, DbParameter parameter);
    public virtual DbCommand TryGetProviderCommand(IDataContext dataContext, DbCommand command);
    public virtual DbConnection TryGetProviderConnection(IDataContext dataContext, DbConnection connection);
    public virtual DbTransaction TryGetProviderTransaction(IDataContext dataContext, DbTransaction transaction);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.DataProvider.Firebird.FirebirdBulkCopy : BasicBulkCopy {
    protected int MaxSqlLength { get; }
    protected int MaxParameters { get; }
    protected bool CastFirstRowLiteralOnUnionAll { get; }
    protected bool CastFirstRowParametersOnUnionAll { get; }
    protected bool CastAllRowsParametersOnUnionAll { get; }
    protected virtual int get_MaxSqlLength();
    protected virtual int get_MaxParameters();
    protected virtual bool get_CastFirstRowLiteralOnUnionAll();
    protected virtual bool get_CastFirstRowParametersOnUnionAll();
    protected virtual bool get_CastAllRowsParametersOnUnionAll();
    protected virtual bool CastLiteral(ColumnDescriptor column);
    protected virtual BulkCopyRowsCopied MultipleRowsCopy(ITable`1<T> table, DataOptions options, IEnumerable`1<T> source);
    protected virtual Task`1<BulkCopyRowsCopied> MultipleRowsCopyAsync(ITable`1<T> table, DataOptions options, IEnumerable`1<T> source, CancellationToken cancellationToken);
    protected virtual Task`1<BulkCopyRowsCopied> MultipleRowsCopyAsync(ITable`1<T> table, DataOptions options, IAsyncEnumerable`1<T> source, CancellationToken cancellationToken);
}
public static class LinqToDB.DataProvider.Firebird.FirebirdConfiguration : object {
    [ObsoleteAttribute("Use FirebirdOptions.Default.IdentifierQuoteMode instead.")]
public static FirebirdIdentifierQuoteMode IdentifierQuoteMode { get; public set; }
    [ObsoleteAttribute("Use FirebirdOptions.Default.IsLiteralEncodingSupported instead.")]
public static bool IsLiteralEncodingSupported { get; public set; }
    public static FirebirdIdentifierQuoteMode get_IdentifierQuoteMode();
    public static void set_IdentifierQuoteMode(FirebirdIdentifierQuoteMode value);
    public static bool get_IsLiteralEncodingSupported();
    public static void set_IsLiteralEncodingSupported(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class LinqToDB.DataProvider.Firebird.FirebirdDataProvider : DynamicDataProviderBase`1<FirebirdProviderAdapter> {
    private ISqlOptimizer _sqlOptimizer;
    public TableOptions SupportedTableOptions { get; }
    public FirebirdDataProvider(ISqlOptimizer sqlOptimizer);
    protected FirebirdDataProvider(string name, ISqlOptimizer sqlOptimizer);
    private static DateTime GetDateTime(DateTime value);
    public virtual TableOptions get_SupportedTableOptions();
    public virtual ISqlBuilder CreateSqlBuilder(MappingSchema mappingSchema, DataOptions dataOptions);
    public virtual ISqlOptimizer GetSqlOptimizer(DataOptions dataOptions);
    public virtual ISchemaProvider GetSchemaProvider();
    public virtual Nullable`1<bool> IsDBNullAllowed(DataOptions options, DbDataReader reader, int idx);
    public virtual void SetParameter(DataConnection dataConnection, DbParameter parameter, string name, DbDataType dataType, object value);
    protected virtual void SetParameterType(DataConnection dataConnection, DbParameter parameter, DbDataType dataType);
    private static MappingSchema GetMappingSchema();
    public virtual BulkCopyRowsCopied BulkCopy(DataOptions options, ITable`1<T> table, IEnumerable`1<T> source);
    public virtual Task`1<BulkCopyRowsCopied> BulkCopyAsync(DataOptions options, ITable`1<T> table, IEnumerable`1<T> source, CancellationToken cancellationToken);
    public virtual Task`1<BulkCopyRowsCopied> BulkCopyAsync(DataOptions options, ITable`1<T> table, IAsyncEnumerable`1<T> source, CancellationToken cancellationToken);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class LinqToDB.DataProvider.Firebird.FirebirdExtensions : object {
    [ExtensionAttribute]
public static IFirebirdExtensions Firebird(ISqlExtension ext);
    [ExtensionAttribute]
[ExtensionAttribute("UUID_TO_CHAR({guid})")]
public static string UuidToChar(IFirebirdExtensions ext, Nullable`1<Guid> guid);
}
[UsedImplicitlyAttribute]
internal class LinqToDB.DataProvider.Firebird.FirebirdFactory : object {
    [NullableContextAttribute("1")]
private sealed virtual override IDataProvider LinqToDB.DataProvider.IDataProviderFactory.GetDataProvider(IEnumerable`1<NamedValue> attributes);
}
public enum LinqToDB.DataProvider.Firebird.FirebirdIdentifierQuoteMode : Enum {
    public int value__;
    public static FirebirdIdentifierQuoteMode None;
    public static FirebirdIdentifierQuoteMode Quote;
    public static FirebirdIdentifierQuoteMode Auto;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.DataProvider.Firebird.FirebirdMappingSchema : LockedMappingSchema {
    private static string DATE_FORMAT;
    private static string DATETIME_FORMAT;
    private static string TIMESTAMP_FORMAT;
    [CompilerGeneratedAttribute]
private static MappingSchema <Instance>k__BackingField;
    internal static MappingSchema Instance { get; }
    private static FirebirdMappingSchema();
    private static void BuildDateTime(StringBuilder stringBuilder, SqlDataType dt, DateTime value);
    private static void ConvertGuidToSql(StringBuilder sb, SqlDataType dataType, Guid value);
    private static void ConvertBinaryToSql(StringBuilder stringBuilder, Byte[] value);
    private static void ConvertStringToSql(StringBuilder stringBuilder, DataOptions options, string value);
    private static bool NeedsEncoding(string str);
    private static bool NeedsEncoding(char c);
    private static void ConvertCharToSql(StringBuilder stringBuilder, DataOptions options, char value);
    private static void MakeUtf8Literal(StringBuilder stringBuilder, Byte[] bytes);
    [CompilerGeneratedAttribute]
internal static MappingSchema get_Instance();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class LinqToDB.DataProvider.Firebird.FirebirdOptions : DataProviderOptions`1<FirebirdOptions> {
    [CompilerGeneratedAttribute]
private FirebirdIdentifierQuoteMode <IdentifierQuoteMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLiteralEncodingSupported>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public FirebirdIdentifierQuoteMode IdentifierQuoteMode { get; public set; }
    public bool IsLiteralEncodingSupported { get; public set; }
    public FirebirdOptions(BulkCopyType BulkCopyType, FirebirdIdentifierQuoteMode IdentifierQuoteMode, bool IsLiteralEncodingSupported);
    private FirebirdOptions(FirebirdOptions original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public FirebirdIdentifierQuoteMode get_IdentifierQuoteMode();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IdentifierQuoteMode(FirebirdIdentifierQuoteMode value);
    [CompilerGeneratedAttribute]
public bool get_IsLiteralEncodingSupported();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IsLiteralEncodingSupported(bool value);
    protected virtual IdentifierBuilder CreateID(IdentifierBuilder builder);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(FirebirdOptions other);
    public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(FirebirdOptions left, FirebirdOptions right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(FirebirdOptions left, FirebirdOptions right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(DataProviderOptions`1<FirebirdOptions> other);
    [CompilerGeneratedAttribute]
public virtual DataProviderOptions`1<FirebirdOptions> <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(BulkCopyType& BulkCopyType, FirebirdIdentifierQuoteMode& IdentifierQuoteMode, Boolean& IsLiteralEncodingSupported);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.DataProvider.Firebird.FirebirdProviderAdapter : object {
    public static string AssemblyName;
    public static string ClientNamespace;
    public static string TypesNamespace;
    private static Lazy`1<FirebirdProviderAdapter> _lazy;
    [CompilerGeneratedAttribute]
private Type <ConnectionType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <DataReaderType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ParameterType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <CommandType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <TransactionType>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Type <FbDecFloatType>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Type <FbZonedDateTimeType>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Type <FbZonedTimeType>k__BackingField;
    [CompilerGeneratedAttribute]
private MappingSchema <MappingSchema>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`2<DbParameter, FbDbType> <SetDbType>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<DbParameter, FbDbType> <GetDbType>k__BackingField;
    [CompilerGeneratedAttribute]
private Action <ClearAllPools>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDateOnlySupported>k__BackingField;
    private static Version MinDateOnlyVersion;
    internal static FirebirdProviderAdapter Instance { get; }
    public Type ConnectionType { get; }
    public Type DataReaderType { get; }
    public Type ParameterType { get; }
    public Type CommandType { get; }
    public Type TransactionType { get; }
    [NullableAttribute("2")]
public Type FbDecFloatType { get; }
    [NullableAttribute("2")]
public Type FbZonedDateTimeType { get; }
    [NullableAttribute("2")]
public Type FbZonedTimeType { get; }
    [NullableAttribute("2")]
public string ProviderTypesNamespace { get; }
    public MappingSchema MappingSchema { get; }
    public Action`2<DbParameter, FbDbType> SetDbType { get; }
    public Func`2<DbParameter, FbDbType> GetDbType { get; }
    public Action ClearAllPools { get; }
    public bool IsDateOnlySupported { get; }
    private static FirebirdProviderAdapter();
    internal static FirebirdProviderAdapter get_Instance();
    [CompilerGeneratedAttribute]
public sealed virtual Type get_ConnectionType();
    [CompilerGeneratedAttribute]
public sealed virtual Type get_DataReaderType();
    [CompilerGeneratedAttribute]
public sealed virtual Type get_ParameterType();
    [CompilerGeneratedAttribute]
public sealed virtual Type get_CommandType();
    [CompilerGeneratedAttribute]
public sealed virtual Type get_TransactionType();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Type get_FbDecFloatType();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Type get_FbZonedDateTimeType();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Type get_FbZonedTimeType();
    [NullableContextAttribute("2")]
public string get_ProviderTypesNamespace();
    [CompilerGeneratedAttribute]
public MappingSchema get_MappingSchema();
    [CompilerGeneratedAttribute]
public Action`2<DbParameter, FbDbType> get_SetDbType();
    [CompilerGeneratedAttribute]
public Func`2<DbParameter, FbDbType> get_GetDbType();
    [CompilerGeneratedAttribute]
public Action get_ClearAllPools();
    [CompilerGeneratedAttribute]
public bool get_IsDateOnlySupported();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.DataProvider.Firebird.FirebirdSchemaProvider : SchemaProviderBase {
    private FirebirdDataProvider _provider;
    private int _majorVersion;
    public FirebirdSchemaProvider(FirebirdDataProvider provider);
    public virtual DatabaseSchema GetSchema(DataConnection dataConnection, GetSchemaOptions options);
    protected virtual string GetDatabaseName(DataConnection dbConnection);
    protected virtual List`1<TableInfo> GetTables(DataConnection dataConnection, GetSchemaOptions options);
    protected virtual IReadOnlyCollection`1<PrimaryKeyInfo> GetPrimaryKeys(DataConnection dataConnection, IEnumerable`1<TableSchema> tables, GetSchemaOptions options);
    protected virtual List`1<ColumnInfo> GetColumns(DataConnection dataConnection, GetSchemaOptions options);
    protected virtual IReadOnlyCollection`1<ForeignKeyInfo> GetForeignKeys(DataConnection dataConnection, IEnumerable`1<TableSchema> tables, GetSchemaOptions options);
    protected virtual List`1<ProcedureInfo> GetProcedures(DataConnection dataConnection, GetSchemaOptions options);
    protected virtual List`1<ProcedureParameterInfo> GetProcedureParameters(DataConnection dataConnection, IEnumerable`1<ProcedureInfo> procedures, GetSchemaOptions options);
    private static string CreateTypeName(int type, int subType, int scale);
    protected virtual List`1<ColumnSchema> GetProcedureResultColumns(DataTable resultTable, GetSchemaOptions options);
    protected virtual DataTable GetProcedureSchema(DataConnection dataConnection, string commandText, CommandType commandType, DataParameter[] parameters, GetSchemaOptions options);
    protected virtual List`1<DataTypeInfo> GetDataTypes(DataConnection dataConnection);
    [NullableContextAttribute("2")]
protected virtual DataType GetDataType(string dataType, string columnType, Nullable`1<int> length, Nullable`1<int> precision, Nullable`1<int> scale);
    [NullableContextAttribute("2")]
protected virtual string GetProviderSpecificTypeNamespace();
    [NullableContextAttribute("2")]
protected virtual string GetProviderSpecificType(string dataType);
    [NullableContextAttribute("2")]
protected virtual Type GetSystemType(string dataType, string columnType, DataTypeInfo dataTypeInfo, Nullable`1<int> length, Nullable`1<int> precision, Nullable`1<int> scale, GetSchemaOptions options);
    protected virtual void LoadProcedureTableSchema(DataConnection dataConnection, GetSchemaOptions options, ProcedureSchema procedure, string commandText, List`1<TableSchema> tables);
    protected virtual string BuildTableFunctionLoadTableSchemaCommand(ProcedureSchema procedure, string commandText);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class LinqToDB.DataProvider.Firebird.FirebirdSqlBuilder : BasicSqlBuilder`1<FirebirdOptions> {
    [NullableAttribute("2")]
private SqlField _identityField;
    private ISet`1<Tuple`2<SqlValuesTable, int>> _typedColumns;
    public bool CteFirst { get; }
    protected bool SkipFirst { get; }
    protected string SkipFormat { get; }
    protected bool IsRecursiveCteKeywordRequired { get; }
    protected bool IsValuesSyntaxSupported { get; }
    protected string FakeTable { get; }
    public FirebirdSqlBuilder(IDataProvider provider, MappingSchema mappingSchema, DataOptions dataOptions, ISqlOptimizer sqlOptimizer, SqlProviderFlags sqlProviderFlags);
    private FirebirdSqlBuilder(BasicSqlBuilder parentBuilder);
    public virtual bool get_CteFirst();
    protected virtual ISqlBuilder CreateSqlBuilder();
    protected virtual void BuildSelectClause(SelectQuery selectQuery);
    protected virtual bool get_SkipFirst();
    protected virtual string get_SkipFormat();
    protected virtual bool get_IsRecursiveCteKeywordRequired();
    protected virtual string FirstFormat(SelectQuery selectQuery);
    protected virtual void BuildGetIdentity(SqlInsertClause insertClause);
    public virtual ISqlExpression GetIdentityExpression(SqlTable table);
    protected virtual void BuildDataTypeFromDataType(SqlDataType type, bool forCreateTable, bool canBeNull);
    protected sealed virtual bool IsReserved(string word);
    private bool IsValidIdentifier(string name);
    public virtual StringBuilder Convert(StringBuilder sb, string value, ConvertType convertType);
    protected virtual void BuildInsertOrUpdateQuery(SqlInsertOrUpdateStatement insertOrUpdate);
    protected virtual void BuildCreateTableNullAttribute(SqlField field, DefaultNullable defaultNullable);
    public virtual int CommandCount(SqlStatement statement);
    protected virtual void BuildDropTableStatement(SqlDropTableStatement dropTable);
    protected virtual void BuildCommand(SqlStatement statement, int commandNumber);
    public virtual StringBuilder BuildObjectName(StringBuilder sb, SqlObjectName name, ConvertType objectType, bool escape, TableOptions tableOptions, bool withoutSuffix);
    protected virtual string GetProviderTypeName(IDataContext dataContext, DbParameter parameter);
    protected virtual void BuildDeleteQuery(SqlDeleteStatement deleteStatement);
    protected virtual void BuildCreateTableCommand(SqlTable table);
    protected virtual void BuildStartCreateTableStatement(SqlCreateTableStatement createTable);
    protected virtual void BuildEndCreateTableStatement(SqlCreateTableStatement createTable);
    protected virtual string GetPhysicalTableName(ISqlTableSource table, string alias, bool ignoreTableExpression, string defaultDatabaseName, bool withoutSuffix);
    protected virtual bool get_IsValuesSyntaxSupported();
    protected virtual string get_FakeTable();
    protected virtual bool IsSqlValuesTableValueTypeRequired(SqlValuesTable source, IReadOnlyList`1<ISqlExpression[]> rows, int row, int column);
    protected virtual void BuildTypedExpression(SqlDataType dataType, ISqlExpression value);
    [CompilerGeneratedAttribute]
private void <BuildDropTableStatement>g__BuildDropWithSchemaCheck|23_0(string objectName, string schemaTable, string nameColumn, string identifier, <>c__DisplayClass23_0& );
    [CompilerGeneratedAttribute]
private void <BuildEndCreateTableStatement>g__AddGenerator|30_0(<>c__DisplayClass30_0& );
    [CompilerGeneratedAttribute]
private void <BuildEndCreateTableStatement>g__AddTrigger|30_1(<>c__DisplayClass30_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.DataProvider.Firebird.FirebirdSqlOptimizer : BasicSqlOptimizer {
    protected static String[] LikeFirebirdEscapeSymbols;
    private static string CASTEXPR;
    public String[] LikeCharactersToEscape { get; }
    public bool LikeValueParameterSupport { get; }
    public FirebirdSqlOptimizer(SqlProviderFlags sqlProviderFlags);
    private static FirebirdSqlOptimizer();
    public virtual SqlStatement Finalize(MappingSchema mappingSchema, SqlStatement statement, DataOptions dataOptions);
    public virtual String[] get_LikeCharactersToEscape();
    public virtual bool get_LikeValueParameterSupport();
    public virtual bool IsParameterDependedElement(IQueryElement element);
    public virtual ISqlPredicate ConvertSearchStringPredicate(SearchString predicate, ConvertVisitor`1<RunOptimizationContext> visitor);
    public virtual SqlStatement TransformStatement(SqlStatement statement, DataOptions dataOptions);
    public virtual ISqlExpression OptimizeExpression(ISqlExpression expression, ConvertVisitor`1<RunOptimizationContext> convertVisitor);
    public virtual ISqlExpression ConvertExpressionImpl(ISqlExpression expression, ConvertVisitor`1<RunOptimizationContext> visitor);
    protected virtual ISqlExpression ConvertFunction(SqlFunction func);
    public virtual SqlStatement FinalizeStatement(SqlStatement statement, EvaluationContext context, DataOptions dataOptions);
    private static SqlStatement WrapParameters(SqlStatement statement, EvaluationContext context);
    private static bool CastRequired(IReadOnlyList`1<IQueryElement> parents);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PublicAPIAttribute]
public static class LinqToDB.DataProvider.Firebird.FirebirdTools : object {
    private static Lazy`1<IDataProvider> _firebirdDataProvider;
    [ObsoleteAttribute("Use FirebirdOptions.Default.BulkCopyType instead.")]
public static BulkCopyType DefaultBulkCopyType { get; public set; }
    private static FirebirdTools();
    internal static IDataProvider ProviderDetector(ConnectionOptions options);
    public static IDataProvider GetDataProvider();
    public static void ResolveFirebird(string path);
    public static void ResolveFirebird(Assembly assembly);
    public static DataConnection CreateDataConnection(string connectionString);
    public static DataConnection CreateDataConnection(DbConnection connection);
    public static DataConnection CreateDataConnection(DbTransaction transaction);
    public static BulkCopyType get_DefaultBulkCopyType();
    public static void set_DefaultBulkCopyType(BulkCopyType value);
    public static void ClearAllPools();
}
public interface LinqToDB.DataProvider.Firebird.IFirebirdExtensions {
}
[NullableContextAttribute("1")]
internal interface LinqToDB.DataProvider.IConnectionWrapper {
    public DbConnection Connection { get; }
    public abstract virtual void Open();
    public abstract virtual DbConnection get_Connection();
}
[NullableContextAttribute("1")]
public interface LinqToDB.DataProvider.IDataProvider {
    public string Name { get; }
    public int ID { get; }
    [NullableAttribute("2")]
public string ConnectionNamespace { get; }
    public Type DataReaderType { get; }
    public MappingSchema MappingSchema { get; }
    public SqlProviderFlags SqlProviderFlags { get; }
    public TableOptions SupportedTableOptions { get; }
    public bool TransactionsSupported { get; }
    public abstract virtual string get_Name();
    public abstract virtual int get_ID();
    [NullableContextAttribute("2")]
public abstract virtual string get_ConnectionNamespace();
    public abstract virtual Type get_DataReaderType();
    public abstract virtual MappingSchema get_MappingSchema();
    public abstract virtual SqlProviderFlags get_SqlProviderFlags();
    public abstract virtual TableOptions get_SupportedTableOptions();
    public abstract virtual bool get_TransactionsSupported();
    public abstract virtual void InitContext(IDataContext dataContext);
    public abstract virtual DbConnection CreateConnection(string connectionString);
    public abstract virtual ISqlBuilder CreateSqlBuilder(MappingSchema mappingSchema, DataOptions dataOptions);
    public abstract virtual ISqlOptimizer GetSqlOptimizer(DataOptions dataOptions);
    public abstract virtual DbCommand InitCommand(DataConnection dataConnection, DbCommand command, CommandType commandType, string commandText, DataParameter[] parameters, bool withParameters);
    public abstract virtual void DisposeCommand(DbCommand command);
    public abstract virtual ValueTask DisposeCommandAsync(DbCommand command);
    public abstract virtual object GetConnectionInfo(DataConnection dataConnection, string parameterName);
    public abstract virtual Expression GetReaderExpression(DbDataReader reader, int idx, Expression readerExpression, Type toType);
    public abstract virtual Nullable`1<bool> IsDBNullAllowed(DataOptions options, DbDataReader reader, int idx);
    public abstract virtual void SetParameter(DataConnection dataConnection, DbParameter parameter, string name, DbDataType dataType, object value);
    public abstract virtual Type ConvertParameterType(Type type, DbDataType dataType);
    public abstract virtual CommandBehavior GetCommandBehavior(CommandBehavior commandBehavior);
    public abstract virtual IExecutionScope ExecuteScope(DataConnection dataConnection);
    public abstract virtual ISchemaProvider GetSchemaProvider();
    public abstract virtual BulkCopyRowsCopied BulkCopy(DataOptions options, ITable`1<T> table, IEnumerable`1<T> source);
    public abstract virtual Task`1<BulkCopyRowsCopied> BulkCopyAsync(DataOptions options, ITable`1<T> table, IEnumerable`1<T> source, CancellationToken cancellationToken);
    public abstract virtual Task`1<BulkCopyRowsCopied> BulkCopyAsync(DataOptions options, ITable`1<T> table, IAsyncEnumerable`1<T> source, CancellationToken cancellationToken);
    public abstract virtual IQueryParametersNormalizer GetQueryParameterNormalizer();
}
[NullableContextAttribute("1")]
public interface LinqToDB.DataProvider.IDataProviderFactory {
    public abstract virtual IDataProvider GetDataProvider(IEnumerable`1<NamedValue> attributes);
}
[NullableContextAttribute("1")]
public interface LinqToDB.DataProvider.IDynamicProviderAdapter {
    public Type ConnectionType { get; }
    public Type DataReaderType { get; }
    public Type ParameterType { get; }
    public Type CommandType { get; }
    [NullableAttribute("2")]
public Type TransactionType { get; }
    public abstract virtual Type get_ConnectionType();
    public abstract virtual Type get_DataReaderType();
    public abstract virtual Type get_ParameterType();
    public abstract virtual Type get_CommandType();
    [NullableContextAttribute("2")]
public abstract virtual Type get_TransactionType();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.DataProvider.Informix.InformixBulkCopy : BasicBulkCopy {
    private InformixDataProvider _provider;
    protected int MaxSqlLength { get; }
    public InformixBulkCopy(InformixDataProvider provider);
    protected virtual int get_MaxSqlLength();
    protected virtual BulkCopyRowsCopied ProviderSpecificCopy(ITable`1<T> table, DataOptions options, IEnumerable`1<T> source);
    protected virtual Task`1<BulkCopyRowsCopied> ProviderSpecificCopyAsync(ITable`1<T> table, DataOptions options, IEnumerable`1<T> source, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("LinqToDB.DataProvider.Informix.InformixBulkCopy/<ProviderSpecificCopyAsync>d__6`1")]
protected virtual Task`1<BulkCopyRowsCopied> ProviderSpecificCopyAsync(ITable`1<T> table, DataOptions options, IAsyncEnumerable`1<T> source, CancellationToken cancellationToken);
    private BulkCopyRowsCopied IDSProviderSpecificCopy(ITable`1<T> table, BulkCopyOptions options, IEnumerable`1<T> source, DataConnection dataConnection, DbConnection connection, BulkCopyAdapter bulkCopy);
    protected virtual BulkCopyRowsCopied MultipleRowsCopy(ITable`1<T> table, DataOptions options, IEnumerable`1<T> source);
    [AsyncStateMachineAttribute("LinqToDB.DataProvider.Informix.InformixBulkCopy/<MultipleRowsCopyAsync>d__9`1")]
protected virtual Task`1<BulkCopyRowsCopied> MultipleRowsCopyAsync(ITable`1<T> table, DataOptions options, IEnumerable`1<T> source, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("LinqToDB.DataProvider.Informix.InformixBulkCopy/<MultipleRowsCopyAsync>d__10`1")]
protected virtual Task`1<BulkCopyRowsCopied> MultipleRowsCopyAsync(ITable`1<T> table, DataOptions options, IAsyncEnumerable`1<T> source, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<BulkCopyRowsCopied> <>n__0(ITable`1<T> table, DataOptions options, IEnumerable`1<T> source, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<BulkCopyRowsCopied> <>n__1(ITable`1<T> table, DataOptions options, IAsyncEnumerable`1<T> source, CancellationToken cancellationToken);
}
public static class LinqToDB.DataProvider.Informix.InformixConfiguration : object {
    [ObsoleteAttribute("Use InformixOptions.Default.ExplicitFractionalSecondsSeparator instead.")]
public static bool ExplicitFractionalSecondsSeparator { get; public set; }
    public static bool get_ExplicitFractionalSecondsSeparator();
    public static void set_ExplicitFractionalSecondsSeparator(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class LinqToDB.DataProvider.Informix.InformixDataProvider : DynamicDataProviderBase`1<InformixProviderAdapter> {
    private ISqlOptimizer _sqlOptimizer;
    public TableOptions SupportedTableOptions { get; }
    protected InformixDataProvider(string providerName);
    [ColumnReaderAttribute("1")]
private static float GetFloat(DbDataReader dr, int idx);
    [ColumnReaderAttribute("1")]
private static double GetDouble(DbDataReader dr, int idx);
    [ColumnReaderAttribute("1")]
private static decimal GetDecimal(DbDataReader dr, int idx);
    public virtual IExecutionScope ExecuteScope(DataConnection dataConnection);
    public virtual TableOptions get_SupportedTableOptions();
    public virtual ISqlBuilder CreateSqlBuilder(MappingSchema mappingSchema, DataOptions dataOptions);
    public virtual ISqlOptimizer GetSqlOptimizer(DataOptions dataOptions);
    public virtual ISchemaProvider GetSchemaProvider();
    public virtual void SetParameter(DataConnection dataConnection, DbParameter parameter, string name, DbDataType dataType, object value);
    protected virtual void SetParameterType(DataConnection dataConnection, DbParameter parameter, DbDataType dataType);
    private static MappingSchema GetMappingSchema(string name);
    public virtual BulkCopyRowsCopied BulkCopy(DataOptions options, ITable`1<T> table, IEnumerable`1<T> source);
    public virtual Task`1<BulkCopyRowsCopied> BulkCopyAsync(DataOptions options, ITable`1<T> table, IEnumerable`1<T> source, CancellationToken cancellationToken);
    public virtual Task`1<BulkCopyRowsCopied> BulkCopyAsync(DataOptions options, ITable`1<T> table, IAsyncEnumerable`1<T> source, CancellationToken cancellationToken);
}
internal class LinqToDB.DataProvider.Informix.InformixDataProviderDB2 : InformixDataProvider {
}
internal class LinqToDB.DataProvider.Informix.InformixDataProviderInformix : InformixDataProvider {
}
[UsedImplicitlyAttribute]
internal class LinqToDB.DataProvider.Informix.InformixFactory : object {
    [NullableContextAttribute("1")]
private sealed virtual override IDataProvider LinqToDB.DataProvider.IDataProviderFactory.GetDataProvider(IEnumerable`1<NamedValue> attributes);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.DataProvider.Informix.InformixMappingSchema : LockedMappingSchema {
    private static string DATE_FORMAT;
    private static string DATETIME_FORMAT;
    private static string DATETIME5_EXPLICIT_FORMAT;
    private static string DATETIME5_FORMAT;
    private static string INTERVAL5_FORMAT;
    private static Char[] _extraEscapes;
    private static Action`2<StringBuilder, int> _appendConversionAction;
    internal static InformixMappingSchema Instance;
    private static InformixMappingSchema();
    private static void BuildIntervalLiteral(StringBuilder sb, TimeSpan interval);
    private static void AppendConversion(StringBuilder stringBuilder, int value);
    private static void ConvertStringToSql(StringBuilder stringBuilder, string value);
    private static void ConvertCharToSql(StringBuilder stringBuilder, char value);
    private static void ConvertDateTimeToSql(StringBuilder stringBuilder, SqlDataType dataType, DataOptions options, DateTime value);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class LinqToDB.DataProvider.Informix.InformixOptions : DataProviderOptions`1<InformixOptions> {
    [CompilerGeneratedAttribute]
private bool <ExplicitFractionalSecondsSeparator>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public bool ExplicitFractionalSecondsSeparator { get; public set; }
    public InformixOptions(BulkCopyType BulkCopyType, bool ExplicitFractionalSecondsSeparator);
    private InformixOptions(InformixOptions original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public bool get_ExplicitFractionalSecondsSeparator();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ExplicitFractionalSecondsSeparator(bool value);
    protected virtual IdentifierBuilder CreateID(IdentifierBuilder builder);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(InformixOptions other);
    public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(InformixOptions left, InformixOptions right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(InformixOptions left, InformixOptions right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(DataProviderOptions`1<InformixOptions> other);
    [CompilerGeneratedAttribute]
public virtual DataProviderOptions`1<InformixOptions> <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(BulkCopyType& BulkCopyType, Boolean& ExplicitFractionalSecondsSeparator);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.DataProvider.Informix.InformixProviderAdapter : object {
    public static string IfxAssemblyName;
    public static string IfxClientNamespace;
    public static string IfxProviderFactoryName;
    public static string IfxTypesNamespace;
    private static object _ifxSyncRoot;
    private static object _db2SyncRoot;
    [NullableAttribute("2")]
private static InformixProviderAdapter _ifxAdapter;
    [NullableAttribute("2")]
private static InformixProviderAdapter _db2Adapter;
    [CompilerGeneratedAttribute]
private Type <ConnectionType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <DataReaderType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ParameterType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <CommandType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <TransactionType>k__BackingField;
    [CompilerGeneratedAttribute]
private MappingSchema <MappingSchema>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsIDSProvider>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`2<DbParameter, IfxType> <SetIfxType>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<DbParameter, IfxType> <GetIfxType>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`2<DbParameter, DB2Type> <SetDB2Type>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<DbParameter, DB2Type> <GetDB2Type>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <BlobType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ClobType>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Type <DecimalType>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Type <DateTimeType>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Type <TimeSpanType>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<TimeSpan, object> <TimeSpanFactory>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private BulkCopyAdapter <InformixBulkCopy>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private BulkCopyAdapter <DB2BulkCopy>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <GetDecimalReaderMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GetDateTimeReaderMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GetTimeSpanReaderMethod>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <GetBigIntReaderMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProviderTypesNamespace>k__BackingField;
    public Type ConnectionType { get; }
    public Type DataReaderType { get; }
    public Type ParameterType { get; }
    public Type CommandType { get; }
    public Type TransactionType { get; }
    public MappingSchema MappingSchema { get; }
    public bool IsIDSProvider { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`2<DbParameter, IfxType> SetIfxType { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<DbParameter, IfxType> GetIfxType { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`2<DbParameter, DB2Type> SetDB2Type { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<DbParameter, DB2Type> GetDB2Type { get; }
    public Type BlobType { get; }
    public Type ClobType { get; }
    [NullableAttribute("2")]
public Type DecimalType { get; }
    [NullableAttribute("2")]
public Type DateTimeType { get; }
    [NullableAttribute("2")]
public Type TimeSpanType { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<TimeSpan, object> TimeSpanFactory { get; }
    [NullableAttribute("2")]
public BulkCopyAdapter InformixBulkCopy { get; }
    [NullableAttribute("2")]
public BulkCopyAdapter DB2BulkCopy { get; }
    [NullableAttribute("2")]
public string GetDecimalReaderMethod { get; }
    public string GetDateTimeReaderMethod { get; }
    public string GetTimeSpanReaderMethod { get; }
    [NullableAttribute("2")]
public string GetBigIntReaderMethod { get; }
    public string ProviderTypesNamespace { get; }
    private InformixProviderAdapter(Type connectionType, Type dataReaderType, Type parameterType, Type commandType, Type transactionType, MappingSchema mappingSchema, Type ifxBlobType, Type ifxClobType, Type ifxDecimalType, Type ifxDateTimeType, Type ifxTimeSpanType, Action`2<DbParameter, IfxType> ifxTypeSetter, Func`2<DbParameter, IfxType> ifxTypeGetter, Func`2<TimeSpan, object> timeSpanFactory, BulkCopyAdapter bulkCopy);
    private InformixProviderAdapter(DB2ProviderAdapter db2Adapter);
    private static InformixProviderAdapter();
    [CompilerGeneratedAttribute]
public sealed virtual Type get_ConnectionType();
    [CompilerGeneratedAttribute]
public sealed virtual Type get_DataReaderType();
    [CompilerGeneratedAttribute]
public sealed virtual Type get_ParameterType();
    [CompilerGeneratedAttribute]
public sealed virtual Type get_CommandType();
    [CompilerGeneratedAttribute]
public sealed virtual Type get_TransactionType();
    [CompilerGeneratedAttribute]
public MappingSchema get_MappingSchema();
    [CompilerGeneratedAttribute]
public bool get_IsIDSProvider();
    [CompilerGeneratedAttribute]
public Action`2<DbParameter, IfxType> get_SetIfxType();
    [CompilerGeneratedAttribute]
public Func`2<DbParameter, IfxType> get_GetIfxType();
    [CompilerGeneratedAttribute]
public Action`2<DbParameter, DB2Type> get_SetDB2Type();
    [CompilerGeneratedAttribute]
public Func`2<DbParameter, DB2Type> get_GetDB2Type();
    [CompilerGeneratedAttribute]
public Type get_BlobType();
    [CompilerGeneratedAttribute]
public Type get_ClobType();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Type get_DecimalType();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Type get_DateTimeType();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Type get_TimeSpanType();
    [CompilerGeneratedAttribute]
public Func`2<TimeSpan, object> get_TimeSpanFactory();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public BulkCopyAdapter get_InformixBulkCopy();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public BulkCopyAdapter get_DB2BulkCopy();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_GetDecimalReaderMethod();
    [CompilerGeneratedAttribute]
public string get_GetDateTimeReaderMethod();
    [CompilerGeneratedAttribute]
public string get_GetTimeSpanReaderMethod();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_GetBigIntReaderMethod();
    [CompilerGeneratedAttribute]
public string get_ProviderTypesNamespace();
    public static InformixProviderAdapter GetInstance(string name);
    private static InformixProviderAdapter CreateIfxAdapter();
    [CompilerGeneratedAttribute]
internal static Type <CreateIfxAdapter>g__loadType|84_2(string typeName, DataType dataType, bool optional, bool obsolete, bool register, <>c__DisplayClass84_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.DataProvider.Informix.InformixSchemaProvider : SchemaProviderBase {
    private InformixDataProvider _provider;
    public InformixSchemaProvider(InformixDataProvider provider);
    protected virtual List`1<DataTypeInfo> GetDataTypes(DataConnection dataConnection);
    [NullableContextAttribute("2")]
protected virtual DataType GetDataType(string dataType, string columnType, Nullable`1<int> length, Nullable`1<int> precision, Nullable`1<int> scale);
    protected virtual string GetProviderSpecificTypeNamespace();
    [NullableContextAttribute("2")]
protected virtual string GetProviderSpecificType(string dataType);
    protected virtual List`1<TableInfo> GetTables(DataConnection dataConnection, GetSchemaOptions options);
    protected virtual IReadOnlyCollection`1<PrimaryKeyInfo> GetPrimaryKeys(DataConnection dataConnection, IEnumerable`1<TableSchema> tables, GetSchemaOptions options);
    private static void SetDate(ColumnInfo c, int num);
    protected virtual List`1<ColumnInfo> GetColumns(DataConnection dataConnection, GetSchemaOptions options);
    protected virtual IReadOnlyCollection`1<ForeignKeyInfo> GetForeignKeys(DataConnection dataConnection, IEnumerable`1<TableSchema> tables, GetSchemaOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.DataProvider.Informix.InformixSqlBuilder : BasicSqlBuilder {
    protected bool SupportsNullInColumn { get; }
    protected string SkipFormat { get; }
    protected bool IsValuesSyntaxSupported { get; }
    protected string FakeTable { get; }
    public InformixSqlBuilder(IDataProvider provider, MappingSchema mappingSchema, DataOptions dataOptions, ISqlOptimizer sqlOptimizer, SqlProviderFlags sqlProviderFlags);
    private InformixSqlBuilder(BasicSqlBuilder parentBuilder);
    protected virtual ISqlBuilder CreateSqlBuilder();
    protected virtual bool get_SupportsNullInColumn();
    public virtual int CommandCount(SqlStatement statement);
    protected virtual void BuildCommand(SqlStatement statement, int commandNumber);
    protected virtual void BuildTruncateTable(SqlTruncateTableStatement truncateTable);
    protected virtual void BuildSql(int commandNumber, SqlStatement statement, StringBuilder sb, OptimizationContext optimizationContext, int indent, bool skipAlias);
    protected virtual void BuildSelectClause(SelectQuery selectQuery);
    protected virtual string FirstFormat(SelectQuery selectQuery);
    protected virtual string get_SkipFormat();
    protected virtual void BuildIsDistinctPredicate(IsDistinct expr);
    protected virtual void BuildLikePredicate(Like predicate);
    protected virtual void BuildDataTypeFromDataType(SqlDataType type, bool forCreateTable, bool canBeNull);
    private bool IsValidIdentifier(string name);
    public virtual StringBuilder Convert(StringBuilder sb, string value, ConvertType convertType);
    protected virtual void BuildCreateTableFieldType(SqlField field);
    protected virtual void BuildCreateTablePrimaryKey(SqlCreateTableStatement createTable, string pkName, IEnumerable`1<string> fieldNames);
    public virtual StringBuilder BuildObjectName(StringBuilder sb, SqlObjectName name, ConvertType objectType, bool escape, TableOptions tableOptions, bool withoutSuffix);
    protected virtual string GetProviderTypeName(IDataContext dataContext, DbParameter parameter);
    protected virtual void BuildTypedExpression(SqlDataType dataType, ISqlExpression value);
    protected virtual void BuildCreateTableCommand(SqlTable table);
    protected virtual void BuildDropTableStatement(SqlDropTableStatement dropTable);
    protected virtual void BuildSqlRow(SqlRow expr, bool buildTableName, bool checkParentheses, bool throwExceptionIfTableNotFound);
    protected virtual ISqlExpression WrapBooleanExpression(ISqlExpression expr);
    protected virtual bool IsReserved(string word);
    protected virtual bool get_IsValuesSyntaxSupported();
    protected virtual string get_FakeTable();
    protected virtual bool IsSqlValuesTableValueTypeRequired(SqlValuesTable source, IReadOnlyList`1<ISqlExpression[]> rows, int row, int column);
    protected virtual void BuildMergeInto(SqlMergeStatement merge);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.DataProvider.Informix.InformixSqlOptimizer : BasicSqlOptimizer {
    public InformixSqlOptimizer(SqlProviderFlags sqlProviderFlags);
    public virtual bool IsParameterDependedElement(IQueryElement element);
    public virtual ISqlPredicate ConvertLikePredicate(MappingSchema mappingSchema, Like predicate, EvaluationContext context);
    private static void SetQueryParameter(IQueryElement element);
    private static void ClearQueryParameter(IQueryElement element);
    public virtual SqlStatement Finalize(MappingSchema mappingSchema, SqlStatement statement, DataOptions dataOptions);
    public virtual SqlStatement TransformStatement(SqlStatement statement, DataOptions dataOptions);
    public virtual ISqlExpression ConvertExpressionImpl(ISqlExpression expression, ConvertVisitor`1<RunOptimizationContext> visitor);
    protected virtual ISqlExpression ConvertFunction(SqlFunction func);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class LinqToDB.DataProvider.Informix.InformixTools : object {
    private static Lazy`1<IDataProvider> _informixDB2DataProvider;
    [NullableAttribute("2")]
private static string _detectedProviderName;
    internal static string DetectedProviderName { get; }
    [ObsoleteAttribute("Use InformixOptions.Default.BulkCopyType instead.")]
public static BulkCopyType DefaultBulkCopyType { get; public set; }
    private static InformixTools();
    internal static IDataProvider ProviderDetector(ConnectionOptions options);
    private static string DetectProviderName();
    internal static string get_DetectedProviderName();
    public static IDataProvider GetDataProvider(string providerName);
    public static DataConnection CreateDataConnection(string connectionString, string providerName);
    public static DataConnection CreateDataConnection(DbConnection connection, string providerName);
    public static DataConnection CreateDataConnection(DbTransaction transaction, string providerName);
    public static BulkCopyType get_DefaultBulkCopyType();
    public static void set_DefaultBulkCopyType(BulkCopyType value);
}
[NullableContextAttribute("2")]
public interface LinqToDB.DataProvider.IQueryParametersNormalizer {
    public abstract virtual string Normalize(string originalName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class LinqToDB.DataProvider.MultipleRowsHelper : object {
    public ISqlBuilder SqlBuilder;
    public IDataContext OriginalContext;
    public DataConnection DataConnection;
    public MappingSchema MappingSchema;
    public DataOptions Options;
    public EntityDescriptor Descriptor;
    public ColumnDescriptor[] Columns;
    public SqlDataType[] ColumnTypes;
    [NullableAttribute("2")]
public string TableName;
    public string ParameterName;
    public List`1<DataParameter> Parameters;
    public StringBuilder StringBuilder;
    public BulkCopyRowsCopied RowsCopied;
    public int CurrentCount;
    public int ParameterIndex;
    public int HeaderSize;
    public int BatchSize;
    public int LastRowStringIndex;
    public int LastRowParameterIndex;
    [CompilerGeneratedAttribute]
private bool <SuppressCloseAfterUse>k__BackingField;
    private static Func`2<ColumnDescriptor, bool> _defaultSkipConvert;
    public bool SuppressCloseAfterUse { get; public set; }
    protected MultipleRowsHelper(IDataContext dataConnection, DataOptions options, Type entityType);
    private static MultipleRowsHelper();
    [CompilerGeneratedAttribute]
public bool get_SuppressCloseAfterUse();
    [CompilerGeneratedAttribute]
public void set_SuppressCloseAfterUse(bool value);
    public void SetHeader();
    public virtual void BuildColumns(object item, Func`2<ColumnDescriptor, bool> skipConvert, bool castParameters, bool castAllRows, bool castFirstRowLiteralOnUnionAll, Func`2<ColumnDescriptor, bool> castLiteral);
    private void AddValueCasted(string sql, SqlDataType type);
    public bool Execute();
    internal bool ExecuteCustom(Func`4<DataConnection, string, DataParameter[], int> customExecute);
    [AsyncStateMachineAttribute("LinqToDB.DataProvider.MultipleRowsHelper/<ExecuteAsync>d__30")]
public Task`1<bool> ExecuteAsync(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.DataProvider.MultipleRowsHelper`1 : MultipleRowsHelper {
    public MultipleRowsHelper`1(ITable`1<T> table, DataOptions options);
}
public interface LinqToDB.DataProvider.MySql.IMySqlExtensions {
}
public interface LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable`1 {
}
public interface LinqToDB.DataProvider.MySql.IMySqlSpecificTable`1 {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.DataProvider.MySql.MySqlBulkCopy : BasicBulkCopy {
    private MySqlDataProvider _provider;
    protected int MaxParameters { get; }
    protected int MaxSqlLength { get; }
    public MySqlBulkCopy(MySqlDataProvider provider);
    protected virtual int get_MaxParameters();
    protected virtual int get_MaxSqlLength();
    protected virtual BulkCopyRowsCopied ProviderSpecificCopy(ITable`1<T> table, DataOptions options, IEnumerable`1<T> source);
    protected virtual Task`1<BulkCopyRowsCopied> ProviderSpecificCopyAsync(ITable`1<T> table, DataOptions options, IEnumerable`1<T> source, CancellationToken cancellationToken);
    protected virtual Task`1<BulkCopyRowsCopied> ProviderSpecificCopyAsync(ITable`1<T> table, DataOptions options, IAsyncEnumerable`1<T> source, CancellationToken cancellationToken);
    private Nullable`1<ProviderConnections> TryGetProviderConnections(ITable`1<T> table);
    [AsyncStateMachineAttribute("LinqToDB.DataProvider.MySql.MySqlBulkCopy/<ProviderSpecificCopyInternalAsync>d__10`1")]
private Task`1<BulkCopyRowsCopied> ProviderSpecificCopyInternalAsync(ProviderConnections providerConnections, ITable`1<T> table, BulkCopyOptions options, IEnumerable`1<T> source, CancellationToken cancellationToken);
    private BulkCopyRowsCopied ProviderSpecificCopyInternal(ProviderConnections providerConnections, ITable`1<T> table, BulkCopyOptions options, IEnumerable`1<T> source);
    [AsyncStateMachineAttribute("LinqToDB.DataProvider.MySql.MySqlBulkCopy/<ProviderSpecificCopyInternalAsync>d__12`1")]
private Task`1<BulkCopyRowsCopied> ProviderSpecificCopyInternalAsync(ProviderConnections providerConnections, ITable`1<T> table, BulkCopyOptions options, IAsyncEnumerable`1<T> source, CancellationToken cancellationToken);
    protected virtual BulkCopyRowsCopied MultipleRowsCopy(ITable`1<T> table, DataOptions options, IEnumerable`1<T> source);
    protected virtual Task`1<BulkCopyRowsCopied> MultipleRowsCopyAsync(ITable`1<T> table, DataOptions options, IEnumerable`1<T> source, CancellationToken cancellationToken);
    protected virtual Task`1<BulkCopyRowsCopied> MultipleRowsCopyAsync(ITable`1<T> table, DataOptions options, IAsyncEnumerable`1<T> source, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class LinqToDB.DataProvider.MySql.MySqlDataProvider : DynamicDataProviderBase`1<MySqlProviderAdapter> {
    private ISqlOptimizer _sqlOptimizer;
    public TableOptions SupportedTableOptions { get; }
    protected MySqlDataProvider(string name);
    public virtual ISchemaProvider GetSchemaProvider();
    public virtual TableOptions get_SupportedTableOptions();
    public virtual ISqlBuilder CreateSqlBuilder(MappingSchema mappingSchema, DataOptions dataOptions);
    private static MappingSchema GetMappingSchema(string name);
    public virtual ISqlOptimizer GetSqlOptimizer(DataOptions dataOptions);
    public virtual void SetParameter(DataConnection dataConnection, DbParameter parameter, string name, DbDataType dataType, object value);
    protected virtual void SetParameterType(DataConnection dataConnection, DbParameter parameter, DbDataType dataType);
    public virtual BulkCopyRowsCopied BulkCopy(DataOptions options, ITable`1<T> table, IEnumerable`1<T> source);
    public virtual Task`1<BulkCopyRowsCopied> BulkCopyAsync(DataOptions options, ITable`1<T> table, IEnumerable`1<T> source, CancellationToken cancellationToken);
    public virtual Task`1<BulkCopyRowsCopied> BulkCopyAsync(DataOptions options, ITable`1<T> table, IAsyncEnumerable`1<T> source, CancellationToken cancellationToken);
}
internal class LinqToDB.DataProvider.MySql.MySqlDataProviderMySqlConnector : MySqlDataProvider {
}
internal class LinqToDB.DataProvider.MySql.MySqlDataProviderMySqlOfficial : MySqlDataProvider {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class LinqToDB.DataProvider.MySql.MySqlExtensions : object {
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IMySqlExtensions MySql(ISqlExtension ext);
    [ExtensionAttribute]
[ExtensionAttribute("MATCH({columns, ', '}) AGAINST ({search})")]
public static bool Match(IMySqlExtensions ext, string search, Object[] columns);
    [ExtensionAttribute]
[ExtensionAttribute("MATCH({columns, ', '}) AGAINST ({search})")]
public static double MatchRelevance(IMySqlExtensions ext, string search, Object[] columns);
    [ExtensionAttribute]
[ExtensionAttribute("MATCH({columns, ', '}) AGAINST ({search}{modifier?})")]
public static bool Match(IMySqlExtensions ext, MatchModifier modifier, string search, Object[] columns);
    [ExtensionAttribute]
[ExtensionAttribute("MATCH({columns, ', '}) AGAINST ({search}{modifier?})")]
public static double MatchRelevance(IMySqlExtensions ext, MatchModifier modifier, string search, Object[] columns);
}
[UsedImplicitlyAttribute]
internal class LinqToDB.DataProvider.MySql.MySqlFactory : object {
    [NullableContextAttribute("1")]
private sealed virtual override IDataProvider LinqToDB.DataProvider.IDataProviderFactory.GetDataProvider(IEnumerable`1<NamedValue> attributes);
}
[ExtensionAttribute]
public static class LinqToDB.DataProvider.MySql.MySqlHints : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("MySql", "6", "LinqToDB.SqlProvider.HintWithParametersExtensionBuilder", " ", ", ")]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
public static IMySqlSpecificQueryable`1<TSource> QueryBlockHint(IMySqlSpecificQueryable`1<TSource> source, string hint, TParam[] hintParameters);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[ExpressionMethodAttribute("SemiJoinHintWithQueryBlockImpl")]
public static IMySqlSpecificQueryable`1<TSource> SemiJoinHintWithQueryBlock(IMySqlSpecificQueryable`1<TSource> query, String[] values);
    [NullableContextAttribute("1")]
private static Expression`1<Func`3<IMySqlSpecificQueryable`1<TSource>, String[], IMySqlSpecificQueryable`1<TSource>>> SemiJoinHintWithQueryBlockImpl();
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[ExpressionMethodAttribute("NoSemiJoinHintWithQueryBlockImpl")]
public static IMySqlSpecificQueryable`1<TSource> NoSemiJoinHintWithQueryBlock(IMySqlSpecificQueryable`1<TSource> query, String[] values);
    [NullableContextAttribute("1")]
private static Expression`1<Func`3<IMySqlSpecificQueryable`1<TSource>, String[], IMySqlSpecificQueryable`1<TSource>>> NoSemiJoinHintWithQueryBlockImpl();
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("MySql", "1", "LinqToDB.DataProvider.TableSpecHintExtensionBuilder")]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
public static IMySqlSpecificTable`1<TSource> TableHint(IMySqlSpecificTable`1<TSource> table, string hint);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("MySql", "1", "LinqToDB.DataProvider.TableSpecHintExtensionBuilder")]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
public static IMySqlSpecificTable`1<TSource> TableHint(IMySqlSpecificTable`1<TSource> table, string hint, TParam hintParameter);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("MySql", "1", "LinqToDB.DataProvider.TableSpecHintExtensionBuilder", " ", ", ")]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
public static IMySqlSpecificTable`1<TSource> TableHint(IMySqlSpecificTable`1<TSource> table, string hint, TParam[] hintParameters);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("MySql", "2", "LinqToDB.DataProvider.TableSpecHintExtensionBuilder")]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
public static IMySqlSpecificQueryable`1<TSource> TablesInScopeHint(IMySqlSpecificQueryable`1<TSource> source, string hint);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("MySql", "2", "LinqToDB.DataProvider.TableSpecHintExtensionBuilder")]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
public static IMySqlSpecificQueryable`1<TSource> TablesInScopeHint(IMySqlSpecificQueryable`1<TSource> source, string hint, TParam hintParameter);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("MySql", "2", "LinqToDB.DataProvider.TableSpecHintExtensionBuilder", " ", ", ")]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
public static IMySqlSpecificQueryable`1<TSource> TablesInScopeHint(IMySqlSpecificQueryable`1<TSource> source, string hint, Object[] hintParameters);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("MySql", "3", "LinqToDB.SqlProvider.HintExtensionBuilder")]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
public static IMySqlSpecificTable`1<TSource> TableIndexHint(IMySqlSpecificTable`1<TSource> table, string hint);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("MySql", "3", "LinqToDB.SqlProvider.HintWithParameterExtensionBuilder")]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
public static IMySqlSpecificTable`1<TSource> TableIndexHint(IMySqlSpecificTable`1<TSource> table, string hint, TParam hintParameter);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("MySql", "3", "LinqToDB.SqlProvider.HintWithParametersExtensionBuilder")]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
public static IMySqlSpecificTable`1<TSource> TableIndexHint(IMySqlSpecificTable`1<TSource> table, string hint, TParam[] hintParameters);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("MySql", "5", "LinqToDB.SqlProvider.HintExtensionBuilder")]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
public static IMySqlSpecificQueryable`1<TSource> SubQueryHint(IMySqlSpecificQueryable`1<TSource> source, string hint);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("MySql", "5", "LinqToDB.SqlProvider.HintWithParameterExtensionBuilder")]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
public static IMySqlSpecificQueryable`1<TSource> SubQueryHint(IMySqlSpecificQueryable`1<TSource> source, string hint, TParam hintParameter);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("MySql", "5", "LinqToDB.SqlProvider.HintWithParametersExtensionBuilder")]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
public static IMySqlSpecificQueryable`1<TSource> SubQueryHint(IMySqlSpecificQueryable`1<TSource> source, string hint, TParam[] hintParameters);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("MySql", "6", "LinqToDB.SqlProvider.HintExtensionBuilder")]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
public static IMySqlSpecificQueryable`1<TSource> QueryHint(IMySqlSpecificQueryable`1<TSource> source, string hint);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("MySql", "6", "LinqToDB.SqlProvider.HintWithParameterExtensionBuilder")]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
public static IMySqlSpecificQueryable`1<TSource> QueryHint(IMySqlSpecificQueryable`1<TSource> source, string hint, TParam hintParameter);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("MySql", "6", "LinqToDB.SqlProvider.HintWithParametersExtensionBuilder")]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
public static IMySqlSpecificQueryable`1<TSource> QueryHint(IMySqlSpecificQueryable`1<TSource> source, string hint, TParam[] hintParameters);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("MySql", "5", "LinqToDB.DataProvider.MySql.MySqlHints/SubQueryTableHintExtensionBuilder")]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
public static IMySqlSpecificQueryable`1<TSource> SubQueryTableHint(IMySqlSpecificQueryable`1<TSource> source, string hint, SqlID[] tableIDs);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("MySql", "5", "LinqToDB.DataProvider.MySql.MySqlHints/SubQueryTableHintExtensionBuilder")]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
public static IMySqlSpecificQueryable`1<TSource> SubQueryTableHint(IMySqlSpecificQueryable`1<TSource> source, string hint, string hint2, SqlID[] tableIDs);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("MySql", "5", "LinqToDB.DataProvider.MySql.MySqlHints/SubQueryTableHintExtensionBuilder")]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
public static IMySqlSpecificTable`1<TSource> SubQueryTableHint(IMySqlSpecificTable`1<TSource> table, string hint, SqlID[] tableIDs);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("MySql", "5", "LinqToDB.DataProvider.MySql.MySqlHints/SubQueryTableHintExtensionBuilder")]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
public static IMySqlSpecificTable`1<TSource> SubQueryTableHint(IMySqlSpecificTable`1<TSource> table, string hint, string hint2, SqlID[] tableIDs);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[ExpressionMethodAttribute("LockInShareModeHintImpl")]
public static IMySqlSpecificQueryable`1<TSource> LockInShareModeHint(IMySqlSpecificQueryable`1<TSource> query);
    [NullableContextAttribute("1")]
private static Expression`1<Func`2<IMySqlSpecificQueryable`1<TSource>, IMySqlSpecificQueryable`1<TSource>>> LockInShareModeHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("MySql", "JoinFixedOrderTableHintImpl")]
public static IMySqlSpecificTable`1<TSource> JoinFixedOrderHint(IMySqlSpecificTable`1<TSource> table);
    private static Expression`1<Func`2<IMySqlSpecificTable`1<TSource>, IMySqlSpecificTable`1<TSource>>> JoinFixedOrderTableHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("MySql", "JoinFixedOrderInScopeHintImpl")]
public static IMySqlSpecificQueryable`1<TSource> JoinFixedOrderInScopeHint(IMySqlSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IMySqlSpecificQueryable`1<TSource>, IMySqlSpecificQueryable`1<TSource>>> JoinFixedOrderInScopeHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("JoinFixedOrderHintImpl4")]
public static IMySqlSpecificQueryable`1<TSource> JoinFixedOrderHint(IMySqlSpecificQueryable`1<TSource> query, SqlID[] tableIDs);
    private static Expression`1<Func`3<IMySqlSpecificQueryable`1<TSource>, SqlID[], IMySqlSpecificQueryable`1<TSource>>> JoinFixedOrderHintImpl4();
    [ExtensionAttribute]
[ExpressionMethodAttribute("MySql", "JoinOrderTableHintImpl")]
public static IMySqlSpecificTable`1<TSource> JoinOrderHint(IMySqlSpecificTable`1<TSource> table);
    private static Expression`1<Func`2<IMySqlSpecificTable`1<TSource>, IMySqlSpecificTable`1<TSource>>> JoinOrderTableHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("MySql", "JoinOrderInScopeHintImpl")]
public static IMySqlSpecificQueryable`1<TSource> JoinOrderInScopeHint(IMySqlSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IMySqlSpecificQueryable`1<TSource>, IMySqlSpecificQueryable`1<TSource>>> JoinOrderInScopeHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("JoinOrderHintImpl4")]
public static IMySqlSpecificQueryable`1<TSource> JoinOrderHint(IMySqlSpecificQueryable`1<TSource> query, SqlID[] tableIDs);
    private static Expression`1<Func`3<IMySqlSpecificQueryable`1<TSource>, SqlID[], IMySqlSpecificQueryable`1<TSource>>> JoinOrderHintImpl4();
    [ExtensionAttribute]
[ExpressionMethodAttribute("MySql", "JoinPrefixTableHintImpl")]
public static IMySqlSpecificTable`1<TSource> JoinPrefixHint(IMySqlSpecificTable`1<TSource> table);
    private static Expression`1<Func`2<IMySqlSpecificTable`1<TSource>, IMySqlSpecificTable`1<TSource>>> JoinPrefixTableHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("MySql", "JoinPrefixInScopeHintImpl")]
public static IMySqlSpecificQueryable`1<TSource> JoinPrefixInScopeHint(IMySqlSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IMySqlSpecificQueryable`1<TSource>, IMySqlSpecificQueryable`1<TSource>>> JoinPrefixInScopeHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("JoinPrefixHintImpl4")]
public static IMySqlSpecificQueryable`1<TSource> JoinPrefixHint(IMySqlSpecificQueryable`1<TSource> query, SqlID[] tableIDs);
    private static Expression`1<Func`3<IMySqlSpecificQueryable`1<TSource>, SqlID[], IMySqlSpecificQueryable`1<TSource>>> JoinPrefixHintImpl4();
    [ExtensionAttribute]
[ExpressionMethodAttribute("MySql", "JoinSuffixTableHintImpl")]
public static IMySqlSpecificTable`1<TSource> JoinSuffixHint(IMySqlSpecificTable`1<TSource> table);
    private static Expression`1<Func`2<IMySqlSpecificTable`1<TSource>, IMySqlSpecificTable`1<TSource>>> JoinSuffixTableHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("MySql", "JoinSuffixInScopeHintImpl")]
public static IMySqlSpecificQueryable`1<TSource> JoinSuffixInScopeHint(IMySqlSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IMySqlSpecificQueryable`1<TSource>, IMySqlSpecificQueryable`1<TSource>>> JoinSuffixInScopeHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("JoinSuffixHintImpl4")]
public static IMySqlSpecificQueryable`1<TSource> JoinSuffixHint(IMySqlSpecificQueryable`1<TSource> query, SqlID[] tableIDs);
    private static Expression`1<Func`3<IMySqlSpecificQueryable`1<TSource>, SqlID[], IMySqlSpecificQueryable`1<TSource>>> JoinSuffixHintImpl4();
    [ExtensionAttribute]
[ExpressionMethodAttribute("MySql", "BkaTableHintImpl")]
public static IMySqlSpecificTable`1<TSource> BkaHint(IMySqlSpecificTable`1<TSource> table);
    private static Expression`1<Func`2<IMySqlSpecificTable`1<TSource>, IMySqlSpecificTable`1<TSource>>> BkaTableHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("MySql", "BkaInScopeHintImpl")]
public static IMySqlSpecificQueryable`1<TSource> BkaInScopeHint(IMySqlSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IMySqlSpecificQueryable`1<TSource>, IMySqlSpecificQueryable`1<TSource>>> BkaInScopeHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("BkaHintImpl4")]
public static IMySqlSpecificQueryable`1<TSource> BkaHint(IMySqlSpecificQueryable`1<TSource> query, SqlID[] tableIDs);
    private static Expression`1<Func`3<IMySqlSpecificQueryable`1<TSource>, SqlID[], IMySqlSpecificQueryable`1<TSource>>> BkaHintImpl4();
    [ExtensionAttribute]
[ExpressionMethodAttribute("MySql", "BatchedKeyAccessTableHintImpl")]
public static IMySqlSpecificTable`1<TSource> BatchedKeyAccessHint(IMySqlSpecificTable`1<TSource> table);
    private static Expression`1<Func`2<IMySqlSpecificTable`1<TSource>, IMySqlSpecificTable`1<TSource>>> BatchedKeyAccessTableHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("MySql", "BatchedKeyAccessInScopeHintImpl")]
public static IMySqlSpecificQueryable`1<TSource> BatchedKeyAccessInScopeHint(IMySqlSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IMySqlSpecificQueryable`1<TSource>, IMySqlSpecificQueryable`1<TSource>>> BatchedKeyAccessInScopeHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("BatchedKeyAccessHintImpl4")]
public static IMySqlSpecificQueryable`1<TSource> BatchedKeyAccessHint(IMySqlSpecificQueryable`1<TSource> query, SqlID[] tableIDs);
    private static Expression`1<Func`3<IMySqlSpecificQueryable`1<TSource>, SqlID[], IMySqlSpecificQueryable`1<TSource>>> BatchedKeyAccessHintImpl4();
    [ExtensionAttribute]
[ExpressionMethodAttribute("MySql", "NoBkaTableHintImpl")]
public static IMySqlSpecificTable`1<TSource> NoBkaHint(IMySqlSpecificTable`1<TSource> table);
    private static Expression`1<Func`2<IMySqlSpecificTable`1<TSource>, IMySqlSpecificTable`1<TSource>>> NoBkaTableHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("MySql", "NoBkaInScopeHintImpl")]
public static IMySqlSpecificQueryable`1<TSource> NoBkaInScopeHint(IMySqlSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IMySqlSpecificQueryable`1<TSource>, IMySqlSpecificQueryable`1<TSource>>> NoBkaInScopeHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("NoBkaHintImpl4")]
public static IMySqlSpecificQueryable`1<TSource> NoBkaHint(IMySqlSpecificQueryable`1<TSource> query, SqlID[] tableIDs);
    private static Expression`1<Func`3<IMySqlSpecificQueryable`1<TSource>, SqlID[], IMySqlSpecificQueryable`1<TSource>>> NoBkaHintImpl4();
    [ExtensionAttribute]
[ExpressionMethodAttribute("MySql", "NoBatchedKeyAccessTableHintImpl")]
public static IMySqlSpecificTable`1<TSource> NoBatchedKeyAccessHint(IMySqlSpecificTable`1<TSource> table);
    private static Expression`1<Func`2<IMySqlSpecificTable`1<TSource>, IMySqlSpecificTable`1<TSource>>> NoBatchedKeyAccessTableHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("MySql", "NoBatchedKeyAccessInScopeHintImpl")]
public static IMySqlSpecificQueryable`1<TSource> NoBatchedKeyAccessInScopeHint(IMySqlSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IMySqlSpecificQueryable`1<TSource>, IMySqlSpecificQueryable`1<TSource>>> NoBatchedKeyAccessInScopeHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("NoBatchedKeyAccessHintImpl4")]
public static IMySqlSpecificQueryable`1<TSource> NoBatchedKeyAccessHint(IMySqlSpecificQueryable`1<TSource> query, SqlID[] tableIDs);
    private static Expression`1<Func`3<IMySqlSpecificQueryable`1<TSource>, SqlID[], IMySqlSpecificQueryable`1<TSource>>> NoBatchedKeyAccessHintImpl4();
    [ExtensionAttribute]
[ExpressionMethodAttribute("MySql", "BnlTableHintImpl")]
public static IMySqlSpecificTable`1<TSource> BnlHint(IMySqlSpecificTable`1<TSource> table);
    private static Expression`1<Func`2<IMySqlSpecificTable`1<TSource>, IMySqlSpecificTable`1<TSource>>> BnlTableHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("MySql", "BnlInScopeHintImpl")]
public static IMySqlSpecificQueryable`1<TSource> BnlInScopeHint(IMySqlSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IMySqlSpecificQueryable`1<TSource>, IMySqlSpecificQueryable`1<TSource>>> BnlInScopeHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("BnlHintImpl4")]
public static IMySqlSpecificQueryable`1<TSource> BnlHint(IMySqlSpecificQueryable`1<TSource> query, SqlID[] tableIDs);
    private static Expression`1<Func`3<IMySqlSpecificQueryable`1<TSource>, SqlID[], IMySqlSpecificQueryable`1<TSource>>> BnlHintImpl4();
    [ExtensionAttribute]
[ExpressionMethodAttribute("MySql", "BlockNestedLoopTableHintImpl")]
public static IMySqlSpecificTable`1<TSource> BlockNestedLoopHint(IMySqlSpecificTable`1<TSource> table);
    private static Expression`1<Func`2<IMySqlSpecificTable`1<TSource>, IMySqlSpecificTable`1<TSource>>> BlockNestedLoopTableHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("MySql", "BlockNestedLoopInScopeHintImpl")]
public static IMySqlSpecificQueryable`1<TSource> BlockNestedLoopInScopeHint(IMySqlSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IMySqlSpecificQueryable`1<TSource>, IMySqlSpecificQueryable`1<TSource>>> BlockNestedLoopInScopeHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("BlockNestedLoopHintImpl4")]
public static IMySqlSpecificQueryable`1<TSource> BlockNestedLoopHint(IMySqlSpecificQueryable`1<TSource> query, SqlID[] tableIDs);
    private static Expression`1<Func`3<IMySqlSpecificQueryable`1<TSource>, SqlID[], IMySqlSpecificQueryable`1<TSource>>> BlockNestedLoopHintImpl4();
    [ExtensionAttribute]
[ExpressionMethodAttribute("MySql", "NoBnlTableHintImpl")]
public static IMySqlSpecificTable`1<TSource> NoBnlHint(IMySqlSpecificTable`1<TSource> table);
    private static Expression`1<Func`2<IMySqlSpecificTable`1<TSource>, IMySqlSpecificTable`1<TSource>>> NoBnlTableHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("MySql", "NoBnlInScopeHintImpl")]
public static IMySqlSpecificQueryable`1<TSource> NoBnlInScopeHint(IMySqlSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IMySqlSpecificQueryable`1<TSource>, IMySqlSpecificQueryable`1<TSource>>> NoBnlInScopeHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("NoBnlHintImpl4")]
public static IMySqlSpecificQueryable`1<TSource> NoBnlHint(IMySqlSpecificQueryable`1<TSource> query, SqlID[] tableIDs);
    private static Expression`1<Func`3<IMySqlSpecificQueryable`1<TSource>, SqlID[], IMySqlSpecificQueryable`1<TSource>>> NoBnlHintImpl4();
    [ExtensionAttribute]
[ExpressionMethodAttribute("MySql", "NoBlockNestedLoopTableHintImpl")]
public static IMySqlSpecificTable`1<TSource> NoBlockNestedLoopHint(IMySqlSpecificTable`1<TSource> table);
    private static Expression`1<Func`2<IMySqlSpecificTable`1<TSource>, IMySqlSpecificTable`1<TSource>>> NoBlockNestedLoopTableHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("MySql", "NoBlockNestedLoopInScopeHintImpl")]
public static IMySqlSpecificQueryable`1<TSource> NoBlockNestedLoopInScopeHint(IMySqlSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IMySqlSpecificQueryable`1<TSource>, IMySqlSpecificQueryable`1<TSource>>> NoBlockNestedLoopInScopeHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("NoBlockNestedLoopHintImpl4")]
public static IMySqlSpecificQueryable`1<TSource> NoBlockNestedLoopHint(IMySqlSpecificQueryable`1<TSource> query, SqlID[] tableIDs);
    private static Expression`1<Func`3<IMySqlSpecificQueryable`1<TSource>, SqlID[], IMySqlSpecificQueryable`1<TSource>>> NoBlockNestedLoopHintImpl4();
    [ExtensionAttribute]
[ExpressionMethodAttribute("MySql", "DerivedConditionPushDownTableHintImpl")]
public static IMySqlSpecificTable`1<TSource> DerivedConditionPushDownHint(IMySqlSpecificTable`1<TSource> table);
    private static Expression`1<Func`2<IMySqlSpecificTable`1<TSource>, IMySqlSpecificTable`1<TSource>>> DerivedConditionPushDownTableHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("MySql", "DerivedConditionPushDownInScopeHintImpl")]
public static IMySqlSpecificQueryable`1<TSource> DerivedConditionPushDownInScopeHint(IMySqlSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IMySqlSpecificQueryable`1<TSource>, IMySqlSpecificQueryable`1<TSource>>> DerivedConditionPushDownInScopeHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("DerivedConditionPushDownHintImpl4")]
public static IMySqlSpecificQueryable`1<TSource> DerivedConditionPushDownHint(IMySqlSpecificQueryable`1<TSource> query, SqlID[] tableIDs);
    private static Expression`1<Func`3<IMySqlSpecificQueryable`1<TSource>, SqlID[], IMySqlSpecificQueryable`1<TSource>>> DerivedConditionPushDownHintImpl4();
    [ExtensionAttribute]
[ExpressionMethodAttribute("MySql", "NoDerivedConditionPushDownTableHintImpl")]
public static IMySqlSpecificTable`1<TSource> NoDerivedConditionPushDownHint(IMySqlSpecificTable`1<TSource> table);
    private static Expression`1<Func`2<IMySqlSpecificTable`1<TSource>, IMySqlSpecificTable`1<TSource>>> NoDerivedConditionPushDownTableHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("MySql", "NoDerivedConditionPushDownInScopeHintImpl")]
public static IMySqlSpecificQueryable`1<TSource> NoDerivedConditionPushDownInScopeHint(IMySqlSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IMySqlSpecificQueryable`1<TSource>, IMySqlSpecificQueryable`1<TSource>>> NoDerivedConditionPushDownInScopeHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("NoDerivedConditionPushDownHintImpl4")]
public static IMySqlSpecificQueryable`1<TSource> NoDerivedConditionPushDownHint(IMySqlSpecificQueryable`1<TSource> query, SqlID[] tableIDs);
    private static Expression`1<Func`3<IMySqlSpecificQueryable`1<TSource>, SqlID[], IMySqlSpecificQueryable`1<TSource>>> NoDerivedConditionPushDownHintImpl4();
    [ExtensionAttribute]
[ExpressionMethodAttribute("MySql", "HashJoinTableHintImpl")]
public static IMySqlSpecificTable`1<TSource> HashJoinHint(IMySqlSpecificTable`1<TSource> table);
    private static Expression`1<Func`2<IMySqlSpecificTable`1<TSource>, IMySqlSpecificTable`1<TSource>>> HashJoinTableHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("MySql", "HashJoinInScopeHintImpl")]
public static IMySqlSpecificQueryable`1<TSource> HashJoinInScopeHint(IMySqlSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IMySqlSpecificQueryable`1<TSource>, IMySqlSpecificQueryable`1<TSource>>> HashJoinInScopeHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("HashJoinHintImpl4")]
public static IMySqlSpecificQueryable`1<TSource> HashJoinHint(IMySqlSpecificQueryable`1<TSource> query, SqlID[] tableIDs);
    private static Expression`1<Func`3<IMySqlSpecificQueryable`1<TSource>, SqlID[], IMySqlSpecificQueryable`1<TSource>>> HashJoinHintImpl4();
    [ExtensionAttribute]
[ExpressionMethodAttribute("MySql", "NoHashJoinTableHintImpl")]
public static IMySqlSpecificTable`1<TSource> NoHashJoinHint(IMySqlSpecificTable`1<TSource> table);
    private static Expression`1<Func`2<IMySqlSpecificTable`1<TSource>, IMySqlSpecificTable`1<TSource>>> NoHashJoinTableHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("MySql", "NoHashJoinInScopeHintImpl")]
public static IMySqlSpecificQueryable`1<TSource> NoHashJoinInScopeHint(IMySqlSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IMySqlSpecificQueryable`1<TSource>, IMySqlSpecificQueryable`1<TSource>>> NoHashJoinInScopeHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("NoHashJoinHintImpl4")]
public static IMySqlSpecificQueryable`1<TSource> NoHashJoinHint(IMySqlSpecificQueryable`1<TSource> query, SqlID[] tableIDs);
    private static Expression`1<Func`3<IMySqlSpecificQueryable`1<TSource>, SqlID[], IMySqlSpecificQueryable`1<TSource>>> NoHashJoinHintImpl4();
    [ExtensionAttribute]
[ExpressionMethodAttribute("MySql", "MergeTableHintImpl")]
public static IMySqlSpecificTable`1<TSource> MergeHint(IMySqlSpecificTable`1<TSource> table);
    private static Expression`1<Func`2<IMySqlSpecificTable`1<TSource>, IMySqlSpecificTable`1<TSource>>> MergeTableHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("MySql", "MergeInScopeHintImpl")]
public static IMySqlSpecificQueryable`1<TSource> MergeInScopeHint(IMySqlSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IMySqlSpecificQueryable`1<TSource>, IMySqlSpecificQueryable`1<TSource>>> MergeInScopeHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("MergeHintImpl4")]
public static IMySqlSpecificQueryable`1<TSource> MergeHint(IMySqlSpecificQueryable`1<TSource> query, SqlID[] tableIDs);
    private static Expression`1<Func`3<IMySqlSpecificQueryable`1<TSource>, SqlID[], IMySqlSpecificQueryable`1<TSource>>> MergeHintImpl4();
    [ExtensionAttribute]
[ExpressionMethodAttribute("MySql", "NoMergeTableHintImpl")]
public static IMySqlSpecificTable`1<TSource> NoMergeHint(IMySqlSpecificTable`1<TSource> table);
    private static Expression`1<Func`2<IMySqlSpecificTable`1<TSource>, IMySqlSpecificTable`1<TSource>>> NoMergeTableHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("MySql", "NoMergeInScopeHintImpl")]
public static IMySqlSpecificQueryable`1<TSource> NoMergeInScopeHint(IMySqlSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IMySqlSpecificQueryable`1<TSource>, IMySqlSpecificQueryable`1<TSource>>> NoMergeInScopeHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("NoMergeHintImpl4")]
public static IMySqlSpecificQueryable`1<TSource> NoMergeHint(IMySqlSpecificQueryable`1<TSource> query, SqlID[] tableIDs);
    private static Expression`1<Func`3<IMySqlSpecificQueryable`1<TSource>, SqlID[], IMySqlSpecificQueryable`1<TSource>>> NoMergeHintImpl4();
    [ExtensionAttribute]
[ExpressionMethodAttribute("MySql", "GroupIndexIndexHintImpl")]
public static IMySqlSpecificTable`1<TSource> GroupIndexHint(IMySqlSpecificTable`1<TSource> table, String[] indexNames);
    private static Expression`1<Func`3<IMySqlSpecificTable`1<TSource>, String[], IMySqlSpecificTable`1<TSource>>> GroupIndexIndexHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("MySql", "NoGroupIndexIndexHintImpl")]
public static IMySqlSpecificTable`1<TSource> NoGroupIndexHint(IMySqlSpecificTable`1<TSource> table, String[] indexNames);
    private static Expression`1<Func`3<IMySqlSpecificTable`1<TSource>, String[], IMySqlSpecificTable`1<TSource>>> NoGroupIndexIndexHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("MySql", "IndexIndexHintImpl")]
public static IMySqlSpecificTable`1<TSource> IndexHint(IMySqlSpecificTable`1<TSource> table, String[] indexNames);
    private static Expression`1<Func`3<IMySqlSpecificTable`1<TSource>, String[], IMySqlSpecificTable`1<TSource>>> IndexIndexHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("MySql", "NoIndexIndexHintImpl")]
public static IMySqlSpecificTable`1<TSource> NoIndexHint(IMySqlSpecificTable`1<TSource> table, String[] indexNames);
    private static Expression`1<Func`3<IMySqlSpecificTable`1<TSource>, String[], IMySqlSpecificTable`1<TSource>>> NoIndexIndexHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("MySql", "IndexMergeIndexHintImpl")]
public static IMySqlSpecificTable`1<TSource> IndexMergeHint(IMySqlSpecificTable`1<TSource> table, String[] indexNames);
    private static Expression`1<Func`3<IMySqlSpecificTable`1<TSource>, String[], IMySqlSpecificTable`1<TSource>>> IndexMergeIndexHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("MySql", "NoIndexMergeIndexHintImpl")]
public static IMySqlSpecificTable`1<TSource> NoIndexMergeHint(IMySqlSpecificTable`1<TSource> table, String[] indexNames);
    private static Expression`1<Func`3<IMySqlSpecificTable`1<TSource>, String[], IMySqlSpecificTable`1<TSource>>> NoIndexMergeIndexHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("MySql", "JoinIndexIndexHintImpl")]
public static IMySqlSpecificTable`1<TSource> JoinIndexHint(IMySqlSpecificTable`1<TSource> table, String[] indexNames);
    private static Expression`1<Func`3<IMySqlSpecificTable`1<TSource>, String[], IMySqlSpecificTable`1<TSource>>> JoinIndexIndexHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("MySql", "NoJoinIndexIndexHintImpl")]
public static IMySqlSpecificTable`1<TSource> NoJoinIndexHint(IMySqlSpecificTable`1<TSource> table, String[] indexNames);
    private static Expression`1<Func`3<IMySqlSpecificTable`1<TSource>, String[], IMySqlSpecificTable`1<TSource>>> NoJoinIndexIndexHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("MySql", "MrrIndexHintImpl")]
public static IMySqlSpecificTable`1<TSource> MrrHint(IMySqlSpecificTable`1<TSource> table, String[] indexNames);
    private static Expression`1<Func`3<IMySqlSpecificTable`1<TSource>, String[], IMySqlSpecificTable`1<TSource>>> MrrIndexHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("MySql", "NoMrrIndexHintImpl")]
public static IMySqlSpecificTable`1<TSource> NoMrrHint(IMySqlSpecificTable`1<TSource> table, String[] indexNames);
    private static Expression`1<Func`3<IMySqlSpecificTable`1<TSource>, String[], IMySqlSpecificTable`1<TSource>>> NoMrrIndexHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("MySql", "NoIcpIndexHintImpl")]
public static IMySqlSpecificTable`1<TSource> NoIcpHint(IMySqlSpecificTable`1<TSource> table, String[] indexNames);
    private static Expression`1<Func`3<IMySqlSpecificTable`1<TSource>, String[], IMySqlSpecificTable`1<TSource>>> NoIcpIndexHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("MySql", "NoRangeOptimizationIndexHintImpl")]
public static IMySqlSpecificTable`1<TSource> NoRangeOptimizationHint(IMySqlSpecificTable`1<TSource> table, String[] indexNames);
    private static Expression`1<Func`3<IMySqlSpecificTable`1<TSource>, String[], IMySqlSpecificTable`1<TSource>>> NoRangeOptimizationIndexHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("MySql", "OrderIndexIndexHintImpl")]
public static IMySqlSpecificTable`1<TSource> OrderIndexHint(IMySqlSpecificTable`1<TSource> table, String[] indexNames);
    private static Expression`1<Func`3<IMySqlSpecificTable`1<TSource>, String[], IMySqlSpecificTable`1<TSource>>> OrderIndexIndexHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("MySql", "NoOrderIndexIndexHintImpl")]
public static IMySqlSpecificTable`1<TSource> NoOrderIndexHint(IMySqlSpecificTable`1<TSource> table, String[] indexNames);
    private static Expression`1<Func`3<IMySqlSpecificTable`1<TSource>, String[], IMySqlSpecificTable`1<TSource>>> NoOrderIndexIndexHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("MySql", "SkipScanIndexHintImpl")]
public static IMySqlSpecificTable`1<TSource> SkipScanHint(IMySqlSpecificTable`1<TSource> table, String[] indexNames);
    private static Expression`1<Func`3<IMySqlSpecificTable`1<TSource>, String[], IMySqlSpecificTable`1<TSource>>> SkipScanIndexHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("MySql", "NoSkipScanIndexHintImpl")]
public static IMySqlSpecificTable`1<TSource> NoSkipScanHint(IMySqlSpecificTable`1<TSource> table, String[] indexNames);
    private static Expression`1<Func`3<IMySqlSpecificTable`1<TSource>, String[], IMySqlSpecificTable`1<TSource>>> NoSkipScanIndexHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("SemiJoinHintImpl5")]
public static IMySqlSpecificQueryable`1<TSource> SemiJoinHint(IMySqlSpecificQueryable`1<TSource> query, String[] values);
    private static Expression`1<Func`3<IMySqlSpecificQueryable`1<TSource>, String[], IMySqlSpecificQueryable`1<TSource>>> SemiJoinHintImpl5();
    [ExtensionAttribute]
[ExpressionMethodAttribute("NoSemiJoinHintImpl5")]
public static IMySqlSpecificQueryable`1<TSource> NoSemiJoinHint(IMySqlSpecificQueryable`1<TSource> query, String[] values);
    private static Expression`1<Func`3<IMySqlSpecificQueryable`1<TSource>, String[], IMySqlSpecificQueryable`1<TSource>>> NoSemiJoinHintImpl5();
    [ExtensionAttribute]
[ExpressionMethodAttribute("MaxExecutionTimeHintImpl2")]
public static IMySqlSpecificQueryable`1<TSource> MaxExecutionTimeHint(IMySqlSpecificQueryable`1<TSource> query, int value);
    private static Expression`1<Func`3<IMySqlSpecificQueryable`1<TSource>, int, IMySqlSpecificQueryable`1<TSource>>> MaxExecutionTimeHintImpl2();
    [ExtensionAttribute]
[ExpressionMethodAttribute("SetVarHintImpl3")]
public static IMySqlSpecificQueryable`1<TSource> SetVarHint(IMySqlSpecificQueryable`1<TSource> query, string value);
    private static Expression`1<Func`3<IMySqlSpecificQueryable`1<TSource>, string, IMySqlSpecificQueryable`1<TSource>>> SetVarHintImpl3();
    [ExtensionAttribute]
[ExpressionMethodAttribute("ResourceGroupHintImpl3")]
public static IMySqlSpecificQueryable`1<TSource> ResourceGroupHint(IMySqlSpecificQueryable`1<TSource> query, string value);
    private static Expression`1<Func`3<IMySqlSpecificQueryable`1<TSource>, string, IMySqlSpecificQueryable`1<TSource>>> ResourceGroupHintImpl3();
    [ExtensionAttribute]
[ExpressionMethodAttribute("MySql", "UseIndexIndexHintImpl")]
public static IMySqlSpecificTable`1<TSource> UseIndexHint(IMySqlSpecificTable`1<TSource> table, String[] indexNames);
    private static Expression`1<Func`3<IMySqlSpecificTable`1<TSource>, String[], IMySqlSpecificTable`1<TSource>>> UseIndexIndexHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("MySql", "UseIndexForJoinIndexHintImpl")]
public static IMySqlSpecificTable`1<TSource> UseIndexForJoinHint(IMySqlSpecificTable`1<TSource> table, String[] indexNames);
    private static Expression`1<Func`3<IMySqlSpecificTable`1<TSource>, String[], IMySqlSpecificTable`1<TSource>>> UseIndexForJoinIndexHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("MySql", "UseIndexForOrderByIndexHintImpl")]
public static IMySqlSpecificTable`1<TSource> UseIndexForOrderByHint(IMySqlSpecificTable`1<TSource> table, String[] indexNames);
    private static Expression`1<Func`3<IMySqlSpecificTable`1<TSource>, String[], IMySqlSpecificTable`1<TSource>>> UseIndexForOrderByIndexHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("MySql", "UseIndexForGroupByIndexHintImpl")]
public static IMySqlSpecificTable`1<TSource> UseIndexForGroupByHint(IMySqlSpecificTable`1<TSource> table, String[] indexNames);
    private static Expression`1<Func`3<IMySqlSpecificTable`1<TSource>, String[], IMySqlSpecificTable`1<TSource>>> UseIndexForGroupByIndexHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("MySql", "UseKeyIndexHintImpl")]
public static IMySqlSpecificTable`1<TSource> UseKeyHint(IMySqlSpecificTable`1<TSource> table, String[] indexNames);
    private static Expression`1<Func`3<IMySqlSpecificTable`1<TSource>, String[], IMySqlSpecificTable`1<TSource>>> UseKeyIndexHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("MySql", "UseKeyForJoinIndexHintImpl")]
public static IMySqlSpecificTable`1<TSource> UseKeyForJoinHint(IMySqlSpecificTable`1<TSource> table, String[] indexNames);
    private static Expression`1<Func`3<IMySqlSpecificTable`1<TSource>, String[], IMySqlSpecificTable`1<TSource>>> UseKeyForJoinIndexHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("MySql", "UseKeyForOrderByIndexHintImpl")]
public static IMySqlSpecificTable`1<TSource> UseKeyForOrderByHint(IMySqlSpecificTable`1<TSource> table, String[] indexNames);
    private static Expression`1<Func`3<IMySqlSpecificTable`1<TSource>, String[], IMySqlSpecificTable`1<TSource>>> UseKeyForOrderByIndexHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("MySql", "UseKeyForGroupByIndexHintImpl")]
public static IMySqlSpecificTable`1<TSource> UseKeyForGroupByHint(IMySqlSpecificTable`1<TSource> table, String[] indexNames);
    private static Expression`1<Func`3<IMySqlSpecificTable`1<TSource>, String[], IMySqlSpecificTable`1<TSource>>> UseKeyForGroupByIndexHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("MySql", "IgnoreIndexIndexHintImpl")]
public static IMySqlSpecificTable`1<TSource> IgnoreIndexHint(IMySqlSpecificTable`1<TSource> table, String[] indexNames);
    private static Expression`1<Func`3<IMySqlSpecificTable`1<TSource>, String[], IMySqlSpecificTable`1<TSource>>> IgnoreIndexIndexHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("MySql", "IgnoreIndexForJoinIndexHintImpl")]
public static IMySqlSpecificTable`1<TSource> IgnoreIndexForJoinHint(IMySqlSpecificTable`1<TSource> table, String[] indexNames);
    private static Expression`1<Func`3<IMySqlSpecificTable`1<TSource>, String[], IMySqlSpecificTable`1<TSource>>> IgnoreIndexForJoinIndexHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("MySql", "IgnoreIndexForOrderByIndexHintImpl")]
public static IMySqlSpecificTable`1<TSource> IgnoreIndexForOrderByHint(IMySqlSpecificTable`1<TSource> table, String[] indexNames);
    private static Expression`1<Func`3<IMySqlSpecificTable`1<TSource>, String[], IMySqlSpecificTable`1<TSource>>> IgnoreIndexForOrderByIndexHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("MySql", "IgnoreIndexForGroupByIndexHintImpl")]
public static IMySqlSpecificTable`1<TSource> IgnoreIndexForGroupByHint(IMySqlSpecificTable`1<TSource> table, String[] indexNames);
    private static Expression`1<Func`3<IMySqlSpecificTable`1<TSource>, String[], IMySqlSpecificTable`1<TSource>>> IgnoreIndexForGroupByIndexHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("MySql", "IgnoreKeyIndexHintImpl")]
public static IMySqlSpecificTable`1<TSource> IgnoreKeyHint(IMySqlSpecificTable`1<TSource> table, String[] indexNames);
    private static Expression`1<Func`3<IMySqlSpecificTable`1<TSource>, String[], IMySqlSpecificTable`1<TSource>>> IgnoreKeyIndexHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("MySql", "IgnoreKeyForJoinIndexHintImpl")]
public static IMySqlSpecificTable`1<TSource> IgnoreKeyForJoinHint(IMySqlSpecificTable`1<TSource> table, String[] indexNames);
    private static Expression`1<Func`3<IMySqlSpecificTable`1<TSource>, String[], IMySqlSpecificTable`1<TSource>>> IgnoreKeyForJoinIndexHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("MySql", "IgnoreKeyForOrderByIndexHintImpl")]
public static IMySqlSpecificTable`1<TSource> IgnoreKeyForOrderByHint(IMySqlSpecificTable`1<TSource> table, String[] indexNames);
    private static Expression`1<Func`3<IMySqlSpecificTable`1<TSource>, String[], IMySqlSpecificTable`1<TSource>>> IgnoreKeyForOrderByIndexHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("MySql", "IgnoreKeyForGroupByIndexHintImpl")]
public static IMySqlSpecificTable`1<TSource> IgnoreKeyForGroupByHint(IMySqlSpecificTable`1<TSource> table, String[] indexNames);
    private static Expression`1<Func`3<IMySqlSpecificTable`1<TSource>, String[], IMySqlSpecificTable`1<TSource>>> IgnoreKeyForGroupByIndexHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("MySql", "ForceIndexIndexHintImpl")]
public static IMySqlSpecificTable`1<TSource> ForceIndexHint(IMySqlSpecificTable`1<TSource> table, String[] indexNames);
    private static Expression`1<Func`3<IMySqlSpecificTable`1<TSource>, String[], IMySqlSpecificTable`1<TSource>>> ForceIndexIndexHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("MySql", "ForceIndexForJoinIndexHintImpl")]
public static IMySqlSpecificTable`1<TSource> ForceIndexForJoinHint(IMySqlSpecificTable`1<TSource> table, String[] indexNames);
    private static Expression`1<Func`3<IMySqlSpecificTable`1<TSource>, String[], IMySqlSpecificTable`1<TSource>>> ForceIndexForJoinIndexHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("MySql", "ForceIndexForOrderByIndexHintImpl")]
public static IMySqlSpecificTable`1<TSource> ForceIndexForOrderByHint(IMySqlSpecificTable`1<TSource> table, String[] indexNames);
    private static Expression`1<Func`3<IMySqlSpecificTable`1<TSource>, String[], IMySqlSpecificTable`1<TSource>>> ForceIndexForOrderByIndexHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("MySql", "ForceIndexForGroupByIndexHintImpl")]
public static IMySqlSpecificTable`1<TSource> ForceIndexForGroupByHint(IMySqlSpecificTable`1<TSource> table, String[] indexNames);
    private static Expression`1<Func`3<IMySqlSpecificTable`1<TSource>, String[], IMySqlSpecificTable`1<TSource>>> ForceIndexForGroupByIndexHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("MySql", "ForceKeyIndexHintImpl")]
public static IMySqlSpecificTable`1<TSource> ForceKeyHint(IMySqlSpecificTable`1<TSource> table, String[] indexNames);
    private static Expression`1<Func`3<IMySqlSpecificTable`1<TSource>, String[], IMySqlSpecificTable`1<TSource>>> ForceKeyIndexHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("MySql", "ForceKeyForJoinIndexHintImpl")]
public static IMySqlSpecificTable`1<TSource> ForceKeyForJoinHint(IMySqlSpecificTable`1<TSource> table, String[] indexNames);
    private static Expression`1<Func`3<IMySqlSpecificTable`1<TSource>, String[], IMySqlSpecificTable`1<TSource>>> ForceKeyForJoinIndexHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("MySql", "ForceKeyForOrderByIndexHintImpl")]
public static IMySqlSpecificTable`1<TSource> ForceKeyForOrderByHint(IMySqlSpecificTable`1<TSource> table, String[] indexNames);
    private static Expression`1<Func`3<IMySqlSpecificTable`1<TSource>, String[], IMySqlSpecificTable`1<TSource>>> ForceKeyForOrderByIndexHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("MySql", "ForceKeyForGroupByIndexHintImpl")]
public static IMySqlSpecificTable`1<TSource> ForceKeyForGroupByHint(IMySqlSpecificTable`1<TSource> table, String[] indexNames);
    private static Expression`1<Func`3<IMySqlSpecificTable`1<TSource>, String[], IMySqlSpecificTable`1<TSource>>> ForceKeyForGroupByIndexHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("ForUpdateHintImpl")]
public static IMySqlSpecificQueryable`1<TSource> ForUpdateHint(IMySqlSpecificQueryable`1<TSource> query, SqlID[] tableIDs);
    private static Expression`1<Func`3<IMySqlSpecificQueryable`1<TSource>, SqlID[], IMySqlSpecificQueryable`1<TSource>>> ForUpdateHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("ForUpdateNoWaitHintImpl")]
public static IMySqlSpecificQueryable`1<TSource> ForUpdateNoWaitHint(IMySqlSpecificQueryable`1<TSource> query, SqlID[] tableIDs);
    private static Expression`1<Func`3<IMySqlSpecificQueryable`1<TSource>, SqlID[], IMySqlSpecificQueryable`1<TSource>>> ForUpdateNoWaitHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("ForUpdateSkipLockedHintImpl")]
public static IMySqlSpecificQueryable`1<TSource> ForUpdateSkipLockedHint(IMySqlSpecificQueryable`1<TSource> query, SqlID[] tableIDs);
    private static Expression`1<Func`3<IMySqlSpecificQueryable`1<TSource>, SqlID[], IMySqlSpecificQueryable`1<TSource>>> ForUpdateSkipLockedHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("ForShareHintImpl")]
public static IMySqlSpecificQueryable`1<TSource> ForShareHint(IMySqlSpecificQueryable`1<TSource> query, SqlID[] tableIDs);
    private static Expression`1<Func`3<IMySqlSpecificQueryable`1<TSource>, SqlID[], IMySqlSpecificQueryable`1<TSource>>> ForShareHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("ForShareNoWaitHintImpl")]
public static IMySqlSpecificQueryable`1<TSource> ForShareNoWaitHint(IMySqlSpecificQueryable`1<TSource> query, SqlID[] tableIDs);
    private static Expression`1<Func`3<IMySqlSpecificQueryable`1<TSource>, SqlID[], IMySqlSpecificQueryable`1<TSource>>> ForShareNoWaitHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("ForShareSkipLockedHintImpl")]
public static IMySqlSpecificQueryable`1<TSource> ForShareSkipLockedHint(IMySqlSpecificQueryable`1<TSource> query, SqlID[] tableIDs);
    private static Expression`1<Func`3<IMySqlSpecificQueryable`1<TSource>, SqlID[], IMySqlSpecificQueryable`1<TSource>>> ForShareSkipLockedHintImpl();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.DataProvider.MySql.MySqlMappingSchema : LockedMappingSchema {
    internal static MySqlMappingSchema Instance;
    private static MySqlMappingSchema();
    private static ulong GetBits(BitArray ba);
    private static void ConvertStringToSql(StringBuilder stringBuilder, string value);
    private static void ConvertCharToSql(StringBuilder stringBuilder, char value);
    private static void ConvertBinaryToSql(StringBuilder stringBuilder, Byte[] value);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class LinqToDB.DataProvider.MySql.MySqlOptions : DataProviderOptions`1<MySqlOptions> {
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public MySqlOptions(BulkCopyType BulkCopyType);
    private MySqlOptions(MySqlOptions original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    protected virtual IdentifierBuilder CreateID(IdentifierBuilder builder);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(MySqlOptions other);
    public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(MySqlOptions left, MySqlOptions right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(MySqlOptions left, MySqlOptions right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(DataProviderOptions`1<MySqlOptions> other);
    [CompilerGeneratedAttribute]
public virtual DataProviderOptions`1<MySqlOptions> <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(BulkCopyType& BulkCopyType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class LinqToDB.DataProvider.MySql.MySqlProviderAdapter : object {
    private static Type[] _ordinalParameters;
    private static object _mysqlDataSyncRoot;
    private static object _mysqlConnectorSyncRoot;
    [NullableAttribute("2")]
private static MySqlProviderAdapter _mysqlDataInstance;
    [NullableAttribute("2")]
private static MySqlProviderAdapter _mysqlConnectorInstance;
    public static string MySqlConnectorAssemblyName;
    public static string MySqlDataAssemblyName;
    public static string MySqlDataClientNamespace;
    public static string MySqlDataTypesNamespace;
    public static string MySqlConnectorNamespace;
    public static string MySqlConnectorTypesNamespace;
    public static string OldMySqlConnectorNamespace;
    public static string OldMySqlConnectorTypesNamespace;
    [CompilerGeneratedAttribute]
private MySqlProvider <ProviderType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ConnectionType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <DataReaderType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ParameterType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <CommandType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <TransactionType>k__BackingField;
    [CompilerGeneratedAttribute]
private MappingSchema <MappingSchema>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Type <MySqlDecimalType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <MySqlDateTimeType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <MySqlGeometryType>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<object, string> <MySqlDecimalGetter>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <GetMySqlDecimalMethodName>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <GetDateTimeOffsetMethodName>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <GetTimeSpanMethodName>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <GetTimeOnlyMethodName>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <GetDateOnlyMethodName>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <GetSByteMethodName>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <GetUInt16MethodName>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <GetUInt32MethodName>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <GetUInt64MethodName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GetMySqlDateTimeMethodName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProviderTypesNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<DbParameter, object> <GetDbType>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private BulkCopyAdapter <BulkCopy>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDateOnlySupported>k__BackingField;
    public MySqlProvider ProviderType { get; protected set; }
    public Type ConnectionType { get; protected set; }
    public Type DataReaderType { get; protected set; }
    public Type ParameterType { get; protected set; }
    public Type CommandType { get; protected set; }
    public Type TransactionType { get; protected set; }
    public MappingSchema MappingSchema { get; protected set; }
    [NullableAttribute("2")]
public Type MySqlDecimalType { get; protected set; }
    public Type MySqlDateTimeType { get; protected set; }
    public Type MySqlGeometryType { get; protected set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<object, string> MySqlDecimalGetter { get; protected set; }
    [NullableAttribute("2")]
public string GetMySqlDecimalMethodName { get; protected set; }
    [NullableAttribute("2")]
public string GetDateTimeOffsetMethodName { get; protected set; }
    [NullableAttribute("2")]
public string GetTimeSpanMethodName { get; protected set; }
    [NullableAttribute("2")]
public string GetTimeOnlyMethodName { get; protected set; }
    [NullableAttribute("2")]
public string GetDateOnlyMethodName { get; protected set; }
    [NullableAttribute("2")]
public string GetSByteMethodName { get; protected set; }
    [NullableAttribute("2")]
public string GetUInt16MethodName { get; protected set; }
    [NullableAttribute("2")]
public string GetUInt32MethodName { get; protected set; }
    [NullableAttribute("2")]
public string GetUInt64MethodName { get; protected set; }
    public string GetMySqlDateTimeMethodName { get; protected set; }
    public string ProviderTypesNamespace { get; protected set; }
    public Func`2<DbParameter, object> GetDbType { get; protected set; }
    [NullableAttribute("2")]
public BulkCopyAdapter BulkCopy { get; protected set; }
    public bool IsDateOnlySupported { get; protected set; }
    public bool IsPackageProceduresSupported { get; }
    private static MySqlProviderAdapter();
    [CompilerGeneratedAttribute]
public MySqlProvider get_ProviderType();
    [CompilerGeneratedAttribute]
protected void set_ProviderType(MySqlProvider value);
    [CompilerGeneratedAttribute]
public sealed virtual Type get_ConnectionType();
    [CompilerGeneratedAttribute]
protected void set_ConnectionType(Type value);
    [CompilerGeneratedAttribute]
public sealed virtual Type get_DataReaderType();
    [CompilerGeneratedAttribute]
protected void set_DataReaderType(Type value);
    [CompilerGeneratedAttribute]
public sealed virtual Type get_ParameterType();
    [CompilerGeneratedAttribute]
protected void set_ParameterType(Type value);
    [CompilerGeneratedAttribute]
public sealed virtual Type get_CommandType();
    [CompilerGeneratedAttribute]
protected void set_CommandType(Type value);
    [CompilerGeneratedAttribute]
public sealed virtual Type get_TransactionType();
    [CompilerGeneratedAttribute]
protected void set_TransactionType(Type value);
    [CompilerGeneratedAttribute]
public MappingSchema get_MappingSchema();
    [CompilerGeneratedAttribute]
protected void set_MappingSchema(MappingSchema value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Type get_MySqlDecimalType();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected void set_MySqlDecimalType(Type value);
    [CompilerGeneratedAttribute]
public Type get_MySqlDateTimeType();
    [CompilerGeneratedAttribute]
protected void set_MySqlDateTimeType(Type value);
    [CompilerGeneratedAttribute]
public Type get_MySqlGeometryType();
    [CompilerGeneratedAttribute]
protected void set_MySqlGeometryType(Type value);
    [CompilerGeneratedAttribute]
public Func`2<object, string> get_MySqlDecimalGetter();
    [CompilerGeneratedAttribute]
protected void set_MySqlDecimalGetter(Func`2<object, string> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_GetMySqlDecimalMethodName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected void set_GetMySqlDecimalMethodName(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_GetDateTimeOffsetMethodName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected void set_GetDateTimeOffsetMethodName(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_GetTimeSpanMethodName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected void set_GetTimeSpanMethodName(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_GetTimeOnlyMethodName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected void set_GetTimeOnlyMethodName(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_GetDateOnlyMethodName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected void set_GetDateOnlyMethodName(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_GetSByteMethodName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected void set_GetSByteMethodName(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_GetUInt16MethodName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected void set_GetUInt16MethodName(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_GetUInt32MethodName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected void set_GetUInt32MethodName(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_GetUInt64MethodName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected void set_GetUInt64MethodName(string value);
    [CompilerGeneratedAttribute]
public string get_GetMySqlDateTimeMethodName();
    [CompilerGeneratedAttribute]
protected void set_GetMySqlDateTimeMethodName(string value);
    [CompilerGeneratedAttribute]
public string get_ProviderTypesNamespace();
    [CompilerGeneratedAttribute]
protected void set_ProviderTypesNamespace(string value);
    [CompilerGeneratedAttribute]
public Func`2<DbParameter, object> get_GetDbType();
    [CompilerGeneratedAttribute]
protected void set_GetDbType(Func`2<DbParameter, object> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public BulkCopyAdapter get_BulkCopy();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected void set_BulkCopy(BulkCopyAdapter value);
    [CompilerGeneratedAttribute]
public bool get_IsDateOnlySupported();
    [CompilerGeneratedAttribute]
protected void set_IsDateOnlySupported(bool value);
    public abstract virtual bool get_IsPackageProceduresSupported();
    public static MySqlProviderAdapter GetInstance(string name);
    private static void AppendAction(StringBuilder sb, string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.DataProvider.MySql.MySqlSchemaProvider : SchemaProviderBase {
    private MySqlDataProvider _provider;
    protected bool GetProcedureSchemaExecutesProcedure { get; }
    public MySqlSchemaProvider(MySqlDataProvider provider);
    protected virtual List`1<DataTypeInfo> GetDataTypes(DataConnection dataConnection);
    protected virtual bool get_GetProcedureSchemaExecutesProcedure();
    protected virtual List`1<TableInfo> GetTables(DataConnection dataConnection, GetSchemaOptions options);
    protected virtual IReadOnlyCollection`1<PrimaryKeyInfo> GetPrimaryKeys(DataConnection dataConnection, IEnumerable`1<TableSchema> tables, GetSchemaOptions options);
    protected virtual List`1<ColumnInfo> GetColumns(DataConnection dataConnection, GetSchemaOptions options);
    protected virtual IReadOnlyCollection`1<ForeignKeyInfo> GetForeignKeys(DataConnection dataConnection, IEnumerable`1<TableSchema> tables, GetSchemaOptions options);
    [NullableContextAttribute("2")]
protected virtual DataType GetDataType(string dataType, string columnType, Nullable`1<int> length, Nullable`1<int> precision, Nullable`1<int> scale);
    protected virtual List`1<ProcedureInfo> GetProcedures(DataConnection dataConnection, GetSchemaOptions options);
    protected virtual List`1<ProcedureParameterInfo> GetProcedureParameters(DataConnection dataConnection, IEnumerable`1<ProcedureInfo> procedures, GetSchemaOptions options);
    protected virtual DataParameter BuildProcedureParameter(ParameterSchema p);
    protected virtual DataTable GetProcedureSchema(DataConnection dataConnection, string commandText, CommandType commandType, DataParameter[] parameters, GetSchemaOptions options);
    protected virtual List`1<ColumnSchema> GetProcedureResultColumns(DataTable resultTable, GetSchemaOptions options);
    protected virtual string GetProviderSpecificTypeNamespace();
    [NullableContextAttribute("2")]
protected virtual string GetProviderSpecificType(string dataType);
    [NullableContextAttribute("2")]
protected virtual Type GetSystemType(string dataType, string columnType, DataTypeInfo dataTypeInfo, Nullable`1<int> length, Nullable`1<int> precision, Nullable`1<int> scale, GetSchemaOptions options);
    protected virtual StringComparison ForeignKeyColumnComparison(string column);
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class LinqToDB.DataProvider.MySql.MySqlSpecificQueryable`1 : DatabaseSpecificQueryable`1<TSource> {
    [NullableContextAttribute("1")]
public MySqlSpecificQueryable`1(IQueryable`1<TSource> queryable);
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class LinqToDB.DataProvider.MySql.MySqlSpecificTable`1 : DatabaseSpecificTable`1<TSource> {
    [NullableContextAttribute("1")]
public MySqlSpecificTable`1(ITable`1<TSource> table);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class LinqToDB.DataProvider.MySql.MySqlSqlBuilder : BasicSqlBuilder`1<MySqlOptions> {
    [NullableAttribute("2")]
private StringBuilder _hintBuilder;
    private int _hintPosition;
    private bool _isTopLevelBuilder;
    protected bool IsRecursiveCteKeywordRequired { get; }
    public bool IsNestedJoinParenthesisRequired { get; }
    protected bool IsValuesSyntaxSupported { get; }
    protected string FakeTable { get; }
    public MySqlSqlBuilder(IDataProvider provider, MappingSchema mappingSchema, DataOptions dataOptions, ISqlOptimizer sqlOptimizer, SqlProviderFlags sqlProviderFlags);
    private MySqlSqlBuilder(BasicSqlBuilder parentBuilder);
    protected virtual ISqlBuilder CreateSqlBuilder();
    protected virtual bool get_IsRecursiveCteKeywordRequired();
    public virtual bool get_IsNestedJoinParenthesisRequired();
    protected virtual bool get_IsValuesSyntaxSupported();
    protected virtual string get_FakeTable();
    protected virtual bool CanSkipRootAliases(SqlStatement statement);
    public virtual int CommandCount(SqlStatement statement);
    protected virtual void BuildSelectClause(SelectQuery selectQuery);
    protected virtual void BuildCommand(SqlStatement statement, int commandNumber);
    protected virtual string LimitFormat(SelectQuery selectQuery);
    protected virtual void BuildOffsetLimit(SelectQuery selectQuery);
    protected virtual void BuildDataTypeFromDataType(SqlDataType type, bool forCreateTable, bool canBeNull);
    protected virtual void BuildDeleteClause(SqlDeleteStatement deleteStatement);
    protected virtual void BuildUpdateClause(SqlStatement statement, SelectQuery selectQuery, SqlUpdateClause updateClause);
    protected virtual void BuildInsertQuery(SqlStatement statement, SqlInsertClause insertClause, bool addAlias);
    protected virtual void BuildFromClause(SqlStatement statement, SelectQuery selectQuery);
    public virtual StringBuilder Convert(StringBuilder sb, string value, ConvertType convertType);
    protected virtual StringBuilder BuildExpression(ISqlExpression expr, bool buildTableName, bool checkParentheses, string alias, Boolean& addAlias, bool throwExceptionIfTableNotFound);
    protected virtual void BuildIsDistinctPredicate(IsDistinct expr);
    protected virtual void BuildInsertOrUpdateQuery(SqlInsertOrUpdateStatement insertOrUpdate);
    protected virtual void BuildEmptyInsert(SqlInsertClause insertClause);
    protected virtual void BuildCreateTableIdentityAttribute1(SqlField field);
    protected virtual void BuildCreateTablePrimaryKey(SqlCreateTableStatement createTable, string pkName, IEnumerable`1<string> fieldNames);
    public virtual StringBuilder BuildObjectName(StringBuilder sb, SqlObjectName name, ConvertType objectType, bool escape, TableOptions tableOptions, bool withoutSuffix);
    protected virtual string GetProviderTypeName(IDataContext dataContext, DbParameter parameter);
    protected virtual void BuildTruncateTable(SqlTruncateTableStatement truncateTable);
    protected virtual void BuildDropTableStatement(SqlDropTableStatement dropTable);
    protected virtual void BuildMergeStatement(SqlMergeStatement merge);
    protected virtual void BuildGroupByBody(GroupingType groupingType, List`1<ISqlExpression> items);
    protected virtual void BuildCreateTableCommand(SqlTable table);
    [NullableContextAttribute("2")]
protected virtual void StartStatementQueryExtensions(SelectQuery selectQuery);
    protected virtual void FinalizeBuildQuery(SqlStatement statement);
    protected virtual void BuildTableExtensions(SqlTable table, string alias);
    protected virtual void BuildSubQueryExtensions(SqlStatement statement);
    protected virtual void BuildSql();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.DataProvider.MySql.MySqlSqlOptimizer : BasicSqlOptimizer {
    public bool CanCompareSearchConditions { get; }
    public MySqlSqlOptimizer(SqlProviderFlags sqlProviderFlags);
    public virtual bool get_CanCompareSearchConditions();
    public virtual SqlStatement TransformStatement(SqlStatement statement, DataOptions dataOptions);
    private static SqlStatement PrepareDelete(SqlDeleteStatement statement);
    private SqlUpdateStatement CorrectMySqlUpdate(SqlUpdateStatement statement);
    public virtual ISqlExpression ConvertExpressionImpl(ISqlExpression expression, ConvertVisitor`1<RunOptimizationContext> visitor);
    public virtual ISqlPredicate ConvertSearchStringPredicate(SearchString predicate, ConvertVisitor`1<RunOptimizationContext> visitor);
    [CompilerGeneratedAttribute]
private ISqlExpression <ConvertExpressionImpl>g__Convert|6_0(ISqlExpression expr, <>c__DisplayClass6_0& );
    [CompilerGeneratedAttribute]
internal static SqlFunction <ConvertExpressionImpl>g__ConvertFunc|6_1(SqlFunction func);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class LinqToDB.DataProvider.MySql.MySqlTools : object {
    private static Lazy`1<IDataProvider> _mySqlDataProvider;
    private static Lazy`1<IDataProvider> _mySqlConnectorDataProvider;
    [NullableAttribute("2")]
private static string _detectedProviderName;
    public static string DetectedProviderName { get; }
    [ObsoleteAttribute("Use MySqlOptions.Default.BulkCopyType instead.")]
public static BulkCopyType DefaultBulkCopyType { get; public set; }
    private static MySqlTools();
    [ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
public static IMySqlSpecificTable`1<TSource> AsMySql(ITable`1<TSource> table);
    [ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
public static IMySqlSpecificQueryable`1<TSource> AsMySql(IQueryable`1<TSource> source);
    internal static IDataProvider ProviderDetector(ConnectionOptions options);
    public static IDataProvider GetDataProvider(string providerName);
    public static string get_DetectedProviderName();
    private static string DetectProviderName();
    public static void ResolveMySql(string path, string assemblyName);
    public static void ResolveMySql(Assembly assembly);
    public static DataConnection CreateDataConnection(string connectionString, string providerName);
    public static DataConnection CreateDataConnection(DbConnection connection, string providerName);
    public static DataConnection CreateDataConnection(DbTransaction transaction, string providerName);
    public static BulkCopyType get_DefaultBulkCopyType();
    public static void set_DefaultBulkCopyType(BulkCopyType value);
}
public class LinqToDB.DataProvider.NoopQueryParametersNormalizer : object {
    [NullableAttribute("1")]
public static IQueryParametersNormalizer Instance;
    private static NoopQueryParametersNormalizer();
    [NullableContextAttribute("2")]
public sealed virtual string Normalize(string originalName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.DataProvider.OdbcProviderAdapter : object {
    private static object _syncRoot;
    [NullableAttribute("2")]
private static OdbcProviderAdapter _instance;
    public static string AssemblyName;
    public static string ClientNamespace;
    [CompilerGeneratedAttribute]
private Type <ConnectionType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <DataReaderType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ParameterType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <CommandType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <TransactionType>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`2<DbParameter, OdbcType> <SetDbType>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<DbParameter, OdbcType> <GetDbType>k__BackingField;
    public Type ConnectionType { get; }
    public Type DataReaderType { get; }
    public Type ParameterType { get; }
    public Type CommandType { get; }
    public Type TransactionType { get; }
    public Action`2<DbParameter, OdbcType> SetDbType { get; }
    public Func`2<DbParameter, OdbcType> GetDbType { get; }
    private OdbcProviderAdapter(Type connectionType, Type dataReaderType, Type parameterType, Type commandType, Type transactionType, Action`2<DbParameter, OdbcType> dbTypeSetter, Func`2<DbParameter, OdbcType> dbTypeGetter);
    private static OdbcProviderAdapter();
    [CompilerGeneratedAttribute]
public sealed virtual Type get_ConnectionType();
    [CompilerGeneratedAttribute]
public sealed virtual Type get_DataReaderType();
    [CompilerGeneratedAttribute]
public sealed virtual Type get_ParameterType();
    [CompilerGeneratedAttribute]
public sealed virtual Type get_CommandType();
    [CompilerGeneratedAttribute]
public sealed virtual Type get_TransactionType();
    [CompilerGeneratedAttribute]
public Action`2<DbParameter, OdbcType> get_SetDbType();
    [CompilerGeneratedAttribute]
public Func`2<DbParameter, OdbcType> get_GetDbType();
    public static OdbcProviderAdapter GetInstance();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.DataProvider.OleDbProviderAdapter : object {
    private static object _syncRoot;
    [NullableAttribute("2")]
private static OleDbProviderAdapter _instance;
    public static string AssemblyName;
    public static string ClientNamespace;
    [CompilerGeneratedAttribute]
private Type <ConnectionType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <DataReaderType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ParameterType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <CommandType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <TransactionType>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`2<DbParameter, OleDbType> <SetDbType>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<DbParameter, OleDbType> <GetDbType>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`4<DbConnection, Guid, Object[], DataTable> <GetOleDbSchemaTable>k__BackingField;
    public Type ConnectionType { get; }
    public Type DataReaderType { get; }
    public Type ParameterType { get; }
    public Type CommandType { get; }
    public Type TransactionType { get; }
    public Action`2<DbParameter, OleDbType> SetDbType { get; }
    public Func`2<DbParameter, OleDbType> GetDbType { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`4<DbConnection, Guid, Object[], DataTable> GetOleDbSchemaTable { get; }
    private OleDbProviderAdapter(Type connectionType, Type dataReaderType, Type parameterType, Type commandType, Type transactionType, Action`2<DbParameter, OleDbType> dbTypeSetter, Func`2<DbParameter, OleDbType> dbTypeGetter, Func`4<DbConnection, Guid, Object[], DataTable> schemaTableGetter);
    private static OleDbProviderAdapter();
    [CompilerGeneratedAttribute]
public sealed virtual Type get_ConnectionType();
    [CompilerGeneratedAttribute]
public sealed virtual Type get_DataReaderType();
    [CompilerGeneratedAttribute]
public sealed virtual Type get_ParameterType();
    [CompilerGeneratedAttribute]
public sealed virtual Type get_CommandType();
    [CompilerGeneratedAttribute]
public sealed virtual Type get_TransactionType();
    [CompilerGeneratedAttribute]
public Action`2<DbParameter, OleDbType> get_SetDbType();
    [CompilerGeneratedAttribute]
public Func`2<DbParameter, OleDbType> get_GetDbType();
    [CompilerGeneratedAttribute]
public Func`4<DbConnection, Guid, Object[], DataTable> get_GetOleDbSchemaTable();
    public static OleDbProviderAdapter GetInstance();
}
public enum LinqToDB.DataProvider.Oracle.AlternativeBulkCopy : Enum {
    public int value__;
    public static AlternativeBulkCopy InsertAll;
    public static AlternativeBulkCopy InsertInto;
    public static AlternativeBulkCopy InsertDual;
}
public interface LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable`1 {
}
public interface LinqToDB.DataProvider.Oracle.IOracleSpecificTable`1 {
}
public class LinqToDB.DataProvider.Oracle.Oracle11ParametersNormalizer : Oracle122ParametersNormalizer {
    protected int MaxLength { get; }
    protected virtual int get_MaxLength();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.DataProvider.Oracle.Oracle11SqlBuilder : OracleSqlBuilderBase {
    public Oracle11SqlBuilder(IDataProvider provider, MappingSchema mappingSchema, DataOptions dataOptions, ISqlOptimizer sqlOptimizer, SqlProviderFlags sqlProviderFlags);
    private Oracle11SqlBuilder(BasicSqlBuilder parentBuilder);
    protected virtual ISqlBuilder CreateSqlBuilder();
    protected virtual string GetPhysicalTableName(ISqlTableSource table, string alias, bool ignoreTableExpression, string defaultDatabaseName, bool withoutSuffix);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.DataProvider.Oracle.Oracle11SqlOptimizer : BasicSqlOptimizer {
    protected static String[] OracleLikeCharactersToEscape;
    private static ISqlExpression RowNumExpr;
    public String[] LikeCharactersToEscape { get; }
    public Oracle11SqlOptimizer(SqlProviderFlags sqlProviderFlags);
    private static Oracle11SqlOptimizer();
    public virtual SqlStatement Finalize(MappingSchema mappingSchema, SqlStatement statement, DataOptions dataOptions);
    public virtual SqlStatement TransformStatement(SqlStatement statement, DataOptions dataOptions);
    public virtual String[] get_LikeCharactersToEscape();
    public virtual bool IsParameterDependedElement(IQueryElement element);
    public virtual ISqlPredicate ConvertPredicateImpl(ISqlPredicate predicate, ConvertVisitor`1<RunOptimizationContext> visitor);
    public virtual ISqlExpression ConvertExpressionImpl(ISqlExpression expression, ConvertVisitor`1<RunOptimizationContext> visitor);
    protected SqlStatement ReplaceTakeSkipWithRowNum(SqlStatement statement, bool onlySubqueries);
    protected virtual ISqlExpression ConvertFunction(SqlFunction func);
}
public class LinqToDB.DataProvider.Oracle.Oracle122ParametersNormalizer : UniqueParametersNormalizer {
    [NullableContextAttribute("1")]
protected virtual bool IsReserved(string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.DataProvider.Oracle.Oracle12SqlBuilder : OracleSqlBuilderBase {
    protected bool OffsetFirst { get; }
    public Oracle12SqlBuilder(IDataProvider provider, MappingSchema mappingSchema, DataOptions dataOptions, ISqlOptimizer sqlOptimizer, SqlProviderFlags sqlProviderFlags);
    private Oracle12SqlBuilder(BasicSqlBuilder parentBuilder);
    protected virtual ISqlBuilder CreateSqlBuilder();
    protected virtual bool CanSkipRootAliases(SqlStatement statement);
    protected virtual bool BuildWhere(SelectQuery selectQuery);
    protected virtual string LimitFormat(SelectQuery selectQuery);
    protected virtual string OffsetFormat(SelectQuery selectQuery);
    protected virtual bool get_OffsetFirst();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.DataProvider.Oracle.Oracle12SqlOptimizer : Oracle11SqlOptimizer {
    public Oracle12SqlOptimizer(SqlProviderFlags sqlProviderFlags);
    public virtual SqlStatement TransformStatement(SqlStatement statement, DataOptions dataOptions);
    protected virtual ISqlExpression ConvertFunction(SqlFunction func);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.DataProvider.Oracle.OracleBulkCopy : BasicBulkCopy {
    private static int _maxParameters;
    private static int _maxSqlLength;
    private OracleDataProvider _provider;
    private AlternativeBulkCopy _useAlternativeBulkCopy;
    protected int MaxParameters { get; }
    protected int MaxSqlLength { get; }
    public OracleBulkCopy(OracleDataProvider provider, AlternativeBulkCopy useAlternativeBulkCopy);
    protected virtual int get_MaxParameters();
    protected virtual int get_MaxSqlLength();
    protected virtual BulkCopyRowsCopied ProviderSpecificCopy(ITable`1<T> table, DataOptions options, IEnumerable`1<T> source);
    protected virtual Task`1<BulkCopyRowsCopied> ProviderSpecificCopyAsync(ITable`1<T> table, DataOptions options, IEnumerable`1<T> source, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("LinqToDB.DataProvider.Oracle.OracleBulkCopy/<ProviderSpecificCopyAsync>d__11`1")]
protected virtual Task`1<BulkCopyRowsCopied> ProviderSpecificCopyAsync(ITable`1<T> table, DataOptions options, IAsyncEnumerable`1<T> source, CancellationToken cancellationToken);
    protected virtual BulkCopyRowsCopied MultipleRowsCopy(ITable`1<T> table, DataOptions options, IEnumerable`1<T> source);
    protected virtual Task`1<BulkCopyRowsCopied> MultipleRowsCopyAsync(ITable`1<T> table, DataOptions options, IEnumerable`1<T> source, CancellationToken cancellationToken);
    protected virtual Task`1<BulkCopyRowsCopied> MultipleRowsCopyAsync(ITable`1<T> table, DataOptions options, IAsyncEnumerable`1<T> source, CancellationToken cancellationToken);
    private static void OracleMultipleRowsCopy1Prep(MultipleRowsHelper helper);
    private static void OracleMultipleRowsCopy1Add(MultipleRowsHelper helper, object item, string from);
    private static void OracleMultipleRowsCopy1Finish(MultipleRowsHelper helper);
    private static BulkCopyRowsCopied OracleMultipleRowsCopy1(MultipleRowsHelper helper, IEnumerable source);
    private static Task`1<BulkCopyRowsCopied> OracleMultipleRowsCopy1Async(MultipleRowsHelper helper, IEnumerable source, CancellationToken cancellationToken);
    private static Task`1<BulkCopyRowsCopied> OracleMultipleRowsCopy1Async(MultipleRowsHelper helper, IAsyncEnumerable`1<T> source, CancellationToken cancellationToken);
    private static List`1<object> OracleMultipleRowsCopy2Prep(MultipleRowsHelper helper);
    private BulkCopyRowsCopied OracleMultipleRowsCopy2(MultipleRowsHelper helper, IEnumerable source);
    [AsyncStateMachineAttribute("LinqToDB.DataProvider.Oracle.OracleBulkCopy/<OracleMultipleRowsCopy2Async>d__23")]
private Task`1<BulkCopyRowsCopied> OracleMultipleRowsCopy2Async(MultipleRowsHelper helper, IEnumerable source, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("LinqToDB.DataProvider.Oracle.OracleBulkCopy/<OracleMultipleRowsCopy2Async>d__24`1")]
private Task`1<BulkCopyRowsCopied> OracleMultipleRowsCopy2Async(MultipleRowsHelper helper, IAsyncEnumerable`1<T> source, CancellationToken cancellationToken);
    private bool Execute(MultipleRowsHelper helper, List`1<object> list);
    private int ExecuteArray(DataConnection connection, string sql, DataParameter[] parameters, int iters);
    private Task`1<bool> ExecuteAsync(MultipleRowsHelper helper, List`1<object> list, CancellationToken cancellationToken);
    private static void OracleMultipleRowsCopy3Prep(MultipleRowsHelper helper);
    private static void OracleMultipleRowsCopy3Add(MultipleRowsHelper helper, object item, string from);
    private static void OracleMultipleRowsCopy3Finish(MultipleRowsHelper helper);
    private static BulkCopyRowsCopied OracleMultipleRowsCopy3(MultipleRowsHelper helper, IEnumerable source);
    private static Task`1<BulkCopyRowsCopied> OracleMultipleRowsCopy3Async(MultipleRowsHelper helper, IEnumerable source, CancellationToken cancellationToken);
    private static Task`1<BulkCopyRowsCopied> OracleMultipleRowsCopy3Async(MultipleRowsHelper helper, IAsyncEnumerable`1<T> source, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class LinqToDB.DataProvider.Oracle.OracleDataProvider : DynamicDataProviderBase`1<OracleProviderAdapter> {
    [CompilerGeneratedAttribute]
private OracleProvider <Provider>k__BackingField;
    [CompilerGeneratedAttribute]
private OracleVersion <Version>k__BackingField;
    private ISqlOptimizer _sqlOptimizer;
    public OracleProvider Provider { get; }
    public OracleVersion Version { get; }
    public TableOptions SupportedTableOptions { get; }
    protected OracleDataProvider(string name, OracleProvider provider, OracleVersion version);
    [CompilerGeneratedAttribute]
public OracleProvider get_Provider();
    [CompilerGeneratedAttribute]
public OracleVersion get_Version();
    public virtual TableOptions get_SupportedTableOptions();
    public virtual ISqlBuilder CreateSqlBuilder(MappingSchema mappingSchema, DataOptions dataOptions);
    private static MappingSchema GetMappingSchema(OracleProvider provider, OracleVersion version);
    public virtual ISqlOptimizer GetSqlOptimizer(DataOptions dataOptions);
    public virtual ISchemaProvider GetSchemaProvider();
    public virtual DbCommand InitCommand(DataConnection dataConnection, DbCommand command, CommandType commandType, string commandText, DataParameter[] parameters, bool withParameters);
    public virtual void ClearCommandParameters(DbCommand command);
    public virtual IQueryParametersNormalizer GetQueryParameterNormalizer();
    public virtual void SetParameter(DataConnection dataConnection, DbParameter parameter, string name, DbDataType dataType, object value);
    public virtual Type ConvertParameterType(Type type, DbDataType dataType);
    protected virtual void SetParameterType(DataConnection dataConnection, DbParameter parameter, DbDataType dataType);
    public virtual BulkCopyRowsCopied BulkCopy(DataOptions options, ITable`1<T> table, IEnumerable`1<T> source);
    public virtual Task`1<BulkCopyRowsCopied> BulkCopyAsync(DataOptions options, ITable`1<T> table, IEnumerable`1<T> source, CancellationToken cancellationToken);
    public virtual Task`1<BulkCopyRowsCopied> BulkCopyAsync(DataOptions options, ITable`1<T> table, IAsyncEnumerable`1<T> source, CancellationToken cancellationToken);
}
internal class LinqToDB.DataProvider.Oracle.OracleDataProviderDevart11 : OracleDataProvider {
}
internal class LinqToDB.DataProvider.Oracle.OracleDataProviderDevart12 : OracleDataProvider {
}
internal class LinqToDB.DataProvider.Oracle.OracleDataProviderManaged11 : OracleDataProvider {
}
internal class LinqToDB.DataProvider.Oracle.OracleDataProviderManaged12 : OracleDataProvider {
}
internal class LinqToDB.DataProvider.Oracle.OracleDataProviderNative11 : OracleDataProvider {
}
internal class LinqToDB.DataProvider.Oracle.OracleDataProviderNative12 : OracleDataProvider {
}
[UsedImplicitlyAttribute]
internal class LinqToDB.DataProvider.Oracle.OracleFactory : object {
    [NullableContextAttribute("1")]
private sealed virtual override IDataProvider LinqToDB.DataProvider.IDataProviderFactory.GetDataProvider(IEnumerable`1<NamedValue> attributes);
}
[ExtensionAttribute]
public static class LinqToDB.DataProvider.Oracle.OracleHints : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[ExpressionMethodAttribute("OptParamHintImpl")]
public static IOracleSpecificQueryable`1<TSource> OptParamHint(IOracleSpecificQueryable`1<TSource> query, String[] parameters);
    [NullableContextAttribute("1")]
private static Expression`1<Func`3<IOracleSpecificQueryable`1<TSource>, String[], IOracleSpecificQueryable`1<TSource>>> OptParamHintImpl();
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[ExpressionMethodAttribute("ContainersHintImpl")]
public static IOracleSpecificQueryable`1<TSource> ContainersHint(IOracleSpecificQueryable`1<TSource> query, string hint);
    [NullableContextAttribute("1")]
private static Expression`1<Func`3<IOracleSpecificQueryable`1<TSource>, string, IOracleSpecificQueryable`1<TSource>>> ContainersHintImpl();
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[ExpressionMethodAttribute("ParallelDefaultHintImpl")]
public static IOracleSpecificQueryable`1<TSource> ParallelDefaultHint(IOracleSpecificQueryable`1<TSource> query);
    [NullableContextAttribute("1")]
private static Expression`1<Func`2<IOracleSpecificQueryable`1<TSource>, IOracleSpecificQueryable`1<TSource>>> ParallelDefaultHintImpl();
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[ExpressionMethodAttribute("ParallelAutoHintImpl")]
public static IOracleSpecificQueryable`1<TSource> ParallelAutoHint(IOracleSpecificQueryable`1<TSource> query);
    [NullableContextAttribute("1")]
private static Expression`1<Func`2<IOracleSpecificQueryable`1<TSource>, IOracleSpecificQueryable`1<TSource>>> ParallelAutoHintImpl();
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[ExpressionMethodAttribute("ParallelManualHintImpl")]
public static IOracleSpecificQueryable`1<TSource> ParallelManualHint(IOracleSpecificQueryable`1<TSource> query);
    [NullableContextAttribute("1")]
private static Expression`1<Func`2<IOracleSpecificQueryable`1<TSource>, IOracleSpecificQueryable`1<TSource>>> ParallelManualHintImpl();
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[ExpressionMethodAttribute("ParallelHintImpl2")]
public static IOracleSpecificQueryable`1<TSource> ParallelHint(IOracleSpecificQueryable`1<TSource> query, int value);
    [NullableContextAttribute("1")]
private static Expression`1<Func`3<IOracleSpecificQueryable`1<TSource>, int, IOracleSpecificQueryable`1<TSource>>> ParallelHintImpl2();
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("Oracle", "1", "LinqToDB.DataProvider.TableSpecHintExtensionBuilder", ", ", ", ")]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
private static IOracleSpecificTable`1<TSource> TableHintWithComma(IOracleSpecificTable`1<TSource> table, string hint, TParam hintParameter);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("Oracle", "1", "LinqToDB.DataProvider.TableSpecHintExtensionBuilder", ", ", ", ")]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
private static IOracleSpecificTable`1<TSource> TableHintWithComma(IOracleSpecificTable`1<TSource> table, string hint, TParam[] hintParameters);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[ExpressionMethodAttribute("ParallelHintImpl3")]
public static IOracleSpecificTable`1<TSource> ParallelHint(IOracleSpecificTable`1<TSource> table, int value);
    [NullableContextAttribute("1")]
private static Expression`1<Func`3<IOracleSpecificTable`1<TSource>, int, IOracleSpecificTable`1<TSource>>> ParallelHintImpl3();
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[ExpressionMethodAttribute("ParallelDefaultHintImpl3")]
public static IOracleSpecificTable`1<TSource> ParallelDefaultHint(IOracleSpecificTable`1<TSource> table);
    [NullableContextAttribute("1")]
private static Expression`1<Func`3<IOracleSpecificTable`1<TSource>, int, IOracleSpecificTable`1<TSource>>> ParallelDefaultHintImpl3();
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("Oracle", "1", "LinqToDB.DataProvider.TableSpecHintExtensionBuilder", " ", ", ")]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
private static IOracleSpecificTable`1<TSource> TableHintWithComma2(IOracleSpecificTable`1<TSource> table, string hint, TParam[] hintParameters);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[ExpressionMethodAttribute("PQDistributeHintImpl")]
public static IOracleSpecificTable`1<TSource> PQDistributeHint(IOracleSpecificTable`1<TSource> table, string outerDistribution, string innerDistribution);
    [NullableContextAttribute("1")]
private static Expression`1<Func`4<IOracleSpecificTable`1<TSource>, string, string, IOracleSpecificTable`1<TSource>>> PQDistributeHintImpl();
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[ExpressionMethodAttribute("ParallelIndexHintImpl")]
public static IOracleSpecificTable`1<TSource> ParallelIndexHint(IOracleSpecificTable`1<TSource> table, Object[] values);
    [NullableContextAttribute("1")]
private static Expression`1<Func`3<IOracleSpecificTable`1<TSource>, Object[], IOracleSpecificTable`1<TSource>>> ParallelIndexHintImpl();
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[ExpressionMethodAttribute("NoParallelIndexHintImpl")]
public static IOracleSpecificTable`1<TSource> NoParallelIndexHint(IOracleSpecificTable`1<TSource> table, Object[] values);
    [NullableContextAttribute("1")]
private static Expression`1<Func`3<IOracleSpecificTable`1<TSource>, Object[], IOracleSpecificTable`1<TSource>>> NoParallelIndexHintImpl();
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[ExpressionMethodAttribute("DynamicSamplingHintImpl")]
public static IOracleSpecificTable`1<TSource> DynamicSamplingHint(IOracleSpecificTable`1<TSource> table, int value);
    [NullableContextAttribute("1")]
private static Expression`1<Func`3<IOracleSpecificTable`1<TSource>, int, IOracleSpecificTable`1<TSource>>> DynamicSamplingHintImpl();
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("Oracle", "1", "LinqToDB.DataProvider.TableSpecHintExtensionBuilder")]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
public static IOracleSpecificTable`1<TSource> TableHint(IOracleSpecificTable`1<TSource> table, string hint);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("Oracle", "1", "LinqToDB.DataProvider.TableSpecHintExtensionBuilder")]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
public static IOracleSpecificTable`1<TSource> TableHint(IOracleSpecificTable`1<TSource> table, string hint, TParam hintParameter);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("Oracle", "1", "LinqToDB.DataProvider.TableSpecHintExtensionBuilder", " ", " ")]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
public static IOracleSpecificTable`1<TSource> TableHint(IOracleSpecificTable`1<TSource> table, string hint, TParam[] hintParameters);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("Oracle", "2", "LinqToDB.DataProvider.TableSpecHintExtensionBuilder")]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
public static IOracleSpecificQueryable`1<TSource> TablesInScopeHint(IOracleSpecificQueryable`1<TSource> source, string hint);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("Oracle", "2", "LinqToDB.DataProvider.TableSpecHintExtensionBuilder")]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
public static IOracleSpecificQueryable`1<TSource> TablesInScopeHint(IOracleSpecificQueryable`1<TSource> source, string hint, TParam hintParameter);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("Oracle", "2", "LinqToDB.DataProvider.TableSpecHintExtensionBuilder", " ", " ")]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
public static IOracleSpecificQueryable`1<TSource> TablesInScopeHint(IOracleSpecificQueryable`1<TSource> source, string hint, Object[] hintParameters);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("Oracle", "6", "LinqToDB.SqlProvider.HintExtensionBuilder")]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
public static IOracleSpecificQueryable`1<TSource> QueryHint(IOracleSpecificQueryable`1<TSource> source, string hint);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("Oracle", "6", "LinqToDB.SqlProvider.HintWithParameterExtensionBuilder")]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
public static IOracleSpecificQueryable`1<TSource> QueryHint(IOracleSpecificQueryable`1<TSource> source, string hint, TParam hintParameter);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("Oracle", "6", "LinqToDB.SqlProvider.HintWithParametersExtensionBuilder", " ")]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
public static IOracleSpecificQueryable`1<TSource> QueryHint(IOracleSpecificQueryable`1<TSource> source, string hint, TParam[] hintParameters);
    [ExtensionAttribute]
[ExpressionMethodAttribute("AllRowsHintImpl")]
public static IOracleSpecificQueryable`1<TSource> AllRowsHint(IOracleSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IOracleSpecificQueryable`1<TSource>, IOracleSpecificQueryable`1<TSource>>> AllRowsHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("FirstRowsHintImpl2")]
public static IOracleSpecificQueryable`1<TSource> FirstRowsHint(IOracleSpecificQueryable`1<TSource> query, int value);
    private static Expression`1<Func`3<IOracleSpecificQueryable`1<TSource>, int, IOracleSpecificQueryable`1<TSource>>> FirstRowsHintImpl2();
    [ExtensionAttribute]
[ExpressionMethodAttribute("Oracle", "ClusterTableHintImpl")]
public static IOracleSpecificTable`1<TSource> ClusterHint(IOracleSpecificTable`1<TSource> table);
    private static Expression`1<Func`2<IOracleSpecificTable`1<TSource>, IOracleSpecificTable`1<TSource>>> ClusterTableHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("Oracle", "ClusterInScopeHintImpl")]
public static IOracleSpecificQueryable`1<TSource> ClusterInScopeHint(IOracleSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IOracleSpecificQueryable`1<TSource>, IOracleSpecificQueryable`1<TSource>>> ClusterInScopeHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("ClusteringHintImpl")]
public static IOracleSpecificQueryable`1<TSource> ClusteringHint(IOracleSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IOracleSpecificQueryable`1<TSource>, IOracleSpecificQueryable`1<TSource>>> ClusteringHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("NoClusteringHintImpl")]
public static IOracleSpecificQueryable`1<TSource> NoClusteringHint(IOracleSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IOracleSpecificQueryable`1<TSource>, IOracleSpecificQueryable`1<TSource>>> NoClusteringHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("Oracle", "FullTableHintImpl")]
public static IOracleSpecificTable`1<TSource> FullHint(IOracleSpecificTable`1<TSource> table);
    private static Expression`1<Func`2<IOracleSpecificTable`1<TSource>, IOracleSpecificTable`1<TSource>>> FullTableHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("Oracle", "FullInScopeHintImpl")]
public static IOracleSpecificQueryable`1<TSource> FullInScopeHint(IOracleSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IOracleSpecificQueryable`1<TSource>, IOracleSpecificQueryable`1<TSource>>> FullInScopeHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("Oracle", "HashTableHintImpl")]
public static IOracleSpecificTable`1<TSource> HashHint(IOracleSpecificTable`1<TSource> table);
    private static Expression`1<Func`2<IOracleSpecificTable`1<TSource>, IOracleSpecificTable`1<TSource>>> HashTableHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("Oracle", "HashInScopeHintImpl")]
public static IOracleSpecificQueryable`1<TSource> HashInScopeHint(IOracleSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IOracleSpecificQueryable`1<TSource>, IOracleSpecificQueryable`1<TSource>>> HashInScopeHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("Oracle", "IndexIndexHintImpl")]
public static IOracleSpecificTable`1<TSource> IndexHint(IOracleSpecificTable`1<TSource> table, String[] indexNames);
    private static Expression`1<Func`3<IOracleSpecificTable`1<TSource>, String[], IOracleSpecificTable`1<TSource>>> IndexIndexHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("Oracle", "IndexAscIndexHintImpl")]
public static IOracleSpecificTable`1<TSource> IndexAscHint(IOracleSpecificTable`1<TSource> table, String[] indexNames);
    private static Expression`1<Func`3<IOracleSpecificTable`1<TSource>, String[], IOracleSpecificTable`1<TSource>>> IndexAscIndexHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("Oracle", "IndexCombineIndexHintImpl")]
public static IOracleSpecificTable`1<TSource> IndexCombineHint(IOracleSpecificTable`1<TSource> table, String[] indexNames);
    private static Expression`1<Func`3<IOracleSpecificTable`1<TSource>, String[], IOracleSpecificTable`1<TSource>>> IndexCombineIndexHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("Oracle", "IndexJoinIndexHintImpl")]
public static IOracleSpecificTable`1<TSource> IndexJoinHint(IOracleSpecificTable`1<TSource> table, String[] indexNames);
    private static Expression`1<Func`3<IOracleSpecificTable`1<TSource>, String[], IOracleSpecificTable`1<TSource>>> IndexJoinIndexHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("Oracle", "IndexDescIndexHintImpl")]
public static IOracleSpecificTable`1<TSource> IndexDescHint(IOracleSpecificTable`1<TSource> table, String[] indexNames);
    private static Expression`1<Func`3<IOracleSpecificTable`1<TSource>, String[], IOracleSpecificTable`1<TSource>>> IndexDescIndexHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("Oracle", "IndexFFSIndexHintImpl")]
public static IOracleSpecificTable`1<TSource> IndexFFSHint(IOracleSpecificTable`1<TSource> table, String[] indexNames);
    private static Expression`1<Func`3<IOracleSpecificTable`1<TSource>, String[], IOracleSpecificTable`1<TSource>>> IndexFFSIndexHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("Oracle", "IndexFastFullScanIndexHintImpl")]
public static IOracleSpecificTable`1<TSource> IndexFastFullScanHint(IOracleSpecificTable`1<TSource> table, String[] indexNames);
    private static Expression`1<Func`3<IOracleSpecificTable`1<TSource>, String[], IOracleSpecificTable`1<TSource>>> IndexFastFullScanIndexHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("Oracle", "IndexSSIndexHintImpl")]
public static IOracleSpecificTable`1<TSource> IndexSSHint(IOracleSpecificTable`1<TSource> table, String[] indexNames);
    private static Expression`1<Func`3<IOracleSpecificTable`1<TSource>, String[], IOracleSpecificTable`1<TSource>>> IndexSSIndexHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("Oracle", "IndexSkipScanIndexHintImpl")]
public static IOracleSpecificTable`1<TSource> IndexSkipScanHint(IOracleSpecificTable`1<TSource> table, String[] indexNames);
    private static Expression`1<Func`3<IOracleSpecificTable`1<TSource>, String[], IOracleSpecificTable`1<TSource>>> IndexSkipScanIndexHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("Oracle", "IndexSSAscIndexHintImpl")]
public static IOracleSpecificTable`1<TSource> IndexSSAscHint(IOracleSpecificTable`1<TSource> table, String[] indexNames);
    private static Expression`1<Func`3<IOracleSpecificTable`1<TSource>, String[], IOracleSpecificTable`1<TSource>>> IndexSSAscIndexHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("Oracle", "IndexSkipScanAscIndexHintImpl")]
public static IOracleSpecificTable`1<TSource> IndexSkipScanAscHint(IOracleSpecificTable`1<TSource> table, String[] indexNames);
    private static Expression`1<Func`3<IOracleSpecificTable`1<TSource>, String[], IOracleSpecificTable`1<TSource>>> IndexSkipScanAscIndexHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("Oracle", "IndexSSDescIndexHintImpl")]
public static IOracleSpecificTable`1<TSource> IndexSSDescHint(IOracleSpecificTable`1<TSource> table, String[] indexNames);
    private static Expression`1<Func`3<IOracleSpecificTable`1<TSource>, String[], IOracleSpecificTable`1<TSource>>> IndexSSDescIndexHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("Oracle", "IndexSkipScanDescIndexHintImpl")]
public static IOracleSpecificTable`1<TSource> IndexSkipScanDescHint(IOracleSpecificTable`1<TSource> table, String[] indexNames);
    private static Expression`1<Func`3<IOracleSpecificTable`1<TSource>, String[], IOracleSpecificTable`1<TSource>>> IndexSkipScanDescIndexHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("NativeFullOuterJoinHintImpl")]
public static IOracleSpecificQueryable`1<TSource> NativeFullOuterJoinHint(IOracleSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IOracleSpecificQueryable`1<TSource>, IOracleSpecificQueryable`1<TSource>>> NativeFullOuterJoinHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("NoNativeFullOuterJoinHintImpl")]
public static IOracleSpecificQueryable`1<TSource> NoNativeFullOuterJoinHint(IOracleSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IOracleSpecificQueryable`1<TSource>, IOracleSpecificQueryable`1<TSource>>> NoNativeFullOuterJoinHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("Oracle", "NoIndexIndexHintImpl")]
public static IOracleSpecificTable`1<TSource> NoIndexHint(IOracleSpecificTable`1<TSource> table, String[] indexNames);
    private static Expression`1<Func`3<IOracleSpecificTable`1<TSource>, String[], IOracleSpecificTable`1<TSource>>> NoIndexIndexHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("Oracle", "NoIndexFFSIndexHintImpl")]
public static IOracleSpecificTable`1<TSource> NoIndexFFSHint(IOracleSpecificTable`1<TSource> table, String[] indexNames);
    private static Expression`1<Func`3<IOracleSpecificTable`1<TSource>, String[], IOracleSpecificTable`1<TSource>>> NoIndexFFSIndexHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("Oracle", "NoIndexFastFullScanIndexHintImpl")]
public static IOracleSpecificTable`1<TSource> NoIndexFastFullScanHint(IOracleSpecificTable`1<TSource> table, String[] indexNames);
    private static Expression`1<Func`3<IOracleSpecificTable`1<TSource>, String[], IOracleSpecificTable`1<TSource>>> NoIndexFastFullScanIndexHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("Oracle", "NoIndexSSIndexHintImpl")]
public static IOracleSpecificTable`1<TSource> NoIndexSSHint(IOracleSpecificTable`1<TSource> table, String[] indexNames);
    private static Expression`1<Func`3<IOracleSpecificTable`1<TSource>, String[], IOracleSpecificTable`1<TSource>>> NoIndexSSIndexHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("Oracle", "NoIndexSkipScanIndexHintImpl")]
public static IOracleSpecificTable`1<TSource> NoIndexSkipScanHint(IOracleSpecificTable`1<TSource> table, String[] indexNames);
    private static Expression`1<Func`3<IOracleSpecificTable`1<TSource>, String[], IOracleSpecificTable`1<TSource>>> NoIndexSkipScanIndexHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("Oracle", "InMemoryTableHintImpl")]
public static IOracleSpecificTable`1<TSource> InMemoryHint(IOracleSpecificTable`1<TSource> table);
    private static Expression`1<Func`2<IOracleSpecificTable`1<TSource>, IOracleSpecificTable`1<TSource>>> InMemoryTableHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("Oracle", "InMemoryInScopeHintImpl")]
public static IOracleSpecificQueryable`1<TSource> InMemoryInScopeHint(IOracleSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IOracleSpecificQueryable`1<TSource>, IOracleSpecificQueryable`1<TSource>>> InMemoryInScopeHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("Oracle", "NoInMemoryTableHintImpl")]
public static IOracleSpecificTable`1<TSource> NoInMemoryHint(IOracleSpecificTable`1<TSource> table);
    private static Expression`1<Func`2<IOracleSpecificTable`1<TSource>, IOracleSpecificTable`1<TSource>>> NoInMemoryTableHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("Oracle", "NoInMemoryInScopeHintImpl")]
public static IOracleSpecificQueryable`1<TSource> NoInMemoryInScopeHint(IOracleSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IOracleSpecificQueryable`1<TSource>, IOracleSpecificQueryable`1<TSource>>> NoInMemoryInScopeHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("Oracle", "InMemoryPruningTableHintImpl")]
public static IOracleSpecificTable`1<TSource> InMemoryPruningHint(IOracleSpecificTable`1<TSource> table);
    private static Expression`1<Func`2<IOracleSpecificTable`1<TSource>, IOracleSpecificTable`1<TSource>>> InMemoryPruningTableHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("Oracle", "InMemoryPruningInScopeHintImpl")]
public static IOracleSpecificQueryable`1<TSource> InMemoryPruningInScopeHint(IOracleSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IOracleSpecificQueryable`1<TSource>, IOracleSpecificQueryable`1<TSource>>> InMemoryPruningInScopeHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("Oracle", "NoInMemoryPruningTableHintImpl")]
public static IOracleSpecificTable`1<TSource> NoInMemoryPruningHint(IOracleSpecificTable`1<TSource> table);
    private static Expression`1<Func`2<IOracleSpecificTable`1<TSource>, IOracleSpecificTable`1<TSource>>> NoInMemoryPruningTableHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("Oracle", "NoInMemoryPruningInScopeHintImpl")]
public static IOracleSpecificQueryable`1<TSource> NoInMemoryPruningInScopeHint(IOracleSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IOracleSpecificQueryable`1<TSource>, IOracleSpecificQueryable`1<TSource>>> NoInMemoryPruningInScopeHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("UseBandHintImpl4")]
public static IOracleSpecificQueryable`1<TSource> UseBandHint(IOracleSpecificQueryable`1<TSource> query, SqlID[] tableIDs);
    private static Expression`1<Func`3<IOracleSpecificQueryable`1<TSource>, SqlID[], IOracleSpecificQueryable`1<TSource>>> UseBandHintImpl4();
    [ExtensionAttribute]
[ExpressionMethodAttribute("NoUseBandHintImpl4")]
public static IOracleSpecificQueryable`1<TSource> NoUseBandHint(IOracleSpecificQueryable`1<TSource> query, SqlID[] tableIDs);
    private static Expression`1<Func`3<IOracleSpecificQueryable`1<TSource>, SqlID[], IOracleSpecificQueryable`1<TSource>>> NoUseBandHintImpl4();
    [ExtensionAttribute]
[ExpressionMethodAttribute("UseCubeHintImpl4")]
public static IOracleSpecificQueryable`1<TSource> UseCubeHint(IOracleSpecificQueryable`1<TSource> query, SqlID[] tableIDs);
    private static Expression`1<Func`3<IOracleSpecificQueryable`1<TSource>, SqlID[], IOracleSpecificQueryable`1<TSource>>> UseCubeHintImpl4();
    [ExtensionAttribute]
[ExpressionMethodAttribute("NoUseCubeHintImpl4")]
public static IOracleSpecificQueryable`1<TSource> NoUseCubeHint(IOracleSpecificQueryable`1<TSource> query, SqlID[] tableIDs);
    private static Expression`1<Func`3<IOracleSpecificQueryable`1<TSource>, SqlID[], IOracleSpecificQueryable`1<TSource>>> NoUseCubeHintImpl4();
    [ExtensionAttribute]
[ExpressionMethodAttribute("UseHashHintImpl4")]
public static IOracleSpecificQueryable`1<TSource> UseHashHint(IOracleSpecificQueryable`1<TSource> query, SqlID[] tableIDs);
    private static Expression`1<Func`3<IOracleSpecificQueryable`1<TSource>, SqlID[], IOracleSpecificQueryable`1<TSource>>> UseHashHintImpl4();
    [ExtensionAttribute]
[ExpressionMethodAttribute("NoUseHashHintImpl4")]
public static IOracleSpecificQueryable`1<TSource> NoUseHashHint(IOracleSpecificQueryable`1<TSource> query, SqlID[] tableIDs);
    private static Expression`1<Func`3<IOracleSpecificQueryable`1<TSource>, SqlID[], IOracleSpecificQueryable`1<TSource>>> NoUseHashHintImpl4();
    [ExtensionAttribute]
[ExpressionMethodAttribute("UseMergeHintImpl4")]
public static IOracleSpecificQueryable`1<TSource> UseMergeHint(IOracleSpecificQueryable`1<TSource> query, SqlID[] tableIDs);
    private static Expression`1<Func`3<IOracleSpecificQueryable`1<TSource>, SqlID[], IOracleSpecificQueryable`1<TSource>>> UseMergeHintImpl4();
    [ExtensionAttribute]
[ExpressionMethodAttribute("NoUseMergeHintImpl4")]
public static IOracleSpecificQueryable`1<TSource> NoUseMergeHint(IOracleSpecificQueryable`1<TSource> query, SqlID[] tableIDs);
    private static Expression`1<Func`3<IOracleSpecificQueryable`1<TSource>, SqlID[], IOracleSpecificQueryable`1<TSource>>> NoUseMergeHintImpl4();
    [ExtensionAttribute]
[ExpressionMethodAttribute("UseNLHintImpl4")]
public static IOracleSpecificQueryable`1<TSource> UseNLHint(IOracleSpecificQueryable`1<TSource> query, SqlID[] tableIDs);
    private static Expression`1<Func`3<IOracleSpecificQueryable`1<TSource>, SqlID[], IOracleSpecificQueryable`1<TSource>>> UseNLHintImpl4();
    [ExtensionAttribute]
[ExpressionMethodAttribute("UseNestedLoopHintImpl4")]
public static IOracleSpecificQueryable`1<TSource> UseNestedLoopHint(IOracleSpecificQueryable`1<TSource> query, SqlID[] tableIDs);
    private static Expression`1<Func`3<IOracleSpecificQueryable`1<TSource>, SqlID[], IOracleSpecificQueryable`1<TSource>>> UseNestedLoopHintImpl4();
    [ExtensionAttribute]
[ExpressionMethodAttribute("NoUseNLHintImpl4")]
public static IOracleSpecificQueryable`1<TSource> NoUseNLHint(IOracleSpecificQueryable`1<TSource> query, SqlID[] tableIDs);
    private static Expression`1<Func`3<IOracleSpecificQueryable`1<TSource>, SqlID[], IOracleSpecificQueryable`1<TSource>>> NoUseNLHintImpl4();
    [ExtensionAttribute]
[ExpressionMethodAttribute("NoUseNestedLoopHintImpl4")]
public static IOracleSpecificQueryable`1<TSource> NoUseNestedLoopHint(IOracleSpecificQueryable`1<TSource> query, SqlID[] tableIDs);
    private static Expression`1<Func`3<IOracleSpecificQueryable`1<TSource>, SqlID[], IOracleSpecificQueryable`1<TSource>>> NoUseNestedLoopHintImpl4();
    [ExtensionAttribute]
[ExpressionMethodAttribute("Oracle", "UseNLWithIndexIndexHintImpl")]
public static IOracleSpecificTable`1<TSource> UseNLWithIndexHint(IOracleSpecificTable`1<TSource> table, String[] indexNames);
    private static Expression`1<Func`3<IOracleSpecificTable`1<TSource>, String[], IOracleSpecificTable`1<TSource>>> UseNLWithIndexIndexHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("Oracle", "UseNestedLoopWithIndexIndexHintImpl")]
public static IOracleSpecificTable`1<TSource> UseNestedLoopWithIndexHint(IOracleSpecificTable`1<TSource> table, String[] indexNames);
    private static Expression`1<Func`3<IOracleSpecificTable`1<TSource>, String[], IOracleSpecificTable`1<TSource>>> UseNestedLoopWithIndexIndexHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("EnableParallelDmlHintImpl")]
public static IOracleSpecificQueryable`1<TSource> EnableParallelDmlHint(IOracleSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IOracleSpecificQueryable`1<TSource>, IOracleSpecificQueryable`1<TSource>>> EnableParallelDmlHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("DisableParallelDmlHintImpl")]
public static IOracleSpecificQueryable`1<TSource> DisableParallelDmlHint(IOracleSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IOracleSpecificQueryable`1<TSource>, IOracleSpecificQueryable`1<TSource>>> DisableParallelDmlHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("PQConcurrentUnionHintImpl")]
public static IOracleSpecificQueryable`1<TSource> PQConcurrentUnionHint(IOracleSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IOracleSpecificQueryable`1<TSource>, IOracleSpecificQueryable`1<TSource>>> PQConcurrentUnionHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("PQConcurrentUnionHintImpl3")]
public static IOracleSpecificQueryable`1<TSource> PQConcurrentUnionHint(IOracleSpecificQueryable`1<TSource> query, string queryBlock);
    private static Expression`1<Func`3<IOracleSpecificQueryable`1<TSource>, string, IOracleSpecificQueryable`1<TSource>>> PQConcurrentUnionHintImpl3();
    [ExtensionAttribute]
[ExpressionMethodAttribute("NoPQConcurrentUnionHintImpl")]
public static IOracleSpecificQueryable`1<TSource> NoPQConcurrentUnionHint(IOracleSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IOracleSpecificQueryable`1<TSource>, IOracleSpecificQueryable`1<TSource>>> NoPQConcurrentUnionHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("NoPQConcurrentUnionHintImpl3")]
public static IOracleSpecificQueryable`1<TSource> NoPQConcurrentUnionHint(IOracleSpecificQueryable`1<TSource> query, string queryBlock);
    private static Expression`1<Func`3<IOracleSpecificQueryable`1<TSource>, string, IOracleSpecificQueryable`1<TSource>>> NoPQConcurrentUnionHintImpl3();
    [ExtensionAttribute]
[ExpressionMethodAttribute("PQFilterSerialHintImpl")]
public static IOracleSpecificQueryable`1<TSource> PQFilterSerialHint(IOracleSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IOracleSpecificQueryable`1<TSource>, IOracleSpecificQueryable`1<TSource>>> PQFilterSerialHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("PQFilterNoneHintImpl")]
public static IOracleSpecificQueryable`1<TSource> PQFilterNoneHint(IOracleSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IOracleSpecificQueryable`1<TSource>, IOracleSpecificQueryable`1<TSource>>> PQFilterNoneHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("PQFilterHashHintImpl")]
public static IOracleSpecificQueryable`1<TSource> PQFilterHashHint(IOracleSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IOracleSpecificQueryable`1<TSource>, IOracleSpecificQueryable`1<TSource>>> PQFilterHashHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("PQFilterRandomHintImpl")]
public static IOracleSpecificQueryable`1<TSource> PQFilterRandomHint(IOracleSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IOracleSpecificQueryable`1<TSource>, IOracleSpecificQueryable`1<TSource>>> PQFilterRandomHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("Oracle", "PQSkewTableHintImpl")]
public static IOracleSpecificTable`1<TSource> PQSkewHint(IOracleSpecificTable`1<TSource> table);
    private static Expression`1<Func`2<IOracleSpecificTable`1<TSource>, IOracleSpecificTable`1<TSource>>> PQSkewTableHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("Oracle", "PQSkewInScopeHintImpl")]
public static IOracleSpecificQueryable`1<TSource> PQSkewInScopeHint(IOracleSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IOracleSpecificQueryable`1<TSource>, IOracleSpecificQueryable`1<TSource>>> PQSkewInScopeHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("Oracle", "NoPQSkewTableHintImpl")]
public static IOracleSpecificTable`1<TSource> NoPQSkewHint(IOracleSpecificTable`1<TSource> table);
    private static Expression`1<Func`2<IOracleSpecificTable`1<TSource>, IOracleSpecificTable`1<TSource>>> NoPQSkewTableHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("Oracle", "NoPQSkewInScopeHintImpl")]
public static IOracleSpecificQueryable`1<TSource> NoPQSkewInScopeHint(IOracleSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IOracleSpecificQueryable`1<TSource>, IOracleSpecificQueryable`1<TSource>>> NoPQSkewInScopeHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("NoQueryTransformationHintImpl")]
public static IOracleSpecificQueryable`1<TSource> NoQueryTransformationHint(IOracleSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IOracleSpecificQueryable`1<TSource>, IOracleSpecificQueryable`1<TSource>>> NoQueryTransformationHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("UseConcatHintImpl")]
public static IOracleSpecificQueryable`1<TSource> UseConcatHint(IOracleSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IOracleSpecificQueryable`1<TSource>, IOracleSpecificQueryable`1<TSource>>> UseConcatHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("UseConcatHintImpl3")]
public static IOracleSpecificQueryable`1<TSource> UseConcatHint(IOracleSpecificQueryable`1<TSource> query, string queryBlock);
    private static Expression`1<Func`3<IOracleSpecificQueryable`1<TSource>, string, IOracleSpecificQueryable`1<TSource>>> UseConcatHintImpl3();
    [ExtensionAttribute]
[ExpressionMethodAttribute("NoExpandHintImpl")]
public static IOracleSpecificQueryable`1<TSource> NoExpandHint(IOracleSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IOracleSpecificQueryable`1<TSource>, IOracleSpecificQueryable`1<TSource>>> NoExpandHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("NoExpandHintImpl3")]
public static IOracleSpecificQueryable`1<TSource> NoExpandHint(IOracleSpecificQueryable`1<TSource> query, string queryBlock);
    private static Expression`1<Func`3<IOracleSpecificQueryable`1<TSource>, string, IOracleSpecificQueryable`1<TSource>>> NoExpandHintImpl3();
    [ExtensionAttribute]
[ExpressionMethodAttribute("RewriteHintImpl")]
public static IOracleSpecificQueryable`1<TSource> RewriteHint(IOracleSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IOracleSpecificQueryable`1<TSource>, IOracleSpecificQueryable`1<TSource>>> RewriteHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("RewriteHintImpl3")]
public static IOracleSpecificQueryable`1<TSource> RewriteHint(IOracleSpecificQueryable`1<TSource> query, string queryBlock);
    private static Expression`1<Func`3<IOracleSpecificQueryable`1<TSource>, string, IOracleSpecificQueryable`1<TSource>>> RewriteHintImpl3();
    [ExtensionAttribute]
[ExpressionMethodAttribute("NoRewriteHintImpl")]
public static IOracleSpecificQueryable`1<TSource> NoRewriteHint(IOracleSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IOracleSpecificQueryable`1<TSource>, IOracleSpecificQueryable`1<TSource>>> NoRewriteHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("NoRewriteHintImpl3")]
public static IOracleSpecificQueryable`1<TSource> NoRewriteHint(IOracleSpecificQueryable`1<TSource> query, string queryBlock);
    private static Expression`1<Func`3<IOracleSpecificQueryable`1<TSource>, string, IOracleSpecificQueryable`1<TSource>>> NoRewriteHintImpl3();
    [ExtensionAttribute]
[ExpressionMethodAttribute("MergeHintImpl")]
public static IOracleSpecificQueryable`1<TSource> MergeHint(IOracleSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IOracleSpecificQueryable`1<TSource>, IOracleSpecificQueryable`1<TSource>>> MergeHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("MergeHintImpl3")]
public static IOracleSpecificQueryable`1<TSource> MergeHint(IOracleSpecificQueryable`1<TSource> query, string queryBlock);
    private static Expression`1<Func`3<IOracleSpecificQueryable`1<TSource>, string, IOracleSpecificQueryable`1<TSource>>> MergeHintImpl3();
    [ExtensionAttribute]
[ExpressionMethodAttribute("Oracle", "MergeTableHintImpl")]
public static IOracleSpecificTable`1<TSource> MergeHint(IOracleSpecificTable`1<TSource> table);
    private static Expression`1<Func`2<IOracleSpecificTable`1<TSource>, IOracleSpecificTable`1<TSource>>> MergeTableHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("Oracle", "MergeInScopeHintImpl")]
public static IOracleSpecificQueryable`1<TSource> MergeInScopeHint(IOracleSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IOracleSpecificQueryable`1<TSource>, IOracleSpecificQueryable`1<TSource>>> MergeInScopeHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("NoMergeHintImpl")]
public static IOracleSpecificQueryable`1<TSource> NoMergeHint(IOracleSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IOracleSpecificQueryable`1<TSource>, IOracleSpecificQueryable`1<TSource>>> NoMergeHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("NoMergeHintImpl3")]
public static IOracleSpecificQueryable`1<TSource> NoMergeHint(IOracleSpecificQueryable`1<TSource> query, string queryBlock);
    private static Expression`1<Func`3<IOracleSpecificQueryable`1<TSource>, string, IOracleSpecificQueryable`1<TSource>>> NoMergeHintImpl3();
    [ExtensionAttribute]
[ExpressionMethodAttribute("Oracle", "NoMergeTableHintImpl")]
public static IOracleSpecificTable`1<TSource> NoMergeHint(IOracleSpecificTable`1<TSource> table);
    private static Expression`1<Func`2<IOracleSpecificTable`1<TSource>, IOracleSpecificTable`1<TSource>>> NoMergeTableHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("Oracle", "NoMergeInScopeHintImpl")]
public static IOracleSpecificQueryable`1<TSource> NoMergeInScopeHint(IOracleSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IOracleSpecificQueryable`1<TSource>, IOracleSpecificQueryable`1<TSource>>> NoMergeInScopeHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("StarTransformationHintImpl")]
public static IOracleSpecificQueryable`1<TSource> StarTransformationHint(IOracleSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IOracleSpecificQueryable`1<TSource>, IOracleSpecificQueryable`1<TSource>>> StarTransformationHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("StarTransformationHintImpl3")]
public static IOracleSpecificQueryable`1<TSource> StarTransformationHint(IOracleSpecificQueryable`1<TSource> query, string queryBlock);
    private static Expression`1<Func`3<IOracleSpecificQueryable`1<TSource>, string, IOracleSpecificQueryable`1<TSource>>> StarTransformationHintImpl3();
    [ExtensionAttribute]
[ExpressionMethodAttribute("NoStarTransformationHintImpl")]
public static IOracleSpecificQueryable`1<TSource> NoStarTransformationHint(IOracleSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IOracleSpecificQueryable`1<TSource>, IOracleSpecificQueryable`1<TSource>>> NoStarTransformationHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("NoStarTransformationHintImpl3")]
public static IOracleSpecificQueryable`1<TSource> NoStarTransformationHint(IOracleSpecificQueryable`1<TSource> query, string queryBlock);
    private static Expression`1<Func`3<IOracleSpecificQueryable`1<TSource>, string, IOracleSpecificQueryable`1<TSource>>> NoStarTransformationHintImpl3();
    [ExtensionAttribute]
[ExpressionMethodAttribute("Oracle", "FactTableHintImpl")]
public static IOracleSpecificTable`1<TSource> FactHint(IOracleSpecificTable`1<TSource> table);
    private static Expression`1<Func`2<IOracleSpecificTable`1<TSource>, IOracleSpecificTable`1<TSource>>> FactTableHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("Oracle", "FactInScopeHintImpl")]
public static IOracleSpecificQueryable`1<TSource> FactInScopeHint(IOracleSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IOracleSpecificQueryable`1<TSource>, IOracleSpecificQueryable`1<TSource>>> FactInScopeHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("Oracle", "NoFactTableHintImpl")]
public static IOracleSpecificTable`1<TSource> NoFactHint(IOracleSpecificTable`1<TSource> table);
    private static Expression`1<Func`2<IOracleSpecificTable`1<TSource>, IOracleSpecificTable`1<TSource>>> NoFactTableHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("Oracle", "NoFactInScopeHintImpl")]
public static IOracleSpecificQueryable`1<TSource> NoFactInScopeHint(IOracleSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IOracleSpecificQueryable`1<TSource>, IOracleSpecificQueryable`1<TSource>>> NoFactInScopeHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("UnnestHintImpl")]
public static IOracleSpecificQueryable`1<TSource> UnnestHint(IOracleSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IOracleSpecificQueryable`1<TSource>, IOracleSpecificQueryable`1<TSource>>> UnnestHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("UnnestHintImpl3")]
public static IOracleSpecificQueryable`1<TSource> UnnestHint(IOracleSpecificQueryable`1<TSource> query, string queryBlock);
    private static Expression`1<Func`3<IOracleSpecificQueryable`1<TSource>, string, IOracleSpecificQueryable`1<TSource>>> UnnestHintImpl3();
    [ExtensionAttribute]
[ExpressionMethodAttribute("NoUnnestHintImpl")]
public static IOracleSpecificQueryable`1<TSource> NoUnnestHint(IOracleSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IOracleSpecificQueryable`1<TSource>, IOracleSpecificQueryable`1<TSource>>> NoUnnestHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("NoUnnestHintImpl3")]
public static IOracleSpecificQueryable`1<TSource> NoUnnestHint(IOracleSpecificQueryable`1<TSource> query, string queryBlock);
    private static Expression`1<Func`3<IOracleSpecificQueryable`1<TSource>, string, IOracleSpecificQueryable`1<TSource>>> NoUnnestHintImpl3();
    [ExtensionAttribute]
[ExpressionMethodAttribute("LeadingHintImpl4")]
public static IOracleSpecificQueryable`1<TSource> LeadingHint(IOracleSpecificQueryable`1<TSource> query, SqlID[] tableIDs);
    private static Expression`1<Func`3<IOracleSpecificQueryable`1<TSource>, SqlID[], IOracleSpecificQueryable`1<TSource>>> LeadingHintImpl4();
    [ExtensionAttribute]
[ExpressionMethodAttribute("OrderedHintImpl")]
public static IOracleSpecificQueryable`1<TSource> OrderedHint(IOracleSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IOracleSpecificQueryable`1<TSource>, IOracleSpecificQueryable`1<TSource>>> OrderedHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("ParallelHintImpl")]
public static IOracleSpecificQueryable`1<TSource> ParallelHint(IOracleSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IOracleSpecificQueryable`1<TSource>, IOracleSpecificQueryable`1<TSource>>> ParallelHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("Oracle", "NoParallelTableHintImpl")]
public static IOracleSpecificTable`1<TSource> NoParallelHint(IOracleSpecificTable`1<TSource> table);
    private static Expression`1<Func`2<IOracleSpecificTable`1<TSource>, IOracleSpecificTable`1<TSource>>> NoParallelTableHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("Oracle", "NoParallelInScopeHintImpl")]
public static IOracleSpecificQueryable`1<TSource> NoParallelInScopeHint(IOracleSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IOracleSpecificQueryable`1<TSource>, IOracleSpecificQueryable`1<TSource>>> NoParallelInScopeHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("AppendHintImpl")]
public static IOracleSpecificQueryable`1<TSource> AppendHint(IOracleSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IOracleSpecificQueryable`1<TSource>, IOracleSpecificQueryable`1<TSource>>> AppendHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("AppendValuesHintImpl")]
public static IOracleSpecificQueryable`1<TSource> AppendValuesHint(IOracleSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IOracleSpecificQueryable`1<TSource>, IOracleSpecificQueryable`1<TSource>>> AppendValuesHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("NoAppendHintImpl")]
public static IOracleSpecificQueryable`1<TSource> NoAppendHint(IOracleSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IOracleSpecificQueryable`1<TSource>, IOracleSpecificQueryable`1<TSource>>> NoAppendHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("Oracle", "CacheTableHintImpl")]
public static IOracleSpecificTable`1<TSource> CacheHint(IOracleSpecificTable`1<TSource> table);
    private static Expression`1<Func`2<IOracleSpecificTable`1<TSource>, IOracleSpecificTable`1<TSource>>> CacheTableHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("Oracle", "CacheInScopeHintImpl")]
public static IOracleSpecificQueryable`1<TSource> CacheInScopeHint(IOracleSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IOracleSpecificQueryable`1<TSource>, IOracleSpecificQueryable`1<TSource>>> CacheInScopeHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("Oracle", "NoCacheTableHintImpl")]
public static IOracleSpecificTable`1<TSource> NoCacheHint(IOracleSpecificTable`1<TSource> table);
    private static Expression`1<Func`2<IOracleSpecificTable`1<TSource>, IOracleSpecificTable`1<TSource>>> NoCacheTableHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("Oracle", "NoCacheInScopeHintImpl")]
public static IOracleSpecificQueryable`1<TSource> NoCacheInScopeHint(IOracleSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IOracleSpecificQueryable`1<TSource>, IOracleSpecificQueryable`1<TSource>>> NoCacheInScopeHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("PushPredicateHintImpl")]
public static IOracleSpecificQueryable`1<TSource> PushPredicateHint(IOracleSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IOracleSpecificQueryable`1<TSource>, IOracleSpecificQueryable`1<TSource>>> PushPredicateHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("PushPredicateHintImpl3")]
public static IOracleSpecificQueryable`1<TSource> PushPredicateHint(IOracleSpecificQueryable`1<TSource> query, string queryBlock);
    private static Expression`1<Func`3<IOracleSpecificQueryable`1<TSource>, string, IOracleSpecificQueryable`1<TSource>>> PushPredicateHintImpl3();
    [ExtensionAttribute]
[ExpressionMethodAttribute("Oracle", "PushPredicateTableHintImpl")]
public static IOracleSpecificTable`1<TSource> PushPredicateHint(IOracleSpecificTable`1<TSource> table);
    private static Expression`1<Func`2<IOracleSpecificTable`1<TSource>, IOracleSpecificTable`1<TSource>>> PushPredicateTableHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("Oracle", "PushPredicateInScopeHintImpl")]
public static IOracleSpecificQueryable`1<TSource> PushPredicateInScopeHint(IOracleSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IOracleSpecificQueryable`1<TSource>, IOracleSpecificQueryable`1<TSource>>> PushPredicateInScopeHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("NoPushPredicateHintImpl")]
public static IOracleSpecificQueryable`1<TSource> NoPushPredicateHint(IOracleSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IOracleSpecificQueryable`1<TSource>, IOracleSpecificQueryable`1<TSource>>> NoPushPredicateHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("NoPushPredicateHintImpl3")]
public static IOracleSpecificQueryable`1<TSource> NoPushPredicateHint(IOracleSpecificQueryable`1<TSource> query, string queryBlock);
    private static Expression`1<Func`3<IOracleSpecificQueryable`1<TSource>, string, IOracleSpecificQueryable`1<TSource>>> NoPushPredicateHintImpl3();
    [ExtensionAttribute]
[ExpressionMethodAttribute("Oracle", "NoPushPredicateTableHintImpl")]
public static IOracleSpecificTable`1<TSource> NoPushPredicateHint(IOracleSpecificTable`1<TSource> table);
    private static Expression`1<Func`2<IOracleSpecificTable`1<TSource>, IOracleSpecificTable`1<TSource>>> NoPushPredicateTableHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("Oracle", "NoPushPredicateInScopeHintImpl")]
public static IOracleSpecificQueryable`1<TSource> NoPushPredicateInScopeHint(IOracleSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IOracleSpecificQueryable`1<TSource>, IOracleSpecificQueryable`1<TSource>>> NoPushPredicateInScopeHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("PushSubQueriesHintImpl3")]
public static IOracleSpecificQueryable`1<TSource> PushSubQueriesHint(IOracleSpecificQueryable`1<TSource> query, string queryBlock);
    private static Expression`1<Func`3<IOracleSpecificQueryable`1<TSource>, string, IOracleSpecificQueryable`1<TSource>>> PushSubQueriesHintImpl3();
    [ExtensionAttribute]
[ExpressionMethodAttribute("NoPushSubQueriesHintImpl3")]
public static IOracleSpecificQueryable`1<TSource> NoPushSubQueriesHint(IOracleSpecificQueryable`1<TSource> query, string queryBlock);
    private static Expression`1<Func`3<IOracleSpecificQueryable`1<TSource>, string, IOracleSpecificQueryable`1<TSource>>> NoPushSubQueriesHintImpl3();
    [ExtensionAttribute]
[ExpressionMethodAttribute("CursorSharingExactHintImpl")]
public static IOracleSpecificQueryable`1<TSource> CursorSharingExactHint(IOracleSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IOracleSpecificQueryable`1<TSource>, IOracleSpecificQueryable`1<TSource>>> CursorSharingExactHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("Oracle", "DrivingSiteTableHintImpl")]
public static IOracleSpecificTable`1<TSource> DrivingSiteHint(IOracleSpecificTable`1<TSource> table);
    private static Expression`1<Func`2<IOracleSpecificTable`1<TSource>, IOracleSpecificTable`1<TSource>>> DrivingSiteTableHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("Oracle", "DrivingSiteInScopeHintImpl")]
public static IOracleSpecificQueryable`1<TSource> DrivingSiteInScopeHint(IOracleSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IOracleSpecificQueryable`1<TSource>, IOracleSpecificQueryable`1<TSource>>> DrivingSiteInScopeHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("ModelMinAnalysisHintImpl")]
public static IOracleSpecificQueryable`1<TSource> ModelMinAnalysisHint(IOracleSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IOracleSpecificQueryable`1<TSource>, IOracleSpecificQueryable`1<TSource>>> ModelMinAnalysisHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("Oracle", "PxJoinFilterTableHintImpl")]
public static IOracleSpecificTable`1<TSource> PxJoinFilterHint(IOracleSpecificTable`1<TSource> table);
    private static Expression`1<Func`2<IOracleSpecificTable`1<TSource>, IOracleSpecificTable`1<TSource>>> PxJoinFilterTableHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("Oracle", "PxJoinFilterInScopeHintImpl")]
public static IOracleSpecificQueryable`1<TSource> PxJoinFilterInScopeHint(IOracleSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IOracleSpecificQueryable`1<TSource>, IOracleSpecificQueryable`1<TSource>>> PxJoinFilterInScopeHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("Oracle", "NoPxJoinFilterTableHintImpl")]
public static IOracleSpecificTable`1<TSource> NoPxJoinFilterHint(IOracleSpecificTable`1<TSource> table);
    private static Expression`1<Func`2<IOracleSpecificTable`1<TSource>, IOracleSpecificTable`1<TSource>>> NoPxJoinFilterTableHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("Oracle", "NoPxJoinFilterInScopeHintImpl")]
public static IOracleSpecificQueryable`1<TSource> NoPxJoinFilterInScopeHint(IOracleSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IOracleSpecificQueryable`1<TSource>, IOracleSpecificQueryable`1<TSource>>> NoPxJoinFilterInScopeHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("NoXmlQueryRewriteHintImpl")]
public static IOracleSpecificQueryable`1<TSource> NoXmlQueryRewriteHint(IOracleSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IOracleSpecificQueryable`1<TSource>, IOracleSpecificQueryable`1<TSource>>> NoXmlQueryRewriteHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("NoXmlIndexRewriteHintImpl")]
public static IOracleSpecificQueryable`1<TSource> NoXmlIndexRewriteHint(IOracleSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IOracleSpecificQueryable`1<TSource>, IOracleSpecificQueryable`1<TSource>>> NoXmlIndexRewriteHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("FreshMaterializedViewHintImpl")]
public static IOracleSpecificQueryable`1<TSource> FreshMaterializedViewHint(IOracleSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IOracleSpecificQueryable`1<TSource>, IOracleSpecificQueryable`1<TSource>>> FreshMaterializedViewHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("FreshMVHintImpl")]
public static IOracleSpecificQueryable`1<TSource> FreshMVHint(IOracleSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IOracleSpecificQueryable`1<TSource>, IOracleSpecificQueryable`1<TSource>>> FreshMVHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("GroupingHintImpl")]
public static IOracleSpecificQueryable`1<TSource> GroupingHint(IOracleSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IOracleSpecificQueryable`1<TSource>, IOracleSpecificQueryable`1<TSource>>> GroupingHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("MonitorHintImpl")]
public static IOracleSpecificQueryable`1<TSource> MonitorHint(IOracleSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IOracleSpecificQueryable`1<TSource>, IOracleSpecificQueryable`1<TSource>>> MonitorHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("NoMonitorHintImpl")]
public static IOracleSpecificQueryable`1<TSource> NoMonitorHint(IOracleSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<IOracleSpecificQueryable`1<TSource>, IOracleSpecificQueryable`1<TSource>>> NoMonitorHintImpl();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.DataProvider.Oracle.OracleMappingSchema : LockedMappingSchema {
    private static string DATE_FORMAT;
    private static string DATETIME_FORMAT;
    private static string TIMESTAMP0_FORMAT;
    private static string TIMESTAMP1_FORMAT;
    private static string TIMESTAMP2_FORMAT;
    private static string TIMESTAMP3_FORMAT;
    private static string TIMESTAMP4_FORMAT;
    private static string TIMESTAMP5_FORMAT;
    private static string TIMESTAMP6_FORMAT;
    private static string TIMESTAMP7_FORMAT;
    private static string TIMESTAMPTZ0_FORMAT;
    private static string TIMESTAMPTZ1_FORMAT;
    private static string TIMESTAMPTZ2_FORMAT;
    private static string TIMESTAMPTZ3_FORMAT;
    private static string TIMESTAMPTZ4_FORMAT;
    private static string TIMESTAMPTZ5_FORMAT;
    private static string TIMESTAMPTZ6_FORMAT;
    private static string TIMESTAMPTZ7_FORMAT;
    private static Action`2<StringBuilder, int> AppendConversionAction;
    internal static OracleMappingSchema Instance;
    private static OracleMappingSchema();
    private static void ConvertBinaryToSql(StringBuilder stringBuilder, Byte[] value);
    private static void AppendConversion(StringBuilder stringBuilder, int value);
    internal static void ConvertStringToSql(StringBuilder stringBuilder, string value);
    private static void ConvertCharToSql(StringBuilder stringBuilder, char value);
    public virtual LambdaExpression TryGetConvertExpression(Type from, Type to);
    private static void ConvertDateTimeToSql(StringBuilder stringBuilder, SqlDataType dataType, DateTime value);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class LinqToDB.DataProvider.Oracle.OracleOptions : DataProviderOptions`1<OracleOptions> {
    [CompilerGeneratedAttribute]
private AlternativeBulkCopy <AlternativeBulkCopy>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DontEscapeLowercaseIdentifiers>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public AlternativeBulkCopy AlternativeBulkCopy { get; public set; }
    public bool DontEscapeLowercaseIdentifiers { get; public set; }
    public OracleOptions(BulkCopyType BulkCopyType, AlternativeBulkCopy AlternativeBulkCopy, bool DontEscapeLowercaseIdentifiers);
    private OracleOptions(OracleOptions original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public AlternativeBulkCopy get_AlternativeBulkCopy();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_AlternativeBulkCopy(AlternativeBulkCopy value);
    [CompilerGeneratedAttribute]
public bool get_DontEscapeLowercaseIdentifiers();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_DontEscapeLowercaseIdentifiers(bool value);
    protected virtual IdentifierBuilder CreateID(IdentifierBuilder builder);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(OracleOptions other);
    public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(OracleOptions left, OracleOptions right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(OracleOptions left, OracleOptions right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(DataProviderOptions`1<OracleOptions> other);
    [CompilerGeneratedAttribute]
public virtual DataProviderOptions`1<OracleOptions> <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(BulkCopyType& BulkCopyType, AlternativeBulkCopy& AlternativeBulkCopy, Boolean& DontEscapeLowercaseIdentifiers);
}
public enum LinqToDB.DataProvider.Oracle.OracleProvider : Enum {
    public int value__;
    public static OracleProvider Managed;
    public static OracleProvider Native;
    public static OracleProvider Devart;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.DataProvider.Oracle.OracleProviderAdapter : object {
    private static int NanosecondsPerTick;
    private static Type[] IndexParams;
    private static object _nativeSyncRoot;
    [NullableAttribute("2")]
private static OracleProviderAdapter _nativeAdapter;
    public static string NativeAssemblyName;
    public static string NativeProviderFactoryName;
    public static string NativeClientNamespace;
    public static string NativeTypesNamespace;
    private static object _managedSyncRoot;
    [NullableAttribute("2")]
private static OracleProviderAdapter _managedAdapter;
    public static string ManagedAssemblyName;
    public static string ManagedClientNamespace;
    public static string ManagedTypesNamespace;
    private static object _devartSyncRoot;
    [NullableAttribute("2")]
private static OracleProviderAdapter _devartAdapter;
    public static string DevartAssemblyName;
    public static string DevartClientNamespace;
    public static string DevartTypesNamespace;
    public static string DevartFactoryName;
    [CompilerGeneratedAttribute]
private Type <ConnectionType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <DataReaderType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ParameterType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <CommandType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <TransactionType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <BindingByNameEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private MappingSchema <MappingSchema>k__BackingField;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IReadOnlyList`1<ValueTuple`2<Type, string>> <CustomReaders>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <OracleBFileType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <OracleBinaryType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <OracleBlobType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <OracleClobType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <OracleDateType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <OracleDecimalType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <OracleIntervalDSType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <OracleIntervalYMType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <OracleStringType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <OracleTimeStampType>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Type <OracleTimeStampLTZType>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Type <OracleTimeStampTZType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <OracleXmlTypeType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <OracleRefCursorType>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Type <OracleXmlStreamType>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Type <OracleRefType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProviderTypesNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`2<DbParameter, OracleDbType> <SetDbType>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<DbParameter, Nullable`1<OracleDbType>> <GetDbType>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<DbConnection, string> <GetHostName>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<DbConnection, string> <GetDatabaseName>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`2<DbCommand, bool> <SetBindByName>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`2<DbCommand, int> <SetArrayBindCount>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`2<DbCommand, int> <SetInitialLONGFetchSize>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`3<DbCommand, int, int> <ExecuteArray>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Expression`1<Func`3<DbDataReader, int, DateTimeOffset>> <ReadDateTimeOffsetFromOracleTimeStamp>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression`1<Func`3<DbDataReader, int, DateTimeOffset>> <ReadDateTimeOffsetFromOracleTimeStampTZ>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Expression`1<Func`3<DbDataReader, int, DateTimeOffset>> <ReadDateTimeOffsetFromOracleTimeStampLTZ>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Expression`1<Func`3<DbDataReader, int, decimal>> <ReadOracleDecimalToDecimalAdv>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Expression`1<Func`3<DbDataReader, int, int>> <ReadOracleDecimalToInt>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Expression`1<Func`3<DbDataReader, int, long>> <ReadOracleDecimalToLong>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Expression`1<Func`3<DbDataReader, int, decimal>> <ReadOracleDecimalToDecimal>k__BackingField;
    private Func`3<DateTimeOffset, string, object> _createOracleTimeStampTZ;
    private Func`2<string, DbConnection> _connectionCreator;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IBulkCopyAdapter <BulkCopy>k__BackingField;
    public Type ConnectionType { get; }
    public Type DataReaderType { get; }
    public Type ParameterType { get; }
    public Type CommandType { get; }
    public Type TransactionType { get; }
    public bool BindingByNameEnabled { get; }
    public MappingSchema MappingSchema { get; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal IReadOnlyList`1<ValueTuple`2<Type, string>> CustomReaders { get; }
    public Type OracleBFileType { get; }
    public Type OracleBinaryType { get; }
    public Type OracleBlobType { get; }
    public Type OracleClobType { get; }
    public Type OracleDateType { get; }
    public Type OracleDecimalType { get; }
    public Type OracleIntervalDSType { get; }
    public Type OracleIntervalYMType { get; }
    public Type OracleStringType { get; }
    public Type OracleTimeStampType { get; }
    [NullableAttribute("2")]
public Type OracleTimeStampLTZType { get; }
    [NullableAttribute("2")]
public Type OracleTimeStampTZType { get; }
    public Type OracleXmlTypeType { get; }
    public Type OracleRefCursorType { get; }
    [NullableAttribute("2")]
private Type OracleXmlStreamType { get; }
    [NullableAttribute("2")]
private Type OracleRefType { get; }
    public string ProviderTypesNamespace { get; }
    internal Action`2<DbParameter, OracleDbType> SetDbType { get; }
    internal Func`2<DbParameter, Nullable`1<OracleDbType>> GetDbType { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<DbConnection, string> GetHostName { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<DbConnection, string> GetDatabaseName { get; }
    public Action`2<DbCommand, bool> SetBindByName { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`2<DbCommand, int> SetArrayBindCount { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`2<DbCommand, int> SetInitialLONGFetchSize { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`3<DbCommand, int, int> ExecuteArray { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Expression`1<Func`3<DbDataReader, int, DateTimeOffset>> ReadDateTimeOffsetFromOracleTimeStamp { get; }
    public Expression`1<Func`3<DbDataReader, int, DateTimeOffset>> ReadDateTimeOffsetFromOracleTimeStampTZ { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Expression`1<Func`3<DbDataReader, int, DateTimeOffset>> ReadDateTimeOffsetFromOracleTimeStampLTZ { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Expression`1<Func`3<DbDataReader, int, decimal>> ReadOracleDecimalToDecimalAdv { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Expression`1<Func`3<DbDataReader, int, int>> ReadOracleDecimalToInt { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Expression`1<Func`3<DbDataReader, int, long>> ReadOracleDecimalToLong { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Expression`1<Func`3<DbDataReader, int, decimal>> ReadOracleDecimalToDecimal { get; }
    [NullableAttribute("2")]
internal IBulkCopyAdapter BulkCopy { get; }
    private OracleProviderAdapter(Type connectionType, Type dataReaderType, Type parameterType, Type commandType, Type transactionType, MappingSchema mappingSchema, bool bindingByNameEnabled, IReadOnlyList`1<ValueTuple`2<Type, string>> customReaders, Type oracleBFileType, Type oracleBinaryType, Type oracleBlobType, Type oracleClobType, Type oracleDateType, Type oracleDecimalType, Type oracleIntervalDSType, Type oracleIntervalYMType, Type oracleStringType, Type oracleTimeStampType, Type oracleTimeStampLTZType, Type oracleTimeStampTZType, Type oracleXmlTypeType, Type oracleXmlStreamType, Type oracleRefCursorType, Type oracleRefType, Func`2<string, DbConnection> connectionCreator, string typesNamespace, Action`2<DbParameter, OracleDbType> dbTypeSetter, Func`2<DbParameter, Nullable`1<OracleDbType>> dbTypeGetter, Func`2<DbConnection, string> hostNameGetter, Func`2<DbConnection, string> databaseNameGetter, Action`2<DbCommand, bool> bindByNameSetter, Action`2<DbCommand, int> arrayBindCountSetter, Action`2<DbCommand, int> initialLONGFetchSizeSetter, Func`3<DbCommand, int, int> executeArray, Func`3<DateTimeOffset, string, object> createOracleTimeStampTZ, Expression`1<Func`3<DbDataReader, int, DateTimeOffset>> readDateTimeOffsetFromOracleTimeStamp, Expression`1<Func`3<DbDataReader, int, DateTimeOffset>> readDateTimeOffsetFromOracleTimeStampTZ, Expression`1<Func`3<DbDataReader, int, DateTimeOffset>> readDateTimeOffsetFromOracleTimeStampLTZ, Expression`1<Func`3<DbDataReader, int, decimal>> readOracleDecimalToDecimalAdv, Expression`1<Func`3<DbDataReader, int, int>> readOracleDecimalToInt, Expression`1<Func`3<DbDataReader, int, long>> readOracleDecimalToLong, Expression`1<Func`3<DbDataReader, int, decimal>> readOracleDecimalToDecimal, IBulkCopyAdapter bulkCopy);
    private static OracleProviderAdapter();
    [CompilerGeneratedAttribute]
public sealed virtual Type get_ConnectionType();
    [CompilerGeneratedAttribute]
public sealed virtual Type get_DataReaderType();
    [CompilerGeneratedAttribute]
public sealed virtual Type get_ParameterType();
    [CompilerGeneratedAttribute]
public sealed virtual Type get_CommandType();
    [CompilerGeneratedAttribute]
public sealed virtual Type get_TransactionType();
    [CompilerGeneratedAttribute]
public bool get_BindingByNameEnabled();
    [CompilerGeneratedAttribute]
public MappingSchema get_MappingSchema();
    [CompilerGeneratedAttribute]
internal IReadOnlyList`1<ValueTuple`2<Type, string>> get_CustomReaders();
    [CompilerGeneratedAttribute]
public Type get_OracleBFileType();
    [CompilerGeneratedAttribute]
public Type get_OracleBinaryType();
    [CompilerGeneratedAttribute]
public Type get_OracleBlobType();
    [CompilerGeneratedAttribute]
public Type get_OracleClobType();
    [CompilerGeneratedAttribute]
public Type get_OracleDateType();
    [CompilerGeneratedAttribute]
public Type get_OracleDecimalType();
    [CompilerGeneratedAttribute]
public Type get_OracleIntervalDSType();
    [CompilerGeneratedAttribute]
public Type get_OracleIntervalYMType();
    [CompilerGeneratedAttribute]
public Type get_OracleStringType();
    [CompilerGeneratedAttribute]
public Type get_OracleTimeStampType();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Type get_OracleTimeStampLTZType();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Type get_OracleTimeStampTZType();
    [CompilerGeneratedAttribute]
public Type get_OracleXmlTypeType();
    [CompilerGeneratedAttribute]
public Type get_OracleRefCursorType();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private Type get_OracleXmlStreamType();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private Type get_OracleRefType();
    [CompilerGeneratedAttribute]
public string get_ProviderTypesNamespace();
    [CompilerGeneratedAttribute]
internal Action`2<DbParameter, OracleDbType> get_SetDbType();
    [CompilerGeneratedAttribute]
internal Func`2<DbParameter, Nullable`1<OracleDbType>> get_GetDbType();
    [CompilerGeneratedAttribute]
public Func`2<DbConnection, string> get_GetHostName();
    [CompilerGeneratedAttribute]
public Func`2<DbConnection, string> get_GetDatabaseName();
    [CompilerGeneratedAttribute]
public Action`2<DbCommand, bool> get_SetBindByName();
    [CompilerGeneratedAttribute]
public Action`2<DbCommand, int> get_SetArrayBindCount();
    [CompilerGeneratedAttribute]
public Action`2<DbCommand, int> get_SetInitialLONGFetchSize();
    [CompilerGeneratedAttribute]
public Func`3<DbCommand, int, int> get_ExecuteArray();
    [CompilerGeneratedAttribute]
public Expression`1<Func`3<DbDataReader, int, DateTimeOffset>> get_ReadDateTimeOffsetFromOracleTimeStamp();
    [CompilerGeneratedAttribute]
public Expression`1<Func`3<DbDataReader, int, DateTimeOffset>> get_ReadDateTimeOffsetFromOracleTimeStampTZ();
    [CompilerGeneratedAttribute]
public Expression`1<Func`3<DbDataReader, int, DateTimeOffset>> get_ReadDateTimeOffsetFromOracleTimeStampLTZ();
    [CompilerGeneratedAttribute]
public Expression`1<Func`3<DbDataReader, int, decimal>> get_ReadOracleDecimalToDecimalAdv();
    [CompilerGeneratedAttribute]
public Expression`1<Func`3<DbDataReader, int, int>> get_ReadOracleDecimalToInt();
    [CompilerGeneratedAttribute]
public Expression`1<Func`3<DbDataReader, int, long>> get_ReadOracleDecimalToLong();
    [CompilerGeneratedAttribute]
public Expression`1<Func`3<DbDataReader, int, decimal>> get_ReadOracleDecimalToDecimal();
    public object CreateOracleTimeStampTZ(DateTimeOffset dto, string offset);
    public DbConnection CreateConnection(string connectionString);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal IBulkCopyAdapter get_BulkCopy();
    public static OracleProviderAdapter GetInstance(OracleProvider provider);
    private static OracleProviderAdapter CreateAdapter(string assemblyName, string clientNamespace, string typesNamespace, string factoryName, MappingSchema mappingSchema);
    private static OracleProviderAdapter CreateDevartAdapter();
    private static void TryAddTypeReader(Type dataReaderType, List`1<ValueTuple`2<Type, string>> customReaders, string methodName);
    private static Type LoadType(Assembly assembly, MappingSchema mappingSchema, string typesNamespace, List`1<ValueTuple`2<Type, string>> readers, string typeName, string readMethodName, DataType dataType, bool optional, bool hasNull, bool hasValue, bool skipConvertExpression, bool hasIsNull);
    private static int GetDateTimeOffsetNanoseconds(DateTimeOffset value);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class LinqToDB.DataProvider.Oracle.OracleProviderDetector : ProviderDetectorBase`3<OracleProvider, OracleVersion, DbConnection> {
    private static Lazy`1<IDataProvider> _oracleNativeDataProvider11;
    private static Lazy`1<IDataProvider> _oracleNativeDataProvider12;
    private static Lazy`1<IDataProvider> _oracleManagedDataProvider11;
    private static Lazy`1<IDataProvider> _oracleManagedDataProvider12;
    private static Lazy`1<IDataProvider> _oracleDevartDataProvider11;
    private static Lazy`1<IDataProvider> _oracleDevartDataProvider12;
    private static OracleProviderDetector();
    public virtual IDataProvider DetectProvider(ConnectionOptions options);
    public virtual IDataProvider GetDataProvider(ConnectionOptions options, OracleProvider provider, OracleVersion version);
    public virtual Nullable`1<OracleVersion> DetectServerVersion(DbConnection connection);
    protected virtual DbConnection CreateConnection(OracleProvider provider, string connectionString);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.DataProvider.Oracle.OracleSchemaProvider : SchemaProviderBase {
    private OracleDataProvider _provider;
    private int _majorVersion;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <SchemasFilter>k__BackingField;
    [NullableAttribute("2")]
private string _currentUser;
    protected bool GetProcedureSchemaExecutesProcedure { get; }
    [NullableAttribute("2")]
private string SchemasFilter { get; private set; }
    public OracleSchemaProvider(OracleDataProvider provider);
    protected virtual bool get_GetProcedureSchemaExecutesProcedure();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private string get_SchemasFilter();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_SchemasFilter(string value);
    public virtual DatabaseSchema GetSchema(DataConnection dataConnection, GetSchemaOptions options);
    protected virtual string GetDataSourceName(DataConnection dbConnection);
    protected virtual string GetDatabaseName(DataConnection dbConnection);
    protected virtual List`1<TableInfo> GetTables(DataConnection dataConnection, GetSchemaOptions options);
    protected virtual IReadOnlyCollection`1<PrimaryKeyInfo> GetPrimaryKeys(DataConnection dataConnection, IEnumerable`1<TableSchema> tables, GetSchemaOptions options);
    private static int GetMajorVersion(DataConnection dataConnection);
    protected virtual List`1<ColumnInfo> GetColumns(DataConnection dataConnection, GetSchemaOptions options);
    protected virtual IReadOnlyCollection`1<ForeignKeyInfo> GetForeignKeys(DataConnection dataConnection, IEnumerable`1<TableSchema> tables, GetSchemaOptions options);
    protected virtual List`1<ProcedureInfo> GetProcedures(DataConnection dataConnection, GetSchemaOptions options);
    private void LoadCurrentUser(DataConnection dataConnection);
    protected virtual List`1<ProcedureParameterInfo> GetProcedureParameters(DataConnection dataConnection, IEnumerable`1<ProcedureInfo> procedures, GetSchemaOptions options);
    [NullableContextAttribute("2")]
protected virtual string GetDbType(GetSchemaOptions options, string columnType, DataTypeInfo dataType, Nullable`1<int> length, Nullable`1<int> precision, Nullable`1<int> scale, string udtCatalog, string udtSchema, string udtName);
    [NullableContextAttribute("2")]
protected virtual Type GetSystemType(string dataType, string columnType, DataTypeInfo dataTypeInfo, Nullable`1<int> length, Nullable`1<int> precision, Nullable`1<int> scale, GetSchemaOptions options);
    [NullableContextAttribute("2")]
protected virtual DataType GetDataType(string dataType, string columnType, Nullable`1<int> length, Nullable`1<int> precision, Nullable`1<int> scale);
    protected virtual string GetProviderSpecificTypeNamespace();
    [NullableContextAttribute("2")]
protected virtual string GetProviderSpecificType(string dataType);
    protected virtual string BuildTableFunctionLoadTableSchemaCommand(ProcedureSchema procedure, string commandText);
    protected virtual List`1<ColumnSchema> GetProcedureResultColumns(DataTable resultTable, GetSchemaOptions options);
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class LinqToDB.DataProvider.Oracle.OracleSpecificQueryable`1 : DatabaseSpecificQueryable`1<TSource> {
    [NullableContextAttribute("1")]
public OracleSpecificQueryable`1(IQueryable`1<TSource> queryable);
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class LinqToDB.DataProvider.Oracle.OracleSpecificTable`1 : DatabaseSpecificTable`1<TSource> {
    [NullableContextAttribute("1")]
public OracleSpecificTable`1(ITable`1<TSource> table);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal abstract class LinqToDB.DataProvider.Oracle.OracleSqlBuilderBase : BasicSqlBuilder`1<OracleOptions> {
    [NullableAttribute("2")]
private SqlField _identityField;
    [NullableAttribute("2")]
protected StringBuilder HintBuilder;
    private int _hintPosition;
    private bool _isTopLevelBuilder;
    public bool CteFirst { get; }
    protected bool SupportsColumnAliasesInSource { get; }
    protected bool IsEmptyValuesSourceSupported { get; }
    protected bool IsValuesSyntaxSupported { get; }
    protected string FakeTable { get; }
    protected string FakeTableSchema { get; }
    protected OracleSqlBuilderBase(IDataProvider provider, MappingSchema mappingSchema, DataOptions dataOptions, ISqlOptimizer sqlOptimizer, SqlProviderFlags sqlProviderFlags);
    protected OracleSqlBuilderBase(BasicSqlBuilder parentBuilder);
    public virtual bool get_CteFirst();
    protected virtual void BuildSelectClause(SelectQuery selectQuery);
    protected virtual void BuildGetIdentity(SqlInsertClause insertClause);
    public virtual ISqlExpression GetIdentityExpression(SqlTable table);
    protected virtual bool BuildWhere(SelectQuery selectQuery);
    protected virtual void BuildSetOperation(SetOperation operation, StringBuilder sb);
    protected virtual void BuildDataTypeFromDataType(SqlDataType type, bool forCreateTable, bool canBeNull);
    protected virtual void BuildDeleteQuery(SqlDeleteStatement deleteStatement);
    protected sealed virtual bool IsReserved(string word);
    private bool IsValidIdentifier(string name);
    public virtual StringBuilder Convert(StringBuilder sb, string value, ConvertType convertType);
    protected virtual StringBuilder BuildExpression(ISqlExpression expr, bool buildTableName, bool checkParentheses, string alias, Boolean& addAlias, bool throwExceptionIfTableNotFound);
    protected virtual void BuildExprExprPredicate(ExprExpr expr);
    protected virtual void BuildIsDistinctPredicate(IsDistinct expr);
    protected virtual void BuildInsertOrUpdateQuery(SqlInsertOrUpdateStatement insertOrUpdate);
    public virtual string GetReserveSequenceValuesSql(int count, string sequenceName);
    protected virtual void BuildEmptyInsert(SqlInsertClause insertClause);
    public virtual int CommandCount(SqlStatement statement);
    protected virtual void BuildDropTableStatement(SqlDropTableStatement dropTable);
    protected static string MakeIdentityTriggerName(string tableName);
    protected static string MakeIdentitySequenceName(string tableName);
    protected virtual void BuildCommand(SqlStatement statement, int commandNumber);
    protected virtual void BuildTruncateTable(SqlTruncateTableStatement truncateTable);
    public virtual StringBuilder BuildObjectName(StringBuilder sb, SqlObjectName name, ConvertType objectType, bool escape, TableOptions tableOptions, bool withoutSuffix);
    protected virtual StringBuilder BuildObjectNameSuffix(StringBuilder sb, SqlObjectName name, bool escape);
    private void AppendSchemaPrefix(StringBuilder sb, string schema);
    protected virtual string GetProviderTypeName(IDataContext dataContext, DbParameter parameter);
    protected virtual void BuildCreateTableCommand(SqlTable table);
    protected virtual void BuildStartCreateTableStatement(SqlCreateTableStatement createTable);
    protected virtual void BuildEndCreateTableStatement(SqlCreateTableStatement createTable);
    protected virtual void BuildMultiInsertQuery(SqlMultiInsertStatement statement);
    protected void BuildMultiInsertClause(SqlMultiInsertStatement statement);
    [NullableContextAttribute("2")]
protected virtual void StartStatementQueryExtensions(SelectQuery selectQuery);
    protected virtual void FinalizeBuildQuery(SqlStatement statement);
    protected virtual void BuildTableExtensions(SqlTable table, string alias);
    protected virtual bool get_SupportsColumnAliasesInSource();
    protected virtual bool get_IsEmptyValuesSourceSupported();
    protected virtual bool get_IsValuesSyntaxSupported();
    protected virtual string get_FakeTable();
    protected virtual string get_FakeTableSchema();
    protected virtual void BuildMergeInto(SqlMergeStatement merge);
    protected virtual void BuildMergeOperationInsert(SqlMergeOperationClause operation);
    protected virtual void BuildMergeOperationUpdate(SqlMergeOperationClause operation);
    protected virtual void BuildMergeOperationUpdateWithDelete(SqlMergeOperationClause operation);
    [CompilerGeneratedAttribute]
private bool <IsValidIdentifier>b__12_0(char c);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class LinqToDB.DataProvider.Oracle.OracleTools : object {
    internal static OracleProviderDetector ProviderDetector;
    [NullableAttribute("2")]
private static MethodInfo _oracleXmlTableIEnumerableT;
    [NullableAttribute("2")]
private static MethodInfo _oracleXmlTableString;
    [NullableAttribute("2")]
private static MethodInfo _oracleXmlTableFuncString;
    public static OracleVersion DefaultVersion { get; public set; }
    public static bool AutoDetectProvider { get; public set; }
    [ObsoleteAttribute("Use OracleOptions.Default.BulkCopyType instead.")]
public static BulkCopyType DefaultBulkCopyType { get; public set; }
    [ObsoleteAttribute("Use OracleOptions.Default.AlternativeBulkCopy instead.")]
public static AlternativeBulkCopy UseAlternativeBulkCopy { get; public set; }
    [ObsoleteAttribute("Use OracleOptions.Default.DontEscapeLowercaseIdentifiers instead.")]
public static bool DontEscapeLowercaseIdentifiers { get; public set; }
    private static MethodInfo OracleXmlTableIEnumerableT { get; }
    private static MethodInfo OracleXmlTableString { get; }
    private static MethodInfo OracleXmlTableFuncString { get; }
    private static OracleTools();
    [ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
public static IOracleSpecificTable`1<TSource> AsOracle(ITable`1<TSource> table);
    [ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
public static IOracleSpecificQueryable`1<TSource> AsOracle(IQueryable`1<TSource> source);
    public static OracleVersion get_DefaultVersion();
    public static void set_DefaultVersion(OracleVersion value);
    public static bool get_AutoDetectProvider();
    public static void set_AutoDetectProvider(bool value);
    public static IDataProvider GetDataProvider(OracleVersion version, OracleProvider provider, string connectionString);
    public static DataConnection CreateDataConnection(string connectionString, OracleVersion version, OracleProvider provider);
    public static DataConnection CreateDataConnection(DbConnection connection, OracleVersion version, OracleProvider provider);
    public static DataConnection CreateDataConnection(DbTransaction transaction, OracleVersion version, OracleProvider provider);
    public static BulkCopyType get_DefaultBulkCopyType();
    public static void set_DefaultBulkCopyType(BulkCopyType value);
    public static AlternativeBulkCopy get_UseAlternativeBulkCopy();
    public static void set_UseAlternativeBulkCopy(AlternativeBulkCopy value);
    public static bool get_DontEscapeLowercaseIdentifiers();
    public static void set_DontEscapeLowercaseIdentifiers(bool value);
    public static string GetXmlData(DataOptions options, MappingSchema mappingSchema, IEnumerable`1<T> data);
    private static string GetXmlData(DataOptions options, MappingSchema mappingSchema, SqlTable sqlTable, IEnumerable`1<T> data);
    private static MethodInfo get_OracleXmlTableIEnumerableT();
    private static MethodInfo get_OracleXmlTableString();
    private static MethodInfo get_OracleXmlTableFuncString();
    [ExtensionAttribute]
[OracleXmlTableAttribute]
public static ITable`1<T> OracleXmlTable(IDataContext dataContext, IEnumerable`1<T> data);
    [ExtensionAttribute]
[OracleXmlTableAttribute]
public static ITable`1<T> OracleXmlTable(IDataContext dataContext, string xmlData);
    [ExtensionAttribute]
[OracleXmlTableAttribute]
public static ITable`1<T> OracleXmlTable(IDataContext dataContext, Func`1<string> xmlData);
}
public enum LinqToDB.DataProvider.Oracle.OracleVersion : Enum {
    public int value__;
    public static OracleVersion AutoDetect;
    public static OracleVersion v11;
    public static OracleVersion v12;
}
public interface LinqToDB.DataProvider.PostgreSQL.IPostgreSQLExtensions {
}
public interface LinqToDB.DataProvider.PostgreSQL.IPostgreSQLSpecificQueryable`1 {
}
public interface LinqToDB.DataProvider.PostgreSQL.IPostgreSQLSpecificTable`1 {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.DataProvider.PostgreSQL.NpgsqlProviderAdapter : object {
    private static object _syncRoot;
    [NullableAttribute("2")]
private static NpgsqlProviderAdapter _instance;
    public static string AssemblyName;
    public static string ClientNamespace;
    public static string TypesNamespace;
    private IDictionary`2<NpgsqlDbType, int> _knownDbTypes;
    [CompilerGeneratedAttribute]
private Type <ConnectionType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <DataReaderType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ParameterType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <CommandType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <TransactionType>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Type <NpgsqlDateType>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Type <NpgsqlTimeSpanType>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Type <NpgsqlDateTimeType>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Type <NpgsqlIntervalType>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Expression <NpgsqlIntervalReader>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <NpgsqlPointType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <NpgsqlLSegType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <NpgsqlBoxType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <NpgsqlCircleType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <NpgsqlPathType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <NpgsqlPolygonType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <NpgsqlLineType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <NpgsqlInetType>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Type <NpgsqlCidrType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <NpgsqlRangeTType>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`2<DbParameter, NpgsqlDbType> <SetDbType>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<DbParameter, NpgsqlDbType> <GetDbType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportsBigInteger>k__BackingField;
    private Func`2<string, NpgsqlConnection> _connectionCreator;
    [CompilerGeneratedAttribute]
private Func`3<DbConnection, string, NpgsqlBinaryImporter> <BeginBinaryImport>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`4<DbConnection, string, CancellationToken, Task`1<NpgsqlBinaryImporter>> <BeginBinaryImportAsync>k__BackingField;
    [CompilerGeneratedAttribute]
private MappingSchema <MappingSchema>k__BackingField;
    private static Version MinBigIntegerVersion;
    public Type ConnectionType { get; }
    public Type DataReaderType { get; }
    public Type ParameterType { get; }
    public Type CommandType { get; }
    public Type TransactionType { get; }
    [NullableAttribute("2")]
public Type NpgsqlDateType { get; }
    [NullableAttribute("2")]
public Type NpgsqlTimeSpanType { get; }
    [NullableAttribute("2")]
public Type NpgsqlDateTimeType { get; }
    [NullableAttribute("2")]
public Type NpgsqlIntervalType { get; }
    [NullableAttribute("2")]
public Expression NpgsqlIntervalReader { get; }
    public Type NpgsqlPointType { get; }
    public Type NpgsqlLSegType { get; }
    public Type NpgsqlBoxType { get; }
    public Type NpgsqlCircleType { get; }
    public Type NpgsqlPathType { get; }
    public Type NpgsqlPolygonType { get; }
    public Type NpgsqlLineType { get; }
    public Type NpgsqlInetType { get; }
    [NullableAttribute("2")]
public Type NpgsqlCidrType { get; }
    public Type NpgsqlRangeTType { get; }
    [NullableAttribute("2")]
public string GetIntervalReaderMethod { get; }
    [NullableAttribute("2")]
public string GetTimeStampReaderMethod { get; }
    [NullableAttribute("2")]
public string GetDateReaderMethod { get; }
    public string ProviderTypesNamespace { get; }
    public Action`2<DbParameter, NpgsqlDbType> SetDbType { get; }
    public Func`2<DbParameter, NpgsqlDbType> GetDbType { get; }
    public bool SupportsBigInteger { get; }
    public Func`3<DbConnection, string, NpgsqlBinaryImporter> BeginBinaryImport { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`4<DbConnection, string, CancellationToken, Task`1<NpgsqlBinaryImporter>> BeginBinaryImportAsync { get; }
    public MappingSchema MappingSchema { get; }
    private NpgsqlProviderAdapter(Type connectionType, Type dataReaderType, Type parameterType, Type commandType, Type transactionType, Type dbTypeType, MappingSchema mappingSchema, Type npgsqlDateType, Type npgsqlPointType, Type npgsqlLSegType, Type npgsqlBoxType, Type npgsqlCircleType, Type npgsqlPathType, Type npgsqlPolygonType, Type npgsqlLineType, Type npgsqlInetType, Type npgsqlCidrType, Type npgsqlTimeSpanType, Type npgsqlDateTimeType, Type npgsqlRangeTType, Type npgsqlIntervalType, bool supportsBigInteger, Expression npgsqlIntervalReader, Func`2<string, NpgsqlConnection> connectionCreator, Action`2<DbParameter, NpgsqlDbType> dbTypeSetter, Func`2<DbParameter, NpgsqlDbType> dbTypeGetter, Func`3<DbConnection, string, NpgsqlBinaryImporter> beginBinaryImport, Func`4<DbConnection, string, CancellationToken, Task`1<NpgsqlBinaryImporter>> beginBinaryImportAsync);
    private static NpgsqlProviderAdapter();
    [CompilerGeneratedAttribute]
public sealed virtual Type get_ConnectionType();
    [CompilerGeneratedAttribute]
public sealed virtual Type get_DataReaderType();
    [CompilerGeneratedAttribute]
public sealed virtual Type get_ParameterType();
    [CompilerGeneratedAttribute]
public sealed virtual Type get_CommandType();
    [CompilerGeneratedAttribute]
public sealed virtual Type get_TransactionType();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Type get_NpgsqlDateType();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Type get_NpgsqlTimeSpanType();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Type get_NpgsqlDateTimeType();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Type get_NpgsqlIntervalType();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Expression get_NpgsqlIntervalReader();
    [CompilerGeneratedAttribute]
public Type get_NpgsqlPointType();
    [CompilerGeneratedAttribute]
public Type get_NpgsqlLSegType();
    [CompilerGeneratedAttribute]
public Type get_NpgsqlBoxType();
    [CompilerGeneratedAttribute]
public Type get_NpgsqlCircleType();
    [CompilerGeneratedAttribute]
public Type get_NpgsqlPathType();
    [CompilerGeneratedAttribute]
public Type get_NpgsqlPolygonType();
    [CompilerGeneratedAttribute]
public Type get_NpgsqlLineType();
    [CompilerGeneratedAttribute]
public Type get_NpgsqlInetType();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Type get_NpgsqlCidrType();
    [CompilerGeneratedAttribute]
public Type get_NpgsqlRangeTType();
    [NullableContextAttribute("2")]
public string get_GetIntervalReaderMethod();
    [NullableContextAttribute("2")]
public string get_GetTimeStampReaderMethod();
    [NullableContextAttribute("2")]
public string get_GetDateReaderMethod();
    public string get_ProviderTypesNamespace();
    [CompilerGeneratedAttribute]
public Action`2<DbParameter, NpgsqlDbType> get_SetDbType();
    [CompilerGeneratedAttribute]
public Func`2<DbParameter, NpgsqlDbType> get_GetDbType();
    [CompilerGeneratedAttribute]
public bool get_SupportsBigInteger();
    public bool IsDbTypeSupported(NpgsqlDbType type);
    public NpgsqlDbType ApplyDbTypeFlags(NpgsqlDbType type, bool isArray, bool isRange, bool isMultiRange, bool convertAlways);
    public NpgsqlConnection CreateConnection(string connectionString);
    [CompilerGeneratedAttribute]
public Func`3<DbConnection, string, NpgsqlBinaryImporter> get_BeginBinaryImport();
    [CompilerGeneratedAttribute]
public Func`4<DbConnection, string, CancellationToken, Task`1<NpgsqlBinaryImporter>> get_BeginBinaryImportAsync();
    [CompilerGeneratedAttribute]
public MappingSchema get_MappingSchema();
    public static NpgsqlProviderAdapter GetInstance();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.DataProvider.PostgreSQL.PostgreSQLBulkCopy : BasicBulkCopy {
    private PostgreSQLDataProvider _provider;
    protected int MaxParameters { get; }
    protected int MaxSqlLength { get; }
    public PostgreSQLBulkCopy(PostgreSQLDataProvider dataProvider);
    protected virtual int get_MaxParameters();
    protected virtual int get_MaxSqlLength();
    protected virtual BulkCopyRowsCopied MultipleRowsCopy(ITable`1<T> table, DataOptions options, IEnumerable`1<T> source);
    protected virtual Task`1<BulkCopyRowsCopied> MultipleRowsCopyAsync(ITable`1<T> table, DataOptions options, IEnumerable`1<T> source, CancellationToken cancellationToken);
    protected virtual Task`1<BulkCopyRowsCopied> MultipleRowsCopyAsync(ITable`1<T> table, DataOptions options, IAsyncEnumerable`1<T> source, CancellationToken cancellationToken);
    protected virtual BulkCopyRowsCopied ProviderSpecificCopy(ITable`1<T> table, DataOptions options, IEnumerable`1<T> source);
    protected virtual Task`1<BulkCopyRowsCopied> ProviderSpecificCopyAsync(ITable`1<T> table, DataOptions options, IEnumerable`1<T> source, CancellationToken cancellationToken);
    protected virtual Task`1<BulkCopyRowsCopied> ProviderSpecificCopyAsync(ITable`1<T> table, DataOptions options, IAsyncEnumerable`1<T> source, CancellationToken cancellationToken);
    private BulkCopyRowsCopied ProviderSpecificCopyImpl(DataConnection dataConnection, ITable`1<T> table, DataOptions options, IEnumerable`1<T> source);
    private ValueTuple`3<Nullable`1[], String[], DbDataType[]> BuildTypes(NpgsqlProviderAdapter adapter, PostgreSQLSqlBuilder sqlBuilder, ColumnDescriptor[] columns);
    private BulkCopyRowsCopied ProviderSpecificCopySyncImpl(IDataContext originalContext, DataConnection dataConnection, BulkCopyOptions options, IEnumerable`1<T> source, DbConnection connection, string tableName, ColumnDescriptor[] columns, DbDataType[] columnTypes, Nullable`1[] npgsqlTypes, String[] dbTypes, string copyCommand, int batchSize, NpgsqlBinaryImporter writer);
    [AsyncStateMachineAttribute("LinqToDB.DataProvider.PostgreSQL.PostgreSQLBulkCopy/<ProviderSpecificCopyImplAsync>d__15`1")]
private Task`1<BulkCopyRowsCopied> ProviderSpecificCopyImplAsync(DataConnection dataConnection, ITable`1<T> table, DataOptions options, IEnumerable`1<T> source, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("LinqToDB.DataProvider.PostgreSQL.PostgreSQLBulkCopy/<ProviderSpecificCopyImplAsync>d__16`1")]
private Task`1<BulkCopyRowsCopied> ProviderSpecificCopyImplAsync(DataConnection dataConnection, ITable`1<T> table, DataOptions options, IAsyncEnumerable`1<T> source, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class LinqToDB.DataProvider.PostgreSQL.PostgreSQLDataProvider : DynamicDataProviderBase`1<NpgsqlProviderAdapter> {
    [CompilerGeneratedAttribute]
private PostgreSQLVersion <Version>k__BackingField;
    private IDictionary`2<string, NpgsqlDbType> _npgsqlTypeMap;
    private ISqlOptimizer _sqlOptimizer;
    public PostgreSQLVersion Version { get; }
    public bool HasMacAddr8 { get; }
    public TableOptions SupportedTableOptions { get; }
    protected PostgreSQLDataProvider(PostgreSQLVersion version);
    protected PostgreSQLDataProvider(string name, PostgreSQLVersion version);
    private void ConfigureTypes();
    [NullableContextAttribute("2")]
protected virtual string NormalizeTypeName(string typeName);
    [CompilerGeneratedAttribute]
public PostgreSQLVersion get_Version();
    public bool get_HasMacAddr8();
    private static string GetProviderName(PostgreSQLVersion version);
    public virtual TableOptions get_SupportedTableOptions();
    public virtual ISqlBuilder CreateSqlBuilder(MappingSchema mappingSchema, DataOptions dataOptions);
    public virtual ISqlOptimizer GetSqlOptimizer(DataOptions dataOptions);
    public virtual ISchemaProvider GetSchemaProvider();
    [NullableContextAttribute("2")]
internal object NormalizeTimeStamp(PostgreSQLOptions options, object value, DbDataType dataType, Nullable`1<NpgsqlDbType> npgsqlType);
    public virtual void SetParameter(DataConnection dataConnection, DbParameter parameter, string name, DbDataType dataType, object value);
    protected virtual void SetParameterType(DataConnection dataConnection, DbParameter parameter, DbDataType dataType);
    public virtual BulkCopyRowsCopied BulkCopy(DataOptions options, ITable`1<T> table, IEnumerable`1<T> source);
    public virtual Task`1<BulkCopyRowsCopied> BulkCopyAsync(DataOptions options, ITable`1<T> table, IEnumerable`1<T> source, CancellationToken cancellationToken);
    public virtual Task`1<BulkCopyRowsCopied> BulkCopyAsync(DataOptions options, ITable`1<T> table, IAsyncEnumerable`1<T> source, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
internal Nullable`1<NpgsqlDbType> GetNativeType(string dbType, bool convertAlways);
    private static MappingSchema GetMappingSchema(PostgreSQLVersion version);
    [CompilerGeneratedAttribute]
private bool <ConfigureTypes>g__mapType|2_0(string dbType, NpgsqlDbType type);
}
internal class LinqToDB.DataProvider.PostgreSQL.PostgreSQLDataProvider15 : PostgreSQLDataProvider {
}
internal class LinqToDB.DataProvider.PostgreSQL.PostgreSQLDataProvider92 : PostgreSQLDataProvider {
}
internal class LinqToDB.DataProvider.PostgreSQL.PostgreSQLDataProvider93 : PostgreSQLDataProvider {
}
internal class LinqToDB.DataProvider.PostgreSQL.PostgreSQLDataProvider95 : PostgreSQLDataProvider {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class LinqToDB.DataProvider.PostgreSQL.PostgreSQLExtensions : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Func`4<IDataContext, int, int, IQueryable`1<int>> _generateSeriesIntFunc;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Func`5<IDataContext, int, int, int, IQueryable`1<int>> _generateSeriesIntStepFunc;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Func`5<IDataContext, DateTime, DateTime, TimeSpan, IQueryable`1<DateTime>> _generateSeriesDateFunc;
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IPostgreSQLExtensions PostgreSQL(ISqlExtension ext);
    [ExtensionAttribute]
[ExtensionAttribute("ARRAY_AGG({expr})")]
public static IAnalyticFunctionWithoutWindow`1<T[]> ArrayAggregate(ISqlExtension ext, T expr);
    [ExtensionAttribute]
[ExtensionAttribute("ARRAY_AGG({modifier?}{_}{expr})")]
public static IAnalyticFunctionWithoutWindow`1<T[]> ArrayAggregate(ISqlExtension ext, T expr, AggregateModifier modifier);
    [ExtensionAttribute]
[ExtensionAttribute("ARRAY_AGG({modifier?}{_}{expr}{_}{order_by_clause?})")]
public static IAggregateFunctionNotOrdered`2<TEntity, TV[]> ArrayAggregate(IEnumerable`1<TEntity> source, Func`2<TEntity, TV> expr, AggregateModifier modifier);
    [ExtensionAttribute]
[ExtensionAttribute("ARRAY_AGG({expr}{_}{order_by_clause?})")]
public static IAggregateFunctionNotOrdered`2<TEntity, TV[]> ArrayAggregate(IQueryable`1<TEntity> source, Expression`1<Func`2<TEntity, TV>> expr);
    [ExtensionAttribute]
[ExtensionAttribute("ARRAY_AGG({modifier?}{_}{expr}{_}{order_by_clause?})")]
public static IAggregateFunctionNotOrdered`2<TEntity, TV[]> ArrayAggregate(IQueryable`1<TEntity> source, Expression`1<Func`2<TEntity, TV>> expr, AggregateModifier modifier);
    [ExtensionAttribute]
[ExpressionMethodAttribute("UnnestImpl")]
public static IQueryable`1<T> Unnest(IDataContext dc, T[] array);
    private static Expression`1<Func`3<IDataContext, T[], IQueryable`1<T>>> UnnestImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("UnnestWithOrdinalityImpl")]
public static IQueryable`1<Ordinality`1<T>> UnnestWithOrdinality(IDataContext dc, T[] array);
    private static Expression`1<Func`3<IDataContext, T[], IQueryable`1<Ordinality`1<T>>>> UnnestWithOrdinalityImpl();
    [ExtensionAttribute]
[ExtensionAttribute("{arrays, ' || '}")]
public static T[] ConcatArrays(IPostgreSQLExtensions ext, T[][] arrays);
    [ExtensionAttribute]
[ExtensionAttribute("{array1} || {array2}")]
public static T[] ConcatArrays(IPostgreSQLExtensions ext, T[] array1, T[][] array2);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
[ExtensionAttribute("{array1} || {array2}")]
public static T[] ConcatArrays(IPostgreSQLExtensions ext, T[][] array1, T[] array2);
    [ExtensionAttribute]
[ExtensionAttribute("{array1} < {array2}")]
public static bool LessThan(IPostgreSQLExtensions ext, T[] array1, T[] array2);
    [ExtensionAttribute]
[ExtensionAttribute("{array1} <= {array2}")]
public static bool LessThanOrEqual(IPostgreSQLExtensions ext, T[] array1, T[] array2);
    [ExtensionAttribute]
[ExtensionAttribute("{array1} > {array2}")]
public static bool GreaterThan(IPostgreSQLExtensions ext, T[] array1, T[] array2);
    [ExtensionAttribute]
[ExtensionAttribute("{array1} > {array2}")]
public static bool GreaterThanOrEqual(IPostgreSQLExtensions ext, T[] array1, T[] array2);
    [ExtensionAttribute]
[ExtensionAttribute("{array1} @> {array2}")]
public static bool Contains(IPostgreSQLExtensions ext, T[] array1, T[] array2);
    [ExtensionAttribute]
[ExtensionAttribute("{array1} <@ {array2}")]
public static bool ContainedBy(IPostgreSQLExtensions ext, T[] array1, T[] array2);
    [ExtensionAttribute]
[ExtensionAttribute("{array1} && {array2}")]
public static bool Overlaps(IPostgreSQLExtensions ext, T[] array1, T[] array2);
    [ExtensionAttribute]
[ExtensionAttribute("ARRAY_APPEND({array}, {element})")]
public static T[] ArrayAppend(IPostgreSQLExtensions ext, T[] array, T element);
    [ExtensionAttribute]
[ExtensionAttribute("ARRAY_CAT({array1}, {array2})")]
public static T[] ArrayCat(IPostgreSQLExtensions ext, T[] array1, T[] array2);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[ExtensionAttribute("ARRAY_NDIMS({array})")]
public static int ArrayNDims(IPostgreSQLExtensions ext, T[] array);
    [ExtensionAttribute]
[ExtensionAttribute("ARRAY_DIMS({array})")]
public static string ArrayDims(IPostgreSQLExtensions ext, T[] array);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[ExtensionAttribute("ARRAY_LENGTH({array}, {dimension})")]
public static int ArrayLength(IPostgreSQLExtensions ext, T[] array, int dimension);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[ExtensionAttribute("ARRAY_LOWER({array}, {dimension})")]
public static int ArrayLower(IPostgreSQLExtensions ext, T[] array, int dimension);
    [ExtensionAttribute]
[ExtensionAttribute("ARRAY_POSITION({array}, {element})")]
public static int ArrayPosition(IPostgreSQLExtensions ext, T[] array, T element);
    [ExtensionAttribute]
[ExtensionAttribute("ARRAY_POSITION({array}, {element}, {start})")]
public static int ArrayPosition(IPostgreSQLExtensions ext, T[] array, T element, int start);
    [ExtensionAttribute]
[ExtensionAttribute("ARRAY_POSITIONS({array}, {element})")]
public static Int32[] ArrayPositions(IPostgreSQLExtensions ext, T[] array, T element);
    [ExtensionAttribute]
[ExtensionAttribute("ARRAY_PREPEND({element}, {array})")]
public static T[] ArrayPrepend(IPostgreSQLExtensions ext, T element, T[] array);
    [ExtensionAttribute]
[ExtensionAttribute("ARRAY_REMOVE({array}, {element})")]
public static T[] ArrayRemove(IPostgreSQLExtensions ext, T[] array, T element);
    [ExtensionAttribute]
[ExtensionAttribute("ARRAY_REPLACE({array}, {oldElement}, {newElement})")]
public static T[] ArrayReplace(IPostgreSQLExtensions ext, T[] array, T oldElement, T newElement);
    [ExtensionAttribute]
[ExtensionAttribute("ARRAY_UPPER({array}, {dimension})")]
public static T[] ArrayUpper(IPostgreSQLExtensions ext, T[] array, int dimension);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[ExtensionAttribute("CARDINALITY({array})")]
public static int Cardinality(IPostgreSQLExtensions ext, T[] array);
    [ExtensionAttribute]
[ExtensionAttribute("ARRAY_TO_STRING({array}, {delimiter})")]
public static string ArrayToString(IPostgreSQLExtensions ext, T[] array, string delimiter);
    [ExtensionAttribute]
[ExtensionAttribute("STRING_TO_ARRAY({str}, {delimiter})")]
public static String[] StringToArray(IPostgreSQLExtensions ext, string str, string delimiter);
    [ExtensionAttribute]
[ExtensionAttribute("STRING_TO_ARRAY({str}, {delimiter}, {nullString})")]
public static String[] StringToArray(IPostgreSQLExtensions ext, string str, string delimiter, string nullString);
    [ExtensionAttribute]
[ExtensionAttribute("ARRAY_TO_STRING({array}, {delimiter}, {nullString})")]
public static string ArrayToString(IPostgreSQLExtensions ext, T[] array, string delimiter, string nullString);
    [ExtensionAttribute]
[ExtensionAttribute("{value} = ANY({array})")]
public static bool ValueIsEqualToAny(IPostgreSQLExtensions ext, T value, T[] array);
    [ExtensionAttribute]
[ExtensionAttribute("{value} < ANY({array})")]
public static bool ValueIsLessThanAny(IPostgreSQLExtensions ext, T value, T[] array);
    [ExtensionAttribute]
[ExtensionAttribute("{value} <= ANY({array})")]
public static bool ValueIsLessThanOrEqualToAny(IPostgreSQLExtensions ext, T value, T[] array);
    [ExtensionAttribute]
[ExtensionAttribute("{value} > ANY({array})")]
public static bool ValueIsGreaterThanAny(IPostgreSQLExtensions ext, T value, T[] array);
    [ExtensionAttribute]
[ExtensionAttribute("{value} >= ANY({array})")]
public static bool ValueIsGreaterThanOrEqualToAny(IPostgreSQLExtensions ext, T value, T[] array);
    [ExtensionAttribute]
[ExtensionAttribute("{value} <> ANY({array})")]
public static bool ValueIsNotEqualToAny(IPostgreSQLExtensions ext, T value, T[] array);
    [ExtensionAttribute]
[ExpressionMethodAttribute("GenerateSeriesIntImpl")]
public static IQueryable`1<int> GenerateSeries(IDataContext dc, int start, int stop);
    private static Expression`1<Func`4<IDataContext, int, int, IQueryable`1<int>>> GenerateSeriesIntImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("GenerateSeriesIntStepImpl")]
public static IQueryable`1<int> GenerateSeries(IDataContext dc, int start, int stop, int step);
    private static Expression`1<Func`5<IDataContext, int, int, int, IQueryable`1<int>>> GenerateSeriesIntStepImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("GenerateSeriesDateImpl")]
public static IQueryable`1<DateTime> GenerateSeries(IDataContext dc, DateTime start, DateTime stop, TimeSpan step);
    private static Expression`1<Func`5<IDataContext, DateTime, DateTime, TimeSpan, IQueryable`1<DateTime>>> GenerateSeriesDateImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("GenerateSubscriptsImpl")]
public static IQueryable`1<int> GenerateSubscripts(IDataContext dc, T[] array, int dimension);
    private static Expression`1<Func`4<IDataContext, T[], int, IQueryable`1<int>>> GenerateSubscriptsImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("GenerateSubscriptsReverseImpl")]
public static IQueryable`1<int> GenerateSubscripts(IDataContext dc, T[] array, int dimension, bool reverse);
    private static Expression`1<Func`5<IDataContext, T[], int, bool, IQueryable`1<int>>> GenerateSubscriptsReverseImpl();
    [ExtensionAttribute]
[ExtensionAttribute("VERSION()")]
public static string Version(IPostgreSQLExtensions ext, IDataContext dc);
    [ExtensionAttribute]
[ExtensionAttribute("CURRENT_CATALOG")]
public static string CurrentCatalog(IPostgreSQLExtensions ext, IDataContext dc);
    [ExtensionAttribute]
[ExtensionAttribute("CURRENT_DATABASE()")]
public static string CurrentDatabase(IPostgreSQLExtensions ext, IDataContext dc);
    [ExtensionAttribute]
[ExtensionAttribute("CURRENT_ROLE")]
public static string CurrentRole(IPostgreSQLExtensions ext, IDataContext dc);
    [ExtensionAttribute]
[ExtensionAttribute("CURRENT_SCHEMA")]
public static string CurrentSchema(IPostgreSQLExtensions ext, IDataContext dc);
    [ExtensionAttribute]
[ExtensionAttribute("CURRENT_SCHEMAS()")]
public static String[] CurrentSchemas(IPostgreSQLExtensions ext, IDataContext dc);
    [ExtensionAttribute]
[ExtensionAttribute("CURRENT_SCHEMAS({includeImplicit})")]
public static String[] CurrentSchemas(IPostgreSQLExtensions ext, IDataContext dc, bool includeImplicit);
    [ExtensionAttribute]
[ExtensionAttribute("CURRENT_USER")]
public static string CurrentUser(IPostgreSQLExtensions ext, IDataContext dc);
    [ExtensionAttribute]
[ExtensionAttribute("SESSION_USER")]
public static string SessionUser(IPostgreSQLExtensions ext, IDataContext dc);
}
[UsedImplicitlyAttribute]
internal class LinqToDB.DataProvider.PostgreSQL.PostgreSQLFactory : object {
    [NullableContextAttribute("1")]
private sealed virtual override IDataProvider LinqToDB.DataProvider.IDataProviderFactory.GetDataProvider(IEnumerable`1<NamedValue> attributes);
}
[ExtensionAttribute]
public static class LinqToDB.DataProvider.PostgreSQL.PostgreSQLHints : object {
    [NullableAttribute("1")]
public static string ForUpdate;
    [NullableAttribute("1")]
public static string ForNoKeyUpdate;
    [NullableAttribute("1")]
public static string ForShare;
    [NullableAttribute("1")]
public static string ForKeyShare;
    [NullableAttribute("1")]
public static string NoWait;
    [NullableAttribute("1")]
public static string SkipLocked;
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("PostgreSQL", "5", "LinqToDB.DataProvider.PostgreSQL.PostgreSQLHints/SubQueryTableHintExtensionBuilder")]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
public static IPostgreSQLSpecificQueryable`1<TSource> SubQueryTableHint(IPostgreSQLSpecificQueryable`1<TSource> source, string hint, SqlID[] tableIDs);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("PostgreSQL", "5", "LinqToDB.DataProvider.PostgreSQL.PostgreSQLHints/SubQueryTableHintExtensionBuilder")]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
public static IPostgreSQLSpecificQueryable`1<TSource> SubQueryTableHint(IPostgreSQLSpecificQueryable`1<TSource> source, string hint, string hint2, SqlID[] tableIDs);
    [ExtensionAttribute]
[ExpressionMethodAttribute("ForUpdateHintImpl")]
public static IPostgreSQLSpecificQueryable`1<TSource> ForUpdateHint(IPostgreSQLSpecificQueryable`1<TSource> query, SqlID[] tableIDs);
    private static Expression`1<Func`3<IPostgreSQLSpecificQueryable`1<TSource>, SqlID[], IPostgreSQLSpecificQueryable`1<TSource>>> ForUpdateHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("ForUpdateNoWaitHintImpl")]
public static IPostgreSQLSpecificQueryable`1<TSource> ForUpdateNoWaitHint(IPostgreSQLSpecificQueryable`1<TSource> query, SqlID[] tableIDs);
    private static Expression`1<Func`3<IPostgreSQLSpecificQueryable`1<TSource>, SqlID[], IPostgreSQLSpecificQueryable`1<TSource>>> ForUpdateNoWaitHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("ForUpdateSkipLockedHintImpl")]
public static IPostgreSQLSpecificQueryable`1<TSource> ForUpdateSkipLockedHint(IPostgreSQLSpecificQueryable`1<TSource> query, SqlID[] tableIDs);
    private static Expression`1<Func`3<IPostgreSQLSpecificQueryable`1<TSource>, SqlID[], IPostgreSQLSpecificQueryable`1<TSource>>> ForUpdateSkipLockedHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("ForNoKeyUpdateHintImpl")]
public static IPostgreSQLSpecificQueryable`1<TSource> ForNoKeyUpdateHint(IPostgreSQLSpecificQueryable`1<TSource> query, SqlID[] tableIDs);
    private static Expression`1<Func`3<IPostgreSQLSpecificQueryable`1<TSource>, SqlID[], IPostgreSQLSpecificQueryable`1<TSource>>> ForNoKeyUpdateHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("ForNoKeyUpdateNoWaitHintImpl")]
public static IPostgreSQLSpecificQueryable`1<TSource> ForNoKeyUpdateNoWaitHint(IPostgreSQLSpecificQueryable`1<TSource> query, SqlID[] tableIDs);
    private static Expression`1<Func`3<IPostgreSQLSpecificQueryable`1<TSource>, SqlID[], IPostgreSQLSpecificQueryable`1<TSource>>> ForNoKeyUpdateNoWaitHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("ForNoKeyUpdateSkipLockedHintImpl")]
public static IPostgreSQLSpecificQueryable`1<TSource> ForNoKeyUpdateSkipLockedHint(IPostgreSQLSpecificQueryable`1<TSource> query, SqlID[] tableIDs);
    private static Expression`1<Func`3<IPostgreSQLSpecificQueryable`1<TSource>, SqlID[], IPostgreSQLSpecificQueryable`1<TSource>>> ForNoKeyUpdateSkipLockedHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("ForShareHintImpl")]
public static IPostgreSQLSpecificQueryable`1<TSource> ForShareHint(IPostgreSQLSpecificQueryable`1<TSource> query, SqlID[] tableIDs);
    private static Expression`1<Func`3<IPostgreSQLSpecificQueryable`1<TSource>, SqlID[], IPostgreSQLSpecificQueryable`1<TSource>>> ForShareHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("ForShareNoWaitHintImpl")]
public static IPostgreSQLSpecificQueryable`1<TSource> ForShareNoWaitHint(IPostgreSQLSpecificQueryable`1<TSource> query, SqlID[] tableIDs);
    private static Expression`1<Func`3<IPostgreSQLSpecificQueryable`1<TSource>, SqlID[], IPostgreSQLSpecificQueryable`1<TSource>>> ForShareNoWaitHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("ForShareSkipLockedHintImpl")]
public static IPostgreSQLSpecificQueryable`1<TSource> ForShareSkipLockedHint(IPostgreSQLSpecificQueryable`1<TSource> query, SqlID[] tableIDs);
    private static Expression`1<Func`3<IPostgreSQLSpecificQueryable`1<TSource>, SqlID[], IPostgreSQLSpecificQueryable`1<TSource>>> ForShareSkipLockedHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("ForKeyShareHintImpl")]
public static IPostgreSQLSpecificQueryable`1<TSource> ForKeyShareHint(IPostgreSQLSpecificQueryable`1<TSource> query, SqlID[] tableIDs);
    private static Expression`1<Func`3<IPostgreSQLSpecificQueryable`1<TSource>, SqlID[], IPostgreSQLSpecificQueryable`1<TSource>>> ForKeyShareHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("ForKeyShareNoWaitHintImpl")]
public static IPostgreSQLSpecificQueryable`1<TSource> ForKeyShareNoWaitHint(IPostgreSQLSpecificQueryable`1<TSource> query, SqlID[] tableIDs);
    private static Expression`1<Func`3<IPostgreSQLSpecificQueryable`1<TSource>, SqlID[], IPostgreSQLSpecificQueryable`1<TSource>>> ForKeyShareNoWaitHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("ForKeyShareSkipLockedHintImpl")]
public static IPostgreSQLSpecificQueryable`1<TSource> ForKeyShareSkipLockedHint(IPostgreSQLSpecificQueryable`1<TSource> query, SqlID[] tableIDs);
    private static Expression`1<Func`3<IPostgreSQLSpecificQueryable`1<TSource>, SqlID[], IPostgreSQLSpecificQueryable`1<TSource>>> ForKeyShareSkipLockedHintImpl();
}
public enum LinqToDB.DataProvider.PostgreSQL.PostgreSQLIdentifierQuoteMode : Enum {
    public int value__;
    public static PostgreSQLIdentifierQuoteMode None;
    public static PostgreSQLIdentifierQuoteMode Quote;
    public static PostgreSQLIdentifierQuoteMode Needed;
    public static PostgreSQLIdentifierQuoteMode Auto;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.DataProvider.PostgreSQL.PostgreSQLMappingSchema : LockedMappingSchema {
    private static string DATE_FORMAT;
    private static string TIMESTAMP0_FORMAT;
    private static string TIMESTAMP3_FORMAT;
    private static Action`2<StringBuilder, int> AppendConversionAction;
    [CompilerGeneratedAttribute]
private static MappingSchema <Instance>k__BackingField;
    internal static MappingSchema Instance { get; }
    private static PostgreSQLMappingSchema();
    private static void BuildDateTime(StringBuilder stringBuilder, SqlDataType dt, DateTime value);
    private static void ConvertBinaryToSql(StringBuilder stringBuilder, Byte[] value);
    private static void AppendConversion(StringBuilder stringBuilder, int value);
    private static void ConvertStringToSql(StringBuilder stringBuilder, string value);
    private static void ConvertCharToSql(StringBuilder stringBuilder, char value);
    [CompilerGeneratedAttribute]
internal static MappingSchema get_Instance();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class LinqToDB.DataProvider.PostgreSQL.PostgreSQLOptions : DataProviderOptions`1<PostgreSQLOptions> {
    [CompilerGeneratedAttribute]
private bool <NormalizeTimestampData>k__BackingField;
    [CompilerGeneratedAttribute]
private PostgreSQLIdentifierQuoteMode <IdentifierQuoteMode>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public bool NormalizeTimestampData { get; public set; }
    public PostgreSQLIdentifierQuoteMode IdentifierQuoteMode { get; public set; }
    public PostgreSQLOptions(BulkCopyType BulkCopyType, bool NormalizeTimestampData, PostgreSQLIdentifierQuoteMode IdentifierQuoteMode);
    private PostgreSQLOptions(PostgreSQLOptions original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public bool get_NormalizeTimestampData();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_NormalizeTimestampData(bool value);
    [CompilerGeneratedAttribute]
public PostgreSQLIdentifierQuoteMode get_IdentifierQuoteMode();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IdentifierQuoteMode(PostgreSQLIdentifierQuoteMode value);
    protected virtual IdentifierBuilder CreateID(IdentifierBuilder builder);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(PostgreSQLOptions other);
    public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(PostgreSQLOptions left, PostgreSQLOptions right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(PostgreSQLOptions left, PostgreSQLOptions right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(DataProviderOptions`1<PostgreSQLOptions> other);
    [CompilerGeneratedAttribute]
public virtual DataProviderOptions`1<PostgreSQLOptions> <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(BulkCopyType& BulkCopyType, Boolean& NormalizeTimestampData, PostgreSQLIdentifierQuoteMode& IdentifierQuoteMode);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class LinqToDB.DataProvider.PostgreSQL.PostgreSQLProviderDetector : ProviderDetectorBase`3<Provider, PostgreSQLVersion, NpgsqlConnection> {
    private static Lazy`1<IDataProvider> _postgreSQLDataProvider92;
    private static Lazy`1<IDataProvider> _postgreSQLDataProvider93;
    private static Lazy`1<IDataProvider> _postgreSQLDataProvider95;
    private static Lazy`1<IDataProvider> _postgreSQLDataProvider15;
    private static PostgreSQLProviderDetector();
    public virtual IDataProvider DetectProvider(ConnectionOptions options);
    public virtual IDataProvider GetDataProvider(ConnectionOptions options, Provider provider, PostgreSQLVersion version);
    public virtual Nullable`1<PostgreSQLVersion> DetectServerVersion(NpgsqlConnection connection);
    protected virtual NpgsqlConnection CreateConnection(Provider provider, string connectionString);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.DataProvider.PostgreSQL.PostgreSQLSchemaProvider : SchemaProviderBase {
    private static IReadOnlyList`1<string> _schemaSchemas;
    private PostgreSQLDataProvider _provider;
    private static Regex _matchArray;
    private static Regex _matchType;
    public PostgreSQLSchemaProvider(PostgreSQLDataProvider provider);
    private static PostgreSQLSchemaProvider();
    protected virtual List`1<DataTypeInfo> GetDataTypes(DataConnection dataConnection);
    protected virtual List`1<TableInfo> GetTables(DataConnection dataConnection, GetSchemaOptions options);
    protected virtual IReadOnlyCollection`1<PrimaryKeyInfo> GetPrimaryKeys(DataConnection dataConnection, IEnumerable`1<TableSchema> tables, GetSchemaOptions options);
    private static string ToDatabaseLiteral(DataConnection dataConnection, string str);
    private string GenerateSchemaFilter(DataConnection dataConnection, string schemaColumnName);
    protected virtual List`1<ColumnInfo> GetColumns(DataConnection dataConnection, GetSchemaOptions options);
    protected virtual IReadOnlyCollection`1<ForeignKeyInfo> GetForeignKeys(DataConnection dataConnection, IEnumerable`1<TableSchema> tables, GetSchemaOptions options);
    [NullableContextAttribute("2")]
protected virtual DataType GetDataType(string dataType, string columnType, Nullable`1<int> length, Nullable`1<int> precision, Nullable`1<int> scale);
    protected virtual string GetProviderSpecificTypeNamespace();
    [NullableContextAttribute("2")]
protected virtual string GetProviderSpecificType(string dataType);
    [NullableContextAttribute("2")]
protected virtual Type GetSystemType(string dataType, string columnType, DataTypeInfo dataTypeInfo, Nullable`1<int> length, Nullable`1<int> precision, Nullable`1<int> scale, GetSchemaOptions options);
    [NullableContextAttribute("2")]
protected virtual DataTypeInfo GetDataType(string typeName, Nullable`1<DataType> dataType, GetSchemaOptions options);
    private static string SimplifyDataType(string dataType);
    protected virtual List`1<ProcedureInfo> GetProcedures(DataConnection dataConnection, GetSchemaOptions options);
    protected virtual List`1<ProcedureParameterInfo> GetProcedureParameters(DataConnection dataConnection, IEnumerable`1<ProcedureInfo> procedures, GetSchemaOptions options);
    protected virtual string BuildTableFunctionLoadTableSchemaCommand(ProcedureSchema procedure, string commandText);
    protected virtual List`1<ColumnSchema> GetProcedureResultColumns(DataTable resultTable, GetSchemaOptions options);
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class LinqToDB.DataProvider.PostgreSQL.PostgreSQLSpecificQueryable`1 : DatabaseSpecificQueryable`1<TSource> {
    [NullableContextAttribute("1")]
public PostgreSQLSpecificQueryable`1(IQueryable`1<TSource> queryable);
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class LinqToDB.DataProvider.PostgreSQL.PostgreSQLSpecificTable`1 : DatabaseSpecificTable`1<TSource> {
    [NullableContextAttribute("1")]
public PostgreSQLSpecificTable`1(ITable`1<TSource> table);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.DataProvider.PostgreSQL.PostgreSQLSql15Builder : PostgreSQLSqlBuilder {
    public PostgreSQLSql15Builder(IDataProvider provider, MappingSchema mappingSchema, DataOptions dataOptions, ISqlOptimizer sqlOptimizer, SqlProviderFlags sqlProviderFlags);
    private PostgreSQLSql15Builder(BasicSqlBuilder parentBuilder);
    protected virtual ISqlBuilder CreateSqlBuilder();
    protected virtual void BuildInsertOrUpdateQuery(SqlInsertOrUpdateStatement insertOrUpdate);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class LinqToDB.DataProvider.PostgreSQL.PostgreSQLSqlBuilder : BasicSqlBuilder`1<PostgreSQLOptions> {
    protected bool IsRecursiveCteKeywordRequired { get; }
    protected bool SupportsNullInColumn { get; }
    [ObsoleteAttribute("Use PostgreSQLOptions.Default.IdentifierQuoteMode instead.")]
public static PostgreSQLIdentifierQuoteMode IdentifierQuoteMode { get; public set; }
    public PostgreSQLSqlBuilder(IDataProvider provider, MappingSchema mappingSchema, DataOptions dataOptions, ISqlOptimizer sqlOptimizer, SqlProviderFlags sqlProviderFlags);
    protected PostgreSQLSqlBuilder(BasicSqlBuilder parentBuilder);
    protected virtual ISqlBuilder CreateSqlBuilder();
    protected virtual bool get_IsRecursiveCteKeywordRequired();
    protected virtual bool get_SupportsNullInColumn();
    protected virtual void BuildGetIdentity(SqlInsertClause insertClause);
    protected virtual string LimitFormat(SelectQuery selectQuery);
    protected virtual string OffsetFormat(SelectQuery selectQuery);
    protected virtual void BuildDataTypeFromDataType(SqlDataType type, bool forCreateTable, bool canBeNull);
    protected sealed virtual bool IsReserved(string word);
    public static PostgreSQLIdentifierQuoteMode get_IdentifierQuoteMode();
    public static void set_IdentifierQuoteMode(PostgreSQLIdentifierQuoteMode value);
    public virtual StringBuilder Convert(StringBuilder sb, string value, ConvertType convertType);
    protected virtual void BuildInsertOrUpdateQuery(SqlInsertOrUpdateStatement insertOrUpdate);
    public virtual ISqlExpression GetIdentityExpression(SqlTable table);
    protected virtual void BuildCreateTableFieldType(SqlField field);
    protected virtual bool BuildJoinType(SqlJoinedTable join, SqlSearchCondition condition);
    public virtual StringBuilder BuildObjectName(StringBuilder sb, SqlObjectName name, ConvertType objectType, bool escape, TableOptions tableOptions, bool withoutSuffix);
    protected virtual string GetProviderTypeName(IDataContext dataContext, DbParameter parameter);
    protected virtual void BuildTruncateTableStatement(SqlTruncateTableStatement truncateTable);
    protected virtual void BuildDropTableStatement(SqlDropTableStatement dropTable);
    protected virtual void BuildCreateTableCommand(SqlTable table);
    protected virtual void BuildEndCreateTableStatement(SqlCreateTableStatement createTable);
    public virtual string GetReserveSequenceValuesSql(int count, string sequenceName);
    protected virtual void BuildSubQueryExtensions(SqlStatement statement);
    protected virtual void BuildQueryExtensions(SqlStatement statement);
    protected virtual void BuildSql();
    protected virtual bool IsSqlValuesTableValueTypeRequired(SqlValuesTable source, IReadOnlyList`1<ISqlExpression[]> rows, int row, int column);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.DataProvider.PostgreSQL.PostgreSQLSqlOptimizer : BasicSqlOptimizer {
    public bool CanCompareSearchConditions { get; }
    public PostgreSQLSqlOptimizer(SqlProviderFlags sqlProviderFlags);
    public virtual bool get_CanCompareSearchConditions();
    public virtual SqlStatement Finalize(MappingSchema mappingSchema, SqlStatement statement, DataOptions dataOptions);
    public virtual SqlStatement TransformStatement(SqlStatement statement, DataOptions dataOptions);
    public virtual ISqlPredicate ConvertSearchStringPredicate(SearchString predicate, ConvertVisitor`1<RunOptimizationContext> visitor);
    public virtual ISqlExpression ConvertExpressionImpl(ISqlExpression expression, ConvertVisitor`1<RunOptimizationContext> visitor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[PublicAPIAttribute]
public static class LinqToDB.DataProvider.PostgreSQL.PostgreSQLTools : object {
    internal static PostgreSQLProviderDetector ProviderDetector;
    public static bool AutoDetectProvider { get; public set; }
    [ObsoleteAttribute("Use PostgreSQLOptions.Default.NormalizeTimestampData instead.")]
public static bool NormalizeTimestampData { get; public set; }
    [ObsoleteAttribute("Use PostgreSQLOptions.Default.BulkCopyType instead.")]
public static BulkCopyType DefaultBulkCopyType { get; public set; }
    private static PostgreSQLTools();
    [ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
public static IPostgreSQLSpecificQueryable`1<TSource> AsPostgreSQL(IQueryable`1<TSource> source);
    public static bool get_AutoDetectProvider();
    public static void set_AutoDetectProvider(bool value);
    public static bool get_NormalizeTimestampData();
    public static void set_NormalizeTimestampData(bool value);
    public static IDataProvider GetDataProvider(PostgreSQLVersion version, string connectionString);
    public static void ResolvePostgreSQL(string path);
    public static void ResolvePostgreSQL(Assembly assembly);
    public static DataConnection CreateDataConnection(string connectionString, PostgreSQLVersion version);
    public static DataConnection CreateDataConnection(DbConnection connection, PostgreSQLVersion version);
    public static DataConnection CreateDataConnection(DbTransaction transaction, PostgreSQLVersion version);
    public static BulkCopyType get_DefaultBulkCopyType();
    public static void set_DefaultBulkCopyType(BulkCopyType value);
}
public enum LinqToDB.DataProvider.PostgreSQL.PostgreSQLVersion : Enum {
    public int value__;
    public static PostgreSQLVersion AutoDetect;
    public static PostgreSQLVersion v92;
    public static PostgreSQLVersion v93;
    public static PostgreSQLVersion v95;
    public static PostgreSQLVersion v15;
}
internal abstract class LinqToDB.DataProvider.ProviderDetectorBase`3 : object {
    [CompilerGeneratedAttribute]
private TVersion <AutoDetectVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private TVersion <DefaultVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoDetectProvider>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static MemoryCache`2<string, Nullable`1<TVersion>> _providerCache;
    public TVersion AutoDetectVersion { get; public set; }
    public TVersion DefaultVersion { get; public set; }
    public bool AutoDetectProvider { get; public set; }
    protected ProviderDetectorBase`3(TVersion autoDetectVersion, TVersion defaultVersion);
    private static ProviderDetectorBase`3();
    [CompilerGeneratedAttribute]
public TVersion get_AutoDetectVersion();
    [CompilerGeneratedAttribute]
public void set_AutoDetectVersion(TVersion value);
    [CompilerGeneratedAttribute]
public TVersion get_DefaultVersion();
    [CompilerGeneratedAttribute]
public void set_DefaultVersion(TVersion value);
    [CompilerGeneratedAttribute]
public bool get_AutoDetectProvider();
    [CompilerGeneratedAttribute]
public void set_AutoDetectProvider(bool value);
    public static void ClearCache();
    public bool TryGetCachedServerVersion(string connectionString, Nullable`1& version);
    public Nullable`1<TVersion> DetectServerVersion(ConnectionOptions options, TProvider provider);
    public DataOptions CreateOptions(DataOptions options, TVersion dialect, TProvider provider);
    [NullableContextAttribute("1")]
public abstract virtual IDataProvider DetectProvider(ConnectionOptions options);
    public abstract virtual IDataProvider GetDataProvider(ConnectionOptions options, TProvider provider, TVersion version);
    public abstract virtual Nullable`1<TVersion> DetectServerVersion(TConnection connection);
    [NullableContextAttribute("1")]
protected abstract virtual TConnection CreateConnection(TProvider provider, string connectionString);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class LinqToDB.DataProvider.ReaderInfo : ValueType {
    private int _hashCode;
    private Type _toType;
    private Type _fieldType;
    private Type _providerFieldType;
    private string _dataTypeName;
    private Type _dataReaderType;
    public Type ToType { get; public set; }
    public Type FieldType { get; public set; }
    public Type ProviderFieldType { get; public set; }
    public string DataTypeName { get; public set; }
    public Type DataReaderType { get; public set; }
    [IsReadOnlyAttribute]
public Type get_ToType();
    public void set_ToType(Type value);
    [IsReadOnlyAttribute]
public Type get_FieldType();
    public void set_FieldType(Type value);
    [IsReadOnlyAttribute]
public Type get_ProviderFieldType();
    public void set_ProviderFieldType(Type value);
    [IsReadOnlyAttribute]
public string get_DataTypeName();
    public void set_DataTypeName(string value);
    [IsReadOnlyAttribute]
public Type get_DataReaderType();
    public void set_DataReaderType(Type value);
    private void CalcHashCode();
    public virtual bool Equals(object obj);
    [IsReadOnlyAttribute]
public virtual int GetHashCode();
    public sealed virtual bool Equals(ReaderInfo other);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.DataProvider.SapHana.CalculationViewInputParametersExpressionAttribute : TableExpressionAttribute {
    private static string ValueToString(object value);
    public virtual void SetTable(DataOptions options, TContext context, ISqlBuilder sqlBuilder, MappingSchema mappingSchema, SqlTable table, MethodCallExpression methodCall, Func`4<TContext, Expression, ColumnDescriptor, ISqlExpression> converter);
}
public class LinqToDB.DataProvider.SapHana.GetHanaSchemaOptions : GetSchemaOptions {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<ProcedureSchema, DataParameter[]> GetStoredProcedureParameters;
    public bool ThrowExceptionIfCalculationViewsNotAuthorized;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.DataProvider.SapHana.SapHanaBulkCopy : BasicBulkCopy {
    private SapHanaDataProvider _provider;
    public SapHanaBulkCopy(SapHanaDataProvider provider);
    protected virtual BulkCopyRowsCopied ProviderSpecificCopy(ITable`1<T> table, DataOptions options, IEnumerable`1<T> source);
    protected virtual Task`1<BulkCopyRowsCopied> ProviderSpecificCopyAsync(ITable`1<T> table, DataOptions options, IEnumerable`1<T> source, CancellationToken cancellationToken);
    protected virtual Task`1<BulkCopyRowsCopied> ProviderSpecificCopyAsync(ITable`1<T> table, DataOptions options, IAsyncEnumerable`1<T> source, CancellationToken cancellationToken);
    private Nullable`1<ProviderConnections> TryGetProviderConnections(ITable`1<T> table);
    [AsyncStateMachineAttribute("LinqToDB.DataProvider.SapHana.SapHanaBulkCopy/<ProviderSpecificCopyInternalAsync>d__6`1")]
private Task`1<BulkCopyRowsCopied> ProviderSpecificCopyInternalAsync(ProviderConnections providerConnections, ITable`1<T> table, BulkCopyOptions options, Func`2<List`1<ColumnDescriptor>, BulkCopyReader`1<T>> createDataReader, CancellationToken cancellationToken);
    private BulkCopyRowsCopied ProviderSpecificCopyInternal(ProviderConnections providerConnections, ITable`1<T> table, BulkCopyOptions options, Func`2<List`1<ColumnDescriptor>, BulkCopyReader`1<T>> createDataReader);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class LinqToDB.DataProvider.SapHana.SapHanaDataProvider : DynamicDataProviderBase`1<SapHanaProviderAdapter> {
    private ISqlOptimizer _sqlOptimizer;
    private static MappingSchema MappingSchemaInstance;
    public TableOptions SupportedTableOptions { get; }
    private static SapHanaDataProvider();
    public virtual ISchemaProvider GetSchemaProvider();
    public virtual TableOptions get_SupportedTableOptions();
    public virtual ISqlBuilder CreateSqlBuilder(MappingSchema mappingSchema, DataOptions dataOptions);
    public virtual ISqlOptimizer GetSqlOptimizer(DataOptions dataOptions);
    public virtual Type ConvertParameterType(Type type, DbDataType dataType);
    public virtual void SetParameter(DataConnection dataConnection, DbParameter parameter, string name, DbDataType dataType, object value);
    protected virtual void SetParameterType(DataConnection dataConnection, DbParameter parameter, DbDataType dataType);
    public virtual BulkCopyRowsCopied BulkCopy(DataOptions options, ITable`1<T> table, IEnumerable`1<T> source);
    public virtual Task`1<BulkCopyRowsCopied> BulkCopyAsync(DataOptions options, ITable`1<T> table, IEnumerable`1<T> source, CancellationToken cancellationToken);
    public virtual Task`1<BulkCopyRowsCopied> BulkCopyAsync(DataOptions options, ITable`1<T> table, IAsyncEnumerable`1<T> source, CancellationToken cancellationToken);
    public virtual Nullable`1<bool> IsDBNullAllowed(DataOptions options, DbDataReader reader, int idx);
}
[UsedImplicitlyAttribute]
internal class LinqToDB.DataProvider.SapHana.SapHanaFactory : object {
    [NullableContextAttribute("1")]
private sealed virtual override IDataProvider LinqToDB.DataProvider.IDataProviderFactory.GetDataProvider(IEnumerable`1<NamedValue> attributes);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.DataProvider.SapHana.SapHanaMappingSchema : LockedMappingSchema {
    private static Action`2<StringBuilder, int> AppendConversionAction;
    internal static SapHanaMappingSchema Instance;
    private static SapHanaMappingSchema();
    private static void AppendConversion(StringBuilder stringBuilder, int value);
    private static void ConvertBinaryToSql(StringBuilder stringBuilder, Byte[] value);
    internal static void ConvertStringToSql(StringBuilder stringBuilder, string value);
    private static void ConvertCharToSql(StringBuilder stringBuilder, char value);
}
internal class LinqToDB.DataProvider.SapHana.SapHanaNativeSqlOptimizer : SapHanaSqlOptimizer {
    [NullableContextAttribute("1")]
public SapHanaNativeSqlOptimizer(SqlProviderFlags sqlProviderFlags);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class LinqToDB.DataProvider.SapHana.SapHanaOdbcDataProvider : DynamicDataProviderBase`1<OdbcProviderAdapter> {
    private ISqlOptimizer _sqlOptimizer;
    private static MappingSchema MappingSchemaInstance;
    public TableOptions SupportedTableOptions { get; }
    private static SapHanaOdbcDataProvider();
    public virtual ISchemaProvider GetSchemaProvider();
    public virtual DbCommand InitCommand(DataConnection dataConnection, DbCommand command, CommandType commandType, string commandText, DataParameter[] parameters, bool withParameters);
    public virtual TableOptions get_SupportedTableOptions();
    public virtual ISqlBuilder CreateSqlBuilder(MappingSchema mappingSchema, DataOptions dataOptions);
    public virtual ISqlOptimizer GetSqlOptimizer(DataOptions dataOptions);
    public virtual Type ConvertParameterType(Type type, DbDataType dataType);
    public virtual IQueryParametersNormalizer GetQueryParameterNormalizer();
    public virtual void SetParameter(DataConnection dataConnection, DbParameter parameter, string name, DbDataType dataType, object value);
    public virtual IExecutionScope ExecuteScope(DataConnection dataConnection);
    protected virtual void SetParameterType(DataConnection dataConnection, DbParameter parameter, DbDataType dataType);
    public virtual Nullable`1<bool> IsDBNullAllowed(DataOptions options, DbDataReader reader, int idx);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.DataProvider.SapHana.SapHanaOdbcSchemaProvider : SapHanaSchemaProvider {
    protected virtual List`1<DataTypeInfo> GetDataTypes(DataConnection dataConnection);
    protected virtual IReadOnlyCollection`1<PrimaryKeyInfo> GetPrimaryKeys(DataConnection dataConnection, IEnumerable`1<TableSchema> tables, GetSchemaOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.DataProvider.SapHana.SapHanaOdbcSqlBuilder : SapHanaSqlBuilder {
    public SapHanaOdbcSqlBuilder(IDataProvider provider, MappingSchema mappingSchema, DataOptions dataOptions, ISqlOptimizer sqlOptimizer, SqlProviderFlags sqlProviderFlags);
    private SapHanaOdbcSqlBuilder(BasicSqlBuilder parentBuilder);
    protected virtual ISqlBuilder CreateSqlBuilder();
    public virtual StringBuilder Convert(StringBuilder sb, string value, ConvertType convertType);
    protected virtual void BuildDataTypeFromDataType(SqlDataType type, bool forCreateTable, bool canBeNull);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class LinqToDB.DataProvider.SapHana.SapHanaOptions : DataProviderOptions`1<SapHanaOptions> {
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public SapHanaOptions(BulkCopyType BulkCopyType);
    private SapHanaOptions(SapHanaOptions original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    protected virtual IdentifierBuilder CreateID(IdentifierBuilder builder);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(SapHanaOptions other);
    public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(SapHanaOptions left, SapHanaOptions right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(SapHanaOptions left, SapHanaOptions right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(DataProviderOptions`1<SapHanaOptions> other);
    [CompilerGeneratedAttribute]
public virtual DataProviderOptions`1<SapHanaOptions> <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(BulkCopyType& BulkCopyType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.DataProvider.SapHana.SapHanaProviderAdapter : object {
    private static object _syncRoot;
    [NullableAttribute("2")]
private static SapHanaProviderAdapter _instance;
    public static string AssemblyName;
    public static string ClientNamespace;
    public static string ProviderFactoryName;
    [CompilerGeneratedAttribute]
private Type <ConnectionType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <DataReaderType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ParameterType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <CommandType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <TransactionType>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`2<DbParameter, HanaDbType> <SetDbType>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`4<DbConnection, HanaBulkCopyOptions, DbTransaction, HanaBulkCopy> <CreateBulkCopy>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<int, string, HanaBulkCopyColumnMapping> <CreateBulkCopyColumnMapping>k__BackingField;
    public Type ConnectionType { get; }
    public Type DataReaderType { get; }
    public Type ParameterType { get; }
    public Type CommandType { get; }
    public Type TransactionType { get; }
    public Action`2<DbParameter, HanaDbType> SetDbType { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`4<DbConnection, HanaBulkCopyOptions, DbTransaction, HanaBulkCopy> CreateBulkCopy { get; }
    public Func`3<int, string, HanaBulkCopyColumnMapping> CreateBulkCopyColumnMapping { get; }
    private SapHanaProviderAdapter(Type connectionType, Type dataReaderType, Type parameterType, Type commandType, Type transactionType, Action`2<DbParameter, HanaDbType> dbTypeSetter, Func`4<DbConnection, HanaBulkCopyOptions, DbTransaction, HanaBulkCopy> bulkCopyCreator, Func`3<int, string, HanaBulkCopyColumnMapping> bulkCopyColumnMappingCreator);
    private static SapHanaProviderAdapter();
    [CompilerGeneratedAttribute]
public sealed virtual Type get_ConnectionType();
    [CompilerGeneratedAttribute]
public sealed virtual Type get_DataReaderType();
    [CompilerGeneratedAttribute]
public sealed virtual Type get_ParameterType();
    [CompilerGeneratedAttribute]
public sealed virtual Type get_CommandType();
    [CompilerGeneratedAttribute]
public sealed virtual Type get_TransactionType();
    [CompilerGeneratedAttribute]
public Action`2<DbParameter, HanaDbType> get_SetDbType();
    [CompilerGeneratedAttribute]
public Func`4<DbConnection, HanaBulkCopyOptions, DbTransaction, HanaBulkCopy> get_CreateBulkCopy();
    [CompilerGeneratedAttribute]
public Func`3<int, string, HanaBulkCopyColumnMapping> get_CreateBulkCopyColumnMapping();
    internal static SapHanaProviderAdapter GetInstance();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.DataProvider.SapHana.SapHanaSchemaProvider : SchemaProviderBase {
    [CompilerGeneratedAttribute]
private string <DefaultSchema>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private GetHanaSchemaOptions <HanaSchemaOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasAccessForCalculationViews>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <SchemasFilter>k__BackingField;
    protected string DefaultSchema { get; private set; }
    [NullableAttribute("2")]
protected GetHanaSchemaOptions HanaSchemaOptions { get; private set; }
    protected bool HasAccessForCalculationViews { get; private set; }
    [NullableAttribute("2")]
protected string SchemasFilter { get; private set; }
    [CompilerGeneratedAttribute]
protected string get_DefaultSchema();
    [CompilerGeneratedAttribute]
private void set_DefaultSchema(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected GetHanaSchemaOptions get_HanaSchemaOptions();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_HanaSchemaOptions(GetHanaSchemaOptions value);
    [CompilerGeneratedAttribute]
protected bool get_HasAccessForCalculationViews();
    [CompilerGeneratedAttribute]
private void set_HasAccessForCalculationViews(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected string get_SchemasFilter();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_SchemasFilter(string value);
    public virtual DatabaseSchema GetSchema(DataConnection dataConnection, GetSchemaOptions options);
    private bool CheckAccessForCalculationViews(DataConnection dataConnection);
    protected virtual List`1<DataTypeInfo> GetDataTypes(DataConnection dataConnection);
    protected virtual List`1<TableInfo> GetTables(DataConnection dataConnection, GetSchemaOptions options);
    private string GetTablesQuery();
    protected virtual IReadOnlyCollection`1<PrimaryKeyInfo> GetPrimaryKeys(DataConnection dataConnection, IEnumerable`1<TableSchema> tables, GetSchemaOptions options);
    protected virtual List`1<ColumnInfo> GetColumns(DataConnection dataConnection, GetSchemaOptions options);
    protected virtual IReadOnlyCollection`1<ForeignKeyInfo> GetForeignKeys(DataConnection dataConnection, IEnumerable`1<TableSchema> tables, GetSchemaOptions options);
    protected virtual List`1<ProcedureInfo> GetProcedures(DataConnection dataConnection, GetSchemaOptions options);
    protected virtual List`1<ProcedureParameterInfo> GetProcedureParameters(DataConnection dataConnection, IEnumerable`1<ProcedureInfo> procedures, GetSchemaOptions options);
    protected virtual List`1<ColumnSchema> GetProcedureResultColumns(DataTable resultTable, GetSchemaOptions options);
    private static string GetEmptyStringIfInvalidColumnName(string columnName);
    [NullableContextAttribute("2")]
protected virtual Type GetSystemType(string dataType, string columnType, DataTypeInfo dataTypeInfo, Nullable`1<int> length, Nullable`1<int> precision, Nullable`1<int> scale, GetSchemaOptions options);
    [NullableContextAttribute("2")]
protected virtual DataType GetDataType(string dataType, string columnType, Nullable`1<int> length, Nullable`1<int> precision, Nullable`1<int> scale);
    [NullableContextAttribute("2")]
protected virtual string GetProviderSpecificTypeNamespace();
    protected virtual void LoadProcedureTableSchema(DataConnection dataConnection, GetSchemaOptions options, ProcedureSchema procedure, string commandText, List`1<TableSchema> tables);
    private static DataParameter[] GetStoredProcedureDataParameters(ProcedureSchema procedure);
    protected virtual DataTable GetProcedureSchema(DataConnection dataConnection, string commandText, CommandType commandType, DataParameter[] parameters, GetSchemaOptions options);
    private IEnumerable`1<TableInfo> GetViewsWithParameters(DataConnection dataConnection);
    private IEnumerable`1<ProcedureParameterInfo> GetParametersForViews(DataConnection dataConnection);
    protected virtual List`1<TableSchema> GetProviderSpecificTables(DataConnection dataConnection, GetSchemaOptions options);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private TableInfo <GetTables>b__19_0(DbDataReader x);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private ProcedureInfo <GetProcedures>b__24_0(DbDataReader rd);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private TableInfo <GetViewsWithParameters>b__34_0(DbDataReader x);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.DataProvider.SapHana.SapHanaSqlBuilder : BasicSqlBuilder {
    public bool IsNestedJoinParenthesisRequired { get; }
    protected bool SupportsColumnAliasesInSource { get; }
    protected bool IsValuesSyntaxSupported { get; }
    protected string FakeTable { get; }
    public SapHanaSqlBuilder(IDataProvider provider, MappingSchema mappingSchema, DataOptions dataOptions, ISqlOptimizer sqlOptimizer, SqlProviderFlags sqlProviderFlags);
    protected SapHanaSqlBuilder(BasicSqlBuilder parentBuilder);
    protected virtual ISqlBuilder CreateSqlBuilder();
    public virtual int CommandCount(SqlStatement statement);
    protected virtual void BuildCommand(SqlStatement statement, int commandNumber);
    protected virtual string LimitFormat(SelectQuery selectQuery);
    protected virtual string OffsetFormat(SelectQuery selectQuery);
    public virtual bool get_IsNestedJoinParenthesisRequired();
    protected virtual void BuildStartCreateTableStatement(SqlCreateTableStatement createTable);
    protected virtual void BuildDataTypeFromDataType(SqlDataType type, bool forCreateTable, bool canBeNull);
    protected virtual void BuildFromClause(SqlStatement statement, SelectQuery selectQuery);
    public virtual StringBuilder Convert(StringBuilder sb, string value, ConvertType convertType);
    protected virtual void BuildCreateTableIdentityAttribute1(SqlField field);
    protected virtual void BuildCreateTablePrimaryKey(SqlCreateTableStatement createTable, string pkName, IEnumerable`1<string> fieldNames);
    public virtual StringBuilder BuildObjectName(StringBuilder sb, SqlObjectName name, ConvertType objectType, bool escape, TableOptions tableOptions, bool withoutSuffix);
    protected virtual void BuildCreateTableCommand(SqlTable table);
    protected virtual void BuildIsDistinctPredicate(IsDistinct expr);
    protected virtual bool get_SupportsColumnAliasesInSource();
    protected virtual bool get_IsValuesSyntaxSupported();
    protected virtual string get_FakeTable();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.DataProvider.SapHana.SapHanaSqlOptimizer : BasicSqlOptimizer {
    protected static String[] HanaLikeCharactersToEscape;
    public String[] LikeCharactersToEscape { get; }
    public SapHanaSqlOptimizer(SqlProviderFlags sqlProviderFlags);
    private static SapHanaSqlOptimizer();
    public virtual SqlStatement TransformStatement(SqlStatement statement, DataOptions dataOptions);
    public virtual ISqlExpression ConvertExpressionImpl(ISqlExpression expression, ConvertVisitor`1<RunOptimizationContext> visitor);
    private static SqlFunction ConvertCase(SqlFunction func, Type systemType, ISqlExpression[] parameters, int start);
    protected virtual ISqlExpression ConvertFunction(SqlFunction func);
    public virtual String[] get_LikeCharactersToEscape();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PublicAPIAttribute]
public static class LinqToDB.DataProvider.SapHana.SapHanaTools : object {
    private static Lazy`1<IDataProvider> _hanaDataProvider;
    private static Lazy`1<IDataProvider> _hanaOdbcDataProvider;
    [NullableAttribute("2")]
private static string _detectedProviderName;
    public static string DetectedProviderName { get; }
    [ObsoleteAttribute("Use SapHanaOptions.Default.BulkCopyType instead.")]
public static BulkCopyType DefaultBulkCopyType { get; public set; }
    private static SapHanaTools();
    public static void ResolveSapHana(string path);
    public static void ResolveSapHana(Assembly assembly);
    [NullableContextAttribute("2")]
public static IDataProvider GetDataProvider(string providerName, string assemblyName);
    public static DataConnection CreateDataConnection(string connectionString, string providerName);
    public static DataConnection CreateDataConnection(DbConnection connection, string providerName);
    public static DataConnection CreateDataConnection(DbTransaction transaction, string providerName);
    public static string get_DetectedProviderName();
    private static string DetectProviderName();
    internal static IDataProvider ProviderDetector(ConnectionOptions options);
    public static BulkCopyType get_DefaultBulkCopyType();
    public static void set_DefaultBulkCopyType(BulkCopyType value);
}
public class LinqToDB.DataProvider.SapHana.ViewWithParametersTableSchema : TableSchema {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<ParameterSchema> <Parameters>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<ParameterSchema> Parameters { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<ParameterSchema> get_Parameters();
    [CompilerGeneratedAttribute]
public void set_Parameters(List`1<ParameterSchema> value);
}
public interface LinqToDB.DataProvider.SqlCe.ISqlCeSpecificQueryable`1 {
}
public interface LinqToDB.DataProvider.SqlCe.ISqlCeSpecificTable`1 {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.DataProvider.SqlCe.SqlCeBulkCopy : BasicBulkCopy {
    protected virtual BulkCopyRowsCopied MultipleRowsCopy(ITable`1<T> table, DataOptions options, IEnumerable`1<T> source);
    [AsyncStateMachineAttribute("LinqToDB.DataProvider.SqlCe.SqlCeBulkCopy/<MultipleRowsCopyAsync>d__1`1")]
protected virtual Task`1<BulkCopyRowsCopied> MultipleRowsCopyAsync(ITable`1<T> table, DataOptions options, IEnumerable`1<T> source, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("LinqToDB.DataProvider.SqlCe.SqlCeBulkCopy/<MultipleRowsCopyAsync>d__2`1")]
protected virtual Task`1<BulkCopyRowsCopied> MultipleRowsCopyAsync(ITable`1<T> table, DataOptions options, IAsyncEnumerable`1<T> source, CancellationToken cancellationToken);
}
public static class LinqToDB.DataProvider.SqlCe.SqlCeConfiguration : object {
    [ObsoleteAttribute("Use SqlCeOptions.Default.BulkCopyType instead.")]
public static bool InlineFunctionParameters { get; public set; }
    public static bool get_InlineFunctionParameters();
    public static void set_InlineFunctionParameters(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class LinqToDB.DataProvider.SqlCe.SqlCeDataProvider : DynamicDataProviderBase`1<SqlCeProviderAdapter> {
    private ISqlOptimizer _sqlOptimizer;
    public TableOptions SupportedTableOptions { get; }
    protected SqlCeDataProvider(string name, MappingSchema mappingSchema);
    public virtual TableOptions get_SupportedTableOptions();
    public virtual ISqlBuilder CreateSqlBuilder(MappingSchema mappingSchema, DataOptions dataOptions);
    public virtual ISqlOptimizer GetSqlOptimizer(DataOptions dataOptions);
    public virtual ISchemaProvider GetSchemaProvider();
    public virtual void SetParameter(DataConnection dataConnection, DbParameter parameter, string name, DbDataType dataType, object value);
    protected virtual void SetParameterType(DataConnection dataConnection, DbParameter parameter, DbDataType dataType);
    public virtual Nullable`1<bool> IsDBNullAllowed(DataOptions options, DbDataReader reader, int idx);
    public virtual BulkCopyRowsCopied BulkCopy(DataOptions options, ITable`1<T> table, IEnumerable`1<T> source);
    public virtual Task`1<BulkCopyRowsCopied> BulkCopyAsync(DataOptions options, ITable`1<T> table, IEnumerable`1<T> source, CancellationToken cancellationToken);
    public virtual Task`1<BulkCopyRowsCopied> BulkCopyAsync(DataOptions options, ITable`1<T> table, IAsyncEnumerable`1<T> source, CancellationToken cancellationToken);
}
[UsedImplicitlyAttribute]
internal class LinqToDB.DataProvider.SqlCe.SqlCeFactory : object {
    [NullableContextAttribute("1")]
private sealed virtual override IDataProvider LinqToDB.DataProvider.IDataProviderFactory.GetDataProvider(IEnumerable`1<NamedValue> attributes);
}
[ExtensionAttribute]
public static class LinqToDB.DataProvider.SqlCe.SqlCeHints : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[ExpressionMethodAttribute("WithIndexImpl")]
public static ISqlCeSpecificTable`1<TSource> WithIndex(ISqlCeSpecificTable`1<TSource> table, string indexName);
    [NullableContextAttribute("1")]
private static Expression`1<Func`3<ISqlCeSpecificTable`1<TSource>, string, ISqlCeSpecificTable`1<TSource>>> WithIndexImpl();
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[ExpressionMethodAttribute("WithIndex2Impl")]
public static ISqlCeSpecificTable`1<TSource> WithIndex(ISqlCeSpecificTable`1<TSource> table, String[] indexNames);
    [NullableContextAttribute("1")]
private static Expression`1<Func`3<ISqlCeSpecificTable`1<TSource>, String[], ISqlCeSpecificTable`1<TSource>>> WithIndex2Impl();
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("SqlCe", "1", "LinqToDB.SqlProvider.HintExtensionBuilder")]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
public static ISqlCeSpecificTable`1<TSource> TableHint(ISqlCeSpecificTable`1<TSource> table, string hint);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("SqlCe", "1", "LinqToDB.SqlProvider.HintWithParameterExtensionBuilder")]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
public static ISqlCeSpecificTable`1<TSource> TableHint(ISqlCeSpecificTable`1<TSource> table, string hint, TParam hintParameter);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("SqlCe", "1", "LinqToDB.SqlProvider.HintWithParametersExtensionBuilder")]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
public static ISqlCeSpecificTable`1<TSource> TableHint(ISqlCeSpecificTable`1<TSource> table, string hint, TParam[] hintParameters);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("SqlCe", "2", "LinqToDB.SqlProvider.HintExtensionBuilder")]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
public static ISqlCeSpecificQueryable`1<TSource> TablesInScopeHint(ISqlCeSpecificQueryable`1<TSource> source, string hint);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("SqlCe", "2", "LinqToDB.SqlProvider.HintWithParameterExtensionBuilder")]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
public static ISqlCeSpecificQueryable`1<TSource> TablesInScopeHint(ISqlCeSpecificQueryable`1<TSource> source, string hint, TParam hintParameter);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("SqlCe", "2", "LinqToDB.SqlProvider.HintWithParametersExtensionBuilder")]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
public static ISqlCeSpecificQueryable`1<TSource> TablesInScopeHint(ISqlCeSpecificQueryable`1<TSource> source, string hint, Object[] hintParameters);
    [ExtensionAttribute]
[ExpressionMethodAttribute("SqlCe", "WithHoldLockTableImpl")]
public static ISqlCeSpecificTable`1<TSource> WithHoldLock(ISqlCeSpecificTable`1<TSource> table);
    private static Expression`1<Func`2<ISqlCeSpecificTable`1<TSource>, ISqlCeSpecificTable`1<TSource>>> WithHoldLockTableImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("SqlCe", "WithHoldLockQueryImpl")]
public static ISqlCeSpecificQueryable`1<TSource> WithHoldLockInScope(ISqlCeSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<ISqlCeSpecificQueryable`1<TSource>, ISqlCeSpecificQueryable`1<TSource>>> WithHoldLockQueryImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("SqlCe", "WithNoLockTableImpl")]
public static ISqlCeSpecificTable`1<TSource> WithNoLock(ISqlCeSpecificTable`1<TSource> table);
    private static Expression`1<Func`2<ISqlCeSpecificTable`1<TSource>, ISqlCeSpecificTable`1<TSource>>> WithNoLockTableImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("SqlCe", "WithNoLockQueryImpl")]
public static ISqlCeSpecificQueryable`1<TSource> WithNoLockInScope(ISqlCeSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<ISqlCeSpecificQueryable`1<TSource>, ISqlCeSpecificQueryable`1<TSource>>> WithNoLockQueryImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("SqlCe", "WithPagLockTableImpl")]
public static ISqlCeSpecificTable`1<TSource> WithPagLock(ISqlCeSpecificTable`1<TSource> table);
    private static Expression`1<Func`2<ISqlCeSpecificTable`1<TSource>, ISqlCeSpecificTable`1<TSource>>> WithPagLockTableImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("SqlCe", "WithPagLockQueryImpl")]
public static ISqlCeSpecificQueryable`1<TSource> WithPagLockInScope(ISqlCeSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<ISqlCeSpecificQueryable`1<TSource>, ISqlCeSpecificQueryable`1<TSource>>> WithPagLockQueryImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("SqlCe", "WithRowLockTableImpl")]
public static ISqlCeSpecificTable`1<TSource> WithRowLock(ISqlCeSpecificTable`1<TSource> table);
    private static Expression`1<Func`2<ISqlCeSpecificTable`1<TSource>, ISqlCeSpecificTable`1<TSource>>> WithRowLockTableImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("SqlCe", "WithRowLockQueryImpl")]
public static ISqlCeSpecificQueryable`1<TSource> WithRowLockInScope(ISqlCeSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<ISqlCeSpecificQueryable`1<TSource>, ISqlCeSpecificQueryable`1<TSource>>> WithRowLockQueryImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("SqlCe", "WithTabLockTableImpl")]
public static ISqlCeSpecificTable`1<TSource> WithTabLock(ISqlCeSpecificTable`1<TSource> table);
    private static Expression`1<Func`2<ISqlCeSpecificTable`1<TSource>, ISqlCeSpecificTable`1<TSource>>> WithTabLockTableImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("SqlCe", "WithTabLockQueryImpl")]
public static ISqlCeSpecificQueryable`1<TSource> WithTabLockInScope(ISqlCeSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<ISqlCeSpecificQueryable`1<TSource>, ISqlCeSpecificQueryable`1<TSource>>> WithTabLockQueryImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("SqlCe", "WithUpdLockTableImpl")]
public static ISqlCeSpecificTable`1<TSource> WithUpdLock(ISqlCeSpecificTable`1<TSource> table);
    private static Expression`1<Func`2<ISqlCeSpecificTable`1<TSource>, ISqlCeSpecificTable`1<TSource>>> WithUpdLockTableImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("SqlCe", "WithUpdLockQueryImpl")]
public static ISqlCeSpecificQueryable`1<TSource> WithUpdLockInScope(ISqlCeSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<ISqlCeSpecificQueryable`1<TSource>, ISqlCeSpecificQueryable`1<TSource>>> WithUpdLockQueryImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("SqlCe", "WithXLockTableImpl")]
public static ISqlCeSpecificTable`1<TSource> WithXLock(ISqlCeSpecificTable`1<TSource> table);
    private static Expression`1<Func`2<ISqlCeSpecificTable`1<TSource>, ISqlCeSpecificTable`1<TSource>>> WithXLockTableImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("SqlCe", "WithXLockQueryImpl")]
public static ISqlCeSpecificQueryable`1<TSource> WithXLockInScope(ISqlCeSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<ISqlCeSpecificQueryable`1<TSource>, ISqlCeSpecificQueryable`1<TSource>>> WithXLockQueryImpl();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.DataProvider.SqlCe.SqlCeMappingSchema : LockedMappingSchema {
    private static Action`2<StringBuilder, int> AppendConversionAction;
    internal static SqlCeMappingSchema Instance;
    private static SqlCeMappingSchema();
    private static void ConvertBinaryToSql(StringBuilder stringBuilder, Byte[] value);
    private static void AppendConversion(StringBuilder stringBuilder, int value);
    private static void ConvertStringToSql(StringBuilder stringBuilder, string value);
    private static void ConvertCharToSql(StringBuilder stringBuilder, char value);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class LinqToDB.DataProvider.SqlCe.SqlCeOptions : DataProviderOptions`1<SqlCeOptions> {
    [CompilerGeneratedAttribute]
private bool <InlineFunctionParameters>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public bool InlineFunctionParameters { get; public set; }
    public SqlCeOptions(BulkCopyType BulkCopyType, bool InlineFunctionParameters);
    private SqlCeOptions(SqlCeOptions original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public bool get_InlineFunctionParameters();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_InlineFunctionParameters(bool value);
    protected virtual IdentifierBuilder CreateID(IdentifierBuilder builder);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(SqlCeOptions other);
    public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(SqlCeOptions left, SqlCeOptions right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(SqlCeOptions left, SqlCeOptions right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(DataProviderOptions`1<SqlCeOptions> other);
    [CompilerGeneratedAttribute]
public virtual DataProviderOptions`1<SqlCeOptions> <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(BulkCopyType& BulkCopyType, Boolean& InlineFunctionParameters);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.DataProvider.SqlCe.SqlCeProviderAdapter : object {
    private static object _syncRoot;
    [NullableAttribute("2")]
private static SqlCeProviderAdapter _instance;
    public static string AssemblyName;
    public static string ClientNamespace;
    public static string ProviderFactoryName;
    [CompilerGeneratedAttribute]
private Type <ConnectionType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <DataReaderType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ParameterType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <CommandType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <TransactionType>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`2<DbParameter, SqlDbType> <SetDbType>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<DbParameter, SqlDbType> <GetDbType>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<string, SqlCeEngine> <CreateSqlCeEngine>k__BackingField;
    public Type ConnectionType { get; }
    public Type DataReaderType { get; }
    public Type ParameterType { get; }
    public Type CommandType { get; }
    public Type TransactionType { get; }
    public Action`2<DbParameter, SqlDbType> SetDbType { get; }
    public Func`2<DbParameter, SqlDbType> GetDbType { get; }
    public Func`2<string, SqlCeEngine> CreateSqlCeEngine { get; }
    private SqlCeProviderAdapter(Type connectionType, Type dataReaderType, Type parameterType, Type commandType, Type transactionType, Action`2<DbParameter, SqlDbType> dbTypeSetter, Func`2<DbParameter, SqlDbType> dbTypeGetter, Func`2<string, SqlCeEngine> sqlCeEngineCreator);
    private static SqlCeProviderAdapter();
    [CompilerGeneratedAttribute]
public sealed virtual Type get_ConnectionType();
    [CompilerGeneratedAttribute]
public sealed virtual Type get_DataReaderType();
    [CompilerGeneratedAttribute]
public sealed virtual Type get_ParameterType();
    [CompilerGeneratedAttribute]
public sealed virtual Type get_CommandType();
    [CompilerGeneratedAttribute]
public sealed virtual Type get_TransactionType();
    [CompilerGeneratedAttribute]
public Action`2<DbParameter, SqlDbType> get_SetDbType();
    [CompilerGeneratedAttribute]
public Func`2<DbParameter, SqlDbType> get_GetDbType();
    [CompilerGeneratedAttribute]
public Func`2<string, SqlCeEngine> get_CreateSqlCeEngine();
    public static SqlCeProviderAdapter GetInstance();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.DataProvider.SqlCe.SqlCeSchemaProvider : SchemaProviderBase {
    private static IReadOnlyList`1<string> _tableTypes;
    private static SqlCeSchemaProvider();
    protected virtual List`1<TableInfo> GetTables(DataConnection dataConnection, GetSchemaOptions options);
    protected virtual IReadOnlyCollection`1<PrimaryKeyInfo> GetPrimaryKeys(DataConnection dataConnection, IEnumerable`1<TableSchema> tables, GetSchemaOptions options);
    protected virtual List`1<ColumnInfo> GetColumns(DataConnection dataConnection, GetSchemaOptions options);
    protected virtual IReadOnlyCollection`1<ForeignKeyInfo> GetForeignKeys(DataConnection dataConnection, IEnumerable`1<TableSchema> tables, GetSchemaOptions options);
    protected virtual string GetDatabaseName(DataConnection dbConnection);
    [NullableContextAttribute("2")]
protected virtual Type GetSystemType(string dataType, string columnType, DataTypeInfo dataTypeInfo, Nullable`1<int> length, Nullable`1<int> precision, Nullable`1<int> scale, GetSchemaOptions options);
    [NullableContextAttribute("2")]
protected virtual DataType GetDataType(string dataType, string columnType, Nullable`1<int> length, Nullable`1<int> precision, Nullable`1<int> scale);
    protected virtual string GetProviderSpecificTypeNamespace();
    [NullableContextAttribute("2")]
protected virtual string GetProviderSpecificType(string dataType);
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class LinqToDB.DataProvider.SqlCe.SqlCeSpecificQueryable`1 : DatabaseSpecificQueryable`1<TSource> {
    [NullableContextAttribute("1")]
public SqlCeSpecificQueryable`1(IQueryable`1<TSource> queryable);
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class LinqToDB.DataProvider.SqlCe.SqlCeSpecificTable`1 : DatabaseSpecificTable`1<TSource> {
    [NullableContextAttribute("1")]
public SqlCeSpecificTable`1(ITable`1<TSource> table);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.DataProvider.SqlCe.SqlCeSqlBuilder : BasicSqlBuilder {
    protected bool OffsetFirst { get; }
    protected bool IsValuesSyntaxSupported { get; }
    protected bool SupportsColumnAliasesInSource { get; }
    protected bool RequiresConstantColumnAliases { get; }
    public SqlCeSqlBuilder(IDataProvider provider, MappingSchema mappingSchema, DataOptions dataOptions, ISqlOptimizer sqlOptimizer, SqlProviderFlags sqlProviderFlags);
    private SqlCeSqlBuilder(BasicSqlBuilder parentBuilder);
    protected virtual ISqlBuilder CreateSqlBuilder();
    protected virtual string FirstFormat(SelectQuery selectQuery);
    protected virtual string LimitFormat(SelectQuery selectQuery);
    protected virtual string OffsetFormat(SelectQuery selectQuery);
    protected virtual bool get_OffsetFirst();
    protected virtual bool get_IsValuesSyntaxSupported();
    protected virtual bool get_SupportsColumnAliasesInSource();
    protected virtual bool get_RequiresConstantColumnAliases();
    public virtual int CommandCount(SqlStatement statement);
    protected virtual void BuildCommand(SqlStatement statement, int commandNumber);
    protected virtual void BuildDataTypeFromDataType(SqlDataType type, bool forCreateTable, bool canBeNull);
    public virtual StringBuilder Convert(StringBuilder sb, string value, ConvertType convertType);
    protected virtual void BuildCreateTableIdentityAttribute2(SqlField field);
    public virtual StringBuilder BuildObjectName(StringBuilder sb, SqlObjectName name, ConvertType objectType, bool escape, TableOptions tableOptions, bool withoutSuffix);
    protected virtual string GetProviderTypeName(IDataContext dataContext, DbParameter parameter);
    protected virtual void BuildMergeStatement(SqlMergeStatement merge);
    protected virtual void BuildIsDistinctPredicate(IsDistinct expr);
    protected virtual void BuildTableExtensions(SqlTable table, string alias);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.DataProvider.SqlCe.SqlCeSqlOptimizer : BasicSqlOptimizer {
    private static String[] LikeSqlCeCharactersToEscape;
    public String[] LikeCharactersToEscape { get; }
    public SqlCeSqlOptimizer(SqlProviderFlags sqlProviderFlags);
    private static SqlCeSqlOptimizer();
    public virtual SqlStatement TransformStatement(SqlStatement statement, DataOptions dataOptions);
    public virtual String[] get_LikeCharactersToEscape();
    public virtual ISqlPredicate ConvertSearchStringPredicate(SearchString predicate, ConvertVisitor`1<RunOptimizationContext> visitor);
    private static void CorrectInsertParameters(SqlStatement statement);
    private static void CorrectSkipAndColumns(SqlStatement statement);
    private static void CorrectFunctionParameters(SqlStatement statement, DataOptions options);
    protected virtual void FixEmptySelect(SqlStatement statement);
    private SqlStatement CorrectBooleanComparison(SqlStatement statement);
    public virtual ISqlExpression ConvertExpressionImpl(ISqlExpression expression, ConvertVisitor`1<RunOptimizationContext> visitor);
    protected virtual ISqlExpression ConvertFunction(SqlFunction func);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class LinqToDB.DataProvider.SqlCe.SqlCeTools : object {
    private static Lazy`1<IDataProvider> _sqlCeDataProvider;
    [ObsoleteAttribute("Use SqlCeOptions.Default.BulkCopyType instead.")]
public static BulkCopyType DefaultBulkCopyType { get; public set; }
    private static SqlCeTools();
    internal static IDataProvider ProviderDetector(ConnectionOptions options);
    public static IDataProvider GetDataProvider();
    public static void ResolveSqlCe(string path);
    public static void ResolveSqlCe(Assembly assembly);
    public static DataConnection CreateDataConnection(string connectionString);
    public static DataConnection CreateDataConnection(DbConnection connection);
    public static DataConnection CreateDataConnection(DbTransaction transaction);
    public static void CreateDatabase(string databaseName, bool deleteIfExists);
    public static void DropDatabase(string databaseName);
    public static BulkCopyType get_DefaultBulkCopyType();
    public static void set_DefaultBulkCopyType(BulkCopyType value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class LinqToDB.DataProvider.SqlCe.SqlServerTools : object {
    [ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
public static ISqlCeSpecificTable`1<TSource> AsSqlCe(ITable`1<TSource> table);
    [ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
public static ISqlCeSpecificQueryable`1<TSource> AsSqlCe(IQueryable`1<TSource> source);
}
public interface LinqToDB.DataProvider.SQLite.ISQLiteExtensions {
}
public interface LinqToDB.DataProvider.SQLite.ISQLiteSpecificTable`1 {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.DataProvider.SQLite.SQLiteBulkCopy : BasicBulkCopy {
    protected int MaxParameters { get; }
    protected int MaxSqlLength { get; }
    protected virtual int get_MaxParameters();
    protected virtual int get_MaxSqlLength();
    protected virtual BulkCopyRowsCopied MultipleRowsCopy(ITable`1<T> table, DataOptions options, IEnumerable`1<T> source);
    protected virtual Task`1<BulkCopyRowsCopied> MultipleRowsCopyAsync(ITable`1<T> table, DataOptions options, IEnumerable`1<T> source, CancellationToken cancellationToken);
    protected virtual Task`1<BulkCopyRowsCopied> MultipleRowsCopyAsync(ITable`1<T> table, DataOptions options, IAsyncEnumerable`1<T> source, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class LinqToDB.DataProvider.SQLite.SQLiteDataProvider : DynamicDataProviderBase`1<SQLiteProviderAdapter> {
    private ISqlOptimizer _sqlOptimizer;
    public TableOptions SupportedTableOptions { get; }
    protected SQLiteDataProvider(string name);
    protected SQLiteDataProvider(string name, MappingSchema mappingSchema);
    private void SetSqliteField(Expression`1<Func`3<DbDataReader, int, T>> expr, Type[] fieldTypes, String[] typeNames);
    [NullableContextAttribute("2")]
protected virtual string NormalizeTypeName(string typeName);
    public virtual IExecutionScope ExecuteScope(DataConnection dataConnection);
    public virtual TableOptions get_SupportedTableOptions();
    public virtual ISqlBuilder CreateSqlBuilder(MappingSchema mappingSchema, DataOptions dataOptions);
    public virtual ISqlOptimizer GetSqlOptimizer(DataOptions dataOptions);
    public virtual ISchemaProvider GetSchemaProvider();
    public virtual Nullable`1<bool> IsDBNullAllowed(DataOptions options, DbDataReader reader, int idx);
    public virtual void SetParameter(DataConnection dataConnection, DbParameter parameter, string name, DbDataType dataType, object value);
    protected virtual void SetParameterType(DataConnection dataConnection, DbParameter parameter, DbDataType dataType);
    public virtual BulkCopyRowsCopied BulkCopy(DataOptions options, ITable`1<T> table, IEnumerable`1<T> source);
    public virtual Task`1<BulkCopyRowsCopied> BulkCopyAsync(DataOptions options, ITable`1<T> table, IEnumerable`1<T> source, CancellationToken cancellationToken);
    public virtual Task`1<BulkCopyRowsCopied> BulkCopyAsync(DataOptions options, ITable`1<T> table, IAsyncEnumerable`1<T> source, CancellationToken cancellationToken);
}
internal class LinqToDB.DataProvider.SQLite.SQLiteDataProviderClassic : SQLiteDataProvider {
}
internal class LinqToDB.DataProvider.SQLite.SQLiteDataProviderMS : SQLiteDataProvider {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class LinqToDB.DataProvider.SQLite.SQLiteExtensions : object {
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static ISQLiteExtensions SQLite(ISqlExtension ext);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[ExpressionMethodAttribute("MatchImpl1")]
public static bool Match(ISQLiteExtensions ext, object entityOrColumn, string match);
    private static Expression`1<Func`4<ISQLiteExtensions, object, string, bool>> MatchImpl1();
    [ExtensionAttribute]
[ExpressionMethodAttribute("MatchTableImpl1")]
public static IQueryable`1<TEntity> MatchTable(ISQLiteExtensions ext, ITable`1<TEntity> table, string match);
    private static Expression`1<Func`4<ISQLiteExtensions, ITable`1<TEntity>, string, IQueryable`1<TEntity>>> MatchTableImpl1();
    [ExtensionAttribute]
[ExpressionMethodAttribute("RowIdImpl")]
public static int RowId(ISQLiteExtensions ext, TEntity entity);
    private static Expression`1<Func`3<ISQLiteExtensions, TEntity, int>> RowIdImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("RankImpl")]
public static Nullable`1<double> Rank(ISQLiteExtensions ext, TEntity entity);
    private static Expression`1<Func`3<ISQLiteExtensions, TEntity, Nullable`1<double>>> RankImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("Fts3OffsetsImpl")]
public static string FTS3Offsets(ISQLiteExtensions ext, TEntity entity);
    private static Expression`1<Func`3<ISQLiteExtensions, TEntity, string>> Fts3OffsetsImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("Fts3MatchInfoImpl1")]
public static Byte[] FTS3MatchInfo(ISQLiteExtensions ext, TEntity entity);
    private static Expression`1<Func`3<ISQLiteExtensions, TEntity, Byte[]>> Fts3MatchInfoImpl1();
    [ExtensionAttribute]
[ExpressionMethodAttribute("Fts3MatchInfoImpl2")]
public static Byte[] FTS3MatchInfo(ISQLiteExtensions ext, TEntity entity, string format);
    private static Expression`1<Func`4<ISQLiteExtensions, TEntity, string, Byte[]>> Fts3MatchInfoImpl2();
    [ExtensionAttribute]
[ExpressionMethodAttribute("Fts3SnippetImpl1")]
public static string FTS3Snippet(ISQLiteExtensions ext, TEntity entity);
    private static Expression`1<Func`3<ISQLiteExtensions, TEntity, string>> Fts3SnippetImpl1();
    [ExtensionAttribute]
[ExpressionMethodAttribute("Fts3SnippetImpl2")]
public static string FTS3Snippet(ISQLiteExtensions ext, TEntity entity, string startMatch);
    private static Expression`1<Func`4<ISQLiteExtensions, TEntity, string, string>> Fts3SnippetImpl2();
    [ExtensionAttribute]
[ExpressionMethodAttribute("Fts3SnippetImpl3")]
public static string FTS3Snippet(ISQLiteExtensions ext, TEntity entity, string startMatch, string endMatch);
    private static Expression`1<Func`5<ISQLiteExtensions, TEntity, string, string, string>> Fts3SnippetImpl3();
    [ExtensionAttribute]
[ExpressionMethodAttribute("Fts3SnippetImpl4")]
public static string FTS3Snippet(ISQLiteExtensions ext, TEntity entity, string startMatch, string endMatch, string ellipses);
    private static Expression`1<Func`6<ISQLiteExtensions, TEntity, string, string, string, string>> Fts3SnippetImpl4();
    [ExtensionAttribute]
[ExpressionMethodAttribute("Fts3SnippetImpl5")]
public static string FTS3Snippet(ISQLiteExtensions ext, TEntity entity, string startMatch, string endMatch, string ellipses, int columnIndex);
    private static Expression`1<Func`7<ISQLiteExtensions, TEntity, string, string, string, int, string>> Fts3SnippetImpl5();
    [ExtensionAttribute]
[ExpressionMethodAttribute("Fts3SnippetImpl6")]
public static string FTS3Snippet(ISQLiteExtensions ext, TEntity entity, string startMatch, string endMatch, string ellipses, int columnIndex, int tokensNumber);
    private static Expression`1<Func`8<ISQLiteExtensions, TEntity, string, string, string, int, int, string>> Fts3SnippetImpl6();
    [ExtensionAttribute]
[ExpressionMethodAttribute("Fts5bm25Impl1")]
public static double FTS5bm25(ISQLiteExtensions ext, TEntity entity);
    private static Expression`1<Func`3<ISQLiteExtensions, TEntity, double>> Fts5bm25Impl1();
    [ExtensionAttribute]
[ExpressionMethodAttribute("Fts5bm25Impl2")]
public static double FTS5bm25(ISQLiteExtensions ext, TEntity entity, Double[] weights);
    private static Expression`1<Func`4<ISQLiteExtensions, TEntity, Double[], double>> Fts5bm25Impl2();
    [ExtensionAttribute]
[ExpressionMethodAttribute("Fts5HighlightImpl")]
public static string FTS5Highlight(ISQLiteExtensions ext, TEntity entity, int columnIndex, string startMatch, string endMatch);
    private static Expression`1<Func`6<ISQLiteExtensions, TEntity, int, string, string, string>> Fts5HighlightImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("Fts5SnippetImpl")]
public static string FTS5Snippet(ISQLiteExtensions ext, TEntity entity, int columnIndex, string startMatch, string endMatch, string ellipses, int tokensNumber);
    private static Expression`1<Func`8<ISQLiteExtensions, TEntity, int, string, string, string, int, string>> Fts5SnippetImpl();
    [ExtensionAttribute]
public static void FTS3Optimize(DataConnection dc, ITable`1<TEntity> table);
    [ExtensionAttribute]
public static void FTS3Rebuild(DataConnection dc, ITable`1<TEntity> table);
    [ExtensionAttribute]
public static void FTS3IntegrityCheck(DataConnection dc, ITable`1<TEntity> table);
    [ExtensionAttribute]
public static void FTS3Merge(DataConnection dc, ITable`1<TEntity> table, int blocks, int segments);
    [ExtensionAttribute]
public static void FTS3AutoMerge(DataConnection dc, ITable`1<TEntity> table, int segments);
    [ExtensionAttribute]
public static void FTS5AutoMerge(DataConnection dc, ITable`1<TEntity> table, int value);
    [ExtensionAttribute]
public static void FTS5CrisisMerge(DataConnection dc, ITable`1<TEntity> table, int value);
    [ExtensionAttribute]
public static void FTS5Delete(DataConnection dc, ITable`1<TEntity> table, int rowid, TEntity record);
    [ExtensionAttribute]
public static void FTS5DeleteAll(DataConnection dc, ITable`1<TEntity> table);
    [ExtensionAttribute]
public static void FTS5IntegrityCheck(DataConnection dc, ITable`1<TEntity> table);
    [ExtensionAttribute]
public static void FTS5Merge(DataConnection dc, ITable`1<TEntity> table, int value);
    [ExtensionAttribute]
public static void FTS5Optimize(DataConnection dc, ITable`1<TEntity> table);
    [ExtensionAttribute]
public static void FTS5Pgsz(DataConnection dc, ITable`1<TEntity> table, int value);
    [ExtensionAttribute]
public static void FTS5Rank(DataConnection dc, ITable`1<TEntity> table, string function);
    [ExtensionAttribute]
public static void FTS5Rebuild(DataConnection dc, ITable`1<TEntity> table);
    [ExtensionAttribute]
public static void FTS5UserMerge(DataConnection dc, ITable`1<TEntity> table, int value);
}
[UsedImplicitlyAttribute]
internal class LinqToDB.DataProvider.SQLite.SQLiteFactory : object {
    [NullableContextAttribute("1")]
private sealed virtual override IDataProvider LinqToDB.DataProvider.IDataProviderFactory.GetDataProvider(IEnumerable`1<NamedValue> attributes);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class LinqToDB.DataProvider.SQLite.SQLiteHints : object {
    [ExtensionAttribute]
[ExpressionMethodAttribute("IndexedByImpl")]
public static ISQLiteSpecificTable`1<TSource> IndexedByHint(ISQLiteSpecificTable`1<TSource> table, string indexName);
    private static Expression`1<Func`3<ISQLiteSpecificTable`1<TSource>, string, ISQLiteSpecificTable`1<TSource>>> IndexedByImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("NotIndexedImpl")]
public static ISQLiteSpecificTable`1<TSource> NotIndexedHint(ISQLiteSpecificTable`1<TSource> table);
    private static Expression`1<Func`2<ISQLiteSpecificTable`1<TSource>, ISQLiteSpecificTable`1<TSource>>> NotIndexedImpl();
    [ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("SQLite", "1", "LinqToDB.SqlProvider.HintExtensionBuilder")]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
public static ISQLiteSpecificTable`1<TSource> TableHint(ISQLiteSpecificTable`1<TSource> table, string hint);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.DataProvider.SQLite.SQLiteMappingSchema : LockedMappingSchema {
    internal static string DATE_FORMAT_RAW;
    private static string DATE_FORMAT;
    private static string DATETIME0_FORMAT;
    private static string DATETIME1_FORMAT;
    private static string DATETIME2_FORMAT;
    private static string DATETIME3_FORMAT;
    private static Action`2<StringBuilder, int> AppendConversionAction;
    internal static SQLiteMappingSchema Instance;
    private static SQLiteMappingSchema();
    private static void ConvertGuidToSql(StringBuilder stringBuilder, SqlDataType dt, Guid value);
    private static void ConvertBinaryToSql(StringBuilder stringBuilder, Byte[] value);
    private static void ConvertDateTimeToSql(StringBuilder stringBuilder, DateTime value);
    private static void AppendConversion(StringBuilder stringBuilder, int value);
    private static void ConvertStringToSql(StringBuilder stringBuilder, string value);
    private static void ConvertCharToSql(StringBuilder stringBuilder, char value);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class LinqToDB.DataProvider.SQLite.SQLiteOptions : DataProviderOptions`1<SQLiteOptions> {
    [CompilerGeneratedAttribute]
private bool <AlwaysCheckDbNull>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public bool AlwaysCheckDbNull { get; public set; }
    public SQLiteOptions(BulkCopyType BulkCopyType, bool AlwaysCheckDbNull);
    private SQLiteOptions(SQLiteOptions original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public bool get_AlwaysCheckDbNull();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_AlwaysCheckDbNull(bool value);
    protected virtual IdentifierBuilder CreateID(IdentifierBuilder builder);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(SQLiteOptions other);
    public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(SQLiteOptions left, SQLiteOptions right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(SQLiteOptions left, SQLiteOptions right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(DataProviderOptions`1<SQLiteOptions> other);
    [CompilerGeneratedAttribute]
public virtual DataProviderOptions`1<SQLiteOptions> <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(BulkCopyType& BulkCopyType, Boolean& AlwaysCheckDbNull);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.DataProvider.SQLite.SQLiteProviderAdapter : object {
    private static object _systemSyncRoot;
    private static object _msSyncRoot;
    [NullableAttribute("2")]
private static SQLiteProviderAdapter _systemDataSQLite;
    [NullableAttribute("2")]
private static SQLiteProviderAdapter _microsoftDataSQLite;
    public static string SystemDataSQLiteAssemblyName;
    public static string SystemDataSQLiteClientNamespace;
    public static string MicrosoftDataSQLiteAssemblyName;
    public static string MicrosoftDataSQLiteClientNamespace;
    [CompilerGeneratedAttribute]
private Type <ConnectionType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <DataReaderType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ParameterType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <CommandType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <TransactionType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisposeCommandOnError>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportsRowValue>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportsUpdateFrom>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportsDateOnly>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Action <ClearAllPools>k__BackingField;
    private static Version ClearPoolsMinVersionMDS;
    private static Version ClearPoolsMinVersionSDS;
    private static Version RowValueMinVersionMDS;
    private static Version RowValueMinVersionSDS;
    private static Version UpdateFromMinVersionMDS;
    private static Version UpdateFromMinVersionSDS;
    private static Version MinDateOnlyAssemblyVersionMDS;
    public Type ConnectionType { get; }
    public Type DataReaderType { get; }
    public Type ParameterType { get; }
    public Type CommandType { get; }
    public Type TransactionType { get; }
    internal bool DisposeCommandOnError { get; }
    internal bool SupportsRowValue { get; }
    internal bool SupportsUpdateFrom { get; }
    internal bool SupportsDateOnly { get; }
    [NullableAttribute("2")]
public Action ClearAllPools { get; }
    private SQLiteProviderAdapter(Type connectionType, Type dataReaderType, Type parameterType, Type commandType, Type transactionType, bool disposeCommandOnError, bool supportsRowValue, bool supportsUpdateFrom, bool supportsDateOnly, Action clearAllPulls);
    private static SQLiteProviderAdapter();
    [CompilerGeneratedAttribute]
public sealed virtual Type get_ConnectionType();
    [CompilerGeneratedAttribute]
public sealed virtual Type get_DataReaderType();
    [CompilerGeneratedAttribute]
public sealed virtual Type get_ParameterType();
    [CompilerGeneratedAttribute]
public sealed virtual Type get_CommandType();
    [CompilerGeneratedAttribute]
public sealed virtual Type get_TransactionType();
    [CompilerGeneratedAttribute]
internal bool get_DisposeCommandOnError();
    [CompilerGeneratedAttribute]
internal bool get_SupportsRowValue();
    [CompilerGeneratedAttribute]
internal bool get_SupportsUpdateFrom();
    [CompilerGeneratedAttribute]
internal bool get_SupportsDateOnly();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Action get_ClearAllPools();
    private static SQLiteProviderAdapter CreateAdapter(string assemblyName, string clientNamespace, string prefix);
    public static SQLiteProviderAdapter GetInstance(string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.DataProvider.SQLite.SQLiteSchemaProvider : SchemaProviderBase {
    public virtual DatabaseSchema GetSchema(DataConnection dataConnection, GetSchemaOptions options);
    protected virtual List`1<TableInfo> GetTables(DataConnection dataConnection, GetSchemaOptions options);
    protected virtual IReadOnlyCollection`1<PrimaryKeyInfo> GetPrimaryKeys(DataConnection dataConnection, IEnumerable`1<TableSchema> tables, GetSchemaOptions options);
    protected virtual List`1<ColumnInfo> GetColumns(DataConnection dataConnection, GetSchemaOptions options);
    protected virtual IReadOnlyCollection`1<ForeignKeyInfo> GetForeignKeys(DataConnection dataConnection, IEnumerable`1<TableSchema> tables, GetSchemaOptions options);
    protected virtual string GetDatabaseName(DataConnection dbConnection);
    [NullableContextAttribute("2")]
protected virtual DataType GetDataType(string dataType, string columnType, Nullable`1<int> length, Nullable`1<int> precision, Nullable`1<int> scale);
    [NullableContextAttribute("2")]
protected virtual string GetProviderSpecificTypeNamespace();
    [NullableContextAttribute("2")]
protected virtual Type GetSystemType(string dataType, string columnType, DataTypeInfo dataTypeInfo, Nullable`1<int> length, Nullable`1<int> precision, Nullable`1<int> scale, GetSchemaOptions options);
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class LinqToDB.DataProvider.SQLite.SQLiteSpecificTable`1 : DatabaseSpecificTable`1<TSource> {
    [NullableContextAttribute("1")]
public SQLiteSpecificTable`1(ITable`1<TSource> table);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.DataProvider.SQLite.SQLiteSqlBuilder : BasicSqlBuilder {
    protected bool SupportsColumnAliasesInSource { get; }
    public bool IsNestedJoinSupported { get; }
    public SQLiteSqlBuilder(IDataProvider provider, MappingSchema mappingSchema, DataOptions dataOptions, ISqlOptimizer sqlOptimizer, SqlProviderFlags sqlProviderFlags);
    private SQLiteSqlBuilder(BasicSqlBuilder parentBuilder);
    protected virtual ISqlBuilder CreateSqlBuilder();
    protected virtual bool get_SupportsColumnAliasesInSource();
    public virtual int CommandCount(SqlStatement statement);
    protected virtual void BuildCommand(SqlStatement statement, int commandNumber);
    protected virtual string LimitFormat(SelectQuery selectQuery);
    protected virtual string OffsetFormat(SelectQuery selectQuery);
    public virtual bool get_IsNestedJoinSupported();
    public virtual StringBuilder Convert(StringBuilder sb, string value, ConvertType convertType);
    protected virtual void BuildDataTypeFromDataType(SqlDataType type, bool forCreateTable, bool canBeNull);
    protected virtual void BuildCreateTableIdentityAttribute2(SqlField field);
    protected virtual void BuildCreateTablePrimaryKey(SqlCreateTableStatement createTable, string pkName, IEnumerable`1<string> fieldNames);
    public virtual StringBuilder BuildObjectName(StringBuilder sb, SqlObjectName name, ConvertType objectType, bool escape, TableOptions tableOptions, bool withoutSuffix);
    protected virtual void BuildDropTableStatement(SqlDropTableStatement dropTable);
    protected virtual void BuildMergeStatement(SqlMergeStatement merge);
    protected virtual void BuildCreateTableCommand(SqlTable table);
    protected virtual void BuildIsDistinctPredicate(IsDistinct expr);
    protected virtual void BuildSqlValuesTable(SqlValuesTable valuesTable, string alias, Boolean& aliasBuilt);
    protected virtual void BuildTableExtensions(SqlTable table, string alias);
    protected virtual void BuildUpdateTableName(SelectQuery selectQuery, SqlUpdateClause updateClause);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.DataProvider.SQLite.SQLiteSqlOptimizer : BasicSqlOptimizer {
    public bool CanCompareSearchConditions { get; }
    public SQLiteSqlOptimizer(SqlProviderFlags sqlProviderFlags);
    public virtual bool get_CanCompareSearchConditions();
    public virtual SqlStatement TransformStatement(SqlStatement statement, DataOptions dataOptions);
    public virtual ISqlPredicate ConvertSearchStringPredicate(SearchString predicate, ConvertVisitor`1<RunOptimizationContext> visitor);
    public virtual ISqlExpression ConvertExpressionImpl(ISqlExpression expression, ConvertVisitor`1<RunOptimizationContext> visitor);
    public virtual ISqlPredicate ConvertPredicateImpl(ISqlPredicate predicate, ConvertVisitor`1<RunOptimizationContext> visitor);
    private static bool IsDateTime(DbDataType dbDataType);
    private static bool IsDateTime(Type type);
    protected virtual ISqlExpression ConvertConversion(SqlFunction func);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class LinqToDB.DataProvider.SQLite.SQLiteTools : object {
    private static Lazy`1<IDataProvider> _SQLiteClassicDataProvider;
    private static Lazy`1<IDataProvider> _SQLiteMSDataProvider;
    [NullableAttribute("2")]
private static string _detectedProviderName;
    [ObsoleteAttribute("Use SQLiteOptions.Default.AlwaysCheckDbNull instead.")]
public static bool AlwaysCheckDbNull { get; public set; }
    public static string DetectedProviderName { get; }
    [ObsoleteAttribute("Use SQLiteOptions.Default.BulkCopyType instead.")]
public static BulkCopyType DefaultBulkCopyType { get; public set; }
    private static SQLiteTools();
    [ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
public static ISQLiteSpecificTable`1<TSource> AsSQLite(ITable`1<TSource> table);
    public static bool get_AlwaysCheckDbNull();
    public static void set_AlwaysCheckDbNull(bool value);
    internal static IDataProvider ProviderDetector(ConnectionOptions options);
    public static string get_DetectedProviderName();
    private static string DetectProviderName();
    public static IDataProvider GetDataProvider(string providerName);
    public static void ResolveSQLite(string path);
    public static void ResolveSQLite(Assembly assembly);
    public static DataConnection CreateDataConnection(string connectionString, string providerName);
    public static DataConnection CreateDataConnection(DbConnection connection, string providerName);
    public static DataConnection CreateDataConnection(DbTransaction transaction, string providerName);
    public static void CreateDatabase(string databaseName, bool deleteIfExists, string extension);
    public static void DropDatabase(string databaseName);
    [NullableContextAttribute("2")]
public static void ClearAllPools(string provider);
    public static BulkCopyType get_DefaultBulkCopyType();
    public static void set_DefaultBulkCopyType(BulkCopyType value);
}
public interface LinqToDB.DataProvider.SqlServer.ISqlServerExtensions {
}
public interface LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable`1 {
}
public interface LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable`1 {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[PublicAPIAttribute]
public static class LinqToDB.DataProvider.SqlServer.SqlFn : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Func`3<IDataContext, string, IQueryable`1<JsonData>> _generateOpenJsonStringImpl;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Func`4<IDataContext, string, string, IQueryable`1<JsonData>> _generateOpenJsonStringStringImpl;
    [ExpressionAttribute("SqlServer", "@@DBTS")]
public static Byte[] DbTS { get; }
    [ExpressionAttribute("SqlServer", "@@LANGID")]
public static short LangID { get; }
    [ExpressionAttribute("SqlServer", "@@LANGUAGE")]
public static string Language { get; }
    [ExpressionAttribute("SqlServer", "@@LOCK_TIMEOUT")]
public static int LockTimeout { get; }
    [ExpressionAttribute("SqlServer", "@@MAX_CONNECTIONS")]
public static int MaxConnections { get; }
    [CLSCompliantAttribute("False")]
[ExpressionAttribute("SqlServer", "@@MAX_PRECISION")]
public static byte MaxPrecision { get; }
    [ExpressionAttribute("SqlServer", "@@NESTLEVEL")]
[CLSCompliantAttribute("False")]
public static int NestLevel { get; }
    [ExpressionAttribute("SqlServer", "@@OPTIONS")]
public static int Options { get; }
    [NullableAttribute("2")]
[ExpressionAttribute("SqlServer", "@@REMSERVER")]
public static string RemServer { get; }
    [ExpressionAttribute("SqlServer", "@@SERVERNAME")]
public static string ServerName { get; }
    [ExpressionAttribute("SqlServer", "@@SERVICENAME")]
public static string ServiceName { get; }
    [ExpressionAttribute("SqlServer", "@@SPID")]
public static short SpID { get; }
    [ExpressionAttribute("SqlServer", "@@TEXTSIZE")]
public static int TextSize { get; }
    [ExpressionAttribute("SqlServer", "@@VERSION")]
public static string Version { get; }
    [ExpressionAttribute("SqlServer", "@@DATEFIRST")]
public static byte DateFirst { get; }
    [ExpressionAttribute("SqlServer", "CURRENT_TIMESTAMP")]
public static DateTime CurrentTimestamp { get; }
    [ExpressionAttribute("SqlServer", "@@CONNECTIONS")]
public static int Connections { get; }
    [ExpressionAttribute("SqlServer", "@@CPU_BUSY")]
public static int CpuBusy { get; }
    [ExpressionAttribute("SqlServer", "@@IDLE")]
public static int Idle { get; }
    [ExpressionAttribute("SqlServer", "@@IO_BUSY")]
public static int IOBusy { get; }
    [ExpressionAttribute("SqlServer", "@@PACK_SENT")]
public static int PackSent { get; }
    [ExpressionAttribute("SqlServer", "@@PACKET_ERRORS")]
public static int PacketErrors { get; }
    [ExpressionAttribute("SqlServer", "@@TIMETICKS")]
public static int TimeTicks { get; }
    [ExpressionAttribute("SqlServer", "@@TOTAL_ERRORS")]
public static int TotalErrors { get; }
    [ExpressionAttribute("SqlServer", "@@TOTAL_READ")]
public static int TotalRead { get; }
    [ExpressionAttribute("SqlServer", "@@TOTAL_WRITE")]
public static int TotalWrite { get; }
    [ExpressionAttribute("SqlServer", "@@IDENTITY")]
public static Nullable`1<decimal> Identity { get; }
    [ExpressionAttribute("SqlServer", "@@PACK_RECEIVED")]
public static int PackReceived { get; }
    [ExpressionAttribute("SqlServer", "@@TRANCOUNT")]
public static int TransactionCount { get; }
    [ExpressionAttribute("SqlServer", "@@ROWCOUNT")]
public static int RowCount { get; }
    public static Byte[] get_DbTS();
    public static short get_LangID();
    public static string get_Language();
    public static int get_LockTimeout();
    public static int get_MaxConnections();
    public static byte get_MaxPrecision();
    public static int get_NestLevel();
    public static int get_Options();
    [NullableContextAttribute("2")]
public static string get_RemServer();
    public static string get_ServerName();
    public static string get_ServiceName();
    public static short get_SpID();
    public static int get_TextSize();
    public static string get_Version();
    [ExtensionAttribute("SqlServer", "CAST({expression} as {data_type})")]
public static T Cast(object expression, SqlType`1<T> data_type);
    [ExtensionAttribute("SqlServer", "CAST({expression} as {data_type})")]
public static T Cast(object expression, Func`1<SqlType`1<T>> data_type);
    [NullableContextAttribute("2")]
[ExpressionAttribute("SqlServer", "CAST({0} as {1})")]
public static T Cast(object expression);
    [ExtensionAttribute("SqlServer", "CONVERT({data_type}, {expression})")]
public static T Convert(SqlType`1<T> data_type, object expression);
    [ExtensionAttribute("SqlServer", "CONVERT({data_type}, {expression})")]
public static T Convert(Func`1<SqlType`1<T>> data_type, object expression);
    [NullableContextAttribute("2")]
[ExpressionAttribute("SqlServer", "CONVERT({1}, {0})")]
public static T Convert(object expression);
    [ExtensionAttribute("SqlServer", "CONVERT({data_type}, {expression}, {style})")]
public static T Convert(SqlType`1<T> data_type, object expression, int style);
    [ExtensionAttribute("SqlServer", "CONVERT({data_type}, {expression}, {style})")]
public static T Convert(Func`1<SqlType`1<T>> data_type, object expression, int style);
    [NullableContextAttribute("2")]
[ExpressionAttribute("SqlServer", "CONVERT({2}, {0}, {1})")]
public static T Convert(object expression, int style);
    [ExtensionAttribute("SqlServer", "PARSE({string_value} as {data_type})")]
public static T Parse(string string_value, SqlType`1<T> data_type);
    [ExtensionAttribute("SqlServer", "PARSE({string_value} as {data_type})")]
public static T Parse(string string_value, Func`1<SqlType`1<T>> data_type);
    [ExpressionAttribute("SqlServer", "PARSE({0} as {1})")]
public static T Parse(string string_value);
    [ExtensionAttribute("SqlServer", "PARSE({string_value} as {data_type} USING {culture})")]
public static T Parse(string string_value, SqlType`1<T> data_type, string culture);
    [ExtensionAttribute("SqlServer", "PARSE({string_value} as {data_type} USING {culture})")]
public static T Parse(string string_value, Func`1<SqlType`1<T>> data_type, string culture);
    [ExpressionAttribute("SqlServer", "PARSE({0} as {2} USING {1})")]
public static T Parse(string string_value, string culture);
    [ExtensionAttribute("SqlServer", "TRY_CAST({expression} as {data_type})")]
public static T TryCast(object expression, SqlType`1<T> data_type);
    [ExtensionAttribute("SqlServer", "TRY_CAST({expression} as {data_type})")]
public static T TryCast(object expression, Func`1<SqlType`1<T>> data_type);
    [NullableContextAttribute("2")]
[ExpressionAttribute("SqlServer", "TRY_CAST({0} as {1})")]
public static T TryCast(object expression);
    [ExtensionAttribute("SqlServer", "TRY_CONVERT({data_type}, {expression})")]
public static T TryConvert(SqlType`1<T> data_type, object expression);
    [ExtensionAttribute("SqlServer", "TRY_CONVERT({data_type}, {expression})")]
public static T TryConvert(Func`1<SqlType`1<T>> data_type, object expression);
    [NullableContextAttribute("2")]
[ExpressionAttribute("SqlServer", "TRY_CONVERT({1}, {0})")]
public static T TryConvert(object expression);
    [ExtensionAttribute("SqlServer", "TRY_CONVERT({data_type}, {expression}, {style})")]
public static T TryConvert(SqlType`1<T> data_type, object expression, int style);
    [ExtensionAttribute("SqlServer", "TRY_CONVERT({data_type}, {expression}, {style})")]
public static T TryConvert(Func`1<SqlType`1<T>> data_type, object expression, int style);
    [NullableContextAttribute("2")]
[ExpressionAttribute("SqlServer", "TRY_CONVERT({2}, {0}, {1})")]
public static T TryConvert(object expression, int style);
    [ExtensionAttribute("SqlServer", "TRY_PARSE({string_value} as {data_type})")]
public static T TryParse(string string_value, SqlType`1<T> data_type);
    [ExtensionAttribute("SqlServer", "TRY_PARSE({string_value} as {data_type})")]
public static T TryParse(string string_value, Func`1<SqlType`1<T>> data_type);
    [ExpressionAttribute("SqlServer", "TRY_PARSE({0} as {1})")]
public static T TryParse(string string_value);
    [ExtensionAttribute("SqlServer", "TRY_PARSE({string_value} as {data_type} USING {culture})")]
public static T TryParse(string string_value, SqlType`1<T> data_type, string culture);
    [ExtensionAttribute("SqlServer", "TRY_PARSE({string_value} as {data_type} USING {culture})")]
public static T TryParse(string string_value, Func`1<SqlType`1<T>> data_type, string culture);
    [ExpressionAttribute("SqlServer", "TRY_PARSE({0} as {2} USING {1})")]
public static T TryParse(string string_value, string culture);
    [FunctionAttribute("SqlServer", "DATALENGTH", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
public static Nullable`1<int> DataLength(T expression);
    [FunctionAttribute("SqlServer", "DATALENGTH", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
public static Nullable`1<long> DataLengthBig(T expression);
    [FunctionAttribute("SqlServer", "IDENT_CURRENT")]
public static decimal IdentityCurrent(string table_or_view);
    [FunctionAttribute("SqlServer", "IDENT_INCR")]
public static decimal IdentityIncrement(string table_or_view);
    [FunctionAttribute("SqlServer", "IDENT_SEED")]
public static decimal IdentitySeed(string table_or_view);
    public static byte get_DateFirst();
    public static DateTime get_CurrentTimestamp();
    [FunctionAttribute("SqlServer", "CURRENT_TIMEZONE")]
public static string CurrentTimezone();
    [FunctionAttribute("SqlServer", "CURRENT_TIMEZONE_ID")]
public static string CurrentTimezoneID();
    [NullableContextAttribute("2")]
[ExtensionAttribute("SqlServer", "DATEADD({datepart}, {number}, {date})")]
public static Nullable`1<DateTime> DateAdd(DateParts datepart, Nullable`1<int> number, string date);
    [ExtensionAttribute("SqlServer", "DATEADD({datepart}, {number}, {date})")]
public static Nullable`1<DateTime> DateAdd(DateParts datepart, Nullable`1<int> number, Nullable`1<DateTime> date);
    [ExtensionAttribute("SqlServer", "DATEADD({datepart}, {number}, {date})")]
public static Nullable`1<DateTimeOffset> DateAdd(DateParts datepart, Nullable`1<int> number, Nullable`1<DateTimeOffset> date);
    [ExtensionAttribute("SqlServer", "DATEADD({datepart}, {number}, {date})")]
public static Nullable`1<TimeSpan> DateAdd(DateParts datepart, Nullable`1<int> number, Nullable`1<TimeSpan> date);
    [NullableContextAttribute("2")]
[ExtensionAttribute("SqlServer", "DATEDIFF({datepart}, {startdate}, {enddate})")]
public static Nullable`1<int> DateDiff(DateParts datepart, string startdate, string enddate);
    [ExtensionAttribute("SqlServer", "DATEDIFF({datepart}, {startdate}, {enddate})")]
public static Nullable`1<int> DateDiff(DateParts datepart, Nullable`1<DateTime> startdate, Nullable`1<DateTime> enddate);
    [ExtensionAttribute("SqlServer", "DATEDIFF({datepart}, {startdate}, {enddate})")]
public static Nullable`1<int> DateDiff(DateParts datepart, Nullable`1<DateTimeOffset> startdate, Nullable`1<DateTimeOffset> enddate);
    [ExtensionAttribute("SqlServer", "DATEDIFF({datepart}, {startdate}, {enddate})")]
public static Nullable`1<int> DateDiff(DateParts datepart, Nullable`1<TimeSpan> startdate, Nullable`1<TimeSpan> enddate);
    [NullableContextAttribute("2")]
[ExtensionAttribute("SqlServer", "DATEDIFF_BIG({datepart}, {startdate}, {enddate})")]
public static Nullable`1<long> DateDiffBig(DateParts datepart, string startdate, string enddate);
    [ExtensionAttribute("SqlServer", "DATEDIFF_BIG({datepart}, {startdate}, {enddate})")]
public static Nullable`1<long> DateDiffBig(DateParts datepart, Nullable`1<DateTime> startdate, Nullable`1<DateTime> enddate);
    [ExtensionAttribute("SqlServer", "DATEDIFF_BIG({datepart}, {startdate}, {enddate})")]
public static Nullable`1<long> DateDiffBig(DateParts datepart, Nullable`1<DateTimeOffset> startdate, Nullable`1<DateTimeOffset> enddate);
    [ExtensionAttribute("SqlServer", "DATEDIFF_BIG({datepart}, {startdate}, {enddate})")]
public static Nullable`1<long> DateDiffBig(DateParts datepart, Nullable`1<TimeSpan> startdate, Nullable`1<TimeSpan> enddate);
    [FunctionAttribute("SqlServer", "TIMEFROMPARTS")]
public static Nullable`1<TimeSpan> TimeFromParts(Nullable`1<int> hour, Nullable`1<int> minute, Nullable`1<int> seconds, Nullable`1<int> fractions, Nullable`1<int> precision);
    [ExpressionAttribute("SqlServer", "TIMEFROMPARTS({0}, {1}, {2}, 0, 0)")]
public static Nullable`1<TimeSpan> TimeFromParts(Nullable`1<int> hour, Nullable`1<int> minute, Nullable`1<int> seconds);
    [FunctionAttribute("SqlServer", "DATEFROMPARTS")]
public static Nullable`1<DateTime> DateFromParts(Nullable`1<int> year, Nullable`1<int> month, Nullable`1<int> day);
    [FunctionAttribute("SqlServer", "SMALLDATETIMEFROMPARTS")]
public static Nullable`1<DateTime> SmallDateTimeFromParts(Nullable`1<int> year, Nullable`1<int> month, Nullable`1<int> day, Nullable`1<int> hour, Nullable`1<int> minute);
    [FunctionAttribute("SqlServer", "DATETIMEFROMPARTS")]
public static Nullable`1<DateTime> DateTimeFromParts(Nullable`1<int> year, Nullable`1<int> month, Nullable`1<int> day, Nullable`1<int> hour, Nullable`1<int> minute, Nullable`1<int> seconds, Nullable`1<int> milliseconds);
    [ExpressionAttribute("SqlServer", "DATETIMEFROMPARTS({0}, {1}, {2}, {3}, {4}, {5}, 0)")]
public static Nullable`1<DateTime> DateTimeFromParts(Nullable`1<int> year, Nullable`1<int> month, Nullable`1<int> day, Nullable`1<int> hour, Nullable`1<int> minute, Nullable`1<int> seconds);
    [ExpressionAttribute("SqlServer", "DATETIMEFROMPARTS({0}, {1}, {2}, 0, 0, 0, 0)")]
public static Nullable`1<DateTime> DateTimeFromParts(Nullable`1<int> year, Nullable`1<int> month, Nullable`1<int> day);
    [FunctionAttribute("SqlServer", "DATETIME2FROMPARTS")]
public static Nullable`1<DateTime> DateTime2FromParts(Nullable`1<int> year, Nullable`1<int> month, Nullable`1<int> day, Nullable`1<int> hour, Nullable`1<int> minute, Nullable`1<int> seconds, Nullable`1<int> fractions, Nullable`1<int> precision);
    [ExpressionAttribute("SqlServer", "DATETIME2FROMPARTS({0}, {1}, {2}, {3}, {4}, {5}, 0, 0)")]
public static Nullable`1<DateTime> DateTime2FromParts(Nullable`1<int> year, Nullable`1<int> month, Nullable`1<int> day, Nullable`1<int> hour, Nullable`1<int> minute, Nullable`1<int> seconds);
    [ExpressionAttribute("SqlServer", "DATETIME2FROMPARTS({0}, {1}, {2}, 0, 0, 0, 0, 0)")]
public static Nullable`1<DateTime> DateTime2FromParts(Nullable`1<int> year, Nullable`1<int> month, Nullable`1<int> day);
    [FunctionAttribute("SqlServer", "DATETIMEOFFSETFROMPARTS")]
public static Nullable`1<DateTimeOffset> DateTimeOffsetFromParts(Nullable`1<int> year, Nullable`1<int> month, Nullable`1<int> day, Nullable`1<int> hour, Nullable`1<int> minute, Nullable`1<int> seconds, Nullable`1<int> fractions, Nullable`1<int> hour_offset, Nullable`1<int> minute_offset, Nullable`1<int> precision);
    [ExpressionAttribute("SqlServer", "DATETIMEOFFSETFROMPARTS({0}, {1}, {2}, {3}, {4}, {5}, 0, 0, 0, 0)")]
public static Nullable`1<DateTimeOffset> DateTimeOffsetFromParts(Nullable`1<int> year, Nullable`1<int> month, Nullable`1<int> day, Nullable`1<int> hour, Nullable`1<int> minute, Nullable`1<int> seconds);
    [ExpressionAttribute("SqlServer", "DATETIMEOFFSETFROMPARTS({0}, {1}, {2}, 0, 0, 0, 0, 0, 0, 0)")]
public static Nullable`1<DateTimeOffset> DateTimeOffsetFromParts(Nullable`1<int> year, Nullable`1<int> month, Nullable`1<int> day);
    [NullableContextAttribute("2")]
[ExtensionAttribute("SqlServer", "DATENAME({datepart}, {date})")]
public static string DateName(DateParts datepart, string date);
    [NullableContextAttribute("2")]
[ExtensionAttribute("SqlServer", "DATENAME({datepart}, {date})")]
public static string DateName(DateParts datepart, Nullable`1<DateTime> date);
    [NullableContextAttribute("2")]
[ExtensionAttribute("SqlServer", "DATENAME({datepart}, {date})")]
public static string DateName(DateParts datepart, Nullable`1<DateTimeOffset> date);
    [NullableContextAttribute("2")]
[ExtensionAttribute("SqlServer", "DATENAME({datepart}, {date})")]
public static string DateName(DateParts datepart, Nullable`1<TimeSpan> date);
    [NullableContextAttribute("2")]
[ExtensionAttribute("SqlServer", "DATEPART({datepart}, {date})")]
public static Nullable`1<int> DatePart(DateParts datepart, string date);
    [ExtensionAttribute("SqlServer", "DATEPART({datepart}, {date})")]
public static Nullable`1<int> DatePart(DateParts datepart, Nullable`1<DateTime> date);
    [ExtensionAttribute("SqlServer", "DATEPART({datepart}, {date})")]
public static Nullable`1<int> DatePart(DateParts datepart, Nullable`1<DateTimeOffset> date);
    [ExtensionAttribute("SqlServer", "DATEPART({datepart}, {date})")]
public static Nullable`1<int> DatePart(DateParts datepart, Nullable`1<TimeSpan> date);
    [NullableContextAttribute("2")]
[FunctionAttribute("SqlServer", "DAY")]
public static Nullable`1<int> Day(string date);
    [FunctionAttribute("SqlServer", "DAY")]
public static Nullable`1<int> Day(Nullable`1<DateTime> date);
    [FunctionAttribute("SqlServer", "DAY")]
public static Nullable`1<int> Day(Nullable`1<DateTimeOffset> date);
    [NullableContextAttribute("2")]
[FunctionAttribute("SqlServer", "EOMONTH")]
public static Nullable`1<DateTime> EndOfMonth(string start_date);
    [NullableContextAttribute("2")]
[FunctionAttribute("SqlServer", "EOMONTH")]
public static Nullable`1<DateTime> EndOfMonth(string start_date, Nullable`1<int> month_to_add);
    [FunctionAttribute("SqlServer", "EOMONTH")]
public static Nullable`1<DateTime> EndOfMonth(Nullable`1<DateTime> start_date);
    [FunctionAttribute("SqlServer", "EOMONTH")]
public static Nullable`1<DateTime> EndOfMonth(Nullable`1<DateTime> start_date, Nullable`1<int> month_to_add);
    [FunctionAttribute("SqlServer", "GETDATE")]
public static DateTime GetDate();
    [FunctionAttribute("SqlServer", "GETUTCDATE")]
public static DateTime GetUtcDate();
    [FunctionAttribute("SqlServer", "SYSDATETIME")]
public static DateTime SysDatetime();
    [FunctionAttribute("SqlServer", "SYSDATETIMEOFFSET")]
public static DateTimeOffset SysDatetimeOffset();
    [FunctionAttribute("SqlServer", "SYSUTCDATETIME")]
public static DateTime SysUtcDatetime();
    [FunctionAttribute("SqlServer", "ISDATE")]
public static int IsDate(string expression);
    [NullableContextAttribute("2")]
[FunctionAttribute("SqlServer", "MONTH")]
public static Nullable`1<int> Month(string date);
    [FunctionAttribute("SqlServer", "MONTH")]
public static Nullable`1<int> Month(Nullable`1<DateTime> date);
    [FunctionAttribute("SqlServer", "MONTH")]
public static Nullable`1<int> Month(Nullable`1<DateTimeOffset> date);
    [NullableContextAttribute("2")]
[FunctionAttribute("SqlServer", "YEAR")]
public static Nullable`1<int> Year(string date);
    [FunctionAttribute("SqlServer", "YEAR")]
public static Nullable`1<int> Year(Nullable`1<DateTime> date);
    [FunctionAttribute("SqlServer", "YEAR")]
public static Nullable`1<int> Year(Nullable`1<DateTimeOffset> date);
    [FunctionAttribute("SqlServer", "SWITCHOFFSET")]
public static Nullable`1<DateTimeOffset> SwitchOffset(Nullable`1<DateTimeOffset> datetimeoffset_expression, string timezoneoffset_expression);
    [FunctionAttribute("SqlServer", "TODATETIMEOFFSET")]
public static Nullable`1<DateTimeOffset> ToDatetimeOffset(Nullable`1<DateTimeOffset> datetime_expression, string timezoneoffset_expression);
    [NullableContextAttribute("2")]
[FunctionAttribute("SqlServer", "ISJSON")]
public static Nullable`1<bool> IsJson(string expression);
    [NullableContextAttribute("2")]
[FunctionAttribute("SqlServer", "JSON_VALUE")]
public static string JsonValue(string expression, string path);
    [NullableContextAttribute("2")]
[FunctionAttribute("SqlServer", "JSON_QUERY")]
public static string JsonQuery(string expression, string path);
    [FunctionAttribute("SqlServer", "JSON_MODIFY")]
public static string JsonModify(string expression, string path, string newValue);
    [TableExpressionAttribute("OPENJSON({2}) {1}")]
public static IQueryable`1<JsonData> OpenJson(string json);
    [TableExpressionAttribute("OPENJSON({2}, {3}) {1}")]
public static IQueryable`1<JsonData> OpenJson(string json, string path);
    [ExtensionAttribute]
[ExpressionMethodAttribute("GenerateOpenJsonStringImpl")]
public static IQueryable`1<JsonData> OpenJson(IDataContext dc, string json);
    private static Expression`1<Func`3<IDataContext, string, IQueryable`1<JsonData>>> GenerateOpenJsonStringImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("GenerateOpenJsonStringStringImpl")]
public static IQueryable`1<JsonData> OpenJson(IDataContext dc, string json, string path);
    private static Expression`1<Func`4<IDataContext, string, string, IQueryable`1<JsonData>>> GenerateOpenJsonStringStringImpl();
    [FunctionAttribute("SqlServer", "ABS")]
public static T Abs(T numeric_expression);
    [FunctionAttribute("SqlServer", "ACOS")]
public static T Acos(T float_expression);
    [FunctionAttribute("SqlServer", "ASIN")]
public static T Asin(T float_expression);
    [FunctionAttribute("SqlServer", "ATAN")]
public static T Atan(T float_expression);
    [FunctionAttribute("SqlServer", "ATN2")]
public static T Atn2(T float_expression, T float_expression2);
    [FunctionAttribute("SqlServer", "CEILING")]
public static T Ceiling(T numeric_expression);
    [FunctionAttribute("SqlServer", "COS")]
public static T Cos(T float_expression);
    [FunctionAttribute("SqlServer", "COT")]
public static T Cot(T float_expression);
    [FunctionAttribute("SqlServer", "DEGREES")]
public static T Degrees(T numeric_expression);
    [FunctionAttribute("SqlServer", "EXP")]
public static T Exp(T float_expression);
    [FunctionAttribute("SqlServer", "FLOOR")]
public static T Floor(T numeric_expression);
    [FunctionAttribute("SqlServer", "LOG")]
public static T Log(T float_expression);
    [FunctionAttribute("SqlServer", "LOG")]
public static T Log(T float_expression, int base);
    [FunctionAttribute("SqlServer", "LOG")]
public static T Log10(T float_expression);
    [FunctionAttribute("SqlServer", "PI")]
public static double PI();
    [FunctionAttribute("SqlServer", "POWER")]
public static T Power(T float_expression, T y);
    [FunctionAttribute("SqlServer", "SIGN")]
public static T Sign(T numeric_expression);
    [FunctionAttribute("SqlServer", "RAND")]
public static double Random();
    [FunctionAttribute("SqlServer", "RAND")]
public static double Random(int seed);
    [FunctionAttribute("SqlServer", "ROUND")]
public static T Round(T numeric_expression, int length, int function);
    [FunctionAttribute("SqlServer", "ROUND")]
public static T Round(T numeric_expression, int length);
    [FunctionAttribute("SqlServer", "RADIANS")]
public static T Radians(T numeric_expression);
    [FunctionAttribute("SqlServer", "SIN")]
public static T Sin(T float_expression, T y);
    [FunctionAttribute("SqlServer", "SQRT")]
public static T Sqrt(T float_expression);
    [FunctionAttribute("SqlServer", "SQUARE")]
public static T Square(T float_expression);
    [FunctionAttribute("SqlServer", "TAN")]
public static T Tan(T float_expression);
    [FunctionAttribute("SqlServer", "CHOOSE")]
public static T Choose(Nullable`1<int> index, T[] values);
    [FunctionAttribute("SqlServer", "IIF")]
public static T Iif(Nullable`1<bool> boolean_expression, T true_value, T false_value);
    [FunctionAttribute("SqlServer", "APP_NAME")]
public static string AppName();
    [FunctionAttribute("SqlServer", "COL_LENGTH")]
public static Nullable`1<short> ColumnLength(string table, string column);
    [NullableContextAttribute("2")]
[FunctionAttribute("SqlServer", "COL_NAME")]
public static string ColumnName(Nullable`1<int> table_id, int column_id);
    [ExtensionAttribute("SqlServer", "COLUMNPROPERTY")]
public static Nullable`1<int> ColumnProperty(Nullable`1<int> id, string column, ColumnPropertyName property);
    [ExtensionAttribute("SqlServer", "DATABASEPROPERTYEX")]
public static object DatabasePropertyEx(string database, DatabasePropertyName property);
    [FunctionAttribute("SqlServer", "DB_ID")]
public static Nullable`1<int> DbID(string database_name);
    [FunctionAttribute("SqlServer", "DB_ID")]
public static int DbID();
    [NullableContextAttribute("2")]
[FunctionAttribute("SqlServer", "DB_NAME")]
public static string DbName(int database_id);
    [FunctionAttribute("SqlServer", "DB_NAME")]
public static string DbName();
    [NullableContextAttribute("2")]
[FunctionAttribute("SqlServer", "FILE_ID")]
public static Nullable`1<short> FileID(string file_name);
    [NullableContextAttribute("2")]
[FunctionAttribute("SqlServer", "FILE_IDEX")]
public static Nullable`1<int> FileIDEx(string file_name);
    [NullableContextAttribute("2")]
[FunctionAttribute("SqlServer", "FILE_NAME")]
public static string FileName(Nullable`1<int> file_id);
    [NullableContextAttribute("2")]
[FunctionAttribute("SqlServer", "FILEGROUP_ID")]
public static Nullable`1<int> FileGroupID(string filegroup_name);
    [NullableContextAttribute("2")]
[FunctionAttribute("SqlServer", "FILEGROUP_Name")]
public static string FileGroupName(Nullable`1<short> filegroup_id);
    [NullableContextAttribute("2")]
[ExtensionAttribute("SqlServer", "FILEGROUPPROPERTY")]
public static Nullable`1<int> FileGroupProperty(string filegroup_name, FileGroupPropertyName property);
    [NullableContextAttribute("2")]
[ExtensionAttribute("SqlServer", "FILEPROPERTY")]
public static Nullable`1<int> FileProperty(string file_name, FilePropertyName property);
    [NullableContextAttribute("2")]
[ExtensionAttribute("SqlServer", "FILEPROPERTYEX")]
public static object FilePropertyEx(string file_name, FilePropertyExName property);
    [NullableContextAttribute("2")]
[ExtensionAttribute("SqlServer", "FULLTEXTCATALOGPROPERTY")]
public static Nullable`1<int> FullTextCatalogProperty(string catalog_name, FullTextCatalogPropertyName property);
    [ExtensionAttribute("SqlServer", "FULLTEXTSERVICEPROPERTY")]
public static Nullable`1<int> FullTextServiceProperty(FullTextServicePropertyName property);
    [FunctionAttribute("SqlServer", "INDEX_COL")]
public static string IndexColumn(string table_or_view, int index_id, int key_id);
    [ExtensionAttribute("SqlServer", "INDEXKEY_PROPERTY")]
public static Nullable`1<int> IndexKeyProperty(Nullable`1<int> object_ID, Nullable`1<int> index_ID, Nullable`1<int> key_ID, IndexKeyPropertyName property);
    [NullableContextAttribute("2")]
[ExtensionAttribute("SqlServer", "INDEXPROPERTY")]
public static Nullable`1<int> IndexProperty(Nullable`1<int> object_ID, string index_or_statistics_name, IndexPropertyName property);
    [ExtensionAttribute("SqlServer", "NEXT VALUE FOR {sequence_name}")]
public static object NextValueFor(string sequence_name);
    [ExtensionAttribute("SqlServer", "NEXT VALUE FOR {sequence_name} OVER ({order_by_clause})")]
public static INeedsOrderByOnly`1<object> NextValueForOver(string sequence_name);
    [NullableContextAttribute("2")]
[FunctionAttribute("SqlServer", "OBJECT_DEFINITION")]
public static string ObjectDefinition(Nullable`1<int> object_id);
    [FunctionAttribute("SqlServer", "OBJECT_ID")]
public static Nullable`1<int> ObjectID(string object_name);
    [FunctionAttribute("SqlServer", "OBJECT_ID")]
public static Nullable`1<int> ObjectID(string object_name, string object_type);
    [NullableContextAttribute("2")]
[FunctionAttribute("SqlServer", "OBJECT_NAME")]
public static string ObjectName(Nullable`1<int> object_id);
    [NullableContextAttribute("2")]
[FunctionAttribute("SqlServer", "OBJECT_NAME")]
public static string ObjectName(Nullable`1<int> object_id, Nullable`1<int> database_id);
    [NullableContextAttribute("2")]
[FunctionAttribute("SqlServer", "OBJECT_SCHEMA_NAME")]
public static string ObjectSchemaName(Nullable`1<int> object_id);
    [NullableContextAttribute("2")]
[FunctionAttribute("SqlServer", "OBJECT_SCHEMA_NAME")]
public static string ObjectSchemaName(Nullable`1<int> object_id, Nullable`1<int> database_id);
    [ExtensionAttribute("SqlServer", "OBJECTPROPERTY")]
public static Nullable`1<int> ObjectProperty(Nullable`1<int> id, ObjectPropertyName property);
    [NullableContextAttribute("2")]
[ExtensionAttribute("SqlServer", "OBJECTPROPERTYEX")]
public static object ObjectPropertyEx(Nullable`1<int> id, ObjectPropertyExName property);
    [NullableContextAttribute("2")]
[FunctionAttribute("SqlServer", "ORIGINAL_DB_NAME")]
public static string OriginalDbName();
    [NullableContextAttribute("2")]
[FunctionAttribute("SqlServer", "PARSENAME")]
public static string ParseName(string object_name, int object_piece);
    [FunctionAttribute("SqlServer", "SCHEMA_ID")]
public static Nullable`1<int> SchemaID();
    [FunctionAttribute("SqlServer", "SCHEMA_ID")]
public static Nullable`1<int> SchemaID(string schema_name);
    [NullableContextAttribute("2")]
[FunctionAttribute("SqlServer", "SCHEMA_NAME")]
public static string SchemaName();
    [NullableContextAttribute("2")]
[FunctionAttribute("SqlServer", "SCHEMA_NAME")]
public static string SchemaName(Nullable`1<int> schema_id);
    [FunctionAttribute("SqlServer", "SCOPE_IDENTITY")]
public static decimal ScopeIdentity();
    [NullableContextAttribute("2")]
[ExtensionAttribute("SqlServer", "SERVERPROPERTY")]
public static object ServerProperty(ServerPropertyName property);
    [FunctionAttribute("SqlServer", "STATS_DATE")]
public static Nullable`1<DateTime> StatsDate(Nullable`1<int> object_id, Nullable`1<int> stats_id);
    [FunctionAttribute("SqlServer", "TYPE_ID")]
public static Nullable`1<int> TypeID(string type_name);
    [NullableContextAttribute("2")]
[FunctionAttribute("SqlServer", "TYPE_NAME")]
public static string TypeName(Nullable`1<int> type_id);
    [NullableContextAttribute("2")]
[ExtensionAttribute("SqlServer", "TYPEPROPERTY")]
public static Nullable`1<int> TypeProperty(string type, TypePropertyName property);
    [NullableContextAttribute("2")]
[FunctionAttribute("SqlServer", "PUBLISHINGSERVERNAME")]
public static string PublishingServerName();
    [FunctionAttribute("SqlServer", "ASCII")]
public static int Ascii(char character_expression);
    [NullableContextAttribute("2")]
[FunctionAttribute("SqlServer", "ASCII")]
public static Nullable`1<int> Ascii(string character_expression);
    [FunctionAttribute("SqlServer", "CHAR")]
public static Nullable`1<char> Char(Nullable`1<int> integer_expression);
    [NullableContextAttribute("2")]
[FunctionAttribute("SqlServer", "CHARINDEX")]
public static Nullable`1<int> CharIndex(string expressionToFind, string expressionToSearch);
    [NullableContextAttribute("2")]
[FunctionAttribute("SqlServer", "CHARINDEX")]
public static Nullable`1<long> CharIndexBig(string expressionToFind, string expressionToSearch);
    [NullableContextAttribute("2")]
[FunctionAttribute("SqlServer", "CHARINDEX")]
public static Nullable`1<int> CharIndex(string expressionToFind, string expressionToSearch, Nullable`1<int> start_location);
    [NullableContextAttribute("2")]
[FunctionAttribute("SqlServer", "CHARINDEX")]
public static Nullable`1<long> CharIndex(string expressionToFind, string expressionToSearch, Nullable`1<long> start_location);
    [NullableContextAttribute("2")]
[FunctionAttribute("SqlServer", "CHARINDEX")]
public static Nullable`1<long> CharIndexBig(string expressionToFind, string expressionToSearch, Nullable`1<int> start_location);
    [NullableContextAttribute("2")]
[FunctionAttribute("SqlServer", "CONCAT")]
public static string Concat(String[] string_value);
    [NullableContextAttribute("2")]
[FunctionAttribute("SqlServer", "CONCAT_WS")]
public static string ConcatWithSeparator(string separator, String[] arguments);
    [NullableContextAttribute("2")]
[FunctionAttribute("SqlServer", "DIFFERENCE")]
public static Nullable`1<int> Difference(string character_expression1, string character_expression2);
    [NullableContextAttribute("2")]
[FunctionAttribute("SqlServer", "FORMAT")]
public static string Format(object value, string format);
    [NullableContextAttribute("2")]
[FunctionAttribute("SqlServer", "LEFT")]
public static string Left(string character_expression, Nullable`1<int> integer_expression);
    [NullableContextAttribute("2")]
[FunctionAttribute("SqlServer", "LEN")]
public static Nullable`1<int> Len(string character_expression);
    [NullableContextAttribute("2")]
[FunctionAttribute("SqlServer", "LEN")]
public static Nullable`1<long> LenBig(string character_expression);
    [NullableContextAttribute("2")]
[FunctionAttribute("SqlServer", "LOWER")]
public static string Lower(string character_expression);
    [NullableContextAttribute("2")]
[FunctionAttribute("SqlServer", "LTRIM")]
public static string LeftTrim(string character_expression);
    [FunctionAttribute("SqlServer", "NCHAR")]
public static Nullable`1<char> NChar(Nullable`1<int> integer_expression);
    [NullableContextAttribute("2")]
[FunctionAttribute("SqlServer", "PATINDEX")]
public static Nullable`1<int> PatIndex(string pattern, string expression);
    [NullableContextAttribute("2")]
[FunctionAttribute("SqlServer", "PATINDEX")]
public static Nullable`1<long> PatIndexBig(string pattern, string expression);
    [NullableContextAttribute("2")]
[FunctionAttribute("SqlServer", "QUOTENAME")]
public static string QuoteName(string character_string);
    [NullableContextAttribute("2")]
[FunctionAttribute("SqlServer", "QUOTENAME")]
public static string QuoteName(string character_string, string quote_character);
    [NullableContextAttribute("2")]
[FunctionAttribute("SqlServer", "REPLACE")]
public static string Replace(string string_expression, string string_pattern, string string_replacement);
    [NullableContextAttribute("2")]
[FunctionAttribute("SqlServer", "REPLICATE")]
public static string Replicate(string string_expression, Nullable`1<int> integer_expression);
    [NullableContextAttribute("2")]
[FunctionAttribute("SqlServer", "REPLICATE")]
public static string Replicate(Byte[] string_expression, Nullable`1<int> integer_expression);
    [NullableContextAttribute("2")]
[FunctionAttribute("SqlServer", "REVERSE")]
public static string Reverse(string string_expression);
    [NullableContextAttribute("2")]
[FunctionAttribute("SqlServer", "RIGHT")]
public static string Right(string character_expression, Nullable`1<int> integer_expression);
    [NullableContextAttribute("2")]
[FunctionAttribute("SqlServer", "RTRIM")]
public static string RightTrim(string character_expression);
    [NullableContextAttribute("2")]
[FunctionAttribute("SqlServer", "SOUNDEX")]
public static string SoundEx(string character_expression);
    [NullableContextAttribute("2")]
[FunctionAttribute("SqlServer", "SPACE")]
public static string Space(Nullable`1<int> integer_expression);
    [NullableContextAttribute("2")]
[FunctionAttribute("SqlServer", "STR")]
public static string Str(T float_expression);
    [NullableContextAttribute("2")]
[FunctionAttribute("SqlServer", "STR")]
public static string Str(T float_expression, int length);
    [NullableContextAttribute("2")]
[FunctionAttribute("SqlServer", "STR")]
public static string Str(T float_expression, int length, int decimal);
    [NullableContextAttribute("2")]
[FunctionAttribute("SqlServer", "STRING_ESCAPE")]
public static string StringEscape(string text, string type);
    [NullableContextAttribute("2")]
[FunctionAttribute("SqlServer", "STUFF")]
public static string Stuff(string character_expression, Nullable`1<int> start, Nullable`1<int> length, string replaceWith_expression);
    [NullableContextAttribute("2")]
[FunctionAttribute("SqlServer", "SUBSTRING")]
public static string Substring(string expression, Nullable`1<int> start, Nullable`1<int> length);
    [NullableContextAttribute("2")]
[FunctionAttribute("SqlServer", "TRANSLATE")]
public static string Translate(string inputString, string characters, string translations);
    [NullableContextAttribute("2")]
[FunctionAttribute("SqlServer", "TRIM")]
public static string Trim(string string);
    [NullableContextAttribute("2")]
[ExpressionAttribute("SqlServer", "TRIM({0} FROM {1})")]
public static string Trim(string characters, string string);
    [FunctionAttribute("SqlServer", "UNICODE")]
public static Nullable`1<int> Unicode(string ncharacter_expression);
    [NullableContextAttribute("2")]
[FunctionAttribute("SqlServer", "UPPER")]
public static string Upper(string character_expression);
    [NullableContextAttribute("2")]
[ExtensionAttribute("SqlServer", "{string} COLLATE {collation_name}")]
public static string Collate(string string, string collation_name);
    public static int get_Connections();
    public static int get_CpuBusy();
    public static int get_Idle();
    public static int get_IOBusy();
    public static int get_PackSent();
    public static int get_PacketErrors();
    public static int get_TimeTicks();
    public static int get_TotalErrors();
    public static int get_TotalRead();
    public static int get_TotalWrite();
    public static Nullable`1<decimal> get_Identity();
    public static int get_PackReceived();
    public static int get_TransactionCount();
    [ExpressionAttribute("SqlServer", "BINARY_CHECKSUM(*)")]
public static int BinaryCheckSum();
    [FunctionAttribute("SqlServer", "BINARY_CHECKSUM")]
public static int BinaryCheckSum(Object[] expressions);
    [ExpressionAttribute("SqlServer", "CHECKSUM(*)")]
public static int CheckSum();
    [FunctionAttribute("SqlServer", "CHECKSUM")]
public static int CheckSum(Object[] expressions);
    [FunctionAttribute("SqlServer", "COMPRESS")]
public static Byte[] Compress(string expression);
    [FunctionAttribute("SqlServer", "COMPRESS")]
public static Byte[] Compress(Byte[] expression);
    [NullableContextAttribute("2")]
[ExtensionAttribute("SqlServer", "CONNECTIONPROPERTY")]
public static object ConnectionProperty(ConnectionPropertyName property);
    [FunctionAttribute("SqlServer", "CURRENT_REQUEST_ID")]
public static short CurrentRequestID();
    [FunctionAttribute("SqlServer", "CURRENT_TRANSACTION_ID")]
public static long CurrentTransactionID();
    [FunctionAttribute("SqlServer", "DECOMPRESS")]
public static Byte[] Decompress(Byte[] expression);
    [NullableContextAttribute("2")]
[FunctionAttribute("SqlServer", "FORMATMESSAGE")]
public static string FormatMessage(int msg_number, Object[] param_values);
    [FunctionAttribute("SqlServer", "FORMATMESSAGE")]
public static string FormatMessage(string msg_string, Object[] param_values);
    [FunctionAttribute("SqlServer", "GETANSINULL")]
public static Nullable`1<int> GetAnsiNull(string database);
    [FunctionAttribute("SqlServer", "GETANSINULL")]
public static Nullable`1<int> GetAnsiNull();
    [FunctionAttribute("SqlServer", "HOST_ID")]
public static string HostID();
    [FunctionAttribute("SqlServer", "HOST_NAME")]
public static string HostName();
    [FunctionAttribute("SqlServer", "ISNULL")]
public static T IsNull(T check_expression, T replacement_value);
    [FunctionAttribute("SqlServer", "ISNUMERIC")]
public static int IsNumeric(T expression);
    [FunctionAttribute("SqlServer", "MIN_ACTIVE_ROWVERSION")]
public static Byte[] MinActiveRowVersion();
    [FunctionAttribute("SqlServer", "NEWID")]
public static Guid NewID();
    public static int get_RowCount();
    [FunctionAttribute("SqlServer", "ROWCOUNT_BIG")]
public static long RowCountBig();
    [FunctionAttribute("SqlServer", "XACT_STATE")]
public static short XactState();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.DataProvider.SqlServer.SqlServer2005SqlBuilder : SqlServerSqlBuilder {
    protected bool IsValuesSyntaxSupported { get; }
    public string Name { get; }
    public SqlServer2005SqlBuilder(IDataProvider provider, MappingSchema mappingSchema, DataOptions dataOptions, ISqlOptimizer sqlOptimizer, SqlProviderFlags sqlProviderFlags);
    private SqlServer2005SqlBuilder(BasicSqlBuilder parentBuilder);
    protected virtual ISqlBuilder CreateSqlBuilder();
    protected virtual bool get_IsValuesSyntaxSupported();
    protected virtual void BuildDataTypeFromDataType(SqlDataType type, bool forCreateTable, bool canBeNull);
    public virtual string get_Name();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.DataProvider.SqlServer.SqlServer2005SqlOptimizer : SqlServerSqlOptimizer {
    public SqlServer2005SqlOptimizer(SqlProviderFlags sqlProviderFlags);
    public virtual SqlStatement TransformStatement(SqlStatement statement, DataOptions dataOptions);
    protected virtual ISqlExpression ConvertFunction(SqlFunction func);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.DataProvider.SqlServer.SqlServer2008SqlBuilder : SqlServerSqlBuilder {
    public string Name { get; }
    public SqlServer2008SqlBuilder(IDataProvider provider, MappingSchema mappingSchema, DataOptions dataOptions, ISqlOptimizer sqlOptimizer, SqlProviderFlags sqlProviderFlags);
    private SqlServer2008SqlBuilder(BasicSqlBuilder parentBuilder);
    protected virtual ISqlBuilder CreateSqlBuilder();
    protected virtual void BuildInsertOrUpdateQuery(SqlInsertOrUpdateStatement insertOrUpdate);
    public virtual string get_Name();
    protected virtual void BuildMergeInto(SqlMergeStatement merge);
    protected virtual void BuildMergeOperationDeleteBySource(SqlMergeOperationClause operation);
    protected virtual void BuildMergeTerminator(SqlMergeStatement merge);
    protected virtual void BuildMergeOperationUpdateBySource(SqlMergeOperationClause operation);
    protected virtual void BuildMergeStatement(SqlMergeStatement merge);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.DataProvider.SqlServer.SqlServer2008SqlOptimizer : SqlServerSqlOptimizer {
    public SqlServer2008SqlOptimizer(SqlProviderFlags sqlProviderFlags);
    public virtual SqlStatement TransformStatement(SqlStatement statement, DataOptions dataOptions);
    protected virtual ISqlExpression ConvertFunction(SqlFunction func);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.DataProvider.SqlServer.SqlServer2012SqlBuilder : SqlServerSqlBuilder {
    protected bool OffsetFirst { get; }
    public string Name { get; }
    public SqlServer2012SqlBuilder(IDataProvider provider, MappingSchema mappingSchema, DataOptions dataOptions, ISqlOptimizer sqlOptimizer, SqlProviderFlags sqlProviderFlags);
    protected SqlServer2012SqlBuilder(BasicSqlBuilder parentBuilder);
    protected virtual ISqlBuilder CreateSqlBuilder();
    protected virtual string LimitFormat(SelectQuery selectQuery);
    protected virtual string OffsetFormat(SelectQuery selectQuery);
    protected virtual bool get_OffsetFirst();
    protected virtual void BuildInsertOrUpdateQuery(SqlInsertOrUpdateStatement insertOrUpdate);
    public virtual string get_Name();
    protected virtual void BuildMergeInto(SqlMergeStatement merge);
    protected virtual void BuildMergeOperationDeleteBySource(SqlMergeOperationClause operation);
    protected virtual void BuildMergeTerminator(SqlMergeStatement merge);
    protected virtual void BuildMergeOperationUpdateBySource(SqlMergeOperationClause operation);
    protected virtual void BuildMergeStatement(SqlMergeStatement merge);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.DataProvider.SqlServer.SqlServer2012SqlOptimizer : SqlServerSqlOptimizer {
    public SqlServer2012SqlOptimizer(SqlProviderFlags sqlProviderFlags);
    protected SqlServer2012SqlOptimizer(SqlProviderFlags sqlProviderFlags, SqlServerVersion version);
    public virtual SqlStatement TransformStatement(SqlStatement statement, DataOptions dataOptions);
    protected SqlStatement AddOrderByForSkip(SqlStatement statement);
    protected virtual ISqlExpression ConvertFunction(SqlFunction func);
    private static SqlFunction ConvertCase(bool canBeNull, Type systemType, ISqlExpression[] parameters, int start);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.DataProvider.SqlServer.SqlServer2014SqlBuilder : SqlServer2012SqlBuilder {
    public string Name { get; }
    public SqlServer2014SqlBuilder(IDataProvider provider, MappingSchema mappingSchema, DataOptions dataOptions, ISqlOptimizer sqlOptimizer, SqlProviderFlags sqlProviderFlags);
    protected SqlServer2014SqlBuilder(BasicSqlBuilder parentBuilder);
    protected virtual ISqlBuilder CreateSqlBuilder();
    public virtual string get_Name();
}
internal class LinqToDB.DataProvider.SqlServer.SqlServer2014SqlOptimizer : SqlServer2012SqlOptimizer {
    [NullableContextAttribute("1")]
public SqlServer2014SqlOptimizer(SqlProviderFlags sqlProviderFlags);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.DataProvider.SqlServer.SqlServer2016SqlBuilder : SqlServer2014SqlBuilder {
    internal bool ConvertDateTimeAsLiteral;
    public string Name { get; }
    public SqlServer2016SqlBuilder(IDataProvider provider, MappingSchema mappingSchema, DataOptions dataOptions, ISqlOptimizer sqlOptimizer, SqlProviderFlags sqlProviderFlags);
    protected SqlServer2016SqlBuilder(BasicSqlBuilder parentBuilder);
    protected virtual ISqlBuilder CreateSqlBuilder();
    protected virtual void BuildDropTableStatement(SqlDropTableStatement dropTable);
    public virtual string get_Name();
    protected virtual bool TryConvertParameterToSql(SqlParameterValue paramValue);
}
internal class LinqToDB.DataProvider.SqlServer.SqlServer2016SqlOptimizer : SqlServer2012SqlOptimizer {
    [NullableContextAttribute("1")]
public SqlServer2016SqlOptimizer(SqlProviderFlags sqlProviderFlags);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.DataProvider.SqlServer.SqlServer2017SqlBuilder : SqlServer2016SqlBuilder {
    public string Name { get; }
    public SqlServer2017SqlBuilder(IDataProvider provider, MappingSchema mappingSchema, DataOptions dataOptions, ISqlOptimizer sqlOptimizer, SqlProviderFlags sqlProviderFlags);
    protected SqlServer2017SqlBuilder(BasicSqlBuilder parentBuilder);
    protected virtual ISqlBuilder CreateSqlBuilder();
    public virtual string get_Name();
}
internal class LinqToDB.DataProvider.SqlServer.SqlServer2017SqlOptimizer : SqlServer2012SqlOptimizer {
    [NullableContextAttribute("1")]
public SqlServer2017SqlOptimizer(SqlProviderFlags sqlProviderFlags);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.DataProvider.SqlServer.SqlServer2019SqlBuilder : SqlServer2017SqlBuilder {
    public string Name { get; }
    public SqlServer2019SqlBuilder(IDataProvider provider, MappingSchema mappingSchema, DataOptions dataOptions, ISqlOptimizer sqlOptimizer, SqlProviderFlags sqlProviderFlags);
    protected SqlServer2019SqlBuilder(BasicSqlBuilder parentBuilder);
    protected virtual ISqlBuilder CreateSqlBuilder();
    public virtual string get_Name();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.DataProvider.SqlServer.SqlServer2019SqlOptimizer : SqlServer2012SqlOptimizer {
    public SqlServer2019SqlOptimizer(SqlProviderFlags sqlProviderFlags);
    protected SqlServer2019SqlOptimizer(SqlProviderFlags sqlProviderFlags, SqlServerVersion version);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.DataProvider.SqlServer.SqlServer2022SqlBuilder : SqlServer2019SqlBuilder {
    public string Name { get; }
    public SqlServer2022SqlBuilder(IDataProvider provider, MappingSchema mappingSchema, DataOptions dataOptions, ISqlOptimizer sqlOptimizer, SqlProviderFlags sqlProviderFlags);
    private SqlServer2022SqlBuilder(BasicSqlBuilder parentBuilder);
    protected virtual ISqlBuilder CreateSqlBuilder();
    public virtual string get_Name();
    protected virtual void BuildIsDistinctPredicate(IsDistinct expr);
}
internal class LinqToDB.DataProvider.SqlServer.SqlServer2022SqlOptimizer : SqlServer2019SqlOptimizer {
    [NullableContextAttribute("1")]
public SqlServer2022SqlOptimizer(SqlProviderFlags sqlProviderFlags);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.DataProvider.SqlServer.SqlServerBulkCopy : BasicBulkCopy {
    private SqlServerDataProvider _provider;
    protected int MaxParameters { get; }
    protected int MaxSqlLength { get; }
    public SqlServerBulkCopy(SqlServerDataProvider provider);
    protected virtual int get_MaxParameters();
    protected virtual int get_MaxSqlLength();
    protected virtual BulkCopyRowsCopied ProviderSpecificCopy(ITable`1<T> table, DataOptions options, IEnumerable`1<T> source);
    protected virtual Task`1<BulkCopyRowsCopied> ProviderSpecificCopyAsync(ITable`1<T> table, DataOptions options, IEnumerable`1<T> source, CancellationToken cancellationToken);
    protected virtual Task`1<BulkCopyRowsCopied> ProviderSpecificCopyAsync(ITable`1<T> table, DataOptions options, IAsyncEnumerable`1<T> source, CancellationToken cancellationToken);
    private Nullable`1<ProviderConnections> TryGetProviderConnections(ITable`1<T> table);
    [AsyncStateMachineAttribute("LinqToDB.DataProvider.SqlServer.SqlServerBulkCopy/<ProviderSpecificCopyInternalAsync>d__10`1")]
private Task`1<BulkCopyRowsCopied> ProviderSpecificCopyInternalAsync(ProviderConnections providerConnections, ITable`1<T> table, BulkCopyOptions options, Func`2<List`1<ColumnDescriptor>, BulkCopyReader`1<T>> createDataReader, CancellationToken cancellationToken);
    private BulkCopyRowsCopied ProviderSpecificCopyInternal(ProviderConnections providerConnections, ITable`1<T> table, BulkCopyOptions options, Func`2<List`1<ColumnDescriptor>, BulkCopyReader`1<T>> createDataReader);
    protected virtual BulkCopyRowsCopied MultipleRowsCopy(ITable`1<T> table, DataOptions options, IEnumerable`1<T> source);
    [AsyncStateMachineAttribute("LinqToDB.DataProvider.SqlServer.SqlServerBulkCopy/<MultipleRowsCopyAsync>d__13`1")]
protected virtual Task`1<BulkCopyRowsCopied> MultipleRowsCopyAsync(ITable`1<T> table, DataOptions options, IEnumerable`1<T> source, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("LinqToDB.DataProvider.SqlServer.SqlServerBulkCopy/<MultipleRowsCopyAsync>d__14`1")]
protected virtual Task`1<BulkCopyRowsCopied> MultipleRowsCopyAsync(ITable`1<T> table, DataOptions options, IAsyncEnumerable`1<T> source, CancellationToken cancellationToken);
}
public static class LinqToDB.DataProvider.SqlServer.SqlServerConfiguration : object {
    [ObsoleteAttribute("Use SqlServerOptions.Default.GenerateScopeIdentity instead.")]
public static bool GenerateScopeIdentity { get; public set; }
    public static bool get_GenerateScopeIdentity();
    public static void set_GenerateScopeIdentity(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class LinqToDB.DataProvider.SqlServer.SqlServerDataProvider : DynamicDataProviderBase`1<SqlServerProviderAdapter> {
    [CompilerGeneratedAttribute]
private SqlServerVersion <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlServerProvider <Provider>k__BackingField;
    private ISqlOptimizer _sqlOptimizer;
    private static ConcurrentDictionary`2<string, bool> _marsFlags;
    private ConcurrentDictionary`2<Type, string> _udtTypeNames;
    private ConcurrentDictionary`2<string, Type> _udtTypes;
    [NullableAttribute("2")]
private SqlServerBulkCopy _bulkCopy;
    public SqlServerVersion Version { get; }
    public SqlServerProvider Provider { get; }
    public TableOptions SupportedTableOptions { get; }
    protected SqlServerDataProvider(string name, SqlServerVersion version);
    protected SqlServerDataProvider(string name, SqlServerVersion version, SqlServerProvider provider);
    private static SqlServerDataProvider();
    [CompilerGeneratedAttribute]
public SqlServerVersion get_Version();
    [CompilerGeneratedAttribute]
public SqlServerProvider get_Provider();
    public virtual TableOptions get_SupportedTableOptions();
    public virtual ISqlBuilder CreateSqlBuilder(MappingSchema mappingSchema, DataOptions dataOptions);
    public virtual ISqlOptimizer GetSqlOptimizer(DataOptions dataOptions);
    public virtual ISchemaProvider GetSchemaProvider();
    public virtual object GetConnectionInfo(DataConnection dataConnection, string parameterName);
    public virtual void SetParameter(DataConnection dataConnection, DbParameter parameter, string name, DbDataType dataType, object value);
    protected virtual void SetParameterType(DataConnection dataConnection, DbParameter parameter, DbDataType dataType);
    public void AddUdtType(Type type, string udtName);
    public void AddUdtType(Type type, string udtName, object defaultValue, DataType dataType);
    public void AddUdtType(string udtName, T defaultValue, DataType dataType);
    internal Type GetUdtTypeByName(string udtName);
    public virtual BulkCopyRowsCopied BulkCopy(DataOptions options, ITable`1<T> table, IEnumerable`1<T> source);
    public virtual Task`1<BulkCopyRowsCopied> BulkCopyAsync(DataOptions options, ITable`1<T> table, IEnumerable`1<T> source, CancellationToken cancellationToken);
    public virtual Task`1<BulkCopyRowsCopied> BulkCopyAsync(DataOptions options, ITable`1<T> table, IAsyncEnumerable`1<T> source, CancellationToken cancellationToken);
}
internal class LinqToDB.DataProvider.SqlServer.SqlServerDataProvider2005MicrosoftDataSqlClient : SqlServerDataProvider {
}
internal class LinqToDB.DataProvider.SqlServer.SqlServerDataProvider2005SystemDataSqlClient : SqlServerDataProvider {
}
internal class LinqToDB.DataProvider.SqlServer.SqlServerDataProvider2008MicrosoftDataSqlClient : SqlServerDataProvider {
}
internal class LinqToDB.DataProvider.SqlServer.SqlServerDataProvider2008SystemDataSqlClient : SqlServerDataProvider {
}
internal class LinqToDB.DataProvider.SqlServer.SqlServerDataProvider2012MicrosoftDataSqlClient : SqlServerDataProvider {
}
internal class LinqToDB.DataProvider.SqlServer.SqlServerDataProvider2012SystemDataSqlClient : SqlServerDataProvider {
}
internal class LinqToDB.DataProvider.SqlServer.SqlServerDataProvider2014MicrosoftDataSqlClient : SqlServerDataProvider {
}
internal class LinqToDB.DataProvider.SqlServer.SqlServerDataProvider2014SystemDataSqlClient : SqlServerDataProvider {
}
internal class LinqToDB.DataProvider.SqlServer.SqlServerDataProvider2016MicrosoftDataSqlClient : SqlServerDataProvider {
}
internal class LinqToDB.DataProvider.SqlServer.SqlServerDataProvider2016SystemDataSqlClient : SqlServerDataProvider {
}
internal class LinqToDB.DataProvider.SqlServer.SqlServerDataProvider2017MicrosoftDataSqlClient : SqlServerDataProvider {
}
internal class LinqToDB.DataProvider.SqlServer.SqlServerDataProvider2017SystemDataSqlClient : SqlServerDataProvider {
}
internal class LinqToDB.DataProvider.SqlServer.SqlServerDataProvider2019MicrosoftDataSqlClient : SqlServerDataProvider {
}
internal class LinqToDB.DataProvider.SqlServer.SqlServerDataProvider2019SystemDataSqlClient : SqlServerDataProvider {
}
internal class LinqToDB.DataProvider.SqlServer.SqlServerDataProvider2022MicrosoftDataSqlClient : SqlServerDataProvider {
}
internal class LinqToDB.DataProvider.SqlServer.SqlServerDataProvider2022SystemDataSqlClient : SqlServerDataProvider {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class LinqToDB.DataProvider.SqlServer.SqlServerExtensions : object {
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static ISqlServerExtensions SqlServer(ISqlExtension ext);
    [ExtensionAttribute]
[ExpressionMethodAttribute("FreeTextTableImpl1")]
public static IQueryable`1<FreeTextKey`1<TKey>> FreeTextTable(ISqlServerExtensions ext, ITable`1<TTable> table, string term);
    private static Expression`1<Func`4<ISqlServerExtensions, ITable`1<TTable>, string, IQueryable`1<FreeTextKey`1<TKey>>>> FreeTextTableImpl1();
    [ExtensionAttribute]
[ExpressionMethodAttribute("FreeTextTableImpl2")]
public static IQueryable`1<FreeTextKey`1<TKey>> FreeTextTable(ISqlServerExtensions ext, ITable`1<TTable> table, string term, int top);
    private static Expression`1<Func`5<ISqlServerExtensions, ITable`1<TTable>, string, int, IQueryable`1<FreeTextKey`1<TKey>>>> FreeTextTableImpl2();
    [ExtensionAttribute]
[ExpressionMethodAttribute("FreeTextTableImpl3")]
public static IQueryable`1<FreeTextKey`1<TKey>> FreeTextTableWithLanguage(ISqlServerExtensions ext, ITable`1<TTable> table, string term, string language);
    private static Expression`1<Func`5<ISqlServerExtensions, ITable`1<TTable>, string, string, IQueryable`1<FreeTextKey`1<TKey>>>> FreeTextTableImpl3();
    [ExtensionAttribute]
[ExpressionMethodAttribute("FreeTextTableImpl4")]
public static IQueryable`1<FreeTextKey`1<TKey>> FreeTextTableWithLanguage(ISqlServerExtensions ext, ITable`1<TTable> table, string term, string language, int top);
    private static Expression`1<Func`6<ISqlServerExtensions, ITable`1<TTable>, string, string, int, IQueryable`1<FreeTextKey`1<TKey>>>> FreeTextTableImpl4();
    [ExtensionAttribute]
[ExpressionMethodAttribute("FreeTextTableImpl5")]
public static IQueryable`1<FreeTextKey`1<TKey>> FreeTextTableWithLanguage(ISqlServerExtensions ext, ITable`1<TTable> table, string term, int language, int top);
    private static Expression`1<Func`6<ISqlServerExtensions, ITable`1<TTable>, string, int, int, IQueryable`1<FreeTextKey`1<TKey>>>> FreeTextTableImpl5();
    [ExtensionAttribute]
[ExpressionMethodAttribute("FreeTextTableImpl6")]
public static IQueryable`1<FreeTextKey`1<TKey>> FreeTextTableWithLanguage(ISqlServerExtensions ext, ITable`1<TTable> table, string term, int language);
    private static Expression`1<Func`5<ISqlServerExtensions, ITable`1<TTable>, string, int, IQueryable`1<FreeTextKey`1<TKey>>>> FreeTextTableImpl6();
    [ExtensionAttribute]
[ExpressionMethodAttribute("FreeTextTableImpl7")]
public static IQueryable`1<FreeTextKey`1<TKey>> FreeTextTable(ISqlServerExtensions ext, ITable`1<TTable> table, Expression`1<Func`2<TTable, object>> columns, string term);
    private static Expression`1<Func`5<ISqlServerExtensions, ITable`1<TTable>, Expression`1<Func`2<TTable, object>>, string, IQueryable`1<FreeTextKey`1<TKey>>>> FreeTextTableImpl7();
    [ExtensionAttribute]
[ExpressionMethodAttribute("FreeTextTableImpl8")]
public static IQueryable`1<FreeTextKey`1<TKey>> FreeTextTable(ISqlServerExtensions ext, ITable`1<TTable> table, Expression`1<Func`2<TTable, object>> columns, string term, int top);
    private static Expression`1<Func`6<ISqlServerExtensions, ITable`1<TTable>, Expression`1<Func`2<TTable, object>>, string, int, IQueryable`1<FreeTextKey`1<TKey>>>> FreeTextTableImpl8();
    [ExtensionAttribute]
[ExpressionMethodAttribute("FreeTextTableImpl9")]
public static IQueryable`1<FreeTextKey`1<TKey>> FreeTextTableWithLanguage(ISqlServerExtensions ext, ITable`1<TTable> table, Expression`1<Func`2<TTable, object>> columns, string term, string language);
    private static Expression`1<Func`6<ISqlServerExtensions, ITable`1<TTable>, Expression`1<Func`2<TTable, object>>, string, string, IQueryable`1<FreeTextKey`1<TKey>>>> FreeTextTableImpl9();
    [ExtensionAttribute]
[ExpressionMethodAttribute("FreeTextTableImpl10")]
public static IQueryable`1<FreeTextKey`1<TKey>> FreeTextTableWithLanguage(ISqlServerExtensions ext, ITable`1<TTable> table, Expression`1<Func`2<TTable, object>> columns, string term, string language, int top);
    private static Expression`1<Func`7<ISqlServerExtensions, ITable`1<TTable>, Expression`1<Func`2<TTable, object>>, string, string, int, IQueryable`1<FreeTextKey`1<TKey>>>> FreeTextTableImpl10();
    [ExtensionAttribute]
[ExpressionMethodAttribute("FreeTextTableImpl11")]
public static IQueryable`1<FreeTextKey`1<TKey>> FreeTextTableWithLanguage(ISqlServerExtensions ext, ITable`1<TTable> table, Expression`1<Func`2<TTable, object>> columns, string term, int language, int top);
    private static Expression`1<Func`7<ISqlServerExtensions, ITable`1<TTable>, Expression`1<Func`2<TTable, object>>, string, int, int, IQueryable`1<FreeTextKey`1<TKey>>>> FreeTextTableImpl11();
    [ExtensionAttribute]
[ExpressionMethodAttribute("FreeTextTableImpl12")]
public static IQueryable`1<FreeTextKey`1<TKey>> FreeTextTableWithLanguage(ISqlServerExtensions ext, ITable`1<TTable> table, Expression`1<Func`2<TTable, object>> columns, string term, int language);
    private static Expression`1<Func`6<ISqlServerExtensions, ITable`1<TTable>, Expression`1<Func`2<TTable, object>>, string, int, IQueryable`1<FreeTextKey`1<TKey>>>> FreeTextTableImpl12();
    [ExtensionAttribute]
[ExpressionMethodAttribute("ContainsTableImpl1")]
public static IQueryable`1<FreeTextKey`1<TKey>> ContainsTable(ISqlServerExtensions ext, ITable`1<TTable> table, string search);
    private static Expression`1<Func`4<ISqlServerExtensions, ITable`1<TTable>, string, IQueryable`1<FreeTextKey`1<TKey>>>> ContainsTableImpl1();
    [ExtensionAttribute]
[ExpressionMethodAttribute("ContainsTableImpl2")]
public static IQueryable`1<FreeTextKey`1<TKey>> ContainsTable(ISqlServerExtensions ext, ITable`1<TTable> table, string search, int top);
    private static Expression`1<Func`5<ISqlServerExtensions, ITable`1<TTable>, string, int, IQueryable`1<FreeTextKey`1<TKey>>>> ContainsTableImpl2();
    [ExtensionAttribute]
[ExpressionMethodAttribute("ContainsTableImpl3")]
public static IQueryable`1<FreeTextKey`1<TKey>> ContainsTableWithLanguage(ISqlServerExtensions ext, ITable`1<TTable> table, string search, string language);
    private static Expression`1<Func`5<ISqlServerExtensions, ITable`1<TTable>, string, string, IQueryable`1<FreeTextKey`1<TKey>>>> ContainsTableImpl3();
    [ExtensionAttribute]
[ExpressionMethodAttribute("ContainsTableImpl4")]
public static IQueryable`1<FreeTextKey`1<TKey>> ContainsTableWithLanguage(ISqlServerExtensions ext, ITable`1<TTable> table, string search, string language, int top);
    private static Expression`1<Func`6<ISqlServerExtensions, ITable`1<TTable>, string, string, int, IQueryable`1<FreeTextKey`1<TKey>>>> ContainsTableImpl4();
    [ExtensionAttribute]
[ExpressionMethodAttribute("ContainsTableImpl5")]
public static IQueryable`1<FreeTextKey`1<TKey>> ContainsTableWithLanguage(ISqlServerExtensions ext, ITable`1<TTable> table, string search, int language, int top);
    private static Expression`1<Func`6<ISqlServerExtensions, ITable`1<TTable>, string, int, int, IQueryable`1<FreeTextKey`1<TKey>>>> ContainsTableImpl5();
    [ExtensionAttribute]
[ExpressionMethodAttribute("ContainsTableImpl6")]
public static IQueryable`1<FreeTextKey`1<TKey>> ContainsTableWithLanguage(ISqlServerExtensions ext, ITable`1<TTable> table, string search, int language);
    private static Expression`1<Func`5<ISqlServerExtensions, ITable`1<TTable>, string, int, IQueryable`1<FreeTextKey`1<TKey>>>> ContainsTableImpl6();
    [ExtensionAttribute]
[ExpressionMethodAttribute("ContainsTableImpl7")]
public static IQueryable`1<FreeTextKey`1<TKey>> ContainsTable(ISqlServerExtensions ext, ITable`1<TTable> table, Expression`1<Func`2<TTable, object>> columns, string search);
    private static Expression`1<Func`5<ISqlServerExtensions, ITable`1<TTable>, Expression`1<Func`2<TTable, object>>, string, IQueryable`1<FreeTextKey`1<TKey>>>> ContainsTableImpl7();
    [ExtensionAttribute]
[ExpressionMethodAttribute("ContainsTableImpl8")]
public static IQueryable`1<FreeTextKey`1<TKey>> ContainsTable(ISqlServerExtensions ext, ITable`1<TTable> table, Expression`1<Func`2<TTable, object>> columns, string search, int top);
    private static Expression`1<Func`6<ISqlServerExtensions, ITable`1<TTable>, Expression`1<Func`2<TTable, object>>, string, int, IQueryable`1<FreeTextKey`1<TKey>>>> ContainsTableImpl8();
    [ExtensionAttribute]
[ExpressionMethodAttribute("ContainsTableImpl9")]
public static IQueryable`1<FreeTextKey`1<TKey>> ContainsTableWithLanguage(ISqlServerExtensions ext, ITable`1<TTable> table, Expression`1<Func`2<TTable, object>> columns, string search, string language, int top);
    private static Expression`1<Func`7<ISqlServerExtensions, ITable`1<TTable>, Expression`1<Func`2<TTable, object>>, string, string, int, IQueryable`1<FreeTextKey`1<TKey>>>> ContainsTableImpl9();
    [ExtensionAttribute]
[ExpressionMethodAttribute("ContainsTableImpl10")]
public static IQueryable`1<FreeTextKey`1<TKey>> ContainsTableWithLanguage(ISqlServerExtensions ext, ITable`1<TTable> table, Expression`1<Func`2<TTable, object>> columns, string search, string language);
    private static Expression`1<Func`6<ISqlServerExtensions, ITable`1<TTable>, Expression`1<Func`2<TTable, object>>, string, string, IQueryable`1<FreeTextKey`1<TKey>>>> ContainsTableImpl10();
    [ExtensionAttribute]
[ExpressionMethodAttribute("ContainsTableImpl11")]
public static IQueryable`1<FreeTextKey`1<TKey>> ContainsTableWithLanguage(ISqlServerExtensions ext, ITable`1<TTable> table, Expression`1<Func`2<TTable, object>> columns, string search, int language, int top);
    private static Expression`1<Func`7<ISqlServerExtensions, ITable`1<TTable>, Expression`1<Func`2<TTable, object>>, string, int, int, IQueryable`1<FreeTextKey`1<TKey>>>> ContainsTableImpl11();
    [ExtensionAttribute]
[ExpressionMethodAttribute("ContainsTableImpl12")]
public static IQueryable`1<FreeTextKey`1<TKey>> ContainsTableWithLanguage(ISqlServerExtensions ext, ITable`1<TTable> table, Expression`1<Func`2<TTable, object>> columns, string search, int language);
    private static Expression`1<Func`6<ISqlServerExtensions, ITable`1<TTable>, Expression`1<Func`2<TTable, object>>, string, int, IQueryable`1<FreeTextKey`1<TKey>>>> ContainsTableImpl12();
    [ExtensionAttribute]
[ExtensionAttribute("FREETEXT(({tableOrColumns, ', '}), {term})")]
public static bool FreeText(ISqlServerExtensions ext, string term, Object[] tableOrColumns);
    [ExtensionAttribute]
[ExtensionAttribute("FREETEXT(({tableOrColumns, ', '}), {term}, LANGUAGE {language})")]
public static bool FreeTextWithLanguage(ISqlServerExtensions ext, string term, string language, Object[] tableOrColumns);
    [ExtensionAttribute]
[ExtensionAttribute("FREETEXT(({tableOrColumns, ', '}), {term}, LANGUAGE {language})")]
public static bool FreeTextWithLanguage(ISqlServerExtensions ext, string term, int language, Object[] tableOrColumns);
    [ExtensionAttribute]
[ExtensionAttribute("CONTAINS(({tableOrColumns, ', '}), {search})")]
public static bool Contains(ISqlServerExtensions ext, string search, Object[] tableOrColumns);
    [ExtensionAttribute]
[ExtensionAttribute("CONTAINS(({tableOrColumns, ', '}), {search}, LANGUAGE {language})")]
public static bool ContainsWithLanguage(ISqlServerExtensions ext, string search, string language, Object[] tableOrColumns);
    [ExtensionAttribute]
[ExtensionAttribute("CONTAINS(({tableOrColumns, ', '}), {search}, LANGUAGE {language})")]
public static bool ContainsWithLanguage(ISqlServerExtensions ext, string search, int language, Object[] tableOrColumns);
    [ExtensionAttribute]
[ExpressionMethodAttribute("ContainsPropertyImpl1")]
public static bool ContainsProperty(ISqlServerExtensions ext, object column, string property, string search);
    private static Expression`1<Func`5<ISqlServerExtensions, object, string, string, bool>> ContainsPropertyImpl1();
    [ExtensionAttribute]
[ExpressionMethodAttribute("ContainsPropertyImpl2")]
public static bool ContainsPropertyWithLanguage(ISqlServerExtensions ext, object column, string property, string search, string language);
    private static Expression`1<Func`6<ISqlServerExtensions, object, string, string, string, bool>> ContainsPropertyImpl2();
    [ExtensionAttribute]
[ExpressionMethodAttribute("ContainsPropertyImpl3")]
public static bool ContainsPropertyWithLanguage(ISqlServerExtensions ext, object column, string property, string search, int language);
    private static Expression`1<Func`6<ISqlServerExtensions, object, string, string, int, bool>> ContainsPropertyImpl3();
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[ExtensionAttribute("ISNULL({value}, {replacementValue})")]
public static T IsNull(ISqlServerExtensions ext, T value, T replacementValue);
}
[UsedImplicitlyAttribute]
internal class LinqToDB.DataProvider.SqlServer.SqlServerFactory : object {
    [NullableContextAttribute("1")]
private sealed virtual override IDataProvider LinqToDB.DataProvider.IDataProviderFactory.GetDataProvider(IEnumerable`1<NamedValue> attributes);
}
[ExtensionAttribute]
public static class LinqToDB.DataProvider.SqlServer.SqlServerHints : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[ExpressionMethodAttribute("WithIndexImpl")]
public static ISqlServerSpecificTable`1<TSource> WithIndex(ISqlServerSpecificTable`1<TSource> table, string indexName);
    [NullableContextAttribute("1")]
private static Expression`1<Func`3<ISqlServerSpecificTable`1<TSource>, string, ISqlServerSpecificTable`1<TSource>>> WithIndexImpl();
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[ExpressionMethodAttribute("WithIndex2Impl")]
public static ISqlServerSpecificTable`1<TSource> WithIndex(ISqlServerSpecificTable`1<TSource> table, String[] indexNames);
    [NullableContextAttribute("1")]
private static Expression`1<Func`3<ISqlServerSpecificTable`1<TSource>, String[], ISqlServerSpecificTable`1<TSource>>> WithIndex2Impl();
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("SqlServer", "1", "LinqToDB.DataProvider.SqlServer.SqlServerHints/WithForceSeekExtensionBuilder")]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
public static ISqlServerSpecificTable`1<TSource> WithForceSeek(ISqlServerSpecificTable`1<TSource> table, string indexName, Expression`1[] columns);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[ExpressionMethodAttribute("WithSpatialWindowMaxCellsImpl")]
public static ISqlServerSpecificTable`1<TSource> WithSpatialWindowMaxCells(ISqlServerSpecificTable`1<TSource> table, int cells);
    [NullableContextAttribute("1")]
private static Expression`1<Func`3<ISqlServerSpecificTable`1<TSource>, int, ISqlServerSpecificTable`1<TSource>>> WithSpatialWindowMaxCellsImpl();
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("SqlServer", "6", "LinqToDB.DataProvider.SqlServer.SqlServerHints/ParamsExtensionBuilder", "OPTIMIZE FOR")]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
public static ISqlServerSpecificQueryable`1<TSource> OptionOptimizeFor(ISqlServerSpecificQueryable`1<TSource> source, String[] values);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("SqlServer.2017", "6", "LinqToDB.DataProvider.SqlServer.SqlServerHints/ParamsExtensionBuilder", "USE HINT")]
[QueryExtensionAttribute("SqlServer.2019", "6", "LinqToDB.DataProvider.SqlServer.SqlServerHints/ParamsExtensionBuilder", "USE HINT")]
[QueryExtensionAttribute("SqlServer.2022", "6", "LinqToDB.DataProvider.SqlServer.SqlServerHints/ParamsExtensionBuilder", "USE HINT")]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
public static ISqlServerSpecificQueryable`1<TSource> OptionUseHint(ISqlServerSpecificQueryable`1<TSource> source, String[] values);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("SqlServer.2008", "6", "LinqToDB.DataProvider.SqlServer.SqlServerHints/TableParamsExtensionBuilder")]
[QueryExtensionAttribute("SqlServer.2012", "6", "LinqToDB.DataProvider.SqlServer.SqlServerHints/TableParamsExtensionBuilder")]
[QueryExtensionAttribute("SqlServer.2014", "6", "LinqToDB.DataProvider.SqlServer.SqlServerHints/TableParamsExtensionBuilder")]
[QueryExtensionAttribute("SqlServer.2016", "6", "LinqToDB.DataProvider.SqlServer.SqlServerHints/TableParamsExtensionBuilder")]
[QueryExtensionAttribute("SqlServer.2017", "6", "LinqToDB.DataProvider.SqlServer.SqlServerHints/TableParamsExtensionBuilder")]
[QueryExtensionAttribute("SqlServer.2019", "6", "LinqToDB.DataProvider.SqlServer.SqlServerHints/TableParamsExtensionBuilder")]
[QueryExtensionAttribute("SqlServer.2022", "6", "LinqToDB.DataProvider.SqlServer.SqlServerHints/TableParamsExtensionBuilder")]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
public static ISqlServerSpecificQueryable`1<TSource> OptionTableHint(ISqlServerSpecificQueryable`1<TSource> source, SqlID tableID, String[] values);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("SqlServer", "1", "LinqToDB.SqlProvider.HintExtensionBuilder")]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
public static ISqlServerSpecificTable`1<TSource> TableHint(ISqlServerSpecificTable`1<TSource> table, string hint);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("SqlServer", "1", "LinqToDB.SqlProvider.HintWithParameterExtensionBuilder")]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
public static ISqlServerSpecificTable`1<TSource> TableHint(ISqlServerSpecificTable`1<TSource> table, string hint, TParam hintParameter);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("SqlServer", "1", "LinqToDB.SqlProvider.HintWithParametersExtensionBuilder")]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
public static ISqlServerSpecificTable`1<TSource> TableHint(ISqlServerSpecificTable`1<TSource> table, string hint, TParam[] hintParameters);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("SqlServer.2012", "1", "LinqToDB.SqlProvider.HintExtensionBuilder")]
[QueryExtensionAttribute("SqlServer.2014", "1", "LinqToDB.SqlProvider.HintExtensionBuilder")]
[QueryExtensionAttribute("SqlServer.2016", "1", "LinqToDB.SqlProvider.HintExtensionBuilder")]
[QueryExtensionAttribute("SqlServer.2017", "1", "LinqToDB.SqlProvider.HintExtensionBuilder")]
[QueryExtensionAttribute("SqlServer.2019", "1", "LinqToDB.SqlProvider.HintExtensionBuilder")]
[QueryExtensionAttribute("SqlServer.2022", "1", "LinqToDB.SqlProvider.HintExtensionBuilder")]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
public static ISqlServerSpecificTable`1<TSource> TableHint2012Plus(ISqlServerSpecificTable`1<TSource> table, string hint);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("SqlServer.2014", "1", "LinqToDB.SqlProvider.HintExtensionBuilder")]
[QueryExtensionAttribute("SqlServer.2016", "1", "LinqToDB.SqlProvider.HintExtensionBuilder")]
[QueryExtensionAttribute("SqlServer.2017", "1", "LinqToDB.SqlProvider.HintExtensionBuilder")]
[QueryExtensionAttribute("SqlServer.2019", "1", "LinqToDB.SqlProvider.HintExtensionBuilder")]
[QueryExtensionAttribute("SqlServer.2022", "1", "LinqToDB.SqlProvider.HintExtensionBuilder")]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
private static ISqlServerSpecificTable`1<TSource> TableHint2014Plus(ISqlServerSpecificTable`1<TSource> table, string hint);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("SqlServer", "2", "LinqToDB.SqlProvider.HintExtensionBuilder")]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
public static ISqlServerSpecificQueryable`1<TSource> TablesInScopeHint(ISqlServerSpecificQueryable`1<TSource> source, string hint);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("SqlServer", "2", "LinqToDB.SqlProvider.HintWithParameterExtensionBuilder")]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
public static ISqlServerSpecificQueryable`1<TSource> TablesInScopeHint(ISqlServerSpecificQueryable`1<TSource> source, string hint, TParam hintParameter);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("SqlServer", "2", "LinqToDB.SqlProvider.HintWithParametersExtensionBuilder")]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
public static ISqlServerSpecificQueryable`1<TSource> TablesInScopeHint(ISqlServerSpecificQueryable`1<TSource> source, string hint, Object[] hintParameters);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("SqlServer.2012", "2", "LinqToDB.SqlProvider.HintExtensionBuilder")]
[QueryExtensionAttribute("SqlServer.2014", "2", "LinqToDB.SqlProvider.HintExtensionBuilder")]
[QueryExtensionAttribute("SqlServer.2016", "2", "LinqToDB.SqlProvider.HintExtensionBuilder")]
[QueryExtensionAttribute("SqlServer.2017", "2", "LinqToDB.SqlProvider.HintExtensionBuilder")]
[QueryExtensionAttribute("SqlServer.2019", "2", "LinqToDB.SqlProvider.HintExtensionBuilder")]
[QueryExtensionAttribute("SqlServer.2022", "2", "LinqToDB.SqlProvider.HintExtensionBuilder")]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
public static ISqlServerSpecificQueryable`1<TSource> TablesInScopeHint2012Plus(ISqlServerSpecificQueryable`1<TSource> source, string hint);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("SqlServer.2014", "2", "LinqToDB.SqlProvider.HintExtensionBuilder")]
[QueryExtensionAttribute("SqlServer.2016", "2", "LinqToDB.SqlProvider.HintExtensionBuilder")]
[QueryExtensionAttribute("SqlServer.2017", "2", "LinqToDB.SqlProvider.HintExtensionBuilder")]
[QueryExtensionAttribute("SqlServer.2019", "2", "LinqToDB.SqlProvider.HintExtensionBuilder")]
[QueryExtensionAttribute("SqlServer.2022", "2", "LinqToDB.SqlProvider.HintExtensionBuilder")]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
public static ISqlServerSpecificQueryable`1<TSource> TablesInScopeHint2014Plus(ISqlServerSpecificQueryable`1<TSource> source, string hint);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("SqlServer", "4", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
public static ISqlServerSpecificTable`1<TSource> JoinHint(ISqlServerSpecificTable`1<TSource> table, string hint);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("SqlServer", "4", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
public static ISqlServerSpecificQueryable`1<TSource> JoinHint(ISqlServerSpecificQueryable`1<TSource> source, string hint);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("SqlServer", "6", "LinqToDB.SqlProvider.HintExtensionBuilder")]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
public static ISqlServerSpecificQueryable`1<TSource> QueryHint(ISqlServerSpecificQueryable`1<TSource> source, string hint);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("SqlServer", "6", "LinqToDB.SqlProvider.HintWithParameterExtensionBuilder")]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
public static ISqlServerSpecificQueryable`1<TSource> QueryHint(ISqlServerSpecificQueryable`1<TSource> source, string hint, TParam hintParameter);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("SqlServer", "6", "LinqToDB.SqlProvider.HintWithParametersExtensionBuilder")]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
public static ISqlServerSpecificQueryable`1<TSource> QueryHint(ISqlServerSpecificQueryable`1<TSource> source, string hint, TParam[] hintParameters);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("SqlServer.2019", "6", "LinqToDB.SqlProvider.HintExtensionBuilder")]
[QueryExtensionAttribute("SqlServer.2022", "6", "LinqToDB.SqlProvider.HintExtensionBuilder")]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
public static ISqlServerSpecificQueryable`1<TSource> QueryHint2019Plus(ISqlServerSpecificQueryable`1<TSource> source, string hint);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("SqlServer.2008", "6", "LinqToDB.SqlProvider.HintExtensionBuilder")]
[QueryExtensionAttribute("SqlServer.2012", "6", "LinqToDB.SqlProvider.HintExtensionBuilder")]
[QueryExtensionAttribute("SqlServer.2014", "6", "LinqToDB.SqlProvider.HintExtensionBuilder")]
[QueryExtensionAttribute("SqlServer.2016", "6", "LinqToDB.SqlProvider.HintExtensionBuilder")]
[QueryExtensionAttribute("SqlServer.2017", "6", "LinqToDB.SqlProvider.HintExtensionBuilder")]
[QueryExtensionAttribute("SqlServer.2019", "6", "LinqToDB.SqlProvider.HintExtensionBuilder")]
[QueryExtensionAttribute("SqlServer.2022", "6", "LinqToDB.SqlProvider.HintExtensionBuilder")]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
public static ISqlServerSpecificQueryable`1<TSource> QueryHint2008Plus(ISqlServerSpecificQueryable`1<TSource> source, string hint);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("SqlServer.2012", "6", "LinqToDB.SqlProvider.HintExtensionBuilder")]
[QueryExtensionAttribute("SqlServer.2014", "6", "LinqToDB.SqlProvider.HintExtensionBuilder")]
[QueryExtensionAttribute("SqlServer.2016", "6", "LinqToDB.SqlProvider.HintExtensionBuilder")]
[QueryExtensionAttribute("SqlServer.2017", "6", "LinqToDB.SqlProvider.HintExtensionBuilder")]
[QueryExtensionAttribute("SqlServer.2019", "6", "LinqToDB.SqlProvider.HintExtensionBuilder")]
[QueryExtensionAttribute("SqlServer.2022", "6", "LinqToDB.SqlProvider.HintExtensionBuilder")]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
public static ISqlServerSpecificQueryable`1<TSource> QueryHint2012Plus(ISqlServerSpecificQueryable`1<TSource> source, string hint);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("SqlServer.2016", "6", "LinqToDB.SqlProvider.HintExtensionBuilder")]
[QueryExtensionAttribute("SqlServer.2017", "6", "LinqToDB.SqlProvider.HintExtensionBuilder")]
[QueryExtensionAttribute("SqlServer.2019", "6", "LinqToDB.SqlProvider.HintExtensionBuilder")]
[QueryExtensionAttribute("SqlServer.2022", "6", "LinqToDB.SqlProvider.HintExtensionBuilder")]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
public static ISqlServerSpecificQueryable`1<TSource> QueryHint2016Plus(ISqlServerSpecificQueryable`1<TSource> source, string hint);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("SqlServer", "7", "LinqToDB.DataProvider.SqlServer.SqlServerHints/TemporalTableExtensionBuilder")]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
internal static ISqlServerSpecificTable`1<TSource> TemporalTableHint(ISqlServerSpecificTable`1<TSource> table, string expression);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("SqlServer", "7", "LinqToDB.DataProvider.SqlServer.SqlServerHints/TemporalTableExtensionBuilder")]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
internal static ISqlServerSpecificTable`1<TSource> TemporalTableHint(ISqlServerSpecificTable`1<TSource> table, string expression, DateTime dateTime);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("SqlServer", "7", "LinqToDB.DataProvider.SqlServer.SqlServerHints/TemporalTableExtensionBuilder")]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
internal static ISqlServerSpecificTable`1<TSource> TemporalTableHint(ISqlServerSpecificTable`1<TSource> table, string expression, DateTime dateTime, DateTime dateTime2);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[ExpressionMethodAttribute("SqlServer", "TemporalTableAllImpl")]
public static ISqlServerSpecificTable`1<TSource> TemporalTableAll(ISqlServerSpecificTable`1<TSource> table);
    [NullableContextAttribute("1")]
private static Expression`1<Func`2<ISqlServerSpecificTable`1<TSource>, ISqlServerSpecificTable`1<TSource>>> TemporalTableAllImpl();
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[ExpressionMethodAttribute("SqlServer", "TemporalTableAsOfImpl")]
public static ISqlServerSpecificTable`1<TSource> TemporalTableAsOf(ISqlServerSpecificTable`1<TSource> table, DateTime dateTime);
    [NullableContextAttribute("1")]
private static Expression`1<Func`3<ISqlServerSpecificTable`1<TSource>, DateTime, ISqlServerSpecificTable`1<TSource>>> TemporalTableAsOfImpl();
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[ExpressionMethodAttribute("SqlServer", "TemporalTableFromToImpl")]
public static ISqlServerSpecificTable`1<TSource> TemporalTableFromTo(ISqlServerSpecificTable`1<TSource> table, DateTime dateTime, DateTime dateTime2);
    [NullableContextAttribute("1")]
private static Expression`1<Func`4<ISqlServerSpecificTable`1<TSource>, DateTime, DateTime, ISqlServerSpecificTable`1<TSource>>> TemporalTableFromToImpl();
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[ExpressionMethodAttribute("SqlServer", "TemporalTableBetweenImpl")]
public static ISqlServerSpecificTable`1<TSource> TemporalTableBetween(ISqlServerSpecificTable`1<TSource> table, DateTime dateTime, DateTime dateTime2);
    [NullableContextAttribute("1")]
private static Expression`1<Func`4<ISqlServerSpecificTable`1<TSource>, DateTime, DateTime, ISqlServerSpecificTable`1<TSource>>> TemporalTableBetweenImpl();
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[ExpressionMethodAttribute("SqlServer", "TemporalTableContainedInImpl")]
public static ISqlServerSpecificTable`1<TSource> TemporalTableContainedIn(ISqlServerSpecificTable`1<TSource> table, DateTime dateTime, DateTime dateTime2);
    [NullableContextAttribute("1")]
private static Expression`1<Func`4<ISqlServerSpecificTable`1<TSource>, DateTime, DateTime, ISqlServerSpecificTable`1<TSource>>> TemporalTableContainedInImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("SqlServer", "WithForceScanTableImpl")]
public static ISqlServerSpecificTable`1<TSource> WithForceScan(ISqlServerSpecificTable`1<TSource> table);
    private static Expression`1<Func`2<ISqlServerSpecificTable`1<TSource>, ISqlServerSpecificTable`1<TSource>>> WithForceScanTableImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("SqlServer", "WithForceScanQueryImpl")]
public static ISqlServerSpecificQueryable`1<TSource> WithForceScanInScope(ISqlServerSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<ISqlServerSpecificQueryable`1<TSource>, ISqlServerSpecificQueryable`1<TSource>>> WithForceScanQueryImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("SqlServer", "WithForceSeekTableImpl")]
public static ISqlServerSpecificTable`1<TSource> WithForceSeek(ISqlServerSpecificTable`1<TSource> table);
    private static Expression`1<Func`2<ISqlServerSpecificTable`1<TSource>, ISqlServerSpecificTable`1<TSource>>> WithForceSeekTableImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("SqlServer", "WithForceSeekQueryImpl")]
public static ISqlServerSpecificQueryable`1<TSource> WithForceSeekInScope(ISqlServerSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<ISqlServerSpecificQueryable`1<TSource>, ISqlServerSpecificQueryable`1<TSource>>> WithForceSeekQueryImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("SqlServer", "WithHoldLockTableImpl")]
public static ISqlServerSpecificTable`1<TSource> WithHoldLock(ISqlServerSpecificTable`1<TSource> table);
    private static Expression`1<Func`2<ISqlServerSpecificTable`1<TSource>, ISqlServerSpecificTable`1<TSource>>> WithHoldLockTableImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("SqlServer", "WithHoldLockQueryImpl")]
public static ISqlServerSpecificQueryable`1<TSource> WithHoldLockInScope(ISqlServerSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<ISqlServerSpecificQueryable`1<TSource>, ISqlServerSpecificQueryable`1<TSource>>> WithHoldLockQueryImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("SqlServer", "WithNoLockTableImpl")]
public static ISqlServerSpecificTable`1<TSource> WithNoLock(ISqlServerSpecificTable`1<TSource> table);
    private static Expression`1<Func`2<ISqlServerSpecificTable`1<TSource>, ISqlServerSpecificTable`1<TSource>>> WithNoLockTableImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("SqlServer", "WithNoLockQueryImpl")]
public static ISqlServerSpecificQueryable`1<TSource> WithNoLockInScope(ISqlServerSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<ISqlServerSpecificQueryable`1<TSource>, ISqlServerSpecificQueryable`1<TSource>>> WithNoLockQueryImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("SqlServer", "WithNoWaitTableImpl")]
public static ISqlServerSpecificTable`1<TSource> WithNoWait(ISqlServerSpecificTable`1<TSource> table);
    private static Expression`1<Func`2<ISqlServerSpecificTable`1<TSource>, ISqlServerSpecificTable`1<TSource>>> WithNoWaitTableImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("SqlServer", "WithNoWaitQueryImpl")]
public static ISqlServerSpecificQueryable`1<TSource> WithNoWaitInScope(ISqlServerSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<ISqlServerSpecificQueryable`1<TSource>, ISqlServerSpecificQueryable`1<TSource>>> WithNoWaitQueryImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("SqlServer", "WithPagLockTableImpl")]
public static ISqlServerSpecificTable`1<TSource> WithPagLock(ISqlServerSpecificTable`1<TSource> table);
    private static Expression`1<Func`2<ISqlServerSpecificTable`1<TSource>, ISqlServerSpecificTable`1<TSource>>> WithPagLockTableImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("SqlServer", "WithPagLockQueryImpl")]
public static ISqlServerSpecificQueryable`1<TSource> WithPagLockInScope(ISqlServerSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<ISqlServerSpecificQueryable`1<TSource>, ISqlServerSpecificQueryable`1<TSource>>> WithPagLockQueryImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("SqlServer", "WithReadCommittedTableImpl")]
public static ISqlServerSpecificTable`1<TSource> WithReadCommitted(ISqlServerSpecificTable`1<TSource> table);
    private static Expression`1<Func`2<ISqlServerSpecificTable`1<TSource>, ISqlServerSpecificTable`1<TSource>>> WithReadCommittedTableImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("SqlServer", "WithReadCommittedQueryImpl")]
public static ISqlServerSpecificQueryable`1<TSource> WithReadCommittedInScope(ISqlServerSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<ISqlServerSpecificQueryable`1<TSource>, ISqlServerSpecificQueryable`1<TSource>>> WithReadCommittedQueryImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("SqlServer", "WithReadCommittedLockTableImpl")]
public static ISqlServerSpecificTable`1<TSource> WithReadCommittedLock(ISqlServerSpecificTable`1<TSource> table);
    private static Expression`1<Func`2<ISqlServerSpecificTable`1<TSource>, ISqlServerSpecificTable`1<TSource>>> WithReadCommittedLockTableImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("SqlServer", "WithReadCommittedLockQueryImpl")]
public static ISqlServerSpecificQueryable`1<TSource> WithReadCommittedLockInScope(ISqlServerSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<ISqlServerSpecificQueryable`1<TSource>, ISqlServerSpecificQueryable`1<TSource>>> WithReadCommittedLockQueryImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("SqlServer", "WithReadPastTableImpl")]
public static ISqlServerSpecificTable`1<TSource> WithReadPast(ISqlServerSpecificTable`1<TSource> table);
    private static Expression`1<Func`2<ISqlServerSpecificTable`1<TSource>, ISqlServerSpecificTable`1<TSource>>> WithReadPastTableImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("SqlServer", "WithReadPastQueryImpl")]
public static ISqlServerSpecificQueryable`1<TSource> WithReadPastInScope(ISqlServerSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<ISqlServerSpecificQueryable`1<TSource>, ISqlServerSpecificQueryable`1<TSource>>> WithReadPastQueryImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("SqlServer", "WithReadUncommittedTableImpl")]
public static ISqlServerSpecificTable`1<TSource> WithReadUncommitted(ISqlServerSpecificTable`1<TSource> table);
    private static Expression`1<Func`2<ISqlServerSpecificTable`1<TSource>, ISqlServerSpecificTable`1<TSource>>> WithReadUncommittedTableImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("SqlServer", "WithReadUncommittedQueryImpl")]
public static ISqlServerSpecificQueryable`1<TSource> WithReadUncommittedInScope(ISqlServerSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<ISqlServerSpecificQueryable`1<TSource>, ISqlServerSpecificQueryable`1<TSource>>> WithReadUncommittedQueryImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("SqlServer", "WithRepeatableReadTableImpl")]
public static ISqlServerSpecificTable`1<TSource> WithRepeatableRead(ISqlServerSpecificTable`1<TSource> table);
    private static Expression`1<Func`2<ISqlServerSpecificTable`1<TSource>, ISqlServerSpecificTable`1<TSource>>> WithRepeatableReadTableImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("SqlServer", "WithRepeatableReadQueryImpl")]
public static ISqlServerSpecificQueryable`1<TSource> WithRepeatableReadInScope(ISqlServerSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<ISqlServerSpecificQueryable`1<TSource>, ISqlServerSpecificQueryable`1<TSource>>> WithRepeatableReadQueryImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("SqlServer", "WithRowLockTableImpl")]
public static ISqlServerSpecificTable`1<TSource> WithRowLock(ISqlServerSpecificTable`1<TSource> table);
    private static Expression`1<Func`2<ISqlServerSpecificTable`1<TSource>, ISqlServerSpecificTable`1<TSource>>> WithRowLockTableImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("SqlServer", "WithRowLockQueryImpl")]
public static ISqlServerSpecificQueryable`1<TSource> WithRowLockInScope(ISqlServerSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<ISqlServerSpecificQueryable`1<TSource>, ISqlServerSpecificQueryable`1<TSource>>> WithRowLockQueryImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("SqlServer", "WithSerializableTableImpl")]
public static ISqlServerSpecificTable`1<TSource> WithSerializable(ISqlServerSpecificTable`1<TSource> table);
    private static Expression`1<Func`2<ISqlServerSpecificTable`1<TSource>, ISqlServerSpecificTable`1<TSource>>> WithSerializableTableImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("SqlServer", "WithSerializableQueryImpl")]
public static ISqlServerSpecificQueryable`1<TSource> WithSerializableInScope(ISqlServerSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<ISqlServerSpecificQueryable`1<TSource>, ISqlServerSpecificQueryable`1<TSource>>> WithSerializableQueryImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("SqlServer", "WithSnapshotTableImpl")]
public static ISqlServerSpecificTable`1<TSource> WithSnapshot(ISqlServerSpecificTable`1<TSource> table);
    private static Expression`1<Func`2<ISqlServerSpecificTable`1<TSource>, ISqlServerSpecificTable`1<TSource>>> WithSnapshotTableImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("SqlServer", "WithSnapshotQueryImpl")]
public static ISqlServerSpecificQueryable`1<TSource> WithSnapshotInScope(ISqlServerSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<ISqlServerSpecificQueryable`1<TSource>, ISqlServerSpecificQueryable`1<TSource>>> WithSnapshotQueryImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("SqlServer", "WithTabLockTableImpl")]
public static ISqlServerSpecificTable`1<TSource> WithTabLock(ISqlServerSpecificTable`1<TSource> table);
    private static Expression`1<Func`2<ISqlServerSpecificTable`1<TSource>, ISqlServerSpecificTable`1<TSource>>> WithTabLockTableImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("SqlServer", "WithTabLockQueryImpl")]
public static ISqlServerSpecificQueryable`1<TSource> WithTabLockInScope(ISqlServerSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<ISqlServerSpecificQueryable`1<TSource>, ISqlServerSpecificQueryable`1<TSource>>> WithTabLockQueryImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("SqlServer", "WithTabLockXTableImpl")]
public static ISqlServerSpecificTable`1<TSource> WithTabLockX(ISqlServerSpecificTable`1<TSource> table);
    private static Expression`1<Func`2<ISqlServerSpecificTable`1<TSource>, ISqlServerSpecificTable`1<TSource>>> WithTabLockXTableImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("SqlServer", "WithTabLockXQueryImpl")]
public static ISqlServerSpecificQueryable`1<TSource> WithTabLockXInScope(ISqlServerSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<ISqlServerSpecificQueryable`1<TSource>, ISqlServerSpecificQueryable`1<TSource>>> WithTabLockXQueryImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("SqlServer", "WithUpdLockTableImpl")]
public static ISqlServerSpecificTable`1<TSource> WithUpdLock(ISqlServerSpecificTable`1<TSource> table);
    private static Expression`1<Func`2<ISqlServerSpecificTable`1<TSource>, ISqlServerSpecificTable`1<TSource>>> WithUpdLockTableImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("SqlServer", "WithUpdLockQueryImpl")]
public static ISqlServerSpecificQueryable`1<TSource> WithUpdLockInScope(ISqlServerSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<ISqlServerSpecificQueryable`1<TSource>, ISqlServerSpecificQueryable`1<TSource>>> WithUpdLockQueryImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("SqlServer", "WithXLockTableImpl")]
public static ISqlServerSpecificTable`1<TSource> WithXLock(ISqlServerSpecificTable`1<TSource> table);
    private static Expression`1<Func`2<ISqlServerSpecificTable`1<TSource>, ISqlServerSpecificTable`1<TSource>>> WithXLockTableImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("SqlServer", "WithXLockQueryImpl")]
public static ISqlServerSpecificQueryable`1<TSource> WithXLockInScope(ISqlServerSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<ISqlServerSpecificQueryable`1<TSource>, ISqlServerSpecificQueryable`1<TSource>>> WithXLockQueryImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("JoinLoopHintImpl")]
public static ISqlServerSpecificQueryable`1<TSource> JoinLoopHint(ISqlServerSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<ISqlServerSpecificQueryable`1<TSource>, ISqlServerSpecificQueryable`1<TSource>>> JoinLoopHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("JoinLoopTableHintImpl")]
public static ISqlServerSpecificTable`1<TSource> JoinLoopHint(ISqlServerSpecificTable`1<TSource> table);
    private static Expression`1<Func`2<ISqlServerSpecificTable`1<TSource>, ISqlServerSpecificTable`1<TSource>>> JoinLoopTableHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("JoinHashHintImpl")]
public static ISqlServerSpecificQueryable`1<TSource> JoinHashHint(ISqlServerSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<ISqlServerSpecificQueryable`1<TSource>, ISqlServerSpecificQueryable`1<TSource>>> JoinHashHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("JoinHashTableHintImpl")]
public static ISqlServerSpecificTable`1<TSource> JoinHashHint(ISqlServerSpecificTable`1<TSource> table);
    private static Expression`1<Func`2<ISqlServerSpecificTable`1<TSource>, ISqlServerSpecificTable`1<TSource>>> JoinHashTableHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("JoinMergeHintImpl")]
public static ISqlServerSpecificQueryable`1<TSource> JoinMergeHint(ISqlServerSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<ISqlServerSpecificQueryable`1<TSource>, ISqlServerSpecificQueryable`1<TSource>>> JoinMergeHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("JoinMergeTableHintImpl")]
public static ISqlServerSpecificTable`1<TSource> JoinMergeHint(ISqlServerSpecificTable`1<TSource> table);
    private static Expression`1<Func`2<ISqlServerSpecificTable`1<TSource>, ISqlServerSpecificTable`1<TSource>>> JoinMergeTableHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("JoinRemoteHintImpl")]
public static ISqlServerSpecificQueryable`1<TSource> JoinRemoteHint(ISqlServerSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<ISqlServerSpecificQueryable`1<TSource>, ISqlServerSpecificQueryable`1<TSource>>> JoinRemoteHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("JoinRemoteTableHintImpl")]
public static ISqlServerSpecificTable`1<TSource> JoinRemoteHint(ISqlServerSpecificTable`1<TSource> table);
    private static Expression`1<Func`2<ISqlServerSpecificTable`1<TSource>, ISqlServerSpecificTable`1<TSource>>> JoinRemoteTableHintImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("OptionHashGroupImpl")]
public static ISqlServerSpecificQueryable`1<TSource> OptionHashGroup(ISqlServerSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<ISqlServerSpecificQueryable`1<TSource>, ISqlServerSpecificQueryable`1<TSource>>> OptionHashGroupImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("OptionOrderGroupImpl")]
public static ISqlServerSpecificQueryable`1<TSource> OptionOrderGroup(ISqlServerSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<ISqlServerSpecificQueryable`1<TSource>, ISqlServerSpecificQueryable`1<TSource>>> OptionOrderGroupImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("OptionConcatUnionImpl")]
public static ISqlServerSpecificQueryable`1<TSource> OptionConcatUnion(ISqlServerSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<ISqlServerSpecificQueryable`1<TSource>, ISqlServerSpecificQueryable`1<TSource>>> OptionConcatUnionImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("OptionHashUnionImpl")]
public static ISqlServerSpecificQueryable`1<TSource> OptionHashUnion(ISqlServerSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<ISqlServerSpecificQueryable`1<TSource>, ISqlServerSpecificQueryable`1<TSource>>> OptionHashUnionImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("OptionMergeUnionImpl")]
public static ISqlServerSpecificQueryable`1<TSource> OptionMergeUnion(ISqlServerSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<ISqlServerSpecificQueryable`1<TSource>, ISqlServerSpecificQueryable`1<TSource>>> OptionMergeUnionImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("OptionLoopJoinImpl")]
public static ISqlServerSpecificQueryable`1<TSource> OptionLoopJoin(ISqlServerSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<ISqlServerSpecificQueryable`1<TSource>, ISqlServerSpecificQueryable`1<TSource>>> OptionLoopJoinImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("OptionHashJoinImpl")]
public static ISqlServerSpecificQueryable`1<TSource> OptionHashJoin(ISqlServerSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<ISqlServerSpecificQueryable`1<TSource>, ISqlServerSpecificQueryable`1<TSource>>> OptionHashJoinImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("OptionMergeJoinImpl")]
public static ISqlServerSpecificQueryable`1<TSource> OptionMergeJoin(ISqlServerSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<ISqlServerSpecificQueryable`1<TSource>, ISqlServerSpecificQueryable`1<TSource>>> OptionMergeJoinImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("OptionExpandViewsImpl")]
public static ISqlServerSpecificQueryable`1<TSource> OptionExpandViews(ISqlServerSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<ISqlServerSpecificQueryable`1<TSource>, ISqlServerSpecificQueryable`1<TSource>>> OptionExpandViewsImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("OptionFastImpl")]
public static ISqlServerSpecificQueryable`1<TSource> OptionFast(ISqlServerSpecificQueryable`1<TSource> query, int value);
    private static Expression`1<Func`3<ISqlServerSpecificQueryable`1<TSource>, int, ISqlServerSpecificQueryable`1<TSource>>> OptionFastImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("OptionForceOrderImpl")]
public static ISqlServerSpecificQueryable`1<TSource> OptionForceOrder(ISqlServerSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<ISqlServerSpecificQueryable`1<TSource>, ISqlServerSpecificQueryable`1<TSource>>> OptionForceOrderImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("OptionForceExternalPushDownImpl")]
public static ISqlServerSpecificQueryable`1<TSource> OptionForceExternalPushDown(ISqlServerSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<ISqlServerSpecificQueryable`1<TSource>, ISqlServerSpecificQueryable`1<TSource>>> OptionForceExternalPushDownImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("OptionDisableExternalPushDownImpl")]
public static ISqlServerSpecificQueryable`1<TSource> OptionDisableExternalPushDown(ISqlServerSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<ISqlServerSpecificQueryable`1<TSource>, ISqlServerSpecificQueryable`1<TSource>>> OptionDisableExternalPushDownImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("OptionForceScaleOutExecutionImpl")]
public static ISqlServerSpecificQueryable`1<TSource> OptionForceScaleOutExecution(ISqlServerSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<ISqlServerSpecificQueryable`1<TSource>, ISqlServerSpecificQueryable`1<TSource>>> OptionForceScaleOutExecutionImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("OptionDisableScaleOutExecutionImpl")]
public static ISqlServerSpecificQueryable`1<TSource> OptionDisableScaleOutExecution(ISqlServerSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<ISqlServerSpecificQueryable`1<TSource>, ISqlServerSpecificQueryable`1<TSource>>> OptionDisableScaleOutExecutionImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("OptionIgnoreNonClusteredColumnStoreIndexImpl")]
public static ISqlServerSpecificQueryable`1<TSource> OptionIgnoreNonClusteredColumnStoreIndex(ISqlServerSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<ISqlServerSpecificQueryable`1<TSource>, ISqlServerSpecificQueryable`1<TSource>>> OptionIgnoreNonClusteredColumnStoreIndexImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("OptionKeepPlanImpl")]
public static ISqlServerSpecificQueryable`1<TSource> OptionKeepPlan(ISqlServerSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<ISqlServerSpecificQueryable`1<TSource>, ISqlServerSpecificQueryable`1<TSource>>> OptionKeepPlanImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("OptionKeepFixedPlanImpl")]
public static ISqlServerSpecificQueryable`1<TSource> OptionKeepFixedPlan(ISqlServerSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<ISqlServerSpecificQueryable`1<TSource>, ISqlServerSpecificQueryable`1<TSource>>> OptionKeepFixedPlanImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("OptionMaxGrantPercentImpl")]
public static ISqlServerSpecificQueryable`1<TSource> OptionMaxGrantPercent(ISqlServerSpecificQueryable`1<TSource> query, int value);
    private static Expression`1<Func`3<ISqlServerSpecificQueryable`1<TSource>, int, ISqlServerSpecificQueryable`1<TSource>>> OptionMaxGrantPercentImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("OptionMinGrantPercentImpl")]
public static ISqlServerSpecificQueryable`1<TSource> OptionMinGrantPercent(ISqlServerSpecificQueryable`1<TSource> query, int value);
    private static Expression`1<Func`3<ISqlServerSpecificQueryable`1<TSource>, int, ISqlServerSpecificQueryable`1<TSource>>> OptionMinGrantPercentImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("OptionMaxDopImpl")]
public static ISqlServerSpecificQueryable`1<TSource> OptionMaxDop(ISqlServerSpecificQueryable`1<TSource> query, int value);
    private static Expression`1<Func`3<ISqlServerSpecificQueryable`1<TSource>, int, ISqlServerSpecificQueryable`1<TSource>>> OptionMaxDopImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("OptionMaxRecursionImpl")]
public static ISqlServerSpecificQueryable`1<TSource> OptionMaxRecursion(ISqlServerSpecificQueryable`1<TSource> query, int value);
    private static Expression`1<Func`3<ISqlServerSpecificQueryable`1<TSource>, int, ISqlServerSpecificQueryable`1<TSource>>> OptionMaxRecursionImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("OptionNoPerformanceSpoolImpl")]
public static ISqlServerSpecificQueryable`1<TSource> OptionNoPerformanceSpool(ISqlServerSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<ISqlServerSpecificQueryable`1<TSource>, ISqlServerSpecificQueryable`1<TSource>>> OptionNoPerformanceSpoolImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("OptionOptimizeForUnknownImpl")]
public static ISqlServerSpecificQueryable`1<TSource> OptionOptimizeForUnknown(ISqlServerSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<ISqlServerSpecificQueryable`1<TSource>, ISqlServerSpecificQueryable`1<TSource>>> OptionOptimizeForUnknownImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("OptionQueryTraceOnImpl")]
public static ISqlServerSpecificQueryable`1<TSource> OptionQueryTraceOn(ISqlServerSpecificQueryable`1<TSource> query, int value);
    private static Expression`1<Func`3<ISqlServerSpecificQueryable`1<TSource>, int, ISqlServerSpecificQueryable`1<TSource>>> OptionQueryTraceOnImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("OptionRecompileImpl")]
public static ISqlServerSpecificQueryable`1<TSource> OptionRecompile(ISqlServerSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<ISqlServerSpecificQueryable`1<TSource>, ISqlServerSpecificQueryable`1<TSource>>> OptionRecompileImpl();
    [ExtensionAttribute]
[ExpressionMethodAttribute("OptionRobustPlanImpl")]
public static ISqlServerSpecificQueryable`1<TSource> OptionRobustPlan(ISqlServerSpecificQueryable`1<TSource> query);
    private static Expression`1<Func`2<ISqlServerSpecificQueryable`1<TSource>, ISqlServerSpecificQueryable`1<TSource>>> OptionRobustPlanImpl();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.DataProvider.SqlServer.SqlServerMappingSchema : LockedMappingSchema {
    private static string TIME_TICKS_FORMAT;
    private static string TIME_FROMPARTS_FORMAT;
    private static String[] TIME_TYPED_FORMATS;
    private static String[] TIME_RAW_FORMATS;
    private static string DATE_FROMPARTS_FORMAT;
    private static string DATE_FORMAT;
    private static string DATE_TYPED_FORMAT;
    private static string DATE_AS_DATETIME_TYPED_FORMAT;
    private static string SMALLDATETIME_TYPED_FORMAT;
    private static string DATETIME_FROMPARTS_FORMAT;
    private static string DATETIME_FORMAT;
    private static string DATETIME_TYPED_FORMAT;
    private static String[] DATETIME_WITH_PRECISION_FORMATS;
    private static string DaTETIME2_FROMPARTS_FORMAT;
    private static String[] DATETIME2_TYPED_FORMATS;
    private static string DaTETIMEOFFSET_FROMPARTS_FORMAT;
    private static String[] DATETIMEOFFSET_FORMATS;
    private static String[] DATETIMEOFFSET_RAW_FORMATS;
    private static String[] DATETIMEOFFSET_TYPED_FORMATS;
    private static String[] DATETIMEOFFSET_AS_DATETIME_TYPED_FORMATS;
    private static SqlServerMappingSchema Instance;
    private static Action`2<StringBuilder, int> AppendConversionAction;
    private static SqlServerMappingSchema();
    public virtual LambdaExpression TryGetConvertExpression(Type from, Type to);
    private static void AppendConversion(StringBuilder stringBuilder, int value);
    private static void ConvertStringToSql(StringBuilder stringBuilder, DataType dataType, string value);
    private static void ConvertCharToSql(StringBuilder stringBuilder, SqlDataType sqlDataType, char value);
    private static void ConvertDateTimeToSql(StringBuilder stringBuilder, SqlDataType dt, DateTime value, bool v2008plus, bool supportsFromParts);
    internal static string ConvertTimeSpanToString(TimeSpan value, int precision);
    internal static string ConvertDateTimeOffsetToString(DateTimeOffset value, int precision);
    private static void ConvertTimeSpanToSql(StringBuilder stringBuilder, SqlDataType sqlDataType, TimeSpan value, bool supportsTime, bool supportsFromParts);
    private static long GetFractionalSecondFromTicks(long ticks, int precision);
    private static void ConvertDateTimeOffsetToSql(StringBuilder stringBuilder, SqlDataType sqlDataType, DateTimeOffset value, bool v2008plus, bool supportsFromParts);
    private static void ConvertBinaryToSql(StringBuilder stringBuilder, Byte[] value);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class LinqToDB.DataProvider.SqlServer.SqlServerOptions : DataProviderOptions`1<SqlServerOptions> {
    [CompilerGeneratedAttribute]
private bool <GenerateScopeIdentity>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public bool GenerateScopeIdentity { get; public set; }
    public SqlServerOptions(BulkCopyType BulkCopyType, bool GenerateScopeIdentity);
    private SqlServerOptions(SqlServerOptions original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public bool get_GenerateScopeIdentity();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_GenerateScopeIdentity(bool value);
    protected virtual IdentifierBuilder CreateID(IdentifierBuilder builder);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(SqlServerOptions other);
    public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(SqlServerOptions left, SqlServerOptions right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(SqlServerOptions left, SqlServerOptions right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(DataProviderOptions`1<SqlServerOptions> other);
    [CompilerGeneratedAttribute]
public virtual DataProviderOptions`1<SqlServerOptions> <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(BulkCopyType& BulkCopyType, Boolean& GenerateScopeIdentity);
}
public enum LinqToDB.DataProvider.SqlServer.SqlServerProvider : Enum {
    public int value__;
    public static SqlServerProvider AutoDetect;
    public static SqlServerProvider SystemDataSqlClient;
    public static SqlServerProvider MicrosoftDataSqlClient;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.DataProvider.SqlServer.SqlServerProviderAdapter : object {
    private static object _sysSyncRoot;
    private static object _msSyncRoot;
    [NullableAttribute("2")]
private static SqlServerProviderAdapter _systemAdapter;
    [NullableAttribute("2")]
private static SqlServerProviderAdapter _microsoftAdapter;
    public static string SystemAssemblyName;
    public static string SystemClientNamespace;
    public static string SystemProviderFactoryName;
    public static string MicrosoftAssemblyName;
    public static string MicrosoftClientNamespace;
    public static string MicrosoftProviderFactoryName;
    [CompilerGeneratedAttribute]
private Type <ConnectionType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <DataReaderType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ParameterType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <CommandType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <TransactionType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <SqlDataRecordType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <SqlExceptionType>k__BackingField;
    private Func`2<string, SqlConnectionStringBuilder> _createConnectionStringBuilder;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`4<DbConnection, SqlBulkCopyOptions, DbTransaction, SqlBulkCopy> _createBulkCopy;
    private Func`3<int, string, SqlBulkCopyColumnMapping> _createBulkCopyColumnMapping;
    [CompilerGeneratedAttribute]
private Action`2<DbParameter, SqlDbType> <SetDbType>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<DbParameter, SqlDbType> <GetDbType>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`2<DbParameter, string> <SetUdtTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<DbParameter, string> <GetUdtTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`2<DbParameter, string> <SetTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<DbParameter, string> <GetTypeName>k__BackingField;
    private Func`2<string, SqlConnection> _createConnection;
    public Type ConnectionType { get; }
    public Type DataReaderType { get; }
    public Type ParameterType { get; }
    public Type CommandType { get; }
    public Type TransactionType { get; }
    public Type SqlDataRecordType { get; }
    public Type SqlExceptionType { get; }
    public string GetSqlXmlReaderMethod { get; }
    public string GetDateTimeOffsetReaderMethod { get; }
    public string GetTimeSpanReaderMethod { get; }
    public Action`2<DbParameter, SqlDbType> SetDbType { get; }
    public Func`2<DbParameter, SqlDbType> GetDbType { get; }
    public Action`2<DbParameter, string> SetUdtTypeName { get; }
    public Func`2<DbParameter, string> GetUdtTypeName { get; }
    public Action`2<DbParameter, string> SetTypeName { get; }
    public Func`2<DbParameter, string> GetTypeName { get; }
    private SqlServerProviderAdapter(Type connectionType, Type dataReaderType, Type parameterType, Type commandType, Type transactionType, Type sqlDataRecordType, Type sqlExceptionType, Action`2<DbParameter, SqlDbType> dbTypeSetter, Func`2<DbParameter, SqlDbType> dbTypeGetter, Action`2<DbParameter, string> udtTypeNameSetter, Func`2<DbParameter, string> udtTypeNameGetter, Action`2<DbParameter, string> typeNameSetter, Func`2<DbParameter, string> typeNameGetter, Func`2<string, SqlConnectionStringBuilder> createConnectionStringBuilder, Func`2<string, SqlConnection> createConnection, Func`4<DbConnection, SqlBulkCopyOptions, DbTransaction, SqlBulkCopy> createBulkCopy, Func`3<int, string, SqlBulkCopyColumnMapping> createBulkCopyColumnMapping);
    private static SqlServerProviderAdapter();
    [CompilerGeneratedAttribute]
public sealed virtual Type get_ConnectionType();
    [CompilerGeneratedAttribute]
public sealed virtual Type get_DataReaderType();
    [CompilerGeneratedAttribute]
public sealed virtual Type get_ParameterType();
    [CompilerGeneratedAttribute]
public sealed virtual Type get_CommandType();
    [CompilerGeneratedAttribute]
public sealed virtual Type get_TransactionType();
    [CompilerGeneratedAttribute]
public Type get_SqlDataRecordType();
    [CompilerGeneratedAttribute]
public Type get_SqlExceptionType();
    public string get_GetSqlXmlReaderMethod();
    public string get_GetDateTimeOffsetReaderMethod();
    public string get_GetTimeSpanReaderMethod();
    public SqlConnectionStringBuilder CreateConnectionStringBuilder(string connectionString);
    public SqlBulkCopy CreateBulkCopy(DbConnection connection, SqlBulkCopyOptions options, DbTransaction transaction);
    public SqlBulkCopyColumnMapping CreateBulkCopyColumnMapping(int source, string destination);
    [CompilerGeneratedAttribute]
public Action`2<DbParameter, SqlDbType> get_SetDbType();
    [CompilerGeneratedAttribute]
public Func`2<DbParameter, SqlDbType> get_GetDbType();
    [CompilerGeneratedAttribute]
public Action`2<DbParameter, string> get_SetUdtTypeName();
    [CompilerGeneratedAttribute]
public Func`2<DbParameter, string> get_GetUdtTypeName();
    [CompilerGeneratedAttribute]
public Action`2<DbParameter, string> get_SetTypeName();
    [CompilerGeneratedAttribute]
public Func`2<DbParameter, string> get_GetTypeName();
    public SqlConnection CreateConnection(string connectionString);
    public static SqlServerProviderAdapter GetInstance(SqlServerProvider provider);
    private static SqlServerProviderAdapter CreateAdapter(string assemblyName, string clientNamespace, string factoryName);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class LinqToDB.DataProvider.SqlServer.SqlServerProviderDetector : ProviderDetectorBase`3<SqlServerProvider, SqlServerVersion, SqlConnection> {
    private static ConcurrentQueue`1<SqlServerDataProvider> _providers;
    private static Lazy`1<IDataProvider> _sqlServerDataProvider2005Sdc;
    private static Lazy`1<IDataProvider> _sqlServerDataProvider2008Sdc;
    private static Lazy`1<IDataProvider> _sqlServerDataProvider2012Sdc;
    private static Lazy`1<IDataProvider> _sqlServerDataProvider2014Sdc;
    private static Lazy`1<IDataProvider> _sqlServerDataProvider2016Sdc;
    private static Lazy`1<IDataProvider> _sqlServerDataProvider2017Sdc;
    private static Lazy`1<IDataProvider> _sqlServerDataProvider2019Sdc;
    private static Lazy`1<IDataProvider> _sqlServerDataProvider2022Sdc;
    private static Lazy`1<IDataProvider> _sqlServerDataProvider2005Mdc;
    private static Lazy`1<IDataProvider> _sqlServerDataProvider2008Mdc;
    private static Lazy`1<IDataProvider> _sqlServerDataProvider2012Mdc;
    private static Lazy`1<IDataProvider> _sqlServerDataProvider2014Mdc;
    private static Lazy`1<IDataProvider> _sqlServerDataProvider2016Mdc;
    private static Lazy`1<IDataProvider> _sqlServerDataProvider2017Mdc;
    private static Lazy`1<IDataProvider> _sqlServerDataProvider2019Mdc;
    private static Lazy`1<IDataProvider> _sqlServerDataProvider2022Mdc;
    private static SqlServerProviderDetector();
    private static Lazy`1<IDataProvider> CreateDataProvider();
    public static void ResolveSqlTypes(string path);
    public static void ResolveSqlTypes(Assembly assembly);
    public virtual IDataProvider DetectProvider(ConnectionOptions options);
    public virtual IDataProvider GetDataProvider(ConnectionOptions options, SqlServerProvider provider, SqlServerVersion version);
    public static SqlServerProvider DetectProvider();
    public virtual Nullable`1<SqlServerVersion> DetectServerVersion(SqlConnection connection);
    protected virtual SqlConnection CreateConnection(SqlServerProvider provider, string connectionString);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.DataProvider.SqlServer.SqlServerRetryPolicy : RetryPolicyBase {
    [NullableAttribute("2")]
private ICollection`1<int> _additionalErrorNumbers;
    public SqlServerRetryPolicy(int maxRetryCount);
    [NullableContextAttribute("2")]
public SqlServerRetryPolicy(int maxRetryCount, TimeSpan maxRetryDelay, double randomFactor, double exponentialBase, TimeSpan coefficient, ICollection`1<int> errorNumbersToAdd);
    protected virtual bool ShouldRetryOn(Exception exception);
    protected virtual Nullable`1<TimeSpan> GetNextDelay(Exception lastException);
    private static bool IsMemoryOptimizedError(Exception exception);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.DataProvider.SqlServer.SqlServerSchemaProvider : SchemaProviderBase {
    private bool IsAzure;
    private int CompatibilityLevel;
    private SqlServerDataProvider Provider;
    public SqlServerSchemaProvider(SqlServerDataProvider provider);
    protected virtual void InitProvider(DataConnection dataConnection);
    protected virtual List`1<TableInfo> GetTables(DataConnection dataConnection, GetSchemaOptions options);
    protected virtual IReadOnlyCollection`1<PrimaryKeyInfo> GetPrimaryKeys(DataConnection dataConnection, IEnumerable`1<TableSchema> tables, GetSchemaOptions options);
    protected virtual List`1<ColumnInfo> GetColumns(DataConnection dataConnection, GetSchemaOptions options);
    protected virtual IReadOnlyCollection`1<ForeignKeyInfo> GetForeignKeys(DataConnection dataConnection, IEnumerable`1<TableSchema> tables, GetSchemaOptions options);
    protected virtual List`1<ProcedureInfo> GetProcedures(DataConnection dataConnection, GetSchemaOptions options);
    protected virtual List`1<ProcedureParameterInfo> GetProcedureParameters(DataConnection dataConnection, IEnumerable`1<ProcedureInfo> procedures, GetSchemaOptions options);
    [NullableContextAttribute("2")]
protected virtual DataType GetDataType(string dataType, string columnType, Nullable`1<int> length, Nullable`1<int> precision, Nullable`1<int> scale);
    protected virtual string GetProviderSpecificTypeNamespace();
    [NullableContextAttribute("2")]
protected virtual string GetProviderSpecificType(string dataType);
    [NullableContextAttribute("2")]
protected virtual Type GetSystemType(string dataType, string columnType, DataTypeInfo dataTypeInfo, Nullable`1<int> length, Nullable`1<int> precision, Nullable`1<int> scale, GetSchemaOptions options);
    [NullableContextAttribute("2")]
protected virtual string GetDbType(GetSchemaOptions options, string columnType, DataTypeInfo dataType, Nullable`1<int> length, Nullable`1<int> precision, Nullable`1<int> scale, string udtCatalog, string udtSchema, string udtName);
    protected virtual DataParameter BuildProcedureParameter(ParameterSchema p);
    protected virtual string BuildTableFunctionLoadTableSchemaCommand(ProcedureSchema procedure, string commandText);
    protected virtual DataTable GetProcedureSchema(DataConnection dataConnection, string commandText, CommandType commandType, DataParameter[] parameters, GetSchemaOptions options);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private DataTable <GetProcedureSchema>g__CallBase|18_0(<>c__DisplayClass18_0& );
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class LinqToDB.DataProvider.SqlServer.SqlServerSpecificQueryable`1 : DatabaseSpecificQueryable`1<TSource> {
    [NullableContextAttribute("1")]
public SqlServerSpecificQueryable`1(IQueryable`1<TSource> queryable);
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class LinqToDB.DataProvider.SqlServer.SqlServerSpecificTable`1 : DatabaseSpecificTable`1<TSource> {
    [NullableContextAttribute("1")]
public SqlServerSpecificTable`1(ITable`1<TSource> table);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal abstract class LinqToDB.DataProvider.SqlServer.SqlServerSqlBuilder : BasicSqlBuilder`1<SqlServerOptions> {
    protected string OutputKeyword { get; }
    protected string DeletedOutputTable { get; }
    protected string InsertedOutputTable { get; }
    protected SqlServerSqlBuilder(IDataProvider provider, MappingSchema mappingSchema, DataOptions dataOptions, ISqlOptimizer sqlOptimizer, SqlProviderFlags sqlProviderFlags);
    protected SqlServerSqlBuilder(BasicSqlBuilder parentBuilder);
    protected virtual string FirstFormat(SelectQuery selectQuery);
    private StringBuilder AppendOutputTableVariable(SqlTable table);
    protected virtual void BuildInsertQuery(SqlStatement statement, SqlInsertClause insertClause, bool addAlias);
    protected virtual void BuildOutputSubclause(SqlStatement statement, SqlInsertClause insertClause);
    protected virtual string get_OutputKeyword();
    protected virtual string get_DeletedOutputTable();
    protected virtual string get_InsertedOutputTable();
    protected virtual void BuildGetIdentity(SqlInsertClause insertClause);
    protected virtual void BuildDeleteClause(SqlDeleteStatement deleteStatement);
    [NullableContextAttribute("2")]
protected virtual void BuildOutputSubclause(SqlOutputClause output);
    protected virtual void BuildUpdateClause(SqlStatement statement, SelectQuery selectQuery, SqlUpdateClause updateClause);
    protected virtual void BuildUpdateTableName(SelectQuery selectQuery, SqlUpdateClause updateClause);
    private static string GetTablePhysicalName(string tableName, TableOptions tableOptions);
    public virtual StringBuilder BuildObjectName(StringBuilder sb, SqlObjectName name, ConvertType objectType, bool escape, TableOptions tableOptions, bool withoutSuffix);
    public virtual StringBuilder Convert(StringBuilder sb, string value, ConvertType convertType);
    protected virtual void BuildInsertOrUpdateQuery(SqlInsertOrUpdateStatement insertOrUpdate);
    protected virtual void BuildCreateTableIdentityAttribute2(SqlField field);
    protected virtual void BuildCreateTablePrimaryKey(SqlCreateTableStatement createTable, string pkName, IEnumerable`1<string> fieldNames);
    protected virtual void BuildDropTableStatement(SqlDropTableStatement dropTable);
    protected virtual void BuildDataTypeFromDataType(SqlDataType type, bool forCreateTable, bool canBeNull);
    protected virtual string GetTypeName(IDataContext dataContext, DbParameter parameter);
    protected virtual string GetUdtTypeName(IDataContext dataContext, DbParameter parameter);
    protected virtual string GetProviderTypeName(IDataContext dataContext, DbParameter parameter);
    protected virtual void BuildTruncateTable(SqlTruncateTableStatement truncateTable);
    protected void BuildIdentityInsert(SqlTableSource table, bool enable);
    protected virtual void BuildStartCreateTableStatement(SqlCreateTableStatement createTable);
    protected virtual void BuildEndCreateTableStatement(SqlCreateTableStatement createTable);
    protected virtual void BuildIsDistinctPredicate(IsDistinct expr);
    protected virtual void BuildTableExtensions(SqlTable table, string alias);
    protected virtual void BuildTableNameExtensions(SqlTable table);
    protected virtual bool BuildJoinType(SqlJoinedTable join, SqlSearchCondition condition);
    protected virtual void BuildQueryExtensions(SqlStatement statement);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class LinqToDB.DataProvider.SqlServer.SqlServerSqlOptimizer : BasicSqlOptimizer {
    private SqlServerVersion _sqlVersion;
    protected SqlServerSqlOptimizer(SqlProviderFlags sqlProviderFlags, SqlServerVersion sqlVersion);
    protected SqlStatement ReplaceSkipWithRowNumber(SqlStatement statement);
    protected SqlStatement WrapRootTakeSkipOrderBy(SqlStatement statement);
    public virtual ISqlPredicate ConvertSearchStringPredicate(SearchString predicate, ConvertVisitor`1<RunOptimizationContext> visitor);
    public virtual ISqlExpression ConvertExpressionImpl(ISqlExpression expression, ConvertVisitor`1<RunOptimizationContext> visitor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[PublicAPIAttribute]
public static class LinqToDB.DataProvider.SqlServer.SqlServerTools : object {
    internal static SqlServerProviderDetector ProviderDetector;
    [ObsoleteAttribute("Use SqlServerOptions.Default.BulkCopyType instead.")]
public static BulkCopyType DefaultBulkCopyType { get; public set; }
    private static SqlServerTools();
    [ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
public static ISqlServerSpecificTable`1<TSource> AsSqlServer(ITable`1<TSource> table);
    [ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("", "0", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
public static ISqlServerSpecificQueryable`1<TSource> AsSqlServer(IQueryable`1<TSource> source);
    public static string QuoteIdentifier(string identifier);
    internal static StringBuilder QuoteIdentifier(StringBuilder sb, string identifier);
    public static Nullable`1<SqlServerVersion> DetectServerVersion(SqlServerProvider provider, string connectionString);
    public static IDataProvider GetDataProvider(SqlServerVersion version, SqlServerProvider provider, string connectionString);
    public static void ResolveSqlTypes(string path);
    public static void ResolveSqlTypes(Assembly assembly);
    public static DataConnection CreateDataConnection(string connectionString, SqlServerVersion version, SqlServerProvider provider);
    public static DataConnection CreateDataConnection(DbConnection connection, SqlServerVersion version, SqlServerProvider provider);
    public static DataConnection CreateDataConnection(DbTransaction transaction, SqlServerVersion version, SqlServerProvider provider);
    public static BulkCopyType get_DefaultBulkCopyType();
    public static void set_DefaultBulkCopyType(BulkCopyType value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class LinqToDB.DataProvider.SqlServer.SqlServerTransientExceptionDetector : object {
    private static ConcurrentDictionary`2<Type, Func`2<Exception, IEnumerable`1<int>>> _exceptionTypes;
    private static SqlServerTransientExceptionDetector();
    internal static void RegisterExceptionType(Type type, Func`2<Exception, IEnumerable`1<int>> errrorNumbersGetter);
    public static bool IsHandled(Exception ex, IEnumerable`1& errorNumbers);
    public static bool ShouldRetryOn(Exception ex);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class LinqToDB.DataProvider.SqlServer.SqlServerTypes : object {
    public static string AssemblyName;
    public static string TypesNamespace;
    public static string SqlHierarchyIdType;
    public static string SqlGeographyType;
    public static string SqlGeometryType;
    private static Lazy`1<TypeInfo[]> _types;
    private static SqlServerTypes();
    public static bool UpdateTypes();
    public static bool UpdateTypes(Assembly assembly);
    private static TypeInfo[] LoadTypes(Assembly assembly);
    internal static void Configure(MappingSchema mappingSchema);
    internal static void Configure(SqlServerDataProvider provider);
    [CompilerGeneratedAttribute]
internal static TypeInfo <LoadTypes>g__loadType|8_0(string typeName, <>c__DisplayClass8_0& );
}
public enum LinqToDB.DataProvider.SqlServer.SqlServerVersion : Enum {
    public int value__;
    public static SqlServerVersion AutoDetect;
    public static SqlServerVersion v2005;
    public static SqlServerVersion v2008;
    public static SqlServerVersion v2012;
    public static SqlServerVersion v2014;
    public static SqlServerVersion v2016;
    public static SqlServerVersion v2017;
    public static SqlServerVersion v2019;
    public static SqlServerVersion v2022;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class LinqToDB.DataProvider.SqlServer.SqlType : object {
    private string _dataType;
    [SqlExpression("bigint")]
public static SqlType`1<Nullable`1<long>> BigInt { get; }
    [SqlExpression("bit")]
public static SqlType`1<Nullable`1<bool>> Bit { get; }
    [SqlExpression("smallint")]
public static SqlType`1<Nullable`1<short>> SmallInt { get; }
    [SqlExpression("smallmoney")]
public static SqlType`1<Nullable`1<decimal>> SmallMoney { get; }
    [SqlExpression("int")]
public static SqlType`1<Nullable`1<int>> Int { get; }
    [SqlExpression("tinyint")]
public static SqlType`1<Nullable`1<byte>> TinyInt { get; }
    [SqlExpression("money")]
public static SqlType`1<Nullable`1<decimal>> Money { get; }
    [SqlExpression("real")]
public static SqlType`1<Nullable`1<float>> Real { get; }
    [SqlExpression("date")]
public static SqlType`1<Nullable`1<DateTime>> Date { get; }
    [SqlExpression("smalldatetime")]
public static SqlType`1<Nullable`1<DateTime>> SmallDatetime { get; }
    [SqlExpression("datetime")]
public static SqlType`1<Nullable`1<DateTime>> Datetime { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[SqlExpression("char(max)")]
public static SqlType`1<string> CharMax { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[SqlExpression("varchar(max)")]
public static SqlType`1<string> VarCharMax { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[SqlExpression("text")]
public static SqlType`1<string> Text { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[SqlExpression("nchar(max)")]
public static SqlType`1<string> NCharMax { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[SqlExpression("nvarchar(max)")]
public static SqlType`1<string> NVarCharMax { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[SqlExpression("ntext")]
public static SqlType`1<string> NText { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[SqlExpression("binary(max)")]
public static SqlType`1<Byte[]> BinaryMax { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[SqlExpression("varbinary(max)")]
public static SqlType`1<Byte[]> VarBinaryMax { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[SqlExpression("image")]
public static SqlType`1<Byte[]> Image { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[SqlExpression("cursor")]
public static SqlType`1<object> Cursor { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[SqlExpression("rowversion")]
public static SqlType`1<Byte[]> RowVersion { get; }
    [SqlExpression("uniqueidentifier")]
public static SqlType`1<Nullable`1<Guid>> UniqueIdentifier { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[SqlExpression("sql_variant")]
public static SqlType`1<object> SqlVariant { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[SqlExpression("table")]
public static SqlType`1<object> Table { get; }
    protected SqlType(string dataType);
    public virtual string ToString();
    public static SqlType`1<Nullable`1<long>> get_BigInt();
    [SqlExpression("numeric")]
public static SqlType`1<Nullable`1<decimal>> Numeric();
    [SqlExpression("numeric({0})")]
public static SqlType`1<Nullable`1<decimal>> Numeric(int precision);
    [SqlExpression("numeric({0}, {1})")]
public static SqlType`1<Nullable`1<decimal>> Numeric(int precision, int scale);
    public static SqlType`1<Nullable`1<bool>> get_Bit();
    public static SqlType`1<Nullable`1<short>> get_SmallInt();
    [SqlExpression("decimal")]
public static SqlType`1<Nullable`1<decimal>> Decimal();
    [SqlExpression("decimal({0})")]
public static SqlType`1<Nullable`1<decimal>> Decimal(int precision);
    [SqlExpression("decimal({0}, {1})")]
public static SqlType`1<Nullable`1<decimal>> Decimal(int precision, int scale);
    public static SqlType`1<Nullable`1<decimal>> get_SmallMoney();
    public static SqlType`1<Nullable`1<int>> get_Int();
    public static SqlType`1<Nullable`1<byte>> get_TinyInt();
    public static SqlType`1<Nullable`1<decimal>> get_Money();
    [SqlExpression("float")]
public static SqlType`1<Nullable`1<double>> Float();
    [SqlExpression("float({0})")]
public static SqlType`1<Nullable`1<double>> Float(int n);
    public static SqlType`1<Nullable`1<float>> get_Real();
    public static SqlType`1<Nullable`1<DateTime>> get_Date();
    [SqlExpression("datetimeoffset")]
public static SqlType`1<Nullable`1<DateTimeOffset>> DatetimeOffset();
    [SqlExpression("datetimeoffset({0})")]
public static SqlType`1<Nullable`1<DateTimeOffset>> DatetimeOffset(int size);
    [SqlExpression("datetime2")]
public static SqlType`1<Nullable`1<DateTime>> Datetime2();
    [SqlExpression("datetime2({0})")]
public static SqlType`1<Nullable`1<DateTime>> Datetime2(int size);
    public static SqlType`1<Nullable`1<DateTime>> get_SmallDatetime();
    public static SqlType`1<Nullable`1<DateTime>> get_Datetime();
    [SqlExpression("time")]
public static SqlType`1<Nullable`1<TimeSpan>> Time();
    [SqlExpression("time({0})")]
public static SqlType`1<Nullable`1<TimeSpan>> Time(int size);
    [SqlExpression("char")]
public static SqlType`1<string> Char();
    [SqlExpression("char({0})")]
public static SqlType`1<string> Char(int size);
    public static SqlType`1<string> get_CharMax();
    [SqlExpression("varchar")]
public static SqlType`1<string> VarChar();
    [SqlExpression("varchar({0})")]
public static SqlType`1<string> VarChar(int size);
    public static SqlType`1<string> get_VarCharMax();
    public static SqlType`1<string> get_Text();
    [SqlExpression("nchar")]
public static SqlType`1<string> NChar();
    [SqlExpression("nchar({0})")]
public static SqlType`1<string> NChar(int size);
    public static SqlType`1<string> get_NCharMax();
    [SqlExpression("nvarchar")]
public static SqlType`1<string> NVarChar();
    [SqlExpression("nvarchar({0})")]
public static SqlType`1<string> NVarChar(int size);
    public static SqlType`1<string> get_NVarCharMax();
    public static SqlType`1<string> get_NText();
    [SqlExpression("binary")]
public static SqlType`1<Byte[]> Binary();
    [SqlExpression("binary({0})")]
public static SqlType`1<Byte[]> Binary(int size);
    public static SqlType`1<Byte[]> get_BinaryMax();
    [SqlExpression("varbinary")]
public static SqlType`1<Byte[]> VarBinary();
    [SqlExpression("varbinary({0})")]
public static SqlType`1<Byte[]> VarBinary(int size);
    public static SqlType`1<Byte[]> get_VarBinaryMax();
    public static SqlType`1<Byte[]> get_Image();
    public static SqlType`1<object> get_Cursor();
    public static SqlType`1<Byte[]> get_RowVersion();
    [SqlExpression("hierarchyid")]
public static SqlType`1<object> HierarchyID();
    [SqlExpression("hierarchyid")]
public static SqlType`1<T> HierarchyID();
    public static SqlType`1<Nullable`1<Guid>> get_UniqueIdentifier();
    public static SqlType`1<object> get_SqlVariant();
    [SqlExpression("xml")]
public static SqlType`1<string> Xml();
    [SqlExpression("xml")]
public static SqlType`1<T> Xml();
    [SqlExpression("geometry")]
public static SqlType`1<object> Geometry();
    [SqlExpression("geometry")]
public static SqlType`1<T> Geometry();
    [SqlExpression("geography")]
public static SqlType`1<object> Geography();
    [SqlExpression("geography")]
public static SqlType`1<T> Geography();
    public static SqlType`1<object> get_Table();
}
public class LinqToDB.DataProvider.SqlServer.SqlType`1 : SqlType {
    [NullableContextAttribute("1")]
public SqlType`1(string dataType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class LinqToDB.DataProvider.SqlTypes : object {
    internal static string TypesNamespace;
    internal static string GetSqlBinaryReaderMethod;
    internal static string GetSqlBooleanReaderMethod;
    internal static string GetSqlByteReaderMethod;
    internal static string GetSqlDateTimeReaderMethod;
    internal static string GetSqlDecimalReaderMethod;
    internal static string GetSqlDoubleReaderMethod;
    internal static string GetSqlGuidReaderMethod;
    internal static string GetSqlInt16ReaderMethod;
    internal static string GetSqlInt32ReaderMethod;
    internal static string GetSqlInt64ReaderMethod;
    internal static string GetSqlMoneyReaderMethod;
    internal static string GetSqlSingleReaderMethod;
    internal static string GetSqlStringReaderMethod;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.DataProvider.Sybase.SybaseBulkCopy : BasicBulkCopy {
    private SybaseDataProvider _provider;
    protected int MaxSqlLength { get; }
    protected int MaxParameters { get; }
    public SybaseBulkCopy(SybaseDataProvider provider);
    protected virtual int get_MaxSqlLength();
    protected virtual int get_MaxParameters();
    protected virtual BulkCopyRowsCopied ProviderSpecificCopy(ITable`1<T> table, DataOptions options, IEnumerable`1<T> source);
    protected virtual Task`1<BulkCopyRowsCopied> ProviderSpecificCopyAsync(ITable`1<T> table, DataOptions options, IEnumerable`1<T> source, CancellationToken cancellationToken);
    protected virtual Task`1<BulkCopyRowsCopied> ProviderSpecificCopyAsync(ITable`1<T> table, DataOptions options, IAsyncEnumerable`1<T> source, CancellationToken cancellationToken);
    private Nullable`1<ProviderConnections> GetProviderConnection(ITable`1<T> table);
    private BulkCopyRowsCopied ProviderSpecificCopyInternal(ProviderConnections providerConnections, ITable`1<T> table, BulkCopyOptions options, Func`2<List`1<ColumnDescriptor>, BulkCopyReader`1<T>> createDataReader);
    protected virtual BulkCopyRowsCopied MultipleRowsCopy(ITable`1<T> table, DataOptions options, IEnumerable`1<T> source);
    protected virtual Task`1<BulkCopyRowsCopied> MultipleRowsCopyAsync(ITable`1<T> table, DataOptions options, IEnumerable`1<T> source, CancellationToken cancellationToken);
    protected virtual Task`1<BulkCopyRowsCopied> MultipleRowsCopyAsync(ITable`1<T> table, DataOptions options, IAsyncEnumerable`1<T> source, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class LinqToDB.DataProvider.Sybase.SybaseDataProvider : DynamicDataProviderBase`1<SybaseProviderAdapter> {
    private ISqlOptimizer _sqlOptimizer;
    [NullableAttribute("2")]
private SybaseBulkCopy _bulkCopy;
    public TableOptions SupportedTableOptions { get; }
    protected SybaseDataProvider(string name);
    private static DateTime GetDateTimeAsTime(DateTime value);
    public virtual Type ConvertParameterType(Type type, DbDataType dataType);
    public virtual TableOptions get_SupportedTableOptions();
    public virtual ISqlBuilder CreateSqlBuilder(MappingSchema mappingSchema, DataOptions dataOptions);
    public virtual ISqlOptimizer GetSqlOptimizer(DataOptions dataOptions);
    public virtual ISchemaProvider GetSchemaProvider();
    public virtual IQueryParametersNormalizer GetQueryParameterNormalizer();
    public virtual void SetParameter(DataConnection dataConnection, DbParameter parameter, string name, DbDataType dataType, object value);
    protected virtual void SetParameterType(DataConnection dataConnection, DbParameter parameter, DbDataType dataType);
    public virtual BulkCopyRowsCopied BulkCopy(DataOptions options, ITable`1<T> table, IEnumerable`1<T> source);
    public virtual Task`1<BulkCopyRowsCopied> BulkCopyAsync(DataOptions options, ITable`1<T> table, IEnumerable`1<T> source, CancellationToken cancellationToken);
    public virtual Task`1<BulkCopyRowsCopied> BulkCopyAsync(DataOptions options, ITable`1<T> table, IAsyncEnumerable`1<T> source, CancellationToken cancellationToken);
}
internal class LinqToDB.DataProvider.Sybase.SybaseDataProviderManaged : SybaseDataProvider {
}
internal class LinqToDB.DataProvider.Sybase.SybaseDataProviderNative : SybaseDataProvider {
}
[UsedImplicitlyAttribute]
internal class LinqToDB.DataProvider.Sybase.SybaseFactory : object {
    [NullableContextAttribute("1")]
private sealed virtual override IDataProvider LinqToDB.DataProvider.IDataProviderFactory.GetDataProvider(IEnumerable`1<NamedValue> attributes);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.DataProvider.Sybase.SybaseMappingSchema : LockedMappingSchema {
    private static string TIME3_FORMAT;
    private static Action`2<StringBuilder, int> AppendConversionAction;
    internal static SybaseMappingSchema Instance;
    private static SybaseMappingSchema();
    private static void ConvertBinaryToSql(StringBuilder stringBuilder, Byte[] value);
    private static void ConvertTimeSpanToSql(StringBuilder stringBuilder, SqlDataType sqlDataType, TimeSpan value);
    private static void AppendConversion(StringBuilder stringBuilder, int value);
    private static void ConvertStringToSql(StringBuilder stringBuilder, string value);
    private static void ConvertCharToSql(StringBuilder stringBuilder, char value);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class LinqToDB.DataProvider.Sybase.SybaseOptions : DataProviderOptions`1<SybaseOptions> {
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public SybaseOptions(BulkCopyType BulkCopyType);
    private SybaseOptions(SybaseOptions original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    protected virtual IdentifierBuilder CreateID(IdentifierBuilder builder);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(SybaseOptions other);
    public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(SybaseOptions left, SybaseOptions right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(SybaseOptions left, SybaseOptions right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(DataProviderOptions`1<SybaseOptions> other);
    [CompilerGeneratedAttribute]
public virtual DataProviderOptions`1<SybaseOptions> <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(BulkCopyType& BulkCopyType);
}
public class LinqToDB.DataProvider.Sybase.SybaseParametersNormalizer : UniqueParametersNormalizer {
    protected int MaxLength { get; }
    protected virtual int get_MaxLength();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.DataProvider.Sybase.SybaseProviderAdapter : object {
    private static object _nativeSyncRoot;
    private static object _managedSyncRoot;
    [NullableAttribute("2")]
private static SybaseProviderAdapter _nativeInstance;
    [NullableAttribute("2")]
private static SybaseProviderAdapter _managedInstance;
    public static string NativeAssemblyName;
    public static string NativeClientNamespace;
    public static string NativeProviderFactoryName;
    public static string ManagedAssemblyName;
    public static string ManagedClientNamespace;
    [CompilerGeneratedAttribute]
private Type <ConnectionType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <DataReaderType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ParameterType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <CommandType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <TransactionType>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`2<DbParameter, AseDbType> <SetDbType>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<DbParameter, AseDbType> <GetDbType>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private BulkCopyAdapter <BulkCopy>k__BackingField;
    public Type ConnectionType { get; }
    public Type DataReaderType { get; }
    public Type ParameterType { get; }
    public Type CommandType { get; }
    public Type TransactionType { get; }
    public Action`2<DbParameter, AseDbType> SetDbType { get; }
    public Func`2<DbParameter, AseDbType> GetDbType { get; }
    [NullableAttribute("2")]
public BulkCopyAdapter BulkCopy { get; }
    private SybaseProviderAdapter(Type connectionType, Type dataReaderType, Type parameterType, Type commandType, Type transactionType, Action`2<DbParameter, AseDbType> dbTypeSetter, Func`2<DbParameter, AseDbType> dbTypeGetter, BulkCopyAdapter bulkCopy);
    private static SybaseProviderAdapter();
    [CompilerGeneratedAttribute]
public sealed virtual Type get_ConnectionType();
    [CompilerGeneratedAttribute]
public sealed virtual Type get_DataReaderType();
    [CompilerGeneratedAttribute]
public sealed virtual Type get_ParameterType();
    [CompilerGeneratedAttribute]
public sealed virtual Type get_CommandType();
    [CompilerGeneratedAttribute]
public sealed virtual Type get_TransactionType();
    [CompilerGeneratedAttribute]
public Action`2<DbParameter, AseDbType> get_SetDbType();
    [CompilerGeneratedAttribute]
public Func`2<DbParameter, AseDbType> get_GetDbType();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public BulkCopyAdapter get_BulkCopy();
    public static SybaseProviderAdapter GetInstance(string name);
    private static SybaseProviderAdapter CreateAdapter(string assemblyName, string clientNamespace, string dbFactoryName, bool supportsBulkCopy);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.DataProvider.Sybase.SybaseSchemaProvider : SchemaProviderBase {
    private SybaseDataProvider _provider;
    public SybaseSchemaProvider(SybaseDataProvider provider);
    [NullableContextAttribute("2")]
protected virtual DataType GetDataType(string dataType, string columnType, Nullable`1<int> length, Nullable`1<int> precision, Nullable`1<int> scale);
    [NullableContextAttribute("2")]
protected virtual string GetProviderSpecificTypeNamespace();
    protected virtual List`1<TableInfo> GetTables(DataConnection dataConnection, GetSchemaOptions options);
    protected virtual IReadOnlyCollection`1<PrimaryKeyInfo> GetPrimaryKeys(DataConnection dataConnection, IEnumerable`1<TableSchema> tables, GetSchemaOptions options);
    protected virtual List`1<ColumnInfo> GetColumns(DataConnection dataConnection, GetSchemaOptions options);
    protected virtual IReadOnlyCollection`1<ForeignKeyInfo> GetForeignKeys(DataConnection dataConnection, IEnumerable`1<TableSchema> tables, GetSchemaOptions options);
    protected virtual List`1<ProcedureInfo> GetProcedures(DataConnection dataConnection, GetSchemaOptions options);
    protected virtual List`1<ProcedureParameterInfo> GetProcedureParameters(DataConnection dataConnection, IEnumerable`1<ProcedureInfo> procedures, GetSchemaOptions options);
    protected virtual DataTable GetProcedureSchema(DataConnection dataConnection, string commandText, CommandType commandType, DataParameter[] parameters, GetSchemaOptions options);
    protected virtual List`1<ColumnSchema> GetProcedureResultColumns(DataTable resultTable, GetSchemaOptions options);
    protected virtual List`1<DataTypeInfo> GetDataTypes(DataConnection dataConnection);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.DataProvider.Sybase.SybaseSqlBuilder : BasicSqlBuilder {
    private bool _isSelect;
    private bool _skipAliases;
    private bool _skipBrackets;
    protected bool SupportsColumnAliasesInSource { get; }
    protected bool IsValuesSyntaxSupported { get; }
    public SybaseSqlBuilder(IDataProvider provider, MappingSchema mappingSchema, DataOptions dataOptions, ISqlOptimizer sqlOptimizer, SqlProviderFlags sqlProviderFlags);
    private SybaseSqlBuilder(BasicSqlBuilder parentBuilder);
    protected virtual ISqlBuilder CreateSqlBuilder();
    protected virtual void BuildGetIdentity(SqlInsertClause insertClause);
    protected virtual bool get_SupportsColumnAliasesInSource();
    protected virtual string FirstFormat(SelectQuery selectQuery);
    protected virtual void BuildSelectClause(SelectQuery selectQuery);
    [NullableContextAttribute("2")]
protected virtual void BuildColumnExpression(SelectQuery selectQuery, ISqlExpression expr, string alias, Boolean& addAlias);
    protected virtual void BuildDataTypeFromDataType(SqlDataType type, bool forCreateTable, bool canBeNull);
    protected virtual void BuildCreateTableNullAttribute(SqlField field, DefaultNullable defaultNullable);
    protected virtual void BuildDeleteClause(SqlDeleteStatement deleteStatement);
    protected virtual void BuildUpdateTableName(SelectQuery selectQuery, SqlUpdateClause updateClause);
    public virtual StringBuilder Convert(StringBuilder sb, string value, ConvertType convertType);
    protected virtual void BuildInsertOrUpdateQuery(SqlInsertOrUpdateStatement insertOrUpdate);
    protected virtual void BuildEmptyInsert(SqlInsertClause insertClause);
    protected virtual void BuildCreateTableIdentityAttribute1(SqlField field);
    protected virtual void BuildCreateTablePrimaryKey(SqlCreateTableStatement createTable, string pkName, IEnumerable`1<string> fieldNames);
    protected virtual string GetProviderTypeName(IDataContext dataContext, DbParameter parameter);
    protected virtual void BuildTruncateTable(SqlTruncateTableStatement truncateTable);
    public virtual int CommandCount(SqlStatement statement);
    protected virtual void BuildCommand(SqlStatement statement, int commandNumber);
    private void BuildIdentityInsert(SqlTableSource table, bool enable);
    private static string GetTablePhysicalName(string physicalName, TableOptions tableOptions);
    public virtual StringBuilder BuildObjectName(StringBuilder sb, SqlObjectName name, ConvertType objectType, bool escape, TableOptions tableOptions, bool withoutSuffix);
    protected virtual void BuildDropTableStatement(SqlDropTableStatement dropTable);
    protected virtual void BuildStartCreateTableStatement(SqlCreateTableStatement createTable);
    protected virtual void BuildEndCreateTableStatement(SqlCreateTableStatement createTable);
    private static bool IsTemporary(string tableName, TableOptions tableOptions);
    protected virtual void BuildIsDistinctPredicate(IsDistinct expr);
    protected virtual bool get_IsValuesSyntaxSupported();
    protected virtual void BuildMergeTerminator(SqlMergeStatement merge);
    protected virtual void BuildMergeStatement(SqlMergeStatement merge);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.DataProvider.Sybase.SybaseSqlOptimizer : BasicSqlOptimizer {
    private static String[] SybaseCharactersToEscape;
    public String[] LikeCharactersToEscape { get; }
    public SybaseSqlOptimizer(SqlProviderFlags sqlProviderFlags);
    private static SybaseSqlOptimizer();
    public virtual SqlStatement TransformStatement(SqlStatement statement, DataOptions dataOptions);
    public virtual String[] get_LikeCharactersToEscape();
    protected virtual ISqlExpression ConvertFunction(SqlFunction func);
    private static SqlStatement PrepareUpdateStatement(SqlUpdateStatement statement);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class LinqToDB.DataProvider.Sybase.SybaseTools : object {
    private static Lazy`1<IDataProvider> _sybaseManagedDataProvider;
    [NullableAttribute("2")]
private static string _detectedProviderName;
    public static string DetectedProviderName { get; }
    [ObsoleteAttribute("Use SybaseOptions.Default.BulkCopyType instead.")]
public static BulkCopyType DefaultBulkCopyType { get; public set; }
    private static SybaseTools();
    internal static IDataProvider ProviderDetector(ConnectionOptions options);
    public static string get_DetectedProviderName();
    private static string DetectProviderName();
    [NullableContextAttribute("2")]
public static IDataProvider GetDataProvider(string providerName, string assemblyName);
    public static void ResolveSybase(string path);
    public static void ResolveSybase(Assembly assembly);
    public static DataConnection CreateDataConnection(string connectionString, string providerName);
    public static DataConnection CreateDataConnection(DbConnection connection, string providerName);
    public static DataConnection CreateDataConnection(DbTransaction transaction, string providerName);
    public static BulkCopyType get_DefaultBulkCopyType();
    public static void set_DefaultBulkCopyType(BulkCopyType value);
}
internal class LinqToDB.DataProvider.TableSpecHintExtensionBuilder : object {
    [NullableContextAttribute("1")]
private sealed virtual override void LinqToDB.SqlQuery.ISqlTableExtensionBuilder.Build(ISqlBuilder sqlBuilder, StringBuilder stringBuilder, SqlQueryExtension sqlQueryExtension, SqlTable table, string alias);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.DataProvider.UniqueParametersNormalizer : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private HashSet`1<string> _usedParameterNames;
    protected StringComparer Comparer { get; }
    protected string DefaultName { get; }
    protected string CounterSeparator { get; }
    protected int MaxLength { get; }
    protected virtual StringComparer get_Comparer();
    protected virtual string get_DefaultName();
    protected virtual string get_CounterSeparator();
    protected virtual int get_MaxLength();
    protected virtual string MakeValidName(string name);
    protected virtual bool IsValidFirstCharacter(char chr);
    protected virtual bool IsValidCharacter(char chr);
    protected virtual bool IsReserved(string name);
    [NullableContextAttribute("2")]
public sealed virtual string Normalize(string originalName);
}
public enum LinqToDB.DataType : Enum {
    public int value__;
    public static DataType Undefined;
    public static DataType Char;
    public static DataType VarChar;
    public static DataType Text;
    public static DataType NChar;
    public static DataType NVarChar;
    public static DataType NText;
    public static DataType Binary;
    public static DataType VarBinary;
    public static DataType Blob;
    public static DataType Image;
    public static DataType Boolean;
    public static DataType Guid;
    public static DataType SByte;
    public static DataType Int16;
    public static DataType Int32;
    public static DataType Int64;
    public static DataType Byte;
    public static DataType UInt16;
    public static DataType UInt32;
    public static DataType UInt64;
    public static DataType Single;
    public static DataType Double;
    public static DataType Decimal;
    public static DataType Money;
    public static DataType SmallMoney;
    public static DataType Date;
    public static DataType Date32;
    public static DataType Time;
    public static DataType DateTime;
    public static DataType DateTime2;
    public static DataType SmallDateTime;
    public static DataType DateTimeOffset;
    public static DataType DateTime64;
    public static DataType Timestamp;
    public static DataType Xml;
    public static DataType Variant;
    public static DataType VarNumeric;
    public static DataType Udt;
    public static DataType BitArray;
    public static DataType Dictionary;
    public static DataType Cursor;
    public static DataType Json;
    public static DataType BinaryJson;
    public static DataType Structured;
    public static DataType Long;
    public static DataType LongRaw;
    public static DataType Interval;
    public static DataType Enum;
    public static DataType Enum8;
    public static DataType Enum16;
    public static DataType BFile;
    public static DataType DecFloat;
    public static DataType TimeTZ;
    public static DataType Int128;
    public static DataType UInt128;
    public static DataType Int256;
    public static DataType UInt256;
    public static DataType IPv4;
    public static DataType IPv6;
    public static DataType IntervalSecond;
    public static DataType IntervalMinute;
    public static DataType IntervalHour;
    public static DataType IntervalDay;
    public static DataType IntervalWeek;
    public static DataType IntervalMonth;
    public static DataType IntervalQuarter;
    public static DataType IntervalYear;
    public static DataType Decimal32;
    public static DataType Decimal64;
    public static DataType Decimal128;
    public static DataType Decimal256;
}
internal class LinqToDB.DisposeCommandOnExceptionRegion : object {
    [NullableAttribute("1")]
private DataConnection _dataConnection;
    [NullableContextAttribute("1")]
public DisposeCommandOnExceptionRegion(DataConnection dataConnection);
    private sealed virtual override void System.IDisposable.Dispose();
    private sealed virtual override ValueTask System.IAsyncDisposable.DisposeAsync();
}
internal static class LinqToDB.EmptyIAsyncDisposable : object {
    [NullableAttribute("1")]
public static IAsyncDisposable Instance;
    private static EmptyIAsyncDisposable();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[PublicAPIAttribute]
[AttributeUsageAttribute("192")]
public class LinqToDB.ExpressionMethodAttribute : MappingAttribute {
    [CompilerGeneratedAttribute]
private string <MethodName>k__BackingField;
    [CompilerGeneratedAttribute]
private LambdaExpression <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Alias>k__BackingField;
    public string MethodName { get; public set; }
    public LambdaExpression Expression { get; public set; }
    public bool IsColumn { get; public set; }
    public string Alias { get; public set; }
    [NullableContextAttribute("1")]
public ExpressionMethodAttribute(string methodName);
    [NullableContextAttribute("1")]
public ExpressionMethodAttribute(LambdaExpression expression);
    [NullableContextAttribute("1")]
public ExpressionMethodAttribute(string configuration, string methodName);
    [CompilerGeneratedAttribute]
public string get_MethodName();
    [CompilerGeneratedAttribute]
public void set_MethodName(string value);
    [CompilerGeneratedAttribute]
public LambdaExpression get_Expression();
    [CompilerGeneratedAttribute]
public void set_Expression(LambdaExpression value);
    [CompilerGeneratedAttribute]
public bool get_IsColumn();
    [CompilerGeneratedAttribute]
public void set_IsColumn(bool value);
    [CompilerGeneratedAttribute]
public string get_Alias();
    [CompilerGeneratedAttribute]
public void set_Alias(string value);
    [NullableContextAttribute("1")]
public virtual string GetObjectID();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Expressions.ChangeTypeExpression : Expression {
    public static ExpressionType ChangeTypeType;
    private Type _type;
    [CompilerGeneratedAttribute]
private Expression <Expression>k__BackingField;
    public Type Type { get; }
    public ExpressionType NodeType { get; }
    public Expression Expression { get; private set; }
    public ChangeTypeExpression(Expression expression, Type type);
    public virtual Type get_Type();
    public virtual ExpressionType get_NodeType();
    [CompilerGeneratedAttribute]
public Expression get_Expression();
    [CompilerGeneratedAttribute]
private void set_Expression(Expression value);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Expressions.ContextRefExpression : Expression {
    [CompilerGeneratedAttribute]
private Type <ElementType>k__BackingField;
    [CompilerGeneratedAttribute]
private IBuildContext <BuildContext>k__BackingField;
    public Type ElementType { get; }
    public IBuildContext BuildContext { get; }
    public ExpressionType NodeType { get; }
    public Type Type { get; }
    public bool CanReduce { get; }
    public ContextRefExpression(Type elementType, IBuildContext buildContext);
    [CompilerGeneratedAttribute]
public Type get_ElementType();
    [CompilerGeneratedAttribute]
public IBuildContext get_BuildContext();
    public virtual ExpressionType get_NodeType();
    public virtual Type get_Type();
    public virtual string ToString();
    public virtual bool get_CanReduce();
    private bool Equals(ContextRefExpression other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Expressions.ConvertFromDataReaderExpression : Expression {
    private int _idx;
    private Expression _dataReaderParam;
    private Type _type;
    [NullableAttribute("2")]
private IDataContext _slowModeDataContext;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IValueConverter <Converter>k__BackingField;
    [NullableAttribute("2")]
public IValueConverter Converter { get; }
    public Type Type { get; }
    public ExpressionType NodeType { get; }
    public bool CanReduce { get; }
    public int Index { get; }
    public ConvertFromDataReaderExpression(Type type, int idx, IValueConverter converter, Expression dataReaderParam);
    public ConvertFromDataReaderExpression(Type type, int idx, IValueConverter converter, Expression dataReaderParam, IDataContext dataContext);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IValueConverter get_Converter();
    public virtual Type get_Type();
    public virtual ExpressionType get_NodeType();
    public virtual bool get_CanReduce();
    public int get_Index();
    public virtual Expression Reduce();
    public Expression Reduce(IDataContext dataContext, bool slowMode);
    public Expression Reduce(IDataContext dataContext, DbDataReader dataReader);
    public Expression Reduce(IDataContext dataContext, DbDataReader dataReader, Expression dataReaderParam);
    private static Expression ConvertExpressionToType(Expression current, Type toType, MappingSchema mappingSchema);
    private static Expression GetColumnReader(IDataContext dataContext, MappingSchema mappingSchema, DbDataReader dataReader, Type type, IValueConverter converter, int idx, Expression dataReaderExpr, bool forceNullCheck);
    public virtual string ToString();
    public ConvertFromDataReaderExpression MakeNullable();
    public ConvertFromDataReaderExpression MakeNotNullable();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("8192")]
public class LinqToDB.Expressions.CustomMapperAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <Mapper>k__BackingField;
    internal Type Mapper { get; }
    public CustomMapperAttribute(Type mapper);
    [CompilerGeneratedAttribute]
internal Type get_Mapper();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.Expressions.DefaultValueExpression : Expression {
    [NullableAttribute("2")]
private MappingSchema _mappingSchema;
    private Type _type;
    public Type Type { get; }
    public ExpressionType NodeType { get; }
    public bool CanReduce { get; }
    public DefaultValueExpression(MappingSchema mappingSchema, Type type);
    public virtual Type get_Type();
    public virtual ExpressionType get_NodeType();
    public virtual bool get_CanReduce();
    public virtual Expression Reduce();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class LinqToDB.Expressions.EqualsToVisitor : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ConcurrentDictionary`2<MethodInfo, IList`1<SqlQueryDependentAttribute>> _queryDependentMethods;
    private static ConcurrentDictionary`2<MethodInfo, Boolean[]> _skipContantArgumentsMethods;
    private static EqualsToVisitor();
    public static void ClearCaches();
    [ExtensionAttribute]
internal static bool EqualsTo(Expression expr1, Expression expr2, IDataContext dataContext, IReadOnlyDictionary`2<Expression, QueryableAccessor> queryableAccessorDic, IReadOnlyDictionary`2<MemberInfo, QueryableMemberAccessor> queryableMemberAccessorDic, IReadOnlyDictionary`2<Expression, Expression> queryDependedObjects, bool compareConstantValues);
    internal static EqualsToInfo PrepareEqualsInfo(IDataContext dataContext, IReadOnlyDictionary`2<Expression, QueryableAccessor> queryableAccessorDic, IReadOnlyDictionary`2<MemberInfo, QueryableMemberAccessor> queryableMemberAccessorDic, IReadOnlyDictionary`2<Expression, Expression> queryDependedObjects, bool compareConstantValues);
    private static bool CompareMemberExpression(MemberInfo memberInfo, EqualsToInfo info);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
internal static bool EqualsTo(Expression expr1, Expression expr2, EqualsToInfo info);
    private static bool EqualsToX(BlockExpression expr1, BlockExpression expr2, EqualsToInfo info);
    private static bool EqualsToX(NewArrayExpression expr1, NewArrayExpression expr2, EqualsToInfo info);
    private static bool EqualsToX(NewExpression expr1, NewExpression expr2, EqualsToInfo info);
    private static bool EqualsToX(MemberInitExpression expr1, MemberInitExpression expr2, EqualsToInfo info);
    [NullableContextAttribute("2")]
private static bool CompareBindings(MemberBinding b1, MemberBinding b2, EqualsToInfo info);
    private static bool EqualsToX(MemberExpression expr1, MemberExpression expr2, EqualsToInfo info);
    private static bool EqualsToX(ListInitExpression expr1, ListInitExpression expr2, EqualsToInfo info);
    private static bool EqualsToX(LambdaExpression expr1, LambdaExpression expr2, EqualsToInfo info);
    private static bool EqualsToX(InvocationExpression expr1, InvocationExpression expr2, EqualsToInfo info);
    private static bool EqualsToX(ConstantExpression expr1, ConstantExpression expr2, EqualsToInfo info);
    private static bool EqualsToX(MethodCallExpression expr1, MethodCallExpression expr2, EqualsToInfo info);
    private static bool DefaultCompareArguments(Expression arg1, Expression arg2, EqualsToInfo info);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Expressions.ExpressionEqualityComparer : object {
    [CompilerGeneratedAttribute]
private static IEqualityComparer`1<Expression> <Instance>k__BackingField;
    public static IEqualityComparer`1<Expression> Instance { get; }
    private static ExpressionEqualityComparer();
    [CompilerGeneratedAttribute]
public static IEqualityComparer`1<Expression> get_Instance();
    [NullableContextAttribute("2")]
public sealed virtual int GetHashCode(Expression obj);
    private int GetHashCode(IList`1<T> expressions);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(Expression x, Expression y);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class LinqToDB.Expressions.ExpressionEvaluator : object {
    [ExtensionAttribute]
public static T EvaluateExpression(Expression expr, IDataContext dataContext);
    [ExtensionAttribute]
public static object EvaluateExpression(Expression expr, IDataContext dataContext);
    [CompilerGeneratedAttribute]
internal static object <EvaluateExpression>g__Evaluate|1_1(Expression expr, IDataContext dataContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class LinqToDB.Expressions.ExpressionExtensions : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Func`2<Expression, string> _getDebugView;
    [ExtensionAttribute]
public static string GetDebugView(Expression expression);
    [ExtensionAttribute]
public static int GetCount(Expression expr, TContext context, Func`3<TContext, Expression, bool> func);
    [ExtensionAttribute]
public static void Visit(Expression expr, TContext context, Action`2<TContext, Expression> func);
    [ExtensionAttribute]
public static void Visit(Expression expr, TContext context, Func`3<TContext, Expression, bool> func);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Expression Find(Expression expr, Expression exprToFind);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Expression Find(Expression expr, TContext context, Func`3<TContext, Expression, bool> func);
    [ExtensionAttribute]
public static Expression Replace(Expression expression, Expression toReplace, Expression replacedBy);
    [ExtensionAttribute]
public static Expression Replace(Expression expression, Expression toReplace, Expression replacedBy, IEqualityComparer`1<Expression> equalityComparer);
    [ExtensionAttribute]
public static Expression GetBody(LambdaExpression lambda, Expression exprToReplaceParameter);
    [ExtensionAttribute]
public static Expression GetBody(LambdaExpression lambda, Expression exprToReplaceParameter1, Expression exprToReplaceParameter2);
    [ExtensionAttribute]
public static Expression GetBody(LambdaExpression lambda, Expression exprToReplaceParameter1, Expression exprToReplaceParameter2, Expression exprToReplaceParameter3);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Expression Transform(Expression expr, TContext context, Func`3<TContext, Expression, Expression> func);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Expression Transform(Expression expr, Func`2<Expression, Expression> func);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Expression Transform(Expression expr, TContext context, Func`3<TContext, Expression, TransformInfo> func);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Expression Transform(Expression expr, Func`2<Expression, TransformInfo> func);
    public static Expression GetMemberGetter(MemberInfo mi, Expression obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.Expressions.ExpressionGenerator : object {
    private List`1<ParameterExpression> _variables;
    private List`1<Expression> _expressions;
    private TypeMapper _mapper;
    public Expression ResultExpression { get; }
    public ExpressionGenerator(TypeMapper mapper);
    public Expression get_ResultExpression();
    public ParameterExpression DeclareVariable(Type type, string name);
    public ParameterExpression AddVariable(ParameterExpression variable);
    public Expression AddExpression(Expression expression);
    public Expression Build();
    public static Expression Build(Action`1<ExpressionGenerator> buildFunc, TypeMapper typeMapper);
    public Expression Assign(Expression left, Expression right);
    public ParameterExpression AssignToVariable(Expression expression, string name);
    public Expression Throw(Expression expression);
    public Expression IfThen(Expression test, Expression ifTrue);
    public Expression IfThenElse(Expression test, Expression ifTrue, Expression ifFalse);
    public Expression Condition(Expression test, Expression ifTrue, Expression ifFalse);
    public Expression TryCatch(Expression body, CatchBlock[] catchBlocks);
    public MemberExpression MemberAccess(Expression`1<Func`2<T, object>> memberExpression, Expression obj);
    public Expression MapExpression(Expression`1<Func`1<TR>> func);
    public Expression MapExpression(Expression`1<Func`2<T, TR>> func, Expression p);
    public Expression MapExpression(Expression`1<Func`3<T1, T2, TR>> func, Expression p1, Expression p2);
    public Expression MapExpression(Expression`1<Func`4<T1, T2, T3, TR>> func, Expression p1, Expression p2, Expression p3);
    public Expression MapExpression(Expression`1<Func`5<T1, T2, T3, T4, TR>> func, Expression p1, Expression p2, Expression p3, Expression p4);
    public Expression MapExpression(Expression`1<Func`6<T1, T2, T3, T4, T5, TR>> func, Expression p1, Expression p2, Expression p3, Expression p4, Expression p5);
    public Expression MapAction(Expression`1<Action> action);
    public Expression MapAction(Expression`1<Action`1<T>> action, Expression p);
    public Expression MapAction(Expression`1<Action`2<T1, T2>> action, Expression p1, Expression p2);
    public Expression MapAction(Expression`1<Action`3<T1, T2, T3>> action, Expression p1, Expression p2, Expression p3);
    public Expression MapAction(Expression`1<Action`4<T1, T2, T3, T4>> action, Expression p1, Expression p2, Expression p3, Expression p4);
    public Expression MapAction(Expression`1<Action`5<T1, T2, T3, T4, T5>> action, Expression p1, Expression p2, Expression p3, Expression p4, Expression p5);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class LinqToDB.Expressions.ExpressionHelper : object {
    public static MemberExpression Field(Expression obj, string name);
    public static MemberExpression Field(Type type, string name);
    public static MemberExpression Property(Expression obj, string name);
    public static MemberExpression Property(Type type, string name);
    public static MemberExpression PropertyOrField(Expression obj, string name);
    internal static MemberInfo GetPropertyOrFieldMemberInfo(Type type, string name);
    public static MemberExpression PropertyOrField(Type type, string name, bool allowInherited);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class LinqToDB.Expressions.ExpressionInstances : object {
    public static Expression NullIDataContext;
    public static Expression HashMultiplier;
    public static ConstantExpression True;
    public static ConstantExpression False;
    public static ConstantExpression UntypedNull;
    public static ConstantExpression Constant0;
    public static ConstantExpression Constant1;
    public static ConstantExpression Constant26;
    public static ConstantExpression Constant29;
    private static ConstantExpression[] _int32Constants;
    private static ConstantExpression[][] _int32Length1Arrays;
    private static ExpressionInstances();
    internal static ConstantExpression Int32(int value);
    internal static ConstantExpression[] Int32Array(int value);
    internal static ConstantExpression Boolean(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class LinqToDB.Expressions.FindVisitor`1 : ValueType {
    [NullableAttribute("2")]
internal TContext Context;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`3<TContext, Expression, bool> _func;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<Expression, bool> _staticFunc;
    public FindVisitor`1(TContext context, Func`3<TContext, Expression, bool> func);
    public FindVisitor`1(Func`2<Expression, bool> func);
    public static FindVisitor`1<TContext> Create(TContext context, Func`3<TContext, Expression, bool> func);
    public static FindVisitor`1<object> Create(Func`2<Expression, bool> func);
    [NullableContextAttribute("2")]
private static Expression Find(IEnumerable`1<T> source, Func`2<T, Expression> func);
    private Expression Find(IEnumerable`1<T> source);
    [NullableContextAttribute("2")]
public Expression Find(Expression expr);
    private Expression SwitchCaseFind(SwitchCase sc);
    private Expression CatchBlockFind(CatchBlock cb);
    private Expression MemberBindingFind(MemberBinding b);
    private Expression ElementInitFind(ElementInit ei);
}
internal class LinqToDB.Expressions.GenericTaskToTaskMapper : object {
    [NullableContextAttribute("1")]
private sealed virtual override bool LinqToDB.Expressions.ICustomMapper.CanMap(Expression expression);
    [NullableContextAttribute("1")]
private sealed virtual override Expression LinqToDB.Expressions.ICustomMapper.Map(Expression expression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Expressions.GetItemExpression : Expression {
    private Type _type;
    [CompilerGeneratedAttribute]
private Expression <Expression>k__BackingField;
    public Expression Expression { get; }
    public Type Type { get; }
    public ExpressionType NodeType { get; }
    public bool CanReduce { get; }
    public GetItemExpression(Expression expression, MappingSchema mappingSchema);
    [CompilerGeneratedAttribute]
public Expression get_Expression();
    public virtual Type get_Type();
    public virtual ExpressionType get_NodeType();
    public virtual bool get_CanReduce();
    public virtual Expression Reduce();
}
[NullableContextAttribute("1")]
public interface LinqToDB.Expressions.ICustomMapper {
    public abstract virtual bool CanMap(Expression expression);
    public abstract virtual Expression Map(Expression expression);
}
[NullableContextAttribute("1")]
public interface LinqToDB.Expressions.IGenericInfoProvider {
    public abstract virtual void SetInfo(MappingSchema mappingSchema);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class LinqToDB.Expressions.InternalExtensions : object {
    private static MethodInfo[] SkipPathThroughMethods;
    private static String[] CteMethodNames;
    private static MethodInfo[] TunnelMethods;
    private static InternalExtensions();
    [ExtensionAttribute]
public static bool IsConstantable(Type type, bool includingArrays);
    [ExtensionAttribute]
public static void Path(Expression expr, Expression path, TContext context, Action`3<TContext, Expression, Expression> func);
    [ExtensionAttribute]
public static LambdaExpression UnwrapLambda(Expression ex);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Expression Unwrap(Expression ex);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Expression UnwrapConvert(Expression ex);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Expression UnwrapConvertToObject(Expression ex);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Expression UnwrapWithAs(Expression ex);
    [ExtensionAttribute]
public static Expression SkipPathThrough(Expression expr);
    [ExtensionAttribute]
public static Expression SkipMethodChain(Expression expr, MappingSchema mappingSchema);
    [ExtensionAttribute]
public static Dictionary`2<Expression, Expression> GetExpressionAccessors(Expression expression, Expression path);
    [NullableContextAttribute("2")]
public static Expression GetRootObject(Expression expr, MappingSchema mapping);
    [ExtensionAttribute]
public static List`1<Expression> GetMembers(Expression expr);
    [ExtensionAttribute]
public static bool IsQueryable(MethodCallExpression method, bool enumerable);
    [ExtensionAttribute]
public static bool IsAsyncExtension(MethodCallExpression method, bool enumerable);
    [ExtensionAttribute]
public static bool IsAggregate(MethodCallExpression methodCall, MappingSchema mapping);
    [ExtensionAttribute]
public static bool IsExtensionMethod(MethodCallExpression methodCall, MappingSchema mapping);
    [ExtensionAttribute]
public static bool IsQueryable(MethodCallExpression method, string name);
    [ExtensionAttribute]
public static bool IsQueryable(MethodCallExpression method, String[] names);
    [ExtensionAttribute]
public static bool IsAsyncExtension(MethodCallExpression method, String[] names);
    [ExtensionAttribute]
public static bool IsSameGenericMethod(MethodCallExpression method, MethodInfo genericMethodInfo);
    [ExtensionAttribute]
public static bool IsSameGenericMethod(MethodCallExpression method, MethodInfo[] genericMethodInfo);
    [ExtensionAttribute]
public static bool IsAssociation(MethodCallExpression method, MappingSchema mappingSchema);
    [ExtensionAttribute]
public static bool IsCte(MethodCallExpression method, MappingSchema mappingSchema);
    private static Expression FindLevel(Expression expression, MappingSchema mapping, int level, Int32& current);
    [ExtensionAttribute]
public static Expression GetLevelExpression(Expression expression, MappingSchema mapping, int level);
    private static Expression ExtractMethodCallTunnelExpression(MethodCallExpression call, MappingSchema mapping);
    [ExtensionAttribute]
public static int GetLevel(Expression expression, MappingSchema mapping);
    [ExtensionAttribute]
public static bool IsNullValue(Expression expr);
    [ExtensionAttribute]
public static Expression GetArgumentByName(MethodCallExpression methodCall, string parameterName);
    [ExtensionAttribute]
public static bool IsEvaluable(Expression expression, MappingSchema mappingSchema);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Expression OptimizeExpression(Expression expression, MappingSchema mappingSchema);
    private static TransformInfo OptimizeExpressionTransformer(MappingSchema mappingSchema, Expression e);
    public static Expression ApplyLambdaToExpression(LambdaExpression convertLambda, Expression expression);
}
[AttributeUsageAttribute("64")]
public class LinqToDB.Expressions.IsQueryableAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class LinqToDB.Expressions.MemberHelper : object {
    public static MemberInfo GetMemberInfo(LambdaExpression func);
    public static MemberInfoWithType GetMemberInfoWithType(LambdaExpression func);
    public static MemberInfo GetMemberInfo(Expression expr);
    public static MemberInfoWithType GetMemberInfoWithType(Expression expr);
    public static MemberInfo MemberOf(Expression`1<Func`2<T, object>> func);
    public static MemberInfo MemberOf(Expression`1<Func`2<T, TMember>> func);
    public static FieldInfo FieldOf(Expression`1<Func`2<T, object>> func);
    public static PropertyInfo PropertyOf(Expression`1<Func`2<T, object>> func);
    public static PropertyInfo PropertyOf(Expression`1<Func`1<object>> func);
    public static MethodInfo MethodOf(Expression`1<Func`2<T, object>> func);
    [NullableContextAttribute("2")]
public static MethodInfo MethodOf(Expression`1<Func`3<T1, T2, object>> func);
    [NullableContextAttribute("2")]
public static MethodInfo MethodOf(Expression`1<Func`4<T1, T2, T3, object>> func);
    [NullableContextAttribute("2")]
public static MethodInfo MethodOf(Expression`1<Func`5<T1, T2, T3, T4, object>> func);
    public static MethodInfo MethodOf(Expression`1<Func`1<object>> func);
    public static MethodInfo MethodOf(Expression`1<Action> func);
    public static MethodInfo MethodOfGeneric(Expression`1<Func`2<T, object>> func);
    [NullableContextAttribute("2")]
public static MethodInfo MethodOfGeneric(Expression`1<Func`3<T1, T2, object>> func);
    [NullableContextAttribute("2")]
public static MethodInfo MethodOfGeneric(Expression`1<Func`4<T1, T2, T3, object>> func);
    [NullableContextAttribute("2")]
public static MethodInfo MethodOfGeneric(Expression`1<Func`5<T1, T2, T3, T4, object>> func);
    public static MethodInfo MethodOfGeneric(Expression`1<Func`1<object>> func);
    public static MethodInfo MethodOfGeneric(Expression`1<Action> func);
    public static ConstructorInfo ConstructorOf(Expression`1<Func`2<T, object>> func);
    public static ConstructorInfo ConstructorOf(Expression`1<Func`1<object>> func);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Expressions.PathVisitor`1 : object {
    private TContext _context;
    private Action`3<TContext, Expression, Expression> _func;
    private Expression _path;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private HashSet`1<Expression> _visited;
    public PathVisitor`1(TContext context, Expression path, Action`3<TContext, Expression, Expression> func);
    private void Path(IEnumerable`1<T> source, PropertyInfo property, Action`1<T> func);
    private void Path(IEnumerable`1<T> source, PropertyInfo property);
    private void Path(Expression expr, PropertyInfo property);
    [NullableContextAttribute("2")]
public void Path(Expression expr);
    private void ElementInitPath(ElementInit ei);
    private void MemberBindingPath(MemberBinding b);
    private Expression ConvertPathTo(Type type);
}
[AttributeUsageAttribute("2048")]
internal class LinqToDB.Expressions.SkipIfConstantAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2048")]
public class LinqToDB.Expressions.SqlQueryDependentAttribute : Attribute {
    [NullableContextAttribute("2")]
public virtual bool ObjectsEqual(object obj1, object obj2);
    public virtual bool ExpressionsEqual(TContext context, Expression expr1, Expression expr2, Func`4<TContext, Expression, Expression, bool> comparer);
    public virtual Expression PrepareForCache(Expression expression);
    [IteratorStateMachineAttribute("LinqToDB.Expressions.SqlQueryDependentAttribute/<SplitExpression>d__3")]
public virtual IEnumerable`1<Expression> SplitExpression(Expression expression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2048")]
public class LinqToDB.Expressions.SqlQueryDependentParamsAttribute : SqlQueryDependentAttribute {
    public virtual bool ExpressionsEqual(TContext context, Expression expr1, Expression expr2, Func`4<TContext, Expression, Expression, bool> comparer);
    [IteratorStateMachineAttribute("LinqToDB.Expressions.SqlQueryDependentParamsAttribute/<SplitExpression>d__1")]
public virtual IEnumerable`1<Expression> SplitExpression(Expression expression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.Expressions.TransformInfo : ValueType {
    public Expression Expression;
    public bool Stop;
    public bool Continue;
    public TransformInfo(Expression expression, bool stop);
    public TransformInfo(Expression expression);
    public TransformInfo(Expression expression, bool stop, bool continue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class LinqToDB.Expressions.TransformInfoVisitor`1 : ValueType {
    [NullableAttribute("2")]
private TContext _context;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`3<TContext, Expression, TransformInfo> _func;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<Expression, TransformInfo> _staticFunc;
    public TransformInfoVisitor`1(TContext context, Func`3<TContext, Expression, TransformInfo> func);
    public TransformInfoVisitor`1(Func`2<Expression, TransformInfo> func);
    public static TransformInfoVisitor`1<object> Create(Func`2<Expression, TransformInfo> func);
    public static TransformInfoVisitor`1<TContext> Create(TContext context, Func`3<TContext, Expression, TransformInfo> func);
    [NullableContextAttribute("2")]
public Expression Transform(Expression expr);
    private CatchBlock TransformCatchBlock(CatchBlock h);
    private SwitchCase TransformSwitchCase(SwitchCase cs);
    private static IEnumerable`1<T> Transform(IList`1<T> source, Func`2<T, T> func);
    private IEnumerable`1<T> Transform(IList`1<T> source);
    private ElementInit TransformElementInit(ElementInit p);
    private MemberBinding TransformMemberBinding(MemberBinding b);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class LinqToDB.Expressions.TransformVisitor`1 : ValueType {
    [NullableAttribute("2")]
private TContext _context;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`3<TContext, Expression, Expression> _func;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<Expression, Expression> _staticFunc;
    public TransformVisitor`1(TContext context, Func`3<TContext, Expression, Expression> func);
    public TransformVisitor`1(Func`2<Expression, Expression> func);
    public static TransformVisitor`1<object> Create(Func`2<Expression, Expression> func);
    public static TransformVisitor`1<TContext> Create(TContext context, Func`3<TContext, Expression, Expression> func);
    [NullableContextAttribute("2")]
public Expression Transform(Expression expr);
    private static Expression TransformXE(Expression expr);
    private Expression TransformX(TryExpression e);
    private static CatchBlock TransformCatchBlock(TransformVisitor`1<TContext> visitor, CatchBlock h);
    private Expression TransformX(SwitchExpression e);
    private static SwitchCase TransformSwitchCase(TransformVisitor`1<TContext> visitor, SwitchCase cs);
    private Expression TransformX(ChangeTypeExpression e);
    private Expression TransformXInit(NewArrayExpression e);
    private Expression TransformX(NewArrayExpression e);
    private Expression TransformX(MemberInitExpression e);
    private Expression TransformX(MemberExpression e);
    private Expression TransformX(ListInitExpression e);
    private static ElementInit TransformElementInit(TransformVisitor`1<TContext> visitor, ElementInit p);
    private Expression TransformX(LambdaExpression e);
    private Expression TransformX(MethodCallExpression e);
    private Expression TransformX(UnaryExpression e);
    private Expression TransformX(BinaryExpression e);
    private static IEnumerable`1<T> Transform(TransformVisitor`1<TContext> visitor, IList`1<T> source, Func`3<TransformVisitor`1<TContext>, T, T> func);
    private IEnumerable`1<T> Transform(IList`1<T> source);
    private static MemberBinding Modify(TransformVisitor`1<TContext> visitor, MemberBinding b);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.Expressions.TypeMapper : object {
    private static Type[] _wrapperConstructorParameters1;
    private static Type[] _wrapperConstructorParameters2;
    private IDictionary`2<string, Type> _types;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<Type, Type> _typeMappingCache;
    private Dictionary`2<Type, Type> _typeMappingReverseCache;
    private Dictionary`2<LambdaExpression, LambdaExpression> _lambdaMappingCache;
    private Dictionary`2<Type, Func`2<object, object>> _wrapperFactoryCache;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<Type, Func`2<Task, object>> _taskWrapperFactoryCache;
    private Dictionary`2<Type, LambdaExpression> _enumToWrapperCache;
    private Dictionary`2<Type, LambdaExpression> _enumFromWrapperCache;
    private Dictionary`2<Type, ICustomMapper> _typeMapperInstancesCache;
    private bool _finalized;
    private static MethodInfo _wrapInstanceMethodInfo;
    private static TypeMapper();
    public void RegisterTypeWrapper(Type originalType);
    public void RegisterTypeWrapper(Type wrapperType, Type originalType);
    private void BuildEnumConverters(Type wrapperType, Type originalType);
    private static TR ConvertEnum(Dictionary`2<T, TR> dictionary, T value);
    public void FinalizeMappings();
    private Delegate BuildWrapperEvents(Type wrapperType);
    private Delegate[] BuildWrapperMethods(Type wrapperType);
    private bool TryMapType(Type type, Type& replacement);
    private Expression BuildValueMapper(ExpressionGenerator generator, Expression expression);
    private Expression BuildValueMapperToType(ExpressionGenerator generator, Expression expression);
    private Type MakeReplacement(Type type);
    private LambdaExpression MapLambdaInternal(LambdaExpression lambda, bool mapConvert, bool convertResult, bool ignoreMissingMembers);
    private static MemberInfo ReplaceMember(MemberInfo memberInfo, Type targetType);
    private static Expression ReplaceTypes(Expression expression, ReplaceTypesContext ctx);
    [NullableContextAttribute("2")]
private ICustomMapper CreateTypeMapper(Type mapperType);
    private Expression MapExpressionInternal(LambdaExpression lambdaExpression, Expression[] parameters);
    private LambdaExpression CorrectLambdaParameters(LambdaExpression lambda, Type resultType, Type[] paramTypes);
    public Expression MapExpression(Expression`1<Func`1<TR>> func);
    public Expression MapExpression(Expression`1<Func`2<T, TR>> func, Expression p);
    public Expression MapExpression(Expression`1<Func`3<T1, T2, TR>> func, Expression p1, Expression p2);
    public Expression MapExpression(Expression`1<Func`4<T1, T2, T3, TR>> func, Expression p1, Expression p2, Expression p3);
    public Expression MapExpression(Expression`1<Func`5<T1, T2, T3, T4, TR>> func, Expression p1, Expression p2, Expression p3, Expression p4);
    public Expression MapExpression(Expression`1<Func`6<T1, T2, T3, T4, T5, TR>> func, Expression p1, Expression p2, Expression p3, Expression p4, Expression p5);
    public Expression MapAction(Expression`1<Action> action);
    public Expression MapAction(Expression`1<Action`1<T>> action, Expression p);
    public Expression MapAction(Expression`1<Action`2<T1, T2>> action, Expression p1, Expression p2);
    public Expression MapAction(Expression`1<Action`3<T1, T2, T3>> action, Expression p1, Expression p2, Expression p3);
    public Expression MapAction(Expression`1<Action`4<T1, T2, T3, T4>> action, Expression p1, Expression p2, Expression p3, Expression p4);
    public Expression MapAction(Expression`1<Action`5<T1, T2, T3, T4, T5>> action, Expression p1, Expression p2, Expression p3, Expression p4, Expression p5);
    public LambdaExpression MapLambda(Expression`1<Func`2<T, TR>> func);
    [NullableContextAttribute("2")]
public LambdaExpression MapLambda(Expression`1<Func`3<T1, T2, TR>> func);
    [NullableContextAttribute("2")]
public LambdaExpression MapLambda(Expression`1<Func`4<T1, T2, T3, TR>> func);
    [NullableContextAttribute("2")]
public LambdaExpression MapLambda(Expression`1<Func`5<T1, T2, T3, T4, TR>> func);
    [NullableContextAttribute("2")]
public LambdaExpression MapLambda(Expression`1<Func`6<T1, T2, T3, T4, T5, TR>> func);
    [NullableContextAttribute("2")]
public LambdaExpression MapLambda(Expression`1<Func`7<T1, T2, T3, T4, T5, T6, TR>> func);
    [NullableContextAttribute("2")]
public LambdaExpression MapLambda(Expression`1<Func`8<T1, T2, T3, T4, T5, T6, T7, TR>> func);
    public LambdaExpression MapActionLambda(Expression`1<Action> action);
    public LambdaExpression MapActionLambda(Expression`1<Action`1<T>> action);
    public LambdaExpression MapActionLambda(Expression`1<Action`2<T1, T2>> action);
    [NullableContextAttribute("2")]
public LambdaExpression MapActionLambda(Expression`1<Action`3<T1, T2, T3>> action);
    [NullableContextAttribute("2")]
public LambdaExpression MapActionLambda(Expression`1<Action`4<T1, T2, T3, T4>> action);
    [NullableContextAttribute("2")]
public LambdaExpression MapActionLambda(Expression`1<Action`5<T1, T2, T3, T4, T5>> action);
    public Func`1<TR> BuildFunc(LambdaExpression lambda);
    public Func`2<T, TR> BuildFunc(LambdaExpression lambda);
    [NullableContextAttribute("2")]
public Func`3<T1, T2, TR> BuildFunc(LambdaExpression lambda);
    [NullableContextAttribute("2")]
public Func`4<T1, T2, T3, TR> BuildFunc(LambdaExpression lambda);
    [NullableContextAttribute("2")]
public Func`5<T1, T2, T3, T4, TR> BuildFunc(LambdaExpression lambda);
    [NullableContextAttribute("2")]
public Func`6<T1, T2, T3, T4, T5, TR> BuildFunc(LambdaExpression lambda);
    [NullableContextAttribute("2")]
public Func`7<T1, T2, T3, T4, T5, T6, TR> BuildFunc(LambdaExpression lambda);
    [NullableContextAttribute("2")]
public Func`8<T1, T2, T3, T4, T5, T6, T7, TR> BuildFunc(LambdaExpression lambda);
    public Action BuildAction(LambdaExpression lambda);
    public Action`1<T> BuildAction(LambdaExpression lambda);
    public Action`2<T1, T2> BuildAction(LambdaExpression lambda);
    [NullableContextAttribute("2")]
public Action`3<T1, T2, T3> BuildAction(LambdaExpression lambda);
    [NullableContextAttribute("2")]
public Action`4<T1, T2, T3, T4> BuildAction(LambdaExpression lambda);
    [NullableContextAttribute("2")]
public Action`5<T1, T2, T3, T4, T5> BuildAction(LambdaExpression lambda);
    public TypeBuilder`1<T> Type();
    public Func`1<TR> BuildWrappedFactory(Expression`1<Func`1<TR>> newFunc);
    public Func`2<T, TR> BuildWrappedFactory(Expression`1<Func`2<T, TR>> newFunc);
    public Func`3<T1, T2, TR> BuildWrappedFactory(Expression`1<Func`3<T1, T2, TR>> newFunc);
    public Func`4<T1, T2, T3, TR> BuildWrappedFactory(Expression`1<Func`4<T1, T2, T3, TR>> newFunc);
    [NullableContextAttribute("2")]
public Func`5<T1, T2, T3, T4, TR> BuildWrappedFactory(Expression`1<Func`5<T1, T2, T3, T4, TR>> newFunc);
    [NullableContextAttribute("2")]
public Func`6<T1, T2, T3, T4, T5, TR> BuildWrappedFactory(Expression`1<Func`6<T1, T2, T3, T4, T5, TR>> newFunc);
    [NullableContextAttribute("2")]
public Func`7<T1, T2, T3, T4, T5, T6, TR> BuildWrappedFactory(Expression`1<Func`7<T1, T2, T3, T4, T5, T6, TR>> newFunc);
    public Func`1<object> BuildFactory(Expression`1<Func`1<TR>> newFunc);
    public Func`2<T, object> BuildFactory(Expression`1<Func`2<T, TR>> newFunc);
    public Func`3<T1, T2, object> BuildFactory(Expression`1<Func`3<T1, T2, TR>> newFunc);
    public Func`4<T1, T2, T3, object> BuildFactory(Expression`1<Func`4<T1, T2, T3, TR>> newFunc);
    private Delegate BuildFactoryImpl(LambdaExpression lambda, bool wrapResult);
    private Delegate BuildWrapper(LambdaExpression lambda, bool optional);
    private Delegate BuildWrapperImpl(LambdaExpression lambda, bool wrapResult, bool optional);
    [NullableContextAttribute("2")]
public TR Wrap(object instance);
    [NullableContextAttribute("2")]
private object Wrap(Type wrapperType, object instance);
    [AsyncStateMachineAttribute("LinqToDB.Expressions.TypeMapper/<WrapTask>d__89`1")]
public Task`1<TR> WrapTask(Task instanceTask, Type instanceType, CancellationToken cancellationToken);
    private object WrapTask(Type wrapperType, Task instance);
    [CompilerGeneratedAttribute]
private Expression <BuildWrapperEvents>g__MapInvoke|17_0(Type delegateType, Expression delegateValue, Type returnType, Expression[] parameters, Type[] parameterTypes);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private Delegate <BuildWrapperMethods>b__18_1(<>f__AnonymousType105`2<LambdaExpression, bool> e);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private Type <TryMapType>b__19_0(Type t);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private ParameterExpression <MapLambdaInternal>b__24_0(ParameterExpression p);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.Expressions.TypeWrapper : object {
    [CompilerGeneratedAttribute]
private object <instance_>k__BackingField;
    [CompilerGeneratedAttribute]
private Delegate[] <CompiledWrappers>k__BackingField;
    public object instance_ { get; }
    protected Delegate[] CompiledWrappers { get; }
    protected TypeWrapper(object instance, Delegate[] wrappers);
    [CompilerGeneratedAttribute]
public object get_instance_();
    [CompilerGeneratedAttribute]
protected Delegate[] get_CompiledWrappers();
    protected static Expression`1<Action`2<TI, TP>> PropertySetter(Expression`1<Func`2<TI, TP>> getter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("64")]
public class LinqToDB.Expressions.TypeWrapperNameAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    internal string Name { get; }
    public TypeWrapperNameAttribute(string name);
    [CompilerGeneratedAttribute]
internal string get_Name();
}
public class LinqToDB.Expressions.ValueTaskToTaskMapper : object {
    [NullableContextAttribute("1")]
private sealed virtual override bool LinqToDB.Expressions.ICustomMapper.CanMap(Expression expression);
    [NullableContextAttribute("1")]
private sealed virtual override Expression LinqToDB.Expressions.ICustomMapper.Map(Expression expression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class LinqToDB.Expressions.VisitActionVisitor`1 : ValueType {
    [NullableAttribute("2")]
private TContext _context;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`2<TContext, Expression> _func;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`1<Expression> _staticFunc;
    public VisitActionVisitor`1(TContext context, Action`2<TContext, Expression> func);
    public VisitActionVisitor`1(Action`1<Expression> func);
    public static VisitActionVisitor`1<object> Create(Action`1<Expression> func);
    public static VisitActionVisitor`1<TContext> Create(TContext context, Action`2<TContext, Expression> func);
    private static void Visit(IEnumerable`1<T> source, Action`1<T> func);
    private void Visit(IEnumerable`1<T> source);
    [NullableContextAttribute("2")]
public void Visit(Expression expr);
    private void MemberVisit(MemberBinding b);
    private void SwitchCaseVisit(SwitchCase sc);
    private void CatchBlockVisit(CatchBlock cb);
    private void ElementInitVisit(ElementInit ei);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class LinqToDB.Expressions.VisitFuncVisitor`1 : ValueType {
    [NullableAttribute("2")]
private TContext _context;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`3<TContext, Expression, bool> _func;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<Expression, bool> _staticFunc;
    public VisitFuncVisitor`1(TContext context, Func`3<TContext, Expression, bool> func);
    public VisitFuncVisitor`1(Func`2<Expression, bool> func);
    public static VisitFuncVisitor`1<object> Create(Func`2<Expression, bool> func);
    public static VisitFuncVisitor`1<TContext> Create(TContext context, Func`3<TContext, Expression, bool> func);
    private static void Visit(IEnumerable`1<T> source, Action`1<T> func);
    private void Visit(IEnumerable`1<T> source);
    [NullableContextAttribute("2")]
public void Visit(Expression expr);
    private void SwitchCaseVisit(SwitchCase sc);
    private void CatchBlockVisit(CatchBlock cb);
    private void MemberBindingVisit(MemberBinding b);
    private void ElementInitVisit(ElementInit ei);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("5148")]
public class LinqToDB.Expressions.WrapperAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    public string TypeName { get; }
    [NullableContextAttribute("1")]
public WrapperAttribute(string typeName);
    [CompilerGeneratedAttribute]
public string get_TypeName();
}
internal static class LinqToDB.Expressions.WritableContext : object {
    [NullableContextAttribute("1")]
public static WritableContext`2<TWriteable, TStatic> Create(TWriteable init, TStatic staticValue);
}
internal class LinqToDB.Expressions.WritableContext`1 : object {
    [NullableAttribute("1")]
public T WriteableValue;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Expressions.WritableContext`2 : object {
    public TStatic StaticValue;
    public TWriteable WriteableValue;
    public WritableContext`2(TStatic staticValue);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2048")]
[MeansImplicitUseAttribute]
public class LinqToDB.ExprParameterAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; public set; }
    [NullableContextAttribute("1")]
public ExprParameterAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class LinqToDB.ExtensionBuilderExtensions : object {
    [ExtensionAttribute]
public static SqlExtensionParam AddParameter(ISqExtensionBuilder builder, string name, string value);
    [ExtensionAttribute]
public static SqlExtensionParam AddExpression(ISqExtensionBuilder builder, string name, string expr);
    [ExtensionAttribute]
public static ISqlExpression Add(ISqExtensionBuilder builder, ISqlExpression left, ISqlExpression right, Type type);
    [ExtensionAttribute]
public static ISqlExpression Add(ISqExtensionBuilder builder, ISqlExpression left, ISqlExpression right);
    [ExtensionAttribute]
public static ISqlExpression Add(ISqExtensionBuilder builder, ISqlExpression left, int value);
    [ExtensionAttribute]
public static ISqlExpression Inc(ISqExtensionBuilder builder, ISqlExpression expr);
    [ExtensionAttribute]
public static ISqlExpression Sub(ISqExtensionBuilder builder, ISqlExpression left, ISqlExpression right, Type type);
    [ExtensionAttribute]
public static ISqlExpression Sub(ISqExtensionBuilder builder, ISqlExpression left, ISqlExpression right);
    [ExtensionAttribute]
public static ISqlExpression Sub(ISqExtensionBuilder builder, ISqlExpression left, int value);
    [ExtensionAttribute]
public static ISqlExpression Dec(ISqExtensionBuilder builder, ISqlExpression expr);
    [ExtensionAttribute]
public static ISqlExpression Mul(ISqExtensionBuilder builder, ISqlExpression left, ISqlExpression right, Type type);
    [ExtensionAttribute]
public static ISqlExpression Mul(ISqExtensionBuilder builder, ISqlExpression left, ISqlExpression right);
    [ExtensionAttribute]
public static ISqlExpression Mul(ISqExtensionBuilder builder, ISqlExpression expr1, int value);
    [ExtensionAttribute]
public static ISqlExpression Div(ISqExtensionBuilder builder, ISqlExpression expr1, ISqlExpression expr2, Type type);
    [ExtensionAttribute]
public static ISqlExpression Div(ISqExtensionBuilder builder, ISqlExpression expr1, ISqlExpression expr2);
    [ExtensionAttribute]
public static ISqlExpression Div(ISqExtensionBuilder builder, ISqlExpression expr1, int value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[PublicAPIAttribute]
public static class LinqToDB.Extensions.AttributesExtensions : object {
    private static ConcurrentDictionary`2<ICustomAttributeProvider, Attribute[]> _inheritAttributes;
    private static ConcurrentDictionary`2<ICustomAttributeProvider, Attribute[]> _noInheritAttributes;
    private static AttributesExtensions();
    private static T[] GetAttributesInternal(ICustomAttributeProvider source, bool inherit);
    private static Attribute[] GetNoInheritAttributes(ICustomAttributeProvider source);
    private static Attribute[] GetInheritAttributes(ICustomAttributeProvider source);
    [ExtensionAttribute]
public static T[] GetAttributes(ICustomAttributeProvider source, bool inherit);
    [ExtensionAttribute]
public static T GetAttribute(ICustomAttributeProvider source, bool inherit);
    [ExtensionAttribute]
public static bool HasAttribute(ICustomAttributeProvider source, bool inherit);
}
[ExtensionAttribute]
internal static class LinqToDB.Extensions.CollectionExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static T[] Flatten(T[][] items);
}
[ExtensionAttribute]
internal static class LinqToDB.Extensions.MappingExpressionsExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static TExpression GetExpressionFromExpressionMember(Type type, string memberName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class LinqToDB.Extensions.MappingExtensions : object {
    [ExtensionAttribute]
public static SqlValue GetSqlValueFromObject(MappingSchema mappingSchema, ColumnDescriptor columnDescriptor, object obj);
    [ExtensionAttribute]
public static SqlValue GetSqlValue(MappingSchema mappingSchema, Type systemType, object originalValue);
    [ExtensionAttribute]
public static bool TryConvertToSql(MappingSchema mappingSchema, StringBuilder stringBuilder, SqlDataType dataType, DataOptions options, object value);
    [ExtensionAttribute]
public static void ConvertToSqlValue(MappingSchema mappingSchema, StringBuilder stringBuilder, SqlDataType dataType, DataOptions options, object value);
    [ExtensionAttribute]
public static ExpressionAttribute GetExpressionAttribute(MemberInfo member, MappingSchema mappingSchema);
    [ExtensionAttribute]
public static TableFunctionAttribute GetTableFunctionAttribute(MemberInfo member, MappingSchema mappingSchema);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[PublicAPIAttribute]
public static class LinqToDB.Extensions.ReflectionExtensions : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ConcurrentDictionary`2<ValueTuple`2<Type, MemberInfo>, MemberInfo> _getMemberExCache;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ConcurrentDictionary`2<ValueTuple`2<Type, Type>, bool> _isSameOrParentOf;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ConcurrentDictionary`2<Type, Type> _getItemTypeCache;
    private static Dictionary`2<Type, HashSet`1<Type>> _castDic;
    private static ConcurrentDictionary`2<MethodInfo, MethodInfo> _methodDefinitionCache;
    private static ReflectionExtensions();
    [ExtensionAttribute]
public static MemberInfo[] GetPublicInstanceMembersEx(Type type);
    [ExtensionAttribute]
public static MemberInfo[] GetPublicInstanceValueMembers(Type type);
    private static MemberInfo[] GetInterfacePublicInstanceValueMembers(Type type);
    [ExtensionAttribute]
public static MemberInfo[] GetStaticMembersEx(Type type, string name);
    [ExtensionAttribute]
public static MemberInfo GetMemberEx(Type type, MemberInfo memberInfo);
    [ExtensionAttribute]
public static MethodInfo GetMethodEx(Type type, string name);
    [ExtensionAttribute]
public static MethodInfo GetMethodEx(Type type, Type returnType, string name, Type[] types);
    [ExtensionAttribute]
public static MethodInfo GetMethodEx(Type type, string name, int genericParametersCount, Type[] types);
    [ExtensionAttribute]
public static MethodInfo GetMethodEx(Type type, string name, Type[] types);
    [ExtensionAttribute]
public static MethodInfo GetPublicInstanceMethodEx(Type type, string name, Type[] types);
    [ExtensionAttribute]
public static ConstructorInfo GetDefaultConstructorEx(Type type);
    [ExtensionAttribute]
public static TypeCode GetTypeCodeEx(Type type);
    [ExtensionAttribute]
public static bool IsPropertyEx(MemberInfo memberInfo);
    [ExtensionAttribute]
public static bool IsFieldEx(MemberInfo memberInfo);
    [ExtensionAttribute]
public static bool IsMethodEx(MemberInfo memberInfo);
    [ExtensionAttribute]
public static bool IsSqlPropertyMethodEx(MemberInfo memberInfo);
    [ExtensionAttribute]
public static bool IsDynamicColumnPropertyEx(MemberInfo memberInfo);
    [ExtensionAttribute]
public static PropertyInfo[] GetPropertiesEx(Type type);
    [IteratorStateMachineAttribute("LinqToDB.Extensions.ReflectionExtensions/<GetDeclaredPropertiesEx>d__19")]
[ExtensionAttribute]
internal static IEnumerable`1<PropertyInfo> GetDeclaredPropertiesEx(Type type);
    [ExtensionAttribute]
public static PropertyInfo[] GetNonPublicPropertiesEx(Type type);
    [ExtensionAttribute]
public static MemberInfo[] GetInstanceMemberEx(Type type, string name);
    [ExtensionAttribute]
public static MemberInfo[] GetPublicMemberEx(Type type, string name);
    [ExtensionAttribute]
public static InterfaceMapping GetInterfaceMapEx(Type type, Type interfaceType);
    [ExtensionAttribute]
public static bool IsNullable(Type type);
    [ExtensionAttribute]
public static Type ToUnderlying(Type type);
    [ExtensionAttribute]
public static Type ToNullableUnderlying(Type type);
    [ExtensionAttribute]
public static Type AsNullable(Type type);
    [IteratorStateMachineAttribute("LinqToDB.Extensions.ReflectionExtensions/<GetDefiningTypes>d__28")]
[ExtensionAttribute]
public static IEnumerable`1<Type> GetDefiningTypes(Type child, MemberInfo member);
    [ExtensionAttribute]
public static bool IsSameOrParentOf(Type parent, Type child);
    [ExtensionAttribute]
[PureAttribute]
public static bool IsSubClassOf(Type type, Type check);
    [ExtensionAttribute]
public static Type GetGenericType(Type genericType, Type type);
    [ExtensionAttribute]
public static Type GetListItemType(IEnumerable list);
    [ExtensionAttribute]
public static Type GetListItemType(Type listType);
    [ExtensionAttribute]
public static bool IsEnumerableTType(Type type, Type elementType);
    [ExtensionAttribute]
public static bool IsGenericEnumerableType(Type type);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Type GetItemType(Type type);
    [ExtensionAttribute]
public static bool IsScalar(Type type, bool checkArrayElementType);
    [ExtensionAttribute]
public static Type[] GetGenericArguments(Type type, Type baseType);
    [ExtensionAttribute]
public static bool IsFloatType(Type type);
    [ExtensionAttribute]
public static bool IsIntegerType(Type type);
    [ExtensionAttribute]
public static object GetDefaultValue(Type type);
    [ExtensionAttribute]
public static EventInfo GetEventEx(Type type, string eventName);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static PropertyInfo GetPropertyInfo(MethodInfo method);
    [ExtensionAttribute]
public static Type GetMemberType(MemberInfo memberInfo);
    [ExtensionAttribute]
public static bool IsNullableValueMember(MemberInfo member);
    [ExtensionAttribute]
public static bool IsNullableHasValueMember(MemberInfo member);
    [ExtensionAttribute]
public static bool IsNullableGetValueOrDefault(MemberInfo member);
    [ExtensionAttribute]
public static bool CanConvertTo(Type fromType, Type toType);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool EqualsTo(MemberInfo member1, MemberInfo member2, Type declaringType);
    [ExtensionAttribute]
public static bool IsAnonymous(Type type);
    [ExtensionAttribute]
internal static MemberInfo GetMemberOverride(Type type, MemberInfo mi);
    [ExtensionAttribute]
internal static MethodInfo GetGenericMethodDefinitionCached(MethodInfo method);
    [ExtensionAttribute]
internal static bool HasSetter(Type targetType, PropertyInfo& property);
}
[ExtensionAttribute]
internal static class LinqToDB.Extensions.ValueExtensions : object {
    [NullableAttribute("1")]
internal static Int32[] TICKS_DIVIDERS;
    private static ValueExtensions();
    [ExtensionAttribute]
public static long GetTicks(TimeSpan ts, int precision);
    [ExtensionAttribute]
public static DateTimeOffset WithPrecision(DateTimeOffset dto, int precision);
    [ExtensionAttribute]
public static DateTime WithPrecision(DateTime dt, int precision);
}
[NullableContextAttribute("1")]
[PublicAPIAttribute]
public interface LinqToDB.IDataContext {
    public string ContextName { get; }
    public Func`1<ISqlBuilder> CreateSqlProvider { get; }
    public Func`2<DataOptions, ISqlOptimizer> GetSqlOptimizer { get; }
    public SqlProviderFlags SqlProviderFlags { get; }
    public TableOptions SupportedTableOptions { get; }
    public Type DataReaderType { get; }
    public MappingSchema MappingSchema { get; }
    public bool InlineParameters { get; public set; }
    public List`1<string> QueryHints { get; }
    public List`1<string> NextQueryHints { get; }
    public bool CloseAfterUse { get; public set; }
    public DataOptions Options { get; }
    [NullableAttribute("2")]
public IUnwrapDataObjectInterceptor UnwrapDataObjectInterceptor { get; }
    [NullableAttribute("2")]
public string ConfigurationString { get; }
    public abstract virtual string get_ContextName();
    public abstract virtual Func`1<ISqlBuilder> get_CreateSqlProvider();
    public abstract virtual Func`2<DataOptions, ISqlOptimizer> get_GetSqlOptimizer();
    public abstract virtual SqlProviderFlags get_SqlProviderFlags();
    public abstract virtual TableOptions get_SupportedTableOptions();
    public abstract virtual Type get_DataReaderType();
    public abstract virtual MappingSchema get_MappingSchema();
    public abstract virtual bool get_InlineParameters();
    public abstract virtual void set_InlineParameters(bool value);
    public abstract virtual List`1<string> get_QueryHints();
    public abstract virtual List`1<string> get_NextQueryHints();
    public abstract virtual bool get_CloseAfterUse();
    public abstract virtual void set_CloseAfterUse(bool value);
    public abstract virtual DataOptions get_Options();
    public abstract virtual Expression GetReaderExpression(DbDataReader reader, int idx, Expression readerExpression, Type toType);
    public abstract virtual Nullable`1<bool> IsDBNullAllowed(DbDataReader reader, int idx);
    public abstract virtual IDataContext Clone(bool forNestedQuery);
    public abstract virtual void Close();
    public abstract virtual Task CloseAsync();
    public abstract virtual IQueryRunner GetQueryRunner(Query query, int queryNumber, Expression expression, Object[] parameters, Object[] preambles);
    public abstract virtual void AddInterceptor(IInterceptor interceptor);
    public abstract virtual void RemoveInterceptor(IInterceptor interceptor);
    [NullableContextAttribute("2")]
public abstract virtual IUnwrapDataObjectInterceptor get_UnwrapDataObjectInterceptor();
    [NullableContextAttribute("2")]
public abstract virtual string get_ConfigurationString();
}
[NullableContextAttribute("1")]
public interface LinqToDB.IExtensionsAdapter {
    public abstract virtual IAsyncEnumerable`1<TSource> AsAsyncEnumerable(IQueryable`1<TSource> source);
    public abstract virtual Task ForEachAsync(IQueryable`1<TSource> source, Action`1<TSource> action, CancellationToken token);
    public abstract virtual Task`1<List`1<TSource>> ToListAsync(IQueryable`1<TSource> source, CancellationToken token);
    public abstract virtual Task`1<TSource[]> ToArrayAsync(IQueryable`1<TSource> source, CancellationToken token);
    public abstract virtual Task`1<Dictionary`2<TKey, TSource>> ToDictionaryAsync(IQueryable`1<TSource> source, Func`2<TSource, TKey> keySelector, CancellationToken token);
    public abstract virtual Task`1<Dictionary`2<TKey, TSource>> ToDictionaryAsync(IQueryable`1<TSource> source, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> comparer, CancellationToken token);
    public abstract virtual Task`1<Dictionary`2<TKey, TElement>> ToDictionaryAsync(IQueryable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, CancellationToken token);
    public abstract virtual Task`1<Dictionary`2<TKey, TElement>> ToDictionaryAsync(IQueryable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, IEqualityComparer`1<TKey> comparer, CancellationToken token);
    public abstract virtual Task`1<TSource> FirstAsync(IQueryable`1<TSource> source, CancellationToken token);
    public abstract virtual Task`1<TSource> FirstAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate, CancellationToken token);
    public abstract virtual Task`1<TSource> FirstOrDefaultAsync(IQueryable`1<TSource> source, CancellationToken token);
    public abstract virtual Task`1<TSource> FirstOrDefaultAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate, CancellationToken token);
    public abstract virtual Task`1<TSource> SingleAsync(IQueryable`1<TSource> source, CancellationToken token);
    public abstract virtual Task`1<TSource> SingleAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate, CancellationToken token);
    public abstract virtual Task`1<TSource> SingleOrDefaultAsync(IQueryable`1<TSource> source, CancellationToken token);
    public abstract virtual Task`1<TSource> SingleOrDefaultAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate, CancellationToken token);
    public abstract virtual Task`1<bool> ContainsAsync(IQueryable`1<TSource> source, TSource item, CancellationToken token);
    public abstract virtual Task`1<bool> AnyAsync(IQueryable`1<TSource> source, CancellationToken token);
    public abstract virtual Task`1<bool> AnyAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate, CancellationToken token);
    public abstract virtual Task`1<bool> AllAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate, CancellationToken token);
    public abstract virtual Task`1<int> CountAsync(IQueryable`1<TSource> source, CancellationToken token);
    public abstract virtual Task`1<int> CountAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate, CancellationToken token);
    public abstract virtual Task`1<long> LongCountAsync(IQueryable`1<TSource> source, CancellationToken token);
    public abstract virtual Task`1<long> LongCountAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate, CancellationToken token);
    public abstract virtual Task`1<TSource> MinAsync(IQueryable`1<TSource> source, CancellationToken token);
    public abstract virtual Task`1<TResult> MinAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TResult>> selector, CancellationToken token);
    public abstract virtual Task`1<TSource> MaxAsync(IQueryable`1<TSource> source, CancellationToken token);
    public abstract virtual Task`1<TResult> MaxAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TResult>> selector, CancellationToken token);
    public abstract virtual Task`1<int> SumAsync(IQueryable`1<int> source, CancellationToken token);
    public abstract virtual Task`1<Nullable`1<int>> SumAsync(IQueryable`1<Nullable`1<int>> source, CancellationToken token);
    public abstract virtual Task`1<long> SumAsync(IQueryable`1<long> source, CancellationToken token);
    public abstract virtual Task`1<Nullable`1<long>> SumAsync(IQueryable`1<Nullable`1<long>> source, CancellationToken token);
    public abstract virtual Task`1<float> SumAsync(IQueryable`1<float> source, CancellationToken token);
    public abstract virtual Task`1<Nullable`1<float>> SumAsync(IQueryable`1<Nullable`1<float>> source, CancellationToken token);
    public abstract virtual Task`1<double> SumAsync(IQueryable`1<double> source, CancellationToken token);
    public abstract virtual Task`1<Nullable`1<double>> SumAsync(IQueryable`1<Nullable`1<double>> source, CancellationToken token);
    public abstract virtual Task`1<decimal> SumAsync(IQueryable`1<decimal> source, CancellationToken token);
    public abstract virtual Task`1<Nullable`1<decimal>> SumAsync(IQueryable`1<Nullable`1<decimal>> source, CancellationToken token);
    public abstract virtual Task`1<int> SumAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, int>> selector, CancellationToken token);
    public abstract virtual Task`1<Nullable`1<int>> SumAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<int>>> selector, CancellationToken token);
    public abstract virtual Task`1<long> SumAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, long>> selector, CancellationToken token);
    public abstract virtual Task`1<Nullable`1<long>> SumAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<long>>> selector, CancellationToken token);
    public abstract virtual Task`1<float> SumAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, float>> selector, CancellationToken token);
    public abstract virtual Task`1<Nullable`1<float>> SumAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<float>>> selector, CancellationToken token);
    public abstract virtual Task`1<double> SumAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, double>> selector, CancellationToken token);
    public abstract virtual Task`1<Nullable`1<double>> SumAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<double>>> selector, CancellationToken token);
    public abstract virtual Task`1<decimal> SumAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, decimal>> selector, CancellationToken token);
    public abstract virtual Task`1<Nullable`1<decimal>> SumAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<decimal>>> selector, CancellationToken token);
    public abstract virtual Task`1<double> AverageAsync(IQueryable`1<int> source, CancellationToken token);
    public abstract virtual Task`1<Nullable`1<double>> AverageAsync(IQueryable`1<Nullable`1<int>> source, CancellationToken token);
    public abstract virtual Task`1<double> AverageAsync(IQueryable`1<long> source, CancellationToken token);
    public abstract virtual Task`1<Nullable`1<double>> AverageAsync(IQueryable`1<Nullable`1<long>> source, CancellationToken token);
    public abstract virtual Task`1<float> AverageAsync(IQueryable`1<float> source, CancellationToken token);
    public abstract virtual Task`1<Nullable`1<float>> AverageAsync(IQueryable`1<Nullable`1<float>> source, CancellationToken token);
    public abstract virtual Task`1<double> AverageAsync(IQueryable`1<double> source, CancellationToken token);
    public abstract virtual Task`1<Nullable`1<double>> AverageAsync(IQueryable`1<Nullable`1<double>> source, CancellationToken token);
    public abstract virtual Task`1<decimal> AverageAsync(IQueryable`1<decimal> source, CancellationToken token);
    public abstract virtual Task`1<Nullable`1<decimal>> AverageAsync(IQueryable`1<Nullable`1<decimal>> source, CancellationToken token);
    public abstract virtual Task`1<double> AverageAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, int>> selector, CancellationToken token);
    public abstract virtual Task`1<Nullable`1<double>> AverageAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<int>>> selector, CancellationToken token);
    public abstract virtual Task`1<double> AverageAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, long>> selector, CancellationToken token);
    public abstract virtual Task`1<Nullable`1<double>> AverageAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<long>>> selector, CancellationToken token);
    public abstract virtual Task`1<float> AverageAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, float>> selector, CancellationToken token);
    public abstract virtual Task`1<Nullable`1<float>> AverageAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<float>>> selector, CancellationToken token);
    public abstract virtual Task`1<double> AverageAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, double>> selector, CancellationToken token);
    public abstract virtual Task`1<Nullable`1<double>> AverageAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<double>>> selector, CancellationToken token);
    public abstract virtual Task`1<decimal> AverageAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, decimal>> selector, CancellationToken token);
    public abstract virtual Task`1<Nullable`1<decimal>> AverageAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<decimal>>> selector, CancellationToken token);
}
public interface LinqToDB.ILoadWithQueryable`2 {
}
public class LinqToDB.InsertColumnFilter`1 : MulticastDelegate {
    public InsertColumnFilter`1(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual bool Invoke(T entity, ColumnDescriptor column);
    public virtual IAsyncResult BeginInvoke(T entity, ColumnDescriptor column, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
public class LinqToDB.InsertOrUpdateColumnFilter`1 : MulticastDelegate {
    public InsertOrUpdateColumnFilter`1(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual bool Invoke(T entity, ColumnDescriptor column, bool isInsert);
    public virtual IAsyncResult BeginInvoke(T entity, ColumnDescriptor column, bool isInsert, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class LinqToDB.InterceptorExtensions : object {
    [ExtensionAttribute]
public static void OnNextCommandInitialized(DataConnection dataConnection, Func`3<CommandEventData, DbCommand, DbCommand> onCommandInitialized);
    [ExtensionAttribute]
public static void OnNextCommandInitialized(DataContext dataContext, Func`3<CommandEventData, DbCommand, DbCommand> onCommandInitialized);
    [ExtensionAttribute]
internal static void AddInterceptorImpl(IInterceptable interceptable, IInterceptor interceptor);
    [ExtensionAttribute]
internal static void AddInterceptorImpl(IInterceptable interceptable, T interceptor);
    [ExtensionAttribute]
internal static void RemoveInterceptor(IInterceptable`1<T> interceptable, IInterceptor interceptor);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
internal static T CloneAggregated(T interceptor);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class LinqToDB.Interceptors.AggregatedCommandInterceptor : AggregatedInterceptor`1<ICommandInterceptor> {
    protected virtual AggregatedInterceptor`1<ICommandInterceptor> Create();
    public sealed virtual DbCommand CommandInitialized(CommandEventData eventData, DbCommand command);
    public sealed virtual Option`1<object> ExecuteScalar(CommandEventData eventData, DbCommand command, Option`1<object> result);
    [AsyncStateMachineAttribute("LinqToDB.Interceptors.AggregatedCommandInterceptor/<ExecuteScalarAsync>d__3")]
public sealed virtual Task`1<Option`1<object>> ExecuteScalarAsync(CommandEventData eventData, DbCommand command, Option`1<object> result, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public sealed virtual Option`1<int> ExecuteNonQuery(CommandEventData eventData, DbCommand command, Option`1<int> result);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("LinqToDB.Interceptors.AggregatedCommandInterceptor/<ExecuteNonQueryAsync>d__5")]
public sealed virtual Task`1<Option`1<int>> ExecuteNonQueryAsync(CommandEventData eventData, DbCommand command, Option`1<int> result, CancellationToken cancellationToken);
    public sealed virtual Option`1<DbDataReader> ExecuteReader(CommandEventData eventData, DbCommand command, CommandBehavior commandBehavior, Option`1<DbDataReader> result);
    [AsyncStateMachineAttribute("LinqToDB.Interceptors.AggregatedCommandInterceptor/<ExecuteReaderAsync>d__7")]
public sealed virtual Task`1<Option`1<DbDataReader>> ExecuteReaderAsync(CommandEventData eventData, DbCommand command, CommandBehavior commandBehavior, Option`1<DbDataReader> result, CancellationToken cancellationToken);
    public sealed virtual void AfterExecuteReader(CommandEventData eventData, DbCommand command, CommandBehavior commandBehavior, DbDataReader dataReader);
    public sealed virtual void BeforeReaderDispose(CommandEventData eventData, DbCommand command, DbDataReader dataReader);
    [AsyncStateMachineAttribute("LinqToDB.Interceptors.AggregatedCommandInterceptor/<BeforeReaderDisposeAsync>d__10")]
public sealed virtual Task BeforeReaderDisposeAsync(CommandEventData eventData, DbCommand command, DbDataReader dataReader);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class LinqToDB.Interceptors.AggregatedConnectionInterceptor : AggregatedInterceptor`1<IConnectionInterceptor> {
    protected virtual AggregatedInterceptor`1<IConnectionInterceptor> Create();
    public sealed virtual void ConnectionOpening(ConnectionEventData eventData, DbConnection connection);
    [AsyncStateMachineAttribute("LinqToDB.Interceptors.AggregatedConnectionInterceptor/<ConnectionOpeningAsync>d__2")]
public sealed virtual Task ConnectionOpeningAsync(ConnectionEventData eventData, DbConnection connection, CancellationToken cancellationToken);
    public sealed virtual void ConnectionOpened(ConnectionEventData eventData, DbConnection connection);
    [AsyncStateMachineAttribute("LinqToDB.Interceptors.AggregatedConnectionInterceptor/<ConnectionOpenedAsync>d__4")]
public sealed virtual Task ConnectionOpenedAsync(ConnectionEventData eventData, DbConnection connection, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class LinqToDB.Interceptors.AggregatedDataContextInterceptor : AggregatedInterceptor`1<IDataContextInterceptor> {
    protected virtual AggregatedInterceptor`1<IDataContextInterceptor> Create();
    public sealed virtual void OnClosing(DataContextEventData eventData);
    public sealed virtual void OnClosed(DataContextEventData eventData);
    [AsyncStateMachineAttribute("LinqToDB.Interceptors.AggregatedDataContextInterceptor/<OnClosingAsync>d__3")]
public sealed virtual Task OnClosingAsync(DataContextEventData eventData);
    [AsyncStateMachineAttribute("LinqToDB.Interceptors.AggregatedDataContextInterceptor/<OnClosedAsync>d__4")]
public sealed virtual Task OnClosedAsync(DataContextEventData eventData);
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class LinqToDB.Interceptors.AggregatedEntityServiceInterceptor : AggregatedInterceptor`1<IEntityServiceInterceptor> {
    [NullableContextAttribute("1")]
protected virtual AggregatedInterceptor`1<IEntityServiceInterceptor> Create();
    [NullableContextAttribute("1")]
public sealed virtual object EntityCreated(EntityCreatedEventData eventData, object entity);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class LinqToDB.Interceptors.AggregatedInterceptor`1 : object {
    [CompilerGeneratedAttribute]
private List`1<TInterceptor> <Interceptors>k__BackingField;
    private bool _enumerating;
    private List`1<TInterceptor> _removeList;
    public List`1<TInterceptor> Interceptors { get; }
    [CompilerGeneratedAttribute]
public List`1<TInterceptor> get_Interceptors();
    public void Add(TInterceptor interceptor);
    public void Remove(TInterceptor interceptor);
    protected void RemoveDelayed();
    protected void Apply(Action func);
    protected T Apply(Func`1<T> func);
    [AsyncStateMachineAttribute("LinqToDB.Interceptors.AggregatedInterceptor`1/<Apply>d__10")]
protected Task Apply(Func`1<Task> func);
    [AsyncStateMachineAttribute("LinqToDB.Interceptors.AggregatedInterceptor`1/<Apply>d__11`1")]
protected Task`1<T> Apply(Func`1<Task`1<T>> func);
    protected abstract virtual AggregatedInterceptor`1<TInterceptor> Create();
    public AggregatedInterceptor`1<TInterceptor> Clone();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class LinqToDB.Interceptors.AggregatedUnwrapDataObjectInterceptor : AggregatedInterceptor`1<IUnwrapDataObjectInterceptor> {
    protected virtual AggregatedInterceptor`1<IUnwrapDataObjectInterceptor> Create();
    public sealed virtual DbConnection UnwrapConnection(IDataContext dataContext, DbConnection connection);
    public sealed virtual DbTransaction UnwrapTransaction(IDataContext dataContext, DbTransaction transaction);
    public sealed virtual DbCommand UnwrapCommand(IDataContext dataContext, DbCommand command);
    public sealed virtual DbDataReader UnwrapDataReader(IDataContext dataContext, DbDataReader dataReader);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class LinqToDB.Interceptors.CommandEventData : ValueType {
    [CompilerGeneratedAttribute]
private DataConnection <DataConnection>k__BackingField;
    public DataConnection DataConnection { get; }
    internal CommandEventData(DataConnection dataConnection);
    [CompilerGeneratedAttribute]
public DataConnection get_DataConnection();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class LinqToDB.Interceptors.CommandInterceptor : object {
    public virtual DbCommand CommandInitialized(CommandEventData eventData, DbCommand command);
    [NullableContextAttribute("0")]
public virtual Option`1<int> ExecuteNonQuery(CommandEventData eventData, DbCommand command, Option`1<int> result);
    [NullableContextAttribute("0")]
public virtual Task`1<Option`1<int>> ExecuteNonQueryAsync(CommandEventData eventData, DbCommand command, Option`1<int> result, CancellationToken cancellationToken);
    public virtual Option`1<DbDataReader> ExecuteReader(CommandEventData eventData, DbCommand command, CommandBehavior commandBehavior, Option`1<DbDataReader> result);
    public virtual Task`1<Option`1<DbDataReader>> ExecuteReaderAsync(CommandEventData eventData, DbCommand command, CommandBehavior commandBehavior, Option`1<DbDataReader> result, CancellationToken cancellationToken);
    public virtual void AfterExecuteReader(CommandEventData eventData, DbCommand command, CommandBehavior commandBehavior, DbDataReader dataReader);
    public virtual Option`1<object> ExecuteScalar(CommandEventData eventData, DbCommand command, Option`1<object> result);
    public virtual Task`1<Option`1<object>> ExecuteScalarAsync(CommandEventData eventData, DbCommand command, Option`1<object> result, CancellationToken cancellationToken);
    public virtual void BeforeReaderDispose(CommandEventData eventData, DbCommand command, DbDataReader dataReader);
    public virtual Task BeforeReaderDisposeAsync(CommandEventData eventData, DbCommand command, DbDataReader dataReader);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class LinqToDB.Interceptors.ConnectionEventData : ValueType {
    [CompilerGeneratedAttribute]
private DataConnection <DataConnection>k__BackingField;
    public DataConnection DataConnection { get; }
    internal ConnectionEventData(DataConnection dataConnection);
    [CompilerGeneratedAttribute]
public DataConnection get_DataConnection();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class LinqToDB.Interceptors.ConnectionInterceptor : object {
    public virtual void ConnectionOpened(ConnectionEventData eventData, DbConnection connection);
    public virtual Task ConnectionOpenedAsync(ConnectionEventData eventData, DbConnection connection, CancellationToken cancellationToken);
    public virtual void ConnectionOpening(ConnectionEventData eventData, DbConnection connection);
    public virtual Task ConnectionOpeningAsync(ConnectionEventData eventData, DbConnection connection, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.Interceptors.ConnectionOptionsConnectionInterceptor : ConnectionInterceptor {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Action`1<DbConnection> OnConnectionOpening;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Func`3<DbConnection, CancellationToken, Task> OnConnectionOpeningAsync;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Action`1<DbConnection> OnConnectionOpened;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Func`3<DbConnection, CancellationToken, Task> OnConnectionOpenedAsync;
    internal ConnectionOptionsConnectionInterceptor(Action`1<DbConnection> connectionOpening, Func`3<DbConnection, CancellationToken, Task> connectionOpeningAsync, Action`1<DbConnection> connectionOpened, Func`3<DbConnection, CancellationToken, Task> connectionOpenedAsync);
    public virtual void ConnectionOpening(ConnectionEventData eventData, DbConnection connection);
    public virtual Task ConnectionOpeningAsync(ConnectionEventData eventData, DbConnection connection, CancellationToken cancellationToken);
    public virtual void ConnectionOpened(ConnectionEventData eventData, DbConnection connection);
    public virtual Task ConnectionOpenedAsync(ConnectionEventData eventData, DbConnection connection, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class LinqToDB.Interceptors.DataContextEventData : ValueType {
    [CompilerGeneratedAttribute]
private IDataContext <Context>k__BackingField;
    public IDataContext Context { get; }
    internal DataContextEventData(IDataContext context);
    [CompilerGeneratedAttribute]
public IDataContext get_Context();
}
public abstract class LinqToDB.Interceptors.DataContextInterceptor : object {
    public virtual void OnClosed(DataContextEventData eventData);
    public virtual void OnClosing(DataContextEventData eventData);
    [NullableContextAttribute("1")]
public virtual Task OnClosedAsync(DataContextEventData eventData);
    [NullableContextAttribute("1")]
public virtual Task OnClosingAsync(DataContextEventData eventData);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class LinqToDB.Interceptors.EntityCreatedEventData : ValueType {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private IDataContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private TableOptions <TableOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SchemaName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DatabaseName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServerName>k__BackingField;
    [NullableAttribute("1")]
public IDataContext Context { get; }
    public TableOptions TableOptions { get; }
    public string TableName { get; }
    public string SchemaName { get; }
    public string DatabaseName { get; }
    public string ServerName { get; }
    internal EntityCreatedEventData(IDataContext context, TableOptions tableOptions, string tableName, string schemaName, string databaseName, string serverName);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public IDataContext get_Context();
    [CompilerGeneratedAttribute]
public TableOptions get_TableOptions();
    [CompilerGeneratedAttribute]
public string get_TableName();
    [CompilerGeneratedAttribute]
public string get_SchemaName();
    [CompilerGeneratedAttribute]
public string get_DatabaseName();
    [CompilerGeneratedAttribute]
public string get_ServerName();
}
public abstract class LinqToDB.Interceptors.EntityServiceInterceptor : object {
    [NullableContextAttribute("1")]
public virtual object EntityCreated(EntityCreatedEventData eventData, object entity);
}
[NullableContextAttribute("1")]
public interface LinqToDB.Interceptors.ICommandInterceptor {
    public abstract virtual DbCommand CommandInitialized(CommandEventData eventData, DbCommand command);
    public abstract virtual Option`1<object> ExecuteScalar(CommandEventData eventData, DbCommand command, Option`1<object> result);
    public abstract virtual Task`1<Option`1<object>> ExecuteScalarAsync(CommandEventData eventData, DbCommand command, Option`1<object> result, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public abstract virtual Option`1<int> ExecuteNonQuery(CommandEventData eventData, DbCommand command, Option`1<int> result);
    [NullableContextAttribute("0")]
public abstract virtual Task`1<Option`1<int>> ExecuteNonQueryAsync(CommandEventData eventData, DbCommand command, Option`1<int> result, CancellationToken cancellationToken);
    public abstract virtual Option`1<DbDataReader> ExecuteReader(CommandEventData eventData, DbCommand command, CommandBehavior commandBehavior, Option`1<DbDataReader> result);
    public abstract virtual Task`1<Option`1<DbDataReader>> ExecuteReaderAsync(CommandEventData eventData, DbCommand command, CommandBehavior commandBehavior, Option`1<DbDataReader> result, CancellationToken cancellationToken);
    public abstract virtual void AfterExecuteReader(CommandEventData eventData, DbCommand command, CommandBehavior commandBehavior, DbDataReader dataReader);
    public abstract virtual void BeforeReaderDispose(CommandEventData eventData, DbCommand command, DbDataReader dataReader);
    public abstract virtual Task BeforeReaderDisposeAsync(CommandEventData eventData, DbCommand command, DbDataReader dataReader);
}
[NullableContextAttribute("1")]
public interface LinqToDB.Interceptors.IConnectionInterceptor {
    public abstract virtual void ConnectionOpening(ConnectionEventData eventData, DbConnection connection);
    public abstract virtual Task ConnectionOpeningAsync(ConnectionEventData eventData, DbConnection connection, CancellationToken cancellationToken);
    public abstract virtual void ConnectionOpened(ConnectionEventData eventData, DbConnection connection);
    public abstract virtual Task ConnectionOpenedAsync(ConnectionEventData eventData, DbConnection connection, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface LinqToDB.Interceptors.IDataContextInterceptor {
    public abstract virtual void OnClosing(DataContextEventData eventData);
    public abstract virtual void OnClosed(DataContextEventData eventData);
    public abstract virtual Task OnClosingAsync(DataContextEventData eventData);
    public abstract virtual Task OnClosedAsync(DataContextEventData eventData);
}
internal interface LinqToDB.Interceptors.IEntityServiceInterceptable {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public AggregatedInterceptor`1<IEntityServiceInterceptor> Interceptors { get; }
    public abstract virtual AggregatedInterceptor`1<IEntityServiceInterceptor> get_Interceptors();
}
public interface LinqToDB.Interceptors.IEntityServiceInterceptor {
    [NullableContextAttribute("1")]
public abstract virtual object EntityCreated(EntityCreatedEventData eventData, object entity);
}
public interface LinqToDB.Interceptors.IInterceptable {
}
[NullableContextAttribute("2")]
public interface LinqToDB.Interceptors.IInterceptable`1 {
    public T Interceptor { get; public set; }
    public abstract virtual T get_Interceptor();
    public abstract virtual void set_Interceptor(T value);
}
public interface LinqToDB.Interceptors.IInterceptor {
}
[NullableContextAttribute("1")]
public interface LinqToDB.Interceptors.IUnwrapDataObjectInterceptor {
    public abstract virtual DbConnection UnwrapConnection(IDataContext dataContext, DbConnection connection);
    public abstract virtual DbTransaction UnwrapTransaction(IDataContext dataContext, DbTransaction transaction);
    public abstract virtual DbCommand UnwrapCommand(IDataContext dataContext, DbCommand command);
    public abstract virtual DbDataReader UnwrapDataReader(IDataContext dataContext, DbDataReader dataReader);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Interceptors.OneTimeCommandInterceptor : CommandInterceptor {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`3<CommandEventData, DbCommand, DbCommand> _onCommandInitialized;
    public OneTimeCommandInterceptor(Func`3<CommandEventData, DbCommand, DbCommand> onCommandInitialized);
    public virtual DbCommand CommandInitialized(CommandEventData eventData, DbCommand command);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class LinqToDB.Interceptors.UnwrapDataObjectInterceptor : object {
    public virtual DbConnection UnwrapConnection(IDataContext dataContext, DbConnection connection);
    public virtual DbTransaction UnwrapTransaction(IDataContext dataContext, DbTransaction transaction);
    public virtual DbCommand UnwrapCommand(IDataContext dataContext, DbCommand command);
    public virtual DbDataReader UnwrapDataReader(IDataContext dataContext, DbDataReader dataReader);
}
internal class LinqToDB.InvariantCultureRegion : object {
    [NullableAttribute("2")]
private IExecutionScope _parentRegion;
    [NullableAttribute("2")]
private CultureInfo _original;
    [NullableContextAttribute("2")]
public InvariantCultureRegion(IExecutionScope parentRegion);
    private sealed virtual override void System.IDisposable.Dispose();
    private sealed virtual override ValueTask System.IAsyncDisposable.DisposeAsync();
}
[NullableContextAttribute("2")]
[PublicAPIAttribute]
public interface LinqToDB.ITable`1 {
    public string ServerName { get; }
    public string DatabaseName { get; }
    public string SchemaName { get; }
    [NullableAttribute("1")]
public string TableName { get; }
    public TableOptions TableOptions { get; }
    public string TableID { get; }
    public abstract virtual string get_ServerName();
    public abstract virtual string get_DatabaseName();
    public abstract virtual string get_SchemaName();
    [NullableContextAttribute("1")]
public abstract virtual string get_TableName();
    public abstract virtual TableOptions get_TableOptions();
    public abstract virtual string get_TableID();
}
[NullableContextAttribute("1")]
public interface LinqToDB.ITableMutable`1 {
    public abstract virtual ITable`1<T> ChangeServerName(string serverName);
    public abstract virtual ITable`1<T> ChangeDatabaseName(string databaseName);
    public abstract virtual ITable`1<T> ChangeSchemaName(string schemaName);
    public abstract virtual ITable`1<T> ChangeTableName(string tableName);
    public abstract virtual ITable`1<T> ChangeTableOptions(TableOptions options);
    public abstract virtual ITable`1<T> ChangeTableID(string tableID);
}
[PublicAPIAttribute]
public class LinqToDB.KeepConnectionAliveScope : object {
    [NullableAttribute("1")]
private DataContext _dataContext;
    private bool _savedValue;
    [NullableContextAttribute("1")]
public KeepConnectionAliveScope(DataContext dataContext);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.Linq.AccessorMember : object {
    [CompilerGeneratedAttribute]
private MemberInfo <MemberInfo>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ReadOnlyCollection`1<Expression> <Arguments>k__BackingField;
    public MemberInfo MemberInfo { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ReadOnlyCollection`1<Expression> Arguments { get; }
    public AccessorMember(MemberInfo memberInfo);
    public AccessorMember(MemberInfo memberInfo, ReadOnlyCollection`1<Expression> arguments);
    public AccessorMember(Expression expression);
    [CompilerGeneratedAttribute]
public MemberInfo get_MemberInfo();
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<Expression> get_Arguments();
    protected bool Equals(AccessorMember other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Linq.Builder.AggregationBuilder : MethodCallBuilder {
    public static String[] MethodNames;
    private static String[] MethodNamesAsync;
    private static AggregationBuilder();
    public static ExpressionAttribute GetAggregateDefinition(MethodCallExpression methodCall, MappingSchema mapping);
    protected virtual bool CanBuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual IBuildContext BuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Linq.Builder.AllAnyBuilder : MethodCallBuilder {
    private static String[] MethodNames;
    private static String[] MethodNamesAsync;
    private static AllAnyBuilder();
    protected virtual bool CanBuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual IBuildContext BuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual SequenceConvertInfo Convert(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo, ParameterExpression param);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Linq.Builder.AllJoinsBuilder : MethodCallBuilder {
    private static String[] RightNullableOnlyMethodNames;
    private static String[] NotRightNullableOnlyMethodNames;
    private static AllJoinsBuilder();
    protected virtual bool CanBuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    internal static bool IsMatchingMethod(MethodCallExpression methodCall, bool rightNullableOnly);
    protected virtual IBuildContext BuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Linq.Builder.AllJoinsLinqBuilder : MethodCallBuilder {
    private static String[] MethodNames4;
    private static AllJoinsLinqBuilder();
    protected virtual bool CanBuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual IBuildContext BuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{BuildContextDebuggingHelper.GetContextInfo(this)}, T: {BuildContextDebuggingHelper.GetContextInfo(TableContext)}")]
internal class LinqToDB.Linq.Builder.AssociationContext : object {
    [CompilerGeneratedAttribute]
private ExpressionBuilder <Builder>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Expression <Expression>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IBuildContext <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private IBuildContext <TableContext>k__BackingField;
    [CompilerGeneratedAttribute]
private AssociationDescriptor <Descriptor>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<LoadWithInfo[]> <CurrentLoadWith>k__BackingField;
    [CompilerGeneratedAttribute]
private IBuildContext <SubqueryContext>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlJoinedTable <Join>k__BackingField;
    public ExpressionBuilder Builder { get; }
    [NullableAttribute("2")]
public Expression Expression { get; }
    public SelectQuery SelectQuery { get; public set; }
    [NullableAttribute("2")]
public SqlStatement Statement { get; public set; }
    [NullableAttribute("2")]
public IBuildContext Parent { get; public set; }
    public IBuildContext TableContext { get; }
    public AssociationDescriptor Descriptor { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<LoadWithInfo[]> CurrentLoadWith { get; }
    public IBuildContext SubqueryContext { get; }
    public SqlJoinedTable Join { get; }
    public AssociationContext(ExpressionBuilder builder, AssociationDescriptor descriptor, List`1<LoadWithInfo[]> currentLoadWith, IBuildContext tableContext, IBuildContext subqueryContext, SqlJoinedTable join);
    [CompilerGeneratedAttribute]
public sealed virtual ExpressionBuilder get_Builder();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual Expression get_Expression();
    public sealed virtual SelectQuery get_SelectQuery();
    public sealed virtual void set_SelectQuery(SelectQuery value);
    [NullableContextAttribute("2")]
public sealed virtual SqlStatement get_Statement();
    [NullableContextAttribute("2")]
public sealed virtual void set_Statement(SqlStatement value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual IBuildContext get_Parent();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void set_Parent(IBuildContext value);
    [CompilerGeneratedAttribute]
public IBuildContext get_TableContext();
    [CompilerGeneratedAttribute]
public AssociationDescriptor get_Descriptor();
    [CompilerGeneratedAttribute]
public List`1<LoadWithInfo[]> get_CurrentLoadWith();
    [CompilerGeneratedAttribute]
public IBuildContext get_SubqueryContext();
    [CompilerGeneratedAttribute]
public SqlJoinedTable get_Join();
    public sealed virtual void BuildQuery(Query`1<T> query, ParameterExpression queryParameter);
    public sealed virtual Expression BuildExpression(Expression expression, int level, bool enforceServerSide);
    public sealed virtual SqlInfo[] ConvertToSql(Expression expression, int level, ConvertFlags flags);
    public sealed virtual SqlInfo[] ConvertToIndex(Expression expression, int level, ConvertFlags flags);
    [NullableContextAttribute("2")]
public sealed virtual IsExpressionResult IsExpression(Expression expression, int level, RequestFor requestFlag);
    [NullableContextAttribute("2")]
public sealed virtual IBuildContext GetContext(Expression expression, int level, BuildInfo buildInfo);
    public sealed virtual int ConvertToParentIndex(int index, IBuildContext context);
    [NullableContextAttribute("2")]
public sealed virtual void SetAlias(string alias);
    public sealed virtual ISqlExpression GetSubQuery(IBuildContext context);
    public sealed virtual SqlStatement GetResultStatement();
    public sealed virtual void CompleteColumns();
    public bool IsCompatibleLoadWith();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class LinqToDB.Linq.Builder.AssociationHelper : object {
    private static MethodInfo[] DefaultIfEmptyMethods;
    private static AssociationHelper();
    public static LambdaExpression CreateAssociationQueryLambda(ExpressionBuilder builder, AccessorMember onMember, AssociationDescriptor association, Type parentOriginalType, Type parentType, Type objectType, bool inline, bool enforceDefault, List`1<LoadWithInfo[]> loadWith, Boolean& isLeft);
    public static IBuildContext BuildAssociationInline(ExpressionBuilder builder, BuildInfo buildInfo, TableContext tableContext, AccessorMember onMember, AssociationDescriptor descriptor, bool inline, Boolean& isOuter);
    public static IBuildContext BuildAssociationSelectMany(ExpressionBuilder builder, BuildInfo buildInfo, TableContext tableContext, AccessorMember onMember, AssociationDescriptor descriptor, Boolean& isOuter);
    public static Expression EnrichTablesWithLoadWith(IDataContext dataContext, Expression expression, Type entityType, List`1<LoadWithInfo[]> loadWith, MappingSchema mappingSchema);
    public static Expression EnrichLoadWith(IDataContext dataContext, Expression table, Type entityType, List`1<LoadWithInfo[]> loadWith, MappingSchema mappingSchema);
    public static Delegate GetLoadWithFunc(List`1<LoadWithInfo[]> loadWith, MemberInfo memberInfo, IDataContext dataContext);
    public static List`1<LoadWithItem> GetLoadWith(List`1<LoadWithInfo[]> infos);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Linq.Builder.AsSubQueryBuilder : MethodCallBuilder {
    protected virtual bool CanBuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual IBuildContext BuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Linq.Builder.AsUpdatableBuilder : MethodCallBuilder {
    protected virtual bool CanBuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual IBuildContext BuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Linq.Builder.AsValueInsertableBuilder : MethodCallBuilder {
    protected virtual bool CanBuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual IBuildContext BuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual SequenceConvertInfo Convert(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo, ParameterExpression param);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class LinqToDB.Linq.Builder.BuildContextDebuggingHelper : object {
    public static string GetContextInfo(IBuildContext context);
    [ExtensionAttribute]
public static string GetPath(IBuildContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Linq.Builder.BuildInfo : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private BuildInfo <SequenceInfo>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IBuildContext <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private SelectQuery <SelectQuery>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CopyTable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CreateSubQuery>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AssociationsAsSubQueries>k__BackingField;
    [CompilerGeneratedAttribute]
private JoinType <JoinType>k__BackingField;
    private bool _isAssociationBuilt;
    [NullableAttribute("2")]
public BuildInfo SequenceInfo { get; public set; }
    [NullableAttribute("2")]
public IBuildContext Parent { get; public set; }
    public Expression Expression { get; public set; }
    public SelectQuery SelectQuery { get; public set; }
    public bool CopyTable { get; public set; }
    public bool CreateSubQuery { get; public set; }
    public bool AssociationsAsSubQueries { get; public set; }
    public JoinType JoinType { get; public set; }
    public bool IsSubQuery { get; }
    public bool IsAssociationBuilt { get; public set; }
    public BuildInfo(IBuildContext parent, Expression expression, SelectQuery selectQuery);
    public BuildInfo(BuildInfo buildInfo, Expression expression);
    public BuildInfo(BuildInfo buildInfo, Expression expression, SelectQuery selectQuery);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public BuildInfo get_SequenceInfo();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_SequenceInfo(BuildInfo value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IBuildContext get_Parent();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Parent(IBuildContext value);
    [CompilerGeneratedAttribute]
public Expression get_Expression();
    [CompilerGeneratedAttribute]
public void set_Expression(Expression value);
    [CompilerGeneratedAttribute]
public SelectQuery get_SelectQuery();
    [CompilerGeneratedAttribute]
public void set_SelectQuery(SelectQuery value);
    [CompilerGeneratedAttribute]
public bool get_CopyTable();
    [CompilerGeneratedAttribute]
public void set_CopyTable(bool value);
    [CompilerGeneratedAttribute]
public bool get_CreateSubQuery();
    [CompilerGeneratedAttribute]
public void set_CreateSubQuery(bool value);
    [CompilerGeneratedAttribute]
public bool get_AssociationsAsSubQueries();
    [CompilerGeneratedAttribute]
public void set_AssociationsAsSubQueries(bool value);
    [CompilerGeneratedAttribute]
public JoinType get_JoinType();
    [CompilerGeneratedAttribute]
public void set_JoinType(JoinType value);
    public bool get_IsSubQuery();
    public bool get_IsAssociationBuilt();
    public void set_IsAssociationBuilt(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Linq.Builder.CastBuilder : MethodCallBuilder {
    protected virtual bool CanBuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual IBuildContext BuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Linq.Builder.ChangeTypeExpressionBuilder : object {
    [CompilerGeneratedAttribute]
private int <BuildCounter>k__BackingField;
    public int BuildCounter { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual int get_BuildCounter();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BuildCounter(int value);
    public sealed virtual bool CanBuild(ExpressionBuilder builder, BuildInfo buildInfo);
    private static ISequenceBuilder GetBuilder(ExpressionBuilder builder, BuildInfo buildInfo);
    public sealed virtual IBuildContext BuildSequence(ExpressionBuilder builder, BuildInfo buildInfo);
    public sealed virtual SequenceConvertInfo Convert(ExpressionBuilder builder, BuildInfo buildInfo, ParameterExpression param);
    public sealed virtual bool IsSequence(ExpressionBuilder builder, BuildInfo buildInfo);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Linq.Builder.ContainsBuilder : MethodCallBuilder {
    private static String[] MethodNames;
    private static String[] MethodNamesAsync;
    private static ContainsBuilder();
    protected virtual bool CanBuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual IBuildContext BuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    public static bool IsConstant(MethodCallExpression methodCall);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Linq.Builder.ContextParser : object {
    [CompilerGeneratedAttribute]
private int <BuildCounter>k__BackingField;
    public int BuildCounter { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual int get_BuildCounter();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BuildCounter(int value);
    public sealed virtual bool CanBuild(ExpressionBuilder builder, BuildInfo buildInfo);
    public sealed virtual IBuildContext BuildSequence(ExpressionBuilder builder, BuildInfo buildInfo);
    public sealed virtual SequenceConvertInfo Convert(ExpressionBuilder builder, BuildInfo buildInfo, ParameterExpression param);
    public sealed virtual bool IsSequence(ExpressionBuilder builder, BuildInfo buildInfo);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Linq.Builder.ContextRefBuilder : object {
    [CompilerGeneratedAttribute]
private int <BuildCounter>k__BackingField;
    public int BuildCounter { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual int get_BuildCounter();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BuildCounter(int value);
    public sealed virtual bool CanBuild(ExpressionBuilder builder, BuildInfo buildInfo);
    public sealed virtual IBuildContext BuildSequence(ExpressionBuilder builder, BuildInfo buildInfo);
    public sealed virtual SequenceConvertInfo Convert(ExpressionBuilder builder, BuildInfo buildInfo, ParameterExpression param);
    public sealed virtual bool IsSequence(ExpressionBuilder builder, BuildInfo buildInfo);
}
public enum LinqToDB.Linq.Builder.ConvertFlags : Enum {
    public int value__;
    public static ConvertFlags Field;
    public static ConvertFlags Key;
    public static ConvertFlags All;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Linq.Builder.CountBuilder : MethodCallBuilder {
    public static String[] MethodNames;
    private static String[] MethodNamesAsync;
    private static CountBuilder();
    protected virtual bool CanBuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual IBuildContext BuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Linq.Builder.DefaultIfEmptyBuilder : MethodCallBuilder {
    protected virtual bool CanBuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual IBuildContext BuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Linq.Builder.DeleteBuilder : MethodCallBuilder {
    private static String[] MethodNames;
    private static DeleteBuilder();
    protected virtual bool CanBuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual IBuildContext BuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    [CompilerGeneratedAttribute]
internal static LambdaExpression <BuildMethodCall>g__BuildDefaultOutputExpression|2_0(Type outputType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Linq.Builder.DisableGroupingGuardBuilder : MethodCallBuilder {
    protected virtual bool CanBuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual IBuildContext BuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Linq.Builder.DistinctBuilder : MethodCallBuilder {
    private static MethodInfo[] _supportedMethods;
    private static DistinctBuilder();
    protected virtual bool CanBuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual IBuildContext BuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Linq.Builder.DropBuilder : MethodCallBuilder {
    protected virtual bool CanBuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual IBuildContext BuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Linq.Builder.EagerLoading : object {
    private static MethodInfo EnlistEagerLoadingFunctionalityMethodInfo;
    private static MethodInfo EnlistEagerLoadingFunctionalityDetachedMethodInfo;
    private static HashSet`1<string> FirstSingleMethods;
    private static HashSet`1<string> NotSupportedDetailMethods;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static TransformVisitor`1<object> _makeExpressionCopyTransformer;
    private static MethodInfo[] JoinMethods;
    private static EagerLoading();
    private static Expression GenerateKeyExpression(Expression[] members, int startIndex);
    private static bool IsDetailType(Type type);
    public static bool IsDetailsMember(IBuildContext context, Expression expression);
    public static Type GetEnumerableElementType(Type type, MappingSchema mappingSchema);
    public static bool IsEnumerableType(Type type, MappingSchema mappingSchema);
    private static Expression ConstructMemberPath(IEnumerable`1<AccessorMember> memberPath, Expression ob, bool throwOnError);
    private static Expression ConstructMemberPath(IEnumerable`1<MemberInfo> memberPath, Expression ob, bool throwOnError);
    [IteratorStateMachineAttribute("LinqToDB.Linq.Builder.EagerLoading/<ExtractArguments>d__10")]
private static IEnumerable`1<Expression> ExtractArguments(Expression expression);
    [IteratorStateMachineAttribute("LinqToDB.Linq.Builder.EagerLoading/<ExtractTupleValues>d__11")]
private static IEnumerable`1<Tuple`2<Expression, Expression>> ExtractTupleValues(Expression expression, Expression obj);
    private static bool IsQueryableMethod(Expression expression, string methodName, MethodCallExpression& queryableMethod);
    public static Expression EnsureEnumerable(Expression expression, MappingSchema mappingSchema);
    private static Expression ValidateMainQuery(Expression mainQuery);
    internal static bool IsChainContainsNotSupported(Expression expression);
    private static void ExtractNotSupportedPart(MappingSchema mappingSchema, Expression detailExpression, Type desiredType, Expression& queryableExpression, Expression& finalExpression, ParameterExpression& replaceParam);
    public static Expression AdjustType(Expression expression, Type desiredType, MappingSchema mappingSchema);
    [IteratorStateMachineAttribute("LinqToDB.Linq.Builder.EagerLoading/<ExtractKeys>d__22")]
private static IEnumerable`1<KeyInfo> ExtractKeys(IBuildContext context, Expression expr);
    [IteratorStateMachineAttribute("LinqToDB.Linq.Builder.EagerLoading/<ExtractKeysFromContext>d__23")]
private static IEnumerable`1<KeyInfo> ExtractKeysFromContext(IBuildContext context, IEnumerable`1<Expression> keys);
    [IteratorStateMachineAttribute("LinqToDB.Linq.Builder.EagerLoading/<ConvertToKeyInfos2>d__24")]
private static IEnumerable`1<KeyInfo> ConvertToKeyInfos2(IBuildContext ctx, Expression forExpr);
    private static IEnumerable`1<KeyInfo> ExtractKeys(IBuildContext context, ParameterExpression param);
    [IteratorStateMachineAttribute("LinqToDB.Linq.Builder.EagerLoading/<ConvertToKeyInfos>d__26")]
private static IEnumerable`1<KeyInfo> ConvertToKeyInfos(IBuildContext ctx, Expression forExpr, Expression obj);
    private static Expression RemoveProjection(Expression expression);
    public static Expression GenerateAssociationExpression(ExpressionBuilder builder, IBuildContext context, Expression expression, AssociationDescriptor association);
    public static LambdaExpression FindContainingLambda(Expression expr, Expression toFind);
    public static MethodCallExpression FindContainingMethod(Expression expr, Expression toFind);
    private static void CollectDependenciesByParameter(MappingSchema mappingSchema, Expression forExpr, Expression byParameter, List`1<Expression> dependencies);
    private static void CollectDependencies(MappingSchema mappingSchema, Expression forExpr, List`1<Expression> dependencies, List`1<ParameterExpression> dependencyParameters);
    [IteratorStateMachineAttribute("LinqToDB.Linq.Builder.EagerLoading/<GenerateEquals>d__33")]
private static IEnumerable`1<Expression> GenerateEquals(MappingSchema mappingSchema, Expression expr1, Expression expr2);
    private static Expression InjectQuery(Expression destination, Expression query, MappingSchema mappingSchema);
    public static Expression GenerateDetailsExpression(IBuildContext context, MappingSchema mappingSchema, Expression expression);
    [NullableContextAttribute("2")]
private static bool IsEqualPath(Expression exp1, Expression exp2);
    private static Expression GeneratePreambleExpression(IList`1<KeyInfo> preparedKeys, ParameterExpression masterParam, Expression detailQuery, Expression masterQuery, ExpressionBuilder builder);
    private static Expression EnlistEagerLoadingFunctionalityDetached(ExpressionBuilder builder, Expression detailQueryExpression);
    private static Expression EnlistEagerLoadingFunctionality(ExpressionBuilder builder, Expression mainQueryExpr, Expression`1<Func`2<T, IEnumerable`1<TD>>> detailQueryLambda, Expression compiledKeyExpression, Expression`1<Func`2<T, TKey>> selectKeyExpression);
    private static int RegisterPreamblesDetached(ExpressionBuilder builder, IQueryable`1<TD> detailQuery);
    private static int RegisterPreambles(ExpressionBuilder builder, IQueryable`1<KeyDetailEnvelope`2<TKey, TD>> detailQuery);
    public static LambdaExpression CorrectLambdaType(LambdaExpression before, LambdaExpression after, MappingSchema mappingSchema);
    internal static Expression CreateKDH(Expression key, Expression data);
    internal static Expression MakeExpressionCopy(Expression expression);
    private static Expression MakeExpressionCopyTransformer(Expression e);
    internal static Type FinalizeType(Type type);
    internal static MemberInfo GetMemberForType(Type type, MemberInfo memberInfo);
    internal static Expression ReplaceParametersWithChangedType(Expression body, IList`1<ParameterExpression> before, IList`1<ParameterExpression> after);
    [NullableContextAttribute("2")]
internal static Expression FinalizeExpressionKeys(HashSet`1<Expression> stable, Expression expr);
    internal static bool IsTransientParam(MethodCallExpression mc, int paramIndex);
    internal static Expression ApplyReMapping(Expression expr, ReplaceInfo replaceInfo, bool isQueryable);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Linq.Builder.EnumerableBuilder : object {
    [CompilerGeneratedAttribute]
private int <BuildCounter>k__BackingField;
    private static MethodInfo[] _containsMethodInfos;
    public int BuildCounter { get; public set; }
    private static EnumerableBuilder();
    [CompilerGeneratedAttribute]
public sealed virtual int get_BuildCounter();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BuildCounter(int value);
    public sealed virtual bool CanBuild(ExpressionBuilder builder, BuildInfo buildInfo);
    public sealed virtual IBuildContext BuildSequence(ExpressionBuilder builder, BuildInfo buildInfo);
    public sealed virtual SequenceConvertInfo Convert(ExpressionBuilder builder, BuildInfo buildInfo, ParameterExpression param);
    public sealed virtual bool IsSequence(ExpressionBuilder builder, BuildInfo buildInfo);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal static bool <CanBuild>g__CanBuildMemberChain|5_0(Expression expr);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{BuildContextDebuggingHelper.GetContextInfo(this)}")]
internal class LinqToDB.Linq.Builder.EnumerableContext : object {
    private Type _elementType;
    [CompilerGeneratedAttribute]
private ExpressionBuilder <Builder>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private SelectQuery <SelectQuery>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private SqlStatement <Statement>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IBuildContext <Parent>k__BackingField;
    private EntityDescriptor _entityDescriptor;
    [CompilerGeneratedAttribute]
private SqlValuesTable <Table>k__BackingField;
    [NullableAttribute("2")]
private ParameterExpression _variable;
    public ExpressionBuilder Builder { get; }
    public Expression Expression { get; }
    public SelectQuery SelectQuery { get; public set; }
    [NullableAttribute("2")]
public SqlStatement Statement { get; public set; }
    [NullableAttribute("2")]
public IBuildContext Parent { get; public set; }
    public SqlValuesTable Table { get; }
    public EnumerableContext(ExpressionBuilder builder, BuildInfo buildInfo, SelectQuery query, Type elementType);
    [CompilerGeneratedAttribute]
public sealed virtual ExpressionBuilder get_Builder();
    [CompilerGeneratedAttribute]
public sealed virtual Expression get_Expression();
    [CompilerGeneratedAttribute]
public sealed virtual SelectQuery get_SelectQuery();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SelectQuery(SelectQuery value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual SqlStatement get_Statement();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void set_Statement(SqlStatement value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual IBuildContext get_Parent();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void set_Parent(IBuildContext value);
    [CompilerGeneratedAttribute]
public SqlValuesTable get_Table();
    private SqlValuesTable BuildValuesTable();
    private SqlValuesTable BuildValuesTableFromArray(NewArrayExpression arrayExpression);
    public sealed virtual void BuildQuery(Query`1<T> query, ParameterExpression queryParameter);
    public sealed virtual Expression BuildExpression(Expression expression, int level, bool enforceServerSide);
    [IteratorStateMachineAttribute("LinqToDB.Linq.Builder.EnumerableContext/<GetExpressions>d__29")]
private IEnumerable`1<ValueTuple`2<string, Expression>> GetExpressions(TypeAccessor typeAccessor, RecordType recordType, List`1<ColumnInfo> columns);
    private static ConstructorInfo SelectParameterizedConstructor(Type objectType);
    private Expression BuildFromParameterizedConstructor(Type objectType, IList`1<ValueTuple`2<string, Expression>> expressions);
    private Expression BuildRecordConstructor(EntityDescriptor entityDescriptor, Type objectType, Tuple`2[] index, RecordType recordType);
    private Expression BuildDefaultConstructor(EntityDescriptor entityDescriptor, Type objectType, Tuple`2[] index);
    private Expression BuildTableExpression(bool buildBlock, Type objectType, Tuple`2[] index);
    public sealed virtual SqlInfo[] ConvertToSql(Expression expression, int level, ConvertFlags flags);
    private SqlField BuildField(ColumnDescriptor column);
    public sealed virtual SqlInfo[] ConvertToIndex(Expression expression, int level, ConvertFlags flags);
    [NullableContextAttribute("2")]
public sealed virtual IsExpressionResult IsExpression(Expression expression, int level, RequestFor requestFlag);
    [NullableContextAttribute("2")]
public sealed virtual IBuildContext GetContext(Expression expression, int level, BuildInfo buildInfo);
    public sealed virtual int ConvertToParentIndex(int index, IBuildContext context);
    [NullableContextAttribute("2")]
public sealed virtual void SetAlias(string alias);
    public sealed virtual ISqlExpression GetSubQuery(IBuildContext context);
    public sealed virtual SqlStatement GetResultStatement();
    public sealed virtual void CompleteColumns();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Linq.Builder.ExpressionBuilder : object {
    private static object _sync;
    private static IReadOnlyList`1<ISequenceBuilder> _sequenceBuilders;
    private Query _query;
    private IReadOnlyList`1<ISequenceBuilder> _builders;
    private bool _reorder;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private HashSet`1<Expression> _subQueryExpressions;
    private ExpressionTreeOptimizationContext _optimizationContext;
    private ParametersContext _parametersContext;
    public List`1<ParameterExpression> BlockVariables;
    public List`1<Expression> BlockExpressions;
    public bool IsBlockDisable;
    public int VarIndex;
    [NullableAttribute("2")]
public SqlComment Tag;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<SqlQueryExtension> SqlQueryExtensions;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<TableContext> TablesInScope;
    public DataOptions DataOptions;
    public IDataContext DataContext;
    public Expression OriginalExpression;
    public Expression Expression;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ParameterExpression[] CompiledParameters;
    public List`1<IBuildContext> Contexts;
    public static ParameterExpression QueryRunnerParam;
    public static ParameterExpression DataContextParam;
    public static ParameterExpression DataReaderParam;
    public ParameterExpression DataReaderLocal;
    public static ParameterExpression ParametersParam;
    public static ParameterExpression ExpressionParam;
    internal bool DisableDefaultIfEmpty;
    [NullableAttribute("2")]
public ParameterExpression SequenceParameter;
    public static MethodInfo[] EnumerableMethods;
    public static MethodInfo[] QueryableMethods;
    public static MethodInfo[] AsyncExtensionsMethods;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<Expression, Expression> _optimizedExpressions;
    private static Int32[] Arg1;
    private static Int32[] Arg2;
    private static Int32[] Arg01;
    private static Int32[] Arg02;
    private static Int32[] Arg001;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Nullable`1<FindVisitor`1<ExpressionBuilder>> _isExpressionVisitor;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<Expression, Expression> _rootExpressions;
    private HashSet`1<Expression> _skippedExpressions;
    private Dictionary`2<Expression, UnaryExpression> _convertedExpressions;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Nullable`1<TransformVisitor`1<ExpressionBuilder>> _updateNullabilityFromExtensionTransformer;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<ValueTuple`2<IBuildContext, MethodCallExpression>, List`1<SubQueryContextInfo>> _buildContextCache;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Nullable`1<FindVisitor`1<ExpressionBuilder>> _enforceServerSideVisitorTrue;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Nullable`1<FindVisitor`1<ExpressionBuilder>> _enforceServerSideVisitorFalse;
    [NullableAttribute("2")]
public Expression AssociationRoot;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Stack`1<Tuple`3<AccessorMember, IBuildContext, List`1<LoadWithInfo[]>>> AssociationPath;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private HashSet`1<Expression> _buildMultipleQueryExpressions;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Nullable`1<TransformInfoVisitor`1<ExpressionBuilder>> _convertExpressionTransformer;
    private HashSet`1<Expression> _convertedPredicates;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<ValueTuple`2<Expression, ColumnDescriptor>, SqlValue> _constants;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static FindVisitor`1<object> _findExpressionVisitor;
    private int _doNotOptimizeIsTruePredicateCounter;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Nullable`1<TransformVisitor`1<ExpressionBuilder>> _removeNullPropagationTransformer;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Nullable`1<TransformVisitor`1<ExpressionBuilder>> _removeNullPropagationTransformerForSearch;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<Tuple`2<Expression, Tuple`2<CteClause, IBuildContext>>> _ctes;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<IQueryable, Expression> _ctesObjectMapping;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<Tuple`3<object, Func`5<object, IDataContext, Expression, Object[], object>, Func`6<object, IDataContext, Expression, Object[], CancellationToken, Task`1<object>>>> _preambles;
    public static ParameterExpression PreambleParam;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Stack`1<Type[]> _disabledFilters;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<SqlQueryExtension> _sqlQueryExtensionStack;
    [CompilerGeneratedAttribute]
private bool <IsGroupingGuardDisabled>k__BackingField;
    public ExpressionTreeOptimizationContext OptimizationContext { get; }
    public ParametersContext ParametersContext { get; }
    public MappingSchema MappingSchema { get; }
    public bool IsGroupingGuardDisabled { get; public set; }
    public ExpressionBuilder(Query query, ExpressionTreeOptimizationContext optimizationContext, ParametersContext parametersContext, IDataContext dataContext, Expression expression, ParameterExpression[] compiledParameters);
    private static ExpressionBuilder();
    public ExpressionTreeOptimizationContext get_OptimizationContext();
    public ParametersContext get_ParametersContext();
    public MappingSchema get_MappingSchema();
    public Query`1<T> Build();
    public IBuildContext BuildSequence(BuildInfo buildInfo);
    public ISequenceBuilder GetBuilder(BuildInfo buildInfo, bool throwIfNotFound);
    [NullableContextAttribute("2")]
public SequenceConvertInfo ConvertSequence(BuildInfo buildInfo, ParameterExpression param, bool throwExceptionIfCantConvert);
    public bool IsSequence(BuildInfo buildInfo);
    public Expression ConvertExpressionTree(Expression expression);
    public static Expression CorrectDataConnectionReference(Expression queryExpression, Expression dataContextExpression);
    private Expression ConvertParameters(Expression expression);
    public Expression ExposeExpression(Expression expression);
    private static void CollectLambdaParameters(Expression expression, HashSet`1<ParameterExpression> foundParameters);
    private Expression OptimizeExpression(Expression expression);
    private TransformInfo OptimizeExpressionImpl(HashSet`1<ParameterExpression> currentParameters, Expression expr);
    private LambdaExpression ConvertMethodExpression(Type type, MemberInfo mi, String& alias);
    private Expression ConvertSubquery(Expression expr);
    private Expression ConvertSingleOrFirst(Expression expr, MethodCallExpression call);
    private Expression ConvertWhere(MethodCallExpression method);
    private static LambdaExpression GetLambda(Expression expression, Int32[] n);
    private Expression ConvertGroupBy(MethodCallExpression method);
    private bool IsExpression(Expression ex);
    private Expression ConvertSelectMany(MethodCallExpression method);
    private Expression ConvertPredicate(MethodCallExpression method);
    private Expression ConvertPredicateAsync(MethodCallExpression method);
    private Expression ConvertSelector(MethodCallExpression method, bool isGeneric);
    private Expression ConvertSelectorAsync(MethodCallExpression method, bool isGeneric);
    private Expression ConvertSelect(MethodCallExpression method);
    private Expression ConvertIQueryable(Expression expression, HashSet`1<ParameterExpression> currentParameters);
    private Expression ConvertElementAt(MethodCallExpression method);
    private void CollectQueryDepended(Expression expr);
    public Expression AddQueryableMemberAccessors(TContext context, AccessorMember memberInfo, IDataContext dataContext, Func`4<TContext, MemberInfo, IDataContext, Expression> qe);
    private static MethodInfo GetQueryableMethodInfo(TContext context, MethodCallExpression method, Func`4<TContext, MethodInfo, bool, bool> predicate);
    private static MethodInfo GetMethodInfo(MethodCallExpression method, string name);
    private static Type[] GetMethodGenericTypes(MethodCallExpression method);
    public static BinaryExpression Equal(MappingSchema mappingSchema, Expression left, Expression right);
    [NullableContextAttribute("2")]
public Expression GetRootObject(Expression expr);
    public void UpdateConvertedExpression(Expression oldExpression, Expression newExpression);
    public void RemoveConvertedExpression(Expression ex);
    private Expression ConvertAssignmentArgument(IBuildContext context, Expression expr, MemberInfo memberInfo, bool enforceServerSide, string alias);
    private Expression UpdateNullabilityFromExtension(Expression resultExpr);
    public Expression BuildExpression(IBuildContext context, Expression expression, bool enforceServerSide, string alias);
    private Expression CorrectConditional(IBuildContext context, Expression expr, bool enforceServerSide, string alias);
    private bool IsEnumerableSource(Expression expr);
    private static bool IsMultipleQuery(MethodCallExpression ce, MappingSchema mappingSchema);
    private SubQueryContextInfo GetSubQueryContext(IBuildContext context, MethodCallExpression expr);
    public Expression GetSubQueryExpression(IBuildContext context, MethodCallExpression expr, bool enforceServerSide, string alias);
    private static bool EnforceServerSide(IBuildContext context);
    private Expression BuildSql(IBuildContext context, Expression expression, string alias);
    private Expression BuildSql(IBuildContext context, ISqlExpression sqlExpression, Type overrideType, string alias);
    public Expression BuildSql(Expression expression, int idx, ISqlExpression sqlExpression);
    public Expression BuildSql(Type type, int idx, IValueConverter converter);
    public Expression BuildSql(Type type, int idx, ISqlExpression sourceExpression);
    private bool HasNoneSqlMember(Expression expr);
    private bool HasNoneSqlMemberFind(WritableContext`2<bool, ExpressionBuilder> context, Expression e);
    private FindVisitor`1<ExpressionBuilder> GetVisitor(bool enforceServerSide);
    private bool PreferServerSide(Expression expr, bool enforceServerSide);
    public Expression BuildBlock(Expression expression);
    public ParameterExpression BuildVariable(Expression expr, string name);
    public Expression`1<Func`7<IQueryRunner, IDataContext, DbDataReader, Expression, Object[], Object[], T>> BuildMapper(Expression expr);
    private static Expression GetMultipleQueryExpression(IBuildContext context, MappingSchema mappingSchema, Expression expression, HashSet`1<ParameterExpression> parameters, Boolean& isLazy);
    private static Expression GetMultipleQueryExpressionLazy(IBuildContext context, MappingSchema mappingSchema, Expression expression, HashSet`1<ParameterExpression> parameters);
    public Expression BuildMultipleQuery(IBuildContext context, Expression expression, bool enforceServerSide);
    public IBuildContext BuildWhere(IBuildContext parent, IBuildContext sequence, LambdaExpression condition, bool checkForSubQuery, bool enforceHaving);
    private bool CheckSubQueryForWhere(IBuildContext context, Expression expression, Boolean& makeHaving);
    private static bool IsGrouping(Expression expression, MappingSchema mappingSchema);
    public void BuildTake(IBuildContext context, ISqlExpression expr, Nullable`1<TakeHints> hints);
    public IBuildContext GetSubQuery(IBuildContext context, MethodCallExpression expr);
    public ISqlExpression SubQueryToSql(IBuildContext context, MethodCallExpression expression);
    public bool IsSubQuery(IBuildContext context, MethodCallExpression call);
    private bool IsSubQuerySource(IBuildContext context, Expression expr);
    private bool IsGroupJoinSource(IBuildContext context, MethodCallExpression call);
    public Expression ConvertExpression(Expression expression);
    private TransformInfo ConvertExpressionTransformer(Expression e);
    private Expression ConvertMethod(MethodCallExpression pi);
    private Expression ConvertNew(NewExpression pi);
    public SqlInfo[] ConvertExpressions(IBuildContext context, Expression expression, ConvertFlags queryConvertFlag, ColumnDescriptor columnDescriptor);
    public ISqlExpression ConvertToSqlExpression(IBuildContext context, Expression expression, ColumnDescriptor columnDescriptor, bool isPureExpression);
    public ISqlExpression ConvertToExtensionSql(IBuildContext context, Expression expression, ColumnDescriptor columnDescriptor);
    public ISqlExpression ConvertToSql(IBuildContext context, Expression expression, bool unwrap, ColumnDescriptor columnDescriptor, bool isPureExpression);
    public ISqlExpression ConvertFormatToSql(IBuildContext context, MethodCallExpression mc, bool isPureExpression);
    public ISqlExpression ConvertExtensionToSql(IBuildContext context, ExpressionAttribute attr, MethodCallExpression mc);
    public static ISqlExpression ConvertToSqlConvertible(Expression expression, IDataContext context);
    public bool IsServerSideOnly(Expression expr);
    private bool CanBeConstant(Expression expr);
    public bool CanBeCompiled(Expression expr);
    private SqlValue BuildConstant(Expression expr, ColumnDescriptor columnDescriptor);
    private ISqlPredicate ConvertPredicate(IBuildContext context, Expression expression);
    private ISqlPredicate ConvertCompare(IBuildContext context, ExpressionType nodeType, Expression left, Expression right);
    private static bool IsBooleanConstant(Expression expr, Nullable`1& value);
    private static bool RestoreCompare(Expression& op1, Expression& op2);
    private ISqlPredicate ConvertEnumConversion(IBuildContext context, Expression left, Operator op, Expression right);
    private ISqlPredicate ConvertObjectNullComparison(IBuildContext context, Expression left, Expression right, bool isEqual);
    private static Expression ConstructMemberPath(MemberInfo[] memberPath, Expression ob, bool throwOnError);
    public ISqlPredicate ConvertObjectComparison(ExpressionType nodeType, IBuildContext leftContext, Expression left, IBuildContext rightContext, Expression right);
    public ISqlPredicate ConvertNewObjectComparison(IBuildContext context, ExpressionType nodeType, Expression left, Expression right);
    private static Expression FindExpression(Expression expr);
    private static bool FindExpressionFind(Expression pi);
    public static DbDataType GetMemberDataType(MappingSchema mappingSchema, MemberInfo member);
    private static DbDataType GetDataType(ISqlExpression expr, DbDataType baseType);
    private ISqlPredicate ConvertInPredicate(IBuildContext context, MethodCallExpression expression);
    [NullableContextAttribute("2")]
public ColumnDescriptor SuggestColumnDescriptor(IBuildContext context, Expression expr);
    public ColumnDescriptor SuggestColumnDescriptor(IBuildContext context, Expression expr1, Expression expr2);
    [NullableContextAttribute("2")]
public ColumnDescriptor SuggestColumnDescriptor(IBuildContext context, ReadOnlyCollection`1<Expression> expressions);
    private ISqlPredicate CreateStringPredicate(IBuildContext context, MethodCallExpression expression, SearchKind kind, ISqlExpression caseSensitive);
    private ISqlPredicate ConvertLikePredicate(IBuildContext context, MethodCallExpression expression);
    public ISqlPredicate MakeIsPredicate(TableContext table, Type typeOperand);
    public ISqlPredicate MakeIsPredicate(TContext getSqlContext, IBuildContext context, IReadOnlyList`1<InheritanceMapping> inheritanceMapping, Type toType, Func`3<TContext, string, ISqlExpression> getSql);
    private ISqlPredicate MakeIsPredicate(IBuildContext context, TypeBinaryExpression expression);
    public void BuildSearchCondition(IBuildContext context, Expression expression, List`1<SqlCondition> conditions);
    private static bool NeedNullCheck(ISqlExpression expr);
    private bool CanBeTranslatedToSql(IBuildContext context, Expression expr, bool canBeCompiled);
    [NullableContextAttribute("2")]
public IBuildContext GetContext(IBuildContext current, Expression expression);
    private static bool IsNullConstant(Expression expr);
    private TransformVisitor`1<ExpressionBuilder> GetRemoveNullPropagationTransformer(bool forSearch);
    private Expression RemoveNullPropagation(Expression expr, bool forSearch);
    public bool ProcessProjection(Dictionary`2<MemberInfo, Expression> members, Expression expression);
    public void ReplaceParent(IBuildContext oldParent, IBuildContext newParent);
    public static void EnsureAggregateColumns(IBuildContext context, SelectQuery query);
    [NullableContextAttribute("2")]
public Tuple`3<CteClause, IBuildContext, Expression> RegisterCte(IQueryable queryable, Expression cteExpression, Func`1<CteClause> buildFunc);
    private Tuple`2<CteClause, IBuildContext> FindRegisteredCteByExpression(Expression cteExpression, Nullable`1& idx);
    public Tuple`2<CteClause, IBuildContext> BuildCte(Expression cteExpression, Func`2<CteClause, Tuple`2<CteClause, IBuildContext>> buildFunc);
    public IBuildContext GetCteContext(Expression cteExpression);
    [NullableContextAttribute("2")]
public int RegisterPreamble(object data, Func`5<object, IDataContext, Expression, Object[], T> func, Func`6<object, IDataContext, Expression, Object[], CancellationToken, Task`1<T>> funcAsync);
    public void PushDisabledQueryFilters(Type[] disabledFilters);
    public bool IsFilterDisabled(Type entityType);
    public void PopDisabledFilter();
    public void PushSqlQueryExtension(SqlQueryExtension extension);
    public void PopSqlQueryExtension(SqlQueryExtension extension);
    [CompilerGeneratedAttribute]
public bool get_IsGroupingGuardDisabled();
    [CompilerGeneratedAttribute]
public void set_IsGroupingGuardDisabled(bool value);
    [CompilerGeneratedAttribute]
internal static bool <ConvertIQueryable>g__HasParametersDefined|76_0(Expression testedExpression, IEnumerable`1<ParameterExpression> allowed);
    [CompilerGeneratedAttribute]
private ISqlExpression <ConvertPredicate>g__IsCaseSensitive|154_0(MethodCallExpression mc);
    [CompilerGeneratedAttribute]
private bool <RemoveNullPropagation>g__IsAcceptableType|188_0(Type type, <>c__DisplayClass188_0& );
    [CompilerGeneratedAttribute]
internal static void <ProcessProjection>g__CollectParameters|189_0(Type forType, MethodBase method, ReadOnlyCollection`1<Expression> arguments, <>c__DisplayClass189_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Linq.Builder.ExpressionContext : SequenceContextBase {
    public ExpressionContext(IBuildContext parent, IBuildContext[] sequences, LambdaExpression lambda);
    public ExpressionContext(IBuildContext parent, IBuildContext sequence, LambdaExpression lambda);
    public ExpressionContext(IBuildContext parent, IBuildContext sequence, LambdaExpression lambda, SelectQuery selectQuery);
    public virtual Expression BuildExpression(Expression expression, int level, bool enforceServerSide);
    public virtual SqlInfo[] ConvertToSql(Expression expression, int level, ConvertFlags flags);
    public virtual SqlInfo[] ConvertToIndex(Expression expression, int level, ConvertFlags flags);
    [NullableContextAttribute("2")]
public virtual IsExpressionResult IsExpression(Expression expression, int level, RequestFor requestFlag);
    [NullableContextAttribute("2")]
public virtual IBuildContext GetContext(Expression expression, int level, BuildInfo buildInfo);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Linq.Builder.ExpressionHolder`2 : object {
    public TP p;
    public TE ex;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Linq.Builder.ExpressionTestGenerator : object {
    private bool _mangleNames;
    private StringBuilder _exprBuilder;
    private IDataContext _dataContext;
    private string _indent;
    private HashSet`1<Expression> _visitedExprs;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Nullable`1<VisitFuncVisitor`1<ExpressionTestGenerator>> _buildExpressionVisitor;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<Type, string> _typeNames;
    private StringBuilder _typeBuilder;
    private Dictionary`2<string, string> _nameDic;
    public static List`1<string> SystemNamespaces;
    private HashSet`1<object> _usedMembers;
    private HashSet`1<Type> _usedTypes;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Nullable`1<VisitActionVisitor`1<ExpressionTestGenerator>> _typesVisitor;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Nullable`1<VisitActionVisitor`1<ExpressionTestGenerator>> _membersVisitor;
    public ExpressionTestGenerator(IDataContext dataContext);
    public ExpressionTestGenerator(bool mangleNames, IDataContext dataContext);
    private static ExpressionTestGenerator();
    private void PushIndent();
    private void PopIndent();
    private void Build(Expression expr);
    private bool BuildExpression(Expression expr);
    private void BuildType(Type type, MappingSchema mappingSchema, DataOptions dataOptions);
    private static Type[] CollectBaseTypes(Type type);
    private string GetTypeNames(IEnumerable`1<Type> types, string separator);
    private static bool IsAnonymous(Type type);
    private string MangleName(Type type, string name, string prefix);
    private string MangleName(bool isUserType, string name, string prefix);
    private string MangleName(string name, string prefix);
    private bool IsUserType(Type type);
    [NullableContextAttribute("2")]
private static bool IsUserNamespace(string namespace);
    private string GetTypeName(Type type);
    private void VisitMembers(Expression expr);
    [NullableContextAttribute("2")]
private void AddType(Type type);
    private void VisitTypes(Expression expr);
    public string GenerateSource(Expression expr);
    public string GenerateSourceString(Expression expr);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private string <BuildExpression>b__11_1(ParameterExpression p);
    [CompilerGeneratedAttribute]
private void <BuildExpression>g__Modify|11_2(MemberBinding b);
    [CompilerGeneratedAttribute]
internal static void <CollectBaseTypes>g__populateBaseInterfaces|15_0(Type type, HashSet`1<Type> duplicateInterfaces);
    [CompilerGeneratedAttribute]
private void <VisitMembers>g__Visit|27_0(IEnumerable`1<MemberBinding> bs);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <GenerateSourceString>b__34_5(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.Linq.Builder.ExpressionTreeOptimizationContext : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private HashSet`1<Expression> _visitedExpressions;
    [CompilerGeneratedAttribute]
private IDataContext <DataContext>k__BackingField;
    [CompilerGeneratedAttribute]
private MappingSchema <MappingSchema>k__BackingField;
    [NullableAttribute("2")]
private EqualsToInfo _equalsToContextFalse;
    [NullableAttribute("2")]
private EqualsToInfo _equalsToContextTrue;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static TransformVisitor`1<object> _aggregateExpressionTransformer;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Nullable`1<TransformInfoVisitor`1<ExpressionTreeOptimizationContext>> _expandQueryableMethodsTransformer;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private TransformVisitor`1<ExpressionTreeOptimizationContext> _expandExpressionTransformer;
    private bool _expressionDependsOnParameters;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<Expression, bool> _isServerSideOnlyCache;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Nullable`1<FindVisitor`1<ExpressionTreeOptimizationContext>> _isServerSideOnlyVisitor;
    [NullableAttribute("2")]
private Expression _lastExpr2;
    private bool _lastResult2;
    private static HashSet`1<Expression> DefaultAllowedParams;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Nullable`1<FindVisitor`1<CanBeCompiledContext>> _canBeCompiledFindVisitor;
    [NullableAttribute("2")]
private Expression _lastExpr1;
    private bool _lastResult1;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Nullable`1<FindVisitor`1<ExpressionTreeOptimizationContext>> _canBeConstantVisitor;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Nullable`1<FindVisitor`1<ExpressionTreeOptimizationContext>> _canBeConstantFindVisitor;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Nullable`1<TransformInfoVisitor`1<ExpressionTreeOptimizationContext>> _exposeExpressionTransformer;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<Expression, Expression> _exposedCache;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Nullable`1<FindVisitor`1<ExpressionTreeOptimizationContext>> _enforceServerSideVisitorTrue;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Nullable`1<FindVisitor`1<ExpressionTreeOptimizationContext>> _enforceServerSideVisitorFalse;
    public IDataContext DataContext { get; }
    public MappingSchema MappingSchema { get; }
    public ExpressionTreeOptimizationContext(IDataContext dataContext);
    private static ExpressionTreeOptimizationContext();
    [CompilerGeneratedAttribute]
public IDataContext get_DataContext();
    [CompilerGeneratedAttribute]
public MappingSchema get_MappingSchema();
    internal EqualsToInfo GetSimpleEqualsToContext(bool compareConstantValues);
    public void ClearVisitedCache();
    public static Expression AggregateExpression(Expression expression);
    private static Expression AggregateExpressionTransformer(Expression expr);
    private static List`1<Expression> CompactTree(List`1<Expression> items, ExpressionType nodeType);
    public Expression ExpandQueryableMethods(Expression expression);
    private TransformInfo ExpandQueryableMethodsTransformer(Expression expr);
    public Expression ExpandExpression(Expression expression);
    public bool IsDependsOnParameters();
    public Expression ExpandExpressionTransformer(Expression expr);
    public bool IsServerSideOnly(Expression expr);
    private static bool IsQueryMember(Expression expr);
    public bool CanBeCompiled(Expression expr);
    private FindVisitor`1<CanBeCompiledContext> GetCanBeCompiledVisitor();
    private bool CanBeCompiledFind(CanBeCompiledContext context, Expression ex);
    public bool CanBeConstant(Expression expr);
    private bool CanBeConstantFind(Expression ex);
    private static Expression AliasCall(Expression expression, string alias);
    private TransformInfo ExposeExpressionTransformer(Expression expr);
    public Expression ExposeExpression(Expression expression);
    private static Expression ConvertMemberExpression(Expression expr, Expression root, LambdaExpression l);
    public LambdaExpression ConvertMethodExpression(Type type, MemberInfo mi, String& alias);
    public Expression ConvertMethod(MethodCallExpression pi, LambdaExpression lambda);
    private FindVisitor`1<ExpressionTreeOptimizationContext> GetVisitor(bool enforceServerSide);
    public bool PreferServerSide(Expression expr, bool enforceServerSide);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Linq.Builder.FirstSingleBuilder : MethodCallBuilder {
    public static String[] MethodNames;
    private static String[] MethodNamesAsync;
    private static FirstSingleBuilder();
    protected virtual bool CanBuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    private static bool IsApplicable(MethodCallExpression methodCall);
    protected virtual IBuildContext BuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual SequenceConvertInfo Convert(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo, ParameterExpression param);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("Key: {Key}, Data: {Data}")]
internal class LinqToDB.Linq.Builder.FKDH`2 : object {
    [CompilerGeneratedAttribute]
private TKey <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private TData <Data>k__BackingField;
    public TKey Key { get; public set; }
    public TData Data { get; public set; }
    public FKDH`2(TKey key, TData data);
    [CompilerGeneratedAttribute]
public TKey get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(TKey value);
    [CompilerGeneratedAttribute]
public TData get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(TData value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Linq.Builder.GroupByBuilder : MethodCallBuilder {
    private static MethodInfo[] GroupingSetMethods;
    private static GroupByBuilder();
    protected virtual bool CanBuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    [IteratorStateMachineAttribute("LinqToDB.Linq.Builder.GroupByBuilder/<EnumGroupingSets>d__2")]
private static IEnumerable`1<Expression> EnumGroupingSets(Expression expression);
    protected virtual IBuildContext BuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Linq.Builder.GroupByElementBuilder : object {
    [CompilerGeneratedAttribute]
private int <BuildCounter>k__BackingField;
    public int BuildCounter { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual int get_BuildCounter();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BuildCounter(int value);
    private static GroupByContext GetGroupByContext(ExpressionBuilder builder, BuildInfo buildInfo);
    public sealed virtual bool CanBuild(ExpressionBuilder builder, BuildInfo buildInfo);
    public sealed virtual IBuildContext BuildSequence(ExpressionBuilder builder, BuildInfo buildInfo);
    public sealed virtual SequenceConvertInfo Convert(ExpressionBuilder builder, BuildInfo buildInfo, ParameterExpression param);
    public sealed virtual bool IsSequence(ExpressionBuilder builder, BuildInfo buildInfo);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Linq.Builder.HasUniqueKeyBuilder : MethodCallBuilder {
    protected virtual bool CanBuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual IBuildContext BuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
}
[NullableContextAttribute("1")]
internal interface LinqToDB.Linq.Builder.IBuildContext {
    public ExpressionBuilder Builder { get; }
    [NullableAttribute("2")]
public Expression Expression { get; }
    public SelectQuery SelectQuery { get; public set; }
    [NullableAttribute("2")]
public SqlStatement Statement { get; public set; }
    [NullableAttribute("2")]
public IBuildContext Parent { get; public set; }
    public abstract virtual ExpressionBuilder get_Builder();
    [NullableContextAttribute("2")]
public abstract virtual Expression get_Expression();
    public abstract virtual SelectQuery get_SelectQuery();
    public abstract virtual void set_SelectQuery(SelectQuery value);
    [NullableContextAttribute("2")]
public abstract virtual SqlStatement get_Statement();
    [NullableContextAttribute("2")]
public abstract virtual void set_Statement(SqlStatement value);
    [NullableContextAttribute("2")]
public abstract virtual IBuildContext get_Parent();
    [NullableContextAttribute("2")]
public abstract virtual void set_Parent(IBuildContext value);
    public abstract virtual void BuildQuery(Query`1<T> query, ParameterExpression queryParameter);
    public abstract virtual Expression BuildExpression(Expression expression, int level, bool enforceServerSide);
    public abstract virtual SqlInfo[] ConvertToSql(Expression expression, int level, ConvertFlags flags);
    public abstract virtual SqlInfo[] ConvertToIndex(Expression expression, int level, ConvertFlags flags);
    [NullableContextAttribute("2")]
public abstract virtual IsExpressionResult IsExpression(Expression expression, int level, RequestFor requestFlag);
    [NullableContextAttribute("2")]
public abstract virtual IBuildContext GetContext(Expression expression, int level, BuildInfo buildInfo);
    public abstract virtual int ConvertToParentIndex(int index, IBuildContext context);
    [NullableContextAttribute("2")]
public abstract virtual void SetAlias(string alias);
    public abstract virtual ISqlExpression GetSubQuery(IBuildContext context);
    public abstract virtual SqlStatement GetResultStatement();
    public abstract virtual void CompleteColumns();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Linq.Builder.IgnoreFiltersBuilder : MethodCallBuilder {
    protected virtual bool CanBuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual IBuildContext BuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Linq.Builder.InlineParametersBuilder : MethodCallBuilder {
    protected virtual bool CanBuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual IBuildContext BuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Linq.Builder.InsertBuilder : MethodCallBuilder {
    private static String[] MethodNames;
    private static InsertBuilder();
    protected virtual bool CanBuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    private static void AddInsertColumns(SelectQuery selectQuery, List`1<SqlSetExpression> items);
    protected virtual IBuildContext BuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    [CompilerGeneratedAttribute]
internal static LambdaExpression <BuildMethodCall>g__BuildDefaultOutputExpression|3_0(Type outputType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Linq.Builder.InsertOrUpdateBuilder : MethodCallBuilder {
    protected virtual bool CanBuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual IBuildContext BuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
}
[NullableContextAttribute("1")]
internal interface LinqToDB.Linq.Builder.ISequenceBuilder {
    public int BuildCounter { get; public set; }
    public abstract virtual int get_BuildCounter();
    public abstract virtual void set_BuildCounter(int value);
    public abstract virtual bool CanBuild(ExpressionBuilder builder, BuildInfo buildInfo);
    public abstract virtual IBuildContext BuildSequence(ExpressionBuilder builder, BuildInfo buildInfo);
    public abstract virtual SequenceConvertInfo Convert(ExpressionBuilder builder, BuildInfo buildInfo, ParameterExpression param);
    public abstract virtual bool IsSequence(ExpressionBuilder builder, BuildInfo buildInfo);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class LinqToDB.Linq.Builder.IsExpressionResult : ValueType {
    public bool Result;
    public IBuildContext Context;
    public Expression Expression;
    public ISqlExpression SqlExpression;
    public static IsExpressionResult True;
    public static IsExpressionResult False;
    public IsExpressionResult(bool result, Expression expression);
    public IsExpressionResult(bool result, IBuildContext context, Expression expression);
    [NullableContextAttribute("1")]
public IsExpressionResult(ISqlExpression expression);
    private static IsExpressionResult();
    public static IsExpressionResult GetResult(bool result);
}
[NullableContextAttribute("1")]
public interface LinqToDB.Linq.Builder.IToSqlConverter {
    public abstract virtual ISqlExpression ToSql(Expression expression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Linq.Builder.JoinBuilder : MethodCallBuilder {
    private static String[] MethodNames;
    private static JoinBuilder();
    protected virtual bool CanBuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual IBuildContext BuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    private static IBuildContext GetSubQueryContext(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo, SelectQuery sql, LambdaExpression innerKeyLambda, Expression outerKeySelector, Expression innerKeySelector, IBuildContext outerKeyContext);
    internal static void BuildJoin(ExpressionBuilder builder, SqlSearchCondition condition, IBuildContext outerKeyContext, Expression outerKeySelector, IBuildContext innerKeyContext, Expression innerKeySelector);
    private static void BuildSubQueryJoin(ExpressionBuilder builder, IBuildContext outerKeyContext, Expression outerKeySelector, Expression innerKeySelector, IBuildContext subQueryKeyContext, SelectQuery subQuerySelect);
}
internal static class LinqToDB.Linq.Builder.KDH : object {
    [NullableContextAttribute("1")]
public static KDH`2<TKey, TData> Create(TKey key, TData data);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("Key: {Key}, Data: {Data}")]
internal class LinqToDB.Linq.Builder.KDH`2 : object {
    [CompilerGeneratedAttribute]
private TKey <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private TData <Data>k__BackingField;
    public TKey Key { get; public set; }
    public TData Data { get; public set; }
    public KDH`2(TKey key, TData data);
    [CompilerGeneratedAttribute]
public TKey get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(TKey value);
    [CompilerGeneratedAttribute]
public TData get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(TData value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Linq.Builder.LoadWithBuilder : MethodCallBuilder {
    public static String[] MethodNames;
    private static LoadWithBuilder();
    protected virtual bool CanBuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    private static void CheckFilterFunc(Type expectedType, Type filterType, MappingSchema mappingSchema);
    protected virtual IBuildContext BuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    private static TableContext GetTableContext(IBuildContext ctx, Expression path, Expression& stopExpression);
    [IteratorStateMachineAttribute("LinqToDB.Linq.Builder.LoadWithBuilder/<ExtractAssociations>d__5")]
private static IEnumerable`1<LoadWithInfo> ExtractAssociations(ExpressionBuilder builder, Expression expression, Expression stopExpression);
    [IteratorStateMachineAttribute("LinqToDB.Linq.Builder.LoadWithBuilder/<GetAssociations>d__6")]
private static IEnumerable`1<MemberInfo> GetAssociations(ExpressionBuilder builder, Expression expression, Expression stopExpression);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class LinqToDB.Linq.Builder.LoadWithInfo : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private MemberInfo <MemberInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private LambdaExpression <MemberFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <FilterFunc>k__BackingField;
    [NullableAttribute("1")]
public MemberInfo MemberInfo { get; }
    public LambdaExpression MemberFilter { get; public set; }
    public Expression FilterFunc { get; public set; }
    [NullableContextAttribute("1")]
public LoadWithInfo(MemberInfo memberInfo);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public MemberInfo get_MemberInfo();
    [CompilerGeneratedAttribute]
public LambdaExpression get_MemberFilter();
    [CompilerGeneratedAttribute]
public void set_MemberFilter(LambdaExpression value);
    [CompilerGeneratedAttribute]
public Expression get_FilterFunc();
    [CompilerGeneratedAttribute]
public void set_FilterFunc(Expression value);
    [NullableContextAttribute("1")]
private bool Equals(LoadWithInfo other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Linq.Builder.MergeBuilder : MethodCallBuilder {
    private static MethodInfo[] _supportedMethods;
    private static MergeBuilder();
    protected virtual bool CanBuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual IBuildContext BuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    private static SelectQuery RemoveContextFromQuery(TableContext tableContext, SelectQuery query);
    public static SqlSearchCondition BuildSearchCondition(ExpressionBuilder builder, SqlStatement statement, IBuildContext onContext, IBuildContext secondContext, LambdaExpression condition);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class LinqToDB.Linq.Builder.MethodCallBuilder : object {
    [CompilerGeneratedAttribute]
private int <BuildCounter>k__BackingField;
    public int BuildCounter { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual int get_BuildCounter();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BuildCounter(int value);
    public sealed virtual bool CanBuild(ExpressionBuilder builder, BuildInfo buildInfo);
    public sealed virtual IBuildContext BuildSequence(ExpressionBuilder builder, BuildInfo buildInfo);
    public sealed virtual SequenceConvertInfo Convert(ExpressionBuilder builder, BuildInfo buildInfo, ParameterExpression param);
    protected virtual SequenceConvertInfo Convert(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo, ParameterExpression param);
    public virtual bool IsSequence(ExpressionBuilder builder, BuildInfo buildInfo);
    protected abstract virtual bool CanBuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected abstract virtual IBuildContext BuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected static Expression ConvertMethod(MethodCallExpression methodCall, int sourceTypeNumber, SequenceConvertInfo info, ParameterExpression param, Expression expression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Linq.Builder.MethodChainBuilder : MethodCallBuilder {
    protected virtual bool CanBuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual IBuildContext BuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Linq.Builder.MultiInsertBuilder : MethodCallBuilder {
    private static Dictionary`2<MethodInfo, Func`4<ExpressionBuilder, MethodCallExpression, BuildInfo, IBuildContext>> _methodBuilders;
    private static MultiInsertBuilder();
    protected virtual bool CanBuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual IBuildContext BuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    private static IBuildContext BuildMultiInsert(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    private static IBuildContext BuildTargetTable(ExpressionBuilder builder, BuildInfo buildInfo, bool isConditional, Expression query, LambdaExpression condition, Expression table, LambdaExpression setter);
    private static IBuildContext BuildInto(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    private static IBuildContext BuildWhen(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    private static IBuildContext BuildElse(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    private static IBuildContext BuildInsert(ExpressionBuilder builder, BuildInfo buildInfo, MultiInsertType type, Expression query);
    private static IBuildContext BuildInsert(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    private static IBuildContext BuildInsertAll(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    private static IBuildContext BuildInsertFirst(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Linq.Builder.OfTypeBuilder : MethodCallBuilder {
    protected virtual bool CanBuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual IBuildContext BuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    private static ISqlPredicate MakeIsPredicate(ExpressionBuilder builder, IBuildContext context, Type fromType, Type toType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Linq.Builder.OrderByBuilder : MethodCallBuilder {
    private static String[] MethodNames;
    private static OrderByBuilder();
    protected virtual bool CanBuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual IBuildContext BuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Linq.Builder.ParametersContext : object {
    [CompilerGeneratedAttribute]
private Expression <ParametersExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private ExpressionTreeOptimizationContext <OptimizationContext>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataContext <DataContext>k__BackingField;
    private static ParameterExpression[] AccessorParameters;
    public List`1<ParameterAccessor> CurrentSqlParameters;
    internal Dictionary`2<Expression, Expression> _expressionAccessors;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal List`1<ValueTuple`3<Expression, ColumnDescriptor, ParameterAccessor>> _parameters;
    public Expression ParametersExpression { get; }
    public ExpressionTreeOptimizationContext OptimizationContext { get; }
    public IDataContext DataContext { get; }
    public MappingSchema MappingSchema { get; }
    public ParametersContext(Expression parametersExpression, ExpressionTreeOptimizationContext optimizationContext, IDataContext dataContext);
    private static ParametersContext();
    [CompilerGeneratedAttribute]
public Expression get_ParametersExpression();
    [CompilerGeneratedAttribute]
public ExpressionTreeOptimizationContext get_OptimizationContext();
    [CompilerGeneratedAttribute]
public IDataContext get_DataContext();
    public MappingSchema get_MappingSchema();
    public ParameterAccessor RegisterParameter(Expression expression);
    internal void AddCurrentSqlParameter(ParameterAccessor parameterAccessor);
    public ParameterAccessor BuildParameter(Expression expr, ColumnDescriptor columnDescriptor, bool forceConstant, BuildParameterType buildParameterType);
    public ParameterAccessor BuildParameterFromArgumentProperty(MethodCallExpression methodCall, int argumentIndex, ColumnDescriptor columnDescriptor, BuildParameterType buildParameterType);
    public ParameterAccessor BuildParameterFromArgument(MethodCallExpression methodCall, int argumentIndex, ColumnDescriptor columnDescriptor, BuildParameterType buildParameterType);
    private Expression GetActualMethodAccessor(MethodCallExpression methodCall);
    private Expression GenerateArgumentAccessor(MethodCallExpression methodCall, int argumentIndex, ColumnDescriptor columnDescriptor);
    private ParameterAccessor PrepareConvertersAndCreateParameter(ValueTypeExpression newExpr, Expression valueExpression, string name, ColumnDescriptor columnDescriptor, BuildParameterType buildParameterType);
    public ValueTypeExpression ReplaceParameter(IDictionary`2<Expression, Expression> expressionAccessors, Expression expression, bool forceConstant, Action`1<string> setName);
    internal static ParameterAccessor CreateParameterAccessor(IDataContext dataContext, Expression accessorExpression, Expression originalAccessorExpression, Expression dbDataTypeAccessorExpression, Expression expression, Expression parametersExpression, string name);
    private static Expression CorrectAccessorExpression(Expression accessorExpression, IDataContext dataContext, ParameterExpression dataContextParam);
    internal ISqlExpression GetParameter(Expression ex, MemberInfo member, ColumnDescriptor columnDescriptor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Linq.Builder.PassThroughBuilder : MethodCallBuilder {
    private static MethodInfo[] _supportedMethods;
    private static PassThroughBuilder();
    protected virtual bool CanBuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual IBuildContext BuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{BuildContextDebuggingHelper.GetContextInfo(this)}")]
internal abstract class LinqToDB.Linq.Builder.PassThroughContext : object {
    [CompilerGeneratedAttribute]
private IBuildContext <Context>k__BackingField;
    public IBuildContext Context { get; public set; }
    public ExpressionBuilder Builder { get; }
    [NullableAttribute("2")]
public Expression Expression { get; }
    public SelectQuery SelectQuery { get; public set; }
    [NullableAttribute("2")]
public SqlStatement Statement { get; public set; }
    [NullableAttribute("2")]
public IBuildContext Parent { get; public set; }
    protected PassThroughContext(IBuildContext context);
    [CompilerGeneratedAttribute]
public IBuildContext get_Context();
    [CompilerGeneratedAttribute]
public void set_Context(IBuildContext value);
    public virtual ExpressionBuilder get_Builder();
    [NullableContextAttribute("2")]
public virtual Expression get_Expression();
    public virtual SelectQuery get_SelectQuery();
    public virtual void set_SelectQuery(SelectQuery value);
    [NullableContextAttribute("2")]
public virtual SqlStatement get_Statement();
    [NullableContextAttribute("2")]
public virtual void set_Statement(SqlStatement value);
    [NullableContextAttribute("2")]
public virtual IBuildContext get_Parent();
    [NullableContextAttribute("2")]
public virtual void set_Parent(IBuildContext value);
    public virtual void BuildQuery(Query`1<T> query, ParameterExpression queryParameter);
    public virtual Expression BuildExpression(Expression expression, int level, bool enforceServerSide);
    public virtual SqlInfo[] ConvertToSql(Expression expression, int level, ConvertFlags flags);
    public virtual SqlInfo[] ConvertToIndex(Expression expression, int level, ConvertFlags flags);
    [NullableContextAttribute("2")]
public virtual IsExpressionResult IsExpression(Expression expression, int level, RequestFor requestFlag);
    [NullableContextAttribute("2")]
public virtual IBuildContext GetContext(Expression expression, int level, BuildInfo buildInfo);
    public virtual int ConvertToParentIndex(int index, IBuildContext context);
    [NullableContextAttribute("2")]
public virtual void SetAlias(string alias);
    public virtual ISqlExpression GetSubQuery(IBuildContext context);
    public virtual SqlStatement GetResultStatement();
    public sealed virtual void CompleteColumns();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Linq.Builder.QueryExtensionBuilder : MethodCallBuilder {
    protected virtual bool CanBuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual IBuildContext BuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Linq.Builder.QueryNameBuilder : MethodCallBuilder {
    protected virtual bool CanBuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual IBuildContext BuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Linq.Builder.RemoveOrderByBuilder : MethodCallBuilder {
    protected virtual bool CanBuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual IBuildContext BuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
}
public enum LinqToDB.Linq.Builder.RequestFor : Enum {
    public int value__;
    public static RequestFor Table;
    public static RequestFor Association;
    public static RequestFor Object;
    public static RequestFor GroupJoin;
    public static RequestFor Field;
    public static RequestFor Expression;
    public static RequestFor SubQuery;
    public static RequestFor Root;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Linq.Builder.ScalarSelectBuilder : object {
    [CompilerGeneratedAttribute]
private int <BuildCounter>k__BackingField;
    public int BuildCounter { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual int get_BuildCounter();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BuildCounter(int value);
    public sealed virtual bool CanBuild(ExpressionBuilder builder, BuildInfo buildInfo);
    public sealed virtual IBuildContext BuildSequence(ExpressionBuilder builder, BuildInfo buildInfo);
    public sealed virtual SequenceConvertInfo Convert(ExpressionBuilder builder, BuildInfo buildInfo, ParameterExpression param);
    public sealed virtual bool IsSequence(ExpressionBuilder builder, BuildInfo buildInfo);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Linq.Builder.SelectBuilder : MethodCallBuilder {
    protected virtual bool CanBuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual IBuildContext BuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    private static IBuildContext CheckSubQueryForSelect(IBuildContext context);
    protected virtual SequenceConvertInfo Convert(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo, ParameterExpression param);
    [IteratorStateMachineAttribute("LinqToDB.Linq.Builder.SelectBuilder/<GetExpressions>d__5")]
private static IEnumerable`1<SequenceConvertPath> GetExpressions(ParameterExpression param, Expression path, int level, Expression expression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{BuildContextDebuggingHelper.GetContextInfo(this)}")]
internal class LinqToDB.Linq.Builder.SelectContext : object {
    [CompilerGeneratedAttribute]
private IBuildContext[] <Sequence>k__BackingField;
    [CompilerGeneratedAttribute]
private LambdaExpression <Lambda>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private ExpressionBuilder <Builder>k__BackingField;
    [CompilerGeneratedAttribute]
private SelectQuery <SelectQuery>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private SqlStatement <Statement>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IBuildContext <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsScalar>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowAddDefault>k__BackingField;
    public Dictionary`2<MemberInfo, Expression> Members;
    [NullableAttribute("2")]
private ParameterExpression _rootExpression;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<ValueTuple`2<MemberInfo, ConvertFlags>, SqlInfo[]> _sql;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<ValueTuple`3<Expression, int, ConvertFlags>, SqlInfo[]> _expressionIndex;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<Tuple`2<MemberInfo, ConvertFlags>, SqlInfo[]> _memberIndex;
    [NullableAttribute("2")]
private Expression _lastAssociationExpression;
    private int _lastAssociationLevel;
    public IBuildContext[] Sequence { get; }
    public LambdaExpression Lambda { get; public set; }
    public Expression Body { get; public set; }
    public ExpressionBuilder Builder { get; }
    public SelectQuery SelectQuery { get; public set; }
    [NullableAttribute("2")]
public SqlStatement Statement { get; public set; }
    [NullableAttribute("2")]
public IBuildContext Parent { get; public set; }
    public bool IsScalar { get; }
    public bool AllowAddDefault { get; public set; }
    private Expression LinqToDB.Linq.Builder.IBuildContext.Expression { get; }
    public SelectContext(IBuildContext parent, ExpressionBuilder builder, LambdaExpression lambda, SelectQuery selectQuery);
    public SelectContext(IBuildContext parent, LambdaExpression lambda, IBuildContext[] sequences);
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
public IBuildContext[] get_Sequence();
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
public LambdaExpression get_Lambda();
    [CompilerGeneratedAttribute]
public void set_Lambda(LambdaExpression value);
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
public Expression get_Body();
    [CompilerGeneratedAttribute]
public void set_Body(Expression value);
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
public sealed virtual ExpressionBuilder get_Builder();
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
public sealed virtual SelectQuery get_SelectQuery();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SelectQuery(SelectQuery value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
public sealed virtual SqlStatement get_Statement();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void set_Statement(SqlStatement value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
public sealed virtual IBuildContext get_Parent();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void set_Parent(IBuildContext value);
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
public bool get_IsScalar();
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
public bool get_AllowAddDefault();
    [CompilerGeneratedAttribute]
public void set_AllowAddDefault(bool value);
    private sealed virtual override Expression LinqToDB.Linq.Builder.IBuildContext.get_Expression();
    public virtual void BuildQuery(Query`1<T> query, ParameterExpression queryParameter);
    public virtual Expression BuildExpression(Expression expression, int level, bool enforceServerSide);
    public virtual SqlInfo[] ConvertToSql(Expression expression, int level, ConvertFlags flags);
    private SqlInfo[] ConvertMember(MemberInfo member, Expression expression, ConvertFlags flags);
    private SqlInfo[] ConvertExpressions(Expression expression, ConvertFlags flags, ColumnDescriptor columnDescriptor);
    public virtual SqlInfo[] ConvertToIndex(Expression expression, int level, ConvertFlags flags);
    private SqlInfo[] ConvertToIndexInternal(Expression expression, int level, ConvertFlags flags);
    private SqlInfo SetInfo(SqlInfo info, MemberInfo member);
    [NullableContextAttribute("2")]
public virtual IsExpressionResult IsExpression(Expression expression, int level, RequestFor requestFlag);
    [NullableContextAttribute("2")]
public IsExpressionResult IsExpressionInternal(Expression expression, int level, RequestFor requestFlag);
    [NullableContextAttribute("2")]
public virtual IBuildContext GetContext(Expression expression, int level, BuildInfo buildInfo);
    public virtual int ConvertToParentIndex(int index, IBuildContext context);
    [NullableContextAttribute("2")]
public virtual void SetAlias(string alias);
    public sealed virtual ISqlExpression GetSubQuery(IBuildContext context);
    public virtual SqlStatement GetResultStatement();
    public virtual void CompleteColumns();
    private T ProcessScalar(TContext context, Expression expression, int level, Func`5<TContext, IBuildContext, Expression, int, T> action, Func`2<TContext, T> defaultAction, bool throwOnError);
    private T ProcessMemberAccess(TContext context, Expression expression, MemberExpression levelExpression, int level, Func`7<TContext, int, IBuildContext, Expression, int, Expression, T> action);
    protected bool IsSubQuery();
    private Expression GetProjectedExpression(MemberInfo memberInfo, bool throwOnError);
    private IBuildContext GetSequence(Expression expression, int level);
    private static Expression GetExpression(Expression expression, Expression levelExpression, Expression memberExpression);
    private Expression GetMemberExpression(Expression newExpression, Expression expression, int level);
    protected Expression GetMemberExpression(MemberInfo member, bool add, Type type, Expression sourceExpression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Linq.Builder.SelectManyBuilder : MethodCallBuilder {
    protected virtual bool CanBuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual IBuildContext BuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    private static Join CreateJoin(JoinType joinType, SelectQuery sql);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Linq.Builder.SelectQueryBuilder : MethodCallBuilder {
    protected virtual bool CanBuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual IBuildContext BuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    public virtual bool IsSequence(ExpressionBuilder builder, BuildInfo buildInfo);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{BuildContextDebuggingHelper.GetContextInfo(this)}")]
internal abstract class LinqToDB.Linq.Builder.SequenceContextBase : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IBuildContext <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private IBuildContext[] <Sequences>k__BackingField;
    [CompilerGeneratedAttribute]
private ExpressionBuilder <Builder>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private LambdaExpression <Lambda>k__BackingField;
    [CompilerGeneratedAttribute]
private SelectQuery <SelectQuery>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private SqlStatement <Statement>k__BackingField;
    [NullableAttribute("2")]
public IBuildContext Parent { get; public set; }
    public IBuildContext[] Sequences { get; public set; }
    public ExpressionBuilder Builder { get; public set; }
    [NullableAttribute("2")]
public LambdaExpression Lambda { get; public set; }
    public SelectQuery SelectQuery { get; public set; }
    [NullableAttribute("2")]
public SqlStatement Statement { get; public set; }
    public IBuildContext Sequence { get; }
    [NullableAttribute("2")]
private Expression LinqToDB.Linq.Builder.IBuildContext.Expression { get; }
    [NullableContextAttribute("2")]
protected SequenceContextBase(IBuildContext parent, IBuildContext[] sequences, LambdaExpression lambda);
    [NullableContextAttribute("2")]
protected SequenceContextBase(IBuildContext parent, IBuildContext sequence, LambdaExpression lambda);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual IBuildContext get_Parent();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void set_Parent(IBuildContext value);
    [CompilerGeneratedAttribute]
public IBuildContext[] get_Sequences();
    [CompilerGeneratedAttribute]
public void set_Sequences(IBuildContext[] value);
    [CompilerGeneratedAttribute]
public sealed virtual ExpressionBuilder get_Builder();
    [CompilerGeneratedAttribute]
public void set_Builder(ExpressionBuilder value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public LambdaExpression get_Lambda();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Lambda(LambdaExpression value);
    [CompilerGeneratedAttribute]
public sealed virtual SelectQuery get_SelectQuery();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SelectQuery(SelectQuery value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual SqlStatement get_Statement();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void set_Statement(SqlStatement value);
    public IBuildContext get_Sequence();
    [NullableContextAttribute("2")]
private sealed virtual override Expression LinqToDB.Linq.Builder.IBuildContext.get_Expression();
    public virtual void BuildQuery(Query`1<T> query, ParameterExpression queryParameter);
    public abstract virtual Expression BuildExpression(Expression expression, int level, bool enforceServerSide);
    public abstract virtual SqlInfo[] ConvertToSql(Expression expression, int level, ConvertFlags flags);
    public abstract virtual SqlInfo[] ConvertToIndex(Expression expression, int level, ConvertFlags flags);
    [NullableContextAttribute("2")]
public abstract virtual IsExpressionResult IsExpression(Expression expression, int level, RequestFor requestFlag);
    [NullableContextAttribute("2")]
public abstract virtual IBuildContext GetContext(Expression expression, int level, BuildInfo buildInfo);
    public virtual SqlStatement GetResultStatement();
    public sealed virtual void CompleteColumns();
    public virtual int ConvertToParentIndex(int index, IBuildContext context);
    [NullableContextAttribute("2")]
public virtual void SetAlias(string alias);
    public virtual ISqlExpression GetSubQuery(IBuildContext context);
    protected bool IsSubQuery();
}
public class LinqToDB.Linq.Builder.SequenceConvertInfo : object {
    [NullableAttribute("2")]
public ParameterExpression Parameter;
    [NullableAttribute("1")]
public Expression Expression;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<SequenceConvertPath> ExpressionsToReplace;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("Path = {Path}, Expr = {Expr}, Level = {Level}")]
public class LinqToDB.Linq.Builder.SequenceConvertPath : object {
    public Expression Path;
    public Expression Expr;
    public int Level;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class LinqToDB.Linq.Builder.SequenceHelper : object {
    public static Expression CorrectExpression(Expression expression, IBuildContext current, IBuildContext underlying);
    public static TableContext GetTableContext(IBuildContext context);
    public static IBuildContext UnwrapSubqueryContext(IBuildContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Linq.Builder.SetOperationBuilder : MethodCallBuilder {
    private static String[] MethodNames;
    private static SetOperationBuilder();
    protected virtual bool CanBuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual IBuildContext BuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Linq.Builder.SingleExpressionContext : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IBuildContext <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private ExpressionBuilder <Builder>k__BackingField;
    [CompilerGeneratedAttribute]
private ISqlExpression <SqlExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private SelectQuery <SelectQuery>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private SqlStatement <Statement>k__BackingField;
    [NullableAttribute("2")]
public IBuildContext Parent { get; public set; }
    public ExpressionBuilder Builder { get; public set; }
    public ISqlExpression SqlExpression { get; }
    public SelectQuery SelectQuery { get; public set; }
    [NullableAttribute("2")]
public SqlStatement Statement { get; public set; }
    [NullableAttribute("2")]
private Expression LinqToDB.Linq.Builder.IBuildContext.Expression { get; }
    public SingleExpressionContext(IBuildContext parent, ExpressionBuilder builder, SqlField sqlExpression, SelectQuery selectQuery);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual IBuildContext get_Parent();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void set_Parent(IBuildContext value);
    [CompilerGeneratedAttribute]
public sealed virtual ExpressionBuilder get_Builder();
    [CompilerGeneratedAttribute]
public void set_Builder(ExpressionBuilder value);
    [CompilerGeneratedAttribute]
public ISqlExpression get_SqlExpression();
    [CompilerGeneratedAttribute]
public sealed virtual SelectQuery get_SelectQuery();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SelectQuery(SelectQuery value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual SqlStatement get_Statement();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void set_Statement(SqlStatement value);
    [NullableContextAttribute("2")]
private sealed virtual override Expression LinqToDB.Linq.Builder.IBuildContext.get_Expression();
    public sealed virtual void BuildQuery(Query`1<T> query, ParameterExpression queryParameter);
    public sealed virtual Expression BuildExpression(Expression expression, int level, bool enforceServerSide);
    public sealed virtual SqlInfo[] ConvertToSql(Expression expression, int level, ConvertFlags flags);
    public sealed virtual SqlInfo[] ConvertToIndex(Expression expression, int level, ConvertFlags flags);
    [NullableContextAttribute("2")]
public sealed virtual IsExpressionResult IsExpression(Expression expression, int level, RequestFor requestFlag);
    [NullableContextAttribute("2")]
public sealed virtual IBuildContext GetContext(Expression expression, int level, BuildInfo buildInfo);
    public sealed virtual SqlStatement GetResultStatement();
    public sealed virtual void CompleteColumns();
    public sealed virtual int ConvertToParentIndex(int index, IBuildContext context);
    [NullableContextAttribute("2")]
public sealed virtual void SetAlias(string alias);
    public sealed virtual ISqlExpression GetSubQuery(IBuildContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.Linq.Builder.SqlInfo : object {
    public ISqlExpression Sql;
    [NullableAttribute("2")]
public SelectQuery Query;
    public int Index;
    public MemberInfo[] MemberChain;
    public SqlInfo(MemberInfo[] mi, ISqlExpression sql, SelectQuery query, int index);
    public SqlInfo(ISqlExpression sql, SelectQuery query, int index);
    public SqlInfo(MemberInfo mi, ISqlExpression sql, SelectQuery query, int index);
    public SqlInfo(IEnumerable`1<MemberInfo> mi, ISqlExpression sql, SelectQuery query, int index);
    public SqlInfo(IEnumerable`1<MemberInfo> mi, ISqlExpression sql, int index);
    public SqlInfo Clone(MemberInfo mi);
    public bool CompareMembers(SqlInfo info);
    public bool CompareLastMember(SqlInfo info);
    public SqlInfo AppendMember(MemberInfo mi);
    public SqlInfo WithMembers(IEnumerable`1<MemberInfo> mi);
    public SqlInfo WithMember(MemberInfo mi);
    public SqlInfo WithSql(ISqlExpression sql);
    public SqlInfo WithIndex(int index);
    public SqlInfo WithQuery(SelectQuery query);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.Linq.Builder.SqlQueryExtensionData : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private ParameterInfo <Parameter>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ParamsIndex>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ISqlExpression <SqlExpression>k__BackingField;
    public string Name { get; }
    public Expression Expression { get; }
    public ParameterInfo Parameter { get; }
    public int ParamsIndex { get; }
    [NullableAttribute("2")]
public ISqlExpression SqlExpression { get; public set; }
    public SqlQueryExtensionData(string name, Expression expr, ParameterInfo parameter, int paramsIndex);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public Expression get_Expression();
    [CompilerGeneratedAttribute]
public ParameterInfo get_Parameter();
    [CompilerGeneratedAttribute]
public int get_ParamsIndex();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public ISqlExpression get_SqlExpression();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_SqlExpression(ISqlExpression value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Linq.Builder.SubQueryContext : PassThroughContext {
    [CompilerGeneratedAttribute]
private IBuildContext <SubQuery>k__BackingField;
    [CompilerGeneratedAttribute]
private SelectQuery <SelectQuery>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IBuildContext <Parent>k__BackingField;
    protected internal Dictionary`2<int, int> ColumnIndexes;
    public IBuildContext SubQuery { get; private set; }
    public SelectQuery SelectQuery { get; public set; }
    [NullableAttribute("2")]
public IBuildContext Parent { get; public set; }
    protected bool OptimizeColumns { get; }
    public SubQueryContext(IBuildContext subQuery, SelectQuery selectQuery, bool addToSql);
    public SubQueryContext(IBuildContext subQuery, bool addToSql);
    [CompilerGeneratedAttribute]
public IBuildContext get_SubQuery();
    [CompilerGeneratedAttribute]
private void set_SubQuery(IBuildContext value);
    [CompilerGeneratedAttribute]
public virtual SelectQuery get_SelectQuery();
    [CompilerGeneratedAttribute]
public virtual void set_SelectQuery(SelectQuery value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual IBuildContext get_Parent();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual void set_Parent(IBuildContext value);
    public virtual SqlInfo[] ConvertToSql(Expression expression, int level, ConvertFlags flags);
    public virtual SqlInfo[] ConvertToIndex(Expression expression, int level, ConvertFlags flags);
    [NullableContextAttribute("2")]
public virtual IsExpressionResult IsExpression(Expression expression, int level, RequestFor requestFlag);
    protected virtual bool get_OptimizeColumns();
    protected virtual int GetIndex(int index, ISqlExpression column);
    public virtual int ConvertToParentIndex(int index, IBuildContext context);
    [NullableContextAttribute("2")]
public virtual void SetAlias(string alias);
    public virtual ISqlExpression GetSubQuery(IBuildContext context);
    public virtual SqlStatement GetResultStatement();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private SqlInfo <ConvertToSql>b__14_0(SqlInfo idx);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private SqlInfo <ConvertToIndex>b__15_0(SqlInfo idx);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Linq.Builder.TableAttributeBuilder : MethodCallBuilder {
    private static String[] MethodNames;
    private static TableAttributeBuilder();
    protected virtual bool CanBuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual IBuildContext BuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Linq.Builder.TableBuilder : object {
    [CompilerGeneratedAttribute]
private int <LinqToDB.Linq.Builder.ISequenceBuilder.BuildCounter>k__BackingField;
    private int LinqToDB.Linq.Builder.ISequenceBuilder.BuildCounter { get; private set; }
    [CompilerGeneratedAttribute]
private sealed virtual override int LinqToDB.Linq.Builder.ISequenceBuilder.get_BuildCounter();
    [CompilerGeneratedAttribute]
private sealed virtual override void LinqToDB.Linq.Builder.ISequenceBuilder.set_BuildCounter(int value);
    private static BuildContextType FindBuildContext(ExpressionBuilder builder, BuildInfo buildInfo, IBuildContext& parentContext);
    public sealed virtual bool CanBuild(ExpressionBuilder builder, BuildInfo buildInfo);
    private static IBuildContext ApplyQueryFilters(ExpressionBuilder builder, BuildInfo buildInfo, MemberInfo memberInfo, TableContext tableContext);
    public sealed virtual IBuildContext BuildSequence(ExpressionBuilder builder, BuildInfo buildInfo);
    public sealed virtual SequenceConvertInfo Convert(ExpressionBuilder builder, BuildInfo buildInfo, ParameterExpression param);
    public sealed virtual bool IsSequence(ExpressionBuilder builder, BuildInfo buildInfo);
    private static IBuildContext BuildCteContext(ExpressionBuilder builder, BuildInfo buildInfo);
    private static CteTableContext BuildCteContextTable(ExpressionBuilder builder, BuildInfo buildInfo);
    private static IBuildContext BuildRawSqlTable(ExpressionBuilder builder, BuildInfo buildInfo, bool isScalar);
    public static void PrepareRawSqlArguments(Expression formatArg, Expression parametersArg, String& format, IReadOnlyList`1& arguments);
    [CompilerGeneratedAttribute]
internal static TableContext <BuildSequence>g__AddTableInScope|8_0(TableContext context, <>c__DisplayClass8_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Linq.Builder.TableLikeQueryContext : SubQueryContext {
    [CompilerGeneratedAttribute]
private SqlTableLikeSource <Source>k__BackingField;
    public SqlTableLikeSource Source { get; }
    public TableLikeQueryContext(IBuildContext sourceContext);
    [CompilerGeneratedAttribute]
public SqlTableLikeSource get_Source();
    public void MatchBuilt();
    public virtual SqlInfo[] ConvertToSql(Expression expression, int level, ConvertFlags flags);
    private SqlField RegisterSourceField(ISqlExpression baseExpression, ISqlExpression expression, int index, string name);
    public virtual int ConvertToParentIndex(int index, IBuildContext context);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private SqlInfo <ConvertToSql>b__5_0(SqlInfo info);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Linq.Builder.TagQueryBuilder : MethodCallBuilder {
    private static Char[] NewLine;
    private static TagQueryBuilder();
    protected virtual bool CanBuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual IBuildContext BuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Linq.Builder.TakeSkipBuilder : MethodCallBuilder {
    private static String[] MethodNames;
    private static TakeSkipBuilder();
    protected virtual bool CanBuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual IBuildContext BuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual SequenceConvertInfo Convert(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo, ParameterExpression param);
    private static void BuildTake(ExpressionBuilder builder, IBuildContext sequence, ISqlExpression expr, Nullable`1<TakeHints> hints);
    private static void BuildSkip(ExpressionBuilder builder, IBuildContext sequence, ISqlExpression expr);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Linq.Builder.TruncateBuilder : MethodCallBuilder {
    protected virtual bool CanBuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual IBuildContext BuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Linq.Builder.UpdateBuilder : MethodCallBuilder {
    private static String[] _methods;
    private static UpdateBuilder();
    protected virtual bool CanBuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual IBuildContext BuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    private static OutputMethod GetOutputMethod(MethodCallExpression methodCall);
    private static void CheckAssociation(IBuildContext sequence);
    internal static void BuildSetter(ExpressionBuilder builder, BuildInfo buildInfo, LambdaExpression setter, IBuildContext into, List`1<SqlSetExpression> items, IBuildContext sequence);
    internal static void BuildSetterWithContext(ExpressionBuilder builder, BuildInfo buildInfo, LambdaExpression setter, IBuildContext into, List`1<SqlSetExpression> items, IBuildContext[] sequences);
    internal static void ParseSet(ExpressionBuilder builder, BuildInfo buildInfo, LambdaExpression extract, LambdaExpression update, IBuildContext fieldsContext, IBuildContext valuesContext, SqlTable table, List`1<SqlSetExpression> items);
    internal static void ParseSet(ExpressionBuilder builder, LambdaExpression extract, MethodCallExpression updateMethod, int valueIndex, IBuildContext select, List`1<SqlSetExpression> items);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal static LambdaExpression <BuildMethodCall>g__RewriteOutputExpression|2_0(LambdaExpression expr);
    [CompilerGeneratedAttribute]
internal static LambdaExpression <BuildMethodCall>g__BuildDefaultOutputExpression|2_1(Type outputType);
    [CompilerGeneratedAttribute]
internal static LambdaExpression <BuildMethodCall>g__BuildDefaultOutputExpression|2_2(Type outputType);
    [CompilerGeneratedAttribute]
internal static void <BuildSetterWithContext>g__BuildSetter|8_0(MemberExpression memberExpression, Expression expression, <>c__DisplayClass8_0& );
    [CompilerGeneratedAttribute]
internal static void <BuildSetterWithContext>g__BuildNew|8_1(NewExpression expression, Expression path, <>c__DisplayClass8_0& );
    [CompilerGeneratedAttribute]
internal static void <BuildSetterWithContext>g__BuildMemberInit|8_2(MemberInitExpression expression, Expression path, <>c__DisplayClass8_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Linq.Builder.WhereBuilder : MethodCallBuilder {
    private static String[] MethodNames;
    private static WhereBuilder();
    protected virtual bool CanBuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual IBuildContext BuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual SequenceConvertInfo Convert(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo, ParameterExpression param);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Linq.Builder.WithTableExpressionBuilder : MethodCallBuilder {
    private static String[] MethodNames;
    private static WithTableExpressionBuilder();
    protected virtual bool CanBuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual IBuildContext BuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
}
[ExtensionAttribute]
internal static class LinqToDB.Linq.BuilderExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
internal static SqlInfo[] Clone(SqlInfo[] sqlInfos, MemberInfo member);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Linq.CompiledTable`1 : object {
    private LambdaExpression _lambda;
    private Expression _expression;
    public CompiledTable`1(LambdaExpression lambda, Expression expression);
    private Query`1<T> GetInfo(IDataContext dataContext);
    public IQueryable`1<T> Create(Object[] parameters, Object[] preambles);
    public T Execute(Object[] parameters, Object[] preambles);
    [AsyncStateMachineAttribute("LinqToDB.Linq.CompiledTable`1/<ExecuteAsync>d__6")]
public Task`1<T> ExecuteAsync(Object[] parameters, Object[] preambles);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class LinqToDB.Linq.CteTable`1 : ExpressionQuery`1<T> {
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    public string TableName { get; public set; }
    [NullableContextAttribute("1")]
public CteTable`1(IDataContext dataContext);
    [NullableContextAttribute("1")]
public CteTable`1(IDataContext dataContext, Expression expression);
    [CompilerGeneratedAttribute]
public string get_TableName();
    [CompilerGeneratedAttribute]
public void set_TableName(string value);
    [NullableContextAttribute("1")]
public string GetTableName();
    [NullableContextAttribute("1")]
public virtual string ToString();
}
internal static class LinqToDB.Linq.Exceptions : object {
    [NullableContextAttribute("1")]
internal static object DefaultInheritanceMappingException(object value, Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class LinqToDB.Linq.ExpressionQuery`1 : object {
    [CompilerGeneratedAttribute]
private Expression <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataContext <DataContext>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Query`1<T> Info;
    [NullableAttribute("2")]
internal Object[] Parameters;
    [NullableAttribute("2")]
internal Object[] Preambles;
    public Expression Expression { get; public set; }
    public IDataContext DataContext { get; public set; }
    public string SqlText { get; }
    private Type System.Linq.IQueryable.ElementType { get; }
    private Expression System.Linq.IQueryable.Expression { get; }
    private IQueryProvider System.Linq.IQueryable.Provider { get; }
    protected void Init(IDataContext dataContext, Expression expression);
    [CompilerGeneratedAttribute]
public sealed virtual Expression get_Expression();
    [CompilerGeneratedAttribute]
public void set_Expression(Expression value);
    [CompilerGeneratedAttribute]
public sealed virtual IDataContext get_DataContext();
    [CompilerGeneratedAttribute]
public void set_DataContext(IDataContext value);
    public sealed virtual string get_SqlText();
    private Query`1<T> GetQuery(Expression& expression, bool cache, Boolean& dependsOnParameters);
    [AsyncStateMachineAttribute("LinqToDB.Linq.ExpressionQuery`1/<LinqToDB-Async-IQueryProviderAsync-ExecuteAsync>d__15`1")]
private sealed virtual override Task`1<TResult> LinqToDB.Async.IQueryProviderAsync.ExecuteAsync(Expression expression, CancellationToken cancellationToken);
    private IDisposable StartLoadTransaction(Query query);
    [AsyncStateMachineAttribute("LinqToDB.Linq.ExpressionQuery`1/<StartLoadTransactionAsync>d__17")]
private Task`1<IAsyncDisposable> StartLoadTransactionAsync(Query query, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("LinqToDB.Linq.ExpressionQuery`1/<LinqToDB-Async-IQueryProviderAsync-ExecuteAsyncEnumerable>d__18`1")]
private sealed virtual override Task`1<IAsyncEnumerable`1<TResult>> LinqToDB.Async.IQueryProviderAsync.ExecuteAsyncEnumerable(Expression expression, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("LinqToDB.Linq.ExpressionQuery`1/<GetForEachAsync>d__19")]
public Task GetForEachAsync(Action`1<T> action, CancellationToken cancellationToken);
    public Task GetForEachUntilAsync(Func`2<T, bool> func, CancellationToken cancellationToken);
    public IAsyncEnumerable`1<T> GetAsyncEnumerable();
    public sealed virtual IAsyncEnumerator`1<T> GetAsyncEnumerator(CancellationToken cancellationToken);
    private sealed virtual override Type System.Linq.IQueryable.get_ElementType();
    private sealed virtual override Expression System.Linq.IQueryable.get_Expression();
    private sealed virtual override IQueryProvider System.Linq.IQueryable.get_Provider();
    private sealed virtual override IQueryable`1<TElement> System.Linq.IQueryProvider.CreateQuery(Expression expression);
    private sealed virtual override IQueryable System.Linq.IQueryProvider.CreateQuery(Expression expression);
    private sealed virtual override TResult System.Linq.IQueryProvider.Execute(Expression expression);
    private sealed virtual override object System.Linq.IQueryProvider.Execute(Expression expression);
    private sealed virtual override IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal static class LinqToDB.Linq.ExpressionQueryImpl : object {
    [NullableContextAttribute("1")]
public static IQueryable CreateQuery(Type entityType, IDataContext dataContext, Expression expression);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class LinqToDB.Linq.ExpressionQueryImpl`1 : ExpressionQuery`1<T> {
    public ExpressionQueryImpl`1(IDataContext dataContext, Expression expression);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PublicAPIAttribute]
public static class LinqToDB.Linq.Expressions : object {
    private static Dictionary`2<Type, List`1<Type[]>> _genericConvertProviders;
    private static bool _checkUserNamespace;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Dictionary`2<string, Dictionary`2<MemberInfoWithType, IExpressionInfo>> _members;
    private static object _memberSync;
    private static Lazy`1<Dictionary`2<string, Dictionary`2<Tuple`3<ExpressionType, Type, Type>, IExpressionInfo>>> _binaries;
    private static Dictionary`2<MemberInfoWithType, IExpressionInfo> _commonMembers;
    private static Dictionary`2<string, Dictionary`2<MemberInfoWithType, IExpressionInfo>> Members { get; }
    private static Expressions();
    private static MemberInfoWithType NormalizeMemeberInfo(MemberInfoWithType memberInfoWithType);
    public static void MapMember(MemberInfo memberInfo, LambdaExpression expression);
    public static void MapMember(Type objectType, MemberInfo memberInfo, LambdaExpression expression);
    public static void MapMember(MemberInfo memberInfo, IExpressionInfo expressionInfo);
    public static void MapMember(string providerName, MemberInfoWithType memberInfoWithType, LambdaExpression expression);
    public static void MapMember(string providerName, MemberInfo memberInfo, LambdaExpression expression);
    public static void MapMember(string providerName, MemberInfo memberInfo, IExpressionInfo expressionInfo);
    public static void MapMember(Expression`1<Func`1<object>> memberInfo, LambdaExpression expression);
    public static void MapMember(string providerName, Expression`1<Func`1<object>> memberInfo, LambdaExpression expression);
    public static void MapMember(Expression`1<Func`2<T, object>> memberInfo, LambdaExpression expression);
    public static void MapMember(string providerName, Expression`1<Func`2<T, object>> memberInfo, LambdaExpression expression);
    public static void MapMember(string providerName, Expression`1<Func`1<TR>> memberInfo, Expression`1<Func`1<TR>> expression);
    public static void MapMember(Expression`1<Func`1<TR>> memberInfo, Expression`1<Func`1<TR>> expression);
    public static void MapMember(string providerName, Expression`1<Func`2<T1, TR>> memberInfo, Expression`1<Func`2<T1, TR>> expression);
    public static void MapMember(Expression`1<Func`2<T1, TR>> memberInfo, Expression`1<Func`2<T1, TR>> expression);
    public static void MapMember(string providerName, Expression`1<Func`3<T1, T2, TR>> memberInfo, Expression`1<Func`3<T1, T2, TR>> expression);
    [NullableContextAttribute("2")]
public static void MapMember(Expression`1<Func`3<T1, T2, TR>> memberInfo, Expression`1<Func`3<T1, T2, TR>> expression);
    [NullableContextAttribute("2")]
public static void MapMember(string providerName, Expression`1<Func`4<T1, T2, T3, TR>> memberInfo, Expression`1<Func`4<T1, T2, T3, TR>> expression);
    [NullableContextAttribute("2")]
public static void MapMember(Expression`1<Func`4<T1, T2, T3, TR>> memberInfo, Expression`1<Func`4<T1, T2, T3, TR>> expression);
    [NullableContextAttribute("2")]
public static void MapMember(string providerName, Expression`1<Func`5<T1, T2, T3, T4, TR>> memberInfo, Expression`1<Func`5<T1, T2, T3, T4, TR>> expression);
    [NullableContextAttribute("2")]
public static void MapMember(Expression`1<Func`5<T1, T2, T3, T4, TR>> memberInfo, Expression`1<Func`5<T1, T2, T3, T4, TR>> expression);
    [NullableContextAttribute("2")]
public static void MapMember(string providerName, Expression`1<Func`6<T1, T2, T3, T4, T5, TR>> memberInfo, Expression`1<Func`6<T1, T2, T3, T4, T5, TR>> expression);
    [NullableContextAttribute("2")]
public static void MapMember(Expression`1<Func`6<T1, T2, T3, T4, T5, TR>> memberInfo, Expression`1<Func`6<T1, T2, T3, T4, T5, TR>> expression);
    private static BinaryExpression GetBinaryNode(Expression expr);
    public static void MapBinary(string providerName, ExpressionType nodeType, Type leftType, Type rightType, LambdaExpression expression);
    public static void MapBinary(ExpressionType nodeType, Type leftType, Type rightType, LambdaExpression expression);
    public static void MapBinary(string providerName, Expression`1<Func`3<TLeft, TRight, TR>> binaryExpression, Expression`1<Func`3<TLeft, TRight, TR>> expression);
    [NullableContextAttribute("2")]
public static void MapBinary(Expression`1<Func`3<TLeft, TRight, TR>> binaryExpression, Expression`1<Func`3<TLeft, TRight, TR>> expression);
    private static bool InitGenericConvertProvider(Type[] types, MappingSchema mappingSchema);
    public static void SetGenericInfoProvider(Type type);
    public static LambdaExpression ConvertMember(MappingSchema mappingSchema, Type objectType, MemberInfo mi);
    private static LambdaExpression ConvertMemberInternal(MappingSchema mappingSchema, Type objectType, MemberInfo mi);
    public static LambdaExpression ConvertBinary(MappingSchema mappingSchema, BinaryExpression binaryExpression);
    [NullableContextAttribute("2")]
private static bool IsUserNamespace(string typeNamespace);
    [NullableContextAttribute("2")]
public static MemberInfoWithType M(Expression`1<Func`2<T, object>> func);
    public static MemberInfoWithType M(Expression`1<Func`1<T>> func);
    public static LambdaExpression L(Expression`1<Func`1<TR>> func);
    public static LambdaExpression L(Expression`1<Func`2<T1, TR>> func);
    [NullableContextAttribute("2")]
public static LambdaExpression L(Expression`1<Func`3<T1, T2, TR>> func);
    [NullableContextAttribute("2")]
public static LambdaExpression L(Expression`1<Func`4<T1, T2, T3, TR>> func);
    [NullableContextAttribute("2")]
public static LambdaExpression L(Expression`1<Func`5<T1, T2, T3, T4, TR>> func);
    [NullableContextAttribute("2")]
public static LambdaExpression L(Expression`1<Func`6<T1, T2, T3, T4, T5, TR>> func);
    [NullableContextAttribute("2")]
public static LambdaExpression L(Expression`1<Func`7<T1, T2, T3, T4, T5, T6, TR>> func);
    public static LazyExpressionInfo N(Func`1<LambdaExpression> func);
    private static Dictionary`2<string, Dictionary`2<MemberInfoWithType, IExpressionInfo>> get_Members();
    private static Dictionary`2<string, Dictionary`2<MemberInfoWithType, IExpressionInfo>> LoadMembers();
    public static void MapMember(string providerName, Type objectType, MemberInfo memberInfo, LambdaExpression expression);
    public static void MapMember(string providerName, Type objectType, MemberInfo memberInfo, IExpressionInfo expressionInfo);
    public static void MapMember(string providerName, Type objectType, Expression`1<Func`1<TR>> memberInfo, Expression`1<Func`1<TR>> expression);
    public static void MapMember(Type objectType, Expression`1<Func`1<TR>> memberInfo, Expression`1<Func`1<TR>> expression);
    public static void MapMember(string providerName, Type objectType, Expression`1<Func`2<T1, TR>> memberInfo, Expression`1<Func`2<T1, TR>> expression);
    public static void MapMember(Type objectType, Expression`1<Func`2<T1, TR>> memberInfo, Expression`1<Func`2<T1, TR>> expression);
    public static void MapMember(string providerName, Type objectType, Expression`1<Func`3<T1, T2, TR>> memberInfo, Expression`1<Func`3<T1, T2, TR>> expression);
    public static void MapMember(Type objectType, Expression`1<Func`3<T1, T2, TR>> memberInfo, Expression`1<Func`3<T1, T2, TR>> expression);
    public static void MapMember(string providerName, Type objectType, Expression`1<Func`4<T1, T2, T3, TR>> memberInfo, Expression`1<Func`4<T1, T2, T3, TR>> expression);
    [NullableContextAttribute("2")]
public static void MapMember(Type objectType, Expression`1<Func`4<T1, T2, T3, TR>> memberInfo, Expression`1<Func`4<T1, T2, T3, TR>> expression);
    [NullableContextAttribute("2")]
public static void MapMember(string providerName, Type objectType, Expression`1<Func`5<T1, T2, T3, T4, TR>> memberInfo, Expression`1<Func`5<T1, T2, T3, T4, TR>> expression);
    [NullableContextAttribute("2")]
public static void MapMember(Type objectType, Expression`1<Func`5<T1, T2, T3, T4, TR>> memberInfo, Expression`1<Func`5<T1, T2, T3, T4, TR>> expression);
    [NullableContextAttribute("2")]
public static void MapMember(string providerName, Type objectType, Expression`1<Func`6<T1, T2, T3, T4, T5, TR>> memberInfo, Expression`1<Func`6<T1, T2, T3, T4, T5, TR>> expression);
    [NullableContextAttribute("2")]
public static void MapMember(Type objectType, Expression`1<Func`6<T1, T2, T3, T4, T5, TR>> memberInfo, Expression`1<Func`6<T1, T2, T3, T4, T5, TR>> expression);
    private static MemberInfoWithType MT(Expression`1<Func`1<object>> func);
    [NullableContextAttribute("2")]
[CLSCompliantAttribute("False")]
[ExpressionAttribute("Firebird", "TRIM(TRAILING FROM {0})")]
[ExtensionAttribute("ClickHouse", "trim(TRAILING {1} FROM {0})")]
[ExtensionAttribute("SqlServer.2022", "RTRIM({0}, {1})")]
[ExtensionAttribute("DB2", "RTRIM({0}, {1})")]
[ExtensionAttribute("Informix", "RTRIM({0}, {1})")]
[ExtensionAttribute("Oracle", "RTRIM({0}, {1})")]
[ExtensionAttribute("PostgreSQL", "RTRIM({0}, {1})")]
[ExtensionAttribute("SapHana", "RTRIM({0}, {1})")]
[ExtensionAttribute("SQLite", "RTRIM({0}, {1})")]
[FunctionAttribute("RTrim", "Mono.Cecil.CustomAttributeArgument[]")]
public static string TrimRight(string str, Char[] trimChars);
    [NullableContextAttribute("2")]
[CLSCompliantAttribute("False")]
[ExpressionAttribute("Firebird", "TRIM(LEADING FROM {0})")]
[ExtensionAttribute("ClickHouse", "trim(LEADING {1} FROM {0})")]
[ExtensionAttribute("SqlServer.2022", "LTRIM({0}, {1})")]
[ExtensionAttribute("DB2", "LTRIM({0}, {1})")]
[ExtensionAttribute("Informix", "LTRIM({0}, {1})")]
[ExtensionAttribute("Oracle", "LTRIM({0}, {1})")]
[ExtensionAttribute("PostgreSQL", "LTRIM({0}, {1})")]
[ExtensionAttribute("SapHana", "LTRIM({0}, {1})")]
[ExtensionAttribute("SQLite", "LTRIM({0}, {1})")]
[FunctionAttribute("LTrim", "Mono.Cecil.CustomAttributeArgument[]")]
public static string TrimLeft(string str, Char[] trimChars);
    [NullableContextAttribute("2")]
[FunctionAttribute]
public static Nullable`1<int> ConvertToCaseCompareTo(string str, string value);
    [NullableContextAttribute("2")]
[FunctionAttribute]
public static string AltStuff(string str, Nullable`1<int> startLocation, Nullable`1<int> length, string value);
    [NullableContextAttribute("2")]
[FunctionAttribute]
public static string VarChar(object obj, Nullable`1<int> size);
    [NullableContextAttribute("2")]
[FunctionAttribute]
public static string Hex(Nullable`1<Guid> guid);
    [NullableContextAttribute("2")]
[CLSCompliantAttribute("False")]
[FunctionAttribute]
[FunctionAttribute("DB2", "Repeat")]
[FunctionAttribute("PostgreSQL", "Repeat")]
[FunctionAttribute("Access", "string", "Mono.Cecil.CustomAttributeArgument[]")]
public static string Replicate(string str, Nullable`1<int> count);
    [NullableContextAttribute("2")]
[CLSCompliantAttribute("False")]
[FunctionAttribute]
[FunctionAttribute("DB2", "Repeat")]
[FunctionAttribute("PostgreSQL", "Repeat")]
[FunctionAttribute("Access", "string", "Mono.Cecil.CustomAttributeArgument[]")]
public static string Replicate(Nullable`1<char> ch, Nullable`1<int> count);
    [ExtensionAttribute("DateAdd")]
public static Nullable`1<DateTime> DateAdd(DateParts part, Nullable`1<int> number, Nullable`1<int> days);
    [FunctionAttribute]
public static Nullable`1<decimal> Round(Nullable`1<decimal> value, int precision, int mode);
    [FunctionAttribute]
public static Nullable`1<double> Round(Nullable`1<double> value, int precision, int mode);
    [FunctionAttribute("Access", "DateSerial")]
public static Nullable`1<DateTime> MakeDateTime2(Nullable`1<int> year, Nullable`1<int> month, Nullable`1<int> day);
    [CLSCompliantAttribute("False")]
[FunctionAttribute("Int", "Mono.Cecil.CustomAttributeArgument[]")]
public static T AccessInt(T value);
    [CLSCompliantAttribute("False")]
[FunctionAttribute("Round", "Mono.Cecil.CustomAttributeArgument[]")]
public static T AccessRound(T value, Nullable`1<int> precision);
    [FunctionAttribute("PI")]
public static decimal DecimalPI();
    [FunctionAttribute("PI")]
public static double DoublePI();
    [FunctionAttribute]
public static Nullable`1<DateTime> Mdy(Nullable`1<int> month, Nullable`1<int> day, Nullable`1<int> year);
    [FunctionAttribute("toDate32")]
private static Nullable`1<DateTime> ClickHouseGetDate(Nullable`1<DateTimeOffset> dto);
    [FunctionAttribute("toDate32")]
private static Nullable`1<DateTime> ClickHouseGetDate(Nullable`1<DateTime> dt);
    [ExpressionAttribute("toInt64((toUnixTimestamp64Nano(toDateTime64({0}, 7)) - toUnixTimestamp64Nano(toDateTime64(toDate32({0}), 7))) / 100)")]
private static Nullable`1<TimeSpan> ClickHouseGetTime(Nullable`1<DateTimeOffset> dto);
    [ExpressionAttribute("toInt64((toUnixTimestamp64Nano(toDateTime64({0}, 7)) - toUnixTimestamp64Nano(toDateTime64(toDate32({0}), 7))) / 100)")]
private static Nullable`1<TimeSpan> ClickHouseGetTime(Nullable`1<DateTime> dt);
    [FunctionAttribute("roundBankers")]
private static Nullable`1<decimal> ClickHouseRoundToEven(Nullable`1<decimal> value);
    [FunctionAttribute("roundBankers")]
private static Nullable`1<double> ClickHouseRoundToEven(Nullable`1<double> value);
    [FunctionAttribute("roundBankers")]
private static Nullable`1<decimal> ClickHouseRoundToEven(Nullable`1<decimal> value, Nullable`1<int> precision);
    [FunctionAttribute("roundBankers")]
private static Nullable`1<double> ClickHouseRoundToEven(Nullable`1<double> value, Nullable`1<int> precision);
}
[NullableContextAttribute("1")]
public interface LinqToDB.Linq.IDataReaderAsync {
    public DbDataReader DataReader { get; }
    public abstract virtual DbDataReader get_DataReader();
    public abstract virtual Task`1<bool> ReadAsync(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface LinqToDB.Linq.IExpressionInfo {
    public abstract virtual LambdaExpression GetExpression(MappingSchema mappingSchema);
}
[NullableContextAttribute("1")]
public interface LinqToDB.Linq.IExpressionPreprocessor {
    public abstract virtual Expression ProcessExpression(Expression expression);
}
[NullableContextAttribute("1")]
public interface LinqToDB.Linq.IExpressionQuery {
    public Expression Expression { get; }
    public string SqlText { get; }
    public IDataContext DataContext { get; }
    public abstract virtual Expression get_Expression();
    public abstract virtual string get_SqlText();
    public abstract virtual IDataContext get_DataContext();
}
public interface LinqToDB.Linq.IExpressionQuery`1 {
    [NullableAttribute("1")]
public Expression Expression { get; }
    [NullableContextAttribute("1")]
public abstract virtual Expression get_Expression();
}
[NullableContextAttribute("2")]
public interface LinqToDB.Linq.IMergeable`2 {
}
[NullableContextAttribute("2")]
public interface LinqToDB.Linq.IMergeableOn`2 {
}
[NullableContextAttribute("2")]
public interface LinqToDB.Linq.IMergeableSource`2 {
}
[NullableContextAttribute("2")]
public interface LinqToDB.Linq.IMergeableUsing`1 {
}
[AttributeUsageAttribute("64")]
public class LinqToDB.Linq.Internal.ColumnReaderAttribute : Attribute {
    [CompilerGeneratedAttribute]
private int <IndexParameterIndex>k__BackingField;
    public int IndexParameterIndex { get; }
    public ColumnReaderAttribute(int indexParameterIndex);
    [CompilerGeneratedAttribute]
public int get_IndexParameterIndex();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class LinqToDB.Linq.Internals : object {
    [NullableContextAttribute("1")]
public static IQueryable`1<T> CreateExpressionQueryInstance(IDataContext dataContext, Expression expression);
    public static IDataContext GetDataContext(IQueryable`1<T> queryable);
    public static IDataContext GetDataContext(IUpdatable`1<T> updatable);
    public static IDataContext GetDataContext(IValueInsertable`1<T> insertable);
    public static IDataContext GetDataContext(ISelectInsertable`2<TSource, TTarget> insertable);
}
[NullableContextAttribute("2")]
public interface LinqToDB.Linq.IQueryContext {
    [NullableAttribute("1")]
public SqlStatement Statement { get; }
    public object Context { get; public set; }
    public AliasesContext Aliases { get; public set; }
    public DataOptions DataOptions { get; }
    [NullableContextAttribute("1")]
public abstract virtual SqlStatement get_Statement();
    public abstract virtual object get_Context();
    public abstract virtual void set_Context(object value);
    public abstract virtual AliasesContext get_Aliases();
    public abstract virtual void set_Aliases(AliasesContext value);
    public abstract virtual DataOptions get_DataOptions();
}
[NullableContextAttribute("1")]
public interface LinqToDB.Linq.IQueryRunner {
    public Expression Expression { get; }
    public IDataContext DataContext { get; }
    [NullableAttribute("2")]
public Object[] Parameters { get; }
    [NullableAttribute("2")]
public Object[] Preambles { get; }
    [NullableAttribute("2")]
public Expression MapperExpression { get; public set; }
    public int RowsCount { get; public set; }
    public int QueryNumber { get; public set; }
    public abstract virtual int ExecuteNonQuery();
    [NullableContextAttribute("2")]
public abstract virtual object ExecuteScalar();
    public abstract virtual DataReaderWrapper ExecuteReader();
    public abstract virtual Task`1<int> ExecuteNonQueryAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<object> ExecuteScalarAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<IDataReaderAsync> ExecuteReaderAsync(CancellationToken cancellationToken);
    public abstract virtual string GetSqlText();
    public abstract virtual Expression get_Expression();
    public abstract virtual IDataContext get_DataContext();
    [NullableContextAttribute("2")]
public abstract virtual Object[] get_Parameters();
    [NullableContextAttribute("2")]
public abstract virtual Object[] get_Preambles();
    [NullableContextAttribute("2")]
public abstract virtual Expression get_MapperExpression();
    [NullableContextAttribute("2")]
public abstract virtual void set_MapperExpression(Expression value);
    public abstract virtual int get_RowsCount();
    public abstract virtual void set_RowsCount(int value);
    public abstract virtual int get_QueryNumber();
    public abstract virtual void set_QueryNumber(int value);
}
[NullableContextAttribute("2")]
public interface LinqToDB.Linq.ISelectInsertable`2 {
}
internal interface LinqToDB.Linq.ITable {
}
[NullableContextAttribute("2")]
public interface LinqToDB.Linq.IUpdatable`1 {
}
[NullableContextAttribute("2")]
public interface LinqToDB.Linq.IValueInsertable`1 {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.Linq.LinqException : Exception {
    [StringFormatMethodAttribute("message")]
public LinqException(string message, Object[] args);
    public LinqException(string message, Exception innerException);
    public LinqException(Exception innerException);
    protected LinqException(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Linq.MemberInfoComparer : object {
    public static MemberInfoComparer Instance;
    private static MemberInfoComparer();
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(MemberInfo x, MemberInfo y);
    public sealed virtual int GetHashCode(MemberInfo obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class LinqToDB.Linq.MethodHelper : object {
    [ExtensionAttribute]
public static MethodInfo GetMethodInfo(Delegate del);
    public static MethodInfo GetMethodInfo(Func`2<T1, T2> f, T1 unused1);
    public static MethodInfo GetMethodInfo(Func`3<T1, T2, T3> f, T1 unused1, T2 unused2);
    public static MethodInfo GetMethodInfo(Func`4<T1, T2, T3, T4> f, T1 unused1, T2 unused2, T3 unused3);
    public static MethodInfo GetMethodInfo(Func`5<T1, T2, T3, T4, T5> f, T1 unused1, T2 unused2, T3 unused3, T4 unused4);
    public static MethodInfo GetMethodInfo(Func`6<T1, T2, T3, T4, T5, T6> f, T1 unused1, T2 unused2, T3 unused3, T4 unused4, T5 unused5);
    public static MethodInfo GetMethodInfo(Func`7<T1, T2, T3, T4, T5, T6, T7> f, T1 unused1, T2 unused2, T3 unused3, T4 unused4, T5 unused5, T6 unused6);
}
public class LinqToDB.Linq.NoLinqCache : object {
    [NullableAttribute("1")]
private static AsyncLocal`1<bool> _value;
    internal static bool IsNoCache { get; }
    private static NoLinqCache();
    [NullableContextAttribute("1")]
public static IDisposable Scope();
    private sealed virtual override void System.IDisposable.Dispose();
    internal static bool get_IsNoCache();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Linq.ParameterAccessor : object {
    public Expression Expression;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`4<Expression, IDataContext, Object[], object> ValueAccessor;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`4<Expression, IDataContext, Object[], object> OriginalAccessor;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`4<Expression, IDataContext, Object[], DbDataType> DbDataTypeAccessor;
    public SqlParameter SqlParameter;
    public ParameterAccessor(Expression expression, Func`4<Expression, IDataContext, Object[], object> valueAccessor, Func`4<Expression, IDataContext, Object[], object> originalAccessor, Func`4<Expression, IDataContext, Object[], DbDataType> dbDataTypeAccessor, SqlParameter sqlParameter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Linq.PersistentTable`1 : object {
    private IQueryable`1<T> _query;
    [CompilerGeneratedAttribute]
private string <SqlText>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <DatabaseName>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <SchemaName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <ServerName>k__BackingField;
    [CompilerGeneratedAttribute]
private TableOptions <TableOptions>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <TableID>k__BackingField;
    public Expression Expression { get; }
    public string SqlText { get; }
    public IDataContext DataContext { get; }
    public Type ElementType { get; }
    public IQueryProvider Provider { get; }
    private Expression LinqToDB.Linq.IExpressionQuery.Expression { get; }
    [NullableAttribute("2")]
public string DatabaseName { get; }
    [NullableAttribute("2")]
public string SchemaName { get; }
    public string TableName { get; }
    [NullableAttribute("2")]
public string ServerName { get; }
    public TableOptions TableOptions { get; }
    [NullableAttribute("2")]
public string TableID { get; }
    public PersistentTable`1(IQueryable`1<T> query);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual Expression get_Expression();
    [CompilerGeneratedAttribute]
public sealed virtual string get_SqlText();
    public sealed virtual IDataContext get_DataContext();
    public sealed virtual Type get_ElementType();
    public sealed virtual IQueryProvider get_Provider();
    public sealed virtual IQueryable CreateQuery(Expression expression);
    public sealed virtual IQueryable`1<TElement> CreateQuery(Expression expression);
    public sealed virtual object Execute(Expression expression);
    public sealed virtual TResult Execute(Expression expression);
    public sealed virtual Task`1<IAsyncEnumerable`1<TResult>> ExecuteAsyncEnumerable(Expression expression, CancellationToken cancellationToken);
    public sealed virtual Task`1<TResult> ExecuteAsync(Expression expression, CancellationToken cancellationToken);
    private sealed virtual override Expression LinqToDB.Linq.IExpressionQuery.get_Expression();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual string get_DatabaseName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual string get_SchemaName();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TableName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual string get_ServerName();
    [CompilerGeneratedAttribute]
public sealed virtual TableOptions get_TableOptions();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual string get_TableID();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class LinqToDB.Linq.Query : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Func`5<IDataContext, Expression, Object[], Object[], object> GetElement;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Func`6<IDataContext, Expression, Object[], Object[], CancellationToken, Task`1<object>> GetElementAsync;
    internal List`1<QueryInfo> Queries;
    internal int ConfigurationID;
    internal Type ContextType;
    [NullableAttribute("2")]
internal Expression Expression;
    internal MappingSchema MappingSchema;
    internal bool InlineParameters;
    internal ISqlOptimizer SqlOptimizer;
    internal SqlProviderFlags SqlProviderFlags;
    internal DataOptions DataOptions;
    internal bool IsEntityServiceProvided;
    private Dictionary`2<Expression, QueryableAccessor> _queryableAccessorDic;
    private List`1<QueryableAccessor> _queryableAccessorList;
    private Dictionary`2<Expression, Expression> _queryDependedObjects;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<MemberInfo, QueryableMemberAccessor> _queryableMemberAccessorDic;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ConcurrentDictionary`2<Type, Func`2<object, object>> _enumConverters;
    internal static ConcurrentQueue`1<Action> CacheCleaners;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Tuple`3[] _preambles;
    internal bool IsFastCacheable { get; }
    internal Query(IDataContext dataContext, Expression expression);
    private static Query();
    public IReadOnlyCollection`1<QueryInfo> GetQueries();
    internal abstract virtual void Init(IBuildContext parseContext, List`1<ParameterAccessor> sqlParameters);
    protected bool Compare(IDataContext dataContext, Expression expr);
    internal bool get_IsFastCacheable();
    internal int AddQueryableAccessors(Expression expr, Expression`1<Func`2<Expression, IQueryable>> qe);
    internal Expression AddQueryableMemberAccessors(TContext context, MemberInfo memberInfo, IDataContext dataContext, Func`4<TContext, MemberInfo, IDataContext, Expression> qe);
    internal void AddQueryDependedObject(Expression expression, SqlQueryDependentAttribute attr);
    internal Expression GetIQueryable(int n, Expression expr, bool force);
    internal void ClearMemberQueryableInfo();
    internal object GetConvertedEnum(Type valueType, object value);
    public static void ClearCaches();
    internal void SetPreambles(IEnumerable`1<Tuple`3<object, Func`5<object, IDataContext, Expression, Object[], object>, Func`6<object, IDataContext, Expression, Object[], CancellationToken, Task`1<object>>>> preambles);
    internal bool IsAnyPreambles();
    internal int PreamblesCount();
    internal Object[] InitPreambles(IDataContext dc, Expression rootExpression, Object[] ps);
    [AsyncStateMachineAttribute("LinqToDB.Linq.Query/<InitPreamblesAsync>d__36")]
internal Task`1<Object[]> InitPreamblesAsync(IDataContext dc, Expression rootExpression, Object[] ps, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.Linq.Query`1 : Query {
    internal bool DoNotCache;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Func`5<IDataContext, Expression, Object[], Object[], IEnumerable`1<T>> GetIEnumerable;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Func`5<IDataContext, Expression, Object[], Object[], IAsyncEnumerable`1<T>> GetIAsyncEnumerable;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Func`7<IDataContext, Expression, Object[], Object[], Func`2<T, bool>, CancellationToken, Task> GetForEachAsync;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static QueryCache<T> _queryCache;
    public static long CacheMissCount { get; }
    internal Query`1(IDataContext dataContext, Expression expression);
    private static Query`1();
    internal virtual void Init(IBuildContext parseContext, List`1<ParameterAccessor> sqlParameters);
    public static void ClearCache();
    public static long get_CacheMissCount();
    public static Query`1<T> GetQuery(IDataContext dataContext, Expression& expr, Boolean& dependsOnParameters);
    internal static Query`1<T> CreateQuery(ExpressionTreeOptimizationContext optimizationContext, ParametersContext parametersContext, IDataContext dataContext, Expression expr);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Linq.QueryableAccessor : object {
    public bool SkipForce;
    public IQueryable Queryable;
    public Func`2<Expression, IQueryable> Accessor;
    public QueryableAccessor(Func`2<Expression, IQueryable> accessor, Expression expr);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class LinqToDB.Linq.QueryableMemberAccessor : object {
    [CompilerGeneratedAttribute]
private Expression <Expression>k__BackingField;
    public Expression Expression { get; protected set; }
    [CompilerGeneratedAttribute]
public Expression get_Expression();
    [CompilerGeneratedAttribute]
protected void set_Expression(Expression value);
    public abstract virtual Expression Execute(MemberInfo mi, IDataContext ctx);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Linq.QueryableMemberAccessor`1 : QueryableMemberAccessor {
    private TContext _context;
    private Func`4<TContext, MemberInfo, IDataContext, Expression> _accessor;
    public QueryableMemberAccessor`1(TContext context, Expression expression, Func`4<TContext, MemberInfo, IDataContext, Expression> accessor);
    public virtual Expression Execute(MemberInfo mi, IDataContext ctx);
}
[FlagsAttribute]
internal enum LinqToDB.Linq.QueryFlags : Enum {
    public int value__;
    public static QueryFlags None;
    public static QueryFlags InlineParameters;
}
[ExtensionAttribute]
internal static class LinqToDB.Linq.QueryFlagsHelper : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static QueryFlags GetQueryFlags(IDataContext dataContext);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class LinqToDB.Linq.QueryInfo : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private SqlStatement <Statement>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private AliasesContext <Aliases>k__BackingField;
    [CompilerGeneratedAttribute]
private DataOptions <DataOptions>k__BackingField;
    [NullableAttribute("1")]
internal List`1<ParameterAccessor> ParameterAccessors;
    [NullableAttribute("1")]
public SqlStatement Statement { get; public set; }
    public object Context { get; public set; }
    public AliasesContext Aliases { get; public set; }
    public DataOptions DataOptions { get; public set; }
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual SqlStatement get_Statement();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_Statement(SqlStatement value);
    [CompilerGeneratedAttribute]
public sealed virtual object get_Context();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Context(object value);
    [CompilerGeneratedAttribute]
public sealed virtual AliasesContext get_Aliases();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Aliases(AliasesContext value);
    [CompilerGeneratedAttribute]
public sealed virtual DataOptions get_DataOptions();
    [CompilerGeneratedAttribute]
public void set_DataOptions(DataOptions value);
    [NullableContextAttribute("1")]
internal void AddParameterAccessor(ParameterAccessor accessor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class LinqToDB.Linq.QueryRunner : object {
    private static PropertyInfo _dataContextInfo;
    private static PropertyInfo _expressionInfo;
    private static PropertyInfo _parametersInfo;
    private static PropertyInfo _preamblesInfo;
    private static PropertyInfo _rowsCountInfo;
    private static QueryRunner();
    private static void FinalizeQuery(Query query);
    private static void ClearParameters(Query query);
    private static int EvaluateTakeSkipValue(Query query, Expression expr, IDataContext db, Object[] ps, int qn, ISqlExpression sqlExpr);
    internal static void SetParameters(Query query, Expression expression, IDataContext parametersContext, Object[] parameters, int queryNumber, SqlParameterValues parameterValues);
    internal static ParameterAccessor GetParameter(Type type, IDataContext dataContext, SqlField field);
    private static Type GetType(T obj, IDataContext db);
    private static Tuple`3<Func`8<Query, IDataContext, Mapper`1<T>, Expression, Object[], Object[], int, IEnumerable`1<T>>, TakeSkipDelegate, TakeSkipDelegate> GetExecuteQuery(Query query, Func`8<Query, IDataContext, Mapper`1<T>, Expression, Object[], Object[], int, IEnumerable`1<T>> queryFunc);
    [IteratorStateMachineAttribute("LinqToDB.Linq.QueryRunner/<ExecuteQuery>d__12`1")]
private static IEnumerable`1<T> ExecuteQuery(Query query, IDataContext dataContext, Mapper`1<T> mapper, Expression expression, Object[] ps, Object[] preambles, int queryNumber);
    [AsyncStateMachineAttribute("LinqToDB.Linq.QueryRunner/<ExecuteQueryAsync>d__13`1")]
private static Task ExecuteQueryAsync(Query query, IDataContext dataContext, Mapper`1<T> mapper, Expression expression, Object[] ps, Object[] preambles, int queryNumber, Func`2<T, bool> func, TakeSkipDelegate skipAction, TakeSkipDelegate takeAction, CancellationToken cancellationToken);
    private static IAsyncEnumerable`1<T> ExecuteQueryAsync(Query query, IDataContext dataContext, Mapper`1<T> mapper, Expression expression, Object[] ps, Object[] preambles, int queryNumber, TakeSkipDelegate skipAction, TakeSkipDelegate takeAction);
    private static void SetRunQuery(Query`1<T> query, Expression`1<Func`3<IQueryRunner, DbDataReader, T>> expression);
    private static Expression`1<Func`3<IQueryRunner, DbDataReader, T>> WrapMapper(Expression`1<Func`7<IQueryRunner, IDataContext, DbDataReader, Expression, Object[], Object[], T>> expression);
    public static void SetRunQuery(Query`1<T> query, Expression`1<Func`7<IQueryRunner, IDataContext, DbDataReader, Expression, Object[], Object[], T>> expression);
    public static void SetRunQuery(Query`1<T> query, Expression`1<Func`8<IQueryRunner, IDataContext, DbDataReader, Expression, Object[], Object[], int, T>> expression);
    public static void SetRunQuery(Query`1<T> query, Expression`1<Func`7<IQueryRunner, IDataContext, DbDataReader, Expression, Object[], Object[], object>> expression);
    private static T ExecuteElement(Query query, IDataContext dataContext, Mapper`1<T> mapper, Expression expression, Object[] ps, Object[] preambles);
    [AsyncStateMachineAttribute("LinqToDB.Linq.QueryRunner/<ExecuteElementAsync>d__28`1")]
private static Task`1<T> ExecuteElementAsync(Query query, IDataContext dataContext, Mapper`1<object> mapper, Expression expression, Object[] ps, Object[] preambles, CancellationToken cancellationToken);
    public static void SetScalarQuery(Query query);
    private static object ScalarQuery(Query query, IDataContext dataContext, Expression expr, Object[] parameters, Object[] preambles);
    [AsyncStateMachineAttribute("LinqToDB.Linq.QueryRunner/<ScalarQueryAsync>d__31")]
private static Task`1<object> ScalarQueryAsync(Query query, IDataContext dataContext, Expression expression, Object[] ps, Object[] preambles, CancellationToken cancellationToken);
    public static void SetNonQueryQuery(Query query);
    private static int NonQueryQuery(Query query, IDataContext dataContext, Expression expr, Object[] parameters, Object[] preambles);
    [AsyncStateMachineAttribute("LinqToDB.Linq.QueryRunner/<NonQueryQueryAsync>d__34")]
private static Task`1<object> NonQueryQueryAsync(Query query, IDataContext dataContext, Expression expression, Object[] ps, Object[] preambles, CancellationToken cancellationToken);
    public static void SetNonQueryQuery2(Query query);
    private static int NonQueryQuery2(Query query, IDataContext dataContext, Expression expr, Object[] parameters, Object[] preambles);
    [AsyncStateMachineAttribute("LinqToDB.Linq.QueryRunner/<NonQueryQuery2Async>d__37")]
private static Task`1<object> NonQueryQuery2Async(Query query, IDataContext dataContext, Expression expr, Object[] parameters, Object[] preambles, CancellationToken cancellationToken);
    public static void SetQueryQuery2(Query query);
    private static int QueryQuery2(Query query, IDataContext dataContext, Expression expr, Object[] parameters, Object[] preambles);
    [AsyncStateMachineAttribute("LinqToDB.Linq.QueryRunner/<QueryQuery2Async>d__40")]
private static Task`1<object> QueryQuery2Async(Query query, IDataContext dataContext, Expression expr, Object[] parameters, Object[] preambles, CancellationToken cancellationToken);
    public static string GetSqlText(Query query, IDataContext dataContext, Expression expr, Object[] parameters, Object[] preambles);
    public static void MakeAlternativeInsertOrUpdate(Query query);
    [CompilerGeneratedAttribute]
internal static void <WrapMapper>g__SetLocal|23_0(ParameterExpression local, PropertyInfo prop, <>c__DisplayClass23_0`1& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class LinqToDB.Linq.QueryRunnerBase : object {
    protected Query Query;
    [CompilerGeneratedAttribute]
private IDataContext <DataContext>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <Expression>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Object[] <Parameters>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Object[] <Preambles>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RowsCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <QueryNumber>k__BackingField;
    public IDataContext DataContext { get; }
    public Expression Expression { get; }
    [NullableAttribute("2")]
public Object[] Parameters { get; }
    [NullableAttribute("2")]
public Object[] Preambles { get; }
    [NullableAttribute("2")]
public Expression MapperExpression { get; public set; }
    public int RowsCount { get; public set; }
    public int QueryNumber { get; public set; }
    protected QueryRunnerBase(Query query, int queryNumber, IDataContext dataContext, Expression expression, Object[] parameters, Object[] preambles);
    [CompilerGeneratedAttribute]
public sealed virtual IDataContext get_DataContext();
    [CompilerGeneratedAttribute]
public sealed virtual Expression get_Expression();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual Object[] get_Parameters();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual Object[] get_Preambles();
    [NullableContextAttribute("2")]
public abstract virtual Expression get_MapperExpression();
    [NullableContextAttribute("2")]
public abstract virtual void set_MapperExpression(Expression value);
    public abstract virtual int ExecuteNonQuery();
    [NullableContextAttribute("2")]
public abstract virtual object ExecuteScalar();
    public abstract virtual DataReaderWrapper ExecuteReader();
    public abstract virtual Task`1<object> ExecuteScalarAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<IDataReaderAsync> ExecuteReaderAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<int> ExecuteNonQueryAsync(CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
public sealed virtual int get_RowsCount();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RowsCount(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_QueryNumber();
    [CompilerGeneratedAttribute]
public sealed virtual void set_QueryNumber(int value);
    public virtual void Dispose();
    public virtual ValueTask DisposeAsync();
    protected virtual void SetCommand(bool forGetSqlText);
    protected abstract virtual void SetQuery(IReadOnlyParameterValues parameterValues, bool forGetSqlText);
    public abstract virtual string GetSqlText();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class LinqToDB.Linq.RecordsHelper : object {
    private static ConcurrentDictionary`2<Type, RecordType> _recordCache;
    private static ConcurrentDictionary`2<MemberInfo, int> _fsharpRecordMemberCache;
    private static RecordsHelper();
    internal static RecordType GetRecordType(Type objectType);
    public static int GetFSharpRecordMemberSequence(MemberInfo memberInfo);
    private static bool IsFSharpRecord(Type objectType);
    private static bool HasDefaultConstructor(Type objectType);
}
[FlagsAttribute]
internal enum LinqToDB.Linq.RecordType : Enum {
    public int value__;
    public static RecordType NotRecord;
    public static RecordType FSharp;
    public static RecordType RecordClass;
    public static RecordType AnonymousType;
    public static RecordType CallConstructorOnWrite;
    public static RecordType CallConstructorOnRead;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Linq.ReflectionHelper : object {
    public static MethodInfo ExprItem;
    public static MethodInfo ParamItem;
    public static MethodInfo ElemItem;
    private static ReflectionHelper();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class LinqToDB.Linq.SequentialAccessHelper : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static TransformVisitor`1<object> _reducer;
    private static SequentialAccessHelper();
    private static Expression Reducer(Expression e);
    public static Expression OptimizeMappingExpressionForSequentialAccess(Expression expression, int fieldCount, bool reduce);
    private static Nullable`1<int> TryGetColumnIndex(MethodCallExpression call);
    public static Expression OptimizeColumnReaderForSequentialAccess(Expression expression, Expression isNullParameter, Expression rawValueParameter, int columnIndex);
    public static MethodCallExpression ExtractRawValueReader(Expression expression, int columnIndex);
    [CompilerGeneratedAttribute]
internal static Expression <OptimizeMappingExpressionForSequentialAccess>g__TranformFunc|3_0(OptimizeMappingExpressionForSequentialAccessContext context, Expression e);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class LinqToDB.Linq.Table`1 : ExpressionQuery`1<T> {
    private static MethodInfo _serverNameMethodInfo;
    private static MethodInfo _databaseNameMethodInfo;
    private static MethodInfo _schemaNameMethodInfo;
    private static MethodInfo _tableNameMethodInfo;
    private static MethodInfo _tableOptionsMethodInfo;
    private static MethodInfo _tableIDMethodInfo;
    private SqlObjectName _name;
    private TableOptions _tableOptions;
    private string _tableID;
    public string ServerName { get; public set; }
    public string DatabaseName { get; public set; }
    public string SchemaName { get; public set; }
    public TableOptions TableOptions { get; public set; }
    [NullableAttribute("1")]
public string TableName { get; public set; }
    public string TableID { get; public set; }
    [NullableContextAttribute("1")]
public Table`1(IDataContext dataContext);
    [NullableContextAttribute("1")]
internal Table`1(IDataContext dataContext, EntityDescriptor tableDescriptor);
    [NullableContextAttribute("1")]
public Table`1(IDataContext dataContext, Expression expression);
    private void InitTable(IDataContext dataContext, Expression expression, EntityDescriptor tableDescriptor);
    public sealed virtual string get_ServerName();
    public void set_ServerName(string value);
    public sealed virtual string get_DatabaseName();
    public void set_DatabaseName(string value);
    public sealed virtual string get_SchemaName();
    public void set_SchemaName(string value);
    public sealed virtual TableOptions get_TableOptions();
    public void set_TableOptions(TableOptions value);
    [NullableContextAttribute("1")]
public sealed virtual string get_TableName();
    [NullableContextAttribute("1")]
public void set_TableName(string value);
    public sealed virtual string get_TableID();
    public void set_TableID(string value);
    [NullableContextAttribute("1")]
public sealed virtual ITable`1<T> ChangeServerName(string serverName);
    [NullableContextAttribute("1")]
public sealed virtual ITable`1<T> ChangeDatabaseName(string databaseName);
    [NullableContextAttribute("1")]
public sealed virtual ITable`1<T> ChangeSchemaName(string schemaName);
    [NullableContextAttribute("1")]
public sealed virtual ITable`1<T> ChangeTableName(string tableName);
    [NullableContextAttribute("1")]
public sealed virtual ITable`1<T> ChangeTableOptions(TableOptions options);
    [NullableContextAttribute("1")]
public sealed virtual ITable`1<T> ChangeTableID(string tableID);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[PublicAPIAttribute]
public static class LinqToDB.LinqExtensions : object {
    private static MethodInfo _insertOrUpdateMethodInfo;
    private static MethodInfo _insertOrUpdateMethodInfo2;
    private static MethodInfo _dropMethodInfo2;
    private static MethodInfo _truncateMethodInfo;
    private static MethodInfo _takeMethodInfo;
    private static MethodInfo _takeMethodInfo2;
    private static MethodInfo _takeMethodInfo3;
    private static MethodInfo _skipMethodInfo;
    private static MethodInfo _elementAtMethodInfo;
    private static MethodInfo _elementAtOrDefaultMethodInfo;
    private static MethodInfo _setMethodInfo7;
    internal static MethodInfo SetMethodInfo8;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private static Func`2<IQueryable, IQueryable> <ProcessSourceQueryable>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private static IExtensionsAdapter <ExtensionsAdapter>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static Func`2<IQueryable, IQueryable> ProcessSourceQueryable { get; public set; }
    [NullableAttribute("2")]
public static IExtensionsAdapter ExtensionsAdapter { get; public set; }
    private static LinqExtensions();
    [ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
public static ITable`1<T> TableID(ITable`1<T> table, string id);
    [ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
public static ITable`1<T> TableName(ITable`1<T> table, string name);
    [ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
public static ITable`1<T> DatabaseName(ITable`1<T> table, string name);
    [ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
public static ITable`1<T> ServerName(ITable`1<T> table, string name);
    [ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
public static ITable`1<T> SchemaName(ITable`1<T> table, string name);
    [ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
public static ITable`1<T> WithTableExpression(ITable`1<T> table, string expression);
    [ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("Oracle", "1", "LinqToDB.DataProvider.TableSpecHintExtensionBuilder")]
[QueryExtensionAttribute("MySql", "1", "LinqToDB.DataProvider.TableSpecHintExtensionBuilder")]
[QueryExtensionAttribute("", "1", "LinqToDB.SqlProvider.HintExtensionBuilder")]
public static ITable`1<TSource> With(ITable`1<TSource> table, string hint);
    [ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("Oracle", "1", "LinqToDB.DataProvider.TableSpecHintExtensionBuilder")]
[QueryExtensionAttribute("MySql", "1", "LinqToDB.DataProvider.TableSpecHintExtensionBuilder")]
[QueryExtensionAttribute("", "1", "LinqToDB.SqlProvider.HintExtensionBuilder")]
public static ITable`1<TSource> TableHint(ITable`1<TSource> table, string hint);
    [ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("Oracle", "1", "LinqToDB.DataProvider.TableSpecHintExtensionBuilder")]
[QueryExtensionAttribute("MySql", "1", "LinqToDB.DataProvider.TableSpecHintExtensionBuilder")]
[QueryExtensionAttribute("", "1", "LinqToDB.SqlProvider.HintWithParameterExtensionBuilder")]
public static ITable`1<TSource> TableHint(ITable`1<TSource> table, string hint, TParam hintParameter);
    [ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("Oracle", "1", "LinqToDB.DataProvider.TableSpecHintExtensionBuilder", " ", " ")]
[QueryExtensionAttribute("MySql", "1", "LinqToDB.DataProvider.TableSpecHintExtensionBuilder", " ", ", ")]
[QueryExtensionAttribute("", "1", "LinqToDB.SqlProvider.HintWithParametersExtensionBuilder")]
public static ITable`1<TSource> TableHint(ITable`1<TSource> table, string hint, TParam[] hintParameters);
    [ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("Oracle", "2", "LinqToDB.DataProvider.TableSpecHintExtensionBuilder")]
[QueryExtensionAttribute("MySql", "2", "LinqToDB.DataProvider.TableSpecHintExtensionBuilder")]
[QueryExtensionAttribute("", "2", "LinqToDB.SqlProvider.HintExtensionBuilder")]
public static IQueryable`1<TSource> TablesInScopeHint(IQueryable`1<TSource> source, string hint);
    [ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("Oracle", "2", "LinqToDB.DataProvider.TableSpecHintExtensionBuilder")]
[QueryExtensionAttribute("MySql", "2", "LinqToDB.DataProvider.TableSpecHintExtensionBuilder")]
[QueryExtensionAttribute("", "2", "LinqToDB.SqlProvider.HintWithParameterExtensionBuilder")]
public static IQueryable`1<TSource> TablesInScopeHint(IQueryable`1<TSource> source, string hint, TParam hintParameter);
    [ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("Oracle", "2", "LinqToDB.DataProvider.TableSpecHintExtensionBuilder", " ", " ")]
[QueryExtensionAttribute("MySql", "2", "LinqToDB.DataProvider.TableSpecHintExtensionBuilder", " ", ", ")]
[QueryExtensionAttribute("", "2", "LinqToDB.SqlProvider.HintWithParametersExtensionBuilder")]
public static IQueryable`1<TSource> TablesInScopeHint(IQueryable`1<TSource> source, string hint, Object[] hintParameters);
    [ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("Oracle", "3", "LinqToDB.DataProvider.TableSpecHintExtensionBuilder")]
[QueryExtensionAttribute("MySql", "3", "LinqToDB.SqlProvider.HintExtensionBuilder")]
[QueryExtensionAttribute("", "3", "LinqToDB.SqlProvider.HintExtensionBuilder")]
public static ITable`1<TSource> IndexHint(ITable`1<TSource> table, string hint);
    [ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("Oracle", "3", "LinqToDB.DataProvider.TableSpecHintExtensionBuilder")]
[QueryExtensionAttribute("MySql", "3", "LinqToDB.SqlProvider.HintWithParameterExtensionBuilder")]
[QueryExtensionAttribute("", "3", "LinqToDB.SqlProvider.HintWithParameterExtensionBuilder")]
public static ITable`1<TSource> IndexHint(ITable`1<TSource> table, string hint, TParam hintParameter);
    [ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("Oracle", "3", "LinqToDB.DataProvider.TableSpecHintExtensionBuilder", " ", " ")]
[QueryExtensionAttribute("MySql", "3", "LinqToDB.SqlProvider.HintWithParametersExtensionBuilder")]
[QueryExtensionAttribute("", "3", "LinqToDB.SqlProvider.HintWithParametersExtensionBuilder")]
public static ITable`1<TSource> IndexHint(ITable`1<TSource> table, string hint, TParam[] hintParameters);
    [ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("4", "LinqToDB.SqlProvider.NoneExtensionBuilder")]
public static IQueryable`1<TSource> JoinHint(IQueryable`1<TSource> source, string hint);
    [ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("", "5", "LinqToDB.SqlProvider.HintExtensionBuilder")]
public static IQueryable`1<TSource> SubQueryHint(IQueryable`1<TSource> source, string hint);
    [ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("", "5", "LinqToDB.SqlProvider.HintWithParameterExtensionBuilder")]
public static IQueryable`1<TSource> SubQueryHint(IQueryable`1<TSource> source, string hint, TParam hintParameter);
    [ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("", "5", "LinqToDB.SqlProvider.HintWithParametersExtensionBuilder")]
public static IQueryable`1<TSource> SubQueryHint(IQueryable`1<TSource> source, string hint, TParam[] hintParameters);
    [ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("", "6", "LinqToDB.SqlProvider.HintExtensionBuilder")]
public static IQueryable`1<TSource> QueryHint(IQueryable`1<TSource> source, string hint);
    [ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("", "6", "LinqToDB.SqlProvider.HintWithParameterExtensionBuilder")]
public static IQueryable`1<TSource> QueryHint(IQueryable`1<TSource> source, string hint, TParam hintParameter);
    [ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
[IsQueryableAttribute]
[QueryExtensionAttribute("Oracle", "6", "LinqToDB.SqlProvider.HintWithParametersExtensionBuilder", " ")]
[QueryExtensionAttribute("", "6", "LinqToDB.SqlProvider.HintWithParametersExtensionBuilder")]
public static IQueryable`1<TSource> QueryHint(IQueryable`1<TSource> source, string hint, TParam[] hintParameters);
    [ExtensionAttribute]
[PureAttribute]
public static T Select(IDataContext dataContext, Expression`1<Func`1<T>> selector);
    [AsyncStateMachineAttribute("LinqToDB.LinqExtensions/<SelectAsync>d__24`1")]
[ExtensionAttribute]
[PureAttribute]
public static Task`1<T> SelectAsync(IDataContext dataContext, Expression`1<Func`1<T>> selector);
    [ExtensionAttribute]
public static int Delete(IQueryable`1<T> source);
    [AsyncStateMachineAttribute("LinqToDB.LinqExtensions/<DeleteAsync>d__26`1")]
[ExtensionAttribute]
public static Task`1<int> DeleteAsync(IQueryable`1<T> source, CancellationToken token);
    [ExtensionAttribute]
public static int Delete(IQueryable`1<T> source, Expression`1<Func`2<T, bool>> predicate);
    [AsyncStateMachineAttribute("LinqToDB.LinqExtensions/<DeleteAsync>d__28`1")]
[ExtensionAttribute]
public static Task`1<int> DeleteAsync(IQueryable`1<T> source, Expression`1<Func`2<T, bool>> predicate, CancellationToken token);
    [ExtensionAttribute]
public static int Update(IQueryable`1<TSource> source, ITable`1<TTarget> target, Expression`1<Func`2<TSource, TTarget>> setter);
    [AsyncStateMachineAttribute("LinqToDB.LinqExtensions/<UpdateAsync>d__30`2")]
[ExtensionAttribute]
public static Task`1<int> UpdateAsync(IQueryable`1<TSource> source, ITable`1<TTarget> target, Expression`1<Func`2<TSource, TTarget>> setter, CancellationToken token);
    [ExtensionAttribute]
public static int Update(IQueryable`1<T> source, Expression`1<Func`2<T, T>> setter);
    [AsyncStateMachineAttribute("LinqToDB.LinqExtensions/<UpdateAsync>d__32`1")]
[ExtensionAttribute]
public static Task`1<int> UpdateAsync(IQueryable`1<T> source, Expression`1<Func`2<T, T>> setter, CancellationToken token);
    [ExtensionAttribute]
public static int Update(IQueryable`1<T> source, Expression`1<Func`2<T, bool>> predicate, Expression`1<Func`2<T, T>> setter);
    [AsyncStateMachineAttribute("LinqToDB.LinqExtensions/<UpdateAsync>d__34`1")]
[ExtensionAttribute]
public static Task`1<int> UpdateAsync(IQueryable`1<T> source, Expression`1<Func`2<T, bool>> predicate, Expression`1<Func`2<T, T>> setter, CancellationToken token);
    [ExtensionAttribute]
public static int Update(IUpdatable`1<T> source);
    [AsyncStateMachineAttribute("LinqToDB.LinqExtensions/<UpdateAsync>d__36`1")]
[ExtensionAttribute]
public static Task`1<int> UpdateAsync(IUpdatable`1<T> source, CancellationToken token);
    [ExtensionAttribute]
public static int Update(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TTarget>> target, Expression`1<Func`2<TSource, TTarget>> setter);
    [AsyncStateMachineAttribute("LinqToDB.LinqExtensions/<UpdateAsync>d__38`2")]
[ExtensionAttribute]
public static Task`1<int> UpdateAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TTarget>> target, Expression`1<Func`2<TSource, TTarget>> setter, CancellationToken token);
    [ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
public static IUpdatable`1<T> AsUpdatable(IQueryable`1<T> source);
    [ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
public static IUpdatable`1<T> Set(IQueryable`1<T> source, Expression`1<Func`2<T, TV>> extract, Expression`1<Func`2<T, TV>> update);
    [ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
public static IUpdatable`1<T> Set(IUpdatable`1<T> source, Expression`1<Func`2<T, TV>> extract, Expression`1<Func`2<T, TV>> update);
    [ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
public static IUpdatable`1<T> Set(IQueryable`1<T> source, Expression`1<Func`2<T, TV>> extract, Expression`1<Func`1<TV>> update);
    [ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
public static IUpdatable`1<T> Set(IUpdatable`1<T> source, Expression`1<Func`2<T, TV>> extract, Expression`1<Func`1<TV>> update);
    [ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
public static IUpdatable`1<T> Set(IQueryable`1<T> source, Expression`1<Func`2<T, TV>> extract, TV value);
    [ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
public static IUpdatable`1<T> Set(IUpdatable`1<T> source, Expression`1<Func`2<T, TV>> extract, TV value);
    [ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
public static IUpdatable`1<T> Set(IQueryable`1<T> source, Expression`1<Func`2<T, string>> setExpression);
    [ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
public static IUpdatable`1<T> Set(IUpdatable`1<T> source, Expression`1<Func`2<T, string>> setExpression);
    [ExtensionAttribute]
public static int Insert(ITable`1<T> target, Expression`1<Func`1<T>> setter);
    [AsyncStateMachineAttribute("LinqToDB.LinqExtensions/<InsertAsync>d__50`1")]
[ExtensionAttribute]
public static Task`1<int> InsertAsync(ITable`1<T> target, Expression`1<Func`1<T>> setter, CancellationToken token);
    [ExtensionAttribute]
public static object InsertWithIdentity(ITable`1<T> target, Expression`1<Func`1<T>> setter);
    [ExtensionAttribute]
public static int InsertWithInt32Identity(ITable`1<T> target, Expression`1<Func`1<T>> setter);
    [ExtensionAttribute]
public static long InsertWithInt64Identity(ITable`1<T> target, Expression`1<Func`1<T>> setter);
    [ExtensionAttribute]
public static decimal InsertWithDecimalIdentity(ITable`1<T> target, Expression`1<Func`1<T>> setter);
    [AsyncStateMachineAttribute("LinqToDB.LinqExtensions/<InsertWithIdentityAsync>d__55`1")]
[ExtensionAttribute]
public static Task`1<object> InsertWithIdentityAsync(ITable`1<T> target, Expression`1<Func`1<T>> setter, CancellationToken token);
    [AsyncStateMachineAttribute("LinqToDB.LinqExtensions/<InsertWithInt32IdentityAsync>d__56`1")]
[ExtensionAttribute]
public static Task`1<int> InsertWithInt32IdentityAsync(ITable`1<T> target, Expression`1<Func`1<T>> setter, CancellationToken token);
    [AsyncStateMachineAttribute("LinqToDB.LinqExtensions/<InsertWithInt64IdentityAsync>d__57`1")]
[ExtensionAttribute]
public static Task`1<long> InsertWithInt64IdentityAsync(ITable`1<T> target, Expression`1<Func`1<T>> setter, CancellationToken token);
    [AsyncStateMachineAttribute("LinqToDB.LinqExtensions/<InsertWithDecimalIdentityAsync>d__58`1")]
[ExtensionAttribute]
public static Task`1<decimal> InsertWithDecimalIdentityAsync(ITable`1<T> target, Expression`1<Func`1<T>> setter, CancellationToken token);
    [ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
public static IValueInsertable`1<T> Into(IDataContext dataContext, ITable`1<T> target);
    [ExtensionAttribute]
public static IValueInsertable`1<T> AsValueInsertable(ITable`1<T> source);
    [ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
public static IValueInsertable`1<T> Value(ITable`1<T> source, Expression`1<Func`2<T, TV>> field, Expression`1<Func`1<TV>> value);
    [ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
public static IValueInsertable`1<T> Value(ITable`1<T> source, Expression`1<Func`2<T, TV>> field, TV value);
    [ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
public static IValueInsertable`1<T> Value(IValueInsertable`1<T> source, Expression`1<Func`2<T, TV>> field, Expression`1<Func`1<TV>> value);
    [ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
public static IValueInsertable`1<T> Value(IValueInsertable`1<T> source, Expression`1<Func`2<T, TV>> field, TV value);
    [ExtensionAttribute]
public static int Insert(IValueInsertable`1<T> source);
    [AsyncStateMachineAttribute("LinqToDB.LinqExtensions/<InsertAsync>d__67`1")]
[ExtensionAttribute]
public static Task`1<int> InsertAsync(IValueInsertable`1<T> source, CancellationToken token);
    [ExtensionAttribute]
[PureAttribute]
public static object InsertWithIdentity(IValueInsertable`1<T> source);
    [ExtensionAttribute]
public static Nullable`1<int> InsertWithInt32Identity(IValueInsertable`1<T> source);
    [ExtensionAttribute]
public static Nullable`1<long> InsertWithInt64Identity(IValueInsertable`1<T> source);
    [ExtensionAttribute]
public static Nullable`1<decimal> InsertWithDecimalIdentity(IValueInsertable`1<T> source);
    [AsyncStateMachineAttribute("LinqToDB.LinqExtensions/<InsertWithIdentityAsync>d__72`1")]
[ExtensionAttribute]
public static Task`1<object> InsertWithIdentityAsync(IValueInsertable`1<T> source, CancellationToken token);
    [AsyncStateMachineAttribute("LinqToDB.LinqExtensions/<InsertWithInt32IdentityAsync>d__73`1")]
[ExtensionAttribute]
public static Task`1<Nullable`1<int>> InsertWithInt32IdentityAsync(IValueInsertable`1<T> source, CancellationToken token);
    [AsyncStateMachineAttribute("LinqToDB.LinqExtensions/<InsertWithInt64IdentityAsync>d__74`1")]
[ExtensionAttribute]
public static Task`1<Nullable`1<long>> InsertWithInt64IdentityAsync(IValueInsertable`1<T> source, CancellationToken token);
    [AsyncStateMachineAttribute("LinqToDB.LinqExtensions/<InsertWithDecimalIdentityAsync>d__75`1")]
[ExtensionAttribute]
public static Task`1<Nullable`1<decimal>> InsertWithDecimalIdentityAsync(IValueInsertable`1<T> source, CancellationToken token);
    [ExtensionAttribute]
public static int Insert(IQueryable`1<TSource> source, ITable`1<TTarget> target, Expression`1<Func`2<TSource, TTarget>> setter);
    [AsyncStateMachineAttribute("LinqToDB.LinqExtensions/<InsertAsync>d__77`2")]
[ExtensionAttribute]
public static Task`1<int> InsertAsync(IQueryable`1<TSource> source, ITable`1<TTarget> target, Expression`1<Func`2<TSource, TTarget>> setter, CancellationToken token);
    [ExtensionAttribute]
public static object InsertWithIdentity(IQueryable`1<TSource> source, ITable`1<TTarget> target, Expression`1<Func`2<TSource, TTarget>> setter);
    [ExtensionAttribute]
public static Nullable`1<int> InsertWithInt32Identity(IQueryable`1<TSource> source, ITable`1<TTarget> target, Expression`1<Func`2<TSource, TTarget>> setter);
    [ExtensionAttribute]
public static Nullable`1<long> InsertWithInt64Identity(IQueryable`1<TSource> source, ITable`1<TTarget> target, Expression`1<Func`2<TSource, TTarget>> setter);
    [ExtensionAttribute]
public static Nullable`1<decimal> InsertWithDecimalIdentity(IQueryable`1<TSource> source, ITable`1<TTarget> target, Expression`1<Func`2<TSource, TTarget>> setter);
    [AsyncStateMachineAttribute("LinqToDB.LinqExtensions/<InsertWithIdentityAsync>d__82`2")]
[ExtensionAttribute]
public static Task`1<object> InsertWithIdentityAsync(IQueryable`1<TSource> source, ITable`1<TTarget> target, Expression`1<Func`2<TSource, TTarget>> setter, CancellationToken token);
    [AsyncStateMachineAttribute("LinqToDB.LinqExtensions/<InsertWithInt32IdentityAsync>d__83`2")]
[ExtensionAttribute]
public static Task`1<Nullable`1<int>> InsertWithInt32IdentityAsync(IQueryable`1<TSource> source, ITable`1<TTarget> target, Expression`1<Func`2<TSource, TTarget>> setter, CancellationToken token);
    [AsyncStateMachineAttribute("LinqToDB.LinqExtensions/<InsertWithInt64IdentityAsync>d__84`2")]
[ExtensionAttribute]
public static Task`1<Nullable`1<long>> InsertWithInt64IdentityAsync(IQueryable`1<TSource> source, ITable`1<TTarget> target, Expression`1<Func`2<TSource, TTarget>> setter, CancellationToken token);
    [AsyncStateMachineAttribute("LinqToDB.LinqExtensions/<InsertWithDecimalIdentityAsync>d__85`2")]
[ExtensionAttribute]
public static Task`1<Nullable`1<decimal>> InsertWithDecimalIdentityAsync(IQueryable`1<TSource> source, ITable`1<TTarget> target, Expression`1<Func`2<TSource, TTarget>> setter, CancellationToken token);
    [ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
public static ISelectInsertable`2<TSource, TTarget> Into(IQueryable`1<TSource> source, ITable`1<TTarget> target);
    [ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
public static ISelectInsertable`2<TSource, TTarget> Value(ISelectInsertable`2<TSource, TTarget> source, Expression`1<Func`2<TTarget, TValue>> field, Expression`1<Func`2<TSource, TValue>> value);
    [ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
public static ISelectInsertable`2<TSource, TTarget> Value(ISelectInsertable`2<TSource, TTarget> source, Expression`1<Func`2<TTarget, TValue>> field, Expression`1<Func`1<TValue>> value);
    [ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
public static ISelectInsertable`2<TSource, TTarget> Value(ISelectInsertable`2<TSource, TTarget> source, Expression`1<Func`2<TTarget, TValue>> field, TValue value);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static int Insert(ISelectInsertable`2<TSource, TTarget> source);
    [AsyncStateMachineAttribute("LinqToDB.LinqExtensions/<InsertAsync>d__92`2")]
[ExtensionAttribute]
public static Task`1<int> InsertAsync(ISelectInsertable`2<TSource, TTarget> source, CancellationToken token);
    [ExtensionAttribute]
public static object InsertWithIdentity(ISelectInsertable`2<TSource, TTarget> source);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Nullable`1<int> InsertWithInt32Identity(ISelectInsertable`2<TSource, TTarget> source);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Nullable`1<long> InsertWithInt64Identity(ISelectInsertable`2<TSource, TTarget> source);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Nullable`1<decimal> InsertWithDecimalIdentity(ISelectInsertable`2<TSource, TTarget> source);
    [AsyncStateMachineAttribute("LinqToDB.LinqExtensions/<InsertWithIdentityAsync>d__97`2")]
[ExtensionAttribute]
public static Task`1<object> InsertWithIdentityAsync(ISelectInsertable`2<TSource, TTarget> source, CancellationToken token);
    [AsyncStateMachineAttribute("LinqToDB.LinqExtensions/<InsertWithInt32IdentityAsync>d__98`2")]
[ExtensionAttribute]
public static Task`1<Nullable`1<int>> InsertWithInt32IdentityAsync(ISelectInsertable`2<TSource, TTarget> source, CancellationToken token);
    [AsyncStateMachineAttribute("LinqToDB.LinqExtensions/<InsertWithInt64IdentityAsync>d__99`2")]
[ExtensionAttribute]
public static Task`1<Nullable`1<long>> InsertWithInt64IdentityAsync(ISelectInsertable`2<TSource, TTarget> source, CancellationToken token);
    [AsyncStateMachineAttribute("LinqToDB.LinqExtensions/<InsertWithDecimalIdentityAsync>d__100`2")]
[ExtensionAttribute]
public static Task`1<Nullable`1<decimal>> InsertWithDecimalIdentityAsync(ISelectInsertable`2<TSource, TTarget> source, CancellationToken token);
    [ExtensionAttribute]
public static int InsertOrUpdate(ITable`1<T> target, Expression`1<Func`1<T>> insertSetter, Expression`1<Func`2<T, T>> onDuplicateKeyUpdateSetter);
    [AsyncStateMachineAttribute("LinqToDB.LinqExtensions/<InsertOrUpdateAsync>d__103`1")]
[ExtensionAttribute]
public static Task`1<int> InsertOrUpdateAsync(ITable`1<T> target, Expression`1<Func`1<T>> insertSetter, Expression`1<Func`2<T, T>> onDuplicateKeyUpdateSetter, CancellationToken token);
    [ExtensionAttribute]
public static int InsertOrUpdate(ITable`1<T> target, Expression`1<Func`1<T>> insertSetter, Expression`1<Func`2<T, T>> onDuplicateKeyUpdateSetter, Expression`1<Func`1<T>> keySelector);
    [AsyncStateMachineAttribute("LinqToDB.LinqExtensions/<InsertOrUpdateAsync>d__106`1")]
[ExtensionAttribute]
public static Task`1<int> InsertOrUpdateAsync(ITable`1<T> target, Expression`1<Func`1<T>> insertSetter, Expression`1<Func`2<T, T>> onDuplicateKeyUpdateSetter, Expression`1<Func`1<T>> keySelector, CancellationToken token);
    [ExtensionAttribute]
public static int Drop(ITable`1<T> target, bool throwExceptionIfNotExists);
    [AsyncStateMachineAttribute("LinqToDB.LinqExtensions/<DropAsync>d__109`1")]
[ExtensionAttribute]
public static Task`1<int> DropAsync(ITable`1<T> target, bool throwExceptionIfNotExists, CancellationToken token);
    [ExtensionAttribute]
public static int Truncate(ITable`1<T> target, bool resetIdentity);
    [AsyncStateMachineAttribute("LinqToDB.LinqExtensions/<TruncateAsync>d__112`1")]
[ExtensionAttribute]
public static Task`1<int> TruncateAsync(ITable`1<T> target, bool resetIdentity, CancellationToken token);
    [ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
public static IQueryable`1<TSource> Take(IQueryable`1<TSource> source, Expression`1<Func`1<int>> count);
    [ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
public static IQueryable`1<TSource> Take(IQueryable`1<TSource> source, Expression`1<Func`1<int>> count, TakeHints hints);
    [ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
public static IQueryable`1<TSource> Take(IQueryable`1<TSource> source, int count, TakeHints hints);
    [ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
public static IQueryable`1<TSource> Skip(IQueryable`1<TSource> source, Expression`1<Func`1<int>> count);
    [ExtensionAttribute]
[PureAttribute]
public static TSource ElementAt(IQueryable`1<TSource> source, Expression`1<Func`1<int>> index);
    [AsyncStateMachineAttribute("LinqToDB.LinqExtensions/<ElementAtAsync>d__123`1")]
[ExtensionAttribute]
[PureAttribute]
public static Task`1<TSource> ElementAtAsync(IQueryable`1<TSource> source, Expression`1<Func`1<int>> index, CancellationToken token);
    [ExtensionAttribute]
[PureAttribute]
public static TSource ElementAtOrDefault(IQueryable`1<TSource> source, Expression`1<Func`1<int>> index);
    [AsyncStateMachineAttribute("LinqToDB.LinqExtensions/<ElementAtOrDefaultAsync>d__126`1")]
[ExtensionAttribute]
[PureAttribute]
public static Task`1<TSource> ElementAtOrDefaultAsync(IQueryable`1<TSource> source, Expression`1<Func`1<int>> index, CancellationToken token);
    [ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
public static IQueryable`1<TSource> Having(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate);
    [ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
public static IOrderedQueryable`1<TSource> ThenOrBy(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector);
    [ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
public static IOrderedQueryable`1<TSource> ThenOrByDescending(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector);
    [ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
public static IQueryable`1<TSource> RemoveOrderBy(IQueryable`1<TSource> source);
    [ExtensionAttribute]
internal static Context GetContext(IQueryable`1<TSource> source);
    internal static TOutput AsQueryable(TInput source);
    [ExtensionAttribute]
[PureAttribute]
[LinqTunnelAttribute]
public static IQueryable`1<TSource> Join(IQueryable`1<TSource> source, SqlJoinType joinType, Expression`1<Func`2<TSource, bool>> predicate);
    [ExtensionAttribute]
[PureAttribute]
[LinqTunnelAttribute]
public static IQueryable`1<TResult> Join(IQueryable`1<TOuter> outer, IQueryable`1<TInner> inner, SqlJoinType joinType, Expression`1<Func`3<TOuter, TInner, bool>> predicate, Expression`1<Func`3<TOuter, TInner, TResult>> resultSelector);
    [ExtensionAttribute]
[PureAttribute]
[LinqTunnelAttribute]
public static IQueryable`1<TSource> InnerJoin(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate);
    [ExtensionAttribute]
[PureAttribute]
[LinqTunnelAttribute]
public static IQueryable`1<TResult> InnerJoin(IQueryable`1<TOuter> outer, IQueryable`1<TInner> inner, Expression`1<Func`3<TOuter, TInner, bool>> predicate, Expression`1<Func`3<TOuter, TInner, TResult>> resultSelector);
    [ExtensionAttribute]
[PureAttribute]
[LinqTunnelAttribute]
public static IQueryable`1<TSource> LeftJoin(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate);
    [ExtensionAttribute]
[PureAttribute]
[LinqTunnelAttribute]
public static IQueryable`1<TResult> LeftJoin(IQueryable`1<TOuter> outer, IQueryable`1<TInner> inner, Expression`1<Func`3<TOuter, TInner, bool>> predicate, Expression`1<Func`3<TOuter, TInner, TResult>> resultSelector);
    [ExtensionAttribute]
[PureAttribute]
[LinqTunnelAttribute]
public static IQueryable`1<TSource> RightJoin(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate);
    [ExtensionAttribute]
[PureAttribute]
[LinqTunnelAttribute]
public static IQueryable`1<TResult> RightJoin(IQueryable`1<TOuter> outer, IQueryable`1<TInner> inner, Expression`1<Func`3<TOuter, TInner, bool>> predicate, Expression`1<Func`3<TOuter, TInner, TResult>> resultSelector);
    [ExtensionAttribute]
[PureAttribute]
[LinqTunnelAttribute]
public static IQueryable`1<TSource> FullJoin(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate);
    [ExtensionAttribute]
[PureAttribute]
[LinqTunnelAttribute]
public static IQueryable`1<TResult> FullJoin(IQueryable`1<TOuter> outer, IQueryable`1<TInner> inner, Expression`1<Func`3<TOuter, TInner, bool>> predicate, Expression`1<Func`3<TOuter, TInner, TResult>> resultSelector);
    [ExtensionAttribute]
[PureAttribute]
[LinqTunnelAttribute]
public static IQueryable`1<TResult> CrossJoin(IQueryable`1<TOuter> outer, IQueryable`1<TInner> inner, Expression`1<Func`3<TOuter, TInner, TResult>> resultSelector);
    internal static IQueryable`1<T> AsCte(IQueryable`1<T> cteTable, IQueryable`1<T> cteBody, string tableName);
    [ExtensionAttribute]
[PureAttribute]
[LinqTunnelAttribute]
public static IQueryable`1<TSource> AsCte(IQueryable`1<TSource> source);
    [ExtensionAttribute]
[PureAttribute]
[LinqTunnelAttribute]
public static IQueryable`1<TSource> AsCte(IQueryable`1<TSource> source, string name);
    [ExtensionAttribute]
public static IQueryable`1<TElement> AsQueryable(IEnumerable`1<TElement> source, IDataContext dataContext);
    [ExtensionAttribute]
[PureAttribute]
[LinqTunnelAttribute]
public static IQueryable`1<TSource> AsSubQuery(IQueryable`1<TSource> source);
    [ExtensionAttribute]
[PureAttribute]
[LinqTunnelAttribute]
public static IQueryable`1<TKey> AsSubQuery(IQueryable`1<IGrouping`2<TKey, TElement>> grouping);
    [ExtensionAttribute]
[PureAttribute]
[LinqTunnelAttribute]
public static IQueryable`1<TSource> AsSubQuery(IQueryable`1<TSource> source, string queryName);
    [ExtensionAttribute]
[PureAttribute]
[LinqTunnelAttribute]
public static IQueryable`1<TKey> AsSubQuery(IQueryable`1<IGrouping`2<TKey, TElement>> grouping, string queryName);
    [ExtensionAttribute]
[PureAttribute]
[LinqTunnelAttribute]
public static IQueryable`1<TSource> QueryName(IQueryable`1<TSource> source, string queryName);
    [ExtensionAttribute]
[PureAttribute]
[LinqTunnelAttribute]
public static IQueryable`1<TKey> QueryName(IQueryable`1<IGrouping`2<TKey, TElement>> grouping, string queryName);
    [ExtensionAttribute]
[PureAttribute]
[LinqTunnelAttribute]
public static IQueryable`1<TSource> InlineParameters(IQueryable`1<TSource> source);
    [ExtensionAttribute]
[PureAttribute]
[LinqTunnelAttribute]
public static IQueryable`1<IGrouping`2<TKey, TElement>> DisableGuard(IQueryable`1<IGrouping`2<TKey, TElement>> grouping);
    [ExtensionAttribute]
[PureAttribute]
[LinqTunnelAttribute]
public static IQueryable`1<TSource> HasUniqueKey(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector);
    private static Expression GetSourceExpression(IEnumerable`1<TSource> source);
    [ExtensionAttribute]
public static IQueryable`1<TSource> UnionAll(IQueryable`1<TSource> source1, IEnumerable`1<TSource> source2);
    [ExtensionAttribute]
public static IQueryable`1<TSource> ExceptAll(IQueryable`1<TSource> source1, IEnumerable`1<TSource> source2);
    [ExtensionAttribute]
public static IQueryable`1<TSource> IntersectAll(IQueryable`1<TSource> source1, IEnumerable`1<TSource> source2);
    [ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
public static IQueryable`1<TSource> IgnoreFilters(IQueryable`1<TSource> source, Type[] entityTypes);
    [ExtensionAttribute]
public static string GenerateTestString(IQueryable`1<T> query, bool mangleNames);
    [CompilerGeneratedAttribute]
public static Func`2<IQueryable, IQueryable> get_ProcessSourceQueryable();
    [CompilerGeneratedAttribute]
public static void set_ProcessSourceQueryable(Func`2<IQueryable, IQueryable> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static IExtensionsAdapter get_ExtensionsAdapter();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static void set_ExtensionsAdapter(IExtensionsAdapter value);
    [ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
internal static IQueryable`1<TSource> SelectDistinct(IQueryable`1<TSource> source);
    [ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
public static IQueryable`1<TSource> TagQuery(IQueryable`1<TSource> source, string tagValue);
    [ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
public static ITable`1<T> TagQuery(ITable`1<T> table, string tagValue);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> DeleteWithOutput(IQueryable`1<TSource> source);
    [ExtensionAttribute]
public static Task`1<TSource[]> DeleteWithOutputAsync(IQueryable`1<TSource> source, CancellationToken token);
    [ExtensionAttribute]
[PureAttribute]
public static IEnumerable`1<TOutput> DeleteWithOutput(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TOutput>> outputExpression);
    [ExtensionAttribute]
public static Task`1<TOutput[]> DeleteWithOutputAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TOutput>> outputExpression, CancellationToken token);
    [ExtensionAttribute]
public static int DeleteWithOutputInto(IQueryable`1<TSource> source, ITable`1<TOutput> outputTable);
    [ExtensionAttribute]
public static Task`1<int> DeleteWithOutputIntoAsync(IQueryable`1<TSource> source, ITable`1<TOutput> outputTable, CancellationToken token);
    [ExtensionAttribute]
public static int DeleteWithOutputInto(IQueryable`1<TSource> source, ITable`1<TOutput> outputTable, Expression`1<Func`2<TSource, TOutput>> outputExpression);
    [ExtensionAttribute]
public static Task`1<int> DeleteWithOutputIntoAsync(IQueryable`1<TSource> source, ITable`1<TOutput> outputTable, Expression`1<Func`2<TSource, TOutput>> outputExpression, CancellationToken token);
    [ExtensionAttribute]
public static TTarget InsertWithOutput(ITable`1<TTarget> target, Expression`1<Func`1<TTarget>> setter);
    [ExtensionAttribute]
public static Task`1<TTarget> InsertWithOutputAsync(ITable`1<TTarget> target, Expression`1<Func`1<TTarget>> setter, CancellationToken token);
    [ExtensionAttribute]
public static TTarget InsertWithOutput(ITable`1<TTarget> target, TTarget obj);
    [ExtensionAttribute]
public static Task`1<TTarget> InsertWithOutputAsync(ITable`1<TTarget> target, TTarget obj, CancellationToken token);
    [ExtensionAttribute]
public static TOutput InsertWithOutput(ITable`1<TTarget> target, Expression`1<Func`1<TTarget>> setter, Expression`1<Func`2<TTarget, TOutput>> outputExpression);
    [ExtensionAttribute]
public static Task`1<TOutput> InsertWithOutputAsync(ITable`1<TTarget> target, Expression`1<Func`1<TTarget>> setter, Expression`1<Func`2<TTarget, TOutput>> outputExpression, CancellationToken token);
    [ExtensionAttribute]
public static int InsertWithOutputInto(ITable`1<TTarget> target, Expression`1<Func`1<TTarget>> setter, ITable`1<TTarget> outputTable);
    [ExtensionAttribute]
public static Task`1<int> InsertWithOutputIntoAsync(ITable`1<TTarget> target, Expression`1<Func`1<TTarget>> setter, ITable`1<TTarget> outputTable, CancellationToken token);
    [ExtensionAttribute]
public static int InsertWithOutputInto(ITable`1<TTarget> target, Expression`1<Func`1<TTarget>> setter, ITable`1<TOutput> outputTable, Expression`1<Func`2<TTarget, TOutput>> outputExpression);
    [ExtensionAttribute]
public static Task`1<int> InsertWithOutputIntoAsync(ITable`1<TTarget> target, Expression`1<Func`1<TTarget>> setter, ITable`1<TOutput> outputTable, Expression`1<Func`2<TTarget, TOutput>> outputExpression, CancellationToken token);
    [ExtensionAttribute]
public static IEnumerable`1<TTarget> InsertWithOutput(IQueryable`1<TSource> source, ITable`1<TTarget> target, Expression`1<Func`2<TSource, TTarget>> setter);
    [ExtensionAttribute]
public static Task`1<TTarget[]> InsertWithOutputAsync(IQueryable`1<TSource> source, ITable`1<TTarget> target, Expression`1<Func`2<TSource, TTarget>> setter, CancellationToken token);
    [ExtensionAttribute]
[PureAttribute]
public static IEnumerable`1<TOutput> InsertWithOutput(IQueryable`1<TSource> source, ITable`1<TTarget> target, Expression`1<Func`2<TSource, TTarget>> setter, Expression`1<Func`2<TTarget, TOutput>> outputExpression);
    [ExtensionAttribute]
public static Task`1<TOutput[]> InsertWithOutputAsync(IQueryable`1<TSource> source, ITable`1<TTarget> target, Expression`1<Func`2<TSource, TTarget>> setter, Expression`1<Func`2<TTarget, TOutput>> outputExpression, CancellationToken token);
    [ExtensionAttribute]
public static int InsertWithOutputInto(IQueryable`1<TSource> source, ITable`1<TTarget> target, Expression`1<Func`2<TSource, TTarget>> setter, ITable`1<TTarget> outputTable);
    [ExtensionAttribute]
public static Task`1<int> InsertWithOutputIntoAsync(IQueryable`1<TSource> source, ITable`1<TTarget> target, Expression`1<Func`2<TSource, TTarget>> setter, ITable`1<TTarget> outputTable, CancellationToken token);
    [ExtensionAttribute]
public static int InsertWithOutputInto(IQueryable`1<TSource> source, ITable`1<TTarget> target, Expression`1<Func`2<TSource, TTarget>> setter, ITable`1<TOutput> outputTable, Expression`1<Func`2<TTarget, TOutput>> outputExpression);
    [ExtensionAttribute]
public static Task`1<int> InsertWithOutputIntoAsync(IQueryable`1<TSource> source, ITable`1<TTarget> target, Expression`1<Func`2<TSource, TTarget>> setter, ITable`1<TOutput> outputTable, Expression`1<Func`2<TTarget, TOutput>> outputExpression, CancellationToken token);
    [ExtensionAttribute]
public static TTarget InsertWithOutput(ISelectInsertable`2<TSource, TTarget> source);
    [ExtensionAttribute]
public static Task`1<TTarget> InsertWithOutputAsync(ISelectInsertable`2<TSource, TTarget> source, CancellationToken token);
    [ExtensionAttribute]
public static int InsertWithOutputInto(ISelectInsertable`2<TSource, TTarget> source, ITable`1<TTarget> outputTable);
    [ExtensionAttribute]
public static Task`1<int> InsertWithOutputIntoAsync(ISelectInsertable`2<TSource, TTarget> source, ITable`1<TTarget> outputTable, CancellationToken token);
    [ExtensionAttribute]
public static T InsertWithOutput(IValueInsertable`1<T> source);
    [ExtensionAttribute]
public static Task`1<T> InsertWithOutputAsync(IValueInsertable`1<T> source, CancellationToken token);
    [ExtensionAttribute]
public static TOutput InsertWithOutput(IValueInsertable`1<T> source, Expression`1<Func`2<T, TOutput>> outputExpression);
    [ExtensionAttribute]
public static Task`1<TOutput> InsertWithOutputAsync(IValueInsertable`1<T> source, Expression`1<Func`2<T, TOutput>> outputExpression, CancellationToken token);
    [ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
public static ITable`1<T> LoadWithAsTable(ITable`1<T> table, Expression`1<Func`2<T, object>> selector);
    [ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
public static ILoadWithQueryable`2<TEntity, TProperty> LoadWith(IQueryable`1<TEntity> source, Expression`1<Func`2<TEntity, TProperty>> selector);
    [ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
public static ILoadWithQueryable`2<TEntity, TProperty> LoadWith(IQueryable`1<TEntity> source, Expression`1<Func`2<TEntity, IEnumerable`1<TProperty>>> selector, Expression`1<Func`2<IQueryable`1<TProperty>, IQueryable`1<TProperty>>> loadFunc);
    [ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
public static ILoadWithQueryable`2<TEntity, TProperty> LoadWith(IQueryable`1<TEntity> source, Expression`1<Func`2<TEntity, TProperty>> selector, Expression`1<Func`2<IQueryable`1<TProperty>, IQueryable`1<TProperty>>> loadFunc);
    [ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
public static ILoadWithQueryable`2<TEntity, TProperty> ThenLoad(ILoadWithQueryable`2<TEntity, TPreviousProperty> source, Expression`1<Func`2<TPreviousProperty, TProperty>> selector);
    [ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
public static ILoadWithQueryable`2<TEntity, TProperty> ThenLoad(ILoadWithQueryable`2<TEntity, IEnumerable`1<TPreviousProperty>> source, Expression`1<Func`2<TPreviousProperty, TProperty>> selector);
    [ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
public static ILoadWithQueryable`2<TEntity, TProperty> ThenLoad(ILoadWithQueryable`2<TEntity, TPreviousProperty> source, Expression`1<Func`2<TPreviousProperty, IEnumerable`1<TProperty>>> selector, Expression`1<Func`2<IQueryable`1<TProperty>, IQueryable`1<TProperty>>> loadFunc);
    [ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
public static ILoadWithQueryable`2<TEntity, TProperty> ThenLoad(ILoadWithQueryable`2<TEntity, TPreviousProperty> source, Expression`1<Func`2<TPreviousProperty, TProperty>> selector, Expression`1<Func`2<IQueryable`1<TProperty>, IQueryable`1<TProperty>>> loadFunc);
    [ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
public static ILoadWithQueryable`2<TEntity, TProperty> ThenLoad(ILoadWithQueryable`2<TEntity, IEnumerable`1<TPreviousProperty>> source, Expression`1<Func`2<TPreviousProperty, TProperty>> selector, Expression`1<Func`2<IQueryable`1<TProperty>, IQueryable`1<TProperty>>> loadFunc);
    [ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
public static ILoadWithQueryable`2<TEntity, TProperty> ThenLoad(ILoadWithQueryable`2<TEntity, IEnumerable`1<TPreviousProperty>> source, Expression`1<Func`2<TPreviousProperty, IEnumerable`1<TProperty>>> selector, Expression`1<Func`2<IQueryable`1<TProperty>, IQueryable`1<TProperty>>> loadFunc);
    [ExtensionAttribute]
[PureAttribute]
[LinqTunnelAttribute]
public static IMergeableUsing`1<TTarget> Merge(IQueryable`1<TTarget> target);
    [ExtensionAttribute]
[PureAttribute]
[LinqTunnelAttribute]
public static IMergeableUsing`1<TTarget> Merge(ITable`1<TTarget> target);
    [ExtensionAttribute]
[PureAttribute]
[LinqTunnelAttribute]
public static IMergeableUsing`1<TTarget> Merge(ITable`1<TTarget> target, string hint);
    [ExtensionAttribute]
[PureAttribute]
[LinqTunnelAttribute]
public static IMergeableOn`2<TTarget, TSource> MergeInto(IQueryable`1<TSource> source, IQueryable`1<TTarget> target);
    [ExtensionAttribute]
[PureAttribute]
[LinqTunnelAttribute]
public static IMergeableOn`2<TTarget, TSource> MergeInto(IQueryable`1<TSource> source, ITable`1<TTarget> target);
    [ExtensionAttribute]
[PureAttribute]
[LinqTunnelAttribute]
public static IMergeableOn`2<TTarget, TSource> MergeInto(IQueryable`1<TSource> source, ITable`1<TTarget> target, string hint);
    [ExtensionAttribute]
[PureAttribute]
[LinqTunnelAttribute]
public static IMergeableOn`2<TTarget, TSource> Using(IMergeableUsing`1<TTarget> merge, IQueryable`1<TSource> source);
    [ExtensionAttribute]
[PureAttribute]
[LinqTunnelAttribute]
public static IMergeableOn`2<TTarget, TSource> Using(IMergeableUsing`1<TTarget> merge, IEnumerable`1<TSource> source);
    [ExtensionAttribute]
[PureAttribute]
[LinqTunnelAttribute]
public static IMergeableOn`2<TTarget, TTarget> UsingTarget(IMergeableUsing`1<TTarget> merge);
    [ExtensionAttribute]
[PureAttribute]
[LinqTunnelAttribute]
public static IMergeableSource`2<TTarget, TSource> On(IMergeableOn`2<TTarget, TSource> merge, Expression`1<Func`2<TTarget, TKey>> targetKey, Expression`1<Func`2<TSource, TKey>> sourceKey);
    [ExtensionAttribute]
[PureAttribute]
[LinqTunnelAttribute]
public static IMergeableSource`2<TTarget, TSource> On(IMergeableOn`2<TTarget, TSource> merge, Expression`1<Func`3<TTarget, TSource, bool>> matchCondition);
    [ExtensionAttribute]
[PureAttribute]
[LinqTunnelAttribute]
public static IMergeableSource`2<TTarget, TTarget> OnTargetKey(IMergeableOn`2<TTarget, TTarget> merge);
    [ExtensionAttribute]
[PureAttribute]
[LinqTunnelAttribute]
public static IMergeable`2<TTarget, TTarget> InsertWhenNotMatched(IMergeableSource`2<TTarget, TTarget> merge);
    [ExtensionAttribute]
[PureAttribute]
[LinqTunnelAttribute]
public static IMergeable`2<TTarget, TTarget> InsertWhenNotMatchedAnd(IMergeableSource`2<TTarget, TTarget> merge, Expression`1<Func`2<TTarget, bool>> searchCondition);
    [ExtensionAttribute]
[PureAttribute]
[LinqTunnelAttribute]
public static IMergeable`2<TTarget, TSource> InsertWhenNotMatched(IMergeableSource`2<TTarget, TSource> merge, Expression`1<Func`2<TSource, TTarget>> setter);
    [ExtensionAttribute]
[PureAttribute]
[LinqTunnelAttribute]
public static IMergeable`2<TTarget, TSource> InsertWhenNotMatchedAnd(IMergeableSource`2<TTarget, TSource> merge, Expression`1<Func`2<TSource, bool>> searchCondition, Expression`1<Func`2<TSource, TTarget>> setter);
    [ExtensionAttribute]
[PureAttribute]
[LinqTunnelAttribute]
public static IMergeable`2<TTarget, TTarget> UpdateWhenMatched(IMergeableSource`2<TTarget, TTarget> merge);
    [ExtensionAttribute]
[PureAttribute]
[LinqTunnelAttribute]
public static IMergeable`2<TTarget, TTarget> UpdateWhenMatchedAnd(IMergeableSource`2<TTarget, TTarget> merge, Expression`1<Func`3<TTarget, TTarget, bool>> searchCondition);
    [ExtensionAttribute]
[PureAttribute]
[LinqTunnelAttribute]
public static IMergeable`2<TTarget, TSource> UpdateWhenMatched(IMergeableSource`2<TTarget, TSource> merge, Expression`1<Func`3<TTarget, TSource, TTarget>> setter);
    [ExtensionAttribute]
[PureAttribute]
[LinqTunnelAttribute]
public static IMergeable`2<TTarget, TSource> UpdateWhenMatchedAnd(IMergeableSource`2<TTarget, TSource> merge, Expression`1<Func`3<TTarget, TSource, bool>> searchCondition, Expression`1<Func`3<TTarget, TSource, TTarget>> setter);
    [ExtensionAttribute]
[PureAttribute]
[LinqTunnelAttribute]
public static IMergeable`2<TTarget, TTarget> UpdateWhenMatchedThenDelete(IMergeableSource`2<TTarget, TTarget> merge, Expression`1<Func`3<TTarget, TTarget, bool>> deleteCondition);
    [ExtensionAttribute]
[PureAttribute]
[LinqTunnelAttribute]
public static IMergeable`2<TTarget, TTarget> UpdateWhenMatchedAndThenDelete(IMergeableSource`2<TTarget, TTarget> merge, Expression`1<Func`3<TTarget, TTarget, bool>> searchCondition, Expression`1<Func`3<TTarget, TTarget, bool>> deleteCondition);
    [ExtensionAttribute]
[PureAttribute]
[LinqTunnelAttribute]
public static IMergeable`2<TTarget, TSource> UpdateWhenMatchedThenDelete(IMergeableSource`2<TTarget, TSource> merge, Expression`1<Func`3<TTarget, TSource, TTarget>> setter, Expression`1<Func`3<TTarget, TSource, bool>> deleteCondition);
    [ExtensionAttribute]
[PureAttribute]
[LinqTunnelAttribute]
public static IMergeable`2<TTarget, TSource> UpdateWhenMatchedAndThenDelete(IMergeableSource`2<TTarget, TSource> merge, Expression`1<Func`3<TTarget, TSource, bool>> searchCondition, Expression`1<Func`3<TTarget, TSource, TTarget>> setter, Expression`1<Func`3<TTarget, TSource, bool>> deleteCondition);
    [ExtensionAttribute]
[PureAttribute]
[LinqTunnelAttribute]
public static IMergeable`2<TTarget, TSource> DeleteWhenMatched(IMergeableSource`2<TTarget, TSource> merge);
    [ExtensionAttribute]
[PureAttribute]
[LinqTunnelAttribute]
public static IMergeable`2<TTarget, TSource> DeleteWhenMatchedAnd(IMergeableSource`2<TTarget, TSource> merge, Expression`1<Func`3<TTarget, TSource, bool>> searchCondition);
    [ExtensionAttribute]
[PureAttribute]
[LinqTunnelAttribute]
public static IMergeable`2<TTarget, TSource> UpdateWhenNotMatchedBySource(IMergeableSource`2<TTarget, TSource> merge, Expression`1<Func`2<TTarget, TTarget>> setter);
    [ExtensionAttribute]
[PureAttribute]
[LinqTunnelAttribute]
public static IMergeable`2<TTarget, TSource> UpdateWhenNotMatchedBySourceAnd(IMergeableSource`2<TTarget, TSource> merge, Expression`1<Func`2<TTarget, bool>> searchCondition, Expression`1<Func`2<TTarget, TTarget>> setter);
    [ExtensionAttribute]
[PureAttribute]
[LinqTunnelAttribute]
public static IMergeable`2<TTarget, TSource> DeleteWhenNotMatchedBySource(IMergeableSource`2<TTarget, TSource> merge);
    [ExtensionAttribute]
[PureAttribute]
[LinqTunnelAttribute]
public static IMergeable`2<TTarget, TSource> DeleteWhenNotMatchedBySourceAnd(IMergeableSource`2<TTarget, TSource> merge, Expression`1<Func`2<TTarget, bool>> searchCondition);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static int Merge(IMergeable`2<TTarget, TSource> merge);
    [ExtensionAttribute]
public static IEnumerable`1<TOutput> MergeWithOutput(IMergeable`2<TTarget, TSource> merge, Expression`1<Func`4<string, TTarget, TTarget, TOutput>> outputExpression);
    [ExtensionAttribute]
public static IEnumerable`1<TOutput> MergeWithOutput(IMergeable`2<TTarget, TSource> merge, Expression`1<Func`5<string, TTarget, TTarget, TSource, TOutput>> outputExpression);
    [ExtensionAttribute]
public static IAsyncEnumerable`1<TOutput> MergeWithOutputAsync(IMergeable`2<TTarget, TSource> merge, Expression`1<Func`4<string, TTarget, TTarget, TOutput>> outputExpression);
    [ExtensionAttribute]
public static IAsyncEnumerable`1<TOutput> MergeWithOutputAsync(IMergeable`2<TTarget, TSource> merge, Expression`1<Func`5<string, TTarget, TTarget, TSource, TOutput>> outputExpression);
    [ExtensionAttribute]
public static int MergeWithOutputInto(IMergeable`2<TTarget, TSource> merge, ITable`1<TOutput> outputTable, Expression`1<Func`4<string, TTarget, TTarget, TOutput>> outputExpression);
    [ExtensionAttribute]
public static int MergeWithOutputInto(IMergeable`2<TTarget, TSource> merge, ITable`1<TOutput> outputTable, Expression`1<Func`5<string, TTarget, TTarget, TSource, TOutput>> outputExpression);
    [ExtensionAttribute]
public static Task`1<int> MergeWithOutputIntoAsync(IMergeable`2<TTarget, TSource> merge, ITable`1<TOutput> outputTable, Expression`1<Func`4<string, TTarget, TTarget, TOutput>> outputExpression, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<int> MergeWithOutputIntoAsync(IMergeable`2<TTarget, TSource> merge, ITable`1<TOutput> outputTable, Expression`1<Func`5<string, TTarget, TTarget, TSource, TOutput>> outputExpression, CancellationToken token);
    [ExtensionAttribute]
public static Task`1<int> MergeAsync(IMergeable`2<TTarget, TSource> merge, CancellationToken token);
    [ExtensionAttribute]
public static IEnumerable`1<UpdateOutput`1<TTarget>> UpdateWithOutput(IQueryable`1<TSource> source, ITable`1<TTarget> target, Expression`1<Func`2<TSource, TTarget>> setter);
    [ExtensionAttribute]
public static Task`1<UpdateOutput`1[]> UpdateWithOutputAsync(IQueryable`1<TSource> source, ITable`1<TTarget> target, Expression`1<Func`2<TSource, TTarget>> setter, CancellationToken token);
    [ExtensionAttribute]
public static IEnumerable`1<TOutput> UpdateWithOutput(IQueryable`1<TSource> source, ITable`1<TTarget> target, Expression`1<Func`2<TSource, TTarget>> setter, Expression`1<Func`4<TSource, TTarget, TTarget, TOutput>> outputExpression);
    [ExtensionAttribute]
public static Task`1<TOutput[]> UpdateWithOutputAsync(IQueryable`1<TSource> source, ITable`1<TTarget> target, Expression`1<Func`2<TSource, TTarget>> setter, Expression`1<Func`4<TSource, TTarget, TTarget, TOutput>> outputExpression, CancellationToken token);
    [ExtensionAttribute]
public static int UpdateWithOutputInto(IQueryable`1<TSource> source, ITable`1<TTarget> target, Expression`1<Func`2<TSource, TTarget>> setter, ITable`1<TTarget> outputTable);
    [ExtensionAttribute]
public static Task`1<int> UpdateWithOutputIntoAsync(IQueryable`1<TSource> source, ITable`1<TTarget> target, Expression`1<Func`2<TSource, TTarget>> setter, ITable`1<TTarget> outputTable, CancellationToken token);
    [ExtensionAttribute]
public static int UpdateWithOutputInto(IQueryable`1<TSource> source, ITable`1<TTarget> target, Expression`1<Func`2<TSource, TTarget>> setter, ITable`1<TOutput> outputTable, Expression`1<Func`4<TSource, TTarget, TTarget, TOutput>> outputExpression);
    [ExtensionAttribute]
public static Task`1<int> UpdateWithOutputIntoAsync(IQueryable`1<TSource> source, ITable`1<TTarget> target, Expression`1<Func`2<TSource, TTarget>> setter, ITable`1<TOutput> outputTable, Expression`1<Func`4<TSource, TTarget, TTarget, TOutput>> outputExpression, CancellationToken token);
    [ExtensionAttribute]
public static IEnumerable`1<UpdateOutput`1<TTarget>> UpdateWithOutput(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TTarget>> target, Expression`1<Func`2<TSource, TTarget>> setter);
    [ExtensionAttribute]
public static Task`1<UpdateOutput`1[]> UpdateWithOutputAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TTarget>> target, Expression`1<Func`2<TSource, TTarget>> setter, CancellationToken token);
    [ExtensionAttribute]
public static IEnumerable`1<TOutput> UpdateWithOutput(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TTarget>> target, Expression`1<Func`2<TSource, TTarget>> setter, Expression`1<Func`4<TSource, TTarget, TTarget, TOutput>> outputExpression);
    [ExtensionAttribute]
public static Task`1<TOutput[]> UpdateWithOutputAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TTarget>> target, Expression`1<Func`2<TSource, TTarget>> setter, Expression`1<Func`4<TSource, TTarget, TTarget, TOutput>> outputExpression, CancellationToken token);
    [ExtensionAttribute]
public static int UpdateWithOutputInto(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TTarget>> target, Expression`1<Func`2<TSource, TTarget>> setter, ITable`1<TTarget> outputTable);
    [ExtensionAttribute]
public static Task`1<int> UpdateWithOutputIntoAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TTarget>> target, Expression`1<Func`2<TSource, TTarget>> setter, ITable`1<TTarget> outputTable, CancellationToken token);
    [ExtensionAttribute]
public static int UpdateWithOutputInto(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TTarget>> target, Expression`1<Func`2<TSource, TTarget>> setter, ITable`1<TOutput> outputTable, Expression`1<Func`4<TSource, TTarget, TTarget, TOutput>> outputExpression);
    [ExtensionAttribute]
public static Task`1<int> UpdateWithOutputIntoAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TTarget>> target, Expression`1<Func`2<TSource, TTarget>> setter, ITable`1<TOutput> outputTable, Expression`1<Func`4<TSource, TTarget, TTarget, TOutput>> outputExpression, CancellationToken token);
    [ExtensionAttribute]
public static IEnumerable`1<UpdateOutput`1<T>> UpdateWithOutput(IQueryable`1<T> source, Expression`1<Func`2<T, T>> setter);
    [ExtensionAttribute]
public static Task`1<UpdateOutput`1[]> UpdateWithOutputAsync(IQueryable`1<T> source, Expression`1<Func`2<T, T>> setter, CancellationToken token);
    [ExtensionAttribute]
public static IEnumerable`1<TOutput> UpdateWithOutput(IQueryable`1<T> source, Expression`1<Func`2<T, T>> setter, Expression`1<Func`3<T, T, TOutput>> outputExpression);
    [ExtensionAttribute]
public static Task`1<TOutput[]> UpdateWithOutputAsync(IQueryable`1<T> source, Expression`1<Func`2<T, T>> setter, Expression`1<Func`3<T, T, TOutput>> outputExpression, CancellationToken token);
    [ExtensionAttribute]
public static int UpdateWithOutputInto(IQueryable`1<T> source, Expression`1<Func`2<T, T>> setter, ITable`1<T> outputTable);
    [ExtensionAttribute]
public static Task`1<int> UpdateWithOutputIntoAsync(IQueryable`1<T> source, Expression`1<Func`2<T, T>> setter, ITable`1<T> outputTable, CancellationToken token);
    [ExtensionAttribute]
public static int UpdateWithOutputInto(IQueryable`1<T> source, Expression`1<Func`2<T, T>> setter, ITable`1<TOutput> outputTable, Expression`1<Func`3<T, T, TOutput>> outputExpression);
    [ExtensionAttribute]
public static Task`1<int> UpdateWithOutputIntoAsync(IQueryable`1<T> source, Expression`1<Func`2<T, T>> setter, ITable`1<TOutput> outputTable, Expression`1<Func`3<T, T, TOutput>> outputExpression, CancellationToken token);
    [ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
public static IEnumerable`1<UpdateOutput`1<T>> UpdateWithOutput(IUpdatable`1<T> source);
    [ExtensionAttribute]
public static Task`1<UpdateOutput`1[]> UpdateWithOutputAsync(IUpdatable`1<T> source, CancellationToken token);
    [ExtensionAttribute]
public static IEnumerable`1<TOutput> UpdateWithOutput(IUpdatable`1<T> source, Expression`1<Func`3<T, T, TOutput>> outputExpression);
    [ExtensionAttribute]
public static Task`1<TOutput[]> UpdateWithOutputAsync(IUpdatable`1<T> source, Expression`1<Func`3<T, T, TOutput>> outputExpression, CancellationToken token);
    [ExtensionAttribute]
public static int UpdateWithOutputInto(IUpdatable`1<T> source, ITable`1<T> outputTable);
    [ExtensionAttribute]
public static Task`1<int> UpdateWithOutputIntoAsync(IUpdatable`1<T> source, ITable`1<T> outputTable, CancellationToken token);
    [ExtensionAttribute]
public static int UpdateWithOutputInto(IUpdatable`1<T> source, ITable`1<TOutput> outputTable, Expression`1<Func`3<T, T, TOutput>> outputExpression);
    [ExtensionAttribute]
public static Task`1<int> UpdateWithOutputIntoAsync(IUpdatable`1<T> source, ITable`1<TOutput> outputTable, Expression`1<Func`3<T, T, TOutput>> outputExpression, CancellationToken token);
    [ExtensionAttribute]
public static bool IsSet(TableOptions tableOptions);
    [ExtensionAttribute]
public static bool IsTemporaryOptionSet(TableOptions tableOptions);
    [ExtensionAttribute]
public static bool HasCreateIfNotExists(TableOptions tableOptions);
    [ExtensionAttribute]
public static bool HasDropIfExists(TableOptions tableOptions);
    [ExtensionAttribute]
public static bool HasIsTemporary(TableOptions tableOptions);
    [ExtensionAttribute]
public static bool HasIsLocalTemporaryStructure(TableOptions tableOptions);
    [ExtensionAttribute]
public static bool HasIsGlobalTemporaryStructure(TableOptions tableOptions);
    [ExtensionAttribute]
public static bool HasIsLocalTemporaryData(TableOptions tableOptions);
    [ExtensionAttribute]
public static bool HasIsGlobalTemporaryData(TableOptions tableOptions);
    [ExtensionAttribute]
public static bool HasIsTransactionTemporaryData(TableOptions tableOptions);
    [ExtensionAttribute]
public static TableOptions Or(TableOptions tableOptions, TableOptions additionalOptions);
    [ExtensionAttribute]
internal static SqlTable Set(SqlTable table, Nullable`1<bool> set, TableOptions tableOptions);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.LinqOptions : object {
    [CompilerGeneratedAttribute]
private bool <PreloadGroups>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreEmptyUpdate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <GenerateExpressionTest>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TraceMapperExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DoNotClearOrderBys>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OptimizeJoins>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CompareNullsAsValues>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <GuardGrouping>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableQueryCache>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <CacheSlidingExpiration>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreferApply>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <KeepDistinctOrdered>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ParameterizeTakeSkip>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableContextSchemaEdit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreferExistsForScalar>k__BackingField;
    private Nullable`1<int> _configurationID;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public bool PreloadGroups { get; public set; }
    public bool IgnoreEmptyUpdate { get; public set; }
    public bool GenerateExpressionTest { get; public set; }
    public bool TraceMapperExpression { get; public set; }
    public bool DoNotClearOrderBys { get; public set; }
    public bool OptimizeJoins { get; public set; }
    public bool CompareNullsAsValues { get; public set; }
    public bool GuardGrouping { get; public set; }
    public bool DisableQueryCache { get; public set; }
    public Nullable`1<TimeSpan> CacheSlidingExpiration { get; public set; }
    public bool PreferApply { get; public set; }
    public bool KeepDistinctOrdered { get; public set; }
    public bool ParameterizeTakeSkip { get; public set; }
    public bool EnableContextSchemaEdit { get; public set; }
    public bool PreferExistsForScalar { get; public set; }
    private int LinqToDB.Common.Internal.IConfigurationID.ConfigurationID { get; }
    public TimeSpan CacheSlidingExpirationOrDefault { get; }
    public LinqOptions(bool PreloadGroups, bool IgnoreEmptyUpdate, bool GenerateExpressionTest, bool TraceMapperExpression, bool DoNotClearOrderBys, bool OptimizeJoins, bool CompareNullsAsValues, bool GuardGrouping, bool DisableQueryCache, Nullable`1<TimeSpan> CacheSlidingExpiration, bool PreferApply, bool KeepDistinctOrdered, bool ParameterizeTakeSkip, bool EnableContextSchemaEdit, bool PreferExistsForScalar);
    private LinqOptions(LinqOptions original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public bool get_PreloadGroups();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_PreloadGroups(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreEmptyUpdate();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IgnoreEmptyUpdate(bool value);
    [CompilerGeneratedAttribute]
public bool get_GenerateExpressionTest();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_GenerateExpressionTest(bool value);
    [CompilerGeneratedAttribute]
public bool get_TraceMapperExpression();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_TraceMapperExpression(bool value);
    [CompilerGeneratedAttribute]
public bool get_DoNotClearOrderBys();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_DoNotClearOrderBys(bool value);
    [CompilerGeneratedAttribute]
public bool get_OptimizeJoins();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_OptimizeJoins(bool value);
    [CompilerGeneratedAttribute]
public bool get_CompareNullsAsValues();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_CompareNullsAsValues(bool value);
    [CompilerGeneratedAttribute]
public bool get_GuardGrouping();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_GuardGrouping(bool value);
    [CompilerGeneratedAttribute]
public bool get_DisableQueryCache();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_DisableQueryCache(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_CacheSlidingExpiration();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_CacheSlidingExpiration(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public bool get_PreferApply();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_PreferApply(bool value);
    [CompilerGeneratedAttribute]
public bool get_KeepDistinctOrdered();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_KeepDistinctOrdered(bool value);
    [CompilerGeneratedAttribute]
public bool get_ParameterizeTakeSkip();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ParameterizeTakeSkip(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableContextSchemaEdit();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_EnableContextSchemaEdit(bool value);
    [CompilerGeneratedAttribute]
public bool get_PreferExistsForScalar();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_PreferExistsForScalar(bool value);
    private sealed virtual override int LinqToDB.Common.Internal.IConfigurationID.get_ConfigurationID();
    public TimeSpan get_CacheSlidingExpirationOrDefault();
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(LinqOptions other);
    public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(LinqOptions left, LinqOptions right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(LinqOptions left, LinqOptions right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public LinqOptions <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(Boolean& PreloadGroups, Boolean& IgnoreEmptyUpdate, Boolean& GenerateExpressionTest, Boolean& TraceMapperExpression, Boolean& DoNotClearOrderBys, Boolean& OptimizeJoins, Boolean& CompareNullsAsValues, Boolean& GuardGrouping, Boolean& DisableQueryCache, Nullable`1& CacheSlidingExpiration, Boolean& PreferApply, Boolean& KeepDistinctOrdered, Boolean& ParameterizeTakeSkip, Boolean& EnableContextSchemaEdit, Boolean& PreferExistsForScalar);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class LinqToDB.LinqToDBConstants : object {
    public static string ProductName;
    public static string ProductDescription;
    public static string Copyright;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.LinqToDBException : Exception {
    public LinqToDBException(string message);
    public LinqToDBException(string message, Exception innerException);
    public LinqToDBException(Exception innerException);
    protected LinqToDBException(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[PublicAPIAttribute]
[AttributeUsageAttribute("448")]
public class LinqToDB.Mapping.AssociationAttribute : MappingAttribute {
    [CompilerGeneratedAttribute]
private string <ThisKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OtherKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExpressionPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <Predicate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <QueryExpressionMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <QueryExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Storage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssociationSetterExpressionMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <AssociationSetterExpression>k__BackingField;
    internal Nullable`1<bool> ConfiguredCanBeNull;
    [CompilerGeneratedAttribute]
private string <AliasName>k__BackingField;
    public string ThisKey { get; public set; }
    public string OtherKey { get; public set; }
    public string ExpressionPredicate { get; public set; }
    public Expression Predicate { get; public set; }
    public string QueryExpressionMethod { get; public set; }
    public Expression QueryExpression { get; public set; }
    public string Storage { get; public set; }
    public string AssociationSetterExpressionMethod { get; public set; }
    public Expression AssociationSetterExpression { get; public set; }
    public bool CanBeNull { get; public set; }
    public string AliasName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ThisKey();
    [CompilerGeneratedAttribute]
public void set_ThisKey(string value);
    [CompilerGeneratedAttribute]
public string get_OtherKey();
    [CompilerGeneratedAttribute]
public void set_OtherKey(string value);
    [CompilerGeneratedAttribute]
public string get_ExpressionPredicate();
    [CompilerGeneratedAttribute]
public void set_ExpressionPredicate(string value);
    [CompilerGeneratedAttribute]
public Expression get_Predicate();
    [CompilerGeneratedAttribute]
public void set_Predicate(Expression value);
    [CompilerGeneratedAttribute]
public string get_QueryExpressionMethod();
    [CompilerGeneratedAttribute]
public void set_QueryExpressionMethod(string value);
    [CompilerGeneratedAttribute]
public Expression get_QueryExpression();
    [CompilerGeneratedAttribute]
public void set_QueryExpression(Expression value);
    [CompilerGeneratedAttribute]
public string get_Storage();
    [CompilerGeneratedAttribute]
public void set_Storage(string value);
    [CompilerGeneratedAttribute]
public string get_AssociationSetterExpressionMethod();
    [CompilerGeneratedAttribute]
public void set_AssociationSetterExpressionMethod(string value);
    [CompilerGeneratedAttribute]
public Expression get_AssociationSetterExpression();
    [CompilerGeneratedAttribute]
public void set_AssociationSetterExpression(Expression value);
    public bool get_CanBeNull();
    public void set_CanBeNull(bool value);
    [CompilerGeneratedAttribute]
public string get_AliasName();
    [CompilerGeneratedAttribute]
public void set_AliasName(string value);
    [NullableContextAttribute("1")]
public String[] GetThisKeys();
    [NullableContextAttribute("1")]
public String[] GetOtherKeys();
    [NullableContextAttribute("1")]
public virtual string GetObjectID();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class LinqToDB.Mapping.AssociationDescriptor : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private MemberInfo <MemberInfo>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private String[] <ThisKey>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private String[] <OtherKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExpressionPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExpressionQueryMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <ExpressionQuery>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <Predicate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Storage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssociationSetterExpressionMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <AssociationSetterExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanBeNull>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AliasName>k__BackingField;
    [NullableAttribute("1")]
public MemberInfo MemberInfo { get; }
    [NullableAttribute("1")]
public String[] ThisKey { get; }
    [NullableAttribute("1")]
public String[] OtherKey { get; }
    public string ExpressionPredicate { get; }
    public string ExpressionQueryMethod { get; }
    public Expression ExpressionQuery { get; }
    public Expression Predicate { get; }
    public string Storage { get; }
    public string AssociationSetterExpressionMethod { get; }
    public Expression AssociationSetterExpression { get; }
    public bool CanBeNull { get; }
    public string AliasName { get; }
    public bool IsList { get; }
    public AssociationDescriptor(Type type, MemberInfo memberInfo, String[] thisKey, String[] otherKey, string expressionPredicate, Expression predicate, string expressionQueryMethod, Expression expressionQuery, string storage, string associationSetterExpressionMethod, Expression associationSetterExpression, Nullable`1<bool> canBeNull, string aliasName);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public MemberInfo get_MemberInfo();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public String[] get_ThisKey();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public String[] get_OtherKey();
    [CompilerGeneratedAttribute]
public string get_ExpressionPredicate();
    [CompilerGeneratedAttribute]
public string get_ExpressionQueryMethod();
    [CompilerGeneratedAttribute]
public Expression get_ExpressionQuery();
    [CompilerGeneratedAttribute]
public Expression get_Predicate();
    [CompilerGeneratedAttribute]
public string get_Storage();
    [CompilerGeneratedAttribute]
public string get_AssociationSetterExpressionMethod();
    [CompilerGeneratedAttribute]
public Expression get_AssociationSetterExpression();
    [CompilerGeneratedAttribute]
public bool get_CanBeNull();
    [CompilerGeneratedAttribute]
public string get_AliasName();
    [NullableContextAttribute("1")]
public static String[] ParseKeys(string keys);
    [NullableContextAttribute("1")]
public string GenerateAlias();
    public bool get_IsList();
    [NullableContextAttribute("1")]
public Type GetElementType(MappingSchema mappingSchema);
    [NullableContextAttribute("1")]
public Type GetParentElementType();
    [NullableContextAttribute("1")]
public LambdaExpression GetPredicate(Type parentType, Type objectType);
    public bool HasQueryMethod();
    [NullableContextAttribute("1")]
public LambdaExpression GetQueryMethod(Type parentType, Type objectType);
    private bool AnalyzeCanBeNull();
    private bool HasAssociationSetterMethod();
    [NullableContextAttribute("1")]
private LambdaExpression GetAssociationSetterMethod(Type memberType, Type objectType);
    [NullableContextAttribute("1")]
internal Expression GetAssociationAssignmentExpression(Expression parentObject, Expression value, MemberInfo memberInfo);
    [NullableContextAttribute("1")]
internal Type GetAssociationDesiredAssignmentType(MemberInfo memberInfo, Type parentType, Type objectType);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("384")]
public class LinqToDB.Mapping.ColumnAliasAttribute : MappingAttribute {
    [CompilerGeneratedAttribute]
private string <MemberName>k__BackingField;
    public string MemberName { get; public set; }
    [NullableContextAttribute("1")]
public ColumnAliasAttribute(string memberName);
    [CompilerGeneratedAttribute]
public string get_MemberName();
    [CompilerGeneratedAttribute]
public void set_MemberName(string value);
    [NullableContextAttribute("1")]
public virtual string GetObjectID();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("1412")]
public class LinqToDB.Mapping.ColumnAttribute : MappingAttribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MemberName>k__BackingField;
    [CompilerGeneratedAttribute]
private DataType <DataType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DbType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Storage>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDiscriminator>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipOnEntityFetch>k__BackingField;
    private Nullable`1<bool> _skipOnInsert;
    private Nullable`1<bool> _skipOnUpdate;
    private Nullable`1<bool> _isIdentity;
    private Nullable`1<bool> _isPrimaryKey;
    [CompilerGeneratedAttribute]
private int <PrimaryKeyOrder>k__BackingField;
    private Nullable`1<bool> _canBeNull;
    private Nullable`1<int> _length;
    private Nullable`1<int> _precision;
    private Nullable`1<int> _scale;
    [CompilerGeneratedAttribute]
private string <CreateFormat>k__BackingField;
    private Nullable`1<int> _order;
    public string Name { get; public set; }
    public string MemberName { get; public set; }
    public DataType DataType { get; public set; }
    public string DbType { get; public set; }
    public bool IsColumn { get; public set; }
    public string Storage { get; public set; }
    public bool IsDiscriminator { get; public set; }
    public bool SkipOnEntityFetch { get; public set; }
    public bool SkipOnInsert { get; public set; }
    public bool SkipOnUpdate { get; public set; }
    public bool IsIdentity { get; public set; }
    public bool IsPrimaryKey { get; public set; }
    public int PrimaryKeyOrder { get; public set; }
    public bool CanBeNull { get; public set; }
    public int Length { get; public set; }
    public int Precision { get; public set; }
    public int Scale { get; public set; }
    public string CreateFormat { get; public set; }
    public int Order { get; public set; }
    [NullableContextAttribute("1")]
public ColumnAttribute(string columnName);
    [NullableContextAttribute("1")]
public ColumnAttribute(string columnName, string memberName);
    [NullableContextAttribute("1")]
internal ColumnAttribute(string memberName, ColumnAttribute ca);
    [NullableContextAttribute("1")]
internal ColumnAttribute(ColumnAttribute ca);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_MemberName();
    [CompilerGeneratedAttribute]
public void set_MemberName(string value);
    [CompilerGeneratedAttribute]
public DataType get_DataType();
    [CompilerGeneratedAttribute]
public void set_DataType(DataType value);
    [CompilerGeneratedAttribute]
public string get_DbType();
    [CompilerGeneratedAttribute]
public void set_DbType(string value);
    [CompilerGeneratedAttribute]
public bool get_IsColumn();
    [CompilerGeneratedAttribute]
public void set_IsColumn(bool value);
    [CompilerGeneratedAttribute]
public string get_Storage();
    [CompilerGeneratedAttribute]
public void set_Storage(string value);
    [CompilerGeneratedAttribute]
public bool get_IsDiscriminator();
    [CompilerGeneratedAttribute]
public void set_IsDiscriminator(bool value);
    [CompilerGeneratedAttribute]
public bool get_SkipOnEntityFetch();
    [CompilerGeneratedAttribute]
public void set_SkipOnEntityFetch(bool value);
    public bool get_SkipOnInsert();
    public void set_SkipOnInsert(bool value);
    internal bool HasSkipOnInsert();
    public bool get_SkipOnUpdate();
    public void set_SkipOnUpdate(bool value);
    internal bool HasSkipOnUpdate();
    public bool get_IsIdentity();
    public void set_IsIdentity(bool value);
    internal bool HasIsIdentity();
    public bool get_IsPrimaryKey();
    public void set_IsPrimaryKey(bool value);
    internal bool HasIsPrimaryKey();
    [CompilerGeneratedAttribute]
public int get_PrimaryKeyOrder();
    [CompilerGeneratedAttribute]
public void set_PrimaryKeyOrder(int value);
    public bool get_CanBeNull();
    public void set_CanBeNull(bool value);
    internal bool HasCanBeNull();
    public int get_Length();
    public void set_Length(int value);
    internal bool HasLength();
    public int get_Precision();
    public void set_Precision(int value);
    internal bool HasPrecision();
    public int get_Scale();
    public void set_Scale(int value);
    internal bool HasScale();
    [CompilerGeneratedAttribute]
public string get_CreateFormat();
    [CompilerGeneratedAttribute]
public void set_CreateFormat(string value);
    public int get_Order();
    public void set_Order(int value);
    internal bool HasOrder();
    [NullableContextAttribute("1")]
public virtual string GetObjectID();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.Mapping.ColumnDescriptor : object {
    [CompilerGeneratedAttribute]
private MappingSchema <MappingSchema>k__BackingField;
    [CompilerGeneratedAttribute]
private EntityDescriptor <EntityDescriptor>k__BackingField;
    [CompilerGeneratedAttribute]
private MemberAccessor <MemberAccessor>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasInheritanceMapping>k__BackingField;
    [CompilerGeneratedAttribute]
private MemberInfo <MemberInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private MemberInfo <StorageInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <MemberType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <StorageType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MemberName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ColumnName>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Storage>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDiscriminator>k__BackingField;
    [CompilerGeneratedAttribute]
private DataType <DataType>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <DbType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsIdentity>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipOnInsert>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipOnEntityFetch>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private SkipBaseAttribute[] <SkipBaseAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private SkipModification <SkipModificationFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipOnUpdate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPrimaryKey>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PrimaryKeyOrder>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanBeNull>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Length>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Precision>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Scale>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <CreateFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Order>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private SequenceNameAttribute <SequenceName>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IValueConverter <ValueConverter>k__BackingField;
    [NullableAttribute("2")]
private LambdaExpression _getOriginalValueLambda;
    [NullableAttribute("2")]
private LambdaExpression _getDbValueLambda;
    [NullableAttribute("2")]
private Expression _getDefaultDbValueExpression;
    [NullableAttribute("2")]
private LambdaExpression _getDbParamLambda;
    [NullableAttribute("2")]
private Expression _getDefaultDbParamExpression;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<object, object> _getter;
    public MappingSchema MappingSchema { get; }
    public EntityDescriptor EntityDescriptor { get; }
    public MemberAccessor MemberAccessor { get; }
    public bool HasInheritanceMapping { get; }
    public MemberInfo MemberInfo { get; }
    public MemberInfo StorageInfo { get; }
    public Type MemberType { get; }
    public Type StorageType { get; }
    public string MemberName { get; }
    private string LinqToDB.Mapping.IColumnChangeDescriptor.MemberName { get; }
    public string ColumnName { get; private set; }
    private string LinqToDB.Mapping.IColumnChangeDescriptor.ColumnName { get; private set; }
    [NullableAttribute("2")]
public string Storage { get; }
    public bool IsDiscriminator { get; }
    public DataType DataType { get; }
    [NullableAttribute("2")]
public string DbType { get; }
    public bool IsIdentity { get; }
    public bool SkipOnInsert { get; }
    public bool SkipOnEntityFetch { get; }
    public bool HasValuesToSkipOnInsert { get; }
    public bool HasValuesToSkipOnUpdate { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private SkipBaseAttribute[] SkipBaseAttributes { get; }
    public SkipModification SkipModificationFlags { get; }
    public bool SkipOnUpdate { get; }
    public bool IsPrimaryKey { get; }
    public int PrimaryKeyOrder { get; }
    public bool CanBeNull { get; }
    public Nullable`1<int> Length { get; }
    public Nullable`1<int> Precision { get; }
    public Nullable`1<int> Scale { get; }
    [NullableAttribute("2")]
public string CreateFormat { get; }
    public Nullable`1<int> Order { get; }
    [NullableAttribute("2")]
public SequenceNameAttribute SequenceName { get; }
    [NullableAttribute("2")]
public IValueConverter ValueConverter { get; }
    public ColumnDescriptor(MappingSchema mappingSchema, EntityDescriptor entityDescriptor, ColumnAttribute columnAttribute, MemberAccessor memberAccessor, bool hasInheritanceMapping);
    [NullableContextAttribute("2")]
private bool AnalyzeCanBeNull(ColumnAttribute columnAttribute);
    [CompilerGeneratedAttribute]
public MappingSchema get_MappingSchema();
    [CompilerGeneratedAttribute]
public EntityDescriptor get_EntityDescriptor();
    [CompilerGeneratedAttribute]
public MemberAccessor get_MemberAccessor();
    [CompilerGeneratedAttribute]
public bool get_HasInheritanceMapping();
    [CompilerGeneratedAttribute]
public MemberInfo get_MemberInfo();
    [CompilerGeneratedAttribute]
public MemberInfo get_StorageInfo();
    [CompilerGeneratedAttribute]
public Type get_MemberType();
    [CompilerGeneratedAttribute]
public Type get_StorageType();
    [CompilerGeneratedAttribute]
public string get_MemberName();
    private sealed virtual override string LinqToDB.Mapping.IColumnChangeDescriptor.get_MemberName();
    [CompilerGeneratedAttribute]
public string get_ColumnName();
    [CompilerGeneratedAttribute]
private void set_ColumnName(string value);
    private sealed virtual override string LinqToDB.Mapping.IColumnChangeDescriptor.get_ColumnName();
    private sealed virtual override void LinqToDB.Mapping.IColumnChangeDescriptor.set_ColumnName(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Storage();
    [CompilerGeneratedAttribute]
public bool get_IsDiscriminator();
    [CompilerGeneratedAttribute]
public DataType get_DataType();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_DbType();
    [CompilerGeneratedAttribute]
public bool get_IsIdentity();
    [CompilerGeneratedAttribute]
public bool get_SkipOnInsert();
    [CompilerGeneratedAttribute]
public bool get_SkipOnEntityFetch();
    public bool get_HasValuesToSkipOnInsert();
    public bool get_HasValuesToSkipOnUpdate();
    [CompilerGeneratedAttribute]
private SkipBaseAttribute[] get_SkipBaseAttributes();
    [CompilerGeneratedAttribute]
public SkipModification get_SkipModificationFlags();
    public virtual bool ShouldSkip(object obj, EntityDescriptor descriptor, SkipModification flags);
    [CompilerGeneratedAttribute]
public bool get_SkipOnUpdate();
    [CompilerGeneratedAttribute]
public bool get_IsPrimaryKey();
    [CompilerGeneratedAttribute]
public int get_PrimaryKeyOrder();
    [CompilerGeneratedAttribute]
public bool get_CanBeNull();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Length();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Precision();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Scale();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_CreateFormat();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Order();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public SequenceNameAttribute get_SequenceName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IValueConverter get_ValueConverter();
    public DbDataType GetDbDataType(bool completeDataType);
    public DbDataType GetConvertedDbDataType();
    public static DbDataType CalculateDbDataType(MappingSchema mappingSchema, Type systemType);
    public LambdaExpression GetOriginalValueLambda();
    public LambdaExpression GetDbValueLambda();
    public Expression GetDefaultDbValueExpression();
    public LambdaExpression GetDbParamLambda();
    public Expression GetDefaultDbParamExpression();
    public static Expression ApplyConversions(MappingSchema mappingSchema, Expression getterExpr, DbDataType dbDataType, IValueConverter valueConverter, bool includingEnum);
    public Expression ApplyConversions(Expression getterExpr, DbDataType dbDataType, bool includingEnum);
    public virtual object GetProviderValue(object obj);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("384")]
public class LinqToDB.Mapping.DataTypeAttribute : MappingAttribute {
    [CompilerGeneratedAttribute]
private Nullable`1<DataType> <DataType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DbType>k__BackingField;
    public Nullable`1<DataType> DataType { get; public set; }
    public string DbType { get; public set; }
    public DataTypeAttribute(DataType dataType);
    [NullableContextAttribute("1")]
public DataTypeAttribute(string dbType);
    [NullableContextAttribute("1")]
public DataTypeAttribute(DataType dataType, string dbType);
    [CompilerGeneratedAttribute]
public Nullable`1<DataType> get_DataType();
    [CompilerGeneratedAttribute]
public void set_DataType(Nullable`1<DataType> value);
    [CompilerGeneratedAttribute]
public string get_DbType();
    [CompilerGeneratedAttribute]
public void set_DbType(string value);
    [NullableContextAttribute("1")]
public virtual string GetObjectID();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4")]
public class LinqToDB.Mapping.DynamicColumnAccessorAttribute : MappingAttribute {
    [CompilerGeneratedAttribute]
private string <SetterMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GetterMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SetterExpressionMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GetterExpressionMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private LambdaExpression <SetterExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private LambdaExpression <GetterExpression>k__BackingField;
    public string SetterMethod { get; public set; }
    public string GetterMethod { get; public set; }
    public string SetterExpressionMethod { get; public set; }
    public string GetterExpressionMethod { get; public set; }
    public LambdaExpression SetterExpression { get; public set; }
    public LambdaExpression GetterExpression { get; public set; }
    [CompilerGeneratedAttribute]
public string get_SetterMethod();
    [CompilerGeneratedAttribute]
public void set_SetterMethod(string value);
    [CompilerGeneratedAttribute]
public string get_GetterMethod();
    [CompilerGeneratedAttribute]
public void set_GetterMethod(string value);
    [CompilerGeneratedAttribute]
public string get_SetterExpressionMethod();
    [CompilerGeneratedAttribute]
public void set_SetterExpressionMethod(string value);
    [CompilerGeneratedAttribute]
public string get_GetterExpressionMethod();
    [CompilerGeneratedAttribute]
public void set_GetterExpressionMethod(string value);
    [CompilerGeneratedAttribute]
public LambdaExpression get_SetterExpression();
    [CompilerGeneratedAttribute]
public void set_SetterExpression(LambdaExpression value);
    [CompilerGeneratedAttribute]
public LambdaExpression get_GetterExpression();
    [CompilerGeneratedAttribute]
public void set_GetterExpression(LambdaExpression value);
    protected internal void Validate();
    [NullableContextAttribute("1")]
public virtual string GetObjectID();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.Mapping.DynamicColumnInfo : PropertyInfo {
    private static MethodInfo _dummyGetter;
    private static MethodInfo _dummySetter;
    private MethodInfo _typedDummyGetter;
    private MethodInfo _typedDummySetter;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <DeclaringType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <PropertyType>k__BackingField;
    public string Name { get; }
    public Type DeclaringType { get; }
    public Type ReflectedType { get; }
    public Type PropertyType { get; }
    public PropertyAttributes Attributes { get; }
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public DynamicColumnInfo(Type declaringType, Type columnType, string memberName);
    private static DynamicColumnInfo();
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual Type get_DeclaringType();
    public virtual Type get_ReflectedType();
    [CompilerGeneratedAttribute]
public virtual Type get_PropertyType();
    public virtual PropertyAttributes get_Attributes();
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(DynamicColumnInfo other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [NullableContextAttribute("2")]
public static bool op_Equality(DynamicColumnInfo a, DynamicColumnInfo b);
    [NullableContextAttribute("2")]
public static bool op_Inequality(DynamicColumnInfo a, DynamicColumnInfo b);
    public virtual Object[] GetCustomAttributes(bool inherit);
    public virtual Object[] GetCustomAttributes(Type attributeType, bool inherit);
    public virtual IList`1<CustomAttributeData> GetCustomAttributesData();
    public virtual bool IsDefined(Type attributeType, bool inherit);
    [NullableContextAttribute("2")]
public virtual void SetValue(object obj, object value, BindingFlags invokeAttr, Binder binder, Object[] index, CultureInfo culture);
    public virtual MethodInfo[] GetAccessors(bool nonPublic);
    public virtual MethodInfo GetGetMethod(bool nonPublic);
    public virtual MethodInfo GetSetMethod(bool nonPublic);
    public virtual ParameterInfo[] GetIndexParameters();
    [NullableContextAttribute("2")]
public virtual object GetValue(object obj, BindingFlags invokeAttr, Binder binder, Object[] index, CultureInfo culture);
    private T DummyGetter();
    private void DummySetter(T value);
}
[AttributeUsageAttribute("384")]
public class LinqToDB.Mapping.DynamicColumnsStoreAttribute : MappingAttribute {
    [NullableContextAttribute("1")]
public virtual string GetObjectID();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
[DebuggerDisplayAttribute("{TypeAccessor.Type.Name} ("{TableName.Name}")")]
public class LinqToDB.Mapping.EntityDescriptor : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private MappingSchema <MappingSchema>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private TypeAccessor <TypeAccessor>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlObjectName <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private TableOptions <TableOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsColumnAttributeRequired>k__BackingField;
    [CompilerGeneratedAttribute]
private SkipModification <SkipModificationFlags>k__BackingField;
    [NullableAttribute("1")]
private List`1<ColumnDescriptor> _columns;
    [NullableAttribute("1")]
private List`1<AssociationDescriptor> _associations;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, string> _aliases;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<MemberAccessor> _calculatedMembers;
    [NullableAttribute("1")]
private InheritanceMapping[] _inheritanceMappings;
    [CompilerGeneratedAttribute]
private EntityDescriptor <InheritanceRoot>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasComplexColumns>k__BackingField;
    [CompilerGeneratedAttribute]
private Delegate <QueryFilterFunc>k__BackingField;
    [NullableAttribute("1")]
private Dictionary`2<string, ColumnDescriptor> _columnNames;
    [CompilerGeneratedAttribute]
private ColumnDescriptor <DynamicColumnsStore>k__BackingField;
    [CompilerGeneratedAttribute]
private LambdaExpression <DynamicColumnGetter>k__BackingField;
    [CompilerGeneratedAttribute]
private LambdaExpression <DynamicColumnSetter>k__BackingField;
    [NullableAttribute("1")]
internal MappingSchema MappingSchema { get; }
    [NullableAttribute("1")]
public TypeAccessor TypeAccessor { get; }
    public SqlObjectName Name { get; private set; }
    [NullableAttribute("1")]
private string LinqToDB.Mapping.IEntityChangeDescriptor.TableName { get; private set; }
    private string LinqToDB.Mapping.IEntityChangeDescriptor.SchemaName { get; private set; }
    private string LinqToDB.Mapping.IEntityChangeDescriptor.DatabaseName { get; private set; }
    private string LinqToDB.Mapping.IEntityChangeDescriptor.ServerName { get; private set; }
    public TableOptions TableOptions { get; private set; }
    private TableOptions LinqToDB.Mapping.IEntityChangeDescriptor.TableOptions { get; private set; }
    public bool IsColumnAttributeRequired { get; private set; }
    public SkipModification SkipModificationFlags { get; private set; }
    [NullableAttribute("1")]
public IReadOnlyList`1<ColumnDescriptor> Columns { get; }
    [NullableAttribute("1")]
private IEnumerable`1<IColumnChangeDescriptor> LinqToDB.Mapping.IEntityChangeDescriptor.Columns { get; }
    [NullableAttribute("1")]
public IReadOnlyList`1<AssociationDescriptor> Associations { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyDictionary`2<string, string> Aliases { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyList`1<MemberAccessor> CalculatedMembers { get; }
    public bool HasCalculatedMembers { get; }
    [NullableAttribute("1")]
public IReadOnlyList`1<InheritanceMapping> InheritanceMapping { get; }
    public EntityDescriptor InheritanceRoot { get; private set; }
    [NullableAttribute("1")]
public Type ObjectType { get; }
    internal bool HasComplexColumns { get; private set; }
    public Delegate QueryFilterFunc { get; private set; }
    public ColumnDescriptor Item { get; }
    public ColumnDescriptor DynamicColumnsStore { get; private set; }
    internal LambdaExpression DynamicColumnGetter { get; private set; }
    internal LambdaExpression DynamicColumnSetter { get; private set; }
    [NullableContextAttribute("1")]
public EntityDescriptor(MappingSchema mappingSchema, Type type, Action`2<MappingSchema, IEntityChangeDescriptor> onEntityDescriptorCreated);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal MappingSchema get_MappingSchema();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual TypeAccessor get_TypeAccessor();
    [CompilerGeneratedAttribute]
public SqlObjectName get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(SqlObjectName value);
    [NullableContextAttribute("1")]
private sealed virtual override string LinqToDB.Mapping.IEntityChangeDescriptor.get_TableName();
    [NullableContextAttribute("1")]
private sealed virtual override void LinqToDB.Mapping.IEntityChangeDescriptor.set_TableName(string value);
    private sealed virtual override string LinqToDB.Mapping.IEntityChangeDescriptor.get_SchemaName();
    private sealed virtual override void LinqToDB.Mapping.IEntityChangeDescriptor.set_SchemaName(string value);
    private sealed virtual override string LinqToDB.Mapping.IEntityChangeDescriptor.get_DatabaseName();
    private sealed virtual override void LinqToDB.Mapping.IEntityChangeDescriptor.set_DatabaseName(string value);
    private sealed virtual override string LinqToDB.Mapping.IEntityChangeDescriptor.get_ServerName();
    private sealed virtual override void LinqToDB.Mapping.IEntityChangeDescriptor.set_ServerName(string value);
    [CompilerGeneratedAttribute]
public TableOptions get_TableOptions();
    [CompilerGeneratedAttribute]
private void set_TableOptions(TableOptions value);
    private sealed virtual override TableOptions LinqToDB.Mapping.IEntityChangeDescriptor.get_TableOptions();
    private sealed virtual override void LinqToDB.Mapping.IEntityChangeDescriptor.set_TableOptions(TableOptions value);
    [CompilerGeneratedAttribute]
public bool get_IsColumnAttributeRequired();
    [CompilerGeneratedAttribute]
private void set_IsColumnAttributeRequired(bool value);
    [CompilerGeneratedAttribute]
public SkipModification get_SkipModificationFlags();
    [CompilerGeneratedAttribute]
private void set_SkipModificationFlags(SkipModification value);
    [NullableContextAttribute("1")]
public IReadOnlyList`1<ColumnDescriptor> get_Columns();
    [NullableContextAttribute("1")]
private sealed virtual override IEnumerable`1<IColumnChangeDescriptor> LinqToDB.Mapping.IEntityChangeDescriptor.get_Columns();
    [NullableContextAttribute("1")]
public IReadOnlyList`1<AssociationDescriptor> get_Associations();
    public IReadOnlyDictionary`2<string, string> get_Aliases();
    public IReadOnlyList`1<MemberAccessor> get_CalculatedMembers();
    public bool get_HasCalculatedMembers();
    [NullableContextAttribute("1")]
public IReadOnlyList`1<InheritanceMapping> get_InheritanceMapping();
    [CompilerGeneratedAttribute]
public EntityDescriptor get_InheritanceRoot();
    [CompilerGeneratedAttribute]
private void set_InheritanceRoot(EntityDescriptor value);
    [NullableContextAttribute("1")]
public Type get_ObjectType();
    [CompilerGeneratedAttribute]
internal bool get_HasComplexColumns();
    [CompilerGeneratedAttribute]
private void set_HasComplexColumns(bool value);
    [CompilerGeneratedAttribute]
public Delegate get_QueryFilterFunc();
    [CompilerGeneratedAttribute]
private void set_QueryFilterFunc(Delegate value);
    private bool HasInheritanceMapping();
    private void Init(Action`2<MappingSchema, IEntityChangeDescriptor> onEntityDescriptorCreated);
    [NullableContextAttribute("1")]
private void SetColumn(ColumnAttribute attr, bool hasInheritanceMapping);
    [NullableContextAttribute("1")]
public ColumnDescriptor get_Item(string memberName);
    private void InitInheritanceMapping(Action`2<MappingSchema, IEntityChangeDescriptor> onEntityDescriptorCreated);
    [NullableContextAttribute("1")]
private void AddColumn(ColumnDescriptor columnDescriptor);
    [NullableContextAttribute("1")]
public ColumnDescriptor FindColumnDescriptor(MemberInfo memberInfo);
    [NullableContextAttribute("1")]
public AssociationDescriptor FindAssociationDescriptor(MemberInfo memberInfo);
    [CompilerGeneratedAttribute]
public ColumnDescriptor get_DynamicColumnsStore();
    [CompilerGeneratedAttribute]
private void set_DynamicColumnsStore(ColumnDescriptor value);
    [CompilerGeneratedAttribute]
internal LambdaExpression get_DynamicColumnGetter();
    [CompilerGeneratedAttribute]
private void set_DynamicColumnGetter(LambdaExpression value);
    [CompilerGeneratedAttribute]
internal LambdaExpression get_DynamicColumnSetter();
    [CompilerGeneratedAttribute]
private void set_DynamicColumnSetter(LambdaExpression value);
    private void InitializeDynamicColumnsAccessors(bool hasInheritanceMapping);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private MemberAccessor <Init>b__72_0(MemberInfo dc);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PublicAPIAttribute]
public class LinqToDB.Mapping.EntityMappingBuilder`1 : object {
    private FluentMappingBuilder _builder;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Configuration>k__BackingField;
    [NullableAttribute("2")]
public string Configuration { get; }
    public EntityMappingBuilder`1(FluentMappingBuilder builder, string configuration);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Configuration();
    private IEnumerable`1<TA> GetAttributes(Type type);
    private IEnumerable`1<TA> GetAttributes(MemberInfo memberInfo);
    public EntityMappingBuilder`1<TEntity> HasAttribute(MappingAttribute attribute);
    public EntityMappingBuilder`1<TEntity> HasAttribute(MemberInfo memberInfo, MappingAttribute attribute);
    public EntityMappingBuilder`1<TEntity> HasAttribute(LambdaExpression func, MappingAttribute attribute);
    public EntityMappingBuilder`1<TEntity> HasAttribute(Expression`1<Func`2<TEntity, object>> func, MappingAttribute attribute);
    [NullableContextAttribute("2")]
public EntityMappingBuilder`1<TE> Entity(string configuration);
    public PropertyMappingBuilder`2<TEntity, TProperty> Property(Expression`1<Func`2<TEntity, TProperty>> func);
    public PropertyMappingBuilder`2<TEntity, TProperty> Member(Expression`1<Func`2<TEntity, TProperty>> func);
    public PropertyMappingBuilder`2<TEntity, TProperty> Association(Expression`1<Func`2<TEntity, TProperty>> prop, Expression`1<Func`2<TEntity, TThisKey>> thisKey, Expression`1<Func`2<TProperty, TOtherKey>> otherKey, Nullable`1<bool> canBeNull);
    public PropertyMappingBuilder`2<TEntity, IEnumerable`1<TPropElement>> Association(Expression`1<Func`2<TEntity, IEnumerable`1<TPropElement>>> prop, Expression`1<Func`2<TEntity, TThisKey>> thisKey, Expression`1<Func`2<TPropElement, TOtherKey>> otherKey, Nullable`1<bool> canBeNull);
    public PropertyMappingBuilder`2<TEntity, IEnumerable`1<TOther>> Association(Expression`1<Func`2<TEntity, IEnumerable`1<TOther>>> prop, Expression`1<Func`3<TEntity, TOther, bool>> predicate, Nullable`1<bool> canBeNull);
    public PropertyMappingBuilder`2<TEntity, TOther> Association(Expression`1<Func`2<TEntity, TOther>> prop, Expression`1<Func`3<TEntity, TOther, bool>> predicate, Nullable`1<bool> canBeNull);
    public PropertyMappingBuilder`2<TEntity, IEnumerable`1<TOther>> Association(Expression`1<Func`2<TEntity, IEnumerable`1<TOther>>> prop, Expression`1<Func`3<TEntity, IDataContext, IQueryable`1<TOther>>> queryExpression, Nullable`1<bool> canBeNull);
    public PropertyMappingBuilder`2<TEntity, TOther> Association(Expression`1<Func`2<TEntity, TOther>> prop, Expression`1<Func`3<TEntity, IDataContext, IQueryable`1<TOther>>> queryExpression, Nullable`1<bool> canBeNull);
    public EntityMappingBuilder`1<TEntity> HasPrimaryKey(Expression`1<Func`2<TEntity, TProperty>> func, int order);
    public EntityMappingBuilder`1<TEntity> HasIdentity(Expression`1<Func`2<TEntity, TProperty>> func);
    public EntityMappingBuilder`1<TEntity> HasColumn(Expression`1<Func`2<TEntity, object>> func, int order);
    public EntityMappingBuilder`1<TEntity> Ignore(Expression`1<Func`2<TEntity, object>> func, int order);
    public EntityMappingBuilder`1<TEntity> HasSkipValuesOnInsert(Expression`1<Func`2<TEntity, object>> func, Object[] values);
    public EntityMappingBuilder`1<TEntity> HasSkipValuesOnUpdate(Expression`1<Func`2<TEntity, object>> func, Object[] values);
    public EntityMappingBuilder`1<TEntity> HasTableName(string tableName);
    public EntityMappingBuilder`1<TEntity> IsColumnRequired();
    public EntityMappingBuilder`1<TEntity> IsColumnNotRequired();
    public EntityMappingBuilder`1<TEntity> HasSchemaName(string schemaName);
    public EntityMappingBuilder`1<TEntity> HasDatabaseName(string databaseName);
    public EntityMappingBuilder`1<TEntity> HasServerName(string serverName);
    public EntityMappingBuilder`1<TEntity> HasIsTemporary(bool isTemporary);
    public EntityMappingBuilder`1<TEntity> HasTableOptions(TableOptions tableOptions);
    public EntityMappingBuilder`1<TEntity> Inheritance(Expression`1<Func`2<TEntity, TS>> key, TS value, Type type, bool isDefault);
    public EntityMappingBuilder`1<TEntity> HasQueryFilter(Func`3<IQueryable`1<TEntity>, IDataContext, IQueryable`1<TEntity>> filterFunc);
    public EntityMappingBuilder`1<TEntity> HasQueryFilter(Func`3<IQueryable`1<TEntity>, TDataContext, IQueryable`1<TEntity>> filterFunc);
    public EntityMappingBuilder`1<TEntity> HasQueryFilter(Expression`1<Func`3<TEntity, IDataContext, bool>> filter);
    public EntityMappingBuilder`1<TEntity> HasQueryFilter(Expression`1<Func`3<TEntity, TDataContext, bool>> filter);
    public EntityMappingBuilder`1<TEntity> DynamicColumnsStore(Expression`1<Func`2<TEntity, object>> func);
    public EntityMappingBuilder`1<TEntity> DynamicPropertyAccessors(Expression`1<Func`4<TEntity, string, object, object>> getter, Expression`1<Action`3<TEntity, string, object>> setter);
    private EntityMappingBuilder`1<TEntity> SetTable(Action`1<TableAttribute> setColumn);
    private EntityMappingBuilder`1<TEntity> SetAttribute(Func`1<TA> getNew, Action`1<TA> modifyExisting, Func`2<TA, TA> overrideAttribute);
    internal EntityMappingBuilder`1<TEntity> SetAttribute(Func`1<TA> getNew, Action`1<TA> modifyExisting, Func`2<IEnumerable`1<TA>, TA> existingGetter);
    internal EntityMappingBuilder`1<TEntity> SetAttribute(Expression`1<Func`2<TEntity, TProperty>> func, bool processNewExpression, Func`2<bool, TA> getNew, Action`2<bool, TA> modifyExisting, Func`2<TA, TA> overrideAttribute, Func`2<IEnumerable`1<TA>, TA> existingGetter);
    private static TA GetExisting(IEnumerable`1<TA> attrs);
    public FluentMappingBuilder Build();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <GetAttributes>b__5_1(TA a);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <GetAttributes>b__6_1(TA a);
    [CompilerGeneratedAttribute]
private IdentityAttribute <HasIdentity>b__21_0(bool _);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <SetAttribute>g__SetAttr|44_0(Expression e, bool m, <>c__DisplayClass44_0`2& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.Mapping.FluentMappingBuilder : object {
    private Dictionary`2<Type, List`1<MappingAttribute>> _typeAttributes;
    private Dictionary`2<MemberInfo, List`1<MappingAttribute>> _memberAttributes;
    private List`1<MemberInfo> _orderedMembers;
    [CompilerGeneratedAttribute]
private MappingSchema <MappingSchema>k__BackingField;
    public MappingSchema MappingSchema { get; }
    public FluentMappingBuilder(MappingSchema mappingSchema);
    [CompilerGeneratedAttribute]
public MappingSchema get_MappingSchema();
    public FluentMappingBuilder Build();
    internal IEnumerable`1<T> GetAttributes(Type type);
    internal IEnumerable`1<T> GetAttributes(Type type, MemberInfo memberInfo);
    public FluentMappingBuilder HasAttribute(Type type, MappingAttribute attribute);
    public FluentMappingBuilder HasAttribute(MappingAttribute attribute);
    public FluentMappingBuilder HasAttribute(MemberInfo memberInfo, MappingAttribute attribute);
    public FluentMappingBuilder HasAttribute(LambdaExpression func, MappingAttribute attribute);
    public FluentMappingBuilder HasAttribute(Expression`1<Func`2<T, object>> func, MappingAttribute attribute);
    [NullableContextAttribute("2")]
public EntityMappingBuilder`1<T> Entity(string configuration);
    private void AddAttribute(Type owner, MappingAttribute attribute);
    private void AddAttribute(MemberInfo memberInfo, MappingAttribute attribute);
}
[NullableContextAttribute("1")]
public interface LinqToDB.Mapping.IColumnChangeDescriptor {
    public string MemberName { get; }
    public string ColumnName { get; public set; }
    public abstract virtual string get_MemberName();
    public abstract virtual string get_ColumnName();
    public abstract virtual void set_ColumnName(string value);
}
[AttributeUsageAttribute("384")]
public class LinqToDB.Mapping.IdentityAttribute : MappingAttribute {
    [NullableContextAttribute("2")]
public IdentityAttribute(string configuration);
    [NullableContextAttribute("1")]
public virtual string GetObjectID();
}
[NullableContextAttribute("2")]
public interface LinqToDB.Mapping.IEntityChangeDescriptor {
    [NullableAttribute("1")]
public TypeAccessor TypeAccessor { get; }
    [NullableAttribute("1")]
public string TableName { get; public set; }
    public string SchemaName { get; public set; }
    public string DatabaseName { get; public set; }
    public string ServerName { get; public set; }
    public TableOptions TableOptions { get; public set; }
    [NullableAttribute("1")]
public IEnumerable`1<IColumnChangeDescriptor> Columns { get; }
    [NullableContextAttribute("1")]
public abstract virtual TypeAccessor get_TypeAccessor();
    [NullableContextAttribute("1")]
public abstract virtual string get_TableName();
    [NullableContextAttribute("1")]
public abstract virtual void set_TableName(string value);
    public abstract virtual string get_SchemaName();
    public abstract virtual void set_SchemaName(string value);
    public abstract virtual string get_DatabaseName();
    public abstract virtual void set_DatabaseName(string value);
    public abstract virtual string get_ServerName();
    public abstract virtual void set_ServerName(string value);
    public abstract virtual TableOptions get_TableOptions();
    public abstract virtual void set_TableOptions(TableOptions value);
    [NullableContextAttribute("1")]
public abstract virtual IEnumerable`1<IColumnChangeDescriptor> get_Columns();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.Mapping.InheritanceMapping : object {
    [NullableAttribute("2")]
public object Code;
    public bool IsDefault;
    public Type Type;
    public ColumnDescriptor Discriminator;
    public string DiscriminatorName { get; }
    public string get_DiscriminatorName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("1028")]
public class LinqToDB.Mapping.InheritanceMappingAttribute : MappingAttribute {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private object <Code>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDefault>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [NullableAttribute("2")]
public object Code { get; public set; }
    public bool IsDefault { get; public set; }
    public Type Type { get; public set; }
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public object get_Code();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Code(object value);
    [CompilerGeneratedAttribute]
public bool get_IsDefault();
    [CompilerGeneratedAttribute]
public void set_IsDefault(bool value);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(Type value);
    public virtual string GetObjectID();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class LinqToDB.Mapping.LockedMappingSchema : MappingSchema {
    private static Dictionary`2<Type, int> _configurationIDs;
    public bool IsLockable { get; }
    public bool IsLocked { get; }
    protected LockedMappingSchema(string configuration, MappingSchema[] schemas);
    internal LockedMappingSchema(MappingSchemaInfo mappingSchemaInfo);
    private static LockedMappingSchema();
    protected internal virtual int GenerateID();
    internal virtual MappingSchemaInfo CreateMappingSchemaInfo(string configuration, MappingSchema mappingSchema);
    public virtual bool get_IsLockable();
    public virtual bool get_IsLocked();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Mapping.LockedMappingSchemaInfo : MappingSchemaInfo {
    private MappingSchema _mappingSchema;
    private bool _isLocked;
    public bool IsLocked { get; }
    public LockedMappingSchemaInfo(string configuration, MappingSchema mappingSchema);
    public virtual bool get_IsLocked();
    protected virtual int GenerateID();
    public virtual void ResetID();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class LinqToDB.Mapping.MappingAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Configuration>k__BackingField;
    public string Configuration { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Configuration();
    [CompilerGeneratedAttribute]
public void set_Configuration(string value);
    [NullableContextAttribute("1")]
public abstract virtual string GetObjectID();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PublicAPIAttribute]
[DebuggerDisplayAttribute("{DisplayID}")]
public class LinqToDB.Mapping.MappingSchema : object {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static MemoryCache`2<ValueTuple`2<MappingSchema, MappingSchema>, MappingSchema> _combinedSchemasCache;
    private object _syncRoot;
    internal MappingSchemaInfo[] Schemas;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private TransformVisitor`1<MappingSchema> _reduceDefaultValueTransformer;
    [CompilerGeneratedAttribute]
private ValueToSqlConverter <ValueToSqlConverter>k__BackingField;
    private static FieldAttributes EnumField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<Type, Type> _enumTypeMapping;
    private MappingAttributesCache _cache;
    private MappingAttributesCache _firstOnlyCache;
    private Nullable`1<int> _configurationID;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private String[] _configurationList;
    public static MappingSchema Default;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ConcurrentDictionary`2<Type, MapValue[]> _mapValues;
    [NullableAttribute("2")]
private StringComparer _columnNameComparer;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private static Action`2<MappingSchema, IEntityChangeDescriptor> <EntityDescriptorCreatedCallback>k__BackingField;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private static MemoryCache`2<ValueTuple`2<Type, int>, EntityDescriptor> <EntityDescriptorsCache>k__BackingField;
    public ValueToSqlConverter ValueToSqlConverter { get; private set; }
    internal ConcurrentDictionary`2<object, Func`2<object, object>> Converters { get; }
    private int LinqToDB.Common.Internal.IConfigurationID.ConfigurationID { get; }
    public String[] ConfigurationList { get; }
    public string DisplayID { get; }
    public StringComparer ColumnNameComparer { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static Action`2<MappingSchema, IEntityChangeDescriptor> EntityDescriptorCreatedCallback { get; public set; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static MemoryCache`2<ValueTuple`2<Type, int>, EntityDescriptor> EntityDescriptorsCache { get; }
    public bool IsLockable { get; }
    public bool IsLocked { get; }
    public MappingSchema(MappingSchema[] schemas);
    [NullableContextAttribute("2")]
public MappingSchema(string configuration);
    [NullableContextAttribute("2")]
public MappingSchema(string configuration, MappingSchema[] schemas);
    internal MappingSchema(MappingSchemaInfo mappingSchemaInfo);
    private static MappingSchema();
    public static MappingSchema CombineSchemas(MappingSchema ms1, MappingSchema ms2);
    [CompilerGeneratedAttribute]
public ValueToSqlConverter get_ValueToSqlConverter();
    [CompilerGeneratedAttribute]
private void set_ValueToSqlConverter(ValueToSqlConverter value);
    public MappingSchema SetValueToSqlConverter(Type type, Action`3<StringBuilder, SqlDataType, object> converter);
    public MappingSchema SetValueToSqlConverter(Type type, Action`4<StringBuilder, SqlDataType, DataOptions, object> converter);
    public object GetDefaultValue(Type type);
    public void SetDefaultValue(Type type, object value);
    public bool GetCanBeNull(Type type);
    public void SetCanBeNull(Type type, bool value);
    [NullableContextAttribute("2")]
public void InitGenericConvertProvider();
    public bool InitGenericConvertProvider(Type[] types);
    public void SetGenericConvertProvider(Type type);
    [NullableContextAttribute("2")]
public T ChangeTypeTo(object value);
    [NullableContextAttribute("2")]
public object ChangeType(object value, Type conversionType);
    public object EnumToValue(Enum value);
    public virtual LambdaExpression TryGetConvertExpression(Type from, Type to);
    internal ConcurrentDictionary`2<object, Func`2<object, object>> get_Converters();
    [NullableContextAttribute("2")]
public Expression`1<Func`2<TFrom, TTo>> GetConvertExpression(bool checkNull, bool createDefault, ConversionType conversionType);
    public LambdaExpression GetConvertExpression(Type from, Type to, bool checkNull, bool createDefault, ConversionType conversionType);
    [NullableContextAttribute("2")]
public LambdaExpression GetConvertExpression(DbDataType from, DbDataType to, bool checkNull, bool createDefault, ConversionType conversionType);
    [NullableContextAttribute("2")]
public Func`2<TFrom, TTo> GetConverter(ConversionType conversionType);
    public MappingSchema SetConvertExpression(Type fromType, Type toType, LambdaExpression expr, bool addNullCheck, ConversionType conversionType);
    public MappingSchema SetConvertExpression(DbDataType fromType, DbDataType toType, LambdaExpression expr, bool addNullCheck, ConversionType conversionType);
    public MappingSchema SetConvertExpression(Expression`1<Func`2<TFrom, TTo>> expr, bool addNullCheck, ConversionType conversionType);
    public MappingSchema SetConvertExpression(Expression`1<Func`2<TFrom, TTo>> checkNullExpr, Expression`1<Func`2<TFrom, TTo>> expr, ConversionType conversionType);
    public MappingSchema SetConverter(Func`2<TFrom, TTo> func, ConversionType conversionType);
    public MappingSchema SetConverter(Func`2<TFrom, TTo> func, DbDataType from, DbDataType to, ConversionType conversionType);
    internal LambdaExpression AddNullCheck(LambdaExpression expr);
    public LambdaExpression GenerateSafeConvert(Type fromType, Type type);
    public Expression GenerateConvertedValueExpression(object value, Type type);
    private static bool Simplify(DbDataType& type);
    [NullableContextAttribute("2")]
internal LambdaInfo GetConverter(DbDataType from, DbDataType to, bool create, ConversionType conversionType);
    private Expression ReduceDefaultValue(Expression expr);
    private Expression ReduceDefaultValueTransformer(Expression e);
    public void SetCultureInfo(CultureInfo info);
    private void InitMetadataReaders();
    public void AddMetadataReader(IMetadataReader reader);
    private T[] GetAllAttributes(Type type);
    private T[] GetAllAttributes(Type type, MemberInfo memberInfo);
    private ValueTuple`2<MappingAttributesCache, MappingAttributesCache> CreateAttributeCaches();
    public T[] GetAttributes(Type type);
    public T[] GetAttributes(Type type, MemberInfo memberInfo, bool forFirstConfiguration);
    public T GetAttribute(Type type);
    public T GetAttribute(Type type, MemberInfo memberInfo);
    public bool HasAttribute(Type type);
    public bool HasAttribute(Type type, MemberInfo memberInfo);
    public MemberInfo[] GetDynamicColumns(Type type);
    private sealed virtual override int LinqToDB.Common.Internal.IConfigurationID.get_ConfigurationID();
    protected internal virtual int GenerateID();
    internal void ResetID();
    public String[] get_ConfigurationList();
    public string get_DisplayID();
    public bool IsScalarType(Type type);
    public void SetScalarType(Type type, bool isScalarType);
    public void AddScalarType(Type type, object defaultValue, DataType dataType);
    public void AddScalarType(Type type, object defaultValue, bool canBeNull, DataType dataType);
    public void AddScalarType(Type type, DataType dataType, bool withNullable);
    public void AddScalarType(Type type, SqlDataType dataType, bool withNullable);
    public SqlDataType GetDataType(Type type);
    public void SetDataType(Type type, DataType dataType);
    public void SetDataType(Type type, SqlDataType dataType);
    public SqlDataType GetUnderlyingDataType(Type type, Boolean& canBeNull);
    public virtual MapValue[] GetMapValues(Type type);
    public StringComparer get_ColumnNameComparer();
    public void set_ColumnNameComparer(StringComparer value);
    [CompilerGeneratedAttribute]
public static Action`2<MappingSchema, IEntityChangeDescriptor> get_EntityDescriptorCreatedCallback();
    [CompilerGeneratedAttribute]
public static void set_EntityDescriptorCreatedCallback(Action`2<MappingSchema, IEntityChangeDescriptor> value);
    [CompilerGeneratedAttribute]
private static MemoryCache`2<ValueTuple`2<Type, int>, EntityDescriptor> get_EntityDescriptorsCache();
    public EntityDescriptor GetEntityDescriptor(Type type, Action`2<MappingSchema, IEntityChangeDescriptor> onEntityDescriptorCreated);
    public IEnumerable`1<Type> GetDefinedTypes();
    public static void ClearCache();
    public Type GetDefaultFromEnumType(Type enumType);
    public void SetDefaultFromEnumType(Type enumType, Type defaultFromType);
    internal IEnumerable`1<T> SortByConfiguration(IEnumerable`1<T> attributes);
    public virtual bool get_IsLockable();
    public virtual bool get_IsLocked();
    internal virtual MappingSchemaInfo CreateMappingSchemaInfo(string configuration, MappingSchema mappingSchema);
    [CompilerGeneratedAttribute]
internal static void <InitMetadataReaders>g__AddMetadataReaderInternal|48_0(IMetadataReader reader, <>c__DisplayClass48_0& );
    [CompilerGeneratedAttribute]
private MappingAttribute[] <CreateAttributeCaches>b__52_0(Type sourceOwner, ICustomAttributeProvider source);
    [CompilerGeneratedAttribute]
private MappingAttribute[] <CreateAttributeCaches>b__52_1(Type sourceOwner, ICustomAttributeProvider source);
    [CompilerGeneratedAttribute]
private MapValue[] <GetMapValues>b__86_0(Type type);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private ValueTuple`2<T, int> <SortByConfiguration>b__103_0(T attr);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Mapping.MappingSchemaInfo : object {
    public string Configuration;
    [NullableAttribute("2")]
private MetadataReader _metadataReader;
    private object _syncRoot;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _defaultValues;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _canBeNull;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _genericConvertProviders;
    [NullableAttribute("2")]
private ConvertInfo _convertInfo;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ConcurrentDictionary`2<object, Func`2<object, object>> _converters;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _scalarTypes;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _dataTypes;
    [NullableAttribute("2")]
private StringComparer _columnNameComparer;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _defaultFromEnumTypes;
    private Nullable`1<int> _configurationID;
    [NullableAttribute("2")]
public MetadataReader MetadataReader { get; public set; }
    public ConcurrentDictionary`2<object, Func`2<object, object>> Converters { get; }
    [NullableAttribute("2")]
public StringComparer ColumnNameComparer { get; public set; }
    internal bool HasConfigurationID { get; }
    public int ConfigurationID { get; internal set; }
    public bool IsLocked { get; }
    public MappingSchemaInfo(string configuration);
    [NullableContextAttribute("2")]
public MetadataReader get_MetadataReader();
    [NullableContextAttribute("2")]
public void set_MetadataReader(MetadataReader value);
    public Option`1<object> GetDefaultValue(Type type);
    public void SetDefaultValue(Type type, object value, bool resetId);
    [NullableContextAttribute("0")]
public Option`1<bool> GetCanBeNull(Type type);
    public void SetCanBeNull(Type type, bool value, bool resetId);
    public bool InitGenericConvertProvider(Type[] types, MappingSchema mappingSchema);
    public void SetGenericConvertProvider(Type type);
    public void SetConvertInfo(DbDataType from, DbDataType to, ConversionType conversionType, LambdaInfo expr, bool resetId);
    public void SetConvertInfo(Type from, Type to, ConversionType conversionType, LambdaInfo expr);
    [NullableContextAttribute("2")]
public LambdaInfo GetConvertInfo(DbDataType from, DbDataType to, ConversionType conversionType);
    public ConcurrentDictionary`2<object, Func`2<object, object>> get_Converters();
    [NullableContextAttribute("0")]
public Option`1<bool> GetScalarType(Type type);
    public void SetScalarType(Type type, bool isScalarType);
    public Option`1<SqlDataType> GetDataType(Type type);
    public void SetDataType(Type type, DataType dataType);
    public void SetDataType(Type type, SqlDataType dataType);
    [NullableContextAttribute("2")]
public StringComparer get_ColumnNameComparer();
    [NullableContextAttribute("2")]
public void set_ColumnNameComparer(StringComparer value);
    public Type GetDefaultFromEnumType(Type enumType);
    public void SetDefaultFromEnumType(Type enumType, Type defaultFromType);
    public IEnumerable`1<Type> GetRegisteredTypes();
    internal bool get_HasConfigurationID();
    public virtual void ResetID();
    public sealed virtual int get_ConfigurationID();
    internal void set_ConfigurationID(int value);
    protected virtual int GenerateID();
    public virtual bool get_IsLocked();
    [CompilerGeneratedAttribute]
internal static void <GenerateID>g__ProcessDictionary|45_0(ConcurrentDictionary`2<Type, T> dic, <>c__DisplayClass45_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.Mapping.MapValue : object {
    [CompilerGeneratedAttribute]
private object <OrigValue>k__BackingField;
    [CompilerGeneratedAttribute]
private MapValueAttribute[] <MapValues>k__BackingField;
    public object OrigValue { get; private set; }
    public MapValueAttribute[] MapValues { get; private set; }
    public MapValue(object origValue, MapValueAttribute[] mapValues);
    [CompilerGeneratedAttribute]
public object get_OrigValue();
    [CompilerGeneratedAttribute]
private void set_OrigValue(object value);
    [CompilerGeneratedAttribute]
public MapValueAttribute[] get_MapValues();
    [CompilerGeneratedAttribute]
private void set_MapValues(MapValueAttribute[] value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("256")]
public class LinqToDB.Mapping.MapValueAttribute : MappingAttribute {
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDefault>k__BackingField;
    public object Value { get; public set; }
    public bool IsDefault { get; public set; }
    public MapValueAttribute(object value);
    [NullableContextAttribute("1")]
public MapValueAttribute(string configuration, object value);
    [NullableContextAttribute("1")]
public MapValueAttribute(object value, bool isDefault);
    [NullableContextAttribute("1")]
public MapValueAttribute(string configuration, object value, bool isDefault);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
    [CompilerGeneratedAttribute]
public bool get_IsDefault();
    [CompilerGeneratedAttribute]
public void set_IsDefault(bool value);
    [NullableContextAttribute("1")]
public virtual string GetObjectID();
}
[AttributeUsageAttribute("384")]
public class LinqToDB.Mapping.NotColumnAttribute : ColumnAttribute {
}
[AttributeUsageAttribute("384")]
public class LinqToDB.Mapping.NotNullAttribute : NullableAttribute {
    [NullableContextAttribute("1")]
public NotNullAttribute(string configuration);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class LinqToDB.Mapping.Nullability : object {
    private static Lazy`1<bool> _isSupported;
    private static Nullability();
    public static void EnsureSupport();
    public static bool TryAnalyzeMember(MemberInfo member, Boolean& isNullable);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("384")]
public class LinqToDB.Mapping.NullableAttribute : MappingAttribute {
    [CompilerGeneratedAttribute]
private bool <CanBeNull>k__BackingField;
    public bool CanBeNull { get; public set; }
    public NullableAttribute(bool isNullable);
    public NullableAttribute(string configuration, bool isNullable);
    [CompilerGeneratedAttribute]
public bool get_CanBeNull();
    [CompilerGeneratedAttribute]
public void set_CanBeNull(bool value);
    public virtual string GetObjectID();
}
[AttributeUsageAttribute("384")]
public class LinqToDB.Mapping.PrimaryKeyAttribute : MappingAttribute {
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    public int Order { get; public set; }
    public PrimaryKeyAttribute(int order);
    [NullableContextAttribute("2")]
public PrimaryKeyAttribute(string configuration, int order);
    [CompilerGeneratedAttribute]
public int get_Order();
    [CompilerGeneratedAttribute]
public void set_Order(int value);
    [NullableContextAttribute("1")]
public virtual string GetObjectID();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.Mapping.PropertyMappingBuilder`2 : object {
    private Expression`1<Func`2<TEntity, TProperty>> _memberGetter;
    private MemberInfo _memberInfo;
    private EntityMappingBuilder`1<TEntity> _entity;
    public PropertyMappingBuilder`2(EntityMappingBuilder`1<TEntity> entity, Expression`1<Func`2<TEntity, TProperty>> memberGetter);
    public PropertyMappingBuilder`2<TEntity, TProperty> HasAttribute(MappingAttribute attribute);
    [NullableContextAttribute("2")]
public EntityMappingBuilder`1<TE> Entity(string configuration);
    public PropertyMappingBuilder`2<TEntity, TMember> Property(Expression`1<Func`2<TEntity, TMember>> func);
    public PropertyMappingBuilder`2<TEntity, TMember> Member(Expression`1<Func`2<TEntity, TMember>> func);
    public PropertyMappingBuilder`2<TEntity, TOther> Association(Expression`1<Func`2<TEntity, TOther>> prop, Expression`1<Func`2<TEntity, TThisKey>> thisKey, Expression`1<Func`2<TOther, TOtherKey>> otherKey, Nullable`1<bool> canBeNull);
    public PropertyMappingBuilder`2<TEntity, IEnumerable`1<TPropElement>> Association(Expression`1<Func`2<TEntity, IEnumerable`1<TPropElement>>> prop, Expression`1<Func`2<TEntity, TThisKey>> thisKey, Expression`1<Func`2<TPropElement, TOtherKey>> otherKey, Nullable`1<bool> canBeNull);
    public PropertyMappingBuilder`2<TEntity, IEnumerable`1<TOther>> Association(Expression`1<Func`2<TEntity, IEnumerable`1<TOther>>> prop, Expression`1<Func`3<TEntity, TOther, bool>> predicate, Nullable`1<bool> canBeNull);
    public PropertyMappingBuilder`2<TEntity, TOther> Association(Expression`1<Func`2<TEntity, TOther>> prop, Expression`1<Func`3<TEntity, TOther, bool>> predicate, Nullable`1<bool> canBeNull);
    public PropertyMappingBuilder`2<TEntity, IEnumerable`1<TOther>> Association(Expression`1<Func`2<TEntity, IEnumerable`1<TOther>>> prop, Expression`1<Func`3<TEntity, IDataContext, IQueryable`1<TOther>>> queryExpression, Nullable`1<bool> canBeNull);
    public PropertyMappingBuilder`2<TEntity, TOther> Association(Expression`1<Func`2<TEntity, TOther>> prop, Expression`1<Func`3<TEntity, IDataContext, IQueryable`1<TOther>>> queryExpression, Nullable`1<bool> canBeNull);
    public PropertyMappingBuilder`2<TEntity, TProperty> IsPrimaryKey(int order);
    public PropertyMappingBuilder`2<TEntity, TProperty> IsIdentity();
    private PropertyMappingBuilder`2<TEntity, TProperty> SetColumn(Action`1<ColumnAttribute> setColumn);
    public PropertyMappingBuilder`2<TEntity, TProperty> HasColumnName(string columnName);
    public PropertyMappingBuilder`2<TEntity, TProperty> HasDataType(DataType dataType);
    public PropertyMappingBuilder`2<TEntity, TProperty> HasDbType(string dbType);
    public PropertyMappingBuilder`2<TEntity, TProperty> HasCreateFormat(string format);
    public PropertyMappingBuilder`2<TEntity, TProperty> HasStorage(string storage);
    public PropertyMappingBuilder`2<TEntity, TProperty> IsDiscriminator(bool isDiscriminator);
    public PropertyMappingBuilder`2<TEntity, TProperty> SkipOnEntityFetch(bool skipOnEntityFetch);
    public PropertyMappingBuilder`2<TEntity, TProperty> HasSkipOnInsert(bool skipOnInsert);
    public PropertyMappingBuilder`2<TEntity, TProperty> HasSkipOnUpdate(bool skipOnUpdate);
    public PropertyMappingBuilder`2<TEntity, TProperty> IsNullable(bool isNullable);
    public PropertyMappingBuilder`2<TEntity, TProperty> IsNotNull();
    public PropertyMappingBuilder`2<TEntity, TProperty> IsNotColumn();
    public PropertyMappingBuilder`2<TEntity, TProperty> IsColumn();
    public PropertyMappingBuilder`2<TEntity, TProperty> HasLength(int length);
    public PropertyMappingBuilder`2<TEntity, TProperty> HasPrecision(int precision);
    public PropertyMappingBuilder`2<TEntity, TProperty> HasScale(int scale);
    public PropertyMappingBuilder`2<TEntity, TProperty> HasOrder(int order);
    public PropertyMappingBuilder`2<TEntity, TProperty> IsAlias(Expression`1<Func`2<TEntity, object>> aliasMember);
    public PropertyMappingBuilder`2<TEntity, TProperty> IsAlias(string aliasMember);
    public PropertyMappingBuilder`2<TEntity, TProperty> IsExpression(Expression`1<Func`2<TEntity, TR>> expression, bool isColumn, string alias);
    public PropertyMappingBuilder`2<TEntity, TProperty> HasConversionFunc(Func`2<TProperty, TProvider> toProvider, Func`2<TProvider, TProperty> toModel, bool handlesNulls);
    public PropertyMappingBuilder`2<TEntity, TProperty> HasConversion(Expression`1<Func`2<TProperty, TProvider>> toProvider, Expression`1<Func`2<TProvider, TProperty>> toModel, bool handlesNulls);
    public PropertyMappingBuilder`2<TEntity, TProperty> UseSequence(string sequenceName, string schema, string configuration);
    public FluentMappingBuilder Build();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("1028")]
public class LinqToDB.Mapping.QueryFilterAttribute : MappingAttribute {
    [CompilerGeneratedAttribute]
private Delegate <FilterFunc>k__BackingField;
    public Delegate FilterFunc { get; public set; }
    [CompilerGeneratedAttribute]
public Delegate get_FilterFunc();
    [CompilerGeneratedAttribute]
public void set_FilterFunc(Delegate value);
    [NullableContextAttribute("1")]
public virtual string GetObjectID();
}
[AttributeUsageAttribute("128")]
public class LinqToDB.Mapping.ResultSetIndexAttribute : Attribute {
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    public int Index { get; }
    public ResultSetIndexAttribute(int index);
    [CompilerGeneratedAttribute]
public int get_Index();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("12")]
public class LinqToDB.Mapping.ScalarTypeAttribute : MappingAttribute {
    [CompilerGeneratedAttribute]
private bool <IsScalar>k__BackingField;
    public bool IsScalar { get; public set; }
    public ScalarTypeAttribute(bool isScalar);
    public ScalarTypeAttribute(string configuration);
    public ScalarTypeAttribute(string configuration, bool isScalar);
    [CompilerGeneratedAttribute]
public bool get_IsScalar();
    [CompilerGeneratedAttribute]
public void set_IsScalar(bool value);
    public virtual string GetObjectID();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("384")]
public class LinqToDB.Mapping.SequenceNameAttribute : MappingAttribute {
    [CompilerGeneratedAttribute]
private string <SequenceName>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    public string SequenceName { get; public set; }
    [NullableAttribute("2")]
public string Schema { get; public set; }
    public SequenceNameAttribute(string configuration, string sequenceName);
    public SequenceNameAttribute(string sequenceName);
    [CompilerGeneratedAttribute]
public string get_SequenceName();
    [CompilerGeneratedAttribute]
public void set_SequenceName(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Schema();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Schema(string value);
    public virtual string GetObjectID();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("384")]
public abstract class LinqToDB.Mapping.SkipBaseAttribute : MappingAttribute {
    public SkipModification Affects { get; }
    public abstract virtual bool ShouldSkip(object obj, EntityDescriptor entityDescriptor, ColumnDescriptor columnDescriptor);
    public abstract virtual SkipModification get_Affects();
    public virtual string GetObjectID();
}
[FlagsAttribute]
public enum LinqToDB.Mapping.SkipModification : Enum {
    public int value__;
    public static SkipModification None;
    public static SkipModification Insert;
    public static SkipModification Update;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CLSCompliantAttribute("False")]
public abstract class LinqToDB.Mapping.SkipValuesByListAttribute : SkipBaseAttribute {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private HashSet`1<object> <Values>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
protected HashSet`1<object> Values { get; protected set; }
    protected SkipValuesByListAttribute(IEnumerable`1<object> values);
    [CompilerGeneratedAttribute]
protected HashSet`1<object> get_Values();
    [CompilerGeneratedAttribute]
protected void set_Values(HashSet`1<object> value);
    public virtual bool ShouldSkip(object obj, EntityDescriptor entityDescriptor, ColumnDescriptor columnDescriptor);
    public virtual string GetObjectID();
}
[CLSCompliantAttribute("False")]
public class LinqToDB.Mapping.SkipValuesOnInsertAttribute : SkipValuesByListAttribute {
    public SkipModification Affects { get; }
    [NullableContextAttribute("2")]
public SkipValuesOnInsertAttribute(Object[] values);
    public virtual SkipModification get_Affects();
}
[CLSCompliantAttribute("False")]
public class LinqToDB.Mapping.SkipValuesOnUpdateAttribute : SkipValuesByListAttribute {
    public SkipModification Affects { get; }
    [NullableContextAttribute("2")]
public SkipValuesOnUpdateAttribute(Object[] values);
    public virtual SkipModification get_Affects();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("1028")]
public class LinqToDB.Mapping.TableAttribute : MappingAttribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Database>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Server>k__BackingField;
    [CompilerGeneratedAttribute]
private TableOptions <TableOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsColumnAttributeRequired>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsView>k__BackingField;
    public string Name { get; public set; }
    public string Schema { get; public set; }
    public string Database { get; public set; }
    public string Server { get; public set; }
    public bool IsTemporary { get; public set; }
    public TableOptions TableOptions { get; public set; }
    public bool IsColumnAttributeRequired { get; public set; }
    public bool IsView { get; public set; }
    [NullableContextAttribute("1")]
public TableAttribute(string tableName);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Schema();
    [CompilerGeneratedAttribute]
public void set_Schema(string value);
    [CompilerGeneratedAttribute]
public string get_Database();
    [CompilerGeneratedAttribute]
public void set_Database(string value);
    [CompilerGeneratedAttribute]
public string get_Server();
    [CompilerGeneratedAttribute]
public void set_Server(string value);
    public bool get_IsTemporary();
    public void set_IsTemporary(bool value);
    [CompilerGeneratedAttribute]
public TableOptions get_TableOptions();
    [CompilerGeneratedAttribute]
public void set_TableOptions(TableOptions value);
    [CompilerGeneratedAttribute]
public bool get_IsColumnAttributeRequired();
    [CompilerGeneratedAttribute]
public void set_IsColumnAttributeRequired(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsView();
    [CompilerGeneratedAttribute]
public void set_IsView(bool value);
    [NullableContextAttribute("1")]
public virtual string GetObjectID();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("384")]
public class LinqToDB.Mapping.ValueConverterAttribute : MappingAttribute {
    [CompilerGeneratedAttribute]
private IValueConverter <ValueConverter>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ConverterType>k__BackingField;
    public IValueConverter ValueConverter { get; public set; }
    public Type ConverterType { get; public set; }
    [CompilerGeneratedAttribute]
public IValueConverter get_ValueConverter();
    [CompilerGeneratedAttribute]
public void set_ValueConverter(IValueConverter value);
    [NullableContextAttribute("1")]
public virtual IValueConverter GetValueConverter(ColumnDescriptor columnDescriptor);
    [CompilerGeneratedAttribute]
public Type get_ConverterType();
    [CompilerGeneratedAttribute]
public void set_ConverterType(Type value);
    [NullableContextAttribute("1")]
public virtual string GetObjectID();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.MergeDefinition`2 : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IEnumerable`1<TSource> <EnumerableSource>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Expression`1<Func`3<TTarget, TSource, bool>> <MatchPredicate>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Operation[] <Operations>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IQueryable`1<TSource> <QueryableSource>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Hint>k__BackingField;
    [CompilerGeneratedAttribute]
private ITable`1<TTarget> <Target>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Expression <TargetKey>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Expression <SourceKey>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Type <KeyType>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<TSource> EnumerableSource { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Expression`1<Func`3<TTarget, TSource, bool>> MatchPredicate { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Operation[] Operations { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IQueryable`1<TSource> QueryableSource { get; }
    [NullableAttribute("2")]
public string Hint { get; }
    public ITable`1<TTarget> Target { get; }
    [NullableAttribute("2")]
public Expression TargetKey { get; }
    [NullableAttribute("2")]
public Expression SourceKey { get; }
    [NullableAttribute("2")]
public Type KeyType { get; }
    public MergeDefinition`2(ITable`1<TTarget> target);
    public MergeDefinition`2(ITable`1<TTarget> target, string hint);
    public MergeDefinition`2(ITable`1<TTarget> target, IQueryable`1<TSource> source);
    public MergeDefinition`2(ITable`1<TTarget> target, IQueryable`1<TSource> source, string hint);
    [NullableContextAttribute("2")]
private MergeDefinition`2(ITable`1<TTarget> target, string hint, IEnumerable`1<TSource> enumerableSource, IQueryable`1<TSource> queryableSource, Expression`1<Func`3<TTarget, TSource, bool>> matchPredicate, Expression targetKey, Expression sourceKey, Type keyType, Operation[] operations);
    [CompilerGeneratedAttribute]
public IEnumerable`1<TSource> get_EnumerableSource();
    [CompilerGeneratedAttribute]
public Expression`1<Func`3<TTarget, TSource, bool>> get_MatchPredicate();
    [CompilerGeneratedAttribute]
public Operation[] get_Operations();
    [CompilerGeneratedAttribute]
public IQueryable`1<TSource> get_QueryableSource();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Hint();
    [CompilerGeneratedAttribute]
public ITable`1<TTarget> get_Target();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Expression get_TargetKey();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Expression get_SourceKey();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Type get_KeyType();
    public MergeDefinition`2<TTarget, TNewSource> AddSource(IQueryable`1<TNewSource> source);
    public MergeDefinition`2<TTarget, TNewSource> AddSource(IEnumerable`1<TNewSource> source);
    public MergeDefinition`2<TTarget, TSource> AddOperation(Operation<TTarget, TSource> operation);
    public MergeDefinition`2<TTarget, TSource> AddOnPredicate(Expression`1<Func`3<TTarget, TSource, bool>> matchPredicate);
    public MergeDefinition`2<TTarget, TSource> AddOnKey(Expression`1<Func`2<TTarget, TKey>> targetKey, Expression`1<Func`2<TSource, TKey>> sourceKey);
}
public enum LinqToDB.MergeOperationType : Enum {
    public int value__;
    public static MergeOperationType Insert;
    public static MergeOperationType Update;
    public static MergeOperationType Delete;
    public static MergeOperationType UpdateWithDelete;
    public static MergeOperationType UpdateBySource;
    public static MergeOperationType DeleteBySource;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Metadata.AttributeInfo : object {
    public Type Type;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Dictionary`2<string, object> Values;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`1<MappingAttribute> _func;
    public AttributeInfo(Type type, Dictionary`2<string, object> values);
    public MappingAttribute MakeAttribute();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private MemberAssignment <MakeAttribute>b__4_1(KeyValuePair`2<string, object> k);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.Metadata.AttributeReader : object {
    private static MappingAttributesCache _cache;
    private static AttributeReader();
    public sealed virtual MappingAttribute[] GetAttributes(Type type);
    public sealed virtual MappingAttribute[] GetAttributes(Type type, MemberInfo memberInfo);
    public sealed virtual MemberInfo[] GetDynamicColumns(Type type);
    public sealed virtual string GetObjectID();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.Metadata.FluentMetadataReader : object {
    private string _objectId;
    private ConcurrentDictionary`2<Type, MappingAttribute[]> _types;
    private ConcurrentDictionary`2<MemberInfo, MappingAttribute[]> _members;
    private ConcurrentDictionary`2<Type, MemberInfo[]> _dynamicColumns;
    private MappingAttributesCache _cache;
    public FluentMetadataReader(IReadOnlyDictionary`2<Type, List`1<MappingAttribute>> typeAttributes, IReadOnlyDictionary`2<MemberInfo, List`1<MappingAttribute>> memberAttributes, IReadOnlyList`1<MemberInfo> orderedMembers);
    private MappingAttribute[] GetAllAttributes(Type sourceType, ICustomAttributeProvider attributeProvider);
    public sealed virtual MappingAttribute[] GetAttributes(Type type);
    public sealed virtual MappingAttribute[] GetAttributes(Type type, MemberInfo memberInfo);
    public sealed virtual MemberInfo[] GetDynamicColumns(Type type);
    public IEnumerable`1<Type> GetRegisteredTypes();
    public sealed virtual string GetObjectID();
    private string CalculateObjectID();
}
[NullableContextAttribute("1")]
public interface LinqToDB.Metadata.IMetadataReader {
    public abstract virtual MappingAttribute[] GetAttributes(Type type);
    public abstract virtual MappingAttribute[] GetAttributes(Type type, MemberInfo memberInfo);
    public abstract virtual MemberInfo[] GetDynamicColumns(Type type);
    public abstract virtual string GetObjectID();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Metadata.MappingAttributesCache : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<CacheKey, MappingAttribute[]> _getMappingAttributesInternal;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ConcurrentDictionary`2<CacheKey, MappingAttribute[]> _cache;
    private ConcurrentDictionary`2<Key, MappingAttribute[]> _noInheritMappingAttributes;
    private ConcurrentDictionary`2<Key, MappingAttribute[]> _orderedInheritMappingAttributes;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`3<Type, ICustomAttributeProvider, MappingAttribute[]> _attributesGetter;
    private Func`2<Key, MappingAttribute[]> _getMappingAttributesTreeInternal;
    public MappingAttributesCache(Func`3<Type, ICustomAttributeProvider, MappingAttribute[]> attributesGetter);
    private MappingAttribute[] GetMappingAttributesInternal(CacheKey key);
    private MappingAttribute[] GetNoInheritMappingAttributes(Key key);
    private MappingAttribute[] GetMappingAttributesTreeInternal(Key key);
    public T[] GetMappingAttributes(ICustomAttributeProvider source);
    public T[] GetMappingAttributes(Type sourceOwner, ICustomAttributeProvider source);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.Metadata.MetadataException : Exception {
    public MetadataException(string message);
    public MetadataException(string message, Exception innerException);
    public MetadataException(Exception innerException);
    protected MetadataException(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.Metadata.MetadataReader : object {
    public static MetadataReader Default;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Type[] _registeredTypes;
    private MappingAttributesCache _cache;
    private string _objectId;
    private ConcurrentDictionary`2<Type, MemberInfo[]> _dynamicColumns;
    private object _syncRoot;
    private IMetadataReader[] _readers;
    public IReadOnlyList`1<IMetadataReader> Readers { get; }
    public MetadataReader(IMetadataReader[] readers);
    private static MetadataReader();
    public IReadOnlyList`1<IMetadataReader> get_Readers();
    internal T[] GetAttributes(Type type);
    internal T[] GetAttributes(Type type, MemberInfo memberInfo);
    private sealed virtual override MappingAttribute[] LinqToDB.Metadata.IMetadataReader.GetAttributes(Type type);
    private sealed virtual override MappingAttribute[] LinqToDB.Metadata.IMetadataReader.GetAttributes(Type type, MemberInfo memberInfo);
    public sealed virtual MemberInfo[] GetDynamicColumns(Type type);
    public IReadOnlyList`1<Type> GetRegisteredTypes();
    public sealed virtual string GetObjectID();
    [CompilerGeneratedAttribute]
private MappingAttribute[] <.ctor>b__9_1(Type type, ICustomAttributeProvider source);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Metadata.MetaMemberInfo : object {
    public string Name;
    public AttributeInfo[] Attributes;
    public MetaMemberInfo(string name, AttributeInfo[] attributes);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Metadata.MetaTypeInfo : object {
    public string Name;
    public Dictionary`2<string, MetaMemberInfo> Members;
    public AttributeInfo[] Attributes;
    public MetaTypeInfo(string name, Dictionary`2<string, MetaMemberInfo> members, AttributeInfo[] attributes);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.Metadata.SystemComponentModelDataAnnotationsSchemaAttributeReader : object {
    public sealed virtual MappingAttribute[] GetAttributes(Type type);
    public sealed virtual MappingAttribute[] GetAttributes(Type type, MemberInfo memberInfo);
    public sealed virtual MemberInfo[] GetDynamicColumns(Type type);
    public sealed virtual string GetObjectID();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.Metadata.SystemDataSqlServerAttributeReader : object {
    [NullableAttribute("2")]
public static IMetadataReader SystemDataSqlClientProvider;
    [NullableAttribute("2")]
public static IMetadataReader MicrosoftDataSqlClientProvider;
    [NullableAttribute("2")]
public static IMetadataReader MicrosoftSqlServerServerProvider;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ConcurrentDictionary`2<ValueTuple`2<MemberInfo, Type>, MappingAttribute[]> _cache;
    private Type _sqlMethodAttribute;
    private Type _sqlUserDefinedTypeAttribute;
    private string _objectId;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<object, string> _methodNameGetter;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<object, string> _typeNameGetter;
    public SystemDataSqlServerAttributeReader(Type sqlMethodAttribute, Type sqlUserDefinedTypeAttribute);
    private static SystemDataSqlServerAttributeReader();
    private static SystemDataSqlServerAttributeReader TryCreate(string sqlMethodAttributeType, string sqlUserDefinedTypeAttributeType);
    public sealed virtual MappingAttribute[] GetAttributes(Type type);
    public sealed virtual MappingAttribute[] GetAttributes(Type type, MemberInfo memberInfo);
    private static Attribute FindAttribute(ICustomAttributeProvider source, Type attributeType);
    public sealed virtual MemberInfo[] GetDynamicColumns(Type type);
    public sealed virtual string GetObjectID();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.Metadata.XmlAttributeReader : object {
    private string _objectId;
    private Dictionary`2<string, MetaTypeInfo> _types;
    private static IReadOnlyDictionary`2<string, Type> _mappingAttributes;
    private static XmlAttributeReader();
    public XmlAttributeReader(string xmlFile);
    public XmlAttributeReader(string xmlFile, Assembly assembly);
    public XmlAttributeReader(Stream xmlDocStream);
    private static AttributeInfo[] GetAttrs(string fileName, XElement el, string exclude, string typeName, string memberName);
    private static Dictionary`2<string, MetaTypeInfo> LoadStream(Stream xmlDocStream, string fileName);
    public sealed virtual MappingAttribute[] GetAttributes(Type type);
    public sealed virtual MappingAttribute[] GetAttributes(Type type, MemberInfo memberInfo);
    public sealed virtual MemberInfo[] GetDynamicColumns(Type type);
    public sealed virtual string GetObjectID();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class LinqToDB.MultiInsertExtensions : object {
    [ExtensionAttribute]
[PureAttribute]
[LinqTunnelAttribute]
public static IMultiInsertSource`1<TSource> MultiInsert(IQueryable`1<TSource> source);
    [ExtensionAttribute]
[PureAttribute]
[LinqTunnelAttribute]
public static IMultiInsertInto`1<TSource> Into(IMultiInsertInto`1<TSource> source, ITable`1<TTarget> target, Expression`1<Func`2<TSource, TTarget>> setter);
    [ExtensionAttribute]
[PureAttribute]
[LinqTunnelAttribute]
public static IMultiInsertWhen`1<TSource> When(IMultiInsertWhen`1<TSource> source, Expression`1<Func`2<TSource, bool>> condition, ITable`1<TTarget> target, Expression`1<Func`2<TSource, TTarget>> setter);
    [ExtensionAttribute]
[PureAttribute]
[LinqTunnelAttribute]
public static IMultiInsertElse`1<TSource> Else(IMultiInsertWhen`1<TSource> source, ITable`1<TTarget> target, Expression`1<Func`2<TSource, TTarget>> setter);
    [ExtensionAttribute]
public static int Insert(IMultiInsertInto`1<TSource> insert);
    [ExtensionAttribute]
public static Task`1<int> InsertAsync(IMultiInsertInto`1<TSource> insert, CancellationToken token);
    [ExtensionAttribute]
public static int InsertAll(IMultiInsertElse`1<TSource> insert);
    [ExtensionAttribute]
public static Task`1<int> InsertAllAsync(IMultiInsertElse`1<TSource> insert, CancellationToken token);
    [ExtensionAttribute]
public static int InsertFirst(IMultiInsertElse`1<TSource> insert);
    [ExtensionAttribute]
public static Task`1<int> InsertFirstAsync(IMultiInsertElse`1<TSource> insert, CancellationToken token);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PublicAPIAttribute]
public static class LinqToDB.ProviderName : object {
    public static string Access;
    public static string AccessOdbc;
    public static string DB2;
    public static string DB2LUW;
    public static string DB2zOS;
    public static string Firebird;
    public static string Informix;
    public static string InformixDB2;
    public static string SqlServer;
    public static string SqlServer2005;
    public static string SqlServer2008;
    public static string SqlServer2012;
    public static string SqlServer2014;
    public static string SqlServer2016;
    public static string SqlServer2017;
    public static string SqlServer2019;
    public static string SqlServer2022;
    public static string MySql;
    public static string MySqlOfficial;
    public static string MySqlConnector;
    public static string MariaDB;
    public static string Oracle;
    public static string Oracle11Native;
    public static string Oracle11Devart;
    public static string Oracle11Managed;
    public static string OracleNative;
    public static string OracleManaged;
    public static string OracleDevart;
    public static string PostgreSQL;
    public static string PostgreSQL92;
    public static string PostgreSQL93;
    public static string PostgreSQL95;
    public static string PostgreSQL15;
    public static string SqlCe;
    public static string SQLite;
    public static string SQLiteClassic;
    public static string SQLiteMS;
    public static string Sybase;
    public static string SybaseManaged;
    public static string SapHana;
    public static string SapHanaNative;
    public static string SapHanaOdbc;
    public static string ClickHouse;
    public static string ClickHouseOctonica;
    public static string ClickHouseClient;
    public static string ClickHouseMySql;
}
[NullableContextAttribute("1")]
public interface LinqToDB.Reflection.IObjectFactory {
    public abstract virtual object CreateInstance(TypeAccessor typeAccessor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.Reflection.MemberAccessor : object {
    private static ConstructorInfo ArgumentExceptionConstructorInfo;
    private static MethodInfo _throwOnDynamicStoreMissingMethod;
    [CompilerGeneratedAttribute]
private MemberInfo <MemberInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeAccessor <TypeAccessor>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasGetter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasSetter>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsComplex>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<Func`2<object, object>> _getter;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<Action`2<object, object>> _setter;
    private Expression _getterExpression;
    private ParameterExpression[] _getterArguments;
    private Expression _setterExpression;
    private ParameterExpression[] _setterArguments;
    public MemberInfo MemberInfo { get; private set; }
    public TypeAccessor TypeAccessor { get; private set; }
    public bool HasGetter { get; private set; }
    public bool HasSetter { get; private set; }
    public Type Type { get; private set; }
    public bool IsComplex { get; private set; }
    public string Name { get; }
    [ObsoleteAttribute("Use GetGetterExpression method instead")]
public LambdaExpression GetterExpression { get; }
    [ObsoleteAttribute("Use GetSetterExpression method instead")]
public LambdaExpression SetterExpression { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ObsoleteAttribute("Use GetValue method instead")]
public Func`2<object, object> Getter { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ObsoleteAttribute("Use SetValue method instead")]
public Action`2<object, object> Setter { get; }
    internal MemberAccessor(TypeAccessor typeAccessor, string memberName, EntityDescriptor ed);
    public MemberAccessor(TypeAccessor typeAccessor, MemberInfo memberInfo, EntityDescriptor ed);
    private static MemberAccessor();
    [MemberNotNullAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private void SetSimple(MemberInfo memberInfo, EntityDescriptor ed);
    private void SetExpressions();
    private static T ThrowOnDynamicStoreMissing();
    [CompilerGeneratedAttribute]
public MemberInfo get_MemberInfo();
    [CompilerGeneratedAttribute]
private void set_MemberInfo(MemberInfo value);
    [CompilerGeneratedAttribute]
public TypeAccessor get_TypeAccessor();
    [CompilerGeneratedAttribute]
private void set_TypeAccessor(TypeAccessor value);
    [CompilerGeneratedAttribute]
public bool get_HasGetter();
    [CompilerGeneratedAttribute]
private void set_HasGetter(bool value);
    [CompilerGeneratedAttribute]
public bool get_HasSetter();
    [CompilerGeneratedAttribute]
private void set_HasSetter(bool value);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(Type value);
    [CompilerGeneratedAttribute]
public bool get_IsComplex();
    [CompilerGeneratedAttribute]
private void set_IsComplex(bool value);
    public string get_Name();
    public LambdaExpression get_GetterExpression();
    public LambdaExpression get_SetterExpression();
    public Func`2<object, object> get_Getter();
    public Action`2<object, object> get_Setter();
    public Expression GetGetterExpression(Expression instance);
    public Expression GetSetterExpression(Expression instance, Expression value);
    public virtual object GetValue(object o);
    public virtual void SetValue(object o, object value);
    [CompilerGeneratedAttribute]
private Func`2<object, object> <SetExpressions>b__4_0();
    [CompilerGeneratedAttribute]
private Action`2<object, object> <SetExpressions>b__4_1();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class LinqToDB.Reflection.Methods : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("1028")]
public class LinqToDB.Reflection.ObjectFactoryAttribute : Attribute {
    [CompilerGeneratedAttribute]
private IObjectFactory <ObjectFactory>k__BackingField;
    public IObjectFactory ObjectFactory { get; }
    public ObjectFactoryAttribute(Type type);
    [CompilerGeneratedAttribute]
public IObjectFactory get_ObjectFactory();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
[DebuggerDisplayAttribute("Type = {Type}")]
public abstract class LinqToDB.Reflection.TypeAccessor : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IObjectFactory <ObjectFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<MemberAccessor> <Members>k__BackingField;
    private ConcurrentDictionary`2<string, MemberAccessor> _membersByName;
    private static ConcurrentDictionary`2<Type, TypeAccessor> _accessors;
    [NullableAttribute("2")]
public IObjectFactory ObjectFactory { get; public set; }
    public Type Type { get; }
    public List`1<MemberAccessor> Members { get; }
    public MemberAccessor Item { get; }
    public MemberAccessor Item { get; }
    private static TypeAccessor();
    protected void AddMember(MemberAccessor member);
    [DebuggerStepThroughAttribute]
public virtual object CreateInstance();
    [DebuggerStepThroughAttribute]
public object CreateInstanceEx();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IObjectFactory get_ObjectFactory();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ObjectFactory(IObjectFactory value);
    public abstract virtual Type get_Type();
    [CompilerGeneratedAttribute]
public List`1<MemberAccessor> get_Members();
    public MemberAccessor get_Item(string memberName);
    public MemberAccessor get_Item(int index);
    public static TypeAccessor GetAccessor(Type type);
    public static TypeAccessor`1<T> GetAccessor();
    [CompilerGeneratedAttribute]
private MemberAccessor <get_Item>b__14_0(string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.Reflection.TypeAccessor`1 : TypeAccessor {
    private static List`1<MemberInfo> _members;
    [NullableAttribute("2")]
private static IObjectFactory _objectFactory;
    private static Func`1<T> _createInstance;
    public Type Type { get; }
    private static TypeAccessor`1();
    private static T ThrowException();
    private static T ThrowAbstractException();
    public virtual object CreateInstance();
    public T Create();
    public virtual Type get_Type();
    [CompilerGeneratedAttribute]
internal static bool <.cctor>g__RemoveAll|0_1(HashSet`1<MethodInfo> unmappedAccessors, List`1<MethodInfo> ifaceAccessors);
}
[NullableContextAttribute("1")]
public interface LinqToDB.Remote.ILinqService {
    public abstract virtual LinqServiceInfo GetInfo(string configuration);
    public abstract virtual int ExecuteNonQuery(string configuration, string queryData);
    [NullableContextAttribute("2")]
public abstract virtual string ExecuteScalar(string configuration, string queryData);
    public abstract virtual string ExecuteReader(string configuration, string queryData);
    public abstract virtual int ExecuteBatch(string configuration, string queryData);
    public abstract virtual Task`1<LinqServiceInfo> GetInfoAsync(string configuration, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> ExecuteNonQueryAsync(string configuration, string queryData, CancellationToken cancellationToken);
    public abstract virtual Task`1<string> ExecuteScalarAsync(string configuration, string queryData, CancellationToken cancellationToken);
    public abstract virtual Task`1<string> ExecuteReaderAsync(string configuration, string queryData, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> ExecuteBatchAsync(string configuration, string queryData, CancellationToken cancellationToken);
}
internal interface LinqToDB.Remote.IQueryExtendible {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<SqlQueryExtension> SqlQueryExtensions { get; public set; }
    public abstract virtual List`1<SqlQueryExtension> get_SqlQueryExtensions();
    public abstract virtual void set_SqlQueryExtensions(List`1<SqlQueryExtension> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.Remote.LinqService : object {
    [NullableAttribute("2")]
private MappingSchema _serializationMappingSchema;
    [NullableAttribute("2")]
private MappingSchema _mappingSchema;
    [CompilerGeneratedAttribute]
private bool <AllowUpdates>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static Func`2<string, Type> TypeResolver;
    public bool AllowUpdates { get; public set; }
    [NullableAttribute("2")]
public MappingSchema MappingSchema { get; public set; }
    internal MappingSchema SerializationMappingSchema { get; }
    [NullableContextAttribute("2")]
public LinqService(MappingSchema mappingSchema);
    private static LinqService();
    [CompilerGeneratedAttribute]
public bool get_AllowUpdates();
    [CompilerGeneratedAttribute]
public void set_AllowUpdates(bool value);
    [NullableContextAttribute("2")]
public MappingSchema get_MappingSchema();
    [NullableContextAttribute("2")]
public void set_MappingSchema(MappingSchema value);
    internal MappingSchema get_SerializationMappingSchema();
    public virtual DataConnection CreateDataContext(string configuration);
    protected virtual void ValidateQuery(LinqServiceQuery query);
    protected virtual void HandleException(Exception exception);
    public virtual LinqServiceInfo GetInfo(string configuration);
    public virtual Task`1<LinqServiceInfo> GetInfoAsync(string configuration, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("LinqToDB.Remote.LinqService/<ExecuteNonQueryAsync>d__19")]
public sealed virtual Task`1<int> ExecuteNonQueryAsync(string configuration, string queryData, CancellationToken cancellationToken);
    public sealed virtual int ExecuteNonQuery(string configuration, string queryData);
    [AsyncStateMachineAttribute("LinqToDB.Remote.LinqService/<ExecuteScalarAsync>d__21")]
public sealed virtual Task`1<string> ExecuteScalarAsync(string configuration, string queryData, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
public sealed virtual string ExecuteScalar(string configuration, string queryData);
    [NullableContextAttribute("2")]
private string ProcessScalar(object scalar);
    [AsyncStateMachineAttribute("LinqToDB.Remote.LinqService/<ExecuteReaderAsync>d__24")]
public sealed virtual Task`1<string> ExecuteReaderAsync(string configuration, string queryData, CancellationToken cancellationToken);
    public sealed virtual string ExecuteReader(string configuration, string queryData);
    private LinqServiceResult ProcessDataReaderWrapper(LinqServiceQuery query, DataConnection db, DataReaderWrapper rd);
    public sealed virtual int ExecuteBatch(string configuration, string queryData);
    [AsyncStateMachineAttribute("LinqToDB.Remote.LinqService/<ExecuteBatchAsync>d__28")]
public sealed virtual Task`1<int> ExecuteBatchAsync(string configuration, string queryData, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DataContractAttribute]
public class LinqToDB.Remote.LinqServiceInfo : object {
    [CompilerGeneratedAttribute]
private string <MappingSchemaType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SqlBuilderType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SqlOptimizerType>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlProviderFlags <SqlProviderFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private TableOptions <SupportedTableOptions>k__BackingField;
    [DataMemberAttribute]
public string MappingSchemaType { get; public set; }
    [DataMemberAttribute]
public string SqlBuilderType { get; public set; }
    [DataMemberAttribute]
public string SqlOptimizerType { get; public set; }
    [DataMemberAttribute]
public SqlProviderFlags SqlProviderFlags { get; public set; }
    [DataMemberAttribute]
public TableOptions SupportedTableOptions { get; public set; }
    [CompilerGeneratedAttribute]
public string get_MappingSchemaType();
    [CompilerGeneratedAttribute]
public void set_MappingSchemaType(string value);
    [CompilerGeneratedAttribute]
public string get_SqlBuilderType();
    [CompilerGeneratedAttribute]
public void set_SqlBuilderType(string value);
    [CompilerGeneratedAttribute]
public string get_SqlOptimizerType();
    [CompilerGeneratedAttribute]
public void set_SqlOptimizerType(string value);
    [CompilerGeneratedAttribute]
public SqlProviderFlags get_SqlProviderFlags();
    [CompilerGeneratedAttribute]
public void set_SqlProviderFlags(SqlProviderFlags value);
    [CompilerGeneratedAttribute]
public TableOptions get_SupportedTableOptions();
    [CompilerGeneratedAttribute]
public void set_SupportedTableOptions(TableOptions value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.Remote.LinqServiceQuery : object {
    [CompilerGeneratedAttribute]
private SqlStatement <Statement>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IReadOnlyCollection`1<string> <QueryHints>k__BackingField;
    [CompilerGeneratedAttribute]
private DataOptions <DataOptions>k__BackingField;
    public SqlStatement Statement { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyCollection`1<string> QueryHints { get; public set; }
    public DataOptions DataOptions { get; public set; }
    [CompilerGeneratedAttribute]
public SqlStatement get_Statement();
    [CompilerGeneratedAttribute]
public void set_Statement(SqlStatement value);
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<string> get_QueryHints();
    [CompilerGeneratedAttribute]
public void set_QueryHints(IReadOnlyCollection`1<string> value);
    [CompilerGeneratedAttribute]
public DataOptions get_DataOptions();
    [CompilerGeneratedAttribute]
public void set_DataOptions(DataOptions value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.Remote.LinqServiceResult : object {
    [CompilerGeneratedAttribute]
private int <FieldCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RowCount>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <QueryID>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <FieldNames>k__BackingField;
    [CompilerGeneratedAttribute]
private Type[] <FieldTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<String[]> <Data>k__BackingField;
    public int FieldCount { get; public set; }
    public int RowCount { get; public set; }
    public Guid QueryID { get; public set; }
    public String[] FieldNames { get; public set; }
    public Type[] FieldTypes { get; public set; }
    public List`1<String[]> Data { get; public set; }
    [CompilerGeneratedAttribute]
public int get_FieldCount();
    [CompilerGeneratedAttribute]
public void set_FieldCount(int value);
    [CompilerGeneratedAttribute]
public int get_RowCount();
    [CompilerGeneratedAttribute]
public void set_RowCount(int value);
    [CompilerGeneratedAttribute]
public Guid get_QueryID();
    [CompilerGeneratedAttribute]
public void set_QueryID(Guid value);
    [CompilerGeneratedAttribute]
public String[] get_FieldNames();
    [CompilerGeneratedAttribute]
public void set_FieldNames(String[] value);
    [CompilerGeneratedAttribute]
public Type[] get_FieldTypes();
    [CompilerGeneratedAttribute]
public void set_FieldTypes(Type[] value);
    [CompilerGeneratedAttribute]
public List`1<String[]> get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(List`1<String[]> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class LinqToDB.Remote.LinqServiceSerializer : object {
    private static int TypeIndex;
    private static int TypeArrayIndex;
    private static Dictionary`2<Type, Type> _arrayTypes;
    private static Dictionary`2<Type, Func`2<object, object>> _arrayConverters;
    private static LinqServiceSerializer();
    public static string Serialize(MappingSchema serializationSchema, SqlStatement statement, IReadOnlyParameterValues parameterValues, IReadOnlyCollection`1<string> queryHints, DataOptions dataOptions);
    public static LinqServiceQuery Deserialize(MappingSchema serializationSchema, MappingSchema contextSchema, DataOptions options, string str);
    public static string Serialize(MappingSchema serializationSchema, LinqServiceResult result);
    public static LinqServiceResult DeserializeResult(MappingSchema serializationSchema, MappingSchema contextSchema, DataOptions options, string str);
    public static string Serialize(MappingSchema serializationSchema, String[] data);
    public static String[] DeserializeStringArray(MappingSchema serializationSchema, MappingSchema contextSchema, DataOptions options, string str);
    private static Type GetArrayType(Type elementType);
    private static object ConvertIEnumerableToArray(object list, Type elementType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PublicAPIAttribute]
public abstract class LinqToDB.Remote.RemoteDataContextBase : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <ConfigurationString>k__BackingField;
    private static ConcurrentDictionary`2<string, ConfigurationInfo> _configurations;
    [NullableAttribute("2")]
private ConfigurationInfo _configurationInfo;
    [NullableAttribute("2")]
private string _contextName;
    private int _msID;
    private Nullable`1<int> _configurationID;
    [NullableAttribute("2")]
private MappingSchema _mappingSchema;
    [NullableAttribute("2")]
private MappingSchema _serializationMappingSchema;
    [CompilerGeneratedAttribute]
private bool <InlineParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CloseAfterUse>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<string> _queryHints;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<string> _nextQueryHints;
    [NullableAttribute("2")]
private Type _sqlProviderType;
    [NullableAttribute("2")]
private Type _sqlOptimizerType;
    [CompilerGeneratedAttribute]
private DataOptions <Options>k__BackingField;
    private static ConcurrentDictionary`2<Tuple`5<Type, MappingSchema, Type, SqlProviderFlags, DataOptions>, Func`1<ISqlBuilder>> _sqlBuilders;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`1<ISqlBuilder> _createSqlProvider;
    private static ConcurrentDictionary`2<Tuple`2<Type, SqlProviderFlags>, Func`2<DataOptions, ISqlOptimizer>> _sqlOptimizers;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<DataOptions, ISqlOptimizer> _getSqlOptimizer;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<string> _queryBatch;
    private int _batchCounter;
    [CompilerGeneratedAttribute]
private bool <Disposed>k__BackingField;
    [NullableAttribute("2")]
private IDataContextInterceptor _dataContextInterceptor;
    [NullableAttribute("2")]
private IEntityServiceInterceptor _entityServiceInterceptor;
    [NullableAttribute("2")]
private IUnwrapDataObjectInterceptor _unwrapDataObjectInterceptor;
    [NullableAttribute("2")]
[ObsoleteAttribute("Use ConfigurationString instead.")]
public string Configuration { get; public set; }
    [NullableAttribute("2")]
public string ConfigurationString { get; public set; }
    protected string ContextIDPrefix { get; }
    private string LinqToDB.IDataContext.ContextName { get; }
    private int LinqToDB.Common.Internal.IConfigurationID.ConfigurationID { get; }
    public MappingSchema MappingSchema { get; public set; }
    internal MappingSchema SerializationMappingSchema { get; }
    public bool InlineParameters { get; public set; }
    public bool CloseAfterUse { get; public set; }
    public List`1<string> QueryHints { get; }
    public List`1<string> NextQueryHints { get; }
    public Type SqlProviderType { get; public set; }
    public Type SqlOptimizerType { get; public set; }
    public DataOptions Options { get; }
    private SqlProviderFlags LinqToDB.IDataContext.SqlProviderFlags { get; }
    private TableOptions LinqToDB.IDataContext.SupportedTableOptions { get; }
    private Type LinqToDB.IDataContext.DataReaderType { get; }
    private Func`1<ISqlBuilder> LinqToDB.IDataContext.CreateSqlProvider { get; }
    public Func`2<DataOptions, ISqlOptimizer> GetSqlOptimizer { get; }
    protected bool Disposed { get; private set; }
    [NullableAttribute("2")]
private IDataContextInterceptor LinqToDB.Interceptors.IInterceptable<LinqToDB.Interceptors.IDataContextInterceptor>.Interceptor { get; private set; }
    [NullableAttribute("2")]
private IEntityServiceInterceptor LinqToDB.Interceptors.IInterceptable<LinqToDB.Interceptors.IEntityServiceInterceptor>.Interceptor { get; private set; }
    [NullableAttribute("2")]
private IUnwrapDataObjectInterceptor LinqToDB.IDataContext.UnwrapDataObjectInterceptor { get; }
    [NullableAttribute("2")]
private IUnwrapDataObjectInterceptor LinqToDB.Interceptors.IInterceptable<LinqToDB.Interceptors.IUnwrapDataObjectInterceptor>.Interceptor { get; private set; }
    protected RemoteDataContextBase(DataOptions options);
    private static RemoteDataContextBase();
    [NullableContextAttribute("2")]
public string get_Configuration();
    [NullableContextAttribute("2")]
public void set_Configuration(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual string get_ConfigurationString();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ConfigurationString(string value);
    private ConfigurationInfo GetConfigurationInfo();
    [AsyncStateMachineAttribute("LinqToDB.Remote.RemoteDataContextBase/<GetConfigurationInfoAsync>d__13")]
private Task`1<ConfigurationInfo> GetConfigurationInfoAsync(CancellationToken cancellationToken);
    protected abstract virtual ILinqService GetClient();
    protected abstract virtual IDataContext Clone();
    protected abstract virtual string get_ContextIDPrefix();
    private sealed virtual override string LinqToDB.IDataContext.get_ContextName();
    private sealed virtual override int LinqToDB.Common.Internal.IConfigurationID.get_ConfigurationID();
    public sealed virtual MappingSchema get_MappingSchema();
    public void set_MappingSchema(MappingSchema value);
    internal MappingSchema get_SerializationMappingSchema();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_InlineParameters();
    [CompilerGeneratedAttribute]
public sealed virtual void set_InlineParameters(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_CloseAfterUse();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CloseAfterUse(bool value);
    public sealed virtual List`1<string> get_QueryHints();
    public sealed virtual List`1<string> get_NextQueryHints();
    public virtual Type get_SqlProviderType();
    public virtual void set_SqlProviderType(Type value);
    public virtual Type get_SqlOptimizerType();
    public virtual void set_SqlOptimizerType(Type value);
    [CompilerGeneratedAttribute]
public sealed virtual DataOptions get_Options();
    private sealed virtual override SqlProviderFlags LinqToDB.IDataContext.get_SqlProviderFlags();
    private sealed virtual override TableOptions LinqToDB.IDataContext.get_SupportedTableOptions();
    private sealed virtual override Type LinqToDB.IDataContext.get_DataReaderType();
    private sealed virtual override Expression LinqToDB.IDataContext.GetReaderExpression(DbDataReader reader, int idx, Expression readerExpression, Type toType);
    private static MethodInfo GetReaderMethodInfo(Type type);
    private sealed virtual override Nullable`1<bool> LinqToDB.IDataContext.IsDBNullAllowed(DbDataReader reader, int idx);
    private sealed virtual override Func`1<ISqlBuilder> LinqToDB.IDataContext.get_CreateSqlProvider();
    public sealed virtual Func`2<DataOptions, ISqlOptimizer> get_GetSqlOptimizer();
    public void BeginBatch();
    public void CommitBatch();
    [AsyncStateMachineAttribute("LinqToDB.Remote.RemoteDataContextBase/<CommitBatchAsync>d__78")]
public Task CommitBatchAsync();
    private sealed virtual override IDataContext LinqToDB.IDataContext.Clone(bool forNestedQuery);
    [CompilerGeneratedAttribute]
protected bool get_Disposed();
    [CompilerGeneratedAttribute]
private void set_Disposed(bool value);
    protected void ThrowOnDisposed();
    private sealed virtual override void LinqToDB.IDataContext.Close();
    [AsyncStateMachineAttribute("LinqToDB.Remote.RemoteDataContextBase/<LinqToDB-IDataContext-CloseAsync>d__86")]
private sealed virtual override Task LinqToDB.IDataContext.CloseAsync();
    public virtual void Dispose();
    public virtual ValueTask DisposeAsync();
    [NullableContextAttribute("2")]
private sealed virtual override IDataContextInterceptor LinqToDB.Interceptors.IInterceptable<LinqToDB.Interceptors.IDataContextInterceptor>.get_Interceptor();
    [NullableContextAttribute("2")]
private sealed virtual override void LinqToDB.Interceptors.IInterceptable<LinqToDB.Interceptors.IDataContextInterceptor>.set_Interceptor(IDataContextInterceptor value);
    [NullableContextAttribute("2")]
private sealed virtual override IEntityServiceInterceptor LinqToDB.Interceptors.IInterceptable<LinqToDB.Interceptors.IEntityServiceInterceptor>.get_Interceptor();
    [NullableContextAttribute("2")]
private sealed virtual override void LinqToDB.Interceptors.IInterceptable<LinqToDB.Interceptors.IEntityServiceInterceptor>.set_Interceptor(IEntityServiceInterceptor value);
    [NullableContextAttribute("2")]
private sealed virtual override IUnwrapDataObjectInterceptor LinqToDB.IDataContext.get_UnwrapDataObjectInterceptor();
    [NullableContextAttribute("2")]
private sealed virtual override IUnwrapDataObjectInterceptor LinqToDB.Interceptors.IInterceptable<LinqToDB.Interceptors.IUnwrapDataObjectInterceptor>.get_Interceptor();
    [NullableContextAttribute("2")]
private sealed virtual override void LinqToDB.Interceptors.IInterceptable<LinqToDB.Interceptors.IUnwrapDataObjectInterceptor>.set_Interceptor(IUnwrapDataObjectInterceptor value);
    public sealed virtual void AddInterceptor(IInterceptor interceptor);
    public sealed virtual void RemoveInterceptor(IInterceptor interceptor);
    private sealed virtual override IQueryRunner LinqToDB.IDataContext.GetQueryRunner(Query query, int queryNumber, Expression expression, Object[] parameters, Object[] preambles);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal class LinqToDB.Remote.RemoteDataReader : DbDataReader {
    private MappingSchema _mappingSchema;
    private LinqServiceResult _result;
    private Dictionary`2<string, int> _ordinal;
    [NullableAttribute("2")]
private String[] _data;
    private int _current;
    public object Item { get; }
    public object Item { get; }
    public int FieldCount { get; }
    public bool HasRows { get; }
    public int Depth { get; }
    public bool IsClosed { get; }
    public int RecordsAffected { get; }
    public RemoteDataReader(MappingSchema mappingSchema, LinqServiceResult result);
    public virtual object get_Item(int ordinal);
    public virtual object get_Item(string name);
    public virtual int get_FieldCount();
    public virtual bool get_HasRows();
    public virtual int get_Depth();
    public virtual bool GetBoolean(int ordinal);
    public virtual byte GetByte(int ordinal);
    public virtual char GetChar(int ordinal);
    public virtual DateTime GetDateTime(int ordinal);
    public virtual decimal GetDecimal(int ordinal);
    public virtual double GetDouble(int ordinal);
    public virtual float GetFloat(int ordinal);
    public virtual Guid GetGuid(int ordinal);
    public virtual short GetInt16(int ordinal);
    public virtual int GetInt32(int ordinal);
    public virtual long GetInt64(int ordinal);
    public virtual string GetString(int ordinal);
    public virtual object GetValue(int ordinal);
    [NullableContextAttribute("2")]
private object GetValueInternal(int ordinal);
    public virtual bool IsDBNull(int ordinal);
    public virtual string GetDataTypeName(int ordinal);
    public virtual Type GetFieldType(int ordinal);
    public virtual string GetName(int ordinal);
    public virtual int GetOrdinal(string name);
    public virtual void Close();
    public virtual bool Read();
    [NullableContextAttribute("2")]
public virtual long GetBytes(int ordinal, long dataOffset, Byte[] buffer, int bufferOffset, int length);
    [NullableContextAttribute("2")]
public virtual long GetChars(int ordinal, long dataOffset, Char[] buffer, int bufferOffset, int length);
    public virtual int GetValues(Object[] values);
    public virtual IEnumerator GetEnumerator();
    public virtual DataTable GetSchemaTable();
    public virtual bool NextResult();
    public virtual bool get_IsClosed();
    public virtual int get_RecordsAffected();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Remote.SerializationConverter : object {
    private static Type _stringType;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static MemoryCache`2<ValueTuple`2<Type, int>, Func`2<object, string>> _serializeConverters;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static MemoryCache`2<ValueTuple`2<Type, int>, Func`2<string, object>> _deserializeConverters;
    private static SerializationConverter();
    public static void ClearCaches();
    public static string Serialize(MappingSchema ms, object value);
    public static object Deserialize(MappingSchema ms, Type to, string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.Remote.SerializationMappingSchema : LockedMappingSchema {
    public static SerializationMappingSchema Instance;
    private static SerializationMappingSchema();
    private static DateTimeOffset StringToDateTimeOffset(string data);
}
public enum LinqToDB.SchemaProvider.AssociationType : Enum {
    public int value__;
    public static AssociationType Auto;
    public static AssociationType OneToOne;
    public static AssociationType OneToMany;
    public static AssociationType ManyToOne;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("TableID = {TableID}, Name = {Name}, DataType = {DataType}, Length = {Length}, Precision = {Precision}, Scale = {Scale}")]
public class LinqToDB.SchemaProvider.ColumnInfo : object {
    [NullableAttribute("1")]
public string TableID;
    [NullableAttribute("1")]
public string Name;
    public bool IsNullable;
    public int Ordinal;
    public string DataType;
    public string ColumnType;
    public Nullable`1<int> Length;
    public Nullable`1<int> Precision;
    public Nullable`1<int> Scale;
    public string Description;
    public bool IsIdentity;
    public bool SkipOnInsert;
    public bool SkipOnUpdate;
    public Nullable`1<DataType> Type;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class LinqToDB.SchemaProvider.ColumnSchema : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <ColumnName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ColumnType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNullable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsIdentity>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPrimaryKey>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PrimaryKeyOrder>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <MemberName>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <MemberType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProviderSpecificType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <SystemType>k__BackingField;
    [CompilerGeneratedAttribute]
private DataType <DataType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipOnInsert>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipOnUpdate>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Length>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Precision>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Scale>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Ordinal>k__BackingField;
    [NullableAttribute("1")]
public TableSchema Table;
    [NullableAttribute("1")]
public string ColumnName { get; public set; }
    public string ColumnType { get; public set; }
    public bool IsNullable { get; public set; }
    public bool IsIdentity { get; public set; }
    public bool IsPrimaryKey { get; public set; }
    public int PrimaryKeyOrder { get; public set; }
    public string Description { get; public set; }
    [NullableAttribute("1")]
public string MemberName { get; public set; }
    [NullableAttribute("1")]
public string MemberType { get; public set; }
    public string ProviderSpecificType { get; public set; }
    public Type SystemType { get; public set; }
    public DataType DataType { get; public set; }
    public bool SkipOnInsert { get; public set; }
    public bool SkipOnUpdate { get; public set; }
    public Nullable`1<int> Length { get; public set; }
    public Nullable`1<int> Precision { get; public set; }
    public Nullable`1<int> Scale { get; public set; }
    public Nullable`1<int> Ordinal { get; public set; }
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_ColumnName();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_ColumnName(string value);
    [CompilerGeneratedAttribute]
public string get_ColumnType();
    [CompilerGeneratedAttribute]
public void set_ColumnType(string value);
    [CompilerGeneratedAttribute]
public bool get_IsNullable();
    [CompilerGeneratedAttribute]
public void set_IsNullable(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsIdentity();
    [CompilerGeneratedAttribute]
public void set_IsIdentity(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsPrimaryKey();
    [CompilerGeneratedAttribute]
public void set_IsPrimaryKey(bool value);
    [CompilerGeneratedAttribute]
public int get_PrimaryKeyOrder();
    [CompilerGeneratedAttribute]
public void set_PrimaryKeyOrder(int value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_MemberName();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_MemberName(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_MemberType();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_MemberType(string value);
    [CompilerGeneratedAttribute]
public string get_ProviderSpecificType();
    [CompilerGeneratedAttribute]
public void set_ProviderSpecificType(string value);
    [CompilerGeneratedAttribute]
public Type get_SystemType();
    [CompilerGeneratedAttribute]
public void set_SystemType(Type value);
    [CompilerGeneratedAttribute]
public DataType get_DataType();
    [CompilerGeneratedAttribute]
public void set_DataType(DataType value);
    [CompilerGeneratedAttribute]
public bool get_SkipOnInsert();
    [CompilerGeneratedAttribute]
public void set_SkipOnInsert(bool value);
    [CompilerGeneratedAttribute]
public bool get_SkipOnUpdate();
    [CompilerGeneratedAttribute]
public void set_SkipOnUpdate(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Length();
    [CompilerGeneratedAttribute]
public void set_Length(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Precision();
    [CompilerGeneratedAttribute]
public void set_Precision(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Scale();
    [CompilerGeneratedAttribute]
public void set_Scale(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Ordinal();
    [CompilerGeneratedAttribute]
public void set_Ordinal(Nullable`1<int> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PublicAPIAttribute]
public class LinqToDB.SchemaProvider.DatabaseSchema : object {
    [CompilerGeneratedAttribute]
private string <DataSource>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Database>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServerVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<TableSchema> <Tables>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ProcedureSchema> <Procedures>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private DataTable <DataTypesSchema>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <ProviderSpecificTypeNamespace>k__BackingField;
    public string DataSource { get; public set; }
    public string Database { get; public set; }
    public string ServerVersion { get; public set; }
    public List`1<TableSchema> Tables { get; public set; }
    public List`1<ProcedureSchema> Procedures { get; public set; }
    [NullableAttribute("2")]
public DataTable DataTypesSchema { get; public set; }
    [NullableAttribute("2")]
public string ProviderSpecificTypeNamespace { get; public set; }
    [CompilerGeneratedAttribute]
public string get_DataSource();
    [CompilerGeneratedAttribute]
public void set_DataSource(string value);
    [CompilerGeneratedAttribute]
public string get_Database();
    [CompilerGeneratedAttribute]
public void set_Database(string value);
    [CompilerGeneratedAttribute]
public string get_ServerVersion();
    [CompilerGeneratedAttribute]
public void set_ServerVersion(string value);
    [CompilerGeneratedAttribute]
public List`1<TableSchema> get_Tables();
    [CompilerGeneratedAttribute]
public void set_Tables(List`1<TableSchema> value);
    [CompilerGeneratedAttribute]
public List`1<ProcedureSchema> get_Procedures();
    [CompilerGeneratedAttribute]
public void set_Procedures(List`1<ProcedureSchema> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public DataTable get_DataTypesSchema();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_DataTypesSchema(DataTable value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_ProviderSpecificTypeNamespace();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ProviderSpecificTypeNamespace(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("TypeName = {TypeName}, DataType = {DataType}, CreateFormat = {CreateFormat}, CreateParameters = {CreateParameters}")]
public class LinqToDB.SchemaProvider.DataTypeInfo : object {
    public bool ProviderSpecific;
    public string TypeName;
    public string DataType;
    [NullableAttribute("2")]
public string CreateFormat;
    [NullableAttribute("2")]
public string CreateParameters;
    public int ProviderDbType;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.SchemaProvider.ForeignKeyInfo : object {
    public string Name;
    public string ThisTableID;
    public string ThisColumn;
    public string OtherTableID;
    public string OtherColumn;
    public int Ordinal;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.SchemaProvider.ForeignKeySchema : object {
    [CompilerGeneratedAttribute]
private string <KeyName>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private TableSchema <ThisTable>k__BackingField;
    [CompilerGeneratedAttribute]
private TableSchema <OtherTable>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ColumnSchema> <ThisColumns>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ColumnSchema> <OtherColumns>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanBeNull>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ForeignKeySchema <BackReference>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MemberName>k__BackingField;
    private AssociationType _associationType;
    public string KeyName { get; public set; }
    [NullableAttribute("2")]
public TableSchema ThisTable { get; public set; }
    public TableSchema OtherTable { get; public set; }
    public List`1<ColumnSchema> ThisColumns { get; public set; }
    public List`1<ColumnSchema> OtherColumns { get; public set; }
    public bool CanBeNull { get; public set; }
    [NullableAttribute("2")]
public ForeignKeySchema BackReference { get; public set; }
    public string MemberName { get; public set; }
    public AssociationType AssociationType { get; public set; }
    [CompilerGeneratedAttribute]
public string get_KeyName();
    [CompilerGeneratedAttribute]
public void set_KeyName(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public TableSchema get_ThisTable();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ThisTable(TableSchema value);
    [CompilerGeneratedAttribute]
public TableSchema get_OtherTable();
    [CompilerGeneratedAttribute]
public void set_OtherTable(TableSchema value);
    [CompilerGeneratedAttribute]
public List`1<ColumnSchema> get_ThisColumns();
    [CompilerGeneratedAttribute]
public void set_ThisColumns(List`1<ColumnSchema> value);
    [CompilerGeneratedAttribute]
public List`1<ColumnSchema> get_OtherColumns();
    [CompilerGeneratedAttribute]
public void set_OtherColumns(List`1<ColumnSchema> value);
    [CompilerGeneratedAttribute]
public bool get_CanBeNull();
    [CompilerGeneratedAttribute]
public void set_CanBeNull(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public ForeignKeySchema get_BackReference();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_BackReference(ForeignKeySchema value);
    [CompilerGeneratedAttribute]
public string get_MemberName();
    [CompilerGeneratedAttribute]
public void set_MemberName(string value);
    public AssociationType get_AssociationType();
    public void set_AssociationType(AssociationType value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class LinqToDB.SchemaProvider.GetSchemaOptions : object {
    public bool PreferProviderSpecificTypes;
    public bool GetTables;
    public bool GetForeignKeys;
    public bool GetProcedures;
    public bool GenerateChar1AsString;
    public bool IgnoreSystemHistoryTables;
    public string DefaultSchema;
    public String[] IncludedSchemas;
    public String[] ExcludedSchemas;
    public String[] IncludedCatalogs;
    public String[] ExcludedCatalogs;
    [NullableAttribute("1")]
public StringComparer StringComparer;
    [NullableAttribute("1")]
public Func`2<ProcedureSchema, bool> LoadProcedure;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<ForeignKeySchema, string> GetAssociationMemberName;
    [NullableAttribute("1")]
public Action`2<int, int> ProcedureLoadingProgress;
    public Func`2<LoadTableData, bool> LoadTable;
    public bool UseSchemaOnly;
}
[NullableContextAttribute("1")]
public interface LinqToDB.SchemaProvider.ISchemaProvider {
    public abstract virtual DatabaseSchema GetSchema(DataConnection dataConnection, GetSchemaOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class LinqToDB.SchemaProvider.LoadTableData : ValueType {
    private TableInfo _info;
    [NullableAttribute("2")]
public string Database { get; }
    [NullableAttribute("2")]
public string Schema { get; }
    public string Name { get; }
    public bool IsDefaultSchema { get; }
    public bool IsView { get; }
    public bool IsSystem { get; }
    internal LoadTableData(TableInfo info);
    [NullableContextAttribute("2")]
public string get_Database();
    [NullableContextAttribute("2")]
public string get_Schema();
    public string get_Name();
    public bool get_IsDefaultSchema();
    public bool get_IsView();
    public bool get_IsSystem();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class LinqToDB.SchemaProvider.ParameterSchema : object {
    [CompilerGeneratedAttribute]
private string <SchemaName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SchemaType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsIn>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsOut>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsResult>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNullable>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <ParameterType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <SystemType>k__BackingField;
    [CompilerGeneratedAttribute]
private DataType <DataType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProviderSpecificType>k__BackingField;
    public string SchemaName { get; public set; }
    public string SchemaType { get; public set; }
    public bool IsIn { get; public set; }
    public bool IsOut { get; public set; }
    public bool IsResult { get; public set; }
    public bool IsNullable { get; public set; }
    public Nullable`1<int> Size { get; public set; }
    public string Description { get; public set; }
    [NullableAttribute("1")]
public string ParameterName { get; public set; }
    [NullableAttribute("1")]
public string ParameterType { get; public set; }
    public Type SystemType { get; public set; }
    public DataType DataType { get; public set; }
    public string ProviderSpecificType { get; public set; }
    [CompilerGeneratedAttribute]
public string get_SchemaName();
    [CompilerGeneratedAttribute]
public void set_SchemaName(string value);
    [CompilerGeneratedAttribute]
public string get_SchemaType();
    [CompilerGeneratedAttribute]
public void set_SchemaType(string value);
    [CompilerGeneratedAttribute]
public bool get_IsIn();
    [CompilerGeneratedAttribute]
public void set_IsIn(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsOut();
    [CompilerGeneratedAttribute]
public void set_IsOut(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsResult();
    [CompilerGeneratedAttribute]
public void set_IsResult(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsNullable();
    [CompilerGeneratedAttribute]
public void set_IsNullable(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_ParameterName();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_ParameterName(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_ParameterType();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_ParameterType(string value);
    [CompilerGeneratedAttribute]
public Type get_SystemType();
    [CompilerGeneratedAttribute]
public void set_SystemType(Type value);
    [CompilerGeneratedAttribute]
public DataType get_DataType();
    [CompilerGeneratedAttribute]
public void set_DataType(DataType value);
    [CompilerGeneratedAttribute]
public string get_ProviderSpecificType();
    [CompilerGeneratedAttribute]
public void set_ProviderSpecificType(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("TableID = {TableID}, PrimaryKeyName = {PrimaryKeyName}, ColumnName = {ColumnName}, Ordinal = {Ordinal}")]
public class LinqToDB.SchemaProvider.PrimaryKeyInfo : object {
    public string TableID;
    [NullableAttribute("2")]
public string PrimaryKeyName;
    public string ColumnName;
    public int Ordinal;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class LinqToDB.SchemaProvider.ProcedureInfo : object {
    [NullableAttribute("1")]
public string ProcedureID;
    public string CatalogName;
    public string SchemaName;
    public string PackageName;
    [NullableAttribute("1")]
public string ProcedureName;
    public bool IsFunction;
    public bool IsTableFunction;
    public bool IsAggregateFunction;
    public bool IsWindowFunction;
    public bool IsDefaultSchema;
    public string ProcedureDefinition;
    public bool IsResultDynamic;
    public string Description;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class LinqToDB.SchemaProvider.ProcedureParameterInfo : object {
    [NullableAttribute("1")]
public string ProcedureID;
    public int Ordinal;
    public string ParameterName;
    public string DataType;
    public string DataTypeExact;
    public Nullable`1<int> Length;
    public Nullable`1<int> Precision;
    public Nullable`1<int> Scale;
    public bool IsIn;
    public bool IsOut;
    public bool IsResult;
    public string UDTCatalog;
    public string UDTSchema;
    public string UDTName;
    public bool IsNullable;
    public string Description;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class LinqToDB.SchemaProvider.ProcedureSchema : object {
    [CompilerGeneratedAttribute]
private string <CatalogName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SchemaName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PackageName>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <ProcedureName>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <MemberName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsFunction>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsTableFunction>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsResultDynamic>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAggregateFunction>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDefaultSchema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLoaded>k__BackingField;
    [CompilerGeneratedAttribute]
private TableSchema <ResultTable>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <ResultException>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<TableSchema> <SimilarTables>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private List`1<ParameterSchema> <Parameters>k__BackingField;
    public string CatalogName { get; public set; }
    public string SchemaName { get; public set; }
    public string PackageName { get; public set; }
    [NullableAttribute("1")]
public string ProcedureName { get; public set; }
    [NullableAttribute("1")]
public string MemberName { get; public set; }
    public bool IsFunction { get; public set; }
    public bool IsTableFunction { get; public set; }
    public bool IsResultDynamic { get; public set; }
    public bool IsAggregateFunction { get; public set; }
    public bool IsDefaultSchema { get; public set; }
    public string Description { get; public set; }
    public bool IsLoaded { get; public set; }
    public TableSchema ResultTable { get; public set; }
    public Exception ResultException { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<TableSchema> SimilarTables { get; public set; }
    [NullableAttribute("1")]
public List`1<ParameterSchema> Parameters { get; public set; }
    [CompilerGeneratedAttribute]
public string get_CatalogName();
    [CompilerGeneratedAttribute]
public void set_CatalogName(string value);
    [CompilerGeneratedAttribute]
public string get_SchemaName();
    [CompilerGeneratedAttribute]
public void set_SchemaName(string value);
    [CompilerGeneratedAttribute]
public string get_PackageName();
    [CompilerGeneratedAttribute]
public void set_PackageName(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_ProcedureName();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_ProcedureName(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_MemberName();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_MemberName(string value);
    [CompilerGeneratedAttribute]
public bool get_IsFunction();
    [CompilerGeneratedAttribute]
public void set_IsFunction(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsTableFunction();
    [CompilerGeneratedAttribute]
public void set_IsTableFunction(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsResultDynamic();
    [CompilerGeneratedAttribute]
public void set_IsResultDynamic(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsAggregateFunction();
    [CompilerGeneratedAttribute]
public void set_IsAggregateFunction(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsDefaultSchema();
    [CompilerGeneratedAttribute]
public void set_IsDefaultSchema(bool value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public bool get_IsLoaded();
    [CompilerGeneratedAttribute]
public void set_IsLoaded(bool value);
    [CompilerGeneratedAttribute]
public TableSchema get_ResultTable();
    [CompilerGeneratedAttribute]
public void set_ResultTable(TableSchema value);
    [CompilerGeneratedAttribute]
public Exception get_ResultException();
    [CompilerGeneratedAttribute]
public void set_ResultException(Exception value);
    [CompilerGeneratedAttribute]
public List`1<TableSchema> get_SimilarTables();
    [CompilerGeneratedAttribute]
public void set_SimilarTables(List`1<TableSchema> value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public List`1<ParameterSchema> get_Parameters();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_Parameters(List`1<ParameterSchema> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class LinqToDB.SchemaProvider.SchemaProviderBase : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
protected HashSet`1<string> IncludedSchemas;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
protected HashSet`1<string> ExcludedSchemas;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
protected HashSet`1<string> IncludedCatalogs;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
protected HashSet`1<string> ExcludedCatalogs;
    protected bool GenerateChar1AsString;
    protected DataTable DataTypesSchema;
    private Dictionary`2<string, DataTypeInfo> DataTypesDic;
    private Dictionary`2<string, DataTypeInfo> ProviderSpecificDataTypesDic;
    private Dictionary`2<int, DataTypeInfo> DataTypesByProviderDbTypeDic;
    private Dictionary`2<int, DataTypeInfo> ProviderSpecificDataTypesByProviderDbTypeDic;
    private static Char[] _nameSeparators;
    protected bool GetProcedureSchemaExecutesProcedure { get; }
    private static SchemaProviderBase();
    [NullableContextAttribute("2")]
protected abstract virtual DataType GetDataType(string dataType, string columnType, Nullable`1<int> length, Nullable`1<int> precision, Nullable`1<int> scale);
    protected abstract virtual List`1<TableInfo> GetTables(DataConnection dataConnection, GetSchemaOptions options);
    protected abstract virtual IReadOnlyCollection`1<PrimaryKeyInfo> GetPrimaryKeys(DataConnection dataConnection, IEnumerable`1<TableSchema> tables, GetSchemaOptions options);
    protected abstract virtual List`1<ColumnInfo> GetColumns(DataConnection dataConnection, GetSchemaOptions options);
    protected abstract virtual IReadOnlyCollection`1<ForeignKeyInfo> GetForeignKeys(DataConnection dataConnection, IEnumerable`1<TableSchema> tables, GetSchemaOptions options);
    [NullableContextAttribute("2")]
protected abstract virtual string GetProviderSpecificTypeNamespace();
    protected virtual List`1<ProcedureInfo> GetProcedures(DataConnection dataConnection, GetSchemaOptions options);
    protected virtual List`1<ProcedureParameterInfo> GetProcedureParameters(DataConnection dataConnection, IEnumerable`1<ProcedureInfo> procedures, GetSchemaOptions options);
    protected virtual bool get_GetProcedureSchemaExecutesProcedure();
    protected string BuildSchemaFilter(GetSchemaOptions options, string defaultSchema, Action`2<StringBuilder, string> stringLiteralBuilder);
    public virtual DatabaseSchema GetSchema(DataConnection dataConnection, GetSchemaOptions options);
    protected virtual StringComparison ForeignKeyColumnComparison(string column);
    [NullableContextAttribute("2")]
protected static HashSet`1<string> GetHashSet(String[] data, IEqualityComparer`1<string> comparer);
    protected virtual List`1<TableSchema> GetProviderSpecificTables(DataConnection dataConnection, GetSchemaOptions options);
    protected virtual List`1<ProcedureSchema> GetProviderSpecificProcedures(DataConnection dataConnection);
    protected virtual string BuildTableFunctionLoadTableSchemaCommand(ProcedureSchema procedure, string commandText);
    protected virtual void LoadProcedureTableSchema(DataConnection dataConnection, GetSchemaOptions options, ProcedureSchema procedure, string commandText, List`1<TableSchema> tables);
    protected virtual DataParameter BuildProcedureParameter(ParameterSchema p);
    [NullableContextAttribute("2")]
protected virtual string GetProviderSpecificType(string dataType);
    [NullableContextAttribute("2")]
protected virtual DataTypeInfo GetDataType(string typeName, Nullable`1<DataType> dataType, GetSchemaOptions options);
    protected DataTypeInfo GetDataTypeByProviderDbType(int typeId, GetSchemaOptions options);
    protected virtual DataTable GetProcedureSchema(DataConnection dataConnection, string commandText, CommandType commandType, DataParameter[] parameters, GetSchemaOptions options);
    protected virtual List`1<ColumnSchema> GetProcedureResultColumns(DataTable resultTable, GetSchemaOptions options);
    protected virtual string GetDataSourceName(DataConnection dbConnection);
    protected virtual string GetDatabaseName(DataConnection dbConnection);
    protected virtual void InitProvider(DataConnection dataConnection);
    protected virtual List`1<DataTypeInfo> GetDataTypes(DataConnection dataConnection);
    [NullableContextAttribute("2")]
protected virtual Type GetSystemType(string dataType, string columnType, DataTypeInfo dataTypeInfo, Nullable`1<int> length, Nullable`1<int> precision, Nullable`1<int> scale, GetSchemaOptions options);
    [NullableContextAttribute("2")]
protected virtual string GetDbType(GetSchemaOptions options, string columnType, DataTypeInfo dataType, Nullable`1<int> length, Nullable`1<int> precision, Nullable`1<int> scale, string udtCatalog, string udtSchema, string udtName);
    public static string ToValidName(string name);
    public static string ToTypeName(Type type, bool isNullable);
    protected virtual DatabaseSchema ProcessSchema(DatabaseSchema databaseSchema, GetSchemaOptions schemaOptions);
    private static void SetForeignKeyMemberName(GetSchemaOptions schemaOptions, TableSchema table, ForeignKeySchema key);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("CatalogName = {CatalogName}, SchemaName = {SchemaName}, TableName = {TableName}, IsDefaultSchema = {IsDefaultSchema}, IsView = {IsView}, Description = {Description}")]
public class LinqToDB.SchemaProvider.TableInfo : object {
    [NullableAttribute("1")]
public string TableID;
    public string CatalogName;
    public string SchemaName;
    [NullableAttribute("1")]
public string TableName;
    public string Description;
    public bool IsDefaultSchema;
    public bool IsView;
    public bool IsProviderSpecific;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class LinqToDB.SchemaProvider.TableSchema : object {
    [CompilerGeneratedAttribute]
private string <ID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CatalogName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SchemaName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDefaultSchema>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsView>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsProcedureResult>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsProviderSpecific>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private List`1<ColumnSchema> <Columns>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private List`1<ForeignKeySchema> <ForeignKeys>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GroupName>k__BackingField;
    public string ID { get; public set; }
    public string CatalogName { get; public set; }
    public string SchemaName { get; public set; }
    public string TableName { get; public set; }
    public string Description { get; public set; }
    public bool IsDefaultSchema { get; public set; }
    public bool IsView { get; public set; }
    public bool IsProcedureResult { get; public set; }
    [NullableAttribute("1")]
public string TypeName { get; public set; }
    public bool IsProviderSpecific { get; public set; }
    [NullableAttribute("1")]
public List`1<ColumnSchema> Columns { get; public set; }
    [NullableAttribute("1")]
public List`1<ForeignKeySchema> ForeignKeys { get; public set; }
    public string GroupName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ID();
    [CompilerGeneratedAttribute]
public void set_ID(string value);
    [CompilerGeneratedAttribute]
public string get_CatalogName();
    [CompilerGeneratedAttribute]
public void set_CatalogName(string value);
    [CompilerGeneratedAttribute]
public string get_SchemaName();
    [CompilerGeneratedAttribute]
public void set_SchemaName(string value);
    [CompilerGeneratedAttribute]
public string get_TableName();
    [CompilerGeneratedAttribute]
public void set_TableName(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public bool get_IsDefaultSchema();
    [CompilerGeneratedAttribute]
public void set_IsDefaultSchema(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsView();
    [CompilerGeneratedAttribute]
public void set_IsView(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsProcedureResult();
    [CompilerGeneratedAttribute]
public void set_IsProcedureResult(bool value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_TypeName();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_TypeName(string value);
    [CompilerGeneratedAttribute]
public bool get_IsProviderSpecific();
    [CompilerGeneratedAttribute]
public void set_IsProviderSpecific(bool value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public List`1<ColumnSchema> get_Columns();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_Columns(List`1<ColumnSchema> value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public List`1<ForeignKeySchema> get_ForeignKeys();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_ForeignKeys(List`1<ForeignKeySchema> value);
    [CompilerGeneratedAttribute]
public string get_GroupName();
    [CompilerGeneratedAttribute]
public void set_GroupName(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[PublicAPIAttribute]
public static class LinqToDB.Sql : object {
    private static string WHITESPACES;
    private static string ASCII_WHITESPACES;
    private static string WHITESPACES_REGEX;
    public static IGroupBy GroupBy;
    [PropertyAttribute("CURRENT_TIMESTAMP")]
[PropertyAttribute("Firebird", "LOCALTIMESTAMP")]
[PropertyAttribute("Informix", "CURRENT")]
[PropertyAttribute("Access", "Now")]
[FunctionAttribute("SqlCe", "GetDate")]
[FunctionAttribute("Sybase", "GetDate")]
[FunctionAttribute("ClickHouse", "now")]
public static DateTime CurrentTimestamp { get; }
    [FunctionAttribute("SqlServer", "SYSUTCDATETIME")]
[FunctionAttribute("Sybase", "GETUTCDATE")]
[ExpressionAttribute("SQLite", "DATETIME('now')")]
[FunctionAttribute("MySql", "UTC_TIMESTAMP")]
[ExpressionAttribute("PostgreSQL", "timezone('UTC', now())")]
[ExpressionAttribute("DB2", "CURRENT TIMESTAMP - CURRENT TIMEZONE")]
[ExpressionAttribute("Oracle", "SYS_EXTRACT_UTC(SYSTIMESTAMP)")]
[PropertyAttribute("SapHana", "CURRENT_UTCTIMESTAMP")]
[ExpressionAttribute("Informix", "datetime(1970-01-01 00:00:00) year to second + (dbinfo('utc_current')/86400)::int::char(9)::interval day(9) to day + (mod(dbinfo('utc_current'), 86400))::char(5)::interval second(5) to second")]
[ExpressionAttribute("ClickHouse", "now('UTC')")]
public static DateTime CurrentTimestampUtc { get; }
    [PropertyAttribute("CURRENT_TIMESTAMP")]
[PropertyAttribute("Informix", "CURRENT")]
[PropertyAttribute("Access", "Now")]
[FunctionAttribute("SqlCe", "GetDate")]
[FunctionAttribute("Sybase", "GetDate")]
[FunctionAttribute("ClickHouse", "now")]
public static DateTime CurrentTimestamp2 { get; }
    [FunctionAttribute("SqlServer", "SYSDATETIMEOFFSET")]
[FunctionAttribute("PostgreSQL", "now")]
[PropertyAttribute("Oracle", "SYSTIMESTAMP")]
[FunctionAttribute("ClickHouse", "now")]
public static DateTimeOffset CurrentTzTimestamp { get; }
    [PropertyAttribute("@@DATEFIRST")]
[PropertyAttribute("ClickHouse", "1")]
public static int DateFirst { get; }
    [NullableAttribute("2")]
public static ISqlExtension Ext { get; }
    private static Sql();
    [ExtensionAttribute]
[ExtensionAttribute("", "")]
public static bool Between(T value, T low, T high);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
[ExtensionAttribute("", "")]
public static bool Between(Nullable`1<T> value, Nullable`1<T> low, Nullable`1<T> high);
    [ExtensionAttribute]
[ExtensionAttribute("", "")]
public static bool NotBetween(T value, T low, T high);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
[ExtensionAttribute("", "")]
public static bool NotBetween(Nullable`1<T> value, Nullable`1<T> low, Nullable`1<T> high);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[ExtensionAttribute("")]
[ExtensionAttribute("")]
[ExtensionAttribute("")]
public static string Collate(string expr, string collation);
    [ExpressionAttribute("*")]
public static Object[] AllColumns();
    [ExpressionAttribute("DEFAULT")]
public static T Default();
    [CLSCompliantAttribute("False")]
[ExpressionAttribute("{0}", "Mono.Cecil.CustomAttributeArgument[]")]
public static T AsSql(T obj);
    [CLSCompliantAttribute("False")]
[ExpressionAttribute("{0}", "Mono.Cecil.CustomAttributeArgument[]")]
public static T ToSql(T obj);
    [ExtensionAttribute("{array, ', '}")]
internal static T[] Spread(T[] array);
    [CLSCompliantAttribute("False")]
[ExpressionAttribute("{0}", "Mono.Cecil.CustomAttributeArgument[]")]
public static T AsNullable(T value);
    [CLSCompliantAttribute("False")]
[ExpressionAttribute("{0}", "Mono.Cecil.CustomAttributeArgument[]")]
public static T AsNotNull(T value);
    [CLSCompliantAttribute("False")]
[ExpressionAttribute("{0}", "Mono.Cecil.CustomAttributeArgument[]")]
public static T AsNotNullable(T value);
    [NullableContextAttribute("0")]
[CLSCompliantAttribute("False")]
[ExpressionAttribute("{0}", "Mono.Cecil.CustomAttributeArgument[]")]
public static Nullable`1<T> ToNullable(T value);
    [NullableContextAttribute("0")]
[CLSCompliantAttribute("False")]
[ExpressionAttribute("{0}", "Mono.Cecil.CustomAttributeArgument[]")]
public static T ToNotNull(Nullable`1<T> value);
    [NullableContextAttribute("0")]
[CLSCompliantAttribute("False")]
[ExpressionAttribute("{0}", "Mono.Cecil.CustomAttributeArgument[]")]
public static T ToNotNullable(Nullable`1<T> value);
    [ExtensionAttribute]
[ExtensionAttribute("LinqToDB.Sql/IsDistinctBuilder")]
public static bool IsDistinctFrom(T value, T other);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
[ExtensionAttribute("LinqToDB.Sql/IsDistinctBuilder")]
public static bool IsDistinctFrom(T value, Nullable`1<T> other);
    [ExtensionAttribute]
[ExtensionAttribute("LinqToDB.Sql/IsDistinctBuilder")]
public static bool IsNotDistinctFrom(T value, T other);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
[ExtensionAttribute("LinqToDB.Sql/IsDistinctBuilder")]
public static bool IsNotDistinctFrom(T value, Nullable`1<T> other);
    public static T Property(object entity, string propertyName);
    internal static T Alias(T obj, string alias);
    [NullableContextAttribute("2")]
[ExpressionAttribute("NULLIF({0}, {1})")]
[ExpressionAttribute("Access", "case when {0} = {1} then null else {0} end")]
[ExpressionAttribute("SqlCe", "case when {0} = {1} then null else {0} end")]
public static T NullIf(T value, T compareTo);
    [NullableContextAttribute("0")]
[ExpressionAttribute("NULLIF({0}, {1})")]
[ExpressionAttribute("Access", "case when {0} = {1} then null else {0} end")]
[ExpressionAttribute("SqlCe", "case when {0} = {1} then null else {0} end")]
public static Nullable`1<T> NullIf(Nullable`1<T> value, T compareTo);
    [NullableContextAttribute("0")]
[ExpressionAttribute("NULLIF({0}, {1})")]
[ExpressionAttribute("Access", "case when {0} = {1} then null else {0} end")]
[ExpressionAttribute("SqlCe", "case when {0} = {1} then null else {0} end")]
public static Nullable`1<T> NullIf(Nullable`1<T> value, Nullable`1<T> compareTo);
    [FunctionAttribute("$Convert_Remover$", "Mono.Cecil.CustomAttributeArgument[]")]
private static TR ConvertRemover(T input);
    [ExtensionAttribute("")]
public static T NoConvert(T expr);
    [FunctionAttribute("ClickHouse", "generateUUIDv4")]
[FunctionAttribute("Oracle", "Sys_Guid")]
[FunctionAttribute("Firebird", "Gen_Uuid")]
[FunctionAttribute("MySql", "Uuid")]
[ExpressionAttribute("Sybase", "NewID(1)")]
[ExpressionAttribute("SapHana", "SYSUUID")]
[FunctionAttribute("NewID")]
public static Guid NewGuid();
    [CLSCompliantAttribute("False")]
[FunctionAttribute("Convert", "Mono.Cecil.CustomAttributeArgument[]")]
[FunctionAttribute("$Convert$", "Mono.Cecil.CustomAttributeArgument[]")]
public static TTo Convert(TTo to, TFrom from);
    [CLSCompliantAttribute("False")]
[FunctionAttribute("Convert", "Mono.Cecil.CustomAttributeArgument[]")]
public static TTo Convert(TTo to, TFrom from, int format);
    [CLSCompliantAttribute("False")]
[FunctionAttribute("Convert", "Mono.Cecil.CustomAttributeArgument[]")]
[FunctionAttribute("$Convert$", "Mono.Cecil.CustomAttributeArgument[]")]
public static TTo Convert2(TTo to, TFrom from);
    [CLSCompliantAttribute("False")]
[FunctionAttribute("$Convert$", "Mono.Cecil.CustomAttributeArgument[]")]
public static TTo Convert(TFrom obj);
    [ExpressionAttribute("{0}")]
public static Nullable`1<TimeSpan> DateToTime(Nullable`1<DateTime> date);
    [NullableContextAttribute("0")]
[CLSCompliantAttribute("False")]
[FunctionAttribute("$TryConvert$", "Mono.Cecil.CustomAttributeArgument[]")]
public static Nullable`1<TTo> TryConvert(TFrom value, Nullable`1<TTo> _);
    [NullableContextAttribute("2")]
[CLSCompliantAttribute("False")]
[FunctionAttribute("$TryConvert$", "Mono.Cecil.CustomAttributeArgument[]")]
public static TTo TryConvert(TFrom value, TTo _);
    [NullableContextAttribute("0")]
[CLSCompliantAttribute("False")]
[FunctionAttribute("$TryConvertOrDefault$", "Mono.Cecil.CustomAttributeArgument[]")]
public static Nullable`1<TTo> TryConvertOrDefault(TFrom value, Nullable`1<TTo> defaultValue);
    [NullableContextAttribute("2")]
[CLSCompliantAttribute("False")]
[FunctionAttribute("$TryConvertOrDefault$", "Mono.Cecil.CustomAttributeArgument[]")]
public static TTo TryConvertOrDefault(TFrom value, TTo defaultValue);
    [NullableContextAttribute("2")]
[FunctionAttribute]
[FunctionAttribute("Access", "Len")]
[FunctionAttribute("Firebird", "Char_Length")]
[FunctionAttribute("SqlServer", "Len")]
[FunctionAttribute("SqlCe", "Len")]
[FunctionAttribute("Sybase", "Len")]
[FunctionAttribute("MySql", "Char_Length")]
[FunctionAttribute("Informix", "CHAR_LENGTH")]
[FunctionAttribute("ClickHouse", "CHAR_LENGTH")]
[ExpressionAttribute("DB2.LUW", "CHARACTER_LENGTH({0},CODEUNITS32)")]
public static Nullable`1<int> Length(string str);
    [NullableContextAttribute("2")]
[FunctionAttribute]
[FunctionAttribute("Access", "Mid")]
[FunctionAttribute("DB2", "Substr")]
[FunctionAttribute("Informix", "Substr")]
[FunctionAttribute("Oracle", "Substr")]
[FunctionAttribute("SQLite", "Substr")]
[ExpressionAttribute("Firebird", "Substring({0} from {1} for {2})")]
public static string Substring(string str, Nullable`1<int> start, Nullable`1<int> length);
    [NullableContextAttribute("2")]
[FunctionAttribute]
public static bool Like(string matchExpression, string pattern);
    [NullableContextAttribute("2")]
[FunctionAttribute]
public static bool Like(string matchExpression, string pattern, Nullable`1<char> escapeCharacter);
    [NullableContextAttribute("2")]
[CLSCompliantAttribute("False")]
[FunctionAttribute]
[FunctionAttribute("DB2", "Locate")]
[FunctionAttribute("MySql", "Locate")]
[FunctionAttribute("SapHana", "Locate", "Mono.Cecil.CustomAttributeArgument[]")]
[FunctionAttribute("Firebird", "Position")]
[FunctionAttribute("ClickHouse", "positionUTF8", "Mono.Cecil.CustomAttributeArgument[]")]
public static Nullable`1<int> CharIndex(string substring, string str);
    [NullableContextAttribute("2")]
[FunctionAttribute]
[FunctionAttribute("DB2", "Locate")]
[FunctionAttribute("MySql", "Locate")]
[FunctionAttribute("Firebird", "Position")]
[ExpressionAttribute("ClickHouse", "positionUTF8({1}, {0}, toUInt32({2}))")]
[ExpressionAttribute("SapHana", "Locate(Substring({1},{2} + 1),{0}) + {2}")]
public static Nullable`1<int> CharIndex(string substring, string str, Nullable`1<int> start);
    [NullableContextAttribute("2")]
[FunctionAttribute]
[FunctionAttribute("DB2", "Locate")]
[FunctionAttribute("MySql", "Locate")]
[FunctionAttribute("SapHana", "Locate", "Mono.Cecil.CustomAttributeArgument[]")]
[FunctionAttribute("ClickHouse", "positionUTF8", "Mono.Cecil.CustomAttributeArgument[]")]
[FunctionAttribute("Firebird", "Position")]
public static Nullable`1<int> CharIndex(Nullable`1<char> value, string str);
    [NullableContextAttribute("2")]
[FunctionAttribute]
[FunctionAttribute("DB2", "Locate")]
[FunctionAttribute("MySql", "Locate")]
[FunctionAttribute("SapHana", "Locate", "Mono.Cecil.CustomAttributeArgument[]")]
[ExpressionAttribute("ClickHouse", "positionUTF8({1}, {0}, toUInt32({2}))")]
[FunctionAttribute("Firebird", "Position")]
public static Nullable`1<int> CharIndex(Nullable`1<char> value, string str, Nullable`1<int> start);
    [NullableContextAttribute("2")]
[FunctionAttribute]
[FunctionAttribute("ClickHouse", "reverseUTF8")]
public static string Reverse(string str);
    [NullableContextAttribute("2")]
[FunctionAttribute]
[FunctionAttribute("SQLite", "LeftStr")]
[FunctionAttribute("ClickHouse", "leftUTF8")]
public static string Left(string str, Nullable`1<int> length);
    [NullableContextAttribute("2")]
[FunctionAttribute]
[FunctionAttribute("SQLite", "RightStr")]
[FunctionAttribute("ClickHouse", "rightUTF8")]
public static string Right(string str, Nullable`1<int> length);
    [NullableContextAttribute("2")]
[FunctionAttribute]
[ExpressionAttribute("ClickHouse", "concat(substringUTF8({0}, 1, {1} - 1), {3}, substringUTF8({0}, {1} + {2}))")]
public static string Stuff(string str, Nullable`1<int> start, Nullable`1<int> length, string newString);
    [FunctionAttribute]
[ExpressionAttribute("ClickHouse", "concat(substringUTF8({0}, 1, {1} - 1), {3}, substringUTF8({0}, {1} + {2}))")]
public static string Stuff(IEnumerable`1<string> characterExpression, Nullable`1<int> start, Nullable`1<int> length, string replaceWithExpression);
    [NullableContextAttribute("2")]
[FunctionAttribute]
[ExpressionAttribute("SapHana", "Lpad('',{0},' ')")]
[ExpressionAttribute("ClickHouse", "leftPadUTF8('', toUInt32({0}), ' ')")]
public static string Space(Nullable`1<int> length);
    [NullableContextAttribute("2")]
[FunctionAttribute]
[ExpressionAttribute("ClickHouse", "leftPadUTF8({0}, toUInt32({1}), {2})")]
public static string PadLeft(string str, Nullable`1<int> length, Nullable`1<char> paddingChar);
    [NullableContextAttribute("2")]
[FunctionAttribute]
[ExpressionAttribute("ClickHouse", "rightPadUTF8({0}, toUInt32({1}), {2})")]
public static string PadRight(string str, Nullable`1<int> length, Nullable`1<char> paddingChar);
    [NullableContextAttribute("2")]
[FunctionAttribute("$Replace$")]
public static string Replace(string str, string oldValue, string newValue);
    [NullableContextAttribute("2")]
[FunctionAttribute]
[FunctionAttribute("Sybase", "Str_Replace")]
[FunctionAttribute("ClickHouse", "replaceAll")]
public static string Replace(string str, Nullable`1<char> oldValue, Nullable`1<char> newValue);
    [NullableContextAttribute("2")]
[ExtensionAttribute("LinqToDB.Sql/IsNullOrWhiteSpaceDefaultBuilder")]
[ExtensionAttribute("Oracle", "LinqToDB.Sql/IsNullOrWhiteSpaceOracleBuilder")]
[ExtensionAttribute("Informix", "LinqToDB.Sql/IsNullOrWhiteSpaceInformixBuilder")]
[ExtensionAttribute("SqlServer", "LinqToDB.Sql/IsNullOrWhiteSpaceSqlServerBuilder")]
[ExtensionAttribute("SqlServer.2017", "LinqToDB.Sql/IsNullOrWhiteSpaceSqlServer2017Builder")]
[ExtensionAttribute("SqlServer.2019", "LinqToDB.Sql/IsNullOrWhiteSpaceSqlServer2017Builder")]
[ExtensionAttribute("SqlServer.2022", "LinqToDB.Sql/IsNullOrWhiteSpaceSqlServer2017Builder")]
[ExtensionAttribute("Access", "LinqToDB.Sql/IsNullOrWhiteSpaceAccessBuilder")]
[ExtensionAttribute("Sybase", "LinqToDB.Sql/IsNullOrWhiteSpaceSybaseBuilder")]
[ExtensionAttribute("MySql", "LinqToDB.Sql/IsNullOrWhiteSpaceMySqlBuilder")]
[ExtensionAttribute("Firebird", "LinqToDB.Sql/IsNullOrWhiteSpaceFirebirdBuilder")]
[ExtensionAttribute("SqlCe", "LinqToDB.Sql/IsNullOrWhiteSpaceSqlCeBuilder")]
[ExpressionAttribute("ClickHouse", "empty(replaceRegexpAll(coalesce({0}, ''), '	|
|||| || | | | | | | | | | | | | | | | |　', ''))")]
internal static bool IsNullOrWhiteSpace(string str);
    [NullableContextAttribute("2")]
[FunctionAttribute]
public static string Trim(string str);
    [NullableContextAttribute("2")]
[ExpressionAttribute("Firebird", "TRIM(LEADING FROM {0})")]
[FunctionAttribute("LTrim")]
[FunctionAttribute("ClickHouse", "trimLeft")]
public static string TrimLeft(string str);
    [NullableContextAttribute("2")]
[ExpressionAttribute("Firebird", "TRIM(TRAILING FROM {0})")]
[FunctionAttribute("RTrim")]
[FunctionAttribute("ClickHouse", "trimRight")]
public static string TrimRight(string str);
    [NullableContextAttribute("2")]
[FunctionAttribute]
[ExpressionAttribute("DB2", "Strip({0}, B, {1})")]
[ExpressionAttribute("ClickHouse", "trim(BOTH {1} FROM {0})")]
public static string Trim(string str, Nullable`1<char> ch);
    [NullableContextAttribute("2")]
[ExpressionAttribute("ClickHouse", "trim(LEADING {1} FROM {0})")]
[ExpressionAttribute("Firebird", "TRIM(LEADING {1} FROM {0})")]
[ExpressionAttribute("DB2", "Strip({0}, L, {1})")]
[FunctionAttribute("LTrim")]
public static string TrimLeft(string str, Nullable`1<char> ch);
    [NullableContextAttribute("2")]
[ExpressionAttribute("ClickHouse", "trim(TRAILING {1} FROM {0})")]
[ExpressionAttribute("Firebird", "TRIM(TRAILING {1} FROM {0})")]
[ExpressionAttribute("DB2", "Strip({0}, T, {1})")]
[FunctionAttribute("RTrim")]
public static string TrimRight(string str, Nullable`1<char> ch);
    [NullableContextAttribute("2")]
[FunctionAttribute("$ToLower$")]
public static string Lower(string str);
    [NullableContextAttribute("2")]
[FunctionAttribute("$ToUpper$")]
public static string Upper(string str);
    [NullableContextAttribute("2")]
[ExpressionAttribute("Lpad({0},{1},'0')")]
[ExpressionAttribute("Access", "Format({0}, String('0', {1}))")]
[ExpressionAttribute("Sybase", "right(replicate('0',{1}) + cast({0} as varchar(255)),{1})")]
[ExpressionAttribute("PostgreSQL", "Lpad({0}::text,{1},'0')")]
[ExpressionAttribute("SQLite", "printf('%0{1}d', {0})")]
[ExpressionAttribute("ClickHouse", "leftPadUTF8(toString({0}), toUInt32({1}), '0')")]
[ExpressionAttribute("SqlCe", "REPLICATE('0', {1} - LEN(CAST({0} as NVARCHAR({1})))) + CAST({0} as NVARCHAR({1}))")]
[ExpressionAttribute("SqlServer", "format({0}, 'd{1}')")]
[ExpressionAttribute("SqlServer.2005", "REPLICATE('0', CASE WHEN LEN(CAST({0} as NVARCHAR)) > {1} THEN 0 ELSE ({1} - LEN(CAST({0} as NVARCHAR))) END) + CAST({0} as NVARCHAR)")]
[ExpressionAttribute("SqlServer.2008", "REPLICATE('0', CASE WHEN LEN(CAST({0} as NVARCHAR)) > {1} THEN 0 ELSE ({1} - LEN(CAST({0} as NVARCHAR))) END) + CAST({0} as NVARCHAR)")]
public static string ZeroPad(Nullable`1<int> val, int length);
    [ConcatAttribute]
public static string Concat(Object[] args);
    [ConcatAttribute]
public static string Concat(String[] args);
    [NullableContextAttribute("2")]
[FunctionAttribute]
[FunctionAttribute("Access", "Len")]
[FunctionAttribute("Firebird", "Octet_Length")]
[FunctionAttribute("SqlServer", "DataLength")]
[FunctionAttribute("SqlCe", "DataLength")]
[FunctionAttribute("Sybase", "DataLength")]
public static Nullable`1<int> Length(Binary value);
    [NullableContextAttribute("2")]
[FunctionAttribute]
[FunctionAttribute("Access", "Len")]
[FunctionAttribute("Firebird", "Octet_Length")]
[FunctionAttribute("SqlServer", "DataLength")]
[FunctionAttribute("SqlCe", "DataLength")]
[FunctionAttribute("Sybase", "DataLength")]
public static Nullable`1<int> Length(Byte[] value);
    [PropertyAttribute("CURRENT_TIMESTAMP")]
[PropertyAttribute("Informix", "CURRENT")]
[PropertyAttribute("Access", "Now")]
[FunctionAttribute("ClickHouse", "now")]
public static DateTime GetDate();
    public static DateTime get_CurrentTimestamp();
    public static DateTime get_CurrentTimestampUtc();
    public static DateTime get_CurrentTimestamp2();
    public static DateTimeOffset get_CurrentTzTimestamp();
    [FunctionAttribute]
public static Nullable`1<DateTime> ToDate(Nullable`1<int> year, Nullable`1<int> month, Nullable`1<int> day, Nullable`1<int> hour, Nullable`1<int> minute, Nullable`1<int> second, Nullable`1<int> millisecond);
    [FunctionAttribute]
public static Nullable`1<DateTime> ToDate(Nullable`1<int> year, Nullable`1<int> month, Nullable`1<int> day, Nullable`1<int> hour, Nullable`1<int> minute, Nullable`1<int> second);
    [FunctionAttribute]
public static Nullable`1<DateTime> ToDate(Nullable`1<int> year, Nullable`1<int> month, Nullable`1<int> day);
    public static int get_DateFirst();
    [FunctionAttribute]
public static Nullable`1<DateTime> MakeDateTime(Nullable`1<int> year, Nullable`1<int> month, Nullable`1<int> day);
    [FunctionAttribute]
public static Nullable`1<DateTime> MakeDateTime(Nullable`1<int> year, Nullable`1<int> month, Nullable`1<int> day, Nullable`1<int> hour, Nullable`1<int> minute, Nullable`1<int> second);
    [FunctionAttribute]
public static Nullable`1<decimal> Abs(Nullable`1<decimal> value);
    [FunctionAttribute]
public static Nullable`1<double> Abs(Nullable`1<double> value);
    [FunctionAttribute]
public static Nullable`1<short> Abs(Nullable`1<short> value);
    [FunctionAttribute]
public static Nullable`1<int> Abs(Nullable`1<int> value);
    [FunctionAttribute]
public static Nullable`1<long> Abs(Nullable`1<long> value);
    [CLSCompliantAttribute("False")]
[FunctionAttribute]
public static Nullable`1<sbyte> Abs(Nullable`1<sbyte> value);
    [FunctionAttribute]
public static Nullable`1<float> Abs(Nullable`1<float> value);
    [FunctionAttribute]
public static Nullable`1<double> Acos(Nullable`1<double> value);
    [FunctionAttribute]
public static Nullable`1<double> Asin(Nullable`1<double> value);
    [FunctionAttribute("Access", "Atn")]
[FunctionAttribute]
public static Nullable`1<double> Atan(Nullable`1<double> value);
    [CLSCompliantAttribute("False")]
[FunctionAttribute("SqlServer", "Atn2")]
[FunctionAttribute("DB2", "Atan2", "Mono.Cecil.CustomAttributeArgument[]")]
[FunctionAttribute("SqlCe", "Atn2")]
[FunctionAttribute("Sybase", "Atn2")]
[FunctionAttribute]
public static Nullable`1<double> Atan2(Nullable`1<double> x, Nullable`1<double> y);
    [FunctionAttribute("Informix", "Ceil")]
[FunctionAttribute("Oracle", "Ceil")]
[FunctionAttribute("SapHana", "Ceil")]
[FunctionAttribute]
public static Nullable`1<decimal> Ceiling(Nullable`1<decimal> value);
    [FunctionAttribute("Informix", "Ceil")]
[FunctionAttribute("Oracle", "Ceil")]
[FunctionAttribute("SapHana", "Ceil")]
[FunctionAttribute]
public static Nullable`1<double> Ceiling(Nullable`1<double> value);
    [FunctionAttribute]
public static Nullable`1<double> Cos(Nullable`1<double> value);
    [FunctionAttribute("ClickHouse", "cosh")]
[FunctionAttribute]
public static Nullable`1<double> Cosh(Nullable`1<double> value);
    [ExpressionAttribute("ClickHouse", "1/tan({0})")]
[FunctionAttribute]
public static Nullable`1<double> Cot(Nullable`1<double> value);
    [FunctionAttribute]
public static Nullable`1<decimal> Degrees(Nullable`1<decimal> value);
    [FunctionAttribute]
public static Nullable`1<double> Degrees(Nullable`1<double> value);
    [FunctionAttribute]
public static Nullable`1<short> Degrees(Nullable`1<short> value);
    [FunctionAttribute]
public static Nullable`1<int> Degrees(Nullable`1<int> value);
    [FunctionAttribute]
public static Nullable`1<long> Degrees(Nullable`1<long> value);
    [CLSCompliantAttribute("False")]
[FunctionAttribute]
public static Nullable`1<sbyte> Degrees(Nullable`1<sbyte> value);
    [FunctionAttribute]
public static Nullable`1<float> Degrees(Nullable`1<float> value);
    [FunctionAttribute]
public static Nullable`1<double> Exp(Nullable`1<double> value);
    [FunctionAttribute("Access", "Int")]
[FunctionAttribute]
public static Nullable`1<decimal> Floor(Nullable`1<decimal> value);
    [FunctionAttribute("Access", "Int")]
[FunctionAttribute]
public static Nullable`1<double> Floor(Nullable`1<double> value);
    [FunctionAttribute("Informix", "LogN")]
[FunctionAttribute("Oracle", "Ln")]
[FunctionAttribute("Firebird", "Ln")]
[FunctionAttribute("PostgreSQL", "Ln")]
[FunctionAttribute("SapHana", "Ln")]
[FunctionAttribute]
public static Nullable`1<decimal> Log(Nullable`1<decimal> value);
    [FunctionAttribute("Informix", "LogN")]
[FunctionAttribute("Oracle", "Ln")]
[FunctionAttribute("Firebird", "Ln")]
[FunctionAttribute("PostgreSQL", "Ln")]
[FunctionAttribute("SapHana", "Ln")]
[FunctionAttribute]
public static Nullable`1<double> Log(Nullable`1<double> value);
    [FunctionAttribute("PostgreSQL", "Log")]
[ExpressionAttribute("SapHana", "Log(10,{0})")]
[FunctionAttribute]
public static Nullable`1<double> Log10(Nullable`1<double> value);
    [FunctionAttribute]
[ExpressionAttribute("ClickHouse", "Log({1}) / Log({0})")]
public static Nullable`1<double> Log(Nullable`1<double> newBase, Nullable`1<double> value);
    [FunctionAttribute]
[ExpressionAttribute("ClickHouse", "Log({1}) / Log({0})")]
public static Nullable`1<decimal> Log(Nullable`1<decimal> newBase, Nullable`1<decimal> value);
    [ExpressionAttribute("Access", "{0} ^ {1}")]
[FunctionAttribute]
public static Nullable`1<double> Power(Nullable`1<double> x, Nullable`1<double> y);
    [FunctionAttribute]
[FunctionAttribute("ClickHouse", "roundBankers")]
public static Nullable`1<decimal> RoundToEven(Nullable`1<decimal> value);
    [FunctionAttribute]
[FunctionAttribute("ClickHouse", "roundBankers")]
public static Nullable`1<double> RoundToEven(Nullable`1<double> value);
    [FunctionAttribute]
public static Nullable`1<decimal> Round(Nullable`1<decimal> value);
    [FunctionAttribute]
public static Nullable`1<double> Round(Nullable`1<double> value);
    [FunctionAttribute]
public static Nullable`1<decimal> Round(Nullable`1<decimal> value, Nullable`1<int> precision);
    [FunctionAttribute]
public static Nullable`1<double> Round(Nullable`1<double> value, Nullable`1<int> precision);
    [FunctionAttribute]
[FunctionAttribute("ClickHouse", "roundBankers")]
public static Nullable`1<decimal> RoundToEven(Nullable`1<decimal> value, Nullable`1<int> precision);
    [FunctionAttribute]
[FunctionAttribute("ClickHouse", "roundBankers")]
public static Nullable`1<double> RoundToEven(Nullable`1<double> value, Nullable`1<int> precision);
    [FunctionAttribute("Access", "Sgn")]
[FunctionAttribute]
public static Nullable`1<int> Sign(Nullable`1<decimal> value);
    [FunctionAttribute("Access", "Sgn")]
[FunctionAttribute]
public static Nullable`1<int> Sign(Nullable`1<double> value);
    [FunctionAttribute("Access", "Sgn")]
[FunctionAttribute]
public static Nullable`1<int> Sign(Nullable`1<short> value);
    [FunctionAttribute("Access", "Sgn")]
[FunctionAttribute]
public static Nullable`1<int> Sign(Nullable`1<int> value);
    [FunctionAttribute("Access", "Sgn")]
[FunctionAttribute]
public static Nullable`1<int> Sign(Nullable`1<long> value);
    [CLSCompliantAttribute("False")]
[FunctionAttribute("Access", "Sgn")]
[FunctionAttribute]
public static Nullable`1<int> Sign(Nullable`1<sbyte> value);
    [FunctionAttribute("Access", "Sgn")]
[FunctionAttribute]
public static Nullable`1<int> Sign(Nullable`1<float> value);
    [FunctionAttribute]
public static Nullable`1<double> Sin(Nullable`1<double> value);
    [FunctionAttribute("ClickHouse", "sinh")]
[FunctionAttribute]
public static Nullable`1<double> Sinh(Nullable`1<double> value);
    [FunctionAttribute("Access", "Sqr")]
[FunctionAttribute]
public static Nullable`1<double> Sqrt(Nullable`1<double> value);
    [FunctionAttribute]
public static Nullable`1<double> Tan(Nullable`1<double> value);
    [FunctionAttribute]
public static Nullable`1<double> Tanh(Nullable`1<double> value);
    [ExpressionAttribute("SqlServer", "Round({0}, 0, 1)")]
[ExpressionAttribute("DB2", "Truncate({0}, 0)")]
[ExpressionAttribute("Informix", "Trunc({0}, 0)")]
[ExpressionAttribute("Oracle", "Trunc({0}, 0)")]
[ExpressionAttribute("Firebird", "Trunc({0}, 0)")]
[ExpressionAttribute("PostgreSQL", "Trunc({0}, 0)")]
[ExpressionAttribute("MySql", "Truncate({0}, 0)")]
[ExpressionAttribute("SqlCe", "Round({0}, 0, 1)")]
[ExpressionAttribute("SapHana", "Round({0}, 0, ROUND_DOWN)")]
[FunctionAttribute]
public static Nullable`1<decimal> Truncate(Nullable`1<decimal> value);
    [ExpressionAttribute("SqlServer", "Round({0}, 0, 1)")]
[ExpressionAttribute("DB2", "Truncate({0}, 0)")]
[ExpressionAttribute("Informix", "Trunc({0}, 0)")]
[ExpressionAttribute("Oracle", "Trunc({0}, 0)")]
[ExpressionAttribute("Firebird", "Trunc({0}, 0)")]
[ExpressionAttribute("PostgreSQL", "Trunc({0}, 0)")]
[ExpressionAttribute("MySql", "Truncate({0}, 0)")]
[ExpressionAttribute("SqlCe", "Round({0}, 0, 1)")]
[ExpressionAttribute("SapHana", "Round({0}, 0, ROUND_DOWN)")]
[FunctionAttribute]
public static Nullable`1<double> Truncate(Nullable`1<double> value);
    [FunctionAttribute("SqlServer", "IDENT_CURRENT")]
[ExpressionAttribute("NULL")]
internal static object CurrentIdentity(string tableName);
    [FunctionAttribute("SqlServer", "IDENT_INCR")]
[ExpressionAttribute("NULL")]
internal static object IdentityStep(string tableName);
    [ExtensionAttribute("DatePart")]
[ExtensionAttribute("DB2", "")]
[ExtensionAttribute("Informix", "")]
[ExtensionAttribute("MySql", "Extract({part} from {date})")]
[ExtensionAttribute("PostgreSQL", "Cast(Floor(Extract({part} from {date})) as int)")]
[ExtensionAttribute("Firebird", "Cast(Floor(Extract({part} from {date})) as int)")]
[ExtensionAttribute("SQLite", "Cast(StrFTime('%{part}', {date}) as int)")]
[ExtensionAttribute("Access", "DatePart('{part}', {date})")]
[ExtensionAttribute("SapHana", "")]
[ExtensionAttribute("Oracle", "")]
[ExtensionAttribute("ClickHouse", "")]
public static Nullable`1<int> DatePart(DateParts part, Nullable`1<DateTime> date);
    [ExtensionAttribute("DateAdd")]
[ExtensionAttribute("Oracle", "")]
[ExtensionAttribute("DB2", "")]
[ExtensionAttribute("Informix", "")]
[ExtensionAttribute("PostgreSQL", "")]
[ExtensionAttribute("MySql", "")]
[ExtensionAttribute("SQLite", "")]
[ExtensionAttribute("Access", "")]
[ExtensionAttribute("SapHana", "")]
[ExtensionAttribute("Firebird", "")]
[ExtensionAttribute("ClickHouse", "")]
public static Nullable`1<DateTime> DateAdd(DateParts part, Nullable`1<double> number, Nullable`1<DateTime> date);
    [CLSCompliantAttribute("False")]
[ExtensionAttribute("DateDiff")]
[ExtensionAttribute("MySql", "TIMESTAMPDIFF")]
[ExtensionAttribute("DB2", "")]
[ExtensionAttribute("SapHana", "")]
[ExtensionAttribute("SQLite", "")]
[ExtensionAttribute("Oracle", "")]
[ExtensionAttribute("PostgreSQL", "")]
[ExtensionAttribute("Access", "")]
[ExtensionAttribute("ClickHouse", "")]
public static Nullable`1<int> DateDiff(DateParts part, Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    [ExtensionAttribute("DatePart")]
[ExtensionAttribute("DB2", "")]
[ExtensionAttribute("Informix", "")]
[ExtensionAttribute("MySql", "Extract({part} from {date})")]
[ExtensionAttribute("PostgreSQL", "Cast(Floor(Extract({part} from {date})) as int)")]
[ExtensionAttribute("Firebird", "Cast(Floor(Extract({part} from {date})) as int)")]
[ExtensionAttribute("SQLite", "Cast(StrFTime('%{part}', {date}) as int)")]
[ExtensionAttribute("Access", "DatePart('{part}', {date})")]
[ExtensionAttribute("SapHana", "")]
[ExtensionAttribute("Oracle", "")]
[ExtensionAttribute("ClickHouse", "")]
public static Nullable`1<int> DatePart(DateParts part, Nullable`1<DateTimeOffset> date);
    [ExtensionAttribute("DateAdd")]
[ExtensionAttribute("PostgreSQL", "")]
[ExtensionAttribute("Oracle", "")]
[ExtensionAttribute("DB2", "")]
[ExtensionAttribute("Informix", "")]
[ExtensionAttribute("MySql", "")]
[ExtensionAttribute("SQLite", "")]
[ExtensionAttribute("Access", "")]
[ExtensionAttribute("SapHana", "")]
[ExtensionAttribute("Firebird", "")]
[ExtensionAttribute("ClickHouse", "")]
public static Nullable`1<DateTimeOffset> DateAdd(DateParts part, Nullable`1<double> number, Nullable`1<DateTimeOffset> date);
    [CLSCompliantAttribute("False")]
[ExtensionAttribute("DateDiff")]
[ExtensionAttribute("MySql", "TIMESTAMPDIFF")]
[ExtensionAttribute("DB2", "")]
[ExtensionAttribute("SapHana", "")]
[ExtensionAttribute("SQLite", "")]
[ExtensionAttribute("PostgreSQL", "")]
[ExtensionAttribute("Access", "")]
[ExtensionAttribute("ClickHouse", "")]
public static Nullable`1<int> DateDiff(DateParts part, Nullable`1<DateTimeOffset> startDate, Nullable`1<DateTimeOffset> endDate);
    [PureAttribute]
[ExtensionAttribute("")]
public static string FieldName(ITable`1<T> table, Expression`1<Func`2<T, object>> fieldExpr);
    [PureAttribute]
[ExtensionAttribute("")]
public static string FieldName(ITable`1<T> table, Expression`1<Func`2<T, object>> fieldExpr, bool qualified);
    [ExtensionAttribute("")]
public static ISqlExpression FieldExpr(ITable`1<T> table, Expression`1<Func`2<T, TV>> fieldExpr);
    [ExtensionAttribute("")]
public static ISqlExpression FieldExpr(ITable`1<T> table, Expression`1<Func`2<T, TV>> fieldExpr, bool qualified);
    [ExtensionAttribute("")]
internal static ISqlExpression FieldsExpr(ITable`1<T> table, Expression`1<Func`2<T, object>> fieldsExpr);
    [ExtensionAttribute("")]
internal static ISqlExpression FieldsExpr(ITable`1<T> table, Expression`1<Func`2<T, object>> fieldsExpr, bool qualified);
    private static ColumnDescriptor[] GetColumnsFromExpression(Type entityType, LambdaExpression fieldExpr, MappingSchema mappingSchema, DataOptions options);
    private static ColumnDescriptor GetColumnFromExpression(Type entityType, LambdaExpression fieldExpr, MappingSchema mappingSchema, DataOptions options);
    [PureAttribute]
[ExtensionAttribute("")]
public static string FieldName(object fieldExpr);
    [PureAttribute]
[ExtensionAttribute("")]
public static string FieldName(object fieldExpr, bool qualified);
    [PureAttribute]
[ExtensionAttribute("")]
public static ISqlExpression FieldExpr(object fieldExpr);
    [PureAttribute]
[ExtensionAttribute("")]
public static ISqlExpression FieldExpr(object fieldExpr, bool qualified);
    [ExtensionAttribute("")]
public static TColumn TableField(TEntity entity, string fieldName);
    [NullableContextAttribute("2")]
[ExtensionAttribute("")]
internal static TColumn TableOrColumnAsField(object entityOrColumn);
    [ExtensionAttribute("")]
internal static TColumn TableAsField(TEntity entity);
    [ExtensionAttribute("")]
public static string TableName(ITable`1<T> table);
    [ExtensionAttribute("")]
public static string TableName(ITable`1<T> table, TableQualification qualification);
    [ExtensionAttribute("")]
public static string TableName(object tableExpr);
    [ExtensionAttribute("")]
public static string TableName(object tableExpr, TableQualification qualification);
    [ExtensionAttribute("")]
public static ISqlExpression TableExpr(ITable`1<T> table);
    [ExtensionAttribute("")]
public static ISqlExpression TableExpr(ITable`1<T> table, TableQualification qualification);
    [ExtensionAttribute("")]
public static ISqlExpression TableExpr(object tableExpr);
    [ExtensionAttribute("")]
public static ISqlExpression TableExpr(object tableExpr, TableQualification qualification);
    [ExtensionAttribute("")]
public static ISqlExpression AliasExpr();
    [ExtensionAttribute("")]
[StringFormatMethodAttribute("sql")]
public static T Expr(FormattableString sql);
    [ExtensionAttribute("")]
[StringFormatMethodAttribute("sql")]
public static T Expr(RawSqlString sql, Object[] parameters);
    [NullableContextAttribute("2")]
public static ISqlExtension get_Ext();
    [ExtensionAttribute("GROUPING({fields, ', '})")]
public static int Grouping(Object[] fields);
    [ExtensionAttribute("")]
public static SqlRow`2<T1, T2> Row(T1 value1, T2 value2);
    [ExtensionAttribute("")]
public static SqlRow`2<T1, SqlRow`2<T2, T3>> Row(T1 value1, T2 value2, T3 value3);
    [ExtensionAttribute("")]
public static SqlRow`2<T1, SqlRow`2<T2, SqlRow`2<T3, T4>>> Row(T1 value1, T2 value2, T3 value3, T4 value4);
    [ExtensionAttribute("")]
public static SqlRow`2<T1, SqlRow`2<T2, SqlRow`2<T3, SqlRow`2<T4, T5>>>> Row(T1 value1, T2 value2, T3 value3, T4 value4, T5 value5);
    [ExtensionAttribute("")]
public static SqlRow`2<T1, SqlRow`2<T2, SqlRow`2<T3, SqlRow`2<T4, SqlRow`2<T5, T6>>>>> Row(T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6);
    [ExtensionAttribute("")]
public static SqlRow`2<T1, SqlRow`2<T2, SqlRow`2<T3, SqlRow`2<T4, SqlRow`2<T5, SqlRow`2<T6, T7>>>>>> Row(T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7);
    [ExtensionAttribute("")]
public static SqlRow`2<T1, SqlRow`2<T2, SqlRow`2<T3, SqlRow`2<T4, SqlRow`2<T5, SqlRow`2<T6, SqlRow`2<T7, T8>>>>>>> Row(T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7, T8 value8);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[ExtensionAttribute("", "")]
public static bool Overlaps(SqlRow`2<T1, T2> thisRow, SqlRow`2<T3, T4> other);
    [ExtensionAttribute]
[ExtensionAttribute("SqlServer.2022", "STRING_AGG({source}, {separator}){_}{aggregation_ordering?}")]
[ExtensionAttribute("SqlServer.2019", "STRING_AGG({source}, {separator}){_}{aggregation_ordering?}")]
[ExtensionAttribute("SqlServer.2017", "STRING_AGG({source}, {separator}){_}{aggregation_ordering?}")]
[ExtensionAttribute("PostgreSQL", "STRING_AGG({source}, {separator}{_}{order_by_clause?})")]
[ExtensionAttribute("SapHana", "STRING_AGG({source}, {separator}{_}{order_by_clause?})")]
[ExtensionAttribute("SQLite", "GROUP_CONCAT({source}, {separator})")]
[ExtensionAttribute("MySql", "GROUP_CONCAT({source}{_}{order_by_clause?} SEPARATOR {separator})")]
[ExtensionAttribute("Oracle", "LISTAGG({source}, {separator}) {aggregation_ordering}")]
[ExtensionAttribute("Oracle.Native", "LISTAGG({source}, {separator}) {aggregation_ordering}")]
[ExtensionAttribute("DB2", "LISTAGG({source}, {separator}){_}{aggregation_ordering?}")]
[ExtensionAttribute("DB2.LUW", "LISTAGG({source}, {separator}){_}{aggregation_ordering?}")]
[ExtensionAttribute("DB2.z/OS", "LISTAGG({source}, {separator}){_}{aggregation_ordering?}")]
[ExtensionAttribute("Firebird", "LIST({source}, {separator})")]
[ExtensionAttribute("ClickHouse", "arrayStringConcat(groupArray({source}), {separator})")]
public static IAggregateFunctionNotOrdered`2<string, string> StringAggregate(IQueryable`1<string> source, string separator);
    [ExtensionAttribute]
[ExtensionAttribute("SqlServer.2022", "STRING_AGG({selector}, {separator}){_}{aggregation_ordering?}")]
[ExtensionAttribute("SqlServer.2019", "STRING_AGG({selector}, {separator}){_}{aggregation_ordering?}")]
[ExtensionAttribute("SqlServer.2017", "STRING_AGG({selector}, {separator}){_}{aggregation_ordering?}")]
[ExtensionAttribute("PostgreSQL", "STRING_AGG({selector}, {separator}{_}{order_by_clause?})")]
[ExtensionAttribute("SapHana", "STRING_AGG({selector}, {separator}{_}{order_by_clause?})")]
[ExtensionAttribute("SQLite", "GROUP_CONCAT({selector}, {separator})")]
[ExtensionAttribute("MySql", "GROUP_CONCAT({selector}{_}{order_by_clause?} SEPARATOR {separator})")]
[ExtensionAttribute("Oracle", "LISTAGG({selector}, {separator}) {aggregation_ordering}")]
[ExtensionAttribute("Oracle.Native", "LISTAGG({selector}, {separator}) {aggregation_ordering}")]
[ExtensionAttribute("DB2", "LISTAGG({selector}, {separator}){_}{aggregation_ordering?}")]
[ExtensionAttribute("DB2.LUW", "LISTAGG({selector}, {separator}){_}{aggregation_ordering?}")]
[ExtensionAttribute("DB2.z/OS", "LISTAGG({selector}, {separator}){_}{aggregation_ordering?}")]
[ExtensionAttribute("Firebird", "LIST({selector}, {separator})")]
[ExtensionAttribute("ClickHouse", "arrayStringConcat(groupArray({selector}), {separator})")]
public static IAggregateFunctionNotOrdered`2<T, string> StringAggregate(IEnumerable`1<T> source, string separator, Func`2<T, string> selector);
    [ExtensionAttribute]
[ExtensionAttribute("SqlServer.2022", "STRING_AGG({selector}, {separator}){_}{aggregation_ordering?}")]
[ExtensionAttribute("SqlServer.2019", "STRING_AGG({selector}, {separator}){_}{aggregation_ordering?}")]
[ExtensionAttribute("SqlServer.2017", "STRING_AGG({selector}, {separator}){_}{aggregation_ordering?}")]
[ExtensionAttribute("PostgreSQL", "STRING_AGG({selector}, {separator}{_}{order_by_clause?})")]
[ExtensionAttribute("SapHana", "STRING_AGG({selector}, {separator}{_}{order_by_clause?})")]
[ExtensionAttribute("SQLite", "GROUP_CONCAT({selector}, {separator})")]
[ExtensionAttribute("MySql", "GROUP_CONCAT({selector}{_}{order_by_clause?} SEPARATOR {separator})")]
[ExtensionAttribute("Oracle", "LISTAGG({selector}, {separator}) {aggregation_ordering}")]
[ExtensionAttribute("Oracle.Native", "LISTAGG({selector}, {separator}) {aggregation_ordering}")]
[ExtensionAttribute("DB2", "LISTAGG({selector}, {separator}){_}{aggregation_ordering?}")]
[ExtensionAttribute("DB2.LUW", "LISTAGG({selector}, {separator}){_}{aggregation_ordering?}")]
[ExtensionAttribute("DB2.z/OS", "LISTAGG({selector}, {separator}){_}{aggregation_ordering?}")]
[ExtensionAttribute("Firebird", "LIST({selector}, {separator})")]
[ExtensionAttribute("ClickHouse", "arrayStringConcat(groupArray({selector}), {separator})")]
public static IAggregateFunctionNotOrdered`2<T, string> StringAggregate(IQueryable`1<T> source, string separator, Expression`1<Func`2<T, string>> selector);
    [ExtensionAttribute]
[ExtensionAttribute("SqlServer.2022", "STRING_AGG({source}, {separator}){_}{aggregation_ordering?}")]
[ExtensionAttribute("SqlServer.2019", "STRING_AGG({source}, {separator}){_}{aggregation_ordering?}")]
[ExtensionAttribute("SqlServer.2017", "STRING_AGG({source}, {separator}){_}{aggregation_ordering?}")]
[ExtensionAttribute("PostgreSQL", "STRING_AGG({source}, {separator}{_}{order_by_clause?})")]
[ExtensionAttribute("SapHana", "STRING_AGG({source}, {separator}{_}{order_by_clause?})")]
[ExtensionAttribute("SQLite", "GROUP_CONCAT({source}, {separator})")]
[ExtensionAttribute("MySql", "GROUP_CONCAT({source}{_}{order_by_clause?} SEPARATOR {separator})")]
[ExtensionAttribute("Oracle", "LISTAGG({source}, {separator}) {aggregation_ordering}")]
[ExtensionAttribute("Oracle.Native", "LISTAGG({source}, {separator}) {aggregation_ordering}")]
[ExtensionAttribute("DB2", "LISTAGG({source}, {separator}){_}{aggregation_ordering?}")]
[ExtensionAttribute("DB2.LUW", "LISTAGG({source}, {separator}){_}{aggregation_ordering?}")]
[ExtensionAttribute("DB2.z/OS", "LISTAGG({source}, {separator}){_}{aggregation_ordering?}")]
[ExtensionAttribute("Firebird", "LIST({source}, {separator})")]
[ExtensionAttribute("ClickHouse", "arrayStringConcat(groupArray({source}), {separator})")]
public static IAggregateFunctionNotOrdered`2<string, string> StringAggregate(IEnumerable`1<string> source, string separator);
    [ExtensionAttribute("SqlServer.2022", "CONCAT_WS({separator}, {argument, ', '})")]
[ExtensionAttribute("SqlServer.2019", "CONCAT_WS({separator}, {argument, ', '})")]
[ExtensionAttribute("SqlServer.2017", "CONCAT_WS({separator}, {argument, ', '})")]
[ExtensionAttribute("PostgreSQL", "CONCAT_WS({separator}, {argument, ', '})")]
[ExtensionAttribute("MySql", "CONCAT_WS({separator}, {argument, ', '})")]
[ExtensionAttribute("SqlServer", "")]
[ExtensionAttribute("SQLite", "")]
[ExtensionAttribute("ClickHouse", "arrayStringConcat([{arguments, ', '}], {separator})")]
public static string ConcatStrings(string separator, String[] arguments);
    public static SqlID TableAlias(string id);
    public static SqlID TableName(string id);
    public static SqlID TableSpec(string id);
}
public enum LinqToDB.SqlJoinType : Enum {
    public int value__;
    public static SqlJoinType Inner;
    public static SqlJoinType Left;
    public static SqlJoinType Right;
    public static SqlJoinType Full;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.SqlOptions : object {
    [CompilerGeneratedAttribute]
private bool <EnableConstantExpressionInOrderBy>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <GenerateFinalAliases>k__BackingField;
    private Nullable`1<int> _configurationID;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public bool EnableConstantExpressionInOrderBy { get; public set; }
    public bool GenerateFinalAliases { get; public set; }
    private int LinqToDB.Common.Internal.IConfigurationID.ConfigurationID { get; }
    public SqlOptions(bool EnableConstantExpressionInOrderBy, bool GenerateFinalAliases);
    private SqlOptions(SqlOptions original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public bool get_EnableConstantExpressionInOrderBy();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_EnableConstantExpressionInOrderBy(bool value);
    [CompilerGeneratedAttribute]
public bool get_GenerateFinalAliases();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_GenerateFinalAliases(bool value);
    private sealed virtual override int LinqToDB.Common.Internal.IConfigurationID.get_ConfigurationID();
    public int Pack();
    public SqlOptions Unpack(int n);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(SqlOptions other);
    public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(SqlOptions left, SqlOptions right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(SqlOptions left, SqlOptions right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public SqlOptions <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(Boolean& EnableConstantExpressionInOrderBy, Boolean& GenerateFinalAliases);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class LinqToDB.SqlProvider.BasicSqlBuilder : object {
    [CompilerGeneratedAttribute]
private OptimizationContext <OptimizationContext>k__BackingField;
    [CompilerGeneratedAttribute]
private MappingSchema <MappingSchema>k__BackingField;
    [CompilerGeneratedAttribute]
private StringBuilder <StringBuilder>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlProviderFlags <SqlProviderFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private DataOptions <DataOptions>k__BackingField;
    [NullableAttribute("2")]
protected IDataProvider DataProvider;
    protected SqlStatement Statement;
    protected int Indent;
    protected Step BuildStep;
    protected ISqlOptimizer SqlOptimizer;
    protected bool SkipAlias;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<Action> _finalBuilders;
    protected static Char[] EndLine;
    private static Regex _selectDetector;
    private static ConcurrentDictionary`2<Type, ISqlExtensionBuilder> _extensionBuilders;
    [NullableAttribute("2")]
protected object BuildExpressionContext;
    [NullableAttribute("2")]
private string _name;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private HashSet`1<string> _aliases;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Dictionary`2<string, TableIDInfo> <TableIDs>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <TablePath>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <QueryName>k__BackingField;
    private int _testReplaceNumber;
    public OptimizationContext OptimizationContext { get; protected set; }
    public MappingSchema MappingSchema { get; }
    public StringBuilder StringBuilder { get; public set; }
    public SqlProviderFlags SqlProviderFlags { get; }
    public DataOptions DataOptions { get; }
    protected ValueToSqlConverter ValueToSqlConverter { get; }
    public bool IsNestedJoinSupported { get; }
    public bool IsNestedJoinParenthesisRequired { get; }
    public bool CteFirst { get; }
    public bool WrapJoinCondition { get; }
    protected string InlineComma { get; }
    protected string Comma { get; }
    protected string OpenParens { get; }
    protected bool IsRecursiveCteKeywordRequired { get; }
    protected bool IsCteColumnListSupported { get; }
    protected bool SupportsBooleanInColumn { get; }
    protected bool SupportsNullInColumn { get; }
    protected string UpdateKeyword { get; }
    protected string UpdateSetKeyword { get; }
    protected string OutputKeyword { get; }
    protected string DeletedOutputTable { get; }
    protected string InsertedOutputTable { get; }
    protected bool SkipFirst { get; }
    [NullableAttribute("2")]
protected string SkipFormat { get; }
    protected bool OffsetFirst { get; }
    protected string TakePercent { get; }
    protected string TakeTies { get; }
    public string Name { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Dictionary`2<string, TableIDInfo> TableIDs { get; public set; }
    [NullableAttribute("2")]
public string TablePath { get; public set; }
    [NullableAttribute("2")]
public string QueryName { get; public set; }
    protected bool SupportsColumnAliasesInSource { get; }
    protected bool RequiresConstantColumnAliases { get; }
    protected bool IsValuesSyntaxSupported { get; }
    protected bool IsEmptyValuesSourceSupported { get; }
    [NullableAttribute("2")]
protected string FakeTable { get; }
    [NullableAttribute("2")]
protected string FakeTableSchema { get; }
    protected BasicSqlBuilder(IDataProvider provider, MappingSchema mappingSchema, DataOptions dataOptions, ISqlOptimizer sqlOptimizer, SqlProviderFlags sqlProviderFlags);
    protected BasicSqlBuilder(BasicSqlBuilder parentBuilder);
    private static BasicSqlBuilder();
    [CompilerGeneratedAttribute]
public OptimizationContext get_OptimizationContext();
    [CompilerGeneratedAttribute]
protected void set_OptimizationContext(OptimizationContext value);
    [CompilerGeneratedAttribute]
public sealed virtual MappingSchema get_MappingSchema();
    [CompilerGeneratedAttribute]
public sealed virtual StringBuilder get_StringBuilder();
    [CompilerGeneratedAttribute]
public void set_StringBuilder(StringBuilder value);
    [CompilerGeneratedAttribute]
public sealed virtual SqlProviderFlags get_SqlProviderFlags();
    [CompilerGeneratedAttribute]
public DataOptions get_DataOptions();
    protected ValueToSqlConverter get_ValueToSqlConverter();
    public virtual bool get_IsNestedJoinSupported();
    public virtual bool get_IsNestedJoinParenthesisRequired();
    public virtual bool get_CteFirst();
    public virtual bool get_WrapJoinCondition();
    protected virtual bool CanSkipRootAliases(SqlStatement statement);
    public virtual int CommandCount(SqlStatement statement);
    protected virtual string get_InlineComma();
    protected virtual string get_Comma();
    protected virtual string get_OpenParens();
    protected StringBuilder RemoveInlineComma();
    public T ConvertElement(T element);
    public sealed virtual void BuildSql(int commandNumber, SqlStatement statement, StringBuilder sb, OptimizationContext optimizationContext, int startIndent);
    protected virtual void BuildSetOperation(SetOperation operation, StringBuilder sb);
    protected virtual void BuildSql(int commandNumber, SqlStatement statement, StringBuilder sb, OptimizationContext optimizationContext, int indent, bool skipAlias);
    protected virtual void MergeSqlBuilderData(BasicSqlBuilder sqlBuilder);
    protected virtual void BuildCommand(SqlStatement statement, int commandNumber);
    protected virtual void FinalizeBuildQuery(SqlStatement statement);
    protected virtual void BuildSqlBuilder(SelectQuery selectQuery, int indent, bool skipAlias);
    protected abstract virtual ISqlBuilder CreateSqlBuilder();
    protected string WithStringBuilderBuildExpression(ISqlExpression expr);
    protected string WithStringBuilderBuildExpression(int precedence, ISqlExpression expr);
    protected string WithStringBuilder(Action`1<TContext> func, TContext context);
    private void WithStringBuilder(StringBuilder sb, Action`1<TContext> func, TContext context);
    protected virtual bool ParenthesizeJoin(List`1<SqlJoinedTable> joins);
    protected virtual void BuildSql();
    private void BuildSqlImpl();
    protected void BuildSqlForUnion();
    protected virtual void BuildDeleteQuery(SqlDeleteStatement deleteStatement);
    protected void BuildDeleteQuery2(SqlDeleteStatement deleteStatement);
    protected virtual void BuildUpdateQuery(SqlStatement statement, SelectQuery selectQuery, SqlUpdateClause updateClause);
    protected virtual void BuildSelectQuery(SqlSelectStatement selectStatement);
    protected virtual void BuildCteBody(SelectQuery selectQuery);
    protected virtual void BuildInsertQuery(SqlStatement statement, SqlInsertClause insertClause, bool addAlias);
    protected void BuildInsertQuery2(SqlStatement statement, SqlInsertClause insertClause, bool addAlias);
    protected virtual void BuildMultiInsertQuery(SqlMultiInsertStatement statement);
    protected virtual void BuildUnknownQuery();
    public virtual StringBuilder BuildObjectName(StringBuilder sb, SqlObjectName name, ConvertType objectType, bool escape, TableOptions tableOptions, bool withoutSuffix);
    protected virtual StringBuilder BuildObjectNameSuffix(StringBuilder sb, SqlObjectName name, bool escape);
    public sealed virtual string ConvertInline(string value, ConvertType convertType);
    public virtual StringBuilder Convert(StringBuilder sb, string value, ConvertType convertType);
    protected virtual bool get_IsRecursiveCteKeywordRequired();
    protected virtual bool get_IsCteColumnListSupported();
    [NullableContextAttribute("2")]
protected virtual void BuildWithClause(SqlWithClause with);
    protected virtual void BuildSelectClause(SelectQuery selectQuery);
    [NullableContextAttribute("2")]
protected virtual void StartStatementQueryExtensions(SelectQuery selectQuery);
    protected virtual IEnumerable`1<SqlColumn> GetSelectedColumns(SelectQuery selectQuery);
    protected virtual void BuildColumns(SelectQuery selectQuery);
    protected virtual void BuildOutputColumnExpressions(IReadOnlyList`1<ISqlExpression> expressions);
    protected virtual bool get_SupportsBooleanInColumn();
    protected virtual bool get_SupportsNullInColumn();
    protected virtual ISqlExpression WrapBooleanExpression(ISqlExpression expr);
    [NullableContextAttribute("2")]
protected virtual void BuildColumnExpression(SelectQuery selectQuery, ISqlExpression expr, string alias, Boolean& addAlias);
    protected virtual ISqlExpression WrapColumnExpression(ISqlExpression expr);
    protected virtual void BuildAlterDeleteClause(SqlDeleteStatement deleteStatement);
    protected virtual void BuildDeleteClause(SqlDeleteStatement deleteStatement);
    protected virtual void BuildUpdateWhereClause(SelectQuery selectQuery);
    protected virtual void BuildUpdateClause(SqlStatement statement, SelectQuery selectQuery, SqlUpdateClause updateClause);
    protected virtual void BuildUpdateTable(SelectQuery selectQuery, SqlUpdateClause updateClause);
    protected virtual void BuildUpdateTableName(SelectQuery selectQuery, SqlUpdateClause updateClause);
    protected virtual string get_UpdateKeyword();
    protected virtual string get_UpdateSetKeyword();
    protected virtual void BuildUpdateSet(SelectQuery selectQuery, SqlUpdateClause updateClause);
    protected virtual string get_OutputKeyword();
    protected virtual string get_DeletedOutputTable();
    protected virtual string get_InsertedOutputTable();
    protected void BuildInsertClause(SqlStatement statement, SqlInsertClause insertClause, bool addAlias);
    protected virtual void BuildEmptyInsert(SqlInsertClause insertClause);
    protected virtual void BuildOutputSubclause(SqlStatement statement, SqlInsertClause insertClause);
    [NullableContextAttribute("2")]
protected virtual void BuildOutputSubclause(SqlOutputClause output);
    protected virtual void BuildInsertClause(SqlStatement statement, SqlInsertClause insertClause, string insertText, bool appendTableName, bool addAlias);
    protected virtual void BuildGetIdentity(SqlInsertClause insertClause);
    protected virtual void BuildInsertOrUpdateQuery(SqlInsertOrUpdateStatement insertOrUpdate);
    protected virtual void BuildInsertOrUpdateQueryAsMerge(SqlInsertOrUpdateStatement insertOrUpdate, string fromDummyTable);
    protected void BuildInsertOrUpdateQueryAsUpdateInsert(SqlInsertOrUpdateStatement insertOrUpdate);
    protected virtual void BuildTruncateTableStatement(SqlTruncateTableStatement truncateTable);
    protected virtual void BuildTruncateTable(SqlTruncateTableStatement truncateTable);
    protected virtual void BuildDropTableStatement(SqlDropTableStatement dropTable);
    protected void BuildDropTableStatementIfExists(SqlDropTableStatement dropTable);
    protected virtual void BuildCreateTableCommand(SqlTable table);
    protected virtual void BuildStartCreateTableStatement(SqlCreateTableStatement createTable);
    protected virtual void BuildEndCreateTableStatement(SqlCreateTableStatement createTable);
    protected virtual void BuildCreateTableStatement(SqlCreateTableStatement createTable);
    internal void BuildTypeName(StringBuilder sb, SqlDataType type);
    protected virtual void BuildCreateTableFieldType(SqlField field);
    protected virtual void BuildCreateTableNullAttribute(SqlField field, DefaultNullable defaultNullable);
    protected virtual void BuildCreateTableIdentityAttribute1(SqlField field);
    protected virtual void BuildCreateTableIdentityAttribute2(SqlField field);
    protected virtual void BuildCreateTablePrimaryKey(SqlCreateTableStatement createTable, string pkName, IEnumerable`1<string> fieldNames);
    protected virtual void BuildDeleteFromClause(SqlDeleteStatement deleteStatement);
    protected virtual void BuildFromClause(SqlStatement statement, SelectQuery selectQuery);
    protected virtual void BuildFromExtensions(SelectQuery selectQuery);
    [NullableContextAttribute("2")]
protected virtual Nullable`1<bool> BuildPhysicalTable(ISqlTableSource table, string alias, string defaultDatabaseName);
    protected virtual void BuildSqlValuesTable(SqlValuesTable valuesTable, string alias, Boolean& aliasBuilt);
    private void BuildSqlValuesAlias(SqlValuesTable valuesTable, string alias);
    protected void BuildEmptyValues(SqlValuesTable valuesTable);
    protected void BuildTableName(SqlTableSource ts, bool buildName, bool buildAlias);
    protected virtual void BuildTableExtensions(SqlTable table, string alias);
    protected virtual void BuildTableNameExtensions(SqlTable table);
    protected static ISqlExtensionBuilder GetExtensionBuilder(Type builderType);
    protected void BuildTableExtensions(StringBuilder sb, SqlTable table, string alias, string prefix, string delimiter, string suffix);
    protected void BuildTableExtensions(StringBuilder sb, SqlTable table, string alias, string prefix, string delimiter, string suffix, Func`2<SqlQueryExtension, bool> tableExtensionFilter);
    protected void BuildQueryExtensions(StringBuilder sb, List`1<SqlQueryExtension> sqlQueryExtensions, string prefix, string delimiter, string suffix, QueryExtensionScope scope);
    protected void BuildJoinTable(SelectQuery selectQuery, SqlJoinedTable join, Int32& joinCounter);
    protected virtual bool BuildJoinType(SqlJoinedTable join, SqlSearchCondition condition);
    protected virtual bool BuildWhere(SelectQuery selectQuery);
    protected virtual void BuildWhereClause(SelectQuery selectQuery);
    protected virtual void BuildGroupByClause(SelectQuery selectQuery);
    protected virtual void BuildGroupByBody(GroupingType groupingType, List`1<ISqlExpression> items);
    protected virtual void BuildHavingClause(SelectQuery selectQuery);
    protected virtual void BuildOrderByClause(SelectQuery selectQuery);
    protected virtual void BuildExpressionForOrderBy(ISqlExpression expr);
    protected virtual bool get_SkipFirst();
    [NullableContextAttribute("2")]
protected virtual string get_SkipFormat();
    protected virtual string FirstFormat(SelectQuery selectQuery);
    protected virtual string LimitFormat(SelectQuery selectQuery);
    protected virtual string OffsetFormat(SelectQuery selectQuery);
    protected virtual bool get_OffsetFirst();
    protected virtual string get_TakePercent();
    protected virtual string get_TakeTies();
    [NullableContextAttribute("2")]
protected bool NeedSkip(ISqlExpression takeExpression, ISqlExpression skipExpression);
    [NullableContextAttribute("2")]
protected bool NeedTake(ISqlExpression takeExpression);
    protected virtual void BuildSkipFirst(SelectQuery selectQuery);
    protected virtual void BuildTakeHints(SelectQuery selectQuery);
    protected virtual void BuildOffsetLimit(SelectQuery selectQuery);
    protected virtual void BuildWhereSearchCondition(SelectQuery selectQuery, SqlSearchCondition condition);
    protected virtual void BuildSearchCondition(SqlSearchCondition condition, bool wrapCondition);
    protected virtual void BuildSearchCondition(int parentPrecedence, SqlSearchCondition condition, bool wrapCondition);
    protected virtual void BuildPredicate(ISqlPredicate predicate);
    protected virtual void BuildExprExprPredicateOperator(ExprExpr expr);
    protected virtual void BuildExprExprPredicate(ExprExpr expr);
    protected virtual void BuildIsDistinctPredicate(IsDistinct expr);
    protected void BuildIsDistinctPredicateFallback(IsDistinct expr);
    private static SqlField GetUnderlayingField(ISqlExpression expr);
    private void BuildInListPredicate(ISqlPredicate predicate);
    protected void BuildPredicate(int parentPrecedence, int precedence, ISqlPredicate predicate);
    protected virtual void BuildLikePredicate(Like predicate);
    protected virtual bool BuildFieldTableAlias(SqlField field);
    protected virtual StringBuilder BuildExpression(ISqlExpression expr, bool buildTableName, bool checkParentheses, string alias, Boolean& addAlias, bool throwExceptionIfTableNotFound);
    protected virtual bool TryConvertParameterToSql(SqlParameterValue paramValue);
    protected virtual void BuildParameter(SqlParameter parameter);
    private void BuildFormatValues(string format, IReadOnlyList`1<ISqlExpression> parameters, int precedence);
    private static string IdentText(string text, int ident);
    private void BuildExpression(int parentPrecedence, ISqlExpression expr, string alias, Boolean& addAlias);
    protected StringBuilder BuildExpression(ISqlExpression expr);
    public void BuildExpression(ISqlExpression expr, bool buildTableName, bool checkParentheses, bool throwExceptionIfTableNotFound);
    protected void BuildExpression(int precedence, ISqlExpression expr);
    protected virtual void BuildTypedExpression(SqlDataType dataType, ISqlExpression value);
    protected virtual void BuildSqlRow(SqlRow expr, bool buildTableName, bool checkParentheses, bool throwExceptionIfTableNotFound);
    private sealed virtual override void LinqToDB.SqlProvider.ISqlBuilder.BuildExpression(StringBuilder sb, ISqlExpression expr, bool buildTableName, object context);
    [NullableContextAttribute("2")]
protected void BuildValue(SqlDataType dataType, object value);
    protected virtual void BuildBinaryExpression(SqlBinaryExpression expr);
    private void BuildBinaryExpression(string op, SqlBinaryExpression expr);
    protected virtual void BuildFunction(SqlFunction func);
    private void BuildFunction(string name, ISqlExpression[] exprs);
    public sealed virtual StringBuilder BuildDataType(StringBuilder sb, SqlDataType dataType);
    protected void BuildDataType(SqlDataType type, bool forCreateTable, bool canBeNull);
    protected virtual void BuildDataTypeFromDataType(SqlDataType type, bool forCreateTable, bool canBeNull);
    private static int GetPrecedence(ISqlExpression expr);
    protected static int GetPrecedence(ISqlPredicate predicate);
    protected virtual void BuildTag(SqlStatement statement);
    protected virtual StringBuilder BuildSqlComment(StringBuilder sb, SqlComment comment);
    [IteratorStateMachineAttribute("LinqToDB.SqlProvider.BasicSqlBuilder/<AlternativeGetSelectedColumns>d__216")]
protected IEnumerable`1<SqlColumn> AlternativeGetSelectedColumns(SelectQuery selectQuery, IEnumerable`1<SqlColumn> columns);
    protected static bool IsDateDataType(ISqlExpression expr, string dateName);
    protected static bool IsTimeDataType(ISqlExpression expr);
    protected SequenceNameAttribute GetSequenceNameAttribute(SqlTable table, bool throwException);
    private static bool Wrap(int precedence, int parentPrecedence);
    protected string GetTableAlias(ISqlTableSource table);
    protected virtual string GetPhysicalTableName(ISqlTableSource table, string alias, bool ignoreTableExpression, string defaultDatabaseName, bool withoutSuffix);
    protected StringBuilder AppendIndent();
    protected virtual bool IsReserved(string word);
    public virtual ISqlExpression GetIdentityExpression(SqlTable table);
    protected virtual void PrintParameterName(StringBuilder sb, DbParameter parameter);
    protected virtual string GetTypeName(IDataContext dataContext, DbParameter parameter);
    protected virtual string GetUdtTypeName(IDataContext dataContext, DbParameter parameter);
    protected virtual string GetProviderTypeName(IDataContext dataContext, DbParameter parameter);
    protected virtual void PrintParameterType(IDataContext dataContext, StringBuilder sb, DbParameter parameter);
    public virtual StringBuilder PrintParameters(IDataContext dataContext, StringBuilder sb, IEnumerable`1<DbParameter> parameters);
    private bool PrintParameterValue(StringBuilder sb, object value);
    private bool FormatParameterValue(StringBuilder sb, object value);
    public sealed virtual string ApplyQueryHints(string sqlText, IReadOnlyCollection`1<string> queryHints);
    public virtual string GetReserveSequenceValuesSql(int count, string sequenceName);
    public virtual string GetMaxValueSql(EntityDescriptor entity, ColumnDescriptor column);
    public virtual string get_Name();
    public void RemoveAlias(string alias);
    private string GetAlias(string desiredAlias, string defaultAlias);
    public String[] GetTempAliases(int n, string defaultAlias);
    protected virtual void BuildSubQueryExtensions(SqlStatement statement);
    protected virtual void BuildQueryExtensions(SqlStatement statement);
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, TableIDInfo> get_TableIDs();
    [CompilerGeneratedAttribute]
public void set_TableIDs(Dictionary`2<string, TableIDInfo> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual string get_TablePath();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_TablePath(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual string get_QueryName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_QueryName(string value);
    public sealed virtual string BuildSqlID(SqlID id);
    private void TryBuildSqlID(SqlID id);
    protected virtual bool get_SupportsColumnAliasesInSource();
    protected virtual bool get_RequiresConstantColumnAliases();
    protected virtual bool get_IsValuesSyntaxSupported();
    protected virtual bool get_IsEmptyValuesSourceSupported();
    [NullableContextAttribute("2")]
protected virtual string get_FakeTable();
    [NullableContextAttribute("2")]
protected virtual string get_FakeTableSchema();
    protected virtual void BuildMergeStatement(SqlMergeStatement merge);
    protected virtual void BuildMergeTerminator(SqlMergeStatement merge);
    private void BuildMergeOperation(SqlMergeOperationClause operation);
    protected virtual void BuildMergeOperationUpdate(SqlMergeOperationClause operation);
    protected virtual void BuildMergeOperationDelete(SqlMergeOperationClause operation);
    protected virtual void BuildMergeOperationInsert(SqlMergeOperationClause operation);
    protected virtual void BuildMergeOperationUpdateWithDelete(SqlMergeOperationClause operation);
    protected virtual void BuildMergeOperationDeleteBySource(SqlMergeOperationClause operation);
    protected virtual void BuildMergeOperationUpdateBySource(SqlMergeOperationClause operation);
    protected virtual void BuildMergeOn(SqlMergeStatement mergeStatement);
    protected virtual void BuildMergeSourceQuery(SqlTableLikeSource mergeSource);
    private void BuildMergeAsSourceClause(SqlTableLikeSource mergeSource);
    private void BuildMergeSourceEnumerable(SqlMergeStatement merge);
    protected virtual bool IsSqlValuesTableValueTypeRequired(SqlValuesTable source, IReadOnlyList`1<ISqlExpression[]> rows, int row, int column);
    private void BuildValuesAsSelectsUnion(IList`1<SqlField> sourceFields, SqlValuesTable source, IReadOnlyList`1<ISqlExpression[]> rows);
    private void BuildMergeEmptySource(SqlMergeStatement merge);
    protected virtual bool BuildFakeTableName();
    protected void BuildValues(SqlValuesTable source, IReadOnlyList`1<ISqlExpression[]> rows);
    private void BuildMergeSource(SqlMergeStatement merge);
    protected virtual void BuildMergeInto(SqlMergeStatement merge);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <BuildSqlForUnion>b__61_0(SqlSetOperator s);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private string <BuildCreateTableStatement>b__127_6(CreateFieldInfo f);
    [CompilerGeneratedAttribute]
internal static void <BuildCreateTableStatement>g__AppendToMax|127_7(IEnumerable`1<CreateFieldInfo> fields, int maxlen, bool addCreateFormat);
    [CompilerGeneratedAttribute]
private void <BuildInListPredicate>g__TableSourceIn|186_0(ISqlTableSource table, IEnumerable items, <>c__DisplayClass186_0& );
    [CompilerGeneratedAttribute]
private void <BuildInListPredicate>g__InValues|186_1(IEnumerable values, <>c__DisplayClass186_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class LinqToDB.SqlProvider.BasicSqlBuilder`1 : BasicSqlBuilder {
    [NullableAttribute("2")]
private T _providerOptions;
    public T ProviderOptions { get; }
    protected BasicSqlBuilder`1(IDataProvider provider, MappingSchema mappingSchema, DataOptions dataOptions, ISqlOptimizer sqlOptimizer, SqlProviderFlags sqlProviderFlags);
    protected BasicSqlBuilder`1(BasicSqlBuilder parentBuilder);
    public T get_ProviderOptions();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.SqlProvider.BasicSqlOptimizer : object {
    [CompilerGeneratedAttribute]
private SqlProviderFlags <SqlProviderFlags>k__BackingField;
    private SqlDataType _typeWrapper;
    protected static String[] StandardLikeCharactersToEscape;
    public SqlProviderFlags SqlProviderFlags { get; }
    public bool CanCompareSearchConditions { get; }
    public string LikeEscapeCharacter { get; }
    public string LikeWildcardCharacter { get; }
    public bool LikePatternParameterSupport { get; }
    public bool LikeValueParameterSupport { get; }
    public bool LikeIsEscapeSupported { get; }
    public String[] LikeCharactersToEscape { get; }
    protected BasicSqlOptimizer(SqlProviderFlags sqlProviderFlags);
    private static BasicSqlOptimizer();
    [CompilerGeneratedAttribute]
public SqlProviderFlags get_SqlProviderFlags();
    public virtual SqlStatement Finalize(MappingSchema mappingSchema, SqlStatement statement, DataOptions dataOptions);
    protected virtual SqlStatement CorrectUnionOrderBy(SqlStatement statement);
    private static void CorrelateNullValueTypes(ISqlExpression& toCorrect, ISqlExpression reference);
    protected virtual SqlStatement FixSetOperationNulls(SqlStatement statement);
    private static bool FixRootSelect(SqlStatement statement);
    protected virtual SqlStatement OptimizeUpdateSubqueries(SqlStatement statement, DataOptions dataOptions);
    protected virtual void FixEmptySelect(SqlStatement statement);
    public virtual SqlStatement TransformStatement(SqlStatement statement, DataOptions dataOptions);
    private static void RegisterDependency(CteClause cteClause, Dictionary`2<CteClause, HashSet`1<CteClause>> foundCte);
    private void FinalizeCte(SqlStatement statement);
    protected static bool HasParameters(ISqlExpression expr);
    private static T NormalizeExpressions(T expression, bool allowMutation);
    private SelectQuery MoveCountSubQuery(MappingSchema mappingSchema, SelectQuery selectQuery, EvaluationContext context, DataOptions dataOptions);
    private void MoveCountSubQuery(MappingSchema mappingSchema, IQueryElement element, EvaluationContext context, DataOptions dataOptions);
    public virtual bool ConvertCountSubQuery(SelectQuery subQuery);
    private SelectQuery MoveSubQueryColumn(MappingSchema mappingSchema, SelectQuery selectQuery, EvaluationContext context, DataOptions dataOptions);
    public static ISqlExpression CreateSqlValue(object value, SqlBinaryExpression be);
    public static ISqlExpression CreateSqlValue(object value, DbDataType dbDataType, ISqlExpression[] basedOn);
    public virtual ISqlExpression OptimizeExpression(ISqlExpression expression, ConvertVisitor`1<RunOptimizationContext> convertVisitor);
    public virtual ISqlExpression OptimizeFunction(SqlFunction func, EvaluationContext context);
    private static Operator InvertOperator(Operator op, bool preserveEqual);
    private static ISqlPredicate OptimizeCase(IsTrue isTrue, EvaluationContext context);
    private static ISqlPredicate OptimizeCase(ExprExpr expr, EvaluationContext context);
    private static bool Compare(int v1, int v2, Operator op);
    public virtual ISqlPredicate OptimizePredicate(ISqlPredicate predicate, EvaluationContext context, DataOptions dataOptions);
    protected ISqlPredicate OptimizeRowExprExpr(ExprExpr predicate, EvaluationContext context);
    protected virtual ISqlPredicate OptimizeRowInList(InList predicate);
    protected ISqlPredicate RowIsNullFallback(SqlRow row, bool isNot);
    protected ISqlPredicate RowComparisonFallback(Operator op, SqlRow row1, SqlRow row2, EvaluationContext context);
    public virtual ISqlPredicate ConvertBetweenPredicate(Between between);
    public virtual IQueryElement OptimizeQueryElement(ConvertVisitor`1<RunOptimizationContext> visitor, IQueryElement element);
    public virtual ISqlExpression OptimizeBinaryExpression(SqlBinaryExpression be, EvaluationContext context);
    public virtual IQueryElement ConvertElement(MappingSchema mappingSchema, DataOptions dataOptions, IQueryElement element, OptimizationContext context);
    public virtual ISqlExpression ConvertExpressionImpl(ISqlExpression expression, ConvertVisitor`1<RunOptimizationContext> visitor);
    protected virtual ISqlExpression ConvertFunction(SqlFunction func);
    private static IQueryElement RunOptimization(IQueryElement element, OptimizationContext optimizationContext, BasicSqlOptimizer optimizer, MappingSchema mappingSchema, DataOptions dataOptions, bool register, Func`3<ConvertVisitor`1<RunOptimizationContext>, IQueryElement, IQueryElement> func);
    public IQueryElement OptimizeElement(MappingSchema mappingSchema, DataOptions dataOptions, IQueryElement element, OptimizationContext optimizationContext, bool withConversion);
    public virtual bool get_CanCompareSearchConditions();
    public virtual ISqlPredicate ConvertPredicateImpl(ISqlPredicate predicate, ConvertVisitor`1<RunOptimizationContext> visitor);
    public virtual string get_LikeEscapeCharacter();
    public virtual string get_LikeWildcardCharacter();
    public virtual bool get_LikePatternParameterSupport();
    public virtual bool get_LikeValueParameterSupport();
    public virtual bool get_LikeIsEscapeSupported();
    public virtual String[] get_LikeCharactersToEscape();
    public virtual string EscapeLikeCharacters(string str, string escape);
    private static ISqlExpression GenerateEscapeReplacement(ISqlExpression expression, ISqlExpression character, ISqlExpression escapeCharacter);
    public static ISqlExpression GenerateEscapeReplacement(ISqlExpression expression, ISqlExpression character);
    protected virtual string EscapeLikePattern(string str);
    public virtual ISqlExpression EscapeLikeCharacters(ISqlExpression expression, ISqlExpression& escape);
    public virtual ISqlPredicate ConvertLikePredicate(MappingSchema mappingSchema, Like predicate, EvaluationContext context);
    protected ISqlPredicate ConvertSearchStringPredicateViaLike(SearchString predicate, ConvertVisitor`1<RunOptimizationContext> visitor);
    public virtual ISqlPredicate ConvertSearchStringPredicate(SearchString predicate, ConvertVisitor`1<RunOptimizationContext> visitor);
    private static SqlField ExpectsUnderlyingField(ISqlExpression expr);
    public virtual ISqlPredicate ConvertInListPredicate(MappingSchema mappingSchema, InList p, EvaluationContext context);
    protected ISqlExpression ConvertCoalesceToBinaryFunc(SqlFunction func, string funcName, bool supportsParameters);
    protected virtual Nullable`1<int> GetMaxLength(SqlDataType type);
    protected virtual Nullable`1<int> GetMaxPrecision(SqlDataType type);
    protected virtual Nullable`1<int> GetMaxScale(SqlDataType type);
    protected virtual Nullable`1<int> GetMaxDisplaySize(SqlDataType type);
    protected virtual ISqlExpression ConvertConversion(SqlFunction func);
    protected ISqlExpression AlternativeConvertToBoolean(SqlFunction func, DataOptions dataOptions, int paramNumber);
    protected ISqlExpression ConvertBooleanExprToCase(ISqlExpression expression);
    protected static bool IsDateDataType(ISqlExpression expr, string dateName);
    protected static bool IsSmallDateTimeType(ISqlExpression expr, string typeName);
    protected static bool IsDateTime2Type(ISqlExpression expr, string typeName);
    protected static bool IsDateTimeType(ISqlExpression expr, string typeName);
    protected static bool IsDateDataOffsetType(ISqlExpression expr);
    protected static bool IsTimeDataType(ISqlExpression expr);
    protected ISqlExpression FloorBeforeConvert(SqlFunction func);
    protected SqlDeleteStatement GetAlternativeDelete(SqlDeleteStatement deleteStatement, DataOptions dataOptions);
    protected SqlTableSource GetMainTableSource(SelectQuery selectQuery);
    public static bool IsAggregationFunction(IQueryElement expr);
    protected bool NeedsEnvelopingForUpdate(SelectQuery query);
    protected SqlUpdateStatement GetAlternativeUpdate(SqlUpdateStatement updateStatement, DataOptions dataOptions);
    private static void ReplaceTable(ISqlExpressionWalkable element, SqlTable replacing, SqlTable withTable);
    protected SqlTable FindUpdateTable(SelectQuery selectQuery, SqlTable tableToFind);
    protected SqlStatement GetAlternativeUpdatePostgreSqlite(SqlUpdateStatement statement, DataOptions dataOptions);
    protected SqlUpdateStatement CorrectUpdateTable(SqlUpdateStatement statement);
    [NullableContextAttribute("2")]
private static string SetAlias(string alias, int maxLen);
    protected void CheckAliases(SqlStatement statement, int maxLen);
    public ISqlExpression Add(ISqlExpression expr1, ISqlExpression expr2, Type type);
    public ISqlExpression Add(ISqlExpression expr1, ISqlExpression expr2);
    public ISqlExpression Add(ISqlExpression expr1, int value);
    public ISqlExpression Inc(ISqlExpression expr1);
    public ISqlExpression Sub(ISqlExpression expr1, ISqlExpression expr2, Type type);
    public ISqlExpression Sub(ISqlExpression expr1, ISqlExpression expr2);
    public ISqlExpression Sub(ISqlExpression expr1, int value);
    public ISqlExpression Dec(ISqlExpression expr1);
    public ISqlExpression Mul(ISqlExpression expr1, ISqlExpression expr2, Type type);
    public ISqlExpression Mul(ISqlExpression expr1, ISqlExpression expr2);
    public ISqlExpression Mul(ISqlExpression expr1, int value);
    public ISqlExpression Div(ISqlExpression expr1, ISqlExpression expr2, Type type);
    public ISqlExpression Div(ISqlExpression expr1, ISqlExpression expr2);
    public ISqlExpression Div(ISqlExpression expr1, int value);
    public void OptimizeJoins(SqlStatement statement);
    public virtual bool IsParameterDependedQuery(SelectQuery query);
    public virtual bool IsParameterDependedElement(IQueryElement element);
    public sealed virtual bool IsParameterDependent(SqlStatement statement);
    public virtual SqlStatement FinalizeStatement(SqlStatement statement, EvaluationContext context, DataOptions dataOptions);
    public SqlStatement OptimizeAggregates(SqlStatement statement);
    public virtual void ConvertSkipTake(MappingSchema mappingSchema, DataOptions dataOptions, SelectQuery selectQuery, OptimizationContext optimizationContext, ISqlExpression& takeExpr, ISqlExpression& skipExpr);
    protected SqlStatement SeparateDistinctFromPagination(SqlStatement statement, Func`2<SelectQuery, bool> queryFilter);
    protected SqlStatement ReplaceTakeSkipWithRowNumber(SqlStatement statement, bool supportsEmptyOrderBy, bool onlySubqueries);
    protected SqlStatement ReplaceTakeSkipWithRowNumber(TContext context, SqlStatement statement, Func`3<TContext, SelectQuery, bool> predicate, bool supportsEmptyOrderBy);
    protected SqlStatement ReplaceDistinctOrderByWithRowNumber(SqlStatement statement, Func`2<SelectQuery, bool> queryFilter);
    protected static ISqlExpression TryConvertToValue(ISqlExpression expr, EvaluationContext context);
    protected static bool IsBooleanParameter(ISqlExpression expr, int count, int i);
    protected SqlFunction ConvertFunctionParameters(SqlFunction func, bool withParameters);
    [CompilerGeneratedAttribute]
internal static IQueryElement <OptimizeElement>g__Optimize|44_0(ConvertVisitor`1<RunOptimizationContext> visitor, IQueryElement e);
    [CompilerGeneratedAttribute]
internal static SqlCondition <OptimizeElement>g__ConvertNullInNullSubquery|44_2(SelectQuery subQuery, SqlColumn col, InSubQuery inSubQuery, SqlCondition cond, bool isOr);
}
public enum LinqToDB.SqlProvider.ConvertType : Enum {
    public int value__;
    public static ConvertType NameToQueryParameter;
    public static ConvertType NameToCommandParameter;
    public static ConvertType NameToSprocParameter;
    public static ConvertType NameToQueryField;
    public static ConvertType NameToQueryFieldAlias;
    public static ConvertType NameToServer;
    public static ConvertType NameToDatabase;
    public static ConvertType NameToSchema;
    public static ConvertType NameToPackage;
    public static ConvertType NameToProcedure;
    public static ConvertType NameToQueryTable;
    public static ConvertType NameToQueryTableAlias;
    public static ConvertType SprocParameterToName;
    public static ConvertType ExceptionToErrorNumber;
    public static ConvertType ExceptionToErrorMessage;
    public static ConvertType SequenceName;
    public static ConvertType TriggerName;
}
internal class LinqToDB.SqlProvider.HintExtensionBuilder : object {
    [NullableContextAttribute("1")]
private sealed virtual override void LinqToDB.SqlQuery.ISqlQueryExtensionBuilder.Build(ISqlBuilder sqlBuilder, StringBuilder stringBuilder, SqlQueryExtension sqlQueryExtension);
}
internal class LinqToDB.SqlProvider.HintWithFormatParametersExtensionBuilder : object {
    [NullableContextAttribute("1")]
private sealed virtual override void LinqToDB.SqlQuery.ISqlQueryExtensionBuilder.Build(ISqlBuilder sqlBuilder, StringBuilder stringBuilder, SqlQueryExtension sqlQueryExtension);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal static object <LinqToDB.SqlQuery.ISqlQueryExtensionBuilder.Build>g__GetValue|0_0(SqlValue value, <>c__DisplayClass0_0& );
}
internal class LinqToDB.SqlProvider.HintWithParameterExtensionBuilder : object {
    [NullableContextAttribute("1")]
private sealed virtual override void LinqToDB.SqlQuery.ISqlQueryExtensionBuilder.Build(ISqlBuilder sqlBuilder, StringBuilder stringBuilder, SqlQueryExtension sqlQueryExtension);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal static object <LinqToDB.SqlQuery.ISqlQueryExtensionBuilder.Build>g__GetValue|0_0(SqlValue value, <>c__DisplayClass0_0& );
}
internal class LinqToDB.SqlProvider.HintWithParametersExtensionBuilder : object {
    [NullableContextAttribute("1")]
private sealed virtual override void LinqToDB.SqlQuery.ISqlQueryExtensionBuilder.Build(ISqlBuilder sqlBuilder, StringBuilder stringBuilder, SqlQueryExtension sqlQueryExtension);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal static object <LinqToDB.SqlQuery.ISqlQueryExtensionBuilder.Build>g__GetValue|0_0(SqlValue value, <>c__DisplayClass0_0& );
}
[NullableContextAttribute("1")]
public interface LinqToDB.SqlProvider.ISqlBuilder {
    public string Name { get; }
    public MappingSchema MappingSchema { get; }
    public StringBuilder StringBuilder { get; }
    public SqlProviderFlags SqlProviderFlags { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Dictionary`2<string, TableIDInfo> TableIDs { get; }
    [NullableAttribute("2")]
public string TablePath { get; }
    [NullableAttribute("2")]
public string QueryName { get; }
    public abstract virtual int CommandCount(SqlStatement statement);
    public abstract virtual void BuildSql(int commandNumber, SqlStatement statement, StringBuilder sb, OptimizationContext optimizationContext, int startIndent);
    public abstract virtual StringBuilder BuildObjectName(StringBuilder sb, SqlObjectName name, ConvertType objectType, bool escape, TableOptions tableOptions, bool withoutSuffix);
    public abstract virtual StringBuilder BuildDataType(StringBuilder sb, SqlDataType dataType);
    public abstract virtual string ConvertInline(string value, ConvertType convertType);
    public abstract virtual StringBuilder Convert(StringBuilder sb, string value, ConvertType convertType);
    public abstract virtual ISqlExpression GetIdentityExpression(SqlTable table);
    public abstract virtual StringBuilder PrintParameters(IDataContext dataContext, StringBuilder sb, IEnumerable`1<DbParameter> parameters);
    public abstract virtual string ApplyQueryHints(string sqlText, IReadOnlyCollection`1<string> queryHints);
    public abstract virtual string GetReserveSequenceValuesSql(int count, string sequenceName);
    public abstract virtual string GetMaxValueSql(EntityDescriptor entity, ColumnDescriptor column);
    public abstract virtual void BuildExpression(StringBuilder sb, ISqlExpression expr, bool buildTableName, object context);
    public abstract virtual string get_Name();
    public abstract virtual MappingSchema get_MappingSchema();
    public abstract virtual StringBuilder get_StringBuilder();
    public abstract virtual SqlProviderFlags get_SqlProviderFlags();
    public abstract virtual Dictionary`2<string, TableIDInfo> get_TableIDs();
    [NullableContextAttribute("2")]
public abstract virtual string get_TablePath();
    [NullableContextAttribute("2")]
public abstract virtual string get_QueryName();
    [NullableContextAttribute("2")]
public abstract virtual string BuildSqlID(SqlID id);
}
[NullableContextAttribute("1")]
public interface LinqToDB.SqlProvider.ISqlOptimizer {
    public abstract virtual SqlStatement Finalize(MappingSchema mappingSchema, SqlStatement statement, DataOptions dataOptions);
    public abstract virtual bool IsParameterDependent(SqlStatement statement);
    public abstract virtual void ConvertSkipTake(MappingSchema mappingSchema, DataOptions dataOptions, SelectQuery selectQuery, OptimizationContext optimizationContext, ISqlExpression& takeExpr, ISqlExpression& skipExpr);
    public abstract virtual IQueryElement ConvertElement(MappingSchema mappingSchema, DataOptions dataOptions, IQueryElement element, OptimizationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.SqlProvider.JoinOptimizer : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<SqlSearchCondition, SqlSearchCondition> _additionalFilter;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<VirtualField, HashSet`1<Tuple`2<int, VirtualField>>> _equalityMap;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<Tuple`2<SqlTableSource, SqlTableSource>, List`1<FoundEquality>> _fieldPairCache;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<int, List`1<VirtualField[]>> _keysCache;
    [NullableAttribute("2")]
private HashSet`1<int> _removedSources;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<VirtualField, VirtualField> _replaceMap;
    private SelectQuery _selectQuery;
    private SqlStatement _statement;
    private void FlattenJoins(SqlTableSource table);
    private bool IsDependedBetweenJoins(SqlTableSource table, SqlJoinedTable testedJoin);
    private bool IsDepended(SqlJoinedTable join, SqlJoinedTable toIgnore);
    private bool IsDependedExcludeJoins(SqlJoinedTable join);
    private bool IsDependedExcludeJoins(HashSet`1<int> testedSources);
    private static bool HasDependencyWithParent(SqlJoinedTable parent, SqlJoinedTable child);
    private bool IsDependedOnJoin(SqlTableSource table, SqlJoinedTable testedJoin, HashSet`1<int> testedSources);
    private bool CanWeReplaceFieldInternal(SqlTableSource table, VirtualField field, HashSet`1<int> excludeSourceIds, int testedSourceIndex, HashSet`1<VirtualField> visited);
    private bool CanWeReplaceField(SqlTableSource table, VirtualField field, HashSet`1<int> excludeSourceId, int testedSourceId);
    private VirtualField GetNewField(VirtualField field);
    private VirtualField MapToSourceInternal(SqlTableSource fromTable, VirtualField field, int sourceId, HashSet`1<VirtualField> visited);
    private VirtualField MapToSource(SqlTableSource table, VirtualField field, int sourceId);
    private void RemoveSource(SqlTableSource fromTable, SqlJoinedTable join);
    private bool IsSourceRemoved(int sourceId);
    private void ReplaceField(VirtualField oldField, VirtualField newField);
    private void AddEqualFields(VirtualField field1, VirtualField field2, int levelSourceId);
    private bool CompareExpressions(ExprExpr expr1, ExprExpr expr2);
    private Nullable`1<bool> CompareExpressions(ISqlExpression expr1, ISqlExpression expr2);
    private bool CompareConditions(SqlCondition cond1, SqlCondition cond2);
    private Nullable`1<bool> EvaluateLogical(SqlCondition condition);
    private void OptimizeSearchCondition(SqlSearchCondition searchCondition);
    private void AddSearchCondition(SqlSearchCondition search, SqlCondition condition);
    private void AddSearchConditions(SqlSearchCondition search, IEnumerable`1<SqlCondition> conditions);
    private void OptimizeFilters();
    private static Dictionary`2<string, VirtualField> GetFields(ISqlTableSource source);
    private void ReplaceSource(SqlTableSource fromTable, SqlJoinedTable oldSource, SqlTableSource newSource);
    private void CorrectMappings();
    [NullableContextAttribute("2")]
private static int GetSourceIndex(SqlTableSource table, int sourceId);
    private void CollectEqualFields(SqlJoinedTable join);
    private static List`1<VirtualField[]> GetKeysInternal(SqlTableSource tableSource);
    private List`1<VirtualField[]> GetKeys(SqlTableSource tableSource);
    public void OptimizeJoins(SqlStatement statement, SelectQuery selectQuery);
    private static VirtualField GetUnderlayingField(ISqlExpression expr);
    private void DetectField(SqlTableSource manySource, SqlTableSource oneSource, VirtualField field, FoundEquality equality);
    [NullableContextAttribute("2")]
private bool MatchFields(SqlTableSource manySource, SqlTableSource oneSource, VirtualField field1, VirtualField field2, FoundEquality equality);
    private void ResetFieldSearchCache(SqlTableSource table);
    private List`1<FoundEquality> SearchForFields(SqlTableSource manySource, SqlJoinedTable join);
    private bool TryMergeWithTable(SqlTableSource fromTable, SqlJoinedTable join, List`1<VirtualField[]> uniqueKeys);
    private bool TryMergeJoins(SqlTableSource fromTable, SqlTableSource manySource, SqlJoinedTable join1, SqlJoinedTable join2, List`1<VirtualField[]> uniqueKeys);
    private bool TryToRemoveIndependent(SqlTableSource fromTable, SqlTableSource manySource, SqlJoinedTable join, List`1<VirtualField[]> uniqueKeys);
    private bool TryToRemoveIndependentLeftJoin(SqlTableSource fromTable, SqlJoinedTable join, List`1<VirtualField[]> uniqueKeys);
    [CompilerGeneratedAttribute]
internal static bool <IsDependedExcludeJoins>g__CheckDependency|14_0(IsDependedExcludeJoinsContext context, IQueryElement e);
}
internal class LinqToDB.SqlProvider.NoneExtensionBuilder : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.SqlProvider.OptimizationContext : object {
    [NullableAttribute("2")]
private IQueryParametersNormalizer _parametersNormalizer;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<SqlParameter, SqlParameter> _parametersMap;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<SqlParameter> _actualParameters;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<ValueTuple`2<DbDataType, object>, SqlParameter> _dynamicParameters;
    private Dictionary`2<IQueryElement, IQueryElement> _optimized;
    private Func`1<IQueryParametersNormalizer> _parametersNormalizerFactory;
    [CompilerGeneratedAttribute]
private EvaluationContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsParameterOrderDependent>k__BackingField;
    [CompilerGeneratedAttribute]
private AliasesContext <Aliases>k__BackingField;
    [NullableAttribute("2")]
private ConvertVisitor`1<RunOptimizationContext> _visitor;
    private int _nestingLevel;
    public EvaluationContext Context { get; }
    public bool IsParameterOrderDependent { get; }
    public AliasesContext Aliases { get; }
    public OptimizationContext(EvaluationContext context, AliasesContext aliases, bool isParameterOrderDependent, Func`1<IQueryParametersNormalizer> parametersNormalizerFactory);
    [CompilerGeneratedAttribute]
public EvaluationContext get_Context();
    [CompilerGeneratedAttribute]
public bool get_IsParameterOrderDependent();
    [CompilerGeneratedAttribute]
public AliasesContext get_Aliases();
    public bool IsOptimized(IQueryElement element, IQueryElement& newExpr);
    public void RegisterOptimized(IQueryElement element, IQueryElement newExpr);
    public bool HasParameters();
    public IReadOnlyList`1<SqlParameter> GetParameters();
    public SqlParameter AddParameter(SqlParameter parameter);
    public SqlParameter SuggestDynamicParameter(DbDataType dbDataType, object value);
    public void ClearParameters();
    public T ConvertAll(RunOptimizationContext context, T element, Func`3<ConvertVisitor`1<RunOptimizationContext>, IQueryElement, IQueryElement> convertAction, Func`2<ConvertVisitor`1<RunOptimizationContext>, bool> parentAction);
}
[FlagsAttribute]
public enum LinqToDB.SqlProvider.RowFeature : Enum {
    public int value__;
    public static RowFeature None;
    public static RowFeature IsNull;
    public static RowFeature Equality;
    public static RowFeature Comparisons;
    public static RowFeature Overlaps;
    public static RowFeature Between;
    public static RowFeature CompareToSelect;
    public static RowFeature In;
    public static RowFeature Update;
    public static RowFeature UpdateLiteral;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class LinqToDB.SqlProvider.SqlOptimizerExtensions : object {
    [ExtensionAttribute]
public static SqlStatement PrepareStatementForRemoting(ISqlOptimizer optimizer, SqlStatement statement, MappingSchema mappingSchema, DataOptions dataOptions, AliasesContext aliases, EvaluationContext context);
    [ExtensionAttribute]
public static SqlStatement PrepareStatementForSql(ISqlOptimizer optimizer, SqlStatement statement, MappingSchema mappingSchema, DataOptions dataOptions, OptimizationContext optimizationContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DataContractAttribute]
public class LinqToDB.SqlProvider.SqlProviderFlags : object {
    [CompilerGeneratedAttribute]
private bool <IsSybaseBuggyGroupBy>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsParameterOrderDependent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AcceptsTakeAsParameter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AcceptsTakeAsParameterIfSkip>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsTakeSupported>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSkipSupported>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSkipSupportedIfTake>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TakeHints> <TakeHintsSupported>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSubQueryTakeSupported>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSubQueryColumnSupported>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSubQueryOrderBySupported>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCountSubQuerySupported>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsIdentityParameterRequired>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsApplyJoinSupported>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsInsertOrUpdateSupported>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanCombineParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxInListValuesCount>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsUpdateSetTableAliasSupported>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OutputDeleteUseSpecialTable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OutputInsertUseSpecialTable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OutputUpdateUseSpecialTables>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsGroupByColumnRequred>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCrossJoinSupported>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsInnerJoinAsCrossSupported>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCommonTableExpressionsSupported>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDistinctOrderBySupported>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsOrderByAggregateFunctionsSupported>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAllSetOperationsSupported>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDistinctSetOperationsSupported>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCountDistinctSupported>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AcceptsOuterExpressionInAggregate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsUpdateFromSupported>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNamingQueryBlockSupported>k__BackingField;
    [CompilerGeneratedAttribute]
private IsolationLevel <DefaultMultiQueryIsolationLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private RowFeature <RowConstructorSupport>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <CustomFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DoesNotSupportCorrelatedSubquery>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsExistsPreferableForContains>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsProjectionBoolSupported>k__BackingField;
    [DataMemberAttribute]
public bool IsSybaseBuggyGroupBy { get; public set; }
    [DataMemberAttribute]
public bool IsParameterOrderDependent { get; public set; }
    [DataMemberAttribute]
public bool AcceptsTakeAsParameter { get; public set; }
    [DataMemberAttribute]
public bool AcceptsTakeAsParameterIfSkip { get; public set; }
    [DataMemberAttribute]
public bool IsTakeSupported { get; public set; }
    [DataMemberAttribute]
public bool IsSkipSupported { get; public set; }
    [DataMemberAttribute]
public bool IsSkipSupportedIfTake { get; public set; }
    [DataMemberAttribute]
public Nullable`1<TakeHints> TakeHintsSupported { get; public set; }
    [DataMemberAttribute]
public bool IsSubQueryTakeSupported { get; public set; }
    [DataMemberAttribute]
public bool IsSubQueryColumnSupported { get; public set; }
    [DataMemberAttribute]
public bool IsSubQueryOrderBySupported { get; public set; }
    [DataMemberAttribute]
public bool IsCountSubQuerySupported { get; public set; }
    [DataMemberAttribute]
public bool IsIdentityParameterRequired { get; public set; }
    [DataMemberAttribute]
public bool IsApplyJoinSupported { get; public set; }
    [DataMemberAttribute]
public bool IsInsertOrUpdateSupported { get; public set; }
    [DataMemberAttribute]
public bool CanCombineParameters { get; public set; }
    [DataMemberAttribute]
public int MaxInListValuesCount { get; public set; }
    [DataMemberAttribute]
public bool IsUpdateSetTableAliasSupported { get; public set; }
    [DataMemberAttribute]
public bool OutputDeleteUseSpecialTable { get; public set; }
    [DataMemberAttribute]
public bool OutputInsertUseSpecialTable { get; public set; }
    [DataMemberAttribute]
public bool OutputUpdateUseSpecialTables { get; public set; }
    [DataMemberAttribute]
public bool IsGroupByColumnRequred { get; public set; }
    [DataMemberAttribute]
public bool IsCrossJoinSupported { get; public set; }
    [DataMemberAttribute]
public bool IsInnerJoinAsCrossSupported { get; public set; }
    [DataMemberAttribute]
public bool IsCommonTableExpressionsSupported { get; public set; }
    [DataMemberAttribute]
public bool IsDistinctOrderBySupported { get; public set; }
    [DataMemberAttribute]
public bool IsOrderByAggregateFunctionsSupported { get; public set; }
    [DataMemberAttribute]
public bool IsAllSetOperationsSupported { get; public set; }
    [DataMemberAttribute]
public bool IsDistinctSetOperationsSupported { get; public set; }
    [DataMemberAttribute]
public bool IsCountDistinctSupported { get; public set; }
    [DataMemberAttribute]
public bool AcceptsOuterExpressionInAggregate { get; public set; }
    [DataMemberAttribute]
public bool IsUpdateFromSupported { get; public set; }
    [DataMemberAttribute]
public bool IsNamingQueryBlockSupported { get; public set; }
    [DataMemberAttribute]
public IsolationLevel DefaultMultiQueryIsolationLevel { get; public set; }
    [DataMemberAttribute]
public RowFeature RowConstructorSupport { get; public set; }
    [DataMemberAttribute]
public List`1<string> CustomFlags { get; public set; }
    [DataMemberAttribute]
public bool DoesNotSupportCorrelatedSubquery { get; public set; }
    [DataMemberAttribute]
public bool IsExistsPreferableForContains { get; public set; }
    [DataMemberAttribute]
public bool IsProjectionBoolSupported { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsSybaseBuggyGroupBy();
    [CompilerGeneratedAttribute]
public void set_IsSybaseBuggyGroupBy(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsParameterOrderDependent();
    [CompilerGeneratedAttribute]
public void set_IsParameterOrderDependent(bool value);
    [CompilerGeneratedAttribute]
public bool get_AcceptsTakeAsParameter();
    [CompilerGeneratedAttribute]
public void set_AcceptsTakeAsParameter(bool value);
    [CompilerGeneratedAttribute]
public bool get_AcceptsTakeAsParameterIfSkip();
    [CompilerGeneratedAttribute]
public void set_AcceptsTakeAsParameterIfSkip(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsTakeSupported();
    [CompilerGeneratedAttribute]
public void set_IsTakeSupported(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsSkipSupported();
    [CompilerGeneratedAttribute]
public void set_IsSkipSupported(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsSkipSupportedIfTake();
    [CompilerGeneratedAttribute]
public void set_IsSkipSupportedIfTake(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<TakeHints> get_TakeHintsSupported();
    [CompilerGeneratedAttribute]
public void set_TakeHintsSupported(Nullable`1<TakeHints> value);
    [CompilerGeneratedAttribute]
public bool get_IsSubQueryTakeSupported();
    [CompilerGeneratedAttribute]
public void set_IsSubQueryTakeSupported(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsSubQueryColumnSupported();
    [CompilerGeneratedAttribute]
public void set_IsSubQueryColumnSupported(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsSubQueryOrderBySupported();
    [CompilerGeneratedAttribute]
public void set_IsSubQueryOrderBySupported(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsCountSubQuerySupported();
    [CompilerGeneratedAttribute]
public void set_IsCountSubQuerySupported(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsIdentityParameterRequired();
    [CompilerGeneratedAttribute]
public void set_IsIdentityParameterRequired(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsApplyJoinSupported();
    [CompilerGeneratedAttribute]
public void set_IsApplyJoinSupported(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsInsertOrUpdateSupported();
    [CompilerGeneratedAttribute]
public void set_IsInsertOrUpdateSupported(bool value);
    [CompilerGeneratedAttribute]
public bool get_CanCombineParameters();
    [CompilerGeneratedAttribute]
public void set_CanCombineParameters(bool value);
    [CompilerGeneratedAttribute]
public int get_MaxInListValuesCount();
    [CompilerGeneratedAttribute]
public void set_MaxInListValuesCount(int value);
    [CompilerGeneratedAttribute]
public bool get_IsUpdateSetTableAliasSupported();
    [CompilerGeneratedAttribute]
public void set_IsUpdateSetTableAliasSupported(bool value);
    [CompilerGeneratedAttribute]
public bool get_OutputDeleteUseSpecialTable();
    [CompilerGeneratedAttribute]
public void set_OutputDeleteUseSpecialTable(bool value);
    [CompilerGeneratedAttribute]
public bool get_OutputInsertUseSpecialTable();
    [CompilerGeneratedAttribute]
public void set_OutputInsertUseSpecialTable(bool value);
    [CompilerGeneratedAttribute]
public bool get_OutputUpdateUseSpecialTables();
    [CompilerGeneratedAttribute]
public void set_OutputUpdateUseSpecialTables(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsGroupByColumnRequred();
    [CompilerGeneratedAttribute]
public void set_IsGroupByColumnRequred(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsCrossJoinSupported();
    [CompilerGeneratedAttribute]
public void set_IsCrossJoinSupported(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsInnerJoinAsCrossSupported();
    [CompilerGeneratedAttribute]
public void set_IsInnerJoinAsCrossSupported(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsCommonTableExpressionsSupported();
    [CompilerGeneratedAttribute]
public void set_IsCommonTableExpressionsSupported(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsDistinctOrderBySupported();
    [CompilerGeneratedAttribute]
public void set_IsDistinctOrderBySupported(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsOrderByAggregateFunctionsSupported();
    [CompilerGeneratedAttribute]
public void set_IsOrderByAggregateFunctionsSupported(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsAllSetOperationsSupported();
    [CompilerGeneratedAttribute]
public void set_IsAllSetOperationsSupported(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsDistinctSetOperationsSupported();
    [CompilerGeneratedAttribute]
public void set_IsDistinctSetOperationsSupported(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsCountDistinctSupported();
    [CompilerGeneratedAttribute]
public void set_IsCountDistinctSupported(bool value);
    [CompilerGeneratedAttribute]
public bool get_AcceptsOuterExpressionInAggregate();
    [CompilerGeneratedAttribute]
public void set_AcceptsOuterExpressionInAggregate(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsUpdateFromSupported();
    [CompilerGeneratedAttribute]
public void set_IsUpdateFromSupported(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsNamingQueryBlockSupported();
    [CompilerGeneratedAttribute]
public void set_IsNamingQueryBlockSupported(bool value);
    public bool GetAcceptsTakeAsParameterFlag(SelectQuery selectQuery);
    [NullableContextAttribute("2")]
public bool GetIsSkipSupportedFlag(ISqlExpression takeExpression, ISqlExpression skipExpression);
    public bool GetIsTakeHintsSupported(TakeHints hints);
    [CompilerGeneratedAttribute]
public IsolationLevel get_DefaultMultiQueryIsolationLevel();
    [CompilerGeneratedAttribute]
public void set_DefaultMultiQueryIsolationLevel(IsolationLevel value);
    [CompilerGeneratedAttribute]
public RowFeature get_RowConstructorSupport();
    [CompilerGeneratedAttribute]
public void set_RowConstructorSupport(RowFeature value);
    [CompilerGeneratedAttribute]
public List`1<string> get_CustomFlags();
    [CompilerGeneratedAttribute]
public void set_CustomFlags(List`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_DoesNotSupportCorrelatedSubquery();
    [CompilerGeneratedAttribute]
public void set_DoesNotSupportCorrelatedSubquery(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsExistsPreferableForContains();
    [CompilerGeneratedAttribute]
public void set_IsExistsPreferableForContains(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsProjectionBoolSupported();
    [CompilerGeneratedAttribute]
public void set_IsProjectionBoolSupported(bool value);
    public virtual int GetHashCode();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.SqlProvider.TableIDInfo : object {
    public string TableAlias;
    public string TableName;
    public string TableSpec;
    public TableIDInfo(string tableAlias, string tableName, string tableSpec);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.SqlProvider.ValueToSqlConverter : object {
    internal ValueToSqlConverter[] BaseConverters;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<Type, Action`4<StringBuilder, SqlDataType, DataOptions, object>> _converters;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`4<StringBuilder, SqlDataType, DataOptions, object> _booleanConverter;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`4<StringBuilder, SqlDataType, DataOptions, object> _charConverter;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`4<StringBuilder, SqlDataType, DataOptions, object> _sByteConverter;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`4<StringBuilder, SqlDataType, DataOptions, object> _byteConverter;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`4<StringBuilder, SqlDataType, DataOptions, object> _int16Converter;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`4<StringBuilder, SqlDataType, DataOptions, object> _uInt16Converter;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`4<StringBuilder, SqlDataType, DataOptions, object> _int32Converter;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`4<StringBuilder, SqlDataType, DataOptions, object> _uInt32Converter;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`4<StringBuilder, SqlDataType, DataOptions, object> _int64Converter;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`4<StringBuilder, SqlDataType, DataOptions, object> _uInt64Converter;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`4<StringBuilder, SqlDataType, DataOptions, object> _singleConverter;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`4<StringBuilder, SqlDataType, DataOptions, object> _doubleConverter;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`4<StringBuilder, SqlDataType, DataOptions, object> _decimalConverter;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`4<StringBuilder, SqlDataType, DataOptions, object> _dateTimeConverter;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`4<StringBuilder, SqlDataType, DataOptions, object> _stringConverter;
    private static NumberFormatInfo _numberFormatInfo;
    public ValueToSqlConverter(ValueToSqlConverter[] converters);
    private static ValueToSqlConverter();
    public bool CanConvert(Type type);
    internal void SetDefaults();
    private static void BuildString(StringBuilder stringBuilder, string value);
    private static void BuildChar(StringBuilder stringBuilder, char value);
    private static void BuildDateTime(StringBuilder stringBuilder, DateTime value);
    public bool TryConvert(StringBuilder stringBuilder, MappingSchema mappingSchema, DataOptions options, object value);
    public bool TryConvert(StringBuilder stringBuilder, MappingSchema mappingSchema, SqlDataType dataType, DataOptions options, object value);
    public bool CanConvert(SqlDataType dataType, DataOptions options, object value);
    private bool TryConvertImpl(StringBuilder stringBuilder, SqlDataType dataType, DataOptions options, object value, bool tryBase);
    public StringBuilder Convert(StringBuilder stringBuilder, MappingSchema mappingSchema, DataOptions options, object value);
    public StringBuilder Convert(StringBuilder stringBuilder, MappingSchema mappingSchema, SqlDataType dataType, DataOptions options, object value);
    public void SetConverter(Type type, Action`4<StringBuilder, SqlDataType, DataOptions, object> converter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.SqlQuery.AliasesContext : object {
    private HashSet`1<IQueryElement> _aliasesSet;
    public void RegisterAliased(IQueryElement element);
    public void RegisterAliased(IReadOnlyCollection`1<IQueryElement> elements);
    public bool IsAliased(IQueryElement element);
    public IReadOnlyCollection`1<IQueryElement> GetAliased();
    public HashSet`1<string> GetUsedTableAliases();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class LinqToDB.SqlQuery.ClauseBase : object {
    [CompilerGeneratedAttribute]
private SelectQuery <SelectQuery>k__BackingField;
    public SqlSelectClause Select { get; }
    public SqlFromClause From { get; }
    public SqlWhereClause Where { get; }
    public SqlGroupByClause GroupBy { get; }
    public SqlWhereClause Having { get; }
    public SqlOrderByClause OrderBy { get; }
    protected internal SelectQuery SelectQuery { get; private set; }
    [NullableContextAttribute("2")]
protected ClauseBase(SelectQuery selectQuery);
    public SqlSelectClause get_Select();
    public SqlFromClause get_From();
    public SqlWhereClause get_Where();
    public SqlGroupByClause get_GroupBy();
    public SqlWhereClause get_Having();
    public SqlOrderByClause get_OrderBy();
    public SelectQuery End();
    [CompilerGeneratedAttribute]
protected internal SelectQuery get_SelectQuery();
    [CompilerGeneratedAttribute]
private void set_SelectQuery(SelectQuery value);
    internal void SetSqlQuery(SelectQuery selectQuery);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class LinqToDB.SqlQuery.ClauseBase`2 : ConditionBase`2<T1, T2> {
    [CompilerGeneratedAttribute]
private SelectQuery <SelectQuery>k__BackingField;
    public SqlSelectClause Select { get; }
    public SqlFromClause From { get; }
    public SqlGroupByClause GroupBy { get; }
    public SqlWhereClause Having { get; }
    public SqlOrderByClause OrderBy { get; }
    protected internal SelectQuery SelectQuery { get; private set; }
    [NullableContextAttribute("2")]
protected ClauseBase`2(SelectQuery selectQuery);
    public SqlSelectClause get_Select();
    public SqlFromClause get_From();
    public SqlGroupByClause get_GroupBy();
    public SqlWhereClause get_Having();
    public SqlOrderByClause get_OrderBy();
    public SelectQuery End();
    [CompilerGeneratedAttribute]
protected internal SelectQuery get_SelectQuery();
    [CompilerGeneratedAttribute]
private void set_SelectQuery(SelectQuery value);
    internal void SetSqlQuery(SelectQuery selectQuery);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class LinqToDB.SqlQuery.CloneVisitor`1 : ValueType {
    private Dictionary`2<IQueryElement, IQueryElement> _objectTree;
    [NullableAttribute("2")]
private TContext _context;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`3<TContext, IQueryElement, bool> _doClone;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<IQueryElement, bool> _doCloneStatic;
    internal CloneVisitor`1(Dictionary`2<IQueryElement, IQueryElement> objectTree, TContext context, Func`3<TContext, IQueryElement, bool> doClone);
    internal CloneVisitor`1(Dictionary`2<IQueryElement, IQueryElement> objectTree, Func`2<IQueryElement, bool> doClone);
    public T[] Clone(T[] elements);
    private void CloneInto(IList`1<T> target, IReadOnlyList`1<T> source);
    private void CloneInto(IList`1<T[]> target, IReadOnlyList`1<T[]> source);
    private SqlSelectClause Clone(SelectQuery selectQuery, SqlSelectClause selectClause);
    private SqlFromClause Clone(SelectQuery selectQuery, SqlFromClause from);
    private SqlOrderByClause Clone(SelectQuery selectQuery, SqlOrderByClause orderBy);
    private SqlWhereClause Clone(SelectQuery selectQuery, SqlWhereClause where);
    private SqlGroupByClause Clone(SelectQuery selectQuery, SqlGroupByClause groupBy);
    internal T Clone(T element);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class LinqToDB.SqlQuery.ConditionBase`2 : object {
    protected SqlSearchCondition Search { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Not_<T1, T2> Not { get; }
    protected abstract virtual SqlSearchCondition get_Search();
    protected abstract virtual T2 GetNext();
    protected T1 SetOr(bool value);
    public Not_<T1, T2> get_Not();
    public sealed virtual Expr_<T1, T2> Expr(ISqlExpression expr);
    public sealed virtual Expr_<T1, T2> Field(SqlField field);
    public sealed virtual Expr_<T1, T2> SubQuery(SelectQuery selectQuery);
    public sealed virtual Expr_<T1, T2> Value(object value);
    public T2 Exists(SelectQuery subQuery);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.SqlQuery.ConvertVisitor`1 : object {
    private bool _visitAll;
    private Func`3<ConvertVisitor`1<TContext>, IQueryElement, IQueryElement> _convert;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<ConvertVisitor`1<TContext>, bool> _parentAction;
    public TContext Context;
    public bool AllowMutation;
    public bool HasStack;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<IQueryElement, IQueryElement> _visitedElements;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<IQueryElement> _stack;
    public IQueryElement CurrentElement;
    public List`1<IQueryElement> Stack { get; }
    [NullableAttribute("2")]
public IQueryElement ParentElement { get; }
    internal ConvertVisitor`1(TContext context, Func`3<ConvertVisitor`1<TContext>, IQueryElement, IQueryElement> convertAction, bool visitAll, bool allowMutation, bool withStack, Func`2<ConvertVisitor`1<TContext>, bool> parentAction);
    public List`1<IQueryElement> get_Stack();
    [NullableContextAttribute("2")]
public IQueryElement get_ParentElement();
    internal void Reset(TContext context, Func`3<ConvertVisitor`1<TContext>, IQueryElement, IQueryElement> convertAction, bool visitAll, bool allowMutation, bool withStack, Func`2<ConvertVisitor`1<TContext>, bool> parentAction);
    [NullableContextAttribute("2")]
private static void CorrectQueryHierarchy(SelectQuery parentQuery);
    private void Push(IQueryElement element);
    private void Pop();
    public void AddVisited(IQueryElement element, IQueryElement newElement);
    public void RemoveVisited(IQueryElement element);
    private void ReplaceVisited(IQueryElement element, IQueryElement newElement);
    private IQueryElement GetCurrentReplaced(IQueryElement element);
    [NullableContextAttribute("2")]
internal IQueryElement ConvertInternal(IQueryElement element);
    private T[] Convert(T[] arr);
    private T[] Convert(T[] arr1, Clone`1<TContext, T> clone);
    private List`1<T> ConvertSafe(List`1<T> list);
    private T[] ConvertSafe(T[] array);
    private List`1<T> ConvertSafe(List`1<T> list1, Clone`1<TContext, T> clone);
    private T[] ConvertSafe(T[] array1, Clone`1<TContext, T> clone);
    private List`1<T> Convert(List`1<T> list);
    private List`1<T> Convert(List`1<T> list1, Clone`1<TContext, T> clone);
    private List`1<T[]> ConvertListArray(List`1<T[]> list1, Clone`1<TContext, T> clone);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("CTE({CteID}, {Name})")]
public class LinqToDB.SqlQuery.CteClause : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private SqlField[] _fields;
    public static int CteIDCounter;
    [CompilerGeneratedAttribute]
private int <CteID>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private SelectQuery <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ObjectType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRecursive>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SqlField[] Fields { get; internal set; }
    public int CteID { get; }
    [NullableAttribute("2")]
public string Name { get; public set; }
    [NullableAttribute("2")]
public SelectQuery Body { get; public set; }
    public Type ObjectType { get; public set; }
    public bool IsRecursive { get; public set; }
    public QueryElementType ElementType { get; }
    [NullableContextAttribute("2")]
public CteClause(SelectQuery body, Type objectType, bool isRecursive, string name);
    internal CteClause(SelectQuery body, IEnumerable`1<SqlField> fields, Type objectType, bool isRecursive, string name);
    internal CteClause(Type objectType, bool isRecursive, string name);
    public SqlField[] get_Fields();
    internal void set_Fields(SqlField[] value);
    [CompilerGeneratedAttribute]
public int get_CteID();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Name();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Name(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public SelectQuery get_Body();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Body(SelectQuery value);
    [CompilerGeneratedAttribute]
public Type get_ObjectType();
    [CompilerGeneratedAttribute]
public void set_ObjectType(Type value);
    [CompilerGeneratedAttribute]
public bool get_IsRecursive();
    [CompilerGeneratedAttribute]
public void set_IsRecursive(bool value);
    internal void Init(SelectQuery body, ICollection`1<SqlField> fields);
    public sealed virtual QueryElementType get_ElementType();
    public sealed virtual StringBuilder ToString(StringBuilder sb, Dictionary`2<IQueryElement, IQueryElement> dic);
    public sealed virtual ISqlExpression Walk(WalkOptions options, TContext context, Func`3<TContext, ISqlExpression, ISqlExpression> func);
    public SqlField RegisterFieldMapping(int index, Func`1<SqlField> fieldFactory);
}
public enum LinqToDB.SqlQuery.DefaultNullable : Enum {
    public int value__;
    public static DefaultNullable None;
    public static DefaultNullable Null;
    public static DefaultNullable NotNull;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class LinqToDB.SqlQuery.EvaluationContext : object {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<IQueryElement, ValueTuple`2<object, bool>> _evaluationCache;
    [CompilerGeneratedAttribute]
private IReadOnlyParameterValues <ParameterValues>k__BackingField;
    public IReadOnlyParameterValues ParameterValues { get; }
    public EvaluationContext(IReadOnlyParameterValues parameterValues);
    [CompilerGeneratedAttribute]
public IReadOnlyParameterValues get_ParameterValues();
    [NullableContextAttribute("1")]
internal bool TryGetValue(IQueryElement expr, Nullable`1& info);
    [NullableContextAttribute("1")]
public void Register(IQueryElement expr, object value);
    [NullableContextAttribute("1")]
public void RegisterError(IQueryElement expr);
}
public enum LinqToDB.SqlQuery.GroupingType : Enum {
    public int value__;
    public static GroupingType Default;
    public static GroupingType GroupBySets;
    public static GroupingType Rollup;
    public static GroupingType Cube;
}
[NullableContextAttribute("1")]
internal interface LinqToDB.SqlQuery.IConditionExpr`1 {
    public abstract virtual T Expr(ISqlExpression expr);
    public abstract virtual T Field(SqlField field);
    public abstract virtual T SubQuery(SelectQuery selectQuery);
    public abstract virtual T Value(object value);
}
[NullableContextAttribute("1")]
public interface LinqToDB.SqlQuery.IInvertibleElement {
    public abstract virtual bool CanInvert();
    public abstract virtual IQueryElement Invert();
}
[NullableContextAttribute("1")]
public interface LinqToDB.SqlQuery.IQueryElement {
    public QueryElementType ElementType { get; }
    public abstract virtual QueryElementType get_ElementType();
    public abstract virtual StringBuilder ToString(StringBuilder sb, Dictionary`2<IQueryElement, IQueryElement> dic);
}
[NullableContextAttribute("1")]
public interface LinqToDB.SqlQuery.IReadOnlyParameterValues {
    public abstract virtual bool TryGetValue(SqlParameter parameter, SqlParameterValue& value);
}
public interface LinqToDB.SqlQuery.ISqlExpression {
    public bool CanBeNull { get; }
    public int Precedence { get; }
    [NullableAttribute("2")]
public Type SystemType { get; }
    [NullableContextAttribute("1")]
public abstract virtual bool Equals(ISqlExpression other, Func`3<ISqlExpression, ISqlExpression, bool> comparer);
    public abstract virtual bool get_CanBeNull();
    public abstract virtual int get_Precedence();
    [NullableContextAttribute("2")]
public abstract virtual Type get_SystemType();
}
[NullableContextAttribute("1")]
public interface LinqToDB.SqlQuery.ISqlExpressionWalkable {
    public abstract virtual ISqlExpression Walk(WalkOptions options, TContext context, Func`3<TContext, ISqlExpression, ISqlExpression> func);
}
public interface LinqToDB.SqlQuery.ISqlExtensionBuilder {
}
public interface LinqToDB.SqlQuery.ISqlPredicate {
    public bool CanBeNull { get; }
    public int Precedence { get; }
    public abstract virtual bool get_CanBeNull();
    public abstract virtual int get_Precedence();
    [NullableContextAttribute("1")]
public abstract virtual bool Equals(ISqlPredicate other, Func`3<ISqlExpression, ISqlExpression, bool> comparer);
}
public interface LinqToDB.SqlQuery.ISqlQueryExtensionBuilder {
    [NullableContextAttribute("1")]
public abstract virtual void Build(ISqlBuilder sqlBuilder, StringBuilder stringBuilder, SqlQueryExtension sqlQueryExtension);
}
public interface LinqToDB.SqlQuery.ISqlTableExtensionBuilder {
    [NullableContextAttribute("1")]
public abstract virtual void Build(ISqlBuilder sqlBuilder, StringBuilder stringBuilder, SqlQueryExtension sqlQueryExtension, SqlTable table, string alias);
}
public interface LinqToDB.SqlQuery.ISqlTableSource {
    [NullableAttribute("1")]
public SqlField All { get; }
    public int SourceID { get; }
    public SqlTableType SqlTableType { get; }
    [NullableContextAttribute("1")]
public abstract virtual SqlField get_All();
    public abstract virtual int get_SourceID();
    public abstract virtual SqlTableType get_SqlTableType();
    [NullableContextAttribute("1")]
public abstract virtual IList`1<ISqlExpression> GetKeys(bool allIfEmpty);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class LinqToDB.SqlQuery.JoinExtensions : object {
    [ExtensionAttribute]
public static Join InnerJoin(ISqlTableSource table, Join[] joins);
    [ExtensionAttribute]
public static Join InnerJoin(ISqlTableSource table, string alias, Join[] joins);
    [ExtensionAttribute]
public static Join LeftJoin(ISqlTableSource table, Join[] joins);
    [ExtensionAttribute]
public static Join LeftJoin(ISqlTableSource table, string alias, Join[] joins);
    [ExtensionAttribute]
public static Join Join(ISqlTableSource table, Join[] joins);
    [ExtensionAttribute]
public static Join Join(ISqlTableSource table, string alias, Join[] joins);
    [ExtensionAttribute]
public static Join CrossApply(ISqlTableSource table, Join[] joins);
    [ExtensionAttribute]
public static Join CrossApply(ISqlTableSource table, string alias, Join[] joins);
    [ExtensionAttribute]
public static Join OuterApply(ISqlTableSource table, Join[] joins);
    [ExtensionAttribute]
public static Join OuterApply(ISqlTableSource table, string alias, Join[] joins);
    [ExtensionAttribute]
public static Join WeakInnerJoin(ISqlTableSource table, Join[] joins);
    [ExtensionAttribute]
public static Join WeakInnerJoin(ISqlTableSource table, string alias, Join[] joins);
    [ExtensionAttribute]
public static Join WeakLeftJoin(ISqlTableSource table, Join[] joins);
    [ExtensionAttribute]
public static Join WeakLeftJoin(ISqlTableSource table, string alias, Join[] joins);
    [ExtensionAttribute]
public static Join WeakJoin(ISqlTableSource table, Join[] joins);
    [ExtensionAttribute]
public static Join WeakJoin(ISqlTableSource table, string alias, Join[] joins);
    [ExtensionAttribute]
public static Join RightJoin(ISqlTableSource table, Join[] joins);
    [ExtensionAttribute]
public static Join RightJoin(ISqlTableSource table, string alias, Join[] joins);
    [ExtensionAttribute]
public static Join FullJoin(ISqlTableSource table, Join[] joins);
    [ExtensionAttribute]
public static Join FullJoin(ISqlTableSource table, string alias, Join[] joins);
}
public enum LinqToDB.SqlQuery.JoinType : Enum {
    public int value__;
    public static JoinType Auto;
    public static JoinType Inner;
    public static JoinType Left;
    public static JoinType CrossApply;
    public static JoinType OuterApply;
    public static JoinType Right;
    public static JoinType Full;
}
public enum LinqToDB.SqlQuery.MultiInsertType : Enum {
    public int value__;
    public static MultiInsertType Unconditional;
    public static MultiInsertType All;
    public static MultiInsertType First;
}
public class LinqToDB.SqlQuery.Precedence : object {
    public static int Primary;
    public static int Unary;
    public static int Concatenate;
    public static int Multiplicative;
    public static int Subtraction;
    public static int Additive;
    public static int Comparison;
    public static int Bitwise;
    public static int LogicalNegation;
    public static int LogicalConjunction;
    public static int LogicalDisjunction;
    public static int Unknown;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class LinqToDB.SqlQuery.PseudoFunctions : object {
    public static string TO_LOWER;
    public static string TO_UPPER;
    public static string CONVERT;
    public static string TRY_CONVERT;
    public static string TRY_CONVERT_OR_DEFAULT;
    public static string REPLACE;
    public static string REMOVE_CONVERT;
    public static string COALESCE;
    public static SqlFunction MakeToLower(ISqlExpression value);
    public static SqlFunction MakeToUpper(ISqlExpression value);
    public static SqlFunction MakeConvert(SqlDataType toType, SqlDataType fromType, ISqlExpression value);
    public static SqlFunction MakeTryConvert(SqlDataType toType, SqlDataType fromType, ISqlExpression value);
    public static SqlFunction MakeTryConvertOrDefault(SqlDataType toType, SqlDataType fromType, ISqlExpression value, ISqlExpression defaultValue);
    public static SqlFunction MakeReplace(ISqlExpression value, ISqlExpression oldSubstring, ISqlExpression newSubstring);
    public static SqlFunction MakeRemoveConvert(ISqlExpression value, SqlDataType resultType);
    public static SqlFunction MakeCoalesce(Type systemType, ISqlExpression[] values);
}
public enum LinqToDB.SqlQuery.QueryElementType : Enum {
    public int value__;
    public static QueryElementType SqlField;
    public static QueryElementType SqlFunction;
    public static QueryElementType SqlParameter;
    public static QueryElementType SqlExpression;
    public static QueryElementType SqlObjectExpression;
    public static QueryElementType SqlBinaryExpression;
    public static QueryElementType SqlValue;
    public static QueryElementType SqlDataType;
    public static QueryElementType SqlTable;
    public static QueryElementType SqlAliasPlaceholder;
    public static QueryElementType SqlRow;
    public static QueryElementType ExprPredicate;
    public static QueryElementType NotExprPredicate;
    public static QueryElementType ExprExprPredicate;
    public static QueryElementType LikePredicate;
    public static QueryElementType SearchStringPredicate;
    public static QueryElementType BetweenPredicate;
    public static QueryElementType IsNullPredicate;
    public static QueryElementType IsDistinctPredicate;
    public static QueryElementType IsTruePredicate;
    public static QueryElementType InSubQueryPredicate;
    public static QueryElementType InListPredicate;
    public static QueryElementType FuncLikePredicate;
    public static QueryElementType SqlQuery;
    public static QueryElementType Column;
    public static QueryElementType SearchCondition;
    public static QueryElementType Condition;
    public static QueryElementType TableSource;
    public static QueryElementType JoinedTable;
    public static QueryElementType SelectClause;
    public static QueryElementType InsertClause;
    public static QueryElementType UpdateClause;
    public static QueryElementType SetExpression;
    public static QueryElementType FromClause;
    public static QueryElementType WhereClause;
    public static QueryElementType GroupByClause;
    public static QueryElementType OrderByClause;
    public static QueryElementType OrderByItem;
    public static QueryElementType SetOperator;
    public static QueryElementType WithClause;
    public static QueryElementType CteClause;
    public static QueryElementType SqlCteTable;
    public static QueryElementType SqlRawSqlTable;
    public static QueryElementType SqlValuesTable;
    public static QueryElementType OutputClause;
    public static QueryElementType SelectStatement;
    public static QueryElementType InsertStatement;
    public static QueryElementType InsertOrUpdateStatement;
    public static QueryElementType UpdateStatement;
    public static QueryElementType DeleteStatement;
    public static QueryElementType MergeStatement;
    public static QueryElementType MultiInsertStatement;
    public static QueryElementType ConditionalInsertClause;
    public static QueryElementType CreateTableStatement;
    public static QueryElementType DropTableStatement;
    public static QueryElementType TruncateTableStatement;
    public static QueryElementType SqlTableLikeSource;
    public static QueryElementType MergeOperationClause;
    public static QueryElementType GroupingSet;
    public static QueryElementType Comment;
    public static QueryElementType SqlID;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class LinqToDB.SqlQuery.QueryFindVisitor`1 : ValueType {
    private HashSet`1<IQueryElement> _visitedFind;
    [NullableAttribute("2")]
private TContext _context;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`3<TContext, IQueryElement, bool> _find;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<IQueryElement, bool> _findStatic;
    public QueryFindVisitor`1(TContext context, Func`3<TContext, IQueryElement, bool> find);
    public QueryFindVisitor`1(Func`2<IQueryElement, bool> find);
    private IQueryElement Find(IEnumerable`1<T> arr);
    [NullableContextAttribute("2")]
private IQueryElement Find(List`1<SqlQueryExtension> list);
    private IQueryElement FindX(SqlObjectExpression oe);
    private IQueryElement FindX(SqlSearchCondition sc);
    [NullableContextAttribute("2")]
public IQueryElement Find(IQueryElement element);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class LinqToDB.SqlQuery.QueryHelper : object {
    private static Regex _paramsRegex;
    private static QueryHelper();
    public static bool ContainsElement(IQueryElement testedRoot, IQueryElement element);
    public static bool IsDependsOn(IQueryElement testedRoot, HashSet`1<ISqlTableSource> onSources, HashSet`1<IQueryElement> elementsToIgnore);
    public static bool IsDependsOn(IQueryElement testedRoot, IQueryElement onElement, HashSet`1<IQueryElement> elementsToIgnore);
    public static int DependencyCount(IQueryElement testedRoot, IQueryElement onElement, HashSet`1<IQueryElement> elementsToIgnore);
    [NullableContextAttribute("2")]
public static IValueConverter GetValueConverter(ISqlExpression expr);
    [NullableContextAttribute("2")]
public static ColumnDescriptor GetColumnDescriptor(ISqlExpression expr);
    public static Nullable`1<DbDataType> SuggestDbDataType(ISqlExpression expr);
    [NullableContextAttribute("2")]
public static DbDataType GetDbDataType(ISqlExpression expr);
    public static void CollectDependencies(IQueryElement root, IEnumerable`1<ISqlTableSource> sources, HashSet`1<ISqlExpression> found, IEnumerable`1<IQueryElement> ignore);
    public static void CollectUsedSources(IQueryElement root, HashSet`1<ISqlTableSource> found, IEnumerable`1<IQueryElement> ignore);
    public static bool IsTransitiveExpression(SqlExpression sqlExpression, bool checkNullability);
    public static ISqlExpression UnwrapExpression(ISqlExpression expr, bool checkNullability);
    public static ISqlExpression GetUnderlyingExpressionValue(SqlExpression sqlExpression, bool checkNullability);
    public static bool IsExpression(ISqlExpression expr);
    public static bool IsConstantFast(ISqlExpression expr);
    public static bool IsConstant(ISqlExpression expr);
    [ExtensionAttribute]
public static SelectQuery RootQuery(SelectQuery query);
    [ExtensionAttribute]
public static SqlJoinedTable FindJoin(SelectQuery query, Func`2<SqlJoinedTable, bool> match);
    [ExtensionAttribute]
public static void ConcatSearchCondition(SqlWhereClause where, SqlSearchCondition search);
    [ExtensionAttribute]
public static SqlSearchCondition EnsureConjunction(SqlSearchCondition searchCondition);
    [ExtensionAttribute]
public static SqlWhereClause EnsureConjunction(SqlWhereClause whereClause);
    [NullableContextAttribute("2")]
public static bool IsEqualTables(SqlTable table1, SqlTable table2);
    [IteratorStateMachineAttribute("LinqToDB.SqlQuery.QueryHelper/<EnumerateAccessibleSources>d__25")]
public static IEnumerable`1<ISqlTableSource> EnumerateAccessibleSources(SqlTableSource tableSource);
    [IteratorStateMachineAttribute("LinqToDB.SqlQuery.QueryHelper/<EnumerateAccessibleSources>d__26")]
public static IEnumerable`1<ISqlTableSource> EnumerateAccessibleSources(SelectQuery selectQuery);
    public static IEnumerable`1<SqlTable> EnumerateAccessibleTables(SelectQuery selectQuery);
    [IteratorStateMachineAttribute("LinqToDB.SqlQuery.QueryHelper/<EnumerateLevelSources>d__28")]
public static IEnumerable`1<ISqlTableSource> EnumerateLevelSources(SqlTableSource tableSource);
    [IteratorStateMachineAttribute("LinqToDB.SqlQuery.QueryHelper/<EnumerateLevelSources>d__29")]
public static IEnumerable`1<ISqlTableSource> EnumerateLevelSources(SelectQuery selectQuery);
    public static IEnumerable`1<SqlTable> EnumerateLevelTables(SelectQuery selectQuery);
    public static IEnumerable`1<SqlJoinedTable> EnumerateJoins(SelectQuery selectQuery);
    [IteratorStateMachineAttribute("LinqToDB.SqlQuery.QueryHelper/<EnumerateJoins>d__32")]
public static IEnumerable`1<SqlJoinedTable> EnumerateJoins(SqlTableSource tableSource);
    [IteratorStateMachineAttribute("LinqToDB.SqlQuery.QueryHelper/<EnumerateInnerJoined>d__33")]
public static IEnumerable`1<SqlTableSource> EnumerateInnerJoined(SqlTableSource tableSource);
    public static IEnumerable`1<SqlTableSource> EnumerateInnerJoined(SelectQuery selectQuery);
    public static bool TryConvertOrderedDistinctToGroupBy(SelectQuery select, SqlProviderFlags flags);
    public static bool CanRemoveOrderBy(SelectQuery selectQuery, SqlProviderFlags flags, QueryInformation information);
    public static bool TryRemoveDistinct(SelectQuery selectQuery, QueryInformation information);
    [ExtensionAttribute]
public static SelectQuery TransformInnerJoinsToWhere(SelectQuery selectQuery);
    [NullableContextAttribute("2")]
public static ISqlExpression GetUnderlyingExpression(ISqlExpression expression);
    public static SqlField GetUnderlyingField(ISqlExpression expression);
    public static SqlField ExtractField(ISqlExpression expression);
    public static SqlCondition GenerateEquality(ISqlExpression field1, ISqlExpression field2, bool compareNullsAsValues);
    public static void GetUsedSources(ISqlExpression root, HashSet`1<ISqlTableSource> foundSources);
    public static ISqlExpression NeedColumnForExpression(SelectQuery selectQuery, ISqlExpression forExpression, bool inProjection);
    public static bool ValidateTable(SelectQuery selectQuery, ISqlTableSource table);
    public static TStatement WrapQuery(TContext context, TStatement statement, Func`4<TContext, SelectQuery, IQueryElement, int> wrapTest, Action`2<TContext, IReadOnlyList`1<SelectQuery>> onWrap, bool allowMutation, bool withStack);
    public static TStatement WrapQuery(TStatement statement, SelectQuery queryToWrap, bool allowMutation);
    public static TStatement WrapQuery(TContext context, TStatement statement, Func`4<TContext, SelectQuery, IQueryElement, bool> wrapTest, Action`3<TContext, SelectQuery, SelectQuery> onWrap, bool allowMutation, bool withStack);
    public static SqlStatement JoinRemoval(TContext context, SqlStatement statement, Func`4<TContext, SqlStatement, SqlJoinedTable, bool> joinFunc);
    public static void MoveOrderByUp(SelectQuery[] queries);
    public static string TransformExpressionIndexes(TContext context, string expression, Func`3<TContext, int, int> transformFunc);
    public static ISqlExpression ConvertFormatToConcatenation(string format, IList`1<ISqlExpression> parameters);
    public static bool IsAggregationOrWindowFunction(IQueryElement expr);
    public static bool IsAggregationFunction(IQueryElement expr);
    public static bool IsWindowFunction(IQueryElement expr);
    public static bool ContainsAggregationOrWindowFunction(IQueryElement expr);
    public static bool ContainsAggregationOrWindowFunctionDeep(IQueryElement expr);
    public static bool ContainsAggregationFunctionOneLevel(IQueryElement expr);
    public static bool ContainsAggregationOrWindowFunctionOneLevel(IQueryElement expr);
    public static void CollectUniqueKeys(SqlTableSource tableSource, List`1<IList`1<ISqlExpression>> knownKeys);
    public static void CollectUniqueKeys(ISqlTableSource tableSource, bool includeDistinct, List`1<IList`1<ISqlExpression>> knownKeys);
    public static Nullable`1<bool> GetBoolValue(ISqlExpression expression, EvaluationContext context);
    [ExtensionAttribute]
public static string ToDebugString(IQueryElement expr);
    public static SqlCondition CorrectSearchConditionNesting(SelectQuery sql, SqlCondition condition, HashSet`1<ISqlTableSource> forTableSources);
    public static void MoveSearchConditionsToJoin(SelectQuery sql, SqlJoinedTable joinedTable, List`1<SqlCondition> movedConditions);
    public static bool HasQueryParameters(ISqlExpression expression);
    public static bool NeedParameterInlining(ISqlExpression expression);
    public static IDictionary`2<QueryElementType, int> CountElements(ISqlExpression expr);
    [ExtensionAttribute]
public static bool IsComplexExpression(ISqlExpression expr);
    [ExtensionAttribute]
public static bool ShouldCheckForNull(ISqlExpression expr);
    [ExtensionAttribute]
public static DbDataType GetExpressionType(ISqlExpression expr);
    public static bool HasOuterReferences(ISet`1<ISqlTableSource> sources, ISqlExpression expr);
    [ExtensionAttribute]
public static SqlTable GetUpdateTable(SqlUpdateStatement updateStatement);
    [ExtensionAttribute]
public static SqlTable GetDeleteTable(SqlDeleteStatement deleteStatement);
    private static void RemoveNotUnusedColumnsInternal(SelectQuery selectQuery, SelectQuery parentQuery);
    [ExtensionAttribute]
public static void RemoveNotUnusedColumns(SelectQuery selectQuery);
    [ExtensionAttribute]
public static SqlParameterValue GetParameterValue(SqlParameter parameter, IReadOnlyParameterValues parameterValues);
    [ExtensionAttribute]
public static bool TryEvaluateExpression(IQueryElement expr, EvaluationContext context, Object& result);
    [ExtensionAttribute]
public static bool IsMutable(IQueryElement expr);
    [ExtensionAttribute]
public static bool CanBeEvaluated(IQueryElement expr, bool withParameters);
    [ExtensionAttribute]
public static bool CanBeEvaluated(IQueryElement expr, EvaluationContext context);
    [ExtensionAttribute]
internal static ValueTuple`2<object, bool> TryEvaluateExpression(IQueryElement expr, EvaluationContext context);
    [ExtensionAttribute]
private static bool TryEvaluateExpressionInternal(IQueryElement expr, EvaluationContext context, Object& result);
    [ExtensionAttribute]
public static object EvaluateExpression(IQueryElement expr, EvaluationContext context);
    [ExtensionAttribute]
public static Nullable`1<bool> EvaluateBoolExpression(IQueryElement expr, EvaluationContext context, Nullable`1<bool> defaultValue);
    [CompilerGeneratedAttribute]
internal static string <ConvertFormatToConcatenation>g__StripDoubleQuotes|53_0(string str);
    [CompilerGeneratedAttribute]
internal static bool <MoveSearchConditionsToJoin>g__ContainsTable|66_2(ISqlTableSource tbl, IQueryElement qe);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.SqlQuery.QueryInformation : object {
    private SelectQuery _rootQuery;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<SelectQuery, HierarchyInfo> _parents;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<SelectQuery, List`1<SelectQuery>> _tree;
    public QueryInformation(SelectQuery rootQuery);
    public SelectQuery GetParentQuery(SelectQuery selectQuery);
    public HierarchyInfo GetHierarchyInfo(SelectQuery selectQuery);
    private void CheckInitialized();
    public void Resync();
    public IEnumerable`1<SelectQuery> GetQueriesParentFirst();
    [IteratorStateMachineAttribute("LinqToDB.SqlQuery.QueryInformation/<GetQueriesParentFirst>d__9")]
public IEnumerable`1<SelectQuery> GetQueriesParentFirst(SelectQuery root);
    public IEnumerable`1<SelectQuery> GetQueriesChildFirst();
    [IteratorStateMachineAttribute("LinqToDB.SqlQuery.QueryInformation/<GetQueriesChildFirst>d__11")]
public IEnumerable`1<SelectQuery> GetQueriesChildFirst(SelectQuery root);
    private void RegisterHierachry(SelectQuery parent, SelectQuery child, HierarchyInfo info);
    private void BuildParentHierarchy(SelectQuery selectQuery);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class LinqToDB.SqlQuery.QueryParentVisitor`1 : ValueType {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Dictionary`2<IQueryElement, IQueryElement> VisitedElements;
    [NullableAttribute("2")]
private TContext _context;
    private bool _all;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`3<TContext, IQueryElement, bool> _visit;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<IQueryElement, bool> _visitStatic;
    public QueryParentVisitor`1(TContext context, bool all, Func`3<TContext, IQueryElement, bool> visit);
    public QueryParentVisitor`1(bool all, Func`2<IQueryElement, bool> visit);
    [NullableContextAttribute("2")]
public void Visit(IQueryElement element);
    private void VisitX(SelectQuery q);
    private void VisitX(SqlOrderByClause element);
    private void VisitX(SqlGroupByClause element);
    private void VisitX(SqlGroupingSet element);
    private void VisitX(SqlFromClause element);
    private void VisitX(SqlSelectClause sc);
    private void VisitX(SqlUpdateClause sc);
    private void VisitX(CteClause sc);
    private void VisitX(SqlInsertClause sc);
    private void VisitX(InList p);
    private void VisitX(SqlSearchCondition element);
    private void VisitX(SqlTableSource table);
    [NullableContextAttribute("2")]
private void VisitX(SqlTable table);
    [NullableContextAttribute("2")]
private void VisitX(SqlOutputClause outputClause);
    private void VisitX(SqlWithClause element);
    private void VisitX(SqlCteTable table);
    private void VisitX(SqlRawSqlTable table);
    private void VisitX(SqlExpression element);
    private void VisitX(SqlRow element);
    private void VisitX(SqlObjectExpression element);
    private void VisitX(SqlFunction element);
    private void VisitX(SqlMergeStatement element);
    private void VisitX(SqlMultiInsertStatement element);
    private void VisitX(SqlConditionalInsertClause element);
    private void VisitX(SqlTableLikeSource element);
    private void VisitX(SqlValuesTable element);
    private void VisitX(SqlMergeOperationClause element);
}
public enum LinqToDB.SqlQuery.QueryType : Enum {
    public int value__;
    public static QueryType Select;
    public static QueryType Delete;
    public static QueryType Update;
    public static QueryType Insert;
    public static QueryType InsertOrUpdate;
    public static QueryType CreateTable;
    public static QueryType DropTable;
    public static QueryType TruncateTable;
    public static QueryType Merge;
    public static QueryType MultiInsert;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class LinqToDB.SqlQuery.QueryVisitor`1 : ValueType {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Dictionary`2<IQueryElement, IQueryElement> VisitedElements;
    [NullableAttribute("2")]
private TContext _context;
    private bool _all;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`2<TContext, IQueryElement> _visit;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`1<IQueryElement> _visitStatic;
    public QueryVisitor`1(TContext context, bool all, Action`2<TContext, IQueryElement> visit);
    public QueryVisitor`1(bool all, Action`1<IQueryElement> visit);
    [NullableContextAttribute("2")]
public void Visit(IQueryElement element);
    private void VisitX(SelectQuery q);
    private void VisitX(SqlOrderByClause element);
    private void VisitX(SqlGroupByClause element);
    private void VisitX(SqlGroupingSet element);
    private void VisitX(SqlFromClause element);
    private void VisitX(SqlSelectClause sc);
    private void VisitX(SqlUpdateClause sc);
    private void VisitX(CteClause sc);
    private void VisitX(SqlInsertClause sc);
    private void VisitX(InList p);
    private void VisitX(SqlSearchCondition element);
    private void VisitX(SqlTableSource table);
    [NullableContextAttribute("2")]
private void VisitX(SqlTable table);
    private void VisitX(SqlRawSqlTable table);
    private void VisitX(SqlWithClause element);
    private void VisitX(SqlCteTable table);
    private void VisitX(SqlOutputClause outputClause);
    private void VisitX(SqlExpression element);
    private void VisitX(SqlRow element);
    private void VisitX(SqlObjectExpression element);
    private void VisitX(SqlFunction element);
    private void VisitX(SqlMergeStatement element);
    private void VisitX(SqlMultiInsertStatement element);
    private void VisitX(SqlConditionalInsertClause element);
    private void VisitX(SqlTableLikeSource element);
    private void VisitX(SqlValuesTable element);
    private void VisitX(SqlMergeOperationClause element);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class LinqToDB.SqlQuery.QueryVisitorExtensions : object {
    [ExtensionAttribute]
public static void Visit(IQueryElement element, TContext context, Action`2<TContext, IQueryElement> action);
    [ExtensionAttribute]
public static void Visit(IQueryElement element, Action`1<IQueryElement> action);
    [ExtensionAttribute]
public static void VisitAll(IQueryElement element, TContext context, Action`2<TContext, IQueryElement> action);
    [ExtensionAttribute]
public static void VisitAll(IQueryElement element, Action`1<IQueryElement> action);
    [ExtensionAttribute]
public static void VisitParentFirst(IQueryElement element, TContext context, Func`3<TContext, IQueryElement, bool> action);
    [ExtensionAttribute]
public static void VisitParentFirst(IQueryElement element, Func`2<IQueryElement, bool> action);
    [ExtensionAttribute]
public static void VisitParentFirstAll(IQueryElement element, TContext context, Func`3<TContext, IQueryElement, bool> action);
    [ExtensionAttribute]
public static void VisitParentFirstAll(IQueryElement element, Func`2<IQueryElement, bool> action);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IQueryElement Find(IQueryElement element, TContext context, Func`3<TContext, IQueryElement, bool> find);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IQueryElement Find(IQueryElement element, Func`2<IQueryElement, bool> find);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IQueryElement Find(IQueryElement element, QueryElementType type);
    [ExtensionAttribute]
public static T Clone(T element, Dictionary`2<IQueryElement, IQueryElement> objectTree);
    [ExtensionAttribute]
public static T[] Clone(T[] elements, Dictionary`2<IQueryElement, IQueryElement> objectTree);
    [ExtensionAttribute]
public static T Clone(T element, TContext context, Dictionary`2<IQueryElement, IQueryElement> objectTree, Func`3<TContext, IQueryElement, bool> doClone);
    [ExtensionAttribute]
public static T Clone(T element, TContext context, Func`3<TContext, IQueryElement, bool> doClone);
    [ExtensionAttribute]
public static T Clone(T element, Func`2<IQueryElement, bool> doClone);
    [ExtensionAttribute]
public static T Clone(T element);
    [ExtensionAttribute]
public static T Convert(T element, TContext context, Func`3<ConvertVisitor`1<TContext>, IQueryElement, IQueryElement> convertAction, bool withStack);
    [ExtensionAttribute]
public static T Convert(T element, TContext context, Func`3<ConvertVisitor`1<TContext>, IQueryElement, IQueryElement> convertAction);
    [ExtensionAttribute]
public static T Convert(T element, Func`3<ConvertVisitor`1<object>, IQueryElement, IQueryElement> convertAction, bool withStack);
    [ExtensionAttribute]
public static T Convert(T element, Func`3<ConvertVisitor`1<object>, IQueryElement, IQueryElement> convertAction);
    [ExtensionAttribute]
public static T Convert(T element, TContext context, bool allowMutation, Func`3<ConvertVisitor`1<TContext>, IQueryElement, IQueryElement> convertAction, bool withStack);
    [ExtensionAttribute]
public static T Convert(T element, TContext context, bool allowMutation, Func`3<ConvertVisitor`1<TContext>, IQueryElement, IQueryElement> convertAction);
    [ExtensionAttribute]
public static T ConvertAll(T element, TContext context, Func`3<ConvertVisitor`1<TContext>, IQueryElement, IQueryElement> convertAction);
    [ExtensionAttribute]
public static T ConvertAll(T element, TContext context, Func`3<ConvertVisitor`1<TContext>, IQueryElement, IQueryElement> convertAction, Func`2<ConvertVisitor`1<TContext>, bool> parentAction);
    [ExtensionAttribute]
public static T ConvertAll(T element, TContext context, bool allowMutation, Func`3<ConvertVisitor`1<TContext>, IQueryElement, IQueryElement> convertAction);
    [ExtensionAttribute]
public static T ConvertAll(T element, bool allowMutation, Func`3<ConvertVisitor`1<object>, IQueryElement, IQueryElement> convertAction);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class LinqToDB.SqlQuery.ReservedWords : object {
    private static HashSet`1<string> _reservedWordsAll;
    private static HashSet`1<string> _reservedWordsPostgres;
    private static HashSet`1<string> _reservedWordsOracle;
    private static HashSet`1<string> _reservedWordsFirebird;
    private static HashSet`1<string> _reservedWordsInformix;
    private static ConcurrentDictionary`2<string, HashSet`1<string>> _reservedWords;
    private static ReservedWords();
    public static bool IsReserved(string word, string providerName);
    public static void Add(string word, string providerName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("SQL = {SqlText}")]
public class LinqToDB.SqlQuery.SelectQuery : object {
    [CompilerGeneratedAttribute]
private SqlSelectClause <Select>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlFromClause <From>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlWhereClause <Where>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlGroupByClause <GroupBy>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlWhereClause <Having>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlOrderByClause <OrderBy>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<object> _properties;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private SelectQuery <ParentSelect>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsParameterDependent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DoNotRemove>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <QueryName>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<SqlQueryExtension> <SqlQueryExtensions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DoNotSetAliases>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<ISqlExpression[]> _uniqueKeys;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<SqlSetOperator> _setOperators;
    public static int SourceIDCounter;
    [CompilerGeneratedAttribute]
private int <SourceID>k__BackingField;
    [NullableAttribute("2")]
private SqlField _all;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<ISqlExpression> _keys;
    [DebuggerBrowsableAttribute("0")]
protected string DebugSqlText { get; }
    public SqlSelectClause Select { get; internal set; }
    public SqlFromClause From { get; internal set; }
    public SqlWhereClause Where { get; internal set; }
    public SqlGroupByClause GroupBy { get; internal set; }
    public SqlWhereClause Having { get; internal set; }
    public SqlOrderByClause OrderBy { get; internal set; }
    public List`1<object> Properties { get; }
    [NullableAttribute("2")]
public SelectQuery ParentSelect { get; public set; }
    public bool IsSimple { get; }
    public bool IsSimpleOrSet { get; }
    public bool IsParameterDependent { get; public set; }
    public bool DoNotRemove { get; public set; }
    [NullableAttribute("2")]
public string QueryName { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<SqlQueryExtension> SqlQueryExtensions { get; public set; }
    public bool DoNotSetAliases { get; public set; }
    public List`1<ISqlExpression[]> UniqueKeys { get; }
    public bool HasUniqueKeys { get; }
    public List`1<SqlSetOperator> SetOperators { get; }
    public bool HasSetOperators { get; }
    public bool CanBeNull { get; }
    public int Precedence { get; }
    [NullableAttribute("2")]
public Type SystemType { get; }
    public int SourceID { get; }
    public SqlTableType SqlTableType { get; }
    public SqlField All { get; internal set; }
    public QueryElementType ElementType { get; }
    public string SqlText { get; }
    internal SelectQuery(int id);
    protected string get_DebugSqlText();
    internal void Init(SqlSelectClause select, SqlFromClause from, SqlWhereClause where, SqlGroupByClause groupBy, SqlWhereClause having, SqlOrderByClause orderBy, List`1<SqlSetOperator> setOperators, List`1<ISqlExpression[]> uniqueKeys, SelectQuery parentSelect, bool parameterDependent, string queryName, bool doNotSetAliases);
    [CompilerGeneratedAttribute]
public SqlSelectClause get_Select();
    [CompilerGeneratedAttribute]
internal void set_Select(SqlSelectClause value);
    [CompilerGeneratedAttribute]
public SqlFromClause get_From();
    [CompilerGeneratedAttribute]
internal void set_From(SqlFromClause value);
    [CompilerGeneratedAttribute]
public SqlWhereClause get_Where();
    [CompilerGeneratedAttribute]
internal void set_Where(SqlWhereClause value);
    [CompilerGeneratedAttribute]
public SqlGroupByClause get_GroupBy();
    [CompilerGeneratedAttribute]
internal void set_GroupBy(SqlGroupByClause value);
    [CompilerGeneratedAttribute]
public SqlWhereClause get_Having();
    [CompilerGeneratedAttribute]
internal void set_Having(SqlWhereClause value);
    [CompilerGeneratedAttribute]
public SqlOrderByClause get_OrderBy();
    [CompilerGeneratedAttribute]
internal void set_OrderBy(SqlOrderByClause value);
    public List`1<object> get_Properties();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public SelectQuery get_ParentSelect();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ParentSelect(SelectQuery value);
    public bool get_IsSimple();
    public bool get_IsSimpleOrSet();
    [CompilerGeneratedAttribute]
public bool get_IsParameterDependent();
    [CompilerGeneratedAttribute]
public void set_IsParameterDependent(bool value);
    [CompilerGeneratedAttribute]
public bool get_DoNotRemove();
    [CompilerGeneratedAttribute]
public void set_DoNotRemove(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_QueryName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_QueryName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<SqlQueryExtension> get_SqlQueryExtensions();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SqlQueryExtensions(List`1<SqlQueryExtension> value);
    [CompilerGeneratedAttribute]
public bool get_DoNotSetAliases();
    [CompilerGeneratedAttribute]
public void set_DoNotSetAliases(bool value);
    public List`1<ISqlExpression[]> get_UniqueKeys();
    public bool get_HasUniqueKeys();
    public List`1<SqlSetOperator> get_SetOperators();
    public bool get_HasSetOperators();
    public void AddUnion(SelectQuery union, bool isAll);
    public void ForEachTable(TContext context, Action`2<TContext, SqlTableSource> action, HashSet`1<SelectQuery> visitedQueries);
    public ISqlTableSource GetTableSource(ISqlTableSource table);
    internal static SqlTableSource CheckTableSource(SqlTableSource ts, ISqlTableSource table, string alias);
    public sealed virtual bool get_CanBeNull();
    public sealed virtual int get_Precedence();
    public sealed virtual bool Equals(ISqlExpression other, Func`3<ISqlExpression, ISqlExpression, bool> comparer);
    [NullableContextAttribute("2")]
public sealed virtual Type get_SystemType();
    public sealed virtual ISqlExpression Walk(WalkOptions options, TContext context, Func`3<TContext, ISqlExpression, ISqlExpression> func);
    [NullableContextAttribute("2")]
private sealed virtual override bool System.IEquatable<LinqToDB.SqlQuery.ISqlExpression>.Equals(ISqlExpression other);
    [CompilerGeneratedAttribute]
public sealed virtual int get_SourceID();
    public sealed virtual SqlTableType get_SqlTableType();
    public sealed virtual SqlField get_All();
    internal void set_All(SqlField value);
    public sealed virtual IList`1<ISqlExpression> GetKeys(bool allIfEmpty);
    public sealed virtual QueryElementType get_ElementType();
    public string get_SqlText();
    public sealed virtual StringBuilder ToString(StringBuilder sb, Dictionary`2<IQueryElement, IQueryElement> dic);
    internal void EnsureFindTables();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private IEnumerable`1<SqlColumn> <GetKeys>b__94_0(ISqlExpression key);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class LinqToDB.SqlQuery.SelectQueryOptimizer : object {
    private SqlProviderFlags _flags;
    private DataOptions _dataOptions;
    private SelectQuery _selectQuery;
    private IQueryElement _rootElement;
    private int _level;
    private IQueryElement[] _dependencies;
    public SelectQueryOptimizer(SqlProviderFlags flags, DataOptions dataOptions, IQueryElement rootElement, SelectQuery selectQuery, int level, IQueryElement[] dependencies);
    public void FinalizeAndValidate(bool isApplySupported);
    private void ResolveFields();
    private static QueryData GetQueryData(IQueryElement root, SelectQuery selectQuery, HashSet`1<IQueryElement> visitedHash);
    private static SqlTableSource FindField(SqlField field, SqlTableSource table);
    private static ISqlExpression GetColumn(QueryData data, SqlField field);
    private static bool FindField(List`1<SqlColumn> columns, SqlField field);
    private static void ResolveFields(QueryData data);
    private void OptimizeUnions();
    private void FinalizeAndValidateInternal(bool isApplySupported);
    private void OptimizeGroupBy();
    private void CorrectColumns();
    public static SqlCondition OptimizeCondition(SqlCondition condition);
    internal static SqlSearchCondition OptimizeSearchCondition(SqlSearchCondition inputCondition, EvaluationContext context);
    internal void ResolveWeakJoins();
    private static bool IsComplexQuery(SelectQuery query);
    private void OptimizeDistinct();
    private static void ApplySubsequentOrder(SelectQuery mainQuery, SelectQuery subQuery);
    private static void ApplySubQueryExtensions(SelectQuery mainQuery, SelectQuery subQuery);
    private SqlTableSource OptimizeSubQuery(SelectQuery parentQuery, SqlTableSource source, bool optimizeWhere, bool allColumns, bool isApplySupported, bool optimizeValues, SqlJoinedTable parentJoinedTable);
    private bool CorrectCrossJoinQuery(SelectQuery query);
    private bool CheckColumn(SelectQuery parentQuery, SqlColumn column, ISqlExpression expr, SelectQuery query, bool optimizeValues, ISet`1<ISqlTableSource> sources);
    private SqlTableSource RemoveSubQuery(SelectQuery parentQuery, SqlTableSource childSource, bool concatWhere, bool allColumns, bool optimizeValues, SqlJoinedTable parentJoinedTable);
    private void OptimizeApply(SelectQuery parentQuery, HashSet`1<ISqlTableSource> parentTableSources, SqlTableSource tableSource, SqlJoinedTable joinTable, bool isApplySupported);
    private static void ConcatSearchCondition(SqlWhereClause where1, SqlWhereClause where2);
    private void OptimizeSubQueries(bool isApplySupported);
    private void OptimizeApplies(bool isApplySupported);
    private void RemoveEmptyJoins();
    private void OptimizeColumns();
    private void OptimizeDistinctOrderBy();
    [CompilerGeneratedAttribute]
internal static void <OptimizeSearchCondition>g__ClearAll|20_0(<>c__DisplayClass20_0& );
    [CompilerGeneratedAttribute]
internal static void <OptimizeSearchCondition>g__EnsureCopy|20_1(<>c__DisplayClass20_0& );
    [CompilerGeneratedAttribute]
internal static ISqlExpression <CorrectCrossJoinQuery>g__TransformFunc|27_2(Dictionary`2<ISqlExpression, ISqlExpression> toReplace, ISqlExpression e);
    [CompilerGeneratedAttribute]
internal static bool <OptimizeApply>g__ContainsTable|30_0(ISqlTableSource table, IQueryElement qe);
}
public enum LinqToDB.SqlQuery.SetOperation : Enum {
    public int value__;
    public static SetOperation Union;
    public static SetOperation UnionAll;
    public static SetOperation Except;
    public static SetOperation ExceptAll;
    public static SetOperation Intersect;
    public static SetOperation IntersectAll;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.SqlQuery.SqlAliasPlaceholder : object {
    public QueryElementType ElementType { get; }
    public bool CanBeNull { get; }
    public int Precedence { get; }
    public Type SystemType { get; }
    public sealed virtual QueryElementType get_ElementType();
    public sealed virtual StringBuilder ToString(StringBuilder sb, Dictionary`2<IQueryElement, IQueryElement> dic);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(ISqlExpression other);
    public sealed virtual ISqlExpression Walk(WalkOptions options, TContext context, Func`3<TContext, ISqlExpression, ISqlExpression> func);
    public sealed virtual bool Equals(ISqlExpression other, Func`3<ISqlExpression, ISqlExpression, bool> comparer);
    public sealed virtual bool get_CanBeNull();
    public sealed virtual int get_Precedence();
    public sealed virtual Type get_SystemType();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("SQL = {SqlText}")]
public class LinqToDB.SqlQuery.SqlBinaryExpression : object {
    private ISqlExpression _expr1;
    [CompilerGeneratedAttribute]
private string <Operation>k__BackingField;
    private ISqlExpression _expr2;
    [CompilerGeneratedAttribute]
private Type <SystemType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Precedence>k__BackingField;
    private Nullable`1<int> _hashCode;
    public ISqlExpression Expr1 { get; internal set; }
    public string Operation { get; }
    public ISqlExpression Expr2 { get; internal set; }
    public Type SystemType { get; }
    public int Precedence { get; }
    public string SqlText { get; }
    public bool CanBeNull { get; }
    public QueryElementType ElementType { get; }
    public SqlBinaryExpression(Type systemType, ISqlExpression expr1, string operation, ISqlExpression expr2, int precedence);
    public SqlBinaryExpression(Type systemType, ISqlExpression expr1, string operation, ISqlExpression expr2);
    public ISqlExpression get_Expr1();
    internal void set_Expr1(ISqlExpression value);
    [CompilerGeneratedAttribute]
public string get_Operation();
    public ISqlExpression get_Expr2();
    internal void set_Expr2(ISqlExpression value);
    [CompilerGeneratedAttribute]
public sealed virtual Type get_SystemType();
    [CompilerGeneratedAttribute]
public sealed virtual int get_Precedence();
    public string get_SqlText();
    private sealed virtual override ISqlExpression LinqToDB.SqlQuery.ISqlExpressionWalkable.Walk(WalkOptions options, TContext context, Func`3<TContext, ISqlExpression, ISqlExpression> func);
    [NullableContextAttribute("2")]
private sealed virtual override bool System.IEquatable<LinqToDB.SqlQuery.ISqlExpression>.Equals(ISqlExpression other);
    public virtual int GetHashCode();
    public sealed virtual bool get_CanBeNull();
    public sealed virtual bool Equals(ISqlExpression other, Func`3<ISqlExpression, ISqlExpression, bool> comparer);
    public sealed virtual QueryElementType get_ElementType();
    private sealed virtual override StringBuilder LinqToDB.SqlQuery.IQueryElement.ToString(StringBuilder sb, Dictionary`2<IQueryElement, IQueryElement> dic);
    public void Deconstruct(Type& systemType, ISqlExpression& expr1, String& operation, ISqlExpression& expr2);
    public void Deconstruct(ISqlExpression& expr1, String& operation, ISqlExpression& expr2);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class LinqToDB.SqlQuery.SqlColumn : object {
    [NullableAttribute("1")]
private ISqlExpression _expression;
    private SelectQuery _parent;
    [CompilerGeneratedAttribute]
private string <RawAlias>k__BackingField;
    private Nullable`1<int> _hashCode;
    [NullableAttribute("1")]
public ISqlExpression Expression { get; public set; }
    public SelectQuery Parent { get; public set; }
    internal string RawAlias { get; internal set; }
    public string Alias { get; public set; }
    public bool CanBeNull { get; }
    public int Precedence { get; }
    public Type SystemType { get; }
    public QueryElementType ElementType { get; }
    public SqlColumn(SelectQuery parent, ISqlExpression expression, string alias);
    [NullableContextAttribute("1")]
public SqlColumn(SelectQuery builder, ISqlExpression expression);
    [NullableContextAttribute("1")]
public ISqlExpression get_Expression();
    [NullableContextAttribute("1")]
public void set_Expression(ISqlExpression value);
    public SelectQuery get_Parent();
    public void set_Parent(SelectQuery value);
    [CompilerGeneratedAttribute]
internal string get_RawAlias();
    [CompilerGeneratedAttribute]
internal void set_RawAlias(string value);
    [NullableContextAttribute("1")]
public ISqlExpression UnderlyingExpression();
    public string get_Alias();
    public void set_Alias(string value);
    private static string GetAlias(ISqlExpression expr);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(SqlColumn other);
    [NullableContextAttribute("1")]
public virtual string ToString();
    public sealed virtual bool get_CanBeNull();
    [NullableContextAttribute("1")]
public sealed virtual bool Equals(ISqlExpression other, Func`3<ISqlExpression, ISqlExpression, bool> comparer);
    public sealed virtual int get_Precedence();
    public sealed virtual Type get_SystemType();
    private sealed virtual override bool System.IEquatable<LinqToDB.SqlQuery.ISqlExpression>.Equals(ISqlExpression other);
    [NullableContextAttribute("1")]
public sealed virtual ISqlExpression Walk(WalkOptions options, TContext context, Func`3<TContext, ISqlExpression, ISqlExpression> func);
    public sealed virtual QueryElementType get_ElementType();
    [NullableContextAttribute("1")]
private sealed virtual override StringBuilder LinqToDB.SqlQuery.IQueryElement.ToString(StringBuilder sb, Dictionary`2<IQueryElement, IQueryElement> dic);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.SqlQuery.SqlComment : object {
    [CompilerGeneratedAttribute]
private List`1<string> <Lines>k__BackingField;
    public QueryElementType ElementType { get; }
    public List`1<string> Lines { get; }
    internal SqlComment(List`1<string> lines);
    public sealed virtual QueryElementType get_ElementType();
    [CompilerGeneratedAttribute]
public List`1<string> get_Lines();
    public sealed virtual StringBuilder ToString(StringBuilder sb, Dictionary`2<IQueryElement, IQueryElement> dic);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.SqlQuery.SqlCondition : object {
    [CompilerGeneratedAttribute]
private bool <IsNot>k__BackingField;
    [CompilerGeneratedAttribute]
private ISqlPredicate <Predicate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsOr>k__BackingField;
    internal int OptimizationTag;
    public bool IsNot { get; public set; }
    public ISqlPredicate Predicate { get; public set; }
    public bool IsOr { get; public set; }
    public int Precedence { get; }
    public bool CanBeNull { get; }
    public QueryElementType ElementType { get; }
    public SqlCondition(bool isNot, ISqlPredicate predicate);
    public SqlCondition(bool isNot, ISqlPredicate predicate, bool isOr);
    [CompilerGeneratedAttribute]
public bool get_IsNot();
    [CompilerGeneratedAttribute]
public void set_IsNot(bool value);
    [CompilerGeneratedAttribute]
public ISqlPredicate get_Predicate();
    [CompilerGeneratedAttribute]
public void set_Predicate(ISqlPredicate value);
    [CompilerGeneratedAttribute]
public bool get_IsOr();
    [CompilerGeneratedAttribute]
public void set_IsOr(bool value);
    public int get_Precedence();
    public bool get_CanBeNull();
    public sealed virtual QueryElementType get_ElementType();
    private sealed virtual override StringBuilder LinqToDB.SqlQuery.IQueryElement.ToString(StringBuilder sb, Dictionary`2<IQueryElement, IQueryElement> dic);
    public bool Equals(SqlCondition other, Func`3<ISqlExpression, ISqlExpression, bool> comparer);
    public void Deconstruct(Boolean& isNot, ISqlPredicate& predicate, Boolean& isOr);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.SqlQuery.SqlConditionalInsertClause : object {
    [CompilerGeneratedAttribute]
private SqlInsertClause <Insert>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private SqlSearchCondition <When>k__BackingField;
    public SqlInsertClause Insert { get; }
    [NullableAttribute("2")]
public SqlSearchCondition When { get; }
    private QueryElementType LinqToDB.SqlQuery.IQueryElement.ElementType { get; }
    public SqlConditionalInsertClause(SqlInsertClause insert, SqlSearchCondition when);
    [CompilerGeneratedAttribute]
public SqlInsertClause get_Insert();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public SqlSearchCondition get_When();
    private sealed virtual override ISqlExpression LinqToDB.SqlQuery.ISqlExpressionWalkable.Walk(WalkOptions options, TContext context, Func`3<TContext, ISqlExpression, ISqlExpression> func);
    private sealed virtual override QueryElementType LinqToDB.SqlQuery.IQueryElement.get_ElementType();
    private sealed virtual override StringBuilder LinqToDB.SqlQuery.IQueryElement.ToString(StringBuilder sb, Dictionary`2<IQueryElement, IQueryElement> dic);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class LinqToDB.SqlQuery.SqlCreateTableStatement : SqlStatement {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private SqlTable <Table>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StatementHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StatementFooter>k__BackingField;
    [CompilerGeneratedAttribute]
private DefaultNullable <DefaultNullable>k__BackingField;
    [NullableAttribute("1")]
public SqlTable Table { get; private set; }
    public string StatementHeader { get; public set; }
    public string StatementFooter { get; public set; }
    public DefaultNullable DefaultNullable { get; public set; }
    public QueryType QueryType { get; }
    public QueryElementType ElementType { get; }
    public bool IsParameterDependent { get; public set; }
    public SelectQuery SelectQuery { get; public set; }
    [NullableContextAttribute("1")]
public SqlCreateTableStatement(SqlTable sqlTable);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public SqlTable get_Table();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void set_Table(SqlTable value);
    [CompilerGeneratedAttribute]
public string get_StatementHeader();
    [CompilerGeneratedAttribute]
public void set_StatementHeader(string value);
    [CompilerGeneratedAttribute]
public string get_StatementFooter();
    [CompilerGeneratedAttribute]
public void set_StatementFooter(string value);
    [CompilerGeneratedAttribute]
public DefaultNullable get_DefaultNullable();
    [CompilerGeneratedAttribute]
public void set_DefaultNullable(DefaultNullable value);
    public virtual QueryType get_QueryType();
    public virtual QueryElementType get_ElementType();
    public virtual bool get_IsParameterDependent();
    public virtual void set_IsParameterDependent(bool value);
    public virtual SelectQuery get_SelectQuery();
    public virtual void set_SelectQuery(SelectQuery value);
    [NullableContextAttribute("1")]
public virtual StringBuilder ToString(StringBuilder sb, Dictionary`2<IQueryElement, IQueryElement> dic);
    [NullableContextAttribute("1")]
public virtual ISqlExpression Walk(WalkOptions options, TContext context, Func`3<TContext, ISqlExpression, ISqlExpression> func);
    [NullableContextAttribute("1")]
public virtual ISqlTableSource GetTableSource(ISqlTableSource table);
    [NullableContextAttribute("1")]
public virtual void WalkQueries(TContext context, Func`3<TContext, SelectQuery, SelectQuery> func);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.SqlQuery.SqlCteTable : SqlTable {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private CteClause <Cte>k__BackingField;
    [NullableAttribute("2")]
public CteClause Cte { get; public set; }
    public SqlObjectName TableName { get; public set; }
    public QueryElementType ElementType { get; }
    public SqlTableType SqlTableType { get; }
    public string SqlText { get; }
    public SqlCteTable(CteClause cte, EntityDescriptor entityDescriptor);
    internal SqlCteTable(int id, string alias, SqlField[] fields, CteClause cte);
    internal SqlCteTable(int id, string alias, SqlField[] fields);
    public SqlCteTable(SqlCteTable table, IEnumerable`1<SqlField> fields, CteClause cte);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public CteClause get_Cte();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Cte(CteClause value);
    public virtual SqlObjectName get_TableName();
    public virtual void set_TableName(SqlObjectName value);
    internal void SetDelayedCteObject(CteClause cte);
    public virtual QueryElementType get_ElementType();
    public virtual SqlTableType get_SqlTableType();
    public virtual StringBuilder ToString(StringBuilder sb, Dictionary`2<IQueryElement, IQueryElement> dic);
    public string get_SqlText();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.SqlQuery.SqlDataType : object {
    [CompilerGeneratedAttribute]
private DbDataType <Type>k__BackingField;
    public static SqlDataType Undefined;
    private static TypeInfo[] _typeInfo;
    public static SqlDataType DbInt128;
    public static SqlDataType DbInt64;
    public static SqlDataType DbInt32;
    public static SqlDataType DbInt16;
    public static SqlDataType DbUInt64;
    public static SqlDataType DbUInt32;
    public static SqlDataType DbUInt16;
    public static SqlDataType DbSByte;
    public static SqlDataType DbByte;
    public static SqlDataType DbBoolean;
    public static SqlDataType DbDecimal;
    public static SqlDataType DbMoney;
    public static SqlDataType DbSmallMoney;
    public static SqlDataType DbDouble;
    public static SqlDataType DbSingle;
    public static SqlDataType DbDateTime;
    public static SqlDataType DbDateTime2;
    public static SqlDataType DbSmallDateTime;
    public static SqlDataType DbDate;
    public static SqlDataType DbTime;
    public static SqlDataType DbDateTimeOffset;
    public static SqlDataType DbChar;
    public static SqlDataType DbVarChar;
    public static SqlDataType DbText;
    public static SqlDataType DbNChar;
    public static SqlDataType DbNVarChar;
    public static SqlDataType DbNText;
    public static SqlDataType DbJson;
    public static SqlDataType DbBinaryJson;
    public static SqlDataType DbBinary;
    public static SqlDataType DbVarBinary;
    public static SqlDataType DbImage;
    public static SqlDataType DbTimestamp;
    public static SqlDataType DbGuid;
    public static SqlDataType DbVariant;
    public static SqlDataType DbXml;
    public static SqlDataType DbBitArray;
    public static SqlDataType DbUdt;
    public static SqlDataType Boolean;
    public static SqlDataType Char;
    public static SqlDataType SByte;
    public static SqlDataType Byte;
    public static SqlDataType Int16;
    public static SqlDataType UInt16;
    public static SqlDataType Int32;
    public static SqlDataType UInt32;
    public static SqlDataType UInt64;
    public static SqlDataType Single;
    public static SqlDataType Double;
    public static SqlDataType Decimal;
    public static SqlDataType DateTime;
    public static SqlDataType String;
    public static SqlDataType Guid;
    public static SqlDataType ByteArray;
    public static SqlDataType LinqBinary;
    public static SqlDataType CharArray;
    public static SqlDataType DateTimeOffset;
    public static SqlDataType TimeSpan;
    public static SqlDataType DbDictionary;
    public static SqlDataType SqlByte;
    public static SqlDataType SqlInt16;
    public static SqlDataType SqlInt32;
    public static SqlDataType SqlInt64;
    public static SqlDataType SqlSingle;
    public static SqlDataType SqlBoolean;
    public static SqlDataType SqlDouble;
    public static SqlDataType SqlDateTime;
    public static SqlDataType SqlDecimal;
    public static SqlDataType SqlMoney;
    public static SqlDataType SqlString;
    public static SqlDataType SqlBinary;
    public static SqlDataType SqlGuid;
    public static SqlDataType SqlBytes;
    public static SqlDataType SqlChars;
    public static SqlDataType SqlXml;
    public static SqlDataType DbDecFloat;
    public static SqlDataType DbTimeTZ;
    public DbDataType Type { get; internal set; }
    public bool IsCharDataType { get; }
    public int Precedence { get; }
    public Type SystemType { get; }
    public bool CanBeNull { get; }
    public QueryElementType ElementType { get; }
    public SqlDataType(DbDataType dataType);
    public SqlDataType(DataType dataType);
    public SqlDataType(DataType dataType, Nullable`1<int> length);
    public SqlDataType(DataType dataType, Type type);
    public SqlDataType(DataType dataType, Type type, string dbType);
    public SqlDataType(DataType dataType, Type type, int length);
    public SqlDataType(DataType dataType, Type type, int precision, int scale);
    internal SqlDataType(ColumnDescriptor column);
    internal SqlDataType(SqlField field);
    internal SqlDataType(DataType dataType, Type type, Nullable`1<int> length, Nullable`1<int> precision, Nullable`1<int> scale, string dbType);
    private SqlDataType(DataType dataType, Type type, Func`2<DataType, Nullable`1<int>> length, Nullable`1<int> precision, Nullable`1<int> scale, string dbType);
    private SqlDataType(DataType dataType, Type type, Nullable`1<int> length, Func`2<DataType, Nullable`1<int>> precision, Nullable`1<int> scale, string dbType);
    private static SqlDataType();
    [CompilerGeneratedAttribute]
public DbDataType get_Type();
    [CompilerGeneratedAttribute]
internal void set_Type(DbDataType value);
    public bool get_IsCharDataType();
    private static TypeInfo[] SortTypeInfo(TypeInfo[] info);
    private static int Len(object obj);
    public static Nullable`1<int> GetMaxLength(DataType dbType);
    public static Nullable`1<int> GetMaxPrecision(DataType dbType);
    public static Nullable`1<int> GetMaxScale(DataType dbType);
    public static Nullable`1<int> GetMaxDisplaySize(DataType dbType);
    public static SqlDataType GetDataType(DataType type);
    public static bool TypeCanBeNull(Type type);
    public sealed virtual int get_Precedence();
    public sealed virtual Type get_SystemType();
    private sealed virtual override ISqlExpression LinqToDB.SqlQuery.ISqlExpressionWalkable.Walk(WalkOptions options, TContext context, Func`3<TContext, ISqlExpression, ISqlExpression> func);
    [NullableContextAttribute("2")]
private sealed virtual override bool System.IEquatable<LinqToDB.SqlQuery.ISqlExpression>.Equals(ISqlExpression other);
    public sealed virtual bool get_CanBeNull();
    public sealed virtual bool Equals(ISqlExpression other, Func`3<ISqlExpression, ISqlExpression, bool> comparer);
    public sealed virtual QueryElementType get_ElementType();
    private sealed virtual override StringBuilder LinqToDB.SqlQuery.IQueryElement.ToString(StringBuilder sb, Dictionary`2<IQueryElement, IQueryElement> dic);
    public virtual int GetHashCode();
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(SqlDataType other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class LinqToDB.SqlQuery.SqlDeleteStatement : SqlStatementWithQueryBase {
    [CompilerGeneratedAttribute]
private SqlTable <Table>k__BackingField;
    [CompilerGeneratedAttribute]
private ISqlExpression <Top>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlOutputClause <Output>k__BackingField;
    public QueryType QueryType { get; }
    public QueryElementType ElementType { get; }
    public bool IsParameterDependent { get; public set; }
    public SqlTable Table { get; public set; }
    public ISqlExpression Top { get; public set; }
    public SqlOutputClause Output { get; public set; }
    public SqlDeleteStatement(SelectQuery selectQuery);
    public virtual QueryType get_QueryType();
    public virtual QueryElementType get_ElementType();
    public virtual bool get_IsParameterDependent();
    public virtual void set_IsParameterDependent(bool value);
    [CompilerGeneratedAttribute]
public SqlTable get_Table();
    [CompilerGeneratedAttribute]
public void set_Table(SqlTable value);
    [CompilerGeneratedAttribute]
public ISqlExpression get_Top();
    [CompilerGeneratedAttribute]
public void set_Top(ISqlExpression value);
    [CompilerGeneratedAttribute]
public SqlOutputClause get_Output();
    [CompilerGeneratedAttribute]
public void set_Output(SqlOutputClause value);
    [NullableContextAttribute("1")]
public virtual ISqlExpression Walk(WalkOptions options, TContext context, Func`3<TContext, ISqlExpression, ISqlExpression> func);
    [NullableContextAttribute("1")]
public virtual StringBuilder ToString(StringBuilder sb, Dictionary`2<IQueryElement, IQueryElement> dic);
    [NullableContextAttribute("1")]
public virtual void WalkQueries(TContext context, Func`3<TContext, SelectQuery, SelectQuery> func);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.SqlQuery.SqlDropTableStatement : SqlStatement {
    [CompilerGeneratedAttribute]
private SqlTable <Table>k__BackingField;
    public SqlTable Table { get; }
    public QueryType QueryType { get; }
    public QueryElementType ElementType { get; }
    public bool IsParameterDependent { get; public set; }
    [NullableAttribute("2")]
public SelectQuery SelectQuery { get; public set; }
    public SqlDropTableStatement(SqlTable table);
    [CompilerGeneratedAttribute]
public SqlTable get_Table();
    public virtual QueryType get_QueryType();
    public virtual QueryElementType get_ElementType();
    public virtual bool get_IsParameterDependent();
    public virtual void set_IsParameterDependent(bool value);
    [NullableContextAttribute("2")]
public virtual SelectQuery get_SelectQuery();
    [NullableContextAttribute("2")]
public virtual void set_SelectQuery(SelectQuery value);
    public virtual StringBuilder ToString(StringBuilder sb, Dictionary`2<IQueryElement, IQueryElement> dic);
    public virtual ISqlExpression Walk(WalkOptions options, TContext context, Func`3<TContext, ISqlExpression, ISqlExpression> func);
    public virtual ISqlTableSource GetTableSource(ISqlTableSource table);
    public virtual void WalkQueries(TContext context, Func`3<TContext, SelectQuery, SelectQuery> func);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.SqlQuery.SqlException : Exception {
    public SqlException(string message);
    [StringFormatMethodAttribute("message")]
public SqlException(string message, Object[] args);
    public SqlException(string message, Exception innerException);
    public SqlException(Exception innerException);
    protected SqlException(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.SqlQuery.SqlExpression : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Type <SystemType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Expr>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Precedence>k__BackingField;
    [CompilerGeneratedAttribute]
private ISqlExpression[] <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlFlags <Flags>k__BackingField;
    private Nullable`1<bool> _canBeNull;
    internal static Func`3<ISqlExpression, ISqlExpression, bool> DefaultComparer;
    private Nullable`1<int> _hashCode;
    [NullableAttribute("2")]
public Type SystemType { get; }
    public string Expr { get; }
    public int Precedence { get; }
    public ISqlExpression[] Parameters { get; }
    public SqlFlags Flags { get; }
    public bool IsAggregate { get; }
    public bool IsPure { get; }
    public bool IsPredicate { get; }
    public bool IsWindowFunction { get; }
    public bool CanBeNull { get; public set; }
    public QueryElementType ElementType { get; }
    public SqlExpression(Type systemType, string expr, int precedence, SqlFlags flags, ISqlExpression[] parameters);
    public SqlExpression(Type systemType, string expr, int precedence, ISqlExpression[] parameters);
    public SqlExpression(string expr, int precedence, ISqlExpression[] parameters);
    public SqlExpression(Type systemType, string expr, ISqlExpression[] parameters);
    public SqlExpression(string expr, ISqlExpression[] parameters);
    private static SqlExpression();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual Type get_SystemType();
    [CompilerGeneratedAttribute]
public string get_Expr();
    [CompilerGeneratedAttribute]
public sealed virtual int get_Precedence();
    [CompilerGeneratedAttribute]
public ISqlExpression[] get_Parameters();
    [CompilerGeneratedAttribute]
public SqlFlags get_Flags();
    public bool get_IsAggregate();
    public bool get_IsPure();
    public bool get_IsPredicate();
    public bool get_IsWindowFunction();
    private sealed virtual override ISqlExpression LinqToDB.SqlQuery.ISqlExpressionWalkable.Walk(WalkOptions options, TContext context, Func`3<TContext, ISqlExpression, ISqlExpression> func);
    [NullableContextAttribute("2")]
private sealed virtual override bool System.IEquatable<LinqToDB.SqlQuery.ISqlExpression>.Equals(ISqlExpression other);
    public sealed virtual bool get_CanBeNull();
    public void set_CanBeNull(bool value);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(ISqlExpression other, Func`3<ISqlExpression, ISqlExpression, bool> comparer);
    public sealed virtual QueryElementType get_ElementType();
    private sealed virtual override StringBuilder LinqToDB.SqlQuery.IQueryElement.ToString(StringBuilder sb, Dictionary`2<IQueryElement, IQueryElement> dic);
    public static bool NeedsEqual(IQueryElement ex);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class LinqToDB.SqlQuery.SqlExtensions : object {
    [ExtensionAttribute]
public static bool IsInsert(SqlStatement statement);
    [ExtensionAttribute]
public static bool NeedsIdentity(SqlStatement statement);
    [ExtensionAttribute]
public static bool IsUpdate(SqlStatement statement);
    [ExtensionAttribute]
public static bool IsDelete(SqlStatement statement);
    [ExtensionAttribute]
public static SqlField GetIdentityField(SqlStatement statement);
    [ExtensionAttribute]
public static SqlInsertClause GetInsertClause(SqlStatement statement);
    [ExtensionAttribute]
public static SqlWithClause GetWithClause(SqlStatement statement);
    [ExtensionAttribute]
public static SqlInsertClause RequireInsertClause(SqlStatement statement);
    [ExtensionAttribute]
public static SqlUpdateClause GetUpdateClause(SqlStatement statement);
    [ExtensionAttribute]
public static SqlUpdateClause RequireUpdateClause(SqlStatement statement);
    [ExtensionAttribute]
public static SqlOutputClause GetOutputClause(SqlStatement statement);
    [ExtensionAttribute]
public static SelectQuery EnsureQuery(SqlStatement statement);
    [ExtensionAttribute]
internal static bool IsSqlRow(Expression expression);
    [ExtensionAttribute]
private static bool IsSqlRow(Type type);
    [ExtensionAttribute]
internal static ReadOnlyCollection`1<Expression> GetSqlRowValues(Expression expr);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.SqlQuery.SqlField : object {
    [CompilerGeneratedAttribute]
private DbDataType <Type>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Alias>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPrimaryKey>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PrimaryKeyOrder>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsIdentity>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsInsertable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsUpdatable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDynamic>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipOnEntityFetch>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <CreateFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <CreateOrder>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ISqlTableSource <Table>k__BackingField;
    [CompilerGeneratedAttribute]
private ColumnDescriptor <ColumnDescriptor>k__BackingField;
    [NullableAttribute("2")]
private string _physicalName;
    [CompilerGeneratedAttribute]
private bool <CanBeNull>k__BackingField;
    public DbDataType Type { get; public set; }
    [NullableAttribute("2")]
public string Alias { get; public set; }
    public string Name { get; public set; }
    public bool IsPrimaryKey { get; public set; }
    public int PrimaryKeyOrder { get; public set; }
    public bool IsIdentity { get; public set; }
    public bool IsInsertable { get; public set; }
    public bool IsUpdatable { get; public set; }
    public bool IsDynamic { get; public set; }
    public bool SkipOnEntityFetch { get; public set; }
    [NullableAttribute("2")]
public string CreateFormat { get; public set; }
    public Nullable`1<int> CreateOrder { get; public set; }
    [NullableAttribute("2")]
public ISqlTableSource Table { get; public set; }
    public ColumnDescriptor ColumnDescriptor { get; public set; }
    private Type LinqToDB.SqlQuery.ISqlExpression.SystemType { get; }
    public string PhysicalName { get; public set; }
    public bool CanBeNull { get; public set; }
    public int Precedence { get; }
    public QueryElementType ElementType { get; }
    public SqlField(ISqlTableSource table, string name);
    public SqlField(Type systemType, string name, bool canBeNull);
    private SqlField(ISqlTableSource table, string name, string physicalName);
    public SqlField(string name, string physicalName);
    public SqlField(SqlField field);
    public SqlField(ColumnDescriptor column);
    internal static SqlField All(ISqlTableSource table);
    [CompilerGeneratedAttribute]
public DbDataType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(DbDataType value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Alias();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Alias(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public bool get_IsPrimaryKey();
    [CompilerGeneratedAttribute]
public void set_IsPrimaryKey(bool value);
    [CompilerGeneratedAttribute]
public int get_PrimaryKeyOrder();
    [CompilerGeneratedAttribute]
public void set_PrimaryKeyOrder(int value);
    [CompilerGeneratedAttribute]
public bool get_IsIdentity();
    [CompilerGeneratedAttribute]
public void set_IsIdentity(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsInsertable();
    [CompilerGeneratedAttribute]
public void set_IsInsertable(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsUpdatable();
    [CompilerGeneratedAttribute]
public void set_IsUpdatable(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsDynamic();
    [CompilerGeneratedAttribute]
public void set_IsDynamic(bool value);
    [CompilerGeneratedAttribute]
public bool get_SkipOnEntityFetch();
    [CompilerGeneratedAttribute]
public void set_SkipOnEntityFetch(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_CreateFormat();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_CreateFormat(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_CreateOrder();
    [CompilerGeneratedAttribute]
public void set_CreateOrder(Nullable`1<int> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public ISqlTableSource get_Table();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Table(ISqlTableSource value);
    [CompilerGeneratedAttribute]
public ColumnDescriptor get_ColumnDescriptor();
    [CompilerGeneratedAttribute]
public void set_ColumnDescriptor(ColumnDescriptor value);
    private sealed virtual override Type LinqToDB.SqlQuery.ISqlExpression.get_SystemType();
    public string get_PhysicalName();
    public void set_PhysicalName(string value);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_CanBeNull();
    [CompilerGeneratedAttribute]
public void set_CanBeNull(bool value);
    public sealed virtual bool Equals(ISqlExpression other, Func`3<ISqlExpression, ISqlExpression, bool> comparer);
    public sealed virtual int get_Precedence();
    private sealed virtual override ISqlExpression LinqToDB.SqlQuery.ISqlExpressionWalkable.Walk(WalkOptions options, TContext context, Func`3<TContext, ISqlExpression, ISqlExpression> func);
    [NullableContextAttribute("2")]
private sealed virtual override bool System.IEquatable<LinqToDB.SqlQuery.ISqlExpression>.Equals(ISqlExpression other);
    public sealed virtual QueryElementType get_ElementType();
    private sealed virtual override StringBuilder LinqToDB.SqlQuery.IQueryElement.ToString(StringBuilder sb, Dictionary`2<IQueryElement, IQueryElement> dic);
    internal static SqlField FakeField(DbDataType dataType, string fieldName, bool canBeNull);
}
[FlagsAttribute]
public enum LinqToDB.SqlQuery.SqlFlags : Enum {
    public int value__;
    public static SqlFlags None;
    public static SqlFlags IsAggregate;
    public static SqlFlags IsPure;
    public static SqlFlags IsPredicate;
    public static SqlFlags IsWindowFunction;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class LinqToDB.SqlQuery.SqlFromClause : ClauseBase {
    [CompilerGeneratedAttribute]
private List`1<SqlTableSource> <Tables>k__BackingField;
    [NullableAttribute("2")]
public SqlTableSource Item { get; }
    [NullableAttribute("2")]
public SqlTableSource Item { get; }
    public List`1<SqlTableSource> Tables { get; }
    public QueryElementType ElementType { get; }
    internal SqlFromClause(SelectQuery selectQuery);
    internal SqlFromClause(IEnumerable`1<SqlTableSource> tables);
    public SqlFromClause Table(ISqlTableSource table, Join[] joins);
    public SqlFromClause Table(ISqlTableSource table, string alias, Join[] joins);
    [NullableContextAttribute("2")]
private SqlTableSource GetTable(ISqlTableSource table, string alias);
    private SqlTableSource AddOrGetTable(ISqlTableSource table, string alias);
    public SqlTableSource get_Item(ISqlTableSource table);
    [NullableContextAttribute("2")]
public SqlTableSource get_Item(ISqlTableSource table, string alias);
    public bool IsChild(ISqlTableSource table);
    private static bool CheckChild(IEnumerable`1<SqlJoinedTable> joins, ISqlTableSource table);
    [CompilerGeneratedAttribute]
public List`1<SqlTableSource> get_Tables();
    [IteratorStateMachineAttribute("LinqToDB.SqlQuery.SqlFromClause/<GetJoinTables>d__16")]
private static IEnumerable`1<ISqlTableSource> GetJoinTables(SqlTableSource source, QueryElementType elementType);
    internal IEnumerable`1<ISqlTableSource> GetFromTables();
    internal IEnumerable`1<ISqlTableSource> GetFromQueries();
    private static SqlTableSource FindTableSource(SqlTableSource source, SqlTable table);
    public ISqlTableSource FindTableSource(SqlTable table);
    private sealed virtual override ISqlExpression LinqToDB.SqlQuery.ISqlExpressionWalkable.Walk(WalkOptions options, TContext context, Func`3<TContext, ISqlExpression, ISqlExpression> func);
    public sealed virtual QueryElementType get_ElementType();
    private sealed virtual override StringBuilder LinqToDB.SqlQuery.IQueryElement.ToString(StringBuilder sb, Dictionary`2<IQueryElement, IQueryElement> dic);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.SqlQuery.SqlFunction : object {
    [CompilerGeneratedAttribute]
private Type <SystemType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Precedence>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAggregate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPure>k__BackingField;
    [CompilerGeneratedAttribute]
private ISqlExpression[] <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DoNotOptimize>k__BackingField;
    private Nullable`1<bool> _canBeNull;
    private Nullable`1<int> _hashCode;
    public Type SystemType { get; }
    public string Name { get; }
    public int Precedence { get; }
    public bool IsAggregate { get; }
    public bool IsPure { get; }
    public ISqlExpression[] Parameters { get; }
    public bool DoNotOptimize { get; public set; }
    public bool CanBeNull { get; public set; }
    public QueryElementType ElementType { get; }
    public SqlFunction(Type systemType, string name, ISqlExpression[] parameters);
    public SqlFunction(Type systemType, string name, bool isAggregate, bool isPure, ISqlExpression[] parameters);
    public SqlFunction(Type systemType, string name, bool isAggregate, ISqlExpression[] parameters);
    public SqlFunction(Type systemType, string name, bool isAggregate, int precedence, ISqlExpression[] parameters);
    public SqlFunction(Type systemType, string name, bool isAggregate, bool isPure, int precedence, ISqlExpression[] parameters);
    [CompilerGeneratedAttribute]
public sealed virtual Type get_SystemType();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual int get_Precedence();
    [CompilerGeneratedAttribute]
public bool get_IsAggregate();
    [CompilerGeneratedAttribute]
public bool get_IsPure();
    [CompilerGeneratedAttribute]
public ISqlExpression[] get_Parameters();
    [CompilerGeneratedAttribute]
public bool get_DoNotOptimize();
    [CompilerGeneratedAttribute]
public void set_DoNotOptimize(bool value);
    public static SqlFunction CreateCount(Type type, ISqlTableSource table);
    public static SqlFunction CreateAll(SelectQuery subQuery);
    public static SqlFunction CreateSome(SelectQuery subQuery);
    public static SqlFunction CreateAny(SelectQuery subQuery);
    public static SqlFunction CreateExists(SelectQuery subQuery);
    private sealed virtual override ISqlExpression LinqToDB.SqlQuery.ISqlExpressionWalkable.Walk(WalkOptions options, TContext context, Func`3<TContext, ISqlExpression, ISqlExpression> func);
    [NullableContextAttribute("2")]
private sealed virtual override bool System.IEquatable<LinqToDB.SqlQuery.ISqlExpression>.Equals(ISqlExpression other);
    public sealed virtual bool get_CanBeNull();
    public void set_CanBeNull(bool value);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(ISqlExpression other, Func`3<ISqlExpression, ISqlExpression, bool> comparer);
    public sealed virtual QueryElementType get_ElementType();
    private sealed virtual override StringBuilder LinqToDB.SqlQuery.IQueryElement.ToString(StringBuilder sb, Dictionary`2<IQueryElement, IQueryElement> dic);
    public void Deconstruct(Type& systemType, String& name);
    public void Deconstruct(String& name);
    public void Deconstruct(Type& systemType, String& name, ISqlExpression[]& parameters);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.SqlQuery.SqlGroupByClause : ClauseBase {
    [CompilerGeneratedAttribute]
private GroupingType <GroupingType>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ISqlExpression> <Items>k__BackingField;
    public GroupingType GroupingType { get; public set; }
    public List`1<ISqlExpression> Items { get; }
    public bool IsEmpty { get; }
    public QueryElementType ElementType { get; }
    internal SqlGroupByClause(SelectQuery selectQuery);
    internal SqlGroupByClause(GroupingType groupingType, IEnumerable`1<ISqlExpression> items);
    public SqlGroupByClause Expr(ISqlExpression expr);
    public SqlGroupByClause Field(SqlField field);
    private void Add(ISqlExpression expr);
    [CompilerGeneratedAttribute]
public GroupingType get_GroupingType();
    [CompilerGeneratedAttribute]
public void set_GroupingType(GroupingType value);
    [CompilerGeneratedAttribute]
public List`1<ISqlExpression> get_Items();
    public bool get_IsEmpty();
    [IteratorStateMachineAttribute("LinqToDB.SqlQuery.SqlGroupByClause/<EnumItems>d__14")]
public IEnumerable`1<ISqlExpression> EnumItems();
    private sealed virtual override ISqlExpression LinqToDB.SqlQuery.ISqlExpressionWalkable.Walk(WalkOptions options, TContext context, Func`3<TContext, ISqlExpression, ISqlExpression> func);
    public sealed virtual QueryElementType get_ElementType();
    private sealed virtual override StringBuilder LinqToDB.SqlQuery.IQueryElement.ToString(StringBuilder sb, Dictionary`2<IQueryElement, IQueryElement> dic);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.SqlQuery.SqlGroupingSet : object {
    [CompilerGeneratedAttribute]
private List`1<ISqlExpression> <Items>k__BackingField;
    public QueryElementType ElementType { get; }
    public bool CanBeNull { get; }
    public int Precedence { get; }
    [NullableAttribute("2")]
public Type SystemType { get; }
    public List`1<ISqlExpression> Items { get; }
    internal SqlGroupingSet(IEnumerable`1<ISqlExpression> items);
    public sealed virtual QueryElementType get_ElementType();
    public sealed virtual StringBuilder ToString(StringBuilder sb, Dictionary`2<IQueryElement, IQueryElement> dic);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(ISqlExpression other);
    public sealed virtual ISqlExpression Walk(WalkOptions options, TContext context, Func`3<TContext, ISqlExpression, ISqlExpression> func);
    public sealed virtual bool Equals(ISqlExpression other, Func`3<ISqlExpression, ISqlExpression, bool> comparer);
    public sealed virtual bool get_CanBeNull();
    public sealed virtual int get_Precedence();
    [NullableContextAttribute("2")]
public sealed virtual Type get_SystemType();
    [CompilerGeneratedAttribute]
public List`1<ISqlExpression> get_Items();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.SqlQuery.SqlInsertClause : object {
    [CompilerGeneratedAttribute]
private List`1<SqlSetExpression> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<SqlSetExpression> <DefaultItems>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private SqlTable <Into>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WithIdentity>k__BackingField;
    public List`1<SqlSetExpression> Items { get; }
    public List`1<SqlSetExpression> DefaultItems { get; }
    [NullableAttribute("2")]
public SqlTable Into { get; public set; }
    public bool WithIdentity { get; public set; }
    public QueryElementType ElementType { get; }
    [CompilerGeneratedAttribute]
public List`1<SqlSetExpression> get_Items();
    [CompilerGeneratedAttribute]
public List`1<SqlSetExpression> get_DefaultItems();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public SqlTable get_Into();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Into(SqlTable value);
    [CompilerGeneratedAttribute]
public bool get_WithIdentity();
    [CompilerGeneratedAttribute]
public void set_WithIdentity(bool value);
    private sealed virtual override ISqlExpression LinqToDB.SqlQuery.ISqlExpressionWalkable.Walk(WalkOptions options, TContext context, Func`3<TContext, ISqlExpression, ISqlExpression> func);
    public sealed virtual QueryElementType get_ElementType();
    private sealed virtual override StringBuilder LinqToDB.SqlQuery.IQueryElement.ToString(StringBuilder sb, Dictionary`2<IQueryElement, IQueryElement> dic);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.SqlQuery.SqlInsertOrUpdateStatement : SqlStatementWithQueryBase {
    [NullableAttribute("2")]
private SqlInsertClause _insert;
    [NullableAttribute("2")]
private SqlUpdateClause _update;
    public QueryType QueryType { get; }
    public QueryElementType ElementType { get; }
    public SqlInsertClause Insert { get; public set; }
    public SqlUpdateClause Update { get; public set; }
    internal bool HasInsert { get; }
    internal bool HasUpdate { get; }
    [NullableContextAttribute("2")]
public SqlInsertOrUpdateStatement(SelectQuery selectQuery);
    public virtual QueryType get_QueryType();
    public virtual QueryElementType get_ElementType();
    public SqlInsertClause get_Insert();
    public void set_Insert(SqlInsertClause value);
    public SqlUpdateClause get_Update();
    public void set_Update(SqlUpdateClause value);
    internal bool get_HasInsert();
    internal bool get_HasUpdate();
    public virtual StringBuilder ToString(StringBuilder sb, Dictionary`2<IQueryElement, IQueryElement> dic);
    public virtual ISqlExpression Walk(WalkOptions options, TContext context, Func`3<TContext, ISqlExpression, ISqlExpression> func);
    public virtual ISqlTableSource GetTableSource(ISqlTableSource table);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.SqlQuery.SqlInsertStatement : SqlStatementWithQueryBase {
    [NullableAttribute("2")]
private SqlInsertClause _insert;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private SqlOutputClause <Output>k__BackingField;
    public QueryType QueryType { get; }
    public QueryElementType ElementType { get; }
    public SqlInsertClause Insert { get; public set; }
    internal bool HasInsert { get; }
    [NullableAttribute("2")]
public SqlOutputClause Output { get; public set; }
    public SqlInsertStatement(SelectQuery selectQuery);
    public virtual QueryType get_QueryType();
    public virtual QueryElementType get_ElementType();
    public SqlInsertClause get_Insert();
    public void set_Insert(SqlInsertClause value);
    internal bool get_HasInsert();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public SqlOutputClause get_Output();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Output(SqlOutputClause value);
    public virtual StringBuilder ToString(StringBuilder sb, Dictionary`2<IQueryElement, IQueryElement> dic);
    public virtual ISqlExpression Walk(WalkOptions options, TContext context, Func`3<TContext, ISqlExpression, ISqlExpression> func);
    public virtual ISqlTableSource GetTableSource(ISqlTableSource table);
}
public class LinqToDB.SqlQuery.SqlInsertWithIdentity : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.SqlQuery.SqlJoinedTable : object {
    [CompilerGeneratedAttribute]
private JoinType <JoinType>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlTableSource <Table>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlSearchCondition <Condition>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsWeak>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanConvertApply>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<SqlQueryExtension> <SqlQueryExtensions>k__BackingField;
    public JoinType JoinType { get; public set; }
    public SqlTableSource Table { get; public set; }
    public SqlSearchCondition Condition { get; private set; }
    public bool IsWeak { get; public set; }
    public bool CanConvertApply { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<SqlQueryExtension> SqlQueryExtensions { get; public set; }
    public QueryElementType ElementType { get; }
    public SqlJoinedTable(JoinType joinType, SqlTableSource table, bool isWeak, SqlSearchCondition searchCondition);
    public SqlJoinedTable(JoinType joinType, SqlTableSource table, bool isWeak);
    public SqlJoinedTable(JoinType joinType, ISqlTableSource table, string alias, bool isWeak);
    [CompilerGeneratedAttribute]
public JoinType get_JoinType();
    [CompilerGeneratedAttribute]
public void set_JoinType(JoinType value);
    [CompilerGeneratedAttribute]
public SqlTableSource get_Table();
    [CompilerGeneratedAttribute]
public void set_Table(SqlTableSource value);
    [CompilerGeneratedAttribute]
public SqlSearchCondition get_Condition();
    [CompilerGeneratedAttribute]
private void set_Condition(SqlSearchCondition value);
    [CompilerGeneratedAttribute]
public bool get_IsWeak();
    [CompilerGeneratedAttribute]
public void set_IsWeak(bool value);
    [CompilerGeneratedAttribute]
public bool get_CanConvertApply();
    [CompilerGeneratedAttribute]
public void set_CanConvertApply(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<SqlQueryExtension> get_SqlQueryExtensions();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SqlQueryExtensions(List`1<SqlQueryExtension> value);
    public sealed virtual ISqlExpression Walk(WalkOptions options, TContext context, Func`3<TContext, ISqlExpression, ISqlExpression> func);
    public sealed virtual QueryElementType get_ElementType();
    private sealed virtual override StringBuilder LinqToDB.SqlQuery.IQueryElement.ToString(StringBuilder sb, Dictionary`2<IQueryElement, IQueryElement> dic);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class LinqToDB.SqlQuery.SqlMergeOperationClause : object {
    [CompilerGeneratedAttribute]
private MergeOperationType <OperationType>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlSearchCondition <Where>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlSearchCondition <WhereDelete>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private List`1<SqlSetExpression> <Items>k__BackingField;
    public MergeOperationType OperationType { get; }
    public SqlSearchCondition Where { get; internal set; }
    public SqlSearchCondition WhereDelete { get; internal set; }
    [NullableAttribute("1")]
public List`1<SqlSetExpression> Items { get; }
    private QueryElementType LinqToDB.SqlQuery.IQueryElement.ElementType { get; }
    public SqlMergeOperationClause(MergeOperationType type);
    internal SqlMergeOperationClause(MergeOperationType type, SqlSearchCondition where, SqlSearchCondition whereDelete, IEnumerable`1<SqlSetExpression> items);
    [CompilerGeneratedAttribute]
public MergeOperationType get_OperationType();
    [CompilerGeneratedAttribute]
public SqlSearchCondition get_Where();
    [CompilerGeneratedAttribute]
internal void set_Where(SqlSearchCondition value);
    [CompilerGeneratedAttribute]
public SqlSearchCondition get_WhereDelete();
    [CompilerGeneratedAttribute]
internal void set_WhereDelete(SqlSearchCondition value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public List`1<SqlSetExpression> get_Items();
    [NullableContextAttribute("1")]
private sealed virtual override ISqlExpression LinqToDB.SqlQuery.ISqlExpressionWalkable.Walk(WalkOptions options, TContext context, Func`3<TContext, ISqlExpression, ISqlExpression> func);
    private sealed virtual override QueryElementType LinqToDB.SqlQuery.IQueryElement.get_ElementType();
    [NullableContextAttribute("1")]
private sealed virtual override StringBuilder LinqToDB.SqlQuery.IQueryElement.ToString(StringBuilder sb, Dictionary`2<IQueryElement, IQueryElement> dic);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.SqlQuery.SqlMergeStatement : SqlStatementWithQueryBase {
    private static string TargetAlias;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Hint>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlTableSource <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlTableLikeSource <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlSearchCondition <On>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<SqlMergeOperationClause> <Operations>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private SqlOutputClause <Output>k__BackingField;
    [NullableAttribute("2")]
public string Hint { get; internal set; }
    public SqlTableSource Target { get; }
    public SqlTableLikeSource Source { get; internal set; }
    public SqlSearchCondition On { get; }
    public List`1<SqlMergeOperationClause> Operations { get; }
    [NullableAttribute("2")]
public SqlOutputClause Output { get; public set; }
    public bool HasIdentityInsert { get; }
    public QueryType QueryType { get; }
    public QueryElementType ElementType { get; }
    public bool IsParameterDependent { get; public set; }
    [NullableAttribute("2")]
public SelectQuery SelectQuery { get; public set; }
    public SqlMergeStatement(SqlTable target);
    internal SqlMergeStatement(SqlWithClause with, string hint, SqlTableSource target, SqlTableLikeSource source, SqlSearchCondition on, IEnumerable`1<SqlMergeOperationClause> operations);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Hint();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_Hint(string value);
    [CompilerGeneratedAttribute]
public SqlTableSource get_Target();
    [CompilerGeneratedAttribute]
public SqlTableLikeSource get_Source();
    [CompilerGeneratedAttribute]
internal void set_Source(SqlTableLikeSource value);
    [CompilerGeneratedAttribute]
public SqlSearchCondition get_On();
    [CompilerGeneratedAttribute]
public List`1<SqlMergeOperationClause> get_Operations();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public SqlOutputClause get_Output();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Output(SqlOutputClause value);
    public bool get_HasIdentityInsert();
    public virtual QueryType get_QueryType();
    public virtual QueryElementType get_ElementType();
    public virtual StringBuilder ToString(StringBuilder sb, Dictionary`2<IQueryElement, IQueryElement> dic);
    public virtual ISqlExpression Walk(WalkOptions options, TContext context, Func`3<TContext, ISqlExpression, ISqlExpression> func);
    public virtual bool get_IsParameterDependent();
    public virtual void set_IsParameterDependent(bool value);
    [NullableContextAttribute("2")]
public virtual SelectQuery get_SelectQuery();
    [NullableContextAttribute("2")]
public virtual void set_SelectQuery(SelectQuery value);
    public virtual ISqlTableSource GetTableSource(ISqlTableSource table);
    public virtual void WalkQueries(TContext context, Func`3<TContext, SelectQuery, SelectQuery> func);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.SqlQuery.SqlMultiInsertStatement : SqlStatement {
    [CompilerGeneratedAttribute]
private SqlTableLikeSource <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<SqlConditionalInsertClause> <Inserts>k__BackingField;
    [CompilerGeneratedAttribute]
private MultiInsertType <InsertType>k__BackingField;
    public SqlTableLikeSource Source { get; }
    public List`1<SqlConditionalInsertClause> Inserts { get; }
    public MultiInsertType InsertType { get; internal set; }
    public QueryType QueryType { get; }
    public QueryElementType ElementType { get; }
    public bool IsParameterDependent { get; public set; }
    [NullableAttribute("2")]
public SelectQuery SelectQuery { get; public set; }
    public SqlMultiInsertStatement(SqlTableLikeSource source);
    internal SqlMultiInsertStatement(MultiInsertType type, SqlTableLikeSource source, List`1<SqlConditionalInsertClause> inserts);
    [CompilerGeneratedAttribute]
public SqlTableLikeSource get_Source();
    [CompilerGeneratedAttribute]
public List`1<SqlConditionalInsertClause> get_Inserts();
    [CompilerGeneratedAttribute]
public MultiInsertType get_InsertType();
    [CompilerGeneratedAttribute]
internal void set_InsertType(MultiInsertType value);
    public void Add(SqlSearchCondition when, SqlInsertClause insert);
    public virtual QueryType get_QueryType();
    public virtual QueryElementType get_ElementType();
    public virtual StringBuilder ToString(StringBuilder sb, Dictionary`2<IQueryElement, IQueryElement> dic);
    public virtual ISqlExpression Walk(WalkOptions options, TContext context, Func`3<TContext, ISqlExpression, ISqlExpression> func);
    public virtual bool get_IsParameterDependent();
    public virtual void set_IsParameterDependent(bool value);
    [NullableContextAttribute("2")]
public virtual SelectQuery get_SelectQuery();
    [NullableContextAttribute("2")]
public virtual void set_SelectQuery(SelectQuery value);
    public virtual ISqlTableSource GetTableSource(ISqlTableSource table);
    public virtual void WalkQueries(TContext context, Func`3<TContext, SelectQuery, SelectQuery> func);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.SqlQuery.SqlObjectExpression : object {
    private SqlInfo[] _infoParameters;
    private Nullable`1<bool> _canBeNull;
    internal static Func`3<ISqlExpression, ISqlExpression, bool> DefaultComparer;
    [CompilerGeneratedAttribute]
private MappingSchema <MappingSchema>k__BackingField;
    [NullableAttribute("2")]
public Type SystemType { get; }
    public int Precedence { get; }
    public bool CanBeNull { get; public set; }
    public QueryElementType ElementType { get; }
    public MappingSchema MappingSchema { get; }
    internal SqlInfo[] InfoParameters { get; }
    public SqlObjectExpression(MappingSchema mappingSchema, SqlInfo[] infoParameters);
    private static SqlObjectExpression();
    public SqlValue GetSqlValue(object obj, int index);
    [NullableContextAttribute("2")]
public sealed virtual Type get_SystemType();
    public sealed virtual int get_Precedence();
    private sealed virtual override ISqlExpression LinqToDB.SqlQuery.ISqlExpressionWalkable.Walk(WalkOptions options, TContext context, Func`3<TContext, ISqlExpression, ISqlExpression> func);
    [NullableContextAttribute("2")]
private sealed virtual override bool System.IEquatable<LinqToDB.SqlQuery.ISqlExpression>.Equals(ISqlExpression other);
    public sealed virtual bool get_CanBeNull();
    public void set_CanBeNull(bool value);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(ISqlExpression other, Func`3<ISqlExpression, ISqlExpression, bool> comparer);
    public sealed virtual QueryElementType get_ElementType();
    private sealed virtual override StringBuilder LinqToDB.SqlQuery.IQueryElement.ToString(StringBuilder sb, Dictionary`2<IQueryElement, IQueryElement> dic);
    [CompilerGeneratedAttribute]
public MappingSchema get_MappingSchema();
    internal SqlInfo[] get_InfoParameters();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class LinqToDB.SqlQuery.SqlObjectName : ValueType {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Server>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Database>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Package>k__BackingField;
    [NullableAttribute("1")]
public string Name { get; public set; }
    public string Server { get; public set; }
    public string Database { get; public set; }
    public string Schema { get; public set; }
    public string Package { get; public set; }
    public SqlObjectName(string Name, string Server, string Database, string Schema, string Package);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_Name();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Server();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Server(string value);
    [CompilerGeneratedAttribute]
public string get_Database();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Database(string value);
    [CompilerGeneratedAttribute]
public string get_Schema();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Schema(string value);
    [CompilerGeneratedAttribute]
public string get_Package();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Package(string value);
    [NullableContextAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(SqlObjectName left, SqlObjectName right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(SqlObjectName left, SqlObjectName right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(SqlObjectName other);
    [CompilerGeneratedAttribute]
public void Deconstruct(String& Name, String& Server, String& Database, String& Schema, String& Package);
}
public class LinqToDB.SqlQuery.SqlObjectNameComparer : object {
    [NullableAttribute("1")]
public static IComparer`1<SqlObjectName> Instance;
    private static SqlObjectNameComparer();
    private sealed virtual override int System.Collections.Generic.IComparer<LinqToDB.SqlQuery.SqlObjectName>.Compare(SqlObjectName x, SqlObjectName y);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.SqlQuery.SqlOrderByClause : ClauseBase {
    [CompilerGeneratedAttribute]
private List`1<SqlOrderByItem> <Items>k__BackingField;
    public List`1<SqlOrderByItem> Items { get; }
    public bool IsEmpty { get; }
    public QueryElementType ElementType { get; }
    internal SqlOrderByClause(SelectQuery selectQuery);
    internal SqlOrderByClause(IEnumerable`1<SqlOrderByItem> items);
    public SqlOrderByClause Expr(ISqlExpression expr, bool isDescending);
    public SqlOrderByClause Expr(ISqlExpression expr);
    public SqlOrderByClause ExprAsc(ISqlExpression expr);
    public SqlOrderByClause ExprDesc(ISqlExpression expr);
    public SqlOrderByClause Field(SqlField field, bool isDescending);
    public SqlOrderByClause Field(SqlField field);
    public SqlOrderByClause FieldAsc(SqlField field);
    public SqlOrderByClause FieldDesc(SqlField field);
    private void Add(ISqlExpression expr, bool isDescending);
    [CompilerGeneratedAttribute]
public List`1<SqlOrderByItem> get_Items();
    public bool get_IsEmpty();
    private sealed virtual override ISqlExpression LinqToDB.SqlQuery.ISqlExpressionWalkable.Walk(WalkOptions options, TContext context, Func`3<TContext, ISqlExpression, ISqlExpression> func);
    public sealed virtual QueryElementType get_ElementType();
    private sealed virtual override StringBuilder LinqToDB.SqlQuery.IQueryElement.ToString(StringBuilder sb, Dictionary`2<IQueryElement, IQueryElement> dic);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.SqlQuery.SqlOrderByItem : object {
    [CompilerGeneratedAttribute]
private ISqlExpression <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDescending>k__BackingField;
    public ISqlExpression Expression { get; internal set; }
    public bool IsDescending { get; }
    public QueryElementType ElementType { get; }
    public SqlOrderByItem(ISqlExpression expression, bool isDescending);
    [CompilerGeneratedAttribute]
public ISqlExpression get_Expression();
    [CompilerGeneratedAttribute]
internal void set_Expression(ISqlExpression value);
    [CompilerGeneratedAttribute]
public bool get_IsDescending();
    internal void Walk(WalkOptions options, TContext context, Func`3<TContext, ISqlExpression, ISqlExpression> func);
    public sealed virtual QueryElementType get_ElementType();
    private sealed virtual override StringBuilder LinqToDB.SqlQuery.IQueryElement.ToString(StringBuilder sb, Dictionary`2<IQueryElement, IQueryElement> dic);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class LinqToDB.SqlQuery.SqlOutputClause : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<SqlSetExpression> _outputItems;
    [CompilerGeneratedAttribute]
private SqlTable <InsertedTable>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlTable <DeletedTable>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlTable <OutputTable>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<ISqlExpression> <OutputColumns>k__BackingField;
    public SqlTable InsertedTable { get; public set; }
    public SqlTable DeletedTable { get; public set; }
    public SqlTable OutputTable { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<ISqlExpression> OutputColumns { get; public set; }
    public bool HasOutput { get; }
    public bool HasOutputItems { get; }
    [NullableAttribute("1")]
public List`1<SqlSetExpression> OutputItems { get; }
    public QueryElementType ElementType { get; }
    [CompilerGeneratedAttribute]
public SqlTable get_InsertedTable();
    [CompilerGeneratedAttribute]
public void set_InsertedTable(SqlTable value);
    [CompilerGeneratedAttribute]
public SqlTable get_DeletedTable();
    [CompilerGeneratedAttribute]
public void set_DeletedTable(SqlTable value);
    [CompilerGeneratedAttribute]
public SqlTable get_OutputTable();
    [CompilerGeneratedAttribute]
public void set_OutputTable(SqlTable value);
    [CompilerGeneratedAttribute]
public List`1<ISqlExpression> get_OutputColumns();
    [CompilerGeneratedAttribute]
public void set_OutputColumns(List`1<ISqlExpression> value);
    public bool get_HasOutput();
    public bool get_HasOutputItems();
    [NullableContextAttribute("1")]
public List`1<SqlSetExpression> get_OutputItems();
    [NullableContextAttribute("1")]
private sealed virtual override ISqlExpression LinqToDB.SqlQuery.ISqlExpressionWalkable.Walk(WalkOptions options, TContext context, Func`3<TContext, ISqlExpression, ISqlExpression> func);
    public sealed virtual QueryElementType get_ElementType();
    [NullableContextAttribute("1")]
private sealed virtual override StringBuilder LinqToDB.SqlQuery.IQueryElement.ToString(StringBuilder sb, Dictionary`2<IQueryElement, IQueryElement> dic);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class LinqToDB.SqlQuery.SqlParameter : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private DbDataType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsQueryParameter>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <AccessorId>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    internal List`1<int> TakeValues;
    private Func`2<object, object> _valueConverter;
    public string Name { get; public set; }
    public DbDataType Type { get; public set; }
    public bool IsQueryParameter { get; public set; }
    internal Nullable`1<int> AccessorId { get; internal set; }
    [NullableAttribute("1")]
private Type LinqToDB.SqlQuery.ISqlExpression.SystemType { get; }
    public object Value { get; }
    public Func`2<object, object> ValueConverter { get; public set; }
    public int Precedence { get; }
    public bool CanBeNull { get; }
    public QueryElementType ElementType { get; }
    public SqlParameter(DbDataType type, string name, object value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public DbDataType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(DbDataType value);
    [CompilerGeneratedAttribute]
public bool get_IsQueryParameter();
    [CompilerGeneratedAttribute]
public void set_IsQueryParameter(bool value);
    [CompilerGeneratedAttribute]
internal Nullable`1<int> get_AccessorId();
    [CompilerGeneratedAttribute]
internal void set_AccessorId(Nullable`1<int> value);
    [NullableContextAttribute("1")]
private sealed virtual override Type LinqToDB.SqlQuery.ISqlExpression.get_SystemType();
    [CompilerGeneratedAttribute]
public object get_Value();
    public object CorrectParameterValue(object rawValue);
    public Func`2<object, object> get_ValueConverter();
    public void set_ValueConverter(Func`2<object, object> value);
    internal void SetTakeConverter(int take);
    private void SetTakeConverterInternal(int take);
    public sealed virtual int get_Precedence();
    [NullableContextAttribute("1")]
private sealed virtual override ISqlExpression LinqToDB.SqlQuery.ISqlExpressionWalkable.Walk(WalkOptions options, TContext context, Func`3<TContext, ISqlExpression, ISqlExpression> func);
    private sealed virtual override bool System.IEquatable<LinqToDB.SqlQuery.ISqlExpression>.Equals(ISqlExpression other);
    public virtual int GetHashCode();
    public sealed virtual bool get_CanBeNull();
    [NullableContextAttribute("1")]
public sealed virtual bool Equals(ISqlExpression other, Func`3<ISqlExpression, ISqlExpression, bool> comparer);
    public sealed virtual QueryElementType get_ElementType();
    [NullableContextAttribute("1")]
private sealed virtual override StringBuilder LinqToDB.SqlQuery.IQueryElement.ToString(StringBuilder sb, Dictionary`2<IQueryElement, IQueryElement> dic);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{ProviderValue}, {DbDataType}")]
public class LinqToDB.SqlQuery.SqlParameterValue : object {
    [CompilerGeneratedAttribute]
private object <ProviderValue>k__BackingField;
    [CompilerGeneratedAttribute]
private DbDataType <DbDataType>k__BackingField;
    public object ProviderValue { get; }
    public DbDataType DbDataType { get; }
    public SqlParameterValue(object providerValue, DbDataType dbDataType);
    [CompilerGeneratedAttribute]
public object get_ProviderValue();
    [CompilerGeneratedAttribute]
public DbDataType get_DbDataType();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.SqlQuery.SqlParameterValues : object {
    public static IReadOnlyParameterValues Empty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<SqlParameter, SqlParameterValue> _valuesByParameter;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<int, SqlParameterValue> _valuesByAccessor;
    private static SqlParameterValues();
    public void AddValue(SqlParameter parameter, object providerValue, DbDataType dbDataType);
    public void SetValue(SqlParameter parameter, object value);
    public sealed virtual bool TryGetValue(SqlParameter parameter, SqlParameterValue& value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class LinqToDB.SqlQuery.SqlPredicate : object {
    [CompilerGeneratedAttribute]
private int <Precedence>k__BackingField;
    public int Precedence { get; }
    public bool CanBeNull { get; }
    public QueryElementType ElementType { get; }
    protected SqlPredicate(int precedence);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Precedence();
    public abstract virtual bool get_CanBeNull();
    public abstract virtual bool Equals(ISqlPredicate other, Func`3<ISqlExpression, ISqlExpression, bool> comparer);
    protected abstract virtual void Walk(WalkOptions options, TContext context, Func`3<TContext, ISqlExpression, ISqlExpression> func);
    private sealed virtual override ISqlExpression LinqToDB.SqlQuery.ISqlExpressionWalkable.Walk(WalkOptions options, TContext context, Func`3<TContext, ISqlExpression, ISqlExpression> func);
    public abstract virtual QueryElementType get_ElementType();
    protected abstract virtual void ToString(StringBuilder sb, Dictionary`2<IQueryElement, IQueryElement> dic);
    private sealed virtual override StringBuilder LinqToDB.SqlQuery.IQueryElement.ToString(StringBuilder sb, Dictionary`2<IQueryElement, IQueryElement> dic);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class LinqToDB.SqlQuery.SqlQueryExtension : object {
    [CompilerGeneratedAttribute]
private string <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private QueryExtensionScope <Scope>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Dictionary`2<string, ISqlExpression> <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <BuilderType>k__BackingField;
    public string Configuration { get; public set; }
    public QueryExtensionScope Scope { get; public set; }
    [NullableAttribute("1")]
public Dictionary`2<string, ISqlExpression> Arguments { get; }
    public Type BuilderType { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Configuration();
    [CompilerGeneratedAttribute]
public void set_Configuration(string value);
    [CompilerGeneratedAttribute]
public QueryExtensionScope get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(QueryExtensionScope value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public Dictionary`2<string, ISqlExpression> get_Arguments();
    [CompilerGeneratedAttribute]
public Type get_BuilderType();
    [CompilerGeneratedAttribute]
public void set_BuilderType(Type value);
    [NullableContextAttribute("1")]
public sealed virtual ISqlExpression Walk(WalkOptions options, TContext context, Func`3<TContext, ISqlExpression, ISqlExpression> func);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.SqlQuery.SqlRawSqlTable : SqlTable {
    [CompilerGeneratedAttribute]
private string <SQL>k__BackingField;
    [CompilerGeneratedAttribute]
private ISqlExpression[] <Parameters>k__BackingField;
    public string SQL { get; }
    public ISqlExpression[] Parameters { get; }
    public QueryElementType ElementType { get; }
    public string SqlText { get; }
    public SqlRawSqlTable(EntityDescriptor endtityDescriptor, string sql, ISqlExpression[] parameters);
    internal SqlRawSqlTable(int id, string alias, Type objectType, SqlField[] fields, string sql, ISqlExpression[] parameters);
    public SqlRawSqlTable(SqlRawSqlTable table, ISqlExpression[] parameters);
    [CompilerGeneratedAttribute]
public string get_SQL();
    [CompilerGeneratedAttribute]
public ISqlExpression[] get_Parameters();
    public virtual QueryElementType get_ElementType();
    private sealed virtual override StringBuilder LinqToDB.SqlQuery.IQueryElement.ToString(StringBuilder sb, Dictionary`2<IQueryElement, IQueryElement> dic);
    public virtual string ToString();
    public string get_SqlText();
    public virtual ISqlExpression Walk(WalkOptions options, TContext context, Func`3<TContext, ISqlExpression, ISqlExpression> func);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.SqlQuery.SqlRow : object {
    [CompilerGeneratedAttribute]
private ISqlExpression[] <Values>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanBeNull>k__BackingField;
    public ISqlExpression[] Values { get; }
    public bool CanBeNull { get; }
    public int Precedence { get; }
    [NullableAttribute("2")]
public Type SystemType { get; }
    public QueryElementType ElementType { get; }
    public SqlRow(ISqlExpression[] values);
    [CompilerGeneratedAttribute]
public ISqlExpression[] get_Values();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_CanBeNull();
    public sealed virtual int get_Precedence();
    [NullableContextAttribute("2")]
public sealed virtual Type get_SystemType();
    public sealed virtual QueryElementType get_ElementType();
    public sealed virtual bool Equals(ISqlExpression other, Func`3<ISqlExpression, ISqlExpression, bool> comparer);
    public sealed virtual bool Equals(ISqlExpression other);
    public sealed virtual StringBuilder ToString(StringBuilder sb, Dictionary`2<IQueryElement, IQueryElement> dic);
    public sealed virtual ISqlExpression Walk(WalkOptions options, TContext context, Func`3<TContext, ISqlExpression, ISqlExpression> func);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class LinqToDB.SqlQuery.SqlSearchCondition : ConditionBase`2<SqlSearchCondition, Next> {
    [CompilerGeneratedAttribute]
private List`1<SqlCondition> <Conditions>k__BackingField;
    public List`1<SqlCondition> Conditions { get; }
    protected SqlSearchCondition Search { get; }
    public int Precedence { get; }
    public Type SystemType { get; }
    public bool CanBeNull { get; }
    public QueryElementType ElementType { get; }
    public SqlSearchCondition(SqlCondition condition);
    public SqlSearchCondition(SqlCondition condition1, SqlCondition condition2);
    public SqlSearchCondition(IEnumerable`1<SqlCondition> list);
    [CompilerGeneratedAttribute]
public List`1<SqlCondition> get_Conditions();
    public SqlSearchCondition Add(SqlCondition condition);
    protected virtual SqlSearchCondition get_Search();
    protected virtual Next GetNext();
    public sealed virtual int get_Precedence();
    public sealed virtual Type get_SystemType();
    private sealed virtual override ISqlExpression LinqToDB.SqlQuery.ISqlExpressionWalkable.Walk(WalkOptions options, TContext context, Func`3<TContext, ISqlExpression, ISqlExpression> func);
    public sealed virtual bool CanInvert();
    public sealed virtual IQueryElement Invert();
    [NullableContextAttribute("2")]
private sealed virtual override bool System.IEquatable<LinqToDB.SqlQuery.ISqlExpression>.Equals(ISqlExpression other);
    public sealed virtual bool get_CanBeNull();
    public sealed virtual bool Equals(ISqlExpression other, Func`3<ISqlExpression, ISqlExpression, bool> comparer);
    public sealed virtual bool Equals(ISqlPredicate other, Func`3<ISqlExpression, ISqlExpression, bool> comparer);
    public sealed virtual QueryElementType get_ElementType();
    private sealed virtual override StringBuilder LinqToDB.SqlQuery.IQueryElement.ToString(StringBuilder sb, Dictionary`2<IQueryElement, IQueryElement> dic);
    public void Deconstruct(List`1& conditions);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.SqlQuery.SqlSelectClause : ClauseBase {
    [CompilerGeneratedAttribute]
private List`1<SqlColumn> <Columns>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDistinct>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OptimizeDistinct>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ISqlExpression <TakeValue>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TakeHints> <TakeHints>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ISqlExpression <SkipValue>k__BackingField;
    public List`1<SqlColumn> Columns { get; }
    public bool HasModifier { get; }
    public bool IsDistinct { get; public set; }
    public bool OptimizeDistinct { get; public set; }
    [NullableAttribute("2")]
public ISqlExpression TakeValue { get; internal set; }
    public Nullable`1<TakeHints> TakeHints { get; private set; }
    [NullableAttribute("2")]
public ISqlExpression SkipValue { get; public set; }
    public QueryElementType ElementType { get; }
    internal SqlSelectClause(SelectQuery selectQuery);
    [NullableContextAttribute("2")]
internal SqlSelectClause(bool isDistinct, ISqlExpression takeValue, Nullable`1<TakeHints> takeHints, ISqlExpression skipValue, IEnumerable`1<SqlColumn> columns);
    public SqlSelectClause Field(SqlField field);
    public SqlSelectClause Field(SqlField field, string alias);
    public SqlSelectClause SubQuery(SelectQuery subQuery);
    public SqlSelectClause SubQuery(SelectQuery selectQuery, string alias);
    public SqlSelectClause Expr(ISqlExpression expr);
    public SqlSelectClause ExprNew(ISqlExpression expr);
    public SqlSelectClause Expr(ISqlExpression expr, string alias);
    public SqlSelectClause Expr(string expr, ISqlExpression[] values);
    public SqlSelectClause Expr(Type systemType, string expr, ISqlExpression[] values);
    public SqlSelectClause Expr(string expr, int priority, ISqlExpression[] values);
    public SqlSelectClause Expr(Type systemType, string expr, int priority, ISqlExpression[] values);
    public SqlSelectClause Expr(string alias, string expr, int priority, ISqlExpression[] values);
    public SqlSelectClause Expr(Type systemType, string alias, string expr, int priority, ISqlExpression[] values);
    public SqlSelectClause Expr(ISqlExpression expr1, string operation, ISqlExpression expr2);
    public SqlSelectClause Expr(ISqlExpression expr1, string operation, ISqlExpression expr2, int priority);
    public SqlSelectClause Expr(string alias, ISqlExpression expr1, string operation, ISqlExpression expr2, int priority);
    public int Add(ISqlExpression expr);
    public SqlColumn AddColumn(ISqlExpression expr);
    public int AddNew(ISqlExpression expr, string alias);
    public SqlColumn AddNewColumn(ISqlExpression expr);
    public int Add(ISqlExpression expr, string alias);
    private int AddOrFindColumn(SqlColumn col);
    [CompilerGeneratedAttribute]
public List`1<SqlColumn> get_Columns();
    public bool get_HasModifier();
    [CompilerGeneratedAttribute]
public bool get_IsDistinct();
    [CompilerGeneratedAttribute]
public void set_IsDistinct(bool value);
    [CompilerGeneratedAttribute]
public bool get_OptimizeDistinct();
    [CompilerGeneratedAttribute]
public void set_OptimizeDistinct(bool value);
    public SqlSelectClause Take(int value, Nullable`1<TakeHints> hints);
    public SqlSelectClause Take(ISqlExpression value, Nullable`1<TakeHints> hints);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public ISqlExpression get_TakeValue();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_TakeValue(ISqlExpression value);
    [CompilerGeneratedAttribute]
public Nullable`1<TakeHints> get_TakeHints();
    [CompilerGeneratedAttribute]
private void set_TakeHints(Nullable`1<TakeHints> value);
    public SqlSelectClause Skip(int value);
    public SqlSelectClause Skip(ISqlExpression value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public ISqlExpression get_SkipValue();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_SkipValue(ISqlExpression value);
    private sealed virtual override ISqlExpression LinqToDB.SqlQuery.ISqlExpressionWalkable.Walk(WalkOptions options, TContext context, Func`3<TContext, ISqlExpression, ISqlExpression> func);
    public sealed virtual QueryElementType get_ElementType();
    private sealed virtual override StringBuilder LinqToDB.SqlQuery.IQueryElement.ToString(StringBuilder sb, Dictionary`2<IQueryElement, IQueryElement> dic);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.SqlQuery.SqlSelectStatement : SqlStatementWithQueryBase {
    public QueryType QueryType { get; }
    public QueryElementType ElementType { get; }
    public SqlSelectStatement(SelectQuery selectQuery);
    public virtual QueryType get_QueryType();
    public virtual QueryElementType get_ElementType();
    public virtual StringBuilder ToString(StringBuilder sb, Dictionary`2<IQueryElement, IQueryElement> dic);
    public virtual ISqlExpression Walk(WalkOptions options, TContext context, Func`3<TContext, ISqlExpression, ISqlExpression> func);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.SqlQuery.SqlSetExpression : object {
    [CompilerGeneratedAttribute]
private ISqlExpression <Column>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ISqlExpression <Expression>k__BackingField;
    public ISqlExpression Column { get; public set; }
    [NullableAttribute("2")]
public ISqlExpression Expression { get; public set; }
    public QueryElementType ElementType { get; }
    public SqlSetExpression(ISqlExpression column, ISqlExpression expression);
    private void ValidateColumnExpression(ISqlExpression column, ISqlExpression expression);
    [CompilerGeneratedAttribute]
public ISqlExpression get_Column();
    [CompilerGeneratedAttribute]
public void set_Column(ISqlExpression value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public ISqlExpression get_Expression();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Expression(ISqlExpression value);
    private static void RefineDbParameter(ISqlExpression column, ISqlExpression value);
    private sealed virtual override ISqlExpression LinqToDB.SqlQuery.ISqlExpressionWalkable.Walk(WalkOptions options, TContext context, Func`3<TContext, ISqlExpression, ISqlExpression> func);
    public sealed virtual QueryElementType get_ElementType();
    private sealed virtual override StringBuilder LinqToDB.SqlQuery.IQueryElement.ToString(StringBuilder sb, Dictionary`2<IQueryElement, IQueryElement> dic);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.SqlQuery.SqlSetOperator : object {
    [CompilerGeneratedAttribute]
private SelectQuery <SelectQuery>k__BackingField;
    [CompilerGeneratedAttribute]
private SetOperation <Operation>k__BackingField;
    public SelectQuery SelectQuery { get; }
    public SetOperation Operation { get; }
    public QueryElementType ElementType { get; }
    public SqlSetOperator(SelectQuery selectQuery, SetOperation operation);
    [CompilerGeneratedAttribute]
public SelectQuery get_SelectQuery();
    [CompilerGeneratedAttribute]
public SetOperation get_Operation();
    public sealed virtual QueryElementType get_ElementType();
    private sealed virtual override StringBuilder LinqToDB.SqlQuery.IQueryElement.ToString(StringBuilder sb, Dictionary`2<IQueryElement, IQueryElement> dic);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("SQL = {DebugSqlText}")]
public abstract class LinqToDB.SqlQuery.SqlStatement : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private SqlStatement <ParentStatement>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private SqlComment <Tag>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<SqlQueryExtension> <SqlQueryExtensions>k__BackingField;
    public string SqlText { get; }
    [DebuggerBrowsableAttribute("0")]
protected string DebugSqlText { get; }
    public QueryType QueryType { get; }
    public bool IsParameterDependent { get; public set; }
    [NullableAttribute("2")]
public SqlStatement ParentStatement { get; public set; }
    [NullableAttribute("2")]
public SelectQuery SelectQuery { get; public set; }
    [NullableAttribute("2")]
public SqlComment Tag { get; internal set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<SqlQueryExtension> SqlQueryExtensions { get; public set; }
    public QueryElementType ElementType { get; }
    public string get_SqlText();
    protected string get_DebugSqlText();
    public abstract virtual QueryType get_QueryType();
    public abstract virtual bool get_IsParameterDependent();
    public abstract virtual void set_IsParameterDependent(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public SqlStatement get_ParentStatement();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ParentStatement(SqlStatement value);
    [ObsoleteAttribute("API will be removed in future versions")]
public SqlParameter[] CollectParameters();
    [NullableContextAttribute("2")]
public abstract virtual SelectQuery get_SelectQuery();
    [NullableContextAttribute("2")]
public abstract virtual void set_SelectQuery(SelectQuery value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public SqlComment get_Tag();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_Tag(SqlComment value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<SqlQueryExtension> get_SqlQueryExtensions();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SqlQueryExtensions(List`1<SqlQueryExtension> value);
    public abstract virtual QueryElementType get_ElementType();
    public abstract virtual StringBuilder ToString(StringBuilder sb, Dictionary`2<IQueryElement, IQueryElement> dic);
    public virtual ISqlExpression Walk(WalkOptions options, TContext context, Func`3<TContext, ISqlExpression, ISqlExpression> func);
    public static void PrepareQueryAndAliases(SqlStatement statement, AliasesContext prevAliasContext, AliasesContext& newAliasContext);
    public abstract virtual ISqlTableSource GetTableSource(ISqlTableSource table);
    public abstract virtual void WalkQueries(TContext context, Func`3<TContext, SelectQuery, SelectQuery> func);
    internal void EnsureFindTables();
    public virtual bool IsDependedOn(SqlTable table);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class LinqToDB.SqlQuery.SqlStatementWithQueryBase : SqlStatement {
    private SelectQuery _selectQuery;
    [CompilerGeneratedAttribute]
private SqlWithClause <With>k__BackingField;
    public bool IsParameterDependent { get; public set; }
    public SelectQuery SelectQuery { get; public set; }
    public SqlWithClause With { get; public set; }
    protected SqlStatementWithQueryBase(SelectQuery selectQuery);
    public virtual bool get_IsParameterDependent();
    public virtual void set_IsParameterDependent(bool value);
    public virtual SelectQuery get_SelectQuery();
    public virtual void set_SelectQuery(SelectQuery value);
    [CompilerGeneratedAttribute]
public SqlWithClause get_With();
    [CompilerGeneratedAttribute]
public void set_With(SqlWithClause value);
    [NullableContextAttribute("1")]
public virtual ISqlTableSource GetTableSource(ISqlTableSource table);
    [NullableContextAttribute("1")]
public virtual void WalkQueries(TContext context, Func`3<TContext, SelectQuery, SelectQuery> func);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.SqlQuery.SqlTable : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Alias>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlObjectName <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ObjectType>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlTableType <SqlTableType>k__BackingField;
    [CompilerGeneratedAttribute]
private TableOptions <TableOptions>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <ID>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Expression>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ISqlExpression[] <TableArguments>k__BackingField;
    private List`1<SqlField> _orderedFields;
    private Dictionary`2<string, SqlField> _fieldsLookup;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<SqlQueryExtension> <SqlQueryExtensions>k__BackingField;
    private List`1<SqlField> _identityFields;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private SequenceNameAttribute[] <SequenceAttributes>k__BackingField;
    [NullableAttribute("2")]
private SqlField _all;
    [CompilerGeneratedAttribute]
private int <SourceID>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<ISqlExpression> _keyFields;
    [CompilerGeneratedAttribute]
private bool <CanBeNull>k__BackingField;
    [NullableAttribute("2")]
public string Alias { get; public set; }
    public SqlObjectName TableName { get; public set; }
    public Type ObjectType { get; protected internal set; }
    public SqlTableType SqlTableType { get; public set; }
    public TableOptions TableOptions { get; public set; }
    [NullableAttribute("2")]
public string ID { get; public set; }
    [NullableAttribute("2")]
public string Expression { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ISqlExpression[] TableArguments { get; public set; }
    internal string NameForLogging { get; }
    public IReadOnlyList`1<SqlField> Fields { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<SqlQueryExtension> SqlQueryExtensions { get; public set; }
    public IReadOnlyList`1<SqlField> IdentityFields { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SequenceNameAttribute[] SequenceAttributes { get; protected internal set; }
    public SqlField All { get; }
    public int SourceID { get; }
    public QueryElementType ElementType { get; }
    public bool CanBeNull { get; public set; }
    private int LinqToDB.SqlQuery.ISqlExpression.Precedence { get; }
    private Type LinqToDB.SqlQuery.ISqlExpression.SystemType { get; }
    protected internal SqlTable(Type objectType, Nullable`1<int> sourceId, SqlObjectName tableName);
    internal SqlTable(int id, string expression, string alias, SqlObjectName tableName, Type objectType, SequenceNameAttribute[] sequenceAttributes, IEnumerable`1<SqlField> fields, SqlTableType sqlTableType, ISqlExpression[] tableArguments, TableOptions tableOptions, string tableID);
    public SqlTable(EntityDescriptor entityDescriptor, string physicalName);
    public SqlTable(SqlTable table);
    public SqlTable(SqlTable table, IEnumerable`1<SqlField> fields, ISqlExpression[] tableArguments);
    public virtual string ToString();
    public SqlField FindFieldByMemberName(string memberName);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Alias();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Alias(string value);
    [CompilerGeneratedAttribute]
public virtual SqlObjectName get_TableName();
    [CompilerGeneratedAttribute]
public virtual void set_TableName(SqlObjectName value);
    [CompilerGeneratedAttribute]
public Type get_ObjectType();
    [CompilerGeneratedAttribute]
protected internal void set_ObjectType(Type value);
    [CompilerGeneratedAttribute]
public virtual SqlTableType get_SqlTableType();
    [CompilerGeneratedAttribute]
public virtual void set_SqlTableType(SqlTableType value);
    [CompilerGeneratedAttribute]
public TableOptions get_TableOptions();
    [CompilerGeneratedAttribute]
public void set_TableOptions(TableOptions value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual string get_ID();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual void set_ID(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Expression();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Expression(string value);
    [CompilerGeneratedAttribute]
public ISqlExpression[] get_TableArguments();
    [CompilerGeneratedAttribute]
public void set_TableArguments(ISqlExpression[] value);
    internal string get_NameForLogging();
    public IReadOnlyList`1<SqlField> get_Fields();
    [CompilerGeneratedAttribute]
public sealed virtual List`1<SqlQueryExtension> get_SqlQueryExtensions();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SqlQueryExtensions(List`1<SqlQueryExtension> value);
    public IReadOnlyList`1<SqlField> get_IdentityFields();
    internal void ClearFields();
    [CompilerGeneratedAttribute]
public SequenceNameAttribute[] get_SequenceAttributes();
    [CompilerGeneratedAttribute]
protected internal void set_SequenceAttributes(SequenceNameAttribute[] value);
    public sealed virtual SqlField get_All();
    [NullableContextAttribute("2")]
public SqlField GetIdentityField();
    public void Add(SqlField field);
    public void AddRange(IEnumerable`1<SqlField> collection);
    [CompilerGeneratedAttribute]
public sealed virtual int get_SourceID();
    public sealed virtual IList`1<ISqlExpression> GetKeys(bool allIfEmpty);
    public virtual QueryElementType get_ElementType();
    public virtual StringBuilder ToString(StringBuilder sb, Dictionary`2<IQueryElement, IQueryElement> dic);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_CanBeNull();
    [CompilerGeneratedAttribute]
public void set_CanBeNull(bool value);
    private sealed virtual override int LinqToDB.SqlQuery.ISqlExpression.get_Precedence();
    private sealed virtual override Type LinqToDB.SqlQuery.ISqlExpression.get_SystemType();
    public sealed virtual bool Equals(ISqlExpression other, Func`3<ISqlExpression, ISqlExpression, bool> comparer);
    [NullableContextAttribute("2")]
private sealed virtual override bool System.IEquatable<LinqToDB.SqlQuery.ISqlExpression>.Equals(ISqlExpression other);
    public virtual ISqlExpression Walk(WalkOptions options, TContext context, Func`3<TContext, ISqlExpression, ISqlExpression> func);
    internal static SqlTable Inserted(EntityDescriptor entityDescriptor);
    internal static SqlTable Deleted(EntityDescriptor entityDescriptor);
    internal static SqlTable Create(IDataContext dataContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.SqlQuery.SqlTableLikeSource : object {
    [CompilerGeneratedAttribute]
private List`1<SqlField> <SourceFields>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private SqlValuesTable <SourceEnumerable>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private SelectQuery <SourceQuery>k__BackingField;
    private IDictionary`2<SqlField, Tuple`2<SqlField, int>> _sourceFieldsByBase;
    private IDictionary`2<ISqlExpression, Tuple`2<SqlField, int>> _sourceFieldsByExpression;
    [NullableAttribute("2")]
private SqlField _all;
    [CompilerGeneratedAttribute]
private int <SourceID>k__BackingField;
    public string Name { get; }
    public List`1<SqlField> SourceFields { get; }
    [NullableAttribute("2")]
public SqlValuesTable SourceEnumerable { get; internal set; }
    [NullableAttribute("2")]
public SelectQuery SourceQuery { get; internal set; }
    public ISqlTableSource Source { get; }
    public bool IsParameterDependent { get; public set; }
    private QueryElementType LinqToDB.SqlQuery.IQueryElement.ElementType { get; }
    private SqlTableType LinqToDB.SqlQuery.ISqlTableSource.SqlTableType { get; }
    private SqlField LinqToDB.SqlQuery.ISqlTableSource.All { get; }
    public int SourceID { get; }
    private bool LinqToDB.SqlQuery.ISqlExpression.CanBeNull { get; }
    private int LinqToDB.SqlQuery.ISqlExpression.Precedence { get; }
    private Type LinqToDB.SqlQuery.ISqlExpression.SystemType { get; }
    internal SqlTableLikeSource(int id, SqlValuesTable sourceEnumerable, SelectQuery sourceQuery, IEnumerable`1<SqlField> sourceFields);
    public string get_Name();
    [CompilerGeneratedAttribute]
public List`1<SqlField> get_SourceFields();
    private void AddField(SqlField field);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public SqlValuesTable get_SourceEnumerable();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_SourceEnumerable(SqlValuesTable value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public SelectQuery get_SourceQuery();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_SourceQuery(SelectQuery value);
    public ISqlTableSource get_Source();
    public void WalkQueries(TContext context, Func`3<TContext, SelectQuery, SelectQuery> func);
    public bool get_IsParameterDependent();
    public void set_IsParameterDependent(bool value);
    internal SqlField RegisterSourceField(ISqlExpression baseExpression, ISqlExpression expression, int index, Func`1<SqlField> fieldFactory);
    private sealed virtual override QueryElementType LinqToDB.SqlQuery.IQueryElement.get_ElementType();
    public sealed virtual StringBuilder ToString(StringBuilder sb, Dictionary`2<IQueryElement, IQueryElement> dic);
    private sealed virtual override SqlTableType LinqToDB.SqlQuery.ISqlTableSource.get_SqlTableType();
    private sealed virtual override SqlField LinqToDB.SqlQuery.ISqlTableSource.get_All();
    [CompilerGeneratedAttribute]
public sealed virtual int get_SourceID();
    private sealed virtual override IList`1<ISqlExpression> LinqToDB.SqlQuery.ISqlTableSource.GetKeys(bool allIfEmpty);
    public sealed virtual ISqlExpression Walk(WalkOptions options, TContext context, Func`3<TContext, ISqlExpression, ISqlExpression> func);
    private sealed virtual override bool LinqToDB.SqlQuery.ISqlExpression.get_CanBeNull();
    private sealed virtual override int LinqToDB.SqlQuery.ISqlExpression.get_Precedence();
    private sealed virtual override Type LinqToDB.SqlQuery.ISqlExpression.get_SystemType();
    private sealed virtual override bool LinqToDB.SqlQuery.ISqlExpression.Equals(ISqlExpression other, Func`3<ISqlExpression, ISqlExpression, bool> comparer);
    [NullableContextAttribute("2")]
private sealed virtual override bool System.IEquatable<LinqToDB.SqlQuery.ISqlExpression>.Equals(ISqlExpression other);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class LinqToDB.SqlQuery.SqlTableSource : object {
    [CompilerGeneratedAttribute]
private ISqlTableSource <Source>k__BackingField;
    [NullableAttribute("2")]
private string _alias;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<ISqlExpression[]> _uniqueKeys;
    [CompilerGeneratedAttribute]
private List`1<SqlJoinedTable> <Joins>k__BackingField;
    public ISqlTableSource Source { get; public set; }
    public SqlTableType SqlTableType { get; }
    [NullableAttribute("2")]
public string Alias { get; public set; }
    [NullableAttribute("2")]
internal string RawAlias { get; }
    public List`1<ISqlExpression[]> UniqueKeys { get; }
    public bool HasUniqueKeys { get; }
    [NullableAttribute("2")]
public SqlTableSource Item { get; }
    [NullableAttribute("2")]
public SqlTableSource Item { get; }
    public List`1<SqlJoinedTable> Joins { get; }
    public int SourceID { get; }
    public SqlField All { get; }
    public QueryElementType ElementType { get; }
    public bool CanBeNull { get; }
    public int Precedence { get; }
    [NullableAttribute("2")]
public Type SystemType { get; }
    public SqlTableSource(ISqlTableSource source, string alias);
    public SqlTableSource(ISqlTableSource source, string alias, SqlJoinedTable[] joins);
    public SqlTableSource(ISqlTableSource source, string alias, IEnumerable`1<SqlJoinedTable> joins, IEnumerable`1<ISqlExpression[]> uniqueKeys);
    [CompilerGeneratedAttribute]
public ISqlTableSource get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(ISqlTableSource value);
    public sealed virtual SqlTableType get_SqlTableType();
    [NullableContextAttribute("2")]
public string get_Alias();
    [NullableContextAttribute("2")]
public void set_Alias(string value);
    [NullableContextAttribute("2")]
internal string get_RawAlias();
    public List`1<ISqlExpression[]> get_UniqueKeys();
    public bool get_HasUniqueKeys();
    public SqlTableSource get_Item(ISqlTableSource table);
    [NullableContextAttribute("2")]
public SqlTableSource get_Item(ISqlTableSource table, string alias);
    [CompilerGeneratedAttribute]
public List`1<SqlJoinedTable> get_Joins();
    public void ForEach(TContext context, Action`2<TContext, SqlTableSource> action, HashSet`1<SelectQuery> visitedQueries);
    [IteratorStateMachineAttribute("LinqToDB.SqlQuery.SqlTableSource/<GetTables>d__28")]
public IEnumerable`1<ISqlTableSource> GetTables();
    public int GetJoinNumber();
    [NullableContextAttribute("2")]
private sealed virtual override bool System.IEquatable<LinqToDB.SqlQuery.ISqlExpression>.Equals(ISqlExpression other);
    public sealed virtual ISqlExpression Walk(WalkOptions options, TContext context, Func`3<TContext, ISqlExpression, ISqlExpression> func);
    public sealed virtual int get_SourceID();
    public sealed virtual SqlField get_All();
    private sealed virtual override IList`1<ISqlExpression> LinqToDB.SqlQuery.ISqlTableSource.GetKeys(bool allIfEmpty);
    public sealed virtual QueryElementType get_ElementType();
    private sealed virtual override StringBuilder LinqToDB.SqlQuery.IQueryElement.ToString(StringBuilder sb, Dictionary`2<IQueryElement, IQueryElement> dic);
    public sealed virtual bool get_CanBeNull();
    public sealed virtual int get_Precedence();
    [NullableContextAttribute("2")]
public sealed virtual Type get_SystemType();
    public sealed virtual bool Equals(ISqlExpression other, Func`3<ISqlExpression, ISqlExpression, bool> comparer);
    public void Deconstruct(ISqlTableSource& source);
}
public enum LinqToDB.SqlQuery.SqlTableType : Enum {
    public int value__;
    public static SqlTableType Table;
    public static SqlTableType SystemTable;
    public static SqlTableType Function;
    public static SqlTableType Expression;
    public static SqlTableType Cte;
    public static SqlTableType RawSql;
    public static SqlTableType MergeSource;
    public static SqlTableType Values;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class LinqToDB.SqlQuery.SqlTruncateTableStatement : SqlStatement {
    [CompilerGeneratedAttribute]
private SqlTable <Table>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ResetIdentity>k__BackingField;
    public SqlTable Table { get; public set; }
    public bool ResetIdentity { get; public set; }
    public QueryType QueryType { get; }
    public QueryElementType ElementType { get; }
    public bool IsParameterDependent { get; public set; }
    public SelectQuery SelectQuery { get; public set; }
    [CompilerGeneratedAttribute]
public SqlTable get_Table();
    [CompilerGeneratedAttribute]
public void set_Table(SqlTable value);
    [CompilerGeneratedAttribute]
public bool get_ResetIdentity();
    [CompilerGeneratedAttribute]
public void set_ResetIdentity(bool value);
    public virtual QueryType get_QueryType();
    public virtual QueryElementType get_ElementType();
    public virtual bool get_IsParameterDependent();
    public virtual void set_IsParameterDependent(bool value);
    public virtual SelectQuery get_SelectQuery();
    public virtual void set_SelectQuery(SelectQuery value);
    [NullableContextAttribute("1")]
public virtual StringBuilder ToString(StringBuilder sb, Dictionary`2<IQueryElement, IQueryElement> dic);
    [NullableContextAttribute("1")]
public virtual ISqlExpression Walk(WalkOptions options, TContext context, Func`3<TContext, ISqlExpression, ISqlExpression> func);
    [NullableContextAttribute("1")]
public virtual ISqlTableSource GetTableSource(ISqlTableSource table);
    [NullableContextAttribute("1")]
public virtual void WalkQueries(TContext context, Func`3<TContext, SelectQuery, SelectQuery> func);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.SqlQuery.SqlUpdateClause : object {
    [CompilerGeneratedAttribute]
private List`1<SqlSetExpression> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<SqlSetExpression> <Keys>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private SqlTable <Table>k__BackingField;
    public List`1<SqlSetExpression> Items { get; }
    public List`1<SqlSetExpression> Keys { get; }
    [NullableAttribute("2")]
public SqlTable Table { get; public set; }
    public QueryElementType ElementType { get; }
    [CompilerGeneratedAttribute]
public List`1<SqlSetExpression> get_Items();
    [CompilerGeneratedAttribute]
public List`1<SqlSetExpression> get_Keys();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public SqlTable get_Table();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Table(SqlTable value);
    private sealed virtual override ISqlExpression LinqToDB.SqlQuery.ISqlExpressionWalkable.Walk(WalkOptions options, TContext context, Func`3<TContext, ISqlExpression, ISqlExpression> func);
    public sealed virtual QueryElementType get_ElementType();
    private sealed virtual override StringBuilder LinqToDB.SqlQuery.IQueryElement.ToString(StringBuilder sb, Dictionary`2<IQueryElement, IQueryElement> dic);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.SqlQuery.SqlUpdateStatement : SqlStatementWithQueryBase {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private SqlOutputClause <Output>k__BackingField;
    [NullableAttribute("2")]
private SqlUpdateClause _update;
    public QueryType QueryType { get; }
    public QueryElementType ElementType { get; }
    [NullableAttribute("2")]
public SqlOutputClause Output { get; public set; }
    public SqlUpdateClause Update { get; public set; }
    internal bool HasUpdate { get; }
    public SqlUpdateStatement(SelectQuery selectQuery);
    public virtual QueryType get_QueryType();
    public virtual QueryElementType get_ElementType();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public SqlOutputClause get_Output();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Output(SqlOutputClause value);
    public SqlUpdateClause get_Update();
    public void set_Update(SqlUpdateClause value);
    internal bool get_HasUpdate();
    public virtual StringBuilder ToString(StringBuilder sb, Dictionary`2<IQueryElement, IQueryElement> dic);
    public virtual ISqlExpression Walk(WalkOptions options, TContext context, Func`3<TContext, ISqlExpression, ISqlExpression> func);
    public virtual ISqlTableSource GetTableSource(ISqlTableSource table);
    public virtual bool IsDependedOn(SqlTable table);
    public void AfterSetAliases();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.SqlQuery.SqlValue : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    private DbDataType _valueType;
    private Nullable`1<int> _hashCode;
    [NullableAttribute("2")]
public object Value { get; }
    public DbDataType ValueType { get; public set; }
    private Type LinqToDB.SqlQuery.ISqlExpression.SystemType { get; }
    public int Precedence { get; }
    public bool CanBeNull { get; }
    public QueryElementType ElementType { get; }
    public SqlValue(Type systemType, object value);
    [NullableContextAttribute("2")]
public SqlValue(DbDataType valueType, object value);
    public SqlValue(object value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public object get_Value();
    public DbDataType get_ValueType();
    public void set_ValueType(DbDataType value);
    private sealed virtual override Type LinqToDB.SqlQuery.ISqlExpression.get_SystemType();
    public sealed virtual int get_Precedence();
    private sealed virtual override ISqlExpression LinqToDB.SqlQuery.ISqlExpressionWalkable.Walk(WalkOptions options, TContext context, Func`3<TContext, ISqlExpression, ISqlExpression> func);
    [NullableContextAttribute("2")]
private sealed virtual override bool System.IEquatable<LinqToDB.SqlQuery.ISqlExpression>.Equals(ISqlExpression other);
    public virtual int GetHashCode();
    public sealed virtual bool get_CanBeNull();
    public sealed virtual bool Equals(ISqlExpression other, Func`3<ISqlExpression, ISqlExpression, bool> comparer);
    public sealed virtual QueryElementType get_ElementType();
    private sealed virtual override StringBuilder LinqToDB.SqlQuery.IQueryElement.ToString(StringBuilder sb, Dictionary`2<IQueryElement, IQueryElement> dic);
    [NullableContextAttribute("2")]
public void Deconstruct(Object& value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.SqlQuery.SqlValuesTable : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ISqlExpression <Source>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Dictionary`2<MemberInfo, SqlField> <FieldsLookup>k__BackingField;
    private List`1<SqlField> _fields;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<Func`2<object, ISqlExpression>> <ValueBuilders>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IReadOnlyList`1<ISqlExpression[]> <Rows>k__BackingField;
    [NullableAttribute("2")]
private SqlField _all;
    [CompilerGeneratedAttribute]
private int <SourceID>k__BackingField;
    [NullableAttribute("2")]
internal ISqlExpression Source { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Dictionary`2<MemberInfo, SqlField> FieldsLookup { get; }
    public List`1<SqlField> Fields { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal List`1<Func`2<object, ISqlExpression>> ValueBuilders { get; internal set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal IReadOnlyList`1<ISqlExpression[]> Rows { get; }
    private SqlField LinqToDB.SqlQuery.ISqlTableSource.All { get; }
    public int SourceID { get; }
    private SqlTableType LinqToDB.SqlQuery.ISqlTableSource.SqlTableType { get; }
    private bool LinqToDB.SqlQuery.ISqlExpression.CanBeNull { get; }
    private int LinqToDB.SqlQuery.ISqlExpression.Precedence { get; }
    private Type LinqToDB.SqlQuery.ISqlExpression.SystemType { get; }
    private QueryElementType LinqToDB.SqlQuery.IQueryElement.ElementType { get; }
    internal SqlValuesTable(ISqlExpression source);
    internal SqlValuesTable(ISqlExpression source, List`1<Func`2<object, ISqlExpression>> valueBuilders, IEnumerable`1<SqlField> fields, IReadOnlyList`1<ISqlExpression[]> rows);
    internal SqlValuesTable(SqlField[] fields, MemberInfo[] members, IReadOnlyList`1<ISqlExpression[]> rows);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal ISqlExpression get_Source();
    [CompilerGeneratedAttribute]
internal Dictionary`2<MemberInfo, SqlField> get_FieldsLookup();
    public List`1<SqlField> get_Fields();
    [CompilerGeneratedAttribute]
internal List`1<Func`2<object, ISqlExpression>> get_ValueBuilders();
    [CompilerGeneratedAttribute]
internal void set_ValueBuilders(List`1<Func`2<object, ISqlExpression>> value);
    internal void Add(SqlField field, MemberInfo memberInfo, Func`2<object, ISqlExpression> valueBuilder);
    [CompilerGeneratedAttribute]
internal IReadOnlyList`1<ISqlExpression[]> get_Rows();
    internal IReadOnlyList`1<ISqlExpression[]> BuildRows(EvaluationContext context);
    private sealed virtual override SqlField LinqToDB.SqlQuery.ISqlTableSource.get_All();
    [CompilerGeneratedAttribute]
public sealed virtual int get_SourceID();
    private sealed virtual override SqlTableType LinqToDB.SqlQuery.ISqlTableSource.get_SqlTableType();
    private sealed virtual override IList`1<ISqlExpression> LinqToDB.SqlQuery.ISqlTableSource.GetKeys(bool allIfEmpty);
    private sealed virtual override bool LinqToDB.SqlQuery.ISqlExpression.get_CanBeNull();
    private sealed virtual override int LinqToDB.SqlQuery.ISqlExpression.get_Precedence();
    private sealed virtual override Type LinqToDB.SqlQuery.ISqlExpression.get_SystemType();
    private sealed virtual override bool LinqToDB.SqlQuery.ISqlExpression.Equals(ISqlExpression other, Func`3<ISqlExpression, ISqlExpression, bool> comparer);
    private sealed virtual override QueryElementType LinqToDB.SqlQuery.IQueryElement.get_ElementType();
    private sealed virtual override StringBuilder LinqToDB.SqlQuery.IQueryElement.ToString(StringBuilder sb, Dictionary`2<IQueryElement, IQueryElement> dic);
    [NullableContextAttribute("2")]
private sealed virtual override bool System.IEquatable<LinqToDB.SqlQuery.ISqlExpression>.Equals(ISqlExpression other);
    private sealed virtual override ISqlExpression LinqToDB.SqlQuery.ISqlExpressionWalkable.Walk(WalkOptions options, TContext context, Func`3<TContext, ISqlExpression, ISqlExpression> func);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class LinqToDB.SqlQuery.SqlWhereClause : ClauseBase`2<SqlWhereClause, Next> {
    [CompilerGeneratedAttribute]
private SqlSearchCondition <SearchCondition>k__BackingField;
    public SqlSearchCondition SearchCondition { get; internal set; }
    public bool IsEmpty { get; }
    protected SqlSearchCondition Search { get; }
    public QueryElementType ElementType { get; }
    internal SqlWhereClause(SelectQuery selectQuery);
    internal SqlWhereClause(SqlSearchCondition searchCondition);
    [CompilerGeneratedAttribute]
public SqlSearchCondition get_SearchCondition();
    [CompilerGeneratedAttribute]
internal void set_SearchCondition(SqlSearchCondition value);
    public bool get_IsEmpty();
    protected virtual SqlSearchCondition get_Search();
    protected virtual Next GetNext();
    private sealed virtual override ISqlExpression LinqToDB.SqlQuery.ISqlExpressionWalkable.Walk(WalkOptions options, TContext context, Func`3<TContext, ISqlExpression, ISqlExpression> func);
    public sealed virtual QueryElementType get_ElementType();
    private sealed virtual override StringBuilder LinqToDB.SqlQuery.IQueryElement.ToString(StringBuilder sb, Dictionary`2<IQueryElement, IQueryElement> dic);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.SqlQuery.SqlWithClause : object {
    [CompilerGeneratedAttribute]
private List`1<CteClause> <Clauses>k__BackingField;
    public QueryElementType ElementType { get; }
    public List`1<CteClause> Clauses { get; public set; }
    public sealed virtual QueryElementType get_ElementType();
    public sealed virtual StringBuilder ToString(StringBuilder sb, Dictionary`2<IQueryElement, IQueryElement> dic);
    [CompilerGeneratedAttribute]
public List`1<CteClause> get_Clauses();
    [CompilerGeneratedAttribute]
public void set_Clauses(List`1<CteClause> value);
    public ISqlTableSource GetTableSource(ISqlTableSource table);
    public void WalkQueries(TContext context, Func`3<TContext, SelectQuery, SelectQuery> func);
    public sealed virtual ISqlExpression Walk(WalkOptions options, TContext context, Func`3<TContext, ISqlExpression, ISqlExpression> func);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.SqlQuery.WalkOptions : object {
    public bool SkipColumnDeclaration;
    public bool ProcessParent;
    public static WalkOptions Default;
    public static WalkOptions WithSkipColumnDeclaration;
    public static WalkOptions WithProcessParent;
    private WalkOptions(bool skipColumnDeclaration, bool processParent);
    private static WalkOptions();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class LinqToDB.StringAggregateExtensions : object {
    [ExtensionAttribute]
[ExtensionAttribute("WITHIN GROUP ({order_by_clause})")]
[ExtensionAttribute("ORDER BY {order_item, ', '}")]
[ExtensionAttribute("{expr}")]
public static IAggregateFunctionOrdered`2<T, TR> OrderBy(IAggregateFunctionNotOrdered`2<T, TR> aggregate, Expression`1<Func`2<T, TKey>> expr);
    [ExtensionAttribute]
[ExtensionAttribute("WITHIN GROUP ({order_by_clause})")]
[ExtensionAttribute("ORDER BY {order_item, ', '}")]
[ExtensionAttribute("{aggregate}")]
public static IAggregateFunction`2<T, TR> OrderBy(IAggregateFunctionNotOrdered`2<T, TR> aggregate);
    [ExtensionAttribute]
[ExtensionAttribute("WITHIN GROUP ({order_by_clause})")]
[ExtensionAttribute("ORDER BY {order_item, ', '}")]
[ExtensionAttribute("{expr} DESC")]
public static IAggregateFunctionOrdered`2<T, TR> OrderByDescending(IAggregateFunctionNotOrdered`2<T, TR> aggregate, Expression`1<Func`2<T, TKey>> expr);
    [ExtensionAttribute]
[ExtensionAttribute("WITHIN GROUP ({order_by_clause})")]
[ExtensionAttribute("ORDER BY {order_item, ', '}")]
[ExtensionAttribute("{aggregate} DESC")]
public static IAggregateFunction`2<T, TR> OrderByDescending(IAggregateFunctionNotOrdered`2<T, TR> aggregate);
    [ExtensionAttribute]
[ExtensionAttribute("{expr}")]
public static IAggregateFunctionOrdered`2<T, TR> ThenBy(IAggregateFunctionOrdered`2<T, TR> aggregate, Expression`1<Func`2<T, TKey>> expr);
    [ExtensionAttribute]
[ExtensionAttribute("{expr} DESC")]
public static IAggregateFunctionOrdered`2<T, TR> ThenByDescending(IAggregateFunctionOrdered`2<T, TR> aggregate, Expression`1<Func`2<T, TKey>> expr);
    [ExtensionAttribute]
[ExtensionAttribute("Oracle", "WITHIN GROUP (ORDER BY ROWNUM)")]
[ExtensionAttribute("Oracle.Native", "WITHIN GROUP (ORDER BY ROWNUM)")]
[ExtensionAttribute("")]
public static TR ToValue(IAggregateFunction`2<T, TR> aggregate);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[PublicAPIAttribute]
public static class LinqToDB.TableExtensions : object {
    [ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
public static ITable`1<T> IsTemporary(ITable`1<T> table, bool isTemporary);
    [ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
public static ITable`1<T> IsTemporary(ITable`1<T> table);
    [ExtensionAttribute]
[LinqTunnelAttribute]
[PureAttribute]
public static ITable`1<T> TableOptions(ITable`1<T> table, TableOptions options);
    [ExtensionAttribute]
public static string GetTableName(ITable`1<T> table);
    [ExtensionAttribute]
internal static IDataProvider GetDataProvider(ITable`1<T> table);
    [ExtensionAttribute]
internal static DataConnection GetDataConnection(ITable`1<T> table);
    [ExtensionAttribute]
internal static bool TryGetDataConnection(ITable`1<T> table, DataConnection& dataConnection);
}
[FlagsAttribute]
[PublicAPIAttribute]
public enum LinqToDB.TableOptions : Enum {
    public int value__;
    public static TableOptions NotSet;
    public static TableOptions None;
    public static TableOptions CreateIfNotExists;
    public static TableOptions DropIfExists;
    public static TableOptions IsTemporary;
    public static TableOptions IsLocalTemporaryStructure;
    public static TableOptions IsGlobalTemporaryStructure;
    public static TableOptions IsLocalTemporaryData;
    public static TableOptions IsGlobalTemporaryData;
    public static TableOptions IsTransactionTemporaryData;
    public static TableOptions CheckExistence;
    public static TableOptions IsTemporaryOptionSet;
}
[FlagsAttribute]
public enum LinqToDB.TakeHints : Enum {
    public int value__;
    public static TakeHints Percent;
    public static TakeHints WithTies;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PublicAPIAttribute]
public class LinqToDB.TempTable`1 : object {
    private ITable`1<T> _table;
    [NullableAttribute("2")]
private EntityDescriptor _tableDescriptor;
    public long TotalCopied;
    private static ConcurrentDictionary`2<Type, Expression`1<Func`2<T, T>>> _setterDic;
    [NullableAttribute("2")]
public string ServerName { get; }
    [NullableAttribute("2")]
public string DatabaseName { get; }
    [NullableAttribute("2")]
public string SchemaName { get; }
    public string TableName { get; }
    public TableOptions TableOptions { get; }
    [NullableAttribute("2")]
public string TableID { get; }
    private Expression LinqToDB.Linq.IExpressionQuery<T>.Expression { get; }
    public IDataContext DataContext { get; }
    private string LinqToDB.Linq.IExpressionQuery.SqlText { get; }
    private Expression LinqToDB.Linq.IExpressionQuery.Expression { get; }
    private Expression System.Linq.IQueryable.Expression { get; }
    private Type System.Linq.IQueryable.ElementType { get; }
    private IQueryProvider System.Linq.IQueryable.Provider { get; }
    [NullableContextAttribute("2")]
public TempTable`1(IDataContext db, string tableName, string databaseName, string schemaName, string serverName, TableOptions tableOptions);
    [NullableContextAttribute("2")]
public TempTable`1(IDataContext db, IEnumerable`1<T> items, BulkCopyOptions options, string tableName, string databaseName, string schemaName, string serverName, TableOptions tableOptions);
    [NullableContextAttribute("2")]
internal TempTable`1(IDataContext db, EntityDescriptor tableDescriptor, IEnumerable`1<T> items, BulkCopyOptions options, string tableName, string databaseName, string schemaName, string serverName, TableOptions tableOptions);
    [NullableContextAttribute("2")]
public TempTable`1(IDataContext db, string tableName, IEnumerable`1<T> items, BulkCopyOptions options, string databaseName, string schemaName, string serverName, TableOptions tableOptions);
    [NullableContextAttribute("2")]
public TempTable`1(IDataContext db, IQueryable`1<T> items, string tableName, string databaseName, string schemaName, Action`1<ITable`1<T>> action, string serverName, TableOptions tableOptions);
    [NullableContextAttribute("2")]
internal TempTable`1(IDataContext db, EntityDescriptor tableDescriptor, IQueryable`1<T> items, string tableName, string databaseName, string schemaName, Action`1<ITable`1<T>> action, string serverName, TableOptions tableOptions);
    [NullableContextAttribute("2")]
public TempTable`1(IDataContext db, string tableName, IQueryable`1<T> items, string databaseName, string schemaName, Action`1<ITable`1<T>> action, string serverName, TableOptions tableOptions);
    protected TempTable`1(ITable`1<T> table, EntityDescriptor tableDescriptor);
    private static TempTable`1();
    [NullableContextAttribute("2")]
public static Task`1<TempTable`1<T>> CreateAsync(IDataContext db, string tableName, string databaseName, string schemaName, string serverName, TableOptions tableOptions, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("LinqToDB.TempTable`1/<CreateAsync>d__12")]
internal static Task`1<TempTable`1<T>> CreateAsync(IDataContext db, EntityDescriptor tableDescriptor, string tableName, string databaseName, string schemaName, string serverName, TableOptions tableOptions, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
public static Task`1<TempTable`1<T>> CreateAsync(IDataContext db, IEnumerable`1<T> items, BulkCopyOptions options, string tableName, string databaseName, string schemaName, string serverName, TableOptions tableOptions, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
public static Task`1<TempTable`1<T>> CreateAsync(IDataContext db, string tableName, IEnumerable`1<T> items, BulkCopyOptions options, string databaseName, string schemaName, string serverName, TableOptions tableOptions, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("LinqToDB.TempTable`1/<CreateAsync>d__15")]
internal static Task`1<TempTable`1<T>> CreateAsync(IDataContext db, EntityDescriptor tableDescriptor, string tableName, IEnumerable`1<T> items, BulkCopyOptions options, string databaseName, string schemaName, string serverName, TableOptions tableOptions, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
public static Task`1<TempTable`1<T>> CreateAsync(IDataContext db, IQueryable`1<T> items, string tableName, string databaseName, string schemaName, Func`2<ITable`1<T>, Task> action, string serverName, TableOptions tableOptions, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("LinqToDB.TempTable`1/<CreateAsync>d__17")]
internal static Task`1<TempTable`1<T>> CreateAsync(IDataContext db, EntityDescriptor tableDescriptor, IQueryable`1<T> items, string tableName, string databaseName, string schemaName, Func`2<ITable`1<T>, Task> action, string serverName, TableOptions tableOptions, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
public static Task`1<TempTable`1<T>> CreateAsync(IDataContext db, string tableName, IQueryable`1<T> items, string databaseName, string schemaName, Func`2<ITable`1<T>, Task> action, string serverName, TableOptions tableOptions, CancellationToken cancellationToken);
    public long Copy(IEnumerable`1<T> items, BulkCopyOptions options);
    [AsyncStateMachineAttribute("LinqToDB.TempTable`1/<CopyAsync>d__20")]
public Task`1<long> CopyAsync(IEnumerable`1<T> items, BulkCopyOptions options, CancellationToken cancellationToken);
    public long Insert(IQueryable`1<T> items);
    [AsyncStateMachineAttribute("LinqToDB.TempTable`1/<InsertAsync>d__23")]
public Task`1<long> InsertAsync(IQueryable`1<T> items, CancellationToken cancellationToken);
    private Expression`1<Func`2<T, T>> GenerateInsertSetter(IQueryable`1<T> items);
    [NullableContextAttribute("2")]
public sealed virtual string get_ServerName();
    [NullableContextAttribute("2")]
public sealed virtual string get_DatabaseName();
    [NullableContextAttribute("2")]
public sealed virtual string get_SchemaName();
    public sealed virtual string get_TableName();
    public sealed virtual TableOptions get_TableOptions();
    [NullableContextAttribute("2")]
public sealed virtual string get_TableID();
    private sealed virtual override ITable`1<T> LinqToDB.ITableMutable<T>.ChangeServerName(string serverName);
    private sealed virtual override ITable`1<T> LinqToDB.ITableMutable<T>.ChangeDatabaseName(string databaseName);
    private sealed virtual override ITable`1<T> LinqToDB.ITableMutable<T>.ChangeSchemaName(string schemaName);
    private sealed virtual override ITable`1<T> LinqToDB.ITableMutable<T>.ChangeTableName(string tableName);
    private sealed virtual override ITable`1<T> LinqToDB.ITableMutable<T>.ChangeTableOptions(TableOptions options);
    private sealed virtual override ITable`1<T> LinqToDB.ITableMutable<T>.ChangeTableID(string tableID);
    private sealed virtual override IQueryable System.Linq.IQueryProvider.CreateQuery(Expression expression);
    private sealed virtual override IQueryable`1<TElement> System.Linq.IQueryProvider.CreateQuery(Expression expression);
    private sealed virtual override object System.Linq.IQueryProvider.Execute(Expression expression);
    private sealed virtual override TResult System.Linq.IQueryProvider.Execute(Expression expression);
    private sealed virtual override Task`1<TResult> LinqToDB.Async.IQueryProviderAsync.ExecuteAsync(Expression expression, CancellationToken cancellationToken);
    private sealed virtual override Task`1<IAsyncEnumerable`1<TResult>> LinqToDB.Async.IQueryProviderAsync.ExecuteAsyncEnumerable(Expression expression, CancellationToken cancellationToken);
    private sealed virtual override Expression LinqToDB.Linq.IExpressionQuery<T>.get_Expression();
    public sealed virtual IDataContext get_DataContext();
    private sealed virtual override string LinqToDB.Linq.IExpressionQuery.get_SqlText();
    private sealed virtual override Expression LinqToDB.Linq.IExpressionQuery.get_Expression();
    private sealed virtual override Expression System.Linq.IQueryable.get_Expression();
    private sealed virtual override Type System.Linq.IQueryable.get_ElementType();
    private sealed virtual override IQueryProvider System.Linq.IQueryable.get_Provider();
    private sealed virtual override IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual void Dispose();
    public virtual ValueTask DisposeAsync();
}
[PublicAPIAttribute]
public abstract class LinqToDB.Tools.ActivityBase : object {
    public abstract virtual void Dispose();
    public virtual ValueTask DisposeAsync();
}
public enum LinqToDB.Tools.ActivityID : Enum {
    public int value__;
    public static ActivityID QueryProviderExecuteT;
    public static ActivityID QueryProviderExecute;
    public static ActivityID QueryProviderGetEnumeratorT;
    public static ActivityID QueryProviderGetEnumerator;
    public static ActivityID GetQueryTotal;
    public static ActivityID GetQueryFind;
    public static ActivityID GetQueryFindExpose;
    public static ActivityID GetQueryFindFind;
    public static ActivityID GetQueryCreate;
    public static ActivityID Build;
    public static ActivityID BuildSequence;
    public static ActivityID BuildSequenceCanBuild;
    public static ActivityID BuildSequenceBuild;
    public static ActivityID ReorderBuilders;
    public static ActivityID BuildQuery;
    public static ActivityID FinalizeQuery;
    public static ActivityID GetIEnumerable;
    public static ActivityID ExecuteQuery;
    public static ActivityID ExecuteQueryAsync;
    public static ActivityID ExecuteElement;
    public static ActivityID ExecuteElementAsync;
    public static ActivityID ExecuteScalar;
    public static ActivityID ExecuteScalarAsync;
    public static ActivityID ExecuteNonQuery;
    public static ActivityID ExecuteNonQueryAsync;
    public static ActivityID ExecuteNonQuery2;
    public static ActivityID ExecuteNonQuery2Async;
    public static ActivityID ExecuteScalarAlternative;
    public static ActivityID ExecuteScalarAlternativeAsync;
    public static ActivityID CreateTable;
    public static ActivityID CreateTableAsync;
    public static ActivityID DropTable;
    public static ActivityID DropTableAsync;
    public static ActivityID DeleteObject;
    public static ActivityID DeleteObjectAsync;
    public static ActivityID InsertObject;
    public static ActivityID InsertObjectAsync;
    public static ActivityID InsertOrReplaceObject;
    public static ActivityID InsertOrReplaceObjectAsync;
    public static ActivityID InsertWithIdentityObject;
    public static ActivityID InsertWithIdentityObjectAsync;
    public static ActivityID UpdateObject;
    public static ActivityID UpdateObjectAsync;
    public static ActivityID BulkCopy;
    public static ActivityID BulkCopyAsync;
    public static ActivityID BuildSql;
    public static ActivityID CommandInfoExecute;
    public static ActivityID CommandInfoExecuteT;
    public static ActivityID CommandInfoExecuteCustom;
    public static ActivityID CommandInfoExecuteAsync;
    public static ActivityID CommandInfoExecuteAsyncT;
    public static ActivityID ConnectionOpen;
    public static ActivityID ConnectionOpenAsync;
    public static ActivityID ConnectionClose;
    public static ActivityID ConnectionCloseAsync;
    public static ActivityID ConnectionDispose;
    public static ActivityID ConnectionDisposeAsync;
    public static ActivityID ConnectionBeginTransaction;
    public static ActivityID ConnectionBeginTransactionAsync;
    public static ActivityID TransactionCommit;
    public static ActivityID TransactionCommitAsync;
    public static ActivityID TransactionRollback;
    public static ActivityID TransactionRollbackAsync;
    public static ActivityID TransactionDispose;
    public static ActivityID TransactionDisposeAsync;
    public static ActivityID CommandExecuteScalar;
    public static ActivityID CommandExecuteScalarAsync;
    public static ActivityID CommandExecuteReader;
    public static ActivityID CommandExecuteReaderAsync;
    public static ActivityID CommandExecuteNonQuery;
    public static ActivityID CommandExecuteNonQueryAsync;
    public static ActivityID CommandInterceptorCommandInitialized;
    public static ActivityID CommandInterceptorExecuteScalar;
    public static ActivityID CommandInterceptorExecuteScalarAsync;
    public static ActivityID CommandInterceptorExecuteNonQuery;
    public static ActivityID CommandInterceptorExecuteNonQueryAsync;
    public static ActivityID CommandInterceptorExecuteReader;
    public static ActivityID CommandInterceptorExecuteReaderAsync;
    public static ActivityID CommandInterceptorAfterExecuteReader;
    public static ActivityID CommandInterceptorBeforeReaderDispose;
    public static ActivityID CommandInterceptorBeforeReaderDisposeAsync;
    public static ActivityID ConnectionInterceptorConnectionOpening;
    public static ActivityID ConnectionInterceptorConnectionOpeningAsync;
    public static ActivityID ConnectionInterceptorConnectionOpened;
    public static ActivityID ConnectionInterceptorConnectionOpenedAsync;
    public static ActivityID DataContextInterceptorOnClosing;
    public static ActivityID DataContextInterceptorOnClosingAsync;
    public static ActivityID DataContextInterceptorOnClosed;
    public static ActivityID DataContextInterceptorOnClosedAsync;
    public static ActivityID EntityServiceInterceptorEntityCreated;
    public static ActivityID UnwrapDataObjectInterceptorUnwrapConnection;
    public static ActivityID UnwrapDataObjectInterceptorUnwrapTransaction;
    public static ActivityID UnwrapDataObjectInterceptorUnwrapCommand;
    public static ActivityID UnwrapDataObjectInterceptorUnwrapDataReader;
    public static ActivityID GetSqlText;
    public static ActivityID Materialization;
    public static ActivityID OnTraceInternal;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[PublicAPIAttribute]
public static class LinqToDB.Tools.ActivityService : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private static Func`2<ActivityID, IActivity> <Start>k__BackingField;
    private static Func`2<ActivityID, IActivity> _factory;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static Func`2<ActivityID, IActivity> Start { get; private set; }
    private static ActivityService();
    [CompilerGeneratedAttribute]
internal static Func`2<ActivityID, IActivity> get_Start();
    [CompilerGeneratedAttribute]
private static void set_Start(Func`2<ActivityID, IActivity> value);
    private static IActivity StartImpl(ActivityID activityID);
    internal static AsyncDisposableWrapper StartAndConfigureAwait(ActivityID activityID);
    public static void AddFactory(Func`2<ActivityID, IActivity> factory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class LinqToDB.Tools.DataExtensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<T> RetrieveIdentity(IEnumerable`1<T> source, DataConnection context, bool useSequenceName, bool useIdentity);
    private static void GetDefaultIdentityImpl(DataConnection context, IList`1<T> sourceList, EntityDescriptor entityDescriptor, ColumnDescriptor column, ISqlBuilder sqlBuilder);
    private static void GetIdentityValues(IList`1<T> sourceList, ColumnDescriptor column, object last, object step);
    private static void GetColumnSequenceValues(DataConnection context, IList`1<T> sourceList, ColumnDescriptor column, ISqlBuilder sqlBuilder, string sequenceName);
}
[PublicAPIAttribute]
public interface LinqToDB.Tools.IActivity {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[PublicAPIAttribute]
public static class LinqToDB.Tools.SqlExtensions : object {
    [ExtensionAttribute]
[ExpressionMethodAttribute("InImpl1")]
public static bool In(T value, IEnumerable`1<T> sequence);
    private static Expression`1<Func`3<T, IEnumerable`1<T>, bool>> InImpl1();
    [ExtensionAttribute]
[ExpressionMethodAttribute("InImpl2")]
public static bool In(T value, IQueryable`1<T> sequence);
    private static Expression`1<Func`3<T, IQueryable`1<T>, bool>> InImpl2();
    [ExtensionAttribute]
[ExpressionMethodAttribute("InImpl3")]
public static bool In(T value, T[] sequence);
    private static Expression`1<Func`3<T, T[], bool>> InImpl3();
    [ExtensionAttribute]
[ExpressionMethodAttribute("InImpl4")]
public static bool In(T value, T cmp1, T cmp2);
    private static Expression`1<Func`4<T, T, T, bool>> InImpl4();
    [ExtensionAttribute]
[ExpressionMethodAttribute("InImpl5")]
public static bool In(T value, T cmp1, T cmp2, T cmp3);
    private static Expression`1<Func`5<T, T, T, T, bool>> InImpl5();
    [ExtensionAttribute]
[ExpressionMethodAttribute("NotInImpl1")]
public static bool NotIn(T value, IEnumerable`1<T> sequence);
    private static Expression`1<Func`3<T, IEnumerable`1<T>, bool>> NotInImpl1();
    [ExtensionAttribute]
[ExpressionMethodAttribute("NotInImpl2")]
public static bool NotIn(T value, IQueryable`1<T> sequence);
    private static Expression`1<Func`3<T, IQueryable`1<T>, bool>> NotInImpl2();
    [ExtensionAttribute]
[ExpressionMethodAttribute("NotInImpl3")]
public static bool NotIn(T value, T[] sequence);
    private static Expression`1<Func`3<T, T[], bool>> NotInImpl3();
    [ExtensionAttribute]
[ExpressionMethodAttribute("NotInImpl4")]
public static bool NotIn(T value, T cmp1, T cmp2);
    private static Expression`1<Func`4<T, T, T, bool>> NotInImpl4();
    [ExtensionAttribute]
[ExpressionMethodAttribute("NotInImpl5")]
public static bool NotIn(T value, T cmp1, T cmp2, T cmp3);
    private static Expression`1<Func`5<T, T, T, T, bool>> NotInImpl5();
}
public class LinqToDB.UpdateColumnFilter`1 : MulticastDelegate {
    public UpdateColumnFilter`1(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual bool Invoke(T entity, ColumnDescriptor column);
    public virtual IAsyncResult BeginInvoke(T entity, ColumnDescriptor column, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class LinqToDB.UpdateOutput`1 : object {
    [CompilerGeneratedAttribute]
private T <Deleted>k__BackingField;
    [CompilerGeneratedAttribute]
private T <Inserted>k__BackingField;
    public T Deleted { get; public set; }
    public T Inserted { get; public set; }
    [CompilerGeneratedAttribute]
public T get_Deleted();
    [CompilerGeneratedAttribute]
public void set_Deleted(T value);
    [CompilerGeneratedAttribute]
public T get_Inserted();
    [CompilerGeneratedAttribute]
public void set_Inserted(T value);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DataContractAttribute]
public class System.Data.Linq.Binary : object {
    [NullableAttribute("1")]
[DataMemberAttribute]
private Byte[] _bytes;
    private Nullable`1<int> _hashCode;
    public int Length { get; }
    public Binary(Byte[] value);
    [NullableContextAttribute("1")]
public Byte[] ToArray();
    public int get_Length();
    [NullableContextAttribute("1")]
public static Binary op_Implicit(Byte[] value);
    public sealed virtual bool Equals(Binary other);
    public static bool op_Equality(Binary binary1, Binary binary2);
    public static bool op_Inequality(Binary binary1, Binary binary2);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [NullableContextAttribute("1")]
public virtual string ToString();
    private bool EqualsTo(Binary binary);
    private void ComputeHash();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("6143")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.ExperimentalAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <DiagnosticId>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <UrlFormat>k__BackingField;
    public string DiagnosticId { get; }
    [NullableAttribute("2")]
public string UrlFormat { get; public set; }
    public ExperimentalAttribute(string diagnosticId);
    [CompilerGeneratedAttribute]
public string get_DiagnosticId();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_UrlFormat();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_UrlFormat(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("192")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public String[] Members { get; }
    public MemberNotNullAttribute(string member);
    public MemberNotNullAttribute(String[] members);
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("192")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public bool ReturnValue { get; }
    public String[] Members { get; }
    public MemberNotNullWhenAttribute(bool returnValue, string member);
    public MemberNotNullWhenAttribute(bool returnValue, String[] members);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("32")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.SetsRequiredMembersAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2432")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.StringSyntaxAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Syntax>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Object[] <Arguments>k__BackingField;
    public static string CompositeFormat;
    public static string DateOnlyFormat;
    public static string DateTimeFormat;
    public static string EnumFormat;
    public static string GuidFormat;
    public static string Json;
    public static string NumericFormat;
    public static string Regex;
    public static string TimeOnlyFormat;
    public static string TimeSpanFormat;
    public static string Uri;
    public static string Xml;
    public string Syntax { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Object[] Arguments { get; }
    public StringSyntaxAttribute(string syntax);
    public StringSyntaxAttribute(string syntax, Object[] arguments);
    [CompilerGeneratedAttribute]
public string get_Syntax();
    [CompilerGeneratedAttribute]
public Object[] get_Arguments();
}
[AttributeUsageAttribute("2240")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.UnscopedRefAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Reflection.NullabilityInfo : object {
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private NullabilityState <ReadState>k__BackingField;
    [CompilerGeneratedAttribute]
private NullabilityState <WriteState>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private NullabilityInfo <ElementType>k__BackingField;
    [CompilerGeneratedAttribute]
private NullabilityInfo[] <GenericTypeArguments>k__BackingField;
    public Type Type { get; }
    public NullabilityState ReadState { get; internal set; }
    public NullabilityState WriteState { get; internal set; }
    [NullableAttribute("2")]
public NullabilityInfo ElementType { get; }
    public NullabilityInfo[] GenericTypeArguments { get; }
    internal NullabilityInfo(Type type, NullabilityState readState, NullabilityState writeState, NullabilityInfo elementType, NullabilityInfo[] typeArguments);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public NullabilityState get_ReadState();
    [CompilerGeneratedAttribute]
internal void set_ReadState(NullabilityState value);
    [CompilerGeneratedAttribute]
public NullabilityState get_WriteState();
    [CompilerGeneratedAttribute]
internal void set_WriteState(NullabilityState value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public NullabilityInfo get_ElementType();
    [CompilerGeneratedAttribute]
public NullabilityInfo[] get_GenericTypeArguments();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Reflection.NullabilityInfoContext : object {
    private static string CompilerServicesNameSpace;
    private Dictionary`2<Module, NotAnnotatedStatus> _publicOnlyModules;
    private Dictionary`2<MemberInfo, NullabilityState> _context;
    [CompilerGeneratedAttribute]
private static bool <IsSupported>k__BackingField;
    internal static bool IsSupported { get; }
    private static NullabilityInfoContext();
    [CompilerGeneratedAttribute]
internal static bool get_IsSupported();
    [NullableContextAttribute("2")]
private Nullable`1<NullabilityState> GetNullableContext(MemberInfo memberInfo);
    public NullabilityInfo Create(ParameterInfo parameterInfo);
    private void CheckParameterMetadataType(ParameterInfo parameter, NullabilityInfo nullability);
    private static ParameterInfo GetMetaParameter(MethodBase metaMethod, ParameterInfo parameter);
    private static MethodInfo GetMethodMetadataDefinition(MethodInfo method);
    private static void CheckNullabilityAttributes(NullabilityInfo nullability, IList`1<CustomAttributeData> attributes);
    public NullabilityInfo Create(PropertyInfo propertyInfo);
    private bool IsPrivateOrInternalMethodAndAnnotationDisabled(MethodBase method);
    public NullabilityInfo Create(EventInfo eventInfo);
    public NullabilityInfo Create(FieldInfo fieldInfo);
    private static void EnsureIsSupported();
    private bool IsPrivateOrInternalFieldAndAnnotationDisabled(FieldInfo fieldInfo);
    private bool IsPublicOnly(bool isPrivate, bool isFamilyAndAssembly, bool isAssembly, Module module);
    private static NotAnnotatedStatus PopulateAnnotationInfo(IList`1<CustomAttributeData> customAttributes);
    private NullabilityInfo GetNullabilityInfo(MemberInfo memberInfo, Type type, NullableAttributeStateParser parser);
    private NullabilityInfo GetNullabilityInfo(MemberInfo memberInfo, Type type, NullableAttributeStateParser parser, Int32& index);
    private static NullableAttributeStateParser CreateParser(IList`1<CustomAttributeData> customAttributes);
    private void TryLoadGenericMetaTypeNullability(MemberInfo memberInfo, NullabilityInfo nullability);
    private static MemberInfo GetMemberMetadataDefinition(MemberInfo member);
    private static Type GetPropertyMetaType(PropertyInfo property);
    private void CheckGenericParameters(NullabilityInfo nullability, MemberInfo metaMember, Type metaType, Type reflectedType);
    private bool TryUpdateGenericParameterNullability(NullabilityInfo nullability, Type genericParameter, Type reflectedType);
    private bool TryUpdateGenericTypeParameterNullabilityFromReflectedType(NullabilityInfo nullability, Type genericParameter, Type context, Type reflectedType);
    private static bool TryPopulateNullabilityInfo(NullabilityInfo nullability, NullableAttributeStateParser parser, Int32& index);
    [NullableContextAttribute("2")]
private static NullabilityState TranslateByte(object value);
    private static NullabilityState TranslateByte(byte b);
    private static bool IsValueTypeOrValueTypeByRef(Type type);
    [CompilerGeneratedAttribute]
internal static int <TryUpdateGenericTypeParameterNullabilityFromReflectedType>g__CountNullabilityStates|29_0(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class System.Reflection.NullabilityInfoExtensions : object {
    private static ConcurrentDictionary`2<ParameterInfo, NullabilityInfo> parameterCache;
    private static ConcurrentDictionary`2<PropertyInfo, NullabilityInfo> propertyCache;
    private static ConcurrentDictionary`2<EventInfo, NullabilityInfo> eventCache;
    private static ConcurrentDictionary`2<FieldInfo, NullabilityInfo> fieldCache;
    private static NullabilityInfoExtensions();
    [ExtensionAttribute]
internal static NullabilityInfo GetNullabilityInfo(MemberInfo info);
    [ExtensionAttribute]
internal static NullabilityState GetNullability(MemberInfo info);
    [ExtensionAttribute]
internal static bool IsNullable(MemberInfo info);
    [ExtensionAttribute]
internal static NullabilityInfo GetNullabilityInfo(FieldInfo info);
    [ExtensionAttribute]
internal static NullabilityState GetNullability(FieldInfo info);
    [ExtensionAttribute]
internal static bool IsNullable(FieldInfo info);
    [ExtensionAttribute]
internal static NullabilityInfo GetNullabilityInfo(EventInfo info);
    [ExtensionAttribute]
internal static NullabilityState GetNullability(EventInfo info);
    [ExtensionAttribute]
internal static bool IsNullable(EventInfo info);
    [ExtensionAttribute]
internal static NullabilityInfo GetNullabilityInfo(PropertyInfo info);
    [ExtensionAttribute]
internal static NullabilityState GetNullability(PropertyInfo info);
    [ExtensionAttribute]
internal static bool IsNullable(PropertyInfo info);
    [ExtensionAttribute]
internal static NullabilityInfo GetNullabilityInfo(ParameterInfo info);
    [ExtensionAttribute]
internal static NullabilityState GetNullability(ParameterInfo info);
    [ExtensionAttribute]
internal static bool IsNullable(ParameterInfo info);
    private static NullabilityState GetReadOrWriteState(NullabilityInfo nullability);
    private static NullabilityState GetKnownState(string name, NullabilityInfo nullability);
    private static bool IsNullable(string name, NullabilityInfo nullability);
    internal static MemberInfo GetMemberWithSameMetadataDefinitionAs(Type type, MemberInfo member);
    [ExtensionAttribute]
private static bool HasSameMetadataDefinitionAs(MemberInfo target, MemberInfo other);
    [ExtensionAttribute]
internal static bool IsGenericMethodParameter(Type target);
}
internal enum System.Reflection.NullabilityState : Enum {
    public int value__;
    public static NullabilityState Unknown;
    public static NullabilityState NotNull;
    public static NullabilityState Nullable;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2048")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Runtime.CompilerServices.CallerArgumentExpressionAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public CallerArgumentExpressionAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("1036")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Runtime.CompilerServices.CollectionBuilderAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <BuilderType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MethodName>k__BackingField;
    public Type BuilderType { get; }
    public string MethodName { get; }
    public CollectionBuilderAttribute(Type builderType, string methodName);
    [CompilerGeneratedAttribute]
public Type get_BuilderType();
    [CompilerGeneratedAttribute]
public string get_MethodName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("32767")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <FeatureName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsOptional>k__BackingField;
    public static string RefStructs;
    public static string RequiredMembers;
    public string FeatureName { get; }
    public bool IsOptional { get; public set; }
    public CompilerFeatureRequiredAttribute(string featureName);
    [CompilerGeneratedAttribute]
public string get_FeatureName();
    [CompilerGeneratedAttribute]
public bool get_IsOptional();
    [CompilerGeneratedAttribute]
public void set_IsOptional(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2048")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Arguments>k__BackingField;
    public String[] Arguments { get; }
    public InterpolatedStringHandlerArgumentAttribute(string argument);
    public InterpolatedStringHandlerArgumentAttribute(String[] arguments);
    [CompilerGeneratedAttribute]
public String[] get_Arguments();
}
[AttributeUsageAttribute("12")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Runtime.CompilerServices.InterpolatedStringHandlerAttribute : Attribute {
}
[EditorBrowsableAttribute("1")]
[ExcludeFromCodeCoverageAttribute]
internal static class System.Runtime.CompilerServices.IsExternalInit : object {
}
[AttributeUsageAttribute("64")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Runtime.CompilerServices.ModuleInitializerAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[AttributeUsageAttribute("396")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Runtime.CompilerServices.RequiredMemberAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
[EditorBrowsableAttribute("1")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Runtime.CompilerServices.RequiresLocationAttribute : Attribute {
}
[AttributeUsageAttribute("1774")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Runtime.CompilerServices.SkipLocalsInitAttribute : Attribute {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("6143")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Runtime.Versioning.RequiresPreviewFeaturesAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public string Message { get; }
    public string Url { get; public set; }
    public RequiresPreviewFeaturesAttribute(string message);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class System.Text.StringBuilderExtensions : object {
    [ExtensionAttribute]
public static StringBuilder Append(StringBuilder sb, IFormatProvider provider, FormattableString formattableString);
    [ExtensionAttribute]
public static StringBuilder AppendLine(StringBuilder sb, IFormatProvider provider, FormattableString formattableString);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.Threading.Tasks.TaskEx : object {
    public static Task CompletedTask { get; }
    public static Task get_CompletedTask();
}
