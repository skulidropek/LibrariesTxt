public class LinqKit.Core.ExpandableQuery`1 : object {
    private IQueryProvider _provider;
    private IQueryable`1<T> _inner;
    internal IQueryable`1<T> InnerQuery { get; }
    private Expression System.Linq.IQueryable.Expression { get; }
    private Type System.Linq.IQueryable.ElementType { get; }
    private IQueryProvider System.Linq.IQueryable.Provider { get; }
    internal ExpandableQuery`1(IQueryable`1<T> inner, Func`2<Expression, Expression> queryOptimizer);
    internal IQueryable`1<T> get_InnerQuery();
    private sealed virtual override Expression System.Linq.IQueryable.get_Expression();
    private sealed virtual override Type System.Linq.IQueryable.get_ElementType();
    private sealed virtual override IQueryProvider System.Linq.IQueryable.get_Provider();
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual string ToString();
}
internal class LinqKit.Core.ExpandableQueryProvider`1 : object {
    private ExpandableQuery`1<T> _query;
    private Func`2<Expression, Expression> _queryOptimizer;
    internal ExpandableQueryProvider`1(ExpandableQuery`1<T> query, Func`2<Expression, Expression> queryOptimizer);
    private sealed virtual override IQueryable`1<TElement> System.Linq.IQueryProvider.CreateQuery(Expression expression);
    private sealed virtual override IQueryable System.Linq.IQueryProvider.CreateQuery(Expression expression);
    private sealed virtual override TResult System.Linq.IQueryProvider.Execute(Expression expression);
    private sealed virtual override object System.Linq.IQueryProvider.Execute(Expression expression);
}
[ExtensionAttribute]
public static class LinqKit.Core.Extensions : object {
    [ExtensionAttribute]
public static IQueryable`1<T> AsExpandable(IQueryable`1<T> query);
    [ExtensionAttribute]
public static IQueryable`1<T> AsExpandable(IQueryable`1<T> query, Func`2<Expression, Expression> queryOptimizer);
}
[AttributeUsageAttribute("192")]
public class LinqKit.ExpandableAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <MethodName>k__BackingField;
    public string MethodName { get; public set; }
    public ExpandableAttribute(string methodName);
    [CompilerGeneratedAttribute]
public string get_MethodName();
    [CompilerGeneratedAttribute]
public void set_MethodName(string value);
}
internal class LinqKit.ExpressionExpander : ExpressionVisitor {
    private Dictionary`2<MemberInfo, LambdaExpression> _expandableCache;
    protected LambdaExpression EvaluateTarget(Expression target);
    protected virtual Expression VisitInvocation(InvocationExpression iv);
    protected bool GetExpandLambda(MemberInfo memberInfo, LambdaExpression& expandLambda);
    protected virtual Expression VisitMethodCall(MethodCallExpression m);
    protected virtual Expression VisitMember(MemberExpression m);
    private Expression TransformExpr(MemberExpression input);
    private Expression TryVisitExpressionFunc(MemberExpression input, FieldInfo field);
}
internal class LinqKit.ExpressionReplacer : ExpressionVisitor {
    private IDictionary`2<Expression, Expression> _replaceMap;
    public ExpressionReplacer(IDictionary`2<Expression, Expression> replaceMap);
    public virtual Expression Visit(Expression exp);
    public static Expression Replace(Expression expr, Expression fromExpr, Expression toExpr);
    public static Expression Replace(Expression expr, IDictionary`2<Expression, Expression> replaceMap);
    public static Expression GetBody(LambdaExpression lambda, Expression[] toExpressions);
    public static Expression GetBody(LambdaExpression lambda, ReadOnlyCollection`1<Expression> toExpressions);
}
public class LinqKit.ExpressionStarter`1 : object {
    private Expression`1<Func`2<T, bool>> _predicate;
    [CompilerGeneratedAttribute]
private Expression`1<Func`2<T, bool>> <DefaultExpression>k__BackingField;
    private Expression`1<Func`2<T, bool>> Predicate { get; }
    public bool IsStarted { get; }
    public bool UseDefaultExpression { get; }
    public Expression`1<Func`2<T, bool>> DefaultExpression { get; public set; }
    public Expression Body { get; }
    public ExpressionType NodeType { get; }
    public ReadOnlyCollection`1<ParameterExpression> Parameters { get; }
    public Type Type { get; }
    internal ExpressionStarter`1(bool defaultExpression);
    internal ExpressionStarter`1(Expression`1<Func`2<T, bool>> exp);
    private Expression`1<Func`2<T, bool>> get_Predicate();
    public bool get_IsStarted();
    public bool get_UseDefaultExpression();
    [CompilerGeneratedAttribute]
public Expression`1<Func`2<T, bool>> get_DefaultExpression();
    [CompilerGeneratedAttribute]
public void set_DefaultExpression(Expression`1<Func`2<T, bool>> value);
    public Expression`1<Func`2<T, bool>> Start(Expression`1<Func`2<T, bool>> exp);
    public Expression`1<Func`2<T, bool>> Or(Expression`1<Func`2<T, bool>> expr2);
    public Expression`1<Func`2<T, bool>> And(Expression`1<Func`2<T, bool>> expr2);
    public Expression`1<Func`2<T, bool>> Not();
    public virtual string ToString();
    public static Expression`1<Func`2<T, bool>> op_Implicit(ExpressionStarter`1<T> right);
    public static Func`2<T, bool> op_Implicit(ExpressionStarter`1<T> right);
    public static ExpressionStarter`1<T> op_Implicit(Expression`1<Func`2<T, bool>> right);
    public Expression get_Body();
    public ExpressionType get_NodeType();
    public ReadOnlyCollection`1<ParameterExpression> get_Parameters();
    public Type get_Type();
}
[ExtensionAttribute]
public static class LinqKit.ExtensionsCore : object {
    [ExtensionAttribute]
public static Expression`1<TDelegate> Expand(Expression`1<TDelegate> expr);
    [ExtensionAttribute]
public static Expression Expand(ExpressionStarter`1<TDelegate> expr);
    [ExtensionAttribute]
public static Expression Expand(Expression expr);
    [ExtensionAttribute]
public static TResult Invoke(Expression`1<Func`1<TResult>> expr);
    [ExtensionAttribute]
public static TResult Invoke(Expression`1<Func`2<T1, TResult>> expr, T1 arg1);
    [ExtensionAttribute]
public static TResult Invoke(Expression`1<Func`3<T1, T2, TResult>> expr, T1 arg1, T2 arg2);
    [ExtensionAttribute]
public static TResult Invoke(Expression`1<Func`4<T1, T2, T3, TResult>> expr, T1 arg1, T2 arg2, T3 arg3);
    [ExtensionAttribute]
public static TResult Invoke(Expression`1<Func`5<T1, T2, T3, T4, TResult>> expr, T1 arg1, T2 arg2, T3 arg3, T4 arg4);
    [ExtensionAttribute]
public static void ForEach(IEnumerable`1<T> source, Action`1<T> action);
    [ExtensionAttribute]
public static IQueryable`1<TResult> LeftJoin(IQueryable`1<TOuter> outer, IEnumerable`1<TInner> inner, Expression`1<Func`2<TOuter, TKey>> outerKeySelector, Expression`1<Func`2<TInner, TKey>> innerKeySelector, Expression`1<Func`3<TOuter, TInner, TResult>> resultSelector);
    private static IQueryable`1<TResult> ApplyExpandedSelect(IQueryable`1<TInput> inputs, Expression`1<Func`2<TInput, TResult>> selector);
}
public static class LinqKit.Linq : object {
    public static Expression`1<Func`1<TResult>> Expr(Expression`1<Func`1<TResult>> expr);
    public static Expression`1<Func`2<T, TResult>> Expr(Expression`1<Func`2<T, TResult>> expr);
    public static Expression`1<Func`3<T1, T2, TResult>> Expr(Expression`1<Func`3<T1, T2, TResult>> expr);
    public static Func`1<TResult> Func(Func`1<TResult> expr);
    public static Func`2<T, TResult> Func(Func`2<T, TResult> expr);
    public static Func`3<T1, T2, TResult> Func(Func`3<T1, T2, TResult> expr);
}
public static class LinqKit.LinqKitExtension : object {
    public static Func`2<Expression, Expression> QueryOptimizer;
    private static LinqKitExtension();
}
[ExtensionAttribute]
public static class LinqKit.PredicateBuilder : object {
    public static ExpressionStarter`1<T> New();
    public static ExpressionStarter`1<T> New(Expression`1<Func`2<T, bool>> expression);
    public static ExpressionStarter`1<T> New(bool defaultExpression);
    public static ExpressionStarter`1<T> New(IEnumerable`1<T> enumerable);
    public static ExpressionStarter`1<T> New(IEnumerable`1<T> enumerable, Expression`1<Func`2<T, bool>> expression);
    public static ExpressionStarter`1<T> New(IEnumerable`1<T> enumerable, bool state);
    [ObsoleteAttribute("Use PredicateBuilder.New() instead.")]
public static Expression`1<Func`2<T, bool>> True();
    [ObsoleteAttribute("Use PredicateBuilder.New() instead.")]
public static Expression`1<Func`2<T, bool>> False();
    [ExtensionAttribute]
public static Expression`1<Func`2<T, bool>> Or(Expression`1<Func`2<T, bool>> expr1, Expression`1<Func`2<T, bool>> expr2);
    [ExtensionAttribute]
public static Expression`1<Func`2<T, bool>> And(Expression`1<Func`2<T, bool>> expr1, Expression`1<Func`2<T, bool>> expr2);
    [ExtensionAttribute]
public static Expression`1<Func`2<T, bool>> Not(Expression`1<Func`2<T, bool>> expr);
    [ExtensionAttribute]
public static Expression`1<Func`2<T, bool>> Extend(Expression`1<Func`2<T, bool>> first, Expression`1<Func`2<T, bool>> second, PredicateOperator operator);
    [ExtensionAttribute]
public static Expression`1<Func`2<T, bool>> Extend(ExpressionStarter`1<T> first, Expression`1<Func`2<T, bool>> second, PredicateOperator operator);
}
public enum LinqKit.PredicateOperator : Enum {
    public int value__;
    public static PredicateOperator Or;
    public static PredicateOperator And;
}
[ExtensionAttribute]
internal static class LinqKit.Utilities.ExpressionHelpers : object {
    [ExtensionAttribute]
public static object EvaluateExpression(Expression expr);
    public static ParameterExpression CreateParameterExpression(Type type);
}
internal abstract class System.Linq.Expressions.ExpressionVisitor : object {
    public virtual Expression Visit(Expression exp);
    protected virtual MemberBinding VisitBinding(MemberBinding binding);
    protected virtual ElementInit VisitElementInitializer(ElementInit initializer);
    protected virtual Expression VisitUnary(UnaryExpression u);
    protected virtual Expression VisitBinary(BinaryExpression b);
    protected virtual Expression VisitTypeIs(TypeBinaryExpression b);
    protected virtual Expression VisitConstant(ConstantExpression c);
    protected virtual Expression VisitConditional(ConditionalExpression c);
    protected virtual Expression VisitParameter(ParameterExpression p);
    protected virtual Expression VisitMember(MemberExpression m);
    protected virtual Expression VisitMethodCall(MethodCallExpression m);
    protected virtual ReadOnlyCollection`1<Expression> VisitExpressionList(ReadOnlyCollection`1<Expression> original);
    protected virtual MemberAssignment VisitMemberAssignment(MemberAssignment assignment);
    protected virtual MemberMemberBinding VisitMemberMemberBinding(MemberMemberBinding binding);
    protected virtual MemberListBinding VisitMemberListBinding(MemberListBinding binding);
    protected virtual IEnumerable`1<MemberBinding> VisitBindingList(ReadOnlyCollection`1<MemberBinding> original);
    protected virtual IEnumerable`1<ElementInit> VisitElementInitializerList(ReadOnlyCollection`1<ElementInit> original);
    protected virtual Expression VisitLambda(LambdaExpression lambda);
    protected virtual NewExpression VisitNew(NewExpression nex);
    protected virtual Expression VisitMemberInit(MemberInitExpression init);
    protected virtual Expression VisitListInit(ListInitExpression init);
    protected virtual Expression VisitNewArray(NewArrayExpression na);
    protected virtual Expression VisitInvocation(InvocationExpression iv);
}
[ExtensionAttribute]
internal static class System.Reflection.IntrospectionExtensions : object {
    [ExtensionAttribute]
public static Type GetTypeInfo(Type type);
}
[AttributeUsageAttribute("1")]
internal class Timestamp.TimestampAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Timestamp>k__BackingField;
    public string Timestamp { get; }
    public TimestampAttribute(string timestamp);
    [CompilerGeneratedAttribute]
public string get_Timestamp();
}
