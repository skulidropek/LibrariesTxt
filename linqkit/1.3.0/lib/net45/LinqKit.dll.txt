public class LinqKit.ExpandableDbAsyncEnumerator`1 : object {
    private IEnumerator`1<T> _inner;
    public T Current { get; }
    private object System.Data.Entity.Infrastructure.IDbAsyncEnumerator.Current { get; }
    public ExpandableDbAsyncEnumerator`1(IEnumerator`1<T> inner);
    public sealed virtual void Dispose();
    public sealed virtual Task`1<bool> MoveNextAsync(CancellationToken cancellationToken);
    public sealed virtual T get_Current();
    private sealed virtual override object System.Data.Entity.Infrastructure.IDbAsyncEnumerator.get_Current();
}
public class LinqKit.ExpandableQuery`1 : object {
    private IQueryProvider _provider;
    private IQueryable`1<T> _inner;
    internal IQueryable`1<T> InnerQuery { get; }
    private Expression System.Linq.IQueryable.Expression { get; }
    private Type System.Linq.IQueryable.ElementType { get; }
    private IQueryProvider System.Linq.IQueryable.Provider { get; }
    internal ExpandableQuery`1(IQueryable`1<T> inner, Func`2<Expression, Expression> queryOptimizer);
    internal IQueryable`1<T> get_InnerQuery();
    private sealed virtual override Expression System.Linq.IQueryable.get_Expression();
    private sealed virtual override Type System.Linq.IQueryable.get_ElementType();
    private sealed virtual override IQueryProvider System.Linq.IQueryable.get_Provider();
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual string ToString();
    public sealed virtual IDbAsyncEnumerator`1<T> GetAsyncEnumerator();
    private sealed virtual override IDbAsyncEnumerator System.Data.Entity.Infrastructure.IDbAsyncEnumerable.GetAsyncEnumerator();
}
internal class LinqKit.ExpandableQueryOfClass`1 : ExpandableQuery`1<T> {
    public ExpandableQueryOfClass`1(IQueryable`1<T> inner, Func`2<Expression, Expression> queryOptimizer);
    public IQueryable`1<T> Include(string path);
}
internal class LinqKit.ExpandableQueryProvider`1 : object {
    private ExpandableQuery`1<T> _query;
    private Func`2<Expression, Expression> _queryOptimizer;
    internal ExpandableQueryProvider`1(ExpandableQuery`1<T> query, Func`2<Expression, Expression> queryOptimizer);
    private sealed virtual override IQueryable`1<TElement> System.Linq.IQueryProvider.CreateQuery(Expression expression);
    private sealed virtual override IQueryable System.Linq.IQueryProvider.CreateQuery(Expression expression);
    private sealed virtual override TResult System.Linq.IQueryProvider.Execute(Expression expression);
    private sealed virtual override object System.Linq.IQueryProvider.Execute(Expression expression);
    public sealed virtual Task`1<TResult> ExecuteAsync(Expression expression, CancellationToken cancellationToken);
    public sealed virtual Task`1<object> ExecuteAsync(Expression expression, CancellationToken cancellationToken);
}
[ExtensionAttribute]
public static class LinqKit.Extensions : object {
    [ExtensionAttribute]
public static IQueryable`1<T> AsExpandable(IQueryable`1<T> query);
    [ExtensionAttribute]
public static IQueryable`1<T> AsExpandable(IQueryable`1<T> query, Func`2<Expression, Expression> queryOptimizer);
}
[ExtensionAttribute]
public static class LinqKit.ExtensionsEF : object {
    [ExtensionAttribute]
public static IQueryable`1<T> AsExpandableEF(IQueryable`1<T> query);
    [ExtensionAttribute]
public static IQueryable`1<T> AsExpandableEF(IQueryable`1<T> query, Func`2<Expression, Expression> queryOptimizer);
    [ExtensionAttribute]
public static TResult InvokeEF(Expression`1<Func`1<TResult>> expr);
    [ExtensionAttribute]
public static TResult InvokeEF(Expression`1<Func`2<T1, TResult>> expr, T1 arg1);
    [ExtensionAttribute]
public static TResult InvokeEF(Expression`1<Func`3<T1, T2, TResult>> expr, T1 arg1, T2 arg2);
    [ExtensionAttribute]
public static TResult InvokeEF(Expression`1<Func`4<T1, T2, T3, TResult>> expr, T1 arg1, T2 arg2, T3 arg3);
    [ExtensionAttribute]
public static TResult InvokeEF(Expression`1<Func`5<T1, T2, T3, T4, TResult>> expr, T1 arg1, T2 arg2, T3 arg3, T4 arg4);
    [ExtensionAttribute]
public static TResult InvokeEF(Expression`1<Func`6<T1, T2, T3, T4, T5, TResult>> expr, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5);
    [ExtensionAttribute]
public static TResult InvokeEF(Expression`1<Func`7<T1, T2, T3, T4, T5, T6, TResult>> expr, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6);
    [ExtensionAttribute]
public static TResult InvokeEF(Expression`1<Func`8<T1, T2, T3, T4, T5, T6, T7, TResult>> expr, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7);
    [ExtensionAttribute]
public static TResult InvokeEF(Expression`1<Func`9<T1, T2, T3, T4, T5, T6, T7, T8, TResult>> expr, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8);
    [ExtensionAttribute]
public static TResult InvokeEF(Expression`1<Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>> expr, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9);
    [ExtensionAttribute]
public static TResult InvokeEF(Expression`1<Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>> expr, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10);
    [ExtensionAttribute]
public static TResult InvokeEF(Expression`1<Func`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>> expr, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11);
    [ExtensionAttribute]
public static TResult InvokeEF(Expression`1<Func`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>> expr, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12);
    [ExtensionAttribute]
public static TResult InvokeEF(Expression`1<Func`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>> expr, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13);
    [ExtensionAttribute]
public static TResult InvokeEF(Expression`1<Func`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>> expr, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14);
    [ExtensionAttribute]
public static TResult InvokeEF(Expression`1<Func`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>> expr, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15);
    [ExtensionAttribute]
public static TResult InvokeEF(Expression`1<Func`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult>> expr, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16);
}
