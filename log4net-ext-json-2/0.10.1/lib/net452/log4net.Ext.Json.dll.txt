public class log4net.Appender.KeepAliveAppender : ForwardingAppender {
    private static ILog log;
    public static Level Alive;
    [CompilerGeneratedAttribute]
private Level <KeepAliveLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <KeepAliveMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private int <KeepAliveInterval>k__BackingField;
    public Level KeepAliveLevel { get; public set; }
    public string KeepAliveMessage { get; public set; }
    public int KeepAliveInterval { get; public set; }
    private static KeepAliveAppender();
    [CompilerGeneratedAttribute]
public Level get_KeepAliveLevel();
    [CompilerGeneratedAttribute]
public void set_KeepAliveLevel(Level value);
    [CompilerGeneratedAttribute]
public string get_KeepAliveMessage();
    [CompilerGeneratedAttribute]
public void set_KeepAliveMessage(string value);
    [CompilerGeneratedAttribute]
public int get_KeepAliveInterval();
    [CompilerGeneratedAttribute]
public void set_KeepAliveInterval(int value);
    public virtual void ActivateOptions();
    protected void AliveCall();
    protected virtual void OnClose();
}
public class log4net.Ext.Json.Util.Env.EnvAccess : EnvAccessUsual {
}
public class log4net.Ext.Json.Util.Env.EnvAccessBasic : object {
    public virtual string GetMachineName();
    public virtual string GetCommandLine();
    public virtual string GetUserName();
    public virtual string GetUserDomain();
    public virtual int GetProcessId();
    public virtual string GetAppName();
    public virtual string GetAppPath();
    public virtual long GetWorkingSet();
}
public class log4net.Ext.Json.Util.Env.EnvAccessUsual : EnvAccessBasic {
    public virtual string GetMachineName();
    public virtual string GetCommandLine();
    public virtual string GetUserName();
    public virtual string GetUserDomain();
    public virtual long GetWorkingSet();
}
public interface log4net.Ext.Json.Util.Env.IEnvAccess {
    public abstract virtual string GetMachineName();
    public abstract virtual string GetCommandLine();
    public abstract virtual string GetUserName();
    public abstract virtual string GetUserDomain();
    public abstract virtual string GetAppName();
    public abstract virtual string GetAppPath();
    public abstract virtual int GetProcessId();
    public abstract virtual long GetWorkingSet();
}
public class log4net.Layout.Arrangements.DefaultArrangement : OptionArrangement {
    public static string DefaultDefaultDefault;
    public static IDictionary`2<string, string> ConfigDefaults;
    [CompilerGeneratedAttribute]
private string <Default>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Config>k__BackingField;
    public string Default { get; public set; }
    public IDictionary`2<string, string> Config { get; public set; }
    public DefaultArrangement(string def);
    private static DefaultArrangement();
    [CompilerGeneratedAttribute]
public string get_Default();
    [CompilerGeneratedAttribute]
public void set_Default(string value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Config();
    [CompilerGeneratedAttribute]
public void set_Config(IDictionary`2<string, string> value);
    public virtual void Arrange(IList`1<IMember> members, ConverterInfo[] converters);
    public virtual void SetOption(string value);
}
public interface log4net.Layout.Arrangements.IArrangement {
    public abstract virtual void Arrange(IList`1<IMember> members, ConverterInfo[] converters);
    public abstract virtual void SetOption(string value);
}
public class log4net.Layout.Arrangements.MultipleArrangement : NoArrangement {
    [CompilerGeneratedAttribute]
private IList`1<IArrangement> <Arrangements>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Option>k__BackingField;
    public IList`1<IArrangement> Arrangements { get; protected set; }
    public string Option { get; public set; }
    [CompilerGeneratedAttribute]
public IList`1<IArrangement> get_Arrangements();
    [CompilerGeneratedAttribute]
protected void set_Arrangements(IList`1<IArrangement> value);
    [CompilerGeneratedAttribute]
public string get_Option();
    [CompilerGeneratedAttribute]
public void set_Option(string value);
    public virtual void Arrange(IList`1<IMember> members, ConverterInfo[] converters);
    public virtual void SetOption(string value);
    public virtual void AddArrangement(IArrangement arrangement);
}
public class log4net.Layout.Arrangements.NoArrangement : object {
    public static IArrangement Instance;
    private static NoArrangement();
    public virtual void Arrange(IList`1<IMember> members, ConverterInfo[] converters);
    public virtual void SetOption(string value);
}
public class log4net.Layout.Arrangements.OptionArrangement : NoArrangement {
    [CompilerGeneratedAttribute]
private string <Arrangement>k__BackingField;
    public string Arrangement { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Arrangement();
    [CompilerGeneratedAttribute]
public void set_Arrangement(string value);
    public virtual void Arrange(IList`1<IMember> members, ConverterInfo[] converters);
    public virtual void SetOption(string value);
}
public class log4net.Layout.Arrangements.RemovalArrangement : NoArrangement {
    private Regex m_nameRegex;
    public string NameRegex { get; public set; }
    public RemovalArrangement(string nameRegex);
    public virtual string get_NameRegex();
    public virtual void set_NameRegex(string value);
    public virtual void Arrange(IList`1<IMember> members, ConverterInfo[] converters);
    public virtual void SetOption(string value);
    [IteratorStateMachineAttribute("log4net.Layout.Arrangements.RemovalArrangement/<GetMembersToRemove>d__8")]
private static IEnumerable`1<IMember> GetMembersToRemove(IList`1<IMember> members, Regex nameRegex);
}
public interface log4net.Layout.Decorators.IDecorator {
    public abstract virtual object Decorate(object obj);
}
public class log4net.Layout.Decorators.StandardTypesDecorator : object {
    [CompilerGeneratedAttribute]
private bool <SaveType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SaveInternalType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Stringify>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TypeMemberName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StringMemberName>k__BackingField;
    public bool SaveType { get; public set; }
    public bool SaveInternalType { get; public set; }
    public bool Stringify { get; public set; }
    public string TypeMemberName { get; public set; }
    public string StringMemberName { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_SaveType();
    [CompilerGeneratedAttribute]
public void set_SaveType(bool value);
    [CompilerGeneratedAttribute]
public bool get_SaveInternalType();
    [CompilerGeneratedAttribute]
public void set_SaveInternalType(bool value);
    [CompilerGeneratedAttribute]
public bool get_Stringify();
    [CompilerGeneratedAttribute]
public void set_Stringify(bool value);
    [CompilerGeneratedAttribute]
public string get_TypeMemberName();
    [CompilerGeneratedAttribute]
public void set_TypeMemberName(string value);
    [CompilerGeneratedAttribute]
public string get_StringMemberName();
    [CompilerGeneratedAttribute]
public void set_StringMemberName(string value);
    public sealed virtual object Decorate(object obj);
    protected virtual void Standardise(Object& obj, IDictionary flatdict, string path);
    protected virtual bool StandardNull(object obj, Object& result);
    protected virtual bool StandardString(object obj, Object& result);
    protected virtual bool StandardDateTime(object obj, Object& result);
    protected virtual bool StandardTimeSpan(object obj, Object& result);
    protected virtual bool StandardBytes(object obj, Object& result);
    protected virtual bool StandardChars(object obj, Object& result);
    protected virtual bool StandardPrimitive(object obj, Object& result);
    protected virtual bool StandardGuid(object obj, Object& result);
    protected virtual bool StandardEnum(object obj, Object& result);
    protected virtual bool StandardUri(object obj, Object& result);
    protected virtual bool StandardContext(object obj, Object& result);
    protected virtual bool StandardDictionary(object obj, Object& result, IDictionary flatdict, string path);
    protected virtual bool StandardArray(object obj, Object& result);
    protected virtual bool StandardObject(object obj, Object& result, IDictionary flatdict, string path);
}
public class log4net.Layout.Decorators.StandardTypesFlatDecorator : StandardTypesDecorator {
    protected virtual bool StandardDictionary(object obj, Object& result, IDictionary flatdict, string path);
    protected virtual void FlattenDictionary(IDictionary dict, IDictionary flatdict, string path);
}
public interface log4net.Layout.IRawArrangedLayout {
    public IList`1<IMember> Members { get; public set; }
    public abstract virtual IList`1<IMember> get_Members();
    public abstract virtual void set_Members(IList`1<IMember> value);
}
public interface log4net.Layout.Members.IMember {
    public string Name { get; }
    public IRawLayout Layout { get; }
    public abstract virtual string get_Name();
    public abstract virtual IRawLayout get_Layout();
}
public class log4net.Layout.Members.Member : NoArrangement {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Option>k__BackingField;
    [CompilerGeneratedAttribute]
private ConverterInfo[] <Converters>k__BackingField;
    public string Name { get; public set; }
    public object Option { get; public set; }
    public IRawLayout Layout { get; }
    public ConverterInfo[] Converters { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public object get_Option();
    [CompilerGeneratedAttribute]
public void set_Option(object value);
    public sealed virtual IRawLayout get_Layout();
    [CompilerGeneratedAttribute]
public ConverterInfo[] get_Converters();
    [CompilerGeneratedAttribute]
public void set_Converters(ConverterInfo[] value);
    public virtual object Format(LoggingEvent loggingEvent);
    public sealed virtual void ActivateOptions();
    public virtual void Arrange(IList`1<IMember> members, ConverterInfo[] converters);
    public virtual void SetOption(string value);
    protected virtual IRawLayout GetLayout(string name);
    protected virtual bool GetLayoutValue(LoggingEvent loggingEvent, Object& obj);
    protected virtual bool GetDefaultValue(LoggingEvent loggingEvent, Object& obj);
    protected virtual bool GetPropertyValue(LoggingEvent loggingEvent, Object& obj);
}
public class log4net.Layout.Pattern.JsonPatternConverter : PatternLayoutConverter {
    [CompilerGeneratedAttribute]
private IObjectRenderer <Renderer>k__BackingField;
    [CompilerGeneratedAttribute]
private IRawLayout <Fetcher>k__BackingField;
    [CompilerGeneratedAttribute]
private IDecorator[] <Decorators>k__BackingField;
    public IObjectRenderer Renderer { get; public set; }
    public IRawLayout Fetcher { get; public set; }
    public IDecorator[] Decorators { get; public set; }
    [CompilerGeneratedAttribute]
public IObjectRenderer get_Renderer();
    [CompilerGeneratedAttribute]
public void set_Renderer(IObjectRenderer value);
    [CompilerGeneratedAttribute]
public IRawLayout get_Fetcher();
    [CompilerGeneratedAttribute]
public void set_Fetcher(IRawLayout value);
    [CompilerGeneratedAttribute]
public IDecorator[] get_Decorators();
    [CompilerGeneratedAttribute]
public void set_Decorators(IDecorator[] value);
    protected virtual void Convert(TextWriter writer, object state);
    protected virtual void Convert(TextWriter writer, LoggingEvent loggingEvent);
    public sealed virtual void RenderObject(RendererMap map, object obj, TextWriter writer);
    public virtual void ActivateOptions();
    protected virtual void SetUp(IArrangement arrangement, IEnumerable`1<ConverterInfo> converters, IRawLayout fetcher, IObjectRenderer renderer, IEnumerable`1<IDecorator> decorators);
    protected virtual void Arrange(IArrangement arrangement, IEnumerable`1<ConverterInfo> converters);
    protected virtual IRawLayout CreateFetcher();
    protected virtual IDecorator[] CreateDecorators();
    protected virtual IObjectRenderer CreateRenderer();
}
public class log4net.Layout.RawArrangedLayout : object {
    [CompilerGeneratedAttribute]
private IList`1<IMember> <Members>k__BackingField;
    public IList`1<IMember> Members { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<IMember> get_Members();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Members(IList`1<IMember> value);
    public virtual object Format(LoggingEvent loggingEvent);
}
public class log4net.Layout.RawCallLayout : object {
    [CompilerGeneratedAttribute]
private static IEnumerable`1<RawCallLayout> <OverrideCalls>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    private RawCallDelegate m_getter;
    private ConverterInfo m_info;
    public static IEnumerable`1<RawCallLayout> OverrideCalls { get; public set; }
    public string Name { get; private set; }
    private static RawCallLayout();
    public RawCallLayout(string name, RawCallDelegate getter);
    public RawCallLayout(string name, PatternConverter converter);
    public RawCallLayout(string name, PatternString pattern);
    public RawCallLayout(ConverterInfo info);
    [CompilerGeneratedAttribute]
public static IEnumerable`1<RawCallLayout> get_OverrideCalls();
    [CompilerGeneratedAttribute]
public static void set_OverrideCalls(IEnumerable`1<RawCallLayout> value);
    public static IRawLayout FindLayout(string name, ConverterInfo[] converters);
    public static RawCallLayout FindLayout(string name, IEnumerable`1<RawCallLayout> calls);
    public static IEnumerable`1<RawCallLayout> GetCalls(ConverterInfo[] converters);
    public static IEnumerable`1<RawCallLayout> CombineCalls(IEnumerable`1<RawCallLayout> calls, ConverterInfo[] converters);
    [IteratorStateMachineAttribute("log4net.Layout.RawCallLayout/<EnumerateConverters>d__9")]
private static IEnumerable`1<RawCallLayout> EnumerateConverters(ConverterInfo[] converters);
    private static IEnumerable`1<RawCallLayout> MakeOverrideCalls(IEnumerable`1<RawCallLayout> calls);
    public static void AddCalls(IEnumerable`1& calls, RawCallDelegate layoutCall, String[] name);
    [IteratorStateMachineAttribute("log4net.Layout.RawCallLayout/<EnumerateCalls>d__12")]
private static IEnumerable`1<RawCallLayout> EnumerateCalls(RawCallDelegate layoutCall, String[] names);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    public sealed virtual object Format(LoggingEvent loggingEvent);
    public static object Format(PatternConverter conv, LoggingEvent loggingEvent);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class log4net.Layout.SerializedLayout : PatternLayout {
    public static string DefaultSerializerName;
    [CompilerGeneratedAttribute]
private string <SerializerName>k__BackingField;
    [CompilerGeneratedAttribute]
private PatternConverter <SerializingConverter>k__BackingField;
    protected MultipleArrangement m_arrangement;
    protected List`1<IDecorator> m_decorators;
    protected IObjectRenderer m_renderer;
    protected IRawLayout m_fetcher;
    private bool m_constructed;
    public string SerializerName { get; public set; }
    public PatternConverter SerializingConverter { get; public set; }
    private static SerializedLayout();
    [CompilerGeneratedAttribute]
public string get_SerializerName();
    [CompilerGeneratedAttribute]
public void set_SerializerName(string value);
    [CompilerGeneratedAttribute]
public PatternConverter get_SerializingConverter();
    [CompilerGeneratedAttribute]
public void set_SerializingConverter(PatternConverter value);
    public virtual void ActivateOptions();
    public virtual void Format(TextWriter writer, LoggingEvent loggingEvent);
    protected virtual PatternConverter CreateSerializingConverter(ConverterInfo info);
    protected virtual void SetUpSerializingConverter(PatternConverter conv, ConverterInfo[] converters, IArrangement arrangement, IRawLayout fetcher, IObjectRenderer renderer, IDecorator[] decorators);
    protected virtual ConverterInfo CreateSerializingConverterInfo(string name, Type type);
    public virtual void AddArrangement(IArrangement value);
    public virtual void AddDefault(string value);
    public virtual void AddMember(string value);
    public virtual void AddRemove(string value);
    public virtual void AddRenderer(IObjectRenderer value);
    public virtual void AddFetcher(IRawLayout value);
    public virtual void AddDecorator(IDecorator value);
}
public interface log4net.ObjectRenderer.IJsonRenderer {
}
public class log4net.ObjectRenderer.JsonRenderer : object {
    public static IJsonRenderer Default;
    [CompilerGeneratedAttribute]
private IDictionary`2<char, string> <EscapedChars>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SaveType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SaveInternalType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Stringify>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TypeMemberName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StringMemberName>k__BackingField;
    public IDictionary`2<char, string> EscapedChars { get; public set; }
    public bool SaveType { get; public set; }
    public bool SaveInternalType { get; public set; }
    public bool Stringify { get; public set; }
    public string TypeMemberName { get; public set; }
    public string StringMemberName { get; public set; }
    private static JsonRenderer();
    [CompilerGeneratedAttribute]
public IDictionary`2<char, string> get_EscapedChars();
    [CompilerGeneratedAttribute]
public void set_EscapedChars(IDictionary`2<char, string> value);
    [CompilerGeneratedAttribute]
public bool get_SaveType();
    [CompilerGeneratedAttribute]
public void set_SaveType(bool value);
    [CompilerGeneratedAttribute]
public bool get_SaveInternalType();
    [CompilerGeneratedAttribute]
public void set_SaveInternalType(bool value);
    [CompilerGeneratedAttribute]
public bool get_Stringify();
    [CompilerGeneratedAttribute]
public void set_Stringify(bool value);
    [CompilerGeneratedAttribute]
public string get_TypeMemberName();
    [CompilerGeneratedAttribute]
public void set_TypeMemberName(string value);
    [CompilerGeneratedAttribute]
public string get_StringMemberName();
    [CompilerGeneratedAttribute]
public void set_StringMemberName(string value);
    public sealed virtual void RenderObject(RendererMap rendererMap, object obj, TextWriter writer);
    protected virtual void Serialize(object obj, TextWriter sb, RendererMap map, bool tryMapFirst);
    protected virtual bool SerializeNull(object obj, TextWriter sb);
    protected virtual bool SerializeDateTime(object obj, TextWriter sb);
    protected virtual bool SerializeTimeSpan(object obj, TextWriter sb);
    protected virtual bool SerializePrimitive(object obj, TextWriter sb);
    protected virtual bool SerializeDictionary(IDictionary obj, TextWriter sb, RendererMap map);
    protected virtual bool SerializeArray(IEnumerable obj, TextWriter sb, RendererMap map);
    protected virtual bool SerializeObjectAsDictionary(object obj, TextWriter sb, RendererMap map);
    protected virtual bool SerializeObjectUsingRendererMap(object obj, TextWriter sb, RendererMap map);
    protected virtual bool SerializeBytes(Byte[] obj, TextWriter sb);
    protected virtual bool SerializeChars(Char[] obj, TextWriter sb);
    protected virtual bool SerializeString(object obj, TextWriter sb);
    protected virtual bool SerializeUri(Uri obj, TextWriter sb);
    protected virtual bool SerializeGuid(object obj, TextWriter sb);
    protected virtual bool SerializeEnum(object obj, TextWriter sb);
    public static IDictionary ObjToDict(object obj, bool saveType, bool saveInternalType, string typeMemberName, bool stringify, string stringMemberName);
}
public class log4net.Plugin.JsonPlugin : object {
    private static bool s_initted;
    [CompilerGeneratedAttribute]
private ILoggerRepository <Repo>k__BackingField;
    public string Name { get; }
    public ILoggerRepository Repo { get; public set; }
    private static JsonPlugin();
    public static void Init();
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public ILoggerRepository get_Repo();
    [CompilerGeneratedAttribute]
public void set_Repo(ILoggerRepository value);
    public sealed virtual void Attach(ILoggerRepository repository);
    public sealed virtual void Shutdown();
    private void Repo_ConfigurationChanged(object sender, EventArgs e);
}
public class log4net.Plugin.StampPlugin : object {
    [CompilerGeneratedAttribute]
private ILoggerRepository <Repo>k__BackingField;
    public string Name { get; }
    public ILoggerRepository Repo { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public ILoggerRepository get_Repo();
    [CompilerGeneratedAttribute]
public void set_Repo(ILoggerRepository value);
    public sealed virtual void Attach(ILoggerRepository repository);
    public sealed virtual void Shutdown();
    private void Repo_ConfigurationChanged(object sender, EventArgs e);
}
public static class log4net.Util.Compatibility : object {
}
public static class log4net.Util.Enumerable : object {
    [IteratorStateMachineAttribute("log4net.Util.Enumerable/<Cast>d__0`1")]
public static IEnumerable`1<T> Cast(IEnumerable enumerable);
    public static T[] ToArray(IEnumerable`1<T> enumerable);
    [IteratorStateMachineAttribute("log4net.Util.Enumerable/<Union>d__2`1")]
public static IEnumerable`1<T> Union(IEnumerable`1[] enumerations);
}
public class log4net.Util.KeepAlive : object {
    public static KeepAlive Instance;
    private object m_control_locker;
    private object m_calls_locker;
    private IDictionary`2<AliveCall, Config> m_calls;
    private Thread m_thread;
    private bool m_stop;
    private static DateTime s_refdt;
    private static KeepAlive();
    public void Manage(AliveCall alivecall, int interval);
    public void Release(AliveCall alivecall);
    private void Start();
    public void Stop();
    private void Run();
    private TimeSpan ExecuteSchedule(TimeSpan maxSnooze);
    private void MakeCall(Config config);
    private sealed virtual override void System.IDisposable.Dispose();
    private Config MakeConfig(AliveCall alivecall, int interval);
}
public class log4net.Util.RawCallDelegate : MulticastDelegate {
    public RawCallDelegate(object object, IntPtr method);
    public virtual object Invoke(LoggingEvent loggingEvent);
    public virtual IAsyncResult BeginInvoke(LoggingEvent loggingEvent, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
public enum log4net.Util.Stamps.AgeReference : Enum {
    public int value__;
    public static AgeReference Epoch1970;
    public static AgeReference SystemStart;
    public static AgeReference ApplicationStart;
    public static AgeReference Now;
}
public interface log4net.Util.Stamps.IStamp {
    public abstract virtual void StampEvent(LoggingEvent loggingEvent);
}
public class log4net.Util.Stamps.ProcessIdStamp : Stamp {
    protected virtual object GetValue(LoggingEvent loggingEvent);
}
public class log4net.Util.Stamps.SequenceStamp : Stamp {
    protected virtual object GetValue(LoggingEvent loggingEvent);
}
public class log4net.Util.Stamps.Stamp : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    protected static object s_sync_root;
    private static double s_ref_sys_time;
    private static double s_ref_app_time;
    private static int s_processId;
    private static long s_sequenceId;
    private IEnvAccess _env;
    public string Name { get; public set; }
    private static Stamp();
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    public virtual void StampEvent(LoggingEvent loggingEvent);
    protected virtual void SetStamp(LoggingEvent loggingEvent, string name, object value);
    protected virtual object GetValue(LoggingEvent loggingEvent);
    protected virtual object GetSanitizedValue(LoggingEvent loggingEvent, object value);
    public static void Init();
    public static int GetProcessId();
    public static long GetSequence();
    public static long SetSequence(long value);
    public static double GetSystemUpTime();
    public static double ConvertStopwatchTicksToSeconds(long ticks);
    public static double ConvertTimeSpanToSeconds(TimeSpan span);
    public static double GetEpochTime(AgeReference ageRef);
    public static double GetTimeStampValue(AgeReference tfrom, AgeReference tto, double multiplier, bool round);
    public static double AdjustTimeValue(double value, double multiplier, bool round);
}
public class log4net.Util.Stamps.StampDelegate : MulticastDelegate {
    public StampDelegate(object object, IntPtr method);
    public virtual void Invoke(LoggingEvent loggingEvent);
    public virtual IAsyncResult BeginInvoke(LoggingEvent loggingEvent, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class log4net.Util.Stamps.StampingLogger : Logger {
    [CompilerGeneratedAttribute]
private Logger <InnerLogger>k__BackingField;
    [CompilerGeneratedAttribute]
private StampDelegate <Call>k__BackingField;
    protected Logger InnerLogger { get; private set; }
    protected StampDelegate Call { get; private set; }
    public bool Additivity { get; public set; }
    public AppenderCollection Appenders { get; }
    public Level EffectiveLevel { get; }
    public Hierarchy Hierarchy { get; public set; }
    public Level Level { get; public set; }
    public string Name { get; }
    public Logger Parent { get; public set; }
    public StampingLogger(Logger innerLogger, StampDelegate call);
    [CompilerGeneratedAttribute]
protected Logger get_InnerLogger();
    [CompilerGeneratedAttribute]
private void set_InnerLogger(Logger value);
    [CompilerGeneratedAttribute]
protected StampDelegate get_Call();
    [CompilerGeneratedAttribute]
private void set_Call(StampDelegate value);
    protected virtual void CallAppenders(LoggingEvent loggingEvent);
    public virtual bool get_Additivity();
    public virtual void set_Additivity(bool value);
    public virtual AppenderCollection get_Appenders();
    public virtual Level get_EffectiveLevel();
    public virtual Hierarchy get_Hierarchy();
    public virtual void set_Hierarchy(Hierarchy value);
    public virtual Level get_Level();
    public virtual void set_Level(Level value);
    public virtual string get_Name();
    public virtual Logger get_Parent();
    public virtual void set_Parent(Logger value);
    public virtual void AddAppender(IAppender newAppender);
    public virtual void CloseNestedAppenders();
    public virtual IAppender GetAppender(string name);
    public virtual bool IsEnabledFor(Level level);
    public virtual void RemoveAllAppenders();
    public virtual IAppender RemoveAppender(IAppender appender);
    public virtual IAppender RemoveAppender(string name);
    public virtual string ToString();
}
public class log4net.Util.Stamps.StampingLoggerFactory : object {
    public static IStamp[] DefaultStamps;
    protected IList`1<IStamp> Stamps;
    [CompilerGeneratedAttribute]
private ILoggerFactory <InnerFactory>k__BackingField;
    public ILoggerFactory InnerFactory { get; public set; }
    public StampingLoggerFactory(ILoggerFactory innerFactory);
    private static StampingLoggerFactory();
    [CompilerGeneratedAttribute]
public ILoggerFactory get_InnerFactory();
    [CompilerGeneratedAttribute]
public void set_InnerFactory(ILoggerFactory value);
    public virtual Logger CreateLogger(ILoggerRepository repository, string name);
    protected virtual ILoggerFactory GetFactory();
    protected virtual Logger CreateStampingLogger(Logger logger, StampDelegate call);
    protected virtual void StampEvent(LoggingEvent loggingEvent);
    protected virtual IEnumerable`1<IStamp> GetStamps();
    public void AddStamp(IStamp stamp);
}
public class log4net.Util.Stamps.TimeStamp : Stamp {
    [CompilerGeneratedAttribute]
private bool <Round>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Multiplier>k__BackingField;
    [CompilerGeneratedAttribute]
private AgeReference <TimeFrom>k__BackingField;
    [CompilerGeneratedAttribute]
private AgeReference <TimeTo>k__BackingField;
    public bool Round { get; public set; }
    public double Multiplier { get; public set; }
    public AgeReference TimeFrom { get; public set; }
    public AgeReference TimeTo { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Round();
    [CompilerGeneratedAttribute]
public void set_Round(bool value);
    [CompilerGeneratedAttribute]
public double get_Multiplier();
    [CompilerGeneratedAttribute]
public void set_Multiplier(double value);
    [CompilerGeneratedAttribute]
public AgeReference get_TimeFrom();
    [CompilerGeneratedAttribute]
public void set_TimeFrom(AgeReference value);
    [CompilerGeneratedAttribute]
public AgeReference get_TimeTo();
    [CompilerGeneratedAttribute]
public void set_TimeTo(AgeReference value);
    protected virtual object GetValue(LoggingEvent loggingEvent);
}
public class log4net.Util.Stamps.ValueStamp : Stamp {
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public object Value { get; public set; }
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
    protected virtual object GetValue(LoggingEvent loggingEvent);
}
[ExtensionAttribute]
public static class log4net.Util.TextWriterExt : object {
    [ExtensionAttribute]
public static void WriteFormat(TextWriter w, string format, Object[] values);
}
public class log4net.Util.TypeConverters.ArrangementConverter : object {
    [ThreadStaticAttribute]
private static ConverterContext s_converter_context;
    private static Regex s_setMatcher;
    private static Regex s_singleMatcher;
    private static Regex s_semiClean;
    private static Regex s_nameClean;
    private static Regex s_brackClean;
    private static Regex s_coverUp;
    private static ArrangementConverter();
    private static ConverterContext GetConverterContext();
    public static IArrangement GetArrangement(string option, ConverterInfo[] converters);
    protected static IArrangement GetArrangementInternal(string option);
    public static void Init();
    public sealed virtual bool CanConvertFrom(Type sourceType);
    public sealed virtual object ConvertFrom(object source);
    public IArrangement ParseArangement(string str);
    public IArrangement ParseArrangementSet(string option);
    protected string Clean(Match match);
    protected string Brackets(Match match);
}
public class log4net.Util.TypeConverters.LayoutConverter : object {
    private bool m_serialized;
    public LayoutConverter(bool serialized);
    public static void Init(bool serialized);
    public sealed virtual bool CanConvertFrom(Type sourceType);
    public sealed virtual object ConvertFrom(object source);
}
