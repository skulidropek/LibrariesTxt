[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class log4net.Appender.AdoNetAppender : BufferingAppenderSkeleton {
    [CompilerGeneratedAttribute]
private string <ConnectionString>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AppSettingsKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConnectionStringName>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <ConnectionType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommandText>k__BackingField;
    [CompilerGeneratedAttribute]
private CommandType <CommandType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseTransactions>k__BackingField;
    [CompilerGeneratedAttribute]
private SecurityContext <SecurityContext>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReconnectOnError>k__BackingField;
    [CompilerGeneratedAttribute]
private IDbConnection <Connection>k__BackingField;
    [NullableAttribute("1")]
protected List`1<AdoNetAppenderParameter> m_parameters;
    [NullableAttribute("1")]
private static Type declaringType;
    public string ConnectionString { get; public set; }
    public string AppSettingsKey { get; public set; }
    public string ConnectionStringName { get; public set; }
    [NullableAttribute("1")]
public string ConnectionType { get; public set; }
    public string CommandText { get; public set; }
    public CommandType CommandType { get; public set; }
    public bool UseTransactions { get; public set; }
    public SecurityContext SecurityContext { get; public set; }
    public bool ReconnectOnError { get; public set; }
    protected IDbConnection Connection { get; protected set; }
    private static AdoNetAppender();
    [CompilerGeneratedAttribute]
public string get_ConnectionString();
    [CompilerGeneratedAttribute]
public void set_ConnectionString(string value);
    [CompilerGeneratedAttribute]
public string get_AppSettingsKey();
    [CompilerGeneratedAttribute]
public void set_AppSettingsKey(string value);
    [CompilerGeneratedAttribute]
public string get_ConnectionStringName();
    [CompilerGeneratedAttribute]
public void set_ConnectionStringName(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_ConnectionType();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_ConnectionType(string value);
    [CompilerGeneratedAttribute]
public string get_CommandText();
    [CompilerGeneratedAttribute]
public void set_CommandText(string value);
    [CompilerGeneratedAttribute]
public CommandType get_CommandType();
    [CompilerGeneratedAttribute]
public void set_CommandType(CommandType value);
    [CompilerGeneratedAttribute]
public bool get_UseTransactions();
    [CompilerGeneratedAttribute]
public void set_UseTransactions(bool value);
    [CompilerGeneratedAttribute]
public SecurityContext get_SecurityContext();
    [CompilerGeneratedAttribute]
public void set_SecurityContext(SecurityContext value);
    [CompilerGeneratedAttribute]
public bool get_ReconnectOnError();
    [CompilerGeneratedAttribute]
public void set_ReconnectOnError(bool value);
    [CompilerGeneratedAttribute]
protected IDbConnection get_Connection();
    [CompilerGeneratedAttribute]
protected void set_Connection(IDbConnection value);
    public virtual void ActivateOptions();
    protected virtual void OnClose();
    [NullableContextAttribute("1")]
protected virtual void SendBuffer(LoggingEvent[] events);
    [NullableContextAttribute("1")]
public void AddParameter(AdoNetAppenderParameter parameter);
    [NullableContextAttribute("1")]
protected virtual void SendBuffer(IDbTransaction dbTran, LoggingEvent[] events);
    [NullableContextAttribute("1")]
protected virtual void Prepare(IDbCommand dbCmd);
    [NullableContextAttribute("1")]
protected virtual string GetLogStatement(LoggingEvent logEvent);
    [NullableContextAttribute("1")]
protected virtual IDbConnection CreateConnection(Type connectionType, string connectionString);
    [NullableContextAttribute("1")]
protected virtual string ResolveConnectionString(String& connectionStringContext);
    [NullableContextAttribute("1")]
protected virtual Type ResolveConnectionType();
    private void InitializeDatabaseConnection();
    private void DisposeConnection();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class log4net.Appender.AdoNetAppenderParameter : object {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Precision>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Scale>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private IRawLayout <Layout>k__BackingField;
    private DbType m_dbType;
    private bool m_inferType;
    public string ParameterName { get; public set; }
    public DbType DbType { get; public set; }
    public byte Precision { get; public set; }
    public byte Scale { get; public set; }
    public int Size { get; public set; }
    public IRawLayout Layout { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ParameterName();
    [CompilerGeneratedAttribute]
public void set_ParameterName(string value);
    public DbType get_DbType();
    public void set_DbType(DbType value);
    [CompilerGeneratedAttribute]
public byte get_Precision();
    [CompilerGeneratedAttribute]
public void set_Precision(byte value);
    [CompilerGeneratedAttribute]
public byte get_Scale();
    [CompilerGeneratedAttribute]
public void set_Scale(byte value);
    [CompilerGeneratedAttribute]
public int get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(int value);
    [CompilerGeneratedAttribute]
public IRawLayout get_Layout();
    [CompilerGeneratedAttribute]
public void set_Layout(IRawLayout value);
    [NullableContextAttribute("1")]
public virtual void Prepare(IDbCommand command);
    [NullableContextAttribute("1")]
public virtual void FormatValue(IDbCommand command, LoggingEvent loggingEvent);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class log4net.Appender.AnsiColorTerminalAppender : AppenderSkeleton {
    public static string ConsoleOut;
    public static string ConsoleError;
    private bool writeToErrorStream;
    private LevelMapping levelMapping;
    private static string PostEventCodes;
    public string Target { get; public set; }
    protected bool RequiresLayout { get; }
    public virtual string get_Target();
    public virtual void set_Target(string value);
    public void AddMapping(LevelColors mapping);
    protected virtual void Append(LoggingEvent loggingEvent);
    protected virtual bool get_RequiresLayout();
    public virtual void ActivateOptions();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class log4net.Appender.AppenderCollection : object {
    private static int DEFAULT_CAPACITY;
    private IAppender[] m_array;
    private int m_count;
    private int m_version;
    public static AppenderCollection EmptyCollection;
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public IAppender Item { get; public set; }
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public int Capacity { get; public set; }
    [NullableAttribute("2")]
private object System.Collections.IList.Item { get; private set; }
    public AppenderCollection(int capacity);
    public AppenderCollection(AppenderCollection c);
    public AppenderCollection(IAppender[] a);
    public AppenderCollection(ICollection col);
    protected internal AppenderCollection(Tag _);
    private static AppenderCollection();
    public static AppenderCollection ReadOnly(AppenderCollection list);
    public virtual int get_Count();
    public virtual void CopyTo(IAppender[] array);
    public virtual void CopyTo(IAppender[] array, int start);
    public virtual bool get_IsSynchronized();
    public virtual object get_SyncRoot();
    public virtual IAppender get_Item(int index);
    public virtual void set_Item(int index, IAppender value);
    private sealed virtual override void System.Collections.Generic.ICollection<log4net.Appender.IAppender>.Add(IAppender item);
    public virtual int Add(IAppender item);
    public virtual void Clear();
    public virtual object Clone();
    public virtual bool Contains(IAppender item);
    public virtual int IndexOf(IAppender item);
    public virtual void Insert(int index, IAppender item);
    public virtual void Remove(IAppender item);
    private sealed virtual override bool System.Collections.Generic.ICollection<log4net.Appender.IAppender>.Remove(IAppender item);
    public virtual void RemoveAt(int index);
    public virtual bool get_IsFixedSize();
    public virtual bool get_IsReadOnly();
    public virtual IEnumerator`1<IAppender> GetEnumerator();
    public virtual int get_Capacity();
    public virtual void set_Capacity(int value);
    public virtual int AddRange(AppenderCollection x);
    public virtual int AddRange(IAppender[] x);
    public virtual int AddRange(ICollection col);
    public virtual void TrimToSize();
    public virtual IAppender[] ToArray();
    private void ValidateIndex(int i, bool allowEqualEnd);
    private void EnsureCapacity(int min);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int start);
    [NullableContextAttribute("2")]
private sealed virtual override object System.Collections.IList.get_Item(int i);
    [NullableContextAttribute("2")]
private sealed virtual override void System.Collections.IList.set_Item(int i, object value);
    [NullableContextAttribute("2")]
private sealed virtual override int System.Collections.IList.Add(object x);
    [NullableContextAttribute("2")]
private sealed virtual override bool System.Collections.IList.Contains(object x);
    [NullableContextAttribute("2")]
private sealed virtual override int System.Collections.IList.IndexOf(object x);
    [NullableContextAttribute("2")]
private sealed virtual override void System.Collections.IList.Insert(int pos, object x);
    [NullableContextAttribute("2")]
private sealed virtual override void System.Collections.IList.Remove(object x);
    private sealed virtual override void System.Collections.IList.RemoveAt(int pos);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class log4net.Appender.AppenderSkeleton : object {
    [CompilerGeneratedAttribute]
private Level <Threshold>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IFilter <FilterHead>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ILayout <Layout>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    private IErrorHandler m_errorHandler;
    [NullableAttribute("2")]
private IFilter m_tailFilter;
    private bool m_closed;
    private bool m_recursiveGuard;
    [CompilerGeneratedAttribute]
private object <LockObj>k__BackingField;
    [NullableAttribute("2")]
private ReusableStringWriter m_renderWriter;
    private static int c_renderBufferSize;
    private static int c_renderBufferMaxCapacity;
    private static Type declaringType;
    public Level Threshold { get; public set; }
    public IErrorHandler ErrorHandler { get; public set; }
    [NullableAttribute("2")]
public IFilter FilterHead { get; private set; }
    [NullableAttribute("2")]
public ILayout Layout { get; public set; }
    public string Name { get; public set; }
    protected bool RequiresLayout { get; }
    protected object LockObj { get; }
    private static AppenderSkeleton();
    protected virtual override void Finalize();
    [CompilerGeneratedAttribute]
public Level get_Threshold();
    [CompilerGeneratedAttribute]
public void set_Threshold(Level value);
    public virtual IErrorHandler get_ErrorHandler();
    public virtual void set_ErrorHandler(IErrorHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual IFilter get_FilterHead();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_FilterHead(IFilter value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual ILayout get_Layout();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual void set_Layout(ILayout value);
    public virtual void ActivateOptions();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Name(string value);
    public sealed virtual void Close();
    public sealed virtual void DoAppend(LoggingEvent loggingEvent);
    public sealed virtual void DoAppend(LoggingEvent[] loggingEvents);
    protected virtual bool FilterEvent(LoggingEvent loggingEvent);
    public virtual void AddFilter(IFilter filter);
    public virtual void ClearFilters();
    [NullableContextAttribute("2")]
protected virtual bool IsAsSevereAsThreshold(Level level);
    protected virtual void OnClose();
    protected abstract virtual void Append(LoggingEvent loggingEvent);
    protected virtual void Append(LoggingEvent[] loggingEvents);
    protected virtual void Append(IEnumerable`1<LoggingEvent> loggingEvents);
    protected virtual bool PreAppendCheck();
    protected string RenderLoggingEvent(LoggingEvent loggingEvent);
    protected void RenderLoggingEvent(TextWriter writer, LoggingEvent loggingEvent);
    protected virtual bool get_RequiresLayout();
    public virtual bool Flush(int millisecondsTimeout);
    [CompilerGeneratedAttribute]
protected object get_LockObj();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class log4net.Appender.AspNetTraceAppender : AppenderSkeleton {
    [CompilerGeneratedAttribute]
private PatternLayout <Category>k__BackingField;
    protected bool RequiresLayout { get; }
    public PatternLayout Category { get; public set; }
    protected virtual void Append(LoggingEvent loggingEvent);
    protected virtual bool get_RequiresLayout();
    [CompilerGeneratedAttribute]
public PatternLayout get_Category();
    [CompilerGeneratedAttribute]
public void set_Category(PatternLayout value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class log4net.Appender.BufferingAppenderSkeleton : AppenderSkeleton {
    [CompilerGeneratedAttribute]
private bool <Lossy>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BufferSize>k__BackingField;
    [CompilerGeneratedAttribute]
private ITriggeringEventEvaluator <Evaluator>k__BackingField;
    [CompilerGeneratedAttribute]
private ITriggeringEventEvaluator <LossyEvaluator>k__BackingField;
    [CompilerGeneratedAttribute]
private FixFlags <Fix>k__BackingField;
    private static int DEFAULT_BUFFER_SIZE;
    private CyclicBuffer m_cb;
    private bool m_eventMustBeFixed;
    public bool Lossy { get; public set; }
    public int BufferSize { get; public set; }
    public ITriggeringEventEvaluator Evaluator { get; public set; }
    public ITriggeringEventEvaluator LossyEvaluator { get; public set; }
    public FixFlags Fix { get; public set; }
    protected BufferingAppenderSkeleton(bool eventMustBeFixed);
    [CompilerGeneratedAttribute]
public bool get_Lossy();
    [CompilerGeneratedAttribute]
public void set_Lossy(bool value);
    [CompilerGeneratedAttribute]
public int get_BufferSize();
    [CompilerGeneratedAttribute]
public void set_BufferSize(int value);
    [CompilerGeneratedAttribute]
public ITriggeringEventEvaluator get_Evaluator();
    [CompilerGeneratedAttribute]
public void set_Evaluator(ITriggeringEventEvaluator value);
    [CompilerGeneratedAttribute]
public ITriggeringEventEvaluator get_LossyEvaluator();
    [CompilerGeneratedAttribute]
public void set_LossyEvaluator(ITriggeringEventEvaluator value);
    [CompilerGeneratedAttribute]
public virtual FixFlags get_Fix();
    [CompilerGeneratedAttribute]
public virtual void set_Fix(FixFlags value);
    public virtual bool Flush(int millisecondsTimeout);
    public virtual void Flush();
    public virtual void Flush(bool flushLossyBuffer);
    public virtual void ActivateOptions();
    protected virtual void OnClose();
    [NullableContextAttribute("1")]
protected virtual void Append(LoggingEvent loggingEvent);
    [NullableContextAttribute("1")]
protected virtual void SendFromBuffer(LoggingEvent firstLoggingEvent, CyclicBuffer buffer);
    [NullableContextAttribute("1")]
protected abstract virtual void SendBuffer(LoggingEvent[] events);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class log4net.Appender.BufferingForwardingAppender : BufferingAppenderSkeleton {
    [NullableAttribute("2")]
private AppenderAttachedImpl m_appenderAttachedImpl;
    public AppenderCollection Appenders { get; }
    protected virtual void OnClose();
    protected virtual void SendBuffer(LoggingEvent[] events);
    public virtual void AddAppender(IAppender newAppender);
    public virtual AppenderCollection get_Appenders();
    [NullableContextAttribute("2")]
public virtual IAppender GetAppender(string name);
    public virtual void RemoveAllAppenders();
    [NullableContextAttribute("2")]
public virtual IAppender RemoveAppender(IAppender appender);
    [NullableContextAttribute("2")]
public virtual IAppender RemoveAppender(string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class log4net.Appender.ColoredConsoleAppender : AppenderSkeleton {
    private static Char[] windowsNewline;
    public static string ConsoleOut;
    public static string ConsoleError;
    private bool writeToErrorStream;
    private LevelMapping levelMapping;
    [NullableAttribute("2")]
private StreamWriter consoleOutputWriter;
    private static UInt32 STD_OUTPUT_HANDLE;
    private static UInt32 STD_ERROR_HANDLE;
    public string Target { get; public set; }
    protected bool RequiresLayout { get; }
    private static ColoredConsoleAppender();
    public virtual string get_Target();
    public virtual void set_Target(string value);
    public void AddMapping(LevelColors mapping);
    [SecuritySafeCriticalAttribute]
protected virtual void Append(LoggingEvent loggingEvent);
    protected virtual bool get_RequiresLayout();
    [SecuritySafeCriticalAttribute]
public virtual void ActivateOptions();
    [DefaultDllImportSearchPathsAttribute("2048")]
private static int GetConsoleOutputCP();
    [DefaultDllImportSearchPathsAttribute("2048")]
private static bool SetConsoleTextAttribute(IntPtr consoleHandle, ushort attributes);
    [DefaultDllImportSearchPathsAttribute("2048")]
private static bool GetConsoleScreenBufferInfo(IntPtr consoleHandle, CONSOLE_SCREEN_BUFFER_INFO& bufferInfo);
    [DefaultDllImportSearchPathsAttribute("2048")]
private static IntPtr GetStdHandle(UInt32 type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class log4net.Appender.ConsoleAppender : AppenderSkeleton {
    public static string ConsoleOut;
    public static string ConsoleError;
    private bool m_writeToErrorStream;
    public string Target { get; public set; }
    protected bool RequiresLayout { get; }
    public virtual string get_Target();
    public virtual void set_Target(string value);
    protected virtual void Append(LoggingEvent loggingEvent);
    protected virtual bool get_RequiresLayout();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class log4net.Appender.DebugAppender : AppenderSkeleton {
    [CompilerGeneratedAttribute]
private bool <ImmediateFlush>k__BackingField;
    [CompilerGeneratedAttribute]
private PatternLayout <Category>k__BackingField;
    public bool ImmediateFlush { get; public set; }
    public PatternLayout Category { get; public set; }
    protected bool RequiresLayout { get; }
    [CompilerGeneratedAttribute]
public bool get_ImmediateFlush();
    [CompilerGeneratedAttribute]
public void set_ImmediateFlush(bool value);
    [CompilerGeneratedAttribute]
public PatternLayout get_Category();
    [CompilerGeneratedAttribute]
public void set_Category(PatternLayout value);
    public virtual bool Flush(int millisecondsTimeout);
    [NullableContextAttribute("1")]
protected virtual void Append(LoggingEvent loggingEvent);
    protected virtual bool get_RequiresLayout();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class log4net.Appender.EventLogAppender : AppenderSkeleton {
    [CompilerGeneratedAttribute]
private string <LogName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApplicationName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MachineName>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private SecurityContext <SecurityContext>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EventId>k__BackingField;
    [CompilerGeneratedAttribute]
private short <Category>k__BackingField;
    private LevelMapping m_levelMapping;
    private static Type declaringType;
    private static int MAX_EVENTLOG_MESSAGE_SIZE_DEFAULT;
    private static int MAX_EVENTLOG_MESSAGE_SIZE_VISTA_OR_NEWER;
    private static int MAX_EVENTLOG_MESSAGE_SIZE;
    public string LogName { get; public set; }
    public string ApplicationName { get; public set; }
    public string MachineName { get; }
    [NullableAttribute("2")]
public SecurityContext SecurityContext { get; public set; }
    public int EventId { get; public set; }
    public short Category { get; public set; }
    protected bool RequiresLayout { get; }
    private static EventLogAppender();
    [CompilerGeneratedAttribute]
public string get_LogName();
    [CompilerGeneratedAttribute]
public void set_LogName(string value);
    [CompilerGeneratedAttribute]
public string get_ApplicationName();
    [CompilerGeneratedAttribute]
public void set_ApplicationName(string value);
    [CompilerGeneratedAttribute]
public string get_MachineName();
    public void AddMapping(Level2EventLogEntryType mapping);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public SecurityContext get_SecurityContext();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_SecurityContext(SecurityContext value);
    [CompilerGeneratedAttribute]
public int get_EventId();
    [CompilerGeneratedAttribute]
public void set_EventId(int value);
    [CompilerGeneratedAttribute]
public short get_Category();
    [CompilerGeneratedAttribute]
public void set_Category(short value);
    public virtual void ActivateOptions();
    private static void CreateEventSource(string source, string logName, string machineName);
    protected virtual void Append(LoggingEvent loggingEvent);
    protected virtual bool get_RequiresLayout();
    [NullableContextAttribute("2")]
public virtual EventLogEntryType GetEntryType(Level level);
    private static int GetMaxEventLogMessageSize();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class log4net.Appender.FileAppender : TextWriterAppender {
    private static Type defaultLockingModelType;
    [CompilerGeneratedAttribute]
private bool <AppendToFile>k__BackingField;
    [CompilerGeneratedAttribute]
private Encoding <Encoding>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private SecurityContext <SecurityContext>k__BackingField;
    [CompilerGeneratedAttribute]
private LockingModelBase <LockingModel>k__BackingField;
    [NullableAttribute("2")]
private string m_fileName;
    [NullableAttribute("2")]
private LockingStream m_stream;
    private static Type declaringType;
    [NullableAttribute("2")]
public string File { get; public set; }
    public bool AppendToFile { get; public set; }
    public Encoding Encoding { get; public set; }
    [NullableAttribute("2")]
public SecurityContext SecurityContext { get; public set; }
    public LockingModelBase LockingModel { get; public set; }
    private static FileAppender();
    [NullableContextAttribute("0")]
public static void SetDefaultLockingModelType();
    [NullableContextAttribute("2")]
public virtual string get_File();
    [NullableContextAttribute("2")]
public virtual void set_File(string value);
    [CompilerGeneratedAttribute]
public bool get_AppendToFile();
    [CompilerGeneratedAttribute]
public void set_AppendToFile(bool value);
    [CompilerGeneratedAttribute]
public Encoding get_Encoding();
    [CompilerGeneratedAttribute]
public void set_Encoding(Encoding value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public SecurityContext get_SecurityContext();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_SecurityContext(SecurityContext value);
    [CompilerGeneratedAttribute]
public LockingModelBase get_LockingModel();
    [CompilerGeneratedAttribute]
public void set_LockingModel(LockingModelBase value);
    public virtual void ActivateOptions();
    protected virtual void Reset();
    protected virtual void OnClose();
    protected virtual void PrepareWriter();
    protected virtual void Append(LoggingEvent loggingEvent);
    protected virtual void Append(LoggingEvent[] loggingEvents);
    protected virtual void WriteFooter();
    protected virtual void WriteHeader();
    protected virtual void CloseWriter();
    protected void CloseFile();
    protected virtual void SafeOpenFile(string fileName, bool append);
    protected virtual void OpenFile(string fileName, bool append);
    protected virtual void SetQWForFiles(Stream fileStream);
    protected virtual void SetQWForFiles(TextWriter writer);
    protected static string ConvertToFullPath(string path);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class log4net.Appender.ForwardingAppender : AppenderSkeleton {
    [NullableAttribute("2")]
private AppenderAttachedImpl m_appenderAttachedImpl;
    public AppenderCollection Appenders { get; }
    protected virtual void OnClose();
    protected virtual void Append(LoggingEvent loggingEvent);
    protected virtual void Append(LoggingEvent[] loggingEvents);
    public virtual void AddAppender(IAppender newAppender);
    public virtual AppenderCollection get_Appenders();
    [NullableContextAttribute("2")]
public virtual IAppender GetAppender(string name);
    public virtual void RemoveAllAppenders();
    [NullableContextAttribute("2")]
public virtual IAppender RemoveAppender(IAppender appender);
    [NullableContextAttribute("2")]
public virtual IAppender RemoveAppender(string name);
}
[NullableContextAttribute("1")]
public interface log4net.Appender.IAppender {
    public string Name { get; public set; }
    public abstract virtual void Close();
    public abstract virtual void DoAppend(LoggingEvent loggingEvent);
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
}
public interface log4net.Appender.IBulkAppender {
    [NullableContextAttribute("1")]
public abstract virtual void DoAppend(LoggingEvent[] loggingEvents);
}
public interface log4net.Appender.IFlushable {
    public abstract virtual bool Flush(int millisecondsTimeout);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class log4net.Appender.LocalSyslogAppender : AppenderSkeleton {
    [CompilerGeneratedAttribute]
private string <Identity>k__BackingField;
    [CompilerGeneratedAttribute]
private SyslogFacility <Facility>k__BackingField;
    private IntPtr m_handleToIdentity;
    [NullableAttribute("1")]
private LevelMapping m_levelMapping;
    public string Identity { get; public set; }
    public SyslogFacility Facility { get; public set; }
    protected bool RequiresLayout { get; }
    [CompilerGeneratedAttribute]
public string get_Identity();
    [CompilerGeneratedAttribute]
public void set_Identity(string value);
    [CompilerGeneratedAttribute]
public SyslogFacility get_Facility();
    [CompilerGeneratedAttribute]
public void set_Facility(SyslogFacility value);
    [NullableContextAttribute("1")]
public void AddMapping(LevelSeverity mapping);
    [SecuritySafeCriticalAttribute]
public virtual void ActivateOptions();
    [NullableContextAttribute("1")]
[SecuritySafeCriticalAttribute]
protected virtual void Append(LoggingEvent loggingEvent);
    [SecuritySafeCriticalAttribute]
protected virtual void OnClose();
    protected virtual bool get_RequiresLayout();
    protected virtual SyslogSeverity GetSeverity(Level level);
    private static int GeneratePriority(SyslogFacility facility, SyslogSeverity severity);
    private static void openlog(IntPtr ident, int option, SyslogFacility facility);
    [NullableContextAttribute("1")]
private static void syslog(int priority, string format, string message);
    private static void closelog();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class log4net.Appender.ManagedColoredConsoleAppender : AppenderSkeleton {
    public static string ConsoleOut;
    public static string ConsoleError;
    private bool m_writeToErrorStream;
    private LevelMapping m_levelMapping;
    public string Target { get; public set; }
    protected bool RequiresLayout { get; }
    public virtual string get_Target();
    public virtual void set_Target(string value);
    public void AddMapping(LevelColors mapping);
    protected virtual void Append(LoggingEvent loggingEvent);
    protected virtual bool get_RequiresLayout();
    public virtual void ActivateOptions();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class log4net.Appender.MemoryAppender : AppenderSkeleton {
    [CompilerGeneratedAttribute]
private FixFlags <Fix>k__BackingField;
    protected List`1<LoggingEvent> m_eventsList;
    private object m_lockObj;
    public FixFlags Fix { get; public set; }
    public virtual LoggingEvent[] GetEvents();
    [CompilerGeneratedAttribute]
public virtual FixFlags get_Fix();
    [CompilerGeneratedAttribute]
public virtual void set_Fix(FixFlags value);
    protected virtual void Append(LoggingEvent loggingEvent);
    public virtual void Clear();
    public virtual LoggingEvent[] PopAllEvents();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class log4net.Appender.OutputDebugStringAppender : AppenderSkeleton {
    protected bool RequiresLayout { get; }
    [SecuritySafeCriticalAttribute]
protected virtual void Append(LoggingEvent loggingEvent);
    protected virtual bool get_RequiresLayout();
    [DefaultDllImportSearchPathsAttribute("2048")]
protected static void OutputDebugString(string message);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class log4net.Appender.RemoteSyslogAppender : UdpAppender {
    private static int DefaultSyslogPort;
    [CompilerGeneratedAttribute]
private PatternLayout <Identity>k__BackingField;
    [CompilerGeneratedAttribute]
private SyslogFacility <Facility>k__BackingField;
    [NullableAttribute("1")]
private LevelMapping m_levelMapping;
    public PatternLayout Identity { get; public set; }
    public SyslogFacility Facility { get; public set; }
    [CompilerGeneratedAttribute]
public PatternLayout get_Identity();
    [CompilerGeneratedAttribute]
public void set_Identity(PatternLayout value);
    [CompilerGeneratedAttribute]
public SyslogFacility get_Facility();
    [CompilerGeneratedAttribute]
public void set_Facility(SyslogFacility value);
    [NullableContextAttribute("1")]
public void AddMapping(LevelSeverity mapping);
    [NullableContextAttribute("1")]
protected virtual void Append(LoggingEvent loggingEvent);
    [NullableContextAttribute("1")]
protected virtual void AppendMessage(string message, Int32& characterIndex, StringBuilder builder);
    public virtual void ActivateOptions();
    protected virtual SyslogSeverity GetSeverity(Level level);
    public static int GeneratePriority(SyslogFacility facility, SyslogSeverity severity);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class log4net.Appender.RollingFileAppender : FileAppender {
    [CompilerGeneratedAttribute]
private IDateTime <DateTimeStrategy>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <DatePattern>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxSizeRollBackups>k__BackingField;
    [CompilerGeneratedAttribute]
private long <MaxFileSize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CountDirection>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreserveLogFileNameExtension>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StaticLogFileName>k__BackingField;
    private static Type declaringType;
    [NullableAttribute("2")]
private string m_scheduledFilename;
    private DateTime m_nextCheck;
    private DateTime m_now;
    private RollPoint m_rollPoint;
    [CompilerGeneratedAttribute]
private int <CurrentSizeRollBackups>k__BackingField;
    private RollingMode m_rollingStyle;
    private bool m_rollDate;
    private bool m_rollSize;
    [NullableAttribute("2")]
private string m_baseFileName;
    [NullableAttribute("2")]
private Mutex m_mutexForRolling;
    private static DateTime s_date1970;
    public IDateTime DateTimeStrategy { get; public set; }
    [NullableAttribute("2")]
public string DatePattern { get; public set; }
    public int MaxSizeRollBackups { get; public set; }
    public long MaxFileSize { get; public set; }
    public string MaximumFileSize { get; public set; }
    public int CountDirection { get; public set; }
    public RollingMode RollingStyle { get; public set; }
    public bool PreserveLogFileNameExtension { get; public set; }
    public bool StaticLogFileName { get; public set; }
    public int CurrentSizeRollBackups { get; public set; }
    private static RollingFileAppender();
    protected virtual override void Finalize();
    [CompilerGeneratedAttribute]
public IDateTime get_DateTimeStrategy();
    [CompilerGeneratedAttribute]
public void set_DateTimeStrategy(IDateTime value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_DatePattern();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_DatePattern(string value);
    [CompilerGeneratedAttribute]
public int get_MaxSizeRollBackups();
    [CompilerGeneratedAttribute]
public void set_MaxSizeRollBackups(int value);
    [CompilerGeneratedAttribute]
public long get_MaxFileSize();
    [CompilerGeneratedAttribute]
public void set_MaxFileSize(long value);
    public string get_MaximumFileSize();
    public void set_MaximumFileSize(string value);
    [CompilerGeneratedAttribute]
public int get_CountDirection();
    [CompilerGeneratedAttribute]
public void set_CountDirection(int value);
    public RollingMode get_RollingStyle();
    public void set_RollingStyle(RollingMode value);
    [CompilerGeneratedAttribute]
public bool get_PreserveLogFileNameExtension();
    [CompilerGeneratedAttribute]
public void set_PreserveLogFileNameExtension(bool value);
    [CompilerGeneratedAttribute]
public bool get_StaticLogFileName();
    [CompilerGeneratedAttribute]
public void set_StaticLogFileName(bool value);
    protected virtual void SetQWForFiles(TextWriter writer);
    protected virtual void Append(LoggingEvent loggingEvent);
    protected virtual void Append(LoggingEvent[] loggingEvents);
    protected virtual void AdjustFileBeforeAppend();
    protected virtual void OpenFile(string fileName, bool append);
    protected string GetNextOutputFileName(string fileName);
    private void DetermineCurSizeRollBackups();
    private string GetWildcardPatternForFile(string baseFileName);
    protected List`1<string> GetExistingFiles(string baseFilePath);
    private void RollOverIfDateBoundaryCrossing();
    protected void ExistingInit();
    private void InitializeFromOneFile(string baseFile, string curFileName);
    private int GetBackUpIndex(string curFileName);
    [EditorBrowsableAttribute("1")]
public void InitializeRollBackups(string baseFile, List`1<string> arrayFiles);
    [EditorBrowsableAttribute("1")]
public RollPoint ComputeCheckPeriod(string datePattern);
    public virtual void ActivateOptions();
    private string CombinePath(string path1, string path2);
    protected void RollOverTime(bool fileIsOpen);
    protected void RollFile(string fromFile, string toFile);
    protected bool FileExists(string path);
    protected void DeleteFile(string fileName);
    protected void RollOverSize();
    protected void RollOverRenameFiles(string baseFileName);
    protected DateTime NextCheckDate(DateTime currentDateTime, RollPoint rollPoint);
    [CompilerGeneratedAttribute]
public int get_CurrentSizeRollBackups();
    [CompilerGeneratedAttribute]
public void set_CurrentSizeRollBackups(int value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class log4net.Appender.SmtpAppender : BufferingAppenderSkeleton {
    [CompilerGeneratedAttribute]
private string <From>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Subject>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SmtpHost>k__BackingField;
    [CompilerGeneratedAttribute]
private SmtpAuthentication <Authentication>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Username>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Port>k__BackingField;
    [CompilerGeneratedAttribute]
private MailPriority <Priority>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableSsl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReplyTo>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Encoding <SubjectEncoding>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Encoding <BodyEncoding>k__BackingField;
    private string m_to;
    private string m_cc;
    private string m_bcc;
    [NullableAttribute("1")]
private static Char[] ADDRESS_DELIMITERS;
    public string To { get; public set; }
    public string Cc { get; public set; }
    public string Bcc { get; public set; }
    public string From { get; public set; }
    public string Subject { get; public set; }
    public string SmtpHost { get; public set; }
    public SmtpAuthentication Authentication { get; public set; }
    public string Username { get; public set; }
    public string Password { get; public set; }
    public int Port { get; public set; }
    public MailPriority Priority { get; public set; }
    public bool EnableSsl { get; public set; }
    public string ReplyTo { get; public set; }
    [NullableAttribute("1")]
public Encoding SubjectEncoding { get; public set; }
    [NullableAttribute("1")]
public Encoding BodyEncoding { get; public set; }
    protected bool RequiresLayout { get; }
    private static SmtpAppender();
    public string get_To();
    public void set_To(string value);
    public string get_Cc();
    public void set_Cc(string value);
    public string get_Bcc();
    public void set_Bcc(string value);
    [CompilerGeneratedAttribute]
public string get_From();
    [CompilerGeneratedAttribute]
public void set_From(string value);
    [CompilerGeneratedAttribute]
public string get_Subject();
    [CompilerGeneratedAttribute]
public void set_Subject(string value);
    [CompilerGeneratedAttribute]
public string get_SmtpHost();
    [CompilerGeneratedAttribute]
public void set_SmtpHost(string value);
    [CompilerGeneratedAttribute]
public SmtpAuthentication get_Authentication();
    [CompilerGeneratedAttribute]
public void set_Authentication(SmtpAuthentication value);
    [CompilerGeneratedAttribute]
public string get_Username();
    [CompilerGeneratedAttribute]
public void set_Username(string value);
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
public void set_Password(string value);
    [CompilerGeneratedAttribute]
public int get_Port();
    [CompilerGeneratedAttribute]
public void set_Port(int value);
    [CompilerGeneratedAttribute]
public MailPriority get_Priority();
    [CompilerGeneratedAttribute]
public void set_Priority(MailPriority value);
    [CompilerGeneratedAttribute]
public bool get_EnableSsl();
    [CompilerGeneratedAttribute]
public void set_EnableSsl(bool value);
    [CompilerGeneratedAttribute]
public string get_ReplyTo();
    [CompilerGeneratedAttribute]
public void set_ReplyTo(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public Encoding get_SubjectEncoding();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_SubjectEncoding(Encoding value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public Encoding get_BodyEncoding();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_BodyEncoding(Encoding value);
    [NullableContextAttribute("1")]
protected virtual void SendBuffer(LoggingEvent[] events);
    protected virtual bool get_RequiresLayout();
    [NullableContextAttribute("1")]
protected virtual void SendEmail(string messageBody);
    private static string MaybeTrimSeparators(string s);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class log4net.Appender.SmtpPickupDirAppender : BufferingAppenderSkeleton {
    [CompilerGeneratedAttribute]
private string <To>k__BackingField;
    [CompilerGeneratedAttribute]
private string <From>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Subject>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PickupDir>k__BackingField;
    [CompilerGeneratedAttribute]
private SecurityContext <SecurityContext>k__BackingField;
    [NullableAttribute("1")]
private string m_fileExtension;
    public string To { get; public set; }
    public string From { get; public set; }
    public string Subject { get; public set; }
    public string PickupDir { get; public set; }
    public string FileExtension { get; public set; }
    public SecurityContext SecurityContext { get; public set; }
    protected bool RequiresLayout { get; }
    [CompilerGeneratedAttribute]
public string get_To();
    [CompilerGeneratedAttribute]
public void set_To(string value);
    [CompilerGeneratedAttribute]
public string get_From();
    [CompilerGeneratedAttribute]
public void set_From(string value);
    [CompilerGeneratedAttribute]
public string get_Subject();
    [CompilerGeneratedAttribute]
public void set_Subject(string value);
    [CompilerGeneratedAttribute]
public string get_PickupDir();
    [CompilerGeneratedAttribute]
public void set_PickupDir(string value);
    public string get_FileExtension();
    public void set_FileExtension(string value);
    [CompilerGeneratedAttribute]
public SecurityContext get_SecurityContext();
    [CompilerGeneratedAttribute]
public void set_SecurityContext(SecurityContext value);
    [NullableContextAttribute("1")]
protected virtual void SendBuffer(LoggingEvent[] events);
    public virtual void ActivateOptions();
    protected virtual bool get_RequiresLayout();
    [NullableContextAttribute("1")]
protected static string ConvertToFullPath(string path);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class log4net.Appender.TelnetAppender : AppenderSkeleton {
    [NullableAttribute("2")]
private SocketHandler m_handler;
    private int m_listeningPort;
    private static Type declaringType;
    public int Port { get; public set; }
    protected bool RequiresLayout { get; }
    private static TelnetAppender();
    public int get_Port();
    public void set_Port(int value);
    protected virtual void OnClose();
    protected virtual bool get_RequiresLayout();
    public virtual void ActivateOptions();
    protected virtual void Append(LoggingEvent loggingEvent);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class log4net.Appender.TextWriterAppender : AppenderSkeleton {
    [CompilerGeneratedAttribute]
private bool <ImmediateFlush>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private QuietTextWriter <QuietWriter>k__BackingField;
    private object m_lockObj;
    private static Type declaringType;
    public bool ImmediateFlush { get; public set; }
    [NullableAttribute("2")]
public TextWriter Writer { get; public set; }
    public IErrorHandler ErrorHandler { get; public set; }
    protected bool RequiresLayout { get; }
    [NullableAttribute("2")]
protected QuietTextWriter QuietWriter { get; protected set; }
    private static TextWriterAppender();
    [CompilerGeneratedAttribute]
public bool get_ImmediateFlush();
    [CompilerGeneratedAttribute]
public void set_ImmediateFlush(bool value);
    [NullableContextAttribute("2")]
public virtual TextWriter get_Writer();
    [NullableContextAttribute("2")]
public virtual void set_Writer(TextWriter value);
    protected virtual bool PreAppendCheck();
    protected virtual void Append(LoggingEvent loggingEvent);
    protected virtual void Append(LoggingEvent[] loggingEvents);
    protected virtual void OnClose();
    public virtual IErrorHandler get_ErrorHandler();
    public virtual void set_ErrorHandler(IErrorHandler value);
    protected virtual bool get_RequiresLayout();
    protected virtual void WriteFooterAndCloseWriter();
    protected virtual void CloseWriter();
    protected virtual void Reset();
    protected virtual void WriteFooter();
    protected virtual void WriteHeader();
    protected virtual void PrepareWriter();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected QuietTextWriter get_QuietWriter();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected void set_QuietWriter(QuietTextWriter value);
    public virtual bool Flush(int millisecondsTimeout);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class log4net.Appender.TraceAppender : AppenderSkeleton {
    [CompilerGeneratedAttribute]
private bool <ImmediateFlush>k__BackingField;
    [CompilerGeneratedAttribute]
private PatternLayout <Category>k__BackingField;
    public bool ImmediateFlush { get; public set; }
    public PatternLayout Category { get; public set; }
    protected bool RequiresLayout { get; }
    [CompilerGeneratedAttribute]
public bool get_ImmediateFlush();
    [CompilerGeneratedAttribute]
public void set_ImmediateFlush(bool value);
    [CompilerGeneratedAttribute]
public PatternLayout get_Category();
    [CompilerGeneratedAttribute]
public void set_Category(PatternLayout value);
    protected virtual void Append(LoggingEvent loggingEvent);
    protected virtual bool get_RequiresLayout();
    public virtual bool Flush(int millisecondsTimeout);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class log4net.Appender.UdpAppender : AppenderSkeleton {
    [CompilerGeneratedAttribute]
private IPAddress <RemoteAddress>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Encoding <Encoding>k__BackingField;
    [CompilerGeneratedAttribute]
private UdpClient <Client>k__BackingField;
    [CompilerGeneratedAttribute]
private IPEndPoint <RemoteEndPoint>k__BackingField;
    private int m_remotePort;
    private int m_localPort;
    public IPAddress RemoteAddress { get; public set; }
    public int RemotePort { get; public set; }
    public int LocalPort { get; public set; }
    [NullableAttribute("1")]
public Encoding Encoding { get; public set; }
    protected UdpClient Client { get; protected set; }
    protected IPEndPoint RemoteEndPoint { get; protected set; }
    protected bool RequiresLayout { get; }
    [CompilerGeneratedAttribute]
public IPAddress get_RemoteAddress();
    [CompilerGeneratedAttribute]
public void set_RemoteAddress(IPAddress value);
    public int get_RemotePort();
    public void set_RemotePort(int value);
    public int get_LocalPort();
    public void set_LocalPort(int value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public Encoding get_Encoding();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_Encoding(Encoding value);
    [CompilerGeneratedAttribute]
protected UdpClient get_Client();
    [CompilerGeneratedAttribute]
protected void set_Client(UdpClient value);
    [CompilerGeneratedAttribute]
protected IPEndPoint get_RemoteEndPoint();
    [CompilerGeneratedAttribute]
protected void set_RemoteEndPoint(IPEndPoint value);
    public virtual void ActivateOptions();
    [NullableContextAttribute("1")]
protected virtual void Append(LoggingEvent loggingEvent);
    protected virtual bool get_RequiresLayout();
    protected virtual void OnClose();
    protected virtual void InitializeClientConnection();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("1")]
public class log4net.Config.AliasRepositoryAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    public AliasRepositoryAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class log4net.Config.BasicConfigurator : object {
    private static Type declaringType;
    private static BasicConfigurator();
    public static ICollection Configure();
    public static ICollection Configure(IAppender[] appenders);
    public static ICollection Configure(ILoggerRepository repository);
    public static ICollection Configure(ILoggerRepository repository, IAppender[] appenders);
    private static void InternalConfigure(ILoggerRepository repository, IAppender[] appenders);
}
[AttributeUsageAttribute("1")]
public abstract class log4net.Config.ConfiguratorAttribute : Attribute {
    private int m_priority;
    protected ConfiguratorAttribute(int priority);
    [NullableContextAttribute("1")]
public abstract virtual void Configure(Assembly sourceAssembly, ILoggerRepository targetRepository);
    [NullableContextAttribute("2")]
public sealed virtual int CompareTo(object obj);
}
public class log4net.Config.Log4NetConfigurationSectionHandler : object {
    [NullableContextAttribute("1")]
public sealed virtual object Create(object parent, object configContext, XmlNode section);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("1")]
public class log4net.Config.PluginAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    public Type Type { get; public set; }
    public string TypeName { get; public set; }
    [NullableContextAttribute("1")]
public PluginAttribute(string typeName);
    [NullableContextAttribute("1")]
public PluginAttribute(Type type);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(Type value);
    [CompilerGeneratedAttribute]
public string get_TypeName();
    [CompilerGeneratedAttribute]
public void set_TypeName(string value);
    [NullableContextAttribute("1")]
public sealed virtual IPlugin CreatePlugin();
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("1")]
public class log4net.Config.RepositoryAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <RepositoryType>k__BackingField;
    public string Name { get; public set; }
    public Type RepositoryType { get; public set; }
    [NullableContextAttribute("1")]
public RepositoryAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public Type get_RepositoryType();
    [CompilerGeneratedAttribute]
public void set_RepositoryType(Type value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("1")]
public class log4net.Config.SecurityContextProviderAttribute : ConfiguratorAttribute {
    [CompilerGeneratedAttribute]
private Type <ProviderType>k__BackingField;
    private static Type declaringType;
    public Type ProviderType { get; public set; }
    public SecurityContextProviderAttribute(Type providerType);
    private static SecurityContextProviderAttribute();
    [CompilerGeneratedAttribute]
public Type get_ProviderType();
    [CompilerGeneratedAttribute]
public void set_ProviderType(Type value);
    public virtual void Configure(Assembly sourceAssembly, ILoggerRepository targetRepository);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class log4net.Config.XmlConfigurator : object {
    private static ConcurrentDictionary`2<string, ConfigureAndWatchHandler> m_repositoryName2ConfigAndWatchHandler;
    private static Type declaringType;
    private static XmlConfigurator();
    public static ICollection Configure(ILoggerRepository repository);
    private static void InternalConfigure(ILoggerRepository repository);
    public static ICollection Configure();
    public static ICollection Configure(XmlElement element);
    public static ICollection Configure(FileInfo configFile);
    public static ICollection Configure(Uri configUri);
    public static ICollection Configure(Stream configStream);
    public static ICollection Configure(ILoggerRepository repository, XmlElement element);
    public static ICollection Configure(ILoggerRepository repository, FileInfo configFile);
    private static void InternalConfigure(ILoggerRepository repository, FileInfo configFile);
    public static ICollection Configure(ILoggerRepository repository, Uri configUri);
    private static void InternalConfigure(ILoggerRepository repository, Uri configUri);
    public static ICollection Configure(ILoggerRepository repository, Stream configStream);
    private static void InternalConfigure(ILoggerRepository repository, Stream configStream);
    public static ICollection ConfigureAndWatch(FileInfo configFile);
    public static ICollection ConfigureAndWatch(ILoggerRepository repository, FileInfo configFile);
    private static void InternalConfigureAndWatch(ILoggerRepository repository, FileInfo configFile);
    [NullableContextAttribute("2")]
private static void InternalConfigureFromXml(ILoggerRepository repository, XmlElement element);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("1")]
public class log4net.Config.XmlConfiguratorAttribute : ConfiguratorAttribute {
    [CompilerGeneratedAttribute]
private string <ConfigFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConfigFileExtension>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Watch>k__BackingField;
    [NullableAttribute("1")]
private static Type declaringType;
    public string ConfigFile { get; public set; }
    public string ConfigFileExtension { get; public set; }
    public bool Watch { get; public set; }
    private static XmlConfiguratorAttribute();
    [CompilerGeneratedAttribute]
public string get_ConfigFile();
    [CompilerGeneratedAttribute]
public void set_ConfigFile(string value);
    [CompilerGeneratedAttribute]
public string get_ConfigFileExtension();
    [CompilerGeneratedAttribute]
public void set_ConfigFileExtension(string value);
    [CompilerGeneratedAttribute]
public bool get_Watch();
    [CompilerGeneratedAttribute]
public void set_Watch(bool value);
    [NullableContextAttribute("1")]
public virtual void Configure(Assembly sourceAssembly, ILoggerRepository targetRepository);
    [NullableContextAttribute("1")]
private void ConfigureFromFile(Assembly sourceAssembly, ILoggerRepository targetRepository);
    [NullableContextAttribute("1")]
private void ConfigureFromFile(ILoggerRepository targetRepository, FileInfo configFile);
    [NullableContextAttribute("1")]
private void ConfigureFromUri(ILoggerRepository targetRepository);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class log4net.Core.DefaultRepositorySelector : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private LoggerRepositoryCreationEventHandler LoggerRepositoryCreatedEvent;
    private static Type declaringType;
    private static string DefaultRepositoryName;
    private object m_lockObj;
    private Dictionary`2<string, ILoggerRepository> m_name2repositoryMap;
    private Dictionary`2<Assembly, ILoggerRepository> m_assembly2repositoryMap;
    private Dictionary`2<string, ILoggerRepository> m_alias2repositoryMap;
    private Type m_defaultRepositoryType;
    public DefaultRepositorySelector(Type defaultRepositoryType);
    private static DefaultRepositorySelector();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void add_LoggerRepositoryCreatedEvent(LoggerRepositoryCreationEventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void remove_LoggerRepositoryCreatedEvent(LoggerRepositoryCreationEventHandler value);
    public sealed virtual ILoggerRepository GetRepository(Assembly repositoryAssembly);
    public sealed virtual ILoggerRepository GetRepository(string repositoryName);
    public sealed virtual ILoggerRepository CreateRepository(Assembly repositoryAssembly, Type repositoryType);
    public ILoggerRepository CreateRepository(Assembly repositoryAssembly, Type repositoryType, string repositoryName, bool readAssemblyAttributes);
    public sealed virtual ILoggerRepository CreateRepository(string repositoryName, Type repositoryType);
    public sealed virtual bool ExistsRepository(string repositoryName);
    public sealed virtual ILoggerRepository[] GetAllRepositories();
    public void AliasRepository(string repositoryAlias, ILoggerRepository repositoryTarget);
    protected virtual void OnLoggerRepositoryCreatedEvent(ILoggerRepository repository);
    private void GetInfoForAssembly(Assembly assembly, String& repositoryName, Type& repositoryType);
    private static void ConfigureRepository(Assembly assembly, ILoggerRepository repository);
    private static void LoadPlugins(Assembly assembly, ILoggerRepository repository);
    private void LoadAliases(Assembly assembly, ILoggerRepository repository);
}
public enum log4net.Core.ErrorCode : Enum {
    public int value__;
    public static ErrorCode GenericFailure;
    public static ErrorCode WriteFailure;
    public static ErrorCode FlushFailure;
    public static ErrorCode CloseFailure;
    public static ErrorCode FileOpenFailure;
    public static ErrorCode MissingLayout;
    public static ErrorCode AddressParseFailure;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class log4net.Core.ExceptionEvaluator : object {
    [CompilerGeneratedAttribute]
private Type <ExceptionType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TriggerOnSubclass>k__BackingField;
    public Type ExceptionType { get; public set; }
    public bool TriggerOnSubclass { get; public set; }
    [NullableContextAttribute("1")]
public ExceptionEvaluator(Type exType, bool triggerOnSubClass);
    [CompilerGeneratedAttribute]
public Type get_ExceptionType();
    [CompilerGeneratedAttribute]
public void set_ExceptionType(Type value);
    [CompilerGeneratedAttribute]
public bool get_TriggerOnSubclass();
    [CompilerGeneratedAttribute]
public void set_TriggerOnSubclass(bool value);
    [NullableContextAttribute("1")]
public sealed virtual bool IsTriggeringEvent(LoggingEvent loggingEvent);
}
[FlagsAttribute]
public enum log4net.Core.FixFlags : Enum {
    public int value__;
    public static FixFlags Mdc;
    public static FixFlags Ndc;
    public static FixFlags Message;
    public static FixFlags ThreadName;
    public static FixFlags LocationInfo;
    public static FixFlags UserName;
    public static FixFlags Domain;
    public static FixFlags Identity;
    public static FixFlags Exception;
    public static FixFlags Properties;
    public static FixFlags None;
    public static FixFlags All;
    public static FixFlags Partial;
}
[NullableContextAttribute("1")]
public interface log4net.Core.IAppenderAttachable {
    public AppenderCollection Appenders { get; }
    public abstract virtual void AddAppender(IAppender appender);
    public abstract virtual AppenderCollection get_Appenders();
    [NullableContextAttribute("2")]
public abstract virtual IAppender GetAppender(string name);
    public abstract virtual void RemoveAllAppenders();
    public abstract virtual IAppender RemoveAppender(IAppender appender);
    public abstract virtual IAppender RemoveAppender(string name);
}
[NullableContextAttribute("1")]
public interface log4net.Core.IErrorHandler {
    public abstract virtual void Error(string message, Exception e, ErrorCode errorCode);
    public abstract virtual void Error(string message, Exception e);
    public abstract virtual void Error(string message);
}
[NullableContextAttribute("2")]
public interface log4net.Core.IFixingRequired {
    public abstract virtual object GetFixedObject();
}
[NullableContextAttribute("2")]
public interface log4net.Core.ILogger {
    [NullableAttribute("1")]
public string Name { get; }
    public ILoggerRepository Repository { get; }
    [NullableContextAttribute("1")]
public abstract virtual string get_Name();
    public abstract virtual void Log(Type callerStackBoundaryDeclaringType, Level level, object message, Exception exception);
    [NullableContextAttribute("1")]
public abstract virtual void Log(LoggingEvent logEvent);
    public abstract virtual bool IsEnabledFor(Level level);
    public abstract virtual ILoggerRepository get_Repository();
}
[NullableContextAttribute("1")]
public interface log4net.Core.ILoggerWrapper {
    public ILogger Logger { get; }
    public abstract virtual ILogger get_Logger();
}
public interface log4net.Core.IOptionHandler {
    public abstract virtual void ActivateOptions();
}
[NullableContextAttribute("1")]
public interface log4net.Core.IRepositorySelector {
    public abstract virtual ILoggerRepository GetRepository(Assembly assembly);
    public abstract virtual ILoggerRepository GetRepository(string repositoryName);
    public abstract virtual ILoggerRepository CreateRepository(Assembly assembly, Type repositoryType);
    public abstract virtual ILoggerRepository CreateRepository(string repositoryName, Type repositoryType);
    public abstract virtual bool ExistsRepository(string repositoryName);
    public abstract virtual ILoggerRepository[] GetAllRepositories();
    [CompilerGeneratedAttribute]
public abstract virtual void add_LoggerRepositoryCreatedEvent(LoggerRepositoryCreationEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_LoggerRepositoryCreatedEvent(LoggerRepositoryCreationEventHandler value);
}
[NullableContextAttribute("1")]
public interface log4net.Core.ITriggeringEventEvaluator {
    public abstract virtual bool IsTriggeringEvent(LoggingEvent loggingEvent);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class log4net.Core.Level : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    public static Level Off;
    public static Level Log4Net_Debug;
    public static Level Emergency;
    public static Level Fatal;
    public static Level Alert;
    public static Level Critical;
    public static Level Severe;
    public static Level Error;
    public static Level Warn;
    public static Level Notice;
    public static Level Info;
    public static Level Debug;
    public static Level Fine;
    public static Level Trace;
    public static Level Finer;
    public static Level Verbose;
    public static Level Finest;
    public static Level All;
    public string Name { get; }
    public int Value { get; }
    public string DisplayName { get; }
    public Level(int level, string levelName, string displayName);
    public Level(int level, string levelName);
    protected Level(SerializationInfo info, StreamingContext context);
    private static Level();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public int get_Value();
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    public virtual string ToString();
    [NullableContextAttribute("2")]
public virtual bool Equals(object o);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(Level other);
    public virtual int GetHashCode();
    [NullableContextAttribute("2")]
public sealed virtual int CompareTo(object r);
    public sealed virtual int CompareTo(Level other);
    [SecurityCriticalAttribute]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    [NullableContextAttribute("2")]
public static bool op_GreaterThan(Level l, Level r);
    [NullableContextAttribute("2")]
public static bool op_LessThan(Level l, Level r);
    [NullableContextAttribute("2")]
public static bool op_GreaterThanOrEqual(Level l, Level r);
    [NullableContextAttribute("2")]
public static bool op_LessThanOrEqual(Level l, Level r);
    [NullableContextAttribute("2")]
public static bool op_Equality(Level l, Level r);
    [NullableContextAttribute("2")]
public static bool op_Inequality(Level l, Level r);
    [NullableContextAttribute("2")]
public static int Compare(Level l, Level r);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class log4net.Core.LevelCollection : object {
    private static int DEFAULT_CAPACITY;
    private Level[] m_array;
    private int m_version;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    public int Count { get; private set; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public Level Item { get; public set; }
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public int Capacity { get; public set; }
    [NullableAttribute("2")]
private object System.Collections.IList.Item { get; private set; }
    public LevelCollection(int capacity);
    public LevelCollection(LevelCollection c);
    public LevelCollection(Level[] a);
    public LevelCollection(ICollection col);
    public LevelCollection(ICollection`1<Level> col);
    protected internal LevelCollection(Tag _);
    public static LevelCollection ReadOnly(LevelCollection list);
    [CompilerGeneratedAttribute]
public virtual int get_Count();
    [CompilerGeneratedAttribute]
private void set_Count(int value);
    public virtual void CopyTo(Level[] array);
    public virtual void CopyTo(Level[] array, int start);
    public virtual bool get_IsSynchronized();
    public virtual object get_SyncRoot();
    public virtual Level get_Item(int index);
    public virtual void set_Item(int index, Level value);
    public virtual int Add(Level item);
    public virtual void Clear();
    public virtual object Clone();
    public virtual bool Contains(Level item);
    public virtual int IndexOf(Level item);
    public virtual void Insert(int index, Level item);
    public virtual void Remove(Level item);
    public virtual void RemoveAt(int index);
    public virtual bool get_IsFixedSize();
    public virtual bool get_IsReadOnly();
    public virtual ILevelCollectionEnumerator GetEnumerator();
    public virtual int get_Capacity();
    public virtual void set_Capacity(int value);
    public virtual int AddRange(LevelCollection x);
    public virtual int AddRange(Level[] x);
    public virtual int AddRange(ICollection col);
    public virtual void TrimToSize();
    private void ValidateIndex(int i);
    private void ValidateIndex(int i, bool allowEqualEnd);
    private void EnsureCapacity(int min);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int start);
    [NullableContextAttribute("2")]
private sealed virtual override object System.Collections.IList.get_Item(int i);
    [NullableContextAttribute("2")]
private sealed virtual override void System.Collections.IList.set_Item(int i, object value);
    [NullableContextAttribute("2")]
private sealed virtual override int System.Collections.IList.Add(object x);
    [NullableContextAttribute("2")]
private sealed virtual override bool System.Collections.IList.Contains(object x);
    [NullableContextAttribute("2")]
private sealed virtual override int System.Collections.IList.IndexOf(object x);
    [NullableContextAttribute("2")]
private sealed virtual override void System.Collections.IList.Insert(int pos, object x);
    [NullableContextAttribute("2")]
private sealed virtual override void System.Collections.IList.Remove(object x);
    private sealed virtual override void System.Collections.IList.RemoveAt(int pos);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class log4net.Core.LevelEvaluator : object {
    [CompilerGeneratedAttribute]
private Level <Threshold>k__BackingField;
    public Level Threshold { get; public set; }
    public LevelEvaluator(Level threshold);
    [CompilerGeneratedAttribute]
public Level get_Threshold();
    [CompilerGeneratedAttribute]
public void set_Threshold(Level value);
    public sealed virtual bool IsTriggeringEvent(LoggingEvent loggingEvent);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class log4net.Core.LevelMap : object {
    private ConcurrentDictionary`2<string, Level> m_mapName2Level;
    [NullableAttribute("2")]
public Level Item { get; }
    public LevelCollection AllLevels { get; }
    public void Clear();
    public Level get_Item(string name);
    public void Add(string name, int value);
    public void Add(string name, int value, string displayName);
    public void Add(Level level);
    public LevelCollection get_AllLevels();
    public Level LookupWithDefault(Level defaultLevel);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class log4net.Core.LocationInfo : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <ClassName>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MethodName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullInfo>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private StackFrameItem[] <StackFrames>k__BackingField;
    private static Type declaringType;
    private static string NA;
    [NullableAttribute("2")]
public string ClassName { get; }
    [NullableAttribute("2")]
public string FileName { get; }
    public string LineNumber { get; }
    public string MethodName { get; }
    public string FullInfo { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public StackFrameItem[] StackFrames { get; }
    [NullableContextAttribute("2")]
public LocationInfo(Type callerStackBoundaryDeclaringType);
    public LocationInfo(string className, string methodName, string fileName, string lineNumber);
    protected LocationInfo(SerializationInfo info, StreamingContext context);
    private static LocationInfo();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_ClassName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
public string get_LineNumber();
    [CompilerGeneratedAttribute]
public string get_MethodName();
    [CompilerGeneratedAttribute]
public string get_FullInfo();
    [CompilerGeneratedAttribute]
public StackFrameItem[] get_StackFrames();
    [SecurityCriticalAttribute]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class log4net.Core.LogException : ApplicationException {
    public LogException(string message);
    public LogException(string message, Exception innerException);
    protected LogException(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class log4net.Core.LoggerManager : object {
    [CompilerGeneratedAttribute]
private static IRepositorySelector <RepositorySelector>k__BackingField;
    private static Type declaringType;
    public static IRepositorySelector RepositorySelector { get; public set; }
    private static LoggerManager();
    private static void RegisterAppDomainEvents();
    public static ILoggerRepository GetRepository(string repository);
    public static ILoggerRepository GetRepository(Assembly repositoryAssembly);
    public static ILogger Exists(string repository, string name);
    public static ILogger Exists(Assembly repositoryAssembly, string name);
    public static ILogger[] GetCurrentLoggers(string repository);
    public static ILogger[] GetCurrentLoggers(Assembly repositoryAssembly);
    public static ILogger GetLogger(string repository, string name);
    public static ILogger GetLogger(Assembly repositoryAssembly, string name);
    public static ILogger GetLogger(string repository, Type type);
    public static ILogger GetLogger(Assembly repositoryAssembly, Type type);
    public static void Shutdown();
    public static void ShutdownRepository(string repository);
    public static void ShutdownRepository(Assembly repositoryAssembly);
    public static void ResetConfiguration(string repository);
    public static void ResetConfiguration(Assembly repositoryAssembly);
    public static ILoggerRepository CreateRepository(string repository);
    public static ILoggerRepository CreateRepository(string repository, Type repositoryType);
    public static ILoggerRepository CreateRepository(Assembly repositoryAssembly, Type repositoryType);
    public static ILoggerRepository[] GetAllRepositories();
    [CompilerGeneratedAttribute]
public static IRepositorySelector get_RepositorySelector();
    [CompilerGeneratedAttribute]
public static void set_RepositorySelector(IRepositorySelector value);
    private static string GetVersionInfo();
    private static void OnDomainUnload(object sender, EventArgs e);
    private static void OnProcessExit(object sender, EventArgs e);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class log4net.Core.LoggerRepositoryCreationEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private ILoggerRepository <LoggerRepository>k__BackingField;
    public ILoggerRepository LoggerRepository { get; }
    public LoggerRepositoryCreationEventArgs(ILoggerRepository repository);
    [CompilerGeneratedAttribute]
public ILoggerRepository get_LoggerRepository();
}
public class log4net.Core.LoggerRepositoryCreationEventHandler : MulticastDelegate {
    public LoggerRepositoryCreationEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, LoggerRepositoryCreationEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, LoggerRepositoryCreationEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class log4net.Core.LoggerWrapperImpl : object {
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    public ILogger Logger { get; }
    protected LoggerWrapperImpl(ILogger logger);
    [CompilerGeneratedAttribute]
public virtual ILogger get_Logger();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class log4net.Core.LoggingEvent : object {
    [NullableAttribute("1")]
private static Type declaringType;
    [CompilerGeneratedAttribute]
private Exception <ExceptionObject>k__BackingField;
    [CompilerGeneratedAttribute]
private ILoggerRepository <Repository>k__BackingField;
    private string _cachedWindowsIdentityUserName;
    private static bool _platformDoesNotSupportWindowsIdentity;
    private LoggingEventData m_data;
    private CompositeProperties m_compositeProperties;
    private PropertiesDictionary m_eventProperties;
    private Type m_callerStackBoundaryDeclaringType;
    private object m_message;
    private FixFlags m_fixFlags;
    private bool m_cacheUpdatable;
    [NullableAttribute("1")]
public static string HostNameProperty;
    [NullableAttribute("1")]
public static string IdentityProperty;
    [NullableAttribute("1")]
public static string UserNameProperty;
    public static DateTime StartTime { get; }
    public static DateTime StartTimeUtc { get; }
    public Level Level { get; }
    public DateTime TimeStamp { get; }
    public DateTime TimeStampUtc { get; }
    public string LoggerName { get; }
    public LocationInfo LocationInformation { get; }
    public object MessageObject { get; protected set; }
    public Exception ExceptionObject { get; }
    public ILoggerRepository Repository { get; private set; }
    public string RenderedMessage { get; }
    public string ThreadName { get; }
    [NullableAttribute("1")]
public string UserName { get; }
    public string Identity { get; }
    public string Domain { get; }
    [NullableAttribute("1")]
public PropertiesDictionary Properties { get; }
    public FixFlags Fix { get; public set; }
    public LocationInfo LocationInfo { get; }
    public LoggingEvent(Type callerStackBoundaryDeclaringType, ILoggerRepository repository, string loggerName, Level level, object message, Exception exception);
    public LoggingEvent(Type callerStackBoundaryDeclaringType, ILoggerRepository repository, LoggingEventData data, FixFlags fixedData);
    public LoggingEvent(Type callerStackBoundaryDeclaringType, ILoggerRepository repository, LoggingEventData data);
    public LoggingEvent(LoggingEventData data);
    [NullableContextAttribute("1")]
protected LoggingEvent(SerializationInfo info, StreamingContext context);
    private static LoggingEvent();
    public static DateTime get_StartTime();
    public static DateTime get_StartTimeUtc();
    public Level get_Level();
    public DateTime get_TimeStamp();
    public DateTime get_TimeStampUtc();
    public string get_LoggerName();
    public LocationInfo get_LocationInformation();
    public object get_MessageObject();
    protected void set_MessageObject(object value);
    [CompilerGeneratedAttribute]
public Exception get_ExceptionObject();
    [CompilerGeneratedAttribute]
public ILoggerRepository get_Repository();
    [CompilerGeneratedAttribute]
private void set_Repository(ILoggerRepository value);
    internal void EnsureRepository(ILoggerRepository repository);
    public virtual string get_RenderedMessage();
    [NullableContextAttribute("1")]
public virtual void WriteRenderedMessage(TextWriter writer);
    public string get_ThreadName();
    [NullableContextAttribute("1")]
private static string ReviseThreadName(string threadName);
    [NullableContextAttribute("1")]
public string get_UserName();
    private string TryGetCurrentUserName();
    [NullableContextAttribute("1")]
private static string TryReadWindowsIdentityUserName();
    public string get_Identity();
    public string get_Domain();
    [NullableContextAttribute("1")]
public PropertiesDictionary get_Properties();
    public FixFlags get_Fix();
    public void set_Fix(FixFlags value);
    [NullableContextAttribute("1")]
[SecurityCriticalAttribute]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public LoggingEventData GetLoggingEventData();
    public LoggingEventData GetLoggingEventData(FixFlags fixFlags);
    public string GetExceptionString();
    protected virtual void FixVolatileData(FixFlags flags);
    private void CreateCompositeProperties();
    private void CacheProperties();
    [NullableContextAttribute("1")]
public object LookupProperty(string key);
    [NullableContextAttribute("1")]
public PropertiesDictionary GetProperties();
    public LocationInfo get_LocationInfo();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class log4net.Core.LoggingEventData : ValueType {
    public string LoggerName;
    public Level Level;
    public string Message;
    public string ThreadName;
    [CompilerGeneratedAttribute]
private DateTime <TimeStampUtc>k__BackingField;
    public LocationInfo LocationInfo;
    public string UserName;
    public string Identity;
    public string ExceptionString;
    public string Domain;
    public PropertiesDictionary Properties;
    public DateTime TimeStampUtc { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public DateTime get_TimeStampUtc();
    [CompilerGeneratedAttribute]
public void set_TimeStampUtc(DateTime value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class log4net.Core.LogImpl : LoggerWrapperImpl {
    [NullableAttribute("1")]
private static Type ThisDeclaringType;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Object[] OneNullArgs;
    [NullableAttribute("1")]
private Level m_levelDebug;
    [NullableAttribute("1")]
private Level m_levelInfo;
    [NullableAttribute("1")]
private Level m_levelWarn;
    [NullableAttribute("1")]
private Level m_levelError;
    [NullableAttribute("1")]
private Level m_levelFatal;
    public bool IsDebugEnabled { get; }
    public bool IsInfoEnabled { get; }
    public bool IsWarnEnabled { get; }
    public bool IsErrorEnabled { get; }
    public bool IsFatalEnabled { get; }
    [NullableContextAttribute("1")]
public LogImpl(ILogger logger);
    private static LogImpl();
    [NullableContextAttribute("1")]
protected virtual void ReloadLevels(ILoggerRepository repository);
    public virtual void Debug(object message);
    public virtual void Debug(object message, Exception exception);
    [NullableContextAttribute("1")]
public virtual void DebugFormat(string format, Object[] args);
    [NullableContextAttribute("1")]
public virtual void DebugFormat(string format, object arg0);
    public virtual void DebugFormat(string format, object arg0, object arg1);
    public virtual void DebugFormat(string format, object arg0, object arg1, object arg2);
    public virtual void DebugFormat(IFormatProvider provider, string format, Object[] args);
    public virtual void Info(object message);
    public virtual void Info(object message, Exception exception);
    [NullableContextAttribute("1")]
public virtual void InfoFormat(string format, Object[] args);
    [NullableContextAttribute("1")]
public virtual void InfoFormat(string format, object arg0);
    public virtual void InfoFormat(string format, object arg0, object arg1);
    public virtual void InfoFormat(string format, object arg0, object arg1, object arg2);
    public virtual void InfoFormat(IFormatProvider provider, string format, Object[] args);
    public virtual void Warn(object message);
    public virtual void Warn(object message, Exception exception);
    [NullableContextAttribute("1")]
public virtual void WarnFormat(string format, Object[] args);
    [NullableContextAttribute("1")]
public virtual void WarnFormat(string format, object arg0);
    public virtual void WarnFormat(string format, object arg0, object arg1);
    public virtual void WarnFormat(string format, object arg0, object arg1, object arg2);
    public virtual void WarnFormat(IFormatProvider provider, string format, Object[] args);
    public virtual void Error(object message);
    public virtual void Error(object message, Exception exception);
    [NullableContextAttribute("1")]
public virtual void ErrorFormat(string format, Object[] args);
    [NullableContextAttribute("1")]
public virtual void ErrorFormat(string format, object arg0);
    public virtual void ErrorFormat(string format, object arg0, object arg1);
    public virtual void ErrorFormat(string format, object arg0, object arg1, object arg2);
    public virtual void ErrorFormat(IFormatProvider provider, string format, Object[] args);
    public virtual void Fatal(object message);
    public virtual void Fatal(object message, Exception exception);
    [NullableContextAttribute("1")]
public virtual void FatalFormat(string format, Object[] args);
    [NullableContextAttribute("1")]
public virtual void FatalFormat(string format, object arg0);
    public virtual void FatalFormat(string format, object arg0, object arg1);
    public virtual void FatalFormat(string format, object arg0, object arg1, object arg2);
    public virtual void FatalFormat(IFormatProvider provider, string format, Object[] args);
    public virtual bool get_IsDebugEnabled();
    public virtual bool get_IsInfoEnabled();
    public virtual bool get_IsWarnEnabled();
    public virtual bool get_IsErrorEnabled();
    public virtual bool get_IsFatalEnabled();
    [NullableContextAttribute("1")]
private void LoggerRepositoryConfigurationChanged(object sender, EventArgs e);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class log4net.Core.MethodItem : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Parameters>k__BackingField;
    private static Type declaringType;
    private static string NA;
    public string Name { get; }
    public String[] Parameters { get; }
    public MethodItem(string name);
    public MethodItem(string name, String[] parameters);
    public MethodItem(MethodBase methodBase);
    private static MethodItem();
    private static String[] GetMethodParameterNames(MethodBase methodBase);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public String[] get_Parameters();
}
public abstract class log4net.Core.SecurityContext : object {
    [NullableContextAttribute("1")]
public abstract virtual IDisposable Impersonate(object state);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class log4net.Core.SecurityContextProvider : object {
    private static SecurityContextProvider s_defaultProvider;
    public static SecurityContextProvider DefaultProvider { get; public set; }
    private static SecurityContextProvider();
    public static SecurityContextProvider get_DefaultProvider();
    public static void set_DefaultProvider(SecurityContextProvider value);
    public virtual SecurityContext CreateSecurityContext(object consumer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class log4net.Core.StackFrameItem : object {
    [CompilerGeneratedAttribute]
private string <ClassName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private MethodItem <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullInfo>k__BackingField;
    private static Type declaringType;
    private static string NA;
    public string ClassName { get; }
    public string FileName { get; }
    public string LineNumber { get; }
    public MethodItem Method { get; }
    public string FullInfo { get; }
    public StackFrameItem(StackFrame frame);
    private static StackFrameItem();
    [CompilerGeneratedAttribute]
public string get_ClassName();
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
public string get_LineNumber();
    [CompilerGeneratedAttribute]
public MethodItem get_Method();
    [CompilerGeneratedAttribute]
public string get_FullInfo();
}
public class log4net.Core.TimeEvaluator : object {
    private int m_interval;
    private DateTime m_lastTimeUtc;
    private static int DEFAULT_INTERVAL;
    public int Interval { get; public set; }
    public TimeEvaluator(int interval);
    public int get_Interval();
    public void set_Interval(int value);
    [NullableContextAttribute("1")]
public sealed virtual bool IsTriggeringEvent(LoggingEvent loggingEvent);
}
public class log4net.Core.WrapperCreationHandler : MulticastDelegate {
    public WrapperCreationHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual ILoggerWrapper Invoke(ILogger logger);
    public virtual IAsyncResult BeginInvoke(ILogger logger, AsyncCallback callback, object object);
    public virtual ILoggerWrapper EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class log4net.Core.WrapperMap : object {
    [CompilerGeneratedAttribute]
private Hashtable <Repositories>k__BackingField;
    private WrapperCreationHandler m_createWrapperHandler;
    private LoggerRepositoryShutdownEventHandler m_shutdownHandler;
    protected Hashtable Repositories { get; }
    public WrapperMap(WrapperCreationHandler createWrapperHandler);
    [NullableContextAttribute("2")]
public virtual ILoggerWrapper GetWrapper(ILogger logger);
    [CompilerGeneratedAttribute]
protected Hashtable get_Repositories();
    protected virtual ILoggerWrapper CreateNewWrapperObject(ILogger logger);
    protected virtual void RepositoryShutdown(ILoggerRepository repository);
    private void ILoggerRepository_Shutdown(object sender, EventArgs e);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class log4net.DateFormatter.AbsoluteTimeDateFormatter : object {
    public static string AbsoluteTimeDateFormat;
    public static string DateAndTimeDateFormat;
    public static string Iso8601TimeDateFormat;
    private static long s_lastTimeToTheSecond;
    private static ConcurrentDictionary`2<Type, string> s_lastTimeStrings;
    private static AbsoluteTimeDateFormatter();
    protected virtual void FormatDateWithoutMillis(DateTime dateToFormat, StringBuilder buffer);
    public virtual void FormatDate(DateTime dateToFormat, TextWriter writer);
}
public class log4net.DateFormatter.DateTimeDateFormatter : AbsoluteTimeDateFormatter {
    [NullableContextAttribute("1")]
protected virtual void FormatDateWithoutMillis(DateTime dateToFormat, StringBuilder buffer);
}
[NullableContextAttribute("1")]
public interface log4net.DateFormatter.IDateFormatter {
    public abstract virtual void FormatDate(DateTime dateToFormat, TextWriter writer);
}
public class log4net.DateFormatter.Iso8601DateFormatter : AbsoluteTimeDateFormatter {
    [NullableContextAttribute("1")]
protected virtual void FormatDateWithoutMillis(DateTime dateToFormat, StringBuilder buffer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class log4net.DateFormatter.SimpleDateFormatter : object {
    private string m_formatString;
    public SimpleDateFormatter(string format);
    public virtual void FormatDate(DateTime dateToFormat, TextWriter writer);
}
public class log4net.Filter.DenyAllFilter : FilterSkeleton {
    [NullableContextAttribute("1")]
public virtual FilterDecision Decide(LoggingEvent loggingEvent);
}
public enum log4net.Filter.FilterDecision : Enum {
    public int value__;
    public static FilterDecision Deny;
    public static FilterDecision Neutral;
    public static FilterDecision Accept;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class log4net.Filter.FilterSkeleton : object {
    [CompilerGeneratedAttribute]
private IFilter <Next>k__BackingField;
    public IFilter Next { get; public set; }
    public virtual void ActivateOptions();
    [NullableContextAttribute("1")]
public abstract virtual FilterDecision Decide(LoggingEvent loggingEvent);
    [CompilerGeneratedAttribute]
public sealed virtual IFilter get_Next();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Next(IFilter value);
}
[NullableContextAttribute("2")]
public interface log4net.Filter.IFilter {
    public IFilter Next { get; public set; }
    [NullableContextAttribute("1")]
public abstract virtual FilterDecision Decide(LoggingEvent loggingEvent);
    public abstract virtual IFilter get_Next();
    public abstract virtual void set_Next(IFilter value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class log4net.Filter.LevelMatchFilter : FilterSkeleton {
    [CompilerGeneratedAttribute]
private bool <AcceptOnMatch>k__BackingField;
    [CompilerGeneratedAttribute]
private Level <LevelToMatch>k__BackingField;
    public bool AcceptOnMatch { get; public set; }
    public Level LevelToMatch { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_AcceptOnMatch();
    [CompilerGeneratedAttribute]
public void set_AcceptOnMatch(bool value);
    [CompilerGeneratedAttribute]
public Level get_LevelToMatch();
    [CompilerGeneratedAttribute]
public void set_LevelToMatch(Level value);
    [NullableContextAttribute("1")]
public virtual FilterDecision Decide(LoggingEvent loggingEvent);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class log4net.Filter.LevelRangeFilter : FilterSkeleton {
    [CompilerGeneratedAttribute]
private bool <AcceptOnMatch>k__BackingField;
    [CompilerGeneratedAttribute]
private Level <LevelMin>k__BackingField;
    [CompilerGeneratedAttribute]
private Level <LevelMax>k__BackingField;
    public bool AcceptOnMatch { get; public set; }
    public Level LevelMin { get; public set; }
    public Level LevelMax { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_AcceptOnMatch();
    [CompilerGeneratedAttribute]
public void set_AcceptOnMatch(bool value);
    [CompilerGeneratedAttribute]
public Level get_LevelMin();
    [CompilerGeneratedAttribute]
public void set_LevelMin(Level value);
    [CompilerGeneratedAttribute]
public Level get_LevelMax();
    [CompilerGeneratedAttribute]
public void set_LevelMax(Level value);
    [NullableContextAttribute("1")]
public virtual FilterDecision Decide(LoggingEvent loggingEvent);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class log4net.Filter.LoggerMatchFilter : FilterSkeleton {
    [CompilerGeneratedAttribute]
private bool <AcceptOnMatch>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LoggerToMatch>k__BackingField;
    public bool AcceptOnMatch { get; public set; }
    public string LoggerToMatch { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_AcceptOnMatch();
    [CompilerGeneratedAttribute]
public void set_AcceptOnMatch(bool value);
    [CompilerGeneratedAttribute]
public string get_LoggerToMatch();
    [CompilerGeneratedAttribute]
public void set_LoggerToMatch(string value);
    [NullableContextAttribute("1")]
public virtual FilterDecision Decide(LoggingEvent loggingEvent);
}
public class log4net.Filter.MdcFilter : PropertyFilter {
}
public class log4net.Filter.NdcFilter : PropertyFilter {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class log4net.Filter.PropertyFilter : StringMatchFilter {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    public string Key { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(string value);
    [NullableContextAttribute("1")]
public virtual FilterDecision Decide(LoggingEvent loggingEvent);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class log4net.Filter.StringMatchFilter : FilterSkeleton {
    protected Regex m_regexToMatch;
    [CompilerGeneratedAttribute]
private bool <AcceptOnMatch>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StringToMatch>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RegexToMatch>k__BackingField;
    public bool AcceptOnMatch { get; public set; }
    public string StringToMatch { get; public set; }
    public string RegexToMatch { get; public set; }
    public virtual void ActivateOptions();
    [CompilerGeneratedAttribute]
public bool get_AcceptOnMatch();
    [CompilerGeneratedAttribute]
public void set_AcceptOnMatch(bool value);
    [CompilerGeneratedAttribute]
public string get_StringToMatch();
    [CompilerGeneratedAttribute]
public void set_StringToMatch(string value);
    [CompilerGeneratedAttribute]
public string get_RegexToMatch();
    [CompilerGeneratedAttribute]
public void set_RegexToMatch(string value);
    [NullableContextAttribute("1")]
public virtual FilterDecision Decide(LoggingEvent loggingEvent);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class log4net.GlobalContext : object {
    [CompilerGeneratedAttribute]
private static GlobalContextProperties <Properties>k__BackingField;
    public static GlobalContextProperties Properties { get; }
    private static GlobalContext();
    [CompilerGeneratedAttribute]
public static GlobalContextProperties get_Properties();
}
[NullableContextAttribute("2")]
public interface log4net.ILog {
    public bool IsDebugEnabled { get; }
    public bool IsInfoEnabled { get; }
    public bool IsWarnEnabled { get; }
    public bool IsErrorEnabled { get; }
    public bool IsFatalEnabled { get; }
    public abstract virtual void Debug(object message);
    public abstract virtual void Debug(object message, Exception exception);
    [NullableContextAttribute("1")]
public abstract virtual void DebugFormat(string format, Object[] args);
    [NullableContextAttribute("1")]
public abstract virtual void DebugFormat(string format, object arg0);
    public abstract virtual void DebugFormat(string format, object arg0, object arg1);
    public abstract virtual void DebugFormat(string format, object arg0, object arg1, object arg2);
    public abstract virtual void DebugFormat(IFormatProvider provider, string format, Object[] args);
    public abstract virtual void Info(object message);
    public abstract virtual void Info(object message, Exception exception);
    [NullableContextAttribute("1")]
public abstract virtual void InfoFormat(string format, Object[] args);
    [NullableContextAttribute("1")]
public abstract virtual void InfoFormat(string format, object arg0);
    public abstract virtual void InfoFormat(string format, object arg0, object arg1);
    public abstract virtual void InfoFormat(string format, object arg0, object arg1, object arg2);
    public abstract virtual void InfoFormat(IFormatProvider provider, string format, Object[] args);
    public abstract virtual void Warn(object message);
    public abstract virtual void Warn(object message, Exception exception);
    [NullableContextAttribute("1")]
public abstract virtual void WarnFormat(string format, Object[] args);
    [NullableContextAttribute("1")]
public abstract virtual void WarnFormat(string format, object arg0);
    public abstract virtual void WarnFormat(string format, object arg0, object arg1);
    public abstract virtual void WarnFormat(string format, object arg0, object arg1, object arg2);
    public abstract virtual void WarnFormat(IFormatProvider provider, string format, Object[] args);
    public abstract virtual void Error(object message);
    public abstract virtual void Error(object message, Exception exception);
    [NullableContextAttribute("1")]
public abstract virtual void ErrorFormat(string format, Object[] args);
    [NullableContextAttribute("1")]
public abstract virtual void ErrorFormat(string format, object arg0);
    public abstract virtual void ErrorFormat(string format, object arg0, object arg1);
    public abstract virtual void ErrorFormat(string format, object arg0, object arg1, object arg2);
    public abstract virtual void ErrorFormat(IFormatProvider provider, string format, Object[] args);
    public abstract virtual void Fatal(object message);
    public abstract virtual void Fatal(object message, Exception exception);
    [NullableContextAttribute("1")]
public abstract virtual void FatalFormat(string format, Object[] args);
    [NullableContextAttribute("1")]
public abstract virtual void FatalFormat(string format, object arg0);
    public abstract virtual void FatalFormat(string format, object arg0, object arg1);
    public abstract virtual void FatalFormat(string format, object arg0, object arg1, object arg2);
    public abstract virtual void FatalFormat(IFormatProvider provider, string format, Object[] args);
    public abstract virtual bool get_IsDebugEnabled();
    public abstract virtual bool get_IsInfoEnabled();
    public abstract virtual bool get_IsWarnEnabled();
    public abstract virtual bool get_IsErrorEnabled();
    public abstract virtual bool get_IsFatalEnabled();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class log4net.Layout.DynamicPatternLayout : PatternLayout {
    [NullableAttribute("1")]
private PatternString m_headerPatternString;
    [NullableAttribute("1")]
private PatternString m_footerPatternString;
    public string Header { get; public set; }
    public string Footer { get; public set; }
    [NullableContextAttribute("1")]
public DynamicPatternLayout(string pattern);
    public virtual string get_Header();
    public virtual void set_Header(string value);
    public virtual string get_Footer();
    public virtual void set_Footer(string value);
}
public class log4net.Layout.ExceptionLayout : LayoutSkeleton {
    public virtual void ActivateOptions();
    [NullableContextAttribute("1")]
public virtual void Format(TextWriter writer, LoggingEvent loggingEvent);
}
[NullableContextAttribute("2")]
public interface log4net.Layout.ILayout {
    [NullableAttribute("1")]
public string ContentType { get; }
    public string Header { get; }
    public string Footer { get; }
    public bool IgnoresException { get; }
    [NullableContextAttribute("1")]
public abstract virtual void Format(TextWriter writer, LoggingEvent loggingEvent);
    [NullableContextAttribute("1")]
public abstract virtual string get_ContentType();
    public abstract virtual string get_Header();
    public abstract virtual string get_Footer();
    public abstract virtual bool get_IgnoresException();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class log4net.Layout.Internal.XmlWriterExtensions : object {
    [ExtensionAttribute]
internal static void WriteStartElement(XmlWriter writer, string fullName, string prefix, string localName, string ns);
    internal static XmlWriter CreateXmlWriter(TextWriter writer);
}
[NullableContextAttribute("1")]
[TypeConverterAttribute("log4net.Layout.RawLayoutConverter")]
public interface log4net.Layout.IRawLayout {
    public abstract virtual object Format(LoggingEvent loggingEvent);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class log4net.Layout.Layout2RawLayoutAdapter : object {
    private ILayout m_layout;
    public Layout2RawLayoutAdapter(ILayout layout);
    public virtual object Format(LoggingEvent loggingEvent);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class log4net.Layout.LayoutSkeleton : object {
    [CompilerGeneratedAttribute]
private string <Header>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Footer>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoresException>k__BackingField;
    [NullableAttribute("1")]
public string ContentType { get; }
    public string Header { get; public set; }
    public string Footer { get; public set; }
    public bool IgnoresException { get; public set; }
    public abstract virtual void ActivateOptions();
    [NullableContextAttribute("1")]
public abstract virtual void Format(TextWriter writer, LoggingEvent loggingEvent);
    [NullableContextAttribute("1")]
public string Format(LoggingEvent loggingEvent);
    [NullableContextAttribute("1")]
public virtual string get_ContentType();
    [CompilerGeneratedAttribute]
public virtual string get_Header();
    [CompilerGeneratedAttribute]
public virtual void set_Header(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Footer();
    [CompilerGeneratedAttribute]
public virtual void set_Footer(string value);
    [CompilerGeneratedAttribute]
public virtual bool get_IgnoresException();
    [CompilerGeneratedAttribute]
public virtual void set_IgnoresException(bool value);
}
internal class log4net.Layout.Pattern.AppDomainPatternConverter : PatternLayoutConverter {
    [NullableContextAttribute("1")]
protected virtual void Convert(TextWriter writer, LoggingEvent loggingEvent);
}
internal class log4net.Layout.Pattern.AspNetCachePatternConverter : AspNetPatternLayoutConverter {
    [NullableContextAttribute("1")]
protected virtual void Convert(TextWriter writer, LoggingEvent loggingEvent, HttpContext httpContext);
}
internal class log4net.Layout.Pattern.AspNetContextPatternConverter : AspNetPatternLayoutConverter {
    [NullableContextAttribute("1")]
protected virtual void Convert(TextWriter writer, LoggingEvent loggingEvent, HttpContext httpContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class log4net.Layout.Pattern.AspNetPatternLayoutConverter : PatternLayoutConverter {
    protected virtual void Convert(TextWriter writer, LoggingEvent loggingEvent);
    protected abstract virtual void Convert(TextWriter writer, LoggingEvent loggingEvent, HttpContext httpContext);
}
internal class log4net.Layout.Pattern.AspNetRequestPatternConverter : AspNetPatternLayoutConverter {
    [NullableContextAttribute("1")]
protected virtual void Convert(TextWriter writer, LoggingEvent loggingEvent, HttpContext httpContext);
}
internal class log4net.Layout.Pattern.AspNetSessionPatternConverter : AspNetPatternLayoutConverter {
    [NullableContextAttribute("1")]
protected virtual void Convert(TextWriter writer, LoggingEvent loggingEvent, HttpContext httpContext);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class log4net.Layout.Pattern.DatePatternConverter : PatternLayoutConverter {
    [CompilerGeneratedAttribute]
private IDateFormatter <m_dateFormatter>k__BackingField;
    [NullableAttribute("1")]
private static Type declaringType;
    protected IDateFormatter m_dateFormatter { get; protected set; }
    private static DatePatternConverter();
    [CompilerGeneratedAttribute]
protected IDateFormatter get_m_dateFormatter();
    [CompilerGeneratedAttribute]
protected void set_m_dateFormatter(IDateFormatter value);
    public sealed virtual void ActivateOptions();
    [NullableContextAttribute("1")]
protected virtual void Convert(TextWriter writer, LoggingEvent loggingEvent);
}
internal class log4net.Layout.Pattern.ExceptionPatternConverter : PatternLayoutConverter {
    [NullableContextAttribute("1")]
protected virtual void Convert(TextWriter writer, LoggingEvent loggingEvent);
}
internal class log4net.Layout.Pattern.FileLocationPatternConverter : PatternLayoutConverter {
    [NullableContextAttribute("1")]
protected virtual void Convert(TextWriter writer, LoggingEvent loggingEvent);
}
internal class log4net.Layout.Pattern.FullLocationPatternConverter : PatternLayoutConverter {
    [NullableContextAttribute("1")]
protected virtual void Convert(TextWriter writer, LoggingEvent loggingEvent);
}
internal class log4net.Layout.Pattern.IdentityPatternConverter : PatternLayoutConverter {
    [NullableContextAttribute("1")]
protected virtual void Convert(TextWriter writer, LoggingEvent loggingEvent);
}
internal class log4net.Layout.Pattern.LevelPatternConverter : PatternLayoutConverter {
    [NullableContextAttribute("1")]
protected virtual void Convert(TextWriter writer, LoggingEvent loggingEvent);
}
internal class log4net.Layout.Pattern.LineLocationPatternConverter : PatternLayoutConverter {
    [NullableContextAttribute("1")]
protected virtual void Convert(TextWriter writer, LoggingEvent loggingEvent);
}
internal class log4net.Layout.Pattern.LoggerPatternConverter : NamedPatternConverter {
    [NullableContextAttribute("1")]
protected virtual string GetFullyQualifiedName(LoggingEvent loggingEvent);
}
internal class log4net.Layout.Pattern.MessagePatternConverter : PatternLayoutConverter {
    [NullableContextAttribute("1")]
protected virtual void Convert(TextWriter writer, LoggingEvent loggingEvent);
}
internal class log4net.Layout.Pattern.MethodLocationPatternConverter : PatternLayoutConverter {
    [NullableContextAttribute("1")]
protected virtual void Convert(TextWriter writer, LoggingEvent loggingEvent);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class log4net.Layout.Pattern.NamedPatternConverter : PatternLayoutConverter {
    private int m_precision;
    private static Type declaringType;
    private static string DOT;
    private static NamedPatternConverter();
    public sealed virtual void ActivateOptions();
    protected abstract virtual string GetFullyQualifiedName(LoggingEvent loggingEvent);
    protected sealed virtual void Convert(TextWriter writer, LoggingEvent loggingEvent);
}
internal class log4net.Layout.Pattern.NdcPatternConverter : PatternLayoutConverter {
    [NullableContextAttribute("1")]
protected virtual void Convert(TextWriter writer, LoggingEvent loggingEvent);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class log4net.Layout.Pattern.PatternLayoutConverter : PatternConverter {
    [CompilerGeneratedAttribute]
private bool <IgnoresException>k__BackingField;
    public bool IgnoresException { get; public set; }
    [CompilerGeneratedAttribute]
public virtual bool get_IgnoresException();
    [CompilerGeneratedAttribute]
public virtual void set_IgnoresException(bool value);
    protected abstract virtual void Convert(TextWriter writer, LoggingEvent loggingEvent);
    public virtual void Convert(TextWriter writer, object state);
}
internal class log4net.Layout.Pattern.PropertyPatternConverter : PatternLayoutConverter {
    [NullableContextAttribute("1")]
protected virtual void Convert(TextWriter writer, LoggingEvent loggingEvent);
}
internal class log4net.Layout.Pattern.RelativeTimePatternConverter : PatternLayoutConverter {
    [NullableContextAttribute("1")]
protected virtual void Convert(TextWriter writer, LoggingEvent loggingEvent);
    private static long TimeDifferenceInMillis(DateTime start, DateTime end);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class log4net.Layout.Pattern.StackTraceDetailPatternConverter : StackTracePatternConverter {
    private static Type declaringType;
    private static StackTraceDetailPatternConverter();
    internal virtual string GetMethodInformation(MethodItem method);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class log4net.Layout.Pattern.StackTracePatternConverter : PatternLayoutConverter {
    private int m_stackFrameLevel;
    private static Type declaringType;
    private static StackTracePatternConverter();
    public sealed virtual void ActivateOptions();
    protected virtual void Convert(TextWriter writer, LoggingEvent loggingEvent);
    internal virtual string GetMethodInformation(MethodItem method);
}
internal class log4net.Layout.Pattern.ThreadPatternConverter : PatternLayoutConverter {
    [NullableContextAttribute("1")]
protected virtual void Convert(TextWriter writer, LoggingEvent loggingEvent);
}
internal class log4net.Layout.Pattern.TypeNamePatternConverter : NamedPatternConverter {
    [NullableContextAttribute("1")]
protected virtual string GetFullyQualifiedName(LoggingEvent loggingEvent);
}
internal class log4net.Layout.Pattern.UserNamePatternConverter : PatternLayoutConverter {
    [NullableContextAttribute("1")]
protected virtual void Convert(TextWriter writer, LoggingEvent loggingEvent);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class log4net.Layout.Pattern.UtcDatePatternConverter : DatePatternConverter {
    private static Type declaringType;
    private static UtcDatePatternConverter();
    protected virtual void Convert(TextWriter writer, LoggingEvent loggingEvent);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class log4net.Layout.PatternLayout : LayoutSkeleton {
    public static string DefaultConversionPattern;
    public static string DetailConversionPattern;
    private static Dictionary`2<string, Type> s_globalRulesRegistry;
    [NullableAttribute("2")]
private PatternConverter m_head;
    private Dictionary`2<string, ConverterInfo> m_instanceRulesRegistry;
    [CompilerGeneratedAttribute]
private string <ConversionPattern>k__BackingField;
    public string ConversionPattern { get; public set; }
    [NullableContextAttribute("2")]
public PatternLayout(string pattern);
    private static PatternLayout();
    [CompilerGeneratedAttribute]
public string get_ConversionPattern();
    [CompilerGeneratedAttribute]
public void set_ConversionPattern(string value);
    protected virtual PatternParser CreatePatternParser(string pattern);
    public virtual void ActivateOptions();
    public virtual void Format(TextWriter writer, LoggingEvent loggingEvent);
    public void AddConverter(ConverterInfo converterInfo);
    public void AddConverter(string name, Type type);
}
public class log4net.Layout.RawLayoutConverter : object {
    [NullableContextAttribute("1")]
public sealed virtual bool CanConvertFrom(Type sourceType);
    [NullableContextAttribute("1")]
public sealed virtual object ConvertFrom(object source);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class log4net.Layout.RawPropertyLayout : object {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    public string Key { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(string value);
    public virtual object Format(LoggingEvent loggingEvent);
}
public class log4net.Layout.RawTimeStampLayout : object {
    [NullableContextAttribute("1")]
public virtual object Format(LoggingEvent loggingEvent);
}
public class log4net.Layout.RawUtcTimeStampLayout : object {
    [NullableContextAttribute("1")]
public virtual object Format(LoggingEvent loggingEvent);
}
public class log4net.Layout.SimpleLayout : LayoutSkeleton {
    public virtual void ActivateOptions();
    [NullableContextAttribute("1")]
public virtual void Format(TextWriter writer, LoggingEvent loggingEvent);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class log4net.Layout.XmlLayout : XmlLayoutBase {
    [CompilerGeneratedAttribute]
private string <Prefix>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Base64EncodeMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Base64EncodeProperties>k__BackingField;
    private string m_elmEvent;
    private string m_elmMessage;
    private string m_elmData;
    private string m_elmProperties;
    private string m_elmException;
    private string m_elmLocation;
    private static string PREFIX;
    private static string ELM_EVENT;
    private static string ELM_MESSAGE;
    private static string ELM_PROPERTIES;
    private static string ELM_DATA;
    private static string ELM_EXCEPTION;
    private static string ELM_LOCATION;
    private static string ATTR_LOGGER;
    private static string ATTR_TIMESTAMP;
    private static string ATTR_LEVEL;
    private static string ATTR_THREAD;
    private static string ATTR_DOMAIN;
    private static string ATTR_IDENTITY;
    private static string ATTR_USERNAME;
    private static string ATTR_CLASS;
    private static string ATTR_METHOD;
    private static string ATTR_FILE;
    private static string ATTR_LINE;
    private static string ATTR_NAME;
    private static string ATTR_VALUE;
    public string Prefix { get; public set; }
    public bool Base64EncodeMessage { get; public set; }
    public bool Base64EncodeProperties { get; public set; }
    public XmlLayout(bool locationInfo);
    [CompilerGeneratedAttribute]
public string get_Prefix();
    [CompilerGeneratedAttribute]
public void set_Prefix(string value);
    [CompilerGeneratedAttribute]
public bool get_Base64EncodeMessage();
    [CompilerGeneratedAttribute]
public void set_Base64EncodeMessage(bool value);
    [CompilerGeneratedAttribute]
public bool get_Base64EncodeProperties();
    [CompilerGeneratedAttribute]
public void set_Base64EncodeProperties(bool value);
    public virtual void ActivateOptions();
    protected virtual void FormatXml(XmlWriter writer, LoggingEvent loggingEvent);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class log4net.Layout.XmlLayoutBase : LayoutSkeleton {
    [CompilerGeneratedAttribute]
private bool <LocationInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InvalidCharReplacement>k__BackingField;
    public bool LocationInfo { get; public set; }
    public string InvalidCharReplacement { get; public set; }
    public string ContentType { get; }
    protected XmlLayoutBase(bool locationInfo);
    [CompilerGeneratedAttribute]
public bool get_LocationInfo();
    [CompilerGeneratedAttribute]
public void set_LocationInfo(bool value);
    [CompilerGeneratedAttribute]
public string get_InvalidCharReplacement();
    [CompilerGeneratedAttribute]
public void set_InvalidCharReplacement(string value);
    public virtual void ActivateOptions();
    public virtual string get_ContentType();
    public virtual void Format(TextWriter writer, LoggingEvent loggingEvent);
    protected abstract virtual void FormatXml(XmlWriter writer, LoggingEvent loggingEvent);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class log4net.Layout.XmlLayoutSchemaLog4j : XmlLayoutBase {
    private static DateTime s_date1970;
    public string Version { get; public set; }
    public XmlLayoutSchemaLog4j(bool locationInfo);
    private static XmlLayoutSchemaLog4j();
    public string get_Version();
    public void set_Version(string value);
    protected virtual void FormatXml(XmlWriter writer, LoggingEvent loggingEvent);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class log4net.LogicalThreadContext : object {
    [CompilerGeneratedAttribute]
private static LogicalThreadContextProperties <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private static LogicalThreadContextStacks <Stacks>k__BackingField;
    public static LogicalThreadContextProperties Properties { get; }
    public static LogicalThreadContextStacks Stacks { get; }
    private static LogicalThreadContext();
    [CompilerGeneratedAttribute]
public static LogicalThreadContextProperties get_Properties();
    [CompilerGeneratedAttribute]
public static LogicalThreadContextStacks get_Stacks();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class log4net.LogManager : object {
    private static WrapperMap s_wrapperMap;
    private static LogManager();
    public static ILog Exists(string name);
    public static ILog[] GetCurrentLoggers();
    public static ILog GetLogger(string name);
    public static ILog Exists(string repository, string name);
    public static ILog Exists(Assembly repositoryAssembly, string name);
    public static ILog[] GetCurrentLoggers(string repository);
    public static ILog[] GetCurrentLoggers(Assembly repositoryAssembly);
    public static ILog GetLogger(string repository, string name);
    public static ILog GetLogger(Assembly repositoryAssembly, string name);
    public static ILog GetLogger(Type type);
    public static ILog GetLogger(string repository, Type type);
    public static ILog GetLogger(Assembly repositoryAssembly, Type type);
    public static void Shutdown();
    public static void ShutdownRepository();
    public static void ShutdownRepository(string repository);
    public static void ShutdownRepository(Assembly repositoryAssembly);
    public static void ResetConfiguration();
    public static void ResetConfiguration(string repository);
    public static void ResetConfiguration(Assembly repositoryAssembly);
    public static ILoggerRepository GetRepository();
    public static ILoggerRepository GetRepository(string repository);
    public static ILoggerRepository GetRepository(Assembly repositoryAssembly);
    public static ILoggerRepository CreateRepository(Type repositoryType);
    public static ILoggerRepository CreateRepository(string repository);
    public static ILoggerRepository CreateRepository(string repository, Type repositoryType);
    public static ILoggerRepository CreateRepository(Assembly repositoryAssembly, Type repositoryType);
    public static ILoggerRepository[] GetAllRepositories();
    public static bool Flush(int millisecondsTimeout);
    [NullableContextAttribute("2")]
private static ILog WrapLogger(ILogger logger);
    private static ILog[] WrapLoggers(ILogger[] loggers);
    private static ILoggerWrapper WrapperCreationHandler(ILogger logger);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class log4net.MDC : object {
    public static string Get(string key);
    public static void Set(string key, string value);
    public static void Remove(string key);
    public static void Clear();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class log4net.NDC : object {
    public static int Depth { get; }
    public static int get_Depth();
    public static void Clear();
    public static Stack CloneStack();
    public static void Inherit(Stack stack);
    [NullableContextAttribute("2")]
public static string Pop();
    public static IDisposable Push(string message);
    public static IDisposable PushFormat(string messageFormat, Object[] args);
    public static void Remove();
    public static void SetMaxDepth(int maxDepth);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class log4net.ObjectRenderer.DefaultRenderer : object {
    public sealed virtual void RenderObject(RendererMap rendererMap, object obj, TextWriter writer);
    private static void RenderArray(RendererMap rendererMap, Array array, TextWriter writer);
    private static void RenderEnumerator(RendererMap rendererMap, IEnumerator enumerator, TextWriter writer);
    private static void RenderDictionaryEntry(RendererMap rendererMap, DictionaryEntry entry, TextWriter writer);
}
[NullableContextAttribute("1")]
public interface log4net.ObjectRenderer.IObjectRenderer {
    public abstract virtual void RenderObject(RendererMap rendererMap, object obj, TextWriter writer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class log4net.ObjectRenderer.RendererMap : object {
    private static Type declaringType;
    private ConcurrentDictionary`2<Type, IObjectRenderer> m_map;
    private ConcurrentDictionary`2<Type, IObjectRenderer> m_cache;
    private static IObjectRenderer s_defaultRenderer;
    public IObjectRenderer DefaultRenderer { get; }
    private static RendererMap();
    public string FindAndRender(object obj);
    public void FindAndRender(object obj, TextWriter writer);
    [NullableContextAttribute("2")]
public IObjectRenderer Get(object obj);
    public IObjectRenderer Get(Type type);
    private IObjectRenderer SearchTypeAndInterfaces(Type type);
    public IObjectRenderer get_DefaultRenderer();
    public void Clear();
    public void Put(Type typeToRender, IObjectRenderer renderer);
}
[NullableContextAttribute("1")]
public interface log4net.Plugin.IPlugin {
    public string Name { get; }
    public abstract virtual string get_Name();
    public abstract virtual void Attach(ILoggerRepository repository);
    public abstract virtual void Shutdown();
}
[NullableContextAttribute("1")]
public interface log4net.Plugin.IPluginFactory {
    public abstract virtual IPlugin CreatePlugin();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class log4net.Plugin.PluginCollection : object {
    private static int DEFAULT_CAPACITY;
    private IPlugin[] m_array;
    private int m_count;
    private int m_version;
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public IPlugin Item { get; public set; }
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public int Capacity { get; public set; }
    [NullableAttribute("2")]
private object System.Collections.IList.Item { get; private set; }
    public PluginCollection(int capacity);
    public PluginCollection(PluginCollection c);
    public PluginCollection(IPlugin[] a);
    public PluginCollection(ICollection col);
    public PluginCollection(ICollection`1<IPlugin> col);
    protected internal PluginCollection(Tag _);
    public static PluginCollection ReadOnly(PluginCollection list);
    public virtual int get_Count();
    public virtual void CopyTo(IPlugin[] array);
    public virtual void CopyTo(IPlugin[] array, int start);
    public virtual bool get_IsSynchronized();
    public virtual object get_SyncRoot();
    public virtual IPlugin get_Item(int index);
    public virtual void set_Item(int index, IPlugin value);
    public virtual int Add(IPlugin item);
    public virtual void Clear();
    public virtual object Clone();
    public virtual bool Contains(IPlugin item);
    public virtual int IndexOf(IPlugin item);
    public virtual void Insert(int index, IPlugin item);
    public virtual void Remove(IPlugin item);
    public virtual void RemoveAt(int index);
    public virtual bool get_IsFixedSize();
    public virtual bool get_IsReadOnly();
    public virtual IPluginCollectionEnumerator GetEnumerator();
    public virtual int get_Capacity();
    public virtual void set_Capacity(int value);
    public virtual int AddRange(PluginCollection x);
    public virtual int AddRange(IPlugin[] x);
    public virtual int AddRange(ICollection col);
    public virtual int AddRange(ICollection`1<IPlugin> col);
    public virtual void TrimToSize();
    private void ValidateIndex(int i);
    private void ValidateIndex(int i, bool allowEqualEnd);
    private void EnsureCapacity(int min);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int start);
    [NullableContextAttribute("2")]
private sealed virtual override object System.Collections.IList.get_Item(int i);
    [NullableContextAttribute("2")]
private sealed virtual override void System.Collections.IList.set_Item(int i, object value);
    [NullableContextAttribute("2")]
private sealed virtual override int System.Collections.IList.Add(object x);
    [NullableContextAttribute("2")]
private sealed virtual override bool System.Collections.IList.Contains(object x);
    [NullableContextAttribute("2")]
private sealed virtual override int System.Collections.IList.IndexOf(object x);
    [NullableContextAttribute("2")]
private sealed virtual override void System.Collections.IList.Insert(int pos, object x);
    [NullableContextAttribute("2")]
private sealed virtual override void System.Collections.IList.Remove(object x);
    private sealed virtual override void System.Collections.IList.RemoveAt(int pos);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class log4net.Plugin.PluginMap : object {
    private ConcurrentDictionary`2<string, IPlugin> m_mapName2Plugin;
    private ILoggerRepository m_repository;
    [NullableAttribute("2")]
public IPlugin Item { get; }
    public PluginCollection AllPlugins { get; }
    public PluginMap(ILoggerRepository repository);
    public IPlugin get_Item(string name);
    public PluginCollection get_AllPlugins();
    public void Add(IPlugin plugin);
    public void Remove(IPlugin plugin);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class log4net.Plugin.PluginSkeleton : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ILoggerRepository <LoggerRepository>k__BackingField;
    public string Name { get; public set; }
    [NullableAttribute("2")]
protected ILoggerRepository LoggerRepository { get; protected set; }
    protected PluginSkeleton(string name);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    public virtual void Attach(ILoggerRepository repository);
    public virtual void Shutdown();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected virtual ILoggerRepository get_LoggerRepository();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected virtual void set_LoggerRepository(ILoggerRepository value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class log4net.Repository.ConfigurationChangedEventArgs : EventArgs {
    private ICollection configurationMessages;
    public ICollection ConfigurationMessages { get; }
    public ConfigurationChangedEventArgs(ICollection configurationMessages);
    public ICollection get_ConfigurationMessages();
}
internal class log4net.Repository.Hierarchy.DefaultLoggerFactory : object {
    [NullableContextAttribute("1")]
public sealed virtual Logger CreateLogger(ILoggerRepository repository, string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class log4net.Repository.Hierarchy.Hierarchy : LoggerRepositorySkeleton {
    private ConcurrentDictionary`2<LoggerKey, object> loggers;
    private ILoggerFactory defaultFactory;
    [NullableAttribute("2")]
private Logger rootLogger;
    private static Type declaringType;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private LoggerCreationEventHandler LoggerCreatedEvent;
    [CompilerGeneratedAttribute]
private bool <EmittedNoAppenderWarning>k__BackingField;
    internal bool EmittedNoAppenderWarning { get; internal set; }
    public Logger Root { get; }
    public ILoggerFactory LoggerFactory { get; public set; }
    public Hierarchy(PropertiesDictionary properties);
    public Hierarchy(ILoggerFactory loggerFactory);
    public Hierarchy(PropertiesDictionary properties, ILoggerFactory loggerFactory);
    private static Hierarchy();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void add_LoggerCreatedEvent(LoggerCreationEventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void remove_LoggerCreatedEvent(LoggerCreationEventHandler value);
    [CompilerGeneratedAttribute]
internal bool get_EmittedNoAppenderWarning();
    [CompilerGeneratedAttribute]
internal void set_EmittedNoAppenderWarning(bool value);
    public Logger get_Root();
    public ILoggerFactory get_LoggerFactory();
    public void set_LoggerFactory(ILoggerFactory value);
    public virtual ILogger Exists(string name);
    public virtual ILogger[] GetCurrentLoggers();
    public virtual ILogger GetLogger(string name);
    public virtual void Shutdown();
    public virtual void ResetConfiguration();
    public virtual void Log(LoggingEvent logEvent);
    public virtual IAppender[] GetAppenders();
    private static void CollectAppender(HashSet`1<IAppender> appenderList, IAppender appender);
    private static void CollectAppenders(HashSet`1<IAppender> appenderList, IAppenderAttachable container);
    private sealed virtual override void log4net.Repository.IBasicRepositoryConfigurator.Configure(IAppender appender);
    private sealed virtual override void log4net.Repository.IBasicRepositoryConfigurator.Configure(IAppender[] appenders);
    protected void BasicRepositoryConfigure(IAppender[] appenders);
    private sealed virtual override void log4net.Repository.IXmlRepositoryConfigurator.Configure(XmlElement element);
    protected void XmlRepositoryConfigure(XmlElement element);
    public bool IsDisabled(Level level);
    [EditorBrowsableAttribute("1")]
public void Clear();
    public Logger GetLogger(string name, ILoggerFactory factory);
    private Logger TryCreateLogger(LoggerKey key, ILoggerFactory factory);
    protected virtual void OnLoggerCreationEvent(Logger logger);
    private void UpdateParents(Logger log);
    private static void UpdateChildren(ProvisionNode pn, Logger log);
    internal void AddLevel(LevelEntry levelEntry);
    internal void AddProperty(PropertyEntry propertyEntry);
    [CompilerGeneratedAttribute]
private Logger <TryCreateLogger>g__CreateLogger|37_0(string name, <>c__DisplayClass37_0& );
    [CompilerGeneratedAttribute]
private void <TryCreateLogger>g__RegisterLogger|37_1(Logger logger, <>c__DisplayClass37_0& );
}
[NullableContextAttribute("1")]
public interface log4net.Repository.Hierarchy.ILoggerFactory {
    public abstract virtual Logger CreateLogger(ILoggerRepository repository, string name);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class log4net.Repository.Hierarchy.Logger : object {
    [NullableAttribute("1")]
private static Type declaringType;
    private Logger parent;
    private Hierarchy hierarchy;
    private AppenderAttachedImpl appenderAttachedImpl;
    [NullableAttribute("1")]
private ReaderWriterLock appenderLock;
    [CompilerGeneratedAttribute]
private bool <Additivity>k__BackingField;
    [CompilerGeneratedAttribute]
private Level <Level>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public Logger Parent { get; public set; }
    public bool Additivity { get; public set; }
    [NullableAttribute("1")]
public Level EffectiveLevel { get; }
    public Hierarchy Hierarchy { get; public set; }
    public Level Level { get; public set; }
    [NullableAttribute("1")]
public AppenderCollection Appenders { get; }
    [NullableAttribute("1")]
public string Name { get; }
    public ILoggerRepository Repository { get; }
    [NullableContextAttribute("1")]
protected Logger(string name);
    private static Logger();
    public virtual Logger get_Parent();
    public virtual void set_Parent(Logger value);
    [CompilerGeneratedAttribute]
public virtual bool get_Additivity();
    [CompilerGeneratedAttribute]
public virtual void set_Additivity(bool value);
    [NullableContextAttribute("1")]
public virtual Level get_EffectiveLevel();
    public virtual Hierarchy get_Hierarchy();
    public virtual void set_Hierarchy(Hierarchy value);
    [CompilerGeneratedAttribute]
public virtual Level get_Level();
    [CompilerGeneratedAttribute]
public virtual void set_Level(Level value);
    [NullableContextAttribute("1")]
public virtual void AddAppender(IAppender newAppender);
    [NullableContextAttribute("1")]
public virtual AppenderCollection get_Appenders();
    public virtual IAppender GetAppender(string name);
    public virtual void RemoveAllAppenders();
    public virtual IAppender RemoveAppender(IAppender appender);
    public virtual IAppender RemoveAppender(string name);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string get_Name();
    public virtual void Log(Type callerStackBoundaryDeclaringType, Level level, object message, Exception exception);
    public virtual void Log(LoggingEvent logEvent);
    public virtual bool IsEnabledFor(Level level);
    public sealed virtual ILoggerRepository get_Repository();
    [NullableContextAttribute("1")]
protected virtual void CallAppenders(LoggingEvent loggingEvent);
    public virtual void CloseNestedAppenders();
    public virtual void Log(Level level, object message, Exception exception);
    protected virtual void ForcedLog(Type callerStackBoundaryDeclaringType, Level level, object message, Exception exception);
    [NullableContextAttribute("1")]
protected virtual void ForcedLog(LoggingEvent logEvent);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class log4net.Repository.Hierarchy.LoggerCreationEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Logger <Logger>k__BackingField;
    public Logger Logger { get; }
    public LoggerCreationEventArgs(Logger log);
    [CompilerGeneratedAttribute]
public Logger get_Logger();
}
public class log4net.Repository.Hierarchy.LoggerCreationEventHandler : MulticastDelegate {
    public LoggerCreationEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, LoggerCreationEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, LoggerCreationEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Name}")]
internal class log4net.Repository.Hierarchy.LoggerKey : ValueType {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    private int m_hashCache;
    [CompilerGeneratedAttribute]
private static Comparer <ComparerInstance>k__BackingField;
    internal string Name { get; }
    public static Comparer ComparerInstance { get; }
    internal LoggerKey(string name);
    private static LoggerKey();
    public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
internal string get_Name();
    [CompilerGeneratedAttribute]
public static Comparer get_ComparerInstance();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class log4net.Repository.Hierarchy.ProvisionNode : List`1<Logger> {
    internal ProvisionNode(Logger log);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class log4net.Repository.Hierarchy.RootLogger : Logger {
    private static Type declaringType;
    public Level EffectiveLevel { get; }
    [NullableAttribute("2")]
public Level Level { get; public set; }
    public RootLogger(Level level);
    private static RootLogger();
    public virtual Level get_EffectiveLevel();
    [NullableContextAttribute("2")]
public virtual Level get_Level();
    [NullableContextAttribute("2")]
public virtual void set_Level(Level value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class log4net.Repository.Hierarchy.XmlHierarchyConfigurator : object {
    private static string CONFIGURATION_TAG;
    private static string RENDERER_TAG;
    private static string APPENDER_TAG;
    private static string APPENDER_REF_TAG;
    private static string PARAM_TAG;
    private static string CATEGORY_TAG;
    private static string PRIORITY_TAG;
    private static string LOGGER_TAG;
    private static string NAME_ATTR;
    private static string TYPE_ATTR;
    private static string VALUE_ATTR;
    private static string ROOT_TAG;
    private static string LEVEL_TAG;
    private static string REF_ATTR;
    private static string ADDITIVITY_ATTR;
    private static string THRESHOLD_ATTR;
    private static string CONFIG_DEBUG_ATTR;
    private static string INTERNAL_DEBUG_ATTR;
    private static string EMIT_INTERNAL_DEBUG_ATTR;
    private static string CONFIG_UPDATE_MODE_ATTR;
    private static string RENDERING_TYPE_ATTR;
    private static string RENDERED_TYPE_ATTR;
    private static string INHERITED;
    private Dictionary`2<string, IAppender> m_appenderBag;
    private Hierarchy m_hierarchy;
    private static Type declaringType;
    private static bool HasCaseInsensitiveEnvironment { get; }
    public XmlHierarchyConfigurator(Hierarchy hierarchy);
    private static XmlHierarchyConfigurator();
    [NullableContextAttribute("2")]
public void Configure(XmlElement element);
    protected IAppender FindAppenderByReference(XmlElement appenderRef);
    protected IAppender ParseAppender(XmlElement appenderElement);
    protected void ParseLogger(XmlElement loggerElement);
    protected void ParseRoot(XmlElement rootElement);
    protected void ParseChildrenOfLoggerElement(XmlElement catElement, Logger log, bool isRoot);
    protected void ParseRenderer(XmlElement element);
    protected void ParseLevel(XmlElement element, Logger log, bool isRoot);
    protected void SetParameter(XmlElement element, object target);
    private bool HasAttributesOrElements(XmlElement element);
    private static bool IsTypeConstructible(Type type);
    private static MethodInfo FindMethodInfo(Type targetType, string name);
    protected object ConvertStringTo(Type type, string value);
    [NullableContextAttribute("2")]
protected object CreateObjectFromXml(XmlElement element, Type defaultTargetType, Type typeConstraint);
    private static bool get_HasCaseInsensitiveEnvironment();
    private static IDictionary CreateCaseInsensitiveWrapper(IDictionary dict);
}
[NullableContextAttribute("1")]
public interface log4net.Repository.IBasicRepositoryConfigurator {
    public abstract virtual void Configure(IAppender appender);
    public abstract virtual void Configure(IAppender[] appenders);
}
[NullableContextAttribute("1")]
public interface log4net.Repository.ILoggerRepository {
    public string Name { get; public set; }
    public RendererMap RendererMap { get; }
    public PluginMap PluginMap { get; }
    public LevelMap LevelMap { get; }
    public Level Threshold { get; public set; }
    public bool Configured { get; public set; }
    public ICollection ConfigurationMessages { get; public set; }
    public PropertiesDictionary Properties { get; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual RendererMap get_RendererMap();
    public abstract virtual PluginMap get_PluginMap();
    public abstract virtual LevelMap get_LevelMap();
    public abstract virtual Level get_Threshold();
    public abstract virtual void set_Threshold(Level value);
    public abstract virtual ILogger Exists(string name);
    public abstract virtual ILogger[] GetCurrentLoggers();
    public abstract virtual ILogger GetLogger(string name);
    public abstract virtual void Shutdown();
    public abstract virtual void ResetConfiguration();
    public abstract virtual void Log(LoggingEvent logEvent);
    public abstract virtual bool get_Configured();
    public abstract virtual void set_Configured(bool value);
    public abstract virtual ICollection get_ConfigurationMessages();
    public abstract virtual void set_ConfigurationMessages(ICollection value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public abstract virtual void add_ShutdownEvent(LoggerRepositoryShutdownEventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public abstract virtual void remove_ShutdownEvent(LoggerRepositoryShutdownEventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public abstract virtual void add_ConfigurationReset(LoggerRepositoryConfigurationResetEventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public abstract virtual void remove_ConfigurationReset(LoggerRepositoryConfigurationResetEventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public abstract virtual void add_ConfigurationChanged(LoggerRepositoryConfigurationChangedEventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public abstract virtual void remove_ConfigurationChanged(LoggerRepositoryConfigurationChangedEventHandler value);
    public abstract virtual PropertiesDictionary get_Properties();
    public abstract virtual IAppender[] GetAppenders();
}
[NullableContextAttribute("1")]
public interface log4net.Repository.IXmlRepositoryConfigurator {
    public abstract virtual void Configure(XmlElement element);
}
public class log4net.Repository.LoggerRepositoryConfigurationChangedEventHandler : MulticastDelegate {
    public LoggerRepositoryConfigurationChangedEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, EventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, EventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class log4net.Repository.LoggerRepositoryConfigurationResetEventHandler : MulticastDelegate {
    public LoggerRepositoryConfigurationResetEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, EventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, EventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class log4net.Repository.LoggerRepositoryShutdownEventHandler : MulticastDelegate {
    public LoggerRepositoryShutdownEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, EventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, EventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class log4net.Repository.LoggerRepositorySkeleton : object {
    private RendererMap m_rendererMap;
    private LevelMap m_levelMap;
    private Level m_threshold;
    private ICollection m_configurationMessages;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private PluginMap <PluginMap>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Configured>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private LoggerRepositoryShutdownEventHandler ShutdownEvent;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private LoggerRepositoryConfigurationResetEventHandler ConfigurationReset;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private LoggerRepositoryConfigurationChangedEventHandler ConfigurationChanged;
    [CompilerGeneratedAttribute]
private PropertiesDictionary <Properties>k__BackingField;
    private static Type declaringType;
    public string Name { get; public set; }
    public Level Threshold { get; public set; }
    public RendererMap RendererMap { get; }
    public PluginMap PluginMap { get; }
    public LevelMap LevelMap { get; }
    public bool Configured { get; public set; }
    public ICollection ConfigurationMessages { get; public set; }
    public PropertiesDictionary Properties { get; }
    protected LoggerRepositorySkeleton(PropertiesDictionary properties);
    private static LoggerRepositorySkeleton();
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    public virtual Level get_Threshold();
    public virtual void set_Threshold(Level value);
    public virtual RendererMap get_RendererMap();
    [CompilerGeneratedAttribute]
public virtual PluginMap get_PluginMap();
    public virtual LevelMap get_LevelMap();
    public abstract virtual ILogger Exists(string name);
    public abstract virtual ILogger[] GetCurrentLoggers();
    public abstract virtual ILogger GetLogger(string name);
    public virtual void Shutdown();
    public virtual void ResetConfiguration();
    public abstract virtual void Log(LoggingEvent logEvent);
    [CompilerGeneratedAttribute]
public virtual bool get_Configured();
    [CompilerGeneratedAttribute]
public virtual void set_Configured(bool value);
    public virtual ICollection get_ConfigurationMessages();
    public virtual void set_ConfigurationMessages(ICollection value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void add_ShutdownEvent(LoggerRepositoryShutdownEventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void remove_ShutdownEvent(LoggerRepositoryShutdownEventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void add_ConfigurationReset(LoggerRepositoryConfigurationResetEventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void remove_ConfigurationReset(LoggerRepositoryConfigurationResetEventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void add_ConfigurationChanged(LoggerRepositoryConfigurationChangedEventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void remove_ConfigurationChanged(LoggerRepositoryConfigurationChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual PropertiesDictionary get_Properties();
    public abstract virtual IAppender[] GetAppenders();
    private void AddBuiltinLevels();
    public virtual void AddRenderer(Type typeToRender, IObjectRenderer rendererInstance);
    [NullableContextAttribute("2")]
protected virtual void OnShutdown(EventArgs e);
    [NullableContextAttribute("2")]
protected virtual void OnConfigurationReset(EventArgs e);
    [NullableContextAttribute("2")]
protected virtual void OnConfigurationChanged(EventArgs e);
    public void RaiseConfigurationChanged(EventArgs e);
    private static int GetWaitTime(DateTime startTimeUtc, int millisecondsTimeout);
    public sealed virtual bool Flush(int millisecondsTimeout);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class log4net.ThreadContext : object {
    [CompilerGeneratedAttribute]
private static ThreadContextProperties <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private static ThreadContextStacks <Stacks>k__BackingField;
    public static ThreadContextProperties Properties { get; }
    public static ThreadContextStacks Stacks { get; }
    private static ThreadContext();
    [CompilerGeneratedAttribute]
public static ThreadContextProperties get_Properties();
    [CompilerGeneratedAttribute]
public static ThreadContextStacks get_Stacks();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class log4net.Util.AppenderAttachedImpl : object {
    [NullableAttribute("2")]
private AppenderCollection m_appenderList;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IAppender[] m_appenderArray;
    private static Type declaringType;
    public AppenderCollection Appenders { get; }
    private static AppenderAttachedImpl();
    public int AppendLoopOnAppenders(LoggingEvent loggingEvent);
    public int AppendLoopOnAppenders(LoggingEvent[] loggingEvents);
    private static void CallAppend(IAppender appender, LoggingEvent[] loggingEvents);
    public sealed virtual void AddAppender(IAppender newAppender);
    public sealed virtual AppenderCollection get_Appenders();
    [NullableContextAttribute("2")]
public sealed virtual IAppender GetAppender(string name);
    public sealed virtual void RemoveAllAppenders();
    [NullableContextAttribute("2")]
public sealed virtual IAppender RemoveAppender(IAppender appender);
    public sealed virtual IAppender RemoveAppender(string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class log4net.Util.CompositeProperties : object {
    [NullableAttribute("2")]
private PropertiesDictionary m_flattened;
    private List`1<ReadOnlyPropertiesDictionary> m_nestedProperties;
    [NullableAttribute("2")]
public object Item { get; }
    public object get_Item(string key);
    public void Add(ReadOnlyPropertiesDictionary properties);
    public PropertiesDictionary Flatten();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public abstract class log4net.Util.ContextPropertiesBase : object {
    [NullableAttribute("2")]
public object Item { get; public set; }
    public abstract virtual object get_Item(string key);
    public abstract virtual void set_Item(string key, object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class log4net.Util.ConverterInfo : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertiesDictionary <Properties>k__BackingField;
    public string Name { get; public set; }
    [NullableAttribute("2")]
public Type Type { get; public set; }
    public PropertiesDictionary Properties { get; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Type get_Type();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Type(Type value);
    public void AddProperty(PropertyEntry entry);
    [CompilerGeneratedAttribute]
public PropertiesDictionary get_Properties();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class log4net.Util.CountingQuietTextWriter : QuietTextWriter {
    [CompilerGeneratedAttribute]
private long <Count>k__BackingField;
    public long Count { get; public set; }
    public CountingQuietTextWriter(TextWriter writer, IErrorHandler errorHandler);
    public virtual void Write(char value);
    public virtual void Write(Char[] buffer, int index, int count);
    [NullableContextAttribute("2")]
public virtual void Write(string str);
    [CompilerGeneratedAttribute]
public long get_Count();
    [CompilerGeneratedAttribute]
public void set_Count(long value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class log4net.Util.CyclicBuffer : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private LoggingEvent[] m_events;
    private int m_first;
    private int m_last;
    private int m_numElems;
    private int m_maxSize;
    public LoggingEvent Item { get; }
    public int MaxSize { get; }
    public int Length { get; }
    public CyclicBuffer(int maxSize);
    [NullableContextAttribute("1")]
public LoggingEvent Append(LoggingEvent loggingEvent);
    public LoggingEvent PopOldest();
    [NullableContextAttribute("1")]
public LoggingEvent[] PopAll();
    public void Clear();
    public LoggingEvent get_Item(int i);
    public int get_MaxSize();
    public int get_Length();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class log4net.Util.EmptyCollection : object {
    [CompilerGeneratedAttribute]
private static EmptyCollection <Instance>k__BackingField;
    public static EmptyCollection Instance { get; }
    public bool IsSynchronized { get; }
    public int Count { get; }
    public object SyncRoot { get; }
    private static EmptyCollection();
    [CompilerGeneratedAttribute]
public static EmptyCollection get_Instance();
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual int get_Count();
    public sealed virtual object get_SyncRoot();
    public sealed virtual IEnumerator GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class log4net.Util.EmptyDictionary : object {
    [CompilerGeneratedAttribute]
private static EmptyDictionary <Instance>k__BackingField;
    public static EmptyDictionary Instance { get; }
    public bool IsSynchronized { get; }
    public int Count { get; }
    public object SyncRoot { get; }
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public ICollection Keys { get; }
    public ICollection Values { get; }
    [NullableAttribute("2")]
public object Item { get; public set; }
    private static EmptyDictionary();
    [CompilerGeneratedAttribute]
public static EmptyDictionary get_Instance();
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual int get_Count();
    public sealed virtual object get_SyncRoot();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void Add(object key, object value);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(object key);
    public sealed virtual IDictionaryEnumerator GetEnumerator();
    public sealed virtual void Remove(object key);
    public sealed virtual bool get_IsFixedSize();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual ICollection get_Keys();
    public sealed virtual ICollection get_Values();
    public sealed virtual object get_Item(object key);
    public sealed virtual void set_Item(object key, object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class log4net.Util.EncodingWithoutPreamble : Encoding {
    private Encoding wrapped;
    public string BodyName { get; }
    public int CodePage { get; }
    public string EncodingName { get; }
    public string HeaderName { get; }
    public bool IsBrowserDisplay { get; }
    public bool IsBrowserSave { get; }
    public bool IsMailNewsDisplay { get; }
    public bool IsMailNewsSave { get; }
    public bool IsSingleByte { get; }
    public string WebName { get; }
    public int WindowsCodePage { get; }
    private EncodingWithoutPreamble(Encoding wrapped);
    internal static Encoding Get(Encoding encoding);
    public virtual string get_BodyName();
    public virtual int get_CodePage();
    public virtual string get_EncodingName();
    public virtual string get_HeaderName();
    public virtual bool get_IsBrowserDisplay();
    public virtual bool get_IsBrowserSave();
    public virtual bool get_IsMailNewsDisplay();
    public virtual bool get_IsMailNewsSave();
    public virtual bool get_IsSingleByte();
    public virtual string get_WebName();
    public virtual int get_WindowsCodePage();
    public virtual object Clone();
    public virtual int GetByteCount(Char[] chars, int index, int count);
    public virtual int GetBytes(Char[] chars, int charIndex, int charCount, Byte[] bytes, int byteIndex);
    public virtual int GetCharCount(Byte[] bytes, int index, int count);
    public virtual int GetChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex);
    public virtual int GetMaxByteCount(int charCount);
    public virtual int GetMaxCharCount(int byteCount);
    public virtual Decoder GetDecoder();
    public virtual Encoder GetEncoder();
    public virtual bool IsAlwaysNormalized(NormalizationForm form);
    public virtual bool Equals(object value);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class log4net.Util.FormattingInfo : object {
    [CompilerGeneratedAttribute]
private int <Min>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Max>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LeftAlign>k__BackingField;
    public int Min { get; public set; }
    public int Max { get; public set; }
    public bool LeftAlign { get; public set; }
    public FormattingInfo(int min, int max, bool leftAlign);
    [CompilerGeneratedAttribute]
public int get_Min();
    [CompilerGeneratedAttribute]
public void set_Min(int value);
    [CompilerGeneratedAttribute]
public int get_Max();
    [CompilerGeneratedAttribute]
public void set_Max(int value);
    [CompilerGeneratedAttribute]
public bool get_LeftAlign();
    [CompilerGeneratedAttribute]
public void set_LeftAlign(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class log4net.Util.GlobalContextProperties : ContextPropertiesBase {
    private ReadOnlyPropertiesDictionary modreq(System.Runtime.CompilerServices.IsVolatile) m_readOnlyProperties;
    private object m_syncRoot;
    [NullableAttribute("2")]
public object Item { get; public set; }
    public virtual object get_Item(string key);
    public virtual void set_Item(string key, object value);
    public void Remove(string key);
    public void Clear();
    internal ReadOnlyPropertiesDictionary GetReadOnlyProperties();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class log4net.Util.ILogExtensions : object {
    private static Type declaringType;
    private static ILogExtensions();
    [ExtensionAttribute]
public static void DebugExt(ILog logger, Func`1<object> callback);
    [ExtensionAttribute]
public static void DebugExt(ILog logger, Func`1<object> callback, Exception exception);
    [ExtensionAttribute]
public static void DebugExt(ILog logger, object message);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static void DebugExt(ILog logger, object message, Exception exception);
    [ExtensionAttribute]
public static void DebugFormatExt(ILog logger, string format, object arg0);
    [ExtensionAttribute]
public static void DebugFormatExt(ILog logger, string format, Object[] args);
    [ExtensionAttribute]
public static void DebugFormatExt(ILog logger, IFormatProvider provider, string format, Object[] args);
    [ExtensionAttribute]
public static void DebugFormatExt(ILog logger, string format, object arg0, object arg1);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static void DebugFormatExt(ILog logger, string format, object arg0, object arg1, object arg2);
    [ExtensionAttribute]
public static void InfoExt(ILog logger, Func`1<object> callback);
    [ExtensionAttribute]
public static void InfoExt(ILog logger, Func`1<object> callback, Exception exception);
    [ExtensionAttribute]
public static void InfoExt(ILog logger, object message);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static void InfoExt(ILog logger, object message, Exception exception);
    [ExtensionAttribute]
public static void InfoFormatExt(ILog logger, string format, object arg0);
    [ExtensionAttribute]
public static void InfoFormatExt(ILog logger, string format, Object[] args);
    [ExtensionAttribute]
public static void InfoFormatExt(ILog logger, IFormatProvider provider, string format, Object[] args);
    [ExtensionAttribute]
public static void InfoFormatExt(ILog logger, string format, object arg0, object arg1);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static void InfoFormatExt(ILog logger, string format, object arg0, object arg1, object arg2);
    [ExtensionAttribute]
public static void WarnExt(ILog logger, Func`1<object> callback);
    [ExtensionAttribute]
public static void WarnExt(ILog logger, Func`1<object> callback, Exception exception);
    [ExtensionAttribute]
public static void WarnExt(ILog logger, object message);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static void WarnExt(ILog logger, object message, Exception exception);
    [ExtensionAttribute]
public static void WarnFormatExt(ILog logger, string format, object arg0);
    [ExtensionAttribute]
public static void WarnFormatExt(ILog logger, string format, Object[] args);
    [ExtensionAttribute]
public static void WarnFormatExt(ILog logger, IFormatProvider provider, string format, Object[] args);
    [ExtensionAttribute]
public static void WarnFormatExt(ILog logger, string format, object arg0, object arg1);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static void WarnFormatExt(ILog logger, string format, object arg0, object arg1, object arg2);
    [ExtensionAttribute]
public static void ErrorExt(ILog logger, Func`1<object> callback);
    [ExtensionAttribute]
public static void ErrorExt(ILog logger, Func`1<object> callback, Exception exception);
    [ExtensionAttribute]
public static void ErrorExt(ILog logger, object message);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static void ErrorExt(ILog logger, object message, Exception exception);
    [ExtensionAttribute]
public static void ErrorFormatExt(ILog logger, string format, object arg0);
    [ExtensionAttribute]
public static void ErrorFormatExt(ILog logger, string format, Object[] args);
    [ExtensionAttribute]
public static void ErrorFormatExt(ILog logger, IFormatProvider provider, string format, Object[] args);
    [ExtensionAttribute]
public static void ErrorFormatExt(ILog logger, string format, object arg0, object arg1);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static void ErrorFormatExt(ILog logger, string format, object arg0, object arg1, object arg2);
    [ExtensionAttribute]
public static void FatalExt(ILog logger, Func`1<object> callback);
    [ExtensionAttribute]
public static void FatalExt(ILog logger, Func`1<object> callback, Exception exception);
    [ExtensionAttribute]
public static void FatalExt(ILog logger, object message);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static void FatalExt(ILog logger, object message, Exception exception);
    [ExtensionAttribute]
public static void FatalFormatExt(ILog logger, string format, object arg0);
    [ExtensionAttribute]
public static void FatalFormatExt(ILog logger, string format, Object[] args);
    [ExtensionAttribute]
public static void FatalFormatExt(ILog logger, IFormatProvider provider, string format, Object[] args);
    [ExtensionAttribute]
public static void FatalFormatExt(ILog logger, string format, object arg0, object arg1);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static void FatalFormatExt(ILog logger, string format, object arg0, object arg1, object arg2);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class log4net.Util.LevelMapping : object {
    private Dictionary`2<Level, LevelMappingEntry> entries;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<LevelMappingEntry> sortedEntries;
    public void Add(LevelMappingEntry entry);
    [NullableContextAttribute("2")]
public LevelMappingEntry Lookup(Level level);
    public sealed virtual void ActivateOptions();
    private List`1<LevelMappingEntry> SortEntries();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{Level}")]
public abstract class log4net.Util.LevelMappingEntry : object {
    [CompilerGeneratedAttribute]
private Level <Level>k__BackingField;
    public Level Level { get; public set; }
    [CompilerGeneratedAttribute]
public Level get_Level();
    [CompilerGeneratedAttribute]
public void set_Level(Level value);
    public virtual void ActivateOptions();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class log4net.Util.Log4NetAssert : object {
    private static ArgumentNullException ArgumentNull(string name, string errorMessage);
    [ExtensionAttribute]
public static T EnsureNotNull(T value, string name, string errorMessage);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static T EnsureIs(object value, string name, string errorMessage);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class log4net.Util.LogicalThreadContextProperties : ContextPropertiesBase {
    private static string c_SlotName;
    private bool m_disabled;
    private static Type declaringType;
    [NullableAttribute("2")]
public object Item { get; public set; }
    private static LogicalThreadContextProperties();
    public virtual object get_Item(string key);
    public virtual void set_Item(string key, object value);
    public void Remove(string key);
    public void Clear();
    [NullableContextAttribute("2")]
internal PropertiesDictionary GetProperties(bool create);
    [NullableContextAttribute("2")]
[SecuritySafeCriticalAttribute]
private static PropertiesDictionary GetLogicalProperties();
    [SecuritySafeCriticalAttribute]
private static void SetLogicalProperties(PropertiesDictionary properties);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class log4net.Util.LogicalThreadContextStack : object {
    [NullableAttribute("1")]
private Stack`1<StackFrame> m_stack;
    [NullableAttribute("1")]
private string m_propertyKey;
    [NullableAttribute("1")]
private TwoArgAction`2<string, LogicalThreadContextStack> m_registerNew;
    public int Count { get; }
    [NullableContextAttribute("1")]
internal LogicalThreadContextStack(string propertyKey, TwoArgAction`2<string, LogicalThreadContextStack> registerNew);
    public int get_Count();
    public void Clear();
    public string Pop();
    [NullableContextAttribute("1")]
public IDisposable Push(string message);
    public string Peek();
    internal string GetFullMessage();
    public virtual string ToString();
    private sealed virtual override object log4net.Core.IFixingRequired.GetFixedObject();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class log4net.Util.LogicalThreadContextStacks : object {
    private LogicalThreadContextProperties m_properties;
    private static Type declaringType;
    public LogicalThreadContextStack Item { get; }
    internal LogicalThreadContextStacks(LogicalThreadContextProperties properties);
    private static LogicalThreadContextStacks();
    public LogicalThreadContextStack get_Item(string key);
    private void RegisterNew(string stackName, LogicalThreadContextStack stack);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class log4net.Util.LogLog : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private static LogReceivedEventHandler LogReceived;
    [CompilerGeneratedAttribute]
private Type <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <TimeStampUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Prefix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <InternalDebugging>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <QuietMode>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <EmitInternalMessages>k__BackingField;
    private static string PREFIX;
    private static string ERR_PREFIX;
    private static string WARN_PREFIX;
    public Type Source { get; }
    public DateTime TimeStamp { get; }
    public DateTime TimeStampUtc { get; }
    public string Prefix { get; }
    public string Message { get; }
    [NullableAttribute("2")]
public Exception Exception { get; }
    public static bool InternalDebugging { get; public set; }
    public static bool QuietMode { get; public set; }
    public static bool EmitInternalMessages { get; public set; }
    public static bool IsDebugEnabled { get; }
    public static bool IsWarnEnabled { get; }
    public static bool IsErrorEnabled { get; }
    public LogLog(Type source, string prefix, string message, Exception exception);
    private static LogLog();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static void add_LogReceived(LogReceivedEventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static void remove_LogReceived(LogReceivedEventHandler value);
    [CompilerGeneratedAttribute]
public Type get_Source();
    public DateTime get_TimeStamp();
    [CompilerGeneratedAttribute]
public DateTime get_TimeStampUtc();
    [CompilerGeneratedAttribute]
public string get_Prefix();
    [CompilerGeneratedAttribute]
public string get_Message();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Exception get_Exception();
    public virtual string ToString();
    [CompilerGeneratedAttribute]
public static bool get_InternalDebugging();
    [CompilerGeneratedAttribute]
public static void set_InternalDebugging(bool value);
    [CompilerGeneratedAttribute]
public static bool get_QuietMode();
    [CompilerGeneratedAttribute]
public static void set_QuietMode(bool value);
    [CompilerGeneratedAttribute]
public static bool get_EmitInternalMessages();
    [CompilerGeneratedAttribute]
public static void set_EmitInternalMessages(bool value);
    public static void OnLogReceived(Type source, string prefix, string message, Exception exception);
    public static bool get_IsDebugEnabled();
    public static void Debug(Type source, string message);
    public static void Debug(Type source, string message, Exception exception);
    public static bool get_IsWarnEnabled();
    public static void Warn(Type source, string message);
    public static void Warn(Type source, string message, Exception exception);
    public static bool get_IsErrorEnabled();
    public static void Error(Type source, string message);
    public static void Error(Type source, string message, Exception exception);
    private static void EmitOutLine(string message);
    private static void EmitErrorLine(string message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class log4net.Util.LogReceivedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private LogLog <LogLog>k__BackingField;
    public LogLog LogLog { get; }
    public LogReceivedEventArgs(LogLog loglog);
    [CompilerGeneratedAttribute]
public LogLog get_LogLog();
}
public class log4net.Util.LogReceivedEventHandler : MulticastDelegate {
    public LogReceivedEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object source, LogReceivedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object source, LogReceivedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class log4net.Util.NativeError : object {
    [CompilerGeneratedAttribute]
private int <Number>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    private static Char[] Newlines;
    public int Number { get; }
    [NullableAttribute("2")]
public string Message { get; }
    [NullableContextAttribute("2")]
private NativeError(int number, string message);
    private static NativeError();
    [CompilerGeneratedAttribute]
public int get_Number();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Message();
    [SecuritySafeCriticalAttribute]
public static NativeError GetLastError();
    public static NativeError GetError(int number);
    [NullableContextAttribute("2")]
[SecuritySafeCriticalAttribute]
public static string GetErrorMessage(int messageId);
    public virtual string ToString();
    [DefaultDllImportSearchPathsAttribute("2048")]
private static int FormatMessage(int dwFlags, IntPtr& lpSource, int dwMessageId, int dwLanguageId, String& lpBuffer, int nSize, IntPtr Arguments);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class log4net.Util.NullDictionaryEnumerator : object {
    [CompilerGeneratedAttribute]
private static NullDictionaryEnumerator <Instance>k__BackingField;
    public static NullDictionaryEnumerator Instance { get; }
    public object Current { get; }
    public object Key { get; }
    public object Value { get; }
    public DictionaryEntry Entry { get; }
    private static NullDictionaryEnumerator();
    [CompilerGeneratedAttribute]
public static NullDictionaryEnumerator get_Instance();
    public sealed virtual object get_Current();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
    public sealed virtual object get_Key();
    public sealed virtual object get_Value();
    public sealed virtual DictionaryEntry get_Entry();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class log4net.Util.NullEnumerator : object {
    [CompilerGeneratedAttribute]
private static NullEnumerator <Instance>k__BackingField;
    public static NullEnumerator Instance { get; }
    public object Current { get; }
    private static NullEnumerator();
    [CompilerGeneratedAttribute]
public static NullEnumerator get_Instance();
    public sealed virtual object get_Current();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class log4net.Util.NullSecurityContext : SecurityContext {
    public static NullSecurityContext Instance;
    private static NullSecurityContext();
    public virtual IDisposable Impersonate(object state);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class log4net.Util.OnlyOnceErrorHandler : object {
    [CompilerGeneratedAttribute]
private bool <IsEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <EnabledDateUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
private ErrorCode <ErrorCode>k__BackingField;
    [NullableAttribute("1")]
private string m_prefix;
    [NullableAttribute("1")]
private static Type declaringType;
    public bool IsEnabled { get; private set; }
    public DateTime EnabledDate { get; }
    public DateTime EnabledDateUtc { get; private set; }
    public string ErrorMessage { get; private set; }
    public Exception Exception { get; private set; }
    public ErrorCode ErrorCode { get; private set; }
    [NullableContextAttribute("1")]
public OnlyOnceErrorHandler(string prefix);
    private static OnlyOnceErrorHandler();
    public void Reset();
    [NullableContextAttribute("1")]
public sealed virtual void Error(string message, Exception e, ErrorCode errorCode);
    [NullableContextAttribute("1")]
public virtual void FirstError(string message, Exception e, ErrorCode errorCode);
    [NullableContextAttribute("1")]
public sealed virtual void Error(string message, Exception e);
    [NullableContextAttribute("1")]
public sealed virtual void Error(string message);
    [CompilerGeneratedAttribute]
public bool get_IsEnabled();
    [CompilerGeneratedAttribute]
private void set_IsEnabled(bool value);
    public DateTime get_EnabledDate();
    [CompilerGeneratedAttribute]
public DateTime get_EnabledDateUtc();
    [CompilerGeneratedAttribute]
private void set_EnabledDateUtc(DateTime value);
    [CompilerGeneratedAttribute]
public string get_ErrorMessage();
    [CompilerGeneratedAttribute]
private void set_ErrorMessage(string value);
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
private void set_Exception(Exception value);
    [CompilerGeneratedAttribute]
public ErrorCode get_ErrorCode();
    [CompilerGeneratedAttribute]
private void set_ErrorCode(ErrorCode value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class log4net.Util.OptionConverter : object {
    private static Type declaringType;
    private static string DELIM_START;
    private static char DELIM_STOP;
    private static int DELIM_START_LEN;
    private static int DELIM_STOP_LEN;
    private static OptionConverter();
    [NullableContextAttribute("2")]
public static bool ToBoolean(string argValue, bool defaultValue);
    [NullableContextAttribute("2")]
public static long ToFileSize(string argValue, long defaultValue);
    public static object ConvertStringTo(Type target, string txt);
    [NullableContextAttribute("2")]
public static bool CanConvertTypeTo(Type sourceType, Type targetType);
    public static object ConvertTypeTo(object sourceInstance, Type targetType);
    [NullableContextAttribute("2")]
public static object InstantiateByClassName(string className, Type superClass, object defaultValue);
    public static string SubstituteVariables(string value, IDictionary props);
    private static object ParseEnum(Type enumType, string value, bool ignoreCase);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class log4net.Util.PatternConverter : object {
    [CompilerGeneratedAttribute]
private string <Option>k__BackingField;
    [NullableAttribute("1")]
private static String[] SPACES;
    private PatternConverter m_next;
    private int m_min;
    private int m_max;
    private bool m_leftAlign;
    [NullableAttribute("1")]
private ReusableStringWriter m_formatWriter;
    private static int c_renderBufferSize;
    private static int c_renderBufferMaxCapacity;
    [CompilerGeneratedAttribute]
private PropertiesDictionary <Properties>k__BackingField;
    public PatternConverter Next { get; }
    [NullableAttribute("1")]
public FormattingInfo FormattingInfo { get; public set; }
    public string Option { get; public set; }
    public PropertiesDictionary Properties { get; public set; }
    private static PatternConverter();
    public virtual PatternConverter get_Next();
    [NullableContextAttribute("1")]
public virtual FormattingInfo get_FormattingInfo();
    [NullableContextAttribute("1")]
public virtual void set_FormattingInfo(FormattingInfo value);
    [CompilerGeneratedAttribute]
public virtual string get_Option();
    [CompilerGeneratedAttribute]
public virtual void set_Option(string value);
    [NullableContextAttribute("1")]
public abstract virtual void Convert(TextWriter writer, object state);
    [NullableContextAttribute("1")]
public virtual PatternConverter SetNext(PatternConverter patternConverter);
    [NullableContextAttribute("1")]
public virtual void Format(TextWriter writer, object state);
    [NullableContextAttribute("1")]
protected static void SpacePad(TextWriter writer, int length);
    [NullableContextAttribute("1")]
protected static void WriteDictionary(TextWriter writer, ILoggerRepository repository, IDictionary value);
    [NullableContextAttribute("1")]
protected static void WriteDictionary(TextWriter writer, ILoggerRepository repository, IDictionaryEnumerator value);
    protected static void WriteObject(TextWriter writer, ILoggerRepository repository, object value);
    [CompilerGeneratedAttribute]
public PropertiesDictionary get_Properties();
    [CompilerGeneratedAttribute]
public void set_Properties(PropertiesDictionary value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class log4net.Util.PatternParser : object {
    [CompilerGeneratedAttribute]
private Hashtable <PatternConverters>k__BackingField;
    private static char ESCAPE_CHAR;
    [NullableAttribute("2")]
private PatternConverter m_head;
    [NullableAttribute("2")]
private PatternConverter m_tail;
    private string m_pattern;
    private static Type declaringType;
    public Hashtable PatternConverters { get; }
    public PatternParser(string pattern);
    private static PatternParser();
    [NullableContextAttribute("2")]
public PatternConverter Parse();
    [CompilerGeneratedAttribute]
public Hashtable get_PatternConverters();
    private String[] BuildCache();
    private void ParseInternal(string pattern, String[] matches);
    private void ProcessLiteral(string text);
    private void ProcessConverter(string converterName, string option, FormattingInfo formattingInfo);
    private void AddConverter(PatternConverter pc);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class log4net.Util.PatternString : object {
    private static Dictionary`2<string, Type> s_globalRulesRegistry;
    [NullableAttribute("2")]
private PatternConverter m_head;
    private Dictionary`2<string, ConverterInfo> m_instanceRulesRegistry;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <ConversionPattern>k__BackingField;
    [NullableAttribute("2")]
public string ConversionPattern { get; public set; }
    [NullableContextAttribute("2")]
public PatternString(string pattern);
    private static PatternString();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_ConversionPattern();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ConversionPattern(string value);
    public virtual void ActivateOptions();
    private PatternParser CreatePatternParser(string pattern);
    public void Format(TextWriter writer);
    public string Format();
    public void AddConverter(ConverterInfo converterInfo);
    public void AddConverter(string name, Type type);
}
internal class log4net.Util.PatternStringConverters.AppDomainPatternConverter : PatternConverter {
    [NullableContextAttribute("1")]
public virtual void Convert(TextWriter writer, object state);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class log4net.Util.PatternStringConverters.AppSettingPatternConverter : PatternConverter {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Dictionary`2<string, string> _appSettingsHashTable;
    private static IDictionary AppSettingsDictionary { get; }
    private static IDictionary get_AppSettingsDictionary();
    public virtual void Convert(TextWriter writer, object state);
}
internal class log4net.Util.PatternStringConverters.DatePatternConverter : PatternConverter {
    [NullableAttribute("2")]
protected IDateFormatter m_dateFormatter;
    [NullableAttribute("1")]
private static Type declaringType;
    private static DatePatternConverter();
    public sealed virtual void ActivateOptions();
    [NullableContextAttribute("1")]
public virtual void Convert(TextWriter writer, object state);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class log4net.Util.PatternStringConverters.EnvironmentFolderPathPatternConverter : PatternConverter {
    private static Type declaringType;
    private static EnvironmentFolderPathPatternConverter();
    public virtual void Convert(TextWriter writer, object state);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class log4net.Util.PatternStringConverters.EnvironmentPatternConverter : PatternConverter {
    private static Type declaringType;
    private static EnvironmentPatternConverter();
    public virtual void Convert(TextWriter writer, object state);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class log4net.Util.PatternStringConverters.IdentityPatternConverter : PatternConverter {
    private static Type declaringType;
    private static IdentityPatternConverter();
    public virtual void Convert(TextWriter writer, object state);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class log4net.Util.PatternStringConverters.LiteralPatternConverter : PatternConverter {
    public virtual PatternConverter SetNext(PatternConverter pc);
    public virtual void Format(TextWriter writer, object state);
    public virtual void Convert(TextWriter writer, object state);
}
internal class log4net.Util.PatternStringConverters.NewLinePatternConverter : LiteralPatternConverter {
    public sealed virtual void ActivateOptions();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class log4net.Util.PatternStringConverters.ProcessIdPatternConverter : PatternConverter {
    private static Type declaringType;
    private static ProcessIdPatternConverter();
    [SecuritySafeCriticalAttribute]
public virtual void Convert(TextWriter writer, object state);
}
internal class log4net.Util.PatternStringConverters.PropertyPatternConverter : PatternConverter {
    [NullableContextAttribute("1")]
public virtual void Convert(TextWriter writer, object state);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class log4net.Util.PatternStringConverters.RandomStringPatternConverter : PatternConverter {
    private static Random s_random;
    private int m_length;
    private static Type declaringType;
    private static RandomStringPatternConverter();
    public sealed virtual void ActivateOptions();
    public virtual void Convert(TextWriter writer, object state);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class log4net.Util.PatternStringConverters.UserNamePatternConverter : PatternConverter {
    private static Type declaringType;
    private static UserNamePatternConverter();
    public virtual void Convert(TextWriter writer, object state);
    [CompilerGeneratedAttribute]
internal static void <Convert>g__Fallback|0_0(TextWriter writer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class log4net.Util.PatternStringConverters.UtcDatePatternConverter : DatePatternConverter {
    private static Type declaringType;
    private static UtcDatePatternConverter();
    public virtual void Convert(TextWriter writer, object state);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class log4net.Util.PropertiesDictionary : ReadOnlyPropertiesDictionary {
    [NullableAttribute("2")]
public object Item { get; public set; }
    private bool System.Collections.IDictionary.IsReadOnly { get; }
    [NullableAttribute("2")]
private object System.Collections.IDictionary.Item { get; private set; }
    public PropertiesDictionary(ReadOnlyPropertiesDictionary propertiesDictionary);
    private PropertiesDictionary(SerializationInfo info, StreamingContext context);
    public virtual object get_Item(string key);
    public virtual void set_Item(string key, object value);
    public virtual void Add(string key, object value);
    public virtual bool Remove(string key);
    private sealed virtual override IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator();
    private sealed virtual override void System.Collections.IDictionary.Remove(object key);
    public virtual void Clear();
    private sealed virtual override void System.Collections.IDictionary.Add(object key, object value);
    private sealed virtual override bool System.Collections.IDictionary.get_IsReadOnly();
    private sealed virtual override object System.Collections.IDictionary.get_Item(object key);
    private sealed virtual override void System.Collections.IDictionary.set_Item(object key, object value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class log4net.Util.PropertyEntry : object {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public string Key { get; public set; }
    public object Value { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(string value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class log4net.Util.ProtectCloseTextWriter : TextWriterAdapter {
    public ProtectCloseTextWriter(TextWriter writer);
    public void Attach(TextWriter writer);
    public virtual void Close();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class log4net.Util.QuietTextWriter : TextWriterAdapter {
    [CompilerGeneratedAttribute]
private bool <Closed>k__BackingField;
    private IErrorHandler m_errorHandler;
    public IErrorHandler ErrorHandler { get; public set; }
    public bool Closed { get; private set; }
    public QuietTextWriter(TextWriter writer, IErrorHandler errorHandler);
    public IErrorHandler get_ErrorHandler();
    public void set_ErrorHandler(IErrorHandler value);
    [CompilerGeneratedAttribute]
public bool get_Closed();
    [CompilerGeneratedAttribute]
private void set_Closed(bool value);
    public virtual void Write(char value);
    public virtual void Write(Char[] buffer, int index, int count);
    [NullableContextAttribute("2")]
public virtual void Write(string value);
    public virtual void Close();
}
public class log4net.Util.ReaderWriterLock : object {
    [NullableAttribute("1")]
private ReaderWriterLockSlim m_lock;
    public void AcquireReaderLock();
    public void ReleaseReaderLock();
    public void AcquireWriterLock();
    public void ReleaseWriterLock();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class log4net.Util.ReadOnlyPropertiesDictionary : object {
    private static string ReadOnlyMessage;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Dictionary`2<string, object> <InnerHashtable>k__BackingField;
    [NullableAttribute("2")]
public object Item { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
protected Dictionary`2<string, object> InnerHashtable { get; }
    private bool System.Collections.IDictionary.IsReadOnly { get; }
    [NullableAttribute("2")]
private object System.Collections.IDictionary.Item { get; private set; }
    public ICollection`1<string> Keys { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ICollection`1<object> Values { get; }
    private ICollection System.Collections.IDictionary.Values { get; }
    private ICollection System.Collections.IDictionary.Keys { get; }
    private bool System.Collections.IDictionary.IsFixedSize { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public ReadOnlyPropertiesDictionary(ReadOnlyPropertiesDictionary propertiesDictionary);
    protected ReadOnlyPropertiesDictionary(SerializationInfo info, StreamingContext context);
    public String[] GetKeys();
    public sealed virtual bool ContainsKey(string key);
    public virtual void Add(string key, object value);
    public virtual bool Remove(string key);
    public sealed virtual bool TryGetValue(string key, Object& value);
    public virtual object get_Item(string key);
    public virtual void set_Item(string key, object value);
    public bool Contains(string key);
    [CompilerGeneratedAttribute]
protected Dictionary`2<string, object> get_InnerHashtable();
    [SecurityCriticalAttribute]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    private sealed virtual override IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator();
    private sealed virtual override IEnumerator`1<KeyValuePair`2<string, object>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.GetEnumerator();
    private sealed virtual override void System.Collections.IDictionary.Remove(object key);
    private sealed virtual override bool System.Collections.IDictionary.Contains(object key);
    public sealed virtual void Add(KeyValuePair`2<string, object> item);
    public virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<string, object> item);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual bool Remove(KeyValuePair`2<string, object> item);
    private sealed virtual override void System.Collections.IDictionary.Add(object key, object value);
    private sealed virtual override bool System.Collections.IDictionary.get_IsReadOnly();
    private sealed virtual override object System.Collections.IDictionary.get_Item(object key);
    private sealed virtual override void System.Collections.IDictionary.set_Item(object key, object value);
    public sealed virtual ICollection`1<string> get_Keys();
    public sealed virtual ICollection`1<object> get_Values();
    private sealed virtual override ICollection System.Collections.IDictionary.get_Values();
    private sealed virtual override ICollection System.Collections.IDictionary.get_Keys();
    private sealed virtual override bool System.Collections.IDictionary.get_IsFixedSize();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class log4net.Util.ReusableStringWriter : StringWriter {
    [NullableContextAttribute("1")]
public ReusableStringWriter(IFormatProvider formatProvider);
    protected virtual void Dispose(bool disposing);
    public void Reset(int maxCapacity, int defaultSize);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class log4net.Util.SystemInfo : object {
    private static string DEFAULT_NULL_TEXT;
    private static string DEFAULT_NOT_AVAILABLE_TEXT;
    [NullableAttribute("2")]
private static string entryAssemblyLocation;
    [CompilerGeneratedAttribute]
private static string <NullText>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <NotAvailableText>k__BackingField;
    private static Type declaringType;
    [NullableAttribute("2")]
private static string s_hostName;
    [NullableAttribute("2")]
private static string s_appFriendlyName;
    private static DateTime s_processStartTimeUtc;
    public static string NewLine { get; }
    public static string ApplicationBaseDirectory { get; }
    public static string ConfigurationFileLocation { get; }
    public static string EntryAssemblyLocation { get; public set; }
    public static int CurrentThreadId { get; }
    public static string HostName { get; }
    public static string ApplicationFriendlyName { get; }
    public static DateTime ProcessStartTimeUtc { get; }
    public static string NullText { get; public set; }
    public static string NotAvailableText { get; public set; }
    private static SystemInfo();
    public static string get_NewLine();
    public static string get_ApplicationBaseDirectory();
    public static string get_ConfigurationFileLocation();
    public static string get_EntryAssemblyLocation();
    public static void set_EntryAssemblyLocation(string value);
    public static int get_CurrentThreadId();
    public static string get_HostName();
    public static string get_ApplicationFriendlyName();
    public static DateTime get_ProcessStartTimeUtc();
    [CompilerGeneratedAttribute]
public static string get_NullText();
    [CompilerGeneratedAttribute]
public static void set_NullText(string value);
    [CompilerGeneratedAttribute]
public static string get_NotAvailableText();
    [CompilerGeneratedAttribute]
public static void set_NotAvailableText(string value);
    public static string AssemblyLocationInfo(Assembly myAssembly);
    public static string AssemblyShortName(Assembly myAssembly);
    public static string AssemblyFileName(Assembly myAssembly);
    public static Type GetTypeFromString(Type relativeType, string typeName, bool throwOnError, bool ignoreCase);
    public static Type GetTypeFromString(string typeName, bool throwOnError, bool ignoreCase);
    public static Type GetTypeFromString(Assembly relativeAssembly, string typeName, bool throwOnError, bool ignoreCase);
    public static ArgumentOutOfRangeException CreateArgumentOutOfRangeException(string parameterName, object actualValue, string message);
    public static NotSupportedException CreateReadOnlyCollectionNotModifiableException();
    public static bool TryParse(string s, Int32& val);
    public static bool TryParse(string s, Int64& val);
    public static bool TryParse(string s, Int16& val);
    public static string GetAppSetting(string key);
    public static string ConvertToFullPath(string path);
    public static Hashtable CreateCaseInsensitiveHashtable();
    [NullableContextAttribute("2")]
public static bool EqualsIgnoringCase(string a, string b);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class log4net.Util.SystemStringFormat : object {
    [NullableAttribute("2")]
private IFormatProvider m_provider;
    [CompilerGeneratedAttribute]
private string <Format>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Object[] <Args>k__BackingField;
    private static Type declaringType;
    public string Format { get; public set; }
    [NullableAttribute("2")]
public Object[] Args { get; public set; }
    [NullableContextAttribute("2")]
public SystemStringFormat(IFormatProvider provider, string format, Object[] args);
    private static SystemStringFormat();
    [CompilerGeneratedAttribute]
public string get_Format();
    [CompilerGeneratedAttribute]
public void set_Format(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Object[] get_Args();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Args(Object[] value);
    [NullableContextAttribute("2")]
public virtual string ToString();
    [NullableContextAttribute("2")]
private static string StringFormat(IFormatProvider provider, string format, Object[] args);
    private static string StringFormatError(Exception formatException, string format, Object[] args);
    private static void RenderArray(Array array, StringBuilder buffer);
    private static void RenderObject(object obj, StringBuilder buffer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class log4net.Util.TextWriterAdapter : TextWriter {
    [CompilerGeneratedAttribute]
private TextWriter <Writer>k__BackingField;
    protected TextWriter Writer { get; protected set; }
    public Encoding Encoding { get; }
    public IFormatProvider FormatProvider { get; }
    public string NewLine { get; public set; }
    protected TextWriterAdapter(TextWriter writer);
    [CompilerGeneratedAttribute]
protected TextWriter get_Writer();
    [CompilerGeneratedAttribute]
protected void set_Writer(TextWriter value);
    public virtual Encoding get_Encoding();
    public virtual IFormatProvider get_FormatProvider();
    public virtual string get_NewLine();
    public virtual void set_NewLine(string value);
    public virtual void Close();
    protected virtual void Dispose(bool disposing);
    public virtual void Flush();
    public virtual void Write(char value);
    public virtual void Write(Char[] buffer, int index, int count);
    [NullableContextAttribute("2")]
public virtual void Write(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class log4net.Util.ThreadContextProperties : ContextPropertiesBase {
    [NullableAttribute("2")]
[ThreadStaticAttribute]
private static PropertiesDictionary _dictionary;
    [NullableAttribute("2")]
public object Item { get; public set; }
    public virtual object get_Item(string key);
    public virtual void set_Item(string key, object value);
    public void Remove(string key);
    public String[] GetKeys();
    public void Clear();
    [NullableContextAttribute("2")]
internal PropertiesDictionary GetProperties(bool create);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class log4net.Util.ThreadContextStack : object {
    [NullableAttribute("1")]
private Stack`1<StackFrame> m_stack;
    public int Count { get; }
    [NullableAttribute("1")]
internal Stack InternalStack { get; internal set; }
    public int get_Count();
    public void Clear();
    public string Pop();
    [NullableContextAttribute("1")]
public IDisposable Push(string message);
    public string Peek();
    internal string GetFullMessage();
    [NullableContextAttribute("1")]
internal Stack get_InternalStack();
    [NullableContextAttribute("1")]
internal void set_InternalStack(Stack value);
    public virtual string ToString();
    private sealed virtual override object log4net.Core.IFixingRequired.GetFixedObject();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class log4net.Util.ThreadContextStacks : object {
    private ContextPropertiesBase m_properties;
    private static Type declaringType;
    public ThreadContextStack Item { get; }
    internal ThreadContextStacks(ContextPropertiesBase properties);
    private static ThreadContextStacks();
    public ThreadContextStack get_Item(string key);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class log4net.Util.Transform : object {
    private static string CDATA_END;
    private static string CDATA_UNESCAPABLE_TOKEN;
    private static Regex INVALIDCHARS;
    private static Transform();
    public static void WriteEscapedXmlString(XmlWriter writer, string textData, string invalidCharReplacement);
    public static string MaskXmlInvalidCharacters(string textData, string mask);
    private static int CountSubstrings(string text, string substring);
}
public class log4net.Util.TwoArgAction`2 : MulticastDelegate {
    public TwoArgAction`2(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(T1 t1, T2 t2);
    public virtual IAsyncResult BeginInvoke(T1 t1, T2 t2, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class log4net.Util.TypeConverters.BooleanConverter : object {
    [NullableContextAttribute("1")]
public sealed virtual bool CanConvertFrom(Type sourceType);
    [NullableContextAttribute("1")]
public sealed virtual object ConvertFrom(object source);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class log4net.Util.TypeConverters.ConversionNotSupportedException : ApplicationException {
    public ConversionNotSupportedException(string message);
    public ConversionNotSupportedException(string message, Exception innerException);
    protected ConversionNotSupportedException(SerializationInfo info, StreamingContext context);
    public static ConversionNotSupportedException Create(Type destinationType, object sourceValue);
    public static ConversionNotSupportedException Create(Type destinationType, object sourceValue, Exception innerException);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class log4net.Util.TypeConverters.ConverterRegistry : object {
    private static Type declaringType;
    private static ConcurrentDictionary`2<Type, IConvertTo> s_type2ConvertTo;
    private static ConcurrentDictionary`2<Type, IConvertFrom> s_type2ConvertFrom;
    private static ConverterRegistry();
    [NullableContextAttribute("2")]
public static void AddConverter(Type destinationType, object converter);
    public static void AddConverter(Type destinationType, Type converterType);
    public static IConvertTo GetConvertTo(Type sourceType, Type destinationType);
    public static IConvertFrom GetConvertFrom(Type destinationType);
    private static object GetConverterFromAttribute(Type destinationType);
    private static object CreateConverterInstance(Type converterType);
}
internal class log4net.Util.TypeConverters.EncodingConverter : object {
    [NullableContextAttribute("1")]
public sealed virtual bool CanConvertFrom(Type sourceType);
    [NullableContextAttribute("1")]
public sealed virtual object ConvertFrom(object source);
}
[NullableContextAttribute("1")]
public interface log4net.Util.TypeConverters.IConvertFrom {
    public abstract virtual bool CanConvertFrom(Type sourceType);
    public abstract virtual object ConvertFrom(object source);
}
[NullableContextAttribute("1")]
public interface log4net.Util.TypeConverters.IConvertTo {
    public abstract virtual bool CanConvertTo(Type targetType);
    public abstract virtual object ConvertTo(object source, Type targetType);
}
internal class log4net.Util.TypeConverters.IPAddressConverter : object {
    [NullableContextAttribute("1")]
public sealed virtual bool CanConvertFrom(Type sourceType);
    [NullableContextAttribute("1")]
public sealed virtual object ConvertFrom(object source);
}
internal class log4net.Util.TypeConverters.PatternLayoutConverter : object {
    [NullableContextAttribute("1")]
public sealed virtual bool CanConvertFrom(Type sourceType);
    [NullableContextAttribute("1")]
public sealed virtual object ConvertFrom(object source);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class log4net.Util.TypeConverters.PatternStringConverter : object {
    public sealed virtual bool CanConvertTo(Type targetType);
    public sealed virtual object ConvertTo(object source, Type targetType);
    public sealed virtual bool CanConvertFrom(Type sourceType);
    public sealed virtual object ConvertFrom(object source);
}
internal class log4net.Util.TypeConverters.TypeConverter : object {
    [NullableContextAttribute("1")]
public sealed virtual bool CanConvertFrom(Type sourceType);
    [NullableContextAttribute("1")]
public sealed virtual object ConvertFrom(object source);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("1044")]
public class log4net.Util.TypeConverters.TypeConverterAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ConverterTypeName>k__BackingField;
    public string ConverterTypeName { get; public set; }
    public TypeConverterAttribute(string typeName);
    public TypeConverterAttribute(Type converterType);
    [CompilerGeneratedAttribute]
public string get_ConverterTypeName();
    [CompilerGeneratedAttribute]
public void set_ConverterTypeName(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class log4net.Util.WindowsSecurityContext : SecurityContext {
    [NullableAttribute("2")]
private string m_password;
    [NullableAttribute("2")]
private WindowsIdentity m_identity;
    [CompilerGeneratedAttribute]
private ImpersonationMode <Credentials>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <UserName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DomainName>k__BackingField;
    public ImpersonationMode Credentials { get; public set; }
    [NullableAttribute("2")]
public string UserName { get; public set; }
    public string DomainName { get; public set; }
    unknown string Password {public set; }
    [CompilerGeneratedAttribute]
public ImpersonationMode get_Credentials();
    [CompilerGeneratedAttribute]
public void set_Credentials(ImpersonationMode value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_UserName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_UserName(string value);
    [CompilerGeneratedAttribute]
public string get_DomainName();
    [CompilerGeneratedAttribute]
public void set_DomainName(string value);
    public void set_Password(string value);
    public sealed virtual void ActivateOptions();
    public virtual IDisposable Impersonate(object state);
    [SecuritySafeCriticalAttribute]
private static WindowsIdentity LogonUser(string userName, string domainName, string password);
    [DefaultDllImportSearchPathsAttribute("2048")]
private static bool LogonUser(string lpszUsername, string lpszDomain, string lpszPassword, int dwLogonType, int dwLogonProvider, IntPtr& phToken);
    [DefaultDllImportSearchPathsAttribute("2048")]
private static bool CloseHandle(IntPtr handle);
    [DefaultDllImportSearchPathsAttribute("2048")]
private static bool DuplicateToken(IntPtr ExistingTokenHandle, int SECURITY_IMPERSONATION_LEVEL, IntPtr& DuplicateTokenHandle);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.AllowNullAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.DisallowNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ParameterValue>k__BackingField;
    public bool ParameterValue { get; }
    public DoesNotReturnIfAttribute(bool parameterValue);
    [CompilerGeneratedAttribute]
public bool get_ParameterValue();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public MaybeNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public String[] Members { get; }
    public MemberNotNullAttribute(String[] members);
    public MemberNotNullAttribute(string member);
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public String[] Members { get; }
    public bool ReturnValue { get; }
    public MemberNotNullWhenAttribute(bool returnValue, String[] members);
    public MemberNotNullWhenAttribute(bool returnValue, string member);
    [CompilerGeneratedAttribute]
public String[] get_Members();
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("10368")]
internal class System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public NotNullIfNotNullAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[AttributeUsageAttribute("32")]
internal class System.Diagnostics.CodeAnalysis.SetsRequiredMembersAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.ValidatedNotNullAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2048")]
internal class System.Runtime.CompilerServices.CallerArgumentExpressionAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public CallerArgumentExpressionAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("32767")]
internal class System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute : Attribute {
    public static string RefStructs;
    public static string RequiredMembers;
    [CompilerGeneratedAttribute]
private string <FeatureName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsOptional>k__BackingField;
    public string FeatureName { get; }
    public bool IsOptional { get; public set; }
    public CompilerFeatureRequiredAttribute(string featureName);
    [CompilerGeneratedAttribute]
public string get_FeatureName();
    [CompilerGeneratedAttribute]
public bool get_IsOptional();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IsOptional(bool value);
}
[EditorBrowsableAttribute("1")]
internal static class System.Runtime.CompilerServices.IsExternalInit : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte nullableFlags);
    public NullableAttribute(Byte[] nullableFlags);
}
[AttributeUsageAttribute("5198")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte flag);
}
[AttributeUsageAttribute("396")]
internal class System.Runtime.CompilerServices.RequiredMemberAttribute : Attribute {
}
