[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Lucene.Net.CodeAnalysis.Lucene1000_SealIncrementTokenMethodVBCodeFixProvider : CodeFixProvider {
    private static string Title;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public sealed virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public sealed virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("Lucene.Net.CodeAnalysis.Lucene1000_SealIncrementTokenMethodVBCodeFixProvider/<RegisterCodeFixesAsync>d__4")]
public sealed virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Lucene.Net.CodeAnalysis.Lucene1000_SealIncrementTokenMethodVBCodeFixProvider/<AddSealedKeywordAsync>d__5")]
private Task`1<Document> AddSealedKeywordAsync(Document document, MethodStatementSyntax methodDeclaration, CancellationToken cancellationToken);
    private MethodStatementSyntax GetIncrementTokenMethodDeclaration(ClassBlockSyntax classBlock);
}
[DiagnosticAnalyzerAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
public class Lucene.Net.CodeAnalysis.Lucene1000_TokenStreamOrItsIncrementTokenMethodMustBeSealedVBAnalyzer : DiagnosticAnalyzer {
    public static string DiagnosticId;
    private static string Category;
    private static string Title;
    private static string MessageFormat;
    private static string Description;
    private static DiagnosticDescriptor Rule;
    public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static Lucene1000_TokenStreamOrItsIncrementTokenMethodMustBeSealedVBAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static void AnalyzeNode(SyntaxNodeAnalysisContext context);
    private static bool InheritsFrom(ITypeSymbol symbol, string expectedParentTypeName);
}
