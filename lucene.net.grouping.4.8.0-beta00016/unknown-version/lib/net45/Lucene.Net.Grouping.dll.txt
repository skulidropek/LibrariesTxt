public abstract class Lucene.Net.Search.Grouping.AbstractAllGroupHeadsCollector : object {
    public int GroupHeadsCount { get; }
    public bool AcceptsDocsOutOfOrder { get; }
    public abstract virtual FixedBitSet RetrieveGroupHeads(int maxDoc);
    public abstract virtual Int32[] RetrieveGroupHeads();
    public abstract virtual int get_GroupHeadsCount();
    protected abstract virtual void RetrieveGroupHeadAndAddIfNotExist(int doc);
    public abstract virtual void SetScorer(Scorer scorer);
    public abstract virtual void Collect(int doc);
    public abstract virtual void SetNextReader(AtomicReaderContext context);
    public abstract virtual bool get_AcceptsDocsOutOfOrder();
}
public abstract class Lucene.Net.Search.Grouping.AbstractAllGroupHeadsCollector_GroupHead : object {
    [CompilerGeneratedAttribute]
private int <Doc>k__BackingField;
    public int Doc { get; protected set; }
    protected AbstractAllGroupHeadsCollector_GroupHead(int doc);
    [CompilerGeneratedAttribute]
public int get_Doc();
    [CompilerGeneratedAttribute]
protected void set_Doc(int value);
    public abstract virtual int Compare(int compIDX, int doc);
    public abstract virtual void UpdateDocHead(int doc);
}
public abstract class Lucene.Net.Search.Grouping.AbstractAllGroupHeadsCollector`1 : AbstractAllGroupHeadsCollector {
    protected Int32[] m_reversed;
    protected int m_compIDXEnd;
    protected TemporalResult<GH> m_temporalResult;
    public int GroupHeadsCount { get; }
    protected ICollection`1<GH> CollectedGroupHeads { get; }
    public bool AcceptsDocsOutOfOrder { get; }
    protected AbstractAllGroupHeadsCollector`1(int numberOfSorts);
    public virtual FixedBitSet RetrieveGroupHeads(int maxDoc);
    public virtual Int32[] RetrieveGroupHeads();
    public virtual int get_GroupHeadsCount();
    protected abstract virtual void RetrieveGroupHeadAndAddIfNotExist(int doc);
    protected abstract virtual ICollection`1<GH> get_CollectedGroupHeads();
    public virtual void Collect(int doc);
    public virtual bool get_AcceptsDocsOutOfOrder();
}
public abstract class Lucene.Net.Search.Grouping.AbstractAllGroupsCollector`1 : object {
    public int GroupCount { get; }
    public IEnumerable`1<TGroupValue> Groups { get; }
    public bool AcceptsDocsOutOfOrder { get; }
    public virtual int get_GroupCount();
    public abstract virtual IEnumerable`1<TGroupValue> get_Groups();
    public virtual void SetScorer(Scorer scorer);
    public abstract virtual void Collect(int doc);
    public abstract virtual void SetNextReader(AtomicReaderContext context);
    public virtual bool get_AcceptsDocsOutOfOrder();
}
public static class Lucene.Net.Search.Grouping.AbstractDistinctValuesCollector : object {
}
public abstract class Lucene.Net.Search.Grouping.AbstractDistinctValuesCollector`1 : object {
    public IEnumerable`1<GC> Groups { get; }
    public bool AcceptsDocsOutOfOrder { get; }
    public abstract virtual IEnumerable`1<GC> get_Groups();
    public virtual bool get_AcceptsDocsOutOfOrder();
    public virtual void SetScorer(Scorer scorer);
    public abstract virtual void Collect(int doc);
    public abstract virtual void SetNextReader(AtomicReaderContext context);
}
public abstract class Lucene.Net.Search.Grouping.AbstractFirstPassGroupingCollector`1 : object {
    private Sort groupSort;
    private FieldComparer[] comparers;
    private Int32[] reversed;
    private int topNGroups;
    private IDictionary`2<TGroupValue, CollectedSearchGroup`1<TGroupValue>> groupMap;
    private int compIDXEnd;
    protected SortedSet`1<CollectedSearchGroup`1<TGroupValue>> m_orderedGroups;
    private int docBase;
    private int spareSlot;
    public bool AcceptsDocsOutOfOrder { get; }
    protected AbstractFirstPassGroupingCollector`1(Sort groupSort, int topNGroups);
    public virtual IEnumerable`1<ISearchGroup`1<TGroupValue>> GetTopGroups(int groupOffset, bool fillFields);
    public virtual void SetScorer(Scorer scorer);
    public virtual void Collect(int doc);
    private void BuildSortedSet();
    public virtual bool get_AcceptsDocsOutOfOrder();
    public virtual void SetNextReader(AtomicReaderContext context);
    protected abstract virtual TGroupValue GetDocGroupValue(int doc);
    protected abstract virtual TGroupValue CopyDocGroupValue(TGroupValue groupValue, TGroupValue reuse);
}
public abstract class Lucene.Net.Search.Grouping.AbstractGroupFacetCollector : object {
    protected string m_groupField;
    protected string m_facetField;
    protected BytesRef m_facetPrefix;
    protected IList`1<AbstractSegmentResult> m_segmentResults;
    protected Int32[] m_segmentFacetCounts;
    protected int m_segmentTotalCount;
    protected int m_startFacetOrd;
    protected int m_endFacetOrd;
    public bool AcceptsDocsOutOfOrder { get; }
    protected AbstractGroupFacetCollector(string groupField, string facetField, BytesRef facetPrefix);
    public virtual GroupedFacetResult MergeSegmentResults(int size, int minCount, bool orderByCount);
    protected abstract virtual AbstractSegmentResult CreateSegmentResult();
    public virtual void SetScorer(Scorer scorer);
    public abstract virtual void Collect(int doc);
    public abstract virtual void SetNextReader(AtomicReaderContext context);
    public virtual bool get_AcceptsDocsOutOfOrder();
}
public static class Lucene.Net.Search.Grouping.AbstractSecondPassGroupingCollector : object {
}
public abstract class Lucene.Net.Search.Grouping.AbstractSecondPassGroupingCollector`1 : object {
    protected IDictionary`2<TGroupValue, SearchGroupDocs`1<TGroupValue>> m_groupMap;
    private int maxDocsPerGroup;
    protected SearchGroupDocs`1[] m_groupDocs;
    private IEnumerable`1<ISearchGroup`1<TGroupValue>> groups;
    private Sort withinGroupSort;
    private Sort groupSort;
    private int totalHitCount;
    private int totalGroupedHitCount;
    public bool AcceptsDocsOutOfOrder { get; }
    protected AbstractSecondPassGroupingCollector`1(IEnumerable`1<ISearchGroup`1<TGroupValue>> groups, Sort groupSort, Sort withinGroupSort, int maxDocsPerGroup, bool getScores, bool getMaxScores, bool fillSortFields);
    public virtual void SetScorer(Scorer scorer);
    public virtual void Collect(int doc);
    protected abstract virtual SearchGroupDocs`1<TGroupValue> RetrieveGroup(int doc);
    public virtual void SetNextReader(AtomicReaderContext context);
    public virtual bool get_AcceptsDocsOutOfOrder();
    public virtual ITopGroups`1<TGroupValue> GetTopGroups(int withinGroupOffset);
}
public class Lucene.Net.Search.Grouping.BlockGroupingCollector : object {
    private Int32[] pendingSubDocs;
    private Single[] pendingSubScores;
    private int subDocUpto;
    private Sort groupSort;
    private int topNGroups;
    private Filter lastDocPerGroup;
    private bool needsScores;
    private FieldComparer[] comparers;
    private Int32[] reversed;
    private int compIDXEnd;
    private int bottomSlot;
    private bool queueFull;
    private AtomicReaderContext currentReaderContext;
    private int topGroupDoc;
    private int totalHitCount;
    private int totalGroupCount;
    private int docBase;
    private int groupEndDocID;
    private DocIdSetIterator lastDocPerGroupBits;
    private Scorer scorer;
    private GroupQueue groupQueue;
    private bool groupCompetes;
    public bool AcceptsDocsOutOfOrder { get; }
    public BlockGroupingCollector(Sort groupSort, int topNGroups, bool needsScores, Filter lastDocPerGroup);
    private void ProcessGroup();
    public virtual ITopGroups`1<object> GetTopGroups(Sort withinGroupSort, int groupOffset, int withinGroupOffset, int maxDocsPerGroup, bool fillSortFields);
    public virtual ITopGroups`1<TGroupValue> GetTopGroups(Sort withinGroupSort, int groupOffset, int withinGroupOffset, int maxDocsPerGroup, bool fillSortFields);
    public virtual void SetScorer(Scorer scorer);
    public virtual void Collect(int doc);
    public virtual bool get_AcceptsDocsOutOfOrder();
    public virtual void SetNextReader(AtomicReaderContext context);
}
public class Lucene.Net.Search.Grouping.CollectedSearchGroup`1 : SearchGroup`1<TGroupValue> {
    [CompilerGeneratedAttribute]
private int <TopDoc>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ComparerSlot>k__BackingField;
    public int TopDoc { get; internal set; }
    public int ComparerSlot { get; internal set; }
    [CompilerGeneratedAttribute]
public sealed virtual int get_TopDoc();
    [CompilerGeneratedAttribute]
internal void set_TopDoc(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_ComparerSlot();
    [CompilerGeneratedAttribute]
internal void set_ComparerSlot(int value);
}
public class Lucene.Net.Search.Grouping.Function.FunctionAllGroupHeadsCollector : AbstractAllGroupHeadsCollector`1<GroupHead> {
    private ValueSource groupBy;
    private IDictionary vsContext;
    private IDictionary`2<MutableValue, GroupHead> groups;
    private Sort sortWithinGroup;
    private ValueFiller filler;
    private MutableValue mval;
    private AtomicReaderContext readerContext;
    private Scorer scorer;
    protected ICollection`1<GroupHead> CollectedGroupHeads { get; }
    public FunctionAllGroupHeadsCollector(ValueSource groupBy, IDictionary vsContext, Sort sortWithinGroup);
    protected virtual void RetrieveGroupHeadAndAddIfNotExist(int doc);
    protected virtual ICollection`1<GroupHead> get_CollectedGroupHeads();
    public virtual void SetScorer(Scorer scorer);
    public virtual void SetNextReader(AtomicReaderContext context);
}
public class Lucene.Net.Search.Grouping.Function.FunctionAllGroupsCollector`1 : AbstractAllGroupsCollector`1<MutableValue> {
    private IDictionary vsContext;
    private ValueSource groupBy;
    private ISet`1<MutableValue> groups;
    private ValueFiller filler;
    private TMutableValue mval;
    public IEnumerable`1<MutableValue> Groups { get; }
    public FunctionAllGroupsCollector`1(ValueSource groupBy, IDictionary vsContext);
    public virtual IEnumerable`1<MutableValue> get_Groups();
    public virtual void Collect(int doc);
    public virtual void SetNextReader(AtomicReaderContext context);
}
public class Lucene.Net.Search.Grouping.Function.FunctionDistinctValuesCollector : AbstractDistinctValuesCollector`1<GroupCount> {
    private IDictionary vsContext;
    private ValueSource groupSource;
    private ValueSource countSource;
    private IDictionary`2<MutableValue, GroupCount> groupMap;
    private ValueFiller groupFiller;
    private ValueFiller countFiller;
    private MutableValue groupMval;
    private MutableValue countMval;
    public IEnumerable`1<GroupCount> Groups { get; }
    public FunctionDistinctValuesCollector(IDictionary vsContext, ValueSource groupSource, ValueSource countSource, IEnumerable`1<ISearchGroup`1<MutableValue>> groups);
    public virtual IEnumerable`1<GroupCount> get_Groups();
    public virtual void Collect(int doc);
    public virtual void SetNextReader(AtomicReaderContext context);
}
public class Lucene.Net.Search.Grouping.Function.FunctionFirstPassGroupingCollector`1 : AbstractFirstPassGroupingCollector`1<TMutableValue> {
    private ValueSource groupByVS;
    private IDictionary vsContext;
    private ValueFiller filler;
    private TMutableValue mval;
    public FunctionFirstPassGroupingCollector`1(ValueSource groupByVS, IDictionary vsContext, Sort groupSort, int topNGroups);
    protected virtual TMutableValue GetDocGroupValue(int doc);
    protected virtual TMutableValue CopyDocGroupValue(TMutableValue groupValue, TMutableValue reuse);
    public virtual void SetNextReader(AtomicReaderContext context);
}
public class Lucene.Net.Search.Grouping.Function.FunctionSecondPassGroupingCollector`1 : AbstractSecondPassGroupingCollector`1<TMutableValue> {
    private ValueSource groupByVS;
    private IDictionary vsContext;
    private ValueFiller filler;
    private TMutableValue mval;
    public FunctionSecondPassGroupingCollector`1(IEnumerable`1<ISearchGroup`1<TMutableValue>> searchGroups, Sort groupSort, Sort withinGroupSort, int maxDocsPerGroup, bool getScores, bool getMaxScores, bool fillSortFields, ValueSource groupByVS, IDictionary vsContext);
    protected virtual SearchGroupDocs`1<TMutableValue> RetrieveGroup(int doc);
    public virtual void SetNextReader(AtomicReaderContext context);
}
public class Lucene.Net.Search.Grouping.GroupDocs`1 : object {
    [CompilerGeneratedAttribute]
private TGroupValue <GroupValue>k__BackingField;
    [CompilerGeneratedAttribute]
private float <MaxScore>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Score>k__BackingField;
    [CompilerGeneratedAttribute]
private ScoreDoc[] <ScoreDocs>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TotalHits>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[] <GroupSortValues>k__BackingField;
    public TGroupValue GroupValue { get; private set; }
    public float MaxScore { get; private set; }
    public float Score { get; private set; }
    [WritableArrayAttribute]
public ScoreDoc[] ScoreDocs { get; private set; }
    public int TotalHits { get; private set; }
    [WritableArrayAttribute]
public Object[] GroupSortValues { get; private set; }
    public GroupDocs`1(float score, float maxScore, int totalHits, ScoreDoc[] scoreDocs, TGroupValue groupValue, Object[] groupSortValues);
    [CompilerGeneratedAttribute]
public sealed virtual TGroupValue get_GroupValue();
    [CompilerGeneratedAttribute]
private void set_GroupValue(TGroupValue value);
    [CompilerGeneratedAttribute]
public sealed virtual float get_MaxScore();
    [CompilerGeneratedAttribute]
private void set_MaxScore(float value);
    [CompilerGeneratedAttribute]
public sealed virtual float get_Score();
    [CompilerGeneratedAttribute]
private void set_Score(float value);
    [CompilerGeneratedAttribute]
public sealed virtual ScoreDoc[] get_ScoreDocs();
    [CompilerGeneratedAttribute]
private void set_ScoreDocs(ScoreDoc[] value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_TotalHits();
    [CompilerGeneratedAttribute]
private void set_TotalHits(int value);
    [CompilerGeneratedAttribute]
public sealed virtual Object[] get_GroupSortValues();
    [CompilerGeneratedAttribute]
private void set_GroupSortValues(Object[] value);
}
public class Lucene.Net.Search.Grouping.GroupingSearch : object {
    private string groupField;
    private ValueSource groupFunction;
    private IDictionary valueSourceContext;
    private Filter groupEndDocs;
    private Sort groupSort;
    private Sort sortWithinGroup;
    private int groupDocsOffset;
    private int groupDocsLimit;
    private bool fillSortFields;
    private bool includeScores;
    private bool includeMaxScore;
    private Nullable`1<double> maxCacheRAMMB;
    private Nullable`1<int> maxDocsToCache;
    private bool cacheScores;
    private bool allGroups;
    private bool allGroupHeads;
    private int initialSize;
    private ICollection matchingGroups;
    private IBits matchingGroupHeads;
    public GroupingSearch(string groupField);
    public GroupingSearch(ValueSource groupFunction, IDictionary valueSourceContext);
    public GroupingSearch(Filter groupEndDocs);
    private GroupingSearch(string groupField, ValueSource groupFunction, IDictionary valueSourceContext, Filter groupEndDocs);
    public virtual ITopGroups`1<object> Search(IndexSearcher searcher, Query query, int groupOffset, int groupLimit);
    public virtual ITopGroups`1<object> Search(IndexSearcher searcher, Filter filter, Query query, int groupOffset, int groupLimit);
    public virtual ITopGroups`1<TGroupValue> Search(IndexSearcher searcher, Query query, int groupOffset, int groupLimit);
    public virtual ITopGroups`1<TGroupValue> Search(IndexSearcher searcher, Filter filter, Query query, int groupOffset, int groupLimit);
    public virtual ITopGroups`1<BytesRef> SearchByField(IndexSearcher searcher, Query query, int groupOffset, int groupLimit);
    public virtual ITopGroups`1<BytesRef> SearchByField(IndexSearcher searcher, Filter filter, Query query, int groupOffset, int groupLimit);
    public virtual ITopGroups`1<TMutableValue> SearchByFunction(IndexSearcher searcher, Query query, int groupOffset, int groupLimit);
    public virtual ITopGroups`1<TMutableValue> SearchByFunction(IndexSearcher searcher, Filter filter, Query query, int groupOffset, int groupLimit);
    protected virtual ITopGroups`1<TGroupValue> GroupByField(IndexSearcher searcher, Filter filter, Query query, int groupOffset, int groupLimit);
    protected virtual ITopGroups`1<TMutableValue> GroupByFunction(IndexSearcher searcher, Filter filter, Query query, int groupOffset, int groupLimit);
    protected virtual ITopGroups`1<TGroupValue> GroupByDocBlock(IndexSearcher searcher, Filter filter, Query query, int groupOffset, int groupLimit);
    public virtual GroupingSearch SetCachingInMB(double maxCacheRAMMB, bool cacheScores);
    public virtual GroupingSearch SetCaching(int maxDocsToCache, bool cacheScores);
    public virtual GroupingSearch DisableCaching();
    public virtual GroupingSearch SetGroupSort(Sort groupSort);
    public virtual GroupingSearch SetSortWithinGroup(Sort sortWithinGroup);
    public virtual GroupingSearch SetGroupDocsOffset(int groupDocsOffset);
    public virtual GroupingSearch SetGroupDocsLimit(int groupDocsLimit);
    public virtual GroupingSearch SetFillSortFields(bool fillSortFields);
    public virtual GroupingSearch SetIncludeScores(bool includeScores);
    public virtual GroupingSearch SetIncludeMaxScore(bool includeMaxScore);
    public virtual GroupingSearch SetAllGroups(bool allGroups);
    public virtual ICollection`1<T> GetAllMatchingGroups();
    public virtual ICollection GetAllMatchingGroups();
    public virtual GroupingSearch SetAllGroupHeads(bool allGroupHeads);
    public virtual IBits GetAllGroupHeads();
    public virtual GroupingSearch SetInitialSize(int initialSize);
}
public interface Lucene.Net.Search.Grouping.IAbstractAllGroupsCollector`1 {
    public int GroupCount { get; }
    public IEnumerable`1<TGroupValue> Groups { get; }
    public abstract virtual int get_GroupCount();
    public abstract virtual IEnumerable`1<TGroupValue> get_Groups();
}
public interface Lucene.Net.Search.Grouping.IAbstractDistinctValuesCollector`1 {
    public IEnumerable`1<GC> Groups { get; }
    public abstract virtual IEnumerable`1<GC> get_Groups();
}
public interface Lucene.Net.Search.Grouping.IAbstractFirstPassGroupingCollector`1 {
    public abstract virtual IEnumerable`1<ISearchGroup`1<TGroupValue>> GetTopGroups(int groupOffset, bool fillFields);
}
public interface Lucene.Net.Search.Grouping.IAbstractSecondPassGroupingCollector`1 {
    public abstract virtual ITopGroups`1<TGroupValue> GetTopGroups(int withinGroupOffset);
}
public interface Lucene.Net.Search.Grouping.ICollectedSearchGroup {
    public int TopDoc { get; }
    public int ComparerSlot { get; }
    public abstract virtual int get_TopDoc();
    public abstract virtual int get_ComparerSlot();
}
public interface Lucene.Net.Search.Grouping.IGroupDocs`1 {
    public TGroupValue GroupValue { get; }
    public float MaxScore { get; }
    public float Score { get; }
    public ScoreDoc[] ScoreDocs { get; }
    public int TotalHits { get; }
    public Object[] GroupSortValues { get; }
    public abstract virtual TGroupValue get_GroupValue();
    public abstract virtual float get_MaxScore();
    public abstract virtual float get_Score();
    public abstract virtual ScoreDoc[] get_ScoreDocs();
    public abstract virtual int get_TotalHits();
    public abstract virtual Object[] get_GroupSortValues();
}
public interface Lucene.Net.Search.Grouping.ISearchGroup`1 {
    public TGroupValue GroupValue { get; }
    [WritableArrayAttribute]
public Object[] SortValues { get; public set; }
    public abstract virtual TGroupValue get_GroupValue();
    public abstract virtual Object[] get_SortValues();
    public abstract virtual void set_SortValues(Object[] value);
}
public interface Lucene.Net.Search.Grouping.ITopGroups`1 {
    public int TotalHitCount { get; }
    public int TotalGroupedHitCount { get; }
    public Nullable`1<int> TotalGroupCount { get; }
    public IGroupDocs`1[] Groups { get; }
    public SortField[] GroupSort { get; }
    public SortField[] WithinGroupSort { get; }
    public float MaxScore { get; }
    public abstract virtual int get_TotalHitCount();
    public abstract virtual int get_TotalGroupedHitCount();
    public abstract virtual Nullable`1<int> get_TotalGroupCount();
    public abstract virtual IGroupDocs`1[] get_Groups();
    public abstract virtual SortField[] get_GroupSort();
    public abstract virtual SortField[] get_WithinGroupSort();
    public abstract virtual float get_MaxScore();
}
public static class Lucene.Net.Search.Grouping.SearchGroup : object {
    public static ICollection`1<SearchGroup`1<T>> Merge(IList`1<IEnumerable`1<ISearchGroup`1<T>>> topGroups, int offset, int topN, Sort groupSort);
}
public class Lucene.Net.Search.Grouping.SearchGroup`1 : object {
    [CompilerGeneratedAttribute]
private TGroupValue <GroupValue>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[] <SortValues>k__BackingField;
    public TGroupValue GroupValue { get; public set; }
    [WritableArrayAttribute]
public Object[] SortValues { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual TGroupValue get_GroupValue();
    [CompilerGeneratedAttribute]
public void set_GroupValue(TGroupValue value);
    [CompilerGeneratedAttribute]
public sealed virtual Object[] get_SortValues();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SortValues(Object[] value);
    public virtual string ToString();
    public virtual bool Equals(object o);
    public virtual int GetHashCode();
}
internal class Lucene.Net.Search.Grouping.Terms.GeneralAllGroupHeadsCollector : TermAllGroupHeadsCollector`1<GroupHead> {
    private Sort sortWithinGroup;
    private IDictionary`2<BytesRef, GroupHead> groups;
    internal Scorer scorer;
    protected ICollection`1<GroupHead> CollectedGroupHeads { get; }
    internal GeneralAllGroupHeadsCollector(string groupField, Sort sortWithinGroup);
    protected virtual void RetrieveGroupHeadAndAddIfNotExist(int doc);
    protected virtual ICollection`1<GroupHead> get_CollectedGroupHeads();
    public virtual void SetNextReader(AtomicReaderContext context);
    public virtual void SetScorer(Scorer scorer);
}
internal class Lucene.Net.Search.Grouping.Terms.GroupedFacetHit : object {
    internal BytesRef groupValue;
    internal BytesRef facetValue;
    internal GroupedFacetHit(BytesRef groupValue, BytesRef facetValue);
}
internal class Lucene.Net.Search.Grouping.Terms.OrdAllGroupHeadsCollector : TermAllGroupHeadsCollector`1<GroupHead> {
    private SentinelInt32Set ordSet;
    private IList`1<GroupHead> collectedGroups;
    private SortField[] fields;
    private SortedDocValues[] sortsIndex;
    private GroupHead[] segmentGroupHeads;
    protected ICollection`1<GroupHead> CollectedGroupHeads { get; }
    internal OrdAllGroupHeadsCollector(string groupField, Sort sortWithinGroup, int initialSize);
    protected virtual ICollection`1<GroupHead> get_CollectedGroupHeads();
    public virtual void SetScorer(Scorer scorer);
    protected virtual void RetrieveGroupHeadAndAddIfNotExist(int doc);
    public virtual void SetNextReader(AtomicReaderContext context);
}
internal class Lucene.Net.Search.Grouping.Terms.OrdScoreAllGroupHeadsCollector : TermAllGroupHeadsCollector`1<GroupHead> {
    private SentinelInt32Set ordSet;
    private IList`1<GroupHead> collectedGroups;
    private SortField[] fields;
    private SortedDocValues[] sortsIndex;
    private Scorer scorer;
    private GroupHead[] segmentGroupHeads;
    protected ICollection`1<GroupHead> CollectedGroupHeads { get; }
    internal OrdScoreAllGroupHeadsCollector(string groupField, Sort sortWithinGroup, int initialSize);
    protected virtual ICollection`1<GroupHead> get_CollectedGroupHeads();
    public virtual void SetScorer(Scorer scorer);
    protected virtual void RetrieveGroupHeadAndAddIfNotExist(int doc);
    public virtual void SetNextReader(AtomicReaderContext context);
}
internal class Lucene.Net.Search.Grouping.Terms.ScoreAllGroupHeadsCollector : TermAllGroupHeadsCollector`1<GroupHead> {
    private SentinelInt32Set ordSet;
    private IList`1<GroupHead> collectedGroups;
    private SortField[] fields;
    private Scorer scorer;
    private GroupHead[] segmentGroupHeads;
    protected ICollection`1<GroupHead> CollectedGroupHeads { get; }
    internal ScoreAllGroupHeadsCollector(string groupField, Sort sortWithinGroup, int initialSize);
    protected virtual ICollection`1<GroupHead> get_CollectedGroupHeads();
    public virtual void SetScorer(Scorer scorer);
    protected virtual void RetrieveGroupHeadAndAddIfNotExist(int doc);
    public virtual void SetNextReader(AtomicReaderContext context);
}
public static class Lucene.Net.Search.Grouping.Terms.TermAllGroupHeadsCollector : object {
    private static int DEFAULT_INITIAL_SIZE;
    public static AbstractAllGroupHeadsCollector Create(string groupField, Sort sortWithinGroup);
    public static AbstractAllGroupHeadsCollector Create(string groupField, Sort sortWithinGroup, int initialSize);
    private static bool NeedGeneralImpl(SortField sortField);
}
public abstract class Lucene.Net.Search.Grouping.Terms.TermAllGroupHeadsCollector`1 : AbstractAllGroupHeadsCollector`1<GH> {
    internal string groupField;
    internal BytesRef scratchBytesRef;
    internal SortedDocValues groupIndex;
    internal AtomicReaderContext readerContext;
    protected TermAllGroupHeadsCollector`1(string groupField, int numberOfSorts);
}
public class Lucene.Net.Search.Grouping.Terms.TermAllGroupsCollector : AbstractAllGroupsCollector`1<BytesRef> {
    private static int DEFAULT_INITIAL_SIZE;
    private string groupField;
    private SentinelInt32Set ordSet;
    private IList`1<BytesRef> groups;
    private SortedDocValues index;
    public IEnumerable`1<BytesRef> Groups { get; }
    public TermAllGroupsCollector(string groupField, int initialSize);
    public TermAllGroupsCollector(string groupField);
    public virtual void Collect(int doc);
    public virtual IEnumerable`1<BytesRef> get_Groups();
    public virtual void SetNextReader(AtomicReaderContext context);
}
public class Lucene.Net.Search.Grouping.Terms.TermDistinctValuesCollector : AbstractDistinctValuesCollector`1<GroupCount> {
    private string groupField;
    private string countField;
    private IList`1<GroupCount> groups;
    private SentinelInt32Set ordSet;
    private GroupCount[] groupCounts;
    private SortedDocValues groupFieldTermIndex;
    private SortedDocValues countFieldTermIndex;
    public IEnumerable`1<GroupCount> Groups { get; }
    public TermDistinctValuesCollector(string groupField, string countField, IEnumerable`1<ISearchGroup`1<BytesRef>> groups);
    public virtual void Collect(int doc);
    private bool DoesNotContainOrd(int ord, Int32[] ords);
    public virtual IEnumerable`1<GroupCount> get_Groups();
    public virtual void SetNextReader(AtomicReaderContext context);
}
public class Lucene.Net.Search.Grouping.Terms.TermFirstPassGroupingCollector : AbstractFirstPassGroupingCollector`1<BytesRef> {
    private BytesRef scratchBytesRef;
    private SortedDocValues index;
    private string groupField;
    public TermFirstPassGroupingCollector(string groupField, Sort groupSort, int topNGroups);
    protected virtual BytesRef GetDocGroupValue(int doc);
    protected virtual BytesRef CopyDocGroupValue(BytesRef groupValue, BytesRef reuse);
    public virtual void SetNextReader(AtomicReaderContext context);
}
public abstract class Lucene.Net.Search.Grouping.Terms.TermGroupFacetCollector : AbstractGroupFacetCollector {
    internal IList`1<GroupedFacetHit> groupedFacetHits;
    internal SentinelInt32Set segmentGroupedFacetHits;
    internal SortedDocValues groupFieldTermsIndex;
    internal TermGroupFacetCollector(string groupField, string facetField, BytesRef facetPrefix, int initialSize);
    public static TermGroupFacetCollector CreateTermGroupFacetCollector(string groupField, string facetField, bool facetFieldMultivalued, BytesRef facetPrefix, int initialSize);
}
public class Lucene.Net.Search.Grouping.Terms.TermSecondPassGroupingCollector : AbstractSecondPassGroupingCollector`1<BytesRef> {
    private SentinelInt32Set ordSet;
    private SortedDocValues index;
    private string groupField;
    public TermSecondPassGroupingCollector(string groupField, IEnumerable`1<ISearchGroup`1<BytesRef>> groups, Sort groupSort, Sort withinGroupSort, int maxDocsPerGroup, bool getScores, bool getMaxScores, bool fillSortFields);
    public virtual void SetNextReader(AtomicReaderContext context);
    protected virtual SearchGroupDocs`1<BytesRef> RetrieveGroup(int doc);
}
public static class Lucene.Net.Search.Grouping.TopGroups : object {
    public static TopGroups`1<T> Merge(ITopGroups`1[] shardGroups, Sort groupSort, Sort docSort, int docOffset, int docTopN, ScoreMergeMode scoreMergeMode);
}
public class Lucene.Net.Search.Grouping.TopGroups`1 : object {
    [CompilerGeneratedAttribute]
private int <TotalHitCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TotalGroupedHitCount>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <TotalGroupCount>k__BackingField;
    [CompilerGeneratedAttribute]
private IGroupDocs`1[] <Groups>k__BackingField;
    [CompilerGeneratedAttribute]
private SortField[] <GroupSort>k__BackingField;
    [CompilerGeneratedAttribute]
private SortField[] <WithinGroupSort>k__BackingField;
    [CompilerGeneratedAttribute]
private float <MaxScore>k__BackingField;
    public int TotalHitCount { get; private set; }
    public int TotalGroupedHitCount { get; private set; }
    public Nullable`1<int> TotalGroupCount { get; private set; }
    [WritableArrayAttribute]
public IGroupDocs`1[] Groups { get; private set; }
    [WritableArrayAttribute]
public SortField[] GroupSort { get; private set; }
    [WritableArrayAttribute]
public SortField[] WithinGroupSort { get; private set; }
    public float MaxScore { get; private set; }
    public TopGroups`1(SortField[] groupSort, SortField[] withinGroupSort, int totalHitCount, int totalGroupedHitCount, IGroupDocs`1[] groups, float maxScore);
    public TopGroups`1(ITopGroups`1<TGroupValue> oldTopGroups, Nullable`1<int> totalGroupCount);
    [CompilerGeneratedAttribute]
public sealed virtual int get_TotalHitCount();
    [CompilerGeneratedAttribute]
private void set_TotalHitCount(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_TotalGroupedHitCount();
    [CompilerGeneratedAttribute]
private void set_TotalGroupedHitCount(int value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_TotalGroupCount();
    [CompilerGeneratedAttribute]
private void set_TotalGroupCount(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public sealed virtual IGroupDocs`1[] get_Groups();
    [CompilerGeneratedAttribute]
private void set_Groups(IGroupDocs`1[] value);
    [CompilerGeneratedAttribute]
public sealed virtual SortField[] get_GroupSort();
    [CompilerGeneratedAttribute]
private void set_GroupSort(SortField[] value);
    [CompilerGeneratedAttribute]
public sealed virtual SortField[] get_WithinGroupSort();
    [CompilerGeneratedAttribute]
private void set_WithinGroupSort(SortField[] value);
    [CompilerGeneratedAttribute]
public sealed virtual float get_MaxScore();
    [CompilerGeneratedAttribute]
private void set_MaxScore(float value);
}
