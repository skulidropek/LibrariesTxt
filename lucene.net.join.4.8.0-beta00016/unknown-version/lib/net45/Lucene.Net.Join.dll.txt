[ObsoleteAttribute("Use Lucene.Net.Search.Join.FixedBitSetCachingWrapperFilter instead. This class will be removed in 4.8.0 release candidate.")]
[EditorBrowsableAttribute("1")]
public class Lucene.Net.Join.FixedBitSetCachingWrapperFilter : CachingWrapperFilter {
    public FixedBitSetCachingWrapperFilter(Filter filter);
    protected virtual DocIdSet DocIdSetToCache(DocIdSet docIdSet, AtomicReader reader);
}
[ObsoleteAttribute("Use Lucene.Net.Search.Join.JoinUtil instead. This class will be removed in 4.8.0 release candidate.")]
[EditorBrowsableAttribute("1")]
public class Lucene.Net.Join.JoinUtil : object {
    public static Query CreateJoinQuery(string fromField, bool multipleValuesPerDocument, string toField, Query fromQuery, IndexSearcher fromSearcher, ScoreMode scoreMode);
}
[ObsoleteAttribute("Use Lucene.Net.Search.Join.ScoreMode instead. This enum will be removed in 4.8.0 release candidate.")]
[EditorBrowsableAttribute("1")]
public enum Lucene.Net.Join.ScoreMode : Enum {
    public int value__;
    public static ScoreMode None;
    public static ScoreMode Avg;
    public static ScoreMode Max;
    public static ScoreMode Total;
}
[ObsoleteAttribute("Use Lucene.Net.Search.Join.ToChildBlockJoinQuery instead. This class will be removed in 4.8.0 release candidate.")]
[EditorBrowsableAttribute("1")]
public class Lucene.Net.Join.ToChildBlockJoinQuery : Query {
    internal static string INVALID_QUERY_MESSAGE;
    private Filter _parentsFilter;
    private Query _parentQuery;
    private Query _origParentQuery;
    private bool _doScores;
    public ToChildBlockJoinQuery(Query parentQuery, Filter parentsFilter, bool doScores);
    private ToChildBlockJoinQuery(Query origParentQuery, Query parentQuery, Filter parentsFilter, bool doScores);
    public virtual Weight CreateWeight(IndexSearcher searcher);
    public virtual void ExtractTerms(ISet`1<Term> terms);
    public virtual Query Rewrite(IndexReader reader);
    public virtual string ToString(string field);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual object Clone();
}
[ObsoleteAttribute("Use Lucene.Net.Search.Join.ToParentBlockJoinCollector instead. This class will be removed in 4.8.0 release candidate.")]
[EditorBrowsableAttribute("1")]
public class Lucene.Net.Join.ToParentBlockJoinCollector : object {
    private Sort sort;
    private IDictionary`2<Query, int> joinQueryID;
    private int numParentHits;
    private FieldValueHitQueue`1<OneGroup> queue;
    private FieldComparer[] comparers;
    private Int32[] reverseMul;
    private int compEnd;
    private bool trackMaxScore;
    private bool trackScores;
    private int docBase;
    private BlockJoinScorer[] joinScorers;
    private AtomicReaderContext currentReaderContext;
    private Scorer scorer;
    private bool queueFull;
    private OneGroup bottom;
    private int totalHitCount;
    private float maxScore;
    private OneGroup[] sortedGroups;
    public bool AcceptsDocsOutOfOrder { get; }
    public float MaxScore { get; }
    public ToParentBlockJoinCollector(Sort sort, int numParentHits, bool trackScores, bool trackMaxScore);
    public virtual void Collect(int parentDoc);
    private void CopyGroups(OneGroup og);
    public virtual void SetNextReader(AtomicReaderContext context);
    public virtual bool get_AcceptsDocsOutOfOrder();
    private void Enroll(ToParentBlockJoinQuery query, BlockJoinScorer scorer);
    public virtual void SetScorer(Scorer scorer);
    private void SortQueue();
    public virtual ITopGroups`1<int> GetTopGroups(ToParentBlockJoinQuery query, Sort withinGroupSort, int offset, int maxDocsPerGroup, int withinGroupOffset, bool fillSortFields);
    private ITopGroups`1<int> AccumulateGroups(int slot, int offset, int maxDocsPerGroup, int withinGroupOffset, Sort withinGroupSort, bool fillSortFields);
    public virtual ITopGroups`1<int> GetTopGroupsWithAllChildDocs(ToParentBlockJoinQuery query, Sort withinGroupSort, int offset, int withinGroupOffset, bool fillSortFields);
    public virtual float get_MaxScore();
}
[DefaultMemberAttribute("Item")]
[ObsoleteAttribute("Use Lucene.Net.Search.Join.ToParentBlockJoinFieldComparer instead. This class will be removed in 4.8.0 release candidate.")]
[EditorBrowsableAttribute("1")]
public abstract class Lucene.Net.Join.ToParentBlockJoinFieldComparer : FieldComparer`1<object> {
    private Filter _parentFilter;
    private Filter _childFilter;
    private int _spareSlot;
    private FieldComparer _wrappedComparer;
    private FixedBitSet _parentDocuments;
    private FixedBitSet _childDocuments;
    public object Item { get; }
    private ToParentBlockJoinFieldComparer(FieldComparer wrappedComparer, Filter parentFilter, Filter childFilter, int spareSlot);
    public virtual int Compare(int slot1, int slot2);
    public virtual void SetBottom(int slot);
    public virtual void SetTopValue(object value);
    public virtual FieldComparer SetNextReader(AtomicReaderContext context);
    private static bool IsEmpty(DocIdSet set);
    private static FixedBitSet ToFixedBitSet(DocIdSetIterator iterator, int numBits);
    public virtual object get_Item(int slot);
}
[ObsoleteAttribute("Use Lucene.Net.Search.Join.ToParentBlockJoinQuery instead. This class will be removed in 4.8.0 release candidate.")]
[EditorBrowsableAttribute("1")]
public class Lucene.Net.Join.ToParentBlockJoinQuery : Query {
    private Filter _parentsFilter;
    private Query _childQuery;
    private Query _origChildQuery;
    private ScoreMode _scoreMode;
    public ToParentBlockJoinQuery(Query childQuery, Filter parentsFilter, ScoreMode scoreMode);
    private ToParentBlockJoinQuery(Query origChildQuery, Query childQuery, Filter parentsFilter, ScoreMode scoreMode);
    public virtual Weight CreateWeight(IndexSearcher searcher);
    public virtual void ExtractTerms(ISet`1<Term> terms);
    public virtual Query Rewrite(IndexReader reader);
    public virtual string ToString(string field);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[ObsoleteAttribute("Use Lucene.Net.Search.Join.ToParentBlockJoinSortField instead. This class will be removed in 4.8.0 release candidate.")]
[EditorBrowsableAttribute("1")]
public class Lucene.Net.Join.ToParentBlockJoinSortField : SortField {
    private bool order;
    private Filter parentFilter;
    private Filter childFilter;
    public ToParentBlockJoinSortField(string field, SortFieldType type, bool reverse, Filter parentFilter, Filter childFilter);
    public ToParentBlockJoinSortField(string field, SortFieldType type, bool reverse, bool order, Filter parentFilter, Filter childFilter);
    public virtual FieldComparer GetComparer(int numHits, int sortPos);
}
internal class Lucene.Net.Search.Join.FakeScorer : Scorer {
    internal float _score;
    internal int doc;
    public int DocID { get; }
    public int Freq { get; }
    public Weight Weight { get; }
    public virtual int Advance(int target);
    public virtual int get_DocID();
    public virtual int get_Freq();
    public virtual int NextDoc();
    public virtual float GetScore();
    public virtual long GetCost();
    public virtual Weight get_Weight();
    public virtual ICollection`1<ChildScorer> GetChildren();
}
public class Lucene.Net.Search.Join.FixedBitSetCachingWrapperFilter : CachingWrapperFilter {
    public FixedBitSetCachingWrapperFilter(Filter filter);
    protected virtual DocIdSet DocIdSetToCache(DocIdSet docIdSet, AtomicReader reader);
}
public class Lucene.Net.Search.Join.JoinUtil : object {
    public static Query CreateJoinQuery(string fromField, bool multipleValuesPerDocument, string toField, Query fromQuery, IndexSearcher fromSearcher, ScoreMode scoreMode);
}
public enum Lucene.Net.Search.Join.ScoreMode : Enum {
    public int value__;
    public static ScoreMode None;
    public static ScoreMode Avg;
    public static ScoreMode Max;
    public static ScoreMode Total;
}
internal abstract class Lucene.Net.Search.Join.TermsCollector : object {
    private string _field;
    private BytesRefHash _collectorTerms;
    public BytesRefHash CollectorTerms { get; }
    public bool AcceptsDocsOutOfOrder { get; }
    internal TermsCollector(string field);
    public virtual BytesRefHash get_CollectorTerms();
    public virtual void SetScorer(Scorer scorer);
    public abstract virtual void Collect(int doc);
    public abstract virtual void SetNextReader(AtomicReaderContext context);
    public virtual bool get_AcceptsDocsOutOfOrder();
    internal static TermsCollector Create(string field, bool multipleValuesPerDocument);
}
internal class Lucene.Net.Search.Join.TermsIncludingScoreQuery : Query {
    private string _field;
    private bool _multipleValuesPerDocument;
    private BytesRefHash _terms;
    private Single[] _scores;
    private Int32[] _ords;
    private Query _originalQuery;
    private Query _unwrittenOriginalQuery;
    internal TermsIncludingScoreQuery(string field, bool multipleValuesPerDocument, BytesRefHash terms, Single[] scores, Query originalQuery);
    private TermsIncludingScoreQuery(string field, bool multipleValuesPerDocument, BytesRefHash terms, Single[] scores, Int32[] ords, Query originalQuery, Query unwrittenOriginalQuery);
    public virtual string ToString(string string);
    public virtual void ExtractTerms(ISet`1<Term> terms);
    public virtual Query Rewrite(IndexReader reader);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual Weight CreateWeight(IndexSearcher searcher);
}
internal class Lucene.Net.Search.Join.TermsQuery : MultiTermQuery {
    private BytesRefHash _terms;
    private Int32[] _ords;
    private Query _fromQuery;
    internal TermsQuery(string field, Query fromQuery, BytesRefHash terms);
    protected virtual TermsEnum GetTermsEnum(Terms terms, AttributeSource atts);
    public virtual string ToString(string field);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal abstract class Lucene.Net.Search.Join.TermsWithScoreCollector : object {
    private static int INITIAL_ARRAY_SIZE;
    private string _field;
    private BytesRefHash _collectedTerms;
    private ScoreMode _scoreMode;
    private Scorer _scorer;
    private Single[] _scoreSums;
    public BytesRefHash CollectedTerms { get; }
    [WritableArrayAttribute]
public Single[] ScoresPerTerm { get; }
    public bool AcceptsDocsOutOfOrder { get; }
    internal TermsWithScoreCollector(string field, ScoreMode scoreMode);
    public BytesRefHash get_CollectedTerms();
    public virtual Single[] get_ScoresPerTerm();
    public virtual void SetScorer(Scorer scorer);
    public abstract virtual void Collect(int doc);
    public abstract virtual void SetNextReader(AtomicReaderContext context);
    public virtual bool get_AcceptsDocsOutOfOrder();
    internal static TermsWithScoreCollector Create(string field, bool multipleValuesPerDocument, ScoreMode scoreMode);
}
public class Lucene.Net.Search.Join.ToChildBlockJoinQuery : Query {
    internal static string INVALID_QUERY_MESSAGE;
    private Filter _parentsFilter;
    private Query _parentQuery;
    private Query _origParentQuery;
    private bool _doScores;
    public ToChildBlockJoinQuery(Query parentQuery, Filter parentsFilter, bool doScores);
    private ToChildBlockJoinQuery(Query origParentQuery, Query parentQuery, Filter parentsFilter, bool doScores);
    public virtual Weight CreateWeight(IndexSearcher searcher);
    public virtual void ExtractTerms(ISet`1<Term> terms);
    public virtual Query Rewrite(IndexReader reader);
    public virtual string ToString(string field);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual object Clone();
}
public class Lucene.Net.Search.Join.ToParentBlockJoinCollector : object {
    private Sort sort;
    private IDictionary`2<Query, int> joinQueryID;
    private int numParentHits;
    private FieldValueHitQueue`1<OneGroup> queue;
    private FieldComparer[] comparers;
    private Int32[] reverseMul;
    private int compEnd;
    private bool trackMaxScore;
    private bool trackScores;
    private int docBase;
    private BlockJoinScorer[] joinScorers;
    private AtomicReaderContext currentReaderContext;
    private Scorer scorer;
    private bool queueFull;
    private OneGroup bottom;
    private int totalHitCount;
    private float maxScore;
    private OneGroup[] sortedGroups;
    public bool AcceptsDocsOutOfOrder { get; }
    public float MaxScore { get; }
    public ToParentBlockJoinCollector(Sort sort, int numParentHits, bool trackScores, bool trackMaxScore);
    public virtual void Collect(int parentDoc);
    private void CopyGroups(OneGroup og);
    public virtual void SetNextReader(AtomicReaderContext context);
    public virtual bool get_AcceptsDocsOutOfOrder();
    private void Enroll(ToParentBlockJoinQuery query, BlockJoinScorer scorer);
    public virtual void SetScorer(Scorer scorer);
    private void SortQueue();
    public virtual ITopGroups`1<int> GetTopGroups(ToParentBlockJoinQuery query, Sort withinGroupSort, int offset, int maxDocsPerGroup, int withinGroupOffset, bool fillSortFields);
    private ITopGroups`1<int> AccumulateGroups(int slot, int offset, int maxDocsPerGroup, int withinGroupOffset, Sort withinGroupSort, bool fillSortFields);
    public virtual ITopGroups`1<int> GetTopGroupsWithAllChildDocs(ToParentBlockJoinQuery query, Sort withinGroupSort, int offset, int withinGroupOffset, bool fillSortFields);
    public virtual float get_MaxScore();
}
[DefaultMemberAttribute("Item")]
public abstract class Lucene.Net.Search.Join.ToParentBlockJoinFieldComparer : FieldComparer`1<object> {
    private Filter _parentFilter;
    private Filter _childFilter;
    private int _spareSlot;
    private FieldComparer _wrappedComparer;
    private FixedBitSet _parentDocuments;
    private FixedBitSet _childDocuments;
    public object Item { get; }
    private ToParentBlockJoinFieldComparer(FieldComparer wrappedComparer, Filter parentFilter, Filter childFilter, int spareSlot);
    public virtual int Compare(int slot1, int slot2);
    public virtual void SetBottom(int slot);
    public virtual void SetTopValue(object value);
    public virtual FieldComparer SetNextReader(AtomicReaderContext context);
    private static bool IsEmpty(DocIdSet set);
    private static FixedBitSet ToFixedBitSet(DocIdSetIterator iterator, int numBits);
    public virtual object get_Item(int slot);
}
public class Lucene.Net.Search.Join.ToParentBlockJoinQuery : Query {
    private Filter _parentsFilter;
    private Query _childQuery;
    private Query _origChildQuery;
    private ScoreMode _scoreMode;
    public ToParentBlockJoinQuery(Query childQuery, Filter parentsFilter, ScoreMode scoreMode);
    private ToParentBlockJoinQuery(Query origChildQuery, Query childQuery, Filter parentsFilter, ScoreMode scoreMode);
    public virtual Weight CreateWeight(IndexSearcher searcher);
    public virtual void ExtractTerms(ISet`1<Term> terms);
    public virtual Query Rewrite(IndexReader reader);
    public virtual string ToString(string field);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Lucene.Net.Search.Join.ToParentBlockJoinSortField : SortField {
    private bool order;
    private Filter parentFilter;
    private Filter childFilter;
    public ToParentBlockJoinSortField(string field, SortFieldType type, bool reverse, Filter parentFilter, Filter childFilter);
    public ToParentBlockJoinSortField(string field, SortFieldType type, bool reverse, bool order, Filter parentFilter, Filter childFilter);
    public virtual FieldComparer GetComparer(int numHits, int sortPos);
}
