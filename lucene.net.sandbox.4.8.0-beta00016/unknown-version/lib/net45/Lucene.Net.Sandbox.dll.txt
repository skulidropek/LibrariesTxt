public class Lucene.Net.Sandbox.Queries.DuplicateFilter : Filter {
    private KeepMode keepMode;
    private ProcessingMode processingMode;
    private string fieldName;
    public string FieldName { get; public set; }
    public KeepMode KeepMode { get; public set; }
    public ProcessingMode ProcessingMode { get; public set; }
    public DuplicateFilter(string fieldName);
    public DuplicateFilter(string fieldName, KeepMode keepMode, ProcessingMode processingMode);
    public virtual DocIdSet GetDocIdSet(AtomicReaderContext context, IBits acceptDocs);
    private FixedBitSet CorrectBits(AtomicReader reader, IBits acceptDocs);
    private FixedBitSet FastBits(AtomicReader reader, IBits acceptDocs);
    public virtual string get_FieldName();
    public virtual void set_FieldName(string value);
    public KeepMode get_KeepMode();
    public void set_KeepMode(KeepMode value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public ProcessingMode get_ProcessingMode();
    public void set_ProcessingMode(ProcessingMode value);
}
public class Lucene.Net.Sandbox.Queries.FuzzyLikeThisQuery : Query {
    internal static TFIDFSimilarity sim;
    private Query rewrittenQuery;
    private IList`1<FieldVals> fieldVals;
    private Analyzer analyzer;
    private ScoreTermQueue q;
    private static int MAX_VARIANTS_PER_TERM;
    private bool ignoreTF;
    private int maxNumTerms;
    public bool IgnoreTF { get; public set; }
    public FuzzyLikeThisQuery(int maxNumTerms, Analyzer analyzer);
    private static FuzzyLikeThisQuery();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public virtual void AddTerms(string queryString, string fieldName, float minSimilarity, int prefixLength);
    private void AddTerms(IndexReader reader, FieldVals f);
    public virtual Query Rewrite(IndexReader reader);
    public virtual string ToString(string field);
    public virtual bool get_IgnoreTF();
    public virtual void set_IgnoreTF(bool value);
}
public enum Lucene.Net.Sandbox.Queries.KeepMode : Enum {
    public int value__;
    public static KeepMode KM_USE_FIRST_OCCURRENCE;
    public static KeepMode KM_USE_LAST_OCCURRENCE;
}
public enum Lucene.Net.Sandbox.Queries.ProcessingMode : Enum {
    public int value__;
    public static ProcessingMode PM_FULL_VALIDATION;
    public static ProcessingMode PM_FAST_INVALIDATION;
}
public enum Lucene.Net.Sandbox.Queries.Selector : Enum {
    public int value__;
    public static Selector MIN;
    public static Selector MAX;
    public static Selector MIDDLE_MIN;
    public static Selector MIDDLE_MAX;
}
[ObsoleteAttribute("Use FuzzyQuery instead.")]
public class Lucene.Net.Sandbox.Queries.SlowFuzzyQuery : MultiTermQuery {
    public static float defaultMinSimilarity;
    public static int defaultPrefixLength;
    public static int defaultMaxExpansions;
    private float minimumSimilarity;
    private int prefixLength;
    private bool termLongEnough;
    protected Term m_term;
    public float MinSimilarity { get; }
    public int PrefixLength { get; }
    public Term Term { get; }
    public SlowFuzzyQuery(Term term, float minimumSimilarity, int prefixLength, int maxExpansions);
    public SlowFuzzyQuery(Term term, float minimumSimilarity, int prefixLength);
    public SlowFuzzyQuery(Term term, float minimumSimilarity);
    public SlowFuzzyQuery(Term term);
    public virtual float get_MinSimilarity();
    public virtual int get_PrefixLength();
    protected virtual TermsEnum GetTermsEnum(Terms terms, AttributeSource atts);
    public virtual Term get_Term();
    public virtual string ToString(string field);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
[ObsoleteAttribute("Use FuzzyTermsEnum instead.")]
public class Lucene.Net.Sandbox.Queries.SlowFuzzyTermsEnum : FuzzyTermsEnum {
    public SlowFuzzyTermsEnum(Terms terms, AttributeSource atts, Term term, float minSimilarity, int prefixLength);
    protected virtual void MaxEditDistanceChanged(BytesRef lastTerm, int maxEdits, bool init);
}
public class Lucene.Net.Sandbox.Queries.SortedSetSortField : SortField {
    private Selector selector;
    public Selector Selector { get; }
    public SortedSetSortField(string field, bool reverse);
    public SortedSetSortField(string field, bool reverse, Selector selector);
    public Selector get_Selector();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public virtual string ToString();
    public virtual void SetMissingValue(object value);
    public virtual FieldComparer GetComparer(int numHits, int sortPos);
}
