[DefaultMemberAttribute("Item")]
public class LumenWorks.Framework.IO.Csv.CachedCsvReader : CsvReader {
    private bool _readingStream;
    private CsvBindingList _bindingList;
    [CompilerGeneratedAttribute]
private List`1<String[]> <Records>k__BackingField;
    [CompilerGeneratedAttribute]
private long <CacheRecordIndex>k__BackingField;
    public List`1<String[]> Records { get; private set; }
    public long CurrentRecordIndex { get; }
    protected long CacheRecordIndex { get; private set; }
    public bool EndOfStream { get; }
    public string Item { get; }
    private bool System.ComponentModel.IListSource.ContainsListCollection { get; }
    public CachedCsvReader(TextReader reader, bool hasHeaders);
    public CachedCsvReader(TextReader reader, bool hasHeaders, int bufferSize);
    public CachedCsvReader(TextReader reader, bool hasHeaders, char delimiter);
    public CachedCsvReader(TextReader reader, bool hasHeaders, char delimiter, int bufferSize);
    public CachedCsvReader(TextReader reader, bool hasHeaders, char delimiter, char quote, char escape, char comment, ValueTrimmingOptions trimmingOptions, string nullValue);
    public CachedCsvReader(TextReader reader, bool hasHeaders, char delimiter, char quote, char escape, char comment, ValueTrimmingOptions trimmingOptions, int bufferSize, string nullValue);
    [CompilerGeneratedAttribute]
public List`1<String[]> get_Records();
    [CompilerGeneratedAttribute]
private void set_Records(List`1<String[]> value);
    public virtual long get_CurrentRecordIndex();
    [CompilerGeneratedAttribute]
protected long get_CacheRecordIndex();
    [CompilerGeneratedAttribute]
private void set_CacheRecordIndex(long value);
    public virtual bool get_EndOfStream();
    public virtual string get_Item(int field);
    public virtual void ReadToEnd();
    protected virtual bool ReadNextRecord(bool onlyReadHeaders, bool skipToNextLine);
    public void MoveToStart();
    public void MoveToLastCachedRecord();
    public virtual bool MoveTo(long record);
    private sealed virtual override bool System.ComponentModel.IListSource.get_ContainsListCollection();
    private sealed virtual override IList System.ComponentModel.IListSource.GetList();
}
public class LumenWorks.Framework.IO.Csv.Column : object {
    private Type type;
    private string typeName;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OverrideValue>k__BackingField;
    [CompilerGeneratedAttribute]
private CultureInfo <Culture>k__BackingField;
    [CompilerGeneratedAttribute]
private NumberStyles <NumberStyles>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeStyles <DateTimeStyles>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DateParseExact>k__BackingField;
    public string Name { get; public set; }
    public Type Type { get; public set; }
    public string DefaultValue { get; public set; }
    public string OverrideValue { get; public set; }
    public CultureInfo Culture { get; public set; }
    public NumberStyles NumberStyles { get; public set; }
    public DateTimeStyles DateTimeStyles { get; public set; }
    public string DateParseExact { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    public Type get_Type();
    public void set_Type(Type value);
    [CompilerGeneratedAttribute]
public string get_DefaultValue();
    [CompilerGeneratedAttribute]
public void set_DefaultValue(string value);
    [CompilerGeneratedAttribute]
public string get_OverrideValue();
    [CompilerGeneratedAttribute]
public void set_OverrideValue(string value);
    [CompilerGeneratedAttribute]
public CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
public void set_Culture(CultureInfo value);
    [CompilerGeneratedAttribute]
public NumberStyles get_NumberStyles();
    [CompilerGeneratedAttribute]
public void set_NumberStyles(NumberStyles value);
    [CompilerGeneratedAttribute]
public DateTimeStyles get_DateTimeStyles();
    [CompilerGeneratedAttribute]
public void set_DateTimeStyles(DateTimeStyles value);
    [CompilerGeneratedAttribute]
public string get_DateParseExact();
    [CompilerGeneratedAttribute]
public void set_DateParseExact(string value);
    public object Convert(string value);
    public bool TryConvert(string value, Object& result);
}
[DefaultMemberAttribute("Item")]
public class LumenWorks.Framework.IO.Csv.CsvBindingList : object {
    private CachedCsvReader _csv;
    private int _count;
    private PropertyDescriptorCollection _properties;
    private CsvPropertyDescriptor _sort;
    private ListSortDirection _direction;
    public bool AllowNew { get; }
    public PropertyDescriptor SortProperty { get; }
    public bool SupportsSorting { get; }
    public bool IsSorted { get; }
    public bool AllowRemove { get; }
    public bool SupportsSearching { get; }
    public ListSortDirection SortDirection { get; }
    public bool SupportsChangeNotification { get; }
    public bool AllowEdit { get; }
    public String[] Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public bool IsFixedSize { get; }
    private object System.Collections.IList.Item { get; private set; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public CsvBindingList(CachedCsvReader csv);
    public sealed virtual void AddIndex(PropertyDescriptor property);
    public sealed virtual bool get_AllowNew();
    public sealed virtual void ApplySort(PropertyDescriptor property, ListSortDirection direction);
    public sealed virtual PropertyDescriptor get_SortProperty();
    public sealed virtual int Find(PropertyDescriptor property, object key);
    public sealed virtual bool get_SupportsSorting();
    public sealed virtual bool get_IsSorted();
    public sealed virtual bool get_AllowRemove();
    public sealed virtual bool get_SupportsSearching();
    public sealed virtual ListSortDirection get_SortDirection();
    public sealed virtual void add_ListChanged(ListChangedEventHandler value);
    public sealed virtual void remove_ListChanged(ListChangedEventHandler value);
    public sealed virtual bool get_SupportsChangeNotification();
    public sealed virtual void RemoveSort();
    public sealed virtual object AddNew();
    public sealed virtual bool get_AllowEdit();
    public sealed virtual void RemoveIndex(PropertyDescriptor property);
    public sealed virtual PropertyDescriptorCollection GetItemProperties(PropertyDescriptor[] listAccessors);
    public sealed virtual string GetListName(PropertyDescriptor[] listAccessors);
    public sealed virtual int IndexOf(String[] item);
    public sealed virtual void Insert(int index, String[] item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual String[] get_Item(int index);
    public sealed virtual void set_Item(int index, String[] value);
    public sealed virtual void Add(String[] item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(String[] item);
    public sealed virtual void CopyTo(String[][] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(String[] item);
    public sealed virtual IEnumerator`1<String[]> GetEnumerator();
    public sealed virtual int Add(object value);
    public sealed virtual bool Contains(object value);
    public sealed virtual int IndexOf(object value);
    public sealed virtual void Insert(int index, object value);
    public sealed virtual bool get_IsFixedSize();
    public sealed virtual void Remove(object value);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class LumenWorks.Framework.IO.Csv.CsvPropertyDescriptor : PropertyDescriptor {
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    public int Index { get; private set; }
    public Type ComponentType { get; }
    public bool IsReadOnly { get; }
    public Type PropertyType { get; }
    public CsvPropertyDescriptor(string fieldName, int index);
    [CompilerGeneratedAttribute]
public int get_Index();
    [CompilerGeneratedAttribute]
private void set_Index(int value);
    public virtual bool CanResetValue(object component);
    public virtual object GetValue(object component);
    public virtual void ResetValue(object component);
    public virtual void SetValue(object component, object value);
    public virtual bool ShouldSerializeValue(object component);
    public virtual Type get_ComponentType();
    public virtual bool get_IsReadOnly();
    public virtual Type get_PropertyType();
}
[DefaultMemberAttribute("Item")]
public class LumenWorks.Framework.IO.Csv.CsvReader : object {
    public static int DefaultBufferSize;
    public static char DefaultDelimiter;
    public static char DefaultQuote;
    public static char DefaultEscape;
    public static char DefaultComment;
    private static bool DefaultAddMark;
    private static int DefaultThreshold;
    private TextReader _reader;
    private bool _initialized;
    private Dictionary`2<string, int> _fieldHeaderIndexes;
    private int _nextFieldStart;
    private int _nextFieldIndex;
    private String[] _fields;
    private int _fieldCount;
    private Char[] _buffer;
    private int _bufferLength;
    private bool _eof;
    private bool _eol;
    private bool _firstRecordInCache;
    [CompilerGeneratedAttribute]
private EventHandler`1<ParseErrorEventArgs> ParseError;
    [CompilerGeneratedAttribute]
private EventHandler`1<DuplicateHeaderEventArgs> DuplicateHeaderEncountered;
    [CompilerGeneratedAttribute]
private char <Comment>k__BackingField;
    [CompilerGeneratedAttribute]
private char <Escape>k__BackingField;
    [CompilerGeneratedAttribute]
private char <Delimiter>k__BackingField;
    [CompilerGeneratedAttribute]
private char <Quote>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasHeaders>k__BackingField;
    [CompilerGeneratedAttribute]
private ValueTrimmingOptions <TrimmingOption>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NullValue>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BufferSize>k__BackingField;
    [CompilerGeneratedAttribute]
private ParseErrorAction <DefaultParseErrorAction>k__BackingField;
    [CompilerGeneratedAttribute]
private MissingFieldAction <MissingFieldAction>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportsMultiline>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxQuotedFieldLength>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipEmptyLines>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultHeaderName>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Column> <Columns>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseColumnDefaults>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EndOfStream>k__BackingField;
    [CompilerGeneratedAttribute]
private long <FileRecordIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MissingFieldFlag>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ParseErrorFlag>k__BackingField;
    private bool _isDisposed;
    private object _lock;
    [CompilerGeneratedAttribute]
private EventHandler Disposed;
    public char Comment { get; }
    public char Escape { get; }
    public char Delimiter { get; }
    public char Quote { get; }
    public bool HasHeaders { get; }
    public ValueTrimmingOptions TrimmingOption { get; }
    public string NullValue { get; }
    public int BufferSize { get; }
    public ParseErrorAction DefaultParseErrorAction { get; public set; }
    public MissingFieldAction MissingFieldAction { get; public set; }
    public bool SupportsMultiline { get; public set; }
    public Nullable`1<int> MaxQuotedFieldLength { get; public set; }
    public bool SkipEmptyLines { get; public set; }
    public string DefaultHeaderName { get; public set; }
    public IList`1<Column> Columns { get; public set; }
    public bool UseColumnDefaults { get; public set; }
    public int FieldCount { get; }
    public bool EndOfStream { get; private set; }
    protected long FileRecordIndex { get; private set; }
    public long CurrentRecordIndex { get; }
    public bool MissingFieldFlag { get; private set; }
    public bool ParseErrorFlag { get; private set; }
    public string Item { get; }
    public string Item { get; }
    public string Item { get; }
    public string Item { get; }
    private int System.Data.IDataReader.RecordsAffected { get; }
    private bool System.Data.IDataReader.IsClosed { get; }
    private int System.Data.IDataReader.Depth { get; }
    private object System.Data.IDataRecord.Item { get; }
    private object System.Data.IDataRecord.Item { get; }
    public bool IsDisposed { get; }
    public CsvReader(Stream stream, bool hasHeaders, Encoding encoding, bool addMark, int threshold);
    public CsvReader(Stream stream, bool hasHeaders, Encoding encoding, int bufferSize, bool addMark, int threshold);
    public CsvReader(Stream stream, bool hasHeaders, Encoding encoding, char delimiter, bool addMark, int threshold);
    public CsvReader(Stream stream, bool hasHeaders, Encoding encoding, char delimiter, int bufferSize, bool addMark, int threshold);
    public CsvReader(Stream stream, bool hasHeaders, Encoding encoding, char delimiter, char quote, char escape, char comment, ValueTrimmingOptions trimmingOptions, string nullValue, bool addMark, int threshold);
    public CsvReader(Stream stream, bool hasHeaders, Encoding encoding, char delimiter, char quote, char escape, char comment, ValueTrimmingOptions trimmingOptions, int bufferSize, string nullValue, bool addMark, int threshold);
    public CsvReader(TextReader reader, bool hasHeaders);
    public CsvReader(TextReader reader, bool hasHeaders, int bufferSize);
    public CsvReader(TextReader reader, bool hasHeaders, char delimiter);
    public CsvReader(TextReader reader, bool hasHeaders, char delimiter, int bufferSize);
    public CsvReader(TextReader reader, bool hasHeaders, char delimiter, char quote, char escape, char comment, ValueTrimmingOptions trimmingOptions, int bufferSize, string nullValue);
    [CompilerGeneratedAttribute]
public void add_ParseError(EventHandler`1<ParseErrorEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ParseError(EventHandler`1<ParseErrorEventArgs> value);
    protected virtual void OnParseError(ParseErrorEventArgs e);
    [CompilerGeneratedAttribute]
public void add_DuplicateHeaderEncountered(EventHandler`1<DuplicateHeaderEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_DuplicateHeaderEncountered(EventHandler`1<DuplicateHeaderEventArgs> value);
    [CompilerGeneratedAttribute]
public char get_Comment();
    [CompilerGeneratedAttribute]
public char get_Escape();
    [CompilerGeneratedAttribute]
public char get_Delimiter();
    [CompilerGeneratedAttribute]
public char get_Quote();
    [CompilerGeneratedAttribute]
public bool get_HasHeaders();
    [CompilerGeneratedAttribute]
public ValueTrimmingOptions get_TrimmingOption();
    [CompilerGeneratedAttribute]
public string get_NullValue();
    [CompilerGeneratedAttribute]
public int get_BufferSize();
    [CompilerGeneratedAttribute]
public ParseErrorAction get_DefaultParseErrorAction();
    [CompilerGeneratedAttribute]
public void set_DefaultParseErrorAction(ParseErrorAction value);
    [CompilerGeneratedAttribute]
public MissingFieldAction get_MissingFieldAction();
    [CompilerGeneratedAttribute]
public void set_MissingFieldAction(MissingFieldAction value);
    [CompilerGeneratedAttribute]
public bool get_SupportsMultiline();
    [CompilerGeneratedAttribute]
public void set_SupportsMultiline(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxQuotedFieldLength();
    [CompilerGeneratedAttribute]
public void set_MaxQuotedFieldLength(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public bool get_SkipEmptyLines();
    [CompilerGeneratedAttribute]
public void set_SkipEmptyLines(bool value);
    [CompilerGeneratedAttribute]
public string get_DefaultHeaderName();
    [CompilerGeneratedAttribute]
public void set_DefaultHeaderName(string value);
    [CompilerGeneratedAttribute]
public IList`1<Column> get_Columns();
    [CompilerGeneratedAttribute]
public void set_Columns(IList`1<Column> value);
    [CompilerGeneratedAttribute]
public bool get_UseColumnDefaults();
    [CompilerGeneratedAttribute]
public void set_UseColumnDefaults(bool value);
    public sealed virtual int get_FieldCount();
    [CompilerGeneratedAttribute]
public virtual bool get_EndOfStream();
    [CompilerGeneratedAttribute]
private void set_EndOfStream(bool value);
    public String[] GetFieldHeaders();
    [CompilerGeneratedAttribute]
protected long get_FileRecordIndex();
    [CompilerGeneratedAttribute]
private void set_FileRecordIndex(long value);
    public virtual long get_CurrentRecordIndex();
    [CompilerGeneratedAttribute]
public bool get_MissingFieldFlag();
    [CompilerGeneratedAttribute]
private void set_MissingFieldFlag(bool value);
    [CompilerGeneratedAttribute]
public bool get_ParseErrorFlag();
    [CompilerGeneratedAttribute]
private void set_ParseErrorFlag(bool value);
    public string get_Item(int record, string field);
    public string get_Item(int record, int field);
    public string get_Item(string field);
    public virtual string get_Item(int field);
    private void EnsureInitialize();
    public int GetFieldIndex(string header);
    public bool HasHeader(string header);
    public void CopyCurrentRecordTo(String[] array, int index);
    public string GetCurrentRawData();
    private bool IsWhiteSpace(char c);
    public virtual bool MoveTo(long record);
    private bool ParseNewLine(Int32& pos);
    private bool IsNewLine(int pos);
    private bool ReadBuffer();
    private string ReadField(int field, bool initializing, bool discardValue);
    public bool ReadNextRecord();
    protected virtual bool ReadNextRecord(bool onlyReadHeaders, bool skipToNextLine);
    private void HandleExtraFieldsInCurrentRecord(int currentFieldIndex);
    private void SkipToNextRecord();
    private bool SkipEmptyAndCommentedLines(Int32& pos);
    private void DoSkipEmptyAndCommentedLines(Int32& pos);
    private bool SkipWhiteSpaces(Int32& pos);
    private bool SkipToNewLine(Int32& pos);
    private void HandleParseError(MalformedCsvException error, Int32& pos);
    private string HandleMissingField(string value, int fieldIndex, Int32& currentPosition);
    private void ValidateDataReader(DataReaderValidations validations);
    private long CopyFieldToArray(int field, long fieldOffset, Array destinationArray, int destinationOffset, int length);
    private sealed virtual override int System.Data.IDataReader.get_RecordsAffected();
    private sealed virtual override bool System.Data.IDataReader.get_IsClosed();
    private sealed virtual override bool System.Data.IDataReader.NextResult();
    private sealed virtual override void System.Data.IDataReader.Close();
    private sealed virtual override bool System.Data.IDataReader.Read();
    private sealed virtual override int System.Data.IDataReader.get_Depth();
    private sealed virtual override DataTable System.Data.IDataReader.GetSchemaTable();
    private sealed virtual override int System.Data.IDataRecord.GetInt32(int i);
    private sealed virtual override object System.Data.IDataRecord.get_Item(string name);
    private sealed virtual override object System.Data.IDataRecord.get_Item(int i);
    private sealed virtual override object System.Data.IDataRecord.GetValue(int i);
    private sealed virtual override bool System.Data.IDataRecord.IsDBNull(int i);
    private sealed virtual override long System.Data.IDataRecord.GetBytes(int i, long fieldOffset, Byte[] buffer, int bufferoffset, int length);
    private sealed virtual override byte System.Data.IDataRecord.GetByte(int i);
    private sealed virtual override Type System.Data.IDataRecord.GetFieldType(int i);
    private sealed virtual override decimal System.Data.IDataRecord.GetDecimal(int i);
    private sealed virtual override int System.Data.IDataRecord.GetValues(Object[] values);
    private sealed virtual override string System.Data.IDataRecord.GetName(int i);
    private sealed virtual override long System.Data.IDataRecord.GetInt64(int i);
    private sealed virtual override double System.Data.IDataRecord.GetDouble(int i);
    private sealed virtual override bool System.Data.IDataRecord.GetBoolean(int i);
    private sealed virtual override Guid System.Data.IDataRecord.GetGuid(int i);
    private sealed virtual override DateTime System.Data.IDataRecord.GetDateTime(int i);
    private sealed virtual override int System.Data.IDataRecord.GetOrdinal(string name);
    private sealed virtual override string System.Data.IDataRecord.GetDataTypeName(int i);
    private sealed virtual override float System.Data.IDataRecord.GetFloat(int i);
    private sealed virtual override IDataReader System.Data.IDataRecord.GetData(int i);
    private sealed virtual override long System.Data.IDataRecord.GetChars(int i, long fieldoffset, Char[] buffer, int bufferoffset, int length);
    private sealed virtual override string System.Data.IDataRecord.GetString(int i);
    private sealed virtual override char System.Data.IDataRecord.GetChar(int i);
    private sealed virtual override short System.Data.IDataRecord.GetInt16(int i);
    private object FieldValue(int i);
    public RecordEnumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<String[]> System.Collections.Generic.IEnumerable<System.String[]>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [CompilerGeneratedAttribute]
public void add_Disposed(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Disposed(EventHandler value);
    public bool get_IsDisposed();
    protected virtual void OnDisposed(EventArgs e);
    protected void CheckDisposed();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual override void Finalize();
}
public class LumenWorks.Framework.IO.Csv.CsvRecordComparer : object {
    [CompilerGeneratedAttribute]
private int <Field>k__BackingField;
    [CompilerGeneratedAttribute]
private ListSortDirection <Direction>k__BackingField;
    public int Field { get; }
    public ListSortDirection Direction { get; }
    public CsvRecordComparer(int field, ListSortDirection direction);
    [CompilerGeneratedAttribute]
public int get_Field();
    [CompilerGeneratedAttribute]
public ListSortDirection get_Direction();
    public sealed virtual int Compare(String[] x, String[] y);
}
public class LumenWorks.Framework.IO.Csv.DuplicateHeaderEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <HeaderName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ExistingDuplicateIndex>k__BackingField;
    public string HeaderName { get; public set; }
    public int Index { get; }
    public int ExistingDuplicateIndex { get; }
    public DuplicateHeaderEventArgs(string headerName, int index, int existingDuplicateIndex);
    [CompilerGeneratedAttribute]
public string get_HeaderName();
    [CompilerGeneratedAttribute]
public void set_HeaderName(string value);
    [CompilerGeneratedAttribute]
public int get_Index();
    [CompilerGeneratedAttribute]
public int get_ExistingDuplicateIndex();
}
public class LumenWorks.Framework.IO.Csv.DuplicateHeaderException : Exception {
    private string _headerName;
    private int _columnIndex;
    public string HeaderName { get; }
    public int ColumnIndex { get; }
    public DuplicateHeaderException(string headerName, int columnIndex);
    public string get_HeaderName();
    public int get_ColumnIndex();
}
public class LumenWorks.Framework.IO.Csv.MalformedCsvException : Exception {
    private string _message;
    private string _rawData;
    private int _currentFieldIndex;
    private long _currentRecordIndex;
    private int _currentPosition;
    public string RawData { get; }
    public int CurrentPosition { get; }
    public long CurrentRecordIndex { get; }
    public int CurrentFieldIndex { get; }
    public string Message { get; }
    public MalformedCsvException(string message);
    public MalformedCsvException(string message, Exception innerException);
    public MalformedCsvException(string rawData, int currentPosition, long currentRecordIndex, int currentFieldIndex);
    public MalformedCsvException(string rawData, int currentPosition, long currentRecordIndex, int currentFieldIndex, Exception innerException);
    public string get_RawData();
    public int get_CurrentPosition();
    public long get_CurrentRecordIndex();
    public int get_CurrentFieldIndex();
    public virtual string get_Message();
}
public enum LumenWorks.Framework.IO.Csv.MissingFieldAction : Enum {
    public int value__;
    public static MissingFieldAction ParseError;
    public static MissingFieldAction ReplaceByEmpty;
    public static MissingFieldAction ReplaceByNull;
}
public class LumenWorks.Framework.IO.Csv.MissingFieldCsvException : MalformedCsvException {
    public MissingFieldCsvException(string message);
    public MissingFieldCsvException(string message, Exception innerException);
    public MissingFieldCsvException(string rawData, int currentPosition, long currentRecordIndex, int currentFieldIndex);
    public MissingFieldCsvException(string rawData, int currentPosition, long currentRecordIndex, int currentFieldIndex, Exception innerException);
}
public enum LumenWorks.Framework.IO.Csv.ParseErrorAction : Enum {
    public int value__;
    public static ParseErrorAction RaiseEvent;
    public static ParseErrorAction AdvanceToNextLine;
    public static ParseErrorAction ThrowException;
}
public class LumenWorks.Framework.IO.Csv.ParseErrorEventArgs : EventArgs {
    private MalformedCsvException _error;
    private ParseErrorAction _action;
    public MalformedCsvException Error { get; }
    public ParseErrorAction Action { get; public set; }
    public ParseErrorEventArgs(MalformedCsvException error, ParseErrorAction defaultAction);
    public MalformedCsvException get_Error();
    public ParseErrorAction get_Action();
    public void set_Action(ParseErrorAction value);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class LumenWorks.Framework.IO.Csv.Resources.ExceptionMessage : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string BufferSizeTooSmall { get; }
    internal static string CannotMovePreviousRecordInForwardOnly { get; }
    internal static string CannotReadRecordAtIndex { get; }
    internal static string EnumerationFinishedOrNotStarted { get; }
    internal static string EnumerationVersionCheckFailed { get; }
    internal static string FieldHeaderNotFound { get; }
    internal static string FieldIndexOutOfRange { get; }
    internal static string MalformedCsvException { get; }
    internal static string MissingFieldActionNotSupported { get; }
    internal static string NoCurrentRecord { get; }
    internal static string NoHeaders { get; }
    internal static string NotEnoughSpaceInArray { get; }
    internal static string ParseErrorActionInvalidInsideParseErrorEvent { get; }
    internal static string ParseErrorActionNotSupported { get; }
    internal static string ReaderClosed { get; }
    internal static string RecordIndexLessThanZero { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_BufferSizeTooSmall();
    internal static string get_CannotMovePreviousRecordInForwardOnly();
    internal static string get_CannotReadRecordAtIndex();
    internal static string get_EnumerationFinishedOrNotStarted();
    internal static string get_EnumerationVersionCheckFailed();
    internal static string get_FieldHeaderNotFound();
    internal static string get_FieldIndexOutOfRange();
    internal static string get_MalformedCsvException();
    internal static string get_MissingFieldActionNotSupported();
    internal static string get_NoCurrentRecord();
    internal static string get_NoHeaders();
    internal static string get_NotEnoughSpaceInArray();
    internal static string get_ParseErrorActionInvalidInsideParseErrorEvent();
    internal static string get_ParseErrorActionNotSupported();
    internal static string get_ReaderClosed();
    internal static string get_RecordIndexLessThanZero();
}
[FlagsAttribute]
public enum LumenWorks.Framework.IO.Csv.ValueTrimmingOptions : Enum {
    public int value__;
    public static ValueTrimmingOptions None;
    public static ValueTrimmingOptions UnquotedOnly;
    public static ValueTrimmingOptions QuotedOnly;
    public static ValueTrimmingOptions All;
}
public class LumenWorks.Framework.IO.NullRemovalStream : Stream {
    private bool _addMark;
    private Byte[] _buffer;
    private int _bufferIndex;
    private int _bufferSize;
    private Byte[] _storage;
    private int _storageIndex;
    private int _storageSize;
    private Stream _source;
    private int _threshold;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public NullRemovalStream(Stream source, bool addMark, int threshold, int bufferSize);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual void Close();
    public virtual void Flush();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual int Read(Byte[] target, int offset, int count);
    private int Process(Byte[] target, int targetIndex, int nullCount);
    private void PopulateBuffer();
}
public class LumenWorks.Framework.IO.NullRemovalStreamReader : StreamReader {
    public NullRemovalStreamReader(Stream stream, bool addMark, int threshold, Encoding encoding, int bufferSize, bool detectEncoding);
}
internal static class System.AssemblyVersionInformation : object {
    internal static string AssemblyProduct;
    internal static string AssemblyCopyright;
    internal static string AssemblyVersion;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
}
