public static class LZ4pn.LZ4Codec : object {
    private static int MEMORY_USAGE;
    private static int NOTCOMPRESSIBLE_DETECTIONLEVEL;
    private static int MINMATCH;
    private static int SKIPSTRENGTH;
    private static int COPYLENGTH;
    private static int LASTLITERALS;
    private static int MFLIMIT;
    private static int MINLENGTH;
    private static int MAXD_LOG;
    private static int MAXD;
    private static int MAXD_MASK;
    private static int MAX_DISTANCE;
    private static int ML_BITS;
    private static int ML_MASK;
    private static int RUN_BITS;
    private static int RUN_MASK;
    private static int STEPSIZE_64;
    private static int STEPSIZE_32;
    private static int LZ4_64KLIMIT;
    private static int HASH_LOG;
    private static int HASH_TABLESIZE;
    private static int HASH_ADJUST;
    private static int HASH64K_LOG;
    private static int HASH64K_TABLESIZE;
    private static int HASH64K_ADJUST;
    private static int HASHHC_LOG;
    private static int HASHHC_TABLESIZE;
    private static int HASHHC_ADJUST;
    private static Int32[] DECODER_TABLE_32;
    private static Int32[] DECODER_TABLE_64;
    private static Int32[] DEBRUIJN_TABLE_32;
    private static Int32[] DEBRUIJN_TABLE_64;
    private static int MAX_NB_ATTEMPTS;
    private static int OPTIMAL_ML;
    private static LZ4Codec();
    public static int MaximumOutputLength(int inputLength);
    internal static void CheckArguments(Byte[] input, int inputOffset, Int32& inputLength, Byte[] output, int outputOffset, Int32& outputLength);
    private static void BlockCopy(Byte* src, Byte* dst, int len);
    private static void BlockFill(Byte* dst, int len, byte val);
    public static int Encode32(Byte* input, Byte* output, int inputLength, int outputLength);
    public static int Encode32(Byte[] input, int inputOffset, int inputLength, Byte[] output, int outputOffset, int outputLength);
    public static Byte[] Encode32(Byte[] input, int inputOffset, int inputLength);
    public static int Decode32(Byte* input, int inputLength, Byte* output, int outputLength, bool knownOutputLength);
    public static int Decode32(Byte[] input, int inputOffset, int inputLength, Byte[] output, int outputOffset, int outputLength, bool knownOutputLength);
    public static Byte[] Decode32(Byte[] input, int inputOffset, int inputLength, int outputLength);
    public static int Encode64(Byte* input, Byte* output, int inputLength, int outputLength);
    public static int Encode64(Byte[] input, int inputOffset, int inputLength, Byte[] output, int outputOffset, int outputLength);
    public static Byte[] Encode64(Byte[] input, int inputOffset, int inputLength);
    public static int Decode64(Byte* input, int inputLength, Byte* output, int outputLength, bool knownOutputLength);
    public static int Decode64(Byte[] input, int inputOffset, int inputLength, Byte[] output, int outputOffset, int outputLength, bool knownOutputLength);
    public static Byte[] Decode64(Byte[] input, int inputOffset, int inputLength, int outputLength);
    private static LZ4HC_Data_Structure LZ4HC_Create(Byte* src);
    private static int LZ4_compressHC_32(Byte* input, Byte* output, int inputLength, int outputLength);
    public static int Encode32HC(Byte[] input, int inputOffset, int inputLength, Byte[] output, int outputOffset, int outputLength);
    public static Byte[] Encode32HC(Byte[] input, int inputOffset, int inputLength);
    private static int LZ4_compressHC_64(Byte* input, Byte* output, int inputLength, int outputLength);
    public static int Encode64HC(Byte[] input, int inputOffset, int inputLength, Byte[] output, int outputOffset, int outputLength);
    public static Byte[] Encode64HC(Byte[] input, int inputOffset, int inputLength);
    private static int LZ4_compressCtx_32(Byte** hash_table, Byte* src, Byte* dst, int src_len, int dst_maxlen);
    private static int LZ4_compress64kCtx_32(UInt16* hash_table, Byte* src, Byte* dst, int src_len, int dst_maxlen);
    private static int LZ4_uncompress_32(Byte* src, Byte* dst, int dst_len);
    private static int LZ4_uncompress_unknownOutputSize_32(Byte* src, Byte* dst, int src_len, int dst_maxlen);
    private static void LZ4HC_Insert_32(LZ4HC_Data_Structure hc4, Byte* src_p);
    private static int LZ4HC_CommonLength_32(Byte* p1, Byte* p2, Byte* src_LASTLITERALS);
    private static int LZ4HC_InsertAndFindBestMatch_32(LZ4HC_Data_Structure hc4, Byte* src_p, Byte* src_LASTLITERALS, Byte*& matchpos);
    private static int LZ4HC_InsertAndGetWiderMatch_32(LZ4HC_Data_Structure hc4, Byte* src_p, Byte* startLimit, Byte* src_LASTLITERALS, int longest, Byte*& matchpos, Byte*& startpos);
    private static int LZ4_encodeSequence_32(Byte*& src_p, Byte*& dst_p, Byte*& src_anchor, int matchLength, Byte* xxx_ref, Byte* dst_end);
    private static int LZ4_compressHCCtx_32(LZ4HC_Data_Structure ctx, Byte* src, Byte* dst, int src_len, int dst_maxlen);
    private static int LZ4_compressCtx_64(UInt32* hash_table, Byte* src, Byte* dst, int src_len, int dst_maxlen);
    private static int LZ4_compress64kCtx_64(UInt16* hash_table, Byte* src, Byte* dst, int src_len, int dst_maxlen);
    private static int LZ4_uncompress_64(Byte* src, Byte* dst, int dst_len);
    private static int LZ4_uncompress_unknownOutputSize_64(Byte* src, Byte* dst, int src_len, int dst_maxlen);
    private static void LZ4HC_Insert_64(LZ4HC_Data_Structure hc4, Byte* src_p);
    private static int LZ4HC_CommonLength_64(Byte* p1, Byte* p2, Byte* src_LASTLITERALS);
    private static int LZ4HC_InsertAndFindBestMatch_64(LZ4HC_Data_Structure hc4, Byte* src_p, Byte* src_LASTLITERALS, Byte*& matchpos);
    private static int LZ4HC_InsertAndGetWiderMatch_64(LZ4HC_Data_Structure hc4, Byte* src_p, Byte* startLimit, Byte* src_LASTLITERALS, int longest, Byte*& matchpos, Byte*& startpos);
    private static int LZ4_encodeSequence_64(Byte*& src_p, Byte*& dst_p, Byte*& src_anchor, int matchLength, Byte* src_ref, Byte* dst_end);
    private static int LZ4_compressHCCtx_64(LZ4HC_Data_Structure ctx, Byte* src, Byte* dst, int src_len, int dst_maxlen);
}
