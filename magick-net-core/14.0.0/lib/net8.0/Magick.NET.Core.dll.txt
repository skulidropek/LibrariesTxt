public enum ImageMagick.AlphaOption : Enum {
    public int value__;
    public static AlphaOption Undefined;
    public static AlphaOption Activate;
    public static AlphaOption Associate;
    public static AlphaOption Background;
    public static AlphaOption Copy;
    public static AlphaOption Deactivate;
    public static AlphaOption Discrete;
    public static AlphaOption Disassociate;
    public static AlphaOption Extract;
    public static AlphaOption Off;
    public static AlphaOption On;
    public static AlphaOption Opaque;
    public static AlphaOption Remove;
    public static AlphaOption Set;
    public static AlphaOption Shape;
    public static AlphaOption Transparent;
    public static AlphaOption OffIfOpaque;
}
public enum ImageMagick.AutoThresholdMethod : Enum {
    public int value__;
    public static AutoThresholdMethod Undefined;
    public static AutoThresholdMethod Kapur;
    public static AutoThresholdMethod OTSU;
    public static AutoThresholdMethod Triangle;
}
internal class ImageMagick.BigRational : ValueType {
    [CompilerGeneratedAttribute]
private long <Denominator>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Numerator>k__BackingField;
    public long Denominator { get; private set; }
    public long Numerator { get; private set; }
    private bool IsIndeterminate { get; }
    private bool IsInteger { get; }
    private bool IsNegativeInfinity { get; }
    private bool IsPositiveInfinity { get; }
    private bool IsZero { get; }
    public BigRational(long numerator, long denominator);
    public BigRational(long numerator, long denominator, bool simplify);
    public BigRational(double value, bool bestPrecision);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public long get_Denominator();
    [CompilerGeneratedAttribute]
private void set_Denominator(long value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public long get_Numerator();
    [CompilerGeneratedAttribute]
private void set_Numerator(long value);
    private bool get_IsIndeterminate();
    private bool get_IsInteger();
    private bool get_IsNegativeInfinity();
    private bool get_IsPositiveInfinity();
    private bool get_IsZero();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(BigRational other);
    public virtual int GetHashCode();
    [NullableContextAttribute("1")]
public string ToString(IFormatProvider provider);
    private static long GreatestCommonDivisor(long a, long b);
    private void Simplify();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class ImageMagick.ByteConverter : object {
    public static int ToUInt(Byte[] data, Int32& offset);
    public static short ToShort(Byte[] data, Int32& offset);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ImageMagick.Bytes : object {
    private static int BufferSize;
    private Byte[] _data;
    private int _length;
    public int Length { get; }
    private Bytes(Byte[] data, int length);
    public int get_Length();
    public static Bytes Create(Stream stream, bool allowEmptyStream);
    [AsyncStateMachineAttribute("ImageMagick.Bytes/<CreateAsync>d__7")]
public static Task`1<Bytes> CreateAsync(Stream stream, CancellationToken cancellationToken);
    public static Bytes FromStreamBuffer(Stream stream);
    public Byte[] GetData();
    private static Byte[] GetData(Stream stream, Int32& length);
    [AsyncStateMachineAttribute("ImageMagick.Bytes/<GetDataAsync>d__11")]
private static Task`1<ValueTuple`2<Byte[], int>> GetDataAsync(Stream stream, CancellationToken cancellationToken);
    private static Byte[] GetDataWithSeekableStream(Stream stream, Int32& length);
    [AsyncStateMachineAttribute("ImageMagick.Bytes/<GetDataWithSeekableStreamAsync>d__13")]
private static Task`1<ValueTuple`2<Byte[], int>> GetDataWithSeekableStreamAsync(Stream stream, CancellationToken cancellationToken);
    private static Byte[] GetDataFromMemoryStream(MemoryStream memStream, Int32& length);
    private static Byte[] GetDataFromMemoryStreamBuffer(MemoryStream memStream, Int32& length);
    private static void CheckLength(long length);
    private static bool IsSupportedLength(long length);
}
[FlagsAttribute]
public enum ImageMagick.Channels : Enum {
    public ulong value__;
    public static Channels Undefined;
    public static Channels Red;
    public static Channels Gray;
    public static Channels Cyan;
    public static Channels Green;
    public static Channels Magenta;
    public static Channels Blue;
    public static Channels Yellow;
    public static Channels Black;
    public static Channels Alpha;
    public static Channels Opacity;
    public static Channels Index;
    public static Channels Composite;
    public static Channels TrueAlpha;
    public static Channels RGB;
    public static Channels RGBA;
    public static Channels CMYK;
    public static Channels CMYKA;
    public static Channels Meta0;
    public static Channels Meta1;
    public static Channels Meta2;
    public static Channels Meta3;
    public static Channels Meta4;
    public static Channels Meta5;
    public static Channels Meta6;
    public static Channels Meta7;
    public static Channels Meta8;
    public static Channels Meta9;
    public static Channels Meta10;
    public static Channels Meta11;
    public static Channels Meta12;
    public static Channels Meta13;
    public static Channels Meta14;
    public static Channels Meta15;
    public static Channels Meta16;
    public static Channels Meta17;
    public static Channels Meta18;
    public static Channels Meta19;
    public static Channels Meta20;
    public static Channels Meta21;
    public static Channels Meta22;
    public static Channels Meta23;
    public static Channels Meta24;
    public static Channels Meta25;
    public static Channels Meta26;
    public static Channels Meta27;
    public static Channels Meta28;
    public static Channels Meta29;
    public static Channels Meta30;
    public static Channels Meta31;
    public static Channels Meta32;
    public static Channels Meta33;
    public static Channels Meta34;
    public static Channels Meta35;
    public static Channels Meta36;
    public static Channels Meta37;
    public static Channels Meta38;
    public static Channels Meta39;
    public static Channels Meta40;
    public static Channels Meta41;
    public static Channels Meta42;
    public static Channels Meta43;
    public static Channels Meta44;
    public static Channels Meta45;
    public static Channels Meta46;
    public static Channels Meta47;
    public static Channels Meta48;
    public static Channels Meta49;
    public static Channels Meta50;
    public static Channels Meta51;
    public static Channels Meta52;
    public static Channels All;
}
public enum ImageMagick.ClassType : Enum {
    public int value__;
    public static ClassType Undefined;
    public static ClassType Direct;
    public static ClassType Pseudo;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ImageMagick.ClipPath : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IXPathNavigable <Path>k__BackingField;
    public string Name { get; }
    public IXPathNavigable Path { get; }
    internal ClipPath(string name, IXPathNavigable path);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual IXPathNavigable get_Path();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ImageMagick.ClipPathReader : object {
    private UInt32 _height;
    private UInt32 _width;
    private PointD[] _first;
    private PointD[] _last;
    private StringBuilder _path;
    private int _index;
    private bool _inSubpath;
    private int _knotCount;
    private ClipPathReader(UInt32 width, UInt32 height);
    public static string Read(UInt32 width, UInt32 height, Byte[] data);
    private string Read(Byte[] data);
    private void AddPath(Byte[] data);
    private void ClosePath();
    private PointD[] CreatePoint(Byte[] data);
    private void SetKnotCount(Byte[] data);
}
public enum ImageMagick.ClipPathUnit : Enum {
    public int value__;
    public static ClipPathUnit Undefined;
    public static ClipPathUnit UserSpace;
    public static ClipPathUnit UserSpaceOnUse;
    public static ClipPathUnit ObjectBoundingBox;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ImageMagick.ColorProfile : ImageProfile {
    private static object _SyncRoot;
    private static Dictionary`2<string, ColorProfile> _profiles;
    [NullableAttribute("2")]
private ColorProfileData _data;
    public static ColorProfile AdobeRGB1998 { get; }
    public static ColorProfile AppleRGB { get; }
    public static ColorProfile CoatedFOGRA39 { get; }
    public static ColorProfile ColorMatchRGB { get; }
    public static ColorProfile SRGB { get; }
    public static ColorProfile USWebCoatedSWOP { get; }
    public ColorSpace ColorSpace { get; }
    [NullableAttribute("2")]
public string Copyright { get; }
    [NullableAttribute("2")]
public string Description { get; }
    [NullableAttribute("2")]
public string Manufacturer { get; }
    [NullableAttribute("2")]
public string Model { get; }
    public ColorProfile(Byte[] data);
    public ColorProfile(Stream stream);
    public ColorProfile(string fileName);
    public ColorProfile(string name, Byte[] data);
    private static ColorProfile();
    public static ColorProfile get_AdobeRGB1998();
    public static ColorProfile get_AppleRGB();
    public static ColorProfile get_CoatedFOGRA39();
    public static ColorProfile get_ColorMatchRGB();
    public static ColorProfile get_SRGB();
    public static ColorProfile get_USWebCoatedSWOP();
    public sealed virtual ColorSpace get_ColorSpace();
    [NullableContextAttribute("2")]
public sealed virtual string get_Copyright();
    [NullableContextAttribute("2")]
public sealed virtual string get_Description();
    [NullableContextAttribute("2")]
public sealed virtual string get_Manufacturer();
    [NullableContextAttribute("2")]
public sealed virtual string get_Model();
    private static ColorProfile Load(string resourcePath, string resourceName);
    [MemberNotNullAttribute("_data")]
private void Initialize();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class ImageMagick.ColorProfileData : object {
    [CompilerGeneratedAttribute]
private ColorSpace <ColorSpace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Copyright>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Manufacturer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Model>k__BackingField;
    public ColorSpace ColorSpace { get; public set; }
    public string Copyright { get; public set; }
    public string Description { get; public set; }
    public string Manufacturer { get; public set; }
    public string Model { get; public set; }
    [CompilerGeneratedAttribute]
public ColorSpace get_ColorSpace();
    [CompilerGeneratedAttribute]
public void set_ColorSpace(ColorSpace value);
    [CompilerGeneratedAttribute]
public string get_Copyright();
    [CompilerGeneratedAttribute]
public void set_Copyright(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_Manufacturer();
    [CompilerGeneratedAttribute]
public void set_Manufacturer(string value);
    [CompilerGeneratedAttribute]
public string get_Model();
    [CompilerGeneratedAttribute]
public void set_Model(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ImageMagick.ColorProfileReader : object {
    private ColorProfileData _data;
    private EndianReader _reader;
    private ColorProfileReader(Byte[] data);
    public static ColorProfileData Read(Byte[] data);
    private static ColorSpace DetermineColorSpace(string colorSpace);
    private void ReadColorSpace();
    private void ReadTagTable();
    [NullableContextAttribute("2")]
private string ReadTag();
    [NullableContextAttribute("2")]
private string ReadTagValue(UInt32 length);
    [NullableContextAttribute("2")]
private string ReadTextDescriptionTypeValue();
    [NullableContextAttribute("2")]
private string ReadTextTypeValue(UInt32 length);
}
public enum ImageMagick.ColorSpace : Enum {
    public int value__;
    public static ColorSpace Undefined;
    public static ColorSpace CMY;
    public static ColorSpace CMYK;
    public static ColorSpace Gray;
    public static ColorSpace HCL;
    public static ColorSpace HCLp;
    public static ColorSpace HSB;
    public static ColorSpace HSI;
    public static ColorSpace HSL;
    public static ColorSpace HSV;
    public static ColorSpace HWB;
    public static ColorSpace Lab;
    public static ColorSpace LCH;
    public static ColorSpace LCHab;
    public static ColorSpace LCHuv;
    public static ColorSpace Log;
    public static ColorSpace LMS;
    public static ColorSpace Luv;
    public static ColorSpace OHTA;
    public static ColorSpace Rec601YCbCr;
    public static ColorSpace Rec709YCbCr;
    public static ColorSpace RGB;
    public static ColorSpace scRGB;
    public static ColorSpace sRGB;
    public static ColorSpace Transparent;
    public static ColorSpace XyY;
    public static ColorSpace XYZ;
    public static ColorSpace YCbCr;
    public static ColorSpace YCC;
    public static ColorSpace YDbDr;
    public static ColorSpace YIQ;
    public static ColorSpace YPbPr;
    public static ColorSpace YUV;
    public static ColorSpace LinearGray;
    public static ColorSpace Jzazbz;
    public static ColorSpace DisplayP3;
    public static ColorSpace Adobe98;
    public static ColorSpace ProPhoto;
    public static ColorSpace Oklab;
    public static ColorSpace Oklch;
}
public enum ImageMagick.ColorTransformMode : Enum {
    public int value__;
    public static ColorTransformMode HighRes;
    public static ColorTransformMode Quantum;
}
public enum ImageMagick.ColorType : Enum {
    public int value__;
    public static ColorType Undefined;
    public static ColorType Bilevel;
    public static ColorType Grayscale;
    public static ColorType GrayscaleAlpha;
    public static ColorType Palette;
    public static ColorType PaletteAlpha;
    public static ColorType TrueColor;
    public static ColorType TrueColorAlpha;
    public static ColorType ColorSeparation;
    public static ColorType ColorSeparationAlpha;
    public static ColorType Optimize;
    public static ColorType PaletteBilevelAlpha;
}
public enum ImageMagick.ComplexOperator : Enum {
    public int value__;
    public static ComplexOperator Undefined;
    public static ComplexOperator Add;
    public static ComplexOperator Conjugate;
    public static ComplexOperator Divide;
    public static ComplexOperator MagnitudePhase;
    public static ComplexOperator Multiply;
    public static ComplexOperator RealImaginary;
    public static ComplexOperator Subtract;
}
public enum ImageMagick.CompositeOperator : Enum {
    public int value__;
    public static CompositeOperator Undefined;
    public static CompositeOperator Alpha;
    public static CompositeOperator Atop;
    public static CompositeOperator Blend;
    public static CompositeOperator Blur;
    public static CompositeOperator Bumpmap;
    public static CompositeOperator ChangeMask;
    public static CompositeOperator Clear;
    public static CompositeOperator ColorBurn;
    public static CompositeOperator ColorDodge;
    public static CompositeOperator Colorize;
    public static CompositeOperator CopyBlack;
    public static CompositeOperator CopyBlue;
    public static CompositeOperator Copy;
    public static CompositeOperator CopyCyan;
    public static CompositeOperator CopyGreen;
    public static CompositeOperator CopyMagenta;
    public static CompositeOperator CopyAlpha;
    public static CompositeOperator CopyRed;
    public static CompositeOperator CopyYellow;
    public static CompositeOperator Darken;
    public static CompositeOperator DarkenIntensity;
    public static CompositeOperator Difference;
    public static CompositeOperator Displace;
    public static CompositeOperator Dissolve;
    public static CompositeOperator Distort;
    public static CompositeOperator DivideDst;
    public static CompositeOperator DivideSrc;
    public static CompositeOperator DstAtop;
    public static CompositeOperator Dst;
    public static CompositeOperator DstIn;
    public static CompositeOperator DstOut;
    public static CompositeOperator DstOver;
    public static CompositeOperator Exclusion;
    public static CompositeOperator HardLight;
    public static CompositeOperator HardMix;
    public static CompositeOperator Hue;
    public static CompositeOperator In;
    public static CompositeOperator Intensity;
    public static CompositeOperator Lighten;
    public static CompositeOperator LightenIntensity;
    public static CompositeOperator LinearBurn;
    public static CompositeOperator LinearDodge;
    public static CompositeOperator LinearLight;
    public static CompositeOperator Luminize;
    public static CompositeOperator Mathematics;
    public static CompositeOperator MinusDst;
    public static CompositeOperator MinusSrc;
    public static CompositeOperator Modulate;
    public static CompositeOperator ModulusAdd;
    public static CompositeOperator ModulusSubtract;
    public static CompositeOperator Multiply;
    public static CompositeOperator No;
    public static CompositeOperator Out;
    public static CompositeOperator Over;
    public static CompositeOperator Overlay;
    public static CompositeOperator PegtopLight;
    public static CompositeOperator PinLight;
    public static CompositeOperator Plus;
    public static CompositeOperator Replace;
    public static CompositeOperator Saturate;
    public static CompositeOperator Screen;
    public static CompositeOperator SoftLight;
    public static CompositeOperator SrcAtop;
    public static CompositeOperator Src;
    public static CompositeOperator SrcIn;
    public static CompositeOperator SrcOut;
    public static CompositeOperator SrcOver;
    public static CompositeOperator Threshold;
    public static CompositeOperator VividLight;
    public static CompositeOperator Xor;
    public static CompositeOperator Stereo;
    public static CompositeOperator Freeze;
    public static CompositeOperator Interpolate;
    public static CompositeOperator Negate;
    public static CompositeOperator Reflect;
    public static CompositeOperator SoftBurn;
    public static CompositeOperator SoftDodge;
    public static CompositeOperator Stamp;
    public static CompositeOperator RMSE;
    public static CompositeOperator SaliencyBlend;
    public static CompositeOperator SeamlessBlend;
}
public enum ImageMagick.CompressionMethod : Enum {
    public int value__;
    public static CompressionMethod Undefined;
    public static CompressionMethod B44A;
    public static CompressionMethod B44;
    public static CompressionMethod BZip;
    public static CompressionMethod DXT1;
    public static CompressionMethod DXT3;
    public static CompressionMethod DXT5;
    public static CompressionMethod Fax;
    public static CompressionMethod Group4;
    public static CompressionMethod JBIG1;
    public static CompressionMethod JBIG2;
    public static CompressionMethod JPEG2000;
    public static CompressionMethod JPEG;
    public static CompressionMethod LosslessJPEG;
    public static CompressionMethod LZMA;
    public static CompressionMethod LZW;
    public static CompressionMethod NoCompression;
    public static CompressionMethod Piz;
    public static CompressionMethod Pxr24;
    public static CompressionMethod RLE;
    public static CompressionMethod Zip;
    public static CompressionMethod ZipS;
    public static CompressionMethod Zstd;
    public static CompressionMethod WebP;
    public static CompressionMethod DWAA;
    public static CompressionMethod DWAB;
    public static CompressionMethod BC7;
    public static CompressionMethod BC5;
    public static CompressionMethod LERC;
}
[NullableContextAttribute("1")]
public interface ImageMagick.Configuration.IConfigurationFile {
    public string FileName { get; }
    public string Data { get; public set; }
    public abstract virtual string get_FileName();
    public abstract virtual string get_Data();
    public abstract virtual void set_Data(string value);
}
[NullableContextAttribute("1")]
public interface ImageMagick.Configuration.IConfigurationFiles {
    public IEnumerable`1<IConfigurationFile> All { get; }
    public IConfigurationFiles Default { get; }
    public IConfigurationFile Colors { get; }
    public IConfigurationFile Configure { get; }
    public IConfigurationFile Delegates { get; }
    public IConfigurationFile English { get; }
    public IConfigurationFile Locale { get; }
    public IConfigurationFile Log { get; }
    public IConfigurationFile Policy { get; }
    public IConfigurationFile Thresholds { get; }
    public IConfigurationFile Type { get; }
    public IConfigurationFile TypeGhostscript { get; }
    public abstract virtual IEnumerable`1<IConfigurationFile> get_All();
    public abstract virtual IConfigurationFiles get_Default();
    public abstract virtual IConfigurationFile get_Colors();
    public abstract virtual IConfigurationFile get_Configure();
    public abstract virtual IConfigurationFile get_Delegates();
    public abstract virtual IConfigurationFile get_English();
    public abstract virtual IConfigurationFile get_Locale();
    public abstract virtual IConfigurationFile get_Log();
    public abstract virtual IConfigurationFile get_Policy();
    public abstract virtual IConfigurationFile get_Thresholds();
    public abstract virtual IConfigurationFile get_Type();
    public abstract virtual IConfigurationFile get_TypeGhostscript();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ImageMagick.Density : object {
    [CompilerGeneratedAttribute]
private DensityUnit <Units>k__BackingField;
    [CompilerGeneratedAttribute]
private double <X>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Y>k__BackingField;
    public DensityUnit Units { get; private set; }
    public double X { get; private set; }
    public double Y { get; private set; }
    public Density(double xy);
    public Density(double xy, DensityUnit units);
    public Density(double x, double y);
    public Density(double x, double y, DensityUnit units);
    public Density(string value);
    [CompilerGeneratedAttribute]
public DensityUnit get_Units();
    [CompilerGeneratedAttribute]
private void set_Units(DensityUnit value);
    [CompilerGeneratedAttribute]
public double get_X();
    [CompilerGeneratedAttribute]
private void set_X(double value);
    [CompilerGeneratedAttribute]
public double get_Y();
    [CompilerGeneratedAttribute]
private void set_Y(double value);
    public Density ChangeUnits(DensityUnit units);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(Density other);
    public virtual int GetHashCode();
    public virtual string ToString();
    public string ToString(DensityUnit units);
    private static string ToString(double x, double y, DensityUnit units);
    private void Initialize(string value);
}
public enum ImageMagick.DensityUnit : Enum {
    public int value__;
    public static DensityUnit Undefined;
    public static DensityUnit PixelsPerInch;
    public static DensityUnit PixelsPerCentimeter;
}
public enum ImageMagick.DistortMethod : Enum {
    public int value__;
    public static DistortMethod Undefined;
    public static DistortMethod Affine;
    public static DistortMethod AffineProjection;
    public static DistortMethod ScaleRotateTranslate;
    public static DistortMethod Perspective;
    public static DistortMethod PerspectiveProjection;
    public static DistortMethod BilinearForward;
    public static DistortMethod BilinearReverse;
    public static DistortMethod Polynomial;
    public static DistortMethod Arc;
    public static DistortMethod Polar;
    public static DistortMethod DePolar;
    public static DistortMethod Cylinder2Plane;
    public static DistortMethod Plane2Cylinder;
    public static DistortMethod Barrel;
    public static DistortMethod BarrelInverse;
    public static DistortMethod Shepards;
    public static DistortMethod Resize;
    public static DistortMethod Sentinel;
    public static DistortMethod RigidAffine;
}
public enum ImageMagick.DitherMethod : Enum {
    public int value__;
    public static DitherMethod Undefined;
    public static DitherMethod No;
    public static DitherMethod Riemersma;
    public static DitherMethod FloydSteinberg;
}
public interface ImageMagick.Drawing.IDrawable {
}
public interface ImageMagick.Drawing.IDrawableAffine {
    public double ScaleX { get; }
    public double ScaleY { get; }
    public double ShearX { get; }
    public double ShearY { get; }
    public double TranslateX { get; }
    public double TranslateY { get; }
    public abstract virtual double get_ScaleX();
    public abstract virtual double get_ScaleY();
    public abstract virtual double get_ShearX();
    public abstract virtual double get_ShearY();
    public abstract virtual double get_TranslateX();
    public abstract virtual double get_TranslateY();
    public abstract virtual void Reset();
    public abstract virtual void TransformOrigin(double translateX, double translateY);
    public abstract virtual void TransformRotation(double angle);
    public abstract virtual void TransformScale(double scaleX, double scaleY);
    public abstract virtual void TransformSkewX(double skewX);
    public abstract virtual void TransformSkewY(double skewY);
}
public interface ImageMagick.Drawing.IDrawableAlpha {
    public double X { get; }
    public double Y { get; }
    public PaintMethod PaintMethod { get; }
    public abstract virtual double get_X();
    public abstract virtual double get_Y();
    public abstract virtual PaintMethod get_PaintMethod();
}
public interface ImageMagick.Drawing.IDrawableArc {
    public double StartX { get; }
    public double StartY { get; }
    public double EndX { get; }
    public double EndY { get; }
    public double EndDegrees { get; }
    public double StartDegrees { get; }
    public abstract virtual double get_StartX();
    public abstract virtual double get_StartY();
    public abstract virtual double get_EndX();
    public abstract virtual double get_EndY();
    public abstract virtual double get_EndDegrees();
    public abstract virtual double get_StartDegrees();
}
[NullableContextAttribute("1")]
public interface ImageMagick.Drawing.IDrawableBezier {
    public IReadOnlyList`1<PointD> Coordinates { get; }
    public abstract virtual IReadOnlyList`1<PointD> get_Coordinates();
}
public interface ImageMagick.Drawing.IDrawableBorderColor`1 {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> Color { get; }
    public abstract virtual IMagickColor`1<TQuantumType> get_Color();
}
public interface ImageMagick.Drawing.IDrawableCircle {
    public double OriginX { get; }
    public double OriginY { get; }
    public double PerimeterX { get; }
    public double PerimeterY { get; }
    public abstract virtual double get_OriginX();
    public abstract virtual double get_OriginY();
    public abstract virtual double get_PerimeterX();
    public abstract virtual double get_PerimeterY();
}
[NullableContextAttribute("1")]
public interface ImageMagick.Drawing.IDrawableClipPath {
    public string ClipPath { get; }
    public abstract virtual string get_ClipPath();
}
public interface ImageMagick.Drawing.IDrawableClipRule {
    public FillRule FillRule { get; }
    public abstract virtual FillRule get_FillRule();
}
public interface ImageMagick.Drawing.IDrawableClipUnits {
    public ClipPathUnit Units { get; }
    public abstract virtual ClipPathUnit get_Units();
}
public interface ImageMagick.Drawing.IDrawableColor {
    public double X { get; }
    public double Y { get; }
    public PaintMethod PaintMethod { get; }
    public abstract virtual double get_X();
    public abstract virtual double get_Y();
    public abstract virtual PaintMethod get_PaintMethod();
}
public interface ImageMagick.Drawing.IDrawableComposite`1 {
    public double X { get; }
    public double Y { get; }
    public double Width { get; }
    public double Height { get; }
    public CompositeOperator Compose { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickImage`1<TQuantumType> Image { get; }
    public abstract virtual double get_X();
    public abstract virtual double get_Y();
    public abstract virtual double get_Width();
    public abstract virtual double get_Height();
    public abstract virtual CompositeOperator get_Compose();
    public abstract virtual IMagickImage`1<TQuantumType> get_Image();
}
public interface ImageMagick.Drawing.IDrawableDensity {
    public PointD Density { get; }
    public abstract virtual PointD get_Density();
}
public interface ImageMagick.Drawing.IDrawableEllipse {
    public double OriginX { get; }
    public double OriginY { get; }
    public double RadiusX { get; }
    public double RadiusY { get; }
    public double StartDegrees { get; }
    public double EndDegrees { get; }
    public abstract virtual double get_OriginX();
    public abstract virtual double get_OriginY();
    public abstract virtual double get_RadiusX();
    public abstract virtual double get_RadiusY();
    public abstract virtual double get_StartDegrees();
    public abstract virtual double get_EndDegrees();
}
public interface ImageMagick.Drawing.IDrawableFillColor`1 {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> Color { get; }
    public abstract virtual IMagickColor`1<TQuantumType> get_Color();
}
public interface ImageMagick.Drawing.IDrawableFillOpacity {
    public Percentage Opacity { get; }
    public abstract virtual Percentage get_Opacity();
}
[NullableContextAttribute("1")]
public interface ImageMagick.Drawing.IDrawableFillPatternUrl {
    public string Url { get; }
    public abstract virtual string get_Url();
}
public interface ImageMagick.Drawing.IDrawableFillRule {
    public FillRule FillRule { get; }
    public abstract virtual FillRule get_FillRule();
}
[NullableContextAttribute("1")]
public interface ImageMagick.Drawing.IDrawableFont {
    public string Family { get; }
    public FontStyleType Style { get; }
    public FontWeight Weight { get; }
    public FontStretch Stretch { get; }
    public abstract virtual string get_Family();
    public abstract virtual FontStyleType get_Style();
    public abstract virtual FontWeight get_Weight();
    public abstract virtual FontStretch get_Stretch();
}
public interface ImageMagick.Drawing.IDrawableFontPointSize {
    public double PointSize { get; }
    public abstract virtual double get_PointSize();
}
public interface ImageMagick.Drawing.IDrawableGravity {
    public Gravity Gravity { get; }
    public abstract virtual Gravity get_Gravity();
}
public interface ImageMagick.Drawing.IDrawableLine {
    public double StartX { get; }
    public double StartY { get; }
    public double EndX { get; }
    public double EndY { get; }
    public abstract virtual double get_StartX();
    public abstract virtual double get_StartY();
    public abstract virtual double get_EndX();
    public abstract virtual double get_EndY();
}
[NullableContextAttribute("1")]
public interface ImageMagick.Drawing.IDrawablePath {
    public IReadOnlyList`1<IPath> Paths { get; }
    public abstract virtual IReadOnlyList`1<IPath> get_Paths();
}
public interface ImageMagick.Drawing.IDrawablePoint {
    public double X { get; }
    public double Y { get; }
    public abstract virtual double get_X();
    public abstract virtual double get_Y();
}
[NullableContextAttribute("1")]
public interface ImageMagick.Drawing.IDrawablePolygon {
    public IReadOnlyList`1<PointD> Coordinates { get; }
    public abstract virtual IReadOnlyList`1<PointD> get_Coordinates();
}
[NullableContextAttribute("1")]
public interface ImageMagick.Drawing.IDrawablePolyline {
    public IReadOnlyList`1<PointD> Coordinates { get; }
    public abstract virtual IReadOnlyList`1<PointD> get_Coordinates();
}
public interface ImageMagick.Drawing.IDrawablePopClipPath {
}
public interface ImageMagick.Drawing.IDrawablePopGraphicContext {
}
public interface ImageMagick.Drawing.IDrawablePopPattern {
}
[NullableContextAttribute("1")]
public interface ImageMagick.Drawing.IDrawablePushClipPath {
    public string ClipPath { get; }
    public abstract virtual string get_ClipPath();
}
public interface ImageMagick.Drawing.IDrawablePushGraphicContext {
}
[NullableContextAttribute("1")]
public interface ImageMagick.Drawing.IDrawablePushPattern {
    public string Id { get; }
    public double X { get; }
    public double Y { get; }
    public double Width { get; }
    public double Height { get; }
    public abstract virtual string get_Id();
    public abstract virtual double get_X();
    public abstract virtual double get_Y();
    public abstract virtual double get_Width();
    public abstract virtual double get_Height();
}
public interface ImageMagick.Drawing.IDrawableRectangle {
    public double UpperLeftX { get; }
    public double UpperLeftY { get; }
    public double LowerRightX { get; }
    public double LowerRightY { get; }
    public abstract virtual double get_UpperLeftX();
    public abstract virtual double get_UpperLeftY();
    public abstract virtual double get_LowerRightX();
    public abstract virtual double get_LowerRightY();
}
public interface ImageMagick.Drawing.IDrawableRotation {
    public double Angle { get; }
    public abstract virtual double get_Angle();
}
public interface ImageMagick.Drawing.IDrawableRoundRectangle {
    public double UpperLeftX { get; }
    public double UpperLeftY { get; }
    public double LowerRightX { get; }
    public double LowerRightY { get; }
    public double CornerWidth { get; }
    public double CornerHeight { get; }
    public abstract virtual double get_UpperLeftX();
    public abstract virtual double get_UpperLeftY();
    public abstract virtual double get_LowerRightX();
    public abstract virtual double get_LowerRightY();
    public abstract virtual double get_CornerWidth();
    public abstract virtual double get_CornerHeight();
}
[NullableContextAttribute("1")]
[DrawablesAttribute]
public interface ImageMagick.Drawing.IDrawables`1 {
    public abstract virtual IDrawables`1<TQuantumType> Composite(double x, double y, CompositeOperator compose, IMagickImage`1<TQuantumType> image);
    public abstract virtual IDrawables`1<TQuantumType> Density(double density);
    public abstract virtual IDrawables`1<TQuantumType> Draw(IMagickImage`1<TQuantumType> image);
    public abstract virtual IDrawables`1<TQuantumType> Font(string family);
    public abstract virtual ITypeMetric FontTypeMetrics(string text);
    public abstract virtual ITypeMetric FontTypeMetrics(string text, bool ignoreNewlines);
    public abstract virtual IPaths`1<TQuantumType> Paths();
    public abstract virtual IDrawables`1<TQuantumType> Affine(double scaleX, double scaleY, double shearX, double shearY, double translateX, double translateY);
    public abstract virtual IDrawables`1<TQuantumType> Alpha(double x, double y, PaintMethod paintMethod);
    public abstract virtual IDrawables`1<TQuantumType> Arc(double startX, double startY, double endX, double endY, double endDegrees, double startDegrees);
    public abstract virtual IDrawables`1<TQuantumType> Bezier(PointD[] coordinates);
    public abstract virtual IDrawables`1<TQuantumType> Bezier(IEnumerable`1<PointD> coordinates);
    public abstract virtual IDrawables`1<TQuantumType> BorderColor(IMagickColor`1<TQuantumType> color);
    public abstract virtual IDrawables`1<TQuantumType> Circle(double originX, double originY, double perimeterX, double perimeterY);
    public abstract virtual IDrawables`1<TQuantumType> ClipPath(string clipPath);
    public abstract virtual IDrawables`1<TQuantumType> ClipRule(FillRule fillRule);
    public abstract virtual IDrawables`1<TQuantumType> ClipUnits(ClipPathUnit units);
    public abstract virtual IDrawables`1<TQuantumType> Color(double x, double y, PaintMethod paintMethod);
    public abstract virtual IDrawables`1<TQuantumType> Composite(double x, double y, double width, double height, CompositeOperator compose, IMagickImage`1<TQuantumType> image);
    public abstract virtual IDrawables`1<TQuantumType> Density(PointD density);
    public abstract virtual IDrawables`1<TQuantumType> Ellipse(double originX, double originY, double radiusX, double radiusY, double startDegrees, double endDegrees);
    public abstract virtual IDrawables`1<TQuantumType> FillColor(IMagickColor`1<TQuantumType> color);
    public abstract virtual IDrawables`1<TQuantumType> FillOpacity(Percentage opacity);
    public abstract virtual IDrawables`1<TQuantumType> FillPatternUrl(string url);
    public abstract virtual IDrawables`1<TQuantumType> FillRule(FillRule fillRule);
    public abstract virtual IDrawables`1<TQuantumType> Font(string family, FontStyleType style, FontWeight weight, FontStretch stretch);
    public abstract virtual IDrawables`1<TQuantumType> FontPointSize(double pointSize);
    public abstract virtual IDrawables`1<TQuantumType> Gravity(Gravity gravity);
    public abstract virtual IDrawables`1<TQuantumType> Line(double startX, double startY, double endX, double endY);
    public abstract virtual IDrawables`1<TQuantumType> Path(IPath[] paths);
    public abstract virtual IDrawables`1<TQuantumType> Path(IEnumerable`1<IPath> paths);
    public abstract virtual IDrawables`1<TQuantumType> Point(double x, double y);
    public abstract virtual IDrawables`1<TQuantumType> Polygon(PointD[] coordinates);
    public abstract virtual IDrawables`1<TQuantumType> Polygon(IEnumerable`1<PointD> coordinates);
    public abstract virtual IDrawables`1<TQuantumType> Polyline(PointD[] coordinates);
    public abstract virtual IDrawables`1<TQuantumType> Polyline(IEnumerable`1<PointD> coordinates);
    public abstract virtual IDrawables`1<TQuantumType> PopClipPath();
    public abstract virtual IDrawables`1<TQuantumType> PopGraphicContext();
    public abstract virtual IDrawables`1<TQuantumType> PopPattern();
    public abstract virtual IDrawables`1<TQuantumType> PushClipPath(string clipPath);
    public abstract virtual IDrawables`1<TQuantumType> PushGraphicContext();
    public abstract virtual IDrawables`1<TQuantumType> PushPattern(string id, double x, double y, double width, double height);
    public abstract virtual IDrawables`1<TQuantumType> Rectangle(double upperLeftX, double upperLeftY, double lowerRightX, double lowerRightY);
    public abstract virtual IDrawables`1<TQuantumType> Rotation(double angle);
    public abstract virtual IDrawables`1<TQuantumType> RoundRectangle(double upperLeftX, double upperLeftY, double lowerRightX, double lowerRightY, double cornerWidth, double cornerHeight);
    public abstract virtual IDrawables`1<TQuantumType> Scaling(double x, double y);
    public abstract virtual IDrawables`1<TQuantumType> SkewX(double angle);
    public abstract virtual IDrawables`1<TQuantumType> SkewY(double angle);
    public abstract virtual IDrawables`1<TQuantumType> DisableStrokeAntialias();
    public abstract virtual IDrawables`1<TQuantumType> EnableStrokeAntialias();
    public abstract virtual IDrawables`1<TQuantumType> StrokeColor(IMagickColor`1<TQuantumType> color);
    public abstract virtual IDrawables`1<TQuantumType> StrokeDashArray(Double[] dash);
    public abstract virtual IDrawables`1<TQuantumType> StrokeDashArray(IEnumerable`1<double> dash);
    public abstract virtual IDrawables`1<TQuantumType> StrokeDashOffset(double offset);
    public abstract virtual IDrawables`1<TQuantumType> StrokeLineCap(LineCap lineCap);
    public abstract virtual IDrawables`1<TQuantumType> StrokeLineJoin(LineJoin lineJoin);
    public abstract virtual IDrawables`1<TQuantumType> StrokeMiterLimit(UInt32 miterlimit);
    public abstract virtual IDrawables`1<TQuantumType> StrokeOpacity(Percentage opacity);
    public abstract virtual IDrawables`1<TQuantumType> StrokePatternUrl(string url);
    public abstract virtual IDrawables`1<TQuantumType> StrokeWidth(double width);
    public abstract virtual IDrawables`1<TQuantumType> Text(double x, double y, string value);
    public abstract virtual IDrawables`1<TQuantumType> TextAlignment(TextAlignment alignment);
    public abstract virtual IDrawables`1<TQuantumType> DisableTextAntialias();
    public abstract virtual IDrawables`1<TQuantumType> EnableTextAntialias();
    public abstract virtual IDrawables`1<TQuantumType> TextDecoration(TextDecoration decoration);
    public abstract virtual IDrawables`1<TQuantumType> TextDirection(TextDirection direction);
    public abstract virtual IDrawables`1<TQuantumType> TextEncoding(Encoding encoding);
    public abstract virtual IDrawables`1<TQuantumType> TextInterlineSpacing(double spacing);
    public abstract virtual IDrawables`1<TQuantumType> TextInterwordSpacing(double spacing);
    public abstract virtual IDrawables`1<TQuantumType> TextKerning(double kerning);
    public abstract virtual IDrawables`1<TQuantumType> TextUnderColor(IMagickColor`1<TQuantumType> color);
    public abstract virtual IDrawables`1<TQuantumType> Translation(double x, double y);
    public abstract virtual IDrawables`1<TQuantumType> Viewbox(double upperLeftX, double upperLeftY, double lowerRightX, double lowerRightY);
}
public interface ImageMagick.Drawing.IDrawableScaling {
    public double X { get; }
    public double Y { get; }
    public abstract virtual double get_X();
    public abstract virtual double get_Y();
}
public interface ImageMagick.Drawing.IDrawableSkewX {
    public double Angle { get; }
    public abstract virtual double get_Angle();
}
public interface ImageMagick.Drawing.IDrawableSkewY {
    public double Angle { get; }
    public abstract virtual double get_Angle();
}
public interface ImageMagick.Drawing.IDrawableStrokeAntialias {
    public bool IsEnabled { get; }
    public abstract virtual bool get_IsEnabled();
}
public interface ImageMagick.Drawing.IDrawableStrokeColor`1 {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> Color { get; }
    public abstract virtual IMagickColor`1<TQuantumType> get_Color();
}
[NullableContextAttribute("1")]
public interface ImageMagick.Drawing.IDrawableStrokeDashArray {
    public IReadOnlyList`1<double> Dash { get; }
    public abstract virtual IReadOnlyList`1<double> get_Dash();
}
public interface ImageMagick.Drawing.IDrawableStrokeDashOffset {
    public double Offset { get; }
    public abstract virtual double get_Offset();
}
public interface ImageMagick.Drawing.IDrawableStrokeLineCap {
    public LineCap LineCap { get; }
    public abstract virtual LineCap get_LineCap();
}
public interface ImageMagick.Drawing.IDrawableStrokeLineJoin {
    public LineJoin LineJoin { get; }
    public abstract virtual LineJoin get_LineJoin();
}
public interface ImageMagick.Drawing.IDrawableStrokeMiterLimit {
    public UInt32 Miterlimit { get; }
    public abstract virtual UInt32 get_Miterlimit();
}
public interface ImageMagick.Drawing.IDrawableStrokeOpacity {
    public Percentage Opacity { get; }
    public abstract virtual Percentage get_Opacity();
}
[NullableContextAttribute("1")]
public interface ImageMagick.Drawing.IDrawableStrokePatternUrl {
    public string Url { get; }
    public abstract virtual string get_Url();
}
public interface ImageMagick.Drawing.IDrawableStrokeWidth {
    public double Width { get; }
    public abstract virtual double get_Width();
}
[NullableContextAttribute("1")]
public interface ImageMagick.Drawing.IDrawableText {
    public double X { get; }
    public double Y { get; }
    public string Value { get; }
    public abstract virtual double get_X();
    public abstract virtual double get_Y();
    public abstract virtual string get_Value();
}
public interface ImageMagick.Drawing.IDrawableTextAlignment {
    public TextAlignment Alignment { get; }
    public abstract virtual TextAlignment get_Alignment();
}
public interface ImageMagick.Drawing.IDrawableTextAntialias {
    public bool IsEnabled { get; }
    public abstract virtual bool get_IsEnabled();
}
public interface ImageMagick.Drawing.IDrawableTextDecoration {
    public TextDecoration Decoration { get; }
    public abstract virtual TextDecoration get_Decoration();
}
public interface ImageMagick.Drawing.IDrawableTextDirection {
    public TextDirection Direction { get; }
    public abstract virtual TextDirection get_Direction();
}
[NullableContextAttribute("1")]
public interface ImageMagick.Drawing.IDrawableTextEncoding {
    public Encoding Encoding { get; }
    public abstract virtual Encoding get_Encoding();
}
public interface ImageMagick.Drawing.IDrawableTextInterlineSpacing {
    public double Spacing { get; }
    public abstract virtual double get_Spacing();
}
public interface ImageMagick.Drawing.IDrawableTextInterwordSpacing {
    public double Spacing { get; }
    public abstract virtual double get_Spacing();
}
public interface ImageMagick.Drawing.IDrawableTextKerning {
    public double Kerning { get; }
    public abstract virtual double get_Kerning();
}
public interface ImageMagick.Drawing.IDrawableTextUnderColor`1 {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> Color { get; }
    public abstract virtual IMagickColor`1<TQuantumType> get_Color();
}
public interface ImageMagick.Drawing.IDrawableTranslation {
    public double X { get; }
    public double Y { get; }
    public abstract virtual double get_X();
    public abstract virtual double get_Y();
}
public interface ImageMagick.Drawing.IDrawableViewbox {
    public double UpperLeftX { get; }
    public double UpperLeftY { get; }
    public double LowerRightX { get; }
    public double LowerRightY { get; }
    public abstract virtual double get_UpperLeftX();
    public abstract virtual double get_UpperLeftY();
    public abstract virtual double get_LowerRightX();
    public abstract virtual double get_LowerRightY();
}
public interface ImageMagick.Drawing.IPath {
}
[NullableContextAttribute("1")]
public interface ImageMagick.Drawing.IPathArc {
    public IReadOnlyList`1<PathArc> Coordinates { get; }
    public abstract virtual IReadOnlyList`1<PathArc> get_Coordinates();
}
public interface ImageMagick.Drawing.IPathClose {
}
public interface ImageMagick.Drawing.IPathCurveTo {
    public PointD ControlPointStart { get; }
    public PointD ControlPointEnd { get; }
    public PointD End { get; }
    public abstract virtual PointD get_ControlPointStart();
    public abstract virtual PointD get_ControlPointEnd();
    public abstract virtual PointD get_End();
}
[NullableContextAttribute("1")]
public interface ImageMagick.Drawing.IPathLineTo {
    public IReadOnlyList`1<PointD> Coordinates { get; }
    public abstract virtual IReadOnlyList`1<PointD> get_Coordinates();
}
public interface ImageMagick.Drawing.IPathLineToHorizontal {
    public double X { get; }
    public abstract virtual double get_X();
}
public interface ImageMagick.Drawing.IPathLineToVertical {
    public double Y { get; }
    public abstract virtual double get_Y();
}
public interface ImageMagick.Drawing.IPathMoveTo {
    public PointD Coordinate { get; }
    public abstract virtual PointD get_Coordinate();
}
public interface ImageMagick.Drawing.IPathQuadraticCurveTo {
    public PointD ControlPoint { get; }
    public PointD End { get; }
    public abstract virtual PointD get_ControlPoint();
    public abstract virtual PointD get_End();
}
[NullableContextAttribute("1")]
[PathsAttribute]
public interface ImageMagick.Drawing.IPaths`1 {
    public abstract virtual IPaths`1<TQuantumType> CurveToAbs(double x1, double y1, double x2, double y2, double x, double y);
    public abstract virtual IPaths`1<TQuantumType> CurveToRel(double x1, double y1, double x2, double y2, double x, double y);
    public abstract virtual IDrawables`1<TQuantumType> Drawables();
    public abstract virtual IPaths`1<TQuantumType> LineToAbs(double x, double y);
    public abstract virtual IPaths`1<TQuantumType> LineToRel(double x, double y);
    public abstract virtual IPaths`1<TQuantumType> MoveToAbs(double x, double y);
    public abstract virtual IPaths`1<TQuantumType> MoveToRel(double x, double y);
    public abstract virtual IPaths`1<TQuantumType> QuadraticCurveToAbs(double x1, double y1, double x, double y);
    public abstract virtual IPaths`1<TQuantumType> QuadraticCurveToRel(double x1, double y1, double x, double y);
    public abstract virtual IPaths`1<TQuantumType> SmoothCurveToAbs(double x2, double y2, double x, double y);
    public abstract virtual IPaths`1<TQuantumType> SmoothCurveToRel(double x2, double y2, double x, double y);
    public abstract virtual IPaths`1<TQuantumType> SmoothQuadraticCurveToAbs(double x, double y);
    public abstract virtual IPaths`1<TQuantumType> SmoothQuadraticCurveToRel(double x, double y);
    public abstract virtual IPaths`1<TQuantumType> ArcAbs(PathArc[] coordinates);
    public abstract virtual IPaths`1<TQuantumType> ArcAbs(IEnumerable`1<PathArc> coordinates);
    public abstract virtual IPaths`1<TQuantumType> ArcRel(PathArc[] coordinates);
    public abstract virtual IPaths`1<TQuantumType> ArcRel(IEnumerable`1<PathArc> coordinates);
    public abstract virtual IPaths`1<TQuantumType> Close();
    public abstract virtual IPaths`1<TQuantumType> CurveToAbs(PointD controlPointStart, PointD controlPointEnd, PointD end);
    public abstract virtual IPaths`1<TQuantumType> CurveToRel(PointD controlPointStart, PointD controlPointEnd, PointD end);
    public abstract virtual IPaths`1<TQuantumType> LineToAbs(PointD[] coordinates);
    public abstract virtual IPaths`1<TQuantumType> LineToAbs(IEnumerable`1<PointD> coordinates);
    public abstract virtual IPaths`1<TQuantumType> LineToRel(PointD[] coordinates);
    public abstract virtual IPaths`1<TQuantumType> LineToRel(IEnumerable`1<PointD> coordinates);
    public abstract virtual IPaths`1<TQuantumType> LineToHorizontalAbs(double x);
    public abstract virtual IPaths`1<TQuantumType> LineToHorizontalRel(double x);
    public abstract virtual IPaths`1<TQuantumType> LineToVerticalAbs(double y);
    public abstract virtual IPaths`1<TQuantumType> LineToVerticalRel(double y);
    public abstract virtual IPaths`1<TQuantumType> MoveToAbs(PointD coordinate);
    public abstract virtual IPaths`1<TQuantumType> MoveToRel(PointD coordinate);
    public abstract virtual IPaths`1<TQuantumType> QuadraticCurveToAbs(PointD controlPoint, PointD end);
    public abstract virtual IPaths`1<TQuantumType> QuadraticCurveToRel(PointD controlPoint, PointD end);
    public abstract virtual IPaths`1<TQuantumType> SmoothCurveToAbs(PointD controlPoint, PointD end);
    public abstract virtual IPaths`1<TQuantumType> SmoothCurveToRel(PointD controlPoint, PointD end);
    public abstract virtual IPaths`1<TQuantumType> SmoothQuadraticCurveToAbs(PointD end);
    public abstract virtual IPaths`1<TQuantumType> SmoothQuadraticCurveToRel(PointD end);
}
public interface ImageMagick.Drawing.IPathSmoothCurveTo {
    public PointD ControlPoint { get; }
    public PointD End { get; }
    public abstract virtual PointD get_ControlPoint();
    public abstract virtual PointD get_End();
}
public interface ImageMagick.Drawing.IPathSmoothQuadraticCurveTo {
    public PointD End { get; }
    public abstract virtual PointD get_End();
}
public class ImageMagick.Drawing.PathArc : object {
    [CompilerGeneratedAttribute]
private double <X>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Y>k__BackingField;
    [CompilerGeneratedAttribute]
private double <RadiusX>k__BackingField;
    [CompilerGeneratedAttribute]
private double <RadiusY>k__BackingField;
    [CompilerGeneratedAttribute]
private double <RotationX>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseLargeArc>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseSweep>k__BackingField;
    public double X { get; public set; }
    public double Y { get; public set; }
    public double RadiusX { get; public set; }
    public double RadiusY { get; public set; }
    public double RotationX { get; public set; }
    public bool UseLargeArc { get; public set; }
    public bool UseSweep { get; public set; }
    public PathArc(double x, double y, double radiusX, double radiusY, double rotationX, bool useLargeArc, bool useSweep);
    [CompilerGeneratedAttribute]
public double get_X();
    [CompilerGeneratedAttribute]
public void set_X(double value);
    [CompilerGeneratedAttribute]
public double get_Y();
    [CompilerGeneratedAttribute]
public void set_Y(double value);
    [CompilerGeneratedAttribute]
public double get_RadiusX();
    [CompilerGeneratedAttribute]
public void set_RadiusX(double value);
    [CompilerGeneratedAttribute]
public double get_RadiusY();
    [CompilerGeneratedAttribute]
public void set_RadiusY(double value);
    [CompilerGeneratedAttribute]
public double get_RotationX();
    [CompilerGeneratedAttribute]
public void set_RotationX(double value);
    [CompilerGeneratedAttribute]
public bool get_UseLargeArc();
    [CompilerGeneratedAttribute]
public void set_UseLargeArc(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseSweep();
    [CompilerGeneratedAttribute]
public void set_UseSweep(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ImageMagick.EightBimProfile : ImageProfile {
    private static short ExifProfileId;
    private static short IptcProfileId;
    private static short XmpProfileId;
    private UInt32 _height;
    private UInt32 _width;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Collection`1<IEightBimValue> _values;
    public IReadOnlyList`1<IClipPath> ClipPaths { get; }
    public IReadOnlyList`1<IEightBimValue> Values { get; }
    public EightBimProfile(Byte[] data);
    public EightBimProfile(string fileName);
    public EightBimProfile(Stream stream);
    public EightBimProfile(IMagickImage image, Byte[] data);
    private static EightBimProfile();
    public sealed virtual IReadOnlyList`1<IClipPath> get_ClipPaths();
    public sealed virtual IReadOnlyList`1<IEightBimValue> get_Values();
    [NullableContextAttribute("2")]
public sealed virtual IExifProfile GetExifProfile();
    [NullableContextAttribute("2")]
public sealed virtual IIptcProfile GetIptcProfile();
    [NullableContextAttribute("2")]
public sealed virtual IXmpProfile GetXmpProfile();
    [NullableContextAttribute("2")]
public sealed virtual void SetExifProfile(IExifProfile profile);
    [NullableContextAttribute("2")]
public sealed virtual void SetIptcProfile(IIptcProfile profile);
    [NullableContextAttribute("2")]
public sealed virtual void SetXmpProfile(IXmpProfile profile);
    protected virtual void UpdateData();
    private ClipPath CreateClipPath(IEightBimValue value);
    [NullableContextAttribute("2")]
private IEightBimValue FindValue(int id);
    private string GetClipPath(Byte[] data);
    [MemberNotNullAttribute("_values")]
private void Initialize();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ImageMagick.EightBimReader : object {
    private Byte[] _data;
    private Collection`1<IEightBimValue> _values;
    public EightBimReader(Byte[] data);
    public static Collection`1<IEightBimValue> Read(Byte[] data);
    private void Read();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ImageMagick.EightBimValue : object {
    private Byte[] _data;
    [CompilerGeneratedAttribute]
private short <Id>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public short Id { get; }
    [NullableAttribute("2")]
public string Name { get; }
    internal EightBimValue(short id, string name, Byte[] data);
    [CompilerGeneratedAttribute]
public sealed virtual short get_Id();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(IEightBimValue other);
    public virtual int GetHashCode();
    public sealed virtual Byte[] ToByteArray();
    public virtual string ToString();
    public sealed virtual string ToString(Encoding encoding);
}
internal class ImageMagick.EightBimWriter : object {
    [NullableContextAttribute("1")]
public static Byte[] Write(Collection`1<IEightBimValue> values);
}
public enum ImageMagick.Endian : Enum {
    public int value__;
    public static Endian Undefined;
    public static Endian LSB;
    public static Endian MSB;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ImageMagick.EndianReader : object {
    private Byte[] _data;
    [CompilerGeneratedAttribute]
private UInt32 <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLittleEndian>k__BackingField;
    public UInt32 Index { get; private set; }
    public bool IsLittleEndian { get; public set; }
    public EndianReader(Byte[] data);
    [CompilerGeneratedAttribute]
public UInt32 get_Index();
    [CompilerGeneratedAttribute]
private void set_Index(UInt32 value);
    [CompilerGeneratedAttribute]
public bool get_IsLittleEndian();
    [CompilerGeneratedAttribute]
public void set_IsLittleEndian(bool value);
    public bool CanRead(UInt32 length);
    public bool Seek(UInt32 index);
    public bool Skip(UInt32 value);
    public Nullable`1<byte> ReadByte();
    public Nullable`1<double> ReadDouble();
    public Nullable`1<UInt32> ReadLong();
    public Nullable`1<ushort> ReadShort();
    public Nullable`1<float> ReadFloat();
    [NullableContextAttribute("2")]
public string ReadString(UInt32 length);
    private double ReadDoubleLSB();
    private double ReadDoubleMSB();
    private UInt32 ReadLongLSB();
    private UInt32 ReadLongMSB();
    private ushort ReadShortLSB();
    private ushort ReadShortMSB();
}
internal static class ImageMagick.EnumHelper : object {
    public static string ConvertFlags(TEnum value);
    [NullableContextAttribute("1")]
public static string GetName(Enum value);
    public static bool HasFlag(TEnum value, TEnum flag);
    public static TEnum Parse(int value, TEnum defaultValue);
    public static TEnum Parse(string value, TEnum defaultValue);
    public static TEnum Parse(ushort value, TEnum defaultValue);
    [NullableContextAttribute("1")]
public static MagickFormat ParseMagickFormatFromExtension(FileInfo file);
    private static TEnum Parse(object value, TEnum defaultValue);
}
public enum ImageMagick.ErrorMetric : Enum {
    public int value__;
    public static ErrorMetric Undefined;
    public static ErrorMetric Absolute;
    public static ErrorMetric Fuzz;
    public static ErrorMetric MeanAbsolute;
    public static ErrorMetric MeanErrorPerPixel;
    public static ErrorMetric MeanSquared;
    public static ErrorMetric NormalizedCrossCorrelation;
    public static ErrorMetric PeakAbsolute;
    public static ErrorMetric PeakSignalToNoiseRatio;
    public static ErrorMetric PerceptualHash;
    public static ErrorMetric RootMeanSquared;
    public static ErrorMetric StructuralSimilarity;
    public static ErrorMetric StructuralDissimilarity;
}
public enum ImageMagick.EvaluateFunction : Enum {
    public int value__;
    public static EvaluateFunction Undefined;
    public static EvaluateFunction Arcsin;
    public static EvaluateFunction Arctan;
    public static EvaluateFunction Polynomial;
    public static EvaluateFunction Sinusoid;
}
public enum ImageMagick.EvaluateOperator : Enum {
    public int value__;
    public static EvaluateOperator Undefined;
    public static EvaluateOperator Abs;
    public static EvaluateOperator Add;
    public static EvaluateOperator AddModulus;
    public static EvaluateOperator And;
    public static EvaluateOperator Cosine;
    public static EvaluateOperator Divide;
    public static EvaluateOperator Exponential;
    public static EvaluateOperator GaussianNoise;
    public static EvaluateOperator ImpulseNoise;
    public static EvaluateOperator LaplacianNoise;
    public static EvaluateOperator LeftShift;
    public static EvaluateOperator Log;
    public static EvaluateOperator Max;
    public static EvaluateOperator Mean;
    public static EvaluateOperator Median;
    public static EvaluateOperator Min;
    public static EvaluateOperator MultiplicativeNoise;
    public static EvaluateOperator Multiply;
    public static EvaluateOperator Or;
    public static EvaluateOperator PoissonNoise;
    public static EvaluateOperator Pow;
    public static EvaluateOperator RightShift;
    public static EvaluateOperator RootMeanSquare;
    public static EvaluateOperator Set;
    public static EvaluateOperator Sine;
    public static EvaluateOperator Subtract;
    public static EvaluateOperator Sum;
    public static EvaluateOperator ThresholdBlack;
    public static EvaluateOperator Threshold;
    public static EvaluateOperator ThresholdWhite;
    public static EvaluateOperator UniformNoise;
    public static EvaluateOperator Xor;
    public static EvaluateOperator InverseLog;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class ImageMagick.ExifArrayValue`1 : ExifValue {
    [CompilerGeneratedAttribute]
private TValueType[] <Value>k__BackingField;
    public bool IsArray { get; }
    public TValueType[] Value { get; public set; }
    public ExifArrayValue`1(ExifTag`1<TValueType[]> tag);
    public ExifArrayValue`1(ExifTagValue tag);
    public virtual bool get_IsArray();
    [CompilerGeneratedAttribute]
public sealed virtual TValueType[] get_Value();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Value(TValueType[] value);
    public virtual object GetValue();
    public virtual bool SetValue(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ImageMagick.ExifByte : ExifValue`1<byte> {
    [CompilerGeneratedAttribute]
private ExifDataType <DataType>k__BackingField;
    public ExifDataType DataType { get; }
    protected string StringValue { get; }
    public ExifByte(ExifTag`1<byte> tag, ExifDataType dataType);
    public ExifByte(ExifTagValue tag, ExifDataType dataType);
    [CompilerGeneratedAttribute]
public virtual ExifDataType get_DataType();
    protected virtual string get_StringValue();
    public virtual bool SetValue(object value);
}
internal class ImageMagick.ExifByteArray : ExifArrayValue`1<byte> {
    [CompilerGeneratedAttribute]
private ExifDataType <DataType>k__BackingField;
    public ExifDataType DataType { get; }
    [NullableContextAttribute("1")]
public ExifByteArray(ExifTag`1<Byte[]> tag, ExifDataType dataType);
    public ExifByteArray(ExifTagValue tag, ExifDataType dataType);
    [CompilerGeneratedAttribute]
public virtual ExifDataType get_DataType();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ImageMagick.ExifData : object {
    [CompilerGeneratedAttribute]
private UInt32 <ThumbnailLength>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <ThumbnailOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private Collection`1<ExifTag> <InvalidTags>k__BackingField;
    [CompilerGeneratedAttribute]
private Collection`1<IExifValue> <Values>k__BackingField;
    public UInt32 ThumbnailLength { get; public set; }
    public UInt32 ThumbnailOffset { get; public set; }
    public Collection`1<ExifTag> InvalidTags { get; }
    public Collection`1<IExifValue> Values { get; }
    [CompilerGeneratedAttribute]
public UInt32 get_ThumbnailLength();
    [CompilerGeneratedAttribute]
public void set_ThumbnailLength(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_ThumbnailOffset();
    [CompilerGeneratedAttribute]
public void set_ThumbnailOffset(UInt32 value);
    [CompilerGeneratedAttribute]
public Collection`1<ExifTag> get_InvalidTags();
    [CompilerGeneratedAttribute]
public Collection`1<IExifValue> get_Values();
}
public enum ImageMagick.ExifDataType : Enum {
    public int value__;
    public static ExifDataType Unknown;
    public static ExifDataType Byte;
    public static ExifDataType String;
    public static ExifDataType Short;
    public static ExifDataType Long;
    public static ExifDataType Rational;
    public static ExifDataType SignedByte;
    public static ExifDataType Undefined;
    public static ExifDataType SignedShort;
    public static ExifDataType SignedLong;
    public static ExifDataType SignedRational;
    public static ExifDataType Float;
    public static ExifDataType Double;
}
internal static class ImageMagick.ExifDataTypes : object {
    public static UInt32 GetSize(ExifDataType dataType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ImageMagick.ExifDouble : ExifValue`1<double> {
    public ExifDataType DataType { get; }
    protected string StringValue { get; }
    public ExifDouble(ExifTag`1<double> tag);
    public ExifDouble(ExifTagValue tag);
    public virtual ExifDataType get_DataType();
    protected virtual string get_StringValue();
    public virtual bool SetValue(object value);
}
internal class ImageMagick.ExifDoubleArray : ExifArrayValue`1<double> {
    public ExifDataType DataType { get; }
    [NullableContextAttribute("1")]
public ExifDoubleArray(ExifTag`1<Double[]> tag);
    public ExifDoubleArray(ExifTagValue tag);
    public virtual ExifDataType get_DataType();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ImageMagick.ExifFloat : ExifValue`1<float> {
    public ExifDataType DataType { get; }
    protected string StringValue { get; }
    public ExifFloat(ExifTagValue tag);
    public virtual ExifDataType get_DataType();
    protected virtual string get_StringValue();
    public virtual bool SetValue(object value);
}
internal class ImageMagick.ExifFloatArray : ExifArrayValue`1<float> {
    public ExifDataType DataType { get; }
    public ExifFloatArray(ExifTagValue tag);
    public virtual ExifDataType get_DataType();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ImageMagick.ExifLong : ExifValue`1<UInt32> {
    public ExifDataType DataType { get; }
    protected string StringValue { get; }
    public ExifLong(ExifTag`1<UInt32> tag);
    public ExifLong(ExifTagValue tag);
    public virtual ExifDataType get_DataType();
    protected virtual string get_StringValue();
    public virtual bool SetValue(object value);
}
internal class ImageMagick.ExifLongArray : ExifArrayValue`1<UInt32> {
    public ExifDataType DataType { get; }
    [NullableContextAttribute("1")]
public ExifLongArray(ExifTag`1<UInt32[]> tag);
    public ExifLongArray(ExifTagValue tag);
    public virtual ExifDataType get_DataType();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ImageMagick.ExifNumber : ExifValue`1<Number> {
    public ExifDataType DataType { get; }
    protected string StringValue { get; }
    public ExifNumber(ExifTag`1<Number> tag);
    public virtual ExifDataType get_DataType();
    protected virtual string get_StringValue();
    public virtual bool SetValue(object value);
}
internal class ImageMagick.ExifNumberArray : ExifArrayValue`1<Number> {
    public ExifDataType DataType { get; }
    [NullableContextAttribute("1")]
public ExifNumberArray(ExifTag`1<Number[]> tag);
    public virtual ExifDataType get_DataType();
}
[FlagsAttribute]
public enum ImageMagick.ExifParts : Enum {
    public int value__;
    public static ExifParts None;
    public static ExifParts IfdTags;
    public static ExifParts ExifTags;
    public static ExifParts GpsTags;
    public static ExifParts All;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ImageMagick.ExifProfile : ImageProfile {
    [NullableAttribute("2")]
private ExifData _data;
    [CompilerGeneratedAttribute]
private ExifParts <Parts>k__BackingField;
    public ExifParts Parts { get; public set; }
    public IReadOnlyList`1<ExifTag> InvalidTags { get; }
    public UInt32 ThumbnailLength { get; }
    public UInt32 ThumbnailOffset { get; }
    public IReadOnlyList`1<IExifValue> Values { get; }
    public ExifProfile(Byte[] data);
    public ExifProfile(string fileName);
    public ExifProfile(Stream stream);
    [CompilerGeneratedAttribute]
public sealed virtual ExifParts get_Parts();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Parts(ExifParts value);
    public sealed virtual IReadOnlyList`1<ExifTag> get_InvalidTags();
    public sealed virtual UInt32 get_ThumbnailLength();
    public sealed virtual UInt32 get_ThumbnailOffset();
    public sealed virtual IReadOnlyList`1<IExifValue> get_Values();
    public sealed virtual IExifValue`1<TValueType> GetValue(ExifTag`1<TValueType> tag);
    public sealed virtual void RemoveThumbnail();
    public sealed virtual bool RemoveValue(ExifTag tag);
    public sealed virtual void Rewrite();
    public sealed virtual void SetValue(ExifTag`1<TValueType> tag, TValueType value);
    protected virtual void UpdateData();
    [MemberNotNullAttribute("_data")]
private void InitializeValues();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ImageMagick.ExifRational : ExifValue`1<Rational> {
    public ExifDataType DataType { get; }
    protected string StringValue { get; }
    public ExifRational(ExifTag`1<Rational> tag);
    public ExifRational(ExifTagValue tag);
    public virtual ExifDataType get_DataType();
    protected virtual string get_StringValue();
}
internal class ImageMagick.ExifRationalArray : ExifArrayValue`1<Rational> {
    public ExifDataType DataType { get; }
    [NullableContextAttribute("1")]
public ExifRationalArray(ExifTag`1<Rational[]> tag);
    public ExifRationalArray(ExifTagValue tag);
    public virtual ExifDataType get_DataType();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ImageMagick.ExifReader : object {
    private ExifData _data;
    private EndianReader _reader;
    private UInt32 _exifOffset;
    private UInt32 _gpsOffset;
    private UInt32 _startIndex;
    private ExifReader(Byte[] data);
    public static ExifData Read(Byte[] data);
    private static TDataType[] ReadArray(UInt32 numberOfComponents, ReadMethod`1<TDataType> read);
    private void Read();
    private void AddValues(Collection`1<IExifValue> values, UInt32 index);
    [NullableContextAttribute("2")]
private ExifValue CreateValue();
    [NullableContextAttribute("2")]
private ExifValue CreateValue(ExifTagValue tag, ExifDataType dataType, UInt32 numberOfComponents);
    private object ReadValue(ExifDataType dataType, UInt32 numberOfComponents);
    private byte ReadByte();
    private double ReadDouble();
    private float ReadFloat();
    private UInt32 ReadLong();
    private ushort ReadShort();
    private string ReadString(UInt32 length);
    private Rational ReadRational();
    private SignedRational ReadSignedRational();
    private sbyte ReadSignedByte();
    private int ReadSignedLong();
    private short ReadSignedShort();
    private void ReadThumbnail(UInt32 offset);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ImageMagick.ExifShort : ExifValue`1<ushort> {
    public ExifDataType DataType { get; }
    protected string StringValue { get; }
    public ExifShort(ExifTag`1<ushort> tag);
    public ExifShort(ExifTagValue tag);
    public virtual ExifDataType get_DataType();
    protected virtual string get_StringValue();
    public virtual bool SetValue(object value);
}
internal class ImageMagick.ExifShortArray : ExifArrayValue`1<ushort> {
    public ExifDataType DataType { get; }
    [NullableContextAttribute("1")]
public ExifShortArray(ExifTag`1<UInt16[]> tag);
    public ExifShortArray(ExifTagValue tag);
    public virtual ExifDataType get_DataType();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ImageMagick.ExifSignedByte : ExifValue`1<sbyte> {
    public ExifDataType DataType { get; }
    protected string StringValue { get; }
    public ExifSignedByte(ExifTagValue tag);
    public virtual ExifDataType get_DataType();
    protected virtual string get_StringValue();
    public virtual bool SetValue(object value);
}
internal class ImageMagick.ExifSignedByteArray : ExifArrayValue`1<sbyte> {
    public ExifDataType DataType { get; }
    public ExifSignedByteArray(ExifTagValue tag);
    public virtual ExifDataType get_DataType();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ImageMagick.ExifSignedLong : ExifValue`1<int> {
    public ExifDataType DataType { get; }
    protected string StringValue { get; }
    public ExifSignedLong(ExifTagValue tag);
    public virtual ExifDataType get_DataType();
    protected virtual string get_StringValue();
}
internal class ImageMagick.ExifSignedLongArray : ExifArrayValue`1<int> {
    public ExifDataType DataType { get; }
    public ExifSignedLongArray(ExifTagValue tag);
    public virtual ExifDataType get_DataType();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ImageMagick.ExifSignedRational : ExifValue`1<SignedRational> {
    public ExifDataType DataType { get; }
    protected string StringValue { get; }
    internal ExifSignedRational(ExifTag`1<SignedRational> tag);
    internal ExifSignedRational(ExifTagValue tag);
    public virtual ExifDataType get_DataType();
    protected virtual string get_StringValue();
}
internal class ImageMagick.ExifSignedRationalArray : ExifArrayValue`1<SignedRational> {
    public ExifDataType DataType { get; }
    [NullableContextAttribute("1")]
public ExifSignedRationalArray(ExifTag`1<SignedRational[]> tag);
    public ExifSignedRationalArray(ExifTagValue tag);
    public virtual ExifDataType get_DataType();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ImageMagick.ExifSignedShort : ExifValue`1<short> {
    public ExifDataType DataType { get; }
    protected string StringValue { get; }
    public ExifSignedShort(ExifTagValue tag);
    public virtual ExifDataType get_DataType();
    protected virtual string get_StringValue();
    public virtual bool SetValue(object value);
}
internal class ImageMagick.ExifSignedShortArray : ExifArrayValue`1<short> {
    public ExifDataType DataType { get; }
    [NullableContextAttribute("1")]
public ExifSignedShortArray(ExifTag`1<Int16[]> tag);
    public ExifSignedShortArray(ExifTagValue tag);
    public virtual ExifDataType get_DataType();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class ImageMagick.ExifString : ExifValue`1<string> {
    public ExifDataType DataType { get; }
    protected string StringValue { get; }
    public ExifString(ExifTag`1<string> tag);
    public ExifString(ExifTagValue tag);
    public virtual ExifDataType get_DataType();
    protected virtual string get_StringValue();
    public virtual bool SetValue(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class ImageMagick.ExifTag : object {
    [CompilerGeneratedAttribute]
private static ExifTag`1<byte> <FaxProfile>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<byte> <GPSAltitudeRef>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<byte> <ModeNumber>k__BackingField;
    private ushort _value;
    [CompilerGeneratedAttribute]
private static ExifTag`1<Double[]> <IntergraphMatrix>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<Double[]> <ModelTiePoint>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<Double[]> <ModelTransform>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<Double[]> <PixelScale>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<UInt32> <CodingMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<UInt32> <FaxRecvParams>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<UInt32> <FaxRecvTime>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<UInt32> <GPSIFDOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<UInt32> <ImageNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<UInt32> <ISOSpeed>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<UInt32> <ISOSpeedLatitudeyyy>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<UInt32> <ISOSpeedLatitudezzz>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<UInt32> <JPEGInterchangeFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<UInt32> <JPEGInterchangeFormatLength>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<UInt32> <MDFileTag>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<UInt32> <ProfileType>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<UInt32> <RecommendedExposureIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<UInt32> <StandardOutputSensitivity>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<UInt32> <SubfileType>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<UInt32> <SubIFDOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<UInt32> <T4Options>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<UInt32> <T6Options>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<UInt32> <T82ptions>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<UInt32> <XClipPathUnits>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<UInt32> <YClipPathUnits>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<UInt32[]> <ColorResponseUnit>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<UInt32[]> <FreeByteCounts>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<UInt32[]> <FreeOffsets>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<UInt32[]> <IntergraphRegisters>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<UInt32[]> <JPEGACTables>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<UInt32[]> <JPEGDCTables>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<UInt32[]> <JPEGQTables>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<UInt32[]> <SMaxSampleValue>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<UInt32[]> <SMinSampleValue>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<UInt32[]> <StripRowCounts>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<UInt32[]> <TileOffsets>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<Number> <BadFaxLines>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<Number> <ConsecutiveBadFaxLines>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<Number> <ImageLength>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<Number> <ImageWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<Number> <PixelXDimension>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<Number> <PixelYDimension>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<Number> <RowsPerStrip>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<Number> <StripByteCounts>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<Number> <TileLength>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<Number> <TileWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<Number[]> <ImageLayer>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<Number[]> <StripOffsets>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<Number[]> <TileByteCounts>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<Rational> <Acceleration>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<Rational> <ApertureValue>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<Rational> <BatteryLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<Rational> <CompressedBitsPerPixel>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<Rational> <DigitalZoomRatio>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<Rational> <ExposureIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<Rational> <ExposureIndex2>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<Rational> <ExposureTime>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<Rational> <FlashEnergy>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<Rational> <FlashEnergy2>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<Rational> <FocalLength>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<Rational> <FocalPlaneXResolution>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<Rational> <FocalPlaneXResolution2>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<Rational> <FocalPlaneYResolution>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<Rational> <FocalPlaneYResolution2>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<Rational> <FNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<Rational> <GPSAltitude>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<Rational> <GPSDestBearing>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<Rational> <GPSDestDistance>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<Rational> <GPSImgDirection>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<Rational> <GPSDOP>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<Rational> <GPSSpeed>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<Rational> <GPSTrack>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<Rational> <Humidity>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<Rational> <MaxApertureValue>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<Rational> <MDScalePixel>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<Rational> <Pressure>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<Rational> <SubjectDistance>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<Rational> <XPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<Rational> <XResolution>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<Rational> <YPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<Rational> <YResolution>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<Rational[]> <GPSDestLatitude>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<Rational[]> <GPSDestLongitude>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<Rational[]> <GPSLatitude>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<Rational[]> <GPSLongitude>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<Rational[]> <GPSTimestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<Rational[]> <LensInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<Rational[]> <PrimaryChromaticities>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<Rational[]> <ReferenceBlackWhite>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<Rational[]> <YCbCrCoefficients>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<Rational[]> <WhitePoint>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<ushort> <CellLength>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<ushort> <CellWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<ushort> <CleanFaxData>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<ushort> <ColorSpace>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<ushort> <Compression>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<ushort> <Contrast>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<ushort> <CustomRendered>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<ushort> <DotRange>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<ushort> <ExposureMode>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<ushort> <ExposureProgram>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<ushort> <FillOrder>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<ushort> <Flash>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<ushort> <FocalLengthIn35mmFilm>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<ushort> <FocalPlaneResolutionUnit>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<ushort> <FocalPlaneResolutionUnit2>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<ushort> <GainControl>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<ushort> <GPSDifferential>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<ushort> <GrayResponseUnit>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<ushort> <Indexed>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<ushort> <Interlace>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<ushort> <InkSet>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<ushort> <JPEGProc>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<ushort> <JPEGRestartInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<ushort> <LightSource>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<ushort> <MeteringMode>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<ushort> <NumberOfInks>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<ushort> <OldSubfileType>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<ushort> <OPIProxy>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<ushort> <Orientation>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<ushort> <PlanarConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<ushort> <PhotometricInterpretation>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<ushort> <Rating>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<ushort> <RatingPercent>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<ushort> <ResolutionUnit>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<ushort> <SamplesPerPixel>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<ushort> <Saturation>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<ushort> <SceneCaptureType>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<ushort> <SelfTimerMode>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<ushort> <SensitivityType>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<ushort> <SensingMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<ushort> <SensingMethod2>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<ushort> <Sharpness>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<ushort> <SubjectDistanceRange>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<ushort> <Thresholding>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<ushort> <WhiteBalance>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<ushort> <YCbCrPositioning>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<UInt16[]> <BitsPerSample>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<UInt16[]> <CFARepeatPatternDim>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<UInt16[]> <ColorMap>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<UInt16[]> <DefaultImageColor>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<UInt16[]> <ExtraSamples>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<UInt16[]> <GrayResponseCurve>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<UInt16[]> <HalftoneHints>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<UInt16[]> <IntergraphPacketData>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<UInt16[]> <ISOSpeedRatings>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<UInt16[]> <JPEGLosslessPredictors>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<UInt16[]> <JPEGPointTransforms>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<UInt16[]> <MaxSampleValue>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<UInt16[]> <MinSampleValue>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<UInt16[]> <PageNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<UInt16[]> <Predictor>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<UInt16[]> <SampleFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<UInt16[]> <SubjectArea>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<UInt16[]> <SubjectLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<UInt16[]> <TransferFunction>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<UInt16[]> <TransferRange>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<UInt16[]> <YCbCrSubsampling>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<SignedRational> <AmbientTemperature>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<SignedRational> <BrightnessValue>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<SignedRational> <CameraElevationAngle>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<SignedRational> <ExposureBiasValue>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<SignedRational> <ShutterSpeedValue>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<SignedRational> <WaterDepth>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<SignedRational[]> <Decode>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<Int16[]> <TimeZoneOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<string> <Artist>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<string> <Copyright>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<string> <DateTime>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<string> <DateTimeDigitized>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<string> <DateTimeOriginal>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<string> <DocumentName>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<string> <FaxSubaddress>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<string> <GPSDateStamp>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<string> <GPSDestBearingRef>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<string> <GPSDestDistanceRef>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<string> <GPSDestLatitudeRef>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<string> <GPSDestLongitudeRef>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<string> <GPSImgDirectionRef>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<string> <GPSLatitudeRef>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<string> <GPSLongitudeRef>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<string> <GPSMapDatum>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<string> <GPSMeasureMode>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<string> <GDALMetadata>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<string> <GDALNoData>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<string> <GPSSatellites>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<string> <GPSSpeedRef>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<string> <GPSStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<string> <GPSTrackRef>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<string> <HostComputer>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<string> <ImageDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<string> <ImageID>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<string> <ImageHistory>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<string> <ImageUniqueID>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<string> <InkNames>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<string> <LensMake>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<string> <LensModel>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<string> <LensSerialNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<string> <Make>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<string> <MDLabName>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<string> <MDPrepDate>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<string> <MDPrepTime>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<string> <MDSampleInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<string> <Model>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<string> <OffsetTime>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<string> <OffsetTimeDigitized>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<string> <OffsetTimeOriginal>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<string> <OwnerName>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<string> <PageName>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<string> <RelatedSoundFile>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<string> <SecurityClassification>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<string> <SEMInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<string> <SpectralSensitivity>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<string> <Software>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<string> <SubsecTime>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<string> <SubsecTimeDigitized>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<string> <SubsecTimeOriginal>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<string> <TargetPrinter>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<string> <SerialNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<Byte[]> <CFAPattern>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<Byte[]> <ComponentsConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<Byte[]> <DeviceSettingDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<Byte[]> <ExifVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<byte> <FileSource>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<Byte[]> <FlashpixVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<Byte[]> <GPSProcessingMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<Byte[]> <GPSAreaInformation>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<Byte[]> <ImageSourceData>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<Byte[]> <JPEGTables>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<Byte[]> <MakerNote>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<Byte[]> <Noise>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<Byte[]> <SpatialFrequencyResponse>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<Byte[]> <SpatialFrequencyResponse2>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<Byte[]> <OECF>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<byte> <SceneType>k__BackingField;
    [CompilerGeneratedAttribute]
private static ExifTag`1<Byte[]> <UserComment>k__BackingField;
    public static ExifTag`1<byte> FaxProfile { get; }
    public static ExifTag`1<byte> GPSAltitudeRef { get; }
    public static ExifTag`1<byte> ModeNumber { get; }
    public static ExifTag`1<Byte[]> ClipPath { get; }
    public static ExifTag`1<Byte[]> CFAPattern2 { get; }
    public static ExifTag`1<Byte[]> GPSVersionID { get; }
    public static ExifTag`1<Byte[]> TIFFEPStandardID { get; }
    public static ExifTag`1<Byte[]> VersionYear { get; }
    public static ExifTag`1<Byte[]> XMP { get; }
    public static ExifTag`1<Byte[]> XPAuthor { get; }
    public static ExifTag`1<Byte[]> XPComment { get; }
    public static ExifTag`1<Byte[]> XPKeywords { get; }
    public static ExifTag`1<Byte[]> XPSubject { get; }
    public static ExifTag`1<Byte[]> XPTitle { get; }
    public static ExifTag`1<Double[]> IntergraphMatrix { get; }
    public static ExifTag`1<Double[]> ModelTiePoint { get; }
    public static ExifTag`1<Double[]> ModelTransform { get; }
    public static ExifTag`1<Double[]> PixelScale { get; }
    public static ExifTag`1<UInt32> CodingMethods { get; }
    public static ExifTag`1<UInt32> FaxRecvParams { get; }
    public static ExifTag`1<UInt32> FaxRecvTime { get; }
    public static ExifTag`1<UInt32> GPSIFDOffset { get; }
    public static ExifTag`1<UInt32> ImageNumber { get; }
    public static ExifTag`1<UInt32> ISOSpeed { get; }
    public static ExifTag`1<UInt32> ISOSpeedLatitudeyyy { get; }
    public static ExifTag`1<UInt32> ISOSpeedLatitudezzz { get; }
    public static ExifTag`1<UInt32> JPEGInterchangeFormat { get; }
    public static ExifTag`1<UInt32> JPEGInterchangeFormatLength { get; }
    public static ExifTag`1<UInt32> MDFileTag { get; }
    public static ExifTag`1<UInt32> ProfileType { get; }
    public static ExifTag`1<UInt32> RecommendedExposureIndex { get; }
    public static ExifTag`1<UInt32> StandardOutputSensitivity { get; }
    public static ExifTag`1<UInt32> SubfileType { get; }
    public static ExifTag`1<UInt32> SubIFDOffset { get; }
    public static ExifTag`1<UInt32> T4Options { get; }
    public static ExifTag`1<UInt32> T6Options { get; }
    public static ExifTag`1<UInt32> T82ptions { get; }
    public static ExifTag`1<UInt32> XClipPathUnits { get; }
    public static ExifTag`1<UInt32> YClipPathUnits { get; }
    public static ExifTag`1<UInt32[]> ColorResponseUnit { get; }
    public static ExifTag`1<UInt32[]> FreeByteCounts { get; }
    public static ExifTag`1<UInt32[]> FreeOffsets { get; }
    public static ExifTag`1<UInt32[]> IntergraphRegisters { get; }
    public static ExifTag`1<UInt32[]> JPEGACTables { get; }
    public static ExifTag`1<UInt32[]> JPEGDCTables { get; }
    public static ExifTag`1<UInt32[]> JPEGQTables { get; }
    public static ExifTag`1<UInt32[]> SMaxSampleValue { get; }
    public static ExifTag`1<UInt32[]> SMinSampleValue { get; }
    public static ExifTag`1<UInt32[]> StripRowCounts { get; }
    public static ExifTag`1<UInt32[]> TileOffsets { get; }
    public static ExifTag`1<Number> BadFaxLines { get; }
    public static ExifTag`1<Number> ConsecutiveBadFaxLines { get; }
    public static ExifTag`1<Number> ImageLength { get; }
    public static ExifTag`1<Number> ImageWidth { get; }
    public static ExifTag`1<Number> PixelXDimension { get; }
    public static ExifTag`1<Number> PixelYDimension { get; }
    public static ExifTag`1<Number> RowsPerStrip { get; }
    public static ExifTag`1<Number> StripByteCounts { get; }
    public static ExifTag`1<Number> TileLength { get; }
    public static ExifTag`1<Number> TileWidth { get; }
    public static ExifTag`1<Number[]> ImageLayer { get; }
    public static ExifTag`1<Number[]> StripOffsets { get; }
    public static ExifTag`1<Number[]> TileByteCounts { get; }
    public static ExifTag`1<Rational> Acceleration { get; }
    public static ExifTag`1<Rational> ApertureValue { get; }
    public static ExifTag`1<Rational> BatteryLevel { get; }
    public static ExifTag`1<Rational> CompressedBitsPerPixel { get; }
    public static ExifTag`1<Rational> DigitalZoomRatio { get; }
    public static ExifTag`1<Rational> ExposureIndex { get; }
    public static ExifTag`1<Rational> ExposureIndex2 { get; }
    public static ExifTag`1<Rational> ExposureTime { get; }
    public static ExifTag`1<Rational> FlashEnergy { get; }
    public static ExifTag`1<Rational> FlashEnergy2 { get; }
    public static ExifTag`1<Rational> FocalLength { get; }
    public static ExifTag`1<Rational> FocalPlaneXResolution { get; }
    public static ExifTag`1<Rational> FocalPlaneXResolution2 { get; }
    public static ExifTag`1<Rational> FocalPlaneYResolution { get; }
    public static ExifTag`1<Rational> FocalPlaneYResolution2 { get; }
    public static ExifTag`1<Rational> FNumber { get; }
    public static ExifTag`1<Rational> GPSAltitude { get; }
    public static ExifTag`1<Rational> GPSDestBearing { get; }
    public static ExifTag`1<Rational> GPSDestDistance { get; }
    public static ExifTag`1<Rational> GPSImgDirection { get; }
    public static ExifTag`1<Rational> GPSDOP { get; }
    public static ExifTag`1<Rational> GPSSpeed { get; }
    public static ExifTag`1<Rational> GPSTrack { get; }
    public static ExifTag`1<Rational> Humidity { get; }
    public static ExifTag`1<Rational> MaxApertureValue { get; }
    public static ExifTag`1<Rational> MDScalePixel { get; }
    public static ExifTag`1<Rational> Pressure { get; }
    public static ExifTag`1<Rational> SubjectDistance { get; }
    public static ExifTag`1<Rational> XPosition { get; }
    public static ExifTag`1<Rational> XResolution { get; }
    public static ExifTag`1<Rational> YPosition { get; }
    public static ExifTag`1<Rational> YResolution { get; }
    public static ExifTag`1<Rational[]> GPSDestLatitude { get; }
    public static ExifTag`1<Rational[]> GPSDestLongitude { get; }
    public static ExifTag`1<Rational[]> GPSLatitude { get; }
    public static ExifTag`1<Rational[]> GPSLongitude { get; }
    public static ExifTag`1<Rational[]> GPSTimestamp { get; }
    public static ExifTag`1<Rational[]> LensInfo { get; }
    public static ExifTag`1<Rational[]> PrimaryChromaticities { get; }
    public static ExifTag`1<Rational[]> ReferenceBlackWhite { get; }
    public static ExifTag`1<Rational[]> YCbCrCoefficients { get; }
    public static ExifTag`1<Rational[]> WhitePoint { get; }
    public static ExifTag`1<ushort> CellLength { get; }
    public static ExifTag`1<ushort> CellWidth { get; }
    public static ExifTag`1<ushort> CleanFaxData { get; }
    public static ExifTag`1<ushort> ColorSpace { get; }
    public static ExifTag`1<ushort> Compression { get; }
    public static ExifTag`1<ushort> Contrast { get; }
    public static ExifTag`1<ushort> CustomRendered { get; }
    public static ExifTag`1<ushort> DotRange { get; }
    public static ExifTag`1<ushort> ExposureMode { get; }
    public static ExifTag`1<ushort> ExposureProgram { get; }
    public static ExifTag`1<ushort> FillOrder { get; }
    public static ExifTag`1<ushort> Flash { get; }
    public static ExifTag`1<ushort> FocalLengthIn35mmFilm { get; }
    public static ExifTag`1<ushort> FocalPlaneResolutionUnit { get; }
    public static ExifTag`1<ushort> FocalPlaneResolutionUnit2 { get; }
    public static ExifTag`1<ushort> GainControl { get; }
    public static ExifTag`1<ushort> GPSDifferential { get; }
    public static ExifTag`1<ushort> GrayResponseUnit { get; }
    public static ExifTag`1<ushort> Indexed { get; }
    public static ExifTag`1<ushort> Interlace { get; }
    public static ExifTag`1<ushort> InkSet { get; }
    public static ExifTag`1<ushort> JPEGProc { get; }
    public static ExifTag`1<ushort> JPEGRestartInterval { get; }
    public static ExifTag`1<ushort> LightSource { get; }
    public static ExifTag`1<ushort> MeteringMode { get; }
    public static ExifTag`1<ushort> NumberOfInks { get; }
    public static ExifTag`1<ushort> OldSubfileType { get; }
    public static ExifTag`1<ushort> OPIProxy { get; }
    public static ExifTag`1<ushort> Orientation { get; }
    public static ExifTag`1<ushort> PlanarConfiguration { get; }
    public static ExifTag`1<ushort> PhotometricInterpretation { get; }
    public static ExifTag`1<ushort> Rating { get; }
    public static ExifTag`1<ushort> RatingPercent { get; }
    public static ExifTag`1<ushort> ResolutionUnit { get; }
    public static ExifTag`1<ushort> SamplesPerPixel { get; }
    public static ExifTag`1<ushort> Saturation { get; }
    public static ExifTag`1<ushort> SceneCaptureType { get; }
    public static ExifTag`1<ushort> SelfTimerMode { get; }
    public static ExifTag`1<ushort> SensitivityType { get; }
    public static ExifTag`1<ushort> SensingMethod { get; }
    public static ExifTag`1<ushort> SensingMethod2 { get; }
    public static ExifTag`1<ushort> Sharpness { get; }
    public static ExifTag`1<ushort> SubjectDistanceRange { get; }
    public static ExifTag`1<ushort> Thresholding { get; }
    public static ExifTag`1<ushort> WhiteBalance { get; }
    public static ExifTag`1<ushort> YCbCrPositioning { get; }
    public static ExifTag`1<UInt16[]> BitsPerSample { get; }
    public static ExifTag`1<UInt16[]> CFARepeatPatternDim { get; }
    public static ExifTag`1<UInt16[]> ColorMap { get; }
    public static ExifTag`1<UInt16[]> DefaultImageColor { get; }
    public static ExifTag`1<UInt16[]> ExtraSamples { get; }
    public static ExifTag`1<UInt16[]> GrayResponseCurve { get; }
    public static ExifTag`1<UInt16[]> HalftoneHints { get; }
    public static ExifTag`1<UInt16[]> IntergraphPacketData { get; }
    public static ExifTag`1<UInt16[]> ISOSpeedRatings { get; }
    public static ExifTag`1<UInt16[]> JPEGLosslessPredictors { get; }
    public static ExifTag`1<UInt16[]> JPEGPointTransforms { get; }
    public static ExifTag`1<UInt16[]> MaxSampleValue { get; }
    public static ExifTag`1<UInt16[]> MinSampleValue { get; }
    public static ExifTag`1<UInt16[]> PageNumber { get; }
    public static ExifTag`1<UInt16[]> Predictor { get; }
    public static ExifTag`1<UInt16[]> SampleFormat { get; }
    public static ExifTag`1<UInt16[]> SubjectArea { get; }
    public static ExifTag`1<UInt16[]> SubjectLocation { get; }
    public static ExifTag`1<UInt16[]> TransferFunction { get; }
    public static ExifTag`1<UInt16[]> TransferRange { get; }
    public static ExifTag`1<UInt16[]> YCbCrSubsampling { get; }
    public static ExifTag`1<SignedRational> AmbientTemperature { get; }
    public static ExifTag`1<SignedRational> BrightnessValue { get; }
    public static ExifTag`1<SignedRational> CameraElevationAngle { get; }
    public static ExifTag`1<SignedRational> ExposureBiasValue { get; }
    public static ExifTag`1<SignedRational> ShutterSpeedValue { get; }
    public static ExifTag`1<SignedRational> WaterDepth { get; }
    public static ExifTag`1<SignedRational[]> Decode { get; }
    public static ExifTag`1<Int16[]> TimeZoneOffset { get; }
    public static ExifTag`1<string> Artist { get; }
    public static ExifTag`1<string> Copyright { get; }
    public static ExifTag`1<string> DateTime { get; }
    public static ExifTag`1<string> DateTimeDigitized { get; }
    public static ExifTag`1<string> DateTimeOriginal { get; }
    public static ExifTag`1<string> DocumentName { get; }
    public static ExifTag`1<string> FaxSubaddress { get; }
    public static ExifTag`1<string> GPSDateStamp { get; }
    public static ExifTag`1<string> GPSDestBearingRef { get; }
    public static ExifTag`1<string> GPSDestDistanceRef { get; }
    public static ExifTag`1<string> GPSDestLatitudeRef { get; }
    public static ExifTag`1<string> GPSDestLongitudeRef { get; }
    public static ExifTag`1<string> GPSImgDirectionRef { get; }
    public static ExifTag`1<string> GPSLatitudeRef { get; }
    public static ExifTag`1<string> GPSLongitudeRef { get; }
    public static ExifTag`1<string> GPSMapDatum { get; }
    public static ExifTag`1<string> GPSMeasureMode { get; }
    public static ExifTag`1<string> GDALMetadata { get; }
    public static ExifTag`1<string> GDALNoData { get; }
    public static ExifTag`1<string> GPSSatellites { get; }
    public static ExifTag`1<string> GPSSpeedRef { get; }
    public static ExifTag`1<string> GPSStatus { get; }
    public static ExifTag`1<string> GPSTrackRef { get; }
    public static ExifTag`1<string> HostComputer { get; }
    public static ExifTag`1<string> ImageDescription { get; }
    public static ExifTag`1<string> ImageID { get; }
    public static ExifTag`1<string> ImageHistory { get; }
    public static ExifTag`1<string> ImageUniqueID { get; }
    public static ExifTag`1<string> InkNames { get; }
    public static ExifTag`1<string> LensMake { get; }
    public static ExifTag`1<string> LensModel { get; }
    public static ExifTag`1<string> LensSerialNumber { get; }
    public static ExifTag`1<string> Make { get; }
    public static ExifTag`1<string> MDFileUnits { get; }
    public static ExifTag`1<string> MDLabName { get; }
    public static ExifTag`1<string> MDPrepDate { get; }
    public static ExifTag`1<string> MDPrepTime { get; }
    public static ExifTag`1<string> MDSampleInfo { get; }
    public static ExifTag`1<string> Model { get; }
    public static ExifTag`1<string> OffsetTime { get; }
    public static ExifTag`1<string> OffsetTimeDigitized { get; }
    public static ExifTag`1<string> OffsetTimeOriginal { get; }
    public static ExifTag`1<string> OwnerName { get; }
    public static ExifTag`1<string> PageName { get; }
    public static ExifTag`1<string> RelatedSoundFile { get; }
    public static ExifTag`1<string> SecurityClassification { get; }
    public static ExifTag`1<string> SEMInfo { get; }
    public static ExifTag`1<string> SpectralSensitivity { get; }
    public static ExifTag`1<string> Software { get; }
    public static ExifTag`1<string> SubsecTime { get; }
    public static ExifTag`1<string> SubsecTimeDigitized { get; }
    public static ExifTag`1<string> SubsecTimeOriginal { get; }
    public static ExifTag`1<string> TargetPrinter { get; }
    public static ExifTag`1<string> SerialNumber { get; }
    public static ExifTag`1<Byte[]> CFAPattern { get; }
    public static ExifTag`1<Byte[]> ComponentsConfiguration { get; }
    public static ExifTag`1<Byte[]> DeviceSettingDescription { get; }
    public static ExifTag`1<Byte[]> ExifVersion { get; }
    public static ExifTag`1<byte> FileSource { get; }
    public static ExifTag`1<Byte[]> FlashpixVersion { get; }
    public static ExifTag`1<Byte[]> GPSProcessingMethod { get; }
    public static ExifTag`1<Byte[]> GPSAreaInformation { get; }
    public static ExifTag`1<Byte[]> ImageSourceData { get; }
    public static ExifTag`1<Byte[]> JPEGTables { get; }
    public static ExifTag`1<Byte[]> MakerNote { get; }
    public static ExifTag`1<Byte[]> Noise { get; }
    public static ExifTag`1<Byte[]> SpatialFrequencyResponse { get; }
    public static ExifTag`1<Byte[]> SpatialFrequencyResponse2 { get; }
    public static ExifTag`1<Byte[]> OECF { get; }
    public static ExifTag`1<byte> SceneType { get; }
    public static ExifTag`1<Byte[]> UserComment { get; }
    protected ExifTag(ushort value);
    private static ExifTag();
    [CompilerGeneratedAttribute]
public static ExifTag`1<byte> get_FaxProfile();
    [CompilerGeneratedAttribute]
public static ExifTag`1<byte> get_GPSAltitudeRef();
    [CompilerGeneratedAttribute]
public static ExifTag`1<byte> get_ModeNumber();
    public static ExifTag`1<Byte[]> get_ClipPath();
    public static ExifTag`1<Byte[]> get_CFAPattern2();
    public static ExifTag`1<Byte[]> get_GPSVersionID();
    public static ExifTag`1<Byte[]> get_TIFFEPStandardID();
    public static ExifTag`1<Byte[]> get_VersionYear();
    public static ExifTag`1<Byte[]> get_XMP();
    public static ExifTag`1<Byte[]> get_XPAuthor();
    public static ExifTag`1<Byte[]> get_XPComment();
    public static ExifTag`1<Byte[]> get_XPKeywords();
    public static ExifTag`1<Byte[]> get_XPSubject();
    public static ExifTag`1<Byte[]> get_XPTitle();
    public static ushort op_Explicit(ExifTag tag);
    public static bool op_Equality(ExifTag left, ExifTag right);
    public static bool op_Inequality(ExifTag left, ExifTag right);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(ExifTag other);
    public virtual int GetHashCode();
    public virtual string ToString();
    [CompilerGeneratedAttribute]
public static ExifTag`1<Double[]> get_IntergraphMatrix();
    [CompilerGeneratedAttribute]
public static ExifTag`1<Double[]> get_ModelTiePoint();
    [CompilerGeneratedAttribute]
public static ExifTag`1<Double[]> get_ModelTransform();
    [CompilerGeneratedAttribute]
public static ExifTag`1<Double[]> get_PixelScale();
    [CompilerGeneratedAttribute]
public static ExifTag`1<UInt32> get_CodingMethods();
    [CompilerGeneratedAttribute]
public static ExifTag`1<UInt32> get_FaxRecvParams();
    [CompilerGeneratedAttribute]
public static ExifTag`1<UInt32> get_FaxRecvTime();
    [CompilerGeneratedAttribute]
public static ExifTag`1<UInt32> get_GPSIFDOffset();
    [CompilerGeneratedAttribute]
public static ExifTag`1<UInt32> get_ImageNumber();
    [CompilerGeneratedAttribute]
public static ExifTag`1<UInt32> get_ISOSpeed();
    [CompilerGeneratedAttribute]
public static ExifTag`1<UInt32> get_ISOSpeedLatitudeyyy();
    [CompilerGeneratedAttribute]
public static ExifTag`1<UInt32> get_ISOSpeedLatitudezzz();
    [CompilerGeneratedAttribute]
public static ExifTag`1<UInt32> get_JPEGInterchangeFormat();
    [CompilerGeneratedAttribute]
public static ExifTag`1<UInt32> get_JPEGInterchangeFormatLength();
    [CompilerGeneratedAttribute]
public static ExifTag`1<UInt32> get_MDFileTag();
    [CompilerGeneratedAttribute]
public static ExifTag`1<UInt32> get_ProfileType();
    [CompilerGeneratedAttribute]
public static ExifTag`1<UInt32> get_RecommendedExposureIndex();
    [CompilerGeneratedAttribute]
public static ExifTag`1<UInt32> get_StandardOutputSensitivity();
    [CompilerGeneratedAttribute]
public static ExifTag`1<UInt32> get_SubfileType();
    [CompilerGeneratedAttribute]
public static ExifTag`1<UInt32> get_SubIFDOffset();
    [CompilerGeneratedAttribute]
public static ExifTag`1<UInt32> get_T4Options();
    [CompilerGeneratedAttribute]
public static ExifTag`1<UInt32> get_T6Options();
    [CompilerGeneratedAttribute]
public static ExifTag`1<UInt32> get_T82ptions();
    [CompilerGeneratedAttribute]
public static ExifTag`1<UInt32> get_XClipPathUnits();
    [CompilerGeneratedAttribute]
public static ExifTag`1<UInt32> get_YClipPathUnits();
    [CompilerGeneratedAttribute]
public static ExifTag`1<UInt32[]> get_ColorResponseUnit();
    [CompilerGeneratedAttribute]
public static ExifTag`1<UInt32[]> get_FreeByteCounts();
    [CompilerGeneratedAttribute]
public static ExifTag`1<UInt32[]> get_FreeOffsets();
    [CompilerGeneratedAttribute]
public static ExifTag`1<UInt32[]> get_IntergraphRegisters();
    [CompilerGeneratedAttribute]
public static ExifTag`1<UInt32[]> get_JPEGACTables();
    [CompilerGeneratedAttribute]
public static ExifTag`1<UInt32[]> get_JPEGDCTables();
    [CompilerGeneratedAttribute]
public static ExifTag`1<UInt32[]> get_JPEGQTables();
    [CompilerGeneratedAttribute]
public static ExifTag`1<UInt32[]> get_SMaxSampleValue();
    [CompilerGeneratedAttribute]
public static ExifTag`1<UInt32[]> get_SMinSampleValue();
    [CompilerGeneratedAttribute]
public static ExifTag`1<UInt32[]> get_StripRowCounts();
    [CompilerGeneratedAttribute]
public static ExifTag`1<UInt32[]> get_TileOffsets();
    [CompilerGeneratedAttribute]
public static ExifTag`1<Number> get_BadFaxLines();
    [CompilerGeneratedAttribute]
public static ExifTag`1<Number> get_ConsecutiveBadFaxLines();
    [CompilerGeneratedAttribute]
public static ExifTag`1<Number> get_ImageLength();
    [CompilerGeneratedAttribute]
public static ExifTag`1<Number> get_ImageWidth();
    [CompilerGeneratedAttribute]
public static ExifTag`1<Number> get_PixelXDimension();
    [CompilerGeneratedAttribute]
public static ExifTag`1<Number> get_PixelYDimension();
    [CompilerGeneratedAttribute]
public static ExifTag`1<Number> get_RowsPerStrip();
    [CompilerGeneratedAttribute]
public static ExifTag`1<Number> get_StripByteCounts();
    [CompilerGeneratedAttribute]
public static ExifTag`1<Number> get_TileLength();
    [CompilerGeneratedAttribute]
public static ExifTag`1<Number> get_TileWidth();
    [CompilerGeneratedAttribute]
public static ExifTag`1<Number[]> get_ImageLayer();
    [CompilerGeneratedAttribute]
public static ExifTag`1<Number[]> get_StripOffsets();
    [CompilerGeneratedAttribute]
public static ExifTag`1<Number[]> get_TileByteCounts();
    [CompilerGeneratedAttribute]
public static ExifTag`1<Rational> get_Acceleration();
    [CompilerGeneratedAttribute]
public static ExifTag`1<Rational> get_ApertureValue();
    [CompilerGeneratedAttribute]
public static ExifTag`1<Rational> get_BatteryLevel();
    [CompilerGeneratedAttribute]
public static ExifTag`1<Rational> get_CompressedBitsPerPixel();
    [CompilerGeneratedAttribute]
public static ExifTag`1<Rational> get_DigitalZoomRatio();
    [CompilerGeneratedAttribute]
public static ExifTag`1<Rational> get_ExposureIndex();
    [CompilerGeneratedAttribute]
public static ExifTag`1<Rational> get_ExposureIndex2();
    [CompilerGeneratedAttribute]
public static ExifTag`1<Rational> get_ExposureTime();
    [CompilerGeneratedAttribute]
public static ExifTag`1<Rational> get_FlashEnergy();
    [CompilerGeneratedAttribute]
public static ExifTag`1<Rational> get_FlashEnergy2();
    [CompilerGeneratedAttribute]
public static ExifTag`1<Rational> get_FocalLength();
    [CompilerGeneratedAttribute]
public static ExifTag`1<Rational> get_FocalPlaneXResolution();
    [CompilerGeneratedAttribute]
public static ExifTag`1<Rational> get_FocalPlaneXResolution2();
    [CompilerGeneratedAttribute]
public static ExifTag`1<Rational> get_FocalPlaneYResolution();
    [CompilerGeneratedAttribute]
public static ExifTag`1<Rational> get_FocalPlaneYResolution2();
    [CompilerGeneratedAttribute]
public static ExifTag`1<Rational> get_FNumber();
    [CompilerGeneratedAttribute]
public static ExifTag`1<Rational> get_GPSAltitude();
    [CompilerGeneratedAttribute]
public static ExifTag`1<Rational> get_GPSDestBearing();
    [CompilerGeneratedAttribute]
public static ExifTag`1<Rational> get_GPSDestDistance();
    [CompilerGeneratedAttribute]
public static ExifTag`1<Rational> get_GPSImgDirection();
    [CompilerGeneratedAttribute]
public static ExifTag`1<Rational> get_GPSDOP();
    [CompilerGeneratedAttribute]
public static ExifTag`1<Rational> get_GPSSpeed();
    [CompilerGeneratedAttribute]
public static ExifTag`1<Rational> get_GPSTrack();
    [CompilerGeneratedAttribute]
public static ExifTag`1<Rational> get_Humidity();
    [CompilerGeneratedAttribute]
public static ExifTag`1<Rational> get_MaxApertureValue();
    [CompilerGeneratedAttribute]
public static ExifTag`1<Rational> get_MDScalePixel();
    [CompilerGeneratedAttribute]
public static ExifTag`1<Rational> get_Pressure();
    [CompilerGeneratedAttribute]
public static ExifTag`1<Rational> get_SubjectDistance();
    [CompilerGeneratedAttribute]
public static ExifTag`1<Rational> get_XPosition();
    [CompilerGeneratedAttribute]
public static ExifTag`1<Rational> get_XResolution();
    [CompilerGeneratedAttribute]
public static ExifTag`1<Rational> get_YPosition();
    [CompilerGeneratedAttribute]
public static ExifTag`1<Rational> get_YResolution();
    [CompilerGeneratedAttribute]
public static ExifTag`1<Rational[]> get_GPSDestLatitude();
    [CompilerGeneratedAttribute]
public static ExifTag`1<Rational[]> get_GPSDestLongitude();
    [CompilerGeneratedAttribute]
public static ExifTag`1<Rational[]> get_GPSLatitude();
    [CompilerGeneratedAttribute]
public static ExifTag`1<Rational[]> get_GPSLongitude();
    [CompilerGeneratedAttribute]
public static ExifTag`1<Rational[]> get_GPSTimestamp();
    [CompilerGeneratedAttribute]
public static ExifTag`1<Rational[]> get_LensInfo();
    [CompilerGeneratedAttribute]
public static ExifTag`1<Rational[]> get_PrimaryChromaticities();
    [CompilerGeneratedAttribute]
public static ExifTag`1<Rational[]> get_ReferenceBlackWhite();
    [CompilerGeneratedAttribute]
public static ExifTag`1<Rational[]> get_YCbCrCoefficients();
    [CompilerGeneratedAttribute]
public static ExifTag`1<Rational[]> get_WhitePoint();
    [CompilerGeneratedAttribute]
public static ExifTag`1<ushort> get_CellLength();
    [CompilerGeneratedAttribute]
public static ExifTag`1<ushort> get_CellWidth();
    [CompilerGeneratedAttribute]
public static ExifTag`1<ushort> get_CleanFaxData();
    [CompilerGeneratedAttribute]
public static ExifTag`1<ushort> get_ColorSpace();
    [CompilerGeneratedAttribute]
public static ExifTag`1<ushort> get_Compression();
    [CompilerGeneratedAttribute]
public static ExifTag`1<ushort> get_Contrast();
    [CompilerGeneratedAttribute]
public static ExifTag`1<ushort> get_CustomRendered();
    [CompilerGeneratedAttribute]
public static ExifTag`1<ushort> get_DotRange();
    [CompilerGeneratedAttribute]
public static ExifTag`1<ushort> get_ExposureMode();
    [CompilerGeneratedAttribute]
public static ExifTag`1<ushort> get_ExposureProgram();
    [CompilerGeneratedAttribute]
public static ExifTag`1<ushort> get_FillOrder();
    [CompilerGeneratedAttribute]
public static ExifTag`1<ushort> get_Flash();
    [CompilerGeneratedAttribute]
public static ExifTag`1<ushort> get_FocalLengthIn35mmFilm();
    [CompilerGeneratedAttribute]
public static ExifTag`1<ushort> get_FocalPlaneResolutionUnit();
    [CompilerGeneratedAttribute]
public static ExifTag`1<ushort> get_FocalPlaneResolutionUnit2();
    [CompilerGeneratedAttribute]
public static ExifTag`1<ushort> get_GainControl();
    [CompilerGeneratedAttribute]
public static ExifTag`1<ushort> get_GPSDifferential();
    [CompilerGeneratedAttribute]
public static ExifTag`1<ushort> get_GrayResponseUnit();
    [CompilerGeneratedAttribute]
public static ExifTag`1<ushort> get_Indexed();
    [CompilerGeneratedAttribute]
public static ExifTag`1<ushort> get_Interlace();
    [CompilerGeneratedAttribute]
public static ExifTag`1<ushort> get_InkSet();
    [CompilerGeneratedAttribute]
public static ExifTag`1<ushort> get_JPEGProc();
    [CompilerGeneratedAttribute]
public static ExifTag`1<ushort> get_JPEGRestartInterval();
    [CompilerGeneratedAttribute]
public static ExifTag`1<ushort> get_LightSource();
    [CompilerGeneratedAttribute]
public static ExifTag`1<ushort> get_MeteringMode();
    [CompilerGeneratedAttribute]
public static ExifTag`1<ushort> get_NumberOfInks();
    [CompilerGeneratedAttribute]
public static ExifTag`1<ushort> get_OldSubfileType();
    [CompilerGeneratedAttribute]
public static ExifTag`1<ushort> get_OPIProxy();
    [CompilerGeneratedAttribute]
public static ExifTag`1<ushort> get_Orientation();
    [CompilerGeneratedAttribute]
public static ExifTag`1<ushort> get_PlanarConfiguration();
    [CompilerGeneratedAttribute]
public static ExifTag`1<ushort> get_PhotometricInterpretation();
    [CompilerGeneratedAttribute]
public static ExifTag`1<ushort> get_Rating();
    [CompilerGeneratedAttribute]
public static ExifTag`1<ushort> get_RatingPercent();
    [CompilerGeneratedAttribute]
public static ExifTag`1<ushort> get_ResolutionUnit();
    [CompilerGeneratedAttribute]
public static ExifTag`1<ushort> get_SamplesPerPixel();
    [CompilerGeneratedAttribute]
public static ExifTag`1<ushort> get_Saturation();
    [CompilerGeneratedAttribute]
public static ExifTag`1<ushort> get_SceneCaptureType();
    [CompilerGeneratedAttribute]
public static ExifTag`1<ushort> get_SelfTimerMode();
    [CompilerGeneratedAttribute]
public static ExifTag`1<ushort> get_SensitivityType();
    [CompilerGeneratedAttribute]
public static ExifTag`1<ushort> get_SensingMethod();
    [CompilerGeneratedAttribute]
public static ExifTag`1<ushort> get_SensingMethod2();
    [CompilerGeneratedAttribute]
public static ExifTag`1<ushort> get_Sharpness();
    [CompilerGeneratedAttribute]
public static ExifTag`1<ushort> get_SubjectDistanceRange();
    [CompilerGeneratedAttribute]
public static ExifTag`1<ushort> get_Thresholding();
    [CompilerGeneratedAttribute]
public static ExifTag`1<ushort> get_WhiteBalance();
    [CompilerGeneratedAttribute]
public static ExifTag`1<ushort> get_YCbCrPositioning();
    [CompilerGeneratedAttribute]
public static ExifTag`1<UInt16[]> get_BitsPerSample();
    [CompilerGeneratedAttribute]
public static ExifTag`1<UInt16[]> get_CFARepeatPatternDim();
    [CompilerGeneratedAttribute]
public static ExifTag`1<UInt16[]> get_ColorMap();
    [CompilerGeneratedAttribute]
public static ExifTag`1<UInt16[]> get_DefaultImageColor();
    [CompilerGeneratedAttribute]
public static ExifTag`1<UInt16[]> get_ExtraSamples();
    [CompilerGeneratedAttribute]
public static ExifTag`1<UInt16[]> get_GrayResponseCurve();
    [CompilerGeneratedAttribute]
public static ExifTag`1<UInt16[]> get_HalftoneHints();
    [CompilerGeneratedAttribute]
public static ExifTag`1<UInt16[]> get_IntergraphPacketData();
    [CompilerGeneratedAttribute]
public static ExifTag`1<UInt16[]> get_ISOSpeedRatings();
    [CompilerGeneratedAttribute]
public static ExifTag`1<UInt16[]> get_JPEGLosslessPredictors();
    [CompilerGeneratedAttribute]
public static ExifTag`1<UInt16[]> get_JPEGPointTransforms();
    [CompilerGeneratedAttribute]
public static ExifTag`1<UInt16[]> get_MaxSampleValue();
    [CompilerGeneratedAttribute]
public static ExifTag`1<UInt16[]> get_MinSampleValue();
    [CompilerGeneratedAttribute]
public static ExifTag`1<UInt16[]> get_PageNumber();
    [CompilerGeneratedAttribute]
public static ExifTag`1<UInt16[]> get_Predictor();
    [CompilerGeneratedAttribute]
public static ExifTag`1<UInt16[]> get_SampleFormat();
    [CompilerGeneratedAttribute]
public static ExifTag`1<UInt16[]> get_SubjectArea();
    [CompilerGeneratedAttribute]
public static ExifTag`1<UInt16[]> get_SubjectLocation();
    [CompilerGeneratedAttribute]
public static ExifTag`1<UInt16[]> get_TransferFunction();
    [CompilerGeneratedAttribute]
public static ExifTag`1<UInt16[]> get_TransferRange();
    [CompilerGeneratedAttribute]
public static ExifTag`1<UInt16[]> get_YCbCrSubsampling();
    [CompilerGeneratedAttribute]
public static ExifTag`1<SignedRational> get_AmbientTemperature();
    [CompilerGeneratedAttribute]
public static ExifTag`1<SignedRational> get_BrightnessValue();
    [CompilerGeneratedAttribute]
public static ExifTag`1<SignedRational> get_CameraElevationAngle();
    [CompilerGeneratedAttribute]
public static ExifTag`1<SignedRational> get_ExposureBiasValue();
    [CompilerGeneratedAttribute]
public static ExifTag`1<SignedRational> get_ShutterSpeedValue();
    [CompilerGeneratedAttribute]
public static ExifTag`1<SignedRational> get_WaterDepth();
    [CompilerGeneratedAttribute]
public static ExifTag`1<SignedRational[]> get_Decode();
    [CompilerGeneratedAttribute]
public static ExifTag`1<Int16[]> get_TimeZoneOffset();
    [CompilerGeneratedAttribute]
public static ExifTag`1<string> get_Artist();
    [CompilerGeneratedAttribute]
public static ExifTag`1<string> get_Copyright();
    [CompilerGeneratedAttribute]
public static ExifTag`1<string> get_DateTime();
    [CompilerGeneratedAttribute]
public static ExifTag`1<string> get_DateTimeDigitized();
    [CompilerGeneratedAttribute]
public static ExifTag`1<string> get_DateTimeOriginal();
    [CompilerGeneratedAttribute]
public static ExifTag`1<string> get_DocumentName();
    [CompilerGeneratedAttribute]
public static ExifTag`1<string> get_FaxSubaddress();
    [CompilerGeneratedAttribute]
public static ExifTag`1<string> get_GPSDateStamp();
    [CompilerGeneratedAttribute]
public static ExifTag`1<string> get_GPSDestBearingRef();
    [CompilerGeneratedAttribute]
public static ExifTag`1<string> get_GPSDestDistanceRef();
    [CompilerGeneratedAttribute]
public static ExifTag`1<string> get_GPSDestLatitudeRef();
    [CompilerGeneratedAttribute]
public static ExifTag`1<string> get_GPSDestLongitudeRef();
    [CompilerGeneratedAttribute]
public static ExifTag`1<string> get_GPSImgDirectionRef();
    [CompilerGeneratedAttribute]
public static ExifTag`1<string> get_GPSLatitudeRef();
    [CompilerGeneratedAttribute]
public static ExifTag`1<string> get_GPSLongitudeRef();
    [CompilerGeneratedAttribute]
public static ExifTag`1<string> get_GPSMapDatum();
    [CompilerGeneratedAttribute]
public static ExifTag`1<string> get_GPSMeasureMode();
    [CompilerGeneratedAttribute]
public static ExifTag`1<string> get_GDALMetadata();
    [CompilerGeneratedAttribute]
public static ExifTag`1<string> get_GDALNoData();
    [CompilerGeneratedAttribute]
public static ExifTag`1<string> get_GPSSatellites();
    [CompilerGeneratedAttribute]
public static ExifTag`1<string> get_GPSSpeedRef();
    [CompilerGeneratedAttribute]
public static ExifTag`1<string> get_GPSStatus();
    [CompilerGeneratedAttribute]
public static ExifTag`1<string> get_GPSTrackRef();
    [CompilerGeneratedAttribute]
public static ExifTag`1<string> get_HostComputer();
    [CompilerGeneratedAttribute]
public static ExifTag`1<string> get_ImageDescription();
    [CompilerGeneratedAttribute]
public static ExifTag`1<string> get_ImageID();
    [CompilerGeneratedAttribute]
public static ExifTag`1<string> get_ImageHistory();
    [CompilerGeneratedAttribute]
public static ExifTag`1<string> get_ImageUniqueID();
    [CompilerGeneratedAttribute]
public static ExifTag`1<string> get_InkNames();
    [CompilerGeneratedAttribute]
public static ExifTag`1<string> get_LensMake();
    [CompilerGeneratedAttribute]
public static ExifTag`1<string> get_LensModel();
    [CompilerGeneratedAttribute]
public static ExifTag`1<string> get_LensSerialNumber();
    [CompilerGeneratedAttribute]
public static ExifTag`1<string> get_Make();
    public static ExifTag`1<string> get_MDFileUnits();
    [CompilerGeneratedAttribute]
public static ExifTag`1<string> get_MDLabName();
    [CompilerGeneratedAttribute]
public static ExifTag`1<string> get_MDPrepDate();
    [CompilerGeneratedAttribute]
public static ExifTag`1<string> get_MDPrepTime();
    [CompilerGeneratedAttribute]
public static ExifTag`1<string> get_MDSampleInfo();
    [CompilerGeneratedAttribute]
public static ExifTag`1<string> get_Model();
    [CompilerGeneratedAttribute]
public static ExifTag`1<string> get_OffsetTime();
    [CompilerGeneratedAttribute]
public static ExifTag`1<string> get_OffsetTimeDigitized();
    [CompilerGeneratedAttribute]
public static ExifTag`1<string> get_OffsetTimeOriginal();
    [CompilerGeneratedAttribute]
public static ExifTag`1<string> get_OwnerName();
    [CompilerGeneratedAttribute]
public static ExifTag`1<string> get_PageName();
    [CompilerGeneratedAttribute]
public static ExifTag`1<string> get_RelatedSoundFile();
    [CompilerGeneratedAttribute]
public static ExifTag`1<string> get_SecurityClassification();
    [CompilerGeneratedAttribute]
public static ExifTag`1<string> get_SEMInfo();
    [CompilerGeneratedAttribute]
public static ExifTag`1<string> get_SpectralSensitivity();
    [CompilerGeneratedAttribute]
public static ExifTag`1<string> get_Software();
    [CompilerGeneratedAttribute]
public static ExifTag`1<string> get_SubsecTime();
    [CompilerGeneratedAttribute]
public static ExifTag`1<string> get_SubsecTimeDigitized();
    [CompilerGeneratedAttribute]
public static ExifTag`1<string> get_SubsecTimeOriginal();
    [CompilerGeneratedAttribute]
public static ExifTag`1<string> get_TargetPrinter();
    [CompilerGeneratedAttribute]
public static ExifTag`1<string> get_SerialNumber();
    [CompilerGeneratedAttribute]
public static ExifTag`1<Byte[]> get_CFAPattern();
    [CompilerGeneratedAttribute]
public static ExifTag`1<Byte[]> get_ComponentsConfiguration();
    [CompilerGeneratedAttribute]
public static ExifTag`1<Byte[]> get_DeviceSettingDescription();
    [CompilerGeneratedAttribute]
public static ExifTag`1<Byte[]> get_ExifVersion();
    [CompilerGeneratedAttribute]
public static ExifTag`1<byte> get_FileSource();
    [CompilerGeneratedAttribute]
public static ExifTag`1<Byte[]> get_FlashpixVersion();
    [CompilerGeneratedAttribute]
public static ExifTag`1<Byte[]> get_GPSProcessingMethod();
    [CompilerGeneratedAttribute]
public static ExifTag`1<Byte[]> get_GPSAreaInformation();
    [CompilerGeneratedAttribute]
public static ExifTag`1<Byte[]> get_ImageSourceData();
    [CompilerGeneratedAttribute]
public static ExifTag`1<Byte[]> get_JPEGTables();
    [CompilerGeneratedAttribute]
public static ExifTag`1<Byte[]> get_MakerNote();
    [CompilerGeneratedAttribute]
public static ExifTag`1<Byte[]> get_Noise();
    [CompilerGeneratedAttribute]
public static ExifTag`1<Byte[]> get_SpatialFrequencyResponse();
    [CompilerGeneratedAttribute]
public static ExifTag`1<Byte[]> get_SpatialFrequencyResponse2();
    [CompilerGeneratedAttribute]
public static ExifTag`1<Byte[]> get_OECF();
    [CompilerGeneratedAttribute]
public static ExifTag`1<byte> get_SceneType();
    [CompilerGeneratedAttribute]
public static ExifTag`1<Byte[]> get_UserComment();
}
public class ImageMagick.ExifTag`1 : ExifTag {
    internal ExifTag`1(ExifTagValue value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("256")]
internal class ImageMagick.ExifTagDescriptionAttribute : Attribute {
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    public object Value { get; }
    public string Description { get; }
    public ExifTagDescriptionAttribute(object value, string description);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public string get_Description();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class ImageMagick.ExifTagDescriptions : object {
    [CompilerGeneratedAttribute]
private static Dictionary`2<ExifTagValue, Dictionary`2<object, string>> <ForExifTagValue>k__BackingField;
    public static Dictionary`2<ExifTagValue, Dictionary`2<object, string>> ForExifTagValue { get; }
    private static ExifTagDescriptions();
    [CompilerGeneratedAttribute]
public static Dictionary`2<ExifTagValue, Dictionary`2<object, string>> get_ForExifTagValue();
}
internal static class ImageMagick.ExifTags : object {
    [NullableContextAttribute("1")]
public static ExifParts GetPart(ExifTag tag);
}
[ExifTagDescriptionAttribute]
public enum ImageMagick.ExifTagValue : Enum {
    public int value__;
    public static ExifTagValue Unknown;
    public static ExifTagValue SubIFDOffset;
    public static ExifTagValue GPSIFDOffset;
    [ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Full-resolution Image")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Reduced-resolution image")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Single page of multi-page image")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Single page of multi-page reduced-resolution image")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Transparency mask")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Transparency mask of reduced-resolution image")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Transparency mask of multi-page image")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Transparency mask of reduced-resolution multi-page image")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Alternate reduced-resolution image ")]
public static ExifTagValue SubfileType;
    [ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Full-resolution Image")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Reduced-resolution image")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Single page of multi-page image")]
public static ExifTagValue OldSubfileType;
    public static ExifTagValue ImageWidth;
    public static ExifTagValue ImageLength;
    public static ExifTagValue BitsPerSample;
    [ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Uncompressed")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "CCITT 1D")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "T4/Group 3 Fax")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "T6/Group 4 Fax")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "LZW")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "JPEG (old-style)")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "JPEG")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Adobe Deflate")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "JBIG B&W")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "JBIG Color")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "JPEG")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Kodak 262")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Next")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Sony ARW Compressed")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Packed RAW")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Samsung SRW Compressed")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "CCIRLEW")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Samsung SRW Compressed 2")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "PackBits")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Thunderscan")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Kodak KDC Compressed")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "IT8CTPAD")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "IT8LW")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "IT8MP")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "IT8BL")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "PixarFilm")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "PixarLog")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Deflate")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "DCS")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "JBIG")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "SGILog")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "SGILog24")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "JPEG 2000")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Nikon NEF Compressed")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "JBIG2 TIFF FX")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Microsoft Document Imaging (MDI) Binary Level Codec")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Microsoft Document Imaging (MDI) Progressive Transform Codec")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Microsoft Document Imaging (MDI) Vector")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Lossy JPEG")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Kodak DCR Compressed")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Pentax PEF Compressed")]
public static ExifTagValue Compression;
    [ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "WhiteIsZero")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "BlackIsZero")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "RGB")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "RGB Palette")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Transparency Mask")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "CMYK")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "YCbCr")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "CIELab")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "ICCLab")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "TULab")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Color Filter Array")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Pixar LogL")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Pixar LogLuv")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Linear Raw")]
public static ExifTagValue PhotometricInterpretation;
    [ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "No dithering or halftoning")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Ordered dither or halftone")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Randomized dither")]
public static ExifTagValue Thresholding;
    public static ExifTagValue CellWidth;
    public static ExifTagValue CellLength;
    [ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Normal")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Reversed")]
public static ExifTagValue FillOrder;
    public static ExifTagValue DocumentName;
    public static ExifTagValue ImageDescription;
    public static ExifTagValue Make;
    public static ExifTagValue Model;
    public static ExifTagValue StripOffsets;
    [ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Horizontal (normal)")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Mirror horizontal")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Rotate 180")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Mirror vertical")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Mirror horizontal and rotate 270 CW")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Rotate 90 CW")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Mirror horizontal and rotate 90 CW")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Rotate 270 CW")]
public static ExifTagValue Orientation;
    public static ExifTagValue SamplesPerPixel;
    public static ExifTagValue RowsPerStrip;
    public static ExifTagValue StripByteCounts;
    public static ExifTagValue MinSampleValue;
    public static ExifTagValue MaxSampleValue;
    public static ExifTagValue XResolution;
    public static ExifTagValue YResolution;
    [ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Chunky")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Planar")]
public static ExifTagValue PlanarConfiguration;
    public static ExifTagValue PageName;
    public static ExifTagValue XPosition;
    public static ExifTagValue YPosition;
    public static ExifTagValue FreeOffsets;
    public static ExifTagValue FreeByteCounts;
    [ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "0.1")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "0.001")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "0.0001")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "1e-05")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "1e-06")]
public static ExifTagValue GrayResponseUnit;
    public static ExifTagValue GrayResponseCurve;
    [ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "2-Dimensional encoding")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Uncompressed")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Fill bits added")]
public static ExifTagValue T4Options;
    [ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Uncompressed")]
public static ExifTagValue T6Options;
    [ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "None")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Inches")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Centimeter")]
public static ExifTagValue ResolutionUnit;
    public static ExifTagValue PageNumber;
    public static ExifTagValue ColorResponseUnit;
    public static ExifTagValue TransferFunction;
    public static ExifTagValue Software;
    public static ExifTagValue DateTime;
    public static ExifTagValue Artist;
    public static ExifTagValue HostComputer;
    public static ExifTagValue Predictor;
    public static ExifTagValue WhitePoint;
    public static ExifTagValue PrimaryChromaticities;
    public static ExifTagValue ColorMap;
    public static ExifTagValue HalftoneHints;
    public static ExifTagValue TileWidth;
    public static ExifTagValue TileLength;
    public static ExifTagValue TileOffsets;
    public static ExifTagValue TileByteCounts;
    public static ExifTagValue BadFaxLines;
    [ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Clean")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Regenerated")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Unclean")]
public static ExifTagValue CleanFaxData;
    public static ExifTagValue ConsecutiveBadFaxLines;
    [ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "CMYK")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Not CMYK")]
public static ExifTagValue InkSet;
    public static ExifTagValue InkNames;
    public static ExifTagValue NumberOfInks;
    public static ExifTagValue DotRange;
    public static ExifTagValue TargetPrinter;
    [ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Unspecified")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Associated Alpha")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Unassociated Alpha")]
public static ExifTagValue ExtraSamples;
    [ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Unsigned")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Signed")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Float")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Undefined")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Complex int")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Complex float")]
public static ExifTagValue SampleFormat;
    public static ExifTagValue SMinSampleValue;
    public static ExifTagValue SMaxSampleValue;
    public static ExifTagValue TransferRange;
    public static ExifTagValue ClipPath;
    public static ExifTagValue XClipPathUnits;
    public static ExifTagValue YClipPathUnits;
    [ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Not indexed")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Indexed")]
public static ExifTagValue Indexed;
    public static ExifTagValue JPEGTables;
    [ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Higher resolution image does not exist")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Higher resolution image exists")]
public static ExifTagValue OPIProxy;
    [ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Unspecified")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Group 3 FAX")]
public static ExifTagValue ProfileType;
    [ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Unknown")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Minimal B&W lossless, S")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Extended B&W lossless, F")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Lossless JBIG B&W, J")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Lossy color and grayscale, C")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Lossless color and grayscale, L")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Mixed raster content, M")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Profile T")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Multi Profiles")]
public static ExifTagValue FaxProfile;
    [ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Unspecified compression")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Modified Huffman")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Modified Read")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Modified MR")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "JBIG")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Baseline JPEG")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "JBIG color")]
public static ExifTagValue CodingMethods;
    public static ExifTagValue VersionYear;
    public static ExifTagValue ModeNumber;
    public static ExifTagValue Decode;
    public static ExifTagValue DefaultImageColor;
    public static ExifTagValue T82ptions;
    [ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Baseline")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Lossless")]
public static ExifTagValue JPEGProc;
    public static ExifTagValue JPEGInterchangeFormat;
    public static ExifTagValue JPEGInterchangeFormatLength;
    public static ExifTagValue JPEGRestartInterval;
    public static ExifTagValue JPEGLosslessPredictors;
    public static ExifTagValue JPEGPointTransforms;
    public static ExifTagValue JPEGQTables;
    public static ExifTagValue JPEGDCTables;
    public static ExifTagValue JPEGACTables;
    public static ExifTagValue YCbCrCoefficients;
    public static ExifTagValue YCbCrSubsampling;
    [ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Centered")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Co-sited")]
public static ExifTagValue YCbCrPositioning;
    public static ExifTagValue ReferenceBlackWhite;
    public static ExifTagValue StripRowCounts;
    public static ExifTagValue XMP;
    public static ExifTagValue Rating;
    public static ExifTagValue RatingPercent;
    public static ExifTagValue ImageID;
    public static ExifTagValue CFARepeatPatternDim;
    public static ExifTagValue CFAPattern2;
    public static ExifTagValue BatteryLevel;
    public static ExifTagValue Copyright;
    public static ExifTagValue ExposureTime;
    public static ExifTagValue FNumber;
    public static ExifTagValue MDFileTag;
    public static ExifTagValue MDScalePixel;
    public static ExifTagValue MDLabName;
    public static ExifTagValue MDSampleInfo;
    public static ExifTagValue MDPrepDate;
    public static ExifTagValue MDPrepTime;
    public static ExifTagValue MDFileUnits;
    public static ExifTagValue PixelScale;
    public static ExifTagValue IntergraphPacketData;
    public static ExifTagValue IntergraphRegisters;
    public static ExifTagValue IntergraphMatrix;
    public static ExifTagValue ModelTiePoint;
    public static ExifTagValue SEMInfo;
    public static ExifTagValue ModelTransform;
    public static ExifTagValue ImageLayer;
    [ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Not Defined")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Manual")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Program AE")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Aperture-priority AE")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Shutter speed priority AE")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Creative (Slow speed)")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Action (High speed)")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Portrait")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Landscape")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Bulb")]
public static ExifTagValue ExposureProgram;
    public static ExifTagValue SpectralSensitivity;
    public static ExifTagValue ISOSpeedRatings;
    public static ExifTagValue OECF;
    public static ExifTagValue Interlace;
    public static ExifTagValue TimeZoneOffset;
    public static ExifTagValue SelfTimerMode;
    [ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Unknown")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Standard Output Sensitivity")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Recommended Exposure Index")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "ISO Speed")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Standard Output Sensitivity and Recommended Exposure Index")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Standard Output Sensitivity and ISO Speed")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Recommended Exposure Index and ISO Speed")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Standard Output Sensitivity, Recommended Exposure Index and ISO Speed")]
public static ExifTagValue SensitivityType;
    public static ExifTagValue StandardOutputSensitivity;
    public static ExifTagValue RecommendedExposureIndex;
    public static ExifTagValue ISOSpeed;
    public static ExifTagValue ISOSpeedLatitudeyyy;
    public static ExifTagValue ISOSpeedLatitudezzz;
    public static ExifTagValue FaxRecvParams;
    public static ExifTagValue FaxSubaddress;
    public static ExifTagValue FaxRecvTime;
    public static ExifTagValue ExifVersion;
    public static ExifTagValue DateTimeOriginal;
    public static ExifTagValue DateTimeDigitized;
    public static ExifTagValue OffsetTime;
    public static ExifTagValue OffsetTimeOriginal;
    public static ExifTagValue OffsetTimeDigitized;
    public static ExifTagValue ComponentsConfiguration;
    public static ExifTagValue CompressedBitsPerPixel;
    public static ExifTagValue ShutterSpeedValue;
    public static ExifTagValue ApertureValue;
    public static ExifTagValue BrightnessValue;
    public static ExifTagValue ExposureBiasValue;
    public static ExifTagValue MaxApertureValue;
    public static ExifTagValue SubjectDistance;
    [ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Unknown")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Average")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Center-weighted average")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Spot")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Multi-spot")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Multi-segment")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Partial")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Other")]
public static ExifTagValue MeteringMode;
    [ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Unknown")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Daylight")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Fluorescent")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Tungsten (Incandescent)")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Flash")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Fine Weather")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Cloudy")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Shade")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Daylight Fluorescent")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Day White Fluorescent")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Cool White Fluorescent")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "White Fluorescent")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Warm White Fluorescent")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Standard Light A")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Standard Light B")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Standard Light C")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "D55")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "D65")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "D75")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "D50")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "ISO Studio Tungsten")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Other")]
public static ExifTagValue LightSource;
    [ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "No Flash")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Fired")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Fired, Return not detected")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Fired, Return detected")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "On, Did not fire")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "On, Fired")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "On, Return not detected")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "On, Return detected")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Off, Did not fire")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Off, Did not fire, Return not detected")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Auto, Did not fire")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Auto, Fired")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Auto, Fired, Return not detected")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Auto, Fired, Return detected")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "No flash function")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Off, No flash function")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Fired, Red-eye reduction")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Fired, Red-eye reduction, Return not detected")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Fired, Red-eye reduction, Return detected")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "On, Red-eye reduction")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "On, Red-eye reduction, Return not detected")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "On, Red-eye reduction, Return detected")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Off, Red-eye reduction")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Auto, Did not fire, Red-eye reduction")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Auto, Fired, Red-eye reduction")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Auto, Fired, Red-eye reduction, Return not detected")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Auto, Fired, Red-eye reduction, Return detected")]
public static ExifTagValue Flash;
    public static ExifTagValue FocalLength;
    public static ExifTagValue FlashEnergy2;
    public static ExifTagValue SpatialFrequencyResponse2;
    public static ExifTagValue Noise;
    public static ExifTagValue FocalPlaneXResolution2;
    public static ExifTagValue FocalPlaneYResolution2;
    [ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "None")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Inches")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Centimeter")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Millimeter")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Micrometer")]
public static ExifTagValue FocalPlaneResolutionUnit2;
    public static ExifTagValue ImageNumber;
    [ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Confidential")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Restricted")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Secret")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Top Secret")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Unclassified")]
public static ExifTagValue SecurityClassification;
    public static ExifTagValue ImageHistory;
    public static ExifTagValue SubjectArea;
    public static ExifTagValue ExposureIndex2;
    public static ExifTagValue TIFFEPStandardID;
    [ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Not defined")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "One-chip color area")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Two-chip color area")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Three-chip color area")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Color sequential area")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Trilinear")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Color sequential linear")]
public static ExifTagValue SensingMethod2;
    public static ExifTagValue MakerNote;
    public static ExifTagValue UserComment;
    public static ExifTagValue SubsecTime;
    public static ExifTagValue SubsecTimeOriginal;
    public static ExifTagValue SubsecTimeDigitized;
    public static ExifTagValue ImageSourceData;
    public static ExifTagValue AmbientTemperature;
    public static ExifTagValue Humidity;
    public static ExifTagValue Pressure;
    public static ExifTagValue WaterDepth;
    public static ExifTagValue Acceleration;
    public static ExifTagValue CameraElevationAngle;
    public static ExifTagValue XPTitle;
    public static ExifTagValue XPComment;
    public static ExifTagValue XPAuthor;
    public static ExifTagValue XPKeywords;
    public static ExifTagValue XPSubject;
    public static ExifTagValue FlashpixVersion;
    [ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "sRGB")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Adobe RGB")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Wide Gamut RGB")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "ICC Profile")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Uncalibrated")]
public static ExifTagValue ColorSpace;
    public static ExifTagValue PixelXDimension;
    public static ExifTagValue PixelYDimension;
    public static ExifTagValue RelatedSoundFile;
    public static ExifTagValue FlashEnergy;
    public static ExifTagValue SpatialFrequencyResponse;
    public static ExifTagValue FocalPlaneXResolution;
    public static ExifTagValue FocalPlaneYResolution;
    [ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "None")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Inches")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Centimeter")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Millimeter")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Micrometer")]
public static ExifTagValue FocalPlaneResolutionUnit;
    public static ExifTagValue SubjectLocation;
    public static ExifTagValue ExposureIndex;
    [ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Not defined")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "One-chip color area")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Two-chip color area")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Three-chip color area")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Color sequential area")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Trilinear")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Color sequential linear")]
public static ExifTagValue SensingMethod;
    public static ExifTagValue FileSource;
    public static ExifTagValue SceneType;
    public static ExifTagValue CFAPattern;
    [ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Normal")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Custom")]
public static ExifTagValue CustomRendered;
    [ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Auto")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Manual")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Auto bracket")]
public static ExifTagValue ExposureMode;
    [ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Auto")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Manual")]
public static ExifTagValue WhiteBalance;
    public static ExifTagValue DigitalZoomRatio;
    public static ExifTagValue FocalLengthIn35mmFilm;
    [ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Standard")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Landscape")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Portrait")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Night")]
public static ExifTagValue SceneCaptureType;
    [ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "None")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Low gain up")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "High gain up")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Low gain down")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "High gain down")]
public static ExifTagValue GainControl;
    [ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Normal")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Low")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "High")]
public static ExifTagValue Contrast;
    [ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Normal")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Low")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "High")]
public static ExifTagValue Saturation;
    [ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Normal")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Soft")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Hard")]
public static ExifTagValue Sharpness;
    public static ExifTagValue DeviceSettingDescription;
    [ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Unknown")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Macro")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Close")]
[ExifTagDescriptionAttribute("Mono.Cecil.CustomAttributeArgument", "Distant")]
public static ExifTagValue SubjectDistanceRange;
    public static ExifTagValue ImageUniqueID;
    public static ExifTagValue OwnerName;
    public static ExifTagValue SerialNumber;
    public static ExifTagValue LensInfo;
    public static ExifTagValue LensMake;
    public static ExifTagValue LensModel;
    public static ExifTagValue LensSerialNumber;
    public static ExifTagValue GDALMetadata;
    public static ExifTagValue GDALNoData;
    public static ExifTagValue GPSVersionID;
    public static ExifTagValue GPSLatitudeRef;
    public static ExifTagValue GPSLatitude;
    public static ExifTagValue GPSLongitudeRef;
    public static ExifTagValue GPSLongitude;
    public static ExifTagValue GPSAltitudeRef;
    public static ExifTagValue GPSAltitude;
    public static ExifTagValue GPSTimestamp;
    public static ExifTagValue GPSSatellites;
    public static ExifTagValue GPSStatus;
    public static ExifTagValue GPSMeasureMode;
    public static ExifTagValue GPSDOP;
    public static ExifTagValue GPSSpeedRef;
    public static ExifTagValue GPSSpeed;
    public static ExifTagValue GPSTrackRef;
    public static ExifTagValue GPSTrack;
    public static ExifTagValue GPSImgDirectionRef;
    public static ExifTagValue GPSImgDirection;
    public static ExifTagValue GPSMapDatum;
    public static ExifTagValue GPSDestLatitudeRef;
    public static ExifTagValue GPSDestLatitude;
    public static ExifTagValue GPSDestLongitudeRef;
    public static ExifTagValue GPSDestLongitude;
    public static ExifTagValue GPSDestBearingRef;
    public static ExifTagValue GPSDestBearing;
    public static ExifTagValue GPSDestDistanceRef;
    public static ExifTagValue GPSDestDistance;
    public static ExifTagValue GPSProcessingMethod;
    public static ExifTagValue GPSAreaInformation;
    public static ExifTagValue GPSDateStamp;
    public static ExifTagValue GPSDifferential;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class ImageMagick.ExifValue : object {
    [CompilerGeneratedAttribute]
private ExifTag <Tag>k__BackingField;
    public ExifDataType DataType { get; }
    public bool IsArray { get; }
    public ExifTag Tag { get; }
    public ExifValue(ExifTag tag);
    public ExifValue(ExifTagValue tag);
    public abstract virtual ExifDataType get_DataType();
    public abstract virtual bool get_IsArray();
    [CompilerGeneratedAttribute]
public sealed virtual ExifTag get_Tag();
    [NullableContextAttribute("2")]
public static bool op_Equality(ExifValue left, ExifTag right);
    [NullableContextAttribute("2")]
public static bool op_Inequality(ExifValue left, ExifTag right);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(ExifTag other);
    public virtual int GetHashCode();
    public abstract virtual object GetValue();
    public abstract virtual bool SetValue(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class ImageMagick.ExifValue`1 : ExifValue {
    [CompilerGeneratedAttribute]
private TValueType <Value>k__BackingField;
    public bool IsArray { get; }
    public TValueType Value { get; public set; }
    protected string StringValue { get; }
    public ExifValue`1(ExifTag`1<TValueType> tag, TValueType value);
    public ExifValue`1(ExifTagValue tag, TValueType value);
    public virtual bool get_IsArray();
    [CompilerGeneratedAttribute]
public sealed virtual TValueType get_Value();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Value(TValueType value);
    protected abstract virtual string get_StringValue();
    public virtual object GetValue();
    public virtual bool SetValue(object value);
    [NullableContextAttribute("2")]
public virtual string ToString();
    private static string GetDescription(ExifTag tag, object value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal static class ImageMagick.ExifValues : object {
    public static ExifValue Create(ExifTagValue tag);
    [NullableContextAttribute("1")]
public static ExifValue Create(ExifTag tag);
    public static ExifValue Create(ExifTagValue tag, ExifDataType dataType, UInt32 numberOfComponents);
    private static ExifValue CreateValue(ExifTagValue tag);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class ImageMagick.ExifWriter : object {
    private static int HeaderSize;
    private ExifParts _allowedParts;
    public ExifWriter(ExifParts allowedParts);
    public Byte[] Write(Collection`1<IExifValue> values);
    private static void RemoveOffsetValues(Collection`1<IExifValue> ifdValues, ExifTag[] offsetTags);
    private static long GetOffsetPositionAndSkipData(MemoryStream stream);
    private static UInt32 PositionToOffset(long offset);
    private static void WriteHeaders(MemoryStream stream, Collection`1<IExifValue> values);
    private static void WriteHeaders(MemoryStream stream, Collection`1<IExifValue> values, ushort countDelta);
    private static void WriteHeader(MemoryStream stream, IExifValue value);
    private static void WriteCurrentOffset(MemoryStream stream, long position);
    private static void WritePosition(MemoryStream stream, long position);
    private static UInt32 GetLength(IExifValue value);
    private static UInt32 GetNumberOfComponents(IExifValue exifValue);
    private static bool HasValue(IExifValue exifValue);
    private static void WriteValues(MemoryStream stream, Collection`1<IExifValue> values);
    private static void WriteValue(MemoryStream stream, IExifValue exifValue);
    private static void WriteArray(MemoryStream stream, IExifValue exifValue);
    private static void WriteValue(MemoryStream stream, ExifDataType dataType, object value);
    private static void WriteRational(MemoryStream stream, Rational value);
    private static void WriteSignedRational(MemoryStream stream, SignedRational value);
    private Collection`1<IExifValue> GetPartValues(Collection`1<IExifValue> values, ExifParts part);
}
public interface ImageMagick.Factories.IDrawablesFactory`1 {
    public abstract virtual IDrawables`1<TQuantumType> Create();
}
public interface ImageMagick.Factories.IMagickColorFactory`1 {
    public abstract virtual IMagickColor`1<TQuantumType> Create();
    public abstract virtual IMagickColor`1<TQuantumType> Create(IMagickColor`1<TQuantumType> color);
    public abstract virtual IMagickColor`1<TQuantumType> Create(TQuantumType red, TQuantumType green, TQuantumType blue);
    public abstract virtual IMagickColor`1<TQuantumType> Create(TQuantumType red, TQuantumType green, TQuantumType blue, TQuantumType alpha);
    public abstract virtual IMagickColor`1<TQuantumType> Create(TQuantumType cyan, TQuantumType magenta, TQuantumType yellow, TQuantumType black, TQuantumType alpha);
    [NullableContextAttribute("1")]
public abstract virtual IMagickColor`1<TQuantumType> Create(string color);
}
[NullableContextAttribute("1")]
public interface ImageMagick.Factories.IMagickFactory {
    public IConfigurationFiles ConfigurationFiles { get; }
    public IMagickGeometryFactory Geometry { get; }
    public IMagickImageInfoFactory ImageInfo { get; }
    public IMagickNET MagickNET { get; }
    public IMatrixFactory Matrix { get; }
    public IOpenCL OpenCL { get; }
    public IResourceLimits ResourceLimits { get; }
    public abstract virtual IConfigurationFiles get_ConfigurationFiles();
    public abstract virtual IMagickGeometryFactory get_Geometry();
    public abstract virtual IMagickImageInfoFactory get_ImageInfo();
    public abstract virtual IMagickNET get_MagickNET();
    public abstract virtual IMatrixFactory get_Matrix();
    public abstract virtual IOpenCL get_OpenCL();
    public abstract virtual IResourceLimits get_ResourceLimits();
}
public interface ImageMagick.Factories.IMagickFactory`1 {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColorFactory`1<TQuantumType> Color { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColors`1<TQuantumType> Colors { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDrawablesFactory`1<TQuantumType> Drawables { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickImageFactory`1<TQuantumType> Image { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickImageCollectionFactory`1<TQuantumType> ImageCollection { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IQuantum`1<TQuantumType> Quantum { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ISettingsFactory`1<TQuantumType> Settings { get; }
    public abstract virtual IMagickColorFactory`1<TQuantumType> get_Color();
    public abstract virtual IMagickColors`1<TQuantumType> get_Colors();
    public abstract virtual IDrawablesFactory`1<TQuantumType> get_Drawables();
    public abstract virtual IMagickImageFactory`1<TQuantumType> get_Image();
    public abstract virtual IMagickImageCollectionFactory`1<TQuantumType> get_ImageCollection();
    public abstract virtual IQuantum`1<TQuantumType> get_Quantum();
    public abstract virtual ISettingsFactory`1<TQuantumType> get_Settings();
}
[NullableContextAttribute("1")]
public interface ImageMagick.Factories.IMagickGeometryFactory {
    public abstract virtual IMagickGeometry Create();
    public abstract virtual IMagickGeometry Create(UInt32 widthAndHeight);
    public abstract virtual IMagickGeometry Create(UInt32 width, UInt32 height);
    public abstract virtual IMagickGeometry Create(int x, int y, UInt32 width, UInt32 height);
    public abstract virtual IMagickGeometry Create(Percentage percentageWidth, Percentage percentageHeight);
    public abstract virtual IMagickGeometry Create(int x, int y, Percentage percentageWidth, Percentage percentageHeight);
    public abstract virtual IMagickGeometry Create(string value);
    public abstract virtual IMagickGeometry CreateFromPageSize(string pageSize);
}
[NullableContextAttribute("1")]
public interface ImageMagick.Factories.IMagickImageCollectionFactory`1 {
    public abstract virtual IMagickImageCollection`1<TQuantumType> Create();
    public abstract virtual IMagickImageCollection`1<TQuantumType> Create(Byte[] data);
    public abstract virtual IMagickImageCollection`1<TQuantumType> Create(Byte[] data, UInt32 offset, UInt32 count);
    public abstract virtual IMagickImageCollection`1<TQuantumType> Create(Byte[] data, UInt32 offset, UInt32 count, IMagickReadSettings`1<TQuantumType> readSettings);
    public abstract virtual IMagickImageCollection`1<TQuantumType> Create(Byte[] data, IMagickReadSettings`1<TQuantumType> readSettings);
    public abstract virtual IMagickImageCollection`1<TQuantumType> Create(FileInfo file);
    public abstract virtual IMagickImageCollection`1<TQuantumType> Create(FileInfo file, IMagickReadSettings`1<TQuantumType> readSettings);
    public abstract virtual IMagickImageCollection`1<TQuantumType> Create(IEnumerable`1<IMagickImage`1<TQuantumType>> images);
    public abstract virtual IMagickImageCollection`1<TQuantumType> Create(Stream stream);
    public abstract virtual IMagickImageCollection`1<TQuantumType> Create(Stream stream, IMagickReadSettings`1<TQuantumType> readSettings);
    public abstract virtual IMagickImageCollection`1<TQuantumType> Create(string fileName);
    public abstract virtual IMagickImageCollection`1<TQuantumType> Create(string fileName, IMagickReadSettings`1<TQuantumType> readSettings);
    public abstract virtual Task`1<IMagickImageCollection`1<TQuantumType>> CreateAsync(FileInfo file);
    public abstract virtual Task`1<IMagickImageCollection`1<TQuantumType>> CreateAsync(FileInfo file, CancellationToken cancellationToken);
    public abstract virtual Task`1<IMagickImageCollection`1<TQuantumType>> CreateAsync(FileInfo file, IMagickReadSettings`1<TQuantumType> readSettings);
    public abstract virtual Task`1<IMagickImageCollection`1<TQuantumType>> CreateAsync(FileInfo file, IMagickReadSettings`1<TQuantumType> readSettings, CancellationToken cancellationToken);
    public abstract virtual Task`1<IMagickImageCollection`1<TQuantumType>> CreateAsync(string fileName);
    public abstract virtual Task`1<IMagickImageCollection`1<TQuantumType>> CreateAsync(string fileName, CancellationToken cancellationToken);
    public abstract virtual Task`1<IMagickImageCollection`1<TQuantumType>> CreateAsync(string fileName, IMagickReadSettings`1<TQuantumType> readSettings);
    public abstract virtual Task`1<IMagickImageCollection`1<TQuantumType>> CreateAsync(string fileName, IMagickReadSettings`1<TQuantumType> readSettings, CancellationToken cancellationToken);
    public abstract virtual Task`1<IMagickImageCollection`1<TQuantumType>> CreateAsync(Stream stream);
    public abstract virtual Task`1<IMagickImageCollection`1<TQuantumType>> CreateAsync(Stream stream, CancellationToken cancellationToken);
    public abstract virtual Task`1<IMagickImageCollection`1<TQuantumType>> CreateAsync(Stream stream, IMagickReadSettings`1<TQuantumType> readSettings);
    public abstract virtual Task`1<IMagickImageCollection`1<TQuantumType>> CreateAsync(Stream stream, IMagickReadSettings`1<TQuantumType> readSettings, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public abstract virtual IMagickImageCollection`1<TQuantumType> Create(ReadOnlySequence`1<byte> data);
    [NullableContextAttribute("0")]
public abstract virtual IMagickImageCollection`1<TQuantumType> Create(ReadOnlySequence`1<byte> data, IMagickReadSettings`1<TQuantumType> readSettings);
    [NullableContextAttribute("0")]
public abstract virtual IMagickImageCollection`1<TQuantumType> Create(ReadOnlySpan`1<byte> data);
    [NullableContextAttribute("0")]
public abstract virtual IMagickImageCollection`1<TQuantumType> Create(ReadOnlySpan`1<byte> data, IMagickReadSettings`1<TQuantumType> readSettings);
}
[NullableContextAttribute("1")]
public interface ImageMagick.Factories.IMagickImageFactory`1 {
    public abstract virtual IMagickImage`1<TQuantumType> Create();
    public abstract virtual IMagickImage`1<TQuantumType> Create(Byte[] data);
    public abstract virtual IMagickImage`1<TQuantumType> Create(Byte[] data, UInt32 offset, UInt32 count);
    public abstract virtual IMagickImage`1<TQuantumType> Create(Byte[] data, UInt32 offset, UInt32 count, IMagickReadSettings`1<TQuantumType> readSettings);
    public abstract virtual IMagickImage`1<TQuantumType> Create(Byte[] data, IMagickReadSettings`1<TQuantumType> readSettings);
    public abstract virtual IMagickImage`1<TQuantumType> Create(FileInfo file);
    public abstract virtual IMagickImage`1<TQuantumType> Create(FileInfo file, IMagickReadSettings`1<TQuantumType> readSettings);
    public abstract virtual IMagickImage`1<TQuantumType> Create(IMagickColor`1<TQuantumType> color, UInt32 width, UInt32 height);
    public abstract virtual IMagickImage`1<TQuantumType> Create(Stream stream);
    public abstract virtual IMagickImage`1<TQuantumType> Create(Stream stream, IMagickReadSettings`1<TQuantumType> readSettings);
    public abstract virtual IMagickImage`1<TQuantumType> Create(string fileName);
    public abstract virtual IMagickImage`1<TQuantumType> Create(string fileName, UInt32 width, UInt32 height);
    public abstract virtual IMagickImage`1<TQuantumType> Create(string fileName, IMagickReadSettings`1<TQuantumType> readSettings);
    public abstract virtual Task`1<IMagickImage`1<TQuantumType>> CreateAsync(FileInfo file);
    public abstract virtual Task`1<IMagickImage`1<TQuantumType>> CreateAsync(FileInfo file, CancellationToken cancellationToken);
    public abstract virtual Task`1<IMagickImage`1<TQuantumType>> CreateAsync(FileInfo file, IMagickReadSettings`1<TQuantumType> readSettings);
    public abstract virtual Task`1<IMagickImage`1<TQuantumType>> CreateAsync(FileInfo file, IMagickReadSettings`1<TQuantumType> readSettings, CancellationToken cancellationToken);
    public abstract virtual Task`1<IMagickImage`1<TQuantumType>> CreateAsync(FileInfo file, IPixelReadSettings`1<TQuantumType> settings);
    public abstract virtual Task`1<IMagickImage`1<TQuantumType>> CreateAsync(FileInfo file, IPixelReadSettings`1<TQuantumType> settings, CancellationToken cancellationToken);
    public abstract virtual Task`1<IMagickImage`1<TQuantumType>> CreateAsync(string fileName);
    public abstract virtual Task`1<IMagickImage`1<TQuantumType>> CreateAsync(string fileName, CancellationToken cancellationToken);
    public abstract virtual Task`1<IMagickImage`1<TQuantumType>> CreateAsync(string fileName, IMagickReadSettings`1<TQuantumType> readSettings);
    public abstract virtual Task`1<IMagickImage`1<TQuantumType>> CreateAsync(string fileName, IMagickReadSettings`1<TQuantumType> readSettings, CancellationToken cancellationToken);
    public abstract virtual Task`1<IMagickImage`1<TQuantumType>> CreateAsync(string fileName, IPixelReadSettings`1<TQuantumType> settings);
    public abstract virtual Task`1<IMagickImage`1<TQuantumType>> CreateAsync(string fileName, IPixelReadSettings`1<TQuantumType> settings, CancellationToken cancellationToken);
    public abstract virtual Task`1<IMagickImage`1<TQuantumType>> CreateAsync(Stream stream);
    public abstract virtual Task`1<IMagickImage`1<TQuantumType>> CreateAsync(Stream stream, CancellationToken cancellationToken);
    public abstract virtual Task`1<IMagickImage`1<TQuantumType>> CreateAsync(Stream stream, IMagickReadSettings`1<TQuantumType> readSettings);
    public abstract virtual Task`1<IMagickImage`1<TQuantumType>> CreateAsync(Stream stream, IMagickReadSettings`1<TQuantumType> readSettings, CancellationToken cancellationToken);
    public abstract virtual Task`1<IMagickImage`1<TQuantumType>> CreateAsync(Stream stream, IPixelReadSettings`1<TQuantumType> settings);
    public abstract virtual Task`1<IMagickImage`1<TQuantumType>> CreateAsync(Stream stream, IPixelReadSettings`1<TQuantumType> settings, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public abstract virtual IMagickImage`1<TQuantumType> Create(ReadOnlySequence`1<byte> data);
    [NullableContextAttribute("0")]
public abstract virtual IMagickImage`1<TQuantumType> Create(ReadOnlySequence`1<byte> data, IMagickReadSettings`1<TQuantumType> readSettings);
    [NullableContextAttribute("0")]
public abstract virtual IMagickImage`1<TQuantumType> Create(ReadOnlySpan`1<byte> data);
    [NullableContextAttribute("0")]
public abstract virtual IMagickImage`1<TQuantumType> Create(ReadOnlySpan`1<byte> data, IMagickReadSettings`1<TQuantumType> readSettings);
    [NullableContextAttribute("0")]
public abstract virtual IMagickImage`1<TQuantumType> Create(ReadOnlySpan`1<byte> data, IPixelReadSettings`1<TQuantumType> settings);
}
[NullableContextAttribute("1")]
public interface ImageMagick.Factories.IMagickImageInfoFactory {
    public abstract virtual IMagickImageInfo Create();
    public abstract virtual IMagickImageInfo Create(Byte[] data);
    public abstract virtual IMagickImageInfo Create(Byte[] data, UInt32 offset, UInt32 count);
    public abstract virtual IMagickImageInfo Create(FileInfo file);
    public abstract virtual IMagickImageInfo Create(Stream stream);
    public abstract virtual IMagickImageInfo Create(string fileName);
    [NullableContextAttribute("0")]
public abstract virtual IMagickImageInfo Create(ReadOnlySequence`1<byte> data);
    [NullableContextAttribute("0")]
public abstract virtual IMagickImageInfo Create(ReadOnlySpan`1<byte> data);
}
[NullableContextAttribute("1")]
public interface ImageMagick.Factories.IMagickImageInfoFactory`1 {
    public abstract virtual IMagickImageInfo Create(Byte[] data, IMagickReadSettings`1<TQuantumType> readSettings);
    public abstract virtual IMagickImageInfo Create(Byte[] data, UInt32 offset, UInt32 count, IMagickReadSettings`1<TQuantumType> readSettings);
    public abstract virtual IMagickImageInfo Create(FileInfo file, IMagickReadSettings`1<TQuantumType> readSettings);
    public abstract virtual IMagickImageInfo Create(Stream stream, IMagickReadSettings`1<TQuantumType> readSettings);
    public abstract virtual IMagickImageInfo Create(string fileName, IMagickReadSettings`1<TQuantumType> readSettings);
}
[NullableContextAttribute("1")]
public interface ImageMagick.Factories.IMatrixFactory {
    public abstract virtual IMagickColorMatrix CreateColorMatrix(UInt32 order);
    public abstract virtual IMagickColorMatrix CreateColorMatrix(UInt32 order, Double[] values);
    public abstract virtual IConvolveMatrix CreateConvolveMatrix(UInt32 order);
    public abstract virtual IConvolveMatrix CreateConvolveMatrix(UInt32 order, Double[] values);
}
[NullableContextAttribute("1")]
public interface ImageMagick.Factories.ISettingsFactory`1 {
    public abstract virtual ICompareSettings`1<TQuantumType> CreateCompareSettings(ErrorMetric metric);
    public abstract virtual IComplexSettings CreateComplexSettings(ComplexOperator complexOperator);
    public abstract virtual IConnectedComponentsSettings CreateConnectedComponentsSettings();
    public abstract virtual IDistortSettings CreateDistortSettings(DistortMethod method);
    public abstract virtual IKmeansSettings CreateKmeansSettings();
    public abstract virtual IMagickReadSettings`1<TQuantumType> CreateMagickReadSettings();
    public abstract virtual IMontageSettings`1<TQuantumType> CreateMontageSettings();
    public abstract virtual IMorphologySettings CreateMorphologySettings();
    public abstract virtual IPixelReadSettings`1<TQuantumType> CreatePixelReadSettings();
    public abstract virtual IQuantizeSettings CreateQuantizeSettings();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class ImageMagick.FileHelper : object {
    public static string CheckForBaseDirectory(string fileName);
    public static string GetFullPath(string path);
    [AsyncStateMachineAttribute("ImageMagick.FileHelper/<ReadAllBytesAsync>d__2")]
public static Task`1<Byte[]> ReadAllBytesAsync(string fileName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("ImageMagick.FileHelper/<WriteAllBytesAsync>d__3")]
internal static Task WriteAllBytesAsync(string fileName, Byte[] bytes, CancellationToken cancellationToken);
}
public enum ImageMagick.FillRule : Enum {
    public int value__;
    public static FillRule Undefined;
    public static FillRule EvenOdd;
    public static FillRule Nonzero;
}
public enum ImageMagick.FilterType : Enum {
    public int value__;
    public static FilterType Undefined;
    public static FilterType Point;
    public static FilterType Box;
    public static FilterType Triangle;
    public static FilterType Hermite;
    public static FilterType Hann;
    public static FilterType Hamming;
    public static FilterType Blackman;
    public static FilterType Gaussian;
    public static FilterType Quadratic;
    public static FilterType Cubic;
    public static FilterType Catrom;
    public static FilterType Mitchell;
    public static FilterType Jinc;
    public static FilterType Sinc;
    public static FilterType SincFast;
    public static FilterType Kaiser;
    public static FilterType Welch;
    public static FilterType Parzen;
    public static FilterType Bohman;
    public static FilterType Bartlett;
    public static FilterType Lagrange;
    public static FilterType Lanczos;
    public static FilterType LanczosSharp;
    public static FilterType Lanczos2;
    public static FilterType Lanczos2Sharp;
    public static FilterType Robidoux;
    public static FilterType RobidouxSharp;
    public static FilterType Cosine;
    public static FilterType Spline;
    public static FilterType LanczosRadius;
    public static FilterType CubicSpline;
}
public enum ImageMagick.FontStretch : Enum {
    public int value__;
    public static FontStretch Undefined;
    public static FontStretch Normal;
    public static FontStretch UltraCondensed;
    public static FontStretch ExtraCondensed;
    public static FontStretch Condensed;
    public static FontStretch SemiCondensed;
    public static FontStretch SemiExpanded;
    public static FontStretch Expanded;
    public static FontStretch ExtraExpanded;
    public static FontStretch UltraExpanded;
    public static FontStretch Any;
}
public enum ImageMagick.FontStyleType : Enum {
    public int value__;
    public static FontStyleType Undefined;
    public static FontStyleType Normal;
    public static FontStyleType Italic;
    public static FontStyleType Oblique;
    public static FontStyleType Any;
    public static FontStyleType Bold;
}
public enum ImageMagick.FontWeight : Enum {
    public int value__;
    public static FontWeight Undefined;
    public static FontWeight Thin;
    public static FontWeight ExtraLight;
    public static FontWeight UltraLight;
    public static FontWeight Light;
    public static FontWeight Normal;
    public static FontWeight Regular;
    public static FontWeight Medium;
    public static FontWeight DemiBold;
    public static FontWeight SemiBold;
    public static FontWeight Bold;
    public static FontWeight ExtraBold;
    public static FontWeight UltraBold;
    public static FontWeight Heavy;
    public static FontWeight Black;
}
public enum ImageMagick.GifDisposeMethod : Enum {
    public int value__;
    public static GifDisposeMethod Undefined;
    public static GifDisposeMethod None;
    public static GifDisposeMethod Background;
    public static GifDisposeMethod Previous;
}
public enum ImageMagick.Gravity : Enum {
    public int value__;
    public static Gravity Undefined;
    public static Gravity Forget;
    public static Gravity Northwest;
    public static Gravity North;
    public static Gravity Northeast;
    public static Gravity West;
    public static Gravity Center;
    public static Gravity East;
    public static Gravity Southwest;
    public static Gravity South;
    public static Gravity Southeast;
}
public interface ImageMagick.IChannelMoments {
    public PointD Centroid { get; }
    public PixelChannel Channel { get; }
    public PointD EllipseAxis { get; }
    public double EllipseAngle { get; }
    public double EllipseEccentricity { get; }
    public double EllipseIntensity { get; }
    public abstract virtual PointD get_Centroid();
    public abstract virtual PixelChannel get_Channel();
    public abstract virtual PointD get_EllipseAxis();
    public abstract virtual double get_EllipseAngle();
    public abstract virtual double get_EllipseEccentricity();
    public abstract virtual double get_EllipseIntensity();
    public abstract virtual double HuInvariants(int index);
}
[NullableContextAttribute("1")]
public interface ImageMagick.IChannelPerceptualHash {
    public PixelChannel Channel { get; }
    public abstract virtual PixelChannel get_Channel();
    public abstract virtual double HuPhash(ColorSpace colorSpace, int index);
    public abstract virtual double SumSquaredDistance(IChannelPerceptualHash other);
    public abstract virtual string ToString();
}
public interface ImageMagick.IChannelStatistics {
    public PixelChannel Channel { get; }
    public UInt32 Depth { get; }
    public double Entropy { get; }
    public double Kurtosis { get; }
    public double Maximum { get; }
    public double Mean { get; }
    public double Minimum { get; }
    public double Skewness { get; }
    public double StandardDeviation { get; }
    public abstract virtual PixelChannel get_Channel();
    public abstract virtual UInt32 get_Depth();
    public abstract virtual double get_Entropy();
    public abstract virtual double get_Kurtosis();
    public abstract virtual double get_Maximum();
    public abstract virtual double get_Mean();
    public abstract virtual double get_Minimum();
    public abstract virtual double get_Skewness();
    public abstract virtual double get_StandardDeviation();
}
[NullableContextAttribute("1")]
public interface ImageMagick.IChromaticityInfo {
    public IPrimaryInfo Blue { get; }
    public IPrimaryInfo Green { get; }
    public IPrimaryInfo Red { get; }
    public IPrimaryInfo White { get; }
    public abstract virtual IPrimaryInfo get_Blue();
    public abstract virtual IPrimaryInfo get_Green();
    public abstract virtual IPrimaryInfo get_Red();
    public abstract virtual IPrimaryInfo get_White();
}
[NullableContextAttribute("1")]
public interface ImageMagick.IClipPath {
    public string Name { get; }
    public IXPathNavigable Path { get; }
    public abstract virtual string get_Name();
    public abstract virtual IXPathNavigable get_Path();
}
[NullableContextAttribute("2")]
public interface ImageMagick.IColorProfile {
    public ColorSpace ColorSpace { get; }
    public string Copyright { get; }
    public string Description { get; }
    public string Manufacturer { get; }
    public string Model { get; }
    public abstract virtual ColorSpace get_ColorSpace();
    public abstract virtual string get_Copyright();
    public abstract virtual string get_Description();
    public abstract virtual string get_Manufacturer();
    public abstract virtual string get_Model();
}
public interface ImageMagick.ICompareSettings`1 {
    public ErrorMetric Metric { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> HighlightColor { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> LowlightColor { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> MasklightColor { get; public set; }
    public abstract virtual ErrorMetric get_Metric();
    public abstract virtual IMagickColor`1<TQuantumType> get_HighlightColor();
    public abstract virtual void set_HighlightColor(IMagickColor`1<TQuantumType> value);
    public abstract virtual IMagickColor`1<TQuantumType> get_LowlightColor();
    public abstract virtual void set_LowlightColor(IMagickColor`1<TQuantumType> value);
    public abstract virtual IMagickColor`1<TQuantumType> get_MasklightColor();
    public abstract virtual void set_MasklightColor(IMagickColor`1<TQuantumType> value);
}
public interface ImageMagick.IComplexSettings {
    public ComplexOperator ComplexOperator { get; }
    public Nullable`1<double> SignalToNoiseRatio { get; public set; }
    public abstract virtual ComplexOperator get_ComplexOperator();
    public abstract virtual Nullable`1<double> get_SignalToNoiseRatio();
    public abstract virtual void set_SignalToNoiseRatio(Nullable`1<double> value);
}
[NullableContextAttribute("1")]
public interface ImageMagick.IConnectedComponent`1 {
    public UInt32 Area { get; }
    public PointD Centroid { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> Color { get; }
    public UInt32 Height { get; }
    public int Id { get; }
    public UInt32 Width { get; }
    public int X { get; }
    public int Y { get; }
    public abstract virtual UInt32 get_Area();
    public abstract virtual PointD get_Centroid();
    public abstract virtual IMagickColor`1<TQuantumType> get_Color();
    public abstract virtual UInt32 get_Height();
    public abstract virtual int get_Id();
    public abstract virtual UInt32 get_Width();
    public abstract virtual int get_X();
    public abstract virtual int get_Y();
    public abstract virtual IMagickGeometry ToGeometry();
    public abstract virtual IMagickGeometry ToGeometry(UInt32 extent);
}
public interface ImageMagick.IConnectedComponentsSettings {
    public Nullable`1<Threshold> AngleThreshold { get; public set; }
    public Nullable`1<Threshold> AreaThreshold { get; public set; }
    public Nullable`1<Threshold> CircularityThreshold { get; public set; }
    public UInt32 Connectivity { get; public set; }
    public Nullable`1<Threshold> DiameterThreshold { get; public set; }
    public Nullable`1<Threshold> EccentricityThreshold { get; public set; }
    public Nullable`1<Threshold> MajorAxisThreshold { get; public set; }
    public bool MeanColor { get; public set; }
    public Nullable`1<Threshold> MinorAxisThreshold { get; public set; }
    public Nullable`1<Threshold> PerimeterThreshold { get; public set; }
    public abstract virtual Nullable`1<Threshold> get_AngleThreshold();
    public abstract virtual void set_AngleThreshold(Nullable`1<Threshold> value);
    public abstract virtual Nullable`1<Threshold> get_AreaThreshold();
    public abstract virtual void set_AreaThreshold(Nullable`1<Threshold> value);
    public abstract virtual Nullable`1<Threshold> get_CircularityThreshold();
    public abstract virtual void set_CircularityThreshold(Nullable`1<Threshold> value);
    public abstract virtual UInt32 get_Connectivity();
    public abstract virtual void set_Connectivity(UInt32 value);
    public abstract virtual Nullable`1<Threshold> get_DiameterThreshold();
    public abstract virtual void set_DiameterThreshold(Nullable`1<Threshold> value);
    public abstract virtual Nullable`1<Threshold> get_EccentricityThreshold();
    public abstract virtual void set_EccentricityThreshold(Nullable`1<Threshold> value);
    public abstract virtual Nullable`1<Threshold> get_MajorAxisThreshold();
    public abstract virtual void set_MajorAxisThreshold(Nullable`1<Threshold> value);
    public abstract virtual bool get_MeanColor();
    public abstract virtual void set_MeanColor(bool value);
    public abstract virtual Nullable`1<Threshold> get_MinorAxisThreshold();
    public abstract virtual void set_MinorAxisThreshold(Nullable`1<Threshold> value);
    public abstract virtual Nullable`1<Threshold> get_PerimeterThreshold();
    public abstract virtual void set_PerimeterThreshold(Nullable`1<Threshold> value);
}
public interface ImageMagick.IConvolveMatrix {
}
[NullableContextAttribute("1")]
public interface ImageMagick.IDefine {
    public MagickFormat Format { get; }
    public string Name { get; }
    public string Value { get; }
    public abstract virtual MagickFormat get_Format();
    public abstract virtual string get_Name();
    public abstract virtual string get_Value();
}
[NullableContextAttribute("1")]
public interface ImageMagick.IDefines {
    public IEnumerable`1<IDefine> Defines { get; }
    public abstract virtual IEnumerable`1<IDefine> get_Defines();
}
[NullableContextAttribute("2")]
public interface ImageMagick.IDistortSettings {
    public bool Bestfit { get; public set; }
    public DistortMethod Method { get; }
    public Nullable`1<double> Scale { get; public set; }
    public IMagickGeometry Viewport { get; public set; }
    public abstract virtual bool get_Bestfit();
    public abstract virtual void set_Bestfit(bool value);
    public abstract virtual DistortMethod get_Method();
    public abstract virtual Nullable`1<double> get_Scale();
    public abstract virtual void set_Scale(Nullable`1<double> value);
    public abstract virtual IMagickGeometry get_Viewport();
    public abstract virtual void set_Viewport(IMagickGeometry value);
}
[NullableContextAttribute("1")]
[DefaultMemberAttribute("Item")]
public interface ImageMagick.IDoubleMatrix {
    public UInt32 Order { get; }
    public double Item { get; public set; }
    public abstract virtual UInt32 get_Order();
    public abstract virtual double get_Item(int x, int y);
    public abstract virtual void set_Item(int x, int y, double value);
    public abstract virtual double GetValue(int x, int y);
    public abstract virtual void SetColumn(int x, Double[] values);
    public abstract virtual void SetRow(int y, Double[] values);
    public abstract virtual void SetValue(int x, int y, double value);
    public abstract virtual Double[] ToArray();
}
[NullableContextAttribute("2")]
public interface ImageMagick.IEightBimProfile {
    [NullableAttribute("1")]
public IReadOnlyList`1<IClipPath> ClipPaths { get; }
    [NullableAttribute("1")]
public IReadOnlyList`1<IEightBimValue> Values { get; }
    [NullableContextAttribute("1")]
public abstract virtual IReadOnlyList`1<IClipPath> get_ClipPaths();
    [NullableContextAttribute("1")]
public abstract virtual IReadOnlyList`1<IEightBimValue> get_Values();
    public abstract virtual IExifProfile GetExifProfile();
    public abstract virtual IIptcProfile GetIptcProfile();
    public abstract virtual IXmpProfile GetXmpProfile();
    public abstract virtual void SetExifProfile(IExifProfile profile);
    public abstract virtual void SetIptcProfile(IIptcProfile profile);
    public abstract virtual void SetXmpProfile(IXmpProfile profile);
}
[NullableContextAttribute("1")]
public interface ImageMagick.IEightBimValue {
    public short Id { get; }
    [NullableAttribute("2")]
public string Name { get; }
    public abstract virtual short get_Id();
    [NullableContextAttribute("2")]
public abstract virtual string get_Name();
    public abstract virtual Byte[] ToByteArray();
    public abstract virtual string ToString(Encoding encoding);
}
[NullableContextAttribute("1")]
public interface ImageMagick.IExifProfile {
    public ExifParts Parts { get; public set; }
    public IReadOnlyList`1<ExifTag> InvalidTags { get; }
    public UInt32 ThumbnailLength { get; }
    public UInt32 ThumbnailOffset { get; }
    public IReadOnlyList`1<IExifValue> Values { get; }
    public abstract virtual ExifParts get_Parts();
    public abstract virtual void set_Parts(ExifParts value);
    public abstract virtual IReadOnlyList`1<ExifTag> get_InvalidTags();
    public abstract virtual UInt32 get_ThumbnailLength();
    public abstract virtual UInt32 get_ThumbnailOffset();
    public abstract virtual IReadOnlyList`1<IExifValue> get_Values();
    public abstract virtual IExifValue`1<TValueType> GetValue(ExifTag`1<TValueType> tag);
    public abstract virtual void RemoveThumbnail();
    public abstract virtual bool RemoveValue(ExifTag tag);
    public abstract virtual void Rewrite();
    public abstract virtual void SetValue(ExifTag`1<TValueType> tag, TValueType value);
}
[NullableContextAttribute("1")]
public interface ImageMagick.IExifValue {
    public ExifDataType DataType { get; }
    public bool IsArray { get; }
    public ExifTag Tag { get; }
    public abstract virtual ExifDataType get_DataType();
    public abstract virtual bool get_IsArray();
    public abstract virtual ExifTag get_Tag();
    public abstract virtual object GetValue();
    public abstract virtual bool SetValue(object value);
}
[NullableContextAttribute("1")]
public interface ImageMagick.IExifValue`1 {
    public TValueType Value { get; public set; }
    public abstract virtual TValueType get_Value();
    public abstract virtual void set_Value(TValueType value);
}
[NullableContextAttribute("1")]
public interface ImageMagick.IImageProfile {
    public string Name { get; }
    [NullableContextAttribute("0")]
public abstract virtual ReadOnlySpan`1<byte> ToReadOnlySpan();
    public abstract virtual string get_Name();
    public abstract virtual Byte[] ToByteArray();
}
[NullableContextAttribute("1")]
public interface ImageMagick.IIptcProfile {
    public IReadOnlyList`1<IIptcValue> Values { get; }
    public abstract virtual IReadOnlyList`1<IIptcValue> get_Values();
    [NullableContextAttribute("2")]
public abstract virtual IIptcValue GetValue(IptcTag tag);
    public abstract virtual IEnumerable`1<IIptcValue> GetAllValues(IptcTag tag);
    public abstract virtual bool RemoveValue(IptcTag tag);
    public abstract virtual bool RemoveValue(IptcTag tag, string value);
    public abstract virtual void SetValue(IptcTag tag, string value);
    public abstract virtual void SetValue(IptcTag tag, DateTimeOffset dateTimeOffset);
}
[NullableContextAttribute("1")]
public interface ImageMagick.IIptcValue {
    public IptcTag Tag { get; }
    public string Value { get; public set; }
    public int Length { get; }
    public abstract virtual IptcTag get_Tag();
    public abstract virtual string get_Value();
    public abstract virtual void set_Value(string value);
    public abstract virtual int get_Length();
    public abstract virtual Byte[] ToByteArray();
    public abstract virtual string ToString();
}
[NullableContextAttribute("2")]
public interface ImageMagick.IKmeansSettings {
    public string SeedColors { get; public set; }
    public UInt32 NumberColors { get; public set; }
    public UInt32 MaxIterations { get; public set; }
    public double Tolerance { get; public set; }
    public abstract virtual string get_SeedColors();
    public abstract virtual void set_SeedColors(string value);
    public abstract virtual UInt32 get_NumberColors();
    public abstract virtual void set_NumberColors(UInt32 value);
    public abstract virtual UInt32 get_MaxIterations();
    public abstract virtual void set_MaxIterations(UInt32 value);
    public abstract virtual double get_Tolerance();
    public abstract virtual void set_Tolerance(double value);
}
[NullableContextAttribute("1")]
public interface ImageMagick.ImageOptimizers.IImageOptimizer {
    public IMagickFormatInfo Format { get; }
    public bool OptimalCompression { get; public set; }
    public abstract virtual IMagickFormatInfo get_Format();
    public abstract virtual bool get_OptimalCompression();
    public abstract virtual void set_OptimalCompression(bool value);
    public abstract virtual bool Compress(FileInfo file);
    public abstract virtual bool Compress(string fileName);
    public abstract virtual bool Compress(Stream stream);
    public abstract virtual bool LosslessCompress(FileInfo file);
    public abstract virtual bool LosslessCompress(string fileName);
    public abstract virtual bool LosslessCompress(Stream stream);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ImageMagick.ImageProfile : object {
    [NullableAttribute("2")]
private Byte[] _data;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    public ImageProfile(string name, Byte[] data);
    public ImageProfile(string name, Stream stream);
    public ImageProfile(string name, string fileName);
    protected ImageProfile(string name);
    [NullableContextAttribute("0")]
public sealed virtual ReadOnlySpan`1<byte> ToReadOnlySpan();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(IImageProfile other);
    public virtual int GetHashCode();
    public sealed virtual Byte[] ToByteArray();
    [NullableContextAttribute("2")]
protected Byte[] GetData();
    [NullableContextAttribute("2")]
protected void SetData(Byte[] data);
    protected virtual void UpdateData();
    private static Byte[] Copy(Byte[] data);
}
public interface ImageMagick.IMagickColor`1 {
    public TQuantumType A { get; public set; }
    public TQuantumType B { get; public set; }
    public TQuantumType G { get; public set; }
    public bool IsCmyk { get; }
    public TQuantumType K { get; public set; }
    public TQuantumType R { get; public set; }
    public abstract virtual TQuantumType get_A();
    public abstract virtual void set_A(TQuantumType value);
    public abstract virtual TQuantumType get_B();
    public abstract virtual void set_B(TQuantumType value);
    public abstract virtual TQuantumType get_G();
    public abstract virtual void set_G(TQuantumType value);
    public abstract virtual bool get_IsCmyk();
    public abstract virtual TQuantumType get_K();
    public abstract virtual void set_K(TQuantumType value);
    public abstract virtual TQuantumType get_R();
    public abstract virtual void set_R(TQuantumType value);
    public abstract virtual bool FuzzyEquals(IMagickColor`1<TQuantumType> other, Percentage fuzz);
    public abstract virtual void SetFromBytes(byte red, byte green, byte blue, byte alpha);
    [NullableContextAttribute("1")]
public abstract virtual Byte[] ToByteArray();
    [NullableContextAttribute("1")]
public abstract virtual string ToHexString();
    [NullableContextAttribute("1")]
public abstract virtual string ToShortString();
    [NullableContextAttribute("1")]
public abstract virtual string ToString();
}
public interface ImageMagick.IMagickColorMatrix {
}
public interface ImageMagick.IMagickColors`1 {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> None { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> Transparent { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> AliceBlue { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> AntiqueWhite { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> Aqua { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> Aquamarine { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> Azure { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> Beige { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> Bisque { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> Black { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> BlanchedAlmond { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> Blue { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> BlueViolet { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> Brown { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> BurlyWood { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> CadetBlue { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> Chartreuse { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> Chocolate { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> Coral { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> CornflowerBlue { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> Cornsilk { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> Crimson { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> Cyan { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> DarkBlue { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> DarkCyan { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> DarkGoldenrod { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> DarkGray { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> DarkGreen { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> DarkKhaki { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> DarkMagenta { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> DarkOliveGreen { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> DarkOrange { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> DarkOrchid { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> DarkRed { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> DarkSalmon { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> DarkSeaGreen { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> DarkSlateBlue { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> DarkSlateGray { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> DarkTurquoise { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> DarkViolet { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> DeepPink { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> DeepSkyBlue { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> DimGray { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> DodgerBlue { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> Firebrick { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> FloralWhite { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> ForestGreen { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> Fuchsia { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> Gainsboro { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> GhostWhite { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> Gold { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> Goldenrod { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> Gray { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> Green { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> GreenYellow { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> Honeydew { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> HotPink { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> IndianRed { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> Indigo { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> Ivory { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> Khaki { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> Lavender { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> LavenderBlush { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> LawnGreen { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> LemonChiffon { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> LightBlue { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> LightCoral { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> LightCyan { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> LightGoldenrodYellow { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> LightGreen { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> LightGray { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> LightPink { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> LightSalmon { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> LightSeaGreen { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> LightSkyBlue { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> LightSlateGray { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> LightSteelBlue { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> LightYellow { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> Lime { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> LimeGreen { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> Linen { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> Magenta { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> Maroon { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> MediumAquamarine { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> MediumBlue { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> MediumOrchid { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> MediumPurple { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> MediumSeaGreen { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> MediumSlateBlue { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> MediumSpringGreen { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> MediumTurquoise { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> MediumVioletRed { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> MidnightBlue { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> MintCream { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> MistyRose { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> Moccasin { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> NavajoWhite { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> Navy { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> OldLace { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> Olive { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> OliveDrab { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> Orange { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> OrangeRed { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> Orchid { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> PaleGoldenrod { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> PaleGreen { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> PaleTurquoise { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> PaleVioletRed { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> PapayaWhip { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> PeachPuff { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> Peru { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> Pink { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> Plum { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> PowderBlue { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> Purple { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> RebeccaPurple { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> Red { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> RosyBrown { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> RoyalBlue { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> SaddleBrown { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> Salmon { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> SandyBrown { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> SeaGreen { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> SeaShell { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> Sienna { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> Silver { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> SkyBlue { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> SlateBlue { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> SlateGray { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> Snow { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> SpringGreen { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> SteelBlue { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> Tan { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> Teal { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> Thistle { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> Tomato { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> Turquoise { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> Violet { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> Wheat { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> White { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> WhiteSmoke { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> Yellow { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> YellowGreen { get; }
    public abstract virtual IMagickColor`1<TQuantumType> get_None();
    public abstract virtual IMagickColor`1<TQuantumType> get_Transparent();
    public abstract virtual IMagickColor`1<TQuantumType> get_AliceBlue();
    public abstract virtual IMagickColor`1<TQuantumType> get_AntiqueWhite();
    public abstract virtual IMagickColor`1<TQuantumType> get_Aqua();
    public abstract virtual IMagickColor`1<TQuantumType> get_Aquamarine();
    public abstract virtual IMagickColor`1<TQuantumType> get_Azure();
    public abstract virtual IMagickColor`1<TQuantumType> get_Beige();
    public abstract virtual IMagickColor`1<TQuantumType> get_Bisque();
    public abstract virtual IMagickColor`1<TQuantumType> get_Black();
    public abstract virtual IMagickColor`1<TQuantumType> get_BlanchedAlmond();
    public abstract virtual IMagickColor`1<TQuantumType> get_Blue();
    public abstract virtual IMagickColor`1<TQuantumType> get_BlueViolet();
    public abstract virtual IMagickColor`1<TQuantumType> get_Brown();
    public abstract virtual IMagickColor`1<TQuantumType> get_BurlyWood();
    public abstract virtual IMagickColor`1<TQuantumType> get_CadetBlue();
    public abstract virtual IMagickColor`1<TQuantumType> get_Chartreuse();
    public abstract virtual IMagickColor`1<TQuantumType> get_Chocolate();
    public abstract virtual IMagickColor`1<TQuantumType> get_Coral();
    public abstract virtual IMagickColor`1<TQuantumType> get_CornflowerBlue();
    public abstract virtual IMagickColor`1<TQuantumType> get_Cornsilk();
    public abstract virtual IMagickColor`1<TQuantumType> get_Crimson();
    public abstract virtual IMagickColor`1<TQuantumType> get_Cyan();
    public abstract virtual IMagickColor`1<TQuantumType> get_DarkBlue();
    public abstract virtual IMagickColor`1<TQuantumType> get_DarkCyan();
    public abstract virtual IMagickColor`1<TQuantumType> get_DarkGoldenrod();
    public abstract virtual IMagickColor`1<TQuantumType> get_DarkGray();
    public abstract virtual IMagickColor`1<TQuantumType> get_DarkGreen();
    public abstract virtual IMagickColor`1<TQuantumType> get_DarkKhaki();
    public abstract virtual IMagickColor`1<TQuantumType> get_DarkMagenta();
    public abstract virtual IMagickColor`1<TQuantumType> get_DarkOliveGreen();
    public abstract virtual IMagickColor`1<TQuantumType> get_DarkOrange();
    public abstract virtual IMagickColor`1<TQuantumType> get_DarkOrchid();
    public abstract virtual IMagickColor`1<TQuantumType> get_DarkRed();
    public abstract virtual IMagickColor`1<TQuantumType> get_DarkSalmon();
    public abstract virtual IMagickColor`1<TQuantumType> get_DarkSeaGreen();
    public abstract virtual IMagickColor`1<TQuantumType> get_DarkSlateBlue();
    public abstract virtual IMagickColor`1<TQuantumType> get_DarkSlateGray();
    public abstract virtual IMagickColor`1<TQuantumType> get_DarkTurquoise();
    public abstract virtual IMagickColor`1<TQuantumType> get_DarkViolet();
    public abstract virtual IMagickColor`1<TQuantumType> get_DeepPink();
    public abstract virtual IMagickColor`1<TQuantumType> get_DeepSkyBlue();
    public abstract virtual IMagickColor`1<TQuantumType> get_DimGray();
    public abstract virtual IMagickColor`1<TQuantumType> get_DodgerBlue();
    public abstract virtual IMagickColor`1<TQuantumType> get_Firebrick();
    public abstract virtual IMagickColor`1<TQuantumType> get_FloralWhite();
    public abstract virtual IMagickColor`1<TQuantumType> get_ForestGreen();
    public abstract virtual IMagickColor`1<TQuantumType> get_Fuchsia();
    public abstract virtual IMagickColor`1<TQuantumType> get_Gainsboro();
    public abstract virtual IMagickColor`1<TQuantumType> get_GhostWhite();
    public abstract virtual IMagickColor`1<TQuantumType> get_Gold();
    public abstract virtual IMagickColor`1<TQuantumType> get_Goldenrod();
    public abstract virtual IMagickColor`1<TQuantumType> get_Gray();
    public abstract virtual IMagickColor`1<TQuantumType> get_Green();
    public abstract virtual IMagickColor`1<TQuantumType> get_GreenYellow();
    public abstract virtual IMagickColor`1<TQuantumType> get_Honeydew();
    public abstract virtual IMagickColor`1<TQuantumType> get_HotPink();
    public abstract virtual IMagickColor`1<TQuantumType> get_IndianRed();
    public abstract virtual IMagickColor`1<TQuantumType> get_Indigo();
    public abstract virtual IMagickColor`1<TQuantumType> get_Ivory();
    public abstract virtual IMagickColor`1<TQuantumType> get_Khaki();
    public abstract virtual IMagickColor`1<TQuantumType> get_Lavender();
    public abstract virtual IMagickColor`1<TQuantumType> get_LavenderBlush();
    public abstract virtual IMagickColor`1<TQuantumType> get_LawnGreen();
    public abstract virtual IMagickColor`1<TQuantumType> get_LemonChiffon();
    public abstract virtual IMagickColor`1<TQuantumType> get_LightBlue();
    public abstract virtual IMagickColor`1<TQuantumType> get_LightCoral();
    public abstract virtual IMagickColor`1<TQuantumType> get_LightCyan();
    public abstract virtual IMagickColor`1<TQuantumType> get_LightGoldenrodYellow();
    public abstract virtual IMagickColor`1<TQuantumType> get_LightGreen();
    public abstract virtual IMagickColor`1<TQuantumType> get_LightGray();
    public abstract virtual IMagickColor`1<TQuantumType> get_LightPink();
    public abstract virtual IMagickColor`1<TQuantumType> get_LightSalmon();
    public abstract virtual IMagickColor`1<TQuantumType> get_LightSeaGreen();
    public abstract virtual IMagickColor`1<TQuantumType> get_LightSkyBlue();
    public abstract virtual IMagickColor`1<TQuantumType> get_LightSlateGray();
    public abstract virtual IMagickColor`1<TQuantumType> get_LightSteelBlue();
    public abstract virtual IMagickColor`1<TQuantumType> get_LightYellow();
    public abstract virtual IMagickColor`1<TQuantumType> get_Lime();
    public abstract virtual IMagickColor`1<TQuantumType> get_LimeGreen();
    public abstract virtual IMagickColor`1<TQuantumType> get_Linen();
    public abstract virtual IMagickColor`1<TQuantumType> get_Magenta();
    public abstract virtual IMagickColor`1<TQuantumType> get_Maroon();
    public abstract virtual IMagickColor`1<TQuantumType> get_MediumAquamarine();
    public abstract virtual IMagickColor`1<TQuantumType> get_MediumBlue();
    public abstract virtual IMagickColor`1<TQuantumType> get_MediumOrchid();
    public abstract virtual IMagickColor`1<TQuantumType> get_MediumPurple();
    public abstract virtual IMagickColor`1<TQuantumType> get_MediumSeaGreen();
    public abstract virtual IMagickColor`1<TQuantumType> get_MediumSlateBlue();
    public abstract virtual IMagickColor`1<TQuantumType> get_MediumSpringGreen();
    public abstract virtual IMagickColor`1<TQuantumType> get_MediumTurquoise();
    public abstract virtual IMagickColor`1<TQuantumType> get_MediumVioletRed();
    public abstract virtual IMagickColor`1<TQuantumType> get_MidnightBlue();
    public abstract virtual IMagickColor`1<TQuantumType> get_MintCream();
    public abstract virtual IMagickColor`1<TQuantumType> get_MistyRose();
    public abstract virtual IMagickColor`1<TQuantumType> get_Moccasin();
    public abstract virtual IMagickColor`1<TQuantumType> get_NavajoWhite();
    public abstract virtual IMagickColor`1<TQuantumType> get_Navy();
    public abstract virtual IMagickColor`1<TQuantumType> get_OldLace();
    public abstract virtual IMagickColor`1<TQuantumType> get_Olive();
    public abstract virtual IMagickColor`1<TQuantumType> get_OliveDrab();
    public abstract virtual IMagickColor`1<TQuantumType> get_Orange();
    public abstract virtual IMagickColor`1<TQuantumType> get_OrangeRed();
    public abstract virtual IMagickColor`1<TQuantumType> get_Orchid();
    public abstract virtual IMagickColor`1<TQuantumType> get_PaleGoldenrod();
    public abstract virtual IMagickColor`1<TQuantumType> get_PaleGreen();
    public abstract virtual IMagickColor`1<TQuantumType> get_PaleTurquoise();
    public abstract virtual IMagickColor`1<TQuantumType> get_PaleVioletRed();
    public abstract virtual IMagickColor`1<TQuantumType> get_PapayaWhip();
    public abstract virtual IMagickColor`1<TQuantumType> get_PeachPuff();
    public abstract virtual IMagickColor`1<TQuantumType> get_Peru();
    public abstract virtual IMagickColor`1<TQuantumType> get_Pink();
    public abstract virtual IMagickColor`1<TQuantumType> get_Plum();
    public abstract virtual IMagickColor`1<TQuantumType> get_PowderBlue();
    public abstract virtual IMagickColor`1<TQuantumType> get_Purple();
    public abstract virtual IMagickColor`1<TQuantumType> get_RebeccaPurple();
    public abstract virtual IMagickColor`1<TQuantumType> get_Red();
    public abstract virtual IMagickColor`1<TQuantumType> get_RosyBrown();
    public abstract virtual IMagickColor`1<TQuantumType> get_RoyalBlue();
    public abstract virtual IMagickColor`1<TQuantumType> get_SaddleBrown();
    public abstract virtual IMagickColor`1<TQuantumType> get_Salmon();
    public abstract virtual IMagickColor`1<TQuantumType> get_SandyBrown();
    public abstract virtual IMagickColor`1<TQuantumType> get_SeaGreen();
    public abstract virtual IMagickColor`1<TQuantumType> get_SeaShell();
    public abstract virtual IMagickColor`1<TQuantumType> get_Sienna();
    public abstract virtual IMagickColor`1<TQuantumType> get_Silver();
    public abstract virtual IMagickColor`1<TQuantumType> get_SkyBlue();
    public abstract virtual IMagickColor`1<TQuantumType> get_SlateBlue();
    public abstract virtual IMagickColor`1<TQuantumType> get_SlateGray();
    public abstract virtual IMagickColor`1<TQuantumType> get_Snow();
    public abstract virtual IMagickColor`1<TQuantumType> get_SpringGreen();
    public abstract virtual IMagickColor`1<TQuantumType> get_SteelBlue();
    public abstract virtual IMagickColor`1<TQuantumType> get_Tan();
    public abstract virtual IMagickColor`1<TQuantumType> get_Teal();
    public abstract virtual IMagickColor`1<TQuantumType> get_Thistle();
    public abstract virtual IMagickColor`1<TQuantumType> get_Tomato();
    public abstract virtual IMagickColor`1<TQuantumType> get_Turquoise();
    public abstract virtual IMagickColor`1<TQuantumType> get_Violet();
    public abstract virtual IMagickColor`1<TQuantumType> get_Wheat();
    public abstract virtual IMagickColor`1<TQuantumType> get_White();
    public abstract virtual IMagickColor`1<TQuantumType> get_WhiteSmoke();
    public abstract virtual IMagickColor`1<TQuantumType> get_Yellow();
    public abstract virtual IMagickColor`1<TQuantumType> get_YellowGreen();
}
public interface ImageMagick.IMagickErrorInfo {
    public double MeanErrorPerPixel { get; }
    public double NormalizedMaximumError { get; }
    public double NormalizedMeanError { get; }
    public abstract virtual double get_MeanErrorPerPixel();
    public abstract virtual double get_NormalizedMaximumError();
    public abstract virtual double get_NormalizedMeanError();
}
[NullableContextAttribute("2")]
public interface ImageMagick.IMagickFormatInfo {
    public bool CanReadMultithreaded { get; }
    public bool CanWriteMultithreaded { get; }
    public string Description { get; }
    public MagickFormat Format { get; }
    public string MimeType { get; }
    public MagickFormat ModuleFormat { get; }
    public bool SupportsMultipleFrames { get; }
    public bool SupportsReading { get; }
    public bool SupportsWriting { get; }
    public abstract virtual bool get_CanReadMultithreaded();
    public abstract virtual bool get_CanWriteMultithreaded();
    public abstract virtual string get_Description();
    public abstract virtual MagickFormat get_Format();
    public abstract virtual string get_MimeType();
    public abstract virtual MagickFormat get_ModuleFormat();
    public abstract virtual bool get_SupportsMultipleFrames();
    public abstract virtual bool get_SupportsReading();
    public abstract virtual bool get_SupportsWriting();
    [NullableContextAttribute("1")]
public abstract virtual string ToString();
    public abstract virtual bool Unregister();
}
[NullableContextAttribute("1")]
public interface ImageMagick.IMagickGeometry {
    public bool AspectRatio { get; }
    public bool FillArea { get; public set; }
    public bool Greater { get; public set; }
    public UInt32 Height { get; public set; }
    public bool IgnoreAspectRatio { get; public set; }
    public bool IsPercentage { get; public set; }
    public bool Less { get; public set; }
    public bool LimitPixels { get; public set; }
    public UInt32 Width { get; public set; }
    public int X { get; public set; }
    public int Y { get; public set; }
    public abstract virtual bool get_AspectRatio();
    public abstract virtual bool get_FillArea();
    public abstract virtual void set_FillArea(bool value);
    public abstract virtual bool get_Greater();
    public abstract virtual void set_Greater(bool value);
    public abstract virtual UInt32 get_Height();
    public abstract virtual void set_Height(UInt32 value);
    public abstract virtual bool get_IgnoreAspectRatio();
    public abstract virtual void set_IgnoreAspectRatio(bool value);
    public abstract virtual bool get_IsPercentage();
    public abstract virtual void set_IsPercentage(bool value);
    public abstract virtual bool get_Less();
    public abstract virtual void set_Less(bool value);
    public abstract virtual bool get_LimitPixels();
    public abstract virtual void set_LimitPixels(bool value);
    public abstract virtual UInt32 get_Width();
    public abstract virtual void set_Width(UInt32 value);
    public abstract virtual int get_X();
    public abstract virtual void set_X(int value);
    public abstract virtual int get_Y();
    public abstract virtual void set_Y(int value);
    public abstract virtual void Initialize(int x, int y, UInt32 width, UInt32 height);
    public abstract virtual string ToString();
}
[NullableContextAttribute("1")]
public interface ImageMagick.IMagickImage {
    public UInt32 AnimationDelay { get; public set; }
    public UInt32 AnimationIterations { get; public set; }
    public int AnimationTicksPerSecond { get; public set; }
    public IEnumerable`1<string> ArtifactNames { get; }
    public IEnumerable`1<string> AttributeNames { get; }
    public UInt32 BaseHeight { get; }
    public UInt32 BaseWidth { get; }
    public bool BlackPointCompensation { get; public set; }
    [NullableAttribute("2")]
public IMagickGeometry BoundingBox { get; }
    public UInt32 ChannelCount { get; }
    public IEnumerable`1<PixelChannel> Channels { get; }
    public IChromaticityInfo Chromaticity { get; public set; }
    public ClassType ClassType { get; public set; }
    public Percentage ColorFuzz { get; public set; }
    public int ColormapSize { get; public set; }
    public ColorSpace ColorSpace { get; public set; }
    public ColorType ColorType { get; public set; }
    [NullableAttribute("2")]
public string Comment { get; public set; }
    public CompositeOperator Compose { get; public set; }
    public CompressionMethod Compression { get; }
    public Density Density { get; public set; }
    public UInt32 Depth { get; public set; }
    public Endian Endian { get; public set; }
    [NullableAttribute("2")]
public string FileName { get; }
    public FilterType FilterType { get; public set; }
    public MagickFormat Format { get; public set; }
    public double Gamma { get; }
    public GifDisposeMethod GifDisposeMethod { get; public set; }
    public bool HasAlpha { get; public set; }
    public UInt32 Height { get; }
    public Interlace Interlace { get; }
    public PixelInterpolateMethod Interpolate { get; public set; }
    public bool IsOpaque { get; }
    [NullableAttribute("2")]
public string Label { get; public set; }
    public UInt32 MetaChannelCount { get; public set; }
    public OrientationType Orientation { get; public set; }
    public IMagickGeometry Page { get; public set; }
    public IEnumerable`1<string> ProfileNames { get; }
    public UInt32 Quality { get; public set; }
    public RenderingIntent RenderingIntent { get; public set; }
    public string Signature { get; }
    public UInt32 TotalColors { get; }
    public VirtualPixelMethod VirtualPixelMethod { get; public set; }
    public UInt32 Width { get; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_Progress(EventHandler`1<ProgressEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Progress(EventHandler`1<ProgressEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Warning(EventHandler`1<WarningEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Warning(EventHandler`1<WarningEventArgs> value);
    public abstract virtual UInt32 get_AnimationDelay();
    public abstract virtual void set_AnimationDelay(UInt32 value);
    public abstract virtual UInt32 get_AnimationIterations();
    public abstract virtual void set_AnimationIterations(UInt32 value);
    public abstract virtual int get_AnimationTicksPerSecond();
    public abstract virtual void set_AnimationTicksPerSecond(int value);
    public abstract virtual IEnumerable`1<string> get_ArtifactNames();
    public abstract virtual IEnumerable`1<string> get_AttributeNames();
    public abstract virtual UInt32 get_BaseHeight();
    public abstract virtual UInt32 get_BaseWidth();
    public abstract virtual bool get_BlackPointCompensation();
    public abstract virtual void set_BlackPointCompensation(bool value);
    [NullableContextAttribute("2")]
public abstract virtual IMagickGeometry get_BoundingBox();
    public abstract virtual UInt32 get_ChannelCount();
    public abstract virtual IEnumerable`1<PixelChannel> get_Channels();
    public abstract virtual IChromaticityInfo get_Chromaticity();
    public abstract virtual void set_Chromaticity(IChromaticityInfo value);
    public abstract virtual ClassType get_ClassType();
    public abstract virtual void set_ClassType(ClassType value);
    public abstract virtual Percentage get_ColorFuzz();
    public abstract virtual void set_ColorFuzz(Percentage value);
    public abstract virtual int get_ColormapSize();
    public abstract virtual void set_ColormapSize(int value);
    public abstract virtual ColorSpace get_ColorSpace();
    public abstract virtual void set_ColorSpace(ColorSpace value);
    public abstract virtual ColorType get_ColorType();
    public abstract virtual void set_ColorType(ColorType value);
    [NullableContextAttribute("2")]
public abstract virtual string get_Comment();
    [NullableContextAttribute("2")]
public abstract virtual void set_Comment(string value);
    public abstract virtual CompositeOperator get_Compose();
    public abstract virtual void set_Compose(CompositeOperator value);
    public abstract virtual CompressionMethod get_Compression();
    public abstract virtual Density get_Density();
    public abstract virtual void set_Density(Density value);
    public abstract virtual UInt32 get_Depth();
    public abstract virtual void set_Depth(UInt32 value);
    public abstract virtual Endian get_Endian();
    public abstract virtual void set_Endian(Endian value);
    [NullableContextAttribute("2")]
public abstract virtual string get_FileName();
    public abstract virtual FilterType get_FilterType();
    public abstract virtual void set_FilterType(FilterType value);
    public abstract virtual MagickFormat get_Format();
    public abstract virtual void set_Format(MagickFormat value);
    public abstract virtual double get_Gamma();
    public abstract virtual GifDisposeMethod get_GifDisposeMethod();
    public abstract virtual void set_GifDisposeMethod(GifDisposeMethod value);
    public abstract virtual bool get_HasAlpha();
    public abstract virtual void set_HasAlpha(bool value);
    public abstract virtual UInt32 get_Height();
    public abstract virtual Interlace get_Interlace();
    public abstract virtual PixelInterpolateMethod get_Interpolate();
    public abstract virtual void set_Interpolate(PixelInterpolateMethod value);
    public abstract virtual bool get_IsOpaque();
    [NullableContextAttribute("2")]
public abstract virtual string get_Label();
    [NullableContextAttribute("2")]
public abstract virtual void set_Label(string value);
    public abstract virtual UInt32 get_MetaChannelCount();
    public abstract virtual void set_MetaChannelCount(UInt32 value);
    public abstract virtual OrientationType get_Orientation();
    public abstract virtual void set_Orientation(OrientationType value);
    public abstract virtual IMagickGeometry get_Page();
    public abstract virtual void set_Page(IMagickGeometry value);
    public abstract virtual IEnumerable`1<string> get_ProfileNames();
    public abstract virtual UInt32 get_Quality();
    public abstract virtual void set_Quality(UInt32 value);
    public abstract virtual RenderingIntent get_RenderingIntent();
    public abstract virtual void set_RenderingIntent(RenderingIntent value);
    public abstract virtual string get_Signature();
    public abstract virtual UInt32 get_TotalColors();
    public abstract virtual VirtualPixelMethod get_VirtualPixelMethod();
    public abstract virtual void set_VirtualPixelMethod(VirtualPixelMethod value);
    public abstract virtual UInt32 get_Width();
    public abstract virtual void AdaptiveBlur();
    public abstract virtual void AdaptiveBlur(double radius);
    public abstract virtual void AdaptiveBlur(double radius, double sigma);
    public abstract virtual void AdaptiveResize(UInt32 width, UInt32 height);
    public abstract virtual void AdaptiveResize(IMagickGeometry geometry);
    public abstract virtual void AdaptiveSharpen();
    public abstract virtual void AdaptiveSharpen(Channels channels);
    public abstract virtual void AdaptiveSharpen(double radius, double sigma);
    public abstract virtual void AdaptiveSharpen(double radius, double sigma, Channels channels);
    public abstract virtual void AdaptiveThreshold(UInt32 width, UInt32 height);
    public abstract virtual void AdaptiveThreshold(UInt32 width, UInt32 height, Channels channels);
    public abstract virtual void AdaptiveThreshold(UInt32 width, UInt32 height, double bias);
    public abstract virtual void AdaptiveThreshold(UInt32 width, UInt32 height, double bias, Channels channels);
    public abstract virtual void AdaptiveThreshold(UInt32 width, UInt32 height, Percentage biasPercentage);
    public abstract virtual void AdaptiveThreshold(UInt32 width, UInt32 height, Percentage biasPercentage, Channels channels);
    public abstract virtual void AddNoise(NoiseType noiseType);
    public abstract virtual void AddNoise(NoiseType noiseType, Channels channels);
    public abstract virtual void AddNoise(NoiseType noiseType, double attenuate);
    public abstract virtual void AddNoise(NoiseType noiseType, double attenuate, Channels channels);
    public abstract virtual void AffineTransform(IDrawableAffine affineMatrix);
    public abstract virtual void Alpha(AlphaOption value);
    public abstract virtual void Annotate(string text, IMagickGeometry boundingArea);
    public abstract virtual void Annotate(string text, IMagickGeometry boundingArea, Gravity gravity);
    public abstract virtual void Annotate(string text, IMagickGeometry boundingArea, Gravity gravity, double angle);
    public abstract virtual void Annotate(string text, Gravity gravity);
    public abstract virtual void AutoGamma();
    public abstract virtual void AutoGamma(Channels channels);
    public abstract virtual void AutoLevel();
    public abstract virtual void AutoLevel(Channels channels);
    public abstract virtual void AutoOrient();
    public abstract virtual void AutoThreshold(AutoThresholdMethod method);
    public abstract virtual void BilateralBlur(UInt32 width, UInt32 height);
    public abstract virtual void BilateralBlur(UInt32 width, UInt32 height, double intensitySigma, double spatialSigma);
    public abstract virtual void BlackThreshold(Percentage threshold);
    public abstract virtual void BlackThreshold(Percentage threshold, Channels channels);
    public abstract virtual void BlueShift();
    public abstract virtual void BlueShift(double factor);
    public abstract virtual void Blur();
    public abstract virtual void Blur(Channels channels);
    public abstract virtual void Blur(double radius, double sigma);
    public abstract virtual void Blur(double radius, double sigma, Channels channels);
    public abstract virtual void Border(UInt32 size);
    public abstract virtual void Border(UInt32 width, UInt32 height);
    public abstract virtual void Border(Percentage percentage);
    public abstract virtual void BrightnessContrast(Percentage brightness, Percentage contrast);
    public abstract virtual void BrightnessContrast(Percentage brightness, Percentage contrast, Channels channels);
    public abstract virtual void CannyEdge();
    public abstract virtual void CannyEdge(double radius, double sigma, Percentage lower, Percentage upper);
    public abstract virtual void Charcoal();
    public abstract virtual void Charcoal(double radius, double sigma);
    public abstract virtual void Chop(IMagickGeometry geometry);
    public abstract virtual void ChopHorizontal(int offset, UInt32 width);
    public abstract virtual void ChopVertical(int offset, UInt32 height);
    public abstract virtual void Clahe(Percentage xTiles, Percentage yTiles, UInt32 numberBins, double clipLimit);
    public abstract virtual void Clahe(UInt32 xTiles, UInt32 yTiles, UInt32 numberBins, double clipLimit);
    public abstract virtual void Clamp();
    public abstract virtual void Clamp(Channels channels);
    public abstract virtual void Clip();
    public abstract virtual void Clip(string pathName);
    public abstract virtual void ClipOutside();
    public abstract virtual void ClipOutside(string pathName);
    public abstract virtual void Clut(IMagickImage image);
    public abstract virtual void Clut(IMagickImage image, Channels channels);
    public abstract virtual void Clut(IMagickImage image, PixelInterpolateMethod method);
    public abstract virtual void Clut(IMagickImage image, PixelInterpolateMethod method, Channels channels);
    public abstract virtual void ColorDecisionList(string fileName);
    public abstract virtual void ColorMatrix(IMagickColorMatrix matrix);
    public abstract virtual IMagickErrorInfo Compare(IMagickImage image);
    public abstract virtual double Compare(IMagickImage image, ErrorMetric metric);
    public abstract virtual double Compare(IMagickImage image, ErrorMetric metric, Channels channels);
    public abstract virtual void Composite(IMagickImage image);
    public abstract virtual void Composite(IMagickImage image, Channels channels);
    public abstract virtual void Composite(IMagickImage image, CompositeOperator compose);
    public abstract virtual void Composite(IMagickImage image, CompositeOperator compose, Channels channels);
    public abstract virtual void Composite(IMagickImage image, CompositeOperator compose, string args);
    public abstract virtual void Composite(IMagickImage image, CompositeOperator compose, string args, Channels channels);
    public abstract virtual void Composite(IMagickImage image, int x, int y);
    public abstract virtual void Composite(IMagickImage image, int x, int y, Channels channels);
    public abstract virtual void Composite(IMagickImage image, int x, int y, CompositeOperator compose);
    public abstract virtual void Composite(IMagickImage image, int x, int y, CompositeOperator compose, Channels channels);
    public abstract virtual void Composite(IMagickImage image, int x, int y, CompositeOperator compose, string args);
    public abstract virtual void Composite(IMagickImage image, int x, int y, CompositeOperator compose, string args, Channels channels);
    public abstract virtual void Composite(IMagickImage image, Gravity gravity);
    public abstract virtual void Composite(IMagickImage image, Gravity gravity, Channels channels);
    public abstract virtual void Composite(IMagickImage image, Gravity gravity, CompositeOperator compose);
    public abstract virtual void Composite(IMagickImage image, Gravity gravity, CompositeOperator compose, Channels channels);
    public abstract virtual void Composite(IMagickImage image, Gravity gravity, CompositeOperator compose, string args);
    public abstract virtual void Composite(IMagickImage image, Gravity gravity, CompositeOperator compose, string args, Channels channels);
    public abstract virtual void Composite(IMagickImage image, Gravity gravity, int x, int y);
    public abstract virtual void Composite(IMagickImage image, Gravity gravity, int x, int y, Channels channels);
    public abstract virtual void Composite(IMagickImage image, Gravity gravity, int x, int y, CompositeOperator compose);
    public abstract virtual void Composite(IMagickImage image, Gravity gravity, int x, int y, CompositeOperator compose, Channels channels);
    public abstract virtual void Composite(IMagickImage image, Gravity gravity, int x, int y, CompositeOperator compose, string args);
    public abstract virtual void Composite(IMagickImage image, Gravity gravity, int x, int y, CompositeOperator compose, string args, Channels channels);
    public abstract virtual void Contrast();
    public abstract virtual void ContrastStretch(Percentage blackPoint);
    public abstract virtual void ContrastStretch(Percentage blackPoint, Percentage whitePoint);
    public abstract virtual void ContrastStretch(Percentage blackPoint, Percentage whitePoint, Channels channels);
    public abstract virtual IEnumerable`1<PointD> ConvexHull();
    public abstract virtual void Convolve(IConvolveMatrix matrix);
    public abstract virtual void CopyPixels(IMagickImage source);
    public abstract virtual void CopyPixels(IMagickImage source, Channels channels);
    public abstract virtual void CopyPixels(IMagickImage source, IMagickGeometry geometry);
    public abstract virtual void CopyPixels(IMagickImage source, IMagickGeometry geometry, Channels channels);
    public abstract virtual void CopyPixels(IMagickImage source, IMagickGeometry geometry, int x, int y);
    public abstract virtual void CopyPixels(IMagickImage source, IMagickGeometry geometry, int x, int y, Channels channels);
    public abstract virtual void Crop(UInt32 width, UInt32 height);
    public abstract virtual void Crop(UInt32 width, UInt32 height, Gravity gravity);
    public abstract virtual void Crop(IMagickGeometry geometry);
    public abstract virtual void Crop(IMagickGeometry geometry, Gravity gravity);
    public abstract virtual void CycleColormap(int amount);
    public abstract virtual void Decipher(string passphrase);
    public abstract virtual double Deskew(Percentage threshold);
    public abstract virtual double DeskewAndCrop(Percentage threshold);
    public abstract virtual void Despeckle();
    public abstract virtual UInt32 DetermineBitDepth();
    public abstract virtual UInt32 DetermineBitDepth(Channels channels);
    public abstract virtual ColorType DetermineColorType();
    public abstract virtual void Distort(DistortMethod method, Double[] arguments);
    public abstract virtual void Distort(IDistortSettings settings, Double[] arguments);
    public abstract virtual void Draw(IDrawable[] drawables);
    public abstract virtual void Draw(IEnumerable`1<IDrawable> drawables);
    public abstract virtual void Edge(double radius);
    public abstract virtual void Emboss();
    public abstract virtual void Emboss(double radius, double sigma);
    public abstract virtual void Encipher(string passphrase);
    public abstract virtual void Enhance();
    public abstract virtual void Equalize();
    public abstract virtual void Equalize(Channels channels);
    public abstract virtual void Evaluate(Channels channels, EvaluateFunction evaluateFunction, Double[] arguments);
    public abstract virtual void Evaluate(Channels channels, EvaluateOperator evaluateOperator, double value);
    public abstract virtual void Evaluate(Channels channels, EvaluateOperator evaluateOperator, Percentage percentage);
    public abstract virtual void Evaluate(Channels channels, IMagickGeometry geometry, EvaluateOperator evaluateOperator, double value);
    public abstract virtual void Evaluate(Channels channels, IMagickGeometry geometry, EvaluateOperator evaluateOperator, Percentage percentage);
    public abstract virtual void Extent(UInt32 width, UInt32 height);
    public abstract virtual void Extent(int x, int y, UInt32 width, UInt32 height);
    public abstract virtual void Extent(UInt32 width, UInt32 height, Gravity gravity);
    public abstract virtual void Extent(IMagickGeometry geometry);
    public abstract virtual void Extent(IMagickGeometry geometry, Gravity gravity);
    public abstract virtual void Flip();
    public abstract virtual void Flop();
    public abstract virtual ITypeMetric FontTypeMetrics(string text);
    public abstract virtual ITypeMetric FontTypeMetrics(string text, bool ignoreNewlines);
    public abstract virtual string FormatExpression(string expression);
    public abstract virtual void Frame();
    public abstract virtual void Frame(IMagickGeometry geometry);
    public abstract virtual void Frame(UInt32 width, UInt32 height);
    public abstract virtual void Frame(UInt32 width, UInt32 height, int innerBevel, int outerBevel);
    public abstract virtual void Fx(string expression);
    public abstract virtual void Fx(string expression, Channels channels);
    public abstract virtual void GammaCorrect(double gamma);
    public abstract virtual void GammaCorrect(double gamma, Channels channels);
    public abstract virtual void GaussianBlur(double radius);
    public abstract virtual void GaussianBlur(double radius, Channels channels);
    public abstract virtual void GaussianBlur(double radius, double sigma);
    public abstract virtual void GaussianBlur(double radius, double sigma, Channels channels);
    [NullableContextAttribute("2")]
public abstract virtual IEightBimProfile Get8BimProfile();
    public abstract virtual string GetArtifact(string name);
    public abstract virtual string GetAttribute(string name);
    [NullableContextAttribute("2")]
public abstract virtual string GetClippingPath();
    public abstract virtual string GetClippingPath(string pathName);
    [NullableContextAttribute("2")]
public abstract virtual IColorProfile GetColorProfile();
    [NullableContextAttribute("2")]
public abstract virtual IExifProfile GetExifProfile();
    [NullableContextAttribute("2")]
public abstract virtual IIptcProfile GetIptcProfile();
    public abstract virtual IImageProfile GetProfile(string name);
    [NullableContextAttribute("2")]
public abstract virtual IXmpProfile GetXmpProfile();
    public abstract virtual void Grayscale();
    public abstract virtual void Grayscale(PixelIntensityMethod method);
    public abstract virtual void HaldClut(IMagickImage image);
    public abstract virtual void HaldClut(IMagickImage image, Channels channels);
    public abstract virtual bool HasProfile(string name);
    public abstract virtual void HoughLine();
    public abstract virtual void HoughLine(UInt32 width, UInt32 height, UInt32 threshold);
    public abstract virtual void Implode(double amount, PixelInterpolateMethod method);
    public abstract virtual void ImportPixels(Byte[] data, IPixelImportSettings settings);
    public abstract virtual void ImportPixels(Byte[] data, UInt32 offset, IPixelImportSettings settings);
    public abstract virtual void InterpolativeResize(UInt32 width, UInt32 height, PixelInterpolateMethod method);
    public abstract virtual void InterpolativeResize(IMagickGeometry geometry, PixelInterpolateMethod method);
    public abstract virtual void InterpolativeResize(Percentage percentage, PixelInterpolateMethod method);
    public abstract virtual void InterpolativeResize(Percentage percentageWidth, Percentage percentageHeight, PixelInterpolateMethod method);
    public abstract virtual void InverseContrast();
    public abstract virtual void InverseLevel(Percentage blackPointPercentage, Percentage whitePointPercentage);
    public abstract virtual void InverseLevel(Percentage blackPointPercentage, Percentage whitePointPercentage, Channels channels);
    public abstract virtual void InverseLevel(Percentage blackPointPercentage, Percentage whitePointPercentage, double gamma);
    public abstract virtual void InverseLevel(Percentage blackPointPercentage, Percentage whitePointPercentage, double gamma, Channels channels);
    public abstract virtual void InverseSigmoidalContrast(double contrast);
    public abstract virtual void InverseSigmoidalContrast(double contrast, double midpoint);
    public abstract virtual void InverseSigmoidalContrast(double contrast, double midpoint, Channels channels);
    public abstract virtual void InverseSigmoidalContrast(double contrast, Percentage midpointPercentage);
    public abstract virtual void Kmeans(IKmeansSettings settings);
    public abstract virtual void Kuwahara();
    public abstract virtual void Kuwahara(double radius, double sigma);
    public abstract virtual void Level(Percentage blackPointPercentage, Percentage whitePointPercentage);
    public abstract virtual void Level(Percentage blackPointPercentage, Percentage whitePointPercentage, Channels channels);
    public abstract virtual void Level(Percentage blackPointPercentage, Percentage whitePointPercentage, double gamma);
    public abstract virtual void Level(Percentage blackPointPercentage, Percentage whitePointPercentage, double gamma, Channels channels);
    public abstract virtual void LinearStretch(Percentage blackPoint, Percentage whitePoint);
    public abstract virtual void LiquidRescale(UInt32 width, UInt32 height);
    public abstract virtual void LiquidRescale(UInt32 width, UInt32 height, double deltaX, double rigidity);
    public abstract virtual void LiquidRescale(IMagickGeometry geometry);
    public abstract virtual void LiquidRescale(Percentage percentage);
    public abstract virtual void LiquidRescale(Percentage percentageWidth, Percentage percentageHeight);
    public abstract virtual void LiquidRescale(Percentage percentageWidth, Percentage percentageHeight, double deltaX, double rigidity);
    public abstract virtual void LocalContrast(double radius, Percentage strength);
    public abstract virtual void LocalContrast(double radius, Percentage strength, Channels channels);
    public abstract virtual void Lower(UInt32 size);
    public abstract virtual void Magnify();
    public abstract virtual void MeanShift(UInt32 size);
    public abstract virtual void MeanShift(UInt32 size, Percentage colorDistance);
    public abstract virtual void MeanShift(UInt32 width, UInt32 height);
    public abstract virtual void MeanShift(UInt32 width, UInt32 height, Percentage colorDistance);
    public abstract virtual void MedianFilter();
    public abstract virtual void MedianFilter(UInt32 radius);
    public abstract virtual void Minify();
    public abstract virtual IEnumerable`1<PointD> MinimumBoundingBox();
    public abstract virtual void Modulate(Percentage brightness);
    public abstract virtual void Modulate(Percentage brightness, Percentage saturation);
    public abstract virtual void Modulate(Percentage brightness, Percentage saturation, Percentage hue);
    public abstract virtual void Morphology(IMorphologySettings settings);
    public abstract virtual IMoments Moments();
    public abstract virtual void MotionBlur(double radius, double sigma, double angle);
    public abstract virtual void Negate();
    public abstract virtual void Negate(Channels channels);
    public abstract virtual void NegateGrayscale();
    public abstract virtual void NegateGrayscale(Channels channels);
    public abstract virtual void Normalize();
    public abstract virtual void OilPaint();
    public abstract virtual void OilPaint(double radius, double sigma);
    public abstract virtual void OrderedDither(string thresholdMap);
    public abstract virtual void OrderedDither(string thresholdMap, Channels channels);
    public abstract virtual void Perceptible(double epsilon);
    public abstract virtual void Perceptible(double epsilon, Channels channels);
    [NullableContextAttribute("2")]
public abstract virtual IPerceptualHash PerceptualHash();
    public abstract virtual IPerceptualHash PerceptualHash(ColorSpace[] colorSpaces);
    public abstract virtual void Ping(Byte[] data);
    public abstract virtual void Ping(Byte[] data, UInt32 offset, UInt32 count);
    public abstract virtual void Ping(FileInfo file);
    public abstract virtual void Ping(Stream stream);
    public abstract virtual void Ping(string fileName);
    public abstract virtual void Polaroid(string caption, double angle, PixelInterpolateMethod method);
    public abstract virtual void Posterize(int levels);
    public abstract virtual void Posterize(int levels, Channels channels);
    public abstract virtual void Posterize(int levels, DitherMethod method);
    public abstract virtual void Posterize(int levels, DitherMethod method, Channels channels);
    public abstract virtual void PreserveColorType();
    public abstract virtual IMagickErrorInfo Quantize(IQuantizeSettings settings);
    public abstract virtual void Raise(int size);
    public abstract virtual void RandomThreshold(Percentage percentageLow, Percentage percentageHigh);
    public abstract virtual void RandomThreshold(Percentage percentageLow, Percentage percentageHigh, Channels channels);
    public abstract virtual void RangeThreshold(Percentage percentageLowBlack, Percentage percentageLowWhite, Percentage percentageHighWhite, Percentage percentageHighBlack);
    public abstract virtual void Read(Byte[] data);
    public abstract virtual void Read(Byte[] data, UInt32 offset, UInt32 count);
    public abstract virtual void Read(Byte[] data, UInt32 offset, UInt32 count, MagickFormat format);
    public abstract virtual void Read(Byte[] data, MagickFormat format);
    public abstract virtual void Read(FileInfo file);
    public abstract virtual void Read(FileInfo file, UInt32 width, UInt32 height);
    public abstract virtual void Read(FileInfo file, MagickFormat format);
    public abstract virtual void Read(Stream stream);
    public abstract virtual void Read(Stream stream, MagickFormat format);
    public abstract virtual void Read(string fileName);
    public abstract virtual void Read(string fileName, UInt32 width, UInt32 height);
    public abstract virtual void Read(string fileName, MagickFormat format);
    public abstract virtual Task ReadAsync(FileInfo file);
    public abstract virtual Task ReadAsync(FileInfo file, CancellationToken cancellationToken);
    public abstract virtual Task ReadAsync(FileInfo file, MagickFormat format);
    public abstract virtual Task ReadAsync(FileInfo file, MagickFormat format, CancellationToken cancellationToken);
    public abstract virtual Task ReadAsync(Stream stream);
    public abstract virtual Task ReadAsync(Stream stream, CancellationToken cancellationToken);
    public abstract virtual Task ReadAsync(Stream stream, MagickFormat format);
    public abstract virtual Task ReadAsync(Stream stream, MagickFormat format, CancellationToken cancellationToken);
    public abstract virtual Task ReadAsync(string fileName);
    public abstract virtual Task ReadAsync(string fileName, CancellationToken cancellationToken);
    public abstract virtual Task ReadAsync(string fileName, MagickFormat format);
    public abstract virtual Task ReadAsync(string fileName, MagickFormat format, CancellationToken cancellationToken);
    public abstract virtual void ReduceNoise();
    public abstract virtual void ReduceNoise(UInt32 order);
    public abstract virtual void RegionMask(IMagickGeometry region);
    public abstract virtual IMagickErrorInfo Remap(IMagickImage image);
    public abstract virtual IMagickErrorInfo Remap(IMagickImage image, IQuantizeSettings settings);
    public abstract virtual void RemoveArtifact(string name);
    public abstract virtual void RemoveAttribute(string name);
    public abstract virtual void RemoveRegionMask();
    public abstract virtual void RemoveProfile(IImageProfile profile);
    public abstract virtual void RemoveProfile(string name);
    public abstract virtual void RemoveReadMask();
    public abstract virtual void RemoveWriteMask();
    public abstract virtual void Resample(double resolutionX, double resolutionY);
    public abstract virtual void Resample(PointD density);
    public abstract virtual void ResetPage();
    public abstract virtual void Resize(UInt32 width, UInt32 height);
    public abstract virtual void Resize(IMagickGeometry geometry);
    public abstract virtual void Resize(Percentage percentage);
    public abstract virtual void Resize(Percentage percentageWidth, Percentage percentageHeight);
    public abstract virtual void Roll(int x, int y);
    public abstract virtual void Rotate(double degrees);
    public abstract virtual void RotationalBlur(double angle);
    public abstract virtual void RotationalBlur(double angle, Channels channels);
    public abstract virtual void Sample(UInt32 width, UInt32 height);
    public abstract virtual void Sample(IMagickGeometry geometry);
    public abstract virtual void Sample(Percentage percentage);
    public abstract virtual void Sample(Percentage percentageWidth, Percentage percentageHeight);
    public abstract virtual void Scale(UInt32 width, UInt32 height);
    public abstract virtual void Scale(IMagickGeometry geometry);
    public abstract virtual void Scale(Percentage percentage);
    public abstract virtual void Scale(Percentage percentageWidth, Percentage percentageHeight);
    public abstract virtual void Segment();
    public abstract virtual void Segment(ColorSpace quantizeColorSpace, double clusterThreshold, double smoothingThreshold);
    public abstract virtual void SelectiveBlur(double radius, double sigma, double threshold);
    public abstract virtual void SelectiveBlur(double radius, double sigma, double threshold, Channels channels);
    public abstract virtual void SelectiveBlur(double radius, double sigma, Percentage thresholdPercentage);
    public abstract virtual void SelectiveBlur(double radius, double sigma, Percentage thresholdPercentage, Channels channels);
    public abstract virtual void SepiaTone();
    public abstract virtual void SepiaTone(Percentage threshold);
    public abstract virtual void SetArtifact(string name, string value);
    public abstract virtual void SetArtifact(string name, bool flag);
    public abstract virtual void SetAttenuate(double attenuate);
    public abstract virtual void SetAttribute(string name, string value);
    public abstract virtual void SetAttribute(string name, bool flag);
    public abstract virtual void SetBitDepth(UInt32 value);
    public abstract virtual void SetBitDepth(UInt32 value, Channels channels);
    public abstract virtual void SetClippingPath(string value);
    public abstract virtual void SetClippingPath(string value, string pathName);
    public abstract virtual void SetCompression(CompressionMethod compression);
    public abstract virtual void SetProfile(IImageProfile profile);
    public abstract virtual void SetProfile(IColorProfile profile);
    public abstract virtual void SetProfile(IColorProfile profile, ColorTransformMode mode);
    public abstract virtual void SetReadMask(IMagickImage image);
    public abstract virtual void SetWriteMask(IMagickImage image);
    public abstract virtual void Shade();
    public abstract virtual void Shade(double azimuth, double elevation);
    public abstract virtual void Shade(double azimuth, double elevation, Channels channels);
    public abstract virtual void ShadeGrayscale();
    public abstract virtual void ShadeGrayscale(double azimuth, double elevation);
    public abstract virtual void ShadeGrayscale(double azimuth, double elevation, Channels channels);
    public abstract virtual void Shadow();
    public abstract virtual void Shadow(int x, int y, double sigma, Percentage alpha);
    public abstract virtual void Sharpen();
    public abstract virtual void Sharpen(Channels channels);
    public abstract virtual void Sharpen(double radius, double sigma);
    public abstract virtual void Sharpen(double radius, double sigma, Channels channels);
    public abstract virtual void Shave(UInt32 size);
    public abstract virtual void Shave(UInt32 leftRight, UInt32 topBottom);
    public abstract virtual void Shear(double xAngle, double yAngle);
    public abstract virtual void SigmoidalContrast(double contrast);
    public abstract virtual void SigmoidalContrast(double contrast, double midpoint);
    public abstract virtual void SigmoidalContrast(double contrast, double midpoint, Channels channels);
    public abstract virtual void SigmoidalContrast(double contrast, Percentage midpointPercentage);
    public abstract virtual void Sketch();
    public abstract virtual void Sketch(double radius, double sigma, double angle);
    public abstract virtual void Solarize();
    public abstract virtual void Solarize(double factor);
    public abstract virtual void SortPixels();
    public abstract virtual void Solarize(Percentage factorPercentage);
    public abstract virtual void Splice(IMagickGeometry geometry);
    public abstract virtual void Spread();
    public abstract virtual void Spread(double radius);
    public abstract virtual void Spread(PixelInterpolateMethod method, double radius);
    public abstract virtual void Statistic(StatisticType type, UInt32 width, UInt32 height);
    public abstract virtual IStatistics Statistics();
    public abstract virtual IStatistics Statistics(Channels channels);
    public abstract virtual void Stegano(IMagickImage watermark);
    public abstract virtual void Stereo(IMagickImage rightImage);
    public abstract virtual void Strip();
    public abstract virtual void Swirl(double degrees);
    public abstract virtual void Swirl(PixelInterpolateMethod method, double degrees);
    public abstract virtual void Texture(IMagickImage image);
    public abstract virtual void Threshold(Percentage percentage);
    public abstract virtual void Threshold(Percentage percentage, Channels channels);
    public abstract virtual void Thumbnail(UInt32 width, UInt32 height);
    public abstract virtual void Thumbnail(IMagickGeometry geometry);
    public abstract virtual void Thumbnail(Percentage percentage);
    public abstract virtual void Thumbnail(Percentage percentageWidth, Percentage percentageHeight);
    public abstract virtual void Tile(IMagickImage image, CompositeOperator compose);
    public abstract virtual void Tile(IMagickImage image, CompositeOperator compose, string args);
    public abstract virtual string ToBase64();
    public abstract virtual string ToBase64(MagickFormat format);
    public abstract virtual string ToBase64(IWriteDefines defines);
    public abstract virtual Byte[] ToByteArray();
    public abstract virtual Byte[] ToByteArray(IWriteDefines defines);
    public abstract virtual Byte[] ToByteArray(MagickFormat format);
    public abstract virtual bool TransformColorSpace(IColorProfile target);
    public abstract virtual bool TransformColorSpace(IColorProfile target, ColorTransformMode mode);
    public abstract virtual bool TransformColorSpace(IColorProfile source, IColorProfile target);
    public abstract virtual bool TransformColorSpace(IColorProfile source, IColorProfile target, ColorTransformMode mode);
    public abstract virtual void Transpose();
    public abstract virtual void Transverse();
    public abstract virtual void Trim();
    public abstract virtual void Trim(Gravity[] edges);
    public abstract virtual void Trim(Percentage percentBackground);
    public abstract virtual void UnsharpMask(double radius, double sigma);
    public abstract virtual void UnsharpMask(double radius, double sigma, Channels channels);
    public abstract virtual void UnsharpMask(double radius, double sigma, double amount, double threshold);
    public abstract virtual void UnsharpMask(double radius, double sigma, double amount, double threshold, Channels channels);
    public abstract virtual void Vignette();
    public abstract virtual void Vignette(double radius, double sigma, int x, int y);
    public abstract virtual void Wave();
    public abstract virtual void Wave(PixelInterpolateMethod method, double amplitude, double length);
    public abstract virtual void WaveletDenoise(Percentage thresholdPercentage);
    public abstract virtual void WaveletDenoise(Percentage thresholdPercentage, double softness);
    public abstract virtual void WhiteBalance();
    public abstract virtual void WhiteBalance(Percentage vibrance);
    public abstract virtual void WhiteThreshold(Percentage threshold);
    public abstract virtual void WhiteThreshold(Percentage threshold, Channels channels);
    public abstract virtual void Write(FileInfo file);
    public abstract virtual void Write(FileInfo file, IWriteDefines defines);
    public abstract virtual void Write(FileInfo file, MagickFormat format);
    public abstract virtual void Write(Stream stream);
    public abstract virtual void Write(Stream stream, IWriteDefines defines);
    public abstract virtual void Write(Stream stream, MagickFormat format);
    public abstract virtual void Write(string fileName);
    public abstract virtual void Write(string fileName, IWriteDefines defines);
    public abstract virtual void Write(string fileName, MagickFormat format);
    public abstract virtual Task WriteAsync(FileInfo file);
    public abstract virtual Task WriteAsync(FileInfo file, CancellationToken cancellationToken);
    public abstract virtual Task WriteAsync(FileInfo file, IWriteDefines defines);
    public abstract virtual Task WriteAsync(FileInfo file, IWriteDefines defines, CancellationToken cancellationToken);
    public abstract virtual Task WriteAsync(FileInfo file, MagickFormat format);
    public abstract virtual Task WriteAsync(FileInfo file, MagickFormat format, CancellationToken cancellationToken);
    public abstract virtual Task WriteAsync(Stream stream);
    public abstract virtual Task WriteAsync(Stream stream, CancellationToken cancellationToken);
    public abstract virtual Task WriteAsync(Stream stream, IWriteDefines defines);
    public abstract virtual Task WriteAsync(Stream stream, IWriteDefines defines, CancellationToken cancellationToken);
    public abstract virtual Task WriteAsync(Stream stream, MagickFormat format);
    public abstract virtual Task WriteAsync(Stream stream, MagickFormat format, CancellationToken cancellationToken);
    public abstract virtual Task WriteAsync(string fileName);
    public abstract virtual Task WriteAsync(string fileName, CancellationToken cancellationToken);
    public abstract virtual Task WriteAsync(string fileName, IWriteDefines defines);
    public abstract virtual Task WriteAsync(string fileName, IWriteDefines defines, CancellationToken cancellationToken);
    public abstract virtual Task WriteAsync(string fileName, MagickFormat format);
    public abstract virtual Task WriteAsync(string fileName, MagickFormat format, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public abstract virtual void Ping(ReadOnlySequence`1<byte> data);
    [NullableContextAttribute("0")]
public abstract virtual void Ping(ReadOnlySpan`1<byte> data);
    [NullableContextAttribute("0")]
public abstract virtual void Read(ReadOnlySequence`1<byte> data);
    [NullableContextAttribute("0")]
public abstract virtual void Read(ReadOnlySequence`1<byte> data, MagickFormat format);
    [NullableContextAttribute("0")]
public abstract virtual void Read(ReadOnlySpan`1<byte> data);
    [NullableContextAttribute("0")]
public abstract virtual void Read(ReadOnlySpan`1<byte> data, MagickFormat format);
    public abstract virtual void Write(IBufferWriter`1<byte> bufferWriter);
    public abstract virtual void Write(IBufferWriter`1<byte> bufferWriter, IWriteDefines defines);
    public abstract virtual void Write(IBufferWriter`1<byte> bufferWriter, MagickFormat format);
}
[NullableContextAttribute("1")]
public interface ImageMagick.IMagickImage`1 {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> BackgroundColor { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> BorderColor { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> MatteColor { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickSettings`1<TQuantumType> Settings { get; }
    public abstract virtual IMagickColor`1<TQuantumType> get_BackgroundColor();
    public abstract virtual void set_BackgroundColor(IMagickColor`1<TQuantumType> value);
    public abstract virtual IMagickColor`1<TQuantumType> get_BorderColor();
    public abstract virtual void set_BorderColor(IMagickColor`1<TQuantumType> value);
    public abstract virtual IMagickColor`1<TQuantumType> get_MatteColor();
    public abstract virtual void set_MatteColor(IMagickColor`1<TQuantumType> value);
    public abstract virtual IMagickSettings`1<TQuantumType> get_Settings();
    public abstract virtual IMagickImage`1<TQuantumType> Clone();
    public abstract virtual IMagickImage`1<TQuantumType> Clone(IMagickGeometry geometry);
    public abstract virtual IMagickImage`1<TQuantumType> Clone(UInt32 width, UInt32 height);
    public abstract virtual IMagickImage`1<TQuantumType> Clone(int x, int y, UInt32 width, UInt32 height);
    public abstract virtual void ColorAlpha(IMagickColor`1<TQuantumType> color);
    public abstract virtual void Colorize(IMagickColor`1<TQuantumType> color, Percentage alpha);
    public abstract virtual void Colorize(IMagickColor`1<TQuantumType> color, Percentage alphaRed, Percentage alphaGreen, Percentage alphaBlue);
    public abstract virtual void ColorThreshold(IMagickColor`1<TQuantumType> startColor, IMagickColor`1<TQuantumType> stopColor);
    public abstract virtual IMagickImage`1<TQuantumType> Compare(IMagickImage image, ErrorMetric metric, Double& distortion);
    public abstract virtual IMagickImage`1<TQuantumType> Compare(IMagickImage image, ErrorMetric metric, Channels channels, Double& distortion);
    public abstract virtual IMagickImage`1<TQuantumType> Compare(IMagickImage image, ICompareSettings`1<TQuantumType> settings, Double& distortion);
    public abstract virtual IMagickImage`1<TQuantumType> Compare(IMagickImage image, ICompareSettings`1<TQuantumType> settings, Channels channels, Double& distortion);
    public abstract virtual IReadOnlyList`1<IConnectedComponent`1<TQuantumType>> ConnectedComponents(UInt32 connectivity);
    public abstract virtual IReadOnlyList`1<IConnectedComponent`1<TQuantumType>> ConnectedComponents(IConnectedComponentsSettings settings);
    public abstract virtual IReadOnlyList`1<IMagickImage`1<TQuantumType>> CropToTiles(UInt32 width, UInt32 height);
    public abstract virtual IReadOnlyList`1<IMagickImage`1<TQuantumType>> CropToTiles(IMagickGeometry geometry);
    public abstract virtual void Draw(IDrawables`1<TQuantumType> drawables);
    public abstract virtual void Extent(UInt32 width, UInt32 height, IMagickColor`1<TQuantumType> backgroundColor);
    public abstract virtual void Extent(UInt32 width, UInt32 height, Gravity gravity, IMagickColor`1<TQuantumType> backgroundColor);
    public abstract virtual void Extent(IMagickGeometry geometry, IMagickColor`1<TQuantumType> backgroundColor);
    public abstract virtual void Extent(IMagickGeometry geometry, Gravity gravity, IMagickColor`1<TQuantumType> backgroundColor);
    [NullableContextAttribute("0")]
public abstract virtual void FloodFill(TQuantumType alpha, int x, int y);
    public abstract virtual void FloodFill(IMagickColor`1<TQuantumType> color, int x, int y);
    public abstract virtual void FloodFill(IMagickColor`1<TQuantumType> color, int x, int y, IMagickColor`1<TQuantumType> target);
    public abstract virtual void FloodFill(IMagickImage`1<TQuantumType> image, int x, int y);
    public abstract virtual void FloodFill(IMagickImage`1<TQuantumType> image, int x, int y, IMagickColor`1<TQuantumType> target);
    public abstract virtual IMagickColor`1<TQuantumType> GetColormapColor(int index);
    public abstract virtual IPixelCollection`1<TQuantumType> GetPixels();
    public abstract virtual IUnsafePixelCollection`1<TQuantumType> GetPixelsUnsafe();
    public abstract virtual IMagickImage`1<TQuantumType> GetReadMask();
    public abstract virtual IMagickImage`1<TQuantumType> GetWriteMask();
    public abstract virtual IReadOnlyDictionary`2<IMagickColor`1<TQuantumType>, UInt32> Histogram();
    public abstract virtual void ImportPixels(TQuantumType[] data, IPixelImportSettings settings);
    public abstract virtual void ImportPixels(TQuantumType[] data, UInt32 offset, IPixelImportSettings settings);
    public abstract virtual IMagickImage`1<TQuantumType> Integral();
    [NullableContextAttribute("0")]
public abstract virtual void InverseFloodFill(TQuantumType alpha, int x, int y);
    public abstract virtual void InverseFloodFill(IMagickColor`1<TQuantumType> color, int x, int y);
    public abstract virtual void InverseFloodFill(IMagickColor`1<TQuantumType> color, int x, int y, IMagickColor`1<TQuantumType> target);
    public abstract virtual void InverseFloodFill(IMagickImage`1<TQuantumType> image, int x, int y);
    public abstract virtual void InverseFloodFill(IMagickImage`1<TQuantumType> image, int x, int y, IMagickColor`1<TQuantumType> target);
    [NullableContextAttribute("0")]
public abstract virtual void InverseLevel(TQuantumType blackPoint, TQuantumType whitePoint);
    [NullableContextAttribute("0")]
public abstract virtual void InverseLevel(TQuantumType blackPoint, TQuantumType whitePoint, Channels channels);
    [NullableContextAttribute("0")]
public abstract virtual void InverseLevel(TQuantumType blackPoint, TQuantumType whitePoint, double gamma);
    [NullableContextAttribute("0")]
public abstract virtual void InverseLevel(TQuantumType blackPoint, TQuantumType whitePoint, double gamma, Channels channels);
    public abstract virtual void InverseLevelColors(IMagickColor`1<TQuantumType> blackColor, IMagickColor`1<TQuantumType> whiteColor);
    public abstract virtual void InverseLevelColors(IMagickColor`1<TQuantumType> blackColor, IMagickColor`1<TQuantumType> whiteColor, Channels channels);
    public abstract virtual void InverseOpaque(IMagickColor`1<TQuantumType> target, IMagickColor`1<TQuantumType> fill);
    public abstract virtual void InverseTransparent(IMagickColor`1<TQuantumType> color);
    public abstract virtual void InverseTransparentChroma(IMagickColor`1<TQuantumType> colorLow, IMagickColor`1<TQuantumType> colorHigh);
    [NullableContextAttribute("0")]
public abstract virtual void Level(TQuantumType blackPoint, TQuantumType whitePoint);
    [NullableContextAttribute("0")]
public abstract virtual void Level(TQuantumType blackPoint, TQuantumType whitePoint, Channels channels);
    [NullableContextAttribute("0")]
public abstract virtual void Level(TQuantumType blackPoint, TQuantumType whitePoint, double gamma);
    [NullableContextAttribute("0")]
public abstract virtual void Level(TQuantumType blackPoint, TQuantumType whitePoint, double gamma, Channels channels);
    public abstract virtual void LevelColors(IMagickColor`1<TQuantumType> blackColor, IMagickColor`1<TQuantumType> whiteColor);
    public abstract virtual void LevelColors(IMagickColor`1<TQuantumType> blackColor, IMagickColor`1<TQuantumType> whiteColor, Channels channels);
    public abstract virtual void Opaque(IMagickColor`1<TQuantumType> target, IMagickColor`1<TQuantumType> fill);
    public abstract virtual void Ping(Byte[] data, UInt32 offset, UInt32 count, IMagickReadSettings`1<TQuantumType> readSettings);
    public abstract virtual void Ping(Byte[] data, IMagickReadSettings`1<TQuantumType> readSettings);
    public abstract virtual void Ping(FileInfo file, IMagickReadSettings`1<TQuantumType> readSettings);
    public abstract virtual void Ping(Stream stream, IMagickReadSettings`1<TQuantumType> readSettings);
    public abstract virtual void Ping(string fileName, IMagickReadSettings`1<TQuantumType> readSettings);
    public abstract virtual IMagickErrorInfo Remap(IEnumerable`1<IMagickColor`1<TQuantumType>> colors);
    public abstract virtual IMagickErrorInfo Remap(IEnumerable`1<IMagickColor`1<TQuantumType>> colors, IQuantizeSettings settings);
    [NullableContextAttribute("0")]
public abstract virtual void RandomThreshold(TQuantumType low, TQuantumType high);
    [NullableContextAttribute("0")]
public abstract virtual void RandomThreshold(TQuantumType low, TQuantumType high, Channels channels);
    [NullableContextAttribute("0")]
public abstract virtual void RangeThreshold(TQuantumType lowBlack, TQuantumType lowWhite, TQuantumType highWhite, TQuantumType highBlack);
    public abstract virtual void Read(Byte[] data, UInt32 offset, UInt32 count, IMagickReadSettings`1<TQuantumType> readSettings);
    public abstract virtual void Read(Byte[] data, IMagickReadSettings`1<TQuantumType> readSettings);
    public abstract virtual void Read(FileInfo file, IMagickReadSettings`1<TQuantumType> readSettings);
    public abstract virtual void Read(IMagickColor`1<TQuantumType> color, UInt32 width, UInt32 height);
    public abstract virtual void Read(Stream stream, IMagickReadSettings`1<TQuantumType> readSettings);
    public abstract virtual void Read(string fileName, IMagickReadSettings`1<TQuantumType> readSettings);
    public abstract virtual Task ReadAsync(FileInfo file, IMagickReadSettings`1<TQuantumType> readSettings);
    public abstract virtual Task ReadAsync(FileInfo file, IMagickReadSettings`1<TQuantumType> readSettings, CancellationToken cancellationToken);
    public abstract virtual Task ReadAsync(Stream stream, IMagickReadSettings`1<TQuantumType> readSettings);
    public abstract virtual Task ReadAsync(Stream stream, IMagickReadSettings`1<TQuantumType> readSettings, CancellationToken cancellationToken);
    public abstract virtual Task ReadAsync(string fileName, IMagickReadSettings`1<TQuantumType> readSettings);
    public abstract virtual Task ReadAsync(string fileName, IMagickReadSettings`1<TQuantumType> readSettings, CancellationToken cancellationToken);
    public abstract virtual void ReadPixels(Byte[] data, IPixelReadSettings`1<TQuantumType> settings);
    public abstract virtual void ReadPixels(Byte[] data, UInt32 offset, UInt32 count, IPixelReadSettings`1<TQuantumType> settings);
    public abstract virtual void ReadPixels(TQuantumType[] data, IPixelReadSettings`1<TQuantumType> settings);
    public abstract virtual void ReadPixels(TQuantumType[] data, UInt32 offset, UInt32 count, IPixelReadSettings`1<TQuantumType> settings);
    public abstract virtual void ReadPixels(FileInfo file, IPixelReadSettings`1<TQuantumType> settings);
    public abstract virtual void ReadPixels(Stream stream, IPixelReadSettings`1<TQuantumType> settings);
    public abstract virtual void ReadPixels(string fileName, IPixelReadSettings`1<TQuantumType> settings);
    public abstract virtual Task ReadPixelsAsync(FileInfo file, IPixelReadSettings`1<TQuantumType> settings);
    public abstract virtual Task ReadPixelsAsync(FileInfo file, IPixelReadSettings`1<TQuantumType> settings, CancellationToken cancellationToken);
    public abstract virtual Task ReadPixelsAsync(Stream stream, IPixelReadSettings`1<TQuantumType> settings);
    public abstract virtual Task ReadPixelsAsync(Stream stream, IPixelReadSettings`1<TQuantumType> settings, CancellationToken cancellationToken);
    public abstract virtual Task ReadPixelsAsync(string fileName, IPixelReadSettings`1<TQuantumType> settings);
    public abstract virtual Task ReadPixelsAsync(string fileName, IPixelReadSettings`1<TQuantumType> settings, CancellationToken cancellationToken);
    public abstract virtual IReadOnlyList`1<IMagickImage`1<TQuantumType>> Separate();
    public abstract virtual IReadOnlyList`1<IMagickImage`1<TQuantumType>> Separate(Channels channels);
    public abstract virtual void SetColormapColor(int index, IMagickColor`1<TQuantumType> color);
    public abstract virtual void Shadow(IMagickColor`1<TQuantumType> color);
    public abstract virtual void Shadow(int x, int y, double sigma, Percentage alpha, IMagickColor`1<TQuantumType> color);
    public abstract virtual void SparseColor(SparseColorMethod method, IEnumerable`1<ISparseColorArg`1<TQuantumType>> args);
    public abstract virtual void SparseColor(SparseColorMethod method, ISparseColorArg`1[] args);
    public abstract virtual void SparseColor(Channels channels, SparseColorMethod method, IEnumerable`1<ISparseColorArg`1<TQuantumType>> args);
    public abstract virtual void SparseColor(Channels channels, SparseColorMethod method, ISparseColorArg`1[] args);
    public abstract virtual IMagickSearchResult`1<TQuantumType> SubImageSearch(IMagickImage`1<TQuantumType> image);
    public abstract virtual IMagickSearchResult`1<TQuantumType> SubImageSearch(IMagickImage`1<TQuantumType> image, ErrorMetric metric);
    public abstract virtual IMagickSearchResult`1<TQuantumType> SubImageSearch(IMagickImage`1<TQuantumType> image, ErrorMetric metric, double similarityThreshold);
    public abstract virtual void Tint(IMagickGeometry opacity, IMagickColor`1<TQuantumType> color);
    public abstract virtual void Transparent(IMagickColor`1<TQuantumType> color);
    public abstract virtual void TransparentChroma(IMagickColor`1<TQuantumType> colorLow, IMagickColor`1<TQuantumType> colorHigh);
    public abstract virtual IMagickImage`1<TQuantumType> UniqueColors();
    [NullableContextAttribute("0")]
public abstract virtual void WaveletDenoise(TQuantumType threshold);
    [NullableContextAttribute("0")]
public abstract virtual void WaveletDenoise(TQuantumType threshold, double softness);
    [NullableContextAttribute("0")]
public abstract virtual void ImportPixels(ReadOnlySpan`1<byte> data, IPixelImportSettings settings);
    [NullableContextAttribute("0")]
public abstract virtual void ImportPixels(ReadOnlySpan`1<TQuantumType> data, IPixelImportSettings settings);
    [NullableContextAttribute("0")]
public abstract virtual void Ping(ReadOnlySequence`1<byte> data, IMagickReadSettings`1<TQuantumType> readSettings);
    [NullableContextAttribute("0")]
public abstract virtual void Ping(ReadOnlySpan`1<byte> data, IMagickReadSettings`1<TQuantumType> readSettings);
    [NullableContextAttribute("0")]
public abstract virtual void Read(ReadOnlySequence`1<byte> data, IMagickReadSettings`1<TQuantumType> readSettings);
    [NullableContextAttribute("0")]
public abstract virtual void Read(ReadOnlySpan`1<byte> data, IMagickReadSettings`1<TQuantumType> readSettings);
    [NullableContextAttribute("0")]
public abstract virtual void ReadPixels(ReadOnlySpan`1<byte> data, IPixelReadSettings`1<TQuantumType> settings);
    [NullableContextAttribute("0")]
public abstract virtual void ReadPixels(ReadOnlySpan`1<TQuantumType> data, IPixelReadSettings`1<TQuantumType> settings);
}
[NullableContextAttribute("1")]
public interface ImageMagick.IMagickImageCollection {
    [CompilerGeneratedAttribute]
public abstract virtual void add_Warning(EventHandler`1<WarningEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Warning(EventHandler`1<WarningEventArgs> value);
    public abstract virtual void Add(string fileName);
    public abstract virtual void AddRange(Byte[] data);
    public abstract virtual void AddRange(string fileName);
    public abstract virtual void AddRange(Stream stream);
    public abstract virtual void Coalesce();
    public abstract virtual void Complex(IComplexSettings complexSettings);
    public abstract virtual void Deconstruct();
    public abstract virtual void Insert(int index, string fileName);
    public abstract virtual void Morph(UInt32 frames);
    public abstract virtual void Optimize();
    public abstract virtual void OptimizePlus();
    public abstract virtual void OptimizeTransparency();
    public abstract virtual void Ping(Byte[] data);
    public abstract virtual void Ping(Byte[] data, UInt32 offset, UInt32 count);
    public abstract virtual void Ping(FileInfo file);
    public abstract virtual void Ping(Stream stream);
    public abstract virtual void Ping(string fileName);
    [NullableContextAttribute("2")]
public abstract virtual IMagickErrorInfo Quantize();
    public abstract virtual IMagickErrorInfo Quantize(IQuantizeSettings settings);
    public abstract virtual void Read(Byte[] data);
    public abstract virtual void Read(Byte[] data, UInt32 offset, UInt32 count);
    public abstract virtual void Read(Byte[] data, UInt32 offset, UInt32 count, MagickFormat format);
    public abstract virtual void Read(Byte[] data, MagickFormat format);
    public abstract virtual void Read(FileInfo file);
    public abstract virtual void Read(FileInfo file, MagickFormat format);
    public abstract virtual void Read(Stream stream);
    public abstract virtual void Read(Stream stream, MagickFormat format);
    public abstract virtual void Read(string fileName);
    public abstract virtual void Read(string fileName, MagickFormat format);
    public abstract virtual Task ReadAsync(FileInfo file);
    public abstract virtual Task ReadAsync(FileInfo file, CancellationToken cancellationToken);
    public abstract virtual Task ReadAsync(FileInfo file, MagickFormat format);
    public abstract virtual Task ReadAsync(FileInfo file, MagickFormat format, CancellationToken cancellationToken);
    public abstract virtual Task ReadAsync(Stream stream);
    public abstract virtual Task ReadAsync(Stream stream, CancellationToken cancellationToken);
    public abstract virtual Task ReadAsync(Stream stream, MagickFormat format);
    public abstract virtual Task ReadAsync(Stream stream, MagickFormat format, CancellationToken cancellationToken);
    public abstract virtual Task ReadAsync(string fileName);
    public abstract virtual Task ReadAsync(string fileName, CancellationToken cancellationToken);
    public abstract virtual Task ReadAsync(string fileName, MagickFormat format);
    public abstract virtual Task ReadAsync(string fileName, MagickFormat format, CancellationToken cancellationToken);
    public abstract virtual void Remap(IMagickImage image);
    public abstract virtual void Remap(IMagickImage image, IQuantizeSettings settings);
    public abstract virtual void ResetPage();
    public abstract virtual void Reverse();
    public abstract virtual Byte[] ToByteArray();
    public abstract virtual Byte[] ToByteArray(IWriteDefines defines);
    public abstract virtual Byte[] ToByteArray(MagickFormat format);
    public abstract virtual string ToBase64();
    public abstract virtual string ToBase64(MagickFormat format);
    public abstract virtual string ToBase64(IWriteDefines defines);
    public abstract virtual void TrimBounds();
    public abstract virtual void Write(FileInfo file);
    public abstract virtual void Write(FileInfo file, IWriteDefines defines);
    public abstract virtual void Write(FileInfo file, MagickFormat format);
    public abstract virtual void Write(Stream stream);
    public abstract virtual void Write(Stream stream, IWriteDefines defines);
    public abstract virtual void Write(Stream stream, MagickFormat format);
    public abstract virtual void Write(string fileName);
    public abstract virtual void Write(string fileName, IWriteDefines defines);
    public abstract virtual void Write(string fileName, MagickFormat format);
    public abstract virtual Task WriteAsync(FileInfo file);
    public abstract virtual Task WriteAsync(FileInfo file, CancellationToken cancellationToken);
    public abstract virtual Task WriteAsync(FileInfo file, IWriteDefines defines);
    public abstract virtual Task WriteAsync(FileInfo file, IWriteDefines defines, CancellationToken cancellationToken);
    public abstract virtual Task WriteAsync(FileInfo file, MagickFormat format);
    public abstract virtual Task WriteAsync(FileInfo file, MagickFormat format, CancellationToken cancellationToken);
    public abstract virtual Task WriteAsync(Stream stream);
    public abstract virtual Task WriteAsync(Stream stream, CancellationToken cancellationToken);
    public abstract virtual Task WriteAsync(Stream stream, IWriteDefines defines);
    public abstract virtual Task WriteAsync(Stream stream, IWriteDefines defines, CancellationToken cancellationToken);
    public abstract virtual Task WriteAsync(Stream stream, MagickFormat format);
    public abstract virtual Task WriteAsync(Stream stream, MagickFormat format, CancellationToken cancellationToken);
    public abstract virtual Task WriteAsync(string fileName);
    public abstract virtual Task WriteAsync(string fileName, CancellationToken cancellationToken);
    public abstract virtual Task WriteAsync(string fileName, IWriteDefines defines);
    public abstract virtual Task WriteAsync(string fileName, IWriteDefines defines, CancellationToken cancellationToken);
    public abstract virtual Task WriteAsync(string fileName, MagickFormat format);
    public abstract virtual Task WriteAsync(string fileName, MagickFormat format, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public abstract virtual void Ping(ReadOnlySequence`1<byte> data);
    [NullableContextAttribute("0")]
public abstract virtual void Ping(ReadOnlySpan`1<byte> data);
    [NullableContextAttribute("0")]
public abstract virtual void Read(ReadOnlySequence`1<byte> data);
    [NullableContextAttribute("0")]
public abstract virtual void Read(ReadOnlySequence`1<byte> data, MagickFormat format);
    [NullableContextAttribute("0")]
public abstract virtual void Read(ReadOnlySpan`1<byte> data);
    [NullableContextAttribute("0")]
public abstract virtual void Read(ReadOnlySpan`1<byte> data, MagickFormat format);
    public abstract virtual void Write(IBufferWriter`1<byte> bufferWriter);
    public abstract virtual void Write(IBufferWriter`1<byte> bufferWriter, IWriteDefines defines);
    public abstract virtual void Write(IBufferWriter`1<byte> bufferWriter, MagickFormat format);
}
[NullableContextAttribute("1")]
public interface ImageMagick.IMagickImageCollection`1 {
    public abstract virtual void AddRange(Byte[] data, IMagickReadSettings`1<TQuantumType> readSettings);
    public abstract virtual void AddRange(IEnumerable`1<IMagickImage`1<TQuantumType>> images);
    public abstract virtual void AddRange(string fileName, IMagickReadSettings`1<TQuantumType> readSettings);
    public abstract virtual void AddRange(Stream stream, IMagickReadSettings`1<TQuantumType> readSettings);
    public abstract virtual IMagickImage`1<TQuantumType> AppendHorizontally();
    public abstract virtual IMagickImage`1<TQuantumType> AppendVertically();
    public abstract virtual IMagickImageCollection`1<TQuantumType> Clone();
    public abstract virtual IMagickImage`1<TQuantumType> Combine();
    public abstract virtual IMagickImage`1<TQuantumType> Combine(ColorSpace colorSpace);
    public abstract virtual IMagickImage`1<TQuantumType> Evaluate(EvaluateOperator evaluateOperator);
    public abstract virtual IMagickImage`1<TQuantumType> Flatten();
    public abstract virtual IMagickImage`1<TQuantumType> Flatten(IMagickColor`1<TQuantumType> backgroundColor);
    public abstract virtual IMagickImage`1<TQuantumType> Fx(string expression);
    public abstract virtual IMagickImage`1<TQuantumType> Fx(string expression, Channels channels);
    public abstract virtual IMagickImage`1<TQuantumType> Merge();
    public abstract virtual IMagickImage`1<TQuantumType> Montage(IMontageSettings`1<TQuantumType> settings);
    public abstract virtual IMagickImage`1<TQuantumType> Mosaic();
    public abstract virtual void Ping(Byte[] data, UInt32 offset, UInt32 count, IMagickReadSettings`1<TQuantumType> readSettings);
    public abstract virtual void Ping(Byte[] data, IMagickReadSettings`1<TQuantumType> readSettings);
    public abstract virtual void Ping(FileInfo file, IMagickReadSettings`1<TQuantumType> readSettings);
    public abstract virtual void Ping(Stream stream, IMagickReadSettings`1<TQuantumType> readSettings);
    public abstract virtual void Ping(string fileName, IMagickReadSettings`1<TQuantumType> readSettings);
    public abstract virtual IMagickImage`1<TQuantumType> Polynomial(Double[] terms);
    public abstract virtual void Read(Byte[] data, UInt32 offset, UInt32 count, IMagickReadSettings`1<TQuantumType> readSettings);
    public abstract virtual void Read(Byte[] data, IMagickReadSettings`1<TQuantumType> readSettings);
    public abstract virtual void Read(FileInfo file, IMagickReadSettings`1<TQuantumType> readSettings);
    public abstract virtual void Read(Stream stream, IMagickReadSettings`1<TQuantumType> readSettings);
    public abstract virtual void Read(string fileName, IMagickReadSettings`1<TQuantumType> readSettings);
    public abstract virtual Task ReadAsync(FileInfo file, IMagickReadSettings`1<TQuantumType> readSettings);
    public abstract virtual Task ReadAsync(FileInfo file, IMagickReadSettings`1<TQuantumType> readSettings, CancellationToken cancellationToken);
    public abstract virtual Task ReadAsync(Stream stream, IMagickReadSettings`1<TQuantumType> readSettings);
    public abstract virtual Task ReadAsync(Stream stream, IMagickReadSettings`1<TQuantumType> readSettings, CancellationToken cancellationToken);
    public abstract virtual Task ReadAsync(string fileName, IMagickReadSettings`1<TQuantumType> readSettings);
    public abstract virtual Task ReadAsync(string fileName, IMagickReadSettings`1<TQuantumType> readSettings, CancellationToken cancellationToken);
    public abstract virtual IMagickImage`1<TQuantumType> SmushHorizontal(UInt32 offset);
    public abstract virtual IMagickImage`1<TQuantumType> SmushVertical(UInt32 offset);
    [NullableContextAttribute("0")]
public abstract virtual void Ping(ReadOnlySequence`1<byte> data, IMagickReadSettings`1<TQuantumType> readSettings);
    [NullableContextAttribute("0")]
public abstract virtual void Ping(ReadOnlySpan`1<byte> data, IMagickReadSettings`1<TQuantumType> readSettings);
    [NullableContextAttribute("0")]
public abstract virtual void Read(ReadOnlySequence`1<byte> data, IMagickReadSettings`1<TQuantumType> readSettings);
    [NullableContextAttribute("0")]
public abstract virtual void Read(ReadOnlySpan`1<byte> data, IMagickReadSettings`1<TQuantumType> readSettings);
}
[NullableContextAttribute("1")]
public interface ImageMagick.IMagickImageInfo {
    public ColorSpace ColorSpace { get; }
    public CompressionMethod Compression { get; }
    [NullableAttribute("2")]
public Density Density { get; }
    [NullableAttribute("2")]
public string FileName { get; }
    public MagickFormat Format { get; }
    public UInt32 Height { get; }
    public Interlace Interlace { get; }
    public OrientationType Orientation { get; }
    public UInt32 Quality { get; }
    public UInt32 Width { get; }
    public abstract virtual ColorSpace get_ColorSpace();
    public abstract virtual CompressionMethod get_Compression();
    [NullableContextAttribute("2")]
public abstract virtual Density get_Density();
    [NullableContextAttribute("2")]
public abstract virtual string get_FileName();
    public abstract virtual MagickFormat get_Format();
    public abstract virtual UInt32 get_Height();
    public abstract virtual Interlace get_Interlace();
    public abstract virtual OrientationType get_Orientation();
    public abstract virtual UInt32 get_Quality();
    public abstract virtual UInt32 get_Width();
    public abstract virtual void Read(Byte[] data);
    public abstract virtual void Read(Byte[] data, UInt32 offset, UInt32 count);
    public abstract virtual void Read(FileInfo file);
    public abstract virtual void Read(Stream stream);
    public abstract virtual void Read(string fileName);
    [NullableContextAttribute("0")]
public abstract virtual void Read(ReadOnlySequence`1<byte> data);
    [NullableContextAttribute("0")]
public abstract virtual void Read(ReadOnlySpan`1<byte> data);
}
[NullableContextAttribute("1")]
public interface ImageMagick.IMagickImageInfo`1 {
    public abstract virtual void Read(Byte[] data, IMagickReadSettings`1<TQuantumType> readSettings);
    public abstract virtual void Read(Byte[] data, UInt32 offset, UInt32 count, IMagickReadSettings`1<TQuantumType> readSettings);
    public abstract virtual void Read(FileInfo file, IMagickReadSettings`1<TQuantumType> readSettings);
    public abstract virtual void Read(Stream stream, IMagickReadSettings`1<TQuantumType> readSettings);
    public abstract virtual void Read(string fileName, IMagickReadSettings`1<TQuantumType> readSettings);
    [NullableContextAttribute("0")]
public abstract virtual void Read(ReadOnlySequence`1<byte> data, IMagickReadSettings`1<TQuantumType> readSettings);
    [NullableContextAttribute("0")]
public abstract virtual void Read(ReadOnlySpan`1<byte> data, IMagickReadSettings`1<TQuantumType> readSettings);
}
[NullableContextAttribute("1")]
public interface ImageMagick.IMagickNET {
    public string Delegates { get; }
    public string Features { get; }
    public IReadOnlyList`1<string> FontFamilies { get; }
    public IReadOnlyList`1<string> FontNames { get; }
    public string ImageMagickVersion { get; }
    public IReadOnlyCollection`1<IMagickFormatInfo> SupportedFormats { get; }
    public string Version { get; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_Log(EventHandler`1<LogEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Log(EventHandler`1<LogEventArgs> value);
    public abstract virtual string get_Delegates();
    public abstract virtual string get_Features();
    public abstract virtual IReadOnlyList`1<string> get_FontFamilies();
    public abstract virtual IReadOnlyList`1<string> get_FontNames();
    public abstract virtual string get_ImageMagickVersion();
    public abstract virtual IReadOnlyCollection`1<IMagickFormatInfo> get_SupportedFormats();
    public abstract virtual string get_Version();
    public abstract virtual string GetEnvironmentVariable(string name);
    public abstract virtual void Initialize();
    public abstract virtual void Initialize(string path);
    public abstract virtual string Initialize(IConfigurationFiles configFiles);
    public abstract virtual void Initialize(IConfigurationFiles configFiles, string path);
    public abstract virtual void ResetRandomSeed();
    public abstract virtual void SetDefaultFontFile(FileInfo file);
    public abstract virtual void SetDefaultFontFile(string fileName);
    public abstract virtual void SetEnvironmentVariable(string name, string value);
    public abstract virtual void SetFontConfigDirectory(string path);
    public abstract virtual void SetGhostscriptDirectory(string path);
    public abstract virtual void SetGhostscriptFontDirectory(string path);
    public abstract virtual void SetLogEvents(LogEventTypes events);
    public abstract virtual void SetNativeLibraryDirectory(string path);
    public abstract virtual void SetTempDirectory(string path);
    public abstract virtual void SetRandomSeed(ulong seed);
}
[NullableContextAttribute("2")]
public interface ImageMagick.IMagickReadSettings`1 {
    public IReadDefines Defines { get; public set; }
    public IMagickGeometry ExtractArea { get; public set; }
    public Nullable`1<UInt32> FrameIndex { get; public set; }
    public Nullable`1<UInt32> FrameCount { get; public set; }
    public Nullable`1<UInt32> Height { get; public set; }
    public bool SyncImageWithExifProfile { get; public set; }
    public bool UseMonochrome { get; public set; }
    public Nullable`1<UInt32> Width { get; public set; }
    public abstract virtual IReadDefines get_Defines();
    public abstract virtual void set_Defines(IReadDefines value);
    public abstract virtual IMagickGeometry get_ExtractArea();
    public abstract virtual void set_ExtractArea(IMagickGeometry value);
    public abstract virtual Nullable`1<UInt32> get_FrameIndex();
    public abstract virtual void set_FrameIndex(Nullable`1<UInt32> value);
    public abstract virtual Nullable`1<UInt32> get_FrameCount();
    public abstract virtual void set_FrameCount(Nullable`1<UInt32> value);
    public abstract virtual Nullable`1<UInt32> get_Height();
    public abstract virtual void set_Height(Nullable`1<UInt32> value);
    public abstract virtual bool get_SyncImageWithExifProfile();
    public abstract virtual void set_SyncImageWithExifProfile(bool value);
    public abstract virtual bool get_UseMonochrome();
    public abstract virtual void set_UseMonochrome(bool value);
    public abstract virtual Nullable`1<UInt32> get_Width();
    public abstract virtual void set_Width(Nullable`1<UInt32> value);
}
[NullableContextAttribute("1")]
public interface ImageMagick.IMagickSearchResult`1 {
    public IMagickGeometry BestMatch { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickImage`1<TQuantumType> SimilarityImage { get; }
    public double SimilarityMetric { get; }
    public abstract virtual IMagickGeometry get_BestMatch();
    public abstract virtual IMagickImage`1<TQuantumType> get_SimilarityImage();
    public abstract virtual double get_SimilarityMetric();
}
[NullableContextAttribute("2")]
public interface ImageMagick.IMagickSettings`1 {
    public IDrawableAffine Affine { get; public set; }
    public bool AntiAlias { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> BackgroundColor { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> BorderColor { get; public set; }
    public ColorSpace ColorSpace { get; public set; }
    public ColorType ColorType { get; public set; }
    public CompressionMethod Compression { get; public set; }
    public bool Debug { get; public set; }
    public Density Density { get; public set; }
    public UInt32 Depth { get; public set; }
    public Endian Endian { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> FillColor { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickImage`1<TQuantumType> FillPattern { get; public set; }
    public FillRule FillRule { get; public set; }
    public string Font { get; public set; }
    public string FontFamily { get; public set; }
    public double FontPointsize { get; public set; }
    public FontStyleType FontStyle { get; public set; }
    public FontWeight FontWeight { get; public set; }
    public MagickFormat Format { get; public set; }
    public Interlace Interlace { get; public set; }
    public IMagickGeometry Page { get; public set; }
    public bool StrokeAntiAlias { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> StrokeColor { get; public set; }
    public IEnumerable`1<double> StrokeDashArray { get; public set; }
    public double StrokeDashOffset { get; public set; }
    public LineCap StrokeLineCap { get; public set; }
    public LineJoin StrokeLineJoin { get; public set; }
    public UInt32 StrokeMiterLimit { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickImage`1<TQuantumType> StrokePattern { get; public set; }
    public double StrokeWidth { get; public set; }
    public bool TextAntiAlias { get; public set; }
    public TextDirection TextDirection { get; public set; }
    public Encoding TextEncoding { get; public set; }
    public Gravity TextGravity { get; public set; }
    public double TextInterlineSpacing { get; public set; }
    public double TextInterwordSpacing { get; public set; }
    public double TextKerning { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> TextUnderColor { get; public set; }
    public bool Verbose { get; public set; }
    public abstract virtual IDrawableAffine get_Affine();
    public abstract virtual void set_Affine(IDrawableAffine value);
    public abstract virtual bool get_AntiAlias();
    public abstract virtual void set_AntiAlias(bool value);
    public abstract virtual IMagickColor`1<TQuantumType> get_BackgroundColor();
    public abstract virtual void set_BackgroundColor(IMagickColor`1<TQuantumType> value);
    public abstract virtual IMagickColor`1<TQuantumType> get_BorderColor();
    public abstract virtual void set_BorderColor(IMagickColor`1<TQuantumType> value);
    public abstract virtual ColorSpace get_ColorSpace();
    public abstract virtual void set_ColorSpace(ColorSpace value);
    public abstract virtual ColorType get_ColorType();
    public abstract virtual void set_ColorType(ColorType value);
    public abstract virtual CompressionMethod get_Compression();
    public abstract virtual void set_Compression(CompressionMethod value);
    public abstract virtual bool get_Debug();
    public abstract virtual void set_Debug(bool value);
    public abstract virtual Density get_Density();
    public abstract virtual void set_Density(Density value);
    public abstract virtual UInt32 get_Depth();
    public abstract virtual void set_Depth(UInt32 value);
    public abstract virtual Endian get_Endian();
    public abstract virtual void set_Endian(Endian value);
    public abstract virtual IMagickColor`1<TQuantumType> get_FillColor();
    public abstract virtual void set_FillColor(IMagickColor`1<TQuantumType> value);
    public abstract virtual IMagickImage`1<TQuantumType> get_FillPattern();
    public abstract virtual void set_FillPattern(IMagickImage`1<TQuantumType> value);
    public abstract virtual FillRule get_FillRule();
    public abstract virtual void set_FillRule(FillRule value);
    public abstract virtual string get_Font();
    public abstract virtual void set_Font(string value);
    public abstract virtual string get_FontFamily();
    public abstract virtual void set_FontFamily(string value);
    public abstract virtual double get_FontPointsize();
    public abstract virtual void set_FontPointsize(double value);
    public abstract virtual FontStyleType get_FontStyle();
    public abstract virtual void set_FontStyle(FontStyleType value);
    public abstract virtual FontWeight get_FontWeight();
    public abstract virtual void set_FontWeight(FontWeight value);
    public abstract virtual MagickFormat get_Format();
    public abstract virtual void set_Format(MagickFormat value);
    public abstract virtual Interlace get_Interlace();
    public abstract virtual void set_Interlace(Interlace value);
    public abstract virtual IMagickGeometry get_Page();
    public abstract virtual void set_Page(IMagickGeometry value);
    public abstract virtual bool get_StrokeAntiAlias();
    public abstract virtual void set_StrokeAntiAlias(bool value);
    public abstract virtual IMagickColor`1<TQuantumType> get_StrokeColor();
    public abstract virtual void set_StrokeColor(IMagickColor`1<TQuantumType> value);
    public abstract virtual IEnumerable`1<double> get_StrokeDashArray();
    public abstract virtual void set_StrokeDashArray(IEnumerable`1<double> value);
    public abstract virtual double get_StrokeDashOffset();
    public abstract virtual void set_StrokeDashOffset(double value);
    public abstract virtual LineCap get_StrokeLineCap();
    public abstract virtual void set_StrokeLineCap(LineCap value);
    public abstract virtual LineJoin get_StrokeLineJoin();
    public abstract virtual void set_StrokeLineJoin(LineJoin value);
    public abstract virtual UInt32 get_StrokeMiterLimit();
    public abstract virtual void set_StrokeMiterLimit(UInt32 value);
    public abstract virtual IMagickImage`1<TQuantumType> get_StrokePattern();
    public abstract virtual void set_StrokePattern(IMagickImage`1<TQuantumType> value);
    public abstract virtual double get_StrokeWidth();
    public abstract virtual void set_StrokeWidth(double value);
    public abstract virtual bool get_TextAntiAlias();
    public abstract virtual void set_TextAntiAlias(bool value);
    public abstract virtual TextDirection get_TextDirection();
    public abstract virtual void set_TextDirection(TextDirection value);
    public abstract virtual Encoding get_TextEncoding();
    public abstract virtual void set_TextEncoding(Encoding value);
    public abstract virtual Gravity get_TextGravity();
    public abstract virtual void set_TextGravity(Gravity value);
    public abstract virtual double get_TextInterlineSpacing();
    public abstract virtual void set_TextInterlineSpacing(double value);
    public abstract virtual double get_TextInterwordSpacing();
    public abstract virtual void set_TextInterwordSpacing(double value);
    public abstract virtual double get_TextKerning();
    public abstract virtual void set_TextKerning(double value);
    public abstract virtual IMagickColor`1<TQuantumType> get_TextUnderColor();
    public abstract virtual void set_TextUnderColor(IMagickColor`1<TQuantumType> value);
    public abstract virtual bool get_Verbose();
    public abstract virtual void set_Verbose(bool value);
    [NullableContextAttribute("1")]
public abstract virtual string GetDefine(MagickFormat format, string name);
    [NullableContextAttribute("1")]
public abstract virtual string GetDefine(string name);
    [NullableContextAttribute("1")]
public abstract virtual void RemoveDefine(MagickFormat format, string name);
    [NullableContextAttribute("1")]
public abstract virtual void RemoveDefine(string name);
    [NullableContextAttribute("1")]
public abstract virtual void SetDefine(MagickFormat format, string name, bool flag);
    [NullableContextAttribute("1")]
public abstract virtual void SetDefine(MagickFormat format, string name, int value);
    [NullableContextAttribute("1")]
public abstract virtual void SetDefine(MagickFormat format, string name, string value);
    [NullableContextAttribute("1")]
public abstract virtual void SetDefine(string name, string value);
    [NullableContextAttribute("1")]
public abstract virtual void SetDefines(IDefines defines);
}
[NullableContextAttribute("2")]
public interface ImageMagick.IMoments {
    public abstract virtual IChannelMoments Composite();
    public abstract virtual IChannelMoments GetChannel(PixelChannel channel);
}
[NullableContextAttribute("2")]
public interface ImageMagick.IMontageSettings`1 {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> BackgroundColor { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> BorderColor { get; public set; }
    public UInt32 BorderWidth { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> FillColor { get; public set; }
    public string Font { get; public set; }
    public UInt32 FontPointsize { get; public set; }
    public IMagickGeometry FrameGeometry { get; public set; }
    public IMagickGeometry Geometry { get; public set; }
    public Gravity Gravity { get; public set; }
    public string Label { get; public set; }
    public bool Shadow { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> StrokeColor { get; public set; }
    public string TextureFileName { get; public set; }
    public IMagickGeometry TileGeometry { get; public set; }
    public string Title { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> TransparentColor { get; public set; }
    public abstract virtual IMagickColor`1<TQuantumType> get_BackgroundColor();
    public abstract virtual void set_BackgroundColor(IMagickColor`1<TQuantumType> value);
    public abstract virtual IMagickColor`1<TQuantumType> get_BorderColor();
    public abstract virtual void set_BorderColor(IMagickColor`1<TQuantumType> value);
    public abstract virtual UInt32 get_BorderWidth();
    public abstract virtual void set_BorderWidth(UInt32 value);
    public abstract virtual IMagickColor`1<TQuantumType> get_FillColor();
    public abstract virtual void set_FillColor(IMagickColor`1<TQuantumType> value);
    public abstract virtual string get_Font();
    public abstract virtual void set_Font(string value);
    public abstract virtual UInt32 get_FontPointsize();
    public abstract virtual void set_FontPointsize(UInt32 value);
    public abstract virtual IMagickGeometry get_FrameGeometry();
    public abstract virtual void set_FrameGeometry(IMagickGeometry value);
    public abstract virtual IMagickGeometry get_Geometry();
    public abstract virtual void set_Geometry(IMagickGeometry value);
    public abstract virtual Gravity get_Gravity();
    public abstract virtual void set_Gravity(Gravity value);
    public abstract virtual string get_Label();
    public abstract virtual void set_Label(string value);
    public abstract virtual bool get_Shadow();
    public abstract virtual void set_Shadow(bool value);
    public abstract virtual IMagickColor`1<TQuantumType> get_StrokeColor();
    public abstract virtual void set_StrokeColor(IMagickColor`1<TQuantumType> value);
    public abstract virtual string get_TextureFileName();
    public abstract virtual void set_TextureFileName(string value);
    public abstract virtual IMagickGeometry get_TileGeometry();
    public abstract virtual void set_TileGeometry(IMagickGeometry value);
    public abstract virtual string get_Title();
    public abstract virtual void set_Title(string value);
    public abstract virtual IMagickColor`1<TQuantumType> get_TransparentColor();
    public abstract virtual void set_TransparentColor(IMagickColor`1<TQuantumType> value);
}
[NullableContextAttribute("2")]
public interface ImageMagick.IMorphologySettings {
    public Channels Channels { get; public set; }
    public Nullable`1<Percentage> ConvolveBias { get; public set; }
    public IMagickGeometry ConvolveScale { get; public set; }
    public int Iterations { get; public set; }
    public Kernel Kernel { get; public set; }
    [NullableAttribute("1")]
public string KernelArguments { get; public set; }
    public MorphologyMethod Method { get; public set; }
    public string UserKernel { get; public set; }
    public abstract virtual Channels get_Channels();
    public abstract virtual void set_Channels(Channels value);
    public abstract virtual Nullable`1<Percentage> get_ConvolveBias();
    public abstract virtual void set_ConvolveBias(Nullable`1<Percentage> value);
    public abstract virtual IMagickGeometry get_ConvolveScale();
    public abstract virtual void set_ConvolveScale(IMagickGeometry value);
    public abstract virtual int get_Iterations();
    public abstract virtual void set_Iterations(int value);
    public abstract virtual Kernel get_Kernel();
    public abstract virtual void set_Kernel(Kernel value);
    [NullableContextAttribute("1")]
public abstract virtual string get_KernelArguments();
    [NullableContextAttribute("1")]
public abstract virtual void set_KernelArguments(string value);
    public abstract virtual MorphologyMethod get_Method();
    public abstract virtual void set_Method(MorphologyMethod value);
    public abstract virtual string get_UserKernel();
    public abstract virtual void set_UserKernel(string value);
}
public enum ImageMagick.Interlace : Enum {
    public int value__;
    public static Interlace Undefined;
    public static Interlace NoInterlace;
    public static Interlace Line;
    public static Interlace Plane;
    public static Interlace Partition;
    public static Interlace Gif;
    public static Interlace Jpeg;
    public static Interlace Png;
}
[NullableContextAttribute("1")]
public interface ImageMagick.IOpenCL {
    public bool IsEnabled { get; public set; }
    public IReadOnlyList`1<IOpenCLDevice> Devices { get; }
    public abstract virtual bool get_IsEnabled();
    public abstract virtual void set_IsEnabled(bool value);
    public abstract virtual IReadOnlyList`1<IOpenCLDevice> get_Devices();
    public abstract virtual void SetCacheDirectory(string path);
}
[NullableContextAttribute("1")]
public interface ImageMagick.IOpenCLDevice {
    public double BenchmarkScore { get; }
    public OpenCLDeviceType DeviceType { get; }
    public bool IsEnabled { get; public set; }
    public IReadOnlyList`1<IOpenCLKernelProfileRecord> KernelProfileRecords { get; }
    public string Name { get; }
    public bool ProfileKernels { get; public set; }
    public string Version { get; }
    public abstract virtual double get_BenchmarkScore();
    public abstract virtual OpenCLDeviceType get_DeviceType();
    public abstract virtual bool get_IsEnabled();
    public abstract virtual void set_IsEnabled(bool value);
    public abstract virtual IReadOnlyList`1<IOpenCLKernelProfileRecord> get_KernelProfileRecords();
    public abstract virtual string get_Name();
    public abstract virtual bool get_ProfileKernels();
    public abstract virtual void set_ProfileKernels(bool value);
    public abstract virtual string get_Version();
}
[NullableContextAttribute("1")]
public interface ImageMagick.IOpenCLKernelProfileRecord {
    public ulong Count { get; }
    public ulong MaximumDuration { get; }
    public ulong MinimumDuration { get; }
    public string Name { get; }
    public ulong TotalDuration { get; }
    public abstract virtual ulong get_Count();
    public abstract virtual ulong get_MaximumDuration();
    public abstract virtual ulong get_MinimumDuration();
    public abstract virtual string get_Name();
    public abstract virtual ulong get_TotalDuration();
}
[NullableContextAttribute("1")]
public interface ImageMagick.IPerceptualHash {
    [NullableContextAttribute("2")]
public abstract virtual IChannelPerceptualHash GetChannel(PixelChannel channel);
    public abstract virtual double SumSquaredDistance(IPerceptualHash other);
    public abstract virtual string ToString();
}
[DefaultMemberAttribute("Item")]
public interface ImageMagick.IPixel`1 {
    public UInt32 Channels { get; }
    public int X { get; }
    public int Y { get; }
    public TQuantumType Item { get; public set; }
    public abstract virtual UInt32 get_Channels();
    public abstract virtual int get_X();
    public abstract virtual int get_Y();
    public abstract virtual TQuantumType get_Item(UInt32 channel);
    public abstract virtual void set_Item(UInt32 channel, TQuantumType value);
    public abstract virtual TQuantumType GetChannel(UInt32 channel);
    public abstract virtual void SetChannel(UInt32 channel, TQuantumType value);
    public abstract virtual void SetValues(TQuantumType[] values);
    public abstract virtual TQuantumType[] ToArray();
    public abstract virtual IMagickColor`1<TQuantumType> ToColor();
}
[NullableContextAttribute("1")]
[DefaultMemberAttribute("Item")]
public interface ImageMagick.IPixelCollection`1 {
    public UInt32 Channels { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IPixel`1<TQuantumType> Item { get; }
    [NullableContextAttribute("0")]
public abstract virtual ReadOnlySpan`1<TQuantumType> GetReadOnlyArea(int x, int y, UInt32 width, UInt32 height);
    [NullableContextAttribute("0")]
public abstract virtual ReadOnlySpan`1<TQuantumType> GetReadOnlyArea(IMagickGeometry geometry);
    [NullableContextAttribute("0")]
public abstract virtual void SetArea(int x, int y, UInt32 width, UInt32 height, ReadOnlySpan`1<TQuantumType> values);
    [NullableContextAttribute("0")]
public abstract virtual void SetArea(IMagickGeometry geometry, ReadOnlySpan`1<TQuantumType> values);
    [NullableContextAttribute("0")]
public abstract virtual void SetPixel(int x, int y, ReadOnlySpan`1<TQuantumType> value);
    [NullableContextAttribute("0")]
public abstract virtual void SetPixels(ReadOnlySpan`1<TQuantumType> values);
    public abstract virtual UInt32 get_Channels();
    public abstract virtual IPixel`1<TQuantumType> get_Item(int x, int y);
    public abstract virtual TQuantumType[] GetArea(int x, int y, UInt32 width, UInt32 height);
    public abstract virtual TQuantumType[] GetArea(IMagickGeometry geometry);
    public abstract virtual Nullable`1<UInt32> GetChannelIndex(PixelChannel channel);
    public abstract virtual IPixel`1<TQuantumType> GetPixel(int x, int y);
    public abstract virtual TQuantumType[] GetValue(int x, int y);
    public abstract virtual TQuantumType[] GetValues();
    public abstract virtual void SetArea(int x, int y, UInt32 width, UInt32 height, TQuantumType[] values);
    public abstract virtual void SetArea(IMagickGeometry geometry, TQuantumType[] values);
    public abstract virtual void SetByteArea(int x, int y, UInt32 width, UInt32 height, Byte[] values);
    public abstract virtual void SetByteArea(IMagickGeometry geometry, Byte[] values);
    public abstract virtual void SetBytePixels(Byte[] values);
    public abstract virtual void SetDoubleArea(int x, int y, UInt32 width, UInt32 height, Double[] values);
    public abstract virtual void SetDoubleArea(IMagickGeometry geometry, Double[] values);
    public abstract virtual void SetDoublePixels(Double[] values);
    public abstract virtual void SetIntArea(int x, int y, UInt32 width, UInt32 height, Int32[] values);
    public abstract virtual void SetIntArea(IMagickGeometry geometry, Int32[] values);
    public abstract virtual void SetIntPixels(Int32[] values);
    public abstract virtual void SetPixel(IPixel`1<TQuantumType> pixel);
    public abstract virtual void SetPixel(IEnumerable`1<IPixel`1<TQuantumType>> pixels);
    public abstract virtual void SetPixel(int x, int y, TQuantumType[] value);
    public abstract virtual void SetPixels(TQuantumType[] values);
    public abstract virtual TQuantumType[] ToArray();
    public abstract virtual Byte[] ToByteArray(int x, int y, UInt32 width, UInt32 height, string mapping);
    [NullableContextAttribute("2")]
public abstract virtual Byte[] ToByteArray(int x, int y, UInt32 width, UInt32 height, PixelMapping mapping);
    public abstract virtual Byte[] ToByteArray(IMagickGeometry geometry, string mapping);
    public abstract virtual Byte[] ToByteArray(IMagickGeometry geometry, PixelMapping mapping);
    public abstract virtual Byte[] ToByteArray(string mapping);
    [NullableContextAttribute("2")]
public abstract virtual Byte[] ToByteArray(PixelMapping mapping);
    public abstract virtual UInt16[] ToShortArray(int x, int y, UInt32 width, UInt32 height, string mapping);
    [NullableContextAttribute("2")]
public abstract virtual UInt16[] ToShortArray(int x, int y, UInt32 width, UInt32 height, PixelMapping mapping);
    public abstract virtual UInt16[] ToShortArray(IMagickGeometry geometry, string mapping);
    public abstract virtual UInt16[] ToShortArray(IMagickGeometry geometry, PixelMapping mapping);
    public abstract virtual UInt16[] ToShortArray(string mapping);
    [NullableContextAttribute("2")]
public abstract virtual UInt16[] ToShortArray(PixelMapping mapping);
}
[NullableContextAttribute("1")]
public interface ImageMagick.IPixelImportSettings {
    public UInt32 Height { get; }
    public UInt32 Width { get; }
    public int X { get; }
    public int Y { get; }
    public string Mapping { get; public set; }
    public StorageType StorageType { get; }
    public abstract virtual UInt32 get_Height();
    public abstract virtual UInt32 get_Width();
    public abstract virtual int get_X();
    public abstract virtual int get_Y();
    public abstract virtual string get_Mapping();
    public abstract virtual void set_Mapping(string value);
    public abstract virtual StorageType get_StorageType();
}
[NullableContextAttribute("2")]
public interface ImageMagick.IPixelReadSettings`1 {
    public string Mapping { get; public set; }
    public StorageType StorageType { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickReadSettings`1<TQuantumType> ReadSettings { get; }
    public abstract virtual string get_Mapping();
    public abstract virtual void set_Mapping(string value);
    public abstract virtual StorageType get_StorageType();
    public abstract virtual void set_StorageType(StorageType value);
    public abstract virtual IMagickReadSettings`1<TQuantumType> get_ReadSettings();
}
public interface ImageMagick.IPrimaryInfo {
    public double X { get; }
    public double Y { get; }
    public double Z { get; }
    public abstract virtual double get_X();
    public abstract virtual double get_Y();
    public abstract virtual double get_Z();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ImageMagick.IptcProfile : ImageProfile {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Collection`1<IIptcValue> _values;
    public IReadOnlyList`1<IIptcValue> Values { get; }
    public IptcProfile(Byte[] data);
    public IptcProfile(string fileName);
    public IptcProfile(Stream stream);
    public sealed virtual IReadOnlyList`1<IIptcValue> get_Values();
    [NullableContextAttribute("2")]
public sealed virtual IIptcValue GetValue(IptcTag tag);
    [IteratorStateMachineAttribute("ImageMagick.IptcProfile/<GetAllValues>d__8")]
public sealed virtual IEnumerable`1<IIptcValue> GetAllValues(IptcTag tag);
    public sealed virtual bool RemoveValue(IptcTag tag);
    public sealed virtual bool RemoveValue(IptcTag tag, string value);
    public sealed virtual void SetValue(IptcTag tag, string value);
    public sealed virtual void SetValue(IptcTag tag, DateTimeOffset dateTimeOffset);
    protected virtual void UpdateData();
    [MemberNotNullAttribute("_values")]
private void Initialize();
}
public enum ImageMagick.IptcTag : Enum {
    public int value__;
    public static IptcTag Unknown;
    public static IptcTag RecordVersion;
    public static IptcTag ObjectType;
    public static IptcTag ObjectAttribute;
    public static IptcTag Title;
    public static IptcTag EditStatus;
    public static IptcTag EditorialUpdate;
    public static IptcTag Priority;
    public static IptcTag SubjectReference;
    public static IptcTag Category;
    public static IptcTag SupplementalCategories;
    public static IptcTag FixtureIdentifier;
    public static IptcTag Keyword;
    public static IptcTag LocationCode;
    public static IptcTag LocationName;
    public static IptcTag ReleaseDate;
    public static IptcTag ReleaseTime;
    public static IptcTag ExpirationDate;
    public static IptcTag ExpirationTime;
    public static IptcTag SpecialInstructions;
    public static IptcTag ActionAdvised;
    public static IptcTag ReferenceService;
    public static IptcTag ReferenceDate;
    public static IptcTag ReferenceNumber;
    public static IptcTag CreatedDate;
    public static IptcTag CreatedTime;
    public static IptcTag DigitalCreationDate;
    public static IptcTag DigitalCreationTime;
    public static IptcTag OriginatingProgram;
    public static IptcTag ProgramVersion;
    public static IptcTag ObjectCycle;
    public static IptcTag Byline;
    public static IptcTag BylineTitle;
    public static IptcTag City;
    public static IptcTag SubLocation;
    public static IptcTag ProvinceState;
    public static IptcTag CountryCode;
    public static IptcTag Country;
    public static IptcTag OriginalTransmissionReference;
    public static IptcTag Headline;
    public static IptcTag Credit;
    public static IptcTag Source;
    public static IptcTag CopyrightNotice;
    public static IptcTag Contact;
    public static IptcTag Caption;
    public static IptcTag LocalCaption;
    public static IptcTag CaptionWriter;
    public static IptcTag ImageType;
    public static IptcTag ImageOrientation;
    public static IptcTag CustomField1;
    public static IptcTag CustomField2;
    public static IptcTag CustomField3;
    public static IptcTag CustomField4;
    public static IptcTag CustomField5;
    public static IptcTag CustomField6;
    public static IptcTag CustomField7;
    public static IptcTag CustomField8;
    public static IptcTag CustomField9;
    public static IptcTag CustomField10;
    public static IptcTag CustomField11;
    public static IptcTag CustomField12;
    public static IptcTag CustomField13;
    public static IptcTag CustomField14;
    public static IptcTag CustomField15;
    public static IptcTag CustomField16;
    public static IptcTag CustomField17;
    public static IptcTag CustomField18;
    public static IptcTag CustomField19;
    public static IptcTag CustomField20;
}
internal static class ImageMagick.IptcTagHelper : object {
    public static bool IsRepeatable(IptcTag tag);
    public static bool IsDate(IptcTag tag);
    public static bool IsTime(IptcTag tag);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ImageMagick.IptcValue : object {
    private Byte[] _data;
    private Encoding _encoding;
    [CompilerGeneratedAttribute]
private IptcTag <Tag>k__BackingField;
    public IptcTag Tag { get; }
    public string Value { get; public set; }
    public int Length { get; }
    internal IptcValue(IptcTag tag, Byte[] value);
    internal IptcValue(IptcTag tag, string value);
    [CompilerGeneratedAttribute]
public sealed virtual IptcTag get_Tag();
    public sealed virtual string get_Value();
    public sealed virtual void set_Value(string value);
    public sealed virtual int get_Length();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(IIptcValue other);
    public virtual int GetHashCode();
    public sealed virtual Byte[] ToByteArray();
    public virtual string ToString();
    private Byte[] GetData(string value);
}
public interface ImageMagick.IQuantizeSettings {
    public UInt32 Colors { get; public set; }
    public ColorSpace ColorSpace { get; public set; }
    public Nullable`1<DitherMethod> DitherMethod { get; public set; }
    public bool MeasureErrors { get; public set; }
    public UInt32 TreeDepth { get; public set; }
    public abstract virtual UInt32 get_Colors();
    public abstract virtual void set_Colors(UInt32 value);
    public abstract virtual ColorSpace get_ColorSpace();
    public abstract virtual void set_ColorSpace(ColorSpace value);
    public abstract virtual Nullable`1<DitherMethod> get_DitherMethod();
    public abstract virtual void set_DitherMethod(Nullable`1<DitherMethod> value);
    public abstract virtual bool get_MeasureErrors();
    public abstract virtual void set_MeasureErrors(bool value);
    public abstract virtual UInt32 get_TreeDepth();
    public abstract virtual void set_TreeDepth(UInt32 value);
}
public interface ImageMagick.IQuantum {
    public UInt32 Depth { get; }
    public abstract virtual UInt32 get_Depth();
}
public interface ImageMagick.IQuantum`1 {
    public TQuantumType Max { get; }
    public abstract virtual TQuantumType get_Max();
}
public interface ImageMagick.IReadDefines {
    public MagickFormat Format { get; }
    public abstract virtual MagickFormat get_Format();
}
public interface ImageMagick.IResourceLimits {
    public ulong Area { get; public set; }
    public ulong Disk { get; public set; }
    public ulong Height { get; public set; }
    public ulong ListLength { get; public set; }
    public ulong MaxMemoryRequest { get; public set; }
    public ulong MaxProfileSize { get; public set; }
    public ulong Memory { get; public set; }
    public ulong Thread { get; public set; }
    public ulong Throttle { get; public set; }
    public ulong Time { get; public set; }
    public ulong Width { get; public set; }
    public abstract virtual ulong get_Area();
    public abstract virtual void set_Area(ulong value);
    public abstract virtual ulong get_Disk();
    public abstract virtual void set_Disk(ulong value);
    public abstract virtual ulong get_Height();
    public abstract virtual void set_Height(ulong value);
    public abstract virtual ulong get_ListLength();
    public abstract virtual void set_ListLength(ulong value);
    public abstract virtual ulong get_MaxMemoryRequest();
    public abstract virtual void set_MaxMemoryRequest(ulong value);
    public abstract virtual ulong get_MaxProfileSize();
    public abstract virtual void set_MaxProfileSize(ulong value);
    public abstract virtual ulong get_Memory();
    public abstract virtual void set_Memory(ulong value);
    public abstract virtual ulong get_Thread();
    public abstract virtual void set_Thread(ulong value);
    public abstract virtual ulong get_Throttle();
    public abstract virtual void set_Throttle(ulong value);
    public abstract virtual ulong get_Time();
    public abstract virtual void set_Time(ulong value);
    public abstract virtual ulong get_Width();
    public abstract virtual void set_Width(ulong value);
    public abstract virtual void LimitMemory(Percentage percentage);
}
public interface ImageMagick.ISparseColorArg`1 {
    public double X { get; public set; }
    public double Y { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IMagickColor`1<TQuantumType> Color { get; public set; }
    public abstract virtual double get_X();
    public abstract virtual void set_X(double value);
    public abstract virtual double get_Y();
    public abstract virtual void set_Y(double value);
    public abstract virtual IMagickColor`1<TQuantumType> get_Color();
    public abstract virtual void set_Color(IMagickColor`1<TQuantumType> value);
}
[NullableContextAttribute("1")]
public interface ImageMagick.IStatistics {
    public IReadOnlyCollection`1<PixelChannel> Channels { get; }
    public abstract virtual IReadOnlyCollection`1<PixelChannel> get_Channels();
    public abstract virtual IChannelStatistics Composite();
    [NullableContextAttribute("2")]
public abstract virtual IChannelStatistics GetChannel(PixelChannel channel);
}
public interface ImageMagick.ITypeMetric {
    public double Ascent { get; }
    public double Descent { get; }
    public double MaxHorizontalAdvance { get; }
    public double TextHeight { get; }
    public double TextWidth { get; }
    public double UnderlinePosition { get; }
    public double UnderlineThickness { get; }
    public abstract virtual double get_Ascent();
    public abstract virtual double get_Descent();
    public abstract virtual double get_MaxHorizontalAdvance();
    public abstract virtual double get_TextHeight();
    public abstract virtual double get_TextWidth();
    public abstract virtual double get_UnderlinePosition();
    public abstract virtual double get_UnderlineThickness();
}
public interface ImageMagick.IUnsafePixelCollection`1 {
    public abstract virtual IntPtr GetAreaPointer(int x, int y, UInt32 width, UInt32 height);
    [NullableContextAttribute("1")]
public abstract virtual IntPtr GetAreaPointer(IMagickGeometry geometry);
}
public interface ImageMagick.IWriteDefines {
    public MagickFormat Format { get; }
    public abstract virtual MagickFormat get_Format();
}
[NullableContextAttribute("2")]
public interface ImageMagick.IXmpProfile {
    public abstract virtual XmlReader CreateReader();
    public abstract virtual IXPathNavigable ToIXPathNavigable();
    public abstract virtual XDocument ToXDocument();
}
public enum ImageMagick.Kernel : Enum {
    public int value__;
    public static Kernel Undefined;
    public static Kernel Unity;
    public static Kernel Gaussian;
    public static Kernel DoG;
    public static Kernel LoG;
    public static Kernel Blur;
    public static Kernel Comet;
    public static Kernel Binomial;
    public static Kernel Laplacian;
    public static Kernel Sobel;
    public static Kernel FreiChen;
    public static Kernel Roberts;
    public static Kernel Prewitt;
    public static Kernel Compass;
    public static Kernel Kirsch;
    public static Kernel Diamond;
    public static Kernel Square;
    public static Kernel Rectangle;
    public static Kernel Octagon;
    public static Kernel Disk;
    public static Kernel Plus;
    public static Kernel Cross;
    public static Kernel Ring;
    public static Kernel Peaks;
    public static Kernel Edges;
    public static Kernel Corners;
    public static Kernel Diagonals;
    public static Kernel LineEnds;
    public static Kernel LineJunctions;
    public static Kernel Ridges;
    public static Kernel ConvexHull;
    public static Kernel ThinSE;
    public static Kernel Skeleton;
    public static Kernel Chebyshev;
    public static Kernel Manhattan;
    public static Kernel Octagonal;
    public static Kernel Euclidean;
    public static Kernel UserDefined;
}
public enum ImageMagick.LineCap : Enum {
    public int value__;
    public static LineCap Undefined;
    public static LineCap Butt;
    public static LineCap Round;
    public static LineCap Square;
}
public enum ImageMagick.LineJoin : Enum {
    public int value__;
    public static LineJoin Undefined;
    public static LineJoin Miter;
    public static LineJoin Round;
    public static LineJoin Bevel;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ImageMagick.LogEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private LogEventTypes <EventType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    public LogEventTypes EventType { get; }
    public string Message { get; }
    public LogEventArgs(LogEventTypes eventType, string message);
    [CompilerGeneratedAttribute]
public LogEventTypes get_EventType();
    [CompilerGeneratedAttribute]
public string get_Message();
}
[FlagsAttribute]
public enum ImageMagick.LogEventTypes : Enum {
    public int value__;
    public static LogEventTypes None;
    public static LogEventTypes Accelerate;
    public static LogEventTypes Annotate;
    public static LogEventTypes Blob;
    public static LogEventTypes Cache;
    public static LogEventTypes Coder;
    public static LogEventTypes Configure;
    public static LogEventTypes Deprecate;
    public static LogEventTypes Draw;
    public static LogEventTypes Exception;
    public static LogEventTypes Image;
    public static LogEventTypes Locale;
    public static LogEventTypes Module;
    public static LogEventTypes Pixel;
    public static LogEventTypes Policy;
    public static LogEventTypes Resource;
    public static LogEventTypes Trace;
    public static LogEventTypes Transform;
    public static LogEventTypes User;
    public static LogEventTypes Wand;
    public static LogEventTypes Detailed;
    public static LogEventTypes All;
}
public class ImageMagick.MagickBlobErrorException : MagickErrorException {
    [NullableContextAttribute("1")]
public MagickBlobErrorException(string message);
}
public class ImageMagick.MagickBlobWarningException : MagickWarningException {
    [NullableContextAttribute("1")]
public MagickBlobWarningException(string message);
}
public class ImageMagick.MagickCacheErrorException : MagickErrorException {
    [NullableContextAttribute("1")]
public MagickCacheErrorException(string message);
}
public class ImageMagick.MagickCacheWarningException : MagickWarningException {
    [NullableContextAttribute("1")]
public MagickCacheWarningException(string message);
}
public class ImageMagick.MagickCoderErrorException : MagickErrorException {
    [NullableContextAttribute("1")]
public MagickCoderErrorException(string message);
}
public class ImageMagick.MagickCoderWarningException : MagickWarningException {
    [NullableContextAttribute("1")]
public MagickCoderWarningException(string message);
}
public class ImageMagick.MagickConfigureErrorException : MagickErrorException {
    [NullableContextAttribute("1")]
public MagickConfigureErrorException(string message);
}
public class ImageMagick.MagickConfigureWarningException : MagickWarningException {
    [NullableContextAttribute("1")]
public MagickConfigureWarningException(string message);
}
public class ImageMagick.MagickCorruptImageErrorException : MagickErrorException {
    [NullableContextAttribute("1")]
public MagickCorruptImageErrorException(string message);
}
public class ImageMagick.MagickCorruptImageWarningException : MagickWarningException {
    [NullableContextAttribute("1")]
public MagickCorruptImageWarningException(string message);
}
public class ImageMagick.MagickDelegateErrorException : MagickErrorException {
    [NullableContextAttribute("1")]
public MagickDelegateErrorException(string message);
}
public class ImageMagick.MagickDelegateWarningException : MagickWarningException {
    [NullableContextAttribute("1")]
public MagickDelegateWarningException(string message);
}
public class ImageMagick.MagickDrawErrorException : MagickErrorException {
    [NullableContextAttribute("1")]
public MagickDrawErrorException(string message);
}
public class ImageMagick.MagickDrawWarningException : MagickWarningException {
    [NullableContextAttribute("1")]
public MagickDrawWarningException(string message);
}
public class ImageMagick.MagickErrorException : MagickException {
    [NullableContextAttribute("1")]
public MagickErrorException(string message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class ImageMagick.MagickException : Exception {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<MagickException> _relatedExceptions;
    public IReadOnlyList`1<MagickException> RelatedExceptions { get; }
    public MagickException(string message);
    public IReadOnlyList`1<MagickException> get_RelatedExceptions();
    public void SetRelatedException(List`1<MagickException> relatedExceptions);
}
public class ImageMagick.MagickFileOpenErrorException : MagickErrorException {
    [NullableContextAttribute("1")]
public MagickFileOpenErrorException(string message);
}
public class ImageMagick.MagickFileOpenWarningException : MagickWarningException {
    [NullableContextAttribute("1")]
public MagickFileOpenWarningException(string message);
}
public enum ImageMagick.MagickFormat : Enum {
    public int value__;
    public static MagickFormat Unknown;
    public static MagickFormat ThreeFr;
    public static MagickFormat ThreeG2;
    public static MagickFormat ThreeGp;
    public static MagickFormat A;
    public static MagickFormat Aai;
    public static MagickFormat Ai;
    public static MagickFormat APng;
    public static MagickFormat Art;
    public static MagickFormat Arw;
    public static MagickFormat Ashlar;
    public static MagickFormat Avi;
    public static MagickFormat Avif;
    public static MagickFormat Avs;
    public static MagickFormat B;
    public static MagickFormat Bayer;
    public static MagickFormat Bayera;
    public static MagickFormat Bgr;
    public static MagickFormat Bgra;
    public static MagickFormat Bgro;
    public static MagickFormat Bmp;
    public static MagickFormat Bmp2;
    public static MagickFormat Bmp3;
    public static MagickFormat Brf;
    public static MagickFormat C;
    public static MagickFormat Cal;
    public static MagickFormat Cals;
    public static MagickFormat Canvas;
    public static MagickFormat Caption;
    public static MagickFormat Cin;
    public static MagickFormat Cip;
    public static MagickFormat Clip;
    public static MagickFormat Clipboard;
    public static MagickFormat Cmyk;
    public static MagickFormat Cmyka;
    public static MagickFormat Cr2;
    public static MagickFormat Cr3;
    public static MagickFormat Crw;
    public static MagickFormat Cube;
    public static MagickFormat Cur;
    public static MagickFormat Cut;
    public static MagickFormat Data;
    public static MagickFormat Dcm;
    public static MagickFormat Dcr;
    public static MagickFormat Dcraw;
    public static MagickFormat Dcx;
    public static MagickFormat Dds;
    public static MagickFormat Dfont;
    public static MagickFormat Dib;
    public static MagickFormat Dng;
    public static MagickFormat Dpx;
    public static MagickFormat Dxt1;
    public static MagickFormat Dxt5;
    public static MagickFormat Emf;
    public static MagickFormat Epdf;
    public static MagickFormat Epi;
    public static MagickFormat Eps;
    public static MagickFormat Eps2;
    public static MagickFormat Eps3;
    public static MagickFormat Epsf;
    public static MagickFormat Epsi;
    public static MagickFormat Ept;
    public static MagickFormat Ept2;
    public static MagickFormat Ept3;
    public static MagickFormat Erf;
    public static MagickFormat Exr;
    public static MagickFormat Farbfeld;
    public static MagickFormat Fax;
    public static MagickFormat Ff;
    public static MagickFormat Fff;
    public static MagickFormat File;
    public static MagickFormat Fits;
    public static MagickFormat Fl32;
    public static MagickFormat Flv;
    public static MagickFormat Fractal;
    public static MagickFormat Ftp;
    public static MagickFormat Fts;
    public static MagickFormat Ftxt;
    public static MagickFormat G;
    public static MagickFormat G3;
    public static MagickFormat G4;
    public static MagickFormat Gif;
    public static MagickFormat Gif87;
    public static MagickFormat Gradient;
    public static MagickFormat Gray;
    public static MagickFormat Graya;
    public static MagickFormat Group4;
    public static MagickFormat Hald;
    public static MagickFormat Hdr;
    public static MagickFormat Heic;
    public static MagickFormat Heif;
    public static MagickFormat Histogram;
    public static MagickFormat Hrz;
    public static MagickFormat Htm;
    public static MagickFormat Html;
    public static MagickFormat Http;
    public static MagickFormat Https;
    public static MagickFormat Icb;
    public static MagickFormat Ico;
    public static MagickFormat Icon;
    public static MagickFormat Iiq;
    public static MagickFormat Info;
    public static MagickFormat Inline;
    public static MagickFormat Ipl;
    public static MagickFormat Isobrl;
    public static MagickFormat Isobrl6;
    public static MagickFormat J2c;
    public static MagickFormat J2k;
    public static MagickFormat Jng;
    public static MagickFormat Jnx;
    public static MagickFormat Jp2;
    public static MagickFormat Jpc;
    public static MagickFormat Jpe;
    public static MagickFormat Jpeg;
    public static MagickFormat Jpg;
    public static MagickFormat Jpm;
    public static MagickFormat Jps;
    public static MagickFormat Jpt;
    public static MagickFormat Json;
    public static MagickFormat Jxl;
    public static MagickFormat K;
    public static MagickFormat K25;
    public static MagickFormat Kdc;
    public static MagickFormat Label;
    public static MagickFormat M;
    public static MagickFormat M2v;
    public static MagickFormat M4v;
    public static MagickFormat Mac;
    public static MagickFormat Map;
    public static MagickFormat Mask;
    public static MagickFormat Mat;
    public static MagickFormat Matte;
    public static MagickFormat Mdc;
    public static MagickFormat Mef;
    public static MagickFormat Miff;
    public static MagickFormat Mkv;
    public static MagickFormat Mng;
    public static MagickFormat Mono;
    public static MagickFormat Mos;
    public static MagickFormat Mov;
    public static MagickFormat Mp4;
    public static MagickFormat Mpc;
    public static MagickFormat Mpeg;
    public static MagickFormat Mpg;
    public static MagickFormat Mpo;
    public static MagickFormat Mrw;
    public static MagickFormat Msl;
    public static MagickFormat Msvg;
    public static MagickFormat Mtv;
    public static MagickFormat Mvg;
    public static MagickFormat Nef;
    public static MagickFormat Nrw;
    public static MagickFormat Null;
    public static MagickFormat O;
    public static MagickFormat Ora;
    public static MagickFormat Orf;
    public static MagickFormat Otb;
    public static MagickFormat Otf;
    public static MagickFormat Pal;
    public static MagickFormat Palm;
    public static MagickFormat Pam;
    public static MagickFormat Pango;
    public static MagickFormat Pattern;
    public static MagickFormat Pbm;
    public static MagickFormat Pcd;
    public static MagickFormat Pcds;
    public static MagickFormat Pcl;
    public static MagickFormat Pct;
    public static MagickFormat Pcx;
    public static MagickFormat Pdb;
    public static MagickFormat Pdf;
    public static MagickFormat Pdfa;
    public static MagickFormat Pef;
    public static MagickFormat Pes;
    public static MagickFormat Pfa;
    public static MagickFormat Pfb;
    public static MagickFormat Pfm;
    public static MagickFormat Pgx;
    public static MagickFormat Pgm;
    public static MagickFormat Phm;
    public static MagickFormat Picon;
    public static MagickFormat Pict;
    public static MagickFormat Pix;
    public static MagickFormat Pjpeg;
    public static MagickFormat Plasma;
    public static MagickFormat Png;
    public static MagickFormat Png00;
    public static MagickFormat Png24;
    public static MagickFormat Png32;
    public static MagickFormat Png48;
    public static MagickFormat Png64;
    public static MagickFormat Png8;
    public static MagickFormat Pnm;
    public static MagickFormat Pocketmod;
    public static MagickFormat Ppm;
    public static MagickFormat Ps;
    public static MagickFormat Ps2;
    public static MagickFormat Ps3;
    public static MagickFormat Psb;
    public static MagickFormat Psd;
    public static MagickFormat Ptif;
    public static MagickFormat Pwp;
    public static MagickFormat Qoi;
    public static MagickFormat R;
    public static MagickFormat RadialGradient;
    public static MagickFormat Raf;
    public static MagickFormat Ras;
    public static MagickFormat Raw;
    public static MagickFormat Rgb;
    public static MagickFormat Rgb565;
    public static MagickFormat Rgba;
    public static MagickFormat Rgbo;
    public static MagickFormat Rgf;
    public static MagickFormat Rla;
    public static MagickFormat Rle;
    public static MagickFormat Rmf;
    public static MagickFormat Rsvg;
    public static MagickFormat Rw2;
    public static MagickFormat Rwl;
    public static MagickFormat Scr;
    public static MagickFormat Screenshot;
    public static MagickFormat Sct;
    public static MagickFormat Sfw;
    public static MagickFormat Sgi;
    public static MagickFormat Shtml;
    public static MagickFormat Six;
    public static MagickFormat Sixel;
    public static MagickFormat SparseColor;
    public static MagickFormat Sr2;
    public static MagickFormat Srf;
    public static MagickFormat Srw;
    public static MagickFormat Stegano;
    public static MagickFormat Sti;
    public static MagickFormat StrImg;
    public static MagickFormat Sun;
    public static MagickFormat Svg;
    public static MagickFormat Svgz;
    public static MagickFormat Text;
    public static MagickFormat Tga;
    public static MagickFormat Thumbnail;
    public static MagickFormat Tif;
    public static MagickFormat Tiff;
    public static MagickFormat Tiff64;
    public static MagickFormat Tile;
    public static MagickFormat Tim;
    public static MagickFormat Tm2;
    public static MagickFormat Ttc;
    public static MagickFormat Ttf;
    public static MagickFormat Txt;
    public static MagickFormat Ubrl;
    public static MagickFormat Ubrl6;
    public static MagickFormat Uil;
    public static MagickFormat Uyvy;
    public static MagickFormat Vda;
    public static MagickFormat Vicar;
    public static MagickFormat Vid;
    public static MagickFormat WebM;
    public static MagickFormat Viff;
    public static MagickFormat Vips;
    public static MagickFormat Vst;
    public static MagickFormat WebP;
    public static MagickFormat Wbmp;
    public static MagickFormat Wmf;
    public static MagickFormat Wmv;
    public static MagickFormat Wpg;
    public static MagickFormat X3f;
    public static MagickFormat Xbm;
    public static MagickFormat Xc;
    public static MagickFormat Xcf;
    public static MagickFormat Xpm;
    public static MagickFormat Xps;
    public static MagickFormat Xv;
    public static MagickFormat Y;
    public static MagickFormat Yaml;
    public static MagickFormat Ycbcr;
    public static MagickFormat Ycbcra;
    public static MagickFormat Yuv;
}
public class ImageMagick.MagickImageErrorException : MagickErrorException {
    [NullableContextAttribute("1")]
public MagickImageErrorException(string message);
}
public class ImageMagick.MagickImageWarningException : MagickWarningException {
    [NullableContextAttribute("1")]
public MagickImageWarningException(string message);
}
public class ImageMagick.MagickMissingDelegateErrorException : MagickErrorException {
    [NullableContextAttribute("1")]
public MagickMissingDelegateErrorException(string message);
}
public class ImageMagick.MagickMissingDelegateWarningException : MagickWarningException {
    [NullableContextAttribute("1")]
public MagickMissingDelegateWarningException(string message);
}
public class ImageMagick.MagickModuleErrorException : MagickErrorException {
    [NullableContextAttribute("1")]
public MagickModuleErrorException(string message);
}
public class ImageMagick.MagickModuleWarningException : MagickWarningException {
    [NullableContextAttribute("1")]
public MagickModuleWarningException(string message);
}
public class ImageMagick.MagickOptionErrorException : MagickErrorException {
    [NullableContextAttribute("1")]
public MagickOptionErrorException(string message);
}
public class ImageMagick.MagickOptionWarningException : MagickWarningException {
    [NullableContextAttribute("1")]
public MagickOptionWarningException(string message);
}
public class ImageMagick.MagickPolicyErrorException : MagickErrorException {
    [NullableContextAttribute("1")]
public MagickPolicyErrorException(string message);
}
public class ImageMagick.MagickPolicyWarningException : MagickErrorException {
    [NullableContextAttribute("1")]
public MagickPolicyWarningException(string message);
}
public class ImageMagick.MagickRegistryErrorException : MagickErrorException {
    [NullableContextAttribute("1")]
public MagickRegistryErrorException(string message);
}
public class ImageMagick.MagickRegistryWarningException : MagickWarningException {
    [NullableContextAttribute("1")]
public MagickRegistryWarningException(string message);
}
public class ImageMagick.MagickResourceLimitErrorException : MagickErrorException {
    [NullableContextAttribute("1")]
public MagickResourceLimitErrorException(string message);
}
public class ImageMagick.MagickResourceLimitWarningException : MagickWarningException {
    [NullableContextAttribute("1")]
public MagickResourceLimitWarningException(string message);
}
public class ImageMagick.MagickStreamErrorException : MagickErrorException {
    [NullableContextAttribute("1")]
public MagickStreamErrorException(string message);
}
public class ImageMagick.MagickStreamWarningException : MagickWarningException {
    [NullableContextAttribute("1")]
public MagickStreamWarningException(string message);
}
public class ImageMagick.MagickTypeErrorException : MagickErrorException {
    [NullableContextAttribute("1")]
public MagickTypeErrorException(string message);
}
public class ImageMagick.MagickTypeWarningException : MagickWarningException {
    [NullableContextAttribute("1")]
public MagickTypeWarningException(string message);
}
public class ImageMagick.MagickWarningException : MagickException {
    [NullableContextAttribute("1")]
public MagickWarningException(string message);
}
[ExtensionAttribute]
internal static class ImageMagick.MemoryStreamExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void WriteBytes(MemoryStream stream, Byte[] bytes);
}
public enum ImageMagick.MorphologyMethod : Enum {
    public int value__;
    public static MorphologyMethod Undefined;
    public static MorphologyMethod Convolve;
    public static MorphologyMethod Correlate;
    public static MorphologyMethod Erode;
    public static MorphologyMethod Dilate;
    public static MorphologyMethod ErodeIntensity;
    public static MorphologyMethod DilateIntensity;
    public static MorphologyMethod IterativeDistance;
    public static MorphologyMethod Open;
    public static MorphologyMethod Close;
    public static MorphologyMethod OpenIntensity;
    public static MorphologyMethod CloseIntensity;
    public static MorphologyMethod Smooth;
    public static MorphologyMethod EdgeIn;
    public static MorphologyMethod EdgeOut;
    public static MorphologyMethod Edge;
    public static MorphologyMethod TopHat;
    public static MorphologyMethod BottomHat;
    public static MorphologyMethod HitAndMiss;
    public static MorphologyMethod Thinning;
    public static MorphologyMethod Thicken;
    public static MorphologyMethod Distance;
    public static MorphologyMethod Voronoi;
}
public enum ImageMagick.NoiseType : Enum {
    public int value__;
    public static NoiseType Undefined;
    public static NoiseType Uniform;
    public static NoiseType Gaussian;
    public static NoiseType MultiplicativeGaussian;
    public static NoiseType Impulse;
    public static NoiseType Laplacian;
    public static NoiseType Poisson;
    public static NoiseType Random;
}
[IsReadOnlyAttribute]
public class ImageMagick.Number : ValueType {
    private UInt32 _value;
    public Number(UInt32 value);
    public static Number op_Explicit(int value);
    public static Number op_Explicit(UInt32 value);
    public static Number op_Explicit(short value);
    public static Number op_Explicit(ushort value);
    public static UInt32 op_Explicit(Number number);
    public static ushort op_Explicit(Number number);
    public static bool op_Equality(Number left, Number right);
    public static bool op_Inequality(Number left, Number right);
    public static bool op_GreaterThan(Number left, Number right);
    public static bool op_LessThan(Number left, Number right);
    public static bool op_GreaterThanOrEqual(Number left, Number right);
    public static bool op_LessThanOrEqual(Number left, Number right);
    public sealed virtual int CompareTo(Number other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(Number other);
    public virtual int GetHashCode();
    [NullableContextAttribute("1")]
public string ToString(IFormatProvider provider);
}
public enum ImageMagick.OpenCLDeviceType : Enum {
    public int value__;
    public static OpenCLDeviceType Undefined;
    public static OpenCLDeviceType Cpu;
    public static OpenCLDeviceType Gpu;
}
public enum ImageMagick.OrientationType : Enum {
    public int value__;
    public static OrientationType Undefined;
    public static OrientationType TopLeft;
    public static OrientationType TopRight;
    public static OrientationType BottomRight;
    public static OrientationType BottomLeft;
    public static OrientationType LeftTop;
    public static OrientationType RightTop;
    public static OrientationType RightBottom;
    public static OrientationType LeftBottom;
}
public enum ImageMagick.PaintMethod : Enum {
    public int value__;
    public static PaintMethod Undefined;
    public static PaintMethod Point;
    public static PaintMethod Replace;
    public static PaintMethod Floodfill;
    public static PaintMethod FillToBorder;
    public static PaintMethod Reset;
}
[IsReadOnlyAttribute]
public class ImageMagick.Percentage : ValueType {
    private double _value;
    public Percentage(double value);
    public Percentage(int value);
    public static Percentage op_Explicit(double value);
    public static Percentage op_Explicit(int value);
    public static double op_Explicit(Percentage percentage);
    public static UInt32 op_Explicit(Percentage percentage);
    public static bool op_Equality(Percentage left, Percentage right);
    public static bool op_Inequality(Percentage left, Percentage right);
    public static bool op_GreaterThan(Percentage left, Percentage right);
    public static bool op_LessThan(Percentage left, Percentage right);
    public static bool op_GreaterThanOrEqual(Percentage left, Percentage right);
    public static bool op_LessThanOrEqual(Percentage left, Percentage right);
    public static double op_Multiply(double value, Percentage percentage);
    public static int op_Multiply(int value, Percentage percentage);
    public sealed virtual int CompareTo(Percentage other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(Percentage other);
    public virtual int GetHashCode();
    public double Multiply(double value);
    public int Multiply(int value);
    public double ToDouble();
    public int ToInt32();
    public UInt32 ToUInt32();
    [NullableContextAttribute("1")]
public virtual string ToString();
}
public enum ImageMagick.PixelChannel : Enum {
    public int value__;
    public static PixelChannel Red;
    public static PixelChannel Cyan;
    public static PixelChannel Gray;
    public static PixelChannel Green;
    public static PixelChannel Magenta;
    public static PixelChannel Blue;
    public static PixelChannel Yellow;
    public static PixelChannel Black;
    public static PixelChannel Alpha;
    public static PixelChannel Index;
    public static PixelChannel Meta0;
    public static PixelChannel Meta1;
    public static PixelChannel Meta2;
    public static PixelChannel Meta3;
    public static PixelChannel Meta4;
    public static PixelChannel Meta5;
    public static PixelChannel Meta6;
    public static PixelChannel Meta7;
    public static PixelChannel Meta8;
    public static PixelChannel Meta9;
    public static PixelChannel Meta10;
    public static PixelChannel Meta11;
    public static PixelChannel Meta12;
    public static PixelChannel Meta13;
    public static PixelChannel Meta14;
    public static PixelChannel Meta15;
    public static PixelChannel Meta16;
    public static PixelChannel Meta17;
    public static PixelChannel Meta18;
    public static PixelChannel Meta19;
    public static PixelChannel Meta20;
    public static PixelChannel Meta21;
    public static PixelChannel Meta22;
    public static PixelChannel Meta23;
    public static PixelChannel Meta24;
    public static PixelChannel Meta25;
    public static PixelChannel Meta26;
    public static PixelChannel Meta27;
    public static PixelChannel Meta28;
    public static PixelChannel Meta29;
    public static PixelChannel Meta30;
    public static PixelChannel Meta31;
    public static PixelChannel Meta32;
    public static PixelChannel Meta33;
    public static PixelChannel Meta34;
    public static PixelChannel Meta35;
    public static PixelChannel Meta36;
    public static PixelChannel Meta37;
    public static PixelChannel Meta38;
    public static PixelChannel Meta39;
    public static PixelChannel Meta40;
    public static PixelChannel Meta41;
    public static PixelChannel Meta42;
    public static PixelChannel Meta43;
    public static PixelChannel Meta44;
    public static PixelChannel Meta45;
    public static PixelChannel Meta46;
    public static PixelChannel Meta47;
    public static PixelChannel Meta48;
    public static PixelChannel Meta49;
    public static PixelChannel Meta50;
    public static PixelChannel Meta51;
    public static PixelChannel Meta52;
    public static PixelChannel Composite;
}
public enum ImageMagick.PixelIntensityMethod : Enum {
    public int value__;
    public static PixelIntensityMethod Undefined;
    public static PixelIntensityMethod Average;
    public static PixelIntensityMethod Brightness;
    public static PixelIntensityMethod Lightness;
    public static PixelIntensityMethod MS;
    public static PixelIntensityMethod Rec601Luma;
    public static PixelIntensityMethod Rec601Luminance;
    public static PixelIntensityMethod Rec709Luma;
    public static PixelIntensityMethod Rec709Luminance;
    public static PixelIntensityMethod RMS;
}
public enum ImageMagick.PixelInterpolateMethod : Enum {
    public int value__;
    public static PixelInterpolateMethod Undefined;
    public static PixelInterpolateMethod Average;
    public static PixelInterpolateMethod Average9;
    public static PixelInterpolateMethod Average16;
    public static PixelInterpolateMethod Background;
    public static PixelInterpolateMethod Bilinear;
    public static PixelInterpolateMethod Blend;
    public static PixelInterpolateMethod Catrom;
    public static PixelInterpolateMethod Integer;
    public static PixelInterpolateMethod Mesh;
    public static PixelInterpolateMethod Nearest;
    public static PixelInterpolateMethod Spline;
}
public enum ImageMagick.PixelMapping : Enum {
    public int value__;
    public static PixelMapping ABGR;
    public static PixelMapping ARGB;
    public static PixelMapping CMYK;
    public static PixelMapping CMYKA;
    public static PixelMapping BGR;
    public static PixelMapping BGRA;
    public static PixelMapping RGB;
    public static PixelMapping RGBA;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ImageMagick.PointD : ValueType {
    [CompilerGeneratedAttribute]
private double <X>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Y>k__BackingField;
    public double X { get; private set; }
    public double Y { get; private set; }
    public PointD(double xy);
    public PointD(double x, double y);
    public PointD(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public double get_X();
    [CompilerGeneratedAttribute]
private void set_X(double value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public double get_Y();
    [CompilerGeneratedAttribute]
private void set_Y(double value);
    public static bool op_Equality(PointD left, PointD right);
    public static bool op_Inequality(PointD left, PointD right);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(PointD other);
    public virtual int GetHashCode();
    public virtual string ToString();
    private void Initialize(string value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class ImageMagick.ProgressEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <Origin>k__BackingField;
    [CompilerGeneratedAttribute]
private Percentage <Progress>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Cancel>k__BackingField;
    public string Origin { get; }
    public Percentage Progress { get; }
    public bool Cancel { get; public set; }
    public ProgressEventArgs(string origin, int offset, int extent);
    [CompilerGeneratedAttribute]
public string get_Origin();
    [CompilerGeneratedAttribute]
public Percentage get_Progress();
    [CompilerGeneratedAttribute]
public bool get_Cancel();
    [CompilerGeneratedAttribute]
public void set_Cancel(bool value);
}
[IsReadOnlyAttribute]
public class ImageMagick.Rational : ValueType {
    [CompilerGeneratedAttribute]
private UInt32 <Numerator>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Denominator>k__BackingField;
    public UInt32 Numerator { get; }
    public UInt32 Denominator { get; }
    public Rational(double value);
    public Rational(double value, bool bestPrecision);
    public Rational(UInt32 value);
    public Rational(UInt32 numerator, UInt32 denominator);
    public Rational(UInt32 numerator, UInt32 denominator, bool simplify);
    [CompilerGeneratedAttribute]
public UInt32 get_Numerator();
    [CompilerGeneratedAttribute]
public UInt32 get_Denominator();
    public static bool op_Equality(Rational left, Rational right);
    public static bool op_Inequality(Rational left, Rational right);
    public static Rational FromDouble(double value);
    public static Rational FromDouble(double value, bool bestPrecision);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(Rational other);
    public virtual int GetHashCode();
    public double ToDouble();
    [NullableContextAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("1")]
public string ToString(IFormatProvider provider);
}
public enum ImageMagick.RenderingIntent : Enum {
    public int value__;
    public static RenderingIntent Undefined;
    public static RenderingIntent Saturation;
    public static RenderingIntent Perceptual;
    public static RenderingIntent Absolute;
    public static RenderingIntent Relative;
}
[IsReadOnlyAttribute]
public class ImageMagick.SignedRational : ValueType {
    [CompilerGeneratedAttribute]
private int <Numerator>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Denominator>k__BackingField;
    public int Numerator { get; }
    public int Denominator { get; }
    public SignedRational(double value);
    public SignedRational(double value, bool bestPrecision);
    public SignedRational(int value);
    public SignedRational(int numerator, int denominator);
    public SignedRational(int numerator, int denominator, bool simplify);
    [CompilerGeneratedAttribute]
public int get_Numerator();
    [CompilerGeneratedAttribute]
public int get_Denominator();
    public static bool op_Equality(SignedRational left, SignedRational right);
    public static bool op_Inequality(SignedRational left, SignedRational right);
    public static SignedRational FromDouble(double value);
    public static SignedRational FromDouble(double value, bool bestPrecision);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(SignedRational other);
    public virtual int GetHashCode();
    public double ToDouble();
    [NullableContextAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("1")]
public string ToString(IFormatProvider provider);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("64")]
internal class ImageMagick.SourceGenerator.CleanupAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Arguments>k__BackingField;
    public string Name { get; public set; }
    public string Arguments { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Arguments();
    [CompilerGeneratedAttribute]
public void set_Arguments(string value);
}
[AttributeUsageAttribute("1028")]
internal class ImageMagick.SourceGenerator.DrawablesAttribute : Attribute {
}
[AttributeUsageAttribute("16")]
internal class ImageMagick.SourceGenerator.ExifTagDescriptionAttribute : Attribute {
}
[AttributeUsageAttribute("4")]
internal class ImageMagick.SourceGenerator.NativeInteropAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <CustomInstance>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ManagedToNative>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <QuantumType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StaticDispose>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RaiseWarnings>k__BackingField;
    public bool CustomInstance { get; public set; }
    public bool ManagedToNative { get; public set; }
    public bool QuantumType { get; public set; }
    public bool StaticDispose { get; public set; }
    public bool RaiseWarnings { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_CustomInstance();
    [CompilerGeneratedAttribute]
public void set_CustomInstance(bool value);
    [CompilerGeneratedAttribute]
public bool get_ManagedToNative();
    [CompilerGeneratedAttribute]
public void set_ManagedToNative(bool value);
    [CompilerGeneratedAttribute]
public bool get_QuantumType();
    [CompilerGeneratedAttribute]
public void set_QuantumType(bool value);
    [CompilerGeneratedAttribute]
public bool get_StaticDispose();
    [CompilerGeneratedAttribute]
public void set_StaticDispose(bool value);
    [CompilerGeneratedAttribute]
public bool get_RaiseWarnings();
    [CompilerGeneratedAttribute]
public void set_RaiseWarnings(bool value);
}
[AttributeUsageAttribute("1028")]
internal class ImageMagick.SourceGenerator.PathsAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class ImageMagick.SourceGenerator.ReadInstanceAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class ImageMagick.SourceGenerator.SetInstanceAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class ImageMagick.SourceGenerator.ThrowsAttribute : Attribute {
}
public enum ImageMagick.SparseColorMethod : Enum {
    public int value__;
    public static SparseColorMethod Undefined;
    public static SparseColorMethod Barycentric;
    public static SparseColorMethod Bilinear;
    public static SparseColorMethod Polynomial;
    public static SparseColorMethod Shepards;
    public static SparseColorMethod Voronoi;
    public static SparseColorMethod Inverse;
    public static SparseColorMethod Manhattan;
}
public enum ImageMagick.StatisticType : Enum {
    public int value__;
    public static StatisticType Undefined;
    public static StatisticType Gradient;
    public static StatisticType Maximum;
    public static StatisticType Mean;
    public static StatisticType Median;
    public static StatisticType Minimum;
    public static StatisticType Mode;
    public static StatisticType Nonpeak;
    public static StatisticType RootMeanSquare;
    public static StatisticType StandardDeviation;
}
public enum ImageMagick.StorageType : Enum {
    public int value__;
    public static StorageType Undefined;
    public static StorageType Char;
    public static StorageType Double;
    public static StorageType Float;
    public static StorageType Int32;
    public static StorageType Int64;
    public static StorageType Quantum;
    public static StorageType Short;
}
public enum ImageMagick.TextAlignment : Enum {
    public int value__;
    public static TextAlignment Undefined;
    public static TextAlignment Left;
    public static TextAlignment Center;
    public static TextAlignment Right;
}
public enum ImageMagick.TextDecoration : Enum {
    public int value__;
    public static TextDecoration Undefined;
    public static TextDecoration None;
    public static TextDecoration Underline;
    public static TextDecoration Overline;
    public static TextDecoration LineThrough;
}
public enum ImageMagick.TextDirection : Enum {
    public int value__;
    public static TextDirection Undefined;
    public static TextDirection RightToLeft;
    public static TextDirection LeftToRight;
}
[IsReadOnlyAttribute]
public class ImageMagick.Threshold : ValueType {
    [CompilerGeneratedAttribute]
private double <Minimum>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Maximum>k__BackingField;
    public double Minimum { get; }
    public double Maximum { get; }
    public Threshold(double minimum);
    public Threshold(double minimum, double maximum);
    [CompilerGeneratedAttribute]
public double get_Minimum();
    [CompilerGeneratedAttribute]
public double get_Maximum();
    public static bool op_Equality(Threshold left, Threshold right);
    public static bool op_Inequality(Threshold left, Threshold right);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(Threshold other);
    public virtual int GetHashCode();
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class ImageMagick.Throw : object {
    public static void IfFalse(string paramName, bool condition, string message);
    public static void IfFalse(string paramName, bool condition, string message, T0 arg0);
    public static void IfNull(string paramName, object value);
    public static void IfNull(string paramName, object value, string message);
    public static void IfNullOrEmpty(string paramName, Stream value);
    public static void IfNullOrEmpty(string paramName, string value);
    public static void IfNullOrEmpty(string paramName, string value, string message);
    public static void IfNullOrEmpty(string paramName, Array value);
    public static void IfNegative(string paramName, double value);
    public static void IfNegative(string paramName, Percentage value);
    public static void IfOutOfRange(string paramName, int index, UInt32 length);
    public static void IfOutOfRange(string paramName, int min, int max, int value, string message);
    public static void IfOutOfRange(string paramName, int min, int max, int value, string message, T arg0);
    public static void IfOutOfRange(string paramName, Percentage value);
    public static void IfTrue(string paramName, bool condition, string message);
    public static void IfTrue(string paramName, bool condition, string message, T0 arg0);
    public static void IfTrue(string paramName, bool condition, string message, T0 arg0, T1 arg1);
    private static string FormatMessage(string message, Object[] args);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class ImageMagick.TypeHelper : object {
    public static T GetCustomAttribute(Type type);
    public static Stream GetManifestResourceStream(Type type, string resourcePath, string resourceName);
}
internal class ImageMagick.UnknownExifTag : ExifTag {
    internal UnknownExifTag(ExifTagValue value);
}
public enum ImageMagick.VirtualPixelMethod : Enum {
    public int value__;
    public static VirtualPixelMethod Undefined;
    public static VirtualPixelMethod Background;
    public static VirtualPixelMethod Dither;
    public static VirtualPixelMethod Edge;
    public static VirtualPixelMethod Mirror;
    public static VirtualPixelMethod Random;
    public static VirtualPixelMethod Tile;
    public static VirtualPixelMethod Transparent;
    public static VirtualPixelMethod Mask;
    public static VirtualPixelMethod Black;
    public static VirtualPixelMethod Gray;
    public static VirtualPixelMethod White;
    public static VirtualPixelMethod HorizontalTile;
    public static VirtualPixelMethod VerticalTile;
    public static VirtualPixelMethod HorizontalTileEdge;
    public static VirtualPixelMethod VerticalTileEdge;
    public static VirtualPixelMethod CheckerTile;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ImageMagick.WarningEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private MagickWarningException <Exception>k__BackingField;
    public string Message { get; }
    public MagickWarningException Exception { get; }
    public WarningEventArgs(MagickWarningException exception);
    public string get_Message();
    [CompilerGeneratedAttribute]
public MagickWarningException get_Exception();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class ImageMagick.XmlHelper : object {
    public static XmlDocument CreateDocument();
    public static XmlElement CreateElement(XmlNode node, string name);
    public static XmlReaderSettings CreateReaderSettings();
    public static void SetAttribute(XmlElement element, string name, TType value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ImageMagick.XmpProfile : ImageProfile {
    public XmpProfile(Byte[] data);
    public XmpProfile(IXPathNavigable document);
    public XmpProfile(XDocument document);
    public XmpProfile(Stream stream);
    public XmpProfile(string fileName);
    public static XmpProfile FromIXPathNavigable(IXPathNavigable document);
    public static XmpProfile FromXDocument(XDocument document);
    [NullableContextAttribute("2")]
public sealed virtual XmlReader CreateReader();
    [NullableContextAttribute("2")]
public sealed virtual IXPathNavigable ToIXPathNavigable();
    [NullableContextAttribute("2")]
public sealed virtual XDocument ToXDocument();
    private static XmlWriter CreateXmlWriter(MemoryStream memStream);
    private static Byte[] CheckTrailingNULL(Byte[] data);
}
